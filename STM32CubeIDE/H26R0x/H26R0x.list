
H26R0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a444  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037f8  0801a500  0801a500  0002a500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dcf8  0801dcf8  00030a84  2**0
                  CONTENTS
  4 .ARM          00000008  0801dcf8  0801dcf8  0002dcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dd00  0801dd00  00030a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801dd00  0801dd00  0002dd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dd08  0801dd08  0002dd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a84  20000000  0801dd0c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006780  20000a88  0801e790  00030a88  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007208  0801e790  00037208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a84  2**0
                  CONTENTS, READONLY
 12 .debug_info   00055193  00000000  00000000  00030aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000093ff  00000000  00000000  00085c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001fe5d  00000000  00000000  0008f03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf0  00000000  00000000  000aeea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002328  00000000  00000000  000b0a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029cb5  00000000  00000000  000b2db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a2fa  00000000  00000000  000dca6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6d67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b74  00000000  00000000  000e6dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000ed930  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000ed9fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a88 	.word	0x20000a88
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801a4e8 	.word	0x0801a4e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a8c 	.word	0x20000a8c
 8000100:	0801a4e8 	.word	0x0801a4e8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fff3 	bl	8002438 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 ff3d 	bl	80022dc <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 ffe5 	bl	8002438 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 ffdb 	bl	8002438 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 ff5f 	bl	8002354 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 ff55 	bl	8002354 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fceb 	bl	8000e9c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc6f 	bl	8000db4 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fcdd 	bl	8000e9c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fcd3 	bl	8000e9c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc7d 	bl	8000e04 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc73 	bl	8000e04 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f8b6 	bl	80006cc <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	0415      	lsls	r5, r2, #16
 8000570:	0c2d      	lsrs	r5, r5, #16
 8000572:	000f      	movs	r7, r1
 8000574:	0001      	movs	r1, r0
 8000576:	002e      	movs	r6, r5
 8000578:	46c6      	mov	lr, r8
 800057a:	4684      	mov	ip, r0
 800057c:	0400      	lsls	r0, r0, #16
 800057e:	0c14      	lsrs	r4, r2, #16
 8000580:	0c00      	lsrs	r0, r0, #16
 8000582:	0c09      	lsrs	r1, r1, #16
 8000584:	4346      	muls	r6, r0
 8000586:	434d      	muls	r5, r1
 8000588:	4360      	muls	r0, r4
 800058a:	4361      	muls	r1, r4
 800058c:	1940      	adds	r0, r0, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	1824      	adds	r4, r4, r0
 8000592:	b500      	push	{lr}
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2080      	movs	r0, #128	; 0x80
 800059a:	0240      	lsls	r0, r0, #9
 800059c:	4680      	mov	r8, r0
 800059e:	4441      	add	r1, r8
 80005a0:	0c25      	lsrs	r5, r4, #16
 80005a2:	186d      	adds	r5, r5, r1
 80005a4:	4661      	mov	r1, ip
 80005a6:	4359      	muls	r1, r3
 80005a8:	437a      	muls	r2, r7
 80005aa:	0430      	lsls	r0, r6, #16
 80005ac:	1949      	adds	r1, r1, r5
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	0c00      	lsrs	r0, r0, #16
 80005b2:	1820      	adds	r0, r4, r0
 80005b4:	1889      	adds	r1, r1, r2
 80005b6:	bc80      	pop	{r7}
 80005b8:	46b8      	mov	r8, r7
 80005ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005bc <__aeabi_f2uiz>:
 80005bc:	219e      	movs	r1, #158	; 0x9e
 80005be:	b510      	push	{r4, lr}
 80005c0:	05c9      	lsls	r1, r1, #23
 80005c2:	1c04      	adds	r4, r0, #0
 80005c4:	f7ff ffa8 	bl	8000518 <__aeabi_fcmpge>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d103      	bne.n	80005d4 <__aeabi_f2uiz+0x18>
 80005cc:	1c20      	adds	r0, r4, #0
 80005ce:	f000 ff91 	bl	80014f4 <__aeabi_f2iz>
 80005d2:	bd10      	pop	{r4, pc}
 80005d4:	219e      	movs	r1, #158	; 0x9e
 80005d6:	1c20      	adds	r0, r4, #0
 80005d8:	05c9      	lsls	r1, r1, #23
 80005da:	f000 fdc3 	bl	8001164 <__aeabi_fsub>
 80005de:	f000 ff89 	bl	80014f4 <__aeabi_f2iz>
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	061b      	lsls	r3, r3, #24
 80005e6:	469c      	mov	ip, r3
 80005e8:	4460      	add	r0, ip
 80005ea:	e7f2      	b.n	80005d2 <__aeabi_f2uiz+0x16>

080005ec <__aeabi_d2uiz>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	2200      	movs	r2, #0
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <__aeabi_d2uiz+0x38>)
 80005f2:	0004      	movs	r4, r0
 80005f4:	000d      	movs	r5, r1
 80005f6:	f7ff ff55 	bl	80004a4 <__aeabi_dcmpge>
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d104      	bne.n	8000608 <__aeabi_d2uiz+0x1c>
 80005fe:	0020      	movs	r0, r4
 8000600:	0029      	movs	r1, r5
 8000602:	f002 fda5 	bl	8003150 <__aeabi_d2iz>
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <__aeabi_d2uiz+0x38>)
 800060a:	2200      	movs	r2, #0
 800060c:	0020      	movs	r0, r4
 800060e:	0029      	movs	r1, r5
 8000610:	f002 f9ee 	bl	80029f0 <__aeabi_dsub>
 8000614:	f002 fd9c 	bl	8003150 <__aeabi_d2iz>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	061b      	lsls	r3, r3, #24
 800061c:	469c      	mov	ip, r3
 800061e:	4460      	add	r0, ip
 8000620:	e7f1      	b.n	8000606 <__aeabi_d2uiz+0x1a>
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	41e00000 	.word	0x41e00000

08000628 <__aeabi_d2lz>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	0005      	movs	r5, r0
 800062c:	000c      	movs	r4, r1
 800062e:	2200      	movs	r2, #0
 8000630:	2300      	movs	r3, #0
 8000632:	0028      	movs	r0, r5
 8000634:	0021      	movs	r1, r4
 8000636:	f7ff ff17 	bl	8000468 <__aeabi_dcmplt>
 800063a:	2800      	cmp	r0, #0
 800063c:	d108      	bne.n	8000650 <__aeabi_d2lz+0x28>
 800063e:	0028      	movs	r0, r5
 8000640:	0021      	movs	r1, r4
 8000642:	f000 f80f 	bl	8000664 <__aeabi_d2ulz>
 8000646:	0002      	movs	r2, r0
 8000648:	000b      	movs	r3, r1
 800064a:	0010      	movs	r0, r2
 800064c:	0019      	movs	r1, r3
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	061b      	lsls	r3, r3, #24
 8000654:	18e1      	adds	r1, r4, r3
 8000656:	0028      	movs	r0, r5
 8000658:	f000 f804 	bl	8000664 <__aeabi_d2ulz>
 800065c:	2300      	movs	r3, #0
 800065e:	4242      	negs	r2, r0
 8000660:	418b      	sbcs	r3, r1
 8000662:	e7f2      	b.n	800064a <__aeabi_d2lz+0x22>

08000664 <__aeabi_d2ulz>:
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	2200      	movs	r2, #0
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <__aeabi_d2ulz+0x34>)
 800066a:	000d      	movs	r5, r1
 800066c:	0004      	movs	r4, r0
 800066e:	f001 ff53 	bl	8002518 <__aeabi_dmul>
 8000672:	f7ff ffbb 	bl	80005ec <__aeabi_d2uiz>
 8000676:	0006      	movs	r6, r0
 8000678:	f002 fdd0 	bl	800321c <__aeabi_ui2d>
 800067c:	2200      	movs	r2, #0
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <__aeabi_d2ulz+0x38>)
 8000680:	f001 ff4a 	bl	8002518 <__aeabi_dmul>
 8000684:	0002      	movs	r2, r0
 8000686:	000b      	movs	r3, r1
 8000688:	0020      	movs	r0, r4
 800068a:	0029      	movs	r1, r5
 800068c:	f002 f9b0 	bl	80029f0 <__aeabi_dsub>
 8000690:	f7ff ffac 	bl	80005ec <__aeabi_d2uiz>
 8000694:	0031      	movs	r1, r6
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	3df00000 	.word	0x3df00000
 800069c:	41f00000 	.word	0x41f00000

080006a0 <__aeabi_l2d>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	0006      	movs	r6, r0
 80006a4:	0008      	movs	r0, r1
 80006a6:	f002 fd89 	bl	80031bc <__aeabi_i2d>
 80006aa:	2200      	movs	r2, #0
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <__aeabi_l2d+0x28>)
 80006ae:	f001 ff33 	bl	8002518 <__aeabi_dmul>
 80006b2:	000d      	movs	r5, r1
 80006b4:	0004      	movs	r4, r0
 80006b6:	0030      	movs	r0, r6
 80006b8:	f002 fdb0 	bl	800321c <__aeabi_ui2d>
 80006bc:	002b      	movs	r3, r5
 80006be:	0022      	movs	r2, r4
 80006c0:	f000 ffba 	bl	8001638 <__aeabi_dadd>
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	41f00000 	.word	0x41f00000

080006cc <__udivmoddi4>:
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	4657      	mov	r7, sl
 80006d0:	464e      	mov	r6, r9
 80006d2:	4645      	mov	r5, r8
 80006d4:	46de      	mov	lr, fp
 80006d6:	b5e0      	push	{r5, r6, r7, lr}
 80006d8:	0004      	movs	r4, r0
 80006da:	000d      	movs	r5, r1
 80006dc:	4692      	mov	sl, r2
 80006de:	4699      	mov	r9, r3
 80006e0:	b083      	sub	sp, #12
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d830      	bhi.n	8000748 <__udivmoddi4+0x7c>
 80006e6:	d02d      	beq.n	8000744 <__udivmoddi4+0x78>
 80006e8:	4649      	mov	r1, r9
 80006ea:	4650      	mov	r0, sl
 80006ec:	f002 feaa 	bl	8003444 <__clzdi2>
 80006f0:	0029      	movs	r1, r5
 80006f2:	0006      	movs	r6, r0
 80006f4:	0020      	movs	r0, r4
 80006f6:	f002 fea5 	bl	8003444 <__clzdi2>
 80006fa:	1a33      	subs	r3, r6, r0
 80006fc:	4698      	mov	r8, r3
 80006fe:	3b20      	subs	r3, #32
 8000700:	469b      	mov	fp, r3
 8000702:	d433      	bmi.n	800076c <__udivmoddi4+0xa0>
 8000704:	465a      	mov	r2, fp
 8000706:	4653      	mov	r3, sl
 8000708:	4093      	lsls	r3, r2
 800070a:	4642      	mov	r2, r8
 800070c:	001f      	movs	r7, r3
 800070e:	4653      	mov	r3, sl
 8000710:	4093      	lsls	r3, r2
 8000712:	001e      	movs	r6, r3
 8000714:	42af      	cmp	r7, r5
 8000716:	d83a      	bhi.n	800078e <__udivmoddi4+0xc2>
 8000718:	42af      	cmp	r7, r5
 800071a:	d100      	bne.n	800071e <__udivmoddi4+0x52>
 800071c:	e078      	b.n	8000810 <__udivmoddi4+0x144>
 800071e:	465b      	mov	r3, fp
 8000720:	1ba4      	subs	r4, r4, r6
 8000722:	41bd      	sbcs	r5, r7
 8000724:	2b00      	cmp	r3, #0
 8000726:	da00      	bge.n	800072a <__udivmoddi4+0x5e>
 8000728:	e075      	b.n	8000816 <__udivmoddi4+0x14a>
 800072a:	2200      	movs	r2, #0
 800072c:	2300      	movs	r3, #0
 800072e:	9200      	str	r2, [sp, #0]
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	2301      	movs	r3, #1
 8000734:	465a      	mov	r2, fp
 8000736:	4093      	lsls	r3, r2
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2301      	movs	r3, #1
 800073c:	4642      	mov	r2, r8
 800073e:	4093      	lsls	r3, r2
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	e028      	b.n	8000796 <__udivmoddi4+0xca>
 8000744:	4282      	cmp	r2, r0
 8000746:	d9cf      	bls.n	80006e8 <__udivmoddi4+0x1c>
 8000748:	2200      	movs	r2, #0
 800074a:	2300      	movs	r3, #0
 800074c:	9200      	str	r2, [sp, #0]
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <__udivmoddi4+0x8e>
 8000756:	601c      	str	r4, [r3, #0]
 8000758:	605d      	str	r5, [r3, #4]
 800075a:	9800      	ldr	r0, [sp, #0]
 800075c:	9901      	ldr	r1, [sp, #4]
 800075e:	b003      	add	sp, #12
 8000760:	bcf0      	pop	{r4, r5, r6, r7}
 8000762:	46bb      	mov	fp, r7
 8000764:	46b2      	mov	sl, r6
 8000766:	46a9      	mov	r9, r5
 8000768:	46a0      	mov	r8, r4
 800076a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	1a9b      	subs	r3, r3, r2
 8000772:	4652      	mov	r2, sl
 8000774:	40da      	lsrs	r2, r3
 8000776:	4641      	mov	r1, r8
 8000778:	0013      	movs	r3, r2
 800077a:	464a      	mov	r2, r9
 800077c:	408a      	lsls	r2, r1
 800077e:	0017      	movs	r7, r2
 8000780:	4642      	mov	r2, r8
 8000782:	431f      	orrs	r7, r3
 8000784:	4653      	mov	r3, sl
 8000786:	4093      	lsls	r3, r2
 8000788:	001e      	movs	r6, r3
 800078a:	42af      	cmp	r7, r5
 800078c:	d9c4      	bls.n	8000718 <__udivmoddi4+0x4c>
 800078e:	2200      	movs	r2, #0
 8000790:	2300      	movs	r3, #0
 8000792:	9200      	str	r2, [sp, #0]
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	4643      	mov	r3, r8
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0d9      	beq.n	8000750 <__udivmoddi4+0x84>
 800079c:	07fb      	lsls	r3, r7, #31
 800079e:	0872      	lsrs	r2, r6, #1
 80007a0:	431a      	orrs	r2, r3
 80007a2:	4646      	mov	r6, r8
 80007a4:	087b      	lsrs	r3, r7, #1
 80007a6:	e00e      	b.n	80007c6 <__udivmoddi4+0xfa>
 80007a8:	42ab      	cmp	r3, r5
 80007aa:	d101      	bne.n	80007b0 <__udivmoddi4+0xe4>
 80007ac:	42a2      	cmp	r2, r4
 80007ae:	d80c      	bhi.n	80007ca <__udivmoddi4+0xfe>
 80007b0:	1aa4      	subs	r4, r4, r2
 80007b2:	419d      	sbcs	r5, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	1924      	adds	r4, r4, r4
 80007b8:	416d      	adcs	r5, r5
 80007ba:	2100      	movs	r1, #0
 80007bc:	3e01      	subs	r6, #1
 80007be:	1824      	adds	r4, r4, r0
 80007c0:	414d      	adcs	r5, r1
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d006      	beq.n	80007d4 <__udivmoddi4+0x108>
 80007c6:	42ab      	cmp	r3, r5
 80007c8:	d9ee      	bls.n	80007a8 <__udivmoddi4+0xdc>
 80007ca:	3e01      	subs	r6, #1
 80007cc:	1924      	adds	r4, r4, r4
 80007ce:	416d      	adcs	r5, r5
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d1f8      	bne.n	80007c6 <__udivmoddi4+0xfa>
 80007d4:	9800      	ldr	r0, [sp, #0]
 80007d6:	9901      	ldr	r1, [sp, #4]
 80007d8:	465b      	mov	r3, fp
 80007da:	1900      	adds	r0, r0, r4
 80007dc:	4169      	adcs	r1, r5
 80007de:	2b00      	cmp	r3, #0
 80007e0:	db24      	blt.n	800082c <__udivmoddi4+0x160>
 80007e2:	002b      	movs	r3, r5
 80007e4:	465a      	mov	r2, fp
 80007e6:	4644      	mov	r4, r8
 80007e8:	40d3      	lsrs	r3, r2
 80007ea:	002a      	movs	r2, r5
 80007ec:	40e2      	lsrs	r2, r4
 80007ee:	001c      	movs	r4, r3
 80007f0:	465b      	mov	r3, fp
 80007f2:	0015      	movs	r5, r2
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	db2a      	blt.n	800084e <__udivmoddi4+0x182>
 80007f8:	0026      	movs	r6, r4
 80007fa:	409e      	lsls	r6, r3
 80007fc:	0033      	movs	r3, r6
 80007fe:	0026      	movs	r6, r4
 8000800:	4647      	mov	r7, r8
 8000802:	40be      	lsls	r6, r7
 8000804:	0032      	movs	r2, r6
 8000806:	1a80      	subs	r0, r0, r2
 8000808:	4199      	sbcs	r1, r3
 800080a:	9000      	str	r0, [sp, #0]
 800080c:	9101      	str	r1, [sp, #4]
 800080e:	e79f      	b.n	8000750 <__udivmoddi4+0x84>
 8000810:	42a3      	cmp	r3, r4
 8000812:	d8bc      	bhi.n	800078e <__udivmoddi4+0xc2>
 8000814:	e783      	b.n	800071e <__udivmoddi4+0x52>
 8000816:	4642      	mov	r2, r8
 8000818:	2320      	movs	r3, #32
 800081a:	2100      	movs	r1, #0
 800081c:	1a9b      	subs	r3, r3, r2
 800081e:	2200      	movs	r2, #0
 8000820:	9100      	str	r1, [sp, #0]
 8000822:	9201      	str	r2, [sp, #4]
 8000824:	2201      	movs	r2, #1
 8000826:	40da      	lsrs	r2, r3
 8000828:	9201      	str	r2, [sp, #4]
 800082a:	e786      	b.n	800073a <__udivmoddi4+0x6e>
 800082c:	4642      	mov	r2, r8
 800082e:	2320      	movs	r3, #32
 8000830:	1a9b      	subs	r3, r3, r2
 8000832:	002a      	movs	r2, r5
 8000834:	4646      	mov	r6, r8
 8000836:	409a      	lsls	r2, r3
 8000838:	0023      	movs	r3, r4
 800083a:	40f3      	lsrs	r3, r6
 800083c:	4644      	mov	r4, r8
 800083e:	4313      	orrs	r3, r2
 8000840:	002a      	movs	r2, r5
 8000842:	40e2      	lsrs	r2, r4
 8000844:	001c      	movs	r4, r3
 8000846:	465b      	mov	r3, fp
 8000848:	0015      	movs	r5, r2
 800084a:	2b00      	cmp	r3, #0
 800084c:	dad4      	bge.n	80007f8 <__udivmoddi4+0x12c>
 800084e:	4642      	mov	r2, r8
 8000850:	002f      	movs	r7, r5
 8000852:	2320      	movs	r3, #32
 8000854:	0026      	movs	r6, r4
 8000856:	4097      	lsls	r7, r2
 8000858:	1a9b      	subs	r3, r3, r2
 800085a:	40de      	lsrs	r6, r3
 800085c:	003b      	movs	r3, r7
 800085e:	4333      	orrs	r3, r6
 8000860:	e7cd      	b.n	80007fe <__udivmoddi4+0x132>
 8000862:	46c0      	nop			; (mov r8, r8)

08000864 <__aeabi_fadd>:
 8000864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000866:	4646      	mov	r6, r8
 8000868:	46d6      	mov	lr, sl
 800086a:	464f      	mov	r7, r9
 800086c:	024d      	lsls	r5, r1, #9
 800086e:	0242      	lsls	r2, r0, #9
 8000870:	b5c0      	push	{r6, r7, lr}
 8000872:	0a52      	lsrs	r2, r2, #9
 8000874:	0a6e      	lsrs	r6, r5, #9
 8000876:	0047      	lsls	r7, r0, #1
 8000878:	46b0      	mov	r8, r6
 800087a:	0e3f      	lsrs	r7, r7, #24
 800087c:	004e      	lsls	r6, r1, #1
 800087e:	0fc4      	lsrs	r4, r0, #31
 8000880:	00d0      	lsls	r0, r2, #3
 8000882:	4694      	mov	ip, r2
 8000884:	003b      	movs	r3, r7
 8000886:	4682      	mov	sl, r0
 8000888:	0e36      	lsrs	r6, r6, #24
 800088a:	0fc9      	lsrs	r1, r1, #31
 800088c:	09ad      	lsrs	r5, r5, #6
 800088e:	428c      	cmp	r4, r1
 8000890:	d06d      	beq.n	800096e <__aeabi_fadd+0x10a>
 8000892:	1bb8      	subs	r0, r7, r6
 8000894:	4681      	mov	r9, r0
 8000896:	2800      	cmp	r0, #0
 8000898:	dd4d      	ble.n	8000936 <__aeabi_fadd+0xd2>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_fadd+0x3c>
 800089e:	e088      	b.n	80009b2 <__aeabi_fadd+0x14e>
 80008a0:	2fff      	cmp	r7, #255	; 0xff
 80008a2:	d05a      	beq.n	800095a <__aeabi_fadd+0xf6>
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	04db      	lsls	r3, r3, #19
 80008a8:	431d      	orrs	r5, r3
 80008aa:	464b      	mov	r3, r9
 80008ac:	2201      	movs	r2, #1
 80008ae:	2b1b      	cmp	r3, #27
 80008b0:	dc0a      	bgt.n	80008c8 <__aeabi_fadd+0x64>
 80008b2:	002b      	movs	r3, r5
 80008b4:	464a      	mov	r2, r9
 80008b6:	4649      	mov	r1, r9
 80008b8:	40d3      	lsrs	r3, r2
 80008ba:	2220      	movs	r2, #32
 80008bc:	1a52      	subs	r2, r2, r1
 80008be:	4095      	lsls	r5, r2
 80008c0:	002a      	movs	r2, r5
 80008c2:	1e55      	subs	r5, r2, #1
 80008c4:	41aa      	sbcs	r2, r5
 80008c6:	431a      	orrs	r2, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	1a9a      	subs	r2, r3, r2
 80008cc:	0153      	lsls	r3, r2, #5
 80008ce:	d400      	bmi.n	80008d2 <__aeabi_fadd+0x6e>
 80008d0:	e0b9      	b.n	8000a46 <__aeabi_fadd+0x1e2>
 80008d2:	0192      	lsls	r2, r2, #6
 80008d4:	0996      	lsrs	r6, r2, #6
 80008d6:	0030      	movs	r0, r6
 80008d8:	f002 fd96 	bl	8003408 <__clzsi2>
 80008dc:	3805      	subs	r0, #5
 80008de:	4086      	lsls	r6, r0
 80008e0:	4287      	cmp	r7, r0
 80008e2:	dd00      	ble.n	80008e6 <__aeabi_fadd+0x82>
 80008e4:	e0d4      	b.n	8000a90 <__aeabi_fadd+0x22c>
 80008e6:	0033      	movs	r3, r6
 80008e8:	1bc7      	subs	r7, r0, r7
 80008ea:	2020      	movs	r0, #32
 80008ec:	3701      	adds	r7, #1
 80008ee:	40fb      	lsrs	r3, r7
 80008f0:	1bc7      	subs	r7, r0, r7
 80008f2:	40be      	lsls	r6, r7
 80008f4:	0032      	movs	r2, r6
 80008f6:	1e56      	subs	r6, r2, #1
 80008f8:	41b2      	sbcs	r2, r6
 80008fa:	2700      	movs	r7, #0
 80008fc:	431a      	orrs	r2, r3
 80008fe:	0753      	lsls	r3, r2, #29
 8000900:	d004      	beq.n	800090c <__aeabi_fadd+0xa8>
 8000902:	230f      	movs	r3, #15
 8000904:	4013      	ands	r3, r2
 8000906:	2b04      	cmp	r3, #4
 8000908:	d000      	beq.n	800090c <__aeabi_fadd+0xa8>
 800090a:	3204      	adds	r2, #4
 800090c:	0153      	lsls	r3, r2, #5
 800090e:	d400      	bmi.n	8000912 <__aeabi_fadd+0xae>
 8000910:	e09c      	b.n	8000a4c <__aeabi_fadd+0x1e8>
 8000912:	1c7b      	adds	r3, r7, #1
 8000914:	2ffe      	cmp	r7, #254	; 0xfe
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0xb6>
 8000918:	e09a      	b.n	8000a50 <__aeabi_fadd+0x1ec>
 800091a:	0192      	lsls	r2, r2, #6
 800091c:	0a52      	lsrs	r2, r2, #9
 800091e:	4694      	mov	ip, r2
 8000920:	b2db      	uxtb	r3, r3
 8000922:	05d8      	lsls	r0, r3, #23
 8000924:	4663      	mov	r3, ip
 8000926:	07e4      	lsls	r4, r4, #31
 8000928:	4318      	orrs	r0, r3
 800092a:	4320      	orrs	r0, r4
 800092c:	bce0      	pop	{r5, r6, r7}
 800092e:	46ba      	mov	sl, r7
 8000930:	46b1      	mov	r9, r6
 8000932:	46a8      	mov	r8, r5
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	2800      	cmp	r0, #0
 8000938:	d049      	beq.n	80009ce <__aeabi_fadd+0x16a>
 800093a:	1bf3      	subs	r3, r6, r7
 800093c:	2f00      	cmp	r7, #0
 800093e:	d000      	beq.n	8000942 <__aeabi_fadd+0xde>
 8000940:	e0b6      	b.n	8000ab0 <__aeabi_fadd+0x24c>
 8000942:	4652      	mov	r2, sl
 8000944:	2a00      	cmp	r2, #0
 8000946:	d060      	beq.n	8000a0a <__aeabi_fadd+0x1a6>
 8000948:	3b01      	subs	r3, #1
 800094a:	2b00      	cmp	r3, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fadd+0xec>
 800094e:	e0fc      	b.n	8000b4a <__aeabi_fadd+0x2e6>
 8000950:	2eff      	cmp	r6, #255	; 0xff
 8000952:	d000      	beq.n	8000956 <__aeabi_fadd+0xf2>
 8000954:	e0b4      	b.n	8000ac0 <__aeabi_fadd+0x25c>
 8000956:	000c      	movs	r4, r1
 8000958:	4642      	mov	r2, r8
 800095a:	2a00      	cmp	r2, #0
 800095c:	d078      	beq.n	8000a50 <__aeabi_fadd+0x1ec>
 800095e:	2080      	movs	r0, #128	; 0x80
 8000960:	03c0      	lsls	r0, r0, #15
 8000962:	4310      	orrs	r0, r2
 8000964:	0242      	lsls	r2, r0, #9
 8000966:	0a53      	lsrs	r3, r2, #9
 8000968:	469c      	mov	ip, r3
 800096a:	23ff      	movs	r3, #255	; 0xff
 800096c:	e7d9      	b.n	8000922 <__aeabi_fadd+0xbe>
 800096e:	1bb9      	subs	r1, r7, r6
 8000970:	2900      	cmp	r1, #0
 8000972:	dd71      	ble.n	8000a58 <__aeabi_fadd+0x1f4>
 8000974:	2e00      	cmp	r6, #0
 8000976:	d03f      	beq.n	80009f8 <__aeabi_fadd+0x194>
 8000978:	2fff      	cmp	r7, #255	; 0xff
 800097a:	d0ee      	beq.n	800095a <__aeabi_fadd+0xf6>
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	04db      	lsls	r3, r3, #19
 8000980:	431d      	orrs	r5, r3
 8000982:	2201      	movs	r2, #1
 8000984:	291b      	cmp	r1, #27
 8000986:	dc07      	bgt.n	8000998 <__aeabi_fadd+0x134>
 8000988:	002a      	movs	r2, r5
 800098a:	2320      	movs	r3, #32
 800098c:	40ca      	lsrs	r2, r1
 800098e:	1a59      	subs	r1, r3, r1
 8000990:	408d      	lsls	r5, r1
 8000992:	1e6b      	subs	r3, r5, #1
 8000994:	419d      	sbcs	r5, r3
 8000996:	432a      	orrs	r2, r5
 8000998:	4452      	add	r2, sl
 800099a:	0153      	lsls	r3, r2, #5
 800099c:	d553      	bpl.n	8000a46 <__aeabi_fadd+0x1e2>
 800099e:	3701      	adds	r7, #1
 80009a0:	2fff      	cmp	r7, #255	; 0xff
 80009a2:	d055      	beq.n	8000a50 <__aeabi_fadd+0x1ec>
 80009a4:	2301      	movs	r3, #1
 80009a6:	497b      	ldr	r1, [pc, #492]	; (8000b94 <__aeabi_fadd+0x330>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	0852      	lsrs	r2, r2, #1
 80009ac:	400a      	ands	r2, r1
 80009ae:	431a      	orrs	r2, r3
 80009b0:	e7a5      	b.n	80008fe <__aeabi_fadd+0x9a>
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d02c      	beq.n	8000a10 <__aeabi_fadd+0x1ac>
 80009b6:	2301      	movs	r3, #1
 80009b8:	425b      	negs	r3, r3
 80009ba:	469c      	mov	ip, r3
 80009bc:	44e1      	add	r9, ip
 80009be:	464b      	mov	r3, r9
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x162>
 80009c4:	e0ad      	b.n	8000b22 <__aeabi_fadd+0x2be>
 80009c6:	2fff      	cmp	r7, #255	; 0xff
 80009c8:	d000      	beq.n	80009cc <__aeabi_fadd+0x168>
 80009ca:	e76e      	b.n	80008aa <__aeabi_fadd+0x46>
 80009cc:	e7c5      	b.n	800095a <__aeabi_fadd+0xf6>
 80009ce:	20fe      	movs	r0, #254	; 0xfe
 80009d0:	1c7e      	adds	r6, r7, #1
 80009d2:	4230      	tst	r0, r6
 80009d4:	d160      	bne.n	8000a98 <__aeabi_fadd+0x234>
 80009d6:	2f00      	cmp	r7, #0
 80009d8:	d000      	beq.n	80009dc <__aeabi_fadd+0x178>
 80009da:	e093      	b.n	8000b04 <__aeabi_fadd+0x2a0>
 80009dc:	4652      	mov	r2, sl
 80009de:	2a00      	cmp	r2, #0
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x180>
 80009e2:	e0b6      	b.n	8000b52 <__aeabi_fadd+0x2ee>
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d09c      	beq.n	8000922 <__aeabi_fadd+0xbe>
 80009e8:	1b52      	subs	r2, r2, r5
 80009ea:	0150      	lsls	r0, r2, #5
 80009ec:	d400      	bmi.n	80009f0 <__aeabi_fadd+0x18c>
 80009ee:	e0c3      	b.n	8000b78 <__aeabi_fadd+0x314>
 80009f0:	4653      	mov	r3, sl
 80009f2:	000c      	movs	r4, r1
 80009f4:	1aea      	subs	r2, r5, r3
 80009f6:	e782      	b.n	80008fe <__aeabi_fadd+0x9a>
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d009      	beq.n	8000a10 <__aeabi_fadd+0x1ac>
 80009fc:	3901      	subs	r1, #1
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fadd+0x1a0>
 8000a02:	e08b      	b.n	8000b1c <__aeabi_fadd+0x2b8>
 8000a04:	2fff      	cmp	r7, #255	; 0xff
 8000a06:	d1bc      	bne.n	8000982 <__aeabi_fadd+0x11e>
 8000a08:	e7a7      	b.n	800095a <__aeabi_fadd+0xf6>
 8000a0a:	000c      	movs	r4, r1
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	0037      	movs	r7, r6
 8000a10:	2fff      	cmp	r7, #255	; 0xff
 8000a12:	d0a2      	beq.n	800095a <__aeabi_fadd+0xf6>
 8000a14:	0252      	lsls	r2, r2, #9
 8000a16:	0a53      	lsrs	r3, r2, #9
 8000a18:	469c      	mov	ip, r3
 8000a1a:	b2fb      	uxtb	r3, r7
 8000a1c:	e781      	b.n	8000922 <__aeabi_fadd+0xbe>
 8000a1e:	21fe      	movs	r1, #254	; 0xfe
 8000a20:	3701      	adds	r7, #1
 8000a22:	4239      	tst	r1, r7
 8000a24:	d165      	bne.n	8000af2 <__aeabi_fadd+0x28e>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d17e      	bne.n	8000b28 <__aeabi_fadd+0x2c4>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fadd+0x1cc>
 8000a2e:	e0aa      	b.n	8000b86 <__aeabi_fadd+0x322>
 8000a30:	2d00      	cmp	r5, #0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_fadd+0x1d2>
 8000a34:	e775      	b.n	8000922 <__aeabi_fadd+0xbe>
 8000a36:	002a      	movs	r2, r5
 8000a38:	4452      	add	r2, sl
 8000a3a:	2700      	movs	r7, #0
 8000a3c:	0153      	lsls	r3, r2, #5
 8000a3e:	d502      	bpl.n	8000a46 <__aeabi_fadd+0x1e2>
 8000a40:	4b55      	ldr	r3, [pc, #340]	; (8000b98 <__aeabi_fadd+0x334>)
 8000a42:	3701      	adds	r7, #1
 8000a44:	401a      	ands	r2, r3
 8000a46:	0753      	lsls	r3, r2, #29
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fadd+0x1e8>
 8000a4a:	e75a      	b.n	8000902 <__aeabi_fadd+0x9e>
 8000a4c:	08d2      	lsrs	r2, r2, #3
 8000a4e:	e7df      	b.n	8000a10 <__aeabi_fadd+0x1ac>
 8000a50:	2200      	movs	r2, #0
 8000a52:	23ff      	movs	r3, #255	; 0xff
 8000a54:	4694      	mov	ip, r2
 8000a56:	e764      	b.n	8000922 <__aeabi_fadd+0xbe>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	d0e0      	beq.n	8000a1e <__aeabi_fadd+0x1ba>
 8000a5c:	1bf3      	subs	r3, r6, r7
 8000a5e:	2f00      	cmp	r7, #0
 8000a60:	d03e      	beq.n	8000ae0 <__aeabi_fadd+0x27c>
 8000a62:	2eff      	cmp	r6, #255	; 0xff
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fadd+0x204>
 8000a66:	e777      	b.n	8000958 <__aeabi_fadd+0xf4>
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	0001      	movs	r1, r0
 8000a6c:	04d2      	lsls	r2, r2, #19
 8000a6e:	4311      	orrs	r1, r2
 8000a70:	468a      	mov	sl, r1
 8000a72:	2201      	movs	r2, #1
 8000a74:	2b1b      	cmp	r3, #27
 8000a76:	dc08      	bgt.n	8000a8a <__aeabi_fadd+0x226>
 8000a78:	4652      	mov	r2, sl
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4650      	mov	r0, sl
 8000a7e:	40da      	lsrs	r2, r3
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	4098      	lsls	r0, r3
 8000a84:	1e43      	subs	r3, r0, #1
 8000a86:	4198      	sbcs	r0, r3
 8000a88:	4302      	orrs	r2, r0
 8000a8a:	0037      	movs	r7, r6
 8000a8c:	1952      	adds	r2, r2, r5
 8000a8e:	e784      	b.n	800099a <__aeabi_fadd+0x136>
 8000a90:	4a41      	ldr	r2, [pc, #260]	; (8000b98 <__aeabi_fadd+0x334>)
 8000a92:	1a3f      	subs	r7, r7, r0
 8000a94:	4032      	ands	r2, r6
 8000a96:	e732      	b.n	80008fe <__aeabi_fadd+0x9a>
 8000a98:	4653      	mov	r3, sl
 8000a9a:	1b5e      	subs	r6, r3, r5
 8000a9c:	0173      	lsls	r3, r6, #5
 8000a9e:	d42d      	bmi.n	8000afc <__aeabi_fadd+0x298>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_fadd+0x242>
 8000aa4:	e717      	b.n	80008d6 <__aeabi_fadd+0x72>
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2400      	movs	r4, #0
 8000aaa:	2300      	movs	r3, #0
 8000aac:	4694      	mov	ip, r2
 8000aae:	e738      	b.n	8000922 <__aeabi_fadd+0xbe>
 8000ab0:	2eff      	cmp	r6, #255	; 0xff
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_fadd+0x252>
 8000ab4:	e74f      	b.n	8000956 <__aeabi_fadd+0xf2>
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	4650      	mov	r0, sl
 8000aba:	04d2      	lsls	r2, r2, #19
 8000abc:	4310      	orrs	r0, r2
 8000abe:	4682      	mov	sl, r0
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2b1b      	cmp	r3, #27
 8000ac4:	dc08      	bgt.n	8000ad8 <__aeabi_fadd+0x274>
 8000ac6:	4652      	mov	r2, sl
 8000ac8:	2420      	movs	r4, #32
 8000aca:	4650      	mov	r0, sl
 8000acc:	40da      	lsrs	r2, r3
 8000ace:	1ae3      	subs	r3, r4, r3
 8000ad0:	4098      	lsls	r0, r3
 8000ad2:	1e43      	subs	r3, r0, #1
 8000ad4:	4198      	sbcs	r0, r3
 8000ad6:	4302      	orrs	r2, r0
 8000ad8:	000c      	movs	r4, r1
 8000ada:	0037      	movs	r7, r6
 8000adc:	1aaa      	subs	r2, r5, r2
 8000ade:	e6f5      	b.n	80008cc <__aeabi_fadd+0x68>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d093      	beq.n	8000a0c <__aeabi_fadd+0x1a8>
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d04f      	beq.n	8000b8a <__aeabi_fadd+0x326>
 8000aea:	2eff      	cmp	r6, #255	; 0xff
 8000aec:	d1c1      	bne.n	8000a72 <__aeabi_fadd+0x20e>
 8000aee:	4642      	mov	r2, r8
 8000af0:	e733      	b.n	800095a <__aeabi_fadd+0xf6>
 8000af2:	2fff      	cmp	r7, #255	; 0xff
 8000af4:	d0ac      	beq.n	8000a50 <__aeabi_fadd+0x1ec>
 8000af6:	4455      	add	r5, sl
 8000af8:	086a      	lsrs	r2, r5, #1
 8000afa:	e7a4      	b.n	8000a46 <__aeabi_fadd+0x1e2>
 8000afc:	4653      	mov	r3, sl
 8000afe:	000c      	movs	r4, r1
 8000b00:	1aee      	subs	r6, r5, r3
 8000b02:	e6e8      	b.n	80008d6 <__aeabi_fadd+0x72>
 8000b04:	4653      	mov	r3, sl
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d128      	bne.n	8000b5c <__aeabi_fadd+0x2f8>
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fadd+0x2ac>
 8000b0e:	e722      	b.n	8000956 <__aeabi_fadd+0xf2>
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	03db      	lsls	r3, r3, #15
 8000b14:	469c      	mov	ip, r3
 8000b16:	2400      	movs	r4, #0
 8000b18:	23ff      	movs	r3, #255	; 0xff
 8000b1a:	e702      	b.n	8000922 <__aeabi_fadd+0xbe>
 8000b1c:	002a      	movs	r2, r5
 8000b1e:	4452      	add	r2, sl
 8000b20:	e73b      	b.n	800099a <__aeabi_fadd+0x136>
 8000b22:	4653      	mov	r3, sl
 8000b24:	1b5a      	subs	r2, r3, r5
 8000b26:	e6d1      	b.n	80008cc <__aeabi_fadd+0x68>
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_fadd+0x2ca>
 8000b2c:	e714      	b.n	8000958 <__aeabi_fadd+0xf4>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d100      	bne.n	8000b34 <__aeabi_fadd+0x2d0>
 8000b32:	e712      	b.n	800095a <__aeabi_fadd+0xf6>
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	03db      	lsls	r3, r3, #15
 8000b38:	421a      	tst	r2, r3
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_fadd+0x2da>
 8000b3c:	e70d      	b.n	800095a <__aeabi_fadd+0xf6>
 8000b3e:	4641      	mov	r1, r8
 8000b40:	4219      	tst	r1, r3
 8000b42:	d000      	beq.n	8000b46 <__aeabi_fadd+0x2e2>
 8000b44:	e709      	b.n	800095a <__aeabi_fadd+0xf6>
 8000b46:	4642      	mov	r2, r8
 8000b48:	e707      	b.n	800095a <__aeabi_fadd+0xf6>
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	0037      	movs	r7, r6
 8000b4e:	1aaa      	subs	r2, r5, r2
 8000b50:	e6bc      	b.n	80008cc <__aeabi_fadd+0x68>
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d013      	beq.n	8000b7e <__aeabi_fadd+0x31a>
 8000b56:	000c      	movs	r4, r1
 8000b58:	46c4      	mov	ip, r8
 8000b5a:	e6e2      	b.n	8000922 <__aeabi_fadd+0xbe>
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_fadd+0x2fe>
 8000b60:	e6fb      	b.n	800095a <__aeabi_fadd+0xf6>
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	03db      	lsls	r3, r3, #15
 8000b66:	421a      	tst	r2, r3
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fadd+0x308>
 8000b6a:	e6f6      	b.n	800095a <__aeabi_fadd+0xf6>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	4218      	tst	r0, r3
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fadd+0x310>
 8000b72:	e6f2      	b.n	800095a <__aeabi_fadd+0xf6>
 8000b74:	000c      	movs	r4, r1
 8000b76:	e6ef      	b.n	8000958 <__aeabi_fadd+0xf4>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	d000      	beq.n	8000b7e <__aeabi_fadd+0x31a>
 8000b7c:	e763      	b.n	8000a46 <__aeabi_fadd+0x1e2>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2400      	movs	r4, #0
 8000b82:	4694      	mov	ip, r2
 8000b84:	e6cd      	b.n	8000922 <__aeabi_fadd+0xbe>
 8000b86:	46c4      	mov	ip, r8
 8000b88:	e6cb      	b.n	8000922 <__aeabi_fadd+0xbe>
 8000b8a:	002a      	movs	r2, r5
 8000b8c:	0037      	movs	r7, r6
 8000b8e:	4452      	add	r2, sl
 8000b90:	e703      	b.n	800099a <__aeabi_fadd+0x136>
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	7dffffff 	.word	0x7dffffff
 8000b98:	fbffffff 	.word	0xfbffffff

08000b9c <__aeabi_fdiv>:
 8000b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9e:	464f      	mov	r7, r9
 8000ba0:	4646      	mov	r6, r8
 8000ba2:	46d6      	mov	lr, sl
 8000ba4:	0245      	lsls	r5, r0, #9
 8000ba6:	b5c0      	push	{r6, r7, lr}
 8000ba8:	0047      	lsls	r7, r0, #1
 8000baa:	1c0c      	adds	r4, r1, #0
 8000bac:	0a6d      	lsrs	r5, r5, #9
 8000bae:	0e3f      	lsrs	r7, r7, #24
 8000bb0:	0fc6      	lsrs	r6, r0, #31
 8000bb2:	2f00      	cmp	r7, #0
 8000bb4:	d066      	beq.n	8000c84 <__aeabi_fdiv+0xe8>
 8000bb6:	2fff      	cmp	r7, #255	; 0xff
 8000bb8:	d06c      	beq.n	8000c94 <__aeabi_fdiv+0xf8>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	00ea      	lsls	r2, r5, #3
 8000bbe:	2580      	movs	r5, #128	; 0x80
 8000bc0:	4699      	mov	r9, r3
 8000bc2:	469a      	mov	sl, r3
 8000bc4:	04ed      	lsls	r5, r5, #19
 8000bc6:	4315      	orrs	r5, r2
 8000bc8:	3f7f      	subs	r7, #127	; 0x7f
 8000bca:	0260      	lsls	r0, r4, #9
 8000bcc:	0061      	lsls	r1, r4, #1
 8000bce:	0a43      	lsrs	r3, r0, #9
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	0e09      	lsrs	r1, r1, #24
 8000bd4:	0fe4      	lsrs	r4, r4, #31
 8000bd6:	2900      	cmp	r1, #0
 8000bd8:	d048      	beq.n	8000c6c <__aeabi_fdiv+0xd0>
 8000bda:	29ff      	cmp	r1, #255	; 0xff
 8000bdc:	d010      	beq.n	8000c00 <__aeabi_fdiv+0x64>
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	00d8      	lsls	r0, r3, #3
 8000be2:	04d2      	lsls	r2, r2, #19
 8000be4:	4302      	orrs	r2, r0
 8000be6:	4690      	mov	r8, r2
 8000be8:	2000      	movs	r0, #0
 8000bea:	397f      	subs	r1, #127	; 0x7f
 8000bec:	464a      	mov	r2, r9
 8000bee:	0033      	movs	r3, r6
 8000bf0:	1a7f      	subs	r7, r7, r1
 8000bf2:	4302      	orrs	r2, r0
 8000bf4:	496c      	ldr	r1, [pc, #432]	; (8000da8 <__aeabi_fdiv+0x20c>)
 8000bf6:	0092      	lsls	r2, r2, #2
 8000bf8:	588a      	ldr	r2, [r1, r2]
 8000bfa:	4063      	eors	r3, r4
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4697      	mov	pc, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d16d      	bne.n	8000ce0 <__aeabi_fdiv+0x144>
 8000c04:	2002      	movs	r0, #2
 8000c06:	3fff      	subs	r7, #255	; 0xff
 8000c08:	e033      	b.n	8000c72 <__aeabi_fdiv+0xd6>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	4698      	mov	r8, r3
 8000c0e:	0026      	movs	r6, r4
 8000c10:	4645      	mov	r5, r8
 8000c12:	4682      	mov	sl, r0
 8000c14:	4653      	mov	r3, sl
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fdiv+0x80>
 8000c1a:	e07f      	b.n	8000d1c <__aeabi_fdiv+0x180>
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fdiv+0x86>
 8000c20:	e094      	b.n	8000d4c <__aeabi_fdiv+0x1b0>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d017      	beq.n	8000c56 <__aeabi_fdiv+0xba>
 8000c26:	0038      	movs	r0, r7
 8000c28:	307f      	adds	r0, #127	; 0x7f
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	dd5f      	ble.n	8000cee <__aeabi_fdiv+0x152>
 8000c2e:	076b      	lsls	r3, r5, #29
 8000c30:	d004      	beq.n	8000c3c <__aeabi_fdiv+0xa0>
 8000c32:	230f      	movs	r3, #15
 8000c34:	402b      	ands	r3, r5
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fdiv+0xa0>
 8000c3a:	3504      	adds	r5, #4
 8000c3c:	012b      	lsls	r3, r5, #4
 8000c3e:	d503      	bpl.n	8000c48 <__aeabi_fdiv+0xac>
 8000c40:	0038      	movs	r0, r7
 8000c42:	4b5a      	ldr	r3, [pc, #360]	; (8000dac <__aeabi_fdiv+0x210>)
 8000c44:	3080      	adds	r0, #128	; 0x80
 8000c46:	401d      	ands	r5, r3
 8000c48:	28fe      	cmp	r0, #254	; 0xfe
 8000c4a:	dc67      	bgt.n	8000d1c <__aeabi_fdiv+0x180>
 8000c4c:	01ad      	lsls	r5, r5, #6
 8000c4e:	0a6d      	lsrs	r5, r5, #9
 8000c50:	b2c0      	uxtb	r0, r0
 8000c52:	e002      	b.n	8000c5a <__aeabi_fdiv+0xbe>
 8000c54:	001e      	movs	r6, r3
 8000c56:	2000      	movs	r0, #0
 8000c58:	2500      	movs	r5, #0
 8000c5a:	05c0      	lsls	r0, r0, #23
 8000c5c:	4328      	orrs	r0, r5
 8000c5e:	07f6      	lsls	r6, r6, #31
 8000c60:	4330      	orrs	r0, r6
 8000c62:	bce0      	pop	{r5, r6, r7}
 8000c64:	46ba      	mov	sl, r7
 8000c66:	46b1      	mov	r9, r6
 8000c68:	46a8      	mov	r8, r5
 8000c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d12b      	bne.n	8000cc8 <__aeabi_fdiv+0x12c>
 8000c70:	2001      	movs	r0, #1
 8000c72:	464a      	mov	r2, r9
 8000c74:	0033      	movs	r3, r6
 8000c76:	494e      	ldr	r1, [pc, #312]	; (8000db0 <__aeabi_fdiv+0x214>)
 8000c78:	4302      	orrs	r2, r0
 8000c7a:	0092      	lsls	r2, r2, #2
 8000c7c:	588a      	ldr	r2, [r1, r2]
 8000c7e:	4063      	eors	r3, r4
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4697      	mov	pc, r2
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d113      	bne.n	8000cb0 <__aeabi_fdiv+0x114>
 8000c88:	2304      	movs	r3, #4
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	2700      	movs	r7, #0
 8000c90:	469a      	mov	sl, r3
 8000c92:	e79a      	b.n	8000bca <__aeabi_fdiv+0x2e>
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d105      	bne.n	8000ca4 <__aeabi_fdiv+0x108>
 8000c98:	2308      	movs	r3, #8
 8000c9a:	4699      	mov	r9, r3
 8000c9c:	3b06      	subs	r3, #6
 8000c9e:	27ff      	movs	r7, #255	; 0xff
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	e792      	b.n	8000bca <__aeabi_fdiv+0x2e>
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	4699      	mov	r9, r3
 8000ca8:	3b09      	subs	r3, #9
 8000caa:	27ff      	movs	r7, #255	; 0xff
 8000cac:	469a      	mov	sl, r3
 8000cae:	e78c      	b.n	8000bca <__aeabi_fdiv+0x2e>
 8000cb0:	0028      	movs	r0, r5
 8000cb2:	f002 fba9 	bl	8003408 <__clzsi2>
 8000cb6:	2776      	movs	r7, #118	; 0x76
 8000cb8:	1f43      	subs	r3, r0, #5
 8000cba:	409d      	lsls	r5, r3
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	427f      	negs	r7, r7
 8000cc0:	4699      	mov	r9, r3
 8000cc2:	469a      	mov	sl, r3
 8000cc4:	1a3f      	subs	r7, r7, r0
 8000cc6:	e780      	b.n	8000bca <__aeabi_fdiv+0x2e>
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f002 fb9d 	bl	8003408 <__clzsi2>
 8000cce:	4642      	mov	r2, r8
 8000cd0:	1f43      	subs	r3, r0, #5
 8000cd2:	2176      	movs	r1, #118	; 0x76
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	4690      	mov	r8, r2
 8000cdc:	2000      	movs	r0, #0
 8000cde:	e785      	b.n	8000bec <__aeabi_fdiv+0x50>
 8000ce0:	21ff      	movs	r1, #255	; 0xff
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	e782      	b.n	8000bec <__aeabi_fdiv+0x50>
 8000ce6:	001e      	movs	r6, r3
 8000ce8:	20ff      	movs	r0, #255	; 0xff
 8000cea:	2500      	movs	r5, #0
 8000cec:	e7b5      	b.n	8000c5a <__aeabi_fdiv+0xbe>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	1a1b      	subs	r3, r3, r0
 8000cf2:	2b1b      	cmp	r3, #27
 8000cf4:	dcaf      	bgt.n	8000c56 <__aeabi_fdiv+0xba>
 8000cf6:	379e      	adds	r7, #158	; 0x9e
 8000cf8:	0029      	movs	r1, r5
 8000cfa:	40bd      	lsls	r5, r7
 8000cfc:	40d9      	lsrs	r1, r3
 8000cfe:	1e6a      	subs	r2, r5, #1
 8000d00:	4195      	sbcs	r5, r2
 8000d02:	430d      	orrs	r5, r1
 8000d04:	076b      	lsls	r3, r5, #29
 8000d06:	d004      	beq.n	8000d12 <__aeabi_fdiv+0x176>
 8000d08:	230f      	movs	r3, #15
 8000d0a:	402b      	ands	r3, r5
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_fdiv+0x176>
 8000d10:	3504      	adds	r5, #4
 8000d12:	016b      	lsls	r3, r5, #5
 8000d14:	d544      	bpl.n	8000da0 <__aeabi_fdiv+0x204>
 8000d16:	2001      	movs	r0, #1
 8000d18:	2500      	movs	r5, #0
 8000d1a:	e79e      	b.n	8000c5a <__aeabi_fdiv+0xbe>
 8000d1c:	20ff      	movs	r0, #255	; 0xff
 8000d1e:	2500      	movs	r5, #0
 8000d20:	e79b      	b.n	8000c5a <__aeabi_fdiv+0xbe>
 8000d22:	2580      	movs	r5, #128	; 0x80
 8000d24:	2600      	movs	r6, #0
 8000d26:	20ff      	movs	r0, #255	; 0xff
 8000d28:	03ed      	lsls	r5, r5, #15
 8000d2a:	e796      	b.n	8000c5a <__aeabi_fdiv+0xbe>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4698      	mov	r8, r3
 8000d30:	2080      	movs	r0, #128	; 0x80
 8000d32:	03c0      	lsls	r0, r0, #15
 8000d34:	4205      	tst	r5, r0
 8000d36:	d009      	beq.n	8000d4c <__aeabi_fdiv+0x1b0>
 8000d38:	4643      	mov	r3, r8
 8000d3a:	4203      	tst	r3, r0
 8000d3c:	d106      	bne.n	8000d4c <__aeabi_fdiv+0x1b0>
 8000d3e:	4645      	mov	r5, r8
 8000d40:	4305      	orrs	r5, r0
 8000d42:	026d      	lsls	r5, r5, #9
 8000d44:	0026      	movs	r6, r4
 8000d46:	20ff      	movs	r0, #255	; 0xff
 8000d48:	0a6d      	lsrs	r5, r5, #9
 8000d4a:	e786      	b.n	8000c5a <__aeabi_fdiv+0xbe>
 8000d4c:	2080      	movs	r0, #128	; 0x80
 8000d4e:	03c0      	lsls	r0, r0, #15
 8000d50:	4305      	orrs	r5, r0
 8000d52:	026d      	lsls	r5, r5, #9
 8000d54:	20ff      	movs	r0, #255	; 0xff
 8000d56:	0a6d      	lsrs	r5, r5, #9
 8000d58:	e77f      	b.n	8000c5a <__aeabi_fdiv+0xbe>
 8000d5a:	4641      	mov	r1, r8
 8000d5c:	016a      	lsls	r2, r5, #5
 8000d5e:	0148      	lsls	r0, r1, #5
 8000d60:	4282      	cmp	r2, r0
 8000d62:	d219      	bcs.n	8000d98 <__aeabi_fdiv+0x1fc>
 8000d64:	211b      	movs	r1, #27
 8000d66:	2500      	movs	r5, #0
 8000d68:	3f01      	subs	r7, #1
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0014      	movs	r4, r2
 8000d6e:	006d      	lsls	r5, r5, #1
 8000d70:	0052      	lsls	r2, r2, #1
 8000d72:	2c00      	cmp	r4, #0
 8000d74:	db01      	blt.n	8000d7a <__aeabi_fdiv+0x1de>
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d801      	bhi.n	8000d7e <__aeabi_fdiv+0x1e2>
 8000d7a:	1a12      	subs	r2, r2, r0
 8000d7c:	4335      	orrs	r5, r6
 8000d7e:	3901      	subs	r1, #1
 8000d80:	2900      	cmp	r1, #0
 8000d82:	d1f3      	bne.n	8000d6c <__aeabi_fdiv+0x1d0>
 8000d84:	1e50      	subs	r0, r2, #1
 8000d86:	4182      	sbcs	r2, r0
 8000d88:	0038      	movs	r0, r7
 8000d8a:	307f      	adds	r0, #127	; 0x7f
 8000d8c:	001e      	movs	r6, r3
 8000d8e:	4315      	orrs	r5, r2
 8000d90:	2800      	cmp	r0, #0
 8000d92:	dd00      	ble.n	8000d96 <__aeabi_fdiv+0x1fa>
 8000d94:	e74b      	b.n	8000c2e <__aeabi_fdiv+0x92>
 8000d96:	e7aa      	b.n	8000cee <__aeabi_fdiv+0x152>
 8000d98:	211a      	movs	r1, #26
 8000d9a:	2501      	movs	r5, #1
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	e7e4      	b.n	8000d6a <__aeabi_fdiv+0x1ce>
 8000da0:	01ad      	lsls	r5, r5, #6
 8000da2:	2000      	movs	r0, #0
 8000da4:	0a6d      	lsrs	r5, r5, #9
 8000da6:	e758      	b.n	8000c5a <__aeabi_fdiv+0xbe>
 8000da8:	0801a510 	.word	0x0801a510
 8000dac:	f7ffffff 	.word	0xf7ffffff
 8000db0:	0801a550 	.word	0x0801a550

08000db4 <__eqsf2>:
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	0042      	lsls	r2, r0, #1
 8000db8:	024e      	lsls	r6, r1, #9
 8000dba:	004c      	lsls	r4, r1, #1
 8000dbc:	0245      	lsls	r5, r0, #9
 8000dbe:	0a6d      	lsrs	r5, r5, #9
 8000dc0:	0e12      	lsrs	r2, r2, #24
 8000dc2:	0fc3      	lsrs	r3, r0, #31
 8000dc4:	0a76      	lsrs	r6, r6, #9
 8000dc6:	0e24      	lsrs	r4, r4, #24
 8000dc8:	0fc9      	lsrs	r1, r1, #31
 8000dca:	2aff      	cmp	r2, #255	; 0xff
 8000dcc:	d00f      	beq.n	8000dee <__eqsf2+0x3a>
 8000dce:	2cff      	cmp	r4, #255	; 0xff
 8000dd0:	d011      	beq.n	8000df6 <__eqsf2+0x42>
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	42a2      	cmp	r2, r4
 8000dd6:	d000      	beq.n	8000dda <__eqsf2+0x26>
 8000dd8:	bd70      	pop	{r4, r5, r6, pc}
 8000dda:	42b5      	cmp	r5, r6
 8000ddc:	d1fc      	bne.n	8000dd8 <__eqsf2+0x24>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d00d      	beq.n	8000dfe <__eqsf2+0x4a>
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d1f8      	bne.n	8000dd8 <__eqsf2+0x24>
 8000de6:	0028      	movs	r0, r5
 8000de8:	1e45      	subs	r5, r0, #1
 8000dea:	41a8      	sbcs	r0, r5
 8000dec:	e7f4      	b.n	8000dd8 <__eqsf2+0x24>
 8000dee:	2001      	movs	r0, #1
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	d1f1      	bne.n	8000dd8 <__eqsf2+0x24>
 8000df4:	e7eb      	b.n	8000dce <__eqsf2+0x1a>
 8000df6:	2001      	movs	r0, #1
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d1ed      	bne.n	8000dd8 <__eqsf2+0x24>
 8000dfc:	e7e9      	b.n	8000dd2 <__eqsf2+0x1e>
 8000dfe:	2000      	movs	r0, #0
 8000e00:	e7ea      	b.n	8000dd8 <__eqsf2+0x24>
 8000e02:	46c0      	nop			; (mov r8, r8)

08000e04 <__gesf2>:
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e06:	0042      	lsls	r2, r0, #1
 8000e08:	0246      	lsls	r6, r0, #9
 8000e0a:	024d      	lsls	r5, r1, #9
 8000e0c:	004c      	lsls	r4, r1, #1
 8000e0e:	0fc3      	lsrs	r3, r0, #31
 8000e10:	0a76      	lsrs	r6, r6, #9
 8000e12:	0e12      	lsrs	r2, r2, #24
 8000e14:	0a6d      	lsrs	r5, r5, #9
 8000e16:	0e24      	lsrs	r4, r4, #24
 8000e18:	0fc8      	lsrs	r0, r1, #31
 8000e1a:	2aff      	cmp	r2, #255	; 0xff
 8000e1c:	d01f      	beq.n	8000e5e <__gesf2+0x5a>
 8000e1e:	2cff      	cmp	r4, #255	; 0xff
 8000e20:	d010      	beq.n	8000e44 <__gesf2+0x40>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d11f      	bne.n	8000e66 <__gesf2+0x62>
 8000e26:	4271      	negs	r1, r6
 8000e28:	4171      	adcs	r1, r6
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d101      	bne.n	8000e32 <__gesf2+0x2e>
 8000e2e:	2d00      	cmp	r5, #0
 8000e30:	d01e      	beq.n	8000e70 <__gesf2+0x6c>
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d10e      	bne.n	8000e54 <__gesf2+0x50>
 8000e36:	4283      	cmp	r3, r0
 8000e38:	d01e      	beq.n	8000e78 <__gesf2+0x74>
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	1e58      	subs	r0, r3, #1
 8000e3e:	4008      	ands	r0, r1
 8000e40:	3801      	subs	r0, #1
 8000e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e44:	2d00      	cmp	r5, #0
 8000e46:	d126      	bne.n	8000e96 <__gesf2+0x92>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d1f4      	bne.n	8000e36 <__gesf2+0x32>
 8000e4c:	4271      	negs	r1, r6
 8000e4e:	4171      	adcs	r1, r6
 8000e50:	2900      	cmp	r1, #0
 8000e52:	d0f0      	beq.n	8000e36 <__gesf2+0x32>
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d1f4      	bne.n	8000e42 <__gesf2+0x3e>
 8000e58:	2001      	movs	r0, #1
 8000e5a:	4240      	negs	r0, r0
 8000e5c:	e7f1      	b.n	8000e42 <__gesf2+0x3e>
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d119      	bne.n	8000e96 <__gesf2+0x92>
 8000e62:	2cff      	cmp	r4, #255	; 0xff
 8000e64:	d0ee      	beq.n	8000e44 <__gesf2+0x40>
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d1e5      	bne.n	8000e36 <__gesf2+0x32>
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	d1e3      	bne.n	8000e36 <__gesf2+0x32>
 8000e6e:	e7e4      	b.n	8000e3a <__gesf2+0x36>
 8000e70:	2000      	movs	r0, #0
 8000e72:	2e00      	cmp	r6, #0
 8000e74:	d0e5      	beq.n	8000e42 <__gesf2+0x3e>
 8000e76:	e7e0      	b.n	8000e3a <__gesf2+0x36>
 8000e78:	42a2      	cmp	r2, r4
 8000e7a:	dc05      	bgt.n	8000e88 <__gesf2+0x84>
 8000e7c:	dbea      	blt.n	8000e54 <__gesf2+0x50>
 8000e7e:	42ae      	cmp	r6, r5
 8000e80:	d802      	bhi.n	8000e88 <__gesf2+0x84>
 8000e82:	d3e7      	bcc.n	8000e54 <__gesf2+0x50>
 8000e84:	2000      	movs	r0, #0
 8000e86:	e7dc      	b.n	8000e42 <__gesf2+0x3e>
 8000e88:	4241      	negs	r1, r0
 8000e8a:	4141      	adcs	r1, r0
 8000e8c:	4248      	negs	r0, r1
 8000e8e:	2102      	movs	r1, #2
 8000e90:	4008      	ands	r0, r1
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7d5      	b.n	8000e42 <__gesf2+0x3e>
 8000e96:	2002      	movs	r0, #2
 8000e98:	4240      	negs	r0, r0
 8000e9a:	e7d2      	b.n	8000e42 <__gesf2+0x3e>

08000e9c <__lesf2>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	0042      	lsls	r2, r0, #1
 8000ea0:	0246      	lsls	r6, r0, #9
 8000ea2:	024d      	lsls	r5, r1, #9
 8000ea4:	004c      	lsls	r4, r1, #1
 8000ea6:	0fc3      	lsrs	r3, r0, #31
 8000ea8:	0a76      	lsrs	r6, r6, #9
 8000eaa:	0e12      	lsrs	r2, r2, #24
 8000eac:	0a6d      	lsrs	r5, r5, #9
 8000eae:	0e24      	lsrs	r4, r4, #24
 8000eb0:	0fc8      	lsrs	r0, r1, #31
 8000eb2:	2aff      	cmp	r2, #255	; 0xff
 8000eb4:	d00d      	beq.n	8000ed2 <__lesf2+0x36>
 8000eb6:	2cff      	cmp	r4, #255	; 0xff
 8000eb8:	d00f      	beq.n	8000eda <__lesf2+0x3e>
 8000eba:	2a00      	cmp	r2, #0
 8000ebc:	d123      	bne.n	8000f06 <__lesf2+0x6a>
 8000ebe:	4271      	negs	r1, r6
 8000ec0:	4171      	adcs	r1, r6
 8000ec2:	2c00      	cmp	r4, #0
 8000ec4:	d10f      	bne.n	8000ee6 <__lesf2+0x4a>
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d10d      	bne.n	8000ee6 <__lesf2+0x4a>
 8000eca:	2000      	movs	r0, #0
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d014      	beq.n	8000efa <__lesf2+0x5e>
 8000ed0:	e00d      	b.n	8000eee <__lesf2+0x52>
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d110      	bne.n	8000ef8 <__lesf2+0x5c>
 8000ed6:	2cff      	cmp	r4, #255	; 0xff
 8000ed8:	d115      	bne.n	8000f06 <__lesf2+0x6a>
 8000eda:	2d00      	cmp	r5, #0
 8000edc:	d10c      	bne.n	8000ef8 <__lesf2+0x5c>
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	d103      	bne.n	8000eea <__lesf2+0x4e>
 8000ee2:	4271      	negs	r1, r6
 8000ee4:	4171      	adcs	r1, r6
 8000ee6:	2900      	cmp	r1, #0
 8000ee8:	d108      	bne.n	8000efc <__lesf2+0x60>
 8000eea:	4283      	cmp	r3, r0
 8000eec:	d010      	beq.n	8000f10 <__lesf2+0x74>
 8000eee:	2102      	movs	r1, #2
 8000ef0:	1e58      	subs	r0, r3, #1
 8000ef2:	4008      	ands	r0, r1
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e000      	b.n	8000efa <__lesf2+0x5e>
 8000ef8:	2002      	movs	r0, #2
 8000efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d1fc      	bne.n	8000efa <__lesf2+0x5e>
 8000f00:	2001      	movs	r0, #1
 8000f02:	4240      	negs	r0, r0
 8000f04:	e7f9      	b.n	8000efa <__lesf2+0x5e>
 8000f06:	2c00      	cmp	r4, #0
 8000f08:	d1ef      	bne.n	8000eea <__lesf2+0x4e>
 8000f0a:	2d00      	cmp	r5, #0
 8000f0c:	d1ed      	bne.n	8000eea <__lesf2+0x4e>
 8000f0e:	e7ee      	b.n	8000eee <__lesf2+0x52>
 8000f10:	42a2      	cmp	r2, r4
 8000f12:	dc05      	bgt.n	8000f20 <__lesf2+0x84>
 8000f14:	dbf2      	blt.n	8000efc <__lesf2+0x60>
 8000f16:	42ae      	cmp	r6, r5
 8000f18:	d802      	bhi.n	8000f20 <__lesf2+0x84>
 8000f1a:	d3ef      	bcc.n	8000efc <__lesf2+0x60>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7ec      	b.n	8000efa <__lesf2+0x5e>
 8000f20:	4241      	negs	r1, r0
 8000f22:	4141      	adcs	r1, r0
 8000f24:	4248      	negs	r0, r1
 8000f26:	2102      	movs	r1, #2
 8000f28:	4008      	ands	r0, r1
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7e5      	b.n	8000efa <__lesf2+0x5e>
 8000f2e:	46c0      	nop			; (mov r8, r8)

08000f30 <__aeabi_fmul>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	4657      	mov	r7, sl
 8000f34:	464e      	mov	r6, r9
 8000f36:	4645      	mov	r5, r8
 8000f38:	46de      	mov	lr, fp
 8000f3a:	0244      	lsls	r4, r0, #9
 8000f3c:	b5e0      	push	{r5, r6, r7, lr}
 8000f3e:	0045      	lsls	r5, r0, #1
 8000f40:	1c0f      	adds	r7, r1, #0
 8000f42:	0a64      	lsrs	r4, r4, #9
 8000f44:	0e2d      	lsrs	r5, r5, #24
 8000f46:	0fc6      	lsrs	r6, r0, #31
 8000f48:	2d00      	cmp	r5, #0
 8000f4a:	d047      	beq.n	8000fdc <__aeabi_fmul+0xac>
 8000f4c:	2dff      	cmp	r5, #255	; 0xff
 8000f4e:	d04d      	beq.n	8000fec <__aeabi_fmul+0xbc>
 8000f50:	2300      	movs	r3, #0
 8000f52:	2080      	movs	r0, #128	; 0x80
 8000f54:	469a      	mov	sl, r3
 8000f56:	469b      	mov	fp, r3
 8000f58:	00e4      	lsls	r4, r4, #3
 8000f5a:	04c0      	lsls	r0, r0, #19
 8000f5c:	4304      	orrs	r4, r0
 8000f5e:	3d7f      	subs	r5, #127	; 0x7f
 8000f60:	0278      	lsls	r0, r7, #9
 8000f62:	0a43      	lsrs	r3, r0, #9
 8000f64:	4699      	mov	r9, r3
 8000f66:	007a      	lsls	r2, r7, #1
 8000f68:	0ffb      	lsrs	r3, r7, #31
 8000f6a:	4698      	mov	r8, r3
 8000f6c:	0e12      	lsrs	r2, r2, #24
 8000f6e:	464b      	mov	r3, r9
 8000f70:	d044      	beq.n	8000ffc <__aeabi_fmul+0xcc>
 8000f72:	2aff      	cmp	r2, #255	; 0xff
 8000f74:	d011      	beq.n	8000f9a <__aeabi_fmul+0x6a>
 8000f76:	00d8      	lsls	r0, r3, #3
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	04db      	lsls	r3, r3, #19
 8000f7c:	4303      	orrs	r3, r0
 8000f7e:	4699      	mov	r9, r3
 8000f80:	2000      	movs	r0, #0
 8000f82:	3a7f      	subs	r2, #127	; 0x7f
 8000f84:	18ad      	adds	r5, r5, r2
 8000f86:	4647      	mov	r7, r8
 8000f88:	4653      	mov	r3, sl
 8000f8a:	4077      	eors	r7, r6
 8000f8c:	1c69      	adds	r1, r5, #1
 8000f8e:	2b0f      	cmp	r3, #15
 8000f90:	d83f      	bhi.n	8001012 <__aeabi_fmul+0xe2>
 8000f92:	4a72      	ldr	r2, [pc, #456]	; (800115c <__aeabi_fmul+0x22c>)
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	58d3      	ldr	r3, [r2, r3]
 8000f98:	469f      	mov	pc, r3
 8000f9a:	35ff      	adds	r5, #255	; 0xff
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d000      	beq.n	8000fa2 <__aeabi_fmul+0x72>
 8000fa0:	e079      	b.n	8001096 <__aeabi_fmul+0x166>
 8000fa2:	4652      	mov	r2, sl
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	4692      	mov	sl, r2
 8000faa:	2002      	movs	r0, #2
 8000fac:	e7eb      	b.n	8000f86 <__aeabi_fmul+0x56>
 8000fae:	4647      	mov	r7, r8
 8000fb0:	464c      	mov	r4, r9
 8000fb2:	4683      	mov	fp, r0
 8000fb4:	465b      	mov	r3, fp
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d028      	beq.n	800100c <__aeabi_fmul+0xdc>
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_fmul+0x90>
 8000fbe:	e0c6      	b.n	800114e <__aeabi_fmul+0x21e>
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d14f      	bne.n	8001064 <__aeabi_fmul+0x134>
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	2400      	movs	r4, #0
 8000fc8:	05c0      	lsls	r0, r0, #23
 8000fca:	07ff      	lsls	r7, r7, #31
 8000fcc:	4320      	orrs	r0, r4
 8000fce:	4338      	orrs	r0, r7
 8000fd0:	bcf0      	pop	{r4, r5, r6, r7}
 8000fd2:	46bb      	mov	fp, r7
 8000fd4:	46b2      	mov	sl, r6
 8000fd6:	46a9      	mov	r9, r5
 8000fd8:	46a0      	mov	r8, r4
 8000fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fdc:	2c00      	cmp	r4, #0
 8000fde:	d171      	bne.n	80010c4 <__aeabi_fmul+0x194>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	469a      	mov	sl, r3
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	2500      	movs	r5, #0
 8000fe8:	469b      	mov	fp, r3
 8000fea:	e7b9      	b.n	8000f60 <__aeabi_fmul+0x30>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d163      	bne.n	80010b8 <__aeabi_fmul+0x188>
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	469a      	mov	sl, r3
 8000ff4:	3b06      	subs	r3, #6
 8000ff6:	25ff      	movs	r5, #255	; 0xff
 8000ff8:	469b      	mov	fp, r3
 8000ffa:	e7b1      	b.n	8000f60 <__aeabi_fmul+0x30>
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d150      	bne.n	80010a2 <__aeabi_fmul+0x172>
 8001000:	4652      	mov	r2, sl
 8001002:	3301      	adds	r3, #1
 8001004:	431a      	orrs	r2, r3
 8001006:	4692      	mov	sl, r2
 8001008:	2001      	movs	r0, #1
 800100a:	e7bc      	b.n	8000f86 <__aeabi_fmul+0x56>
 800100c:	20ff      	movs	r0, #255	; 0xff
 800100e:	2400      	movs	r4, #0
 8001010:	e7da      	b.n	8000fc8 <__aeabi_fmul+0x98>
 8001012:	4648      	mov	r0, r9
 8001014:	0c26      	lsrs	r6, r4, #16
 8001016:	0424      	lsls	r4, r4, #16
 8001018:	0c22      	lsrs	r2, r4, #16
 800101a:	0404      	lsls	r4, r0, #16
 800101c:	0c24      	lsrs	r4, r4, #16
 800101e:	464b      	mov	r3, r9
 8001020:	0020      	movs	r0, r4
 8001022:	0c1b      	lsrs	r3, r3, #16
 8001024:	4350      	muls	r0, r2
 8001026:	4374      	muls	r4, r6
 8001028:	435a      	muls	r2, r3
 800102a:	435e      	muls	r6, r3
 800102c:	1912      	adds	r2, r2, r4
 800102e:	0c03      	lsrs	r3, r0, #16
 8001030:	189b      	adds	r3, r3, r2
 8001032:	429c      	cmp	r4, r3
 8001034:	d903      	bls.n	800103e <__aeabi_fmul+0x10e>
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	0252      	lsls	r2, r2, #9
 800103a:	4694      	mov	ip, r2
 800103c:	4466      	add	r6, ip
 800103e:	0400      	lsls	r0, r0, #16
 8001040:	041a      	lsls	r2, r3, #16
 8001042:	0c00      	lsrs	r0, r0, #16
 8001044:	1812      	adds	r2, r2, r0
 8001046:	0194      	lsls	r4, r2, #6
 8001048:	1e60      	subs	r0, r4, #1
 800104a:	4184      	sbcs	r4, r0
 800104c:	0c1b      	lsrs	r3, r3, #16
 800104e:	0e92      	lsrs	r2, r2, #26
 8001050:	199b      	adds	r3, r3, r6
 8001052:	4314      	orrs	r4, r2
 8001054:	019b      	lsls	r3, r3, #6
 8001056:	431c      	orrs	r4, r3
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	d572      	bpl.n	8001142 <__aeabi_fmul+0x212>
 800105c:	2001      	movs	r0, #1
 800105e:	0863      	lsrs	r3, r4, #1
 8001060:	4004      	ands	r4, r0
 8001062:	431c      	orrs	r4, r3
 8001064:	0008      	movs	r0, r1
 8001066:	307f      	adds	r0, #127	; 0x7f
 8001068:	2800      	cmp	r0, #0
 800106a:	dd3c      	ble.n	80010e6 <__aeabi_fmul+0x1b6>
 800106c:	0763      	lsls	r3, r4, #29
 800106e:	d004      	beq.n	800107a <__aeabi_fmul+0x14a>
 8001070:	230f      	movs	r3, #15
 8001072:	4023      	ands	r3, r4
 8001074:	2b04      	cmp	r3, #4
 8001076:	d000      	beq.n	800107a <__aeabi_fmul+0x14a>
 8001078:	3404      	adds	r4, #4
 800107a:	0123      	lsls	r3, r4, #4
 800107c:	d503      	bpl.n	8001086 <__aeabi_fmul+0x156>
 800107e:	3180      	adds	r1, #128	; 0x80
 8001080:	0008      	movs	r0, r1
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <__aeabi_fmul+0x230>)
 8001084:	401c      	ands	r4, r3
 8001086:	28fe      	cmp	r0, #254	; 0xfe
 8001088:	dcc0      	bgt.n	800100c <__aeabi_fmul+0xdc>
 800108a:	01a4      	lsls	r4, r4, #6
 800108c:	0a64      	lsrs	r4, r4, #9
 800108e:	b2c0      	uxtb	r0, r0
 8001090:	e79a      	b.n	8000fc8 <__aeabi_fmul+0x98>
 8001092:	0037      	movs	r7, r6
 8001094:	e78e      	b.n	8000fb4 <__aeabi_fmul+0x84>
 8001096:	4652      	mov	r2, sl
 8001098:	2303      	movs	r3, #3
 800109a:	431a      	orrs	r2, r3
 800109c:	4692      	mov	sl, r2
 800109e:	2003      	movs	r0, #3
 80010a0:	e771      	b.n	8000f86 <__aeabi_fmul+0x56>
 80010a2:	4648      	mov	r0, r9
 80010a4:	f002 f9b0 	bl	8003408 <__clzsi2>
 80010a8:	464a      	mov	r2, r9
 80010aa:	1f43      	subs	r3, r0, #5
 80010ac:	409a      	lsls	r2, r3
 80010ae:	1a2d      	subs	r5, r5, r0
 80010b0:	4691      	mov	r9, r2
 80010b2:	2000      	movs	r0, #0
 80010b4:	3d76      	subs	r5, #118	; 0x76
 80010b6:	e766      	b.n	8000f86 <__aeabi_fmul+0x56>
 80010b8:	230c      	movs	r3, #12
 80010ba:	469a      	mov	sl, r3
 80010bc:	3b09      	subs	r3, #9
 80010be:	25ff      	movs	r5, #255	; 0xff
 80010c0:	469b      	mov	fp, r3
 80010c2:	e74d      	b.n	8000f60 <__aeabi_fmul+0x30>
 80010c4:	0020      	movs	r0, r4
 80010c6:	f002 f99f 	bl	8003408 <__clzsi2>
 80010ca:	2576      	movs	r5, #118	; 0x76
 80010cc:	1f43      	subs	r3, r0, #5
 80010ce:	409c      	lsls	r4, r3
 80010d0:	2300      	movs	r3, #0
 80010d2:	426d      	negs	r5, r5
 80010d4:	469a      	mov	sl, r3
 80010d6:	469b      	mov	fp, r3
 80010d8:	1a2d      	subs	r5, r5, r0
 80010da:	e741      	b.n	8000f60 <__aeabi_fmul+0x30>
 80010dc:	2480      	movs	r4, #128	; 0x80
 80010de:	2700      	movs	r7, #0
 80010e0:	20ff      	movs	r0, #255	; 0xff
 80010e2:	03e4      	lsls	r4, r4, #15
 80010e4:	e770      	b.n	8000fc8 <__aeabi_fmul+0x98>
 80010e6:	2301      	movs	r3, #1
 80010e8:	1a1b      	subs	r3, r3, r0
 80010ea:	2b1b      	cmp	r3, #27
 80010ec:	dd00      	ble.n	80010f0 <__aeabi_fmul+0x1c0>
 80010ee:	e769      	b.n	8000fc4 <__aeabi_fmul+0x94>
 80010f0:	319e      	adds	r1, #158	; 0x9e
 80010f2:	0020      	movs	r0, r4
 80010f4:	408c      	lsls	r4, r1
 80010f6:	40d8      	lsrs	r0, r3
 80010f8:	1e63      	subs	r3, r4, #1
 80010fa:	419c      	sbcs	r4, r3
 80010fc:	4304      	orrs	r4, r0
 80010fe:	0763      	lsls	r3, r4, #29
 8001100:	d004      	beq.n	800110c <__aeabi_fmul+0x1dc>
 8001102:	230f      	movs	r3, #15
 8001104:	4023      	ands	r3, r4
 8001106:	2b04      	cmp	r3, #4
 8001108:	d000      	beq.n	800110c <__aeabi_fmul+0x1dc>
 800110a:	3404      	adds	r4, #4
 800110c:	0163      	lsls	r3, r4, #5
 800110e:	d51a      	bpl.n	8001146 <__aeabi_fmul+0x216>
 8001110:	2001      	movs	r0, #1
 8001112:	2400      	movs	r4, #0
 8001114:	e758      	b.n	8000fc8 <__aeabi_fmul+0x98>
 8001116:	2080      	movs	r0, #128	; 0x80
 8001118:	03c0      	lsls	r0, r0, #15
 800111a:	4204      	tst	r4, r0
 800111c:	d009      	beq.n	8001132 <__aeabi_fmul+0x202>
 800111e:	464b      	mov	r3, r9
 8001120:	4203      	tst	r3, r0
 8001122:	d106      	bne.n	8001132 <__aeabi_fmul+0x202>
 8001124:	464c      	mov	r4, r9
 8001126:	4304      	orrs	r4, r0
 8001128:	0264      	lsls	r4, r4, #9
 800112a:	4647      	mov	r7, r8
 800112c:	20ff      	movs	r0, #255	; 0xff
 800112e:	0a64      	lsrs	r4, r4, #9
 8001130:	e74a      	b.n	8000fc8 <__aeabi_fmul+0x98>
 8001132:	2080      	movs	r0, #128	; 0x80
 8001134:	03c0      	lsls	r0, r0, #15
 8001136:	4304      	orrs	r4, r0
 8001138:	0264      	lsls	r4, r4, #9
 800113a:	0037      	movs	r7, r6
 800113c:	20ff      	movs	r0, #255	; 0xff
 800113e:	0a64      	lsrs	r4, r4, #9
 8001140:	e742      	b.n	8000fc8 <__aeabi_fmul+0x98>
 8001142:	0029      	movs	r1, r5
 8001144:	e78e      	b.n	8001064 <__aeabi_fmul+0x134>
 8001146:	01a4      	lsls	r4, r4, #6
 8001148:	2000      	movs	r0, #0
 800114a:	0a64      	lsrs	r4, r4, #9
 800114c:	e73c      	b.n	8000fc8 <__aeabi_fmul+0x98>
 800114e:	2080      	movs	r0, #128	; 0x80
 8001150:	03c0      	lsls	r0, r0, #15
 8001152:	4304      	orrs	r4, r0
 8001154:	0264      	lsls	r4, r4, #9
 8001156:	20ff      	movs	r0, #255	; 0xff
 8001158:	0a64      	lsrs	r4, r4, #9
 800115a:	e735      	b.n	8000fc8 <__aeabi_fmul+0x98>
 800115c:	0801a590 	.word	0x0801a590
 8001160:	f7ffffff 	.word	0xf7ffffff

08001164 <__aeabi_fsub>:
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	4646      	mov	r6, r8
 8001168:	46d6      	mov	lr, sl
 800116a:	464f      	mov	r7, r9
 800116c:	0243      	lsls	r3, r0, #9
 800116e:	0a5b      	lsrs	r3, r3, #9
 8001170:	00da      	lsls	r2, r3, #3
 8001172:	4694      	mov	ip, r2
 8001174:	024a      	lsls	r2, r1, #9
 8001176:	b5c0      	push	{r6, r7, lr}
 8001178:	0044      	lsls	r4, r0, #1
 800117a:	0a56      	lsrs	r6, r2, #9
 800117c:	1c05      	adds	r5, r0, #0
 800117e:	46b0      	mov	r8, r6
 8001180:	0e24      	lsrs	r4, r4, #24
 8001182:	004e      	lsls	r6, r1, #1
 8001184:	0992      	lsrs	r2, r2, #6
 8001186:	001f      	movs	r7, r3
 8001188:	0020      	movs	r0, r4
 800118a:	4692      	mov	sl, r2
 800118c:	0fed      	lsrs	r5, r5, #31
 800118e:	0e36      	lsrs	r6, r6, #24
 8001190:	0fc9      	lsrs	r1, r1, #31
 8001192:	2eff      	cmp	r6, #255	; 0xff
 8001194:	d100      	bne.n	8001198 <__aeabi_fsub+0x34>
 8001196:	e07f      	b.n	8001298 <__aeabi_fsub+0x134>
 8001198:	2201      	movs	r2, #1
 800119a:	4051      	eors	r1, r2
 800119c:	428d      	cmp	r5, r1
 800119e:	d051      	beq.n	8001244 <__aeabi_fsub+0xe0>
 80011a0:	1ba2      	subs	r2, r4, r6
 80011a2:	4691      	mov	r9, r2
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_fsub+0x46>
 80011a8:	e07e      	b.n	80012a8 <__aeabi_fsub+0x144>
 80011aa:	2e00      	cmp	r6, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x4c>
 80011ae:	e099      	b.n	80012e4 <__aeabi_fsub+0x180>
 80011b0:	2cff      	cmp	r4, #255	; 0xff
 80011b2:	d100      	bne.n	80011b6 <__aeabi_fsub+0x52>
 80011b4:	e08c      	b.n	80012d0 <__aeabi_fsub+0x16c>
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	4652      	mov	r2, sl
 80011ba:	04db      	lsls	r3, r3, #19
 80011bc:	431a      	orrs	r2, r3
 80011be:	4692      	mov	sl, r2
 80011c0:	464a      	mov	r2, r9
 80011c2:	2301      	movs	r3, #1
 80011c4:	2a1b      	cmp	r2, #27
 80011c6:	dc08      	bgt.n	80011da <__aeabi_fsub+0x76>
 80011c8:	4653      	mov	r3, sl
 80011ca:	2120      	movs	r1, #32
 80011cc:	40d3      	lsrs	r3, r2
 80011ce:	1a89      	subs	r1, r1, r2
 80011d0:	4652      	mov	r2, sl
 80011d2:	408a      	lsls	r2, r1
 80011d4:	1e51      	subs	r1, r2, #1
 80011d6:	418a      	sbcs	r2, r1
 80011d8:	4313      	orrs	r3, r2
 80011da:	4662      	mov	r2, ip
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	015a      	lsls	r2, r3, #5
 80011e0:	d400      	bmi.n	80011e4 <__aeabi_fsub+0x80>
 80011e2:	e0f3      	b.n	80013cc <__aeabi_fsub+0x268>
 80011e4:	019b      	lsls	r3, r3, #6
 80011e6:	099e      	lsrs	r6, r3, #6
 80011e8:	0030      	movs	r0, r6
 80011ea:	f002 f90d 	bl	8003408 <__clzsi2>
 80011ee:	3805      	subs	r0, #5
 80011f0:	4086      	lsls	r6, r0
 80011f2:	4284      	cmp	r4, r0
 80011f4:	dd00      	ble.n	80011f8 <__aeabi_fsub+0x94>
 80011f6:	e0f7      	b.n	80013e8 <__aeabi_fsub+0x284>
 80011f8:	0032      	movs	r2, r6
 80011fa:	1b04      	subs	r4, r0, r4
 80011fc:	2020      	movs	r0, #32
 80011fe:	3401      	adds	r4, #1
 8001200:	40e2      	lsrs	r2, r4
 8001202:	1b04      	subs	r4, r0, r4
 8001204:	40a6      	lsls	r6, r4
 8001206:	0033      	movs	r3, r6
 8001208:	1e5e      	subs	r6, r3, #1
 800120a:	41b3      	sbcs	r3, r6
 800120c:	2400      	movs	r4, #0
 800120e:	4313      	orrs	r3, r2
 8001210:	075a      	lsls	r2, r3, #29
 8001212:	d004      	beq.n	800121e <__aeabi_fsub+0xba>
 8001214:	220f      	movs	r2, #15
 8001216:	401a      	ands	r2, r3
 8001218:	2a04      	cmp	r2, #4
 800121a:	d000      	beq.n	800121e <__aeabi_fsub+0xba>
 800121c:	3304      	adds	r3, #4
 800121e:	015a      	lsls	r2, r3, #5
 8001220:	d400      	bmi.n	8001224 <__aeabi_fsub+0xc0>
 8001222:	e0d6      	b.n	80013d2 <__aeabi_fsub+0x26e>
 8001224:	1c62      	adds	r2, r4, #1
 8001226:	2cfe      	cmp	r4, #254	; 0xfe
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0xc8>
 800122a:	e0da      	b.n	80013e2 <__aeabi_fsub+0x27e>
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	0a5f      	lsrs	r7, r3, #9
 8001230:	b2d0      	uxtb	r0, r2
 8001232:	05c0      	lsls	r0, r0, #23
 8001234:	4338      	orrs	r0, r7
 8001236:	07ed      	lsls	r5, r5, #31
 8001238:	4328      	orrs	r0, r5
 800123a:	bce0      	pop	{r5, r6, r7}
 800123c:	46ba      	mov	sl, r7
 800123e:	46b1      	mov	r9, r6
 8001240:	46a8      	mov	r8, r5
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001244:	1ba2      	subs	r2, r4, r6
 8001246:	4691      	mov	r9, r2
 8001248:	2a00      	cmp	r2, #0
 800124a:	dd63      	ble.n	8001314 <__aeabi_fsub+0x1b0>
 800124c:	2e00      	cmp	r6, #0
 800124e:	d100      	bne.n	8001252 <__aeabi_fsub+0xee>
 8001250:	e099      	b.n	8001386 <__aeabi_fsub+0x222>
 8001252:	2cff      	cmp	r4, #255	; 0xff
 8001254:	d03c      	beq.n	80012d0 <__aeabi_fsub+0x16c>
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	4652      	mov	r2, sl
 800125a:	04db      	lsls	r3, r3, #19
 800125c:	431a      	orrs	r2, r3
 800125e:	4692      	mov	sl, r2
 8001260:	464a      	mov	r2, r9
 8001262:	2301      	movs	r3, #1
 8001264:	2a1b      	cmp	r2, #27
 8001266:	dc08      	bgt.n	800127a <__aeabi_fsub+0x116>
 8001268:	4653      	mov	r3, sl
 800126a:	2120      	movs	r1, #32
 800126c:	40d3      	lsrs	r3, r2
 800126e:	1a89      	subs	r1, r1, r2
 8001270:	4652      	mov	r2, sl
 8001272:	408a      	lsls	r2, r1
 8001274:	1e51      	subs	r1, r2, #1
 8001276:	418a      	sbcs	r2, r1
 8001278:	4313      	orrs	r3, r2
 800127a:	4463      	add	r3, ip
 800127c:	015a      	lsls	r2, r3, #5
 800127e:	d400      	bmi.n	8001282 <__aeabi_fsub+0x11e>
 8001280:	e0a4      	b.n	80013cc <__aeabi_fsub+0x268>
 8001282:	3401      	adds	r4, #1
 8001284:	2cff      	cmp	r4, #255	; 0xff
 8001286:	d100      	bne.n	800128a <__aeabi_fsub+0x126>
 8001288:	e0ab      	b.n	80013e2 <__aeabi_fsub+0x27e>
 800128a:	2201      	movs	r2, #1
 800128c:	4997      	ldr	r1, [pc, #604]	; (80014ec <__aeabi_fsub+0x388>)
 800128e:	401a      	ands	r2, r3
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	400b      	ands	r3, r1
 8001294:	4313      	orrs	r3, r2
 8001296:	e7bb      	b.n	8001210 <__aeabi_fsub+0xac>
 8001298:	2a00      	cmp	r2, #0
 800129a:	d032      	beq.n	8001302 <__aeabi_fsub+0x19e>
 800129c:	428d      	cmp	r5, r1
 800129e:	d035      	beq.n	800130c <__aeabi_fsub+0x1a8>
 80012a0:	22ff      	movs	r2, #255	; 0xff
 80012a2:	4252      	negs	r2, r2
 80012a4:	4691      	mov	r9, r2
 80012a6:	44a1      	add	r9, r4
 80012a8:	464a      	mov	r2, r9
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d051      	beq.n	8001352 <__aeabi_fsub+0x1ee>
 80012ae:	1b30      	subs	r0, r6, r4
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d000      	beq.n	80012b6 <__aeabi_fsub+0x152>
 80012b4:	e09c      	b.n	80013f0 <__aeabi_fsub+0x28c>
 80012b6:	4663      	mov	r3, ip
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_fsub+0x15a>
 80012bc:	e0df      	b.n	800147e <__aeabi_fsub+0x31a>
 80012be:	3801      	subs	r0, #1
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_fsub+0x162>
 80012c4:	e0f7      	b.n	80014b6 <__aeabi_fsub+0x352>
 80012c6:	2eff      	cmp	r6, #255	; 0xff
 80012c8:	d000      	beq.n	80012cc <__aeabi_fsub+0x168>
 80012ca:	e099      	b.n	8001400 <__aeabi_fsub+0x29c>
 80012cc:	000d      	movs	r5, r1
 80012ce:	4643      	mov	r3, r8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d100      	bne.n	80012d6 <__aeabi_fsub+0x172>
 80012d4:	e085      	b.n	80013e2 <__aeabi_fsub+0x27e>
 80012d6:	2780      	movs	r7, #128	; 0x80
 80012d8:	03ff      	lsls	r7, r7, #15
 80012da:	431f      	orrs	r7, r3
 80012dc:	027f      	lsls	r7, r7, #9
 80012de:	20ff      	movs	r0, #255	; 0xff
 80012e0:	0a7f      	lsrs	r7, r7, #9
 80012e2:	e7a6      	b.n	8001232 <__aeabi_fsub+0xce>
 80012e4:	4652      	mov	r2, sl
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	d074      	beq.n	80013d4 <__aeabi_fsub+0x270>
 80012ea:	2201      	movs	r2, #1
 80012ec:	4252      	negs	r2, r2
 80012ee:	4690      	mov	r8, r2
 80012f0:	44c1      	add	r9, r8
 80012f2:	464a      	mov	r2, r9
 80012f4:	2a00      	cmp	r2, #0
 80012f6:	d100      	bne.n	80012fa <__aeabi_fsub+0x196>
 80012f8:	e0c8      	b.n	800148c <__aeabi_fsub+0x328>
 80012fa:	2cff      	cmp	r4, #255	; 0xff
 80012fc:	d000      	beq.n	8001300 <__aeabi_fsub+0x19c>
 80012fe:	e75f      	b.n	80011c0 <__aeabi_fsub+0x5c>
 8001300:	e7e6      	b.n	80012d0 <__aeabi_fsub+0x16c>
 8001302:	2201      	movs	r2, #1
 8001304:	4051      	eors	r1, r2
 8001306:	42a9      	cmp	r1, r5
 8001308:	d000      	beq.n	800130c <__aeabi_fsub+0x1a8>
 800130a:	e749      	b.n	80011a0 <__aeabi_fsub+0x3c>
 800130c:	22ff      	movs	r2, #255	; 0xff
 800130e:	4252      	negs	r2, r2
 8001310:	4691      	mov	r9, r2
 8001312:	44a1      	add	r9, r4
 8001314:	464a      	mov	r2, r9
 8001316:	2a00      	cmp	r2, #0
 8001318:	d043      	beq.n	80013a2 <__aeabi_fsub+0x23e>
 800131a:	1b31      	subs	r1, r6, r4
 800131c:	2c00      	cmp	r4, #0
 800131e:	d100      	bne.n	8001322 <__aeabi_fsub+0x1be>
 8001320:	e08c      	b.n	800143c <__aeabi_fsub+0x2d8>
 8001322:	2eff      	cmp	r6, #255	; 0xff
 8001324:	d100      	bne.n	8001328 <__aeabi_fsub+0x1c4>
 8001326:	e092      	b.n	800144e <__aeabi_fsub+0x2ea>
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	4662      	mov	r2, ip
 800132c:	04db      	lsls	r3, r3, #19
 800132e:	431a      	orrs	r2, r3
 8001330:	4694      	mov	ip, r2
 8001332:	2301      	movs	r3, #1
 8001334:	291b      	cmp	r1, #27
 8001336:	dc09      	bgt.n	800134c <__aeabi_fsub+0x1e8>
 8001338:	2020      	movs	r0, #32
 800133a:	4663      	mov	r3, ip
 800133c:	4662      	mov	r2, ip
 800133e:	40cb      	lsrs	r3, r1
 8001340:	1a41      	subs	r1, r0, r1
 8001342:	408a      	lsls	r2, r1
 8001344:	0011      	movs	r1, r2
 8001346:	1e48      	subs	r0, r1, #1
 8001348:	4181      	sbcs	r1, r0
 800134a:	430b      	orrs	r3, r1
 800134c:	0034      	movs	r4, r6
 800134e:	4453      	add	r3, sl
 8001350:	e794      	b.n	800127c <__aeabi_fsub+0x118>
 8001352:	22fe      	movs	r2, #254	; 0xfe
 8001354:	1c66      	adds	r6, r4, #1
 8001356:	4232      	tst	r2, r6
 8001358:	d164      	bne.n	8001424 <__aeabi_fsub+0x2c0>
 800135a:	2c00      	cmp	r4, #0
 800135c:	d000      	beq.n	8001360 <__aeabi_fsub+0x1fc>
 800135e:	e082      	b.n	8001466 <__aeabi_fsub+0x302>
 8001360:	4663      	mov	r3, ip
 8001362:	2b00      	cmp	r3, #0
 8001364:	d100      	bne.n	8001368 <__aeabi_fsub+0x204>
 8001366:	e0ab      	b.n	80014c0 <__aeabi_fsub+0x35c>
 8001368:	4653      	mov	r3, sl
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_fsub+0x20c>
 800136e:	e760      	b.n	8001232 <__aeabi_fsub+0xce>
 8001370:	4663      	mov	r3, ip
 8001372:	4652      	mov	r2, sl
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	015a      	lsls	r2, r3, #5
 8001378:	d400      	bmi.n	800137c <__aeabi_fsub+0x218>
 800137a:	e0aa      	b.n	80014d2 <__aeabi_fsub+0x36e>
 800137c:	4663      	mov	r3, ip
 800137e:	4652      	mov	r2, sl
 8001380:	000d      	movs	r5, r1
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	e744      	b.n	8001210 <__aeabi_fsub+0xac>
 8001386:	4652      	mov	r2, sl
 8001388:	2a00      	cmp	r2, #0
 800138a:	d023      	beq.n	80013d4 <__aeabi_fsub+0x270>
 800138c:	2201      	movs	r2, #1
 800138e:	4252      	negs	r2, r2
 8001390:	4690      	mov	r8, r2
 8001392:	44c1      	add	r9, r8
 8001394:	464a      	mov	r2, r9
 8001396:	2a00      	cmp	r2, #0
 8001398:	d075      	beq.n	8001486 <__aeabi_fsub+0x322>
 800139a:	2cff      	cmp	r4, #255	; 0xff
 800139c:	d000      	beq.n	80013a0 <__aeabi_fsub+0x23c>
 800139e:	e75f      	b.n	8001260 <__aeabi_fsub+0xfc>
 80013a0:	e796      	b.n	80012d0 <__aeabi_fsub+0x16c>
 80013a2:	26fe      	movs	r6, #254	; 0xfe
 80013a4:	3401      	adds	r4, #1
 80013a6:	4226      	tst	r6, r4
 80013a8:	d153      	bne.n	8001452 <__aeabi_fsub+0x2ee>
 80013aa:	2800      	cmp	r0, #0
 80013ac:	d172      	bne.n	8001494 <__aeabi_fsub+0x330>
 80013ae:	4663      	mov	r3, ip
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x252>
 80013b4:	e093      	b.n	80014de <__aeabi_fsub+0x37a>
 80013b6:	4653      	mov	r3, sl
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d100      	bne.n	80013be <__aeabi_fsub+0x25a>
 80013bc:	e739      	b.n	8001232 <__aeabi_fsub+0xce>
 80013be:	4463      	add	r3, ip
 80013c0:	2400      	movs	r4, #0
 80013c2:	015a      	lsls	r2, r3, #5
 80013c4:	d502      	bpl.n	80013cc <__aeabi_fsub+0x268>
 80013c6:	4a4a      	ldr	r2, [pc, #296]	; (80014f0 <__aeabi_fsub+0x38c>)
 80013c8:	3401      	adds	r4, #1
 80013ca:	4013      	ands	r3, r2
 80013cc:	075a      	lsls	r2, r3, #29
 80013ce:	d000      	beq.n	80013d2 <__aeabi_fsub+0x26e>
 80013d0:	e720      	b.n	8001214 <__aeabi_fsub+0xb0>
 80013d2:	08db      	lsrs	r3, r3, #3
 80013d4:	2cff      	cmp	r4, #255	; 0xff
 80013d6:	d100      	bne.n	80013da <__aeabi_fsub+0x276>
 80013d8:	e77a      	b.n	80012d0 <__aeabi_fsub+0x16c>
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	0a5f      	lsrs	r7, r3, #9
 80013de:	b2e0      	uxtb	r0, r4
 80013e0:	e727      	b.n	8001232 <__aeabi_fsub+0xce>
 80013e2:	20ff      	movs	r0, #255	; 0xff
 80013e4:	2700      	movs	r7, #0
 80013e6:	e724      	b.n	8001232 <__aeabi_fsub+0xce>
 80013e8:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <__aeabi_fsub+0x38c>)
 80013ea:	1a24      	subs	r4, r4, r0
 80013ec:	4033      	ands	r3, r6
 80013ee:	e70f      	b.n	8001210 <__aeabi_fsub+0xac>
 80013f0:	2eff      	cmp	r6, #255	; 0xff
 80013f2:	d100      	bne.n	80013f6 <__aeabi_fsub+0x292>
 80013f4:	e76a      	b.n	80012cc <__aeabi_fsub+0x168>
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	4662      	mov	r2, ip
 80013fa:	04db      	lsls	r3, r3, #19
 80013fc:	431a      	orrs	r2, r3
 80013fe:	4694      	mov	ip, r2
 8001400:	2301      	movs	r3, #1
 8001402:	281b      	cmp	r0, #27
 8001404:	dc09      	bgt.n	800141a <__aeabi_fsub+0x2b6>
 8001406:	2420      	movs	r4, #32
 8001408:	4663      	mov	r3, ip
 800140a:	4662      	mov	r2, ip
 800140c:	40c3      	lsrs	r3, r0
 800140e:	1a20      	subs	r0, r4, r0
 8001410:	4082      	lsls	r2, r0
 8001412:	0010      	movs	r0, r2
 8001414:	1e44      	subs	r4, r0, #1
 8001416:	41a0      	sbcs	r0, r4
 8001418:	4303      	orrs	r3, r0
 800141a:	4652      	mov	r2, sl
 800141c:	000d      	movs	r5, r1
 800141e:	0034      	movs	r4, r6
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	e6dc      	b.n	80011de <__aeabi_fsub+0x7a>
 8001424:	4663      	mov	r3, ip
 8001426:	4652      	mov	r2, sl
 8001428:	1a9e      	subs	r6, r3, r2
 800142a:	0173      	lsls	r3, r6, #5
 800142c:	d417      	bmi.n	800145e <__aeabi_fsub+0x2fa>
 800142e:	2e00      	cmp	r6, #0
 8001430:	d000      	beq.n	8001434 <__aeabi_fsub+0x2d0>
 8001432:	e6d9      	b.n	80011e8 <__aeabi_fsub+0x84>
 8001434:	2500      	movs	r5, #0
 8001436:	2000      	movs	r0, #0
 8001438:	2700      	movs	r7, #0
 800143a:	e6fa      	b.n	8001232 <__aeabi_fsub+0xce>
 800143c:	4663      	mov	r3, ip
 800143e:	2b00      	cmp	r3, #0
 8001440:	d044      	beq.n	80014cc <__aeabi_fsub+0x368>
 8001442:	3901      	subs	r1, #1
 8001444:	2900      	cmp	r1, #0
 8001446:	d04c      	beq.n	80014e2 <__aeabi_fsub+0x37e>
 8001448:	2eff      	cmp	r6, #255	; 0xff
 800144a:	d000      	beq.n	800144e <__aeabi_fsub+0x2ea>
 800144c:	e771      	b.n	8001332 <__aeabi_fsub+0x1ce>
 800144e:	4643      	mov	r3, r8
 8001450:	e73e      	b.n	80012d0 <__aeabi_fsub+0x16c>
 8001452:	2cff      	cmp	r4, #255	; 0xff
 8001454:	d0c5      	beq.n	80013e2 <__aeabi_fsub+0x27e>
 8001456:	4652      	mov	r2, sl
 8001458:	4462      	add	r2, ip
 800145a:	0853      	lsrs	r3, r2, #1
 800145c:	e7b6      	b.n	80013cc <__aeabi_fsub+0x268>
 800145e:	4663      	mov	r3, ip
 8001460:	000d      	movs	r5, r1
 8001462:	1ad6      	subs	r6, r2, r3
 8001464:	e6c0      	b.n	80011e8 <__aeabi_fsub+0x84>
 8001466:	4662      	mov	r2, ip
 8001468:	2a00      	cmp	r2, #0
 800146a:	d116      	bne.n	800149a <__aeabi_fsub+0x336>
 800146c:	4653      	mov	r3, sl
 800146e:	2b00      	cmp	r3, #0
 8001470:	d000      	beq.n	8001474 <__aeabi_fsub+0x310>
 8001472:	e72b      	b.n	80012cc <__aeabi_fsub+0x168>
 8001474:	2780      	movs	r7, #128	; 0x80
 8001476:	2500      	movs	r5, #0
 8001478:	20ff      	movs	r0, #255	; 0xff
 800147a:	03ff      	lsls	r7, r7, #15
 800147c:	e6d9      	b.n	8001232 <__aeabi_fsub+0xce>
 800147e:	000d      	movs	r5, r1
 8001480:	4643      	mov	r3, r8
 8001482:	0034      	movs	r4, r6
 8001484:	e7a6      	b.n	80013d4 <__aeabi_fsub+0x270>
 8001486:	4653      	mov	r3, sl
 8001488:	4463      	add	r3, ip
 800148a:	e6f7      	b.n	800127c <__aeabi_fsub+0x118>
 800148c:	4663      	mov	r3, ip
 800148e:	4652      	mov	r2, sl
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	e6a4      	b.n	80011de <__aeabi_fsub+0x7a>
 8001494:	4662      	mov	r2, ip
 8001496:	2a00      	cmp	r2, #0
 8001498:	d0d9      	beq.n	800144e <__aeabi_fsub+0x2ea>
 800149a:	4652      	mov	r2, sl
 800149c:	2a00      	cmp	r2, #0
 800149e:	d100      	bne.n	80014a2 <__aeabi_fsub+0x33e>
 80014a0:	e716      	b.n	80012d0 <__aeabi_fsub+0x16c>
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	03d2      	lsls	r2, r2, #15
 80014a6:	4213      	tst	r3, r2
 80014a8:	d100      	bne.n	80014ac <__aeabi_fsub+0x348>
 80014aa:	e711      	b.n	80012d0 <__aeabi_fsub+0x16c>
 80014ac:	4640      	mov	r0, r8
 80014ae:	4210      	tst	r0, r2
 80014b0:	d000      	beq.n	80014b4 <__aeabi_fsub+0x350>
 80014b2:	e70d      	b.n	80012d0 <__aeabi_fsub+0x16c>
 80014b4:	e70a      	b.n	80012cc <__aeabi_fsub+0x168>
 80014b6:	4652      	mov	r2, sl
 80014b8:	000d      	movs	r5, r1
 80014ba:	0034      	movs	r4, r6
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	e68e      	b.n	80011de <__aeabi_fsub+0x7a>
 80014c0:	4653      	mov	r3, sl
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d008      	beq.n	80014d8 <__aeabi_fsub+0x374>
 80014c6:	000d      	movs	r5, r1
 80014c8:	4647      	mov	r7, r8
 80014ca:	e6b2      	b.n	8001232 <__aeabi_fsub+0xce>
 80014cc:	4643      	mov	r3, r8
 80014ce:	0034      	movs	r4, r6
 80014d0:	e780      	b.n	80013d4 <__aeabi_fsub+0x270>
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d000      	beq.n	80014d8 <__aeabi_fsub+0x374>
 80014d6:	e779      	b.n	80013cc <__aeabi_fsub+0x268>
 80014d8:	2500      	movs	r5, #0
 80014da:	2700      	movs	r7, #0
 80014dc:	e6a9      	b.n	8001232 <__aeabi_fsub+0xce>
 80014de:	4647      	mov	r7, r8
 80014e0:	e6a7      	b.n	8001232 <__aeabi_fsub+0xce>
 80014e2:	4653      	mov	r3, sl
 80014e4:	0034      	movs	r4, r6
 80014e6:	4463      	add	r3, ip
 80014e8:	e6c8      	b.n	800127c <__aeabi_fsub+0x118>
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	7dffffff 	.word	0x7dffffff
 80014f0:	fbffffff 	.word	0xfbffffff

080014f4 <__aeabi_f2iz>:
 80014f4:	0241      	lsls	r1, r0, #9
 80014f6:	0042      	lsls	r2, r0, #1
 80014f8:	0fc3      	lsrs	r3, r0, #31
 80014fa:	0a49      	lsrs	r1, r1, #9
 80014fc:	2000      	movs	r0, #0
 80014fe:	0e12      	lsrs	r2, r2, #24
 8001500:	2a7e      	cmp	r2, #126	; 0x7e
 8001502:	d903      	bls.n	800150c <__aeabi_f2iz+0x18>
 8001504:	2a9d      	cmp	r2, #157	; 0x9d
 8001506:	d902      	bls.n	800150e <__aeabi_f2iz+0x1a>
 8001508:	4a09      	ldr	r2, [pc, #36]	; (8001530 <__aeabi_f2iz+0x3c>)
 800150a:	1898      	adds	r0, r3, r2
 800150c:	4770      	bx	lr
 800150e:	2080      	movs	r0, #128	; 0x80
 8001510:	0400      	lsls	r0, r0, #16
 8001512:	4301      	orrs	r1, r0
 8001514:	2a95      	cmp	r2, #149	; 0x95
 8001516:	dc07      	bgt.n	8001528 <__aeabi_f2iz+0x34>
 8001518:	2096      	movs	r0, #150	; 0x96
 800151a:	1a82      	subs	r2, r0, r2
 800151c:	40d1      	lsrs	r1, r2
 800151e:	4248      	negs	r0, r1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f3      	bne.n	800150c <__aeabi_f2iz+0x18>
 8001524:	0008      	movs	r0, r1
 8001526:	e7f1      	b.n	800150c <__aeabi_f2iz+0x18>
 8001528:	3a96      	subs	r2, #150	; 0x96
 800152a:	4091      	lsls	r1, r2
 800152c:	e7f7      	b.n	800151e <__aeabi_f2iz+0x2a>
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	7fffffff 	.word	0x7fffffff

08001534 <__aeabi_i2f>:
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	2800      	cmp	r0, #0
 8001538:	d013      	beq.n	8001562 <__aeabi_i2f+0x2e>
 800153a:	17c3      	asrs	r3, r0, #31
 800153c:	18c5      	adds	r5, r0, r3
 800153e:	405d      	eors	r5, r3
 8001540:	0fc4      	lsrs	r4, r0, #31
 8001542:	0028      	movs	r0, r5
 8001544:	f001 ff60 	bl	8003408 <__clzsi2>
 8001548:	239e      	movs	r3, #158	; 0x9e
 800154a:	0001      	movs	r1, r0
 800154c:	1a1b      	subs	r3, r3, r0
 800154e:	2b96      	cmp	r3, #150	; 0x96
 8001550:	dc0f      	bgt.n	8001572 <__aeabi_i2f+0x3e>
 8001552:	2808      	cmp	r0, #8
 8001554:	dd01      	ble.n	800155a <__aeabi_i2f+0x26>
 8001556:	3908      	subs	r1, #8
 8001558:	408d      	lsls	r5, r1
 800155a:	026d      	lsls	r5, r5, #9
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	b2d8      	uxtb	r0, r3
 8001560:	e002      	b.n	8001568 <__aeabi_i2f+0x34>
 8001562:	2400      	movs	r4, #0
 8001564:	2000      	movs	r0, #0
 8001566:	2500      	movs	r5, #0
 8001568:	05c0      	lsls	r0, r0, #23
 800156a:	4328      	orrs	r0, r5
 800156c:	07e4      	lsls	r4, r4, #31
 800156e:	4320      	orrs	r0, r4
 8001570:	bd70      	pop	{r4, r5, r6, pc}
 8001572:	2b99      	cmp	r3, #153	; 0x99
 8001574:	dd0b      	ble.n	800158e <__aeabi_i2f+0x5a>
 8001576:	2205      	movs	r2, #5
 8001578:	002e      	movs	r6, r5
 800157a:	1a12      	subs	r2, r2, r0
 800157c:	40d6      	lsrs	r6, r2
 800157e:	0002      	movs	r2, r0
 8001580:	321b      	adds	r2, #27
 8001582:	4095      	lsls	r5, r2
 8001584:	0028      	movs	r0, r5
 8001586:	1e45      	subs	r5, r0, #1
 8001588:	41a8      	sbcs	r0, r5
 800158a:	0035      	movs	r5, r6
 800158c:	4305      	orrs	r5, r0
 800158e:	2905      	cmp	r1, #5
 8001590:	dd01      	ble.n	8001596 <__aeabi_i2f+0x62>
 8001592:	1f4a      	subs	r2, r1, #5
 8001594:	4095      	lsls	r5, r2
 8001596:	002a      	movs	r2, r5
 8001598:	4e08      	ldr	r6, [pc, #32]	; (80015bc <__aeabi_i2f+0x88>)
 800159a:	4032      	ands	r2, r6
 800159c:	0768      	lsls	r0, r5, #29
 800159e:	d009      	beq.n	80015b4 <__aeabi_i2f+0x80>
 80015a0:	200f      	movs	r0, #15
 80015a2:	4028      	ands	r0, r5
 80015a4:	2804      	cmp	r0, #4
 80015a6:	d005      	beq.n	80015b4 <__aeabi_i2f+0x80>
 80015a8:	3204      	adds	r2, #4
 80015aa:	0150      	lsls	r0, r2, #5
 80015ac:	d502      	bpl.n	80015b4 <__aeabi_i2f+0x80>
 80015ae:	239f      	movs	r3, #159	; 0x9f
 80015b0:	4032      	ands	r2, r6
 80015b2:	1a5b      	subs	r3, r3, r1
 80015b4:	0192      	lsls	r2, r2, #6
 80015b6:	0a55      	lsrs	r5, r2, #9
 80015b8:	b2d8      	uxtb	r0, r3
 80015ba:	e7d5      	b.n	8001568 <__aeabi_i2f+0x34>
 80015bc:	fbffffff 	.word	0xfbffffff

080015c0 <__aeabi_ui2f>:
 80015c0:	b570      	push	{r4, r5, r6, lr}
 80015c2:	1e05      	subs	r5, r0, #0
 80015c4:	d00e      	beq.n	80015e4 <__aeabi_ui2f+0x24>
 80015c6:	f001 ff1f 	bl	8003408 <__clzsi2>
 80015ca:	239e      	movs	r3, #158	; 0x9e
 80015cc:	0004      	movs	r4, r0
 80015ce:	1a1b      	subs	r3, r3, r0
 80015d0:	2b96      	cmp	r3, #150	; 0x96
 80015d2:	dc0c      	bgt.n	80015ee <__aeabi_ui2f+0x2e>
 80015d4:	2808      	cmp	r0, #8
 80015d6:	dd01      	ble.n	80015dc <__aeabi_ui2f+0x1c>
 80015d8:	3c08      	subs	r4, #8
 80015da:	40a5      	lsls	r5, r4
 80015dc:	026d      	lsls	r5, r5, #9
 80015de:	0a6d      	lsrs	r5, r5, #9
 80015e0:	b2d8      	uxtb	r0, r3
 80015e2:	e001      	b.n	80015e8 <__aeabi_ui2f+0x28>
 80015e4:	2000      	movs	r0, #0
 80015e6:	2500      	movs	r5, #0
 80015e8:	05c0      	lsls	r0, r0, #23
 80015ea:	4328      	orrs	r0, r5
 80015ec:	bd70      	pop	{r4, r5, r6, pc}
 80015ee:	2b99      	cmp	r3, #153	; 0x99
 80015f0:	dd09      	ble.n	8001606 <__aeabi_ui2f+0x46>
 80015f2:	0002      	movs	r2, r0
 80015f4:	0029      	movs	r1, r5
 80015f6:	321b      	adds	r2, #27
 80015f8:	4091      	lsls	r1, r2
 80015fa:	1e4a      	subs	r2, r1, #1
 80015fc:	4191      	sbcs	r1, r2
 80015fe:	2205      	movs	r2, #5
 8001600:	1a12      	subs	r2, r2, r0
 8001602:	40d5      	lsrs	r5, r2
 8001604:	430d      	orrs	r5, r1
 8001606:	2c05      	cmp	r4, #5
 8001608:	dd01      	ble.n	800160e <__aeabi_ui2f+0x4e>
 800160a:	1f62      	subs	r2, r4, #5
 800160c:	4095      	lsls	r5, r2
 800160e:	0029      	movs	r1, r5
 8001610:	4e08      	ldr	r6, [pc, #32]	; (8001634 <__aeabi_ui2f+0x74>)
 8001612:	4031      	ands	r1, r6
 8001614:	076a      	lsls	r2, r5, #29
 8001616:	d009      	beq.n	800162c <__aeabi_ui2f+0x6c>
 8001618:	200f      	movs	r0, #15
 800161a:	4028      	ands	r0, r5
 800161c:	2804      	cmp	r0, #4
 800161e:	d005      	beq.n	800162c <__aeabi_ui2f+0x6c>
 8001620:	3104      	adds	r1, #4
 8001622:	014a      	lsls	r2, r1, #5
 8001624:	d502      	bpl.n	800162c <__aeabi_ui2f+0x6c>
 8001626:	239f      	movs	r3, #159	; 0x9f
 8001628:	4031      	ands	r1, r6
 800162a:	1b1b      	subs	r3, r3, r4
 800162c:	0189      	lsls	r1, r1, #6
 800162e:	0a4d      	lsrs	r5, r1, #9
 8001630:	b2d8      	uxtb	r0, r3
 8001632:	e7d9      	b.n	80015e8 <__aeabi_ui2f+0x28>
 8001634:	fbffffff 	.word	0xfbffffff

08001638 <__aeabi_dadd>:
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	464f      	mov	r7, r9
 800163c:	46d6      	mov	lr, sl
 800163e:	4646      	mov	r6, r8
 8001640:	000d      	movs	r5, r1
 8001642:	0001      	movs	r1, r0
 8001644:	0018      	movs	r0, r3
 8001646:	b5c0      	push	{r6, r7, lr}
 8001648:	0017      	movs	r7, r2
 800164a:	032b      	lsls	r3, r5, #12
 800164c:	0a5a      	lsrs	r2, r3, #9
 800164e:	0f4b      	lsrs	r3, r1, #29
 8001650:	4313      	orrs	r3, r2
 8001652:	00ca      	lsls	r2, r1, #3
 8001654:	4691      	mov	r9, r2
 8001656:	0302      	lsls	r2, r0, #12
 8001658:	006e      	lsls	r6, r5, #1
 800165a:	0041      	lsls	r1, r0, #1
 800165c:	0a52      	lsrs	r2, r2, #9
 800165e:	0fec      	lsrs	r4, r5, #31
 8001660:	0f7d      	lsrs	r5, r7, #29
 8001662:	4315      	orrs	r5, r2
 8001664:	0d76      	lsrs	r6, r6, #21
 8001666:	0d49      	lsrs	r1, r1, #21
 8001668:	0fc0      	lsrs	r0, r0, #31
 800166a:	4682      	mov	sl, r0
 800166c:	46ac      	mov	ip, r5
 800166e:	00ff      	lsls	r7, r7, #3
 8001670:	1a72      	subs	r2, r6, r1
 8001672:	4284      	cmp	r4, r0
 8001674:	d100      	bne.n	8001678 <__aeabi_dadd+0x40>
 8001676:	e098      	b.n	80017aa <__aeabi_dadd+0x172>
 8001678:	2a00      	cmp	r2, #0
 800167a:	dc00      	bgt.n	800167e <__aeabi_dadd+0x46>
 800167c:	e081      	b.n	8001782 <__aeabi_dadd+0x14a>
 800167e:	2900      	cmp	r1, #0
 8001680:	d100      	bne.n	8001684 <__aeabi_dadd+0x4c>
 8001682:	e0b6      	b.n	80017f2 <__aeabi_dadd+0x1ba>
 8001684:	49c9      	ldr	r1, [pc, #804]	; (80019ac <__aeabi_dadd+0x374>)
 8001686:	428e      	cmp	r6, r1
 8001688:	d100      	bne.n	800168c <__aeabi_dadd+0x54>
 800168a:	e172      	b.n	8001972 <__aeabi_dadd+0x33a>
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	0028      	movs	r0, r5
 8001690:	0409      	lsls	r1, r1, #16
 8001692:	4308      	orrs	r0, r1
 8001694:	4684      	mov	ip, r0
 8001696:	2a38      	cmp	r2, #56	; 0x38
 8001698:	dd00      	ble.n	800169c <__aeabi_dadd+0x64>
 800169a:	e15e      	b.n	800195a <__aeabi_dadd+0x322>
 800169c:	2a1f      	cmp	r2, #31
 800169e:	dd00      	ble.n	80016a2 <__aeabi_dadd+0x6a>
 80016a0:	e1ee      	b.n	8001a80 <__aeabi_dadd+0x448>
 80016a2:	2020      	movs	r0, #32
 80016a4:	0039      	movs	r1, r7
 80016a6:	4665      	mov	r5, ip
 80016a8:	1a80      	subs	r0, r0, r2
 80016aa:	4087      	lsls	r7, r0
 80016ac:	40d1      	lsrs	r1, r2
 80016ae:	4085      	lsls	r5, r0
 80016b0:	430d      	orrs	r5, r1
 80016b2:	0039      	movs	r1, r7
 80016b4:	1e4f      	subs	r7, r1, #1
 80016b6:	41b9      	sbcs	r1, r7
 80016b8:	4667      	mov	r7, ip
 80016ba:	40d7      	lsrs	r7, r2
 80016bc:	4329      	orrs	r1, r5
 80016be:	1bdb      	subs	r3, r3, r7
 80016c0:	464a      	mov	r2, r9
 80016c2:	1a55      	subs	r5, r2, r1
 80016c4:	45a9      	cmp	r9, r5
 80016c6:	4189      	sbcs	r1, r1
 80016c8:	4249      	negs	r1, r1
 80016ca:	1a5b      	subs	r3, r3, r1
 80016cc:	4698      	mov	r8, r3
 80016ce:	4643      	mov	r3, r8
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	d400      	bmi.n	80016d6 <__aeabi_dadd+0x9e>
 80016d4:	e0cc      	b.n	8001870 <__aeabi_dadd+0x238>
 80016d6:	4643      	mov	r3, r8
 80016d8:	025b      	lsls	r3, r3, #9
 80016da:	0a5b      	lsrs	r3, r3, #9
 80016dc:	4698      	mov	r8, r3
 80016de:	4643      	mov	r3, r8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0xae>
 80016e4:	e12c      	b.n	8001940 <__aeabi_dadd+0x308>
 80016e6:	4640      	mov	r0, r8
 80016e8:	f001 fe8e 	bl	8003408 <__clzsi2>
 80016ec:	0001      	movs	r1, r0
 80016ee:	3908      	subs	r1, #8
 80016f0:	2220      	movs	r2, #32
 80016f2:	0028      	movs	r0, r5
 80016f4:	4643      	mov	r3, r8
 80016f6:	1a52      	subs	r2, r2, r1
 80016f8:	408b      	lsls	r3, r1
 80016fa:	40d0      	lsrs	r0, r2
 80016fc:	408d      	lsls	r5, r1
 80016fe:	4303      	orrs	r3, r0
 8001700:	428e      	cmp	r6, r1
 8001702:	dd00      	ble.n	8001706 <__aeabi_dadd+0xce>
 8001704:	e117      	b.n	8001936 <__aeabi_dadd+0x2fe>
 8001706:	1b8e      	subs	r6, r1, r6
 8001708:	1c72      	adds	r2, r6, #1
 800170a:	2a1f      	cmp	r2, #31
 800170c:	dd00      	ble.n	8001710 <__aeabi_dadd+0xd8>
 800170e:	e1a7      	b.n	8001a60 <__aeabi_dadd+0x428>
 8001710:	2120      	movs	r1, #32
 8001712:	0018      	movs	r0, r3
 8001714:	002e      	movs	r6, r5
 8001716:	1a89      	subs	r1, r1, r2
 8001718:	408d      	lsls	r5, r1
 800171a:	4088      	lsls	r0, r1
 800171c:	40d6      	lsrs	r6, r2
 800171e:	40d3      	lsrs	r3, r2
 8001720:	1e69      	subs	r1, r5, #1
 8001722:	418d      	sbcs	r5, r1
 8001724:	4330      	orrs	r0, r6
 8001726:	4698      	mov	r8, r3
 8001728:	2600      	movs	r6, #0
 800172a:	4305      	orrs	r5, r0
 800172c:	076b      	lsls	r3, r5, #29
 800172e:	d009      	beq.n	8001744 <__aeabi_dadd+0x10c>
 8001730:	230f      	movs	r3, #15
 8001732:	402b      	ands	r3, r5
 8001734:	2b04      	cmp	r3, #4
 8001736:	d005      	beq.n	8001744 <__aeabi_dadd+0x10c>
 8001738:	1d2b      	adds	r3, r5, #4
 800173a:	42ab      	cmp	r3, r5
 800173c:	41ad      	sbcs	r5, r5
 800173e:	426d      	negs	r5, r5
 8001740:	44a8      	add	r8, r5
 8001742:	001d      	movs	r5, r3
 8001744:	4643      	mov	r3, r8
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	d400      	bmi.n	800174c <__aeabi_dadd+0x114>
 800174a:	e094      	b.n	8001876 <__aeabi_dadd+0x23e>
 800174c:	4b97      	ldr	r3, [pc, #604]	; (80019ac <__aeabi_dadd+0x374>)
 800174e:	1c72      	adds	r2, r6, #1
 8001750:	429a      	cmp	r2, r3
 8001752:	d100      	bne.n	8001756 <__aeabi_dadd+0x11e>
 8001754:	e09d      	b.n	8001892 <__aeabi_dadd+0x25a>
 8001756:	4641      	mov	r1, r8
 8001758:	4b95      	ldr	r3, [pc, #596]	; (80019b0 <__aeabi_dadd+0x378>)
 800175a:	08ed      	lsrs	r5, r5, #3
 800175c:	4019      	ands	r1, r3
 800175e:	000b      	movs	r3, r1
 8001760:	0552      	lsls	r2, r2, #21
 8001762:	0749      	lsls	r1, r1, #29
 8001764:	025b      	lsls	r3, r3, #9
 8001766:	4329      	orrs	r1, r5
 8001768:	0b1b      	lsrs	r3, r3, #12
 800176a:	0d52      	lsrs	r2, r2, #21
 800176c:	0512      	lsls	r2, r2, #20
 800176e:	4313      	orrs	r3, r2
 8001770:	07e4      	lsls	r4, r4, #31
 8001772:	4323      	orrs	r3, r4
 8001774:	0008      	movs	r0, r1
 8001776:	0019      	movs	r1, r3
 8001778:	bce0      	pop	{r5, r6, r7}
 800177a:	46ba      	mov	sl, r7
 800177c:	46b1      	mov	r9, r6
 800177e:	46a8      	mov	r8, r5
 8001780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001782:	2a00      	cmp	r2, #0
 8001784:	d043      	beq.n	800180e <__aeabi_dadd+0x1d6>
 8001786:	1b8a      	subs	r2, r1, r6
 8001788:	2e00      	cmp	r6, #0
 800178a:	d000      	beq.n	800178e <__aeabi_dadd+0x156>
 800178c:	e12a      	b.n	80019e4 <__aeabi_dadd+0x3ac>
 800178e:	464c      	mov	r4, r9
 8001790:	431c      	orrs	r4, r3
 8001792:	d100      	bne.n	8001796 <__aeabi_dadd+0x15e>
 8001794:	e1d1      	b.n	8001b3a <__aeabi_dadd+0x502>
 8001796:	1e54      	subs	r4, r2, #1
 8001798:	2a01      	cmp	r2, #1
 800179a:	d100      	bne.n	800179e <__aeabi_dadd+0x166>
 800179c:	e21f      	b.n	8001bde <__aeabi_dadd+0x5a6>
 800179e:	4d83      	ldr	r5, [pc, #524]	; (80019ac <__aeabi_dadd+0x374>)
 80017a0:	42aa      	cmp	r2, r5
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dadd+0x16e>
 80017a4:	e272      	b.n	8001c8c <__aeabi_dadd+0x654>
 80017a6:	0022      	movs	r2, r4
 80017a8:	e123      	b.n	80019f2 <__aeabi_dadd+0x3ba>
 80017aa:	2a00      	cmp	r2, #0
 80017ac:	dc00      	bgt.n	80017b0 <__aeabi_dadd+0x178>
 80017ae:	e098      	b.n	80018e2 <__aeabi_dadd+0x2aa>
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d042      	beq.n	800183a <__aeabi_dadd+0x202>
 80017b4:	497d      	ldr	r1, [pc, #500]	; (80019ac <__aeabi_dadd+0x374>)
 80017b6:	428e      	cmp	r6, r1
 80017b8:	d100      	bne.n	80017bc <__aeabi_dadd+0x184>
 80017ba:	e0da      	b.n	8001972 <__aeabi_dadd+0x33a>
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	0028      	movs	r0, r5
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	4308      	orrs	r0, r1
 80017c4:	4684      	mov	ip, r0
 80017c6:	2a38      	cmp	r2, #56	; 0x38
 80017c8:	dd00      	ble.n	80017cc <__aeabi_dadd+0x194>
 80017ca:	e129      	b.n	8001a20 <__aeabi_dadd+0x3e8>
 80017cc:	2a1f      	cmp	r2, #31
 80017ce:	dc00      	bgt.n	80017d2 <__aeabi_dadd+0x19a>
 80017d0:	e187      	b.n	8001ae2 <__aeabi_dadd+0x4aa>
 80017d2:	0011      	movs	r1, r2
 80017d4:	4665      	mov	r5, ip
 80017d6:	3920      	subs	r1, #32
 80017d8:	40cd      	lsrs	r5, r1
 80017da:	2a20      	cmp	r2, #32
 80017dc:	d004      	beq.n	80017e8 <__aeabi_dadd+0x1b0>
 80017de:	2040      	movs	r0, #64	; 0x40
 80017e0:	4661      	mov	r1, ip
 80017e2:	1a82      	subs	r2, r0, r2
 80017e4:	4091      	lsls	r1, r2
 80017e6:	430f      	orrs	r7, r1
 80017e8:	0039      	movs	r1, r7
 80017ea:	1e4f      	subs	r7, r1, #1
 80017ec:	41b9      	sbcs	r1, r7
 80017ee:	430d      	orrs	r5, r1
 80017f0:	e11b      	b.n	8001a2a <__aeabi_dadd+0x3f2>
 80017f2:	0029      	movs	r1, r5
 80017f4:	4339      	orrs	r1, r7
 80017f6:	d100      	bne.n	80017fa <__aeabi_dadd+0x1c2>
 80017f8:	e0b5      	b.n	8001966 <__aeabi_dadd+0x32e>
 80017fa:	1e51      	subs	r1, r2, #1
 80017fc:	2a01      	cmp	r2, #1
 80017fe:	d100      	bne.n	8001802 <__aeabi_dadd+0x1ca>
 8001800:	e1ab      	b.n	8001b5a <__aeabi_dadd+0x522>
 8001802:	486a      	ldr	r0, [pc, #424]	; (80019ac <__aeabi_dadd+0x374>)
 8001804:	4282      	cmp	r2, r0
 8001806:	d100      	bne.n	800180a <__aeabi_dadd+0x1d2>
 8001808:	e1b2      	b.n	8001b70 <__aeabi_dadd+0x538>
 800180a:	000a      	movs	r2, r1
 800180c:	e743      	b.n	8001696 <__aeabi_dadd+0x5e>
 800180e:	4969      	ldr	r1, [pc, #420]	; (80019b4 <__aeabi_dadd+0x37c>)
 8001810:	1c75      	adds	r5, r6, #1
 8001812:	420d      	tst	r5, r1
 8001814:	d000      	beq.n	8001818 <__aeabi_dadd+0x1e0>
 8001816:	e0cf      	b.n	80019b8 <__aeabi_dadd+0x380>
 8001818:	2e00      	cmp	r6, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dadd+0x1e6>
 800181c:	e193      	b.n	8001b46 <__aeabi_dadd+0x50e>
 800181e:	4649      	mov	r1, r9
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x1ee>
 8001824:	e1d1      	b.n	8001bca <__aeabi_dadd+0x592>
 8001826:	4661      	mov	r1, ip
 8001828:	4339      	orrs	r1, r7
 800182a:	d000      	beq.n	800182e <__aeabi_dadd+0x1f6>
 800182c:	e1e3      	b.n	8001bf6 <__aeabi_dadd+0x5be>
 800182e:	4649      	mov	r1, r9
 8001830:	0758      	lsls	r0, r3, #29
 8001832:	08c9      	lsrs	r1, r1, #3
 8001834:	4301      	orrs	r1, r0
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	e026      	b.n	8001888 <__aeabi_dadd+0x250>
 800183a:	0029      	movs	r1, r5
 800183c:	4339      	orrs	r1, r7
 800183e:	d100      	bne.n	8001842 <__aeabi_dadd+0x20a>
 8001840:	e091      	b.n	8001966 <__aeabi_dadd+0x32e>
 8001842:	1e51      	subs	r1, r2, #1
 8001844:	2a01      	cmp	r2, #1
 8001846:	d005      	beq.n	8001854 <__aeabi_dadd+0x21c>
 8001848:	4858      	ldr	r0, [pc, #352]	; (80019ac <__aeabi_dadd+0x374>)
 800184a:	4282      	cmp	r2, r0
 800184c:	d100      	bne.n	8001850 <__aeabi_dadd+0x218>
 800184e:	e18f      	b.n	8001b70 <__aeabi_dadd+0x538>
 8001850:	000a      	movs	r2, r1
 8001852:	e7b8      	b.n	80017c6 <__aeabi_dadd+0x18e>
 8001854:	003d      	movs	r5, r7
 8001856:	444d      	add	r5, r9
 8001858:	454d      	cmp	r5, r9
 800185a:	4189      	sbcs	r1, r1
 800185c:	4463      	add	r3, ip
 800185e:	4698      	mov	r8, r3
 8001860:	4249      	negs	r1, r1
 8001862:	4488      	add	r8, r1
 8001864:	4643      	mov	r3, r8
 8001866:	2602      	movs	r6, #2
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	d500      	bpl.n	800186e <__aeabi_dadd+0x236>
 800186c:	e0eb      	b.n	8001a46 <__aeabi_dadd+0x40e>
 800186e:	3e01      	subs	r6, #1
 8001870:	076b      	lsls	r3, r5, #29
 8001872:	d000      	beq.n	8001876 <__aeabi_dadd+0x23e>
 8001874:	e75c      	b.n	8001730 <__aeabi_dadd+0xf8>
 8001876:	4643      	mov	r3, r8
 8001878:	08e9      	lsrs	r1, r5, #3
 800187a:	075a      	lsls	r2, r3, #29
 800187c:	4311      	orrs	r1, r2
 800187e:	0032      	movs	r2, r6
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	484a      	ldr	r0, [pc, #296]	; (80019ac <__aeabi_dadd+0x374>)
 8001884:	4282      	cmp	r2, r0
 8001886:	d021      	beq.n	80018cc <__aeabi_dadd+0x294>
 8001888:	031b      	lsls	r3, r3, #12
 800188a:	0552      	lsls	r2, r2, #21
 800188c:	0b1b      	lsrs	r3, r3, #12
 800188e:	0d52      	lsrs	r2, r2, #21
 8001890:	e76c      	b.n	800176c <__aeabi_dadd+0x134>
 8001892:	2300      	movs	r3, #0
 8001894:	2100      	movs	r1, #0
 8001896:	e769      	b.n	800176c <__aeabi_dadd+0x134>
 8001898:	002a      	movs	r2, r5
 800189a:	433a      	orrs	r2, r7
 800189c:	d069      	beq.n	8001972 <__aeabi_dadd+0x33a>
 800189e:	464a      	mov	r2, r9
 80018a0:	0758      	lsls	r0, r3, #29
 80018a2:	08d1      	lsrs	r1, r2, #3
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	031b      	lsls	r3, r3, #12
 80018aa:	4308      	orrs	r0, r1
 80018ac:	421a      	tst	r2, r3
 80018ae:	d007      	beq.n	80018c0 <__aeabi_dadd+0x288>
 80018b0:	0029      	movs	r1, r5
 80018b2:	08ed      	lsrs	r5, r5, #3
 80018b4:	421d      	tst	r5, r3
 80018b6:	d103      	bne.n	80018c0 <__aeabi_dadd+0x288>
 80018b8:	002a      	movs	r2, r5
 80018ba:	08ff      	lsrs	r7, r7, #3
 80018bc:	0748      	lsls	r0, r1, #29
 80018be:	4338      	orrs	r0, r7
 80018c0:	0f43      	lsrs	r3, r0, #29
 80018c2:	00c1      	lsls	r1, r0, #3
 80018c4:	075b      	lsls	r3, r3, #29
 80018c6:	08c9      	lsrs	r1, r1, #3
 80018c8:	4319      	orrs	r1, r3
 80018ca:	0013      	movs	r3, r2
 80018cc:	000a      	movs	r2, r1
 80018ce:	431a      	orrs	r2, r3
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x29c>
 80018d2:	e213      	b.n	8001cfc <__aeabi_dadd+0x6c4>
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	0312      	lsls	r2, r2, #12
 80018d8:	4313      	orrs	r3, r2
 80018da:	031b      	lsls	r3, r3, #12
 80018dc:	4a33      	ldr	r2, [pc, #204]	; (80019ac <__aeabi_dadd+0x374>)
 80018de:	0b1b      	lsrs	r3, r3, #12
 80018e0:	e744      	b.n	800176c <__aeabi_dadd+0x134>
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	d04b      	beq.n	800197e <__aeabi_dadd+0x346>
 80018e6:	1b8a      	subs	r2, r1, r6
 80018e8:	2e00      	cmp	r6, #0
 80018ea:	d100      	bne.n	80018ee <__aeabi_dadd+0x2b6>
 80018ec:	e0e7      	b.n	8001abe <__aeabi_dadd+0x486>
 80018ee:	482f      	ldr	r0, [pc, #188]	; (80019ac <__aeabi_dadd+0x374>)
 80018f0:	4281      	cmp	r1, r0
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dadd+0x2be>
 80018f4:	e195      	b.n	8001c22 <__aeabi_dadd+0x5ea>
 80018f6:	2080      	movs	r0, #128	; 0x80
 80018f8:	0400      	lsls	r0, r0, #16
 80018fa:	4303      	orrs	r3, r0
 80018fc:	2a38      	cmp	r2, #56	; 0x38
 80018fe:	dd00      	ble.n	8001902 <__aeabi_dadd+0x2ca>
 8001900:	e143      	b.n	8001b8a <__aeabi_dadd+0x552>
 8001902:	2a1f      	cmp	r2, #31
 8001904:	dd00      	ble.n	8001908 <__aeabi_dadd+0x2d0>
 8001906:	e1db      	b.n	8001cc0 <__aeabi_dadd+0x688>
 8001908:	2020      	movs	r0, #32
 800190a:	001d      	movs	r5, r3
 800190c:	464e      	mov	r6, r9
 800190e:	1a80      	subs	r0, r0, r2
 8001910:	4085      	lsls	r5, r0
 8001912:	40d6      	lsrs	r6, r2
 8001914:	4335      	orrs	r5, r6
 8001916:	464e      	mov	r6, r9
 8001918:	4086      	lsls	r6, r0
 800191a:	0030      	movs	r0, r6
 800191c:	40d3      	lsrs	r3, r2
 800191e:	1e46      	subs	r6, r0, #1
 8001920:	41b0      	sbcs	r0, r6
 8001922:	449c      	add	ip, r3
 8001924:	4305      	orrs	r5, r0
 8001926:	19ed      	adds	r5, r5, r7
 8001928:	42bd      	cmp	r5, r7
 800192a:	419b      	sbcs	r3, r3
 800192c:	425b      	negs	r3, r3
 800192e:	4463      	add	r3, ip
 8001930:	4698      	mov	r8, r3
 8001932:	000e      	movs	r6, r1
 8001934:	e07f      	b.n	8001a36 <__aeabi_dadd+0x3fe>
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <__aeabi_dadd+0x378>)
 8001938:	1a76      	subs	r6, r6, r1
 800193a:	4013      	ands	r3, r2
 800193c:	4698      	mov	r8, r3
 800193e:	e6f5      	b.n	800172c <__aeabi_dadd+0xf4>
 8001940:	0028      	movs	r0, r5
 8001942:	f001 fd61 	bl	8003408 <__clzsi2>
 8001946:	0001      	movs	r1, r0
 8001948:	3118      	adds	r1, #24
 800194a:	291f      	cmp	r1, #31
 800194c:	dc00      	bgt.n	8001950 <__aeabi_dadd+0x318>
 800194e:	e6cf      	b.n	80016f0 <__aeabi_dadd+0xb8>
 8001950:	002b      	movs	r3, r5
 8001952:	3808      	subs	r0, #8
 8001954:	4083      	lsls	r3, r0
 8001956:	2500      	movs	r5, #0
 8001958:	e6d2      	b.n	8001700 <__aeabi_dadd+0xc8>
 800195a:	4662      	mov	r2, ip
 800195c:	433a      	orrs	r2, r7
 800195e:	0011      	movs	r1, r2
 8001960:	1e4f      	subs	r7, r1, #1
 8001962:	41b9      	sbcs	r1, r7
 8001964:	e6ac      	b.n	80016c0 <__aeabi_dadd+0x88>
 8001966:	4649      	mov	r1, r9
 8001968:	0758      	lsls	r0, r3, #29
 800196a:	08c9      	lsrs	r1, r1, #3
 800196c:	4301      	orrs	r1, r0
 800196e:	08db      	lsrs	r3, r3, #3
 8001970:	e787      	b.n	8001882 <__aeabi_dadd+0x24a>
 8001972:	4649      	mov	r1, r9
 8001974:	075a      	lsls	r2, r3, #29
 8001976:	08c9      	lsrs	r1, r1, #3
 8001978:	4311      	orrs	r1, r2
 800197a:	08db      	lsrs	r3, r3, #3
 800197c:	e7a6      	b.n	80018cc <__aeabi_dadd+0x294>
 800197e:	490d      	ldr	r1, [pc, #52]	; (80019b4 <__aeabi_dadd+0x37c>)
 8001980:	1c70      	adds	r0, r6, #1
 8001982:	4208      	tst	r0, r1
 8001984:	d000      	beq.n	8001988 <__aeabi_dadd+0x350>
 8001986:	e0bb      	b.n	8001b00 <__aeabi_dadd+0x4c8>
 8001988:	2e00      	cmp	r6, #0
 800198a:	d000      	beq.n	800198e <__aeabi_dadd+0x356>
 800198c:	e114      	b.n	8001bb8 <__aeabi_dadd+0x580>
 800198e:	4649      	mov	r1, r9
 8001990:	4319      	orrs	r1, r3
 8001992:	d100      	bne.n	8001996 <__aeabi_dadd+0x35e>
 8001994:	e175      	b.n	8001c82 <__aeabi_dadd+0x64a>
 8001996:	0029      	movs	r1, r5
 8001998:	4339      	orrs	r1, r7
 800199a:	d000      	beq.n	800199e <__aeabi_dadd+0x366>
 800199c:	e17e      	b.n	8001c9c <__aeabi_dadd+0x664>
 800199e:	4649      	mov	r1, r9
 80019a0:	0758      	lsls	r0, r3, #29
 80019a2:	08c9      	lsrs	r1, r1, #3
 80019a4:	4301      	orrs	r1, r0
 80019a6:	08db      	lsrs	r3, r3, #3
 80019a8:	e76e      	b.n	8001888 <__aeabi_dadd+0x250>
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	000007ff 	.word	0x000007ff
 80019b0:	ff7fffff 	.word	0xff7fffff
 80019b4:	000007fe 	.word	0x000007fe
 80019b8:	4649      	mov	r1, r9
 80019ba:	1bcd      	subs	r5, r1, r7
 80019bc:	4661      	mov	r1, ip
 80019be:	1a58      	subs	r0, r3, r1
 80019c0:	45a9      	cmp	r9, r5
 80019c2:	4189      	sbcs	r1, r1
 80019c4:	4249      	negs	r1, r1
 80019c6:	4688      	mov	r8, r1
 80019c8:	0001      	movs	r1, r0
 80019ca:	4640      	mov	r0, r8
 80019cc:	1a09      	subs	r1, r1, r0
 80019ce:	4688      	mov	r8, r1
 80019d0:	0209      	lsls	r1, r1, #8
 80019d2:	d500      	bpl.n	80019d6 <__aeabi_dadd+0x39e>
 80019d4:	e0a6      	b.n	8001b24 <__aeabi_dadd+0x4ec>
 80019d6:	4641      	mov	r1, r8
 80019d8:	4329      	orrs	r1, r5
 80019da:	d000      	beq.n	80019de <__aeabi_dadd+0x3a6>
 80019dc:	e67f      	b.n	80016de <__aeabi_dadd+0xa6>
 80019de:	2300      	movs	r3, #0
 80019e0:	2400      	movs	r4, #0
 80019e2:	e751      	b.n	8001888 <__aeabi_dadd+0x250>
 80019e4:	4cc7      	ldr	r4, [pc, #796]	; (8001d04 <__aeabi_dadd+0x6cc>)
 80019e6:	42a1      	cmp	r1, r4
 80019e8:	d100      	bne.n	80019ec <__aeabi_dadd+0x3b4>
 80019ea:	e0c7      	b.n	8001b7c <__aeabi_dadd+0x544>
 80019ec:	2480      	movs	r4, #128	; 0x80
 80019ee:	0424      	lsls	r4, r4, #16
 80019f0:	4323      	orrs	r3, r4
 80019f2:	2a38      	cmp	r2, #56	; 0x38
 80019f4:	dc54      	bgt.n	8001aa0 <__aeabi_dadd+0x468>
 80019f6:	2a1f      	cmp	r2, #31
 80019f8:	dd00      	ble.n	80019fc <__aeabi_dadd+0x3c4>
 80019fa:	e0cc      	b.n	8001b96 <__aeabi_dadd+0x55e>
 80019fc:	2420      	movs	r4, #32
 80019fe:	4648      	mov	r0, r9
 8001a00:	1aa4      	subs	r4, r4, r2
 8001a02:	001d      	movs	r5, r3
 8001a04:	464e      	mov	r6, r9
 8001a06:	40a0      	lsls	r0, r4
 8001a08:	40d6      	lsrs	r6, r2
 8001a0a:	40a5      	lsls	r5, r4
 8001a0c:	0004      	movs	r4, r0
 8001a0e:	40d3      	lsrs	r3, r2
 8001a10:	4662      	mov	r2, ip
 8001a12:	4335      	orrs	r5, r6
 8001a14:	1e66      	subs	r6, r4, #1
 8001a16:	41b4      	sbcs	r4, r6
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	469c      	mov	ip, r3
 8001a1c:	4325      	orrs	r5, r4
 8001a1e:	e044      	b.n	8001aaa <__aeabi_dadd+0x472>
 8001a20:	4662      	mov	r2, ip
 8001a22:	433a      	orrs	r2, r7
 8001a24:	0015      	movs	r5, r2
 8001a26:	1e6f      	subs	r7, r5, #1
 8001a28:	41bd      	sbcs	r5, r7
 8001a2a:	444d      	add	r5, r9
 8001a2c:	454d      	cmp	r5, r9
 8001a2e:	4189      	sbcs	r1, r1
 8001a30:	4249      	negs	r1, r1
 8001a32:	4688      	mov	r8, r1
 8001a34:	4498      	add	r8, r3
 8001a36:	4643      	mov	r3, r8
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	d400      	bmi.n	8001a3e <__aeabi_dadd+0x406>
 8001a3c:	e718      	b.n	8001870 <__aeabi_dadd+0x238>
 8001a3e:	4bb1      	ldr	r3, [pc, #708]	; (8001d04 <__aeabi_dadd+0x6cc>)
 8001a40:	3601      	adds	r6, #1
 8001a42:	429e      	cmp	r6, r3
 8001a44:	d049      	beq.n	8001ada <__aeabi_dadd+0x4a2>
 8001a46:	4642      	mov	r2, r8
 8001a48:	4baf      	ldr	r3, [pc, #700]	; (8001d08 <__aeabi_dadd+0x6d0>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	0013      	movs	r3, r2
 8001a50:	086a      	lsrs	r2, r5, #1
 8001a52:	400d      	ands	r5, r1
 8001a54:	4315      	orrs	r5, r2
 8001a56:	07d9      	lsls	r1, r3, #31
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	4698      	mov	r8, r3
 8001a5c:	430d      	orrs	r5, r1
 8001a5e:	e665      	b.n	800172c <__aeabi_dadd+0xf4>
 8001a60:	0018      	movs	r0, r3
 8001a62:	3e1f      	subs	r6, #31
 8001a64:	40f0      	lsrs	r0, r6
 8001a66:	2a20      	cmp	r2, #32
 8001a68:	d003      	beq.n	8001a72 <__aeabi_dadd+0x43a>
 8001a6a:	2140      	movs	r1, #64	; 0x40
 8001a6c:	1a8a      	subs	r2, r1, r2
 8001a6e:	4093      	lsls	r3, r2
 8001a70:	431d      	orrs	r5, r3
 8001a72:	1e69      	subs	r1, r5, #1
 8001a74:	418d      	sbcs	r5, r1
 8001a76:	2300      	movs	r3, #0
 8001a78:	2600      	movs	r6, #0
 8001a7a:	4698      	mov	r8, r3
 8001a7c:	4305      	orrs	r5, r0
 8001a7e:	e6f7      	b.n	8001870 <__aeabi_dadd+0x238>
 8001a80:	0011      	movs	r1, r2
 8001a82:	4665      	mov	r5, ip
 8001a84:	3920      	subs	r1, #32
 8001a86:	40cd      	lsrs	r5, r1
 8001a88:	2a20      	cmp	r2, #32
 8001a8a:	d004      	beq.n	8001a96 <__aeabi_dadd+0x45e>
 8001a8c:	2040      	movs	r0, #64	; 0x40
 8001a8e:	4661      	mov	r1, ip
 8001a90:	1a82      	subs	r2, r0, r2
 8001a92:	4091      	lsls	r1, r2
 8001a94:	430f      	orrs	r7, r1
 8001a96:	0039      	movs	r1, r7
 8001a98:	1e4f      	subs	r7, r1, #1
 8001a9a:	41b9      	sbcs	r1, r7
 8001a9c:	4329      	orrs	r1, r5
 8001a9e:	e60f      	b.n	80016c0 <__aeabi_dadd+0x88>
 8001aa0:	464a      	mov	r2, r9
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	001d      	movs	r5, r3
 8001aa6:	1e6b      	subs	r3, r5, #1
 8001aa8:	419d      	sbcs	r5, r3
 8001aaa:	1b7d      	subs	r5, r7, r5
 8001aac:	42af      	cmp	r7, r5
 8001aae:	419b      	sbcs	r3, r3
 8001ab0:	4662      	mov	r2, ip
 8001ab2:	425b      	negs	r3, r3
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	4698      	mov	r8, r3
 8001ab8:	4654      	mov	r4, sl
 8001aba:	000e      	movs	r6, r1
 8001abc:	e607      	b.n	80016ce <__aeabi_dadd+0x96>
 8001abe:	4648      	mov	r0, r9
 8001ac0:	4318      	orrs	r0, r3
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dadd+0x48e>
 8001ac4:	e0b3      	b.n	8001c2e <__aeabi_dadd+0x5f6>
 8001ac6:	1e50      	subs	r0, r2, #1
 8001ac8:	2a01      	cmp	r2, #1
 8001aca:	d100      	bne.n	8001ace <__aeabi_dadd+0x496>
 8001acc:	e10d      	b.n	8001cea <__aeabi_dadd+0x6b2>
 8001ace:	4d8d      	ldr	r5, [pc, #564]	; (8001d04 <__aeabi_dadd+0x6cc>)
 8001ad0:	42aa      	cmp	r2, r5
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dadd+0x49e>
 8001ad4:	e0a5      	b.n	8001c22 <__aeabi_dadd+0x5ea>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	e710      	b.n	80018fc <__aeabi_dadd+0x2c4>
 8001ada:	0032      	movs	r2, r6
 8001adc:	2300      	movs	r3, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	e644      	b.n	800176c <__aeabi_dadd+0x134>
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	0038      	movs	r0, r7
 8001ae6:	1a89      	subs	r1, r1, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	408f      	lsls	r7, r1
 8001aec:	408d      	lsls	r5, r1
 8001aee:	40d0      	lsrs	r0, r2
 8001af0:	1e79      	subs	r1, r7, #1
 8001af2:	418f      	sbcs	r7, r1
 8001af4:	4305      	orrs	r5, r0
 8001af6:	433d      	orrs	r5, r7
 8001af8:	4667      	mov	r7, ip
 8001afa:	40d7      	lsrs	r7, r2
 8001afc:	19db      	adds	r3, r3, r7
 8001afe:	e794      	b.n	8001a2a <__aeabi_dadd+0x3f2>
 8001b00:	4a80      	ldr	r2, [pc, #512]	; (8001d04 <__aeabi_dadd+0x6cc>)
 8001b02:	4290      	cmp	r0, r2
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dadd+0x4d0>
 8001b06:	e0ec      	b.n	8001ce2 <__aeabi_dadd+0x6aa>
 8001b08:	0039      	movs	r1, r7
 8001b0a:	4449      	add	r1, r9
 8001b0c:	4549      	cmp	r1, r9
 8001b0e:	4192      	sbcs	r2, r2
 8001b10:	4463      	add	r3, ip
 8001b12:	4252      	negs	r2, r2
 8001b14:	189b      	adds	r3, r3, r2
 8001b16:	07dd      	lsls	r5, r3, #31
 8001b18:	0849      	lsrs	r1, r1, #1
 8001b1a:	085b      	lsrs	r3, r3, #1
 8001b1c:	4698      	mov	r8, r3
 8001b1e:	0006      	movs	r6, r0
 8001b20:	430d      	orrs	r5, r1
 8001b22:	e6a5      	b.n	8001870 <__aeabi_dadd+0x238>
 8001b24:	464a      	mov	r2, r9
 8001b26:	1abd      	subs	r5, r7, r2
 8001b28:	42af      	cmp	r7, r5
 8001b2a:	4189      	sbcs	r1, r1
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	4249      	negs	r1, r1
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	1a5b      	subs	r3, r3, r1
 8001b34:	4698      	mov	r8, r3
 8001b36:	4654      	mov	r4, sl
 8001b38:	e5d1      	b.n	80016de <__aeabi_dadd+0xa6>
 8001b3a:	076c      	lsls	r4, r5, #29
 8001b3c:	08f9      	lsrs	r1, r7, #3
 8001b3e:	4321      	orrs	r1, r4
 8001b40:	08eb      	lsrs	r3, r5, #3
 8001b42:	0004      	movs	r4, r0
 8001b44:	e69d      	b.n	8001882 <__aeabi_dadd+0x24a>
 8001b46:	464a      	mov	r2, r9
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	d175      	bne.n	8001c38 <__aeabi_dadd+0x600>
 8001b4c:	4661      	mov	r1, ip
 8001b4e:	4339      	orrs	r1, r7
 8001b50:	d114      	bne.n	8001b7c <__aeabi_dadd+0x544>
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	2400      	movs	r4, #0
 8001b56:	031b      	lsls	r3, r3, #12
 8001b58:	e6bc      	b.n	80018d4 <__aeabi_dadd+0x29c>
 8001b5a:	464a      	mov	r2, r9
 8001b5c:	1bd5      	subs	r5, r2, r7
 8001b5e:	45a9      	cmp	r9, r5
 8001b60:	4189      	sbcs	r1, r1
 8001b62:	4662      	mov	r2, ip
 8001b64:	4249      	negs	r1, r1
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	1a5b      	subs	r3, r3, r1
 8001b6a:	4698      	mov	r8, r3
 8001b6c:	2601      	movs	r6, #1
 8001b6e:	e5ae      	b.n	80016ce <__aeabi_dadd+0x96>
 8001b70:	464a      	mov	r2, r9
 8001b72:	08d1      	lsrs	r1, r2, #3
 8001b74:	075a      	lsls	r2, r3, #29
 8001b76:	4311      	orrs	r1, r2
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	e6a7      	b.n	80018cc <__aeabi_dadd+0x294>
 8001b7c:	4663      	mov	r3, ip
 8001b7e:	08f9      	lsrs	r1, r7, #3
 8001b80:	075a      	lsls	r2, r3, #29
 8001b82:	4654      	mov	r4, sl
 8001b84:	4311      	orrs	r1, r2
 8001b86:	08db      	lsrs	r3, r3, #3
 8001b88:	e6a0      	b.n	80018cc <__aeabi_dadd+0x294>
 8001b8a:	464a      	mov	r2, r9
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	001d      	movs	r5, r3
 8001b90:	1e6b      	subs	r3, r5, #1
 8001b92:	419d      	sbcs	r5, r3
 8001b94:	e6c7      	b.n	8001926 <__aeabi_dadd+0x2ee>
 8001b96:	0014      	movs	r4, r2
 8001b98:	001e      	movs	r6, r3
 8001b9a:	3c20      	subs	r4, #32
 8001b9c:	40e6      	lsrs	r6, r4
 8001b9e:	2a20      	cmp	r2, #32
 8001ba0:	d005      	beq.n	8001bae <__aeabi_dadd+0x576>
 8001ba2:	2440      	movs	r4, #64	; 0x40
 8001ba4:	1aa2      	subs	r2, r4, r2
 8001ba6:	4093      	lsls	r3, r2
 8001ba8:	464a      	mov	r2, r9
 8001baa:	431a      	orrs	r2, r3
 8001bac:	4691      	mov	r9, r2
 8001bae:	464d      	mov	r5, r9
 8001bb0:	1e6b      	subs	r3, r5, #1
 8001bb2:	419d      	sbcs	r5, r3
 8001bb4:	4335      	orrs	r5, r6
 8001bb6:	e778      	b.n	8001aaa <__aeabi_dadd+0x472>
 8001bb8:	464a      	mov	r2, r9
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_dadd+0x588>
 8001bbe:	e66b      	b.n	8001898 <__aeabi_dadd+0x260>
 8001bc0:	076b      	lsls	r3, r5, #29
 8001bc2:	08f9      	lsrs	r1, r7, #3
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	08eb      	lsrs	r3, r5, #3
 8001bc8:	e680      	b.n	80018cc <__aeabi_dadd+0x294>
 8001bca:	4661      	mov	r1, ip
 8001bcc:	4339      	orrs	r1, r7
 8001bce:	d054      	beq.n	8001c7a <__aeabi_dadd+0x642>
 8001bd0:	4663      	mov	r3, ip
 8001bd2:	08f9      	lsrs	r1, r7, #3
 8001bd4:	075c      	lsls	r4, r3, #29
 8001bd6:	4321      	orrs	r1, r4
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	0004      	movs	r4, r0
 8001bdc:	e654      	b.n	8001888 <__aeabi_dadd+0x250>
 8001bde:	464a      	mov	r2, r9
 8001be0:	1abd      	subs	r5, r7, r2
 8001be2:	42af      	cmp	r7, r5
 8001be4:	4189      	sbcs	r1, r1
 8001be6:	4662      	mov	r2, ip
 8001be8:	4249      	negs	r1, r1
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	1a5b      	subs	r3, r3, r1
 8001bee:	4698      	mov	r8, r3
 8001bf0:	0004      	movs	r4, r0
 8001bf2:	2601      	movs	r6, #1
 8001bf4:	e56b      	b.n	80016ce <__aeabi_dadd+0x96>
 8001bf6:	464a      	mov	r2, r9
 8001bf8:	1bd5      	subs	r5, r2, r7
 8001bfa:	45a9      	cmp	r9, r5
 8001bfc:	4189      	sbcs	r1, r1
 8001bfe:	4662      	mov	r2, ip
 8001c00:	4249      	negs	r1, r1
 8001c02:	1a9a      	subs	r2, r3, r2
 8001c04:	1a52      	subs	r2, r2, r1
 8001c06:	4690      	mov	r8, r2
 8001c08:	0212      	lsls	r2, r2, #8
 8001c0a:	d532      	bpl.n	8001c72 <__aeabi_dadd+0x63a>
 8001c0c:	464a      	mov	r2, r9
 8001c0e:	1abd      	subs	r5, r7, r2
 8001c10:	42af      	cmp	r7, r5
 8001c12:	4189      	sbcs	r1, r1
 8001c14:	4662      	mov	r2, ip
 8001c16:	4249      	negs	r1, r1
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	1a5b      	subs	r3, r3, r1
 8001c1c:	4698      	mov	r8, r3
 8001c1e:	0004      	movs	r4, r0
 8001c20:	e584      	b.n	800172c <__aeabi_dadd+0xf4>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08f9      	lsrs	r1, r7, #3
 8001c26:	075a      	lsls	r2, r3, #29
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	08db      	lsrs	r3, r3, #3
 8001c2c:	e64e      	b.n	80018cc <__aeabi_dadd+0x294>
 8001c2e:	08f9      	lsrs	r1, r7, #3
 8001c30:	0768      	lsls	r0, r5, #29
 8001c32:	4301      	orrs	r1, r0
 8001c34:	08eb      	lsrs	r3, r5, #3
 8001c36:	e624      	b.n	8001882 <__aeabi_dadd+0x24a>
 8001c38:	4662      	mov	r2, ip
 8001c3a:	433a      	orrs	r2, r7
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dadd+0x608>
 8001c3e:	e698      	b.n	8001972 <__aeabi_dadd+0x33a>
 8001c40:	464a      	mov	r2, r9
 8001c42:	08d1      	lsrs	r1, r2, #3
 8001c44:	075a      	lsls	r2, r3, #29
 8001c46:	4311      	orrs	r1, r2
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	031b      	lsls	r3, r3, #12
 8001c4e:	421a      	tst	r2, r3
 8001c50:	d008      	beq.n	8001c64 <__aeabi_dadd+0x62c>
 8001c52:	4660      	mov	r0, ip
 8001c54:	08c5      	lsrs	r5, r0, #3
 8001c56:	421d      	tst	r5, r3
 8001c58:	d104      	bne.n	8001c64 <__aeabi_dadd+0x62c>
 8001c5a:	4654      	mov	r4, sl
 8001c5c:	002a      	movs	r2, r5
 8001c5e:	08f9      	lsrs	r1, r7, #3
 8001c60:	0743      	lsls	r3, r0, #29
 8001c62:	4319      	orrs	r1, r3
 8001c64:	0f4b      	lsrs	r3, r1, #29
 8001c66:	00c9      	lsls	r1, r1, #3
 8001c68:	075b      	lsls	r3, r3, #29
 8001c6a:	08c9      	lsrs	r1, r1, #3
 8001c6c:	4319      	orrs	r1, r3
 8001c6e:	0013      	movs	r3, r2
 8001c70:	e62c      	b.n	80018cc <__aeabi_dadd+0x294>
 8001c72:	4641      	mov	r1, r8
 8001c74:	4329      	orrs	r1, r5
 8001c76:	d000      	beq.n	8001c7a <__aeabi_dadd+0x642>
 8001c78:	e5fa      	b.n	8001870 <__aeabi_dadd+0x238>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	000a      	movs	r2, r1
 8001c7e:	2400      	movs	r4, #0
 8001c80:	e602      	b.n	8001888 <__aeabi_dadd+0x250>
 8001c82:	076b      	lsls	r3, r5, #29
 8001c84:	08f9      	lsrs	r1, r7, #3
 8001c86:	4319      	orrs	r1, r3
 8001c88:	08eb      	lsrs	r3, r5, #3
 8001c8a:	e5fd      	b.n	8001888 <__aeabi_dadd+0x250>
 8001c8c:	4663      	mov	r3, ip
 8001c8e:	08f9      	lsrs	r1, r7, #3
 8001c90:	075b      	lsls	r3, r3, #29
 8001c92:	4319      	orrs	r1, r3
 8001c94:	4663      	mov	r3, ip
 8001c96:	0004      	movs	r4, r0
 8001c98:	08db      	lsrs	r3, r3, #3
 8001c9a:	e617      	b.n	80018cc <__aeabi_dadd+0x294>
 8001c9c:	003d      	movs	r5, r7
 8001c9e:	444d      	add	r5, r9
 8001ca0:	4463      	add	r3, ip
 8001ca2:	454d      	cmp	r5, r9
 8001ca4:	4189      	sbcs	r1, r1
 8001ca6:	4698      	mov	r8, r3
 8001ca8:	4249      	negs	r1, r1
 8001caa:	4488      	add	r8, r1
 8001cac:	4643      	mov	r3, r8
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	d400      	bmi.n	8001cb4 <__aeabi_dadd+0x67c>
 8001cb2:	e5dd      	b.n	8001870 <__aeabi_dadd+0x238>
 8001cb4:	4642      	mov	r2, r8
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <__aeabi_dadd+0x6d0>)
 8001cb8:	2601      	movs	r6, #1
 8001cba:	401a      	ands	r2, r3
 8001cbc:	4690      	mov	r8, r2
 8001cbe:	e5d7      	b.n	8001870 <__aeabi_dadd+0x238>
 8001cc0:	0010      	movs	r0, r2
 8001cc2:	001e      	movs	r6, r3
 8001cc4:	3820      	subs	r0, #32
 8001cc6:	40c6      	lsrs	r6, r0
 8001cc8:	2a20      	cmp	r2, #32
 8001cca:	d005      	beq.n	8001cd8 <__aeabi_dadd+0x6a0>
 8001ccc:	2040      	movs	r0, #64	; 0x40
 8001cce:	1a82      	subs	r2, r0, r2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	464a      	mov	r2, r9
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	4691      	mov	r9, r2
 8001cd8:	464d      	mov	r5, r9
 8001cda:	1e6b      	subs	r3, r5, #1
 8001cdc:	419d      	sbcs	r5, r3
 8001cde:	4335      	orrs	r5, r6
 8001ce0:	e621      	b.n	8001926 <__aeabi_dadd+0x2ee>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	e540      	b.n	800176c <__aeabi_dadd+0x134>
 8001cea:	464a      	mov	r2, r9
 8001cec:	19d5      	adds	r5, r2, r7
 8001cee:	42bd      	cmp	r5, r7
 8001cf0:	4189      	sbcs	r1, r1
 8001cf2:	4463      	add	r3, ip
 8001cf4:	4698      	mov	r8, r3
 8001cf6:	4249      	negs	r1, r1
 8001cf8:	4488      	add	r8, r1
 8001cfa:	e5b3      	b.n	8001864 <__aeabi_dadd+0x22c>
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4a01      	ldr	r2, [pc, #4]	; (8001d04 <__aeabi_dadd+0x6cc>)
 8001d00:	000b      	movs	r3, r1
 8001d02:	e533      	b.n	800176c <__aeabi_dadd+0x134>
 8001d04:	000007ff 	.word	0x000007ff
 8001d08:	ff7fffff 	.word	0xff7fffff

08001d0c <__aeabi_ddiv>:
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0e:	4657      	mov	r7, sl
 8001d10:	464e      	mov	r6, r9
 8001d12:	4645      	mov	r5, r8
 8001d14:	46de      	mov	lr, fp
 8001d16:	b5e0      	push	{r5, r6, r7, lr}
 8001d18:	4681      	mov	r9, r0
 8001d1a:	0005      	movs	r5, r0
 8001d1c:	030c      	lsls	r4, r1, #12
 8001d1e:	0048      	lsls	r0, r1, #1
 8001d20:	4692      	mov	sl, r2
 8001d22:	001f      	movs	r7, r3
 8001d24:	b085      	sub	sp, #20
 8001d26:	0b24      	lsrs	r4, r4, #12
 8001d28:	0d40      	lsrs	r0, r0, #21
 8001d2a:	0fce      	lsrs	r6, r1, #31
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d059      	beq.n	8001de4 <__aeabi_ddiv+0xd8>
 8001d30:	4b87      	ldr	r3, [pc, #540]	; (8001f50 <__aeabi_ddiv+0x244>)
 8001d32:	4298      	cmp	r0, r3
 8001d34:	d100      	bne.n	8001d38 <__aeabi_ddiv+0x2c>
 8001d36:	e098      	b.n	8001e6a <__aeabi_ddiv+0x15e>
 8001d38:	0f6b      	lsrs	r3, r5, #29
 8001d3a:	00e4      	lsls	r4, r4, #3
 8001d3c:	431c      	orrs	r4, r3
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	4323      	orrs	r3, r4
 8001d44:	4698      	mov	r8, r3
 8001d46:	4b83      	ldr	r3, [pc, #524]	; (8001f54 <__aeabi_ddiv+0x248>)
 8001d48:	00ed      	lsls	r5, r5, #3
 8001d4a:	469b      	mov	fp, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	4699      	mov	r9, r3
 8001d50:	4483      	add	fp, r0
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	033c      	lsls	r4, r7, #12
 8001d56:	007b      	lsls	r3, r7, #1
 8001d58:	4650      	mov	r0, sl
 8001d5a:	0b24      	lsrs	r4, r4, #12
 8001d5c:	0d5b      	lsrs	r3, r3, #21
 8001d5e:	0fff      	lsrs	r7, r7, #31
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d067      	beq.n	8001e34 <__aeabi_ddiv+0x128>
 8001d64:	4a7a      	ldr	r2, [pc, #488]	; (8001f50 <__aeabi_ddiv+0x244>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d018      	beq.n	8001d9c <__aeabi_ddiv+0x90>
 8001d6a:	497a      	ldr	r1, [pc, #488]	; (8001f54 <__aeabi_ddiv+0x248>)
 8001d6c:	0f42      	lsrs	r2, r0, #29
 8001d6e:	468c      	mov	ip, r1
 8001d70:	00e4      	lsls	r4, r4, #3
 8001d72:	4659      	mov	r1, fp
 8001d74:	4314      	orrs	r4, r2
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	4463      	add	r3, ip
 8001d7a:	0412      	lsls	r2, r2, #16
 8001d7c:	1acb      	subs	r3, r1, r3
 8001d7e:	4314      	orrs	r4, r2
 8001d80:	469b      	mov	fp, r3
 8001d82:	00c2      	lsls	r2, r0, #3
 8001d84:	2000      	movs	r0, #0
 8001d86:	0033      	movs	r3, r6
 8001d88:	407b      	eors	r3, r7
 8001d8a:	469a      	mov	sl, r3
 8001d8c:	464b      	mov	r3, r9
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d900      	bls.n	8001d94 <__aeabi_ddiv+0x88>
 8001d92:	e0ef      	b.n	8001f74 <__aeabi_ddiv+0x268>
 8001d94:	4970      	ldr	r1, [pc, #448]	; (8001f58 <__aeabi_ddiv+0x24c>)
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	58cb      	ldr	r3, [r1, r3]
 8001d9a:	469f      	mov	pc, r3
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <__aeabi_ddiv+0x250>)
 8001d9e:	4652      	mov	r2, sl
 8001da0:	469c      	mov	ip, r3
 8001da2:	4322      	orrs	r2, r4
 8001da4:	44e3      	add	fp, ip
 8001da6:	2a00      	cmp	r2, #0
 8001da8:	d000      	beq.n	8001dac <__aeabi_ddiv+0xa0>
 8001daa:	e095      	b.n	8001ed8 <__aeabi_ddiv+0x1cc>
 8001dac:	4649      	mov	r1, r9
 8001dae:	2302      	movs	r3, #2
 8001db0:	4319      	orrs	r1, r3
 8001db2:	4689      	mov	r9, r1
 8001db4:	2400      	movs	r4, #0
 8001db6:	2002      	movs	r0, #2
 8001db8:	e7e5      	b.n	8001d86 <__aeabi_ddiv+0x7a>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2400      	movs	r4, #0
 8001dbe:	2500      	movs	r5, #0
 8001dc0:	4652      	mov	r2, sl
 8001dc2:	051b      	lsls	r3, r3, #20
 8001dc4:	4323      	orrs	r3, r4
 8001dc6:	07d2      	lsls	r2, r2, #31
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	0028      	movs	r0, r5
 8001dcc:	0019      	movs	r1, r3
 8001dce:	b005      	add	sp, #20
 8001dd0:	bcf0      	pop	{r4, r5, r6, r7}
 8001dd2:	46bb      	mov	fp, r7
 8001dd4:	46b2      	mov	sl, r6
 8001dd6:	46a9      	mov	r9, r5
 8001dd8:	46a0      	mov	r8, r4
 8001dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ddc:	2400      	movs	r4, #0
 8001dde:	2500      	movs	r5, #0
 8001de0:	4b5b      	ldr	r3, [pc, #364]	; (8001f50 <__aeabi_ddiv+0x244>)
 8001de2:	e7ed      	b.n	8001dc0 <__aeabi_ddiv+0xb4>
 8001de4:	464b      	mov	r3, r9
 8001de6:	4323      	orrs	r3, r4
 8001de8:	4698      	mov	r8, r3
 8001dea:	d100      	bne.n	8001dee <__aeabi_ddiv+0xe2>
 8001dec:	e089      	b.n	8001f02 <__aeabi_ddiv+0x1f6>
 8001dee:	2c00      	cmp	r4, #0
 8001df0:	d100      	bne.n	8001df4 <__aeabi_ddiv+0xe8>
 8001df2:	e1e0      	b.n	80021b6 <__aeabi_ddiv+0x4aa>
 8001df4:	0020      	movs	r0, r4
 8001df6:	f001 fb07 	bl	8003408 <__clzsi2>
 8001dfa:	0001      	movs	r1, r0
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	390b      	subs	r1, #11
 8001e00:	231d      	movs	r3, #29
 8001e02:	1a5b      	subs	r3, r3, r1
 8001e04:	4649      	mov	r1, r9
 8001e06:	0010      	movs	r0, r2
 8001e08:	40d9      	lsrs	r1, r3
 8001e0a:	3808      	subs	r0, #8
 8001e0c:	4084      	lsls	r4, r0
 8001e0e:	000b      	movs	r3, r1
 8001e10:	464d      	mov	r5, r9
 8001e12:	4323      	orrs	r3, r4
 8001e14:	4698      	mov	r8, r3
 8001e16:	4085      	lsls	r5, r0
 8001e18:	4851      	ldr	r0, [pc, #324]	; (8001f60 <__aeabi_ddiv+0x254>)
 8001e1a:	033c      	lsls	r4, r7, #12
 8001e1c:	1a83      	subs	r3, r0, r2
 8001e1e:	469b      	mov	fp, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	4699      	mov	r9, r3
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	007b      	lsls	r3, r7, #1
 8001e28:	4650      	mov	r0, sl
 8001e2a:	0b24      	lsrs	r4, r4, #12
 8001e2c:	0d5b      	lsrs	r3, r3, #21
 8001e2e:	0fff      	lsrs	r7, r7, #31
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d197      	bne.n	8001d64 <__aeabi_ddiv+0x58>
 8001e34:	4652      	mov	r2, sl
 8001e36:	4322      	orrs	r2, r4
 8001e38:	d055      	beq.n	8001ee6 <__aeabi_ddiv+0x1da>
 8001e3a:	2c00      	cmp	r4, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_ddiv+0x134>
 8001e3e:	e1ca      	b.n	80021d6 <__aeabi_ddiv+0x4ca>
 8001e40:	0020      	movs	r0, r4
 8001e42:	f001 fae1 	bl	8003408 <__clzsi2>
 8001e46:	0002      	movs	r2, r0
 8001e48:	3a0b      	subs	r2, #11
 8001e4a:	231d      	movs	r3, #29
 8001e4c:	0001      	movs	r1, r0
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	4652      	mov	r2, sl
 8001e52:	3908      	subs	r1, #8
 8001e54:	40da      	lsrs	r2, r3
 8001e56:	408c      	lsls	r4, r1
 8001e58:	4314      	orrs	r4, r2
 8001e5a:	4652      	mov	r2, sl
 8001e5c:	408a      	lsls	r2, r1
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <__aeabi_ddiv+0x258>)
 8001e60:	4458      	add	r0, fp
 8001e62:	469b      	mov	fp, r3
 8001e64:	4483      	add	fp, r0
 8001e66:	2000      	movs	r0, #0
 8001e68:	e78d      	b.n	8001d86 <__aeabi_ddiv+0x7a>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	4323      	orrs	r3, r4
 8001e6e:	4698      	mov	r8, r3
 8001e70:	d140      	bne.n	8001ef4 <__aeabi_ddiv+0x1e8>
 8001e72:	2308      	movs	r3, #8
 8001e74:	4699      	mov	r9, r3
 8001e76:	3b06      	subs	r3, #6
 8001e78:	2500      	movs	r5, #0
 8001e7a:	4683      	mov	fp, r0
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	e769      	b.n	8001d54 <__aeabi_ddiv+0x48>
 8001e80:	46b2      	mov	sl, r6
 8001e82:	9b00      	ldr	r3, [sp, #0]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d0a9      	beq.n	8001ddc <__aeabi_ddiv+0xd0>
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_ddiv+0x182>
 8001e8c:	e211      	b.n	80022b2 <__aeabi_ddiv+0x5a6>
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d093      	beq.n	8001dba <__aeabi_ddiv+0xae>
 8001e92:	4a35      	ldr	r2, [pc, #212]	; (8001f68 <__aeabi_ddiv+0x25c>)
 8001e94:	445a      	add	r2, fp
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	dc00      	bgt.n	8001e9c <__aeabi_ddiv+0x190>
 8001e9a:	e13c      	b.n	8002116 <__aeabi_ddiv+0x40a>
 8001e9c:	076b      	lsls	r3, r5, #29
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_ddiv+0x196>
 8001ea0:	e1a7      	b.n	80021f2 <__aeabi_ddiv+0x4e6>
 8001ea2:	08ed      	lsrs	r5, r5, #3
 8001ea4:	4643      	mov	r3, r8
 8001ea6:	01db      	lsls	r3, r3, #7
 8001ea8:	d506      	bpl.n	8001eb8 <__aeabi_ddiv+0x1ac>
 8001eaa:	4642      	mov	r2, r8
 8001eac:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <__aeabi_ddiv+0x260>)
 8001eae:	401a      	ands	r2, r3
 8001eb0:	4690      	mov	r8, r2
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	00d2      	lsls	r2, r2, #3
 8001eb6:	445a      	add	r2, fp
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <__aeabi_ddiv+0x264>)
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	dc8e      	bgt.n	8001ddc <__aeabi_ddiv+0xd0>
 8001ebe:	4643      	mov	r3, r8
 8001ec0:	0552      	lsls	r2, r2, #21
 8001ec2:	0758      	lsls	r0, r3, #29
 8001ec4:	025c      	lsls	r4, r3, #9
 8001ec6:	4305      	orrs	r5, r0
 8001ec8:	0b24      	lsrs	r4, r4, #12
 8001eca:	0d53      	lsrs	r3, r2, #21
 8001ecc:	e778      	b.n	8001dc0 <__aeabi_ddiv+0xb4>
 8001ece:	46ba      	mov	sl, r7
 8001ed0:	46a0      	mov	r8, r4
 8001ed2:	0015      	movs	r5, r2
 8001ed4:	9000      	str	r0, [sp, #0]
 8001ed6:	e7d4      	b.n	8001e82 <__aeabi_ddiv+0x176>
 8001ed8:	464a      	mov	r2, r9
 8001eda:	2303      	movs	r3, #3
 8001edc:	431a      	orrs	r2, r3
 8001ede:	4691      	mov	r9, r2
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	4652      	mov	r2, sl
 8001ee4:	e74f      	b.n	8001d86 <__aeabi_ddiv+0x7a>
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	2301      	movs	r3, #1
 8001eea:	4319      	orrs	r1, r3
 8001eec:	4689      	mov	r9, r1
 8001eee:	2400      	movs	r4, #0
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	e748      	b.n	8001d86 <__aeabi_ddiv+0x7a>
 8001ef4:	230c      	movs	r3, #12
 8001ef6:	4699      	mov	r9, r3
 8001ef8:	3b09      	subs	r3, #9
 8001efa:	46a0      	mov	r8, r4
 8001efc:	4683      	mov	fp, r0
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	e728      	b.n	8001d54 <__aeabi_ddiv+0x48>
 8001f02:	2304      	movs	r3, #4
 8001f04:	4699      	mov	r9, r3
 8001f06:	2300      	movs	r3, #0
 8001f08:	469b      	mov	fp, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	2500      	movs	r5, #0
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	e720      	b.n	8001d54 <__aeabi_ddiv+0x48>
 8001f12:	2300      	movs	r3, #0
 8001f14:	2480      	movs	r4, #128	; 0x80
 8001f16:	469a      	mov	sl, r3
 8001f18:	2500      	movs	r5, #0
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <__aeabi_ddiv+0x244>)
 8001f1c:	0324      	lsls	r4, r4, #12
 8001f1e:	e74f      	b.n	8001dc0 <__aeabi_ddiv+0xb4>
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	4641      	mov	r1, r8
 8001f24:	031b      	lsls	r3, r3, #12
 8001f26:	4219      	tst	r1, r3
 8001f28:	d008      	beq.n	8001f3c <__aeabi_ddiv+0x230>
 8001f2a:	421c      	tst	r4, r3
 8001f2c:	d106      	bne.n	8001f3c <__aeabi_ddiv+0x230>
 8001f2e:	431c      	orrs	r4, r3
 8001f30:	0324      	lsls	r4, r4, #12
 8001f32:	46ba      	mov	sl, r7
 8001f34:	0015      	movs	r5, r2
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <__aeabi_ddiv+0x244>)
 8001f38:	0b24      	lsrs	r4, r4, #12
 8001f3a:	e741      	b.n	8001dc0 <__aeabi_ddiv+0xb4>
 8001f3c:	2480      	movs	r4, #128	; 0x80
 8001f3e:	4643      	mov	r3, r8
 8001f40:	0324      	lsls	r4, r4, #12
 8001f42:	431c      	orrs	r4, r3
 8001f44:	0324      	lsls	r4, r4, #12
 8001f46:	46b2      	mov	sl, r6
 8001f48:	4b01      	ldr	r3, [pc, #4]	; (8001f50 <__aeabi_ddiv+0x244>)
 8001f4a:	0b24      	lsrs	r4, r4, #12
 8001f4c:	e738      	b.n	8001dc0 <__aeabi_ddiv+0xb4>
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	000007ff 	.word	0x000007ff
 8001f54:	fffffc01 	.word	0xfffffc01
 8001f58:	0801a5d0 	.word	0x0801a5d0
 8001f5c:	fffff801 	.word	0xfffff801
 8001f60:	fffffc0d 	.word	0xfffffc0d
 8001f64:	000003f3 	.word	0x000003f3
 8001f68:	000003ff 	.word	0x000003ff
 8001f6c:	feffffff 	.word	0xfeffffff
 8001f70:	000007fe 	.word	0x000007fe
 8001f74:	4544      	cmp	r4, r8
 8001f76:	d200      	bcs.n	8001f7a <__aeabi_ddiv+0x26e>
 8001f78:	e116      	b.n	80021a8 <__aeabi_ddiv+0x49c>
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_ddiv+0x272>
 8001f7c:	e111      	b.n	80021a2 <__aeabi_ddiv+0x496>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	425b      	negs	r3, r3
 8001f82:	469c      	mov	ip, r3
 8001f84:	002e      	movs	r6, r5
 8001f86:	4640      	mov	r0, r8
 8001f88:	2500      	movs	r5, #0
 8001f8a:	44e3      	add	fp, ip
 8001f8c:	0223      	lsls	r3, r4, #8
 8001f8e:	0e14      	lsrs	r4, r2, #24
 8001f90:	431c      	orrs	r4, r3
 8001f92:	0c1b      	lsrs	r3, r3, #16
 8001f94:	4699      	mov	r9, r3
 8001f96:	0423      	lsls	r3, r4, #16
 8001f98:	0c1f      	lsrs	r7, r3, #16
 8001f9a:	0212      	lsls	r2, r2, #8
 8001f9c:	4649      	mov	r1, r9
 8001f9e:	9200      	str	r2, [sp, #0]
 8001fa0:	9701      	str	r7, [sp, #4]
 8001fa2:	f7fe f95b 	bl	800025c <__aeabi_uidivmod>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	437a      	muls	r2, r7
 8001faa:	040b      	lsls	r3, r1, #16
 8001fac:	0c31      	lsrs	r1, r6, #16
 8001fae:	4680      	mov	r8, r0
 8001fb0:	4319      	orrs	r1, r3
 8001fb2:	428a      	cmp	r2, r1
 8001fb4:	d90b      	bls.n	8001fce <__aeabi_ddiv+0x2c2>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	425b      	negs	r3, r3
 8001fba:	469c      	mov	ip, r3
 8001fbc:	1909      	adds	r1, r1, r4
 8001fbe:	44e0      	add	r8, ip
 8001fc0:	428c      	cmp	r4, r1
 8001fc2:	d804      	bhi.n	8001fce <__aeabi_ddiv+0x2c2>
 8001fc4:	428a      	cmp	r2, r1
 8001fc6:	d902      	bls.n	8001fce <__aeabi_ddiv+0x2c2>
 8001fc8:	1e83      	subs	r3, r0, #2
 8001fca:	4698      	mov	r8, r3
 8001fcc:	1909      	adds	r1, r1, r4
 8001fce:	1a88      	subs	r0, r1, r2
 8001fd0:	4649      	mov	r1, r9
 8001fd2:	f7fe f943 	bl	800025c <__aeabi_uidivmod>
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	468c      	mov	ip, r1
 8001fda:	0431      	lsls	r1, r6, #16
 8001fdc:	4666      	mov	r6, ip
 8001fde:	9a01      	ldr	r2, [sp, #4]
 8001fe0:	0c09      	lsrs	r1, r1, #16
 8001fe2:	4342      	muls	r2, r0
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	4331      	orrs	r1, r6
 8001fe8:	428a      	cmp	r2, r1
 8001fea:	d904      	bls.n	8001ff6 <__aeabi_ddiv+0x2ea>
 8001fec:	1909      	adds	r1, r1, r4
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	428c      	cmp	r4, r1
 8001ff2:	d800      	bhi.n	8001ff6 <__aeabi_ddiv+0x2ea>
 8001ff4:	e111      	b.n	800221a <__aeabi_ddiv+0x50e>
 8001ff6:	1a89      	subs	r1, r1, r2
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	9e00      	ldr	r6, [sp, #0]
 8001ffc:	0412      	lsls	r2, r2, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	0c33      	lsrs	r3, r6, #16
 8002002:	001f      	movs	r7, r3
 8002004:	0c10      	lsrs	r0, r2, #16
 8002006:	4690      	mov	r8, r2
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	0413      	lsls	r3, r2, #16
 800200c:	0432      	lsls	r2, r6, #16
 800200e:	0c16      	lsrs	r6, r2, #16
 8002010:	0032      	movs	r2, r6
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	435a      	muls	r2, r3
 8002016:	9603      	str	r6, [sp, #12]
 8002018:	437b      	muls	r3, r7
 800201a:	4346      	muls	r6, r0
 800201c:	4378      	muls	r0, r7
 800201e:	0c17      	lsrs	r7, r2, #16
 8002020:	46bc      	mov	ip, r7
 8002022:	199b      	adds	r3, r3, r6
 8002024:	4463      	add	r3, ip
 8002026:	429e      	cmp	r6, r3
 8002028:	d903      	bls.n	8002032 <__aeabi_ddiv+0x326>
 800202a:	2680      	movs	r6, #128	; 0x80
 800202c:	0276      	lsls	r6, r6, #9
 800202e:	46b4      	mov	ip, r6
 8002030:	4460      	add	r0, ip
 8002032:	0c1e      	lsrs	r6, r3, #16
 8002034:	1830      	adds	r0, r6, r0
 8002036:	0416      	lsls	r6, r2, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c36      	lsrs	r6, r6, #16
 800203c:	199e      	adds	r6, r3, r6
 800203e:	4281      	cmp	r1, r0
 8002040:	d200      	bcs.n	8002044 <__aeabi_ddiv+0x338>
 8002042:	e09c      	b.n	800217e <__aeabi_ddiv+0x472>
 8002044:	d100      	bne.n	8002048 <__aeabi_ddiv+0x33c>
 8002046:	e097      	b.n	8002178 <__aeabi_ddiv+0x46c>
 8002048:	1bae      	subs	r6, r5, r6
 800204a:	1a09      	subs	r1, r1, r0
 800204c:	42b5      	cmp	r5, r6
 800204e:	4180      	sbcs	r0, r0
 8002050:	4240      	negs	r0, r0
 8002052:	1a08      	subs	r0, r1, r0
 8002054:	4284      	cmp	r4, r0
 8002056:	d100      	bne.n	800205a <__aeabi_ddiv+0x34e>
 8002058:	e111      	b.n	800227e <__aeabi_ddiv+0x572>
 800205a:	4649      	mov	r1, r9
 800205c:	f7fe f8fe 	bl	800025c <__aeabi_uidivmod>
 8002060:	9a01      	ldr	r2, [sp, #4]
 8002062:	040b      	lsls	r3, r1, #16
 8002064:	4342      	muls	r2, r0
 8002066:	0c31      	lsrs	r1, r6, #16
 8002068:	0005      	movs	r5, r0
 800206a:	4319      	orrs	r1, r3
 800206c:	428a      	cmp	r2, r1
 800206e:	d907      	bls.n	8002080 <__aeabi_ddiv+0x374>
 8002070:	1909      	adds	r1, r1, r4
 8002072:	3d01      	subs	r5, #1
 8002074:	428c      	cmp	r4, r1
 8002076:	d803      	bhi.n	8002080 <__aeabi_ddiv+0x374>
 8002078:	428a      	cmp	r2, r1
 800207a:	d901      	bls.n	8002080 <__aeabi_ddiv+0x374>
 800207c:	1e85      	subs	r5, r0, #2
 800207e:	1909      	adds	r1, r1, r4
 8002080:	1a88      	subs	r0, r1, r2
 8002082:	4649      	mov	r1, r9
 8002084:	f7fe f8ea 	bl	800025c <__aeabi_uidivmod>
 8002088:	0409      	lsls	r1, r1, #16
 800208a:	468c      	mov	ip, r1
 800208c:	0431      	lsls	r1, r6, #16
 800208e:	4666      	mov	r6, ip
 8002090:	9a01      	ldr	r2, [sp, #4]
 8002092:	0c09      	lsrs	r1, r1, #16
 8002094:	4342      	muls	r2, r0
 8002096:	0003      	movs	r3, r0
 8002098:	4331      	orrs	r1, r6
 800209a:	428a      	cmp	r2, r1
 800209c:	d907      	bls.n	80020ae <__aeabi_ddiv+0x3a2>
 800209e:	1909      	adds	r1, r1, r4
 80020a0:	3b01      	subs	r3, #1
 80020a2:	428c      	cmp	r4, r1
 80020a4:	d803      	bhi.n	80020ae <__aeabi_ddiv+0x3a2>
 80020a6:	428a      	cmp	r2, r1
 80020a8:	d901      	bls.n	80020ae <__aeabi_ddiv+0x3a2>
 80020aa:	1e83      	subs	r3, r0, #2
 80020ac:	1909      	adds	r1, r1, r4
 80020ae:	9e03      	ldr	r6, [sp, #12]
 80020b0:	1a89      	subs	r1, r1, r2
 80020b2:	0032      	movs	r2, r6
 80020b4:	042d      	lsls	r5, r5, #16
 80020b6:	431d      	orrs	r5, r3
 80020b8:	9f02      	ldr	r7, [sp, #8]
 80020ba:	042b      	lsls	r3, r5, #16
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	435a      	muls	r2, r3
 80020c0:	437b      	muls	r3, r7
 80020c2:	469c      	mov	ip, r3
 80020c4:	0c28      	lsrs	r0, r5, #16
 80020c6:	4346      	muls	r6, r0
 80020c8:	0c13      	lsrs	r3, r2, #16
 80020ca:	44b4      	add	ip, r6
 80020cc:	4463      	add	r3, ip
 80020ce:	4378      	muls	r0, r7
 80020d0:	429e      	cmp	r6, r3
 80020d2:	d903      	bls.n	80020dc <__aeabi_ddiv+0x3d0>
 80020d4:	2680      	movs	r6, #128	; 0x80
 80020d6:	0276      	lsls	r6, r6, #9
 80020d8:	46b4      	mov	ip, r6
 80020da:	4460      	add	r0, ip
 80020dc:	0c1e      	lsrs	r6, r3, #16
 80020de:	0412      	lsls	r2, r2, #16
 80020e0:	041b      	lsls	r3, r3, #16
 80020e2:	0c12      	lsrs	r2, r2, #16
 80020e4:	1830      	adds	r0, r6, r0
 80020e6:	189b      	adds	r3, r3, r2
 80020e8:	4281      	cmp	r1, r0
 80020ea:	d306      	bcc.n	80020fa <__aeabi_ddiv+0x3ee>
 80020ec:	d002      	beq.n	80020f4 <__aeabi_ddiv+0x3e8>
 80020ee:	2301      	movs	r3, #1
 80020f0:	431d      	orrs	r5, r3
 80020f2:	e6ce      	b.n	8001e92 <__aeabi_ddiv+0x186>
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d100      	bne.n	80020fa <__aeabi_ddiv+0x3ee>
 80020f8:	e6cb      	b.n	8001e92 <__aeabi_ddiv+0x186>
 80020fa:	1861      	adds	r1, r4, r1
 80020fc:	1e6e      	subs	r6, r5, #1
 80020fe:	42a1      	cmp	r1, r4
 8002100:	d200      	bcs.n	8002104 <__aeabi_ddiv+0x3f8>
 8002102:	e0a4      	b.n	800224e <__aeabi_ddiv+0x542>
 8002104:	4281      	cmp	r1, r0
 8002106:	d200      	bcs.n	800210a <__aeabi_ddiv+0x3fe>
 8002108:	e0c9      	b.n	800229e <__aeabi_ddiv+0x592>
 800210a:	d100      	bne.n	800210e <__aeabi_ddiv+0x402>
 800210c:	e0d9      	b.n	80022c2 <__aeabi_ddiv+0x5b6>
 800210e:	0035      	movs	r5, r6
 8002110:	e7ed      	b.n	80020ee <__aeabi_ddiv+0x3e2>
 8002112:	2501      	movs	r5, #1
 8002114:	426d      	negs	r5, r5
 8002116:	2101      	movs	r1, #1
 8002118:	1a89      	subs	r1, r1, r2
 800211a:	2938      	cmp	r1, #56	; 0x38
 800211c:	dd00      	ble.n	8002120 <__aeabi_ddiv+0x414>
 800211e:	e64c      	b.n	8001dba <__aeabi_ddiv+0xae>
 8002120:	291f      	cmp	r1, #31
 8002122:	dc00      	bgt.n	8002126 <__aeabi_ddiv+0x41a>
 8002124:	e07f      	b.n	8002226 <__aeabi_ddiv+0x51a>
 8002126:	231f      	movs	r3, #31
 8002128:	425b      	negs	r3, r3
 800212a:	1a9a      	subs	r2, r3, r2
 800212c:	4643      	mov	r3, r8
 800212e:	40d3      	lsrs	r3, r2
 8002130:	2920      	cmp	r1, #32
 8002132:	d004      	beq.n	800213e <__aeabi_ddiv+0x432>
 8002134:	4644      	mov	r4, r8
 8002136:	4a65      	ldr	r2, [pc, #404]	; (80022cc <__aeabi_ddiv+0x5c0>)
 8002138:	445a      	add	r2, fp
 800213a:	4094      	lsls	r4, r2
 800213c:	4325      	orrs	r5, r4
 800213e:	1e6a      	subs	r2, r5, #1
 8002140:	4195      	sbcs	r5, r2
 8002142:	2207      	movs	r2, #7
 8002144:	432b      	orrs	r3, r5
 8002146:	0015      	movs	r5, r2
 8002148:	2400      	movs	r4, #0
 800214a:	401d      	ands	r5, r3
 800214c:	421a      	tst	r2, r3
 800214e:	d100      	bne.n	8002152 <__aeabi_ddiv+0x446>
 8002150:	e0a1      	b.n	8002296 <__aeabi_ddiv+0x58a>
 8002152:	220f      	movs	r2, #15
 8002154:	2400      	movs	r4, #0
 8002156:	401a      	ands	r2, r3
 8002158:	2a04      	cmp	r2, #4
 800215a:	d100      	bne.n	800215e <__aeabi_ddiv+0x452>
 800215c:	e098      	b.n	8002290 <__aeabi_ddiv+0x584>
 800215e:	1d1a      	adds	r2, r3, #4
 8002160:	429a      	cmp	r2, r3
 8002162:	419b      	sbcs	r3, r3
 8002164:	425b      	negs	r3, r3
 8002166:	18e4      	adds	r4, r4, r3
 8002168:	0013      	movs	r3, r2
 800216a:	0222      	lsls	r2, r4, #8
 800216c:	d400      	bmi.n	8002170 <__aeabi_ddiv+0x464>
 800216e:	e08f      	b.n	8002290 <__aeabi_ddiv+0x584>
 8002170:	2301      	movs	r3, #1
 8002172:	2400      	movs	r4, #0
 8002174:	2500      	movs	r5, #0
 8002176:	e623      	b.n	8001dc0 <__aeabi_ddiv+0xb4>
 8002178:	42b5      	cmp	r5, r6
 800217a:	d300      	bcc.n	800217e <__aeabi_ddiv+0x472>
 800217c:	e764      	b.n	8002048 <__aeabi_ddiv+0x33c>
 800217e:	4643      	mov	r3, r8
 8002180:	1e5a      	subs	r2, r3, #1
 8002182:	9b00      	ldr	r3, [sp, #0]
 8002184:	469c      	mov	ip, r3
 8002186:	4465      	add	r5, ip
 8002188:	001f      	movs	r7, r3
 800218a:	429d      	cmp	r5, r3
 800218c:	419b      	sbcs	r3, r3
 800218e:	425b      	negs	r3, r3
 8002190:	191b      	adds	r3, r3, r4
 8002192:	18c9      	adds	r1, r1, r3
 8002194:	428c      	cmp	r4, r1
 8002196:	d23a      	bcs.n	800220e <__aeabi_ddiv+0x502>
 8002198:	4288      	cmp	r0, r1
 800219a:	d863      	bhi.n	8002264 <__aeabi_ddiv+0x558>
 800219c:	d060      	beq.n	8002260 <__aeabi_ddiv+0x554>
 800219e:	4690      	mov	r8, r2
 80021a0:	e752      	b.n	8002048 <__aeabi_ddiv+0x33c>
 80021a2:	42aa      	cmp	r2, r5
 80021a4:	d900      	bls.n	80021a8 <__aeabi_ddiv+0x49c>
 80021a6:	e6ea      	b.n	8001f7e <__aeabi_ddiv+0x272>
 80021a8:	4643      	mov	r3, r8
 80021aa:	07de      	lsls	r6, r3, #31
 80021ac:	0858      	lsrs	r0, r3, #1
 80021ae:	086b      	lsrs	r3, r5, #1
 80021b0:	431e      	orrs	r6, r3
 80021b2:	07ed      	lsls	r5, r5, #31
 80021b4:	e6ea      	b.n	8001f8c <__aeabi_ddiv+0x280>
 80021b6:	4648      	mov	r0, r9
 80021b8:	f001 f926 	bl	8003408 <__clzsi2>
 80021bc:	0001      	movs	r1, r0
 80021be:	0002      	movs	r2, r0
 80021c0:	3115      	adds	r1, #21
 80021c2:	3220      	adds	r2, #32
 80021c4:	291c      	cmp	r1, #28
 80021c6:	dc00      	bgt.n	80021ca <__aeabi_ddiv+0x4be>
 80021c8:	e61a      	b.n	8001e00 <__aeabi_ddiv+0xf4>
 80021ca:	464b      	mov	r3, r9
 80021cc:	3808      	subs	r0, #8
 80021ce:	4083      	lsls	r3, r0
 80021d0:	2500      	movs	r5, #0
 80021d2:	4698      	mov	r8, r3
 80021d4:	e620      	b.n	8001e18 <__aeabi_ddiv+0x10c>
 80021d6:	f001 f917 	bl	8003408 <__clzsi2>
 80021da:	0003      	movs	r3, r0
 80021dc:	001a      	movs	r2, r3
 80021de:	3215      	adds	r2, #21
 80021e0:	3020      	adds	r0, #32
 80021e2:	2a1c      	cmp	r2, #28
 80021e4:	dc00      	bgt.n	80021e8 <__aeabi_ddiv+0x4dc>
 80021e6:	e630      	b.n	8001e4a <__aeabi_ddiv+0x13e>
 80021e8:	4654      	mov	r4, sl
 80021ea:	3b08      	subs	r3, #8
 80021ec:	2200      	movs	r2, #0
 80021ee:	409c      	lsls	r4, r3
 80021f0:	e635      	b.n	8001e5e <__aeabi_ddiv+0x152>
 80021f2:	230f      	movs	r3, #15
 80021f4:	402b      	ands	r3, r5
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d100      	bne.n	80021fc <__aeabi_ddiv+0x4f0>
 80021fa:	e652      	b.n	8001ea2 <__aeabi_ddiv+0x196>
 80021fc:	2305      	movs	r3, #5
 80021fe:	425b      	negs	r3, r3
 8002200:	42ab      	cmp	r3, r5
 8002202:	419b      	sbcs	r3, r3
 8002204:	3504      	adds	r5, #4
 8002206:	425b      	negs	r3, r3
 8002208:	08ed      	lsrs	r5, r5, #3
 800220a:	4498      	add	r8, r3
 800220c:	e64a      	b.n	8001ea4 <__aeabi_ddiv+0x198>
 800220e:	428c      	cmp	r4, r1
 8002210:	d1c5      	bne.n	800219e <__aeabi_ddiv+0x492>
 8002212:	42af      	cmp	r7, r5
 8002214:	d9c0      	bls.n	8002198 <__aeabi_ddiv+0x48c>
 8002216:	4690      	mov	r8, r2
 8002218:	e716      	b.n	8002048 <__aeabi_ddiv+0x33c>
 800221a:	428a      	cmp	r2, r1
 800221c:	d800      	bhi.n	8002220 <__aeabi_ddiv+0x514>
 800221e:	e6ea      	b.n	8001ff6 <__aeabi_ddiv+0x2ea>
 8002220:	1e83      	subs	r3, r0, #2
 8002222:	1909      	adds	r1, r1, r4
 8002224:	e6e7      	b.n	8001ff6 <__aeabi_ddiv+0x2ea>
 8002226:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <__aeabi_ddiv+0x5c4>)
 8002228:	0028      	movs	r0, r5
 800222a:	445a      	add	r2, fp
 800222c:	4643      	mov	r3, r8
 800222e:	4095      	lsls	r5, r2
 8002230:	4093      	lsls	r3, r2
 8002232:	40c8      	lsrs	r0, r1
 8002234:	1e6a      	subs	r2, r5, #1
 8002236:	4195      	sbcs	r5, r2
 8002238:	4644      	mov	r4, r8
 800223a:	4303      	orrs	r3, r0
 800223c:	432b      	orrs	r3, r5
 800223e:	40cc      	lsrs	r4, r1
 8002240:	075a      	lsls	r2, r3, #29
 8002242:	d092      	beq.n	800216a <__aeabi_ddiv+0x45e>
 8002244:	220f      	movs	r2, #15
 8002246:	401a      	ands	r2, r3
 8002248:	2a04      	cmp	r2, #4
 800224a:	d188      	bne.n	800215e <__aeabi_ddiv+0x452>
 800224c:	e78d      	b.n	800216a <__aeabi_ddiv+0x45e>
 800224e:	0035      	movs	r5, r6
 8002250:	4281      	cmp	r1, r0
 8002252:	d000      	beq.n	8002256 <__aeabi_ddiv+0x54a>
 8002254:	e74b      	b.n	80020ee <__aeabi_ddiv+0x3e2>
 8002256:	9a00      	ldr	r2, [sp, #0]
 8002258:	4293      	cmp	r3, r2
 800225a:	d000      	beq.n	800225e <__aeabi_ddiv+0x552>
 800225c:	e747      	b.n	80020ee <__aeabi_ddiv+0x3e2>
 800225e:	e618      	b.n	8001e92 <__aeabi_ddiv+0x186>
 8002260:	42ae      	cmp	r6, r5
 8002262:	d99c      	bls.n	800219e <__aeabi_ddiv+0x492>
 8002264:	2302      	movs	r3, #2
 8002266:	425b      	negs	r3, r3
 8002268:	469c      	mov	ip, r3
 800226a:	9b00      	ldr	r3, [sp, #0]
 800226c:	44e0      	add	r8, ip
 800226e:	469c      	mov	ip, r3
 8002270:	4465      	add	r5, ip
 8002272:	429d      	cmp	r5, r3
 8002274:	419b      	sbcs	r3, r3
 8002276:	425b      	negs	r3, r3
 8002278:	191b      	adds	r3, r3, r4
 800227a:	18c9      	adds	r1, r1, r3
 800227c:	e6e4      	b.n	8002048 <__aeabi_ddiv+0x33c>
 800227e:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <__aeabi_ddiv+0x5c8>)
 8002280:	445a      	add	r2, fp
 8002282:	2a00      	cmp	r2, #0
 8002284:	dc00      	bgt.n	8002288 <__aeabi_ddiv+0x57c>
 8002286:	e744      	b.n	8002112 <__aeabi_ddiv+0x406>
 8002288:	2301      	movs	r3, #1
 800228a:	2500      	movs	r5, #0
 800228c:	4498      	add	r8, r3
 800228e:	e609      	b.n	8001ea4 <__aeabi_ddiv+0x198>
 8002290:	0765      	lsls	r5, r4, #29
 8002292:	0264      	lsls	r4, r4, #9
 8002294:	0b24      	lsrs	r4, r4, #12
 8002296:	08db      	lsrs	r3, r3, #3
 8002298:	431d      	orrs	r5, r3
 800229a:	2300      	movs	r3, #0
 800229c:	e590      	b.n	8001dc0 <__aeabi_ddiv+0xb4>
 800229e:	9e00      	ldr	r6, [sp, #0]
 80022a0:	3d02      	subs	r5, #2
 80022a2:	0072      	lsls	r2, r6, #1
 80022a4:	42b2      	cmp	r2, r6
 80022a6:	41bf      	sbcs	r7, r7
 80022a8:	427f      	negs	r7, r7
 80022aa:	193c      	adds	r4, r7, r4
 80022ac:	1909      	adds	r1, r1, r4
 80022ae:	9200      	str	r2, [sp, #0]
 80022b0:	e7ce      	b.n	8002250 <__aeabi_ddiv+0x544>
 80022b2:	2480      	movs	r4, #128	; 0x80
 80022b4:	4643      	mov	r3, r8
 80022b6:	0324      	lsls	r4, r4, #12
 80022b8:	431c      	orrs	r4, r3
 80022ba:	0324      	lsls	r4, r4, #12
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <__aeabi_ddiv+0x5cc>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e57e      	b.n	8001dc0 <__aeabi_ddiv+0xb4>
 80022c2:	9a00      	ldr	r2, [sp, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d3ea      	bcc.n	800229e <__aeabi_ddiv+0x592>
 80022c8:	0035      	movs	r5, r6
 80022ca:	e7c4      	b.n	8002256 <__aeabi_ddiv+0x54a>
 80022cc:	0000043e 	.word	0x0000043e
 80022d0:	0000041e 	.word	0x0000041e
 80022d4:	000003ff 	.word	0x000003ff
 80022d8:	000007ff 	.word	0x000007ff

080022dc <__eqdf2>:
 80022dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022de:	464f      	mov	r7, r9
 80022e0:	4646      	mov	r6, r8
 80022e2:	46d6      	mov	lr, sl
 80022e4:	4694      	mov	ip, r2
 80022e6:	4691      	mov	r9, r2
 80022e8:	031a      	lsls	r2, r3, #12
 80022ea:	0b12      	lsrs	r2, r2, #12
 80022ec:	4d18      	ldr	r5, [pc, #96]	; (8002350 <__eqdf2+0x74>)
 80022ee:	b5c0      	push	{r6, r7, lr}
 80022f0:	004c      	lsls	r4, r1, #1
 80022f2:	030f      	lsls	r7, r1, #12
 80022f4:	4692      	mov	sl, r2
 80022f6:	005a      	lsls	r2, r3, #1
 80022f8:	0006      	movs	r6, r0
 80022fa:	4680      	mov	r8, r0
 80022fc:	0b3f      	lsrs	r7, r7, #12
 80022fe:	2001      	movs	r0, #1
 8002300:	0d64      	lsrs	r4, r4, #21
 8002302:	0fc9      	lsrs	r1, r1, #31
 8002304:	0d52      	lsrs	r2, r2, #21
 8002306:	0fdb      	lsrs	r3, r3, #31
 8002308:	42ac      	cmp	r4, r5
 800230a:	d00a      	beq.n	8002322 <__eqdf2+0x46>
 800230c:	42aa      	cmp	r2, r5
 800230e:	d003      	beq.n	8002318 <__eqdf2+0x3c>
 8002310:	4294      	cmp	r4, r2
 8002312:	d101      	bne.n	8002318 <__eqdf2+0x3c>
 8002314:	4557      	cmp	r7, sl
 8002316:	d00d      	beq.n	8002334 <__eqdf2+0x58>
 8002318:	bce0      	pop	{r5, r6, r7}
 800231a:	46ba      	mov	sl, r7
 800231c:	46b1      	mov	r9, r6
 800231e:	46a8      	mov	r8, r5
 8002320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002322:	003d      	movs	r5, r7
 8002324:	4335      	orrs	r5, r6
 8002326:	d1f7      	bne.n	8002318 <__eqdf2+0x3c>
 8002328:	42a2      	cmp	r2, r4
 800232a:	d1f5      	bne.n	8002318 <__eqdf2+0x3c>
 800232c:	4652      	mov	r2, sl
 800232e:	4665      	mov	r5, ip
 8002330:	432a      	orrs	r2, r5
 8002332:	d1f1      	bne.n	8002318 <__eqdf2+0x3c>
 8002334:	2001      	movs	r0, #1
 8002336:	45c8      	cmp	r8, r9
 8002338:	d1ee      	bne.n	8002318 <__eqdf2+0x3c>
 800233a:	4299      	cmp	r1, r3
 800233c:	d006      	beq.n	800234c <__eqdf2+0x70>
 800233e:	2c00      	cmp	r4, #0
 8002340:	d1ea      	bne.n	8002318 <__eqdf2+0x3c>
 8002342:	433e      	orrs	r6, r7
 8002344:	0030      	movs	r0, r6
 8002346:	1e46      	subs	r6, r0, #1
 8002348:	41b0      	sbcs	r0, r6
 800234a:	e7e5      	b.n	8002318 <__eqdf2+0x3c>
 800234c:	2000      	movs	r0, #0
 800234e:	e7e3      	b.n	8002318 <__eqdf2+0x3c>
 8002350:	000007ff 	.word	0x000007ff

08002354 <__gedf2>:
 8002354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002356:	464e      	mov	r6, r9
 8002358:	4645      	mov	r5, r8
 800235a:	4657      	mov	r7, sl
 800235c:	46de      	mov	lr, fp
 800235e:	0004      	movs	r4, r0
 8002360:	0018      	movs	r0, r3
 8002362:	b5e0      	push	{r5, r6, r7, lr}
 8002364:	0016      	movs	r6, r2
 8002366:	031b      	lsls	r3, r3, #12
 8002368:	0b1b      	lsrs	r3, r3, #12
 800236a:	4d32      	ldr	r5, [pc, #200]	; (8002434 <__gedf2+0xe0>)
 800236c:	030f      	lsls	r7, r1, #12
 800236e:	004a      	lsls	r2, r1, #1
 8002370:	4699      	mov	r9, r3
 8002372:	0043      	lsls	r3, r0, #1
 8002374:	46a4      	mov	ip, r4
 8002376:	46b0      	mov	r8, r6
 8002378:	0b3f      	lsrs	r7, r7, #12
 800237a:	0d52      	lsrs	r2, r2, #21
 800237c:	0fc9      	lsrs	r1, r1, #31
 800237e:	0d5b      	lsrs	r3, r3, #21
 8002380:	0fc0      	lsrs	r0, r0, #31
 8002382:	42aa      	cmp	r2, r5
 8002384:	d029      	beq.n	80023da <__gedf2+0x86>
 8002386:	42ab      	cmp	r3, r5
 8002388:	d018      	beq.n	80023bc <__gedf2+0x68>
 800238a:	2a00      	cmp	r2, #0
 800238c:	d12a      	bne.n	80023e4 <__gedf2+0x90>
 800238e:	433c      	orrs	r4, r7
 8002390:	46a3      	mov	fp, r4
 8002392:	4265      	negs	r5, r4
 8002394:	4165      	adcs	r5, r4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <__gedf2+0x4c>
 800239a:	464c      	mov	r4, r9
 800239c:	4326      	orrs	r6, r4
 800239e:	d027      	beq.n	80023f0 <__gedf2+0x9c>
 80023a0:	2d00      	cmp	r5, #0
 80023a2:	d115      	bne.n	80023d0 <__gedf2+0x7c>
 80023a4:	4281      	cmp	r1, r0
 80023a6:	d028      	beq.n	80023fa <__gedf2+0xa6>
 80023a8:	2002      	movs	r0, #2
 80023aa:	3901      	subs	r1, #1
 80023ac:	4008      	ands	r0, r1
 80023ae:	3801      	subs	r0, #1
 80023b0:	bcf0      	pop	{r4, r5, r6, r7}
 80023b2:	46bb      	mov	fp, r7
 80023b4:	46b2      	mov	sl, r6
 80023b6:	46a9      	mov	r9, r5
 80023b8:	46a0      	mov	r8, r4
 80023ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023bc:	464d      	mov	r5, r9
 80023be:	432e      	orrs	r6, r5
 80023c0:	d12f      	bne.n	8002422 <__gedf2+0xce>
 80023c2:	2a00      	cmp	r2, #0
 80023c4:	d1ee      	bne.n	80023a4 <__gedf2+0x50>
 80023c6:	433c      	orrs	r4, r7
 80023c8:	4265      	negs	r5, r4
 80023ca:	4165      	adcs	r5, r4
 80023cc:	2d00      	cmp	r5, #0
 80023ce:	d0e9      	beq.n	80023a4 <__gedf2+0x50>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d1ed      	bne.n	80023b0 <__gedf2+0x5c>
 80023d4:	2001      	movs	r0, #1
 80023d6:	4240      	negs	r0, r0
 80023d8:	e7ea      	b.n	80023b0 <__gedf2+0x5c>
 80023da:	003d      	movs	r5, r7
 80023dc:	4325      	orrs	r5, r4
 80023de:	d120      	bne.n	8002422 <__gedf2+0xce>
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d0eb      	beq.n	80023bc <__gedf2+0x68>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1dd      	bne.n	80023a4 <__gedf2+0x50>
 80023e8:	464c      	mov	r4, r9
 80023ea:	4326      	orrs	r6, r4
 80023ec:	d1da      	bne.n	80023a4 <__gedf2+0x50>
 80023ee:	e7db      	b.n	80023a8 <__gedf2+0x54>
 80023f0:	465b      	mov	r3, fp
 80023f2:	2000      	movs	r0, #0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0db      	beq.n	80023b0 <__gedf2+0x5c>
 80023f8:	e7d6      	b.n	80023a8 <__gedf2+0x54>
 80023fa:	429a      	cmp	r2, r3
 80023fc:	dc0a      	bgt.n	8002414 <__gedf2+0xc0>
 80023fe:	dbe7      	blt.n	80023d0 <__gedf2+0x7c>
 8002400:	454f      	cmp	r7, r9
 8002402:	d8d1      	bhi.n	80023a8 <__gedf2+0x54>
 8002404:	d010      	beq.n	8002428 <__gedf2+0xd4>
 8002406:	2000      	movs	r0, #0
 8002408:	454f      	cmp	r7, r9
 800240a:	d2d1      	bcs.n	80023b0 <__gedf2+0x5c>
 800240c:	2900      	cmp	r1, #0
 800240e:	d0e1      	beq.n	80023d4 <__gedf2+0x80>
 8002410:	0008      	movs	r0, r1
 8002412:	e7cd      	b.n	80023b0 <__gedf2+0x5c>
 8002414:	4243      	negs	r3, r0
 8002416:	4158      	adcs	r0, r3
 8002418:	2302      	movs	r3, #2
 800241a:	4240      	negs	r0, r0
 800241c:	4018      	ands	r0, r3
 800241e:	3801      	subs	r0, #1
 8002420:	e7c6      	b.n	80023b0 <__gedf2+0x5c>
 8002422:	2002      	movs	r0, #2
 8002424:	4240      	negs	r0, r0
 8002426:	e7c3      	b.n	80023b0 <__gedf2+0x5c>
 8002428:	45c4      	cmp	ip, r8
 800242a:	d8bd      	bhi.n	80023a8 <__gedf2+0x54>
 800242c:	2000      	movs	r0, #0
 800242e:	45c4      	cmp	ip, r8
 8002430:	d2be      	bcs.n	80023b0 <__gedf2+0x5c>
 8002432:	e7eb      	b.n	800240c <__gedf2+0xb8>
 8002434:	000007ff 	.word	0x000007ff

08002438 <__ledf2>:
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243a:	464e      	mov	r6, r9
 800243c:	4645      	mov	r5, r8
 800243e:	4657      	mov	r7, sl
 8002440:	46de      	mov	lr, fp
 8002442:	0004      	movs	r4, r0
 8002444:	0018      	movs	r0, r3
 8002446:	b5e0      	push	{r5, r6, r7, lr}
 8002448:	0016      	movs	r6, r2
 800244a:	031b      	lsls	r3, r3, #12
 800244c:	0b1b      	lsrs	r3, r3, #12
 800244e:	4d31      	ldr	r5, [pc, #196]	; (8002514 <__ledf2+0xdc>)
 8002450:	030f      	lsls	r7, r1, #12
 8002452:	004a      	lsls	r2, r1, #1
 8002454:	4699      	mov	r9, r3
 8002456:	0043      	lsls	r3, r0, #1
 8002458:	46a4      	mov	ip, r4
 800245a:	46b0      	mov	r8, r6
 800245c:	0b3f      	lsrs	r7, r7, #12
 800245e:	0d52      	lsrs	r2, r2, #21
 8002460:	0fc9      	lsrs	r1, r1, #31
 8002462:	0d5b      	lsrs	r3, r3, #21
 8002464:	0fc0      	lsrs	r0, r0, #31
 8002466:	42aa      	cmp	r2, r5
 8002468:	d011      	beq.n	800248e <__ledf2+0x56>
 800246a:	42ab      	cmp	r3, r5
 800246c:	d014      	beq.n	8002498 <__ledf2+0x60>
 800246e:	2a00      	cmp	r2, #0
 8002470:	d12f      	bne.n	80024d2 <__ledf2+0x9a>
 8002472:	433c      	orrs	r4, r7
 8002474:	46a3      	mov	fp, r4
 8002476:	4265      	negs	r5, r4
 8002478:	4165      	adcs	r5, r4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d114      	bne.n	80024a8 <__ledf2+0x70>
 800247e:	464c      	mov	r4, r9
 8002480:	4326      	orrs	r6, r4
 8002482:	d111      	bne.n	80024a8 <__ledf2+0x70>
 8002484:	465b      	mov	r3, fp
 8002486:	2000      	movs	r0, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d017      	beq.n	80024bc <__ledf2+0x84>
 800248c:	e010      	b.n	80024b0 <__ledf2+0x78>
 800248e:	003d      	movs	r5, r7
 8002490:	4325      	orrs	r5, r4
 8002492:	d112      	bne.n	80024ba <__ledf2+0x82>
 8002494:	4293      	cmp	r3, r2
 8002496:	d11c      	bne.n	80024d2 <__ledf2+0x9a>
 8002498:	464d      	mov	r5, r9
 800249a:	432e      	orrs	r6, r5
 800249c:	d10d      	bne.n	80024ba <__ledf2+0x82>
 800249e:	2a00      	cmp	r2, #0
 80024a0:	d104      	bne.n	80024ac <__ledf2+0x74>
 80024a2:	433c      	orrs	r4, r7
 80024a4:	4265      	negs	r5, r4
 80024a6:	4165      	adcs	r5, r4
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	d10d      	bne.n	80024c8 <__ledf2+0x90>
 80024ac:	4281      	cmp	r1, r0
 80024ae:	d016      	beq.n	80024de <__ledf2+0xa6>
 80024b0:	2002      	movs	r0, #2
 80024b2:	3901      	subs	r1, #1
 80024b4:	4008      	ands	r0, r1
 80024b6:	3801      	subs	r0, #1
 80024b8:	e000      	b.n	80024bc <__ledf2+0x84>
 80024ba:	2002      	movs	r0, #2
 80024bc:	bcf0      	pop	{r4, r5, r6, r7}
 80024be:	46bb      	mov	fp, r7
 80024c0:	46b2      	mov	sl, r6
 80024c2:	46a9      	mov	r9, r5
 80024c4:	46a0      	mov	r8, r4
 80024c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c8:	2800      	cmp	r0, #0
 80024ca:	d1f7      	bne.n	80024bc <__ledf2+0x84>
 80024cc:	2001      	movs	r0, #1
 80024ce:	4240      	negs	r0, r0
 80024d0:	e7f4      	b.n	80024bc <__ledf2+0x84>
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ea      	bne.n	80024ac <__ledf2+0x74>
 80024d6:	464c      	mov	r4, r9
 80024d8:	4326      	orrs	r6, r4
 80024da:	d1e7      	bne.n	80024ac <__ledf2+0x74>
 80024dc:	e7e8      	b.n	80024b0 <__ledf2+0x78>
 80024de:	429a      	cmp	r2, r3
 80024e0:	dd06      	ble.n	80024f0 <__ledf2+0xb8>
 80024e2:	4243      	negs	r3, r0
 80024e4:	4158      	adcs	r0, r3
 80024e6:	2302      	movs	r3, #2
 80024e8:	4240      	negs	r0, r0
 80024ea:	4018      	ands	r0, r3
 80024ec:	3801      	subs	r0, #1
 80024ee:	e7e5      	b.n	80024bc <__ledf2+0x84>
 80024f0:	429a      	cmp	r2, r3
 80024f2:	dbe9      	blt.n	80024c8 <__ledf2+0x90>
 80024f4:	454f      	cmp	r7, r9
 80024f6:	d8db      	bhi.n	80024b0 <__ledf2+0x78>
 80024f8:	d006      	beq.n	8002508 <__ledf2+0xd0>
 80024fa:	2000      	movs	r0, #0
 80024fc:	454f      	cmp	r7, r9
 80024fe:	d2dd      	bcs.n	80024bc <__ledf2+0x84>
 8002500:	2900      	cmp	r1, #0
 8002502:	d0e3      	beq.n	80024cc <__ledf2+0x94>
 8002504:	0008      	movs	r0, r1
 8002506:	e7d9      	b.n	80024bc <__ledf2+0x84>
 8002508:	45c4      	cmp	ip, r8
 800250a:	d8d1      	bhi.n	80024b0 <__ledf2+0x78>
 800250c:	2000      	movs	r0, #0
 800250e:	45c4      	cmp	ip, r8
 8002510:	d2d4      	bcs.n	80024bc <__ledf2+0x84>
 8002512:	e7f5      	b.n	8002500 <__ledf2+0xc8>
 8002514:	000007ff 	.word	0x000007ff

08002518 <__aeabi_dmul>:
 8002518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251a:	4657      	mov	r7, sl
 800251c:	464e      	mov	r6, r9
 800251e:	4645      	mov	r5, r8
 8002520:	46de      	mov	lr, fp
 8002522:	b5e0      	push	{r5, r6, r7, lr}
 8002524:	4698      	mov	r8, r3
 8002526:	030c      	lsls	r4, r1, #12
 8002528:	004b      	lsls	r3, r1, #1
 800252a:	0006      	movs	r6, r0
 800252c:	4692      	mov	sl, r2
 800252e:	b087      	sub	sp, #28
 8002530:	0b24      	lsrs	r4, r4, #12
 8002532:	0d5b      	lsrs	r3, r3, #21
 8002534:	0fcf      	lsrs	r7, r1, #31
 8002536:	2b00      	cmp	r3, #0
 8002538:	d06c      	beq.n	8002614 <__aeabi_dmul+0xfc>
 800253a:	4add      	ldr	r2, [pc, #884]	; (80028b0 <__aeabi_dmul+0x398>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d100      	bne.n	8002542 <__aeabi_dmul+0x2a>
 8002540:	e086      	b.n	8002650 <__aeabi_dmul+0x138>
 8002542:	0f42      	lsrs	r2, r0, #29
 8002544:	00e4      	lsls	r4, r4, #3
 8002546:	4314      	orrs	r4, r2
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	0412      	lsls	r2, r2, #16
 800254c:	4314      	orrs	r4, r2
 800254e:	4ad9      	ldr	r2, [pc, #868]	; (80028b4 <__aeabi_dmul+0x39c>)
 8002550:	00c5      	lsls	r5, r0, #3
 8002552:	4694      	mov	ip, r2
 8002554:	4463      	add	r3, ip
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2300      	movs	r3, #0
 800255a:	4699      	mov	r9, r3
 800255c:	469b      	mov	fp, r3
 800255e:	4643      	mov	r3, r8
 8002560:	4642      	mov	r2, r8
 8002562:	031e      	lsls	r6, r3, #12
 8002564:	0fd2      	lsrs	r2, r2, #31
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4650      	mov	r0, sl
 800256a:	4690      	mov	r8, r2
 800256c:	0b36      	lsrs	r6, r6, #12
 800256e:	0d5b      	lsrs	r3, r3, #21
 8002570:	d100      	bne.n	8002574 <__aeabi_dmul+0x5c>
 8002572:	e078      	b.n	8002666 <__aeabi_dmul+0x14e>
 8002574:	4ace      	ldr	r2, [pc, #824]	; (80028b0 <__aeabi_dmul+0x398>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01d      	beq.n	80025b6 <__aeabi_dmul+0x9e>
 800257a:	49ce      	ldr	r1, [pc, #824]	; (80028b4 <__aeabi_dmul+0x39c>)
 800257c:	0f42      	lsrs	r2, r0, #29
 800257e:	468c      	mov	ip, r1
 8002580:	9900      	ldr	r1, [sp, #0]
 8002582:	4463      	add	r3, ip
 8002584:	00f6      	lsls	r6, r6, #3
 8002586:	468c      	mov	ip, r1
 8002588:	4316      	orrs	r6, r2
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	449c      	add	ip, r3
 800258e:	0412      	lsls	r2, r2, #16
 8002590:	4663      	mov	r3, ip
 8002592:	4316      	orrs	r6, r2
 8002594:	00c2      	lsls	r2, r0, #3
 8002596:	2000      	movs	r0, #0
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	9900      	ldr	r1, [sp, #0]
 800259c:	4643      	mov	r3, r8
 800259e:	3101      	adds	r1, #1
 80025a0:	468c      	mov	ip, r1
 80025a2:	4649      	mov	r1, r9
 80025a4:	407b      	eors	r3, r7
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	290f      	cmp	r1, #15
 80025aa:	d900      	bls.n	80025ae <__aeabi_dmul+0x96>
 80025ac:	e07e      	b.n	80026ac <__aeabi_dmul+0x194>
 80025ae:	4bc2      	ldr	r3, [pc, #776]	; (80028b8 <__aeabi_dmul+0x3a0>)
 80025b0:	0089      	lsls	r1, r1, #2
 80025b2:	5859      	ldr	r1, [r3, r1]
 80025b4:	468f      	mov	pc, r1
 80025b6:	4652      	mov	r2, sl
 80025b8:	9b00      	ldr	r3, [sp, #0]
 80025ba:	4332      	orrs	r2, r6
 80025bc:	d000      	beq.n	80025c0 <__aeabi_dmul+0xa8>
 80025be:	e156      	b.n	800286e <__aeabi_dmul+0x356>
 80025c0:	49bb      	ldr	r1, [pc, #748]	; (80028b0 <__aeabi_dmul+0x398>)
 80025c2:	2600      	movs	r6, #0
 80025c4:	468c      	mov	ip, r1
 80025c6:	4463      	add	r3, ip
 80025c8:	4649      	mov	r1, r9
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2302      	movs	r3, #2
 80025ce:	4319      	orrs	r1, r3
 80025d0:	4689      	mov	r9, r1
 80025d2:	2002      	movs	r0, #2
 80025d4:	e7e1      	b.n	800259a <__aeabi_dmul+0x82>
 80025d6:	4643      	mov	r3, r8
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	0034      	movs	r4, r6
 80025dc:	0015      	movs	r5, r2
 80025de:	4683      	mov	fp, r0
 80025e0:	465b      	mov	r3, fp
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d05e      	beq.n	80026a4 <__aeabi_dmul+0x18c>
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d100      	bne.n	80025ec <__aeabi_dmul+0xd4>
 80025ea:	e1f3      	b.n	80029d4 <__aeabi_dmul+0x4bc>
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d000      	beq.n	80025f2 <__aeabi_dmul+0xda>
 80025f0:	e118      	b.n	8002824 <__aeabi_dmul+0x30c>
 80025f2:	2200      	movs	r2, #0
 80025f4:	2400      	movs	r4, #0
 80025f6:	2500      	movs	r5, #0
 80025f8:	9b01      	ldr	r3, [sp, #4]
 80025fa:	0512      	lsls	r2, r2, #20
 80025fc:	4322      	orrs	r2, r4
 80025fe:	07db      	lsls	r3, r3, #31
 8002600:	431a      	orrs	r2, r3
 8002602:	0028      	movs	r0, r5
 8002604:	0011      	movs	r1, r2
 8002606:	b007      	add	sp, #28
 8002608:	bcf0      	pop	{r4, r5, r6, r7}
 800260a:	46bb      	mov	fp, r7
 800260c:	46b2      	mov	sl, r6
 800260e:	46a9      	mov	r9, r5
 8002610:	46a0      	mov	r8, r4
 8002612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002614:	0025      	movs	r5, r4
 8002616:	4305      	orrs	r5, r0
 8002618:	d100      	bne.n	800261c <__aeabi_dmul+0x104>
 800261a:	e141      	b.n	80028a0 <__aeabi_dmul+0x388>
 800261c:	2c00      	cmp	r4, #0
 800261e:	d100      	bne.n	8002622 <__aeabi_dmul+0x10a>
 8002620:	e1ad      	b.n	800297e <__aeabi_dmul+0x466>
 8002622:	0020      	movs	r0, r4
 8002624:	f000 fef0 	bl	8003408 <__clzsi2>
 8002628:	0001      	movs	r1, r0
 800262a:	0002      	movs	r2, r0
 800262c:	390b      	subs	r1, #11
 800262e:	231d      	movs	r3, #29
 8002630:	0010      	movs	r0, r2
 8002632:	1a5b      	subs	r3, r3, r1
 8002634:	0031      	movs	r1, r6
 8002636:	0035      	movs	r5, r6
 8002638:	3808      	subs	r0, #8
 800263a:	4084      	lsls	r4, r0
 800263c:	40d9      	lsrs	r1, r3
 800263e:	4085      	lsls	r5, r0
 8002640:	430c      	orrs	r4, r1
 8002642:	489e      	ldr	r0, [pc, #632]	; (80028bc <__aeabi_dmul+0x3a4>)
 8002644:	1a83      	subs	r3, r0, r2
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2300      	movs	r3, #0
 800264a:	4699      	mov	r9, r3
 800264c:	469b      	mov	fp, r3
 800264e:	e786      	b.n	800255e <__aeabi_dmul+0x46>
 8002650:	0005      	movs	r5, r0
 8002652:	4325      	orrs	r5, r4
 8002654:	d000      	beq.n	8002658 <__aeabi_dmul+0x140>
 8002656:	e11c      	b.n	8002892 <__aeabi_dmul+0x37a>
 8002658:	2208      	movs	r2, #8
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2302      	movs	r3, #2
 800265e:	2400      	movs	r4, #0
 8002660:	4691      	mov	r9, r2
 8002662:	469b      	mov	fp, r3
 8002664:	e77b      	b.n	800255e <__aeabi_dmul+0x46>
 8002666:	4652      	mov	r2, sl
 8002668:	4332      	orrs	r2, r6
 800266a:	d100      	bne.n	800266e <__aeabi_dmul+0x156>
 800266c:	e10a      	b.n	8002884 <__aeabi_dmul+0x36c>
 800266e:	2e00      	cmp	r6, #0
 8002670:	d100      	bne.n	8002674 <__aeabi_dmul+0x15c>
 8002672:	e176      	b.n	8002962 <__aeabi_dmul+0x44a>
 8002674:	0030      	movs	r0, r6
 8002676:	f000 fec7 	bl	8003408 <__clzsi2>
 800267a:	0002      	movs	r2, r0
 800267c:	3a0b      	subs	r2, #11
 800267e:	231d      	movs	r3, #29
 8002680:	0001      	movs	r1, r0
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	4652      	mov	r2, sl
 8002686:	3908      	subs	r1, #8
 8002688:	40da      	lsrs	r2, r3
 800268a:	408e      	lsls	r6, r1
 800268c:	4316      	orrs	r6, r2
 800268e:	4652      	mov	r2, sl
 8002690:	408a      	lsls	r2, r1
 8002692:	9b00      	ldr	r3, [sp, #0]
 8002694:	4989      	ldr	r1, [pc, #548]	; (80028bc <__aeabi_dmul+0x3a4>)
 8002696:	1a18      	subs	r0, r3, r0
 8002698:	0003      	movs	r3, r0
 800269a:	468c      	mov	ip, r1
 800269c:	4463      	add	r3, ip
 800269e:	2000      	movs	r0, #0
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	e77a      	b.n	800259a <__aeabi_dmul+0x82>
 80026a4:	2400      	movs	r4, #0
 80026a6:	2500      	movs	r5, #0
 80026a8:	4a81      	ldr	r2, [pc, #516]	; (80028b0 <__aeabi_dmul+0x398>)
 80026aa:	e7a5      	b.n	80025f8 <__aeabi_dmul+0xe0>
 80026ac:	0c2f      	lsrs	r7, r5, #16
 80026ae:	042d      	lsls	r5, r5, #16
 80026b0:	0c2d      	lsrs	r5, r5, #16
 80026b2:	002b      	movs	r3, r5
 80026b4:	0c11      	lsrs	r1, r2, #16
 80026b6:	0412      	lsls	r2, r2, #16
 80026b8:	0c12      	lsrs	r2, r2, #16
 80026ba:	4353      	muls	r3, r2
 80026bc:	4698      	mov	r8, r3
 80026be:	0013      	movs	r3, r2
 80026c0:	0028      	movs	r0, r5
 80026c2:	437b      	muls	r3, r7
 80026c4:	4699      	mov	r9, r3
 80026c6:	4348      	muls	r0, r1
 80026c8:	4448      	add	r0, r9
 80026ca:	4683      	mov	fp, r0
 80026cc:	4640      	mov	r0, r8
 80026ce:	000b      	movs	r3, r1
 80026d0:	0c00      	lsrs	r0, r0, #16
 80026d2:	4682      	mov	sl, r0
 80026d4:	4658      	mov	r0, fp
 80026d6:	437b      	muls	r3, r7
 80026d8:	4450      	add	r0, sl
 80026da:	9302      	str	r3, [sp, #8]
 80026dc:	4581      	cmp	r9, r0
 80026de:	d906      	bls.n	80026ee <__aeabi_dmul+0x1d6>
 80026e0:	469a      	mov	sl, r3
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	025b      	lsls	r3, r3, #9
 80026e6:	4699      	mov	r9, r3
 80026e8:	44ca      	add	sl, r9
 80026ea:	4653      	mov	r3, sl
 80026ec:	9302      	str	r3, [sp, #8]
 80026ee:	0c03      	lsrs	r3, r0, #16
 80026f0:	469b      	mov	fp, r3
 80026f2:	4643      	mov	r3, r8
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	0400      	lsls	r0, r0, #16
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	4698      	mov	r8, r3
 80026fc:	0003      	movs	r3, r0
 80026fe:	4443      	add	r3, r8
 8002700:	9304      	str	r3, [sp, #16]
 8002702:	0c33      	lsrs	r3, r6, #16
 8002704:	4699      	mov	r9, r3
 8002706:	002b      	movs	r3, r5
 8002708:	0436      	lsls	r6, r6, #16
 800270a:	0c36      	lsrs	r6, r6, #16
 800270c:	4373      	muls	r3, r6
 800270e:	4698      	mov	r8, r3
 8002710:	0033      	movs	r3, r6
 8002712:	437b      	muls	r3, r7
 8002714:	469a      	mov	sl, r3
 8002716:	464b      	mov	r3, r9
 8002718:	435d      	muls	r5, r3
 800271a:	435f      	muls	r7, r3
 800271c:	4643      	mov	r3, r8
 800271e:	4455      	add	r5, sl
 8002720:	0c18      	lsrs	r0, r3, #16
 8002722:	1940      	adds	r0, r0, r5
 8002724:	4582      	cmp	sl, r0
 8002726:	d903      	bls.n	8002730 <__aeabi_dmul+0x218>
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	025b      	lsls	r3, r3, #9
 800272c:	469a      	mov	sl, r3
 800272e:	4457      	add	r7, sl
 8002730:	0c05      	lsrs	r5, r0, #16
 8002732:	19eb      	adds	r3, r5, r7
 8002734:	9305      	str	r3, [sp, #20]
 8002736:	4643      	mov	r3, r8
 8002738:	041d      	lsls	r5, r3, #16
 800273a:	0c2d      	lsrs	r5, r5, #16
 800273c:	0400      	lsls	r0, r0, #16
 800273e:	1940      	adds	r0, r0, r5
 8002740:	0c25      	lsrs	r5, r4, #16
 8002742:	0424      	lsls	r4, r4, #16
 8002744:	0c24      	lsrs	r4, r4, #16
 8002746:	0027      	movs	r7, r4
 8002748:	4357      	muls	r7, r2
 800274a:	436a      	muls	r2, r5
 800274c:	4690      	mov	r8, r2
 800274e:	002a      	movs	r2, r5
 8002750:	0c3b      	lsrs	r3, r7, #16
 8002752:	469a      	mov	sl, r3
 8002754:	434a      	muls	r2, r1
 8002756:	4361      	muls	r1, r4
 8002758:	4441      	add	r1, r8
 800275a:	4451      	add	r1, sl
 800275c:	4483      	add	fp, r0
 800275e:	4588      	cmp	r8, r1
 8002760:	d903      	bls.n	800276a <__aeabi_dmul+0x252>
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	025b      	lsls	r3, r3, #9
 8002766:	4698      	mov	r8, r3
 8002768:	4442      	add	r2, r8
 800276a:	043f      	lsls	r7, r7, #16
 800276c:	0c0b      	lsrs	r3, r1, #16
 800276e:	0c3f      	lsrs	r7, r7, #16
 8002770:	0409      	lsls	r1, r1, #16
 8002772:	19c9      	adds	r1, r1, r7
 8002774:	0027      	movs	r7, r4
 8002776:	4698      	mov	r8, r3
 8002778:	464b      	mov	r3, r9
 800277a:	4377      	muls	r7, r6
 800277c:	435c      	muls	r4, r3
 800277e:	436e      	muls	r6, r5
 8002780:	435d      	muls	r5, r3
 8002782:	0c3b      	lsrs	r3, r7, #16
 8002784:	4699      	mov	r9, r3
 8002786:	19a4      	adds	r4, r4, r6
 8002788:	444c      	add	r4, r9
 800278a:	4442      	add	r2, r8
 800278c:	9503      	str	r5, [sp, #12]
 800278e:	42a6      	cmp	r6, r4
 8002790:	d904      	bls.n	800279c <__aeabi_dmul+0x284>
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	025b      	lsls	r3, r3, #9
 8002796:	4698      	mov	r8, r3
 8002798:	4445      	add	r5, r8
 800279a:	9503      	str	r5, [sp, #12]
 800279c:	9b02      	ldr	r3, [sp, #8]
 800279e:	043f      	lsls	r7, r7, #16
 80027a0:	445b      	add	r3, fp
 80027a2:	001e      	movs	r6, r3
 80027a4:	4283      	cmp	r3, r0
 80027a6:	4180      	sbcs	r0, r0
 80027a8:	0423      	lsls	r3, r4, #16
 80027aa:	4698      	mov	r8, r3
 80027ac:	9b05      	ldr	r3, [sp, #20]
 80027ae:	0c3f      	lsrs	r7, r7, #16
 80027b0:	4447      	add	r7, r8
 80027b2:	4698      	mov	r8, r3
 80027b4:	1876      	adds	r6, r6, r1
 80027b6:	428e      	cmp	r6, r1
 80027b8:	4189      	sbcs	r1, r1
 80027ba:	4447      	add	r7, r8
 80027bc:	4240      	negs	r0, r0
 80027be:	183d      	adds	r5, r7, r0
 80027c0:	46a8      	mov	r8, r5
 80027c2:	4693      	mov	fp, r2
 80027c4:	4249      	negs	r1, r1
 80027c6:	468a      	mov	sl, r1
 80027c8:	44c3      	add	fp, r8
 80027ca:	429f      	cmp	r7, r3
 80027cc:	41bf      	sbcs	r7, r7
 80027ce:	4580      	cmp	r8, r0
 80027d0:	4180      	sbcs	r0, r0
 80027d2:	9b03      	ldr	r3, [sp, #12]
 80027d4:	44da      	add	sl, fp
 80027d6:	4698      	mov	r8, r3
 80027d8:	4653      	mov	r3, sl
 80027da:	4240      	negs	r0, r0
 80027dc:	427f      	negs	r7, r7
 80027de:	4307      	orrs	r7, r0
 80027e0:	0c24      	lsrs	r4, r4, #16
 80027e2:	4593      	cmp	fp, r2
 80027e4:	4192      	sbcs	r2, r2
 80027e6:	458a      	cmp	sl, r1
 80027e8:	4189      	sbcs	r1, r1
 80027ea:	193f      	adds	r7, r7, r4
 80027ec:	0ddc      	lsrs	r4, r3, #23
 80027ee:	9b04      	ldr	r3, [sp, #16]
 80027f0:	0275      	lsls	r5, r6, #9
 80027f2:	431d      	orrs	r5, r3
 80027f4:	1e68      	subs	r0, r5, #1
 80027f6:	4185      	sbcs	r5, r0
 80027f8:	4653      	mov	r3, sl
 80027fa:	4252      	negs	r2, r2
 80027fc:	4249      	negs	r1, r1
 80027fe:	430a      	orrs	r2, r1
 8002800:	18bf      	adds	r7, r7, r2
 8002802:	4447      	add	r7, r8
 8002804:	0df6      	lsrs	r6, r6, #23
 8002806:	027f      	lsls	r7, r7, #9
 8002808:	4335      	orrs	r5, r6
 800280a:	025a      	lsls	r2, r3, #9
 800280c:	433c      	orrs	r4, r7
 800280e:	4315      	orrs	r5, r2
 8002810:	01fb      	lsls	r3, r7, #7
 8002812:	d400      	bmi.n	8002816 <__aeabi_dmul+0x2fe>
 8002814:	e0c1      	b.n	800299a <__aeabi_dmul+0x482>
 8002816:	2101      	movs	r1, #1
 8002818:	086a      	lsrs	r2, r5, #1
 800281a:	400d      	ands	r5, r1
 800281c:	4315      	orrs	r5, r2
 800281e:	07e2      	lsls	r2, r4, #31
 8002820:	4315      	orrs	r5, r2
 8002822:	0864      	lsrs	r4, r4, #1
 8002824:	4926      	ldr	r1, [pc, #152]	; (80028c0 <__aeabi_dmul+0x3a8>)
 8002826:	4461      	add	r1, ip
 8002828:	2900      	cmp	r1, #0
 800282a:	dd56      	ble.n	80028da <__aeabi_dmul+0x3c2>
 800282c:	076b      	lsls	r3, r5, #29
 800282e:	d009      	beq.n	8002844 <__aeabi_dmul+0x32c>
 8002830:	220f      	movs	r2, #15
 8002832:	402a      	ands	r2, r5
 8002834:	2a04      	cmp	r2, #4
 8002836:	d005      	beq.n	8002844 <__aeabi_dmul+0x32c>
 8002838:	1d2a      	adds	r2, r5, #4
 800283a:	42aa      	cmp	r2, r5
 800283c:	41ad      	sbcs	r5, r5
 800283e:	426d      	negs	r5, r5
 8002840:	1964      	adds	r4, r4, r5
 8002842:	0015      	movs	r5, r2
 8002844:	01e3      	lsls	r3, r4, #7
 8002846:	d504      	bpl.n	8002852 <__aeabi_dmul+0x33a>
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <__aeabi_dmul+0x3ac>)
 800284c:	00c9      	lsls	r1, r1, #3
 800284e:	4014      	ands	r4, r2
 8002850:	4461      	add	r1, ip
 8002852:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <__aeabi_dmul+0x3b0>)
 8002854:	4291      	cmp	r1, r2
 8002856:	dd00      	ble.n	800285a <__aeabi_dmul+0x342>
 8002858:	e724      	b.n	80026a4 <__aeabi_dmul+0x18c>
 800285a:	0762      	lsls	r2, r4, #29
 800285c:	08ed      	lsrs	r5, r5, #3
 800285e:	0264      	lsls	r4, r4, #9
 8002860:	0549      	lsls	r1, r1, #21
 8002862:	4315      	orrs	r5, r2
 8002864:	0b24      	lsrs	r4, r4, #12
 8002866:	0d4a      	lsrs	r2, r1, #21
 8002868:	e6c6      	b.n	80025f8 <__aeabi_dmul+0xe0>
 800286a:	9701      	str	r7, [sp, #4]
 800286c:	e6b8      	b.n	80025e0 <__aeabi_dmul+0xc8>
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <__aeabi_dmul+0x398>)
 8002870:	2003      	movs	r0, #3
 8002872:	4694      	mov	ip, r2
 8002874:	4463      	add	r3, ip
 8002876:	464a      	mov	r2, r9
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2303      	movs	r3, #3
 800287c:	431a      	orrs	r2, r3
 800287e:	4691      	mov	r9, r2
 8002880:	4652      	mov	r2, sl
 8002882:	e68a      	b.n	800259a <__aeabi_dmul+0x82>
 8002884:	4649      	mov	r1, r9
 8002886:	2301      	movs	r3, #1
 8002888:	4319      	orrs	r1, r3
 800288a:	4689      	mov	r9, r1
 800288c:	2600      	movs	r6, #0
 800288e:	2001      	movs	r0, #1
 8002890:	e683      	b.n	800259a <__aeabi_dmul+0x82>
 8002892:	220c      	movs	r2, #12
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2303      	movs	r3, #3
 8002898:	0005      	movs	r5, r0
 800289a:	4691      	mov	r9, r2
 800289c:	469b      	mov	fp, r3
 800289e:	e65e      	b.n	800255e <__aeabi_dmul+0x46>
 80028a0:	2304      	movs	r3, #4
 80028a2:	4699      	mov	r9, r3
 80028a4:	2300      	movs	r3, #0
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	2400      	movs	r4, #0
 80028ac:	469b      	mov	fp, r3
 80028ae:	e656      	b.n	800255e <__aeabi_dmul+0x46>
 80028b0:	000007ff 	.word	0x000007ff
 80028b4:	fffffc01 	.word	0xfffffc01
 80028b8:	0801a610 	.word	0x0801a610
 80028bc:	fffffc0d 	.word	0xfffffc0d
 80028c0:	000003ff 	.word	0x000003ff
 80028c4:	feffffff 	.word	0xfeffffff
 80028c8:	000007fe 	.word	0x000007fe
 80028cc:	2300      	movs	r3, #0
 80028ce:	2480      	movs	r4, #128	; 0x80
 80028d0:	2500      	movs	r5, #0
 80028d2:	4a44      	ldr	r2, [pc, #272]	; (80029e4 <__aeabi_dmul+0x4cc>)
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	0324      	lsls	r4, r4, #12
 80028d8:	e68e      	b.n	80025f8 <__aeabi_dmul+0xe0>
 80028da:	2001      	movs	r0, #1
 80028dc:	1a40      	subs	r0, r0, r1
 80028de:	2838      	cmp	r0, #56	; 0x38
 80028e0:	dd00      	ble.n	80028e4 <__aeabi_dmul+0x3cc>
 80028e2:	e686      	b.n	80025f2 <__aeabi_dmul+0xda>
 80028e4:	281f      	cmp	r0, #31
 80028e6:	dd5b      	ble.n	80029a0 <__aeabi_dmul+0x488>
 80028e8:	221f      	movs	r2, #31
 80028ea:	0023      	movs	r3, r4
 80028ec:	4252      	negs	r2, r2
 80028ee:	1a51      	subs	r1, r2, r1
 80028f0:	40cb      	lsrs	r3, r1
 80028f2:	0019      	movs	r1, r3
 80028f4:	2820      	cmp	r0, #32
 80028f6:	d003      	beq.n	8002900 <__aeabi_dmul+0x3e8>
 80028f8:	4a3b      	ldr	r2, [pc, #236]	; (80029e8 <__aeabi_dmul+0x4d0>)
 80028fa:	4462      	add	r2, ip
 80028fc:	4094      	lsls	r4, r2
 80028fe:	4325      	orrs	r5, r4
 8002900:	1e6a      	subs	r2, r5, #1
 8002902:	4195      	sbcs	r5, r2
 8002904:	002a      	movs	r2, r5
 8002906:	430a      	orrs	r2, r1
 8002908:	2107      	movs	r1, #7
 800290a:	000d      	movs	r5, r1
 800290c:	2400      	movs	r4, #0
 800290e:	4015      	ands	r5, r2
 8002910:	4211      	tst	r1, r2
 8002912:	d05b      	beq.n	80029cc <__aeabi_dmul+0x4b4>
 8002914:	210f      	movs	r1, #15
 8002916:	2400      	movs	r4, #0
 8002918:	4011      	ands	r1, r2
 800291a:	2904      	cmp	r1, #4
 800291c:	d053      	beq.n	80029c6 <__aeabi_dmul+0x4ae>
 800291e:	1d11      	adds	r1, r2, #4
 8002920:	4291      	cmp	r1, r2
 8002922:	4192      	sbcs	r2, r2
 8002924:	4252      	negs	r2, r2
 8002926:	18a4      	adds	r4, r4, r2
 8002928:	000a      	movs	r2, r1
 800292a:	0223      	lsls	r3, r4, #8
 800292c:	d54b      	bpl.n	80029c6 <__aeabi_dmul+0x4ae>
 800292e:	2201      	movs	r2, #1
 8002930:	2400      	movs	r4, #0
 8002932:	2500      	movs	r5, #0
 8002934:	e660      	b.n	80025f8 <__aeabi_dmul+0xe0>
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	031b      	lsls	r3, r3, #12
 800293a:	421c      	tst	r4, r3
 800293c:	d009      	beq.n	8002952 <__aeabi_dmul+0x43a>
 800293e:	421e      	tst	r6, r3
 8002940:	d107      	bne.n	8002952 <__aeabi_dmul+0x43a>
 8002942:	4333      	orrs	r3, r6
 8002944:	031c      	lsls	r4, r3, #12
 8002946:	4643      	mov	r3, r8
 8002948:	0015      	movs	r5, r2
 800294a:	0b24      	lsrs	r4, r4, #12
 800294c:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <__aeabi_dmul+0x4cc>)
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	e652      	b.n	80025f8 <__aeabi_dmul+0xe0>
 8002952:	2280      	movs	r2, #128	; 0x80
 8002954:	0312      	lsls	r2, r2, #12
 8002956:	4314      	orrs	r4, r2
 8002958:	0324      	lsls	r4, r4, #12
 800295a:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <__aeabi_dmul+0x4cc>)
 800295c:	0b24      	lsrs	r4, r4, #12
 800295e:	9701      	str	r7, [sp, #4]
 8002960:	e64a      	b.n	80025f8 <__aeabi_dmul+0xe0>
 8002962:	f000 fd51 	bl	8003408 <__clzsi2>
 8002966:	0003      	movs	r3, r0
 8002968:	001a      	movs	r2, r3
 800296a:	3215      	adds	r2, #21
 800296c:	3020      	adds	r0, #32
 800296e:	2a1c      	cmp	r2, #28
 8002970:	dc00      	bgt.n	8002974 <__aeabi_dmul+0x45c>
 8002972:	e684      	b.n	800267e <__aeabi_dmul+0x166>
 8002974:	4656      	mov	r6, sl
 8002976:	3b08      	subs	r3, #8
 8002978:	2200      	movs	r2, #0
 800297a:	409e      	lsls	r6, r3
 800297c:	e689      	b.n	8002692 <__aeabi_dmul+0x17a>
 800297e:	f000 fd43 	bl	8003408 <__clzsi2>
 8002982:	0001      	movs	r1, r0
 8002984:	0002      	movs	r2, r0
 8002986:	3115      	adds	r1, #21
 8002988:	3220      	adds	r2, #32
 800298a:	291c      	cmp	r1, #28
 800298c:	dc00      	bgt.n	8002990 <__aeabi_dmul+0x478>
 800298e:	e64e      	b.n	800262e <__aeabi_dmul+0x116>
 8002990:	0034      	movs	r4, r6
 8002992:	3808      	subs	r0, #8
 8002994:	2500      	movs	r5, #0
 8002996:	4084      	lsls	r4, r0
 8002998:	e653      	b.n	8002642 <__aeabi_dmul+0x12a>
 800299a:	9b00      	ldr	r3, [sp, #0]
 800299c:	469c      	mov	ip, r3
 800299e:	e741      	b.n	8002824 <__aeabi_dmul+0x30c>
 80029a0:	4912      	ldr	r1, [pc, #72]	; (80029ec <__aeabi_dmul+0x4d4>)
 80029a2:	0022      	movs	r2, r4
 80029a4:	4461      	add	r1, ip
 80029a6:	002e      	movs	r6, r5
 80029a8:	408d      	lsls	r5, r1
 80029aa:	408a      	lsls	r2, r1
 80029ac:	40c6      	lsrs	r6, r0
 80029ae:	1e69      	subs	r1, r5, #1
 80029b0:	418d      	sbcs	r5, r1
 80029b2:	4332      	orrs	r2, r6
 80029b4:	432a      	orrs	r2, r5
 80029b6:	40c4      	lsrs	r4, r0
 80029b8:	0753      	lsls	r3, r2, #29
 80029ba:	d0b6      	beq.n	800292a <__aeabi_dmul+0x412>
 80029bc:	210f      	movs	r1, #15
 80029be:	4011      	ands	r1, r2
 80029c0:	2904      	cmp	r1, #4
 80029c2:	d1ac      	bne.n	800291e <__aeabi_dmul+0x406>
 80029c4:	e7b1      	b.n	800292a <__aeabi_dmul+0x412>
 80029c6:	0765      	lsls	r5, r4, #29
 80029c8:	0264      	lsls	r4, r4, #9
 80029ca:	0b24      	lsrs	r4, r4, #12
 80029cc:	08d2      	lsrs	r2, r2, #3
 80029ce:	4315      	orrs	r5, r2
 80029d0:	2200      	movs	r2, #0
 80029d2:	e611      	b.n	80025f8 <__aeabi_dmul+0xe0>
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	0312      	lsls	r2, r2, #12
 80029d8:	4314      	orrs	r4, r2
 80029da:	0324      	lsls	r4, r4, #12
 80029dc:	4a01      	ldr	r2, [pc, #4]	; (80029e4 <__aeabi_dmul+0x4cc>)
 80029de:	0b24      	lsrs	r4, r4, #12
 80029e0:	e60a      	b.n	80025f8 <__aeabi_dmul+0xe0>
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	000007ff 	.word	0x000007ff
 80029e8:	0000043e 	.word	0x0000043e
 80029ec:	0000041e 	.word	0x0000041e

080029f0 <__aeabi_dsub>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	4657      	mov	r7, sl
 80029f4:	464e      	mov	r6, r9
 80029f6:	4645      	mov	r5, r8
 80029f8:	46de      	mov	lr, fp
 80029fa:	0004      	movs	r4, r0
 80029fc:	b5e0      	push	{r5, r6, r7, lr}
 80029fe:	001f      	movs	r7, r3
 8002a00:	0010      	movs	r0, r2
 8002a02:	030b      	lsls	r3, r1, #12
 8002a04:	0f62      	lsrs	r2, r4, #29
 8002a06:	004e      	lsls	r6, r1, #1
 8002a08:	0fcd      	lsrs	r5, r1, #31
 8002a0a:	0a5b      	lsrs	r3, r3, #9
 8002a0c:	0339      	lsls	r1, r7, #12
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	0a49      	lsrs	r1, r1, #9
 8002a12:	00e2      	lsls	r2, r4, #3
 8002a14:	0f44      	lsrs	r4, r0, #29
 8002a16:	4321      	orrs	r1, r4
 8002a18:	4cc2      	ldr	r4, [pc, #776]	; (8002d24 <__aeabi_dsub+0x334>)
 8002a1a:	4691      	mov	r9, r2
 8002a1c:	4692      	mov	sl, r2
 8002a1e:	00c0      	lsls	r0, r0, #3
 8002a20:	007a      	lsls	r2, r7, #1
 8002a22:	4680      	mov	r8, r0
 8002a24:	0d76      	lsrs	r6, r6, #21
 8002a26:	0d52      	lsrs	r2, r2, #21
 8002a28:	0fff      	lsrs	r7, r7, #31
 8002a2a:	42a2      	cmp	r2, r4
 8002a2c:	d100      	bne.n	8002a30 <__aeabi_dsub+0x40>
 8002a2e:	e0b4      	b.n	8002b9a <__aeabi_dsub+0x1aa>
 8002a30:	2401      	movs	r4, #1
 8002a32:	4067      	eors	r7, r4
 8002a34:	46bb      	mov	fp, r7
 8002a36:	42bd      	cmp	r5, r7
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x4c>
 8002a3a:	e088      	b.n	8002b4e <__aeabi_dsub+0x15e>
 8002a3c:	1ab4      	subs	r4, r6, r2
 8002a3e:	46a4      	mov	ip, r4
 8002a40:	2c00      	cmp	r4, #0
 8002a42:	dc00      	bgt.n	8002a46 <__aeabi_dsub+0x56>
 8002a44:	e0b2      	b.n	8002bac <__aeabi_dsub+0x1bc>
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d100      	bne.n	8002a4c <__aeabi_dsub+0x5c>
 8002a4a:	e0c5      	b.n	8002bd8 <__aeabi_dsub+0x1e8>
 8002a4c:	4ab5      	ldr	r2, [pc, #724]	; (8002d24 <__aeabi_dsub+0x334>)
 8002a4e:	4296      	cmp	r6, r2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dsub+0x64>
 8002a52:	e28b      	b.n	8002f6c <__aeabi_dsub+0x57c>
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	0412      	lsls	r2, r2, #16
 8002a58:	4311      	orrs	r1, r2
 8002a5a:	4662      	mov	r2, ip
 8002a5c:	2a38      	cmp	r2, #56	; 0x38
 8002a5e:	dd00      	ble.n	8002a62 <__aeabi_dsub+0x72>
 8002a60:	e1a1      	b.n	8002da6 <__aeabi_dsub+0x3b6>
 8002a62:	2a1f      	cmp	r2, #31
 8002a64:	dd00      	ble.n	8002a68 <__aeabi_dsub+0x78>
 8002a66:	e216      	b.n	8002e96 <__aeabi_dsub+0x4a6>
 8002a68:	2720      	movs	r7, #32
 8002a6a:	000c      	movs	r4, r1
 8002a6c:	1abf      	subs	r7, r7, r2
 8002a6e:	40bc      	lsls	r4, r7
 8002a70:	0002      	movs	r2, r0
 8002a72:	46a0      	mov	r8, r4
 8002a74:	4664      	mov	r4, ip
 8002a76:	40b8      	lsls	r0, r7
 8002a78:	40e2      	lsrs	r2, r4
 8002a7a:	4644      	mov	r4, r8
 8002a7c:	4314      	orrs	r4, r2
 8002a7e:	0002      	movs	r2, r0
 8002a80:	1e50      	subs	r0, r2, #1
 8002a82:	4182      	sbcs	r2, r0
 8002a84:	4660      	mov	r0, ip
 8002a86:	40c1      	lsrs	r1, r0
 8002a88:	4322      	orrs	r2, r4
 8002a8a:	1a5b      	subs	r3, r3, r1
 8002a8c:	4649      	mov	r1, r9
 8002a8e:	1a8c      	subs	r4, r1, r2
 8002a90:	45a1      	cmp	r9, r4
 8002a92:	4192      	sbcs	r2, r2
 8002a94:	4252      	negs	r2, r2
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	4698      	mov	r8, r3
 8002a9a:	4643      	mov	r3, r8
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	d400      	bmi.n	8002aa2 <__aeabi_dsub+0xb2>
 8002aa0:	e117      	b.n	8002cd2 <__aeabi_dsub+0x2e2>
 8002aa2:	4643      	mov	r3, r8
 8002aa4:	025b      	lsls	r3, r3, #9
 8002aa6:	0a5b      	lsrs	r3, r3, #9
 8002aa8:	4698      	mov	r8, r3
 8002aaa:	4643      	mov	r3, r8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d100      	bne.n	8002ab2 <__aeabi_dsub+0xc2>
 8002ab0:	e16c      	b.n	8002d8c <__aeabi_dsub+0x39c>
 8002ab2:	4640      	mov	r0, r8
 8002ab4:	f000 fca8 	bl	8003408 <__clzsi2>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	3a08      	subs	r2, #8
 8002abc:	2120      	movs	r1, #32
 8002abe:	0020      	movs	r0, r4
 8002ac0:	4643      	mov	r3, r8
 8002ac2:	1a89      	subs	r1, r1, r2
 8002ac4:	4093      	lsls	r3, r2
 8002ac6:	40c8      	lsrs	r0, r1
 8002ac8:	4094      	lsls	r4, r2
 8002aca:	4303      	orrs	r3, r0
 8002acc:	4296      	cmp	r6, r2
 8002ace:	dd00      	ble.n	8002ad2 <__aeabi_dsub+0xe2>
 8002ad0:	e157      	b.n	8002d82 <__aeabi_dsub+0x392>
 8002ad2:	1b96      	subs	r6, r2, r6
 8002ad4:	1c71      	adds	r1, r6, #1
 8002ad6:	291f      	cmp	r1, #31
 8002ad8:	dd00      	ble.n	8002adc <__aeabi_dsub+0xec>
 8002ada:	e1cb      	b.n	8002e74 <__aeabi_dsub+0x484>
 8002adc:	2220      	movs	r2, #32
 8002ade:	0018      	movs	r0, r3
 8002ae0:	0026      	movs	r6, r4
 8002ae2:	1a52      	subs	r2, r2, r1
 8002ae4:	4094      	lsls	r4, r2
 8002ae6:	4090      	lsls	r0, r2
 8002ae8:	40ce      	lsrs	r6, r1
 8002aea:	40cb      	lsrs	r3, r1
 8002aec:	1e62      	subs	r2, r4, #1
 8002aee:	4194      	sbcs	r4, r2
 8002af0:	4330      	orrs	r0, r6
 8002af2:	4698      	mov	r8, r3
 8002af4:	2600      	movs	r6, #0
 8002af6:	4304      	orrs	r4, r0
 8002af8:	0763      	lsls	r3, r4, #29
 8002afa:	d009      	beq.n	8002b10 <__aeabi_dsub+0x120>
 8002afc:	230f      	movs	r3, #15
 8002afe:	4023      	ands	r3, r4
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d005      	beq.n	8002b10 <__aeabi_dsub+0x120>
 8002b04:	1d23      	adds	r3, r4, #4
 8002b06:	42a3      	cmp	r3, r4
 8002b08:	41a4      	sbcs	r4, r4
 8002b0a:	4264      	negs	r4, r4
 8002b0c:	44a0      	add	r8, r4
 8002b0e:	001c      	movs	r4, r3
 8002b10:	4643      	mov	r3, r8
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	d400      	bmi.n	8002b18 <__aeabi_dsub+0x128>
 8002b16:	e0df      	b.n	8002cd8 <__aeabi_dsub+0x2e8>
 8002b18:	4b82      	ldr	r3, [pc, #520]	; (8002d24 <__aeabi_dsub+0x334>)
 8002b1a:	3601      	adds	r6, #1
 8002b1c:	429e      	cmp	r6, r3
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x132>
 8002b20:	e0fb      	b.n	8002d1a <__aeabi_dsub+0x32a>
 8002b22:	4642      	mov	r2, r8
 8002b24:	4b80      	ldr	r3, [pc, #512]	; (8002d28 <__aeabi_dsub+0x338>)
 8002b26:	08e4      	lsrs	r4, r4, #3
 8002b28:	401a      	ands	r2, r3
 8002b2a:	0013      	movs	r3, r2
 8002b2c:	0571      	lsls	r1, r6, #21
 8002b2e:	0752      	lsls	r2, r2, #29
 8002b30:	025b      	lsls	r3, r3, #9
 8002b32:	4322      	orrs	r2, r4
 8002b34:	0b1b      	lsrs	r3, r3, #12
 8002b36:	0d49      	lsrs	r1, r1, #21
 8002b38:	0509      	lsls	r1, r1, #20
 8002b3a:	07ed      	lsls	r5, r5, #31
 8002b3c:	4319      	orrs	r1, r3
 8002b3e:	4329      	orrs	r1, r5
 8002b40:	0010      	movs	r0, r2
 8002b42:	bcf0      	pop	{r4, r5, r6, r7}
 8002b44:	46bb      	mov	fp, r7
 8002b46:	46b2      	mov	sl, r6
 8002b48:	46a9      	mov	r9, r5
 8002b4a:	46a0      	mov	r8, r4
 8002b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b4e:	1ab4      	subs	r4, r6, r2
 8002b50:	46a4      	mov	ip, r4
 8002b52:	2c00      	cmp	r4, #0
 8002b54:	dd58      	ble.n	8002c08 <__aeabi_dsub+0x218>
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	d100      	bne.n	8002b5c <__aeabi_dsub+0x16c>
 8002b5a:	e09e      	b.n	8002c9a <__aeabi_dsub+0x2aa>
 8002b5c:	4a71      	ldr	r2, [pc, #452]	; (8002d24 <__aeabi_dsub+0x334>)
 8002b5e:	4296      	cmp	r6, r2
 8002b60:	d100      	bne.n	8002b64 <__aeabi_dsub+0x174>
 8002b62:	e13b      	b.n	8002ddc <__aeabi_dsub+0x3ec>
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	0412      	lsls	r2, r2, #16
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	4662      	mov	r2, ip
 8002b6c:	2a38      	cmp	r2, #56	; 0x38
 8002b6e:	dd00      	ble.n	8002b72 <__aeabi_dsub+0x182>
 8002b70:	e0c1      	b.n	8002cf6 <__aeabi_dsub+0x306>
 8002b72:	2a1f      	cmp	r2, #31
 8002b74:	dc00      	bgt.n	8002b78 <__aeabi_dsub+0x188>
 8002b76:	e1bb      	b.n	8002ef0 <__aeabi_dsub+0x500>
 8002b78:	000c      	movs	r4, r1
 8002b7a:	3a20      	subs	r2, #32
 8002b7c:	40d4      	lsrs	r4, r2
 8002b7e:	0022      	movs	r2, r4
 8002b80:	4664      	mov	r4, ip
 8002b82:	2c20      	cmp	r4, #32
 8002b84:	d004      	beq.n	8002b90 <__aeabi_dsub+0x1a0>
 8002b86:	2740      	movs	r7, #64	; 0x40
 8002b88:	1b3f      	subs	r7, r7, r4
 8002b8a:	40b9      	lsls	r1, r7
 8002b8c:	4308      	orrs	r0, r1
 8002b8e:	4680      	mov	r8, r0
 8002b90:	4644      	mov	r4, r8
 8002b92:	1e61      	subs	r1, r4, #1
 8002b94:	418c      	sbcs	r4, r1
 8002b96:	4314      	orrs	r4, r2
 8002b98:	e0b1      	b.n	8002cfe <__aeabi_dsub+0x30e>
 8002b9a:	000c      	movs	r4, r1
 8002b9c:	4304      	orrs	r4, r0
 8002b9e:	d02a      	beq.n	8002bf6 <__aeabi_dsub+0x206>
 8002ba0:	46bb      	mov	fp, r7
 8002ba2:	42bd      	cmp	r5, r7
 8002ba4:	d02d      	beq.n	8002c02 <__aeabi_dsub+0x212>
 8002ba6:	4c61      	ldr	r4, [pc, #388]	; (8002d2c <__aeabi_dsub+0x33c>)
 8002ba8:	46a4      	mov	ip, r4
 8002baa:	44b4      	add	ip, r6
 8002bac:	4664      	mov	r4, ip
 8002bae:	2c00      	cmp	r4, #0
 8002bb0:	d05c      	beq.n	8002c6c <__aeabi_dsub+0x27c>
 8002bb2:	1b94      	subs	r4, r2, r6
 8002bb4:	46a4      	mov	ip, r4
 8002bb6:	2e00      	cmp	r6, #0
 8002bb8:	d000      	beq.n	8002bbc <__aeabi_dsub+0x1cc>
 8002bba:	e115      	b.n	8002de8 <__aeabi_dsub+0x3f8>
 8002bbc:	464d      	mov	r5, r9
 8002bbe:	431d      	orrs	r5, r3
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x1d4>
 8002bc2:	e1c3      	b.n	8002f4c <__aeabi_dsub+0x55c>
 8002bc4:	1e65      	subs	r5, r4, #1
 8002bc6:	2c01      	cmp	r4, #1
 8002bc8:	d100      	bne.n	8002bcc <__aeabi_dsub+0x1dc>
 8002bca:	e20c      	b.n	8002fe6 <__aeabi_dsub+0x5f6>
 8002bcc:	4e55      	ldr	r6, [pc, #340]	; (8002d24 <__aeabi_dsub+0x334>)
 8002bce:	42b4      	cmp	r4, r6
 8002bd0:	d100      	bne.n	8002bd4 <__aeabi_dsub+0x1e4>
 8002bd2:	e1f8      	b.n	8002fc6 <__aeabi_dsub+0x5d6>
 8002bd4:	46ac      	mov	ip, r5
 8002bd6:	e10e      	b.n	8002df6 <__aeabi_dsub+0x406>
 8002bd8:	000a      	movs	r2, r1
 8002bda:	4302      	orrs	r2, r0
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0x1f0>
 8002bde:	e136      	b.n	8002e4e <__aeabi_dsub+0x45e>
 8002be0:	0022      	movs	r2, r4
 8002be2:	3a01      	subs	r2, #1
 8002be4:	2c01      	cmp	r4, #1
 8002be6:	d100      	bne.n	8002bea <__aeabi_dsub+0x1fa>
 8002be8:	e1c6      	b.n	8002f78 <__aeabi_dsub+0x588>
 8002bea:	4c4e      	ldr	r4, [pc, #312]	; (8002d24 <__aeabi_dsub+0x334>)
 8002bec:	45a4      	cmp	ip, r4
 8002bee:	d100      	bne.n	8002bf2 <__aeabi_dsub+0x202>
 8002bf0:	e0f4      	b.n	8002ddc <__aeabi_dsub+0x3ec>
 8002bf2:	4694      	mov	ip, r2
 8002bf4:	e731      	b.n	8002a5a <__aeabi_dsub+0x6a>
 8002bf6:	2401      	movs	r4, #1
 8002bf8:	4067      	eors	r7, r4
 8002bfa:	46bb      	mov	fp, r7
 8002bfc:	42bd      	cmp	r5, r7
 8002bfe:	d000      	beq.n	8002c02 <__aeabi_dsub+0x212>
 8002c00:	e71c      	b.n	8002a3c <__aeabi_dsub+0x4c>
 8002c02:	4c4a      	ldr	r4, [pc, #296]	; (8002d2c <__aeabi_dsub+0x33c>)
 8002c04:	46a4      	mov	ip, r4
 8002c06:	44b4      	add	ip, r6
 8002c08:	4664      	mov	r4, ip
 8002c0a:	2c00      	cmp	r4, #0
 8002c0c:	d100      	bne.n	8002c10 <__aeabi_dsub+0x220>
 8002c0e:	e0cf      	b.n	8002db0 <__aeabi_dsub+0x3c0>
 8002c10:	1b94      	subs	r4, r2, r6
 8002c12:	46a4      	mov	ip, r4
 8002c14:	2e00      	cmp	r6, #0
 8002c16:	d100      	bne.n	8002c1a <__aeabi_dsub+0x22a>
 8002c18:	e15c      	b.n	8002ed4 <__aeabi_dsub+0x4e4>
 8002c1a:	4e42      	ldr	r6, [pc, #264]	; (8002d24 <__aeabi_dsub+0x334>)
 8002c1c:	42b2      	cmp	r2, r6
 8002c1e:	d100      	bne.n	8002c22 <__aeabi_dsub+0x232>
 8002c20:	e1ec      	b.n	8002ffc <__aeabi_dsub+0x60c>
 8002c22:	2680      	movs	r6, #128	; 0x80
 8002c24:	0436      	lsls	r6, r6, #16
 8002c26:	4333      	orrs	r3, r6
 8002c28:	4664      	mov	r4, ip
 8002c2a:	2c38      	cmp	r4, #56	; 0x38
 8002c2c:	dd00      	ble.n	8002c30 <__aeabi_dsub+0x240>
 8002c2e:	e1b3      	b.n	8002f98 <__aeabi_dsub+0x5a8>
 8002c30:	2c1f      	cmp	r4, #31
 8002c32:	dd00      	ble.n	8002c36 <__aeabi_dsub+0x246>
 8002c34:	e238      	b.n	80030a8 <__aeabi_dsub+0x6b8>
 8002c36:	2620      	movs	r6, #32
 8002c38:	1b36      	subs	r6, r6, r4
 8002c3a:	001c      	movs	r4, r3
 8002c3c:	40b4      	lsls	r4, r6
 8002c3e:	464f      	mov	r7, r9
 8002c40:	46a0      	mov	r8, r4
 8002c42:	4664      	mov	r4, ip
 8002c44:	40e7      	lsrs	r7, r4
 8002c46:	4644      	mov	r4, r8
 8002c48:	433c      	orrs	r4, r7
 8002c4a:	464f      	mov	r7, r9
 8002c4c:	40b7      	lsls	r7, r6
 8002c4e:	003e      	movs	r6, r7
 8002c50:	1e77      	subs	r7, r6, #1
 8002c52:	41be      	sbcs	r6, r7
 8002c54:	4334      	orrs	r4, r6
 8002c56:	4666      	mov	r6, ip
 8002c58:	40f3      	lsrs	r3, r6
 8002c5a:	18c9      	adds	r1, r1, r3
 8002c5c:	1824      	adds	r4, r4, r0
 8002c5e:	4284      	cmp	r4, r0
 8002c60:	419b      	sbcs	r3, r3
 8002c62:	425b      	negs	r3, r3
 8002c64:	4698      	mov	r8, r3
 8002c66:	0016      	movs	r6, r2
 8002c68:	4488      	add	r8, r1
 8002c6a:	e04e      	b.n	8002d0a <__aeabi_dsub+0x31a>
 8002c6c:	4a30      	ldr	r2, [pc, #192]	; (8002d30 <__aeabi_dsub+0x340>)
 8002c6e:	1c74      	adds	r4, r6, #1
 8002c70:	4214      	tst	r4, r2
 8002c72:	d000      	beq.n	8002c76 <__aeabi_dsub+0x286>
 8002c74:	e0d6      	b.n	8002e24 <__aeabi_dsub+0x434>
 8002c76:	464a      	mov	r2, r9
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	2e00      	cmp	r6, #0
 8002c7c:	d000      	beq.n	8002c80 <__aeabi_dsub+0x290>
 8002c7e:	e15b      	b.n	8002f38 <__aeabi_dsub+0x548>
 8002c80:	2a00      	cmp	r2, #0
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x296>
 8002c84:	e1a5      	b.n	8002fd2 <__aeabi_dsub+0x5e2>
 8002c86:	000a      	movs	r2, r1
 8002c88:	4302      	orrs	r2, r0
 8002c8a:	d000      	beq.n	8002c8e <__aeabi_dsub+0x29e>
 8002c8c:	e1bb      	b.n	8003006 <__aeabi_dsub+0x616>
 8002c8e:	464a      	mov	r2, r9
 8002c90:	0759      	lsls	r1, r3, #29
 8002c92:	08d2      	lsrs	r2, r2, #3
 8002c94:	430a      	orrs	r2, r1
 8002c96:	08db      	lsrs	r3, r3, #3
 8002c98:	e027      	b.n	8002cea <__aeabi_dsub+0x2fa>
 8002c9a:	000a      	movs	r2, r1
 8002c9c:	4302      	orrs	r2, r0
 8002c9e:	d100      	bne.n	8002ca2 <__aeabi_dsub+0x2b2>
 8002ca0:	e174      	b.n	8002f8c <__aeabi_dsub+0x59c>
 8002ca2:	0022      	movs	r2, r4
 8002ca4:	3a01      	subs	r2, #1
 8002ca6:	2c01      	cmp	r4, #1
 8002ca8:	d005      	beq.n	8002cb6 <__aeabi_dsub+0x2c6>
 8002caa:	4c1e      	ldr	r4, [pc, #120]	; (8002d24 <__aeabi_dsub+0x334>)
 8002cac:	45a4      	cmp	ip, r4
 8002cae:	d100      	bne.n	8002cb2 <__aeabi_dsub+0x2c2>
 8002cb0:	e094      	b.n	8002ddc <__aeabi_dsub+0x3ec>
 8002cb2:	4694      	mov	ip, r2
 8002cb4:	e759      	b.n	8002b6a <__aeabi_dsub+0x17a>
 8002cb6:	4448      	add	r0, r9
 8002cb8:	4548      	cmp	r0, r9
 8002cba:	4192      	sbcs	r2, r2
 8002cbc:	185b      	adds	r3, r3, r1
 8002cbe:	4698      	mov	r8, r3
 8002cc0:	0004      	movs	r4, r0
 8002cc2:	4252      	negs	r2, r2
 8002cc4:	4490      	add	r8, r2
 8002cc6:	4643      	mov	r3, r8
 8002cc8:	2602      	movs	r6, #2
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	d500      	bpl.n	8002cd0 <__aeabi_dsub+0x2e0>
 8002cce:	e0c4      	b.n	8002e5a <__aeabi_dsub+0x46a>
 8002cd0:	3e01      	subs	r6, #1
 8002cd2:	0763      	lsls	r3, r4, #29
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x2e8>
 8002cd6:	e711      	b.n	8002afc <__aeabi_dsub+0x10c>
 8002cd8:	4643      	mov	r3, r8
 8002cda:	46b4      	mov	ip, r6
 8002cdc:	0759      	lsls	r1, r3, #29
 8002cde:	08e2      	lsrs	r2, r4, #3
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	08db      	lsrs	r3, r3, #3
 8002ce4:	490f      	ldr	r1, [pc, #60]	; (8002d24 <__aeabi_dsub+0x334>)
 8002ce6:	458c      	cmp	ip, r1
 8002ce8:	d040      	beq.n	8002d6c <__aeabi_dsub+0x37c>
 8002cea:	4661      	mov	r1, ip
 8002cec:	031b      	lsls	r3, r3, #12
 8002cee:	0549      	lsls	r1, r1, #21
 8002cf0:	0b1b      	lsrs	r3, r3, #12
 8002cf2:	0d49      	lsrs	r1, r1, #21
 8002cf4:	e720      	b.n	8002b38 <__aeabi_dsub+0x148>
 8002cf6:	4301      	orrs	r1, r0
 8002cf8:	000c      	movs	r4, r1
 8002cfa:	1e61      	subs	r1, r4, #1
 8002cfc:	418c      	sbcs	r4, r1
 8002cfe:	444c      	add	r4, r9
 8002d00:	454c      	cmp	r4, r9
 8002d02:	4192      	sbcs	r2, r2
 8002d04:	4252      	negs	r2, r2
 8002d06:	4690      	mov	r8, r2
 8002d08:	4498      	add	r8, r3
 8002d0a:	4643      	mov	r3, r8
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	d5e0      	bpl.n	8002cd2 <__aeabi_dsub+0x2e2>
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <__aeabi_dsub+0x334>)
 8002d12:	3601      	adds	r6, #1
 8002d14:	429e      	cmp	r6, r3
 8002d16:	d000      	beq.n	8002d1a <__aeabi_dsub+0x32a>
 8002d18:	e09f      	b.n	8002e5a <__aeabi_dsub+0x46a>
 8002d1a:	0031      	movs	r1, r6
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2200      	movs	r2, #0
 8002d20:	e70a      	b.n	8002b38 <__aeabi_dsub+0x148>
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	000007ff 	.word	0x000007ff
 8002d28:	ff7fffff 	.word	0xff7fffff
 8002d2c:	fffff801 	.word	0xfffff801
 8002d30:	000007fe 	.word	0x000007fe
 8002d34:	2a00      	cmp	r2, #0
 8002d36:	d100      	bne.n	8002d3a <__aeabi_dsub+0x34a>
 8002d38:	e160      	b.n	8002ffc <__aeabi_dsub+0x60c>
 8002d3a:	000a      	movs	r2, r1
 8002d3c:	4302      	orrs	r2, r0
 8002d3e:	d04d      	beq.n	8002ddc <__aeabi_dsub+0x3ec>
 8002d40:	464a      	mov	r2, r9
 8002d42:	075c      	lsls	r4, r3, #29
 8002d44:	08d2      	lsrs	r2, r2, #3
 8002d46:	4322      	orrs	r2, r4
 8002d48:	2480      	movs	r4, #128	; 0x80
 8002d4a:	08db      	lsrs	r3, r3, #3
 8002d4c:	0324      	lsls	r4, r4, #12
 8002d4e:	4223      	tst	r3, r4
 8002d50:	d007      	beq.n	8002d62 <__aeabi_dsub+0x372>
 8002d52:	08ce      	lsrs	r6, r1, #3
 8002d54:	4226      	tst	r6, r4
 8002d56:	d104      	bne.n	8002d62 <__aeabi_dsub+0x372>
 8002d58:	465d      	mov	r5, fp
 8002d5a:	0033      	movs	r3, r6
 8002d5c:	08c2      	lsrs	r2, r0, #3
 8002d5e:	0749      	lsls	r1, r1, #29
 8002d60:	430a      	orrs	r2, r1
 8002d62:	0f51      	lsrs	r1, r2, #29
 8002d64:	00d2      	lsls	r2, r2, #3
 8002d66:	08d2      	lsrs	r2, r2, #3
 8002d68:	0749      	lsls	r1, r1, #29
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	0011      	movs	r1, r2
 8002d6e:	4319      	orrs	r1, r3
 8002d70:	d100      	bne.n	8002d74 <__aeabi_dsub+0x384>
 8002d72:	e1c8      	b.n	8003106 <__aeabi_dsub+0x716>
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	0309      	lsls	r1, r1, #12
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	031b      	lsls	r3, r3, #12
 8002d7c:	49d5      	ldr	r1, [pc, #852]	; (80030d4 <__aeabi_dsub+0x6e4>)
 8002d7e:	0b1b      	lsrs	r3, r3, #12
 8002d80:	e6da      	b.n	8002b38 <__aeabi_dsub+0x148>
 8002d82:	49d5      	ldr	r1, [pc, #852]	; (80030d8 <__aeabi_dsub+0x6e8>)
 8002d84:	1ab6      	subs	r6, r6, r2
 8002d86:	400b      	ands	r3, r1
 8002d88:	4698      	mov	r8, r3
 8002d8a:	e6b5      	b.n	8002af8 <__aeabi_dsub+0x108>
 8002d8c:	0020      	movs	r0, r4
 8002d8e:	f000 fb3b 	bl	8003408 <__clzsi2>
 8002d92:	0002      	movs	r2, r0
 8002d94:	3218      	adds	r2, #24
 8002d96:	2a1f      	cmp	r2, #31
 8002d98:	dc00      	bgt.n	8002d9c <__aeabi_dsub+0x3ac>
 8002d9a:	e68f      	b.n	8002abc <__aeabi_dsub+0xcc>
 8002d9c:	0023      	movs	r3, r4
 8002d9e:	3808      	subs	r0, #8
 8002da0:	4083      	lsls	r3, r0
 8002da2:	2400      	movs	r4, #0
 8002da4:	e692      	b.n	8002acc <__aeabi_dsub+0xdc>
 8002da6:	4308      	orrs	r0, r1
 8002da8:	0002      	movs	r2, r0
 8002daa:	1e50      	subs	r0, r2, #1
 8002dac:	4182      	sbcs	r2, r0
 8002dae:	e66d      	b.n	8002a8c <__aeabi_dsub+0x9c>
 8002db0:	4cca      	ldr	r4, [pc, #808]	; (80030dc <__aeabi_dsub+0x6ec>)
 8002db2:	1c72      	adds	r2, r6, #1
 8002db4:	4222      	tst	r2, r4
 8002db6:	d000      	beq.n	8002dba <__aeabi_dsub+0x3ca>
 8002db8:	e0ad      	b.n	8002f16 <__aeabi_dsub+0x526>
 8002dba:	464a      	mov	r2, r9
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	2e00      	cmp	r6, #0
 8002dc0:	d1b8      	bne.n	8002d34 <__aeabi_dsub+0x344>
 8002dc2:	2a00      	cmp	r2, #0
 8002dc4:	d100      	bne.n	8002dc8 <__aeabi_dsub+0x3d8>
 8002dc6:	e158      	b.n	800307a <__aeabi_dsub+0x68a>
 8002dc8:	000a      	movs	r2, r1
 8002dca:	4302      	orrs	r2, r0
 8002dcc:	d000      	beq.n	8002dd0 <__aeabi_dsub+0x3e0>
 8002dce:	e159      	b.n	8003084 <__aeabi_dsub+0x694>
 8002dd0:	464a      	mov	r2, r9
 8002dd2:	0759      	lsls	r1, r3, #29
 8002dd4:	08d2      	lsrs	r2, r2, #3
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	08db      	lsrs	r3, r3, #3
 8002dda:	e786      	b.n	8002cea <__aeabi_dsub+0x2fa>
 8002ddc:	464a      	mov	r2, r9
 8002dde:	0759      	lsls	r1, r3, #29
 8002de0:	08d2      	lsrs	r2, r2, #3
 8002de2:	430a      	orrs	r2, r1
 8002de4:	08db      	lsrs	r3, r3, #3
 8002de6:	e7c1      	b.n	8002d6c <__aeabi_dsub+0x37c>
 8002de8:	4dba      	ldr	r5, [pc, #744]	; (80030d4 <__aeabi_dsub+0x6e4>)
 8002dea:	42aa      	cmp	r2, r5
 8002dec:	d100      	bne.n	8002df0 <__aeabi_dsub+0x400>
 8002dee:	e11e      	b.n	800302e <__aeabi_dsub+0x63e>
 8002df0:	2580      	movs	r5, #128	; 0x80
 8002df2:	042d      	lsls	r5, r5, #16
 8002df4:	432b      	orrs	r3, r5
 8002df6:	4664      	mov	r4, ip
 8002df8:	2c38      	cmp	r4, #56	; 0x38
 8002dfa:	dc5d      	bgt.n	8002eb8 <__aeabi_dsub+0x4c8>
 8002dfc:	2c1f      	cmp	r4, #31
 8002dfe:	dd00      	ble.n	8002e02 <__aeabi_dsub+0x412>
 8002e00:	e0d0      	b.n	8002fa4 <__aeabi_dsub+0x5b4>
 8002e02:	2520      	movs	r5, #32
 8002e04:	4667      	mov	r7, ip
 8002e06:	1b2d      	subs	r5, r5, r4
 8002e08:	464e      	mov	r6, r9
 8002e0a:	001c      	movs	r4, r3
 8002e0c:	40fe      	lsrs	r6, r7
 8002e0e:	40ac      	lsls	r4, r5
 8002e10:	4334      	orrs	r4, r6
 8002e12:	464e      	mov	r6, r9
 8002e14:	40ae      	lsls	r6, r5
 8002e16:	0035      	movs	r5, r6
 8002e18:	40fb      	lsrs	r3, r7
 8002e1a:	1e6e      	subs	r6, r5, #1
 8002e1c:	41b5      	sbcs	r5, r6
 8002e1e:	1ac9      	subs	r1, r1, r3
 8002e20:	432c      	orrs	r4, r5
 8002e22:	e04e      	b.n	8002ec2 <__aeabi_dsub+0x4d2>
 8002e24:	464a      	mov	r2, r9
 8002e26:	1a14      	subs	r4, r2, r0
 8002e28:	45a1      	cmp	r9, r4
 8002e2a:	4192      	sbcs	r2, r2
 8002e2c:	4252      	negs	r2, r2
 8002e2e:	4690      	mov	r8, r2
 8002e30:	1a5f      	subs	r7, r3, r1
 8002e32:	003a      	movs	r2, r7
 8002e34:	4647      	mov	r7, r8
 8002e36:	1bd2      	subs	r2, r2, r7
 8002e38:	4690      	mov	r8, r2
 8002e3a:	0212      	lsls	r2, r2, #8
 8002e3c:	d500      	bpl.n	8002e40 <__aeabi_dsub+0x450>
 8002e3e:	e08b      	b.n	8002f58 <__aeabi_dsub+0x568>
 8002e40:	4642      	mov	r2, r8
 8002e42:	4322      	orrs	r2, r4
 8002e44:	d000      	beq.n	8002e48 <__aeabi_dsub+0x458>
 8002e46:	e630      	b.n	8002aaa <__aeabi_dsub+0xba>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2500      	movs	r5, #0
 8002e4c:	e74d      	b.n	8002cea <__aeabi_dsub+0x2fa>
 8002e4e:	464a      	mov	r2, r9
 8002e50:	0759      	lsls	r1, r3, #29
 8002e52:	08d2      	lsrs	r2, r2, #3
 8002e54:	430a      	orrs	r2, r1
 8002e56:	08db      	lsrs	r3, r3, #3
 8002e58:	e744      	b.n	8002ce4 <__aeabi_dsub+0x2f4>
 8002e5a:	4642      	mov	r2, r8
 8002e5c:	4b9e      	ldr	r3, [pc, #632]	; (80030d8 <__aeabi_dsub+0x6e8>)
 8002e5e:	0861      	lsrs	r1, r4, #1
 8002e60:	401a      	ands	r2, r3
 8002e62:	0013      	movs	r3, r2
 8002e64:	2201      	movs	r2, #1
 8002e66:	4014      	ands	r4, r2
 8002e68:	430c      	orrs	r4, r1
 8002e6a:	07da      	lsls	r2, r3, #31
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	4698      	mov	r8, r3
 8002e70:	4314      	orrs	r4, r2
 8002e72:	e641      	b.n	8002af8 <__aeabi_dsub+0x108>
 8002e74:	001a      	movs	r2, r3
 8002e76:	3e1f      	subs	r6, #31
 8002e78:	40f2      	lsrs	r2, r6
 8002e7a:	0016      	movs	r6, r2
 8002e7c:	2920      	cmp	r1, #32
 8002e7e:	d003      	beq.n	8002e88 <__aeabi_dsub+0x498>
 8002e80:	2240      	movs	r2, #64	; 0x40
 8002e82:	1a51      	subs	r1, r2, r1
 8002e84:	408b      	lsls	r3, r1
 8002e86:	431c      	orrs	r4, r3
 8002e88:	1e62      	subs	r2, r4, #1
 8002e8a:	4194      	sbcs	r4, r2
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	4334      	orrs	r4, r6
 8002e90:	4698      	mov	r8, r3
 8002e92:	2600      	movs	r6, #0
 8002e94:	e71d      	b.n	8002cd2 <__aeabi_dsub+0x2e2>
 8002e96:	000c      	movs	r4, r1
 8002e98:	3a20      	subs	r2, #32
 8002e9a:	40d4      	lsrs	r4, r2
 8002e9c:	0022      	movs	r2, r4
 8002e9e:	4664      	mov	r4, ip
 8002ea0:	2c20      	cmp	r4, #32
 8002ea2:	d004      	beq.n	8002eae <__aeabi_dsub+0x4be>
 8002ea4:	2740      	movs	r7, #64	; 0x40
 8002ea6:	1b3f      	subs	r7, r7, r4
 8002ea8:	40b9      	lsls	r1, r7
 8002eaa:	4308      	orrs	r0, r1
 8002eac:	4680      	mov	r8, r0
 8002eae:	4644      	mov	r4, r8
 8002eb0:	1e61      	subs	r1, r4, #1
 8002eb2:	418c      	sbcs	r4, r1
 8002eb4:	4322      	orrs	r2, r4
 8002eb6:	e5e9      	b.n	8002a8c <__aeabi_dsub+0x9c>
 8002eb8:	464c      	mov	r4, r9
 8002eba:	4323      	orrs	r3, r4
 8002ebc:	001c      	movs	r4, r3
 8002ebe:	1e63      	subs	r3, r4, #1
 8002ec0:	419c      	sbcs	r4, r3
 8002ec2:	1b04      	subs	r4, r0, r4
 8002ec4:	42a0      	cmp	r0, r4
 8002ec6:	419b      	sbcs	r3, r3
 8002ec8:	425b      	negs	r3, r3
 8002eca:	1acb      	subs	r3, r1, r3
 8002ecc:	4698      	mov	r8, r3
 8002ece:	465d      	mov	r5, fp
 8002ed0:	0016      	movs	r6, r2
 8002ed2:	e5e2      	b.n	8002a9a <__aeabi_dsub+0xaa>
 8002ed4:	464e      	mov	r6, r9
 8002ed6:	431e      	orrs	r6, r3
 8002ed8:	d100      	bne.n	8002edc <__aeabi_dsub+0x4ec>
 8002eda:	e0ae      	b.n	800303a <__aeabi_dsub+0x64a>
 8002edc:	1e66      	subs	r6, r4, #1
 8002ede:	2c01      	cmp	r4, #1
 8002ee0:	d100      	bne.n	8002ee4 <__aeabi_dsub+0x4f4>
 8002ee2:	e0fd      	b.n	80030e0 <__aeabi_dsub+0x6f0>
 8002ee4:	4f7b      	ldr	r7, [pc, #492]	; (80030d4 <__aeabi_dsub+0x6e4>)
 8002ee6:	42bc      	cmp	r4, r7
 8002ee8:	d100      	bne.n	8002eec <__aeabi_dsub+0x4fc>
 8002eea:	e107      	b.n	80030fc <__aeabi_dsub+0x70c>
 8002eec:	46b4      	mov	ip, r6
 8002eee:	e69b      	b.n	8002c28 <__aeabi_dsub+0x238>
 8002ef0:	4664      	mov	r4, ip
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	1b12      	subs	r2, r2, r4
 8002ef6:	000c      	movs	r4, r1
 8002ef8:	4094      	lsls	r4, r2
 8002efa:	0007      	movs	r7, r0
 8002efc:	4090      	lsls	r0, r2
 8002efe:	46a0      	mov	r8, r4
 8002f00:	4664      	mov	r4, ip
 8002f02:	1e42      	subs	r2, r0, #1
 8002f04:	4190      	sbcs	r0, r2
 8002f06:	4662      	mov	r2, ip
 8002f08:	40e7      	lsrs	r7, r4
 8002f0a:	4644      	mov	r4, r8
 8002f0c:	40d1      	lsrs	r1, r2
 8002f0e:	433c      	orrs	r4, r7
 8002f10:	4304      	orrs	r4, r0
 8002f12:	185b      	adds	r3, r3, r1
 8002f14:	e6f3      	b.n	8002cfe <__aeabi_dsub+0x30e>
 8002f16:	4c6f      	ldr	r4, [pc, #444]	; (80030d4 <__aeabi_dsub+0x6e4>)
 8002f18:	42a2      	cmp	r2, r4
 8002f1a:	d100      	bne.n	8002f1e <__aeabi_dsub+0x52e>
 8002f1c:	e0d5      	b.n	80030ca <__aeabi_dsub+0x6da>
 8002f1e:	4448      	add	r0, r9
 8002f20:	185b      	adds	r3, r3, r1
 8002f22:	4548      	cmp	r0, r9
 8002f24:	4189      	sbcs	r1, r1
 8002f26:	4249      	negs	r1, r1
 8002f28:	185b      	adds	r3, r3, r1
 8002f2a:	07dc      	lsls	r4, r3, #31
 8002f2c:	0840      	lsrs	r0, r0, #1
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	4698      	mov	r8, r3
 8002f32:	0016      	movs	r6, r2
 8002f34:	4304      	orrs	r4, r0
 8002f36:	e6cc      	b.n	8002cd2 <__aeabi_dsub+0x2e2>
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d000      	beq.n	8002f3e <__aeabi_dsub+0x54e>
 8002f3c:	e082      	b.n	8003044 <__aeabi_dsub+0x654>
 8002f3e:	000a      	movs	r2, r1
 8002f40:	4302      	orrs	r2, r0
 8002f42:	d140      	bne.n	8002fc6 <__aeabi_dsub+0x5d6>
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	2500      	movs	r5, #0
 8002f48:	031b      	lsls	r3, r3, #12
 8002f4a:	e713      	b.n	8002d74 <__aeabi_dsub+0x384>
 8002f4c:	074b      	lsls	r3, r1, #29
 8002f4e:	08c2      	lsrs	r2, r0, #3
 8002f50:	431a      	orrs	r2, r3
 8002f52:	465d      	mov	r5, fp
 8002f54:	08cb      	lsrs	r3, r1, #3
 8002f56:	e6c5      	b.n	8002ce4 <__aeabi_dsub+0x2f4>
 8002f58:	464a      	mov	r2, r9
 8002f5a:	1a84      	subs	r4, r0, r2
 8002f5c:	42a0      	cmp	r0, r4
 8002f5e:	4192      	sbcs	r2, r2
 8002f60:	1acb      	subs	r3, r1, r3
 8002f62:	4252      	negs	r2, r2
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	4698      	mov	r8, r3
 8002f68:	465d      	mov	r5, fp
 8002f6a:	e59e      	b.n	8002aaa <__aeabi_dsub+0xba>
 8002f6c:	464a      	mov	r2, r9
 8002f6e:	0759      	lsls	r1, r3, #29
 8002f70:	08d2      	lsrs	r2, r2, #3
 8002f72:	430a      	orrs	r2, r1
 8002f74:	08db      	lsrs	r3, r3, #3
 8002f76:	e6f9      	b.n	8002d6c <__aeabi_dsub+0x37c>
 8002f78:	464a      	mov	r2, r9
 8002f7a:	1a14      	subs	r4, r2, r0
 8002f7c:	45a1      	cmp	r9, r4
 8002f7e:	4192      	sbcs	r2, r2
 8002f80:	1a5b      	subs	r3, r3, r1
 8002f82:	4252      	negs	r2, r2
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	4698      	mov	r8, r3
 8002f88:	2601      	movs	r6, #1
 8002f8a:	e586      	b.n	8002a9a <__aeabi_dsub+0xaa>
 8002f8c:	464a      	mov	r2, r9
 8002f8e:	0759      	lsls	r1, r3, #29
 8002f90:	08d2      	lsrs	r2, r2, #3
 8002f92:	430a      	orrs	r2, r1
 8002f94:	08db      	lsrs	r3, r3, #3
 8002f96:	e6a5      	b.n	8002ce4 <__aeabi_dsub+0x2f4>
 8002f98:	464c      	mov	r4, r9
 8002f9a:	4323      	orrs	r3, r4
 8002f9c:	001c      	movs	r4, r3
 8002f9e:	1e63      	subs	r3, r4, #1
 8002fa0:	419c      	sbcs	r4, r3
 8002fa2:	e65b      	b.n	8002c5c <__aeabi_dsub+0x26c>
 8002fa4:	4665      	mov	r5, ip
 8002fa6:	001e      	movs	r6, r3
 8002fa8:	3d20      	subs	r5, #32
 8002faa:	40ee      	lsrs	r6, r5
 8002fac:	2c20      	cmp	r4, #32
 8002fae:	d005      	beq.n	8002fbc <__aeabi_dsub+0x5cc>
 8002fb0:	2540      	movs	r5, #64	; 0x40
 8002fb2:	1b2d      	subs	r5, r5, r4
 8002fb4:	40ab      	lsls	r3, r5
 8002fb6:	464c      	mov	r4, r9
 8002fb8:	431c      	orrs	r4, r3
 8002fba:	46a2      	mov	sl, r4
 8002fbc:	4654      	mov	r4, sl
 8002fbe:	1e63      	subs	r3, r4, #1
 8002fc0:	419c      	sbcs	r4, r3
 8002fc2:	4334      	orrs	r4, r6
 8002fc4:	e77d      	b.n	8002ec2 <__aeabi_dsub+0x4d2>
 8002fc6:	074b      	lsls	r3, r1, #29
 8002fc8:	08c2      	lsrs	r2, r0, #3
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	465d      	mov	r5, fp
 8002fce:	08cb      	lsrs	r3, r1, #3
 8002fd0:	e6cc      	b.n	8002d6c <__aeabi_dsub+0x37c>
 8002fd2:	000a      	movs	r2, r1
 8002fd4:	4302      	orrs	r2, r0
 8002fd6:	d100      	bne.n	8002fda <__aeabi_dsub+0x5ea>
 8002fd8:	e736      	b.n	8002e48 <__aeabi_dsub+0x458>
 8002fda:	074b      	lsls	r3, r1, #29
 8002fdc:	08c2      	lsrs	r2, r0, #3
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	465d      	mov	r5, fp
 8002fe2:	08cb      	lsrs	r3, r1, #3
 8002fe4:	e681      	b.n	8002cea <__aeabi_dsub+0x2fa>
 8002fe6:	464a      	mov	r2, r9
 8002fe8:	1a84      	subs	r4, r0, r2
 8002fea:	42a0      	cmp	r0, r4
 8002fec:	4192      	sbcs	r2, r2
 8002fee:	1acb      	subs	r3, r1, r3
 8002ff0:	4252      	negs	r2, r2
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	4698      	mov	r8, r3
 8002ff6:	465d      	mov	r5, fp
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	e54e      	b.n	8002a9a <__aeabi_dsub+0xaa>
 8002ffc:	074b      	lsls	r3, r1, #29
 8002ffe:	08c2      	lsrs	r2, r0, #3
 8003000:	431a      	orrs	r2, r3
 8003002:	08cb      	lsrs	r3, r1, #3
 8003004:	e6b2      	b.n	8002d6c <__aeabi_dsub+0x37c>
 8003006:	464a      	mov	r2, r9
 8003008:	1a14      	subs	r4, r2, r0
 800300a:	45a1      	cmp	r9, r4
 800300c:	4192      	sbcs	r2, r2
 800300e:	1a5f      	subs	r7, r3, r1
 8003010:	4252      	negs	r2, r2
 8003012:	1aba      	subs	r2, r7, r2
 8003014:	4690      	mov	r8, r2
 8003016:	0212      	lsls	r2, r2, #8
 8003018:	d56b      	bpl.n	80030f2 <__aeabi_dsub+0x702>
 800301a:	464a      	mov	r2, r9
 800301c:	1a84      	subs	r4, r0, r2
 800301e:	42a0      	cmp	r0, r4
 8003020:	4192      	sbcs	r2, r2
 8003022:	1acb      	subs	r3, r1, r3
 8003024:	4252      	negs	r2, r2
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	4698      	mov	r8, r3
 800302a:	465d      	mov	r5, fp
 800302c:	e564      	b.n	8002af8 <__aeabi_dsub+0x108>
 800302e:	074b      	lsls	r3, r1, #29
 8003030:	08c2      	lsrs	r2, r0, #3
 8003032:	431a      	orrs	r2, r3
 8003034:	465d      	mov	r5, fp
 8003036:	08cb      	lsrs	r3, r1, #3
 8003038:	e698      	b.n	8002d6c <__aeabi_dsub+0x37c>
 800303a:	074b      	lsls	r3, r1, #29
 800303c:	08c2      	lsrs	r2, r0, #3
 800303e:	431a      	orrs	r2, r3
 8003040:	08cb      	lsrs	r3, r1, #3
 8003042:	e64f      	b.n	8002ce4 <__aeabi_dsub+0x2f4>
 8003044:	000a      	movs	r2, r1
 8003046:	4302      	orrs	r2, r0
 8003048:	d090      	beq.n	8002f6c <__aeabi_dsub+0x57c>
 800304a:	464a      	mov	r2, r9
 800304c:	075c      	lsls	r4, r3, #29
 800304e:	08d2      	lsrs	r2, r2, #3
 8003050:	4314      	orrs	r4, r2
 8003052:	2280      	movs	r2, #128	; 0x80
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	0312      	lsls	r2, r2, #12
 8003058:	4213      	tst	r3, r2
 800305a:	d008      	beq.n	800306e <__aeabi_dsub+0x67e>
 800305c:	08ce      	lsrs	r6, r1, #3
 800305e:	4216      	tst	r6, r2
 8003060:	d105      	bne.n	800306e <__aeabi_dsub+0x67e>
 8003062:	08c0      	lsrs	r0, r0, #3
 8003064:	0749      	lsls	r1, r1, #29
 8003066:	4308      	orrs	r0, r1
 8003068:	0004      	movs	r4, r0
 800306a:	465d      	mov	r5, fp
 800306c:	0033      	movs	r3, r6
 800306e:	0f61      	lsrs	r1, r4, #29
 8003070:	00e2      	lsls	r2, r4, #3
 8003072:	0749      	lsls	r1, r1, #29
 8003074:	08d2      	lsrs	r2, r2, #3
 8003076:	430a      	orrs	r2, r1
 8003078:	e678      	b.n	8002d6c <__aeabi_dsub+0x37c>
 800307a:	074b      	lsls	r3, r1, #29
 800307c:	08c2      	lsrs	r2, r0, #3
 800307e:	431a      	orrs	r2, r3
 8003080:	08cb      	lsrs	r3, r1, #3
 8003082:	e632      	b.n	8002cea <__aeabi_dsub+0x2fa>
 8003084:	4448      	add	r0, r9
 8003086:	185b      	adds	r3, r3, r1
 8003088:	4548      	cmp	r0, r9
 800308a:	4192      	sbcs	r2, r2
 800308c:	4698      	mov	r8, r3
 800308e:	4252      	negs	r2, r2
 8003090:	4490      	add	r8, r2
 8003092:	4643      	mov	r3, r8
 8003094:	0004      	movs	r4, r0
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	d400      	bmi.n	800309c <__aeabi_dsub+0x6ac>
 800309a:	e61a      	b.n	8002cd2 <__aeabi_dsub+0x2e2>
 800309c:	4642      	mov	r2, r8
 800309e:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <__aeabi_dsub+0x6e8>)
 80030a0:	2601      	movs	r6, #1
 80030a2:	401a      	ands	r2, r3
 80030a4:	4690      	mov	r8, r2
 80030a6:	e614      	b.n	8002cd2 <__aeabi_dsub+0x2e2>
 80030a8:	4666      	mov	r6, ip
 80030aa:	001f      	movs	r7, r3
 80030ac:	3e20      	subs	r6, #32
 80030ae:	40f7      	lsrs	r7, r6
 80030b0:	2c20      	cmp	r4, #32
 80030b2:	d005      	beq.n	80030c0 <__aeabi_dsub+0x6d0>
 80030b4:	2640      	movs	r6, #64	; 0x40
 80030b6:	1b36      	subs	r6, r6, r4
 80030b8:	40b3      	lsls	r3, r6
 80030ba:	464c      	mov	r4, r9
 80030bc:	431c      	orrs	r4, r3
 80030be:	46a2      	mov	sl, r4
 80030c0:	4654      	mov	r4, sl
 80030c2:	1e63      	subs	r3, r4, #1
 80030c4:	419c      	sbcs	r4, r3
 80030c6:	433c      	orrs	r4, r7
 80030c8:	e5c8      	b.n	8002c5c <__aeabi_dsub+0x26c>
 80030ca:	0011      	movs	r1, r2
 80030cc:	2300      	movs	r3, #0
 80030ce:	2200      	movs	r2, #0
 80030d0:	e532      	b.n	8002b38 <__aeabi_dsub+0x148>
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	000007ff 	.word	0x000007ff
 80030d8:	ff7fffff 	.word	0xff7fffff
 80030dc:	000007fe 	.word	0x000007fe
 80030e0:	464a      	mov	r2, r9
 80030e2:	1814      	adds	r4, r2, r0
 80030e4:	4284      	cmp	r4, r0
 80030e6:	4192      	sbcs	r2, r2
 80030e8:	185b      	adds	r3, r3, r1
 80030ea:	4698      	mov	r8, r3
 80030ec:	4252      	negs	r2, r2
 80030ee:	4490      	add	r8, r2
 80030f0:	e5e9      	b.n	8002cc6 <__aeabi_dsub+0x2d6>
 80030f2:	4642      	mov	r2, r8
 80030f4:	4322      	orrs	r2, r4
 80030f6:	d100      	bne.n	80030fa <__aeabi_dsub+0x70a>
 80030f8:	e6a6      	b.n	8002e48 <__aeabi_dsub+0x458>
 80030fa:	e5ea      	b.n	8002cd2 <__aeabi_dsub+0x2e2>
 80030fc:	074b      	lsls	r3, r1, #29
 80030fe:	08c2      	lsrs	r2, r0, #3
 8003100:	431a      	orrs	r2, r3
 8003102:	08cb      	lsrs	r3, r1, #3
 8003104:	e632      	b.n	8002d6c <__aeabi_dsub+0x37c>
 8003106:	2200      	movs	r2, #0
 8003108:	4901      	ldr	r1, [pc, #4]	; (8003110 <__aeabi_dsub+0x720>)
 800310a:	0013      	movs	r3, r2
 800310c:	e514      	b.n	8002b38 <__aeabi_dsub+0x148>
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	000007ff 	.word	0x000007ff

08003114 <__aeabi_dcmpun>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	0005      	movs	r5, r0
 8003118:	480c      	ldr	r0, [pc, #48]	; (800314c <__aeabi_dcmpun+0x38>)
 800311a:	030c      	lsls	r4, r1, #12
 800311c:	0016      	movs	r6, r2
 800311e:	0049      	lsls	r1, r1, #1
 8003120:	031a      	lsls	r2, r3, #12
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	0b24      	lsrs	r4, r4, #12
 8003126:	0d49      	lsrs	r1, r1, #21
 8003128:	0b12      	lsrs	r2, r2, #12
 800312a:	0d5b      	lsrs	r3, r3, #21
 800312c:	4281      	cmp	r1, r0
 800312e:	d008      	beq.n	8003142 <__aeabi_dcmpun+0x2e>
 8003130:	4906      	ldr	r1, [pc, #24]	; (800314c <__aeabi_dcmpun+0x38>)
 8003132:	2000      	movs	r0, #0
 8003134:	428b      	cmp	r3, r1
 8003136:	d103      	bne.n	8003140 <__aeabi_dcmpun+0x2c>
 8003138:	4332      	orrs	r2, r6
 800313a:	0010      	movs	r0, r2
 800313c:	1e42      	subs	r2, r0, #1
 800313e:	4190      	sbcs	r0, r2
 8003140:	bd70      	pop	{r4, r5, r6, pc}
 8003142:	2001      	movs	r0, #1
 8003144:	432c      	orrs	r4, r5
 8003146:	d1fb      	bne.n	8003140 <__aeabi_dcmpun+0x2c>
 8003148:	e7f2      	b.n	8003130 <__aeabi_dcmpun+0x1c>
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	000007ff 	.word	0x000007ff

08003150 <__aeabi_d2iz>:
 8003150:	000a      	movs	r2, r1
 8003152:	b530      	push	{r4, r5, lr}
 8003154:	4c13      	ldr	r4, [pc, #76]	; (80031a4 <__aeabi_d2iz+0x54>)
 8003156:	0053      	lsls	r3, r2, #1
 8003158:	0309      	lsls	r1, r1, #12
 800315a:	0005      	movs	r5, r0
 800315c:	0b09      	lsrs	r1, r1, #12
 800315e:	2000      	movs	r0, #0
 8003160:	0d5b      	lsrs	r3, r3, #21
 8003162:	0fd2      	lsrs	r2, r2, #31
 8003164:	42a3      	cmp	r3, r4
 8003166:	dd04      	ble.n	8003172 <__aeabi_d2iz+0x22>
 8003168:	480f      	ldr	r0, [pc, #60]	; (80031a8 <__aeabi_d2iz+0x58>)
 800316a:	4283      	cmp	r3, r0
 800316c:	dd02      	ble.n	8003174 <__aeabi_d2iz+0x24>
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <__aeabi_d2iz+0x5c>)
 8003170:	18d0      	adds	r0, r2, r3
 8003172:	bd30      	pop	{r4, r5, pc}
 8003174:	2080      	movs	r0, #128	; 0x80
 8003176:	0340      	lsls	r0, r0, #13
 8003178:	4301      	orrs	r1, r0
 800317a:	480d      	ldr	r0, [pc, #52]	; (80031b0 <__aeabi_d2iz+0x60>)
 800317c:	1ac0      	subs	r0, r0, r3
 800317e:	281f      	cmp	r0, #31
 8003180:	dd08      	ble.n	8003194 <__aeabi_d2iz+0x44>
 8003182:	480c      	ldr	r0, [pc, #48]	; (80031b4 <__aeabi_d2iz+0x64>)
 8003184:	1ac3      	subs	r3, r0, r3
 8003186:	40d9      	lsrs	r1, r3
 8003188:	000b      	movs	r3, r1
 800318a:	4258      	negs	r0, r3
 800318c:	2a00      	cmp	r2, #0
 800318e:	d1f0      	bne.n	8003172 <__aeabi_d2iz+0x22>
 8003190:	0018      	movs	r0, r3
 8003192:	e7ee      	b.n	8003172 <__aeabi_d2iz+0x22>
 8003194:	4c08      	ldr	r4, [pc, #32]	; (80031b8 <__aeabi_d2iz+0x68>)
 8003196:	40c5      	lsrs	r5, r0
 8003198:	46a4      	mov	ip, r4
 800319a:	4463      	add	r3, ip
 800319c:	4099      	lsls	r1, r3
 800319e:	000b      	movs	r3, r1
 80031a0:	432b      	orrs	r3, r5
 80031a2:	e7f2      	b.n	800318a <__aeabi_d2iz+0x3a>
 80031a4:	000003fe 	.word	0x000003fe
 80031a8:	0000041d 	.word	0x0000041d
 80031ac:	7fffffff 	.word	0x7fffffff
 80031b0:	00000433 	.word	0x00000433
 80031b4:	00000413 	.word	0x00000413
 80031b8:	fffffbed 	.word	0xfffffbed

080031bc <__aeabi_i2d>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	2800      	cmp	r0, #0
 80031c0:	d016      	beq.n	80031f0 <__aeabi_i2d+0x34>
 80031c2:	17c3      	asrs	r3, r0, #31
 80031c4:	18c5      	adds	r5, r0, r3
 80031c6:	405d      	eors	r5, r3
 80031c8:	0fc4      	lsrs	r4, r0, #31
 80031ca:	0028      	movs	r0, r5
 80031cc:	f000 f91c 	bl	8003408 <__clzsi2>
 80031d0:	4a11      	ldr	r2, [pc, #68]	; (8003218 <__aeabi_i2d+0x5c>)
 80031d2:	1a12      	subs	r2, r2, r0
 80031d4:	280a      	cmp	r0, #10
 80031d6:	dc16      	bgt.n	8003206 <__aeabi_i2d+0x4a>
 80031d8:	0003      	movs	r3, r0
 80031da:	002e      	movs	r6, r5
 80031dc:	3315      	adds	r3, #21
 80031de:	409e      	lsls	r6, r3
 80031e0:	230b      	movs	r3, #11
 80031e2:	1a18      	subs	r0, r3, r0
 80031e4:	40c5      	lsrs	r5, r0
 80031e6:	0553      	lsls	r3, r2, #21
 80031e8:	032d      	lsls	r5, r5, #12
 80031ea:	0b2d      	lsrs	r5, r5, #12
 80031ec:	0d5b      	lsrs	r3, r3, #21
 80031ee:	e003      	b.n	80031f8 <__aeabi_i2d+0x3c>
 80031f0:	2400      	movs	r4, #0
 80031f2:	2300      	movs	r3, #0
 80031f4:	2500      	movs	r5, #0
 80031f6:	2600      	movs	r6, #0
 80031f8:	051b      	lsls	r3, r3, #20
 80031fa:	432b      	orrs	r3, r5
 80031fc:	07e4      	lsls	r4, r4, #31
 80031fe:	4323      	orrs	r3, r4
 8003200:	0030      	movs	r0, r6
 8003202:	0019      	movs	r1, r3
 8003204:	bd70      	pop	{r4, r5, r6, pc}
 8003206:	380b      	subs	r0, #11
 8003208:	4085      	lsls	r5, r0
 800320a:	0553      	lsls	r3, r2, #21
 800320c:	032d      	lsls	r5, r5, #12
 800320e:	2600      	movs	r6, #0
 8003210:	0b2d      	lsrs	r5, r5, #12
 8003212:	0d5b      	lsrs	r3, r3, #21
 8003214:	e7f0      	b.n	80031f8 <__aeabi_i2d+0x3c>
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	0000041e 	.word	0x0000041e

0800321c <__aeabi_ui2d>:
 800321c:	b510      	push	{r4, lr}
 800321e:	1e04      	subs	r4, r0, #0
 8003220:	d010      	beq.n	8003244 <__aeabi_ui2d+0x28>
 8003222:	f000 f8f1 	bl	8003408 <__clzsi2>
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <__aeabi_ui2d+0x48>)
 8003228:	1a1b      	subs	r3, r3, r0
 800322a:	280a      	cmp	r0, #10
 800322c:	dc11      	bgt.n	8003252 <__aeabi_ui2d+0x36>
 800322e:	220b      	movs	r2, #11
 8003230:	0021      	movs	r1, r4
 8003232:	1a12      	subs	r2, r2, r0
 8003234:	40d1      	lsrs	r1, r2
 8003236:	3015      	adds	r0, #21
 8003238:	030a      	lsls	r2, r1, #12
 800323a:	055b      	lsls	r3, r3, #21
 800323c:	4084      	lsls	r4, r0
 800323e:	0b12      	lsrs	r2, r2, #12
 8003240:	0d5b      	lsrs	r3, r3, #21
 8003242:	e001      	b.n	8003248 <__aeabi_ui2d+0x2c>
 8003244:	2300      	movs	r3, #0
 8003246:	2200      	movs	r2, #0
 8003248:	051b      	lsls	r3, r3, #20
 800324a:	4313      	orrs	r3, r2
 800324c:	0020      	movs	r0, r4
 800324e:	0019      	movs	r1, r3
 8003250:	bd10      	pop	{r4, pc}
 8003252:	0022      	movs	r2, r4
 8003254:	380b      	subs	r0, #11
 8003256:	4082      	lsls	r2, r0
 8003258:	055b      	lsls	r3, r3, #21
 800325a:	0312      	lsls	r2, r2, #12
 800325c:	2400      	movs	r4, #0
 800325e:	0b12      	lsrs	r2, r2, #12
 8003260:	0d5b      	lsrs	r3, r3, #21
 8003262:	e7f1      	b.n	8003248 <__aeabi_ui2d+0x2c>
 8003264:	0000041e 	.word	0x0000041e

08003268 <__aeabi_f2d>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	0043      	lsls	r3, r0, #1
 800326c:	0246      	lsls	r6, r0, #9
 800326e:	0fc4      	lsrs	r4, r0, #31
 8003270:	20fe      	movs	r0, #254	; 0xfe
 8003272:	0e1b      	lsrs	r3, r3, #24
 8003274:	1c59      	adds	r1, r3, #1
 8003276:	0a75      	lsrs	r5, r6, #9
 8003278:	4208      	tst	r0, r1
 800327a:	d00c      	beq.n	8003296 <__aeabi_f2d+0x2e>
 800327c:	22e0      	movs	r2, #224	; 0xe0
 800327e:	0092      	lsls	r2, r2, #2
 8003280:	4694      	mov	ip, r2
 8003282:	076d      	lsls	r5, r5, #29
 8003284:	0b36      	lsrs	r6, r6, #12
 8003286:	4463      	add	r3, ip
 8003288:	051b      	lsls	r3, r3, #20
 800328a:	4333      	orrs	r3, r6
 800328c:	07e4      	lsls	r4, r4, #31
 800328e:	4323      	orrs	r3, r4
 8003290:	0028      	movs	r0, r5
 8003292:	0019      	movs	r1, r3
 8003294:	bd70      	pop	{r4, r5, r6, pc}
 8003296:	2b00      	cmp	r3, #0
 8003298:	d114      	bne.n	80032c4 <__aeabi_f2d+0x5c>
 800329a:	2d00      	cmp	r5, #0
 800329c:	d01b      	beq.n	80032d6 <__aeabi_f2d+0x6e>
 800329e:	0028      	movs	r0, r5
 80032a0:	f000 f8b2 	bl	8003408 <__clzsi2>
 80032a4:	280a      	cmp	r0, #10
 80032a6:	dc1c      	bgt.n	80032e2 <__aeabi_f2d+0x7a>
 80032a8:	230b      	movs	r3, #11
 80032aa:	002a      	movs	r2, r5
 80032ac:	1a1b      	subs	r3, r3, r0
 80032ae:	40da      	lsrs	r2, r3
 80032b0:	0003      	movs	r3, r0
 80032b2:	3315      	adds	r3, #21
 80032b4:	409d      	lsls	r5, r3
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <__aeabi_f2d+0x88>)
 80032b8:	0312      	lsls	r2, r2, #12
 80032ba:	1a1b      	subs	r3, r3, r0
 80032bc:	055b      	lsls	r3, r3, #21
 80032be:	0b16      	lsrs	r6, r2, #12
 80032c0:	0d5b      	lsrs	r3, r3, #21
 80032c2:	e7e1      	b.n	8003288 <__aeabi_f2d+0x20>
 80032c4:	2d00      	cmp	r5, #0
 80032c6:	d009      	beq.n	80032dc <__aeabi_f2d+0x74>
 80032c8:	0b32      	lsrs	r2, r6, #12
 80032ca:	2680      	movs	r6, #128	; 0x80
 80032cc:	0336      	lsls	r6, r6, #12
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <__aeabi_f2d+0x8c>)
 80032d0:	076d      	lsls	r5, r5, #29
 80032d2:	4316      	orrs	r6, r2
 80032d4:	e7d8      	b.n	8003288 <__aeabi_f2d+0x20>
 80032d6:	2300      	movs	r3, #0
 80032d8:	2600      	movs	r6, #0
 80032da:	e7d5      	b.n	8003288 <__aeabi_f2d+0x20>
 80032dc:	2600      	movs	r6, #0
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <__aeabi_f2d+0x8c>)
 80032e0:	e7d2      	b.n	8003288 <__aeabi_f2d+0x20>
 80032e2:	0003      	movs	r3, r0
 80032e4:	002a      	movs	r2, r5
 80032e6:	3b0b      	subs	r3, #11
 80032e8:	409a      	lsls	r2, r3
 80032ea:	2500      	movs	r5, #0
 80032ec:	e7e3      	b.n	80032b6 <__aeabi_f2d+0x4e>
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	00000389 	.word	0x00000389
 80032f4:	000007ff 	.word	0x000007ff

080032f8 <__aeabi_d2f>:
 80032f8:	0002      	movs	r2, r0
 80032fa:	004b      	lsls	r3, r1, #1
 80032fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fe:	0308      	lsls	r0, r1, #12
 8003300:	0d5b      	lsrs	r3, r3, #21
 8003302:	4e3d      	ldr	r6, [pc, #244]	; (80033f8 <__aeabi_d2f+0x100>)
 8003304:	0fcc      	lsrs	r4, r1, #31
 8003306:	0a40      	lsrs	r0, r0, #9
 8003308:	0f51      	lsrs	r1, r2, #29
 800330a:	1c5f      	adds	r7, r3, #1
 800330c:	4308      	orrs	r0, r1
 800330e:	00d5      	lsls	r5, r2, #3
 8003310:	4237      	tst	r7, r6
 8003312:	d00a      	beq.n	800332a <__aeabi_d2f+0x32>
 8003314:	4939      	ldr	r1, [pc, #228]	; (80033fc <__aeabi_d2f+0x104>)
 8003316:	185e      	adds	r6, r3, r1
 8003318:	2efe      	cmp	r6, #254	; 0xfe
 800331a:	dd16      	ble.n	800334a <__aeabi_d2f+0x52>
 800331c:	23ff      	movs	r3, #255	; 0xff
 800331e:	2100      	movs	r1, #0
 8003320:	05db      	lsls	r3, r3, #23
 8003322:	430b      	orrs	r3, r1
 8003324:	07e0      	lsls	r0, r4, #31
 8003326:	4318      	orrs	r0, r3
 8003328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <__aeabi_d2f+0x44>
 800332e:	4328      	orrs	r0, r5
 8003330:	d027      	beq.n	8003382 <__aeabi_d2f+0x8a>
 8003332:	2105      	movs	r1, #5
 8003334:	0189      	lsls	r1, r1, #6
 8003336:	0a49      	lsrs	r1, r1, #9
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e7f1      	b.n	8003320 <__aeabi_d2f+0x28>
 800333c:	4305      	orrs	r5, r0
 800333e:	d0ed      	beq.n	800331c <__aeabi_d2f+0x24>
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	03c9      	lsls	r1, r1, #15
 8003344:	23ff      	movs	r3, #255	; 0xff
 8003346:	4301      	orrs	r1, r0
 8003348:	e7ea      	b.n	8003320 <__aeabi_d2f+0x28>
 800334a:	2e00      	cmp	r6, #0
 800334c:	dd1c      	ble.n	8003388 <__aeabi_d2f+0x90>
 800334e:	0192      	lsls	r2, r2, #6
 8003350:	0011      	movs	r1, r2
 8003352:	1e4a      	subs	r2, r1, #1
 8003354:	4191      	sbcs	r1, r2
 8003356:	00c0      	lsls	r0, r0, #3
 8003358:	0f6d      	lsrs	r5, r5, #29
 800335a:	4301      	orrs	r1, r0
 800335c:	4329      	orrs	r1, r5
 800335e:	074b      	lsls	r3, r1, #29
 8003360:	d048      	beq.n	80033f4 <__aeabi_d2f+0xfc>
 8003362:	230f      	movs	r3, #15
 8003364:	400b      	ands	r3, r1
 8003366:	2b04      	cmp	r3, #4
 8003368:	d000      	beq.n	800336c <__aeabi_d2f+0x74>
 800336a:	3104      	adds	r1, #4
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	04db      	lsls	r3, r3, #19
 8003370:	400b      	ands	r3, r1
 8003372:	d03f      	beq.n	80033f4 <__aeabi_d2f+0xfc>
 8003374:	1c72      	adds	r2, r6, #1
 8003376:	2efe      	cmp	r6, #254	; 0xfe
 8003378:	d0d0      	beq.n	800331c <__aeabi_d2f+0x24>
 800337a:	0189      	lsls	r1, r1, #6
 800337c:	0a49      	lsrs	r1, r1, #9
 800337e:	b2d3      	uxtb	r3, r2
 8003380:	e7ce      	b.n	8003320 <__aeabi_d2f+0x28>
 8003382:	2300      	movs	r3, #0
 8003384:	2100      	movs	r1, #0
 8003386:	e7cb      	b.n	8003320 <__aeabi_d2f+0x28>
 8003388:	0032      	movs	r2, r6
 800338a:	3217      	adds	r2, #23
 800338c:	db22      	blt.n	80033d4 <__aeabi_d2f+0xdc>
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	221e      	movs	r2, #30
 8003392:	0409      	lsls	r1, r1, #16
 8003394:	4308      	orrs	r0, r1
 8003396:	1b92      	subs	r2, r2, r6
 8003398:	2a1f      	cmp	r2, #31
 800339a:	dd1d      	ble.n	80033d8 <__aeabi_d2f+0xe0>
 800339c:	2102      	movs	r1, #2
 800339e:	4249      	negs	r1, r1
 80033a0:	1b8e      	subs	r6, r1, r6
 80033a2:	0001      	movs	r1, r0
 80033a4:	40f1      	lsrs	r1, r6
 80033a6:	000e      	movs	r6, r1
 80033a8:	2a20      	cmp	r2, #32
 80033aa:	d004      	beq.n	80033b6 <__aeabi_d2f+0xbe>
 80033ac:	4a14      	ldr	r2, [pc, #80]	; (8003400 <__aeabi_d2f+0x108>)
 80033ae:	4694      	mov	ip, r2
 80033b0:	4463      	add	r3, ip
 80033b2:	4098      	lsls	r0, r3
 80033b4:	4305      	orrs	r5, r0
 80033b6:	0029      	movs	r1, r5
 80033b8:	1e4d      	subs	r5, r1, #1
 80033ba:	41a9      	sbcs	r1, r5
 80033bc:	4331      	orrs	r1, r6
 80033be:	2600      	movs	r6, #0
 80033c0:	074b      	lsls	r3, r1, #29
 80033c2:	d1ce      	bne.n	8003362 <__aeabi_d2f+0x6a>
 80033c4:	2080      	movs	r0, #128	; 0x80
 80033c6:	000b      	movs	r3, r1
 80033c8:	04c0      	lsls	r0, r0, #19
 80033ca:	2201      	movs	r2, #1
 80033cc:	4003      	ands	r3, r0
 80033ce:	4201      	tst	r1, r0
 80033d0:	d1d3      	bne.n	800337a <__aeabi_d2f+0x82>
 80033d2:	e7af      	b.n	8003334 <__aeabi_d2f+0x3c>
 80033d4:	2300      	movs	r3, #0
 80033d6:	e7ac      	b.n	8003332 <__aeabi_d2f+0x3a>
 80033d8:	490a      	ldr	r1, [pc, #40]	; (8003404 <__aeabi_d2f+0x10c>)
 80033da:	468c      	mov	ip, r1
 80033dc:	0029      	movs	r1, r5
 80033de:	4463      	add	r3, ip
 80033e0:	40d1      	lsrs	r1, r2
 80033e2:	409d      	lsls	r5, r3
 80033e4:	000a      	movs	r2, r1
 80033e6:	0029      	movs	r1, r5
 80033e8:	4098      	lsls	r0, r3
 80033ea:	1e4d      	subs	r5, r1, #1
 80033ec:	41a9      	sbcs	r1, r5
 80033ee:	4301      	orrs	r1, r0
 80033f0:	4311      	orrs	r1, r2
 80033f2:	e7e4      	b.n	80033be <__aeabi_d2f+0xc6>
 80033f4:	0033      	movs	r3, r6
 80033f6:	e79d      	b.n	8003334 <__aeabi_d2f+0x3c>
 80033f8:	000007fe 	.word	0x000007fe
 80033fc:	fffffc80 	.word	0xfffffc80
 8003400:	fffffca2 	.word	0xfffffca2
 8003404:	fffffc82 	.word	0xfffffc82

08003408 <__clzsi2>:
 8003408:	211c      	movs	r1, #28
 800340a:	2301      	movs	r3, #1
 800340c:	041b      	lsls	r3, r3, #16
 800340e:	4298      	cmp	r0, r3
 8003410:	d301      	bcc.n	8003416 <__clzsi2+0xe>
 8003412:	0c00      	lsrs	r0, r0, #16
 8003414:	3910      	subs	r1, #16
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	4298      	cmp	r0, r3
 800341a:	d301      	bcc.n	8003420 <__clzsi2+0x18>
 800341c:	0a00      	lsrs	r0, r0, #8
 800341e:	3908      	subs	r1, #8
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	4298      	cmp	r0, r3
 8003424:	d301      	bcc.n	800342a <__clzsi2+0x22>
 8003426:	0900      	lsrs	r0, r0, #4
 8003428:	3904      	subs	r1, #4
 800342a:	a202      	add	r2, pc, #8	; (adr r2, 8003434 <__clzsi2+0x2c>)
 800342c:	5c10      	ldrb	r0, [r2, r0]
 800342e:	1840      	adds	r0, r0, r1
 8003430:	4770      	bx	lr
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	02020304 	.word	0x02020304
 8003438:	01010101 	.word	0x01010101
	...

08003444 <__clzdi2>:
 8003444:	b510      	push	{r4, lr}
 8003446:	2900      	cmp	r1, #0
 8003448:	d103      	bne.n	8003452 <__clzdi2+0xe>
 800344a:	f7ff ffdd 	bl	8003408 <__clzsi2>
 800344e:	3020      	adds	r0, #32
 8003450:	e002      	b.n	8003458 <__clzdi2+0x14>
 8003452:	1c08      	adds	r0, r1, #0
 8003454:	f7ff ffd8 	bl	8003408 <__clzsi2>
 8003458:	bd10      	pop	{r4, pc}
 800345a:	46c0      	nop			; (mov r8, r8)

0800345c <minArr>:
*/
																															 
/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
*/
uint8_t minArr(uint8_t* arr, uint8_t* Q)
{
 800345c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345e:	0005      	movs	r5, r0
	uint8_t smallest = 0xFF; uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 8003460:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF; uint8_t index = 0;
 8003462:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 8003464:	2b00      	cmp	r3, #0
 8003466:	d100      	bne.n	800346a <minArr+0xe>
		smallest = arr[0];
 8003468:	7804      	ldrb	r4, [r0, #0]

	for (int i=0 ; i<N ; i++) {
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <minArr+0x38>)
 800346c:	781e      	ldrb	r6, [r3, #0]
 800346e:	2e00      	cmp	r6, #0
 8003470:	dd0e      	ble.n	8003490 <minArr+0x34>
 8003472:	2300      	movs	r3, #0
 8003474:	2000      	movs	r0, #0
 8003476:	e002      	b.n	800347e <minArr+0x22>
 8003478:	3301      	adds	r3, #1
 800347a:	42b3      	cmp	r3, r6
 800347c:	da09      	bge.n	8003492 <minArr+0x36>
		if ((arr[i] < smallest) && !Q[i]) {
 800347e:	5cea      	ldrb	r2, [r5, r3]
 8003480:	42a2      	cmp	r2, r4
 8003482:	d2f9      	bcs.n	8003478 <minArr+0x1c>
 8003484:	5ccf      	ldrb	r7, [r1, r3]
 8003486:	2f00      	cmp	r7, #0
 8003488:	d1f6      	bne.n	8003478 <minArr+0x1c>
			smallest = arr[i];
			index = i;
 800348a:	b2d8      	uxtb	r0, r3
			smallest = arr[i];
 800348c:	0014      	movs	r4, r2
 800348e:	e7f3      	b.n	8003478 <minArr+0x1c>
	for (int i=0 ; i<N ; i++) {
 8003490:	2000      	movs	r0, #0
		}
	}
	
	return index;
}
 8003492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003494:	2000001c 	.word	0x2000001c

08003498 <QnotEmpty>:
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited) 
*/
uint8_t QnotEmpty(uint8_t* Q)
{		
 8003498:	b510      	push	{r4, lr}
 800349a:	0001      	movs	r1, r0
	char temp = 1;

	for (int i=0 ; i<N ; i++) {
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <QnotEmpty+0x20>)
 800349e:	781c      	ldrb	r4, [r3, #0]
 80034a0:	2c00      	cmp	r4, #0
 80034a2:	dd07      	ble.n	80034b4 <QnotEmpty+0x1c>
 80034a4:	2300      	movs	r3, #0
	char temp = 1;
 80034a6:	2001      	movs	r0, #1
		temp &= Q[i];
 80034a8:	5cca      	ldrb	r2, [r1, r3]
 80034aa:	4010      	ands	r0, r2
	for (int i=0 ; i<N ; i++) {
 80034ac:	3301      	adds	r3, #1
 80034ae:	42a3      	cmp	r3, r4
 80034b0:	dbfa      	blt.n	80034a8 <QnotEmpty+0x10>
	}	
	
	return temp;
}
 80034b2:	bd10      	pop	{r4, pc}
	char temp = 1;
 80034b4:	2001      	movs	r0, #1
 80034b6:	e7fc      	b.n	80034b2 <QnotEmpty+0x1a>
 80034b8:	2000001c 	.word	0x2000001c

080034bc <LoadROsnippets>:
/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
*/
uint8_t LoadROsnippets(void)
{
 80034bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034be:	46de      	mov	lr, fp
 80034c0:	4657      	mov	r7, sl
 80034c2:	464e      	mov	r6, r9
 80034c4:	4645      	mov	r5, r8
 80034c6:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 80034c8:	2032      	movs	r0, #50	; 0x32
 80034ca:	f010 fceb 	bl	8013ea4 <malloc>
 80034ce:	4680      	mov	r8, r0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d06c      	beq.n	80035ae <LoadROsnippets+0xf2>
	
	// Exit if no recorded Snippets
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 80034d4:	4b38      	ldr	r3, [pc, #224]	; (80035b8 <LoadROsnippets+0xfc>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2bfe      	cmp	r3, #254	; 0xfe
 80034da:	d16a      	bne.n	80035b2 <LoadROsnippets+0xf6>
 80034dc:	4b37      	ldr	r3, [pc, #220]	; (80035bc <LoadROsnippets+0x100>)
 80034de:	4699      	mov	r9, r3
	int currentAdd = RO_MID_ADDRESS;
 80034e0:	4c35      	ldr	r4, [pc, #212]	; (80035b8 <LoadROsnippets+0xfc>)
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
	{
		// Load conditions starting at RO_MID_ADDRESS
		for(i=0 ; i<sizeof(snippet_t) ; i++)
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 80034e2:	2301      	movs	r3, #1
 80034e4:	4443      	add	r3, r8
 80034e6:	469a      	mov	sl, r3
 80034e8:	e026      	b.n	8003538 <LoadROsnippets+0x7c>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 80034ea:	2500      	movs	r5, #0
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
		{
			snipBuffer[i] = *(uint8_t *)currentAdd;
			++currentAdd; ++i;
		}
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 80034ec:	4643      	mov	r3, r8
 80034ee:	195b      	adds	r3, r3, r5
 80034f0:	3b01      	subs	r3, #1
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <LoadROsnippets+0x40>
 80034f8:	3501      	adds	r5, #1
 80034fa:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd = (char *) malloc(i);
 80034fc:	0028      	movs	r0, r5
 80034fe:	f010 fcd1 	bl	8013ea4 <malloc>
 8003502:	465b      	mov	r3, fp
 8003504:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 8003506:	2800      	cmp	r0, #0
 8003508:	d03d      	beq.n	8003586 <LoadROsnippets+0xca>
			memset(&snippets[s], 0, sizeof(snippet_t) );
			free(snipBuffer);			
			return BOS_ERR_SNIP_MEM_FULL;
		} else {	
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
 800350a:	002a      	movs	r2, r5
 800350c:	4641      	mov	r1, r8
 800350e:	f010 feff 	bl	8014310 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003512:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <LoadROsnippets+0x104>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	4a29      	ldr	r2, [pc, #164]	; (80035c0 <LoadROsnippets+0x104>)
 800351a:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 800351c:	002a      	movs	r2, r5
 800351e:	2100      	movs	r1, #0
 8003520:	4640      	mov	r0, r8
 8003522:	f010 fefe 	bl	8014322 <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 8003526:	783b      	ldrb	r3, [r7, #0]
 8003528:	2bfe      	cmp	r3, #254	; 0xfe
 800352a:	d136      	bne.n	800359a <LoadROsnippets+0xde>
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 800352c:	3bea      	subs	r3, #234	; 0xea
 800352e:	469c      	mov	ip, r3
 8003530:	44e1      	add	r9, ip
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <LoadROsnippets+0x108>)
 8003534:	4599      	cmp	r9, r3
 8003536:	d030      	beq.n	800359a <LoadROsnippets+0xde>
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 8003538:	0021      	movs	r1, r4
 800353a:	3114      	adds	r1, #20
{
 800353c:	0023      	movs	r3, r4
 800353e:	4642      	mov	r2, r8
 8003540:	1b16      	subs	r6, r2, r4
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 8003542:	781a      	ldrb	r2, [r3, #0]
 8003544:	54f2      	strb	r2, [r6, r3]
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 8003546:	3301      	adds	r3, #1
 8003548:	428b      	cmp	r3, r1
 800354a:	d1fa      	bne.n	8003542 <LoadROsnippets+0x86>
 800354c:	3414      	adds	r4, #20
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 800354e:	46cb      	mov	fp, r9
 8003550:	2214      	movs	r2, #20
 8003552:	4651      	mov	r1, sl
 8003554:	4648      	mov	r0, r9
 8003556:	f010 fedb 	bl	8014310 <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 800355a:	2214      	movs	r2, #20
 800355c:	2100      	movs	r1, #0
 800355e:	4640      	mov	r0, r8
 8003560:	f010 fedf 	bl	8014322 <memset>
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003564:	0027      	movs	r7, r4
 8003566:	7823      	ldrb	r3, [r4, #0]
 8003568:	2bfd      	cmp	r3, #253	; 0xfd
 800356a:	d8be      	bhi.n	80034ea <LoadROsnippets+0x2e>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 800356c:	2500      	movs	r5, #0
			snipBuffer[i] = *(uint8_t *)currentAdd;
 800356e:	3e14      	subs	r6, #20
 8003570:	5533      	strb	r3, [r6, r4]
			++currentAdd; ++i;
 8003572:	3401      	adds	r4, #1
 8003574:	3501      	adds	r5, #1
 8003576:	b2ed      	uxtb	r5, r5
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003578:	0027      	movs	r7, r4
 800357a:	7823      	ldrb	r3, [r4, #0]
 800357c:	2bfd      	cmp	r3, #253	; 0xfd
 800357e:	d8b5      	bhi.n	80034ec <LoadROsnippets+0x30>
 8003580:	2d32      	cmp	r5, #50	; 0x32
 8003582:	d1f5      	bne.n	8003570 <LoadROsnippets+0xb4>
 8003584:	e7b2      	b.n	80034ec <LoadROsnippets+0x30>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 8003586:	2214      	movs	r2, #20
 8003588:	2100      	movs	r1, #0
 800358a:	4658      	mov	r0, fp
 800358c:	f010 fec9 	bl	8014322 <memset>
			free(snipBuffer);			
 8003590:	4640      	mov	r0, r8
 8003592:	f010 fc91 	bl	8013eb8 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003596:	200e      	movs	r0, #14
 8003598:	e003      	b.n	80035a2 <LoadROsnippets+0xe6>
	}	
	
	free(snipBuffer);
 800359a:	4640      	mov	r0, r8
 800359c:	f010 fc8c 	bl	8013eb8 <free>
	return BOS_OK;
 80035a0:	2000      	movs	r0, #0
}
 80035a2:	bcf0      	pop	{r4, r5, r6, r7}
 80035a4:	46bb      	mov	fp, r7
 80035a6:	46b2      	mov	sl, r6
 80035a8:	46a9      	mov	r9, r5
 80035aa:	46a0      	mov	r8, r4
 80035ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 80035ae:	20fb      	movs	r0, #251	; 0xfb
 80035b0:	e7f7      	b.n	80035a2 <LoadROsnippets+0xe6>
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 80035b2:	20ff      	movs	r0, #255	; 0xff
 80035b4:	e7f5      	b.n	80035a2 <LoadROsnippets+0xe6>
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	0801dc00 	.word	0x0801dc00
 80035bc:	20006d34 	.word	0x20006d34
 80035c0:	200011eb 	.word	0x200011eb
 80035c4:	20006d98 	.word	0x20006d98

080035c8 <LoadROtopology>:


/* --- Load array topology stored in Flash RO --- 
*/
uint8_t LoadROtopology(void)
{
 80035c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ca:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 2, temp = 0;
	
	/* Load number of modules */
	temp = (*(__IO uint16_t*)(RO_START_ADDRESS));
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <LoadROtopology+0x94>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
	
	if (temp == 0xFFFF)				// Memory has been erased
 80035d2:	4a23      	ldr	r2, [pc, #140]	; (8003660 <LoadROtopology+0x98>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d011      	beq.n	80035fc <LoadROtopology+0x34>
		myID = 0;
		return BOS_MEM_ERASED;
	}
	else
	{		
		N = (uint8_t) (temp>>8);
 80035d8:	0a1a      	lsrs	r2, r3, #8
		if (N == 0)	N = 1;
 80035da:	d017      	beq.n	800360c <LoadROtopology+0x44>
		N = (uint8_t) (temp>>8);
 80035dc:	4921      	ldr	r1, [pc, #132]	; (8003664 <LoadROtopology+0x9c>)
 80035de:	700a      	strb	r2, [r1, #0]
		myID = (uint8_t) temp;
 80035e0:	4a21      	ldr	r2, [pc, #132]	; (8003668 <LoadROtopology+0xa0>)
 80035e2:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i=1 ; i<=N ; i++)
 80035e4:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <LoadROtopology+0x9c>)
 80035e6:	7818      	ldrb	r0, [r3, #0]
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d035      	beq.n	8003658 <LoadROtopology+0x90>
 80035ec:	2601      	movs	r6, #1
	uint16_t add = 2, temp = 0;
 80035ee:	2202      	movs	r2, #2
		{
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 80035f0:	466b      	mov	r3, sp
 80035f2:	1dd9      	adds	r1, r3, #7
 80035f4:	2300      	movs	r3, #0
 80035f6:	469c      	mov	ip, r3
			{
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 80035f8:	4d1c      	ldr	r5, [pc, #112]	; (800366c <LoadROtopology+0xa4>)
 80035fa:	e00f      	b.n	800361c <LoadROtopology+0x54>
		N = 1;
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <LoadROtopology+0x9c>)
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
		myID = 0;
 8003602:	4b19      	ldr	r3, [pc, #100]	; (8003668 <LoadROtopology+0xa0>)
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003608:	20fa      	movs	r0, #250	; 0xfa
 800360a:	e025      	b.n	8003658 <LoadROtopology+0x90>
		if (N == 0)	N = 1;
 800360c:	4a15      	ldr	r2, [pc, #84]	; (8003664 <LoadROtopology+0x9c>)
 800360e:	2101      	movs	r1, #1
 8003610:	7011      	strb	r1, [r2, #0]
 8003612:	e7e5      	b.n	80035e0 <LoadROtopology+0x18>
		for(uint8_t i=1 ; i<=N ; i++)
 8003614:	3601      	adds	r6, #1
 8003616:	b2f6      	uxtb	r6, r6
 8003618:	4286      	cmp	r6, r0
 800361a:	d81c      	bhi.n	8003656 <LoadROtopology+0x8e>
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800361c:	4663      	mov	r3, ip
 800361e:	700b      	strb	r3, [r1, #0]
 8003620:	780b      	ldrb	r3, [r1, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b0a      	cmp	r3, #10
 8003626:	d8f5      	bhi.n	8003614 <LoadROtopology+0x4c>
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 8003628:	1e73      	subs	r3, r6, #1
 800362a:	009c      	lsls	r4, r3, #2
 800362c:	18e4      	adds	r4, r4, r3
 800362e:	0064      	lsls	r4, r4, #1
 8003630:	18e4      	adds	r4, r4, r3
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <LoadROtopology+0x94>)
 8003634:	18d7      	adds	r7, r2, r3
 8003636:	780b      	ldrb	r3, [r1, #0]
 8003638:	883f      	ldrh	r7, [r7, #0]
 800363a:	191b      	adds	r3, r3, r4
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	52ef      	strh	r7, [r5, r3]
				add += 2;			
 8003640:	3202      	adds	r2, #2
 8003642:	b292      	uxth	r2, r2
			for(volatile uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8003644:	780b      	ldrb	r3, [r1, #0]
 8003646:	3301      	adds	r3, #1
 8003648:	b2db      	uxtb	r3, r3
 800364a:	700b      	strb	r3, [r1, #0]
 800364c:	780b      	ldrb	r3, [r1, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b0a      	cmp	r3, #10
 8003652:	d9ee      	bls.n	8003632 <LoadROtopology+0x6a>
 8003654:	e7de      	b.n	8003614 <LoadROtopology+0x4c>
			}
		}	
	}
	
	return result;
 8003656:	2000      	movs	r0, #0
}
 8003658:	b003      	add	sp, #12
 800365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800365c:	0801d800 	.word	0x0801d800
 8003660:	0000ffff 	.word	0x0000ffff
 8003664:	2000001c 	.word	0x2000001c
 8003668:	2000104c 	.word	0x2000104c
 800366c:	20000aa8 	.word	0x20000aa8

08003670 <SaveEEportsDir>:


/* --- Save array ports directions in EEPROM --- 
*/
BOS_Status SaveEEportsDir(void)
{
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <SaveEEportsDir+0x3c>)
 8003674:	781d      	ldrb	r5, [r3, #0]
 8003676:	2d00      	cmp	r5, #0
 8003678:	d016      	beq.n	80036a8 <SaveEEportsDir+0x38>
 800367a:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 800367c:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 800367e:	4f0c      	ldr	r7, [pc, #48]	; (80036b0 <SaveEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003680:	001e      	movs	r6, r3
 8003682:	e008      	b.n	8003696 <SaveEEportsDir+0x26>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8003684:	1c60      	adds	r0, r4, #1
 8003686:	f004 fbb7 	bl	8007df8 <EE_WriteVariable>
 800368a:	e009      	b.n	80036a0 <SaveEEportsDir+0x30>
	for(uint8_t i=1 ; i<=N ; i++)
 800368c:	3401      	adds	r4, #1
 800368e:	b2e4      	uxtb	r4, r4
 8003690:	7833      	ldrb	r3, [r6, #0]
 8003692:	42a3      	cmp	r3, r4
 8003694:	d308      	bcc.n	80036a8 <SaveEEportsDir+0x38>
		if (arrayPortsDir[i-1])
 8003696:	1e63      	subs	r3, r4, #1
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	5bd9      	ldrh	r1, [r3, r7]
 800369c:	2900      	cmp	r1, #0
 800369e:	d1f1      	bne.n	8003684 <SaveEEportsDir+0x14>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80036a0:	2c19      	cmp	r4, #25
 80036a2:	d9f3      	bls.n	800368c <SaveEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 80036a4:	250a      	movs	r5, #10
 80036a6:	e7f1      	b.n	800368c <SaveEEportsDir+0x1c>
	}
	
	return result;
}
 80036a8:	0028      	movs	r0, r5
 80036aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ac:	2000001c 	.word	0x2000001c
 80036b0:	20007164 	.word	0x20007164

080036b4 <ClearEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
*/
BOS_Status ClearEEportsDir(void)
{
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 80036b6:	2232      	movs	r2, #50	; 0x32
 80036b8:	2100      	movs	r1, #0
 80036ba:	4810      	ldr	r0, [pc, #64]	; (80036fc <ClearEEportsDir+0x48>)
 80036bc:	f010 fe31 	bl	8014322 <memset>
	
	for(uint8_t i=1 ; i<=N ; i++)
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <ClearEEportsDir+0x4c>)
 80036c2:	781d      	ldrb	r5, [r3, #0]
 80036c4:	2d00      	cmp	r5, #0
 80036c6:	d016      	beq.n	80036f6 <ClearEEportsDir+0x42>
 80036c8:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 80036ca:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 80036cc:	4f0b      	ldr	r7, [pc, #44]	; (80036fc <ClearEEportsDir+0x48>)
	for(uint8_t i=1 ; i<=N ; i++)
 80036ce:	001e      	movs	r6, r3
 80036d0:	e008      	b.n	80036e4 <ClearEEportsDir+0x30>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 80036d2:	1c60      	adds	r0, r4, #1
 80036d4:	f004 fb90 	bl	8007df8 <EE_WriteVariable>
 80036d8:	e009      	b.n	80036ee <ClearEEportsDir+0x3a>
	for(uint8_t i=1 ; i<=N ; i++)
 80036da:	3401      	adds	r4, #1
 80036dc:	b2e4      	uxtb	r4, r4
 80036de:	7833      	ldrb	r3, [r6, #0]
 80036e0:	42a3      	cmp	r3, r4
 80036e2:	d308      	bcc.n	80036f6 <ClearEEportsDir+0x42>
		if (arrayPortsDir[i-1])
 80036e4:	1e63      	subs	r3, r4, #1
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	5bd9      	ldrh	r1, [r3, r7]
 80036ea:	2900      	cmp	r1, #0
 80036ec:	d1f1      	bne.n	80036d2 <ClearEEportsDir+0x1e>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80036ee:	2c19      	cmp	r4, #25
 80036f0:	d9f3      	bls.n	80036da <ClearEEportsDir+0x26>
			result = BOS_ERR_EEPROM;
 80036f2:	250a      	movs	r5, #10
 80036f4:	e7f1      	b.n	80036da <ClearEEportsDir+0x26>
	}
	
	return result;
}
 80036f6:	0028      	movs	r0, r5
 80036f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	20007164 	.word	0x20007164
 8003700:	2000001c 	.word	0x2000001c

08003704 <LoadEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
*/
BOS_Status LoadEEportsDir(void)
{
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 8003706:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <LoadEEportsDir+0x3c>)
 8003708:	781d      	ldrb	r5, [r3, #0]
 800370a:	2d00      	cmp	r5, #0
 800370c:	d016      	beq.n	800373c <LoadEEportsDir+0x38>
	{
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 800370e:	490d      	ldr	r1, [pc, #52]	; (8003744 <LoadEEportsDir+0x40>)
 8003710:	2002      	movs	r0, #2
 8003712:	f004 fb45 	bl	8007da0 <EE_ReadVariable>
	for(uint8_t i=1 ; i<=N ; i++)
 8003716:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003718:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 800371a:	4e09      	ldr	r6, [pc, #36]	; (8003740 <LoadEEportsDir+0x3c>)
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 800371c:	4f09      	ldr	r7, [pc, #36]	; (8003744 <LoadEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 800371e:	3401      	adds	r4, #1
 8003720:	b2e4      	uxtb	r4, r4
 8003722:	7833      	ldrb	r3, [r6, #0]
 8003724:	42a3      	cmp	r3, r4
 8003726:	d309      	bcc.n	800373c <LoadEEportsDir+0x38>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003728:	1e61      	subs	r1, r4, #1
 800372a:	0049      	lsls	r1, r1, #1
 800372c:	19c9      	adds	r1, r1, r7
 800372e:	1c60      	adds	r0, r4, #1
 8003730:	f004 fb36 	bl	8007da0 <EE_ReadVariable>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003734:	2c19      	cmp	r4, #25
 8003736:	d9f2      	bls.n	800371e <LoadEEportsDir+0x1a>
			result = BOS_ERR_EEPROM;
 8003738:	250a      	movs	r5, #10
 800373a:	e7f0      	b.n	800371e <LoadEEportsDir+0x1a>
	}
	
	return result;
}
 800373c:	0028      	movs	r0, r5
 800373e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003740:	2000001c 	.word	0x2000001c
 8003744:	20007164 	.word	0x20007164

08003748 <SaveEEalias>:
/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
*/
BOS_Status SaveEEalias(void)
{
 8003748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374a:	46de      	mov	lr, fp
 800374c:	464f      	mov	r7, r9
 800374e:	4646      	mov	r6, r8
 8003750:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003752:	2500      	movs	r5, #0
	uint16_t add = 0, temp = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	4699      	mov	r9, r3
	{
		if (moduleAlias[i][0]) 				
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <SaveEEalias+0x7c>)
 800375a:	469b      	mov	fp, r3
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 800375c:	4f1a      	ldr	r7, [pc, #104]	; (80037c8 <SaveEEalias+0x80>)
 800375e:	e004      	b.n	800376a <SaveEEalias+0x22>
 8003760:	3501      	adds	r5, #1
 8003762:	b2ed      	uxtb	r5, r5
 8003764:	783b      	ldrb	r3, [r7, #0]
 8003766:	42ab      	cmp	r3, r5
 8003768:	d325      	bcc.n	80037b6 <SaveEEalias+0x6e>
		if (moduleAlias[i][0]) 				
 800376a:	00ab      	lsls	r3, r5, #2
 800376c:	195b      	adds	r3, r3, r5
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	465a      	mov	r2, fp
 8003772:	5c9b      	ldrb	r3, [r3, r2]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f3      	beq.n	8003760 <SaveEEalias+0x18>
 8003778:	00ae      	lsls	r6, r5, #2
 800377a:	1976      	adds	r6, r6, r5
 800377c:	0076      	lsls	r6, r6, #1
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <SaveEEalias+0x7c>)
 8003780:	469c      	mov	ip, r3
 8003782:	4466      	add	r6, ip
 8003784:	464c      	mov	r4, r9
 8003786:	341c      	adds	r4, #28
 8003788:	b2a4      	uxth	r4, r4
 800378a:	464b      	mov	r3, r9
 800378c:	3321      	adds	r3, #33	; 0x21
 800378e:	b29b      	uxth	r3, r3
 8003790:	4698      	mov	r8, r3
		{
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
			{
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 8003792:	7833      	ldrb	r3, [r6, #0]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	7871      	ldrb	r1, [r6, #1]
 8003798:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 800379a:	b289      	uxth	r1, r1
 800379c:	0020      	movs	r0, r4
 800379e:	f004 fb2b 	bl	8007df8 <EE_WriteVariable>
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 80037a2:	3602      	adds	r6, #2
 80037a4:	3401      	adds	r4, #1
 80037a6:	b2a4      	uxth	r4, r4
 80037a8:	45a0      	cmp	r8, r4
 80037aa:	d1f2      	bne.n	8003792 <SaveEEalias+0x4a>
 80037ac:	464b      	mov	r3, r9
 80037ae:	3305      	adds	r3, #5
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	4699      	mov	r9, r3
 80037b4:	e7d4      	b.n	8003760 <SaveEEalias+0x18>
			}
		}			
	}
	
	return result;
}
 80037b6:	2000      	movs	r0, #0
 80037b8:	bce0      	pop	{r5, r6, r7}
 80037ba:	46bb      	mov	fp, r7
 80037bc:	46b1      	mov	r9, r6
 80037be:	46a8      	mov	r8, r5
 80037c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	20000f48 	.word	0x20000f48
 80037c8:	2000001c 	.word	0x2000001c

080037cc <LoadEEalias>:
/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
*/
BOS_Status LoadEEalias(void)
{
 80037cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ce:	46de      	mov	lr, fp
 80037d0:	4657      	mov	r7, sl
 80037d2:	464e      	mov	r6, r9
 80037d4:	4645      	mov	r5, r8
 80037d6:	b5e0      	push	{r5, r6, r7, lr}
 80037d8:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
 80037da:	466b      	mov	r3, sp
 80037dc:	2200      	movs	r2, #0
 80037de:	80da      	strh	r2, [r3, #6]
 80037e0:	2721      	movs	r7, #33	; 0x21
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 80037e2:	2300      	movs	r3, #0
 80037e4:	4698      	mov	r8, r3
 80037e6:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <LoadEEalias+0x84>)
 80037e8:	469b      	mov	fp, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
			moduleAlias[i][j] = (uint8_t) temp;
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 80037ea:	469a      	mov	sl, r3
 80037ec:	e010      	b.n	8003810 <LoadEEalias+0x44>
 80037ee:	464b      	mov	r3, r9
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	444b      	add	r3, r9
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4453      	add	r3, sl
 80037f8:	2200      	movs	r2, #0
 80037fa:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 80037fc:	4643      	mov	r3, r8
 80037fe:	3301      	adds	r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	4698      	mov	r8, r3
 8003804:	3705      	adds	r7, #5
 8003806:	b2bf      	uxth	r7, r7
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <LoadEEalias+0x88>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	4543      	cmp	r3, r8
 800380e:	d317      	bcc.n	8003840 <LoadEEalias+0x74>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003810:	1f7c      	subs	r4, r7, #5
 8003812:	b2a4      	uxth	r4, r4
 8003814:	4643      	mov	r3, r8
 8003816:	009d      	lsls	r5, r3, #2
 8003818:	4445      	add	r5, r8
 800381a:	006d      	lsls	r5, r5, #1
 800381c:	445d      	add	r5, fp
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 800381e:	466b      	mov	r3, sp
 8003820:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 8003822:	46c1      	mov	r9, r8
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8003824:	0031      	movs	r1, r6
 8003826:	0020      	movs	r0, r4
 8003828:	f004 faba 	bl	8007da0 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 800382c:	8833      	ldrh	r3, [r6, #0]
 800382e:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	702b      	strb	r3, [r5, #0]
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003834:	3401      	adds	r4, #1
 8003836:	b2a4      	uxth	r4, r4
 8003838:	3502      	adds	r5, #2
 800383a:	42a7      	cmp	r7, r4
 800383c:	d1f2      	bne.n	8003824 <LoadEEalias+0x58>
 800383e:	e7d6      	b.n	80037ee <LoadEEalias+0x22>
	}
	
	return result;
}
 8003840:	2000      	movs	r0, #0
 8003842:	b003      	add	sp, #12
 8003844:	bcf0      	pop	{r4, r5, r6, r7}
 8003846:	46bb      	mov	fp, r7
 8003848:	46b2      	mov	sl, r6
 800384a:	46a9      	mov	r9, r5
 800384c:	46a0      	mov	r8, r4
 800384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003850:	20000f48 	.word	0x20000f48
 8003854:	2000001c 	.word	0x2000001c

08003858 <LoadEEgroup>:
/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
*/
BOS_Status LoadEEgroup(void)
{
 8003858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385a:	46d6      	mov	lr, sl
 800385c:	464f      	mov	r7, r9
 800385e:	4646      	mov	r6, r8
 8003860:	b5c0      	push	{r6, r7, lr}
 8003862:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8003864:	466b      	mov	r3, sp
 8003866:	2200      	movs	r2, #0
 8003868:	80da      	strh	r2, [r3, #6]
	
	/* Load group members */
	for(i=0 ; i<N ; i++)			// N modules
 800386a:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <LoadEEgroup+0xa0>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01d      	beq.n	80038ae <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8003872:	2400      	movs	r4, #0
	{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8003874:	4e21      	ldr	r6, [pc, #132]	; (80038fc <LoadEEgroup+0xa4>)
	for(i=0 ; i<N ; i++)			// N modules
 8003876:	4d20      	ldr	r5, [pc, #128]	; (80038f8 <LoadEEgroup+0xa0>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8003878:	b2e1      	uxtb	r1, r4
 800387a:	0049      	lsls	r1, r1, #1
 800387c:	1871      	adds	r1, r6, r1
 800387e:	0020      	movs	r0, r4
 8003880:	30cb      	adds	r0, #203	; 0xcb
 8003882:	b280      	uxth	r0, r0
 8003884:	f004 fa8c 	bl	8007da0 <EE_ReadVariable>
		add++;
 8003888:	1c63      	adds	r3, r4, #1
 800388a:	b29c      	uxth	r4, r3
	for(i=0 ; i<N ; i++)			// N modules
 800388c:	782a      	ldrb	r2, [r5, #0]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	429a      	cmp	r2, r3
 8003892:	d8f1      	bhi.n	8003878 <LoadEEgroup+0x20>
	}

	/* Load group alias */
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8003894:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <LoadEEgroup+0xa8>)
 8003896:	4699      	mov	r9, r3
 8003898:	0027      	movs	r7, r4
 800389a:	379e      	adds	r7, #158	; 0x9e
 800389c:	b2bf      	uxth	r7, r7
 800389e:	34d0      	adds	r4, #208	; 0xd0
 80038a0:	b2a3      	uxth	r3, r4
 80038a2:	4698      	mov	r8, r3
	{
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
		{
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 80038a4:	466b      	mov	r3, sp
 80038a6:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] = (uint8_t) temp;
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 80038a8:	2300      	movs	r3, #0
 80038aa:	469a      	mov	sl, r3
 80038ac:	e00b      	b.n	80038c6 <LoadEEgroup+0x6e>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80038ae:	2400      	movs	r4, #0
 80038b0:	e7f0      	b.n	8003894 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 80038b2:	464b      	mov	r3, r9
 80038b4:	4652      	mov	r2, sl
 80038b6:	725a      	strb	r2, [r3, #9]
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 80038b8:	230a      	movs	r3, #10
 80038ba:	469c      	mov	ip, r3
 80038bc:	44e1      	add	r9, ip
 80038be:	3705      	adds	r7, #5
 80038c0:	b2bf      	uxth	r7, r7
 80038c2:	4547      	cmp	r7, r8
 80038c4:	d010      	beq.n	80038e8 <LoadEEgroup+0x90>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 80038c6:	1f7c      	subs	r4, r7, #5
 80038c8:	b2a4      	uxth	r4, r4
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80038ca:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 80038cc:	0031      	movs	r1, r6
 80038ce:	0020      	movs	r0, r4
 80038d0:	f004 fa66 	bl	8007da0 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 80038d4:	8833      	ldrh	r3, [r6, #0]
 80038d6:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 80038d8:	0a1b      	lsrs	r3, r3, #8
 80038da:	702b      	strb	r3, [r5, #0]
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 80038dc:	3401      	adds	r4, #1
 80038de:	b2a4      	uxth	r4, r4
 80038e0:	3502      	adds	r5, #2
 80038e2:	42bc      	cmp	r4, r7
 80038e4:	d1f2      	bne.n	80038cc <LoadEEgroup+0x74>
 80038e6:	e7e4      	b.n	80038b2 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 80038e8:	2000      	movs	r0, #0
 80038ea:	b002      	add	sp, #8
 80038ec:	bce0      	pop	{r5, r6, r7}
 80038ee:	46ba      	mov	sl, r7
 80038f0:	46b1      	mov	r9, r6
 80038f2:	46a8      	mov	r8, r5
 80038f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	2000001c 	.word	0x2000001c
 80038fc:	20000ea0 	.word	0x20000ea0
 8003900:	20000e3c 	.word	0x20000e3c

08003904 <LoadEEstreams>:
/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
*/
BOS_Status LoadEEstreams(void)
{
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK; 
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 8003908:	210e      	movs	r1, #14
 800390a:	4469      	add	r1, sp
 800390c:	2300      	movs	r3, #0
 800390e:	800b      	strh	r3, [r1, #0]
 8003910:	aa03      	add	r2, sp, #12
 8003912:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8003914:	20e4      	movs	r0, #228	; 0xe4
 8003916:	f004 fa43 	bl	8007da0 <EE_ReadVariable>
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 800391a:	2500      	movs	r5, #0
	if (!status1) {
 800391c:	2800      	cmp	r0, #0
 800391e:	d102      	bne.n	8003926 <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 8003920:	230e      	movs	r3, #14
 8003922:	446b      	add	r3, sp
 8003924:	781d      	ldrb	r5, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 8003926:	210e      	movs	r1, #14
 8003928:	4469      	add	r1, sp
 800392a:	20e5      	movs	r0, #229	; 0xe5
 800392c:	f004 fa38 	bl	8007da0 <EE_ReadVariable>
 8003930:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 8003932:	a903      	add	r1, sp, #12
 8003934:	20e6      	movs	r0, #230	; 0xe6
 8003936:	f004 fa33 	bl	8007da0 <EE_ReadVariable>
	if (!status1 && !status2) {
 800393a:	4304      	orrs	r4, r0
 800393c:	b2a4      	uxth	r4, r4
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 800393e:	2600      	movs	r6, #0
	if (!status1 && !status2) {
 8003940:	2c00      	cmp	r4, #0
 8003942:	d106      	bne.n	8003952 <LoadEEstreams+0x4e>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 8003944:	230e      	movs	r3, #14
 8003946:	446b      	add	r3, sp
 8003948:	881e      	ldrh	r6, [r3, #0]
 800394a:	0436      	lsls	r6, r6, #16
 800394c:	ab03      	add	r3, sp, #12
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 8003952:	210e      	movs	r1, #14
 8003954:	4469      	add	r1, sp
 8003956:	20e7      	movs	r0, #231	; 0xe7
 8003958:	f004 fa22 	bl	8007da0 <EE_ReadVariable>
 800395c:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 800395e:	a903      	add	r1, sp, #12
 8003960:	20e8      	movs	r0, #232	; 0xe8
 8003962:	f004 fa1d 	bl	8007da0 <EE_ReadVariable>
	if (!status1 && !status2) {
 8003966:	4320      	orrs	r0, r4
 8003968:	b280      	uxth	r0, r0
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 800396a:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 800396c:	2800      	cmp	r0, #0
 800396e:	d106      	bne.n	800397e <LoadEEstreams+0x7a>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 8003970:	230e      	movs	r3, #14
 8003972:	446b      	add	r3, sp
 8003974:	881c      	ldrh	r4, [r3, #0]
 8003976:	0424      	lsls	r4, r4, #16
 8003978:	ab03      	add	r3, sp, #12
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 800397e:	210e      	movs	r1, #14
 8003980:	4469      	add	r1, sp
 8003982:	20e9      	movs	r0, #233	; 0xe9
 8003984:	f004 fa0c 	bl	8007da0 <EE_ReadVariable>
	if (!status1) {
 8003988:	2800      	cmp	r0, #0
 800398a:	d107      	bne.n	800399c <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 800398c:	230e      	movs	r3, #14
 800398e:	446b      	add	r3, sp
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	0a19      	lsrs	r1, r3, #8
 8003994:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <LoadEEstreams+0x134>)
 8003996:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 8003998:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <LoadEEstreams+0x138>)
 800399a:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 800399c:	210e      	movs	r1, #14
 800399e:	4469      	add	r1, sp
 80039a0:	20ea      	movs	r0, #234	; 0xea
 80039a2:	f004 f9fd 	bl	8007da0 <EE_ReadVariable>
	if (!status1) {
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d107      	bne.n	80039ba <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 80039aa:	230e      	movs	r3, #14
 80039ac:	446b      	add	r3, sp
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	0a19      	lsrs	r1, r3, #8
 80039b2:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <LoadEEstreams+0x13c>)
 80039b4:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 80039b6:	4a23      	ldr	r2, [pc, #140]	; (8003a44 <LoadEEstreams+0x140>)
 80039b8:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 80039ba:	210e      	movs	r1, #14
 80039bc:	4469      	add	r1, sp
 80039be:	20eb      	movs	r0, #235	; 0xeb
 80039c0:	f004 f9ee 	bl	8007da0 <EE_ReadVariable>
	if (!status1) {
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d107      	bne.n	80039d8 <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 80039c8:	230e      	movs	r3, #14
 80039ca:	446b      	add	r3, sp
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	0a19      	lsrs	r1, r3, #8
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <LoadEEstreams+0x144>)
 80039d2:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 80039d4:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <LoadEEstreams+0x148>)
 80039d6:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if (src1 && dst1)
 80039d8:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <LoadEEstreams+0x134>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <LoadEEstreams+0xe4>
 80039e0:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <LoadEEstreams+0x138>)
 80039e2:	7812      	ldrb	r2, [r2, #0]
 80039e4:	2a00      	cmp	r2, #0
 80039e6:	d112      	bne.n	8003a0e <LoadEEstreams+0x10a>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 80039e8:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <LoadEEstreams+0x13c>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <LoadEEstreams+0xf4>
 80039f0:	4a14      	ldr	r2, [pc, #80]	; (8003a44 <LoadEEstreams+0x140>)
 80039f2:	7812      	ldrb	r2, [r2, #0]
 80039f4:	2a00      	cmp	r2, #0
 80039f6:	d111      	bne.n	8003a1c <LoadEEstreams+0x118>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <LoadEEstreams+0x144>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <LoadEEstreams+0x104>
 8003a00:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <LoadEEstreams+0x148>)
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	2a00      	cmp	r2, #0
 8003a06:	d110      	bne.n	8003a2a <LoadEEstreams+0x126>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
	
	return result;
}
 8003a08:	2000      	movs	r0, #0
 8003a0a:	b004      	add	sp, #16
 8003a0c:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 8003a0e:	9200      	str	r2, [sp, #0]
 8003a10:	0022      	movs	r2, r4
 8003a12:	0031      	movs	r1, r6
 8003a14:	0028      	movs	r0, r5
 8003a16:	f005 fbb5 	bl	8009184 <SetupDMAStreams>
 8003a1a:	e7e5      	b.n	80039e8 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 8003a1c:	9200      	str	r2, [sp, #0]
 8003a1e:	0022      	movs	r2, r4
 8003a20:	0031      	movs	r1, r6
 8003a22:	0028      	movs	r0, r5
 8003a24:	f005 fbae 	bl	8009184 <SetupDMAStreams>
 8003a28:	e7e6      	b.n	80039f8 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 8003a2a:	9200      	str	r2, [sp, #0]
 8003a2c:	0022      	movs	r2, r4
 8003a2e:	0031      	movs	r1, r6
 8003a30:	0028      	movs	r0, r5
 8003a32:	f005 fba7 	bl	8009184 <SetupDMAStreams>
 8003a36:	e7e7      	b.n	8003a08 <LoadEEstreams+0x104>
 8003a38:	20001119 	.word	0x20001119
 8003a3c:	20000e39 	.word	0x20000e39
 8003a40:	2000111a 	.word	0x2000111a
 8003a44:	20000e3a 	.word	0x20000e3a
 8003a48:	2000111b 	.word	0x2000111b
 8003a4c:	20000e3b 	.word	0x20000e3b

08003a50 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
*/
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout, uint8_t src1, uint8_t dst1, uint8_t src2, \
	uint8_t dst2, uint8_t src3, uint8_t dst3)
{
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	46de      	mov	lr, fp
 8003a54:	4657      	mov	r7, sl
 8003a56:	464e      	mov	r6, r9
 8003a58:	4645      	mov	r5, r8
 8003a5a:	b5e0      	push	{r5, r6, r7, lr}
 8003a5c:	000f      	movs	r7, r1
 8003a5e:	0016      	movs	r6, r2
 8003a60:	001c      	movs	r4, r3
 8003a62:	ab0a      	add	r3, sp, #40	; 0x28
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	469b      	mov	fp, r3
 8003a68:	ab0b      	add	r3, sp, #44	; 0x2c
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	469a      	mov	sl, r3
 8003a6e:	ab0c      	add	r3, sp, #48	; 0x30
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	4699      	mov	r9, r3
 8003a74:	ab0d      	add	r3, sp, #52	; 0x34
 8003a76:	781d      	ldrb	r5, [r3, #0]
 8003a78:	ab0e      	add	r3, sp, #56	; 0x38
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK; 
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 8003a7e:	0001      	movs	r1, r0
 8003a80:	20e4      	movs	r0, #228	; 0xe4
 8003a82:	f004 f9b9 	bl	8007df8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 8003a86:	0a39      	lsrs	r1, r7, #8
 8003a88:	b289      	uxth	r1, r1
 8003a8a:	20e5      	movs	r0, #229	; 0xe5
 8003a8c:	f004 f9b4 	bl	8007df8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 8003a90:	b2b9      	uxth	r1, r7
 8003a92:	20e6      	movs	r0, #230	; 0xe6
 8003a94:	f004 f9b0 	bl	8007df8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 8003a98:	0a31      	lsrs	r1, r6, #8
 8003a9a:	b289      	uxth	r1, r1
 8003a9c:	20e7      	movs	r0, #231	; 0xe7
 8003a9e:	f004 f9ab 	bl	8007df8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 8003aa2:	b2b1      	uxth	r1, r6
 8003aa4:	20e8      	movs	r0, #232	; 0xe8
 8003aa6:	f004 f9a7 	bl	8007df8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 8003aaa:	0224      	lsls	r4, r4, #8
 8003aac:	445c      	add	r4, fp
 8003aae:	b2a1      	uxth	r1, r4
 8003ab0:	20e9      	movs	r0, #233	; 0xe9
 8003ab2:	f004 f9a1 	bl	8007df8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 8003ab6:	4653      	mov	r3, sl
 8003ab8:	0219      	lsls	r1, r3, #8
 8003aba:	4449      	add	r1, r9
 8003abc:	b289      	uxth	r1, r1
 8003abe:	20ea      	movs	r0, #234	; 0xea
 8003ac0:	f004 f99a 	bl	8007df8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 8003ac4:	022d      	lsls	r5, r5, #8
 8003ac6:	4445      	add	r5, r8
 8003ac8:	b2a9      	uxth	r1, r5
 8003aca:	20eb      	movs	r0, #235	; 0xeb
 8003acc:	f004 f994 	bl	8007df8 <EE_WriteVariable>
	
	return result;
}
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	bcf0      	pop	{r4, r5, r6, r7}
 8003ad4:	46bb      	mov	fp, r7
 8003ad6:	46b2      	mov	sl, r6
 8003ad8:	46a9      	mov	r9, r5
 8003ada:	46a0      	mov	r8, r4
 8003adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ae0 <LoadEEparams>:
/*-----------------------------------------------------------*/	

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
*/
BOS_Status LoadEEparams(void)
{
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t temp1, temp2, status1, status2; 
	
	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 8003ae4:	208a      	movs	r0, #138	; 0x8a
 8003ae6:	466b      	mov	r3, sp
 8003ae8:	1d99      	adds	r1, r3, #6
 8003aea:	0040      	lsls	r0, r0, #1
 8003aec:	f004 f958 	bl	8007da0 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d000      	beq.n	8003af6 <LoadEEparams+0x16>
 8003af4:	e064      	b.n	8003bc0 <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 8003af6:	466b      	mov	r3, sp
 8003af8:	3306      	adds	r3, #6
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	4a46      	ldr	r2, [pc, #280]	; (8003c18 <LoadEEparams+0x138>)
 8003afe:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 8003b00:	0a1b      	lsrs	r3, r3, #8
 8003b02:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}
		
	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 8003b04:	2016      	movs	r0, #22
 8003b06:	466b      	mov	r3, sp
 8003b08:	1d99      	adds	r1, r3, #6
 8003b0a:	30ff      	adds	r0, #255	; 0xff
 8003b0c:	f004 f948 	bl	8007da0 <EE_ReadVariable>
	if (!status1) 
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d15c      	bne.n	8003bce <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 8003b14:	466b      	mov	r3, sp
 8003b16:	88da      	ldrh	r2, [r3, #6]
 8003b18:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <LoadEEparams+0x138>)
 8003b1a:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 8003b1c:	208b      	movs	r0, #139	; 0x8b
 8003b1e:	466b      	mov	r3, sp
 8003b20:	1d99      	adds	r1, r3, #6
 8003b22:	0040      	lsls	r0, r0, #1
 8003b24:	f004 f93c 	bl	8007da0 <EE_ReadVariable>
	if (!status1) 
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	d153      	bne.n	8003bd4 <LoadEEparams+0xf4>
		BOS.buttons.singleClickTime = temp1;
 8003b2c:	466b      	mov	r3, sp
 8003b2e:	88da      	ldrh	r2, [r3, #6]
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <LoadEEparams+0x138>)
 8003b32:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 8003b34:	2018      	movs	r0, #24
 8003b36:	466b      	mov	r3, sp
 8003b38:	1d99      	adds	r1, r3, #6
 8003b3a:	30ff      	adds	r0, #255	; 0xff
 8003b3c:	f004 f930 	bl	8007da0 <EE_ReadVariable>
	if (!status1) {
 8003b40:	2800      	cmp	r0, #0
 8003b42:	d14a      	bne.n	8003bda <LoadEEparams+0xfa>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 8003b44:	466b      	mov	r3, sp
 8003b46:	3306      	adds	r3, #6
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	4a33      	ldr	r2, [pc, #204]	; (8003c18 <LoadEEparams+0x138>)
 8003b4c:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
	}
	
	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 8003b52:	208c      	movs	r0, #140	; 0x8c
 8003b54:	466b      	mov	r3, sp
 8003b56:	1d99      	adds	r1, r3, #6
 8003b58:	0040      	lsls	r0, r0, #1
 8003b5a:	f004 f921 	bl	8007da0 <EE_ReadVariable>
 8003b5e:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 8003b60:	201a      	movs	r0, #26
 8003b62:	a901      	add	r1, sp, #4
 8003b64:	30ff      	adds	r0, #255	; 0xff
 8003b66:	f004 f91b 	bl	8007da0 <EE_ReadVariable>
	if (!status1 && !status2) 
 8003b6a:	4304      	orrs	r4, r0
 8003b6c:	b2a4      	uxth	r4, r4
 8003b6e:	2c00      	cmp	r4, #0
 8003b70:	d13a      	bne.n	8003be8 <LoadEEparams+0x108>
	{
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 8003b72:	ab01      	add	r3, sp, #4
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	466a      	mov	r2, sp
 8003b7a:	3206      	adds	r2, #6
 8003b7c:	8812      	ldrh	r2, [r2, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	4a25      	ldr	r2, [pc, #148]	; (8003c18 <LoadEEparams+0x138>)
 8003b82:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 8003b84:	208d      	movs	r0, #141	; 0x8d
 8003b86:	466b      	mov	r3, sp
 8003b88:	1d99      	adds	r1, r3, #6
 8003b8a:	0040      	lsls	r0, r0, #1
 8003b8c:	f004 f908 	bl	8007da0 <EE_ReadVariable>
	if (!status1) {
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d137      	bne.n	8003c04 <LoadEEparams+0x124>
		BOS.daylightsaving = (int8_t)temp1;
 8003b94:	466b      	mov	r3, sp
 8003b96:	3306      	adds	r3, #6
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <LoadEEparams+0x138>)
 8003b9c:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}		
	
	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 8003ba2:	201c      	movs	r0, #28
 8003ba4:	466b      	mov	r3, sp
 8003ba6:	1d99      	adds	r1, r3, #6
 8003ba8:	30ff      	adds	r0, #255	; 0xff
 8003baa:	f004 f8f9 	bl	8007da0 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d12e      	bne.n	8003c10 <LoadEEparams+0x130>
		BOS.disableCLI = (uint8_t)temp1;
 8003bb2:	466b      	mov	r3, sp
 8003bb4:	799a      	ldrb	r2, [r3, #6]
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <LoadEEparams+0x138>)
 8003bb8:	76da      	strb	r2, [r3, #27]
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
	}
	
	return result;
}
 8003bba:	2000      	movs	r0, #0
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 8003bc0:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <LoadEEparams+0x138>)
 8003bc2:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <LoadEEparams+0x13c>)
 8003bc4:	7991      	ldrb	r1, [r2, #6]
 8003bc6:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 8003bc8:	79d2      	ldrb	r2, [r2, #7]
 8003bca:	71da      	strb	r2, [r3, #7]
 8003bcc:	e79a      	b.n	8003b04 <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <LoadEEparams+0x13c>)
 8003bd0:	881a      	ldrh	r2, [r3, #0]
 8003bd2:	e7a1      	b.n	8003b18 <LoadEEparams+0x38>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 8003bd4:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <LoadEEparams+0x13c>)
 8003bd6:	885a      	ldrh	r2, [r3, #2]
 8003bd8:	e7aa      	b.n	8003b30 <LoadEEparams+0x50>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <LoadEEparams+0x138>)
 8003bdc:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <LoadEEparams+0x13c>)
 8003bde:	7911      	ldrb	r1, [r2, #4]
 8003be0:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 8003be2:	7952      	ldrb	r2, [r2, #5]
 8003be4:	715a      	strb	r2, [r3, #5]
 8003be6:	e7b4      	b.n	8003b52 <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <LoadEEparams+0x140>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <LoadEEparams+0x11a>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <LoadEEparams+0x138>)
 8003bf2:	22e1      	movs	r2, #225	; 0xe1
 8003bf4:	0252      	lsls	r2, r2, #9
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	e7c4      	b.n	8003b84 <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <LoadEEparams+0x13c>)
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <LoadEEparams+0x138>)
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	e7bf      	b.n	8003b84 <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <LoadEEparams+0x138>)
 8003c06:	2218      	movs	r2, #24
 8003c08:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	731a      	strb	r2, [r3, #12]
 8003c0e:	e7c8      	b.n	8003ba2 <LoadEEparams+0xc2>
		BOS.disableCLI = BOS_default.disableCLI;
 8003c10:	4b02      	ldr	r3, [pc, #8]	; (8003c1c <LoadEEparams+0x13c>)
 8003c12:	7eda      	ldrb	r2, [r3, #27]
 8003c14:	e7cf      	b.n	8003bb6 <LoadEEparams+0xd6>
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	20006d18 	.word	0x20006d18
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	20000aa6 	.word	0x20000aa6

08003c24 <SaveEEparams>:
/*-----------------------------------------------------------*/	

/* --- Save module parameters to emulated EEPROM. --- 
*/
BOS_Status SaveEEparams(void)
{
 8003c24:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK; 
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 8003c26:	4c1a      	ldr	r4, [pc, #104]	; (8003c90 <SaveEEparams+0x6c>)
 8003c28:	79e3      	ldrb	r3, [r4, #7]
 8003c2a:	015b      	lsls	r3, r3, #5
 8003c2c:	79a1      	ldrb	r1, [r4, #6]
 8003c2e:	4319      	orrs	r1, r3
 8003c30:	208a      	movs	r0, #138	; 0x8a
 8003c32:	0040      	lsls	r0, r0, #1
 8003c34:	f004 f8e0 	bl	8007df8 <EE_WriteVariable>
		
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 8003c38:	8821      	ldrh	r1, [r4, #0]
 8003c3a:	2016      	movs	r0, #22
 8003c3c:	30ff      	adds	r0, #255	; 0xff
 8003c3e:	f004 f8db 	bl	8007df8 <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 8003c42:	8861      	ldrh	r1, [r4, #2]
 8003c44:	208b      	movs	r0, #139	; 0x8b
 8003c46:	0040      	lsls	r0, r0, #1
 8003c48:	f004 f8d6 	bl	8007df8 <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 8003c4c:	7963      	ldrb	r3, [r4, #5]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	7b21      	ldrb	r1, [r4, #12]
 8003c52:	4319      	orrs	r1, r3
 8003c54:	2018      	movs	r0, #24
 8003c56:	30ff      	adds	r0, #255	; 0xff
 8003c58:	f004 f8ce 	bl	8007df8 <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8003c5c:	8921      	ldrh	r1, [r4, #8]
 8003c5e:	208c      	movs	r0, #140	; 0x8c
 8003c60:	0040      	lsls	r0, r0, #1
 8003c62:	f004 f8c9 	bl	8007df8 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8003c66:	8961      	ldrh	r1, [r4, #10]
 8003c68:	201a      	movs	r0, #26
 8003c6a:	30ff      	adds	r0, #255	; 0xff
 8003c6c:	f004 f8c4 	bl	8007df8 <EE_WriteVariable>
	
	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8003c70:	7b63      	ldrb	r3, [r4, #13]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	7921      	ldrb	r1, [r4, #4]
 8003c76:	4319      	orrs	r1, r3
 8003c78:	208d      	movs	r0, #141	; 0x8d
 8003c7a:	0040      	lsls	r0, r0, #1
 8003c7c:	f004 f8bc 	bl	8007df8 <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 8003c80:	7ee1      	ldrb	r1, [r4, #27]
 8003c82:	201c      	movs	r0, #28
 8003c84:	30ff      	adds	r0, #255	; 0xff
 8003c86:	f004 f8b7 	bl	8007df8 <EE_WriteVariable>
	
	return result;
}
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	20006d18 	.word	0x20006d18

08003c94 <LoadEEbuttons>:
/*-----------------------------------------------------------*/	

/* --- Load button definitions and events from EEPROM --- 
*/
BOS_Status LoadEEbuttons(void)
{
 8003c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c96:	46ce      	mov	lr, r9
 8003c98:	4647      	mov	r7, r8
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	uint16_t temp16 = 0, status1 = 0; 
 8003c9e:	231e      	movs	r3, #30
 8003ca0:	446b      	add	r3, sp
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 = 0;
	
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8003ca6:	4e36      	ldr	r6, [pc, #216]	; (8003d80 <LoadEEbuttons+0xec>)
	uint16_t temp16 = 0, status1 = 0; 
 8003ca8:	24ec      	movs	r4, #236	; 0xec
 8003caa:	2501      	movs	r5, #1
 8003cac:	270f      	movs	r7, #15
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
				button[i+1].releasedY3Sec = (uint8_t)temp16;
				/* Setup the button and its events */
				AddPortButton(button[i+1].type, i+1);
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8003cae:	2301      	movs	r3, #1
 8003cb0:	4698      	mov	r8, r3
 8003cb2:	e005      	b.n	8003cc0 <LoadEEbuttons+0x2c>
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	3404      	adds	r4, #4
 8003cb8:	b2a4      	uxth	r4, r4
 8003cba:	3609      	adds	r6, #9
 8003cbc:	2d07      	cmp	r5, #7
 8003cbe:	d059      	beq.n	8003d74 <LoadEEbuttons+0xe0>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 8003cc0:	231e      	movs	r3, #30
 8003cc2:	446b      	add	r3, sp
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	0020      	movs	r0, r4
 8003cc8:	f004 f86a 	bl	8007da0 <EE_ReadVariable>
		if(!status1)																												// This variable exists
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d1f1      	bne.n	8003cb4 <LoadEEbuttons+0x20>
			temp8 = (uint8_t)(temp16 >> 8);
 8003cd0:	466b      	mov	r3, sp
 8003cd2:	8bdb      	ldrh	r3, [r3, #30]
 8003cd4:	0a19      	lsrs	r1, r3, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 8003cd6:	0b1a      	lsrs	r2, r3, #12
 8003cd8:	42aa      	cmp	r2, r5
 8003cda:	d1eb      	bne.n	8003cb4 <LoadEEbuttons+0x20>
 8003cdc:	003a      	movs	r2, r7
 8003cde:	400a      	ands	r2, r1
 8003ce0:	420f      	tst	r7, r1
 8003ce2:	d0e7      	beq.n	8003cb4 <LoadEEbuttons+0x20>
				button[i+1].type = temp8 & 0x0F;
 8003ce4:	7032      	strb	r2, [r6, #0]
				button[i+1].events = (uint8_t)temp16;
 8003ce6:	71f3      	strb	r3, [r6, #7]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 8003ce8:	00a8      	lsls	r0, r5, #2
 8003cea:	b283      	uxth	r3, r0
 8003cec:	4699      	mov	r9, r3
 8003cee:	0018      	movs	r0, r3
 8003cf0:	30e9      	adds	r0, #233	; 0xe9
 8003cf2:	b280      	uxth	r0, r0
 8003cf4:	231e      	movs	r3, #30
 8003cf6:	446b      	add	r3, sp
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	f004 f851 	bl	8007da0 <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 8003cfe:	466b      	mov	r3, sp
 8003d00:	8bdb      	ldrh	r3, [r3, #30]
 8003d02:	0a1a      	lsrs	r2, r3, #8
 8003d04:	7072      	strb	r2, [r6, #1]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 8003d06:	7133      	strb	r3, [r6, #4]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 8003d08:	4648      	mov	r0, r9
 8003d0a:	30ea      	adds	r0, #234	; 0xea
 8003d0c:	b280      	uxth	r0, r0
 8003d0e:	231e      	movs	r3, #30
 8003d10:	446b      	add	r3, sp
 8003d12:	0019      	movs	r1, r3
 8003d14:	f004 f844 	bl	8007da0 <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 8003d18:	466b      	mov	r3, sp
 8003d1a:	8bdb      	ldrh	r3, [r3, #30]
 8003d1c:	0a1a      	lsrs	r2, r3, #8
 8003d1e:	70b2      	strb	r2, [r6, #2]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 8003d20:	7173      	strb	r3, [r6, #5]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 8003d22:	4648      	mov	r0, r9
 8003d24:	30eb      	adds	r0, #235	; 0xeb
 8003d26:	b280      	uxth	r0, r0
 8003d28:	231e      	movs	r3, #30
 8003d2a:	446b      	add	r3, sp
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	f004 f837 	bl	8007da0 <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 8003d32:	466b      	mov	r3, sp
 8003d34:	8bdb      	ldrh	r3, [r3, #30]
 8003d36:	0a1a      	lsrs	r2, r3, #8
 8003d38:	70f2      	strb	r2, [r6, #3]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 8003d3a:	71b3      	strb	r3, [r6, #6]
				AddPortButton(button[i+1].type, i+1);
 8003d3c:	b2eb      	uxtb	r3, r5
 8003d3e:	7830      	ldrb	r0, [r6, #0]
 8003d40:	4699      	mov	r9, r3
 8003d42:	0019      	movs	r1, r3
 8003d44:	f004 ff42 	bl	8008bcc <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8003d48:	79f1      	ldrb	r1, [r6, #7]
 8003d4a:	7873      	ldrb	r3, [r6, #1]
 8003d4c:	104a      	asrs	r2, r1, #1
 8003d4e:	4640      	mov	r0, r8
 8003d50:	4002      	ands	r2, r0
 8003d52:	4001      	ands	r1, r0
 8003d54:	2000      	movs	r0, #0
 8003d56:	9005      	str	r0, [sp, #20]
 8003d58:	79b0      	ldrb	r0, [r6, #6]
 8003d5a:	9004      	str	r0, [sp, #16]
 8003d5c:	7970      	ldrb	r0, [r6, #5]
 8003d5e:	9003      	str	r0, [sp, #12]
 8003d60:	7930      	ldrb	r0, [r6, #4]
 8003d62:	9002      	str	r0, [sp, #8]
 8003d64:	78f0      	ldrb	r0, [r6, #3]
 8003d66:	9001      	str	r0, [sp, #4]
 8003d68:	78b0      	ldrb	r0, [r6, #2]
 8003d6a:	9000      	str	r0, [sp, #0]
 8003d6c:	4648      	mov	r0, r9
 8003d6e:	f005 f845 	bl	8008dfc <SetButtonEvents>
 8003d72:	e79f      	b.n	8003cb4 <LoadEEbuttons+0x20>
			}
		}
	}
	
	return result;
}
 8003d74:	2000      	movs	r0, #0
 8003d76:	b009      	add	sp, #36	; 0x24
 8003d78:	bcc0      	pop	{r6, r7}
 8003d7a:	46b9      	mov	r9, r7
 8003d7c:	46b0      	mov	r8, r6
 8003d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d80:	2000148e 	.word	0x2000148e

08003d84 <LoadEEvars>:
{
 8003d84:	b510      	push	{r4, lr}
	LoadROtopology();
 8003d86:	f7ff fc1f 	bl	80035c8 <LoadROtopology>
	LoadEEportsDir();
 8003d8a:	f7ff fcbb 	bl	8003704 <LoadEEportsDir>
	LoadEEalias();
 8003d8e:	f7ff fd1d 	bl	80037cc <LoadEEalias>
	LoadEEgroup();
 8003d92:	f7ff fd61 	bl	8003858 <LoadEEgroup>
	LoadEEstreams();
 8003d96:	f7ff fdb5 	bl	8003904 <LoadEEstreams>
	LoadEEparams();	
 8003d9a:	f7ff fea1 	bl	8003ae0 <LoadEEparams>
	LoadEEbuttons();	
 8003d9e:	f7ff ff79 	bl	8003c94 <LoadEEbuttons>
	LoadROsnippets();
 8003da2:	f7ff fb8b 	bl	80034bc <LoadROsnippets>
}
 8003da6:	bd10      	pop	{r4, pc}

08003da8 <IsLowerCLIbaud>:

/* --- Check if booting into lower CLI baudrate:
				- Connect P1 TXD and P2 RXD to boot CLI at 115200
*/
uint8_t IsLowerCLIbaud(void)
{
 8003da8:	b530      	push	{r4, r5, lr}
 8003daa:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8003dac:	ab04      	add	r3, sp, #16
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	ab07      	add	r3, sp, #28
 8003db2:	2212      	movs	r2, #18
 8003db4:	446a      	add	r2, sp
 8003db6:	a908      	add	r1, sp, #32
 8003db8:	2001      	movs	r0, #1
 8003dba:	f00a fad7 	bl	800e36c <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 8003dbe:	ac03      	add	r4, sp, #12
 8003dc0:	9400      	str	r4, [sp, #0]
 8003dc2:	ab05      	add	r3, sp, #20
 8003dc4:	220e      	movs	r2, #14
 8003dc6:	446a      	add	r2, sp
 8003dc8:	a906      	add	r1, sp, #24
 8003dca:	2002      	movs	r0, #2
 8003dcc:	f00a face 	bl	800e36c <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd4:	2500      	movs	r5, #0
 8003dd6:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8003dd8:	466b      	mov	r3, sp
 8003dda:	8a5b      	ldrh	r3, [r3, #18]
 8003ddc:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 8003dde:	a909      	add	r1, sp, #36	; 0x24
 8003de0:	9808      	ldr	r0, [sp, #32]
 8003de2:	f00e f9ab 	bl	801213c <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de6:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8003de8:	2302      	movs	r3, #2
 8003dea:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 8003dec:	8823      	ldrh	r3, [r4, #0]
 8003dee:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 8003df0:	a909      	add	r1, sp, #36	; 0x24
 8003df2:	9805      	ldr	r0, [sp, #20]
 8003df4:	f00e f9a2 	bl	801213c <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003df8:	466b      	mov	r3, sp
 8003dfa:	8a59      	ldrh	r1, [r3, #18]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	9808      	ldr	r0, [sp, #32]
 8003e00:	f00e fa8c 	bl	801231c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 8003e04:	2005      	movs	r0, #5
 8003e06:	f00a fe47 	bl	800ea98 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003e0a:	8821      	ldrh	r1, [r4, #0]
 8003e0c:	9805      	ldr	r0, [sp, #20]
 8003e0e:	f00e fa7f 	bl	8012310 <HAL_GPIO_ReadPin>
 8003e12:	0003      	movs	r3, r0
		{
			return 1;
		}
	}

	return 0;
 8003e14:	2000      	movs	r0, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <IsLowerCLIbaud+0x76>
}
 8003e1a:	b00f      	add	sp, #60	; 0x3c
 8003e1c:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003e1e:	3312      	adds	r3, #18
 8003e20:	446b      	add	r3, sp
 8003e22:	8819      	ldrh	r1, [r3, #0]
 8003e24:	2201      	movs	r2, #1
 8003e26:	9808      	ldr	r0, [sp, #32]
 8003e28:	f00e fa78 	bl	801231c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 8003e2c:	2005      	movs	r0, #5
 8003e2e:	f00a fe33 	bl	800ea98 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 8003e32:	ab03      	add	r3, sp, #12
 8003e34:	8819      	ldrh	r1, [r3, #0]
 8003e36:	9805      	ldr	r0, [sp, #20]
 8003e38:	f00e fa6a 	bl	8012310 <HAL_GPIO_ReadPin>
 8003e3c:	3801      	subs	r0, #1
 8003e3e:	4243      	negs	r3, r0
 8003e40:	4158      	adcs	r0, r3
			return 1;
 8003e42:	b2c0      	uxtb	r0, r0
 8003e44:	e7e9      	b.n	8003e1a <IsLowerCLIbaud+0x72>
	...

08003e48 <EE_FormatForFactoryReset>:
/*-----------------------------------------------------------*/	

/* --- Format emulated EEPROM for a factory reset
*/
void EE_FormatForFactoryReset(void)
{
 8003e48:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <EE_FormatForFactoryReset+0x20>)
 8003e4c:	4a07      	ldr	r2, [pc, #28]	; (8003e6c <EE_FormatForFactoryReset+0x24>)
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d100      	bne.n	8003e56 <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
		}
	}
	
}
 8003e54:	bd10      	pop	{r4, pc}
		if (EE_Format() == HAL_OK) 
 8003e56:	f004 f87f 	bl	8007f58 <EE_Format>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d1fa      	bne.n	8003e54 <EE_FormatForFactoryReset+0xc>
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 8003e5e:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <EE_FormatForFactoryReset+0x24>)
 8003e60:	4a01      	ldr	r2, [pc, #4]	; (8003e68 <EE_FormatForFactoryReset+0x20>)
 8003e62:	601a      	str	r2, [r3, #0]
}
 8003e64:	e7f6      	b.n	8003e54 <EE_FormatForFactoryReset+0xc>
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	beefdead 	.word	0xbeefdead
 8003e6c:	20007ff0 	.word	0x20007ff0

08003e70 <SetupPortForRemoteBootloaderUpdate>:
				- Set baudrate to 57600
				- Enable even parity
				- Set datasize to 9 bits
*/
void SetupPortForRemoteBootloaderUpdate(uint8_t port)
{
 8003e70:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8003e72:	f00a ffb1 	bl	800edd8 <GetUart>
 8003e76:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 8003e78:	23e1      	movs	r3, #225	; 0xe1
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	015b      	lsls	r3, r3, #5
 8003e88:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 8003e8a:	f00f fe71 	bl	8013b70 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e8e:	6822      	ldr	r2, [r4, #0]
 8003e90:	6813      	ldr	r3, [r2, #0]
 8003e92:	2120      	movs	r1, #32
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bd10      	pop	{r4, pc}
	...

08003e9c <IsModuleParameter>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
*/
uint8_t IsModuleParameter(char* name)
{
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	0006      	movs	r6, r0
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 8003ea0:	4d08      	ldr	r5, [pc, #32]	; (8003ec4 <IsModuleParameter+0x28>)
 8003ea2:	2400      	movs	r4, #0
  {
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 8003ea4:	68a9      	ldr	r1, [r5, #8]
 8003ea6:	0030      	movs	r0, r6
 8003ea8:	f7fc f92c 	bl	8000104 <strcmp>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d006      	beq.n	8003ebe <IsModuleParameter+0x22>
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 8003eb0:	3401      	adds	r4, #1
 8003eb2:	b2e4      	uxtb	r4, r4
 8003eb4:	350c      	adds	r5, #12
 8003eb6:	2c03      	cmp	r4, #3
 8003eb8:	d1f4      	bne.n	8003ea4 <IsModuleParameter+0x8>
			return i+1;
  }
	return 0;
 8003eba:	2000      	movs	r0, #0
}
 8003ebc:	bd70      	pop	{r4, r5, r6, pc}
			return i+1;
 8003ebe:	3401      	adds	r4, #1
 8003ec0:	b2e0      	uxtb	r0, r4
 8003ec2:	e7fb      	b.n	8003ebc <IsModuleParameter+0x20>
 8003ec4:	20000090 	.word	0x20000090

08003ec8 <IsMathOperator>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
*/
uint8_t IsMathOperator(char* string)
{
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	0005      	movs	r5, r0
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
  {
		if (!strcmp(string, "="))
 8003ecc:	491b      	ldr	r1, [pc, #108]	; (8003f3c <IsMathOperator+0x74>)
 8003ece:	f7fc f919 	bl	8000104 <strcmp>
 8003ed2:	0006      	movs	r6, r0
 8003ed4:	2706      	movs	r7, #6
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 8003ed6:	4c1a      	ldr	r4, [pc, #104]	; (8003f40 <IsMathOperator+0x78>)
		if (!strcmp(string, "="))
 8003ed8:	2e00      	cmp	r6, #0
 8003eda:	d023      	beq.n	8003f24 <IsMathOperator+0x5c>
		else if (!strcmp(string, ">"))
 8003edc:	0021      	movs	r1, r4
 8003ede:	0028      	movs	r0, r5
 8003ee0:	f7fc f910 	bl	8000104 <strcmp>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d01f      	beq.n	8003f28 <IsMathOperator+0x60>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 8003ee8:	4916      	ldr	r1, [pc, #88]	; (8003f44 <IsMathOperator+0x7c>)
 8003eea:	0028      	movs	r0, r5
 8003eec:	f7fc f90a 	bl	8000104 <strcmp>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d01b      	beq.n	8003f2c <IsMathOperator+0x64>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 8003ef4:	4914      	ldr	r1, [pc, #80]	; (8003f48 <IsMathOperator+0x80>)
 8003ef6:	0028      	movs	r0, r5
 8003ef8:	f7fc f904 	bl	8000104 <strcmp>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d017      	beq.n	8003f30 <IsMathOperator+0x68>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 8003f00:	4912      	ldr	r1, [pc, #72]	; (8003f4c <IsMathOperator+0x84>)
 8003f02:	0028      	movs	r0, r5
 8003f04:	f7fc f8fe 	bl	8000104 <strcmp>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d013      	beq.n	8003f34 <IsMathOperator+0x6c>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 8003f0c:	4910      	ldr	r1, [pc, #64]	; (8003f50 <IsMathOperator+0x88>)
 8003f0e:	0028      	movs	r0, r5
 8003f10:	f7fc f8f8 	bl	8000104 <strcmp>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d00f      	beq.n	8003f38 <IsMathOperator+0x70>
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 8003f18:	3f01      	subs	r7, #1
 8003f1a:	b2ff      	uxtb	r7, r7
 8003f1c:	2f00      	cmp	r7, #0
 8003f1e:	d1db      	bne.n	8003ed8 <IsMathOperator+0x10>
			return MATH_NOT_EQUAL;
  }
	return 0;
}
 8003f20:	0038      	movs	r0, r7
 8003f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 8003f24:	2701      	movs	r7, #1
 8003f26:	e7fb      	b.n	8003f20 <IsMathOperator+0x58>
			return MATH_GREATER;
 8003f28:	2702      	movs	r7, #2
 8003f2a:	e7f9      	b.n	8003f20 <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003f2c:	2703      	movs	r7, #3
 8003f2e:	e7f7      	b.n	8003f20 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003f30:	2704      	movs	r7, #4
 8003f32:	e7f5      	b.n	8003f20 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003f34:	2705      	movs	r7, #5
 8003f36:	e7f3      	b.n	8003f20 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003f38:	2706      	movs	r7, #6
 8003f3a:	e7f1      	b.n	8003f20 <IsMathOperator+0x58>
 8003f3c:	0801a650 	.word	0x0801a650
 8003f40:	0801a654 	.word	0x0801a654
 8003f44:	0801a658 	.word	0x0801a658
 8003f48:	0801a65c 	.word	0x0801a65c
 8003f4c:	0801a660 	.word	0x0801a660
 8003f50:	0801a664 	.word	0x0801a664

08003f54 <ExploreNeighbors>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
*/
BOS_Status ExploreNeighbors(uint8_t ignore)
{
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f56:	b083      	sub	sp, #12
 8003f58:	0007      	movs	r7, r0
	BOS_Status result = BOS_OK; 

	/* Send Hi messages to adjacent neighbors */
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8003f5a:	2401      	movs	r4, #1
	{
		if (port != ignore) 
		{
			/* This module info */
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003f5c:	4d0e      	ldr	r5, [pc, #56]	; (8003f98 <ExploreNeighbors+0x44>)
			messageParams[1] = (uint8_t) myPN;
			messageParams[2] = port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8003f5e:	2603      	movs	r6, #3
 8003f60:	e003      	b.n	8003f6a <ExploreNeighbors+0x16>
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8003f62:	3401      	adds	r4, #1
 8003f64:	b2e4      	uxtb	r4, r4
 8003f66:	2c06      	cmp	r4, #6
 8003f68:	d012      	beq.n	8003f90 <ExploreNeighbors+0x3c>
		if (port != ignore) 
 8003f6a:	42a7      	cmp	r7, r4
 8003f6c:	d0f9      	beq.n	8003f62 <ExploreNeighbors+0xe>
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <ExploreNeighbors+0x48>)
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	0a1a      	lsrs	r2, r3, #8
 8003f74:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 8003f76:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 8003f78:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8003f7a:	9600      	str	r6, [sp, #0]
 8003f7c:	230a      	movs	r3, #10
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2100      	movs	r1, #0
 8003f82:	0020      	movs	r0, r4
 8003f84:	f005 fa12 	bl	80093ac <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003f88:	200a      	movs	r0, #10
 8003f8a:	f00b f872 	bl	800f072 <osDelay>
 8003f8e:	e7e8      	b.n	8003f62 <ExploreNeighbors+0xe>
		}
	}
	
	return result;
}
 8003f90:	2000      	movs	r0, #0
 8003f92:	b003      	add	sp, #12
 8003f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	20000f18 	.word	0x20000f18
 8003f9c:	20000050 	.word	0x20000050

08003fa0 <FindBroadcastRoutes>:

/* --- Find array broadcast routes starting from a given module 
				(Takes about 50 usec)
*/
BOS_Status FindBroadcastRoutes(uint8_t src)
{
 8003fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa2:	46de      	mov	lr, fp
 8003fa4:	4657      	mov	r7, sl
 8003fa6:	464e      	mov	r6, r9
 8003fa8:	4645      	mov	r5, r8
 8003faa:	b5e0      	push	{r5, r6, r7, lr}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK; 
	uint8_t p = 0, m = 0, level = 0, untaged = 0; 
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8003fb0:	4b45      	ldr	r3, [pc, #276]	; (80040c8 <FindBroadcastRoutes+0x128>)
 8003fb2:	781d      	ldrb	r5, [r3, #0]
 8003fb4:	1deb      	adds	r3, r5, #7
 8003fb6:	08db      	lsrs	r3, r3, #3
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	466a      	mov	r2, sp
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	469d      	mov	sp, r3
 8003fc0:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */
	
	for(m=0 ; m<N ; m++)
 8003fc2:	2d00      	cmp	r5, #0
 8003fc4:	d009      	beq.n	8003fda <FindBroadcastRoutes+0x3a>
 8003fc6:	4a41      	ldr	r2, [pc, #260]	; (80040cc <FindBroadcastRoutes+0x12c>)
 8003fc8:	2300      	movs	r3, #0
	{	
		modules[m] = 0;
 8003fca:	2100      	movs	r1, #0
 8003fcc:	54e1      	strb	r1, [r4, r3]
		bcastRoutes[m] = 0;
 8003fce:	8011      	strh	r1, [r2, #0]
	for(m=0 ; m<N ; m++)
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	3202      	adds	r2, #2
 8003fd4:	b2de      	uxtb	r6, r3
 8003fd6:	42b5      	cmp	r5, r6
 8003fd8:	d8f8      	bhi.n	8003fcc <FindBroadcastRoutes+0x2c>
	}
	modules[src-1] = ++level;					// Tag the source
 8003fda:	3801      	subs	r0, #1
 8003fdc:	2301      	movs	r3, #1
 8003fde:	5423      	strb	r3, [r4, r0]
	
	/* 2. Source module should send to all neighbors */
	
	++level;													// Move one level
	
	for(p=1 ; p<=NumOfPorts ; p++)
 8003fe0:	2216      	movs	r2, #22
 8003fe2:	4342      	muls	r2, r0
 8003fe4:	4b3a      	ldr	r3, [pc, #232]	; (80040d0 <FindBroadcastRoutes+0x130>)
 8003fe6:	18d2      	adds	r2, r2, r3
	modules[src-1] = ++level;					// Tag the source
 8003fe8:	2100      	movs	r1, #0
	{
		if (array[src-1][p]) 
		{
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003fea:	4e38      	ldr	r6, [pc, #224]	; (80040cc <FindBroadcastRoutes+0x12c>)
 8003fec:	0040      	lsls	r0, r0, #1
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4698      	mov	r8, r3
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	469c      	mov	ip, r3
 8003ff6:	607d      	str	r5, [r7, #4]
 8003ff8:	46a3      	mov	fp, r4
 8003ffa:	e003      	b.n	8004004 <FindBroadcastRoutes+0x64>
	for(p=1 ; p<=NumOfPorts ; p++)
 8003ffc:	3101      	adds	r1, #1
 8003ffe:	3202      	adds	r2, #2
 8004000:	2905      	cmp	r1, #5
 8004002:	d011      	beq.n	8004028 <FindBroadcastRoutes+0x88>
		if (array[src-1][p]) 
 8004004:	8853      	ldrh	r3, [r2, #2]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f8      	beq.n	8003ffc <FindBroadcastRoutes+0x5c>
			bcastRoutes[src-1] |= (0x01 << (p-1));
 800400a:	5b85      	ldrh	r5, [r0, r6]
 800400c:	46a9      	mov	r9, r5
 800400e:	4645      	mov	r5, r8
 8004010:	408d      	lsls	r5, r1
 8004012:	46aa      	mov	sl, r5
 8004014:	464d      	mov	r5, r9
 8004016:	4654      	mov	r4, sl
 8004018:	4325      	orrs	r5, r4
 800401a:	5385      	strh	r5, [r0, r6]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 800401c:	08db      	lsrs	r3, r3, #3
 800401e:	445b      	add	r3, fp
 8004020:	3b01      	subs	r3, #1
 8004022:	4664      	mov	r4, ip
 8004024:	701c      	strb	r4, [r3, #0]
 8004026:	e7e9      	b.n	8003ffc <FindBroadcastRoutes+0x5c>
 8004028:	687d      	ldr	r5, [r7, #4]
 800402a:	465c      	mov	r4, fp
	++level;													// Move one level
 800402c:	2302      	movs	r3, #2
 800402e:	4699      	mov	r9, r3
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <FindBroadcastRoutes+0x130>)
 8004032:	3302      	adds	r3, #2
			{			
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
				{
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
					{
						bcastRoutes[m] |= (0x01 << (p-1));
 8004034:	469a      	mov	sl, r3
		++level;																					// Move one level
 8004036:	464b      	mov	r3, r9
 8004038:	3301      	adds	r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	4699      	mov	r9, r3
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 800403e:	2d00      	cmp	r5, #0
 8004040:	d038      	beq.n	80040b4 <FindBroadcastRoutes+0x114>
 8004042:	2300      	movs	r3, #0
		untaged = 0;																			// Reset the untaged counter
 8004044:	2200      	movs	r2, #0
 8004046:	4694      	mov	ip, r2
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8004048:	464a      	mov	r2, r9
 800404a:	1e56      	subs	r6, r2, #1
 800404c:	e021      	b.n	8004092 <FindBroadcastRoutes+0xf2>
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 800404e:	3001      	adds	r0, #1
 8004050:	3102      	adds	r1, #2
 8004052:	2805      	cmp	r0, #5
 8004054:	d015      	beq.n	8004082 <FindBroadcastRoutes+0xe2>
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 8004056:	880a      	ldrh	r2, [r1, #0]
 8004058:	2a00      	cmp	r2, #0
 800405a:	d0f8      	beq.n	800404e <FindBroadcastRoutes+0xae>
 800405c:	08d2      	lsrs	r2, r2, #3
 800405e:	3a01      	subs	r2, #1
 8004060:	5cab      	ldrb	r3, [r5, r2]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f3      	bne.n	800404e <FindBroadcastRoutes+0xae>
						bcastRoutes[m] |= (0x01 << (p-1));
 8004066:	4b19      	ldr	r3, [pc, #100]	; (80040cc <FindBroadcastRoutes+0x12c>)
 8004068:	5ae3      	ldrh	r3, [r4, r3]
 800406a:	2601      	movs	r6, #1
 800406c:	4086      	lsls	r6, r0
 800406e:	4333      	orrs	r3, r6
 8004070:	4e16      	ldr	r6, [pc, #88]	; (80040cc <FindBroadcastRoutes+0x12c>)
 8004072:	53a3      	strh	r3, [r4, r6]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 8004074:	464b      	mov	r3, r9
 8004076:	54ab      	strb	r3, [r5, r2]
						++untaged;
 8004078:	4663      	mov	r3, ip
 800407a:	3301      	adds	r3, #1
 800407c:	b2db      	uxtb	r3, r3
 800407e:	469c      	mov	ip, r3
 8004080:	e7e5      	b.n	800404e <FindBroadcastRoutes+0xae>
 8004082:	002c      	movs	r4, r5
 8004084:	4645      	mov	r5, r8
 8004086:	465b      	mov	r3, fp
 8004088:	687e      	ldr	r6, [r7, #4]
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 800408a:	3301      	adds	r3, #1
 800408c:	b2da      	uxtb	r2, r3
 800408e:	4295      	cmp	r5, r2
 8004090:	d90d      	bls.n	80040ae <FindBroadcastRoutes+0x10e>
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8004092:	5ce2      	ldrb	r2, [r4, r3]
 8004094:	42b2      	cmp	r2, r6
 8004096:	d1f8      	bne.n	800408a <FindBroadcastRoutes+0xea>
 8004098:	2116      	movs	r1, #22
 800409a:	4359      	muls	r1, r3
 800409c:	4451      	add	r1, sl
 800409e:	005a      	lsls	r2, r3, #1
 80040a0:	2000      	movs	r0, #0
 80040a2:	46a8      	mov	r8, r5
 80040a4:	0025      	movs	r5, r4
 80040a6:	0014      	movs	r4, r2
 80040a8:	469b      	mov	fp, r3
 80040aa:	607e      	str	r6, [r7, #4]
 80040ac:	e7d3      	b.n	8004056 <FindBroadcastRoutes+0xb6>
					}
				}			
			}
		}
	} 
	while (untaged);
 80040ae:	4663      	mov	r3, ip
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1c0      	bne.n	8004036 <FindBroadcastRoutes+0x96>

	
	return result;
}
 80040b4:	2000      	movs	r0, #0
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b003      	add	sp, #12
 80040ba:	bcf0      	pop	{r4, r5, r6, r7}
 80040bc:	46bb      	mov	fp, r7
 80040be:	46b2      	mov	sl, r6
 80040c0:	46a9      	mov	r9, r5
 80040c2:	46a0      	mov	r8, r4
 80040c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	2000001c 	.word	0x2000001c
 80040cc:	20000cd0 	.word	0x20000cd0
 80040d0:	20000aa8 	.word	0x20000aa8

080040d4 <FindRoute>:
6- Otherwise, select the unvisited node that is marked with the smallest tentative distance, 
set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID)
{
 80040d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d6:	46de      	mov	lr, fp
 80040d8:	4657      	mov	r7, sl
 80040da:	464e      	mov	r6, r9
 80040dc:	4645      	mov	r5, r8
 80040de:	b5e0      	push	{r5, r6, r7, lr}
 80040e0:	b091      	sub	sp, #68	; 0x44
 80040e2:	0006      	movs	r6, r0
 80040e4:	468a      	mov	sl, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 80040e6:	2400      	movs	r4, #0
 80040e8:	9403      	str	r4, [sp, #12]
 80040ea:	222e      	movs	r2, #46	; 0x2e
 80040ec:	2100      	movs	r1, #0
 80040ee:	a804      	add	r0, sp, #16
 80040f0:	f010 f917 	bl	8014322 <memset>
#endif
	
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
	
	memset(route,0,sizeof(route));
 80040f4:	2219      	movs	r2, #25
 80040f6:	2100      	movs	r1, #0
 80040f8:	4858      	ldr	r0, [pc, #352]	; (800425c <FindRoute+0x188>)
 80040fa:	f010 f912 	bl	8014322 <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 80040fe:	0035      	movs	r5, r6
 8004100:	1e70      	subs	r0, r6, #1
 8004102:	4b57      	ldr	r3, [pc, #348]	; (8004260 <FindRoute+0x18c>)
 8004104:	541c      	strb	r4, [r3, r0]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 8004106:	4b57      	ldr	r3, [pc, #348]	; (8004264 <FindRoute+0x190>)
 8004108:	541c      	strb	r4, [r3, r0]
		
	/* Check adjacent neighbors first! */
	for(int col=1 ; col<=6 ; col++)
 800410a:	2616      	movs	r6, #22
 800410c:	4370      	muls	r0, r6
 800410e:	4e56      	ldr	r6, [pc, #344]	; (8004268 <FindRoute+0x194>)
 8004110:	1981      	adds	r1, r0, r6
 8004112:	9101      	str	r1, [sp, #4]
 8004114:	2001      	movs	r0, #1
	{
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8004116:	4653      	mov	r3, sl
 8004118:	b29a      	uxth	r2, r3
 800411a:	e002      	b.n	8004122 <FindRoute+0x4e>
	for(int col=1 ; col<=6 ; col++)
 800411c:	3001      	adds	r0, #1
 800411e:	2807      	cmp	r0, #7
 8004120:	d010      	beq.n	8004144 <FindRoute+0x70>
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8004122:	0043      	lsls	r3, r0, #1
 8004124:	5acb      	ldrh	r3, [r1, r3]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f8      	beq.n	800411c <FindRoute+0x48>
 800412a:	08db      	lsrs	r3, r3, #3
 800412c:	4293      	cmp	r3, r2
 800412e:	d1f5      	bne.n	800411c <FindRoute+0x48>
			routeDist[desID-1] = 1;
 8004130:	4b4b      	ldr	r3, [pc, #300]	; (8004260 <FindRoute+0x18c>)
 8004132:	4453      	add	r3, sl
 8004134:	3b01      	subs	r3, #1
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 800413a:	4b48      	ldr	r3, [pc, #288]	; (800425c <FindRoute+0x188>)
 800413c:	4652      	mov	r2, sl
 800413e:	701a      	strb	r2, [r3, #0]
			return col;	
 8004140:	b2c0      	uxtb	r0, r0
 8004142:	e083      	b.n	800424c <FindRoute+0x178>
		}
	}						
	
	/* Initialization */
	for (int i=1 ; i<=N ; i++)   					
 8004144:	4b49      	ldr	r3, [pc, #292]	; (800426c <FindRoute+0x198>)
 8004146:	7819      	ldrb	r1, [r3, #0]
 8004148:	2900      	cmp	r1, #0
 800414a:	dd14      	ble.n	8004176 <FindRoute+0xa2>
 800414c:	2301      	movs	r3, #1
	{
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 800414e:	4a44      	ldr	r2, [pc, #272]	; (8004260 <FindRoute+0x18c>)
 8004150:	1e54      	subs	r4, r2, #1
 8004152:	22ff      	movs	r2, #255	; 0xff
 8004154:	4690      	mov	r8, r2
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8004156:	4a43      	ldr	r2, [pc, #268]	; (8004264 <FindRoute+0x190>)
 8004158:	1e50      	subs	r0, r2, #1
 800415a:	2200      	movs	r2, #0
 800415c:	4694      	mov	ip, r2
 800415e:	e002      	b.n	8004166 <FindRoute+0x92>
	for (int i=1 ; i<=N ; i++)   					
 8004160:	3301      	adds	r3, #1
 8004162:	428b      	cmp	r3, r1
 8004164:	dc07      	bgt.n	8004176 <FindRoute+0xa2>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 8004166:	429d      	cmp	r5, r3
 8004168:	d0fa      	beq.n	8004160 <FindRoute+0x8c>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 800416a:	4642      	mov	r2, r8
 800416c:	54e2      	strb	r2, [r4, r3]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 800416e:	181a      	adds	r2, r3, r0
 8004170:	4666      	mov	r6, ip
 8004172:	7016      	strb	r6, [r2, #0]
 8004174:	e7f4      	b.n	8004160 <FindRoute+0x8c>
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8004176:	2400      	movs	r4, #0
 8004178:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <FindRoute+0x194>)
 800417a:	4698      	mov	r8, r3
 800417c:	230c      	movs	r3, #12
 800417e:	4443      	add	r3, r8
 8004180:	4699      	mov	r9, r3
			if (array[u-1][n])										// There's a neighbor v at this port n
			{	
				v = (array[u-1][n]>>3);
				if (!Q[v-1])												// v is still in Q
				{
					alt = routeDist[u-1] + 1;					// Add one hop
 8004182:	4d37      	ldr	r5, [pc, #220]	; (8004260 <FindRoute+0x18c>)
 8004184:	46d3      	mov	fp, sl
	while (!QnotEmpty(Q))
 8004186:	a803      	add	r0, sp, #12
 8004188:	f7ff f986 	bl	8003498 <QnotEmpty>
 800418c:	2800      	cmp	r0, #0
 800418e:	d12e      	bne.n	80041ee <FindRoute+0x11a>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8004190:	a903      	add	r1, sp, #12
 8004192:	4833      	ldr	r0, [pc, #204]	; (8004260 <FindRoute+0x18c>)
 8004194:	f7ff f962 	bl	800345c <minArr>
 8004198:	3001      	adds	r0, #1
 800419a:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 800419c:	455c      	cmp	r4, fp
 800419e:	d00b      	beq.n	80041b8 <FindRoute+0xe4>
			Q[u-1] = 1;													// Remove u from Q 
 80041a0:	1e67      	subs	r7, r4, #1
 80041a2:	ab03      	add	r3, sp, #12
 80041a4:	2201      	movs	r2, #1
 80041a6:	55da      	strb	r2, [r3, r7]
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 80041a8:	2016      	movs	r0, #22
 80041aa:	4378      	muls	r0, r7
 80041ac:	4643      	mov	r3, r8
 80041ae:	18c1      	adds	r1, r0, r3
 80041b0:	4448      	add	r0, r9
				if (!Q[v-1])												// v is still in Q
 80041b2:	aa03      	add	r2, sp, #12
 80041b4:	46ba      	mov	sl, r7
 80041b6:	e005      	b.n	80041c4 <FindRoute+0xf0>
 80041b8:	46da      	mov	sl, fp
		u = minArr(routeDist, Q)+1;						// Source node in first case
 80041ba:	465c      	mov	r4, fp
 80041bc:	e018      	b.n	80041f0 <FindRoute+0x11c>
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 80041be:	3102      	adds	r1, #2
 80041c0:	4281      	cmp	r1, r0
 80041c2:	d0e0      	beq.n	8004186 <FindRoute+0xb2>
			if (array[u-1][n])										// There's a neighbor v at this port n
 80041c4:	884b      	ldrh	r3, [r1, #2]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f9      	beq.n	80041be <FindRoute+0xea>
				v = (array[u-1][n]>>3);
 80041ca:	08db      	lsrs	r3, r3, #3
				if (!Q[v-1])												// v is still in Q
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	5cd6      	ldrb	r6, [r2, r3]
 80041d2:	2e00      	cmp	r6, #0
 80041d4:	d1f3      	bne.n	80041be <FindRoute+0xea>
					alt = routeDist[u-1] + 1;					// Add one hop
 80041d6:	4656      	mov	r6, sl
 80041d8:	5dae      	ldrb	r6, [r5, r6]
 80041da:	3601      	adds	r6, #1
 80041dc:	b2f6      	uxtb	r6, r6
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 80041de:	5cef      	ldrb	r7, [r5, r3]
 80041e0:	42b7      	cmp	r7, r6
 80041e2:	d9ec      	bls.n	80041be <FindRoute+0xea>
					{
						routeDist[v-1] = alt; 
 80041e4:	4f1e      	ldr	r7, [pc, #120]	; (8004260 <FindRoute+0x18c>)
 80041e6:	54fe      	strb	r6, [r7, r3]
						routePrev[v-1] = u; 
 80041e8:	4e1e      	ldr	r6, [pc, #120]	; (8004264 <FindRoute+0x190>)
 80041ea:	54f4      	strb	r4, [r6, r3]
 80041ec:	e7e7      	b.n	80041be <FindRoute+0xea>
 80041ee:	46da      	mov	sl, fp
	}	
		
finishedRoute:
		
	/* Build the virtual route */	
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 80041f0:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <FindRoute+0x190>)
 80041f2:	191b      	adds	r3, r3, r4
 80041f4:	3b01      	subs	r3, #1
 80041f6:	7819      	ldrb	r1, [r3, #0]
 80041f8:	2300      	movs	r3, #0
 80041fa:	2900      	cmp	r1, #0
 80041fc:	d00d      	beq.n	800421a <FindRoute+0x146>
	{
		route[j++] = u;          				// Push the vertex onto the stack
 80041fe:	4d17      	ldr	r5, [pc, #92]	; (800425c <FindRoute+0x188>)
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8004200:	4818      	ldr	r0, [pc, #96]	; (8004264 <FindRoute+0x190>)
 8004202:	e000      	b.n	8004206 <FindRoute+0x132>
 8004204:	0011      	movs	r1, r2
		route[j++] = u;          				// Push the vertex onto the stack
 8004206:	001a      	movs	r2, r3
 8004208:	3301      	adds	r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	54ac      	strb	r4, [r5, r2]
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 800420e:	1842      	adds	r2, r0, r1
 8004210:	3a01      	subs	r2, #1
 8004212:	7812      	ldrb	r2, [r2, #0]
 8004214:	000c      	movs	r4, r1
 8004216:	2a00      	cmp	r2, #0
 8004218:	d1f4      	bne.n	8004204 <FindRoute+0x130>
		u = routePrev[u-1];           	// Traverse from target to source
	}
	
	/* Check which port leads to the correct module */
	for(int col=1 ; col<=6 ; col++)	
 800421a:	2001      	movs	r0, #1
	{					
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 800421c:	4c0f      	ldr	r4, [pc, #60]	; (800425c <FindRoute+0x188>)
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <FindRoute+0x18c>)
 8004220:	4453      	add	r3, sl
 8004222:	001f      	movs	r7, r3
 8004224:	3f01      	subs	r7, #1
 8004226:	9901      	ldr	r1, [sp, #4]
 8004228:	e002      	b.n	8004230 <FindRoute+0x15c>
	for(int col=1 ; col<=6 ; col++)	
 800422a:	3001      	adds	r0, #1
 800422c:	2807      	cmp	r0, #7
 800422e:	d00c      	beq.n	800424a <FindRoute+0x176>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8004230:	0043      	lsls	r3, r0, #1
 8004232:	5acb      	ldrh	r3, [r1, r3]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f8      	beq.n	800422a <FindRoute+0x156>
 8004238:	783a      	ldrb	r2, [r7, #0]
 800423a:	18a2      	adds	r2, r4, r2
 800423c:	3a01      	subs	r2, #1
 800423e:	7812      	ldrb	r2, [r2, #0]
 8004240:	08db      	lsrs	r3, r3, #3
 8004242:	429a      	cmp	r2, r3
 8004244:	d1f1      	bne.n	800422a <FindRoute+0x156>
			return col;	
 8004246:	b2c0      	uxtb	r0, r0
 8004248:	e000      	b.n	800424c <FindRoute+0x178>
		}
	}	

	return 0;			
 800424a:	2000      	movs	r0, #0
}
 800424c:	b011      	add	sp, #68	; 0x44
 800424e:	bcf0      	pop	{r4, r5, r6, r7}
 8004250:	46bb      	mov	fp, r7
 8004252:	46b2      	mov	sl, r6
 8004254:	46a9      	mov	r9, r5
 8004256:	46a0      	mov	r8, r4
 8004258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	20006dd0 	.word	0x20006dd0
 8004260:	200010e4 	.word	0x200010e4
 8004264:	20001100 	.word	0x20001100
 8004268:	20000aa8 	.word	0x20000aa8
 800426c:	2000001c 	.word	0x2000001c

08004270 <remoteBootloaderUpdate>:
{
 8004270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004272:	46ce      	mov	lr, r9
 8004274:	4647      	mov	r7, r8
 8004276:	b580      	push	{r7, lr}
 8004278:	b085      	sub	sp, #20
 800427a:	4680      	mov	r8, r0
 800427c:	000d      	movs	r5, r1
 800427e:	0016      	movs	r6, r2
 8004280:	001f      	movs	r7, r3
	myOutport = FindRoute(myID, dst);
 8004282:	4b36      	ldr	r3, [pc, #216]	; (800435c <remoteBootloaderUpdate+0xec>)
 8004284:	7818      	ldrb	r0, [r3, #0]
 8004286:	f7ff ff25 	bl	80040d4 <FindRoute>
 800428a:	0004      	movs	r4, r0
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 800428c:	2f00      	cmp	r7, #0
 800428e:	d024      	beq.n	80042da <remoteBootloaderUpdate+0x6a>
 8004290:	4b32      	ldr	r3, [pc, #200]	; (800435c <remoteBootloaderUpdate+0xec>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	42ab      	cmp	r3, r5
 8004296:	d05e      	beq.n	8004356 <remoteBootloaderUpdate+0xe6>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8004298:	2200      	movs	r2, #0
 800429a:	4691      	mov	r9, r2
	if (src == myID)
 800429c:	4543      	cmp	r3, r8
 800429e:	d050      	beq.n	8004342 <remoteBootloaderUpdate+0xd2>
	SetupPortForRemoteBootloaderUpdate(inport);
 80042a0:	0030      	movs	r0, r6
 80042a2:	f7ff fde5 	bl	8003e70 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 80042a6:	0020      	movs	r0, r4
 80042a8:	f7ff fde2 	bl	8003e70 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 80042ac:	4b2b      	ldr	r3, [pc, #172]	; (800435c <remoteBootloaderUpdate+0xec>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	454b      	cmp	r3, r9
 80042b2:	d03f      	beq.n	8004334 <remoteBootloaderUpdate+0xc4>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 80042b4:	4b29      	ldr	r3, [pc, #164]	; (800435c <remoteBootloaderUpdate+0xec>)
 80042b6:	7819      	ldrb	r1, [r3, #0]
 80042b8:	2300      	movs	r3, #0
 80042ba:	9303      	str	r3, [sp, #12]
 80042bc:	3b01      	subs	r3, #1
 80042be:	9302      	str	r3, [sp, #8]
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	3303      	adds	r3, #3
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	000b      	movs	r3, r1
 80042c8:	0022      	movs	r2, r4
 80042ca:	0030      	movs	r0, r6
 80042cc:	f005 fabe 	bl	800984c <StartScastDMAStream>
}
 80042d0:	b005      	add	sp, #20
 80042d2:	bcc0      	pop	{r6, r7}
 80042d4:	46b9      	mov	r9, r7
 80042d6:	46b0      	mov	r8, r6
 80042d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst) == 1)
 80042da:	4b21      	ldr	r3, [pc, #132]	; (8004360 <remoteBootloaderUpdate+0xf0>)
 80042dc:	195b      	adds	r3, r3, r5
 80042de:	3b01      	subs	r3, #1
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	2a01      	cmp	r2, #1
 80042e4:	d022      	beq.n	800432c <remoteBootloaderUpdate+0xbc>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 80042e6:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <remoteBootloaderUpdate+0xf4>)
 80042e8:	189b      	adds	r3, r3, r2
 80042ea:	3b01      	subs	r3, #1
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	4699      	mov	r9, r3
	if (src == myID)
 80042f0:	4b1a      	ldr	r3, [pc, #104]	; (800435c <remoteBootloaderUpdate+0xec>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	4543      	cmp	r3, r8
 80042f6:	d1d3      	bne.n	80042a0 <remoteBootloaderUpdate+0x30>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80042f8:	f00a ffde 	bl	800f2b8 <FreeRTOS_CLIGetOutputBuffer>
 80042fc:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 80042fe:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <remoteBootloaderUpdate+0xf8>)
 8004300:	6819      	ldr	r1, [r3, #0]
 8004302:	002a      	movs	r2, r5
 8004304:	f010 fa02 	bl	801470c <sprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 8004308:	4b18      	ldr	r3, [pc, #96]	; (800436c <remoteBootloaderUpdate+0xfc>)
 800430a:	6819      	ldr	r1, [r3, #0]
 800430c:	4640      	mov	r0, r8
 800430e:	f010 fa1d 	bl	801474c <strcat>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 8004312:	4640      	mov	r0, r8
 8004314:	f7fb ff00 	bl	8000118 <strlen>
 8004318:	b282      	uxth	r2, r0
 800431a:	2332      	movs	r3, #50	; 0x32
 800431c:	4641      	mov	r1, r8
 800431e:	0030      	movs	r0, r6
 8004320:	f00a fda4 	bl	800ee6c <writePxITMutex>
		Delay_ms(100);
 8004324:	2064      	movs	r0, #100	; 0x64
 8004326:	f00c ff17 	bl	8011158 <HAL_Delay>
 800432a:	e7b9      	b.n	80042a0 <remoteBootloaderUpdate+0x30>
			lastModule = myID;
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <remoteBootloaderUpdate+0xec>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	4699      	mov	r9, r3
 8004332:	e7dd      	b.n	80042f0 <remoteBootloaderUpdate+0x80>
		SwapUartPins(GetUart(myOutport), REVERSED);
 8004334:	0020      	movs	r0, r4
 8004336:	f00a fd4f 	bl	800edd8 <GetUart>
 800433a:	2101      	movs	r1, #1
 800433c:	f00a fde4 	bl	800ef08 <SwapUartPins>
 8004340:	e7b8      	b.n	80042b4 <remoteBootloaderUpdate+0x44>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8004342:	f00a ffb9 	bl	800f2b8 <FreeRTOS_CLIGetOutputBuffer>
 8004346:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <remoteBootloaderUpdate+0x100>)
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	003b      	movs	r3, r7
 800434e:	002a      	movs	r2, r5
 8004350:	f010 f9dc 	bl	801470c <sprintf>
 8004354:	e7d8      	b.n	8004308 <remoteBootloaderUpdate+0x98>
		lastModule = myID;
 8004356:	46a9      	mov	r9, r5
		myOutport = outport;
 8004358:	003c      	movs	r4, r7
 800435a:	e79f      	b.n	800429c <remoteBootloaderUpdate+0x2c>
 800435c:	2000104c 	.word	0x2000104c
 8004360:	200010e4 	.word	0x200010e4
 8004364:	20006dd0 	.word	0x20006dd0
 8004368:	20000078 	.word	0x20000078
 800436c:	20000080 	.word	0x20000080
 8004370:	2000007c 	.word	0x2000007c

08004374 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
*/
void DisplayTopology(uint8_t port)
{
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	46de      	mov	lr, fp
 8004378:	4657      	mov	r7, sl
 800437a:	464e      	mov	r6, r9
 800437c:	4645      	mov	r5, r8
 800437e:	b5e0      	push	{r5, r6, r7, lr}
 8004380:	b083      	sub	sp, #12
 8004382:	0007      	movs	r7, r0
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8004384:	4c5b      	ldr	r4, [pc, #364]	; (80044f4 <DisplayTopology+0x180>)
 8004386:	4b5c      	ldr	r3, [pc, #368]	; (80044f8 <DisplayTopology+0x184>)
 8004388:	0022      	movs	r2, r4
 800438a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800438c:	c223      	stmia	r2!, {r0, r1, r5}
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	6011      	str	r1, [r2, #0]
 8004392:	889b      	ldrh	r3, [r3, #4]
 8004394:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004396:	0020      	movs	r0, r4
 8004398:	f7fb febe 	bl	8000118 <strlen>
 800439c:	b282      	uxth	r2, r0
 800439e:	2301      	movs	r3, #1
 80043a0:	425b      	negs	r3, r3
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	3333      	adds	r3, #51	; 0x33
 80043a6:	0021      	movs	r1, r4
 80043a8:	0038      	movs	r0, r7
 80043aa:	f00a fd33 	bl	800ee14 <writePxMutex>
 80043ae:	2401      	movs	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
	{
		sprintf(pcUserMessage, "P%d\t", i);
 80043b0:	4b52      	ldr	r3, [pc, #328]	; (80044fc <DisplayTopology+0x188>)
 80043b2:	4698      	mov	r8, r3
 80043b4:	4d4f      	ldr	r5, [pc, #316]	; (80044f4 <DisplayTopology+0x180>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80043b6:	2601      	movs	r6, #1
 80043b8:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 80043ba:	0022      	movs	r2, r4
 80043bc:	4641      	mov	r1, r8
 80043be:	0028      	movs	r0, r5
 80043c0:	f010 f9a4 	bl	801470c <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80043c4:	0028      	movs	r0, r5
 80043c6:	f7fb fea7 	bl	8000118 <strlen>
 80043ca:	b282      	uxth	r2, r0
 80043cc:	9600      	str	r6, [sp, #0]
 80043ce:	2332      	movs	r3, #50	; 0x32
 80043d0:	0029      	movs	r1, r5
 80043d2:	0038      	movs	r0, r7
 80043d4:	f00a fd1e 	bl	800ee14 <writePxMutex>
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 80043d8:	3401      	adds	r4, #1
 80043da:	2c06      	cmp	r4, #6
 80043dc:	d1ed      	bne.n	80043ba <DisplayTopology+0x46>
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 80043de:	2301      	movs	r3, #1
 80043e0:	425b      	negs	r3, r3
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	3333      	adds	r3, #51	; 0x33
 80043e6:	2203      	movs	r2, #3
 80043e8:	4945      	ldr	r1, [pc, #276]	; (8004500 <DisplayTopology+0x18c>)
 80043ea:	0038      	movs	r0, r7
 80043ec:	f00a fd12 	bl	800ee14 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row=0 ; row<N ; row++)
 80043f0:	4b44      	ldr	r3, [pc, #272]	; (8004504 <DisplayTopology+0x190>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d06c      	beq.n	80044d2 <DisplayTopology+0x15e>
 80043f8:	2300      	movs	r3, #0
 80043fa:	4699      	mov	r9, r3
	{
		sprintf(pcUserMessage, "Module %d:\t",row+1);
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80043fc:	3b01      	subs	r3, #1
 80043fe:	4698      	mov	r8, r3
		/* Module PN */
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8004400:	4b41      	ldr	r3, [pc, #260]	; (8004508 <DisplayTopology+0x194>)
 8004402:	469b      	mov	fp, r3
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
		{
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t",0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 8004404:	4b41      	ldr	r3, [pc, #260]	; (800450c <DisplayTopology+0x198>)
 8004406:	469a      	mov	sl, r3
 8004408:	e02d      	b.n	8004466 <DisplayTopology+0xf2>
 800440a:	2307      	movs	r3, #7
 800440c:	4013      	ands	r3, r2
 800440e:	08d2      	lsrs	r2, r2, #3
 8004410:	4651      	mov	r1, sl
 8004412:	4838      	ldr	r0, [pc, #224]	; (80044f4 <DisplayTopology+0x180>)
 8004414:	f010 f97a 	bl	801470c <sprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 8004418:	4d36      	ldr	r5, [pc, #216]	; (80044f4 <DisplayTopology+0x180>)
 800441a:	0028      	movs	r0, r5
 800441c:	f7fb fe7c 	bl	8000118 <strlen>
 8004420:	b282      	uxth	r2, r0
 8004422:	4643      	mov	r3, r8
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	2332      	movs	r3, #50	; 0x32
 8004428:	0029      	movs	r1, r5
 800442a:	0038      	movs	r0, r7
 800442c:	f00a fcf2 	bl	800ee14 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8004430:	3402      	adds	r4, #2
 8004432:	42b4      	cmp	r4, r6
 8004434:	d007      	beq.n	8004446 <DisplayTopology+0xd2>
			if (!array[row][col])
 8004436:	8862      	ldrh	r2, [r4, #2]
 8004438:	2a00      	cmp	r2, #0
 800443a:	d1e6      	bne.n	800440a <DisplayTopology+0x96>
				sprintf(pcUserMessage, "%d\t",0);
 800443c:	4934      	ldr	r1, [pc, #208]	; (8004510 <DisplayTopology+0x19c>)
 800443e:	482d      	ldr	r0, [pc, #180]	; (80044f4 <DisplayTopology+0x180>)
 8004440:	f010 f964 	bl	801470c <sprintf>
 8004444:	e7e8      	b.n	8004418 <DisplayTopology+0xa4>
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 8004446:	4643      	mov	r3, r8
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	2332      	movs	r3, #50	; 0x32
 800444c:	2202      	movs	r2, #2
 800444e:	4931      	ldr	r1, [pc, #196]	; (8004514 <DisplayTopology+0x1a0>)
 8004450:	0038      	movs	r0, r7
 8004452:	f00a fcdf 	bl	800ee14 <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8004456:	464b      	mov	r3, r9
 8004458:	3301      	adds	r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	4699      	mov	r9, r3
 800445e:	4b29      	ldr	r3, [pc, #164]	; (8004504 <DisplayTopology+0x190>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	454b      	cmp	r3, r9
 8004464:	d935      	bls.n	80044d2 <DisplayTopology+0x15e>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 8004466:	464b      	mov	r3, r9
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	4c22      	ldr	r4, [pc, #136]	; (80044f4 <DisplayTopology+0x180>)
 800446c:	492a      	ldr	r1, [pc, #168]	; (8004518 <DisplayTopology+0x1a4>)
 800446e:	0020      	movs	r0, r4
 8004470:	f010 f94c 	bl	801470c <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004474:	0020      	movs	r0, r4
 8004476:	f7fb fe4f 	bl	8000118 <strlen>
 800447a:	b282      	uxth	r2, r0
 800447c:	4643      	mov	r3, r8
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	2332      	movs	r3, #50	; 0x32
 8004482:	0021      	movs	r1, r4
 8004484:	0038      	movs	r0, r7
 8004486:	f00a fcc5 	bl	800ee14 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 800448a:	2616      	movs	r6, #22
 800448c:	464b      	mov	r3, r9
 800448e:	435e      	muls	r6, r3
 8004490:	465b      	mov	r3, fp
 8004492:	5af3      	ldrh	r3, [r6, r3]
 8004494:	0059      	lsls	r1, r3, #1
 8004496:	18c9      	adds	r1, r1, r3
 8004498:	0049      	lsls	r1, r1, #1
 800449a:	4b20      	ldr	r3, [pc, #128]	; (800451c <DisplayTopology+0x1a8>)
 800449c:	18c9      	adds	r1, r1, r3
 800449e:	2205      	movs	r2, #5
 80044a0:	0020      	movs	r0, r4
 80044a2:	f010 f987 	bl	80147b4 <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 80044a6:	4643      	mov	r3, r8
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2332      	movs	r3, #50	; 0x32
 80044ac:	2205      	movs	r2, #5
 80044ae:	0021      	movs	r1, r4
 80044b0:	0038      	movs	r0, r7
 80044b2:	f00a fcaf 	bl	800ee14 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 80044b6:	4643      	mov	r3, r8
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2332      	movs	r3, #50	; 0x32
 80044bc:	2201      	movs	r2, #1
 80044be:	4918      	ldr	r1, [pc, #96]	; (8004520 <DisplayTopology+0x1ac>)
 80044c0:	0038      	movs	r0, r7
 80044c2:	f00a fca7 	bl	800ee14 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 80044c6:	465b      	mov	r3, fp
 80044c8:	18f4      	adds	r4, r6, r3
 80044ca:	4b16      	ldr	r3, [pc, #88]	; (8004524 <DisplayTopology+0x1b0>)
 80044cc:	469c      	mov	ip, r3
 80044ce:	4466      	add	r6, ip
 80044d0:	e7b1      	b.n	8004436 <DisplayTopology+0xc2>
	}
	
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 80044d2:	2301      	movs	r3, #1
 80044d4:	425b      	negs	r3, r3
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	3333      	adds	r3, #51	; 0x33
 80044da:	2201      	movs	r2, #1
 80044dc:	4912      	ldr	r1, [pc, #72]	; (8004528 <DisplayTopology+0x1b4>)
 80044de:	0038      	movs	r0, r7
 80044e0:	f00a fc98 	bl	800ee14 <writePxMutex>
}
 80044e4:	b003      	add	sp, #12
 80044e6:	bcf0      	pop	{r4, r5, r6, r7}
 80044e8:	46bb      	mov	fp, r7
 80044ea:	46b2      	mov	sl, r6
 80044ec:	46a9      	mov	r9, r5
 80044ee:	46a0      	mov	r8, r4
 80044f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	20001078 	.word	0x20001078
 80044f8:	0801a668 	.word	0x0801a668
 80044fc:	0801a67c 	.word	0x0801a67c
 8004500:	0801b070 	.word	0x0801b070
 8004504:	2000001c 	.word	0x2000001c
 8004508:	20000aa8 	.word	0x20000aa8
 800450c:	0801a694 	.word	0x0801a694
 8004510:	0801a690 	.word	0x0801a690
 8004514:	0801a7a0 	.word	0x0801a7a0
 8004518:	0801a684 	.word	0x0801a684
 800451c:	0801ab18 	.word	0x0801ab18
 8004520:	0801a678 	.word	0x0801a678
 8004524:	20000ab2 	.word	0x20000ab2
 8004528:	0801c400 	.word	0x0801c400

0800452c <DisplayPortsDir>:
/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
*/
void DisplayPortsDir(uint8_t port)
{
 800452c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452e:	46d6      	mov	lr, sl
 8004530:	464f      	mov	r7, r9
 8004532:	4646      	mov	r6, r8
 8004534:	b5c0      	push	{r6, r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	4680      	mov	r8, r0
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 800453a:	4c31      	ldr	r4, [pc, #196]	; (8004600 <DisplayPortsDir+0xd4>)
 800453c:	4b31      	ldr	r3, [pc, #196]	; (8004604 <DisplayPortsDir+0xd8>)
 800453e:	0022      	movs	r2, r4
 8004540:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004542:	c223      	stmia	r2!, {r0, r1, r5}
 8004544:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004546:	c223      	stmia	r2!, {r0, r1, r5}
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800454c:	0020      	movs	r0, r4
 800454e:	f7fb fde3 	bl	8000118 <strlen>
 8004552:	b282      	uxth	r2, r0
 8004554:	2301      	movs	r3, #1
 8004556:	425b      	negs	r3, r3
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	3333      	adds	r3, #51	; 0x33
 800455c:	0021      	movs	r1, r4
 800455e:	4640      	mov	r0, r8
 8004560:	f00a fc58 	bl	800ee14 <writePxMutex>
	
	for (uint8_t i=1 ; i<=N ; i++) 
 8004564:	4b28      	ldr	r3, [pc, #160]	; (8004608 <DisplayPortsDir+0xdc>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2701      	movs	r7, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d02c      	beq.n	80045c8 <DisplayPortsDir+0x9c>
	{
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
		{		
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 800456e:	4e27      	ldr	r6, [pc, #156]	; (800460c <DisplayPortsDir+0xe0>)
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <DisplayPortsDir+0xe4>)
 8004572:	4699      	mov	r9, r3
 8004574:	e024      	b.n	80045c0 <DisplayPortsDir+0x94>
 8004576:	4b22      	ldr	r3, [pc, #136]	; (8004600 <DisplayPortsDir+0xd4>)
 8004578:	469a      	mov	sl, r3
 800457a:	0023      	movs	r3, r4
 800457c:	003a      	movs	r2, r7
 800457e:	4649      	mov	r1, r9
 8004580:	4650      	mov	r0, sl
 8004582:	f010 f8c3 	bl	801470c <sprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004586:	4650      	mov	r0, sl
 8004588:	f7fb fdc6 	bl	8000118 <strlen>
 800458c:	b282      	uxth	r2, r0
 800458e:	2301      	movs	r3, #1
 8004590:	425b      	negs	r3, r3
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	3333      	adds	r3, #51	; 0x33
 8004596:	4651      	mov	r1, sl
 8004598:	4640      	mov	r0, r8
 800459a:	f00a fc3b 	bl	800ee14 <writePxMutex>
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 800459e:	2c0a      	cmp	r4, #10
 80045a0:	d008      	beq.n	80045b4 <DisplayPortsDir+0x88>
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80045a2:	0021      	movs	r1, r4
 80045a4:	3401      	adds	r4, #1
 80045a6:	5baa      	ldrh	r2, [r5, r6]
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	410b      	asrs	r3, r1
 80045ae:	4213      	tst	r3, r2
 80045b0:	d0f5      	beq.n	800459e <DisplayPortsDir+0x72>
 80045b2:	e7e0      	b.n	8004576 <DisplayPortsDir+0x4a>
	for (uint8_t i=1 ; i<=N ; i++) 
 80045b4:	3701      	adds	r7, #1
 80045b6:	b2ff      	uxtb	r7, r7
 80045b8:	4b13      	ldr	r3, [pc, #76]	; (8004608 <DisplayPortsDir+0xdc>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	42bb      	cmp	r3, r7
 80045be:	d303      	bcc.n	80045c8 <DisplayPortsDir+0x9c>
{
 80045c0:	2400      	movs	r4, #0
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80045c2:	1e7d      	subs	r5, r7, #1
 80045c4:	006d      	lsls	r5, r5, #1
 80045c6:	e7ec      	b.n	80045a2 <DisplayPortsDir+0x76>
			}	
		}
	}
	
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 80045c8:	4c0d      	ldr	r4, [pc, #52]	; (8004600 <DisplayPortsDir+0xd4>)
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <DisplayPortsDir+0xe8>)
 80045cc:	0022      	movs	r2, r4
 80045ce:	cb23      	ldmia	r3!, {r0, r1, r5}
 80045d0:	c223      	stmia	r2!, {r0, r1, r5}
 80045d2:	cb23      	ldmia	r3!, {r0, r1, r5}
 80045d4:	c223      	stmia	r2!, {r0, r1, r5}
 80045d6:	cb03      	ldmia	r3!, {r0, r1}
 80045d8:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80045da:	0020      	movs	r0, r4
 80045dc:	f7fb fd9c 	bl	8000118 <strlen>
 80045e0:	b282      	uxth	r2, r0
 80045e2:	2301      	movs	r3, #1
 80045e4:	425b      	negs	r3, r3
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	3333      	adds	r3, #51	; 0x33
 80045ea:	0021      	movs	r1, r4
 80045ec:	4640      	mov	r0, r8
 80045ee:	f00a fc11 	bl	800ee14 <writePxMutex>
}
 80045f2:	b002      	add	sp, #8
 80045f4:	bce0      	pop	{r5, r6, r7}
 80045f6:	46ba      	mov	sl, r7
 80045f8:	46b1      	mov	r9, r6
 80045fa:	46a8      	mov	r8, r5
 80045fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	20001078 	.word	0x20001078
 8004604:	0801a69c 	.word	0x0801a69c
 8004608:	2000001c 	.word	0x2000001c
 800460c:	20007164 	.word	0x20007164
 8004610:	0801a6b8 	.word	0x0801a6b8
 8004614:	0801a6cc 	.word	0x0801a6cc

08004618 <DisplayModuleStatus>:
/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
*/
void DisplayModuleStatus(uint8_t port)
{
 8004618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800461a:	46d6      	mov	lr, sl
 800461c:	464f      	mov	r7, r9
 800461e:	4646      	mov	r6, r8
 8004620:	b5c0      	push	{r6, r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	4680      	mov	r8, r0
	int8_t *pcOutputString;
	uint16_t temp = 0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8004626:	f00a fe47 	bl	800f2b8 <FreeRTOS_CLIGetOutputBuffer>
 800462a:	0004      	movs	r4, r0
	
	strcpy( (char *) pcOutputString, "");
 800462c:	2300      	movs	r3, #0
 800462e:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8004630:	4b91      	ldr	r3, [pc, #580]	; (8004878 <DisplayModuleStatus+0x260>)
 8004632:	781a      	ldrb	r2, [r3, #0]
 8004634:	4d91      	ldr	r5, [pc, #580]	; (800487c <DisplayModuleStatus+0x264>)
 8004636:	4992      	ldr	r1, [pc, #584]	; (8004880 <DisplayModuleStatus+0x268>)
 8004638:	0028      	movs	r0, r5
 800463a:	f010 f867 	bl	801470c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 800463e:	0029      	movs	r1, r5
 8004640:	0020      	movs	r0, r4
 8004642:	f010 f883 	bl	801474c <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 8004646:	4b8f      	ldr	r3, [pc, #572]	; (8004884 <DisplayModuleStatus+0x26c>)
 8004648:	781a      	ldrb	r2, [r3, #0]
 800464a:	498f      	ldr	r1, [pc, #572]	; (8004888 <DisplayModuleStatus+0x270>)
 800464c:	0028      	movs	r0, r5
 800464e:	f010 f85d 	bl	801470c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8004652:	0029      	movs	r1, r5
 8004654:	0020      	movs	r0, r4
 8004656:	f010 f879 	bl	801474c <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 800465a:	2304      	movs	r3, #4
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	3b02      	subs	r3, #2
 8004660:	2200      	movs	r2, #0
 8004662:	498a      	ldr	r1, [pc, #552]	; (800488c <DisplayModuleStatus+0x274>)
 8004664:	0028      	movs	r0, r5
 8004666:	f010 f851 	bl	801470c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 800466a:	0029      	movs	r1, r5
 800466c:	0020      	movs	r0, r4
 800466e:	f010 f86d 	bl	801474c <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 8004672:	4a87      	ldr	r2, [pc, #540]	; (8004890 <DisplayModuleStatus+0x278>)
 8004674:	4987      	ldr	r1, [pc, #540]	; (8004894 <DisplayModuleStatus+0x27c>)
 8004676:	0028      	movs	r0, r5
 8004678:	f010 f848 	bl	801470c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 800467c:	0029      	movs	r1, r5
 800467e:	0020      	movs	r0, r4
 8004680:	f010 f864 	bl	801474c <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 8004684:	4a84      	ldr	r2, [pc, #528]	; (8004898 <DisplayModuleStatus+0x280>)
 8004686:	4985      	ldr	r1, [pc, #532]	; (800489c <DisplayModuleStatus+0x284>)
 8004688:	0028      	movs	r0, r5
 800468a:	f010 f83f 	bl	801470c <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 800468e:	0029      	movs	r1, r5
 8004690:	0020      	movs	r0, r4
 8004692:	f010 f85b 	bl	801474c <strcat>
	
	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 8004696:	4b82      	ldr	r3, [pc, #520]	; (80048a0 <DisplayModuleStatus+0x288>)
 8004698:	002a      	movs	r2, r5
 800469a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800469c:	c243      	stmia	r2!, {r0, r1, r6}
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	6011      	str	r1, [r2, #0]
 80046a2:	8899      	ldrh	r1, [r3, #4]
 80046a4:	8091      	strh	r1, [r2, #4]
 80046a6:	799b      	ldrb	r3, [r3, #6]
 80046a8:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 80046aa:	0029      	movs	r1, r5
 80046ac:	0020      	movs	r0, r4
 80046ae:	f010 f84d 	bl	801474c <strcat>
 80046b2:	2501      	movs	r5, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
	{
		sprintf(pcUserMessage, "P%d: ", i);
 80046b4:	4b7b      	ldr	r3, [pc, #492]	; (80048a4 <DisplayModuleStatus+0x28c>)
 80046b6:	4699      	mov	r9, r3
 80046b8:	4f70      	ldr	r7, [pc, #448]	; (800487c <DisplayModuleStatus+0x264>)
		strcat( (char *) pcOutputString, pcUserMessage);
		switch (portStatus[i])
 80046ba:	4b7b      	ldr	r3, [pc, #492]	; (80048a8 <DisplayModuleStatus+0x290>)
 80046bc:	469a      	mov	sl, r3
 80046be:	e00e      	b.n	80046de <DisplayModuleStatus+0xc6>
		{
				case FREE : 
						sprintf(pcUserMessage, "Free\n\r"); break;
 80046c0:	4b6e      	ldr	r3, [pc, #440]	; (800487c <DisplayModuleStatus+0x264>)
 80046c2:	4a7a      	ldr	r2, [pc, #488]	; (80048ac <DisplayModuleStatus+0x294>)
 80046c4:	6811      	ldr	r1, [r2, #0]
 80046c6:	6019      	str	r1, [r3, #0]
 80046c8:	8891      	ldrh	r1, [r2, #4]
 80046ca:	8099      	strh	r1, [r3, #4]
 80046cc:	7992      	ldrb	r2, [r2, #6]
 80046ce:	719a      	strb	r2, [r3, #6]
				case PORTBUTTON :
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
				default:
						break;
		}		
		strcat( (char *) pcOutputString, pcUserMessage);
 80046d0:	496a      	ldr	r1, [pc, #424]	; (800487c <DisplayModuleStatus+0x264>)
 80046d2:	0020      	movs	r0, r4
 80046d4:	f010 f83a 	bl	801474c <strcat>
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80046d8:	3501      	adds	r5, #1
 80046da:	2d06      	cmp	r5, #6
 80046dc:	d039      	beq.n	8004752 <DisplayModuleStatus+0x13a>
		sprintf(pcUserMessage, "P%d: ", i);
 80046de:	002a      	movs	r2, r5
 80046e0:	4649      	mov	r1, r9
 80046e2:	0038      	movs	r0, r7
 80046e4:	f010 f812 	bl	801470c <sprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 80046e8:	0039      	movs	r1, r7
 80046ea:	0020      	movs	r0, r4
 80046ec:	f010 f82e 	bl	801474c <strcat>
		switch (portStatus[i])
 80046f0:	4653      	mov	r3, sl
 80046f2:	5ceb      	ldrb	r3, [r5, r3]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d8eb      	bhi.n	80046d0 <DisplayModuleStatus+0xb8>
 80046f8:	4653      	mov	r3, sl
 80046fa:	5ceb      	ldrb	r3, [r5, r3]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4a6c      	ldr	r2, [pc, #432]	; (80048b0 <DisplayModuleStatus+0x298>)
 8004700:	58d3      	ldr	r3, [r2, r3]
 8004702:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 8004704:	495d      	ldr	r1, [pc, #372]	; (800487c <DisplayModuleStatus+0x264>)
 8004706:	4b6b      	ldr	r3, [pc, #428]	; (80048b4 <DisplayModuleStatus+0x29c>)
 8004708:	000a      	movs	r2, r1
 800470a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800470c:	c243      	stmia	r2!, {r0, r1, r6}
 800470e:	cb03      	ldmia	r3!, {r0, r1}
 8004710:	c203      	stmia	r2!, {r0, r1}
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	7013      	strb	r3, [r2, #0]
 8004716:	e7db      	b.n	80046d0 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 8004718:	4a58      	ldr	r2, [pc, #352]	; (800487c <DisplayModuleStatus+0x264>)
 800471a:	4b67      	ldr	r3, [pc, #412]	; (80048b8 <DisplayModuleStatus+0x2a0>)
 800471c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800471e:	c243      	stmia	r2!, {r0, r1, r6}
 8004720:	e7d6      	b.n	80046d0 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 8004722:	4956      	ldr	r1, [pc, #344]	; (800487c <DisplayModuleStatus+0x264>)
 8004724:	4b65      	ldr	r3, [pc, #404]	; (80048bc <DisplayModuleStatus+0x2a4>)
 8004726:	000a      	movs	r2, r1
 8004728:	cb43      	ldmia	r3!, {r0, r1, r6}
 800472a:	c243      	stmia	r2!, {r0, r1, r6}
 800472c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800472e:	c243      	stmia	r2!, {r0, r1, r6}
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	8013      	strh	r3, [r2, #0]
 8004734:	e7cc      	b.n	80046d0 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 8004736:	4951      	ldr	r1, [pc, #324]	; (800487c <DisplayModuleStatus+0x264>)
 8004738:	4b61      	ldr	r3, [pc, #388]	; (80048c0 <DisplayModuleStatus+0x2a8>)
 800473a:	000a      	movs	r2, r1
 800473c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800473e:	c243      	stmia	r2!, {r0, r1, r6}
 8004740:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004742:	c243      	stmia	r2!, {r0, r1, r6}
 8004744:	6819      	ldr	r1, [r3, #0]
 8004746:	6011      	str	r1, [r2, #0]
 8004748:	8899      	ldrh	r1, [r3, #4]
 800474a:	8091      	strh	r1, [r2, #4]
 800474c:	799b      	ldrb	r3, [r3, #6]
 800474e:	7193      	strb	r3, [r2, #6]
 8004750:	e7be      	b.n	80046d0 <DisplayModuleStatus+0xb8>
	}	

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 8004752:	494a      	ldr	r1, [pc, #296]	; (800487c <DisplayModuleStatus+0x264>)
 8004754:	4b5b      	ldr	r3, [pc, #364]	; (80048c4 <DisplayModuleStatus+0x2ac>)
 8004756:	000a      	movs	r2, r1
 8004758:	cb61      	ldmia	r3!, {r0, r5, r6}
 800475a:	c261      	stmia	r2!, {r0, r5, r6}
 800475c:	cb61      	ldmia	r3!, {r0, r5, r6}
 800475e:	c261      	stmia	r2!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 8004760:	0020      	movs	r0, r4
 8004762:	f00f fff3 	bl	801474c <strcat>
	for (char i=1 ; i<=6 ; i++) {
 8004766:	4e58      	ldr	r6, [pc, #352]	; (80048c8 <DisplayModuleStatus+0x2b0>)
	strcat( (char *) pcOutputString, pcUserMessage);	
 8004768:	2701      	movs	r7, #1
		if (streamDMA[i-1].Instance == 0) {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
				strcat( (char *) pcOutputString, pcUserMessage);
		} else {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 800476a:	4d44      	ldr	r5, [pc, #272]	; (800487c <DisplayModuleStatus+0x264>)
 800476c:	e00e      	b.n	800478c <DisplayModuleStatus+0x174>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 800476e:	4b43      	ldr	r3, [pc, #268]	; (800487c <DisplayModuleStatus+0x264>)
 8004770:	469a      	mov	sl, r3
 8004772:	003a      	movs	r2, r7
 8004774:	4955      	ldr	r1, [pc, #340]	; (80048cc <DisplayModuleStatus+0x2b4>)
 8004776:	0018      	movs	r0, r3
 8004778:	f00f ffc8 	bl	801470c <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 800477c:	4651      	mov	r1, sl
 800477e:	0020      	movs	r0, r4
 8004780:	f00f ffe4 	bl	801474c <strcat>
	for (char i=1 ; i<=6 ; i++) {
 8004784:	3701      	adds	r7, #1
 8004786:	3638      	adds	r6, #56	; 0x38
 8004788:	2f07      	cmp	r7, #7
 800478a:	d017      	beq.n	80047bc <DisplayModuleStatus+0x1a4>
		if (streamDMA[i-1].Instance == 0) {
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0ed      	beq.n	800476e <DisplayModuleStatus+0x156>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 8004792:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004794:	f007 f96c 	bl	800ba70 <GetPort>
 8004798:	4682      	mov	sl, r0
 800479a:	00bb      	lsls	r3, r7, #2
 800479c:	4a4c      	ldr	r2, [pc, #304]	; (80048d0 <DisplayModuleStatus+0x2b8>)
 800479e:	58d0      	ldr	r0, [r2, r3]
 80047a0:	f007 f966 	bl	800ba70 <GetPort>
 80047a4:	9000      	str	r0, [sp, #0]
 80047a6:	4653      	mov	r3, sl
 80047a8:	003a      	movs	r2, r7
 80047aa:	494a      	ldr	r1, [pc, #296]	; (80048d4 <DisplayModuleStatus+0x2bc>)
 80047ac:	0028      	movs	r0, r5
 80047ae:	f00f ffad 	bl	801470c <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 80047b2:	0029      	movs	r1, r5
 80047b4:	0020      	movs	r0, r4
 80047b6:	f00f ffc9 	bl	801474c <strcat>
 80047ba:	e7e3      	b.n	8004784 <DisplayModuleStatus+0x16c>
		}
	}
	strcat( (char *) pcOutputString, "\n\r");
 80047bc:	0020      	movs	r0, r4
 80047be:	f7fb fcab 	bl	8000118 <strlen>
 80047c2:	1820      	adds	r0, r4, r0
 80047c4:	2203      	movs	r2, #3
 80047c6:	4944      	ldr	r1, [pc, #272]	; (80048d8 <DisplayModuleStatus+0x2c0>)
 80047c8:	f00f fda2 	bl	8014310 <memcpy>
	
	/* Ports direction */
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 80047cc:	0020      	movs	r0, r4
 80047ce:	f7fb fca3 	bl	8000118 <strlen>
 80047d2:	1820      	adds	r0, r4, r0
 80047d4:	221d      	movs	r2, #29
 80047d6:	4941      	ldr	r1, [pc, #260]	; (80048dc <DisplayModuleStatus+0x2c4>)
 80047d8:	f00f fd9a 	bl	8014310 <memcpy>
	temp = strlen( (char *) pcOutputString);
 80047dc:	0020      	movs	r0, r4
 80047de:	f7fb fc9b 	bl	8000118 <strlen>
 80047e2:	4681      	mov	r9, r0
 80047e4:	2500      	movs	r5, #0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{		
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80047e6:	4e3e      	ldr	r6, [pc, #248]	; (80048e0 <DisplayModuleStatus+0x2c8>)
 80047e8:	4f23      	ldr	r7, [pc, #140]	; (8004878 <DisplayModuleStatus+0x260>)
 80047ea:	e00c      	b.n	8004806 <DisplayModuleStatus+0x1ee>
		{
			sprintf(pcUserMessage, "P%d ", p);
 80047ec:	4b23      	ldr	r3, [pc, #140]	; (800487c <DisplayModuleStatus+0x264>)
 80047ee:	469a      	mov	sl, r3
 80047f0:	002a      	movs	r2, r5
 80047f2:	493c      	ldr	r1, [pc, #240]	; (80048e4 <DisplayModuleStatus+0x2cc>)
 80047f4:	0018      	movs	r0, r3
 80047f6:	f00f ff89 	bl	801470c <sprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 80047fa:	4651      	mov	r1, sl
 80047fc:	0020      	movs	r0, r4
 80047fe:	f00f ffa5 	bl	801474c <strcat>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8004802:	2d05      	cmp	r5, #5
 8004804:	d00b      	beq.n	800481e <DisplayModuleStatus+0x206>
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8004806:	0029      	movs	r1, r5
 8004808:	3501      	adds	r5, #1
 800480a:	783b      	ldrb	r3, [r7, #0]
 800480c:	3b01      	subs	r3, #1
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	5b9a      	ldrh	r2, [r3, r6]
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	410b      	asrs	r3, r1
 8004818:	4213      	tst	r3, r2
 800481a:	d0f2      	beq.n	8004802 <DisplayModuleStatus+0x1ea>
 800481c:	e7e6      	b.n	80047ec <DisplayModuleStatus+0x1d4>
		}	
	}
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 800481e:	0020      	movs	r0, r4
 8004820:	f7fb fc7a 	bl	8000118 <strlen>
 8004824:	464b      	mov	r3, r9
 8004826:	041e      	lsls	r6, r3, #16
 8004828:	0c36      	lsrs	r6, r6, #16
 800482a:	42b0      	cmp	r0, r6
 800482c:	d010      	beq.n	8004850 <DisplayModuleStatus+0x238>
		strcat( (char *) pcOutputString, "None");
	}
	strcat( (char *) pcOutputString, "\n\r");
 800482e:	0020      	movs	r0, r4
 8004830:	f7fb fc72 	bl	8000118 <strlen>
 8004834:	1820      	adds	r0, r4, r0
 8004836:	2203      	movs	r2, #3
 8004838:	4927      	ldr	r1, [pc, #156]	; (80048d8 <DisplayModuleStatus+0x2c0>)
 800483a:	f00f fd69 	bl	8014310 <memcpy>
	
	/* Display output */
	if (port)
 800483e:	4643      	mov	r3, r8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10b      	bne.n	800485c <DisplayModuleStatus+0x244>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
	
}
 8004844:	b002      	add	sp, #8
 8004846:	bce0      	pop	{r5, r6, r7}
 8004848:	46ba      	mov	sl, r7
 800484a:	46b1      	mov	r9, r6
 800484c:	46a8      	mov	r8, r5
 800484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 8004850:	1820      	adds	r0, r4, r0
 8004852:	2205      	movs	r2, #5
 8004854:	4924      	ldr	r1, [pc, #144]	; (80048e8 <DisplayModuleStatus+0x2d0>)
 8004856:	f00f fd5b 	bl	8014310 <memcpy>
 800485a:	e7e8      	b.n	800482e <DisplayModuleStatus+0x216>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 800485c:	0020      	movs	r0, r4
 800485e:	f7fb fc5b 	bl	8000118 <strlen>
 8004862:	b282      	uxth	r2, r0
 8004864:	2301      	movs	r3, #1
 8004866:	425b      	negs	r3, r3
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	3333      	adds	r3, #51	; 0x33
 800486c:	0021      	movs	r1, r4
 800486e:	4640      	mov	r0, r8
 8004870:	f00a fad0 	bl	800ee14 <writePxMutex>
}
 8004874:	e7e6      	b.n	8004844 <DisplayModuleStatus+0x22c>
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	2000104c 	.word	0x2000104c
 800487c:	20001078 	.word	0x20001078
 8004880:	0801a6ec 	.word	0x0801a6ec
 8004884:	20000aa7 	.word	0x20000aa7
 8004888:	0801a708 	.word	0x0801a708
 800488c:	0801a724 	.word	0x0801a724
 8004890:	0801a744 	.word	0x0801a744
 8004894:	0801a750 	.word	0x0801a750
 8004898:	0801a768 	.word	0x0801a768
 800489c:	0801a774 	.word	0x0801a774
 80048a0:	0801a790 	.word	0x0801a790
 80048a4:	0801a7a4 	.word	0x0801a7a4
 80048a8:	200010c8 	.word	0x200010c8
 80048ac:	0801a7ac 	.word	0x0801a7ac
 80048b0:	0801a8a8 	.word	0x0801a8a8
 80048b4:	0801a7b4 	.word	0x0801a7b4
 80048b8:	0801a7cc 	.word	0x0801a7cc
 80048bc:	0801a7d8 	.word	0x0801a7d8
 80048c0:	0801a7f4 	.word	0x0801a7f4
 80048c4:	0801a814 	.word	0x0801a814
 80048c8:	20001ce8 	.word	0x20001ce8
 80048cc:	0801a82c 	.word	0x0801a82c
 80048d0:	2000142c 	.word	0x2000142c
 80048d4:	0801a848 	.word	0x0801a848
 80048d8:	0801a7a0 	.word	0x0801a7a0
 80048dc:	0801a878 	.word	0x0801a878
 80048e0:	20007164 	.word	0x20007164
 80048e4:	0801a898 	.word	0x0801a898
 80048e8:	0801a8a0 	.word	0x0801a8a0

080048ec <GetID>:
/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
*/
int16_t GetID(char* string)
{
 80048ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ee:	46c6      	mov	lr, r8
 80048f0:	b500      	push	{lr}
 80048f2:	0006      	movs	r6, r0
	uint8_t id = 0, i = 0;
	
	if(!strcmp(string, "me"))							/* Check keywords */
 80048f4:	4929      	ldr	r1, [pc, #164]	; (800499c <GetID+0xb0>)
 80048f6:	f7fb fc05 	bl	8000104 <strcmp>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d010      	beq.n	8004920 <GetID+0x34>
		return myID;
	else if(!strcmp(string, "all"))							
 80048fe:	4928      	ldr	r1, [pc, #160]	; (80049a0 <GetID+0xb4>)
 8004900:	0030      	movs	r0, r6
 8004902:	f7fb fbff 	bl	8000104 <strcmp>
 8004906:	2800      	cmp	r0, #0
 8004908:	d045      	beq.n	8004996 <GetID+0xaa>
		return BOS_BROADCAST;				
	else if (string[0] == '#') 						/* Check IDs */
 800490a:	7833      	ldrb	r3, [r6, #0]
 800490c:	4698      	mov	r8, r3
 800490e:	2b23      	cmp	r3, #35	; 0x23
 8004910:	d00b      	beq.n	800492a <GetID+0x3e>
			return BOS_ERR_WrongID;				
	} 
	else 																	/* Check alias */
	{															
		/* Check module alias */
		for (i=0 ; i<N ; i++) {
 8004912:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <GetID+0xb8>)
 8004914:	781f      	ldrb	r7, [r3, #0]
 8004916:	2f00      	cmp	r7, #0
 8004918:	d02a      	beq.n	8004970 <GetID+0x84>
 800491a:	4d23      	ldr	r5, [pc, #140]	; (80049a8 <GetID+0xbc>)
 800491c:	2400      	movs	r4, #0
 800491e:	e01c      	b.n	800495a <GetID+0x6e>
		return myID;
 8004920:	4b22      	ldr	r3, [pc, #136]	; (80049ac <GetID+0xc0>)
 8004922:	7818      	ldrb	r0, [r3, #0]
		}			
		
		return BOS_ERR_WrongName;			
	}
	
}
 8004924:	bc80      	pop	{r7}
 8004926:	46b8      	mov	r8, r7
 8004928:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string+1);
 800492a:	1c70      	adds	r0, r6, #1
 800492c:	f00f fa8f 	bl	8013e4e <atol>
 8004930:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <GetID+0x52>
 8004936:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <GetID+0xb8>)
 8004938:	7812      	ldrb	r2, [r2, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d206      	bcs.n	800494c <GetID+0x60>
		else if (id == myID)
 800493e:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <GetID+0xc0>)
 8004940:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;				
 8004942:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 8004944:	429a      	cmp	r2, r3
 8004946:	d1ed      	bne.n	8004924 <GetID+0x38>
			return myID;
 8004948:	b218      	sxth	r0, r3
 800494a:	e7eb      	b.n	8004924 <GetID+0x38>
			return id;
 800494c:	b218      	sxth	r0, r3
 800494e:	e7e9      	b.n	8004924 <GetID+0x38>
		for (i=0 ; i<N ; i++) {
 8004950:	3401      	adds	r4, #1
 8004952:	b2e4      	uxtb	r4, r4
 8004954:	350a      	adds	r5, #10
 8004956:	42bc      	cmp	r4, r7
 8004958:	d00a      	beq.n	8004970 <GetID+0x84>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 800495a:	0029      	movs	r1, r5
 800495c:	0030      	movs	r0, r6
 800495e:	f7fb fbd1 	bl	8000104 <strcmp>
 8004962:	2800      	cmp	r0, #0
 8004964:	d1f4      	bne.n	8004950 <GetID+0x64>
 8004966:	4643      	mov	r3, r8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f1      	beq.n	8004950 <GetID+0x64>
 800496c:	b220      	sxth	r0, r4
 800496e:	e7d9      	b.n	8004924 <GetID+0x38>
 8004970:	4f0f      	ldr	r7, [pc, #60]	; (80049b0 <GetID+0xc4>)
		for (i=0 ; i<N ; i++) {
 8004972:	2500      	movs	r5, #0
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8004974:	0039      	movs	r1, r7
 8004976:	0030      	movs	r0, r6
 8004978:	f7fb fbc4 	bl	8000104 <strcmp>
 800497c:	2800      	cmp	r0, #0
 800497e:	d005      	beq.n	800498c <GetID+0xa0>
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 8004980:	3501      	adds	r5, #1
 8004982:	370a      	adds	r7, #10
 8004984:	2d0a      	cmp	r5, #10
 8004986:	d1f5      	bne.n	8004974 <GetID+0x88>
		return BOS_ERR_WrongName;			
 8004988:	2064      	movs	r0, #100	; 0x64
 800498a:	e7cb      	b.n	8004924 <GetID+0x38>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 800498c:	022c      	lsls	r4, r5, #8
 800498e:	20fe      	movs	r0, #254	; 0xfe
 8004990:	4320      	orrs	r0, r4
 8004992:	b200      	sxth	r0, r0
 8004994:	e7c6      	b.n	8004924 <GetID+0x38>
		return BOS_BROADCAST;				
 8004996:	20ff      	movs	r0, #255	; 0xff
 8004998:	e7c4      	b.n	8004924 <GetID+0x38>
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	0801a8bc 	.word	0x0801a8bc
 80049a0:	0801a8c0 	.word	0x0801a8c0
 80049a4:	2000001c 	.word	0x2000001c
 80049a8:	20000f48 	.word	0x20000f48
 80049ac:	2000104c 	.word	0x2000104c
 80049b0:	20000e3c 	.word	0x20000e3c

080049b4 <NameModule>:
/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
*/
BOS_Status NameModule(uint8_t module, char* alias)
{
 80049b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049b6:	b083      	sub	sp, #12
 80049b8:	9001      	str	r0, [sp, #4]
 80049ba:	000e      	movs	r6, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for(i=0 ; i<NumOfKeywords ; i++)
 80049bc:	4c28      	ldr	r4, [pc, #160]	; (8004a60 <NameModule+0xac>)
 80049be:	0025      	movs	r5, r4
 80049c0:	3510      	adds	r5, #16
	{
		if (!strcmp(alias, BOSkeywords[i]))	
 80049c2:	0021      	movs	r1, r4
 80049c4:	0030      	movs	r0, r6
 80049c6:	f7fb fb9d 	bl	8000104 <strcmp>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d03f      	beq.n	8004a4e <NameModule+0x9a>
	for(i=0 ; i<NumOfKeywords ; i++)
 80049ce:	3404      	adds	r4, #4
 80049d0:	42ac      	cmp	r4, r5
 80049d2:	d1f6      	bne.n	80049c2 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i=1 ; i<N ; i++)
 80049d4:	4b23      	ldr	r3, [pc, #140]	; (8004a64 <NameModule+0xb0>)
 80049d6:	781f      	ldrb	r7, [r3, #0]
 80049d8:	2f01      	cmp	r7, #1
 80049da:	dd0b      	ble.n	80049f4 <NameModule+0x40>
 80049dc:	4c22      	ldr	r4, [pc, #136]	; (8004a68 <NameModule+0xb4>)
 80049de:	2501      	movs	r5, #1
	{
		if (!strcmp(alias, moduleAlias[i]))	
 80049e0:	0021      	movs	r1, r4
 80049e2:	0030      	movs	r0, r6
 80049e4:	f7fb fb8e 	bl	8000104 <strcmp>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d032      	beq.n	8004a52 <NameModule+0x9e>
	for(i=1 ; i<N ; i++)
 80049ec:	3501      	adds	r5, #1
 80049ee:	340a      	adds	r4, #10
 80049f0:	42bd      	cmp	r5, r7
 80049f2:	dbf5      	blt.n	80049e0 <NameModule+0x2c>
 80049f4:	4c1d      	ldr	r4, [pc, #116]	; (8004a6c <NameModule+0xb8>)
 80049f6:	0025      	movs	r5, r4
 80049f8:	3564      	adds	r5, #100	; 0x64
	}

	/* 3. Check module alias with group aliases */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!strcmp(alias, groupAlias[i]))	
 80049fa:	0021      	movs	r1, r4
 80049fc:	0030      	movs	r0, r6
 80049fe:	f7fb fb81 	bl	8000104 <strcmp>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d028      	beq.n	8004a58 <NameModule+0xa4>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004a06:	340a      	adds	r4, #10
 8004a08:	42ac      	cmp	r4, r5
 8004a0a:	d1f6      	bne.n	80049fa <NameModule+0x46>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004a0c:	4c18      	ldr	r4, [pc, #96]	; (8004a70 <NameModule+0xbc>)
 8004a0e:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <NameModule+0xc0>)
 8004a10:	601c      	str	r4, [r3, #0]
 8004a12:	001f      	movs	r7, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8004a18:	0028      	movs	r0, r5
 8004a1a:	f7fb fb7d 	bl	8000118 <strlen>
 8004a1e:	0002      	movs	r2, r0
		
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8004a20:	0029      	movs	r1, r5
 8004a22:	0030      	movs	r0, r6
 8004a24:	f00f feb5 	bl	8014792 <strncmp>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d017      	beq.n	8004a5c <NameModule+0xa8>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004a2c:	6864      	ldr	r4, [r4, #4]
 8004a2e:	603c      	str	r4, [r7, #0]
 8004a30:	2c00      	cmp	r4, #0
 8004a32:	d1ef      	bne.n	8004a14 <NameModule+0x60>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 8004a34:	9b01      	ldr	r3, [sp, #4]
 8004a36:	0098      	lsls	r0, r3, #2
 8004a38:	469c      	mov	ip, r3
 8004a3a:	4460      	add	r0, ip
 8004a3c:	0040      	lsls	r0, r0, #1
 8004a3e:	4f0e      	ldr	r7, [pc, #56]	; (8004a78 <NameModule+0xc4>)
 8004a40:	19c0      	adds	r0, r0, r7
 8004a42:	0031      	movs	r1, r6
 8004a44:	f00f fe9d 	bl	8014782 <strcpy>
	
	/* 6. Share new module alias with other modules */
	
	
	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 8004a48:	f7fe fe7e 	bl	8003748 <SaveEEalias>
	
	return result;
 8004a4c:	e002      	b.n	8004a54 <NameModule+0xa0>
			return BOS_ERR_Keyword;
 8004a4e:	2006      	movs	r0, #6
 8004a50:	e000      	b.n	8004a54 <NameModule+0xa0>
			return BOS_ERR_ExistingAlias;
 8004a52:	2007      	movs	r0, #7
}
 8004a54:	b003      	add	sp, #12
 8004a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8004a58:	2007      	movs	r0, #7
 8004a5a:	e7fb      	b.n	8004a54 <NameModule+0xa0>
			return BOS_ERR_ExistingCmd;
 8004a5c:	2008      	movs	r0, #8
 8004a5e:	e7f9      	b.n	8004a54 <NameModule+0xa0>
 8004a60:	0801aaf4 	.word	0x0801aaf4
 8004a64:	2000001c 	.word	0x2000001c
 8004a68:	20000f52 	.word	0x20000f52
 8004a6c:	20000e3c 	.word	0x20000e3c
 8004a70:	200000c0 	.word	0x200000c0
 8004a74:	200010d0 	.word	0x200010d0
 8004a78:	20000f48 	.word	0x20000f48

08004a7c <AddModuleToGroup>:
/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
*/
BOS_Status AddModuleToGroup(uint8_t module, char* group)
{
 8004a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a7e:	46ce      	mov	lr, r9
 8004a80:	b500      	push	{lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	9001      	str	r0, [sp, #4]
 8004a86:	000e      	movs	r6, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */
	
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004a88:	4f36      	ldr	r7, [pc, #216]	; (8004b64 <AddModuleToGroup+0xe8>)
{
 8004a8a:	003d      	movs	r5, r7
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004a8c:	2400      	movs	r4, #0
	{
		/* This group already exists */
		if (!strcmp(group, groupAlias[i]))	
 8004a8e:	0029      	movs	r1, r5
 8004a90:	0030      	movs	r0, r6
 8004a92:	f7fb fb37 	bl	8000104 <strcmp>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d047      	beq.n	8004b2a <AddModuleToGroup+0xae>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004a9a:	3401      	adds	r4, #1
 8004a9c:	350a      	adds	r5, #10
 8004a9e:	2c0a      	cmp	r4, #10
 8004aa0:	d1f5      	bne.n	8004a8e <AddModuleToGroup+0x12>
 8004aa2:	4c31      	ldr	r4, [pc, #196]	; (8004b68 <AddModuleToGroup+0xec>)
 8004aa4:	0025      	movs	r5, r4
 8004aa6:	3510      	adds	r5, #16
	/* This is a new group - Verify alias and create the group */
	
	/* 1. Check group alias with keywords */
	for(j=0 ; j<NumOfKeywords ; j++)
	{
		if (!strcmp(group, BOSkeywords[j]))	
 8004aa8:	0021      	movs	r1, r4
 8004aaa:	0030      	movs	r0, r6
 8004aac:	f7fb fb2a 	bl	8000104 <strcmp>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d050      	beq.n	8004b56 <AddModuleToGroup+0xda>
	for(j=0 ; j<NumOfKeywords ; j++)
 8004ab4:	3404      	adds	r4, #4
 8004ab6:	42ac      	cmp	r4, r5
 8004ab8:	d1f6      	bne.n	8004aa8 <AddModuleToGroup+0x2c>
			return BOS_ERR_Keyword;
	}	

	/* 2. Check group alias with module aliases */
	for(j=1 ; j<N ; j++)
 8004aba:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <AddModuleToGroup+0xf0>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	4699      	mov	r9, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	dd0b      	ble.n	8004adc <AddModuleToGroup+0x60>
 8004ac4:	4c2a      	ldr	r4, [pc, #168]	; (8004b70 <AddModuleToGroup+0xf4>)
 8004ac6:	2501      	movs	r5, #1
	{
		if (!strcmp(group, moduleAlias[j]))	
 8004ac8:	0021      	movs	r1, r4
 8004aca:	0030      	movs	r0, r6
 8004acc:	f7fb fb1a 	bl	8000104 <strcmp>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d042      	beq.n	8004b5a <AddModuleToGroup+0xde>
	for(j=1 ; j<N ; j++)
 8004ad4:	3501      	adds	r5, #1
 8004ad6:	340a      	adds	r4, #10
 8004ad8:	454d      	cmp	r5, r9
 8004ada:	dbf5      	blt.n	8004ac8 <AddModuleToGroup+0x4c>
			return BOS_ERR_ExistingAlias;
	}		
	
	/* 3. Check group alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004adc:	4c25      	ldr	r4, [pc, #148]	; (8004b74 <AddModuleToGroup+0xf8>)
 8004ade:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <AddModuleToGroup+0xfc>)
 8004ae0:	601c      	str	r4, [r3, #0]
 8004ae2:	4699      	mov	r9, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8004ae8:	0028      	movs	r0, r5
 8004aea:	f7fb fb15 	bl	8000118 <strlen>
 8004aee:	0002      	movs	r2, r0
		
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8004af0:	0029      	movs	r1, r5
 8004af2:	0030      	movs	r0, r6
 8004af4:	f00f fe4d 	bl	8014792 <strncmp>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d030      	beq.n	8004b5e <AddModuleToGroup+0xe2>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004afc:	6864      	ldr	r4, [r4, #4]
 8004afe:	464b      	mov	r3, r9
 8004b00:	601c      	str	r4, [r3, #0]
 8004b02:	2c00      	cmp	r4, #0
 8004b04:	d1ee      	bne.n	8004ae4 <AddModuleToGroup+0x68>
	}			
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!groupAlias[i][0]) {	
 8004b06:	783b      	ldrb	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01b      	beq.n	8004b44 <AddModuleToGroup+0xc8>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004b0c:	3401      	adds	r4, #1
 8004b0e:	370a      	adds	r7, #10
 8004b10:	2c0a      	cmp	r4, #10
 8004b12:	d1f8      	bne.n	8004b06 <AddModuleToGroup+0x8a>
			break;
		}
	}		
	
	/* 5. Add this module to the new group */
	groupModules[module-1] |= (0x0001<<i);
 8004b14:	9f01      	ldr	r7, [sp, #4]
 8004b16:	3f01      	subs	r7, #1
 8004b18:	4918      	ldr	r1, [pc, #96]	; (8004b7c <AddModuleToGroup+0x100>)
 8004b1a:	007f      	lsls	r7, r7, #1
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	40a2      	lsls	r2, r4
 8004b20:	5a7b      	ldrh	r3, [r7, r1]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	527b      	strh	r3, [r7, r1]


	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	
	return result;
 8004b26:	2000      	movs	r0, #0
 8004b28:	e008      	b.n	8004b3c <AddModuleToGroup+0xc0>
			groupModules[module-1] |= (0x0001<<i);	
 8004b2a:	9f01      	ldr	r7, [sp, #4]
 8004b2c:	3f01      	subs	r7, #1
 8004b2e:	4913      	ldr	r1, [pc, #76]	; (8004b7c <AddModuleToGroup+0x100>)
 8004b30:	007f      	lsls	r7, r7, #1
 8004b32:	2201      	movs	r2, #1
 8004b34:	40a2      	lsls	r2, r4
 8004b36:	5a7b      	ldrh	r3, [r7, r1]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	527b      	strh	r3, [r7, r1]
}
 8004b3c:	b002      	add	sp, #8
 8004b3e:	bc80      	pop	{r7}
 8004b40:	46b9      	mov	r9, r7
 8004b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(groupAlias[i], group);	
 8004b44:	00a0      	lsls	r0, r4, #2
 8004b46:	1900      	adds	r0, r0, r4
 8004b48:	0040      	lsls	r0, r0, #1
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <AddModuleToGroup+0xe8>)
 8004b4c:	1818      	adds	r0, r3, r0
 8004b4e:	0031      	movs	r1, r6
 8004b50:	f00f fe17 	bl	8014782 <strcpy>
			break;
 8004b54:	e7de      	b.n	8004b14 <AddModuleToGroup+0x98>
			return BOS_ERR_Keyword;
 8004b56:	2006      	movs	r0, #6
 8004b58:	e7f0      	b.n	8004b3c <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingAlias;
 8004b5a:	2007      	movs	r0, #7
 8004b5c:	e7ee      	b.n	8004b3c <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingCmd;
 8004b5e:	2008      	movs	r0, #8
 8004b60:	e7ec      	b.n	8004b3c <AddModuleToGroup+0xc0>
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	20000e3c 	.word	0x20000e3c
 8004b68:	0801aaf4 	.word	0x0801aaf4
 8004b6c:	2000001c 	.word	0x2000001c
 8004b70:	20000f52 	.word	0x20000f52
 8004b74:	200000c0 	.word	0x200000c0
 8004b78:	200010d4 	.word	0x200010d4
 8004b7c:	20000ea0 	.word	0x20000ea0

08004b80 <ReadPortsDir>:
/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
*/
BOS_Status ReadPortsDir(void)
{
 8004b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b82:	46de      	mov	lr, fp
 8004b84:	464f      	mov	r7, r9
 8004b86:	4646      	mov	r6, r8
 8004b88:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	/* Ask all other modules for their ports directions */
	for (uint8_t i=1 ; i<=N ; i++) 
 8004b8a:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <ReadPortsDir+0x94>)
 8004b8c:	781f      	ldrb	r7, [r3, #0]
 8004b8e:	2f00      	cmp	r7, #0
 8004b90:	d03a      	beq.n	8004c08 <ReadPortsDir+0x88>
 8004b92:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8004b94:	2700      	movs	r7, #0
	{
		if (i != myID) {
 8004b96:	4b20      	ldr	r3, [pc, #128]	; (8004c18 <ReadPortsDir+0x98>)
 8004b98:	4698      	mov	r8, r3
			} 	
		} else {
			/* Check my own ports */
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8004b9a:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <ReadPortsDir+0x9c>)
 8004b9c:	4699      	mov	r9, r3
			if (responseStatus != BOS_OK)	{
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <ReadPortsDir+0xa0>)
 8004ba0:	469b      	mov	fp, r3
 8004ba2:	e01f      	b.n	8004be4 <ReadPortsDir+0x64>
 8004ba4:	2500      	movs	r5, #0
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8004ba6:	2680      	movs	r6, #128	; 0x80
 8004ba8:	0236      	lsls	r6, r6, #8
 8004baa:	e002      	b.n	8004bb2 <ReadPortsDir+0x32>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8004bac:	3501      	adds	r5, #1
 8004bae:	2d05      	cmp	r5, #5
 8004bb0:	d012      	beq.n	8004bd8 <ReadPortsDir+0x58>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8004bb2:	1c68      	adds	r0, r5, #1
 8004bb4:	b2c0      	uxtb	r0, r0
 8004bb6:	f00a f90f 	bl	800edd8 <GetUart>
 8004bba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bbc:	42b3      	cmp	r3, r6
 8004bbe:	d1f5      	bne.n	8004bac <ReadPortsDir+0x2c>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8004bc0:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <ReadPortsDir+0x98>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	464a      	mov	r2, r9
 8004bca:	5a9a      	ldrh	r2, [r3, r2]
 8004bcc:	0031      	movs	r1, r6
 8004bce:	4129      	asrs	r1, r5
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	525a      	strh	r2, [r3, r1]
 8004bd6:	e7e9      	b.n	8004bac <ReadPortsDir+0x2c>
	for (uint8_t i=1 ; i<=N ; i++) 
 8004bd8:	3401      	adds	r4, #1
 8004bda:	b2e4      	uxtb	r4, r4
 8004bdc:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <ReadPortsDir+0x94>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d311      	bcc.n	8004c08 <ReadPortsDir+0x88>
		if (i != myID) {
 8004be4:	4643      	mov	r3, r8
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	d0db      	beq.n	8004ba4 <ReadPortsDir+0x24>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 8004bec:	2200      	movs	r2, #0
 8004bee:	2113      	movs	r1, #19
 8004bf0:	0020      	movs	r0, r4
 8004bf2:	f004 fe05 	bl	8009800 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8004bf6:	2032      	movs	r0, #50	; 0x32
 8004bf8:	f009 ff4e 	bl	800ea98 <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 8004bfc:	465b      	mov	r3, fp
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0e9      	beq.n	8004bd8 <ReadPortsDir+0x58>
				result = BOS_ERR_NoResponse;
 8004c04:	2702      	movs	r7, #2
 8004c06:	e7e7      	b.n	8004bd8 <ReadPortsDir+0x58>
			}
		}
	}
	
	return result;
}
 8004c08:	0038      	movs	r0, r7
 8004c0a:	bce0      	pop	{r5, r6, r7}
 8004c0c:	46bb      	mov	fp, r7
 8004c0e:	46b1      	mov	r9, r6
 8004c10:	46a8      	mov	r8, r5
 8004c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c14:	2000001c 	.word	0x2000001c
 8004c18:	2000104c 	.word	0x2000104c
 8004c1c:	20007164 	.word	0x20007164
 8004c20:	200010e0 	.word	0x200010e0

08004c24 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
*/
BOS_Status UpdateMyPortsDir(void)
{
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	2400      	movs	r4, #0
	BOS_Status result = BOS_OK;
	
	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8004c28:	4f0f      	ldr	r7, [pc, #60]	; (8004c68 <UpdateMyPortsDir+0x44>)
 8004c2a:	4e10      	ldr	r6, [pc, #64]	; (8004c6c <UpdateMyPortsDir+0x48>)
 8004c2c:	2580      	movs	r5, #128	; 0x80
 8004c2e:	022d      	lsls	r5, r5, #8
 8004c30:	e007      	b.n	8004c42 <UpdateMyPortsDir+0x1e>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);					
 8004c32:	f00a f8d1 	bl	800edd8 <GetUart>
 8004c36:	2101      	movs	r1, #1
 8004c38:	f00a f966 	bl	800ef08 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8004c3c:	3401      	adds	r4, #1
 8004c3e:	2c05      	cmp	r4, #5
 8004c40:	d00f      	beq.n	8004c62 <UpdateMyPortsDir+0x3e>
 8004c42:	1c60      	adds	r0, r4, #1
 8004c44:	b2c0      	uxtb	r0, r0
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8004c46:	7833      	ldrb	r3, [r6, #0]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	5bdb      	ldrh	r3, [r3, r7]
 8004c4e:	002a      	movs	r2, r5
 8004c50:	4122      	asrs	r2, r4
 8004c52:	421a      	tst	r2, r3
 8004c54:	d1ed      	bne.n	8004c32 <UpdateMyPortsDir+0xe>
			SwapUartPins(GetUart(p), NORMAL);
 8004c56:	f00a f8bf 	bl	800edd8 <GetUart>
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	f00a f954 	bl	800ef08 <SwapUartPins>
 8004c60:	e7ec      	b.n	8004c3c <UpdateMyPortsDir+0x18>
		}	
	}		
	
	return result;
}
 8004c62:	2000      	movs	r0, #0
 8004c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	20007164 	.word	0x20007164
 8004c6c:	2000104c 	.word	0x2000104c

08004c70 <BOS_Init>:
{
 8004c70:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8004c72:	f009 fdc9 	bl	800e808 <RTC_Init>
	GetTimeDate();
 8004c76:	f009 fe67 	bl	800e948 <GetTimeDate>
	EE_Init();
 8004c7a:	f003 f9d1 	bl	8008020 <EE_Init>
  GPIO_Init();
 8004c7e:	f009 fb23 	bl	800e2c8 <GPIO_Init>
	DMA_Init();
 8004c82:	f008 faaf 	bl	800d1e4 <DMA_Init>
	TIM_USEC_Init();
 8004c86:	f009 fe93 	bl	800e9b0 <TIM_USEC_Init>
	CRC_Init();
 8004c8a:	f009 fac9 	bl	800e220 <CRC_Init>
	TIM_MSEC_Init();
 8004c8e:	f009 fec1 	bl	800ea14 <TIM_MSEC_Init>
	if (IsFactoryReset())
 8004c92:	f009 fbcd 	bl	800e430 <IsFactoryReset>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d11a      	bne.n	8004cd0 <BOS_Init+0x60>
	if (IsLowerCLIbaud())
 8004c9a:	f7ff f885 	bl	8003da8 <IsLowerCLIbaud>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d021      	beq.n	8004ce6 <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag = 1;
 8004ca2:	4b3e      	ldr	r3, [pc, #248]	; (8004d9c <BOS_Init+0x12c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8004ca8:	2032      	movs	r0, #50	; 0x32
 8004caa:	f009 fef5 	bl	800ea98 <StartMilliDelay>
		Module_Init();	
 8004cae:	f006 fcf3 	bl	800b698 <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004cb2:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <BOS_Init+0x130>)
 8004cb4:	22e1      	movs	r2, #225	; 0xe1
 8004cb6:	0252      	lsls	r2, r2, #9
 8004cb8:	609a      	str	r2, [r3, #8]
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004cba:	2401      	movs	r4, #1
			UpdateBaudrate(port, BOS.clibaudrate);
 8004cbc:	001d      	movs	r5, r3
 8004cbe:	68a9      	ldr	r1, [r5, #8]
 8004cc0:	0020      	movs	r0, r4
 8004cc2:	f00a f917 	bl	800eef4 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004cc6:	3401      	adds	r4, #1
 8004cc8:	b2e4      	uxtb	r4, r4
 8004cca:	2c06      	cmp	r4, #6
 8004ccc:	d1f7      	bne.n	8004cbe <BOS_Init+0x4e>
 8004cce:	e00f      	b.n	8004cf0 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 8004cd0:	f7ff f8ba 	bl	8003e48 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004cd4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cd8:	4b32      	ldr	r3, [pc, #200]	; (8004da4 <BOS_Init+0x134>)
 8004cda:	4a33      	ldr	r2, [pc, #204]	; (8004da8 <BOS_Init+0x138>)
 8004cdc:	60da      	str	r2, [r3, #12]
 8004cde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	e7fd      	b.n	8004ce2 <BOS_Init+0x72>
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8004ce6:	2032      	movs	r0, #50	; 0x32
 8004ce8:	f009 fed6 	bl	800ea98 <StartMilliDelay>
		Module_Init();				
 8004cec:	f006 fcd4 	bl	800b698 <Module_Init>
	LoadEEvars();
 8004cf0:	f7ff f848 	bl	8003d84 <LoadEEvars>
	UpdateMyPortsDir();
 8004cf4:	f7ff ff96 	bl	8004c24 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004cf8:	f008 feda 	bl	800dab0 <SetupMessagingRxDMAs>
	if (myID == 0)		/* Native module */
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <BOS_Init+0x13c>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d117      	bne.n	8004d34 <BOS_Init+0xc4>
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8004d04:	2580      	movs	r5, #128	; 0x80
 8004d06:	012d      	lsls	r5, r5, #4
 8004d08:	2490      	movs	r4, #144	; 0x90
 8004d0a:	05e4      	lsls	r4, r4, #23
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	0029      	movs	r1, r5
 8004d10:	0020      	movs	r0, r4
 8004d12:	f00d fb03 	bl	801231c <HAL_GPIO_WritePin>
 8004d16:	20fa      	movs	r0, #250	; 0xfa
 8004d18:	0040      	lsls	r0, r0, #1
 8004d1a:	f009 febd 	bl	800ea98 <StartMilliDelay>
 8004d1e:	2200      	movs	r2, #0
 8004d20:	0029      	movs	r1, r5
 8004d22:	0020      	movs	r0, r4
 8004d24:	f00d fafa 	bl	801231c <HAL_GPIO_WritePin>
	ResetUartORE();
 8004d28:	f002 ffb4 	bl	8007c94 <ResetUartORE>
	BOS_initialized = 1;
 8004d2c:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <BOS_Init+0x140>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
}
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8004d34:	2580      	movs	r5, #128	; 0x80
 8004d36:	012d      	lsls	r5, r5, #4
 8004d38:	2490      	movs	r4, #144	; 0x90
 8004d3a:	05e4      	lsls	r4, r4, #23
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	0029      	movs	r1, r5
 8004d40:	0020      	movs	r0, r4
 8004d42:	f00d faeb 	bl	801231c <HAL_GPIO_WritePin>
 8004d46:	20fa      	movs	r0, #250	; 0xfa
 8004d48:	0040      	lsls	r0, r0, #1
 8004d4a:	f009 fea5 	bl	800ea98 <StartMilliDelay>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	0029      	movs	r1, r5
 8004d52:	0020      	movs	r0, r4
 8004d54:	f00d fae2 	bl	801231c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004d58:	2064      	movs	r0, #100	; 0x64
 8004d5a:	f009 fe9d 	bl	800ea98 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8004d5e:	2201      	movs	r2, #1
 8004d60:	0029      	movs	r1, r5
 8004d62:	0020      	movs	r0, r4
 8004d64:	f00d fada 	bl	801231c <HAL_GPIO_WritePin>
 8004d68:	2064      	movs	r0, #100	; 0x64
 8004d6a:	f009 fe95 	bl	800ea98 <StartMilliDelay>
 8004d6e:	2200      	movs	r2, #0
 8004d70:	0029      	movs	r1, r5
 8004d72:	0020      	movs	r0, r4
 8004d74:	f00d fad2 	bl	801231c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004d78:	2064      	movs	r0, #100	; 0x64
 8004d7a:	f009 fe8d 	bl	800ea98 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8004d7e:	2201      	movs	r2, #1
 8004d80:	0029      	movs	r1, r5
 8004d82:	0020      	movs	r0, r4
 8004d84:	f00d faca 	bl	801231c <HAL_GPIO_WritePin>
 8004d88:	2064      	movs	r0, #100	; 0x64
 8004d8a:	f009 fe85 	bl	800ea98 <StartMilliDelay>
 8004d8e:	2200      	movs	r2, #0
 8004d90:	0029      	movs	r1, r5
 8004d92:	0020      	movs	r0, r4
 8004d94:	f00d fac2 	bl	801231c <HAL_GPIO_WritePin>
 8004d98:	e7c6      	b.n	8004d28 <BOS_Init+0xb8>
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	20000aa6 	.word	0x20000aa6
 8004da0:	20006d18 	.word	0x20006d18
 8004da4:	e000ed00 	.word	0xe000ed00
 8004da8:	05fa0004 	.word	0x05fa0004
 8004dac:	2000104c 	.word	0x2000104c
 8004db0:	20000aa5 	.word	0x20000aa5

08004db4 <GetDateString>:
/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
*/
char *GetDateString(void)
{
 8004db4:	b510      	push	{r4, lr}
 8004db6:	b082      	sub	sp, #8
  static const char formatDateStr[] = "%s %02d/%02d/%04d";
  char *buffer = malloc(30 * sizeof(int8_t));
 8004db8:	201e      	movs	r0, #30
 8004dba:	f00f f873 	bl	8013ea4 <malloc>
 8004dbe:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 8004dc0:	221e      	movs	r2, #30
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	f00f faad 	bl	8014322 <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 8004dc8:	4908      	ldr	r1, [pc, #32]	; (8004dec <GetDateString+0x38>)
 8004dca:	7d8b      	ldrb	r3, [r1, #22]
 8004dcc:	7d0a      	ldrb	r2, [r1, #20]
 8004dce:	3a01      	subs	r2, #1
 8004dd0:	0092      	lsls	r2, r2, #2
 8004dd2:	4807      	ldr	r0, [pc, #28]	; (8004df0 <GetDateString+0x3c>)
 8004dd4:	5812      	ldr	r2, [r2, r0]
 8004dd6:	8b08      	ldrh	r0, [r1, #24]
 8004dd8:	9001      	str	r0, [sp, #4]
 8004dda:	7d49      	ldrb	r1, [r1, #21]
 8004ddc:	9100      	str	r1, [sp, #0]
 8004dde:	4905      	ldr	r1, [pc, #20]	; (8004df4 <GetDateString+0x40>)
 8004de0:	0020      	movs	r0, r4
 8004de2:	f00f fc93 	bl	801470c <sprintf>
  return buffer;
}
 8004de6:	0020      	movs	r0, r4
 8004de8:	b002      	add	sp, #8
 8004dea:	bd10      	pop	{r4, pc}
 8004dec:	20006d18 	.word	0x20006d18
 8004df0:	0801ab9c 	.word	0x0801ab9c
 8004df4:	0801ab04 	.word	0x0801ab04

08004df8 <Bridge>:
/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
*/
BOS_Status Bridge(uint8_t port1, uint8_t port2)
{
 8004df8:	b500      	push	{lr}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 8004dfe:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <Bridge+0x24>)
 8004e00:	7819      	ldrb	r1, [r3, #0]
 8004e02:	2301      	movs	r3, #1
 8004e04:	9303      	str	r3, [sp, #12]
 8004e06:	3b02      	subs	r3, #2
 8004e08:	9302      	str	r3, [sp, #8]
 8004e0a:	9301      	str	r3, [sp, #4]
 8004e0c:	3303      	adds	r3, #3
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	000b      	movs	r3, r1
 8004e12:	f004 fd1b 	bl	800984c <StartScastDMAStream>
}
 8004e16:	b005      	add	sp, #20
 8004e18:	bd00      	pop	{pc}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	2000104c 	.word	0x2000104c

08004e20 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
*/
BOS_Status Unbridge(uint8_t port1, uint8_t port2)
{		
 8004e20:	b530      	push	{r4, r5, lr}
 8004e22:	b087      	sub	sp, #28
 8004e24:	0005      	movs	r5, r0
 8004e26:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	9302      	str	r3, [sp, #8]
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	2200      	movs	r2, #0
 8004e36:	2100      	movs	r1, #0
 8004e38:	2000      	movs	r0, #0
 8004e3a:	f7fe fe09 	bl	8003a50 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 8004e3e:	1e6a      	subs	r2, r5, #1
 8004e40:	00d3      	lsls	r3, r2, #3
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4a14      	ldr	r2, [pc, #80]	; (8004e98 <Unbridge+0x78>)
 8004e48:	589b      	ldr	r3, [r3, r2]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d014      	beq.n	8004e78 <Unbridge+0x58>
 8004e4e:	1e62      	subs	r2, r4, #1
 8004e50:	00d3      	lsls	r3, r2, #3
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4a10      	ldr	r2, [pc, #64]	; (8004e98 <Unbridge+0x78>)
 8004e58:	589b      	ldr	r3, [r3, r2]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d104      	bne.n	8004e68 <Unbridge+0x48>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
	else if (streamDMA[port1-1].Instance != 0)
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 8004e5e:	0028      	movs	r0, r5
 8004e60:	f002 fe88 	bl	8007b74 <SwitchStreamDMAToMsg>
 8004e64:	2000      	movs	r0, #0
 8004e66:	e013      	b.n	8004e90 <Unbridge+0x70>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8004e68:	0028      	movs	r0, r5
 8004e6a:	f002 fe83 	bl	8007b74 <SwitchStreamDMAToMsg>
 8004e6e:	0020      	movs	r0, r4
 8004e70:	f002 fe80 	bl	8007b74 <SwitchStreamDMAToMsg>
 8004e74:	2000      	movs	r0, #0
 8004e76:	e00b      	b.n	8004e90 <Unbridge+0x70>
	else if (streamDMA[port2-1].Instance != 0)
 8004e78:	1e62      	subs	r2, r4, #1
 8004e7a:	00d3      	lsls	r3, r2, #3
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4a05      	ldr	r2, [pc, #20]	; (8004e98 <Unbridge+0x78>)
 8004e82:	589b      	ldr	r3, [r3, r2]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <Unbridge+0x74>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 8004e88:	0020      	movs	r0, r4
 8004e8a:	f002 fe73 	bl	8007b74 <SwitchStreamDMAToMsg>
 8004e8e:	2000      	movs	r0, #0
	else {return BOS_ERR_WrongValue;}
}
 8004e90:	b007      	add	sp, #28
 8004e92:	bd30      	pop	{r4, r5, pc}
	else {return BOS_ERR_WrongValue;}
 8004e94:	2068      	movs	r0, #104	; 0x68
 8004e96:	e7fb      	b.n	8004e90 <Unbridge+0x70>
 8004e98:	20001ce8 	.word	0x20001ce8

08004e9c <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 8004e9c:	b530      	push	{r4, r5, lr}
	for(int i = 0; string[i]; i++){
 8004e9e:	7803      	ldrb	r3, [r0, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00f      	beq.n	8004ec4 <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8004ea4:	4d08      	ldr	r5, [pc, #32]	; (8004ec8 <StringToLowerCase+0x2c>)
 8004ea6:	2403      	movs	r4, #3
 8004ea8:	e004      	b.n	8004eb4 <StringToLowerCase+0x18>
 8004eaa:	7001      	strb	r1, [r0, #0]
	for(int i = 0; string[i]; i++){
 8004eac:	3001      	adds	r0, #1
 8004eae:	7803      	ldrb	r3, [r0, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8004eb4:	5cea      	ldrb	r2, [r5, r3]
 8004eb6:	4022      	ands	r2, r4
 8004eb8:	0019      	movs	r1, r3
 8004eba:	2a01      	cmp	r2, #1
 8004ebc:	d1f5      	bne.n	8004eaa <StringToLowerCase+0xe>
 8004ebe:	3320      	adds	r3, #32
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	e7f2      	b.n	8004eaa <StringToLowerCase+0xe>
	}
}
 8004ec4:	bd30      	pop	{r4, r5, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	0801d895 	.word	0x0801d895

08004ecc <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	46ce      	mov	lr, r9
 8004ed0:	4647      	mov	r7, r8
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b089      	sub	sp, #36	; 0x24
 8004ed6:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8004ed8:	4bde      	ldr	r3, [pc, #888]	; (8005254 <ParseSnippetCondition+0x388>)
 8004eda:	781c      	ldrb	r4, [r3, #0]
 8004edc:	2c05      	cmp	r4, #5
 8004ede:	d100      	bne.n	8004ee2 <ParseSnippetCondition+0x16>
 8004ee0:	e21a      	b.n	8005318 <ParseSnippetCondition+0x44c>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 8004ee2:	49dd      	ldr	r1, [pc, #884]	; (8005258 <ParseSnippetCondition+0x38c>)
 8004ee4:	00a3      	lsls	r3, r4, #2
 8004ee6:	191a      	adds	r2, r3, r4
 8004ee8:	0092      	lsls	r2, r2, #2
 8004eea:	2000      	movs	r0, #0
 8004eec:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8004eee:	191a      	adds	r2, r3, r4
 8004ef0:	0092      	lsls	r2, r2, #2
 8004ef2:	188a      	adds	r2, r1, r2
 8004ef4:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8004ef6:	1918      	adds	r0, r3, r4
 8004ef8:	0080      	lsls	r0, r0, #2
 8004efa:	3002      	adds	r0, #2
 8004efc:	1840      	adds	r0, r0, r1
 8004efe:	2204      	movs	r2, #4
 8004f00:	2100      	movs	r1, #0
 8004f02:	f00f fa0e 	bl	8014322 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8004f06:	782b      	ldrb	r3, [r5, #0]
 8004f08:	2b62      	cmp	r3, #98	; 0x62
 8004f0a:	d102      	bne.n	8004f12 <ParseSnippetCondition+0x46>
 8004f0c:	78ab      	ldrb	r3, [r5, #2]
 8004f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f10:	d032      	beq.n	8004f78 <ParseSnippetCondition+0xac>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 8004f12:	4cd2      	ldr	r4, [pc, #840]	; (800525c <ParseSnippetCondition+0x390>)
 8004f14:	0029      	movs	r1, r5
 8004f16:	0020      	movs	r0, r4
 8004f18:	f00f fc33 	bl	8014782 <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8004f1c:	4dd0      	ldr	r5, [pc, #832]	; (8005260 <ParseSnippetCondition+0x394>)
 8004f1e:	0029      	movs	r1, r5
 8004f20:	0020      	movs	r0, r4
 8004f22:	f010 faa5 	bl	8015470 <strtok>
 8004f26:	0004      	movs	r4, r0
		secondPart = strtok ( NULL, " ");
 8004f28:	0029      	movs	r1, r5
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	f010 faa0 	bl	8015470 <strtok>
 8004f30:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 8004f32:	0029      	movs	r1, r5
 8004f34:	2000      	movs	r0, #0
 8004f36:	f010 fa9b 	bl	8015470 <strtok>
 8004f3a:	0005      	movs	r5, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 8004f3c:	2c00      	cmp	r4, #0
 8004f3e:	d100      	bne.n	8004f42 <ParseSnippetCondition+0x76>
 8004f40:	e1ec      	b.n	800531c <ParseSnippetCondition+0x450>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 8004f42:	0020      	movs	r0, r4
 8004f44:	f7fe ffaa 	bl	8003e9c <IsModuleParameter>
 8004f48:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004f4a:	d100      	bne.n	8004f4e <ParseSnippetCondition+0x82>
 8004f4c:	e194      	b.n	8005278 <ParseSnippetCondition+0x3ac>
 8004f4e:	2e00      	cmp	r6, #0
 8004f50:	d000      	beq.n	8004f54 <ParseSnippetCondition+0x88>
 8004f52:	e193      	b.n	800527c <ParseSnippetCondition+0x3b0>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 8004f54:	3667      	adds	r6, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	d000      	beq.n	8004f5c <ParseSnippetCondition+0x90>
 8004f5a:	e1ba      	b.n	80052d2 <ParseSnippetCondition+0x406>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 8004f5c:	4dbd      	ldr	r5, [pc, #756]	; (8005254 <ParseSnippetCondition+0x388>)
 8004f5e:	782b      	ldrb	r3, [r5, #0]
 8004f60:	49bd      	ldr	r1, [pc, #756]	; (8005258 <ParseSnippetCondition+0x38c>)
 8004f62:	009a      	lsls	r2, r3, #2
 8004f64:	18d0      	adds	r0, r2, r3
 8004f66:	0080      	lsls	r0, r0, #2
 8004f68:	3e65      	subs	r6, #101	; 0x65
 8004f6a:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004f6c:	180a      	adds	r2, r1, r0
 8004f6e:	70d4      	strb	r4, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004f70:	3301      	adds	r3, #1
 8004f72:	702b      	strb	r3, [r5, #0]
				return BOS_OK;
 8004f74:	2600      	movs	r6, #0
 8004f76:	e1ac      	b.n	80052d2 <ParseSnippetCondition+0x406>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004f78:	786f      	ldrb	r7, [r5, #1]
 8004f7a:	3f30      	subs	r7, #48	; 0x30
 8004f7c:	b2ff      	uxtb	r7, r7
	BOS_Status status = BOS_OK;
 8004f7e:	2600      	movs	r6, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004f80:	2f05      	cmp	r7, #5
 8004f82:	d900      	bls.n	8004f86 <ParseSnippetCondition+0xba>
 8004f84:	e1a5      	b.n	80052d2 <ParseSnippetCondition+0x406>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004f86:	4ab4      	ldr	r2, [pc, #720]	; (8005258 <ParseSnippetCondition+0x38c>)
 8004f88:	00a3      	lsls	r3, r4, #2
 8004f8a:	1919      	adds	r1, r3, r4
 8004f8c:	0089      	lsls	r1, r1, #2
 8004f8e:	2001      	movs	r0, #1
 8004f90:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 8004f92:	1853      	adds	r3, r2, r1
 8004f94:	2200      	movs	r2, #0
 8004f96:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8004f98:	709f      	strb	r7, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 8004f9a:	1cee      	adds	r6, r5, #3
 8004f9c:	3207      	adds	r2, #7
 8004f9e:	49b1      	ldr	r1, [pc, #708]	; (8005264 <ParseSnippetCondition+0x398>)
 8004fa0:	0030      	movs	r0, r6
 8004fa2:	f00f fbf6 	bl	8014792 <strncmp>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d124      	bne.n	8004ff4 <ParseSnippetCondition+0x128>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8004faa:	00a3      	lsls	r3, r4, #2
 8004fac:	191c      	adds	r4, r3, r4
 8004fae:	00a4      	lsls	r4, r4, #2
 8004fb0:	4ba9      	ldr	r3, [pc, #676]	; (8005258 <ParseSnippetCondition+0x38c>)
 8004fb2:	191c      	adds	r4, r3, r4
 8004fb4:	2305      	movs	r3, #5
 8004fb6:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004fb8:	00fa      	lsls	r2, r7, #3
 8004fba:	19d2      	adds	r2, r2, r7
 8004fbc:	4baa      	ldr	r3, [pc, #680]	; (8005268 <ParseSnippetCondition+0x39c>)
 8004fbe:	189b      	adds	r3, r3, r2
 8004fc0:	7a1b      	ldrb	r3, [r3, #8]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	0016      	movs	r6, r2
 8004fc6:	401e      	ands	r6, r3
 8004fc8:	421a      	tst	r2, r3
 8004fca:	d005      	beq.n	8004fd8 <ParseSnippetCondition+0x10c>
				status = BOS_OK;
 8004fcc:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004fce:	4aa1      	ldr	r2, [pc, #644]	; (8005254 <ParseSnippetCondition+0x388>)
 8004fd0:	7813      	ldrb	r3, [r2, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	7013      	strb	r3, [r2, #0]
 8004fd6:	e17c      	b.n	80052d2 <ParseSnippetCondition+0x406>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004fd8:	2301      	movs	r3, #1
 8004fda:	9305      	str	r3, [sp, #20]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	9304      	str	r3, [sp, #16]
 8004fe0:	9303      	str	r3, [sp, #12]
 8004fe2:	9302      	str	r3, [sp, #8]
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2101      	movs	r1, #1
 8004fec:	0038      	movs	r0, r7
 8004fee:	f003 ff05 	bl	8008dfc <SetButtonEvents>
 8004ff2:	e7ec      	b.n	8004fce <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8004ff4:	220e      	movs	r2, #14
 8004ff6:	499d      	ldr	r1, [pc, #628]	; (800526c <ParseSnippetCondition+0x3a0>)
 8004ff8:	0030      	movs	r0, r6
 8004ffa:	f00f fbca 	bl	8014792 <strncmp>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d120      	bne.n	8005044 <ParseSnippetCondition+0x178>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 8005002:	00a3      	lsls	r3, r4, #2
 8005004:	191c      	adds	r4, r3, r4
 8005006:	00a4      	lsls	r4, r4, #2
 8005008:	4b93      	ldr	r3, [pc, #588]	; (8005258 <ParseSnippetCondition+0x38c>)
 800500a:	191c      	adds	r4, r3, r4
 800500c:	2306      	movs	r3, #6
 800500e:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8005010:	00fa      	lsls	r2, r7, #3
 8005012:	19d2      	adds	r2, r2, r7
 8005014:	4b94      	ldr	r3, [pc, #592]	; (8005268 <ParseSnippetCondition+0x39c>)
 8005016:	189b      	adds	r3, r3, r2
 8005018:	7a1b      	ldrb	r3, [r3, #8]
 800501a:	2202      	movs	r2, #2
 800501c:	0016      	movs	r6, r2
 800501e:	401e      	ands	r6, r3
 8005020:	421a      	tst	r2, r3
 8005022:	d001      	beq.n	8005028 <ParseSnippetCondition+0x15c>
				status = BOS_OK;					
 8005024:	2600      	movs	r6, #0
 8005026:	e7d2      	b.n	8004fce <ParseSnippetCondition+0x102>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8005028:	2301      	movs	r3, #1
 800502a:	9305      	str	r3, [sp, #20]
 800502c:	2300      	movs	r3, #0
 800502e:	9304      	str	r3, [sp, #16]
 8005030:	9303      	str	r3, [sp, #12]
 8005032:	9302      	str	r3, [sp, #8]
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	3a01      	subs	r2, #1
 800503a:	2100      	movs	r1, #0
 800503c:	0038      	movs	r0, r7
 800503e:	f003 fedd 	bl	8008dfc <SetButtonEvents>
 8005042:	e7c4      	b.n	8004fce <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8005044:	220c      	movs	r2, #12
 8005046:	498a      	ldr	r1, [pc, #552]	; (8005270 <ParseSnippetCondition+0x3a4>)
 8005048:	0030      	movs	r0, r6
 800504a:	f00f fba2 	bl	8014792 <strncmp>
 800504e:	2800      	cmp	r0, #0
 8005050:	d17b      	bne.n	800514a <ParseSnippetCondition+0x27e>
				if (!button[port].pressedX1Sec) {	
 8005052:	00fa      	lsls	r2, r7, #3
 8005054:	19d2      	adds	r2, r2, r7
 8005056:	4b84      	ldr	r3, [pc, #528]	; (8005268 <ParseSnippetCondition+0x39c>)
 8005058:	189b      	adds	r3, r3, r2
 800505a:	789e      	ldrb	r6, [r3, #2]
 800505c:	2e00      	cmp	r6, #0
 800505e:	d00f      	beq.n	8005080 <ParseSnippetCondition+0x1b4>
				} else if (!button[port].pressedX2Sec) {	
 8005060:	00fa      	lsls	r2, r7, #3
 8005062:	19d2      	adds	r2, r2, r7
 8005064:	4b80      	ldr	r3, [pc, #512]	; (8005268 <ParseSnippetCondition+0x39c>)
 8005066:	189b      	adds	r3, r3, r2
 8005068:	78de      	ldrb	r6, [r3, #3]
 800506a:	2e00      	cmp	r6, #0
 800506c:	d029      	beq.n	80050c2 <ParseSnippetCondition+0x1f6>
				} else if (!button[port].pressedX3Sec) {	
 800506e:	00fa      	lsls	r2, r7, #3
 8005070:	19d2      	adds	r2, r2, r7
 8005072:	4b7d      	ldr	r3, [pc, #500]	; (8005268 <ParseSnippetCondition+0x39c>)
 8005074:	189b      	adds	r3, r3, r2
 8005076:	791e      	ldrb	r6, [r3, #4]
 8005078:	2e00      	cmp	r6, #0
 800507a:	d044      	beq.n	8005106 <ParseSnippetCondition+0x23a>
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 800507c:	260c      	movs	r6, #12
 800507e:	e7a6      	b.n	8004fce <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 8005080:	4b75      	ldr	r3, [pc, #468]	; (8005258 <ParseSnippetCondition+0x38c>)
 8005082:	4698      	mov	r8, r3
 8005084:	00a3      	lsls	r3, r4, #2
 8005086:	191b      	adds	r3, r3, r4
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4443      	add	r3, r8
 800508c:	2209      	movs	r2, #9
 800508e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8005090:	0028      	movs	r0, r5
 8005092:	300f      	adds	r0, #15
 8005094:	f00e fed5 	bl	8013e42 <atoi>
 8005098:	b2c3      	uxtb	r3, r0
 800509a:	4a6e      	ldr	r2, [pc, #440]	; (8005254 <ParseSnippetCondition+0x388>)
 800509c:	7811      	ldrb	r1, [r2, #0]
 800509e:	008a      	lsls	r2, r1, #2
 80050a0:	1852      	adds	r2, r2, r1
 80050a2:	0092      	lsls	r2, r2, #2
 80050a4:	4442      	add	r2, r8
 80050a6:	7113      	strb	r3, [r2, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80050a8:	2201      	movs	r2, #1
 80050aa:	9205      	str	r2, [sp, #20]
 80050ac:	2200      	movs	r2, #0
 80050ae:	9204      	str	r2, [sp, #16]
 80050b0:	9203      	str	r2, [sp, #12]
 80050b2:	9202      	str	r2, [sp, #8]
 80050b4:	9201      	str	r2, [sp, #4]
 80050b6:	9200      	str	r2, [sp, #0]
 80050b8:	2100      	movs	r1, #0
 80050ba:	0038      	movs	r0, r7
 80050bc:	f003 fe9e 	bl	8008dfc <SetButtonEvents>
					status = BOS_OK;
 80050c0:	e785      	b.n	8004fce <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 80050c2:	4b65      	ldr	r3, [pc, #404]	; (8005258 <ParseSnippetCondition+0x38c>)
 80050c4:	4698      	mov	r8, r3
 80050c6:	00a3      	lsls	r3, r4, #2
 80050c8:	191b      	adds	r3, r3, r4
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4443      	add	r3, r8
 80050ce:	220a      	movs	r2, #10
 80050d0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 80050d2:	0028      	movs	r0, r5
 80050d4:	300f      	adds	r0, #15
 80050d6:	f00e feb4 	bl	8013e42 <atoi>
 80050da:	b2c0      	uxtb	r0, r0
 80050dc:	4b5d      	ldr	r3, [pc, #372]	; (8005254 <ParseSnippetCondition+0x388>)
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	0093      	lsls	r3, r2, #2
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4443      	add	r3, r8
 80050e8:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80050ea:	2301      	movs	r3, #1
 80050ec:	9305      	str	r3, [sp, #20]
 80050ee:	2300      	movs	r3, #0
 80050f0:	9304      	str	r3, [sp, #16]
 80050f2:	9303      	str	r3, [sp, #12]
 80050f4:	9302      	str	r3, [sp, #8]
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	9000      	str	r0, [sp, #0]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2100      	movs	r1, #0
 80050fe:	0038      	movs	r0, r7
 8005100:	f003 fe7c 	bl	8008dfc <SetButtonEvents>
					status = BOS_OK;		
 8005104:	e763      	b.n	8004fce <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 8005106:	4b54      	ldr	r3, [pc, #336]	; (8005258 <ParseSnippetCondition+0x38c>)
 8005108:	4698      	mov	r8, r3
 800510a:	00a3      	lsls	r3, r4, #2
 800510c:	191b      	adds	r3, r3, r4
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4443      	add	r3, r8
 8005112:	220b      	movs	r2, #11
 8005114:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8005116:	0028      	movs	r0, r5
 8005118:	300f      	adds	r0, #15
 800511a:	f00e fe92 	bl	8013e42 <atoi>
 800511e:	b2c0      	uxtb	r0, r0
 8005120:	4b4c      	ldr	r3, [pc, #304]	; (8005254 <ParseSnippetCondition+0x388>)
 8005122:	781a      	ldrb	r2, [r3, #0]
 8005124:	0093      	lsls	r3, r2, #2
 8005126:	189b      	adds	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4443      	add	r3, r8
 800512c:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 800512e:	2301      	movs	r3, #1
 8005130:	9305      	str	r3, [sp, #20]
 8005132:	2300      	movs	r3, #0
 8005134:	9304      	str	r3, [sp, #16]
 8005136:	9303      	str	r3, [sp, #12]
 8005138:	9302      	str	r3, [sp, #8]
 800513a:	9001      	str	r0, [sp, #4]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	2200      	movs	r2, #0
 8005140:	2100      	movs	r1, #0
 8005142:	0038      	movs	r0, r7
 8005144:	f003 fe5a 	bl	8008dfc <SetButtonEvents>
					status = BOS_OK;	
 8005148:	e741      	b.n	8004fce <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 800514a:	220d      	movs	r2, #13
 800514c:	4949      	ldr	r1, [pc, #292]	; (8005274 <ParseSnippetCondition+0x3a8>)
 800514e:	0030      	movs	r0, r6
 8005150:	f00f fb1f 	bl	8014792 <strncmp>
	BOS_Status status = BOS_OK;
 8005154:	2600      	movs	r6, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8005156:	2800      	cmp	r0, #0
 8005158:	d000      	beq.n	800515c <ParseSnippetCondition+0x290>
 800515a:	e738      	b.n	8004fce <ParseSnippetCondition+0x102>
				if (!button[port].releasedY1Sec) {	
 800515c:	00fa      	lsls	r2, r7, #3
 800515e:	19d2      	adds	r2, r2, r7
 8005160:	4b41      	ldr	r3, [pc, #260]	; (8005268 <ParseSnippetCondition+0x39c>)
 8005162:	189b      	adds	r3, r3, r2
 8005164:	795e      	ldrb	r6, [r3, #5]
 8005166:	2e00      	cmp	r6, #0
 8005168:	d00f      	beq.n	800518a <ParseSnippetCondition+0x2be>
				} else if (!button[port].releasedY2Sec) {	
 800516a:	00fa      	lsls	r2, r7, #3
 800516c:	19d2      	adds	r2, r2, r7
 800516e:	4b3e      	ldr	r3, [pc, #248]	; (8005268 <ParseSnippetCondition+0x39c>)
 8005170:	189b      	adds	r3, r3, r2
 8005172:	799e      	ldrb	r6, [r3, #6]
 8005174:	2e00      	cmp	r6, #0
 8005176:	d02a      	beq.n	80051ce <ParseSnippetCondition+0x302>
				} else if (!button[port].releasedY3Sec) {	
 8005178:	00fa      	lsls	r2, r7, #3
 800517a:	19d2      	adds	r2, r2, r7
 800517c:	4b3a      	ldr	r3, [pc, #232]	; (8005268 <ParseSnippetCondition+0x39c>)
 800517e:	189b      	adds	r3, r3, r2
 8005180:	79de      	ldrb	r6, [r3, #7]
 8005182:	2e00      	cmp	r6, #0
 8005184:	d044      	beq.n	8005210 <ParseSnippetCondition+0x344>
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8005186:	260d      	movs	r6, #13
 8005188:	e721      	b.n	8004fce <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 800518a:	4b33      	ldr	r3, [pc, #204]	; (8005258 <ParseSnippetCondition+0x38c>)
 800518c:	4698      	mov	r8, r3
 800518e:	00a3      	lsls	r3, r4, #2
 8005190:	191b      	adds	r3, r3, r4
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4443      	add	r3, r8
 8005196:	220c      	movs	r2, #12
 8005198:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 800519a:	0028      	movs	r0, r5
 800519c:	3010      	adds	r0, #16
 800519e:	f00e fe50 	bl	8013e42 <atoi>
 80051a2:	b2c0      	uxtb	r0, r0
 80051a4:	4b2b      	ldr	r3, [pc, #172]	; (8005254 <ParseSnippetCondition+0x388>)
 80051a6:	781a      	ldrb	r2, [r3, #0]
 80051a8:	0093      	lsls	r3, r2, #2
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4443      	add	r3, r8
 80051b0:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 80051b2:	2301      	movs	r3, #1
 80051b4:	9305      	str	r3, [sp, #20]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	9303      	str	r3, [sp, #12]
 80051bc:	9002      	str	r0, [sp, #8]
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	2100      	movs	r1, #0
 80051c6:	0038      	movs	r0, r7
 80051c8:	f003 fe18 	bl	8008dfc <SetButtonEvents>
					status = BOS_OK;
 80051cc:	e6ff      	b.n	8004fce <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 80051ce:	4b22      	ldr	r3, [pc, #136]	; (8005258 <ParseSnippetCondition+0x38c>)
 80051d0:	4698      	mov	r8, r3
 80051d2:	2314      	movs	r3, #20
 80051d4:	4699      	mov	r9, r3
 80051d6:	435c      	muls	r4, r3
 80051d8:	4444      	add	r4, r8
 80051da:	3b07      	subs	r3, #7
 80051dc:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 80051de:	0028      	movs	r0, r5
 80051e0:	3010      	adds	r0, #16
 80051e2:	f00e fe2e 	bl	8013e42 <atoi>
 80051e6:	b2c0      	uxtb	r0, r0
 80051e8:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <ParseSnippetCondition+0x388>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	464a      	mov	r2, r9
 80051ee:	4353      	muls	r3, r2
 80051f0:	4443      	add	r3, r8
 80051f2:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 80051f4:	2301      	movs	r3, #1
 80051f6:	9305      	str	r3, [sp, #20]
 80051f8:	2100      	movs	r1, #0
 80051fa:	9104      	str	r1, [sp, #16]
 80051fc:	9003      	str	r0, [sp, #12]
 80051fe:	9102      	str	r1, [sp, #8]
 8005200:	9101      	str	r1, [sp, #4]
 8005202:	9100      	str	r1, [sp, #0]
 8005204:	000b      	movs	r3, r1
 8005206:	000a      	movs	r2, r1
 8005208:	0038      	movs	r0, r7
 800520a:	f003 fdf7 	bl	8008dfc <SetButtonEvents>
					status = BOS_OK;		
 800520e:	e6de      	b.n	8004fce <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8005210:	4b11      	ldr	r3, [pc, #68]	; (8005258 <ParseSnippetCondition+0x38c>)
 8005212:	4698      	mov	r8, r3
 8005214:	2314      	movs	r3, #20
 8005216:	4699      	mov	r9, r3
 8005218:	435c      	muls	r4, r3
 800521a:	4444      	add	r4, r8
 800521c:	3b06      	subs	r3, #6
 800521e:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8005220:	0028      	movs	r0, r5
 8005222:	3010      	adds	r0, #16
 8005224:	f00e fe0d 	bl	8013e42 <atoi>
 8005228:	b2c0      	uxtb	r0, r0
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <ParseSnippetCondition+0x388>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	464a      	mov	r2, r9
 8005230:	4353      	muls	r3, r2
 8005232:	4443      	add	r3, r8
 8005234:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 8005236:	2301      	movs	r3, #1
 8005238:	9305      	str	r3, [sp, #20]
 800523a:	9004      	str	r0, [sp, #16]
 800523c:	2100      	movs	r1, #0
 800523e:	9103      	str	r1, [sp, #12]
 8005240:	9102      	str	r1, [sp, #8]
 8005242:	9101      	str	r1, [sp, #4]
 8005244:	9100      	str	r1, [sp, #0]
 8005246:	000b      	movs	r3, r1
 8005248:	000a      	movs	r2, r1
 800524a:	0038      	movs	r0, r7
 800524c:	f003 fdd6 	bl	8008dfc <SetButtonEvents>
					status = BOS_OK;	
 8005250:	e6bd      	b.n	8004fce <ParseSnippetCondition+0x102>
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	200011eb 	.word	0x200011eb
 8005258:	20006d34 	.word	0x20006d34
 800525c:	20001150 	.word	0x20001150
 8005260:	0801a7a8 	.word	0x0801a7a8
 8005264:	0801b34c 	.word	0x0801b34c
 8005268:	20001484 	.word	0x20001484
 800526c:	0801abb8 	.word	0x0801abb8
 8005270:	0801abc8 	.word	0x0801abc8
 8005274:	0801abd8 	.word	0x0801abd8
			else if (secondPart != NULL && thirdPart != NULL) 
 8005278:	2e00      	cmp	r6, #0
 800527a:	d051      	beq.n	8005320 <ParseSnippetCondition+0x454>
 800527c:	2d00      	cmp	r5, #0
 800527e:	d051      	beq.n	8005324 <ParseSnippetCondition+0x458>
				modPar2 = IsModuleParameter(thirdPart);
 8005280:	0028      	movs	r0, r5
 8005282:	f7fe fe0b 	bl	8003e9c <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8005286:	2800      	cmp	r0, #0
 8005288:	d029      	beq.n	80052de <ParseSnippetCondition+0x412>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 800528a:	4b28      	ldr	r3, [pc, #160]	; (800532c <ParseSnippetCondition+0x460>)
 800528c:	781d      	ldrb	r5, [r3, #0]
 800528e:	4a28      	ldr	r2, [pc, #160]	; (8005330 <ParseSnippetCondition+0x464>)
 8005290:	00ab      	lsls	r3, r5, #2
 8005292:	1959      	adds	r1, r3, r5
 8005294:	0089      	lsls	r1, r1, #2
 8005296:	2704      	movs	r7, #4
 8005298:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 800529a:	1959      	adds	r1, r3, r5
 800529c:	0089      	lsls	r1, r1, #2
 800529e:	1851      	adds	r1, r2, r1
 80052a0:	70cc      	strb	r4, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 80052a2:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 80052a4:	4c21      	ldr	r4, [pc, #132]	; (800532c <ParseSnippetCondition+0x460>)
 80052a6:	7825      	ldrb	r5, [r4, #0]
 80052a8:	0030      	movs	r0, r6
 80052aa:	f7fe fe0d 	bl	8003ec8 <IsMathOperator>
 80052ae:	4a20      	ldr	r2, [pc, #128]	; (8005330 <ParseSnippetCondition+0x464>)
 80052b0:	00ab      	lsls	r3, r5, #2
 80052b2:	195b      	adds	r3, r3, r5
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	18d3      	adds	r3, r2, r3
 80052b8:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 80052ba:	7821      	ldrb	r1, [r4, #0]
 80052bc:	008b      	lsls	r3, r1, #2
 80052be:	185b      	adds	r3, r3, r1
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	18d3      	adds	r3, r2, r3
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d02e      	beq.n	8005328 <ParseSnippetCondition+0x45c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 80052ca:	3101      	adds	r1, #1
 80052cc:	4b17      	ldr	r3, [pc, #92]	; (800532c <ParseSnippetCondition+0x460>)
 80052ce:	7019      	strb	r1, [r3, #0]
				return BOS_OK;				
 80052d0:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 80052d2:	0030      	movs	r0, r6
 80052d4:	b009      	add	sp, #36	; 0x24
 80052d6:	bcc0      	pop	{r6, r7}
 80052d8:	46b9      	mov	r9, r7
 80052da:	46b0      	mov	r8, r6
 80052dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <ParseSnippetCondition+0x460>)
 80052e0:	4698      	mov	r8, r3
 80052e2:	781a      	ldrb	r2, [r3, #0]
 80052e4:	4f12      	ldr	r7, [pc, #72]	; (8005330 <ParseSnippetCondition+0x464>)
 80052e6:	0093      	lsls	r3, r2, #2
 80052e8:	1899      	adds	r1, r3, r2
 80052ea:	0089      	lsls	r1, r1, #2
 80052ec:	2003      	movs	r0, #3
 80052ee:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 80052f0:	187b      	adds	r3, r7, r1
 80052f2:	70dc      	strb	r4, [r3, #3]
					float constant = atof(thirdPart);
 80052f4:	0028      	movs	r0, r5
 80052f6:	f00e fd9f 	bl	8013e38 <atof>
 80052fa:	f7fd fffd 	bl	80032f8 <__aeabi_d2f>
 80052fe:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005300:	4643      	mov	r3, r8
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	0098      	lsls	r0, r3, #2
 8005306:	18c0      	adds	r0, r0, r3
 8005308:	0080      	lsls	r0, r0, #2
 800530a:	3006      	adds	r0, #6
 800530c:	19c0      	adds	r0, r0, r7
 800530e:	2204      	movs	r2, #4
 8005310:	a907      	add	r1, sp, #28
 8005312:	f00e fffd 	bl	8014310 <memcpy>
 8005316:	e7c5      	b.n	80052a4 <ParseSnippetCondition+0x3d8>
		return BOS_ERR_SNIP_MEM_FULL;
 8005318:	260e      	movs	r6, #14
 800531a:	e7da      	b.n	80052d2 <ParseSnippetCondition+0x406>
			return BOS_ERR_WrongParam;
 800531c:	2667      	movs	r6, #103	; 0x67
 800531e:	e7d8      	b.n	80052d2 <ParseSnippetCondition+0x406>
				return BOS_ERR_WrongParam;
 8005320:	2667      	movs	r6, #103	; 0x67
 8005322:	e7d6      	b.n	80052d2 <ParseSnippetCondition+0x406>
 8005324:	2667      	movs	r6, #103	; 0x67
 8005326:	e7d4      	b.n	80052d2 <ParseSnippetCondition+0x406>
					return BOS_ERR_WrongParam;
 8005328:	2667      	movs	r6, #103	; 0x67
 800532a:	e7d2      	b.n	80052d2 <ParseSnippetCondition+0x406>
 800532c:	200011eb 	.word	0x200011eb
 8005330:	20006d34 	.word	0x20006d34

08005334 <AddSnippet>:
{
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	000c      	movs	r4, r1
	switch (code)
 8005338:	2802      	cmp	r0, #2
 800533a:	d017      	beq.n	800536c <AddSnippet+0x38>
 800533c:	2803      	cmp	r0, #3
 800533e:	d003      	beq.n	8005348 <AddSnippet+0x14>
 8005340:	2801      	cmp	r0, #1
 8005342:	d00f      	beq.n	8005364 <AddSnippet+0x30>
 8005344:	2000      	movs	r0, #0
}
 8005346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets-1].state = true;
 8005348:	4b35      	ldr	r3, [pc, #212]	; (8005420 <AddSnippet+0xec>)
 800534a:	781a      	ldrb	r2, [r3, #0]
 800534c:	3a01      	subs	r2, #1
 800534e:	0093      	lsls	r3, r2, #2
 8005350:	189b      	adds	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a33      	ldr	r2, [pc, #204]	; (8005424 <AddSnippet+0xf0>)
 8005356:	18d3      	adds	r3, r2, r3
 8005358:	2201      	movs	r2, #1
 800535a:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 800535c:	f006 fa18 	bl	800b790 <SaveToRO>
	return BOS_OK;
 8005360:	2000      	movs	r0, #0
			break;
 8005362:	e7f0      	b.n	8005346 <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 8005364:	0008      	movs	r0, r1
 8005366:	f7ff fdb1 	bl	8004ecc <ParseSnippetCondition>
 800536a:	e7ec      	b.n	8005346 <AddSnippet+0x12>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 800536c:	4b2c      	ldr	r3, [pc, #176]	; (8005420 <AddSnippet+0xec>)
 800536e:	781d      	ldrb	r5, [r3, #0]
 8005370:	3d01      	subs	r5, #1
 8005372:	00ab      	lsls	r3, r5, #2
 8005374:	195b      	adds	r3, r3, r5
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4a2a      	ldr	r2, [pc, #168]	; (8005424 <AddSnippet+0xf0>)
 800537a:	18d3      	adds	r3, r2, r3
 800537c:	68de      	ldr	r6, [r3, #12]
 800537e:	2e00      	cmp	r6, #0
 8005380:	d032      	beq.n	80053e8 <AddSnippet+0xb4>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8005382:	0030      	movs	r0, r6
 8005384:	f7fa fec8 	bl	8000118 <strlen>
 8005388:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 800538a:	0020      	movs	r0, r4
 800538c:	f7fa fec4 	bl	8000118 <strlen>
 8005390:	1839      	adds	r1, r7, r0
 8005392:	3102      	adds	r1, #2
 8005394:	0030      	movs	r0, r6
 8005396:	f00e fff7 	bl	8014388 <realloc>
 800539a:	4e22      	ldr	r6, [pc, #136]	; (8005424 <AddSnippet+0xf0>)
 800539c:	00ab      	lsls	r3, r5, #2
 800539e:	195d      	adds	r5, r3, r5
 80053a0:	00ad      	lsls	r5, r5, #2
 80053a2:	1975      	adds	r5, r6, r5
 80053a4:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 80053a6:	4d1e      	ldr	r5, [pc, #120]	; (8005420 <AddSnippet+0xec>)
 80053a8:	782a      	ldrb	r2, [r5, #0]
 80053aa:	3a01      	subs	r2, #1
 80053ac:	0093      	lsls	r3, r2, #2
 80053ae:	189b      	adds	r3, r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	18f3      	adds	r3, r6, r3
 80053b4:	1c7a      	adds	r2, r7, #1
 80053b6:	68d8      	ldr	r0, [r3, #12]
 80053b8:	1880      	adds	r0, r0, r2
 80053ba:	0021      	movs	r1, r4
 80053bc:	f00f f9e1 	bl	8014782 <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 80053c0:	782a      	ldrb	r2, [r5, #0]
 80053c2:	3a01      	subs	r2, #1
 80053c4:	0093      	lsls	r3, r2, #2
 80053c6:	189b      	adds	r3, r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	18f3      	adds	r3, r6, r3
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2213      	movs	r2, #19
 80053d0:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 80053d2:	782a      	ldrb	r2, [r5, #0]
 80053d4:	3a01      	subs	r2, #1
 80053d6:	0093      	lsls	r3, r2, #2
 80053d8:	189b      	adds	r3, r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	18f6      	adds	r6, r6, r3
 80053de:	68f3      	ldr	r3, [r6, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d012      	beq.n	800540a <AddSnippet+0xd6>
	return BOS_OK;
 80053e4:	2000      	movs	r0, #0
 80053e6:	e7ae      	b.n	8005346 <AddSnippet+0x12>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 80053e8:	0008      	movs	r0, r1
 80053ea:	f7fa fe95 	bl	8000118 <strlen>
 80053ee:	3001      	adds	r0, #1
 80053f0:	f00e fd58 	bl	8013ea4 <malloc>
 80053f4:	00ab      	lsls	r3, r5, #2
 80053f6:	195d      	adds	r5, r3, r5
 80053f8:	00ad      	lsls	r5, r5, #2
 80053fa:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <AddSnippet+0xf0>)
 80053fc:	195d      	adds	r5, r3, r5
 80053fe:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 8005400:	0021      	movs	r1, r4
 8005402:	f00f f9be 	bl	8014782 <strcpy>
	return BOS_OK;
 8005406:	2000      	movs	r0, #0
 8005408:	e79d      	b.n	8005346 <AddSnippet+0x12>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 800540a:	0090      	lsls	r0, r2, #2
 800540c:	1880      	adds	r0, r0, r2
 800540e:	0080      	lsls	r0, r0, #2
 8005410:	4a04      	ldr	r2, [pc, #16]	; (8005424 <AddSnippet+0xf0>)
 8005412:	1880      	adds	r0, r0, r2
 8005414:	2214      	movs	r2, #20
 8005416:	2100      	movs	r1, #0
 8005418:	f00e ff83 	bl	8014322 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800541c:	200e      	movs	r0, #14
 800541e:	e792      	b.n	8005346 <AddSnippet+0x12>
 8005420:	200011eb 	.word	0x200011eb
 8005424:	20006d34 	.word	0x20006d34

08005428 <CLI_CommandParser>:
{
 8005428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800542a:	46de      	mov	lr, fp
 800542c:	4657      	mov	r7, sl
 800542e:	464e      	mov	r6, r9
 8005430:	4645      	mov	r5, r8
 8005432:	b5e0      	push	{r5, r6, r7, lr}
 8005434:	b08b      	sub	sp, #44	; 0x2c
 8005436:	9004      	str	r0, [sp, #16]
 8005438:	9103      	str	r1, [sp, #12]
 800543a:	0015      	movs	r5, r2
 800543c:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 800543e:	2300      	movs	r3, #0
 8005440:	9307      	str	r3, [sp, #28]
 8005442:	2205      	movs	r2, #5
 8005444:	2100      	movs	r1, #0
 8005446:	a808      	add	r0, sp, #32
 8005448:	f00e ff6b 	bl	8014322 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 800544c:	4bd8      	ldr	r3, [pc, #864]	; (80057b0 <CLI_CommandParser+0x388>)
 800544e:	4699      	mov	r9, r3
 8005450:	e129      	b.n	80056a6 <CLI_CommandParser+0x27e>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 8005452:	1ce9      	adds	r1, r5, #3
 8005454:	3001      	adds	r0, #1
 8005456:	f7ff ff6d 	bl	8005334 <AddSnippet>
 800545a:	2800      	cmp	r0, #0
 800545c:	d105      	bne.n	800546a <CLI_CommandParser+0x42>
				recordSnippet = SNIPPET_COMMANDS;
 800545e:	4bd4      	ldr	r3, [pc, #848]	; (80057b0 <CLI_CommandParser+0x388>)
 8005460:	2202      	movs	r2, #2
 8005462:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 8005464:	230d      	movs	r3, #13
 8005466:	7023      	strb	r3, [r4, #0]
 8005468:	e027      	b.n	80054ba <CLI_CommandParser+0x92>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 800546a:	2252      	movs	r2, #82	; 0x52
 800546c:	49d1      	ldr	r1, [pc, #836]	; (80057b4 <CLI_CommandParser+0x38c>)
 800546e:	0020      	movs	r0, r4
 8005470:	f00e ff4e 	bl	8014310 <memcpy>
				recordSnippet = 0;
 8005474:	4bce      	ldr	r3, [pc, #824]	; (80057b0 <CLI_CommandParser+0x388>)
 8005476:	2200      	movs	r2, #0
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e01e      	b.n	80054ba <CLI_CommandParser+0x92>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 800547c:	2206      	movs	r2, #6
 800547e:	49ce      	ldr	r1, [pc, #824]	; (80057b8 <CLI_CommandParser+0x390>)
 8005480:	0028      	movs	r0, r5
 8005482:	f00f f986 	bl	8014792 <strncmp>
 8005486:	2800      	cmp	r0, #0
 8005488:	d00b      	beq.n	80054a2 <CLI_CommandParser+0x7a>
		else if (recordSnippet == SNIPPET_COMMANDS)
 800548a:	2e02      	cmp	r6, #2
 800548c:	d000      	beq.n	8005490 <CLI_CommandParser+0x68>
 800548e:	e11a      	b.n	80056c6 <CLI_CommandParser+0x29e>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 8005490:	0029      	movs	r1, r5
 8005492:	2002      	movs	r0, #2
 8005494:	f7ff ff4e 	bl	8005334 <AddSnippet>
 8005498:	2800      	cmp	r0, #0
 800549a:	d124      	bne.n	80054e6 <CLI_CommandParser+0xbe>
				pcOutputString[0] = '\r';
 800549c:	230d      	movs	r3, #13
 800549e:	7023      	strb	r3, [r4, #0]
 80054a0:	e00b      	b.n	80054ba <CLI_CommandParser+0x92>
			recordSnippet = 0;
 80054a2:	4bc3      	ldr	r3, [pc, #780]	; (80057b0 <CLI_CommandParser+0x388>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 80054a8:	49c4      	ldr	r1, [pc, #784]	; (80057bc <CLI_CommandParser+0x394>)
 80054aa:	3003      	adds	r0, #3
 80054ac:	f7ff ff42 	bl	8005334 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 80054b0:	2241      	movs	r2, #65	; 0x41
 80054b2:	49c3      	ldr	r1, [pc, #780]	; (80057c0 <CLI_CommandParser+0x398>)
 80054b4:	0020      	movs	r0, r4
 80054b6:	f00e ff2b 	bl	8014310 <memcpy>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 80054ba:	7823      	ldrb	r3, [r4, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d100      	bne.n	80054c2 <CLI_CommandParser+0x9a>
 80054c0:	e1a8      	b.n	8005814 <CLI_CommandParser+0x3ec>
 80054c2:	9b03      	ldr	r3, [sp, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d100      	bne.n	80054ca <CLI_CommandParser+0xa2>
 80054c8:	e1bf      	b.n	800584a <CLI_CommandParser+0x422>
 80054ca:	2700      	movs	r7, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 80054cc:	0020      	movs	r0, r4
 80054ce:	f7fa fe23 	bl	8000118 <strlen>
 80054d2:	b282      	uxth	r2, r0
 80054d4:	2301      	movs	r3, #1
 80054d6:	425b      	negs	r3, r3
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	3333      	adds	r3, #51	; 0x33
 80054dc:	0021      	movs	r1, r4
 80054de:	9804      	ldr	r0, [sp, #16]
 80054e0:	f009 fc98 	bl	800ee14 <writePxMutex>
 80054e4:	e0d4      	b.n	8005690 <CLI_CommandParser+0x268>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80054e6:	2252      	movs	r2, #82	; 0x52
 80054e8:	49b2      	ldr	r1, [pc, #712]	; (80057b4 <CLI_CommandParser+0x38c>)
 80054ea:	0020      	movs	r0, r4
 80054ec:	f00e ff10 	bl	8014310 <memcpy>
 80054f0:	e7e3      	b.n	80054ba <CLI_CommandParser+0x92>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 80054f2:	2299      	movs	r2, #153	; 0x99
 80054f4:	1c70      	adds	r0, r6, #1
 80054f6:	0092      	lsls	r2, r2, #2
 80054f8:	0021      	movs	r1, r4
 80054fa:	f009 fe53 	bl	800f1a4 <FreeRTOS_CLIProcessCommand>
 80054fe:	0007      	movs	r7, r0
 8005500:	e0c2      	b.n	8005688 <CLI_CommandParser+0x260>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 8005502:	2227      	movs	r2, #39	; 0x27
 8005504:	49af      	ldr	r1, [pc, #700]	; (80057c4 <CLI_CommandParser+0x39c>)
 8005506:	0020      	movs	r0, r4
 8005508:	f00e ff02 	bl	8014310 <memcpy>
					xReturned = pdFALSE;
 800550c:	e7d5      	b.n	80054ba <CLI_CommandParser+0x92>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 800550e:	2225      	movs	r2, #37	; 0x25
 8005510:	49ad      	ldr	r1, [pc, #692]	; (80057c8 <CLI_CommandParser+0x3a0>)
 8005512:	0020      	movs	r0, r4
 8005514:	f00e fefc 	bl	8014310 <memcpy>
					xReturned = pdFALSE;						
 8005518:	e7cf      	b.n	80054ba <CLI_CommandParser+0x92>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 800551a:	2219      	movs	r2, #25
 800551c:	2100      	movs	r1, #0
 800551e:	48ab      	ldr	r0, [pc, #684]	; (80057cc <CLI_CommandParser+0x3a4>)
 8005520:	f00e feff 	bl	8014322 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8005524:	3601      	adds	r6, #1
 8005526:	0028      	movs	r0, r5
 8005528:	f7fa fdf6 	bl	8000118 <strlen>
 800552c:	0007      	movs	r7, r0
 800552e:	a807      	add	r0, sp, #28
 8005530:	f7fa fdf2 	bl	8000118 <strlen>
 8005534:	3f01      	subs	r7, #1
 8005536:	1a3a      	subs	r2, r7, r0
 8005538:	0031      	movs	r1, r6
 800553a:	48a5      	ldr	r0, [pc, #660]	; (80057d0 <CLI_CommandParser+0x3a8>)
 800553c:	f00f f93a 	bl	80147b4 <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8005540:	0028      	movs	r0, r5
 8005542:	f7fa fde9 	bl	8000118 <strlen>
 8005546:	0007      	movs	r7, r0
 8005548:	a807      	add	r0, sp, #28
 800554a:	f7fa fde5 	bl	8000118 <strlen>
 800554e:	1a3b      	subs	r3, r7, r0
 8005550:	b29b      	uxth	r3, r3
 8005552:	2217      	movs	r2, #23
 8005554:	21ff      	movs	r1, #255	; 0xff
 8005556:	4640      	mov	r0, r8
 8005558:	f004 f92a 	bl	80097b0 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800555c:	2299      	movs	r2, #153	; 0x99
 800555e:	0092      	lsls	r2, r2, #2
 8005560:	0021      	movs	r1, r4
 8005562:	0030      	movs	r0, r6
 8005564:	f009 fe1e 	bl	800f1a4 <FreeRTOS_CLIProcessCommand>
 8005568:	0007      	movs	r7, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 800556a:	0020      	movs	r0, r4
 800556c:	f7fa fdd4 	bl	8000118 <strlen>
 8005570:	1820      	adds	r0, r4, r0
 8005572:	221d      	movs	r2, #29
 8005574:	4997      	ldr	r1, [pc, #604]	; (80057d4 <CLI_CommandParser+0x3ac>)
 8005576:	f00e fecb 	bl	8014310 <memcpy>
 800557a:	e085      	b.n	8005688 <CLI_CommandParser+0x260>
					group = id >> 8;
 800557c:	9b05      	ldr	r3, [sp, #20]
 800557e:	1218      	asrs	r0, r3, #8
 8005580:	b2c3      	uxtb	r3, r0
 8005582:	469a      	mov	sl, r3
 8005584:	4b94      	ldr	r3, [pc, #592]	; (80057d8 <CLI_CommandParser+0x3b0>)
 8005586:	469b      	mov	fp, r3
 8005588:	4652      	mov	r2, sl
 800558a:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 800558c:	2219      	movs	r2, #25
 800558e:	2100      	movs	r1, #0
 8005590:	488e      	ldr	r0, [pc, #568]	; (80057cc <CLI_CommandParser+0x3a4>)
 8005592:	f00e fec6 	bl	8014322 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8005596:	1c73      	adds	r3, r6, #1
 8005598:	9305      	str	r3, [sp, #20]
 800559a:	0028      	movs	r0, r5
 800559c:	f7fa fdbc 	bl	8000118 <strlen>
 80055a0:	0006      	movs	r6, r0
 80055a2:	a807      	add	r0, sp, #28
 80055a4:	f7fa fdb8 	bl	8000118 <strlen>
 80055a8:	3e01      	subs	r6, #1
 80055aa:	1a32      	subs	r2, r6, r0
 80055ac:	9905      	ldr	r1, [sp, #20]
 80055ae:	4888      	ldr	r0, [pc, #544]	; (80057d0 <CLI_CommandParser+0x3a8>)
 80055b0:	f00f f900 	bl	80147b4 <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 80055b4:	0028      	movs	r0, r5
 80055b6:	f7fa fdaf 	bl	8000118 <strlen>
 80055ba:	0006      	movs	r6, r0
 80055bc:	a807      	add	r0, sp, #28
 80055be:	f7fa fdab 	bl	8000118 <strlen>
 80055c2:	1a33      	subs	r3, r6, r0
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2217      	movs	r2, #23
 80055c8:	4651      	mov	r1, sl
 80055ca:	4640      	mov	r0, r8
 80055cc:	f004 f8f0 	bl	80097b0 <BroadcastMessage>
					if (InGroup(myID, group))
 80055d0:	4b82      	ldr	r3, [pc, #520]	; (80057dc <CLI_CommandParser+0x3b4>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	4a81      	ldr	r2, [pc, #516]	; (80057e0 <CLI_CommandParser+0x3b8>)
 80055da:	5a9b      	ldrh	r3, [r3, r2]
 80055dc:	465a      	mov	r2, fp
 80055de:	7812      	ldrb	r2, [r2, #0]
 80055e0:	4113      	asrs	r3, r2
 80055e2:	07db      	lsls	r3, r3, #31
 80055e4:	d406      	bmi.n	80055f4 <CLI_CommandParser+0x1cc>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 80055e6:	ab07      	add	r3, sp, #28
 80055e8:	0022      	movs	r2, r4
 80055ea:	497e      	ldr	r1, [pc, #504]	; (80057e4 <CLI_CommandParser+0x3bc>)
 80055ec:	0020      	movs	r0, r4
 80055ee:	f00f f88d 	bl	801470c <sprintf>
 80055f2:	e049      	b.n	8005688 <CLI_CommandParser+0x260>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 80055f4:	2299      	movs	r2, #153	; 0x99
 80055f6:	0092      	lsls	r2, r2, #2
 80055f8:	0021      	movs	r1, r4
 80055fa:	9805      	ldr	r0, [sp, #20]
 80055fc:	f009 fdd2 	bl	800f1a4 <FreeRTOS_CLIProcessCommand>
 8005600:	0007      	movs	r7, r0
 8005602:	e7f0      	b.n	80055e6 <CLI_CommandParser+0x1be>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 8005604:	0028      	movs	r0, r5
 8005606:	f7fa fd87 	bl	8000118 <strlen>
 800560a:	0007      	movs	r7, r0
 800560c:	a807      	add	r0, sp, #28
 800560e:	f7fa fd83 	bl	8000118 <strlen>
 8005612:	3f01      	subs	r7, #1
 8005614:	1a3a      	subs	r2, r7, r0
 8005616:	0031      	movs	r1, r6
 8005618:	486d      	ldr	r0, [pc, #436]	; (80057d0 <CLI_CommandParser+0x3a8>)
 800561a:	f00f f8cb 	bl	80147b4 <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 800561e:	0028      	movs	r0, r5
 8005620:	f7fa fd7a 	bl	8000118 <strlen>
 8005624:	0006      	movs	r6, r0
 8005626:	a807      	add	r0, sp, #28
 8005628:	f7fa fd76 	bl	8000118 <strlen>
 800562c:	3e01      	subs	r6, #1
 800562e:	1a36      	subs	r6, r6, r0
 8005630:	b2b2      	uxth	r2, r6
 8005632:	2117      	movs	r1, #23
 8005634:	4650      	mov	r0, sl
 8005636:	f004 f8e3 	bl	8009800 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 800563a:	9a05      	ldr	r2, [sp, #20]
 800563c:	496a      	ldr	r1, [pc, #424]	; (80057e8 <CLI_CommandParser+0x3c0>)
 800563e:	0020      	movs	r0, r4
 8005640:	f00f f864 	bl	801470c <sprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 8005644:	7823      	ldrb	r3, [r4, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <CLI_CommandParser+0x228>
 800564a:	9b03      	ldr	r3, [sp, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d108      	bne.n	8005662 <CLI_CommandParser+0x23a>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005650:	0020      	movs	r0, r4
 8005652:	f7fa fd61 	bl	8000118 <strlen>
 8005656:	0002      	movs	r2, r0
 8005658:	2100      	movs	r1, #0
 800565a:	0020      	movs	r0, r4
 800565c:	f00e fe61 	bl	8014322 <memset>
 8005660:	e07c      	b.n	800575c <CLI_CommandParser+0x334>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 8005662:	0020      	movs	r0, r4
 8005664:	f7fa fd58 	bl	8000118 <strlen>
 8005668:	b282      	uxth	r2, r0
 800566a:	2301      	movs	r3, #1
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	3331      	adds	r3, #49	; 0x31
 8005670:	0021      	movs	r1, r4
 8005672:	9804      	ldr	r0, [sp, #16]
 8005674:	f009 fbce 	bl	800ee14 <writePxMutex>
 8005678:	e7ea      	b.n	8005650 <CLI_CommandParser+0x228>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 800567a:	2299      	movs	r2, #153	; 0x99
 800567c:	0092      	lsls	r2, r2, #2
 800567e:	0021      	movs	r1, r4
 8005680:	0028      	movs	r0, r5
 8005682:	f009 fd8f 	bl	800f1a4 <FreeRTOS_CLIProcessCommand>
 8005686:	0007      	movs	r7, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8005688:	7823      	ldrb	r3, [r4, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d000      	beq.n	8005690 <CLI_CommandParser+0x268>
 800568e:	e07f      	b.n	8005790 <CLI_CommandParser+0x368>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005690:	0020      	movs	r0, r4
 8005692:	f7fa fd41 	bl	8000118 <strlen>
 8005696:	0002      	movs	r2, r0
 8005698:	2100      	movs	r1, #0
 800569a:	0020      	movs	r0, r4
 800569c:	f00e fe41 	bl	8014322 <memset>
	} while( xReturned != pdFALSE );
 80056a0:	2f00      	cmp	r7, #0
 80056a2:	d100      	bne.n	80056a6 <CLI_CommandParser+0x27e>
 80056a4:	e0be      	b.n	8005824 <CLI_CommandParser+0x3fc>
		StringToLowerCase(( char * )cInputString);
 80056a6:	0028      	movs	r0, r5
 80056a8:	f7ff fbf8 	bl	8004e9c <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 80056ac:	464b      	mov	r3, r9
 80056ae:	781e      	ldrb	r6, [r3, #0]
 80056b0:	2e00      	cmp	r6, #0
 80056b2:	d000      	beq.n	80056b6 <CLI_CommandParser+0x28e>
 80056b4:	e6e2      	b.n	800547c <CLI_CommandParser+0x54>
 80056b6:	2203      	movs	r2, #3
 80056b8:	494c      	ldr	r1, [pc, #304]	; (80057ec <CLI_CommandParser+0x3c4>)
 80056ba:	0028      	movs	r0, r5
 80056bc:	f00f f869 	bl	8014792 <strncmp>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d100      	bne.n	80056c6 <CLI_CommandParser+0x29e>
 80056c4:	e6c5      	b.n	8005452 <CLI_CommandParser+0x2a>
			loc = strchr( ( char * ) cInputString, '.');
 80056c6:	212e      	movs	r1, #46	; 0x2e
 80056c8:	0028      	movs	r0, r5
 80056ca:	f00f f84c 	bl	8014766 <strchr>
 80056ce:	1e06      	subs	r6, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 80056d0:	d0d3      	beq.n	800567a <CLI_CommandParser+0x252>
 80056d2:	3803      	subs	r0, #3
 80056d4:	2203      	movs	r2, #3
 80056d6:	4946      	ldr	r1, [pc, #280]	; (80057f0 <CLI_CommandParser+0x3c8>)
 80056d8:	f00f f85b 	bl	8014792 <strncmp>
 80056dc:	2800      	cmp	r0, #0
 80056de:	d0cc      	beq.n	800567a <CLI_CommandParser+0x252>
 80056e0:	7873      	ldrb	r3, [r6, #1]
 80056e2:	4a44      	ldr	r2, [pc, #272]	; (80057f4 <CLI_CommandParser+0x3cc>)
 80056e4:	5cd3      	ldrb	r3, [r2, r3]
 80056e6:	075b      	lsls	r3, r3, #29
 80056e8:	d4c7      	bmi.n	800567a <CLI_CommandParser+0x252>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 80056ea:	1b72      	subs	r2, r6, r5
 80056ec:	0029      	movs	r1, r5
 80056ee:	a807      	add	r0, sp, #28
 80056f0:	f00f f860 	bl	80147b4 <strncpy>
				id = GetID(idString);
 80056f4:	a807      	add	r0, sp, #28
 80056f6:	f7ff f8f9 	bl	80048ec <GetID>
 80056fa:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 80056fc:	4a37      	ldr	r2, [pc, #220]	; (80057dc <CLI_CommandParser+0x3b4>)
 80056fe:	7812      	ldrb	r2, [r2, #0]
 8005700:	4690      	mov	r8, r2
 8005702:	4290      	cmp	r0, r2
 8005704:	d100      	bne.n	8005708 <CLI_CommandParser+0x2e0>
 8005706:	e6f4      	b.n	80054f2 <CLI_CommandParser+0xca>
				}	else if (id == BOS_ERR_WrongName) {		
 8005708:	2864      	cmp	r0, #100	; 0x64
 800570a:	d100      	bne.n	800570e <CLI_CommandParser+0x2e6>
 800570c:	e6f9      	b.n	8005502 <CLI_CommandParser+0xda>
				}	else if (id == BOS_ERR_WrongID) {
 800570e:	2866      	cmp	r0, #102	; 0x66
 8005710:	d100      	bne.n	8005714 <CLI_CommandParser+0x2ec>
 8005712:	e6fc      	b.n	800550e <CLI_CommandParser+0xe6>
				}	else if (id == BOS_BROADCAST) {
 8005714:	28ff      	cmp	r0, #255	; 0xff
 8005716:	d100      	bne.n	800571a <CLI_CommandParser+0x2f2>
 8005718:	e6ff      	b.n	800551a <CLI_CommandParser+0xf2>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 800571a:	466b      	mov	r3, sp
 800571c:	7d1b      	ldrb	r3, [r3, #20]
 800571e:	469a      	mov	sl, r3
 8005720:	2bfe      	cmp	r3, #254	; 0xfe
 8005722:	d100      	bne.n	8005726 <CLI_CommandParser+0x2fe>
 8005724:	e72a      	b.n	800557c <CLI_CommandParser+0x154>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 8005726:	3601      	adds	r6, #1
 8005728:	2206      	movs	r2, #6
 800572a:	4933      	ldr	r1, [pc, #204]	; (80057f8 <CLI_CommandParser+0x3d0>)
 800572c:	0030      	movs	r0, r6
 800572e:	f00f f830 	bl	8014792 <strncmp>
 8005732:	2800      	cmp	r0, #0
 8005734:	d000      	beq.n	8005738 <CLI_CommandParser+0x310>
 8005736:	e765      	b.n	8005604 <CLI_CommandParser+0x1dc>
						BOS.response = BOS_RESPONSE_NONE;				
 8005738:	4b30      	ldr	r3, [pc, #192]	; (80057fc <CLI_CommandParser+0x3d4>)
 800573a:	2200      	movs	r2, #0
 800573c:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 800573e:	2119      	movs	r1, #25
 8005740:	4650      	mov	r0, sl
 8005742:	f004 f85d 	bl	8009800 <SendMessageToModule>
						osDelay(100);
 8005746:	2064      	movs	r0, #100	; 0x64
 8005748:	f009 fc93 	bl	800f072 <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 800574c:	4b2c      	ldr	r3, [pc, #176]	; (8005800 <CLI_CommandParser+0x3d8>)
 800574e:	781a      	ldrb	r2, [r3, #0]
 8005750:	4b22      	ldr	r3, [pc, #136]	; (80057dc <CLI_CommandParser+0x3b4>)
 8005752:	7818      	ldrb	r0, [r3, #0]
 8005754:	2300      	movs	r3, #0
 8005756:	4651      	mov	r1, sl
 8005758:	f7fe fd8a 	bl	8004270 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 800575c:	4b27      	ldr	r3, [pc, #156]	; (80057fc <CLI_CommandParser+0x3d4>)
 800575e:	799b      	ldrb	r3, [r3, #6]
 8005760:	2b60      	cmp	r3, #96	; 0x60
 8005762:	d000      	beq.n	8005766 <CLI_CommandParser+0x33e>
 8005764:	e6a9      	b.n	80054ba <CLI_CommandParser+0x92>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 8005766:	21fa      	movs	r1, #250	; 0xfa
 8005768:	0089      	lsls	r1, r1, #2
 800576a:	2001      	movs	r0, #1
 800576c:	f00b f89e 	bl	80108ac <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 8005770:	4b24      	ldr	r3, [pc, #144]	; (8005804 <CLI_CommandParser+0x3dc>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d100      	bne.n	800577a <CLI_CommandParser+0x352>
 8005778:	e69f      	b.n	80054ba <CLI_CommandParser+0x92>
									++timedoutMsg;
 800577a:	4a23      	ldr	r2, [pc, #140]	; (8005808 <CLI_CommandParser+0x3e0>)
 800577c:	8813      	ldrh	r3, [r2, #0]
 800577e:	3301      	adds	r3, #1
 8005780:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 8005782:	9b05      	ldr	r3, [sp, #20]
 8005784:	0022      	movs	r2, r4
 8005786:	4921      	ldr	r1, [pc, #132]	; (800580c <CLI_CommandParser+0x3e4>)
 8005788:	0020      	movs	r0, r4
 800578a:	f00e ffbf 	bl	801470c <sprintf>
 800578e:	e694      	b.n	80054ba <CLI_CommandParser+0x92>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8005790:	9b03      	ldr	r3, [sp, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d100      	bne.n	8005798 <CLI_CommandParser+0x370>
 8005796:	e77b      	b.n	8005690 <CLI_CommandParser+0x268>
 8005798:	e698      	b.n	80054cc <CLI_CommandParser+0xa4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 800579a:	2301      	movs	r3, #1
 800579c:	425b      	negs	r3, r3
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	3333      	adds	r3, #51	; 0x33
 80057a2:	2238      	movs	r2, #56	; 0x38
 80057a4:	491a      	ldr	r1, [pc, #104]	; (8005810 <CLI_CommandParser+0x3e8>)
 80057a6:	9804      	ldr	r0, [sp, #16]
 80057a8:	f009 fb34 	bl	800ee14 <writePxMutex>
}
 80057ac:	e046      	b.n	800583c <CLI_CommandParser+0x414>
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	20001218 	.word	0x20001218
 80057b4:	0801abec 	.word	0x0801abec
 80057b8:	0801ac40 	.word	0x0801ac40
 80057bc:	0801a680 	.word	0x0801a680
 80057c0:	0801ac48 	.word	0x0801ac48
 80057c4:	0801ac90 	.word	0x0801ac90
 80057c8:	0801acb8 	.word	0x0801acb8
 80057cc:	20000d04 	.word	0x20000d04
 80057d0:	20000f18 	.word	0x20000f18
 80057d4:	0801ace0 	.word	0x0801ace0
 80057d8:	200011ea 	.word	0x200011ea
 80057dc:	2000104c 	.word	0x2000104c
 80057e0:	20000ea0 	.word	0x20000ea0
 80057e4:	0801ad00 	.word	0x0801ad00
 80057e8:	0801ad34 	.word	0x0801ad34
 80057ec:	0801abe8 	.word	0x0801abe8
 80057f0:	0801ac8c 	.word	0x0801ac8c
 80057f4:	0801d895 	.word	0x0801d895
 80057f8:	0801ad2c 	.word	0x0801ad2c
 80057fc:	20006d18 	.word	0x20006d18
 8005800:	20000aa7 	.word	0x20000aa7
 8005804:	200010e0 	.word	0x200010e0
 8005808:	20001696 	.word	0x20001696
 800580c:	0801ad58 	.word	0x0801ad58
 8005810:	0801ad78 	.word	0x0801ad78
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005814:	0020      	movs	r0, r4
 8005816:	f7fa fc7f 	bl	8000118 <strlen>
 800581a:	0002      	movs	r2, r0
 800581c:	2100      	movs	r1, #0
 800581e:	0020      	movs	r0, r4
 8005820:	f00e fd7f 	bl	8014322 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 8005824:	2209      	movs	r2, #9
 8005826:	2100      	movs	r1, #0
 8005828:	a807      	add	r0, sp, #28
 800582a:	f00e fd7a 	bl	8014322 <memset>
	if(!recordSnippet && enableOutput)
 800582e:	4b0b      	ldr	r3, [pc, #44]	; (800585c <CLI_CommandParser+0x434>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d102      	bne.n	800583c <CLI_CommandParser+0x414>
 8005836:	9b03      	ldr	r3, [sp, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1ae      	bne.n	800579a <CLI_CommandParser+0x372>
}
 800583c:	b00b      	add	sp, #44	; 0x2c
 800583e:	bcf0      	pop	{r4, r5, r6, r7}
 8005840:	46bb      	mov	fp, r7
 8005842:	46b2      	mov	sl, r6
 8005844:	46a9      	mov	r9, r5
 8005846:	46a0      	mov	r8, r4
 8005848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800584a:	0020      	movs	r0, r4
 800584c:	f7fa fc64 	bl	8000118 <strlen>
 8005850:	0002      	movs	r2, r0
 8005852:	2100      	movs	r1, #0
 8005854:	0020      	movs	r0, r4
 8005856:	f00e fd64 	bl	8014322 <memset>
	} while( xReturned != pdFALSE );
 800585a:	e7e3      	b.n	8005824 <CLI_CommandParser+0x3fc>
 800585c:	20001218 	.word	0x20001218

08005860 <prvCLITask>:
{
 8005860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005862:	46d6      	mov	lr, sl
 8005864:	464f      	mov	r7, r9
 8005866:	4646      	mov	r6, r8
 8005868:	b5c0      	push	{r6, r7, lr}
 800586a:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800586c:	2101      	movs	r1, #1
 800586e:	4249      	negs	r1, r1
 8005870:	2001      	movs	r0, #1
 8005872:	f00b f81b 	bl	80108ac <ulTaskNotifyTake>
	cRxedChar = '\0';
 8005876:	230f      	movs	r3, #15
 8005878:	446b      	add	r3, sp
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800587e:	f009 fd1b 	bl	800f2b8 <FreeRTOS_CLIGetOutputBuffer>
 8005882:	4682      	mov	sl, r0
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8005884:	23e1      	movs	r3, #225	; 0xe1
 8005886:	031b      	lsls	r3, r3, #12
 8005888:	4a58      	ldr	r2, [pc, #352]	; (80059ec <prvCLITask+0x18c>)
 800588a:	6892      	ldr	r2, [r2, #8]
 800588c:	429a      	cmp	r2, r3
 800588e:	d00f      	beq.n	80058b0 <prvCLITask+0x50>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8005890:	2401      	movs	r4, #1
			if (port != PcPort)
 8005892:	4e57      	ldr	r6, [pc, #348]	; (80059f0 <prvCLITask+0x190>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8005894:	001d      	movs	r5, r3
 8005896:	e003      	b.n	80058a0 <prvCLITask+0x40>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8005898:	3401      	adds	r4, #1
 800589a:	b2e4      	uxtb	r4, r4
 800589c:	2c06      	cmp	r4, #6
 800589e:	d007      	beq.n	80058b0 <prvCLITask+0x50>
			if (port != PcPort)
 80058a0:	7833      	ldrb	r3, [r6, #0]
 80058a2:	42a3      	cmp	r3, r4
 80058a4:	d0f8      	beq.n	8005898 <prvCLITask+0x38>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 80058a6:	0029      	movs	r1, r5
 80058a8:	0020      	movs	r0, r4
 80058aa:	f009 fb23 	bl	800eef4 <UpdateBaudrate>
 80058ae:	e7f3      	b.n	8005898 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 80058b0:	4b50      	ldr	r3, [pc, #320]	; (80059f4 <prvCLITask+0x194>)
 80058b2:	881a      	ldrh	r2, [r3, #0]
 80058b4:	0053      	lsls	r3, r2, #1
 80058b6:	189b      	adds	r3, r3, r2
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	4a4f      	ldr	r2, [pc, #316]	; (80059f8 <prvCLITask+0x198>)
 80058bc:	189b      	adds	r3, r3, r2
 80058be:	4a4f      	ldr	r2, [pc, #316]	; (80059fc <prvCLITask+0x19c>)
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	4c4f      	ldr	r4, [pc, #316]	; (8005a00 <prvCLITask+0x1a0>)
 80058c4:	4d4a      	ldr	r5, [pc, #296]	; (80059f0 <prvCLITask+0x190>)
 80058c6:	7829      	ldrb	r1, [r5, #0]
 80058c8:	9100      	str	r1, [sp, #0]
 80058ca:	494e      	ldr	r1, [pc, #312]	; (8005a04 <prvCLITask+0x1a4>)
 80058cc:	0020      	movs	r0, r4
 80058ce:	f00e ff1d 	bl	801470c <sprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 80058d2:	7828      	ldrb	r0, [r5, #0]
 80058d4:	230a      	movs	r3, #10
 80058d6:	4a4c      	ldr	r2, [pc, #304]	; (8005a08 <prvCLITask+0x1a8>)
 80058d8:	494c      	ldr	r1, [pc, #304]	; (8005a0c <prvCLITask+0x1ac>)
 80058da:	f009 fac7 	bl	800ee6c <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 80058de:	0020      	movs	r0, r4
 80058e0:	f7fa fc1a 	bl	8000118 <strlen>
 80058e4:	b282      	uxth	r2, r0
 80058e6:	7828      	ldrb	r0, [r5, #0]
 80058e8:	230a      	movs	r3, #10
 80058ea:	0021      	movs	r1, r4
 80058ec:	f009 fabe 	bl	800ee6c <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 80058f0:	2300      	movs	r3, #0
 80058f2:	4698      	mov	r8, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 80058f4:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <prvCLITask+0x1b0>)
 80058f6:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 80058f8:	001f      	movs	r7, r3
 80058fa:	e05c      	b.n	80059b6 <prvCLITask+0x156>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 80058fc:	200f      	movs	r0, #15
 80058fe:	4468      	add	r0, sp
 8005900:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 8005902:	0198      	lsls	r0, r3, #6
 8005904:	4a43      	ldr	r2, [pc, #268]	; (8005a14 <prvCLITask+0x1b4>)
 8005906:	1812      	adds	r2, r2, r0
 8005908:	2000      	movs	r0, #0
 800590a:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort-1] = chr;
 800590c:	4a40      	ldr	r2, [pc, #256]	; (8005a10 <prvCLITask+0x1b0>)
 800590e:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 8005910:	240f      	movs	r4, #15
 8005912:	446c      	add	r4, sp
 8005914:	4b36      	ldr	r3, [pc, #216]	; (80059f0 <prvCLITask+0x190>)
 8005916:	7818      	ldrb	r0, [r3, #0]
 8005918:	230a      	movs	r3, #10
 800591a:	2201      	movs	r2, #1
 800591c:	0021      	movs	r1, r4
 800591e:	f009 faa5 	bl	800ee6c <writePxITMutex>
		if( cRxedChar == '\r' )
 8005922:	7823      	ldrb	r3, [r4, #0]
 8005924:	2b0d      	cmp	r3, #13
 8005926:	d027      	beq.n	8005978 <prvCLITask+0x118>
			if( cRxedChar == '\n' )
 8005928:	2b0a      	cmp	r3, #10
 800592a:	d042      	beq.n	80059b2 <prvCLITask+0x152>
			else if( cRxedChar == '\b' )
 800592c:	2b08      	cmp	r3, #8
 800592e:	d051      	beq.n	80059d4 <prvCLITask+0x174>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 8005930:	001a      	movs	r2, r3
 8005932:	3a20      	subs	r2, #32
 8005934:	2a5e      	cmp	r2, #94	; 0x5e
 8005936:	d83c      	bhi.n	80059b2 <prvCLITask+0x152>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 8005938:	4642      	mov	r2, r8
 800593a:	2a31      	cmp	r2, #49	; 0x31
 800593c:	dc39      	bgt.n	80059b2 <prvCLITask+0x152>
						cInputString[ cInputIndex ] = cRxedChar;
 800593e:	4a36      	ldr	r2, [pc, #216]	; (8005a18 <prvCLITask+0x1b8>)
 8005940:	4641      	mov	r1, r8
 8005942:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8005944:	4643      	mov	r3, r8
 8005946:	3301      	adds	r3, #1
 8005948:	b25b      	sxtb	r3, r3
 800594a:	4698      	mov	r8, r3
 800594c:	e031      	b.n	80059b2 <prvCLITask+0x152>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800594e:	2200      	movs	r2, #0
 8005950:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8005952:	f00b fa87 	bl	8010e64 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005956:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 8005958:	7833      	ldrb	r3, [r6, #0]
 800595a:	3b01      	subs	r3, #1
 800595c:	019a      	lsls	r2, r3, #6
 800595e:	18aa      	adds	r2, r5, r2
 8005960:	5d12      	ldrb	r2, [r2, r4]
 8005962:	2a00      	cmp	r2, #0
 8005964:	d1ca      	bne.n	80058fc <prvCLITask+0x9c>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 8005966:	2c3f      	cmp	r4, #63	; 0x3f
 8005968:	d0f1      	beq.n	800594e <prvCLITask+0xee>
			taskYIELD();
 800596a:	f00b fa7b 	bl	8010e64 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800596e:	3401      	adds	r4, #1
 8005970:	b2a4      	uxth	r4, r4
 8005972:	2c3f      	cmp	r4, #63	; 0x3f
 8005974:	d9f0      	bls.n	8005958 <prvCLITask+0xf8>
 8005976:	e7cb      	b.n	8005910 <prvCLITask+0xb0>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 8005978:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <prvCLITask+0x190>)
 800597a:	7818      	ldrb	r0, [r3, #0]
 800597c:	230a      	movs	r3, #10
 800597e:	2202      	movs	r2, #2
 8005980:	4926      	ldr	r1, [pc, #152]	; (8005a1c <prvCLITask+0x1bc>)
 8005982:	f009 fa73 	bl	800ee6c <writePxITMutex>
			if( cInputIndex == 0 )
 8005986:	4643      	mov	r3, r8
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01e      	beq.n	80059ca <prvCLITask+0x16a>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 800598c:	4c22      	ldr	r4, [pc, #136]	; (8005a18 <prvCLITask+0x1b8>)
 800598e:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <prvCLITask+0x190>)
 8005990:	7818      	ldrb	r0, [r3, #0]
 8005992:	4653      	mov	r3, sl
 8005994:	0022      	movs	r2, r4
 8005996:	2101      	movs	r1, #1
 8005998:	f7ff fd46 	bl	8005428 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 800599c:	0021      	movs	r1, r4
 800599e:	4820      	ldr	r0, [pc, #128]	; (8005a20 <prvCLITask+0x1c0>)
 80059a0:	f00e feef 	bl	8014782 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 80059a4:	2232      	movs	r2, #50	; 0x32
 80059a6:	2100      	movs	r1, #0
 80059a8:	0020      	movs	r0, r4
 80059aa:	f00e fcba 	bl	8014322 <memset>
			cInputIndex = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	4698      	mov	r8, r3
		taskYIELD();
 80059b2:	f00b fa57 	bl	8010e64 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 80059b6:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <prvCLITask+0x190>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	444b      	add	r3, r9
 80059bc:	3b01      	subs	r3, #1
 80059be:	781c      	ldrb	r4, [r3, #0]
 80059c0:	2c3f      	cmp	r4, #63	; 0x3f
 80059c2:	d8a5      	bhi.n	8005910 <prvCLITask+0xb0>
			if (UARTRxBuf[PcPort-1][chr]) {
 80059c4:	4e0a      	ldr	r6, [pc, #40]	; (80059f0 <prvCLITask+0x190>)
 80059c6:	4d13      	ldr	r5, [pc, #76]	; (8005a14 <prvCLITask+0x1b4>)
 80059c8:	e7c6      	b.n	8005958 <prvCLITask+0xf8>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 80059ca:	4915      	ldr	r1, [pc, #84]	; (8005a20 <prvCLITask+0x1c0>)
 80059cc:	4812      	ldr	r0, [pc, #72]	; (8005a18 <prvCLITask+0x1b8>)
 80059ce:	f00e fed8 	bl	8014782 <strcpy>
 80059d2:	e7db      	b.n	800598c <prvCLITask+0x12c>
				if( cInputIndex > 0 )
 80059d4:	4643      	mov	r3, r8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	ddeb      	ble.n	80059b2 <prvCLITask+0x152>
					cInputIndex--;
 80059da:	3b01      	subs	r3, #1
 80059dc:	b25b      	sxtb	r3, r3
 80059de:	4698      	mov	r8, r3
					cInputString[ cInputIndex ] = '\0';
 80059e0:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <prvCLITask+0x1b8>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	4641      	mov	r1, r8
 80059e6:	545a      	strb	r2, [r3, r1]
 80059e8:	e7e3      	b.n	80059b2 <prvCLITask+0x152>
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	20006d18 	.word	0x20006d18
 80059f0:	20000aa7 	.word	0x20000aa7
 80059f4:	20000050 	.word	0x20000050
 80059f8:	0801ab18 	.word	0x0801ab18
 80059fc:	2000104c 	.word	0x2000104c
 8005a00:	200011ec 	.word	0x200011ec
 8005a04:	0801adb4 	.word	0x0801adb4
 8005a08:	00000293 	.word	0x00000293
 8005a0c:	0801ade0 	.word	0x0801ade0
 8005a10:	200013dc 	.word	0x200013dc
 8005a14:	2000129c 	.word	0x2000129c
 8005a18:	2000111c 	.word	0x2000111c
 8005a1c:	0801c174 	.word	0x0801c174
 8005a20:	200011b8 	.word	0x200011b8

08005a24 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005a28:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <ParseSnippetCommand+0x78>)
 8005a2a:	781a      	ldrb	r2, [r3, #0]
 8005a2c:	3a01      	subs	r2, #1
 8005a2e:	0093      	lsls	r3, r2, #2
 8005a30:	189b      	adds	r3, r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <ParseSnippetCommand+0x7c>)
 8005a36:	18d3      	adds	r3, r2, r3
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02c      	beq.n	8005a98 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 8005a3e:	4b19      	ldr	r3, [pc, #100]	; (8005aa4 <ParseSnippetCommand+0x80>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d014      	beq.n	8005a70 <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 8005a46:	4b17      	ldr	r3, [pc, #92]	; (8005aa4 <ParseSnippetCommand+0x80>)
 8005a48:	681e      	ldr	r6, [r3, #0]
 8005a4a:	7833      	ldrb	r3, [r6, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d012      	beq.n	8005a76 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 8005a50:	2113      	movs	r1, #19
 8005a52:	0030      	movs	r0, r6
 8005a54:	f00e fe87 	bl	8014766 <strchr>
 8005a58:	1e05      	subs	r5, r0, #0
	if (ptrEnd != NULL)
 8005a5a:	d011      	beq.n	8005a80 <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 8005a5c:	1b82      	subs	r2, r0, r6
 8005a5e:	0031      	movs	r1, r6
 8005a60:	0020      	movs	r0, r4
 8005a62:	f00e fea7 	bl	80147b4 <strncpy>
		ptrStart = ptrEnd+1;
 8005a66:	3501      	adds	r5, #1
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <ParseSnippetCommand+0x80>)
 8005a6a:	601d      	str	r5, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 8005a6c:	2001      	movs	r0, #1
}
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptrStart)	ptrStart = snippetBuffer;	
 8005a70:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <ParseSnippetCommand+0x80>)
 8005a72:	6018      	str	r0, [r3, #0]
 8005a74:	e7e7      	b.n	8005a46 <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 8005a76:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <ParseSnippetCommand+0x80>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
		return false;
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	e7f6      	b.n	8005a6e <ParseSnippetCommand+0x4a>
		strcpy((char *)cliBuffer, ptrStart);
 8005a80:	0031      	movs	r1, r6
 8005a82:	0020      	movs	r0, r4
 8005a84:	f00e fe7d 	bl	8014782 <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 8005a88:	0020      	movs	r0, r4
 8005a8a:	f7fa fb45 	bl	8000118 <strlen>
 8005a8e:	1836      	adds	r6, r6, r0
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <ParseSnippetCommand+0x80>)
 8005a92:	601e      	str	r6, [r3, #0]
	return true;
 8005a94:	2001      	movs	r0, #1
 8005a96:	e7ea      	b.n	8005a6e <ParseSnippetCommand+0x4a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e7e8      	b.n	8005a6e <ParseSnippetCommand+0x4a>
 8005a9c:	200011eb 	.word	0x200011eb
 8005aa0:	20006d34 	.word	0x20006d34
 8005aa4:	20001214 	.word	0x20001214

08005aa8 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 8005aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 8005aae:	0083      	lsls	r3, r0, #2
 8005ab0:	181b      	adds	r3, r3, r0
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4a3e      	ldr	r2, [pc, #248]	; (8005bb0 <CheckSnippetCondition+0x108>)
 8005ab6:	5c9b      	ldrb	r3, [r3, r2]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d021      	beq.n	8005b00 <CheckSnippetCondition+0x58>
 8005abc:	2000      	movs	r0, #0
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d130      	bne.n	8005b24 <CheckSnippetCondition+0x7c>
			break;
			
						
		case SNIP_COND_MODULE_PARAM_CONST :	
			// Get the constant and module parameter values. 
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 8005ac2:	4d3b      	ldr	r5, [pc, #236]	; (8005bb0 <CheckSnippetCondition+0x108>)
 8005ac4:	00a6      	lsls	r6, r4, #2
 8005ac6:	1933      	adds	r3, r6, r4
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	18eb      	adds	r3, r5, r3
 8005acc:	78da      	ldrb	r2, [r3, #3]
 8005ace:	3a01      	subs	r2, #1
 8005ad0:	0053      	lsls	r3, r2, #1
 8005ad2:	189b      	adds	r3, r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4a37      	ldr	r2, [pc, #220]	; (8005bb4 <CheckSnippetCondition+0x10c>)
 8005ad8:	589b      	ldr	r3, [r3, r2]
 8005ada:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005adc:	1931      	adds	r1, r6, r4
 8005ade:	0089      	lsls	r1, r1, #2
 8005ae0:	3106      	adds	r1, #6
 8005ae2:	1949      	adds	r1, r1, r5
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	a801      	add	r0, sp, #4
 8005ae8:	f00e fc12 	bl	8014310 <memcpy>
			// Compare them mathematically
			switch (snippets[index].cond.mathOperator)
 8005aec:	1936      	adds	r6, r6, r4
 8005aee:	00b6      	lsls	r6, r6, #2
 8005af0:	19ad      	adds	r5, r5, r6
 8005af2:	786b      	ldrb	r3, [r5, #1]
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d853      	bhi.n	8005ba0 <CheckSnippetCondition+0xf8>
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4a2f      	ldr	r2, [pc, #188]	; (8005bb8 <CheckSnippetCondition+0x110>)
 8005afc:	58d3      	ldr	r3, [r2, r3]
 8005afe:	469f      	mov	pc, r3
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 8005b00:	4a2b      	ldr	r2, [pc, #172]	; (8005bb0 <CheckSnippetCondition+0x108>)
 8005b02:	0080      	lsls	r0, r0, #2
 8005b04:	1903      	adds	r3, r0, r4
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	18d3      	adds	r3, r2, r3
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 8005b0a:	7899      	ldrb	r1, [r3, #2]
 8005b0c:	00cb      	lsls	r3, r1, #3
 8005b0e:	185b      	adds	r3, r3, r1
 8005b10:	1900      	adds	r0, r0, r4
 8005b12:	0080      	lsls	r0, r0, #2
 8005b14:	1812      	adds	r2, r2, r0
 8005b16:	4929      	ldr	r1, [pc, #164]	; (8005bbc <CheckSnippetCondition+0x114>)
 8005b18:	5c58      	ldrb	r0, [r3, r1]
 8005b1a:	78d3      	ldrb	r3, [r2, #3]
 8005b1c:	1ac0      	subs	r0, r0, r3
 8005b1e:	4243      	negs	r3, r0
 8005b20:	4158      	adcs	r0, r3
 8005b22:	b2c0      	uxtb	r0, r0
  	default:
  		break;
  }
	
	return false;
}
 8005b24:	b003      	add	sp, #12
 8005b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 8005b28:	1c39      	adds	r1, r7, #0
 8005b2a:	9801      	ldr	r0, [sp, #4]
 8005b2c:	f7fa fcd0 	bl	80004d0 <__aeabi_fcmpeq>
 8005b30:	1e43      	subs	r3, r0, #1
 8005b32:	4198      	sbcs	r0, r3
 8005b34:	e7f6      	b.n	8005b24 <CheckSnippetCondition+0x7c>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 8005b36:	1c39      	adds	r1, r7, #0
 8005b38:	9801      	ldr	r0, [sp, #4]
 8005b3a:	f7fa fccf 	bl	80004dc <__aeabi_fcmplt>
 8005b3e:	1e43      	subs	r3, r0, #1
 8005b40:	4198      	sbcs	r0, r3
 8005b42:	e7ef      	b.n	8005b24 <CheckSnippetCondition+0x7c>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 8005b44:	1c39      	adds	r1, r7, #0
 8005b46:	9801      	ldr	r0, [sp, #4]
 8005b48:	f7fa fcdc 	bl	8000504 <__aeabi_fcmpgt>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d029      	beq.n	8005ba4 <CheckSnippetCondition+0xfc>
 8005b50:	2100      	movs	r1, #0
 8005b52:	1c38      	adds	r0, r7, #0
 8005b54:	f7fa fcbc 	bl	80004d0 <__aeabi_fcmpeq>
 8005b58:	4243      	negs	r3, r0
 8005b5a:	4158      	adcs	r0, r3
 8005b5c:	e7e2      	b.n	8005b24 <CheckSnippetCondition+0x7c>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 8005b5e:	1c39      	adds	r1, r7, #0
 8005b60:	9801      	ldr	r0, [sp, #4]
 8005b62:	f7fa fcc5 	bl	80004f0 <__aeabi_fcmple>
 8005b66:	1e43      	subs	r3, r0, #1
 8005b68:	4198      	sbcs	r0, r3
 8005b6a:	e7db      	b.n	8005b24 <CheckSnippetCondition+0x7c>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 8005b6c:	1c39      	adds	r1, r7, #0
 8005b6e:	9801      	ldr	r0, [sp, #4]
 8005b70:	f7fa fcd2 	bl	8000518 <__aeabi_fcmpge>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d017      	beq.n	8005ba8 <CheckSnippetCondition+0x100>
 8005b78:	2100      	movs	r1, #0
 8005b7a:	1c38      	adds	r0, r7, #0
 8005b7c:	f7fa fca8 	bl	80004d0 <__aeabi_fcmpeq>
 8005b80:	4243      	negs	r3, r0
 8005b82:	4158      	adcs	r0, r3
 8005b84:	e7ce      	b.n	8005b24 <CheckSnippetCondition+0x7c>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 8005b86:	1c39      	adds	r1, r7, #0
 8005b88:	9801      	ldr	r0, [sp, #4]
 8005b8a:	f7fa fca1 	bl	80004d0 <__aeabi_fcmpeq>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d10c      	bne.n	8005bac <CheckSnippetCondition+0x104>
 8005b92:	2100      	movs	r1, #0
 8005b94:	1c38      	adds	r0, r7, #0
 8005b96:	f7fa fc9b 	bl	80004d0 <__aeabi_fcmpeq>
 8005b9a:	4243      	negs	r3, r0
 8005b9c:	4158      	adcs	r0, r3
 8005b9e:	e7c1      	b.n	8005b24 <CheckSnippetCondition+0x7c>
			switch (snippets[index].cond.mathOperator)
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e7bf      	b.n	8005b24 <CheckSnippetCondition+0x7c>
	return false;
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	e7bd      	b.n	8005b24 <CheckSnippetCondition+0x7c>
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e7bb      	b.n	8005b24 <CheckSnippetCondition+0x7c>
 8005bac:	2000      	movs	r0, #0
 8005bae:	e7b9      	b.n	8005b24 <CheckSnippetCondition+0x7c>
 8005bb0:	20006d34 	.word	0x20006d34
 8005bb4:	20000090 	.word	0x20000090
 8005bb8:	0801b074 	.word	0x0801b074
 8005bbc:	20001484 	.word	0x20001484

08005bc0 <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	46ce      	mov	lr, r9
 8005bc4:	4647      	mov	r7, r8
 8005bc6:	b580      	push	{r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 8005bc8:	f009 fb76 	bl	800f2b8 <FreeRTOS_CLIGetOutputBuffer>
 8005bcc:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8005bce:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <ExecuteSnippet+0x90>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d036      	beq.n	8005c44 <ExecuteSnippet+0x84>
 8005bd6:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 8005bd8:	4f1e      	ldr	r7, [pc, #120]	; (8005c54 <ExecuteSnippet+0x94>)
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 8005bda:	4b1f      	ldr	r3, [pc, #124]	; (8005c58 <ExecuteSnippet+0x98>)
 8005bdc:	4698      	mov	r8, r3
 8005bde:	e01a      	b.n	8005c16 <ExecuteSnippet+0x56>
 8005be0:	4b1e      	ldr	r3, [pc, #120]	; (8005c5c <ExecuteSnippet+0x9c>)
 8005be2:	7818      	ldrb	r0, [r3, #0]
 8005be4:	0033      	movs	r3, r6
 8005be6:	4642      	mov	r2, r8
 8005be8:	2100      	movs	r1, #0
 8005bea:	f7ff fc1d 	bl	8005428 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 8005bee:	0030      	movs	r0, r6
 8005bf0:	f7fa fa92 	bl	8000118 <strlen>
 8005bf4:	0002      	movs	r2, r0
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	0030      	movs	r0, r6
 8005bfa:	f00e fb92 	bl	8014322 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8005bfe:	4649      	mov	r1, r9
 8005c00:	68e8      	ldr	r0, [r5, #12]
 8005c02:	f7ff ff0f 	bl	8005a24 <ParseSnippetCommand>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d1ea      	bne.n	8005be0 <ExecuteSnippet+0x20>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8005c0a:	3401      	adds	r4, #1
 8005c0c:	b2a4      	uxth	r4, r4
 8005c0e:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <ExecuteSnippet+0x90>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	42a3      	cmp	r3, r4
 8005c14:	d916      	bls.n	8005c44 <ExecuteSnippet+0x84>
		if (snippets[s].state)								// Check for activated Snippets
 8005c16:	00a3      	lsls	r3, r4, #2
 8005c18:	191b      	adds	r3, r3, r4
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	18fb      	adds	r3, r7, r3
 8005c1e:	7c1b      	ldrb	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f2      	beq.n	8005c0a <ExecuteSnippet+0x4a>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 8005c24:	b2e0      	uxtb	r0, r4
 8005c26:	f7ff ff3f 	bl	8005aa8 <CheckSnippetCondition>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d0ed      	beq.n	8005c0a <ExecuteSnippet+0x4a>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <ExecuteSnippet+0xa0>)
 8005c30:	2220      	movs	r2, #32
 8005c32:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8005c34:	4b08      	ldr	r3, [pc, #32]	; (8005c58 <ExecuteSnippet+0x98>)
 8005c36:	4699      	mov	r9, r3
 8005c38:	00a3      	lsls	r3, r4, #2
 8005c3a:	191d      	adds	r5, r3, r4
 8005c3c:	00ad      	lsls	r5, r5, #2
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <ExecuteSnippet+0x94>)
 8005c40:	195d      	adds	r5, r3, r5
 8005c42:	e7dc      	b.n	8005bfe <ExecuteSnippet+0x3e>
			}
		}
  }
	
	return result;
}
 8005c44:	2000      	movs	r0, #0
 8005c46:	bcc0      	pop	{r6, r7}
 8005c48:	46b9      	mov	r9, r7
 8005c4a:	46b0      	mov	r8, r6
 8005c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	200011eb 	.word	0x200011eb
 8005c54:	20006d34 	.word	0x20006d34
 8005c58:	20001184 	.word	0x20001184
 8005c5c:	20000aa7 	.word	0x20000aa7
 8005c60:	20006d18 	.word	0x20006d18

08005c64 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
return 0;
}
 8005c64:	2000      	movs	r0, #0
 8005c66:	4770      	bx	lr

08005c68 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	0004      	movs	r4, r0
 8005c6e:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8005c74:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d015      	beq.n	8005ca6 <setBaudrateCommand+0x3e>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005c7a:	aa01      	add	r2, sp, #4
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	0028      	movs	r0, r5
 8005c80:	f009 fb1e 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005c84:	2300      	movs	r3, #0
 8005c86:	56c3      	ldrsb	r3, [r0, r3]
 8005c88:	2b70      	cmp	r3, #112	; 0x70
 8005c8a:	d00e      	beq.n	8005caa <setBaudrateCommand+0x42>
	else
	{
		result = BOS_ERR_WrongValue;
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005c8c:	466a      	mov	r2, sp
 8005c8e:	2102      	movs	r1, #2
 8005c90:	0028      	movs	r0, r5
 8005c92:	f009 fb15 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8005c96:	f00e f8da 	bl	8013e4e <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8005c9a:	2213      	movs	r2, #19
 8005c9c:	4910      	ldr	r1, [pc, #64]	; (8005ce0 <setBaudrateCommand+0x78>)
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	f00e fb36 	bl	8014310 <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005ca4:	e018      	b.n	8005cd8 <setBaudrateCommand+0x70>
	configASSERT( pcWriteBuffer );
 8005ca6:	b672      	cpsid	i
 8005ca8:	e7fe      	b.n	8005ca8 <setBaudrateCommand+0x40>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005caa:	3001      	adds	r0, #1
 8005cac:	f00e f8cf 	bl	8013e4e <atol>
 8005cb0:	0006      	movs	r6, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005cb2:	466a      	mov	r2, sp
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	0028      	movs	r0, r5
 8005cb8:	f009 fb02 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8005cbc:	f00e f8c7 	bl	8013e4e <atol>
 8005cc0:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 8005cc2:	b2f0      	uxtb	r0, r6
 8005cc4:	0029      	movs	r1, r5
 8005cc6:	f009 f915 	bl	800eef4 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 8005cca:	23ff      	movs	r3, #255	; 0xff
 8005ccc:	4033      	ands	r3, r6
 8005cce:	002a      	movs	r2, r5
 8005cd0:	4904      	ldr	r1, [pc, #16]	; (8005ce4 <setBaudrateCommand+0x7c>)
 8005cd2:	0020      	movs	r0, r4
 8005cd4:	f00e fd1a 	bl	801470c <sprintf>
}
 8005cd8:	2000      	movs	r0, #0
 8005cda:	b002      	add	sp, #8
 8005cdc:	bd70      	pop	{r4, r5, r6, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	0801b0b8 	.word	0x0801b0b8
 8005ce4:	0801b090 	.word	0x0801b090

08005ce8 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8005ce8:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d006      	beq.n	8005cfc <flashsizeCommand+0x14>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 8005cee:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <flashsizeCommand+0x18>)
 8005cf0:	881a      	ldrh	r2, [r3, #0]
 8005cf2:	4904      	ldr	r1, [pc, #16]	; (8005d04 <flashsizeCommand+0x1c>)
 8005cf4:	f00e fd0a 	bl	801470c <sprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005cfc:	b672      	cpsid	i
 8005cfe:	e7fe      	b.n	8005cfe <flashsizeCommand+0x16>
 8005d00:	1ffff7cc 	.word	0x1ffff7cc
 8005d04:	0801b0cc 	.word	0x0801b0cc

08005d08 <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8005d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d0a:	46d6      	mov	lr, sl
 8005d0c:	464f      	mov	r7, r9
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b085      	sub	sp, #20
 8005d12:	0004      	movs	r4, r0
 8005d14:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 8005d1a:	4b63      	ldr	r3, [pc, #396]	; (8005ea8 <testportCommand+0x1a0>)
 8005d1c:	781a      	ldrb	r2, [r3, #0]
 8005d1e:	ab02      	add	r3, sp, #8
 8005d20:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005d22:	2c00      	cmp	r4, #0
 8005d24:	d012      	beq.n	8005d4c <testportCommand+0x44>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005d26:	aa03      	add	r2, sp, #12
 8005d28:	2101      	movs	r1, #1
 8005d2a:	f009 fac9 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8005d2e:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 8005d30:	495e      	ldr	r1, [pc, #376]	; (8005eac <testportCommand+0x1a4>)
 8005d32:	f7fa f9e7 	bl	8000104 <strcmp>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d174      	bne.n	8005e24 <testportCommand+0x11c>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 8005d3a:	4b5d      	ldr	r3, [pc, #372]	; (8005eb0 <testportCommand+0x1a8>)
 8005d3c:	781a      	ldrb	r2, [r3, #0]
 8005d3e:	4b5d      	ldr	r3, [pc, #372]	; (8005eb4 <testportCommand+0x1ac>)
 8005d40:	189b      	adds	r3, r3, r2
 8005d42:	3b01      	subs	r3, #1
 8005d44:	781f      	ldrb	r7, [r3, #0]
 8005d46:	2501      	movs	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
    {
      if(PcPort!=ports)
 8005d48:	4e59      	ldr	r6, [pc, #356]	; (8005eb0 <testportCommand+0x1a8>)
 8005d4a:	e03e      	b.n	8005dca <testportCommand+0xc2>
	configASSERT( pcWriteBuffer );
 8005d4c:	b672      	cpsid	i
 8005d4e:	e7fe      	b.n	8005d4e <testportCommand+0x46>
      
      if (result == BOS_OK){ 
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
     	else if (result == BOS_ERR_Keyword){
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 8005d50:	002a      	movs	r2, r5
 8005d52:	4959      	ldr	r1, [pc, #356]	; (8005eb8 <testportCommand+0x1b0>)
 8005d54:	0020      	movs	r0, r4
 8005d56:	f00e fcd9 	bl	801470c <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8005d5a:	0020      	movs	r0, r4
 8005d5c:	f7fa f9dc 	bl	8000118 <strlen>
 8005d60:	b282      	uxth	r2, r0
 8005d62:	4b53      	ldr	r3, [pc, #332]	; (8005eb0 <testportCommand+0x1a8>)
 8005d64:	7818      	ldrb	r0, [r3, #0]
 8005d66:	2364      	movs	r3, #100	; 0x64
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	3b5a      	subs	r3, #90	; 0x5a
 8005d6c:	0021      	movs	r1, r4
 8005d6e:	f009 f851 	bl	800ee14 <writePxMutex>
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 8005d72:	2254      	movs	r2, #84	; 0x54
 8005d74:	4951      	ldr	r1, [pc, #324]	; (8005ebc <testportCommand+0x1b4>)
 8005d76:	0020      	movs	r0, r4
 8005d78:	f00e faca 	bl	8014310 <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 8005d7c:	0020      	movs	r0, r4
 8005d7e:	f7fa f9cb 	bl	8000118 <strlen>
 8005d82:	b282      	uxth	r2, r0
 8005d84:	4b4a      	ldr	r3, [pc, #296]	; (8005eb0 <testportCommand+0x1a8>)
 8005d86:	7818      	ldrb	r0, [r3, #0]
 8005d88:	2364      	movs	r3, #100	; 0x64
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	3b5a      	subs	r3, #90	; 0x5a
 8005d8e:	0021      	movs	r1, r4
 8005d90:	f009 f840 	bl	800ee14 <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8005d94:	3701      	adds	r7, #1
 8005d96:	4b46      	ldr	r3, [pc, #280]	; (8005eb0 <testportCommand+0x1a8>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	019b      	lsls	r3, r3, #6
 8005d9e:	4a48      	ldr	r2, [pc, #288]	; (8005ec0 <testportCommand+0x1b8>)
 8005da0:	18d3      	adds	r3, r2, r3
 8005da2:	5ddb      	ldrb	r3, [r3, r7]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10d      	bne.n	8005dc4 <testportCommand+0xbc>
 8005da8:	4692      	mov	sl, r2
 8005daa:	4b41      	ldr	r3, [pc, #260]	; (8005eb0 <testportCommand+0x1a8>)
 8005dac:	4699      	mov	r9, r3
 8005dae:	2001      	movs	r0, #1
 8005db0:	f00b f9d2 	bl	8011158 <HAL_Delay>
 8005db4:	464b      	mov	r3, r9
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	019b      	lsls	r3, r3, #6
 8005dbc:	4453      	add	r3, sl
 8005dbe:	5ddb      	ldrb	r3, [r3, r7]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0f4      	beq.n	8005dae <testportCommand+0xa6>
    for (ports=1;ports<=NumOfPorts;ports++)
 8005dc4:	3501      	adds	r5, #1
 8005dc6:	2d06      	cmp	r5, #6
 8005dc8:	d035      	beq.n	8005e36 <testportCommand+0x12e>
 8005dca:	b2eb      	uxtb	r3, r5
 8005dcc:	4699      	mov	r9, r3
      if(PcPort!=ports)
 8005dce:	7833      	ldrb	r3, [r6, #0]
 8005dd0:	454b      	cmp	r3, r9
 8005dd2:	d0f7      	beq.n	8005dc4 <testportCommand+0xbc>
        WriteVaule[0]=rand();
 8005dd4:	f00e fabe 	bl	8014354 <rand>
 8005dd8:	466b      	mov	r3, sp
 8005dda:	7218      	strb	r0, [r3, #8]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8005ddc:	2364      	movs	r3, #100	; 0x64
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	3b5a      	subs	r3, #90	; 0x5a
 8005de2:	2201      	movs	r2, #1
 8005de4:	a902      	add	r1, sp, #8
 8005de6:	4648      	mov	r0, r9
 8005de8:	f009 f814 	bl	800ee14 <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8005dec:	4648      	mov	r0, r9
 8005dee:	f008 fff3 	bl	800edd8 <GetUart>
 8005df2:	6803      	ldr	r3, [r0, #0]
 8005df4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      if(WriteVaule[0]==ReadValue[0])
 8005df6:	466a      	mov	r2, sp
 8005df8:	7a12      	ldrb	r2, [r2, #8]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d1a7      	bne.n	8005d50 <testportCommand+0x48>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 8005e00:	002a      	movs	r2, r5
 8005e02:	4930      	ldr	r1, [pc, #192]	; (8005ec4 <testportCommand+0x1bc>)
 8005e04:	0020      	movs	r0, r4
 8005e06:	f00e fc81 	bl	801470c <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8005e0a:	0020      	movs	r0, r4
 8005e0c:	f7fa f984 	bl	8000118 <strlen>
 8005e10:	b282      	uxth	r2, r0
 8005e12:	4b27      	ldr	r3, [pc, #156]	; (8005eb0 <testportCommand+0x1a8>)
 8005e14:	7818      	ldrb	r0, [r3, #0]
 8005e16:	2364      	movs	r3, #100	; 0x64
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	3b5a      	subs	r3, #90	; 0x5a
 8005e1c:	0021      	movs	r1, r4
 8005e1e:	f008 fff9 	bl	800ee14 <writePxMutex>
 8005e22:	e7a6      	b.n	8005d72 <testportCommand+0x6a>
       LastEnter++;
        }
      }
    }
	else if (pcParameterString1[0] == 'p') {
 8005e24:	2300      	movs	r3, #0
 8005e26:	56eb      	ldrsb	r3, [r5, r3]
 8005e28:	2b70      	cmp	r3, #112	; 0x70
 8005e2a:	d00a      	beq.n	8005e42 <testportCommand+0x13a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
	else if (result == BOS_ERR_Keyword)  
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
    }
    else {
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005e2c:	220f      	movs	r2, #15
 8005e2e:	4926      	ldr	r1, [pc, #152]	; (8005ec8 <testportCommand+0x1c0>)
 8005e30:	0020      	movs	r0, r4
 8005e32:	f00e fa6d 	bl	8014310 <memcpy>
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005e36:	2000      	movs	r0, #0
 8005e38:	b005      	add	sp, #20
 8005e3a:	bcc0      	pop	{r6, r7}
 8005e3c:	46ba      	mov	sl, r7
 8005e3e:	46b1      	mov	r9, r6
 8005e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8005e42:	1c68      	adds	r0, r5, #1
 8005e44:	f00e f803 	bl	8013e4e <atol>
 8005e48:	0005      	movs	r5, r0
 8005e4a:	b2c6      	uxtb	r6, r0
    if(portt>0 && portt<=NumOfPorts)
 8005e4c:	1e73      	subs	r3, r6, #1
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d905      	bls.n	8005e5e <testportCommand+0x156>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8005e52:	221b      	movs	r2, #27
 8005e54:	491d      	ldr	r1, [pc, #116]	; (8005ecc <testportCommand+0x1c4>)
 8005e56:	0020      	movs	r0, r4
 8005e58:	f00e fa5a 	bl	8014310 <memcpy>
	return pdFALSE;
 8005e5c:	e7eb      	b.n	8005e36 <testportCommand+0x12e>
        WriteVaule[0]=rand();
 8005e5e:	f00e fa79 	bl	8014354 <rand>
 8005e62:	466b      	mov	r3, sp
 8005e64:	7218      	strb	r0, [r3, #8]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 8005e66:	2364      	movs	r3, #100	; 0x64
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	3b32      	subs	r3, #50	; 0x32
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	a902      	add	r1, sp, #8
 8005e70:	0030      	movs	r0, r6
 8005e72:	f008 ffcf 	bl	800ee14 <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 8005e76:	0030      	movs	r0, r6
 8005e78:	f008 ffae 	bl	800edd8 <GetUart>
 8005e7c:	6803      	ldr	r3, [r0, #0]
 8005e7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  if(WriteVaule[0]==ReadValue[0])
 8005e80:	466a      	mov	r2, sp
 8005e82:	7a12      	ldrb	r2, [r2, #8]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d006      	beq.n	8005e98 <testportCommand+0x190>
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 8005e8a:	22ff      	movs	r2, #255	; 0xff
 8005e8c:	402a      	ands	r2, r5
 8005e8e:	490a      	ldr	r1, [pc, #40]	; (8005eb8 <testportCommand+0x1b0>)
 8005e90:	0020      	movs	r0, r4
 8005e92:	f00e fc3b 	bl	801470c <sprintf>
 8005e96:	e7ce      	b.n	8005e36 <testportCommand+0x12e>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 8005e98:	22ff      	movs	r2, #255	; 0xff
 8005e9a:	402a      	ands	r2, r5
 8005e9c:	4909      	ldr	r1, [pc, #36]	; (8005ec4 <testportCommand+0x1bc>)
 8005e9e:	0020      	movs	r0, r4
 8005ea0:	f00e fc34 	bl	801470c <sprintf>
 8005ea4:	e7c7      	b.n	8005e36 <testportCommand+0x12e>
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	0801b19c 	.word	0x0801b19c
 8005eac:	0801a8c0 	.word	0x0801a8c0
 8005eb0:	20000aa7 	.word	0x20000aa7
 8005eb4:	200013dc 	.word	0x200013dc
 8005eb8:	0801b108 	.word	0x0801b108
 8005ebc:	0801b11c 	.word	0x0801b11c
 8005ec0:	2000129c 	.word	0x2000129c
 8005ec4:	0801b0ec 	.word	0x0801b0ec
 8005ec8:	0801b170 	.word	0x0801b170
 8005ecc:	0801b180 	.word	0x0801b180

08005ed0 <unbridgeCommand>:
{	
 8005ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	0004      	movs	r4, r0
 8005ed6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d017      	beq.n	8005f12 <unbridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005ee2:	aa01      	add	r2, sp, #4
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	0028      	movs	r0, r5
 8005ee8:	f009 f9ea 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005eec:	2300      	movs	r3, #0
 8005eee:	56c3      	ldrsb	r3, [r0, r3]
 8005ef0:	2b70      	cmp	r3, #112	; 0x70
 8005ef2:	d010      	beq.n	8005f16 <unbridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005ef4:	466a      	mov	r2, sp
 8005ef6:	2102      	movs	r1, #2
 8005ef8:	0028      	movs	r0, r5
 8005efa:	f009 f9e1 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005efe:	2300      	movs	r3, #0
 8005f00:	56c3      	ldrsb	r3, [r0, r3]
 8005f02:	2b70      	cmp	r3, #112	; 0x70
 8005f04:	d028      	beq.n	8005f58 <unbridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005f06:	220f      	movs	r2, #15
 8005f08:	491a      	ldr	r1, [pc, #104]	; (8005f74 <unbridgeCommand+0xa4>)
 8005f0a:	0020      	movs	r0, r4
 8005f0c:	f00e fa00 	bl	8014310 <memcpy>
 8005f10:	e02d      	b.n	8005f6e <unbridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 8005f12:	b672      	cpsid	i
 8005f14:	e7fe      	b.n	8005f14 <unbridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005f16:	3001      	adds	r0, #1
 8005f18:	f00d ff99 	bl	8013e4e <atol>
 8005f1c:	0006      	movs	r6, r0
 8005f1e:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005f20:	466a      	mov	r2, sp
 8005f22:	2102      	movs	r1, #2
 8005f24:	0028      	movs	r0, r5
 8005f26:	f009 f9cb 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	56c3      	ldrsb	r3, [r0, r3]
 8005f2e:	2b70      	cmp	r3, #112	; 0x70
 8005f30:	d1e9      	bne.n	8005f06 <unbridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005f32:	3001      	adds	r0, #1
 8005f34:	f00d ff8b 	bl	8013e4e <atol>
 8005f38:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 8005f3a:	b2c1      	uxtb	r1, r0
 8005f3c:	0038      	movs	r0, r7
 8005f3e:	f7fe ff6f 	bl	8004e20 <Unbridge>
	if (result == BOS_OK) 
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d10c      	bne.n	8005f60 <unbridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005f46:	22ff      	movs	r2, #255	; 0xff
 8005f48:	002b      	movs	r3, r5
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	4032      	ands	r2, r6
 8005f4e:	490a      	ldr	r1, [pc, #40]	; (8005f78 <unbridgeCommand+0xa8>)
 8005f50:	0020      	movs	r0, r4
 8005f52:	f00e fbdb 	bl	801470c <sprintf>
 8005f56:	e00a      	b.n	8005f6e <unbridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005f58:	3001      	adds	r0, #1
 8005f5a:	f00d ff78 	bl	8013e4e <atol>
	else if (result == BOS_ERR_WrongParam) 
 8005f5e:	e7d2      	b.n	8005f06 <unbridgeCommand+0x36>
 8005f60:	2867      	cmp	r0, #103	; 0x67
 8005f62:	d0d0      	beq.n	8005f06 <unbridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005f64:	2219      	movs	r2, #25
 8005f66:	4905      	ldr	r1, [pc, #20]	; (8005f7c <unbridgeCommand+0xac>)
 8005f68:	0020      	movs	r0, r4
 8005f6a:	f00e f9d1 	bl	8014310 <memcpy>
}
 8005f6e:	2000      	movs	r0, #0
 8005f70:	b003      	add	sp, #12
 8005f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f74:	0801b170 	.word	0x0801b170
 8005f78:	0801b1a0 	.word	0x0801b1a0
 8005f7c:	0801b1c0 	.word	0x0801b1c0

08005f80 <bridgeCommand>:
{	
 8005f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f82:	b083      	sub	sp, #12
 8005f84:	0004      	movs	r4, r0
 8005f86:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d017      	beq.n	8005fc2 <bridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005f92:	aa01      	add	r2, sp, #4
 8005f94:	2101      	movs	r1, #1
 8005f96:	0028      	movs	r0, r5
 8005f98:	f009 f992 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	56c3      	ldrsb	r3, [r0, r3]
 8005fa0:	2b70      	cmp	r3, #112	; 0x70
 8005fa2:	d010      	beq.n	8005fc6 <bridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005fa4:	466a      	mov	r2, sp
 8005fa6:	2102      	movs	r1, #2
 8005fa8:	0028      	movs	r0, r5
 8005faa:	f009 f989 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005fae:	2300      	movs	r3, #0
 8005fb0:	56c3      	ldrsb	r3, [r0, r3]
 8005fb2:	2b70      	cmp	r3, #112	; 0x70
 8005fb4:	d028      	beq.n	8006008 <bridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005fb6:	220f      	movs	r2, #15
 8005fb8:	491a      	ldr	r1, [pc, #104]	; (8006024 <bridgeCommand+0xa4>)
 8005fba:	0020      	movs	r0, r4
 8005fbc:	f00e f9a8 	bl	8014310 <memcpy>
 8005fc0:	e02d      	b.n	800601e <bridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 8005fc2:	b672      	cpsid	i
 8005fc4:	e7fe      	b.n	8005fc4 <bridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	f00d ff41 	bl	8013e4e <atol>
 8005fcc:	0006      	movs	r6, r0
 8005fce:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005fd0:	466a      	mov	r2, sp
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	0028      	movs	r0, r5
 8005fd6:	f009 f973 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005fda:	2300      	movs	r3, #0
 8005fdc:	56c3      	ldrsb	r3, [r0, r3]
 8005fde:	2b70      	cmp	r3, #112	; 0x70
 8005fe0:	d1e9      	bne.n	8005fb6 <bridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f00d ff33 	bl	8013e4e <atol>
 8005fe8:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 8005fea:	b2c1      	uxtb	r1, r0
 8005fec:	0038      	movs	r0, r7
 8005fee:	f7fe ff03 	bl	8004df8 <Bridge>
	if (result == BOS_OK) 
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d10c      	bne.n	8006010 <bridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005ff6:	22ff      	movs	r2, #255	; 0xff
 8005ff8:	002b      	movs	r3, r5
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	4032      	ands	r2, r6
 8005ffe:	490a      	ldr	r1, [pc, #40]	; (8006028 <bridgeCommand+0xa8>)
 8006000:	0020      	movs	r0, r4
 8006002:	f00e fb83 	bl	801470c <sprintf>
 8006006:	e00a      	b.n	800601e <bridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006008:	3001      	adds	r0, #1
 800600a:	f00d ff20 	bl	8013e4e <atol>
	else if (result == BOS_ERR_WrongParam) 
 800600e:	e7d2      	b.n	8005fb6 <bridgeCommand+0x36>
 8006010:	2867      	cmp	r0, #103	; 0x67
 8006012:	d0d0      	beq.n	8005fb6 <bridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8006014:	2217      	movs	r2, #23
 8006016:	4905      	ldr	r1, [pc, #20]	; (800602c <bridgeCommand+0xac>)
 8006018:	0020      	movs	r0, r4
 800601a:	f00e f979 	bl	8014310 <memcpy>
}
 800601e:	2000      	movs	r0, #0
 8006020:	b003      	add	sp, #12
 8006022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006024:	0801b170 	.word	0x0801b170
 8006028:	0801b1dc 	.word	0x0801b1dc
 800602c:	0801b200 	.word	0x0801b200

08006030 <delSnipCommand>:
{	
 8006030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006032:	46de      	mov	lr, fp
 8006034:	4657      	mov	r7, sl
 8006036:	464e      	mov	r6, r9
 8006038:	4645      	mov	r5, r8
 800603a:	b5e0      	push	{r5, r6, r7, lr}
 800603c:	b083      	sub	sp, #12
 800603e:	0007      	movs	r7, r0
 8006040:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8006046:	2f00      	cmp	r7, #0
 8006048:	d013      	beq.n	8006072 <delSnipCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800604a:	aa01      	add	r2, sp, #4
 800604c:	2101      	movs	r1, #1
 800604e:	f009 f937 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8006052:	f00d fef6 	bl	8013e42 <atoi>
 8006056:	4681      	mov	r9, r0
 8006058:	b2c5      	uxtb	r5, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 800605a:	2d00      	cmp	r5, #0
 800605c:	d003      	beq.n	8006066 <delSnipCommand+0x36>
 800605e:	4b31      	ldr	r3, [pc, #196]	; (8006124 <delSnipCommand+0xf4>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	42ab      	cmp	r3, r5
 8006064:	d207      	bcs.n	8006076 <delSnipCommand+0x46>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8006066:	2223      	movs	r2, #35	; 0x23
 8006068:	492f      	ldr	r1, [pc, #188]	; (8006128 <delSnipCommand+0xf8>)
 800606a:	0038      	movs	r0, r7
 800606c:	f00e f950 	bl	8014310 <memcpy>
	return pdFALSE;
 8006070:	e04f      	b.n	8006112 <delSnipCommand+0xe2>
	configASSERT( pcWriteBuffer );
 8006072:	b672      	cpsid	i
 8006074:	e7fe      	b.n	8006074 <delSnipCommand+0x44>
		snippets[index-1].cond.conditionType = 0;
 8006076:	24ff      	movs	r4, #255	; 0xff
 8006078:	4004      	ands	r4, r0
 800607a:	3c01      	subs	r4, #1
 800607c:	4b2b      	ldr	r3, [pc, #172]	; (800612c <delSnipCommand+0xfc>)
 800607e:	4698      	mov	r8, r3
 8006080:	00a6      	lsls	r6, r4, #2
 8006082:	1933      	adds	r3, r6, r4
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	2200      	movs	r2, #0
 8006088:	4692      	mov	sl, r2
 800608a:	4642      	mov	r2, r8
 800608c:	4651      	mov	r1, sl
 800608e:	5499      	strb	r1, [r3, r2]
		snippets[index-1].cond.mathOperator = 0;
 8006090:	1933      	adds	r3, r6, r4
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4443      	add	r3, r8
 8006096:	469b      	mov	fp, r3
 8006098:	4652      	mov	r2, sl
 800609a:	7059      	strb	r1, [r3, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 800609c:	1930      	adds	r0, r6, r4
 800609e:	0080      	lsls	r0, r0, #2
 80060a0:	3002      	adds	r0, #2
 80060a2:	4440      	add	r0, r8
 80060a4:	3204      	adds	r2, #4
 80060a6:	f00e f93c 	bl	8014322 <memset>
		snippets[index-1].state = false;
 80060aa:	465b      	mov	r3, fp
 80060ac:	4652      	mov	r2, sl
 80060ae:	741a      	strb	r2, [r3, #16]
		free(snippets[index-1].cmd);
 80060b0:	68d8      	ldr	r0, [r3, #12]
 80060b2:	f00d ff01 	bl	8013eb8 <free>
		snippets[index-1].cmd = NULL;
 80060b6:	465c      	mov	r4, fp
 80060b8:	4653      	mov	r3, sl
 80060ba:	60e3      	str	r3, [r4, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 80060bc:	4b19      	ldr	r3, [pc, #100]	; (8006124 <delSnipCommand+0xf4>)
 80060be:	781e      	ldrb	r6, [r3, #0]
 80060c0:	42b5      	cmp	r5, r6
 80060c2:	d21c      	bcs.n	80060fe <delSnipCommand+0xce>
 80060c4:	20ff      	movs	r0, #255	; 0xff
 80060c6:	464b      	mov	r3, r9
 80060c8:	4018      	ands	r0, r3
 80060ca:	0084      	lsls	r4, r0, #2
 80060cc:	1824      	adds	r4, r4, r0
 80060ce:	00a4      	lsls	r4, r4, #2
 80060d0:	4b16      	ldr	r3, [pc, #88]	; (800612c <delSnipCommand+0xfc>)
 80060d2:	18e4      	adds	r4, r4, r3
 80060d4:	e004      	b.n	80060e0 <delSnipCommand+0xb0>
 80060d6:	3501      	adds	r5, #1
 80060d8:	b2ed      	uxtb	r5, r5
 80060da:	3414      	adds	r4, #20
 80060dc:	42b5      	cmp	r5, r6
 80060de:	d00e      	beq.n	80060fe <delSnipCommand+0xce>
			if (snippets[s].cond.conditionType) {
 80060e0:	7823      	ldrb	r3, [r4, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f7      	beq.n	80060d6 <delSnipCommand+0xa6>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 80060e6:	2214      	movs	r2, #20
 80060e8:	0021      	movs	r1, r4
 80060ea:	0020      	movs	r0, r4
 80060ec:	3814      	subs	r0, #20
 80060ee:	f00e f90f 	bl	8014310 <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 80060f2:	2214      	movs	r2, #20
 80060f4:	2100      	movs	r1, #0
 80060f6:	0020      	movs	r0, r4
 80060f8:	f00e f913 	bl	8014322 <memset>
 80060fc:	e7eb      	b.n	80060d6 <delSnipCommand+0xa6>
		--numOfRecordedSnippets;
 80060fe:	3e01      	subs	r6, #1
 8006100:	4b08      	ldr	r3, [pc, #32]	; (8006124 <delSnipCommand+0xf4>)
 8006102:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 8006104:	f005 fb44 	bl	800b790 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8006108:	2236      	movs	r2, #54	; 0x36
 800610a:	4909      	ldr	r1, [pc, #36]	; (8006130 <delSnipCommand+0x100>)
 800610c:	0038      	movs	r0, r7
 800610e:	f00e f8ff 	bl	8014310 <memcpy>
}
 8006112:	2000      	movs	r0, #0
 8006114:	b003      	add	sp, #12
 8006116:	bcf0      	pop	{r4, r5, r6, r7}
 8006118:	46bb      	mov	fp, r7
 800611a:	46b2      	mov	sl, r6
 800611c:	46a9      	mov	r9, r5
 800611e:	46a0      	mov	r8, r4
 8006120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	200011eb 	.word	0x200011eb
 8006128:	0801b250 	.word	0x0801b250
 800612c:	20006d34 	.word	0x20006d34
 8006130:	0801b218 	.word	0x0801b218

08006134 <pauseSnipCommand>:
{	
 8006134:	b510      	push	{r4, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	0004      	movs	r4, r0
 800613a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8006140:	2c00      	cmp	r4, #0
 8006142:	d014      	beq.n	800616e <pauseSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006144:	aa01      	add	r2, sp, #4
 8006146:	2101      	movs	r1, #1
 8006148:	f009 f8ba 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 800614c:	f00d fe79 	bl	8013e42 <atoi>
 8006150:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <pauseSnipCommand+0x2a>
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <pauseSnipCommand+0x64>)
 8006158:	7812      	ldrb	r2, [r2, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d209      	bcs.n	8006172 <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 800615e:	2223      	movs	r2, #35	; 0x23
 8006160:	490e      	ldr	r1, [pc, #56]	; (800619c <pauseSnipCommand+0x68>)
 8006162:	0020      	movs	r0, r4
 8006164:	f00e f8d4 	bl	8014310 <memcpy>
}
 8006168:	2000      	movs	r0, #0
 800616a:	b002      	add	sp, #8
 800616c:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800616e:	b672      	cpsid	i
 8006170:	e7fe      	b.n	8006170 <pauseSnipCommand+0x3c>
		snippets[index-1].state = false;
 8006172:	23ff      	movs	r3, #255	; 0xff
 8006174:	4003      	ands	r3, r0
 8006176:	3b01      	subs	r3, #1
 8006178:	009a      	lsls	r2, r3, #2
 800617a:	18d3      	adds	r3, r2, r3
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4a08      	ldr	r2, [pc, #32]	; (80061a0 <pauseSnipCommand+0x6c>)
 8006180:	18d3      	adds	r3, r2, r3
 8006182:	2200      	movs	r2, #0
 8006184:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8006186:	f005 fb03 	bl	800b790 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 800618a:	2235      	movs	r2, #53	; 0x35
 800618c:	4905      	ldr	r1, [pc, #20]	; (80061a4 <pauseSnipCommand+0x70>)
 800618e:	0020      	movs	r0, r4
 8006190:	f00e f8be 	bl	8014310 <memcpy>
 8006194:	e7e8      	b.n	8006168 <pauseSnipCommand+0x34>
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	200011eb 	.word	0x200011eb
 800619c:	0801b250 	.word	0x0801b250
 80061a0:	20006d34 	.word	0x20006d34
 80061a4:	0801b274 	.word	0x0801b274

080061a8 <actSnipCommand>:
{	
 80061a8:	b510      	push	{r4, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	0004      	movs	r4, r0
 80061ae:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80061b4:	2c00      	cmp	r4, #0
 80061b6:	d014      	beq.n	80061e2 <actSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80061b8:	aa01      	add	r2, sp, #4
 80061ba:	2101      	movs	r1, #1
 80061bc:	f009 f880 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 80061c0:	f00d fe3f 	bl	8013e42 <atoi>
 80061c4:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <actSnipCommand+0x2a>
 80061ca:	4a10      	ldr	r2, [pc, #64]	; (800620c <actSnipCommand+0x64>)
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d209      	bcs.n	80061e6 <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 80061d2:	2223      	movs	r2, #35	; 0x23
 80061d4:	490e      	ldr	r1, [pc, #56]	; (8006210 <actSnipCommand+0x68>)
 80061d6:	0020      	movs	r0, r4
 80061d8:	f00e f89a 	bl	8014310 <memcpy>
}
 80061dc:	2000      	movs	r0, #0
 80061de:	b002      	add	sp, #8
 80061e0:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80061e2:	b672      	cpsid	i
 80061e4:	e7fe      	b.n	80061e4 <actSnipCommand+0x3c>
		snippets[index-1].state = true;
 80061e6:	23ff      	movs	r3, #255	; 0xff
 80061e8:	4003      	ands	r3, r0
 80061ea:	3b01      	subs	r3, #1
 80061ec:	009a      	lsls	r2, r3, #2
 80061ee:	18d3      	adds	r3, r2, r3
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4a08      	ldr	r2, [pc, #32]	; (8006214 <actSnipCommand+0x6c>)
 80061f4:	18d3      	adds	r3, r2, r3
 80061f6:	2201      	movs	r2, #1
 80061f8:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 80061fa:	f005 fac9 	bl	800b790 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 80061fe:	2238      	movs	r2, #56	; 0x38
 8006200:	4905      	ldr	r1, [pc, #20]	; (8006218 <actSnipCommand+0x70>)
 8006202:	0020      	movs	r0, r4
 8006204:	f00e f884 	bl	8014310 <memcpy>
 8006208:	e7e8      	b.n	80061dc <actSnipCommand+0x34>
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	200011eb 	.word	0x200011eb
 8006210:	0801b250 	.word	0x0801b250
 8006214:	20006d34 	.word	0x20006d34
 8006218:	0801b2ac 	.word	0x0801b2ac

0800621c <snipCommand>:
{	
 800621c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621e:	46de      	mov	lr, fp
 8006220:	4657      	mov	r7, sl
 8006222:	464e      	mov	r6, r9
 8006224:	4645      	mov	r5, r8
 8006226:	b5e0      	push	{r5, r6, r7, lr}
 8006228:	b08b      	sub	sp, #44	; 0x2c
 800622a:	0004      	movs	r4, r0
	char status[2][7] = {"Paused", "Active"};
 800622c:	aa06      	add	r2, sp, #24
 800622e:	4b80      	ldr	r3, [pc, #512]	; (8006430 <snipCommand+0x214>)
 8006230:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006232:	c223      	stmia	r2!, {r0, r1, r5}
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	8013      	strh	r3, [r2, #0]
	configASSERT( pcWriteBuffer );
 8006238:	2c00      	cmp	r4, #0
 800623a:	d013      	beq.n	8006264 <snipCommand+0x48>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 800623c:	4b7d      	ldr	r3, [pc, #500]	; (8006434 <snipCommand+0x218>)
 800623e:	7818      	ldrb	r0, [r3, #0]
 8006240:	2301      	movs	r3, #1
 8006242:	425b      	negs	r3, r3
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	3333      	adds	r3, #51	; 0x33
 8006248:	2237      	movs	r2, #55	; 0x37
 800624a:	497b      	ldr	r1, [pc, #492]	; (8006438 <snipCommand+0x21c>)
 800624c:	f008 fde2 	bl	800ee14 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8006250:	4b7a      	ldr	r3, [pc, #488]	; (800643c <snipCommand+0x220>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d100      	bne.n	800625a <snipCommand+0x3e>
 8006258:	e0dd      	b.n	8006416 <snipCommand+0x1fa>
 800625a:	2700      	movs	r7, #0
		if (snippets[s].cond.conditionType)
 800625c:	4b78      	ldr	r3, [pc, #480]	; (8006440 <snipCommand+0x224>)
 800625e:	4698      	mov	r8, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8006260:	4d78      	ldr	r5, [pc, #480]	; (8006444 <snipCommand+0x228>)
 8006262:	e0c3      	b.n	80063ec <snipCommand+0x1d0>
	configASSERT( pcWriteBuffer );
 8006264:	b672      	cpsid	i
 8006266:	e7fe      	b.n	8006266 <snipCommand+0x4a>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 8006268:	4b75      	ldr	r3, [pc, #468]	; (8006440 <snipCommand+0x224>)
 800626a:	469b      	mov	fp, r3
 800626c:	00b3      	lsls	r3, r6, #2
 800626e:	4699      	mov	r9, r3
 8006270:	199b      	adds	r3, r3, r6
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	445b      	add	r3, fp
 8006276:	7c1a      	ldrb	r2, [r3, #16]
 8006278:	00d3      	lsls	r3, r2, #3
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	aa06      	add	r2, sp, #24
 800627e:	4694      	mov	ip, r2
 8006280:	4463      	add	r3, ip
 8006282:	003a      	movs	r2, r7
 8006284:	4970      	ldr	r1, [pc, #448]	; (8006448 <snipCommand+0x22c>)
 8006286:	0020      	movs	r0, r4
 8006288:	f00e fa40 	bl	801470c <sprintf>
		switch (snippets[s].cond.conditionType)
 800628c:	464b      	mov	r3, r9
 800628e:	199b      	adds	r3, r3, r6
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	465a      	mov	r2, fp
 8006294:	5c9b      	ldrb	r3, [r3, r2]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d11c      	bne.n	80062d4 <snipCommand+0xb8>
				switch (snippets[s].cond.buffer1[1])
 800629a:	00b3      	lsls	r3, r6, #2
 800629c:	199b      	adds	r3, r3, r6
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4a67      	ldr	r2, [pc, #412]	; (8006440 <snipCommand+0x224>)
 80062a2:	18d3      	adds	r3, r2, r3
 80062a4:	78db      	ldrb	r3, [r3, #3]
 80062a6:	2b0b      	cmp	r3, #11
 80062a8:	d842      	bhi.n	8006330 <snipCommand+0x114>
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d861      	bhi.n	8006372 <snipCommand+0x156>
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	d051      	beq.n	8006356 <snipCommand+0x13a>
 80062b2:	2b06      	cmp	r3, #6
 80062b4:	d000      	beq.n	80062b8 <snipCommand+0x9c>
 80062b6:	e0a5      	b.n	8006404 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 80062b8:	00b3      	lsls	r3, r6, #2
 80062ba:	199e      	adds	r6, r3, r6
 80062bc:	00b6      	lsls	r6, r6, #2
 80062be:	4b60      	ldr	r3, [pc, #384]	; (8006440 <snipCommand+0x224>)
 80062c0:	199e      	adds	r6, r3, r6
 80062c2:	78b3      	ldrb	r3, [r6, #2]
 80062c4:	68f2      	ldr	r2, [r6, #12]
 80062c6:	9200      	str	r2, [sp, #0]
 80062c8:	0022      	movs	r2, r4
 80062ca:	4960      	ldr	r1, [pc, #384]	; (800644c <snipCommand+0x230>)
 80062cc:	0020      	movs	r0, r4
 80062ce:	f00e fa1d 	bl	801470c <sprintf>
        		break;
 80062d2:	e097      	b.n	8006404 <snipCommand+0x1e8>
		switch (snippets[s].cond.conditionType)
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d000      	beq.n	80062da <snipCommand+0xbe>
 80062d8:	e094      	b.n	8006404 <snipCommand+0x1e8>
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 80062da:	00b1      	lsls	r1, r6, #2
 80062dc:	1989      	adds	r1, r1, r6
 80062de:	0089      	lsls	r1, r1, #2
 80062e0:	3106      	adds	r1, #6
 80062e2:	4b57      	ldr	r3, [pc, #348]	; (8006440 <snipCommand+0x224>)
 80062e4:	4699      	mov	r9, r3
 80062e6:	4449      	add	r1, r9
 80062e8:	2204      	movs	r2, #4
 80062ea:	a805      	add	r0, sp, #20
 80062ec:	f00e f810 	bl	8014310 <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 80062f0:	00b3      	lsls	r3, r6, #2
 80062f2:	199e      	adds	r6, r3, r6
 80062f4:	00b6      	lsls	r6, r6, #2
 80062f6:	444e      	add	r6, r9
 80062f8:	78f2      	ldrb	r2, [r6, #3]
 80062fa:	3a01      	subs	r2, #1
 80062fc:	0053      	lsls	r3, r2, #1
 80062fe:	189b      	adds	r3, r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4a53      	ldr	r2, [pc, #332]	; (8006450 <snipCommand+0x234>)
 8006304:	18d3      	adds	r3, r2, r3
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	4699      	mov	r9, r3
 800630a:	9805      	ldr	r0, [sp, #20]
 800630c:	f7fc ffac 	bl	8003268 <__aeabi_f2d>
 8006310:	9002      	str	r0, [sp, #8]
 8006312:	9103      	str	r1, [sp, #12]
 8006314:	7873      	ldrb	r3, [r6, #1]
 8006316:	3b01      	subs	r3, #1
 8006318:	005a      	lsls	r2, r3, #1
 800631a:	18d2      	adds	r2, r2, r3
 800631c:	4b4d      	ldr	r3, [pc, #308]	; (8006454 <snipCommand+0x238>)
 800631e:	189b      	adds	r3, r3, r2
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	464b      	mov	r3, r9
 8006324:	0022      	movs	r2, r4
 8006326:	494c      	ldr	r1, [pc, #304]	; (8006458 <snipCommand+0x23c>)
 8006328:	0020      	movs	r0, r4
 800632a:	f00e f9ef 	bl	801470c <sprintf>
				break;
 800632e:	e069      	b.n	8006404 <snipCommand+0x1e8>
 8006330:	3b0c      	subs	r3, #12
 8006332:	2b02      	cmp	r3, #2
 8006334:	d866      	bhi.n	8006404 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8006336:	00b2      	lsls	r2, r6, #2
 8006338:	1996      	adds	r6, r2, r6
 800633a:	00b6      	lsls	r6, r6, #2
 800633c:	4a40      	ldr	r2, [pc, #256]	; (8006440 <snipCommand+0x224>)
 800633e:	1992      	adds	r2, r2, r6
 8006340:	7893      	ldrb	r3, [r2, #2]
 8006342:	68d1      	ldr	r1, [r2, #12]
 8006344:	9101      	str	r1, [sp, #4]
 8006346:	7912      	ldrb	r2, [r2, #4]
 8006348:	9200      	str	r2, [sp, #0]
 800634a:	0022      	movs	r2, r4
 800634c:	4943      	ldr	r1, [pc, #268]	; (800645c <snipCommand+0x240>)
 800634e:	0020      	movs	r0, r4
 8006350:	f00e f9dc 	bl	801470c <sprintf>
        		break;						
 8006354:	e056      	b.n	8006404 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8006356:	00b3      	lsls	r3, r6, #2
 8006358:	199e      	adds	r6, r3, r6
 800635a:	00b6      	lsls	r6, r6, #2
 800635c:	4b38      	ldr	r3, [pc, #224]	; (8006440 <snipCommand+0x224>)
 800635e:	199e      	adds	r6, r3, r6
 8006360:	78b3      	ldrb	r3, [r6, #2]
 8006362:	68f2      	ldr	r2, [r6, #12]
 8006364:	9200      	str	r2, [sp, #0]
 8006366:	0022      	movs	r2, r4
 8006368:	493d      	ldr	r1, [pc, #244]	; (8006460 <snipCommand+0x244>)
 800636a:	0020      	movs	r0, r4
 800636c:	f00e f9ce 	bl	801470c <sprintf>
        		break;
 8006370:	e048      	b.n	8006404 <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8006372:	00b2      	lsls	r2, r6, #2
 8006374:	1996      	adds	r6, r2, r6
 8006376:	00b6      	lsls	r6, r6, #2
 8006378:	4a31      	ldr	r2, [pc, #196]	; (8006440 <snipCommand+0x224>)
 800637a:	1992      	adds	r2, r2, r6
 800637c:	7893      	ldrb	r3, [r2, #2]
 800637e:	68d1      	ldr	r1, [r2, #12]
 8006380:	9101      	str	r1, [sp, #4]
 8006382:	7912      	ldrb	r2, [r2, #4]
 8006384:	9200      	str	r2, [sp, #0]
 8006386:	0022      	movs	r2, r4
 8006388:	4936      	ldr	r1, [pc, #216]	; (8006464 <snipCommand+0x248>)
 800638a:	0020      	movs	r0, r4
 800638c:	f00e f9be 	bl	801470c <sprintf>
        		break;
 8006390:	e038      	b.n	8006404 <snipCommand+0x1e8>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8006392:	002b      	movs	r3, r5
 8006394:	0022      	movs	r2, r4
 8006396:	4934      	ldr	r1, [pc, #208]	; (8006468 <snipCommand+0x24c>)
 8006398:	0020      	movs	r0, r4
 800639a:	f00e f9b7 	bl	801470c <sprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 800639e:	0028      	movs	r0, r5
 80063a0:	f7f9 feba 	bl	8000118 <strlen>
 80063a4:	0002      	movs	r2, r0
 80063a6:	2100      	movs	r1, #0
 80063a8:	0028      	movs	r0, r5
 80063aa:	f00d ffba 	bl	8014322 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 80063ae:	4649      	mov	r1, r9
 80063b0:	68f0      	ldr	r0, [r6, #12]
 80063b2:	f7ff fb37 	bl	8005a24 <ParseSnippetCommand>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d1eb      	bne.n	8006392 <snipCommand+0x176>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 80063ba:	0020      	movs	r0, r4
 80063bc:	f7f9 feac 	bl	8000118 <strlen>
 80063c0:	1820      	adds	r0, r4, r0
 80063c2:	220c      	movs	r2, #12
 80063c4:	4929      	ldr	r1, [pc, #164]	; (800646c <snipCommand+0x250>)
 80063c6:	f00d ffa3 	bl	8014310 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80063ca:	0020      	movs	r0, r4
 80063cc:	f7f9 fea4 	bl	8000118 <strlen>
 80063d0:	b282      	uxth	r2, r0
 80063d2:	4b18      	ldr	r3, [pc, #96]	; (8006434 <snipCommand+0x218>)
 80063d4:	7818      	ldrb	r0, [r3, #0]
 80063d6:	2301      	movs	r3, #1
 80063d8:	425b      	negs	r3, r3
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	3333      	adds	r3, #51	; 0x33
 80063de:	0021      	movs	r1, r4
 80063e0:	f008 fd18 	bl	800ee14 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 80063e4:	4b15      	ldr	r3, [pc, #84]	; (800643c <snipCommand+0x220>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	42bb      	cmp	r3, r7
 80063ea:	d914      	bls.n	8006416 <snipCommand+0x1fa>
 80063ec:	003e      	movs	r6, r7
 80063ee:	3701      	adds	r7, #1
 80063f0:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 80063f2:	46b2      	mov	sl, r6
 80063f4:	00b3      	lsls	r3, r6, #2
 80063f6:	199b      	adds	r3, r3, r6
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4642      	mov	r2, r8
 80063fc:	5c9b      	ldrb	r3, [r3, r2]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d000      	beq.n	8006404 <snipCommand+0x1e8>
 8006402:	e731      	b.n	8006268 <snipCommand+0x4c>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8006404:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <snipCommand+0x228>)
 8006406:	4699      	mov	r9, r3
 8006408:	4653      	mov	r3, sl
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4453      	add	r3, sl
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4e0b      	ldr	r6, [pc, #44]	; (8006440 <snipCommand+0x224>)
 8006412:	18f6      	adds	r6, r6, r3
 8006414:	e7cb      	b.n	80063ae <snipCommand+0x192>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 8006416:	22a7      	movs	r2, #167	; 0xa7
 8006418:	4915      	ldr	r1, [pc, #84]	; (8006470 <snipCommand+0x254>)
 800641a:	0020      	movs	r0, r4
 800641c:	f00d ff78 	bl	8014310 <memcpy>
}
 8006420:	2000      	movs	r0, #0
 8006422:	b00b      	add	sp, #44	; 0x2c
 8006424:	bcf0      	pop	{r4, r5, r6, r7}
 8006426:	46bb      	mov	fp, r7
 8006428:	46b2      	mov	sl, r6
 800642a:	46a9      	mov	r9, r5
 800642c:	46a0      	mov	r8, r4
 800642e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006430:	0801a500 	.word	0x0801a500
 8006434:	20000aa7 	.word	0x20000aa7
 8006438:	0801b2e4 	.word	0x0801b2e4
 800643c:	200011eb 	.word	0x200011eb
 8006440:	20006d34 	.word	0x20006d34
 8006444:	2000121c 	.word	0x2000121c
 8006448:	0801b31c 	.word	0x0801b31c
 800644c:	0801b33c 	.word	0x0801b33c
 8006450:	20000090 	.word	0x20000090
 8006454:	0801cb24 	.word	0x0801cb24
 8006458:	0801b388 	.word	0x0801b388
 800645c:	0801b36c 	.word	0x0801b36c
 8006460:	0801b328 	.word	0x0801b328
 8006464:	0801b354 	.word	0x0801b354
 8006468:	0801b398 	.word	0x0801b398
 800646c:	0801b3a0 	.word	0x0801b3a0
 8006470:	0801b3ac 	.word	0x0801b3ac

08006474 <idcodeCommand>:
{	
 8006474:	b510      	push	{r4, lr}
 8006476:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006478:	d00c      	beq.n	8006494 <idcodeCommand+0x20>
	dev = HAL_GetDEVID();
 800647a:	f00a fe81 	bl	8011180 <HAL_GetDEVID>
	switch (dev)
 800647e:	0403      	lsls	r3, r0, #16
 8006480:	0c1b      	lsrs	r3, r3, #16
 8006482:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <idcodeCommand+0x80>)
 8006484:	4694      	mov	ip, r2
 8006486:	4463      	add	r3, ip
 8006488:	2b08      	cmp	r3, #8
 800648a:	d82c      	bhi.n	80064e6 <idcodeCommand+0x72>
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4a1a      	ldr	r2, [pc, #104]	; (80064f8 <idcodeCommand+0x84>)
 8006490:	58d3      	ldr	r3, [r2, r3]
 8006492:	469f      	mov	pc, r3
	configASSERT( pcWriteBuffer );
 8006494:	b672      	cpsid	i
 8006496:	e7fe      	b.n	8006496 <idcodeCommand+0x22>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 8006498:	4a18      	ldr	r2, [pc, #96]	; (80064fc <idcodeCommand+0x88>)
 800649a:	4919      	ldr	r1, [pc, #100]	; (8006500 <idcodeCommand+0x8c>)
 800649c:	0020      	movs	r0, r4
 800649e:	f00e f935 	bl	801470c <sprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 80064a2:	f00a fe67 	bl	8011174 <HAL_GetREVID>
 80064a6:	0b03      	lsrs	r3, r0, #12
 80064a8:	0022      	movs	r2, r4
 80064aa:	4916      	ldr	r1, [pc, #88]	; (8006504 <idcodeCommand+0x90>)
 80064ac:	0020      	movs	r0, r4
 80064ae:	f00e f92d 	bl	801470c <sprintf>
}
 80064b2:	2000      	movs	r0, #0
 80064b4:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 80064b6:	4a14      	ldr	r2, [pc, #80]	; (8006508 <idcodeCommand+0x94>)
 80064b8:	4911      	ldr	r1, [pc, #68]	; (8006500 <idcodeCommand+0x8c>)
 80064ba:	0020      	movs	r0, r4
 80064bc:	f00e f926 	bl	801470c <sprintf>
  		break;
 80064c0:	e7ef      	b.n	80064a2 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 80064c2:	4a12      	ldr	r2, [pc, #72]	; (800650c <idcodeCommand+0x98>)
 80064c4:	490e      	ldr	r1, [pc, #56]	; (8006500 <idcodeCommand+0x8c>)
 80064c6:	0020      	movs	r0, r4
 80064c8:	f00e f920 	bl	801470c <sprintf>
  		break;
 80064cc:	e7e9      	b.n	80064a2 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 80064ce:	4a10      	ldr	r2, [pc, #64]	; (8006510 <idcodeCommand+0x9c>)
 80064d0:	490b      	ldr	r1, [pc, #44]	; (8006500 <idcodeCommand+0x8c>)
 80064d2:	0020      	movs	r0, r4
 80064d4:	f00e f91a 	bl	801470c <sprintf>
  		break;
 80064d8:	e7e3      	b.n	80064a2 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 80064da:	4a0e      	ldr	r2, [pc, #56]	; (8006514 <idcodeCommand+0xa0>)
 80064dc:	4908      	ldr	r1, [pc, #32]	; (8006500 <idcodeCommand+0x8c>)
 80064de:	0020      	movs	r0, r4
 80064e0:	f00e f914 	bl	801470c <sprintf>
  		break;
 80064e4:	e7dd      	b.n	80064a2 <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 80064e6:	4a0c      	ldr	r2, [pc, #48]	; (8006518 <idcodeCommand+0xa4>)
 80064e8:	4905      	ldr	r1, [pc, #20]	; (8006500 <idcodeCommand+0x8c>)
 80064ea:	0020      	movs	r0, r4
 80064ec:	f00e f90e 	bl	801470c <sprintf>
  		break;
 80064f0:	e7d7      	b.n	80064a2 <idcodeCommand+0x2e>
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	fffffbc0 	.word	0xfffffbc0
 80064f8:	0801b4c4 	.word	0x0801b4c4
 80064fc:	0801b454 	.word	0x0801b454
 8006500:	0801b460 	.word	0x0801b460
 8006504:	0801b4ac 	.word	0x0801b4ac
 8006508:	0801b474 	.word	0x0801b474
 800650c:	0801b480 	.word	0x0801b480
 8006510:	0801b48c 	.word	0x0801b48c
 8006514:	0801b498 	.word	0x0801b498
 8006518:	0801b4a4 	.word	0x0801b4a4

0800651c <uuidCommand>:
{
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006520:	d023      	beq.n	800656a <uuidCommand+0x4e>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 8006522:	220e      	movs	r2, #14
 8006524:	4912      	ldr	r1, [pc, #72]	; (8006570 <uuidCommand+0x54>)
 8006526:	f00d fef3 	bl	8014310 <memcpy>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 800652a:	4b12      	ldr	r3, [pc, #72]	; (8006574 <uuidCommand+0x58>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4d12      	ldr	r5, [pc, #72]	; (8006578 <uuidCommand+0x5c>)
 8006530:	0022      	movs	r2, r4
 8006532:	0029      	movs	r1, r5
 8006534:	0020      	movs	r0, r4
 8006536:	f00e f8e9 	bl	801470c <sprintf>
 800653a:	4b10      	ldr	r3, [pc, #64]	; (800657c <uuidCommand+0x60>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	0022      	movs	r2, r4
 8006540:	0029      	movs	r1, r5
 8006542:	0020      	movs	r0, r4
 8006544:	f00e f8e2 	bl	801470c <sprintf>
 8006548:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <uuidCommand+0x64>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	0022      	movs	r2, r4
 800654e:	0029      	movs	r1, r5
 8006550:	0020      	movs	r0, r4
 8006552:	f00e f8db 	bl	801470c <sprintf>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 8006556:	0020      	movs	r0, r4
 8006558:	f7f9 fdde 	bl	8000118 <strlen>
 800655c:	1820      	adds	r0, r4, r0
 800655e:	2203      	movs	r2, #3
 8006560:	4908      	ldr	r1, [pc, #32]	; (8006584 <uuidCommand+0x68>)
 8006562:	f00d fed5 	bl	8014310 <memcpy>
}
 8006566:	2000      	movs	r0, #0
 8006568:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 800656a:	b672      	cpsid	i
 800656c:	e7fe      	b.n	800656c <uuidCommand+0x50>
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	0801b4e8 	.word	0x0801b4e8
 8006574:	1ffff7ac 	.word	0x1ffff7ac
 8006578:	0801b4f8 	.word	0x0801b4f8
 800657c:	1ffff7b0 	.word	0x1ffff7b0
 8006580:	1ffff7b4 	.word	0x1ffff7b4
 8006584:	0801c174 	.word	0x0801c174

08006588 <timeCommand>:
{
 8006588:	b510      	push	{r4, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800658e:	d00a      	beq.n	80065a6 <timeCommand+0x1e>
	GetTimeDate();
 8006590:	f008 f9da 	bl	800e948 <GetTimeDate>
	if (BOS.hourformat == 24)
 8006594:	4b1c      	ldr	r3, [pc, #112]	; (8006608 <timeCommand+0x80>)
 8006596:	7b5b      	ldrb	r3, [r3, #13]
 8006598:	2b18      	cmp	r3, #24
 800659a:	d006      	beq.n	80065aa <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 800659c:	2b0c      	cmp	r3, #12
 800659e:	d010      	beq.n	80065c2 <timeCommand+0x3a>
}
 80065a0:	2000      	movs	r0, #0
 80065a2:	b004      	add	sp, #16
 80065a4:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80065a6:	b672      	cpsid	i
 80065a8:	e7fe      	b.n	80065a8 <timeCommand+0x20>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 80065aa:	4917      	ldr	r1, [pc, #92]	; (8006608 <timeCommand+0x80>)
 80065ac:	7c4b      	ldrb	r3, [r1, #17]
 80065ae:	7c8a      	ldrb	r2, [r1, #18]
 80065b0:	89c8      	ldrh	r0, [r1, #14]
 80065b2:	9001      	str	r0, [sp, #4]
 80065b4:	7c09      	ldrb	r1, [r1, #16]
 80065b6:	9100      	str	r1, [sp, #0]
 80065b8:	4914      	ldr	r1, [pc, #80]	; (800660c <timeCommand+0x84>)
 80065ba:	0020      	movs	r0, r4
 80065bc:	f00e f8a6 	bl	801470c <sprintf>
 80065c0:	e7ee      	b.n	80065a0 <timeCommand+0x18>
		if (BOS.time.ampm == RTC_AM)
 80065c2:	4b11      	ldr	r3, [pc, #68]	; (8006608 <timeCommand+0x80>)
 80065c4:	7cdb      	ldrb	r3, [r3, #19]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d00f      	beq.n	80065ea <timeCommand+0x62>
		else if (BOS.time.ampm == RTC_PM)
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d1e8      	bne.n	80065a0 <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 80065ce:	490e      	ldr	r1, [pc, #56]	; (8006608 <timeCommand+0x80>)
 80065d0:	7c4b      	ldrb	r3, [r1, #17]
 80065d2:	7c8a      	ldrb	r2, [r1, #18]
 80065d4:	480e      	ldr	r0, [pc, #56]	; (8006610 <timeCommand+0x88>)
 80065d6:	9002      	str	r0, [sp, #8]
 80065d8:	89c8      	ldrh	r0, [r1, #14]
 80065da:	9001      	str	r0, [sp, #4]
 80065dc:	7c09      	ldrb	r1, [r1, #16]
 80065de:	9100      	str	r1, [sp, #0]
 80065e0:	490c      	ldr	r1, [pc, #48]	; (8006614 <timeCommand+0x8c>)
 80065e2:	0020      	movs	r0, r4
 80065e4:	f00e f892 	bl	801470c <sprintf>
 80065e8:	e7da      	b.n	80065a0 <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 80065ea:	4907      	ldr	r1, [pc, #28]	; (8006608 <timeCommand+0x80>)
 80065ec:	7c4b      	ldrb	r3, [r1, #17]
 80065ee:	7c8a      	ldrb	r2, [r1, #18]
 80065f0:	4809      	ldr	r0, [pc, #36]	; (8006618 <timeCommand+0x90>)
 80065f2:	9002      	str	r0, [sp, #8]
 80065f4:	89c8      	ldrh	r0, [r1, #14]
 80065f6:	9001      	str	r0, [sp, #4]
 80065f8:	7c09      	ldrb	r1, [r1, #16]
 80065fa:	9100      	str	r1, [sp, #0]
 80065fc:	4905      	ldr	r1, [pc, #20]	; (8006614 <timeCommand+0x8c>)
 80065fe:	0020      	movs	r0, r4
 8006600:	f00e f884 	bl	801470c <sprintf>
 8006604:	e7cc      	b.n	80065a0 <timeCommand+0x18>
 8006606:	46c0      	nop			; (mov r8, r8)
 8006608:	20006d18 	.word	0x20006d18
 800660c:	0801b500 	.word	0x0801b500
 8006610:	0801b558 	.word	0x0801b558
 8006614:	0801b528 	.word	0x0801b528
 8006618:	0801b554 	.word	0x0801b554

0800661c <dateCommand>:
{
 800661c:	b510      	push	{r4, lr}
 800661e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006620:	d00a      	beq.n	8006638 <dateCommand+0x1c>
	GetTimeDate();
 8006622:	f008 f991 	bl	800e948 <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 8006626:	f7fe fbc5 	bl	8004db4 <GetDateString>
 800662a:	0002      	movs	r2, r0
 800662c:	4903      	ldr	r1, [pc, #12]	; (800663c <dateCommand+0x20>)
 800662e:	0020      	movs	r0, r4
 8006630:	f00e f86c 	bl	801470c <sprintf>
}
 8006634:	2000      	movs	r0, #0
 8006636:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8006638:	b672      	cpsid	i
 800663a:	e7fe      	b.n	800663a <dateCommand+0x1e>
 800663c:	0801b55c 	.word	0x0801b55c

08006640 <getCommand>:
{
 8006640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006642:	46c6      	mov	lr, r8
 8006644:	b500      	push	{lr}
 8006646:	b082      	sub	sp, #8
 8006648:	0004      	movs	r4, r0
 800664a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8006652:	2800      	cmp	r0, #0
 8006654:	d026      	beq.n	80066a4 <getCommand+0x64>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006656:	aa01      	add	r2, sp, #4
 8006658:	2101      	movs	r1, #1
 800665a:	0028      	movs	r0, r5
 800665c:	f008 fe30 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8006660:	0006      	movs	r6, r0
 8006662:	4b74      	ldr	r3, [pc, #464]	; (8006834 <getCommand+0x1f4>)
 8006664:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 8006666:	2204      	movs	r2, #4
 8006668:	4973      	ldr	r1, [pc, #460]	; (8006838 <getCommand+0x1f8>)
 800666a:	f00e f892 	bl	8014792 <strncmp>
 800666e:	2800      	cmp	r0, #0
 8006670:	d000      	beq.n	8006674 <getCommand+0x34>
 8006672:	e092      	b.n	800679a <getCommand+0x15a>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8006674:	1d37      	adds	r7, r6, #4
 8006676:	9b01      	ldr	r3, [sp, #4]
 8006678:	1f1d      	subs	r5, r3, #4
 800667a:	002a      	movs	r2, r5
 800667c:	496f      	ldr	r1, [pc, #444]	; (800683c <getCommand+0x1fc>)
 800667e:	0038      	movs	r0, r7
 8006680:	f00e f887 	bl	8014792 <strncmp>
 8006684:	2800      	cmp	r0, #0
 8006686:	d121      	bne.n	80066cc <getCommand+0x8c>
			if (BOS.response == BOS_RESPONSE_ALL)
 8006688:	4b6d      	ldr	r3, [pc, #436]	; (8006840 <getCommand+0x200>)
 800668a:	799b      	ldrb	r3, [r3, #6]
 800668c:	2b60      	cmp	r3, #96	; 0x60
 800668e:	d00b      	beq.n	80066a8 <getCommand+0x68>
			else if (BOS.response == BOS_RESPONSE_MSG)
 8006690:	2b20      	cmp	r3, #32
 8006692:	d00f      	beq.n	80066b4 <getCommand+0x74>
			else if (BOS.response == BOS_RESPONSE_NONE)
 8006694:	2b00      	cmp	r3, #0
 8006696:	d013      	beq.n	80066c0 <getCommand+0x80>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 8006698:	0032      	movs	r2, r6
 800669a:	496a      	ldr	r1, [pc, #424]	; (8006844 <getCommand+0x204>)
 800669c:	0020      	movs	r0, r4
 800669e:	f00e f835 	bl	801470c <sprintf>
 80066a2:	e086      	b.n	80067b2 <getCommand+0x172>
	configASSERT( pcWriteBuffer );
 80066a4:	b672      	cpsid	i
 80066a6:	e7fe      	b.n	80066a6 <getCommand+0x66>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80066a8:	4a67      	ldr	r2, [pc, #412]	; (8006848 <getCommand+0x208>)
 80066aa:	4968      	ldr	r1, [pc, #416]	; (800684c <getCommand+0x20c>)
 80066ac:	0020      	movs	r0, r4
 80066ae:	f00e f82d 	bl	801470c <sprintf>
	if (result == BOS_ERR_WrongParam)
 80066b2:	e07e      	b.n	80067b2 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 80066b4:	4a66      	ldr	r2, [pc, #408]	; (8006850 <getCommand+0x210>)
 80066b6:	4965      	ldr	r1, [pc, #404]	; (800684c <getCommand+0x20c>)
 80066b8:	0020      	movs	r0, r4
 80066ba:	f00e f827 	bl	801470c <sprintf>
	if (result == BOS_ERR_WrongParam)
 80066be:	e078      	b.n	80067b2 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 80066c0:	4a64      	ldr	r2, [pc, #400]	; (8006854 <getCommand+0x214>)
 80066c2:	4962      	ldr	r1, [pc, #392]	; (800684c <getCommand+0x20c>)
 80066c4:	0020      	movs	r0, r4
 80066c6:	f00e f821 	bl	801470c <sprintf>
	if (result == BOS_ERR_WrongParam)
 80066ca:	e072      	b.n	80067b2 <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 80066cc:	002a      	movs	r2, r5
 80066ce:	4962      	ldr	r1, [pc, #392]	; (8006858 <getCommand+0x218>)
 80066d0:	0038      	movs	r0, r7
 80066d2:	f00e f85e 	bl	8014792 <strncmp>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d119      	bne.n	800670e <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 80066da:	4b59      	ldr	r3, [pc, #356]	; (8006840 <getCommand+0x200>)
 80066dc:	79db      	ldrb	r3, [r3, #7]
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d009      	beq.n	80066f6 <getCommand+0xb6>
			else if (BOS.trace == TRACE_MESSAGE)
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d00d      	beq.n	8006702 <getCommand+0xc2>
			else if (BOS.trace == TRACE_NONE)
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1d6      	bne.n	8006698 <getCommand+0x58>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 80066ea:	4a5a      	ldr	r2, [pc, #360]	; (8006854 <getCommand+0x214>)
 80066ec:	4957      	ldr	r1, [pc, #348]	; (800684c <getCommand+0x20c>)
 80066ee:	0020      	movs	r0, r4
 80066f0:	f00e f80c 	bl	801470c <sprintf>
	if (result == BOS_ERR_WrongParam)
 80066f4:	e05d      	b.n	80067b2 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80066f6:	4a54      	ldr	r2, [pc, #336]	; (8006848 <getCommand+0x208>)
 80066f8:	4954      	ldr	r1, [pc, #336]	; (800684c <getCommand+0x20c>)
 80066fa:	0020      	movs	r0, r4
 80066fc:	f00e f806 	bl	801470c <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006700:	e057      	b.n	80067b2 <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8006702:	4a53      	ldr	r2, [pc, #332]	; (8006850 <getCommand+0x210>)
 8006704:	4951      	ldr	r1, [pc, #324]	; (800684c <getCommand+0x20c>)
 8006706:	0020      	movs	r0, r4
 8006708:	f00e f800 	bl	801470c <sprintf>
	if (result == BOS_ERR_WrongParam)
 800670c:	e051      	b.n	80067b2 <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 800670e:	002a      	movs	r2, r5
 8006710:	4952      	ldr	r1, [pc, #328]	; (800685c <getCommand+0x21c>)
 8006712:	0038      	movs	r0, r7
 8006714:	f00e f83d 	bl	8014792 <strncmp>
 8006718:	2800      	cmp	r0, #0
 800671a:	d022      	beq.n	8006762 <getCommand+0x122>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 800671c:	002a      	movs	r2, r5
 800671e:	4950      	ldr	r1, [pc, #320]	; (8006860 <getCommand+0x220>)
 8006720:	0038      	movs	r0, r7
 8006722:	f00e f836 	bl	8014792 <strncmp>
 8006726:	2800      	cmp	r0, #0
 8006728:	d022      	beq.n	8006770 <getCommand+0x130>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 800672a:	002a      	movs	r2, r5
 800672c:	494d      	ldr	r1, [pc, #308]	; (8006864 <getCommand+0x224>)
 800672e:	0038      	movs	r0, r7
 8006730:	f00e f82f 	bl	8014792 <strncmp>
 8006734:	2800      	cmp	r0, #0
 8006736:	d022      	beq.n	800677e <getCommand+0x13e>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8006738:	002a      	movs	r2, r5
 800673a:	494b      	ldr	r1, [pc, #300]	; (8006868 <getCommand+0x228>)
 800673c:	0038      	movs	r0, r7
 800673e:	f00e f828 	bl	8014792 <strncmp>
 8006742:	2800      	cmp	r0, #0
 8006744:	d022      	beq.n	800678c <getCommand+0x14c>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8006746:	002a      	movs	r2, r5
 8006748:	4948      	ldr	r1, [pc, #288]	; (800686c <getCommand+0x22c>)
 800674a:	0038      	movs	r0, r7
 800674c:	f00e f821 	bl	8014792 <strncmp>
 8006750:	2800      	cmp	r0, #0
 8006752:	d129      	bne.n	80067a8 <getCommand+0x168>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 8006754:	4b3a      	ldr	r3, [pc, #232]	; (8006840 <getCommand+0x200>)
 8006756:	795a      	ldrb	r2, [r3, #5]
 8006758:	4945      	ldr	r1, [pc, #276]	; (8006870 <getCommand+0x230>)
 800675a:	0020      	movs	r0, r4
 800675c:	f00d ffd6 	bl	801470c <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006760:	e027      	b.n	80067b2 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 8006762:	4b37      	ldr	r3, [pc, #220]	; (8006840 <getCommand+0x200>)
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	4942      	ldr	r1, [pc, #264]	; (8006870 <getCommand+0x230>)
 8006768:	0020      	movs	r0, r4
 800676a:	f00d ffcf 	bl	801470c <sprintf>
	if (result == BOS_ERR_WrongParam)
 800676e:	e020      	b.n	80067b2 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8006770:	4b33      	ldr	r3, [pc, #204]	; (8006840 <getCommand+0x200>)
 8006772:	881a      	ldrh	r2, [r3, #0]
 8006774:	493e      	ldr	r1, [pc, #248]	; (8006870 <getCommand+0x230>)
 8006776:	0020      	movs	r0, r4
 8006778:	f00d ffc8 	bl	801470c <sprintf>
	if (result == BOS_ERR_WrongParam)
 800677c:	e019      	b.n	80067b2 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 800677e:	4b30      	ldr	r3, [pc, #192]	; (8006840 <getCommand+0x200>)
 8006780:	885a      	ldrh	r2, [r3, #2]
 8006782:	493b      	ldr	r1, [pc, #236]	; (8006870 <getCommand+0x230>)
 8006784:	0020      	movs	r0, r4
 8006786:	f00d ffc1 	bl	801470c <sprintf>
	if (result == BOS_ERR_WrongParam)
 800678a:	e012      	b.n	80067b2 <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 800678c:	4b2c      	ldr	r3, [pc, #176]	; (8006840 <getCommand+0x200>)
 800678e:	791a      	ldrb	r2, [r3, #4]
 8006790:	4937      	ldr	r1, [pc, #220]	; (8006870 <getCommand+0x230>)
 8006792:	0020      	movs	r0, r4
 8006794:	f00d ffba 	bl	801470c <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006798:	e00b      	b.n	80067b2 <getCommand+0x172>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 800679a:	2205      	movs	r2, #5
 800679c:	4935      	ldr	r1, [pc, #212]	; (8006874 <getCommand+0x234>)
 800679e:	0030      	movs	r0, r6
 80067a0:	f00d fff7 	bl	8014792 <strncmp>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d009      	beq.n	80067bc <getCommand+0x17c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 80067a8:	2213      	movs	r2, #19
 80067aa:	4933      	ldr	r1, [pc, #204]	; (8006878 <getCommand+0x238>)
 80067ac:	0020      	movs	r0, r4
 80067ae:	f00d fdaf 	bl	8014310 <memcpy>
}
 80067b2:	2000      	movs	r0, #0
 80067b4:	b002      	add	sp, #8
 80067b6:	bc80      	pop	{r7}
 80067b8:	46b8      	mov	r8, r7
 80067ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80067bc:	466a      	mov	r2, sp
 80067be:	2102      	movs	r1, #2
 80067c0:	0028      	movs	r0, r5
 80067c2:	f008 fd7d 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 80067c6:	0006      	movs	r6, r0
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80067c8:	4f2c      	ldr	r7, [pc, #176]	; (800687c <getCommand+0x23c>)
 80067ca:	2500      	movs	r5, #0
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 80067cc:	0039      	movs	r1, r7
 80067ce:	0030      	movs	r0, r6
 80067d0:	f7f9 fc98 	bl	8000104 <strcmp>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d01c      	beq.n	8006812 <getCommand+0x1d2>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80067d8:	3501      	adds	r5, #1
 80067da:	b2ed      	uxtb	r5, r5
 80067dc:	370a      	adds	r7, #10
 80067de:	2d0a      	cmp	r5, #10
 80067e0:	d1f4      	bne.n	80067cc <getCommand+0x18c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 80067e2:	0032      	movs	r2, r6
 80067e4:	4926      	ldr	r1, [pc, #152]	; (8006880 <getCommand+0x240>)
 80067e6:	0020      	movs	r0, r4
 80067e8:	f00d ff90 	bl	801470c <sprintf>
			return pdFALSE;
 80067ec:	e7e1      	b.n	80067b2 <getCommand+0x172>
			for(j=1 ; j<=N ; j++)						// N modules
 80067ee:	3501      	adds	r5, #1
 80067f0:	b2ed      	uxtb	r5, r5
 80067f2:	783b      	ldrb	r3, [r7, #0]
 80067f4:	42ab      	cmp	r3, r5
 80067f6:	d3dc      	bcc.n	80067b2 <getCommand+0x172>
				if (InGroup(j, i))
 80067f8:	1e6b      	subs	r3, r5, #1
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	4642      	mov	r2, r8
 80067fe:	5a9b      	ldrh	r3, [r3, r2]
 8006800:	421e      	tst	r6, r3
 8006802:	d0f4      	beq.n	80067ee <getCommand+0x1ae>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 8006804:	002b      	movs	r3, r5
 8006806:	0022      	movs	r2, r4
 8006808:	491e      	ldr	r1, [pc, #120]	; (8006884 <getCommand+0x244>)
 800680a:	0020      	movs	r0, r4
 800680c:	f00d ff7e 	bl	801470c <sprintf>
 8006810:	e7ed      	b.n	80067ee <getCommand+0x1ae>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 8006812:	0032      	movs	r2, r6
 8006814:	491c      	ldr	r1, [pc, #112]	; (8006888 <getCommand+0x248>)
 8006816:	0020      	movs	r0, r4
 8006818:	f00d ff78 	bl	801470c <sprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 800681c:	4b1b      	ldr	r3, [pc, #108]	; (800688c <getCommand+0x24c>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0c6      	beq.n	80067b2 <getCommand+0x172>
 8006824:	2601      	movs	r6, #1
 8006826:	40ae      	lsls	r6, r5
 8006828:	2501      	movs	r5, #1
				if (InGroup(j, i))
 800682a:	4b19      	ldr	r3, [pc, #100]	; (8006890 <getCommand+0x250>)
 800682c:	4698      	mov	r8, r3
			for(j=1 ; j<=N ; j++)						// N modules
 800682e:	4f17      	ldr	r7, [pc, #92]	; (800688c <getCommand+0x24c>)
 8006830:	e7e2      	b.n	80067f8 <getCommand+0x1b8>
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	20001260 	.word	0x20001260
 8006838:	0801b574 	.word	0x0801b574
 800683c:	0801b57c 	.word	0x0801b57c
 8006840:	20006d18 	.word	0x20006d18
 8006844:	0801b610 	.word	0x0801b610
 8006848:	0801a8c0 	.word	0x0801a8c0
 800684c:	0801a788 	.word	0x0801a788
 8006850:	0801b588 	.word	0x0801b588
 8006854:	0801b58c 	.word	0x0801b58c
 8006858:	0801b594 	.word	0x0801b594
 800685c:	0801b59c 	.word	0x0801b59c
 8006860:	0801b5a8 	.word	0x0801b5a8
 8006864:	0801b5b4 	.word	0x0801b5b4
 8006868:	0801b5c4 	.word	0x0801b5c4
 800686c:	0801b5d8 	.word	0x0801b5d8
 8006870:	0801ad50 	.word	0x0801ad50
 8006874:	0801b5ec 	.word	0x0801b5ec
 8006878:	0801b5fc 	.word	0x0801b5fc
 800687c:	20000e3c 	.word	0x20000e3c
 8006880:	0801b630 	.word	0x0801b630
 8006884:	0801b5f4 	.word	0x0801b5f4
 8006888:	0801b64c 	.word	0x0801b64c
 800688c:	2000001c 	.word	0x2000001c
 8006890:	20000ea0 	.word	0x20000ea0

08006894 <defaultCommand>:
{
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	0004      	movs	r4, r0
 800689a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80068a0:	2c00      	cmp	r4, #0
 80068a2:	d01a      	beq.n	80068da <defaultCommand+0x46>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80068a4:	aa01      	add	r2, sp, #4
 80068a6:	2101      	movs	r1, #1
 80068a8:	f008 fd0a 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 80068ac:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 80068ae:	9e01      	ldr	r6, [sp, #4]
 80068b0:	0032      	movs	r2, r6
 80068b2:	491f      	ldr	r1, [pc, #124]	; (8006930 <defaultCommand+0x9c>)
 80068b4:	f00d ff6d 	bl	8014792 <strncmp>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d010      	beq.n	80068de <defaultCommand+0x4a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 80068bc:	0032      	movs	r2, r6
 80068be:	491d      	ldr	r1, [pc, #116]	; (8006934 <defaultCommand+0xa0>)
 80068c0:	0028      	movs	r0, r5
 80068c2:	f00d ff66 	bl	8014792 <strncmp>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d01a      	beq.n	8006900 <defaultCommand+0x6c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 80068ca:	220f      	movs	r2, #15
 80068cc:	491a      	ldr	r1, [pc, #104]	; (8006938 <defaultCommand+0xa4>)
 80068ce:	0020      	movs	r0, r4
 80068d0:	f00d fd1e 	bl	8014310 <memcpy>
}
 80068d4:	2000      	movs	r0, #0
 80068d6:	b002      	add	sp, #8
 80068d8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 80068da:	b672      	cpsid	i
 80068dc:	e7fe      	b.n	80068dc <defaultCommand+0x48>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 80068de:	4917      	ldr	r1, [pc, #92]	; (800693c <defaultCommand+0xa8>)
 80068e0:	4b17      	ldr	r3, [pc, #92]	; (8006940 <defaultCommand+0xac>)
 80068e2:	000a      	movs	r2, r1
 80068e4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80068e6:	c223      	stmia	r2!, {r0, r1, r5}
 80068e8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80068ea:	c223      	stmia	r2!, {r0, r1, r5}
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 80068f0:	f7fd f998 	bl	8003c24 <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 80068f4:	2227      	movs	r2, #39	; 0x27
 80068f6:	4913      	ldr	r1, [pc, #76]	; (8006944 <defaultCommand+0xb0>)
 80068f8:	0020      	movs	r0, r4
 80068fa:	f00d fd09 	bl	8014310 <memcpy>
	if (result == BOS_ERR_WrongValue)
 80068fe:	e7e9      	b.n	80068d4 <defaultCommand+0x40>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 8006900:	2200      	movs	r2, #0
 8006902:	2116      	movs	r1, #22
 8006904:	20ff      	movs	r0, #255	; 0xff
 8006906:	f002 ff7b 	bl	8009800 <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 800690a:	4b0f      	ldr	r3, [pc, #60]	; (8006948 <defaultCommand+0xb4>)
 800690c:	2202      	movs	r2, #2
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	2064      	movs	r0, #100	; 0x64
 8006912:	f008 fbae 	bl	800f072 <osDelay>
		ClearEEportsDir();
 8006916:	f7fc fecd 	bl	80036b4 <ClearEEportsDir>
		ClearROtopology();
 800691a:	f005 f857 	bl	800b9cc <ClearROtopology>
		osDelay(100);
 800691e:	2064      	movs	r0, #100	; 0x64
 8006920:	f008 fba7 	bl	800f072 <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 8006924:	2240      	movs	r2, #64	; 0x40
 8006926:	4909      	ldr	r1, [pc, #36]	; (800694c <defaultCommand+0xb8>)
 8006928:	0020      	movs	r0, r4
 800692a:	f00d fcf1 	bl	8014310 <memcpy>
	if (result == BOS_ERR_WrongValue)
 800692e:	e7d1      	b.n	80068d4 <defaultCommand+0x40>
 8006930:	0801b660 	.word	0x0801b660
 8006934:	0801b690 	.word	0x0801b690
 8006938:	0801b698 	.word	0x0801b698
 800693c:	20006d18 	.word	0x20006d18
 8006940:	20000000 	.word	0x20000000
 8006944:	0801b668 	.word	0x0801b668
 8006948:	20000ed2 	.word	0x20000ed2
 800694c:	0801b6a8 	.word	0x0801b6a8

08006950 <setCommand>:
{
 8006950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006952:	46d6      	mov	lr, sl
 8006954:	464f      	mov	r7, r9
 8006956:	4646      	mov	r6, r8
 8006958:	b5c0      	push	{r6, r7, lr}
 800695a:	b08e      	sub	sp, #56	; 0x38
 800695c:	4682      	mov	sl, r0
 800695e:	0014      	movs	r4, r2
 8006960:	2700      	movs	r7, #0
 8006962:	2600      	movs	r6, #0
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 8006964:	970d      	str	r7, [sp, #52]	; 0x34
 8006966:	970c      	str	r7, [sp, #48]	; 0x30
 8006968:	970b      	str	r7, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 800696a:	970a      	str	r7, [sp, #40]	; 0x28
 800696c:	9709      	str	r7, [sp, #36]	; 0x24
	configASSERT( pcWriteBuffer );
 800696e:	2800      	cmp	r0, #0
 8006970:	d023      	beq.n	80069ba <setCommand+0x6a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006972:	aa0d      	add	r2, sp, #52	; 0x34
 8006974:	2101      	movs	r1, #1
 8006976:	0020      	movs	r0, r4
 8006978:	f008 fca2 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800697c:	0005      	movs	r5, r0
 800697e:	4bd6      	ldr	r3, [pc, #856]	; (8006cd8 <setCommand+0x388>)
 8006980:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 8006982:	2204      	movs	r2, #4
 8006984:	49d5      	ldr	r1, [pc, #852]	; (8006cdc <setCommand+0x38c>)
 8006986:	f00d ff04 	bl	8014792 <strncmp>
 800698a:	2800      	cmp	r0, #0
 800698c:	d017      	beq.n	80069be <setCommand+0x6e>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 800698e:	2204      	movs	r2, #4
 8006990:	49d3      	ldr	r1, [pc, #844]	; (8006ce0 <setCommand+0x390>)
 8006992:	0028      	movs	r0, r5
 8006994:	f00d fefd 	bl	8014792 <strncmp>
 8006998:	2800      	cmp	r0, #0
 800699a:	d100      	bne.n	800699e <setCommand+0x4e>
 800699c:	e15b      	b.n	8006c56 <setCommand+0x306>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 800699e:	2204      	movs	r2, #4
 80069a0:	49d0      	ldr	r1, [pc, #832]	; (8006ce4 <setCommand+0x394>)
 80069a2:	0028      	movs	r0, r5
 80069a4:	f00d fef5 	bl	8014792 <strncmp>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d100      	bne.n	80069ae <setCommand+0x5e>
 80069ac:	e1f8      	b.n	8006da0 <setCommand+0x450>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 80069ae:	2213      	movs	r2, #19
 80069b0:	49cd      	ldr	r1, [pc, #820]	; (8006ce8 <setCommand+0x398>)
 80069b2:	4650      	mov	r0, sl
 80069b4:	f00d fcac 	bl	8014310 <memcpy>
 80069b8:	e33c      	b.n	8007034 <setCommand+0x6e4>
	configASSERT( pcWriteBuffer );
 80069ba:	b672      	cpsid	i
 80069bc:	e7fe      	b.n	80069bc <setCommand+0x6c>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80069be:	aa0c      	add	r2, sp, #48	; 0x30
 80069c0:	2102      	movs	r1, #2
 80069c2:	0020      	movs	r0, r4
 80069c4:	f008 fc7c 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 80069c8:	0004      	movs	r4, r0
 80069ca:	4bc8      	ldr	r3, [pc, #800]	; (8006cec <setCommand+0x39c>)
 80069cc:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 80069ce:	4bc2      	ldr	r3, [pc, #776]	; (8006cd8 <setCommand+0x388>)
 80069d0:	681d      	ldr	r5, [r3, #0]
 80069d2:	3504      	adds	r5, #4
 80069d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069d6:	1f1e      	subs	r6, r3, #4
 80069d8:	0032      	movs	r2, r6
 80069da:	49c5      	ldr	r1, [pc, #788]	; (8006cf0 <setCommand+0x3a0>)
 80069dc:	0028      	movs	r0, r5
 80069de:	f00d fed8 	bl	8014792 <strncmp>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d150      	bne.n	8006a88 <setCommand+0x138>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 80069e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069e8:	002a      	movs	r2, r5
 80069ea:	49c2      	ldr	r1, [pc, #776]	; (8006cf4 <setCommand+0x3a4>)
 80069ec:	0020      	movs	r0, r4
 80069ee:	f00d fed0 	bl	8014792 <strncmp>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d01a      	beq.n	8006a2c <setCommand+0xdc>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 80069f6:	002a      	movs	r2, r5
 80069f8:	49bf      	ldr	r1, [pc, #764]	; (8006cf8 <setCommand+0x3a8>)
 80069fa:	0020      	movs	r0, r4
 80069fc:	f00d fec9 	bl	8014792 <strncmp>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d01f      	beq.n	8006a44 <setCommand+0xf4>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 8006a04:	002a      	movs	r2, r5
 8006a06:	49bd      	ldr	r1, [pc, #756]	; (8006cfc <setCommand+0x3ac>)
 8006a08:	0020      	movs	r0, r4
 8006a0a:	f00d fec2 	bl	8014792 <strncmp>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d024      	beq.n	8006a5c <setCommand+0x10c>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8006a12:	002a      	movs	r2, r5
 8006a14:	49ba      	ldr	r1, [pc, #744]	; (8006d00 <setCommand+0x3b0>)
 8006a16:	0020      	movs	r0, r4
 8006a18:	f00d febb 	bl	8014792 <strncmp>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d029      	beq.n	8006a74 <setCommand+0x124>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8006a20:	220f      	movs	r2, #15
 8006a22:	49b8      	ldr	r1, [pc, #736]	; (8006d04 <setCommand+0x3b4>)
 8006a24:	4650      	mov	r0, sl
 8006a26:	f00d fc73 	bl	8014310 <memcpy>
 8006a2a:	e303      	b.n	8007034 <setCommand+0x6e4>
				BOS.response = BOS_RESPONSE_ALL;
 8006a2c:	4bb6      	ldr	r3, [pc, #728]	; (8006d08 <setCommand+0x3b8>)
 8006a2e:	2260      	movs	r2, #96	; 0x60
 8006a30:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006a32:	79d9      	ldrb	r1, [r3, #7]
 8006a34:	0209      	lsls	r1, r1, #8
 8006a36:	2360      	movs	r3, #96	; 0x60
 8006a38:	4319      	orrs	r1, r3
 8006a3a:	308a      	adds	r0, #138	; 0x8a
 8006a3c:	0040      	lsls	r0, r0, #1
 8006a3e:	f001 f9db 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006a42:	e1a1      	b.n	8006d88 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_MSG;
 8006a44:	4bb0      	ldr	r3, [pc, #704]	; (8006d08 <setCommand+0x3b8>)
 8006a46:	2220      	movs	r2, #32
 8006a48:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006a4a:	79d9      	ldrb	r1, [r3, #7]
 8006a4c:	0209      	lsls	r1, r1, #8
 8006a4e:	2320      	movs	r3, #32
 8006a50:	4319      	orrs	r1, r3
 8006a52:	308a      	adds	r0, #138	; 0x8a
 8006a54:	0040      	lsls	r0, r0, #1
 8006a56:	f001 f9cf 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006a5a:	e195      	b.n	8006d88 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_CLI;
 8006a5c:	4baa      	ldr	r3, [pc, #680]	; (8006d08 <setCommand+0x3b8>)
 8006a5e:	2240      	movs	r2, #64	; 0x40
 8006a60:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006a62:	79d9      	ldrb	r1, [r3, #7]
 8006a64:	0209      	lsls	r1, r1, #8
 8006a66:	2340      	movs	r3, #64	; 0x40
 8006a68:	4319      	orrs	r1, r3
 8006a6a:	308a      	adds	r0, #138	; 0x8a
 8006a6c:	0040      	lsls	r0, r0, #1
 8006a6e:	f001 f9c3 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006a72:	e189      	b.n	8006d88 <setCommand+0x438>
				BOS.response = BOS_RESPONSE_NONE;
 8006a74:	4ba4      	ldr	r3, [pc, #656]	; (8006d08 <setCommand+0x3b8>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006a7a:	79d9      	ldrb	r1, [r3, #7]
 8006a7c:	0209      	lsls	r1, r1, #8
 8006a7e:	308a      	adds	r0, #138	; 0x8a
 8006a80:	0040      	lsls	r0, r0, #1
 8006a82:	f001 f9b9 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006a86:	e17f      	b.n	8006d88 <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8006a88:	0032      	movs	r2, r6
 8006a8a:	49a0      	ldr	r1, [pc, #640]	; (8006d0c <setCommand+0x3bc>)
 8006a8c:	0028      	movs	r0, r5
 8006a8e:	f00d fe80 	bl	8014792 <strncmp>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d149      	bne.n	8006b2a <setCommand+0x1da>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8006a96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a98:	002a      	movs	r2, r5
 8006a9a:	4996      	ldr	r1, [pc, #600]	; (8006cf4 <setCommand+0x3a4>)
 8006a9c:	0020      	movs	r0, r4
 8006a9e:	f00d fe78 	bl	8014792 <strncmp>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d01d      	beq.n	8006ae2 <setCommand+0x192>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 8006aa6:	002a      	movs	r2, r5
 8006aa8:	4993      	ldr	r1, [pc, #588]	; (8006cf8 <setCommand+0x3a8>)
 8006aaa:	0020      	movs	r0, r4
 8006aac:	f00d fe71 	bl	8014792 <strncmp>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d022      	beq.n	8006afa <setCommand+0x1aa>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 8006ab4:	002a      	movs	r2, r5
 8006ab6:	498e      	ldr	r1, [pc, #568]	; (8006cf0 <setCommand+0x3a0>)
 8006ab8:	0020      	movs	r0, r4
 8006aba:	f00d fe6a 	bl	8014792 <strncmp>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d027      	beq.n	8006b12 <setCommand+0x1c2>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8006ac2:	002a      	movs	r2, r5
 8006ac4:	498e      	ldr	r1, [pc, #568]	; (8006d00 <setCommand+0x3b0>)
 8006ac6:	0020      	movs	r0, r4
 8006ac8:	f00d fe63 	bl	8014792 <strncmp>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d1a7      	bne.n	8006a20 <setCommand+0xd0>
				BOS.trace = TRACE_NONE;
 8006ad0:	4b8d      	ldr	r3, [pc, #564]	; (8006d08 <setCommand+0x3b8>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006ad6:	7999      	ldrb	r1, [r3, #6]
 8006ad8:	308a      	adds	r0, #138	; 0x8a
 8006ada:	0040      	lsls	r0, r0, #1
 8006adc:	f001 f98c 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006ae0:	e152      	b.n	8006d88 <setCommand+0x438>
				BOS.trace = TRACE_BOTH;
 8006ae2:	4b89      	ldr	r3, [pc, #548]	; (8006d08 <setCommand+0x3b8>)
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006ae8:	799b      	ldrb	r3, [r3, #6]
 8006aea:	21c0      	movs	r1, #192	; 0xc0
 8006aec:	0089      	lsls	r1, r1, #2
 8006aee:	4319      	orrs	r1, r3
 8006af0:	308a      	adds	r0, #138	; 0x8a
 8006af2:	0040      	lsls	r0, r0, #1
 8006af4:	f001 f980 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006af8:	e146      	b.n	8006d88 <setCommand+0x438>
				BOS.trace = TRACE_MESSAGE;
 8006afa:	4b83      	ldr	r3, [pc, #524]	; (8006d08 <setCommand+0x3b8>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006b00:	799b      	ldrb	r3, [r3, #6]
 8006b02:	2180      	movs	r1, #128	; 0x80
 8006b04:	0049      	lsls	r1, r1, #1
 8006b06:	4319      	orrs	r1, r3
 8006b08:	308a      	adds	r0, #138	; 0x8a
 8006b0a:	0040      	lsls	r0, r0, #1
 8006b0c:	f001 f974 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006b10:	e13a      	b.n	8006d88 <setCommand+0x438>
				BOS.trace = TRACE_RESPONSE;
 8006b12:	4b7d      	ldr	r3, [pc, #500]	; (8006d08 <setCommand+0x3b8>)
 8006b14:	2202      	movs	r2, #2
 8006b16:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006b18:	799b      	ldrb	r3, [r3, #6]
 8006b1a:	2180      	movs	r1, #128	; 0x80
 8006b1c:	0089      	lsls	r1, r1, #2
 8006b1e:	4319      	orrs	r1, r3
 8006b20:	308a      	adds	r0, #138	; 0x8a
 8006b22:	0040      	lsls	r0, r0, #1
 8006b24:	f001 f968 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006b28:	e12e      	b.n	8006d88 <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8006b2a:	0032      	movs	r2, r6
 8006b2c:	4978      	ldr	r1, [pc, #480]	; (8006d10 <setCommand+0x3c0>)
 8006b2e:	0028      	movs	r0, r5
 8006b30:	f00d fe2f 	bl	8014792 <strncmp>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d02f      	beq.n	8006b98 <setCommand+0x248>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8006b38:	0032      	movs	r2, r6
 8006b3a:	4976      	ldr	r1, [pc, #472]	; (8006d14 <setCommand+0x3c4>)
 8006b3c:	0028      	movs	r0, r5
 8006b3e:	f00d fe28 	bl	8014792 <strncmp>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d058      	beq.n	8006bf8 <setCommand+0x2a8>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8006b46:	0032      	movs	r2, r6
 8006b48:	4973      	ldr	r1, [pc, #460]	; (8006d18 <setCommand+0x3c8>)
 8006b4a:	0028      	movs	r0, r5
 8006b4c:	f00d fe21 	bl	8014792 <strncmp>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d05f      	beq.n	8006c14 <setCommand+0x2c4>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8006b54:	0032      	movs	r2, r6
 8006b56:	4971      	ldr	r1, [pc, #452]	; (8006d1c <setCommand+0x3cc>)
 8006b58:	0028      	movs	r0, r5
 8006b5a:	f00d fe1a 	bl	8014792 <strncmp>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d066      	beq.n	8006c30 <setCommand+0x2e0>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8006b62:	0032      	movs	r2, r6
 8006b64:	496e      	ldr	r1, [pc, #440]	; (8006d20 <setCommand+0x3d0>)
 8006b66:	0028      	movs	r0, r5
 8006b68:	f00d fe13 	bl	8014792 <strncmp>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d000      	beq.n	8006b72 <setCommand+0x222>
 8006b70:	e71d      	b.n	80069ae <setCommand+0x5e>
			temp16 = atoi((const char *)pcParameterString2);
 8006b72:	0020      	movs	r0, r4
 8006b74:	f00d f965 	bl	8013e42 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8006b78:	1e43      	subs	r3, r0, #1
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2bfe      	cmp	r3, #254	; 0xfe
 8006b7e:	d900      	bls.n	8006b82 <setCommand+0x232>
 8006b80:	e74e      	b.n	8006a20 <setCommand+0xd0>
				BOS.buttons.maxInterClickTime = temp16;
 8006b82:	4b61      	ldr	r3, [pc, #388]	; (8006d08 <setCommand+0x3b8>)
 8006b84:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8006b86:	0200      	lsls	r0, r0, #8
 8006b88:	7919      	ldrb	r1, [r3, #4]
 8006b8a:	4301      	orrs	r1, r0
 8006b8c:	b289      	uxth	r1, r1
 8006b8e:	2018      	movs	r0, #24
 8006b90:	30ff      	adds	r0, #255	; 0xff
 8006b92:	f001 f931 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006b96:	e0f7      	b.n	8006d88 <setCommand+0x438>
			temp2 = atoi((const char *)pcParameterString2);
 8006b98:	0020      	movs	r0, r4
 8006b9a:	f00d f952 	bl	8013e42 <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 8006b9e:	23e1      	movs	r3, #225	; 0xe1
 8006ba0:	031b      	lsls	r3, r3, #12
 8006ba2:	4298      	cmp	r0, r3
 8006ba4:	d900      	bls.n	8006ba8 <setCommand+0x258>
 8006ba6:	e73b      	b.n	8006a20 <setCommand+0xd0>
				BOS.clibaudrate = temp2;
 8006ba8:	4c57      	ldr	r4, [pc, #348]	; (8006d08 <setCommand+0x3b8>)
 8006baa:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8006bac:	b281      	uxth	r1, r0
 8006bae:	208c      	movs	r0, #140	; 0x8c
 8006bb0:	0040      	lsls	r0, r0, #1
 8006bb2:	f001 f921 	bl	8007df8 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8006bb6:	8961      	ldrh	r1, [r4, #10]
 8006bb8:	201a      	movs	r0, #26
 8006bba:	30ff      	adds	r0, #255	; 0xff
 8006bbc:	f001 f91c 	bl	8007df8 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006bc0:	4b45      	ldr	r3, [pc, #276]	; (8006cd8 <setCommand+0x388>)
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006bc8:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8006bca:	4b48      	ldr	r3, [pc, #288]	; (8006cec <setCommand+0x39c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4955      	ldr	r1, [pc, #340]	; (8006d24 <setCommand+0x3d4>)
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	f00d fd9b 	bl	801470c <sprintf>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 8006bd6:	4650      	mov	r0, sl
 8006bd8:	f7f9 fa9e 	bl	8000118 <strlen>
 8006bdc:	4450      	add	r0, sl
 8006bde:	2230      	movs	r2, #48	; 0x30
 8006be0:	4951      	ldr	r1, [pc, #324]	; (8006d28 <setCommand+0x3d8>)
 8006be2:	f00d fb95 	bl	8014310 <memcpy>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 8006be6:	4650      	mov	r0, sl
 8006be8:	f7f9 fa96 	bl	8000118 <strlen>
 8006bec:	4450      	add	r0, sl
 8006bee:	22a3      	movs	r2, #163	; 0xa3
 8006bf0:	494e      	ldr	r1, [pc, #312]	; (8006d2c <setCommand+0x3dc>)
 8006bf2:	f00d fb8d 	bl	8014310 <memcpy>
 8006bf6:	e21d      	b.n	8007034 <setCommand+0x6e4>
			temp16 = atoi((const char *)pcParameterString2);
 8006bf8:	0020      	movs	r0, r4
 8006bfa:	f00d f922 	bl	8013e42 <atoi>
 8006bfe:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8006c00:	2900      	cmp	r1, #0
 8006c02:	d100      	bne.n	8006c06 <setCommand+0x2b6>
 8006c04:	e70c      	b.n	8006a20 <setCommand+0xd0>
				BOS.buttons.debounce = temp16;
 8006c06:	4b40      	ldr	r3, [pc, #256]	; (8006d08 <setCommand+0x3b8>)
 8006c08:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 8006c0a:	2016      	movs	r0, #22
 8006c0c:	30ff      	adds	r0, #255	; 0xff
 8006c0e:	f001 f8f3 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006c12:	e0b9      	b.n	8006d88 <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 8006c14:	0020      	movs	r0, r4
 8006c16:	f00d f914 	bl	8013e42 <atoi>
 8006c1a:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8006c1c:	2900      	cmp	r1, #0
 8006c1e:	d100      	bne.n	8006c22 <setCommand+0x2d2>
 8006c20:	e6fe      	b.n	8006a20 <setCommand+0xd0>
				BOS.buttons.singleClickTime = temp16;
 8006c22:	4b39      	ldr	r3, [pc, #228]	; (8006d08 <setCommand+0x3b8>)
 8006c24:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 8006c26:	208b      	movs	r0, #139	; 0x8b
 8006c28:	0040      	lsls	r0, r0, #1
 8006c2a:	f001 f8e5 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006c2e:	e0ab      	b.n	8006d88 <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 8006c30:	0020      	movs	r0, r4
 8006c32:	f00d f906 	bl	8013e42 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8006c36:	1e43      	subs	r3, r0, #1
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2bfe      	cmp	r3, #254	; 0xfe
 8006c3c:	d900      	bls.n	8006c40 <setCommand+0x2f0>
 8006c3e:	e6ef      	b.n	8006a20 <setCommand+0xd0>
				BOS.buttons.minInterClickTime = temp16;
 8006c40:	b2c0      	uxtb	r0, r0
 8006c42:	4b31      	ldr	r3, [pc, #196]	; (8006d08 <setCommand+0x3b8>)
 8006c44:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8006c46:	7959      	ldrb	r1, [r3, #5]
 8006c48:	0209      	lsls	r1, r1, #8
 8006c4a:	4301      	orrs	r1, r0
 8006c4c:	2018      	movs	r0, #24
 8006c4e:	30ff      	adds	r0, #255	; 0xff
 8006c50:	f001 f8d2 	bl	8007df8 <EE_WriteVariable>
	if (result == BOS_OK) 
 8006c54:	e098      	b.n	8006d88 <setCommand+0x438>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006c56:	aa0c      	add	r2, sp, #48	; 0x30
 8006c58:	2102      	movs	r1, #2
 8006c5a:	0020      	movs	r0, r4
 8006c5c:	f008 fb30 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8006c60:	4b22      	ldr	r3, [pc, #136]	; (8006cec <setCommand+0x39c>)
 8006c62:	4698      	mov	r8, r3
 8006c64:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006c66:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c68:	2103      	movs	r1, #3
 8006c6a:	0020      	movs	r0, r4
 8006c6c:	f008 fb28 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8006c70:	4d2f      	ldr	r5, [pc, #188]	; (8006d30 <setCommand+0x3e0>)
 8006c72:	6028      	str	r0, [r5, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006c74:	aa0a      	add	r2, sp, #40	; 0x28
 8006c76:	2104      	movs	r1, #4
 8006c78:	0020      	movs	r0, r4
 8006c7a:	f008 fb21 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8006c7e:	4b2d      	ldr	r3, [pc, #180]	; (8006d34 <setCommand+0x3e4>)
 8006c80:	4699      	mov	r9, r3
 8006c82:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006c84:	aa09      	add	r2, sp, #36	; 0x24
 8006c86:	2105      	movs	r1, #5
 8006c88:	0020      	movs	r0, r4
 8006c8a:	f008 fb19 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8006c8e:	4f2a      	ldr	r7, [pc, #168]	; (8006d38 <setCommand+0x3e8>)
 8006c90:	6038      	str	r0, [r7, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 8006c92:	4643      	mov	r3, r8
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	f00d f8d4 	bl	8013e42 <atoi>
 8006c9a:	b2c3      	uxtb	r3, r0
 8006c9c:	4698      	mov	r8, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 8006c9e:	6828      	ldr	r0, [r5, #0]
 8006ca0:	f00d f8cf 	bl	8013e42 <atoi>
 8006ca4:	0005      	movs	r5, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	f00d f8ca 	bl	8013e42 <atoi>
 8006cae:	0004      	movs	r4, r0
		if (pcParameterString5 != NULL) {
 8006cb0:	683f      	ldr	r7, [r7, #0]
 8006cb2:	2f00      	cmp	r7, #0
 8006cb4:	d047      	beq.n	8006d46 <setCommand+0x3f6>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	4920      	ldr	r1, [pc, #128]	; (8006d3c <setCommand+0x3ec>)
 8006cba:	0038      	movs	r0, r7
 8006cbc:	f00d fd69 	bl	8014792 <strncmp>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d03f      	beq.n	8006d44 <setCommand+0x3f4>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	491e      	ldr	r1, [pc, #120]	; (8006d40 <setCommand+0x3f0>)
 8006cc8:	0038      	movs	r0, r7
 8006cca:	f00d fd62 	bl	8014792 <strncmp>
				temp84 = RTC_PM;
 8006cce:	2602      	movs	r6, #2
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d038      	beq.n	8006d46 <setCommand+0x3f6>
				result = BOS_ERR_WrongValue;
 8006cd4:	2668      	movs	r6, #104	; 0x68
 8006cd6:	e1aa      	b.n	800702e <setCommand+0x6de>
 8006cd8:	2000125c 	.word	0x2000125c
 8006cdc:	0801b574 	.word	0x0801b574
 8006ce0:	0801b7dc 	.word	0x0801b7dc
 8006ce4:	0801b7e8 	.word	0x0801b7e8
 8006ce8:	0801b5fc 	.word	0x0801b5fc
 8006cec:	20001268 	.word	0x20001268
 8006cf0:	0801b57c 	.word	0x0801b57c
 8006cf4:	0801a8c0 	.word	0x0801a8c0
 8006cf8:	0801b6e8 	.word	0x0801b6e8
 8006cfc:	0801b6f0 	.word	0x0801b6f0
 8006d00:	0801b58c 	.word	0x0801b58c
 8006d04:	0801b698 	.word	0x0801b698
 8006d08:	20006d18 	.word	0x20006d18
 8006d0c:	0801b594 	.word	0x0801b594
 8006d10:	0801b59c 	.word	0x0801b59c
 8006d14:	0801b5a8 	.word	0x0801b5a8
 8006d18:	0801b5b4 	.word	0x0801b5b4
 8006d1c:	0801b5c4 	.word	0x0801b5c4
 8006d20:	0801b5d8 	.word	0x0801b5d8
 8006d24:	0801b6f4 	.word	0x0801b6f4
 8006d28:	0801b708 	.word	0x0801b708
 8006d2c:	0801b738 	.word	0x0801b738
 8006d30:	20001270 	.word	0x20001270
 8006d34:	20001274 	.word	0x20001274
 8006d38:	20001278 	.word	0x20001278
 8006d3c:	0801d4f4 	.word	0x0801d4f4
 8006d40:	0801b7e4 	.word	0x0801b7e4
				temp84 = RTC_AM;
 8006d44:	2601      	movs	r6, #1
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006d46:	4643      	mov	r3, r8
 8006d48:	2b17      	cmp	r3, #23
 8006d4a:	d900      	bls.n	8006d4e <setCommand+0x3fe>
 8006d4c:	e668      	b.n	8006a20 <setCommand+0xd0>
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 8006d4e:	b2ed      	uxtb	r5, r5
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006d50:	2d3b      	cmp	r5, #59	; 0x3b
 8006d52:	d900      	bls.n	8006d56 <setCommand+0x406>
 8006d54:	e664      	b.n	8006a20 <setCommand+0xd0>
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8006d56:	b2e4      	uxtb	r4, r4
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006d58:	2c3b      	cmp	r4, #59	; 0x3b
 8006d5a:	d900      	bls.n	8006d5e <setCommand+0x40e>
 8006d5c:	e660      	b.n	8006a20 <setCommand+0xd0>
				GetTimeDate();				
 8006d5e:	f007 fdf3 	bl	800e948 <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 8006d62:	4fb8      	ldr	r7, [pc, #736]	; (8007044 <setCommand+0x6f4>)
 8006d64:	7d3b      	ldrb	r3, [r7, #20]
 8006d66:	8b3a      	ldrh	r2, [r7, #24]
 8006d68:	7d79      	ldrb	r1, [r7, #21]
 8006d6a:	7db8      	ldrb	r0, [r7, #22]
 8006d6c:	7b3f      	ldrb	r7, [r7, #12]
 8006d6e:	b27f      	sxtb	r7, r7
 8006d70:	9704      	str	r7, [sp, #16]
 8006d72:	9603      	str	r6, [sp, #12]
 8006d74:	4646      	mov	r6, r8
 8006d76:	9602      	str	r6, [sp, #8]
 8006d78:	9501      	str	r5, [sp, #4]
 8006d7a:	9400      	str	r4, [sp, #0]
 8006d7c:	f007 fd8a 	bl	800e894 <BOS_CalendarConfig>
 8006d80:	0006      	movs	r6, r0
	if (result == BOS_OK) 
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	d000      	beq.n	8006d88 <setCommand+0x438>
 8006d86:	e14f      	b.n	8007028 <setCommand+0x6d8>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006d88:	4baf      	ldr	r3, [pc, #700]	; (8007048 <setCommand+0x6f8>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d90:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8006d92:	4bae      	ldr	r3, [pc, #696]	; (800704c <setCommand+0x6fc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	49ae      	ldr	r1, [pc, #696]	; (8007050 <setCommand+0x700>)
 8006d98:	4650      	mov	r0, sl
 8006d9a:	f00d fcb7 	bl	801470c <sprintf>
	return pdFALSE;
 8006d9e:	e149      	b.n	8007034 <setCommand+0x6e4>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006da0:	aa0c      	add	r2, sp, #48	; 0x30
 8006da2:	2102      	movs	r1, #2
 8006da4:	0020      	movs	r0, r4
 8006da6:	f008 fa8b 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8006daa:	4da8      	ldr	r5, [pc, #672]	; (800704c <setCommand+0x6fc>)
 8006dac:	6028      	str	r0, [r5, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006dae:	aa0b      	add	r2, sp, #44	; 0x2c
 8006db0:	2103      	movs	r1, #3
 8006db2:	0020      	movs	r0, r4
 8006db4:	f008 fa84 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8006db8:	4ba6      	ldr	r3, [pc, #664]	; (8007054 <setCommand+0x704>)
 8006dba:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006dbc:	aa0a      	add	r2, sp, #40	; 0x28
 8006dbe:	2104      	movs	r1, #4
 8006dc0:	0020      	movs	r0, r4
 8006dc2:	f008 fa7d 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8006dc6:	4ea4      	ldr	r6, [pc, #656]	; (8007058 <setCommand+0x708>)
 8006dc8:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006dca:	aa09      	add	r2, sp, #36	; 0x24
 8006dcc:	2105      	movs	r1, #5
 8006dce:	0020      	movs	r0, r4
 8006dd0:	f008 fa76 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8006dd4:	4ca1      	ldr	r4, [pc, #644]	; (800705c <setCommand+0x70c>)
 8006dd6:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 8006dd8:	6830      	ldr	r0, [r6, #0]
 8006dda:	f00d f832 	bl	8013e42 <atoi>
 8006dde:	9006      	str	r0, [sp, #24]
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8006de0:	6820      	ldr	r0, [r4, #0]
 8006de2:	f00d f82e 	bl	8013e42 <atoi>
 8006de6:	9007      	str	r0, [sp, #28]
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 8006de8:	682c      	ldr	r4, [r5, #0]
 8006dea:	2206      	movs	r2, #6
 8006dec:	499c      	ldr	r1, [pc, #624]	; (8007060 <setCommand+0x710>)
 8006dee:	0020      	movs	r0, r4
 8006df0:	f00d fccf 	bl	8014792 <strncmp>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d100      	bne.n	8006dfa <setCommand+0x4aa>
 8006df8:	e170      	b.n	80070dc <setCommand+0x78c>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 8006dfa:	2207      	movs	r2, #7
 8006dfc:	4999      	ldr	r1, [pc, #612]	; (8007064 <setCommand+0x714>)
 8006dfe:	0020      	movs	r0, r4
 8006e00:	f00d fcc7 	bl	8014792 <strncmp>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d100      	bne.n	8006e0a <setCommand+0x4ba>
 8006e08:	e199      	b.n	800713e <setCommand+0x7ee>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 8006e0a:	2209      	movs	r2, #9
 8006e0c:	4996      	ldr	r1, [pc, #600]	; (8007068 <setCommand+0x718>)
 8006e0e:	0020      	movs	r0, r4
 8006e10:	f00d fcbf 	bl	8014792 <strncmp>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d100      	bne.n	8006e1a <setCommand+0x4ca>
 8006e18:	e193      	b.n	8007142 <setCommand+0x7f2>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 8006e1a:	2208      	movs	r2, #8
 8006e1c:	4993      	ldr	r1, [pc, #588]	; (800706c <setCommand+0x71c>)
 8006e1e:	0020      	movs	r0, r4
 8006e20:	f00d fcb7 	bl	8014792 <strncmp>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d100      	bne.n	8006e2a <setCommand+0x4da>
 8006e28:	e18d      	b.n	8007146 <setCommand+0x7f6>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 8006e2a:	2206      	movs	r2, #6
 8006e2c:	4990      	ldr	r1, [pc, #576]	; (8007070 <setCommand+0x720>)
 8006e2e:	0020      	movs	r0, r4
 8006e30:	f00d fcaf 	bl	8014792 <strncmp>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d100      	bne.n	8006e3a <setCommand+0x4ea>
 8006e38:	e187      	b.n	800714a <setCommand+0x7fa>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 8006e3a:	2208      	movs	r2, #8
 8006e3c:	498d      	ldr	r1, [pc, #564]	; (8007074 <setCommand+0x724>)
 8006e3e:	0020      	movs	r0, r4
 8006e40:	f00d fca7 	bl	8014792 <strncmp>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d100      	bne.n	8006e4a <setCommand+0x4fa>
 8006e48:	e181      	b.n	800714e <setCommand+0x7fe>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 8006e4a:	2206      	movs	r2, #6
 8006e4c:	498a      	ldr	r1, [pc, #552]	; (8007078 <setCommand+0x728>)
 8006e4e:	0020      	movs	r0, r4
 8006e50:	f00d fc9f 	bl	8014792 <strncmp>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d100      	bne.n	8006e5a <setCommand+0x50a>
 8006e58:	e17b      	b.n	8007152 <setCommand+0x802>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006e5a:	4b7e      	ldr	r3, [pc, #504]	; (8007054 <setCommand+0x704>)
 8006e5c:	681c      	ldr	r4, [r3, #0]
 8006e5e:	2207      	movs	r2, #7
 8006e60:	4986      	ldr	r1, [pc, #536]	; (800707c <setCommand+0x72c>)
 8006e62:	0020      	movs	r0, r4
 8006e64:	f00d fc95 	bl	8014792 <strncmp>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d100      	bne.n	8006e6e <setCommand+0x51e>
 8006e6c:	e0ab      	b.n	8006fc6 <setCommand+0x676>
			result = BOS_ERR_WrongValue;		
 8006e6e:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006e70:	2202      	movs	r2, #2
 8006e72:	4983      	ldr	r1, [pc, #524]	; (8007080 <setCommand+0x730>)
 8006e74:	0020      	movs	r0, r4
 8006e76:	f00d fc8c 	bl	8014792 <strncmp>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d100      	bne.n	8006e80 <setCommand+0x530>
 8006e7e:	e0a5      	b.n	8006fcc <setCommand+0x67c>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 8006e80:	2208      	movs	r2, #8
 8006e82:	4980      	ldr	r1, [pc, #512]	; (8007084 <setCommand+0x734>)
 8006e84:	0020      	movs	r0, r4
 8006e86:	f00d fc84 	bl	8014792 <strncmp>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d100      	bne.n	8006e90 <setCommand+0x540>
 8006e8e:	e0a1      	b.n	8006fd4 <setCommand+0x684>
 8006e90:	2202      	movs	r2, #2
 8006e92:	497d      	ldr	r1, [pc, #500]	; (8007088 <setCommand+0x738>)
 8006e94:	0020      	movs	r0, r4
 8006e96:	f00d fc7c 	bl	8014792 <strncmp>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d100      	bne.n	8006ea0 <setCommand+0x550>
 8006e9e:	e09b      	b.n	8006fd8 <setCommand+0x688>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 8006ea0:	2205      	movs	r2, #5
 8006ea2:	497a      	ldr	r1, [pc, #488]	; (800708c <setCommand+0x73c>)
 8006ea4:	0020      	movs	r0, r4
 8006ea6:	f00d fc74 	bl	8014792 <strncmp>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d100      	bne.n	8006eb0 <setCommand+0x560>
 8006eae:	e095      	b.n	8006fdc <setCommand+0x68c>
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	4977      	ldr	r1, [pc, #476]	; (8007090 <setCommand+0x740>)
 8006eb4:	0020      	movs	r0, r4
 8006eb6:	f00d fc6c 	bl	8014792 <strncmp>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d100      	bne.n	8006ec0 <setCommand+0x570>
 8006ebe:	e08f      	b.n	8006fe0 <setCommand+0x690>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 8006ec0:	2205      	movs	r2, #5
 8006ec2:	4974      	ldr	r1, [pc, #464]	; (8007094 <setCommand+0x744>)
 8006ec4:	0020      	movs	r0, r4
 8006ec6:	f00d fc64 	bl	8014792 <strncmp>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d100      	bne.n	8006ed0 <setCommand+0x580>
 8006ece:	e089      	b.n	8006fe4 <setCommand+0x694>
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	4971      	ldr	r1, [pc, #452]	; (8007098 <setCommand+0x748>)
 8006ed4:	0020      	movs	r0, r4
 8006ed6:	f00d fc5c 	bl	8014792 <strncmp>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d100      	bne.n	8006ee0 <setCommand+0x590>
 8006ede:	e083      	b.n	8006fe8 <setCommand+0x698>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	496e      	ldr	r1, [pc, #440]	; (800709c <setCommand+0x74c>)
 8006ee4:	0020      	movs	r0, r4
 8006ee6:	f00d fc54 	bl	8014792 <strncmp>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d07e      	beq.n	8006fec <setCommand+0x69c>
 8006eee:	2202      	movs	r2, #2
 8006ef0:	496b      	ldr	r1, [pc, #428]	; (80070a0 <setCommand+0x750>)
 8006ef2:	0020      	movs	r0, r4
 8006ef4:	f00d fc4d 	bl	8014792 <strncmp>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d079      	beq.n	8006ff0 <setCommand+0x6a0>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 8006efc:	2204      	movs	r2, #4
 8006efe:	4969      	ldr	r1, [pc, #420]	; (80070a4 <setCommand+0x754>)
 8006f00:	0020      	movs	r0, r4
 8006f02:	f00d fc46 	bl	8014792 <strncmp>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d074      	beq.n	8006ff4 <setCommand+0x6a4>
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	4966      	ldr	r1, [pc, #408]	; (80070a8 <setCommand+0x758>)
 8006f0e:	0020      	movs	r0, r4
 8006f10:	f00d fc3f 	bl	8014792 <strncmp>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d06f      	beq.n	8006ff8 <setCommand+0x6a8>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 8006f18:	2204      	movs	r2, #4
 8006f1a:	4964      	ldr	r1, [pc, #400]	; (80070ac <setCommand+0x75c>)
 8006f1c:	0020      	movs	r0, r4
 8006f1e:	f00d fc38 	bl	8014792 <strncmp>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d06a      	beq.n	8006ffc <setCommand+0x6ac>
 8006f26:	2202      	movs	r2, #2
 8006f28:	4961      	ldr	r1, [pc, #388]	; (80070b0 <setCommand+0x760>)
 8006f2a:	0020      	movs	r0, r4
 8006f2c:	f00d fc31 	bl	8014792 <strncmp>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d065      	beq.n	8007000 <setCommand+0x6b0>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 8006f34:	2205      	movs	r2, #5
 8006f36:	495f      	ldr	r1, [pc, #380]	; (80070b4 <setCommand+0x764>)
 8006f38:	0020      	movs	r0, r4
 8006f3a:	f00d fc2a 	bl	8014792 <strncmp>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d060      	beq.n	8007004 <setCommand+0x6b4>
 8006f42:	2202      	movs	r2, #2
 8006f44:	495c      	ldr	r1, [pc, #368]	; (80070b8 <setCommand+0x768>)
 8006f46:	0020      	movs	r0, r4
 8006f48:	f00d fc23 	bl	8014792 <strncmp>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d05b      	beq.n	8007008 <setCommand+0x6b8>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 8006f50:	2209      	movs	r2, #9
 8006f52:	495a      	ldr	r1, [pc, #360]	; (80070bc <setCommand+0x76c>)
 8006f54:	0020      	movs	r0, r4
 8006f56:	f00d fc1c 	bl	8014792 <strncmp>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d056      	beq.n	800700c <setCommand+0x6bc>
 8006f5e:	2202      	movs	r2, #2
 8006f60:	4957      	ldr	r1, [pc, #348]	; (80070c0 <setCommand+0x770>)
 8006f62:	0020      	movs	r0, r4
 8006f64:	f00d fc15 	bl	8014792 <strncmp>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d051      	beq.n	8007010 <setCommand+0x6c0>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 8006f6c:	2207      	movs	r2, #7
 8006f6e:	4955      	ldr	r1, [pc, #340]	; (80070c4 <setCommand+0x774>)
 8006f70:	0020      	movs	r0, r4
 8006f72:	f00d fc0e 	bl	8014792 <strncmp>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d04c      	beq.n	8007014 <setCommand+0x6c4>
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	4952      	ldr	r1, [pc, #328]	; (80070c8 <setCommand+0x778>)
 8006f7e:	0020      	movs	r0, r4
 8006f80:	f00d fc07 	bl	8014792 <strncmp>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d047      	beq.n	8007018 <setCommand+0x6c8>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 8006f88:	2208      	movs	r2, #8
 8006f8a:	4950      	ldr	r1, [pc, #320]	; (80070cc <setCommand+0x77c>)
 8006f8c:	0020      	movs	r0, r4
 8006f8e:	f00d fc00 	bl	8014792 <strncmp>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d042      	beq.n	800701c <setCommand+0x6cc>
 8006f96:	2202      	movs	r2, #2
 8006f98:	494d      	ldr	r1, [pc, #308]	; (80070d0 <setCommand+0x780>)
 8006f9a:	0020      	movs	r0, r4
 8006f9c:	f00d fbf9 	bl	8014792 <strncmp>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d03d      	beq.n	8007020 <setCommand+0x6d0>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	494b      	ldr	r1, [pc, #300]	; (80070d4 <setCommand+0x784>)
 8006fa8:	0020      	movs	r0, r4
 8006faa:	f00d fbf2 	bl	8014792 <strncmp>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d038      	beq.n	8007024 <setCommand+0x6d4>
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	4948      	ldr	r1, [pc, #288]	; (80070d8 <setCommand+0x788>)
 8006fb6:	0020      	movs	r0, r4
 8006fb8:	f00d fbeb 	bl	8014792 <strncmp>
			temp82 = DECEMBER;
 8006fbc:	250c      	movs	r5, #12
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d005      	beq.n	8006fce <setCommand+0x67e>
			result = BOS_ERR_WrongValue;	
 8006fc2:	2668      	movs	r6, #104	; 0x68
	else if (result == BOS_ERR_WrongParam)
 8006fc4:	e033      	b.n	800702e <setCommand+0x6de>
			result = BOS_ERR_WrongValue;		
 8006fc6:	2668      	movs	r6, #104	; 0x68
			temp82 = JANUARY;
 8006fc8:	2501      	movs	r5, #1
 8006fca:	e000      	b.n	8006fce <setCommand+0x67e>
 8006fcc:	2501      	movs	r5, #1
		if (result == BOS_OK) 
 8006fce:	2e00      	cmp	r6, #0
 8006fd0:	d12d      	bne.n	800702e <setCommand+0x6de>
 8006fd2:	e090      	b.n	80070f6 <setCommand+0x7a6>
			temp82 = FEBRUARY;
 8006fd4:	2502      	movs	r5, #2
 8006fd6:	e7fa      	b.n	8006fce <setCommand+0x67e>
 8006fd8:	2502      	movs	r5, #2
 8006fda:	e7f8      	b.n	8006fce <setCommand+0x67e>
			temp82 = MARCH;
 8006fdc:	2503      	movs	r5, #3
 8006fde:	e7f6      	b.n	8006fce <setCommand+0x67e>
 8006fe0:	2503      	movs	r5, #3
 8006fe2:	e7f4      	b.n	8006fce <setCommand+0x67e>
			temp82 = APRIL;
 8006fe4:	2504      	movs	r5, #4
 8006fe6:	e7f2      	b.n	8006fce <setCommand+0x67e>
 8006fe8:	2504      	movs	r5, #4
 8006fea:	e7f0      	b.n	8006fce <setCommand+0x67e>
			temp82 = MAY;
 8006fec:	2505      	movs	r5, #5
 8006fee:	e7ee      	b.n	8006fce <setCommand+0x67e>
 8006ff0:	2505      	movs	r5, #5
 8006ff2:	e7ec      	b.n	8006fce <setCommand+0x67e>
			temp82 = JUNE;
 8006ff4:	2506      	movs	r5, #6
 8006ff6:	e7ea      	b.n	8006fce <setCommand+0x67e>
 8006ff8:	2506      	movs	r5, #6
 8006ffa:	e7e8      	b.n	8006fce <setCommand+0x67e>
			temp82 = JULY;
 8006ffc:	2507      	movs	r5, #7
 8006ffe:	e7e6      	b.n	8006fce <setCommand+0x67e>
 8007000:	2507      	movs	r5, #7
 8007002:	e7e4      	b.n	8006fce <setCommand+0x67e>
			temp82 = AUGUST;
 8007004:	2508      	movs	r5, #8
 8007006:	e7e2      	b.n	8006fce <setCommand+0x67e>
 8007008:	2508      	movs	r5, #8
 800700a:	e7e0      	b.n	8006fce <setCommand+0x67e>
			temp82 = SEPTEMBER;
 800700c:	2509      	movs	r5, #9
 800700e:	e7de      	b.n	8006fce <setCommand+0x67e>
 8007010:	2509      	movs	r5, #9
 8007012:	e7dc      	b.n	8006fce <setCommand+0x67e>
			temp82 = OCTOBER;
 8007014:	250a      	movs	r5, #10
 8007016:	e7da      	b.n	8006fce <setCommand+0x67e>
 8007018:	250a      	movs	r5, #10
 800701a:	e7d8      	b.n	8006fce <setCommand+0x67e>
			temp82 = NOVEMBER;
 800701c:	250b      	movs	r5, #11
 800701e:	e7d6      	b.n	8006fce <setCommand+0x67e>
 8007020:	250b      	movs	r5, #11
 8007022:	e7d4      	b.n	8006fce <setCommand+0x67e>
			temp82 = DECEMBER;
 8007024:	250c      	movs	r5, #12
 8007026:	e7d2      	b.n	8006fce <setCommand+0x67e>
	else if (result == BOS_ERR_WrongParam)
 8007028:	2e67      	cmp	r6, #103	; 0x67
 800702a:	d100      	bne.n	800702e <setCommand+0x6de>
 800702c:	e4bf      	b.n	80069ae <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 800702e:	2e68      	cmp	r6, #104	; 0x68
 8007030:	d100      	bne.n	8007034 <setCommand+0x6e4>
 8007032:	e4f5      	b.n	8006a20 <setCommand+0xd0>
}
 8007034:	2000      	movs	r0, #0
 8007036:	b00e      	add	sp, #56	; 0x38
 8007038:	bce0      	pop	{r5, r6, r7}
 800703a:	46ba      	mov	sl, r7
 800703c:	46b1      	mov	r9, r6
 800703e:	46a8      	mov	r8, r5
 8007040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	20006d18 	.word	0x20006d18
 8007048:	2000125c 	.word	0x2000125c
 800704c:	20001268 	.word	0x20001268
 8007050:	0801b6f4 	.word	0x0801b6f4
 8007054:	20001270 	.word	0x20001270
 8007058:	20001274 	.word	0x20001274
 800705c:	20001278 	.word	0x20001278
 8007060:	0801b7f0 	.word	0x0801b7f0
 8007064:	0801b7f8 	.word	0x0801b7f8
 8007068:	0801b800 	.word	0x0801b800
 800706c:	0801b80c 	.word	0x0801b80c
 8007070:	0801b818 	.word	0x0801b818
 8007074:	0801b820 	.word	0x0801b820
 8007078:	0801b82c 	.word	0x0801b82c
 800707c:	0801b834 	.word	0x0801b834
 8007080:	0801b83c 	.word	0x0801b83c
 8007084:	0801b840 	.word	0x0801b840
 8007088:	0801b84c 	.word	0x0801b84c
 800708c:	0801b850 	.word	0x0801b850
 8007090:	0801b858 	.word	0x0801b858
 8007094:	0801b85c 	.word	0x0801b85c
 8007098:	0801b864 	.word	0x0801b864
 800709c:	0801b868 	.word	0x0801b868
 80070a0:	0801b86c 	.word	0x0801b86c
 80070a4:	0801b870 	.word	0x0801b870
 80070a8:	0801b878 	.word	0x0801b878
 80070ac:	0801b87c 	.word	0x0801b87c
 80070b0:	0801b884 	.word	0x0801b884
 80070b4:	0801b888 	.word	0x0801b888
 80070b8:	0801b890 	.word	0x0801b890
 80070bc:	0801b894 	.word	0x0801b894
 80070c0:	0801b8a0 	.word	0x0801b8a0
 80070c4:	0801b8a4 	.word	0x0801b8a4
 80070c8:	0801b8ac 	.word	0x0801b8ac
 80070cc:	0801b8b0 	.word	0x0801b8b0
 80070d0:	0801b8bc 	.word	0x0801b8bc
 80070d4:	0801b8c0 	.word	0x0801b8c0
 80070d8:	0801b8cc 	.word	0x0801b8cc
			temp81 = MONDAY;
 80070dc:	2701      	movs	r7, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 80070de:	4b1e      	ldr	r3, [pc, #120]	; (8007158 <setCommand+0x808>)
 80070e0:	681c      	ldr	r4, [r3, #0]
 80070e2:	2207      	movs	r2, #7
 80070e4:	491d      	ldr	r1, [pc, #116]	; (800715c <setCommand+0x80c>)
 80070e6:	0020      	movs	r0, r4
 80070e8:	f00d fb53 	bl	8014792 <strncmp>
			temp82 = JANUARY;
 80070ec:	2501      	movs	r5, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 80070ee:	2600      	movs	r6, #0
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d000      	beq.n	80070f6 <setCommand+0x7a6>
 80070f4:	e6bc      	b.n	8006e70 <setCommand+0x520>
		temp83 = atoi((const char *)pcParameterString4);		// day
 80070f6:	466b      	mov	r3, sp
 80070f8:	7e1e      	ldrb	r6, [r3, #24]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80070fa:	1e73      	subs	r3, r6, #1
 80070fc:	2b1e      	cmp	r3, #30
 80070fe:	d900      	bls.n	8007102 <setCommand+0x7b2>
 8007100:	e48e      	b.n	8006a20 <setCommand+0xd0>
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8007102:	466b      	mov	r3, sp
 8007104:	8b9c      	ldrh	r4, [r3, #28]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8007106:	4b16      	ldr	r3, [pc, #88]	; (8007160 <setCommand+0x810>)
 8007108:	18e3      	adds	r3, r4, r3
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b64      	cmp	r3, #100	; 0x64
 800710e:	d900      	bls.n	8007112 <setCommand+0x7c2>
 8007110:	e486      	b.n	8006a20 <setCommand+0xd0>
				GetTimeDate();
 8007112:	f007 fc19 	bl	800e948 <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 8007116:	4b13      	ldr	r3, [pc, #76]	; (8007164 <setCommand+0x814>)
 8007118:	220c      	movs	r2, #12
 800711a:	569a      	ldrsb	r2, [r3, r2]
 800711c:	9204      	str	r2, [sp, #16]
 800711e:	7cda      	ldrb	r2, [r3, #19]
 8007120:	9203      	str	r2, [sp, #12]
 8007122:	7c9a      	ldrb	r2, [r3, #18]
 8007124:	9202      	str	r2, [sp, #8]
 8007126:	7c5a      	ldrb	r2, [r3, #17]
 8007128:	9201      	str	r2, [sp, #4]
 800712a:	7c1b      	ldrb	r3, [r3, #16]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	003b      	movs	r3, r7
 8007130:	0022      	movs	r2, r4
 8007132:	0031      	movs	r1, r6
 8007134:	0028      	movs	r0, r5
 8007136:	f007 fbad 	bl	800e894 <BOS_CalendarConfig>
 800713a:	0006      	movs	r6, r0
 800713c:	e621      	b.n	8006d82 <setCommand+0x432>
			temp81 = TUESDAY;
 800713e:	2702      	movs	r7, #2
 8007140:	e7cd      	b.n	80070de <setCommand+0x78e>
			temp81 = WEDNESDAY;
 8007142:	2703      	movs	r7, #3
 8007144:	e7cb      	b.n	80070de <setCommand+0x78e>
			temp81 = THURSDAY;
 8007146:	2704      	movs	r7, #4
 8007148:	e7c9      	b.n	80070de <setCommand+0x78e>
			temp81 = FRIDAY;
 800714a:	2705      	movs	r7, #5
 800714c:	e7c7      	b.n	80070de <setCommand+0x78e>
			temp81 = SATURDAY;
 800714e:	2706      	movs	r7, #6
 8007150:	e7c5      	b.n	80070de <setCommand+0x78e>
			temp81 = SUNDAY;
 8007152:	2707      	movs	r7, #7
 8007154:	e7c3      	b.n	80070de <setCommand+0x78e>
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	20001270 	.word	0x20001270
 800715c:	0801b834 	.word	0x0801b834
 8007160:	fffff830 	.word	0xfffff830
 8007164:	20006d18 	.word	0x20006d18

08007168 <removebuttonCommand>:
{
 8007168:	b530      	push	{r4, r5, lr}
 800716a:	b083      	sub	sp, #12
 800716c:	0005      	movs	r5, r0
 800716e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8007170:	2300      	movs	r3, #0
 8007172:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8007174:	2d00      	cmp	r5, #0
 8007176:	d010      	beq.n	800719a <removebuttonCommand+0x32>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8007178:	aa01      	add	r2, sp, #4
 800717a:	2101      	movs	r1, #1
 800717c:	f008 f8a0 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8007180:	2300      	movs	r3, #0
 8007182:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 8007184:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 8007186:	2b70      	cmp	r3, #112	; 0x70
 8007188:	d009      	beq.n	800719e <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 800718a:	0020      	movs	r0, r4
 800718c:	f001 fdb0 	bl	8008cf0 <RemovePortButton>
	if (result == BOS_OK) 
 8007190:	2800      	cmp	r0, #0
 8007192:	d009      	beq.n	80071a8 <removebuttonCommand+0x40>
}
 8007194:	2000      	movs	r0, #0
 8007196:	b003      	add	sp, #12
 8007198:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 800719a:	b672      	cpsid	i
 800719c:	e7fe      	b.n	800719c <removebuttonCommand+0x34>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800719e:	3001      	adds	r0, #1
 80071a0:	f00c fe55 	bl	8013e4e <atol>
 80071a4:	b2c4      	uxtb	r4, r0
 80071a6:	e7f0      	b.n	800718a <removebuttonCommand+0x22>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 80071a8:	0023      	movs	r3, r4
 80071aa:	0022      	movs	r2, r4
 80071ac:	4902      	ldr	r1, [pc, #8]	; (80071b8 <removebuttonCommand+0x50>)
 80071ae:	0028      	movs	r0, r5
 80071b0:	f00d faac 	bl	801470c <sprintf>
 80071b4:	e7ee      	b.n	8007194 <removebuttonCommand+0x2c>
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	0801b8d0 	.word	0x0801b8d0

080071bc <addbuttonCommand>:
{
 80071bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071be:	46c6      	mov	lr, r8
 80071c0:	b500      	push	{lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	0006      	movs	r6, r0
 80071c6:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 80071c8:	2300      	movs	r3, #0
 80071ca:	9303      	str	r3, [sp, #12]
 80071cc:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d03d      	beq.n	800724e <addbuttonCommand+0x92>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80071d2:	aa03      	add	r2, sp, #12
 80071d4:	2101      	movs	r1, #1
 80071d6:	0038      	movs	r0, r7
 80071d8:	f008 f872 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 80071dc:	0005      	movs	r5, r0
 80071de:	4b25      	ldr	r3, [pc, #148]	; (8007274 <addbuttonCommand+0xb8>)
 80071e0:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 80071e2:	9b03      	ldr	r3, [sp, #12]
 80071e4:	4698      	mov	r8, r3
 80071e6:	001a      	movs	r2, r3
 80071e8:	4923      	ldr	r1, [pc, #140]	; (8007278 <addbuttonCommand+0xbc>)
 80071ea:	f00d fad2 	bl	8014792 <strncmp>
		type = MOMENTARY_NO;
 80071ee:	2401      	movs	r4, #1
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 80071f0:	2800      	cmp	r0, #0
 80071f2:	d017      	beq.n	8007224 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 80071f4:	4642      	mov	r2, r8
 80071f6:	4921      	ldr	r1, [pc, #132]	; (800727c <addbuttonCommand+0xc0>)
 80071f8:	0028      	movs	r0, r5
 80071fa:	f00d faca 	bl	8014792 <strncmp>
		type = MOMENTARY_NC;
 80071fe:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8007200:	2800      	cmp	r0, #0
 8007202:	d00f      	beq.n	8007224 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8007204:	4642      	mov	r2, r8
 8007206:	491e      	ldr	r1, [pc, #120]	; (8007280 <addbuttonCommand+0xc4>)
 8007208:	0028      	movs	r0, r5
 800720a:	f00d fac2 	bl	8014792 <strncmp>
		type = ONOFF_NO;
 800720e:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8007210:	2800      	cmp	r0, #0
 8007212:	d007      	beq.n	8007224 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 8007214:	4642      	mov	r2, r8
 8007216:	491b      	ldr	r1, [pc, #108]	; (8007284 <addbuttonCommand+0xc8>)
 8007218:	0028      	movs	r0, r5
 800721a:	f00d faba 	bl	8014792 <strncmp>
		type = ONOFF_NC;
 800721e:	4244      	negs	r4, r0
 8007220:	4144      	adcs	r4, r0
 8007222:	00a4      	lsls	r4, r4, #2
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8007224:	aa02      	add	r2, sp, #8
 8007226:	2102      	movs	r1, #2
 8007228:	0038      	movs	r0, r7
 800722a:	f008 f849 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800722e:	2300      	movs	r3, #0
 8007230:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 8007232:	2500      	movs	r5, #0
	if (pcParameterString2[0] == 'p') {
 8007234:	2b70      	cmp	r3, #112	; 0x70
 8007236:	d00c      	beq.n	8007252 <addbuttonCommand+0x96>
	result = AddPortButton(type, port);
 8007238:	0029      	movs	r1, r5
 800723a:	0020      	movs	r0, r4
 800723c:	f001 fcc6 	bl	8008bcc <AddPortButton>
	if (result == BOS_OK) 
 8007240:	2800      	cmp	r0, #0
 8007242:	d00b      	beq.n	800725c <addbuttonCommand+0xa0>
}
 8007244:	2000      	movs	r0, #0
 8007246:	b004      	add	sp, #16
 8007248:	bc80      	pop	{r7}
 800724a:	46b8      	mov	r8, r7
 800724c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 800724e:	b672      	cpsid	i
 8007250:	e7fe      	b.n	8007250 <addbuttonCommand+0x94>
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8007252:	3001      	adds	r0, #1
 8007254:	f00c fdfb 	bl	8013e4e <atol>
 8007258:	b2c5      	uxtb	r5, r0
 800725a:	e7ed      	b.n	8007238 <addbuttonCommand+0x7c>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <addbuttonCommand+0xb8>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	2300      	movs	r3, #0
 8007262:	9903      	ldr	r1, [sp, #12]
 8007264:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 8007266:	9500      	str	r5, [sp, #0]
 8007268:	002b      	movs	r3, r5
 800726a:	4907      	ldr	r1, [pc, #28]	; (8007288 <addbuttonCommand+0xcc>)
 800726c:	0030      	movs	r0, r6
 800726e:	f00d fa4d 	bl	801470c <sprintf>
 8007272:	e7e7      	b.n	8007244 <addbuttonCommand+0x88>
 8007274:	20001258 	.word	0x20001258
 8007278:	0801b8f8 	.word	0x0801b8f8
 800727c:	0801b908 	.word	0x0801b908
 8007280:	0801b918 	.word	0x0801b918
 8007284:	0801b924 	.word	0x0801b924
 8007288:	0801b930 	.word	0x0801b930

0800728c <scastCommand>:
{
 800728c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800728e:	46de      	mov	lr, fp
 8007290:	4657      	mov	r7, sl
 8007292:	464e      	mov	r6, r9
 8007294:	4645      	mov	r5, r8
 8007296:	b5e0      	push	{r5, r6, r7, lr}
 8007298:	b099      	sub	sp, #100	; 0x64
 800729a:	0006      	movs	r6, r0
 800729c:	9007      	str	r0, [sp, #28]
 800729e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 80072a0:	2500      	movs	r5, #0
 80072a2:	9517      	str	r5, [sp, #92]	; 0x5c
 80072a4:	9516      	str	r5, [sp, #88]	; 0x58
 80072a6:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 80072a8:	9514      	str	r5, [sp, #80]	; 0x50
 80072aa:	9513      	str	r5, [sp, #76]	; 0x4c
 80072ac:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 = 0;
 80072ae:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 80072b0:	950e      	str	r5, [sp, #56]	; 0x38
 80072b2:	2206      	movs	r2, #6
 80072b4:	2100      	movs	r1, #0
 80072b6:	a80f      	add	r0, sp, #60	; 0x3c
 80072b8:	f00d f833 	bl	8014322 <memset>
 80072bc:	950b      	str	r5, [sp, #44]	; 0x2c
 80072be:	2206      	movs	r2, #6
 80072c0:	2100      	movs	r1, #0
 80072c2:	a80c      	add	r0, sp, #48	; 0x30
 80072c4:	f00d f82d 	bl	8014322 <memset>
 80072c8:	9508      	str	r5, [sp, #32]
 80072ca:	2206      	movs	r2, #6
 80072cc:	2100      	movs	r1, #0
 80072ce:	a809      	add	r0, sp, #36	; 0x24
 80072d0:	f00d f827 	bl	8014322 <memset>
	configASSERT( pcWriteBuffer );
 80072d4:	2e00      	cmp	r6, #0
 80072d6:	d100      	bne.n	80072da <scastCommand+0x4e>
 80072d8:	e07c      	b.n	80073d4 <scastCommand+0x148>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80072da:	aa17      	add	r2, sp, #92	; 0x5c
 80072dc:	2101      	movs	r1, #1
 80072de:	0020      	movs	r0, r4
 80072e0:	f007 ffee 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 80072e4:	2300      	movs	r3, #0
 80072e6:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 80072e8:	2700      	movs	r7, #0
	if (pcParameterString1[0] == 'P') {
 80072ea:	2b50      	cmp	r3, #80	; 0x50
 80072ec:	d100      	bne.n	80072f0 <scastCommand+0x64>
 80072ee:	e073      	b.n	80073d8 <scastCommand+0x14c>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80072f0:	aa16      	add	r2, sp, #88	; 0x58
 80072f2:	2102      	movs	r1, #2
 80072f4:	0020      	movs	r0, r4
 80072f6:	f007 ffe3 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 80072fa:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 80072fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80072fe:	a80e      	add	r0, sp, #56	; 0x38
 8007300:	f00d fa58 	bl	80147b4 <strncpy>
	srcM = (uint8_t) GetID(par1);
 8007304:	a80e      	add	r0, sp, #56	; 0x38
 8007306:	f7fd faf1 	bl	80048ec <GetID>
 800730a:	b2c3      	uxtb	r3, r0
 800730c:	469b      	mov	fp, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800730e:	aa15      	add	r2, sp, #84	; 0x54
 8007310:	2103      	movs	r1, #3
 8007312:	0020      	movs	r0, r4
 8007314:	f007 ffd4 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 8007318:	2300      	movs	r3, #0
 800731a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 800731c:	2200      	movs	r2, #0
 800731e:	4690      	mov	r8, r2
	if (pcParameterString3[0] == 'p') {
 8007320:	2b70      	cmp	r3, #112	; 0x70
 8007322:	d05e      	beq.n	80073e2 <scastCommand+0x156>
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8007324:	aa14      	add	r2, sp, #80	; 0x50
 8007326:	2104      	movs	r1, #4
 8007328:	0020      	movs	r0, r4
 800732a:	f007 ffc9 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800732e:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 8007330:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007332:	a80b      	add	r0, sp, #44	; 0x2c
 8007334:	f00d fa3e 	bl	80147b4 <strncpy>
	dstM = (uint8_t) GetID(par2);
 8007338:	a80b      	add	r0, sp, #44	; 0x2c
 800733a:	f7fd fad7 	bl	80048ec <GetID>
 800733e:	b2c3      	uxtb	r3, r0
 8007340:	4699      	mov	r9, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8007342:	aa13      	add	r2, sp, #76	; 0x4c
 8007344:	2105      	movs	r1, #5
 8007346:	0020      	movs	r0, r4
 8007348:	f007 ffba 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800734c:	0006      	movs	r6, r0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 800734e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007350:	469a      	mov	sl, r3
 8007352:	001a      	movs	r2, r3
 8007354:	492d      	ldr	r1, [pc, #180]	; (800740c <scastCommand+0x180>)
 8007356:	f00d fa1c 	bl	8014792 <strncmp>
		direction = FORWARD;
 800735a:	2500      	movs	r5, #0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 800735c:	2800      	cmp	r0, #0
 800735e:	d00f      	beq.n	8007380 <scastCommand+0xf4>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8007360:	4652      	mov	r2, sl
 8007362:	492b      	ldr	r1, [pc, #172]	; (8007410 <scastCommand+0x184>)
 8007364:	0030      	movs	r0, r6
 8007366:	f00d fa14 	bl	8014792 <strncmp>
		direction = BACKWARD;
 800736a:	3501      	adds	r5, #1
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 800736c:	2800      	cmp	r0, #0
 800736e:	d007      	beq.n	8007380 <scastCommand+0xf4>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 8007370:	4652      	mov	r2, sl
 8007372:	4928      	ldr	r1, [pc, #160]	; (8007414 <scastCommand+0x188>)
 8007374:	0030      	movs	r0, r6
 8007376:	f00d fa0c 	bl	8014792 <strncmp>
		direction = BIDIRECTIONAL;
 800737a:	4245      	negs	r5, r0
 800737c:	4145      	adcs	r5, r0
 800737e:	006d      	lsls	r5, r5, #1
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 8007380:	4652      	mov	r2, sl
 8007382:	0031      	movs	r1, r6
 8007384:	a808      	add	r0, sp, #32
 8007386:	f00d fa15 	bl	80147b4 <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 800738a:	aa12      	add	r2, sp, #72	; 0x48
 800738c:	2106      	movs	r1, #6
 800738e:	0020      	movs	r0, r4
 8007390:	f007 ff96 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8007394:	f00c fd5b 	bl	8013e4e <atol>
 8007398:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 800739a:	aa11      	add	r2, sp, #68	; 0x44
 800739c:	2107      	movs	r1, #7
 800739e:	0020      	movs	r0, r4
 80073a0:	f007 ff8e 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 80073a4:	f00c fd53 	bl	8013e4e <atol>
 80073a8:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 80073aa:	2300      	movs	r3, #0
 80073ac:	9303      	str	r3, [sp, #12]
 80073ae:	9002      	str	r0, [sp, #8]
 80073b0:	9601      	str	r6, [sp, #4]
 80073b2:	9500      	str	r5, [sp, #0]
 80073b4:	464b      	mov	r3, r9
 80073b6:	4642      	mov	r2, r8
 80073b8:	4659      	mov	r1, fp
 80073ba:	0038      	movs	r0, r7
 80073bc:	f002 fa46 	bl	800984c <StartScastDMAStream>
	if (result == BOS_OK) 
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d014      	beq.n	80073ee <scastCommand+0x162>
}
 80073c4:	2000      	movs	r0, #0
 80073c6:	b019      	add	sp, #100	; 0x64
 80073c8:	bcf0      	pop	{r4, r5, r6, r7}
 80073ca:	46bb      	mov	fp, r7
 80073cc:	46b2      	mov	sl, r6
 80073ce:	46a9      	mov	r9, r5
 80073d0:	46a0      	mov	r8, r4
 80073d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80073d4:	b672      	cpsid	i
 80073d6:	e7fe      	b.n	80073d6 <scastCommand+0x14a>
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80073d8:	3001      	adds	r0, #1
 80073da:	f00c fd38 	bl	8013e4e <atol>
 80073de:	b2c7      	uxtb	r7, r0
 80073e0:	e786      	b.n	80072f0 <scastCommand+0x64>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 80073e2:	3001      	adds	r0, #1
 80073e4:	f00c fd33 	bl	8013e4e <atol>
 80073e8:	b2c3      	uxtb	r3, r0
 80073ea:	4698      	mov	r8, r3
 80073ec:	e79a      	b.n	8007324 <scastCommand+0x98>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 80073ee:	9404      	str	r4, [sp, #16]
 80073f0:	9603      	str	r6, [sp, #12]
 80073f2:	ab0b      	add	r3, sp, #44	; 0x2c
 80073f4:	9302      	str	r3, [sp, #8]
 80073f6:	4643      	mov	r3, r8
 80073f8:	9301      	str	r3, [sp, #4]
 80073fa:	ab0e      	add	r3, sp, #56	; 0x38
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	003b      	movs	r3, r7
 8007400:	aa08      	add	r2, sp, #32
 8007402:	4905      	ldr	r1, [pc, #20]	; (8007418 <scastCommand+0x18c>)
 8007404:	9807      	ldr	r0, [sp, #28]
 8007406:	f00d f981 	bl	801470c <sprintf>
 800740a:	e7db      	b.n	80073c4 <scastCommand+0x138>
 800740c:	0801b964 	.word	0x0801b964
 8007410:	0801b96c 	.word	0x0801b96c
 8007414:	0801b978 	.word	0x0801b978
 8007418:	0801b988 	.word	0x0801b988

0800741c <infoCommand>:
{
 800741c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741e:	b083      	sub	sp, #12
 8007420:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8007422:	d036      	beq.n	8007492 <infoCommand+0x76>
	if (N > 1)
 8007424:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <infoCommand+0xa8>)
 8007426:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 8007428:	2500      	movs	r5, #0
	if (N > 1)
 800742a:	2b01      	cmp	r3, #1
 800742c:	d833      	bhi.n	8007496 <infoCommand+0x7a>
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 800742e:	4b25      	ldr	r3, [pc, #148]	; (80074c4 <infoCommand+0xa8>)
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	4925      	ldr	r1, [pc, #148]	; (80074c8 <infoCommand+0xac>)
 8007434:	0020      	movs	r0, r4
 8007436:	f00d f969 	bl	801470c <sprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800743a:	0020      	movs	r0, r4
 800743c:	f7f8 fe6c 	bl	8000118 <strlen>
 8007440:	b282      	uxth	r2, r0
 8007442:	4e22      	ldr	r6, [pc, #136]	; (80074cc <infoCommand+0xb0>)
 8007444:	7830      	ldrb	r0, [r6, #0]
 8007446:	2701      	movs	r7, #1
 8007448:	427f      	negs	r7, r7
 800744a:	9700      	str	r7, [sp, #0]
 800744c:	2332      	movs	r3, #50	; 0x32
 800744e:	0021      	movs	r1, r4
 8007450:	f007 fce0 	bl	800ee14 <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 8007454:	2213      	movs	r2, #19
 8007456:	491e      	ldr	r1, [pc, #120]	; (80074d0 <infoCommand+0xb4>)
 8007458:	0020      	movs	r0, r4
 800745a:	f00c ff59 	bl	8014310 <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800745e:	0020      	movs	r0, r4
 8007460:	f7f8 fe5a 	bl	8000118 <strlen>
 8007464:	b282      	uxth	r2, r0
 8007466:	7830      	ldrb	r0, [r6, #0]
 8007468:	9700      	str	r7, [sp, #0]
 800746a:	2332      	movs	r3, #50	; 0x32
 800746c:	0021      	movs	r1, r4
 800746e:	f007 fcd1 	bl	800ee14 <writePxMutex>
	DisplayTopology(PcPort);
 8007472:	7830      	ldrb	r0, [r6, #0]
 8007474:	f7fc ff7e 	bl	8004374 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8007478:	7830      	ldrb	r0, [r6, #0]
 800747a:	f7fd f857 	bl	800452c <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 800747e:	2d02      	cmp	r5, #2
 8007480:	d00d      	beq.n	800749e <infoCommand+0x82>
	sprintf( ( char * ) pcWriteBuffer, " ");
 8007482:	2202      	movs	r2, #2
 8007484:	4913      	ldr	r1, [pc, #76]	; (80074d4 <infoCommand+0xb8>)
 8007486:	0020      	movs	r0, r4
 8007488:	f00c ff42 	bl	8014310 <memcpy>
}
 800748c:	2000      	movs	r0, #0
 800748e:	b003      	add	sp, #12
 8007490:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8007492:	b672      	cpsid	i
 8007494:	e7fe      	b.n	8007494 <infoCommand+0x78>
		result = ReadPortsDir();
 8007496:	f7fd fb73 	bl	8004b80 <ReadPortsDir>
 800749a:	0005      	movs	r5, r0
 800749c:	e7c7      	b.n	800742e <infoCommand+0x12>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 800749e:	2244      	movs	r2, #68	; 0x44
 80074a0:	490d      	ldr	r1, [pc, #52]	; (80074d8 <infoCommand+0xbc>)
 80074a2:	0020      	movs	r0, r4
 80074a4:	f00c ff34 	bl	8014310 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 80074a8:	0020      	movs	r0, r4
 80074aa:	f7f8 fe35 	bl	8000118 <strlen>
 80074ae:	b282      	uxth	r2, r0
 80074b0:	4b06      	ldr	r3, [pc, #24]	; (80074cc <infoCommand+0xb0>)
 80074b2:	7818      	ldrb	r0, [r3, #0]
 80074b4:	003b      	movs	r3, r7
 80074b6:	9700      	str	r7, [sp, #0]
 80074b8:	3333      	adds	r3, #51	; 0x33
 80074ba:	0021      	movs	r1, r4
 80074bc:	f007 fcaa 	bl	800ee14 <writePxMutex>
 80074c0:	e7df      	b.n	8007482 <infoCommand+0x66>
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	2000001c 	.word	0x2000001c
 80074c8:	0801ba10 	.word	0x0801ba10
 80074cc:	20000aa7 	.word	0x20000aa7
 80074d0:	0801ba2c 	.word	0x0801ba2c
 80074d4:	0801a7a8 	.word	0x0801a7a8
 80074d8:	0801ba40 	.word	0x0801ba40

080074dc <statusCommand>:
{
 80074dc:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 80074de:	2800      	cmp	r0, #0
 80074e0:	d004      	beq.n	80074ec <statusCommand+0x10>
	DisplayModuleStatus(0);
 80074e2:	2000      	movs	r0, #0
 80074e4:	f7fd f898 	bl	8004618 <DisplayModuleStatus>
}
 80074e8:	2000      	movs	r0, #0
 80074ea:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80074ec:	b672      	cpsid	i
 80074ee:	e7fe      	b.n	80074ee <statusCommand+0x12>

080074f0 <groupCommand>:
{
 80074f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f2:	46ce      	mov	lr, r9
 80074f4:	4647      	mov	r7, r8
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b08f      	sub	sp, #60	; 0x3c
 80074fa:	0004      	movs	r4, r0
 80074fc:	0016      	movs	r6, r2
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 80074fe:	2500      	movs	r5, #0
 8007500:	9504      	str	r5, [sp, #16]
 8007502:	2223      	movs	r2, #35	; 0x23
 8007504:	2100      	movs	r1, #0
 8007506:	a805      	add	r0, sp, #20
 8007508:	f00c ff0b 	bl	8014322 <memset>
 800750c:	9501      	str	r5, [sp, #4]
 800750e:	2206      	movs	r2, #6
 8007510:	2100      	movs	r1, #0
 8007512:	a802      	add	r0, sp, #8
 8007514:	f00c ff05 	bl	8014322 <memset>
	configASSERT( pcWriteBuffer );
 8007518:	2c00      	cmp	r4, #0
 800751a:	d02c      	beq.n	8007576 <groupCommand+0x86>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800751c:	4d56      	ldr	r5, [pc, #344]	; (8007678 <groupCommand+0x188>)
 800751e:	002a      	movs	r2, r5
 8007520:	2101      	movs	r1, #1
 8007522:	0030      	movs	r0, r6
 8007524:	f007 fecc 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8007528:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 800752a:	682a      	ldr	r2, [r5, #0]
 800752c:	a801      	add	r0, sp, #4
 800752e:	f00d f941 	bl	80147b4 <strncpy>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8007532:	4d52      	ldr	r5, [pc, #328]	; (800767c <groupCommand+0x18c>)
 8007534:	002f      	movs	r7, r5
 8007536:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 8007538:	0029      	movs	r1, r5
 800753a:	a801      	add	r0, sp, #4
 800753c:	f7f8 fde2 	bl	8000104 <strcmp>
 8007540:	2800      	cmp	r0, #0
 8007542:	d01a      	beq.n	800757a <groupCommand+0x8a>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8007544:	350a      	adds	r5, #10
 8007546:	42af      	cmp	r7, r5
 8007548:	d1f6      	bne.n	8007538 <groupCommand+0x48>
	type = 1;
 800754a:	2701      	movs	r7, #1
	count = 2;
 800754c:	4b4c      	ldr	r3, [pc, #304]	; (8007680 <groupCommand+0x190>)
 800754e:	2202      	movs	r2, #2
 8007550:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 8007552:	3208      	adds	r2, #8
 8007554:	494b      	ldr	r1, [pc, #300]	; (8007684 <groupCommand+0x194>)
 8007556:	0020      	movs	r0, r4
 8007558:	f00c feda 	bl	8014310 <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 800755c:	4a4a      	ldr	r2, [pc, #296]	; (8007688 <groupCommand+0x198>)
 800755e:	2102      	movs	r1, #2
 8007560:	0030      	movs	r0, r6
 8007562:	f007 fead 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8007566:	1e01      	subs	r1, r0, #0
 8007568:	4b48      	ldr	r3, [pc, #288]	; (800768c <groupCommand+0x19c>)
 800756a:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 800756c:	d100      	bne.n	8007570 <groupCommand+0x80>
 800756e:	e072      	b.n	8007656 <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8007570:	4b45      	ldr	r3, [pc, #276]	; (8007688 <groupCommand+0x198>)
 8007572:	4698      	mov	r8, r3
 8007574:	e024      	b.n	80075c0 <groupCommand+0xd0>
	configASSERT( pcWriteBuffer );
 8007576:	b672      	cpsid	i
 8007578:	e7fe      	b.n	8007578 <groupCommand+0x88>
			type = 0; break;
 800757a:	2700      	movs	r7, #0
 800757c:	e7e6      	b.n	800754c <groupCommand+0x5c>
	else if (count == 2)
 800757e:	4b40      	ldr	r3, [pc, #256]	; (8007680 <groupCommand+0x190>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	b25b      	sxtb	r3, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d03f      	beq.n	8007608 <groupCommand+0x118>
	} else if (result == BOS_ERR_Keyword)
 8007588:	2806      	cmp	r0, #6
 800758a:	d04d      	beq.n	8007628 <groupCommand+0x138>
	else if (result == BOS_ERR_ExistingAlias)
 800758c:	2807      	cmp	r0, #7
 800758e:	d051      	beq.n	8007634 <groupCommand+0x144>
	else if (result == BOS_ERR_ExistingCmd)
 8007590:	2808      	cmp	r0, #8
 8007592:	d15a      	bne.n	800764a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 8007594:	aa01      	add	r2, sp, #4
 8007596:	493e      	ldr	r1, [pc, #248]	; (8007690 <groupCommand+0x1a0>)
 8007598:	0020      	movs	r0, r4
 800759a:	f00d f8b7 	bl	801470c <sprintf>
 800759e:	e054      	b.n	800764a <groupCommand+0x15a>
		strcat( ( char * ) pcWriteBuffer, module);
 80075a0:	a904      	add	r1, sp, #16
 80075a2:	0020      	movs	r0, r4
 80075a4:	f00d f8d2 	bl	801474c <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 80075a8:	1c69      	adds	r1, r5, #1
 80075aa:	b249      	sxtb	r1, r1
 80075ac:	4b34      	ldr	r3, [pc, #208]	; (8007680 <groupCommand+0x190>)
 80075ae:	7019      	strb	r1, [r3, #0]
 80075b0:	4a35      	ldr	r2, [pc, #212]	; (8007688 <groupCommand+0x198>)
 80075b2:	0030      	movs	r0, r6
 80075b4:	f007 fe84 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 80075b8:	1e01      	subs	r1, r0, #0
 80075ba:	4b34      	ldr	r3, [pc, #208]	; (800768c <groupCommand+0x19c>)
 80075bc:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 80075be:	d04a      	beq.n	8007656 <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 80075c0:	4643      	mov	r3, r8
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4699      	mov	r9, r3
 80075c6:	ad04      	add	r5, sp, #16
 80075c8:	001a      	movs	r2, r3
 80075ca:	0028      	movs	r0, r5
 80075cc:	f00d f8f2 	bl	80147b4 <strncpy>
 80075d0:	2300      	movs	r3, #0
 80075d2:	464a      	mov	r2, r9
 80075d4:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 80075d6:	0028      	movs	r0, r5
 80075d8:	f7fd f988 	bl	80048ec <GetID>
		if (modID < 0)	break;
 80075dc:	2800      	cmp	r0, #0
 80075de:	db2f      	blt.n	8007640 <groupCommand+0x150>
		result = AddModuleToGroup(modID, alias);
 80075e0:	b2c0      	uxtb	r0, r0
 80075e2:	a901      	add	r1, sp, #4
 80075e4:	f7fd fa4a 	bl	8004a7c <AddModuleToGroup>
		if (result != BOS_OK)	break;
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d1c8      	bne.n	800757e <groupCommand+0x8e>
		if (count > 2)
 80075ec:	4b24      	ldr	r3, [pc, #144]	; (8007680 <groupCommand+0x190>)
 80075ee:	2500      	movs	r5, #0
 80075f0:	575d      	ldrsb	r5, [r3, r5]
 80075f2:	2d02      	cmp	r5, #2
 80075f4:	ddd4      	ble.n	80075a0 <groupCommand+0xb0>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 80075f6:	0020      	movs	r0, r4
 80075f8:	f7f8 fd8e 	bl	8000118 <strlen>
 80075fc:	1820      	adds	r0, r4, r0
 80075fe:	2203      	movs	r2, #3
 8007600:	4924      	ldr	r1, [pc, #144]	; (8007694 <groupCommand+0x1a4>)
 8007602:	f00c fe85 	bl	8014310 <memcpy>
 8007606:	e7cb      	b.n	80075a0 <groupCommand+0xb0>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 8007608:	aa01      	add	r2, sp, #4
 800760a:	4923      	ldr	r1, [pc, #140]	; (8007698 <groupCommand+0x1a8>)
 800760c:	0020      	movs	r0, r4
 800760e:	f00d f87d 	bl	801470c <sprintf>
 8007612:	e01a      	b.n	800764a <groupCommand+0x15a>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8007614:	aa01      	add	r2, sp, #4
 8007616:	4921      	ldr	r1, [pc, #132]	; (800769c <groupCommand+0x1ac>)
 8007618:	a804      	add	r0, sp, #16
 800761a:	f00d f877 	bl	801470c <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800761e:	a904      	add	r1, sp, #16
 8007620:	0020      	movs	r0, r4
 8007622:	f00d f893 	bl	801474c <strcat>
 8007626:	e010      	b.n	800764a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 8007628:	aa01      	add	r2, sp, #4
 800762a:	491d      	ldr	r1, [pc, #116]	; (80076a0 <groupCommand+0x1b0>)
 800762c:	0020      	movs	r0, r4
 800762e:	f00d f86d 	bl	801470c <sprintf>
 8007632:	e00a      	b.n	800764a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 8007634:	aa01      	add	r2, sp, #4
 8007636:	491b      	ldr	r1, [pc, #108]	; (80076a4 <groupCommand+0x1b4>)
 8007638:	0020      	movs	r0, r4
 800763a:	f00d f867 	bl	801470c <sprintf>
 800763e:	e004      	b.n	800764a <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 8007640:	aa04      	add	r2, sp, #16
 8007642:	4919      	ldr	r1, [pc, #100]	; (80076a8 <groupCommand+0x1b8>)
 8007644:	0020      	movs	r0, r4
 8007646:	f00d f861 	bl	801470c <sprintf>
}
 800764a:	2000      	movs	r0, #0
 800764c:	b00f      	add	sp, #60	; 0x3c
 800764e:	bcc0      	pop	{r6, r7}
 8007650:	46b9      	mov	r9, r7
 8007652:	46b0      	mov	r8, r6
 8007654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 8007656:	4b0a      	ldr	r3, [pc, #40]	; (8007680 <groupCommand+0x190>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b25b      	sxtb	r3, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d0d3      	beq.n	8007608 <groupCommand+0x118>
	else if (result == BOS_OK && type) {
 8007660:	2f00      	cmp	r7, #0
 8007662:	d1d7      	bne.n	8007614 <groupCommand+0x124>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 8007664:	aa01      	add	r2, sp, #4
 8007666:	4911      	ldr	r1, [pc, #68]	; (80076ac <groupCommand+0x1bc>)
 8007668:	a804      	add	r0, sp, #16
 800766a:	f00d f84f 	bl	801470c <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800766e:	a904      	add	r1, sp, #16
 8007670:	0020      	movs	r0, r4
 8007672:	f00d f86b 	bl	801474c <strcat>
 8007676:	e7e8      	b.n	800764a <groupCommand+0x15a>
 8007678:	20001288 	.word	0x20001288
 800767c:	20000e3c 	.word	0x20000e3c
 8007680:	2000124e 	.word	0x2000124e
 8007684:	0801ba84 	.word	0x0801ba84
 8007688:	2000127c 	.word	0x2000127c
 800768c:	20001250 	.word	0x20001250
 8007690:	0801bb70 	.word	0x0801bb70
 8007694:	0801ba90 	.word	0x0801ba90
 8007698:	0801ba94 	.word	0x0801ba94
 800769c:	0801bac0 	.word	0x0801bac0
 80076a0:	0801bafc 	.word	0x0801bafc
 80076a4:	0801bb3c 	.word	0x0801bb3c
 80076a8:	0801bbb0 	.word	0x0801bbb0
 80076ac:	0801badc 	.word	0x0801badc

080076b0 <nameCommand>:
{
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	0004      	movs	r4, r0
 80076b4:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 80076b6:	2c00      	cmp	r4, #0
 80076b8:	d01a      	beq.n	80076f0 <nameCommand+0x40>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80076ba:	4d1d      	ldr	r5, [pc, #116]	; (8007730 <nameCommand+0x80>)
 80076bc:	002a      	movs	r2, r5
 80076be:	2101      	movs	r1, #1
 80076c0:	f007 fdfe 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 80076c4:	0001      	movs	r1, r0
 80076c6:	4b1b      	ldr	r3, [pc, #108]	; (8007734 <nameCommand+0x84>)
 80076c8:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 80076ca:	682b      	ldr	r3, [r5, #0]
 80076cc:	2b09      	cmp	r3, #9
 80076ce:	dd01      	ble.n	80076d4 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 80076d0:	2300      	movs	r3, #0
 80076d2:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 80076d4:	4b18      	ldr	r3, [pc, #96]	; (8007738 <nameCommand+0x88>)
 80076d6:	7818      	ldrb	r0, [r3, #0]
 80076d8:	f7fd f96c 	bl	80049b4 <NameModule>
	if (result == BOS_OK)
 80076dc:	2800      	cmp	r0, #0
 80076de:	d009      	beq.n	80076f4 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 80076e0:	2806      	cmp	r0, #6
 80076e2:	d010      	beq.n	8007706 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 80076e4:	2807      	cmp	r0, #7
 80076e6:	d015      	beq.n	8007714 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 80076e8:	2808      	cmp	r0, #8
 80076ea:	d01a      	beq.n	8007722 <nameCommand+0x72>
}
 80076ec:	2000      	movs	r0, #0
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 80076f0:	b672      	cpsid	i
 80076f2:	e7fe      	b.n	80076f2 <nameCommand+0x42>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 80076f4:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <nameCommand+0x84>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a0f      	ldr	r2, [pc, #60]	; (8007738 <nameCommand+0x88>)
 80076fa:	7812      	ldrb	r2, [r2, #0]
 80076fc:	490f      	ldr	r1, [pc, #60]	; (800773c <nameCommand+0x8c>)
 80076fe:	0020      	movs	r0, r4
 8007700:	f00d f804 	bl	801470c <sprintf>
 8007704:	e7f2      	b.n	80076ec <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 8007706:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <nameCommand+0x84>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	490d      	ldr	r1, [pc, #52]	; (8007740 <nameCommand+0x90>)
 800770c:	0020      	movs	r0, r4
 800770e:	f00c fffd 	bl	801470c <sprintf>
 8007712:	e7eb      	b.n	80076ec <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 8007714:	4b07      	ldr	r3, [pc, #28]	; (8007734 <nameCommand+0x84>)
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	490a      	ldr	r1, [pc, #40]	; (8007744 <nameCommand+0x94>)
 800771a:	0020      	movs	r0, r4
 800771c:	f00c fff6 	bl	801470c <sprintf>
 8007720:	e7e4      	b.n	80076ec <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 8007722:	4b04      	ldr	r3, [pc, #16]	; (8007734 <nameCommand+0x84>)
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	4908      	ldr	r1, [pc, #32]	; (8007748 <nameCommand+0x98>)
 8007728:	0020      	movs	r0, r4
 800772a:	f00c ffef 	bl	801470c <sprintf>
 800772e:	e7dd      	b.n	80076ec <nameCommand+0x3c>
 8007730:	20001284 	.word	0x20001284
 8007734:	20001254 	.word	0x20001254
 8007738:	2000104c 	.word	0x2000104c
 800773c:	0801bbd4 	.word	0x0801bbd4
 8007740:	0801bafc 	.word	0x0801bafc
 8007744:	0801bb3c 	.word	0x0801bb3c
 8007748:	0801bb70 	.word	0x0801bb70

0800774c <bootloaderUpdateCommand>:
{
 800774c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800774e:	46c6      	mov	lr, r8
 8007750:	b500      	push	{lr}
 8007752:	b082      	sub	sp, #8
 8007754:	0004      	movs	r4, r0
 8007756:	0017      	movs	r7, r2
 8007758:	2600      	movs	r6, #0
 800775a:	2500      	movs	r5, #0
	configASSERT( pcWriteBuffer );
 800775c:	2800      	cmp	r0, #0
 800775e:	d04f      	beq.n	8007800 <bootloaderUpdateCommand+0xb4>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8007760:	4a4d      	ldr	r2, [pc, #308]	; (8007898 <bootloaderUpdateCommand+0x14c>)
 8007762:	2101      	movs	r1, #1
 8007764:	0038      	movs	r0, r7
 8007766:	f007 fdab 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 800776a:	2800      	cmp	r0, #0
 800776c:	d04a      	beq.n	8007804 <bootloaderUpdateCommand+0xb8>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 800776e:	4b4a      	ldr	r3, [pc, #296]	; (8007898 <bootloaderUpdateCommand+0x14c>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	494a      	ldr	r1, [pc, #296]	; (800789c <bootloaderUpdateCommand+0x150>)
 8007774:	f00d f80d 	bl	8014792 <strncmp>
 8007778:	2800      	cmp	r0, #0
 800777a:	d137      	bne.n	80077ec <bootloaderUpdateCommand+0xa0>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800777c:	4a48      	ldr	r2, [pc, #288]	; (80078a0 <bootloaderUpdateCommand+0x154>)
 800777e:	2102      	movs	r1, #2
 8007780:	0038      	movs	r0, r7
 8007782:	f007 fd9d 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8007786:	4b47      	ldr	r3, [pc, #284]	; (80078a4 <bootloaderUpdateCommand+0x158>)
 8007788:	4698      	mov	r8, r3
 800778a:	6018      	str	r0, [r3, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800778c:	4a46      	ldr	r2, [pc, #280]	; (80078a8 <bootloaderUpdateCommand+0x15c>)
 800778e:	2103      	movs	r1, #3
 8007790:	0038      	movs	r0, r7
 8007792:	f007 fd95 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 8007796:	4b45      	ldr	r3, [pc, #276]	; (80078ac <bootloaderUpdateCommand+0x160>)
 8007798:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 800779a:	4643      	mov	r3, r8
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;				
 80077a2:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 80077a4:	2b23      	cmp	r3, #35	; 0x23
 80077a6:	d057      	beq.n	8007858 <bootloaderUpdateCommand+0x10c>
			if (pcParameterString3[0] == 'p') {
 80077a8:	4b40      	ldr	r3, [pc, #256]	; (80078ac <bootloaderUpdateCommand+0x160>)
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	2300      	movs	r3, #0
 80077ae:	56c3      	ldrsb	r3, [r0, r3]
 80077b0:	2b70      	cmp	r3, #112	; 0x70
 80077b2:	d057      	beq.n	8007864 <bootloaderUpdateCommand+0x118>
				result = BOS_ERR_WrongValue;		
 80077b4:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 80077b6:	4b3e      	ldr	r3, [pc, #248]	; (80078b0 <bootloaderUpdateCommand+0x164>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	42b3      	cmp	r3, r6
 80077bc:	d057      	beq.n	800786e <bootloaderUpdateCommand+0x122>
				BOS.response = BOS_RESPONSE_NONE;							
 80077be:	4b3d      	ldr	r3, [pc, #244]	; (80078b4 <bootloaderUpdateCommand+0x168>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 80077c4:	4b3c      	ldr	r3, [pc, #240]	; (80078b8 <bootloaderUpdateCommand+0x16c>)
 80077c6:	701d      	strb	r5, [r3, #0]
 80077c8:	3201      	adds	r2, #1
 80077ca:	211a      	movs	r1, #26
 80077cc:	0030      	movs	r0, r6
 80077ce:	f002 f817 	bl	8009800 <SendMessageToModule>
				osDelay(100);			
 80077d2:	2064      	movs	r0, #100	; 0x64
 80077d4:	f007 fc4d 	bl	800f072 <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 80077d8:	4b38      	ldr	r3, [pc, #224]	; (80078bc <bootloaderUpdateCommand+0x170>)
 80077da:	781a      	ldrb	r2, [r3, #0]
 80077dc:	4b34      	ldr	r3, [pc, #208]	; (80078b0 <bootloaderUpdateCommand+0x164>)
 80077de:	7818      	ldrb	r0, [r3, #0]
 80077e0:	002b      	movs	r3, r5
 80077e2:	0031      	movs	r1, r6
 80077e4:	f7fc fd44 	bl	8004270 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 80077e8:	2f68      	cmp	r7, #104	; 0x68
 80077ea:	d104      	bne.n	80077f6 <bootloaderUpdateCommand+0xaa>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 80077ec:	220f      	movs	r2, #15
 80077ee:	4934      	ldr	r1, [pc, #208]	; (80078c0 <bootloaderUpdateCommand+0x174>)
 80077f0:	0020      	movs	r0, r4
 80077f2:	f00c fd8d 	bl	8014310 <memcpy>
}
 80077f6:	2000      	movs	r0, #0
 80077f8:	b002      	add	sp, #8
 80077fa:	bc80      	pop	{r7}
 80077fc:	46b8      	mov	r8, r7
 80077fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8007800:	b672      	cpsid	i
 8007802:	e7fe      	b.n	8007802 <bootloaderUpdateCommand+0xb6>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 8007804:	4b2a      	ldr	r3, [pc, #168]	; (80078b0 <bootloaderUpdateCommand+0x164>)
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	492e      	ldr	r1, [pc, #184]	; (80078c4 <bootloaderUpdateCommand+0x178>)
 800780a:	0020      	movs	r0, r4
 800780c:	f00c ff7e 	bl	801470c <sprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 8007810:	4b2d      	ldr	r3, [pc, #180]	; (80078c8 <bootloaderUpdateCommand+0x17c>)
 8007812:	6819      	ldr	r1, [r3, #0]
 8007814:	0020      	movs	r0, r4
 8007816:	f00c ff99 	bl	801474c <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800781a:	0020      	movs	r0, r4
 800781c:	f7f8 fc7c 	bl	8000118 <strlen>
 8007820:	b282      	uxth	r2, r0
 8007822:	4b26      	ldr	r3, [pc, #152]	; (80078bc <bootloaderUpdateCommand+0x170>)
 8007824:	7818      	ldrb	r0, [r3, #0]
 8007826:	2301      	movs	r3, #1
 8007828:	425b      	negs	r3, r3
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	3333      	adds	r3, #51	; 0x33
 800782e:	0021      	movs	r1, r4
 8007830:	f007 faf0 	bl	800ee14 <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8007834:	4b25      	ldr	r3, [pc, #148]	; (80078cc <bootloaderUpdateCommand+0x180>)
 8007836:	4a26      	ldr	r2, [pc, #152]	; (80078d0 <bootloaderUpdateCommand+0x184>)
 8007838:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 800783a:	4b26      	ldr	r3, [pc, #152]	; (80078d4 <bootloaderUpdateCommand+0x188>)
 800783c:	2201      	movs	r2, #1
 800783e:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007840:	200a      	movs	r0, #10
 8007842:	f007 fc16 	bl	800f072 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	4b23      	ldr	r3, [pc, #140]	; (80078d8 <bootloaderUpdateCommand+0x18c>)
 800784c:	4a23      	ldr	r2, [pc, #140]	; (80078dc <bootloaderUpdateCommand+0x190>)
 800784e:	60da      	str	r2, [r3, #12]
 8007850:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007854:	46c0      	nop			; (mov r8, r8)
 8007856:	e7fd      	b.n	8007854 <bootloaderUpdateCommand+0x108>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8007858:	3001      	adds	r0, #1
 800785a:	f00c faf8 	bl	8013e4e <atol>
 800785e:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 8007860:	2700      	movs	r7, #0
 8007862:	e7a1      	b.n	80077a8 <bootloaderUpdateCommand+0x5c>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8007864:	3001      	adds	r0, #1
 8007866:	f00c faf2 	bl	8013e4e <atol>
 800786a:	b2c5      	uxtb	r5, r0
 800786c:	e7a3      	b.n	80077b6 <bootloaderUpdateCommand+0x6a>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 800786e:	2300      	movs	r3, #0
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	3319      	adds	r3, #25
 8007874:	2200      	movs	r2, #0
 8007876:	2100      	movs	r1, #0
 8007878:	0028      	movs	r0, r5
 800787a:	f001 fd97 	bl	80093ac <SendMessageFromPort>
				osDelay(100);
 800787e:	2064      	movs	r0, #100	; 0x64
 8007880:	f007 fbf7 	bl	800f072 <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 8007884:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <bootloaderUpdateCommand+0x164>)
 8007886:	7818      	ldrb	r0, [r3, #0]
 8007888:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <bootloaderUpdateCommand+0x170>)
 800788a:	781a      	ldrb	r2, [r3, #0]
 800788c:	002b      	movs	r3, r5
 800788e:	0001      	movs	r1, r0
 8007890:	f7fc fcee 	bl	8004270 <remoteBootloaderUpdate>
 8007894:	e7a8      	b.n	80077e8 <bootloaderUpdateCommand+0x9c>
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	20001280 	.word	0x20001280
 800789c:	0801bc0c 	.word	0x0801bc0c
 80078a0:	2000128c 	.word	0x2000128c
 80078a4:	20001264 	.word	0x20001264
 80078a8:	20001290 	.word	0x20001290
 80078ac:	2000126c 	.word	0x2000126c
 80078b0:	2000104c 	.word	0x2000104c
 80078b4:	20006d18 	.word	0x20006d18
 80078b8:	20000f18 	.word	0x20000f18
 80078bc:	20000aa7 	.word	0x20000aa7
 80078c0:	0801b698 	.word	0x0801b698
 80078c4:	0801bbec 	.word	0x0801bbec
 80078c8:	20000074 	.word	0x20000074
 80078cc:	20007ff0 	.word	0x20007ff0
 80078d0:	deadbeef 	.word	0xdeadbeef
 80078d4:	20000ed2 	.word	0x20000ed2
 80078d8:	e000ed00 	.word	0xe000ed00
 80078dc:	05fa0004 	.word	0x05fa0004

080078e0 <pingCommand>:
{
 80078e0:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d01e      	beq.n	8007924 <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 80078e6:	4b15      	ldr	r3, [pc, #84]	; (800793c <pingCommand+0x5c>)
 80078e8:	781a      	ldrb	r2, [r3, #0]
 80078ea:	0093      	lsls	r3, r2, #2
 80078ec:	189b      	adds	r3, r3, r2
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	4913      	ldr	r1, [pc, #76]	; (8007940 <pingCommand+0x60>)
 80078f2:	5c5b      	ldrb	r3, [r3, r1]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d117      	bne.n	8007928 <pingCommand+0x48>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 80078f8:	4912      	ldr	r1, [pc, #72]	; (8007944 <pingCommand+0x64>)
 80078fa:	f00c ff07 	bl	801470c <sprintf>
	RTOS_IND_blink(200);	
 80078fe:	2580      	movs	r5, #128	; 0x80
 8007900:	012d      	lsls	r5, r5, #4
 8007902:	2490      	movs	r4, #144	; 0x90
 8007904:	05e4      	lsls	r4, r4, #23
 8007906:	2201      	movs	r2, #1
 8007908:	0029      	movs	r1, r5
 800790a:	0020      	movs	r0, r4
 800790c:	f00a fd06 	bl	801231c <HAL_GPIO_WritePin>
 8007910:	20c8      	movs	r0, #200	; 0xc8
 8007912:	f007 fbae 	bl	800f072 <osDelay>
 8007916:	2200      	movs	r2, #0
 8007918:	0029      	movs	r1, r5
 800791a:	0020      	movs	r0, r4
 800791c:	f00a fcfe 	bl	801231c <HAL_GPIO_WritePin>
}
 8007920:	2000      	movs	r0, #0
 8007922:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8007924:	b672      	cpsid	i
 8007926:	e7fe      	b.n	8007926 <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 8007928:	0093      	lsls	r3, r2, #2
 800792a:	189b      	adds	r3, r3, r2
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	4904      	ldr	r1, [pc, #16]	; (8007940 <pingCommand+0x60>)
 8007930:	185b      	adds	r3, r3, r1
 8007932:	4905      	ldr	r1, [pc, #20]	; (8007948 <pingCommand+0x68>)
 8007934:	f00c feea 	bl	801470c <sprintf>
 8007938:	e7e1      	b.n	80078fe <pingCommand+0x1e>
 800793a:	46c0      	nop			; (mov r8, r8)
 800793c:	2000104c 	.word	0x2000104c
 8007940:	20000f48 	.word	0x20000f48
 8007944:	0801bc10 	.word	0x0801bc10
 8007948:	0801bc24 	.word	0x0801bc24

0800794c <prvRunTimeStatsCommand>:
{
 800794c:	b510      	push	{r4, lr}
 800794e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8007950:	d009      	beq.n	8007966 <prvRunTimeStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 8007952:	2251      	movs	r2, #81	; 0x51
 8007954:	4905      	ldr	r1, [pc, #20]	; (800796c <prvRunTimeStatsCommand+0x20>)
 8007956:	f00c fcdb 	bl	8014310 <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 800795a:	0020      	movs	r0, r4
 800795c:	3050      	adds	r0, #80	; 0x50
 800795e:	f008 ff35 	bl	80107cc <vTaskGetRunTimeStats>
}
 8007962:	2000      	movs	r0, #0
 8007964:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8007966:	b672      	cpsid	i
 8007968:	e7fe      	b.n	8007968 <prvRunTimeStatsCommand+0x1c>
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	0801bc40 	.word	0x0801bc40

08007970 <prvTaskStatsCommand>:
{
 8007970:	b510      	push	{r4, lr}
 8007972:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8007974:	d009      	beq.n	800798a <prvTaskStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 8007976:	225b      	movs	r2, #91	; 0x5b
 8007978:	4905      	ldr	r1, [pc, #20]	; (8007990 <prvTaskStatsCommand+0x20>)
 800797a:	f00c fcc9 	bl	8014310 <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 800797e:	0020      	movs	r0, r4
 8007980:	305a      	adds	r0, #90	; 0x5a
 8007982:	f008 feb5 	bl	80106f0 <vTaskList>
}
 8007986:	2000      	movs	r0, #0
 8007988:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800798a:	b672      	cpsid	i
 800798c:	e7fe      	b.n	800798c <prvTaskStatsCommand+0x1c>
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	0801bc94 	.word	0x0801bc94

08007994 <resetCommand>:
	configASSERT( pcWriteBuffer );
 8007994:	2800      	cmp	r0, #0
 8007996:	d008      	beq.n	80079aa <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <resetCommand+0x1c>)
 800799e:	4a05      	ldr	r2, [pc, #20]	; (80079b4 <resetCommand+0x20>)
 80079a0:	60da      	str	r2, [r3, #12]
 80079a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	e7fd      	b.n	80079a6 <resetCommand+0x12>
 80079aa:	b672      	cpsid	i
 80079ac:	e7fe      	b.n	80079ac <resetCommand+0x18>
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	e000ed00 	.word	0xe000ed00
 80079b4:	05fa0004 	.word	0x05fa0004

080079b8 <RegisterUserCLICommands>:
}
 80079b8:	4770      	bx	lr
	...

080079bc <vRegisterCLICommands>:
{
 80079bc:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 80079be:	482f      	ldr	r0, [pc, #188]	; (8007a7c <vRegisterCLICommands+0xc0>)
 80079c0:	f007 fbd4 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 80079c4:	482e      	ldr	r0, [pc, #184]	; (8007a80 <vRegisterCLICommands+0xc4>)
 80079c6:	f007 fbd1 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 80079ca:	482e      	ldr	r0, [pc, #184]	; (8007a84 <vRegisterCLICommands+0xc8>)
 80079cc:	f007 fbce 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 80079d0:	482d      	ldr	r0, [pc, #180]	; (8007a88 <vRegisterCLICommands+0xcc>)
 80079d2:	f007 fbcb 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &exploreCommandDefinition );
 80079d6:	482d      	ldr	r0, [pc, #180]	; (8007a8c <vRegisterCLICommands+0xd0>)
 80079d8:	f007 fbc8 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 80079dc:	482c      	ldr	r0, [pc, #176]	; (8007a90 <vRegisterCLICommands+0xd4>)
 80079de:	f007 fbc5 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 80079e2:	482c      	ldr	r0, [pc, #176]	; (8007a94 <vRegisterCLICommands+0xd8>)
 80079e4:	f007 fbc2 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 80079e8:	482b      	ldr	r0, [pc, #172]	; (8007a98 <vRegisterCLICommands+0xdc>)
 80079ea:	f007 fbbf 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 80079ee:	482b      	ldr	r0, [pc, #172]	; (8007a9c <vRegisterCLICommands+0xe0>)
 80079f0:	f007 fbbc 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 80079f4:	482a      	ldr	r0, [pc, #168]	; (8007aa0 <vRegisterCLICommands+0xe4>)
 80079f6:	f007 fbb9 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 80079fa:	482a      	ldr	r0, [pc, #168]	; (8007aa4 <vRegisterCLICommands+0xe8>)
 80079fc:	f007 fbb6 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 8007a00:	4829      	ldr	r0, [pc, #164]	; (8007aa8 <vRegisterCLICommands+0xec>)
 8007a02:	f007 fbb3 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 8007a06:	4829      	ldr	r0, [pc, #164]	; (8007aac <vRegisterCLICommands+0xf0>)
 8007a08:	f007 fbb0 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 8007a0c:	4828      	ldr	r0, [pc, #160]	; (8007ab0 <vRegisterCLICommands+0xf4>)
 8007a0e:	f007 fbad 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 8007a12:	4828      	ldr	r0, [pc, #160]	; (8007ab4 <vRegisterCLICommands+0xf8>)
 8007a14:	f007 fbaa 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 8007a18:	4827      	ldr	r0, [pc, #156]	; (8007ab8 <vRegisterCLICommands+0xfc>)
 8007a1a:	f007 fba7 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 8007a1e:	4827      	ldr	r0, [pc, #156]	; (8007abc <vRegisterCLICommands+0x100>)
 8007a20:	f007 fba4 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 8007a24:	4826      	ldr	r0, [pc, #152]	; (8007ac0 <vRegisterCLICommands+0x104>)
 8007a26:	f007 fba1 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 8007a2a:	4826      	ldr	r0, [pc, #152]	; (8007ac4 <vRegisterCLICommands+0x108>)
 8007a2c:	f007 fb9e 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 8007a30:	4825      	ldr	r0, [pc, #148]	; (8007ac8 <vRegisterCLICommands+0x10c>)
 8007a32:	f007 fb9b 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 8007a36:	4825      	ldr	r0, [pc, #148]	; (8007acc <vRegisterCLICommands+0x110>)
 8007a38:	f007 fb98 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 8007a3c:	4824      	ldr	r0, [pc, #144]	; (8007ad0 <vRegisterCLICommands+0x114>)
 8007a3e:	f007 fb95 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 8007a42:	4824      	ldr	r0, [pc, #144]	; (8007ad4 <vRegisterCLICommands+0x118>)
 8007a44:	f007 fb92 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 8007a48:	4823      	ldr	r0, [pc, #140]	; (8007ad8 <vRegisterCLICommands+0x11c>)
 8007a4a:	f007 fb8f 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 8007a4e:	4823      	ldr	r0, [pc, #140]	; (8007adc <vRegisterCLICommands+0x120>)
 8007a50:	f007 fb8c 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 8007a54:	4822      	ldr	r0, [pc, #136]	; (8007ae0 <vRegisterCLICommands+0x124>)
 8007a56:	f007 fb89 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 8007a5a:	4822      	ldr	r0, [pc, #136]	; (8007ae4 <vRegisterCLICommands+0x128>)
 8007a5c:	f007 fb86 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 8007a60:	4821      	ldr	r0, [pc, #132]	; (8007ae8 <vRegisterCLICommands+0x12c>)
 8007a62:	f007 fb83 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 8007a66:	4821      	ldr	r0, [pc, #132]	; (8007aec <vRegisterCLICommands+0x130>)
 8007a68:	f007 fb80 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 29;
 8007a6c:	4b20      	ldr	r3, [pc, #128]	; (8007af0 <vRegisterCLICommands+0x134>)
 8007a6e:	221d      	movs	r2, #29
 8007a70:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007a72:	f003 ffc3 	bl	800b9fc <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8007a76:	f7ff ff9f 	bl	80079b8 <RegisterUserCLICommands>
}
 8007a7a:	bd10      	pop	{r4, pc}
 8007a7c:	0801cb78 	.word	0x0801cb78
 8007a80:	0801cb68 	.word	0x0801cb68
 8007a84:	0801cb58 	.word	0x0801cb58
 8007a88:	0801ca74 	.word	0x0801ca74
 8007a8c:	0801cac4 	.word	0x0801cac4
 8007a90:	0801cb98 	.word	0x0801cb98
 8007a94:	0801cb38 	.word	0x0801cb38
 8007a98:	0801caf4 	.word	0x0801caf4
 8007a9c:	0801cbe8 	.word	0x0801cbe8
 8007aa0:	0801cb14 	.word	0x0801cb14
 8007aa4:	0801cba8 	.word	0x0801cba8
 8007aa8:	0801ca64 	.word	0x0801ca64
 8007aac:	0801cb88 	.word	0x0801cb88
 8007ab0:	0801cbc8 	.word	0x0801cbc8
 8007ab4:	0801cae4 	.word	0x0801cae4
 8007ab8:	0801caa4 	.word	0x0801caa4
 8007abc:	0801cc08 	.word	0x0801cc08
 8007ac0:	0801ca94 	.word	0x0801ca94
 8007ac4:	0801cbb8 	.word	0x0801cbb8
 8007ac8:	0801cc28 	.word	0x0801cc28
 8007acc:	0801cb04 	.word	0x0801cb04
 8007ad0:	0801cad4 	.word	0x0801cad4
 8007ad4:	0801cbd8 	.word	0x0801cbd8
 8007ad8:	0801ca54 	.word	0x0801ca54
 8007adc:	0801cb48 	.word	0x0801cb48
 8007ae0:	0801cab4 	.word	0x0801cab4
 8007ae4:	0801ca84 	.word	0x0801ca84
 8007ae8:	0801cc18 	.word	0x0801cc18
 8007aec:	0801cbf8 	.word	0x0801cbf8
 8007af0:	20006c9c 	.word	0x20006c9c

08007af4 <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 8007af4:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 8007af6:	1e45      	subs	r5, r0, #1
 8007af8:	00ec      	lsls	r4, r5, #3
 8007afa:	1b60      	subs	r0, r4, r5
 8007afc:	00c0      	lsls	r0, r0, #3
 8007afe:	4e05      	ldr	r6, [pc, #20]	; (8007b14 <StopMsgDMA+0x20>)
 8007b00:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8007b02:	f009 fd4a 	bl	801159a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8007b06:	1b64      	subs	r4, r4, r5
 8007b08:	00e4      	lsls	r4, r4, #3
 8007b0a:	59a3      	ldr	r3, [r4, r6]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	605a      	str	r2, [r3, #4]
}
 8007b10:	bd70      	pop	{r4, r5, r6, pc}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	20001af0 	.word	0x20001af0

08007b18 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 8007b18:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 8007b1a:	1e44      	subs	r4, r0, #1
 8007b1c:	00e5      	lsls	r5, r4, #3
 8007b1e:	1b28      	subs	r0, r5, r4
 8007b20:	00c0      	lsls	r0, r0, #3
 8007b22:	4e07      	ldr	r6, [pc, #28]	; (8007b40 <StopStreamDMA+0x28>)
 8007b24:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8007b26:	f009 fd38 	bl	801159a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8007b2a:	1b2d      	subs	r5, r5, r4
 8007b2c:	00ed      	lsls	r5, r5, #3
 8007b2e:	59aa      	ldr	r2, [r5, r6]
 8007b30:	2300      	movs	r3, #0
 8007b32:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 8007b34:	00a4      	lsls	r4, r4, #2
 8007b36:	4a03      	ldr	r2, [pc, #12]	; (8007b44 <StopStreamDMA+0x2c>)
 8007b38:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 8007b3a:	4a03      	ldr	r2, [pc, #12]	; (8007b48 <StopStreamDMA+0x30>)
 8007b3c:	50a3      	str	r3, [r4, r2]

}
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	20001ce8 	.word	0x20001ce8
 8007b44:	2000141c 	.word	0x2000141c
 8007b48:	20001444 	.word	0x20001444

08007b4c <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007b50:	f7ff ffd0 	bl	8007af4 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 8007b54:	3c01      	subs	r4, #1
 8007b56:	00e0      	lsls	r0, r4, #3
 8007b58:	1b02      	subs	r2, r0, r4
 8007b5a:	00d2      	lsls	r2, r2, #3
 8007b5c:	4903      	ldr	r1, [pc, #12]	; (8007b6c <SwitchMsgDMAToStream+0x20>)
 8007b5e:	5851      	ldr	r1, [r2, r1]
 8007b60:	4b03      	ldr	r3, [pc, #12]	; (8007b70 <SwitchMsgDMAToStream+0x24>)
 8007b62:	18d0      	adds	r0, r2, r3
 8007b64:	f005 fb92 	bl	800d28c <DMA_STREAM_CH_Init>
}
 8007b68:	bd10      	pop	{r4, pc}
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	20001af0 	.word	0x20001af0
 8007b70:	20001ce8 	.word	0x20001ce8

08007b74 <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 8007b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b76:	46c6      	mov	lr, r8
 8007b78:	b500      	push	{lr}
 8007b7a:	0007      	movs	r7, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 8007b7c:	f7ff ffcc 	bl	8007b18 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 8007b80:	1e7c      	subs	r4, r7, #1
 8007b82:	00e5      	lsls	r5, r4, #3
 8007b84:	1b2e      	subs	r6, r5, r4
 8007b86:	00f6      	lsls	r6, r6, #3
 8007b88:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <SwitchStreamDMAToMsg+0x5c>)
 8007b8a:	18f6      	adds	r6, r6, r3
 8007b8c:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <SwitchStreamDMAToMsg+0x60>)
 8007b8e:	4698      	mov	r8, r3
 8007b90:	1b2b      	subs	r3, r5, r4
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	4642      	mov	r2, r8
 8007b96:	5899      	ldr	r1, [r3, r2]
 8007b98:	0030      	movs	r0, r6
 8007b9a:	f005 fb01 	bl	800d1a0 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 8007b9e:	1b2b      	subs	r3, r5, r4
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	4443      	add	r3, r8
 8007ba4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007ba6:	f003 ff63 	bl	800ba70 <GetPort>
 8007baa:	2300      	movs	r3, #0
 8007bac:	4a0a      	ldr	r2, [pc, #40]	; (8007bd8 <SwitchStreamDMAToMsg+0x64>)
 8007bae:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 8007bb0:	1b2d      	subs	r5, r5, r4
 8007bb2:	00ed      	lsls	r5, r5, #3
 8007bb4:	4642      	mov	r2, r8
 8007bb6:	50ab      	str	r3, [r5, r2]
	dmaStreamDst[port-1] = 0;
 8007bb8:	00a4      	lsls	r4, r4, #2
 8007bba:	4a08      	ldr	r2, [pc, #32]	; (8007bdc <SwitchStreamDMAToMsg+0x68>)
 8007bbc:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 8007bbe:	0038      	movs	r0, r7
 8007bc0:	f007 f90a 	bl	800edd8 <GetUart>
 8007bc4:	0031      	movs	r1, r6
 8007bc6:	f005 ff5b 	bl	800da80 <DMA_MSG_RX_Setup>
		
}
 8007bca:	bc80      	pop	{r7}
 8007bcc:	46b8      	mov	r8, r7
 8007bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bd0:	20001af0 	.word	0x20001af0
 8007bd4:	20001ce8 	.word	0x20001ce8
 8007bd8:	200010c8 	.word	0x200010c8
 8007bdc:	20001430 	.word	0x20001430

08007be0 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 8007be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be2:	0005      	movs	r5, r0
 8007be4:	000e      	movs	r6, r1
 8007be6:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 8007be8:	f003 ff42 	bl	800ba70 <GetPort>
 8007bec:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007bee:	4b0d      	ldr	r3, [pc, #52]	; (8007c24 <StartDMAstream+0x44>)
 8007bf0:	5c1b      	ldrb	r3, [r3, r0]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d902      	bls.n	8007bfc <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007bf6:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d112      	bne.n	8007c22 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 8007bfc:	0020      	movs	r0, r4
 8007bfe:	f7ff ffa5 	bl	8007b4c <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 8007c02:	1e63      	subs	r3, r4, #1
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4a08      	ldr	r2, [pc, #32]	; (8007c28 <StartDMAstream+0x48>)
 8007c08:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 8007c0a:	4a06      	ldr	r2, [pc, #24]	; (8007c24 <StartDMAstream+0x44>)
 8007c0c:	2102      	movs	r1, #2
 8007c0e:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 8007c10:	4a06      	ldr	r2, [pc, #24]	; (8007c2c <StartDMAstream+0x4c>)
 8007c12:	2100      	movs	r1, #0
 8007c14:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 8007c16:	003a      	movs	r2, r7
 8007c18:	0031      	movs	r1, r6
 8007c1a:	0028      	movs	r0, r5
 8007c1c:	f005 ff8e 	bl	800db3c <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007c20:	2000      	movs	r0, #0
}
 8007c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c24:	200010c8 	.word	0x200010c8
 8007c28:	20001430 	.word	0x20001430
 8007c2c:	2000141c 	.word	0x2000141c

08007c30 <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 8007c34:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <DMA_IRQHandler+0x50>)
 8007c36:	5c1b      	ldrb	r3, [r3, r0]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d008      	beq.n	8007c4e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 8007c3c:	3c01      	subs	r4, #1
 8007c3e:	00e0      	lsls	r0, r4, #3
 8007c40:	1b00      	subs	r0, r0, r4
 8007c42:	00c0      	lsls	r0, r0, #3
 8007c44:	4c0f      	ldr	r4, [pc, #60]	; (8007c84 <DMA_IRQHandler+0x54>)
 8007c46:	1900      	adds	r0, r0, r4
 8007c48:	f009 fcd0 	bl	80115ec <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 8007c4e:	1e45      	subs	r5, r0, #1
 8007c50:	00e8      	lsls	r0, r5, #3
 8007c52:	1b40      	subs	r0, r0, r5
 8007c54:	00c0      	lsls	r0, r0, #3
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <DMA_IRQHandler+0x58>)
 8007c58:	18c0      	adds	r0, r0, r3
 8007c5a:	f009 fcc7 	bl	80115ec <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 8007c5e:	00aa      	lsls	r2, r5, #2
 8007c60:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <DMA_IRQHandler+0x5c>)
 8007c62:	58d2      	ldr	r2, [r2, r3]
 8007c64:	2a00      	cmp	r2, #0
 8007c66:	d006      	beq.n	8007c76 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 8007c68:	4909      	ldr	r1, [pc, #36]	; (8007c90 <DMA_IRQHandler+0x60>)
 8007c6a:	00ad      	lsls	r5, r5, #2
 8007c6c:	586b      	ldr	r3, [r5, r1]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d8ea      	bhi.n	8007c4c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007c76:	0020      	movs	r0, r4
 8007c78:	f7ff ff4e 	bl	8007b18 <StopStreamDMA>
}
 8007c7c:	e7e6      	b.n	8007c4c <DMA_IRQHandler+0x1c>
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	200010c8 	.word	0x200010c8
 8007c84:	20001af0 	.word	0x20001af0
 8007c88:	20001ce8 	.word	0x20001ce8
 8007c8c:	20001444 	.word	0x20001444
 8007c90:	2000141c 	.word	0x2000141c

08007c94 <ResetUartORE>:
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007c94:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <ResetUartORE+0x24>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	2308      	movs	r3, #8
 8007c9a:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007c9c:	4a07      	ldr	r2, [pc, #28]	; (8007cbc <ResetUartORE+0x28>)
 8007c9e:	6812      	ldr	r2, [r2, #0]
 8007ca0:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8007ca2:	4a07      	ldr	r2, [pc, #28]	; (8007cc0 <ResetUartORE+0x2c>)
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007ca8:	4a06      	ldr	r2, [pc, #24]	; (8007cc4 <ResetUartORE+0x30>)
 8007caa:	6812      	ldr	r2, [r2, #0]
 8007cac:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007cae:	4a06      	ldr	r2, [pc, #24]	; (8007cc8 <ResetUartORE+0x34>)
 8007cb0:	6812      	ldr	r2, [r2, #0]
 8007cb2:	6213      	str	r3, [r2, #32]
#endif
}
 8007cb4:	4770      	bx	lr
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	20007030 	.word	0x20007030
 8007cbc:	20006df0 	.word	0x20006df0
 8007cc0:	20006fbc 	.word	0x20006fbc
 8007cc4:	20006e64 	.word	0x20006e64
 8007cc8:	20006f4c 	.word	0x20006f4c

08007ccc <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	0006      	movs	r6, r0
 8007cd0:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 8007cd2:	f00a f8fb 	bl	8011ecc <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007cd6:	4b2a      	ldr	r3, [pc, #168]	; (8007d80 <EE_VerifyPageFullWriteVariable+0xb4>)
 8007cd8:	881a      	ldrh	r2, [r3, #0]
 8007cda:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007cdc:	4b29      	ldr	r3, [pc, #164]	; (8007d84 <EE_VerifyPageFullWriteVariable+0xb8>)
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d104      	bne.n	8007cf0 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 8007ce6:	4928      	ldr	r1, [pc, #160]	; (8007d88 <EE_VerifyPageFullWriteVariable+0xbc>)
 8007ce8:	428a      	cmp	r2, r1
 8007cea:	d007      	beq.n	8007cfc <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 8007cec:	3302      	adds	r3, #2
 8007cee:	e005      	b.n	8007cfc <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 8007cf0:	2a00      	cmp	r2, #0
 8007cf2:	d140      	bne.n	8007d76 <EE_VerifyPageFullWriteVariable+0xaa>
        if (PageStatusB == RECEIVE_DATA)
 8007cf4:	4924      	ldr	r1, [pc, #144]	; (8007d88 <EE_VerifyPageFullWriteVariable+0xbc>)
 8007cf6:	428b      	cmp	r3, r1
 8007cf8:	d03f      	beq.n	8007d7a <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEA;         /* PageA valid */
 8007cfa:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8007cfc:	4a23      	ldr	r2, [pc, #140]	; (8007d8c <EE_VerifyPageFullWriteVariable+0xc0>)
 8007cfe:	189c      	adds	r4, r3, r2
 8007d00:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007d02:	02db      	lsls	r3, r3, #11
 8007d04:	4a22      	ldr	r2, [pc, #136]	; (8007d90 <EE_VerifyPageFullWriteVariable+0xc4>)
 8007d06:	4694      	mov	ip, r2
 8007d08:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8007d0a:	6822      	ldr	r2, [r4, #0]
 8007d0c:	3201      	adds	r2, #1
 8007d0e:	d006      	beq.n	8007d1e <EE_VerifyPageFullWriteVariable+0x52>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8007d10:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 8007d12:	429c      	cmp	r4, r3
 8007d14:	d3f9      	bcc.n	8007d0a <EE_VerifyPageFullWriteVariable+0x3e>
    }
  }
	
	HAL_FLASH_Lock();
 8007d16:	f00a f8ed 	bl	8011ef4 <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8007d1a:	2080      	movs	r0, #128	; 0x80
}
 8007d1c:	bd70      	pop	{r4, r5, r6, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 8007d1e:	002a      	movs	r2, r5
 8007d20:	2300      	movs	r3, #0
 8007d22:	0021      	movs	r1, r4
 8007d24:	2001      	movs	r0, #1
 8007d26:	f00a f91d 	bl	8011f64 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d2a:	481a      	ldr	r0, [pc, #104]	; (8007d94 <EE_VerifyPageFullWriteVariable+0xc8>)
 8007d2c:	f00a f8ec 	bl	8011f08 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d003      	beq.n	8007d3c <EE_VerifyPageFullWriteVariable+0x70>
        return pFlash.ErrorCode;
 8007d34:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007d36:	69d8      	ldr	r0, [r3, #28]
 8007d38:	b280      	uxth	r0, r0
 8007d3a:	e7ef      	b.n	8007d1c <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007d3c:	4a17      	ldr	r2, [pc, #92]	; (8007d9c <EE_VerifyPageFullWriteVariable+0xd0>)
 8007d3e:	6913      	ldr	r3, [r2, #16]
 8007d40:	2101      	movs	r1, #1
 8007d42:	438b      	bics	r3, r1
 8007d44:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8007d46:	1ca1      	adds	r1, r4, #2
 8007d48:	0032      	movs	r2, r6
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	f00a f909 	bl	8011f64 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d52:	4810      	ldr	r0, [pc, #64]	; (8007d94 <EE_VerifyPageFullWriteVariable+0xc8>)
 8007d54:	f00a f8d8 	bl	8011f08 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d003      	beq.n	8007d64 <EE_VerifyPageFullWriteVariable+0x98>
        return pFlash.ErrorCode;
 8007d5c:	4b0e      	ldr	r3, [pc, #56]	; (8007d98 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007d5e:	69d8      	ldr	r0, [r3, #28]
 8007d60:	b280      	uxth	r0, r0
 8007d62:	e7db      	b.n	8007d1c <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007d64:	4a0d      	ldr	r2, [pc, #52]	; (8007d9c <EE_VerifyPageFullWriteVariable+0xd0>)
 8007d66:	6913      	ldr	r3, [r2, #16]
 8007d68:	2101      	movs	r1, #1
 8007d6a:	438b      	bics	r3, r1
 8007d6c:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007d70:	69d8      	ldr	r0, [r3, #28]
 8007d72:	b280      	uxth	r0, r0
 8007d74:	e7d2      	b.n	8007d1c <EE_VerifyPageFullWriteVariable+0x50>
    return  NO_VALID_PAGE;
 8007d76:	20ab      	movs	r0, #171	; 0xab
 8007d78:	e7d0      	b.n	8007d1c <EE_VerifyPageFullWriteVariable+0x50>
          return PAGEB;         /* PageB valid */
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	e7be      	b.n	8007cfc <EE_VerifyPageFullWriteVariable+0x30>
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	0801e000 	.word	0x0801e000
 8007d84:	0801f000 	.word	0x0801f000
 8007d88:	0000eeee 	.word	0x0000eeee
 8007d8c:	0001003c 	.word	0x0001003c
 8007d90:	0801effe 	.word	0x0801effe
 8007d94:	0000c350 	.word	0x0000c350
 8007d98:	200071d8 	.word	0x200071d8
 8007d9c:	40022000 	.word	0x40022000

08007da0 <EE_ReadVariable>:
{
 8007da0:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007da2:	4b11      	ldr	r3, [pc, #68]	; (8007de8 <EE_ReadVariable+0x48>)
 8007da4:	881c      	ldrh	r4, [r3, #0]
 8007da6:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007da8:	4b10      	ldr	r3, [pc, #64]	; (8007dec <EE_ReadVariable+0x4c>)
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 8007dae:	2c00      	cmp	r4, #0
 8007db0:	d009      	beq.n	8007dc6 <EE_ReadVariable+0x26>
      else if (PageStatusB == VALID_PAGE)
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d006      	beq.n	8007dc4 <EE_ReadVariable+0x24>
    return  NO_VALID_PAGE;
 8007db6:	20ab      	movs	r0, #171	; 0xab
 8007db8:	e003      	b.n	8007dc2 <EE_ReadVariable+0x22>
      *Data = (*(__IO uint16_t*)(Address - 2));
 8007dba:	3b02      	subs	r3, #2
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 8007dc0:	2000      	movs	r0, #0
}
 8007dc2:	bd10      	pop	{r4, pc}
        return PAGEB;           /* PageB valid */
 8007dc4:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007dc6:	02e3      	lsls	r3, r4, #11
 8007dc8:	4a09      	ldr	r2, [pc, #36]	; (8007df0 <EE_ReadVariable+0x50>)
 8007dca:	4694      	mov	ip, r2
 8007dcc:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8007dce:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 8007dd0:	4a08      	ldr	r2, [pc, #32]	; (8007df4 <EE_ReadVariable+0x54>)
 8007dd2:	4694      	mov	ip, r2
 8007dd4:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 8007dd6:	881a      	ldrh	r2, [r3, #0]
 8007dd8:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 8007dda:	4282      	cmp	r2, r0
 8007ddc:	d0ed      	beq.n	8007dba <EE_ReadVariable+0x1a>
      Address = Address - 4;
 8007dde:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	d8f8      	bhi.n	8007dd6 <EE_ReadVariable+0x36>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8007de4:	2001      	movs	r0, #1
 8007de6:	e7ec      	b.n	8007dc2 <EE_ReadVariable+0x22>
 8007de8:	0801e000 	.word	0x0801e000
 8007dec:	0801f000 	.word	0x0801f000
 8007df0:	0801effe 	.word	0x0801effe
 8007df4:	0801e002 	.word	0x0801e002

08007df8 <EE_WriteVariable>:
{
 8007df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dfa:	46de      	mov	lr, fp
 8007dfc:	4657      	mov	r7, sl
 8007dfe:	464e      	mov	r6, r9
 8007e00:	4645      	mov	r5, r8
 8007e02:	b5e0      	push	{r5, r6, r7, lr}
 8007e04:	b083      	sub	sp, #12
 8007e06:	0006      	movs	r6, r0
 8007e08:	000d      	movs	r5, r1
	HAL_FLASH_Unlock();
 8007e0a:	f00a f85f 	bl	8011ecc <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007e0e:	0029      	movs	r1, r5
 8007e10:	0030      	movs	r0, r6
 8007e12:	f7ff ff5b 	bl	8007ccc <EE_VerifyPageFullWriteVariable>
 8007e16:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 8007e18:	2880      	cmp	r0, #128	; 0x80
 8007e1a:	d009      	beq.n	8007e30 <EE_WriteVariable+0x38>
	HAL_FLASH_Lock();
 8007e1c:	f00a f86a 	bl	8011ef4 <HAL_FLASH_Lock>
}
 8007e20:	0020      	movs	r0, r4
 8007e22:	b003      	add	sp, #12
 8007e24:	bcf0      	pop	{r4, r5, r6, r7}
 8007e26:	46bb      	mov	fp, r7
 8007e28:	46b2      	mov	sl, r6
 8007e2a:	46a9      	mov	r9, r5
 8007e2c:	46a0      	mov	r8, r4
 8007e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 8007e30:	f00a f84c 	bl	8011ecc <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007e34:	4b40      	ldr	r3, [pc, #256]	; (8007f38 <EE_WriteVariable+0x140>)
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007e3a:	4a40      	ldr	r2, [pc, #256]	; (8007f3c <EE_WriteVariable+0x144>)
 8007e3c:	8812      	ldrh	r2, [r2, #0]
 8007e3e:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d007      	beq.n	8007e54 <EE_WriteVariable+0x5c>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8007e44:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 8007e46:	2a00      	cmp	r2, #0
 8007e48:	d1e8      	bne.n	8007e1c <EE_WriteVariable+0x24>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007e4a:	4b3c      	ldr	r3, [pc, #240]	; (8007f3c <EE_WriteVariable+0x144>)
 8007e4c:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007e4e:	4b3a      	ldr	r3, [pc, #232]	; (8007f38 <EE_WriteVariable+0x140>)
 8007e50:	469a      	mov	sl, r3
 8007e52:	e003      	b.n	8007e5c <EE_WriteVariable+0x64>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007e54:	4b38      	ldr	r3, [pc, #224]	; (8007f38 <EE_WriteVariable+0x140>)
 8007e56:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007e58:	4b38      	ldr	r3, [pc, #224]	; (8007f3c <EE_WriteVariable+0x144>)
 8007e5a:	469a      	mov	sl, r3
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8007e5c:	4a38      	ldr	r2, [pc, #224]	; (8007f40 <EE_WriteVariable+0x148>)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	4651      	mov	r1, sl
 8007e62:	2001      	movs	r0, #1
 8007e64:	f00a f87e 	bl	8011f64 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e68:	4836      	ldr	r0, [pc, #216]	; (8007f44 <EE_WriteVariable+0x14c>)
 8007e6a:	f00a f84d 	bl	8011f08 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d003      	beq.n	8007e7a <EE_WriteVariable+0x82>
  {
    return pFlash.ErrorCode;
 8007e72:	4b35      	ldr	r3, [pc, #212]	; (8007f48 <EE_WriteVariable+0x150>)
 8007e74:	69dc      	ldr	r4, [r3, #28]
 8007e76:	b2a4      	uxth	r4, r4
 8007e78:	e7d0      	b.n	8007e1c <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007e7a:	4a34      	ldr	r2, [pc, #208]	; (8007f4c <EE_WriteVariable+0x154>)
 8007e7c:	6913      	ldr	r3, [r2, #16]
 8007e7e:	2101      	movs	r1, #1
 8007e80:	438b      	bics	r3, r1
 8007e82:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007e84:	0029      	movs	r1, r5
 8007e86:	0030      	movs	r0, r6
 8007e88:	f7ff ff20 	bl	8007ccc <EE_VerifyPageFullWriteVariable>
 8007e8c:	9001      	str	r0, [sp, #4]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d150      	bne.n	8007f34 <EE_WriteVariable+0x13c>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007e92:	2501      	movs	r5, #1
  {
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007e94:	4b2e      	ldr	r3, [pc, #184]	; (8007f50 <EE_WriteVariable+0x158>)
 8007e96:	4698      	mov	r8, r3
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007e98:	4699      	mov	r9, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007e9a:	4f2e      	ldr	r7, [pc, #184]	; (8007f54 <EE_WriteVariable+0x15c>)
 8007e9c:	e003      	b.n	8007ea6 <EE_WriteVariable+0xae>
 8007e9e:	3501      	adds	r5, #1
 8007ea0:	b2ad      	uxth	r5, r5
 8007ea2:	42bd      	cmp	r5, r7
 8007ea4:	d00f      	beq.n	8007ec6 <EE_WriteVariable+0xce>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 8007ea6:	42ae      	cmp	r6, r5
 8007ea8:	d0f9      	beq.n	8007e9e <EE_WriteVariable+0xa6>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007eaa:	4641      	mov	r1, r8
 8007eac:	0028      	movs	r0, r5
 8007eae:	f7ff ff77 	bl	8007da0 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 8007eb2:	2801      	cmp	r0, #1
 8007eb4:	d0f3      	beq.n	8007e9e <EE_WriteVariable+0xa6>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007eb6:	464b      	mov	r3, r9
 8007eb8:	8819      	ldrh	r1, [r3, #0]
 8007eba:	0028      	movs	r0, r5
 8007ebc:	f7ff ff06 	bl	8007ccc <EE_VerifyPageFullWriteVariable>
 8007ec0:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8007ec2:	d0ec      	beq.n	8007e9e <EE_WriteVariable+0xa6>
 8007ec4:	e7aa      	b.n	8007e1c <EE_WriteVariable+0x24>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	f00a f8c4 	bl	8012054 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ecc:	481d      	ldr	r0, [pc, #116]	; (8007f44 <EE_WriteVariable+0x14c>)
 8007ece:	f00a f81b 	bl	8011f08 <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d003      	beq.n	8007ede <EE_WriteVariable+0xe6>
  {
    return pFlash.ErrorCode;
 8007ed6:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <EE_WriteVariable+0x150>)
 8007ed8:	69dc      	ldr	r4, [r3, #28]
 8007eda:	b2a4      	uxth	r4, r4
 8007edc:	e79e      	b.n	8007e1c <EE_WriteVariable+0x24>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007ede:	2080      	movs	r0, #128	; 0x80
 8007ee0:	0100      	lsls	r0, r0, #4
 8007ee2:	4458      	add	r0, fp
 8007ee4:	f00a f8b6 	bl	8012054 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ee8:	4816      	ldr	r0, [pc, #88]	; (8007f44 <EE_WriteVariable+0x14c>)
 8007eea:	f00a f80d 	bl	8011f08 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d003      	beq.n	8007efa <EE_WriteVariable+0x102>
		{
			return pFlash.ErrorCode;
 8007ef2:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <EE_WriteVariable+0x150>)
 8007ef4:	69dc      	ldr	r4, [r3, #28]
 8007ef6:	b2a4      	uxth	r4, r4
 8007ef8:	e790      	b.n	8007e1c <EE_WriteVariable+0x24>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007efa:	4a14      	ldr	r2, [pc, #80]	; (8007f4c <EE_WriteVariable+0x154>)
 8007efc:	6913      	ldr	r3, [r2, #16]
 8007efe:	2102      	movs	r1, #2
 8007f00:	438b      	bics	r3, r1
 8007f02:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8007f04:	2200      	movs	r2, #0
 8007f06:	2300      	movs	r3, #0
 8007f08:	4651      	mov	r1, sl
 8007f0a:	2001      	movs	r0, #1
 8007f0c:	f00a f82a 	bl	8011f64 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f10:	480c      	ldr	r0, [pc, #48]	; (8007f44 <EE_WriteVariable+0x14c>)
 8007f12:	f009 fff9 	bl	8011f08 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d003      	beq.n	8007f22 <EE_WriteVariable+0x12a>
  {
    return pFlash.ErrorCode;
 8007f1a:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <EE_WriteVariable+0x150>)
 8007f1c:	69dc      	ldr	r4, [r3, #28]
 8007f1e:	b2a4      	uxth	r4, r4
 8007f20:	e77c      	b.n	8007e1c <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007f22:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <EE_WriteVariable+0x154>)
 8007f24:	6913      	ldr	r3, [r2, #16]
 8007f26:	2101      	movs	r1, #1
 8007f28:	438b      	bics	r3, r1
 8007f2a:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 8007f2c:	f009 ffe2 	bl	8011ef4 <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 8007f30:	9c01      	ldr	r4, [sp, #4]
 8007f32:	e773      	b.n	8007e1c <EE_WriteVariable+0x24>
    return EepromStatus;
 8007f34:	9c01      	ldr	r4, [sp, #4]
 8007f36:	e771      	b.n	8007e1c <EE_WriteVariable+0x24>
 8007f38:	0801e000 	.word	0x0801e000
 8007f3c:	0801f000 	.word	0x0801f000
 8007f40:	0000eeee 	.word	0x0000eeee
 8007f44:	0000c350 	.word	0x0000c350
 8007f48:	200071d8 	.word	0x200071d8
 8007f4c:	40022000 	.word	0x40022000
 8007f50:	20001458 	.word	0x20001458
 8007f54:	00000401 	.word	0x00000401

08007f58 <EE_Format>:
{
 8007f58:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007f5a:	f009 ffb7 	bl	8011ecc <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 8007f5e:	4829      	ldr	r0, [pc, #164]	; (8008004 <EE_Format+0xac>)
 8007f60:	f00a f878 	bl	8012054 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f64:	4828      	ldr	r0, [pc, #160]	; (8008008 <EE_Format+0xb0>)
 8007f66:	f009 ffcf 	bl	8011f08 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d003      	beq.n	8007f76 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007f6e:	4b27      	ldr	r3, [pc, #156]	; (800800c <EE_Format+0xb4>)
 8007f70:	69d8      	ldr	r0, [r3, #28]
 8007f72:	b280      	uxth	r0, r0
}
 8007f74:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007f76:	4826      	ldr	r0, [pc, #152]	; (8008010 <EE_Format+0xb8>)
 8007f78:	f00a f86c 	bl	8012054 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f7c:	4822      	ldr	r0, [pc, #136]	; (8008008 <EE_Format+0xb0>)
 8007f7e:	f009 ffc3 	bl	8011f08 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d003      	beq.n	8007f8e <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007f86:	4b21      	ldr	r3, [pc, #132]	; (800800c <EE_Format+0xb4>)
 8007f88:	69d8      	ldr	r0, [r3, #28]
 8007f8a:	b280      	uxth	r0, r0
 8007f8c:	e7f2      	b.n	8007f74 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007f8e:	4a21      	ldr	r2, [pc, #132]	; (8008014 <EE_Format+0xbc>)
 8007f90:	6913      	ldr	r3, [r2, #16]
 8007f92:	2102      	movs	r1, #2
 8007f94:	438b      	bics	r3, r1
 8007f96:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4919      	ldr	r1, [pc, #100]	; (8008004 <EE_Format+0xac>)
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	f009 ffe0 	bl	8011f64 <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007fa4:	4818      	ldr	r0, [pc, #96]	; (8008008 <EE_Format+0xb0>)
 8007fa6:	f009 ffaf 	bl	8011f08 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d003      	beq.n	8007fb6 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007fae:	4b17      	ldr	r3, [pc, #92]	; (800800c <EE_Format+0xb4>)
 8007fb0:	69d8      	ldr	r0, [r3, #28]
 8007fb2:	b280      	uxth	r0, r0
 8007fb4:	e7de      	b.n	8007f74 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007fb6:	4a17      	ldr	r2, [pc, #92]	; (8008014 <EE_Format+0xbc>)
 8007fb8:	6913      	ldr	r3, [r2, #16]
 8007fba:	2101      	movs	r1, #1
 8007fbc:	438b      	bics	r3, r1
 8007fbe:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007fc0:	4815      	ldr	r0, [pc, #84]	; (8008018 <EE_Format+0xc0>)
 8007fc2:	f00a f847 	bl	8012054 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007fc6:	4810      	ldr	r0, [pc, #64]	; (8008008 <EE_Format+0xb0>)
 8007fc8:	f009 ff9e 	bl	8011f08 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d003      	beq.n	8007fd8 <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007fd0:	4b0e      	ldr	r3, [pc, #56]	; (800800c <EE_Format+0xb4>)
 8007fd2:	69d8      	ldr	r0, [r3, #28]
 8007fd4:	b280      	uxth	r0, r0
 8007fd6:	e7cd      	b.n	8007f74 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007fd8:	4810      	ldr	r0, [pc, #64]	; (800801c <EE_Format+0xc4>)
 8007fda:	f00a f83b 	bl	8012054 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007fde:	480a      	ldr	r0, [pc, #40]	; (8008008 <EE_Format+0xb0>)
 8007fe0:	f009 ff92 	bl	8011f08 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d003      	beq.n	8007ff0 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007fe8:	4b08      	ldr	r3, [pc, #32]	; (800800c <EE_Format+0xb4>)
 8007fea:	69d8      	ldr	r0, [r3, #28]
 8007fec:	b280      	uxth	r0, r0
 8007fee:	e7c1      	b.n	8007f74 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007ff0:	4a08      	ldr	r2, [pc, #32]	; (8008014 <EE_Format+0xbc>)
 8007ff2:	6913      	ldr	r3, [r2, #16]
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	438b      	bics	r3, r1
 8007ff8:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007ffa:	f009 ff7b 	bl	8011ef4 <HAL_FLASH_Lock>
  return FlashStatus;
 8007ffe:	2000      	movs	r0, #0
 8008000:	e7b8      	b.n	8007f74 <EE_Format+0x1c>
 8008002:	46c0      	nop			; (mov r8, r8)
 8008004:	0801e000 	.word	0x0801e000
 8008008:	0000c350 	.word	0x0000c350
 800800c:	200071d8 	.word	0x200071d8
 8008010:	0801e800 	.word	0x0801e800
 8008014:	40022000 	.word	0x40022000
 8008018:	0801f000 	.word	0x0801f000
 800801c:	0801f800 	.word	0x0801f800

08008020 <EE_Init>:
{
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	46ce      	mov	lr, r9
 8008024:	4647      	mov	r7, r8
 8008026:	b580      	push	{r7, lr}
	HAL_FLASH_Unlock();
 8008028:	f009 ff50 	bl	8011ecc <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800802c:	4bbf      	ldr	r3, [pc, #764]	; (800832c <EE_Init+0x30c>)
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8008032:	4abf      	ldr	r2, [pc, #764]	; (8008330 <EE_Init+0x310>)
 8008034:	8812      	ldrh	r2, [r2, #0]
 8008036:	b292      	uxth	r2, r2
  switch (PageStatusA)
 8008038:	49be      	ldr	r1, [pc, #760]	; (8008334 <EE_Init+0x314>)
 800803a:	428b      	cmp	r3, r1
 800803c:	d100      	bne.n	8008040 <EE_Init+0x20>
 800803e:	e075      	b.n	800812c <EE_Init+0x10c>
 8008040:	49bd      	ldr	r1, [pc, #756]	; (8008338 <EE_Init+0x318>)
 8008042:	428b      	cmp	r3, r1
 8008044:	d012      	beq.n	800806c <EE_Init+0x4c>
 8008046:	2b00      	cmp	r3, #0
 8008048:	d100      	bne.n	800804c <EE_Init+0x2c>
 800804a:	e10b      	b.n	8008264 <EE_Init+0x244>
      FlashStatus = EE_Format();
 800804c:	f7ff ff84 	bl	8007f58 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008050:	48ba      	ldr	r0, [pc, #744]	; (800833c <EE_Init+0x31c>)
 8008052:	f009 ff59 	bl	8011f08 <FLASH_WaitForLastOperation>
 8008056:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8008058:	2d00      	cmp	r5, #0
 800805a:	d102      	bne.n	8008062 <EE_Init+0x42>
	HAL_FLASH_Lock();
 800805c:	f009 ff4a 	bl	8011ef4 <HAL_FLASH_Lock>
  return HAL_OK;
 8008060:	2500      	movs	r5, #0
}
 8008062:	0028      	movs	r0, r5
 8008064:	bcc0      	pop	{r6, r7}
 8008066:	46b9      	mov	r9, r7
 8008068:	46b0      	mov	r8, r6
 800806a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800806c:	2a00      	cmp	r2, #0
 800806e:	d00d      	beq.n	800808c <EE_Init+0x6c>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8008070:	4bb0      	ldr	r3, [pc, #704]	; (8008334 <EE_Init+0x314>)
 8008072:	429a      	cmp	r2, r3
 8008074:	d028      	beq.n	80080c8 <EE_Init+0xa8>
        FlashStatus = EE_Format();
 8008076:	f7ff ff6f 	bl	8007f58 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800807a:	48b0      	ldr	r0, [pc, #704]	; (800833c <EE_Init+0x31c>)
 800807c:	f009 ff44 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8008080:	2800      	cmp	r0, #0
 8008082:	d0eb      	beq.n	800805c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8008084:	4bae      	ldr	r3, [pc, #696]	; (8008340 <EE_Init+0x320>)
 8008086:	69dd      	ldr	r5, [r3, #28]
 8008088:	b2ad      	uxth	r5, r5
 800808a:	e7ea      	b.n	8008062 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 800808c:	48a7      	ldr	r0, [pc, #668]	; (800832c <EE_Init+0x30c>)
 800808e:	f009 ffe1 	bl	8012054 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008092:	48aa      	ldr	r0, [pc, #680]	; (800833c <EE_Init+0x31c>)
 8008094:	f009 ff38 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8008098:	2800      	cmp	r0, #0
 800809a:	d003      	beq.n	80080a4 <EE_Init+0x84>
          return pFlash.ErrorCode;
 800809c:	4ba8      	ldr	r3, [pc, #672]	; (8008340 <EE_Init+0x320>)
 800809e:	69dd      	ldr	r5, [r3, #28]
 80080a0:	b2ad      	uxth	r5, r5
 80080a2:	e7de      	b.n	8008062 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80080a4:	48a7      	ldr	r0, [pc, #668]	; (8008344 <EE_Init+0x324>)
 80080a6:	f009 ffd5 	bl	8012054 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80080aa:	48a4      	ldr	r0, [pc, #656]	; (800833c <EE_Init+0x31c>)
 80080ac:	f009 ff2c 	bl	8011f08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d105      	bne.n	80080c0 <EE_Init+0xa0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80080b4:	4aa4      	ldr	r2, [pc, #656]	; (8008348 <EE_Init+0x328>)
 80080b6:	6913      	ldr	r3, [r2, #16]
 80080b8:	2102      	movs	r1, #2
 80080ba:	438b      	bics	r3, r1
 80080bc:	6113      	str	r3, [r2, #16]
 80080be:	e7cd      	b.n	800805c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 80080c0:	4b9f      	ldr	r3, [pc, #636]	; (8008340 <EE_Init+0x320>)
 80080c2:	69dd      	ldr	r5, [r3, #28]
 80080c4:	b2ad      	uxth	r5, r5
 80080c6:	e7cc      	b.n	8008062 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80080c8:	4898      	ldr	r0, [pc, #608]	; (800832c <EE_Init+0x30c>)
 80080ca:	f009 ffc3 	bl	8012054 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80080ce:	489b      	ldr	r0, [pc, #620]	; (800833c <EE_Init+0x31c>)
 80080d0:	f009 ff1a 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d003      	beq.n	80080e0 <EE_Init+0xc0>
          return pFlash.ErrorCode;
 80080d8:	4b99      	ldr	r3, [pc, #612]	; (8008340 <EE_Init+0x320>)
 80080da:	69dd      	ldr	r5, [r3, #28]
 80080dc:	b2ad      	uxth	r5, r5
 80080de:	e7c0      	b.n	8008062 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80080e0:	4898      	ldr	r0, [pc, #608]	; (8008344 <EE_Init+0x324>)
 80080e2:	f009 ffb7 	bl	8012054 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80080e6:	4895      	ldr	r0, [pc, #596]	; (800833c <EE_Init+0x31c>)
 80080e8:	f009 ff0e 	bl	8011f08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d003      	beq.n	80080f8 <EE_Init+0xd8>
						return pFlash.ErrorCode;
 80080f0:	4b93      	ldr	r3, [pc, #588]	; (8008340 <EE_Init+0x320>)
 80080f2:	69dd      	ldr	r5, [r3, #28]
 80080f4:	b2ad      	uxth	r5, r5
 80080f6:	e7b4      	b.n	8008062 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80080f8:	4a93      	ldr	r2, [pc, #588]	; (8008348 <EE_Init+0x328>)
 80080fa:	6913      	ldr	r3, [r2, #16]
 80080fc:	2102      	movs	r1, #2
 80080fe:	438b      	bics	r3, r1
 8008100:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8008102:	2200      	movs	r2, #0
 8008104:	2300      	movs	r3, #0
 8008106:	498a      	ldr	r1, [pc, #552]	; (8008330 <EE_Init+0x310>)
 8008108:	2001      	movs	r0, #1
 800810a:	f009 ff2b 	bl	8011f64 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800810e:	488b      	ldr	r0, [pc, #556]	; (800833c <EE_Init+0x31c>)
 8008110:	f009 fefa 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8008114:	2800      	cmp	r0, #0
 8008116:	d105      	bne.n	8008124 <EE_Init+0x104>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8008118:	4a8b      	ldr	r2, [pc, #556]	; (8008348 <EE_Init+0x328>)
 800811a:	6913      	ldr	r3, [r2, #16]
 800811c:	2101      	movs	r1, #1
 800811e:	438b      	bics	r3, r1
 8008120:	6113      	str	r3, [r2, #16]
 8008122:	e79b      	b.n	800805c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8008124:	4b86      	ldr	r3, [pc, #536]	; (8008340 <EE_Init+0x320>)
 8008126:	69dd      	ldr	r5, [r3, #28]
 8008128:	b2ad      	uxth	r5, r5
 800812a:	e79a      	b.n	8008062 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800812c:	2a00      	cmp	r2, #0
 800812e:	d158      	bne.n	80081e2 <EE_Init+0x1c2>
 8008130:	2401      	movs	r4, #1
  int16_t x = -1;
 8008132:	2601      	movs	r6, #1
 8008134:	4276      	negs	r6, r6
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8008136:	4f85      	ldr	r7, [pc, #532]	; (800834c <EE_Init+0x32c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8008138:	4b85      	ldr	r3, [pc, #532]	; (8008350 <EE_Init+0x330>)
 800813a:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800813c:	4699      	mov	r9, r3
 800813e:	e005      	b.n	800814c <EE_Init+0x12c>
            x = VarIdx;
 8008140:	b226      	sxth	r6, r4
 8008142:	e008      	b.n	8008156 <EE_Init+0x136>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8008144:	3401      	adds	r4, #1
 8008146:	4b83      	ldr	r3, [pc, #524]	; (8008354 <EE_Init+0x334>)
 8008148:	429c      	cmp	r4, r3
 800814a:	d018      	beq.n	800817e <EE_Init+0x15e>
 800814c:	b2a5      	uxth	r5, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 800814e:	883b      	ldrh	r3, [r7, #0]
 8008150:	b29b      	uxth	r3, r3
 8008152:	42ab      	cmp	r3, r5
 8008154:	d0f4      	beq.n	8008140 <EE_Init+0x120>
          if (VarIdx != x)
 8008156:	42a6      	cmp	r6, r4
 8008158:	d0f4      	beq.n	8008144 <EE_Init+0x124>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800815a:	4641      	mov	r1, r8
 800815c:	0028      	movs	r0, r5
 800815e:	f7ff fe1f 	bl	8007da0 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8008162:	2801      	cmp	r0, #1
 8008164:	d0ee      	beq.n	8008144 <EE_Init+0x124>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8008166:	464b      	mov	r3, r9
 8008168:	8819      	ldrh	r1, [r3, #0]
 800816a:	0028      	movs	r0, r5
 800816c:	f7ff fdae 	bl	8007ccc <EE_VerifyPageFullWriteVariable>
 8008170:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008172:	4872      	ldr	r0, [pc, #456]	; (800833c <EE_Init+0x31c>)
 8008174:	f009 fec8 	bl	8011f08 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8008178:	2800      	cmp	r0, #0
 800817a:	d0e3      	beq.n	8008144 <EE_Init+0x124>
 800817c:	e771      	b.n	8008062 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800817e:	2200      	movs	r2, #0
 8008180:	2300      	movs	r3, #0
 8008182:	496a      	ldr	r1, [pc, #424]	; (800832c <EE_Init+0x30c>)
 8008184:	2001      	movs	r0, #1
 8008186:	f009 feed 	bl	8011f64 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800818a:	486c      	ldr	r0, [pc, #432]	; (800833c <EE_Init+0x31c>)
 800818c:	f009 febc 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8008190:	2800      	cmp	r0, #0
 8008192:	d003      	beq.n	800819c <EE_Init+0x17c>
          return pFlash.ErrorCode;
 8008194:	4b6a      	ldr	r3, [pc, #424]	; (8008340 <EE_Init+0x320>)
 8008196:	69dd      	ldr	r5, [r3, #28]
 8008198:	b2ad      	uxth	r5, r5
 800819a:	e762      	b.n	8008062 <EE_Init+0x42>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800819c:	4a6a      	ldr	r2, [pc, #424]	; (8008348 <EE_Init+0x328>)
 800819e:	6913      	ldr	r3, [r2, #16]
 80081a0:	2101      	movs	r1, #1
 80081a2:	438b      	bics	r3, r1
 80081a4:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80081a6:	4862      	ldr	r0, [pc, #392]	; (8008330 <EE_Init+0x310>)
 80081a8:	f009 ff54 	bl	8012054 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80081ac:	4863      	ldr	r0, [pc, #396]	; (800833c <EE_Init+0x31c>)
 80081ae:	f009 feab 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d003      	beq.n	80081be <EE_Init+0x19e>
          return pFlash.ErrorCode;
 80081b6:	4b62      	ldr	r3, [pc, #392]	; (8008340 <EE_Init+0x320>)
 80081b8:	69dd      	ldr	r5, [r3, #28]
 80081ba:	b2ad      	uxth	r5, r5
 80081bc:	e751      	b.n	8008062 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80081be:	4866      	ldr	r0, [pc, #408]	; (8008358 <EE_Init+0x338>)
 80081c0:	f009 ff48 	bl	8012054 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80081c4:	485d      	ldr	r0, [pc, #372]	; (800833c <EE_Init+0x31c>)
 80081c6:	f009 fe9f 	bl	8011f08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d105      	bne.n	80081da <EE_Init+0x1ba>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80081ce:	4a5e      	ldr	r2, [pc, #376]	; (8008348 <EE_Init+0x328>)
 80081d0:	6913      	ldr	r3, [r2, #16]
 80081d2:	2102      	movs	r1, #2
 80081d4:	438b      	bics	r3, r1
 80081d6:	6113      	str	r3, [r2, #16]
 80081d8:	e740      	b.n	800805c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 80081da:	4b59      	ldr	r3, [pc, #356]	; (8008340 <EE_Init+0x320>)
 80081dc:	69dd      	ldr	r5, [r3, #28]
 80081de:	b2ad      	uxth	r5, r5
 80081e0:	e73f      	b.n	8008062 <EE_Init+0x42>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 80081e2:	4b55      	ldr	r3, [pc, #340]	; (8008338 <EE_Init+0x318>)
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d00b      	beq.n	8008200 <EE_Init+0x1e0>
        FlashStatus = EE_Format();
 80081e8:	f7ff feb6 	bl	8007f58 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80081ec:	4853      	ldr	r0, [pc, #332]	; (800833c <EE_Init+0x31c>)
 80081ee:	f009 fe8b 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d100      	bne.n	80081f8 <EE_Init+0x1d8>
 80081f6:	e731      	b.n	800805c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 80081f8:	4b51      	ldr	r3, [pc, #324]	; (8008340 <EE_Init+0x320>)
 80081fa:	69dd      	ldr	r5, [r3, #28]
 80081fc:	b2ad      	uxth	r5, r5
 80081fe:	e730      	b.n	8008062 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8008200:	484b      	ldr	r0, [pc, #300]	; (8008330 <EE_Init+0x310>)
 8008202:	f009 ff27 	bl	8012054 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008206:	484d      	ldr	r0, [pc, #308]	; (800833c <EE_Init+0x31c>)
 8008208:	f009 fe7e 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800820c:	2800      	cmp	r0, #0
 800820e:	d003      	beq.n	8008218 <EE_Init+0x1f8>
          return pFlash.ErrorCode;
 8008210:	4b4b      	ldr	r3, [pc, #300]	; (8008340 <EE_Init+0x320>)
 8008212:	69dd      	ldr	r5, [r3, #28]
 8008214:	b2ad      	uxth	r5, r5
 8008216:	e724      	b.n	8008062 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8008218:	484f      	ldr	r0, [pc, #316]	; (8008358 <EE_Init+0x338>)
 800821a:	f009 ff1b 	bl	8012054 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800821e:	4847      	ldr	r0, [pc, #284]	; (800833c <EE_Init+0x31c>)
 8008220:	f009 fe72 	bl	8011f08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8008224:	2800      	cmp	r0, #0
 8008226:	d003      	beq.n	8008230 <EE_Init+0x210>
						return pFlash.ErrorCode;
 8008228:	4b45      	ldr	r3, [pc, #276]	; (8008340 <EE_Init+0x320>)
 800822a:	69dd      	ldr	r5, [r3, #28]
 800822c:	b2ad      	uxth	r5, r5
 800822e:	e718      	b.n	8008062 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008230:	4a45      	ldr	r2, [pc, #276]	; (8008348 <EE_Init+0x328>)
 8008232:	6913      	ldr	r3, [r2, #16]
 8008234:	2102      	movs	r1, #2
 8008236:	438b      	bics	r3, r1
 8008238:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800823a:	2200      	movs	r2, #0
 800823c:	2300      	movs	r3, #0
 800823e:	493b      	ldr	r1, [pc, #236]	; (800832c <EE_Init+0x30c>)
 8008240:	2001      	movs	r0, #1
 8008242:	f009 fe8f 	bl	8011f64 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008246:	483d      	ldr	r0, [pc, #244]	; (800833c <EE_Init+0x31c>)
 8008248:	f009 fe5e 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800824c:	2800      	cmp	r0, #0
 800824e:	d105      	bne.n	800825c <EE_Init+0x23c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8008250:	4a3d      	ldr	r2, [pc, #244]	; (8008348 <EE_Init+0x328>)
 8008252:	6913      	ldr	r3, [r2, #16]
 8008254:	2101      	movs	r1, #1
 8008256:	438b      	bics	r3, r1
 8008258:	6113      	str	r3, [r2, #16]
 800825a:	e6ff      	b.n	800805c <EE_Init+0x3c>
          return pFlash.ErrorCode;
 800825c:	4b38      	ldr	r3, [pc, #224]	; (8008340 <EE_Init+0x320>)
 800825e:	69dd      	ldr	r5, [r3, #28]
 8008260:	b2ad      	uxth	r5, r5
 8008262:	e6fe      	b.n	8008062 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8008264:	2a00      	cmp	r2, #0
 8008266:	d00a      	beq.n	800827e <EE_Init+0x25e>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8008268:	4b33      	ldr	r3, [pc, #204]	; (8008338 <EE_Init+0x318>)
 800826a:	429a      	cmp	r2, r3
 800826c:	d011      	beq.n	8008292 <EE_Init+0x272>
 800826e:	2401      	movs	r4, #1
  int16_t x = -1;
 8008270:	2601      	movs	r6, #1
 8008272:	4276      	negs	r6, r6
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8008274:	4f39      	ldr	r7, [pc, #228]	; (800835c <EE_Init+0x33c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8008276:	4b36      	ldr	r3, [pc, #216]	; (8008350 <EE_Init+0x330>)
 8008278:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800827a:	4699      	mov	r9, r3
 800827c:	e02d      	b.n	80082da <EE_Init+0x2ba>
        FlashStatus = EE_Format();
 800827e:	f7ff fe6b 	bl	8007f58 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008282:	482e      	ldr	r0, [pc, #184]	; (800833c <EE_Init+0x31c>)
 8008284:	f009 fe40 	bl	8011f08 <FLASH_WaitForLastOperation>
 8008288:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 800828a:	2d00      	cmp	r5, #0
 800828c:	d100      	bne.n	8008290 <EE_Init+0x270>
 800828e:	e6e5      	b.n	800805c <EE_Init+0x3c>
 8008290:	e6e7      	b.n	8008062 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8008292:	4827      	ldr	r0, [pc, #156]	; (8008330 <EE_Init+0x310>)
 8008294:	f009 fede 	bl	8012054 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008298:	4828      	ldr	r0, [pc, #160]	; (800833c <EE_Init+0x31c>)
 800829a:	f009 fe35 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800829e:	2800      	cmp	r0, #0
 80082a0:	d003      	beq.n	80082aa <EE_Init+0x28a>
          return pFlash.ErrorCode;
 80082a2:	4b27      	ldr	r3, [pc, #156]	; (8008340 <EE_Init+0x320>)
 80082a4:	69dd      	ldr	r5, [r3, #28]
 80082a6:	b2ad      	uxth	r5, r5
 80082a8:	e6db      	b.n	8008062 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80082aa:	482b      	ldr	r0, [pc, #172]	; (8008358 <EE_Init+0x338>)
 80082ac:	f009 fed2 	bl	8012054 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80082b0:	4822      	ldr	r0, [pc, #136]	; (800833c <EE_Init+0x31c>)
 80082b2:	f009 fe29 	bl	8011f08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d105      	bne.n	80082c6 <EE_Init+0x2a6>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80082ba:	4a23      	ldr	r2, [pc, #140]	; (8008348 <EE_Init+0x328>)
 80082bc:	6913      	ldr	r3, [r2, #16]
 80082be:	2102      	movs	r1, #2
 80082c0:	438b      	bics	r3, r1
 80082c2:	6113      	str	r3, [r2, #16]
 80082c4:	e6ca      	b.n	800805c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 80082c6:	4b1e      	ldr	r3, [pc, #120]	; (8008340 <EE_Init+0x320>)
 80082c8:	69dd      	ldr	r5, [r3, #28]
 80082ca:	b2ad      	uxth	r5, r5
 80082cc:	e6c9      	b.n	8008062 <EE_Init+0x42>
            x = VarIdx;
 80082ce:	b226      	sxth	r6, r4
 80082d0:	e008      	b.n	80082e4 <EE_Init+0x2c4>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80082d2:	3401      	adds	r4, #1
 80082d4:	4b1f      	ldr	r3, [pc, #124]	; (8008354 <EE_Init+0x334>)
 80082d6:	429c      	cmp	r4, r3
 80082d8:	d018      	beq.n	800830c <EE_Init+0x2ec>
 80082da:	b2a5      	uxth	r5, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 80082dc:	883b      	ldrh	r3, [r7, #0]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	42ab      	cmp	r3, r5
 80082e2:	d0f4      	beq.n	80082ce <EE_Init+0x2ae>
          if (VarIdx != x)
 80082e4:	42a6      	cmp	r6, r4
 80082e6:	d0f4      	beq.n	80082d2 <EE_Init+0x2b2>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 80082e8:	4641      	mov	r1, r8
 80082ea:	0028      	movs	r0, r5
 80082ec:	f7ff fd58 	bl	8007da0 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 80082f0:	2801      	cmp	r0, #1
 80082f2:	d0ee      	beq.n	80082d2 <EE_Init+0x2b2>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80082f4:	464b      	mov	r3, r9
 80082f6:	8819      	ldrh	r1, [r3, #0]
 80082f8:	0028      	movs	r0, r5
 80082fa:	f7ff fce7 	bl	8007ccc <EE_VerifyPageFullWriteVariable>
 80082fe:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008300:	480e      	ldr	r0, [pc, #56]	; (800833c <EE_Init+0x31c>)
 8008302:	f009 fe01 	bl	8011f08 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8008306:	2800      	cmp	r0, #0
 8008308:	d0e3      	beq.n	80082d2 <EE_Init+0x2b2>
 800830a:	e6aa      	b.n	8008062 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 800830c:	2200      	movs	r2, #0
 800830e:	2300      	movs	r3, #0
 8008310:	4907      	ldr	r1, [pc, #28]	; (8008330 <EE_Init+0x310>)
 8008312:	2001      	movs	r0, #1
 8008314:	f009 fe26 	bl	8011f64 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008318:	4808      	ldr	r0, [pc, #32]	; (800833c <EE_Init+0x31c>)
 800831a:	f009 fdf5 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800831e:	2800      	cmp	r0, #0
 8008320:	d01e      	beq.n	8008360 <EE_Init+0x340>
          return pFlash.ErrorCode;
 8008322:	4b07      	ldr	r3, [pc, #28]	; (8008340 <EE_Init+0x320>)
 8008324:	69dd      	ldr	r5, [r3, #28]
 8008326:	b2ad      	uxth	r5, r5
 8008328:	e69b      	b.n	8008062 <EE_Init+0x42>
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	0801e000 	.word	0x0801e000
 8008330:	0801f000 	.word	0x0801f000
 8008334:	0000eeee 	.word	0x0000eeee
 8008338:	0000ffff 	.word	0x0000ffff
 800833c:	0000c350 	.word	0x0000c350
 8008340:	200071d8 	.word	0x200071d8
 8008344:	0801e800 	.word	0x0801e800
 8008348:	40022000 	.word	0x40022000
 800834c:	0801e006 	.word	0x0801e006
 8008350:	20001458 	.word	0x20001458
 8008354:	00000401 	.word	0x00000401
 8008358:	0801f800 	.word	0x0801f800
 800835c:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8008360:	4a11      	ldr	r2, [pc, #68]	; (80083a8 <EE_Init+0x388>)
 8008362:	6913      	ldr	r3, [r2, #16]
 8008364:	2101      	movs	r1, #1
 8008366:	438b      	bics	r3, r1
 8008368:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800836a:	4810      	ldr	r0, [pc, #64]	; (80083ac <EE_Init+0x38c>)
 800836c:	f009 fe72 	bl	8012054 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008370:	480f      	ldr	r0, [pc, #60]	; (80083b0 <EE_Init+0x390>)
 8008372:	f009 fdc9 	bl	8011f08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8008376:	2800      	cmp	r0, #0
 8008378:	d003      	beq.n	8008382 <EE_Init+0x362>
          return pFlash.ErrorCode;
 800837a:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <EE_Init+0x394>)
 800837c:	69dd      	ldr	r5, [r3, #28]
 800837e:	b2ad      	uxth	r5, r5
 8008380:	e66f      	b.n	8008062 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8008382:	480d      	ldr	r0, [pc, #52]	; (80083b8 <EE_Init+0x398>)
 8008384:	f009 fe66 	bl	8012054 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008388:	4809      	ldr	r0, [pc, #36]	; (80083b0 <EE_Init+0x390>)
 800838a:	f009 fdbd 	bl	8011f08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800838e:	2800      	cmp	r0, #0
 8008390:	d105      	bne.n	800839e <EE_Init+0x37e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008392:	4a05      	ldr	r2, [pc, #20]	; (80083a8 <EE_Init+0x388>)
 8008394:	6913      	ldr	r3, [r2, #16]
 8008396:	2102      	movs	r1, #2
 8008398:	438b      	bics	r3, r1
 800839a:	6113      	str	r3, [r2, #16]
 800839c:	e65e      	b.n	800805c <EE_Init+0x3c>
						return pFlash.ErrorCode;
 800839e:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <EE_Init+0x394>)
 80083a0:	69dd      	ldr	r5, [r3, #28]
 80083a2:	b2ad      	uxth	r5, r5
 80083a4:	e65d      	b.n	8008062 <EE_Init+0x42>
 80083a6:	46c0      	nop			; (mov r8, r8)
 80083a8:	40022000 	.word	0x40022000
 80083ac:	0801e000 	.word	0x0801e000
 80083b0:	0000c350 	.word	0x0000c350
 80083b4:	200071d8 	.word	0x200071d8
 80083b8:	0801e800 	.word	0x0801e800

080083bc <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 80083bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083be:	46c6      	mov	lr, r8
 80083c0:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 80083c2:	4c2a      	ldr	r4, [pc, #168]	; (800846c <StartDefaultTask+0xb0>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 80083c4:	0026      	movs	r6, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 80083c6:	46a0      	mov	r8, r4
 80083c8:	e01f      	b.n	800840a <StartDefaultTask+0x4e>
				RTOS_IND_blink(100);
 80083ca:	2580      	movs	r5, #128	; 0x80
 80083cc:	012d      	lsls	r5, r5, #4
 80083ce:	2790      	movs	r7, #144	; 0x90
 80083d0:	05ff      	lsls	r7, r7, #23
 80083d2:	2201      	movs	r2, #1
 80083d4:	0029      	movs	r1, r5
 80083d6:	0038      	movs	r0, r7
 80083d8:	f009 ffa0 	bl	801231c <HAL_GPIO_WritePin>
 80083dc:	2064      	movs	r0, #100	; 0x64
 80083de:	f006 fe48 	bl	800f072 <osDelay>
 80083e2:	2200      	movs	r2, #0
 80083e4:	0029      	movs	r1, r5
 80083e6:	0038      	movs	r0, r7
 80083e8:	f009 ff98 	bl	801231c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 80083ec:	2300      	movs	r3, #0
 80083ee:	7033      	strb	r3, [r6, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 80083f0:	f000 f9dc 	bl	80087ac <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 80083f4:	f7fd fbe4 	bl	8005bc0 <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 80083f8:	4b1d      	ldr	r3, [pc, #116]	; (8008470 <StartDefaultTask+0xb4>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <StartDefaultTask+0x4a>
 8008400:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <StartDefaultTask+0xb8>)
 8008402:	2200      	movs	r2, #0
 8008404:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 8008406:	f008 fd2d 	bl	8010e64 <vPortYield>
		switch (indMode)
 800840a:	7823      	ldrb	r3, [r4, #0]
 800840c:	2b02      	cmp	r3, #2
 800840e:	d0dc      	beq.n	80083ca <StartDefaultTask+0xe>
 8008410:	2b03      	cmp	r3, #3
 8008412:	d016      	beq.n	8008442 <StartDefaultTask+0x86>
 8008414:	2b01      	cmp	r3, #1
 8008416:	d1eb      	bne.n	80083f0 <StartDefaultTask+0x34>
				RTOS_IND_blink(200);
 8008418:	2580      	movs	r5, #128	; 0x80
 800841a:	012d      	lsls	r5, r5, #4
 800841c:	2790      	movs	r7, #144	; 0x90
 800841e:	05ff      	lsls	r7, r7, #23
 8008420:	2201      	movs	r2, #1
 8008422:	0029      	movs	r1, r5
 8008424:	0038      	movs	r0, r7
 8008426:	f009 ff79 	bl	801231c <HAL_GPIO_WritePin>
 800842a:	20c8      	movs	r0, #200	; 0xc8
 800842c:	f006 fe21 	bl	800f072 <osDelay>
 8008430:	2200      	movs	r2, #0
 8008432:	0029      	movs	r1, r5
 8008434:	0038      	movs	r0, r7
 8008436:	f009 ff71 	bl	801231c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800843a:	4b0c      	ldr	r3, [pc, #48]	; (800846c <StartDefaultTask+0xb0>)
 800843c:	2200      	movs	r2, #0
 800843e:	701a      	strb	r2, [r3, #0]
				break;
 8008440:	e7d6      	b.n	80083f0 <StartDefaultTask+0x34>
				RTOS_IND_blink(30);
 8008442:	2580      	movs	r5, #128	; 0x80
 8008444:	012d      	lsls	r5, r5, #4
 8008446:	2790      	movs	r7, #144	; 0x90
 8008448:	05ff      	lsls	r7, r7, #23
 800844a:	2201      	movs	r2, #1
 800844c:	0029      	movs	r1, r5
 800844e:	0038      	movs	r0, r7
 8008450:	f009 ff64 	bl	801231c <HAL_GPIO_WritePin>
 8008454:	201e      	movs	r0, #30
 8008456:	f006 fe0c 	bl	800f072 <osDelay>
 800845a:	2200      	movs	r2, #0
 800845c:	0029      	movs	r1, r5
 800845e:	0038      	movs	r0, r7
 8008460:	f009 ff5c 	bl	801231c <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8008464:	2300      	movs	r3, #0
 8008466:	4642      	mov	r2, r8
 8008468:	7013      	strb	r3, [r2, #0]
				break;
 800846a:	e7c1      	b.n	80083f0 <StartDefaultTask+0x34>
 800846c:	20000ed2 	.word	0x20000ed2
 8008470:	200014c3 	.word	0x200014c3
 8008474:	200014c2 	.word	0x200014c2

08008478 <MX_FREERTOS_Init>:
{
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	b08e      	sub	sp, #56	; 0x38
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 800847c:	25a0      	movs	r5, #160	; 0xa0
 800847e:	006d      	lsls	r5, r5, #1
 8008480:	2400      	movs	r4, #0
 8008482:	9403      	str	r4, [sp, #12]
 8008484:	9402      	str	r4, [sp, #8]
 8008486:	4b53      	ldr	r3, [pc, #332]	; (80085d4 <MX_FREERTOS_Init+0x15c>)
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	2603      	movs	r6, #3
 800848c:	9600      	str	r6, [sp, #0]
 800848e:	2300      	movs	r3, #0
 8008490:	002a      	movs	r2, r5
 8008492:	4951      	ldr	r1, [pc, #324]	; (80085d8 <MX_FREERTOS_Init+0x160>)
 8008494:	4851      	ldr	r0, [pc, #324]	; (80085dc <MX_FREERTOS_Init+0x164>)
 8008496:	f007 fc01 	bl	800fc9c <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 800849a:	9403      	str	r4, [sp, #12]
 800849c:	9402      	str	r4, [sp, #8]
 800849e:	4b50      	ldr	r3, [pc, #320]	; (80085e0 <MX_FREERTOS_Init+0x168>)
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	9600      	str	r6, [sp, #0]
 80084a4:	2300      	movs	r3, #0
 80084a6:	002a      	movs	r2, r5
 80084a8:	494e      	ldr	r1, [pc, #312]	; (80085e4 <MX_FREERTOS_Init+0x16c>)
 80084aa:	484f      	ldr	r0, [pc, #316]	; (80085e8 <MX_FREERTOS_Init+0x170>)
 80084ac:	f007 fbf6 	bl	800fc9c <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 80084b0:	9403      	str	r4, [sp, #12]
 80084b2:	9402      	str	r4, [sp, #8]
 80084b4:	4b4d      	ldr	r3, [pc, #308]	; (80085ec <MX_FREERTOS_Init+0x174>)
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	9600      	str	r6, [sp, #0]
 80084ba:	2300      	movs	r3, #0
 80084bc:	002a      	movs	r2, r5
 80084be:	494c      	ldr	r1, [pc, #304]	; (80085f0 <MX_FREERTOS_Init+0x178>)
 80084c0:	484c      	ldr	r0, [pc, #304]	; (80085f4 <MX_FREERTOS_Init+0x17c>)
 80084c2:	f007 fbeb 	bl	800fc9c <xTaskGenericCreate>
	vRegisterCLICommands();
 80084c6:	f7ff fa79 	bl	80079bc <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 80084ca:	9403      	str	r4, [sp, #12]
 80084cc:	9402      	str	r4, [sp, #8]
 80084ce:	4b4a      	ldr	r3, [pc, #296]	; (80085f8 <MX_FREERTOS_Init+0x180>)
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	9600      	str	r6, [sp, #0]
 80084d4:	2300      	movs	r3, #0
 80084d6:	002a      	movs	r2, r5
 80084d8:	4948      	ldr	r1, [pc, #288]	; (80085fc <MX_FREERTOS_Init+0x184>)
 80084da:	4849      	ldr	r0, [pc, #292]	; (8008600 <MX_FREERTOS_Init+0x188>)
 80084dc:	f007 fbde 	bl	800fc9c <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 80084e0:	4d48      	ldr	r5, [pc, #288]	; (8008604 <MX_FREERTOS_Init+0x18c>)
 80084e2:	9403      	str	r4, [sp, #12]
 80084e4:	9402      	str	r4, [sp, #8]
 80084e6:	4b48      	ldr	r3, [pc, #288]	; (8008608 <MX_FREERTOS_Init+0x190>)
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	3601      	adds	r6, #1
 80084ec:	9600      	str	r6, [sp, #0]
 80084ee:	2301      	movs	r3, #1
 80084f0:	22a0      	movs	r2, #160	; 0xa0
 80084f2:	4946      	ldr	r1, [pc, #280]	; (800860c <MX_FREERTOS_Init+0x194>)
 80084f4:	0028      	movs	r0, r5
 80084f6:	f007 fbd1 	bl	800fc9c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 80084fa:	9403      	str	r4, [sp, #12]
 80084fc:	9402      	str	r4, [sp, #8]
 80084fe:	4b44      	ldr	r3, [pc, #272]	; (8008610 <MX_FREERTOS_Init+0x198>)
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	9600      	str	r6, [sp, #0]
 8008504:	2302      	movs	r3, #2
 8008506:	22a0      	movs	r2, #160	; 0xa0
 8008508:	4942      	ldr	r1, [pc, #264]	; (8008614 <MX_FREERTOS_Init+0x19c>)
 800850a:	0028      	movs	r0, r5
 800850c:	f007 fbc6 	bl	800fc9c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 8008510:	9403      	str	r4, [sp, #12]
 8008512:	9402      	str	r4, [sp, #8]
 8008514:	4b40      	ldr	r3, [pc, #256]	; (8008618 <MX_FREERTOS_Init+0x1a0>)
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	9600      	str	r6, [sp, #0]
 800851a:	2303      	movs	r3, #3
 800851c:	22a0      	movs	r2, #160	; 0xa0
 800851e:	493f      	ldr	r1, [pc, #252]	; (800861c <MX_FREERTOS_Init+0x1a4>)
 8008520:	0028      	movs	r0, r5
 8008522:	f007 fbbb 	bl	800fc9c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 8008526:	9403      	str	r4, [sp, #12]
 8008528:	9402      	str	r4, [sp, #8]
 800852a:	4b3d      	ldr	r3, [pc, #244]	; (8008620 <MX_FREERTOS_Init+0x1a8>)
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	9600      	str	r6, [sp, #0]
 8008530:	2304      	movs	r3, #4
 8008532:	22a0      	movs	r2, #160	; 0xa0
 8008534:	493b      	ldr	r1, [pc, #236]	; (8008624 <MX_FREERTOS_Init+0x1ac>)
 8008536:	0028      	movs	r0, r5
 8008538:	f007 fbb0 	bl	800fc9c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 800853c:	9403      	str	r4, [sp, #12]
 800853e:	9402      	str	r4, [sp, #8]
 8008540:	4b39      	ldr	r3, [pc, #228]	; (8008628 <MX_FREERTOS_Init+0x1b0>)
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	9600      	str	r6, [sp, #0]
 8008546:	2305      	movs	r3, #5
 8008548:	22a0      	movs	r2, #160	; 0xa0
 800854a:	4938      	ldr	r1, [pc, #224]	; (800862c <MX_FREERTOS_Init+0x1b4>)
 800854c:	0028      	movs	r0, r5
 800854e:	f007 fba5 	bl	800fc9c <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 8008552:	940d      	str	r4, [sp, #52]	; 0x34
 8008554:	2101      	movs	r1, #1
 8008556:	a80d      	add	r0, sp, #52	; 0x34
 8008558:	f006 fd93 	bl	800f082 <osSemaphoreCreate>
 800855c:	4e34      	ldr	r6, [pc, #208]	; (8008630 <MX_FREERTOS_Init+0x1b8>)
 800855e:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 8008560:	940c      	str	r4, [sp, #48]	; 0x30
 8008562:	2101      	movs	r1, #1
 8008564:	a80c      	add	r0, sp, #48	; 0x30
 8008566:	f006 fd8c 	bl	800f082 <osSemaphoreCreate>
 800856a:	4d32      	ldr	r5, [pc, #200]	; (8008634 <MX_FREERTOS_Init+0x1bc>)
 800856c:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 800856e:	940b      	str	r4, [sp, #44]	; 0x2c
 8008570:	2101      	movs	r1, #1
 8008572:	a80b      	add	r0, sp, #44	; 0x2c
 8008574:	f006 fd85 	bl	800f082 <osSemaphoreCreate>
 8008578:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 800857a:	940a      	str	r4, [sp, #40]	; 0x28
 800857c:	2101      	movs	r1, #1
 800857e:	a80a      	add	r0, sp, #40	; 0x28
 8008580:	f006 fd7f 	bl	800f082 <osSemaphoreCreate>
 8008584:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 8008586:	9409      	str	r4, [sp, #36]	; 0x24
 8008588:	2101      	movs	r1, #1
 800858a:	a809      	add	r0, sp, #36	; 0x24
 800858c:	f006 fd79 	bl	800f082 <osSemaphoreCreate>
 8008590:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 8008592:	9408      	str	r4, [sp, #32]
 8008594:	2101      	movs	r1, #1
 8008596:	a808      	add	r0, sp, #32
 8008598:	f006 fd73 	bl	800f082 <osSemaphoreCreate>
 800859c:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 800859e:	9407      	str	r4, [sp, #28]
 80085a0:	2101      	movs	r1, #1
 80085a2:	a807      	add	r0, sp, #28
 80085a4:	f006 fd6d 	bl	800f082 <osSemaphoreCreate>
 80085a8:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 80085aa:	9406      	str	r4, [sp, #24]
 80085ac:	2101      	movs	r1, #1
 80085ae:	a806      	add	r0, sp, #24
 80085b0:	f006 fd67 	bl	800f082 <osSemaphoreCreate>
 80085b4:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 80085b6:	9405      	str	r4, [sp, #20]
 80085b8:	2101      	movs	r1, #1
 80085ba:	a805      	add	r0, sp, #20
 80085bc:	f006 fd61 	bl	800f082 <osSemaphoreCreate>
 80085c0:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 80085c2:	9404      	str	r4, [sp, #16]
 80085c4:	2101      	movs	r1, #1
 80085c6:	a804      	add	r0, sp, #16
 80085c8:	f006 fd5b 	bl	800f082 <osSemaphoreCreate>
 80085cc:	6168      	str	r0, [r5, #20]
}
 80085ce:	b00e      	add	sp, #56	; 0x38
 80085d0:	bd70      	pop	{r4, r5, r6, pc}
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	20001478 	.word	0x20001478
 80085d8:	0801cc38 	.word	0x0801cc38
 80085dc:	080083bd 	.word	0x080083bd
 80085e0:	2000145c 	.word	0x2000145c
 80085e4:	0801cc44 	.word	0x0801cc44
 80085e8:	080099f5 	.word	0x080099f5
 80085ec:	20001474 	.word	0x20001474
 80085f0:	0801cc50 	.word	0x0801cc50
 80085f4:	08013e37 	.word	0x08013e37
 80085f8:	20001480 	.word	0x20001480
 80085fc:	0801cc5c 	.word	0x0801cc5c
 8008600:	08005861 	.word	0x08005861
 8008604:	08009dc1 	.word	0x08009dc1
 8008608:	20001460 	.word	0x20001460
 800860c:	0801cc64 	.word	0x0801cc64
 8008610:	20001464 	.word	0x20001464
 8008614:	0801cc70 	.word	0x0801cc70
 8008618:	20001468 	.word	0x20001468
 800861c:	0801cc7c 	.word	0x0801cc7c
 8008620:	2000146c 	.word	0x2000146c
 8008624:	0801cc88 	.word	0x0801cc88
 8008628:	20001470 	.word	0x20001470
 800862c:	0801cc94 	.word	0x0801cc94
 8008630:	20006db4 	.word	0x20006db4
 8008634:	20006d98 	.word	0x20006d98

08008638 <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 8008638:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800863a:	4b04      	ldr	r3, [pc, #16]	; (800864c <vMainConfigureTimerForRunTimeStats+0x14>)
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	4904      	ldr	r1, [pc, #16]	; (8008650 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008640:	f7f7 fd86 	bl	8000150 <__udivsi3>
 8008644:	4b03      	ldr	r3, [pc, #12]	; (8008654 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8008646:	6018      	str	r0, [r3, #0]
}
 8008648:	bd10      	pop	{r4, pc}
 800864a:	46c0      	nop			; (mov r8, r8)
 800864c:	200000b8 	.word	0x200000b8
 8008650:	00002710 	.word	0x00002710
 8008654:	2000147c 	.word	0x2000147c

08008658 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 8008658:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800865a:	4b0f      	ldr	r3, [pc, #60]	; (8008698 <ulMainGetRunTimeCounterValue+0x40>)
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	21fa      	movs	r1, #250	; 0xfa
 8008660:	0089      	lsls	r1, r1, #2
 8008662:	f7f7 fd75 	bl	8000150 <__udivsi3>
 8008666:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008668:	4b0c      	ldr	r3, [pc, #48]	; (800869c <ulMainGetRunTimeCounterValue+0x44>)
 800866a:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 800866c:	f007 fcb6 	bl	800ffdc <xTaskGetTickCountFromISR>
 8008670:	0003      	movs	r3, r0

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 8008672:	4a0b      	ldr	r2, [pc, #44]	; (80086a0 <ulMainGetRunTimeCounterValue+0x48>)
 8008674:	6812      	ldr	r2, [r2, #0]
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008676:	1b28      	subs	r0, r5, r4
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 8008678:	0152      	lsls	r2, r2, #5
 800867a:	d503      	bpl.n	8008684 <ulMainGetRunTimeCounterValue+0x2c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 800867c:	3301      	adds	r3, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800867e:	4a07      	ldr	r2, [pc, #28]	; (800869c <ulMainGetRunTimeCounterValue+0x44>)
 8008680:	6810      	ldr	r0, [r2, #0]
 8008682:	1a28      	subs	r0, r5, r0
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 8008684:	009c      	lsls	r4, r3, #2
 8008686:	18e4      	adds	r4, r4, r3
 8008688:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 800868a:	4b06      	ldr	r3, [pc, #24]	; (80086a4 <ulMainGetRunTimeCounterValue+0x4c>)
 800868c:	6819      	ldr	r1, [r3, #0]
 800868e:	f7f7 fd5f 	bl	8000150 <__udivsi3>
 8008692:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 8008694:	bd70      	pop	{r4, r5, r6, pc}
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	200000b8 	.word	0x200000b8
 800869c:	e000e018 	.word	0xe000e018
 80086a0:	e000ed04 	.word	0xe000ed04
 80086a4:	2000147c 	.word	0x2000147c

080086a8 <buttonPressedCallback>:
/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedCallback(uint8_t port)
{	
}
 80086a8:	4770      	bx	lr

080086aa <buttonReleasedCallback>:
/* --- Button release callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedCallback(uint8_t port)
{	
}
 80086aa:	4770      	bx	lr

080086ac <buttonClickedCallback>:
/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonClickedCallback(uint8_t port)
{	
}
 80086ac:	4770      	bx	lr

080086ae <buttonDblClickedCallback>:
/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonDblClickedCallback(uint8_t port)
{	
}
 80086ae:	4770      	bx	lr

080086b0 <buttonPressedForXCallback>:
/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType)
{	
}
 80086b0:	4770      	bx	lr

080086b2 <buttonReleasedForYCallback>:
/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType)
{	
}
 80086b2:	4770      	bx	lr

080086b4 <CheckForTimedButtonPress>:
/*-----------------------------------------------------------*/	

/* --- Check for timed press button events
*/
BOS_Status CheckForTimedButtonPress(uint8_t port)
{
 80086b4:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80086b6:	00c2      	lsls	r2, r0, #3
 80086b8:	1812      	adds	r2, r2, r0
 80086ba:	4b1b      	ldr	r3, [pc, #108]	; (8008728 <CheckForTimedButtonPress+0x74>)
 80086bc:	189b      	adds	r3, r3, r2
 80086be:	789c      	ldrb	r4, [r3, #2]
	
	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (pressCounter[port] == t1)	
 80086c0:	0082      	lsls	r2, r0, #2
 80086c2:	4b1a      	ldr	r3, [pc, #104]	; (800872c <CheckForTimedButtonPress+0x78>)
 80086c4:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80086c6:	0163      	lsls	r3, r4, #5
 80086c8:	1b1b      	subs	r3, r3, r4
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	191b      	adds	r3, r3, r4
 80086ce:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1)	
 80086d0:	4299      	cmp	r1, r3
 80086d2:	d01c      	beq.n	800870e <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80086d4:	00c2      	lsls	r2, r0, #3
 80086d6:	1812      	adds	r2, r2, r0
 80086d8:	4b13      	ldr	r3, [pc, #76]	; (8008728 <CheckForTimedButtonPress+0x74>)
 80086da:	189b      	adds	r3, r3, r2
 80086dc:	78dc      	ldrb	r4, [r3, #3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80086de:	0163      	lsls	r3, r4, #5
 80086e0:	1b1b      	subs	r3, r3, r4
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	191b      	adds	r3, r3, r4
 80086e6:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X1_SEC;
	}
	else if (pressCounter[port] == t2)	
 80086e8:	4299      	cmp	r1, r3
 80086ea:	d017      	beq.n	800871c <CheckForTimedButtonPress+0x68>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80086ec:	00c2      	lsls	r2, r0, #3
 80086ee:	1812      	adds	r2, r2, r0
 80086f0:	4b0d      	ldr	r3, [pc, #52]	; (8008728 <CheckForTimedButtonPress+0x74>)
 80086f2:	189b      	adds	r3, r3, r2
 80086f4:	791c      	ldrb	r4, [r3, #4]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80086f6:	0163      	lsls	r3, r4, #5
 80086f8:	1b1b      	subs	r3, r3, r4
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	191b      	adds	r3, r3, r4
 80086fe:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
	}		
	else if (pressCounter[port] == t3)	
 8008700:	4299      	cmp	r1, r3
 8008702:	d109      	bne.n	8008718 <CheckForTimedButtonPress+0x64>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
 8008704:	0010      	movs	r0, r2
 8008706:	4b08      	ldr	r3, [pc, #32]	; (8008728 <CheckForTimedButtonPress+0x74>)
 8008708:	220a      	movs	r2, #10
 800870a:	54c2      	strb	r2, [r0, r3]
 800870c:	e004      	b.n	8008718 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 800870e:	00c3      	lsls	r3, r0, #3
 8008710:	1818      	adds	r0, r3, r0
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <CheckForTimedButtonPress+0x74>)
 8008714:	2209      	movs	r2, #9
 8008716:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 8008718:	2000      	movs	r0, #0
 800871a:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800871c:	0010      	movs	r0, r2
 800871e:	4b02      	ldr	r3, [pc, #8]	; (8008728 <CheckForTimedButtonPress+0x74>)
 8008720:	220a      	movs	r2, #10
 8008722:	54c2      	strb	r2, [r0, r3]
 8008724:	e7f8      	b.n	8008718 <CheckForTimedButtonPress+0x64>
 8008726:	46c0      	nop			; (mov r8, r8)
 8008728:	20001484 	.word	0x20001484
 800872c:	200014c4 	.word	0x200014c4

08008730 <CheckForTimedButtonRelease>:
/*-----------------------------------------------------------*/	

/* --- Check for timed release button events
*/
BOS_Status CheckForTimedButtonRelease(uint8_t port)
{
 8008730:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8008732:	00c2      	lsls	r2, r0, #3
 8008734:	1812      	adds	r2, r2, r0
 8008736:	4b1b      	ldr	r3, [pc, #108]	; (80087a4 <CheckForTimedButtonRelease+0x74>)
 8008738:	189b      	adds	r3, r3, r2
 800873a:	795c      	ldrb	r4, [r3, #5]

	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (releaseCounter[port] == t1)	
 800873c:	0082      	lsls	r2, r0, #2
 800873e:	4b1a      	ldr	r3, [pc, #104]	; (80087a8 <CheckForTimedButtonRelease+0x78>)
 8008740:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8008742:	0163      	lsls	r3, r4, #5
 8008744:	1b1b      	subs	r3, r3, r4
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	191b      	adds	r3, r3, r4
 800874a:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1)	
 800874c:	4299      	cmp	r1, r3
 800874e:	d01c      	beq.n	800878a <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8008750:	00c2      	lsls	r2, r0, #3
 8008752:	1812      	adds	r2, r2, r0
 8008754:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <CheckForTimedButtonRelease+0x74>)
 8008756:	189b      	adds	r3, r3, r2
 8008758:	799c      	ldrb	r4, [r3, #6]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800875a:	0163      	lsls	r3, r4, #5
 800875c:	1b1b      	subs	r3, r3, r4
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	191b      	adds	r3, r3, r4
 8008762:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y1_SEC;
	}
	else if (releaseCounter[port] == t2)	
 8008764:	4299      	cmp	r1, r3
 8008766:	d017      	beq.n	8008798 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8008768:	00c2      	lsls	r2, r0, #3
 800876a:	1812      	adds	r2, r2, r0
 800876c:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <CheckForTimedButtonRelease+0x74>)
 800876e:	189b      	adds	r3, r3, r2
 8008770:	79dc      	ldrb	r4, [r3, #7]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8008772:	0163      	lsls	r3, r4, #5
 8008774:	1b1b      	subs	r3, r3, r4
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	191b      	adds	r3, r3, r4
 800877a:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
	}		
	else if (releaseCounter[port] == t3)	
 800877c:	4299      	cmp	r1, r3
 800877e:	d109      	bne.n	8008794 <CheckForTimedButtonRelease+0x64>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
 8008780:	0010      	movs	r0, r2
 8008782:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <CheckForTimedButtonRelease+0x74>)
 8008784:	220d      	movs	r2, #13
 8008786:	54c2      	strb	r2, [r0, r3]
 8008788:	e004      	b.n	8008794 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800878a:	00c3      	lsls	r3, r0, #3
 800878c:	1818      	adds	r0, r3, r0
 800878e:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <CheckForTimedButtonRelease+0x74>)
 8008790:	220c      	movs	r2, #12
 8008792:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 8008794:	2000      	movs	r0, #0
 8008796:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 8008798:	0010      	movs	r0, r2
 800879a:	4b02      	ldr	r3, [pc, #8]	; (80087a4 <CheckForTimedButtonRelease+0x74>)
 800879c:	220d      	movs	r2, #13
 800879e:	54c2      	strb	r2, [r0, r3]
 80087a0:	e7f8      	b.n	8008794 <CheckForTimedButtonRelease+0x64>
 80087a2:	46c0      	nop			; (mov r8, r8)
 80087a4:	20001484 	.word	0x20001484
 80087a8:	200014dc 	.word	0x200014dc

080087ac <CheckAttachedButtons>:
{
 80087ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ae:	46de      	mov	lr, fp
 80087b0:	4657      	mov	r7, sl
 80087b2:	464e      	mov	r6, r9
 80087b4:	4645      	mov	r5, r8
 80087b6:	b5e0      	push	{r5, r6, r7, lr}
 80087b8:	b089      	sub	sp, #36	; 0x24
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80087ba:	4dbd      	ldr	r5, [pc, #756]	; (8008ab0 <CheckAttachedButtons+0x304>)
 80087bc:	4ebd      	ldr	r6, [pc, #756]	; (8008ab4 <CheckAttachedButtons+0x308>)
 80087be:	4bbe      	ldr	r3, [pc, #760]	; (8008ab8 <CheckAttachedButtons+0x30c>)
 80087c0:	4698      	mov	r8, r3
 80087c2:	4bbe      	ldr	r3, [pc, #760]	; (8008abc <CheckAttachedButtons+0x310>)
 80087c4:	469a      	mov	sl, r3
 80087c6:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	9303      	str	r3, [sp, #12]
 80087cc:	9302      	str	r3, [sp, #8]
 80087ce:	e121      	b.n	8008a14 <CheckAttachedButtons+0x268>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 80087d0:	230e      	movs	r3, #14
 80087d2:	aa02      	add	r2, sp, #8
 80087d4:	4694      	mov	ip, r2
 80087d6:	4463      	add	r3, ip
 80087d8:	8819      	ldrh	r1, [r3, #0]
 80087da:	2201      	movs	r2, #1
 80087dc:	9807      	ldr	r0, [sp, #28]
 80087de:	f009 fd9d 	bl	801231c <HAL_GPIO_WritePin>
 80087e2:	200a      	movs	r0, #10
 80087e4:	f006 f946 	bl	800ea74 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 80087e8:	ab05      	add	r3, sp, #20
 80087ea:	8819      	ldrh	r1, [r3, #0]
 80087ec:	9806      	ldr	r0, [sp, #24]
 80087ee:	f009 fd8f 	bl	8012310 <HAL_GPIO_ReadPin>
 80087f2:	9002      	str	r0, [sp, #8]
 80087f4:	e134      	b.n	8008a60 <CheckAttachedButtons+0x2b4>
			switch (button[i].type)
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d10e      	bne.n	8008818 <CheckAttachedButtons+0x6c>
					if (connected == GPIO_PIN_SET)	
 80087fa:	9b02      	ldr	r3, [sp, #8]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d100      	bne.n	8008802 <CheckAttachedButtons+0x56>
 8008800:	e1d7      	b.n	8008bb2 <CheckAttachedButtons+0x406>
					else if (connected == GPIO_PIN_RESET) 
 8008802:	2b00      	cmp	r3, #0
 8008804:	d108      	bne.n	8008818 <CheckAttachedButtons+0x6c>
 8008806:	2302      	movs	r3, #2
 8008808:	9303      	str	r3, [sp, #12]
 800880a:	e031      	b.n	8008870 <CheckAttachedButtons+0xc4>
					if (connected == GPIO_PIN_SET)	
 800880c:	9b02      	ldr	r3, [sp, #8]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d02c      	beq.n	800886c <CheckAttachedButtons+0xc0>
					else if (connected == GPIO_PIN_RESET)
 8008812:	2b00      	cmp	r3, #0
 8008814:	d100      	bne.n	8008818 <CheckAttachedButtons+0x6c>
 8008816:	e1c9      	b.n	8008bac <CheckAttachedButtons+0x400>
			if (state == CLOSED || state == ON)												
 8008818:	9b03      	ldr	r3, [sp, #12]
 800881a:	2b04      	cmp	r3, #4
 800881c:	d028      	beq.n	8008870 <CheckAttachedButtons+0xc4>
 800881e:	2b02      	cmp	r3, #2
 8008820:	d026      	beq.n	8008870 <CheckAttachedButtons+0xc4>
			if (state == OPEN || state == OFF)												
 8008822:	23fd      	movs	r3, #253	; 0xfd
 8008824:	9a03      	ldr	r2, [sp, #12]
 8008826:	4013      	ands	r3, r2
 8008828:	2b01      	cmp	r3, #1
 800882a:	d129      	bne.n	8008880 <CheckAttachedButtons+0xd4>
				if (releaseCounter[i] < 0xFFFF)
 800882c:	0031      	movs	r1, r6
 800882e:	6872      	ldr	r2, [r6, #4]
 8008830:	48a3      	ldr	r0, [pc, #652]	; (8008ac0 <CheckAttachedButtons+0x314>)
					releaseCounter[i] = 0;																	// Reset debounce counter		
 8008832:	2300      	movs	r3, #0
				if (releaseCounter[i] < 0xFFFF)
 8008834:	4282      	cmp	r2, r0
 8008836:	d800      	bhi.n	800883a <CheckAttachedButtons+0x8e>
					++releaseCounter[i];																		// Advance the debounce counter
 8008838:	1c53      	adds	r3, r2, #1
 800883a:	604b      	str	r3, [r1, #4]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 800883c:	4ba1      	ldr	r3, [pc, #644]	; (8008ac4 <CheckAttachedButtons+0x318>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b02      	cmp	r3, #2
 8008842:	d045      	beq.n	80088d0 <CheckAttachedButtons+0x124>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 8008844:	4653      	mov	r3, sl
 8008846:	785a      	ldrb	r2, [r3, #1]
 8008848:	4b9f      	ldr	r3, [pc, #636]	; (8008ac8 <CheckAttachedButtons+0x31c>)
 800884a:	795b      	ldrb	r3, [r3, #5]
 800884c:	429a      	cmp	r2, r3
 800884e:	d917      	bls.n	8008880 <CheckAttachedButtons+0xd4>
					clicked = 0;
 8008850:	2300      	movs	r3, #0
 8008852:	4a9c      	ldr	r2, [pc, #624]	; (8008ac4 <CheckAttachedButtons+0x318>)
 8008854:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 8008856:	4652      	mov	r2, sl
 8008858:	7053      	strb	r3, [r2, #1]
 800885a:	e011      	b.n	8008880 <CheckAttachedButtons+0xd4>
					if (connected == GPIO_PIN_SET)	
 800885c:	9b02      	ldr	r3, [sp, #8]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d02f      	beq.n	80088c2 <CheckAttachedButtons+0x116>
					else if (connected == GPIO_PIN_RESET) 
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1d8      	bne.n	8008818 <CheckAttachedButtons+0x6c>
						state = OFF;
 8008866:	2301      	movs	r3, #1
 8008868:	9303      	str	r3, [sp, #12]
 800886a:	e7df      	b.n	800882c <CheckAttachedButtons+0x80>
						state = CLOSED;
 800886c:	2304      	movs	r3, #4
 800886e:	9303      	str	r3, [sp, #12]
				if (pressCounter[i] < 0xFFFF)	
 8008870:	4643      	mov	r3, r8
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	4a92      	ldr	r2, [pc, #584]	; (8008ac0 <CheckAttachedButtons+0x314>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d826      	bhi.n	80088c8 <CheckAttachedButtons+0x11c>
					++pressCounter[i];																			// Advance the debounce counter
 800887a:	3301      	adds	r3, #1
 800887c:	4642      	mov	r2, r8
 800887e:	6053      	str	r3, [r2, #4]
			if (pressCounter[i] < BOS.buttons.debounce) 									
 8008880:	4647      	mov	r7, r8
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	4b90      	ldr	r3, [pc, #576]	; (8008ac8 <CheckAttachedButtons+0x31c>)
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	429a      	cmp	r2, r3
 800888a:	d352      	bcc.n	8008932 <CheckAttachedButtons+0x186>
				if (pressCounter[i] == BOS.buttons.debounce)
 800888c:	d02a      	beq.n	80088e4 <CheckAttachedButtons+0x138>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800888e:	6872      	ldr	r2, [r6, #4]
 8008890:	4293      	cmp	r3, r2
 8008892:	d201      	bcs.n	8008898 <CheckAttachedButtons+0xec>
					releaseCounter[i] = 0;					
 8008894:	2300      	movs	r3, #0
 8008896:	6073      	str	r3, [r6, #4]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a8b      	ldr	r2, [pc, #556]	; (8008ac8 <CheckAttachedButtons+0x31c>)
 800889c:	8852      	ldrh	r2, [r2, #2]
 800889e:	4293      	cmp	r3, r2
 80088a0:	d938      	bls.n	8008914 <CheckAttachedButtons+0x168>
 80088a2:	22fa      	movs	r2, #250	; 0xfa
 80088a4:	0052      	lsls	r2, r2, #1
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d234      	bcs.n	8008914 <CheckAttachedButtons+0x168>
					if (clicked == 0)
 80088aa:	4b86      	ldr	r3, [pc, #536]	; (8008ac4 <CheckAttachedButtons+0x318>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d11e      	bne.n	80088f0 <CheckAttachedButtons+0x144>
						clicked = 1;																					// Record a possible single click 
 80088b2:	4b84      	ldr	r3, [pc, #528]	; (8008ac4 <CheckAttachedButtons+0x318>)
 80088b4:	3af4      	subs	r2, #244	; 0xf4
 80088b6:	3aff      	subs	r2, #255	; 0xff
 80088b8:	701a      	strb	r2, [r3, #0]
 80088ba:	e03a      	b.n	8008932 <CheckAttachedButtons+0x186>
						state = CLOSED;
 80088bc:	2304      	movs	r3, #4
 80088be:	9303      	str	r3, [sp, #12]
 80088c0:	e7d6      	b.n	8008870 <CheckAttachedButtons+0xc4>
 80088c2:	2302      	movs	r3, #2
 80088c4:	9303      	str	r3, [sp, #12]
 80088c6:	e7d3      	b.n	8008870 <CheckAttachedButtons+0xc4>
					pressCounter[i] = 0;																		// Reset debounce counter					
 80088c8:	2300      	movs	r3, #0
 80088ca:	4642      	mov	r2, r8
 80088cc:	6053      	str	r3, [r2, #4]
 80088ce:	e7d7      	b.n	8008880 <CheckAttachedButtons+0xd4>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 80088d0:	4653      	mov	r3, sl
 80088d2:	785b      	ldrb	r3, [r3, #1]
 80088d4:	4a7c      	ldr	r2, [pc, #496]	; (8008ac8 <CheckAttachedButtons+0x31c>)
 80088d6:	7952      	ldrb	r2, [r2, #5]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d3b9      	bcc.n	8008850 <CheckAttachedButtons+0xa4>
					++dblCounter[i];			
 80088dc:	3301      	adds	r3, #1
 80088de:	4652      	mov	r2, sl
 80088e0:	7053      	strb	r3, [r2, #1]
 80088e2:	e7cd      	b.n	8008880 <CheckAttachedButtons+0xd4>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 80088e4:	2207      	movs	r2, #7
 80088e6:	4649      	mov	r1, r9
 80088e8:	724a      	strb	r2, [r1, #9]
					++pressCounter[i];
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	607a      	str	r2, [r7, #4]
 80088ee:	e7ce      	b.n	800888e <CheckAttachedButtons+0xe2>
					else if (clicked == 2) {
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d11e      	bne.n	8008932 <CheckAttachedButtons+0x186>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 80088f4:	4651      	mov	r1, sl
 80088f6:	784b      	ldrb	r3, [r1, #1]
 80088f8:	4a73      	ldr	r2, [pc, #460]	; (8008ac8 <CheckAttachedButtons+0x31c>)
 80088fa:	7912      	ldrb	r2, [r2, #4]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d218      	bcs.n	8008932 <CheckAttachedButtons+0x186>
 8008900:	4a71      	ldr	r2, [pc, #452]	; (8008ac8 <CheckAttachedButtons+0x31c>)
 8008902:	7952      	ldrb	r2, [r2, #5]
 8008904:	429a      	cmp	r2, r3
 8008906:	d914      	bls.n	8008932 <CheckAttachedButtons+0x186>
							clicked = 3;																				// Record a possible double click 
 8008908:	4b6e      	ldr	r3, [pc, #440]	; (8008ac4 <CheckAttachedButtons+0x318>)
 800890a:	2203      	movs	r2, #3
 800890c:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 800890e:	2300      	movs	r3, #0
 8008910:	704b      	strb	r3, [r1, #1]
 8008912:	e00e      	b.n	8008932 <CheckAttachedButtons+0x186>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 8008914:	3bf5      	subs	r3, #245	; 0xf5
 8008916:	3bff      	subs	r3, #255	; 0xff
 8008918:	4a6c      	ldr	r2, [pc, #432]	; (8008acc <CheckAttachedButtons+0x320>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d809      	bhi.n	8008932 <CheckAttachedButtons+0x186>
					if (clicked)	clicked = 0;															// Cannot be a click
 800891e:	4b69      	ldr	r3, [pc, #420]	; (8008ac4 <CheckAttachedButtons+0x318>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <CheckAttachedButtons+0x180>
 8008926:	4b67      	ldr	r3, [pc, #412]	; (8008ac4 <CheckAttachedButtons+0x318>)
 8008928:	2200      	movs	r2, #0
 800892a:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800892c:	0020      	movs	r0, r4
 800892e:	f7ff fec1 	bl	80086b4 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 8008932:	0031      	movs	r1, r6
 8008934:	6872      	ldr	r2, [r6, #4]
 8008936:	4b64      	ldr	r3, [pc, #400]	; (8008ac8 <CheckAttachedButtons+0x31c>)
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	429a      	cmp	r2, r3
 800893c:	d349      	bcc.n	80089d2 <CheckAttachedButtons+0x226>
				if (releaseCounter[i] == BOS.buttons.debounce)
 800893e:	d028      	beq.n	8008992 <CheckAttachedButtons+0x1e6>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	4293      	cmp	r3, r2
 8008944:	d201      	bcs.n	800894a <CheckAttachedButtons+0x19e>
					pressCounter[i] = 0;				
 8008946:	2300      	movs	r3, #0
 8008948:	607b      	str	r3, [r7, #4]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 800894a:	684b      	ldr	r3, [r1, #4]
 800894c:	4a5e      	ldr	r2, [pc, #376]	; (8008ac8 <CheckAttachedButtons+0x31c>)
 800894e:	8852      	ldrh	r2, [r2, #2]
 8008950:	4293      	cmp	r3, r2
 8008952:	d939      	bls.n	80089c8 <CheckAttachedButtons+0x21c>
 8008954:	22fa      	movs	r2, #250	; 0xfa
 8008956:	0052      	lsls	r2, r2, #1
 8008958:	4293      	cmp	r3, r2
 800895a:	d235      	bcs.n	80089c8 <CheckAttachedButtons+0x21c>
					if (clicked == 1)
 800895c:	4b59      	ldr	r3, [pc, #356]	; (8008ac4 <CheckAttachedButtons+0x318>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d01c      	beq.n	800899e <CheckAttachedButtons+0x1f2>
					else if (clicked == 3)
 8008964:	2b03      	cmp	r3, #3
 8008966:	d134      	bne.n	80089d2 <CheckAttachedButtons+0x226>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 8008968:	3303      	adds	r3, #3
 800896a:	464a      	mov	r2, r9
 800896c:	7253      	strb	r3, [r2, #9]
						clicked = 0;																					// Prepare for a single click					
 800896e:	4b55      	ldr	r3, [pc, #340]	; (8008ac4 <CheckAttachedButtons+0x318>)
 8008970:	2200      	movs	r2, #0
 8008972:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 8008974:	4b56      	ldr	r3, [pc, #344]	; (8008ad0 <CheckAttachedButtons+0x324>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d13e      	bne.n	80089fa <CheckAttachedButtons+0x24e>
 800897c:	464b      	mov	r3, r9
 800897e:	7c5b      	ldrb	r3, [r3, #17]
 8008980:	079b      	lsls	r3, r3, #30
 8008982:	d53a      	bpl.n	80089fa <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008984:	4b52      	ldr	r3, [pc, #328]	; (8008ad0 <CheckAttachedButtons+0x324>)
 8008986:	2201      	movs	r2, #1
 8008988:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 800898a:	0020      	movs	r0, r4
 800898c:	f7ff fe8f 	bl	80086ae <buttonDblClickedCallback>
 8008990:	e033      	b.n	80089fa <CheckAttachedButtons+0x24e>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 8008992:	2208      	movs	r2, #8
 8008994:	4648      	mov	r0, r9
 8008996:	7242      	strb	r2, [r0, #9]
					++releaseCounter[i];
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	6072      	str	r2, [r6, #4]
 800899c:	e7d0      	b.n	8008940 <CheckAttachedButtons+0x194>
						button[i].state = CLICKED;														// Record a single button click event
 800899e:	3304      	adds	r3, #4
 80089a0:	464a      	mov	r2, r9
 80089a2:	7253      	strb	r3, [r2, #9]
						clicked = 2;																					// Prepare for a double click
 80089a4:	4b47      	ldr	r3, [pc, #284]	; (8008ac4 <CheckAttachedButtons+0x318>)
 80089a6:	2202      	movs	r2, #2
 80089a8:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 80089aa:	4b49      	ldr	r3, [pc, #292]	; (8008ad0 <CheckAttachedButtons+0x324>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d123      	bne.n	80089fa <CheckAttachedButtons+0x24e>
 80089b2:	464b      	mov	r3, r9
 80089b4:	7c5b      	ldrb	r3, [r3, #17]
 80089b6:	07db      	lsls	r3, r3, #31
 80089b8:	d51f      	bpl.n	80089fa <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80089ba:	4b45      	ldr	r3, [pc, #276]	; (8008ad0 <CheckAttachedButtons+0x324>)
 80089bc:	2201      	movs	r2, #1
 80089be:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 80089c0:	0020      	movs	r0, r4
 80089c2:	f7ff fe73 	bl	80086ac <buttonClickedCallback>
 80089c6:	e018      	b.n	80089fa <CheckAttachedButtons+0x24e>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 80089c8:	3bf5      	subs	r3, #245	; 0xf5
 80089ca:	3bff      	subs	r3, #255	; 0xff
 80089cc:	4a3f      	ldr	r2, [pc, #252]	; (8008acc <CheckAttachedButtons+0x320>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d909      	bls.n	80089e6 <CheckAttachedButtons+0x23a>
			switch (button[i].state)
 80089d2:	464b      	mov	r3, r9
 80089d4:	7a5b      	ldrb	r3, [r3, #9]
 80089d6:	3b05      	subs	r3, #5
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	2a09      	cmp	r2, #9
 80089dc:	d80d      	bhi.n	80089fa <CheckAttachedButtons+0x24e>
 80089de:	0093      	lsls	r3, r2, #2
 80089e0:	4a3c      	ldr	r2, [pc, #240]	; (8008ad4 <CheckAttachedButtons+0x328>)
 80089e2:	58d3      	ldr	r3, [r2, r3]
 80089e4:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 80089e6:	0020      	movs	r0, r4
 80089e8:	f7ff fea2 	bl	8008730 <CheckForTimedButtonRelease>
 80089ec:	e7f1      	b.n	80089d2 <CheckAttachedButtons+0x226>
					buttonPressedCallback(i);
 80089ee:	0020      	movs	r0, r4
 80089f0:	f7ff fe5a 	bl	80086a8 <buttonPressedCallback>
					button[i].state = NONE;
 80089f4:	2300      	movs	r3, #0
 80089f6:	464a      	mov	r2, r9
 80089f8:	7253      	strb	r3, [r2, #9]
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80089fa:	3401      	adds	r4, #1
 80089fc:	b2e4      	uxtb	r4, r4
 80089fe:	3509      	adds	r5, #9
 8008a00:	3604      	adds	r6, #4
 8008a02:	2304      	movs	r3, #4
 8008a04:	469c      	mov	ip, r3
 8008a06:	44e0      	add	r8, ip
 8008a08:	3b03      	subs	r3, #3
 8008a0a:	469c      	mov	ip, r3
 8008a0c:	44e2      	add	sl, ip
 8008a0e:	2c06      	cmp	r4, #6
 8008a10:	d100      	bne.n	8008a14 <CheckAttachedButtons+0x268>
 8008a12:	e0d1      	b.n	8008bb8 <CheckAttachedButtons+0x40c>
		if (button[i].type)			// Only check defined butons
 8008a14:	46a9      	mov	r9, r5
 8008a16:	7aab      	ldrb	r3, [r5, #10]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0ee      	beq.n	80089fa <CheckAttachedButtons+0x24e>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 8008a1c:	4b2c      	ldr	r3, [pc, #176]	; (8008ad0 <CheckAttachedButtons+0x324>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d100      	bne.n	8008a26 <CheckAttachedButtons+0x27a>
 8008a24:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008a26:	230e      	movs	r3, #14
 8008a28:	aa02      	add	r2, sp, #8
 8008a2a:	4694      	mov	ip, r2
 8008a2c:	4463      	add	r3, ip
 8008a2e:	469b      	mov	fp, r3
 8008a30:	af05      	add	r7, sp, #20
 8008a32:	9700      	str	r7, [sp, #0]
 8008a34:	ab06      	add	r3, sp, #24
 8008a36:	465a      	mov	r2, fp
 8008a38:	a907      	add	r1, sp, #28
 8008a3a:	0020      	movs	r0, r4
 8008a3c:	f005 fc96 	bl	800e36c <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 8008a40:	465b      	mov	r3, fp
 8008a42:	8819      	ldrh	r1, [r3, #0]
 8008a44:	2200      	movs	r2, #0
 8008a46:	9807      	ldr	r0, [sp, #28]
 8008a48:	f009 fc68 	bl	801231c <HAL_GPIO_WritePin>
 8008a4c:	200a      	movs	r0, #10
 8008a4e:	f006 f811 	bl	800ea74 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 8008a52:	8839      	ldrh	r1, [r7, #0]
 8008a54:	9806      	ldr	r0, [sp, #24]
 8008a56:	f009 fc5b 	bl	8012310 <HAL_GPIO_ReadPin>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d100      	bne.n	8008a60 <CheckAttachedButtons+0x2b4>
 8008a5e:	e6b7      	b.n	80087d0 <CheckAttachedButtons+0x24>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008a60:	230e      	movs	r3, #14
 8008a62:	aa02      	add	r2, sp, #8
 8008a64:	4694      	mov	ip, r2
 8008a66:	4463      	add	r3, ip
 8008a68:	8819      	ldrh	r1, [r3, #0]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	9807      	ldr	r0, [sp, #28]
 8008a6e:	f009 fc55 	bl	801231c <HAL_GPIO_WritePin>
			switch (button[i].type)
 8008a72:	464b      	mov	r3, r9
 8008a74:	7a9b      	ldrb	r3, [r3, #10]
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d100      	bne.n	8008a7c <CheckAttachedButtons+0x2d0>
 8008a7a:	e6ef      	b.n	800885c <CheckAttachedButtons+0xb0>
 8008a7c:	d900      	bls.n	8008a80 <CheckAttachedButtons+0x2d4>
 8008a7e:	e6ba      	b.n	80087f6 <CheckAttachedButtons+0x4a>
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d100      	bne.n	8008a86 <CheckAttachedButtons+0x2da>
 8008a84:	e6c2      	b.n	800880c <CheckAttachedButtons+0x60>
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d000      	beq.n	8008a8c <CheckAttachedButtons+0x2e0>
 8008a8a:	e6c5      	b.n	8008818 <CheckAttachedButtons+0x6c>
					if (connected == GPIO_PIN_SET)	
 8008a8c:	9b02      	ldr	r3, [sp, #8]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d100      	bne.n	8008a94 <CheckAttachedButtons+0x2e8>
 8008a92:	e713      	b.n	80088bc <CheckAttachedButtons+0x110>
					else if (connected == GPIO_PIN_RESET) 
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d000      	beq.n	8008a9a <CheckAttachedButtons+0x2ee>
 8008a98:	e6be      	b.n	8008818 <CheckAttachedButtons+0x6c>
						state = OPEN;	
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	9303      	str	r3, [sp, #12]
 8008a9e:	e6c5      	b.n	800882c <CheckAttachedButtons+0x80>
					buttonReleasedCallback(i);
 8008aa0:	0020      	movs	r0, r4
 8008aa2:	f7ff fe02 	bl	80086aa <buttonReleasedCallback>
					button[i].state = NONE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	464a      	mov	r2, r9
 8008aaa:	7253      	strb	r3, [r2, #9]
      		break;
 8008aac:	e7a5      	b.n	80089fa <CheckAttachedButtons+0x24e>
 8008aae:	46c0      	nop			; (mov r8, r8)
 8008ab0:	20001484 	.word	0x20001484
 8008ab4:	200014dc 	.word	0x200014dc
 8008ab8:	200014c4 	.word	0x200014c4
 8008abc:	200014bc 	.word	0x200014bc
 8008ac0:	0000fffe 	.word	0x0000fffe
 8008ac4:	200014ba 	.word	0x200014ba
 8008ac8:	20006d18 	.word	0x20006d18
 8008acc:	0000fe0a 	.word	0x0000fe0a
 8008ad0:	200014c2 	.word	0x200014c2
 8008ad4:	0801cca0 	.word	0x0801cca0
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 8008ad8:	4b3b      	ldr	r3, [pc, #236]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d18c      	bne.n	80089fa <CheckAttachedButtons+0x24e>
 8008ae0:	464b      	mov	r3, r9
 8008ae2:	7c5b      	ldrb	r3, [r3, #17]
 8008ae4:	075b      	lsls	r3, r3, #29
 8008ae6:	d588      	bpl.n	80089fa <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008ae8:	4b37      	ldr	r3, [pc, #220]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008aea:	2201      	movs	r2, #1
 8008aec:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 8008aee:	2101      	movs	r1, #1
 8008af0:	0020      	movs	r0, r4
 8008af2:	f7ff fddd 	bl	80086b0 <buttonPressedForXCallback>
 8008af6:	e780      	b.n	80089fa <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 8008af8:	4b33      	ldr	r3, [pc, #204]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d000      	beq.n	8008b02 <CheckAttachedButtons+0x356>
 8008b00:	e77b      	b.n	80089fa <CheckAttachedButtons+0x24e>
 8008b02:	464b      	mov	r3, r9
 8008b04:	7c5b      	ldrb	r3, [r3, #17]
 8008b06:	071b      	lsls	r3, r3, #28
 8008b08:	d400      	bmi.n	8008b0c <CheckAttachedButtons+0x360>
 8008b0a:	e776      	b.n	80089fa <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008b0c:	4b2e      	ldr	r3, [pc, #184]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008b0e:	2201      	movs	r2, #1
 8008b10:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 8008b12:	2102      	movs	r1, #2
 8008b14:	0020      	movs	r0, r4
 8008b16:	f7ff fdcb 	bl	80086b0 <buttonPressedForXCallback>
 8008b1a:	e76e      	b.n	80089fa <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 8008b1c:	4b2a      	ldr	r3, [pc, #168]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d000      	beq.n	8008b26 <CheckAttachedButtons+0x37a>
 8008b24:	e769      	b.n	80089fa <CheckAttachedButtons+0x24e>
 8008b26:	464b      	mov	r3, r9
 8008b28:	7c5b      	ldrb	r3, [r3, #17]
 8008b2a:	06db      	lsls	r3, r3, #27
 8008b2c:	d400      	bmi.n	8008b30 <CheckAttachedButtons+0x384>
 8008b2e:	e764      	b.n	80089fa <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008b30:	4b25      	ldr	r3, [pc, #148]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008b32:	2201      	movs	r2, #1
 8008b34:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 8008b36:	2103      	movs	r1, #3
 8008b38:	0020      	movs	r0, r4
 8008b3a:	f7ff fdb9 	bl	80086b0 <buttonPressedForXCallback>
 8008b3e:	e75c      	b.n	80089fa <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 8008b40:	4b21      	ldr	r3, [pc, #132]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d000      	beq.n	8008b4a <CheckAttachedButtons+0x39e>
 8008b48:	e757      	b.n	80089fa <CheckAttachedButtons+0x24e>
 8008b4a:	464b      	mov	r3, r9
 8008b4c:	7c5b      	ldrb	r3, [r3, #17]
 8008b4e:	069b      	lsls	r3, r3, #26
 8008b50:	d400      	bmi.n	8008b54 <CheckAttachedButtons+0x3a8>
 8008b52:	e752      	b.n	80089fa <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008b54:	4b1c      	ldr	r3, [pc, #112]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008b56:	2201      	movs	r2, #1
 8008b58:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	0020      	movs	r0, r4
 8008b5e:	f7ff fda8 	bl	80086b2 <buttonReleasedForYCallback>
 8008b62:	e74a      	b.n	80089fa <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 8008b64:	4b18      	ldr	r3, [pc, #96]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d000      	beq.n	8008b6e <CheckAttachedButtons+0x3c2>
 8008b6c:	e745      	b.n	80089fa <CheckAttachedButtons+0x24e>
 8008b6e:	464b      	mov	r3, r9
 8008b70:	7c5b      	ldrb	r3, [r3, #17]
 8008b72:	065b      	lsls	r3, r3, #25
 8008b74:	d400      	bmi.n	8008b78 <CheckAttachedButtons+0x3cc>
 8008b76:	e740      	b.n	80089fa <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008b78:	4b13      	ldr	r3, [pc, #76]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 8008b7e:	2102      	movs	r1, #2
 8008b80:	0020      	movs	r0, r4
 8008b82:	f7ff fd96 	bl	80086b2 <buttonReleasedForYCallback>
 8008b86:	e738      	b.n	80089fa <CheckAttachedButtons+0x24e>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 8008b88:	4b0f      	ldr	r3, [pc, #60]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d000      	beq.n	8008b92 <CheckAttachedButtons+0x3e6>
 8008b90:	e733      	b.n	80089fa <CheckAttachedButtons+0x24e>
 8008b92:	464b      	mov	r3, r9
 8008b94:	7c5b      	ldrb	r3, [r3, #17]
 8008b96:	2b7f      	cmp	r3, #127	; 0x7f
 8008b98:	d800      	bhi.n	8008b9c <CheckAttachedButtons+0x3f0>
 8008b9a:	e72e      	b.n	80089fa <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <CheckAttachedButtons+0x41c>)
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 8008ba2:	2103      	movs	r1, #3
 8008ba4:	0020      	movs	r0, r4
 8008ba6:	f7ff fd84 	bl	80086b2 <buttonReleasedForYCallback>
 8008baa:	e726      	b.n	80089fa <CheckAttachedButtons+0x24e>
						state = OPEN;			
 8008bac:	2303      	movs	r3, #3
 8008bae:	9303      	str	r3, [sp, #12]
 8008bb0:	e63c      	b.n	800882c <CheckAttachedButtons+0x80>
						state = OFF;
 8008bb2:	9b02      	ldr	r3, [sp, #8]
 8008bb4:	9303      	str	r3, [sp, #12]
			if (state == OPEN || state == OFF)												
 8008bb6:	e639      	b.n	800882c <CheckAttachedButtons+0x80>
}
 8008bb8:	b009      	add	sp, #36	; 0x24
 8008bba:	bcf0      	pop	{r4, r5, r6, r7}
 8008bbc:	46bb      	mov	fp, r7
 8008bbe:	46b2      	mov	sl, r6
 8008bc0:	46a9      	mov	r9, r5
 8008bc2:	46a0      	mov	r8, r4
 8008bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc6:	46c0      	nop			; (mov r8, r8)
 8008bc8:	200014c2 	.word	0x200014c2

08008bcc <AddPortButton>:
/* --- Define a new button attached to one of array ports
					buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
					port: array port (P1 - Px)
*/
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port)
{
 8008bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bce:	b08d      	sub	sp, #52	; 0x34
 8008bd0:	0006      	movs	r6, r0
 8008bd2:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port; 
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8008bd4:	4b41      	ldr	r3, [pc, #260]	; (8008cdc <AddPortButton+0x110>)
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d157      	bne.n	8008c8c <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;	
 8008bdc:	4b40      	ldr	r3, [pc, #256]	; (8008ce0 <AddPortButton+0x114>)
 8008bde:	2204      	movs	r2, #4
 8008be0:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 8008be2:	4b3e      	ldr	r3, [pc, #248]	; (8008cdc <AddPortButton+0x110>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d15a      	bne.n	8008ca0 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 8008bea:	2512      	movs	r5, #18
 8008bec:	446d      	add	r5, sp
 8008bee:	af04      	add	r7, sp, #16
 8008bf0:	9700      	str	r7, [sp, #0]
 8008bf2:	ab05      	add	r3, sp, #20
 8008bf4:	002a      	movs	r2, r5
 8008bf6:	a906      	add	r1, sp, #24
 8008bf8:	0020      	movs	r0, r4
 8008bfa:	f005 fbb7 	bl	800e36c <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 8008bfe:	882b      	ldrh	r3, [r5, #0]
 8008c00:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c02:	2301      	movs	r3, #1
 8008c04:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c06:	2500      	movs	r5, #0
 8008c08:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008c0a:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 8008c0c:	a907      	add	r1, sp, #28
 8008c0e:	9806      	ldr	r0, [sp, #24]
 8008c10:	f009 fa94 	bl	801213c <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8008c14:	883b      	ldrh	r3, [r7, #0]
 8008c16:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c18:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 8008c1e:	a907      	add	r1, sp, #28
 8008c20:	9805      	ldr	r0, [sp, #20]
 8008c22:	f009 fa8b 	bl	801213c <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;	
 8008c26:	00e2      	lsls	r2, r4, #3
 8008c28:	1912      	adds	r2, r2, r4
 8008c2a:	4b2e      	ldr	r3, [pc, #184]	; (8008ce4 <AddPortButton+0x118>)
 8008c2c:	189b      	adds	r3, r3, r2
 8008c2e:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008c30:	0025      	movs	r5, r4
 8008c32:	353a      	adds	r5, #58	; 0x3a
 8008c34:	00ad      	lsls	r5, r5, #2
 8008c36:	210e      	movs	r1, #14
 8008c38:	4469      	add	r1, sp
 8008c3a:	0028      	movs	r0, r5
 8008c3c:	f7ff f8b0 	bl	8007da0 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d133      	bne.n	8008cac <AddPortButton+0xe0>
	{
		temp8 = (uint8_t)(temp16 >> 8);
 8008c44:	230e      	movs	r3, #14
 8008c46:	446b      	add	r3, sp
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	0a1a      	lsrs	r2, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 8008c4c:	0b1b      	lsrs	r3, r3, #12
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	d103      	bne.n	8008c5a <AddPortButton+0x8e>
 8008c52:	230f      	movs	r3, #15
 8008c54:	4013      	ands	r3, r2
 8008c56:	42b3      	cmp	r3, r6
 8008c58:	d015      	beq.n	8008c86 <AddPortButton+0xba>
			return BOS_OK;
		else 																															// Update the variable
		{																														
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8008c5a:	0324      	lsls	r4, r4, #12
 8008c5c:	0231      	lsls	r1, r6, #8
 8008c5e:	4321      	orrs	r1, r4
 8008c60:	b289      	uxth	r1, r1
 8008c62:	230e      	movs	r3, #14
 8008c64:	446b      	add	r3, sp
 8008c66:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008c68:	0028      	movs	r0, r5
 8008c6a:	f7ff f8c5 	bl	8007df8 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008c6e:	1c68      	adds	r0, r5, #1
 8008c70:	2100      	movs	r1, #0
 8008c72:	f7ff f8c1 	bl	8007df8 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008c76:	1ca8      	adds	r0, r5, #2
 8008c78:	2100      	movs	r1, #0
 8008c7a:	f7ff f8bd 	bl	8007df8 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8008c7e:	1ce8      	adds	r0, r5, #3
 8008c80:	2100      	movs	r1, #0
 8008c82:	f7ff f8b9 	bl	8007df8 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
	}
	
	return result;
}
 8008c86:	2000      	movs	r0, #0
 8008c88:	b00d      	add	sp, #52	; 0x34
 8008c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 8008c8c:	008d      	lsls	r5, r1, #2
 8008c8e:	4b16      	ldr	r3, [pc, #88]	; (8008ce8 <AddPortButton+0x11c>)
 8008c90:	58e8      	ldr	r0, [r5, r3]
 8008c92:	f006 fa3b 	bl	800f10c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8008c96:	4b15      	ldr	r3, [pc, #84]	; (8008cec <AddPortButton+0x120>)
 8008c98:	58e8      	ldr	r0, [r5, r3]
 8008c9a:	f006 fa37 	bl	800f10c <osSemaphoreRelease>
 8008c9e:	e79d      	b.n	8008bdc <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008ca0:	0020      	movs	r0, r4
 8008ca2:	f006 f899 	bl	800edd8 <GetUart>
 8008ca6:	f00a fb06 	bl	80132b6 <HAL_UART_DeInit>
 8008caa:	e79e      	b.n	8008bea <AddPortButton+0x1e>
	  	temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8008cac:	0324      	lsls	r4, r4, #12
 8008cae:	0231      	lsls	r1, r6, #8
 8008cb0:	4321      	orrs	r1, r4
 8008cb2:	b289      	uxth	r1, r1
 8008cb4:	230e      	movs	r3, #14
 8008cb6:	446b      	add	r3, sp
 8008cb8:	8019      	strh	r1, [r3, #0]
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 8008cba:	0028      	movs	r0, r5
 8008cbc:	f7ff f89c 	bl	8007df8 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008cc0:	1c68      	adds	r0, r5, #1
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	f7ff f898 	bl	8007df8 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008cc8:	1ca8      	adds	r0, r5, #2
 8008cca:	2100      	movs	r1, #0
 8008ccc:	f7ff f894 	bl	8007df8 <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8008cd0:	1ce8      	adds	r0, r5, #3
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	f7ff f890 	bl	8007df8 <EE_WriteVariable>
 8008cd8:	e7d5      	b.n	8008c86 <AddPortButton+0xba>
 8008cda:	46c0      	nop			; (mov r8, r8)
 8008cdc:	20000aa5 	.word	0x20000aa5
 8008ce0:	200010c8 	.word	0x200010c8
 8008ce4:	20001484 	.word	0x20001484
 8008ce8:	20006db4 	.word	0x20006db4
 8008cec:	20006d98 	.word	0x20006d98

08008cf0 <RemovePortButton>:

/* --- Undefine a button attached to one of array ports and restore the port to default state
					port: array port (P1 - Px)
*/
BOS_Status RemovePortButton(uint8_t port)
{
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type = NONE;
 8008cf6:	4836      	ldr	r0, [pc, #216]	; (8008dd0 <RemovePortButton+0xe0>)
 8008cf8:	00e9      	lsls	r1, r5, #3
 8008cfa:	1949      	adds	r1, r1, r5
 8008cfc:	1842      	adds	r2, r0, r1
 8008cfe:	2300      	movs	r3, #0
 8008d00:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 8008d02:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 8008d04:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 8008d06:	7093      	strb	r3, [r2, #2]
 8008d08:	70d3      	strb	r3, [r2, #3]
 8008d0a:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 8008d0c:	7153      	strb	r3, [r2, #5]
 8008d0e:	7193      	strb	r3, [r2, #6]
 8008d10:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008d12:	002c      	movs	r4, r5
 8008d14:	343a      	adds	r4, #58	; 0x3a
 8008d16:	00a4      	lsls	r4, r4, #2
 8008d18:	466b      	mov	r3, sp
 8008d1a:	1d99      	adds	r1, r3, #6
 8008d1c:	0020      	movs	r0, r4
 8008d1e:	f7ff f83f 	bl	8007da0 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d021      	beq.n	8008d6a <RemovePortButton+0x7a>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef* huart = GetUart(port);
 8008d26:	0028      	movs	r0, r5
 8008d28:	f006 f856 	bl	800edd8 <GetUart>
 8008d2c:	0006      	movs	r6, r0
	
	if (huart->Instance == USART1) 
 8008d2e:	6803      	ldr	r3, [r0, #0]
 8008d30:	4a28      	ldr	r2, [pc, #160]	; (8008dd4 <RemovePortButton+0xe4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d03e      	beq.n	8008db4 <RemovePortButton+0xc4>
	{	
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} 
	else if (huart->Instance == USART2) 
 8008d36:	4a28      	ldr	r2, [pc, #160]	; (8008dd8 <RemovePortButton+0xe8>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d027      	beq.n	8008d8c <RemovePortButton+0x9c>
	{	
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} 
	else if (huart->Instance == USART3) 
 8008d3c:	4a27      	ldr	r2, [pc, #156]	; (8008ddc <RemovePortButton+0xec>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d028      	beq.n	8008d94 <RemovePortButton+0xa4>
	{	
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} 
	else if (huart->Instance == USART4) 
 8008d42:	4a27      	ldr	r2, [pc, #156]	; (8008de0 <RemovePortButton+0xf0>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d029      	beq.n	8008d9c <RemovePortButton+0xac>
	{	
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} 
	else if (huart->Instance == USART5) 
 8008d48:	4a26      	ldr	r2, [pc, #152]	; (8008de4 <RemovePortButton+0xf4>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d02a      	beq.n	8008da4 <RemovePortButton+0xb4>
	{	
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} 
	else if (huart->Instance == USART6) 
 8008d4e:	4a26      	ldr	r2, [pc, #152]	; (8008de8 <RemovePortButton+0xf8>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d02b      	beq.n	8008dac <RemovePortButton+0xbc>
	{	
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} 
	else if (huart->Instance == USART7) 
 8008d54:	4a25      	ldr	r2, [pc, #148]	; (8008dec <RemovePortButton+0xfc>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d038      	beq.n	8008dcc <RemovePortButton+0xdc>
	{	
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} 
	else if (huart->Instance == USART8) 
 8008d5a:	4a25      	ldr	r2, [pc, #148]	; (8008df0 <RemovePortButton+0x100>)
 8008d5c:	4694      	mov	ip, r2
 8008d5e:	4463      	add	r3, ip
 8008d60:	1e5c      	subs	r4, r3, #1
 8008d62:	41a3      	sbcs	r3, r4
 8008d64:	425c      	negs	r4, r3
 8008d66:	b2e4      	uxtb	r4, r4
 8008d68:	e025      	b.n	8008db6 <RemovePortButton+0xc6>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	0020      	movs	r0, r4
 8008d6e:	f7ff f843 	bl	8007df8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008d72:	1c60      	adds	r0, r4, #1
 8008d74:	2100      	movs	r1, #0
 8008d76:	f7ff f83f 	bl	8007df8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008d7a:	1ca0      	adds	r0, r4, #2
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	f7ff f83b 	bl	8007df8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 8008d82:	1ce0      	adds	r0, r4, #3
 8008d84:	2100      	movs	r1, #0
 8008d86:	f7ff f837 	bl	8007df8 <EE_WriteVariable>
 8008d8a:	e7cc      	b.n	8008d26 <RemovePortButton+0x36>
		MX_USART2_UART_Init();
 8008d8c:	f005 fe96 	bl	800eabc <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8008d90:	2400      	movs	r4, #0
 8008d92:	e010      	b.n	8008db6 <RemovePortButton+0xc6>
		MX_USART3_UART_Init();
 8008d94:	f005 feaa 	bl	800eaec <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008d98:	2400      	movs	r4, #0
 8008d9a:	e00c      	b.n	8008db6 <RemovePortButton+0xc6>
		MX_USART4_UART_Init();
 8008d9c:	f005 febe 	bl	800eb1c <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 8008da0:	2400      	movs	r4, #0
 8008da2:	e008      	b.n	8008db6 <RemovePortButton+0xc6>
		MX_USART5_UART_Init();
 8008da4:	f005 fed2 	bl	800eb4c <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008da8:	2400      	movs	r4, #0
 8008daa:	e004      	b.n	8008db6 <RemovePortButton+0xc6>
		MX_USART6_UART_Init();
 8008dac:	f005 fee6 	bl	800eb7c <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008db0:	2400      	movs	r4, #0
 8008db2:	e000      	b.n	8008db6 <RemovePortButton+0xc6>
 8008db4:	2400      	movs	r4, #0
	} 
	else
		result = BOS_ERROR;			
	
	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 8008db6:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <RemovePortButton+0x104>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 8008dbc:	3201      	adds	r2, #1
 8008dbe:	490e      	ldr	r1, [pc, #56]	; (8008df8 <RemovePortButton+0x108>)
 8008dc0:	0030      	movs	r0, r6
 8008dc2:	f00a fad1 	bl	8013368 <HAL_UART_Receive_IT>
	
	return result;
}
 8008dc6:	0020      	movs	r0, r4
 8008dc8:	b002      	add	sp, #8
 8008dca:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result = BOS_OK;
 8008dcc:	2400      	movs	r4, #0
 8008dce:	e7f2      	b.n	8008db6 <RemovePortButton+0xc6>
 8008dd0:	20001484 	.word	0x20001484
 8008dd4:	40013800 	.word	0x40013800
 8008dd8:	40004400 	.word	0x40004400
 8008ddc:	40004800 	.word	0x40004800
 8008de0:	40004c00 	.word	0x40004c00
 8008de4:	40005000 	.word	0x40005000
 8008de8:	40011400 	.word	0x40011400
 8008dec:	40011800 	.word	0x40011800
 8008df0:	bffee400 	.word	0xbffee400
 8008df4:	200010c8 	.word	0x200010c8
 8008df8:	20000e38 	.word	0x20000e38

08008dfc <SetButtonEvents>:
					released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event. 
					mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
*/
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked, uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,\
													uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec, uint8_t mode)
{
 8008dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dfe:	46de      	mov	lr, fp
 8008e00:	4657      	mov	r7, sl
 8008e02:	464e      	mov	r6, r9
 8008e04:	4645      	mov	r5, r8
 8008e06:	b5e0      	push	{r5, r6, r7, lr}
 8008e08:	b085      	sub	sp, #20
 8008e0a:	0005      	movs	r5, r0
 8008e0c:	469c      	mov	ip, r3
 8008e0e:	9301      	str	r3, [sp, #4]
 8008e10:	ab0e      	add	r3, sp, #56	; 0x38
 8008e12:	781e      	ldrb	r6, [r3, #0]
 8008e14:	ab0f      	add	r3, sp, #60	; 0x3c
 8008e16:	781f      	ldrb	r7, [r3, #0]
 8008e18:	ab10      	add	r3, sp, #64	; 0x40
 8008e1a:	7818      	ldrb	r0, [r3, #0]
 8008e1c:	4681      	mov	r9, r0
 8008e1e:	ab11      	add	r3, sp, #68	; 0x44
 8008e20:	7818      	ldrb	r0, [r3, #0]
 8008e22:	4682      	mov	sl, r0
 8008e24:	ab12      	add	r3, sp, #72	; 0x48
 8008e26:	7818      	ldrb	r0, [r3, #0]
 8008e28:	4680      	mov	r8, r0
 8008e2a:	ab13      	add	r3, sp, #76	; 0x4c
 8008e2c:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;	
	uint16_t res, temp16; uint8_t temp8;
	
	if (button[port].type == NONE)
 8008e2e:	00ec      	lsls	r4, r5, #3
 8008e30:	1964      	adds	r4, r4, r5
 8008e32:	4bcd      	ldr	r3, [pc, #820]	; (8009168 <SetButtonEvents+0x36c>)
 8008e34:	191b      	adds	r3, r3, r4
 8008e36:	785b      	ldrb	r3, [r3, #1]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d100      	bne.n	8008e3e <SetButtonEvents+0x42>
 8008e3c:	e08c      	b.n	8008f58 <SetButtonEvents+0x15c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 8008e3e:	00ec      	lsls	r4, r5, #3
 8008e40:	1964      	adds	r4, r4, r5
 8008e42:	4bc9      	ldr	r3, [pc, #804]	; (8009168 <SetButtonEvents+0x36c>)
 8008e44:	191b      	adds	r3, r3, r4
 8008e46:	4664      	mov	r4, ip
 8008e48:	709c      	strb	r4, [r3, #2]
 8008e4a:	70de      	strb	r6, [r3, #3]
 8008e4c:	711f      	strb	r7, [r3, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 8008e4e:	464c      	mov	r4, r9
 8008e50:	715c      	strb	r4, [r3, #5]
 8008e52:	4654      	mov	r4, sl
 8008e54:	719c      	strb	r4, [r3, #6]
 8008e56:	4644      	mov	r4, r8
 8008e58:	71dc      	strb	r4, [r3, #7]
	
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 8008e5a:	2801      	cmp	r0, #1
 8008e5c:	d100      	bne.n	8008e60 <SetButtonEvents+0x64>
 8008e5e:	e0ec      	b.n	800903a <SetButtonEvents+0x23e>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d000      	beq.n	8008e66 <SetButtonEvents+0x6a>
 8008e64:	e124      	b.n	80090b0 <SetButtonEvents+0x2b4>
 8008e66:	2900      	cmp	r1, #0
 8008e68:	d000      	beq.n	8008e6c <SetButtonEvents+0x70>
 8008e6a:	e170      	b.n	800914e <SetButtonEvents+0x352>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 8008e6c:	00e9      	lsls	r1, r5, #3
 8008e6e:	1949      	adds	r1, r1, r5
 8008e70:	4bbd      	ldr	r3, [pc, #756]	; (8009168 <SetButtonEvents+0x36c>)
 8008e72:	185b      	adds	r3, r3, r1
 8008e74:	7a19      	ldrb	r1, [r3, #8]
 8008e76:	2401      	movs	r4, #1
 8008e78:	43a1      	bics	r1, r4
 8008e7a:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008e7c:	2a00      	cmp	r2, #0
 8008e7e:	d100      	bne.n	8008e82 <SetButtonEvents+0x86>
 8008e80:	e0c3      	b.n	800900a <SetButtonEvents+0x20e>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008e82:	00ea      	lsls	r2, r5, #3
 8008e84:	1952      	adds	r2, r2, r5
 8008e86:	4bb8      	ldr	r3, [pc, #736]	; (8009168 <SetButtonEvents+0x36c>)
 8008e88:	189b      	adds	r3, r3, r2
 8008e8a:	7a1a      	ldrb	r2, [r3, #8]
 8008e8c:	2102      	movs	r1, #2
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008e92:	2801      	cmp	r0, #1
 8008e94:	d100      	bne.n	8008e98 <SetButtonEvents+0x9c>
 8008e96:	e0da      	b.n	800904e <SetButtonEvents+0x252>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d100      	bne.n	8008e9e <SetButtonEvents+0xa2>
 8008e9c:	e0bd      	b.n	800901a <SetButtonEvents+0x21e>
 8008e9e:	e107      	b.n	80090b0 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008ea0:	00ea      	lsls	r2, r5, #3
 8008ea2:	1952      	adds	r2, r2, r5
 8008ea4:	4bb0      	ldr	r3, [pc, #704]	; (8009168 <SetButtonEvents+0x36c>)
 8008ea6:	189b      	adds	r3, r3, r2
 8008ea8:	7a1a      	ldrb	r2, [r3, #8]
 8008eaa:	2110      	movs	r1, #16
 8008eac:	430a      	orrs	r2, r1
 8008eae:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008eb0:	2801      	cmp	r0, #1
 8008eb2:	d100      	bne.n	8008eb6 <SetButtonEvents+0xba>
 8008eb4:	e0e3      	b.n	800907e <SetButtonEvents+0x282>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d000      	beq.n	8008ebc <SetButtonEvents+0xc0>
 8008eba:	e0f9      	b.n	80090b0 <SetButtonEvents+0x2b4>
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d063      	beq.n	8008f8a <SetButtonEvents+0x18e>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008ec2:	00ea      	lsls	r2, r5, #3
 8008ec4:	1952      	adds	r2, r2, r5
 8008ec6:	4ba8      	ldr	r3, [pc, #672]	; (8009168 <SetButtonEvents+0x36c>)
 8008ec8:	189b      	adds	r3, r3, r2
 8008eca:	7a1a      	ldrb	r2, [r3, #8]
 8008ecc:	2120      	movs	r1, #32
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008ed2:	e00a      	b.n	8008eea <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008ed4:	00ea      	lsls	r2, r5, #3
 8008ed6:	1952      	adds	r2, r2, r5
 8008ed8:	4ba3      	ldr	r3, [pc, #652]	; (8009168 <SetButtonEvents+0x36c>)
 8008eda:	189b      	adds	r3, r3, r2
 8008edc:	7a1a      	ldrb	r2, [r3, #8]
 8008ede:	2120      	movs	r1, #32
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008ee4:	2801      	cmp	r0, #1
 8008ee6:	d100      	bne.n	8008eea <SetButtonEvents+0xee>
 8008ee8:	e0d1      	b.n	800908e <SetButtonEvents+0x292>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d000      	beq.n	8008ef0 <SetButtonEvents+0xf4>
 8008eee:	e0df      	b.n	80090b0 <SetButtonEvents+0x2b4>
 8008ef0:	4653      	mov	r3, sl
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d054      	beq.n	8008fa0 <SetButtonEvents+0x1a4>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008ef6:	00ea      	lsls	r2, r5, #3
 8008ef8:	1952      	adds	r2, r2, r5
 8008efa:	4b9b      	ldr	r3, [pc, #620]	; (8009168 <SetButtonEvents+0x36c>)
 8008efc:	189b      	adds	r3, r3, r2
 8008efe:	7a1a      	ldrb	r2, [r3, #8]
 8008f00:	2140      	movs	r1, #64	; 0x40
 8008f02:	430a      	orrs	r2, r1
 8008f04:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008f06:	e00a      	b.n	8008f1e <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008f08:	00ea      	lsls	r2, r5, #3
 8008f0a:	1952      	adds	r2, r2, r5
 8008f0c:	4b96      	ldr	r3, [pc, #600]	; (8009168 <SetButtonEvents+0x36c>)
 8008f0e:	189b      	adds	r3, r3, r2
 8008f10:	7a1a      	ldrb	r2, [r3, #8]
 8008f12:	2140      	movs	r1, #64	; 0x40
 8008f14:	430a      	orrs	r2, r1
 8008f16:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008f18:	2801      	cmp	r0, #1
 8008f1a:	d100      	bne.n	8008f1e <SetButtonEvents+0x122>
 8008f1c:	e0bf      	b.n	800909e <SetButtonEvents+0x2a2>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d046      	beq.n	8008fb0 <SetButtonEvents+0x1b4>
 8008f22:	e0c5      	b.n	80090b0 <SetButtonEvents+0x2b4>
	if(!res)																														// This variable exists
	{
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
		/* Store event flags */
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8008f24:	0a19      	lsrs	r1, r3, #8
 8008f26:	0209      	lsls	r1, r1, #8
 8008f28:	4301      	orrs	r1, r0
 8008f2a:	ab02      	add	r3, sp, #8
 8008f2c:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008f2e:	0020      	movs	r0, r4
 8008f30:	f7fe ff62 	bl	8007df8 <EE_WriteVariable>
 8008f34:	e0d3      	b.n	80090de <SetButtonEvents+0x2e2>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 8008f36:	464b      	mov	r3, r9
 8008f38:	4319      	orrs	r1, r3
 8008f3a:	4658      	mov	r0, fp
 8008f3c:	f7fe ff5c 	bl	8007df8 <EE_WriteVariable>
 8008f40:	e0dd      	b.n	80090fe <SetButtonEvents+0x302>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 8008f42:	0019      	movs	r1, r3
 8008f44:	0028      	movs	r0, r5
 8008f46:	f7fe ff57 	bl	8007df8 <EE_WriteVariable>
 8008f4a:	e0ea      	b.n	8009122 <SetButtonEvents+0x326>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 8008f4c:	0019      	movs	r1, r3
 8008f4e:	0020      	movs	r0, r4
 8008f50:	f7fe ff52 	bl	8007df8 <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else																																// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;	
		
	
	return result;
 8008f54:	2000      	movs	r0, #0
 8008f56:	e0f3      	b.n	8009140 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008f58:	200b      	movs	r0, #11
 8008f5a:	e0f1      	b.n	8009140 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 8008f5c:	200b      	movs	r0, #11
 8008f5e:	e0ef      	b.n	8009140 <SetButtonEvents+0x344>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 8008f60:	00ea      	lsls	r2, r5, #3
 8008f62:	1952      	adds	r2, r2, r5
 8008f64:	4b80      	ldr	r3, [pc, #512]	; (8009168 <SetButtonEvents+0x36c>)
 8008f66:	189b      	adds	r3, r3, r2
 8008f68:	7a1a      	ldrb	r2, [r3, #8]
 8008f6a:	2108      	movs	r1, #8
 8008f6c:	438a      	bics	r2, r1
 8008f6e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008f70:	2f00      	cmp	r7, #0
 8008f72:	d195      	bne.n	8008ea0 <SetButtonEvents+0xa4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 8008f74:	00ea      	lsls	r2, r5, #3
 8008f76:	1952      	adds	r2, r2, r5
 8008f78:	4b7b      	ldr	r3, [pc, #492]	; (8009168 <SetButtonEvents+0x36c>)
 8008f7a:	189b      	adds	r3, r3, r2
 8008f7c:	7a1a      	ldrb	r2, [r3, #8]
 8008f7e:	2110      	movs	r1, #16
 8008f80:	438a      	bics	r2, r1
 8008f82:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008f84:	464b      	mov	r3, r9
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1a4      	bne.n	8008ed4 <SetButtonEvents+0xd8>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 8008f8a:	00ea      	lsls	r2, r5, #3
 8008f8c:	1952      	adds	r2, r2, r5
 8008f8e:	4b76      	ldr	r3, [pc, #472]	; (8009168 <SetButtonEvents+0x36c>)
 8008f90:	189b      	adds	r3, r3, r2
 8008f92:	7a1a      	ldrb	r2, [r3, #8]
 8008f94:	2120      	movs	r1, #32
 8008f96:	438a      	bics	r2, r1
 8008f98:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008f9a:	4653      	mov	r3, sl
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1b3      	bne.n	8008f08 <SetButtonEvents+0x10c>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8008fa0:	00ea      	lsls	r2, r5, #3
 8008fa2:	1952      	adds	r2, r2, r5
 8008fa4:	4b70      	ldr	r3, [pc, #448]	; (8009168 <SetButtonEvents+0x36c>)
 8008fa6:	189b      	adds	r3, r3, r2
 8008fa8:	7a1a      	ldrb	r2, [r3, #8]
 8008faa:	2140      	movs	r1, #64	; 0x40
 8008fac:	438a      	bics	r2, r1
 8008fae:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008fb0:	4643      	mov	r3, r8
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d173      	bne.n	800909e <SetButtonEvents+0x2a2>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8008fb6:	00ea      	lsls	r2, r5, #3
 8008fb8:	1952      	adds	r2, r2, r5
 8008fba:	4b6b      	ldr	r3, [pc, #428]	; (8009168 <SetButtonEvents+0x36c>)
 8008fbc:	189b      	adds	r3, r3, r2
 8008fbe:	7a19      	ldrb	r1, [r3, #8]
 8008fc0:	227f      	movs	r2, #127	; 0x7f
 8008fc2:	400a      	ands	r2, r1
 8008fc4:	721a      	strb	r2, [r3, #8]
 8008fc6:	e073      	b.n	80090b0 <SetButtonEvents+0x2b4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 8008fc8:	00ea      	lsls	r2, r5, #3
 8008fca:	1952      	adds	r2, r2, r5
 8008fcc:	4b66      	ldr	r3, [pc, #408]	; (8009168 <SetButtonEvents+0x36c>)
 8008fce:	189b      	adds	r3, r3, r2
 8008fd0:	7a1a      	ldrb	r2, [r3, #8]
 8008fd2:	2104      	movs	r1, #4
 8008fd4:	438a      	bics	r2, r1
 8008fd6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008fd8:	2e00      	cmp	r6, #0
 8008fda:	d0c1      	beq.n	8008f60 <SetButtonEvents+0x164>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008fdc:	00ea      	lsls	r2, r5, #3
 8008fde:	1952      	adds	r2, r2, r5
 8008fe0:	4b61      	ldr	r3, [pc, #388]	; (8009168 <SetButtonEvents+0x36c>)
 8008fe2:	189b      	adds	r3, r3, r2
 8008fe4:	7a1a      	ldrb	r2, [r3, #8]
 8008fe6:	2108      	movs	r1, #8
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008fec:	2801      	cmp	r0, #1
 8008fee:	d03e      	beq.n	800906e <SetButtonEvents+0x272>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d15d      	bne.n	80090b0 <SetButtonEvents+0x2b4>
 8008ff4:	2f00      	cmp	r7, #0
 8008ff6:	d0bd      	beq.n	8008f74 <SetButtonEvents+0x178>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008ff8:	00ea      	lsls	r2, r5, #3
 8008ffa:	1952      	adds	r2, r2, r5
 8008ffc:	4b5a      	ldr	r3, [pc, #360]	; (8009168 <SetButtonEvents+0x36c>)
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	7a1a      	ldrb	r2, [r3, #8]
 8009002:	2110      	movs	r1, #16
 8009004:	430a      	orrs	r2, r1
 8009006:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8009008:	e755      	b.n	8008eb6 <SetButtonEvents+0xba>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 800900a:	00ea      	lsls	r2, r5, #3
 800900c:	1952      	adds	r2, r2, r5
 800900e:	4b56      	ldr	r3, [pc, #344]	; (8009168 <SetButtonEvents+0x36c>)
 8009010:	189b      	adds	r3, r3, r2
 8009012:	7a1a      	ldrb	r2, [r3, #8]
 8009014:	2102      	movs	r1, #2
 8009016:	438a      	bics	r2, r1
 8009018:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 800901a:	9b01      	ldr	r3, [sp, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0d3      	beq.n	8008fc8 <SetButtonEvents+0x1cc>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8009020:	00ea      	lsls	r2, r5, #3
 8009022:	1952      	adds	r2, r2, r5
 8009024:	4b50      	ldr	r3, [pc, #320]	; (8009168 <SetButtonEvents+0x36c>)
 8009026:	189b      	adds	r3, r3, r2
 8009028:	7a1a      	ldrb	r2, [r3, #8]
 800902a:	2104      	movs	r1, #4
 800902c:	430a      	orrs	r2, r1
 800902e:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8009030:	2801      	cmp	r0, #1
 8009032:	d014      	beq.n	800905e <SetButtonEvents+0x262>
 8009034:	2800      	cmp	r0, #0
 8009036:	d0cf      	beq.n	8008fd8 <SetButtonEvents+0x1dc>
 8009038:	e03a      	b.n	80090b0 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800903a:	00eb      	lsls	r3, r5, #3
 800903c:	195b      	adds	r3, r3, r5
 800903e:	4a4a      	ldr	r2, [pc, #296]	; (8009168 <SetButtonEvents+0x36c>)
 8009040:	18d2      	adds	r2, r2, r3
 8009042:	7a13      	ldrb	r3, [r2, #8]
 8009044:	2101      	movs	r1, #1
 8009046:	430b      	orrs	r3, r1
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8009048:	2102      	movs	r1, #2
 800904a:	430b      	orrs	r3, r1
 800904c:	7213      	strb	r3, [r2, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800904e:	00ea      	lsls	r2, r5, #3
 8009050:	1952      	adds	r2, r2, r5
 8009052:	4b45      	ldr	r3, [pc, #276]	; (8009168 <SetButtonEvents+0x36c>)
 8009054:	189b      	adds	r3, r3, r2
 8009056:	7a1a      	ldrb	r2, [r3, #8]
 8009058:	2104      	movs	r1, #4
 800905a:	430a      	orrs	r2, r1
 800905c:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800905e:	00ea      	lsls	r2, r5, #3
 8009060:	1952      	adds	r2, r2, r5
 8009062:	4b41      	ldr	r3, [pc, #260]	; (8009168 <SetButtonEvents+0x36c>)
 8009064:	189b      	adds	r3, r3, r2
 8009066:	7a1a      	ldrb	r2, [r3, #8]
 8009068:	2108      	movs	r1, #8
 800906a:	430a      	orrs	r2, r1
 800906c:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800906e:	00ea      	lsls	r2, r5, #3
 8009070:	1952      	adds	r2, r2, r5
 8009072:	4b3d      	ldr	r3, [pc, #244]	; (8009168 <SetButtonEvents+0x36c>)
 8009074:	189b      	adds	r3, r3, r2
 8009076:	7a1a      	ldrb	r2, [r3, #8]
 8009078:	2110      	movs	r1, #16
 800907a:	430a      	orrs	r2, r1
 800907c:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800907e:	00ea      	lsls	r2, r5, #3
 8009080:	1952      	adds	r2, r2, r5
 8009082:	4b39      	ldr	r3, [pc, #228]	; (8009168 <SetButtonEvents+0x36c>)
 8009084:	189b      	adds	r3, r3, r2
 8009086:	7a1a      	ldrb	r2, [r3, #8]
 8009088:	2120      	movs	r1, #32
 800908a:	430a      	orrs	r2, r1
 800908c:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800908e:	00ea      	lsls	r2, r5, #3
 8009090:	1952      	adds	r2, r2, r5
 8009092:	4b35      	ldr	r3, [pc, #212]	; (8009168 <SetButtonEvents+0x36c>)
 8009094:	189b      	adds	r3, r3, r2
 8009096:	7a1a      	ldrb	r2, [r3, #8]
 8009098:	2140      	movs	r1, #64	; 0x40
 800909a:	430a      	orrs	r2, r1
 800909c:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 800909e:	00ea      	lsls	r2, r5, #3
 80090a0:	1952      	adds	r2, r2, r5
 80090a2:	4b31      	ldr	r3, [pc, #196]	; (8009168 <SetButtonEvents+0x36c>)
 80090a4:	189b      	adds	r3, r3, r2
 80090a6:	7a19      	ldrb	r1, [r3, #8]
 80090a8:	2280      	movs	r2, #128	; 0x80
 80090aa:	4252      	negs	r2, r2
 80090ac:	430a      	orrs	r2, r1
 80090ae:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 80090b0:	002c      	movs	r4, r5
 80090b2:	343a      	adds	r4, #58	; 0x3a
 80090b4:	00a4      	lsls	r4, r4, #2
 80090b6:	ab02      	add	r3, sp, #8
 80090b8:	1d99      	adds	r1, r3, #6
 80090ba:	0020      	movs	r0, r4
 80090bc:	f7fe fe70 	bl	8007da0 <EE_ReadVariable>
	if(!res)																														// This variable exists
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d000      	beq.n	80090c6 <SetButtonEvents+0x2ca>
 80090c4:	e74a      	b.n	8008f5c <SetButtonEvents+0x160>
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 80090c6:	ab02      	add	r3, sp, #8
 80090c8:	1d9a      	adds	r2, r3, #6
 80090ca:	88db      	ldrh	r3, [r3, #6]
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 80090cc:	00e8      	lsls	r0, r5, #3
 80090ce:	1945      	adds	r5, r0, r5
 80090d0:	4825      	ldr	r0, [pc, #148]	; (8009168 <SetButtonEvents+0x36c>)
 80090d2:	1940      	adds	r0, r0, r5
 80090d4:	7a00      	ldrb	r0, [r0, #8]
 80090d6:	7812      	ldrb	r2, [r2, #0]
 80090d8:	4282      	cmp	r2, r0
 80090da:	d000      	beq.n	80090de <SetButtonEvents+0x2e2>
 80090dc:	e722      	b.n	8008f24 <SetButtonEvents+0x128>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 80090de:	1c63      	adds	r3, r4, #1
 80090e0:	469b      	mov	fp, r3
 80090e2:	ab02      	add	r3, sp, #8
 80090e4:	1d9d      	adds	r5, r3, #6
 80090e6:	0029      	movs	r1, r5
 80090e8:	4658      	mov	r0, fp
 80090ea:	f7fe fe59 	bl	8007da0 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	0219      	lsls	r1, r3, #8
 80090f2:	882a      	ldrh	r2, [r5, #0]
 80090f4:	464b      	mov	r3, r9
 80090f6:	430b      	orrs	r3, r1
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d000      	beq.n	80090fe <SetButtonEvents+0x302>
 80090fc:	e71b      	b.n	8008f36 <SetButtonEvents+0x13a>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 80090fe:	1ca5      	adds	r5, r4, #2
 8009100:	2306      	movs	r3, #6
 8009102:	aa02      	add	r2, sp, #8
 8009104:	4694      	mov	ip, r2
 8009106:	4463      	add	r3, ip
 8009108:	4699      	mov	r9, r3
 800910a:	0019      	movs	r1, r3
 800910c:	0028      	movs	r0, r5
 800910e:	f7fe fe47 	bl	8007da0 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8009112:	0236      	lsls	r6, r6, #8
 8009114:	464b      	mov	r3, r9
 8009116:	881a      	ldrh	r2, [r3, #0]
 8009118:	4653      	mov	r3, sl
 800911a:	4333      	orrs	r3, r6
 800911c:	429a      	cmp	r2, r3
 800911e:	d000      	beq.n	8009122 <SetButtonEvents+0x326>
 8009120:	e70f      	b.n	8008f42 <SetButtonEvents+0x146>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8009122:	3403      	adds	r4, #3
 8009124:	ab02      	add	r3, sp, #8
 8009126:	1d9d      	adds	r5, r3, #6
 8009128:	0029      	movs	r1, r5
 800912a:	0020      	movs	r0, r4
 800912c:	f7fe fe38 	bl	8007da0 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8009130:	023f      	lsls	r7, r7, #8
 8009132:	882a      	ldrh	r2, [r5, #0]
 8009134:	4643      	mov	r3, r8
 8009136:	433b      	orrs	r3, r7
	return result;
 8009138:	2000      	movs	r0, #0
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 800913a:	429a      	cmp	r2, r3
 800913c:	d000      	beq.n	8009140 <SetButtonEvents+0x344>
 800913e:	e705      	b.n	8008f4c <SetButtonEvents+0x150>
}
 8009140:	b005      	add	sp, #20
 8009142:	bcf0      	pop	{r4, r5, r6, r7}
 8009144:	46bb      	mov	fp, r7
 8009146:	46b2      	mov	sl, r6
 8009148:	46a9      	mov	r9, r5
 800914a:	46a0      	mov	r8, r4
 800914c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 800914e:	00e9      	lsls	r1, r5, #3
 8009150:	1949      	adds	r1, r1, r5
 8009152:	4b05      	ldr	r3, [pc, #20]	; (8009168 <SetButtonEvents+0x36c>)
 8009154:	185b      	adds	r3, r3, r1
 8009156:	7a19      	ldrb	r1, [r3, #8]
 8009158:	2401      	movs	r4, #1
 800915a:	4321      	orrs	r1, r4
 800915c:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 800915e:	2800      	cmp	r0, #0
 8009160:	d100      	bne.n	8009164 <SetButtonEvents+0x368>
 8009162:	e68b      	b.n	8008e7c <SetButtonEvents+0x80>
 8009164:	e7a4      	b.n	80090b0 <SetButtonEvents+0x2b4>
 8009166:	46c0      	nop			; (mov r8, r8)
 8009168:	20001484 	.word	0x20001484

0800916c <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 800916c:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 800916e:	f007 fe17 	bl	8010da0 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8009172:	b2c4      	uxtb	r4, r0
 8009174:	0020      	movs	r0, r4
 8009176:	f7fe fccf 	bl	8007b18 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 800917a:	0020      	movs	r0, r4
 800917c:	f7fe fcfa 	bl	8007b74 <SwitchStreamDMAToMsg>
}
 8009180:	bd10      	pop	{r4, pc}
	...

08009184 <SetupDMAStreams>:
{
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	0005      	movs	r5, r0
 800918a:	000c      	movs	r4, r1
 800918c:	0016      	movs	r6, r2
 800918e:	220f      	movs	r2, #15
 8009190:	446a      	add	r2, sp
 8009192:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8009194:	aa08      	add	r2, sp, #32
 8009196:	7810      	ldrb	r0, [r2, #0]
 8009198:	4283      	cmp	r3, r0
 800919a:	d057      	beq.n	800924c <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 800919c:	2b00      	cmp	r3, #0
 800919e:	d100      	bne.n	80091a2 <SetupDMAStreams+0x1e>
 80091a0:	e0ba      	b.n	8009318 <SetupDMAStreams+0x194>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d100      	bne.n	80091a8 <SetupDMAStreams+0x24>
 80091a6:	e0ba      	b.n	800931e <SetupDMAStreams+0x19a>
	if (direction == FORWARD) 
 80091a8:	2d00      	cmp	r5, #0
 80091aa:	d054      	beq.n	8009256 <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 80091ac:	2d01      	cmp	r5, #1
 80091ae:	d100      	bne.n	80091b2 <SetupDMAStreams+0x2e>
 80091b0:	e089      	b.n	80092c6 <SetupDMAStreams+0x142>
		return BOS_ERR_WrongParam;
 80091b2:	2067      	movs	r0, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 80091b4:	2d02      	cmp	r5, #2
 80091b6:	d000      	beq.n	80091ba <SetupDMAStreams+0x36>
 80091b8:	e0af      	b.n	800931a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 80091ba:	0018      	movs	r0, r3
 80091bc:	f005 fe0c 	bl	800edd8 <GetUart>
 80091c0:	0005      	movs	r5, r0
 80091c2:	ab08      	add	r3, sp, #32
 80091c4:	7818      	ldrb	r0, [r3, #0]
 80091c6:	f005 fe07 	bl	800edd8 <GetUart>
 80091ca:	0001      	movs	r1, r0
 80091cc:	2201      	movs	r2, #1
 80091ce:	0028      	movs	r0, r5
 80091d0:	f7fe fd06 	bl	8007be0 <StartDMAstream>
 80091d4:	2817      	cmp	r0, #23
 80091d6:	d100      	bne.n	80091da <SetupDMAStreams+0x56>
 80091d8:	e09f      	b.n	800931a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 80091da:	0170      	lsls	r0, r6, #5
 80091dc:	1b80      	subs	r0, r0, r6
 80091de:	0080      	lsls	r0, r0, #2
 80091e0:	1980      	adds	r0, r0, r6
 80091e2:	00c0      	lsls	r0, r0, #3
 80091e4:	21fa      	movs	r1, #250	; 0xfa
 80091e6:	0089      	lsls	r1, r1, #2
 80091e8:	f7f6 ffb2 	bl	8000150 <__udivsi3>
 80091ec:	0005      	movs	r5, r0
 80091ee:	4b4d      	ldr	r3, [pc, #308]	; (8009324 <SetupDMAStreams+0x1a0>)
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	230f      	movs	r3, #15
 80091f4:	446b      	add	r3, sp
 80091f6:	2200      	movs	r2, #0
 80091f8:	0001      	movs	r1, r0
 80091fa:	484b      	ldr	r0, [pc, #300]	; (8009328 <SetupDMAStreams+0x1a4>)
 80091fc:	f007 fc74 	bl	8010ae8 <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 8009200:	466b      	mov	r3, sp
 8009202:	7bdb      	ldrb	r3, [r3, #15]
 8009204:	3b01      	subs	r3, #1
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4a48      	ldr	r2, [pc, #288]	; (800932c <SetupDMAStreams+0x1a8>)
 800920a:	509c      	str	r4, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 800920c:	ab08      	add	r3, sp, #32
 800920e:	7818      	ldrb	r0, [r3, #0]
 8009210:	f005 fde2 	bl	800edd8 <GetUart>
 8009214:	0006      	movs	r6, r0
 8009216:	466b      	mov	r3, sp
 8009218:	7bd8      	ldrb	r0, [r3, #15]
 800921a:	f005 fddd 	bl	800edd8 <GetUart>
 800921e:	0001      	movs	r1, r0
 8009220:	2201      	movs	r2, #1
 8009222:	0030      	movs	r0, r6
 8009224:	f7fe fcdc 	bl	8007be0 <StartDMAstream>
 8009228:	2817      	cmp	r0, #23
 800922a:	d076      	beq.n	800931a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 800922c:	4b3d      	ldr	r3, [pc, #244]	; (8009324 <SetupDMAStreams+0x1a0>)
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	ab08      	add	r3, sp, #32
 8009232:	2200      	movs	r2, #0
 8009234:	0029      	movs	r1, r5
 8009236:	483c      	ldr	r0, [pc, #240]	; (8009328 <SetupDMAStreams+0x1a4>)
 8009238:	f007 fc56 	bl	8010ae8 <xTimerCreate>
 800923c:	0006      	movs	r6, r0
		dmaStreamTotal[dst-1] = count;
 800923e:	ab08      	add	r3, sp, #32
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	3b01      	subs	r3, #1
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4a39      	ldr	r2, [pc, #228]	; (800932c <SetupDMAStreams+0x1a8>)
 8009248:	509c      	str	r4, [r3, r2]
 800924a:	e02c      	b.n	80092a6 <SetupDMAStreams+0x122>
		portStatus[src] = STREAM;
 800924c:	4a38      	ldr	r2, [pc, #224]	; (8009330 <SetupDMAStreams+0x1ac>)
 800924e:	2102      	movs	r1, #2
 8009250:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8009252:	2067      	movs	r0, #103	; 0x67
 8009254:	e061      	b.n	800931a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8009256:	0018      	movs	r0, r3
 8009258:	f005 fdbe 	bl	800edd8 <GetUart>
 800925c:	0005      	movs	r5, r0
 800925e:	ab08      	add	r3, sp, #32
 8009260:	7818      	ldrb	r0, [r3, #0]
 8009262:	f005 fdb9 	bl	800edd8 <GetUart>
 8009266:	0001      	movs	r1, r0
 8009268:	2201      	movs	r2, #1
 800926a:	0028      	movs	r0, r5
 800926c:	f7fe fcb8 	bl	8007be0 <StartDMAstream>
 8009270:	2817      	cmp	r0, #23
 8009272:	d052      	beq.n	800931a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8009274:	250f      	movs	r5, #15
 8009276:	446d      	add	r5, sp
 8009278:	0170      	lsls	r0, r6, #5
 800927a:	1b80      	subs	r0, r0, r6
 800927c:	0080      	lsls	r0, r0, #2
 800927e:	1980      	adds	r0, r0, r6
 8009280:	00c0      	lsls	r0, r0, #3
 8009282:	21fa      	movs	r1, #250	; 0xfa
 8009284:	0089      	lsls	r1, r1, #2
 8009286:	f7f6 ff63 	bl	8000150 <__udivsi3>
 800928a:	0001      	movs	r1, r0
 800928c:	4b25      	ldr	r3, [pc, #148]	; (8009324 <SetupDMAStreams+0x1a0>)
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	002b      	movs	r3, r5
 8009292:	2200      	movs	r2, #0
 8009294:	4824      	ldr	r0, [pc, #144]	; (8009328 <SetupDMAStreams+0x1a4>)
 8009296:	f007 fc27 	bl	8010ae8 <xTimerCreate>
 800929a:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 800929c:	782b      	ldrb	r3, [r5, #0]
 800929e:	3b01      	subs	r3, #1
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4a22      	ldr	r2, [pc, #136]	; (800932c <SetupDMAStreams+0x1a8>)
 80092a4:	509c      	str	r4, [r3, r2]
	return BOS_OK;
 80092a6:	2000      	movs	r0, #0
	if (xTimerStream != NULL)
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	d036      	beq.n	800931a <SetupDMAStreams+0x196>
		xTimerStart( xTimerStream, portMAX_DELAY );
 80092ac:	f006 fe90 	bl	800ffd0 <xTaskGetTickCount>
 80092b0:	0002      	movs	r2, r0
 80092b2:	2301      	movs	r3, #1
 80092b4:	425b      	negs	r3, r3
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	2300      	movs	r3, #0
 80092ba:	2101      	movs	r1, #1
 80092bc:	0030      	movs	r0, r6
 80092be:	f007 fc33 	bl	8010b28 <xTimerGenericCommand>
	return BOS_OK;
 80092c2:	2000      	movs	r0, #0
 80092c4:	e029      	b.n	800931a <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80092c6:	f005 fd87 	bl	800edd8 <GetUart>
 80092ca:	0005      	movs	r5, r0
 80092cc:	230f      	movs	r3, #15
 80092ce:	446b      	add	r3, sp
 80092d0:	7818      	ldrb	r0, [r3, #0]
 80092d2:	f005 fd81 	bl	800edd8 <GetUart>
 80092d6:	0001      	movs	r1, r0
 80092d8:	2201      	movs	r2, #1
 80092da:	0028      	movs	r0, r5
 80092dc:	f7fe fc80 	bl	8007be0 <StartDMAstream>
 80092e0:	2817      	cmp	r0, #23
 80092e2:	d01a      	beq.n	800931a <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 80092e4:	0170      	lsls	r0, r6, #5
 80092e6:	1b80      	subs	r0, r0, r6
 80092e8:	0080      	lsls	r0, r0, #2
 80092ea:	1980      	adds	r0, r0, r6
 80092ec:	00c0      	lsls	r0, r0, #3
 80092ee:	21fa      	movs	r1, #250	; 0xfa
 80092f0:	0089      	lsls	r1, r1, #2
 80092f2:	f7f6 ff2d 	bl	8000150 <__udivsi3>
 80092f6:	0001      	movs	r1, r0
 80092f8:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <SetupDMAStreams+0x1a0>)
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	ab08      	add	r3, sp, #32
 80092fe:	2200      	movs	r2, #0
 8009300:	4809      	ldr	r0, [pc, #36]	; (8009328 <SetupDMAStreams+0x1a4>)
 8009302:	f007 fbf1 	bl	8010ae8 <xTimerCreate>
 8009306:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 8009308:	230f      	movs	r3, #15
 800930a:	446b      	add	r3, sp
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	3b01      	subs	r3, #1
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4a06      	ldr	r2, [pc, #24]	; (800932c <SetupDMAStreams+0x1a8>)
 8009314:	509c      	str	r4, [r3, r2]
 8009316:	e7c6      	b.n	80092a6 <SetupDMAStreams+0x122>
		return BOS_ERR_WrongParam;
 8009318:	2067      	movs	r0, #103	; 0x67
}
 800931a:	b004      	add	sp, #16
 800931c:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 800931e:	2067      	movs	r0, #103	; 0x67
 8009320:	e7fb      	b.n	800931a <SetupDMAStreams+0x196>
 8009322:	46c0      	nop			; (mov r8, r8)
 8009324:	0800916d 	.word	0x0800916d
 8009328:	0801ccc8 	.word	0x0801ccc8
 800932c:	20001444 	.word	0x20001444
 8009330:	200010c8 	.word	0x200010c8

08009334 <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 8009334:	b510      	push	{r4, lr}
	switch (port)
 8009336:	2805      	cmp	r0, #5
 8009338:	d80a      	bhi.n	8009350 <NotifyMessagingTask+0x1c>
 800933a:	0080      	lsls	r0, r0, #2
 800933c:	4b15      	ldr	r3, [pc, #84]	; (8009394 <NotifyMessagingTask+0x60>)
 800933e:	581b      	ldr	r3, [r3, r0]
 8009340:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 8009342:	4b15      	ldr	r3, [pc, #84]	; (8009398 <NotifyMessagingTask+0x64>)
 8009344:	6818      	ldr	r0, [r3, #0]
 8009346:	2300      	movs	r3, #0
 8009348:	2202      	movs	r2, #2
 800934a:	2100      	movs	r1, #0
 800934c:	f007 fafa 	bl	8010944 <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8009350:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8009352:	4b12      	ldr	r3, [pc, #72]	; (800939c <NotifyMessagingTask+0x68>)
 8009354:	6818      	ldr	r0, [r3, #0]
 8009356:	2300      	movs	r3, #0
 8009358:	2202      	movs	r2, #2
 800935a:	2100      	movs	r1, #0
 800935c:	f007 faf2 	bl	8010944 <xTaskGenericNotify>
 8009360:	e7f6      	b.n	8009350 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 8009362:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <NotifyMessagingTask+0x6c>)
 8009364:	6818      	ldr	r0, [r3, #0]
 8009366:	2300      	movs	r3, #0
 8009368:	2202      	movs	r2, #2
 800936a:	2100      	movs	r1, #0
 800936c:	f007 faea 	bl	8010944 <xTaskGenericNotify>
 8009370:	e7ee      	b.n	8009350 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 8009372:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <NotifyMessagingTask+0x70>)
 8009374:	6818      	ldr	r0, [r3, #0]
 8009376:	2300      	movs	r3, #0
 8009378:	2202      	movs	r2, #2
 800937a:	2100      	movs	r1, #0
 800937c:	f007 fae2 	bl	8010944 <xTaskGenericNotify>
 8009380:	e7e6      	b.n	8009350 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 8009382:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <NotifyMessagingTask+0x74>)
 8009384:	6818      	ldr	r0, [r3, #0]
 8009386:	2300      	movs	r3, #0
 8009388:	2202      	movs	r2, #2
 800938a:	2100      	movs	r1, #0
 800938c:	f007 fada 	bl	8010944 <xTaskGenericNotify>
}
 8009390:	e7de      	b.n	8009350 <NotifyMessagingTask+0x1c>
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	0801ccd4 	.word	0x0801ccd4
 8009398:	20001460 	.word	0x20001460
 800939c:	20001464 	.word	0x20001464
 80093a0:	20001468 	.word	0x20001468
 80093a4:	2000146c 	.word	0x2000146c
 80093a8:	20001470 	.word	0x20001470

080093ac <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 80093ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ae:	46de      	mov	lr, fp
 80093b0:	4657      	mov	r7, sl
 80093b2:	464e      	mov	r6, r9
 80093b4:	4645      	mov	r5, r8
 80093b6:	b5e0      	push	{r5, r6, r7, lr}
 80093b8:	b085      	sub	sp, #20
 80093ba:	0005      	movs	r5, r0
 80093bc:	9102      	str	r1, [sp, #8]
 80093be:	0014      	movs	r4, r2
 80093c0:	001e      	movs	r6, r3
 80093c2:	ab0e      	add	r3, sp, #56	; 0x38
 80093c4:	881f      	ldrh	r7, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 80093c6:	0003      	movs	r3, r0
 80093c8:	4313      	orrs	r3, r2
 80093ca:	d100      	bne.n	80093ce <SendMessageFromPort+0x22>
 80093cc:	e173      	b.n	80096b6 <SendMessageFromPort+0x30a>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d14c      	bne.n	800946c <SendMessageFromPort+0xc0>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80093d2:	2afd      	cmp	r2, #253	; 0xfd
 80093d4:	d800      	bhi.n	80093d8 <SendMessageFromPort+0x2c>
 80093d6:	e170      	b.n	80096ba <SendMessageFromPort+0x30e>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
		return BOS_ERR_WrongParam; 
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 80093d8:	2000      	movs	r0, #0
 80093da:	f006 fd5b 	bl	800fe94 <uxTaskPriorityGet>
 80093de:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 80093e0:	2105      	movs	r1, #5
 80093e2:	2000      	movs	r0, #0
 80093e4:	f006 fd66 	bl	800feb4 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 80093e8:	4bc0      	ldr	r3, [pc, #768]	; (80096ec <SendMessageFromPort+0x340>)
 80093ea:	2248      	movs	r2, #72	; 0x48
 80093ec:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 80093ee:	3212      	adds	r2, #18
 80093f0:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80093f2:	9b02      	ldr	r3, [sp, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d000      	beq.n	80093fa <SendMessageFromPort+0x4e>
 80093f8:	e174      	b.n	80096e4 <SendMessageFromPort+0x338>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 80093fa:	1e7b      	subs	r3, r7, #1
 80093fc:	4abc      	ldr	r2, [pc, #752]	; (80096f0 <SendMessageFromPort+0x344>)
 80093fe:	5cd7      	ldrb	r7, [r2, r3]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8009400:	4abc      	ldr	r2, [pc, #752]	; (80096f4 <SendMessageFromPort+0x348>)
 8009402:	4690      	mov	r8, r2
 8009404:	00d9      	lsls	r1, r3, #3
 8009406:	1ac9      	subs	r1, r1, r3
 8009408:	00c9      	lsls	r1, r1, #3
 800940a:	4bbb      	ldr	r3, [pc, #748]	; (80096f8 <SendMessageFromPort+0x34c>)
 800940c:	18c9      	adds	r1, r1, r3
 800940e:	003a      	movs	r2, r7
 8009410:	4640      	mov	r0, r8
 8009412:	f00a ff7d 	bl	8014310 <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 8009416:	2303      	movs	r3, #3
 8009418:	425b      	negs	r3, r3
 800941a:	469c      	mov	ip, r3
 800941c:	44e0      	add	r8, ip
 800941e:	4643      	mov	r3, r8
 8009420:	709f      	strb	r7, [r3, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 8009422:	1cfb      	adds	r3, r7, #3
 8009424:	469b      	mov	fp, r3
 8009426:	4bb5      	ldr	r3, [pc, #724]	; (80096fc <SendMessageFromPort+0x350>)
 8009428:	469a      	mov	sl, r3
 800942a:	465a      	mov	r2, fp
 800942c:	4641      	mov	r1, r8
 800942e:	0018      	movs	r0, r3
 8009430:	f00a ff6e 	bl	8014310 <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8009434:	b2bb      	uxth	r3, r7
 8009436:	4699      	mov	r9, r3
 8009438:	4659      	mov	r1, fp
 800943a:	4650      	mov	r0, sl
 800943c:	f004 ff12 	bl	800e264 <CalculateCRC8>
 8009440:	4643      	mov	r3, r8
 8009442:	465a      	mov	r2, fp
 8009444:	5498      	strb	r0, [r3, r2]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 8009446:	2238      	movs	r2, #56	; 0x38
 8009448:	2100      	movs	r1, #0
 800944a:	4650      	mov	r0, sl
 800944c:	f00a ff69 	bl	8014322 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8009450:	2cfd      	cmp	r4, #253	; 0xfd
 8009452:	d800      	bhi.n	8009456 <SendMessageFromPort+0xaa>
 8009454:	e102      	b.n	800965c <SendMessageFromPort+0x2b0>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 8009456:	2e00      	cmp	r6, #0
 8009458:	d000      	beq.n	800945c <SendMessageFromPort+0xb0>
 800945a:	e0f5      	b.n	8009648 <SendMessageFromPort+0x29c>
 800945c:	9b02      	ldr	r3, [sp, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d000      	beq.n	8009464 <SendMessageFromPort+0xb8>
 8009462:	e0f1      	b.n	8009648 <SendMessageFromPort+0x29c>
			src = message[4];
 8009464:	4ba1      	ldr	r3, [pc, #644]	; (80096ec <SendMessageFromPort+0x340>)
 8009466:	791b      	ldrb	r3, [r3, #4]
 8009468:	9302      	str	r3, [sp, #8]
 800946a:	e0ed      	b.n	8009648 <SendMessageFromPort+0x29c>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 800946c:	9b02      	ldr	r3, [sp, #8]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d002      	beq.n	8009478 <SendMessageFromPort+0xcc>
 8009472:	2a00      	cmp	r2, #0
 8009474:	d100      	bne.n	8009478 <SendMessageFromPort+0xcc>
 8009476:	e122      	b.n	80096be <SendMessageFromPort+0x312>
	TaskPriority = uxTaskPriorityGet( NULL );
 8009478:	2000      	movs	r0, #0
 800947a:	f006 fd0b 	bl	800fe94 <uxTaskPriorityGet>
 800947e:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8009480:	2105      	movs	r1, #5
 8009482:	2000      	movs	r0, #0
 8009484:	f006 fd16 	bl	800feb4 <vTaskPrioritySet>
	message[0] = 'H';						
 8009488:	4b98      	ldr	r3, [pc, #608]	; (80096ec <SendMessageFromPort+0x340>)
 800948a:	2248      	movs	r2, #72	; 0x48
 800948c:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 800948e:	3212      	adds	r2, #18
 8009490:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009492:	2e00      	cmp	r6, #0
 8009494:	d0b1      	beq.n	80093fa <SendMessageFromPort+0x4e>
		if (src == 0)		src = myID;
 8009496:	9b02      	ldr	r3, [sp, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d078      	beq.n	800958e <SendMessageFromPort+0x1e2>
		message[2] = length;	
 800949c:	4993      	ldr	r1, [pc, #588]	; (80096ec <SendMessageFromPort+0x340>)
 800949e:	2300      	movs	r3, #0
 80094a0:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 80094a2:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 80094a4:	9b02      	ldr	r3, [sp, #8]
 80094a6:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 80094a8:	4a95      	ldr	r2, [pc, #596]	; (8009700 <SendMessageFromPort+0x354>)
 80094aa:	79d3      	ldrb	r3, [r2, #7]
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	7992      	ldrb	r2, [r2, #6]
 80094b0:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 80094b2:	22ff      	movs	r2, #255	; 0xff
 80094b4:	42b2      	cmp	r2, r6
 80094b6:	4192      	sbcs	r2, r2
 80094b8:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 80094ba:	0052      	lsls	r2, r2, #1
 80094bc:	4313      	orrs	r3, r2
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 80094c2:	718e      	strb	r6, [r1, #6]
		if (extendCode == true) {
 80094c4:	2200      	movs	r2, #0
 80094c6:	4693      	mov	fp, r2
 80094c8:	2eff      	cmp	r6, #255	; 0xff
 80094ca:	d903      	bls.n	80094d4 <SendMessageFromPort+0x128>
			message[6+shift] = (uint8_t) (code >> 8);		
 80094cc:	0a32      	lsrs	r2, r6, #8
 80094ce:	71ca      	strb	r2, [r1, #7]
			++shift;
 80094d0:	2201      	movs	r2, #1
 80094d2:	4693      	mov	fp, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 80094d4:	2f2e      	cmp	r7, #46	; 0x2e
 80094d6:	d95e      	bls.n	8009596 <SendMessageFromPort+0x1ea>
			message[5] |= 0x80;		
 80094d8:	2280      	movs	r2, #128	; 0x80
 80094da:	4252      	negs	r2, r2
 80094dc:	4313      	orrs	r3, r2
 80094de:	4a83      	ldr	r2, [pc, #524]	; (80096ec <SendMessageFromPort+0x340>)
 80094e0:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 80094e2:	4b88      	ldr	r3, [pc, #544]	; (8009704 <SendMessageFromPort+0x358>)
 80094e4:	801f      	strh	r7, [r3, #0]
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 80094e6:	232e      	movs	r3, #46	; 0x2e
 80094e8:	469a      	mov	sl, r3
					totalNumberOfParams -= numberOfParams;
 80094ea:	4b86      	ldr	r3, [pc, #536]	; (8009704 <SendMessageFromPort+0x358>)
 80094ec:	4699      	mov	r9, r3
					ptrShift += numberOfParams;
 80094ee:	4b86      	ldr	r3, [pc, #536]	; (8009708 <SendMessageFromPort+0x35c>)
 80094f0:	4698      	mov	r8, r3
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 80094f2:	4653      	mov	r3, sl
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	0033      	movs	r3, r6
 80094f8:	0022      	movs	r2, r4
 80094fa:	9902      	ldr	r1, [sp, #8]
 80094fc:	0028      	movs	r0, r5
 80094fe:	f7ff ff55 	bl	80093ac <SendMessageFromPort>
					osDelay(10);
 8009502:	200a      	movs	r0, #10
 8009504:	f005 fdb5 	bl	800f072 <osDelay>
					totalNumberOfParams -= numberOfParams;
 8009508:	464b      	mov	r3, r9
 800950a:	881f      	ldrh	r7, [r3, #0]
 800950c:	3f2e      	subs	r7, #46	; 0x2e
 800950e:	b2bf      	uxth	r7, r7
 8009510:	801f      	strh	r7, [r3, #0]
					ptrShift += numberOfParams;
 8009512:	4643      	mov	r3, r8
 8009514:	8819      	ldrh	r1, [r3, #0]
 8009516:	312e      	adds	r1, #46	; 0x2e
 8009518:	b289      	uxth	r1, r1
 800951a:	8019      	strh	r1, [r3, #0]
			while (totalNumberOfParams != 0)
 800951c:	2f00      	cmp	r7, #0
 800951e:	d049      	beq.n	80095b4 <SendMessageFromPort+0x208>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 8009520:	2f2d      	cmp	r7, #45	; 0x2d
 8009522:	d8e6      	bhi.n	80094f2 <SendMessageFromPort+0x146>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 8009524:	4b71      	ldr	r3, [pc, #452]	; (80096ec <SendMessageFromPort+0x340>)
 8009526:	7958      	ldrb	r0, [r3, #5]
 8009528:	227f      	movs	r2, #127	; 0x7f
 800952a:	4002      	ands	r2, r0
 800952c:	715a      	strb	r2, [r3, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 800952e:	465a      	mov	r2, fp
 8009530:	1dd0      	adds	r0, r2, #7
 8009532:	18c0      	adds	r0, r0, r3
 8009534:	4b75      	ldr	r3, [pc, #468]	; (800970c <SendMessageFromPort+0x360>)
 8009536:	18c9      	adds	r1, r1, r3
 8009538:	003a      	movs	r2, r7
 800953a:	f00a fee9 	bl	8014310 <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	4a71      	ldr	r2, [pc, #452]	; (8009708 <SendMessageFromPort+0x35c>)
 8009542:	8013      	strh	r3, [r2, #0]
 8009544:	4a6f      	ldr	r2, [pc, #444]	; (8009704 <SendMessageFromPort+0x358>)
 8009546:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 8009548:	465b      	mov	r3, fp
 800954a:	1d1e      	adds	r6, r3, #4
 800954c:	19f6      	adds	r6, r6, r7
 800954e:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true)
 8009550:	4b6f      	ldr	r3, [pc, #444]	; (8009710 <SendMessageFromPort+0x364>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d05c      	beq.n	8009612 <SendMessageFromPort+0x266>
			if (dstGroupID < BOS_BROADCAST)
 8009558:	4b6e      	ldr	r3, [pc, #440]	; (8009714 <SendMessageFromPort+0x368>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2bff      	cmp	r3, #255	; 0xff
 800955e:	d100      	bne.n	8009562 <SendMessageFromPort+0x1b6>
 8009560:	e0b1      	b.n	80096c6 <SendMessageFromPort+0x31a>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8009562:	4a6d      	ldr	r2, [pc, #436]	; (8009718 <SendMessageFromPort+0x36c>)
 8009564:	7812      	ldrb	r2, [r2, #0]
 8009566:	4690      	mov	r8, r2
 8009568:	2a00      	cmp	r2, #0
 800956a:	d075      	beq.n	8009658 <SendMessageFromPort+0x2ac>
 800956c:	2201      	movs	r2, #1
 800956e:	409a      	lsls	r2, r3
 8009570:	4694      	mov	ip, r2
 8009572:	486a      	ldr	r0, [pc, #424]	; (800971c <SendMessageFromPort+0x370>)
 8009574:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 8009576:	2200      	movs	r2, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8009578:	495c      	ldr	r1, [pc, #368]	; (80096ec <SendMessageFromPort+0x340>)
 800957a:	4689      	mov	r9, r1
 800957c:	44b9      	add	r9, r7
 800957e:	0029      	movs	r1, r5
 8009580:	4645      	mov	r5, r8
 8009582:	46a2      	mov	sl, r4
 8009584:	4664      	mov	r4, ip
 8009586:	46b4      	mov	ip, r6
 8009588:	465e      	mov	r6, fp
 800958a:	4688      	mov	r8, r1
 800958c:	e01a      	b.n	80095c4 <SendMessageFromPort+0x218>
		if (src == 0)		src = myID;
 800958e:	4b64      	ldr	r3, [pc, #400]	; (8009720 <SendMessageFromPort+0x374>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	9302      	str	r3, [sp, #8]
 8009594:	e782      	b.n	800949c <SendMessageFromPort+0xf0>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8009596:	465b      	mov	r3, fp
 8009598:	3307      	adds	r3, #7
 800959a:	4854      	ldr	r0, [pc, #336]	; (80096ec <SendMessageFromPort+0x340>)
 800959c:	1818      	adds	r0, r3, r0
 800959e:	4b5a      	ldr	r3, [pc, #360]	; (8009708 <SendMessageFromPort+0x35c>)
 80095a0:	8819      	ldrh	r1, [r3, #0]
 80095a2:	4b5a      	ldr	r3, [pc, #360]	; (800970c <SendMessageFromPort+0x360>)
 80095a4:	18c9      	adds	r1, r1, r3
 80095a6:	003a      	movs	r2, r7
 80095a8:	f00a feb2 	bl	8014310 <memcpy>
			length = numberOfParams + shift + 4;
 80095ac:	1d3e      	adds	r6, r7, #4
 80095ae:	445e      	add	r6, fp
 80095b0:	b2f6      	uxtb	r6, r6
 80095b2:	e7cd      	b.n	8009550 <SendMessageFromPort+0x1a4>
 80095b4:	2600      	movs	r6, #0
 80095b6:	372e      	adds	r7, #46	; 0x2e
 80095b8:	e7ca      	b.n	8009550 <SendMessageFromPort+0x1a4>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 80095ba:	3301      	adds	r3, #1
 80095bc:	b29b      	uxth	r3, r3
 80095be:	3002      	adds	r0, #2
 80095c0:	42ab      	cmp	r3, r5
 80095c2:	d80d      	bhi.n	80095e0 <SendMessageFromPort+0x234>
					if (InGroup(i, dstGroupID))
 80095c4:	8801      	ldrh	r1, [r0, #0]
 80095c6:	420c      	tst	r4, r1
 80095c8:	d0f7      	beq.n	80095ba <SendMessageFromPort+0x20e>
						++groupMembers;							// Add this member
 80095ca:	3201      	adds	r2, #1
 80095cc:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 80095ce:	18b9      	adds	r1, r7, r2
 80095d0:	292c      	cmp	r1, #44	; 0x2c
 80095d2:	dd00      	ble.n	80095d6 <SendMessageFromPort+0x22a>
 80095d4:	e075      	b.n	80096c2 <SendMessageFromPort+0x316>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 80095d6:	4649      	mov	r1, r9
 80095d8:	1889      	adds	r1, r1, r2
 80095da:	1989      	adds	r1, r1, r6
 80095dc:	718b      	strb	r3, [r1, #6]
 80095de:	e7ec      	b.n	80095ba <SendMessageFromPort+0x20e>
 80095e0:	46b3      	mov	fp, r6
 80095e2:	4666      	mov	r6, ip
 80095e4:	4645      	mov	r5, r8
 80095e6:	4654      	mov	r4, sl
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 80095e8:	465b      	mov	r3, fp
 80095ea:	3307      	adds	r3, #7
 80095ec:	19db      	adds	r3, r3, r7
 80095ee:	189b      	adds	r3, r3, r2
 80095f0:	493e      	ldr	r1, [pc, #248]	; (80096ec <SendMessageFromPort+0x340>)
 80095f2:	54ca      	strb	r2, [r1, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80095f4:	18bf      	adds	r7, r7, r2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80095f6:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80095f8:	2f2b      	cmp	r7, #43	; 0x2b
 80095fa:	dc3f      	bgt.n	800967c <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 80095fc:	4849      	ldr	r0, [pc, #292]	; (8009724 <SendMessageFromPort+0x378>)
 80095fe:	7801      	ldrb	r1, [r0, #0]
 8009600:	3101      	adds	r1, #1
 8009602:	b2c9      	uxtb	r1, r1
 8009604:	7001      	strb	r1, [r0, #0]
 8009606:	4839      	ldr	r0, [pc, #228]	; (80096ec <SendMessageFromPort+0x340>)
 8009608:	18c3      	adds	r3, r0, r3
 800960a:	7059      	strb	r1, [r3, #1]
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 800960c:	3602      	adds	r6, #2
 800960e:	18b6      	adds	r6, r6, r2
 8009610:	b2f6      	uxtb	r6, r6
	message[2] = length;
 8009612:	4b36      	ldr	r3, [pc, #216]	; (80096ec <SendMessageFromPort+0x340>)
 8009614:	4698      	mov	r8, r3
 8009616:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);
 8009618:	1cf3      	adds	r3, r6, #3
 800961a:	469a      	mov	sl, r3
 800961c:	4f37      	ldr	r7, [pc, #220]	; (80096fc <SendMessageFromPort+0x350>)
 800961e:	001a      	movs	r2, r3
 8009620:	4641      	mov	r1, r8
 8009622:	0038      	movs	r0, r7
 8009624:	f00a fe74 	bl	8014310 <memcpy>
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8009628:	b2b3      	uxth	r3, r6
 800962a:	4699      	mov	r9, r3
 800962c:	4651      	mov	r1, sl
 800962e:	0038      	movs	r0, r7
 8009630:	f004 fe18 	bl	800e264 <CalculateCRC8>
 8009634:	4643      	mov	r3, r8
 8009636:	4652      	mov	r2, sl
 8009638:	5498      	strb	r0, [r3, r2]
	memset(crcBuffer, 0, sizeof(crcBuffer));
 800963a:	2238      	movs	r2, #56	; 0x38
 800963c:	2100      	movs	r1, #0
 800963e:	0038      	movs	r0, r7
 8009640:	f00a fe6f 	bl	8014322 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8009644:	2cfd      	cmp	r4, #253	; 0xfd
 8009646:	d909      	bls.n	800965c <SendMessageFromPort+0x2b0>
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8009648:	9802      	ldr	r0, [sp, #8]
 800964a:	f7fa fca9 	bl	8003fa0 <FindBroadcastRoutes>
 800964e:	2400      	movs	r4, #0
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
		{
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8009650:	4e35      	ldr	r6, [pc, #212]	; (8009728 <SendMessageFromPort+0x37c>)
 8009652:	4d33      	ldr	r5, [pc, #204]	; (8009720 <SendMessageFromPort+0x374>)
			{
				/* Transmit the message from this port */
				writePxDMAMutex(p, message, length+4, cmd50ms);
 8009654:	464f      	mov	r7, r9
 8009656:	e024      	b.n	80096a2 <SendMessageFromPort+0x2f6>
			uint8_t groupMembers = 0;
 8009658:	2200      	movs	r2, #0
 800965a:	e7c5      	b.n	80095e8 <SendMessageFromPort+0x23c>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 800965c:	464a      	mov	r2, r9
 800965e:	3204      	adds	r2, #4
 8009660:	b292      	uxth	r2, r2
 8009662:	2332      	movs	r3, #50	; 0x32
 8009664:	4921      	ldr	r1, [pc, #132]	; (80096ec <SendMessageFromPort+0x340>)
 8009666:	0028      	movs	r0, r5
 8009668:	f005 fc20 	bl	800eeac <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 800966c:	9903      	ldr	r1, [sp, #12]
 800966e:	2000      	movs	r0, #0
 8009670:	f006 fc20 	bl	800feb4 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 8009674:	4b2d      	ldr	r3, [pc, #180]	; (800972c <SendMessageFromPort+0x380>)
 8009676:	2202      	movs	r2, #2
 8009678:	701a      	strb	r2, [r3, #0]
	
	return result;
 800967a:	2000      	movs	r0, #0
}
 800967c:	b005      	add	sp, #20
 800967e:	bcf0      	pop	{r4, r5, r6, r7}
 8009680:	46bb      	mov	fp, r7
 8009682:	46b2      	mov	sl, r6
 8009684:	46a9      	mov	r9, r5
 8009686:	46a0      	mov	r8, r4
 8009688:	bdf0      	pop	{r4, r5, r6, r7, pc}
				writePxDMAMutex(p, message, length+4, cmd50ms);
 800968a:	1d3a      	adds	r2, r7, #4
 800968c:	b292      	uxth	r2, r2
 800968e:	2332      	movs	r3, #50	; 0x32
 8009690:	4916      	ldr	r1, [pc, #88]	; (80096ec <SendMessageFromPort+0x340>)
 8009692:	f005 fc0b 	bl	800eeac <writePxDMAMutex>
				Delay_ms(1);
 8009696:	2001      	movs	r0, #1
 8009698:	f007 fd5e 	bl	8011158 <HAL_Delay>
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 800969c:	3401      	adds	r4, #1
 800969e:	2c05      	cmp	r4, #5
 80096a0:	d0e4      	beq.n	800966c <SendMessageFromPort+0x2c0>
 80096a2:	1c60      	adds	r0, r4, #1
 80096a4:	b2c0      	uxtb	r0, r0
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 80096a6:	782b      	ldrb	r3, [r5, #0]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	5b9b      	ldrh	r3, [r3, r6]
 80096ae:	4123      	asrs	r3, r4
 80096b0:	07db      	lsls	r3, r3, #31
 80096b2:	d5f3      	bpl.n	800969c <SendMessageFromPort+0x2f0>
 80096b4:	e7e9      	b.n	800968a <SendMessageFromPort+0x2de>
		return BOS_ERR_WrongParam; 
 80096b6:	2067      	movs	r0, #103	; 0x67
 80096b8:	e7e0      	b.n	800967c <SendMessageFromPort+0x2d0>
 80096ba:	2067      	movs	r0, #103	; 0x67
 80096bc:	e7de      	b.n	800967c <SendMessageFromPort+0x2d0>
 80096be:	2067      	movs	r0, #103	; 0x67
 80096c0:	e7dc      	b.n	800967c <SendMessageFromPort+0x2d0>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80096c2:	2069      	movs	r0, #105	; 0x69
 80096c4:	e7da      	b.n	800967c <SendMessageFromPort+0x2d0>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80096c6:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 80096c8:	2f2c      	cmp	r7, #44	; 0x2c
 80096ca:	d8d7      	bhi.n	800967c <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams] = ++bcastID;
 80096cc:	4a15      	ldr	r2, [pc, #84]	; (8009724 <SendMessageFromPort+0x378>)
 80096ce:	7813      	ldrb	r3, [r2, #0]
 80096d0:	3301      	adds	r3, #1
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	7013      	strb	r3, [r2, #0]
 80096d6:	4a05      	ldr	r2, [pc, #20]	; (80096ec <SendMessageFromPort+0x340>)
 80096d8:	445a      	add	r2, fp
 80096da:	19d7      	adds	r7, r2, r7
 80096dc:	71fb      	strb	r3, [r7, #7]
				length += 1;		// + bcastID
 80096de:	3601      	adds	r6, #1
 80096e0:	b2f6      	uxtb	r6, r6
 80096e2:	e796      	b.n	8009612 <SendMessageFromPort+0x266>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80096e4:	2e00      	cmp	r6, #0
 80096e6:	d100      	bne.n	80096ea <SendMessageFromPort+0x33e>
 80096e8:	e687      	b.n	80093fa <SendMessageFromPort+0x4e>
 80096ea:	e6d7      	b.n	800949c <SendMessageFromPort+0xf0>
 80096ec:	20000ed8 	.word	0x20000ed8
 80096f0:	20000f10 	.word	0x20000f10
 80096f4:	20000edb 	.word	0x20000edb
 80096f8:	20000d20 	.word	0x20000d20
 80096fc:	200013e4 	.word	0x200013e4
 8009700:	20006d18 	.word	0x20006d18
 8009704:	200014f6 	.word	0x200014f6
 8009708:	200014f4 	.word	0x200014f4
 800970c:	20000f18 	.word	0x20000f18
 8009710:	20000aa4 	.word	0x20000aa4
 8009714:	2000001d 	.word	0x2000001d
 8009718:	2000001c 	.word	0x2000001c
 800971c:	20000ea0 	.word	0x20000ea0
 8009720:	2000104c 	.word	0x2000104c
 8009724:	20000cce 	.word	0x20000cce
 8009728:	20000cd0 	.word	0x20000cd0
 800972c:	200010e0 	.word	0x200010e0

08009730 <ForwardReceivedMessage>:
{
 8009730:	b530      	push	{r4, r5, lr}
 8009732:	b083      	sub	sp, #12
 8009734:	0004      	movs	r4, r0
	AddBcastPayload = false; 	
 8009736:	4b0b      	ldr	r3, [pc, #44]	; (8009764 <ForwardReceivedMessage+0x34>)
 8009738:	2200      	movs	r2, #0
 800973a:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 800973c:	1e42      	subs	r2, r0, #1
 800973e:	00d3      	lsls	r3, r2, #3
 8009740:	1a9b      	subs	r3, r3, r2
 8009742:	00db      	lsls	r3, r3, #3
 8009744:	4a08      	ldr	r2, [pc, #32]	; (8009768 <ForwardReceivedMessage+0x38>)
 8009746:	5c9d      	ldrb	r5, [r3, r2]
	port = FindRoute(myID, dst); 
 8009748:	4b08      	ldr	r3, [pc, #32]	; (800976c <ForwardReceivedMessage+0x3c>)
 800974a:	7818      	ldrb	r0, [r3, #0]
 800974c:	0029      	movs	r1, r5
 800974e:	f7fa fcc1 	bl	80040d4 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 8009752:	9400      	str	r4, [sp, #0]
 8009754:	2300      	movs	r3, #0
 8009756:	002a      	movs	r2, r5
 8009758:	2100      	movs	r1, #0
 800975a:	f7ff fe27 	bl	80093ac <SendMessageFromPort>
}
 800975e:	2000      	movs	r0, #0
 8009760:	b003      	add	sp, #12
 8009762:	bd30      	pop	{r4, r5, pc}
 8009764:	20000aa4 	.word	0x20000aa4
 8009768:	20000d20 	.word	0x20000d20
 800976c:	2000104c 	.word	0x2000104c

08009770 <BroadcastReceivedMessage>:
{
 8009770:	b500      	push	{lr}
 8009772:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 8009774:	4b0c      	ldr	r3, [pc, #48]	; (80097a8 <BroadcastReceivedMessage+0x38>)
 8009776:	2200      	movs	r2, #0
 8009778:	701a      	strb	r2, [r3, #0]
 800977a:	4b0c      	ldr	r3, [pc, #48]	; (80097ac <BroadcastReceivedMessage+0x3c>)
 800977c:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 800977e:	28ff      	cmp	r0, #255	; 0xff
 8009780:	d009      	beq.n	8009796 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 8009782:	9100      	str	r1, [sp, #0]
 8009784:	2300      	movs	r3, #0
 8009786:	22fe      	movs	r2, #254	; 0xfe
 8009788:	2100      	movs	r1, #0
 800978a:	2000      	movs	r0, #0
 800978c:	f7ff fe0e 	bl	80093ac <SendMessageFromPort>
}
 8009790:	2000      	movs	r0, #0
 8009792:	b003      	add	sp, #12
 8009794:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 8009796:	9100      	str	r1, [sp, #0]
 8009798:	2300      	movs	r3, #0
 800979a:	32ff      	adds	r2, #255	; 0xff
 800979c:	2100      	movs	r1, #0
 800979e:	2000      	movs	r0, #0
 80097a0:	f7ff fe04 	bl	80093ac <SendMessageFromPort>
 80097a4:	e7f4      	b.n	8009790 <BroadcastReceivedMessage+0x20>
 80097a6:	46c0      	nop			; (mov r8, r8)
 80097a8:	20000aa4 	.word	0x20000aa4
 80097ac:	2000001d 	.word	0x2000001d

080097b0 <BroadcastMessage>:
{
 80097b0:	b530      	push	{r4, r5, lr}
 80097b2:	b083      	sub	sp, #12
 80097b4:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 80097b6:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <BroadcastMessage+0x44>)
 80097b8:	2501      	movs	r5, #1
 80097ba:	701d      	strb	r5, [r3, #0]
 80097bc:	4b0e      	ldr	r3, [pc, #56]	; (80097f8 <BroadcastMessage+0x48>)
 80097be:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 80097c0:	29ff      	cmp	r1, #255	; 0xff
 80097c2:	d00e      	beq.n	80097e2 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 80097c4:	9400      	str	r4, [sp, #0]
 80097c6:	0013      	movs	r3, r2
 80097c8:	22fe      	movs	r2, #254	; 0xfe
 80097ca:	0001      	movs	r1, r0
 80097cc:	2000      	movs	r0, #0
 80097ce:	f7ff fded 	bl	80093ac <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 80097d2:	0022      	movs	r2, r4
 80097d4:	2100      	movs	r1, #0
 80097d6:	4809      	ldr	r0, [pc, #36]	; (80097fc <BroadcastMessage+0x4c>)
 80097d8:	f00a fda3 	bl	8014322 <memset>
}
 80097dc:	2000      	movs	r0, #0
 80097de:	b003      	add	sp, #12
 80097e0:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 80097e2:	9400      	str	r4, [sp, #0]
 80097e4:	0013      	movs	r3, r2
 80097e6:	22ff      	movs	r2, #255	; 0xff
 80097e8:	0001      	movs	r1, r0
 80097ea:	2000      	movs	r0, #0
 80097ec:	f7ff fdde 	bl	80093ac <SendMessageFromPort>
 80097f0:	e7ef      	b.n	80097d2 <BroadcastMessage+0x22>
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	20000aa4 	.word	0x20000aa4
 80097f8:	2000001d 	.word	0x2000001d
 80097fc:	20000f18 	.word	0x20000f18

08009800 <SendMessageToModule>:
{
 8009800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009802:	b083      	sub	sp, #12
 8009804:	0004      	movs	r4, r0
 8009806:	000e      	movs	r6, r1
 8009808:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 800980a:	28ff      	cmp	r0, #255	; 0xff
 800980c:	d012      	beq.n	8009834 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 800980e:	4f0d      	ldr	r7, [pc, #52]	; (8009844 <SendMessageToModule+0x44>)
 8009810:	7838      	ldrb	r0, [r7, #0]
 8009812:	0021      	movs	r1, r4
 8009814:	f7fa fc5e 	bl	80040d4 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 8009818:	7839      	ldrb	r1, [r7, #0]
 800981a:	9500      	str	r5, [sp, #0]
 800981c:	0033      	movs	r3, r6
 800981e:	0022      	movs	r2, r4
 8009820:	f7ff fdc4 	bl	80093ac <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 8009824:	002a      	movs	r2, r5
 8009826:	2100      	movs	r1, #0
 8009828:	4807      	ldr	r0, [pc, #28]	; (8009848 <SendMessageToModule+0x48>)
 800982a:	f00a fd7a 	bl	8014322 <memset>
}
 800982e:	2000      	movs	r0, #0
 8009830:	b003      	add	sp, #12
 8009832:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 8009834:	4b03      	ldr	r3, [pc, #12]	; (8009844 <SendMessageToModule+0x44>)
 8009836:	7818      	ldrb	r0, [r3, #0]
 8009838:	0013      	movs	r3, r2
 800983a:	000a      	movs	r2, r1
 800983c:	21ff      	movs	r1, #255	; 0xff
 800983e:	f7ff ffb7 	bl	80097b0 <BroadcastMessage>
 8009842:	e7f4      	b.n	800982e <SendMessageToModule+0x2e>
 8009844:	2000104c 	.word	0x2000104c
 8009848:	20000f18 	.word	0x20000f18

0800984c <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 800984c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800984e:	46de      	mov	lr, fp
 8009850:	4657      	mov	r7, sl
 8009852:	464e      	mov	r6, r9
 8009854:	4645      	mov	r5, r8
 8009856:	b5e0      	push	{r5, r6, r7, lr}
 8009858:	b091      	sub	sp, #68	; 0x44
 800985a:	900f      	str	r0, [sp, #60]	; 0x3c
 800985c:	000f      	movs	r7, r1
 800985e:	920e      	str	r2, [sp, #56]	; 0x38
 8009860:	001e      	movs	r6, r3
 8009862:	ab1a      	add	r3, sp, #104	; 0x68
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	4699      	mov	r9, r3
 8009868:	ab1d      	add	r3, sp, #116	; 0x74
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	469b      	mov	fp, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 800986e:	4b5e      	ldr	r3, [pc, #376]	; (80099e8 <StartScastDMAStream+0x19c>)
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	428b      	cmp	r3, r1
 8009874:	d120      	bne.n	80098b8 <StartScastDMAStream+0x6c>
				temp2 = dstP;
			} else {
				temp2 = FindRoute(route[i], route[i-1]);
			}
			/* Message parameters*/
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8009876:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009878:	0e1b      	lsrs	r3, r3, #24
 800987a:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 800987c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800987e:	0c1b      	lsrs	r3, r3, #16
 8009880:	b2db      	uxtb	r3, r3
 8009882:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 8009884:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009886:	0a1b      	lsrs	r3, r3, #8
 8009888:	b2db      	uxtb	r3, r3
 800988a:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] = (uint8_t) count;
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 800988c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800988e:	0e1b      	lsrs	r3, r3, #24
 8009890:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 8009892:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009894:	0c1b      	lsrs	r3, r3, #16
 8009896:	b2db      	uxtb	r3, r3
 8009898:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 800989a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800989c:	0a1b      	lsrs	r3, r3, #8
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	4698      	mov	r8, r3
 80098a2:	4d52      	ldr	r5, [pc, #328]	; (80099ec <StartScastDMAStream+0x1a0>)
 80098a4:	2319      	movs	r3, #25
 80098a6:	469a      	mov	sl, r3
 80098a8:	44aa      	add	sl, r5
				temp2 = dstP;
 80098aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098ac:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80098ae:	4c50      	ldr	r4, [pc, #320]	; (80099f0 <StartScastDMAStream+0x1a4>)
 80098b0:	464b      	mov	r3, r9
 80098b2:	46c1      	mov	r9, r8
 80098b4:	4698      	mov	r8, r3
 80098b6:	e058      	b.n	800996a <StartScastDMAStream+0x11e>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80098b8:	4b4d      	ldr	r3, [pc, #308]	; (80099f0 <StartScastDMAStream+0x1a4>)
 80098ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80098bc:	0e12      	lsrs	r2, r2, #24
 80098be:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 80098c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80098c2:	0c12      	lsrs	r2, r2, #16
 80098c4:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 80098c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80098c8:	0a12      	lsrs	r2, r2, #8
 80098ca:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 80098cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80098ce:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 80098d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80098d2:	0e12      	lsrs	r2, r2, #24
 80098d4:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 80098d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80098d8:	0c12      	lsrs	r2, r2, #16
 80098da:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 80098dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80098de:	0a12      	lsrs	r2, r2, #8
 80098e0:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 80098e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80098e4:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 80098e6:	464a      	mov	r2, r9
 80098e8:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 80098ea:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 80098ec:	729e      	strb	r6, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 80098ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098f0:	72da      	strb	r2, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 80098f2:	465a      	mov	r2, fp
 80098f4:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 80098f6:	220d      	movs	r2, #13
 80098f8:	211c      	movs	r1, #28
 80098fa:	0038      	movs	r0, r7
 80098fc:	f7ff ff80 	bl	8009800 <SendMessageToModule>
		return result;
 8009900:	e055      	b.n	80099ae <StartScastDMAStream+0x162>
				temp1 = FindRoute(route[i], srcM);
 8009902:	0039      	movs	r1, r7
 8009904:	f7fa fbe6 	bl	80040d4 <FindRoute>
 8009908:	9007      	str	r0, [sp, #28]
			FindRoute(srcM, dstM);
 800990a:	0031      	movs	r1, r6
 800990c:	0038      	movs	r0, r7
 800990e:	f7fa fbe1 	bl	80040d4 <FindRoute>
			if (route[i] == dstM) {
 8009912:	9a06      	ldr	r2, [sp, #24]
 8009914:	7850      	ldrb	r0, [r2, #1]
				temp2 = dstP;
 8009916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (route[i] == dstM) {
 8009918:	42b0      	cmp	r0, r6
 800991a:	d135      	bne.n	8009988 <StartScastDMAStream+0x13c>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 800991c:	9a08      	ldr	r2, [sp, #32]
 800991e:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 8009920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009922:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 8009924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009926:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 8009928:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800992a:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 800992c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800992e:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 8009930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009932:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 8009934:	464a      	mov	r2, r9
 8009936:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 8009938:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800993a:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 800993c:	4642      	mov	r2, r8
 800993e:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 8009940:	9a07      	ldr	r2, [sp, #28]
 8009942:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 8009944:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 8009946:	465b      	mov	r3, fp
 8009948:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 800994a:	0031      	movs	r1, r6
 800994c:	0038      	movs	r0, r7
 800994e:	f7fa fbc1 	bl	80040d4 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 8009952:	9b06      	ldr	r3, [sp, #24]
 8009954:	7858      	ldrb	r0, [r3, #1]
 8009956:	220c      	movs	r2, #12
 8009958:	211b      	movs	r1, #27
 800995a:	f7ff ff51 	bl	8009800 <SendMessageToModule>
			osDelay(10);
 800995e:	200a      	movs	r0, #10
 8009960:	f005 fb87 	bl	800f072 <osDelay>
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 8009964:	3501      	adds	r5, #1
 8009966:	4555      	cmp	r5, sl
 8009968:	d013      	beq.n	8009992 <StartScastDMAStream+0x146>
		FindRoute(srcM, dstM);
 800996a:	0031      	movs	r1, r6
 800996c:	0038      	movs	r0, r7
 800996e:	f7fa fbb1 	bl	80040d4 <FindRoute>
		if (route[i]) 
 8009972:	9506      	str	r5, [sp, #24]
 8009974:	7868      	ldrb	r0, [r5, #1]
 8009976:	2800      	cmp	r0, #0
 8009978:	d0f4      	beq.n	8009964 <StartScastDMAStream+0x118>
			if (route[i+1]) {
 800997a:	78a9      	ldrb	r1, [r5, #2]
 800997c:	2900      	cmp	r1, #0
 800997e:	d0c0      	beq.n	8009902 <StartScastDMAStream+0xb6>
				temp1 = FindRoute(route[i], route[i+1]);
 8009980:	f7fa fba8 	bl	80040d4 <FindRoute>
 8009984:	9007      	str	r0, [sp, #28]
 8009986:	e7c0      	b.n	800990a <StartScastDMAStream+0xbe>
				temp2 = FindRoute(route[i], route[i-1]);
 8009988:	7811      	ldrb	r1, [r2, #0]
 800998a:	f7fa fba3 	bl	80040d4 <FindRoute>
 800998e:	0003      	movs	r3, r0
 8009990:	e7c4      	b.n	800991c <StartScastDMAStream+0xd0>
 8009992:	46c1      	mov	r9, r8
		}
	}
	
	if (srcM == dstM)
 8009994:	42b7      	cmp	r7, r6
 8009996:	d112      	bne.n	80099be <StartScastDMAStream+0x172>
		port = dstP;
	else
		port = FindRoute(srcM, dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction, count, timeout, srcP, port);
 8009998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800999e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80099a0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80099a2:	4648      	mov	r0, r9
 80099a4:	f7ff fbee 	bl	8009184 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if (stored) {		
 80099a8:	465b      	mov	r3, fp
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10d      	bne.n	80099ca <StartScastDMAStream+0x17e>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 80099ae:	2000      	movs	r0, #0
 80099b0:	b011      	add	sp, #68	; 0x44
 80099b2:	bcf0      	pop	{r4, r5, r6, r7}
 80099b4:	46bb      	mov	fp, r7
 80099b6:	46b2      	mov	sl, r6
 80099b8:	46a9      	mov	r9, r5
 80099ba:	46a0      	mov	r8, r4
 80099bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = FindRoute(srcM, dstM);
 80099be:	0031      	movs	r1, r6
 80099c0:	0038      	movs	r0, r7
 80099c2:	f7fa fb87 	bl	80040d4 <FindRoute>
 80099c6:	900e      	str	r0, [sp, #56]	; 0x38
 80099c8:	e7e6      	b.n	8009998 <StartScastDMAStream+0x14c>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 80099ca:	2300      	movs	r3, #0
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	9302      	str	r3, [sp, #8]
 80099d2:	9301      	str	r3, [sp, #4]
 80099d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80099dc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80099de:	4648      	mov	r0, r9
 80099e0:	f7fa f836 	bl	8003a50 <SaveEEstreams>
 80099e4:	e7e3      	b.n	80099ae <StartScastDMAStream+0x162>
 80099e6:	46c0      	nop			; (mov r8, r8)
 80099e8:	2000104c 	.word	0x2000104c
 80099ec:	20006dcf 	.word	0x20006dcf
 80099f0:	20000f18 	.word	0x20000f18

080099f4 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 80099f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099f6:	46de      	mov	lr, fp
 80099f8:	4657      	mov	r7, sl
 80099fa:	464e      	mov	r6, r9
 80099fc:	4645      	mov	r5, r8
 80099fe:	b5e0      	push	{r5, r6, r7, lr}
 8009a00:	b089      	sub	sp, #36	; 0x24
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	9301      	str	r3, [sp, #4]
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
				++rejectedMsg;							
			}	
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
 8009a06:	4bbc      	ldr	r3, [pc, #752]	; (8009cf8 <BackEndTask+0x304>)
 8009a08:	469b      	mov	fp, r3
 8009a0a:	e16d      	b.n	8009ce8 <BackEndTask+0x2f4>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8009a0c:	9504      	str	r5, [sp, #16]
 8009a0e:	9603      	str	r6, [sp, #12]
 8009a10:	7833      	ldrb	r3, [r6, #0]
 8009a12:	2b3f      	cmp	r3, #63	; 0x3f
 8009a14:	dd00      	ble.n	8009a18 <BackEndTask+0x24>
 8009a16:	e190      	b.n	8009d3a <BackEndTask+0x346>
 8009a18:	001a      	movs	r2, r3
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 8009a1a:	1c78      	adds	r0, r7, #1
 8009a1c:	e183      	b.n	8009d26 <BackEndTask+0x332>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8009a1e:	2a3f      	cmp	r2, #63	; 0x3f
 8009a20:	d004      	beq.n	8009a2c <BackEndTask+0x38>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8009a22:	3201      	adds	r2, #1
 8009a24:	2a40      	cmp	r2, #64	; 0x40
 8009a26:	d000      	beq.n	8009a2a <BackEndTask+0x36>
 8009a28:	e17d      	b.n	8009d26 <BackEndTask+0x332>
 8009a2a:	e186      	b.n	8009d3a <BackEndTask+0x346>
 8009a2c:	0039      	movs	r1, r7
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8009a2e:	5cba      	ldrb	r2, [r7, r2]
 8009a30:	2a48      	cmp	r2, #72	; 0x48
 8009a32:	d026      	beq.n	8009a82 <BackEndTask+0x8e>
							if (BOS.disableCLI == false)
 8009a34:	4ab1      	ldr	r2, [pc, #708]	; (8009cfc <BackEndTask+0x308>)
 8009a36:	7ed2      	ldrb	r2, [r2, #27]
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	d02c      	beq.n	8009a96 <BackEndTask+0xa2>
		for (port=1 ; port <= NumOfPorts; port++)
 8009a3c:	3501      	adds	r5, #1
 8009a3e:	3401      	adds	r4, #1
 8009a40:	3740      	adds	r7, #64	; 0x40
 8009a42:	3601      	adds	r6, #1
 8009a44:	2d05      	cmp	r5, #5
 8009a46:	d100      	bne.n	8009a4a <BackEndTask+0x56>
 8009a48:	e14c      	b.n	8009ce4 <BackEndTask+0x2f0>
 8009a4a:	1c6b      	adds	r3, r5, #1
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	469a      	mov	sl, r3
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 8009a50:	9400      	str	r4, [sp, #0]
 8009a52:	7863      	ldrb	r3, [r4, #1]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d9d9      	bls.n	8009a0c <BackEndTask+0x18>
			if (MsgDMAStopped[port-1] == true) {
 8009a58:	465b      	mov	r3, fp
 8009a5a:	5d5b      	ldrb	r3, [r3, r5]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0ed      	beq.n	8009a3c <BackEndTask+0x48>
				MsgDMAStopped[port-1] = false;
 8009a60:	4ba5      	ldr	r3, [pc, #660]	; (8009cf8 <BackEndTask+0x304>)
 8009a62:	18eb      	adds	r3, r5, r3
 8009a64:	2200      	movs	r2, #0
 8009a66:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 8009a68:	9b00      	ldr	r3, [sp, #0]
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	2b05      	cmp	r3, #5
 8009a6e:	d100      	bne.n	8009a72 <BackEndTask+0x7e>
 8009a70:	e134      	b.n	8009cdc <BackEndTask+0x2e8>
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 8009a72:	4650      	mov	r0, sl
 8009a74:	f005 f9b0 	bl	800edd8 <GetUart>
 8009a78:	2240      	movs	r2, #64	; 0x40
 8009a7a:	0039      	movs	r1, r7
 8009a7c:	f009 fd38 	bl	80134f0 <HAL_UART_Receive_DMA>
 8009a80:	e7dc      	b.n	8009a3c <BackEndTask+0x48>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8009a82:	783a      	ldrb	r2, [r7, #0]
 8009a84:	2a5a      	cmp	r2, #90	; 0x5a
 8009a86:	d1d5      	bne.n	8009a34 <BackEndTask+0x40>
					packetLength = UARTRxBuf[port-1][1];
 8009a88:	787b      	ldrb	r3, [r7, #1]
 8009a8a:	9302      	str	r3, [sp, #8]
					parseStart = 2;
 8009a8c:	233f      	movs	r3, #63	; 0x3f
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	3b3d      	subs	r3, #61	; 0x3d
 8009a92:	9305      	str	r3, [sp, #20]
 8009a94:	e034      	b.n	8009b00 <BackEndTask+0x10c>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8009a96:	1c7a      	adds	r2, r7, #1
 8009a98:	4694      	mov	ip, r2
 8009a9a:	e021      	b.n	8009ae0 <BackEndTask+0xec>
 8009a9c:	2b3f      	cmp	r3, #63	; 0x3f
 8009a9e:	d11c      	bne.n	8009ada <BackEndTask+0xe6>
 8009aa0:	780a      	ldrb	r2, [r1, #0]
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	d1ca      	bne.n	8009a3c <BackEndTask+0x48>
										UARTRxBuf[port-1][j] = 0;
 8009aa6:	9a04      	ldr	r2, [sp, #16]
 8009aa8:	0191      	lsls	r1, r2, #6
 8009aaa:	4a95      	ldr	r2, [pc, #596]	; (8009d00 <BackEndTask+0x30c>)
 8009aac:	1852      	adds	r2, r2, r1
 8009aae:	2100      	movs	r1, #0
 8009ab0:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	9a03      	ldr	r2, [sp, #12]
 8009ab6:	7013      	strb	r3, [r2, #0]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 8009ab8:	4b92      	ldr	r3, [pc, #584]	; (8009d04 <BackEndTask+0x310>)
 8009aba:	781a      	ldrb	r2, [r3, #0]
 8009abc:	4892      	ldr	r0, [pc, #584]	; (8009d08 <BackEndTask+0x314>)
 8009abe:	5481      	strb	r1, [r0, r2]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	9900      	ldr	r1, [sp, #0]
 8009ac4:	704a      	strb	r2, [r1, #1]
										PcPort = port;
 8009ac6:	4652      	mov	r2, sl
 8009ac8:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 8009aca:	4b90      	ldr	r3, [pc, #576]	; (8009d0c <BackEndTask+0x318>)
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	f006 ff36 	bl	8010944 <xTaskGenericNotify>
										break;
 8009ad8:	e7b0      	b.n	8009a3c <BackEndTask+0x48>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8009ada:	3301      	adds	r3, #1
 8009adc:	2b40      	cmp	r3, #64	; 0x40
 8009ade:	d0ad      	beq.n	8009a3c <BackEndTask+0x48>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8009ae0:	5cca      	ldrb	r2, [r1, r3]
 8009ae2:	2a0d      	cmp	r2, #13
 8009ae4:	d1f9      	bne.n	8009ada <BackEndTask+0xe6>
 8009ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8009ae8:	dcd8      	bgt.n	8009a9c <BackEndTask+0xa8>
 8009aea:	4662      	mov	r2, ip
 8009aec:	5cd2      	ldrb	r2, [r2, r3]
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	d0d9      	beq.n	8009aa6 <BackEndTask+0xb2>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8009af2:	3301      	adds	r3, #1
 8009af4:	e7f4      	b.n	8009ae0 <BackEndTask+0xec>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 8009af6:	233f      	movs	r3, #63	; 0x3f
 8009af8:	5cfb      	ldrb	r3, [r7, r3]
 8009afa:	9302      	str	r3, [sp, #8]
					parseStart = 0;				
 8009afc:	2300      	movs	r3, #0
 8009afe:	9305      	str	r3, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 8009b00:	9b02      	ldr	r3, [sp, #8]
 8009b02:	3303      	adds	r3, #3
 8009b04:	4698      	mov	r8, r3
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	4443      	add	r3, r8
 8009b0a:	4699      	mov	r9, r3
					packetEnd -= MSG_RX_BUF_SIZE;
 8009b0c:	2340      	movs	r3, #64	; 0x40
 8009b0e:	425b      	negs	r3, r3
 8009b10:	469c      	mov	ip, r3
 8009b12:	44e1      	add	r9, ip
 8009b14:	e131      	b.n	8009d7a <BackEndTask+0x386>
					packetLength = UARTRxBuf[port-1][0];
 8009b16:	783b      	ldrb	r3, [r7, #0]
 8009b18:	9302      	str	r3, [sp, #8]
					parseStart = 1;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	9305      	str	r3, [sp, #20]
 8009b1e:	e7ef      	b.n	8009b00 <BackEndTask+0x10c>
					Delay_ms(1);
 8009b20:	2001      	movs	r0, #1
 8009b22:	f007 fb19 	bl	8011158 <HAL_Delay>
					if (packetStart < packetEnd) {
 8009b26:	9b01      	ldr	r3, [sp, #4]
 8009b28:	4599      	cmp	r9, r3
 8009b2a:	dd50      	ble.n	8009bce <BackEndTask+0x1da>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 8009b2c:	01a9      	lsls	r1, r5, #6
 8009b2e:	469c      	mov	ip, r3
 8009b30:	4461      	add	r1, ip
 8009b32:	4b73      	ldr	r3, [pc, #460]	; (8009d00 <BackEndTask+0x30c>)
 8009b34:	469c      	mov	ip, r3
 8009b36:	4461      	add	r1, ip
 8009b38:	4642      	mov	r2, r8
 8009b3a:	4875      	ldr	r0, [pc, #468]	; (8009d10 <BackEndTask+0x31c>)
 8009b3c:	f00a fbe8 	bl	8014310 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8009b40:	9b02      	ldr	r3, [sp, #8]
 8009b42:	1cd9      	adds	r1, r3, #3
 8009b44:	4872      	ldr	r0, [pc, #456]	; (8009d10 <BackEndTask+0x31c>)
 8009b46:	f004 fb8d 	bl	800e264 <CalculateCRC8>
 8009b4a:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8009b4c:	2238      	movs	r2, #56	; 0x38
 8009b4e:	2100      	movs	r1, #0
 8009b50:	486f      	ldr	r0, [pc, #444]	; (8009d10 <BackEndTask+0x31c>)
 8009b52:	f00a fbe6 	bl	8014322 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 8009b56:	9b04      	ldr	r3, [sp, #16]
 8009b58:	019b      	lsls	r3, r3, #6
 8009b5a:	4a69      	ldr	r2, [pc, #420]	; (8009d00 <BackEndTask+0x30c>)
 8009b5c:	4694      	mov	ip, r2
 8009b5e:	4463      	add	r3, ip
 8009b60:	464a      	mov	r2, r9
 8009b62:	5c9b      	ldrb	r3, [r3, r2]
 8009b64:	4543      	cmp	r3, r8
 8009b66:	d000      	beq.n	8009b6a <BackEndTask+0x176>
 8009b68:	e10f      	b.n	8009d8a <BackEndTask+0x396>
						portStatus[port] = MSG;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	9a00      	ldr	r2, [sp, #0]
 8009b6e:	7053      	strb	r3, [r2, #1]
						messageLength[port-1] = packetLength;	
 8009b70:	4b68      	ldr	r3, [pc, #416]	; (8009d14 <BackEndTask+0x320>)
 8009b72:	9a02      	ldr	r2, [sp, #8]
 8009b74:	555a      	strb	r2, [r3, r5]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 8009b76:	233f      	movs	r3, #63	; 0x3f
 8009b78:	9905      	ldr	r1, [sp, #20]
 8009b7a:	1a5b      	subs	r3, r3, r1
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	db6b      	blt.n	8009c58 <BackEndTask+0x264>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 8009b80:	00e8      	lsls	r0, r5, #3
 8009b82:	1b40      	subs	r0, r0, r5
 8009b84:	00c0      	lsls	r0, r0, #3
 8009b86:	4b64      	ldr	r3, [pc, #400]	; (8009d18 <BackEndTask+0x324>)
 8009b88:	18c0      	adds	r0, r0, r3
 8009b8a:	01a9      	lsls	r1, r5, #6
 8009b8c:	9b05      	ldr	r3, [sp, #20]
 8009b8e:	469c      	mov	ip, r3
 8009b90:	4461      	add	r1, ip
 8009b92:	4b5b      	ldr	r3, [pc, #364]	; (8009d00 <BackEndTask+0x30c>)
 8009b94:	18c9      	adds	r1, r1, r3
 8009b96:	f00a fbbb 	bl	8014310 <memcpy>
						if (packetStart < packetEnd) {
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	4599      	cmp	r9, r3
 8009b9e:	dc00      	bgt.n	8009ba2 <BackEndTask+0x1ae>
 8009ba0:	e081      	b.n	8009ca6 <BackEndTask+0x2b2>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8009ba2:	9a02      	ldr	r2, [sp, #8]
 8009ba4:	3204      	adds	r2, #4
 8009ba6:	01a8      	lsls	r0, r5, #6
 8009ba8:	469c      	mov	ip, r3
 8009baa:	4460      	add	r0, ip
 8009bac:	4b54      	ldr	r3, [pc, #336]	; (8009d00 <BackEndTask+0x30c>)
 8009bae:	18c0      	adds	r0, r0, r3
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	f00a fbb6 	bl	8014322 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8009bb6:	464b      	mov	r3, r9
 8009bb8:	3301      	adds	r3, #1
 8009bba:	9a03      	ldr	r2, [sp, #12]
 8009bbc:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009bbe:	4a57      	ldr	r2, [pc, #348]	; (8009d1c <BackEndTask+0x328>)
 8009bc0:	8813      	ldrh	r3, [r2, #0]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	f7ff fbb4 	bl	8009334 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 8009bcc:	e736      	b.n	8009a3c <BackEndTask+0x48>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 8009bce:	01a9      	lsls	r1, r5, #6
 8009bd0:	2240      	movs	r2, #64	; 0x40
 8009bd2:	9b01      	ldr	r3, [sp, #4]
 8009bd4:	1ad0      	subs	r0, r2, r3
 8009bd6:	9107      	str	r1, [sp, #28]
 8009bd8:	469c      	mov	ip, r3
 8009bda:	4461      	add	r1, ip
 8009bdc:	4b48      	ldr	r3, [pc, #288]	; (8009d00 <BackEndTask+0x30c>)
 8009bde:	469c      	mov	ip, r3
 8009be0:	4461      	add	r1, ip
 8009be2:	9006      	str	r0, [sp, #24]
 8009be4:	0002      	movs	r2, r0
 8009be6:	484a      	ldr	r0, [pc, #296]	; (8009d10 <BackEndTask+0x31c>)
 8009be8:	f00a fb92 	bl	8014310 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 8009bec:	4848      	ldr	r0, [pc, #288]	; (8009d10 <BackEndTask+0x31c>)
 8009bee:	9906      	ldr	r1, [sp, #24]
 8009bf0:	468c      	mov	ip, r1
 8009bf2:	4460      	add	r0, ip
 8009bf4:	4643      	mov	r3, r8
 8009bf6:	1a5a      	subs	r2, r3, r1
 8009bf8:	9b07      	ldr	r3, [sp, #28]
 8009bfa:	0019      	movs	r1, r3
 8009bfc:	4b40      	ldr	r3, [pc, #256]	; (8009d00 <BackEndTask+0x30c>)
 8009bfe:	469c      	mov	ip, r3
 8009c00:	4461      	add	r1, ip
 8009c02:	f00a fb85 	bl	8014310 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8009c06:	9b02      	ldr	r3, [sp, #8]
 8009c08:	1cd9      	adds	r1, r3, #3
 8009c0a:	4841      	ldr	r0, [pc, #260]	; (8009d10 <BackEndTask+0x31c>)
 8009c0c:	f004 fb2a 	bl	800e264 <CalculateCRC8>
 8009c10:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8009c12:	2238      	movs	r2, #56	; 0x38
 8009c14:	2100      	movs	r1, #0
 8009c16:	483e      	ldr	r0, [pc, #248]	; (8009d10 <BackEndTask+0x31c>)
 8009c18:	f00a fb83 	bl	8014322 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 8009c1c:	9b04      	ldr	r3, [sp, #16]
 8009c1e:	019b      	lsls	r3, r3, #6
 8009c20:	4a37      	ldr	r2, [pc, #220]	; (8009d00 <BackEndTask+0x30c>)
 8009c22:	4694      	mov	ip, r2
 8009c24:	4463      	add	r3, ip
 8009c26:	464a      	mov	r2, r9
 8009c28:	5c9b      	ldrb	r3, [r3, r2]
 8009c2a:	4543      	cmp	r3, r8
 8009c2c:	d09d      	beq.n	8009b6a <BackEndTask+0x176>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8009c2e:	2240      	movs	r2, #64	; 0x40
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	1ad2      	subs	r2, r2, r3
 8009c34:	4690      	mov	r8, r2
 8009c36:	01a8      	lsls	r0, r5, #6
 8009c38:	469c      	mov	ip, r3
 8009c3a:	4460      	add	r0, ip
 8009c3c:	4b30      	ldr	r3, [pc, #192]	; (8009d00 <BackEndTask+0x30c>)
 8009c3e:	18c0      	adds	r0, r0, r3
 8009c40:	2100      	movs	r1, #0
 8009c42:	f00a fb6e 	bl	8014322 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8009c46:	9a02      	ldr	r2, [sp, #8]
 8009c48:	3204      	adds	r2, #4
 8009c4a:	4643      	mov	r3, r8
 8009c4c:	1ad2      	subs	r2, r2, r3
 8009c4e:	2100      	movs	r1, #0
 8009c50:	0038      	movs	r0, r7
 8009c52:	f00a fb66 	bl	8014322 <memset>
 8009c56:	e0a3      	b.n	8009da0 <BackEndTask+0x3ac>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 8009c58:	00eb      	lsls	r3, r5, #3
 8009c5a:	1b5b      	subs	r3, r3, r5
 8009c5c:	00d9      	lsls	r1, r3, #3
 8009c5e:	01ab      	lsls	r3, r5, #6
 8009c60:	2240      	movs	r2, #64	; 0x40
 8009c62:	9805      	ldr	r0, [sp, #20]
 8009c64:	1a12      	subs	r2, r2, r0
 8009c66:	4690      	mov	r8, r2
 8009c68:	4a2b      	ldr	r2, [pc, #172]	; (8009d18 <BackEndTask+0x324>)
 8009c6a:	0010      	movs	r0, r2
 8009c6c:	9104      	str	r1, [sp, #16]
 8009c6e:	468c      	mov	ip, r1
 8009c70:	4460      	add	r0, ip
 8009c72:	9a05      	ldr	r2, [sp, #20]
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	469c      	mov	ip, r3
 8009c78:	4462      	add	r2, ip
 8009c7a:	4b21      	ldr	r3, [pc, #132]	; (8009d00 <BackEndTask+0x30c>)
 8009c7c:	18d1      	adds	r1, r2, r3
 8009c7e:	4642      	mov	r2, r8
 8009c80:	f00a fb46 	bl	8014310 <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 8009c84:	9904      	ldr	r1, [sp, #16]
 8009c86:	0008      	movs	r0, r1
 8009c88:	4440      	add	r0, r8
 8009c8a:	4a23      	ldr	r2, [pc, #140]	; (8009d18 <BackEndTask+0x324>)
 8009c8c:	4694      	mov	ip, r2
 8009c8e:	4460      	add	r0, ip
 8009c90:	9a02      	ldr	r2, [sp, #8]
 8009c92:	4641      	mov	r1, r8
 8009c94:	1a52      	subs	r2, r2, r1
 8009c96:	9b00      	ldr	r3, [sp, #0]
 8009c98:	0019      	movs	r1, r3
 8009c9a:	4b19      	ldr	r3, [pc, #100]	; (8009d00 <BackEndTask+0x30c>)
 8009c9c:	4698      	mov	r8, r3
 8009c9e:	4441      	add	r1, r8
 8009ca0:	f00a fb36 	bl	8014310 <memcpy>
 8009ca4:	e779      	b.n	8009b9a <BackEndTask+0x1a6>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8009ca6:	01ab      	lsls	r3, r5, #6
 8009ca8:	2240      	movs	r2, #64	; 0x40
 8009caa:	9901      	ldr	r1, [sp, #4]
 8009cac:	1a52      	subs	r2, r2, r1
 8009cae:	4690      	mov	r8, r2
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	468c      	mov	ip, r1
 8009cb6:	4460      	add	r0, ip
 8009cb8:	4b11      	ldr	r3, [pc, #68]	; (8009d00 <BackEndTask+0x30c>)
 8009cba:	18c0      	adds	r0, r0, r3
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	f00a fb30 	bl	8014322 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8009cc2:	9a02      	ldr	r2, [sp, #8]
 8009cc4:	3204      	adds	r2, #4
 8009cc6:	4641      	mov	r1, r8
 8009cc8:	1a52      	subs	r2, r2, r1
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	490c      	ldr	r1, [pc, #48]	; (8009d00 <BackEndTask+0x30c>)
 8009cce:	468c      	mov	ip, r1
 8009cd0:	4463      	add	r3, ip
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	f00a fb24 	bl	8014322 <memset>
 8009cda:	e76c      	b.n	8009bb6 <BackEndTask+0x1c2>
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	9a00      	ldr	r2, [sp, #0]
 8009ce0:	7053      	strb	r3, [r2, #1]
 8009ce2:	e6c6      	b.n	8009a72 <BackEndTask+0x7e>
			}				
		}
		
		taskYIELD();
 8009ce4:	f007 f8be 	bl	8010e64 <vPortYield>
		for (port=1 ; port <= NumOfPorts; port++)
 8009ce8:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <BackEndTask+0x314>)
 8009cea:	4698      	mov	r8, r3
 8009cec:	4b0c      	ldr	r3, [pc, #48]	; (8009d20 <BackEndTask+0x32c>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8009cee:	4f04      	ldr	r7, [pc, #16]	; (8009d00 <BackEndTask+0x30c>)
 8009cf0:	2500      	movs	r5, #0
 8009cf2:	4644      	mov	r4, r8
 8009cf4:	001e      	movs	r6, r3
 8009cf6:	e6a8      	b.n	8009a4a <BackEndTask+0x56>
 8009cf8:	20001294 	.word	0x20001294
 8009cfc:	20006d18 	.word	0x20006d18
 8009d00:	2000129c 	.word	0x2000129c
 8009d04:	20000aa7 	.word	0x20000aa7
 8009d08:	200010c8 	.word	0x200010c8
 8009d0c:	20001480 	.word	0x20001480
 8009d10:	200013e4 	.word	0x200013e4
 8009d14:	20000f10 	.word	0x20000f10
 8009d18:	20000d20 	.word	0x20000d20
 8009d1c:	200014f8 	.word	0x200014f8
 8009d20:	200013dc 	.word	0x200013dc
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8009d24:	3201      	adds	r2, #1
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 8009d26:	2a3e      	cmp	r2, #62	; 0x3e
 8009d28:	dd00      	ble.n	8009d2c <BackEndTask+0x338>
 8009d2a:	e678      	b.n	8009a1e <BackEndTask+0x2a>
 8009d2c:	5cb9      	ldrb	r1, [r7, r2]
 8009d2e:	2948      	cmp	r1, #72	; 0x48
 8009d30:	d1f8      	bne.n	8009d24 <BackEndTask+0x330>
 8009d32:	5c81      	ldrb	r1, [r0, r2]
 8009d34:	295a      	cmp	r1, #90	; 0x5a
 8009d36:	d1f5      	bne.n	8009d24 <BackEndTask+0x330>
 8009d38:	9201      	str	r2, [sp, #4]
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 8009d3a:	9b01      	ldr	r3, [sp, #4]
 8009d3c:	2b3d      	cmp	r3, #61	; 0x3d
 8009d3e:	d100      	bne.n	8009d42 <BackEndTask+0x34e>
 8009d40:	e6d9      	b.n	8009af6 <BackEndTask+0x102>
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 8009d42:	9b01      	ldr	r3, [sp, #4]
 8009d44:	2b3e      	cmp	r3, #62	; 0x3e
 8009d46:	d100      	bne.n	8009d4a <BackEndTask+0x356>
 8009d48:	e6e5      	b.n	8009b16 <BackEndTask+0x122>
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 8009d4a:	9b01      	ldr	r3, [sp, #4]
 8009d4c:	2b3f      	cmp	r3, #63	; 0x3f
 8009d4e:	d100      	bne.n	8009d52 <BackEndTask+0x35e>
 8009d50:	e69a      	b.n	8009a88 <BackEndTask+0x94>
					packetLength = UARTRxBuf[port-1][packetStart+2];
 8009d52:	9b04      	ldr	r3, [sp, #16]
 8009d54:	019b      	lsls	r3, r3, #6
 8009d56:	4a17      	ldr	r2, [pc, #92]	; (8009db4 <BackEndTask+0x3c0>)
 8009d58:	4694      	mov	ip, r2
 8009d5a:	4463      	add	r3, ip
 8009d5c:	9a01      	ldr	r2, [sp, #4]
 8009d5e:	4694      	mov	ip, r2
 8009d60:	4463      	add	r3, ip
 8009d62:	7899      	ldrb	r1, [r3, #2]
 8009d64:	9102      	str	r1, [sp, #8]
					parseStart = packetStart+3;
 8009d66:	0013      	movs	r3, r2
 8009d68:	3203      	adds	r2, #3
 8009d6a:	9205      	str	r2, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 8009d6c:	1cca      	adds	r2, r1, #3
 8009d6e:	4690      	mov	r8, r2
 8009d70:	4443      	add	r3, r8
 8009d72:	4699      	mov	r9, r3
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 8009d74:	2b3f      	cmp	r3, #63	; 0x3f
 8009d76:	dd00      	ble.n	8009d7a <BackEndTask+0x386>
 8009d78:	e6c8      	b.n	8009b0c <BackEndTask+0x118>
				if (packetStart != packetEnd)										// Non-empty packet
 8009d7a:	9b01      	ldr	r3, [sp, #4]
 8009d7c:	4599      	cmp	r9, r3
 8009d7e:	d000      	beq.n	8009d82 <BackEndTask+0x38e>
 8009d80:	e6ce      	b.n	8009b20 <BackEndTask+0x12c>
				if (packetStart < packetEnd) {
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	4599      	cmp	r9, r3
 8009d86:	dc00      	bgt.n	8009d8a <BackEndTask+0x396>
 8009d88:	e751      	b.n	8009c2e <BackEndTask+0x23a>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8009d8a:	9a02      	ldr	r2, [sp, #8]
 8009d8c:	3204      	adds	r2, #4
 8009d8e:	01a8      	lsls	r0, r5, #6
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	469c      	mov	ip, r3
 8009d94:	4460      	add	r0, ip
 8009d96:	4b07      	ldr	r3, [pc, #28]	; (8009db4 <BackEndTask+0x3c0>)
 8009d98:	18c0      	adds	r0, r0, r3
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	f00a fac1 	bl	8014322 <memset>
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8009da0:	464b      	mov	r3, r9
 8009da2:	3301      	adds	r3, #1
 8009da4:	9a03      	ldr	r2, [sp, #12]
 8009da6:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;							
 8009da8:	4a03      	ldr	r2, [pc, #12]	; (8009db8 <BackEndTask+0x3c4>)
 8009daa:	8813      	ldrh	r3, [r2, #0]
 8009dac:	3301      	adds	r3, #1
 8009dae:	8013      	strh	r3, [r2, #0]
 8009db0:	e652      	b.n	8009a58 <BackEndTask+0x64>
 8009db2:	46c0      	nop			; (mov r8, r8)
 8009db4:	2000129c 	.word	0x2000129c
 8009db8:	20001694 	.word	0x20001694

08009dbc <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;
	
	return result;
}
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	4770      	bx	lr

08009dc0 <PxMessagingTask>:
{
 8009dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dc2:	46de      	mov	lr, fp
 8009dc4:	4657      	mov	r7, sl
 8009dc6:	464e      	mov	r6, r9
 8009dc8:	4645      	mov	r5, r8
 8009dca:	b5e0      	push	{r5, r6, r7, lr}
 8009dcc:	b097      	sub	sp, #92	; 0x5c
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9307      	str	r3, [sp, #28]
 8009dd2:	930b      	str	r3, [sp, #44]	; 0x2c
	port = (int8_t)(unsigned) argument;
 8009dd4:	b2c3      	uxtb	r3, r0
 8009dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd8:	27ff      	movs	r7, #255	; 0xff
 8009dda:	4007      	ands	r7, r0
		if (messageLength[port-1])
 8009ddc:	1e7c      	subs	r4, r7, #1
 8009dde:	00e3      	lsls	r3, r4, #3
 8009de0:	1b1b      	subs	r3, r3, r4
 8009de2:	00db      	lsls	r3, r3, #3
 8009de4:	930a      	str	r3, [sp, #40]	; 0x28
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8009de6:	4ada      	ldr	r2, [pc, #872]	; (800a150 <PxMessagingTask+0x390>)
 8009de8:	18d2      	adds	r2, r2, r3
 8009dea:	9205      	str	r2, [sp, #20]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	930c      	str	r3, [sp, #48]	; 0x30
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	930d      	str	r3, [sp, #52]	; 0x34
 8009df4:	2500      	movs	r5, #0
			if (cMessage[port-1][2]>>7) {
 8009df6:	00e3      	lsls	r3, r4, #3
 8009df8:	1b1b      	subs	r3, r3, r4
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	469a      	mov	sl, r3
 8009dfe:	0013      	movs	r3, r2
 8009e00:	9208      	str	r2, [sp, #32]
 8009e02:	3302      	adds	r3, #2
 8009e04:	469b      	mov	fp, r3
 8009e06:	4656      	mov	r6, sl
 8009e08:	46aa      	mov	sl, r5
 8009e0a:	e024      	b.n	8009e56 <PxMessagingTask+0x96>
				code = cMessage[port-1][3+shift];
 8009e0c:	4ad0      	ldr	r2, [pc, #832]	; (800a150 <PxMessagingTask+0x390>)
 8009e0e:	1992      	adds	r2, r2, r6
 8009e10:	18d3      	adds	r3, r2, r3
 8009e12:	78db      	ldrb	r3, [r3, #3]
 8009e14:	4699      	mov	r9, r3
 8009e16:	e049      	b.n	8009eac <PxMessagingTask+0xec>
					indMode = IND_SHORT_BLINK;
 8009e18:	4bce      	ldr	r3, [pc, #824]	; (800a154 <PxMessagingTask+0x394>)
 8009e1a:	2203      	movs	r2, #3
 8009e1c:	701a      	strb	r2, [r3, #0]
					if (code == CODE_UPDATE) {		// Remote bootloader update
 8009e1e:	464b      	mov	r3, r9
 8009e20:	2b19      	cmp	r3, #25
 8009e22:	d058      	beq.n	8009ed6 <PxMessagingTask+0x116>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8009e24:	2b1a      	cmp	r3, #26
 8009e26:	d060      	beq.n	8009eea <PxMessagingTask+0x12a>
		if (result == BOS_ERR_UnknownMessage) {
 8009e28:	4653      	mov	r3, sl
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d101      	bne.n	8009e32 <PxMessagingTask+0x72>
 8009e2e:	f001 faae 	bl	800b38e <PxMessagingTask+0x15ce>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8009e32:	4dc9      	ldr	r5, [pc, #804]	; (800a158 <PxMessagingTask+0x398>)
 8009e34:	5d2a      	ldrb	r2, [r5, r4]
 8009e36:	2100      	movs	r1, #0
 8009e38:	9805      	ldr	r0, [sp, #20]
 8009e3a:	f00a fa72 	bl	8014322 <memset>
		messageLength[port-1] = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	552b      	strb	r3, [r5, r4]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 8009e42:	4bc6      	ldr	r3, [pc, #792]	; (800a15c <PxMessagingTask+0x39c>)
 8009e44:	5ddb      	ldrb	r3, [r3, r7]
 8009e46:	3b02      	subs	r3, #2
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d902      	bls.n	8009e52 <PxMessagingTask+0x92>
			portStatus[port] = FREE;
 8009e4c:	4bc3      	ldr	r3, [pc, #780]	; (800a15c <PxMessagingTask+0x39c>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	55da      	strb	r2, [r3, r7]
		taskYIELD();
 8009e52:	f007 f807 	bl	8010e64 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009e56:	2101      	movs	r1, #1
 8009e58:	4249      	negs	r1, r1
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	f006 fd26 	bl	80108ac <ulTaskNotifyTake>
		if (messageLength[port-1])
 8009e60:	4bbd      	ldr	r3, [pc, #756]	; (800a158 <PxMessagingTask+0x398>)
 8009e62:	5d19      	ldrb	r1, [r3, r4]
 8009e64:	2900      	cmp	r1, #0
 8009e66:	d0df      	beq.n	8009e28 <PxMessagingTask+0x68>
			if (cMessage[port-1][2]>>7) {
 8009e68:	465b      	mov	r3, fp
 8009e6a:	781a      	ldrb	r2, [r3, #0]
 8009e6c:	09d3      	lsrs	r3, r2, #7
 8009e6e:	48bc      	ldr	r0, [pc, #752]	; (800a160 <PxMessagingTask+0x3a0>)
 8009e70:	7003      	strb	r3, [r0, #0]
			dst = cMessage[port-1][0]; 
 8009e72:	4bb7      	ldr	r3, [pc, #732]	; (800a150 <PxMessagingTask+0x390>)
 8009e74:	5cf3      	ldrb	r3, [r6, r3]
 8009e76:	4698      	mov	r8, r3
			src = cMessage[port-1][1];	
 8009e78:	9b08      	ldr	r3, [sp, #32]
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	9307      	str	r3, [sp, #28]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4013      	ands	r3, r2
			shift = 0;
 8009e82:	9306      	str	r3, [sp, #24]
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 8009e84:	4db7      	ldr	r5, [pc, #732]	; (800a164 <PxMessagingTask+0x3a4>)
 8009e86:	0710      	lsls	r0, r2, #28
 8009e88:	0f80      	lsrs	r0, r0, #30
 8009e8a:	71e8      	strb	r0, [r5, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 8009e8c:	2060      	movs	r0, #96	; 0x60
 8009e8e:	4010      	ands	r0, r2
 8009e90:	71a8      	strb	r0, [r5, #6]
			if (extendCode == true) {		
 8009e92:	0792      	lsls	r2, r2, #30
 8009e94:	d5ba      	bpl.n	8009e0c <PxMessagingTask+0x4c>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8009e96:	4aae      	ldr	r2, [pc, #696]	; (800a150 <PxMessagingTask+0x390>)
 8009e98:	1992      	adds	r2, r2, r6
 8009e9a:	18d2      	adds	r2, r2, r3
 8009e9c:	7910      	ldrb	r0, [r2, #4]
 8009e9e:	0200      	lsls	r0, r0, #8
 8009ea0:	78d2      	ldrb	r2, [r2, #3]
 8009ea2:	1812      	adds	r2, r2, r0
 8009ea4:	b292      	uxth	r2, r2
 8009ea6:	4691      	mov	r9, r2
				++shift;
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	9306      	str	r3, [sp, #24]
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8009eac:	4643      	mov	r3, r8
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2bfc      	cmp	r3, #252	; 0xfc
 8009eb4:	d826      	bhi.n	8009f04 <PxMessagingTask+0x144>
 8009eb6:	4bac      	ldr	r3, [pc, #688]	; (800a168 <PxMessagingTask+0x3a8>)
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	4543      	cmp	r3, r8
 8009ebc:	d06d      	beq.n	8009f9a <PxMessagingTask+0x1da>
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <PxMessagingTask+0x106>
 8009ec2:	f001 fa92 	bl	800b3ea <PxMessagingTask+0x162a>
				ForwardReceivedMessage(port);
 8009ec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ec8:	f7ff fc32 	bl	8009730 <ForwardReceivedMessage>
				if (BOS.trace)
 8009ecc:	4ba5      	ldr	r3, [pc, #660]	; (800a164 <PxMessagingTask+0x3a4>)
 8009ece:	79db      	ldrb	r3, [r3, #7]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d0a4      	beq.n	8009e1e <PxMessagingTask+0x5e>
 8009ed4:	e7a0      	b.n	8009e18 <PxMessagingTask+0x58>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 8009ed6:	2064      	movs	r0, #100	; 0x64
 8009ed8:	f007 f93e 	bl	8011158 <HAL_Delay>
 8009edc:	2300      	movs	r3, #0
 8009ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	9807      	ldr	r0, [sp, #28]
 8009ee4:	f7fa f9c4 	bl	8004270 <remoteBootloaderUpdate>
 8009ee8:	e79e      	b.n	8009e28 <PxMessagingTask+0x68>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 8009eea:	2064      	movs	r0, #100	; 0x64
 8009eec:	f007 f934 	bl	8011158 <HAL_Delay>
 8009ef0:	4b97      	ldr	r3, [pc, #604]	; (800a150 <PxMessagingTask+0x390>)
 8009ef2:	199b      	adds	r3, r3, r6
 8009ef4:	9a06      	ldr	r2, [sp, #24]
 8009ef6:	5c9b      	ldrb	r3, [r3, r2]
 8009ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009efa:	4641      	mov	r1, r8
 8009efc:	9807      	ldr	r0, [sp, #28]
 8009efe:	f7fa f9b7 	bl	8004270 <remoteBootloaderUpdate>
 8009f02:	e791      	b.n	8009e28 <PxMessagingTask+0x68>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009f04:	4643      	mov	r3, r8
 8009f06:	2bff      	cmp	r3, #255	; 0xff
 8009f08:	d03c      	beq.n	8009f84 <PxMessagingTask+0x1c4>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009f0a:	2bfe      	cmp	r3, #254	; 0xfe
 8009f0c:	d145      	bne.n	8009f9a <PxMessagingTask+0x1da>
 8009f0e:	4b90      	ldr	r3, [pc, #576]	; (800a150 <PxMessagingTask+0x390>)
 8009f10:	199b      	adds	r3, r3, r6
 8009f12:	1859      	adds	r1, r3, r1
 8009f14:	3901      	subs	r1, #1
 8009f16:	780b      	ldrb	r3, [r1, #0]
 8009f18:	4a94      	ldr	r2, [pc, #592]	; (800a16c <PxMessagingTask+0x3ac>)
 8009f1a:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 8009f1c:	2103      	movs	r1, #3
 8009f1e:	468a      	mov	sl, r1
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d086      	beq.n	8009e32 <PxMessagingTask+0x72>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8009f24:	4a91      	ldr	r2, [pc, #580]	; (800a16c <PxMessagingTask+0x3ac>)
 8009f26:	7013      	strb	r3, [r2, #0]
 8009f28:	4a91      	ldr	r2, [pc, #580]	; (800a170 <PxMessagingTask+0x3b0>)
 8009f2a:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 8009f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f2e:	20fe      	movs	r0, #254	; 0xfe
 8009f30:	f7ff fc1e 	bl	8009770 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8009f34:	4b88      	ldr	r3, [pc, #544]	; (800a158 <PxMessagingTask+0x398>)
 8009f36:	5d19      	ldrb	r1, [r3, r4]
 8009f38:	4b85      	ldr	r3, [pc, #532]	; (800a150 <PxMessagingTask+0x390>)
 8009f3a:	199b      	adds	r3, r3, r6
 8009f3c:	185b      	adds	r3, r3, r1
 8009f3e:	1e5a      	subs	r2, r3, #1
 8009f40:	2000      	movs	r0, #0
 8009f42:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009f44:	3b02      	subs	r3, #2
 8009f46:	781a      	ldrb	r2, [r3, #0]
 8009f48:	920b      	str	r2, [sp, #44]	; 0x2c
					for(i=0 ; i<temp ; i++)
 8009f4a:	2a00      	cmp	r2, #0
 8009f4c:	d101      	bne.n	8009f52 <PxMessagingTask+0x192>
 8009f4e:	f001 fa3b 	bl	800b3c8 <PxMessagingTask+0x1608>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 8009f52:	4b85      	ldr	r3, [pc, #532]	; (800a168 <PxMessagingTask+0x3a8>)
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	469c      	mov	ip, r3
 8009f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f5a:	18c8      	adds	r0, r1, r3
 8009f5c:	1a80      	subs	r0, r0, r2
 8009f5e:	3802      	subs	r0, #2
 8009f60:	4b7b      	ldr	r3, [pc, #492]	; (800a150 <PxMessagingTask+0x390>)
 8009f62:	18c0      	adds	r0, r0, r3
 8009f64:	2300      	movs	r3, #0
 8009f66:	4665      	mov	r5, ip
 8009f68:	468c      	mov	ip, r1
 8009f6a:	0011      	movs	r1, r2
 8009f6c:	5cc2      	ldrb	r2, [r0, r3]
 8009f6e:	42aa      	cmp	r2, r5
 8009f70:	d101      	bne.n	8009f76 <PxMessagingTask+0x1b6>
 8009f72:	f001 fa21 	bl	800b3b8 <PxMessagingTask+0x15f8>
					for(i=0 ; i<temp ; i++)
 8009f76:	3301      	adds	r3, #1
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	428a      	cmp	r2, r1
 8009f7c:	d3f6      	bcc.n	8009f6c <PxMessagingTask+0x1ac>
					result = BOS_ERR_WrongID;
 8009f7e:	2366      	movs	r3, #102	; 0x66
 8009f80:	469a      	mov	sl, r3
 8009f82:	e756      	b.n	8009e32 <PxMessagingTask+0x72>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009f84:	4b72      	ldr	r3, [pc, #456]	; (800a150 <PxMessagingTask+0x390>)
 8009f86:	199b      	adds	r3, r3, r6
 8009f88:	1859      	adds	r1, r3, r1
 8009f8a:	3901      	subs	r1, #1
 8009f8c:	780b      	ldrb	r3, [r1, #0]
 8009f8e:	4a77      	ldr	r2, [pc, #476]	; (800a16c <PxMessagingTask+0x3ac>)
 8009f90:	7812      	ldrb	r2, [r2, #0]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d115      	bne.n	8009fc2 <PxMessagingTask+0x202>
					result = BOS_ERR_MSG_Reflection;
 8009f96:	2303      	movs	r3, #3
 8009f98:	469a      	mov	sl, r3
				if (result == BOS_OK)
 8009f9a:	4653      	mov	r3, sl
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d000      	beq.n	8009fa2 <PxMessagingTask+0x1e2>
 8009fa0:	e742      	b.n	8009e28 <PxMessagingTask+0x68>
				shift += 4;
 8009fa2:	9d06      	ldr	r5, [sp, #24]
 8009fa4:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 8009fa6:	4b6c      	ldr	r3, [pc, #432]	; (800a158 <PxMessagingTask+0x398>)
 8009fa8:	5d19      	ldrb	r1, [r3, r4]
 8009faa:	1b48      	subs	r0, r1, r5
 8009fac:	b2c3      	uxtb	r3, r0
 8009fae:	469a      	mov	sl, r3
					switch (code)
 8009fb0:	464b      	mov	r3, r9
 8009fb2:	2b23      	cmp	r3, #35	; 0x23
 8009fb4:	d901      	bls.n	8009fba <PxMessagingTask+0x1fa>
 8009fb6:	f001 f9cc 	bl	800b352 <PxMessagingTask+0x1592>
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4a6d      	ldr	r2, [pc, #436]	; (800a174 <PxMessagingTask+0x3b4>)
 8009fbe:	58d3      	ldr	r3, [r2, r3]
 8009fc0:	469f      	mov	pc, r3
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8009fc2:	4a6a      	ldr	r2, [pc, #424]	; (800a16c <PxMessagingTask+0x3ac>)
 8009fc4:	7013      	strb	r3, [r2, #0]
 8009fc6:	4a6a      	ldr	r2, [pc, #424]	; (800a170 <PxMessagingTask+0x3b0>)
 8009fc8:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8009fca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fcc:	20ff      	movs	r0, #255	; 0xff
 8009fce:	f7ff fbcf 	bl	8009770 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8009fd2:	4b61      	ldr	r3, [pc, #388]	; (800a158 <PxMessagingTask+0x398>)
 8009fd4:	5d1a      	ldrb	r2, [r3, r4]
 8009fd6:	4b5e      	ldr	r3, [pc, #376]	; (800a150 <PxMessagingTask+0x390>)
 8009fd8:	199b      	adds	r3, r3, r6
 8009fda:	189b      	adds	r3, r3, r2
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
 8009fe2:	e7da      	b.n	8009f9a <PxMessagingTask+0x1da>
							for (p=0 ; p<numOfParams ; p++) 
 8009fe4:	4653      	mov	r3, sl
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d022      	beq.n	800a030 <PxMessagingTask+0x270>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 8009fea:	9b07      	ldr	r3, [sp, #28]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	469c      	mov	ip, r3
 8009ff0:	005a      	lsls	r2, r3, #1
 8009ff2:	4b61      	ldr	r3, [pc, #388]	; (800a178 <PxMessagingTask+0x3b8>)
 8009ff4:	5ad3      	ldrh	r3, [r2, r3]
 8009ff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ff8:	4690      	mov	r8, r2
 8009ffa:	4445      	add	r5, r8
 8009ffc:	4a54      	ldr	r2, [pc, #336]	; (800a150 <PxMessagingTask+0x390>)
 8009ffe:	18ad      	adds	r5, r5, r2
 800a000:	2200      	movs	r2, #0
 800a002:	2080      	movs	r0, #128	; 0x80
 800a004:	0200      	lsls	r0, r0, #8
 800a006:	46a0      	mov	r8, r4
 800a008:	4654      	mov	r4, sl
 800a00a:	46b1      	mov	r9, r6
 800a00c:	001e      	movs	r6, r3
 800a00e:	5ca9      	ldrb	r1, [r5, r2]
 800a010:	3901      	subs	r1, #1
 800a012:	0003      	movs	r3, r0
 800a014:	410b      	asrs	r3, r1
 800a016:	431e      	orrs	r6, r3
 800a018:	b2b6      	uxth	r6, r6
							for (p=0 ; p<numOfParams ; p++) 
 800a01a:	3201      	adds	r2, #1
 800a01c:	b2d3      	uxtb	r3, r2
 800a01e:	42a3      	cmp	r3, r4
 800a020:	d3f5      	bcc.n	800a00e <PxMessagingTask+0x24e>
 800a022:	4644      	mov	r4, r8
 800a024:	0033      	movs	r3, r6
 800a026:	464e      	mov	r6, r9
 800a028:	4662      	mov	r2, ip
 800a02a:	0050      	lsls	r0, r2, #1
 800a02c:	4a52      	ldr	r2, [pc, #328]	; (800a178 <PxMessagingTask+0x3b8>)
 800a02e:	5283      	strh	r3, [r0, r2]
							responseStatus = BOS_OK;
 800a030:	4b52      	ldr	r3, [pc, #328]	; (800a17c <PxMessagingTask+0x3bc>)
 800a032:	2200      	movs	r2, #0
 800a034:	701a      	strb	r2, [r3, #0]
							break;		
 800a036:	2300      	movs	r3, #0
 800a038:	469a      	mov	sl, r3
 800a03a:	e6fa      	b.n	8009e32 <PxMessagingTask+0x72>
							indMode = IND_PING;	osDelay(10);
 800a03c:	4b45      	ldr	r3, [pc, #276]	; (800a154 <PxMessagingTask+0x394>)
 800a03e:	2201      	movs	r2, #1
 800a040:	701a      	strb	r2, [r3, #0]
 800a042:	200a      	movs	r0, #10
 800a044:	f005 f815 	bl	800f072 <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 800a048:	4b46      	ldr	r3, [pc, #280]	; (800a164 <PxMessagingTask+0x3a4>)
 800a04a:	799b      	ldrb	r3, [r3, #6]
 800a04c:	2240      	movs	r2, #64	; 0x40
 800a04e:	4393      	bics	r3, r2
 800a050:	2200      	movs	r2, #0
 800a052:	4692      	mov	sl, r2
 800a054:	2b20      	cmp	r3, #32
 800a056:	d000      	beq.n	800a05a <PxMessagingTask+0x29a>
 800a058:	e6eb      	b.n	8009e32 <PxMessagingTask+0x72>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 800a05a:	2102      	movs	r1, #2
 800a05c:	9807      	ldr	r0, [sp, #28]
 800a05e:	f7ff fbcf 	bl	8009800 <SendMessageToModule>
 800a062:	e6e6      	b.n	8009e32 <PxMessagingTask+0x72>
							if (!moduleAlias[myID][0])
 800a064:	4b40      	ldr	r3, [pc, #256]	; (800a168 <PxMessagingTask+0x3a8>)
 800a066:	781a      	ldrb	r2, [r3, #0]
 800a068:	0093      	lsls	r3, r2, #2
 800a06a:	189b      	adds	r3, r3, r2
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	4a44      	ldr	r2, [pc, #272]	; (800a180 <PxMessagingTask+0x3c0>)
 800a070:	5c9b      	ldrb	r3, [r3, r2]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d118      	bne.n	800a0a8 <PxMessagingTask+0x2e8>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 800a076:	9a07      	ldr	r2, [sp, #28]
 800a078:	4942      	ldr	r1, [pc, #264]	; (800a184 <PxMessagingTask+0x3c4>)
 800a07a:	4843      	ldr	r0, [pc, #268]	; (800a188 <PxMessagingTask+0x3c8>)
 800a07c:	f00a fb46 	bl	801470c <sprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800a080:	4d41      	ldr	r5, [pc, #260]	; (800a188 <PxMessagingTask+0x3c8>)
 800a082:	0028      	movs	r0, r5
 800a084:	f7f6 f848 	bl	8000118 <strlen>
 800a088:	b282      	uxth	r2, r0
 800a08a:	4b40      	ldr	r3, [pc, #256]	; (800a18c <PxMessagingTask+0x3cc>)
 800a08c:	7818      	ldrb	r0, [r3, #0]
 800a08e:	2301      	movs	r3, #1
 800a090:	425b      	negs	r3, r3
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	3333      	adds	r3, #51	; 0x33
 800a096:	0029      	movs	r1, r5
 800a098:	f004 febc 	bl	800ee14 <writePxMutex>
							responseStatus = BOS_OK;								
 800a09c:	4b37      	ldr	r3, [pc, #220]	; (800a17c <PxMessagingTask+0x3bc>)
 800a09e:	2200      	movs	r2, #0
 800a0a0:	701a      	strb	r2, [r3, #0]
							break;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	469a      	mov	sl, r3
 800a0a6:	e6c4      	b.n	8009e32 <PxMessagingTask+0x72>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 800a0a8:	230a      	movs	r3, #10
 800a0aa:	9907      	ldr	r1, [sp, #28]
 800a0ac:	434b      	muls	r3, r1
 800a0ae:	4a34      	ldr	r2, [pc, #208]	; (800a180 <PxMessagingTask+0x3c0>)
 800a0b0:	189b      	adds	r3, r3, r2
 800a0b2:	000a      	movs	r2, r1
 800a0b4:	4936      	ldr	r1, [pc, #216]	; (800a190 <PxMessagingTask+0x3d0>)
 800a0b6:	4834      	ldr	r0, [pc, #208]	; (800a188 <PxMessagingTask+0x3c8>)
 800a0b8:	f00a fb28 	bl	801470c <sprintf>
 800a0bc:	e7e0      	b.n	800a080 <PxMessagingTask+0x2c0>
							IND_ON();
 800a0be:	2180      	movs	r1, #128	; 0x80
 800a0c0:	2090      	movs	r0, #144	; 0x90
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	0109      	lsls	r1, r1, #4
 800a0c6:	05c0      	lsls	r0, r0, #23
 800a0c8:	f008 f928 	bl	801231c <HAL_GPIO_WritePin>
							break;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	469a      	mov	sl, r3
 800a0d0:	e6af      	b.n	8009e32 <PxMessagingTask+0x72>
							IND_OFF();
 800a0d2:	2180      	movs	r1, #128	; 0x80
 800a0d4:	2090      	movs	r0, #144	; 0x90
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	0109      	lsls	r1, r1, #4
 800a0da:	05c0      	lsls	r0, r0, #23
 800a0dc:	f008 f91e 	bl	801231c <HAL_GPIO_WritePin>
							break;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	469a      	mov	sl, r3
 800a0e4:	e6a5      	b.n	8009e32 <PxMessagingTask+0x72>
							IND_toggle();
 800a0e6:	2180      	movs	r1, #128	; 0x80
 800a0e8:	2090      	movs	r0, #144	; 0x90
 800a0ea:	0109      	lsls	r1, r1, #4
 800a0ec:	05c0      	lsls	r0, r0, #23
 800a0ee:	f008 f91b 	bl	8012328 <HAL_GPIO_TogglePin>
							break;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	469a      	mov	sl, r3
 800a0f6:	e69c      	b.n	8009e32 <PxMessagingTask+0x72>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 800a0f8:	4b26      	ldr	r3, [pc, #152]	; (800a194 <PxMessagingTask+0x3d4>)
 800a0fa:	469c      	mov	ip, r3
 800a0fc:	00a3      	lsls	r3, r4, #2
 800a0fe:	4a14      	ldr	r2, [pc, #80]	; (800a150 <PxMessagingTask+0x390>)
 800a100:	4691      	mov	r9, r2
 800a102:	44b1      	add	r9, r6
 800a104:	464a      	mov	r2, r9
 800a106:	1950      	adds	r0, r2, r5
 800a108:	7881      	ldrb	r1, [r0, #2]
 800a10a:	4688      	mov	r8, r1
 800a10c:	9907      	ldr	r1, [sp, #28]
 800a10e:	0209      	lsls	r1, r1, #8
 800a110:	4441      	add	r1, r8
 800a112:	4662      	mov	r2, ip
 800a114:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 800a116:	4463      	add	r3, ip
 800a118:	464a      	mov	r2, r9
 800a11a:	5d51      	ldrb	r1, [r2, r5]
 800a11c:	0209      	lsls	r1, r1, #8
 800a11e:	7842      	ldrb	r2, [r0, #1]
 800a120:	1852      	adds	r2, r2, r1
 800a122:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 800a124:	4b1c      	ldr	r3, [pc, #112]	; (800a198 <PxMessagingTask+0x3d8>)
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	4a1c      	ldr	r2, [pc, #112]	; (800a19c <PxMessagingTask+0x3dc>)
 800a12a:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 800a12c:	0a1b      	lsrs	r3, r3, #8
 800a12e:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 800a130:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a132:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 800a134:	2002      	movs	r0, #2
 800a136:	f004 ff9c 	bl	800f072 <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 800a13a:	2303      	movs	r3, #3
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	3308      	adds	r3, #8
 800a140:	2200      	movs	r2, #0
 800a142:	2100      	movs	r1, #0
 800a144:	0028      	movs	r0, r5
 800a146:	f7ff f931 	bl	80093ac <SendMessageFromPort>
							break;
 800a14a:	2300      	movs	r3, #0
 800a14c:	469a      	mov	sl, r3
 800a14e:	e670      	b.n	8009e32 <PxMessagingTask+0x72>
 800a150:	20000d20 	.word	0x20000d20
 800a154:	20000ed2 	.word	0x20000ed2
 800a158:	20000f10 	.word	0x20000f10
 800a15c:	200010c8 	.word	0x200010c8
 800a160:	20000ed3 	.word	0x20000ed3
 800a164:	20006d18 	.word	0x20006d18
 800a168:	2000104c 	.word	0x2000104c
 800a16c:	200014fa 	.word	0x200014fa
 800a170:	20000cce 	.word	0x20000cce
 800a174:	0801ccec 	.word	0x0801ccec
 800a178:	20007164 	.word	0x20007164
 800a17c:	200010e0 	.word	0x200010e0
 800a180:	20000f48 	.word	0x20000f48
 800a184:	0801bc10 	.word	0x0801bc10
 800a188:	20001644 	.word	0x20001644
 800a18c:	20000aa7 	.word	0x20000aa7
 800a190:	0801bc24 	.word	0x0801bc24
 800a194:	20001050 	.word	0x20001050
 800a198:	20000050 	.word	0x20000050
 800a19c:	20000f18 	.word	0x20000f18
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 800a1a0:	4bd7      	ldr	r3, [pc, #860]	; (800a500 <PxMessagingTask+0x740>)
 800a1a2:	469c      	mov	ip, r3
 800a1a4:	00a3      	lsls	r3, r4, #2
 800a1a6:	4ad7      	ldr	r2, [pc, #860]	; (800a504 <PxMessagingTask+0x744>)
 800a1a8:	4691      	mov	r9, r2
 800a1aa:	44b1      	add	r9, r6
 800a1ac:	464a      	mov	r2, r9
 800a1ae:	1950      	adds	r0, r2, r5
 800a1b0:	7881      	ldrb	r1, [r0, #2]
 800a1b2:	4688      	mov	r8, r1
 800a1b4:	9907      	ldr	r1, [sp, #28]
 800a1b6:	0209      	lsls	r1, r1, #8
 800a1b8:	4441      	add	r1, r8
 800a1ba:	4662      	mov	r2, ip
 800a1bc:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 800a1be:	4463      	add	r3, ip
 800a1c0:	464a      	mov	r2, r9
 800a1c2:	5d51      	ldrb	r1, [r2, r5]
 800a1c4:	0209      	lsls	r1, r1, #8
 800a1c6:	7842      	ldrb	r2, [r0, #1]
 800a1c8:	1852      	adds	r2, r2, r1
 800a1ca:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 800a1cc:	4bce      	ldr	r3, [pc, #824]	; (800a508 <PxMessagingTask+0x748>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	701a      	strb	r2, [r3, #0]
							break;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	469a      	mov	sl, r3
 800a1d6:	e62c      	b.n	8009e32 <PxMessagingTask+0x72>
							ExploreNeighbors(port);	indMode = IND_TOPOLOGY;
 800a1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1da:	f7f9 febb 	bl	8003f54 <ExploreNeighbors>
 800a1de:	4bcb      	ldr	r3, [pc, #812]	; (800a50c <PxMessagingTask+0x74c>)
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	701a      	strb	r2, [r3, #0]
							osDelay(10); temp = 0;
 800a1e4:	200a      	movs	r0, #10
 800a1e6:	f004 ff44 	bl	800f072 <osDelay>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 800a1ea:	4bc5      	ldr	r3, [pc, #788]	; (800a500 <PxMessagingTask+0x740>)
 800a1ec:	4698      	mov	r8, r3
 800a1ee:	2501      	movs	r5, #1
							osDelay(10); temp = 0;
 800a1f0:	2300      	movs	r3, #0
									messageParams[temp] = p;
 800a1f2:	4642      	mov	r2, r8
 800a1f4:	46a0      	mov	r8, r4
 800a1f6:	46b1      	mov	r9, r6
 800a1f8:	001e      	movs	r6, r3
 800a1fa:	0014      	movs	r4, r2
 800a1fc:	e00f      	b.n	800a21e <PxMessagingTask+0x45e>
 800a1fe:	4bc4      	ldr	r3, [pc, #784]	; (800a510 <PxMessagingTask+0x750>)
 800a200:	559d      	strb	r5, [r3, r6]
									memcpy(messageParams+temp+1, neighbors[p-1], (size_t)(4));
 800a202:	1c70      	adds	r0, r6, #1
 800a204:	469c      	mov	ip, r3
 800a206:	4460      	add	r0, ip
 800a208:	2204      	movs	r2, #4
 800a20a:	0021      	movs	r1, r4
 800a20c:	f00a f880 	bl	8014310 <memcpy>
									temp += 5;		
 800a210:	3605      	adds	r6, #5
 800a212:	b2f6      	uxtb	r6, r6
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 800a214:	3501      	adds	r5, #1
 800a216:	b2ed      	uxtb	r5, r5
 800a218:	3404      	adds	r4, #4
 800a21a:	2d06      	cmp	r5, #6
 800a21c:	d003      	beq.n	800a226 <PxMessagingTask+0x466>
								if (neighbors[p-1][0])
 800a21e:	8823      	ldrh	r3, [r4, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d0f7      	beq.n	800a214 <PxMessagingTask+0x454>
 800a224:	e7eb      	b.n	800a1fe <PxMessagingTask+0x43e>
 800a226:	4644      	mov	r4, r8
 800a228:	0033      	movs	r3, r6
 800a22a:	960b      	str	r6, [sp, #44]	; 0x2c
 800a22c:	464e      	mov	r6, r9
							SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE, temp);
 800a22e:	b29a      	uxth	r2, r3
 800a230:	210d      	movs	r1, #13
 800a232:	9807      	ldr	r0, [sp, #28]
 800a234:	f7ff fae4 	bl	8009800 <SendMessageToModule>
							break;
 800a238:	2300      	movs	r3, #0
 800a23a:	469a      	mov	sl, r3
 800a23c:	e5f9      	b.n	8009e32 <PxMessagingTask+0x72>
							temp = numOfParams/5;
 800a23e:	2105      	movs	r1, #5
 800a240:	4650      	mov	r0, sl
 800a242:	f7f5 ff85 	bl	8000150 <__udivsi3>
 800a246:	b2c2      	uxtb	r2, r0
 800a248:	920b      	str	r2, [sp, #44]	; 0x2c
							for (uint8_t k=0 ; k<temp ; k++)  {
 800a24a:	4653      	mov	r3, sl
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	d921      	bls.n	800a294 <PxMessagingTask+0x4d4>
 800a250:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a252:	1c4b      	adds	r3, r1, #1
 800a254:	195d      	adds	r5, r3, r5
 800a256:	4bab      	ldr	r3, [pc, #684]	; (800a504 <PxMessagingTask+0x744>)
 800a258:	46a8      	mov	r8, r5
 800a25a:	4498      	add	r8, r3
 800a25c:	2500      	movs	r5, #0
								memcpy(&neighbors2[(cMessage[port-1][shift+k*5])-1][0], &cMessage[port-1][1+shift+k*5], (size_t)(4));
 800a25e:	4bad      	ldr	r3, [pc, #692]	; (800a514 <PxMessagingTask+0x754>)
 800a260:	4699      	mov	r9, r3
 800a262:	4643      	mov	r3, r8
 800a264:	46a0      	mov	r8, r4
 800a266:	9706      	str	r7, [sp, #24]
 800a268:	0017      	movs	r7, r2
 800a26a:	46b2      	mov	sl, r6
 800a26c:	000e      	movs	r6, r1
 800a26e:	001c      	movs	r4, r3
 800a270:	1ba3      	subs	r3, r4, r6
 800a272:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a274:	5c98      	ldrb	r0, [r3, r2]
 800a276:	3801      	subs	r0, #1
 800a278:	0080      	lsls	r0, r0, #2
 800a27a:	4448      	add	r0, r9
 800a27c:	2204      	movs	r2, #4
 800a27e:	0021      	movs	r1, r4
 800a280:	f00a f846 	bl	8014310 <memcpy>
							for (uint8_t k=0 ; k<temp ; k++)  {
 800a284:	3501      	adds	r5, #1
 800a286:	b2ed      	uxtb	r5, r5
 800a288:	3405      	adds	r4, #5
 800a28a:	42af      	cmp	r7, r5
 800a28c:	d8f0      	bhi.n	800a270 <PxMessagingTask+0x4b0>
 800a28e:	4644      	mov	r4, r8
 800a290:	9f06      	ldr	r7, [sp, #24]
 800a292:	4656      	mov	r6, sl
							responseStatus = BOS_OK;
 800a294:	4b9c      	ldr	r3, [pc, #624]	; (800a508 <PxMessagingTask+0x748>)
 800a296:	2200      	movs	r2, #0
 800a298:	701a      	strb	r2, [r3, #0]
							break;
 800a29a:	2300      	movs	r3, #0
 800a29c:	469a      	mov	sl, r3
 800a29e:	e5c8      	b.n	8009e32 <PxMessagingTask+0x72>
 800a2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a2:	18eb      	adds	r3, r5, r3
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	4a97      	ldr	r2, [pc, #604]	; (800a504 <PxMessagingTask+0x744>)
 800a2a8:	4699      	mov	r9, r3
 800a2aa:	4491      	add	r9, r2
							for (uint8_t k=0 ; k<temp ; k++)  {
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	46a0      	mov	r8, r4
 800a2b0:	46b2      	mov	sl, r6
 800a2b2:	464e      	mov	r6, r9
 800a2b4:	46a9      	mov	r9, r5
 800a2b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a2b8:	001c      	movs	r4, r3
 800a2ba:	e002      	b.n	800a2c2 <PxMessagingTask+0x502>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 800a2bc:	3401      	adds	r4, #1
 800a2be:	2c06      	cmp	r4, #6
 800a2c0:	d008      	beq.n	800a2d4 <PxMessagingTask+0x514>
 800a2c2:	b2e0      	uxtb	r0, r4
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 800a2c4:	42a8      	cmp	r0, r5
 800a2c6:	d0f9      	beq.n	800a2bc <PxMessagingTask+0x4fc>
 800a2c8:	f004 fd86 	bl	800edd8 <GetUart>
 800a2cc:	5d31      	ldrb	r1, [r6, r4]
 800a2ce:	f004 fe1b 	bl	800ef08 <SwapUartPins>
 800a2d2:	e7f3      	b.n	800a2bc <PxMessagingTask+0x4fc>
 800a2d4:	4644      	mov	r4, r8
 800a2d6:	464d      	mov	r5, r9
 800a2d8:	4656      	mov	r6, sl
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 800a2da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2dc:	f004 fd7c 	bl	800edd8 <GetUart>
 800a2e0:	4b88      	ldr	r3, [pc, #544]	; (800a504 <PxMessagingTask+0x744>)
 800a2e2:	199b      	adds	r3, r3, r6
 800a2e4:	195d      	adds	r5, r3, r5
 800a2e6:	7aa9      	ldrb	r1, [r5, #10]
 800a2e8:	f004 fe0e 	bl	800ef08 <SwapUartPins>
							break;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	469a      	mov	sl, r3
 800a2f0:	e59f      	b.n	8009e32 <PxMessagingTask+0x72>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 800a2f2:	002a      	movs	r2, r5
 800a2f4:	4b83      	ldr	r3, [pc, #524]	; (800a504 <PxMessagingTask+0x744>)
 800a2f6:	199b      	adds	r3, r3, r6
 800a2f8:	5d5b      	ldrb	r3, [r3, r5]
 800a2fa:	469a      	mov	sl, r3
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d108      	bne.n	800a312 <PxMessagingTask+0x552>
								myID = cMessage[port-1][1+shift];
 800a300:	2238      	movs	r2, #56	; 0x38
 800a302:	4362      	muls	r2, r4
 800a304:	4b7f      	ldr	r3, [pc, #508]	; (800a504 <PxMessagingTask+0x744>)
 800a306:	189b      	adds	r3, r3, r2
 800a308:	195d      	adds	r5, r3, r5
 800a30a:	786a      	ldrb	r2, [r5, #1]
 800a30c:	4b82      	ldr	r3, [pc, #520]	; (800a518 <PxMessagingTask+0x758>)
 800a30e:	701a      	strb	r2, [r3, #0]
 800a310:	e58f      	b.n	8009e32 <PxMessagingTask+0x72>
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 800a312:	2b01      	cmp	r3, #1
 800a314:	d002      	beq.n	800a31c <PxMessagingTask+0x55c>
 800a316:	2300      	movs	r3, #0
 800a318:	469a      	mov	sl, r3
 800a31a:	e58a      	b.n	8009e32 <PxMessagingTask+0x72>
								messageParams[0] = 0;											/* change own ID */
 800a31c:	497c      	ldr	r1, [pc, #496]	; (800a510 <PxMessagingTask+0x750>)
 800a31e:	2500      	movs	r5, #0
 800a320:	700d      	strb	r5, [r1, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 800a322:	2038      	movs	r0, #56	; 0x38
 800a324:	4360      	muls	r0, r4
 800a326:	4b77      	ldr	r3, [pc, #476]	; (800a504 <PxMessagingTask+0x744>)
 800a328:	181b      	adds	r3, r3, r0
 800a32a:	189b      	adds	r3, r3, r2
 800a32c:	785a      	ldrb	r2, [r3, #1]
 800a32e:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 800a330:	7898      	ldrb	r0, [r3, #2]
 800a332:	2303      	movs	r3, #3
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	330d      	adds	r3, #13
 800a338:	002a      	movs	r2, r5
 800a33a:	0029      	movs	r1, r5
 800a33c:	f7ff f836 	bl	80093ac <SendMessageFromPort>
 800a340:	46aa      	mov	sl, r5
 800a342:	e576      	b.n	8009e32 <PxMessagingTask+0x72>
							if (longMessage) {
 800a344:	4b75      	ldr	r3, [pc, #468]	; (800a51c <PxMessagingTask+0x75c>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	4698      	mov	r8, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d014      	beq.n	800a378 <PxMessagingTask+0x5b8>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 800a34e:	4b74      	ldr	r3, [pc, #464]	; (800a520 <PxMessagingTask+0x760>)
 800a350:	4699      	mov	r9, r3
 800a352:	881b      	ldrh	r3, [r3, #0]
 800a354:	4698      	mov	r8, r3
 800a356:	4873      	ldr	r0, [pc, #460]	; (800a524 <PxMessagingTask+0x764>)
 800a358:	4440      	add	r0, r8
 800a35a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a35c:	469c      	mov	ip, r3
 800a35e:	4465      	add	r5, ip
 800a360:	4968      	ldr	r1, [pc, #416]	; (800a504 <PxMessagingTask+0x744>)
 800a362:	1869      	adds	r1, r5, r1
 800a364:	4652      	mov	r2, sl
 800a366:	f009 ffd3 	bl	8014310 <memcpy>
								longMessageLastPtr += numOfParams;
 800a36a:	4645      	mov	r5, r8
 800a36c:	4455      	add	r5, sl
 800a36e:	464b      	mov	r3, r9
 800a370:	801d      	strh	r5, [r3, #0]
 800a372:	2300      	movs	r3, #0
 800a374:	469a      	mov	sl, r3
 800a376:	e55c      	b.n	8009e32 <PxMessagingTask+0x72>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800a378:	4b69      	ldr	r3, [pc, #420]	; (800a520 <PxMessagingTask+0x760>)
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	4a69      	ldr	r2, [pc, #420]	; (800a524 <PxMessagingTask+0x764>)
 800a37e:	4691      	mov	r9, r2
 800a380:	9306      	str	r3, [sp, #24]
 800a382:	0018      	movs	r0, r3
 800a384:	4448      	add	r0, r9
 800a386:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a388:	468c      	mov	ip, r1
 800a38a:	4465      	add	r5, ip
 800a38c:	495d      	ldr	r1, [pc, #372]	; (800a504 <PxMessagingTask+0x744>)
 800a38e:	1869      	adds	r1, r5, r1
 800a390:	4652      	mov	r2, sl
 800a392:	f009 ffbd 	bl	8014310 <memcpy>
								longMessageLastPtr += numOfParams;
 800a396:	9b06      	ldr	r3, [sp, #24]
 800a398:	4453      	add	r3, sl
 800a39a:	b29d      	uxth	r5, r3
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 800a39c:	2116      	movs	r1, #22
 800a39e:	0028      	movs	r0, r5
 800a3a0:	f7f5 fed6 	bl	8000150 <__udivsi3>
 800a3a4:	4b60      	ldr	r3, [pc, #384]	; (800a528 <PxMessagingTask+0x768>)
 800a3a6:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 800a3a8:	002a      	movs	r2, r5
 800a3aa:	4649      	mov	r1, r9
 800a3ac:	485f      	ldr	r0, [pc, #380]	; (800a52c <PxMessagingTask+0x76c>)
 800a3ae:	f009 ffaf 	bl	8014310 <memcpy>
								longMessageLastPtr = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4a5a      	ldr	r2, [pc, #360]	; (800a520 <PxMessagingTask+0x760>)
 800a3b6:	8013      	strh	r3, [r2, #0]
 800a3b8:	46c2      	mov	sl, r8
 800a3ba:	e53a      	b.n	8009e32 <PxMessagingTask+0x72>
							for (uint8_t k=0 ; k<temp ; k++)  {
 800a3bc:	2501      	movs	r5, #1
 800a3be:	2300      	movs	r3, #0
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800a3c0:	2280      	movs	r2, #128	; 0x80
 800a3c2:	0212      	lsls	r2, r2, #8
 800a3c4:	4690      	mov	r8, r2
									messageParams[temp++] = p;
 800a3c6:	46a1      	mov	r9, r4
 800a3c8:	001c      	movs	r4, r3
 800a3ca:	e007      	b.n	800a3dc <PxMessagingTask+0x61c>
 800a3cc:	1c63      	adds	r3, r4, #1
 800a3ce:	4a50      	ldr	r2, [pc, #320]	; (800a510 <PxMessagingTask+0x750>)
 800a3d0:	5515      	strb	r5, [r2, r4]
 800a3d2:	b2dc      	uxtb	r4, r3
								for (p=1 ; p<=NumOfPorts ; p++) {
 800a3d4:	3501      	adds	r5, #1
 800a3d6:	b2ed      	uxtb	r5, r5
 800a3d8:	2d06      	cmp	r5, #6
 800a3da:	d006      	beq.n	800a3ea <PxMessagingTask+0x62a>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800a3dc:	0028      	movs	r0, r5
 800a3de:	f004 fcfb 	bl	800edd8 <GetUart>
 800a3e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a3e4:	4543      	cmp	r3, r8
 800a3e6:	d1f5      	bne.n	800a3d4 <PxMessagingTask+0x614>
 800a3e8:	e7f0      	b.n	800a3cc <PxMessagingTask+0x60c>
 800a3ea:	0023      	movs	r3, r4
 800a3ec:	940b      	str	r4, [sp, #44]	; 0x2c
 800a3ee:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	2114      	movs	r1, #20
 800a3f4:	9807      	ldr	r0, [sp, #28]
 800a3f6:	f7ff fa03 	bl	8009800 <SendMessageToModule>
							break;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	469a      	mov	sl, r3
 800a3fe:	e518      	b.n	8009e32 <PxMessagingTask+0x72>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 800a400:	4b40      	ldr	r3, [pc, #256]	; (800a504 <PxMessagingTask+0x744>)
 800a402:	199b      	adds	r3, r3, r6
 800a404:	5d5a      	ldrb	r2, [r3, r5]
 800a406:	0612      	lsls	r2, r2, #24
 800a408:	195b      	adds	r3, r3, r5
 800a40a:	78d9      	ldrb	r1, [r3, #3]
 800a40c:	1852      	adds	r2, r2, r1
 800a40e:	7859      	ldrb	r1, [r3, #1]
 800a410:	0409      	lsls	r1, r1, #16
 800a412:	1852      	adds	r2, r2, r1
 800a414:	7899      	ldrb	r1, [r3, #2]
 800a416:	0209      	lsls	r1, r1, #8
 800a418:	4690      	mov	r8, r2
 800a41a:	4488      	add	r8, r1
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 800a41c:	791b      	ldrb	r3, [r3, #4]
 800a41e:	2bff      	cmp	r3, #255	; 0xff
 800a420:	d013      	beq.n	800a44a <PxMessagingTask+0x68a>
									for (p=0 ; p<numOfParams ; p++) 
 800a422:	4653      	mov	r3, sl
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00e      	beq.n	800a446 <PxMessagingTask+0x686>
 800a428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a42a:	469c      	mov	ip, r3
 800a42c:	4465      	add	r5, ip
 800a42e:	3504      	adds	r5, #4
 800a430:	4b34      	ldr	r3, [pc, #208]	; (800a504 <PxMessagingTask+0x744>)
 800a432:	46a9      	mov	r9, r5
 800a434:	4499      	add	r9, r3
 800a436:	2500      	movs	r5, #0
 800a438:	9406      	str	r4, [sp, #24]
 800a43a:	0033      	movs	r3, r6
 800a43c:	464e      	mov	r6, r9
 800a43e:	46b9      	mov	r9, r7
 800a440:	4657      	mov	r7, sl
 800a442:	469a      	mov	sl, r3
 800a444:	e012      	b.n	800a46c <PxMessagingTask+0x6ac>
								temp = temp32 = 0;
 800a446:	930b      	str	r3, [sp, #44]	; 0x2c
 800a448:	e4f3      	b.n	8009e32 <PxMessagingTask+0x72>
									for (p=1 ; p<=NumOfPorts ; p++) 
 800a44a:	2501      	movs	r5, #1
										UpdateBaudrate(p, temp32); 
 800a44c:	4641      	mov	r1, r8
 800a44e:	0028      	movs	r0, r5
 800a450:	f004 fd50 	bl	800eef4 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 800a454:	3501      	adds	r5, #1
 800a456:	b2ed      	uxtb	r5, r5
 800a458:	2d06      	cmp	r5, #6
 800a45a:	d1f7      	bne.n	800a44c <PxMessagingTask+0x68c>
								temp = temp32 = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a460:	469a      	mov	sl, r3
 800a462:	e4e6      	b.n	8009e32 <PxMessagingTask+0x72>
									for (p=0 ; p<numOfParams ; p++) 
 800a464:	3501      	adds	r5, #1
 800a466:	b2eb      	uxtb	r3, r5
 800a468:	42bb      	cmp	r3, r7
 800a46a:	d208      	bcs.n	800a47e <PxMessagingTask+0x6be>
										temp = cMessage[port-1][4+shift+p];
 800a46c:	5d74      	ldrb	r4, [r6, r5]
										if (temp>0 && temp<=NumOfPorts)	{
 800a46e:	1e63      	subs	r3, r4, #1
 800a470:	2b04      	cmp	r3, #4
 800a472:	d8f7      	bhi.n	800a464 <PxMessagingTask+0x6a4>
											UpdateBaudrate(temp, temp32); 
 800a474:	4641      	mov	r1, r8
 800a476:	0020      	movs	r0, r4
 800a478:	f004 fd3c 	bl	800eef4 <UpdateBaudrate>
 800a47c:	e7f2      	b.n	800a464 <PxMessagingTask+0x6a4>
 800a47e:	940b      	str	r4, [sp, #44]	; 0x2c
 800a480:	9c06      	ldr	r4, [sp, #24]
 800a482:	464f      	mov	r7, r9
 800a484:	4656      	mov	r6, sl
 800a486:	2300      	movs	r3, #0
 800a488:	469a      	mov	sl, r3
 800a48a:	e4d2      	b.n	8009e32 <PxMessagingTask+0x72>
								SaveToRO();
 800a48c:	f001 f980 	bl	800b790 <SaveToRO>
							SaveEEportsDir();
 800a490:	f7f9 f8ee 	bl	8003670 <SaveEEportsDir>
							indMode = IND_PING;
 800a494:	4b1d      	ldr	r3, [pc, #116]	; (800a50c <PxMessagingTask+0x74c>)
 800a496:	2201      	movs	r2, #1
 800a498:	701a      	strb	r2, [r3, #0]
							break;
 800a49a:	2300      	movs	r3, #0
 800a49c:	469a      	mov	sl, r3
 800a49e:	e4c8      	b.n	8009e32 <PxMessagingTask+0x72>
							ClearEEportsDir();
 800a4a0:	f7f9 f908 	bl	80036b4 <ClearEEportsDir>
							ClearROtopology();
 800a4a4:	f001 fa92 	bl	800b9cc <ClearROtopology>
							osDelay(100);
 800a4a8:	2064      	movs	r0, #100	; 0x64
 800a4aa:	f004 fde2 	bl	800f072 <osDelay>
							indMode = IND_TOPOLOGY;
 800a4ae:	4b17      	ldr	r3, [pc, #92]	; (800a50c <PxMessagingTask+0x74c>)
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	701a      	strb	r2, [r3, #0]
							break;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	469a      	mov	sl, r3
 800a4b8:	e4bb      	b.n	8009e32 <PxMessagingTask+0x72>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a4ba:	f004 fefd 	bl	800f2b8 <FreeRTOS_CLIGetOutputBuffer>
 800a4be:	4681      	mov	r9, r0
							if (dst == BOS_BROADCAST)
 800a4c0:	4643      	mov	r3, r8
 800a4c2:	2bff      	cmp	r3, #255	; 0xff
 800a4c4:	d012      	beq.n	800a4ec <PxMessagingTask+0x72c>
							else if (dst == BOS_MULTICAST)
 800a4c6:	2bfe      	cmp	r3, #254	; 0xfe
 800a4c8:	d038      	beq.n	800a53c <PxMessagingTask+0x77c>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 800a4ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4cc:	469c      	mov	ip, r3
 800a4ce:	4465      	add	r5, ip
 800a4d0:	490c      	ldr	r1, [pc, #48]	; (800a504 <PxMessagingTask+0x744>)
 800a4d2:	1869      	adds	r1, r5, r1
 800a4d4:	4652      	mov	r2, sl
 800a4d6:	4816      	ldr	r0, [pc, #88]	; (800a530 <PxMessagingTask+0x770>)
 800a4d8:	f009 ff1a 	bl	8014310 <memcpy>
								temp = PcPort; PcPort = port;
 800a4dc:	4d15      	ldr	r5, [pc, #84]	; (800a534 <PxMessagingTask+0x774>)
								if (BOS.response == BOS_RESPONSE_ALL)
 800a4de:	4b16      	ldr	r3, [pc, #88]	; (800a538 <PxMessagingTask+0x778>)
 800a4e0:	469a      	mov	sl, r3
 800a4e2:	9406      	str	r4, [sp, #24]
 800a4e4:	46b8      	mov	r8, r7
 800a4e6:	464f      	mov	r7, r9
 800a4e8:	46b1      	mov	r9, r6
 800a4ea:	e035      	b.n	800a558 <PxMessagingTask+0x798>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 800a4ec:	4652      	mov	r2, sl
 800a4ee:	3a01      	subs	r2, #1
 800a4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4f2:	18e9      	adds	r1, r5, r3
 800a4f4:	4d03      	ldr	r5, [pc, #12]	; (800a504 <PxMessagingTask+0x744>)
 800a4f6:	1949      	adds	r1, r1, r5
 800a4f8:	480d      	ldr	r0, [pc, #52]	; (800a530 <PxMessagingTask+0x770>)
 800a4fa:	f009 ff09 	bl	8014310 <memcpy>
 800a4fe:	e7ed      	b.n	800a4dc <PxMessagingTask+0x71c>
 800a500:	20001050 	.word	0x20001050
 800a504:	20000d20 	.word	0x20000d20
 800a508:	200010e0 	.word	0x200010e0
 800a50c:	20000ed2 	.word	0x20000ed2
 800a510:	20000f18 	.word	0x20000f18
 800a514:	20001064 	.word	0x20001064
 800a518:	2000104c 	.word	0x2000104c
 800a51c:	20000ed3 	.word	0x20000ed3
 800a520:	20000ed4 	.word	0x20000ed4
 800a524:	20001530 	.word	0x20001530
 800a528:	2000001c 	.word	0x2000001c
 800a52c:	20000aa8 	.word	0x20000aa8
 800a530:	200014fc 	.word	0x200014fc
 800a534:	20000aa7 	.word	0x20000aa7
 800a538:	20006d18 	.word	0x20006d18
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 800a53c:	4653      	mov	r3, sl
 800a53e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a540:	1a9a      	subs	r2, r3, r2
 800a542:	3a02      	subs	r2, #2
 800a544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a546:	18e9      	adds	r1, r5, r3
 800a548:	4dd8      	ldr	r5, [pc, #864]	; (800a8ac <PxMessagingTask+0xaec>)
 800a54a:	1949      	adds	r1, r1, r5
 800a54c:	48d8      	ldr	r0, [pc, #864]	; (800a8b0 <PxMessagingTask+0xaf0>)
 800a54e:	f009 fedf 	bl	8014310 <memcpy>
 800a552:	e7c3      	b.n	800a4dc <PxMessagingTask+0x71c>
							while( xReturned != pdFALSE );								
 800a554:	2c00      	cmp	r4, #0
 800a556:	d022      	beq.n	800a59e <PxMessagingTask+0x7de>
								temp = PcPort; PcPort = port;
 800a558:	782e      	ldrb	r6, [r5, #0]
 800a55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a55c:	702b      	strb	r3, [r5, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800a55e:	2299      	movs	r2, #153	; 0x99
 800a560:	0092      	lsls	r2, r2, #2
 800a562:	0039      	movs	r1, r7
 800a564:	48d2      	ldr	r0, [pc, #840]	; (800a8b0 <PxMessagingTask+0xaf0>)
 800a566:	f004 fe1d 	bl	800f1a4 <FreeRTOS_CLIProcessCommand>
 800a56a:	0004      	movs	r4, r0
								PcPort = temp;
 800a56c:	702e      	strb	r6, [r5, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 800a56e:	4653      	mov	r3, sl
 800a570:	799b      	ldrb	r3, [r3, #6]
 800a572:	2b60      	cmp	r3, #96	; 0x60
 800a574:	d1ee      	bne.n	800a554 <PxMessagingTask+0x794>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 800a576:	0038      	movs	r0, r7
 800a578:	f7f5 fdce 	bl	8000118 <strlen>
 800a57c:	0002      	movs	r2, r0
 800a57e:	0039      	movs	r1, r7
 800a580:	48cc      	ldr	r0, [pc, #816]	; (800a8b4 <PxMessagingTask+0xaf4>)
 800a582:	f009 fec5 	bl	8014310 <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 800a586:	0038      	movs	r0, r7
 800a588:	f7f5 fdc6 	bl	8000118 <strlen>
 800a58c:	b282      	uxth	r2, r0
 800a58e:	2118      	movs	r1, #24
 800a590:	9807      	ldr	r0, [sp, #28]
 800a592:	f7ff f935 	bl	8009800 <SendMessageToModule>
									osDelay(10); 
 800a596:	200a      	movs	r0, #10
 800a598:	f004 fd6b 	bl	800f072 <osDelay>
 800a59c:	e7da      	b.n	800a554 <PxMessagingTask+0x794>
 800a59e:	9c06      	ldr	r4, [sp, #24]
 800a5a0:	960b      	str	r6, [sp, #44]	; 0x2c
 800a5a2:	4647      	mov	r7, r8
 800a5a4:	464e      	mov	r6, r9
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 800a5a6:	2232      	movs	r2, #50	; 0x32
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	48c1      	ldr	r0, [pc, #772]	; (800a8b0 <PxMessagingTask+0xaf0>)
 800a5ac:	f009 feb9 	bl	8014322 <memset>
							break;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	469a      	mov	sl, r3
 800a5b4:	e43d      	b.n	8009e32 <PxMessagingTask+0x72>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a5b6:	f004 fe7f 	bl	800f2b8 <FreeRTOS_CLIGetOutputBuffer>
 800a5ba:	4680      	mov	r8, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a5bc:	f7f5 fdac 	bl	8000118 <strlen>
 800a5c0:	0002      	movs	r2, r0
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	4640      	mov	r0, r8
 800a5c6:	f009 feac 	bl	8014322 <memset>
							if (longMessage) {
 800a5ca:	4bbb      	ldr	r3, [pc, #748]	; (800a8b8 <PxMessagingTask+0xaf8>)
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	4699      	mov	r9, r3
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d012      	beq.n	800a5fa <PxMessagingTask+0x83a>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800a5d4:	4bb9      	ldr	r3, [pc, #740]	; (800a8bc <PxMessagingTask+0xafc>)
 800a5d6:	4699      	mov	r9, r3
 800a5d8:	8818      	ldrh	r0, [r3, #0]
 800a5da:	4440      	add	r0, r8
 800a5dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5de:	469c      	mov	ip, r3
 800a5e0:	4465      	add	r5, ip
 800a5e2:	49b2      	ldr	r1, [pc, #712]	; (800a8ac <PxMessagingTask+0xaec>)
 800a5e4:	1869      	adds	r1, r5, r1
 800a5e6:	4652      	mov	r2, sl
 800a5e8:	f009 fe92 	bl	8014310 <memcpy>
								longMessageLastPtr += numOfParams;
 800a5ec:	464b      	mov	r3, r9
 800a5ee:	881d      	ldrh	r5, [r3, #0]
 800a5f0:	4455      	add	r5, sl
 800a5f2:	801d      	strh	r5, [r3, #0]
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	469a      	mov	sl, r3
 800a5f8:	e41b      	b.n	8009e32 <PxMessagingTask+0x72>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800a5fa:	4bb0      	ldr	r3, [pc, #704]	; (800a8bc <PxMessagingTask+0xafc>)
 800a5fc:	8818      	ldrh	r0, [r3, #0]
 800a5fe:	4440      	add	r0, r8
 800a600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a602:	469c      	mov	ip, r3
 800a604:	4465      	add	r5, ip
 800a606:	49a9      	ldr	r1, [pc, #676]	; (800a8ac <PxMessagingTask+0xaec>)
 800a608:	1869      	adds	r1, r5, r1
 800a60a:	4652      	mov	r2, sl
 800a60c:	f009 fe80 	bl	8014310 <memcpy>
								longMessageLastPtr = 0;
 800a610:	2100      	movs	r1, #0
 800a612:	4baa      	ldr	r3, [pc, #680]	; (800a8bc <PxMessagingTask+0xafc>)
 800a614:	8019      	strh	r1, [r3, #0]
								responseStatus = BOS_OK;
 800a616:	4baa      	ldr	r3, [pc, #680]	; (800a8c0 <PxMessagingTask+0xb00>)
 800a618:	7019      	strb	r1, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 800a61a:	000b      	movs	r3, r1
 800a61c:	000a      	movs	r2, r1
 800a61e:	48a9      	ldr	r0, [pc, #676]	; (800a8c4 <PxMessagingTask+0xb04>)
 800a620:	6800      	ldr	r0, [r0, #0]
 800a622:	f006 f98f 	bl	8010944 <xTaskGenericNotify>
 800a626:	46ca      	mov	sl, r9
 800a628:	f7ff fc03 	bl	8009e32 <PxMessagingTask+0x72>
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 800a62c:	4ba6      	ldr	r3, [pc, #664]	; (800a8c8 <PxMessagingTask+0xb08>)
 800a62e:	4aa7      	ldr	r2, [pc, #668]	; (800a8cc <PxMessagingTask+0xb0c>)
 800a630:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 800a632:	4ba7      	ldr	r3, [pc, #668]	; (800a8d0 <PxMessagingTask+0xb10>)
 800a634:	2201      	movs	r2, #1
 800a636:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 800a638:	200a      	movs	r0, #10
 800a63a:	f004 fd1a 	bl	800f072 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	4ba4      	ldr	r3, [pc, #656]	; (800a8d4 <PxMessagingTask+0xb14>)
 800a644:	4aa4      	ldr	r2, [pc, #656]	; (800a8d8 <PxMessagingTask+0xb18>)
 800a646:	60da      	str	r2, [r3, #12]
 800a648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a64c:	46c0      	nop			; (mov r8, r8)
 800a64e:	e7fd      	b.n	800a64c <PxMessagingTask+0x88c>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 800a650:	4b96      	ldr	r3, [pc, #600]	; (800a8ac <PxMessagingTask+0xaec>)
 800a652:	4698      	mov	r8, r3
 800a654:	44b0      	add	r8, r6
 800a656:	4643      	mov	r3, r8
 800a658:	5d58      	ldrb	r0, [r3, r5]
 800a65a:	2300      	movs	r3, #0
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	3319      	adds	r3, #25
 800a660:	2200      	movs	r2, #0
 800a662:	2100      	movs	r1, #0
 800a664:	f7fe fea2 	bl	80093ac <SendMessageFromPort>
								osDelay(100);
 800a668:	2064      	movs	r0, #100	; 0x64
 800a66a:	f004 fd02 	bl	800f072 <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 800a66e:	4643      	mov	r3, r8
 800a670:	5d5b      	ldrb	r3, [r3, r5]
 800a672:	4a9a      	ldr	r2, [pc, #616]	; (800a8dc <PxMessagingTask+0xb1c>)
 800a674:	7811      	ldrb	r1, [r2, #0]
 800a676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a678:	9807      	ldr	r0, [sp, #28]
 800a67a:	f7f9 fdf9 	bl	8004270 <remoteBootloaderUpdate>
								break;
 800a67e:	2300      	movs	r3, #0
 800a680:	469a      	mov	sl, r3
 800a682:	f7ff fbd6 	bl	8009e32 <PxMessagingTask+0x72>
							temp = cMessage[port-1][11+shift];
 800a686:	46a8      	mov	r8, r5
 800a688:	230b      	movs	r3, #11
 800a68a:	4699      	mov	r9, r3
 800a68c:	44a9      	add	r9, r5
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800a68e:	4653      	mov	r3, sl
 800a690:	2b0f      	cmp	r3, #15
 800a692:	d011      	beq.n	800a6b8 <PxMessagingTask+0x8f8>
							temp = cMessage[port-1][11+shift];
 800a694:	2238      	movs	r2, #56	; 0x38
 800a696:	4362      	muls	r2, r4
 800a698:	4b84      	ldr	r3, [pc, #528]	; (800a8ac <PxMessagingTask+0xaec>)
 800a69a:	189b      	adds	r3, r3, r2
 800a69c:	464a      	mov	r2, r9
 800a69e:	5c9b      	ldrb	r3, [r3, r2]
 800a6a0:	9306      	str	r3, [sp, #24]
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 800a6a2:	4653      	mov	r3, sl
 800a6a4:	2b11      	cmp	r3, #17
 800a6a6:	d10e      	bne.n	800a6c6 <PxMessagingTask+0x906>
 800a6a8:	2238      	movs	r2, #56	; 0x38
 800a6aa:	4362      	muls	r2, r4
 800a6ac:	4b7f      	ldr	r3, [pc, #508]	; (800a8ac <PxMessagingTask+0xaec>)
 800a6ae:	189b      	adds	r3, r3, r2
 800a6b0:	4443      	add	r3, r8
 800a6b2:	7bdb      	ldrb	r3, [r3, #15]
 800a6b4:	9306      	str	r3, [sp, #24]
 800a6b6:	e006      	b.n	800a6c6 <PxMessagingTask+0x906>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800a6b8:	2238      	movs	r2, #56	; 0x38
 800a6ba:	4362      	muls	r2, r4
 800a6bc:	4b7b      	ldr	r3, [pc, #492]	; (800a8ac <PxMessagingTask+0xaec>)
 800a6be:	189b      	adds	r3, r3, r2
 800a6c0:	195d      	adds	r5, r3, r5
 800a6c2:	7b6b      	ldrb	r3, [r5, #13]
 800a6c4:	9306      	str	r3, [sp, #24]
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800a6c6:	4643      	mov	r3, r8
 800a6c8:	1c58      	adds	r0, r3, #1
 800a6ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800a6cc:	1c9d      	adds	r5, r3, #2
 800a6ce:	950f      	str	r5, [sp, #60]	; 0x3c
 800a6d0:	1cd9      	adds	r1, r3, #3
 800a6d2:	9110      	str	r1, [sp, #64]	; 0x40
 800a6d4:	4b75      	ldr	r3, [pc, #468]	; (800a8ac <PxMessagingTask+0xaec>)
 800a6d6:	199b      	adds	r3, r3, r6
 800a6d8:	4642      	mov	r2, r8
 800a6da:	5c9a      	ldrb	r2, [r3, r2]
 800a6dc:	0612      	lsls	r2, r2, #24
 800a6de:	5c59      	ldrb	r1, [r3, r1]
 800a6e0:	1852      	adds	r2, r2, r1
 800a6e2:	5c19      	ldrb	r1, [r3, r0]
 800a6e4:	0409      	lsls	r1, r1, #16
 800a6e6:	1852      	adds	r2, r2, r1
 800a6e8:	5d59      	ldrb	r1, [r3, r5]
 800a6ea:	0209      	lsls	r1, r1, #8
 800a6ec:	1852      	adds	r2, r2, r1
 800a6ee:	920e      	str	r2, [sp, #56]	; 0x38
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	3204      	adds	r2, #4
 800a6f4:	9211      	str	r2, [sp, #68]	; 0x44
 800a6f6:	2105      	movs	r1, #5
 800a6f8:	4441      	add	r1, r8
 800a6fa:	468c      	mov	ip, r1
 800a6fc:	4641      	mov	r1, r8
 800a6fe:	3106      	adds	r1, #6
 800a700:	4640      	mov	r0, r8
 800a702:	3007      	adds	r0, #7
 800a704:	5c9d      	ldrb	r5, [r3, r2]
 800a706:	062d      	lsls	r5, r5, #24
 800a708:	4662      	mov	r2, ip
 800a70a:	5c9a      	ldrb	r2, [r3, r2]
 800a70c:	0412      	lsls	r2, r2, #16
 800a70e:	18aa      	adds	r2, r5, r2
 800a710:	5c1d      	ldrb	r5, [r3, r0]
 800a712:	1952      	adds	r2, r2, r5
 800a714:	5c5d      	ldrb	r5, [r3, r1]
 800a716:	022d      	lsls	r5, r5, #8
 800a718:	1955      	adds	r5, r2, r5
							if (temp == false)
 800a71a:	9b06      	ldr	r3, [sp, #24]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d15b      	bne.n	800a7d8 <PxMessagingTask+0xa18>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 800a720:	4b62      	ldr	r3, [pc, #392]	; (800a8ac <PxMessagingTask+0xaec>)
 800a722:	199b      	adds	r3, r3, r6
 800a724:	4443      	add	r3, r8
 800a726:	7a5b      	ldrb	r3, [r3, #9]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d007      	beq.n	800a73c <PxMessagingTask+0x97c>
 800a72c:	2138      	movs	r1, #56	; 0x38
 800a72e:	4361      	muls	r1, r4
 800a730:	4a5e      	ldr	r2, [pc, #376]	; (800a8ac <PxMessagingTask+0xaec>)
 800a732:	1852      	adds	r2, r2, r1
 800a734:	4442      	add	r2, r8
 800a736:	7a91      	ldrb	r1, [r2, #10]
 800a738:	2900      	cmp	r1, #0
 800a73a:	d123      	bne.n	800a784 <PxMessagingTask+0x9c4>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 800a73c:	4b5b      	ldr	r3, [pc, #364]	; (800a8ac <PxMessagingTask+0xaec>)
 800a73e:	199b      	adds	r3, r3, r6
 800a740:	464a      	mov	r2, r9
 800a742:	5c9b      	ldrb	r3, [r3, r2]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d007      	beq.n	800a758 <PxMessagingTask+0x998>
 800a748:	2138      	movs	r1, #56	; 0x38
 800a74a:	4361      	muls	r1, r4
 800a74c:	4a57      	ldr	r2, [pc, #348]	; (800a8ac <PxMessagingTask+0xaec>)
 800a74e:	1852      	adds	r2, r2, r1
 800a750:	4442      	add	r2, r8
 800a752:	7b11      	ldrb	r1, [r2, #12]
 800a754:	2900      	cmp	r1, #0
 800a756:	d121      	bne.n	800a79c <PxMessagingTask+0x9dc>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 800a758:	4b54      	ldr	r3, [pc, #336]	; (800a8ac <PxMessagingTask+0xaec>)
 800a75a:	199b      	adds	r3, r3, r6
 800a75c:	4443      	add	r3, r8
 800a75e:	7b5b      	ldrb	r3, [r3, #13]
 800a760:	930b      	str	r3, [sp, #44]	; 0x2c
 800a762:	469a      	mov	sl, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d101      	bne.n	800a76c <PxMessagingTask+0x9ac>
 800a768:	f7ff fb63 	bl	8009e32 <PxMessagingTask+0x72>
 800a76c:	2238      	movs	r2, #56	; 0x38
 800a76e:	4362      	muls	r2, r4
 800a770:	4b4e      	ldr	r3, [pc, #312]	; (800a8ac <PxMessagingTask+0xaec>)
 800a772:	189b      	adds	r3, r3, r2
 800a774:	4443      	add	r3, r8
 800a776:	7b9b      	ldrb	r3, [r3, #14]
 800a778:	469a      	mov	sl, r3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d11a      	bne.n	800a7b4 <PxMessagingTask+0x9f4>
 800a77e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a780:	f7ff fb57 	bl	8009e32 <PxMessagingTask+0x72>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 800a784:	2038      	movs	r0, #56	; 0x38
 800a786:	4360      	muls	r0, r4
 800a788:	4a48      	ldr	r2, [pc, #288]	; (800a8ac <PxMessagingTask+0xaec>)
 800a78a:	1812      	adds	r2, r2, r0
 800a78c:	4442      	add	r2, r8
 800a78e:	7a10      	ldrb	r0, [r2, #8]
 800a790:	9100      	str	r1, [sp, #0]
 800a792:	002a      	movs	r2, r5
 800a794:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a796:	f7fe fcf5 	bl	8009184 <SetupDMAStreams>
 800a79a:	e7cf      	b.n	800a73c <PxMessagingTask+0x97c>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 800a79c:	2038      	movs	r0, #56	; 0x38
 800a79e:	4360      	muls	r0, r4
 800a7a0:	4a42      	ldr	r2, [pc, #264]	; (800a8ac <PxMessagingTask+0xaec>)
 800a7a2:	1812      	adds	r2, r2, r0
 800a7a4:	4442      	add	r2, r8
 800a7a6:	7a10      	ldrb	r0, [r2, #8]
 800a7a8:	9100      	str	r1, [sp, #0]
 800a7aa:	002a      	movs	r2, r5
 800a7ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a7ae:	f7fe fce9 	bl	8009184 <SetupDMAStreams>
 800a7b2:	e7d1      	b.n	800a758 <PxMessagingTask+0x998>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 800a7b4:	2238      	movs	r2, #56	; 0x38
 800a7b6:	4362      	muls	r2, r4
 800a7b8:	4b3c      	ldr	r3, [pc, #240]	; (800a8ac <PxMessagingTask+0xaec>)
 800a7ba:	189b      	adds	r3, r3, r2
 800a7bc:	4443      	add	r3, r8
 800a7be:	7a18      	ldrb	r0, [r3, #8]
 800a7c0:	4653      	mov	r3, sl
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c6:	002a      	movs	r2, r5
 800a7c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a7ca:	f7fe fcdb 	bl	8009184 <SetupDMAStreams>
 800a7ce:	9b06      	ldr	r3, [sp, #24]
 800a7d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7d2:	469a      	mov	sl, r3
 800a7d4:	f7ff fb2d 	bl	8009e32 <PxMessagingTask+0x72>
 800a7d8:	4663      	mov	r3, ip
 800a7da:	9305      	str	r3, [sp, #20]
 800a7dc:	9106      	str	r1, [sp, #24]
 800a7de:	4683      	mov	fp, r0
 800a7e0:	4655      	mov	r5, sl
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 800a7e2:	2338      	movs	r3, #56	; 0x38
 800a7e4:	4363      	muls	r3, r4
 800a7e6:	4e31      	ldr	r6, [pc, #196]	; (800a8ac <PxMessagingTask+0xaec>)
 800a7e8:	18f6      	adds	r6, r6, r3
 800a7ea:	4647      	mov	r7, r8
 800a7ec:	19f7      	adds	r7, r6, r7
 800a7ee:	7a39      	ldrb	r1, [r7, #8]
 800a7f0:	20e4      	movs	r0, #228	; 0xe4
 800a7f2:	f7fd fb01 	bl	8007df8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 800a7f6:	4643      	mov	r3, r8
 800a7f8:	5cf3      	ldrb	r3, [r6, r3]
 800a7fa:	021b      	lsls	r3, r3, #8
 800a7fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7fe:	5cb1      	ldrb	r1, [r6, r2]
 800a800:	18c9      	adds	r1, r1, r3
 800a802:	b289      	uxth	r1, r1
 800a804:	20e5      	movs	r0, #229	; 0xe5
 800a806:	f7fd faf7 	bl	8007df8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 800a80a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a80c:	5cf3      	ldrb	r3, [r6, r3]
 800a80e:	021b      	lsls	r3, r3, #8
 800a810:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a812:	5cb1      	ldrb	r1, [r6, r2]
 800a814:	18c9      	adds	r1, r1, r3
 800a816:	b289      	uxth	r1, r1
 800a818:	20e6      	movs	r0, #230	; 0xe6
 800a81a:	f7fd faed 	bl	8007df8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 800a81e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a820:	5cf3      	ldrb	r3, [r6, r3]
 800a822:	021b      	lsls	r3, r3, #8
 800a824:	9a05      	ldr	r2, [sp, #20]
 800a826:	5cb1      	ldrb	r1, [r6, r2]
 800a828:	18c9      	adds	r1, r1, r3
 800a82a:	b289      	uxth	r1, r1
 800a82c:	20e7      	movs	r0, #231	; 0xe7
 800a82e:	f7fd fae3 	bl	8007df8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 800a832:	9b06      	ldr	r3, [sp, #24]
 800a834:	5cf3      	ldrb	r3, [r6, r3]
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	465a      	mov	r2, fp
 800a83a:	5cb1      	ldrb	r1, [r6, r2]
 800a83c:	18c9      	adds	r1, r1, r3
 800a83e:	b289      	uxth	r1, r1
 800a840:	20e8      	movs	r0, #232	; 0xe8
 800a842:	f7fd fad9 	bl	8007df8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 800a846:	7a7b      	ldrb	r3, [r7, #9]
 800a848:	021b      	lsls	r3, r3, #8
 800a84a:	7ab9      	ldrb	r1, [r7, #10]
 800a84c:	18c9      	adds	r1, r1, r3
 800a84e:	b289      	uxth	r1, r1
 800a850:	20e9      	movs	r0, #233	; 0xe9
 800a852:	f7fd fad1 	bl	8007df8 <EE_WriteVariable>
								if (numOfParams == 19)
 800a856:	2d13      	cmp	r5, #19
 800a858:	d00a      	beq.n	800a870 <PxMessagingTask+0xab0>
								if (numOfParams == 21)
 800a85a:	2d15      	cmp	r5, #21
 800a85c:	d017      	beq.n	800a88e <PxMessagingTask+0xace>
  __ASM volatile ("dsb 0xF":::"memory");
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	4b1c      	ldr	r3, [pc, #112]	; (800a8d4 <PxMessagingTask+0xb14>)
 800a864:	4a1c      	ldr	r2, [pc, #112]	; (800a8d8 <PxMessagingTask+0xb18>)
 800a866:	60da      	str	r2, [r3, #12]
 800a868:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a86c:	46c0      	nop			; (mov r8, r8)
 800a86e:	e7fd      	b.n	800a86c <PxMessagingTask+0xaac>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 800a870:	2338      	movs	r3, #56	; 0x38
 800a872:	4363      	muls	r3, r4
 800a874:	4c0d      	ldr	r4, [pc, #52]	; (800a8ac <PxMessagingTask+0xaec>)
 800a876:	18e4      	adds	r4, r4, r3
 800a878:	464b      	mov	r3, r9
 800a87a:	5ce3      	ldrb	r3, [r4, r3]
 800a87c:	021b      	lsls	r3, r3, #8
 800a87e:	4444      	add	r4, r8
 800a880:	7b21      	ldrb	r1, [r4, #12]
 800a882:	18c9      	adds	r1, r1, r3
 800a884:	b289      	uxth	r1, r1
 800a886:	20ea      	movs	r0, #234	; 0xea
 800a888:	f7fd fab6 	bl	8007df8 <EE_WriteVariable>
								if (numOfParams == 21)
 800a88c:	e7e7      	b.n	800a85e <PxMessagingTask+0xa9e>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 800a88e:	2338      	movs	r3, #56	; 0x38
 800a890:	435c      	muls	r4, r3
 800a892:	4b06      	ldr	r3, [pc, #24]	; (800a8ac <PxMessagingTask+0xaec>)
 800a894:	191b      	adds	r3, r3, r4
 800a896:	4443      	add	r3, r8
 800a898:	7b5a      	ldrb	r2, [r3, #13]
 800a89a:	0212      	lsls	r2, r2, #8
 800a89c:	7b99      	ldrb	r1, [r3, #14]
 800a89e:	1889      	adds	r1, r1, r2
 800a8a0:	b289      	uxth	r1, r1
 800a8a2:	20eb      	movs	r0, #235	; 0xeb
 800a8a4:	f7fd faa8 	bl	8007df8 <EE_WriteVariable>
 800a8a8:	e7d9      	b.n	800a85e <PxMessagingTask+0xa9e>
 800a8aa:	46c0      	nop			; (mov r8, r8)
 800a8ac:	20000d20 	.word	0x20000d20
 800a8b0:	200014fc 	.word	0x200014fc
 800a8b4:	20000f18 	.word	0x20000f18
 800a8b8:	20000ed3 	.word	0x20000ed3
 800a8bc:	20000ed4 	.word	0x20000ed4
 800a8c0:	200010e0 	.word	0x200010e0
 800a8c4:	20001480 	.word	0x20001480
 800a8c8:	20007ff0 	.word	0x20007ff0
 800a8cc:	deadbeef 	.word	0xdeadbeef
 800a8d0:	20000ed2 	.word	0x20000ed2
 800a8d4:	e000ed00 	.word	0xe000ed00
 800a8d8:	05fa0004 	.word	0x05fa0004
 800a8dc:	2000104c 	.word	0x2000104c
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a8e0:	49f2      	ldr	r1, [pc, #968]	; (800acac <PxMessagingTask+0xeec>)
 800a8e2:	1989      	adds	r1, r1, r6
 800a8e4:	194b      	adds	r3, r1, r5
 800a8e6:	7a9a      	ldrb	r2, [r3, #10]
 800a8e8:	4691      	mov	r9, r2
 800a8ea:	7ada      	ldrb	r2, [r3, #11]
 800a8ec:	4690      	mov	r8, r2
 800a8ee:	4af0      	ldr	r2, [pc, #960]	; (800acb0 <PxMessagingTask+0xef0>)
 800a8f0:	7812      	ldrb	r2, [r2, #0]
 800a8f2:	4694      	mov	ip, r2
 800a8f4:	7a5a      	ldrb	r2, [r3, #9]
 800a8f6:	9206      	str	r2, [sp, #24]
 800a8f8:	7b1a      	ldrb	r2, [r3, #12]
 800a8fa:	1e50      	subs	r0, r2, #1
 800a8fc:	4182      	sbcs	r2, r0
 800a8fe:	9203      	str	r2, [sp, #12]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800a900:	791a      	ldrb	r2, [r3, #4]
 800a902:	0612      	lsls	r2, r2, #24
 800a904:	4692      	mov	sl, r2
 800a906:	795a      	ldrb	r2, [r3, #5]
 800a908:	0412      	lsls	r2, r2, #16
 800a90a:	4452      	add	r2, sl
 800a90c:	79d8      	ldrb	r0, [r3, #7]
 800a90e:	4682      	mov	sl, r0
 800a910:	4452      	add	r2, sl
 800a912:	7998      	ldrb	r0, [r3, #6]
 800a914:	0200      	lsls	r0, r0, #8
 800a916:	4682      	mov	sl, r0
 800a918:	4452      	add	r2, sl
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a91a:	9202      	str	r2, [sp, #8]
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800a91c:	5d4a      	ldrb	r2, [r1, r5]
 800a91e:	0612      	lsls	r2, r2, #24
 800a920:	78d9      	ldrb	r1, [r3, #3]
 800a922:	1852      	adds	r2, r2, r1
 800a924:	7859      	ldrb	r1, [r3, #1]
 800a926:	0409      	lsls	r1, r1, #16
 800a928:	1852      	adds	r2, r2, r1
 800a92a:	7899      	ldrb	r1, [r3, #2]
 800a92c:	0209      	lsls	r1, r1, #8
 800a92e:	1852      	adds	r2, r2, r1
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a930:	9201      	str	r2, [sp, #4]
 800a932:	7a1b      	ldrb	r3, [r3, #8]
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	464b      	mov	r3, r9
 800a938:	4642      	mov	r2, r8
 800a93a:	4661      	mov	r1, ip
 800a93c:	9806      	ldr	r0, [sp, #24]
 800a93e:	f7fe ff85 	bl	800984c <StartScastDMAStream>
							break;								
 800a942:	2300      	movs	r3, #0
 800a944:	469a      	mov	sl, r3
 800a946:	f7ff fa74 	bl	8009e32 <PxMessagingTask+0x72>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 800a94a:	4bd8      	ldr	r3, [pc, #864]	; (800acac <PxMessagingTask+0xeec>)
 800a94c:	199b      	adds	r3, r3, r6
 800a94e:	5d5b      	ldrb	r3, [r3, r5]
 800a950:	469a      	mov	sl, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d000      	beq.n	800a958 <PxMessagingTask+0xb98>
 800a956:	e07f      	b.n	800aa58 <PxMessagingTask+0xc98>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a958:	2238      	movs	r2, #56	; 0x38
 800a95a:	4362      	muls	r2, r4
 800a95c:	4bd3      	ldr	r3, [pc, #844]	; (800acac <PxMessagingTask+0xeec>)
 800a95e:	189b      	adds	r3, r3, r2
 800a960:	195d      	adds	r5, r3, r5
 800a962:	78ab      	ldrb	r3, [r5, #2]
 800a964:	061b      	lsls	r3, r3, #24
 800a966:	78ea      	ldrb	r2, [r5, #3]
 800a968:	0412      	lsls	r2, r2, #16
 800a96a:	189b      	adds	r3, r3, r2
 800a96c:	796a      	ldrb	r2, [r5, #5]
 800a96e:	189b      	adds	r3, r3, r2
 800a970:	792a      	ldrb	r2, [r5, #4]
 800a972:	0212      	lsls	r2, r2, #8
 800a974:	189b      	adds	r3, r3, r2
									switch (cMessage[port-1][1+shift])											// requested format
 800a976:	786a      	ldrb	r2, [r5, #1]
 800a978:	3a01      	subs	r2, #1
 800a97a:	b2d1      	uxtb	r1, r2
 800a97c:	2907      	cmp	r1, #7
 800a97e:	d901      	bls.n	800a984 <PxMessagingTask+0xbc4>
 800a980:	f7ff fa52 	bl	8009e28 <PxMessagingTask+0x68>
 800a984:	b2d2      	uxtb	r2, r2
 800a986:	0092      	lsls	r2, r2, #2
 800a988:	49ca      	ldr	r1, [pc, #808]	; (800acb4 <PxMessagingTask+0xef4>)
 800a98a:	588a      	ldr	r2, [r1, r2]
 800a98c:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 800a98e:	781a      	ldrb	r2, [r3, #0]
 800a990:	4bc9      	ldr	r3, [pc, #804]	; (800acb8 <PxMessagingTask+0xef8>)
 800a992:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a994:	2201      	movs	r2, #1
 800a996:	211f      	movs	r1, #31
 800a998:	9807      	ldr	r0, [sp, #28]
 800a99a:	f7fe ff31 	bl	8009800 <SendMessageToModule>
 800a99e:	f7ff fa48 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[0] = *(__IO int8_t *)temp32; 
 800a9a2:	781a      	ldrb	r2, [r3, #0]
 800a9a4:	4bc4      	ldr	r3, [pc, #784]	; (800acb8 <PxMessagingTask+0xef8>)
 800a9a6:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	211f      	movs	r1, #31
 800a9ac:	9807      	ldr	r0, [sp, #28]
 800a9ae:	f7fe ff27 	bl	8009800 <SendMessageToModule>
 800a9b2:	f7ff fa3e 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 800a9b6:	8819      	ldrh	r1, [r3, #0]
 800a9b8:	4abf      	ldr	r2, [pc, #764]	; (800acb8 <PxMessagingTask+0xef8>)
 800a9ba:	7011      	strb	r1, [r2, #0]
 800a9bc:	881b      	ldrh	r3, [r3, #0]
 800a9be:	0a1b      	lsrs	r3, r3, #8
 800a9c0:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	211f      	movs	r1, #31
 800a9c6:	9807      	ldr	r0, [sp, #28]
 800a9c8:	f7fe ff1a 	bl	8009800 <SendMessageToModule>
 800a9cc:	f7ff fa31 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a9d0:	8819      	ldrh	r1, [r3, #0]
 800a9d2:	4ab9      	ldr	r2, [pc, #740]	; (800acb8 <PxMessagingTask+0xef8>)
 800a9d4:	7011      	strb	r1, [r2, #0]
 800a9d6:	881b      	ldrh	r3, [r3, #0]
 800a9d8:	b21b      	sxth	r3, r3
 800a9da:	121b      	asrs	r3, r3, #8
 800a9dc:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a9de:	2202      	movs	r2, #2
 800a9e0:	211f      	movs	r1, #31
 800a9e2:	9807      	ldr	r0, [sp, #28]
 800a9e4:	f7fe ff0c 	bl	8009800 <SendMessageToModule>
 800a9e8:	f7ff fa23 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a9ec:	6819      	ldr	r1, [r3, #0]
 800a9ee:	4ab2      	ldr	r2, [pc, #712]	; (800acb8 <PxMessagingTask+0xef8>)
 800a9f0:	7011      	strb	r1, [r2, #0]
 800a9f2:	6819      	ldr	r1, [r3, #0]
 800a9f4:	0a09      	lsrs	r1, r1, #8
 800a9f6:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a9f8:	6819      	ldr	r1, [r3, #0]
 800a9fa:	0c09      	lsrs	r1, r1, #16
 800a9fc:	7091      	strb	r1, [r2, #2]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	0e1b      	lsrs	r3, r3, #24
 800aa02:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 800aa04:	2204      	movs	r2, #4
 800aa06:	211f      	movs	r1, #31
 800aa08:	9807      	ldr	r0, [sp, #28]
 800aa0a:	f7fe fef9 	bl	8009800 <SendMessageToModule>
 800aa0e:	f7ff fa10 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800aa12:	6819      	ldr	r1, [r3, #0]
 800aa14:	4aa8      	ldr	r2, [pc, #672]	; (800acb8 <PxMessagingTask+0xef8>)
 800aa16:	7011      	strb	r1, [r2, #0]
 800aa18:	6819      	ldr	r1, [r3, #0]
 800aa1a:	1209      	asrs	r1, r1, #8
 800aa1c:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800aa1e:	6819      	ldr	r1, [r3, #0]
 800aa20:	1409      	asrs	r1, r1, #16
 800aa22:	7091      	strb	r1, [r2, #2]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	161b      	asrs	r3, r3, #24
 800aa28:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 800aa2a:	2204      	movs	r2, #4
 800aa2c:	211f      	movs	r1, #31
 800aa2e:	9807      	ldr	r0, [sp, #28]
 800aa30:	f7fe fee6 	bl	8009800 <SendMessageToModule>
 800aa34:	f7ff f9fd 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 800aa38:	7819      	ldrb	r1, [r3, #0]
 800aa3a:	4a9f      	ldr	r2, [pc, #636]	; (800acb8 <PxMessagingTask+0xef8>)
 800aa3c:	7011      	strb	r1, [r2, #0]
 800aa3e:	7859      	ldrb	r1, [r3, #1]
 800aa40:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 800aa42:	7899      	ldrb	r1, [r3, #2]
 800aa44:	7091      	strb	r1, [r2, #2]
 800aa46:	78db      	ldrb	r3, [r3, #3]
 800aa48:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 800aa4a:	2208      	movs	r2, #8
 800aa4c:	211f      	movs	r1, #31
 800aa4e:	9807      	ldr	r0, [sp, #28]
 800aa50:	f7fe fed6 	bl	8009800 <SendMessageToModule>
 800aa54:	f7ff f9ed 	bl	8009e32 <PxMessagingTask+0x72>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d01d      	beq.n	800aa98 <PxMessagingTask+0xcd8>
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 800aa5c:	d801      	bhi.n	800aa62 <PxMessagingTask+0xca2>
 800aa5e:	f000 fca3 	bl	800b3a8 <PxMessagingTask+0x15e8>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 800aa62:	001d      	movs	r5, r3
 800aa64:	3d04      	subs	r5, #4
 800aa66:	00ad      	lsls	r5, r5, #2
 800aa68:	4b94      	ldr	r3, [pc, #592]	; (800acbc <PxMessagingTask+0xefc>)
 800aa6a:	58ea      	ldr	r2, [r5, r3]
 800aa6c:	250f      	movs	r5, #15
 800aa6e:	4015      	ands	r5, r2
 800aa70:	46aa      	mov	sl, r5
 800aa72:	4b91      	ldr	r3, [pc, #580]	; (800acb8 <PxMessagingTask+0xef8>)
 800aa74:	701d      	strb	r5, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 800aa76:	d100      	bne.n	800aa7a <PxMessagingTask+0xcba>
 800aa78:	e0af      	b.n	800abda <PxMessagingTask+0xe1a>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800aa7a:	0c12      	lsrs	r2, r2, #16
 800aa7c:	2380      	movs	r3, #128	; 0x80
 800aa7e:	059b      	lsls	r3, r3, #22
 800aa80:	18d3      	adds	r3, r2, r3
										switch (messageParams[0])											// requested format
 800aa82:	3d01      	subs	r5, #1
 800aa84:	b2e9      	uxtb	r1, r5
 800aa86:	2907      	cmp	r1, #7
 800aa88:	d901      	bls.n	800aa8e <PxMessagingTask+0xcce>
 800aa8a:	f000 fc7c 	bl	800b386 <PxMessagingTask+0x15c6>
 800aa8e:	b2ed      	uxtb	r5, r5
 800aa90:	00ad      	lsls	r5, r5, #2
 800aa92:	498b      	ldr	r1, [pc, #556]	; (800acc0 <PxMessagingTask+0xf00>)
 800aa94:	5949      	ldr	r1, [r1, r5]
 800aa96:	468f      	mov	pc, r1
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 800aa98:	4b84      	ldr	r3, [pc, #528]	; (800acac <PxMessagingTask+0xeec>)
 800aa9a:	2038      	movs	r0, #56	; 0x38
 800aa9c:	4360      	muls	r0, r4
 800aa9e:	1818      	adds	r0, r3, r0
 800aaa0:	1841      	adds	r1, r0, r1
 800aaa2:	3901      	subs	r1, #1
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	7008      	strb	r0, [r1, #0]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 800aaa8:	1c68      	adds	r0, r5, #1
 800aaaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaac:	4694      	mov	ip, r2
 800aaae:	4460      	add	r0, ip
 800aab0:	18c0      	adds	r0, r0, r3
 800aab2:	f7f9 f9f3 	bl	8003e9c <IsModuleParameter>
 800aab6:	1e05      	subs	r5, r0, #0
 800aab8:	900b      	str	r0, [sp, #44]	; 0x2c
									if (temp == 0) {																					// Parameter does not exist
 800aaba:	d013      	beq.n	800aae4 <PxMessagingTask+0xd24>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 800aabc:	3d01      	subs	r5, #1
 800aabe:	4a81      	ldr	r2, [pc, #516]	; (800acc4 <PxMessagingTask+0xf04>)
 800aac0:	230c      	movs	r3, #12
 800aac2:	435d      	muls	r5, r3
 800aac4:	58ab      	ldr	r3, [r5, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 800aac6:	1952      	adds	r2, r2, r5
 800aac8:	7912      	ldrb	r2, [r2, #4]
 800aaca:	497b      	ldr	r1, [pc, #492]	; (800acb8 <PxMessagingTask+0xef8>)
 800aacc:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 800aace:	3a01      	subs	r2, #1
 800aad0:	b2d1      	uxtb	r1, r2
 800aad2:	2907      	cmp	r1, #7
 800aad4:	d901      	bls.n	800aada <PxMessagingTask+0xd1a>
 800aad6:	f000 fc52 	bl	800b37e <PxMessagingTask+0x15be>
 800aada:	b2d2      	uxtb	r2, r2
 800aadc:	0092      	lsls	r2, r2, #2
 800aade:	497a      	ldr	r1, [pc, #488]	; (800acc8 <PxMessagingTask+0xf08>)
 800aae0:	588a      	ldr	r2, [r1, r2]
 800aae2:	4697      	mov	pc, r2
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800aae4:	2201      	movs	r2, #1
 800aae6:	211f      	movs	r1, #31
 800aae8:	9807      	ldr	r0, [sp, #28]
 800aaea:	f7fe fe89 	bl	8009800 <SendMessageToModule>
 800aaee:	46aa      	mov	sl, r5
 800aaf0:	f7ff f99f 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[1] = *(__IO uint8_t *)temp32; 
 800aaf4:	781a      	ldrb	r2, [r3, #0]
 800aaf6:	4b70      	ldr	r3, [pc, #448]	; (800acb8 <PxMessagingTask+0xef8>)
 800aaf8:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800aafa:	2202      	movs	r2, #2
 800aafc:	211f      	movs	r1, #31
 800aafe:	9807      	ldr	r0, [sp, #28]
 800ab00:	f7fe fe7e 	bl	8009800 <SendMessageToModule>
 800ab04:	2300      	movs	r3, #0
 800ab06:	469a      	mov	sl, r3
 800ab08:	f7ff f993 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[1] = *(__IO int8_t *)temp32; 
 800ab0c:	781a      	ldrb	r2, [r3, #0]
 800ab0e:	4b6a      	ldr	r3, [pc, #424]	; (800acb8 <PxMessagingTask+0xef8>)
 800ab10:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800ab12:	2202      	movs	r2, #2
 800ab14:	211f      	movs	r1, #31
 800ab16:	9807      	ldr	r0, [sp, #28]
 800ab18:	f7fe fe72 	bl	8009800 <SendMessageToModule>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	469a      	mov	sl, r3
 800ab20:	f7ff f987 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800ab24:	8819      	ldrh	r1, [r3, #0]
 800ab26:	4a64      	ldr	r2, [pc, #400]	; (800acb8 <PxMessagingTask+0xef8>)
 800ab28:	7051      	strb	r1, [r2, #1]
 800ab2a:	881b      	ldrh	r3, [r3, #0]
 800ab2c:	0a1b      	lsrs	r3, r3, #8
 800ab2e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800ab30:	2203      	movs	r2, #3
 800ab32:	211f      	movs	r1, #31
 800ab34:	9807      	ldr	r0, [sp, #28]
 800ab36:	f7fe fe63 	bl	8009800 <SendMessageToModule>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	469a      	mov	sl, r3
 800ab3e:	f7ff f978 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800ab42:	8819      	ldrh	r1, [r3, #0]
 800ab44:	4a5c      	ldr	r2, [pc, #368]	; (800acb8 <PxMessagingTask+0xef8>)
 800ab46:	7051      	strb	r1, [r2, #1]
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	b21b      	sxth	r3, r3
 800ab4c:	121b      	asrs	r3, r3, #8
 800ab4e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800ab50:	2203      	movs	r2, #3
 800ab52:	211f      	movs	r1, #31
 800ab54:	9807      	ldr	r0, [sp, #28]
 800ab56:	f7fe fe53 	bl	8009800 <SendMessageToModule>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	469a      	mov	sl, r3
 800ab5e:	f7ff f968 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800ab62:	6819      	ldr	r1, [r3, #0]
 800ab64:	4a54      	ldr	r2, [pc, #336]	; (800acb8 <PxMessagingTask+0xef8>)
 800ab66:	7051      	strb	r1, [r2, #1]
 800ab68:	6819      	ldr	r1, [r3, #0]
 800ab6a:	0a09      	lsrs	r1, r1, #8
 800ab6c:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800ab6e:	6819      	ldr	r1, [r3, #0]
 800ab70:	0c09      	lsrs	r1, r1, #16
 800ab72:	70d1      	strb	r1, [r2, #3]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	0e1b      	lsrs	r3, r3, #24
 800ab78:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800ab7a:	2205      	movs	r2, #5
 800ab7c:	211f      	movs	r1, #31
 800ab7e:	9807      	ldr	r0, [sp, #28]
 800ab80:	f7fe fe3e 	bl	8009800 <SendMessageToModule>
 800ab84:	2300      	movs	r3, #0
 800ab86:	469a      	mov	sl, r3
 800ab88:	f7ff f953 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800ab8c:	6819      	ldr	r1, [r3, #0]
 800ab8e:	4a4a      	ldr	r2, [pc, #296]	; (800acb8 <PxMessagingTask+0xef8>)
 800ab90:	7051      	strb	r1, [r2, #1]
 800ab92:	6819      	ldr	r1, [r3, #0]
 800ab94:	1209      	asrs	r1, r1, #8
 800ab96:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800ab98:	6819      	ldr	r1, [r3, #0]
 800ab9a:	1409      	asrs	r1, r1, #16
 800ab9c:	70d1      	strb	r1, [r2, #3]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	161b      	asrs	r3, r3, #24
 800aba2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800aba4:	2205      	movs	r2, #5
 800aba6:	211f      	movs	r1, #31
 800aba8:	9807      	ldr	r0, [sp, #28]
 800abaa:	f7fe fe29 	bl	8009800 <SendMessageToModule>
 800abae:	2300      	movs	r3, #0
 800abb0:	469a      	mov	sl, r3
 800abb2:	f7ff f93e 	bl	8009e32 <PxMessagingTask+0x72>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 800abb6:	7819      	ldrb	r1, [r3, #0]
 800abb8:	4a3f      	ldr	r2, [pc, #252]	; (800acb8 <PxMessagingTask+0xef8>)
 800abba:	7051      	strb	r1, [r2, #1]
 800abbc:	7859      	ldrb	r1, [r3, #1]
 800abbe:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800abc0:	7899      	ldrb	r1, [r3, #2]
 800abc2:	70d1      	strb	r1, [r2, #3]
 800abc4:	78db      	ldrb	r3, [r3, #3]
 800abc6:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800abc8:	2209      	movs	r2, #9
 800abca:	211f      	movs	r1, #31
 800abcc:	9807      	ldr	r0, [sp, #28]
 800abce:	f7fe fe17 	bl	8009800 <SendMessageToModule>
 800abd2:	2300      	movs	r3, #0
 800abd4:	469a      	mov	sl, r3
 800abd6:	f7ff f92c 	bl	8009e32 <PxMessagingTask+0x72>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800abda:	2201      	movs	r2, #1
 800abdc:	211f      	movs	r1, #31
 800abde:	9807      	ldr	r0, [sp, #28]
 800abe0:	f7fe fe0e 	bl	8009800 <SendMessageToModule>
 800abe4:	f7ff f925 	bl	8009e32 <PxMessagingTask+0x72>
												messageParams[1] = *(__IO uint8_t *)temp32; 
 800abe8:	781a      	ldrb	r2, [r3, #0]
 800abea:	4b33      	ldr	r3, [pc, #204]	; (800acb8 <PxMessagingTask+0xef8>)
 800abec:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800abee:	2202      	movs	r2, #2
 800abf0:	211f      	movs	r1, #31
 800abf2:	9807      	ldr	r0, [sp, #28]
 800abf4:	f7fe fe04 	bl	8009800 <SendMessageToModule>
 800abf8:	2300      	movs	r3, #0
 800abfa:	469a      	mov	sl, r3
 800abfc:	f7ff f919 	bl	8009e32 <PxMessagingTask+0x72>
												messageParams[1] = *(__IO int8_t *)temp32; 
 800ac00:	781a      	ldrb	r2, [r3, #0]
 800ac02:	4b2d      	ldr	r3, [pc, #180]	; (800acb8 <PxMessagingTask+0xef8>)
 800ac04:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800ac06:	2202      	movs	r2, #2
 800ac08:	211f      	movs	r1, #31
 800ac0a:	9807      	ldr	r0, [sp, #28]
 800ac0c:	f7fe fdf8 	bl	8009800 <SendMessageToModule>
 800ac10:	2300      	movs	r3, #0
 800ac12:	469a      	mov	sl, r3
 800ac14:	f7ff f90d 	bl	8009e32 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800ac18:	8819      	ldrh	r1, [r3, #0]
 800ac1a:	4a27      	ldr	r2, [pc, #156]	; (800acb8 <PxMessagingTask+0xef8>)
 800ac1c:	7051      	strb	r1, [r2, #1]
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	0a1b      	lsrs	r3, r3, #8
 800ac22:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800ac24:	2203      	movs	r2, #3
 800ac26:	211f      	movs	r1, #31
 800ac28:	9807      	ldr	r0, [sp, #28]
 800ac2a:	f7fe fde9 	bl	8009800 <SendMessageToModule>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	469a      	mov	sl, r3
 800ac32:	f7ff f8fe 	bl	8009e32 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800ac36:	8819      	ldrh	r1, [r3, #0]
 800ac38:	4a1f      	ldr	r2, [pc, #124]	; (800acb8 <PxMessagingTask+0xef8>)
 800ac3a:	7051      	strb	r1, [r2, #1]
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	b21b      	sxth	r3, r3
 800ac40:	121b      	asrs	r3, r3, #8
 800ac42:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800ac44:	2203      	movs	r2, #3
 800ac46:	211f      	movs	r1, #31
 800ac48:	9807      	ldr	r0, [sp, #28]
 800ac4a:	f7fe fdd9 	bl	8009800 <SendMessageToModule>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	469a      	mov	sl, r3
 800ac52:	f7ff f8ee 	bl	8009e32 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800ac56:	6819      	ldr	r1, [r3, #0]
 800ac58:	4a17      	ldr	r2, [pc, #92]	; (800acb8 <PxMessagingTask+0xef8>)
 800ac5a:	7051      	strb	r1, [r2, #1]
 800ac5c:	6819      	ldr	r1, [r3, #0]
 800ac5e:	0a09      	lsrs	r1, r1, #8
 800ac60:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800ac62:	6819      	ldr	r1, [r3, #0]
 800ac64:	0c09      	lsrs	r1, r1, #16
 800ac66:	70d1      	strb	r1, [r2, #3]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	0e1b      	lsrs	r3, r3, #24
 800ac6c:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800ac6e:	2205      	movs	r2, #5
 800ac70:	211f      	movs	r1, #31
 800ac72:	9807      	ldr	r0, [sp, #28]
 800ac74:	f7fe fdc4 	bl	8009800 <SendMessageToModule>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	469a      	mov	sl, r3
 800ac7c:	f7ff f8d9 	bl	8009e32 <PxMessagingTask+0x72>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800ac80:	6819      	ldr	r1, [r3, #0]
 800ac82:	4a0d      	ldr	r2, [pc, #52]	; (800acb8 <PxMessagingTask+0xef8>)
 800ac84:	7051      	strb	r1, [r2, #1]
 800ac86:	6819      	ldr	r1, [r3, #0]
 800ac88:	1209      	asrs	r1, r1, #8
 800ac8a:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800ac8c:	6819      	ldr	r1, [r3, #0]
 800ac8e:	1409      	asrs	r1, r1, #16
 800ac90:	70d1      	strb	r1, [r2, #3]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	161b      	asrs	r3, r3, #24
 800ac96:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800ac98:	2205      	movs	r2, #5
 800ac9a:	211f      	movs	r1, #31
 800ac9c:	9807      	ldr	r0, [sp, #28]
 800ac9e:	f7fe fdaf 	bl	8009800 <SendMessageToModule>
 800aca2:	2300      	movs	r3, #0
 800aca4:	469a      	mov	sl, r3
 800aca6:	f7ff f8c4 	bl	8009e32 <PxMessagingTask+0x72>
 800acaa:	46c0      	nop			; (mov r8, r8)
 800acac:	20000d20 	.word	0x20000d20
 800acb0:	2000104c 	.word	0x2000104c
 800acb4:	0801cd7c 	.word	0x0801cd7c
 800acb8:	20000f18 	.word	0x20000f18
 800acbc:	20006ca0 	.word	0x20006ca0
 800acc0:	0801cd9c 	.word	0x0801cd9c
 800acc4:	20000090 	.word	0x20000090
 800acc8:	0801cdbc 	.word	0x0801cdbc
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 800accc:	7819      	ldrb	r1, [r3, #0]
 800acce:	4bd8      	ldr	r3, [pc, #864]	; (800b030 <PxMessagingTask+0x1270>)
 800acd0:	7059      	strb	r1, [r3, #1]
 800acd2:	49d8      	ldr	r1, [pc, #864]	; (800b034 <PxMessagingTask+0x1274>)
 800acd4:	1851      	adds	r1, r2, r1
 800acd6:	7809      	ldrb	r1, [r1, #0]
 800acd8:	7099      	strb	r1, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800acda:	49d7      	ldr	r1, [pc, #860]	; (800b038 <PxMessagingTask+0x1278>)
 800acdc:	1851      	adds	r1, r2, r1
 800acde:	7809      	ldrb	r1, [r1, #0]
 800ace0:	70d9      	strb	r1, [r3, #3]
 800ace2:	49d6      	ldr	r1, [pc, #856]	; (800b03c <PxMessagingTask+0x127c>)
 800ace4:	468c      	mov	ip, r1
 800ace6:	4462      	add	r2, ip
 800ace8:	7812      	ldrb	r2, [r2, #0]
 800acea:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800acec:	2209      	movs	r2, #9
 800acee:	211f      	movs	r1, #31
 800acf0:	9807      	ldr	r0, [sp, #28]
 800acf2:	f7fe fd85 	bl	8009800 <SendMessageToModule>
 800acf6:	2300      	movs	r3, #0
 800acf8:	469a      	mov	sl, r3
 800acfa:	f7ff f89a 	bl	8009e32 <PxMessagingTask+0x72>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800acfe:	4bd0      	ldr	r3, [pc, #832]	; (800b040 <PxMessagingTask+0x1280>)
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	2002      	movs	r0, #2
 800ad06:	4240      	negs	r0, r0
 800ad08:	17c1      	asrs	r1, r0, #31
 800ad0a:	1812      	adds	r2, r2, r0
 800ad0c:	414b      	adcs	r3, r1
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00a      	beq.n	800ad28 <PxMessagingTask+0xf68>
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800ad12:	4bcc      	ldr	r3, [pc, #816]	; (800b044 <PxMessagingTask+0x1284>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	2b10      	cmp	r3, #16
 800ad18:	d100      	bne.n	800ad1c <PxMessagingTask+0xf5c>
 800ad1a:	e349      	b.n	800b3b0 <PxMessagingTask+0x15f0>
 800ad1c:	2500      	movs	r5, #0
 800ad1e:	4bc9      	ldr	r3, [pc, #804]	; (800b044 <PxMessagingTask+0x1284>)
 800ad20:	701d      	strb	r5, [r3, #0]
 800ad22:	46aa      	mov	sl, r5
 800ad24:	f7ff f885 	bl	8009e32 <PxMessagingTask+0x72>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <PxMessagingTask+0xf70>
 800ad2c:	2a01      	cmp	r2, #1
 800ad2e:	d8f0      	bhi.n	800ad12 <PxMessagingTask+0xf52>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 800ad30:	2138      	movs	r1, #56	; 0x38
 800ad32:	4361      	muls	r1, r4
 800ad34:	4ac4      	ldr	r2, [pc, #784]	; (800b048 <PxMessagingTask+0x1288>)
 800ad36:	1852      	adds	r2, r2, r1
 800ad38:	5d52      	ldrb	r2, [r2, r5]
 800ad3a:	4692      	mov	sl, r2
 800ad3c:	4ac3      	ldr	r2, [pc, #780]	; (800b04c <PxMessagingTask+0x128c>)
 800ad3e:	4651      	mov	r1, sl
 800ad40:	7011      	strb	r1, [r2, #0]
								switch (cMessage[port-1][shift])											// Remote format
 800ad42:	2908      	cmp	r1, #8
 800ad44:	d8e5      	bhi.n	800ad12 <PxMessagingTask+0xf52>
 800ad46:	008a      	lsls	r2, r1, #2
 800ad48:	49c1      	ldr	r1, [pc, #772]	; (800b050 <PxMessagingTask+0x1290>)
 800ad4a:	588a      	ldr	r2, [r1, r2]
 800ad4c:	4697      	mov	pc, r2
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 800ad4e:	4bbd      	ldr	r3, [pc, #756]	; (800b044 <PxMessagingTask+0x1284>)
 800ad50:	2210      	movs	r2, #16
 800ad52:	701a      	strb	r2, [r3, #0]
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800ad54:	f7ff f86d 	bl	8009e32 <PxMessagingTask+0x72>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 800ad58:	4ab9      	ldr	r2, [pc, #740]	; (800b040 <PxMessagingTask+0x1280>)
 800ad5a:	2038      	movs	r0, #56	; 0x38
 800ad5c:	4360      	muls	r0, r4
 800ad5e:	49ba      	ldr	r1, [pc, #744]	; (800b048 <PxMessagingTask+0x1288>)
 800ad60:	1809      	adds	r1, r1, r0
 800ad62:	1949      	adds	r1, r1, r5
 800ad64:	784b      	ldrb	r3, [r1, #1]
 800ad66:	6013      	str	r3, [r2, #0]
 800ad68:	2300      	movs	r3, #0
 800ad6a:	6053      	str	r3, [r2, #4]
 800ad6c:	e7d1      	b.n	800ad12 <PxMessagingTask+0xf52>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 800ad6e:	4ab4      	ldr	r2, [pc, #720]	; (800b040 <PxMessagingTask+0x1280>)
 800ad70:	2038      	movs	r0, #56	; 0x38
 800ad72:	4360      	muls	r0, r4
 800ad74:	49b4      	ldr	r1, [pc, #720]	; (800b048 <PxMessagingTask+0x1288>)
 800ad76:	1809      	adds	r1, r1, r0
 800ad78:	1949      	adds	r1, r1, r5
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	56cb      	ldrsb	r3, [r1, r3]
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	17db      	asrs	r3, r3, #31
 800ad82:	6053      	str	r3, [r2, #4]
 800ad84:	e7c5      	b.n	800ad12 <PxMessagingTask+0xf52>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 800ad86:	4aae      	ldr	r2, [pc, #696]	; (800b040 <PxMessagingTask+0x1280>)
 800ad88:	2038      	movs	r0, #56	; 0x38
 800ad8a:	4360      	muls	r0, r4
 800ad8c:	49ae      	ldr	r1, [pc, #696]	; (800b048 <PxMessagingTask+0x1288>)
 800ad8e:	1809      	adds	r1, r1, r0
 800ad90:	1949      	adds	r1, r1, r5
 800ad92:	788b      	ldrb	r3, [r1, #2]
 800ad94:	021b      	lsls	r3, r3, #8
 800ad96:	7849      	ldrb	r1, [r1, #1]
 800ad98:	185b      	adds	r3, r3, r1
 800ad9a:	6013      	str	r3, [r2, #0]
 800ad9c:	17db      	asrs	r3, r3, #31
 800ad9e:	6053      	str	r3, [r2, #4]
 800ada0:	e7b7      	b.n	800ad12 <PxMessagingTask+0xf52>
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 800ada2:	4aa7      	ldr	r2, [pc, #668]	; (800b040 <PxMessagingTask+0x1280>)
 800ada4:	2038      	movs	r0, #56	; 0x38
 800ada6:	4360      	muls	r0, r4
 800ada8:	49a7      	ldr	r1, [pc, #668]	; (800b048 <PxMessagingTask+0x1288>)
 800adaa:	1809      	adds	r1, r1, r0
 800adac:	1949      	adds	r1, r1, r5
 800adae:	788b      	ldrb	r3, [r1, #2]
 800adb0:	021b      	lsls	r3, r3, #8
 800adb2:	7849      	ldrb	r1, [r1, #1]
 800adb4:	185b      	adds	r3, r3, r1
 800adb6:	6013      	str	r3, [r2, #0]
 800adb8:	17db      	asrs	r3, r3, #31
 800adba:	6053      	str	r3, [r2, #4]
 800adbc:	e7a9      	b.n	800ad12 <PxMessagingTask+0xf52>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800adbe:	4aa0      	ldr	r2, [pc, #640]	; (800b040 <PxMessagingTask+0x1280>)
 800adc0:	2038      	movs	r0, #56	; 0x38
 800adc2:	4360      	muls	r0, r4
 800adc4:	49a0      	ldr	r1, [pc, #640]	; (800b048 <PxMessagingTask+0x1288>)
 800adc6:	1809      	adds	r1, r1, r0
 800adc8:	1949      	adds	r1, r1, r5
 800adca:	788b      	ldrb	r3, [r1, #2]
 800adcc:	021b      	lsls	r3, r3, #8
 800adce:	78c8      	ldrb	r0, [r1, #3]
 800add0:	0400      	lsls	r0, r0, #16
 800add2:	181b      	adds	r3, r3, r0
 800add4:	7848      	ldrb	r0, [r1, #1]
 800add6:	181b      	adds	r3, r3, r0
 800add8:	7909      	ldrb	r1, [r1, #4]
 800adda:	0609      	lsls	r1, r1, #24
 800addc:	185b      	adds	r3, r3, r1
 800adde:	6013      	str	r3, [r2, #0]
 800ade0:	2300      	movs	r3, #0
 800ade2:	6053      	str	r3, [r2, #4]
 800ade4:	e795      	b.n	800ad12 <PxMessagingTask+0xf52>
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 800ade6:	4a96      	ldr	r2, [pc, #600]	; (800b040 <PxMessagingTask+0x1280>)
 800ade8:	2038      	movs	r0, #56	; 0x38
 800adea:	4360      	muls	r0, r4
 800adec:	4996      	ldr	r1, [pc, #600]	; (800b048 <PxMessagingTask+0x1288>)
 800adee:	1809      	adds	r1, r1, r0
 800adf0:	1949      	adds	r1, r1, r5
 800adf2:	788b      	ldrb	r3, [r1, #2]
 800adf4:	021b      	lsls	r3, r3, #8
 800adf6:	7848      	ldrb	r0, [r1, #1]
 800adf8:	181b      	adds	r3, r3, r0
 800adfa:	78c8      	ldrb	r0, [r1, #3]
 800adfc:	0400      	lsls	r0, r0, #16
 800adfe:	181b      	adds	r3, r3, r0
 800ae00:	7909      	ldrb	r1, [r1, #4]
 800ae02:	0609      	lsls	r1, r1, #24
 800ae04:	185b      	adds	r3, r3, r1
 800ae06:	6013      	str	r3, [r2, #0]
 800ae08:	17db      	asrs	r3, r3, #31
 800ae0a:	6053      	str	r3, [r2, #4]
 800ae0c:	e781      	b.n	800ad12 <PxMessagingTask+0xf52>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800ae0e:	4a8c      	ldr	r2, [pc, #560]	; (800b040 <PxMessagingTask+0x1280>)
 800ae10:	2038      	movs	r0, #56	; 0x38
 800ae12:	4360      	muls	r0, r4
 800ae14:	498c      	ldr	r1, [pc, #560]	; (800b048 <PxMessagingTask+0x1288>)
 800ae16:	1809      	adds	r1, r1, r0
 800ae18:	1949      	adds	r1, r1, r5
 800ae1a:	788b      	ldrb	r3, [r1, #2]
 800ae1c:	021b      	lsls	r3, r3, #8
 800ae1e:	78c8      	ldrb	r0, [r1, #3]
 800ae20:	0400      	lsls	r0, r0, #16
 800ae22:	181b      	adds	r3, r3, r0
 800ae24:	7848      	ldrb	r0, [r1, #1]
 800ae26:	181b      	adds	r3, r3, r0
 800ae28:	7909      	ldrb	r1, [r1, #4]
 800ae2a:	0609      	lsls	r1, r1, #24
 800ae2c:	185b      	adds	r3, r3, r1
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	2300      	movs	r3, #0
 800ae32:	6053      	str	r3, [r2, #4]
 800ae34:	e76d      	b.n	800ad12 <PxMessagingTask+0xf52>
							responseStatus = BOS_OK;		// Initialize response
 800ae36:	4b83      	ldr	r3, [pc, #524]	; (800b044 <PxMessagingTask+0x1284>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 800ae3c:	46a8      	mov	r8, r5
 800ae3e:	4b82      	ldr	r3, [pc, #520]	; (800b048 <PxMessagingTask+0x1288>)
 800ae40:	199b      	adds	r3, r3, r6
 800ae42:	5d5b      	ldrb	r3, [r3, r5]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d100      	bne.n	800ae4a <PxMessagingTask+0x108a>
 800ae48:	e12e      	b.n	800b0a8 <PxMessagingTask+0x12e8>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 800ae4a:	2b1e      	cmp	r3, #30
 800ae4c:	d900      	bls.n	800ae50 <PxMessagingTask+0x1090>
 800ae4e:	e113      	b.n	800b078 <PxMessagingTask+0x12b8>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 800ae50:	1e5d      	subs	r5, r3, #1
 800ae52:	00aa      	lsls	r2, r5, #2
 800ae54:	4b7f      	ldr	r3, [pc, #508]	; (800b054 <PxMessagingTask+0x1294>)
 800ae56:	58d2      	ldr	r2, [r2, r3]
 800ae58:	0c13      	lsrs	r3, r2, #16
 800ae5a:	2180      	movs	r1, #128	; 0x80
 800ae5c:	0589      	lsls	r1, r1, #22
 800ae5e:	468c      	mov	ip, r1
 800ae60:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 800ae62:	2101      	movs	r1, #1
 800ae64:	4441      	add	r1, r8
 800ae66:	4689      	mov	r9, r1
 800ae68:	2038      	movs	r0, #56	; 0x38
 800ae6a:	4360      	muls	r0, r4
 800ae6c:	4976      	ldr	r1, [pc, #472]	; (800b048 <PxMessagingTask+0x1288>)
 800ae6e:	1809      	adds	r1, r1, r0
 800ae70:	4648      	mov	r0, r9
 800ae72:	5c09      	ldrb	r1, [r1, r0]
 800ae74:	468a      	mov	sl, r1
 800ae76:	3901      	subs	r1, #1
 800ae78:	b2c8      	uxtb	r0, r1
 800ae7a:	2807      	cmp	r0, #7
 800ae7c:	d80d      	bhi.n	800ae9a <PxMessagingTask+0x10da>
 800ae7e:	b2c9      	uxtb	r1, r1
 800ae80:	0089      	lsls	r1, r1, #2
 800ae82:	4875      	ldr	r0, [pc, #468]	; (800b058 <PxMessagingTask+0x1298>)
 800ae84:	5841      	ldr	r1, [r0, r1]
 800ae86:	468f      	mov	pc, r1
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800ae88:	0712      	lsls	r2, r2, #28
 800ae8a:	d022      	beq.n	800aed2 <PxMessagingTask+0x1112>
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 800ae8c:	2138      	movs	r1, #56	; 0x38
 800ae8e:	4361      	muls	r1, r4
 800ae90:	4a6d      	ldr	r2, [pc, #436]	; (800b048 <PxMessagingTask+0x1288>)
 800ae92:	1852      	adds	r2, r2, r1
 800ae94:	4442      	add	r2, r8
 800ae96:	7892      	ldrb	r2, [r2, #2]
 800ae98:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800ae9a:	2338      	movs	r3, #56	; 0x38
 800ae9c:	4363      	muls	r3, r4
 800ae9e:	4a6a      	ldr	r2, [pc, #424]	; (800b048 <PxMessagingTask+0x1288>)
 800aea0:	18d2      	adds	r2, r2, r3
 800aea2:	4643      	mov	r3, r8
 800aea4:	5cd3      	ldrb	r3, [r2, r3]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	0098      	lsls	r0, r3, #2
 800aeaa:	496a      	ldr	r1, [pc, #424]	; (800b054 <PxMessagingTask+0x1294>)
 800aeac:	5841      	ldr	r1, [r0, r1]
 800aeae:	4648      	mov	r0, r9
 800aeb0:	5c12      	ldrb	r2, [r2, r0]
 800aeb2:	200f      	movs	r0, #15
 800aeb4:	4008      	ands	r0, r1
 800aeb6:	4290      	cmp	r0, r2
 800aeb8:	d100      	bne.n	800aebc <PxMessagingTask+0x10fc>
 800aeba:	e0e0      	b.n	800b07e <PxMessagingTask+0x12be>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4867      	ldr	r0, [pc, #412]	; (800b05c <PxMessagingTask+0x129c>)
 800aec0:	4684      	mov	ip, r0
 800aec2:	4462      	add	r2, ip
 800aec4:	400a      	ands	r2, r1
 800aec6:	4963      	ldr	r1, [pc, #396]	; (800b054 <PxMessagingTask+0x1294>)
 800aec8:	505a      	str	r2, [r3, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 800aeca:	4b5e      	ldr	r3, [pc, #376]	; (800b044 <PxMessagingTask+0x1284>)
 800aecc:	2214      	movs	r2, #20
 800aece:	701a      	strb	r2, [r3, #0]
 800aed0:	e0d5      	b.n	800b07e <PxMessagingTask+0x12be>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 800aed2:	2001      	movs	r0, #1
 800aed4:	f008 ffe6 	bl	8013ea4 <malloc>
 800aed8:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800aeda:	d005      	beq.n	800aee8 <PxMessagingTask+0x1128>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800aedc:	00ad      	lsls	r5, r5, #2
 800aede:	0400      	lsls	r0, r0, #16
 800aee0:	4450      	add	r0, sl
 800aee2:	4a5c      	ldr	r2, [pc, #368]	; (800b054 <PxMessagingTask+0x1294>)
 800aee4:	50a8      	str	r0, [r5, r2]
 800aee6:	e7d1      	b.n	800ae8c <PxMessagingTask+0x10cc>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800aee8:	4b56      	ldr	r3, [pc, #344]	; (800b044 <PxMessagingTask+0x1284>)
 800aeea:	2212      	movs	r2, #18
 800aeec:	701a      	strb	r2, [r3, #0]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800aeee:	e7d4      	b.n	800ae9a <PxMessagingTask+0x10da>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800aef0:	0712      	lsls	r2, r2, #28
 800aef2:	d008      	beq.n	800af06 <PxMessagingTask+0x1146>
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 800aef4:	2138      	movs	r1, #56	; 0x38
 800aef6:	4361      	muls	r1, r4
 800aef8:	4a53      	ldr	r2, [pc, #332]	; (800b048 <PxMessagingTask+0x1288>)
 800aefa:	1852      	adds	r2, r2, r1
 800aefc:	4442      	add	r2, r8
 800aefe:	7892      	ldrb	r2, [r2, #2]
 800af00:	b252      	sxtb	r2, r2
 800af02:	701a      	strb	r2, [r3, #0]
 800af04:	e7c9      	b.n	800ae9a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 800af06:	2001      	movs	r0, #1
 800af08:	f008 ffcc 	bl	8013ea4 <malloc>
 800af0c:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800af0e:	d100      	bne.n	800af12 <PxMessagingTask+0x1152>
 800af10:	e25e      	b.n	800b3d0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800af12:	00ad      	lsls	r5, r5, #2
 800af14:	0400      	lsls	r0, r0, #16
 800af16:	3002      	adds	r0, #2
 800af18:	4a4e      	ldr	r2, [pc, #312]	; (800b054 <PxMessagingTask+0x1294>)
 800af1a:	50a8      	str	r0, [r5, r2]
 800af1c:	e7ea      	b.n	800aef4 <PxMessagingTask+0x1134>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800af1e:	0712      	lsls	r2, r2, #28
 800af20:	d00b      	beq.n	800af3a <PxMessagingTask+0x117a>
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 800af22:	2138      	movs	r1, #56	; 0x38
 800af24:	4361      	muls	r1, r4
 800af26:	4a48      	ldr	r2, [pc, #288]	; (800b048 <PxMessagingTask+0x1288>)
 800af28:	1852      	adds	r2, r2, r1
 800af2a:	4442      	add	r2, r8
 800af2c:	78d1      	ldrb	r1, [r2, #3]
 800af2e:	0209      	lsls	r1, r1, #8
 800af30:	7892      	ldrb	r2, [r2, #2]
 800af32:	1852      	adds	r2, r2, r1
 800af34:	b292      	uxth	r2, r2
 800af36:	801a      	strh	r2, [r3, #0]
 800af38:	e7af      	b.n	800ae9a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 800af3a:	2002      	movs	r0, #2
 800af3c:	f008 ffb2 	bl	8013ea4 <malloc>
 800af40:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800af42:	d100      	bne.n	800af46 <PxMessagingTask+0x1186>
 800af44:	e244      	b.n	800b3d0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800af46:	00ad      	lsls	r5, r5, #2
 800af48:	0400      	lsls	r0, r0, #16
 800af4a:	3003      	adds	r0, #3
 800af4c:	4a41      	ldr	r2, [pc, #260]	; (800b054 <PxMessagingTask+0x1294>)
 800af4e:	50a8      	str	r0, [r5, r2]
 800af50:	e7e7      	b.n	800af22 <PxMessagingTask+0x1162>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800af52:	0712      	lsls	r2, r2, #28
 800af54:	d00b      	beq.n	800af6e <PxMessagingTask+0x11ae>
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 800af56:	2138      	movs	r1, #56	; 0x38
 800af58:	4361      	muls	r1, r4
 800af5a:	4a3b      	ldr	r2, [pc, #236]	; (800b048 <PxMessagingTask+0x1288>)
 800af5c:	1852      	adds	r2, r2, r1
 800af5e:	4442      	add	r2, r8
 800af60:	78d1      	ldrb	r1, [r2, #3]
 800af62:	0209      	lsls	r1, r1, #8
 800af64:	7892      	ldrb	r2, [r2, #2]
 800af66:	1852      	adds	r2, r2, r1
 800af68:	b212      	sxth	r2, r2
 800af6a:	801a      	strh	r2, [r3, #0]
 800af6c:	e795      	b.n	800ae9a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 800af6e:	2002      	movs	r0, #2
 800af70:	f008 ff98 	bl	8013ea4 <malloc>
 800af74:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800af76:	d100      	bne.n	800af7a <PxMessagingTask+0x11ba>
 800af78:	e22a      	b.n	800b3d0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800af7a:	00ad      	lsls	r5, r5, #2
 800af7c:	0400      	lsls	r0, r0, #16
 800af7e:	3004      	adds	r0, #4
 800af80:	4a34      	ldr	r2, [pc, #208]	; (800b054 <PxMessagingTask+0x1294>)
 800af82:	50a8      	str	r0, [r5, r2]
 800af84:	e7e7      	b.n	800af56 <PxMessagingTask+0x1196>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800af86:	0712      	lsls	r2, r2, #28
 800af88:	d010      	beq.n	800afac <PxMessagingTask+0x11ec>
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 800af8a:	2238      	movs	r2, #56	; 0x38
 800af8c:	4362      	muls	r2, r4
 800af8e:	492e      	ldr	r1, [pc, #184]	; (800b048 <PxMessagingTask+0x1288>)
 800af90:	1889      	adds	r1, r1, r2
 800af92:	4441      	add	r1, r8
 800af94:	78ca      	ldrb	r2, [r1, #3]
 800af96:	0212      	lsls	r2, r2, #8
 800af98:	7908      	ldrb	r0, [r1, #4]
 800af9a:	0400      	lsls	r0, r0, #16
 800af9c:	1812      	adds	r2, r2, r0
 800af9e:	7888      	ldrb	r0, [r1, #2]
 800afa0:	1812      	adds	r2, r2, r0
 800afa2:	7949      	ldrb	r1, [r1, #5]
 800afa4:	0609      	lsls	r1, r1, #24
 800afa6:	1852      	adds	r2, r2, r1
 800afa8:	601a      	str	r2, [r3, #0]
 800afaa:	e776      	b.n	800ae9a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 800afac:	2004      	movs	r0, #4
 800afae:	f008 ff79 	bl	8013ea4 <malloc>
 800afb2:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800afb4:	d100      	bne.n	800afb8 <PxMessagingTask+0x11f8>
 800afb6:	e20b      	b.n	800b3d0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800afb8:	00ad      	lsls	r5, r5, #2
 800afba:	0400      	lsls	r0, r0, #16
 800afbc:	3005      	adds	r0, #5
 800afbe:	4a25      	ldr	r2, [pc, #148]	; (800b054 <PxMessagingTask+0x1294>)
 800afc0:	50a8      	str	r0, [r5, r2]
 800afc2:	e7e2      	b.n	800af8a <PxMessagingTask+0x11ca>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800afc4:	0712      	lsls	r2, r2, #28
 800afc6:	d010      	beq.n	800afea <PxMessagingTask+0x122a>
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 800afc8:	2238      	movs	r2, #56	; 0x38
 800afca:	4362      	muls	r2, r4
 800afcc:	491e      	ldr	r1, [pc, #120]	; (800b048 <PxMessagingTask+0x1288>)
 800afce:	1889      	adds	r1, r1, r2
 800afd0:	4441      	add	r1, r8
 800afd2:	78ca      	ldrb	r2, [r1, #3]
 800afd4:	0212      	lsls	r2, r2, #8
 800afd6:	7888      	ldrb	r0, [r1, #2]
 800afd8:	1812      	adds	r2, r2, r0
 800afda:	7908      	ldrb	r0, [r1, #4]
 800afdc:	0400      	lsls	r0, r0, #16
 800afde:	1812      	adds	r2, r2, r0
 800afe0:	7949      	ldrb	r1, [r1, #5]
 800afe2:	0609      	lsls	r1, r1, #24
 800afe4:	1852      	adds	r2, r2, r1
 800afe6:	601a      	str	r2, [r3, #0]
 800afe8:	e757      	b.n	800ae9a <PxMessagingTask+0x10da>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 800afea:	2004      	movs	r0, #4
 800afec:	f008 ff5a 	bl	8013ea4 <malloc>
 800aff0:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800aff2:	d100      	bne.n	800aff6 <PxMessagingTask+0x1236>
 800aff4:	e1ec      	b.n	800b3d0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800aff6:	00ad      	lsls	r5, r5, #2
 800aff8:	0400      	lsls	r0, r0, #16
 800affa:	3006      	adds	r0, #6
 800affc:	4a15      	ldr	r2, [pc, #84]	; (800b054 <PxMessagingTask+0x1294>)
 800affe:	50a8      	str	r0, [r5, r2]
 800b000:	e7e2      	b.n	800afc8 <PxMessagingTask+0x1208>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800b002:	0712      	lsls	r2, r2, #28
 800b004:	d02c      	beq.n	800b060 <PxMessagingTask+0x12a0>
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 800b006:	2238      	movs	r2, #56	; 0x38
 800b008:	4362      	muls	r2, r4
 800b00a:	490f      	ldr	r1, [pc, #60]	; (800b048 <PxMessagingTask+0x1288>)
 800b00c:	1889      	adds	r1, r1, r2
 800b00e:	4441      	add	r1, r8
 800b010:	78ca      	ldrb	r2, [r1, #3]
 800b012:	0212      	lsls	r2, r2, #8
 800b014:	7908      	ldrb	r0, [r1, #4]
 800b016:	0400      	lsls	r0, r0, #16
 800b018:	1812      	adds	r2, r2, r0
 800b01a:	7888      	ldrb	r0, [r1, #2]
 800b01c:	1812      	adds	r2, r2, r0
 800b01e:	7949      	ldrb	r1, [r1, #5]
 800b020:	0609      	lsls	r1, r1, #24
 800b022:	1852      	adds	r2, r2, r1
 800b024:	4906      	ldr	r1, [pc, #24]	; (800b040 <PxMessagingTask+0x1280>)
 800b026:	600a      	str	r2, [r1, #0]
 800b028:	2000      	movs	r0, #0
 800b02a:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	e734      	b.n	800ae9a <PxMessagingTask+0x10da>
 800b030:	20000f18 	.word	0x20000f18
 800b034:	20000001 	.word	0x20000001
 800b038:	20000002 	.word	0x20000002
 800b03c:	20000003 	.word	0x20000003
 800b040:	200010d8 	.word	0x200010d8
 800b044:	200010e0 	.word	0x200010e0
 800b048:	20000d20 	.word	0x20000d20
 800b04c:	20000070 	.word	0x20000070
 800b050:	0801cddc 	.word	0x0801cddc
 800b054:	20006ca0 	.word	0x20006ca0
 800b058:	0801ce00 	.word	0x0801ce00
 800b05c:	0000fff0 	.word	0x0000fff0
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 800b060:	2004      	movs	r0, #4
 800b062:	f008 ff1f 	bl	8013ea4 <malloc>
 800b066:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800b068:	d100      	bne.n	800b06c <PxMessagingTask+0x12ac>
 800b06a:	e1b1      	b.n	800b3d0 <PxMessagingTask+0x1610>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800b06c:	00ad      	lsls	r5, r5, #2
 800b06e:	0400      	lsls	r0, r0, #16
 800b070:	3007      	adds	r0, #7
 800b072:	4ae3      	ldr	r2, [pc, #908]	; (800b400 <PxMessagingTask+0x1640>)
 800b074:	50a8      	str	r0, [r5, r2]
 800b076:	e7c6      	b.n	800b006 <PxMessagingTask+0x1246>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 800b078:	4be2      	ldr	r3, [pc, #904]	; (800b404 <PxMessagingTask+0x1644>)
 800b07a:	2213      	movs	r2, #19
 800b07c:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 800b07e:	4be2      	ldr	r3, [pc, #904]	; (800b408 <PxMessagingTask+0x1648>)
 800b080:	799b      	ldrb	r3, [r3, #6]
 800b082:	2240      	movs	r2, #64	; 0x40
 800b084:	4393      	bics	r3, r2
 800b086:	2200      	movs	r2, #0
 800b088:	4692      	mov	sl, r2
 800b08a:	2b20      	cmp	r3, #32
 800b08c:	d001      	beq.n	800b092 <PxMessagingTask+0x12d2>
 800b08e:	f7fe fed0 	bl	8009e32 <PxMessagingTask+0x72>
								messageParams[0] = responseStatus;
 800b092:	4bdc      	ldr	r3, [pc, #880]	; (800b404 <PxMessagingTask+0x1644>)
 800b094:	781a      	ldrb	r2, [r3, #0]
 800b096:	4bdd      	ldr	r3, [pc, #884]	; (800b40c <PxMessagingTask+0x164c>)
 800b098:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 800b09a:	2201      	movs	r2, #1
 800b09c:	2121      	movs	r1, #33	; 0x21
 800b09e:	9807      	ldr	r0, [sp, #28]
 800b0a0:	f7fe fbae 	bl	8009800 <SendMessageToModule>
 800b0a4:	f7fe fec5 	bl	8009e32 <PxMessagingTask+0x72>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800b0a8:	2238      	movs	r2, #56	; 0x38
 800b0aa:	4362      	muls	r2, r4
 800b0ac:	4bd8      	ldr	r3, [pc, #864]	; (800b410 <PxMessagingTask+0x1650>)
 800b0ae:	189b      	adds	r3, r3, r2
 800b0b0:	195d      	adds	r5, r3, r5
 800b0b2:	78ab      	ldrb	r3, [r5, #2]
 800b0b4:	061b      	lsls	r3, r3, #24
 800b0b6:	78ea      	ldrb	r2, [r5, #3]
 800b0b8:	0412      	lsls	r2, r2, #16
 800b0ba:	189b      	adds	r3, r3, r2
 800b0bc:	796a      	ldrb	r2, [r5, #5]
 800b0be:	189b      	adds	r3, r3, r2
 800b0c0:	792d      	ldrb	r5, [r5, #4]
 800b0c2:	022d      	lsls	r5, r5, #8
 800b0c4:	195d      	adds	r5, r3, r5
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 800b0c6:	23e0      	movs	r3, #224	; 0xe0
 800b0c8:	061b      	lsls	r3, r3, #24
 800b0ca:	18ea      	adds	r2, r5, r3
 800b0cc:	2380      	movs	r3, #128	; 0x80
 800b0ce:	021b      	lsls	r3, r3, #8
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d26e      	bcs.n	800b1b2 <PxMessagingTask+0x13f2>
									switch (cMessage[port-1][1+shift])															// Requested format
 800b0d4:	2238      	movs	r2, #56	; 0x38
 800b0d6:	4362      	muls	r2, r4
 800b0d8:	4bcd      	ldr	r3, [pc, #820]	; (800b410 <PxMessagingTask+0x1650>)
 800b0da:	189b      	adds	r3, r3, r2
 800b0dc:	4443      	add	r3, r8
 800b0de:	785b      	ldrb	r3, [r3, #1]
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	2a07      	cmp	r2, #7
 800b0e6:	d8ca      	bhi.n	800b07e <PxMessagingTask+0x12be>
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4ac9      	ldr	r2, [pc, #804]	; (800b414 <PxMessagingTask+0x1654>)
 800b0ee:	58d3      	ldr	r3, [r2, r3]
 800b0f0:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 800b0f2:	2238      	movs	r2, #56	; 0x38
 800b0f4:	4362      	muls	r2, r4
 800b0f6:	4bc6      	ldr	r3, [pc, #792]	; (800b410 <PxMessagingTask+0x1650>)
 800b0f8:	189b      	adds	r3, r3, r2
 800b0fa:	4443      	add	r3, r8
 800b0fc:	799b      	ldrb	r3, [r3, #6]
 800b0fe:	702b      	strb	r3, [r5, #0]
 800b100:	e7bd      	b.n	800b07e <PxMessagingTask+0x12be>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 800b102:	2238      	movs	r2, #56	; 0x38
 800b104:	4362      	muls	r2, r4
 800b106:	4bc2      	ldr	r3, [pc, #776]	; (800b410 <PxMessagingTask+0x1650>)
 800b108:	189b      	adds	r3, r3, r2
 800b10a:	4443      	add	r3, r8
 800b10c:	799b      	ldrb	r3, [r3, #6]
 800b10e:	b25b      	sxtb	r3, r3
 800b110:	702b      	strb	r3, [r5, #0]
 800b112:	e7b4      	b.n	800b07e <PxMessagingTask+0x12be>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 800b114:	2238      	movs	r2, #56	; 0x38
 800b116:	4362      	muls	r2, r4
 800b118:	4bbd      	ldr	r3, [pc, #756]	; (800b410 <PxMessagingTask+0x1650>)
 800b11a:	189b      	adds	r3, r3, r2
 800b11c:	4443      	add	r3, r8
 800b11e:	79da      	ldrb	r2, [r3, #7]
 800b120:	0212      	lsls	r2, r2, #8
 800b122:	799b      	ldrb	r3, [r3, #6]
 800b124:	189b      	adds	r3, r3, r2
 800b126:	b29b      	uxth	r3, r3
 800b128:	802b      	strh	r3, [r5, #0]
 800b12a:	e7a8      	b.n	800b07e <PxMessagingTask+0x12be>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 800b12c:	2238      	movs	r2, #56	; 0x38
 800b12e:	4362      	muls	r2, r4
 800b130:	4bb7      	ldr	r3, [pc, #732]	; (800b410 <PxMessagingTask+0x1650>)
 800b132:	189b      	adds	r3, r3, r2
 800b134:	4443      	add	r3, r8
 800b136:	79da      	ldrb	r2, [r3, #7]
 800b138:	0212      	lsls	r2, r2, #8
 800b13a:	799b      	ldrb	r3, [r3, #6]
 800b13c:	189b      	adds	r3, r3, r2
 800b13e:	b21b      	sxth	r3, r3
 800b140:	802b      	strh	r3, [r5, #0]
 800b142:	e79c      	b.n	800b07e <PxMessagingTask+0x12be>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 800b144:	2338      	movs	r3, #56	; 0x38
 800b146:	4363      	muls	r3, r4
 800b148:	4ab1      	ldr	r2, [pc, #708]	; (800b410 <PxMessagingTask+0x1650>)
 800b14a:	18d2      	adds	r2, r2, r3
 800b14c:	4442      	add	r2, r8
 800b14e:	79d3      	ldrb	r3, [r2, #7]
 800b150:	021b      	lsls	r3, r3, #8
 800b152:	7a11      	ldrb	r1, [r2, #8]
 800b154:	0409      	lsls	r1, r1, #16
 800b156:	185b      	adds	r3, r3, r1
 800b158:	7991      	ldrb	r1, [r2, #6]
 800b15a:	185b      	adds	r3, r3, r1
 800b15c:	7a52      	ldrb	r2, [r2, #9]
 800b15e:	0612      	lsls	r2, r2, #24
 800b160:	189b      	adds	r3, r3, r2
 800b162:	602b      	str	r3, [r5, #0]
 800b164:	e78b      	b.n	800b07e <PxMessagingTask+0x12be>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800b166:	2338      	movs	r3, #56	; 0x38
 800b168:	4363      	muls	r3, r4
 800b16a:	4aa9      	ldr	r2, [pc, #676]	; (800b410 <PxMessagingTask+0x1650>)
 800b16c:	18d2      	adds	r2, r2, r3
 800b16e:	4442      	add	r2, r8
 800b170:	79d3      	ldrb	r3, [r2, #7]
 800b172:	021b      	lsls	r3, r3, #8
 800b174:	7991      	ldrb	r1, [r2, #6]
 800b176:	185b      	adds	r3, r3, r1
 800b178:	7a11      	ldrb	r1, [r2, #8]
 800b17a:	0409      	lsls	r1, r1, #16
 800b17c:	185b      	adds	r3, r3, r1
 800b17e:	7a52      	ldrb	r2, [r2, #9]
 800b180:	0612      	lsls	r2, r2, #24
 800b182:	189b      	adds	r3, r3, r2
 800b184:	602b      	str	r3, [r5, #0]
 800b186:	e77a      	b.n	800b07e <PxMessagingTask+0x12be>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800b188:	2338      	movs	r3, #56	; 0x38
 800b18a:	4363      	muls	r3, r4
 800b18c:	4aa0      	ldr	r2, [pc, #640]	; (800b410 <PxMessagingTask+0x1650>)
 800b18e:	18d2      	adds	r2, r2, r3
 800b190:	4442      	add	r2, r8
 800b192:	79d3      	ldrb	r3, [r2, #7]
 800b194:	021b      	lsls	r3, r3, #8
 800b196:	7a11      	ldrb	r1, [r2, #8]
 800b198:	0409      	lsls	r1, r1, #16
 800b19a:	185b      	adds	r3, r3, r1
 800b19c:	7991      	ldrb	r1, [r2, #6]
 800b19e:	185b      	adds	r3, r3, r1
 800b1a0:	7a52      	ldrb	r2, [r2, #9]
 800b1a2:	0612      	lsls	r2, r2, #24
 800b1a4:	189b      	adds	r3, r3, r2
 800b1a6:	4a9c      	ldr	r2, [pc, #624]	; (800b418 <PxMessagingTask+0x1658>)
 800b1a8:	6013      	str	r3, [r2, #0]
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800b1ae:	602b      	str	r3, [r5, #0]
 800b1b0:	e765      	b.n	800b07e <PxMessagingTask+0x12be>
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 800b1b2:	2280      	movs	r2, #128	; 0x80
 800b1b4:	0292      	lsls	r2, r2, #10
 800b1b6:	23f8      	movs	r3, #248	; 0xf8
 800b1b8:	061b      	lsls	r3, r3, #24
 800b1ba:	18eb      	adds	r3, r5, r3
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d303      	bcc.n	800b1c8 <PxMessagingTask+0x1408>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b1c0:	4b90      	ldr	r3, [pc, #576]	; (800b404 <PxMessagingTask+0x1644>)
 800b1c2:	2215      	movs	r2, #21
 800b1c4:	701a      	strb	r2, [r3, #0]
 800b1c6:	e75a      	b.n	800b07e <PxMessagingTask+0x12be>
									HAL_FLASH_Unlock();
 800b1c8:	f006 fe80 	bl	8011ecc <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 800b1cc:	464b      	mov	r3, r9
 800b1ce:	2b22      	cmp	r3, #34	; 0x22
 800b1d0:	d012      	beq.n	800b1f8 <PxMessagingTask+0x1438>
									if (responseStatus == BOS_OK)
 800b1d2:	4b8c      	ldr	r3, [pc, #560]	; (800b404 <PxMessagingTask+0x1644>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d129      	bne.n	800b22e <PxMessagingTask+0x146e>
										switch (cMessage[port-1][1+shift])															// Requested format
 800b1da:	2238      	movs	r2, #56	; 0x38
 800b1dc:	4362      	muls	r2, r4
 800b1de:	4b8c      	ldr	r3, [pc, #560]	; (800b410 <PxMessagingTask+0x1650>)
 800b1e0:	189b      	adds	r3, r3, r2
 800b1e2:	4443      	add	r3, r8
 800b1e4:	785b      	ldrb	r3, [r3, #1]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	2a07      	cmp	r2, #7
 800b1ec:	d81f      	bhi.n	800b22e <PxMessagingTask+0x146e>
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4a8a      	ldr	r2, [pc, #552]	; (800b41c <PxMessagingTask+0x165c>)
 800b1f4:	58d3      	ldr	r3, [r2, r3]
 800b1f6:	469f      	mov	pc, r3
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress = temp32;
 800b1fc:	9514      	str	r5, [sp, #80]	; 0x50
										erase.NbPages = 1;
 800b1fe:	3301      	adds	r3, #1
 800b200:	9315      	str	r3, [sp, #84]	; 0x54
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800b202:	a912      	add	r1, sp, #72	; 0x48
 800b204:	a813      	add	r0, sp, #76	; 0x4c
 800b206:	f006 ff37 	bl	8012078 <HAL_FLASHEx_Erase>
 800b20a:	900d      	str	r0, [sp, #52]	; 0x34
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d102      	bne.n	800b216 <PxMessagingTask+0x1456>
 800b210:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b212:	3301      	adds	r3, #1
 800b214:	d0dd      	beq.n	800b1d2 <PxMessagingTask+0x1412>
 800b216:	4b7b      	ldr	r3, [pc, #492]	; (800b404 <PxMessagingTask+0x1644>)
 800b218:	2216      	movs	r2, #22
 800b21a:	701a      	strb	r2, [r3, #0]
 800b21c:	e7d9      	b.n	800b1d2 <PxMessagingTask+0x1412>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800b21e:	882b      	ldrh	r3, [r5, #0]
 800b220:	b29b      	uxth	r3, r3
 800b222:	4a7f      	ldr	r2, [pc, #508]	; (800b420 <PxMessagingTask+0x1660>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d00c      	beq.n	800b242 <PxMessagingTask+0x1482>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800b228:	4b76      	ldr	r3, [pc, #472]	; (800b404 <PxMessagingTask+0x1644>)
 800b22a:	2216      	movs	r2, #22
 800b22c:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800b22e:	f006 fe61 	bl	8011ef4 <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800b232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b234:	2b00      	cmp	r3, #0
 800b236:	d100      	bne.n	800b23a <PxMessagingTask+0x147a>
 800b238:	e721      	b.n	800b07e <PxMessagingTask+0x12be>
 800b23a:	4b72      	ldr	r3, [pc, #456]	; (800b404 <PxMessagingTask+0x1644>)
 800b23c:	2216      	movs	r2, #22
 800b23e:	701a      	strb	r2, [r3, #0]
 800b240:	e71d      	b.n	800b07e <PxMessagingTask+0x12be>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800b242:	2238      	movs	r2, #56	; 0x38
 800b244:	4362      	muls	r2, r4
 800b246:	4b72      	ldr	r3, [pc, #456]	; (800b410 <PxMessagingTask+0x1650>)
 800b248:	189b      	adds	r3, r3, r2
 800b24a:	4443      	add	r3, r8
 800b24c:	799a      	ldrb	r2, [r3, #6]
 800b24e:	2300      	movs	r3, #0
 800b250:	4971      	ldr	r1, [pc, #452]	; (800b418 <PxMessagingTask+0x1658>)
 800b252:	600a      	str	r2, [r1, #0]
 800b254:	604b      	str	r3, [r1, #4]
 800b256:	0029      	movs	r1, r5
 800b258:	2001      	movs	r0, #1
 800b25a:	f006 fe83 	bl	8011f64 <HAL_FLASH_Program>
 800b25e:	900d      	str	r0, [sp, #52]	; 0x34
 800b260:	e7e5      	b.n	800b22e <PxMessagingTask+0x146e>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800b262:	882b      	ldrh	r3, [r5, #0]
 800b264:	b29b      	uxth	r3, r3
 800b266:	4a6e      	ldr	r2, [pc, #440]	; (800b420 <PxMessagingTask+0x1660>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d003      	beq.n	800b274 <PxMessagingTask+0x14b4>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800b26c:	4b65      	ldr	r3, [pc, #404]	; (800b404 <PxMessagingTask+0x1644>)
 800b26e:	2216      	movs	r2, #22
 800b270:	701a      	strb	r2, [r3, #0]
 800b272:	e7dc      	b.n	800b22e <PxMessagingTask+0x146e>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 800b274:	2238      	movs	r2, #56	; 0x38
 800b276:	4362      	muls	r2, r4
 800b278:	4b65      	ldr	r3, [pc, #404]	; (800b410 <PxMessagingTask+0x1650>)
 800b27a:	189b      	adds	r3, r3, r2
 800b27c:	4443      	add	r3, r8
 800b27e:	79da      	ldrb	r2, [r3, #7]
 800b280:	0212      	lsls	r2, r2, #8
 800b282:	799b      	ldrb	r3, [r3, #6]
 800b284:	18d2      	adds	r2, r2, r3
 800b286:	2300      	movs	r3, #0
 800b288:	4963      	ldr	r1, [pc, #396]	; (800b418 <PxMessagingTask+0x1658>)
 800b28a:	600a      	str	r2, [r1, #0]
 800b28c:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800b28e:	0029      	movs	r1, r5
 800b290:	2001      	movs	r0, #1
 800b292:	f006 fe67 	bl	8011f64 <HAL_FLASH_Program>
 800b296:	900d      	str	r0, [sp, #52]	; 0x34
 800b298:	e7c9      	b.n	800b22e <PxMessagingTask+0x146e>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800b29a:	682b      	ldr	r3, [r5, #0]
 800b29c:	3301      	adds	r3, #1
 800b29e:	d003      	beq.n	800b2a8 <PxMessagingTask+0x14e8>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800b2a0:	4b58      	ldr	r3, [pc, #352]	; (800b404 <PxMessagingTask+0x1644>)
 800b2a2:	2216      	movs	r2, #22
 800b2a4:	701a      	strb	r2, [r3, #0]
 800b2a6:	e7c2      	b.n	800b22e <PxMessagingTask+0x146e>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800b2a8:	2238      	movs	r2, #56	; 0x38
 800b2aa:	4362      	muls	r2, r4
 800b2ac:	4b58      	ldr	r3, [pc, #352]	; (800b410 <PxMessagingTask+0x1650>)
 800b2ae:	189b      	adds	r3, r3, r2
 800b2b0:	4443      	add	r3, r8
 800b2b2:	79da      	ldrb	r2, [r3, #7]
 800b2b4:	0212      	lsls	r2, r2, #8
 800b2b6:	7a19      	ldrb	r1, [r3, #8]
 800b2b8:	0409      	lsls	r1, r1, #16
 800b2ba:	1852      	adds	r2, r2, r1
 800b2bc:	7999      	ldrb	r1, [r3, #6]
 800b2be:	1852      	adds	r2, r2, r1
 800b2c0:	7a5b      	ldrb	r3, [r3, #9]
 800b2c2:	061b      	lsls	r3, r3, #24
 800b2c4:	18d2      	adds	r2, r2, r3
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	4953      	ldr	r1, [pc, #332]	; (800b418 <PxMessagingTask+0x1658>)
 800b2ca:	600a      	str	r2, [r1, #0]
 800b2cc:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 800b2ce:	0029      	movs	r1, r5
 800b2d0:	2002      	movs	r0, #2
 800b2d2:	f006 fe47 	bl	8011f64 <HAL_FLASH_Program>
 800b2d6:	900d      	str	r0, [sp, #52]	; 0x34
 800b2d8:	e7a9      	b.n	800b22e <PxMessagingTask+0x146e>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800b2da:	682b      	ldr	r3, [r5, #0]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	d003      	beq.n	800b2e8 <PxMessagingTask+0x1528>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800b2e0:	4b48      	ldr	r3, [pc, #288]	; (800b404 <PxMessagingTask+0x1644>)
 800b2e2:	2216      	movs	r2, #22
 800b2e4:	701a      	strb	r2, [r3, #0]
 800b2e6:	e7a2      	b.n	800b22e <PxMessagingTask+0x146e>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800b2e8:	2238      	movs	r2, #56	; 0x38
 800b2ea:	4362      	muls	r2, r4
 800b2ec:	4b48      	ldr	r3, [pc, #288]	; (800b410 <PxMessagingTask+0x1650>)
 800b2ee:	189b      	adds	r3, r3, r2
 800b2f0:	4443      	add	r3, r8
 800b2f2:	79da      	ldrb	r2, [r3, #7]
 800b2f4:	0212      	lsls	r2, r2, #8
 800b2f6:	7a19      	ldrb	r1, [r3, #8]
 800b2f8:	0409      	lsls	r1, r1, #16
 800b2fa:	1852      	adds	r2, r2, r1
 800b2fc:	7999      	ldrb	r1, [r3, #6]
 800b2fe:	1852      	adds	r2, r2, r1
 800b300:	7a5b      	ldrb	r3, [r3, #9]
 800b302:	061b      	lsls	r3, r3, #24
 800b304:	18d2      	adds	r2, r2, r3
 800b306:	2300      	movs	r3, #0
 800b308:	4943      	ldr	r1, [pc, #268]	; (800b418 <PxMessagingTask+0x1658>)
 800b30a:	600a      	str	r2, [r1, #0]
 800b30c:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 800b30e:	0029      	movs	r1, r5
 800b310:	2003      	movs	r0, #3
 800b312:	f006 fe27 	bl	8011f64 <HAL_FLASH_Program>
 800b316:	900d      	str	r0, [sp, #52]	; 0x34
 800b318:	e789      	b.n	800b22e <PxMessagingTask+0x146e>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 800b31a:	4b3d      	ldr	r3, [pc, #244]	; (800b410 <PxMessagingTask+0x1650>)
 800b31c:	199b      	adds	r3, r3, r6
 800b31e:	5d5a      	ldrb	r2, [r3, r5]
 800b320:	4b38      	ldr	r3, [pc, #224]	; (800b404 <PxMessagingTask+0x1644>)
 800b322:	701a      	strb	r2, [r3, #0]
							break;	
 800b324:	2300      	movs	r3, #0
 800b326:	469a      	mov	sl, r3
 800b328:	f7fe fd83 	bl	8009e32 <PxMessagingTask+0x72>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 800b32c:	4652      	mov	r2, sl
 800b32e:	3a01      	subs	r2, #1
 800b330:	b292      	uxth	r2, r2
 800b332:	1c69      	adds	r1, r5, #1
 800b334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b336:	469c      	mov	ip, r3
 800b338:	4461      	add	r1, ip
 800b33a:	4b35      	ldr	r3, [pc, #212]	; (800b410 <PxMessagingTask+0x1650>)
 800b33c:	18c9      	adds	r1, r1, r3
 800b33e:	199b      	adds	r3, r3, r6
 800b340:	5d58      	ldrb	r0, [r3, r5]
 800b342:	230a      	movs	r3, #10
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	f003 fd65 	bl	800ee14 <writePxMutex>
							break;
 800b34a:	2300      	movs	r3, #0
 800b34c:	469a      	mov	sl, r3
 800b34e:	f7fe fd70 	bl	8009e32 <PxMessagingTask+0x72>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 800b352:	9500      	str	r5, [sp, #0]
 800b354:	4643      	mov	r3, r8
 800b356:	9a07      	ldr	r2, [sp, #28]
 800b358:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b35a:	4648      	mov	r0, r9
 800b35c:	f7fe fd2e 	bl	8009dbc <User_MessagingParser>
 800b360:	4682      	mov	sl, r0
							if (result == BOS_ERR_UnknownMessage) {
 800b362:	2801      	cmp	r0, #1
 800b364:	d001      	beq.n	800b36a <PxMessagingTask+0x15aa>
 800b366:	f7fe fd64 	bl	8009e32 <PxMessagingTask+0x72>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 800b36a:	9500      	str	r5, [sp, #0]
 800b36c:	4643      	mov	r3, r8
 800b36e:	9a07      	ldr	r2, [sp, #28]
 800b370:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b372:	4648      	mov	r0, r9
 800b374:	f001 fd5c 	bl	800ce30 <Module_MessagingTask>
 800b378:	4682      	mov	sl, r0
 800b37a:	f7fe fd55 	bl	8009e28 <PxMessagingTask+0x68>
										messageParams[0] = modParam[temp-1].paramFormat;
 800b37e:	2300      	movs	r3, #0
 800b380:	469a      	mov	sl, r3
 800b382:	f7fe fd51 	bl	8009e28 <PxMessagingTask+0x68>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800b386:	2300      	movs	r3, #0
 800b388:	469a      	mov	sl, r3
 800b38a:	f7fe fd4d 	bl	8009e28 <PxMessagingTask+0x68>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800b38e:	2200      	movs	r2, #0
 800b390:	2100      	movs	r1, #0
 800b392:	9807      	ldr	r0, [sp, #28]
 800b394:	f7fe fa34 	bl	8009800 <SendMessageToModule>
			result = BOS_OK;			
 800b398:	2300      	movs	r3, #0
 800b39a:	469a      	mov	sl, r3
 800b39c:	f7fe fd49 	bl	8009e32 <PxMessagingTask+0x72>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	469a      	mov	sl, r3
 800b3a4:	f7fe fd45 	bl	8009e32 <PxMessagingTask+0x72>
									}
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	469a      	mov	sl, r3
 800b3ac:	f7fe fd41 	bl	8009e32 <PxMessagingTask+0x72>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	469a      	mov	sl, r3
 800b3b4:	f7fe fd3d 	bl	8009e32 <PxMessagingTask+0x72>
 800b3b8:	4661      	mov	r1, ip
				shift += 4;
 800b3ba:	9d06      	ldr	r5, [sp, #24]
 800b3bc:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 800b3be:	1b48      	subs	r0, r1, r5
 800b3c0:	b2c3      	uxtb	r3, r0
 800b3c2:	469a      	mov	sl, r3
				if (result == BOS_OK)
 800b3c4:	f7fe fdf4 	bl	8009fb0 <PxMessagingTask+0x1f0>
					result = BOS_ERR_WrongID;
 800b3c8:	2366      	movs	r3, #102	; 0x66
 800b3ca:	469a      	mov	sl, r3
		if (result == BOS_ERR_UnknownMessage) {
 800b3cc:	f7fe fd31 	bl	8009e32 <PxMessagingTask+0x72>
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800b3d0:	2338      	movs	r3, #56	; 0x38
 800b3d2:	4363      	muls	r3, r4
 800b3d4:	4a0e      	ldr	r2, [pc, #56]	; (800b410 <PxMessagingTask+0x1650>)
 800b3d6:	18d2      	adds	r2, r2, r3
 800b3d8:	4643      	mov	r3, r8
 800b3da:	5cd3      	ldrb	r3, [r2, r3]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	0098      	lsls	r0, r3, #2
 800b3e0:	4907      	ldr	r1, [pc, #28]	; (800b400 <PxMessagingTask+0x1640>)
 800b3e2:	5841      	ldr	r1, [r0, r1]
 800b3e4:	4648      	mov	r0, r9
 800b3e6:	5c12      	ldrb	r2, [r2, r0]
 800b3e8:	e568      	b.n	800aebc <PxMessagingTask+0x10fc>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 800b3ea:	4543      	cmp	r3, r8
 800b3ec:	d101      	bne.n	800b3f2 <PxMessagingTask+0x1632>
 800b3ee:	f7fe fdd4 	bl	8009f9a <PxMessagingTask+0x1da>
 800b3f2:	464b      	mov	r3, r9
 800b3f4:	2b10      	cmp	r3, #16
 800b3f6:	d001      	beq.n	800b3fc <PxMessagingTask+0x163c>
 800b3f8:	f7fe fd65 	bl	8009ec6 <PxMessagingTask+0x106>
 800b3fc:	f7fe fdcd 	bl	8009f9a <PxMessagingTask+0x1da>
 800b400:	20006ca0 	.word	0x20006ca0
 800b404:	200010e0 	.word	0x200010e0
 800b408:	20006d18 	.word	0x20006d18
 800b40c:	20000f18 	.word	0x20000f18
 800b410:	20000d20 	.word	0x20000d20
 800b414:	0801ce20 	.word	0x0801ce20
 800b418:	200010d8 	.word	0x200010d8
 800b41c:	0801ce40 	.word	0x0801ce40
 800b420:	0000ffff 	.word	0x0000ffff

0800b424 <weight1ModParamCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE weight1ModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b424:	b510      	push	{r4, lr}
 800b426:	1e04      	subs	r4, r0, #0

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800b428:	d00b      	beq.n	800b442 <weight1ModParamCommand+0x1e>

  sprintf( ( char * ) pcWriteBuffer, ( char * ) pcWeightVerboseMsg, weight1_buffer);
 800b42a:	4b07      	ldr	r3, [pc, #28]	; (800b448 <weight1ModParamCommand+0x24>)
 800b42c:	6818      	ldr	r0, [r3, #0]
 800b42e:	f7f7 ff1b 	bl	8003268 <__aeabi_f2d>
 800b432:	0002      	movs	r2, r0
 800b434:	000b      	movs	r3, r1
 800b436:	4905      	ldr	r1, [pc, #20]	; (800b44c <weight1ModParamCommand+0x28>)
 800b438:	0020      	movs	r0, r4
 800b43a:	f009 f967 	bl	801470c <sprintf>

  /* There is no more data to return after this single string, so return pdFALSE. */
  return pdFALSE;
}
 800b43e:	2000      	movs	r0, #0
 800b440:	bd10      	pop	{r4, pc}
  configASSERT( pcWriteBuffer );
 800b442:	b672      	cpsid	i
 800b444:	e7fe      	b.n	800b444 <weight1ModParamCommand+0x20>
 800b446:	46c0      	nop			; (mov r8, r8)
 800b448:	20006ed4 	.word	0x20006ed4
 800b44c:	0801ce60 	.word	0x0801ce60

0800b450 <weight2ModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE weight2ModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b450:	b510      	push	{r4, lr}
 800b452:	1e04      	subs	r4, r0, #0

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800b454:	d00b      	beq.n	800b46e <weight2ModParamCommand+0x1e>

  sprintf( ( char * ) pcWriteBuffer, ( char * ) pcWeightVerboseMsg, weight2_buffer);
 800b456:	4b07      	ldr	r3, [pc, #28]	; (800b474 <weight2ModParamCommand+0x24>)
 800b458:	6818      	ldr	r0, [r3, #0]
 800b45a:	f7f7 ff05 	bl	8003268 <__aeabi_f2d>
 800b45e:	0002      	movs	r2, r0
 800b460:	000b      	movs	r3, r1
 800b462:	4905      	ldr	r1, [pc, #20]	; (800b478 <weight2ModParamCommand+0x28>)
 800b464:	0020      	movs	r0, r4
 800b466:	f009 f951 	bl	801470c <sprintf>

  /* There is no more data to return after this single string, so return pdFALSE. */
  return pdFALSE;
}
 800b46a:	2000      	movs	r0, #0
 800b46c:	bd10      	pop	{r4, pc}
  configASSERT( pcWriteBuffer );
 800b46e:	b672      	cpsid	i
 800b470:	e7fe      	b.n	800b470 <weight2ModParamCommand+0x20>
 800b472:	46c0      	nop			; (mov r8, r8)
 800b474:	20006dec 	.word	0x20006dec
 800b478:	0801ce60 	.word	0x0801ce60

0800b47c <unitCommand>:
{
 800b47c:	b530      	push	{r4, r5, lr}
 800b47e:	b083      	sub	sp, #12
 800b480:	0004      	movs	r4, r0
 800b482:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800b488:	2c00      	cmp	r4, #0
 800b48a:	d028      	beq.n	800b4de <unitCommand+0x62>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800b48c:	aa01      	add	r2, sp, #4
 800b48e:	2101      	movs	r1, #1
 800b490:	f003 ff16 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800b494:	0005      	movs	r5, r0
  if (!strncmp((const char *)pcParameterString1, "g", 1))
 800b496:	7803      	ldrb	r3, [r0, #0]
 800b498:	2b67      	cmp	r3, #103	; 0x67
 800b49a:	d022      	beq.n	800b4e2 <unitCommand+0x66>
  else if (!strncmp((const char *)pcParameterString1, "kg", 2))
 800b49c:	2202      	movs	r2, #2
 800b49e:	4928      	ldr	r1, [pc, #160]	; (800b540 <unitCommand+0xc4>)
 800b4a0:	f009 f977 	bl	8014792 <strncmp>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d025      	beq.n	800b4f4 <unitCommand+0x78>
  else if (!strncmp((const char *)pcParameterString1, "ounce", 5))
 800b4a8:	2205      	movs	r2, #5
 800b4aa:	4926      	ldr	r1, [pc, #152]	; (800b544 <unitCommand+0xc8>)
 800b4ac:	0028      	movs	r0, r5
 800b4ae:	f009 f970 	bl	8014792 <strncmp>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d029      	beq.n	800b50a <unitCommand+0x8e>
	else if (!strncmp((const char *)pcParameterString1, "lb", 2))
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	4923      	ldr	r1, [pc, #140]	; (800b548 <unitCommand+0xcc>)
 800b4ba:	0028      	movs	r0, r5
 800b4bc:	f009 f969 	bl	8014792 <strncmp>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d02b      	beq.n	800b51c <unitCommand+0xa0>
	else if (!strncmp((const char *)pcParameterString1, "raw", 3))
 800b4c4:	2203      	movs	r2, #3
 800b4c6:	4921      	ldr	r1, [pc, #132]	; (800b54c <unitCommand+0xd0>)
 800b4c8:	0028      	movs	r0, r5
 800b4ca:	f009 f962 	bl	8014792 <strncmp>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d02d      	beq.n	800b52e <unitCommand+0xb2>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800b4d2:	2213      	movs	r2, #19
 800b4d4:	491e      	ldr	r1, [pc, #120]	; (800b550 <unitCommand+0xd4>)
 800b4d6:	0020      	movs	r0, r4
 800b4d8:	f008 ff1a 	bl	8014310 <memcpy>
 800b4dc:	e012      	b.n	800b504 <unitCommand+0x88>
  configASSERT( pcWriteBuffer );
 800b4de:	b672      	cpsid	i
 800b4e0:	e7fe      	b.n	800b4e0 <unitCommand+0x64>
    unit = Gram;
 800b4e2:	4b1c      	ldr	r3, [pc, #112]	; (800b554 <unitCommand+0xd8>)
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Gram\r\n" );
 800b4e8:	321d      	adds	r2, #29
 800b4ea:	491b      	ldr	r1, [pc, #108]	; (800b558 <unitCommand+0xdc>)
 800b4ec:	0020      	movs	r0, r4
 800b4ee:	f008 ff0f 	bl	8014310 <memcpy>
  if (H26R0_ERR_WrongParams == result)
 800b4f2:	e007      	b.n	800b504 <unitCommand+0x88>
    unit = KGram;
 800b4f4:	4b17      	ldr	r3, [pc, #92]	; (800b554 <unitCommand+0xd8>)
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: KGram\r\n" );
 800b4fa:	321d      	adds	r2, #29
 800b4fc:	4917      	ldr	r1, [pc, #92]	; (800b55c <unitCommand+0xe0>)
 800b4fe:	0020      	movs	r0, r4
 800b500:	f008 ff06 	bl	8014310 <memcpy>
}
 800b504:	2000      	movs	r0, #0
 800b506:	b003      	add	sp, #12
 800b508:	bd30      	pop	{r4, r5, pc}
    unit = Ounce;
 800b50a:	4b12      	ldr	r3, [pc, #72]	; (800b554 <unitCommand+0xd8>)
 800b50c:	2203      	movs	r2, #3
 800b50e:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Ounce\r\n" );
 800b510:	321c      	adds	r2, #28
 800b512:	4913      	ldr	r1, [pc, #76]	; (800b560 <unitCommand+0xe4>)
 800b514:	0020      	movs	r0, r4
 800b516:	f008 fefb 	bl	8014310 <memcpy>
  if (H26R0_ERR_WrongParams == result)
 800b51a:	e7f3      	b.n	800b504 <unitCommand+0x88>
    unit = Pound;
 800b51c:	4b0d      	ldr	r3, [pc, #52]	; (800b554 <unitCommand+0xd8>)
 800b51e:	2204      	movs	r2, #4
 800b520:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Pound\r\n" );
 800b522:	321b      	adds	r2, #27
 800b524:	490f      	ldr	r1, [pc, #60]	; (800b564 <unitCommand+0xe8>)
 800b526:	0020      	movs	r0, r4
 800b528:	f008 fef2 	bl	8014310 <memcpy>
  if (H26R0_ERR_WrongParams == result)
 800b52c:	e7ea      	b.n	800b504 <unitCommand+0x88>
    unit = RAW;
 800b52e:	4b09      	ldr	r3, [pc, #36]	; (800b554 <unitCommand+0xd8>)
 800b530:	2205      	movs	r2, #5
 800b532:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Raw\r\n" );
 800b534:	3218      	adds	r2, #24
 800b536:	490c      	ldr	r1, [pc, #48]	; (800b568 <unitCommand+0xec>)
 800b538:	0020      	movs	r0, r4
 800b53a:	f008 fee9 	bl	8014310 <memcpy>
  if (H26R0_ERR_WrongParams == result)
 800b53e:	e7e1      	b.n	800b504 <unitCommand+0x88>
 800b540:	0801ce88 	.word	0x0801ce88
 800b544:	0801ceac 	.word	0x0801ceac
 800b548:	0801ced4 	.word	0x0801ced4
 800b54c:	0801cef8 	.word	0x0801cef8
 800b550:	0801b0b8 	.word	0x0801b0b8
 800b554:	200000b4 	.word	0x200000b4
 800b558:	0801ce68 	.word	0x0801ce68
 800b55c:	0801ce8c 	.word	0x0801ce8c
 800b560:	0801ceb4 	.word	0x0801ceb4
 800b564:	0801ced8 	.word	0x0801ced8
 800b568:	0801cefc 	.word	0x0801cefc

0800b56c <CheckForEnterKey>:
{
 800b56c:	b510      	push	{r4, lr}
 800b56e:	b082      	sub	sp, #8
		if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800b570:	4b10      	ldr	r3, [pc, #64]	; (800b5b4 <CheckForEnterKey+0x48>)
 800b572:	781c      	ldrb	r4, [r3, #0]
 800b574:	3c01      	subs	r4, #1
 800b576:	01a1      	lsls	r1, r4, #6
 800b578:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <CheckForEnterKey+0x4c>)
 800b57a:	18c9      	adds	r1, r1, r3
 800b57c:	2300      	movs	r3, #0
 800b57e:	0018      	movs	r0, r3
 800b580:	5cca      	ldrb	r2, [r1, r3]
 800b582:	2a0d      	cmp	r2, #13
 800b584:	d003      	beq.n	800b58e <CheckForEnterKey+0x22>
	for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800b586:	3301      	adds	r3, #1
 800b588:	2b40      	cmp	r3, #64	; 0x40
 800b58a:	d1f8      	bne.n	800b57e <CheckForEnterKey+0x12>
 800b58c:	e00f      	b.n	800b5ae <CheckForEnterKey+0x42>
			UARTRxBuf[PcPort-1][chr] = 0;
 800b58e:	01a4      	lsls	r4, r4, #6
 800b590:	4b09      	ldr	r3, [pc, #36]	; (800b5b8 <CheckForEnterKey+0x4c>)
 800b592:	191c      	adds	r4, r3, r4
 800b594:	2300      	movs	r3, #0
 800b596:	5423      	strb	r3, [r4, r0]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800b598:	4a08      	ldr	r2, [pc, #32]	; (800b5bc <CheckForEnterKey+0x50>)
 800b59a:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		                // Stop the streaming task
 800b59c:	4a08      	ldr	r2, [pc, #32]	; (800b5c0 <CheckForEnterKey+0x54>)
 800b59e:	7013      	strb	r3, [r2, #0]
			xTimerStop( xTimer, 0 );            // Stop the timeout timer
 800b5a0:	4a08      	ldr	r2, [pc, #32]	; (800b5c4 <CheckForEnterKey+0x58>)
 800b5a2:	6810      	ldr	r0, [r2, #0]
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2103      	movs	r1, #3
 800b5aa:	f005 fabd 	bl	8010b28 <xTimerGenericCommand>
}
 800b5ae:	b002      	add	sp, #8
 800b5b0:	bd10      	pop	{r4, pc}
 800b5b2:	46c0      	nop			; (mov r8, r8)
 800b5b4:	20000aa7 	.word	0x20000aa7
 800b5b8:	2000129c 	.word	0x2000129c
 800b5bc:	20001ac4 	.word	0x20001ac4
 800b5c0:	20006e61 	.word	0x20006e61
 800b5c4:	20001aec 	.word	0x20001aec

0800b5c8 <HandleTimeout>:
{
 800b5c8:	b510      	push	{r4, lr}
  tid = ( uint32_t ) pvTimerGetTimerID( xTimer );
 800b5ca:	f005 fbe9 	bl	8010da0 <pvTimerGetTimerID>
  if (TIMERID_TIMEOUT_MEASUREMENT == tid)
 800b5ce:	28ff      	cmp	r0, #255	; 0xff
 800b5d0:	d000      	beq.n	800b5d4 <HandleTimeout+0xc>
}
 800b5d2:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		                                    // Stop the streaming task
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4a02      	ldr	r2, [pc, #8]	; (800b5e0 <HandleTimeout+0x18>)
 800b5d8:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING;     // stop streaming
 800b5da:	4a02      	ldr	r2, [pc, #8]	; (800b5e4 <HandleTimeout+0x1c>)
 800b5dc:	7013      	strb	r3, [r2, #0]
}
 800b5de:	e7f8      	b.n	800b5d2 <HandleTimeout+0xa>
 800b5e0:	20006e61 	.word	0x20006e61
 800b5e4:	20001ac4 	.word	0x20001ac4

0800b5e8 <SystemClock_Config>:
{
 800b5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ea:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b5ec:	2401      	movs	r4, #1
 800b5ee:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b5f0:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b5f2:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b5f4:	2310      	movs	r3, #16
 800b5f6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b5f8:	2702      	movs	r7, #2
 800b5fa:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b5fc:	2680      	movs	r6, #128	; 0x80
 800b5fe:	0276      	lsls	r6, r6, #9
 800b600:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b602:	2380      	movs	r3, #128	; 0x80
 800b604:	035b      	lsls	r3, r3, #13
 800b606:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b608:	2500      	movs	r5, #0
 800b60a:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b60c:	a80d      	add	r0, sp, #52	; 0x34
 800b60e:	f006 fe9b 	bl	8012348 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b612:	2307      	movs	r3, #7
 800b614:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b616:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b618:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b61a:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b61c:	2101      	movs	r1, #1
 800b61e:	a809      	add	r0, sp, #36	; 0x24
 800b620:	f007 f956 	bl	80128d0 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b624:	4b1a      	ldr	r3, [pc, #104]	; (800b690 <SystemClock_Config+0xa8>)
 800b626:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b628:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b62a:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b62c:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b62e:	a802      	add	r0, sp, #8
 800b630:	f007 fafe 	bl	8012c30 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b634:	4d17      	ldr	r5, [pc, #92]	; (800b694 <SystemClock_Config+0xac>)
 800b636:	69ea      	ldr	r2, [r5, #28]
 800b638:	2180      	movs	r1, #128	; 0x80
 800b63a:	0549      	lsls	r1, r1, #21
 800b63c:	430a      	orrs	r2, r1
 800b63e:	61ea      	str	r2, [r5, #28]
 800b640:	69eb      	ldr	r3, [r5, #28]
 800b642:	400b      	ands	r3, r1
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b648:	f006 fe74 	bl	8012334 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b64c:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b64e:	23c0      	movs	r3, #192	; 0xc0
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b654:	a802      	add	r0, sp, #8
 800b656:	f007 faeb 	bl	8012c30 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b65a:	f007 fac5 	bl	8012be8 <HAL_RCC_GetHCLKFreq>
 800b65e:	21fa      	movs	r1, #250	; 0xfa
 800b660:	0089      	lsls	r1, r1, #2
 800b662:	f7f4 fd75 	bl	8000150 <__udivsi3>
 800b666:	f005 fdd9 	bl	801121c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b66a:	2004      	movs	r0, #4
 800b66c:	f005 fdf2 	bl	8011254 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800b670:	69ab      	ldr	r3, [r5, #24]
 800b672:	4323      	orrs	r3, r4
 800b674:	61ab      	str	r3, [r5, #24]
 800b676:	69ab      	ldr	r3, [r5, #24]
 800b678:	401c      	ands	r4, r3
 800b67a:	9401      	str	r4, [sp, #4]
 800b67c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b67e:	2001      	movs	r0, #1
 800b680:	2200      	movs	r2, #0
 800b682:	2100      	movs	r1, #0
 800b684:	4240      	negs	r0, r0
 800b686:	f005 fd83 	bl	8011190 <HAL_NVIC_SetPriority>
}
 800b68a:	b01b      	add	sp, #108	; 0x6c
 800b68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b68e:	46c0      	nop			; (mov r8, r8)
 800b690:	00040003 	.word	0x00040003
 800b694:	40021000 	.word	0x40021000

0800b698 <Module_Init>:
{
 800b698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b69a:	b085      	sub	sp, #20
  MX_USART2_UART_Init();
 800b69c:	f003 fa0e 	bl	800eabc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b6a0:	f003 fa24 	bl	800eaec <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800b6a4:	f003 fa3a 	bl	800eb1c <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800b6a8:	f003 fa50 	bl	800eb4c <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800b6ac:	f003 fa66 	bl	800eb7c <MX_USART6_UART_Init>
	HX711_GPIO_Init();     // GPIO init
 800b6b0:	f002 fe40 	bl	800e334 <HX711_GPIO_Init>
	xTaskCreate(LoadcellTask, (const char*) "LoadcellTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &LoadcellHandle);	
 800b6b4:	22a0      	movs	r2, #160	; 0xa0
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	9303      	str	r3, [sp, #12]
 800b6ba:	9302      	str	r3, [sp, #8]
 800b6bc:	4b27      	ldr	r3, [pc, #156]	; (800b75c <Module_Init+0xc4>)
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	0052      	lsls	r2, r2, #1
 800b6c8:	4925      	ldr	r1, [pc, #148]	; (800b760 <Module_Init+0xc8>)
 800b6ca:	4826      	ldr	r0, [pc, #152]	; (800b764 <Module_Init+0xcc>)
 800b6cc:	f004 fae6 	bl	800fc9c <xTaskGenericCreate>
	EE_ReadVariable(_EE_cell_full_scale, &full_scale);
 800b6d0:	20fa      	movs	r0, #250	; 0xfa
 800b6d2:	4925      	ldr	r1, [pc, #148]	; (800b768 <Module_Init+0xd0>)
 800b6d4:	0040      	lsls	r0, r0, #1
 800b6d6:	f7fc fb63 	bl	8007da0 <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_drift_LSB, &word_LSB);
 800b6da:	4e24      	ldr	r6, [pc, #144]	; (800b76c <Module_Init+0xd4>)
 800b6dc:	20f6      	movs	r0, #246	; 0xf6
 800b6de:	0031      	movs	r1, r6
 800b6e0:	30ff      	adds	r0, #255	; 0xff
 800b6e2:	f7fc fb5d 	bl	8007da0 <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_drift_MSB, &word_MSB);
 800b6e6:	4f22      	ldr	r7, [pc, #136]	; (800b770 <Module_Init+0xd8>)
 800b6e8:	20fb      	movs	r0, #251	; 0xfb
 800b6ea:	0039      	movs	r1, r7
 800b6ec:	0040      	lsls	r0, r0, #1
 800b6ee:	f7fc fb57 	bl	8007da0 <EE_ReadVariable>
	temp32=(uint32_t)word_LSB+((uint32_t)word_MSB<<16);
 800b6f2:	883b      	ldrh	r3, [r7, #0]
 800b6f4:	041b      	lsls	r3, r3, #16
 800b6f6:	8832      	ldrh	r2, [r6, #0]
 800b6f8:	189b      	adds	r3, r3, r2
 800b6fa:	4c1e      	ldr	r4, [pc, #120]	; (800b774 <Module_Init+0xdc>)
 800b6fc:	6023      	str	r3, [r4, #0]
	cell_drift=*(float*)&temp32;
 800b6fe:	4a1e      	ldr	r2, [pc, #120]	; (800b778 <Module_Init+0xe0>)
 800b700:	6013      	str	r3, [r2, #0]
	EE_ReadVariable(_EE_cell_output_LSB, &word_LSB);
 800b702:	20f8      	movs	r0, #248	; 0xf8
 800b704:	0031      	movs	r1, r6
 800b706:	30ff      	adds	r0, #255	; 0xff
 800b708:	f7fc fb4a 	bl	8007da0 <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_output_MSB, &word_MSB);
 800b70c:	20fc      	movs	r0, #252	; 0xfc
 800b70e:	0039      	movs	r1, r7
 800b710:	0040      	lsls	r0, r0, #1
 800b712:	f7fc fb45 	bl	8007da0 <EE_ReadVariable>
	temp32=(uint32_t)word_LSB+((uint32_t)word_MSB<<16);
 800b716:	883b      	ldrh	r3, [r7, #0]
 800b718:	041b      	lsls	r3, r3, #16
 800b71a:	8832      	ldrh	r2, [r6, #0]
 800b71c:	189b      	adds	r3, r3, r2
 800b71e:	6023      	str	r3, [r4, #0]
	cell_output=*(float*)&temp32;
 800b720:	4d16      	ldr	r5, [pc, #88]	; (800b77c <Module_Init+0xe4>)
 800b722:	602b      	str	r3, [r5, #0]
	EE_ReadVariable(_EE_zero_drift_LSB, &word_LSB);
 800b724:	20fa      	movs	r0, #250	; 0xfa
 800b726:	0031      	movs	r1, r6
 800b728:	30ff      	adds	r0, #255	; 0xff
 800b72a:	f7fc fb39 	bl	8007da0 <EE_ReadVariable>
	EE_ReadVariable(_EE_zero_drift_MSB, &word_MSB);
 800b72e:	20fd      	movs	r0, #253	; 0xfd
 800b730:	0039      	movs	r1, r7
 800b732:	0040      	lsls	r0, r0, #1
 800b734:	f7fc fb34 	bl	8007da0 <EE_ReadVariable>
	temp32=(uint32_t)word_LSB+((uint32_t)word_MSB<<16);
 800b738:	883b      	ldrh	r3, [r7, #0]
 800b73a:	041b      	lsls	r3, r3, #16
 800b73c:	8832      	ldrh	r2, [r6, #0]
 800b73e:	189b      	adds	r3, r3, r2
 800b740:	6023      	str	r3, [r4, #0]
	Zero_Drift=*(float*)&temp32;
 800b742:	4a0f      	ldr	r2, [pc, #60]	; (800b780 <Module_Init+0xe8>)
 800b744:	6013      	str	r3, [r2, #0]
	calibration_factor=cell_output*AVDD/1000.0f;		// mV
 800b746:	490f      	ldr	r1, [pc, #60]	; (800b784 <Module_Init+0xec>)
 800b748:	6828      	ldr	r0, [r5, #0]
 800b74a:	f7f5 fbf1 	bl	8000f30 <__aeabi_fmul>
 800b74e:	490e      	ldr	r1, [pc, #56]	; (800b788 <Module_Init+0xf0>)
 800b750:	f7f5 fa24 	bl	8000b9c <__aeabi_fdiv>
 800b754:	4b0d      	ldr	r3, [pc, #52]	; (800b78c <Module_Init+0xf4>)
 800b756:	6018      	str	r0, [r3, #0]
}
 800b758:	b005      	add	sp, #20
 800b75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b75c:	200016ac 	.word	0x200016ac
 800b760:	0801cf1c 	.word	0x0801cf1c
 800b764:	0800cbd1 	.word	0x0800cbd1
 800b768:	20001abc 	.word	0x20001abc
 800b76c:	20001ae8 	.word	0x20001ae8
 800b770:	20001aea 	.word	0x20001aea
 800b774:	20001acc 	.word	0x20001acc
 800b778:	20000088 	.word	0x20000088
 800b77c:	20001ab8 	.word	0x20001ab8
 800b780:	20001ab0 	.word	0x20001ab0
 800b784:	40400000 	.word	0x40400000
 800b788:	447a0000 	.word	0x447a0000
 800b78c:	20001ab4 	.word	0x20001ab4

0800b790 <SaveToRO>:
{
 800b790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b792:	46de      	mov	lr, fp
 800b794:	4657      	mov	r7, sl
 800b796:	464e      	mov	r6, r9
 800b798:	4645      	mov	r5, r8
 800b79a:	b5e0      	push	{r5, r6, r7, lr}
 800b79c:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b79e:	2300      	movs	r3, #0
 800b7a0:	9302      	str	r3, [sp, #8]
 800b7a2:	2211      	movs	r2, #17
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	a803      	add	r0, sp, #12
 800b7a8:	f008 fdbb 	bl	8014322 <memset>
	HAL_FLASH_Unlock();
 800b7ac:	f006 fb8e 	bl	8011ecc <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800b7b0:	487c      	ldr	r0, [pc, #496]	; (800b9a4 <SaveToRO+0x214>)
 800b7b2:	f006 fc4f 	bl	8012054 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b7b6:	487c      	ldr	r0, [pc, #496]	; (800b9a8 <SaveToRO+0x218>)
 800b7b8:	f006 fba6 	bl	8011f08 <FLASH_WaitForLastOperation>
 800b7bc:	9000      	str	r0, [sp, #0]
 800b7be:	9001      	str	r0, [sp, #4]
	if(FlashStatus != HAL_OK) {
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d112      	bne.n	800b7ea <SaveToRO+0x5a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b7c4:	4a79      	ldr	r2, [pc, #484]	; (800b9ac <SaveToRO+0x21c>)
 800b7c6:	6913      	ldr	r3, [r2, #16]
 800b7c8:	2102      	movs	r1, #2
 800b7ca:	438b      	bics	r3, r1
 800b7cc:	6113      	str	r3, [r2, #16]
	if (myID)
 800b7ce:	4b78      	ldr	r3, [pc, #480]	; (800b9b0 <SaveToRO+0x220>)
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d115      	bne.n	800b802 <SaveToRO+0x72>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b7d6:	4b77      	ldr	r3, [pc, #476]	; (800b9b4 <SaveToRO+0x224>)
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d100      	bne.n	800b7e0 <SaveToRO+0x50>
 800b7de:	e0dd      	b.n	800b99c <SaveToRO+0x20c>
 800b7e0:	9d00      	ldr	r5, [sp, #0]
 800b7e2:	4e75      	ldr	r6, [pc, #468]	; (800b9b8 <SaveToRO+0x228>)
		if (snippets[s].cond.conditionType) 
 800b7e4:	4b75      	ldr	r3, [pc, #468]	; (800b9bc <SaveToRO+0x22c>)
 800b7e6:	469a      	mov	sl, r3
 800b7e8:	e092      	b.n	800b910 <SaveToRO+0x180>
		return pFlash.ErrorCode;
 800b7ea:	4b75      	ldr	r3, [pc, #468]	; (800b9c0 <SaveToRO+0x230>)
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	9301      	str	r3, [sp, #4]
}
 800b7f2:	9801      	ldr	r0, [sp, #4]
 800b7f4:	b009      	add	sp, #36	; 0x24
 800b7f6:	bcf0      	pop	{r4, r5, r6, r7}
 800b7f8:	46bb      	mov	fp, r7
 800b7fa:	46b2      	mov	sl, r6
 800b7fc:	46a9      	mov	r9, r5
 800b7fe:	46a0      	mov	r8, r4
 800b800:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b802:	4a70      	ldr	r2, [pc, #448]	; (800b9c4 <SaveToRO+0x234>)
 800b804:	7812      	ldrb	r2, [r2, #0]
 800b806:	0212      	lsls	r2, r2, #8
 800b808:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b80a:	b292      	uxth	r2, r2
 800b80c:	2300      	movs	r3, #0
 800b80e:	4965      	ldr	r1, [pc, #404]	; (800b9a4 <SaveToRO+0x214>)
 800b810:	2001      	movs	r0, #1
 800b812:	f006 fba7 	bl	8011f64 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b816:	4864      	ldr	r0, [pc, #400]	; (800b9a8 <SaveToRO+0x218>)
 800b818:	f006 fb76 	bl	8011f08 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d111      	bne.n	800b844 <SaveToRO+0xb4>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b820:	4a62      	ldr	r2, [pc, #392]	; (800b9ac <SaveToRO+0x21c>)
 800b822:	6913      	ldr	r3, [r2, #16]
 800b824:	2101      	movs	r1, #1
 800b826:	438b      	bics	r3, r1
 800b828:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b82a:	4b66      	ldr	r3, [pc, #408]	; (800b9c4 <SaveToRO+0x234>)
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	2201      	movs	r2, #1
 800b830:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800b832:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800b834:	2b00      	cmp	r3, #0
 800b836:	d0ce      	beq.n	800b7d6 <SaveToRO+0x46>
 800b838:	2316      	movs	r3, #22
 800b83a:	469b      	mov	fp, r3
 800b83c:	4b62      	ldr	r3, [pc, #392]	; (800b9c8 <SaveToRO+0x238>)
 800b83e:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800b840:	4698      	mov	r8, r3
 800b842:	e02c      	b.n	800b89e <SaveToRO+0x10e>
			return pFlash.ErrorCode;
 800b844:	4b5e      	ldr	r3, [pc, #376]	; (800b9c0 <SaveToRO+0x230>)
 800b846:	69db      	ldr	r3, [r3, #28]
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	9301      	str	r3, [sp, #4]
 800b84c:	e7d1      	b.n	800b7f2 <SaveToRO+0x62>
						return pFlash.ErrorCode;
 800b84e:	4b5c      	ldr	r3, [pc, #368]	; (800b9c0 <SaveToRO+0x230>)
 800b850:	69db      	ldr	r3, [r3, #28]
 800b852:	b2db      	uxtb	r3, r3
 800b854:	9301      	str	r3, [sp, #4]
 800b856:	e7cc      	b.n	800b7f2 <SaveToRO+0x62>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b858:	3402      	adds	r4, #2
 800b85a:	42b4      	cmp	r4, r6
 800b85c:	d017      	beq.n	800b88e <SaveToRO+0xfe>
				if (array[i-1][0]) {
 800b85e:	4643      	mov	r3, r8
 800b860:	5afb      	ldrh	r3, [r7, r3]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0f8      	beq.n	800b858 <SaveToRO+0xc8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b866:	8822      	ldrh	r2, [r4, #0]
 800b868:	4b4e      	ldr	r3, [pc, #312]	; (800b9a4 <SaveToRO+0x214>)
 800b86a:	18e9      	adds	r1, r5, r3
 800b86c:	2300      	movs	r3, #0
 800b86e:	2001      	movs	r0, #1
 800b870:	f006 fb78 	bl	8011f64 <HAL_FLASH_Program>
					add += 2;
 800b874:	3502      	adds	r5, #2
 800b876:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b878:	484b      	ldr	r0, [pc, #300]	; (800b9a8 <SaveToRO+0x218>)
 800b87a:	f006 fb45 	bl	8011f08 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b87e:	2800      	cmp	r0, #0
 800b880:	d1e5      	bne.n	800b84e <SaveToRO+0xbe>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b882:	4a4a      	ldr	r2, [pc, #296]	; (800b9ac <SaveToRO+0x21c>)
 800b884:	6913      	ldr	r3, [r2, #16]
 800b886:	2101      	movs	r1, #1
 800b888:	438b      	bics	r3, r1
 800b88a:	6113      	str	r3, [r2, #16]
 800b88c:	e7e4      	b.n	800b858 <SaveToRO+0xc8>
		for(uint8_t i=1 ; i<=N ; i++)
 800b88e:	464b      	mov	r3, r9
 800b890:	3301      	adds	r3, #1
 800b892:	b2db      	uxtb	r3, r3
 800b894:	4699      	mov	r9, r3
 800b896:	4b4b      	ldr	r3, [pc, #300]	; (800b9c4 <SaveToRO+0x234>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	454b      	cmp	r3, r9
 800b89c:	d39b      	bcc.n	800b7d6 <SaveToRO+0x46>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b89e:	465e      	mov	r6, fp
 800b8a0:	464b      	mov	r3, r9
 800b8a2:	435e      	muls	r6, r3
 800b8a4:	0034      	movs	r4, r6
 800b8a6:	3c16      	subs	r4, #22
 800b8a8:	4454      	add	r4, sl
 800b8aa:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800b8ac:	1e5f      	subs	r7, r3, #1
 800b8ae:	465b      	mov	r3, fp
 800b8b0:	435f      	muls	r7, r3
 800b8b2:	e7d4      	b.n	800b85e <SaveToRO+0xce>
					return pFlash.ErrorCode;
 800b8b4:	4b42      	ldr	r3, [pc, #264]	; (800b9c0 <SaveToRO+0x230>)
 800b8b6:	69db      	ldr	r3, [r3, #28]
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	9301      	str	r3, [sp, #4]
 800b8bc:	e799      	b.n	800b7f2 <SaveToRO+0x62>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b8be:	4643      	mov	r3, r8
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	4393      	bics	r3, r2
 800b8c6:	4642      	mov	r2, r8
 800b8c8:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b8ca:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b8cc:	3401      	adds	r4, #1
 800b8ce:	b2e4      	uxtb	r4, r4
 800b8d0:	68ef      	ldr	r7, [r5, #12]
 800b8d2:	0038      	movs	r0, r7
 800b8d4:	f7f4 fc20 	bl	8000118 <strlen>
 800b8d8:	3001      	adds	r0, #1
 800b8da:	0840      	lsrs	r0, r0, #1
 800b8dc:	4284      	cmp	r4, r0
 800b8de:	d210      	bcs.n	800b902 <SaveToRO+0x172>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b8e0:	0063      	lsls	r3, r4, #1
 800b8e2:	5afa      	ldrh	r2, [r7, r3]
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	0031      	movs	r1, r6
 800b8e8:	2001      	movs	r0, #1
 800b8ea:	f006 fb3b 	bl	8011f64 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b8ee:	4658      	mov	r0, fp
 800b8f0:	f006 fb0a 	bl	8011f08 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d0e2      	beq.n	800b8be <SaveToRO+0x12e>
					return pFlash.ErrorCode;
 800b8f8:	4b31      	ldr	r3, [pc, #196]	; (800b9c0 <SaveToRO+0x230>)
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	e777      	b.n	800b7f2 <SaveToRO+0x62>
 800b902:	464d      	mov	r5, r9
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b904:	3501      	adds	r5, #1
 800b906:	b2ed      	uxtb	r5, r5
 800b908:	4b2a      	ldr	r3, [pc, #168]	; (800b9b4 <SaveToRO+0x224>)
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	42ab      	cmp	r3, r5
 800b90e:	d945      	bls.n	800b99c <SaveToRO+0x20c>
		if (snippets[s].cond.conditionType) 
 800b910:	9500      	str	r5, [sp, #0]
 800b912:	00ab      	lsls	r3, r5, #2
 800b914:	195b      	adds	r3, r3, r5
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	4652      	mov	r2, sl
 800b91a:	5c9b      	ldrb	r3, [r3, r2]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d0f1      	beq.n	800b904 <SaveToRO+0x174>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b920:	23fe      	movs	r3, #254	; 0xfe
 800b922:	aa02      	add	r2, sp, #8
 800b924:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b926:	00a9      	lsls	r1, r5, #2
 800b928:	1949      	adds	r1, r1, r5
 800b92a:	0089      	lsls	r1, r1, #2
 800b92c:	4b23      	ldr	r3, [pc, #140]	; (800b9bc <SaveToRO+0x22c>)
 800b92e:	469c      	mov	ip, r3
 800b930:	4461      	add	r1, ip
 800b932:	2214      	movs	r2, #20
 800b934:	ab02      	add	r3, sp, #8
 800b936:	1c58      	adds	r0, r3, #1
 800b938:	f008 fcea 	bl	8014310 <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b93c:	2314      	movs	r3, #20
 800b93e:	469b      	mov	fp, r3
 800b940:	44b3      	add	fp, r6
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b942:	ab02      	add	r3, sp, #8
 800b944:	1b9b      	subs	r3, r3, r6
 800b946:	4698      	mov	r8, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b948:	4b17      	ldr	r3, [pc, #92]	; (800b9a8 <SaveToRO+0x218>)
 800b94a:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b94c:	4f17      	ldr	r7, [pc, #92]	; (800b9ac <SaveToRO+0x21c>)
 800b94e:	4644      	mov	r4, r8
 800b950:	46a8      	mov	r8, r5
 800b952:	465d      	mov	r5, fp
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b954:	5ba2      	ldrh	r2, [r4, r6]
 800b956:	2300      	movs	r3, #0
 800b958:	0031      	movs	r1, r6
 800b95a:	2001      	movs	r0, #1
 800b95c:	f006 fb02 	bl	8011f64 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b960:	4648      	mov	r0, r9
 800b962:	f006 fad1 	bl	8011f08 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b966:	2800      	cmp	r0, #0
 800b968:	d1a4      	bne.n	800b8b4 <SaveToRO+0x124>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	2201      	movs	r2, #1
 800b96e:	4393      	bics	r3, r2
 800b970:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b972:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b974:	42b5      	cmp	r5, r6
 800b976:	d1ed      	bne.n	800b954 <SaveToRO+0x1c4>
 800b978:	0004      	movs	r4, r0
 800b97a:	4645      	mov	r5, r8
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b97c:	9a00      	ldr	r2, [sp, #0]
 800b97e:	0093      	lsls	r3, r2, #2
 800b980:	4694      	mov	ip, r2
 800b982:	4463      	add	r3, ip
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4a0d      	ldr	r2, [pc, #52]	; (800b9bc <SaveToRO+0x22c>)
 800b988:	4691      	mov	r9, r2
 800b98a:	4499      	add	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b98c:	4b06      	ldr	r3, [pc, #24]	; (800b9a8 <SaveToRO+0x218>)
 800b98e:	469b      	mov	fp, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b990:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <SaveToRO+0x21c>)
 800b992:	4698      	mov	r8, r3
 800b994:	464b      	mov	r3, r9
 800b996:	46a9      	mov	r9, r5
 800b998:	001d      	movs	r5, r3
 800b99a:	e799      	b.n	800b8d0 <SaveToRO+0x140>
	HAL_FLASH_Lock();
 800b99c:	f006 faaa 	bl	8011ef4 <HAL_FLASH_Lock>
	return result;
 800b9a0:	e727      	b.n	800b7f2 <SaveToRO+0x62>
 800b9a2:	46c0      	nop			; (mov r8, r8)
 800b9a4:	0801d800 	.word	0x0801d800
 800b9a8:	0000c350 	.word	0x0000c350
 800b9ac:	40022000 	.word	0x40022000
 800b9b0:	2000104c 	.word	0x2000104c
 800b9b4:	200011eb 	.word	0x200011eb
 800b9b8:	0801dc00 	.word	0x0801dc00
 800b9bc:	20006d34 	.word	0x20006d34
 800b9c0:	200071d8 	.word	0x200071d8
 800b9c4:	2000001c 	.word	0x2000001c
 800b9c8:	20000aa8 	.word	0x20000aa8

0800b9cc <ClearROtopology>:
{
 800b9cc:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b9ce:	4a07      	ldr	r2, [pc, #28]	; (800b9ec <ClearROtopology+0x20>)
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	4807      	ldr	r0, [pc, #28]	; (800b9f0 <ClearROtopology+0x24>)
 800b9d4:	f008 fca5 	bl	8014322 <memset>
	N = 1; myID = 0;
 800b9d8:	4b06      	ldr	r3, [pc, #24]	; (800b9f4 <ClearROtopology+0x28>)
 800b9da:	2201      	movs	r2, #1
 800b9dc:	701a      	strb	r2, [r3, #0]
 800b9de:	4b06      	ldr	r3, [pc, #24]	; (800b9f8 <ClearROtopology+0x2c>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800b9e4:	f7ff fed4 	bl	800b790 <SaveToRO>
}
 800b9e8:	bd10      	pop	{r4, pc}
 800b9ea:	46c0      	nop			; (mov r8, r8)
 800b9ec:	00000226 	.word	0x00000226
 800b9f0:	20000aa8 	.word	0x20000aa8
 800b9f4:	2000001c 	.word	0x2000001c
 800b9f8:	2000104c 	.word	0x2000104c

0800b9fc <RegisterModuleCLICommands>:
{
 800b9fc:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &demoCommandDefinition );
 800b9fe:	4811      	ldr	r0, [pc, #68]	; (800ba44 <RegisterModuleCLICommands+0x48>)
 800ba00:	f003 fbb4 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &sampleCommandDefinition );
 800ba04:	4810      	ldr	r0, [pc, #64]	; (800ba48 <RegisterModuleCLICommands+0x4c>)
 800ba06:	f003 fbb1 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &streamCommandDefinition);
 800ba0a:	4810      	ldr	r0, [pc, #64]	; (800ba4c <RegisterModuleCLICommands+0x50>)
 800ba0c:	f003 fbae 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &stopCommandDefinition);
 800ba10:	480f      	ldr	r0, [pc, #60]	; (800ba50 <RegisterModuleCLICommands+0x54>)
 800ba12:	f003 fbab 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unitCommandDefinition);
 800ba16:	480f      	ldr	r0, [pc, #60]	; (800ba54 <RegisterModuleCLICommands+0x58>)
 800ba18:	f003 fba8 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &rateCommandDefinition);
 800ba1c:	480e      	ldr	r0, [pc, #56]	; (800ba58 <RegisterModuleCLICommands+0x5c>)
 800ba1e:	f003 fba5 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &calibrationCommandDefinition);
 800ba22:	480e      	ldr	r0, [pc, #56]	; (800ba5c <RegisterModuleCLICommands+0x60>)
 800ba24:	f003 fba2 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &zerocalCommandDefinition);
 800ba28:	480d      	ldr	r0, [pc, #52]	; (800ba60 <RegisterModuleCLICommands+0x64>)
 800ba2a:	f003 fb9f 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &weight1CommandDefinition);
 800ba2e:	480d      	ldr	r0, [pc, #52]	; (800ba64 <RegisterModuleCLICommands+0x68>)
 800ba30:	f003 fb9c 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &weight2CommandDefinition);
 800ba34:	480c      	ldr	r0, [pc, #48]	; (800ba68 <RegisterModuleCLICommands+0x6c>)
 800ba36:	f003 fb99 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dataformatCommandDefinition);
 800ba3a:	480c      	ldr	r0, [pc, #48]	; (800ba6c <RegisterModuleCLICommands+0x70>)
 800ba3c:	f003 fb96 	bl	800f16c <FreeRTOS_CLIRegisterCommand>
}
 800ba40:	bd10      	pop	{r4, pc}
 800ba42:	46c0      	nop			; (mov r8, r8)
 800ba44:	0801d5fc 	.word	0x0801d5fc
 800ba48:	0801d61c 	.word	0x0801d61c
 800ba4c:	0801d63c 	.word	0x0801d63c
 800ba50:	0801d62c 	.word	0x0801d62c
 800ba54:	0801d64c 	.word	0x0801d64c
 800ba58:	0801d60c 	.word	0x0801d60c
 800ba5c:	0801d5dc 	.word	0x0801d5dc
 800ba60:	0801d67c 	.word	0x0801d67c
 800ba64:	0801d65c 	.word	0x0801d65c
 800ba68:	0801d66c 	.word	0x0801d66c
 800ba6c:	0801d5ec 	.word	0x0801d5ec

0800ba70 <GetPort>:
	if (huart->Instance == USART4)
 800ba70:	6800      	ldr	r0, [r0, #0]
 800ba72:	4b0f      	ldr	r3, [pc, #60]	; (800bab0 <GetPort+0x40>)
 800ba74:	4298      	cmp	r0, r3
 800ba76:	d012      	beq.n	800ba9e <GetPort+0x2e>
	else if (huart->Instance == USART2)
 800ba78:	4b0e      	ldr	r3, [pc, #56]	; (800bab4 <GetPort+0x44>)
 800ba7a:	4298      	cmp	r0, r3
 800ba7c:	d011      	beq.n	800baa2 <GetPort+0x32>
	else if (huart->Instance == USART6)
 800ba7e:	4b0e      	ldr	r3, [pc, #56]	; (800bab8 <GetPort+0x48>)
 800ba80:	4298      	cmp	r0, r3
 800ba82:	d010      	beq.n	800baa6 <GetPort+0x36>
	else if (huart->Instance == USART3)
 800ba84:	4b0d      	ldr	r3, [pc, #52]	; (800babc <GetPort+0x4c>)
 800ba86:	4298      	cmp	r0, r3
 800ba88:	d00f      	beq.n	800baaa <GetPort+0x3a>
			return P5;
 800ba8a:	4b0d      	ldr	r3, [pc, #52]	; (800bac0 <GetPort+0x50>)
 800ba8c:	469c      	mov	ip, r3
 800ba8e:	4460      	add	r0, ip
 800ba90:	1e43      	subs	r3, r0, #1
 800ba92:	4198      	sbcs	r0, r3
 800ba94:	4240      	negs	r0, r0
 800ba96:	2304      	movs	r3, #4
 800ba98:	4398      	bics	r0, r3
 800ba9a:	3005      	adds	r0, #5
}
 800ba9c:	4770      	bx	lr
			return P1;
 800ba9e:	2001      	movs	r0, #1
 800baa0:	e7fc      	b.n	800ba9c <GetPort+0x2c>
			return P2;
 800baa2:	2002      	movs	r0, #2
 800baa4:	e7fa      	b.n	800ba9c <GetPort+0x2c>
			return P3;
 800baa6:	2003      	movs	r0, #3
 800baa8:	e7f8      	b.n	800ba9c <GetPort+0x2c>
			return P4;
 800baaa:	2004      	movs	r0, #4
 800baac:	e7f6      	b.n	800ba9c <GetPort+0x2c>
 800baae:	46c0      	nop			; (mov r8, r8)
 800bab0:	40004c00 	.word	0x40004c00
 800bab4:	40004400 	.word	0x40004400
 800bab8:	40011400 	.word	0x40011400
 800babc:	40004800 	.word	0x40004800
 800bac0:	bfffb000 	.word	0xbfffb000

0800bac4 <readHX711>:
{
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while(HAL_GPIO_ReadPin(GPIOA,DOUT)==1){	}
 800bac6:	2580      	movs	r5, #128	; 0x80
 800bac8:	00ed      	lsls	r5, r5, #3
 800baca:	2490      	movs	r4, #144	; 0x90
 800bacc:	05e4      	lsls	r4, r4, #23
 800bace:	0029      	movs	r1, r5
 800bad0:	0020      	movs	r0, r4
 800bad2:	f006 fc1d 	bl	8012310 <HAL_GPIO_ReadPin>
 800bad6:	2801      	cmp	r0, #1
 800bad8:	d0f9      	beq.n	800bace <readHX711+0xa>
	portENTER_CRITICAL();
 800bada:	f005 f9cf 	bl	8010e7c <vPortEnterCritical>
		for (j=0; j<pulses; j++)
 800bade:	4b2d      	ldr	r3, [pc, #180]	; (800bb94 <readHX711+0xd0>)
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d032      	beq.n	800bb4c <readHX711+0x88>
 800bae6:	2400      	movs	r4, #0
			HAL_GPIO_WritePin(GPIOA,PD_SCK, GPIO_PIN_SET);
 800bae8:	2780      	movs	r7, #128	; 0x80
 800baea:	00bf      	lsls	r7, r7, #2
 800baec:	2690      	movs	r6, #144	; 0x90
 800baee:	05f6      	lsls	r6, r6, #23
				Current_pin_state=HAL_GPIO_ReadPin(GPIOA,DOUT);
 800baf0:	4d29      	ldr	r5, [pc, #164]	; (800bb98 <readHX711+0xd4>)
 800baf2:	e010      	b.n	800bb16 <readHX711+0x52>
					Data = Data<<1;				
 800baf4:	0040      	lsls	r0, r0, #1
 800baf6:	4b29      	ldr	r3, [pc, #164]	; (800bb9c <readHX711+0xd8>)
 800baf8:	6018      	str	r0, [r3, #0]
			HAL_GPIO_WritePin(GPIOA,PD_SCK, GPIO_PIN_RESET);
 800bafa:	2200      	movs	r2, #0
 800bafc:	0039      	movs	r1, r7
 800bafe:	0030      	movs	r0, r6
 800bb00:	f006 fc0c 	bl	801231c <HAL_GPIO_WritePin>
			Delay_us(1);
 800bb04:	2001      	movs	r0, #1
 800bb06:	f002 ffb5 	bl	800ea74 <StartMicroDelay>
		for (j=0; j<pulses; j++)
 800bb0a:	3401      	adds	r4, #1
 800bb0c:	b2e4      	uxtb	r4, r4
 800bb0e:	4b21      	ldr	r3, [pc, #132]	; (800bb94 <readHX711+0xd0>)
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	42a3      	cmp	r3, r4
 800bb14:	d91a      	bls.n	800bb4c <readHX711+0x88>
			HAL_GPIO_WritePin(GPIOA,PD_SCK, GPIO_PIN_SET);
 800bb16:	2201      	movs	r2, #1
 800bb18:	0039      	movs	r1, r7
 800bb1a:	0030      	movs	r0, r6
 800bb1c:	f006 fbfe 	bl	801231c <HAL_GPIO_WritePin>
			Delay_us(1);
 800bb20:	2001      	movs	r0, #1
 800bb22:	f002 ffa7 	bl	800ea74 <StartMicroDelay>
			if(j<24)
 800bb26:	2c17      	cmp	r4, #23
 800bb28:	d8e7      	bhi.n	800bafa <readHX711+0x36>
				Current_pin_state=HAL_GPIO_ReadPin(GPIOA,DOUT);
 800bb2a:	2180      	movs	r1, #128	; 0x80
 800bb2c:	00c9      	lsls	r1, r1, #3
 800bb2e:	0030      	movs	r0, r6
 800bb30:	f006 fbee 	bl	8012310 <HAL_GPIO_ReadPin>
 800bb34:	1e43      	subs	r3, r0, #1
 800bb36:	4198      	sbcs	r0, r3
 800bb38:	b2c0      	uxtb	r0, r0
 800bb3a:	7028      	strb	r0, [r5, #0]
				Data|=Current_pin_state; 
 800bb3c:	4b17      	ldr	r3, [pc, #92]	; (800bb9c <readHX711+0xd8>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4318      	orrs	r0, r3
				if(j<23)			
 800bb42:	2c16      	cmp	r4, #22
 800bb44:	d9d6      	bls.n	800baf4 <readHX711+0x30>
				Data|=Current_pin_state; 
 800bb46:	4b15      	ldr	r3, [pc, #84]	; (800bb9c <readHX711+0xd8>)
 800bb48:	6018      	str	r0, [r3, #0]
 800bb4a:	e7d6      	b.n	800bafa <readHX711+0x36>
		value=Data;
 800bb4c:	4c14      	ldr	r4, [pc, #80]	; (800bba0 <readHX711+0xdc>)
 800bb4e:	4b13      	ldr	r3, [pc, #76]	; (800bb9c <readHX711+0xd8>)
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	6022      	str	r2, [r4, #0]
		Data=0;
 800bb54:	2200      	movs	r2, #0
 800bb56:	601a      	str	r2, [r3, #0]
	portEXIT_CRITICAL();
 800bb58:	f005 f99c 	bl	8010e94 <vPortExitCritical>
	if(value>ADC_full_range)
 800bb5c:	6820      	ldr	r0, [r4, #0]
 800bb5e:	2380      	movs	r3, #128	; 0x80
 800bb60:	041b      	lsls	r3, r3, #16
 800bb62:	4298      	cmp	r0, r3
 800bb64:	d310      	bcc.n	800bb88 <readHX711+0xc4>
		value=(~value&0x00FFFFFF);
 800bb66:	43c0      	mvns	r0, r0
 800bb68:	0200      	lsls	r0, r0, #8
 800bb6a:	0a00      	lsrs	r0, r0, #8
		value+=1;        // the output of the ADC
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	4b0c      	ldr	r3, [pc, #48]	; (800bba0 <readHX711+0xdc>)
 800bb70:	6018      	str	r0, [r3, #0]
		valuef=-(float)value;
 800bb72:	f7f5 fd25 	bl	80015c0 <__aeabi_ui2f>
 800bb76:	2380      	movs	r3, #128	; 0x80
 800bb78:	061b      	lsls	r3, r3, #24
 800bb7a:	469c      	mov	ip, r3
 800bb7c:	4460      	add	r0, ip
 800bb7e:	4b09      	ldr	r3, [pc, #36]	; (800bba4 <readHX711+0xe0>)
 800bb80:	6018      	str	r0, [r3, #0]
	return (valuef);		
 800bb82:	4b08      	ldr	r3, [pc, #32]	; (800bba4 <readHX711+0xe0>)
 800bb84:	6818      	ldr	r0, [r3, #0]
}
 800bb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		valuef=(float)value;
 800bb88:	f7f5 fd1a 	bl	80015c0 <__aeabi_ui2f>
 800bb8c:	4b05      	ldr	r3, [pc, #20]	; (800bba4 <readHX711+0xe0>)
 800bb8e:	6018      	str	r0, [r3, #0]
 800bb90:	e7f7      	b.n	800bb82 <readHX711+0xbe>
 800bb92:	46c0      	nop			; (mov r8, r8)
 800bb94:	20001abe 	.word	0x20001abe
 800bb98:	20001698 	.word	0x20001698
 800bb9c:	200016a0 	.word	0x200016a0
 800bba0:	20001ad0 	.word	0x20001ad0
 800bba4:	20001ad4 	.word	0x20001ad4

0800bba8 <weightCalculation>:
{
 800bba8:	b570      	push	{r4, r5, r6, lr}
	rawvalue=(valuef*0.5*AVDD)/(ADC_full_range*gain) + cell_drift - IC_drift - Zero_Drift;  //+0.000022;
 800bbaa:	4b23      	ldr	r3, [pc, #140]	; (800bc38 <weightCalculation+0x90>)
 800bbac:	6818      	ldr	r0, [r3, #0]
 800bbae:	f7f7 fb5b 	bl	8003268 <__aeabi_f2d>
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	4b21      	ldr	r3, [pc, #132]	; (800bc3c <weightCalculation+0x94>)
 800bbb6:	f7f6 fcaf 	bl	8002518 <__aeabi_dmul>
 800bbba:	2200      	movs	r2, #0
 800bbbc:	4b20      	ldr	r3, [pc, #128]	; (800bc40 <weightCalculation+0x98>)
 800bbbe:	f7f6 fcab 	bl	8002518 <__aeabi_dmul>
 800bbc2:	0004      	movs	r4, r0
 800bbc4:	000d      	movs	r5, r1
 800bbc6:	4b1f      	ldr	r3, [pc, #124]	; (800bc44 <weightCalculation+0x9c>)
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	05d8      	lsls	r0, r3, #23
 800bbcc:	1ac0      	subs	r0, r0, r3
 800bbce:	f7f7 faf5 	bl	80031bc <__aeabi_i2d>
 800bbd2:	0002      	movs	r2, r0
 800bbd4:	000b      	movs	r3, r1
 800bbd6:	0020      	movs	r0, r4
 800bbd8:	0029      	movs	r1, r5
 800bbda:	f7f6 f897 	bl	8001d0c <__aeabi_ddiv>
 800bbde:	0004      	movs	r4, r0
 800bbe0:	000d      	movs	r5, r1
 800bbe2:	4b19      	ldr	r3, [pc, #100]	; (800bc48 <weightCalculation+0xa0>)
 800bbe4:	6818      	ldr	r0, [r3, #0]
 800bbe6:	f7f7 fb3f 	bl	8003268 <__aeabi_f2d>
 800bbea:	0002      	movs	r2, r0
 800bbec:	000b      	movs	r3, r1
 800bbee:	0020      	movs	r0, r4
 800bbf0:	0029      	movs	r1, r5
 800bbf2:	f7f5 fd21 	bl	8001638 <__aeabi_dadd>
 800bbf6:	4a15      	ldr	r2, [pc, #84]	; (800bc4c <weightCalculation+0xa4>)
 800bbf8:	4b15      	ldr	r3, [pc, #84]	; (800bc50 <weightCalculation+0xa8>)
 800bbfa:	f7f6 fef9 	bl	80029f0 <__aeabi_dsub>
 800bbfe:	0004      	movs	r4, r0
 800bc00:	000d      	movs	r5, r1
 800bc02:	4b14      	ldr	r3, [pc, #80]	; (800bc54 <weightCalculation+0xac>)
 800bc04:	6818      	ldr	r0, [r3, #0]
 800bc06:	f7f7 fb2f 	bl	8003268 <__aeabi_f2d>
 800bc0a:	0002      	movs	r2, r0
 800bc0c:	000b      	movs	r3, r1
 800bc0e:	0020      	movs	r0, r4
 800bc10:	0029      	movs	r1, r5
 800bc12:	f7f6 feed 	bl	80029f0 <__aeabi_dsub>
 800bc16:	f7f7 fb6f 	bl	80032f8 <__aeabi_d2f>
 800bc1a:	1c04      	adds	r4, r0, #0
 800bc1c:	4b0e      	ldr	r3, [pc, #56]	; (800bc58 <weightCalculation+0xb0>)
 800bc1e:	6018      	str	r0, [r3, #0]
	weight=(rawvalue*full_scale)/calibration_factor;
 800bc20:	4b0e      	ldr	r3, [pc, #56]	; (800bc5c <weightCalculation+0xb4>)
 800bc22:	8818      	ldrh	r0, [r3, #0]
 800bc24:	f7f5 fc86 	bl	8001534 <__aeabi_i2f>
 800bc28:	1c21      	adds	r1, r4, #0
 800bc2a:	f7f5 f981 	bl	8000f30 <__aeabi_fmul>
 800bc2e:	4b0c      	ldr	r3, [pc, #48]	; (800bc60 <weightCalculation+0xb8>)
 800bc30:	6819      	ldr	r1, [r3, #0]
 800bc32:	f7f4 ffb3 	bl	8000b9c <__aeabi_fdiv>
}
 800bc36:	bd70      	pop	{r4, r5, r6, pc}
 800bc38:	20001ad4 	.word	0x20001ad4
 800bc3c:	3fe00000 	.word	0x3fe00000
 800bc40:	40080000 	.word	0x40080000
 800bc44:	2000008c 	.word	0x2000008c
 800bc48:	20000088 	.word	0x20000088
 800bc4c:	62317873 	.word	0x62317873
 800bc50:	3ee3abd9 	.word	0x3ee3abd9
 800bc54:	20001ab0 	.word	0x20001ab0
 800bc58:	20001ac0 	.word	0x20001ac0
 800bc5c:	20001abc 	.word	0x20001abc
 800bc60:	20001ab4 	.word	0x20001ab4

0800bc64 <SetHX711Rate>:
{
 800bc64:	b510      	push	{r4, lr}
 800bc66:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800bc68:	2180      	movs	r1, #128	; 0x80
 800bc6a:	2090      	movs	r0, #144	; 0x90
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	0089      	lsls	r1, r1, #2
 800bc70:	05c0      	lsls	r0, r0, #23
 800bc72:	f006 fb53 	bl	801231c <HAL_GPIO_WritePin>
	rate=Data_Rate;
 800bc76:	4b0d      	ldr	r3, [pc, #52]	; (800bcac <SetHX711Rate+0x48>)
 800bc78:	701c      	strb	r4, [r3, #0]
	switch(rate)
 800bc7a:	2c0a      	cmp	r4, #10
 800bc7c:	d008      	beq.n	800bc90 <SetHX711Rate+0x2c>
 800bc7e:	2c50      	cmp	r4, #80	; 0x50
 800bc80:	d00d      	beq.n	800bc9e <SetHX711Rate+0x3a>
		default: HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_RESET);
 800bc82:	2090      	movs	r0, #144	; 0x90
 800bc84:	2200      	movs	r2, #0
 800bc86:	2140      	movs	r1, #64	; 0x40
 800bc88:	05c0      	lsls	r0, r0, #23
 800bc8a:	f006 fb47 	bl	801231c <HAL_GPIO_WritePin>
}
 800bc8e:	e005      	b.n	800bc9c <SetHX711Rate+0x38>
		case(10): HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_RESET); break;
 800bc90:	2090      	movs	r0, #144	; 0x90
 800bc92:	2200      	movs	r2, #0
 800bc94:	2140      	movs	r1, #64	; 0x40
 800bc96:	05c0      	lsls	r0, r0, #23
 800bc98:	f006 fb40 	bl	801231c <HAL_GPIO_WritePin>
}
 800bc9c:	bd10      	pop	{r4, pc}
		case(80): HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_SET); break;
 800bc9e:	2090      	movs	r0, #144	; 0x90
 800bca0:	2201      	movs	r2, #1
 800bca2:	2140      	movs	r1, #64	; 0x40
 800bca4:	05c0      	lsls	r0, r0, #23
 800bca6:	f006 fb39 	bl	801231c <HAL_GPIO_WritePin>
 800bcaa:	e7f7      	b.n	800bc9c <SetHX711Rate+0x38>
 800bcac:	20001abf 	.word	0x20001abf

0800bcb0 <rateCommand>:
{
 800bcb0:	b530      	push	{r4, r5, lr}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	0004      	movs	r4, r0
 800bcb6:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800bcbc:	2c00      	cmp	r4, #0
 800bcbe:	d020      	beq.n	800bd02 <rateCommand+0x52>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800bcc0:	aa01      	add	r2, sp, #4
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	f003 fafc 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800bcc8:	0005      	movs	r5, r0
  if (!strncmp((const char *)pcParameterString1, "10", 2))
 800bcca:	2202      	movs	r2, #2
 800bccc:	4915      	ldr	r1, [pc, #84]	; (800bd24 <rateCommand+0x74>)
 800bcce:	f008 fd60 	bl	8014792 <strncmp>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d017      	beq.n	800bd06 <rateCommand+0x56>
  else if (!strncmp((const char *)pcParameterString1, "80", 2))
 800bcd6:	2202      	movs	r2, #2
 800bcd8:	4913      	ldr	r1, [pc, #76]	; (800bd28 <rateCommand+0x78>)
 800bcda:	0028      	movs	r0, r5
 800bcdc:	f008 fd59 	bl	8014792 <strncmp>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d119      	bne.n	800bd18 <rateCommand+0x68>
    rate = 80;      // 80SPS
 800bce4:	4b11      	ldr	r3, [pc, #68]	; (800bd2c <rateCommand+0x7c>)
 800bce6:	2250      	movs	r2, #80	; 0x50
 800bce8:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement rate: 80\r\n" );
 800bcea:	3a34      	subs	r2, #52	; 0x34
 800bcec:	4910      	ldr	r1, [pc, #64]	; (800bd30 <rateCommand+0x80>)
 800bcee:	0020      	movs	r0, r4
 800bcf0:	f008 fb0e 	bl	8014310 <memcpy>
	SetHX711Rate(rate);
 800bcf4:	4b0d      	ldr	r3, [pc, #52]	; (800bd2c <rateCommand+0x7c>)
 800bcf6:	7818      	ldrb	r0, [r3, #0]
 800bcf8:	f7ff ffb4 	bl	800bc64 <SetHX711Rate>
}
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	b003      	add	sp, #12
 800bd00:	bd30      	pop	{r4, r5, pc}
  configASSERT( pcWriteBuffer );
 800bd02:	b672      	cpsid	i
 800bd04:	e7fe      	b.n	800bd04 <rateCommand+0x54>
    rate = 10;      // 10SPS
 800bd06:	4b09      	ldr	r3, [pc, #36]	; (800bd2c <rateCommand+0x7c>)
 800bd08:	220a      	movs	r2, #10
 800bd0a:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement rate: 10\r\n" );
 800bd0c:	3212      	adds	r2, #18
 800bd0e:	4909      	ldr	r1, [pc, #36]	; (800bd34 <rateCommand+0x84>)
 800bd10:	0020      	movs	r0, r4
 800bd12:	f008 fafd 	bl	8014310 <memcpy>
 800bd16:	e7ed      	b.n	800bcf4 <rateCommand+0x44>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800bd18:	2213      	movs	r2, #19
 800bd1a:	4907      	ldr	r1, [pc, #28]	; (800bd38 <rateCommand+0x88>)
 800bd1c:	0020      	movs	r0, r4
 800bd1e:	f008 faf7 	bl	8014310 <memcpy>
 800bd22:	e7e7      	b.n	800bcf4 <rateCommand+0x44>
 800bd24:	0801b8ac 	.word	0x0801b8ac
 800bd28:	0801cf48 	.word	0x0801cf48
 800bd2c:	20001abf 	.word	0x20001abf
 800bd30:	0801cf4c 	.word	0x0801cf4c
 800bd34:	0801cf2c 	.word	0x0801cf2c
 800bd38:	0801b0b8 	.word	0x0801b0b8

0800bd3c <formatModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE formatModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	0004      	movs	r4, r0
 800bd42:	0010      	movs	r0, r2
	//Module_Status result = H26R0_OK;
  int8_t *pcParameterString1;
  portBASE_TYPE xParameterStringLength1 = 0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	9301      	str	r3, [sp, #4]

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800bd48:	2c00      	cmp	r4, #0
 800bd4a:	d014      	beq.n	800bd76 <formatModParamCommand+0x3a>

  /* 1st parameter for naming of uart port: P1 to P6 */
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800bd4c:	aa01      	add	r2, sp, #4
 800bd4e:	2101      	movs	r1, #1
 800bd50:	f003 fab6 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
  if (!strncmp((const char *)pcParameterString1, "u", 1))
 800bd54:	7803      	ldrb	r3, [r0, #0]
 800bd56:	2b75      	cmp	r3, #117	; 0x75
 800bd58:	d00f      	beq.n	800bd7a <formatModParamCommand+0x3e>
  {
    H26R0_DATA_FORMAT = FMT_UINT32;      
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: uint\r\n" );
  }
  else if (!strncmp((const char *)pcParameterString1, "f", 1))
 800bd5a:	2b66      	cmp	r3, #102	; 0x66
 800bd5c:	d016      	beq.n	800bd8c <formatModParamCommand+0x50>
    H26R0_DATA_FORMAT = FMT_FLOAT;        
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: float\r\n" );
  }
	else
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800bd5e:	2213      	movs	r2, #19
 800bd60:	490f      	ldr	r1, [pc, #60]	; (800bda0 <formatModParamCommand+0x64>)
 800bd62:	0020      	movs	r0, r4
 800bd64:	f008 fad4 	bl	8014310 <memcpy>
	}
	SetHX711Rate(rate);
 800bd68:	4b0e      	ldr	r3, [pc, #56]	; (800bda4 <formatModParamCommand+0x68>)
 800bd6a:	7818      	ldrb	r0, [r3, #0]
 800bd6c:	f7ff ff7a 	bl	800bc64 <SetHX711Rate>
	return pdFALSE;	
}
 800bd70:	2000      	movs	r0, #0
 800bd72:	b002      	add	sp, #8
 800bd74:	bd10      	pop	{r4, pc}
  configASSERT( pcWriteBuffer );
 800bd76:	b672      	cpsid	i
 800bd78:	e7fe      	b.n	800bd78 <formatModParamCommand+0x3c>
    H26R0_DATA_FORMAT = FMT_UINT32;      
 800bd7a:	4b0b      	ldr	r3, [pc, #44]	; (800bda8 <formatModParamCommand+0x6c>)
 800bd7c:	2205      	movs	r2, #5
 800bd7e:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: uint\r\n" );
 800bd80:	3214      	adds	r2, #20
 800bd82:	490a      	ldr	r1, [pc, #40]	; (800bdac <formatModParamCommand+0x70>)
 800bd84:	0020      	movs	r0, r4
 800bd86:	f008 fac3 	bl	8014310 <memcpy>
 800bd8a:	e7ed      	b.n	800bd68 <formatModParamCommand+0x2c>
    H26R0_DATA_FORMAT = FMT_FLOAT;        
 800bd8c:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <formatModParamCommand+0x6c>)
 800bd8e:	2207      	movs	r2, #7
 800bd90:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: float\r\n" );
 800bd92:	3213      	adds	r2, #19
 800bd94:	4906      	ldr	r1, [pc, #24]	; (800bdb0 <formatModParamCommand+0x74>)
 800bd96:	0020      	movs	r0, r4
 800bd98:	f008 faba 	bl	8014310 <memcpy>
 800bd9c:	e7e4      	b.n	800bd68 <formatModParamCommand+0x2c>
 800bd9e:	46c0      	nop			; (mov r8, r8)
 800bda0:	0801b0b8 	.word	0x0801b0b8
 800bda4:	20001abf 	.word	0x20001abf
 800bda8:	20000084 	.word	0x20000084
 800bdac:	0801cf68 	.word	0x0801cf68
 800bdb0:	0801cf84 	.word	0x0801cf84

0800bdb4 <SetHX711Gain>:
	switch(ch)
 800bdb4:	2801      	cmp	r0, #1
 800bdb6:	d005      	beq.n	800bdc4 <SetHX711Gain+0x10>
 800bdb8:	2802      	cmp	r0, #2
 800bdba:	d00a      	beq.n	800bdd2 <SetHX711Gain+0x1e>
		default: pulses=25;
 800bdbc:	4b08      	ldr	r3, [pc, #32]	; (800bde0 <SetHX711Gain+0x2c>)
 800bdbe:	2219      	movs	r2, #25
 800bdc0:	701a      	strb	r2, [r3, #0]
}
 800bdc2:	e005      	b.n	800bdd0 <SetHX711Gain+0x1c>
		case(1): pulses=25;	gain=128; break;  //Chanel A, Gain factor 128
 800bdc4:	4b06      	ldr	r3, [pc, #24]	; (800bde0 <SetHX711Gain+0x2c>)
 800bdc6:	2219      	movs	r2, #25
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	4b06      	ldr	r3, [pc, #24]	; (800bde4 <SetHX711Gain+0x30>)
 800bdcc:	3267      	adds	r2, #103	; 0x67
 800bdce:	701a      	strb	r2, [r3, #0]
}
 800bdd0:	4770      	bx	lr
		case(2): pulses=27; gain=32;	break;  //Chanel B, Gain factor 32
 800bdd2:	4b03      	ldr	r3, [pc, #12]	; (800bde0 <SetHX711Gain+0x2c>)
 800bdd4:	221b      	movs	r2, #27
 800bdd6:	701a      	strb	r2, [r3, #0]
 800bdd8:	4b02      	ldr	r3, [pc, #8]	; (800bde4 <SetHX711Gain+0x30>)
 800bdda:	3205      	adds	r2, #5
 800bddc:	701a      	strb	r2, [r3, #0]
 800bdde:	e7f7      	b.n	800bdd0 <SetHX711Gain+0x1c>
 800bde0:	20001abe 	.word	0x20001abe
 800bde4:	2000008c 	.word	0x2000008c

0800bde8 <Calibration>:
{
 800bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdea:	0004      	movs	r4, r0
 800bdec:	1c0d      	adds	r5, r1, #0
 800bdee:	1c10      	adds	r0, r2, #0
	cell_output=Cell_Output;
 800bdf0:	4e1a      	ldr	r6, [pc, #104]	; (800be5c <Calibration+0x74>)
 800bdf2:	6031      	str	r1, [r6, #0]
	full_scale=Full_Scale;
 800bdf4:	4b1a      	ldr	r3, [pc, #104]	; (800be60 <Calibration+0x78>)
 800bdf6:	801c      	strh	r4, [r3, #0]
	cell_drift=Cell_Drift/1000.0f;
 800bdf8:	4f1a      	ldr	r7, [pc, #104]	; (800be64 <Calibration+0x7c>)
 800bdfa:	491b      	ldr	r1, [pc, #108]	; (800be68 <Calibration+0x80>)
 800bdfc:	f7f4 fece 	bl	8000b9c <__aeabi_fdiv>
 800be00:	6038      	str	r0, [r7, #0]
	calibration_factor=cell_output*AVDD/1000.0f;		// mV
 800be02:	491a      	ldr	r1, [pc, #104]	; (800be6c <Calibration+0x84>)
 800be04:	1c28      	adds	r0, r5, #0
 800be06:	f7f5 f893 	bl	8000f30 <__aeabi_fmul>
 800be0a:	4917      	ldr	r1, [pc, #92]	; (800be68 <Calibration+0x80>)
 800be0c:	f7f4 fec6 	bl	8000b9c <__aeabi_fdiv>
 800be10:	4b17      	ldr	r3, [pc, #92]	; (800be70 <Calibration+0x88>)
 800be12:	6018      	str	r0, [r3, #0]
	EE_WriteVariable(_EE_cell_full_scale, full_scale);
 800be14:	20fa      	movs	r0, #250	; 0xfa
 800be16:	0021      	movs	r1, r4
 800be18:	0040      	lsls	r0, r0, #1
 800be1a:	f7fb ffed 	bl	8007df8 <EE_WriteVariable>
	word_LSB=*(uint16_t*)&cell_drift;
 800be1e:	8839      	ldrh	r1, [r7, #0]
 800be20:	4d14      	ldr	r5, [pc, #80]	; (800be74 <Calibration+0x8c>)
 800be22:	8029      	strh	r1, [r5, #0]
	word_MSB=*(((uint16_t*)&cell_drift)+1);
 800be24:	4c14      	ldr	r4, [pc, #80]	; (800be78 <Calibration+0x90>)
 800be26:	887b      	ldrh	r3, [r7, #2]
 800be28:	8023      	strh	r3, [r4, #0]
	EE_WriteVariable(_EE_cell_drift_LSB, word_LSB);
 800be2a:	20f6      	movs	r0, #246	; 0xf6
 800be2c:	30ff      	adds	r0, #255	; 0xff
 800be2e:	f7fb ffe3 	bl	8007df8 <EE_WriteVariable>
	EE_WriteVariable(_EE_cell_drift_MSB, word_MSB);
 800be32:	8821      	ldrh	r1, [r4, #0]
 800be34:	20fb      	movs	r0, #251	; 0xfb
 800be36:	0040      	lsls	r0, r0, #1
 800be38:	f7fb ffde 	bl	8007df8 <EE_WriteVariable>
	word_LSB=*(uint16_t*)&cell_output;
 800be3c:	8831      	ldrh	r1, [r6, #0]
 800be3e:	8029      	strh	r1, [r5, #0]
	word_MSB=*(((uint16_t*)&cell_output)+1);
 800be40:	8873      	ldrh	r3, [r6, #2]
 800be42:	8023      	strh	r3, [r4, #0]
	EE_WriteVariable(_EE_cell_output_LSB, word_LSB);
 800be44:	20f8      	movs	r0, #248	; 0xf8
 800be46:	30ff      	adds	r0, #255	; 0xff
 800be48:	f7fb ffd6 	bl	8007df8 <EE_WriteVariable>
	EE_WriteVariable(_EE_cell_output_MSB, word_MSB);
 800be4c:	8821      	ldrh	r1, [r4, #0]
 800be4e:	20fc      	movs	r0, #252	; 0xfc
 800be50:	0040      	lsls	r0, r0, #1
 800be52:	f7fb ffd1 	bl	8007df8 <EE_WriteVariable>
}
 800be56:	2000      	movs	r0, #0
 800be58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be5a:	46c0      	nop			; (mov r8, r8)
 800be5c:	20001ab8 	.word	0x20001ab8
 800be60:	20001abc 	.word	0x20001abc
 800be64:	20000088 	.word	0x20000088
 800be68:	447a0000 	.word	0x447a0000
 800be6c:	40400000 	.word	0x40400000
 800be70:	20001ab4 	.word	0x20001ab4
 800be74:	20001ae8 	.word	0x20001ae8
 800be78:	20001aea 	.word	0x20001aea

0800be7c <calibrationCommand>:
{
 800be7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be7e:	46c6      	mov	lr, r8
 800be80:	b500      	push	{lr}
 800be82:	b084      	sub	sp, #16
 800be84:	0007      	movs	r7, r0
 800be86:	0014      	movs	r4, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 = 0;
 800be8c:	9302      	str	r3, [sp, #8]
	portBASE_TYPE xParameterStringLength3 = 0;
 800be8e:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800be90:	2800      	cmp	r0, #0
 800be92:	d038      	beq.n	800bf06 <calibrationCommand+0x8a>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800be94:	aa03      	add	r2, sp, #12
 800be96:	2101      	movs	r1, #1
 800be98:	0020      	movs	r0, r4
 800be9a:	f003 fa11 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800be9e:	4680      	mov	r8, r0
  pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800bea0:	aa02      	add	r2, sp, #8
 800bea2:	2102      	movs	r1, #2
 800bea4:	0020      	movs	r0, r4
 800bea6:	f003 fa0b 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800beaa:	0005      	movs	r5, r0
  pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800beac:	aa01      	add	r2, sp, #4
 800beae:	2103      	movs	r1, #3
 800beb0:	0020      	movs	r0, r4
 800beb2:	f003 fa05 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800beb6:	0006      	movs	r6, r0
	uint16_t load_cell_scale=0;
 800beb8:	2400      	movs	r4, #0
  if (NULL != pcParameterString1)
 800beba:	4643      	mov	r3, r8
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d003      	beq.n	800bec8 <calibrationCommand+0x4c>
    load_cell_scale = atoi( (char *)pcParameterString1);
 800bec0:	4640      	mov	r0, r8
 800bec2:	f007 ffbe 	bl	8013e42 <atoi>
 800bec6:	b284      	uxth	r4, r0
	if (NULL != pcParameterString2)
 800bec8:	2d00      	cmp	r5, #0
 800beca:	d01e      	beq.n	800bf0a <calibrationCommand+0x8e>
    load_cell_output = atof( (char *)pcParameterString2);
 800becc:	0028      	movs	r0, r5
 800bece:	f007 ffb3 	bl	8013e38 <atof>
 800bed2:	f7f7 fa11 	bl	80032f8 <__aeabi_d2f>
 800bed6:	1c05      	adds	r5, r0, #0
  if (NULL != pcParameterString3)
 800bed8:	2e00      	cmp	r6, #0
 800beda:	d018      	beq.n	800bf0e <calibrationCommand+0x92>
      load_cell_drift = atof( (char *)pcParameterString3);
 800bedc:	0030      	movs	r0, r6
 800bede:	f007 ffab 	bl	8013e38 <atof>
 800bee2:	f7f7 fa09 	bl	80032f8 <__aeabi_d2f>
 800bee6:	1c06      	adds	r6, r0, #0
	strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800bee8:	2228      	movs	r2, #40	; 0x28
 800beea:	490a      	ldr	r1, [pc, #40]	; (800bf14 <calibrationCommand+0x98>)
 800beec:	0038      	movs	r0, r7
 800beee:	f008 fa0f 	bl	8014310 <memcpy>
	Calibration(load_cell_scale, load_cell_output, load_cell_drift);
 800bef2:	1c32      	adds	r2, r6, #0
 800bef4:	1c29      	adds	r1, r5, #0
 800bef6:	0020      	movs	r0, r4
 800bef8:	f7ff ff76 	bl	800bde8 <Calibration>
}
 800befc:	2000      	movs	r0, #0
 800befe:	b004      	add	sp, #16
 800bf00:	bc80      	pop	{r7}
 800bf02:	46b8      	mov	r8, r7
 800bf04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  configASSERT( pcWriteBuffer );
 800bf06:	b672      	cpsid	i
 800bf08:	e7fe      	b.n	800bf08 <calibrationCommand+0x8c>
	float load_cell_output=0.0f;
 800bf0a:	2500      	movs	r5, #0
 800bf0c:	e7e4      	b.n	800bed8 <calibrationCommand+0x5c>
	float load_cell_drift=0.0f;
 800bf0e:	2600      	movs	r6, #0
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800bf10:	e7ea      	b.n	800bee8 <calibrationCommand+0x6c>
 800bf12:	46c0      	nop			; (mov r8, r8)
 800bf14:	0801cfa0 	.word	0x0801cfa0

0800bf18 <StreamGramToPort>:
{
 800bf18:	b530      	push	{r4, r5, lr}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800bf1e:	4d1b      	ldr	r5, [pc, #108]	; (800bf8c <StreamGramToPort+0x74>)
 800bf20:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800bf22:	481b      	ldr	r0, [pc, #108]	; (800bf90 <StreamGramToPort+0x78>)
 800bf24:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800bf26:	491b      	ldr	r1, [pc, #108]	; (800bf94 <StreamGramToPort+0x7c>)
 800bf28:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800bf2a:	4a1b      	ldr	r2, [pc, #108]	; (800bf98 <StreamGramToPort+0x80>)
 800bf2c:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800bf2e:	4b1b      	ldr	r3, [pc, #108]	; (800bf9c <StreamGramToPort+0x84>)
 800bf30:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800bf32:	4b1b      	ldr	r3, [pc, #108]	; (800bfa0 <StreamGramToPort+0x88>)
 800bf34:	2202      	movs	r2, #2
 800bf36:	701a      	strb	r2, [r3, #0]
	unit=Gram;
 800bf38:	4b1a      	ldr	r3, [pc, #104]	; (800bfa4 <StreamGramToPort+0x8c>)
 800bf3a:	3a01      	subs	r2, #1
 800bf3c:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800bf3e:	1e63      	subs	r3, r4, #1
 800bf40:	3303      	adds	r3, #3
 800bf42:	d902      	bls.n	800bf4a <StreamGramToPort+0x32>
}	
 800bf44:	2000      	movs	r0, #0
 800bf46:	b003      	add	sp, #12
 800bf48:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Timeout Measurement", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800bf4a:	0160      	lsls	r0, r4, #5
 800bf4c:	1b00      	subs	r0, r0, r4
 800bf4e:	0080      	lsls	r0, r0, #2
 800bf50:	1900      	adds	r0, r0, r4
 800bf52:	00c0      	lsls	r0, r0, #3
 800bf54:	21fa      	movs	r1, #250	; 0xfa
 800bf56:	0089      	lsls	r1, r1, #2
 800bf58:	f7f4 f8fa 	bl	8000150 <__udivsi3>
 800bf5c:	0001      	movs	r1, r0
 800bf5e:	4b12      	ldr	r3, [pc, #72]	; (800bfa8 <StreamGramToPort+0x90>)
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	23ff      	movs	r3, #255	; 0xff
 800bf64:	2200      	movs	r2, #0
 800bf66:	4811      	ldr	r0, [pc, #68]	; (800bfac <StreamGramToPort+0x94>)
 800bf68:	f004 fdbe 	bl	8010ae8 <xTimerCreate>
 800bf6c:	0004      	movs	r4, r0
 800bf6e:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <StreamGramToPort+0x98>)
 800bf70:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800bf72:	f004 f82d 	bl	800ffd0 <xTaskGetTickCount>
 800bf76:	0002      	movs	r2, r0
 800bf78:	2301      	movs	r3, #1
 800bf7a:	425b      	negs	r3, r3
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	2300      	movs	r3, #0
 800bf80:	2101      	movs	r1, #1
 800bf82:	0020      	movs	r0, r4
 800bf84:	f004 fdd0 	bl	8010b28 <xTimerGenericCommand>
 800bf88:	e7dc      	b.n	800bf44 <StreamGramToPort+0x2c>
 800bf8a:	46c0      	nop			; (mov r8, r8)
 800bf8c:	20006e60 	.word	0x20006e60
 800bf90:	20006e62 	.word	0x20006e62
 800bf94:	200070a0 	.word	0x200070a0
 800bf98:	2000702c 	.word	0x2000702c
 800bf9c:	200070a4 	.word	0x200070a4
 800bfa0:	20006e61 	.word	0x20006e61
 800bfa4:	200000b4 	.word	0x200000b4
 800bfa8:	0800b5c9 	.word	0x0800b5c9
 800bfac:	0801cfc8 	.word	0x0801cfc8
 800bfb0:	20001aec 	.word	0x20001aec

0800bfb4 <StreamKGramToPort>:
{
 800bfb4:	b530      	push	{r4, r5, lr}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800bfba:	4d1a      	ldr	r5, [pc, #104]	; (800c024 <StreamKGramToPort+0x70>)
 800bfbc:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800bfbe:	481a      	ldr	r0, [pc, #104]	; (800c028 <StreamKGramToPort+0x74>)
 800bfc0:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800bfc2:	491a      	ldr	r1, [pc, #104]	; (800c02c <StreamKGramToPort+0x78>)
 800bfc4:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800bfc6:	4a1a      	ldr	r2, [pc, #104]	; (800c030 <StreamKGramToPort+0x7c>)
 800bfc8:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800bfca:	4b1a      	ldr	r3, [pc, #104]	; (800c034 <StreamKGramToPort+0x80>)
 800bfcc:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800bfce:	2302      	movs	r3, #2
 800bfd0:	4a19      	ldr	r2, [pc, #100]	; (800c038 <StreamKGramToPort+0x84>)
 800bfd2:	7013      	strb	r3, [r2, #0]
	unit=KGram;
 800bfd4:	4a19      	ldr	r2, [pc, #100]	; (800c03c <StreamKGramToPort+0x88>)
 800bfd6:	7013      	strb	r3, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800bfd8:	1e63      	subs	r3, r4, #1
 800bfda:	3303      	adds	r3, #3
 800bfdc:	d902      	bls.n	800bfe4 <StreamKGramToPort+0x30>
}
 800bfde:	2000      	movs	r0, #0
 800bfe0:	b003      	add	sp, #12
 800bfe2:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800bfe4:	0160      	lsls	r0, r4, #5
 800bfe6:	1b00      	subs	r0, r0, r4
 800bfe8:	0080      	lsls	r0, r0, #2
 800bfea:	1900      	adds	r0, r0, r4
 800bfec:	00c0      	lsls	r0, r0, #3
 800bfee:	21fa      	movs	r1, #250	; 0xfa
 800bff0:	0089      	lsls	r1, r1, #2
 800bff2:	f7f4 f8ad 	bl	8000150 <__udivsi3>
 800bff6:	0001      	movs	r1, r0
 800bff8:	4b11      	ldr	r3, [pc, #68]	; (800c040 <StreamKGramToPort+0x8c>)
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	23ff      	movs	r3, #255	; 0xff
 800bffe:	2200      	movs	r2, #0
 800c000:	4810      	ldr	r0, [pc, #64]	; (800c044 <StreamKGramToPort+0x90>)
 800c002:	f004 fd71 	bl	8010ae8 <xTimerCreate>
 800c006:	0004      	movs	r4, r0
 800c008:	4b0f      	ldr	r3, [pc, #60]	; (800c048 <StreamKGramToPort+0x94>)
 800c00a:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c00c:	f003 ffe0 	bl	800ffd0 <xTaskGetTickCount>
 800c010:	0002      	movs	r2, r0
 800c012:	2301      	movs	r3, #1
 800c014:	425b      	negs	r3, r3
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	2300      	movs	r3, #0
 800c01a:	2101      	movs	r1, #1
 800c01c:	0020      	movs	r0, r4
 800c01e:	f004 fd83 	bl	8010b28 <xTimerGenericCommand>
 800c022:	e7dc      	b.n	800bfde <StreamKGramToPort+0x2a>
 800c024:	20006e60 	.word	0x20006e60
 800c028:	20006e62 	.word	0x20006e62
 800c02c:	200070a0 	.word	0x200070a0
 800c030:	2000702c 	.word	0x2000702c
 800c034:	200070a4 	.word	0x200070a4
 800c038:	20006e61 	.word	0x20006e61
 800c03c:	200000b4 	.word	0x200000b4
 800c040:	0800b5c9 	.word	0x0800b5c9
 800c044:	0801cfdc 	.word	0x0801cfdc
 800c048:	20001aec 	.word	0x20001aec

0800c04c <StreamOunceToPort>:
{
 800c04c:	b530      	push	{r4, r5, lr}
 800c04e:	b083      	sub	sp, #12
 800c050:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c052:	4d1b      	ldr	r5, [pc, #108]	; (800c0c0 <StreamOunceToPort+0x74>)
 800c054:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c056:	481b      	ldr	r0, [pc, #108]	; (800c0c4 <StreamOunceToPort+0x78>)
 800c058:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c05a:	491b      	ldr	r1, [pc, #108]	; (800c0c8 <StreamOunceToPort+0x7c>)
 800c05c:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c05e:	4a1b      	ldr	r2, [pc, #108]	; (800c0cc <StreamOunceToPort+0x80>)
 800c060:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c062:	4b1b      	ldr	r3, [pc, #108]	; (800c0d0 <StreamOunceToPort+0x84>)
 800c064:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c066:	4b1b      	ldr	r3, [pc, #108]	; (800c0d4 <StreamOunceToPort+0x88>)
 800c068:	2202      	movs	r2, #2
 800c06a:	701a      	strb	r2, [r3, #0]
	unit=Ounce;
 800c06c:	4b1a      	ldr	r3, [pc, #104]	; (800c0d8 <StreamOunceToPort+0x8c>)
 800c06e:	3201      	adds	r2, #1
 800c070:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c072:	1e63      	subs	r3, r4, #1
 800c074:	3303      	adds	r3, #3
 800c076:	d902      	bls.n	800c07e <StreamOunceToPort+0x32>
}
 800c078:	2000      	movs	r0, #0
 800c07a:	b003      	add	sp, #12
 800c07c:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c07e:	0160      	lsls	r0, r4, #5
 800c080:	1b00      	subs	r0, r0, r4
 800c082:	0080      	lsls	r0, r0, #2
 800c084:	1900      	adds	r0, r0, r4
 800c086:	00c0      	lsls	r0, r0, #3
 800c088:	21fa      	movs	r1, #250	; 0xfa
 800c08a:	0089      	lsls	r1, r1, #2
 800c08c:	f7f4 f860 	bl	8000150 <__udivsi3>
 800c090:	0001      	movs	r1, r0
 800c092:	4b12      	ldr	r3, [pc, #72]	; (800c0dc <StreamOunceToPort+0x90>)
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	23ff      	movs	r3, #255	; 0xff
 800c098:	2200      	movs	r2, #0
 800c09a:	4811      	ldr	r0, [pc, #68]	; (800c0e0 <StreamOunceToPort+0x94>)
 800c09c:	f004 fd24 	bl	8010ae8 <xTimerCreate>
 800c0a0:	0004      	movs	r4, r0
 800c0a2:	4b10      	ldr	r3, [pc, #64]	; (800c0e4 <StreamOunceToPort+0x98>)
 800c0a4:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c0a6:	f003 ff93 	bl	800ffd0 <xTaskGetTickCount>
 800c0aa:	0002      	movs	r2, r0
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	425b      	negs	r3, r3
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	2101      	movs	r1, #1
 800c0b6:	0020      	movs	r0, r4
 800c0b8:	f004 fd36 	bl	8010b28 <xTimerGenericCommand>
 800c0bc:	e7dc      	b.n	800c078 <StreamOunceToPort+0x2c>
 800c0be:	46c0      	nop			; (mov r8, r8)
 800c0c0:	20006e60 	.word	0x20006e60
 800c0c4:	20006e62 	.word	0x20006e62
 800c0c8:	200070a0 	.word	0x200070a0
 800c0cc:	2000702c 	.word	0x2000702c
 800c0d0:	200070a4 	.word	0x200070a4
 800c0d4:	20006e61 	.word	0x20006e61
 800c0d8:	200000b4 	.word	0x200000b4
 800c0dc:	0800b5c9 	.word	0x0800b5c9
 800c0e0:	0801cfdc 	.word	0x0801cfdc
 800c0e4:	20001aec 	.word	0x20001aec

0800c0e8 <StreamPoundToPort>:
{
 800c0e8:	b530      	push	{r4, r5, lr}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c0ee:	4d1b      	ldr	r5, [pc, #108]	; (800c15c <StreamPoundToPort+0x74>)
 800c0f0:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c0f2:	481b      	ldr	r0, [pc, #108]	; (800c160 <StreamPoundToPort+0x78>)
 800c0f4:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c0f6:	491b      	ldr	r1, [pc, #108]	; (800c164 <StreamPoundToPort+0x7c>)
 800c0f8:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c0fa:	4a1b      	ldr	r2, [pc, #108]	; (800c168 <StreamPoundToPort+0x80>)
 800c0fc:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c0fe:	4b1b      	ldr	r3, [pc, #108]	; (800c16c <StreamPoundToPort+0x84>)
 800c100:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c102:	4b1b      	ldr	r3, [pc, #108]	; (800c170 <StreamPoundToPort+0x88>)
 800c104:	2202      	movs	r2, #2
 800c106:	701a      	strb	r2, [r3, #0]
	unit=Pound;
 800c108:	4b1a      	ldr	r3, [pc, #104]	; (800c174 <StreamPoundToPort+0x8c>)
 800c10a:	3202      	adds	r2, #2
 800c10c:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c10e:	1e63      	subs	r3, r4, #1
 800c110:	3303      	adds	r3, #3
 800c112:	d902      	bls.n	800c11a <StreamPoundToPort+0x32>
}
 800c114:	2000      	movs	r0, #0
 800c116:	b003      	add	sp, #12
 800c118:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c11a:	0160      	lsls	r0, r4, #5
 800c11c:	1b00      	subs	r0, r0, r4
 800c11e:	0080      	lsls	r0, r0, #2
 800c120:	1900      	adds	r0, r0, r4
 800c122:	00c0      	lsls	r0, r0, #3
 800c124:	21fa      	movs	r1, #250	; 0xfa
 800c126:	0089      	lsls	r1, r1, #2
 800c128:	f7f4 f812 	bl	8000150 <__udivsi3>
 800c12c:	0001      	movs	r1, r0
 800c12e:	4b12      	ldr	r3, [pc, #72]	; (800c178 <StreamPoundToPort+0x90>)
 800c130:	9300      	str	r3, [sp, #0]
 800c132:	23ff      	movs	r3, #255	; 0xff
 800c134:	2200      	movs	r2, #0
 800c136:	4811      	ldr	r0, [pc, #68]	; (800c17c <StreamPoundToPort+0x94>)
 800c138:	f004 fcd6 	bl	8010ae8 <xTimerCreate>
 800c13c:	0004      	movs	r4, r0
 800c13e:	4b10      	ldr	r3, [pc, #64]	; (800c180 <StreamPoundToPort+0x98>)
 800c140:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c142:	f003 ff45 	bl	800ffd0 <xTaskGetTickCount>
 800c146:	0002      	movs	r2, r0
 800c148:	2301      	movs	r3, #1
 800c14a:	425b      	negs	r3, r3
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	2300      	movs	r3, #0
 800c150:	2101      	movs	r1, #1
 800c152:	0020      	movs	r0, r4
 800c154:	f004 fce8 	bl	8010b28 <xTimerGenericCommand>
 800c158:	e7dc      	b.n	800c114 <StreamPoundToPort+0x2c>
 800c15a:	46c0      	nop			; (mov r8, r8)
 800c15c:	20006e60 	.word	0x20006e60
 800c160:	20006e62 	.word	0x20006e62
 800c164:	200070a0 	.word	0x200070a0
 800c168:	2000702c 	.word	0x2000702c
 800c16c:	200070a4 	.word	0x200070a4
 800c170:	20006e61 	.word	0x20006e61
 800c174:	200000b4 	.word	0x200000b4
 800c178:	0800b5c9 	.word	0x0800b5c9
 800c17c:	0801cfdc 	.word	0x0801cfdc
 800c180:	20001aec 	.word	0x20001aec

0800c184 <StreamKGramToCLI>:
{
 800c184:	b510      	push	{r4, lr}
 800c186:	b082      	sub	sp, #8
	global_ch=Ch;
 800c188:	4b1a      	ldr	r3, [pc, #104]	; (800c1f4 <StreamKGramToCLI+0x70>)
 800c18a:	7018      	strb	r0, [r3, #0]
	global_period=Period;
 800c18c:	4b1a      	ldr	r3, [pc, #104]	; (800c1f8 <StreamKGramToCLI+0x74>)
 800c18e:	6019      	str	r1, [r3, #0]
	global_timeout=Timeout;
 800c190:	4b1a      	ldr	r3, [pc, #104]	; (800c1fc <StreamKGramToCLI+0x78>)
 800c192:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800c194:	4b1a      	ldr	r3, [pc, #104]	; (800c200 <StreamKGramToCLI+0x7c>)
 800c196:	2101      	movs	r1, #1
 800c198:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c19a:	1e53      	subs	r3, r2, #1
 800c19c:	3303      	adds	r3, #3
 800c19e:	d909      	bls.n	800c1b4 <StreamKGramToCLI+0x30>
	if (global_timeout > 0)
 800c1a0:	4b16      	ldr	r3, [pc, #88]	; (800c1fc <StreamKGramToCLI+0x78>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <StreamKGramToCLI+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c1a8:	4b16      	ldr	r3, [pc, #88]	; (800c204 <StreamKGramToCLI+0x80>)
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	701a      	strb	r2, [r3, #0]
}
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	b002      	add	sp, #8
 800c1b2:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c1b4:	0150      	lsls	r0, r2, #5
 800c1b6:	1a80      	subs	r0, r0, r2
 800c1b8:	0080      	lsls	r0, r0, #2
 800c1ba:	1880      	adds	r0, r0, r2
 800c1bc:	00c0      	lsls	r0, r0, #3
 800c1be:	21fa      	movs	r1, #250	; 0xfa
 800c1c0:	0089      	lsls	r1, r1, #2
 800c1c2:	f7f3 ffc5 	bl	8000150 <__udivsi3>
 800c1c6:	0001      	movs	r1, r0
 800c1c8:	4b0f      	ldr	r3, [pc, #60]	; (800c208 <StreamKGramToCLI+0x84>)
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	23ff      	movs	r3, #255	; 0xff
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	480e      	ldr	r0, [pc, #56]	; (800c20c <StreamKGramToCLI+0x88>)
 800c1d2:	f004 fc89 	bl	8010ae8 <xTimerCreate>
 800c1d6:	0004      	movs	r4, r0
 800c1d8:	4b0d      	ldr	r3, [pc, #52]	; (800c210 <StreamKGramToCLI+0x8c>)
 800c1da:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c1dc:	f003 fef8 	bl	800ffd0 <xTaskGetTickCount>
 800c1e0:	0002      	movs	r2, r0
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	425b      	negs	r3, r3
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	2101      	movs	r1, #1
 800c1ec:	0020      	movs	r0, r4
 800c1ee:	f004 fc9b 	bl	8010b28 <xTimerGenericCommand>
 800c1f2:	e7d5      	b.n	800c1a0 <StreamKGramToCLI+0x1c>
 800c1f4:	20006e60 	.word	0x20006e60
 800c1f8:	2000702c 	.word	0x2000702c
 800c1fc:	200070a4 	.word	0x200070a4
 800c200:	20006e61 	.word	0x20006e61
 800c204:	20001ac4 	.word	0x20001ac4
 800c208:	0800b5c9 	.word	0x0800b5c9
 800c20c:	0801cfdc 	.word	0x0801cfdc
 800c210:	20001aec 	.word	0x20001aec

0800c214 <demoCommand>:
{
 800c214:	b530      	push	{r4, r5, lr}
 800c216:	b085      	sub	sp, #20
 800c218:	0004      	movs	r4, r0
 800c21a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	9303      	str	r3, [sp, #12]
	configASSERT( pcWriteBuffer );
 800c220:	2c00      	cmp	r4, #0
 800c222:	d01b      	beq.n	800c25c <demoCommand+0x48>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c224:	aa03      	add	r2, sp, #12
 800c226:	2101      	movs	r1, #1
 800c228:	f003 f84a 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
  if (NULL != pcParameterString1)
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d005      	beq.n	800c23c <demoCommand+0x28>
    channel = atoi( (char *)pcParameterString1);
 800c230:	f007 fe07 	bl	8013e42 <atoi>
 800c234:	b2c5      	uxtb	r5, r0
		if (channel == 1 || channel == 2)
 800c236:	1e6b      	subs	r3, r5, #1
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d911      	bls.n	800c260 <demoCommand+0x4c>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800c23c:	2212      	movs	r2, #18
 800c23e:	491a      	ldr	r1, [pc, #104]	; (800c2a8 <demoCommand+0x94>)
 800c240:	0020      	movs	r0, r4
 800c242:	f008 f865 	bl	8014310 <memcpy>
	memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800c246:	0020      	movs	r0, r4
 800c248:	f7f3 ff66 	bl	8000118 <strlen>
 800c24c:	0002      	movs	r2, r0
 800c24e:	2100      	movs	r1, #0
 800c250:	0020      	movs	r0, r4
 800c252:	f008 f866 	bl	8014322 <memset>
}
 800c256:	2000      	movs	r0, #0
 800c258:	b005      	add	sp, #20
 800c25a:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 800c25c:	b672      	cpsid	i
 800c25e:	e7fe      	b.n	800c25e <demoCommand+0x4a>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800c260:	2237      	movs	r2, #55	; 0x37
 800c262:	4912      	ldr	r1, [pc, #72]	; (800c2ac <demoCommand+0x98>)
 800c264:	0020      	movs	r0, r4
 800c266:	f008 f853 	bl	8014310 <memcpy>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c26a:	0020      	movs	r0, r4
 800c26c:	f7f3 ff54 	bl	8000118 <strlen>
 800c270:	b282      	uxth	r2, r0
 800c272:	4b0f      	ldr	r3, [pc, #60]	; (800c2b0 <demoCommand+0x9c>)
 800c274:	7818      	ldrb	r0, [r3, #0]
 800c276:	2301      	movs	r3, #1
 800c278:	425b      	negs	r3, r3
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	3333      	adds	r3, #51	; 0x33
 800c27e:	0021      	movs	r1, r4
 800c280:	f002 fdc8 	bl	800ee14 <writePxMutex>
		StreamKGramToCLI(channel, 500, 10000);
 800c284:	21fa      	movs	r1, #250	; 0xfa
 800c286:	4a0b      	ldr	r2, [pc, #44]	; (800c2b4 <demoCommand+0xa0>)
 800c288:	0049      	lsls	r1, r1, #1
 800c28a:	0028      	movs	r0, r5
 800c28c:	f7ff ff7a 	bl	800c184 <StreamKGramToCLI>
		while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){ Delay_ms(1); };
 800c290:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <demoCommand+0xa4>)
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d0d1      	beq.n	800c23c <demoCommand+0x28>
 800c298:	4d07      	ldr	r5, [pc, #28]	; (800c2b8 <demoCommand+0xa4>)
 800c29a:	2001      	movs	r0, #1
 800c29c:	f004 ff5c 	bl	8011158 <HAL_Delay>
 800c2a0:	782b      	ldrb	r3, [r5, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1f9      	bne.n	800c29a <demoCommand+0x86>
 800c2a6:	e7c9      	b.n	800c23c <demoCommand+0x28>
 800c2a8:	0801d028 	.word	0x0801d028
 800c2ac:	0801cff0 	.word	0x0801cff0
 800c2b0:	20000aa7 	.word	0x20000aa7
 800c2b4:	00002710 	.word	0x00002710
 800c2b8:	20001ac4 	.word	0x20001ac4

0800c2bc <StreamKGramToVERBOSE>:
{
 800c2bc:	b510      	push	{r4, lr}
 800c2be:	b082      	sub	sp, #8
	global_ch=Ch;
 800c2c0:	4b1a      	ldr	r3, [pc, #104]	; (800c32c <StreamKGramToVERBOSE+0x70>)
 800c2c2:	7018      	strb	r0, [r3, #0]
	global_period=Period;
 800c2c4:	4b1a      	ldr	r3, [pc, #104]	; (800c330 <StreamKGramToVERBOSE+0x74>)
 800c2c6:	6019      	str	r1, [r3, #0]
	global_timeout=Timeout;
 800c2c8:	4b1a      	ldr	r3, [pc, #104]	; (800c334 <StreamKGramToVERBOSE+0x78>)
 800c2ca:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_CLI_VERBOSE_CASE;
 800c2cc:	4b1a      	ldr	r3, [pc, #104]	; (800c338 <StreamKGramToVERBOSE+0x7c>)
 800c2ce:	2104      	movs	r1, #4
 800c2d0:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c2d2:	1e53      	subs	r3, r2, #1
 800c2d4:	3303      	adds	r3, #3
 800c2d6:	d909      	bls.n	800c2ec <StreamKGramToVERBOSE+0x30>
	if (global_timeout > 0)
 800c2d8:	4b16      	ldr	r3, [pc, #88]	; (800c334 <StreamKGramToVERBOSE+0x78>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <StreamKGramToVERBOSE+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c2e0:	4b16      	ldr	r3, [pc, #88]	; (800c33c <StreamKGramToVERBOSE+0x80>)
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	701a      	strb	r2, [r3, #0]
}
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	b002      	add	sp, #8
 800c2ea:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c2ec:	0150      	lsls	r0, r2, #5
 800c2ee:	1a80      	subs	r0, r0, r2
 800c2f0:	0080      	lsls	r0, r0, #2
 800c2f2:	1880      	adds	r0, r0, r2
 800c2f4:	00c0      	lsls	r0, r0, #3
 800c2f6:	21fa      	movs	r1, #250	; 0xfa
 800c2f8:	0089      	lsls	r1, r1, #2
 800c2fa:	f7f3 ff29 	bl	8000150 <__udivsi3>
 800c2fe:	0001      	movs	r1, r0
 800c300:	4b0f      	ldr	r3, [pc, #60]	; (800c340 <StreamKGramToVERBOSE+0x84>)
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	23ff      	movs	r3, #255	; 0xff
 800c306:	2200      	movs	r2, #0
 800c308:	480e      	ldr	r0, [pc, #56]	; (800c344 <StreamKGramToVERBOSE+0x88>)
 800c30a:	f004 fbed 	bl	8010ae8 <xTimerCreate>
 800c30e:	0004      	movs	r4, r0
 800c310:	4b0d      	ldr	r3, [pc, #52]	; (800c348 <StreamKGramToVERBOSE+0x8c>)
 800c312:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c314:	f003 fe5c 	bl	800ffd0 <xTaskGetTickCount>
 800c318:	0002      	movs	r2, r0
 800c31a:	2301      	movs	r3, #1
 800c31c:	425b      	negs	r3, r3
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	2300      	movs	r3, #0
 800c322:	2101      	movs	r1, #1
 800c324:	0020      	movs	r0, r4
 800c326:	f004 fbff 	bl	8010b28 <xTimerGenericCommand>
 800c32a:	e7d5      	b.n	800c2d8 <StreamKGramToVERBOSE+0x1c>
 800c32c:	20006e60 	.word	0x20006e60
 800c330:	2000702c 	.word	0x2000702c
 800c334:	200070a4 	.word	0x200070a4
 800c338:	20006e61 	.word	0x20006e61
 800c33c:	20001ac4 	.word	0x20001ac4
 800c340:	0800b5c9 	.word	0x0800b5c9
 800c344:	0801cfdc 	.word	0x0801cfdc
 800c348:	20001aec 	.word	0x20001aec

0800c34c <StreamRawToPort>:
{
 800c34c:	b510      	push	{r4, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	9a04      	ldr	r2, [sp, #16]
	global_ch=Ch;
 800c352:	491c      	ldr	r1, [pc, #112]	; (800c3c4 <StreamRawToPort+0x78>)
 800c354:	7008      	strb	r0, [r1, #0]
	global_period=Period;
 800c356:	491c      	ldr	r1, [pc, #112]	; (800c3c8 <StreamRawToPort+0x7c>)
 800c358:	600b      	str	r3, [r1, #0]
	global_timeout=Timeout;
 800c35a:	4b1c      	ldr	r3, [pc, #112]	; (800c3cc <StreamRawToPort+0x80>)
 800c35c:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c35e:	4b1c      	ldr	r3, [pc, #112]	; (800c3d0 <StreamRawToPort+0x84>)
 800c360:	2102      	movs	r1, #2
 800c362:	7019      	strb	r1, [r3, #0]
	unit=RAW;
 800c364:	4b1b      	ldr	r3, [pc, #108]	; (800c3d4 <StreamRawToPort+0x88>)
 800c366:	3103      	adds	r1, #3
 800c368:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c36a:	1e53      	subs	r3, r2, #1
 800c36c:	3303      	adds	r3, #3
 800c36e:	d909      	bls.n	800c384 <StreamRawToPort+0x38>
	if (global_timeout > 0)
 800c370:	4b16      	ldr	r3, [pc, #88]	; (800c3cc <StreamRawToPort+0x80>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <StreamRawToPort+0x32>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c378:	4b17      	ldr	r3, [pc, #92]	; (800c3d8 <StreamRawToPort+0x8c>)
 800c37a:	2201      	movs	r2, #1
 800c37c:	701a      	strb	r2, [r3, #0]
}
 800c37e:	2000      	movs	r0, #0
 800c380:	b002      	add	sp, #8
 800c382:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c384:	0150      	lsls	r0, r2, #5
 800c386:	1a80      	subs	r0, r0, r2
 800c388:	0080      	lsls	r0, r0, #2
 800c38a:	1880      	adds	r0, r0, r2
 800c38c:	00c0      	lsls	r0, r0, #3
 800c38e:	21fa      	movs	r1, #250	; 0xfa
 800c390:	0089      	lsls	r1, r1, #2
 800c392:	f7f3 fedd 	bl	8000150 <__udivsi3>
 800c396:	0001      	movs	r1, r0
 800c398:	4b10      	ldr	r3, [pc, #64]	; (800c3dc <StreamRawToPort+0x90>)
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	23ff      	movs	r3, #255	; 0xff
 800c39e:	2200      	movs	r2, #0
 800c3a0:	480f      	ldr	r0, [pc, #60]	; (800c3e0 <StreamRawToPort+0x94>)
 800c3a2:	f004 fba1 	bl	8010ae8 <xTimerCreate>
 800c3a6:	0004      	movs	r4, r0
 800c3a8:	4b0e      	ldr	r3, [pc, #56]	; (800c3e4 <StreamRawToPort+0x98>)
 800c3aa:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c3ac:	f003 fe10 	bl	800ffd0 <xTaskGetTickCount>
 800c3b0:	0002      	movs	r2, r0
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	425b      	negs	r3, r3
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	0020      	movs	r0, r4
 800c3be:	f004 fbb3 	bl	8010b28 <xTimerGenericCommand>
 800c3c2:	e7d5      	b.n	800c370 <StreamRawToPort+0x24>
 800c3c4:	20006e60 	.word	0x20006e60
 800c3c8:	2000702c 	.word	0x2000702c
 800c3cc:	200070a4 	.word	0x200070a4
 800c3d0:	20006e61 	.word	0x20006e61
 800c3d4:	200000b4 	.word	0x200000b4
 800c3d8:	20001ac4 	.word	0x20001ac4
 800c3dc:	0800b5c9 	.word	0x0800b5c9
 800c3e0:	0801cfdc 	.word	0x0801cfdc
 800c3e4:	20001aec 	.word	0x20001aec

0800c3e8 <StreamKGramToBuffer>:
{
 800c3e8:	b510      	push	{r4, lr}
 800c3ea:	b082      	sub	sp, #8
	global_ch=Ch;
 800c3ec:	4c19      	ldr	r4, [pc, #100]	; (800c454 <StreamKGramToBuffer+0x6c>)
 800c3ee:	7020      	strb	r0, [r4, #0]
	global_period=Period;
 800c3f0:	4819      	ldr	r0, [pc, #100]	; (800c458 <StreamKGramToBuffer+0x70>)
 800c3f2:	6002      	str	r2, [r0, #0]
	global_timeout=Timeout;
 800c3f4:	4a19      	ldr	r2, [pc, #100]	; (800c45c <StreamKGramToBuffer+0x74>)
 800c3f6:	6013      	str	r3, [r2, #0]
	ptr_weight_buffer=Buffer;
 800c3f8:	4a19      	ldr	r2, [pc, #100]	; (800c460 <StreamKGramToBuffer+0x78>)
 800c3fa:	6011      	str	r1, [r2, #0]
	global_mode=STREAM_BUFFER_CASE;
 800c3fc:	4a19      	ldr	r2, [pc, #100]	; (800c464 <StreamKGramToBuffer+0x7c>)
 800c3fe:	2103      	movs	r1, #3
 800c400:	7011      	strb	r1, [r2, #0]
	unit=KGram;
 800c402:	4a19      	ldr	r2, [pc, #100]	; (800c468 <StreamKGramToBuffer+0x80>)
 800c404:	3901      	subs	r1, #1
 800c406:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c408:	1e5a      	subs	r2, r3, #1
 800c40a:	3203      	adds	r2, #3
 800c40c:	d902      	bls.n	800c414 <StreamKGramToBuffer+0x2c>
}
 800c40e:	2000      	movs	r0, #0
 800c410:	b002      	add	sp, #8
 800c412:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c414:	0158      	lsls	r0, r3, #5
 800c416:	1ac0      	subs	r0, r0, r3
 800c418:	0080      	lsls	r0, r0, #2
 800c41a:	18c0      	adds	r0, r0, r3
 800c41c:	00c0      	lsls	r0, r0, #3
 800c41e:	21fa      	movs	r1, #250	; 0xfa
 800c420:	0089      	lsls	r1, r1, #2
 800c422:	f7f3 fe95 	bl	8000150 <__udivsi3>
 800c426:	0001      	movs	r1, r0
 800c428:	4b10      	ldr	r3, [pc, #64]	; (800c46c <StreamKGramToBuffer+0x84>)
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	23ff      	movs	r3, #255	; 0xff
 800c42e:	2200      	movs	r2, #0
 800c430:	480f      	ldr	r0, [pc, #60]	; (800c470 <StreamKGramToBuffer+0x88>)
 800c432:	f004 fb59 	bl	8010ae8 <xTimerCreate>
 800c436:	0004      	movs	r4, r0
 800c438:	4b0e      	ldr	r3, [pc, #56]	; (800c474 <StreamKGramToBuffer+0x8c>)
 800c43a:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c43c:	f003 fdc8 	bl	800ffd0 <xTaskGetTickCount>
 800c440:	0002      	movs	r2, r0
 800c442:	2301      	movs	r3, #1
 800c444:	425b      	negs	r3, r3
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	2300      	movs	r3, #0
 800c44a:	2101      	movs	r1, #1
 800c44c:	0020      	movs	r0, r4
 800c44e:	f004 fb6b 	bl	8010b28 <xTimerGenericCommand>
 800c452:	e7dc      	b.n	800c40e <StreamKGramToBuffer+0x26>
 800c454:	20006e60 	.word	0x20006e60
 800c458:	2000702c 	.word	0x2000702c
 800c45c:	200070a4 	.word	0x200070a4
 800c460:	20006f48 	.word	0x20006f48
 800c464:	20006e61 	.word	0x20006e61
 800c468:	200000b4 	.word	0x200000b4
 800c46c:	0800b5c9 	.word	0x0800b5c9
 800c470:	0801cfdc 	.word	0x0801cfdc
 800c474:	20001aec 	.word	0x20001aec

0800c478 <streamCommand>:
{
 800c478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c47a:	46de      	mov	lr, fp
 800c47c:	4657      	mov	r7, sl
 800c47e:	464e      	mov	r6, r9
 800c480:	4645      	mov	r5, r8
 800c482:	b5e0      	push	{r5, r6, r7, lr}
 800c484:	b08b      	sub	sp, #44	; 0x2c
 800c486:	0004      	movs	r4, r0
 800c488:	0015      	movs	r5, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	9309      	str	r3, [sp, #36]	; 0x24
  portBASE_TYPE xParameterStringLength2 = 0;
 800c48e:	9308      	str	r3, [sp, #32]
  portBASE_TYPE xParameterStringLength3 = 0;
 800c490:	9307      	str	r3, [sp, #28]
  portBASE_TYPE xParameterStringLength4 = 0;
 800c492:	9306      	str	r3, [sp, #24]
	portBASE_TYPE xParameterStringLength5 = 0;
 800c494:	9305      	str	r3, [sp, #20]
  configASSERT( pcWriteBuffer );
 800c496:	2800      	cmp	r0, #0
 800c498:	d056      	beq.n	800c548 <streamCommand+0xd0>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c49a:	aa09      	add	r2, sp, #36	; 0x24
 800c49c:	2101      	movs	r1, #1
 800c49e:	0028      	movs	r0, r5
 800c4a0:	f002 ff0e 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800c4a4:	0006      	movs	r6, r0
  pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800c4a6:	aa08      	add	r2, sp, #32
 800c4a8:	2102      	movs	r1, #2
 800c4aa:	0028      	movs	r0, r5
 800c4ac:	f002 ff08 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800c4b0:	4680      	mov	r8, r0
  pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800c4b2:	aa07      	add	r2, sp, #28
 800c4b4:	2103      	movs	r1, #3
 800c4b6:	0028      	movs	r0, r5
 800c4b8:	f002 ff02 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800c4bc:	4683      	mov	fp, r0
  pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800c4be:	aa06      	add	r2, sp, #24
 800c4c0:	2104      	movs	r1, #4
 800c4c2:	0028      	movs	r0, r5
 800c4c4:	f002 fefc 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800c4c8:	0007      	movs	r7, r0
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 800c4ca:	aa05      	add	r2, sp, #20
 800c4cc:	2105      	movs	r1, #5
 800c4ce:	0028      	movs	r0, r5
 800c4d0:	f002 fef6 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
 800c4d4:	4681      	mov	r9, r0
  if (NULL != pcParameterString1)
 800c4d6:	2e00      	cmp	r6, #0
 800c4d8:	d038      	beq.n	800c54c <streamCommand+0xd4>
    channel = atoi( (char *)pcParameterString1);
 800c4da:	0030      	movs	r0, r6
 800c4dc:	f007 fcb1 	bl	8013e42 <atoi>
 800c4e0:	b2c6      	uxtb	r6, r0
  Module_Status result = H26R0_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	469a      	mov	sl, r3
	if (NULL != pcParameterString2)
 800c4e6:	4643      	mov	r3, r8
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d033      	beq.n	800c554 <streamCommand+0xdc>
    period = atoi( (char *)pcParameterString2);
 800c4ec:	4640      	mov	r0, r8
 800c4ee:	f007 fca8 	bl	8013e42 <atoi>
 800c4f2:	4680      	mov	r8, r0
  if (NULL != pcParameterString3)
 800c4f4:	465b      	mov	r3, fp
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d036      	beq.n	800c568 <streamCommand+0xf0>
    if (!strncmp((const char *)pcParameterString3, "inf", 3))
 800c4fa:	2203      	movs	r2, #3
 800c4fc:	495b      	ldr	r1, [pc, #364]	; (800c66c <streamCommand+0x1f4>)
 800c4fe:	4658      	mov	r0, fp
 800c500:	f008 f947 	bl	8014792 <strncmp>
 800c504:	2800      	cmp	r0, #0
 800c506:	d12a      	bne.n	800c55e <streamCommand+0xe6>
      timeout = portMAX_DELAY;
 800c508:	2501      	movs	r5, #1
 800c50a:	426d      	negs	r5, r5
	if (NULL != pcParameterString4 && !strncmp((const char *)pcParameterString4, "buffer", 6)) 
 800c50c:	2f00      	cmp	r7, #0
 800c50e:	d100      	bne.n	800c512 <streamCommand+0x9a>
 800c510:	e0a7      	b.n	800c662 <streamCommand+0x1ea>
 800c512:	2206      	movs	r2, #6
 800c514:	4956      	ldr	r1, [pc, #344]	; (800c670 <streamCommand+0x1f8>)
 800c516:	0038      	movs	r0, r7
 800c518:	f008 f93b 	bl	8014792 <strncmp>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d027      	beq.n	800c570 <streamCommand+0xf8>
	else if (NULL != pcParameterString4 && NULL != pcParameterString5 && pcParameterString4[0] == 'p') 
 800c520:	464b      	mov	r3, r9
 800c522:	2b00      	cmp	r3, #0
 800c524:	d05a      	beq.n	800c5dc <streamCommand+0x164>
 800c526:	2300      	movs	r3, #0
 800c528:	56fb      	ldrsb	r3, [r7, r3]
 800c52a:	2b70      	cmp	r3, #112	; 0x70
 800c52c:	d035      	beq.n	800c59a <streamCommand+0x122>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800c52e:	2212      	movs	r2, #18
 800c530:	4950      	ldr	r1, [pc, #320]	; (800c674 <streamCommand+0x1fc>)
 800c532:	0020      	movs	r0, r4
 800c534:	f007 feec 	bl	8014310 <memcpy>
}
 800c538:	2000      	movs	r0, #0
 800c53a:	b00b      	add	sp, #44	; 0x2c
 800c53c:	bcf0      	pop	{r4, r5, r6, r7}
 800c53e:	46bb      	mov	fp, r7
 800c540:	46b2      	mov	sl, r6
 800c542:	46a9      	mov	r9, r5
 800c544:	46a0      	mov	r8, r4
 800c546:	bdf0      	pop	{r4, r5, r6, r7, pc}
  configASSERT( pcWriteBuffer );
 800c548:	b672      	cpsid	i
 800c54a:	e7fe      	b.n	800c54a <streamCommand+0xd2>
    result = H26R0_ERR_WrongParams;
 800c54c:	2302      	movs	r3, #2
 800c54e:	469a      	mov	sl, r3
	uint8_t channel = 1;
 800c550:	2601      	movs	r6, #1
 800c552:	e7c8      	b.n	800c4e6 <streamCommand+0x6e>
    result = H26R0_ERR_WrongParams;
 800c554:	2302      	movs	r3, #2
 800c556:	469a      	mov	sl, r3
  uint32_t period = 0;
 800c558:	2300      	movs	r3, #0
 800c55a:	4698      	mov	r8, r3
 800c55c:	e7ca      	b.n	800c4f4 <streamCommand+0x7c>
      timeout = atoi( (char *)pcParameterString3);
 800c55e:	4658      	mov	r0, fp
 800c560:	f007 fc6f 	bl	8013e42 <atoi>
 800c564:	0005      	movs	r5, r0
 800c566:	e7d1      	b.n	800c50c <streamCommand+0x94>
    result = H26R0_ERR_WrongParams;
 800c568:	2302      	movs	r3, #2
 800c56a:	469a      	mov	sl, r3
  uint32_t timeout = 0;
 800c56c:	2500      	movs	r5, #0
 800c56e:	e7cd      	b.n	800c50c <streamCommand+0x94>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageBuffer);
 800c570:	226b      	movs	r2, #107	; 0x6b
 800c572:	4941      	ldr	r1, [pc, #260]	; (800c678 <streamCommand+0x200>)
 800c574:	0020      	movs	r0, r4
 800c576:	f007 fecb 	bl	8014310 <memcpy>
		if (channel==1){
 800c57a:	2e01      	cmp	r6, #1
 800c57c:	d006      	beq.n	800c58c <streamCommand+0x114>
		StreamKGramToBuffer(channel, &weight2_buffer, period, timeout);
 800c57e:	002b      	movs	r3, r5
 800c580:	4642      	mov	r2, r8
 800c582:	493e      	ldr	r1, [pc, #248]	; (800c67c <streamCommand+0x204>)
 800c584:	0030      	movs	r0, r6
 800c586:	f7ff ff2f 	bl	800c3e8 <StreamKGramToBuffer>
 800c58a:	e7d5      	b.n	800c538 <streamCommand+0xc0>
		StreamKGramToBuffer(channel, &weight1_buffer, period, timeout);
 800c58c:	002b      	movs	r3, r5
 800c58e:	4642      	mov	r2, r8
 800c590:	493b      	ldr	r1, [pc, #236]	; (800c680 <streamCommand+0x208>)
 800c592:	2001      	movs	r0, #1
 800c594:	f7ff ff28 	bl	800c3e8 <StreamKGramToBuffer>
 800c598:	e7ce      	b.n	800c538 <streamCommand+0xc0>
		port = ( uint8_t ) atol( ( char * ) pcParameterString4+1 );
 800c59a:	1c78      	adds	r0, r7, #1
 800c59c:	f007 fc57 	bl	8013e4e <atol>
 800c5a0:	9003      	str	r0, [sp, #12]
		module = (uint8_t) GetID((char *)pcParameterString5);
 800c5a2:	4648      	mov	r0, r9
 800c5a4:	f7f8 f9a2 	bl	80048ec <GetID>
 800c5a8:	b2c7      	uxtb	r7, r0
		if (module != (uint8_t) BOS_ERR_WrongName) {
 800c5aa:	2f64      	cmp	r7, #100	; 0x64
 800c5ac:	d010      	beq.n	800c5d0 <streamCommand+0x158>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageModule, port, module);
 800c5ae:	22ff      	movs	r2, #255	; 0xff
 800c5b0:	9b03      	ldr	r3, [sp, #12]
 800c5b2:	401a      	ands	r2, r3
 800c5b4:	003b      	movs	r3, r7
 800c5b6:	4933      	ldr	r1, [pc, #204]	; (800c684 <streamCommand+0x20c>)
 800c5b8:	0020      	movs	r0, r4
 800c5ba:	f008 f8a7 	bl	801470c <sprintf>
			StreamKGramToPort(channel, port, module, period, timeout);
 800c5be:	466b      	mov	r3, sp
 800c5c0:	7b19      	ldrb	r1, [r3, #12]
 800c5c2:	9500      	str	r5, [sp, #0]
 800c5c4:	4643      	mov	r3, r8
 800c5c6:	003a      	movs	r2, r7
 800c5c8:	0030      	movs	r0, r6
 800c5ca:	f7ff fcf3 	bl	800bfb4 <StreamKGramToPort>
			return pdFALSE;
 800c5ce:	e7b3      	b.n	800c538 <streamCommand+0xc0>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongName);
 800c5d0:	2214      	movs	r2, #20
 800c5d2:	492d      	ldr	r1, [pc, #180]	; (800c688 <streamCommand+0x210>)
 800c5d4:	0020      	movs	r0, r4
 800c5d6:	f007 fe9b 	bl	8014310 <memcpy>
		if (module != (uint8_t) BOS_ERR_WrongName) {
 800c5da:	e00e      	b.n	800c5fa <streamCommand+0x182>
		if (NULL != pcParameterString4 && !strncmp((const char *)pcParameterString4, "-v", 2)) {
 800c5dc:	2202      	movs	r2, #2
 800c5de:	492b      	ldr	r1, [pc, #172]	; (800c68c <streamCommand+0x214>)
 800c5e0:	0038      	movs	r0, r7
 800c5e2:	f008 f8d6 	bl	8014792 <strncmp>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d00b      	beq.n	800c602 <streamCommand+0x18a>
			if (channel == 1 || channel == 2)
 800c5ea:	1e73      	subs	r3, r6, #1
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d90e      	bls.n	800c60e <streamCommand+0x196>
				 strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800c5f0:	2212      	movs	r2, #18
 800c5f2:	4920      	ldr	r1, [pc, #128]	; (800c674 <streamCommand+0x1fc>)
 800c5f4:	0020      	movs	r0, r4
 800c5f6:	f007 fe8b 	bl	8014310 <memcpy>
  if (H26R0_ERR_WrongParams == result)
 800c5fa:	4653      	mov	r3, sl
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d19b      	bne.n	800c538 <streamCommand+0xc0>
 800c600:	e795      	b.n	800c52e <streamCommand+0xb6>
			StreamKGramToVERBOSE(channel, period, timeout);
 800c602:	002a      	movs	r2, r5
 800c604:	4641      	mov	r1, r8
 800c606:	0030      	movs	r0, r6
 800c608:	f7ff fe58 	bl	800c2bc <StreamKGramToVERBOSE>
 800c60c:	e7f5      	b.n	800c5fa <streamCommand+0x182>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI);
 800c60e:	2225      	movs	r2, #37	; 0x25
 800c610:	491f      	ldr	r1, [pc, #124]	; (800c690 <streamCommand+0x218>)
 800c612:	0020      	movs	r0, r4
 800c614:	f007 fe7c 	bl	8014310 <memcpy>
			writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c618:	0020      	movs	r0, r4
 800c61a:	f7f3 fd7d 	bl	8000118 <strlen>
 800c61e:	b282      	uxth	r2, r0
 800c620:	4b1c      	ldr	r3, [pc, #112]	; (800c694 <streamCommand+0x21c>)
 800c622:	7818      	ldrb	r0, [r3, #0]
 800c624:	2301      	movs	r3, #1
 800c626:	425b      	negs	r3, r3
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	3333      	adds	r3, #51	; 0x33
 800c62c:	0021      	movs	r1, r4
 800c62e:	f002 fbf1 	bl	800ee14 <writePxMutex>
			StreamKGramToCLI(channel, period, timeout);
 800c632:	002a      	movs	r2, r5
 800c634:	4641      	mov	r1, r8
 800c636:	0030      	movs	r0, r6
 800c638:	f7ff fda4 	bl	800c184 <StreamKGramToCLI>
			while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){taskYIELD();}
 800c63c:	4b16      	ldr	r3, [pc, #88]	; (800c698 <streamCommand+0x220>)
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d005      	beq.n	800c650 <streamCommand+0x1d8>
 800c644:	4d14      	ldr	r5, [pc, #80]	; (800c698 <streamCommand+0x220>)
 800c646:	f004 fc0d 	bl	8010e64 <vPortYield>
 800c64a:	782b      	ldrb	r3, [r5, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1fa      	bne.n	800c646 <streamCommand+0x1ce>
			memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800c650:	0020      	movs	r0, r4
 800c652:	f7f3 fd61 	bl	8000118 <strlen>
 800c656:	0002      	movs	r2, r0
 800c658:	2100      	movs	r1, #0
 800c65a:	0020      	movs	r0, r4
 800c65c:	f007 fe61 	bl	8014322 <memset>
 800c660:	e7cb      	b.n	800c5fa <streamCommand+0x182>
	else if (NULL == pcParameterString5) 
 800c662:	464b      	mov	r3, r9
 800c664:	2b00      	cmp	r3, #0
 800c666:	d000      	beq.n	800c66a <streamCommand+0x1f2>
 800c668:	e761      	b.n	800c52e <streamCommand+0xb6>
 800c66a:	e7be      	b.n	800c5ea <streamCommand+0x172>
 800c66c:	0801d03c 	.word	0x0801d03c
 800c670:	0801d040 	.word	0x0801d040
 800c674:	0801d028 	.word	0x0801d028
 800c678:	0801d048 	.word	0x0801d048
 800c67c:	20006dec 	.word	0x20006dec
 800c680:	20006ed4 	.word	0x20006ed4
 800c684:	0801d0b4 	.word	0x0801d0b4
 800c688:	0801d0e8 	.word	0x0801d0e8
 800c68c:	0801d0fc 	.word	0x0801d0fc
 800c690:	0801d100 	.word	0x0801d100
 800c694:	20000aa7 	.word	0x20000aa7
 800c698:	20001ac4 	.word	0x20001ac4

0800c69c <PowerDown>:
{
 800c69c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_SET);
 800c69e:	2180      	movs	r1, #128	; 0x80
 800c6a0:	2090      	movs	r0, #144	; 0x90
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	0089      	lsls	r1, r1, #2
 800c6a6:	05c0      	lsls	r0, r0, #23
 800c6a8:	f005 fe38 	bl	801231c <HAL_GPIO_WritePin>
}
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	bd10      	pop	{r4, pc}

0800c6b0 <Stop>:
{
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	b082      	sub	sp, #8
	global_mode=IDLE_CASE;
 800c6b4:	2400      	movs	r4, #0
 800c6b6:	4b0a      	ldr	r3, [pc, #40]	; (800c6e0 <Stop+0x30>)
 800c6b8:	701c      	strb	r4, [r3, #0]
  PowerDown();
 800c6ba:	f7ff ffef 	bl	800c69c <PowerDown>
	xTimerStop( xTimer, 0 );
 800c6be:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <Stop+0x34>)
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	9400      	str	r4, [sp, #0]
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2103      	movs	r1, #3
 800c6ca:	f004 fa2d 	bl	8010b28 <xTimerGenericCommand>
	weight1_buffer=0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	4a05      	ldr	r2, [pc, #20]	; (800c6e8 <Stop+0x38>)
 800c6d2:	6013      	str	r3, [r2, #0]
	weight2_buffer=0;
 800c6d4:	4a05      	ldr	r2, [pc, #20]	; (800c6ec <Stop+0x3c>)
 800c6d6:	6013      	str	r3, [r2, #0]
}
 800c6d8:	2000      	movs	r0, #0
 800c6da:	b002      	add	sp, #8
 800c6dc:	bd10      	pop	{r4, pc}
 800c6de:	46c0      	nop			; (mov r8, r8)
 800c6e0:	20006e61 	.word	0x20006e61
 800c6e4:	20001aec 	.word	0x20001aec
 800c6e8:	20006ed4 	.word	0x20006ed4
 800c6ec:	20006dec 	.word	0x20006dec

0800c6f0 <stopCommand>:
{
 800c6f0:	b510      	push	{r4, lr}
  configASSERT( pcWriteBuffer );
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d003      	beq.n	800c6fe <stopCommand+0xe>
	Stop();
 800c6f6:	f7ff ffdb 	bl	800c6b0 <Stop>
}
 800c6fa:	2000      	movs	r0, #0
 800c6fc:	bd10      	pop	{r4, pc}
  configASSERT( pcWriteBuffer );
 800c6fe:	b672      	cpsid	i
 800c700:	e7fe      	b.n	800c700 <stopCommand+0x10>

0800c702 <PowerOn>:
{
 800c702:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800c704:	2180      	movs	r1, #128	; 0x80
 800c706:	2090      	movs	r0, #144	; 0x90
 800c708:	2200      	movs	r2, #0
 800c70a:	0089      	lsls	r1, r1, #2
 800c70c:	05c0      	lsls	r0, r0, #23
 800c70e:	f005 fe05 	bl	801231c <HAL_GPIO_WritePin>
}
 800c712:	2000      	movs	r0, #0
 800c714:	bd10      	pop	{r4, pc}
	...

0800c718 <SampleGram>:
{
 800c718:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800c71a:	f7ff fb4b 	bl	800bdb4 <SetHX711Gain>
	PowerOn();
 800c71e:	f7ff fff0 	bl	800c702 <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800c722:	f7ff f9cf 	bl	800bac4 <readHX711>
 800c726:	f7ff f9cd 	bl	800bac4 <readHX711>
	weightGram=weightCalculation()*Kg2Gram_ratio;
 800c72a:	f7ff fa3d 	bl	800bba8 <weightCalculation>
 800c72e:	4903      	ldr	r1, [pc, #12]	; (800c73c <SampleGram+0x24>)
 800c730:	f7f4 fbfe 	bl	8000f30 <__aeabi_fmul>
 800c734:	4b02      	ldr	r3, [pc, #8]	; (800c740 <SampleGram+0x28>)
 800c736:	6018      	str	r0, [r3, #0]
}
 800c738:	bd10      	pop	{r4, pc}
 800c73a:	46c0      	nop			; (mov r8, r8)
 800c73c:	447a0000 	.word	0x447a0000
 800c740:	20001ad8 	.word	0x20001ad8

0800c744 <SampleKGram>:
{
 800c744:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800c746:	f7ff fb35 	bl	800bdb4 <SetHX711Gain>
	PowerOn();
 800c74a:	f7ff ffda 	bl	800c702 <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800c74e:	f7ff f9b9 	bl	800bac4 <readHX711>
 800c752:	f7ff f9b7 	bl	800bac4 <readHX711>
	weightKGram=weightCalculation();
 800c756:	f7ff fa27 	bl	800bba8 <weightCalculation>
 800c75a:	4b01      	ldr	r3, [pc, #4]	; (800c760 <SampleKGram+0x1c>)
 800c75c:	6018      	str	r0, [r3, #0]
}
 800c75e:	bd10      	pop	{r4, pc}
 800c760:	20001adc 	.word	0x20001adc

0800c764 <SampleOunce>:
{
 800c764:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800c766:	f7ff fb25 	bl	800bdb4 <SetHX711Gain>
	PowerOn();
 800c76a:	f7ff ffca 	bl	800c702 <PowerOn>
	for(i=0; i<2; i++)		readHX711();
 800c76e:	f7ff f9a9 	bl	800bac4 <readHX711>
 800c772:	f7ff f9a7 	bl	800bac4 <readHX711>
	weightOunce=weightCalculation()*Kg2Ounce_ratio;
 800c776:	f7ff fa17 	bl	800bba8 <weightCalculation>
 800c77a:	f7f6 fd75 	bl	8003268 <__aeabi_f2d>
 800c77e:	4a04      	ldr	r2, [pc, #16]	; (800c790 <SampleOunce+0x2c>)
 800c780:	4b04      	ldr	r3, [pc, #16]	; (800c794 <SampleOunce+0x30>)
 800c782:	f7f5 fec9 	bl	8002518 <__aeabi_dmul>
 800c786:	f7f6 fdb7 	bl	80032f8 <__aeabi_d2f>
 800c78a:	4b03      	ldr	r3, [pc, #12]	; (800c798 <SampleOunce+0x34>)
 800c78c:	6018      	str	r0, [r3, #0]
}
 800c78e:	bd10      	pop	{r4, pc}
 800c790:	6e978d50 	.word	0x6e978d50
 800c794:	4041a312 	.word	0x4041a312
 800c798:	20001ae0 	.word	0x20001ae0

0800c79c <SamplePound>:
{
 800c79c:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800c79e:	f7ff fb09 	bl	800bdb4 <SetHX711Gain>
	PowerOn();
 800c7a2:	f7ff ffae 	bl	800c702 <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800c7a6:	f7ff f98d 	bl	800bac4 <readHX711>
 800c7aa:	f7ff f98b 	bl	800bac4 <readHX711>
	weightPound=weightCalculation()*Kg2Pound_ratio;  
 800c7ae:	f7ff f9fb 	bl	800bba8 <weightCalculation>
 800c7b2:	f7f6 fd59 	bl	8003268 <__aeabi_f2d>
 800c7b6:	4a04      	ldr	r2, [pc, #16]	; (800c7c8 <SamplePound+0x2c>)
 800c7b8:	4b04      	ldr	r3, [pc, #16]	; (800c7cc <SamplePound+0x30>)
 800c7ba:	f7f5 fead 	bl	8002518 <__aeabi_dmul>
 800c7be:	f7f6 fd9b 	bl	80032f8 <__aeabi_d2f>
 800c7c2:	4b03      	ldr	r3, [pc, #12]	; (800c7d0 <SamplePound+0x34>)
 800c7c4:	6018      	str	r0, [r3, #0]
}
 800c7c6:	bd10      	pop	{r4, pc}
 800c7c8:	2f275feb 	.word	0x2f275feb
 800c7cc:	4001a311 	.word	0x4001a311
 800c7d0:	20001ae4 	.word	0x20001ae4

0800c7d4 <Average>:
{
 800c7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d6:	0004      	movs	r4, r0
 800c7d8:	000e      	movs	r6, r1
	PowerOn();
 800c7da:	f7ff ff92 	bl	800c702 <PowerOn>
	SetHX711Gain(ch);
 800c7de:	0020      	movs	r0, r4
 800c7e0:	f7ff fae8 	bl	800bdb4 <SetHX711Gain>
		readHX711();	
 800c7e4:	f7ff f96e 	bl	800bac4 <readHX711>
	for(i=0; i<=N; i++)
 800c7e8:	2400      	movs	r4, #0
			Sample[i]=valuef;
 800c7ea:	4f13      	ldr	r7, [pc, #76]	; (800c838 <Average+0x64>)
 800c7ec:	4d13      	ldr	r5, [pc, #76]	; (800c83c <Average+0x68>)
 800c7ee:	e002      	b.n	800c7f6 <Average+0x22>
 800c7f0:	00a3      	lsls	r3, r4, #2
 800c7f2:	682a      	ldr	r2, [r5, #0]
 800c7f4:	51da      	str	r2, [r3, r7]
	for(i=0; i<=N; i++)
 800c7f6:	3401      	adds	r4, #1
 800c7f8:	b2e4      	uxtb	r4, r4
 800c7fa:	42a6      	cmp	r6, r4
 800c7fc:	d304      	bcc.n	800c808 <Average+0x34>
		readHX711();	
 800c7fe:	f7ff f961 	bl	800bac4 <readHX711>
		if (i>=1)
 800c802:	2c00      	cmp	r4, #0
 800c804:	d1f4      	bne.n	800c7f0 <Average+0x1c>
 800c806:	e7f6      	b.n	800c7f6 <Average+0x22>
	for (ii=0; ii<N; ii++)
 800c808:	2e00      	cmp	r6, #0
 800c80a:	d013      	beq.n	800c834 <Average+0x60>
 800c80c:	4f0c      	ldr	r7, [pc, #48]	; (800c840 <Average+0x6c>)
	float average=0.0;
 800c80e:	2500      	movs	r5, #0
	for (ii=0; ii<N; ii++)
 800c810:	2400      	movs	r4, #0
		average+=Sample[ii+1];
 800c812:	cf02      	ldmia	r7!, {r1}
 800c814:	1c28      	adds	r0, r5, #0
 800c816:	f7f4 f825 	bl	8000864 <__aeabi_fadd>
 800c81a:	1c05      	adds	r5, r0, #0
	for (ii=0; ii<N; ii++)
 800c81c:	3401      	adds	r4, #1
 800c81e:	b2e4      	uxtb	r4, r4
 800c820:	42a6      	cmp	r6, r4
 800c822:	d1f6      	bne.n	800c812 <Average+0x3e>
	average/=N;
 800c824:	0030      	movs	r0, r6
 800c826:	f7f4 fe85 	bl	8001534 <__aeabi_i2f>
 800c82a:	1c01      	adds	r1, r0, #0
 800c82c:	1c28      	adds	r0, r5, #0
 800c82e:	f7f4 f9b5 	bl	8000b9c <__aeabi_fdiv>
}
 800c832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	float average=0.0;
 800c834:	2500      	movs	r5, #0
 800c836:	e7f5      	b.n	800c824 <Average+0x50>
 800c838:	200016b0 	.word	0x200016b0
 800c83c:	20001ad4 	.word	0x20001ad4
 800c840:	200016b4 	.word	0x200016b4

0800c844 <SendResults>:
{
 800c844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c846:	b087      	sub	sp, #28
 800c848:	1c06      	adds	r6, r0, #0
 800c84a:	000c      	movs	r4, r1
 800c84c:	9303      	str	r3, [sp, #12]
 800c84e:	ab0c      	add	r3, sp, #48	; 0x30
 800c850:	781d      	ldrb	r5, [r3, #0]
	uint32_t RawMsgInt=0;
 800c852:	2300      	movs	r3, #0
 800c854:	9304      	str	r3, [sp, #16]
	switch (unit)
 800c856:	4bab      	ldr	r3, [pc, #684]	; (800cb04 <SendResults+0x2c0>)
 800c858:	781a      	ldrb	r2, [r3, #0]
 800c85a:	2a05      	cmp	r2, #5
 800c85c:	d823      	bhi.n	800c8a6 <SendResults+0x62>
 800c85e:	0092      	lsls	r2, r2, #2
 800c860:	4ba9      	ldr	r3, [pc, #676]	; (800cb08 <SendResults+0x2c4>)
 800c862:	589b      	ldr	r3, [r3, r2]
 800c864:	469f      	mov	pc, r3
			Raw_Msg=message*Kg2Gram_ratio; break;
 800c866:	49a9      	ldr	r1, [pc, #676]	; (800cb0c <SendResults+0x2c8>)
 800c868:	f7f4 fb62 	bl	8000f30 <__aeabi_fmul>
 800c86c:	9005      	str	r0, [sp, #20]
 800c86e:	e01b      	b.n	800c8a8 <SendResults+0x64>
			Raw_Msg=message; break;
 800c870:	9005      	str	r0, [sp, #20]
 800c872:	e019      	b.n	800c8a8 <SendResults+0x64>
			Raw_Msg=message*Kg2Ounce_ratio; break;
 800c874:	f7f6 fcf8 	bl	8003268 <__aeabi_f2d>
 800c878:	4aa5      	ldr	r2, [pc, #660]	; (800cb10 <SendResults+0x2cc>)
 800c87a:	4ba6      	ldr	r3, [pc, #664]	; (800cb14 <SendResults+0x2d0>)
 800c87c:	f7f5 fe4c 	bl	8002518 <__aeabi_dmul>
 800c880:	f7f6 fd3a 	bl	80032f8 <__aeabi_d2f>
 800c884:	9005      	str	r0, [sp, #20]
 800c886:	e00f      	b.n	800c8a8 <SendResults+0x64>
			Raw_Msg=message*Kg2Pound_ratio; break;
 800c888:	f7f6 fcee 	bl	8003268 <__aeabi_f2d>
 800c88c:	4aa2      	ldr	r2, [pc, #648]	; (800cb18 <SendResults+0x2d4>)
 800c88e:	4ba3      	ldr	r3, [pc, #652]	; (800cb1c <SendResults+0x2d8>)
 800c890:	f7f5 fe42 	bl	8002518 <__aeabi_dmul>
 800c894:	f7f6 fd30 	bl	80032f8 <__aeabi_d2f>
 800c898:	9005      	str	r0, [sp, #20]
 800c89a:	e005      	b.n	800c8a8 <SendResults+0x64>
			Raw_Msg=Average(global_ch, 1);
 800c89c:	4ba0      	ldr	r3, [pc, #640]	; (800cb20 <SendResults+0x2dc>)
 800c89e:	7818      	ldrb	r0, [r3, #0]
 800c8a0:	2101      	movs	r1, #1
 800c8a2:	f7ff ff97 	bl	800c7d4 <Average>
			Raw_Msg=message; break;
 800c8a6:	9605      	str	r6, [sp, #20]
  pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800c8a8:	f002 fd06 	bl	800f2b8 <FreeRTOS_CLIGetOutputBuffer>
 800c8ac:	0006      	movs	r6, r0
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE)
 800c8ae:	2c04      	cmp	r4, #4
 800c8b0:	d100      	bne.n	800c8b4 <SendResults+0x70>
 800c8b2:	e09c      	b.n	800c9ee <SendResults+0x1aa>
 800c8b4:	2c02      	cmp	r4, #2
 800c8b6:	d11e      	bne.n	800c8f6 <SendResults+0xb2>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800c8b8:	4b9a      	ldr	r3, [pc, #616]	; (800cb24 <SendResults+0x2e0>)
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	2b05      	cmp	r3, #5
 800c8be:	d100      	bne.n	800c8c2 <SendResults+0x7e>
 800c8c0:	e0d1      	b.n	800ca66 <SendResults+0x222>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800c8c2:	2b07      	cmp	r3, #7
 800c8c4:	d000      	beq.n	800c8c8 <SendResults+0x84>
 800c8c6:	e112      	b.n	800caee <SendResults+0x2aa>
				if (Module==myID){ 
 800c8c8:	4b97      	ldr	r3, [pc, #604]	; (800cb28 <SendResults+0x2e4>)
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	42ab      	cmp	r3, r5
 800c8ce:	d100      	bne.n	800c8d2 <SendResults+0x8e>
 800c8d0:	e0f7      	b.n	800cac2 <SendResults+0x27e>
						messageParams[0] = Port;
 800c8d2:	4b96      	ldr	r3, [pc, #600]	; (800cb2c <SendResults+0x2e8>)
 800c8d4:	9a03      	ldr	r2, [sp, #12]
 800c8d6:	701a      	strb	r2, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&Raw_Msg)+3);
 800c8d8:	aa05      	add	r2, sp, #20
 800c8da:	78d1      	ldrb	r1, [r2, #3]
 800c8dc:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&Raw_Msg)+2);
 800c8de:	7891      	ldrb	r1, [r2, #2]
 800c8e0:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&Raw_Msg)+1);
 800c8e2:	7851      	ldrb	r1, [r2, #1]
 800c8e4:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&Raw_Msg)+0);
 800c8e6:	7812      	ldrb	r2, [r2, #0]
 800c8e8:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(Module, CODE_PORT_FORWARD, sizeof(float)+1);
 800c8ea:	2205      	movs	r2, #5
 800c8ec:	2123      	movs	r1, #35	; 0x23
 800c8ee:	0028      	movs	r0, r5
 800c8f0:	f7fc ff86 	bl	8009800 <SendMessageToModule>
 800c8f4:	e0fb      	b.n	800caee <SendResults+0x2aa>
		strUnit = malloc(6*sizeof(char));
 800c8f6:	2006      	movs	r0, #6
 800c8f8:	f007 fad4 	bl	8013ea4 <malloc>
 800c8fc:	0007      	movs	r7, r0
		memset(strUnit, 0, (6*sizeof(char)));
 800c8fe:	2206      	movs	r2, #6
 800c900:	2100      	movs	r1, #0
 800c902:	f007 fd0e 	bl	8014322 <memset>
		if (unit == Gram)
 800c906:	4b7f      	ldr	r3, [pc, #508]	; (800cb04 <SendResults+0x2c0>)
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d013      	beq.n	800c936 <SendResults+0xf2>
		else if (unit == KGram)
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d017      	beq.n	800c942 <SendResults+0xfe>
		else if (unit == Ounce)
 800c912:	2b03      	cmp	r3, #3
 800c914:	d01b      	beq.n	800c94e <SendResults+0x10a>
		else if (unit == Pound)
 800c916:	2b04      	cmp	r3, #4
 800c918:	d01f      	beq.n	800c95a <SendResults+0x116>
		else if (unit == RAW)
 800c91a:	2b05      	cmp	r3, #5
 800c91c:	d023      	beq.n	800c966 <SendResults+0x122>
			sprintf( ( char * ) strUnit, "Kg");
 800c91e:	4b84      	ldr	r3, [pc, #528]	; (800cb30 <SendResults+0x2ec>)
 800c920:	881a      	ldrh	r2, [r3, #0]
 800c922:	803a      	strh	r2, [r7, #0]
 800c924:	789b      	ldrb	r3, [r3, #2]
 800c926:	70bb      	strb	r3, [r7, #2]
  switch(Mode)
 800c928:	2c09      	cmp	r4, #9
 800c92a:	d900      	bls.n	800c92e <SendResults+0xea>
 800c92c:	e0e6      	b.n	800cafc <SendResults+0x2b8>
 800c92e:	00a3      	lsls	r3, r4, #2
 800c930:	4a80      	ldr	r2, [pc, #512]	; (800cb34 <SendResults+0x2f0>)
 800c932:	58d3      	ldr	r3, [r2, r3]
 800c934:	469f      	mov	pc, r3
			sprintf( ( char * ) strUnit, "Gram");
 800c936:	4b80      	ldr	r3, [pc, #512]	; (800cb38 <SendResults+0x2f4>)
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	603a      	str	r2, [r7, #0]
 800c93c:	791b      	ldrb	r3, [r3, #4]
 800c93e:	713b      	strb	r3, [r7, #4]
 800c940:	e7f2      	b.n	800c928 <SendResults+0xe4>
			sprintf( ( char * ) strUnit, "Kg");
 800c942:	4b7b      	ldr	r3, [pc, #492]	; (800cb30 <SendResults+0x2ec>)
 800c944:	881a      	ldrh	r2, [r3, #0]
 800c946:	803a      	strh	r2, [r7, #0]
 800c948:	789b      	ldrb	r3, [r3, #2]
 800c94a:	70bb      	strb	r3, [r7, #2]
 800c94c:	e7ec      	b.n	800c928 <SendResults+0xe4>
			sprintf( ( char * ) strUnit, "Ounce");
 800c94e:	4b7b      	ldr	r3, [pc, #492]	; (800cb3c <SendResults+0x2f8>)
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	603a      	str	r2, [r7, #0]
 800c954:	889b      	ldrh	r3, [r3, #4]
 800c956:	80bb      	strh	r3, [r7, #4]
 800c958:	e7e6      	b.n	800c928 <SendResults+0xe4>
			sprintf( ( char * ) strUnit, "Pound");
 800c95a:	4b79      	ldr	r3, [pc, #484]	; (800cb40 <SendResults+0x2fc>)
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	603a      	str	r2, [r7, #0]
 800c960:	889b      	ldrh	r3, [r3, #4]
 800c962:	80bb      	strh	r3, [r7, #4]
 800c964:	e7e0      	b.n	800c928 <SendResults+0xe4>
			sprintf( ( char * ) strUnit, "Raw Data");
 800c966:	4977      	ldr	r1, [pc, #476]	; (800cb44 <SendResults+0x300>)
 800c968:	0038      	movs	r0, r7
 800c96a:	f007 fecf 	bl	801470c <sprintf>
 800c96e:	e7db      	b.n	800c928 <SendResults+0xe4>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800c970:	4b6c      	ldr	r3, [pc, #432]	; (800cb24 <SendResults+0x2e0>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	2b05      	cmp	r3, #5
 800c976:	d01d      	beq.n	800c9b4 <SendResults+0x170>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800c978:	2b07      	cmp	r3, #7
 800c97a:	d000      	beq.n	800c97e <SendResults+0x13a>
 800c97c:	e0b7      	b.n	800caee <SendResults+0x2aa>
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightMsg, strUnit, Raw_Msg);
 800c97e:	9805      	ldr	r0, [sp, #20]
 800c980:	f7f6 fc72 	bl	8003268 <__aeabi_f2d>
 800c984:	9000      	str	r0, [sp, #0]
 800c986:	9101      	str	r1, [sp, #4]
 800c988:	003a      	movs	r2, r7
 800c98a:	496f      	ldr	r1, [pc, #444]	; (800cb48 <SendResults+0x304>)
 800c98c:	0030      	movs	r0, r6
 800c98e:	f007 febd 	bl	801470c <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800c992:	0030      	movs	r0, r6
 800c994:	f7f3 fbc0 	bl	8000118 <strlen>
 800c998:	23fa      	movs	r3, #250	; 0xfa
 800c99a:	b282      	uxth	r2, r0
 800c99c:	496b      	ldr	r1, [pc, #428]	; (800cb4c <SendResults+0x308>)
 800c99e:	7808      	ldrb	r0, [r1, #0]
 800c9a0:	2101      	movs	r1, #1
 800c9a2:	4249      	negs	r1, r1
 800c9a4:	9100      	str	r1, [sp, #0]
 800c9a6:	005b      	lsls	r3, r3, #1
 800c9a8:	0031      	movs	r1, r6
 800c9aa:	f002 fa33 	bl	800ee14 <writePxMutex>
			CheckForEnterKey();
 800c9ae:	f7fe fddd 	bl	800b56c <CheckForEnterKey>
 800c9b2:	e09c      	b.n	800caee <SendResults+0x2aa>
			RawMsgInt=Raw_Msg*10;
 800c9b4:	4966      	ldr	r1, [pc, #408]	; (800cb50 <SendResults+0x30c>)
 800c9b6:	9805      	ldr	r0, [sp, #20]
 800c9b8:	f7f4 faba 	bl	8000f30 <__aeabi_fmul>
 800c9bc:	f7f3 fdfe 	bl	80005bc <__aeabi_f2uiz>
 800c9c0:	0003      	movs	r3, r0
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightMsgUINT, strUnit, RawMsgInt);
 800c9c2:	003a      	movs	r2, r7
 800c9c4:	4963      	ldr	r1, [pc, #396]	; (800cb54 <SendResults+0x310>)
 800c9c6:	0030      	movs	r0, r6
 800c9c8:	f007 fea0 	bl	801470c <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800c9cc:	0030      	movs	r0, r6
 800c9ce:	f7f3 fba3 	bl	8000118 <strlen>
 800c9d2:	23fa      	movs	r3, #250	; 0xfa
 800c9d4:	b282      	uxth	r2, r0
 800c9d6:	495d      	ldr	r1, [pc, #372]	; (800cb4c <SendResults+0x308>)
 800c9d8:	7808      	ldrb	r0, [r1, #0]
 800c9da:	2101      	movs	r1, #1
 800c9dc:	4249      	negs	r1, r1
 800c9de:	9100      	str	r1, [sp, #0]
 800c9e0:	005b      	lsls	r3, r3, #1
 800c9e2:	0031      	movs	r1, r6
 800c9e4:	f002 fa16 	bl	800ee14 <writePxMutex>
			CheckForEnterKey();
 800c9e8:	f7fe fdc0 	bl	800b56c <CheckForEnterKey>
 800c9ec:	e07f      	b.n	800caee <SendResults+0x2aa>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800c9ee:	4b4d      	ldr	r3, [pc, #308]	; (800cb24 <SendResults+0x2e0>)
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	2b05      	cmp	r3, #5
 800c9f4:	d01b      	beq.n	800ca2e <SendResults+0x1ea>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800c9f6:	2b07      	cmp	r3, #7
 800c9f8:	d179      	bne.n	800caee <SendResults+0x2aa>
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightVerboseMsg, Raw_Msg);
 800c9fa:	9805      	ldr	r0, [sp, #20]
 800c9fc:	f7f6 fc34 	bl	8003268 <__aeabi_f2d>
 800ca00:	0002      	movs	r2, r0
 800ca02:	000b      	movs	r3, r1
 800ca04:	4954      	ldr	r1, [pc, #336]	; (800cb58 <SendResults+0x314>)
 800ca06:	0030      	movs	r0, r6
 800ca08:	f007 fe80 	bl	801470c <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ca0c:	0030      	movs	r0, r6
 800ca0e:	f7f3 fb83 	bl	8000118 <strlen>
 800ca12:	23fa      	movs	r3, #250	; 0xfa
 800ca14:	b282      	uxth	r2, r0
 800ca16:	494d      	ldr	r1, [pc, #308]	; (800cb4c <SendResults+0x308>)
 800ca18:	7808      	ldrb	r0, [r1, #0]
 800ca1a:	2101      	movs	r1, #1
 800ca1c:	4249      	negs	r1, r1
 800ca1e:	9100      	str	r1, [sp, #0]
 800ca20:	005b      	lsls	r3, r3, #1
 800ca22:	0031      	movs	r1, r6
 800ca24:	f002 f9f6 	bl	800ee14 <writePxMutex>
			CheckForEnterKey();
 800ca28:	f7fe fda0 	bl	800b56c <CheckForEnterKey>
 800ca2c:	e05f      	b.n	800caee <SendResults+0x2aa>
			RawMsgInt=Raw_Msg*10;
 800ca2e:	4948      	ldr	r1, [pc, #288]	; (800cb50 <SendResults+0x30c>)
 800ca30:	9805      	ldr	r0, [sp, #20]
 800ca32:	f7f4 fa7d 	bl	8000f30 <__aeabi_fmul>
 800ca36:	f7f3 fdc1 	bl	80005bc <__aeabi_f2uiz>
 800ca3a:	0002      	movs	r2, r0
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightVerboseMsgUINT, RawMsgInt);
 800ca3c:	4947      	ldr	r1, [pc, #284]	; (800cb5c <SendResults+0x318>)
 800ca3e:	0030      	movs	r0, r6
 800ca40:	f007 fe64 	bl	801470c <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ca44:	0030      	movs	r0, r6
 800ca46:	f7f3 fb67 	bl	8000118 <strlen>
 800ca4a:	23fa      	movs	r3, #250	; 0xfa
 800ca4c:	b282      	uxth	r2, r0
 800ca4e:	493f      	ldr	r1, [pc, #252]	; (800cb4c <SendResults+0x308>)
 800ca50:	7808      	ldrb	r0, [r1, #0]
 800ca52:	2101      	movs	r1, #1
 800ca54:	4249      	negs	r1, r1
 800ca56:	9100      	str	r1, [sp, #0]
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	0031      	movs	r1, r6
 800ca5c:	f002 f9da 	bl	800ee14 <writePxMutex>
			CheckForEnterKey();
 800ca60:	f7fe fd84 	bl	800b56c <CheckForEnterKey>
 800ca64:	e043      	b.n	800caee <SendResults+0x2aa>
				RawMsgInt=Raw_Msg*10;
 800ca66:	493a      	ldr	r1, [pc, #232]	; (800cb50 <SendResults+0x30c>)
 800ca68:	9805      	ldr	r0, [sp, #20]
 800ca6a:	f7f4 fa61 	bl	8000f30 <__aeabi_fmul>
 800ca6e:	f7f3 fda5 	bl	80005bc <__aeabi_f2uiz>
 800ca72:	9004      	str	r0, [sp, #16]
				if (Module==myID){
 800ca74:	4b2c      	ldr	r3, [pc, #176]	; (800cb28 <SendResults+0x2e4>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	42ab      	cmp	r3, r5
 800ca7a:	d011      	beq.n	800caa0 <SendResults+0x25c>
						messageParams[0] = Port;
 800ca7c:	4b2b      	ldr	r3, [pc, #172]	; (800cb2c <SendResults+0x2e8>)
 800ca7e:	9a03      	ldr	r2, [sp, #12]
 800ca80:	701a      	strb	r2, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&RawMsgInt)+3);
 800ca82:	aa04      	add	r2, sp, #16
 800ca84:	78d1      	ldrb	r1, [r2, #3]
 800ca86:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&RawMsgInt)+2);
 800ca88:	7891      	ldrb	r1, [r2, #2]
 800ca8a:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&RawMsgInt)+1);
 800ca8c:	7851      	ldrb	r1, [r2, #1]
 800ca8e:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&RawMsgInt)+0);
 800ca90:	7812      	ldrb	r2, [r2, #0]
 800ca92:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(Module, CODE_PORT_FORWARD, sizeof(uint32_t)+1);
 800ca94:	2205      	movs	r2, #5
 800ca96:	2123      	movs	r1, #35	; 0x23
 800ca98:	0028      	movs	r0, r5
 800ca9a:	f7fc feb1 	bl	8009800 <SendMessageToModule>
 800ca9e:	e026      	b.n	800caee <SendResults+0x2aa>
						temp[0] = *((__IO uint8_t *)(&RawMsgInt)+3);
 800caa0:	ab04      	add	r3, sp, #16
 800caa2:	78da      	ldrb	r2, [r3, #3]
 800caa4:	492e      	ldr	r1, [pc, #184]	; (800cb60 <SendResults+0x31c>)
 800caa6:	700a      	strb	r2, [r1, #0]
						temp[1] = *((__IO uint8_t *)(&RawMsgInt)+2);
 800caa8:	789a      	ldrb	r2, [r3, #2]
 800caaa:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&RawMsgInt)+1);
 800caac:	785a      	ldrb	r2, [r3, #1]
 800caae:	708a      	strb	r2, [r1, #2]
						temp[3] = *((__IO uint8_t *)(&RawMsgInt)+0);
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	70cb      	strb	r3, [r1, #3]
						writePxMutex(Port, (char *)&temp, 4*sizeof(uint8_t), 10, 10);
 800cab4:	230a      	movs	r3, #10
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	2204      	movs	r2, #4
 800caba:	9803      	ldr	r0, [sp, #12]
 800cabc:	f002 f9aa 	bl	800ee14 <writePxMutex>
 800cac0:	e015      	b.n	800caee <SendResults+0x2aa>
						temp[0] = *((__IO uint8_t *)(&Raw_Msg)+3);
 800cac2:	ab05      	add	r3, sp, #20
 800cac4:	78da      	ldrb	r2, [r3, #3]
 800cac6:	4926      	ldr	r1, [pc, #152]	; (800cb60 <SendResults+0x31c>)
 800cac8:	700a      	strb	r2, [r1, #0]
						temp[1] = *((__IO uint8_t *)(&Raw_Msg)+2);
 800caca:	789a      	ldrb	r2, [r3, #2]
 800cacc:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&Raw_Msg)+1);
 800cace:	785a      	ldrb	r2, [r3, #1]
 800cad0:	708a      	strb	r2, [r1, #2]
						temp[3] = *((__IO uint8_t *)(&Raw_Msg)+0);
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	70cb      	strb	r3, [r1, #3]
						writePxMutex(Port, (char *)&temp, 4*sizeof(uint8_t), 10, 10);
 800cad6:	230a      	movs	r3, #10
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	2204      	movs	r2, #4
 800cadc:	9803      	ldr	r0, [sp, #12]
 800cade:	f002 f999 	bl	800ee14 <writePxMutex>
 800cae2:	e004      	b.n	800caee <SendResults+0x2aa>
      memcpy(Buffer, &Raw_Msg, sizeof(float));
 800cae4:	2204      	movs	r2, #4
 800cae6:	a905      	add	r1, sp, #20
 800cae8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800caea:	f007 fc11 	bl	8014310 <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE){
 800caee:	3c02      	subs	r4, #2
 800caf0:	23fd      	movs	r3, #253	; 0xfd
 800caf2:	421c      	tst	r4, r3
 800caf4:	d102      	bne.n	800cafc <SendResults+0x2b8>
}
 800caf6:	2000      	movs	r0, #0
 800caf8:	b007      	add	sp, #28
 800cafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		free(strUnit);
 800cafc:	0038      	movs	r0, r7
 800cafe:	f007 f9db 	bl	8013eb8 <free>
	return (H26R0_OK);
 800cb02:	e7f8      	b.n	800caf6 <SendResults+0x2b2>
 800cb04:	200000b4 	.word	0x200000b4
 800cb08:	0801d188 	.word	0x0801d188
 800cb0c:	447a0000 	.word	0x447a0000
 800cb10:	6e978d50 	.word	0x6e978d50
 800cb14:	4041a312 	.word	0x4041a312
 800cb18:	2f275feb 	.word	0x2f275feb
 800cb1c:	4001a311 	.word	0x4001a311
 800cb20:	20006e60 	.word	0x20006e60
 800cb24:	20000084 	.word	0x20000084
 800cb28:	2000104c 	.word	0x2000104c
 800cb2c:	20000f18 	.word	0x20000f18
 800cb30:	0801d130 	.word	0x0801d130
 800cb34:	0801d1a0 	.word	0x0801d1a0
 800cb38:	0801d128 	.word	0x0801d128
 800cb3c:	0801d134 	.word	0x0801d134
 800cb40:	0801d13c 	.word	0x0801d13c
 800cb44:	0801d144 	.word	0x0801d144
 800cb48:	0801d164 	.word	0x0801d164
 800cb4c:	20000aa7 	.word	0x20000aa7
 800cb50:	41200000 	.word	0x41200000
 800cb54:	0801d150 	.word	0x0801d150
 800cb58:	0801d180 	.word	0x0801d180
 800cb5c:	0801d178 	.word	0x0801d178
 800cb60:	20001ac8 	.word	0x20001ac8

0800cb64 <sampleCommand>:
{
 800cb64:	b510      	push	{r4, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	0004      	movs	r4, r0
 800cb6a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	9303      	str	r3, [sp, #12]
  configASSERT( pcWriteBuffer );
 800cb70:	2c00      	cmp	r4, #0
 800cb72:	d014      	beq.n	800cb9e <sampleCommand+0x3a>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800cb74:	aa03      	add	r2, sp, #12
 800cb76:	2101      	movs	r1, #1
 800cb78:	f002 fba2 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
  if (NULL != pcParameterString1)
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d005      	beq.n	800cb8c <sampleCommand+0x28>
    channel = atoi( (char *)pcParameterString1);
 800cb80:	f007 f95f 	bl	8013e42 <atoi>
 800cb84:	b2c0      	uxtb	r0, r0
	if (channel == 1 || channel == 2)
 800cb86:	1e43      	subs	r3, r0, #1
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d90a      	bls.n	800cba2 <sampleCommand+0x3e>
  memset((char *) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800cb8c:	2299      	movs	r2, #153	; 0x99
 800cb8e:	0092      	lsls	r2, r2, #2
 800cb90:	2100      	movs	r1, #0
 800cb92:	0020      	movs	r0, r4
 800cb94:	f007 fbc5 	bl	8014322 <memset>
}
 800cb98:	2000      	movs	r0, #0
 800cb9a:	b004      	add	sp, #16
 800cb9c:	bd10      	pop	{r4, pc}
  configASSERT( pcWriteBuffer );
 800cb9e:	b672      	cpsid	i
 800cba0:	e7fe      	b.n	800cba0 <sampleCommand+0x3c>
		DATA_To_SEND=SampleKGram(channel);
 800cba2:	f7ff fdcf 	bl	800c744 <SampleKGram>
 800cba6:	4b07      	ldr	r3, [pc, #28]	; (800cbc4 <sampleCommand+0x60>)
 800cba8:	6018      	str	r0, [r3, #0]
		global_mode=SAMPLE_CLI_CASE;
 800cbaa:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <sampleCommand+0x64>)
 800cbac:	2206      	movs	r2, #6
 800cbae:	701a      	strb	r2, [r3, #0]
		SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800cbb0:	4b06      	ldr	r3, [pc, #24]	; (800cbcc <sampleCommand+0x68>)
 800cbb2:	781a      	ldrb	r2, [r3, #0]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	9301      	str	r3, [sp, #4]
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	2106      	movs	r1, #6
 800cbbc:	f7ff fe42 	bl	800c844 <SendResults>
 800cbc0:	e7e4      	b.n	800cb8c <sampleCommand+0x28>
 800cbc2:	46c0      	nop			; (mov r8, r8)
 800cbc4:	2000169c 	.word	0x2000169c
 800cbc8:	20006e61 	.word	0x20006e61
 800cbcc:	200000b4 	.word	0x200000b4

0800cbd0 <LoadcellTask>:
{
 800cbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbd2:	46c6      	mov	lr, r8
 800cbd4:	b500      	push	{lr}
 800cbd6:	b082      	sub	sp, #8
		switch(global_mode)
 800cbd8:	4c47      	ldr	r4, [pc, #284]	; (800ccf8 <LoadcellTask+0x128>)
				DATA_To_SEND=SampleKGram(global_ch);	
 800cbda:	4b48      	ldr	r3, [pc, #288]	; (800ccfc <LoadcellTask+0x12c>)
 800cbdc:	4698      	mov	r8, r3
 800cbde:	4d48      	ldr	r5, [pc, #288]	; (800cd00 <LoadcellTask+0x130>)
 800cbe0:	e035      	b.n	800cc4e <LoadcellTask+0x7e>
		switch(global_mode)
 800cbe2:	2b04      	cmp	r3, #4
 800cbe4:	d000      	beq.n	800cbe8 <LoadcellTask+0x18>
 800cbe6:	e082      	b.n	800ccee <LoadcellTask+0x11e>
				t0=HAL_GetTick();
 800cbe8:	f004 fab0 	bl	801114c <HAL_GetTick>
 800cbec:	0007      	movs	r7, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800cbee:	4b43      	ldr	r3, [pc, #268]	; (800ccfc <LoadcellTask+0x12c>)
 800cbf0:	7818      	ldrb	r0, [r3, #0]
 800cbf2:	f7ff fda7 	bl	800c744 <SampleKGram>
 800cbf6:	4b42      	ldr	r3, [pc, #264]	; (800cd00 <LoadcellTask+0x130>)
 800cbf8:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800cbfa:	4b42      	ldr	r3, [pc, #264]	; (800cd04 <LoadcellTask+0x134>)
 800cbfc:	781a      	ldrb	r2, [r3, #0]
 800cbfe:	4b3e      	ldr	r3, [pc, #248]	; (800ccf8 <LoadcellTask+0x128>)
 800cc00:	7819      	ldrb	r1, [r3, #0]
 800cc02:	2300      	movs	r3, #0
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	9300      	str	r3, [sp, #0]
 800cc08:	f7ff fe1c 	bl	800c844 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800cc0c:	4e3e      	ldr	r6, [pc, #248]	; (800cd08 <LoadcellTask+0x138>)
 800cc0e:	e040      	b.n	800cc92 <LoadcellTask+0xc2>
				t0=HAL_GetTick();
 800cc10:	f004 fa9c 	bl	801114c <HAL_GetTick>
 800cc14:	0007      	movs	r7, r0
				DATA_To_SEND=SampleKGram(global_ch);		
 800cc16:	4b39      	ldr	r3, [pc, #228]	; (800ccfc <LoadcellTask+0x12c>)
 800cc18:	7818      	ldrb	r0, [r3, #0]
 800cc1a:	f7ff fd93 	bl	800c744 <SampleKGram>
 800cc1e:	4b38      	ldr	r3, [pc, #224]	; (800cd00 <LoadcellTask+0x130>)
 800cc20:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800cc22:	4b38      	ldr	r3, [pc, #224]	; (800cd04 <LoadcellTask+0x134>)
 800cc24:	781a      	ldrb	r2, [r3, #0]
 800cc26:	4b34      	ldr	r3, [pc, #208]	; (800ccf8 <LoadcellTask+0x128>)
 800cc28:	7819      	ldrb	r1, [r3, #0]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	9301      	str	r3, [sp, #4]
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	f7ff fe08 	bl	800c844 <SendResults>
				while(HAL_GetTick()-t0<(global_period-1)) {taskYIELD();}
 800cc34:	4e34      	ldr	r6, [pc, #208]	; (800cd08 <LoadcellTask+0x138>)
 800cc36:	e001      	b.n	800cc3c <LoadcellTask+0x6c>
 800cc38:	f004 f914 	bl	8010e64 <vPortYield>
 800cc3c:	f004 fa86 	bl	801114c <HAL_GetTick>
 800cc40:	1bc0      	subs	r0, r0, r7
 800cc42:	6833      	ldr	r3, [r6, #0]
 800cc44:	3b01      	subs	r3, #1
 800cc46:	4298      	cmp	r0, r3
 800cc48:	d3f6      	bcc.n	800cc38 <LoadcellTask+0x68>
		taskYIELD();
 800cc4a:	f004 f90b 	bl	8010e64 <vPortYield>
		switch(global_mode)
 800cc4e:	7823      	ldrb	r3, [r4, #0]
 800cc50:	2b03      	cmp	r3, #3
 800cc52:	d02e      	beq.n	800ccb2 <LoadcellTask+0xe2>
 800cc54:	d8c5      	bhi.n	800cbe2 <LoadcellTask+0x12>
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d0da      	beq.n	800cc10 <LoadcellTask+0x40>
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d147      	bne.n	800ccee <LoadcellTask+0x11e>
				t0=HAL_GetTick();
 800cc5e:	f004 fa75 	bl	801114c <HAL_GetTick>
 800cc62:	0007      	movs	r7, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800cc64:	4b25      	ldr	r3, [pc, #148]	; (800ccfc <LoadcellTask+0x12c>)
 800cc66:	7818      	ldrb	r0, [r3, #0]
 800cc68:	f7ff fd6c 	bl	800c744 <SampleKGram>
 800cc6c:	4b24      	ldr	r3, [pc, #144]	; (800cd00 <LoadcellTask+0x130>)
 800cc6e:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, global_port, global_module, NULL);
 800cc70:	4b26      	ldr	r3, [pc, #152]	; (800cd0c <LoadcellTask+0x13c>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	4a23      	ldr	r2, [pc, #140]	; (800cd04 <LoadcellTask+0x134>)
 800cc76:	7812      	ldrb	r2, [r2, #0]
 800cc78:	491f      	ldr	r1, [pc, #124]	; (800ccf8 <LoadcellTask+0x128>)
 800cc7a:	7809      	ldrb	r1, [r1, #0]
 800cc7c:	2600      	movs	r6, #0
 800cc7e:	9601      	str	r6, [sp, #4]
 800cc80:	4e23      	ldr	r6, [pc, #140]	; (800cd10 <LoadcellTask+0x140>)
 800cc82:	7836      	ldrb	r6, [r6, #0]
 800cc84:	9600      	str	r6, [sp, #0]
 800cc86:	f7ff fddd 	bl	800c844 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800cc8a:	4e1f      	ldr	r6, [pc, #124]	; (800cd08 <LoadcellTask+0x138>)
 800cc8c:	e00a      	b.n	800cca4 <LoadcellTask+0xd4>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800cc8e:	f004 f8e9 	bl	8010e64 <vPortYield>
 800cc92:	f004 fa5b 	bl	801114c <HAL_GetTick>
 800cc96:	1bc0      	subs	r0, r0, r7
 800cc98:	6833      	ldr	r3, [r6, #0]
 800cc9a:	4298      	cmp	r0, r3
 800cc9c:	d3f7      	bcc.n	800cc8e <LoadcellTask+0xbe>
 800cc9e:	e7d4      	b.n	800cc4a <LoadcellTask+0x7a>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800cca0:	f004 f8e0 	bl	8010e64 <vPortYield>
 800cca4:	f004 fa52 	bl	801114c <HAL_GetTick>
 800cca8:	1bc0      	subs	r0, r0, r7
 800ccaa:	6833      	ldr	r3, [r6, #0]
 800ccac:	4298      	cmp	r0, r3
 800ccae:	d3f7      	bcc.n	800cca0 <LoadcellTask+0xd0>
 800ccb0:	e7cb      	b.n	800cc4a <LoadcellTask+0x7a>
				t0=HAL_GetTick();
 800ccb2:	f004 fa4b 	bl	801114c <HAL_GetTick>
 800ccb6:	0007      	movs	r7, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800ccb8:	4643      	mov	r3, r8
 800ccba:	7818      	ldrb	r0, [r3, #0]
 800ccbc:	f7ff fd42 	bl	800c744 <SampleKGram>
 800ccc0:	6028      	str	r0, [r5, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, ptr_weight_buffer);
 800ccc2:	4b10      	ldr	r3, [pc, #64]	; (800cd04 <LoadcellTask+0x134>)
 800ccc4:	781a      	ldrb	r2, [r3, #0]
 800ccc6:	4b0c      	ldr	r3, [pc, #48]	; (800ccf8 <LoadcellTask+0x128>)
 800ccc8:	7819      	ldrb	r1, [r3, #0]
 800ccca:	4b12      	ldr	r3, [pc, #72]	; (800cd14 <LoadcellTask+0x144>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	f7ff fdb6 	bl	800c844 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800ccd8:	4e0b      	ldr	r6, [pc, #44]	; (800cd08 <LoadcellTask+0x138>)
 800ccda:	e001      	b.n	800cce0 <LoadcellTask+0x110>
 800ccdc:	f004 f8c2 	bl	8010e64 <vPortYield>
 800cce0:	f004 fa34 	bl	801114c <HAL_GetTick>
 800cce4:	1bc0      	subs	r0, r0, r7
 800cce6:	6833      	ldr	r3, [r6, #0]
 800cce8:	4298      	cmp	r0, r3
 800ccea:	d3f7      	bcc.n	800ccdc <LoadcellTask+0x10c>
 800ccec:	e7ad      	b.n	800cc4a <LoadcellTask+0x7a>
			default: global_mode = IDLE_CASE; break;
 800ccee:	4b02      	ldr	r3, [pc, #8]	; (800ccf8 <LoadcellTask+0x128>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	701a      	strb	r2, [r3, #0]
 800ccf4:	e7a9      	b.n	800cc4a <LoadcellTask+0x7a>
 800ccf6:	46c0      	nop			; (mov r8, r8)
 800ccf8:	20006e61 	.word	0x20006e61
 800ccfc:	20006e60 	.word	0x20006e60
 800cd00:	2000169c 	.word	0x2000169c
 800cd04:	200000b4 	.word	0x200000b4
 800cd08:	2000702c 	.word	0x2000702c
 800cd0c:	20006e62 	.word	0x20006e62
 800cd10:	200070a0 	.word	0x200070a0
 800cd14:	20006f48 	.word	0x20006f48

0800cd18 <ZeroCal>:
{
 800cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1a:	0004      	movs	r4, r0
	IND_ON();
 800cd1c:	2780      	movs	r7, #128	; 0x80
 800cd1e:	013f      	lsls	r7, r7, #4
 800cd20:	2690      	movs	r6, #144	; 0x90
 800cd22:	05f6      	lsls	r6, r6, #23
 800cd24:	2201      	movs	r2, #1
 800cd26:	0039      	movs	r1, r7
 800cd28:	0030      	movs	r0, r6
 800cd2a:	f005 faf7 	bl	801231c <HAL_GPIO_WritePin>
	SetHX711Rate(80);
 800cd2e:	2050      	movs	r0, #80	; 0x50
 800cd30:	f7fe ff98 	bl	800bc64 <SetHX711Rate>
	Zero_Drift=(Average(ch,100)*0.5*AVDD)/(ADC_full_range*gain);
 800cd34:	2164      	movs	r1, #100	; 0x64
 800cd36:	0020      	movs	r0, r4
 800cd38:	f7ff fd4c 	bl	800c7d4 <Average>
 800cd3c:	f7f6 fa94 	bl	8003268 <__aeabi_f2d>
 800cd40:	2200      	movs	r2, #0
 800cd42:	4b1a      	ldr	r3, [pc, #104]	; (800cdac <ZeroCal+0x94>)
 800cd44:	f7f5 fbe8 	bl	8002518 <__aeabi_dmul>
 800cd48:	2200      	movs	r2, #0
 800cd4a:	4b19      	ldr	r3, [pc, #100]	; (800cdb0 <ZeroCal+0x98>)
 800cd4c:	f7f5 fbe4 	bl	8002518 <__aeabi_dmul>
 800cd50:	0004      	movs	r4, r0
 800cd52:	000d      	movs	r5, r1
 800cd54:	4b17      	ldr	r3, [pc, #92]	; (800cdb4 <ZeroCal+0x9c>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	05d8      	lsls	r0, r3, #23
 800cd5a:	1ac0      	subs	r0, r0, r3
 800cd5c:	f7f6 fa2e 	bl	80031bc <__aeabi_i2d>
 800cd60:	0002      	movs	r2, r0
 800cd62:	000b      	movs	r3, r1
 800cd64:	0020      	movs	r0, r4
 800cd66:	0029      	movs	r1, r5
 800cd68:	f7f4 ffd0 	bl	8001d0c <__aeabi_ddiv>
 800cd6c:	f7f6 fac4 	bl	80032f8 <__aeabi_d2f>
 800cd70:	4b11      	ldr	r3, [pc, #68]	; (800cdb8 <ZeroCal+0xa0>)
 800cd72:	6018      	str	r0, [r3, #0]
	temp32=*(uint32_t*)&Zero_Drift;
 800cd74:	4c11      	ldr	r4, [pc, #68]	; (800cdbc <ZeroCal+0xa4>)
 800cd76:	6020      	str	r0, [r4, #0]
	SetHX711Rate(10);
 800cd78:	200a      	movs	r0, #10
 800cd7a:	f7fe ff73 	bl	800bc64 <SetHX711Rate>
	word_LSB=0x0000FFFF & temp32;
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	b299      	uxth	r1, r3
 800cd82:	4a0f      	ldr	r2, [pc, #60]	; (800cdc0 <ZeroCal+0xa8>)
 800cd84:	8011      	strh	r1, [r2, #0]
	word_MSB=0x0000FFFF & (temp32>>16); 
 800cd86:	4c0f      	ldr	r4, [pc, #60]	; (800cdc4 <ZeroCal+0xac>)
 800cd88:	0c1b      	lsrs	r3, r3, #16
 800cd8a:	8023      	strh	r3, [r4, #0]
	EE_WriteVariable(_EE_zero_drift_LSB, word_LSB);
 800cd8c:	20fa      	movs	r0, #250	; 0xfa
 800cd8e:	30ff      	adds	r0, #255	; 0xff
 800cd90:	f7fb f832 	bl	8007df8 <EE_WriteVariable>
	EE_WriteVariable(_EE_zero_drift_MSB, word_MSB);
 800cd94:	8821      	ldrh	r1, [r4, #0]
 800cd96:	20fd      	movs	r0, #253	; 0xfd
 800cd98:	0040      	lsls	r0, r0, #1
 800cd9a:	f7fb f82d 	bl	8007df8 <EE_WriteVariable>
	IND_OFF();
 800cd9e:	2200      	movs	r2, #0
 800cda0:	0039      	movs	r1, r7
 800cda2:	0030      	movs	r0, r6
 800cda4:	f005 faba 	bl	801231c <HAL_GPIO_WritePin>
}
 800cda8:	2000      	movs	r0, #0
 800cdaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdac:	3fe00000 	.word	0x3fe00000
 800cdb0:	40080000 	.word	0x40080000
 800cdb4:	2000008c 	.word	0x2000008c
 800cdb8:	20001ab0 	.word	0x20001ab0
 800cdbc:	20001acc 	.word	0x20001acc
 800cdc0:	20001ae8 	.word	0x20001ae8
 800cdc4:	20001aea 	.word	0x20001aea

0800cdc8 <zerocalCommand>:
{
 800cdc8:	b510      	push	{r4, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	0004      	movs	r4, r0
 800cdce:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800cdd4:	2c00      	cmp	r4, #0
 800cdd6:	d010      	beq.n	800cdfa <zerocalCommand+0x32>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800cdd8:	aa01      	add	r2, sp, #4
 800cdda:	2101      	movs	r1, #1
 800cddc:	f002 fa70 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
  if (!strncmp((const char *)pcParameterString1, "1", 1))
 800cde0:	7803      	ldrb	r3, [r0, #0]
 800cde2:	2b31      	cmp	r3, #49	; 0x31
 800cde4:	d00b      	beq.n	800cdfe <zerocalCommand+0x36>
  else if (!strncmp((const char *)pcParameterString1, "2", 1))
 800cde6:	2b32      	cmp	r3, #50	; 0x32
 800cde8:	d012      	beq.n	800ce10 <zerocalCommand+0x48>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800cdea:	2213      	movs	r2, #19
 800cdec:	490d      	ldr	r1, [pc, #52]	; (800ce24 <zerocalCommand+0x5c>)
 800cdee:	0020      	movs	r0, r4
 800cdf0:	f007 fa8e 	bl	8014310 <memcpy>
}
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	b002      	add	sp, #8
 800cdf8:	bd10      	pop	{r4, pc}
  configASSERT( pcWriteBuffer );
 800cdfa:	b672      	cpsid	i
 800cdfc:	e7fe      	b.n	800cdfc <zerocalCommand+0x34>
		ZeroCal(channel);
 800cdfe:	2001      	movs	r0, #1
 800ce00:	f7ff ff8a 	bl	800cd18 <ZeroCal>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Zero calibration for channel 1\r\n" );
 800ce04:	2221      	movs	r2, #33	; 0x21
 800ce06:	4908      	ldr	r1, [pc, #32]	; (800ce28 <zerocalCommand+0x60>)
 800ce08:	0020      	movs	r0, r4
 800ce0a:	f007 fa81 	bl	8014310 <memcpy>
 800ce0e:	e7f1      	b.n	800cdf4 <zerocalCommand+0x2c>
		ZeroCal(channel);
 800ce10:	2002      	movs	r0, #2
 800ce12:	f7ff ff81 	bl	800cd18 <ZeroCal>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Zero calibration for channel 2\r\n" );
 800ce16:	2221      	movs	r2, #33	; 0x21
 800ce18:	4904      	ldr	r1, [pc, #16]	; (800ce2c <zerocalCommand+0x64>)
 800ce1a:	0020      	movs	r0, r4
 800ce1c:	f007 fa78 	bl	8014310 <memcpy>
 800ce20:	e7e8      	b.n	800cdf4 <zerocalCommand+0x2c>
 800ce22:	46c0      	nop			; (mov r8, r8)
 800ce24:	0801b0b8 	.word	0x0801b0b8
 800ce28:	0801d1c8 	.word	0x0801d1c8
 800ce2c:	0801d1ec 	.word	0x0801d1ec

0800ce30 <Module_MessagingTask>:
{
 800ce30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce32:	46d6      	mov	lr, sl
 800ce34:	464f      	mov	r7, r9
 800ce36:	4646      	mov	r6, r8
 800ce38:	b5c0      	push	{r6, r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	ab0a      	add	r3, sp, #40	; 0x28
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	469a      	mov	sl, r3
	switch (code)
 800ce42:	4bcf      	ldr	r3, [pc, #828]	; (800d180 <Module_MessagingTask+0x350>)
 800ce44:	469c      	mov	ip, r3
 800ce46:	4460      	add	r0, ip
 800ce48:	b283      	uxth	r3, r0
 800ce4a:	2b0d      	cmp	r3, #13
 800ce4c:	d900      	bls.n	800ce50 <Module_MessagingTask+0x20>
 800ce4e:	e195      	b.n	800d17c <Module_MessagingTask+0x34c>
 800ce50:	0098      	lsls	r0, r3, #2
 800ce52:	4bcc      	ldr	r3, [pc, #816]	; (800d184 <Module_MessagingTask+0x354>)
 800ce54:	581b      	ldr	r3, [r3, r0]
 800ce56:	469f      	mov	pc, r3
			SetHX711Rate(cMessage[port-1][shift]);
 800ce58:	3901      	subs	r1, #1
 800ce5a:	00cb      	lsls	r3, r1, #3
 800ce5c:	1a59      	subs	r1, r3, r1
 800ce5e:	00c9      	lsls	r1, r1, #3
 800ce60:	4bc9      	ldr	r3, [pc, #804]	; (800d188 <Module_MessagingTask+0x358>)
 800ce62:	1859      	adds	r1, r3, r1
 800ce64:	4653      	mov	r3, sl
 800ce66:	5cc8      	ldrb	r0, [r1, r3]
 800ce68:	f7fe fefc 	bl	800bc64 <SetHX711Rate>
	Module_Status result = H26R0_OK;
 800ce6c:	2000      	movs	r0, #0
}
 800ce6e:	b002      	add	sp, #8
 800ce70:	bce0      	pop	{r5, r6, r7}
 800ce72:	46ba      	mov	sl, r7
 800ce74:	46b1      	mov	r9, r6
 800ce76:	46a8      	mov	r8, r5
 800ce78:	bdf0      	pop	{r4, r5, r6, r7, pc}
			period = ( (uint32_t) cMessage[port-1][1+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + cMessage[port-1][4+shift];
 800ce7a:	3901      	subs	r1, #1
 800ce7c:	4ec2      	ldr	r6, [pc, #776]	; (800d188 <Module_MessagingTask+0x358>)
 800ce7e:	00cf      	lsls	r7, r1, #3
 800ce80:	1a78      	subs	r0, r7, r1
 800ce82:	00c0      	lsls	r0, r0, #3
 800ce84:	1830      	adds	r0, r6, r0
 800ce86:	4653      	mov	r3, sl
 800ce88:	18c4      	adds	r4, r0, r3
 800ce8a:	7863      	ldrb	r3, [r4, #1]
 800ce8c:	061b      	lsls	r3, r3, #24
 800ce8e:	78a2      	ldrb	r2, [r4, #2]
 800ce90:	0412      	lsls	r2, r2, #16
 800ce92:	189b      	adds	r3, r3, r2
 800ce94:	7922      	ldrb	r2, [r4, #4]
 800ce96:	189b      	adds	r3, r3, r2
 800ce98:	78e2      	ldrb	r2, [r4, #3]
 800ce9a:	0212      	lsls	r2, r2, #8
 800ce9c:	189b      	adds	r3, r3, r2
			StreamGramToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800ce9e:	7aa2      	ldrb	r2, [r4, #10]
 800cea0:	7a65      	ldrb	r5, [r4, #9]
 800cea2:	46ac      	mov	ip, r5
 800cea4:	4655      	mov	r5, sl
 800cea6:	5d40      	ldrb	r0, [r0, r5]
			timeout = ( (uint32_t) cMessage[port-1][5+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][7+shift] << 8 ) + cMessage[port-1][8+shift];
 800cea8:	7965      	ldrb	r5, [r4, #5]
 800ceaa:	062d      	lsls	r5, r5, #24
 800ceac:	46a8      	mov	r8, r5
 800ceae:	79a5      	ldrb	r5, [r4, #6]
 800ceb0:	042d      	lsls	r5, r5, #16
 800ceb2:	46a9      	mov	r9, r5
 800ceb4:	44c8      	add	r8, r9
 800ceb6:	7a24      	ldrb	r4, [r4, #8]
 800ceb8:	4444      	add	r4, r8
 800ceba:	1a7f      	subs	r7, r7, r1
 800cebc:	00ff      	lsls	r7, r7, #3
 800cebe:	19f6      	adds	r6, r6, r7
 800cec0:	0035      	movs	r5, r6
 800cec2:	4455      	add	r5, sl
 800cec4:	79e9      	ldrb	r1, [r5, #7]
 800cec6:	0209      	lsls	r1, r1, #8
 800cec8:	1861      	adds	r1, r4, r1
			StreamGramToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800ceca:	9100      	str	r1, [sp, #0]
 800cecc:	4661      	mov	r1, ip
 800cece:	f7ff f823 	bl	800bf18 <StreamGramToPort>
	Module_Status result = H26R0_OK;
 800ced2:	2000      	movs	r0, #0
			break;
 800ced4:	e7cb      	b.n	800ce6e <Module_MessagingTask+0x3e>
			period = ( (uint32_t) cMessage[port-1][1+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + cMessage[port-1][4+shift];
 800ced6:	3901      	subs	r1, #1
 800ced8:	4fab      	ldr	r7, [pc, #684]	; (800d188 <Module_MessagingTask+0x358>)
 800ceda:	00cc      	lsls	r4, r1, #3
 800cedc:	1a60      	subs	r0, r4, r1
 800cede:	00c0      	lsls	r0, r0, #3
 800cee0:	1838      	adds	r0, r7, r0
 800cee2:	4653      	mov	r3, sl
 800cee4:	18c6      	adds	r6, r0, r3
 800cee6:	7873      	ldrb	r3, [r6, #1]
 800cee8:	061b      	lsls	r3, r3, #24
 800ceea:	78b2      	ldrb	r2, [r6, #2]
 800ceec:	0412      	lsls	r2, r2, #16
 800ceee:	189b      	adds	r3, r3, r2
 800cef0:	7932      	ldrb	r2, [r6, #4]
 800cef2:	189b      	adds	r3, r3, r2
 800cef4:	78f2      	ldrb	r2, [r6, #3]
 800cef6:	0212      	lsls	r2, r2, #8
 800cef8:	189b      	adds	r3, r3, r2
			StreamKGramToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800cefa:	7ab2      	ldrb	r2, [r6, #10]
 800cefc:	7a75      	ldrb	r5, [r6, #9]
 800cefe:	46ac      	mov	ip, r5
 800cf00:	4655      	mov	r5, sl
 800cf02:	5d40      	ldrb	r0, [r0, r5]
			timeout = ( (uint32_t) cMessage[port-1][5+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][7+shift] << 8 ) + cMessage[port-1][8+shift];
 800cf04:	7975      	ldrb	r5, [r6, #5]
 800cf06:	062d      	lsls	r5, r5, #24
 800cf08:	46a8      	mov	r8, r5
 800cf0a:	79b5      	ldrb	r5, [r6, #6]
 800cf0c:	042d      	lsls	r5, r5, #16
 800cf0e:	46a9      	mov	r9, r5
 800cf10:	44c8      	add	r8, r9
 800cf12:	7a36      	ldrb	r6, [r6, #8]
 800cf14:	4446      	add	r6, r8
 800cf16:	1a64      	subs	r4, r4, r1
 800cf18:	00e4      	lsls	r4, r4, #3
 800cf1a:	193c      	adds	r4, r7, r4
 800cf1c:	4454      	add	r4, sl
 800cf1e:	79e1      	ldrb	r1, [r4, #7]
 800cf20:	0209      	lsls	r1, r1, #8
 800cf22:	1871      	adds	r1, r6, r1
			StreamKGramToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800cf24:	9100      	str	r1, [sp, #0]
 800cf26:	4661      	mov	r1, ip
 800cf28:	f7ff f844 	bl	800bfb4 <StreamKGramToPort>
	Module_Status result = H26R0_OK;
 800cf2c:	2000      	movs	r0, #0
			break;
 800cf2e:	e79e      	b.n	800ce6e <Module_MessagingTask+0x3e>
			period = ( (uint32_t) cMessage[port-1][1+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + cMessage[port-1][4+shift];
 800cf30:	3901      	subs	r1, #1
 800cf32:	4f95      	ldr	r7, [pc, #596]	; (800d188 <Module_MessagingTask+0x358>)
 800cf34:	00cc      	lsls	r4, r1, #3
 800cf36:	1a60      	subs	r0, r4, r1
 800cf38:	00c0      	lsls	r0, r0, #3
 800cf3a:	1838      	adds	r0, r7, r0
 800cf3c:	4653      	mov	r3, sl
 800cf3e:	18c6      	adds	r6, r0, r3
 800cf40:	7873      	ldrb	r3, [r6, #1]
 800cf42:	061b      	lsls	r3, r3, #24
 800cf44:	78b2      	ldrb	r2, [r6, #2]
 800cf46:	0412      	lsls	r2, r2, #16
 800cf48:	189b      	adds	r3, r3, r2
 800cf4a:	7932      	ldrb	r2, [r6, #4]
 800cf4c:	189b      	adds	r3, r3, r2
 800cf4e:	78f2      	ldrb	r2, [r6, #3]
 800cf50:	0212      	lsls	r2, r2, #8
 800cf52:	189b      	adds	r3, r3, r2
			StreamOunceToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800cf54:	7ab2      	ldrb	r2, [r6, #10]
 800cf56:	7a75      	ldrb	r5, [r6, #9]
 800cf58:	46ac      	mov	ip, r5
 800cf5a:	4655      	mov	r5, sl
 800cf5c:	5d40      	ldrb	r0, [r0, r5]
			timeout = ( (uint32_t) cMessage[port-1][5+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][7+shift] << 8 ) + cMessage[port-1][8+shift];
 800cf5e:	7975      	ldrb	r5, [r6, #5]
 800cf60:	062d      	lsls	r5, r5, #24
 800cf62:	46a8      	mov	r8, r5
 800cf64:	79b5      	ldrb	r5, [r6, #6]
 800cf66:	042d      	lsls	r5, r5, #16
 800cf68:	46a9      	mov	r9, r5
 800cf6a:	44c8      	add	r8, r9
 800cf6c:	7a36      	ldrb	r6, [r6, #8]
 800cf6e:	4446      	add	r6, r8
 800cf70:	1a64      	subs	r4, r4, r1
 800cf72:	00e4      	lsls	r4, r4, #3
 800cf74:	193c      	adds	r4, r7, r4
 800cf76:	4454      	add	r4, sl
 800cf78:	79e1      	ldrb	r1, [r4, #7]
 800cf7a:	0209      	lsls	r1, r1, #8
 800cf7c:	1871      	adds	r1, r6, r1
			StreamOunceToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800cf7e:	9100      	str	r1, [sp, #0]
 800cf80:	4661      	mov	r1, ip
 800cf82:	f7ff f863 	bl	800c04c <StreamOunceToPort>
	Module_Status result = H26R0_OK;
 800cf86:	2000      	movs	r0, #0
			break;
 800cf88:	e771      	b.n	800ce6e <Module_MessagingTask+0x3e>
			period = ( (uint32_t) cMessage[port-1][1+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + cMessage[port-1][4+shift];
 800cf8a:	3901      	subs	r1, #1
 800cf8c:	4e7e      	ldr	r6, [pc, #504]	; (800d188 <Module_MessagingTask+0x358>)
 800cf8e:	00cf      	lsls	r7, r1, #3
 800cf90:	1a78      	subs	r0, r7, r1
 800cf92:	00c0      	lsls	r0, r0, #3
 800cf94:	1830      	adds	r0, r6, r0
 800cf96:	4653      	mov	r3, sl
 800cf98:	18c4      	adds	r4, r0, r3
 800cf9a:	7863      	ldrb	r3, [r4, #1]
 800cf9c:	061b      	lsls	r3, r3, #24
 800cf9e:	78a2      	ldrb	r2, [r4, #2]
 800cfa0:	0412      	lsls	r2, r2, #16
 800cfa2:	189b      	adds	r3, r3, r2
 800cfa4:	7922      	ldrb	r2, [r4, #4]
 800cfa6:	189b      	adds	r3, r3, r2
 800cfa8:	78e2      	ldrb	r2, [r4, #3]
 800cfaa:	0212      	lsls	r2, r2, #8
 800cfac:	189b      	adds	r3, r3, r2
			StreamPoundToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800cfae:	7aa2      	ldrb	r2, [r4, #10]
 800cfb0:	7a65      	ldrb	r5, [r4, #9]
 800cfb2:	46ac      	mov	ip, r5
 800cfb4:	4655      	mov	r5, sl
 800cfb6:	5d40      	ldrb	r0, [r0, r5]
			timeout = ( (uint32_t) cMessage[port-1][5+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][7+shift] << 8 ) + cMessage[port-1][8+shift];
 800cfb8:	7965      	ldrb	r5, [r4, #5]
 800cfba:	062d      	lsls	r5, r5, #24
 800cfbc:	46a8      	mov	r8, r5
 800cfbe:	79a5      	ldrb	r5, [r4, #6]
 800cfc0:	042d      	lsls	r5, r5, #16
 800cfc2:	46a9      	mov	r9, r5
 800cfc4:	44c8      	add	r8, r9
 800cfc6:	7a24      	ldrb	r4, [r4, #8]
 800cfc8:	4444      	add	r4, r8
 800cfca:	1a7f      	subs	r7, r7, r1
 800cfcc:	00ff      	lsls	r7, r7, #3
 800cfce:	19f6      	adds	r6, r6, r7
 800cfd0:	0035      	movs	r5, r6
 800cfd2:	4455      	add	r5, sl
 800cfd4:	79e9      	ldrb	r1, [r5, #7]
 800cfd6:	0209      	lsls	r1, r1, #8
 800cfd8:	1861      	adds	r1, r4, r1
			StreamPoundToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800cfda:	9100      	str	r1, [sp, #0]
 800cfdc:	4661      	mov	r1, ip
 800cfde:	f7ff f883 	bl	800c0e8 <StreamPoundToPort>
	Module_Status result = H26R0_OK;
 800cfe2:	2000      	movs	r0, #0
			break;
 800cfe4:	e743      	b.n	800ce6e <Module_MessagingTask+0x3e>
			global_mode=IDLE_CASE;
 800cfe6:	4b69      	ldr	r3, [pc, #420]	; (800d18c <Module_MessagingTask+0x35c>)
 800cfe8:	2200      	movs	r2, #0
 800cfea:	701a      	strb	r2, [r3, #0]
			PowerDown();
 800cfec:	f7ff fb56 	bl	800c69c <PowerDown>
			xTimerStop( xTimer, portMAX_DELAY );
 800cff0:	4b67      	ldr	r3, [pc, #412]	; (800d190 <Module_MessagingTask+0x360>)
 800cff2:	6818      	ldr	r0, [r3, #0]
 800cff4:	2301      	movs	r3, #1
 800cff6:	425b      	negs	r3, r3
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	2300      	movs	r3, #0
 800cffc:	2200      	movs	r2, #0
 800cffe:	2103      	movs	r1, #3
 800d000:	f003 fd92 	bl	8010b28 <xTimerGenericCommand>
	Module_Status result = H26R0_OK;
 800d004:	2000      	movs	r0, #0
			break;
 800d006:	e732      	b.n	800ce6e <Module_MessagingTask+0x3e>
			if (cMessage[port-1][shift] == 1)
 800d008:	3901      	subs	r1, #1
 800d00a:	00cb      	lsls	r3, r1, #3
 800d00c:	1a59      	subs	r1, r3, r1
 800d00e:	00c9      	lsls	r1, r1, #3
 800d010:	4b5d      	ldr	r3, [pc, #372]	; (800d188 <Module_MessagingTask+0x358>)
 800d012:	1859      	adds	r1, r3, r1
 800d014:	4653      	mov	r3, sl
 800d016:	5cc8      	ldrb	r0, [r1, r3]
 800d018:	2801      	cmp	r0, #1
 800d01a:	d005      	beq.n	800d028 <Module_MessagingTask+0x1f8>
				H26R0_Weight2=SampleGram(cMessage[port-1][shift]);
 800d01c:	f7ff fb7c 	bl	800c718 <SampleGram>
 800d020:	4b5c      	ldr	r3, [pc, #368]	; (800d194 <Module_MessagingTask+0x364>)
 800d022:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d024:	2000      	movs	r0, #0
 800d026:	e722      	b.n	800ce6e <Module_MessagingTask+0x3e>
				H26R0_Weight1=SampleGram(cMessage[port-1][shift]);
 800d028:	f7ff fb76 	bl	800c718 <SampleGram>
 800d02c:	4b5a      	ldr	r3, [pc, #360]	; (800d198 <Module_MessagingTask+0x368>)
 800d02e:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d030:	2000      	movs	r0, #0
 800d032:	e71c      	b.n	800ce6e <Module_MessagingTask+0x3e>
			if (cMessage[port-1][shift] == 1)
 800d034:	3901      	subs	r1, #1
 800d036:	00cb      	lsls	r3, r1, #3
 800d038:	1a59      	subs	r1, r3, r1
 800d03a:	00c9      	lsls	r1, r1, #3
 800d03c:	4b52      	ldr	r3, [pc, #328]	; (800d188 <Module_MessagingTask+0x358>)
 800d03e:	1859      	adds	r1, r3, r1
 800d040:	4653      	mov	r3, sl
 800d042:	5cc8      	ldrb	r0, [r1, r3]
 800d044:	2801      	cmp	r0, #1
 800d046:	d005      	beq.n	800d054 <Module_MessagingTask+0x224>
				H26R0_Weight2=SampleKGram(cMessage[port-1][shift]);	
 800d048:	f7ff fb7c 	bl	800c744 <SampleKGram>
 800d04c:	4b51      	ldr	r3, [pc, #324]	; (800d194 <Module_MessagingTask+0x364>)
 800d04e:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d050:	2000      	movs	r0, #0
 800d052:	e70c      	b.n	800ce6e <Module_MessagingTask+0x3e>
				H26R0_Weight1=SampleKGram(cMessage[port-1][shift]);
 800d054:	f7ff fb76 	bl	800c744 <SampleKGram>
 800d058:	4b4f      	ldr	r3, [pc, #316]	; (800d198 <Module_MessagingTask+0x368>)
 800d05a:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d05c:	2000      	movs	r0, #0
 800d05e:	e706      	b.n	800ce6e <Module_MessagingTask+0x3e>
			if (cMessage[port-1][shift] == 1)
 800d060:	3901      	subs	r1, #1
 800d062:	00cb      	lsls	r3, r1, #3
 800d064:	1a59      	subs	r1, r3, r1
 800d066:	00c9      	lsls	r1, r1, #3
 800d068:	4b47      	ldr	r3, [pc, #284]	; (800d188 <Module_MessagingTask+0x358>)
 800d06a:	1859      	adds	r1, r3, r1
 800d06c:	4653      	mov	r3, sl
 800d06e:	5cc8      	ldrb	r0, [r1, r3]
 800d070:	2801      	cmp	r0, #1
 800d072:	d005      	beq.n	800d080 <Module_MessagingTask+0x250>
				H26R0_Weight2=SampleOunce(cMessage[port-1][shift]);	
 800d074:	f7ff fb76 	bl	800c764 <SampleOunce>
 800d078:	4b46      	ldr	r3, [pc, #280]	; (800d194 <Module_MessagingTask+0x364>)
 800d07a:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d07c:	2000      	movs	r0, #0
 800d07e:	e6f6      	b.n	800ce6e <Module_MessagingTask+0x3e>
				H26R0_Weight1=SampleOunce(cMessage[port-1][shift]);
 800d080:	f7ff fb70 	bl	800c764 <SampleOunce>
 800d084:	4b44      	ldr	r3, [pc, #272]	; (800d198 <Module_MessagingTask+0x368>)
 800d086:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d088:	2000      	movs	r0, #0
 800d08a:	e6f0      	b.n	800ce6e <Module_MessagingTask+0x3e>
			if (cMessage[port-1][shift] == 1)
 800d08c:	3901      	subs	r1, #1
 800d08e:	00cb      	lsls	r3, r1, #3
 800d090:	1a59      	subs	r1, r3, r1
 800d092:	00c9      	lsls	r1, r1, #3
 800d094:	4b3c      	ldr	r3, [pc, #240]	; (800d188 <Module_MessagingTask+0x358>)
 800d096:	1859      	adds	r1, r3, r1
 800d098:	4653      	mov	r3, sl
 800d09a:	5cc8      	ldrb	r0, [r1, r3]
 800d09c:	2801      	cmp	r0, #1
 800d09e:	d005      	beq.n	800d0ac <Module_MessagingTask+0x27c>
				H26R0_Weight2=SamplePound(cMessage[port-1][shift]);
 800d0a0:	f7ff fb7c 	bl	800c79c <SamplePound>
 800d0a4:	4b3b      	ldr	r3, [pc, #236]	; (800d194 <Module_MessagingTask+0x364>)
 800d0a6:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	e6e0      	b.n	800ce6e <Module_MessagingTask+0x3e>
				H26R0_Weight1=SamplePound(cMessage[port-1][shift]);
 800d0ac:	f7ff fb76 	bl	800c79c <SamplePound>
 800d0b0:	4b39      	ldr	r3, [pc, #228]	; (800d198 <Module_MessagingTask+0x368>)
 800d0b2:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	e6da      	b.n	800ce6e <Module_MessagingTask+0x3e>
				ZeroCal(cMessage[port-1][shift]);
 800d0b8:	3901      	subs	r1, #1
 800d0ba:	00cb      	lsls	r3, r1, #3
 800d0bc:	1a59      	subs	r1, r3, r1
 800d0be:	00c9      	lsls	r1, r1, #3
 800d0c0:	4b31      	ldr	r3, [pc, #196]	; (800d188 <Module_MessagingTask+0x358>)
 800d0c2:	1859      	adds	r1, r3, r1
 800d0c4:	4653      	mov	r3, sl
 800d0c6:	5cc8      	ldrb	r0, [r1, r3]
 800d0c8:	f7ff fe26 	bl	800cd18 <ZeroCal>
	Module_Status result = H26R0_OK;
 800d0cc:	2000      	movs	r0, #0
			break;
 800d0ce:	e6ce      	b.n	800ce6e <Module_MessagingTask+0x3e>
			period = ( (uint32_t) cMessage[port-1][1+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + cMessage[port-1][4+shift];
 800d0d0:	1e4c      	subs	r4, r1, #1
 800d0d2:	4b2d      	ldr	r3, [pc, #180]	; (800d188 <Module_MessagingTask+0x358>)
 800d0d4:	4699      	mov	r9, r3
 800d0d6:	00e3      	lsls	r3, r4, #3
 800d0d8:	4698      	mov	r8, r3
 800d0da:	1b18      	subs	r0, r3, r4
 800d0dc:	00c0      	lsls	r0, r0, #3
 800d0de:	4448      	add	r0, r9
 800d0e0:	4653      	mov	r3, sl
 800d0e2:	18c6      	adds	r6, r0, r3
 800d0e4:	7873      	ldrb	r3, [r6, #1]
 800d0e6:	061b      	lsls	r3, r3, #24
 800d0e8:	78b2      	ldrb	r2, [r6, #2]
 800d0ea:	0412      	lsls	r2, r2, #16
 800d0ec:	189b      	adds	r3, r3, r2
 800d0ee:	7932      	ldrb	r2, [r6, #4]
 800d0f0:	189b      	adds	r3, r3, r2
 800d0f2:	78f2      	ldrb	r2, [r6, #3]
 800d0f4:	0212      	lsls	r2, r2, #8
 800d0f6:	189b      	adds	r3, r3, r2
			StreamRawToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800d0f8:	7ab2      	ldrb	r2, [r6, #10]
 800d0fa:	7a71      	ldrb	r1, [r6, #9]
 800d0fc:	4655      	mov	r5, sl
 800d0fe:	5d40      	ldrb	r0, [r0, r5]
			timeout = ( (uint32_t) cMessage[port-1][5+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][7+shift] << 8 ) + cMessage[port-1][8+shift];
 800d100:	7977      	ldrb	r7, [r6, #5]
 800d102:	063f      	lsls	r7, r7, #24
 800d104:	79b5      	ldrb	r5, [r6, #6]
 800d106:	042d      	lsls	r5, r5, #16
 800d108:	46ac      	mov	ip, r5
 800d10a:	4467      	add	r7, ip
 800d10c:	7a35      	ldrb	r5, [r6, #8]
 800d10e:	46ac      	mov	ip, r5
 800d110:	4467      	add	r7, ip
 800d112:	79f6      	ldrb	r6, [r6, #7]
 800d114:	0236      	lsls	r6, r6, #8
 800d116:	19be      	adds	r6, r7, r6
			StreamRawToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800d118:	9600      	str	r6, [sp, #0]
 800d11a:	f7ff f917 	bl	800c34c <StreamRawToPort>
			H26R0_Weight2=Average(cMessage[port-1][shift],1);	
 800d11e:	4643      	mov	r3, r8
 800d120:	1b19      	subs	r1, r3, r4
 800d122:	00c9      	lsls	r1, r1, #3
 800d124:	4449      	add	r1, r9
 800d126:	4653      	mov	r3, sl
 800d128:	5cc8      	ldrb	r0, [r1, r3]
 800d12a:	2101      	movs	r1, #1
 800d12c:	f7ff fb52 	bl	800c7d4 <Average>
 800d130:	4b18      	ldr	r3, [pc, #96]	; (800d194 <Module_MessagingTask+0x364>)
 800d132:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d134:	2000      	movs	r0, #0
			break;
 800d136:	e69a      	b.n	800ce6e <Module_MessagingTask+0x3e>
			H26R0_Weight2=Average(cMessage[port-1][shift],1);	
 800d138:	3901      	subs	r1, #1
 800d13a:	00cb      	lsls	r3, r1, #3
 800d13c:	1a59      	subs	r1, r3, r1
 800d13e:	00c9      	lsls	r1, r1, #3
 800d140:	4b11      	ldr	r3, [pc, #68]	; (800d188 <Module_MessagingTask+0x358>)
 800d142:	1859      	adds	r1, r3, r1
 800d144:	4653      	mov	r3, sl
 800d146:	5cc8      	ldrb	r0, [r1, r3]
 800d148:	2101      	movs	r1, #1
 800d14a:	f7ff fb43 	bl	800c7d4 <Average>
 800d14e:	4b11      	ldr	r3, [pc, #68]	; (800d194 <Module_MessagingTask+0x364>)
 800d150:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d152:	2000      	movs	r0, #0
			break;
 800d154:	e68b      	b.n	800ce6e <Module_MessagingTask+0x3e>
			if (cMessage[port-1][shift] == 0)
 800d156:	3901      	subs	r1, #1
 800d158:	00cb      	lsls	r3, r1, #3
 800d15a:	1a59      	subs	r1, r3, r1
 800d15c:	00c9      	lsls	r1, r1, #3
 800d15e:	4b0a      	ldr	r3, [pc, #40]	; (800d188 <Module_MessagingTask+0x358>)
 800d160:	1859      	adds	r1, r3, r1
 800d162:	4653      	mov	r3, sl
 800d164:	5cc8      	ldrb	r0, [r1, r3]
 800d166:	2800      	cmp	r0, #0
 800d168:	d103      	bne.n	800d172 <Module_MessagingTask+0x342>
				H26R0_DATA_FORMAT = FMT_UINT32;
 800d16a:	4b0c      	ldr	r3, [pc, #48]	; (800d19c <Module_MessagingTask+0x36c>)
 800d16c:	2205      	movs	r2, #5
 800d16e:	701a      	strb	r2, [r3, #0]
 800d170:	e67d      	b.n	800ce6e <Module_MessagingTask+0x3e>
				H26R0_DATA_FORMAT = FMT_FLOAT;
 800d172:	4b0a      	ldr	r3, [pc, #40]	; (800d19c <Module_MessagingTask+0x36c>)
 800d174:	2207      	movs	r2, #7
 800d176:	701a      	strb	r2, [r3, #0]
	Module_Status result = H26R0_OK;
 800d178:	2000      	movs	r0, #0
 800d17a:	e678      	b.n	800ce6e <Module_MessagingTask+0x3e>
 800d17c:	2001      	movs	r0, #1
 800d17e:	e676      	b.n	800ce6e <Module_MessagingTask+0x3e>
 800d180:	fffff894 	.word	0xfffff894
 800d184:	0801d210 	.word	0x0801d210
 800d188:	20000d20 	.word	0x20000d20
 800d18c:	20006e61 	.word	0x20006e61
 800d190:	20001aec 	.word	0x20001aec
 800d194:	200016a8 	.word	0x200016a8
 800d198:	200016a4 	.word	0x200016a4
 800d19c:	20000084 	.word	0x20000084

0800d1a0 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800d1a0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800d1a2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800d1a8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800d1aa:	2280      	movs	r2, #128	; 0x80
 800d1ac:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d1ae:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d1b0:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800d1b2:	3320      	adds	r3, #32
 800d1b4:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800d1b6:	2380      	movs	r3, #128	; 0x80
 800d1b8:	019b      	lsls	r3, r3, #6
 800d1ba:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800d1bc:	f004 f98e 	bl	80114dc <HAL_DMA_Init>
}
 800d1c0:	bd10      	pop	{r4, pc}

0800d1c2 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800d1c2:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800d1c4:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d1c6:	2310      	movs	r3, #16
 800d1c8:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800d1ce:	2280      	movs	r2, #128	; 0x80
 800d1d0:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d1d2:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d1d4:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800d1d6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800d1d8:	2380      	movs	r3, #128	; 0x80
 800d1da:	019b      	lsls	r3, r3, #6
 800d1dc:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800d1de:	f004 f97d 	bl	80114dc <HAL_DMA_Init>
}
 800d1e2:	bd10      	pop	{r4, pc}

0800d1e4 <DMA_Init>:
{
 800d1e4:	b510      	push	{r4, lr}
 800d1e6:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800d1e8:	4b1d      	ldr	r3, [pc, #116]	; (800d260 <DMA_Init+0x7c>)
 800d1ea:	6959      	ldr	r1, [r3, #20]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	4311      	orrs	r1, r2
 800d1f0:	6159      	str	r1, [r3, #20]
 800d1f2:	6959      	ldr	r1, [r3, #20]
 800d1f4:	400a      	ands	r2, r1
 800d1f6:	9200      	str	r2, [sp, #0]
 800d1f8:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800d1fa:	6959      	ldr	r1, [r3, #20]
 800d1fc:	2202      	movs	r2, #2
 800d1fe:	4311      	orrs	r1, r2
 800d200:	6159      	str	r1, [r3, #20]
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	401a      	ands	r2, r3
 800d206:	9201      	str	r2, [sp, #4]
 800d208:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800d20a:	4c16      	ldr	r4, [pc, #88]	; (800d264 <DMA_Init+0x80>)
 800d20c:	4916      	ldr	r1, [pc, #88]	; (800d268 <DMA_Init+0x84>)
 800d20e:	0020      	movs	r0, r4
 800d210:	f7ff ffc6 	bl	800d1a0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800d214:	0020      	movs	r0, r4
 800d216:	3038      	adds	r0, #56	; 0x38
 800d218:	4914      	ldr	r1, [pc, #80]	; (800d26c <DMA_Init+0x88>)
 800d21a:	f7ff ffc1 	bl	800d1a0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800d21e:	0020      	movs	r0, r4
 800d220:	3070      	adds	r0, #112	; 0x70
 800d222:	4913      	ldr	r1, [pc, #76]	; (800d270 <DMA_Init+0x8c>)
 800d224:	f7ff ffbc 	bl	800d1a0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800d228:	0020      	movs	r0, r4
 800d22a:	30a8      	adds	r0, #168	; 0xa8
 800d22c:	4911      	ldr	r1, [pc, #68]	; (800d274 <DMA_Init+0x90>)
 800d22e:	f7ff ffb7 	bl	800d1a0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800d232:	0020      	movs	r0, r4
 800d234:	30e0      	adds	r0, #224	; 0xe0
 800d236:	4910      	ldr	r1, [pc, #64]	; (800d278 <DMA_Init+0x94>)
 800d238:	f7ff ffb2 	bl	800d1a0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800d23c:	4c0f      	ldr	r4, [pc, #60]	; (800d27c <DMA_Init+0x98>)
 800d23e:	4910      	ldr	r1, [pc, #64]	; (800d280 <DMA_Init+0x9c>)
 800d240:	0020      	movs	r0, r4
 800d242:	f7ff ffbe 	bl	800d1c2 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800d246:	0020      	movs	r0, r4
 800d248:	3038      	adds	r0, #56	; 0x38
 800d24a:	490e      	ldr	r1, [pc, #56]	; (800d284 <DMA_Init+0xa0>)
 800d24c:	f7ff ffb9 	bl	800d1c2 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800d250:	0020      	movs	r0, r4
 800d252:	3070      	adds	r0, #112	; 0x70
 800d254:	490c      	ldr	r1, [pc, #48]	; (800d288 <DMA_Init+0xa4>)
 800d256:	f7ff ffb4 	bl	800d1c2 <DMA_MSG_TX_CH_Init>
}
 800d25a:	b002      	add	sp, #8
 800d25c:	bd10      	pop	{r4, pc}
 800d25e:	46c0      	nop			; (mov r8, r8)
 800d260:	40021000 	.word	0x40021000
 800d264:	20001af0 	.word	0x20001af0
 800d268:	40020008 	.word	0x40020008
 800d26c:	40020030 	.word	0x40020030
 800d270:	40020058 	.word	0x40020058
 800d274:	4002006c 	.word	0x4002006c
 800d278:	4002041c 	.word	0x4002041c
 800d27c:	20001c40 	.word	0x20001c40
 800d280:	4002001c 	.word	0x4002001c
 800d284:	40020044 	.word	0x40020044
 800d288:	40020080 	.word	0x40020080

0800d28c <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800d28c:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800d28e:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d290:	2300      	movs	r3, #0
 800d292:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800d294:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800d296:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d298:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d29a:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800d29c:	3320      	adds	r3, #32
 800d29e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800d2a0:	2380      	movs	r3, #128	; 0x80
 800d2a2:	015b      	lsls	r3, r3, #5
 800d2a4:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800d2a6:	f004 f919 	bl	80114dc <HAL_DMA_Init>
}
 800d2aa:	bd10      	pop	{r4, pc}

0800d2ac <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800d2ac:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800d2ae:	6803      	ldr	r3, [r0, #0]
 800d2b0:	4821      	ldr	r0, [pc, #132]	; (800d338 <SetupDMAInterrupts+0x8c>)
 800d2b2:	4283      	cmp	r3, r0
 800d2b4:	d037      	beq.n	800d326 <SetupDMAInterrupts+0x7a>
 800d2b6:	d90e      	bls.n	800d2d6 <SetupDMAInterrupts+0x2a>
 800d2b8:	4820      	ldr	r0, [pc, #128]	; (800d33c <SetupDMAInterrupts+0x90>)
 800d2ba:	4283      	cmp	r3, r0
 800d2bc:	d033      	beq.n	800d326 <SetupDMAInterrupts+0x7a>
 800d2be:	d919      	bls.n	800d2f4 <SetupDMAInterrupts+0x48>
 800d2c0:	481f      	ldr	r0, [pc, #124]	; (800d340 <SetupDMAInterrupts+0x94>)
 800d2c2:	4283      	cmp	r3, r0
 800d2c4:	d024      	beq.n	800d310 <SetupDMAInterrupts+0x64>
 800d2c6:	d92b      	bls.n	800d320 <SetupDMAInterrupts+0x74>
 800d2c8:	4a1e      	ldr	r2, [pc, #120]	; (800d344 <SetupDMAInterrupts+0x98>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d020      	beq.n	800d310 <SetupDMAInterrupts+0x64>
 800d2ce:	4a1e      	ldr	r2, [pc, #120]	; (800d348 <SetupDMAInterrupts+0x9c>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d01d      	beq.n	800d310 <SetupDMAInterrupts+0x64>
 800d2d4:	e00d      	b.n	800d2f2 <SetupDMAInterrupts+0x46>
 800d2d6:	4a1d      	ldr	r2, [pc, #116]	; (800d34c <SetupDMAInterrupts+0xa0>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d107      	bne.n	800d2ec <SetupDMAInterrupts+0x40>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800d2dc:	2200      	movs	r2, #0
 800d2de:	2009      	movs	r0, #9
 800d2e0:	f003 ff56 	bl	8011190 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800d2e4:	2009      	movs	r0, #9
 800d2e6:	f003 ff85 	bl	80111f4 <HAL_NVIC_EnableIRQ>
			break;
 800d2ea:	e002      	b.n	800d2f2 <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800d2ec:	4a18      	ldr	r2, [pc, #96]	; (800d350 <SetupDMAInterrupts+0xa4>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d019      	beq.n	800d326 <SetupDMAInterrupts+0x7a>
			break;
		
		default:
			break;
	}			
}
 800d2f2:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800d2f4:	4817      	ldr	r0, [pc, #92]	; (800d354 <SetupDMAInterrupts+0xa8>)
 800d2f6:	4283      	cmp	r3, r0
 800d2f8:	d00a      	beq.n	800d310 <SetupDMAInterrupts+0x64>
 800d2fa:	d903      	bls.n	800d304 <SetupDMAInterrupts+0x58>
 800d2fc:	4a16      	ldr	r2, [pc, #88]	; (800d358 <SetupDMAInterrupts+0xac>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d006      	beq.n	800d310 <SetupDMAInterrupts+0x64>
 800d302:	e7f6      	b.n	800d2f2 <SetupDMAInterrupts+0x46>
 800d304:	4a15      	ldr	r2, [pc, #84]	; (800d35c <SetupDMAInterrupts+0xb0>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d002      	beq.n	800d310 <SetupDMAInterrupts+0x64>
 800d30a:	4a15      	ldr	r2, [pc, #84]	; (800d360 <SetupDMAInterrupts+0xb4>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d1f0      	bne.n	800d2f2 <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800d310:	2200      	movs	r2, #0
 800d312:	200b      	movs	r0, #11
 800d314:	f003 ff3c 	bl	8011190 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800d318:	200b      	movs	r0, #11
 800d31a:	f003 ff6b 	bl	80111f4 <HAL_NVIC_EnableIRQ>
}
 800d31e:	e7e8      	b.n	800d2f2 <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800d320:	4a10      	ldr	r2, [pc, #64]	; (800d364 <SetupDMAInterrupts+0xb8>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d1e5      	bne.n	800d2f2 <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800d326:	2200      	movs	r2, #0
 800d328:	200a      	movs	r0, #10
 800d32a:	f003 ff31 	bl	8011190 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800d32e:	200a      	movs	r0, #10
 800d330:	f003 ff60 	bl	80111f4 <HAL_NVIC_EnableIRQ>
			break;
 800d334:	e7dd      	b.n	800d2f2 <SetupDMAInterrupts+0x46>
 800d336:	46c0      	nop			; (mov r8, r8)
 800d338:	40020030 	.word	0x40020030
 800d33c:	40020408 	.word	0x40020408
 800d340:	40020430 	.word	0x40020430
 800d344:	40020444 	.word	0x40020444
 800d348:	40020458 	.word	0x40020458
 800d34c:	40020008 	.word	0x40020008
 800d350:	4002001c 	.word	0x4002001c
 800d354:	4002006c 	.word	0x4002006c
 800d358:	40020080 	.word	0x40020080
 800d35c:	40020044 	.word	0x40020044
 800d360:	40020058 	.word	0x40020058
 800d364:	4002041c 	.word	0x4002041c

0800d368 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800d368:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800d36a:	6803      	ldr	r3, [r0, #0]
 800d36c:	491b      	ldr	r1, [pc, #108]	; (800d3dc <UnSetupDMAInterrupts+0x74>)
 800d36e:	428b      	cmp	r3, r1
 800d370:	d02f      	beq.n	800d3d2 <UnSetupDMAInterrupts+0x6a>
 800d372:	d90e      	bls.n	800d392 <UnSetupDMAInterrupts+0x2a>
 800d374:	491a      	ldr	r1, [pc, #104]	; (800d3e0 <UnSetupDMAInterrupts+0x78>)
 800d376:	428b      	cmp	r3, r1
 800d378:	d02b      	beq.n	800d3d2 <UnSetupDMAInterrupts+0x6a>
 800d37a:	d915      	bls.n	800d3a8 <UnSetupDMAInterrupts+0x40>
 800d37c:	4919      	ldr	r1, [pc, #100]	; (800d3e4 <UnSetupDMAInterrupts+0x7c>)
 800d37e:	428b      	cmp	r3, r1
 800d380:	d020      	beq.n	800d3c4 <UnSetupDMAInterrupts+0x5c>
 800d382:	d923      	bls.n	800d3cc <UnSetupDMAInterrupts+0x64>
 800d384:	4a18      	ldr	r2, [pc, #96]	; (800d3e8 <UnSetupDMAInterrupts+0x80>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d01c      	beq.n	800d3c4 <UnSetupDMAInterrupts+0x5c>
 800d38a:	4a18      	ldr	r2, [pc, #96]	; (800d3ec <UnSetupDMAInterrupts+0x84>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d019      	beq.n	800d3c4 <UnSetupDMAInterrupts+0x5c>
 800d390:	e009      	b.n	800d3a6 <UnSetupDMAInterrupts+0x3e>
 800d392:	4a17      	ldr	r2, [pc, #92]	; (800d3f0 <UnSetupDMAInterrupts+0x88>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d103      	bne.n	800d3a0 <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800d398:	2009      	movs	r0, #9
 800d39a:	f003 ff35 	bl	8011208 <HAL_NVIC_DisableIRQ>
			break;
 800d39e:	e002      	b.n	800d3a6 <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800d3a0:	4a14      	ldr	r2, [pc, #80]	; (800d3f4 <UnSetupDMAInterrupts+0x8c>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d015      	beq.n	800d3d2 <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800d3a6:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800d3a8:	4913      	ldr	r1, [pc, #76]	; (800d3f8 <UnSetupDMAInterrupts+0x90>)
 800d3aa:	428b      	cmp	r3, r1
 800d3ac:	d00a      	beq.n	800d3c4 <UnSetupDMAInterrupts+0x5c>
 800d3ae:	d903      	bls.n	800d3b8 <UnSetupDMAInterrupts+0x50>
 800d3b0:	4a12      	ldr	r2, [pc, #72]	; (800d3fc <UnSetupDMAInterrupts+0x94>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d006      	beq.n	800d3c4 <UnSetupDMAInterrupts+0x5c>
 800d3b6:	e7f6      	b.n	800d3a6 <UnSetupDMAInterrupts+0x3e>
 800d3b8:	4a11      	ldr	r2, [pc, #68]	; (800d400 <UnSetupDMAInterrupts+0x98>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d002      	beq.n	800d3c4 <UnSetupDMAInterrupts+0x5c>
 800d3be:	4a11      	ldr	r2, [pc, #68]	; (800d404 <UnSetupDMAInterrupts+0x9c>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d1f0      	bne.n	800d3a6 <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800d3c4:	200b      	movs	r0, #11
 800d3c6:	f003 ff1f 	bl	8011208 <HAL_NVIC_DisableIRQ>
}
 800d3ca:	e7ec      	b.n	800d3a6 <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800d3cc:	4a0e      	ldr	r2, [pc, #56]	; (800d408 <UnSetupDMAInterrupts+0xa0>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d1e9      	bne.n	800d3a6 <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800d3d2:	200a      	movs	r0, #10
 800d3d4:	f003 ff18 	bl	8011208 <HAL_NVIC_DisableIRQ>
			break;
 800d3d8:	e7e5      	b.n	800d3a6 <UnSetupDMAInterrupts+0x3e>
 800d3da:	46c0      	nop			; (mov r8, r8)
 800d3dc:	40020030 	.word	0x40020030
 800d3e0:	40020408 	.word	0x40020408
 800d3e4:	40020430 	.word	0x40020430
 800d3e8:	40020444 	.word	0x40020444
 800d3ec:	40020458 	.word	0x40020458
 800d3f0:	40020008 	.word	0x40020008
 800d3f4:	4002001c 	.word	0x4002001c
 800d3f8:	4002006c 	.word	0x4002006c
 800d3fc:	40020080 	.word	0x40020080
 800d400:	40020044 	.word	0x40020044
 800d404:	40020058 	.word	0x40020058
 800d408:	4002041c 	.word	0x4002041c

0800d40c <DMA_MSG_TX_UnSetup>:
{	
 800d40c:	b510      	push	{r4, lr}
 800d40e:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800d410:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800d412:	f7ff ffa9 	bl	800d368 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800d416:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800d418:	2300      	movs	r3, #0
 800d41a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800d41c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800d41e:	bd10      	pop	{r4, pc}

0800d420 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800d420:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800d422:	6803      	ldr	r3, [r0, #0]
 800d424:	4ac3      	ldr	r2, [pc, #780]	; (800d734 <RemapAndLinkDMAtoUARTRx+0x314>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d03e      	beq.n	800d4a8 <RemapAndLinkDMAtoUARTRx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800d42a:	4ac3      	ldr	r2, [pc, #780]	; (800d738 <RemapAndLinkDMAtoUARTRx+0x318>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d100      	bne.n	800d432 <RemapAndLinkDMAtoUARTRx+0x12>
 800d430:	e096      	b.n	800d560 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800d432:	4ac2      	ldr	r2, [pc, #776]	; (800d73c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d100      	bne.n	800d43a <RemapAndLinkDMAtoUARTRx+0x1a>
 800d438:	e0eb      	b.n	800d612 <RemapAndLinkDMAtoUARTRx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800d43a:	4ac1      	ldr	r2, [pc, #772]	; (800d740 <RemapAndLinkDMAtoUARTRx+0x320>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d100      	bne.n	800d442 <RemapAndLinkDMAtoUARTRx+0x22>
 800d440:	e141      	b.n	800d6c6 <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800d442:	4ac0      	ldr	r2, [pc, #768]	; (800d744 <RemapAndLinkDMAtoUARTRx+0x324>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d100      	bne.n	800d44a <RemapAndLinkDMAtoUARTRx+0x2a>
 800d448:	e1bd      	b.n	800d7c6 <RemapAndLinkDMAtoUARTRx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800d44a:	4abf      	ldr	r2, [pc, #764]	; (800d748 <RemapAndLinkDMAtoUARTRx+0x328>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d100      	bne.n	800d452 <RemapAndLinkDMAtoUARTRx+0x32>
 800d450:	e213      	b.n	800d87a <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800d452:	4abe      	ldr	r2, [pc, #760]	; (800d74c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d100      	bne.n	800d45a <RemapAndLinkDMAtoUARTRx+0x3a>
 800d458:	e269      	b.n	800d92e <RemapAndLinkDMAtoUARTRx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800d45a:	4abd      	ldr	r2, [pc, #756]	; (800d750 <RemapAndLinkDMAtoUARTRx+0x330>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d136      	bne.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
 800d460:	680b      	ldr	r3, [r1, #0]
 800d462:	4abc      	ldr	r2, [pc, #752]	; (800d754 <RemapAndLinkDMAtoUARTRx+0x334>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d100      	bne.n	800d46a <RemapAndLinkDMAtoUARTRx+0x4a>
 800d468:	e2bb      	b.n	800d9e2 <RemapAndLinkDMAtoUARTRx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800d46a:	4abb      	ldr	r2, [pc, #748]	; (800d758 <RemapAndLinkDMAtoUARTRx+0x338>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d100      	bne.n	800d472 <RemapAndLinkDMAtoUARTRx+0x52>
 800d470:	e2c1      	b.n	800d9f6 <RemapAndLinkDMAtoUARTRx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800d472:	4aba      	ldr	r2, [pc, #744]	; (800d75c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d100      	bne.n	800d47a <RemapAndLinkDMAtoUARTRx+0x5a>
 800d478:	e2c9      	b.n	800da0e <RemapAndLinkDMAtoUARTRx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800d47a:	4ab9      	ldr	r2, [pc, #740]	; (800d760 <RemapAndLinkDMAtoUARTRx+0x340>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d100      	bne.n	800d482 <RemapAndLinkDMAtoUARTRx+0x62>
 800d480:	e2d1      	b.n	800da26 <RemapAndLinkDMAtoUARTRx+0x606>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800d482:	4ab8      	ldr	r2, [pc, #736]	; (800d764 <RemapAndLinkDMAtoUARTRx+0x344>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d100      	bne.n	800d48a <RemapAndLinkDMAtoUARTRx+0x6a>
 800d488:	e2d9      	b.n	800da3e <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800d48a:	4ab7      	ldr	r2, [pc, #732]	; (800d768 <RemapAndLinkDMAtoUARTRx+0x348>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d11e      	bne.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800d490:	4ab6      	ldr	r2, [pc, #728]	; (800d76c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800d492:	23a8      	movs	r3, #168	; 0xa8
 800d494:	58d4      	ldr	r4, [r2, r3]
 800d496:	4db6      	ldr	r5, [pc, #728]	; (800d770 <RemapAndLinkDMAtoUARTRx+0x350>)
 800d498:	402c      	ands	r4, r5
 800d49a:	50d4      	str	r4, [r2, r3]
 800d49c:	58d5      	ldr	r5, [r2, r3]
 800d49e:	24f0      	movs	r4, #240	; 0xf0
 800d4a0:	0124      	lsls	r4, r4, #4
 800d4a2:	432c      	orrs	r4, r5
 800d4a4:	50d4      	str	r4, [r2, r3]
 800d4a6:	e012      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800d4a8:	680b      	ldr	r3, [r1, #0]
 800d4aa:	4aaa      	ldr	r2, [pc, #680]	; (800d754 <RemapAndLinkDMAtoUARTRx+0x334>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d011      	beq.n	800d4d4 <RemapAndLinkDMAtoUARTRx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800d4b0:	4aa9      	ldr	r2, [pc, #676]	; (800d758 <RemapAndLinkDMAtoUARTRx+0x338>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d019      	beq.n	800d4ea <RemapAndLinkDMAtoUARTRx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800d4b6:	4aa9      	ldr	r2, [pc, #676]	; (800d75c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d022      	beq.n	800d502 <RemapAndLinkDMAtoUARTRx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800d4bc:	4aa8      	ldr	r2, [pc, #672]	; (800d760 <RemapAndLinkDMAtoUARTRx+0x340>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d02b      	beq.n	800d51a <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800d4c2:	4aa8      	ldr	r2, [pc, #672]	; (800d764 <RemapAndLinkDMAtoUARTRx+0x344>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d034      	beq.n	800d532 <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800d4c8:	4aa7      	ldr	r2, [pc, #668]	; (800d768 <RemapAndLinkDMAtoUARTRx+0x348>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d03c      	beq.n	800d548 <RemapAndLinkDMAtoUARTRx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800d4ce:	6641      	str	r1, [r0, #100]	; 0x64
 800d4d0:	6248      	str	r0, [r1, #36]	; 0x24
}
 800d4d2:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800d4d4:	4aa7      	ldr	r2, [pc, #668]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d4d6:	23a8      	movs	r3, #168	; 0xa8
 800d4d8:	58d4      	ldr	r4, [r2, r3]
 800d4da:	250f      	movs	r5, #15
 800d4dc:	43ac      	bics	r4, r5
 800d4de:	50d4      	str	r4, [r2, r3]
 800d4e0:	58d4      	ldr	r4, [r2, r3]
 800d4e2:	3d07      	subs	r5, #7
 800d4e4:	432c      	orrs	r4, r5
 800d4e6:	50d4      	str	r4, [r2, r3]
 800d4e8:	e7f1      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800d4ea:	4aa2      	ldr	r2, [pc, #648]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d4ec:	23a8      	movs	r3, #168	; 0xa8
 800d4ee:	58d4      	ldr	r4, [r2, r3]
 800d4f0:	4d9f      	ldr	r5, [pc, #636]	; (800d770 <RemapAndLinkDMAtoUARTRx+0x350>)
 800d4f2:	402c      	ands	r4, r5
 800d4f4:	50d4      	str	r4, [r2, r3]
 800d4f6:	58d5      	ldr	r5, [r2, r3]
 800d4f8:	2480      	movs	r4, #128	; 0x80
 800d4fa:	0124      	lsls	r4, r4, #4
 800d4fc:	432c      	orrs	r4, r5
 800d4fe:	50d4      	str	r4, [r2, r3]
 800d500:	e7e5      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800d502:	4a9c      	ldr	r2, [pc, #624]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d504:	23a8      	movs	r3, #168	; 0xa8
 800d506:	58d4      	ldr	r4, [r2, r3]
 800d508:	4d9b      	ldr	r5, [pc, #620]	; (800d778 <RemapAndLinkDMAtoUARTRx+0x358>)
 800d50a:	402c      	ands	r4, r5
 800d50c:	50d4      	str	r4, [r2, r3]
 800d50e:	58d5      	ldr	r5, [r2, r3]
 800d510:	2480      	movs	r4, #128	; 0x80
 800d512:	0324      	lsls	r4, r4, #12
 800d514:	432c      	orrs	r4, r5
 800d516:	50d4      	str	r4, [r2, r3]
 800d518:	e7d9      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800d51a:	4a96      	ldr	r2, [pc, #600]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d51c:	23a8      	movs	r3, #168	; 0xa8
 800d51e:	58d4      	ldr	r4, [r2, r3]
 800d520:	4d96      	ldr	r5, [pc, #600]	; (800d77c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800d522:	402c      	ands	r4, r5
 800d524:	50d4      	str	r4, [r2, r3]
 800d526:	58d5      	ldr	r5, [r2, r3]
 800d528:	2480      	movs	r4, #128	; 0x80
 800d52a:	0424      	lsls	r4, r4, #16
 800d52c:	432c      	orrs	r4, r5
 800d52e:	50d4      	str	r4, [r2, r3]
 800d530:	e7cd      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800d532:	4a8e      	ldr	r2, [pc, #568]	; (800d76c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800d534:	23a8      	movs	r3, #168	; 0xa8
 800d536:	58d4      	ldr	r4, [r2, r3]
 800d538:	25f0      	movs	r5, #240	; 0xf0
 800d53a:	43ac      	bics	r4, r5
 800d53c:	50d4      	str	r4, [r2, r3]
 800d53e:	58d4      	ldr	r4, [r2, r3]
 800d540:	3d70      	subs	r5, #112	; 0x70
 800d542:	432c      	orrs	r4, r5
 800d544:	50d4      	str	r4, [r2, r3]
 800d546:	e7c2      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800d548:	4a88      	ldr	r2, [pc, #544]	; (800d76c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800d54a:	23a8      	movs	r3, #168	; 0xa8
 800d54c:	58d4      	ldr	r4, [r2, r3]
 800d54e:	4d88      	ldr	r5, [pc, #544]	; (800d770 <RemapAndLinkDMAtoUARTRx+0x350>)
 800d550:	402c      	ands	r4, r5
 800d552:	50d4      	str	r4, [r2, r3]
 800d554:	58d5      	ldr	r5, [r2, r3]
 800d556:	2480      	movs	r4, #128	; 0x80
 800d558:	0124      	lsls	r4, r4, #4
 800d55a:	432c      	orrs	r4, r5
 800d55c:	50d4      	str	r4, [r2, r3]
 800d55e:	e7b6      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800d560:	680b      	ldr	r3, [r1, #0]
 800d562:	4a7c      	ldr	r2, [pc, #496]	; (800d754 <RemapAndLinkDMAtoUARTRx+0x334>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d01a      	beq.n	800d59e <RemapAndLinkDMAtoUARTRx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800d568:	4a7b      	ldr	r2, [pc, #492]	; (800d758 <RemapAndLinkDMAtoUARTRx+0x338>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d022      	beq.n	800d5b4 <RemapAndLinkDMAtoUARTRx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800d56e:	4a7b      	ldr	r2, [pc, #492]	; (800d75c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d02b      	beq.n	800d5cc <RemapAndLinkDMAtoUARTRx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800d574:	4a7a      	ldr	r2, [pc, #488]	; (800d760 <RemapAndLinkDMAtoUARTRx+0x340>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d034      	beq.n	800d5e4 <RemapAndLinkDMAtoUARTRx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800d57a:	4a7a      	ldr	r2, [pc, #488]	; (800d764 <RemapAndLinkDMAtoUARTRx+0x344>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d03d      	beq.n	800d5fc <RemapAndLinkDMAtoUARTRx+0x1dc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800d580:	4a79      	ldr	r2, [pc, #484]	; (800d768 <RemapAndLinkDMAtoUARTRx+0x348>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d1a3      	bne.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800d586:	4a79      	ldr	r2, [pc, #484]	; (800d76c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800d588:	23a8      	movs	r3, #168	; 0xa8
 800d58a:	58d4      	ldr	r4, [r2, r3]
 800d58c:	4d78      	ldr	r5, [pc, #480]	; (800d770 <RemapAndLinkDMAtoUARTRx+0x350>)
 800d58e:	402c      	ands	r4, r5
 800d590:	50d4      	str	r4, [r2, r3]
 800d592:	58d5      	ldr	r5, [r2, r3]
 800d594:	2490      	movs	r4, #144	; 0x90
 800d596:	0124      	lsls	r4, r4, #4
 800d598:	432c      	orrs	r4, r5
 800d59a:	50d4      	str	r4, [r2, r3]
 800d59c:	e797      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800d59e:	4a75      	ldr	r2, [pc, #468]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d5a0:	23a8      	movs	r3, #168	; 0xa8
 800d5a2:	58d4      	ldr	r4, [r2, r3]
 800d5a4:	250f      	movs	r5, #15
 800d5a6:	43ac      	bics	r4, r5
 800d5a8:	50d4      	str	r4, [r2, r3]
 800d5aa:	58d4      	ldr	r4, [r2, r3]
 800d5ac:	3d06      	subs	r5, #6
 800d5ae:	432c      	orrs	r4, r5
 800d5b0:	50d4      	str	r4, [r2, r3]
 800d5b2:	e78c      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800d5b4:	4a6f      	ldr	r2, [pc, #444]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d5b6:	23a8      	movs	r3, #168	; 0xa8
 800d5b8:	58d4      	ldr	r4, [r2, r3]
 800d5ba:	4d6d      	ldr	r5, [pc, #436]	; (800d770 <RemapAndLinkDMAtoUARTRx+0x350>)
 800d5bc:	402c      	ands	r4, r5
 800d5be:	50d4      	str	r4, [r2, r3]
 800d5c0:	58d5      	ldr	r5, [r2, r3]
 800d5c2:	2490      	movs	r4, #144	; 0x90
 800d5c4:	0124      	lsls	r4, r4, #4
 800d5c6:	432c      	orrs	r4, r5
 800d5c8:	50d4      	str	r4, [r2, r3]
 800d5ca:	e780      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800d5cc:	4a69      	ldr	r2, [pc, #420]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d5ce:	23a8      	movs	r3, #168	; 0xa8
 800d5d0:	58d4      	ldr	r4, [r2, r3]
 800d5d2:	4d69      	ldr	r5, [pc, #420]	; (800d778 <RemapAndLinkDMAtoUARTRx+0x358>)
 800d5d4:	402c      	ands	r4, r5
 800d5d6:	50d4      	str	r4, [r2, r3]
 800d5d8:	58d5      	ldr	r5, [r2, r3]
 800d5da:	2490      	movs	r4, #144	; 0x90
 800d5dc:	0324      	lsls	r4, r4, #12
 800d5de:	432c      	orrs	r4, r5
 800d5e0:	50d4      	str	r4, [r2, r3]
 800d5e2:	e774      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800d5e4:	4a63      	ldr	r2, [pc, #396]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d5e6:	23a8      	movs	r3, #168	; 0xa8
 800d5e8:	58d4      	ldr	r4, [r2, r3]
 800d5ea:	4d64      	ldr	r5, [pc, #400]	; (800d77c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800d5ec:	402c      	ands	r4, r5
 800d5ee:	50d4      	str	r4, [r2, r3]
 800d5f0:	58d5      	ldr	r5, [r2, r3]
 800d5f2:	2490      	movs	r4, #144	; 0x90
 800d5f4:	0424      	lsls	r4, r4, #16
 800d5f6:	432c      	orrs	r4, r5
 800d5f8:	50d4      	str	r4, [r2, r3]
 800d5fa:	e768      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800d5fc:	4a5b      	ldr	r2, [pc, #364]	; (800d76c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800d5fe:	23a8      	movs	r3, #168	; 0xa8
 800d600:	58d4      	ldr	r4, [r2, r3]
 800d602:	25f0      	movs	r5, #240	; 0xf0
 800d604:	43ac      	bics	r4, r5
 800d606:	50d4      	str	r4, [r2, r3]
 800d608:	58d4      	ldr	r4, [r2, r3]
 800d60a:	3d60      	subs	r5, #96	; 0x60
 800d60c:	432c      	orrs	r4, r5
 800d60e:	50d4      	str	r4, [r2, r3]
 800d610:	e75d      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800d612:	680b      	ldr	r3, [r1, #0]
 800d614:	4a4f      	ldr	r2, [pc, #316]	; (800d754 <RemapAndLinkDMAtoUARTRx+0x334>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d01b      	beq.n	800d652 <RemapAndLinkDMAtoUARTRx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800d61a:	4a4f      	ldr	r2, [pc, #316]	; (800d758 <RemapAndLinkDMAtoUARTRx+0x338>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d023      	beq.n	800d668 <RemapAndLinkDMAtoUARTRx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800d620:	4a4e      	ldr	r2, [pc, #312]	; (800d75c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d02c      	beq.n	800d680 <RemapAndLinkDMAtoUARTRx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800d626:	4a4e      	ldr	r2, [pc, #312]	; (800d760 <RemapAndLinkDMAtoUARTRx+0x340>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d035      	beq.n	800d698 <RemapAndLinkDMAtoUARTRx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800d62c:	4a4d      	ldr	r2, [pc, #308]	; (800d764 <RemapAndLinkDMAtoUARTRx+0x344>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d03e      	beq.n	800d6b0 <RemapAndLinkDMAtoUARTRx+0x290>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800d632:	4a4d      	ldr	r2, [pc, #308]	; (800d768 <RemapAndLinkDMAtoUARTRx+0x348>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d000      	beq.n	800d63a <RemapAndLinkDMAtoUARTRx+0x21a>
 800d638:	e749      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800d63a:	4a4c      	ldr	r2, [pc, #304]	; (800d76c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800d63c:	23a8      	movs	r3, #168	; 0xa8
 800d63e:	58d4      	ldr	r4, [r2, r3]
 800d640:	4d4b      	ldr	r5, [pc, #300]	; (800d770 <RemapAndLinkDMAtoUARTRx+0x350>)
 800d642:	402c      	ands	r4, r5
 800d644:	50d4      	str	r4, [r2, r3]
 800d646:	58d5      	ldr	r5, [r2, r3]
 800d648:	24a0      	movs	r4, #160	; 0xa0
 800d64a:	0124      	lsls	r4, r4, #4
 800d64c:	432c      	orrs	r4, r5
 800d64e:	50d4      	str	r4, [r2, r3]
 800d650:	e73d      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800d652:	4a48      	ldr	r2, [pc, #288]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d654:	23a8      	movs	r3, #168	; 0xa8
 800d656:	58d4      	ldr	r4, [r2, r3]
 800d658:	250f      	movs	r5, #15
 800d65a:	43ac      	bics	r4, r5
 800d65c:	50d4      	str	r4, [r2, r3]
 800d65e:	58d4      	ldr	r4, [r2, r3]
 800d660:	3d05      	subs	r5, #5
 800d662:	432c      	orrs	r4, r5
 800d664:	50d4      	str	r4, [r2, r3]
 800d666:	e732      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800d668:	4a42      	ldr	r2, [pc, #264]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d66a:	23a8      	movs	r3, #168	; 0xa8
 800d66c:	58d4      	ldr	r4, [r2, r3]
 800d66e:	4d40      	ldr	r5, [pc, #256]	; (800d770 <RemapAndLinkDMAtoUARTRx+0x350>)
 800d670:	402c      	ands	r4, r5
 800d672:	50d4      	str	r4, [r2, r3]
 800d674:	58d5      	ldr	r5, [r2, r3]
 800d676:	24a0      	movs	r4, #160	; 0xa0
 800d678:	0124      	lsls	r4, r4, #4
 800d67a:	432c      	orrs	r4, r5
 800d67c:	50d4      	str	r4, [r2, r3]
 800d67e:	e726      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800d680:	4a3c      	ldr	r2, [pc, #240]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d682:	23a8      	movs	r3, #168	; 0xa8
 800d684:	58d4      	ldr	r4, [r2, r3]
 800d686:	4d3c      	ldr	r5, [pc, #240]	; (800d778 <RemapAndLinkDMAtoUARTRx+0x358>)
 800d688:	402c      	ands	r4, r5
 800d68a:	50d4      	str	r4, [r2, r3]
 800d68c:	58d5      	ldr	r5, [r2, r3]
 800d68e:	24a0      	movs	r4, #160	; 0xa0
 800d690:	0324      	lsls	r4, r4, #12
 800d692:	432c      	orrs	r4, r5
 800d694:	50d4      	str	r4, [r2, r3]
 800d696:	e71a      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800d698:	4a36      	ldr	r2, [pc, #216]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d69a:	23a8      	movs	r3, #168	; 0xa8
 800d69c:	58d4      	ldr	r4, [r2, r3]
 800d69e:	4d37      	ldr	r5, [pc, #220]	; (800d77c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800d6a0:	402c      	ands	r4, r5
 800d6a2:	50d4      	str	r4, [r2, r3]
 800d6a4:	58d5      	ldr	r5, [r2, r3]
 800d6a6:	24a0      	movs	r4, #160	; 0xa0
 800d6a8:	0424      	lsls	r4, r4, #16
 800d6aa:	432c      	orrs	r4, r5
 800d6ac:	50d4      	str	r4, [r2, r3]
 800d6ae:	e70e      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800d6b0:	4a2e      	ldr	r2, [pc, #184]	; (800d76c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800d6b2:	23a8      	movs	r3, #168	; 0xa8
 800d6b4:	58d4      	ldr	r4, [r2, r3]
 800d6b6:	25f0      	movs	r5, #240	; 0xf0
 800d6b8:	43ac      	bics	r4, r5
 800d6ba:	50d4      	str	r4, [r2, r3]
 800d6bc:	58d4      	ldr	r4, [r2, r3]
 800d6be:	3d50      	subs	r5, #80	; 0x50
 800d6c0:	432c      	orrs	r4, r5
 800d6c2:	50d4      	str	r4, [r2, r3]
 800d6c4:	e703      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800d6c6:	680b      	ldr	r3, [r1, #0]
 800d6c8:	4a22      	ldr	r2, [pc, #136]	; (800d754 <RemapAndLinkDMAtoUARTRx+0x334>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d01b      	beq.n	800d706 <RemapAndLinkDMAtoUARTRx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800d6ce:	4a22      	ldr	r2, [pc, #136]	; (800d758 <RemapAndLinkDMAtoUARTRx+0x338>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d023      	beq.n	800d71c <RemapAndLinkDMAtoUARTRx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800d6d4:	4a21      	ldr	r2, [pc, #132]	; (800d75c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d052      	beq.n	800d780 <RemapAndLinkDMAtoUARTRx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800d6da:	4a21      	ldr	r2, [pc, #132]	; (800d760 <RemapAndLinkDMAtoUARTRx+0x340>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d05b      	beq.n	800d798 <RemapAndLinkDMAtoUARTRx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800d6e0:	4a20      	ldr	r2, [pc, #128]	; (800d764 <RemapAndLinkDMAtoUARTRx+0x344>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d064      	beq.n	800d7b0 <RemapAndLinkDMAtoUARTRx+0x390>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800d6e6:	4a20      	ldr	r2, [pc, #128]	; (800d768 <RemapAndLinkDMAtoUARTRx+0x348>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d000      	beq.n	800d6ee <RemapAndLinkDMAtoUARTRx+0x2ce>
 800d6ec:	e6ef      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800d6ee:	4a1f      	ldr	r2, [pc, #124]	; (800d76c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800d6f0:	23a8      	movs	r3, #168	; 0xa8
 800d6f2:	58d4      	ldr	r4, [r2, r3]
 800d6f4:	4d1e      	ldr	r5, [pc, #120]	; (800d770 <RemapAndLinkDMAtoUARTRx+0x350>)
 800d6f6:	402c      	ands	r4, r5
 800d6f8:	50d4      	str	r4, [r2, r3]
 800d6fa:	58d5      	ldr	r5, [r2, r3]
 800d6fc:	24b0      	movs	r4, #176	; 0xb0
 800d6fe:	0124      	lsls	r4, r4, #4
 800d700:	432c      	orrs	r4, r5
 800d702:	50d4      	str	r4, [r2, r3]
 800d704:	e6e3      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800d706:	4a1b      	ldr	r2, [pc, #108]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d708:	23a8      	movs	r3, #168	; 0xa8
 800d70a:	58d4      	ldr	r4, [r2, r3]
 800d70c:	250f      	movs	r5, #15
 800d70e:	43ac      	bics	r4, r5
 800d710:	50d4      	str	r4, [r2, r3]
 800d712:	58d4      	ldr	r4, [r2, r3]
 800d714:	3d04      	subs	r5, #4
 800d716:	432c      	orrs	r4, r5
 800d718:	50d4      	str	r4, [r2, r3]
 800d71a:	e6d8      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800d71c:	4a15      	ldr	r2, [pc, #84]	; (800d774 <RemapAndLinkDMAtoUARTRx+0x354>)
 800d71e:	23a8      	movs	r3, #168	; 0xa8
 800d720:	58d4      	ldr	r4, [r2, r3]
 800d722:	4d13      	ldr	r5, [pc, #76]	; (800d770 <RemapAndLinkDMAtoUARTRx+0x350>)
 800d724:	402c      	ands	r4, r5
 800d726:	50d4      	str	r4, [r2, r3]
 800d728:	58d5      	ldr	r5, [r2, r3]
 800d72a:	24b0      	movs	r4, #176	; 0xb0
 800d72c:	0124      	lsls	r4, r4, #4
 800d72e:	432c      	orrs	r4, r5
 800d730:	50d4      	str	r4, [r2, r3]
 800d732:	e6cc      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
 800d734:	40013800 	.word	0x40013800
 800d738:	40004400 	.word	0x40004400
 800d73c:	40004800 	.word	0x40004800
 800d740:	40004c00 	.word	0x40004c00
 800d744:	40005000 	.word	0x40005000
 800d748:	40011400 	.word	0x40011400
 800d74c:	40011800 	.word	0x40011800
 800d750:	40011c00 	.word	0x40011c00
 800d754:	40020008 	.word	0x40020008
 800d758:	40020030 	.word	0x40020030
 800d75c:	40020058 	.word	0x40020058
 800d760:	4002006c 	.word	0x4002006c
 800d764:	4002041c 	.word	0x4002041c
 800d768:	40020430 	.word	0x40020430
 800d76c:	40020400 	.word	0x40020400
 800d770:	fffff0ff 	.word	0xfffff0ff
 800d774:	40020000 	.word	0x40020000
 800d778:	fff0ffff 	.word	0xfff0ffff
 800d77c:	ff0fffff 	.word	0xff0fffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800d780:	4ab4      	ldr	r2, [pc, #720]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d782:	23a8      	movs	r3, #168	; 0xa8
 800d784:	58d4      	ldr	r4, [r2, r3]
 800d786:	4db4      	ldr	r5, [pc, #720]	; (800da58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d788:	402c      	ands	r4, r5
 800d78a:	50d4      	str	r4, [r2, r3]
 800d78c:	58d5      	ldr	r5, [r2, r3]
 800d78e:	24b0      	movs	r4, #176	; 0xb0
 800d790:	0324      	lsls	r4, r4, #12
 800d792:	432c      	orrs	r4, r5
 800d794:	50d4      	str	r4, [r2, r3]
 800d796:	e69a      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800d798:	4aae      	ldr	r2, [pc, #696]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d79a:	23a8      	movs	r3, #168	; 0xa8
 800d79c:	58d4      	ldr	r4, [r2, r3]
 800d79e:	4daf      	ldr	r5, [pc, #700]	; (800da5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d7a0:	402c      	ands	r4, r5
 800d7a2:	50d4      	str	r4, [r2, r3]
 800d7a4:	58d5      	ldr	r5, [r2, r3]
 800d7a6:	24b0      	movs	r4, #176	; 0xb0
 800d7a8:	0424      	lsls	r4, r4, #16
 800d7aa:	432c      	orrs	r4, r5
 800d7ac:	50d4      	str	r4, [r2, r3]
 800d7ae:	e68e      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800d7b0:	4aab      	ldr	r2, [pc, #684]	; (800da60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d7b2:	23a8      	movs	r3, #168	; 0xa8
 800d7b4:	58d4      	ldr	r4, [r2, r3]
 800d7b6:	25f0      	movs	r5, #240	; 0xf0
 800d7b8:	43ac      	bics	r4, r5
 800d7ba:	50d4      	str	r4, [r2, r3]
 800d7bc:	58d4      	ldr	r4, [r2, r3]
 800d7be:	3d40      	subs	r5, #64	; 0x40
 800d7c0:	432c      	orrs	r4, r5
 800d7c2:	50d4      	str	r4, [r2, r3]
 800d7c4:	e683      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800d7c6:	680b      	ldr	r3, [r1, #0]
 800d7c8:	4aa6      	ldr	r2, [pc, #664]	; (800da64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d01b      	beq.n	800d806 <RemapAndLinkDMAtoUARTRx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800d7ce:	4aa6      	ldr	r2, [pc, #664]	; (800da68 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d023      	beq.n	800d81c <RemapAndLinkDMAtoUARTRx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800d7d4:	4aa5      	ldr	r2, [pc, #660]	; (800da6c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d02c      	beq.n	800d834 <RemapAndLinkDMAtoUARTRx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800d7da:	4aa5      	ldr	r2, [pc, #660]	; (800da70 <RemapAndLinkDMAtoUARTRx+0x650>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d035      	beq.n	800d84c <RemapAndLinkDMAtoUARTRx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800d7e0:	4aa4      	ldr	r2, [pc, #656]	; (800da74 <RemapAndLinkDMAtoUARTRx+0x654>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d03e      	beq.n	800d864 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800d7e6:	4aa4      	ldr	r2, [pc, #656]	; (800da78 <RemapAndLinkDMAtoUARTRx+0x658>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d000      	beq.n	800d7ee <RemapAndLinkDMAtoUARTRx+0x3ce>
 800d7ec:	e66f      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800d7ee:	4a9c      	ldr	r2, [pc, #624]	; (800da60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d7f0:	23a8      	movs	r3, #168	; 0xa8
 800d7f2:	58d4      	ldr	r4, [r2, r3]
 800d7f4:	4da1      	ldr	r5, [pc, #644]	; (800da7c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800d7f6:	402c      	ands	r4, r5
 800d7f8:	50d4      	str	r4, [r2, r3]
 800d7fa:	58d5      	ldr	r5, [r2, r3]
 800d7fc:	24c0      	movs	r4, #192	; 0xc0
 800d7fe:	0124      	lsls	r4, r4, #4
 800d800:	432c      	orrs	r4, r5
 800d802:	50d4      	str	r4, [r2, r3]
 800d804:	e663      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800d806:	4a93      	ldr	r2, [pc, #588]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d808:	23a8      	movs	r3, #168	; 0xa8
 800d80a:	58d4      	ldr	r4, [r2, r3]
 800d80c:	250f      	movs	r5, #15
 800d80e:	43ac      	bics	r4, r5
 800d810:	50d4      	str	r4, [r2, r3]
 800d812:	58d4      	ldr	r4, [r2, r3]
 800d814:	3d03      	subs	r5, #3
 800d816:	432c      	orrs	r4, r5
 800d818:	50d4      	str	r4, [r2, r3]
 800d81a:	e658      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800d81c:	4a8d      	ldr	r2, [pc, #564]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d81e:	23a8      	movs	r3, #168	; 0xa8
 800d820:	58d4      	ldr	r4, [r2, r3]
 800d822:	4d96      	ldr	r5, [pc, #600]	; (800da7c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800d824:	402c      	ands	r4, r5
 800d826:	50d4      	str	r4, [r2, r3]
 800d828:	58d5      	ldr	r5, [r2, r3]
 800d82a:	24c0      	movs	r4, #192	; 0xc0
 800d82c:	0124      	lsls	r4, r4, #4
 800d82e:	432c      	orrs	r4, r5
 800d830:	50d4      	str	r4, [r2, r3]
 800d832:	e64c      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800d834:	4a87      	ldr	r2, [pc, #540]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d836:	23a8      	movs	r3, #168	; 0xa8
 800d838:	58d4      	ldr	r4, [r2, r3]
 800d83a:	4d87      	ldr	r5, [pc, #540]	; (800da58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d83c:	402c      	ands	r4, r5
 800d83e:	50d4      	str	r4, [r2, r3]
 800d840:	58d5      	ldr	r5, [r2, r3]
 800d842:	24c0      	movs	r4, #192	; 0xc0
 800d844:	0324      	lsls	r4, r4, #12
 800d846:	432c      	orrs	r4, r5
 800d848:	50d4      	str	r4, [r2, r3]
 800d84a:	e640      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800d84c:	4a81      	ldr	r2, [pc, #516]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d84e:	23a8      	movs	r3, #168	; 0xa8
 800d850:	58d4      	ldr	r4, [r2, r3]
 800d852:	4d82      	ldr	r5, [pc, #520]	; (800da5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d854:	402c      	ands	r4, r5
 800d856:	50d4      	str	r4, [r2, r3]
 800d858:	58d5      	ldr	r5, [r2, r3]
 800d85a:	24c0      	movs	r4, #192	; 0xc0
 800d85c:	0424      	lsls	r4, r4, #16
 800d85e:	432c      	orrs	r4, r5
 800d860:	50d4      	str	r4, [r2, r3]
 800d862:	e634      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800d864:	4a7e      	ldr	r2, [pc, #504]	; (800da60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d866:	23a8      	movs	r3, #168	; 0xa8
 800d868:	58d4      	ldr	r4, [r2, r3]
 800d86a:	25f0      	movs	r5, #240	; 0xf0
 800d86c:	43ac      	bics	r4, r5
 800d86e:	50d4      	str	r4, [r2, r3]
 800d870:	58d4      	ldr	r4, [r2, r3]
 800d872:	3d30      	subs	r5, #48	; 0x30
 800d874:	432c      	orrs	r4, r5
 800d876:	50d4      	str	r4, [r2, r3]
 800d878:	e629      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800d87a:	680b      	ldr	r3, [r1, #0]
 800d87c:	4a79      	ldr	r2, [pc, #484]	; (800da64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d01b      	beq.n	800d8ba <RemapAndLinkDMAtoUARTRx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800d882:	4a79      	ldr	r2, [pc, #484]	; (800da68 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d023      	beq.n	800d8d0 <RemapAndLinkDMAtoUARTRx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800d888:	4a78      	ldr	r2, [pc, #480]	; (800da6c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d02c      	beq.n	800d8e8 <RemapAndLinkDMAtoUARTRx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800d88e:	4a78      	ldr	r2, [pc, #480]	; (800da70 <RemapAndLinkDMAtoUARTRx+0x650>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d035      	beq.n	800d900 <RemapAndLinkDMAtoUARTRx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800d894:	4a77      	ldr	r2, [pc, #476]	; (800da74 <RemapAndLinkDMAtoUARTRx+0x654>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d03e      	beq.n	800d918 <RemapAndLinkDMAtoUARTRx+0x4f8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800d89a:	4a77      	ldr	r2, [pc, #476]	; (800da78 <RemapAndLinkDMAtoUARTRx+0x658>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d000      	beq.n	800d8a2 <RemapAndLinkDMAtoUARTRx+0x482>
 800d8a0:	e615      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800d8a2:	4a6f      	ldr	r2, [pc, #444]	; (800da60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d8a4:	23a8      	movs	r3, #168	; 0xa8
 800d8a6:	58d4      	ldr	r4, [r2, r3]
 800d8a8:	4d74      	ldr	r5, [pc, #464]	; (800da7c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800d8aa:	402c      	ands	r4, r5
 800d8ac:	50d4      	str	r4, [r2, r3]
 800d8ae:	58d5      	ldr	r5, [r2, r3]
 800d8b0:	24d0      	movs	r4, #208	; 0xd0
 800d8b2:	0124      	lsls	r4, r4, #4
 800d8b4:	432c      	orrs	r4, r5
 800d8b6:	50d4      	str	r4, [r2, r3]
 800d8b8:	e609      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800d8ba:	4a66      	ldr	r2, [pc, #408]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d8bc:	23a8      	movs	r3, #168	; 0xa8
 800d8be:	58d4      	ldr	r4, [r2, r3]
 800d8c0:	250f      	movs	r5, #15
 800d8c2:	43ac      	bics	r4, r5
 800d8c4:	50d4      	str	r4, [r2, r3]
 800d8c6:	58d4      	ldr	r4, [r2, r3]
 800d8c8:	3d02      	subs	r5, #2
 800d8ca:	432c      	orrs	r4, r5
 800d8cc:	50d4      	str	r4, [r2, r3]
 800d8ce:	e5fe      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800d8d0:	4a60      	ldr	r2, [pc, #384]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d8d2:	23a8      	movs	r3, #168	; 0xa8
 800d8d4:	58d4      	ldr	r4, [r2, r3]
 800d8d6:	4d69      	ldr	r5, [pc, #420]	; (800da7c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800d8d8:	402c      	ands	r4, r5
 800d8da:	50d4      	str	r4, [r2, r3]
 800d8dc:	58d5      	ldr	r5, [r2, r3]
 800d8de:	24d0      	movs	r4, #208	; 0xd0
 800d8e0:	0124      	lsls	r4, r4, #4
 800d8e2:	432c      	orrs	r4, r5
 800d8e4:	50d4      	str	r4, [r2, r3]
 800d8e6:	e5f2      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800d8e8:	4a5a      	ldr	r2, [pc, #360]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d8ea:	23a8      	movs	r3, #168	; 0xa8
 800d8ec:	58d4      	ldr	r4, [r2, r3]
 800d8ee:	4d5a      	ldr	r5, [pc, #360]	; (800da58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d8f0:	402c      	ands	r4, r5
 800d8f2:	50d4      	str	r4, [r2, r3]
 800d8f4:	58d5      	ldr	r5, [r2, r3]
 800d8f6:	24d0      	movs	r4, #208	; 0xd0
 800d8f8:	0324      	lsls	r4, r4, #12
 800d8fa:	432c      	orrs	r4, r5
 800d8fc:	50d4      	str	r4, [r2, r3]
 800d8fe:	e5e6      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800d900:	4a54      	ldr	r2, [pc, #336]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d902:	23a8      	movs	r3, #168	; 0xa8
 800d904:	58d4      	ldr	r4, [r2, r3]
 800d906:	4d55      	ldr	r5, [pc, #340]	; (800da5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d908:	402c      	ands	r4, r5
 800d90a:	50d4      	str	r4, [r2, r3]
 800d90c:	58d5      	ldr	r5, [r2, r3]
 800d90e:	24d0      	movs	r4, #208	; 0xd0
 800d910:	0424      	lsls	r4, r4, #16
 800d912:	432c      	orrs	r4, r5
 800d914:	50d4      	str	r4, [r2, r3]
 800d916:	e5da      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800d918:	4a51      	ldr	r2, [pc, #324]	; (800da60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d91a:	23a8      	movs	r3, #168	; 0xa8
 800d91c:	58d4      	ldr	r4, [r2, r3]
 800d91e:	25f0      	movs	r5, #240	; 0xf0
 800d920:	43ac      	bics	r4, r5
 800d922:	50d4      	str	r4, [r2, r3]
 800d924:	58d4      	ldr	r4, [r2, r3]
 800d926:	3d20      	subs	r5, #32
 800d928:	432c      	orrs	r4, r5
 800d92a:	50d4      	str	r4, [r2, r3]
 800d92c:	e5cf      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800d92e:	680b      	ldr	r3, [r1, #0]
 800d930:	4a4c      	ldr	r2, [pc, #304]	; (800da64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d01b      	beq.n	800d96e <RemapAndLinkDMAtoUARTRx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800d936:	4a4c      	ldr	r2, [pc, #304]	; (800da68 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d023      	beq.n	800d984 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800d93c:	4a4b      	ldr	r2, [pc, #300]	; (800da6c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d02c      	beq.n	800d99c <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800d942:	4a4b      	ldr	r2, [pc, #300]	; (800da70 <RemapAndLinkDMAtoUARTRx+0x650>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d035      	beq.n	800d9b4 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800d948:	4a4a      	ldr	r2, [pc, #296]	; (800da74 <RemapAndLinkDMAtoUARTRx+0x654>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d03e      	beq.n	800d9cc <RemapAndLinkDMAtoUARTRx+0x5ac>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800d94e:	4a4a      	ldr	r2, [pc, #296]	; (800da78 <RemapAndLinkDMAtoUARTRx+0x658>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d000      	beq.n	800d956 <RemapAndLinkDMAtoUARTRx+0x536>
 800d954:	e5bb      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800d956:	4a42      	ldr	r2, [pc, #264]	; (800da60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d958:	23a8      	movs	r3, #168	; 0xa8
 800d95a:	58d4      	ldr	r4, [r2, r3]
 800d95c:	4d47      	ldr	r5, [pc, #284]	; (800da7c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800d95e:	402c      	ands	r4, r5
 800d960:	50d4      	str	r4, [r2, r3]
 800d962:	58d5      	ldr	r5, [r2, r3]
 800d964:	24e0      	movs	r4, #224	; 0xe0
 800d966:	0124      	lsls	r4, r4, #4
 800d968:	432c      	orrs	r4, r5
 800d96a:	50d4      	str	r4, [r2, r3]
 800d96c:	e5af      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800d96e:	4a39      	ldr	r2, [pc, #228]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d970:	23a8      	movs	r3, #168	; 0xa8
 800d972:	58d4      	ldr	r4, [r2, r3]
 800d974:	250f      	movs	r5, #15
 800d976:	43ac      	bics	r4, r5
 800d978:	50d4      	str	r4, [r2, r3]
 800d97a:	58d4      	ldr	r4, [r2, r3]
 800d97c:	3d01      	subs	r5, #1
 800d97e:	432c      	orrs	r4, r5
 800d980:	50d4      	str	r4, [r2, r3]
 800d982:	e5a4      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800d984:	4a33      	ldr	r2, [pc, #204]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d986:	23a8      	movs	r3, #168	; 0xa8
 800d988:	58d4      	ldr	r4, [r2, r3]
 800d98a:	4d3c      	ldr	r5, [pc, #240]	; (800da7c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800d98c:	402c      	ands	r4, r5
 800d98e:	50d4      	str	r4, [r2, r3]
 800d990:	58d5      	ldr	r5, [r2, r3]
 800d992:	24e0      	movs	r4, #224	; 0xe0
 800d994:	0124      	lsls	r4, r4, #4
 800d996:	432c      	orrs	r4, r5
 800d998:	50d4      	str	r4, [r2, r3]
 800d99a:	e598      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800d99c:	4a2d      	ldr	r2, [pc, #180]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d99e:	23a8      	movs	r3, #168	; 0xa8
 800d9a0:	58d4      	ldr	r4, [r2, r3]
 800d9a2:	4d2d      	ldr	r5, [pc, #180]	; (800da58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d9a4:	402c      	ands	r4, r5
 800d9a6:	50d4      	str	r4, [r2, r3]
 800d9a8:	58d5      	ldr	r5, [r2, r3]
 800d9aa:	24e0      	movs	r4, #224	; 0xe0
 800d9ac:	0324      	lsls	r4, r4, #12
 800d9ae:	432c      	orrs	r4, r5
 800d9b0:	50d4      	str	r4, [r2, r3]
 800d9b2:	e58c      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800d9b4:	4a27      	ldr	r2, [pc, #156]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d9b6:	23a8      	movs	r3, #168	; 0xa8
 800d9b8:	58d4      	ldr	r4, [r2, r3]
 800d9ba:	4d28      	ldr	r5, [pc, #160]	; (800da5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d9bc:	402c      	ands	r4, r5
 800d9be:	50d4      	str	r4, [r2, r3]
 800d9c0:	58d5      	ldr	r5, [r2, r3]
 800d9c2:	24e0      	movs	r4, #224	; 0xe0
 800d9c4:	0424      	lsls	r4, r4, #16
 800d9c6:	432c      	orrs	r4, r5
 800d9c8:	50d4      	str	r4, [r2, r3]
 800d9ca:	e580      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800d9cc:	4a24      	ldr	r2, [pc, #144]	; (800da60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d9ce:	23a8      	movs	r3, #168	; 0xa8
 800d9d0:	58d4      	ldr	r4, [r2, r3]
 800d9d2:	25f0      	movs	r5, #240	; 0xf0
 800d9d4:	43ac      	bics	r4, r5
 800d9d6:	50d4      	str	r4, [r2, r3]
 800d9d8:	58d4      	ldr	r4, [r2, r3]
 800d9da:	3d10      	subs	r5, #16
 800d9dc:	432c      	orrs	r4, r5
 800d9de:	50d4      	str	r4, [r2, r3]
 800d9e0:	e575      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800d9e2:	4a1c      	ldr	r2, [pc, #112]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d9e4:	23a8      	movs	r3, #168	; 0xa8
 800d9e6:	58d5      	ldr	r5, [r2, r3]
 800d9e8:	260f      	movs	r6, #15
 800d9ea:	43b5      	bics	r5, r6
 800d9ec:	50d5      	str	r5, [r2, r3]
 800d9ee:	58d4      	ldr	r4, [r2, r3]
 800d9f0:	4334      	orrs	r4, r6
 800d9f2:	50d4      	str	r4, [r2, r3]
 800d9f4:	e56b      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800d9f6:	4a17      	ldr	r2, [pc, #92]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d9f8:	23a8      	movs	r3, #168	; 0xa8
 800d9fa:	58d4      	ldr	r4, [r2, r3]
 800d9fc:	4d1f      	ldr	r5, [pc, #124]	; (800da7c <RemapAndLinkDMAtoUARTRx+0x65c>)
 800d9fe:	402c      	ands	r4, r5
 800da00:	50d4      	str	r4, [r2, r3]
 800da02:	58d5      	ldr	r5, [r2, r3]
 800da04:	24f0      	movs	r4, #240	; 0xf0
 800da06:	0124      	lsls	r4, r4, #4
 800da08:	432c      	orrs	r4, r5
 800da0a:	50d4      	str	r4, [r2, r3]
 800da0c:	e55f      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800da0e:	4a11      	ldr	r2, [pc, #68]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800da10:	23a8      	movs	r3, #168	; 0xa8
 800da12:	58d4      	ldr	r4, [r2, r3]
 800da14:	4d10      	ldr	r5, [pc, #64]	; (800da58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800da16:	402c      	ands	r4, r5
 800da18:	50d4      	str	r4, [r2, r3]
 800da1a:	58d5      	ldr	r5, [r2, r3]
 800da1c:	24f0      	movs	r4, #240	; 0xf0
 800da1e:	0324      	lsls	r4, r4, #12
 800da20:	432c      	orrs	r4, r5
 800da22:	50d4      	str	r4, [r2, r3]
 800da24:	e553      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800da26:	4a0b      	ldr	r2, [pc, #44]	; (800da54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800da28:	23a8      	movs	r3, #168	; 0xa8
 800da2a:	58d4      	ldr	r4, [r2, r3]
 800da2c:	4d0b      	ldr	r5, [pc, #44]	; (800da5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800da2e:	402c      	ands	r4, r5
 800da30:	50d4      	str	r4, [r2, r3]
 800da32:	58d5      	ldr	r5, [r2, r3]
 800da34:	24f0      	movs	r4, #240	; 0xf0
 800da36:	0424      	lsls	r4, r4, #16
 800da38:	432c      	orrs	r4, r5
 800da3a:	50d4      	str	r4, [r2, r3]
 800da3c:	e547      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800da3e:	4a08      	ldr	r2, [pc, #32]	; (800da60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800da40:	23a8      	movs	r3, #168	; 0xa8
 800da42:	58d5      	ldr	r5, [r2, r3]
 800da44:	26f0      	movs	r6, #240	; 0xf0
 800da46:	43b5      	bics	r5, r6
 800da48:	50d5      	str	r5, [r2, r3]
 800da4a:	58d4      	ldr	r4, [r2, r3]
 800da4c:	4334      	orrs	r4, r6
 800da4e:	50d4      	str	r4, [r2, r3]
 800da50:	e53d      	b.n	800d4ce <RemapAndLinkDMAtoUARTRx+0xae>
 800da52:	46c0      	nop			; (mov r8, r8)
 800da54:	40020000 	.word	0x40020000
 800da58:	fff0ffff 	.word	0xfff0ffff
 800da5c:	ff0fffff 	.word	0xff0fffff
 800da60:	40020400 	.word	0x40020400
 800da64:	40020008 	.word	0x40020008
 800da68:	40020030 	.word	0x40020030
 800da6c:	40020058 	.word	0x40020058
 800da70:	4002006c 	.word	0x4002006c
 800da74:	4002041c 	.word	0x4002041c
 800da78:	40020430 	.word	0x40020430
 800da7c:	fffff0ff 	.word	0xfffff0ff

0800da80 <DMA_MSG_RX_Setup>:
{	
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	0004      	movs	r4, r0
 800da84:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800da86:	f7ff fccb 	bl	800d420 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800da8a:	2100      	movs	r1, #0
 800da8c:	0028      	movs	r0, r5
 800da8e:	f7ff fc0d 	bl	800d2ac <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800da92:	0020      	movs	r0, r4
 800da94:	f7fd ffec 	bl	800ba70 <GetPort>
 800da98:	1e41      	subs	r1, r0, #1
 800da9a:	0189      	lsls	r1, r1, #6
 800da9c:	4803      	ldr	r0, [pc, #12]	; (800daac <DMA_MSG_RX_Setup+0x2c>)
 800da9e:	1809      	adds	r1, r1, r0
 800daa0:	2240      	movs	r2, #64	; 0x40
 800daa2:	0020      	movs	r0, r4
 800daa4:	f005 fd24 	bl	80134f0 <HAL_UART_Receive_DMA>
}
 800daa8:	bd70      	pop	{r4, r5, r6, pc}
 800daaa:	46c0      	nop			; (mov r8, r8)
 800daac:	2000129c 	.word	0x2000129c

0800dab0 <SetupMessagingRxDMAs>:
{	
 800dab0:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800dab2:	4b17      	ldr	r3, [pc, #92]	; (800db10 <SetupMessagingRxDMAs+0x60>)
 800dab4:	785b      	ldrb	r3, [r3, #1]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d010      	beq.n	800dadc <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800daba:	4b15      	ldr	r3, [pc, #84]	; (800db10 <SetupMessagingRxDMAs+0x60>)
 800dabc:	789b      	ldrb	r3, [r3, #2]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d011      	beq.n	800dae6 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800dac2:	4b13      	ldr	r3, [pc, #76]	; (800db10 <SetupMessagingRxDMAs+0x60>)
 800dac4:	78db      	ldrb	r3, [r3, #3]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d012      	beq.n	800daf0 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800daca:	4b11      	ldr	r3, [pc, #68]	; (800db10 <SetupMessagingRxDMAs+0x60>)
 800dacc:	791b      	ldrb	r3, [r3, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d013      	beq.n	800dafa <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800dad2:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <SetupMessagingRxDMAs+0x60>)
 800dad4:	795b      	ldrb	r3, [r3, #5]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d014      	beq.n	800db04 <SetupMessagingRxDMAs+0x54>
}
 800dada:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800dadc:	490d      	ldr	r1, [pc, #52]	; (800db14 <SetupMessagingRxDMAs+0x64>)
 800dade:	480e      	ldr	r0, [pc, #56]	; (800db18 <SetupMessagingRxDMAs+0x68>)
 800dae0:	f7ff ffce 	bl	800da80 <DMA_MSG_RX_Setup>
 800dae4:	e7e9      	b.n	800daba <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800dae6:	490d      	ldr	r1, [pc, #52]	; (800db1c <SetupMessagingRxDMAs+0x6c>)
 800dae8:	480d      	ldr	r0, [pc, #52]	; (800db20 <SetupMessagingRxDMAs+0x70>)
 800daea:	f7ff ffc9 	bl	800da80 <DMA_MSG_RX_Setup>
 800daee:	e7e8      	b.n	800dac2 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800daf0:	490c      	ldr	r1, [pc, #48]	; (800db24 <SetupMessagingRxDMAs+0x74>)
 800daf2:	480d      	ldr	r0, [pc, #52]	; (800db28 <SetupMessagingRxDMAs+0x78>)
 800daf4:	f7ff ffc4 	bl	800da80 <DMA_MSG_RX_Setup>
 800daf8:	e7e7      	b.n	800daca <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800dafa:	490c      	ldr	r1, [pc, #48]	; (800db2c <SetupMessagingRxDMAs+0x7c>)
 800dafc:	480c      	ldr	r0, [pc, #48]	; (800db30 <SetupMessagingRxDMAs+0x80>)
 800dafe:	f7ff ffbf 	bl	800da80 <DMA_MSG_RX_Setup>
 800db02:	e7e6      	b.n	800dad2 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800db04:	490b      	ldr	r1, [pc, #44]	; (800db34 <SetupMessagingRxDMAs+0x84>)
 800db06:	480c      	ldr	r0, [pc, #48]	; (800db38 <SetupMessagingRxDMAs+0x88>)
 800db08:	f7ff ffba 	bl	800da80 <DMA_MSG_RX_Setup>
}
 800db0c:	e7e5      	b.n	800dada <SetupMessagingRxDMAs+0x2a>
 800db0e:	46c0      	nop			; (mov r8, r8)
 800db10:	200010c8 	.word	0x200010c8
 800db14:	20001af0 	.word	0x20001af0
 800db18:	20006fbc 	.word	0x20006fbc
 800db1c:	20001b28 	.word	0x20001b28
 800db20:	20007030 	.word	0x20007030
 800db24:	20001b60 	.word	0x20001b60
 800db28:	20006f4c 	.word	0x20006f4c
 800db2c:	20001b98 	.word	0x20001b98
 800db30:	20006df0 	.word	0x20006df0
 800db34:	20001bd0 	.word	0x20001bd0
 800db38:	20006e64 	.word	0x20006e64

0800db3c <DMA_STREAM_Setup>:
{	
 800db3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3e:	0005      	movs	r5, r0
 800db40:	000f      	movs	r7, r1
 800db42:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800db44:	f7fd ff94 	bl	800ba70 <GetPort>
	hDMA = &streamDMA[port-1];
 800db48:	3801      	subs	r0, #1
 800db4a:	00c4      	lsls	r4, r0, #3
 800db4c:	1a24      	subs	r4, r4, r0
 800db4e:	00e4      	lsls	r4, r4, #3
 800db50:	4809      	ldr	r0, [pc, #36]	; (800db78 <DMA_STREAM_Setup+0x3c>)
 800db52:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800db54:	0021      	movs	r1, r4
 800db56:	0028      	movs	r0, r5
 800db58:	f7ff fc62 	bl	800d420 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800db5c:	2101      	movs	r1, #1
 800db5e:	0020      	movs	r0, r4
 800db60:	f7ff fba4 	bl	800d2ac <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800db64:	2369      	movs	r3, #105	; 0x69
 800db66:	2201      	movs	r2, #1
 800db68:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800db6a:	6839      	ldr	r1, [r7, #0]
 800db6c:	3128      	adds	r1, #40	; 0x28
 800db6e:	0032      	movs	r2, r6
 800db70:	0028      	movs	r0, r5
 800db72:	f005 fcbd 	bl	80134f0 <HAL_UART_Receive_DMA>
}
 800db76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db78:	20001ce8 	.word	0x20001ce8

0800db7c <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800db7c:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800db7e:	6803      	ldr	r3, [r0, #0]
 800db80:	4ac3      	ldr	r2, [pc, #780]	; (800de90 <RemapAndLinkDMAtoUARTTx+0x314>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d03e      	beq.n	800dc04 <RemapAndLinkDMAtoUARTTx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800db86:	4ac3      	ldr	r2, [pc, #780]	; (800de94 <RemapAndLinkDMAtoUARTTx+0x318>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d100      	bne.n	800db8e <RemapAndLinkDMAtoUARTTx+0x12>
 800db8c:	e096      	b.n	800dcbc <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800db8e:	4ac2      	ldr	r2, [pc, #776]	; (800de98 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d100      	bne.n	800db96 <RemapAndLinkDMAtoUARTTx+0x1a>
 800db94:	e0eb      	b.n	800dd6e <RemapAndLinkDMAtoUARTTx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800db96:	4ac1      	ldr	r2, [pc, #772]	; (800de9c <RemapAndLinkDMAtoUARTTx+0x320>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d100      	bne.n	800db9e <RemapAndLinkDMAtoUARTTx+0x22>
 800db9c:	e141      	b.n	800de22 <RemapAndLinkDMAtoUARTTx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800db9e:	4ac0      	ldr	r2, [pc, #768]	; (800dea0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d100      	bne.n	800dba6 <RemapAndLinkDMAtoUARTTx+0x2a>
 800dba4:	e1bd      	b.n	800df22 <RemapAndLinkDMAtoUARTTx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800dba6:	4abf      	ldr	r2, [pc, #764]	; (800dea4 <RemapAndLinkDMAtoUARTTx+0x328>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d100      	bne.n	800dbae <RemapAndLinkDMAtoUARTTx+0x32>
 800dbac:	e213      	b.n	800dfd6 <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800dbae:	4abe      	ldr	r2, [pc, #760]	; (800dea8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d100      	bne.n	800dbb6 <RemapAndLinkDMAtoUARTTx+0x3a>
 800dbb4:	e269      	b.n	800e08a <RemapAndLinkDMAtoUARTTx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800dbb6:	4abd      	ldr	r2, [pc, #756]	; (800deac <RemapAndLinkDMAtoUARTTx+0x330>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d136      	bne.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
 800dbbc:	680b      	ldr	r3, [r1, #0]
 800dbbe:	4abc      	ldr	r2, [pc, #752]	; (800deb0 <RemapAndLinkDMAtoUARTTx+0x334>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d100      	bne.n	800dbc6 <RemapAndLinkDMAtoUARTTx+0x4a>
 800dbc4:	e2bb      	b.n	800e13e <RemapAndLinkDMAtoUARTTx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800dbc6:	4abb      	ldr	r2, [pc, #748]	; (800deb4 <RemapAndLinkDMAtoUARTTx+0x338>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d100      	bne.n	800dbce <RemapAndLinkDMAtoUARTTx+0x52>
 800dbcc:	e2c1      	b.n	800e152 <RemapAndLinkDMAtoUARTTx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800dbce:	4aba      	ldr	r2, [pc, #744]	; (800deb8 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d100      	bne.n	800dbd6 <RemapAndLinkDMAtoUARTTx+0x5a>
 800dbd4:	e2c9      	b.n	800e16a <RemapAndLinkDMAtoUARTTx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800dbd6:	4ab9      	ldr	r2, [pc, #740]	; (800debc <RemapAndLinkDMAtoUARTTx+0x340>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d100      	bne.n	800dbde <RemapAndLinkDMAtoUARTTx+0x62>
 800dbdc:	e2d1      	b.n	800e182 <RemapAndLinkDMAtoUARTTx+0x606>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800dbde:	4ab8      	ldr	r2, [pc, #736]	; (800dec0 <RemapAndLinkDMAtoUARTTx+0x344>)
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d100      	bne.n	800dbe6 <RemapAndLinkDMAtoUARTTx+0x6a>
 800dbe4:	e2d7      	b.n	800e196 <RemapAndLinkDMAtoUARTTx+0x61a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800dbe6:	4ab7      	ldr	r2, [pc, #732]	; (800dec4 <RemapAndLinkDMAtoUARTTx+0x348>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d11e      	bne.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800dbec:	4ab6      	ldr	r2, [pc, #728]	; (800dec8 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800dbee:	23a8      	movs	r3, #168	; 0xa8
 800dbf0:	58d4      	ldr	r4, [r2, r3]
 800dbf2:	4db6      	ldr	r5, [pc, #728]	; (800decc <RemapAndLinkDMAtoUARTTx+0x350>)
 800dbf4:	402c      	ands	r4, r5
 800dbf6:	50d4      	str	r4, [r2, r3]
 800dbf8:	58d5      	ldr	r5, [r2, r3]
 800dbfa:	24f0      	movs	r4, #240	; 0xf0
 800dbfc:	0324      	lsls	r4, r4, #12
 800dbfe:	432c      	orrs	r4, r5
 800dc00:	50d4      	str	r4, [r2, r3]
 800dc02:	e012      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800dc04:	680b      	ldr	r3, [r1, #0]
 800dc06:	4aaa      	ldr	r2, [pc, #680]	; (800deb0 <RemapAndLinkDMAtoUARTTx+0x334>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d011      	beq.n	800dc30 <RemapAndLinkDMAtoUARTTx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800dc0c:	4aa9      	ldr	r2, [pc, #676]	; (800deb4 <RemapAndLinkDMAtoUARTTx+0x338>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d019      	beq.n	800dc46 <RemapAndLinkDMAtoUARTTx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800dc12:	4aa9      	ldr	r2, [pc, #676]	; (800deb8 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d022      	beq.n	800dc5e <RemapAndLinkDMAtoUARTTx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800dc18:	4aa8      	ldr	r2, [pc, #672]	; (800debc <RemapAndLinkDMAtoUARTTx+0x340>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d02b      	beq.n	800dc76 <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800dc1e:	4aa8      	ldr	r2, [pc, #672]	; (800dec0 <RemapAndLinkDMAtoUARTTx+0x344>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d033      	beq.n	800dc8c <RemapAndLinkDMAtoUARTTx+0x110>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800dc24:	4aa7      	ldr	r2, [pc, #668]	; (800dec4 <RemapAndLinkDMAtoUARTTx+0x348>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d03c      	beq.n	800dca4 <RemapAndLinkDMAtoUARTTx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800dc2a:	6601      	str	r1, [r0, #96]	; 0x60
 800dc2c:	6248      	str	r0, [r1, #36]	; 0x24
}
 800dc2e:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800dc30:	4aa7      	ldr	r2, [pc, #668]	; (800ded0 <RemapAndLinkDMAtoUARTTx+0x354>)
 800dc32:	23a8      	movs	r3, #168	; 0xa8
 800dc34:	58d4      	ldr	r4, [r2, r3]
 800dc36:	25f0      	movs	r5, #240	; 0xf0
 800dc38:	43ac      	bics	r4, r5
 800dc3a:	50d4      	str	r4, [r2, r3]
 800dc3c:	58d4      	ldr	r4, [r2, r3]
 800dc3e:	3d70      	subs	r5, #112	; 0x70
 800dc40:	432c      	orrs	r4, r5
 800dc42:	50d4      	str	r4, [r2, r3]
 800dc44:	e7f1      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800dc46:	4aa2      	ldr	r2, [pc, #648]	; (800ded0 <RemapAndLinkDMAtoUARTTx+0x354>)
 800dc48:	23a8      	movs	r3, #168	; 0xa8
 800dc4a:	58d4      	ldr	r4, [r2, r3]
 800dc4c:	4da1      	ldr	r5, [pc, #644]	; (800ded4 <RemapAndLinkDMAtoUARTTx+0x358>)
 800dc4e:	402c      	ands	r4, r5
 800dc50:	50d4      	str	r4, [r2, r3]
 800dc52:	58d5      	ldr	r5, [r2, r3]
 800dc54:	2480      	movs	r4, #128	; 0x80
 800dc56:	0224      	lsls	r4, r4, #8
 800dc58:	432c      	orrs	r4, r5
 800dc5a:	50d4      	str	r4, [r2, r3]
 800dc5c:	e7e5      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800dc5e:	4a9c      	ldr	r2, [pc, #624]	; (800ded0 <RemapAndLinkDMAtoUARTTx+0x354>)
 800dc60:	23a8      	movs	r3, #168	; 0xa8
 800dc62:	58d4      	ldr	r4, [r2, r3]
 800dc64:	4d9c      	ldr	r5, [pc, #624]	; (800ded8 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800dc66:	402c      	ands	r4, r5
 800dc68:	50d4      	str	r4, [r2, r3]
 800dc6a:	58d5      	ldr	r5, [r2, r3]
 800dc6c:	2480      	movs	r4, #128	; 0x80
 800dc6e:	0524      	lsls	r4, r4, #20
 800dc70:	432c      	orrs	r4, r5
 800dc72:	50d4      	str	r4, [r2, r3]
 800dc74:	e7d9      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800dc76:	4a94      	ldr	r2, [pc, #592]	; (800dec8 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800dc78:	23a8      	movs	r3, #168	; 0xa8
 800dc7a:	58d4      	ldr	r4, [r2, r3]
 800dc7c:	250f      	movs	r5, #15
 800dc7e:	43ac      	bics	r4, r5
 800dc80:	50d4      	str	r4, [r2, r3]
 800dc82:	58d4      	ldr	r4, [r2, r3]
 800dc84:	3d07      	subs	r5, #7
 800dc86:	432c      	orrs	r4, r5
 800dc88:	50d4      	str	r4, [r2, r3]
 800dc8a:	e7ce      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800dc8c:	4a8e      	ldr	r2, [pc, #568]	; (800dec8 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800dc8e:	23a8      	movs	r3, #168	; 0xa8
 800dc90:	58d4      	ldr	r4, [r2, r3]
 800dc92:	4d90      	ldr	r5, [pc, #576]	; (800ded4 <RemapAndLinkDMAtoUARTTx+0x358>)
 800dc94:	402c      	ands	r4, r5
 800dc96:	50d4      	str	r4, [r2, r3]
 800dc98:	58d5      	ldr	r5, [r2, r3]
 800dc9a:	2480      	movs	r4, #128	; 0x80
 800dc9c:	0224      	lsls	r4, r4, #8
 800dc9e:	432c      	orrs	r4, r5
 800dca0:	50d4      	str	r4, [r2, r3]
 800dca2:	e7c2      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800dca4:	4a88      	ldr	r2, [pc, #544]	; (800dec8 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800dca6:	23a8      	movs	r3, #168	; 0xa8
 800dca8:	58d4      	ldr	r4, [r2, r3]
 800dcaa:	4d88      	ldr	r5, [pc, #544]	; (800decc <RemapAndLinkDMAtoUARTTx+0x350>)
 800dcac:	402c      	ands	r4, r5
 800dcae:	50d4      	str	r4, [r2, r3]
 800dcb0:	58d5      	ldr	r5, [r2, r3]
 800dcb2:	2480      	movs	r4, #128	; 0x80
 800dcb4:	0324      	lsls	r4, r4, #12
 800dcb6:	432c      	orrs	r4, r5
 800dcb8:	50d4      	str	r4, [r2, r3]
 800dcba:	e7b6      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800dcbc:	680b      	ldr	r3, [r1, #0]
 800dcbe:	4a7c      	ldr	r2, [pc, #496]	; (800deb0 <RemapAndLinkDMAtoUARTTx+0x334>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d01a      	beq.n	800dcfa <RemapAndLinkDMAtoUARTTx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800dcc4:	4a7b      	ldr	r2, [pc, #492]	; (800deb4 <RemapAndLinkDMAtoUARTTx+0x338>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d022      	beq.n	800dd10 <RemapAndLinkDMAtoUARTTx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800dcca:	4a7b      	ldr	r2, [pc, #492]	; (800deb8 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d02b      	beq.n	800dd28 <RemapAndLinkDMAtoUARTTx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800dcd0:	4a7a      	ldr	r2, [pc, #488]	; (800debc <RemapAndLinkDMAtoUARTTx+0x340>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d034      	beq.n	800dd40 <RemapAndLinkDMAtoUARTTx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800dcd6:	4a7a      	ldr	r2, [pc, #488]	; (800dec0 <RemapAndLinkDMAtoUARTTx+0x344>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d03c      	beq.n	800dd56 <RemapAndLinkDMAtoUARTTx+0x1da>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800dcdc:	4a79      	ldr	r2, [pc, #484]	; (800dec4 <RemapAndLinkDMAtoUARTTx+0x348>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d1a3      	bne.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800dce2:	4a79      	ldr	r2, [pc, #484]	; (800dec8 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800dce4:	23a8      	movs	r3, #168	; 0xa8
 800dce6:	58d4      	ldr	r4, [r2, r3]
 800dce8:	4d78      	ldr	r5, [pc, #480]	; (800decc <RemapAndLinkDMAtoUARTTx+0x350>)
 800dcea:	402c      	ands	r4, r5
 800dcec:	50d4      	str	r4, [r2, r3]
 800dcee:	58d5      	ldr	r5, [r2, r3]
 800dcf0:	2490      	movs	r4, #144	; 0x90
 800dcf2:	0324      	lsls	r4, r4, #12
 800dcf4:	432c      	orrs	r4, r5
 800dcf6:	50d4      	str	r4, [r2, r3]
 800dcf8:	e797      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800dcfa:	4a75      	ldr	r2, [pc, #468]	; (800ded0 <RemapAndLinkDMAtoUARTTx+0x354>)
 800dcfc:	23a8      	movs	r3, #168	; 0xa8
 800dcfe:	58d4      	ldr	r4, [r2, r3]
 800dd00:	25f0      	movs	r5, #240	; 0xf0
 800dd02:	43ac      	bics	r4, r5
 800dd04:	50d4      	str	r4, [r2, r3]
 800dd06:	58d4      	ldr	r4, [r2, r3]
 800dd08:	3d60      	subs	r5, #96	; 0x60
 800dd0a:	432c      	orrs	r4, r5
 800dd0c:	50d4      	str	r4, [r2, r3]
 800dd0e:	e78c      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800dd10:	4a6f      	ldr	r2, [pc, #444]	; (800ded0 <RemapAndLinkDMAtoUARTTx+0x354>)
 800dd12:	23a8      	movs	r3, #168	; 0xa8
 800dd14:	58d4      	ldr	r4, [r2, r3]
 800dd16:	4d6f      	ldr	r5, [pc, #444]	; (800ded4 <RemapAndLinkDMAtoUARTTx+0x358>)
 800dd18:	402c      	ands	r4, r5
 800dd1a:	50d4      	str	r4, [r2, r3]
 800dd1c:	58d5      	ldr	r5, [r2, r3]
 800dd1e:	2490      	movs	r4, #144	; 0x90
 800dd20:	0224      	lsls	r4, r4, #8
 800dd22:	432c      	orrs	r4, r5
 800dd24:	50d4      	str	r4, [r2, r3]
 800dd26:	e780      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800dd28:	4a69      	ldr	r2, [pc, #420]	; (800ded0 <RemapAndLinkDMAtoUARTTx+0x354>)
 800dd2a:	23a8      	movs	r3, #168	; 0xa8
 800dd2c:	58d4      	ldr	r4, [r2, r3]
 800dd2e:	4d6a      	ldr	r5, [pc, #424]	; (800ded8 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800dd30:	402c      	ands	r4, r5
 800dd32:	50d4      	str	r4, [r2, r3]
 800dd34:	58d5      	ldr	r5, [r2, r3]
 800dd36:	2490      	movs	r4, #144	; 0x90
 800dd38:	0524      	lsls	r4, r4, #20
 800dd3a:	432c      	orrs	r4, r5
 800dd3c:	50d4      	str	r4, [r2, r3]
 800dd3e:	e774      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800dd40:	4a61      	ldr	r2, [pc, #388]	; (800dec8 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800dd42:	23a8      	movs	r3, #168	; 0xa8
 800dd44:	58d4      	ldr	r4, [r2, r3]
 800dd46:	250f      	movs	r5, #15
 800dd48:	43ac      	bics	r4, r5
 800dd4a:	50d4      	str	r4, [r2, r3]
 800dd4c:	58d4      	ldr	r4, [r2, r3]
 800dd4e:	3d06      	subs	r5, #6
 800dd50:	432c      	orrs	r4, r5
 800dd52:	50d4      	str	r4, [r2, r3]
 800dd54:	e769      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800dd56:	4a5c      	ldr	r2, [pc, #368]	; (800dec8 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800dd58:	23a8      	movs	r3, #168	; 0xa8
 800dd5a:	58d4      	ldr	r4, [r2, r3]
 800dd5c:	4d5d      	ldr	r5, [pc, #372]	; (800ded4 <RemapAndLinkDMAtoUARTTx+0x358>)
 800dd5e:	402c      	ands	r4, r5
 800dd60:	50d4      	str	r4, [r2, r3]
 800dd62:	58d5      	ldr	r5, [r2, r3]
 800dd64:	2490      	movs	r4, #144	; 0x90
 800dd66:	0224      	lsls	r4, r4, #8
 800dd68:	432c      	orrs	r4, r5
 800dd6a:	50d4      	str	r4, [r2, r3]
 800dd6c:	e75d      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800dd6e:	680b      	ldr	r3, [r1, #0]
 800dd70:	4a4f      	ldr	r2, [pc, #316]	; (800deb0 <RemapAndLinkDMAtoUARTTx+0x334>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d01b      	beq.n	800ddae <RemapAndLinkDMAtoUARTTx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800dd76:	4a4f      	ldr	r2, [pc, #316]	; (800deb4 <RemapAndLinkDMAtoUARTTx+0x338>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d023      	beq.n	800ddc4 <RemapAndLinkDMAtoUARTTx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800dd7c:	4a4e      	ldr	r2, [pc, #312]	; (800deb8 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d02c      	beq.n	800dddc <RemapAndLinkDMAtoUARTTx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800dd82:	4a4e      	ldr	r2, [pc, #312]	; (800debc <RemapAndLinkDMAtoUARTTx+0x340>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d035      	beq.n	800ddf4 <RemapAndLinkDMAtoUARTTx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800dd88:	4a4d      	ldr	r2, [pc, #308]	; (800dec0 <RemapAndLinkDMAtoUARTTx+0x344>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d03d      	beq.n	800de0a <RemapAndLinkDMAtoUARTTx+0x28e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800dd8e:	4a4d      	ldr	r2, [pc, #308]	; (800dec4 <RemapAndLinkDMAtoUARTTx+0x348>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d000      	beq.n	800dd96 <RemapAndLinkDMAtoUARTTx+0x21a>
 800dd94:	e749      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800dd96:	4a4c      	ldr	r2, [pc, #304]	; (800dec8 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800dd98:	23a8      	movs	r3, #168	; 0xa8
 800dd9a:	58d4      	ldr	r4, [r2, r3]
 800dd9c:	4d4b      	ldr	r5, [pc, #300]	; (800decc <RemapAndLinkDMAtoUARTTx+0x350>)
 800dd9e:	402c      	ands	r4, r5
 800dda0:	50d4      	str	r4, [r2, r3]
 800dda2:	58d5      	ldr	r5, [r2, r3]
 800dda4:	24a0      	movs	r4, #160	; 0xa0
 800dda6:	0324      	lsls	r4, r4, #12
 800dda8:	432c      	orrs	r4, r5
 800ddaa:	50d4      	str	r4, [r2, r3]
 800ddac:	e73d      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800ddae:	4a48      	ldr	r2, [pc, #288]	; (800ded0 <RemapAndLinkDMAtoUARTTx+0x354>)
 800ddb0:	23a8      	movs	r3, #168	; 0xa8
 800ddb2:	58d4      	ldr	r4, [r2, r3]
 800ddb4:	25f0      	movs	r5, #240	; 0xf0
 800ddb6:	43ac      	bics	r4, r5
 800ddb8:	50d4      	str	r4, [r2, r3]
 800ddba:	58d4      	ldr	r4, [r2, r3]
 800ddbc:	3d50      	subs	r5, #80	; 0x50
 800ddbe:	432c      	orrs	r4, r5
 800ddc0:	50d4      	str	r4, [r2, r3]
 800ddc2:	e732      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800ddc4:	4a42      	ldr	r2, [pc, #264]	; (800ded0 <RemapAndLinkDMAtoUARTTx+0x354>)
 800ddc6:	23a8      	movs	r3, #168	; 0xa8
 800ddc8:	58d4      	ldr	r4, [r2, r3]
 800ddca:	4d42      	ldr	r5, [pc, #264]	; (800ded4 <RemapAndLinkDMAtoUARTTx+0x358>)
 800ddcc:	402c      	ands	r4, r5
 800ddce:	50d4      	str	r4, [r2, r3]
 800ddd0:	58d5      	ldr	r5, [r2, r3]
 800ddd2:	24a0      	movs	r4, #160	; 0xa0
 800ddd4:	0224      	lsls	r4, r4, #8
 800ddd6:	432c      	orrs	r4, r5
 800ddd8:	50d4      	str	r4, [r2, r3]
 800ddda:	e726      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800dddc:	4a3c      	ldr	r2, [pc, #240]	; (800ded0 <RemapAndLinkDMAtoUARTTx+0x354>)
 800ddde:	23a8      	movs	r3, #168	; 0xa8
 800dde0:	58d4      	ldr	r4, [r2, r3]
 800dde2:	4d3d      	ldr	r5, [pc, #244]	; (800ded8 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800dde4:	402c      	ands	r4, r5
 800dde6:	50d4      	str	r4, [r2, r3]
 800dde8:	58d5      	ldr	r5, [r2, r3]
 800ddea:	24a0      	movs	r4, #160	; 0xa0
 800ddec:	0524      	lsls	r4, r4, #20
 800ddee:	432c      	orrs	r4, r5
 800ddf0:	50d4      	str	r4, [r2, r3]
 800ddf2:	e71a      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800ddf4:	4a34      	ldr	r2, [pc, #208]	; (800dec8 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800ddf6:	23a8      	movs	r3, #168	; 0xa8
 800ddf8:	58d4      	ldr	r4, [r2, r3]
 800ddfa:	250f      	movs	r5, #15
 800ddfc:	43ac      	bics	r4, r5
 800ddfe:	50d4      	str	r4, [r2, r3]
 800de00:	58d4      	ldr	r4, [r2, r3]
 800de02:	3d05      	subs	r5, #5
 800de04:	432c      	orrs	r4, r5
 800de06:	50d4      	str	r4, [r2, r3]
 800de08:	e70f      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800de0a:	4a2f      	ldr	r2, [pc, #188]	; (800dec8 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800de0c:	23a8      	movs	r3, #168	; 0xa8
 800de0e:	58d4      	ldr	r4, [r2, r3]
 800de10:	4d30      	ldr	r5, [pc, #192]	; (800ded4 <RemapAndLinkDMAtoUARTTx+0x358>)
 800de12:	402c      	ands	r4, r5
 800de14:	50d4      	str	r4, [r2, r3]
 800de16:	58d5      	ldr	r5, [r2, r3]
 800de18:	24a0      	movs	r4, #160	; 0xa0
 800de1a:	0224      	lsls	r4, r4, #8
 800de1c:	432c      	orrs	r4, r5
 800de1e:	50d4      	str	r4, [r2, r3]
 800de20:	e703      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800de22:	680b      	ldr	r3, [r1, #0]
 800de24:	4a22      	ldr	r2, [pc, #136]	; (800deb0 <RemapAndLinkDMAtoUARTTx+0x334>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d01b      	beq.n	800de62 <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800de2a:	4a22      	ldr	r2, [pc, #136]	; (800deb4 <RemapAndLinkDMAtoUARTTx+0x338>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d023      	beq.n	800de78 <RemapAndLinkDMAtoUARTTx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800de30:	4a21      	ldr	r2, [pc, #132]	; (800deb8 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d052      	beq.n	800dedc <RemapAndLinkDMAtoUARTTx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800de36:	4a21      	ldr	r2, [pc, #132]	; (800debc <RemapAndLinkDMAtoUARTTx+0x340>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d05b      	beq.n	800def4 <RemapAndLinkDMAtoUARTTx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800de3c:	4a20      	ldr	r2, [pc, #128]	; (800dec0 <RemapAndLinkDMAtoUARTTx+0x344>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d063      	beq.n	800df0a <RemapAndLinkDMAtoUARTTx+0x38e>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800de42:	4a20      	ldr	r2, [pc, #128]	; (800dec4 <RemapAndLinkDMAtoUARTTx+0x348>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d000      	beq.n	800de4a <RemapAndLinkDMAtoUARTTx+0x2ce>
 800de48:	e6ef      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800de4a:	4a1f      	ldr	r2, [pc, #124]	; (800dec8 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800de4c:	23a8      	movs	r3, #168	; 0xa8
 800de4e:	58d4      	ldr	r4, [r2, r3]
 800de50:	4d1e      	ldr	r5, [pc, #120]	; (800decc <RemapAndLinkDMAtoUARTTx+0x350>)
 800de52:	402c      	ands	r4, r5
 800de54:	50d4      	str	r4, [r2, r3]
 800de56:	58d5      	ldr	r5, [r2, r3]
 800de58:	24b0      	movs	r4, #176	; 0xb0
 800de5a:	0324      	lsls	r4, r4, #12
 800de5c:	432c      	orrs	r4, r5
 800de5e:	50d4      	str	r4, [r2, r3]
 800de60:	e6e3      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800de62:	4a1b      	ldr	r2, [pc, #108]	; (800ded0 <RemapAndLinkDMAtoUARTTx+0x354>)
 800de64:	23a8      	movs	r3, #168	; 0xa8
 800de66:	58d4      	ldr	r4, [r2, r3]
 800de68:	25f0      	movs	r5, #240	; 0xf0
 800de6a:	43ac      	bics	r4, r5
 800de6c:	50d4      	str	r4, [r2, r3]
 800de6e:	58d4      	ldr	r4, [r2, r3]
 800de70:	3d40      	subs	r5, #64	; 0x40
 800de72:	432c      	orrs	r4, r5
 800de74:	50d4      	str	r4, [r2, r3]
 800de76:	e6d8      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800de78:	4a15      	ldr	r2, [pc, #84]	; (800ded0 <RemapAndLinkDMAtoUARTTx+0x354>)
 800de7a:	23a8      	movs	r3, #168	; 0xa8
 800de7c:	58d4      	ldr	r4, [r2, r3]
 800de7e:	4d15      	ldr	r5, [pc, #84]	; (800ded4 <RemapAndLinkDMAtoUARTTx+0x358>)
 800de80:	402c      	ands	r4, r5
 800de82:	50d4      	str	r4, [r2, r3]
 800de84:	58d5      	ldr	r5, [r2, r3]
 800de86:	24b0      	movs	r4, #176	; 0xb0
 800de88:	0224      	lsls	r4, r4, #8
 800de8a:	432c      	orrs	r4, r5
 800de8c:	50d4      	str	r4, [r2, r3]
 800de8e:	e6cc      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
 800de90:	40013800 	.word	0x40013800
 800de94:	40004400 	.word	0x40004400
 800de98:	40004800 	.word	0x40004800
 800de9c:	40004c00 	.word	0x40004c00
 800dea0:	40005000 	.word	0x40005000
 800dea4:	40011400 	.word	0x40011400
 800dea8:	40011800 	.word	0x40011800
 800deac:	40011c00 	.word	0x40011c00
 800deb0:	4002001c 	.word	0x4002001c
 800deb4:	40020044 	.word	0x40020044
 800deb8:	40020080 	.word	0x40020080
 800debc:	40020408 	.word	0x40020408
 800dec0:	40020444 	.word	0x40020444
 800dec4:	40020458 	.word	0x40020458
 800dec8:	40020400 	.word	0x40020400
 800decc:	fff0ffff 	.word	0xfff0ffff
 800ded0:	40020000 	.word	0x40020000
 800ded4:	ffff0fff 	.word	0xffff0fff
 800ded8:	f0ffffff 	.word	0xf0ffffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800dedc:	4ab4      	ldr	r2, [pc, #720]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800dede:	23a8      	movs	r3, #168	; 0xa8
 800dee0:	58d4      	ldr	r4, [r2, r3]
 800dee2:	4db4      	ldr	r5, [pc, #720]	; (800e1b4 <RemapAndLinkDMAtoUARTTx+0x638>)
 800dee4:	402c      	ands	r4, r5
 800dee6:	50d4      	str	r4, [r2, r3]
 800dee8:	58d5      	ldr	r5, [r2, r3]
 800deea:	24b0      	movs	r4, #176	; 0xb0
 800deec:	0524      	lsls	r4, r4, #20
 800deee:	432c      	orrs	r4, r5
 800def0:	50d4      	str	r4, [r2, r3]
 800def2:	e69a      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800def4:	4ab0      	ldr	r2, [pc, #704]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800def6:	23a8      	movs	r3, #168	; 0xa8
 800def8:	58d4      	ldr	r4, [r2, r3]
 800defa:	250f      	movs	r5, #15
 800defc:	43ac      	bics	r4, r5
 800defe:	50d4      	str	r4, [r2, r3]
 800df00:	58d4      	ldr	r4, [r2, r3]
 800df02:	3d04      	subs	r5, #4
 800df04:	432c      	orrs	r4, r5
 800df06:	50d4      	str	r4, [r2, r3]
 800df08:	e68f      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800df0a:	4aab      	ldr	r2, [pc, #684]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800df0c:	23a8      	movs	r3, #168	; 0xa8
 800df0e:	58d4      	ldr	r4, [r2, r3]
 800df10:	4daa      	ldr	r5, [pc, #680]	; (800e1bc <RemapAndLinkDMAtoUARTTx+0x640>)
 800df12:	402c      	ands	r4, r5
 800df14:	50d4      	str	r4, [r2, r3]
 800df16:	58d5      	ldr	r5, [r2, r3]
 800df18:	24b0      	movs	r4, #176	; 0xb0
 800df1a:	0224      	lsls	r4, r4, #8
 800df1c:	432c      	orrs	r4, r5
 800df1e:	50d4      	str	r4, [r2, r3]
 800df20:	e683      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800df22:	680b      	ldr	r3, [r1, #0]
 800df24:	4aa6      	ldr	r2, [pc, #664]	; (800e1c0 <RemapAndLinkDMAtoUARTTx+0x644>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d01b      	beq.n	800df62 <RemapAndLinkDMAtoUARTTx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800df2a:	4aa6      	ldr	r2, [pc, #664]	; (800e1c4 <RemapAndLinkDMAtoUARTTx+0x648>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d023      	beq.n	800df78 <RemapAndLinkDMAtoUARTTx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800df30:	4aa5      	ldr	r2, [pc, #660]	; (800e1c8 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d02c      	beq.n	800df90 <RemapAndLinkDMAtoUARTTx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800df36:	4aa5      	ldr	r2, [pc, #660]	; (800e1cc <RemapAndLinkDMAtoUARTTx+0x650>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d035      	beq.n	800dfa8 <RemapAndLinkDMAtoUARTTx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800df3c:	4aa4      	ldr	r2, [pc, #656]	; (800e1d0 <RemapAndLinkDMAtoUARTTx+0x654>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d03d      	beq.n	800dfbe <RemapAndLinkDMAtoUARTTx+0x442>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800df42:	4aa4      	ldr	r2, [pc, #656]	; (800e1d4 <RemapAndLinkDMAtoUARTTx+0x658>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d000      	beq.n	800df4a <RemapAndLinkDMAtoUARTTx+0x3ce>
 800df48:	e66f      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800df4a:	4a9b      	ldr	r2, [pc, #620]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800df4c:	23a8      	movs	r3, #168	; 0xa8
 800df4e:	58d4      	ldr	r4, [r2, r3]
 800df50:	4da1      	ldr	r5, [pc, #644]	; (800e1d8 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800df52:	402c      	ands	r4, r5
 800df54:	50d4      	str	r4, [r2, r3]
 800df56:	58d5      	ldr	r5, [r2, r3]
 800df58:	24c0      	movs	r4, #192	; 0xc0
 800df5a:	0324      	lsls	r4, r4, #12
 800df5c:	432c      	orrs	r4, r5
 800df5e:	50d4      	str	r4, [r2, r3]
 800df60:	e663      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800df62:	4a93      	ldr	r2, [pc, #588]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800df64:	23a8      	movs	r3, #168	; 0xa8
 800df66:	58d4      	ldr	r4, [r2, r3]
 800df68:	25f0      	movs	r5, #240	; 0xf0
 800df6a:	43ac      	bics	r4, r5
 800df6c:	50d4      	str	r4, [r2, r3]
 800df6e:	58d4      	ldr	r4, [r2, r3]
 800df70:	3d30      	subs	r5, #48	; 0x30
 800df72:	432c      	orrs	r4, r5
 800df74:	50d4      	str	r4, [r2, r3]
 800df76:	e658      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800df78:	4a8d      	ldr	r2, [pc, #564]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800df7a:	23a8      	movs	r3, #168	; 0xa8
 800df7c:	58d4      	ldr	r4, [r2, r3]
 800df7e:	4d8f      	ldr	r5, [pc, #572]	; (800e1bc <RemapAndLinkDMAtoUARTTx+0x640>)
 800df80:	402c      	ands	r4, r5
 800df82:	50d4      	str	r4, [r2, r3]
 800df84:	58d5      	ldr	r5, [r2, r3]
 800df86:	24c0      	movs	r4, #192	; 0xc0
 800df88:	0224      	lsls	r4, r4, #8
 800df8a:	432c      	orrs	r4, r5
 800df8c:	50d4      	str	r4, [r2, r3]
 800df8e:	e64c      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800df90:	4a87      	ldr	r2, [pc, #540]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800df92:	23a8      	movs	r3, #168	; 0xa8
 800df94:	58d4      	ldr	r4, [r2, r3]
 800df96:	4d87      	ldr	r5, [pc, #540]	; (800e1b4 <RemapAndLinkDMAtoUARTTx+0x638>)
 800df98:	402c      	ands	r4, r5
 800df9a:	50d4      	str	r4, [r2, r3]
 800df9c:	58d5      	ldr	r5, [r2, r3]
 800df9e:	24c0      	movs	r4, #192	; 0xc0
 800dfa0:	0524      	lsls	r4, r4, #20
 800dfa2:	432c      	orrs	r4, r5
 800dfa4:	50d4      	str	r4, [r2, r3]
 800dfa6:	e640      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800dfa8:	4a83      	ldr	r2, [pc, #524]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800dfaa:	23a8      	movs	r3, #168	; 0xa8
 800dfac:	58d4      	ldr	r4, [r2, r3]
 800dfae:	250f      	movs	r5, #15
 800dfb0:	43ac      	bics	r4, r5
 800dfb2:	50d4      	str	r4, [r2, r3]
 800dfb4:	58d4      	ldr	r4, [r2, r3]
 800dfb6:	3d03      	subs	r5, #3
 800dfb8:	432c      	orrs	r4, r5
 800dfba:	50d4      	str	r4, [r2, r3]
 800dfbc:	e635      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800dfbe:	4a7e      	ldr	r2, [pc, #504]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800dfc0:	23a8      	movs	r3, #168	; 0xa8
 800dfc2:	58d4      	ldr	r4, [r2, r3]
 800dfc4:	4d7d      	ldr	r5, [pc, #500]	; (800e1bc <RemapAndLinkDMAtoUARTTx+0x640>)
 800dfc6:	402c      	ands	r4, r5
 800dfc8:	50d4      	str	r4, [r2, r3]
 800dfca:	58d5      	ldr	r5, [r2, r3]
 800dfcc:	24c0      	movs	r4, #192	; 0xc0
 800dfce:	0224      	lsls	r4, r4, #8
 800dfd0:	432c      	orrs	r4, r5
 800dfd2:	50d4      	str	r4, [r2, r3]
 800dfd4:	e629      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800dfd6:	680b      	ldr	r3, [r1, #0]
 800dfd8:	4a79      	ldr	r2, [pc, #484]	; (800e1c0 <RemapAndLinkDMAtoUARTTx+0x644>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d01b      	beq.n	800e016 <RemapAndLinkDMAtoUARTTx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800dfde:	4a79      	ldr	r2, [pc, #484]	; (800e1c4 <RemapAndLinkDMAtoUARTTx+0x648>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d023      	beq.n	800e02c <RemapAndLinkDMAtoUARTTx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800dfe4:	4a78      	ldr	r2, [pc, #480]	; (800e1c8 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d02c      	beq.n	800e044 <RemapAndLinkDMAtoUARTTx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800dfea:	4a78      	ldr	r2, [pc, #480]	; (800e1cc <RemapAndLinkDMAtoUARTTx+0x650>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d035      	beq.n	800e05c <RemapAndLinkDMAtoUARTTx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800dff0:	4a77      	ldr	r2, [pc, #476]	; (800e1d0 <RemapAndLinkDMAtoUARTTx+0x654>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d03d      	beq.n	800e072 <RemapAndLinkDMAtoUARTTx+0x4f6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800dff6:	4a77      	ldr	r2, [pc, #476]	; (800e1d4 <RemapAndLinkDMAtoUARTTx+0x658>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d000      	beq.n	800dffe <RemapAndLinkDMAtoUARTTx+0x482>
 800dffc:	e615      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800dffe:	4a6e      	ldr	r2, [pc, #440]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800e000:	23a8      	movs	r3, #168	; 0xa8
 800e002:	58d4      	ldr	r4, [r2, r3]
 800e004:	4d74      	ldr	r5, [pc, #464]	; (800e1d8 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800e006:	402c      	ands	r4, r5
 800e008:	50d4      	str	r4, [r2, r3]
 800e00a:	58d5      	ldr	r5, [r2, r3]
 800e00c:	24d0      	movs	r4, #208	; 0xd0
 800e00e:	0324      	lsls	r4, r4, #12
 800e010:	432c      	orrs	r4, r5
 800e012:	50d4      	str	r4, [r2, r3]
 800e014:	e609      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800e016:	4a66      	ldr	r2, [pc, #408]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800e018:	23a8      	movs	r3, #168	; 0xa8
 800e01a:	58d4      	ldr	r4, [r2, r3]
 800e01c:	25f0      	movs	r5, #240	; 0xf0
 800e01e:	43ac      	bics	r4, r5
 800e020:	50d4      	str	r4, [r2, r3]
 800e022:	58d4      	ldr	r4, [r2, r3]
 800e024:	3d20      	subs	r5, #32
 800e026:	432c      	orrs	r4, r5
 800e028:	50d4      	str	r4, [r2, r3]
 800e02a:	e5fe      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800e02c:	4a60      	ldr	r2, [pc, #384]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800e02e:	23a8      	movs	r3, #168	; 0xa8
 800e030:	58d4      	ldr	r4, [r2, r3]
 800e032:	4d62      	ldr	r5, [pc, #392]	; (800e1bc <RemapAndLinkDMAtoUARTTx+0x640>)
 800e034:	402c      	ands	r4, r5
 800e036:	50d4      	str	r4, [r2, r3]
 800e038:	58d5      	ldr	r5, [r2, r3]
 800e03a:	24d0      	movs	r4, #208	; 0xd0
 800e03c:	0224      	lsls	r4, r4, #8
 800e03e:	432c      	orrs	r4, r5
 800e040:	50d4      	str	r4, [r2, r3]
 800e042:	e5f2      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800e044:	4a5a      	ldr	r2, [pc, #360]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800e046:	23a8      	movs	r3, #168	; 0xa8
 800e048:	58d4      	ldr	r4, [r2, r3]
 800e04a:	4d5a      	ldr	r5, [pc, #360]	; (800e1b4 <RemapAndLinkDMAtoUARTTx+0x638>)
 800e04c:	402c      	ands	r4, r5
 800e04e:	50d4      	str	r4, [r2, r3]
 800e050:	58d5      	ldr	r5, [r2, r3]
 800e052:	24d0      	movs	r4, #208	; 0xd0
 800e054:	0524      	lsls	r4, r4, #20
 800e056:	432c      	orrs	r4, r5
 800e058:	50d4      	str	r4, [r2, r3]
 800e05a:	e5e6      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800e05c:	4a56      	ldr	r2, [pc, #344]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800e05e:	23a8      	movs	r3, #168	; 0xa8
 800e060:	58d4      	ldr	r4, [r2, r3]
 800e062:	250f      	movs	r5, #15
 800e064:	43ac      	bics	r4, r5
 800e066:	50d4      	str	r4, [r2, r3]
 800e068:	58d4      	ldr	r4, [r2, r3]
 800e06a:	3d02      	subs	r5, #2
 800e06c:	432c      	orrs	r4, r5
 800e06e:	50d4      	str	r4, [r2, r3]
 800e070:	e5db      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800e072:	4a51      	ldr	r2, [pc, #324]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800e074:	23a8      	movs	r3, #168	; 0xa8
 800e076:	58d4      	ldr	r4, [r2, r3]
 800e078:	4d50      	ldr	r5, [pc, #320]	; (800e1bc <RemapAndLinkDMAtoUARTTx+0x640>)
 800e07a:	402c      	ands	r4, r5
 800e07c:	50d4      	str	r4, [r2, r3]
 800e07e:	58d5      	ldr	r5, [r2, r3]
 800e080:	24d0      	movs	r4, #208	; 0xd0
 800e082:	0224      	lsls	r4, r4, #8
 800e084:	432c      	orrs	r4, r5
 800e086:	50d4      	str	r4, [r2, r3]
 800e088:	e5cf      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800e08a:	680b      	ldr	r3, [r1, #0]
 800e08c:	4a4c      	ldr	r2, [pc, #304]	; (800e1c0 <RemapAndLinkDMAtoUARTTx+0x644>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d01b      	beq.n	800e0ca <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800e092:	4a4c      	ldr	r2, [pc, #304]	; (800e1c4 <RemapAndLinkDMAtoUARTTx+0x648>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d023      	beq.n	800e0e0 <RemapAndLinkDMAtoUARTTx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800e098:	4a4b      	ldr	r2, [pc, #300]	; (800e1c8 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d02c      	beq.n	800e0f8 <RemapAndLinkDMAtoUARTTx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800e09e:	4a4b      	ldr	r2, [pc, #300]	; (800e1cc <RemapAndLinkDMAtoUARTTx+0x650>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d035      	beq.n	800e110 <RemapAndLinkDMAtoUARTTx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800e0a4:	4a4a      	ldr	r2, [pc, #296]	; (800e1d0 <RemapAndLinkDMAtoUARTTx+0x654>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d03d      	beq.n	800e126 <RemapAndLinkDMAtoUARTTx+0x5aa>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800e0aa:	4a4a      	ldr	r2, [pc, #296]	; (800e1d4 <RemapAndLinkDMAtoUARTTx+0x658>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d000      	beq.n	800e0b2 <RemapAndLinkDMAtoUARTTx+0x536>
 800e0b0:	e5bb      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800e0b2:	4a41      	ldr	r2, [pc, #260]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800e0b4:	23a8      	movs	r3, #168	; 0xa8
 800e0b6:	58d4      	ldr	r4, [r2, r3]
 800e0b8:	4d47      	ldr	r5, [pc, #284]	; (800e1d8 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800e0ba:	402c      	ands	r4, r5
 800e0bc:	50d4      	str	r4, [r2, r3]
 800e0be:	58d5      	ldr	r5, [r2, r3]
 800e0c0:	24e0      	movs	r4, #224	; 0xe0
 800e0c2:	0324      	lsls	r4, r4, #12
 800e0c4:	432c      	orrs	r4, r5
 800e0c6:	50d4      	str	r4, [r2, r3]
 800e0c8:	e5af      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800e0ca:	4a39      	ldr	r2, [pc, #228]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800e0cc:	23a8      	movs	r3, #168	; 0xa8
 800e0ce:	58d4      	ldr	r4, [r2, r3]
 800e0d0:	25f0      	movs	r5, #240	; 0xf0
 800e0d2:	43ac      	bics	r4, r5
 800e0d4:	50d4      	str	r4, [r2, r3]
 800e0d6:	58d4      	ldr	r4, [r2, r3]
 800e0d8:	3d10      	subs	r5, #16
 800e0da:	432c      	orrs	r4, r5
 800e0dc:	50d4      	str	r4, [r2, r3]
 800e0de:	e5a4      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800e0e0:	4a33      	ldr	r2, [pc, #204]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800e0e2:	23a8      	movs	r3, #168	; 0xa8
 800e0e4:	58d4      	ldr	r4, [r2, r3]
 800e0e6:	4d35      	ldr	r5, [pc, #212]	; (800e1bc <RemapAndLinkDMAtoUARTTx+0x640>)
 800e0e8:	402c      	ands	r4, r5
 800e0ea:	50d4      	str	r4, [r2, r3]
 800e0ec:	58d5      	ldr	r5, [r2, r3]
 800e0ee:	24e0      	movs	r4, #224	; 0xe0
 800e0f0:	0224      	lsls	r4, r4, #8
 800e0f2:	432c      	orrs	r4, r5
 800e0f4:	50d4      	str	r4, [r2, r3]
 800e0f6:	e598      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800e0f8:	4a2d      	ldr	r2, [pc, #180]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800e0fa:	23a8      	movs	r3, #168	; 0xa8
 800e0fc:	58d4      	ldr	r4, [r2, r3]
 800e0fe:	4d2d      	ldr	r5, [pc, #180]	; (800e1b4 <RemapAndLinkDMAtoUARTTx+0x638>)
 800e100:	402c      	ands	r4, r5
 800e102:	50d4      	str	r4, [r2, r3]
 800e104:	58d5      	ldr	r5, [r2, r3]
 800e106:	24e0      	movs	r4, #224	; 0xe0
 800e108:	0524      	lsls	r4, r4, #20
 800e10a:	432c      	orrs	r4, r5
 800e10c:	50d4      	str	r4, [r2, r3]
 800e10e:	e58c      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800e110:	4a29      	ldr	r2, [pc, #164]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800e112:	23a8      	movs	r3, #168	; 0xa8
 800e114:	58d4      	ldr	r4, [r2, r3]
 800e116:	250f      	movs	r5, #15
 800e118:	43ac      	bics	r4, r5
 800e11a:	50d4      	str	r4, [r2, r3]
 800e11c:	58d4      	ldr	r4, [r2, r3]
 800e11e:	3d01      	subs	r5, #1
 800e120:	432c      	orrs	r4, r5
 800e122:	50d4      	str	r4, [r2, r3]
 800e124:	e581      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800e126:	4a24      	ldr	r2, [pc, #144]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800e128:	23a8      	movs	r3, #168	; 0xa8
 800e12a:	58d4      	ldr	r4, [r2, r3]
 800e12c:	4d23      	ldr	r5, [pc, #140]	; (800e1bc <RemapAndLinkDMAtoUARTTx+0x640>)
 800e12e:	402c      	ands	r4, r5
 800e130:	50d4      	str	r4, [r2, r3]
 800e132:	58d5      	ldr	r5, [r2, r3]
 800e134:	24e0      	movs	r4, #224	; 0xe0
 800e136:	0224      	lsls	r4, r4, #8
 800e138:	432c      	orrs	r4, r5
 800e13a:	50d4      	str	r4, [r2, r3]
 800e13c:	e575      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800e13e:	4a1c      	ldr	r2, [pc, #112]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800e140:	23a8      	movs	r3, #168	; 0xa8
 800e142:	58d5      	ldr	r5, [r2, r3]
 800e144:	26f0      	movs	r6, #240	; 0xf0
 800e146:	43b5      	bics	r5, r6
 800e148:	50d5      	str	r5, [r2, r3]
 800e14a:	58d4      	ldr	r4, [r2, r3]
 800e14c:	4334      	orrs	r4, r6
 800e14e:	50d4      	str	r4, [r2, r3]
 800e150:	e56b      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800e152:	4a17      	ldr	r2, [pc, #92]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800e154:	23a8      	movs	r3, #168	; 0xa8
 800e156:	58d4      	ldr	r4, [r2, r3]
 800e158:	4d18      	ldr	r5, [pc, #96]	; (800e1bc <RemapAndLinkDMAtoUARTTx+0x640>)
 800e15a:	402c      	ands	r4, r5
 800e15c:	50d4      	str	r4, [r2, r3]
 800e15e:	58d5      	ldr	r5, [r2, r3]
 800e160:	24f0      	movs	r4, #240	; 0xf0
 800e162:	0224      	lsls	r4, r4, #8
 800e164:	432c      	orrs	r4, r5
 800e166:	50d4      	str	r4, [r2, r3]
 800e168:	e55f      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800e16a:	4a11      	ldr	r2, [pc, #68]	; (800e1b0 <RemapAndLinkDMAtoUARTTx+0x634>)
 800e16c:	23a8      	movs	r3, #168	; 0xa8
 800e16e:	58d4      	ldr	r4, [r2, r3]
 800e170:	4d10      	ldr	r5, [pc, #64]	; (800e1b4 <RemapAndLinkDMAtoUARTTx+0x638>)
 800e172:	402c      	ands	r4, r5
 800e174:	50d4      	str	r4, [r2, r3]
 800e176:	58d5      	ldr	r5, [r2, r3]
 800e178:	24f0      	movs	r4, #240	; 0xf0
 800e17a:	0524      	lsls	r4, r4, #20
 800e17c:	432c      	orrs	r4, r5
 800e17e:	50d4      	str	r4, [r2, r3]
 800e180:	e553      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800e182:	4a0d      	ldr	r2, [pc, #52]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800e184:	23a8      	movs	r3, #168	; 0xa8
 800e186:	58d5      	ldr	r5, [r2, r3]
 800e188:	260f      	movs	r6, #15
 800e18a:	43b5      	bics	r5, r6
 800e18c:	50d5      	str	r5, [r2, r3]
 800e18e:	58d4      	ldr	r4, [r2, r3]
 800e190:	4334      	orrs	r4, r6
 800e192:	50d4      	str	r4, [r2, r3]
 800e194:	e549      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800e196:	4a08      	ldr	r2, [pc, #32]	; (800e1b8 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800e198:	23a8      	movs	r3, #168	; 0xa8
 800e19a:	58d4      	ldr	r4, [r2, r3]
 800e19c:	4d07      	ldr	r5, [pc, #28]	; (800e1bc <RemapAndLinkDMAtoUARTTx+0x640>)
 800e19e:	402c      	ands	r4, r5
 800e1a0:	50d4      	str	r4, [r2, r3]
 800e1a2:	58d5      	ldr	r5, [r2, r3]
 800e1a4:	24f0      	movs	r4, #240	; 0xf0
 800e1a6:	0224      	lsls	r4, r4, #8
 800e1a8:	432c      	orrs	r4, r5
 800e1aa:	50d4      	str	r4, [r2, r3]
 800e1ac:	e53d      	b.n	800dc2a <RemapAndLinkDMAtoUARTTx+0xae>
 800e1ae:	46c0      	nop			; (mov r8, r8)
 800e1b0:	40020000 	.word	0x40020000
 800e1b4:	f0ffffff 	.word	0xf0ffffff
 800e1b8:	40020400 	.word	0x40020400
 800e1bc:	ffff0fff 	.word	0xffff0fff
 800e1c0:	4002001c 	.word	0x4002001c
 800e1c4:	40020044 	.word	0x40020044
 800e1c8:	40020080 	.word	0x40020080
 800e1cc:	40020408 	.word	0x40020408
 800e1d0:	40020444 	.word	0x40020444
 800e1d4:	40020458 	.word	0x40020458
 800e1d8:	fff0ffff 	.word	0xfff0ffff

0800e1dc <DMA_MSG_TX_Setup>:
{	
 800e1dc:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800e1de:	4b0d      	ldr	r3, [pc, #52]	; (800e214 <DMA_MSG_TX_Setup+0x38>)
 800e1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d012      	beq.n	800e20c <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800e1e6:	4b0b      	ldr	r3, [pc, #44]	; (800e214 <DMA_MSG_TX_Setup+0x38>)
 800e1e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d010      	beq.n	800e210 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800e1ee:	4a09      	ldr	r2, [pc, #36]	; (800e214 <DMA_MSG_TX_Setup+0x38>)
 800e1f0:	2394      	movs	r3, #148	; 0x94
 800e1f2:	58d3      	ldr	r3, [r2, r3]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d007      	beq.n	800e208 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800e1f8:	0021      	movs	r1, r4
 800e1fa:	f7ff fcbf 	bl	800db7c <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800e1fe:	2100      	movs	r1, #0
 800e200:	0020      	movs	r0, r4
 800e202:	f7ff f853 	bl	800d2ac <SetupDMAInterrupts>
}
 800e206:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800e208:	4c03      	ldr	r4, [pc, #12]	; (800e218 <DMA_MSG_TX_Setup+0x3c>)
 800e20a:	e7f5      	b.n	800e1f8 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800e20c:	4c01      	ldr	r4, [pc, #4]	; (800e214 <DMA_MSG_TX_Setup+0x38>)
 800e20e:	e7f3      	b.n	800e1f8 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800e210:	4c02      	ldr	r4, [pc, #8]	; (800e21c <DMA_MSG_TX_Setup+0x40>)
 800e212:	e7f1      	b.n	800e1f8 <DMA_MSG_TX_Setup+0x1c>
 800e214:	20001c40 	.word	0x20001c40
 800e218:	20001cb0 	.word	0x20001cb0
 800e21c:	20001c78 	.word	0x20001c78

0800e220 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800e220:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800e222:	4807      	ldr	r0, [pc, #28]	; (800e240 <CRC_Init+0x20>)
 800e224:	4b07      	ldr	r3, [pc, #28]	; (800e244 <CRC_Init+0x24>)
 800e226:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800e228:	2310      	movs	r3, #16
 800e22a:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800e22c:	2300      	movs	r3, #0
 800e22e:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800e230:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    //CRC_INPUTDATA_INVERSION_NONE
 800e232:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    //CRC_OUTPUTDATA_INVERSION_DISABLE;
 800e234:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800e236:	3303      	adds	r3, #3
 800e238:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800e23a:	f003 f87f 	bl	801133c <HAL_CRC_Init>
}
 800e23e:	bd10      	pop	{r4, pc}
 800e240:	200070a8 	.word	0x200070a8
 800e244:	40023000 	.word	0x40023000

0800e248 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800e248:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800e24a:	4a05      	ldr	r2, [pc, #20]	; (800e260 <HAL_CRC_MspInit+0x18>)
 800e24c:	6951      	ldr	r1, [r2, #20]
 800e24e:	2340      	movs	r3, #64	; 0x40
 800e250:	4319      	orrs	r1, r3
 800e252:	6151      	str	r1, [r2, #20]
 800e254:	6952      	ldr	r2, [r2, #20]
 800e256:	4013      	ands	r3, r2
 800e258:	9301      	str	r3, [sp, #4]
 800e25a:	9b01      	ldr	r3, [sp, #4]
}
 800e25c:	b002      	add	sp, #8
 800e25e:	4770      	bx	lr
 800e260:	40021000 	.word	0x40021000

0800e264 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800e264:	b570      	push	{r4, r5, r6, lr}
 800e266:	0004      	movs	r4, r0
 800e268:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d015      	beq.n	800e29a <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800e26e:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800e270:	2900      	cmp	r1, #0
 800e272:	d100      	bne.n	800e276 <CalculateCRC8+0x12>
}
 800e274:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800e276:	088e      	lsrs	r6, r1, #2
 800e278:	0032      	movs	r2, r6
 800e27a:	0021      	movs	r1, r4
 800e27c:	4808      	ldr	r0, [pc, #32]	; (800e2a0 <CalculateCRC8+0x3c>)
 800e27e:	f003 f8b9 	bl	80113f4 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800e282:	07ab      	lsls	r3, r5, #30
 800e284:	d101      	bne.n	800e28a <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800e286:	b2c0      	uxtb	r0, r0
 800e288:	e7f4      	b.n	800e274 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800e28a:	0131      	lsls	r1, r6, #4
 800e28c:	1861      	adds	r1, r4, r1
 800e28e:	2201      	movs	r2, #1
 800e290:	4803      	ldr	r0, [pc, #12]	; (800e2a0 <CalculateCRC8+0x3c>)
 800e292:	f003 f884 	bl	801139e <HAL_CRC_Accumulate>
 800e296:	b2c0      	uxtb	r0, r0
 800e298:	e7ec      	b.n	800e274 <CalculateCRC8+0x10>
	return 0;
 800e29a:	2000      	movs	r0, #0
 800e29c:	e7ea      	b.n	800e274 <CalculateCRC8+0x10>
 800e29e:	46c0      	nop			; (mov r8, r8)
 800e2a0:	200070a8 	.word	0x200070a8

0800e2a4 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800e2a4:	b500      	push	{lr}
 800e2a6:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800e2a8:	2380      	movs	r3, #128	; 0x80
 800e2aa:	011b      	lsls	r3, r3, #4
 800e2ac:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e2b6:	3303      	adds	r3, #3
 800e2b8:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800e2ba:	2090      	movs	r0, #144	; 0x90
 800e2bc:	a901      	add	r1, sp, #4
 800e2be:	05c0      	lsls	r0, r0, #23
 800e2c0:	f003 ff3c 	bl	801213c <HAL_GPIO_Init>
}
 800e2c4:	b007      	add	sp, #28
 800e2c6:	bd00      	pop	{pc}

0800e2c8 <GPIO_Init>:
{
 800e2c8:	b500      	push	{lr}
 800e2ca:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800e2cc:	4b18      	ldr	r3, [pc, #96]	; (800e330 <GPIO_Init+0x68>)
 800e2ce:	6959      	ldr	r1, [r3, #20]
 800e2d0:	2080      	movs	r0, #128	; 0x80
 800e2d2:	0300      	lsls	r0, r0, #12
 800e2d4:	4301      	orrs	r1, r0
 800e2d6:	6159      	str	r1, [r3, #20]
 800e2d8:	695a      	ldr	r2, [r3, #20]
 800e2da:	4002      	ands	r2, r0
 800e2dc:	9201      	str	r2, [sp, #4]
 800e2de:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800e2e0:	6959      	ldr	r1, [r3, #20]
 800e2e2:	2080      	movs	r0, #128	; 0x80
 800e2e4:	0280      	lsls	r0, r0, #10
 800e2e6:	4301      	orrs	r1, r0
 800e2e8:	6159      	str	r1, [r3, #20]
 800e2ea:	695a      	ldr	r2, [r3, #20]
 800e2ec:	4002      	ands	r2, r0
 800e2ee:	9202      	str	r2, [sp, #8]
 800e2f0:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800e2f2:	6959      	ldr	r1, [r3, #20]
 800e2f4:	2080      	movs	r0, #128	; 0x80
 800e2f6:	0340      	lsls	r0, r0, #13
 800e2f8:	4301      	orrs	r1, r0
 800e2fa:	6159      	str	r1, [r3, #20]
 800e2fc:	695a      	ldr	r2, [r3, #20]
 800e2fe:	4002      	ands	r2, r0
 800e300:	9203      	str	r2, [sp, #12]
 800e302:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800e304:	6959      	ldr	r1, [r3, #20]
 800e306:	2080      	movs	r0, #128	; 0x80
 800e308:	02c0      	lsls	r0, r0, #11
 800e30a:	4301      	orrs	r1, r0
 800e30c:	6159      	str	r1, [r3, #20]
 800e30e:	695a      	ldr	r2, [r3, #20]
 800e310:	4002      	ands	r2, r0
 800e312:	9204      	str	r2, [sp, #16]
 800e314:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800e316:	695a      	ldr	r2, [r3, #20]
 800e318:	2180      	movs	r1, #128	; 0x80
 800e31a:	03c9      	lsls	r1, r1, #15
 800e31c:	430a      	orrs	r2, r1
 800e31e:	615a      	str	r2, [r3, #20]
 800e320:	695b      	ldr	r3, [r3, #20]
 800e322:	400b      	ands	r3, r1
 800e324:	9305      	str	r3, [sp, #20]
 800e326:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800e328:	f7ff ffbc 	bl	800e2a4 <IND_LED_Init>
}
 800e32c:	b007      	add	sp, #28
 800e32e:	bd00      	pop	{pc}
 800e330:	40021000 	.word	0x40021000

0800e334 <HX711_GPIO_Init>:

//-- Configure indicator LED
void HX711_GPIO_Init(void)
{
 800e334:	b530      	push	{r4, r5, lr}
 800e336:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800e338:	2390      	movs	r3, #144	; 0x90
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e33e:	2301      	movs	r3, #1
 800e340:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e342:	2500      	movs	r5, #0
 800e344:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e346:	3302      	adds	r3, #2
 800e348:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e34a:	2490      	movs	r4, #144	; 0x90
 800e34c:	05e4      	lsls	r4, r4, #23
 800e34e:	a901      	add	r1, sp, #4
 800e350:	0020      	movs	r0, r4
 800e352:	f003 fef3 	bl	801213c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e356:	2380      	movs	r3, #128	; 0x80
 800e358:	00db      	lsls	r3, r3, #3
 800e35a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e35c:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);	
 800e35e:	a901      	add	r1, sp, #4
 800e360:	0020      	movs	r0, r4
 800e362:	f003 feeb 	bl	801213c <HAL_GPIO_Init>
}
 800e366:	b007      	add	sp, #28
 800e368:	bd30      	pop	{r4, r5, pc}
	...

0800e36c <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800e36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e36e:	000e      	movs	r6, r1
 800e370:	0015      	movs	r5, r2
 800e372:	001f      	movs	r7, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800e374:	f000 fd30 	bl	800edd8 <GetUart>
 800e378:	0004      	movs	r4, r0
	
	if (huart == &huart1) 
 800e37a:	4a26      	ldr	r2, [pc, #152]	; (800e414 <GetPortGPIOs+0xa8>)
 800e37c:	4290      	cmp	r0, r2
 800e37e:	d046      	beq.n	800e40e <GetPortGPIOs+0xa2>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800e380:	4b25      	ldr	r3, [pc, #148]	; (800e418 <GetPortGPIOs+0xac>)
 800e382:	4298      	cmp	r0, r3
 800e384:	d017      	beq.n	800e3b6 <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800e386:	4b25      	ldr	r3, [pc, #148]	; (800e41c <GetPortGPIOs+0xb0>)
 800e388:	4298      	cmp	r0, r3
 800e38a:	d01f      	beq.n	800e3cc <GetPortGPIOs+0x60>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800e38c:	4b24      	ldr	r3, [pc, #144]	; (800e420 <GetPortGPIOs+0xb4>)
 800e38e:	4298      	cmp	r0, r3
 800e390:	d028      	beq.n	800e3e4 <GetPortGPIOs+0x78>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800e392:	4b24      	ldr	r3, [pc, #144]	; (800e424 <GetPortGPIOs+0xb8>)
 800e394:	4298      	cmp	r0, r3
 800e396:	d030      	beq.n	800e3fa <GetPortGPIOs+0x8e>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800e398:	4b23      	ldr	r3, [pc, #140]	; (800e428 <GetPortGPIOs+0xbc>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800e39a:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800e39c:	429c      	cmp	r4, r3
 800e39e:	d137      	bne.n	800e410 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800e3a0:	2390      	movs	r3, #144	; 0x90
 800e3a2:	05db      	lsls	r3, r3, #23
 800e3a4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800e3a6:	2210      	movs	r2, #16
 800e3a8:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800e3aa:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART6_RX_PIN;
 800e3ac:	2320      	movs	r3, #32
 800e3ae:	9a06      	ldr	r2, [sp, #24]
 800e3b0:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800e3b2:	2000      	movs	r0, #0
 800e3b4:	e02c      	b.n	800e410 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800e3b6:	2390      	movs	r3, #144	; 0x90
 800e3b8:	05db      	lsls	r3, r3, #23
 800e3ba:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800e3bc:	2204      	movs	r2, #4
 800e3be:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800e3c0:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART2_RX_PIN;
 800e3c2:	2308      	movs	r3, #8
 800e3c4:	9a06      	ldr	r2, [sp, #24]
 800e3c6:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800e3c8:	2000      	movs	r0, #0
 800e3ca:	e021      	b.n	800e410 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800e3cc:	4b17      	ldr	r3, [pc, #92]	; (800e42c <GetPortGPIOs+0xc0>)
 800e3ce:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800e3d0:	2280      	movs	r2, #128	; 0x80
 800e3d2:	00d2      	lsls	r2, r2, #3
 800e3d4:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800e3d6:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART3_RX_PIN;
 800e3d8:	2380      	movs	r3, #128	; 0x80
 800e3da:	011b      	lsls	r3, r3, #4
 800e3dc:	9a06      	ldr	r2, [sp, #24]
 800e3de:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	e015      	b.n	800e410 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800e3e4:	2390      	movs	r3, #144	; 0x90
 800e3e6:	05db      	lsls	r3, r3, #23
 800e3e8:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800e3ee:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART4_RX_PIN;
 800e3f0:	2302      	movs	r3, #2
 800e3f2:	9a06      	ldr	r2, [sp, #24]
 800e3f4:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	e00a      	b.n	800e410 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800e3fa:	4b0c      	ldr	r3, [pc, #48]	; (800e42c <GetPortGPIOs+0xc0>)
 800e3fc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800e3fe:	2208      	movs	r2, #8
 800e400:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800e402:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART5_RX_PIN;
 800e404:	2310      	movs	r3, #16
 800e406:	9a06      	ldr	r2, [sp, #24]
 800e408:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800e40a:	2000      	movs	r0, #0
 800e40c:	e000      	b.n	800e410 <GetPortGPIOs+0xa4>
 800e40e:	2000      	movs	r0, #0
	
	return result;	
}
 800e410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e412:	46c0      	nop			; (mov r8, r8)
 800e414:	20006ed8 	.word	0x20006ed8
 800e418:	20007030 	.word	0x20007030
 800e41c:	20006df0 	.word	0x20006df0
 800e420:	20006fbc 	.word	0x20006fbc
 800e424:	20006e64 	.word	0x20006e64
 800e428:	20006f4c 	.word	0x20006f4c
 800e42c:	48000400 	.word	0x48000400

0800e430 <IsFactoryReset>:
{
 800e430:	b530      	push	{r4, r5, lr}
 800e432:	b093      	sub	sp, #76	; 0x4c
  __GPIOA_CLK_ENABLE();
 800e434:	4b39      	ldr	r3, [pc, #228]	; (800e51c <IsFactoryReset+0xec>)
 800e436:	6959      	ldr	r1, [r3, #20]
 800e438:	2080      	movs	r0, #128	; 0x80
 800e43a:	0280      	lsls	r0, r0, #10
 800e43c:	4301      	orrs	r1, r0
 800e43e:	6159      	str	r1, [r3, #20]
 800e440:	695a      	ldr	r2, [r3, #20]
 800e442:	4002      	ands	r2, r0
 800e444:	9203      	str	r2, [sp, #12]
 800e446:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800e448:	6959      	ldr	r1, [r3, #20]
 800e44a:	2080      	movs	r0, #128	; 0x80
 800e44c:	02c0      	lsls	r0, r0, #11
 800e44e:	4301      	orrs	r1, r0
 800e450:	6159      	str	r1, [r3, #20]
 800e452:	695a      	ldr	r2, [r3, #20]
 800e454:	4002      	ands	r2, r0
 800e456:	9204      	str	r2, [sp, #16]
 800e458:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800e45a:	6959      	ldr	r1, [r3, #20]
 800e45c:	2080      	movs	r0, #128	; 0x80
 800e45e:	0300      	lsls	r0, r0, #12
 800e460:	4301      	orrs	r1, r0
 800e462:	6159      	str	r1, [r3, #20]
 800e464:	695a      	ldr	r2, [r3, #20]
 800e466:	4002      	ands	r2, r0
 800e468:	9205      	str	r2, [sp, #20]
 800e46a:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800e46c:	695a      	ldr	r2, [r3, #20]
 800e46e:	2180      	movs	r1, #128	; 0x80
 800e470:	0349      	lsls	r1, r1, #13
 800e472:	430a      	orrs	r2, r1
 800e474:	615a      	str	r2, [r3, #20]
 800e476:	695b      	ldr	r3, [r3, #20]
 800e478:	400b      	ands	r3, r1
 800e47a:	9306      	str	r3, [sp, #24]
 800e47c:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800e47e:	ab08      	add	r3, sp, #32
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	ab0b      	add	r3, sp, #44	; 0x2c
 800e484:	2222      	movs	r2, #34	; 0x22
 800e486:	446a      	add	r2, sp
 800e488:	a90c      	add	r1, sp, #48	; 0x30
 800e48a:	2001      	movs	r0, #1
 800e48c:	f7ff ff6e 	bl	800e36c <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800e490:	ac07      	add	r4, sp, #28
 800e492:	9400      	str	r4, [sp, #0]
 800e494:	ab09      	add	r3, sp, #36	; 0x24
 800e496:	221e      	movs	r2, #30
 800e498:	446a      	add	r2, sp
 800e49a:	a90a      	add	r1, sp, #40	; 0x28
 800e49c:	2005      	movs	r0, #5
 800e49e:	f7ff ff65 	bl	800e36c <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4a6:	2500      	movs	r5, #0
 800e4a8:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800e4aa:	466b      	mov	r3, sp
 800e4ac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e4ae:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800e4b0:	a90d      	add	r1, sp, #52	; 0x34
 800e4b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e4b4:	f003 fe42 	bl	801213c <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e4b8:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800e4ba:	2302      	movs	r3, #2
 800e4bc:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800e4be:	8823      	ldrh	r3, [r4, #0]
 800e4c0:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800e4c2:	a90d      	add	r1, sp, #52	; 0x34
 800e4c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4c6:	f003 fe39 	bl	801213c <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800e4ca:	466b      	mov	r3, sp
 800e4cc:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e4d2:	f003 ff23 	bl	801231c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800e4d6:	2005      	movs	r0, #5
 800e4d8:	f000 fade 	bl	800ea98 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800e4dc:	8821      	ldrh	r1, [r4, #0]
 800e4de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4e0:	f003 ff16 	bl	8012310 <HAL_GPIO_ReadPin>
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	d006      	beq.n	800e4f6 <IsFactoryReset+0xc6>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800e4e8:	4b0d      	ldr	r3, [pc, #52]	; (800e520 <IsFactoryReset+0xf0>)
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	4252      	negs	r2, r2
 800e4ee:	601a      	str	r2, [r3, #0]
	return 0;
 800e4f0:	2000      	movs	r0, #0
}
 800e4f2:	b013      	add	sp, #76	; 0x4c
 800e4f4:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800e4f6:	2322      	movs	r3, #34	; 0x22
 800e4f8:	446b      	add	r3, sp
 800e4fa:	8819      	ldrh	r1, [r3, #0]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e500:	f003 ff0c 	bl	801231c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800e504:	2005      	movs	r0, #5
 800e506:	f000 fac7 	bl	800ea98 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800e50a:	ab07      	add	r3, sp, #28
 800e50c:	8819      	ldrh	r1, [r3, #0]
 800e50e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e510:	f003 fefe 	bl	8012310 <HAL_GPIO_ReadPin>
 800e514:	2801      	cmp	r0, #1
 800e516:	d1e7      	bne.n	800e4e8 <IsFactoryReset+0xb8>
 800e518:	e7eb      	b.n	800e4f2 <IsFactoryReset+0xc2>
 800e51a:	46c0      	nop			; (mov r8, r8)
 800e51c:	40021000 	.word	0x40021000
 800e520:	20007ff0 	.word	0x20007ff0

0800e524 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800e524:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800e526:	f002 fe09 	bl	801113c <HAL_IncTick>
  osSystickHandler();  
 800e52a:	f000 fe15 	bl	800f158 <osSystickHandler>

}
 800e52e:	bd10      	pop	{r4, pc}

0800e530 <HardFault_Handler>:
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
	/* Loop here */
	for(;;) {};  
 800e530:	e7fe      	b.n	800e530 <HardFault_Handler>

0800e532 <USART1_IRQHandler>:
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800e532:	4770      	bx	lr

0800e534 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800e534:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800e536:	4802      	ldr	r0, [pc, #8]	; (800e540 <USART2_IRQHandler+0xc>)
 800e538:	f005 fbf3 	bl	8013d22 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800e53c:	bd10      	pop	{r4, pc}
 800e53e:	46c0      	nop			; (mov r8, r8)
 800e540:	20007030 	.word	0x20007030

0800e544 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800e544:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800e546:	4806      	ldr	r0, [pc, #24]	; (800e560 <USART3_8_IRQHandler+0x1c>)
 800e548:	f005 fbeb 	bl	8013d22 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800e54c:	4805      	ldr	r0, [pc, #20]	; (800e564 <USART3_8_IRQHandler+0x20>)
 800e54e:	f005 fbe8 	bl	8013d22 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800e552:	4805      	ldr	r0, [pc, #20]	; (800e568 <USART3_8_IRQHandler+0x24>)
 800e554:	f005 fbe5 	bl	8013d22 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800e558:	4804      	ldr	r0, [pc, #16]	; (800e56c <USART3_8_IRQHandler+0x28>)
 800e55a:	f005 fbe2 	bl	8013d22 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800e55e:	bd10      	pop	{r4, pc}
 800e560:	20006df0 	.word	0x20006df0
 800e564:	20006fbc 	.word	0x20006fbc
 800e568:	20006e64 	.word	0x20006e64
 800e56c:	20006f4c 	.word	0x20006f4c

0800e570 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800e570:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800e572:	2001      	movs	r0, #1
 800e574:	f7f9 fb5c 	bl	8007c30 <DMA_IRQHandler>
	
}
 800e578:	bd10      	pop	{r4, pc}
	...

0800e57c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800e57c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800e57e:	4b0c      	ldr	r3, [pc, #48]	; (800e5b0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	06db      	lsls	r3, r3, #27
 800e584:	d40b      	bmi.n	800e59e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800e586:	4b0b      	ldr	r3, [pc, #44]	; (800e5b4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	05db      	lsls	r3, r3, #23
 800e58c:	d40b      	bmi.n	800e5a6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800e58e:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	06db      	lsls	r3, r3, #27
 800e594:	d506      	bpl.n	800e5a4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800e596:	4808      	ldr	r0, [pc, #32]	; (800e5b8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800e598:	f003 f828 	bl	80115ec <HAL_DMA_IRQHandler>
	}
}
 800e59c:	e002      	b.n	800e5a4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P5);
 800e59e:	2005      	movs	r0, #5
 800e5a0:	f7f9 fb46 	bl	8007c30 <DMA_IRQHandler>
}
 800e5a4:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800e5a6:	2002      	movs	r0, #2
 800e5a8:	f7f9 fb42 	bl	8007c30 <DMA_IRQHandler>
 800e5ac:	e7fa      	b.n	800e5a4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800e5ae:	46c0      	nop			; (mov r8, r8)
 800e5b0:	40020400 	.word	0x40020400
 800e5b4:	40020000 	.word	0x40020000
 800e5b8:	20001c40 	.word	0x20001c40

0800e5bc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800e5bc:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800e5be:	4b14      	ldr	r3, [pc, #80]	; (800e610 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	03db      	lsls	r3, r3, #15
 800e5c4:	d413      	bmi.n	800e5ee <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800e5c6:	4b12      	ldr	r3, [pc, #72]	; (800e610 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	02db      	lsls	r3, r3, #11
 800e5cc:	d413      	bmi.n	800e5f6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800e5ce:	4b11      	ldr	r3, [pc, #68]	; (800e614 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	05db      	lsls	r3, r3, #23
 800e5d4:	d413      	bmi.n	800e5fe <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800e5d6:	4b0e      	ldr	r3, [pc, #56]	; (800e610 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	04db      	lsls	r3, r3, #19
 800e5dc:	d413      	bmi.n	800e606 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800e5de:	4b0c      	ldr	r3, [pc, #48]	; (800e610 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	01db      	lsls	r3, r3, #7
 800e5e4:	d506      	bpl.n	800e5f4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800e5e6:	480c      	ldr	r0, [pc, #48]	; (800e618 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800e5e8:	f003 f800 	bl	80115ec <HAL_DMA_IRQHandler>
	}
}
 800e5ec:	e002      	b.n	800e5f4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800e5ee:	2003      	movs	r0, #3
 800e5f0:	f7f9 fb1e 	bl	8007c30 <DMA_IRQHandler>
}
 800e5f4:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800e5f6:	2004      	movs	r0, #4
 800e5f8:	f7f9 fb1a 	bl	8007c30 <DMA_IRQHandler>
 800e5fc:	e7fa      	b.n	800e5f4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800e5fe:	2006      	movs	r0, #6
 800e600:	f7f9 fb16 	bl	8007c30 <DMA_IRQHandler>
 800e604:	e7f6      	b.n	800e5f4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800e606:	4805      	ldr	r0, [pc, #20]	; (800e61c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800e608:	f002 fff0 	bl	80115ec <HAL_DMA_IRQHandler>
 800e60c:	e7f2      	b.n	800e5f4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800e60e:	46c0      	nop			; (mov r8, r8)
 800e610:	40020000 	.word	0x40020000
 800e614:	40020400 	.word	0x40020400
 800e618:	20001cb0 	.word	0x20001cb0
 800e61c:	20001c78 	.word	0x20001c78

0800e620 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e620:	b510      	push	{r4, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800e626:	2300      	movs	r3, #0
 800e628:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800e62a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d001      	beq.n	800e634 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800e630:	f7fe feec 	bl	800d40c <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800e634:	0020      	movs	r0, r4
 800e636:	f7fd fa1b 	bl	800ba70 <GetPort>
 800e63a:	0080      	lsls	r0, r0, #2
 800e63c:	4b03      	ldr	r3, [pc, #12]	; (800e64c <HAL_UART_TxCpltCallback+0x2c>)
 800e63e:	58c0      	ldr	r0, [r0, r3]
 800e640:	a901      	add	r1, sp, #4
 800e642:	f001 f923 	bl	800f88c <xQueueGiveFromISR>
}
 800e646:	b002      	add	sp, #8
 800e648:	bd10      	pop	{r4, pc}
 800e64a:	46c0      	nop			; (mov r8, r8)
 800e64c:	20006d98 	.word	0x20006d98

0800e650 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e650:	b510      	push	{r4, lr}
 800e652:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800e654:	2369      	movs	r3, #105	; 0x69
 800e656:	2201      	movs	r2, #1
 800e658:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800e65a:	f7fd fa09 	bl	800ba70 <GetPort>
	if (portStatus[port] == STREAM) {
 800e65e:	4b0c      	ldr	r3, [pc, #48]	; (800e690 <HAL_UART_ErrorCallback+0x40>)
 800e660:	5c1b      	ldrb	r3, [r3, r0]
 800e662:	2b02      	cmp	r3, #2
 800e664:	d005      	beq.n	800e672 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800e666:	4b0b      	ldr	r3, [pc, #44]	; (800e694 <HAL_UART_ErrorCallback+0x44>)
 800e668:	1818      	adds	r0, r3, r0
 800e66a:	3801      	subs	r0, #1
 800e66c:	2301      	movs	r3, #1
 800e66e:	7003      	strb	r3, [r0, #0]
	}	
}
 800e670:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800e672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	685a      	ldr	r2, [r3, #4]
 800e678:	b292      	uxth	r2, r2
 800e67a:	1e43      	subs	r3, r0, #1
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	4906      	ldr	r1, [pc, #24]	; (800e698 <HAL_UART_ErrorCallback+0x48>)
 800e680:	585b      	ldr	r3, [r3, r1]
 800e682:	6819      	ldr	r1, [r3, #0]
 800e684:	3128      	adds	r1, #40	; 0x28
 800e686:	0020      	movs	r0, r4
 800e688:	f004 ff32 	bl	80134f0 <HAL_UART_Receive_DMA>
 800e68c:	e7f0      	b.n	800e670 <HAL_UART_ErrorCallback+0x20>
 800e68e:	46c0      	nop			; (mov r8, r8)
 800e690:	200010c8 	.word	0x200010c8
 800e694:	20001294 	.word	0x20001294
 800e698:	20001430 	.word	0x20001430

0800e69c <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e69c:	b510      	push	{r4, lr}
 800e69e:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800e6a0:	f7fd f9e6 	bl	800ba70 <GetPort>
 800e6a4:	4b14      	ldr	r3, [pc, #80]	; (800e6f8 <HAL_UART_RxCpltCallback+0x5c>)
 800e6a6:	5c1b      	ldrb	r3, [r3, r0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d006      	beq.n	800e6ba <HAL_UART_RxCpltCallback+0x1e>
 800e6ac:	0020      	movs	r0, r4
 800e6ae:	f7fd f9df 	bl	800ba70 <GetPort>
 800e6b2:	4b11      	ldr	r3, [pc, #68]	; (800e6f8 <HAL_UART_RxCpltCallback+0x5c>)
 800e6b4:	5c1b      	ldrb	r3, [r3, r0]
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d11d      	bne.n	800e6f6 <HAL_UART_RxCpltCallback+0x5a>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800e6ba:	0020      	movs	r0, r4
 800e6bc:	f7fd f9d8 	bl	800ba70 <GetPort>
 800e6c0:	4b0e      	ldr	r3, [pc, #56]	; (800e6fc <HAL_UART_RxCpltCallback+0x60>)
 800e6c2:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800e6c4:	0020      	movs	r0, r4
 800e6c6:	f7fd f9d3 	bl	800ba70 <GetPort>
 800e6ca:	4b0b      	ldr	r3, [pc, #44]	; (800e6f8 <HAL_UART_RxCpltCallback+0x5c>)
 800e6cc:	2205      	movs	r2, #5
 800e6ce:	541a      	strb	r2, [r3, r0]
		// Clear the circular RX buffer
		memset(&UARTRxBuf[GetPort(huart)-1][0], 0, MSG_RX_BUF_SIZE);
 800e6d0:	0020      	movs	r0, r4
 800e6d2:	f7fd f9cd 	bl	800ba70 <GetPort>
 800e6d6:	3801      	subs	r0, #1
 800e6d8:	0180      	lsls	r0, r0, #6
 800e6da:	4b09      	ldr	r3, [pc, #36]	; (800e700 <HAL_UART_RxCpltCallback+0x64>)
 800e6dc:	18c0      	adds	r0, r0, r3
 800e6de:	2240      	movs	r2, #64	; 0x40
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	f005 fe1e 	bl	8014322 <memset>
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800e6e6:	0020      	movs	r0, r4
 800e6e8:	f7fd f9c2 	bl	800ba70 <GetPort>
 800e6ec:	4b05      	ldr	r3, [pc, #20]	; (800e704 <HAL_UART_RxCpltCallback+0x68>)
 800e6ee:	181b      	adds	r3, r3, r0
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	701a      	strb	r2, [r3, #0]
	}
}
 800e6f6:	bd10      	pop	{r4, pc}
 800e6f8:	200010c8 	.word	0x200010c8
 800e6fc:	20006d18 	.word	0x20006d18
 800e700:	2000129c 	.word	0x2000129c
 800e704:	20001294 	.word	0x20001294

0800e708 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800e708:	b672      	cpsid	i
	for( ;; );
 800e70a:	e7fe      	b.n	800e70a <vApplicationStackOverflowHook+0x2>

0800e70c <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800e70c:	b672      	cpsid	i
	for( ;; );
 800e70e:	e7fe      	b.n	800e70e <vApplicationMallocFailedHook+0x2>

0800e710 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800e710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e712:	46ce      	mov	lr, r9
 800e714:	4647      	mov	r7, r8
 800e716:	b580      	push	{r7, lr}
 800e718:	b08f      	sub	sp, #60	; 0x3c
 800e71a:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800e71c:	ac05      	add	r4, sp, #20
 800e71e:	4b34      	ldr	r3, [pc, #208]	; (800e7f0 <RTC_CalendarConfig+0xe0>)
 800e720:	0022      	movs	r2, r4
 800e722:	cb43      	ldmia	r3!, {r0, r1, r6}
 800e724:	c243      	stmia	r2!, {r0, r1, r6}
 800e726:	aa02      	add	r2, sp, #8
 800e728:	4b32      	ldr	r3, [pc, #200]	; (800e7f4 <RTC_CalendarConfig+0xe4>)
 800e72a:	cb03      	ldmia	r3!, {r0, r1}
 800e72c:	c203      	stmia	r2!, {r0, r1}
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800e732:	2015      	movs	r0, #21
 800e734:	ab02      	add	r3, sp, #8
 800e736:	469c      	mov	ip, r3
 800e738:	4460      	add	r0, ip
 800e73a:	f005 fb82 	bl	8013e42 <atoi>
 800e73e:	b2c3      	uxtb	r3, r0
 800e740:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800e742:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800e744:	a806      	add	r0, sp, #24
 800e746:	f005 fb7c 	bl	8013e42 <atoi>
 800e74a:	b2c3      	uxtb	r3, r0
 800e74c:	4698      	mov	r8, r3
  *(comDate + 3) = 0;
 800e74e:	70e5      	strb	r5, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800e750:	4e29      	ldr	r6, [pc, #164]	; (800e7f8 <RTC_CalendarConfig+0xe8>)
  *(comDate + 3) = 0;
 800e752:	2401      	movs	r4, #1
 800e754:	e003      	b.n	800e75e <RTC_CalendarConfig+0x4e>
  for (uint8_t i = 0; i < 12; i++)
 800e756:	3401      	adds	r4, #1
 800e758:	3604      	adds	r6, #4
 800e75a:	2c0d      	cmp	r4, #13
 800e75c:	d007      	beq.n	800e76e <RTC_CalendarConfig+0x5e>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800e75e:	6831      	ldr	r1, [r6, #0]
 800e760:	a805      	add	r0, sp, #20
 800e762:	f7f1 fccf 	bl	8000104 <strcmp>
 800e766:	2800      	cmp	r0, #0
 800e768:	d1f5      	bne.n	800e756 <RTC_CalendarConfig+0x46>
			month = i + 1;
 800e76a:	b2e5      	uxtb	r5, r4
 800e76c:	e7f3      	b.n	800e756 <RTC_CalendarConfig+0x46>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800e76e:	ab02      	add	r3, sp, #8
 800e770:	1d98      	adds	r0, r3, #6
 800e772:	f005 fb66 	bl	8013e42 <atoi>
 800e776:	9001      	str	r0, [sp, #4]
	*(comDate + 5) = 0;
 800e778:	af05      	add	r7, sp, #20
 800e77a:	2400      	movs	r4, #0
 800e77c:	717c      	strb	r4, [r7, #5]
	minutes = atoi(comTime + 3);
 800e77e:	ab02      	add	r3, sp, #8
 800e780:	1cd8      	adds	r0, r3, #3
 800e782:	f005 fb5e 	bl	8013e42 <atoi>
 800e786:	0006      	movs	r6, r0
	*(comDate + 2) = 0;
 800e788:	70bc      	strb	r4, [r7, #2]
	hours = atoi(comTime);
 800e78a:	a802      	add	r0, sp, #8
 800e78c:	f005 fb59 	bl	8013e42 <atoi>
 800e790:	0007      	movs	r7, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800e792:	a90d      	add	r1, sp, #52	; 0x34
 800e794:	464b      	mov	r3, r9
 800e796:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800e798:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800e79a:	4643      	mov	r3, r8
 800e79c:	708b      	strb	r3, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800e79e:	2301      	movs	r3, #1
 800e7a0:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	4815      	ldr	r0, [pc, #84]	; (800e7fc <RTC_CalendarConfig+0xec>)
 800e7a6:	f004 fbf9 	bl	8012f9c <HAL_RTC_SetDate>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d11c      	bne.n	800e7e8 <RTC_CalendarConfig+0xd8>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800e7ae:	a908      	add	r1, sp, #32
 800e7b0:	700f      	strb	r7, [r1, #0]
  stimestructure.Minutes = minutes;
 800e7b2:	704e      	strb	r6, [r1, #1]
  stimestructure.Seconds = seconds;
 800e7b4:	9b01      	ldr	r3, [sp, #4]
 800e7b6:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	720b      	strb	r3, [r1, #8]
 800e7bc:	4a10      	ldr	r2, [pc, #64]	; (800e800 <RTC_CalendarConfig+0xf0>)
 800e7be:	3018      	adds	r0, #24
 800e7c0:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e7c2:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800e7c4:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	480c      	ldr	r0, [pc, #48]	; (800e7fc <RTC_CalendarConfig+0xec>)
 800e7ca:	f004 fb67 	bl	8012e9c <HAL_RTC_SetTime>
 800e7ce:	1e04      	subs	r4, r0, #0
 800e7d0:	d10c      	bne.n	800e7ec <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e7d2:	4a0c      	ldr	r2, [pc, #48]	; (800e804 <RTC_CalendarConfig+0xf4>)
 800e7d4:	2101      	movs	r1, #1
 800e7d6:	4809      	ldr	r0, [pc, #36]	; (800e7fc <RTC_CalendarConfig+0xec>)
 800e7d8:	f004 fca4 	bl	8013124 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800e7dc:	0020      	movs	r0, r4
 800e7de:	b00f      	add	sp, #60	; 0x3c
 800e7e0:	bcc0      	pop	{r6, r7}
 800e7e2:	46b9      	mov	r9, r7
 800e7e4:	46b0      	mov	r8, r6
 800e7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800e7e8:	24ff      	movs	r4, #255	; 0xff
 800e7ea:	e7f7      	b.n	800e7dc <RTC_CalendarConfig+0xcc>
		return BOS_ERROR;
 800e7ec:	24ff      	movs	r4, #255	; 0xff
 800e7ee:	e7f5      	b.n	800e7dc <RTC_CalendarConfig+0xcc>
 800e7f0:	0801a744 	.word	0x0801a744
 800e7f4:	0801a768 	.word	0x0801a768
 800e7f8:	20000020 	.word	0x20000020
 800e7fc:	200070cc 	.word	0x200070cc
 800e800:	20006d18 	.word	0x20006d18
 800e804:	000032f2 	.word	0x000032f2

0800e808 <RTC_Init>:
{
 800e808:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800e80a:	4a1c      	ldr	r2, [pc, #112]	; (800e87c <RTC_Init+0x74>)
 800e80c:	6a11      	ldr	r1, [r2, #32]
 800e80e:	2380      	movs	r3, #128	; 0x80
 800e810:	021b      	lsls	r3, r3, #8
 800e812:	430b      	orrs	r3, r1
 800e814:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800e816:	481a      	ldr	r0, [pc, #104]	; (800e880 <RTC_Init+0x78>)
 800e818:	4b1a      	ldr	r3, [pc, #104]	; (800e884 <RTC_Init+0x7c>)
 800e81a:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800e81c:	2300      	movs	r3, #0
 800e81e:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800e820:	227c      	movs	r2, #124	; 0x7c
 800e822:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800e824:	4a18      	ldr	r2, [pc, #96]	; (800e888 <RTC_Init+0x80>)
 800e826:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e828:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e82a:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e82c:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800e82e:	f004 fad7 	bl	8012de0 <HAL_RTC_Init>
 800e832:	1e04      	subs	r4, r0, #0
 800e834:	d11f      	bne.n	800e876 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800e836:	2101      	movs	r1, #1
 800e838:	4811      	ldr	r0, [pc, #68]	; (800e880 <RTC_Init+0x78>)
 800e83a:	f004 fc79 	bl	8013130 <HAL_RTCEx_BKUPRead>
 800e83e:	4b13      	ldr	r3, [pc, #76]	; (800e88c <RTC_Init+0x84>)
 800e840:	4298      	cmp	r0, r3
 800e842:	d10e      	bne.n	800e862 <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800e844:	4b0d      	ldr	r3, [pc, #52]	; (800e87c <RTC_Init+0x74>)
 800e846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e848:	011b      	lsls	r3, r3, #4
 800e84a:	d502      	bpl.n	800e852 <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800e84c:	4b10      	ldr	r3, [pc, #64]	; (800e890 <RTC_Init+0x88>)
 800e84e:	2200      	movs	r2, #0
 800e850:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800e852:	4b0a      	ldr	r3, [pc, #40]	; (800e87c <RTC_Init+0x74>)
 800e854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e856:	015b      	lsls	r3, r3, #5
 800e858:	d505      	bpl.n	800e866 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800e85a:	4b0d      	ldr	r3, [pc, #52]	; (800e890 <RTC_Init+0x88>)
 800e85c:	2201      	movs	r2, #1
 800e85e:	701a      	strb	r2, [r3, #0]
 800e860:	e001      	b.n	800e866 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800e862:	f7ff ff55 	bl	800e710 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800e866:	4a05      	ldr	r2, [pc, #20]	; (800e87c <RTC_Init+0x74>)
 800e868:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800e86a:	2380      	movs	r3, #128	; 0x80
 800e86c:	045b      	lsls	r3, r3, #17
 800e86e:	430b      	orrs	r3, r1
 800e870:	6253      	str	r3, [r2, #36]	; 0x24
}
 800e872:	0020      	movs	r0, r4
 800e874:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800e876:	24ff      	movs	r4, #255	; 0xff
 800e878:	e7fb      	b.n	800e872 <RTC_Init+0x6a>
 800e87a:	46c0      	nop			; (mov r8, r8)
 800e87c:	40021000 	.word	0x40021000
 800e880:	200070cc 	.word	0x200070cc
 800e884:	40002800 	.word	0x40002800
 800e888:	000007cf 	.word	0x000007cf
 800e88c:	000032f2 	.word	0x000032f2
 800e890:	20001e38 	.word	0x20001e38

0800e894 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800e894:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e896:	46c6      	mov	lr, r8
 800e898:	b500      	push	{lr}
 800e89a:	b086      	sub	sp, #24
 800e89c:	ac0c      	add	r4, sp, #48	; 0x30
 800e89e:	7827      	ldrb	r7, [r4, #0]
 800e8a0:	ac0d      	add	r4, sp, #52	; 0x34
 800e8a2:	7824      	ldrb	r4, [r4, #0]
 800e8a4:	46a0      	mov	r8, r4
 800e8a6:	ac0e      	add	r4, sp, #56	; 0x38
 800e8a8:	7825      	ldrb	r5, [r4, #0]
 800e8aa:	ac0f      	add	r4, sp, #60	; 0x3c
 800e8ac:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800e8ae:	ac05      	add	r4, sp, #20
 800e8b0:	3230      	adds	r2, #48	; 0x30
 800e8b2:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800e8b4:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800e8b6:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800e8b8:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	0021      	movs	r1, r4
 800e8be:	481f      	ldr	r0, [pc, #124]	; (800e93c <BOS_CalendarConfig+0xa8>)
 800e8c0:	f004 fb6c 	bl	8012f9c <HAL_RTC_SetDate>
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	d134      	bne.n	800e932 <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800e8c8:	466b      	mov	r3, sp
 800e8ca:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800e8cc:	4642      	mov	r2, r8
 800e8ce:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800e8d0:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800e8d6:	2e01      	cmp	r6, #1
 800e8d8:	d01e      	beq.n	800e918 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800e8da:	2e02      	cmp	r6, #2
 800e8dc:	d022      	beq.n	800e924 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800e8de:	4b18      	ldr	r3, [pc, #96]	; (800e940 <BOS_CalendarConfig+0xac>)
 800e8e0:	2218      	movs	r2, #24
 800e8e2:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	4669      	mov	r1, sp
 800e8e8:	4814      	ldr	r0, [pc, #80]	; (800e93c <BOS_CalendarConfig+0xa8>)
 800e8ea:	f004 fad7 	bl	8012e9c <HAL_RTC_SetTime>
 800e8ee:	1e04      	subs	r4, r0, #0
 800e8f0:	d121      	bne.n	800e936 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800e8f2:	4a13      	ldr	r2, [pc, #76]	; (800e940 <BOS_CalendarConfig+0xac>)
 800e8f4:	7b53      	ldrb	r3, [r2, #13]
 800e8f6:	021b      	lsls	r3, r3, #8
 800e8f8:	7911      	ldrb	r1, [r2, #4]
 800e8fa:	4319      	orrs	r1, r3
 800e8fc:	208d      	movs	r0, #141	; 0x8d
 800e8fe:	0040      	lsls	r0, r0, #1
 800e900:	f7f9 fa7a 	bl	8007df8 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e904:	4a0f      	ldr	r2, [pc, #60]	; (800e944 <BOS_CalendarConfig+0xb0>)
 800e906:	2101      	movs	r1, #1
 800e908:	480c      	ldr	r0, [pc, #48]	; (800e93c <BOS_CalendarConfig+0xa8>)
 800e90a:	f004 fc0b 	bl	8013124 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800e90e:	0020      	movs	r0, r4
 800e910:	b006      	add	sp, #24
 800e912:	bc80      	pop	{r7}
 800e914:	46b8      	mov	r8, r7
 800e916:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800e918:	466a      	mov	r2, sp
 800e91a:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e91c:	4b08      	ldr	r3, [pc, #32]	; (800e940 <BOS_CalendarConfig+0xac>)
 800e91e:	220c      	movs	r2, #12
 800e920:	735a      	strb	r2, [r3, #13]
 800e922:	e7df      	b.n	800e8e4 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800e924:	2340      	movs	r3, #64	; 0x40
 800e926:	466a      	mov	r2, sp
 800e928:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e92a:	4b05      	ldr	r3, [pc, #20]	; (800e940 <BOS_CalendarConfig+0xac>)
 800e92c:	220c      	movs	r2, #12
 800e92e:	735a      	strb	r2, [r3, #13]
 800e930:	e7d8      	b.n	800e8e4 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800e932:	24ff      	movs	r4, #255	; 0xff
 800e934:	e7eb      	b.n	800e90e <BOS_CalendarConfig+0x7a>
		return BOS_ERROR;
 800e936:	24ff      	movs	r4, #255	; 0xff
 800e938:	e7e9      	b.n	800e90e <BOS_CalendarConfig+0x7a>
 800e93a:	46c0      	nop			; (mov r8, r8)
 800e93c:	200070cc 	.word	0x200070cc
 800e940:	20006d18 	.word	0x20006d18
 800e944:	000032f2 	.word	0x000032f2

0800e948 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800e948:	b530      	push	{r4, r5, lr}
 800e94a:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800e94c:	4d16      	ldr	r5, [pc, #88]	; (800e9a8 <GetTimeDate+0x60>)
 800e94e:	2200      	movs	r2, #0
 800e950:	a902      	add	r1, sp, #8
 800e952:	0028      	movs	r0, r5
 800e954:	f004 fb9e 	bl	8013094 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800e958:	ac07      	add	r4, sp, #28
 800e95a:	2200      	movs	r2, #0
 800e95c:	0021      	movs	r1, r4
 800e95e:	0028      	movs	r0, r5
 800e960:	f004 fbbe 	bl	80130e0 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800e964:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <GetTimeDate+0x64>)
 800e966:	aa02      	add	r2, sp, #8
 800e968:	7a12      	ldrb	r2, [r2, #8]
 800e96a:	09d2      	lsrs	r2, r2, #7
 800e96c:	3201      	adds	r2, #1
 800e96e:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800e970:	9a03      	ldr	r2, [sp, #12]
 800e972:	9201      	str	r2, [sp, #4]
 800e974:	0852      	lsrs	r2, r2, #1
 800e976:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800e978:	aa02      	add	r2, sp, #8
 800e97a:	7892      	ldrb	r2, [r2, #2]
 800e97c:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800e97e:	aa02      	add	r2, sp, #8
 800e980:	7852      	ldrb	r2, [r2, #1]
 800e982:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800e984:	aa02      	add	r2, sp, #8
 800e986:	7812      	ldrb	r2, [r2, #0]
 800e988:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800e98a:	78a2      	ldrb	r2, [r4, #2]
 800e98c:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800e98e:	7862      	ldrb	r2, [r4, #1]
 800e990:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800e992:	7822      	ldrb	r2, [r4, #0]
 800e994:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800e996:	78e2      	ldrb	r2, [r4, #3]
 800e998:	21fa      	movs	r1, #250	; 0xfa
 800e99a:	00c9      	lsls	r1, r1, #3
 800e99c:	468c      	mov	ip, r1
 800e99e:	4462      	add	r2, ip
 800e9a0:	831a      	strh	r2, [r3, #24]
}
 800e9a2:	b009      	add	sp, #36	; 0x24
 800e9a4:	bd30      	pop	{r4, r5, pc}
 800e9a6:	46c0      	nop			; (mov r8, r8)
 800e9a8:	200070cc 	.word	0x200070cc
 800e9ac:	20006d18 	.word	0x20006d18

0800e9b0 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800e9b0:	b530      	push	{r4, r5, lr}
 800e9b2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800e9b4:	4a12      	ldr	r2, [pc, #72]	; (800ea00 <TIM_USEC_Init+0x50>)
 800e9b6:	69d1      	ldr	r1, [r2, #28]
 800e9b8:	2080      	movs	r0, #128	; 0x80
 800e9ba:	0040      	lsls	r0, r0, #1
 800e9bc:	4301      	orrs	r1, r0
 800e9be:	61d1      	str	r1, [r2, #28]
 800e9c0:	69d3      	ldr	r3, [r2, #28]
 800e9c2:	4003      	ands	r3, r0
 800e9c4:	9301      	str	r3, [sp, #4]
 800e9c6:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800e9c8:	4c0e      	ldr	r4, [pc, #56]	; (800ea04 <TIM_USEC_Init+0x54>)
 800e9ca:	4b0f      	ldr	r3, [pc, #60]	; (800ea08 <TIM_USEC_Init+0x58>)
 800e9cc:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800e9ce:	f004 f91f 	bl	8012c10 <HAL_RCC_GetPCLK1Freq>
 800e9d2:	490e      	ldr	r1, [pc, #56]	; (800ea0c <TIM_USEC_Init+0x5c>)
 800e9d4:	f7f1 fbbc 	bl	8000150 <__udivsi3>
 800e9d8:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e9da:	2500      	movs	r5, #0
 800e9dc:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800e9de:	4b0c      	ldr	r3, [pc, #48]	; (800ea10 <TIM_USEC_Init+0x60>)
 800e9e0:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800e9e2:	0020      	movs	r0, r4
 800e9e4:	f004 fc26 	bl	8013234 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e9e8:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e9ea:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800e9ec:	a902      	add	r1, sp, #8
 800e9ee:	0020      	movs	r0, r4
 800e9f0:	f004 fc3a 	bl	8013268 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800e9f4:	0020      	movs	r0, r4
 800e9f6:	f004 fba2 	bl	801313e <HAL_TIM_Base_Start>
}
 800e9fa:	b005      	add	sp, #20
 800e9fc:	bd30      	pop	{r4, r5, pc}
 800e9fe:	46c0      	nop			; (mov r8, r8)
 800ea00:	40021000 	.word	0x40021000
 800ea04:	20007128 	.word	0x20007128
 800ea08:	40002000 	.word	0x40002000
 800ea0c:	000f4240 	.word	0x000f4240
 800ea10:	0000ffff 	.word	0x0000ffff

0800ea14 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800ea14:	b530      	push	{r4, r5, lr}
 800ea16:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800ea18:	4a12      	ldr	r2, [pc, #72]	; (800ea64 <TIM_MSEC_Init+0x50>)
 800ea1a:	6991      	ldr	r1, [r2, #24]
 800ea1c:	2080      	movs	r0, #128	; 0x80
 800ea1e:	0240      	lsls	r0, r0, #9
 800ea20:	4301      	orrs	r1, r0
 800ea22:	6191      	str	r1, [r2, #24]
 800ea24:	6993      	ldr	r3, [r2, #24]
 800ea26:	4003      	ands	r3, r0
 800ea28:	9301      	str	r3, [sp, #4]
 800ea2a:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800ea2c:	4c0e      	ldr	r4, [pc, #56]	; (800ea68 <TIM_MSEC_Init+0x54>)
 800ea2e:	4b0f      	ldr	r3, [pc, #60]	; (800ea6c <TIM_MSEC_Init+0x58>)
 800ea30:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800ea32:	f004 f8ed 	bl	8012c10 <HAL_RCC_GetPCLK1Freq>
 800ea36:	21fa      	movs	r1, #250	; 0xfa
 800ea38:	0089      	lsls	r1, r1, #2
 800ea3a:	f7f1 fb89 	bl	8000150 <__udivsi3>
 800ea3e:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ea40:	2500      	movs	r5, #0
 800ea42:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800ea44:	4b0a      	ldr	r3, [pc, #40]	; (800ea70 <TIM_MSEC_Init+0x5c>)
 800ea46:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800ea48:	0020      	movs	r0, r4
 800ea4a:	f004 fbf3 	bl	8013234 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ea4e:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ea50:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800ea52:	a902      	add	r1, sp, #8
 800ea54:	0020      	movs	r0, r4
 800ea56:	f004 fc07 	bl	8013268 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800ea5a:	0020      	movs	r0, r4
 800ea5c:	f004 fb6f 	bl	801313e <HAL_TIM_Base_Start>
}
 800ea60:	b005      	add	sp, #20
 800ea62:	bd30      	pop	{r4, r5, pc}
 800ea64:	40021000 	.word	0x40021000
 800ea68:	200070ec 	.word	0x200070ec
 800ea6c:	40014000 	.word	0x40014000
 800ea70:	0000ffff 	.word	0x0000ffff

0800ea74 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800ea74:	b510      	push	{r4, lr}
 800ea76:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800ea78:	f002 fa00 	bl	8010e7c <vPortEnterCritical>
	
	if (Delay)
 800ea7c:	2c00      	cmp	r4, #0
 800ea7e:	d006      	beq.n	800ea8e <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800ea80:	4b04      	ldr	r3, [pc, #16]	; (800ea94 <StartMicroDelay+0x20>)
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800ea86:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ea88:	1a5b      	subs	r3, r3, r1
 800ea8a:	42a3      	cmp	r3, r4
 800ea8c:	d9fb      	bls.n	800ea86 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800ea8e:	f002 fa01 	bl	8010e94 <vPortExitCritical>
}
 800ea92:	bd10      	pop	{r4, pc}
 800ea94:	20007128 	.word	0x20007128

0800ea98 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800ea98:	b510      	push	{r4, lr}
 800ea9a:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800ea9c:	f002 f9ee 	bl	8010e7c <vPortEnterCritical>
	
	if (Delay)
 800eaa0:	2c00      	cmp	r4, #0
 800eaa2:	d006      	beq.n	800eab2 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800eaa4:	4b04      	ldr	r3, [pc, #16]	; (800eab8 <StartMilliDelay+0x20>)
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800eaaa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800eaac:	1a5b      	subs	r3, r3, r1
 800eaae:	42a3      	cmp	r3, r4
 800eab0:	d9fb      	bls.n	800eaaa <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800eab2:	f002 f9ef 	bl	8010e94 <vPortExitCritical>
}
 800eab6:	bd10      	pop	{r4, pc}
 800eab8:	200070ec 	.word	0x200070ec

0800eabc <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800eabc:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800eabe:	4809      	ldr	r0, [pc, #36]	; (800eae4 <MX_USART2_UART_Init+0x28>)
 800eac0:	4b09      	ldr	r3, [pc, #36]	; (800eae8 <MX_USART2_UART_Init+0x2c>)
 800eac2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800eac4:	23e1      	movs	r3, #225	; 0xe1
 800eac6:	031b      	lsls	r3, r3, #12
 800eac8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800eaca:	2300      	movs	r3, #0
 800eacc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800eace:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ead0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ead2:	220c      	movs	r2, #12
 800ead4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ead6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ead8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800eada:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800eadc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800eade:	f005 f847 	bl	8013b70 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800eae2:	bd10      	pop	{r4, pc}
 800eae4:	20007030 	.word	0x20007030
 800eae8:	40004400 	.word	0x40004400

0800eaec <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800eaec:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800eaee:	4809      	ldr	r0, [pc, #36]	; (800eb14 <MX_USART3_UART_Init+0x28>)
 800eaf0:	4b09      	ldr	r3, [pc, #36]	; (800eb18 <MX_USART3_UART_Init+0x2c>)
 800eaf2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800eaf4:	23e1      	movs	r3, #225	; 0xe1
 800eaf6:	031b      	lsls	r3, r3, #12
 800eaf8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800eafa:	2300      	movs	r3, #0
 800eafc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800eafe:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800eb00:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800eb02:	220c      	movs	r2, #12
 800eb04:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eb06:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800eb08:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800eb0a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800eb0c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800eb0e:	f005 f82f 	bl	8013b70 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800eb12:	bd10      	pop	{r4, pc}
 800eb14:	20006df0 	.word	0x20006df0
 800eb18:	40004800 	.word	0x40004800

0800eb1c <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800eb1c:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800eb1e:	4809      	ldr	r0, [pc, #36]	; (800eb44 <MX_USART4_UART_Init+0x28>)
 800eb20:	4b09      	ldr	r3, [pc, #36]	; (800eb48 <MX_USART4_UART_Init+0x2c>)
 800eb22:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800eb24:	23e1      	movs	r3, #225	; 0xe1
 800eb26:	031b      	lsls	r3, r3, #12
 800eb28:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800eb2e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800eb30:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800eb32:	220c      	movs	r2, #12
 800eb34:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eb36:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800eb38:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800eb3a:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800eb3c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800eb3e:	f005 f817 	bl	8013b70 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800eb42:	bd10      	pop	{r4, pc}
 800eb44:	20006fbc 	.word	0x20006fbc
 800eb48:	40004c00 	.word	0x40004c00

0800eb4c <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800eb4c:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800eb4e:	4809      	ldr	r0, [pc, #36]	; (800eb74 <MX_USART5_UART_Init+0x28>)
 800eb50:	4b09      	ldr	r3, [pc, #36]	; (800eb78 <MX_USART5_UART_Init+0x2c>)
 800eb52:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800eb54:	23e1      	movs	r3, #225	; 0xe1
 800eb56:	031b      	lsls	r3, r3, #12
 800eb58:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800eb5e:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800eb60:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800eb62:	220c      	movs	r2, #12
 800eb64:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eb66:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800eb68:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800eb6a:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800eb6c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800eb6e:	f004 ffff 	bl	8013b70 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800eb72:	bd10      	pop	{r4, pc}
 800eb74:	20006e64 	.word	0x20006e64
 800eb78:	40005000 	.word	0x40005000

0800eb7c <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800eb7c:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800eb7e:	4809      	ldr	r0, [pc, #36]	; (800eba4 <MX_USART6_UART_Init+0x28>)
 800eb80:	4b09      	ldr	r3, [pc, #36]	; (800eba8 <MX_USART6_UART_Init+0x2c>)
 800eb82:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800eb84:	23e1      	movs	r3, #225	; 0xe1
 800eb86:	031b      	lsls	r3, r3, #12
 800eb88:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800eb8e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800eb90:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800eb92:	220c      	movs	r2, #12
 800eb94:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eb96:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800eb98:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800eb9a:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800eb9c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800eb9e:	f004 ffe7 	bl	8013b70 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800eba2:	bd10      	pop	{r4, pc}
 800eba4:	20006f4c 	.word	0x20006f4c
 800eba8:	40011400 	.word	0x40011400

0800ebac <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ebac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebae:	46ce      	mov	lr, r9
 800ebb0:	4647      	mov	r7, r8
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800ebb6:	6803      	ldr	r3, [r0, #0]
 800ebb8:	4a7f      	ldr	r2, [pc, #508]	; (800edb8 <HAL_UART_MspInit+0x20c>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d010      	beq.n	800ebe0 <HAL_UART_MspInit+0x34>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800ebbe:	4a7f      	ldr	r2, [pc, #508]	; (800edbc <HAL_UART_MspInit+0x210>)
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d012      	beq.n	800ebea <HAL_UART_MspInit+0x3e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800ebc4:	4a7e      	ldr	r2, [pc, #504]	; (800edc0 <HAL_UART_MspInit+0x214>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d03b      	beq.n	800ec42 <HAL_UART_MspInit+0x96>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800ebca:	4a7e      	ldr	r2, [pc, #504]	; (800edc4 <HAL_UART_MspInit+0x218>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d068      	beq.n	800eca2 <HAL_UART_MspInit+0xf6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800ebd0:	4a7d      	ldr	r2, [pc, #500]	; (800edc8 <HAL_UART_MspInit+0x21c>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d100      	bne.n	800ebd8 <HAL_UART_MspInit+0x2c>
 800ebd6:	e091      	b.n	800ecfc <HAL_UART_MspInit+0x150>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800ebd8:	4a7c      	ldr	r2, [pc, #496]	; (800edcc <HAL_UART_MspInit+0x220>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d100      	bne.n	800ebe0 <HAL_UART_MspInit+0x34>
 800ebde:	e0bb      	b.n	800ed58 <HAL_UART_MspInit+0x1ac>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800ebe0:	b00b      	add	sp, #44	; 0x2c
 800ebe2:	bcc0      	pop	{r6, r7}
 800ebe4:	46b9      	mov	r9, r7
 800ebe6:	46b0      	mov	r8, r6
 800ebe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART2_CLK_ENABLE();
 800ebea:	4a79      	ldr	r2, [pc, #484]	; (800edd0 <HAL_UART_MspInit+0x224>)
 800ebec:	69d1      	ldr	r1, [r2, #28]
 800ebee:	2080      	movs	r0, #128	; 0x80
 800ebf0:	0280      	lsls	r0, r0, #10
 800ebf2:	4301      	orrs	r1, r0
 800ebf4:	61d1      	str	r1, [r2, #28]
 800ebf6:	69d3      	ldr	r3, [r2, #28]
 800ebf8:	4003      	ands	r3, r0
 800ebfa:	9300      	str	r3, [sp, #0]
 800ebfc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800ebfe:	2304      	movs	r3, #4
 800ec00:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec02:	2702      	movs	r7, #2
 800ec04:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ec06:	2401      	movs	r4, #1
 800ec08:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ec0a:	2603      	movs	r6, #3
 800ec0c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800ec0e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800ec10:	2590      	movs	r5, #144	; 0x90
 800ec12:	05ed      	lsls	r5, r5, #23
 800ec14:	a905      	add	r1, sp, #20
 800ec16:	0028      	movs	r0, r5
 800ec18:	f003 fa90 	bl	801213c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800ec1c:	2308      	movs	r3, #8
 800ec1e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec20:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ec22:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ec24:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800ec26:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800ec28:	a905      	add	r1, sp, #20
 800ec2a:	0028      	movs	r0, r5
 800ec2c:	f003 fa86 	bl	801213c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800ec30:	2200      	movs	r2, #0
 800ec32:	2101      	movs	r1, #1
 800ec34:	201c      	movs	r0, #28
 800ec36:	f002 faab 	bl	8011190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ec3a:	201c      	movs	r0, #28
 800ec3c:	f002 fada 	bl	80111f4 <HAL_NVIC_EnableIRQ>
 800ec40:	e7ce      	b.n	800ebe0 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800ec42:	4a63      	ldr	r2, [pc, #396]	; (800edd0 <HAL_UART_MspInit+0x224>)
 800ec44:	69d1      	ldr	r1, [r2, #28]
 800ec46:	2080      	movs	r0, #128	; 0x80
 800ec48:	02c0      	lsls	r0, r0, #11
 800ec4a:	4301      	orrs	r1, r0
 800ec4c:	61d1      	str	r1, [r2, #28]
 800ec4e:	69d3      	ldr	r3, [r2, #28]
 800ec50:	4003      	ands	r3, r0
 800ec52:	9301      	str	r3, [sp, #4]
 800ec54:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800ec56:	2380      	movs	r3, #128	; 0x80
 800ec58:	00db      	lsls	r3, r3, #3
 800ec5a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec5c:	2302      	movs	r3, #2
 800ec5e:	4698      	mov	r8, r3
 800ec60:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ec62:	2701      	movs	r7, #1
 800ec64:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ec66:	2603      	movs	r6, #3
 800ec68:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800ec6a:	2504      	movs	r5, #4
 800ec6c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800ec6e:	4c59      	ldr	r4, [pc, #356]	; (800edd4 <HAL_UART_MspInit+0x228>)
 800ec70:	a905      	add	r1, sp, #20
 800ec72:	0020      	movs	r0, r4
 800ec74:	f003 fa62 	bl	801213c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800ec78:	2380      	movs	r3, #128	; 0x80
 800ec7a:	011b      	lsls	r3, r3, #4
 800ec7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec7e:	4643      	mov	r3, r8
 800ec80:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ec82:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ec84:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800ec86:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800ec88:	a905      	add	r1, sp, #20
 800ec8a:	0020      	movs	r0, r4
 800ec8c:	f003 fa56 	bl	801213c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800ec90:	2200      	movs	r2, #0
 800ec92:	2101      	movs	r1, #1
 800ec94:	201d      	movs	r0, #29
 800ec96:	f002 fa7b 	bl	8011190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800ec9a:	201d      	movs	r0, #29
 800ec9c:	f002 faaa 	bl	80111f4 <HAL_NVIC_EnableIRQ>
 800eca0:	e79e      	b.n	800ebe0 <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800eca2:	4a4b      	ldr	r2, [pc, #300]	; (800edd0 <HAL_UART_MspInit+0x224>)
 800eca4:	69d1      	ldr	r1, [r2, #28]
 800eca6:	2080      	movs	r0, #128	; 0x80
 800eca8:	0300      	lsls	r0, r0, #12
 800ecaa:	4301      	orrs	r1, r0
 800ecac:	61d1      	str	r1, [r2, #28]
 800ecae:	69d3      	ldr	r3, [r2, #28]
 800ecb0:	4003      	ands	r3, r0
 800ecb2:	9302      	str	r3, [sp, #8]
 800ecb4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800ecb6:	2401      	movs	r4, #1
 800ecb8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecba:	2502      	movs	r5, #2
 800ecbc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ecbe:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ecc0:	2303      	movs	r3, #3
 800ecc2:	4698      	mov	r8, r3
 800ecc4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;	
 800ecc6:	2704      	movs	r7, #4
 800ecc8:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800ecca:	2690      	movs	r6, #144	; 0x90
 800eccc:	05f6      	lsls	r6, r6, #23
 800ecce:	a905      	add	r1, sp, #20
 800ecd0:	0030      	movs	r0, r6
 800ecd2:	f003 fa33 	bl	801213c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800ecd6:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecd8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ecda:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ecdc:	4643      	mov	r3, r8
 800ecde:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;
 800ece0:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800ece2:	a905      	add	r1, sp, #20
 800ece4:	0030      	movs	r0, r6
 800ece6:	f003 fa29 	bl	801213c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800ecea:	2200      	movs	r2, #0
 800ecec:	2101      	movs	r1, #1
 800ecee:	201d      	movs	r0, #29
 800ecf0:	f002 fa4e 	bl	8011190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800ecf4:	201d      	movs	r0, #29
 800ecf6:	f002 fa7d 	bl	80111f4 <HAL_NVIC_EnableIRQ>
 800ecfa:	e771      	b.n	800ebe0 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800ecfc:	4a34      	ldr	r2, [pc, #208]	; (800edd0 <HAL_UART_MspInit+0x224>)
 800ecfe:	69d1      	ldr	r1, [r2, #28]
 800ed00:	2080      	movs	r0, #128	; 0x80
 800ed02:	0340      	lsls	r0, r0, #13
 800ed04:	4301      	orrs	r1, r0
 800ed06:	61d1      	str	r1, [r2, #28]
 800ed08:	69d3      	ldr	r3, [r2, #28]
 800ed0a:	4003      	ands	r3, r0
 800ed0c:	9303      	str	r3, [sp, #12]
 800ed0e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800ed10:	2308      	movs	r3, #8
 800ed12:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed14:	3b06      	subs	r3, #6
 800ed16:	4698      	mov	r8, r3
 800ed18:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ed1a:	2701      	movs	r7, #1
 800ed1c:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ed1e:	2603      	movs	r6, #3
 800ed20:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800ed22:	2504      	movs	r5, #4
 800ed24:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800ed26:	4c2b      	ldr	r4, [pc, #172]	; (800edd4 <HAL_UART_MspInit+0x228>)
 800ed28:	a905      	add	r1, sp, #20
 800ed2a:	0020      	movs	r0, r4
 800ed2c:	f003 fa06 	bl	801213c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800ed30:	2310      	movs	r3, #16
 800ed32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed34:	4643      	mov	r3, r8
 800ed36:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ed38:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ed3a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800ed3c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800ed3e:	a905      	add	r1, sp, #20
 800ed40:	0020      	movs	r0, r4
 800ed42:	f003 f9fb 	bl	801213c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800ed46:	2200      	movs	r2, #0
 800ed48:	2101      	movs	r1, #1
 800ed4a:	201d      	movs	r0, #29
 800ed4c:	f002 fa20 	bl	8011190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800ed50:	201d      	movs	r0, #29
 800ed52:	f002 fa4f 	bl	80111f4 <HAL_NVIC_EnableIRQ>
 800ed56:	e743      	b.n	800ebe0 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800ed58:	4b1d      	ldr	r3, [pc, #116]	; (800edd0 <HAL_UART_MspInit+0x224>)
 800ed5a:	699a      	ldr	r2, [r3, #24]
 800ed5c:	2420      	movs	r4, #32
 800ed5e:	4322      	orrs	r2, r4
 800ed60:	619a      	str	r2, [r3, #24]
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	4023      	ands	r3, r4
 800ed66:	9304      	str	r3, [sp, #16]
 800ed68:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800ed6a:	2310      	movs	r3, #16
 800ed6c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed6e:	3b0e      	subs	r3, #14
 800ed70:	4699      	mov	r9, r3
 800ed72:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ed74:	3b01      	subs	r3, #1
 800ed76:	4698      	mov	r8, r3
 800ed78:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ed7a:	2703      	movs	r7, #3
 800ed7c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800ed7e:	2605      	movs	r6, #5
 800ed80:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800ed82:	2590      	movs	r5, #144	; 0x90
 800ed84:	05ed      	lsls	r5, r5, #23
 800ed86:	a905      	add	r1, sp, #20
 800ed88:	0028      	movs	r0, r5
 800ed8a:	f003 f9d7 	bl	801213c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800ed8e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed90:	464b      	mov	r3, r9
 800ed92:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ed94:	4643      	mov	r3, r8
 800ed96:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ed98:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800ed9a:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800ed9c:	a905      	add	r1, sp, #20
 800ed9e:	0028      	movs	r0, r5
 800eda0:	f003 f9cc 	bl	801213c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800eda4:	2200      	movs	r2, #0
 800eda6:	2101      	movs	r1, #1
 800eda8:	201d      	movs	r0, #29
 800edaa:	f002 f9f1 	bl	8011190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800edae:	201d      	movs	r0, #29
 800edb0:	f002 fa20 	bl	80111f4 <HAL_NVIC_EnableIRQ>
}
 800edb4:	e714      	b.n	800ebe0 <HAL_UART_MspInit+0x34>
 800edb6:	46c0      	nop			; (mov r8, r8)
 800edb8:	40013800 	.word	0x40013800
 800edbc:	40004400 	.word	0x40004400
 800edc0:	40004800 	.word	0x40004800
 800edc4:	40004c00 	.word	0x40004c00
 800edc8:	40005000 	.word	0x40005000
 800edcc:	40011400 	.word	0x40011400
 800edd0:	40021000 	.word	0x40021000
 800edd4:	48000400 	.word	0x48000400

0800edd8 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800edd8:	2805      	cmp	r0, #5
 800edda:	d80b      	bhi.n	800edf4 <GetUart+0x1c>
 800eddc:	0080      	lsls	r0, r0, #2
 800edde:	4b07      	ldr	r3, [pc, #28]	; (800edfc <GetUart+0x24>)
 800ede0:	581b      	ldr	r3, [r3, r0]
 800ede2:	469f      	mov	pc, r3
		case P4 :
			return P4uart;
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800ede4:	4806      	ldr	r0, [pc, #24]	; (800ee00 <GetUart+0x28>)
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800ede6:	4770      	bx	lr
			return P3uart;
 800ede8:	4806      	ldr	r0, [pc, #24]	; (800ee04 <GetUart+0x2c>)
 800edea:	e7fc      	b.n	800ede6 <GetUart+0xe>
			return P4uart;
 800edec:	4806      	ldr	r0, [pc, #24]	; (800ee08 <GetUart+0x30>)
 800edee:	e7fa      	b.n	800ede6 <GetUart+0xe>
			return P5uart;
 800edf0:	4806      	ldr	r0, [pc, #24]	; (800ee0c <GetUart+0x34>)
 800edf2:	e7f8      	b.n	800ede6 <GetUart+0xe>
			return 0;
 800edf4:	2000      	movs	r0, #0
 800edf6:	e7f6      	b.n	800ede6 <GetUart+0xe>
			return P1uart;	
 800edf8:	4805      	ldr	r0, [pc, #20]	; (800ee10 <GetUart+0x38>)
 800edfa:	e7f4      	b.n	800ede6 <GetUart+0xe>
 800edfc:	0801d68c 	.word	0x0801d68c
 800ee00:	20007030 	.word	0x20007030
 800ee04:	20006f4c 	.word	0x20006f4c
 800ee08:	20006df0 	.word	0x20006df0
 800ee0c:	20006e64 	.word	0x20006e64
 800ee10:	20006fbc 	.word	0x20006fbc

0800ee14 <writePxMutex>:
{
 800ee14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee16:	46ce      	mov	lr, r9
 800ee18:	b500      	push	{lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	0006      	movs	r6, r0
 800ee1e:	000f      	movs	r7, r1
 800ee20:	4691      	mov	r9, r2
 800ee22:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800ee24:	f7ff ffd8 	bl	800edd8 <GetUart>
 800ee28:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800ee2a:	2401      	movs	r4, #1
	if (GetUart(port) != NULL) {
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	d016      	beq.n	800ee5e <writePxMutex+0x4a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800ee30:	00b3      	lsls	r3, r6, #2
 800ee32:	4a0d      	ldr	r2, [pc, #52]	; (800ee68 <writePxMutex+0x54>)
 800ee34:	5898      	ldr	r0, [r3, r2]
 800ee36:	9901      	ldr	r1, [sp, #4]
 800ee38:	f000 f93a 	bl	800f0b0 <osSemaphoreWait>
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d10e      	bne.n	800ee5e <writePxMutex+0x4a>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800ee40:	9b08      	ldr	r3, [sp, #32]
 800ee42:	464a      	mov	r2, r9
 800ee44:	0039      	movs	r1, r7
 800ee46:	0028      	movs	r0, r5
 800ee48:	f004 fde6 	bl	8013a18 <HAL_UART_Transmit>
 800ee4c:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800ee4e:	d001      	beq.n	800ee54 <writePxMutex+0x40>
 800ee50:	2803      	cmp	r0, #3
 800ee52:	d1f5      	bne.n	800ee40 <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800ee54:	00b6      	lsls	r6, r6, #2
 800ee56:	4b04      	ldr	r3, [pc, #16]	; (800ee68 <writePxMutex+0x54>)
 800ee58:	58f0      	ldr	r0, [r6, r3]
 800ee5a:	f000 f957 	bl	800f10c <osSemaphoreRelease>
}
 800ee5e:	0020      	movs	r0, r4
 800ee60:	b002      	add	sp, #8
 800ee62:	bc80      	pop	{r7}
 800ee64:	46b9      	mov	r9, r7
 800ee66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee68:	20006d98 	.word	0x20006d98

0800ee6c <writePxITMutex>:
{
 800ee6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	0004      	movs	r4, r0
 800ee72:	9101      	str	r1, [sp, #4]
 800ee74:	0017      	movs	r7, r2
 800ee76:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800ee78:	f7ff ffae 	bl	800edd8 <GetUart>
 800ee7c:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800ee7e:	2001      	movs	r0, #1
	if (GetUart(port) != NULL) {	
 800ee80:	2e00      	cmp	r6, #0
 800ee82:	d009      	beq.n	800ee98 <writePxITMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800ee84:	00a4      	lsls	r4, r4, #2
 800ee86:	4b08      	ldr	r3, [pc, #32]	; (800eea8 <writePxITMutex+0x3c>)
 800ee88:	58e0      	ldr	r0, [r4, r3]
 800ee8a:	0029      	movs	r1, r5
 800ee8c:	f000 f910 	bl	800f0b0 <osSemaphoreWait>
 800ee90:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800ee92:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d001      	beq.n	800ee9c <writePxITMutex+0x30>
}
 800ee98:	b003      	add	sp, #12
 800ee9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800ee9c:	003a      	movs	r2, r7
 800ee9e:	9901      	ldr	r1, [sp, #4]
 800eea0:	0030      	movs	r0, r6
 800eea2:	f004 fa24 	bl	80132ee <HAL_UART_Transmit_IT>
 800eea6:	e7f7      	b.n	800ee98 <writePxITMutex+0x2c>
 800eea8:	20006d98 	.word	0x20006d98

0800eeac <writePxDMAMutex>:
{
 800eeac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	0004      	movs	r4, r0
 800eeb2:	9101      	str	r1, [sp, #4]
 800eeb4:	0017      	movs	r7, r2
 800eeb6:	001d      	movs	r5, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800eeb8:	f7ff ff8e 	bl	800edd8 <GetUart>
 800eebc:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800eebe:	2001      	movs	r0, #1
	if (hUart != NULL) {	
 800eec0:	2e00      	cmp	r6, #0
 800eec2:	d009      	beq.n	800eed8 <writePxDMAMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800eec4:	00a4      	lsls	r4, r4, #2
 800eec6:	4b0a      	ldr	r3, [pc, #40]	; (800eef0 <writePxDMAMutex+0x44>)
 800eec8:	58e0      	ldr	r0, [r4, r3]
 800eeca:	0029      	movs	r1, r5
 800eecc:	f000 f8f0 	bl	800f0b0 <osSemaphoreWait>
 800eed0:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800eed2:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d001      	beq.n	800eedc <writePxDMAMutex+0x30>
}
 800eed8:	b003      	add	sp, #12
 800eeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800eedc:	0030      	movs	r0, r6
 800eede:	f7ff f97d 	bl	800e1dc <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800eee2:	003a      	movs	r2, r7
 800eee4:	9901      	ldr	r1, [sp, #4]
 800eee6:	0030      	movs	r0, r6
 800eee8:	f004 fab0 	bl	801344c <HAL_UART_Transmit_DMA>
 800eeec:	e7f4      	b.n	800eed8 <writePxDMAMutex+0x2c>
 800eeee:	46c0      	nop			; (mov r8, r8)
 800eef0:	20006d98 	.word	0x20006d98

0800eef4 <UpdateBaudrate>:
{
 800eef4:	b510      	push	{r4, lr}
 800eef6:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800eef8:	f7ff ff6e 	bl	800edd8 <GetUart>
	huart->Init.BaudRate = baudrate;
 800eefc:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800eefe:	f004 fe37 	bl	8013b70 <HAL_UART_Init>
}
 800ef02:	2000      	movs	r0, #0
 800ef04:	bd10      	pop	{r4, pc}
	...

0800ef08 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800ef08:	b570      	push	{r4, r5, r6, lr}
 800ef0a:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800ef0c:	d003      	beq.n	800ef16 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800ef0e:	2901      	cmp	r1, #1
 800ef10:	d002      	beq.n	800ef18 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800ef12:	2900      	cmp	r1, #0
 800ef14:	d016      	beq.n	800ef44 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800ef16:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800ef18:	f7fc fdaa 	bl	800ba70 <GetPort>
 800ef1c:	4b14      	ldr	r3, [pc, #80]	; (800ef70 <SwapUartPins+0x68>)
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	3b01      	subs	r3, #1
 800ef22:	4d14      	ldr	r5, [pc, #80]	; (800ef74 <SwapUartPins+0x6c>)
 800ef24:	005b      	lsls	r3, r3, #1
 800ef26:	3801      	subs	r0, #1
 800ef28:	2180      	movs	r1, #128	; 0x80
 800ef2a:	0209      	lsls	r1, r1, #8
 800ef2c:	000a      	movs	r2, r1
 800ef2e:	4102      	asrs	r2, r0
 800ef30:	5b58      	ldrh	r0, [r3, r5]
 800ef32:	4302      	orrs	r2, r0
 800ef34:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800ef36:	2308      	movs	r3, #8
 800ef38:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800ef3a:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800ef3c:	0020      	movs	r0, r4
 800ef3e:	f004 fe17 	bl	8013b70 <HAL_UART_Init>
 800ef42:	e7e8      	b.n	800ef16 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800ef44:	f7fc fd94 	bl	800ba70 <GetPort>
 800ef48:	4b09      	ldr	r3, [pc, #36]	; (800ef70 <SwapUartPins+0x68>)
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	3b01      	subs	r3, #1
 800ef4e:	4d09      	ldr	r5, [pc, #36]	; (800ef74 <SwapUartPins+0x6c>)
 800ef50:	005b      	lsls	r3, r3, #1
 800ef52:	3801      	subs	r0, #1
 800ef54:	2180      	movs	r1, #128	; 0x80
 800ef56:	0209      	lsls	r1, r1, #8
 800ef58:	4101      	asrs	r1, r0
 800ef5a:	5b5a      	ldrh	r2, [r3, r5]
 800ef5c:	438a      	bics	r2, r1
 800ef5e:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800ef60:	2308      	movs	r3, #8
 800ef62:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800ef64:	2300      	movs	r3, #0
 800ef66:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800ef68:	0020      	movs	r0, r4
 800ef6a:	f004 fe01 	bl	8013b70 <HAL_UART_Init>
}
 800ef6e:	e7d2      	b.n	800ef16 <SwapUartPins+0xe>
 800ef70:	2000104c 	.word	0x2000104c
 800ef74:	20007164 	.word	0x20007164

0800ef78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ef78:	4816      	ldr	r0, [pc, #88]	; (800efd4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800ef7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800ef7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800ef7e:	e003      	b.n	800ef88 <LoopCopyDataInit>

0800ef80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800ef80:	4b15      	ldr	r3, [pc, #84]	; (800efd8 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800ef82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800ef84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800ef86:	3104      	adds	r1, #4

0800ef88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800ef88:	4814      	ldr	r0, [pc, #80]	; (800efdc <LoopForever+0xc>)
  ldr r3, =_edata
 800ef8a:	4b15      	ldr	r3, [pc, #84]	; (800efe0 <LoopForever+0x10>)
  adds r2, r0, r1
 800ef8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800ef8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800ef90:	d3f6      	bcc.n	800ef80 <CopyDataInit>
  ldr r2, =_sbss
 800ef92:	4a14      	ldr	r2, [pc, #80]	; (800efe4 <LoopForever+0x14>)
  b LoopFillZerobss
 800ef94:	e002      	b.n	800ef9c <LoopFillZerobss>

0800ef96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800ef96:	2300      	movs	r3, #0
  str  r3, [r2]
 800ef98:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ef9a:	3204      	adds	r2, #4

0800ef9c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800ef9c:	4b12      	ldr	r3, [pc, #72]	; (800efe8 <LoopForever+0x18>)
  cmp r2, r3
 800ef9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800efa0:	d3f9      	bcc.n	800ef96 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800efa2:	4812      	ldr	r0, [pc, #72]	; (800efec <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800efa4:	4912      	ldr	r1, [pc, #72]	; (800eff0 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800efa6:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800efa8:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800efaa:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800efac:	d005      	beq.n	800efba <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800efae:	f000 f82b 	bl	800f008 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800efb2:	f004 ff53 	bl	8013e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800efb6:	f004 ff32 	bl	8013e1e <main>

0800efba <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800efba:	480e      	ldr	r0, [pc, #56]	; (800eff4 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800efbc:	490e      	ldr	r1, [pc, #56]	; (800eff8 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800efbe:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800efc0:	480e      	ldr	r0, [pc, #56]	; (800effc <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800efc2:	490d      	ldr	r1, [pc, #52]	; (800eff8 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800efc4:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800efc6:	480e      	ldr	r0, [pc, #56]	; (800f000 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800efc8:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800efca:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800efcc:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800efce:	4700      	bx	r0

0800efd0 <LoopForever>:


LoopForever:
    b LoopForever
 800efd0:	e7fe      	b.n	800efd0 <LoopForever>
 800efd2:	0000      	.short	0x0000
  ldr   r0, =_estack
 800efd4:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800efd8:	0801dd0c 	.word	0x0801dd0c
  ldr r0, =_sdata
 800efdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800efe0:	20000a84 	.word	0x20000a84
  ldr r2, =_sbss
 800efe4:	20000a88 	.word	0x20000a88
  ldr r3, = _ebss
 800efe8:	20007208 	.word	0x20007208
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800efec:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800eff0:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800eff4:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800eff8:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800effc:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800f000:	1fffd800 	.word	0x1fffd800

0800f004 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800f004:	e7fe      	b.n	800f004 <ADC1_COMP_IRQHandler>
	...

0800f008 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800f008:	4b11      	ldr	r3, [pc, #68]	; (800f050 <SystemInit+0x48>)
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	2101      	movs	r1, #1
 800f00e:	430a      	orrs	r2, r1
 800f010:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800f012:	685a      	ldr	r2, [r3, #4]
 800f014:	480f      	ldr	r0, [pc, #60]	; (800f054 <SystemInit+0x4c>)
 800f016:	4002      	ands	r2, r0
 800f018:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	480e      	ldr	r0, [pc, #56]	; (800f058 <SystemInit+0x50>)
 800f01e:	4002      	ands	r2, r0
 800f020:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	480d      	ldr	r0, [pc, #52]	; (800f05c <SystemInit+0x54>)
 800f026:	4002      	ands	r2, r0
 800f028:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800f02a:	685a      	ldr	r2, [r3, #4]
 800f02c:	480c      	ldr	r0, [pc, #48]	; (800f060 <SystemInit+0x58>)
 800f02e:	4002      	ands	r2, r0
 800f030:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800f032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f034:	200f      	movs	r0, #15
 800f036:	4382      	bics	r2, r0
 800f038:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800f03a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f03c:	4809      	ldr	r0, [pc, #36]	; (800f064 <SystemInit+0x5c>)
 800f03e:	4002      	ands	r2, r0
 800f040:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800f042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f044:	438a      	bics	r2, r1
 800f046:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f048:	2200      	movs	r2, #0
 800f04a:	609a      	str	r2, [r3, #8]

}
 800f04c:	4770      	bx	lr
 800f04e:	46c0      	nop			; (mov r8, r8)
 800f050:	40021000 	.word	0x40021000
 800f054:	08ffb80c 	.word	0x08ffb80c
 800f058:	fef6ffff 	.word	0xfef6ffff
 800f05c:	fffbffff 	.word	0xfffbffff
 800f060:	ffc0ffff 	.word	0xffc0ffff
 800f064:	fff0feac 	.word	0xfff0feac

0800f068 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f068:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800f06a:	f000 ff7d 	bl	800ff68 <vTaskStartScheduler>
  
  return osOK;
}
 800f06e:	2000      	movs	r0, #0
 800f070:	bd10      	pop	{r4, pc}

0800f072 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f072:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f074:	2800      	cmp	r0, #0
 800f076:	d100      	bne.n	800f07a <osDelay+0x8>
 800f078:	3001      	adds	r0, #1
 800f07a:	f001 f8bd 	bl	80101f8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f07e:	2000      	movs	r0, #0
 800f080:	bd10      	pop	{r4, pc}

0800f082 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800f082:	b510      	push	{r4, lr}
 800f084:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800f086:	2901      	cmp	r1, #1
 800f088:	d005      	beq.n	800f096 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800f08a:	2100      	movs	r1, #0
 800f08c:	f000 fb06 	bl	800f69c <xQueueCreateCountingSemaphore>
 800f090:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800f092:	0020      	movs	r0, r4
 800f094:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800f096:	2203      	movs	r2, #3
 800f098:	2100      	movs	r1, #0
 800f09a:	f000 fada 	bl	800f652 <xQueueGenericCreate>
 800f09e:	1e04      	subs	r4, r0, #0
 800f0a0:	d0f7      	beq.n	800f092 <osSemaphoreCreate+0x10>
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	f000 fb0c 	bl	800f6c4 <xQueueGenericSend>
 800f0ac:	e7f1      	b.n	800f092 <osSemaphoreCreate+0x10>
	...

0800f0b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f0b0:	b500      	push	{lr}
 800f0b2:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d020      	beq.n	800f0fe <osSemaphoreWait+0x4e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0bc:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d00e      	beq.n	800f0e2 <osSemaphoreWait+0x32>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f0c4:	aa01      	add	r2, sp, #4
 800f0c6:	2100      	movs	r1, #0
 800f0c8:	f000 fcc7 	bl	800fa5a <xQueueReceiveFromISR>
 800f0cc:	2801      	cmp	r0, #1
 800f0ce:	d118      	bne.n	800f102 <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f0d0:	9801      	ldr	r0, [sp, #4]
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	d011      	beq.n	800f0fa <osSemaphoreWait+0x4a>
 800f0d6:	4b0c      	ldr	r3, [pc, #48]	; (800f108 <osSemaphoreWait+0x58>)
 800f0d8:	2280      	movs	r2, #128	; 0x80
 800f0da:	0552      	lsls	r2, r2, #21
 800f0dc:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800f0de:	2000      	movs	r0, #0
 800f0e0:	e00b      	b.n	800f0fa <osSemaphoreWait+0x4a>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	000a      	movs	r2, r1
 800f0e6:	2100      	movs	r1, #0
 800f0e8:	f000 fc0c 	bl	800f904 <xQueueGenericReceive>
    return osErrorOS;
 800f0ec:	3801      	subs	r0, #1
 800f0ee:	4243      	negs	r3, r0
 800f0f0:	4158      	adcs	r0, r3
 800f0f2:	4240      	negs	r0, r0
 800f0f4:	23fe      	movs	r3, #254	; 0xfe
 800f0f6:	4398      	bics	r0, r3
 800f0f8:	30ff      	adds	r0, #255	; 0xff
}
 800f0fa:	b003      	add	sp, #12
 800f0fc:	bd00      	pop	{pc}
    return osErrorParameter;
 800f0fe:	2080      	movs	r0, #128	; 0x80
 800f100:	e7fb      	b.n	800f0fa <osSemaphoreWait+0x4a>
      return osErrorOS;
 800f102:	20ff      	movs	r0, #255	; 0xff
 800f104:	e7f9      	b.n	800f0fa <osSemaphoreWait+0x4a>
 800f106:	46c0      	nop			; (mov r8, r8)
 800f108:	e000ed04 	.word	0xe000ed04

0800f10c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f10c:	b510      	push	{r4, lr}
 800f10e:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800f110:	2300      	movs	r3, #0
 800f112:	9301      	str	r3, [sp, #4]
 800f114:	f3ef 8405 	mrs	r4, IPSR
  
  
  if (inHandlerMode()) {
 800f118:	2c00      	cmp	r4, #0
 800f11a:	d00d      	beq.n	800f138 <osSemaphoreRelease+0x2c>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f11c:	a901      	add	r1, sp, #4
 800f11e:	f000 fbb5 	bl	800f88c <xQueueGiveFromISR>
 800f122:	2801      	cmp	r0, #1
 800f124:	d113      	bne.n	800f14e <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800f126:	2400      	movs	r4, #0
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f128:	9b01      	ldr	r3, [sp, #4]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d00c      	beq.n	800f148 <osSemaphoreRelease+0x3c>
 800f12e:	4b09      	ldr	r3, [pc, #36]	; (800f154 <osSemaphoreRelease+0x48>)
 800f130:	2280      	movs	r2, #128	; 0x80
 800f132:	0552      	lsls	r2, r2, #21
 800f134:	601a      	str	r2, [r3, #0]
 800f136:	e007      	b.n	800f148 <osSemaphoreRelease+0x3c>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f138:	2300      	movs	r3, #0
 800f13a:	2200      	movs	r2, #0
 800f13c:	2100      	movs	r1, #0
 800f13e:	f000 fac1 	bl	800f6c4 <xQueueGenericSend>
 800f142:	2801      	cmp	r0, #1
 800f144:	d000      	beq.n	800f148 <osSemaphoreRelease+0x3c>
      result = osErrorOS;
 800f146:	24ff      	movs	r4, #255	; 0xff
    }
  }
  
  return result;
}
 800f148:	0020      	movs	r0, r4
 800f14a:	b002      	add	sp, #8
 800f14c:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800f14e:	24ff      	movs	r4, #255	; 0xff
 800f150:	e7fa      	b.n	800f148 <osSemaphoreRelease+0x3c>
 800f152:	46c0      	nop			; (mov r8, r8)
 800f154:	e000ed04 	.word	0xe000ed04

0800f158 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800f158:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800f15a:	f001 fa41 	bl	80105e0 <xTaskGetSchedulerState>
 800f15e:	2801      	cmp	r0, #1
 800f160:	d100      	bne.n	800f164 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800f162:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800f164:	f001 fed0 	bl	8010f08 <xPortSysTickHandler>
}
 800f168:	e7fb      	b.n	800f162 <osSystickHandler+0xa>
	...

0800f16c <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800f16c:	b570      	push	{r4, r5, r6, lr}
 800f16e:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800f170:	d011      	beq.n	800f196 <FreeRTOS_CLIRegisterCommand+0x2a>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800f172:	2008      	movs	r0, #8
 800f174:	f001 ff04 	bl	8010f80 <pvPortMalloc>
 800f178:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800f17a:	d00e      	beq.n	800f19a <FreeRTOS_CLIRegisterCommand+0x2e>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800f17c:	f001 fe7e 	bl	8010e7c <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800f180:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800f182:	2300      	movs	r3, #0
 800f184:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800f186:	4b06      	ldr	r3, [pc, #24]	; (800f1a0 <FreeRTOS_CLIRegisterCommand+0x34>)
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800f18c:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800f18e:	f001 fe81 	bl	8010e94 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800f192:	2001      	movs	r0, #1
 800f194:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800f196:	b672      	cpsid	i
 800f198:	e7fe      	b.n	800f198 <FreeRTOS_CLIRegisterCommand+0x2c>
	configASSERT( pxNewListItem );
 800f19a:	b672      	cpsid	i
 800f19c:	e7fe      	b.n	800f19c <FreeRTOS_CLIRegisterCommand+0x30>
 800f19e:	46c0      	nop			; (mov r8, r8)
 800f1a0:	200000bc 	.word	0x200000bc

0800f1a4 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800f1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1a6:	46de      	mov	lr, fp
 800f1a8:	4657      	mov	r7, sl
 800f1aa:	464e      	mov	r6, r9
 800f1ac:	4645      	mov	r5, r8
 800f1ae:	b5e0      	push	{r5, r6, r7, lr}
 800f1b0:	b083      	sub	sp, #12
 800f1b2:	0006      	movs	r6, r0
 800f1b4:	4689      	mov	r9, r1
 800f1b6:	9201      	str	r2, [sp, #4]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800f1b8:	4b3b      	ldr	r3, [pc, #236]	; (800f2a8 <FreeRTOS_CLIProcessCommand+0x104>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d012      	beq.n	800f1e6 <FreeRTOS_CLIProcessCommand+0x42>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	689b      	ldr	r3, [r3, #8]
 800f1c4:	0032      	movs	r2, r6
 800f1c6:	9901      	ldr	r1, [sp, #4]
 800f1c8:	4648      	mov	r0, r9
 800f1ca:	4798      	blx	r3
 800f1cc:	1e05      	subs	r5, r0, #0

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800f1ce:	d102      	bne.n	800f1d6 <FreeRTOS_CLIProcessCommand+0x32>
		{
			pxCommand = NULL;
 800f1d0:	4b35      	ldr	r3, [pc, #212]	; (800f2a8 <FreeRTOS_CLIProcessCommand+0x104>)
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800f1d6:	0028      	movs	r0, r5
 800f1d8:	b003      	add	sp, #12
 800f1da:	bcf0      	pop	{r4, r5, r6, r7}
 800f1dc:	46bb      	mov	fp, r7
 800f1de:	46b2      	mov	sl, r6
 800f1e0:	46a9      	mov	r9, r5
 800f1e2:	46a0      	mov	r8, r4
 800f1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800f1e6:	4c31      	ldr	r4, [pc, #196]	; (800f2ac <FreeRTOS_CLIProcessCommand+0x108>)
 800f1e8:	4b2f      	ldr	r3, [pc, #188]	; (800f2a8 <FreeRTOS_CLIProcessCommand+0x104>)
 800f1ea:	601c      	str	r4, [r3, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800f1ec:	2320      	movs	r3, #32
 800f1ee:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800f1f0:	4b2d      	ldr	r3, [pc, #180]	; (800f2a8 <FreeRTOS_CLIProcessCommand+0x104>)
 800f1f2:	469b      	mov	fp, r3
 800f1f4:	e00a      	b.n	800f20c <FreeRTOS_CLIProcessCommand+0x68>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800f1f6:	0029      	movs	r1, r5
 800f1f8:	0030      	movs	r0, r6
 800f1fa:	f005 faca 	bl	8014792 <strncmp>
 800f1fe:	1e05      	subs	r5, r0, #0
 800f200:	d012      	beq.n	800f228 <FreeRTOS_CLIProcessCommand+0x84>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800f202:	6864      	ldr	r4, [r4, #4]
 800f204:	465b      	mov	r3, fp
 800f206:	601c      	str	r4, [r3, #0]
 800f208:	2c00      	cmp	r4, #0
 800f20a:	d015      	beq.n	800f238 <FreeRTOS_CLIProcessCommand+0x94>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800f20c:	6827      	ldr	r7, [r4, #0]
 800f20e:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800f210:	0028      	movs	r0, r5
 800f212:	f7f0 ff81 	bl	8000118 <strlen>
 800f216:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800f218:	5c33      	ldrb	r3, [r6, r0]
 800f21a:	4651      	mov	r1, sl
 800f21c:	438b      	bics	r3, r1
 800f21e:	b259      	sxtb	r1, r3
 800f220:	4688      	mov	r8, r1
 800f222:	2b00      	cmp	r3, #0
 800f224:	d1ed      	bne.n	800f202 <FreeRTOS_CLIProcessCommand+0x5e>
 800f226:	e7e6      	b.n	800f1f6 <FreeRTOS_CLIProcessCommand+0x52>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800f228:	7b3f      	ldrb	r7, [r7, #12]
 800f22a:	b27f      	sxtb	r7, r7
 800f22c:	2f00      	cmp	r7, #0
 800f22e:	da0a      	bge.n	800f246 <FreeRTOS_CLIProcessCommand+0xa2>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800f230:	4b1d      	ldr	r3, [pc, #116]	; (800f2a8 <FreeRTOS_CLIProcessCommand+0x104>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d1c3      	bne.n	800f1c0 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800f238:	9a01      	ldr	r2, [sp, #4]
 800f23a:	491d      	ldr	r1, [pc, #116]	; (800f2b0 <FreeRTOS_CLIProcessCommand+0x10c>)
 800f23c:	4648      	mov	r0, r9
 800f23e:	f005 fab9 	bl	80147b4 <strncpy>
		xReturn = pdFALSE;
 800f242:	2500      	movs	r5, #0
	return xReturn;
 800f244:	e7c7      	b.n	800f1d6 <FreeRTOS_CLIProcessCommand+0x32>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800f246:	2300      	movs	r3, #0
 800f248:	56f3      	ldrsb	r3, [r6, r3]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d02a      	beq.n	800f2a4 <FreeRTOS_CLIProcessCommand+0x100>
 800f24e:	0034      	movs	r4, r6
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800f250:	0002      	movs	r2, r0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800f252:	0001      	movs	r1, r0
				xLastCharacterWasSpace = pdTRUE;
 800f254:	2001      	movs	r0, #1
 800f256:	e00b      	b.n	800f270 <FreeRTOS_CLIProcessCommand+0xcc>
			if( xLastCharacterWasSpace != pdTRUE )
 800f258:	2a01      	cmp	r2, #1
 800f25a:	d004      	beq.n	800f266 <FreeRTOS_CLIProcessCommand+0xc2>
				cParameters++;
 800f25c:	4643      	mov	r3, r8
 800f25e:	3301      	adds	r3, #1
 800f260:	b25b      	sxtb	r3, r3
 800f262:	4698      	mov	r8, r3
				xLastCharacterWasSpace = pdTRUE;
 800f264:	0002      	movs	r2, r0
		}

		pcCommandString++;
 800f266:	3401      	adds	r4, #1
	while( *pcCommandString != 0x00 )
 800f268:	2300      	movs	r3, #0
 800f26a:	56e3      	ldrsb	r3, [r4, r3]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d003      	beq.n	800f278 <FreeRTOS_CLIProcessCommand+0xd4>
		if( ( *pcCommandString ) == ' ' )
 800f270:	2b20      	cmp	r3, #32
 800f272:	d0f1      	beq.n	800f258 <FreeRTOS_CLIProcessCommand+0xb4>
			xLastCharacterWasSpace = pdFALSE;
 800f274:	000a      	movs	r2, r1
 800f276:	e7f6      	b.n	800f266 <FreeRTOS_CLIProcessCommand+0xc2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800f278:	2a01      	cmp	r2, #1
 800f27a:	d00e      	beq.n	800f29a <FreeRTOS_CLIProcessCommand+0xf6>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800f27c:	4b0a      	ldr	r3, [pc, #40]	; (800f2a8 <FreeRTOS_CLIProcessCommand+0x104>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d0d9      	beq.n	800f238 <FreeRTOS_CLIProcessCommand+0x94>
 800f284:	4547      	cmp	r7, r8
 800f286:	d09b      	beq.n	800f1c0 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800f288:	9a01      	ldr	r2, [sp, #4]
 800f28a:	490a      	ldr	r1, [pc, #40]	; (800f2b4 <FreeRTOS_CLIProcessCommand+0x110>)
 800f28c:	4648      	mov	r0, r9
 800f28e:	f005 fa91 	bl	80147b4 <strncpy>
		pxCommand = NULL;
 800f292:	4b05      	ldr	r3, [pc, #20]	; (800f2a8 <FreeRTOS_CLIProcessCommand+0x104>)
 800f294:	2200      	movs	r2, #0
 800f296:	601a      	str	r2, [r3, #0]
 800f298:	e79d      	b.n	800f1d6 <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
 800f29a:	4643      	mov	r3, r8
 800f29c:	3b01      	subs	r3, #1
 800f29e:	b25b      	sxtb	r3, r3
 800f2a0:	4698      	mov	r8, r3
 800f2a2:	e7eb      	b.n	800f27c <FreeRTOS_CLIProcessCommand+0xd8>
int8_t cParameters = 0;
 800f2a4:	4698      	mov	r8, r3
 800f2a6:	e7e9      	b.n	800f27c <FreeRTOS_CLIProcessCommand+0xd8>
 800f2a8:	200020a4 	.word	0x200020a4
 800f2ac:	200000c0 	.word	0x200000c0
 800f2b0:	0801d6fc 	.word	0x0801d6fc
 800f2b4:	0801d6a4 	.word	0x0801d6a4

0800f2b8 <FreeRTOS_CLIGetOutputBuffer>:
}
 800f2b8:	4800      	ldr	r0, [pc, #0]	; (800f2bc <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800f2ba:	4770      	bx	lr
 800f2bc:	20001e3c 	.word	0x20001e3c

0800f2c0 <FreeRTOS_CLIGetParameter>:
{
 800f2c0:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800f2c6:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800f2c8:	e00d      	b.n	800f2e6 <FreeRTOS_CLIGetParameter+0x26>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	56c3      	ldrsb	r3, [r0, r3]
 800f2ce:	2b20      	cmp	r3, #32
 800f2d0:	d104      	bne.n	800f2dc <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800f2d2:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	56c3      	ldrsb	r3, [r0, r3]
 800f2d8:	2b20      	cmp	r3, #32
 800f2da:	d0fa      	beq.n	800f2d2 <FreeRTOS_CLIGetParameter+0x12>
		if( *pcCommandString != 0x00 )
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d029      	beq.n	800f334 <FreeRTOS_CLIGetParameter+0x74>
			uxParametersFound++;
 800f2e0:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800f2e2:	42a1      	cmp	r1, r4
 800f2e4:	d00f      	beq.n	800f306 <FreeRTOS_CLIGetParameter+0x46>
	while( uxParametersFound < uxWantedParameter )
 800f2e6:	428c      	cmp	r4, r1
 800f2e8:	d026      	beq.n	800f338 <FreeRTOS_CLIGetParameter+0x78>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	56c3      	ldrsb	r3, [r0, r3]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d006      	beq.n	800f300 <FreeRTOS_CLIGetParameter+0x40>
 800f2f2:	2b20      	cmp	r3, #32
 800f2f4:	d0e9      	beq.n	800f2ca <FreeRTOS_CLIGetParameter+0xa>
			pcCommandString++;
 800f2f6:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	56c3      	ldrsb	r3, [r0, r3]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d1f8      	bne.n	800f2f2 <FreeRTOS_CLIGetParameter+0x32>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800f300:	2300      	movs	r3, #0
 800f302:	56c3      	ldrsb	r3, [r0, r3]
 800f304:	e7ea      	b.n	800f2dc <FreeRTOS_CLIGetParameter+0x1c>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800f306:	2300      	movs	r3, #0
 800f308:	56c3      	ldrsb	r3, [r0, r3]
 800f30a:	0001      	movs	r1, r0
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00f      	beq.n	800f330 <FreeRTOS_CLIGetParameter+0x70>
 800f310:	2b20      	cmp	r3, #32
 800f312:	d007      	beq.n	800f324 <FreeRTOS_CLIGetParameter+0x64>
					( *pxParameterStringLength )++;
 800f314:	6813      	ldr	r3, [r2, #0]
 800f316:	3301      	adds	r3, #1
 800f318:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800f31a:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800f31c:	2300      	movs	r3, #0
 800f31e:	56cb      	ldrsb	r3, [r1, r3]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d1f5      	bne.n	800f310 <FreeRTOS_CLIGetParameter+0x50>
				if( *pxParameterStringLength == 0 )
 800f324:	6813      	ldr	r3, [r2, #0]
					pcReturn = NULL;
 800f326:	1e5a      	subs	r2, r3, #1
 800f328:	4193      	sbcs	r3, r2
 800f32a:	425b      	negs	r3, r3
 800f32c:	4018      	ands	r0, r3
 800f32e:	e004      	b.n	800f33a <FreeRTOS_CLIGetParameter+0x7a>
 800f330:	2000      	movs	r0, #0
 800f332:	e002      	b.n	800f33a <FreeRTOS_CLIGetParameter+0x7a>
const int8_t *pcReturn = NULL;
 800f334:	2000      	movs	r0, #0
 800f336:	e000      	b.n	800f33a <FreeRTOS_CLIGetParameter+0x7a>
 800f338:	2000      	movs	r0, #0
}
 800f33a:	bd10      	pop	{r4, pc}

0800f33c <prvHelpCommand>:
{
 800f33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f33e:	46c6      	mov	lr, r8
 800f340:	b500      	push	{lr}
 800f342:	b082      	sub	sp, #8
 800f344:	0005      	movs	r5, r0
 800f346:	000c      	movs	r4, r1
 800f348:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800f34a:	2300      	movs	r3, #0
 800f34c:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800f34e:	aa01      	add	r2, sp, #4
 800f350:	2101      	movs	r1, #1
 800f352:	f7ff ffb5 	bl	800f2c0 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800f356:	2800      	cmp	r0, #0
 800f358:	d02a      	beq.n	800f3b0 <prvHelpCommand+0x74>
 800f35a:	2206      	movs	r2, #6
 800f35c:	4932      	ldr	r1, [pc, #200]	; (800f428 <prvHelpCommand+0xec>)
 800f35e:	f005 fa18 	bl	8014792 <strncmp>
 800f362:	1e06      	subs	r6, r0, #0
 800f364:	d14b      	bne.n	800f3fe <prvHelpCommand+0xc2>
		if( str == NumOfParamsHelpStrings )
 800f366:	4b31      	ldr	r3, [pc, #196]	; (800f42c <prvHelpCommand+0xf0>)
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	2b07      	cmp	r3, #7
 800f36c:	d015      	beq.n	800f39a <prvHelpCommand+0x5e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800f36e:	1c5a      	adds	r2, r3, #1
 800f370:	b2d2      	uxtb	r2, r2
 800f372:	4690      	mov	r8, r2
 800f374:	4a2d      	ldr	r2, [pc, #180]	; (800f42c <prvHelpCommand+0xf0>)
 800f376:	4641      	mov	r1, r8
 800f378:	7011      	strb	r1, [r2, #0]
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	4a2c      	ldr	r2, [pc, #176]	; (800f430 <prvHelpCommand+0xf4>)
 800f37e:	5899      	ldr	r1, [r3, r2]
 800f380:	0022      	movs	r2, r4
 800f382:	0028      	movs	r0, r5
 800f384:	f005 fa16 	bl	80147b4 <strncpy>
			xReturn = pdTRUE;
 800f388:	2701      	movs	r7, #1
		if( str == NumOfParamsHelpStrings )
 800f38a:	4643      	mov	r3, r8
 800f38c:	2b07      	cmp	r3, #7
 800f38e:	d136      	bne.n	800f3fe <prvHelpCommand+0xc2>
			xReturn = pdFALSE; str = 0;
 800f390:	4b26      	ldr	r3, [pc, #152]	; (800f42c <prvHelpCommand+0xf0>)
 800f392:	2200      	movs	r2, #0
 800f394:	701a      	strb	r2, [r3, #0]
 800f396:	0037      	movs	r7, r6
 800f398:	e031      	b.n	800f3fe <prvHelpCommand+0xc2>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800f39a:	4b24      	ldr	r3, [pc, #144]	; (800f42c <prvHelpCommand+0xf0>)
 800f39c:	2201      	movs	r2, #1
 800f39e:	701a      	strb	r2, [r3, #0]
 800f3a0:	4b23      	ldr	r3, [pc, #140]	; (800f430 <prvHelpCommand+0xf4>)
 800f3a2:	6819      	ldr	r1, [r3, #0]
 800f3a4:	0022      	movs	r2, r4
 800f3a6:	0028      	movs	r0, r5
 800f3a8:	f005 fa04 	bl	80147b4 <strncpy>
			xReturn = pdTRUE;
 800f3ac:	2701      	movs	r7, #1
 800f3ae:	e026      	b.n	800f3fe <prvHelpCommand+0xc2>
		if( pxCommand == NULL )
 800f3b0:	4b20      	ldr	r3, [pc, #128]	; (800f434 <prvHelpCommand+0xf8>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d027      	beq.n	800f408 <prvHelpCommand+0xcc>
		if (counter > numOfBosCommands) {
 800f3b8:	4b1f      	ldr	r3, [pc, #124]	; (800f438 <prvHelpCommand+0xfc>)
 800f3ba:	781e      	ldrb	r6, [r3, #0]
 800f3bc:	4b1f      	ldr	r3, [pc, #124]	; (800f43c <prvHelpCommand+0x100>)
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	42b3      	cmp	r3, r6
 800f3c2:	d228      	bcs.n	800f416 <prvHelpCommand+0xda>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800f3c4:	0022      	movs	r2, r4
 800f3c6:	3a08      	subs	r2, #8
 800f3c8:	4b1a      	ldr	r3, [pc, #104]	; (800f434 <prvHelpCommand+0xf8>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	6859      	ldr	r1, [r3, #4]
 800f3d0:	0028      	movs	r0, r5
 800f3d2:	3008      	adds	r0, #8
 800f3d4:	f005 f9ee 	bl	80147b4 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800f3d8:	1c68      	adds	r0, r5, #1
 800f3da:	4919      	ldr	r1, [pc, #100]	; (800f440 <prvHelpCommand+0x104>)
 800f3dc:	f005 f9d1 	bl	8014782 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800f3e0:	2328      	movs	r3, #40	; 0x28
 800f3e2:	702b      	strb	r3, [r5, #0]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	71ab      	strb	r3, [r5, #6]
 800f3e8:	3b09      	subs	r3, #9
 800f3ea:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800f3ec:	4b11      	ldr	r3, [pc, #68]	; (800f434 <prvHelpCommand+0xf8>)
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	6857      	ldr	r7, [r2, #4]
 800f3f2:	601f      	str	r7, [r3, #0]
		counter++;
 800f3f4:	3601      	adds	r6, #1
 800f3f6:	4b10      	ldr	r3, [pc, #64]	; (800f438 <prvHelpCommand+0xfc>)
 800f3f8:	701e      	strb	r6, [r3, #0]
			xReturn = pdTRUE;
 800f3fa:	1e7b      	subs	r3, r7, #1
 800f3fc:	419f      	sbcs	r7, r3
}
 800f3fe:	0038      	movs	r0, r7
 800f400:	b002      	add	sp, #8
 800f402:	bc80      	pop	{r7}
 800f404:	46b8      	mov	r8, r7
 800f406:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800f408:	4b0a      	ldr	r3, [pc, #40]	; (800f434 <prvHelpCommand+0xf8>)
 800f40a:	4a0e      	ldr	r2, [pc, #56]	; (800f444 <prvHelpCommand+0x108>)
 800f40c:	601a      	str	r2, [r3, #0]
			counter = 1;
 800f40e:	4b0a      	ldr	r3, [pc, #40]	; (800f438 <prvHelpCommand+0xfc>)
 800f410:	2201      	movs	r2, #1
 800f412:	701a      	strb	r2, [r3, #0]
 800f414:	e7d0      	b.n	800f3b8 <prvHelpCommand+0x7c>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800f416:	4b07      	ldr	r3, [pc, #28]	; (800f434 <prvHelpCommand+0xf8>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	6859      	ldr	r1, [r3, #4]
 800f41e:	0022      	movs	r2, r4
 800f420:	0028      	movs	r0, r5
 800f422:	f005 f9c7 	bl	80147b4 <strncpy>
 800f426:	e7e1      	b.n	800f3ec <prvHelpCommand+0xb0>
 800f428:	0801b660 	.word	0x0801b660
 800f42c:	200020ac 	.word	0x200020ac
 800f430:	20000054 	.word	0x20000054
 800f434:	200020a8 	.word	0x200020a8
 800f438:	200020a0 	.word	0x200020a0
 800f43c:	20006c9c 	.word	0x20006c9c
 800f440:	0801ab90 	.word	0x0801ab90
 800f444:	200000c0 	.word	0x200000c0

0800f448 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f448:	0003      	movs	r3, r0
 800f44a:	3308      	adds	r3, #8
 800f44c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f44e:	2201      	movs	r2, #1
 800f450:	4252      	negs	r2, r2
 800f452:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f454:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f456:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f458:	2300      	movs	r3, #0
 800f45a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f45c:	4770      	bx	lr

0800f45e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f45e:	2300      	movs	r3, #0
 800f460:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f462:	4770      	bx	lr

0800f464 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800f464:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f466:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f468:	689a      	ldr	r2, [r3, #8]
 800f46a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f46c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f46e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f470:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800f472:	6803      	ldr	r3, [r0, #0]
 800f474:	3301      	adds	r3, #1
 800f476:	6003      	str	r3, [r0, #0]
}
 800f478:	4770      	bx	lr

0800f47a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f47a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f47c:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f47e:	0003      	movs	r3, r0
 800f480:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800f482:	1c62      	adds	r2, r4, #1
 800f484:	d00e      	beq.n	800f4a4 <vListInsert+0x2a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f486:	001a      	movs	r2, r3
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	681d      	ldr	r5, [r3, #0]
 800f48c:	42a5      	cmp	r5, r4
 800f48e:	d9fa      	bls.n	800f486 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f490:	6853      	ldr	r3, [r2, #4]
 800f492:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f494:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f496:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800f498:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f49a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800f49c:	6803      	ldr	r3, [r0, #0]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	6003      	str	r3, [r0, #0]
}
 800f4a2:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800f4a4:	6902      	ldr	r2, [r0, #16]
 800f4a6:	e7f3      	b.n	800f490 <vListInsert+0x16>

0800f4a8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f4a8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f4aa:	6841      	ldr	r1, [r0, #4]
 800f4ac:	6882      	ldr	r2, [r0, #8]
 800f4ae:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f4b0:	6841      	ldr	r1, [r0, #4]
 800f4b2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f4b4:	685a      	ldr	r2, [r3, #4]
 800f4b6:	4282      	cmp	r2, r0
 800f4b8:	d005      	beq.n	800f4c6 <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	1e50      	subs	r0, r2, #1
 800f4c2:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800f4c4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f4c6:	6882      	ldr	r2, [r0, #8]
 800f4c8:	605a      	str	r2, [r3, #4]
 800f4ca:	e7f6      	b.n	800f4ba <uxListRemove+0x12>

0800f4cc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f4cc:	b570      	push	{r4, r5, r6, lr}
 800f4ce:	0004      	movs	r4, r0
 800f4d0:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f4d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800f4d4:	2a00      	cmp	r2, #0
 800f4d6:	d10d      	bne.n	800f4f4 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800f4d8:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d003      	beq.n	800f4e8 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800f4e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800f4e8:	6860      	ldr	r0, [r4, #4]
 800f4ea:	f001 f8c7 	bl	801067c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	6063      	str	r3, [r4, #4]
 800f4f2:	e7f5      	b.n	800f4e0 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800f4f4:	2d00      	cmp	r5, #0
 800f4f6:	d10e      	bne.n	800f516 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800f4f8:	6880      	ldr	r0, [r0, #8]
 800f4fa:	f004 ff09 	bl	8014310 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f4fe:	68a3      	ldr	r3, [r4, #8]
 800f500:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f502:	4694      	mov	ip, r2
 800f504:	4463      	add	r3, ip
 800f506:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800f508:	0028      	movs	r0, r5
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f50a:	6862      	ldr	r2, [r4, #4]
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d3e7      	bcc.n	800f4e0 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f510:	6823      	ldr	r3, [r4, #0]
 800f512:	60a3      	str	r3, [r4, #8]
 800f514:	e7e4      	b.n	800f4e0 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f516:	68c0      	ldr	r0, [r0, #12]
 800f518:	f004 fefa 	bl	8014310 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f51c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f51e:	425a      	negs	r2, r3
 800f520:	68e1      	ldr	r1, [r4, #12]
 800f522:	1acb      	subs	r3, r1, r3
 800f524:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f526:	6821      	ldr	r1, [r4, #0]
 800f528:	428b      	cmp	r3, r1
 800f52a:	d203      	bcs.n	800f534 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800f52c:	6863      	ldr	r3, [r4, #4]
 800f52e:	469c      	mov	ip, r3
 800f530:	4462      	add	r2, ip
 800f532:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800f534:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800f536:	2d02      	cmp	r5, #2
 800f538:	d1d2      	bne.n	800f4e0 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f53a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d0cf      	beq.n	800f4e0 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800f540:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f542:	3b01      	subs	r3, #1
 800f544:	63a3      	str	r3, [r4, #56]	; 0x38
 800f546:	e7cb      	b.n	800f4e0 <prvCopyDataToQueue+0x14>

0800f548 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f548:	b510      	push	{r4, lr}
 800f54a:	0003      	movs	r3, r0
 800f54c:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f54e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f550:	2a00      	cmp	r2, #0
 800f552:	d00a      	beq.n	800f56a <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f554:	68d9      	ldr	r1, [r3, #12]
 800f556:	1889      	adds	r1, r1, r2
 800f558:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f55a:	685c      	ldr	r4, [r3, #4]
 800f55c:	42a1      	cmp	r1, r4
 800f55e:	d301      	bcc.n	800f564 <prvCopyDataFromQueue+0x1c>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f560:	6819      	ldr	r1, [r3, #0]
 800f562:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f564:	68d9      	ldr	r1, [r3, #12]
 800f566:	f004 fed3 	bl	8014310 <memcpy>
	}
}
 800f56a:	bd10      	pop	{r4, pc}

0800f56c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f56c:	b570      	push	{r4, r5, r6, lr}
 800f56e:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f570:	f001 fc84 	bl	8010e7c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f574:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f576:	2b00      	cmp	r3, #0
 800f578:	dd13      	ble.n	800f5a2 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f57a:	0025      	movs	r5, r4
 800f57c:	3524      	adds	r5, #36	; 0x24
 800f57e:	e007      	b.n	800f590 <prvUnlockQueue+0x24>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800f580:	f001 f828 	bl	80105d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800f584:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f586:	3b01      	subs	r3, #1
 800f588:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f58a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	dd08      	ble.n	800f5a2 <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f592:	2b00      	cmp	r3, #0
 800f594:	d005      	beq.n	800f5a2 <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f596:	0028      	movs	r0, r5
 800f598:	f000 ff9a 	bl	80104d0 <xTaskRemoveFromEventList>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d0f1      	beq.n	800f584 <prvUnlockQueue+0x18>
 800f5a0:	e7ee      	b.n	800f580 <prvUnlockQueue+0x14>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	425b      	negs	r3, r3
 800f5a6:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800f5a8:	f001 fc74 	bl	8010e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f5ac:	f001 fc66 	bl	8010e7c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f5b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	dd13      	ble.n	800f5de <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5b6:	0025      	movs	r5, r4
 800f5b8:	3510      	adds	r5, #16
 800f5ba:	e007      	b.n	800f5cc <prvUnlockQueue+0x60>
				{
					vTaskMissedYield();
 800f5bc:	f001 f80a 	bl	80105d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800f5c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f5c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	dd08      	ble.n	800f5de <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5cc:	6923      	ldr	r3, [r4, #16]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d005      	beq.n	800f5de <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5d2:	0028      	movs	r0, r5
 800f5d4:	f000 ff7c 	bl	80104d0 <xTaskRemoveFromEventList>
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	d0f1      	beq.n	800f5c0 <prvUnlockQueue+0x54>
 800f5dc:	e7ee      	b.n	800f5bc <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800f5de:	2301      	movs	r3, #1
 800f5e0:	425b      	negs	r3, r3
 800f5e2:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f5e4:	f001 fc56 	bl	8010e94 <vPortExitCritical>
}
 800f5e8:	bd70      	pop	{r4, r5, r6, pc}

0800f5ea <xQueueGenericReset>:
{
 800f5ea:	b570      	push	{r4, r5, r6, lr}
 800f5ec:	0004      	movs	r4, r0
 800f5ee:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d01a      	beq.n	800f62a <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800f5f4:	f001 fc42 	bl	8010e7c <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f5f8:	6822      	ldr	r2, [r4, #0]
 800f5fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f5fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f5fe:	434b      	muls	r3, r1
 800f600:	18d0      	adds	r0, r2, r3
 800f602:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f604:	2000      	movs	r0, #0
 800f606:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f608:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f60a:	1a5b      	subs	r3, r3, r1
 800f60c:	18d3      	adds	r3, r2, r3
 800f60e:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800f610:	2301      	movs	r3, #1
 800f612:	425b      	negs	r3, r3
 800f614:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800f616:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800f618:	2d00      	cmp	r5, #0
 800f61a:	d111      	bne.n	800f640 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f61c:	6923      	ldr	r3, [r4, #16]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d105      	bne.n	800f62e <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800f622:	f001 fc37 	bl	8010e94 <vPortExitCritical>
}
 800f626:	2001      	movs	r0, #1
 800f628:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800f62a:	b672      	cpsid	i
 800f62c:	e7fe      	b.n	800f62c <xQueueGenericReset+0x42>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f62e:	0020      	movs	r0, r4
 800f630:	3010      	adds	r0, #16
 800f632:	f000 ff4d 	bl	80104d0 <xTaskRemoveFromEventList>
 800f636:	2801      	cmp	r0, #1
 800f638:	d1f3      	bne.n	800f622 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800f63a:	f001 fc13 	bl	8010e64 <vPortYield>
 800f63e:	e7f0      	b.n	800f622 <xQueueGenericReset+0x38>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f640:	0020      	movs	r0, r4
 800f642:	3010      	adds	r0, #16
 800f644:	f7ff ff00 	bl	800f448 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f648:	0020      	movs	r0, r4
 800f64a:	3024      	adds	r0, #36	; 0x24
 800f64c:	f7ff fefc 	bl	800f448 <vListInitialise>
 800f650:	e7e7      	b.n	800f622 <xQueueGenericReset+0x38>

0800f652 <xQueueGenericCreate>:
{
 800f652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f654:	0005      	movs	r5, r0
 800f656:	000e      	movs	r6, r1
 800f658:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f65a:	2800      	cmp	r0, #0
 800f65c:	d101      	bne.n	800f662 <xQueueGenericCreate+0x10>
 800f65e:	b672      	cpsid	i
 800f660:	e7fe      	b.n	800f660 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f662:	2900      	cmp	r1, #0
 800f664:	d013      	beq.n	800f68e <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f666:	0008      	movs	r0, r1
 800f668:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f66a:	3055      	adds	r0, #85	; 0x55
 800f66c:	f001 fc88 	bl	8010f80 <pvPortMalloc>
 800f670:	0004      	movs	r4, r0
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800f672:	3054      	adds	r0, #84	; 0x54
	if( pcAllocatedBuffer != NULL )
 800f674:	2c00      	cmp	r4, #0
 800f676:	d00f      	beq.n	800f698 <xQueueGenericCreate+0x46>
 800f678:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800f67a:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800f67c:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f67e:	2101      	movs	r1, #1
 800f680:	0020      	movs	r0, r4
 800f682:	f7ff ffb2 	bl	800f5ea <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800f686:	2350      	movs	r3, #80	; 0x50
 800f688:	54e7      	strb	r7, [r4, r3]
}
 800f68a:	0020      	movs	r0, r4
 800f68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f68e:	2054      	movs	r0, #84	; 0x54
 800f690:	f001 fc76 	bl	8010f80 <pvPortMalloc>
 800f694:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800f696:	d1ef      	bne.n	800f678 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800f698:	b672      	cpsid	i
 800f69a:	e7fe      	b.n	800f69a <xQueueGenericCreate+0x48>

0800f69c <xQueueCreateCountingSemaphore>:
	{
 800f69c:	b510      	push	{r4, lr}
 800f69e:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d101      	bne.n	800f6a8 <xQueueCreateCountingSemaphore+0xc>
 800f6a4:	b672      	cpsid	i
 800f6a6:	e7fe      	b.n	800f6a6 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f6a8:	4288      	cmp	r0, r1
 800f6aa:	d201      	bcs.n	800f6b0 <xQueueCreateCountingSemaphore+0x14>
 800f6ac:	b672      	cpsid	i
 800f6ae:	e7fe      	b.n	800f6ae <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f6b0:	2202      	movs	r2, #2
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	f7ff ffcd 	bl	800f652 <xQueueGenericCreate>
		if( xHandle != NULL )
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	d001      	beq.n	800f6c0 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f6bc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800f6be:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800f6c0:	b672      	cpsid	i
 800f6c2:	e7fe      	b.n	800f6c2 <xQueueCreateCountingSemaphore+0x26>

0800f6c4 <xQueueGenericSend>:
{
 800f6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6c6:	46ce      	mov	lr, r9
 800f6c8:	4647      	mov	r7, r8
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b085      	sub	sp, #20
 800f6ce:	0004      	movs	r4, r0
 800f6d0:	000e      	movs	r6, r1
 800f6d2:	9201      	str	r2, [sp, #4]
 800f6d4:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d008      	beq.n	800f6ec <xQueueGenericSend+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6da:	2900      	cmp	r1, #0
 800f6dc:	d008      	beq.n	800f6f0 <xQueueGenericSend+0x2c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f6de:	2d02      	cmp	r5, #2
 800f6e0:	d10b      	bne.n	800f6fa <xQueueGenericSend+0x36>
 800f6e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d008      	beq.n	800f6fa <xQueueGenericSend+0x36>
 800f6e8:	b672      	cpsid	i
 800f6ea:	e7fe      	b.n	800f6ea <xQueueGenericSend+0x26>
	configASSERT( pxQueue );
 800f6ec:	b672      	cpsid	i
 800f6ee:	e7fe      	b.n	800f6ee <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d0f3      	beq.n	800f6de <xQueueGenericSend+0x1a>
 800f6f6:	b672      	cpsid	i
 800f6f8:	e7fe      	b.n	800f6f8 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6fa:	f000 ff71 	bl	80105e0 <xTaskGetSchedulerState>
 800f6fe:	2800      	cmp	r0, #0
 800f700:	d104      	bne.n	800f70c <xQueueGenericSend+0x48>
 800f702:	9b01      	ldr	r3, [sp, #4]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d005      	beq.n	800f714 <xQueueGenericSend+0x50>
 800f708:	b672      	cpsid	i
 800f70a:	e7fe      	b.n	800f70a <xQueueGenericSend+0x46>
 800f70c:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800f70e:	2300      	movs	r3, #0
 800f710:	4698      	mov	r8, r3
 800f712:	e033      	b.n	800f77c <xQueueGenericSend+0xb8>
 800f714:	2700      	movs	r7, #0
 800f716:	e7fa      	b.n	800f70e <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f718:	002a      	movs	r2, r5
 800f71a:	0031      	movs	r1, r6
 800f71c:	0020      	movs	r0, r4
 800f71e:	f7ff fed5 	bl	800f4cc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f724:	2b00      	cmp	r3, #0
 800f726:	d109      	bne.n	800f73c <xQueueGenericSend+0x78>
					else if( xYieldRequired != pdFALSE )
 800f728:	2800      	cmp	r0, #0
 800f72a:	d110      	bne.n	800f74e <xQueueGenericSend+0x8a>
				taskEXIT_CRITICAL();
 800f72c:	f001 fbb2 	bl	8010e94 <vPortExitCritical>
				return pdPASS;
 800f730:	2001      	movs	r0, #1
}
 800f732:	b005      	add	sp, #20
 800f734:	bcc0      	pop	{r6, r7}
 800f736:	46b9      	mov	r9, r7
 800f738:	46b0      	mov	r8, r6
 800f73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800f73c:	0020      	movs	r0, r4
 800f73e:	3024      	adds	r0, #36	; 0x24
 800f740:	f000 fec6 	bl	80104d0 <xTaskRemoveFromEventList>
 800f744:	2801      	cmp	r0, #1
 800f746:	d1f1      	bne.n	800f72c <xQueueGenericSend+0x68>
							queueYIELD_IF_USING_PREEMPTION();
 800f748:	f001 fb8c 	bl	8010e64 <vPortYield>
 800f74c:	e7ee      	b.n	800f72c <xQueueGenericSend+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 800f74e:	f001 fb89 	bl	8010e64 <vPortYield>
 800f752:	e7eb      	b.n	800f72c <xQueueGenericSend+0x68>
					taskEXIT_CRITICAL();
 800f754:	f001 fb9e 	bl	8010e94 <vPortExitCritical>
					return errQUEUE_FULL;
 800f758:	2000      	movs	r0, #0
 800f75a:	e7ea      	b.n	800f732 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 800f75c:	a802      	add	r0, sp, #8
 800f75e:	f000 fef7 	bl	8010550 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f762:	e018      	b.n	800f796 <xQueueGenericSend+0xd2>
		prvLockQueue( pxQueue );
 800f764:	4643      	mov	r3, r8
 800f766:	6463      	str	r3, [r4, #68]	; 0x44
 800f768:	e01e      	b.n	800f7a8 <xQueueGenericSend+0xe4>
 800f76a:	4643      	mov	r3, r8
 800f76c:	64a3      	str	r3, [r4, #72]	; 0x48
 800f76e:	e01e      	b.n	800f7ae <xQueueGenericSend+0xea>
				prvUnlockQueue( pxQueue );
 800f770:	0020      	movs	r0, r4
 800f772:	f7ff fefb 	bl	800f56c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f776:	f000 fccb 	bl	8010110 <xTaskResumeAll>
 800f77a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800f77c:	f001 fb7e 	bl	8010e7c <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f780:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f782:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f784:	4293      	cmp	r3, r2
 800f786:	d3c7      	bcc.n	800f718 <xQueueGenericSend+0x54>
 800f788:	2d02      	cmp	r5, #2
 800f78a:	d0c5      	beq.n	800f718 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f78c:	9b01      	ldr	r3, [sp, #4]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d0e0      	beq.n	800f754 <xQueueGenericSend+0x90>
				else if( xEntryTimeSet == pdFALSE )
 800f792:	2f00      	cmp	r7, #0
 800f794:	d0e2      	beq.n	800f75c <xQueueGenericSend+0x98>
		taskEXIT_CRITICAL();
 800f796:	f001 fb7d 	bl	8010e94 <vPortExitCritical>
		vTaskSuspendAll();
 800f79a:	f000 fc11 	bl	800ffc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f79e:	f001 fb6d 	bl	8010e7c <vPortEnterCritical>
 800f7a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	d0dd      	beq.n	800f764 <xQueueGenericSend+0xa0>
 800f7a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	d0dd      	beq.n	800f76a <xQueueGenericSend+0xa6>
 800f7ae:	f001 fb71 	bl	8010e94 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7b2:	a901      	add	r1, sp, #4
 800f7b4:	a802      	add	r0, sp, #8
 800f7b6:	f000 fedb 	bl	8010570 <xTaskCheckForTimeOut>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d117      	bne.n	800f7ee <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f7be:	f001 fb5d 	bl	8010e7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f7c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f7c4:	4699      	mov	r9, r3
 800f7c6:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f7c8:	f001 fb64 	bl	8010e94 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f7cc:	45b9      	cmp	r9, r7
 800f7ce:	d1cf      	bne.n	800f770 <xQueueGenericSend+0xac>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f7d0:	0020      	movs	r0, r4
 800f7d2:	3010      	adds	r0, #16
 800f7d4:	9901      	ldr	r1, [sp, #4]
 800f7d6:	f000 fe3d 	bl	8010454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f7da:	0020      	movs	r0, r4
 800f7dc:	f7ff fec6 	bl	800f56c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f7e0:	f000 fc96 	bl	8010110 <xTaskResumeAll>
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	d1c8      	bne.n	800f77a <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
 800f7e8:	f001 fb3c 	bl	8010e64 <vPortYield>
 800f7ec:	e7c5      	b.n	800f77a <xQueueGenericSend+0xb6>
			prvUnlockQueue( pxQueue );
 800f7ee:	0020      	movs	r0, r4
 800f7f0:	f7ff febc 	bl	800f56c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7f4:	f000 fc8c 	bl	8010110 <xTaskResumeAll>
			return errQUEUE_FULL;
 800f7f8:	2000      	movs	r0, #0
 800f7fa:	e79a      	b.n	800f732 <xQueueGenericSend+0x6e>

0800f7fc <xQueueGenericSendFromISR>:
{
 800f7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7fe:	b083      	sub	sp, #12
 800f800:	0004      	movs	r4, r0
 800f802:	000d      	movs	r5, r1
 800f804:	0017      	movs	r7, r2
 800f806:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 800f808:	2800      	cmp	r0, #0
 800f80a:	d008      	beq.n	800f81e <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f80c:	2900      	cmp	r1, #0
 800f80e:	d008      	beq.n	800f822 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f810:	2e02      	cmp	r6, #2
 800f812:	d12d      	bne.n	800f870 <xQueueGenericSendFromISR+0x74>
 800f814:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f816:	2b01      	cmp	r3, #1
 800f818:	d019      	beq.n	800f84e <xQueueGenericSendFromISR+0x52>
 800f81a:	b672      	cpsid	i
 800f81c:	e7fe      	b.n	800f81c <xQueueGenericSendFromISR+0x20>
	configASSERT( pxQueue );
 800f81e:	b672      	cpsid	i
 800f820:	e7fe      	b.n	800f820 <xQueueGenericSendFromISR+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f822:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f824:	2b00      	cmp	r3, #0
 800f826:	d0f3      	beq.n	800f810 <xQueueGenericSendFromISR+0x14>
 800f828:	b672      	cpsid	i
 800f82a:	e7fe      	b.n	800f82a <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800f82c:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f82e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f830:	2b00      	cmp	r3, #0
 800f832:	d025      	beq.n	800f880 <xQueueGenericSendFromISR+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f834:	0020      	movs	r0, r4
 800f836:	3024      	adds	r0, #36	; 0x24
 800f838:	f000 fe4a 	bl	80104d0 <xTaskRemoveFromEventList>
 800f83c:	2800      	cmp	r0, #0
 800f83e:	d01f      	beq.n	800f880 <xQueueGenericSendFromISR+0x84>
							if( pxHigherPriorityTaskWoken != NULL )
 800f840:	2f00      	cmp	r7, #0
 800f842:	d002      	beq.n	800f84a <xQueueGenericSendFromISR+0x4e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f844:	2301      	movs	r3, #1
 800f846:	603b      	str	r3, [r7, #0]
 800f848:	e01a      	b.n	800f880 <xQueueGenericSendFromISR+0x84>
			xReturn = pdPASS;
 800f84a:	2501      	movs	r5, #1
 800f84c:	e018      	b.n	800f880 <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f84e:	f001 fb31 	bl	8010eb4 <ulSetInterruptMaskFromISR>
 800f852:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f854:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f856:	0032      	movs	r2, r6
 800f858:	0029      	movs	r1, r5
 800f85a:	0020      	movs	r0, r4
 800f85c:	f7ff fe36 	bl	800f4cc <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f860:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f862:	3301      	adds	r3, #1
 800f864:	d0e2      	beq.n	800f82c <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800f866:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f868:	3301      	adds	r3, #1
 800f86a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f86c:	2501      	movs	r5, #1
 800f86e:	e007      	b.n	800f880 <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f870:	f001 fb20 	bl	8010eb4 <ulSetInterruptMaskFromISR>
 800f874:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f876:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f878:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d3eb      	bcc.n	800f856 <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800f87e:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f880:	9801      	ldr	r0, [sp, #4]
 800f882:	f001 fb1c 	bl	8010ebe <vClearInterruptMaskFromISR>
}
 800f886:	0028      	movs	r0, r5
 800f888:	b003      	add	sp, #12
 800f88a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f88c <xQueueGiveFromISR>:
{
 800f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88e:	0004      	movs	r4, r0
 800f890:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 800f892:	2800      	cmp	r0, #0
 800f894:	d004      	beq.n	800f8a0 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f896:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d003      	beq.n	800f8a4 <xQueueGiveFromISR+0x18>
 800f89c:	b672      	cpsid	i
 800f89e:	e7fe      	b.n	800f89e <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800f8a0:	b672      	cpsid	i
 800f8a2:	e7fe      	b.n	800f8a2 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f8a4:	6803      	ldr	r3, [r0, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d016      	beq.n	800f8d8 <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f8aa:	f001 fb03 	bl	8010eb4 <ulSetInterruptMaskFromISR>
 800f8ae:	0007      	movs	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f8b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800f8b2:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f8b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d209      	bcs.n	800f8ce <xQueueGiveFromISR+0x42>
			++( pxQueue->uxMessagesWaiting );
 800f8ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f8bc:	3301      	adds	r3, #1
 800f8be:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f8c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	d00d      	beq.n	800f8e2 <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800f8c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f8cc:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f8ce:	0038      	movs	r0, r7
 800f8d0:	f001 faf5 	bl	8010ebe <vClearInterruptMaskFromISR>
}
 800f8d4:	0028      	movs	r0, r5
 800f8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f8d8:	6843      	ldr	r3, [r0, #4]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d0e5      	beq.n	800f8aa <xQueueGiveFromISR+0x1e>
 800f8de:	b672      	cpsid	i
 800f8e0:	e7fe      	b.n	800f8e0 <xQueueGiveFromISR+0x54>
			xReturn = pdPASS;
 800f8e2:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d0f1      	beq.n	800f8ce <xQueueGiveFromISR+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8ea:	0020      	movs	r0, r4
 800f8ec:	3024      	adds	r0, #36	; 0x24
 800f8ee:	f000 fdef 	bl	80104d0 <xTaskRemoveFromEventList>
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	d0eb      	beq.n	800f8ce <xQueueGiveFromISR+0x42>
							if( pxHigherPriorityTaskWoken != NULL )
 800f8f6:	2e00      	cmp	r6, #0
 800f8f8:	d002      	beq.n	800f900 <xQueueGiveFromISR+0x74>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	6033      	str	r3, [r6, #0]
 800f8fe:	e7e6      	b.n	800f8ce <xQueueGiveFromISR+0x42>
			xReturn = pdPASS;
 800f900:	2501      	movs	r5, #1
 800f902:	e7e4      	b.n	800f8ce <xQueueGiveFromISR+0x42>

0800f904 <xQueueGenericReceive>:
{
 800f904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f906:	46c6      	mov	lr, r8
 800f908:	b500      	push	{lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	0004      	movs	r4, r0
 800f90e:	000d      	movs	r5, r1
 800f910:	9201      	str	r2, [sp, #4]
 800f912:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800f914:	2800      	cmp	r0, #0
 800f916:	d00a      	beq.n	800f92e <xQueueGenericReceive+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f918:	2900      	cmp	r1, #0
 800f91a:	d00a      	beq.n	800f932 <xQueueGenericReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f91c:	f000 fe60 	bl	80105e0 <xTaskGetSchedulerState>
 800f920:	2800      	cmp	r0, #0
 800f922:	d10b      	bne.n	800f93c <xQueueGenericReceive+0x38>
 800f924:	9b01      	ldr	r3, [sp, #4]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00b      	beq.n	800f942 <xQueueGenericReceive+0x3e>
 800f92a:	b672      	cpsid	i
 800f92c:	e7fe      	b.n	800f92c <xQueueGenericReceive+0x28>
	configASSERT( pxQueue );
 800f92e:	b672      	cpsid	i
 800f930:	e7fe      	b.n	800f930 <xQueueGenericReceive+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f932:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f934:	2b00      	cmp	r3, #0
 800f936:	d0f1      	beq.n	800f91c <xQueueGenericReceive+0x18>
 800f938:	b672      	cpsid	i
 800f93a:	e7fe      	b.n	800f93a <xQueueGenericReceive+0x36>
 800f93c:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800f93e:	2600      	movs	r6, #0
 800f940:	e04d      	b.n	800f9de <xQueueGenericReceive+0xda>
 800f942:	2700      	movs	r7, #0
 800f944:	e7fb      	b.n	800f93e <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f946:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f948:	0029      	movs	r1, r5
 800f94a:	0020      	movs	r0, r4
 800f94c:	f7ff fdfc 	bl	800f548 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f950:	4643      	mov	r3, r8
 800f952:	2b00      	cmp	r3, #0
 800f954:	d11c      	bne.n	800f990 <xQueueGenericReceive+0x8c>
					--( pxQueue->uxMessagesWaiting );
 800f956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f958:	3b01      	subs	r3, #1
 800f95a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f95c:	6823      	ldr	r3, [r4, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d009      	beq.n	800f976 <xQueueGenericReceive+0x72>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f962:	6923      	ldr	r3, [r4, #16]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d10a      	bne.n	800f97e <xQueueGenericReceive+0x7a>
				taskEXIT_CRITICAL();
 800f968:	f001 fa94 	bl	8010e94 <vPortExitCritical>
				return pdPASS;
 800f96c:	2001      	movs	r0, #1
}
 800f96e:	b004      	add	sp, #16
 800f970:	bc80      	pop	{r7}
 800f972:	46b8      	mov	r8, r7
 800f974:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f976:	f000 ff8b 	bl	8010890 <pvTaskIncrementMutexHeldCount>
 800f97a:	6060      	str	r0, [r4, #4]
 800f97c:	e7f1      	b.n	800f962 <xQueueGenericReceive+0x5e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f97e:	0020      	movs	r0, r4
 800f980:	3010      	adds	r0, #16
 800f982:	f000 fda5 	bl	80104d0 <xTaskRemoveFromEventList>
 800f986:	2801      	cmp	r0, #1
 800f988:	d1ee      	bne.n	800f968 <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800f98a:	f001 fa6b 	bl	8010e64 <vPortYield>
 800f98e:	e7eb      	b.n	800f968 <xQueueGenericReceive+0x64>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f990:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f994:	2b00      	cmp	r3, #0
 800f996:	d0e7      	beq.n	800f968 <xQueueGenericReceive+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f998:	0020      	movs	r0, r4
 800f99a:	3024      	adds	r0, #36	; 0x24
 800f99c:	f000 fd98 	bl	80104d0 <xTaskRemoveFromEventList>
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	d0e1      	beq.n	800f968 <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800f9a4:	f001 fa5e 	bl	8010e64 <vPortYield>
 800f9a8:	e7de      	b.n	800f968 <xQueueGenericReceive+0x64>
					taskEXIT_CRITICAL();
 800f9aa:	f001 fa73 	bl	8010e94 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	e7dd      	b.n	800f96e <xQueueGenericReceive+0x6a>
					vTaskSetTimeOutState( &xTimeOut );
 800f9b2:	a802      	add	r0, sp, #8
 800f9b4:	f000 fdcc 	bl	8010550 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f9b8:	e01b      	b.n	800f9f2 <xQueueGenericReceive+0xee>
		prvLockQueue( pxQueue );
 800f9ba:	6466      	str	r6, [r4, #68]	; 0x44
 800f9bc:	e022      	b.n	800fa04 <xQueueGenericReceive+0x100>
 800f9be:	64a6      	str	r6, [r4, #72]	; 0x48
 800f9c0:	e023      	b.n	800fa0a <xQueueGenericReceive+0x106>
						taskENTER_CRITICAL();
 800f9c2:	f001 fa5b 	bl	8010e7c <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f9c6:	6860      	ldr	r0, [r4, #4]
 800f9c8:	f000 fe1a 	bl	8010600 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f9cc:	f001 fa62 	bl	8010e94 <vPortExitCritical>
 800f9d0:	e02d      	b.n	800fa2e <xQueueGenericReceive+0x12a>
				prvUnlockQueue( pxQueue );
 800f9d2:	0020      	movs	r0, r4
 800f9d4:	f7ff fdca 	bl	800f56c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9d8:	f000 fb9a 	bl	8010110 <xTaskResumeAll>
 800f9dc:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800f9de:	f001 fa4d 	bl	8010e7c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f9e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d1ae      	bne.n	800f946 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f9e8:	9b01      	ldr	r3, [sp, #4]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d0dd      	beq.n	800f9aa <xQueueGenericReceive+0xa6>
				else if( xEntryTimeSet == pdFALSE )
 800f9ee:	2f00      	cmp	r7, #0
 800f9f0:	d0df      	beq.n	800f9b2 <xQueueGenericReceive+0xae>
		taskEXIT_CRITICAL();
 800f9f2:	f001 fa4f 	bl	8010e94 <vPortExitCritical>
		vTaskSuspendAll();
 800f9f6:	f000 fae3 	bl	800ffc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f9fa:	f001 fa3f 	bl	8010e7c <vPortEnterCritical>
 800f9fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa00:	3301      	adds	r3, #1
 800fa02:	d0da      	beq.n	800f9ba <xQueueGenericReceive+0xb6>
 800fa04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fa06:	3301      	adds	r3, #1
 800fa08:	d0d9      	beq.n	800f9be <xQueueGenericReceive+0xba>
 800fa0a:	f001 fa43 	bl	8010e94 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa0e:	a901      	add	r1, sp, #4
 800fa10:	a802      	add	r0, sp, #8
 800fa12:	f000 fdad 	bl	8010570 <xTaskCheckForTimeOut>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	d118      	bne.n	800fa4c <xQueueGenericReceive+0x148>
	taskENTER_CRITICAL();
 800fa1a:	f001 fa2f 	bl	8010e7c <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fa1e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800fa20:	f001 fa38 	bl	8010e94 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa24:	2f00      	cmp	r7, #0
 800fa26:	d1d4      	bne.n	800f9d2 <xQueueGenericReceive+0xce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa28:	6823      	ldr	r3, [r4, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d0c9      	beq.n	800f9c2 <xQueueGenericReceive+0xbe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fa2e:	0020      	movs	r0, r4
 800fa30:	3024      	adds	r0, #36	; 0x24
 800fa32:	9901      	ldr	r1, [sp, #4]
 800fa34:	f000 fd0e 	bl	8010454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fa38:	0020      	movs	r0, r4
 800fa3a:	f7ff fd97 	bl	800f56c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa3e:	f000 fb67 	bl	8010110 <xTaskResumeAll>
 800fa42:	2800      	cmp	r0, #0
 800fa44:	d1ca      	bne.n	800f9dc <xQueueGenericReceive+0xd8>
					portYIELD_WITHIN_API();
 800fa46:	f001 fa0d 	bl	8010e64 <vPortYield>
 800fa4a:	e7c7      	b.n	800f9dc <xQueueGenericReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800fa4c:	0020      	movs	r0, r4
 800fa4e:	f7ff fd8d 	bl	800f56c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa52:	f000 fb5d 	bl	8010110 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800fa56:	2000      	movs	r0, #0
 800fa58:	e789      	b.n	800f96e <xQueueGenericReceive+0x6a>

0800fa5a <xQueueReceiveFromISR>:
{
 800fa5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa5c:	46c6      	mov	lr, r8
 800fa5e:	b500      	push	{lr}
 800fa60:	0004      	movs	r4, r0
 800fa62:	000f      	movs	r7, r1
 800fa64:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800fa66:	2800      	cmp	r0, #0
 800fa68:	d00f      	beq.n	800fa8a <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa6a:	2900      	cmp	r1, #0
 800fa6c:	d00f      	beq.n	800fa8e <xQueueReceiveFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa6e:	f001 fa21 	bl	8010eb4 <ulSetInterruptMaskFromISR>
 800fa72:	4680      	mov	r8, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800fa76:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d10d      	bne.n	800fa98 <xQueueReceiveFromISR+0x3e>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800fa7c:	4640      	mov	r0, r8
 800fa7e:	f001 fa1e 	bl	8010ebe <vClearInterruptMaskFromISR>
}
 800fa82:	0028      	movs	r0, r5
 800fa84:	bc80      	pop	{r7}
 800fa86:	46b8      	mov	r8, r7
 800fa88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800fa8a:	b672      	cpsid	i
 800fa8c:	e7fe      	b.n	800fa8c <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d0ec      	beq.n	800fa6e <xQueueReceiveFromISR+0x14>
 800fa94:	b672      	cpsid	i
 800fa96:	e7fe      	b.n	800fa96 <xQueueReceiveFromISR+0x3c>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fa98:	0039      	movs	r1, r7
 800fa9a:	0020      	movs	r0, r4
 800fa9c:	f7ff fd54 	bl	800f548 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800faa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800faa2:	3b01      	subs	r3, #1
 800faa4:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800faa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800faa8:	3301      	adds	r3, #1
 800faaa:	d004      	beq.n	800fab6 <xQueueReceiveFromISR+0x5c>
				++( pxQueue->xRxLock );
 800faac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800faae:	3301      	adds	r3, #1
 800fab0:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800fab2:	2501      	movs	r5, #1
 800fab4:	e7e2      	b.n	800fa7c <xQueueReceiveFromISR+0x22>
 800fab6:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fab8:	6923      	ldr	r3, [r4, #16]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d0de      	beq.n	800fa7c <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fabe:	0020      	movs	r0, r4
 800fac0:	3010      	adds	r0, #16
 800fac2:	f000 fd05 	bl	80104d0 <xTaskRemoveFromEventList>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d0d8      	beq.n	800fa7c <xQueueReceiveFromISR+0x22>
						if( pxHigherPriorityTaskWoken != NULL )
 800faca:	2e00      	cmp	r6, #0
 800facc:	d002      	beq.n	800fad4 <xQueueReceiveFromISR+0x7a>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800face:	2301      	movs	r3, #1
 800fad0:	6033      	str	r3, [r6, #0]
 800fad2:	e7d3      	b.n	800fa7c <xQueueReceiveFromISR+0x22>
			xReturn = pdPASS;
 800fad4:	2501      	movs	r5, #1
 800fad6:	e7d1      	b.n	800fa7c <xQueueReceiveFromISR+0x22>

0800fad8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fad8:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fada:	4a08      	ldr	r2, [pc, #32]	; (800fafc <vQueueAddToRegistry+0x24>)
 800fadc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fade:	6814      	ldr	r4, [r2, #0]
 800fae0:	2c00      	cmp	r4, #0
 800fae2:	d004      	beq.n	800faee <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fae4:	3301      	adds	r3, #1
 800fae6:	3208      	adds	r2, #8
 800fae8:	2b08      	cmp	r3, #8
 800faea:	d1f8      	bne.n	800fade <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800faec:	bd10      	pop	{r4, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800faee:	4a03      	ldr	r2, [pc, #12]	; (800fafc <vQueueAddToRegistry+0x24>)
 800faf0:	00db      	lsls	r3, r3, #3
 800faf2:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800faf4:	18d3      	adds	r3, r2, r3
 800faf6:	6058      	str	r0, [r3, #4]
				break;
 800faf8:	e7f8      	b.n	800faec <vQueueAddToRegistry+0x14>
 800fafa:	46c0      	nop			; (mov r8, r8)
 800fafc:	20007198 	.word	0x20007198

0800fb00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800fb00:	b570      	push	{r4, r5, r6, lr}
 800fb02:	0004      	movs	r4, r0
 800fb04:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fb06:	f001 f9b9 	bl	8010e7c <vPortEnterCritical>
 800fb0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	d00b      	beq.n	800fb28 <vQueueWaitForMessageRestricted+0x28>
 800fb10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fb12:	3301      	adds	r3, #1
 800fb14:	d00b      	beq.n	800fb2e <vQueueWaitForMessageRestricted+0x2e>
 800fb16:	f001 f9bd 	bl	8010e94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fb1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d009      	beq.n	800fb34 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fb20:	0020      	movs	r0, r4
 800fb22:	f7ff fd23 	bl	800f56c <prvUnlockQueue>
	}
 800fb26:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800fb28:	2300      	movs	r3, #0
 800fb2a:	6463      	str	r3, [r4, #68]	; 0x44
 800fb2c:	e7f0      	b.n	800fb10 <vQueueWaitForMessageRestricted+0x10>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	64a3      	str	r3, [r4, #72]	; 0x48
 800fb32:	e7f0      	b.n	800fb16 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fb34:	0020      	movs	r0, r4
 800fb36:	3024      	adds	r0, #36	; 0x24
 800fb38:	0029      	movs	r1, r5
 800fb3a:	f000 fcaf 	bl	801049c <vTaskPlaceOnEventListRestricted>
 800fb3e:	e7ef      	b.n	800fb20 <vQueueWaitForMessageRestricted+0x20>

0800fb40 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800fb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb42:	46de      	mov	lr, fp
 800fb44:	4657      	mov	r7, sl
 800fb46:	464e      	mov	r6, r9
 800fb48:	4645      	mov	r5, r8
 800fb4a:	b5e0      	push	{r5, r6, r7, lr}
 800fb4c:	0004      	movs	r4, r0
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800fb4e:	680b      	ldr	r3, [r1, #0]
 800fb50:	469b      	mov	fp, r3
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d045      	beq.n	800fbe2 <prvListTaskWithinSingleList+0xa2>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800fb56:	684b      	ldr	r3, [r1, #4]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	604b      	str	r3, [r1, #4]
 800fb5c:	2008      	movs	r0, #8
 800fb5e:	4684      	mov	ip, r0
 800fb60:	448c      	add	ip, r1
 800fb62:	4563      	cmp	r3, ip
 800fb64:	d007      	beq.n	800fb76 <prvListTaskWithinSingleList+0x36>
 800fb66:	684b      	ldr	r3, [r1, #4]
 800fb68:	68db      	ldr	r3, [r3, #12]
 800fb6a:	4698      	mov	r8, r3
	UBaseType_t uxTask = 0;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	469b      	mov	fp, r3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800fb70:	3302      	adds	r3, #2
 800fb72:	4699      	mov	r9, r3
 800fb74:	e01c      	b.n	800fbb0 <prvListTaskWithinSingleList+0x70>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800fb76:	68cb      	ldr	r3, [r1, #12]
 800fb78:	604b      	str	r3, [r1, #4]
 800fb7a:	e7f4      	b.n	800fb66 <prvListTaskWithinSingleList+0x26>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	604b      	str	r3, [r1, #4]
 800fb80:	e01b      	b.n	800fbba <prvListTaskWithinSingleList+0x7a>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800fb82:	4648      	mov	r0, r9
 800fb84:	7320      	strb	r0, [r4, #12]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800fb86:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800fb88:	6175      	str	r5, [r6, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800fb8a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800fb8c:	61b5      	str	r5, [r6, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800fb8e:	6b1f      	ldr	r7, [r3, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fb90:	783d      	ldrb	r5, [r7, #0]
 800fb92:	2da5      	cmp	r5, #165	; 0xa5
 800fb94:	d123      	bne.n	800fbde <prvListTaskWithinSingleList+0x9e>
	uint32_t ulCount = 0U;
 800fb96:	2500      	movs	r5, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800fb98:	3501      	adds	r5, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fb9a:	5d78      	ldrb	r0, [r7, r5]
 800fb9c:	28a5      	cmp	r0, #165	; 0xa5
 800fb9e:	d0fb      	beq.n	800fb98 <prvListTaskWithinSingleList+0x58>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800fba0:	08ad      	lsrs	r5, r5, #2

		return ( uint16_t ) ulCount;
 800fba2:	83b5      	strh	r5, [r6, #28]
				uxTask++;
 800fba4:	2001      	movs	r0, #1
 800fba6:	4682      	mov	sl, r0
 800fba8:	44d3      	add	fp, sl
			} while( pxNextTCB != pxFirstTCB );
 800fbaa:	3420      	adds	r4, #32
 800fbac:	4598      	cmp	r8, r3
 800fbae:	d018      	beq.n	800fbe2 <prvListTaskWithinSingleList+0xa2>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800fbb0:	684b      	ldr	r3, [r1, #4]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	604b      	str	r3, [r1, #4]
 800fbb6:	459c      	cmp	ip, r3
 800fbb8:	d0e0      	beq.n	800fb7c <prvListTaskWithinSingleList+0x3c>
 800fbba:	684b      	ldr	r3, [r1, #4]
 800fbbc:	68db      	ldr	r3, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800fbbe:	0026      	movs	r6, r4
 800fbc0:	6023      	str	r3, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800fbc2:	001d      	movs	r5, r3
 800fbc4:	3534      	adds	r5, #52	; 0x34
 800fbc6:	6065      	str	r5, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800fbc8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800fbca:	60a5      	str	r5, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800fbcc:	7322      	strb	r2, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800fbce:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800fbd0:	6125      	str	r5, [r4, #16]
					if( eState == eSuspended )
 800fbd2:	2a03      	cmp	r2, #3
 800fbd4:	d1d7      	bne.n	800fb86 <prvListTaskWithinSingleList+0x46>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800fbd6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800fbd8:	2d00      	cmp	r5, #0
 800fbda:	d1d2      	bne.n	800fb82 <prvListTaskWithinSingleList+0x42>
 800fbdc:	e7d3      	b.n	800fb86 <prvListTaskWithinSingleList+0x46>
	uint32_t ulCount = 0U;
 800fbde:	2500      	movs	r5, #0
 800fbe0:	e7de      	b.n	800fba0 <prvListTaskWithinSingleList+0x60>
	}
 800fbe2:	4658      	mov	r0, fp
 800fbe4:	bcf0      	pop	{r4, r5, r6, r7}
 800fbe6:	46bb      	mov	fp, r7
 800fbe8:	46b2      	mov	sl, r6
 800fbea:	46a9      	mov	r9, r5
 800fbec:	46a0      	mov	r8, r4
 800fbee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbf0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbf0:	4b08      	ldr	r3, [pc, #32]	; (800fc14 <prvResetNextTaskUnblockTime+0x24>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d104      	bne.n	800fc04 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fbfa:	4b07      	ldr	r3, [pc, #28]	; (800fc18 <prvResetNextTaskUnblockTime+0x28>)
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	4252      	negs	r2, r2
 800fc00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800fc02:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fc04:	4b03      	ldr	r3, [pc, #12]	; (800fc14 <prvResetNextTaskUnblockTime+0x24>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	685a      	ldr	r2, [r3, #4]
 800fc0e:	4b02      	ldr	r3, [pc, #8]	; (800fc18 <prvResetNextTaskUnblockTime+0x28>)
 800fc10:	601a      	str	r2, [r3, #0]
}
 800fc12:	e7f6      	b.n	800fc02 <prvResetNextTaskUnblockTime+0x12>
 800fc14:	200020b4 	.word	0x200020b4
 800fc18:	200000c8 	.word	0x200000c8

0800fc1c <prvAddCurrentTaskToDelayedList>:
{
 800fc1c:	b510      	push	{r4, lr}
 800fc1e:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800fc20:	4b0e      	ldr	r3, [pc, #56]	; (800fc5c <prvAddCurrentTaskToDelayedList+0x40>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800fc26:	4b0e      	ldr	r3, [pc, #56]	; (800fc60 <prvAddCurrentTaskToDelayedList+0x44>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4283      	cmp	r3, r0
 800fc2c:	d907      	bls.n	800fc3e <prvAddCurrentTaskToDelayedList+0x22>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fc2e:	4b0d      	ldr	r3, [pc, #52]	; (800fc64 <prvAddCurrentTaskToDelayedList+0x48>)
 800fc30:	6818      	ldr	r0, [r3, #0]
 800fc32:	4b0a      	ldr	r3, [pc, #40]	; (800fc5c <prvAddCurrentTaskToDelayedList+0x40>)
 800fc34:	6819      	ldr	r1, [r3, #0]
 800fc36:	3104      	adds	r1, #4
 800fc38:	f7ff fc1f 	bl	800f47a <vListInsert>
}
 800fc3c:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fc3e:	4b0a      	ldr	r3, [pc, #40]	; (800fc68 <prvAddCurrentTaskToDelayedList+0x4c>)
 800fc40:	6818      	ldr	r0, [r3, #0]
 800fc42:	4b06      	ldr	r3, [pc, #24]	; (800fc5c <prvAddCurrentTaskToDelayedList+0x40>)
 800fc44:	6819      	ldr	r1, [r3, #0]
 800fc46:	3104      	adds	r1, #4
 800fc48:	f7ff fc17 	bl	800f47a <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800fc4c:	4b07      	ldr	r3, [pc, #28]	; (800fc6c <prvAddCurrentTaskToDelayedList+0x50>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	42a3      	cmp	r3, r4
 800fc52:	d9f3      	bls.n	800fc3c <prvAddCurrentTaskToDelayedList+0x20>
			xNextTaskUnblockTime = xTimeToWake;
 800fc54:	4b05      	ldr	r3, [pc, #20]	; (800fc6c <prvAddCurrentTaskToDelayedList+0x50>)
 800fc56:	601c      	str	r4, [r3, #0]
}
 800fc58:	e7f0      	b.n	800fc3c <prvAddCurrentTaskToDelayedList+0x20>
 800fc5a:	46c0      	nop			; (mov r8, r8)
 800fc5c:	200020b0 	.word	0x200020b0
 800fc60:	200021d0 	.word	0x200021d0
 800fc64:	200020b8 	.word	0x200020b8
 800fc68:	200020b4 	.word	0x200020b4
 800fc6c:	200000c8 	.word	0x200000c8

0800fc70 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800fc70:	b510      	push	{r4, lr}
 800fc72:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800fc74:	f004 fd85 	bl	8014782 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800fc78:	0020      	movs	r0, r4
 800fc7a:	f7f0 fa4d 	bl	8000118 <strlen>
 800fc7e:	280b      	cmp	r0, #11
 800fc80:	dc08      	bgt.n	800fc94 <prvWriteNameToBuffer+0x24>
 800fc82:	1823      	adds	r3, r4, r0
 800fc84:	0021      	movs	r1, r4
 800fc86:	310c      	adds	r1, #12
		{
			pcBuffer[ x ] = ' ';
 800fc88:	2220      	movs	r2, #32
 800fc8a:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	428b      	cmp	r3, r1
 800fc90:	d1fb      	bne.n	800fc8a <prvWriteNameToBuffer+0x1a>
 800fc92:	200c      	movs	r0, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800fc94:	1820      	adds	r0, r4, r0
 800fc96:	2300      	movs	r3, #0
 800fc98:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800fc9a:	bd10      	pop	{r4, pc}

0800fc9c <xTaskGenericCreate>:
{
 800fc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc9e:	46de      	mov	lr, fp
 800fca0:	4657      	mov	r7, sl
 800fca2:	464e      	mov	r6, r9
 800fca4:	4645      	mov	r5, r8
 800fca6:	b5e0      	push	{r5, r6, r7, lr}
 800fca8:	b083      	sub	sp, #12
 800fcaa:	9001      	str	r0, [sp, #4]
 800fcac:	4688      	mov	r8, r1
 800fcae:	0017      	movs	r7, r2
 800fcb0:	469a      	mov	sl, r3
 800fcb2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fcb4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	d003      	beq.n	800fcc2 <xTaskGenericCreate+0x26>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800fcba:	2e06      	cmp	r6, #6
 800fcbc:	d903      	bls.n	800fcc6 <xTaskGenericCreate+0x2a>
 800fcbe:	b672      	cpsid	i
 800fcc0:	e7fe      	b.n	800fcc0 <xTaskGenericCreate+0x24>
	configASSERT( pxTaskCode );
 800fcc2:	b672      	cpsid	i
 800fcc4:	e7fe      	b.n	800fcc4 <xTaskGenericCreate+0x28>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcc6:	2d00      	cmp	r5, #0
 800fcc8:	d05b      	beq.n	800fd82 <xTaskGenericCreate+0xe6>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800fcca:	2060      	movs	r0, #96	; 0x60
 800fccc:	f001 f958 	bl	8010f80 <pvPortMalloc>
 800fcd0:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800fcd2:	d064      	beq.n	800fd9e <xTaskGenericCreate+0x102>
				pxNewTCB->pxStack = pxStack;
 800fcd4:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800fcd6:	00ba      	lsls	r2, r7, #2
 800fcd8:	21a5      	movs	r1, #165	; 0xa5
 800fcda:	0028      	movs	r0, r5
 800fcdc:	f004 fb21 	bl	8014322 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800fce0:	4b5e      	ldr	r3, [pc, #376]	; (800fe5c <xTaskGenericCreate+0x1c0>)
 800fce2:	18fd      	adds	r5, r7, r3
 800fce4:	00ad      	lsls	r5, r5, #2
 800fce6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fce8:	469c      	mov	ip, r3
 800fcea:	4465      	add	r5, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800fcec:	2307      	movs	r3, #7
 800fcee:	439d      	bics	r5, r3
 800fcf0:	46a9      	mov	r9, r5
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcf2:	2300      	movs	r3, #0
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800fcf4:	0021      	movs	r1, r4
 800fcf6:	3134      	adds	r1, #52	; 0x34
 800fcf8:	4642      	mov	r2, r8
 800fcfa:	5cd2      	ldrb	r2, [r2, r3]
 800fcfc:	54ca      	strb	r2, [r1, r3]
		if( pcName[ x ] == 0x00 )
 800fcfe:	2a00      	cmp	r2, #0
 800fd00:	d002      	beq.n	800fd08 <xTaskGenericCreate+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd02:	3301      	adds	r3, #1
 800fd04:	2b0d      	cmp	r3, #13
 800fd06:	d1f7      	bne.n	800fcf8 <xTaskGenericCreate+0x5c>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd08:	2340      	movs	r3, #64	; 0x40
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fd0e:	0035      	movs	r5, r6
 800fd10:	2e06      	cmp	r6, #6
 800fd12:	d900      	bls.n	800fd16 <xTaskGenericCreate+0x7a>
 800fd14:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800fd16:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800fd18:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800fd1a:	2700      	movs	r7, #0
 800fd1c:	6527      	str	r7, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800fd1e:	1d23      	adds	r3, r4, #4
 800fd20:	469b      	mov	fp, r3
 800fd22:	0018      	movs	r0, r3
 800fd24:	f7ff fb9b 	bl	800f45e <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800fd28:	0020      	movs	r0, r4
 800fd2a:	3018      	adds	r0, #24
 800fd2c:	f7ff fb97 	bl	800f45e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800fd30:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd32:	2307      	movs	r3, #7
 800fd34:	1b5b      	subs	r3, r3, r5
 800fd36:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800fd38:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800fd3a:	6567      	str	r7, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800fd3c:	65a7      	str	r7, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800fd3e:	235c      	movs	r3, #92	; 0x5c
 800fd40:	54e7      	strb	r7, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fd42:	4652      	mov	r2, sl
 800fd44:	9901      	ldr	r1, [sp, #4]
 800fd46:	4648      	mov	r0, r9
 800fd48:	f001 f850 	bl	8010dec <pxPortInitialiseStack>
 800fd4c:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800fd4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d000      	beq.n	800fd56 <xTaskGenericCreate+0xba>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fd54:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800fd56:	f001 f891 	bl	8010e7c <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800fd5a:	4a41      	ldr	r2, [pc, #260]	; (800fe60 <xTaskGenericCreate+0x1c4>)
 800fd5c:	6813      	ldr	r3, [r2, #0]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800fd62:	4b40      	ldr	r3, [pc, #256]	; (800fe64 <xTaskGenericCreate+0x1c8>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d01d      	beq.n	800fda6 <xTaskGenericCreate+0x10a>
				if( xSchedulerRunning == pdFALSE )
 800fd6a:	4b3f      	ldr	r3, [pc, #252]	; (800fe68 <xTaskGenericCreate+0x1cc>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d11e      	bne.n	800fdb0 <xTaskGenericCreate+0x114>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800fd72:	4b3c      	ldr	r3, [pc, #240]	; (800fe64 <xTaskGenericCreate+0x1c8>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd78:	42b3      	cmp	r3, r6
 800fd7a:	d819      	bhi.n	800fdb0 <xTaskGenericCreate+0x114>
						pxCurrentTCB = pxNewTCB;
 800fd7c:	4b39      	ldr	r3, [pc, #228]	; (800fe64 <xTaskGenericCreate+0x1c8>)
 800fd7e:	601c      	str	r4, [r3, #0]
 800fd80:	e016      	b.n	800fdb0 <xTaskGenericCreate+0x114>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd82:	0090      	lsls	r0, r2, #2
 800fd84:	f001 f8fc 	bl	8010f80 <pvPortMalloc>
 800fd88:	1e05      	subs	r5, r0, #0
		if( pxStack != NULL )
 800fd8a:	d19e      	bne.n	800fcca <xTaskGenericCreate+0x2e>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fd8c:	2001      	movs	r0, #1
 800fd8e:	4240      	negs	r0, r0
}
 800fd90:	b003      	add	sp, #12
 800fd92:	bcf0      	pop	{r4, r5, r6, r7}
 800fd94:	46bb      	mov	fp, r7
 800fd96:	46b2      	mov	sl, r6
 800fd98:	46a9      	mov	r9, r5
 800fd9a:	46a0      	mov	r8, r4
 800fd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vPortFree( pxStack );
 800fd9e:	0028      	movs	r0, r5
 800fda0:	f001 f980 	bl	80110a4 <vPortFree>
	if( pxNewTCB != NULL )
 800fda4:	e7f2      	b.n	800fd8c <xTaskGenericCreate+0xf0>
				pxCurrentTCB =  pxNewTCB;
 800fda6:	4b2f      	ldr	r3, [pc, #188]	; (800fe64 <xTaskGenericCreate+0x1c8>)
 800fda8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fdaa:	6813      	ldr	r3, [r2, #0]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d023      	beq.n	800fdf8 <xTaskGenericCreate+0x15c>
			uxTaskNumber++;
 800fdb0:	4a2e      	ldr	r2, [pc, #184]	; (800fe6c <xTaskGenericCreate+0x1d0>)
 800fdb2:	6813      	ldr	r3, [r2, #0]
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fdb8:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800fdba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fdbc:	4a2c      	ldr	r2, [pc, #176]	; (800fe70 <xTaskGenericCreate+0x1d4>)
 800fdbe:	6812      	ldr	r2, [r2, #0]
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d901      	bls.n	800fdc8 <xTaskGenericCreate+0x12c>
 800fdc4:	4a2a      	ldr	r2, [pc, #168]	; (800fe70 <xTaskGenericCreate+0x1d4>)
 800fdc6:	6013      	str	r3, [r2, #0]
 800fdc8:	0098      	lsls	r0, r3, #2
 800fdca:	18c0      	adds	r0, r0, r3
 800fdcc:	0080      	lsls	r0, r0, #2
 800fdce:	4b29      	ldr	r3, [pc, #164]	; (800fe74 <xTaskGenericCreate+0x1d8>)
 800fdd0:	18c0      	adds	r0, r0, r3
 800fdd2:	4659      	mov	r1, fp
 800fdd4:	f7ff fb46 	bl	800f464 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800fdd8:	f001 f85c 	bl	8010e94 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800fddc:	4b22      	ldr	r3, [pc, #136]	; (800fe68 <xTaskGenericCreate+0x1cc>)
 800fdde:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800fde0:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d0d4      	beq.n	800fd90 <xTaskGenericCreate+0xf4>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800fde6:	4b1f      	ldr	r3, [pc, #124]	; (800fe64 <xTaskGenericCreate+0x1c8>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdec:	42b3      	cmp	r3, r6
 800fdee:	d2cf      	bcs.n	800fd90 <xTaskGenericCreate+0xf4>
				taskYIELD_IF_USING_PREEMPTION();
 800fdf0:	f001 f838 	bl	8010e64 <vPortYield>
			xReturn = pdPASS;
 800fdf4:	2001      	movs	r0, #1
 800fdf6:	e7cb      	b.n	800fd90 <xTaskGenericCreate+0xf4>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fdf8:	4d1e      	ldr	r5, [pc, #120]	; (800fe74 <xTaskGenericCreate+0x1d8>)
 800fdfa:	0028      	movs	r0, r5
 800fdfc:	f7ff fb24 	bl	800f448 <vListInitialise>
 800fe00:	0028      	movs	r0, r5
 800fe02:	3014      	adds	r0, #20
 800fe04:	f7ff fb20 	bl	800f448 <vListInitialise>
 800fe08:	0028      	movs	r0, r5
 800fe0a:	3028      	adds	r0, #40	; 0x28
 800fe0c:	f7ff fb1c 	bl	800f448 <vListInitialise>
 800fe10:	0028      	movs	r0, r5
 800fe12:	303c      	adds	r0, #60	; 0x3c
 800fe14:	f7ff fb18 	bl	800f448 <vListInitialise>
 800fe18:	0028      	movs	r0, r5
 800fe1a:	3050      	adds	r0, #80	; 0x50
 800fe1c:	f7ff fb14 	bl	800f448 <vListInitialise>
 800fe20:	0028      	movs	r0, r5
 800fe22:	3064      	adds	r0, #100	; 0x64
 800fe24:	f7ff fb10 	bl	800f448 <vListInitialise>
 800fe28:	0028      	movs	r0, r5
 800fe2a:	3078      	adds	r0, #120	; 0x78
 800fe2c:	f7ff fb0c 	bl	800f448 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 800fe30:	4f11      	ldr	r7, [pc, #68]	; (800fe78 <xTaskGenericCreate+0x1dc>)
 800fe32:	0038      	movs	r0, r7
 800fe34:	f7ff fb08 	bl	800f448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fe38:	4d10      	ldr	r5, [pc, #64]	; (800fe7c <xTaskGenericCreate+0x1e0>)
 800fe3a:	0028      	movs	r0, r5
 800fe3c:	f7ff fb04 	bl	800f448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fe40:	480f      	ldr	r0, [pc, #60]	; (800fe80 <xTaskGenericCreate+0x1e4>)
 800fe42:	f7ff fb01 	bl	800f448 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800fe46:	480f      	ldr	r0, [pc, #60]	; (800fe84 <xTaskGenericCreate+0x1e8>)
 800fe48:	f7ff fafe 	bl	800f448 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800fe4c:	480e      	ldr	r0, [pc, #56]	; (800fe88 <xTaskGenericCreate+0x1ec>)
 800fe4e:	f7ff fafb 	bl	800f448 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800fe52:	4b0e      	ldr	r3, [pc, #56]	; (800fe8c <xTaskGenericCreate+0x1f0>)
 800fe54:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fe56:	4b0e      	ldr	r3, [pc, #56]	; (800fe90 <xTaskGenericCreate+0x1f4>)
 800fe58:	601d      	str	r5, [r3, #0]
}
 800fe5a:	e7a9      	b.n	800fdb0 <xTaskGenericCreate+0x114>
 800fe5c:	3fffffff 	.word	0x3fffffff
 800fe60:	2000214c 	.word	0x2000214c
 800fe64:	200020b0 	.word	0x200020b0
 800fe68:	200021a4 	.word	0x200021a4
 800fe6c:	20002158 	.word	0x20002158
 800fe70:	20002160 	.word	0x20002160
 800fe74:	200020bc 	.word	0x200020bc
 800fe78:	20002164 	.word	0x20002164
 800fe7c:	20002178 	.word	0x20002178
 800fe80:	20002190 	.word	0x20002190
 800fe84:	200021bc 	.word	0x200021bc
 800fe88:	200021a8 	.word	0x200021a8
 800fe8c:	200020b4 	.word	0x200020b4
 800fe90:	200020b8 	.word	0x200020b8

0800fe94 <uxTaskPriorityGet>:
	{
 800fe94:	b510      	push	{r4, lr}
 800fe96:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800fe98:	f000 fff0 	bl	8010e7c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800fe9c:	2c00      	cmp	r4, #0
 800fe9e:	d004      	beq.n	800feaa <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800fea0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800fea2:	f000 fff7 	bl	8010e94 <vPortExitCritical>
	}
 800fea6:	0020      	movs	r0, r4
 800fea8:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800feaa:	4b01      	ldr	r3, [pc, #4]	; (800feb0 <uxTaskPriorityGet+0x1c>)
 800feac:	681c      	ldr	r4, [r3, #0]
 800feae:	e7f7      	b.n	800fea0 <uxTaskPriorityGet+0xc>
 800feb0:	200020b0 	.word	0x200020b0

0800feb4 <vTaskPrioritySet>:
	{
 800feb4:	b570      	push	{r4, r5, r6, lr}
 800feb6:	0004      	movs	r4, r0
 800feb8:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800feba:	2906      	cmp	r1, #6
 800febc:	d901      	bls.n	800fec2 <vTaskPrioritySet+0xe>
 800febe:	b672      	cpsid	i
 800fec0:	e7fe      	b.n	800fec0 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800fec2:	f000 ffdb 	bl	8010e7c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800fec6:	2c00      	cmp	r4, #0
 800fec8:	d00e      	beq.n	800fee8 <vTaskPrioritySet+0x34>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800feca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800fecc:	428d      	cmp	r5, r1
 800fece:	d027      	beq.n	800ff20 <vTaskPrioritySet+0x6c>
				if( uxNewPriority > uxCurrentBasePriority )
 800fed0:	d90d      	bls.n	800feee <vTaskPrioritySet+0x3a>
					if( pxTCB != pxCurrentTCB )
 800fed2:	4b22      	ldr	r3, [pc, #136]	; (800ff5c <vTaskPrioritySet+0xa8>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	42a3      	cmp	r3, r4
 800fed8:	d025      	beq.n	800ff26 <vTaskPrioritySet+0x72>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800feda:	4b20      	ldr	r3, [pc, #128]	; (800ff5c <vTaskPrioritySet+0xa8>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fee0:	2600      	movs	r6, #0
 800fee2:	429d      	cmp	r5, r3
 800fee4:	4176      	adcs	r6, r6
 800fee6:	e007      	b.n	800fef8 <vTaskPrioritySet+0x44>
			pxTCB = prvGetTCBFromHandle( xTask );
 800fee8:	4b1c      	ldr	r3, [pc, #112]	; (800ff5c <vTaskPrioritySet+0xa8>)
 800feea:	681c      	ldr	r4, [r3, #0]
 800feec:	e7ed      	b.n	800feca <vTaskPrioritySet+0x16>
				else if( pxTCB == pxCurrentTCB )
 800feee:	4b1b      	ldr	r3, [pc, #108]	; (800ff5c <vTaskPrioritySet+0xa8>)
 800fef0:	681e      	ldr	r6, [r3, #0]
 800fef2:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800fef4:	4273      	negs	r3, r6
 800fef6:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fef8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800fefa:	4291      	cmp	r1, r2
 800fefc:	d015      	beq.n	800ff2a <vTaskPrioritySet+0x76>
					pxTCB->uxBasePriority = uxNewPriority;
 800fefe:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff00:	69a3      	ldr	r3, [r4, #24]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	db02      	blt.n	800ff0c <vTaskPrioritySet+0x58>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff06:	2307      	movs	r3, #7
 800ff08:	1b5d      	subs	r5, r3, r5
 800ff0a:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ff0c:	0093      	lsls	r3, r2, #2
 800ff0e:	189b      	adds	r3, r3, r2
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	4a13      	ldr	r2, [pc, #76]	; (800ff60 <vTaskPrioritySet+0xac>)
 800ff14:	189b      	adds	r3, r3, r2
 800ff16:	6962      	ldr	r2, [r4, #20]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d008      	beq.n	800ff2e <vTaskPrioritySet+0x7a>
				if( xYieldRequired == pdTRUE )
 800ff1c:	2e01      	cmp	r6, #1
 800ff1e:	d01a      	beq.n	800ff56 <vTaskPrioritySet+0xa2>
		taskEXIT_CRITICAL();
 800ff20:	f000 ffb8 	bl	8010e94 <vPortExitCritical>
	}
 800ff24:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800ff26:	2600      	movs	r6, #0
 800ff28:	e7e6      	b.n	800fef8 <vTaskPrioritySet+0x44>
						pxTCB->uxPriority = uxNewPriority;
 800ff2a:	62e5      	str	r5, [r4, #44]	; 0x2c
 800ff2c:	e7e7      	b.n	800fefe <vTaskPrioritySet+0x4a>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ff2e:	1d25      	adds	r5, r4, #4
 800ff30:	0028      	movs	r0, r5
 800ff32:	f7ff fab9 	bl	800f4a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ff36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ff38:	4a0a      	ldr	r2, [pc, #40]	; (800ff64 <vTaskPrioritySet+0xb0>)
 800ff3a:	6812      	ldr	r2, [r2, #0]
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d901      	bls.n	800ff44 <vTaskPrioritySet+0x90>
 800ff40:	4a08      	ldr	r2, [pc, #32]	; (800ff64 <vTaskPrioritySet+0xb0>)
 800ff42:	6013      	str	r3, [r2, #0]
 800ff44:	0098      	lsls	r0, r3, #2
 800ff46:	18c0      	adds	r0, r0, r3
 800ff48:	0080      	lsls	r0, r0, #2
 800ff4a:	4b05      	ldr	r3, [pc, #20]	; (800ff60 <vTaskPrioritySet+0xac>)
 800ff4c:	18c0      	adds	r0, r0, r3
 800ff4e:	0029      	movs	r1, r5
 800ff50:	f7ff fa88 	bl	800f464 <vListInsertEnd>
 800ff54:	e7e2      	b.n	800ff1c <vTaskPrioritySet+0x68>
					taskYIELD_IF_USING_PREEMPTION();
 800ff56:	f000 ff85 	bl	8010e64 <vPortYield>
 800ff5a:	e7e1      	b.n	800ff20 <vTaskPrioritySet+0x6c>
 800ff5c:	200020b0 	.word	0x200020b0
 800ff60:	200020bc 	.word	0x200020bc
 800ff64:	20002160 	.word	0x20002160

0800ff68 <vTaskStartScheduler>:
{
 800ff68:	b500      	push	{lr}
 800ff6a:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	9303      	str	r3, [sp, #12]
 800ff70:	9302      	str	r3, [sp, #8]
 800ff72:	9301      	str	r3, [sp, #4]
 800ff74:	9300      	str	r3, [sp, #0]
 800ff76:	22a0      	movs	r2, #160	; 0xa0
 800ff78:	490d      	ldr	r1, [pc, #52]	; (800ffb0 <vTaskStartScheduler+0x48>)
 800ff7a:	480e      	ldr	r0, [pc, #56]	; (800ffb4 <vTaskStartScheduler+0x4c>)
 800ff7c:	f7ff fe8e 	bl	800fc9c <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800ff80:	2801      	cmp	r0, #1
 800ff82:	d003      	beq.n	800ff8c <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800ff84:	2800      	cmp	r0, #0
 800ff86:	d110      	bne.n	800ffaa <vTaskStartScheduler+0x42>
 800ff88:	b672      	cpsid	i
 800ff8a:	e7fe      	b.n	800ff8a <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800ff8c:	f000 fd8c 	bl	8010aa8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800ff90:	2801      	cmp	r0, #1
 800ff92:	d1f7      	bne.n	800ff84 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800ff94:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800ff96:	4b08      	ldr	r3, [pc, #32]	; (800ffb8 <vTaskStartScheduler+0x50>)
 800ff98:	2201      	movs	r2, #1
 800ff9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ff9c:	4b07      	ldr	r3, [pc, #28]	; (800ffbc <vTaskStartScheduler+0x54>)
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ffa2:	f7f8 fb49 	bl	8008638 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800ffa6:	f000 ff33 	bl	8010e10 <xPortStartScheduler>
}
 800ffaa:	b005      	add	sp, #20
 800ffac:	bd00      	pop	{pc}
 800ffae:	46c0      	nop			; (mov r8, r8)
 800ffb0:	0801d7e0 	.word	0x0801d7e0
 800ffb4:	08010241 	.word	0x08010241
 800ffb8:	200021a4 	.word	0x200021a4
 800ffbc:	200021d0 	.word	0x200021d0

0800ffc0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ffc0:	4a02      	ldr	r2, [pc, #8]	; (800ffcc <vTaskSuspendAll+0xc>)
 800ffc2:	6813      	ldr	r3, [r2, #0]
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	6013      	str	r3, [r2, #0]
}
 800ffc8:	4770      	bx	lr
 800ffca:	46c0      	nop			; (mov r8, r8)
 800ffcc:	20002154 	.word	0x20002154

0800ffd0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ffd0:	4b01      	ldr	r3, [pc, #4]	; (800ffd8 <xTaskGetTickCount+0x8>)
 800ffd2:	6818      	ldr	r0, [r3, #0]
}
 800ffd4:	4770      	bx	lr
 800ffd6:	46c0      	nop			; (mov r8, r8)
 800ffd8:	200021d0 	.word	0x200021d0

0800ffdc <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800ffdc:	4b01      	ldr	r3, [pc, #4]	; (800ffe4 <xTaskGetTickCountFromISR+0x8>)
 800ffde:	6818      	ldr	r0, [r3, #0]
}
 800ffe0:	4770      	bx	lr
 800ffe2:	46c0      	nop			; (mov r8, r8)
 800ffe4:	200021d0 	.word	0x200021d0

0800ffe8 <xTaskIncrementTick>:
{
 800ffe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffea:	46ce      	mov	lr, r9
 800ffec:	b500      	push	{lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffee:	4b3d      	ldr	r3, [pc, #244]	; (80100e4 <xTaskIncrementTick+0xfc>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d167      	bne.n	80100c6 <xTaskIncrementTick+0xde>
		++xTickCount;
 800fff6:	4b3c      	ldr	r3, [pc, #240]	; (80100e8 <xTaskIncrementTick+0x100>)
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	3201      	adds	r2, #1
 800fffc:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800fffe:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 8010000:	2e00      	cmp	r6, #0
 8010002:	d112      	bne.n	801002a <xTaskIncrementTick+0x42>
				taskSWITCH_DELAYED_LISTS();
 8010004:	4b39      	ldr	r3, [pc, #228]	; (80100ec <xTaskIncrementTick+0x104>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d001      	beq.n	8010012 <xTaskIncrementTick+0x2a>
 801000e:	b672      	cpsid	i
 8010010:	e7fe      	b.n	8010010 <xTaskIncrementTick+0x28>
 8010012:	4a36      	ldr	r2, [pc, #216]	; (80100ec <xTaskIncrementTick+0x104>)
 8010014:	6811      	ldr	r1, [r2, #0]
 8010016:	4b36      	ldr	r3, [pc, #216]	; (80100f0 <xTaskIncrementTick+0x108>)
 8010018:	6818      	ldr	r0, [r3, #0]
 801001a:	6010      	str	r0, [r2, #0]
 801001c:	6019      	str	r1, [r3, #0]
 801001e:	4a35      	ldr	r2, [pc, #212]	; (80100f4 <xTaskIncrementTick+0x10c>)
 8010020:	6813      	ldr	r3, [r2, #0]
 8010022:	3301      	adds	r3, #1
 8010024:	6013      	str	r3, [r2, #0]
 8010026:	f7ff fde3 	bl	800fbf0 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 801002a:	4b33      	ldr	r3, [pc, #204]	; (80100f8 <xTaskIncrementTick+0x110>)
 801002c:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 801002e:	2400      	movs	r4, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 8010030:	42b3      	cmp	r3, r6
 8010032:	d80b      	bhi.n	801004c <xTaskIncrementTick+0x64>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010034:	4b2d      	ldr	r3, [pc, #180]	; (80100ec <xTaskIncrementTick+0x104>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d001      	beq.n	8010042 <xTaskIncrementTick+0x5a>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801003e:	4d2b      	ldr	r5, [pc, #172]	; (80100ec <xTaskIncrementTick+0x104>)
 8010040:	e027      	b.n	8010092 <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 8010042:	2400      	movs	r4, #0
						xNextTaskUnblockTime = portMAX_DELAY;
 8010044:	4b2c      	ldr	r3, [pc, #176]	; (80100f8 <xTaskIncrementTick+0x110>)
 8010046:	2201      	movs	r2, #1
 8010048:	4252      	negs	r2, r2
 801004a:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801004c:	4b2b      	ldr	r3, [pc, #172]	; (80100fc <xTaskIncrementTick+0x114>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010052:	0093      	lsls	r3, r2, #2
 8010054:	189b      	adds	r3, r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	4a29      	ldr	r2, [pc, #164]	; (8010100 <xTaskIncrementTick+0x118>)
 801005a:	589b      	ldr	r3, [r3, r2]
 801005c:	2b01      	cmp	r3, #1
 801005e:	d937      	bls.n	80100d0 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8010060:	2401      	movs	r4, #1
 8010062:	e035      	b.n	80100d0 <xTaskIncrementTick+0xe8>
							xNextTaskUnblockTime = xItemValue;
 8010064:	4a24      	ldr	r2, [pc, #144]	; (80100f8 <xTaskIncrementTick+0x110>)
 8010066:	6013      	str	r3, [r2, #0]
							break;
 8010068:	e7f0      	b.n	801004c <xTaskIncrementTick+0x64>
						prvAddTaskToReadyList( pxTCB );
 801006a:	0098      	lsls	r0, r3, #2
 801006c:	18c0      	adds	r0, r0, r3
 801006e:	0080      	lsls	r0, r0, #2
 8010070:	4b23      	ldr	r3, [pc, #140]	; (8010100 <xTaskIncrementTick+0x118>)
 8010072:	18c0      	adds	r0, r0, r3
 8010074:	4649      	mov	r1, r9
 8010076:	f7ff f9f5 	bl	800f464 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801007a:	4b20      	ldr	r3, [pc, #128]	; (80100fc <xTaskIncrementTick+0x114>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010082:	429a      	cmp	r2, r3
 8010084:	d300      	bcc.n	8010088 <xTaskIncrementTick+0xa0>
								xSwitchRequired = pdTRUE;
 8010086:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010088:	4b18      	ldr	r3, [pc, #96]	; (80100ec <xTaskIncrementTick+0x104>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d0d8      	beq.n	8010044 <xTaskIncrementTick+0x5c>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010092:	682b      	ldr	r3, [r5, #0]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	68df      	ldr	r7, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8010098:	687b      	ldr	r3, [r7, #4]
						if( xConstTickCount < xItemValue )
 801009a:	429e      	cmp	r6, r3
 801009c:	d3e2      	bcc.n	8010064 <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 801009e:	1d3b      	adds	r3, r7, #4
 80100a0:	4699      	mov	r9, r3
 80100a2:	0018      	movs	r0, r3
 80100a4:	f7ff fa00 	bl	800f4a8 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80100a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d003      	beq.n	80100b6 <xTaskIncrementTick+0xce>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80100ae:	0038      	movs	r0, r7
 80100b0:	3018      	adds	r0, #24
 80100b2:	f7ff f9f9 	bl	800f4a8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80100b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b8:	4a12      	ldr	r2, [pc, #72]	; (8010104 <xTaskIncrementTick+0x11c>)
 80100ba:	6812      	ldr	r2, [r2, #0]
 80100bc:	4293      	cmp	r3, r2
 80100be:	d9d4      	bls.n	801006a <xTaskIncrementTick+0x82>
 80100c0:	4a10      	ldr	r2, [pc, #64]	; (8010104 <xTaskIncrementTick+0x11c>)
 80100c2:	6013      	str	r3, [r2, #0]
 80100c4:	e7d1      	b.n	801006a <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 80100c6:	4a10      	ldr	r2, [pc, #64]	; (8010108 <xTaskIncrementTick+0x120>)
 80100c8:	6813      	ldr	r3, [r2, #0]
 80100ca:	3301      	adds	r3, #1
 80100cc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80100ce:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80100d0:	4b0e      	ldr	r3, [pc, #56]	; (801010c <xTaskIncrementTick+0x124>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d000      	beq.n	80100da <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 80100d8:	2401      	movs	r4, #1
}
 80100da:	0020      	movs	r0, r4
 80100dc:	bc80      	pop	{r7}
 80100de:	46b9      	mov	r9, r7
 80100e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100e2:	46c0      	nop			; (mov r8, r8)
 80100e4:	20002154 	.word	0x20002154
 80100e8:	200021d0 	.word	0x200021d0
 80100ec:	200020b4 	.word	0x200020b4
 80100f0:	200020b8 	.word	0x200020b8
 80100f4:	2000218c 	.word	0x2000218c
 80100f8:	200000c8 	.word	0x200000c8
 80100fc:	200020b0 	.word	0x200020b0
 8010100:	200020bc 	.word	0x200020bc
 8010104:	20002160 	.word	0x20002160
 8010108:	20002150 	.word	0x20002150
 801010c:	200021d4 	.word	0x200021d4

08010110 <xTaskResumeAll>:
{
 8010110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8010112:	4b31      	ldr	r3, [pc, #196]	; (80101d8 <xTaskResumeAll+0xc8>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d101      	bne.n	801011e <xTaskResumeAll+0xe>
 801011a:	b672      	cpsid	i
 801011c:	e7fe      	b.n	801011c <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 801011e:	f000 fead 	bl	8010e7c <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010122:	4b2d      	ldr	r3, [pc, #180]	; (80101d8 <xTaskResumeAll+0xc8>)
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	3a01      	subs	r2, #1
 8010128:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801012a:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 801012c:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801012e:	2b00      	cmp	r3, #0
 8010130:	d14b      	bne.n	80101ca <xTaskResumeAll+0xba>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010132:	4b2a      	ldr	r3, [pc, #168]	; (80101dc <xTaskResumeAll+0xcc>)
 8010134:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 8010136:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010138:	2b00      	cmp	r3, #0
 801013a:	d046      	beq.n	80101ca <xTaskResumeAll+0xba>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801013c:	4d28      	ldr	r5, [pc, #160]	; (80101e0 <xTaskResumeAll+0xd0>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801013e:	002c      	movs	r4, r5
 8010140:	e00d      	b.n	801015e <xTaskResumeAll+0x4e>
					prvAddTaskToReadyList( pxTCB );
 8010142:	0098      	lsls	r0, r3, #2
 8010144:	18c0      	adds	r0, r0, r3
 8010146:	0080      	lsls	r0, r0, #2
 8010148:	4b26      	ldr	r3, [pc, #152]	; (80101e4 <xTaskResumeAll+0xd4>)
 801014a:	18c0      	adds	r0, r0, r3
 801014c:	0039      	movs	r1, r7
 801014e:	f7ff f989 	bl	800f464 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010152:	4b25      	ldr	r3, [pc, #148]	; (80101e8 <xTaskResumeAll+0xd8>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8010158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801015a:	429a      	cmp	r2, r3
 801015c:	d214      	bcs.n	8010188 <xTaskResumeAll+0x78>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801015e:	682b      	ldr	r3, [r5, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d015      	beq.n	8010190 <xTaskResumeAll+0x80>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010164:	68e3      	ldr	r3, [r4, #12]
 8010166:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010168:	0030      	movs	r0, r6
 801016a:	3018      	adds	r0, #24
 801016c:	f7ff f99c 	bl	800f4a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010170:	1d37      	adds	r7, r6, #4
 8010172:	0038      	movs	r0, r7
 8010174:	f7ff f998 	bl	800f4a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010178:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 801017a:	4a1c      	ldr	r2, [pc, #112]	; (80101ec <xTaskResumeAll+0xdc>)
 801017c:	6812      	ldr	r2, [r2, #0]
 801017e:	4293      	cmp	r3, r2
 8010180:	d9df      	bls.n	8010142 <xTaskResumeAll+0x32>
 8010182:	4a1a      	ldr	r2, [pc, #104]	; (80101ec <xTaskResumeAll+0xdc>)
 8010184:	6013      	str	r3, [r2, #0]
 8010186:	e7dc      	b.n	8010142 <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 8010188:	4b19      	ldr	r3, [pc, #100]	; (80101f0 <xTaskResumeAll+0xe0>)
 801018a:	2201      	movs	r2, #1
 801018c:	601a      	str	r2, [r3, #0]
 801018e:	e7e6      	b.n	801015e <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8010190:	4b18      	ldr	r3, [pc, #96]	; (80101f4 <xTaskResumeAll+0xe4>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d013      	beq.n	80101c0 <xTaskResumeAll+0xb0>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8010198:	4b16      	ldr	r3, [pc, #88]	; (80101f4 <xTaskResumeAll+0xe4>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00f      	beq.n	80101c0 <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
 80101a0:	4d13      	ldr	r5, [pc, #76]	; (80101f0 <xTaskResumeAll+0xe0>)
 80101a2:	2601      	movs	r6, #1
						--uxPendedTicks;
 80101a4:	4c13      	ldr	r4, [pc, #76]	; (80101f4 <xTaskResumeAll+0xe4>)
 80101a6:	e005      	b.n	80101b4 <xTaskResumeAll+0xa4>
 80101a8:	6823      	ldr	r3, [r4, #0]
 80101aa:	3b01      	subs	r3, #1
 80101ac:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80101ae:	6823      	ldr	r3, [r4, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d005      	beq.n	80101c0 <xTaskResumeAll+0xb0>
						if( xTaskIncrementTick() != pdFALSE )
 80101b4:	f7ff ff18 	bl	800ffe8 <xTaskIncrementTick>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d0f5      	beq.n	80101a8 <xTaskResumeAll+0x98>
							xYieldPending = pdTRUE;
 80101bc:	602e      	str	r6, [r5, #0]
 80101be:	e7f3      	b.n	80101a8 <xTaskResumeAll+0x98>
				if( xYieldPending == pdTRUE )
 80101c0:	4b0b      	ldr	r3, [pc, #44]	; (80101f0 <xTaskResumeAll+0xe0>)
 80101c2:	681c      	ldr	r4, [r3, #0]
 80101c4:	2c01      	cmp	r4, #1
 80101c6:	d004      	beq.n	80101d2 <xTaskResumeAll+0xc2>
BaseType_t xAlreadyYielded = pdFALSE;
 80101c8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80101ca:	f000 fe63 	bl	8010e94 <vPortExitCritical>
}
 80101ce:	0020      	movs	r0, r4
 80101d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 80101d2:	f000 fe47 	bl	8010e64 <vPortYield>
 80101d6:	e7f8      	b.n	80101ca <xTaskResumeAll+0xba>
 80101d8:	20002154 	.word	0x20002154
 80101dc:	2000214c 	.word	0x2000214c
 80101e0:	20002190 	.word	0x20002190
 80101e4:	200020bc 	.word	0x200020bc
 80101e8:	200020b0 	.word	0x200020b0
 80101ec:	20002160 	.word	0x20002160
 80101f0:	200021d4 	.word	0x200021d4
 80101f4:	20002150 	.word	0x20002150

080101f8 <vTaskDelay>:
	{
 80101f8:	b510      	push	{r4, lr}
 80101fa:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 80101fc:	d016      	beq.n	801022c <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 80101fe:	4b0d      	ldr	r3, [pc, #52]	; (8010234 <vTaskDelay+0x3c>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d001      	beq.n	801020a <vTaskDelay+0x12>
 8010206:	b672      	cpsid	i
 8010208:	e7fe      	b.n	8010208 <vTaskDelay+0x10>
			vTaskSuspendAll();
 801020a:	f7ff fed9 	bl	800ffc0 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 801020e:	4b0a      	ldr	r3, [pc, #40]	; (8010238 <vTaskDelay+0x40>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010214:	4b09      	ldr	r3, [pc, #36]	; (801023c <vTaskDelay+0x44>)
 8010216:	6818      	ldr	r0, [r3, #0]
 8010218:	3004      	adds	r0, #4
 801021a:	f7ff f945 	bl	800f4a8 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 801021e:	0020      	movs	r0, r4
 8010220:	f7ff fcfc 	bl	800fc1c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8010224:	f7ff ff74 	bl	8010110 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8010228:	2800      	cmp	r0, #0
 801022a:	d101      	bne.n	8010230 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 801022c:	f000 fe1a 	bl	8010e64 <vPortYield>
	}
 8010230:	bd10      	pop	{r4, pc}
 8010232:	46c0      	nop			; (mov r8, r8)
 8010234:	20002154 	.word	0x20002154
 8010238:	200021d0 	.word	0x200021d0
 801023c:	200020b0 	.word	0x200020b0

08010240 <prvIdleTask>:
{
 8010240:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8010242:	4e16      	ldr	r6, [pc, #88]	; (801029c <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010244:	4d16      	ldr	r5, [pc, #88]	; (80102a0 <prvIdleTask+0x60>)
 8010246:	e003      	b.n	8010250 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010248:	4b16      	ldr	r3, [pc, #88]	; (80102a4 <prvIdleTask+0x64>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2b01      	cmp	r3, #1
 801024e:	d822      	bhi.n	8010296 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8010250:	6833      	ldr	r3, [r6, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d0f8      	beq.n	8010248 <prvIdleTask+0x8>
			vTaskSuspendAll();
 8010256:	f7ff feb3 	bl	800ffc0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 801025a:	682c      	ldr	r4, [r5, #0]
			( void ) xTaskResumeAll();
 801025c:	f7ff ff58 	bl	8010110 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8010260:	2c00      	cmp	r4, #0
 8010262:	d0f5      	beq.n	8010250 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 8010264:	f000 fe0a 	bl	8010e7c <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010268:	4b0d      	ldr	r3, [pc, #52]	; (80102a0 <prvIdleTask+0x60>)
 801026a:	68db      	ldr	r3, [r3, #12]
 801026c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 801026e:	1d20      	adds	r0, r4, #4
 8010270:	f7ff f91a 	bl	800f4a8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8010274:	4a0c      	ldr	r2, [pc, #48]	; (80102a8 <prvIdleTask+0x68>)
 8010276:	6813      	ldr	r3, [r2, #0]
 8010278:	3b01      	subs	r3, #1
 801027a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 801027c:	4a07      	ldr	r2, [pc, #28]	; (801029c <prvIdleTask+0x5c>)
 801027e:	6813      	ldr	r3, [r2, #0]
 8010280:	3b01      	subs	r3, #1
 8010282:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8010284:	f000 fe06 	bl	8010e94 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 8010288:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801028a:	f000 ff0b 	bl	80110a4 <vPortFree>
		vPortFree( pxTCB );
 801028e:	0020      	movs	r0, r4
 8010290:	f000 ff08 	bl	80110a4 <vPortFree>
	}
 8010294:	e7dc      	b.n	8010250 <prvIdleTask+0x10>
				taskYIELD();
 8010296:	f000 fde5 	bl	8010e64 <vPortYield>
 801029a:	e7d9      	b.n	8010250 <prvIdleTask+0x10>
 801029c:	2000215c 	.word	0x2000215c
 80102a0:	200021bc 	.word	0x200021bc
 80102a4:	200020bc 	.word	0x200020bc
 80102a8:	2000214c 	.word	0x2000214c

080102ac <uxTaskGetSystemState>:
	{
 80102ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ae:	46c6      	mov	lr, r8
 80102b0:	b500      	push	{lr}
 80102b2:	0006      	movs	r6, r0
 80102b4:	000d      	movs	r5, r1
 80102b6:	4690      	mov	r8, r2
		vTaskSuspendAll();
 80102b8:	f7ff fe82 	bl	800ffc0 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80102bc:	4b1e      	ldr	r3, [pc, #120]	; (8010338 <uxTaskGetSystemState+0x8c>)
 80102be:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80102c0:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80102c2:	42ab      	cmp	r3, r5
 80102c4:	d832      	bhi.n	801032c <uxTaskGetSystemState+0x80>
 80102c6:	4d1d      	ldr	r5, [pc, #116]	; (801033c <uxTaskGetSystemState+0x90>)
 80102c8:	002f      	movs	r7, r5
 80102ca:	3f78      	subs	r7, #120	; 0x78
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80102cc:	0160      	lsls	r0, r4, #5
 80102ce:	1830      	adds	r0, r6, r0
 80102d0:	2201      	movs	r2, #1
 80102d2:	0029      	movs	r1, r5
 80102d4:	f7ff fc34 	bl	800fb40 <prvListTaskWithinSingleList>
 80102d8:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102da:	002b      	movs	r3, r5
 80102dc:	3d14      	subs	r5, #20
 80102de:	42bb      	cmp	r3, r7
 80102e0:	d1f4      	bne.n	80102cc <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80102e2:	4b17      	ldr	r3, [pc, #92]	; (8010340 <uxTaskGetSystemState+0x94>)
 80102e4:	6819      	ldr	r1, [r3, #0]
 80102e6:	0160      	lsls	r0, r4, #5
 80102e8:	1830      	adds	r0, r6, r0
 80102ea:	2202      	movs	r2, #2
 80102ec:	f7ff fc28 	bl	800fb40 <prvListTaskWithinSingleList>
 80102f0:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80102f2:	4b14      	ldr	r3, [pc, #80]	; (8010344 <uxTaskGetSystemState+0x98>)
 80102f4:	6819      	ldr	r1, [r3, #0]
 80102f6:	0160      	lsls	r0, r4, #5
 80102f8:	1830      	adds	r0, r6, r0
 80102fa:	2202      	movs	r2, #2
 80102fc:	f7ff fc20 	bl	800fb40 <prvListTaskWithinSingleList>
 8010300:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8010302:	0160      	lsls	r0, r4, #5
 8010304:	1830      	adds	r0, r6, r0
 8010306:	2204      	movs	r2, #4
 8010308:	490f      	ldr	r1, [pc, #60]	; (8010348 <uxTaskGetSystemState+0x9c>)
 801030a:	f7ff fc19 	bl	800fb40 <prvListTaskWithinSingleList>
 801030e:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8010310:	0160      	lsls	r0, r4, #5
 8010312:	1830      	adds	r0, r6, r0
 8010314:	2203      	movs	r2, #3
 8010316:	490d      	ldr	r1, [pc, #52]	; (801034c <uxTaskGetSystemState+0xa0>)
 8010318:	f7ff fc12 	bl	800fb40 <prvListTaskWithinSingleList>
 801031c:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 801031e:	4643      	mov	r3, r8
 8010320:	2b00      	cmp	r3, #0
 8010322:	d003      	beq.n	801032c <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010324:	f7f8 f998 	bl	8008658 <ulMainGetRunTimeCounterValue>
 8010328:	4643      	mov	r3, r8
 801032a:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 801032c:	f7ff fef0 	bl	8010110 <xTaskResumeAll>
	}
 8010330:	0020      	movs	r0, r4
 8010332:	bc80      	pop	{r7}
 8010334:	46b8      	mov	r8, r7
 8010336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010338:	2000214c 	.word	0x2000214c
 801033c:	20002134 	.word	0x20002134
 8010340:	200020b4 	.word	0x200020b4
 8010344:	200020b8 	.word	0x200020b8
 8010348:	200021bc 	.word	0x200021bc
 801034c:	200021a8 	.word	0x200021a8

08010350 <vTaskSwitchContext>:
{
 8010350:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010352:	4b39      	ldr	r3, [pc, #228]	; (8010438 <vTaskSwitchContext+0xe8>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d003      	beq.n	8010362 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 801035a:	4b38      	ldr	r3, [pc, #224]	; (801043c <vTaskSwitchContext+0xec>)
 801035c:	2201      	movs	r2, #1
 801035e:	601a      	str	r2, [r3, #0]
}
 8010360:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8010362:	4b36      	ldr	r3, [pc, #216]	; (801043c <vTaskSwitchContext+0xec>)
 8010364:	2200      	movs	r2, #0
 8010366:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010368:	f7f8 f976 	bl	8008658 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 801036c:	4b34      	ldr	r3, [pc, #208]	; (8010440 <vTaskSwitchContext+0xf0>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4298      	cmp	r0, r3
 8010372:	d905      	bls.n	8010380 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010374:	4a33      	ldr	r2, [pc, #204]	; (8010444 <vTaskSwitchContext+0xf4>)
 8010376:	6812      	ldr	r2, [r2, #0]
 8010378:	6d51      	ldr	r1, [r2, #84]	; 0x54
 801037a:	1acb      	subs	r3, r1, r3
 801037c:	181b      	adds	r3, r3, r0
 801037e:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8010380:	4b2f      	ldr	r3, [pc, #188]	; (8010440 <vTaskSwitchContext+0xf0>)
 8010382:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8010384:	4b2f      	ldr	r3, [pc, #188]	; (8010444 <vTaskSwitchContext+0xf4>)
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	6812      	ldr	r2, [r2, #0]
 801038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801038e:	429a      	cmp	r2, r3
 8010390:	d93b      	bls.n	801040a <vTaskSwitchContext+0xba>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8010392:	4b2c      	ldr	r3, [pc, #176]	; (8010444 <vTaskSwitchContext+0xf4>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010398:	2214      	movs	r2, #20
 801039a:	492b      	ldr	r1, [pc, #172]	; (8010448 <vTaskSwitchContext+0xf8>)
 801039c:	f003 ffaa 	bl	80142f4 <memcmp>
 80103a0:	2800      	cmp	r0, #0
 80103a2:	d139      	bne.n	8010418 <vTaskSwitchContext+0xc8>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80103a4:	4b29      	ldr	r3, [pc, #164]	; (801044c <vTaskSwitchContext+0xfc>)
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	0093      	lsls	r3, r2, #2
 80103aa:	189b      	adds	r3, r3, r2
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	4a28      	ldr	r2, [pc, #160]	; (8010450 <vTaskSwitchContext+0x100>)
 80103b0:	589b      	ldr	r3, [r3, r2]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d10f      	bne.n	80103d6 <vTaskSwitchContext+0x86>
 80103b6:	4825      	ldr	r0, [pc, #148]	; (801044c <vTaskSwitchContext+0xfc>)
 80103b8:	0002      	movs	r2, r0
 80103ba:	6803      	ldr	r3, [r0, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d032      	beq.n	8010426 <vTaskSwitchContext+0xd6>
 80103c0:	6813      	ldr	r3, [r2, #0]
 80103c2:	3b01      	subs	r3, #1
 80103c4:	6013      	str	r3, [r2, #0]
 80103c6:	6811      	ldr	r1, [r2, #0]
 80103c8:	008b      	lsls	r3, r1, #2
 80103ca:	185b      	adds	r3, r3, r1
 80103cc:	009b      	lsls	r3, r3, #2
 80103ce:	4920      	ldr	r1, [pc, #128]	; (8010450 <vTaskSwitchContext+0x100>)
 80103d0:	585b      	ldr	r3, [r3, r1]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d0f1      	beq.n	80103ba <vTaskSwitchContext+0x6a>
 80103d6:	4b1d      	ldr	r3, [pc, #116]	; (801044c <vTaskSwitchContext+0xfc>)
 80103d8:	681a      	ldr	r2, [r3, #0]
 80103da:	4c1d      	ldr	r4, [pc, #116]	; (8010450 <vTaskSwitchContext+0x100>)
 80103dc:	0093      	lsls	r3, r2, #2
 80103de:	1899      	adds	r1, r3, r2
 80103e0:	0089      	lsls	r1, r1, #2
 80103e2:	1861      	adds	r1, r4, r1
 80103e4:	6848      	ldr	r0, [r1, #4]
 80103e6:	6840      	ldr	r0, [r0, #4]
 80103e8:	6048      	str	r0, [r1, #4]
 80103ea:	189b      	adds	r3, r3, r2
 80103ec:	009b      	lsls	r3, r3, #2
 80103ee:	3308      	adds	r3, #8
 80103f0:	191b      	adds	r3, r3, r4
 80103f2:	4298      	cmp	r0, r3
 80103f4:	d019      	beq.n	801042a <vTaskSwitchContext+0xda>
 80103f6:	0093      	lsls	r3, r2, #2
 80103f8:	189a      	adds	r2, r3, r2
 80103fa:	0092      	lsls	r2, r2, #2
 80103fc:	4b14      	ldr	r3, [pc, #80]	; (8010450 <vTaskSwitchContext+0x100>)
 80103fe:	189a      	adds	r2, r3, r2
 8010400:	6853      	ldr	r3, [r2, #4]
 8010402:	68da      	ldr	r2, [r3, #12]
 8010404:	4b0f      	ldr	r3, [pc, #60]	; (8010444 <vTaskSwitchContext+0xf4>)
 8010406:	601a      	str	r2, [r3, #0]
}
 8010408:	e7aa      	b.n	8010360 <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 801040a:	4b0e      	ldr	r3, [pc, #56]	; (8010444 <vTaskSwitchContext+0xf4>)
 801040c:	6818      	ldr	r0, [r3, #0]
 801040e:	6819      	ldr	r1, [r3, #0]
 8010410:	3134      	adds	r1, #52	; 0x34
 8010412:	f7fe f979 	bl	800e708 <vApplicationStackOverflowHook>
 8010416:	e7bc      	b.n	8010392 <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8010418:	4b0a      	ldr	r3, [pc, #40]	; (8010444 <vTaskSwitchContext+0xf4>)
 801041a:	6818      	ldr	r0, [r3, #0]
 801041c:	6819      	ldr	r1, [r3, #0]
 801041e:	3134      	adds	r1, #52	; 0x34
 8010420:	f7fe f972 	bl	800e708 <vApplicationStackOverflowHook>
 8010424:	e7be      	b.n	80103a4 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010426:	b672      	cpsid	i
 8010428:	e7fe      	b.n	8010428 <vTaskSwitchContext+0xd8>
 801042a:	6840      	ldr	r0, [r0, #4]
 801042c:	0093      	lsls	r3, r2, #2
 801042e:	189b      	adds	r3, r3, r2
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	18e3      	adds	r3, r4, r3
 8010434:	6058      	str	r0, [r3, #4]
 8010436:	e7de      	b.n	80103f6 <vTaskSwitchContext+0xa6>
 8010438:	20002154 	.word	0x20002154
 801043c:	200021d4 	.word	0x200021d4
 8010440:	20002148 	.word	0x20002148
 8010444:	200020b0 	.word	0x200020b0
 8010448:	0801d810 	.word	0x0801d810
 801044c:	20002160 	.word	0x20002160
 8010450:	200020bc 	.word	0x200020bc

08010454 <vTaskPlaceOnEventList>:
{
 8010454:	b570      	push	{r4, r5, r6, lr}
 8010456:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8010458:	2800      	cmp	r0, #0
 801045a:	d010      	beq.n	801047e <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801045c:	4d0c      	ldr	r5, [pc, #48]	; (8010490 <vTaskPlaceOnEventList+0x3c>)
 801045e:	6829      	ldr	r1, [r5, #0]
 8010460:	3118      	adds	r1, #24
 8010462:	f7ff f80a 	bl	800f47a <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010466:	6828      	ldr	r0, [r5, #0]
 8010468:	3004      	adds	r0, #4
 801046a:	f7ff f81d 	bl	800f4a8 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 801046e:	1c63      	adds	r3, r4, #1
 8010470:	d007      	beq.n	8010482 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 8010472:	4b08      	ldr	r3, [pc, #32]	; (8010494 <vTaskPlaceOnEventList+0x40>)
 8010474:	6818      	ldr	r0, [r3, #0]
 8010476:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010478:	f7ff fbd0 	bl	800fc1c <prvAddCurrentTaskToDelayedList>
}
 801047c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 801047e:	b672      	cpsid	i
 8010480:	e7fe      	b.n	8010480 <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8010482:	4b03      	ldr	r3, [pc, #12]	; (8010490 <vTaskPlaceOnEventList+0x3c>)
 8010484:	6819      	ldr	r1, [r3, #0]
 8010486:	3104      	adds	r1, #4
 8010488:	4803      	ldr	r0, [pc, #12]	; (8010498 <vTaskPlaceOnEventList+0x44>)
 801048a:	f7fe ffeb 	bl	800f464 <vListInsertEnd>
 801048e:	e7f5      	b.n	801047c <vTaskPlaceOnEventList+0x28>
 8010490:	200020b0 	.word	0x200020b0
 8010494:	200021d0 	.word	0x200021d0
 8010498:	200021a8 	.word	0x200021a8

0801049c <vTaskPlaceOnEventListRestricted>:
	{
 801049c:	b570      	push	{r4, r5, r6, lr}
 801049e:	000c      	movs	r4, r1
		configASSERT( pxEventList );
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d00e      	beq.n	80104c2 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80104a4:	4d08      	ldr	r5, [pc, #32]	; (80104c8 <vTaskPlaceOnEventListRestricted+0x2c>)
 80104a6:	6829      	ldr	r1, [r5, #0]
 80104a8:	3118      	adds	r1, #24
 80104aa:	f7fe ffdb 	bl	800f464 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80104ae:	6828      	ldr	r0, [r5, #0]
 80104b0:	3004      	adds	r0, #4
 80104b2:	f7fe fff9 	bl	800f4a8 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 80104b6:	4b05      	ldr	r3, [pc, #20]	; (80104cc <vTaskPlaceOnEventListRestricted+0x30>)
 80104b8:	6818      	ldr	r0, [r3, #0]
 80104ba:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 80104bc:	f7ff fbae 	bl	800fc1c <prvAddCurrentTaskToDelayedList>
	}
 80104c0:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 80104c2:	b672      	cpsid	i
 80104c4:	e7fe      	b.n	80104c4 <vTaskPlaceOnEventListRestricted+0x28>
 80104c6:	46c0      	nop			; (mov r8, r8)
 80104c8:	200020b0 	.word	0x200020b0
 80104cc:	200021d0 	.word	0x200021d0

080104d0 <xTaskRemoveFromEventList>:
{
 80104d0:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80104d2:	68c3      	ldr	r3, [r0, #12]
 80104d4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80104d6:	2c00      	cmp	r4, #0
 80104d8:	d027      	beq.n	801052a <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80104da:	0025      	movs	r5, r4
 80104dc:	3518      	adds	r5, #24
 80104de:	0028      	movs	r0, r5
 80104e0:	f7fe ffe2 	bl	800f4a8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104e4:	4b14      	ldr	r3, [pc, #80]	; (8010538 <xTaskRemoveFromEventList+0x68>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d120      	bne.n	801052e <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80104ec:	1d25      	adds	r5, r4, #4
 80104ee:	0028      	movs	r0, r5
 80104f0:	f7fe ffda 	bl	800f4a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80104f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80104f6:	4a11      	ldr	r2, [pc, #68]	; (801053c <xTaskRemoveFromEventList+0x6c>)
 80104f8:	6812      	ldr	r2, [r2, #0]
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d901      	bls.n	8010502 <xTaskRemoveFromEventList+0x32>
 80104fe:	4a0f      	ldr	r2, [pc, #60]	; (801053c <xTaskRemoveFromEventList+0x6c>)
 8010500:	6013      	str	r3, [r2, #0]
 8010502:	0098      	lsls	r0, r3, #2
 8010504:	18c0      	adds	r0, r0, r3
 8010506:	0080      	lsls	r0, r0, #2
 8010508:	4b0d      	ldr	r3, [pc, #52]	; (8010540 <xTaskRemoveFromEventList+0x70>)
 801050a:	18c0      	adds	r0, r0, r3
 801050c:	0029      	movs	r1, r5
 801050e:	f7fe ffa9 	bl	800f464 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010512:	4b0c      	ldr	r3, [pc, #48]	; (8010544 <xTaskRemoveFromEventList+0x74>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 801051a:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801051c:	429a      	cmp	r2, r3
 801051e:	d903      	bls.n	8010528 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
 8010520:	4b09      	ldr	r3, [pc, #36]	; (8010548 <xTaskRemoveFromEventList+0x78>)
 8010522:	2201      	movs	r2, #1
 8010524:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 8010526:	3001      	adds	r0, #1
}
 8010528:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 801052a:	b672      	cpsid	i
 801052c:	e7fe      	b.n	801052c <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801052e:	0029      	movs	r1, r5
 8010530:	4806      	ldr	r0, [pc, #24]	; (801054c <xTaskRemoveFromEventList+0x7c>)
 8010532:	f7fe ff97 	bl	800f464 <vListInsertEnd>
 8010536:	e7ec      	b.n	8010512 <xTaskRemoveFromEventList+0x42>
 8010538:	20002154 	.word	0x20002154
 801053c:	20002160 	.word	0x20002160
 8010540:	200020bc 	.word	0x200020bc
 8010544:	200020b0 	.word	0x200020b0
 8010548:	200021d4 	.word	0x200021d4
 801054c:	20002190 	.word	0x20002190

08010550 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8010550:	2800      	cmp	r0, #0
 8010552:	d006      	beq.n	8010562 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010554:	4b04      	ldr	r3, [pc, #16]	; (8010568 <vTaskSetTimeOutState+0x18>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801055a:	4b04      	ldr	r3, [pc, #16]	; (801056c <vTaskSetTimeOutState+0x1c>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	6043      	str	r3, [r0, #4]
}
 8010560:	4770      	bx	lr
	configASSERT( pxTimeOut );
 8010562:	b672      	cpsid	i
 8010564:	e7fe      	b.n	8010564 <vTaskSetTimeOutState+0x14>
 8010566:	46c0      	nop			; (mov r8, r8)
 8010568:	2000218c 	.word	0x2000218c
 801056c:	200021d0 	.word	0x200021d0

08010570 <xTaskCheckForTimeOut>:
{
 8010570:	b570      	push	{r4, r5, r6, lr}
 8010572:	0004      	movs	r4, r0
 8010574:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 8010576:	2800      	cmp	r0, #0
 8010578:	d01e      	beq.n	80105b8 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 801057a:	2900      	cmp	r1, #0
 801057c:	d01e      	beq.n	80105bc <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 801057e:	f000 fc7d 	bl	8010e7c <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8010582:	4b12      	ldr	r3, [pc, #72]	; (80105cc <xTaskCheckForTimeOut+0x5c>)
 8010584:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8010586:	682b      	ldr	r3, [r5, #0]
 8010588:	1c59      	adds	r1, r3, #1
 801058a:	d019      	beq.n	80105c0 <xTaskCheckForTimeOut+0x50>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801058c:	4910      	ldr	r1, [pc, #64]	; (80105d0 <xTaskCheckForTimeOut+0x60>)
 801058e:	6809      	ldr	r1, [r1, #0]
 8010590:	6820      	ldr	r0, [r4, #0]
 8010592:	4288      	cmp	r0, r1
 8010594:	d003      	beq.n	801059e <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
 8010596:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010598:	6861      	ldr	r1, [r4, #4]
 801059a:	4291      	cmp	r1, r2
 801059c:	d911      	bls.n	80105c2 <xTaskCheckForTimeOut+0x52>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 801059e:	6861      	ldr	r1, [r4, #4]
 80105a0:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 80105a2:	2601      	movs	r6, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80105a4:	4283      	cmp	r3, r0
 80105a6:	d90c      	bls.n	80105c2 <xTaskCheckForTimeOut+0x52>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80105a8:	1a9b      	subs	r3, r3, r2
 80105aa:	185b      	adds	r3, r3, r1
 80105ac:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80105ae:	0020      	movs	r0, r4
 80105b0:	f7ff ffce 	bl	8010550 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80105b4:	2600      	movs	r6, #0
 80105b6:	e004      	b.n	80105c2 <xTaskCheckForTimeOut+0x52>
	configASSERT( pxTimeOut );
 80105b8:	b672      	cpsid	i
 80105ba:	e7fe      	b.n	80105ba <xTaskCheckForTimeOut+0x4a>
	configASSERT( pxTicksToWait );
 80105bc:	b672      	cpsid	i
 80105be:	e7fe      	b.n	80105be <xTaskCheckForTimeOut+0x4e>
				xReturn = pdFALSE;
 80105c0:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 80105c2:	f000 fc67 	bl	8010e94 <vPortExitCritical>
}
 80105c6:	0030      	movs	r0, r6
 80105c8:	bd70      	pop	{r4, r5, r6, pc}
 80105ca:	46c0      	nop			; (mov r8, r8)
 80105cc:	200021d0 	.word	0x200021d0
 80105d0:	2000218c 	.word	0x2000218c

080105d4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80105d4:	4b01      	ldr	r3, [pc, #4]	; (80105dc <vTaskMissedYield+0x8>)
 80105d6:	2201      	movs	r2, #1
 80105d8:	601a      	str	r2, [r3, #0]
}
 80105da:	4770      	bx	lr
 80105dc:	200021d4 	.word	0x200021d4

080105e0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80105e0:	4b05      	ldr	r3, [pc, #20]	; (80105f8 <xTaskGetSchedulerState+0x18>)
 80105e2:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 80105e4:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d004      	beq.n	80105f4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105ea:	4b04      	ldr	r3, [pc, #16]	; (80105fc <xTaskGetSchedulerState+0x1c>)
 80105ec:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80105ee:	4243      	negs	r3, r0
 80105f0:	4158      	adcs	r0, r3
 80105f2:	0040      	lsls	r0, r0, #1
	}
 80105f4:	4770      	bx	lr
 80105f6:	46c0      	nop			; (mov r8, r8)
 80105f8:	200021a4 	.word	0x200021a4
 80105fc:	20002154 	.word	0x20002154

08010600 <vTaskPriorityInherit>:
	{
 8010600:	b570      	push	{r4, r5, r6, lr}
 8010602:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8010604:	d01a      	beq.n	801063c <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010606:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010608:	4b19      	ldr	r3, [pc, #100]	; (8010670 <vTaskPriorityInherit+0x70>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801060e:	429a      	cmp	r2, r3
 8010610:	d214      	bcs.n	801063c <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010612:	6983      	ldr	r3, [r0, #24]
 8010614:	2b00      	cmp	r3, #0
 8010616:	db05      	blt.n	8010624 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010618:	4b15      	ldr	r3, [pc, #84]	; (8010670 <vTaskPriorityInherit+0x70>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801061e:	2307      	movs	r3, #7
 8010620:	1a5b      	subs	r3, r3, r1
 8010622:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8010624:	0093      	lsls	r3, r2, #2
 8010626:	189b      	adds	r3, r3, r2
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	4a12      	ldr	r2, [pc, #72]	; (8010674 <vTaskPriorityInherit+0x74>)
 801062c:	189b      	adds	r3, r3, r2
 801062e:	6962      	ldr	r2, [r4, #20]
 8010630:	429a      	cmp	r2, r3
 8010632:	d004      	beq.n	801063e <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010634:	4b0e      	ldr	r3, [pc, #56]	; (8010670 <vTaskPriorityInherit+0x70>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801063a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 801063c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 801063e:	1d25      	adds	r5, r4, #4
 8010640:	0028      	movs	r0, r5
 8010642:	f7fe ff31 	bl	800f4a8 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010646:	4b0a      	ldr	r3, [pc, #40]	; (8010670 <vTaskPriorityInherit+0x70>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801064c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 801064e:	4a0a      	ldr	r2, [pc, #40]	; (8010678 <vTaskPriorityInherit+0x78>)
 8010650:	6812      	ldr	r2, [r2, #0]
 8010652:	4293      	cmp	r3, r2
 8010654:	d808      	bhi.n	8010668 <vTaskPriorityInherit+0x68>
 8010656:	0098      	lsls	r0, r3, #2
 8010658:	18c0      	adds	r0, r0, r3
 801065a:	0080      	lsls	r0, r0, #2
 801065c:	4b05      	ldr	r3, [pc, #20]	; (8010674 <vTaskPriorityInherit+0x74>)
 801065e:	18c0      	adds	r0, r0, r3
 8010660:	0029      	movs	r1, r5
 8010662:	f7fe feff 	bl	800f464 <vListInsertEnd>
	}
 8010666:	e7e9      	b.n	801063c <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 8010668:	4a03      	ldr	r2, [pc, #12]	; (8010678 <vTaskPriorityInherit+0x78>)
 801066a:	6013      	str	r3, [r2, #0]
 801066c:	e7f3      	b.n	8010656 <vTaskPriorityInherit+0x56>
 801066e:	46c0      	nop			; (mov r8, r8)
 8010670:	200020b0 	.word	0x200020b0
 8010674:	200020bc 	.word	0x200020bc
 8010678:	20002160 	.word	0x20002160

0801067c <xTaskPriorityDisinherit>:
	{
 801067c:	b570      	push	{r4, r5, r6, lr}
 801067e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8010680:	d02c      	beq.n	80106dc <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
 8010682:	4b18      	ldr	r3, [pc, #96]	; (80106e4 <xTaskPriorityDisinherit+0x68>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4283      	cmp	r3, r0
 8010688:	d001      	beq.n	801068e <xTaskPriorityDisinherit+0x12>
 801068a:	b672      	cpsid	i
 801068c:	e7fe      	b.n	801068c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 801068e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010690:	2b00      	cmp	r3, #0
 8010692:	d101      	bne.n	8010698 <xTaskPriorityDisinherit+0x1c>
 8010694:	b672      	cpsid	i
 8010696:	e7fe      	b.n	8010696 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 8010698:	3b01      	subs	r3, #1
 801069a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801069c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801069e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80106a0:	428a      	cmp	r2, r1
 80106a2:	d01d      	beq.n	80106e0 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 80106a4:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d119      	bne.n	80106de <xTaskPriorityDisinherit+0x62>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80106aa:	1d25      	adds	r5, r4, #4
 80106ac:	0028      	movs	r0, r5
 80106ae:	f7fe fefb 	bl	800f4a8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80106b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80106b4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106b6:	2207      	movs	r2, #7
 80106b8:	1ad2      	subs	r2, r2, r3
 80106ba:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80106bc:	4a0a      	ldr	r2, [pc, #40]	; (80106e8 <xTaskPriorityDisinherit+0x6c>)
 80106be:	6812      	ldr	r2, [r2, #0]
 80106c0:	4293      	cmp	r3, r2
 80106c2:	d901      	bls.n	80106c8 <xTaskPriorityDisinherit+0x4c>
 80106c4:	4a08      	ldr	r2, [pc, #32]	; (80106e8 <xTaskPriorityDisinherit+0x6c>)
 80106c6:	6013      	str	r3, [r2, #0]
 80106c8:	0098      	lsls	r0, r3, #2
 80106ca:	18c0      	adds	r0, r0, r3
 80106cc:	0080      	lsls	r0, r0, #2
 80106ce:	4b07      	ldr	r3, [pc, #28]	; (80106ec <xTaskPriorityDisinherit+0x70>)
 80106d0:	18c0      	adds	r0, r0, r3
 80106d2:	0029      	movs	r1, r5
 80106d4:	f7fe fec6 	bl	800f464 <vListInsertEnd>
					xReturn = pdTRUE;
 80106d8:	2001      	movs	r0, #1
 80106da:	e000      	b.n	80106de <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 80106dc:	2000      	movs	r0, #0
	}
 80106de:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 80106e0:	2000      	movs	r0, #0
 80106e2:	e7fc      	b.n	80106de <xTaskPriorityDisinherit+0x62>
 80106e4:	200020b0 	.word	0x200020b0
 80106e8:	20002160 	.word	0x20002160
 80106ec:	200020bc 	.word	0x200020bc

080106f0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 80106f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106f2:	46ce      	mov	lr, r9
 80106f4:	4647      	mov	r7, r8
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b085      	sub	sp, #20
 80106fa:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 80106fc:	2300      	movs	r3, #0
 80106fe:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8010700:	4b30      	ldr	r3, [pc, #192]	; (80107c4 <vTaskList+0xd4>)
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8010706:	6818      	ldr	r0, [r3, #0]
 8010708:	0140      	lsls	r0, r0, #5
 801070a:	f000 fc39 	bl	8010f80 <pvPortMalloc>
 801070e:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 8010710:	d053      	beq.n	80107ba <vTaskList+0xca>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8010712:	9903      	ldr	r1, [sp, #12]
 8010714:	2200      	movs	r2, #0
 8010716:	f7ff fdc9 	bl	80102ac <uxTaskGetSystemState>
 801071a:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 801071c:	2300      	movs	r3, #0
 801071e:	9302      	str	r3, [sp, #8]
 8010720:	9a02      	ldr	r2, [sp, #8]
 8010722:	9b03      	ldr	r3, [sp, #12]
 8010724:	429a      	cmp	r2, r3
 8010726:	d245      	bcs.n	80107b4 <vTaskList+0xc4>
										break;

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
										break;

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8010728:	2343      	movs	r3, #67	; 0x43
 801072a:	4698      	mov	r8, r3
				switch( pxTaskStatusArray[ x ].eCurrentState )
 801072c:	2741      	movs	r7, #65	; 0x41
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 801072e:	4b26      	ldr	r3, [pc, #152]	; (80107c8 <vTaskList+0xd8>)
 8010730:	4699      	mov	r9, r3
 8010732:	e02a      	b.n	801078a <vTaskList+0x9a>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8010734:	3a02      	subs	r2, #2
 8010736:	1e53      	subs	r3, r2, #1
 8010738:	419a      	sbcs	r2, r3
 801073a:	4256      	negs	r6, r2
 801073c:	43be      	bics	r6, r7
 801073e:	3642      	adds	r6, #66	; 0x42
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8010740:	9b02      	ldr	r3, [sp, #8]
 8010742:	015b      	lsls	r3, r3, #5
 8010744:	18eb      	adds	r3, r5, r3
 8010746:	6859      	ldr	r1, [r3, #4]
 8010748:	0020      	movs	r0, r4
 801074a:	f7ff fa91 	bl	800fc70 <prvWriteNameToBuffer>
 801074e:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8010750:	9b02      	ldr	r3, [sp, #8]
 8010752:	9a02      	ldr	r2, [sp, #8]
 8010754:	9902      	ldr	r1, [sp, #8]
 8010756:	015b      	lsls	r3, r3, #5
 8010758:	18eb      	adds	r3, r5, r3
 801075a:	691b      	ldr	r3, [r3, #16]
 801075c:	0149      	lsls	r1, r1, #5
 801075e:	1869      	adds	r1, r5, r1
 8010760:	6889      	ldr	r1, [r1, #8]
 8010762:	9101      	str	r1, [sp, #4]
 8010764:	0152      	lsls	r2, r2, #5
 8010766:	18aa      	adds	r2, r5, r2
 8010768:	8b92      	ldrh	r2, [r2, #28]
 801076a:	9200      	str	r2, [sp, #0]
 801076c:	0032      	movs	r2, r6
 801076e:	4649      	mov	r1, r9
 8010770:	f003 ffcc 	bl	801470c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 8010774:	0020      	movs	r0, r4
 8010776:	f7ef fccf 	bl	8000118 <strlen>
 801077a:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 801077c:	9b02      	ldr	r3, [sp, #8]
 801077e:	3301      	adds	r3, #1
 8010780:	9302      	str	r3, [sp, #8]
 8010782:	9a02      	ldr	r2, [sp, #8]
 8010784:	9b03      	ldr	r3, [sp, #12]
 8010786:	429a      	cmp	r2, r3
 8010788:	d214      	bcs.n	80107b4 <vTaskList+0xc4>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 801078a:	9b02      	ldr	r3, [sp, #8]
 801078c:	015b      	lsls	r3, r3, #5
 801078e:	18eb      	adds	r3, r5, r3
 8010790:	7b1a      	ldrb	r2, [r3, #12]
 8010792:	2a03      	cmp	r2, #3
 8010794:	d00c      	beq.n	80107b0 <vTaskList+0xc0>
 8010796:	d803      	bhi.n	80107a0 <vTaskList+0xb0>
					case eReady:		cStatus = tskREADY_CHAR;
 8010798:	2652      	movs	r6, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 801079a:	2a01      	cmp	r2, #1
 801079c:	d1ca      	bne.n	8010734 <vTaskList+0x44>
 801079e:	e7cf      	b.n	8010740 <vTaskList+0x50>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 80107a0:	3a04      	subs	r2, #4
 80107a2:	1e53      	subs	r3, r2, #1
 80107a4:	419a      	sbcs	r2, r3
 80107a6:	4256      	negs	r6, r2
 80107a8:	4643      	mov	r3, r8
 80107aa:	439e      	bics	r6, r3
 80107ac:	3644      	adds	r6, #68	; 0x44
 80107ae:	e7c7      	b.n	8010740 <vTaskList+0x50>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80107b0:	2653      	movs	r6, #83	; 0x53
 80107b2:	e7c5      	b.n	8010740 <vTaskList+0x50>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 80107b4:	0028      	movs	r0, r5
 80107b6:	f000 fc75 	bl	80110a4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80107ba:	b005      	add	sp, #20
 80107bc:	bcc0      	pop	{r6, r7}
 80107be:	46b9      	mov	r9, r7
 80107c0:	46b0      	mov	r8, r6
 80107c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c4:	2000214c 	.word	0x2000214c
 80107c8:	0801d7e8 	.word	0x0801d7e8

080107cc <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80107cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107ce:	46c6      	mov	lr, r8
 80107d0:	b500      	push	{lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 80107d6:	2300      	movs	r3, #0
 80107d8:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80107da:	4b2a      	ldr	r3, [pc, #168]	; (8010884 <vTaskGetRunTimeStats+0xb8>)
 80107dc:	681a      	ldr	r2, [r3, #0]
 80107de:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 80107e0:	6818      	ldr	r0, [r3, #0]
 80107e2:	0140      	lsls	r0, r0, #5
 80107e4:	f000 fbcc 	bl	8010f80 <pvPortMalloc>
 80107e8:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 80107ea:	d015      	beq.n	8010818 <vTaskGetRunTimeStats+0x4c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80107ec:	9903      	ldr	r1, [sp, #12]
 80107ee:	aa01      	add	r2, sp, #4
 80107f0:	f7ff fd5c 	bl	80102ac <uxTaskGetSystemState>
 80107f4:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80107f6:	9d01      	ldr	r5, [sp, #4]
 80107f8:	2164      	movs	r1, #100	; 0x64
 80107fa:	0028      	movs	r0, r5
 80107fc:	f7ef fca8 	bl	8000150 <__udivsi3>
 8010800:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 8010802:	2d63      	cmp	r5, #99	; 0x63
 8010804:	d905      	bls.n	8010812 <vTaskGetRunTimeStats+0x46>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8010806:	2300      	movs	r3, #0
 8010808:	9302      	str	r3, [sp, #8]
 801080a:	9a02      	ldr	r2, [sp, #8]
 801080c:	9b03      	ldr	r3, [sp, #12]
 801080e:	429a      	cmp	r2, r3
 8010810:	d318      	bcc.n	8010844 <vTaskGetRunTimeStats+0x78>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8010812:	0038      	movs	r0, r7
 8010814:	f000 fc46 	bl	80110a4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010818:	b004      	add	sp, #16
 801081a:	bc80      	pop	{r7}
 801081c:	46b8      	mov	r8, r7
 801081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8010820:	9b02      	ldr	r3, [sp, #8]
 8010822:	015b      	lsls	r3, r3, #5
 8010824:	18fb      	adds	r3, r7, r3
 8010826:	699a      	ldr	r2, [r3, #24]
 8010828:	4917      	ldr	r1, [pc, #92]	; (8010888 <vTaskGetRunTimeStats+0xbc>)
 801082a:	f003 ff6f 	bl	801470c <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 801082e:	0020      	movs	r0, r4
 8010830:	f7ef fc72 	bl	8000118 <strlen>
 8010834:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8010836:	9b02      	ldr	r3, [sp, #8]
 8010838:	3301      	adds	r3, #1
 801083a:	9302      	str	r3, [sp, #8]
 801083c:	9a02      	ldr	r2, [sp, #8]
 801083e:	9b03      	ldr	r3, [sp, #12]
 8010840:	429a      	cmp	r2, r3
 8010842:	d2e6      	bcs.n	8010812 <vTaskGetRunTimeStats+0x46>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8010844:	9b02      	ldr	r3, [sp, #8]
 8010846:	015b      	lsls	r3, r3, #5
 8010848:	18fb      	adds	r3, r7, r3
 801084a:	699e      	ldr	r6, [r3, #24]
 801084c:	9d01      	ldr	r5, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801084e:	9b02      	ldr	r3, [sp, #8]
 8010850:	015b      	lsls	r3, r3, #5
 8010852:	18fb      	adds	r3, r7, r3
 8010854:	6859      	ldr	r1, [r3, #4]
 8010856:	0020      	movs	r0, r4
 8010858:	f7ff fa0a 	bl	800fc70 <prvWriteNameToBuffer>
 801085c:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 801085e:	42ae      	cmp	r6, r5
 8010860:	d3de      	bcc.n	8010820 <vTaskGetRunTimeStats+0x54>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8010862:	9b02      	ldr	r3, [sp, #8]
 8010864:	4698      	mov	r8, r3
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8010866:	0029      	movs	r1, r5
 8010868:	0030      	movs	r0, r6
 801086a:	f7ef fc71 	bl	8000150 <__udivsi3>
 801086e:	0003      	movs	r3, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8010870:	4642      	mov	r2, r8
 8010872:	0152      	lsls	r2, r2, #5
 8010874:	18ba      	adds	r2, r7, r2
 8010876:	6992      	ldr	r2, [r2, #24]
 8010878:	4904      	ldr	r1, [pc, #16]	; (801088c <vTaskGetRunTimeStats+0xc0>)
 801087a:	0020      	movs	r0, r4
 801087c:	f003 ff46 	bl	801470c <sprintf>
 8010880:	e7d5      	b.n	801082e <vTaskGetRunTimeStats+0x62>
 8010882:	46c0      	nop			; (mov r8, r8)
 8010884:	2000214c 	.word	0x2000214c
 8010888:	0801d804 	.word	0x0801d804
 801088c:	0801d7f8 	.word	0x0801d7f8

08010890 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010890:	4b05      	ldr	r3, [pc, #20]	; (80108a8 <pvTaskIncrementMutexHeldCount+0x18>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010898:	4b03      	ldr	r3, [pc, #12]	; (80108a8 <pvTaskIncrementMutexHeldCount+0x18>)
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801089e:	3301      	adds	r3, #1
 80108a0:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 80108a2:	4b01      	ldr	r3, [pc, #4]	; (80108a8 <pvTaskIncrementMutexHeldCount+0x18>)
 80108a4:	6818      	ldr	r0, [r3, #0]
	}
 80108a6:	4770      	bx	lr
 80108a8:	200020b0 	.word	0x200020b0

080108ac <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80108ac:	b570      	push	{r4, r5, r6, lr}
 80108ae:	0004      	movs	r4, r0
 80108b0:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80108b2:	f000 fae3 	bl	8010e7c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80108b6:	4b20      	ldr	r3, [pc, #128]	; (8010938 <ulTaskNotifyTake+0x8c>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d106      	bne.n	80108ce <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80108c0:	4b1d      	ldr	r3, [pc, #116]	; (8010938 <ulTaskNotifyTake+0x8c>)
 80108c2:	681a      	ldr	r2, [r3, #0]
 80108c4:	235c      	movs	r3, #92	; 0x5c
 80108c6:	2101      	movs	r1, #1
 80108c8:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 80108ca:	2d00      	cmp	r5, #0
 80108cc:	d117      	bne.n	80108fe <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80108ce:	f000 fae1 	bl	8010e94 <vPortExitCritical>

		taskENTER_CRITICAL();
 80108d2:	f000 fad3 	bl	8010e7c <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80108d6:	4b18      	ldr	r3, [pc, #96]	; (8010938 <ulTaskNotifyTake+0x8c>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 80108dc:	2d00      	cmp	r5, #0
 80108de:	d005      	beq.n	80108ec <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 80108e0:	2c00      	cmp	r4, #0
 80108e2:	d022      	beq.n	801092a <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80108e4:	4b14      	ldr	r3, [pc, #80]	; (8010938 <ulTaskNotifyTake+0x8c>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2200      	movs	r2, #0
 80108ea:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80108ec:	4b12      	ldr	r3, [pc, #72]	; (8010938 <ulTaskNotifyTake+0x8c>)
 80108ee:	681a      	ldr	r2, [r3, #0]
 80108f0:	235c      	movs	r3, #92	; 0x5c
 80108f2:	2100      	movs	r1, #0
 80108f4:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 80108f6:	f000 facd 	bl	8010e94 <vPortExitCritical>

		return ulReturn;
	}
 80108fa:	0028      	movs	r0, r5
 80108fc:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80108fe:	4b0e      	ldr	r3, [pc, #56]	; (8010938 <ulTaskNotifyTake+0x8c>)
 8010900:	6818      	ldr	r0, [r3, #0]
 8010902:	3004      	adds	r0, #4
 8010904:	f7fe fdd0 	bl	800f4a8 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 8010908:	1c6b      	adds	r3, r5, #1
 801090a:	d007      	beq.n	801091c <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 801090c:	4b0b      	ldr	r3, [pc, #44]	; (801093c <ulTaskNotifyTake+0x90>)
 801090e:	6818      	ldr	r0, [r3, #0]
 8010910:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010912:	f7ff f983 	bl	800fc1c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8010916:	f000 faa5 	bl	8010e64 <vPortYield>
 801091a:	e7d8      	b.n	80108ce <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 801091c:	4b06      	ldr	r3, [pc, #24]	; (8010938 <ulTaskNotifyTake+0x8c>)
 801091e:	6819      	ldr	r1, [r3, #0]
 8010920:	3104      	adds	r1, #4
 8010922:	4807      	ldr	r0, [pc, #28]	; (8010940 <ulTaskNotifyTake+0x94>)
 8010924:	f7fe fd9e 	bl	800f464 <vListInsertEnd>
 8010928:	e7f5      	b.n	8010916 <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 801092a:	4b03      	ldr	r3, [pc, #12]	; (8010938 <ulTaskNotifyTake+0x8c>)
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010930:	3b01      	subs	r3, #1
 8010932:	6593      	str	r3, [r2, #88]	; 0x58
 8010934:	e7da      	b.n	80108ec <ulTaskNotifyTake+0x40>
 8010936:	46c0      	nop			; (mov r8, r8)
 8010938:	200020b0 	.word	0x200020b0
 801093c:	200021d0 	.word	0x200021d0
 8010940:	200021a8 	.word	0x200021a8

08010944 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010946:	0004      	movs	r4, r0
 8010948:	000e      	movs	r6, r1
 801094a:	0015      	movs	r5, r2
 801094c:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 801094e:	2800      	cmp	r0, #0
 8010950:	d015      	beq.n	801097e <xTaskGenericNotify+0x3a>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8010952:	f000 fa93 	bl	8010e7c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010956:	2f00      	cmp	r7, #0
 8010958:	d001      	beq.n	801095e <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801095a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801095c:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 801095e:	225c      	movs	r2, #92	; 0x5c
 8010960:	5ca3      	ldrb	r3, [r4, r2]
 8010962:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 8010964:	2102      	movs	r1, #2
 8010966:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 8010968:	2d03      	cmp	r5, #3
 801096a:	d01a      	beq.n	80109a2 <xTaskGenericNotify+0x5e>
 801096c:	d809      	bhi.n	8010982 <xTaskGenericNotify+0x3e>
 801096e:	2d01      	cmp	r5, #1
 8010970:	d00d      	beq.n	801098e <xTaskGenericNotify+0x4a>
 8010972:	2d02      	cmp	r5, #2
 8010974:	d10e      	bne.n	8010994 <xTaskGenericNotify+0x50>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010976:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010978:	3201      	adds	r2, #1
 801097a:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 801097c:	e00a      	b.n	8010994 <xTaskGenericNotify+0x50>
		configASSERT( xTaskToNotify );
 801097e:	b672      	cpsid	i
 8010980:	e7fe      	b.n	8010980 <xTaskGenericNotify+0x3c>
			switch( eAction )
 8010982:	2d04      	cmp	r5, #4
 8010984:	d106      	bne.n	8010994 <xTaskGenericNotify+0x50>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8010986:	2b02      	cmp	r3, #2
 8010988:	d02f      	beq.n	80109ea <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801098a:	65a6      	str	r6, [r4, #88]	; 0x58
 801098c:	e002      	b.n	8010994 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 801098e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010990:	4316      	orrs	r6, r2
 8010992:	65a6      	str	r6, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8010994:	2501      	movs	r5, #1
 8010996:	2b01      	cmp	r3, #1
 8010998:	d005      	beq.n	80109a6 <xTaskGenericNotify+0x62>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801099a:	f000 fa7b 	bl	8010e94 <vPortExitCritical>

		return xReturn;
	}
 801099e:	0028      	movs	r0, r5
 80109a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue = ulValue;
 80109a2:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 80109a4:	e7f6      	b.n	8010994 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80109a6:	1d25      	adds	r5, r4, #4
 80109a8:	0028      	movs	r0, r5
 80109aa:	f7fe fd7d 	bl	800f4a8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80109ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80109b0:	4a0f      	ldr	r2, [pc, #60]	; (80109f0 <xTaskGenericNotify+0xac>)
 80109b2:	6812      	ldr	r2, [r2, #0]
 80109b4:	4293      	cmp	r3, r2
 80109b6:	d901      	bls.n	80109bc <xTaskGenericNotify+0x78>
 80109b8:	4a0d      	ldr	r2, [pc, #52]	; (80109f0 <xTaskGenericNotify+0xac>)
 80109ba:	6013      	str	r3, [r2, #0]
 80109bc:	0098      	lsls	r0, r3, #2
 80109be:	18c0      	adds	r0, r0, r3
 80109c0:	0080      	lsls	r0, r0, #2
 80109c2:	4b0c      	ldr	r3, [pc, #48]	; (80109f4 <xTaskGenericNotify+0xb0>)
 80109c4:	18c0      	adds	r0, r0, r3
 80109c6:	0029      	movs	r1, r5
 80109c8:	f7fe fd4c 	bl	800f464 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80109cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d001      	beq.n	80109d6 <xTaskGenericNotify+0x92>
 80109d2:	b672      	cpsid	i
 80109d4:	e7fe      	b.n	80109d4 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80109d6:	4b08      	ldr	r3, [pc, #32]	; (80109f8 <xTaskGenericNotify+0xb4>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80109dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109de:	2501      	movs	r5, #1
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d9da      	bls.n	801099a <xTaskGenericNotify+0x56>
					taskYIELD_IF_USING_PREEMPTION();
 80109e4:	f000 fa3e 	bl	8010e64 <vPortYield>
 80109e8:	e7d7      	b.n	801099a <xTaskGenericNotify+0x56>
						xReturn = pdFAIL;
 80109ea:	2500      	movs	r5, #0
 80109ec:	e7d5      	b.n	801099a <xTaskGenericNotify+0x56>
 80109ee:	46c0      	nop			; (mov r8, r8)
 80109f0:	20002160 	.word	0x20002160
 80109f4:	200020bc 	.word	0x200020bc
 80109f8:	200020b0 	.word	0x200020b0

080109fc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80109fc:	b510      	push	{r4, lr}
 80109fe:	0004      	movs	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010a00:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a02:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010a04:	4291      	cmp	r1, r2
 8010a06:	d80c      	bhi.n	8010a22 <prvInsertTimerInActiveList+0x26>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8010a08:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010a0a:	2001      	movs	r0, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8010a0c:	69a3      	ldr	r3, [r4, #24]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d300      	bcc.n	8010a14 <prvInsertTimerInActiveList+0x18>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8010a12:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010a14:	1d21      	adds	r1, r4, #4
 8010a16:	4b09      	ldr	r3, [pc, #36]	; (8010a3c <prvInsertTimerInActiveList+0x40>)
 8010a18:	6818      	ldr	r0, [r3, #0]
 8010a1a:	f7fe fd2e 	bl	800f47a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010a1e:	2000      	movs	r0, #0
 8010a20:	e7f7      	b.n	8010a12 <prvInsertTimerInActiveList+0x16>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d202      	bcs.n	8010a2c <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 8010a26:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010a28:	4299      	cmp	r1, r3
 8010a2a:	d2f2      	bcs.n	8010a12 <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a2c:	1d21      	adds	r1, r4, #4
 8010a2e:	4b04      	ldr	r3, [pc, #16]	; (8010a40 <prvInsertTimerInActiveList+0x44>)
 8010a30:	6818      	ldr	r0, [r3, #0]
 8010a32:	f7fe fd22 	bl	800f47a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010a36:	2000      	movs	r0, #0
 8010a38:	e7eb      	b.n	8010a12 <prvInsertTimerInActiveList+0x16>
 8010a3a:	46c0      	nop			; (mov r8, r8)
 8010a3c:	200021dc 	.word	0x200021dc
 8010a40:	200021d8 	.word	0x200021d8

08010a44 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010a44:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010a46:	f000 fa19 	bl	8010e7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010a4a:	4b11      	ldr	r3, [pc, #68]	; (8010a90 <prvCheckForValidListAndQueue+0x4c>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d002      	beq.n	8010a58 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a52:	f000 fa1f 	bl	8010e94 <vPortExitCritical>
}
 8010a56:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8010a58:	4d0e      	ldr	r5, [pc, #56]	; (8010a94 <prvCheckForValidListAndQueue+0x50>)
 8010a5a:	0028      	movs	r0, r5
 8010a5c:	f7fe fcf4 	bl	800f448 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a60:	4c0d      	ldr	r4, [pc, #52]	; (8010a98 <prvCheckForValidListAndQueue+0x54>)
 8010a62:	0020      	movs	r0, r4
 8010a64:	f7fe fcf0 	bl	800f448 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a68:	4b0c      	ldr	r3, [pc, #48]	; (8010a9c <prvCheckForValidListAndQueue+0x58>)
 8010a6a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a6c:	4b0c      	ldr	r3, [pc, #48]	; (8010aa0 <prvCheckForValidListAndQueue+0x5c>)
 8010a6e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8010a70:	2200      	movs	r2, #0
 8010a72:	2110      	movs	r1, #16
 8010a74:	2004      	movs	r0, #4
 8010a76:	f7fe fdec 	bl	800f652 <xQueueGenericCreate>
 8010a7a:	4b05      	ldr	r3, [pc, #20]	; (8010a90 <prvCheckForValidListAndQueue+0x4c>)
 8010a7c:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	d003      	beq.n	8010a8a <prvCheckForValidListAndQueue+0x46>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010a82:	4908      	ldr	r1, [pc, #32]	; (8010aa4 <prvCheckForValidListAndQueue+0x60>)
 8010a84:	f7ff f828 	bl	800fad8 <vQueueAddToRegistry>
 8010a88:	e7e3      	b.n	8010a52 <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 8010a8a:	b672      	cpsid	i
 8010a8c:	e7fe      	b.n	8010a8c <prvCheckForValidListAndQueue+0x48>
 8010a8e:	46c0      	nop			; (mov r8, r8)
 8010a90:	2000220c 	.word	0x2000220c
 8010a94:	200021e0 	.word	0x200021e0
 8010a98:	200021f4 	.word	0x200021f4
 8010a9c:	200021d8 	.word	0x200021d8
 8010aa0:	200021dc 	.word	0x200021dc
 8010aa4:	0801d824 	.word	0x0801d824

08010aa8 <xTimerCreateTimerTask>:
{
 8010aa8:	b500      	push	{lr}
 8010aaa:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 8010aac:	f7ff ffca 	bl	8010a44 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010ab0:	4b0a      	ldr	r3, [pc, #40]	; (8010adc <xTimerCreateTimerTask+0x34>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d00d      	beq.n	8010ad4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8010ab8:	2300      	movs	r3, #0
 8010aba:	9303      	str	r3, [sp, #12]
 8010abc:	9302      	str	r3, [sp, #8]
 8010abe:	9301      	str	r3, [sp, #4]
 8010ac0:	3303      	adds	r3, #3
 8010ac2:	9300      	str	r3, [sp, #0]
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	22a0      	movs	r2, #160	; 0xa0
 8010ac8:	4905      	ldr	r1, [pc, #20]	; (8010ae0 <xTimerCreateTimerTask+0x38>)
 8010aca:	4806      	ldr	r0, [pc, #24]	; (8010ae4 <xTimerCreateTimerTask+0x3c>)
 8010acc:	f7ff f8e6 	bl	800fc9c <xTaskGenericCreate>
	configASSERT( xReturn );
 8010ad0:	2800      	cmp	r0, #0
 8010ad2:	d101      	bne.n	8010ad8 <xTimerCreateTimerTask+0x30>
 8010ad4:	b672      	cpsid	i
 8010ad6:	e7fe      	b.n	8010ad6 <xTimerCreateTimerTask+0x2e>
}
 8010ad8:	b005      	add	sp, #20
 8010ada:	bd00      	pop	{pc}
 8010adc:	2000220c 	.word	0x2000220c
 8010ae0:	0801d82c 	.word	0x0801d82c
 8010ae4:	08010c31 	.word	0x08010c31

08010ae8 <xTimerCreate>:
{
 8010ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aea:	46c6      	mov	lr, r8
 8010aec:	b500      	push	{lr}
 8010aee:	4680      	mov	r8, r0
 8010af0:	000d      	movs	r5, r1
 8010af2:	0017      	movs	r7, r2
 8010af4:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8010af6:	2900      	cmp	r1, #0
 8010af8:	d014      	beq.n	8010b24 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8010afa:	202c      	movs	r0, #44	; 0x2c
 8010afc:	f000 fa40 	bl	8010f80 <pvPortMalloc>
 8010b00:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 8010b02:	d00b      	beq.n	8010b1c <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 8010b04:	f7ff ff9e 	bl	8010a44 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 8010b08:	4643      	mov	r3, r8
 8010b0a:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010b0c:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8010b0e:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8010b10:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010b12:	9b06      	ldr	r3, [sp, #24]
 8010b14:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010b16:	1d20      	adds	r0, r4, #4
 8010b18:	f7fe fca1 	bl	800f45e <vListInitialiseItem>
}
 8010b1c:	0020      	movs	r0, r4
 8010b1e:	bc80      	pop	{r7}
 8010b20:	46b8      	mov	r8, r7
 8010b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010b24:	b672      	cpsid	i
 8010b26:	e7fe      	b.n	8010b26 <xTimerCreate+0x3e>

08010b28 <xTimerGenericCommand>:
{
 8010b28:	b530      	push	{r4, r5, lr}
 8010b2a:	b085      	sub	sp, #20
 8010b2c:	0004      	movs	r4, r0
 8010b2e:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 8010b30:	4b12      	ldr	r3, [pc, #72]	; (8010b7c <xTimerGenericCommand+0x54>)
 8010b32:	6818      	ldr	r0, [r3, #0]
 8010b34:	2800      	cmp	r0, #0
 8010b36:	d01f      	beq.n	8010b78 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 8010b38:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010b3a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8010b3c:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010b3e:	2905      	cmp	r1, #5
 8010b40:	dc13      	bgt.n	8010b6a <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010b42:	f7ff fd4d 	bl	80105e0 <xTaskGetSchedulerState>
 8010b46:	2802      	cmp	r0, #2
 8010b48:	d007      	beq.n	8010b5a <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010b4a:	4b0c      	ldr	r3, [pc, #48]	; (8010b7c <xTimerGenericCommand+0x54>)
 8010b4c:	6818      	ldr	r0, [r3, #0]
 8010b4e:	2300      	movs	r3, #0
 8010b50:	2200      	movs	r2, #0
 8010b52:	4669      	mov	r1, sp
 8010b54:	f7fe fdb6 	bl	800f6c4 <xQueueGenericSend>
 8010b58:	e00c      	b.n	8010b74 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010b5a:	4b08      	ldr	r3, [pc, #32]	; (8010b7c <xTimerGenericCommand+0x54>)
 8010b5c:	6818      	ldr	r0, [r3, #0]
 8010b5e:	2300      	movs	r3, #0
 8010b60:	9a08      	ldr	r2, [sp, #32]
 8010b62:	4669      	mov	r1, sp
 8010b64:	f7fe fdae 	bl	800f6c4 <xQueueGenericSend>
 8010b68:	e004      	b.n	8010b74 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	002a      	movs	r2, r5
 8010b6e:	4669      	mov	r1, sp
 8010b70:	f7fe fe44 	bl	800f7fc <xQueueGenericSendFromISR>
}
 8010b74:	b005      	add	sp, #20
 8010b76:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8010b78:	2000      	movs	r0, #0
	return xReturn;
 8010b7a:	e7fb      	b.n	8010b74 <xTimerGenericCommand+0x4c>
 8010b7c:	2000220c 	.word	0x2000220c

08010b80 <prvSampleTimeNow>:
{
 8010b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b82:	46d6      	mov	lr, sl
 8010b84:	464f      	mov	r7, r9
 8010b86:	4646      	mov	r6, r8
 8010b88:	b5c0      	push	{r6, r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	0006      	movs	r6, r0
	xTimeNow = xTaskGetTickCount();
 8010b8e:	f7ff fa1f 	bl	800ffd0 <xTaskGetTickCount>
 8010b92:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8010b94:	4b23      	ldr	r3, [pc, #140]	; (8010c24 <prvSampleTimeNow+0xa4>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	4283      	cmp	r3, r0
 8010b9a:	d80a      	bhi.n	8010bb2 <prvSampleTimeNow+0x32>
		*pxTimerListsWereSwitched = pdFALSE;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8010ba0:	4b20      	ldr	r3, [pc, #128]	; (8010c24 <prvSampleTimeNow+0xa4>)
 8010ba2:	601c      	str	r4, [r3, #0]
}
 8010ba4:	0020      	movs	r0, r4
 8010ba6:	b004      	add	sp, #16
 8010ba8:	bce0      	pop	{r5, r6, r7}
 8010baa:	46ba      	mov	sl, r7
 8010bac:	46b1      	mov	r9, r6
 8010bae:	46a8      	mov	r8, r5
 8010bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010bb2:	4b1d      	ldr	r3, [pc, #116]	; (8010c28 <prvSampleTimeNow+0xa8>)
 8010bb4:	4698      	mov	r8, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010bba:	4643      	mov	r3, r8
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	2a00      	cmp	r2, #0
 8010bc2:	d026      	beq.n	8010c12 <prvSampleTimeNow+0x92>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010bc4:	68db      	ldr	r3, [r3, #12]
 8010bc6:	681a      	ldr	r2, [r3, #0]
 8010bc8:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010bca:	68dd      	ldr	r5, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010bcc:	1d2f      	adds	r7, r5, #4
 8010bce:	0038      	movs	r0, r7
 8010bd0:	f7fe fc6a 	bl	800f4a8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010bd4:	0028      	movs	r0, r5
 8010bd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010bd8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010bda:	69eb      	ldr	r3, [r5, #28]
 8010bdc:	2b01      	cmp	r3, #1
 8010bde:	d1ec      	bne.n	8010bba <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010be0:	69ab      	ldr	r3, [r5, #24]
 8010be2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8010be4:	459a      	cmp	sl, r3
 8010be6:	d209      	bcs.n	8010bfc <prvSampleTimeNow+0x7c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010be8:	606b      	str	r3, [r5, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010bea:	612d      	str	r5, [r5, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010bec:	4b0e      	ldr	r3, [pc, #56]	; (8010c28 <prvSampleTimeNow+0xa8>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	9303      	str	r3, [sp, #12]
 8010bf2:	0039      	movs	r1, r7
 8010bf4:	0018      	movs	r0, r3
 8010bf6:	f7fe fc40 	bl	800f47a <vListInsert>
 8010bfa:	e7de      	b.n	8010bba <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010bfc:	464b      	mov	r3, r9
 8010bfe:	9300      	str	r3, [sp, #0]
 8010c00:	4652      	mov	r2, sl
 8010c02:	4649      	mov	r1, r9
 8010c04:	0028      	movs	r0, r5
 8010c06:	f7ff ff8f 	bl	8010b28 <xTimerGenericCommand>
				configASSERT( xResult );
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	d1d5      	bne.n	8010bba <prvSampleTimeNow+0x3a>
 8010c0e:	b672      	cpsid	i
 8010c10:	e7fe      	b.n	8010c10 <prvSampleTimeNow+0x90>
	pxCurrentTimerList = pxOverflowTimerList;
 8010c12:	4a06      	ldr	r2, [pc, #24]	; (8010c2c <prvSampleTimeNow+0xac>)
 8010c14:	4904      	ldr	r1, [pc, #16]	; (8010c28 <prvSampleTimeNow+0xa8>)
 8010c16:	6810      	ldr	r0, [r2, #0]
 8010c18:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8010c1a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	6033      	str	r3, [r6, #0]
 8010c20:	e7be      	b.n	8010ba0 <prvSampleTimeNow+0x20>
 8010c22:	46c0      	nop			; (mov r8, r8)
 8010c24:	20002208 	.word	0x20002208
 8010c28:	200021d8 	.word	0x200021d8
 8010c2c:	200021dc 	.word	0x200021dc

08010c30 <prvTimerTask>:
{
 8010c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c32:	b08d      	sub	sp, #52	; 0x34
 8010c34:	4d57      	ldr	r5, [pc, #348]	; (8010d94 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010c36:	4b58      	ldr	r3, [pc, #352]	; (8010d98 <prvTimerTask+0x168>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	681e      	ldr	r6, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010c3c:	2e00      	cmp	r6, #0
 8010c3e:	d100      	bne.n	8010c42 <prvTimerTask+0x12>
 8010c40:	e09b      	b.n	8010d7a <prvTimerTask+0x14a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c42:	68db      	ldr	r3, [r3, #12]
 8010c44:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 8010c46:	f7ff f9bb 	bl	800ffc0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c4a:	a808      	add	r0, sp, #32
 8010c4c:	f7ff ff98 	bl	8010b80 <prvSampleTimeNow>
 8010c50:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010c52:	9b08      	ldr	r3, [sp, #32]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d000      	beq.n	8010c5a <prvTimerTask+0x2a>
 8010c58:	e099      	b.n	8010d8e <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010c5a:	4286      	cmp	r6, r0
 8010c5c:	d90a      	bls.n	8010c74 <prvTimerTask+0x44>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8010c5e:	1b31      	subs	r1, r6, r4
 8010c60:	4b4e      	ldr	r3, [pc, #312]	; (8010d9c <prvTimerTask+0x16c>)
 8010c62:	6818      	ldr	r0, [r3, #0]
 8010c64:	f7fe ff4c 	bl	800fb00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010c68:	f7ff fa52 	bl	8010110 <xTaskResumeAll>
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d025      	beq.n	8010cbc <prvTimerTask+0x8c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010c70:	4c4a      	ldr	r4, [pc, #296]	; (8010d9c <prvTimerTask+0x16c>)
}
 8010c72:	e033      	b.n	8010cdc <prvTimerTask+0xac>
				( void ) xTaskResumeAll();
 8010c74:	f7ff fa4c 	bl	8010110 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c78:	4b47      	ldr	r3, [pc, #284]	; (8010d98 <prvTimerTask+0x168>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	68db      	ldr	r3, [r3, #12]
 8010c7e:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c80:	1d38      	adds	r0, r7, #4
 8010c82:	f7fe fc11 	bl	800f4a8 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010c86:	69fb      	ldr	r3, [r7, #28]
 8010c88:	2b01      	cmp	r3, #1
 8010c8a:	d003      	beq.n	8010c94 <prvTimerTask+0x64>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8e:	0038      	movs	r0, r7
 8010c90:	4798      	blx	r3
}
 8010c92:	e7ed      	b.n	8010c70 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8010c94:	69bb      	ldr	r3, [r7, #24]
 8010c96:	18f1      	adds	r1, r6, r3
 8010c98:	0033      	movs	r3, r6
 8010c9a:	0022      	movs	r2, r4
 8010c9c:	0038      	movs	r0, r7
 8010c9e:	f7ff fead 	bl	80109fc <prvInsertTimerInActiveList>
 8010ca2:	2801      	cmp	r0, #1
 8010ca4:	d1f2      	bne.n	8010c8c <prvTimerTask+0x5c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	9100      	str	r1, [sp, #0]
 8010caa:	000b      	movs	r3, r1
 8010cac:	0032      	movs	r2, r6
 8010cae:	0038      	movs	r0, r7
 8010cb0:	f7ff ff3a 	bl	8010b28 <xTimerGenericCommand>
			configASSERT( xResult );
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	d1e9      	bne.n	8010c8c <prvTimerTask+0x5c>
 8010cb8:	b672      	cpsid	i
 8010cba:	e7fe      	b.n	8010cba <prvTimerTask+0x8a>
					portYIELD_WITHIN_API();
 8010cbc:	f000 f8d2 	bl	8010e64 <vPortYield>
 8010cc0:	e7d6      	b.n	8010c70 <prvTimerTask+0x40>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cc4:	9303      	str	r3, [sp, #12]
 8010cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cc8:	9304      	str	r3, [sp, #16]
 8010cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ccc:	9305      	str	r3, [sp, #20]
 8010cce:	9903      	ldr	r1, [sp, #12]
 8010cd0:	9804      	ldr	r0, [sp, #16]
 8010cd2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010cd4:	9b08      	ldr	r3, [sp, #32]
 8010cd6:	9303      	str	r3, [sp, #12]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	da0b      	bge.n	8010cf4 <prvTimerTask+0xc4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010cdc:	2300      	movs	r3, #0
 8010cde:	2200      	movs	r2, #0
 8010ce0:	a908      	add	r1, sp, #32
 8010ce2:	6820      	ldr	r0, [r4, #0]
 8010ce4:	f7fe fe0e 	bl	800f904 <xQueueGenericReceive>
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	d0a4      	beq.n	8010c36 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010cec:	9b08      	ldr	r3, [sp, #32]
 8010cee:	9303      	str	r3, [sp, #12]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	dbe6      	blt.n	8010cc2 <prvTimerTask+0x92>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010cf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8010cf6:	6973      	ldr	r3, [r6, #20]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d002      	beq.n	8010d02 <prvTimerTask+0xd2>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010cfc:	1d30      	adds	r0, r6, #4
 8010cfe:	f7fe fbd3 	bl	800f4a8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d02:	a807      	add	r0, sp, #28
 8010d04:	f7ff ff3c 	bl	8010b80 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010d08:	9b08      	ldr	r3, [sp, #32]
 8010d0a:	9303      	str	r3, [sp, #12]
 8010d0c:	2b09      	cmp	r3, #9
 8010d0e:	d8e5      	bhi.n	8010cdc <prvTimerTask+0xac>
 8010d10:	009b      	lsls	r3, r3, #2
 8010d12:	58eb      	ldr	r3, [r5, r3]
 8010d14:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8010d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d18:	69b2      	ldr	r2, [r6, #24]
 8010d1a:	4694      	mov	ip, r2
 8010d1c:	4463      	add	r3, ip
 8010d1e:	0019      	movs	r1, r3
 8010d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d22:	0002      	movs	r2, r0
 8010d24:	0030      	movs	r0, r6
 8010d26:	f7ff fe69 	bl	80109fc <prvInsertTimerInActiveList>
 8010d2a:	2801      	cmp	r0, #1
 8010d2c:	d1d6      	bne.n	8010cdc <prvTimerTask+0xac>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d2e:	0030      	movs	r0, r6
 8010d30:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010d32:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010d34:	69f3      	ldr	r3, [r6, #28]
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d1d0      	bne.n	8010cdc <prvTimerTask+0xac>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d3c:	69b1      	ldr	r1, [r6, #24]
 8010d3e:	468c      	mov	ip, r1
 8010d40:	4463      	add	r3, ip
 8010d42:	001a      	movs	r2, r3
 8010d44:	2300      	movs	r3, #0
 8010d46:	9300      	str	r3, [sp, #0]
 8010d48:	2100      	movs	r1, #0
 8010d4a:	0030      	movs	r0, r6
 8010d4c:	f7ff feec 	bl	8010b28 <xTimerGenericCommand>
							configASSERT( xResult );
 8010d50:	2800      	cmp	r0, #0
 8010d52:	d1c3      	bne.n	8010cdc <prvTimerTask+0xac>
 8010d54:	b672      	cpsid	i
 8010d56:	e7fe      	b.n	8010d56 <prvTimerTask+0x126>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010d58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d5a:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	d006      	beq.n	8010d6e <prvTimerTask+0x13e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010d60:	1841      	adds	r1, r0, r1
 8010d62:	0003      	movs	r3, r0
 8010d64:	0002      	movs	r2, r0
 8010d66:	0030      	movs	r0, r6
 8010d68:	f7ff fe48 	bl	80109fc <prvInsertTimerInActiveList>
					break;
 8010d6c:	e7b6      	b.n	8010cdc <prvTimerTask+0xac>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010d6e:	b672      	cpsid	i
 8010d70:	e7fe      	b.n	8010d70 <prvTimerTask+0x140>
					vPortFree( pxTimer );
 8010d72:	0030      	movs	r0, r6
 8010d74:	f000 f996 	bl	80110a4 <vPortFree>
					break;
 8010d78:	e7b0      	b.n	8010cdc <prvTimerTask+0xac>
	vTaskSuspendAll();
 8010d7a:	f7ff f921 	bl	800ffc0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d7e:	a808      	add	r0, sp, #32
 8010d80:	f7ff fefe 	bl	8010b80 <prvSampleTimeNow>
 8010d84:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010d86:	9b08      	ldr	r3, [sp, #32]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d100      	bne.n	8010d8e <prvTimerTask+0x15e>
 8010d8c:	e767      	b.n	8010c5e <prvTimerTask+0x2e>
			( void ) xTaskResumeAll();
 8010d8e:	f7ff f9bf 	bl	8010110 <xTaskResumeAll>
 8010d92:	e76d      	b.n	8010c70 <prvTimerTask+0x40>
 8010d94:	0801d834 	.word	0x0801d834
 8010d98:	200021d8 	.word	0x200021d8
 8010d9c:	2000220c 	.word	0x2000220c

08010da0 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010da0:	b510      	push	{r4, lr}
 8010da2:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8010da4:	d006      	beq.n	8010db4 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8010da6:	f000 f869 	bl	8010e7c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010daa:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8010dac:	f000 f872 	bl	8010e94 <vPortExitCritical>

	return pvReturn;
}
 8010db0:	0020      	movs	r0, r4
 8010db2:	bd10      	pop	{r4, pc}
	configASSERT( xTimer );
 8010db4:	b672      	cpsid	i
 8010db6:	e7fe      	b.n	8010db6 <pvTimerGetTimerID+0x16>

08010db8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010db8:	4b03      	ldr	r3, [pc, #12]	; (8010dc8 <prvTaskExitError+0x10>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	d001      	beq.n	8010dc4 <prvTaskExitError+0xc>
 8010dc0:	b672      	cpsid	i
 8010dc2:	e7fe      	b.n	8010dc2 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8010dc4:	b672      	cpsid	i
	for( ;; );
 8010dc6:	e7fe      	b.n	8010dc6 <prvTaskExitError+0xe>
 8010dc8:	200000cc 	.word	0x200000cc

08010dcc <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010dcc:	4a06      	ldr	r2, [pc, #24]	; (8010de8 <pxCurrentTCBConst2>)
 8010dce:	6813      	ldr	r3, [r2, #0]
 8010dd0:	6818      	ldr	r0, [r3, #0]
 8010dd2:	3020      	adds	r0, #32
 8010dd4:	f380 8809 	msr	PSP, r0
 8010dd8:	2002      	movs	r0, #2
 8010dda:	f380 8814 	msr	CONTROL, r0
 8010dde:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010de0:	46ae      	mov	lr, r5
 8010de2:	b662      	cpsie	i
 8010de4:	bd00      	pop	{pc}
 8010de6:	46c0      	nop			; (mov r8, r8)

08010de8 <pxCurrentTCBConst2>:
 8010de8:	200020b0 	.word	0x200020b0

08010dec <pxPortInitialiseStack>:
{
 8010dec:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010dee:	1f03      	subs	r3, r0, #4
 8010df0:	2480      	movs	r4, #128	; 0x80
 8010df2:	0464      	lsls	r4, r4, #17
 8010df4:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8010df6:	3b04      	subs	r3, #4
 8010df8:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010dfa:	3b04      	subs	r3, #4
 8010dfc:	4902      	ldr	r1, [pc, #8]	; (8010e08 <pxPortInitialiseStack+0x1c>)
 8010dfe:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010e00:	3b14      	subs	r3, #20
 8010e02:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010e04:	3840      	subs	r0, #64	; 0x40
}
 8010e06:	bd10      	pop	{r4, pc}
 8010e08:	08010db9 	.word	0x08010db9

08010e0c <SVC_Handler>:
}
 8010e0c:	4770      	bx	lr
	...

08010e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010e10:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8010e12:	4b0f      	ldr	r3, [pc, #60]	; (8010e50 <xPortStartScheduler+0x40>)
 8010e14:	6819      	ldr	r1, [r3, #0]
 8010e16:	22ff      	movs	r2, #255	; 0xff
 8010e18:	0412      	lsls	r2, r2, #16
 8010e1a:	430a      	orrs	r2, r1
 8010e1c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8010e1e:	6819      	ldr	r1, [r3, #0]
 8010e20:	22ff      	movs	r2, #255	; 0xff
 8010e22:	0612      	lsls	r2, r2, #24
 8010e24:	430a      	orrs	r2, r1
 8010e26:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e28:	4b0a      	ldr	r3, [pc, #40]	; (8010e54 <xPortStartScheduler+0x44>)
 8010e2a:	6818      	ldr	r0, [r3, #0]
 8010e2c:	21fa      	movs	r1, #250	; 0xfa
 8010e2e:	0089      	lsls	r1, r1, #2
 8010e30:	f7ef f98e 	bl	8000150 <__udivsi3>
 8010e34:	3801      	subs	r0, #1
 8010e36:	4b08      	ldr	r3, [pc, #32]	; (8010e58 <xPortStartScheduler+0x48>)
 8010e38:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8010e3a:	4b08      	ldr	r3, [pc, #32]	; (8010e5c <xPortStartScheduler+0x4c>)
 8010e3c:	2207      	movs	r2, #7
 8010e3e:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8010e40:	4b07      	ldr	r3, [pc, #28]	; (8010e60 <xPortStartScheduler+0x50>)
 8010e42:	2200      	movs	r2, #0
 8010e44:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8010e46:	f7ff ffc1 	bl	8010dcc <vPortStartFirstTask>
	prvTaskExitError();
 8010e4a:	f7ff ffb5 	bl	8010db8 <prvTaskExitError>
 8010e4e:	46c0      	nop			; (mov r8, r8)
 8010e50:	e000ed20 	.word	0xe000ed20
 8010e54:	200000b8 	.word	0x200000b8
 8010e58:	e000e014 	.word	0xe000e014
 8010e5c:	e000e010 	.word	0xe000e010
 8010e60:	200000cc 	.word	0x200000cc

08010e64 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010e64:	4b04      	ldr	r3, [pc, #16]	; (8010e78 <vPortYield+0x14>)
 8010e66:	2280      	movs	r2, #128	; 0x80
 8010e68:	0552      	lsls	r2, r2, #21
 8010e6a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010e6c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010e70:	f3bf 8f6f 	isb	sy
}
 8010e74:	4770      	bx	lr
 8010e76:	46c0      	nop			; (mov r8, r8)
 8010e78:	e000ed04 	.word	0xe000ed04

08010e7c <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010e7c:	b672      	cpsid	i
    uxCriticalNesting++;
 8010e7e:	4a04      	ldr	r2, [pc, #16]	; (8010e90 <vPortEnterCritical+0x14>)
 8010e80:	6813      	ldr	r3, [r2, #0]
 8010e82:	3301      	adds	r3, #1
 8010e84:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8010e86:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010e8a:	f3bf 8f6f 	isb	sy
}
 8010e8e:	4770      	bx	lr
 8010e90:	200000cc 	.word	0x200000cc

08010e94 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010e94:	4b06      	ldr	r3, [pc, #24]	; (8010eb0 <vPortExitCritical+0x1c>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d101      	bne.n	8010ea0 <vPortExitCritical+0xc>
 8010e9c:	b672      	cpsid	i
 8010e9e:	e7fe      	b.n	8010e9e <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8010ea0:	3b01      	subs	r3, #1
 8010ea2:	4a03      	ldr	r2, [pc, #12]	; (8010eb0 <vPortExitCritical+0x1c>)
 8010ea4:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d100      	bne.n	8010eac <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 8010eaa:	b662      	cpsie	i
}
 8010eac:	4770      	bx	lr
 8010eae:	46c0      	nop			; (mov r8, r8)
 8010eb0:	200000cc 	.word	0x200000cc

08010eb4 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8010eb4:	f3ef 8010 	mrs	r0, PRIMASK
 8010eb8:	b672      	cpsid	i
 8010eba:	4770      	bx	lr
}
 8010ebc:	2000      	movs	r0, #0

08010ebe <vClearInterruptMaskFromISR>:
	__asm volatile(
 8010ebe:	f380 8810 	msr	PRIMASK, r0
 8010ec2:	4770      	bx	lr

08010ec4 <PendSV_Handler>:
	__asm volatile
 8010ec4:	f3ef 8009 	mrs	r0, PSP
 8010ec8:	4b0e      	ldr	r3, [pc, #56]	; (8010f04 <pxCurrentTCBConst>)
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	3820      	subs	r0, #32
 8010ece:	6010      	str	r0, [r2, #0]
 8010ed0:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010ed2:	4644      	mov	r4, r8
 8010ed4:	464d      	mov	r5, r9
 8010ed6:	4656      	mov	r6, sl
 8010ed8:	465f      	mov	r7, fp
 8010eda:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010edc:	b508      	push	{r3, lr}
 8010ede:	b672      	cpsid	i
 8010ee0:	f7ff fa36 	bl	8010350 <vTaskSwitchContext>
 8010ee4:	b662      	cpsie	i
 8010ee6:	bc0c      	pop	{r2, r3}
 8010ee8:	6811      	ldr	r1, [r2, #0]
 8010eea:	6808      	ldr	r0, [r1, #0]
 8010eec:	3010      	adds	r0, #16
 8010eee:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010ef0:	46a0      	mov	r8, r4
 8010ef2:	46a9      	mov	r9, r5
 8010ef4:	46b2      	mov	sl, r6
 8010ef6:	46bb      	mov	fp, r7
 8010ef8:	f380 8809 	msr	PSP, r0
 8010efc:	3820      	subs	r0, #32
 8010efe:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010f00:	4718      	bx	r3
 8010f02:	46c0      	nop			; (mov r8, r8)

08010f04 <pxCurrentTCBConst>:
 8010f04:	200020b0 	.word	0x200020b0

08010f08 <xPortSysTickHandler>:
{
 8010f08:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f0a:	f7ff ffd3 	bl	8010eb4 <ulSetInterruptMaskFromISR>
 8010f0e:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8010f10:	f7ff f86a 	bl	800ffe8 <xTaskIncrementTick>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	d003      	beq.n	8010f20 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8010f18:	4b03      	ldr	r3, [pc, #12]	; (8010f28 <xPortSysTickHandler+0x20>)
 8010f1a:	2280      	movs	r2, #128	; 0x80
 8010f1c:	0552      	lsls	r2, r2, #21
 8010f1e:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010f20:	0020      	movs	r0, r4
 8010f22:	f7ff ffcc 	bl	8010ebe <vClearInterruptMaskFromISR>
}
 8010f26:	bd10      	pop	{r4, pc}
 8010f28:	e000ed04 	.word	0xe000ed04

08010f2c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010f2c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010f2e:	4b12      	ldr	r3, [pc, #72]	; (8010f78 <prvInsertBlockIntoFreeList+0x4c>)
 8010f30:	001a      	movs	r2, r3
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	4283      	cmp	r3, r0
 8010f36:	d3fb      	bcc.n	8010f30 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010f38:	6851      	ldr	r1, [r2, #4]
 8010f3a:	1854      	adds	r4, r2, r1
 8010f3c:	42a0      	cmp	r0, r4
 8010f3e:	d008      	beq.n	8010f52 <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010f40:	6841      	ldr	r1, [r0, #4]
 8010f42:	1844      	adds	r4, r0, r1
 8010f44:	42a3      	cmp	r3, r4
 8010f46:	d009      	beq.n	8010f5c <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010f48:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010f4a:	4290      	cmp	r0, r2
 8010f4c:	d000      	beq.n	8010f50 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010f4e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f50:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010f52:	6840      	ldr	r0, [r0, #4]
 8010f54:	1841      	adds	r1, r0, r1
 8010f56:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8010f58:	0010      	movs	r0, r2
 8010f5a:	e7f1      	b.n	8010f40 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010f5c:	4c07      	ldr	r4, [pc, #28]	; (8010f7c <prvInsertBlockIntoFreeList+0x50>)
 8010f5e:	6824      	ldr	r4, [r4, #0]
 8010f60:	42a3      	cmp	r3, r4
 8010f62:	d006      	beq.n	8010f72 <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	1859      	adds	r1, r3, r1
 8010f68:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010f6a:	6813      	ldr	r3, [r2, #0]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	6003      	str	r3, [r0, #0]
 8010f70:	e7eb      	b.n	8010f4a <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010f72:	6004      	str	r4, [r0, #0]
 8010f74:	e7e9      	b.n	8010f4a <prvInsertBlockIntoFreeList+0x1e>
 8010f76:	46c0      	nop			; (mov r8, r8)
 8010f78:	20006c58 	.word	0x20006c58
 8010f7c:	20002210 	.word	0x20002210

08010f80 <pvPortMalloc>:
{
 8010f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f82:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010f84:	f7ff f81c 	bl	800ffc0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8010f88:	4b3f      	ldr	r3, [pc, #252]	; (8011088 <pvPortMalloc+0x108>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d015      	beq.n	8010fbc <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010f90:	4b3e      	ldr	r3, [pc, #248]	; (801108c <pvPortMalloc+0x10c>)
 8010f92:	681e      	ldr	r6, [r3, #0]
 8010f94:	4234      	tst	r4, r6
 8010f96:	d135      	bne.n	8011004 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 8010f98:	2c00      	cmp	r4, #0
 8010f9a:	d03a      	beq.n	8011012 <pvPortMalloc+0x92>
				xWantedSize += xHeapStructSize;
 8010f9c:	0023      	movs	r3, r4
 8010f9e:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010fa0:	0762      	lsls	r2, r4, #29
 8010fa2:	d002      	beq.n	8010faa <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010fa4:	2207      	movs	r2, #7
 8010fa6:	4393      	bics	r3, r2
 8010fa8:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d031      	beq.n	8011012 <pvPortMalloc+0x92>
 8010fae:	4a38      	ldr	r2, [pc, #224]	; (8011090 <pvPortMalloc+0x110>)
 8010fb0:	6815      	ldr	r5, [r2, #0]
 8010fb2:	429d      	cmp	r5, r3
 8010fb4:	d330      	bcc.n	8011018 <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 8010fb6:	4a37      	ldr	r2, [pc, #220]	; (8011094 <pvPortMalloc+0x114>)
 8010fb8:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fba:	e032      	b.n	8011022 <pvPortMalloc+0xa2>
	ulAddress = ( uint32_t ) ucHeap;
 8010fbc:	4a36      	ldr	r2, [pc, #216]	; (8011098 <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010fbe:	0753      	lsls	r3, r2, #29
 8010fc0:	d01e      	beq.n	8011000 <pvPortMalloc+0x80>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8010fc2:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010fc4:	2307      	movs	r3, #7
 8010fc6:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8010fc8:	4b34      	ldr	r3, [pc, #208]	; (801109c <pvPortMalloc+0x11c>)
 8010fca:	18d3      	adds	r3, r2, r3
 8010fcc:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010fce:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010fd0:	4830      	ldr	r0, [pc, #192]	; (8011094 <pvPortMalloc+0x114>)
 8010fd2:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010fd8:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 8010fda:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010fdc:	2007      	movs	r0, #7
 8010fde:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 8010fe0:	4829      	ldr	r0, [pc, #164]	; (8011088 <pvPortMalloc+0x108>)
 8010fe2:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8010fe4:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010fe6:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8010fe8:	1a99      	subs	r1, r3, r2
 8010fea:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010fec:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010fee:	4b2c      	ldr	r3, [pc, #176]	; (80110a0 <pvPortMalloc+0x120>)
 8010ff0:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ff2:	4b27      	ldr	r3, [pc, #156]	; (8011090 <pvPortMalloc+0x110>)
 8010ff4:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010ff6:	4b25      	ldr	r3, [pc, #148]	; (801108c <pvPortMalloc+0x10c>)
 8010ff8:	2280      	movs	r2, #128	; 0x80
 8010ffa:	0612      	lsls	r2, r2, #24
 8010ffc:	601a      	str	r2, [r3, #0]
}
 8010ffe:	e7c7      	b.n	8010f90 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011000:	4b26      	ldr	r3, [pc, #152]	; (801109c <pvPortMalloc+0x11c>)
 8011002:	e7e5      	b.n	8010fd0 <pvPortMalloc+0x50>
	( void ) xTaskResumeAll();
 8011004:	f7ff f884 	bl	8010110 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8011008:	f7fd fb80 	bl	800e70c <vApplicationMallocFailedHook>
 801100c:	2700      	movs	r7, #0
}
 801100e:	0038      	movs	r0, r7
 8011010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 8011012:	f7ff f87d 	bl	8010110 <xTaskResumeAll>
		if( pvReturn == NULL )
 8011016:	e7f7      	b.n	8011008 <pvPortMalloc+0x88>
	( void ) xTaskResumeAll();
 8011018:	f7ff f87a 	bl	8010110 <xTaskResumeAll>
		if( pvReturn == NULL )
 801101c:	e7f4      	b.n	8011008 <pvPortMalloc+0x88>
 801101e:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8011020:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011022:	6861      	ldr	r1, [r4, #4]
 8011024:	4299      	cmp	r1, r3
 8011026:	d202      	bcs.n	801102e <pvPortMalloc+0xae>
 8011028:	6821      	ldr	r1, [r4, #0]
 801102a:	2900      	cmp	r1, #0
 801102c:	d1f7      	bne.n	801101e <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 801102e:	4916      	ldr	r1, [pc, #88]	; (8011088 <pvPortMalloc+0x108>)
 8011030:	6809      	ldr	r1, [r1, #0]
 8011032:	42a1      	cmp	r1, r4
 8011034:	d00c      	beq.n	8011050 <pvPortMalloc+0xd0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011036:	6817      	ldr	r7, [r2, #0]
 8011038:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801103a:	6821      	ldr	r1, [r4, #0]
 801103c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801103e:	6862      	ldr	r2, [r4, #4]
 8011040:	1ad2      	subs	r2, r2, r3
 8011042:	2a10      	cmp	r2, #16
 8011044:	d90b      	bls.n	801105e <pvPortMalloc+0xde>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011046:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011048:	0741      	lsls	r1, r0, #29
 801104a:	d004      	beq.n	8011056 <pvPortMalloc+0xd6>
 801104c:	b672      	cpsid	i
 801104e:	e7fe      	b.n	801104e <pvPortMalloc+0xce>
	( void ) xTaskResumeAll();
 8011050:	f7ff f85e 	bl	8010110 <xTaskResumeAll>
		if( pvReturn == NULL )
 8011054:	e7d8      	b.n	8011008 <pvPortMalloc+0x88>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011056:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011058:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 801105a:	f7ff ff67 	bl	8010f2c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801105e:	6862      	ldr	r2, [r4, #4]
 8011060:	1aad      	subs	r5, r5, r2
 8011062:	490b      	ldr	r1, [pc, #44]	; (8011090 <pvPortMalloc+0x110>)
 8011064:	600d      	str	r5, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011066:	490e      	ldr	r1, [pc, #56]	; (80110a0 <pvPortMalloc+0x120>)
 8011068:	6809      	ldr	r1, [r1, #0]
 801106a:	428d      	cmp	r5, r1
 801106c:	d201      	bcs.n	8011072 <pvPortMalloc+0xf2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801106e:	490c      	ldr	r1, [pc, #48]	; (80110a0 <pvPortMalloc+0x120>)
 8011070:	600d      	str	r5, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011072:	4316      	orrs	r6, r2
 8011074:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011076:	2300      	movs	r3, #0
 8011078:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 801107a:	f7ff f849 	bl	8010110 <xTaskResumeAll>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801107e:	077b      	lsls	r3, r7, #29
 8011080:	d0c5      	beq.n	801100e <pvPortMalloc+0x8e>
 8011082:	b672      	cpsid	i
 8011084:	e7fe      	b.n	8011084 <pvPortMalloc+0x104>
 8011086:	46c0      	nop			; (mov r8, r8)
 8011088:	20002210 	.word	0x20002210
 801108c:	20006c4c 	.word	0x20006c4c
 8011090:	20006c50 	.word	0x20006c50
 8011094:	20006c58 	.word	0x20006c58
 8011098:	20002214 	.word	0x20002214
 801109c:	00004a38 	.word	0x00004a38
 80110a0:	20006c54 	.word	0x20006c54

080110a4 <vPortFree>:
{
 80110a4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d020      	beq.n	80110ec <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80110aa:	0003      	movs	r3, r0
 80110ac:	3b08      	subs	r3, #8
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	4a0f      	ldr	r2, [pc, #60]	; (80110f0 <vPortFree+0x4c>)
 80110b2:	6812      	ldr	r2, [r2, #0]
 80110b4:	421a      	tst	r2, r3
 80110b6:	d101      	bne.n	80110bc <vPortFree+0x18>
 80110b8:	b672      	cpsid	i
 80110ba:	e7fe      	b.n	80110ba <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80110bc:	0001      	movs	r1, r0
 80110be:	3908      	subs	r1, #8
 80110c0:	6809      	ldr	r1, [r1, #0]
 80110c2:	2900      	cmp	r1, #0
 80110c4:	d001      	beq.n	80110ca <vPortFree+0x26>
 80110c6:	b672      	cpsid	i
 80110c8:	e7fe      	b.n	80110c8 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80110ca:	3808      	subs	r0, #8
 80110cc:	0004      	movs	r4, r0
 80110ce:	4393      	bics	r3, r2
 80110d0:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80110d2:	f7fe ff75 	bl	800ffc0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80110d6:	4a07      	ldr	r2, [pc, #28]	; (80110f4 <vPortFree+0x50>)
 80110d8:	6863      	ldr	r3, [r4, #4]
 80110da:	6811      	ldr	r1, [r2, #0]
 80110dc:	468c      	mov	ip, r1
 80110de:	4463      	add	r3, ip
 80110e0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80110e2:	0020      	movs	r0, r4
 80110e4:	f7ff ff22 	bl	8010f2c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80110e8:	f7ff f812 	bl	8010110 <xTaskResumeAll>
}
 80110ec:	bd10      	pop	{r4, pc}
 80110ee:	46c0      	nop			; (mov r8, r8)
 80110f0:	20006c4c 	.word	0x20006c4c
 80110f4:	20006c50 	.word	0x20006c50

080110f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80110f8:	b510      	push	{r4, lr}
 80110fa:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80110fc:	f001 fd74 	bl	8012be8 <HAL_RCC_GetHCLKFreq>
 8011100:	21fa      	movs	r1, #250	; 0xfa
 8011102:	0089      	lsls	r1, r1, #2
 8011104:	f7ef f824 	bl	8000150 <__udivsi3>
 8011108:	f000 f888 	bl	801121c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 801110c:	2001      	movs	r0, #1
 801110e:	2200      	movs	r2, #0
 8011110:	0021      	movs	r1, r4
 8011112:	4240      	negs	r0, r0
 8011114:	f000 f83c 	bl	8011190 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8011118:	2000      	movs	r0, #0
 801111a:	bd10      	pop	{r4, pc}

0801111c <HAL_Init>:
{
 801111c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801111e:	4a06      	ldr	r2, [pc, #24]	; (8011138 <HAL_Init+0x1c>)
 8011120:	6813      	ldr	r3, [r2, #0]
 8011122:	2110      	movs	r1, #16
 8011124:	430b      	orrs	r3, r1
 8011126:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8011128:	2000      	movs	r0, #0
 801112a:	f7ff ffe5 	bl	80110f8 <HAL_InitTick>
  HAL_MspInit();
 801112e:	f001 f8ff 	bl	8012330 <HAL_MspInit>
}
 8011132:	2000      	movs	r0, #0
 8011134:	bd10      	pop	{r4, pc}
 8011136:	46c0      	nop			; (mov r8, r8)
 8011138:	40022000 	.word	0x40022000

0801113c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 801113c:	4a02      	ldr	r2, [pc, #8]	; (8011148 <HAL_IncTick+0xc>)
 801113e:	6813      	ldr	r3, [r2, #0]
 8011140:	3301      	adds	r3, #1
 8011142:	6013      	str	r3, [r2, #0]
}
 8011144:	4770      	bx	lr
 8011146:	46c0      	nop			; (mov r8, r8)
 8011148:	20006c60 	.word	0x20006c60

0801114c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801114c:	4b01      	ldr	r3, [pc, #4]	; (8011154 <HAL_GetTick+0x8>)
 801114e:	6818      	ldr	r0, [r3, #0]
}
 8011150:	4770      	bx	lr
 8011152:	46c0      	nop			; (mov r8, r8)
 8011154:	20006c60 	.word	0x20006c60

08011158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8011158:	b510      	push	{r4, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 801115e:	f7ff fff5 	bl	801114c <HAL_GetTick>
 8011162:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8011164:	f7ff fff2 	bl	801114c <HAL_GetTick>
 8011168:	9b01      	ldr	r3, [sp, #4]
 801116a:	1b00      	subs	r0, r0, r4
 801116c:	4298      	cmp	r0, r3
 801116e:	d3f9      	bcc.n	8011164 <HAL_Delay+0xc>
  {
  }
}
 8011170:	b002      	add	sp, #8
 8011172:	bd10      	pop	{r4, pc}

08011174 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8011174:	4b01      	ldr	r3, [pc, #4]	; (801117c <HAL_GetREVID+0x8>)
 8011176:	6818      	ldr	r0, [r3, #0]
 8011178:	0c00      	lsrs	r0, r0, #16
}
 801117a:	4770      	bx	lr
 801117c:	40015800 	.word	0x40015800

08011180 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8011180:	4b02      	ldr	r3, [pc, #8]	; (801118c <HAL_GetDEVID+0xc>)
 8011182:	6818      	ldr	r0, [r3, #0]
 8011184:	0500      	lsls	r0, r0, #20
 8011186:	0d00      	lsrs	r0, r0, #20
}
 8011188:	4770      	bx	lr
 801118a:	46c0      	nop			; (mov r8, r8)
 801118c:	40015800 	.word	0x40015800

08011190 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011190:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8011192:	2800      	cmp	r0, #0
 8011194:	db14      	blt.n	80111c0 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011196:	0884      	lsrs	r4, r0, #2
 8011198:	00a4      	lsls	r4, r4, #2
 801119a:	4b14      	ldr	r3, [pc, #80]	; (80111ec <HAL_NVIC_SetPriority+0x5c>)
 801119c:	469c      	mov	ip, r3
 801119e:	4464      	add	r4, ip
 80111a0:	26c0      	movs	r6, #192	; 0xc0
 80111a2:	00b6      	lsls	r6, r6, #2
 80111a4:	59a5      	ldr	r5, [r4, r6]
 80111a6:	2203      	movs	r2, #3
 80111a8:	4010      	ands	r0, r2
 80111aa:	00c0      	lsls	r0, r0, #3
 80111ac:	23ff      	movs	r3, #255	; 0xff
 80111ae:	001a      	movs	r2, r3
 80111b0:	4082      	lsls	r2, r0
 80111b2:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80111b4:	0189      	lsls	r1, r1, #6
 80111b6:	400b      	ands	r3, r1
 80111b8:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80111ba:	432b      	orrs	r3, r5
 80111bc:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80111be:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80111c0:	230f      	movs	r3, #15
 80111c2:	4003      	ands	r3, r0
 80111c4:	3b08      	subs	r3, #8
 80111c6:	089b      	lsrs	r3, r3, #2
 80111c8:	009b      	lsls	r3, r3, #2
 80111ca:	4a09      	ldr	r2, [pc, #36]	; (80111f0 <HAL_NVIC_SetPriority+0x60>)
 80111cc:	4694      	mov	ip, r2
 80111ce:	4463      	add	r3, ip
 80111d0:	69dd      	ldr	r5, [r3, #28]
 80111d2:	2403      	movs	r4, #3
 80111d4:	4020      	ands	r0, r4
 80111d6:	00c0      	lsls	r0, r0, #3
 80111d8:	22ff      	movs	r2, #255	; 0xff
 80111da:	0014      	movs	r4, r2
 80111dc:	4084      	lsls	r4, r0
 80111de:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80111e0:	0189      	lsls	r1, r1, #6
 80111e2:	400a      	ands	r2, r1
 80111e4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80111e6:	432a      	orrs	r2, r5
 80111e8:	61da      	str	r2, [r3, #28]
 80111ea:	e7e8      	b.n	80111be <HAL_NVIC_SetPriority+0x2e>
 80111ec:	e000e100 	.word	0xe000e100
 80111f0:	e000ed00 	.word	0xe000ed00

080111f4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80111f4:	231f      	movs	r3, #31
 80111f6:	4018      	ands	r0, r3
 80111f8:	3b1e      	subs	r3, #30
 80111fa:	4083      	lsls	r3, r0
 80111fc:	4a01      	ldr	r2, [pc, #4]	; (8011204 <HAL_NVIC_EnableIRQ+0x10>)
 80111fe:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8011200:	4770      	bx	lr
 8011202:	46c0      	nop			; (mov r8, r8)
 8011204:	e000e100 	.word	0xe000e100

08011208 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8011208:	231f      	movs	r3, #31
 801120a:	4018      	ands	r0, r3
 801120c:	3b1e      	subs	r3, #30
 801120e:	4083      	lsls	r3, r0
 8011210:	4901      	ldr	r1, [pc, #4]	; (8011218 <HAL_NVIC_DisableIRQ+0x10>)
 8011212:	2280      	movs	r2, #128	; 0x80
 8011214:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8011216:	4770      	bx	lr
 8011218:	e000e100 	.word	0xe000e100

0801121c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 801121c:	3801      	subs	r0, #1
 801121e:	2380      	movs	r3, #128	; 0x80
 8011220:	045b      	lsls	r3, r3, #17
 8011222:	4298      	cmp	r0, r3
 8011224:	d20f      	bcs.n	8011246 <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011226:	4a09      	ldr	r2, [pc, #36]	; (801124c <HAL_SYSTICK_Config+0x30>)
 8011228:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801122a:	4809      	ldr	r0, [pc, #36]	; (8011250 <HAL_SYSTICK_Config+0x34>)
 801122c:	6a03      	ldr	r3, [r0, #32]
 801122e:	021b      	lsls	r3, r3, #8
 8011230:	0a1b      	lsrs	r3, r3, #8
 8011232:	21c0      	movs	r1, #192	; 0xc0
 8011234:	0609      	lsls	r1, r1, #24
 8011236:	430b      	orrs	r3, r1
 8011238:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801123a:	2300      	movs	r3, #0
 801123c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801123e:	3307      	adds	r3, #7
 8011240:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011242:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8011244:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8011246:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8011248:	e7fc      	b.n	8011244 <HAL_SYSTICK_Config+0x28>
 801124a:	46c0      	nop			; (mov r8, r8)
 801124c:	e000e010 	.word	0xe000e010
 8011250:	e000ed00 	.word	0xe000ed00

08011254 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8011254:	2804      	cmp	r0, #4
 8011256:	d005      	beq.n	8011264 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8011258:	4a05      	ldr	r2, [pc, #20]	; (8011270 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801125a:	6813      	ldr	r3, [r2, #0]
 801125c:	2104      	movs	r1, #4
 801125e:	438b      	bics	r3, r1
 8011260:	6013      	str	r3, [r2, #0]
  }
}
 8011262:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8011264:	4a02      	ldr	r2, [pc, #8]	; (8011270 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8011266:	6813      	ldr	r3, [r2, #0]
 8011268:	2104      	movs	r1, #4
 801126a:	430b      	orrs	r3, r1
 801126c:	6013      	str	r3, [r2, #0]
 801126e:	e7f8      	b.n	8011262 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8011270:	e000e010 	.word	0xe000e010

08011274 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8011274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011276:	0015      	movs	r5, r2
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8011278:	0892      	lsrs	r2, r2, #2
 801127a:	2d03      	cmp	r5, #3
 801127c:	d927      	bls.n	80112ce <CRC_Handle_8+0x5a>
 801127e:	000c      	movs	r4, r1
 8011280:	2700      	movs	r7, #0
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8011282:	7823      	ldrb	r3, [r4, #0]
 8011284:	061b      	lsls	r3, r3, #24
 8011286:	7866      	ldrb	r6, [r4, #1]
 8011288:	0436      	lsls	r6, r6, #16
 801128a:	4333      	orrs	r3, r6
 801128c:	78e6      	ldrb	r6, [r4, #3]
 801128e:	4333      	orrs	r3, r6
 8011290:	78a6      	ldrb	r6, [r4, #2]
 8011292:	0236      	lsls	r6, r6, #8
 8011294:	4333      	orrs	r3, r6
 8011296:	6806      	ldr	r6, [r0, #0]
 8011298:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 801129a:	3701      	adds	r7, #1
 801129c:	3404      	adds	r4, #4
 801129e:	4297      	cmp	r7, r2
 80112a0:	d3ef      	bcc.n	8011282 <CRC_Handle_8+0xe>
 80112a2:	2301      	movs	r3, #1
 80112a4:	2d03      	cmp	r5, #3
 80112a6:	d900      	bls.n	80112aa <CRC_Handle_8+0x36>
 80112a8:	0013      	movs	r3, r2
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 80112aa:	2203      	movs	r2, #3
 80112ac:	0014      	movs	r4, r2
 80112ae:	402c      	ands	r4, r5
 80112b0:	422a      	tst	r2, r5
 80112b2:	d012      	beq.n	80112da <CRC_Handle_8+0x66>
   {
     if  (BufferLength%4 == 1)
 80112b4:	2c01      	cmp	r4, #1
 80112b6:	d00c      	beq.n	80112d2 <CRC_Handle_8+0x5e>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 80112b8:	2c02      	cmp	r4, #2
 80112ba:	d111      	bne.n	80112e0 <CRC_Handle_8+0x6c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80112bc:	009b      	lsls	r3, r3, #2
 80112be:	5cca      	ldrb	r2, [r1, r3]
 80112c0:	0212      	lsls	r2, r2, #8
 80112c2:	18cb      	adds	r3, r1, r3
 80112c4:	785b      	ldrb	r3, [r3, #1]
 80112c6:	4313      	orrs	r3, r2
 80112c8:	6802      	ldr	r2, [r0, #0]
 80112ca:	8013      	strh	r3, [r2, #0]
     }
     if  (BufferLength%4 == 3)
 80112cc:	e005      	b.n	80112da <CRC_Handle_8+0x66>
   for(i = 0; i < (BufferLength/4); i++)
 80112ce:	2300      	movs	r3, #0
 80112d0:	e7eb      	b.n	80112aa <CRC_Handle_8+0x36>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80112d2:	009b      	lsls	r3, r3, #2
 80112d4:	5c5b      	ldrb	r3, [r3, r1]
 80112d6:	6802      	ldr	r2, [r0, #0]
 80112d8:	7013      	strb	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80112da:	6803      	ldr	r3, [r0, #0]
 80112dc:	6818      	ldr	r0, [r3, #0]
}
 80112de:	bdf0      	pop	{r4, r5, r6, r7, pc}
     if  (BufferLength%4 == 3)
 80112e0:	2c03      	cmp	r4, #3
 80112e2:	d1fa      	bne.n	80112da <CRC_Handle_8+0x66>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80112e4:	009b      	lsls	r3, r3, #2
 80112e6:	5ccc      	ldrb	r4, [r1, r3]
 80112e8:	0224      	lsls	r4, r4, #8
 80112ea:	18cb      	adds	r3, r1, r3
 80112ec:	785a      	ldrb	r2, [r3, #1]
 80112ee:	4322      	orrs	r2, r4
 80112f0:	6801      	ldr	r1, [r0, #0]
 80112f2:	800a      	strh	r2, [r1, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 80112f4:	789b      	ldrb	r3, [r3, #2]
 80112f6:	6802      	ldr	r2, [r0, #0]
 80112f8:	7013      	strb	r3, [r2, #0]
 80112fa:	e7ee      	b.n	80112da <CRC_Handle_8+0x66>

080112fc <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80112fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112fe:	0016      	movs	r6, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8011300:	0852      	lsrs	r2, r2, #1
 8011302:	2e01      	cmp	r6, #1
 8011304:	d918      	bls.n	8011338 <CRC_Handle_16+0x3c>
 8011306:	000c      	movs	r4, r1
 8011308:	2500      	movs	r5, #0
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 801130a:	8823      	ldrh	r3, [r4, #0]
 801130c:	041b      	lsls	r3, r3, #16
 801130e:	8867      	ldrh	r7, [r4, #2]
 8011310:	433b      	orrs	r3, r7
 8011312:	6807      	ldr	r7, [r0, #0]
 8011314:	603b      	str	r3, [r7, #0]
  for(i = 0; i < (BufferLength/2); i++)
 8011316:	3501      	adds	r5, #1
 8011318:	3404      	adds	r4, #4
 801131a:	4295      	cmp	r5, r2
 801131c:	d3f5      	bcc.n	801130a <CRC_Handle_16+0xe>
 801131e:	2301      	movs	r3, #1
 8011320:	2e01      	cmp	r6, #1
 8011322:	d900      	bls.n	8011326 <CRC_Handle_16+0x2a>
 8011324:	0013      	movs	r3, r2
  }
  if ((BufferLength%2) != 0)
 8011326:	07f2      	lsls	r2, r6, #31
 8011328:	d503      	bpl.n	8011332 <CRC_Handle_16+0x36>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 801132a:	009b      	lsls	r3, r3, #2
 801132c:	5a5b      	ldrh	r3, [r3, r1]
 801132e:	6802      	ldr	r2, [r0, #0]
 8011330:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8011332:	6803      	ldr	r3, [r0, #0]
 8011334:	6818      	ldr	r0, [r3, #0]
}
 8011336:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for(i = 0; i < (BufferLength/2); i++)
 8011338:	2300      	movs	r3, #0
 801133a:	e7f4      	b.n	8011326 <CRC_Handle_16+0x2a>

0801133c <HAL_CRC_Init>:
{
 801133c:	b510      	push	{r4, lr}
 801133e:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8011340:	d029      	beq.n	8011396 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8011342:	7f43      	ldrb	r3, [r0, #29]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d01e      	beq.n	8011386 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8011348:	2302      	movs	r3, #2
 801134a:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 801134c:	0020      	movs	r0, r4
 801134e:	f000 f8ab 	bl	80114a8 <HAL_CRCEx_Init>
 8011352:	2800      	cmp	r0, #0
 8011354:	d121      	bne.n	801139a <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8011356:	7963      	ldrb	r3, [r4, #5]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d118      	bne.n	801138e <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 801135c:	6823      	ldr	r3, [r4, #0]
 801135e:	2201      	movs	r2, #1
 8011360:	4252      	negs	r2, r2
 8011362:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8011364:	6822      	ldr	r2, [r4, #0]
 8011366:	6893      	ldr	r3, [r2, #8]
 8011368:	2160      	movs	r1, #96	; 0x60
 801136a:	438b      	bics	r3, r1
 801136c:	6961      	ldr	r1, [r4, #20]
 801136e:	430b      	orrs	r3, r1
 8011370:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8011372:	6822      	ldr	r2, [r4, #0]
 8011374:	6893      	ldr	r3, [r2, #8]
 8011376:	2180      	movs	r1, #128	; 0x80
 8011378:	438b      	bics	r3, r1
 801137a:	69a1      	ldr	r1, [r4, #24]
 801137c:	430b      	orrs	r3, r1
 801137e:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8011380:	2301      	movs	r3, #1
 8011382:	7763      	strb	r3, [r4, #29]
}
 8011384:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8011386:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8011388:	f7fc ff5e 	bl	800e248 <HAL_CRC_MspInit>
 801138c:	e7dc      	b.n	8011348 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 801138e:	6823      	ldr	r3, [r4, #0]
 8011390:	6922      	ldr	r2, [r4, #16]
 8011392:	611a      	str	r2, [r3, #16]
 8011394:	e7e6      	b.n	8011364 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8011396:	2001      	movs	r0, #1
 8011398:	e7f4      	b.n	8011384 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 801139a:	2001      	movs	r0, #1
 801139c:	e7f2      	b.n	8011384 <HAL_CRC_Init+0x48>

0801139e <HAL_CRC_Accumulate>:
{
 801139e:	b510      	push	{r4, lr}
 80113a0:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80113a2:	7f03      	ldrb	r3, [r0, #28]
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	d023      	beq.n	80113f0 <HAL_CRC_Accumulate+0x52>
 80113a8:	2301      	movs	r3, #1
 80113aa:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80113ac:	3301      	adds	r3, #1
 80113ae:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 80113b0:	6a03      	ldr	r3, [r0, #32]
 80113b2:	2b02      	cmp	r3, #2
 80113b4:	d019      	beq.n	80113ea <HAL_CRC_Accumulate+0x4c>
 80113b6:	2b03      	cmp	r3, #3
 80113b8:	d007      	beq.n	80113ca <HAL_CRC_Accumulate+0x2c>
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d012      	beq.n	80113e4 <HAL_CRC_Accumulate+0x46>
 80113be:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 80113c0:	2301      	movs	r3, #1
 80113c2:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80113c4:	2300      	movs	r3, #0
 80113c6:	7723      	strb	r3, [r4, #28]
}
 80113c8:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 80113ca:	2a00      	cmp	r2, #0
 80113cc:	d007      	beq.n	80113de <HAL_CRC_Accumulate+0x40>
 80113ce:	000b      	movs	r3, r1
 80113d0:	0092      	lsls	r2, r2, #2
 80113d2:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80113d4:	6822      	ldr	r2, [r4, #0]
 80113d6:	cb01      	ldmia	r3!, {r0}
 80113d8:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 80113da:	428b      	cmp	r3, r1
 80113dc:	d1fa      	bne.n	80113d4 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 80113de:	6823      	ldr	r3, [r4, #0]
 80113e0:	6818      	ldr	r0, [r3, #0]
      break;
 80113e2:	e7ed      	b.n	80113c0 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80113e4:	f7ff ff46 	bl	8011274 <CRC_Handle_8>
      break;
 80113e8:	e7ea      	b.n	80113c0 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80113ea:	f7ff ff87 	bl	80112fc <CRC_Handle_16>
      break;
 80113ee:	e7e7      	b.n	80113c0 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 80113f0:	2002      	movs	r0, #2
 80113f2:	e7e9      	b.n	80113c8 <HAL_CRC_Accumulate+0x2a>

080113f4 <HAL_CRC_Calculate>:
{
 80113f4:	b570      	push	{r4, r5, r6, lr}
 80113f6:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80113f8:	7f03      	ldrb	r3, [r0, #28]
 80113fa:	2b01      	cmp	r3, #1
 80113fc:	d029      	beq.n	8011452 <HAL_CRC_Calculate+0x5e>
 80113fe:	2501      	movs	r5, #1
 8011400:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8011402:	2302      	movs	r3, #2
 8011404:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8011406:	6800      	ldr	r0, [r0, #0]
 8011408:	6883      	ldr	r3, [r0, #8]
 801140a:	432b      	orrs	r3, r5
 801140c:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 801140e:	6a23      	ldr	r3, [r4, #32]
 8011410:	2b02      	cmp	r3, #2
 8011412:	d01a      	beq.n	801144a <HAL_CRC_Calculate+0x56>
 8011414:	2b03      	cmp	r3, #3
 8011416:	d007      	beq.n	8011428 <HAL_CRC_Calculate+0x34>
 8011418:	2b01      	cmp	r3, #1
 801141a:	d012      	beq.n	8011442 <HAL_CRC_Calculate+0x4e>
 801141c:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 801141e:	2301      	movs	r3, #1
 8011420:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8011422:	2300      	movs	r3, #0
 8011424:	7723      	strb	r3, [r4, #28]
}
 8011426:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8011428:	2a00      	cmp	r2, #0
 801142a:	d007      	beq.n	801143c <HAL_CRC_Calculate+0x48>
 801142c:	000b      	movs	r3, r1
 801142e:	0092      	lsls	r2, r2, #2
 8011430:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8011432:	6822      	ldr	r2, [r4, #0]
 8011434:	cb01      	ldmia	r3!, {r0}
 8011436:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8011438:	428b      	cmp	r3, r1
 801143a:	d1fa      	bne.n	8011432 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 801143c:	6823      	ldr	r3, [r4, #0]
 801143e:	6818      	ldr	r0, [r3, #0]
      break;
 8011440:	e7ed      	b.n	801141e <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8011442:	0020      	movs	r0, r4
 8011444:	f7ff ff16 	bl	8011274 <CRC_Handle_8>
      break;
 8011448:	e7e9      	b.n	801141e <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 801144a:	0020      	movs	r0, r4
 801144c:	f7ff ff56 	bl	80112fc <CRC_Handle_16>
      break;
 8011450:	e7e5      	b.n	801141e <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8011452:	2002      	movs	r0, #2
 8011454:	e7e7      	b.n	8011426 <HAL_CRC_Calculate+0x32>

08011456 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8011456:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011458:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 801145a:	2501      	movs	r5, #1
 801145c:	002c      	movs	r4, r5
 801145e:	409c      	lsls	r4, r3
 8011460:	4221      	tst	r1, r4
 8011462:	d105      	bne.n	8011470 <HAL_CRCEx_Polynomial_Set+0x1a>
 8011464:	3b01      	subs	r3, #1
 8011466:	d2f9      	bcs.n	801145c <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8011468:	2a10      	cmp	r2, #16
 801146a:	d103      	bne.n	8011474 <HAL_CRCEx_Polynomial_Set+0x1e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      { 
        return  HAL_ERROR;
 801146c:	2001      	movs	r0, #1
 801146e:	e00e      	b.n	801148e <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8011470:	2a10      	cmp	r2, #16
 8011472:	d011      	beq.n	8011498 <HAL_CRCEx_Polynomial_Set+0x42>
 8011474:	2a18      	cmp	r2, #24
 8011476:	d00b      	beq.n	8011490 <HAL_CRCEx_Polynomial_Set+0x3a>
 8011478:	2a08      	cmp	r2, #8
 801147a:	d011      	beq.n	80114a0 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 801147c:	6803      	ldr	r3, [r0, #0]
 801147e:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8011480:	6801      	ldr	r1, [r0, #0]
 8011482:	688b      	ldr	r3, [r1, #8]
 8011484:	2018      	movs	r0, #24
 8011486:	4383      	bics	r3, r0
 8011488:	431a      	orrs	r2, r3
 801148a:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 801148c:	2000      	movs	r0, #0
}
 801148e:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8011490:	2b06      	cmp	r3, #6
 8011492:	d9f3      	bls.n	801147c <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8011494:	2001      	movs	r0, #1
 8011496:	e7fa      	b.n	801148e <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 8011498:	2b07      	cmp	r3, #7
 801149a:	d9ef      	bls.n	801147c <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 801149c:	2001      	movs	r0, #1
 801149e:	e7f6      	b.n	801148e <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_16B)
 80114a0:	2b0f      	cmp	r3, #15
 80114a2:	d9eb      	bls.n	801147c <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 80114a4:	2001      	movs	r0, #1
 80114a6:	e7f2      	b.n	801148e <HAL_CRCEx_Polynomial_Set+0x38>

080114a8 <HAL_CRCEx_Init>:
{
 80114a8:	b510      	push	{r4, lr}
 80114aa:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80114ac:	7900      	ldrb	r0, [r0, #4]
 80114ae:	2800      	cmp	r0, #0
 80114b0:	d108      	bne.n	80114c4 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80114b2:	681a      	ldr	r2, [r3, #0]
 80114b4:	4908      	ldr	r1, [pc, #32]	; (80114d8 <HAL_CRCEx_Init+0x30>)
 80114b6:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	6893      	ldr	r3, [r2, #8]
 80114bc:	2118      	movs	r1, #24
 80114be:	438b      	bics	r3, r1
 80114c0:	6093      	str	r3, [r2, #8]
}
 80114c2:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80114c4:	68da      	ldr	r2, [r3, #12]
 80114c6:	6899      	ldr	r1, [r3, #8]
 80114c8:	0018      	movs	r0, r3
 80114ca:	f7ff ffc4 	bl	8011456 <HAL_CRCEx_Polynomial_Set>
 80114ce:	1e43      	subs	r3, r0, #1
 80114d0:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 80114d2:	b2c0      	uxtb	r0, r0
 80114d4:	e7f5      	b.n	80114c2 <HAL_CRCEx_Init+0x1a>
 80114d6:	46c0      	nop			; (mov r8, r8)
 80114d8:	04c11db7 	.word	0x04c11db7

080114dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80114dc:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80114de:	2800      	cmp	r0, #0
 80114e0:	d022      	beq.n	8011528 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 80114e2:	2321      	movs	r3, #33	; 0x21
 80114e4:	5cc3      	ldrb	r3, [r0, r3]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d102      	bne.n	80114f0 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80114ea:	3320      	adds	r3, #32
 80114ec:	2200      	movs	r2, #0
 80114ee:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80114f0:	2121      	movs	r1, #33	; 0x21
 80114f2:	2302      	movs	r3, #2
 80114f4:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80114f6:	6804      	ldr	r4, [r0, #0]
 80114f8:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80114fa:	4a0c      	ldr	r2, [pc, #48]	; (801152c <HAL_DMA_Init+0x50>)
 80114fc:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80114fe:	6843      	ldr	r3, [r0, #4]
 8011500:	6885      	ldr	r5, [r0, #8]
 8011502:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011504:	68c5      	ldr	r5, [r0, #12]
 8011506:	432b      	orrs	r3, r5
 8011508:	6905      	ldr	r5, [r0, #16]
 801150a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801150c:	6945      	ldr	r5, [r0, #20]
 801150e:	432b      	orrs	r3, r5
 8011510:	6985      	ldr	r5, [r0, #24]
 8011512:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8011514:	69c5      	ldr	r5, [r0, #28]
 8011516:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8011518:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 801151a:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801151c:	2300      	movs	r3, #0
 801151e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8011520:	3301      	adds	r3, #1
 8011522:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8011524:	2000      	movs	r0, #0
}  
 8011526:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8011528:	2001      	movs	r0, #1
 801152a:	e7fc      	b.n	8011526 <HAL_DMA_Init+0x4a>
 801152c:	ffffc00f 	.word	0xffffc00f

08011530 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011530:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8011532:	2420      	movs	r4, #32
 8011534:	5d04      	ldrb	r4, [r0, r4]
 8011536:	2c01      	cmp	r4, #1
 8011538:	d02d      	beq.n	8011596 <HAL_DMA_Start_IT+0x66>
 801153a:	2601      	movs	r6, #1
 801153c:	2420      	movs	r4, #32
 801153e:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8011540:	3401      	adds	r4, #1
 8011542:	2502      	movs	r5, #2
 8011544:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011546:	6805      	ldr	r5, [r0, #0]
 8011548:	682c      	ldr	r4, [r5, #0]
 801154a:	43b4      	bics	r4, r6
 801154c:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801154e:	6804      	ldr	r4, [r0, #0]
 8011550:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011552:	6843      	ldr	r3, [r0, #4]
 8011554:	2b10      	cmp	r3, #16
 8011556:	d019      	beq.n	801158c <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8011558:	6803      	ldr	r3, [r0, #0]
 801155a:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 801155c:	6803      	ldr	r3, [r0, #0]
 801155e:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8011560:	6802      	ldr	r2, [r0, #0]
 8011562:	6813      	ldr	r3, [r2, #0]
 8011564:	2102      	movs	r1, #2
 8011566:	430b      	orrs	r3, r1
 8011568:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 801156a:	6802      	ldr	r2, [r0, #0]
 801156c:	6813      	ldr	r3, [r2, #0]
 801156e:	3102      	adds	r1, #2
 8011570:	430b      	orrs	r3, r1
 8011572:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8011574:	6802      	ldr	r2, [r0, #0]
 8011576:	6813      	ldr	r3, [r2, #0]
 8011578:	3104      	adds	r1, #4
 801157a:	430b      	orrs	r3, r1
 801157c:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 801157e:	6802      	ldr	r2, [r0, #0]
 8011580:	6813      	ldr	r3, [r2, #0]
 8011582:	3907      	subs	r1, #7
 8011584:	430b      	orrs	r3, r1
 8011586:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8011588:	2000      	movs	r0, #0
} 
 801158a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 801158c:	6803      	ldr	r3, [r0, #0]
 801158e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8011590:	6803      	ldr	r3, [r0, #0]
 8011592:	60d9      	str	r1, [r3, #12]
 8011594:	e7e4      	b.n	8011560 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8011596:	2002      	movs	r0, #2
 8011598:	e7f7      	b.n	801158a <HAL_DMA_Start_IT+0x5a>

0801159a <HAL_DMA_Abort>:
{
 801159a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159c:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801159e:	6802      	ldr	r2, [r0, #0]
 80115a0:	6813      	ldr	r3, [r2, #0]
 80115a2:	2101      	movs	r1, #1
 80115a4:	438b      	bics	r3, r1
 80115a6:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80115a8:	f7ff fdd0 	bl	801114c <HAL_GetTick>
 80115ac:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80115ae:	2601      	movs	r6, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80115b0:	27fa      	movs	r7, #250	; 0xfa
 80115b2:	00bf      	lsls	r7, r7, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80115b4:	6823      	ldr	r3, [r4, #0]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	421e      	tst	r6, r3
 80115ba:	d00f      	beq.n	80115dc <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80115bc:	f7ff fdc6 	bl	801114c <HAL_GetTick>
 80115c0:	1b40      	subs	r0, r0, r5
 80115c2:	42b8      	cmp	r0, r7
 80115c4:	d9f6      	bls.n	80115b4 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80115c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115c8:	2220      	movs	r2, #32
 80115ca:	4313      	orrs	r3, r2
 80115cc:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80115ce:	2321      	movs	r3, #33	; 0x21
 80115d0:	2103      	movs	r1, #3
 80115d2:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 80115d4:	2300      	movs	r3, #0
 80115d6:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 80115d8:	2003      	movs	r0, #3
 80115da:	e006      	b.n	80115ea <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 80115dc:	2321      	movs	r3, #33	; 0x21
 80115de:	2201      	movs	r2, #1
 80115e0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 80115e2:	3b01      	subs	r3, #1
 80115e4:	2200      	movs	r2, #0
 80115e6:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 80115e8:	2000      	movs	r0, #0
}
 80115ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080115ec <HAL_DMA_IRQHandler>:
{        
 80115ec:	b510      	push	{r4, lr}
 80115ee:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80115f0:	6803      	ldr	r3, [r0, #0]
 80115f2:	4ab1      	ldr	r2, [pc, #708]	; (80118b8 <HAL_DMA_IRQHandler+0x2cc>)
 80115f4:	4293      	cmp	r3, r2
 80115f6:	d97e      	bls.n	80116f6 <HAL_DMA_IRQHandler+0x10a>
 80115f8:	4ab0      	ldr	r2, [pc, #704]	; (80118bc <HAL_DMA_IRQHandler+0x2d0>)
 80115fa:	6811      	ldr	r1, [r2, #0]
 80115fc:	4ab0      	ldr	r2, [pc, #704]	; (80118c0 <HAL_DMA_IRQHandler+0x2d4>)
 80115fe:	4293      	cmp	r3, r2
 8011600:	d026      	beq.n	8011650 <HAL_DMA_IRQHandler+0x64>
 8011602:	4ab0      	ldr	r2, [pc, #704]	; (80118c4 <HAL_DMA_IRQHandler+0x2d8>)
 8011604:	4293      	cmp	r3, r2
 8011606:	d05e      	beq.n	80116c6 <HAL_DMA_IRQHandler+0xda>
 8011608:	4aaf      	ldr	r2, [pc, #700]	; (80118c8 <HAL_DMA_IRQHandler+0x2dc>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d05d      	beq.n	80116ca <HAL_DMA_IRQHandler+0xde>
 801160e:	4aaf      	ldr	r2, [pc, #700]	; (80118cc <HAL_DMA_IRQHandler+0x2e0>)
 8011610:	4293      	cmp	r3, r2
 8011612:	d05d      	beq.n	80116d0 <HAL_DMA_IRQHandler+0xe4>
 8011614:	4aae      	ldr	r2, [pc, #696]	; (80118d0 <HAL_DMA_IRQHandler+0x2e4>)
 8011616:	4293      	cmp	r3, r2
 8011618:	d05d      	beq.n	80116d6 <HAL_DMA_IRQHandler+0xea>
 801161a:	4aae      	ldr	r2, [pc, #696]	; (80118d4 <HAL_DMA_IRQHandler+0x2e8>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d05d      	beq.n	80116dc <HAL_DMA_IRQHandler+0xf0>
 8011620:	4aa5      	ldr	r2, [pc, #660]	; (80118b8 <HAL_DMA_IRQHandler+0x2cc>)
 8011622:	4293      	cmp	r3, r2
 8011624:	d05d      	beq.n	80116e2 <HAL_DMA_IRQHandler+0xf6>
 8011626:	4aac      	ldr	r2, [pc, #688]	; (80118d8 <HAL_DMA_IRQHandler+0x2ec>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d05d      	beq.n	80116e8 <HAL_DMA_IRQHandler+0xfc>
 801162c:	4aab      	ldr	r2, [pc, #684]	; (80118dc <HAL_DMA_IRQHandler+0x2f0>)
 801162e:	4293      	cmp	r3, r2
 8011630:	d05c      	beq.n	80116ec <HAL_DMA_IRQHandler+0x100>
 8011632:	4aab      	ldr	r2, [pc, #684]	; (80118e0 <HAL_DMA_IRQHandler+0x2f4>)
 8011634:	4293      	cmp	r3, r2
 8011636:	d05b      	beq.n	80116f0 <HAL_DMA_IRQHandler+0x104>
 8011638:	4aaa      	ldr	r2, [pc, #680]	; (80118e4 <HAL_DMA_IRQHandler+0x2f8>)
 801163a:	189a      	adds	r2, r3, r2
 801163c:	4250      	negs	r0, r2
 801163e:	4142      	adcs	r2, r0
 8011640:	4252      	negs	r2, r2
 8011642:	48a9      	ldr	r0, [pc, #676]	; (80118e8 <HAL_DMA_IRQHandler+0x2fc>)
 8011644:	4002      	ands	r2, r0
 8011646:	2080      	movs	r0, #128	; 0x80
 8011648:	0300      	lsls	r0, r0, #12
 801164a:	4684      	mov	ip, r0
 801164c:	4462      	add	r2, ip
 801164e:	e000      	b.n	8011652 <HAL_DMA_IRQHandler+0x66>
 8011650:	2208      	movs	r2, #8
 8011652:	420a      	tst	r2, r1
 8011654:	d001      	beq.n	801165a <HAL_DMA_IRQHandler+0x6e>
 8011656:	f000 fbfb 	bl	8011e50 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801165a:	4a98      	ldr	r2, [pc, #608]	; (80118bc <HAL_DMA_IRQHandler+0x2d0>)
 801165c:	6811      	ldr	r1, [r2, #0]
 801165e:	4a98      	ldr	r2, [pc, #608]	; (80118c0 <HAL_DMA_IRQHandler+0x2d4>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d100      	bne.n	8011666 <HAL_DMA_IRQHandler+0x7a>
 8011664:	e18d      	b.n	8011982 <HAL_DMA_IRQHandler+0x396>
 8011666:	4a97      	ldr	r2, [pc, #604]	; (80118c4 <HAL_DMA_IRQHandler+0x2d8>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d100      	bne.n	801166e <HAL_DMA_IRQHandler+0x82>
 801166c:	e18e      	b.n	801198c <HAL_DMA_IRQHandler+0x3a0>
 801166e:	4a96      	ldr	r2, [pc, #600]	; (80118c8 <HAL_DMA_IRQHandler+0x2dc>)
 8011670:	4293      	cmp	r3, r2
 8011672:	d100      	bne.n	8011676 <HAL_DMA_IRQHandler+0x8a>
 8011674:	e18c      	b.n	8011990 <HAL_DMA_IRQHandler+0x3a4>
 8011676:	4a95      	ldr	r2, [pc, #596]	; (80118cc <HAL_DMA_IRQHandler+0x2e0>)
 8011678:	4293      	cmp	r3, r2
 801167a:	d100      	bne.n	801167e <HAL_DMA_IRQHandler+0x92>
 801167c:	e18b      	b.n	8011996 <HAL_DMA_IRQHandler+0x3aa>
 801167e:	4a94      	ldr	r2, [pc, #592]	; (80118d0 <HAL_DMA_IRQHandler+0x2e4>)
 8011680:	4293      	cmp	r3, r2
 8011682:	d100      	bne.n	8011686 <HAL_DMA_IRQHandler+0x9a>
 8011684:	e18a      	b.n	801199c <HAL_DMA_IRQHandler+0x3b0>
 8011686:	4a93      	ldr	r2, [pc, #588]	; (80118d4 <HAL_DMA_IRQHandler+0x2e8>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d100      	bne.n	801168e <HAL_DMA_IRQHandler+0xa2>
 801168c:	e189      	b.n	80119a2 <HAL_DMA_IRQHandler+0x3b6>
 801168e:	4a8a      	ldr	r2, [pc, #552]	; (80118b8 <HAL_DMA_IRQHandler+0x2cc>)
 8011690:	4293      	cmp	r3, r2
 8011692:	d100      	bne.n	8011696 <HAL_DMA_IRQHandler+0xaa>
 8011694:	e188      	b.n	80119a8 <HAL_DMA_IRQHandler+0x3bc>
 8011696:	4a90      	ldr	r2, [pc, #576]	; (80118d8 <HAL_DMA_IRQHandler+0x2ec>)
 8011698:	4293      	cmp	r3, r2
 801169a:	d100      	bne.n	801169e <HAL_DMA_IRQHandler+0xb2>
 801169c:	e187      	b.n	80119ae <HAL_DMA_IRQHandler+0x3c2>
 801169e:	4a8f      	ldr	r2, [pc, #572]	; (80118dc <HAL_DMA_IRQHandler+0x2f0>)
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d100      	bne.n	80116a6 <HAL_DMA_IRQHandler+0xba>
 80116a4:	e185      	b.n	80119b2 <HAL_DMA_IRQHandler+0x3c6>
 80116a6:	4a8e      	ldr	r2, [pc, #568]	; (80118e0 <HAL_DMA_IRQHandler+0x2f4>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d100      	bne.n	80116ae <HAL_DMA_IRQHandler+0xc2>
 80116ac:	e183      	b.n	80119b6 <HAL_DMA_IRQHandler+0x3ca>
 80116ae:	4a8d      	ldr	r2, [pc, #564]	; (80118e4 <HAL_DMA_IRQHandler+0x2f8>)
 80116b0:	189a      	adds	r2, r3, r2
 80116b2:	4250      	negs	r0, r2
 80116b4:	4142      	adcs	r2, r0
 80116b6:	4252      	negs	r2, r2
 80116b8:	488c      	ldr	r0, [pc, #560]	; (80118ec <HAL_DMA_IRQHandler+0x300>)
 80116ba:	4002      	ands	r2, r0
 80116bc:	2080      	movs	r0, #128	; 0x80
 80116be:	02c0      	lsls	r0, r0, #11
 80116c0:	4684      	mov	ip, r0
 80116c2:	4462      	add	r2, ip
 80116c4:	e15e      	b.n	8011984 <HAL_DMA_IRQHandler+0x398>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80116c6:	2280      	movs	r2, #128	; 0x80
 80116c8:	e7c3      	b.n	8011652 <HAL_DMA_IRQHandler+0x66>
 80116ca:	2280      	movs	r2, #128	; 0x80
 80116cc:	0112      	lsls	r2, r2, #4
 80116ce:	e7c0      	b.n	8011652 <HAL_DMA_IRQHandler+0x66>
 80116d0:	2280      	movs	r2, #128	; 0x80
 80116d2:	0212      	lsls	r2, r2, #8
 80116d4:	e7bd      	b.n	8011652 <HAL_DMA_IRQHandler+0x66>
 80116d6:	2280      	movs	r2, #128	; 0x80
 80116d8:	0312      	lsls	r2, r2, #12
 80116da:	e7ba      	b.n	8011652 <HAL_DMA_IRQHandler+0x66>
 80116dc:	2280      	movs	r2, #128	; 0x80
 80116de:	0412      	lsls	r2, r2, #16
 80116e0:	e7b7      	b.n	8011652 <HAL_DMA_IRQHandler+0x66>
 80116e2:	2280      	movs	r2, #128	; 0x80
 80116e4:	0512      	lsls	r2, r2, #20
 80116e6:	e7b4      	b.n	8011652 <HAL_DMA_IRQHandler+0x66>
 80116e8:	2208      	movs	r2, #8
 80116ea:	e7b2      	b.n	8011652 <HAL_DMA_IRQHandler+0x66>
 80116ec:	2280      	movs	r2, #128	; 0x80
 80116ee:	e7b0      	b.n	8011652 <HAL_DMA_IRQHandler+0x66>
 80116f0:	2280      	movs	r2, #128	; 0x80
 80116f2:	0112      	lsls	r2, r2, #4
 80116f4:	e7ad      	b.n	8011652 <HAL_DMA_IRQHandler+0x66>
 80116f6:	4a7e      	ldr	r2, [pc, #504]	; (80118f0 <HAL_DMA_IRQHandler+0x304>)
 80116f8:	6811      	ldr	r1, [r2, #0]
 80116fa:	4a71      	ldr	r2, [pc, #452]	; (80118c0 <HAL_DMA_IRQHandler+0x2d4>)
 80116fc:	4293      	cmp	r3, r2
 80116fe:	d026      	beq.n	801174e <HAL_DMA_IRQHandler+0x162>
 8011700:	4a70      	ldr	r2, [pc, #448]	; (80118c4 <HAL_DMA_IRQHandler+0x2d8>)
 8011702:	4293      	cmp	r3, r2
 8011704:	d05d      	beq.n	80117c2 <HAL_DMA_IRQHandler+0x1d6>
 8011706:	4a70      	ldr	r2, [pc, #448]	; (80118c8 <HAL_DMA_IRQHandler+0x2dc>)
 8011708:	4293      	cmp	r3, r2
 801170a:	d05c      	beq.n	80117c6 <HAL_DMA_IRQHandler+0x1da>
 801170c:	4a6f      	ldr	r2, [pc, #444]	; (80118cc <HAL_DMA_IRQHandler+0x2e0>)
 801170e:	4293      	cmp	r3, r2
 8011710:	d05c      	beq.n	80117cc <HAL_DMA_IRQHandler+0x1e0>
 8011712:	4a6f      	ldr	r2, [pc, #444]	; (80118d0 <HAL_DMA_IRQHandler+0x2e4>)
 8011714:	4293      	cmp	r3, r2
 8011716:	d05c      	beq.n	80117d2 <HAL_DMA_IRQHandler+0x1e6>
 8011718:	4a6e      	ldr	r2, [pc, #440]	; (80118d4 <HAL_DMA_IRQHandler+0x2e8>)
 801171a:	4293      	cmp	r3, r2
 801171c:	d05c      	beq.n	80117d8 <HAL_DMA_IRQHandler+0x1ec>
 801171e:	4a66      	ldr	r2, [pc, #408]	; (80118b8 <HAL_DMA_IRQHandler+0x2cc>)
 8011720:	4293      	cmp	r3, r2
 8011722:	d05c      	beq.n	80117de <HAL_DMA_IRQHandler+0x1f2>
 8011724:	4a6c      	ldr	r2, [pc, #432]	; (80118d8 <HAL_DMA_IRQHandler+0x2ec>)
 8011726:	4293      	cmp	r3, r2
 8011728:	d05c      	beq.n	80117e4 <HAL_DMA_IRQHandler+0x1f8>
 801172a:	4a6c      	ldr	r2, [pc, #432]	; (80118dc <HAL_DMA_IRQHandler+0x2f0>)
 801172c:	4293      	cmp	r3, r2
 801172e:	d05b      	beq.n	80117e8 <HAL_DMA_IRQHandler+0x1fc>
 8011730:	4a6b      	ldr	r2, [pc, #428]	; (80118e0 <HAL_DMA_IRQHandler+0x2f4>)
 8011732:	4293      	cmp	r3, r2
 8011734:	d05a      	beq.n	80117ec <HAL_DMA_IRQHandler+0x200>
 8011736:	4a6b      	ldr	r2, [pc, #428]	; (80118e4 <HAL_DMA_IRQHandler+0x2f8>)
 8011738:	189a      	adds	r2, r3, r2
 801173a:	4250      	negs	r0, r2
 801173c:	4142      	adcs	r2, r0
 801173e:	4252      	negs	r2, r2
 8011740:	4869      	ldr	r0, [pc, #420]	; (80118e8 <HAL_DMA_IRQHandler+0x2fc>)
 8011742:	4002      	ands	r2, r0
 8011744:	2080      	movs	r0, #128	; 0x80
 8011746:	0300      	lsls	r0, r0, #12
 8011748:	4684      	mov	ip, r0
 801174a:	4462      	add	r2, ip
 801174c:	e000      	b.n	8011750 <HAL_DMA_IRQHandler+0x164>
 801174e:	2208      	movs	r2, #8
 8011750:	420a      	tst	r2, r1
 8011752:	d000      	beq.n	8011756 <HAL_DMA_IRQHandler+0x16a>
 8011754:	e376      	b.n	8011e44 <HAL_DMA_IRQHandler+0x858>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011756:	4a66      	ldr	r2, [pc, #408]	; (80118f0 <HAL_DMA_IRQHandler+0x304>)
 8011758:	6811      	ldr	r1, [r2, #0]
 801175a:	4a59      	ldr	r2, [pc, #356]	; (80118c0 <HAL_DMA_IRQHandler+0x2d4>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d100      	bne.n	8011762 <HAL_DMA_IRQHandler+0x176>
 8011760:	e12c      	b.n	80119bc <HAL_DMA_IRQHandler+0x3d0>
 8011762:	4a58      	ldr	r2, [pc, #352]	; (80118c4 <HAL_DMA_IRQHandler+0x2d8>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d100      	bne.n	801176a <HAL_DMA_IRQHandler+0x17e>
 8011768:	e16e      	b.n	8011a48 <HAL_DMA_IRQHandler+0x45c>
 801176a:	4a57      	ldr	r2, [pc, #348]	; (80118c8 <HAL_DMA_IRQHandler+0x2dc>)
 801176c:	4293      	cmp	r3, r2
 801176e:	d100      	bne.n	8011772 <HAL_DMA_IRQHandler+0x186>
 8011770:	e16c      	b.n	8011a4c <HAL_DMA_IRQHandler+0x460>
 8011772:	4a56      	ldr	r2, [pc, #344]	; (80118cc <HAL_DMA_IRQHandler+0x2e0>)
 8011774:	4293      	cmp	r3, r2
 8011776:	d100      	bne.n	801177a <HAL_DMA_IRQHandler+0x18e>
 8011778:	e16b      	b.n	8011a52 <HAL_DMA_IRQHandler+0x466>
 801177a:	4a55      	ldr	r2, [pc, #340]	; (80118d0 <HAL_DMA_IRQHandler+0x2e4>)
 801177c:	4293      	cmp	r3, r2
 801177e:	d100      	bne.n	8011782 <HAL_DMA_IRQHandler+0x196>
 8011780:	e16a      	b.n	8011a58 <HAL_DMA_IRQHandler+0x46c>
 8011782:	4a54      	ldr	r2, [pc, #336]	; (80118d4 <HAL_DMA_IRQHandler+0x2e8>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d100      	bne.n	801178a <HAL_DMA_IRQHandler+0x19e>
 8011788:	e169      	b.n	8011a5e <HAL_DMA_IRQHandler+0x472>
 801178a:	4a4b      	ldr	r2, [pc, #300]	; (80118b8 <HAL_DMA_IRQHandler+0x2cc>)
 801178c:	4293      	cmp	r3, r2
 801178e:	d100      	bne.n	8011792 <HAL_DMA_IRQHandler+0x1a6>
 8011790:	e168      	b.n	8011a64 <HAL_DMA_IRQHandler+0x478>
 8011792:	4a51      	ldr	r2, [pc, #324]	; (80118d8 <HAL_DMA_IRQHandler+0x2ec>)
 8011794:	4293      	cmp	r3, r2
 8011796:	d100      	bne.n	801179a <HAL_DMA_IRQHandler+0x1ae>
 8011798:	e167      	b.n	8011a6a <HAL_DMA_IRQHandler+0x47e>
 801179a:	4a50      	ldr	r2, [pc, #320]	; (80118dc <HAL_DMA_IRQHandler+0x2f0>)
 801179c:	4293      	cmp	r3, r2
 801179e:	d100      	bne.n	80117a2 <HAL_DMA_IRQHandler+0x1b6>
 80117a0:	e165      	b.n	8011a6e <HAL_DMA_IRQHandler+0x482>
 80117a2:	4a4f      	ldr	r2, [pc, #316]	; (80118e0 <HAL_DMA_IRQHandler+0x2f4>)
 80117a4:	4293      	cmp	r3, r2
 80117a6:	d100      	bne.n	80117aa <HAL_DMA_IRQHandler+0x1be>
 80117a8:	e163      	b.n	8011a72 <HAL_DMA_IRQHandler+0x486>
 80117aa:	4a4e      	ldr	r2, [pc, #312]	; (80118e4 <HAL_DMA_IRQHandler+0x2f8>)
 80117ac:	189a      	adds	r2, r3, r2
 80117ae:	4250      	negs	r0, r2
 80117b0:	4142      	adcs	r2, r0
 80117b2:	4252      	negs	r2, r2
 80117b4:	484d      	ldr	r0, [pc, #308]	; (80118ec <HAL_DMA_IRQHandler+0x300>)
 80117b6:	4002      	ands	r2, r0
 80117b8:	2080      	movs	r0, #128	; 0x80
 80117ba:	02c0      	lsls	r0, r0, #11
 80117bc:	4684      	mov	ip, r0
 80117be:	4462      	add	r2, ip
 80117c0:	e0fd      	b.n	80119be <HAL_DMA_IRQHandler+0x3d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80117c2:	2280      	movs	r2, #128	; 0x80
 80117c4:	e7c4      	b.n	8011750 <HAL_DMA_IRQHandler+0x164>
 80117c6:	2280      	movs	r2, #128	; 0x80
 80117c8:	0112      	lsls	r2, r2, #4
 80117ca:	e7c1      	b.n	8011750 <HAL_DMA_IRQHandler+0x164>
 80117cc:	2280      	movs	r2, #128	; 0x80
 80117ce:	0212      	lsls	r2, r2, #8
 80117d0:	e7be      	b.n	8011750 <HAL_DMA_IRQHandler+0x164>
 80117d2:	2280      	movs	r2, #128	; 0x80
 80117d4:	0312      	lsls	r2, r2, #12
 80117d6:	e7bb      	b.n	8011750 <HAL_DMA_IRQHandler+0x164>
 80117d8:	2280      	movs	r2, #128	; 0x80
 80117da:	0412      	lsls	r2, r2, #16
 80117dc:	e7b8      	b.n	8011750 <HAL_DMA_IRQHandler+0x164>
 80117de:	2280      	movs	r2, #128	; 0x80
 80117e0:	0512      	lsls	r2, r2, #20
 80117e2:	e7b5      	b.n	8011750 <HAL_DMA_IRQHandler+0x164>
 80117e4:	2208      	movs	r2, #8
 80117e6:	e7b3      	b.n	8011750 <HAL_DMA_IRQHandler+0x164>
 80117e8:	2280      	movs	r2, #128	; 0x80
 80117ea:	e7b1      	b.n	8011750 <HAL_DMA_IRQHandler+0x164>
 80117ec:	2280      	movs	r2, #128	; 0x80
 80117ee:	0112      	lsls	r2, r2, #4
 80117f0:	e7ae      	b.n	8011750 <HAL_DMA_IRQHandler+0x164>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	2108      	movs	r1, #8
 80117f6:	438a      	bics	r2, r1
 80117f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80117fa:	6823      	ldr	r3, [r4, #0]
 80117fc:	4a2e      	ldr	r2, [pc, #184]	; (80118b8 <HAL_DMA_IRQHandler+0x2cc>)
 80117fe:	4293      	cmp	r3, r2
 8011800:	d978      	bls.n	80118f4 <HAL_DMA_IRQHandler+0x308>
 8011802:	4a2f      	ldr	r2, [pc, #188]	; (80118c0 <HAL_DMA_IRQHandler+0x2d4>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d027      	beq.n	8011858 <HAL_DMA_IRQHandler+0x26c>
 8011808:	4a2e      	ldr	r2, [pc, #184]	; (80118c4 <HAL_DMA_IRQHandler+0x2d8>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d03c      	beq.n	8011888 <HAL_DMA_IRQHandler+0x29c>
 801180e:	4a2e      	ldr	r2, [pc, #184]	; (80118c8 <HAL_DMA_IRQHandler+0x2dc>)
 8011810:	4293      	cmp	r3, r2
 8011812:	d03b      	beq.n	801188c <HAL_DMA_IRQHandler+0x2a0>
 8011814:	4a2d      	ldr	r2, [pc, #180]	; (80118cc <HAL_DMA_IRQHandler+0x2e0>)
 8011816:	4293      	cmp	r3, r2
 8011818:	d03b      	beq.n	8011892 <HAL_DMA_IRQHandler+0x2a6>
 801181a:	4a2d      	ldr	r2, [pc, #180]	; (80118d0 <HAL_DMA_IRQHandler+0x2e4>)
 801181c:	4293      	cmp	r3, r2
 801181e:	d03b      	beq.n	8011898 <HAL_DMA_IRQHandler+0x2ac>
 8011820:	4a2c      	ldr	r2, [pc, #176]	; (80118d4 <HAL_DMA_IRQHandler+0x2e8>)
 8011822:	4293      	cmp	r3, r2
 8011824:	d03b      	beq.n	801189e <HAL_DMA_IRQHandler+0x2b2>
 8011826:	4a24      	ldr	r2, [pc, #144]	; (80118b8 <HAL_DMA_IRQHandler+0x2cc>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d03b      	beq.n	80118a4 <HAL_DMA_IRQHandler+0x2b8>
 801182c:	4a2a      	ldr	r2, [pc, #168]	; (80118d8 <HAL_DMA_IRQHandler+0x2ec>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d03b      	beq.n	80118aa <HAL_DMA_IRQHandler+0x2be>
 8011832:	4a2a      	ldr	r2, [pc, #168]	; (80118dc <HAL_DMA_IRQHandler+0x2f0>)
 8011834:	4293      	cmp	r3, r2
 8011836:	d03a      	beq.n	80118ae <HAL_DMA_IRQHandler+0x2c2>
 8011838:	4a29      	ldr	r2, [pc, #164]	; (80118e0 <HAL_DMA_IRQHandler+0x2f4>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d039      	beq.n	80118b2 <HAL_DMA_IRQHandler+0x2c6>
 801183e:	4a29      	ldr	r2, [pc, #164]	; (80118e4 <HAL_DMA_IRQHandler+0x2f8>)
 8011840:	4694      	mov	ip, r2
 8011842:	4463      	add	r3, ip
 8011844:	425a      	negs	r2, r3
 8011846:	4153      	adcs	r3, r2
 8011848:	425b      	negs	r3, r3
 801184a:	4a27      	ldr	r2, [pc, #156]	; (80118e8 <HAL_DMA_IRQHandler+0x2fc>)
 801184c:	4013      	ands	r3, r2
 801184e:	2280      	movs	r2, #128	; 0x80
 8011850:	0312      	lsls	r2, r2, #12
 8011852:	4694      	mov	ip, r2
 8011854:	4463      	add	r3, ip
 8011856:	e000      	b.n	801185a <HAL_DMA_IRQHandler+0x26e>
 8011858:	2308      	movs	r3, #8
 801185a:	4a18      	ldr	r2, [pc, #96]	; (80118bc <HAL_DMA_IRQHandler+0x2d0>)
 801185c:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801185e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011860:	2201      	movs	r2, #1
 8011862:	4313      	orrs	r3, r2
 8011864:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011866:	2321      	movs	r3, #33	; 0x21
 8011868:	3203      	adds	r2, #3
 801186a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 801186c:	3b01      	subs	r3, #1
 801186e:	2200      	movs	r2, #0
 8011870:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011872:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011874:	2b00      	cmp	r3, #0
 8011876:	d001      	beq.n	801187c <HAL_DMA_IRQHandler+0x290>
        hdma->XferErrorCallback(hdma);
 8011878:	0020      	movs	r0, r4
 801187a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801187c:	6823      	ldr	r3, [r4, #0]
 801187e:	4a0e      	ldr	r2, [pc, #56]	; (80118b8 <HAL_DMA_IRQHandler+0x2cc>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d800      	bhi.n	8011886 <HAL_DMA_IRQHandler+0x29a>
 8011884:	e767      	b.n	8011756 <HAL_DMA_IRQHandler+0x16a>
 8011886:	e6e8      	b.n	801165a <HAL_DMA_IRQHandler+0x6e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011888:	2380      	movs	r3, #128	; 0x80
 801188a:	e7e6      	b.n	801185a <HAL_DMA_IRQHandler+0x26e>
 801188c:	2380      	movs	r3, #128	; 0x80
 801188e:	011b      	lsls	r3, r3, #4
 8011890:	e7e3      	b.n	801185a <HAL_DMA_IRQHandler+0x26e>
 8011892:	2380      	movs	r3, #128	; 0x80
 8011894:	021b      	lsls	r3, r3, #8
 8011896:	e7e0      	b.n	801185a <HAL_DMA_IRQHandler+0x26e>
 8011898:	2380      	movs	r3, #128	; 0x80
 801189a:	031b      	lsls	r3, r3, #12
 801189c:	e7dd      	b.n	801185a <HAL_DMA_IRQHandler+0x26e>
 801189e:	2380      	movs	r3, #128	; 0x80
 80118a0:	041b      	lsls	r3, r3, #16
 80118a2:	e7da      	b.n	801185a <HAL_DMA_IRQHandler+0x26e>
 80118a4:	2380      	movs	r3, #128	; 0x80
 80118a6:	051b      	lsls	r3, r3, #20
 80118a8:	e7d7      	b.n	801185a <HAL_DMA_IRQHandler+0x26e>
 80118aa:	2308      	movs	r3, #8
 80118ac:	e7d5      	b.n	801185a <HAL_DMA_IRQHandler+0x26e>
 80118ae:	2380      	movs	r3, #128	; 0x80
 80118b0:	e7d3      	b.n	801185a <HAL_DMA_IRQHandler+0x26e>
 80118b2:	2380      	movs	r3, #128	; 0x80
 80118b4:	011b      	lsls	r3, r3, #4
 80118b6:	e7d0      	b.n	801185a <HAL_DMA_IRQHandler+0x26e>
 80118b8:	40020080 	.word	0x40020080
 80118bc:	40020400 	.word	0x40020400
 80118c0:	40020008 	.word	0x40020008
 80118c4:	4002001c 	.word	0x4002001c
 80118c8:	40020030 	.word	0x40020030
 80118cc:	40020044 	.word	0x40020044
 80118d0:	40020058 	.word	0x40020058
 80118d4:	4002006c 	.word	0x4002006c
 80118d8:	40020408 	.word	0x40020408
 80118dc:	4002041c 	.word	0x4002041c
 80118e0:	40020430 	.word	0x40020430
 80118e4:	bffdfbbc 	.word	0xbffdfbbc
 80118e8:	fff88000 	.word	0xfff88000
 80118ec:	fffc4000 	.word	0xfffc4000
 80118f0:	40020000 	.word	0x40020000
 80118f4:	4ab3      	ldr	r2, [pc, #716]	; (8011bc4 <HAL_DMA_IRQHandler+0x5d8>)
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d027      	beq.n	801194a <HAL_DMA_IRQHandler+0x35e>
 80118fa:	4ab3      	ldr	r2, [pc, #716]	; (8011bc8 <HAL_DMA_IRQHandler+0x5dc>)
 80118fc:	4293      	cmp	r3, r2
 80118fe:	d028      	beq.n	8011952 <HAL_DMA_IRQHandler+0x366>
 8011900:	4ab2      	ldr	r2, [pc, #712]	; (8011bcc <HAL_DMA_IRQHandler+0x5e0>)
 8011902:	4293      	cmp	r3, r2
 8011904:	d027      	beq.n	8011956 <HAL_DMA_IRQHandler+0x36a>
 8011906:	4ab2      	ldr	r2, [pc, #712]	; (8011bd0 <HAL_DMA_IRQHandler+0x5e4>)
 8011908:	4293      	cmp	r3, r2
 801190a:	d027      	beq.n	801195c <HAL_DMA_IRQHandler+0x370>
 801190c:	4ab1      	ldr	r2, [pc, #708]	; (8011bd4 <HAL_DMA_IRQHandler+0x5e8>)
 801190e:	4293      	cmp	r3, r2
 8011910:	d027      	beq.n	8011962 <HAL_DMA_IRQHandler+0x376>
 8011912:	4ab1      	ldr	r2, [pc, #708]	; (8011bd8 <HAL_DMA_IRQHandler+0x5ec>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d027      	beq.n	8011968 <HAL_DMA_IRQHandler+0x37c>
 8011918:	4ab0      	ldr	r2, [pc, #704]	; (8011bdc <HAL_DMA_IRQHandler+0x5f0>)
 801191a:	4293      	cmp	r3, r2
 801191c:	d027      	beq.n	801196e <HAL_DMA_IRQHandler+0x382>
 801191e:	4ab0      	ldr	r2, [pc, #704]	; (8011be0 <HAL_DMA_IRQHandler+0x5f4>)
 8011920:	4293      	cmp	r3, r2
 8011922:	d027      	beq.n	8011974 <HAL_DMA_IRQHandler+0x388>
 8011924:	4aaf      	ldr	r2, [pc, #700]	; (8011be4 <HAL_DMA_IRQHandler+0x5f8>)
 8011926:	4293      	cmp	r3, r2
 8011928:	d026      	beq.n	8011978 <HAL_DMA_IRQHandler+0x38c>
 801192a:	4aaf      	ldr	r2, [pc, #700]	; (8011be8 <HAL_DMA_IRQHandler+0x5fc>)
 801192c:	4293      	cmp	r3, r2
 801192e:	d025      	beq.n	801197c <HAL_DMA_IRQHandler+0x390>
 8011930:	4aae      	ldr	r2, [pc, #696]	; (8011bec <HAL_DMA_IRQHandler+0x600>)
 8011932:	4694      	mov	ip, r2
 8011934:	4463      	add	r3, ip
 8011936:	425a      	negs	r2, r3
 8011938:	4153      	adcs	r3, r2
 801193a:	425b      	negs	r3, r3
 801193c:	4aac      	ldr	r2, [pc, #688]	; (8011bf0 <HAL_DMA_IRQHandler+0x604>)
 801193e:	4013      	ands	r3, r2
 8011940:	2280      	movs	r2, #128	; 0x80
 8011942:	0312      	lsls	r2, r2, #12
 8011944:	4694      	mov	ip, r2
 8011946:	4463      	add	r3, ip
 8011948:	e000      	b.n	801194c <HAL_DMA_IRQHandler+0x360>
 801194a:	2308      	movs	r3, #8
 801194c:	4aa9      	ldr	r2, [pc, #676]	; (8011bf4 <HAL_DMA_IRQHandler+0x608>)
 801194e:	6053      	str	r3, [r2, #4]
 8011950:	e785      	b.n	801185e <HAL_DMA_IRQHandler+0x272>
 8011952:	2380      	movs	r3, #128	; 0x80
 8011954:	e7fa      	b.n	801194c <HAL_DMA_IRQHandler+0x360>
 8011956:	2380      	movs	r3, #128	; 0x80
 8011958:	011b      	lsls	r3, r3, #4
 801195a:	e7f7      	b.n	801194c <HAL_DMA_IRQHandler+0x360>
 801195c:	2380      	movs	r3, #128	; 0x80
 801195e:	021b      	lsls	r3, r3, #8
 8011960:	e7f4      	b.n	801194c <HAL_DMA_IRQHandler+0x360>
 8011962:	2380      	movs	r3, #128	; 0x80
 8011964:	031b      	lsls	r3, r3, #12
 8011966:	e7f1      	b.n	801194c <HAL_DMA_IRQHandler+0x360>
 8011968:	2380      	movs	r3, #128	; 0x80
 801196a:	041b      	lsls	r3, r3, #16
 801196c:	e7ee      	b.n	801194c <HAL_DMA_IRQHandler+0x360>
 801196e:	2380      	movs	r3, #128	; 0x80
 8011970:	051b      	lsls	r3, r3, #20
 8011972:	e7eb      	b.n	801194c <HAL_DMA_IRQHandler+0x360>
 8011974:	2308      	movs	r3, #8
 8011976:	e7e9      	b.n	801194c <HAL_DMA_IRQHandler+0x360>
 8011978:	2380      	movs	r3, #128	; 0x80
 801197a:	e7e7      	b.n	801194c <HAL_DMA_IRQHandler+0x360>
 801197c:	2380      	movs	r3, #128	; 0x80
 801197e:	011b      	lsls	r3, r3, #4
 8011980:	e7e4      	b.n	801194c <HAL_DMA_IRQHandler+0x360>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011982:	2204      	movs	r2, #4
 8011984:	420a      	tst	r2, r1
 8011986:	d11d      	bne.n	80119c4 <HAL_DMA_IRQHandler+0x3d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011988:	6821      	ldr	r1, [r4, #0]
 801198a:	e085      	b.n	8011a98 <HAL_DMA_IRQHandler+0x4ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801198c:	2240      	movs	r2, #64	; 0x40
 801198e:	e7f9      	b.n	8011984 <HAL_DMA_IRQHandler+0x398>
 8011990:	2280      	movs	r2, #128	; 0x80
 8011992:	00d2      	lsls	r2, r2, #3
 8011994:	e7f6      	b.n	8011984 <HAL_DMA_IRQHandler+0x398>
 8011996:	2280      	movs	r2, #128	; 0x80
 8011998:	01d2      	lsls	r2, r2, #7
 801199a:	e7f3      	b.n	8011984 <HAL_DMA_IRQHandler+0x398>
 801199c:	2280      	movs	r2, #128	; 0x80
 801199e:	02d2      	lsls	r2, r2, #11
 80119a0:	e7f0      	b.n	8011984 <HAL_DMA_IRQHandler+0x398>
 80119a2:	2280      	movs	r2, #128	; 0x80
 80119a4:	03d2      	lsls	r2, r2, #15
 80119a6:	e7ed      	b.n	8011984 <HAL_DMA_IRQHandler+0x398>
 80119a8:	2280      	movs	r2, #128	; 0x80
 80119aa:	04d2      	lsls	r2, r2, #19
 80119ac:	e7ea      	b.n	8011984 <HAL_DMA_IRQHandler+0x398>
 80119ae:	2204      	movs	r2, #4
 80119b0:	e7e8      	b.n	8011984 <HAL_DMA_IRQHandler+0x398>
 80119b2:	2240      	movs	r2, #64	; 0x40
 80119b4:	e7e6      	b.n	8011984 <HAL_DMA_IRQHandler+0x398>
 80119b6:	2280      	movs	r2, #128	; 0x80
 80119b8:	00d2      	lsls	r2, r2, #3
 80119ba:	e7e3      	b.n	8011984 <HAL_DMA_IRQHandler+0x398>
 80119bc:	2204      	movs	r2, #4
 80119be:	420a      	tst	r2, r1
 80119c0:	d100      	bne.n	80119c4 <HAL_DMA_IRQHandler+0x3d8>
 80119c2:	e208      	b.n	8011dd6 <HAL_DMA_IRQHandler+0x7ea>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	0752      	lsls	r2, r2, #29
 80119c8:	d561      	bpl.n	8011a8e <HAL_DMA_IRQHandler+0x4a2>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80119ca:	681a      	ldr	r2, [r3, #0]
 80119cc:	0692      	lsls	r2, r2, #26
 80119ce:	d403      	bmi.n	80119d8 <HAL_DMA_IRQHandler+0x3ec>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	2104      	movs	r1, #4
 80119d4:	438a      	bics	r2, r1
 80119d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80119d8:	6823      	ldr	r3, [r4, #0]
 80119da:	4a80      	ldr	r2, [pc, #512]	; (8011bdc <HAL_DMA_IRQHandler+0x5f0>)
 80119dc:	4293      	cmp	r3, r2
 80119de:	d800      	bhi.n	80119e2 <HAL_DMA_IRQHandler+0x3f6>
 80119e0:	e0a8      	b.n	8011b34 <HAL_DMA_IRQHandler+0x548>
 80119e2:	4a78      	ldr	r2, [pc, #480]	; (8011bc4 <HAL_DMA_IRQHandler+0x5d8>)
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d047      	beq.n	8011a78 <HAL_DMA_IRQHandler+0x48c>
 80119e8:	4a77      	ldr	r2, [pc, #476]	; (8011bc8 <HAL_DMA_IRQHandler+0x5dc>)
 80119ea:	4293      	cmp	r3, r2
 80119ec:	d100      	bne.n	80119f0 <HAL_DMA_IRQHandler+0x404>
 80119ee:	e089      	b.n	8011b04 <HAL_DMA_IRQHandler+0x518>
 80119f0:	4a76      	ldr	r2, [pc, #472]	; (8011bcc <HAL_DMA_IRQHandler+0x5e0>)
 80119f2:	4293      	cmp	r3, r2
 80119f4:	d100      	bne.n	80119f8 <HAL_DMA_IRQHandler+0x40c>
 80119f6:	e087      	b.n	8011b08 <HAL_DMA_IRQHandler+0x51c>
 80119f8:	4a75      	ldr	r2, [pc, #468]	; (8011bd0 <HAL_DMA_IRQHandler+0x5e4>)
 80119fa:	4293      	cmp	r3, r2
 80119fc:	d100      	bne.n	8011a00 <HAL_DMA_IRQHandler+0x414>
 80119fe:	e086      	b.n	8011b0e <HAL_DMA_IRQHandler+0x522>
 8011a00:	4a74      	ldr	r2, [pc, #464]	; (8011bd4 <HAL_DMA_IRQHandler+0x5e8>)
 8011a02:	4293      	cmp	r3, r2
 8011a04:	d100      	bne.n	8011a08 <HAL_DMA_IRQHandler+0x41c>
 8011a06:	e085      	b.n	8011b14 <HAL_DMA_IRQHandler+0x528>
 8011a08:	4a73      	ldr	r2, [pc, #460]	; (8011bd8 <HAL_DMA_IRQHandler+0x5ec>)
 8011a0a:	4293      	cmp	r3, r2
 8011a0c:	d100      	bne.n	8011a10 <HAL_DMA_IRQHandler+0x424>
 8011a0e:	e084      	b.n	8011b1a <HAL_DMA_IRQHandler+0x52e>
 8011a10:	4a72      	ldr	r2, [pc, #456]	; (8011bdc <HAL_DMA_IRQHandler+0x5f0>)
 8011a12:	4293      	cmp	r3, r2
 8011a14:	d100      	bne.n	8011a18 <HAL_DMA_IRQHandler+0x42c>
 8011a16:	e083      	b.n	8011b20 <HAL_DMA_IRQHandler+0x534>
 8011a18:	4a71      	ldr	r2, [pc, #452]	; (8011be0 <HAL_DMA_IRQHandler+0x5f4>)
 8011a1a:	4293      	cmp	r3, r2
 8011a1c:	d100      	bne.n	8011a20 <HAL_DMA_IRQHandler+0x434>
 8011a1e:	e082      	b.n	8011b26 <HAL_DMA_IRQHandler+0x53a>
 8011a20:	4a70      	ldr	r2, [pc, #448]	; (8011be4 <HAL_DMA_IRQHandler+0x5f8>)
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d100      	bne.n	8011a28 <HAL_DMA_IRQHandler+0x43c>
 8011a26:	e080      	b.n	8011b2a <HAL_DMA_IRQHandler+0x53e>
 8011a28:	4a6f      	ldr	r2, [pc, #444]	; (8011be8 <HAL_DMA_IRQHandler+0x5fc>)
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	d07f      	beq.n	8011b2e <HAL_DMA_IRQHandler+0x542>
 8011a2e:	4a6f      	ldr	r2, [pc, #444]	; (8011bec <HAL_DMA_IRQHandler+0x600>)
 8011a30:	4694      	mov	ip, r2
 8011a32:	4463      	add	r3, ip
 8011a34:	425a      	negs	r2, r3
 8011a36:	4153      	adcs	r3, r2
 8011a38:	425b      	negs	r3, r3
 8011a3a:	4a6f      	ldr	r2, [pc, #444]	; (8011bf8 <HAL_DMA_IRQHandler+0x60c>)
 8011a3c:	4013      	ands	r3, r2
 8011a3e:	2280      	movs	r2, #128	; 0x80
 8011a40:	02d2      	lsls	r2, r2, #11
 8011a42:	4694      	mov	ip, r2
 8011a44:	4463      	add	r3, ip
 8011a46:	e018      	b.n	8011a7a <HAL_DMA_IRQHandler+0x48e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011a48:	2240      	movs	r2, #64	; 0x40
 8011a4a:	e7b8      	b.n	80119be <HAL_DMA_IRQHandler+0x3d2>
 8011a4c:	2280      	movs	r2, #128	; 0x80
 8011a4e:	00d2      	lsls	r2, r2, #3
 8011a50:	e7b5      	b.n	80119be <HAL_DMA_IRQHandler+0x3d2>
 8011a52:	2280      	movs	r2, #128	; 0x80
 8011a54:	01d2      	lsls	r2, r2, #7
 8011a56:	e7b2      	b.n	80119be <HAL_DMA_IRQHandler+0x3d2>
 8011a58:	2280      	movs	r2, #128	; 0x80
 8011a5a:	02d2      	lsls	r2, r2, #11
 8011a5c:	e7af      	b.n	80119be <HAL_DMA_IRQHandler+0x3d2>
 8011a5e:	2280      	movs	r2, #128	; 0x80
 8011a60:	03d2      	lsls	r2, r2, #15
 8011a62:	e7ac      	b.n	80119be <HAL_DMA_IRQHandler+0x3d2>
 8011a64:	2280      	movs	r2, #128	; 0x80
 8011a66:	04d2      	lsls	r2, r2, #19
 8011a68:	e7a9      	b.n	80119be <HAL_DMA_IRQHandler+0x3d2>
 8011a6a:	2204      	movs	r2, #4
 8011a6c:	e7a7      	b.n	80119be <HAL_DMA_IRQHandler+0x3d2>
 8011a6e:	2240      	movs	r2, #64	; 0x40
 8011a70:	e7a5      	b.n	80119be <HAL_DMA_IRQHandler+0x3d2>
 8011a72:	2280      	movs	r2, #128	; 0x80
 8011a74:	00d2      	lsls	r2, r2, #3
 8011a76:	e7a2      	b.n	80119be <HAL_DMA_IRQHandler+0x3d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011a78:	2304      	movs	r3, #4
 8011a7a:	4a60      	ldr	r2, [pc, #384]	; (8011bfc <HAL_DMA_IRQHandler+0x610>)
 8011a7c:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8011a7e:	2321      	movs	r3, #33	; 0x21
 8011a80:	2211      	movs	r2, #17
 8011a82:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011a84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d001      	beq.n	8011a8e <HAL_DMA_IRQHandler+0x4a2>
        hdma->XferHalfCpltCallback(hdma);
 8011a8a:	0020      	movs	r0, r4
 8011a8c:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011a8e:	6821      	ldr	r1, [r4, #0]
 8011a90:	4b52      	ldr	r3, [pc, #328]	; (8011bdc <HAL_DMA_IRQHandler+0x5f0>)
 8011a92:	4299      	cmp	r1, r3
 8011a94:	d800      	bhi.n	8011a98 <HAL_DMA_IRQHandler+0x4ac>
 8011a96:	e19f      	b.n	8011dd8 <HAL_DMA_IRQHandler+0x7ec>
 8011a98:	4b58      	ldr	r3, [pc, #352]	; (8011bfc <HAL_DMA_IRQHandler+0x610>)
 8011a9a:	6818      	ldr	r0, [r3, #0]
 8011a9c:	4a49      	ldr	r2, [pc, #292]	; (8011bc4 <HAL_DMA_IRQHandler+0x5d8>)
 8011a9e:	4291      	cmp	r1, r2
 8011aa0:	d100      	bne.n	8011aa4 <HAL_DMA_IRQHandler+0x4b8>
 8011aa2:	e0af      	b.n	8011c04 <HAL_DMA_IRQHandler+0x618>
 8011aa4:	4a48      	ldr	r2, [pc, #288]	; (8011bc8 <HAL_DMA_IRQHandler+0x5dc>)
 8011aa6:	4291      	cmp	r1, r2
 8011aa8:	d100      	bne.n	8011aac <HAL_DMA_IRQHandler+0x4c0>
 8011aaa:	e0ee      	b.n	8011c8a <HAL_DMA_IRQHandler+0x69e>
 8011aac:	4a47      	ldr	r2, [pc, #284]	; (8011bcc <HAL_DMA_IRQHandler+0x5e0>)
 8011aae:	4291      	cmp	r1, r2
 8011ab0:	d100      	bne.n	8011ab4 <HAL_DMA_IRQHandler+0x4c8>
 8011ab2:	e0ec      	b.n	8011c8e <HAL_DMA_IRQHandler+0x6a2>
 8011ab4:	4a46      	ldr	r2, [pc, #280]	; (8011bd0 <HAL_DMA_IRQHandler+0x5e4>)
 8011ab6:	4291      	cmp	r1, r2
 8011ab8:	d100      	bne.n	8011abc <HAL_DMA_IRQHandler+0x4d0>
 8011aba:	e0eb      	b.n	8011c94 <HAL_DMA_IRQHandler+0x6a8>
 8011abc:	4b45      	ldr	r3, [pc, #276]	; (8011bd4 <HAL_DMA_IRQHandler+0x5e8>)
 8011abe:	4299      	cmp	r1, r3
 8011ac0:	d100      	bne.n	8011ac4 <HAL_DMA_IRQHandler+0x4d8>
 8011ac2:	e0ea      	b.n	8011c9a <HAL_DMA_IRQHandler+0x6ae>
 8011ac4:	4b44      	ldr	r3, [pc, #272]	; (8011bd8 <HAL_DMA_IRQHandler+0x5ec>)
 8011ac6:	4299      	cmp	r1, r3
 8011ac8:	d100      	bne.n	8011acc <HAL_DMA_IRQHandler+0x4e0>
 8011aca:	e0e9      	b.n	8011ca0 <HAL_DMA_IRQHandler+0x6b4>
 8011acc:	4b43      	ldr	r3, [pc, #268]	; (8011bdc <HAL_DMA_IRQHandler+0x5f0>)
 8011ace:	4299      	cmp	r1, r3
 8011ad0:	d100      	bne.n	8011ad4 <HAL_DMA_IRQHandler+0x4e8>
 8011ad2:	e0e8      	b.n	8011ca6 <HAL_DMA_IRQHandler+0x6ba>
 8011ad4:	4b42      	ldr	r3, [pc, #264]	; (8011be0 <HAL_DMA_IRQHandler+0x5f4>)
 8011ad6:	4299      	cmp	r1, r3
 8011ad8:	d100      	bne.n	8011adc <HAL_DMA_IRQHandler+0x4f0>
 8011ada:	e0e7      	b.n	8011cac <HAL_DMA_IRQHandler+0x6c0>
 8011adc:	4b41      	ldr	r3, [pc, #260]	; (8011be4 <HAL_DMA_IRQHandler+0x5f8>)
 8011ade:	4299      	cmp	r1, r3
 8011ae0:	d100      	bne.n	8011ae4 <HAL_DMA_IRQHandler+0x4f8>
 8011ae2:	e0e5      	b.n	8011cb0 <HAL_DMA_IRQHandler+0x6c4>
 8011ae4:	4b40      	ldr	r3, [pc, #256]	; (8011be8 <HAL_DMA_IRQHandler+0x5fc>)
 8011ae6:	4299      	cmp	r1, r3
 8011ae8:	d100      	bne.n	8011aec <HAL_DMA_IRQHandler+0x500>
 8011aea:	e0e3      	b.n	8011cb4 <HAL_DMA_IRQHandler+0x6c8>
 8011aec:	4b3f      	ldr	r3, [pc, #252]	; (8011bec <HAL_DMA_IRQHandler+0x600>)
 8011aee:	18ca      	adds	r2, r1, r3
 8011af0:	4253      	negs	r3, r2
 8011af2:	415a      	adcs	r2, r3
 8011af4:	4252      	negs	r2, r2
 8011af6:	4b42      	ldr	r3, [pc, #264]	; (8011c00 <HAL_DMA_IRQHandler+0x614>)
 8011af8:	4013      	ands	r3, r2
 8011afa:	2280      	movs	r2, #128	; 0x80
 8011afc:	0292      	lsls	r2, r2, #10
 8011afe:	4694      	mov	ip, r2
 8011b00:	4463      	add	r3, ip
 8011b02:	e080      	b.n	8011c06 <HAL_DMA_IRQHandler+0x61a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011b04:	2340      	movs	r3, #64	; 0x40
 8011b06:	e7b8      	b.n	8011a7a <HAL_DMA_IRQHandler+0x48e>
 8011b08:	2380      	movs	r3, #128	; 0x80
 8011b0a:	00db      	lsls	r3, r3, #3
 8011b0c:	e7b5      	b.n	8011a7a <HAL_DMA_IRQHandler+0x48e>
 8011b0e:	2380      	movs	r3, #128	; 0x80
 8011b10:	01db      	lsls	r3, r3, #7
 8011b12:	e7b2      	b.n	8011a7a <HAL_DMA_IRQHandler+0x48e>
 8011b14:	2380      	movs	r3, #128	; 0x80
 8011b16:	02db      	lsls	r3, r3, #11
 8011b18:	e7af      	b.n	8011a7a <HAL_DMA_IRQHandler+0x48e>
 8011b1a:	2380      	movs	r3, #128	; 0x80
 8011b1c:	03db      	lsls	r3, r3, #15
 8011b1e:	e7ac      	b.n	8011a7a <HAL_DMA_IRQHandler+0x48e>
 8011b20:	2380      	movs	r3, #128	; 0x80
 8011b22:	04db      	lsls	r3, r3, #19
 8011b24:	e7a9      	b.n	8011a7a <HAL_DMA_IRQHandler+0x48e>
 8011b26:	2304      	movs	r3, #4
 8011b28:	e7a7      	b.n	8011a7a <HAL_DMA_IRQHandler+0x48e>
 8011b2a:	2340      	movs	r3, #64	; 0x40
 8011b2c:	e7a5      	b.n	8011a7a <HAL_DMA_IRQHandler+0x48e>
 8011b2e:	2380      	movs	r3, #128	; 0x80
 8011b30:	00db      	lsls	r3, r3, #3
 8011b32:	e7a2      	b.n	8011a7a <HAL_DMA_IRQHandler+0x48e>
 8011b34:	4a23      	ldr	r2, [pc, #140]	; (8011bc4 <HAL_DMA_IRQHandler+0x5d8>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d027      	beq.n	8011b8a <HAL_DMA_IRQHandler+0x59e>
 8011b3a:	4a23      	ldr	r2, [pc, #140]	; (8011bc8 <HAL_DMA_IRQHandler+0x5dc>)
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	d028      	beq.n	8011b92 <HAL_DMA_IRQHandler+0x5a6>
 8011b40:	4a22      	ldr	r2, [pc, #136]	; (8011bcc <HAL_DMA_IRQHandler+0x5e0>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d027      	beq.n	8011b96 <HAL_DMA_IRQHandler+0x5aa>
 8011b46:	4a22      	ldr	r2, [pc, #136]	; (8011bd0 <HAL_DMA_IRQHandler+0x5e4>)
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	d027      	beq.n	8011b9c <HAL_DMA_IRQHandler+0x5b0>
 8011b4c:	4a21      	ldr	r2, [pc, #132]	; (8011bd4 <HAL_DMA_IRQHandler+0x5e8>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d027      	beq.n	8011ba2 <HAL_DMA_IRQHandler+0x5b6>
 8011b52:	4a21      	ldr	r2, [pc, #132]	; (8011bd8 <HAL_DMA_IRQHandler+0x5ec>)
 8011b54:	4293      	cmp	r3, r2
 8011b56:	d027      	beq.n	8011ba8 <HAL_DMA_IRQHandler+0x5bc>
 8011b58:	4a20      	ldr	r2, [pc, #128]	; (8011bdc <HAL_DMA_IRQHandler+0x5f0>)
 8011b5a:	4293      	cmp	r3, r2
 8011b5c:	d027      	beq.n	8011bae <HAL_DMA_IRQHandler+0x5c2>
 8011b5e:	4a20      	ldr	r2, [pc, #128]	; (8011be0 <HAL_DMA_IRQHandler+0x5f4>)
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d027      	beq.n	8011bb4 <HAL_DMA_IRQHandler+0x5c8>
 8011b64:	4a1f      	ldr	r2, [pc, #124]	; (8011be4 <HAL_DMA_IRQHandler+0x5f8>)
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d026      	beq.n	8011bb8 <HAL_DMA_IRQHandler+0x5cc>
 8011b6a:	4a1f      	ldr	r2, [pc, #124]	; (8011be8 <HAL_DMA_IRQHandler+0x5fc>)
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	d025      	beq.n	8011bbc <HAL_DMA_IRQHandler+0x5d0>
 8011b70:	4a1e      	ldr	r2, [pc, #120]	; (8011bec <HAL_DMA_IRQHandler+0x600>)
 8011b72:	4694      	mov	ip, r2
 8011b74:	4463      	add	r3, ip
 8011b76:	425a      	negs	r2, r3
 8011b78:	4153      	adcs	r3, r2
 8011b7a:	425b      	negs	r3, r3
 8011b7c:	4a1e      	ldr	r2, [pc, #120]	; (8011bf8 <HAL_DMA_IRQHandler+0x60c>)
 8011b7e:	4013      	ands	r3, r2
 8011b80:	2280      	movs	r2, #128	; 0x80
 8011b82:	02d2      	lsls	r2, r2, #11
 8011b84:	4694      	mov	ip, r2
 8011b86:	4463      	add	r3, ip
 8011b88:	e000      	b.n	8011b8c <HAL_DMA_IRQHandler+0x5a0>
 8011b8a:	2304      	movs	r3, #4
 8011b8c:	4a19      	ldr	r2, [pc, #100]	; (8011bf4 <HAL_DMA_IRQHandler+0x608>)
 8011b8e:	6053      	str	r3, [r2, #4]
 8011b90:	e775      	b.n	8011a7e <HAL_DMA_IRQHandler+0x492>
 8011b92:	2340      	movs	r3, #64	; 0x40
 8011b94:	e7fa      	b.n	8011b8c <HAL_DMA_IRQHandler+0x5a0>
 8011b96:	2380      	movs	r3, #128	; 0x80
 8011b98:	00db      	lsls	r3, r3, #3
 8011b9a:	e7f7      	b.n	8011b8c <HAL_DMA_IRQHandler+0x5a0>
 8011b9c:	2380      	movs	r3, #128	; 0x80
 8011b9e:	01db      	lsls	r3, r3, #7
 8011ba0:	e7f4      	b.n	8011b8c <HAL_DMA_IRQHandler+0x5a0>
 8011ba2:	2380      	movs	r3, #128	; 0x80
 8011ba4:	02db      	lsls	r3, r3, #11
 8011ba6:	e7f1      	b.n	8011b8c <HAL_DMA_IRQHandler+0x5a0>
 8011ba8:	2380      	movs	r3, #128	; 0x80
 8011baa:	03db      	lsls	r3, r3, #15
 8011bac:	e7ee      	b.n	8011b8c <HAL_DMA_IRQHandler+0x5a0>
 8011bae:	2380      	movs	r3, #128	; 0x80
 8011bb0:	04db      	lsls	r3, r3, #19
 8011bb2:	e7eb      	b.n	8011b8c <HAL_DMA_IRQHandler+0x5a0>
 8011bb4:	2304      	movs	r3, #4
 8011bb6:	e7e9      	b.n	8011b8c <HAL_DMA_IRQHandler+0x5a0>
 8011bb8:	2340      	movs	r3, #64	; 0x40
 8011bba:	e7e7      	b.n	8011b8c <HAL_DMA_IRQHandler+0x5a0>
 8011bbc:	2380      	movs	r3, #128	; 0x80
 8011bbe:	00db      	lsls	r3, r3, #3
 8011bc0:	e7e4      	b.n	8011b8c <HAL_DMA_IRQHandler+0x5a0>
 8011bc2:	46c0      	nop			; (mov r8, r8)
 8011bc4:	40020008 	.word	0x40020008
 8011bc8:	4002001c 	.word	0x4002001c
 8011bcc:	40020030 	.word	0x40020030
 8011bd0:	40020044 	.word	0x40020044
 8011bd4:	40020058 	.word	0x40020058
 8011bd8:	4002006c 	.word	0x4002006c
 8011bdc:	40020080 	.word	0x40020080
 8011be0:	40020408 	.word	0x40020408
 8011be4:	4002041c 	.word	0x4002041c
 8011be8:	40020430 	.word	0x40020430
 8011bec:	bffdfbbc 	.word	0xbffdfbbc
 8011bf0:	fff88000 	.word	0xfff88000
 8011bf4:	40020000 	.word	0x40020000
 8011bf8:	fffc4000 	.word	0xfffc4000
 8011bfc:	40020400 	.word	0x40020400
 8011c00:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011c04:	2302      	movs	r3, #2
 8011c06:	4003      	ands	r3, r0
 8011c08:	1e5a      	subs	r2, r3, #1
 8011c0a:	4193      	sbcs	r3, r2
 8011c0c:	b2db      	uxtb	r3, r3
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d100      	bne.n	8011c14 <HAL_DMA_IRQHandler+0x628>
 8011c12:	e080      	b.n	8011d16 <HAL_DMA_IRQHandler+0x72a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011c14:	680b      	ldr	r3, [r1, #0]
 8011c16:	079b      	lsls	r3, r3, #30
 8011c18:	d57d      	bpl.n	8011d16 <HAL_DMA_IRQHandler+0x72a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011c1a:	680b      	ldr	r3, [r1, #0]
 8011c1c:	069b      	lsls	r3, r3, #26
 8011c1e:	d403      	bmi.n	8011c28 <HAL_DMA_IRQHandler+0x63c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8011c20:	680b      	ldr	r3, [r1, #0]
 8011c22:	2202      	movs	r2, #2
 8011c24:	4393      	bics	r3, r2
 8011c26:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011c28:	6823      	ldr	r3, [r4, #0]
 8011c2a:	4a8d      	ldr	r2, [pc, #564]	; (8011e60 <HAL_DMA_IRQHandler+0x874>)
 8011c2c:	4293      	cmp	r3, r2
 8011c2e:	d800      	bhi.n	8011c32 <HAL_DMA_IRQHandler+0x646>
 8011c30:	e08a      	b.n	8011d48 <HAL_DMA_IRQHandler+0x75c>
 8011c32:	4a8c      	ldr	r2, [pc, #560]	; (8011e64 <HAL_DMA_IRQHandler+0x878>)
 8011c34:	4293      	cmp	r3, r2
 8011c36:	d05e      	beq.n	8011cf6 <HAL_DMA_IRQHandler+0x70a>
 8011c38:	4a8b      	ldr	r2, [pc, #556]	; (8011e68 <HAL_DMA_IRQHandler+0x87c>)
 8011c3a:	4293      	cmp	r3, r2
 8011c3c:	d100      	bne.n	8011c40 <HAL_DMA_IRQHandler+0x654>
 8011c3e:	e06b      	b.n	8011d18 <HAL_DMA_IRQHandler+0x72c>
 8011c40:	4a8a      	ldr	r2, [pc, #552]	; (8011e6c <HAL_DMA_IRQHandler+0x880>)
 8011c42:	4293      	cmp	r3, r2
 8011c44:	d06a      	beq.n	8011d1c <HAL_DMA_IRQHandler+0x730>
 8011c46:	4a8a      	ldr	r2, [pc, #552]	; (8011e70 <HAL_DMA_IRQHandler+0x884>)
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d06a      	beq.n	8011d22 <HAL_DMA_IRQHandler+0x736>
 8011c4c:	4a89      	ldr	r2, [pc, #548]	; (8011e74 <HAL_DMA_IRQHandler+0x888>)
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	d06a      	beq.n	8011d28 <HAL_DMA_IRQHandler+0x73c>
 8011c52:	4a89      	ldr	r2, [pc, #548]	; (8011e78 <HAL_DMA_IRQHandler+0x88c>)
 8011c54:	4293      	cmp	r3, r2
 8011c56:	d06a      	beq.n	8011d2e <HAL_DMA_IRQHandler+0x742>
 8011c58:	4a81      	ldr	r2, [pc, #516]	; (8011e60 <HAL_DMA_IRQHandler+0x874>)
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d06a      	beq.n	8011d34 <HAL_DMA_IRQHandler+0x748>
 8011c5e:	4a87      	ldr	r2, [pc, #540]	; (8011e7c <HAL_DMA_IRQHandler+0x890>)
 8011c60:	4293      	cmp	r3, r2
 8011c62:	d06a      	beq.n	8011d3a <HAL_DMA_IRQHandler+0x74e>
 8011c64:	4a86      	ldr	r2, [pc, #536]	; (8011e80 <HAL_DMA_IRQHandler+0x894>)
 8011c66:	4293      	cmp	r3, r2
 8011c68:	d069      	beq.n	8011d3e <HAL_DMA_IRQHandler+0x752>
 8011c6a:	4a86      	ldr	r2, [pc, #536]	; (8011e84 <HAL_DMA_IRQHandler+0x898>)
 8011c6c:	4293      	cmp	r3, r2
 8011c6e:	d068      	beq.n	8011d42 <HAL_DMA_IRQHandler+0x756>
 8011c70:	4a85      	ldr	r2, [pc, #532]	; (8011e88 <HAL_DMA_IRQHandler+0x89c>)
 8011c72:	4694      	mov	ip, r2
 8011c74:	4463      	add	r3, ip
 8011c76:	425a      	negs	r2, r3
 8011c78:	4153      	adcs	r3, r2
 8011c7a:	425b      	negs	r3, r3
 8011c7c:	4a83      	ldr	r2, [pc, #524]	; (8011e8c <HAL_DMA_IRQHandler+0x8a0>)
 8011c7e:	4013      	ands	r3, r2
 8011c80:	2280      	movs	r2, #128	; 0x80
 8011c82:	0292      	lsls	r2, r2, #10
 8011c84:	4694      	mov	ip, r2
 8011c86:	4463      	add	r3, ip
 8011c88:	e036      	b.n	8011cf8 <HAL_DMA_IRQHandler+0x70c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011c8a:	2320      	movs	r3, #32
 8011c8c:	e7bb      	b.n	8011c06 <HAL_DMA_IRQHandler+0x61a>
 8011c8e:	2380      	movs	r3, #128	; 0x80
 8011c90:	009b      	lsls	r3, r3, #2
 8011c92:	e7b8      	b.n	8011c06 <HAL_DMA_IRQHandler+0x61a>
 8011c94:	2380      	movs	r3, #128	; 0x80
 8011c96:	019b      	lsls	r3, r3, #6
 8011c98:	e7b5      	b.n	8011c06 <HAL_DMA_IRQHandler+0x61a>
 8011c9a:	2380      	movs	r3, #128	; 0x80
 8011c9c:	029b      	lsls	r3, r3, #10
 8011c9e:	e7b2      	b.n	8011c06 <HAL_DMA_IRQHandler+0x61a>
 8011ca0:	2380      	movs	r3, #128	; 0x80
 8011ca2:	039b      	lsls	r3, r3, #14
 8011ca4:	e7af      	b.n	8011c06 <HAL_DMA_IRQHandler+0x61a>
 8011ca6:	2380      	movs	r3, #128	; 0x80
 8011ca8:	049b      	lsls	r3, r3, #18
 8011caa:	e7ac      	b.n	8011c06 <HAL_DMA_IRQHandler+0x61a>
 8011cac:	2302      	movs	r3, #2
 8011cae:	e7aa      	b.n	8011c06 <HAL_DMA_IRQHandler+0x61a>
 8011cb0:	2320      	movs	r3, #32
 8011cb2:	e7a8      	b.n	8011c06 <HAL_DMA_IRQHandler+0x61a>
 8011cb4:	2380      	movs	r3, #128	; 0x80
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	e7a5      	b.n	8011c06 <HAL_DMA_IRQHandler+0x61a>
 8011cba:	2302      	movs	r3, #2
 8011cbc:	4003      	ands	r3, r0
 8011cbe:	1e5a      	subs	r2, r3, #1
 8011cc0:	4193      	sbcs	r3, r2
 8011cc2:	b2db      	uxtb	r3, r3
 8011cc4:	e7a3      	b.n	8011c0e <HAL_DMA_IRQHandler+0x622>
 8011cc6:	2320      	movs	r3, #32
 8011cc8:	e7f8      	b.n	8011cbc <HAL_DMA_IRQHandler+0x6d0>
 8011cca:	2380      	movs	r3, #128	; 0x80
 8011ccc:	009b      	lsls	r3, r3, #2
 8011cce:	e7f5      	b.n	8011cbc <HAL_DMA_IRQHandler+0x6d0>
 8011cd0:	2380      	movs	r3, #128	; 0x80
 8011cd2:	019b      	lsls	r3, r3, #6
 8011cd4:	e7f2      	b.n	8011cbc <HAL_DMA_IRQHandler+0x6d0>
 8011cd6:	2380      	movs	r3, #128	; 0x80
 8011cd8:	029b      	lsls	r3, r3, #10
 8011cda:	e7ef      	b.n	8011cbc <HAL_DMA_IRQHandler+0x6d0>
 8011cdc:	2380      	movs	r3, #128	; 0x80
 8011cde:	039b      	lsls	r3, r3, #14
 8011ce0:	e7ec      	b.n	8011cbc <HAL_DMA_IRQHandler+0x6d0>
 8011ce2:	2380      	movs	r3, #128	; 0x80
 8011ce4:	049b      	lsls	r3, r3, #18
 8011ce6:	e7e9      	b.n	8011cbc <HAL_DMA_IRQHandler+0x6d0>
 8011ce8:	2302      	movs	r3, #2
 8011cea:	e7e7      	b.n	8011cbc <HAL_DMA_IRQHandler+0x6d0>
 8011cec:	2320      	movs	r3, #32
 8011cee:	e7e5      	b.n	8011cbc <HAL_DMA_IRQHandler+0x6d0>
 8011cf0:	2380      	movs	r3, #128	; 0x80
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	e7e2      	b.n	8011cbc <HAL_DMA_IRQHandler+0x6d0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011cf6:	2302      	movs	r3, #2
 8011cf8:	4a65      	ldr	r2, [pc, #404]	; (8011e90 <HAL_DMA_IRQHandler+0x8a4>)
 8011cfa:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011cfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011cfe:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011d00:	2321      	movs	r3, #33	; 0x21
 8011d02:	2201      	movs	r2, #1
 8011d04:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011d06:	3b01      	subs	r3, #1
 8011d08:	2200      	movs	r2, #0
 8011d0a:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011d0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d001      	beq.n	8011d16 <HAL_DMA_IRQHandler+0x72a>
        hdma->XferCpltCallback(hdma);
 8011d12:	0020      	movs	r0, r4
 8011d14:	4798      	blx	r3
}  
 8011d16:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011d18:	2320      	movs	r3, #32
 8011d1a:	e7ed      	b.n	8011cf8 <HAL_DMA_IRQHandler+0x70c>
 8011d1c:	2380      	movs	r3, #128	; 0x80
 8011d1e:	009b      	lsls	r3, r3, #2
 8011d20:	e7ea      	b.n	8011cf8 <HAL_DMA_IRQHandler+0x70c>
 8011d22:	2380      	movs	r3, #128	; 0x80
 8011d24:	019b      	lsls	r3, r3, #6
 8011d26:	e7e7      	b.n	8011cf8 <HAL_DMA_IRQHandler+0x70c>
 8011d28:	2380      	movs	r3, #128	; 0x80
 8011d2a:	029b      	lsls	r3, r3, #10
 8011d2c:	e7e4      	b.n	8011cf8 <HAL_DMA_IRQHandler+0x70c>
 8011d2e:	2380      	movs	r3, #128	; 0x80
 8011d30:	039b      	lsls	r3, r3, #14
 8011d32:	e7e1      	b.n	8011cf8 <HAL_DMA_IRQHandler+0x70c>
 8011d34:	2380      	movs	r3, #128	; 0x80
 8011d36:	049b      	lsls	r3, r3, #18
 8011d38:	e7de      	b.n	8011cf8 <HAL_DMA_IRQHandler+0x70c>
 8011d3a:	2302      	movs	r3, #2
 8011d3c:	e7dc      	b.n	8011cf8 <HAL_DMA_IRQHandler+0x70c>
 8011d3e:	2320      	movs	r3, #32
 8011d40:	e7da      	b.n	8011cf8 <HAL_DMA_IRQHandler+0x70c>
 8011d42:	2380      	movs	r3, #128	; 0x80
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	e7d7      	b.n	8011cf8 <HAL_DMA_IRQHandler+0x70c>
 8011d48:	4a46      	ldr	r2, [pc, #280]	; (8011e64 <HAL_DMA_IRQHandler+0x878>)
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	d027      	beq.n	8011d9e <HAL_DMA_IRQHandler+0x7b2>
 8011d4e:	4a46      	ldr	r2, [pc, #280]	; (8011e68 <HAL_DMA_IRQHandler+0x87c>)
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d028      	beq.n	8011da6 <HAL_DMA_IRQHandler+0x7ba>
 8011d54:	4a45      	ldr	r2, [pc, #276]	; (8011e6c <HAL_DMA_IRQHandler+0x880>)
 8011d56:	4293      	cmp	r3, r2
 8011d58:	d027      	beq.n	8011daa <HAL_DMA_IRQHandler+0x7be>
 8011d5a:	4a45      	ldr	r2, [pc, #276]	; (8011e70 <HAL_DMA_IRQHandler+0x884>)
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	d027      	beq.n	8011db0 <HAL_DMA_IRQHandler+0x7c4>
 8011d60:	4a44      	ldr	r2, [pc, #272]	; (8011e74 <HAL_DMA_IRQHandler+0x888>)
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d027      	beq.n	8011db6 <HAL_DMA_IRQHandler+0x7ca>
 8011d66:	4a44      	ldr	r2, [pc, #272]	; (8011e78 <HAL_DMA_IRQHandler+0x88c>)
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	d027      	beq.n	8011dbc <HAL_DMA_IRQHandler+0x7d0>
 8011d6c:	4a3c      	ldr	r2, [pc, #240]	; (8011e60 <HAL_DMA_IRQHandler+0x874>)
 8011d6e:	4293      	cmp	r3, r2
 8011d70:	d027      	beq.n	8011dc2 <HAL_DMA_IRQHandler+0x7d6>
 8011d72:	4a42      	ldr	r2, [pc, #264]	; (8011e7c <HAL_DMA_IRQHandler+0x890>)
 8011d74:	4293      	cmp	r3, r2
 8011d76:	d027      	beq.n	8011dc8 <HAL_DMA_IRQHandler+0x7dc>
 8011d78:	4a41      	ldr	r2, [pc, #260]	; (8011e80 <HAL_DMA_IRQHandler+0x894>)
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	d026      	beq.n	8011dcc <HAL_DMA_IRQHandler+0x7e0>
 8011d7e:	4a41      	ldr	r2, [pc, #260]	; (8011e84 <HAL_DMA_IRQHandler+0x898>)
 8011d80:	4293      	cmp	r3, r2
 8011d82:	d025      	beq.n	8011dd0 <HAL_DMA_IRQHandler+0x7e4>
 8011d84:	4a40      	ldr	r2, [pc, #256]	; (8011e88 <HAL_DMA_IRQHandler+0x89c>)
 8011d86:	4694      	mov	ip, r2
 8011d88:	4463      	add	r3, ip
 8011d8a:	425a      	negs	r2, r3
 8011d8c:	4153      	adcs	r3, r2
 8011d8e:	425b      	negs	r3, r3
 8011d90:	4a3e      	ldr	r2, [pc, #248]	; (8011e8c <HAL_DMA_IRQHandler+0x8a0>)
 8011d92:	4013      	ands	r3, r2
 8011d94:	2280      	movs	r2, #128	; 0x80
 8011d96:	0292      	lsls	r2, r2, #10
 8011d98:	4694      	mov	ip, r2
 8011d9a:	4463      	add	r3, ip
 8011d9c:	e000      	b.n	8011da0 <HAL_DMA_IRQHandler+0x7b4>
 8011d9e:	2302      	movs	r3, #2
 8011da0:	4a3c      	ldr	r2, [pc, #240]	; (8011e94 <HAL_DMA_IRQHandler+0x8a8>)
 8011da2:	6053      	str	r3, [r2, #4]
 8011da4:	e7aa      	b.n	8011cfc <HAL_DMA_IRQHandler+0x710>
 8011da6:	2320      	movs	r3, #32
 8011da8:	e7fa      	b.n	8011da0 <HAL_DMA_IRQHandler+0x7b4>
 8011daa:	2380      	movs	r3, #128	; 0x80
 8011dac:	009b      	lsls	r3, r3, #2
 8011dae:	e7f7      	b.n	8011da0 <HAL_DMA_IRQHandler+0x7b4>
 8011db0:	2380      	movs	r3, #128	; 0x80
 8011db2:	019b      	lsls	r3, r3, #6
 8011db4:	e7f4      	b.n	8011da0 <HAL_DMA_IRQHandler+0x7b4>
 8011db6:	2380      	movs	r3, #128	; 0x80
 8011db8:	029b      	lsls	r3, r3, #10
 8011dba:	e7f1      	b.n	8011da0 <HAL_DMA_IRQHandler+0x7b4>
 8011dbc:	2380      	movs	r3, #128	; 0x80
 8011dbe:	039b      	lsls	r3, r3, #14
 8011dc0:	e7ee      	b.n	8011da0 <HAL_DMA_IRQHandler+0x7b4>
 8011dc2:	2380      	movs	r3, #128	; 0x80
 8011dc4:	049b      	lsls	r3, r3, #18
 8011dc6:	e7eb      	b.n	8011da0 <HAL_DMA_IRQHandler+0x7b4>
 8011dc8:	2302      	movs	r3, #2
 8011dca:	e7e9      	b.n	8011da0 <HAL_DMA_IRQHandler+0x7b4>
 8011dcc:	2320      	movs	r3, #32
 8011dce:	e7e7      	b.n	8011da0 <HAL_DMA_IRQHandler+0x7b4>
 8011dd0:	2380      	movs	r3, #128	; 0x80
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	e7e4      	b.n	8011da0 <HAL_DMA_IRQHandler+0x7b4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011dd6:	6821      	ldr	r1, [r4, #0]
 8011dd8:	4b2e      	ldr	r3, [pc, #184]	; (8011e94 <HAL_DMA_IRQHandler+0x8a8>)
 8011dda:	6818      	ldr	r0, [r3, #0]
 8011ddc:	4a21      	ldr	r2, [pc, #132]	; (8011e64 <HAL_DMA_IRQHandler+0x878>)
 8011dde:	4291      	cmp	r1, r2
 8011de0:	d100      	bne.n	8011de4 <HAL_DMA_IRQHandler+0x7f8>
 8011de2:	e76a      	b.n	8011cba <HAL_DMA_IRQHandler+0x6ce>
 8011de4:	4a20      	ldr	r2, [pc, #128]	; (8011e68 <HAL_DMA_IRQHandler+0x87c>)
 8011de6:	4291      	cmp	r1, r2
 8011de8:	d100      	bne.n	8011dec <HAL_DMA_IRQHandler+0x800>
 8011dea:	e76c      	b.n	8011cc6 <HAL_DMA_IRQHandler+0x6da>
 8011dec:	4a1f      	ldr	r2, [pc, #124]	; (8011e6c <HAL_DMA_IRQHandler+0x880>)
 8011dee:	4291      	cmp	r1, r2
 8011df0:	d100      	bne.n	8011df4 <HAL_DMA_IRQHandler+0x808>
 8011df2:	e76a      	b.n	8011cca <HAL_DMA_IRQHandler+0x6de>
 8011df4:	4a1e      	ldr	r2, [pc, #120]	; (8011e70 <HAL_DMA_IRQHandler+0x884>)
 8011df6:	4291      	cmp	r1, r2
 8011df8:	d100      	bne.n	8011dfc <HAL_DMA_IRQHandler+0x810>
 8011dfa:	e769      	b.n	8011cd0 <HAL_DMA_IRQHandler+0x6e4>
 8011dfc:	4b1d      	ldr	r3, [pc, #116]	; (8011e74 <HAL_DMA_IRQHandler+0x888>)
 8011dfe:	4299      	cmp	r1, r3
 8011e00:	d100      	bne.n	8011e04 <HAL_DMA_IRQHandler+0x818>
 8011e02:	e768      	b.n	8011cd6 <HAL_DMA_IRQHandler+0x6ea>
 8011e04:	4b1c      	ldr	r3, [pc, #112]	; (8011e78 <HAL_DMA_IRQHandler+0x88c>)
 8011e06:	4299      	cmp	r1, r3
 8011e08:	d100      	bne.n	8011e0c <HAL_DMA_IRQHandler+0x820>
 8011e0a:	e767      	b.n	8011cdc <HAL_DMA_IRQHandler+0x6f0>
 8011e0c:	4b14      	ldr	r3, [pc, #80]	; (8011e60 <HAL_DMA_IRQHandler+0x874>)
 8011e0e:	4299      	cmp	r1, r3
 8011e10:	d100      	bne.n	8011e14 <HAL_DMA_IRQHandler+0x828>
 8011e12:	e766      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x6f6>
 8011e14:	4b19      	ldr	r3, [pc, #100]	; (8011e7c <HAL_DMA_IRQHandler+0x890>)
 8011e16:	4299      	cmp	r1, r3
 8011e18:	d100      	bne.n	8011e1c <HAL_DMA_IRQHandler+0x830>
 8011e1a:	e765      	b.n	8011ce8 <HAL_DMA_IRQHandler+0x6fc>
 8011e1c:	4b18      	ldr	r3, [pc, #96]	; (8011e80 <HAL_DMA_IRQHandler+0x894>)
 8011e1e:	4299      	cmp	r1, r3
 8011e20:	d100      	bne.n	8011e24 <HAL_DMA_IRQHandler+0x838>
 8011e22:	e763      	b.n	8011cec <HAL_DMA_IRQHandler+0x700>
 8011e24:	4b17      	ldr	r3, [pc, #92]	; (8011e84 <HAL_DMA_IRQHandler+0x898>)
 8011e26:	4299      	cmp	r1, r3
 8011e28:	d100      	bne.n	8011e2c <HAL_DMA_IRQHandler+0x840>
 8011e2a:	e761      	b.n	8011cf0 <HAL_DMA_IRQHandler+0x704>
 8011e2c:	4b16      	ldr	r3, [pc, #88]	; (8011e88 <HAL_DMA_IRQHandler+0x89c>)
 8011e2e:	18ca      	adds	r2, r1, r3
 8011e30:	4253      	negs	r3, r2
 8011e32:	415a      	adcs	r2, r3
 8011e34:	4252      	negs	r2, r2
 8011e36:	4b15      	ldr	r3, [pc, #84]	; (8011e8c <HAL_DMA_IRQHandler+0x8a0>)
 8011e38:	4013      	ands	r3, r2
 8011e3a:	2280      	movs	r2, #128	; 0x80
 8011e3c:	0292      	lsls	r2, r2, #10
 8011e3e:	4694      	mov	ip, r2
 8011e40:	4463      	add	r3, ip
 8011e42:	e73b      	b.n	8011cbc <HAL_DMA_IRQHandler+0x6d0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	0712      	lsls	r2, r2, #28
 8011e48:	d500      	bpl.n	8011e4c <HAL_DMA_IRQHandler+0x860>
 8011e4a:	e4d2      	b.n	80117f2 <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011e4c:	6823      	ldr	r3, [r4, #0]
 8011e4e:	e482      	b.n	8011756 <HAL_DMA_IRQHandler+0x16a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011e50:	681a      	ldr	r2, [r3, #0]
 8011e52:	0712      	lsls	r2, r2, #28
 8011e54:	d500      	bpl.n	8011e58 <HAL_DMA_IRQHandler+0x86c>
 8011e56:	e4cc      	b.n	80117f2 <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011e58:	6823      	ldr	r3, [r4, #0]
 8011e5a:	f7ff fbfe 	bl	801165a <HAL_DMA_IRQHandler+0x6e>
 8011e5e:	46c0      	nop			; (mov r8, r8)
 8011e60:	40020080 	.word	0x40020080
 8011e64:	40020008 	.word	0x40020008
 8011e68:	4002001c 	.word	0x4002001c
 8011e6c:	40020030 	.word	0x40020030
 8011e70:	40020044 	.word	0x40020044
 8011e74:	40020058 	.word	0x40020058
 8011e78:	4002006c 	.word	0x4002006c
 8011e7c:	40020408 	.word	0x40020408
 8011e80:	4002041c 	.word	0x4002041c
 8011e84:	40020430 	.word	0x40020430
 8011e88:	bffdfbbc 	.word	0xbffdfbbc
 8011e8c:	fffe2000 	.word	0xfffe2000
 8011e90:	40020400 	.word	0x40020400
 8011e94:	40020000 	.word	0x40020000

08011e98 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011e98:	4b0a      	ldr	r3, [pc, #40]	; (8011ec4 <FLASH_SetErrorCode+0x2c>)
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	06db      	lsls	r3, r3, #27
 8011e9e:	d504      	bpl.n	8011eaa <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011ea0:	4a09      	ldr	r2, [pc, #36]	; (8011ec8 <FLASH_SetErrorCode+0x30>)
 8011ea2:	69d3      	ldr	r3, [r2, #28]
 8011ea4:	2102      	movs	r1, #2
 8011ea6:	430b      	orrs	r3, r1
 8011ea8:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011eaa:	4b06      	ldr	r3, [pc, #24]	; (8011ec4 <FLASH_SetErrorCode+0x2c>)
 8011eac:	68db      	ldr	r3, [r3, #12]
 8011eae:	075b      	lsls	r3, r3, #29
 8011eb0:	d504      	bpl.n	8011ebc <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011eb2:	4a05      	ldr	r2, [pc, #20]	; (8011ec8 <FLASH_SetErrorCode+0x30>)
 8011eb4:	69d3      	ldr	r3, [r2, #28]
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	430b      	orrs	r3, r1
 8011eba:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011ebc:	4b01      	ldr	r3, [pc, #4]	; (8011ec4 <FLASH_SetErrorCode+0x2c>)
 8011ebe:	2214      	movs	r2, #20
 8011ec0:	60da      	str	r2, [r3, #12]
}  
 8011ec2:	4770      	bx	lr
 8011ec4:	40022000 	.word	0x40022000
 8011ec8:	200071d8 	.word	0x200071d8

08011ecc <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011ecc:	4b06      	ldr	r3, [pc, #24]	; (8011ee8 <HAL_FLASH_Unlock+0x1c>)
 8011ece:	691b      	ldr	r3, [r3, #16]
 8011ed0:	061b      	lsls	r3, r3, #24
 8011ed2:	d506      	bpl.n	8011ee2 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011ed4:	4b04      	ldr	r3, [pc, #16]	; (8011ee8 <HAL_FLASH_Unlock+0x1c>)
 8011ed6:	4a05      	ldr	r2, [pc, #20]	; (8011eec <HAL_FLASH_Unlock+0x20>)
 8011ed8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011eda:	4a05      	ldr	r2, [pc, #20]	; (8011ef0 <HAL_FLASH_Unlock+0x24>)
 8011edc:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011ede:	2000      	movs	r0, #0
}
 8011ee0:	4770      	bx	lr
    return HAL_ERROR;
 8011ee2:	2001      	movs	r0, #1
 8011ee4:	e7fc      	b.n	8011ee0 <HAL_FLASH_Unlock+0x14>
 8011ee6:	46c0      	nop			; (mov r8, r8)
 8011ee8:	40022000 	.word	0x40022000
 8011eec:	45670123 	.word	0x45670123
 8011ef0:	cdef89ab 	.word	0xcdef89ab

08011ef4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011ef4:	4a03      	ldr	r2, [pc, #12]	; (8011f04 <HAL_FLASH_Lock+0x10>)
 8011ef6:	6913      	ldr	r3, [r2, #16]
 8011ef8:	2180      	movs	r1, #128	; 0x80
 8011efa:	430b      	orrs	r3, r1
 8011efc:	6113      	str	r3, [r2, #16]
}
 8011efe:	2000      	movs	r0, #0
 8011f00:	4770      	bx	lr
 8011f02:	46c0      	nop			; (mov r8, r8)
 8011f04:	40022000 	.word	0x40022000

08011f08 <FLASH_WaitForLastOperation>:
{
 8011f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f0a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011f0c:	f7ff f91e 	bl	801114c <HAL_GetTick>
 8011f10:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011f12:	4e13      	ldr	r6, [pc, #76]	; (8011f60 <FLASH_WaitForLastOperation+0x58>)
 8011f14:	2501      	movs	r5, #1
 8011f16:	68f3      	ldr	r3, [r6, #12]
 8011f18:	421d      	tst	r5, r3
 8011f1a:	d00a      	beq.n	8011f32 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011f1c:	1c63      	adds	r3, r4, #1
 8011f1e:	d0fa      	beq.n	8011f16 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011f20:	2c00      	cmp	r4, #0
 8011f22:	d01b      	beq.n	8011f5c <FLASH_WaitForLastOperation+0x54>
 8011f24:	f7ff f912 	bl	801114c <HAL_GetTick>
 8011f28:	1bc0      	subs	r0, r0, r7
 8011f2a:	42a0      	cmp	r0, r4
 8011f2c:	d9f3      	bls.n	8011f16 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8011f2e:	2003      	movs	r0, #3
 8011f30:	e00f      	b.n	8011f52 <FLASH_WaitForLastOperation+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011f32:	4b0b      	ldr	r3, [pc, #44]	; (8011f60 <FLASH_WaitForLastOperation+0x58>)
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	069b      	lsls	r3, r3, #26
 8011f38:	d502      	bpl.n	8011f40 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011f3a:	4b09      	ldr	r3, [pc, #36]	; (8011f60 <FLASH_WaitForLastOperation+0x58>)
 8011f3c:	2220      	movs	r2, #32
 8011f3e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011f40:	4b07      	ldr	r3, [pc, #28]	; (8011f60 <FLASH_WaitForLastOperation+0x58>)
 8011f42:	68db      	ldr	r3, [r3, #12]
 8011f44:	06db      	lsls	r3, r3, #27
 8011f46:	d405      	bmi.n	8011f54 <FLASH_WaitForLastOperation+0x4c>
 8011f48:	4b05      	ldr	r3, [pc, #20]	; (8011f60 <FLASH_WaitForLastOperation+0x58>)
 8011f4a:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011f4c:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011f4e:	075b      	lsls	r3, r3, #29
 8011f50:	d400      	bmi.n	8011f54 <FLASH_WaitForLastOperation+0x4c>
}
 8011f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FLASH_SetErrorCode();
 8011f54:	f7ff ffa0 	bl	8011e98 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011f58:	2001      	movs	r0, #1
 8011f5a:	e7fa      	b.n	8011f52 <FLASH_WaitForLastOperation+0x4a>
        return HAL_TIMEOUT;
 8011f5c:	2003      	movs	r0, #3
 8011f5e:	e7f8      	b.n	8011f52 <FLASH_WaitForLastOperation+0x4a>
 8011f60:	40022000 	.word	0x40022000

08011f64 <HAL_FLASH_Program>:
{
 8011f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f66:	46de      	mov	lr, fp
 8011f68:	4657      	mov	r7, sl
 8011f6a:	464e      	mov	r6, r9
 8011f6c:	4645      	mov	r5, r8
 8011f6e:	b5e0      	push	{r5, r6, r7, lr}
 8011f70:	b083      	sub	sp, #12
 8011f72:	0004      	movs	r4, r0
 8011f74:	000e      	movs	r6, r1
 8011f76:	9201      	str	r2, [sp, #4]
 8011f78:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011f7a:	4b2a      	ldr	r3, [pc, #168]	; (8012024 <HAL_FLASH_Program+0xc0>)
 8011f7c:	7e1b      	ldrb	r3, [r3, #24]
 8011f7e:	2b01      	cmp	r3, #1
 8011f80:	d04e      	beq.n	8012020 <HAL_FLASH_Program+0xbc>
 8011f82:	4b28      	ldr	r3, [pc, #160]	; (8012024 <HAL_FLASH_Program+0xc0>)
 8011f84:	2201      	movs	r2, #1
 8011f86:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011f88:	4827      	ldr	r0, [pc, #156]	; (8012028 <HAL_FLASH_Program+0xc4>)
 8011f8a:	f7ff ffbd 	bl	8011f08 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d13c      	bne.n	801200c <HAL_FLASH_Program+0xa8>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011f92:	2c01      	cmp	r4, #1
 8011f94:	d010      	beq.n	8011fb8 <HAL_FLASH_Program+0x54>
      nbiterations = 4;
 8011f96:	3c02      	subs	r4, #2
 8011f98:	4260      	negs	r0, r4
 8011f9a:	4144      	adcs	r4, r0
 8011f9c:	4264      	negs	r4, r4
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	439c      	bics	r4, r3
 8011fa2:	46a0      	mov	r8, r4
 8011fa4:	3303      	adds	r3, #3
 8011fa6:	469c      	mov	ip, r3
 8011fa8:	44e0      	add	r8, ip
 8011faa:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011fac:	4b1d      	ldr	r3, [pc, #116]	; (8012024 <HAL_FLASH_Program+0xc0>)
 8011fae:	469b      	mov	fp, r3
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011fb4:	4c1d      	ldr	r4, [pc, #116]	; (801202c <HAL_FLASH_Program+0xc8>)
 8011fb6:	e021      	b.n	8011ffc <HAL_FLASH_Program+0x98>
      nbiterations = 1;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	4698      	mov	r8, r3
 8011fbc:	e7f5      	b.n	8011faa <HAL_FLASH_Program+0x46>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011fbe:	2220      	movs	r2, #32
 8011fc0:	1ad2      	subs	r2, r2, r3
 8011fc2:	4649      	mov	r1, r9
 8011fc4:	4091      	lsls	r1, r2
 8011fc6:	000a      	movs	r2, r1
 8011fc8:	9901      	ldr	r1, [sp, #4]
 8011fca:	40d9      	lsrs	r1, r3
 8011fcc:	000b      	movs	r3, r1
 8011fce:	4313      	orrs	r3, r2
 8011fd0:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011fd2:	465a      	mov	r2, fp
 8011fd4:	4651      	mov	r1, sl
 8011fd6:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011fd8:	6922      	ldr	r2, [r4, #16]
 8011fda:	2701      	movs	r7, #1
 8011fdc:	433a      	orrs	r2, r7
 8011fde:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8011fe0:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011fe2:	4811      	ldr	r0, [pc, #68]	; (8012028 <HAL_FLASH_Program+0xc4>)
 8011fe4:	f7ff ff90 	bl	8011f08 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011fe8:	6923      	ldr	r3, [r4, #16]
 8011fea:	43bb      	bics	r3, r7
 8011fec:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	d10c      	bne.n	801200c <HAL_FLASH_Program+0xa8>
    for (index = 0; index < nbiterations; index++)
 8011ff2:	3501      	adds	r5, #1
 8011ff4:	3602      	adds	r6, #2
 8011ff6:	b2eb      	uxtb	r3, r5
 8011ff8:	4598      	cmp	r8, r3
 8011ffa:	d907      	bls.n	801200c <HAL_FLASH_Program+0xa8>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011ffc:	012b      	lsls	r3, r5, #4
 8011ffe:	2220      	movs	r2, #32
 8012000:	4252      	negs	r2, r2
 8012002:	189a      	adds	r2, r3, r2
 8012004:	d4db      	bmi.n	8011fbe <HAL_FLASH_Program+0x5a>
 8012006:	464b      	mov	r3, r9
 8012008:	40d3      	lsrs	r3, r2
 801200a:	e7e1      	b.n	8011fd0 <HAL_FLASH_Program+0x6c>
  __HAL_UNLOCK(&pFlash);
 801200c:	4b05      	ldr	r3, [pc, #20]	; (8012024 <HAL_FLASH_Program+0xc0>)
 801200e:	2200      	movs	r2, #0
 8012010:	761a      	strb	r2, [r3, #24]
}
 8012012:	b003      	add	sp, #12
 8012014:	bcf0      	pop	{r4, r5, r6, r7}
 8012016:	46bb      	mov	fp, r7
 8012018:	46b2      	mov	sl, r6
 801201a:	46a9      	mov	r9, r5
 801201c:	46a0      	mov	r8, r4
 801201e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8012020:	2002      	movs	r0, #2
 8012022:	e7f6      	b.n	8012012 <HAL_FLASH_Program+0xae>
 8012024:	200071d8 	.word	0x200071d8
 8012028:	0000c350 	.word	0x0000c350
 801202c:	40022000 	.word	0x40022000

08012030 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012030:	4b06      	ldr	r3, [pc, #24]	; (801204c <FLASH_MassErase+0x1c>)
 8012032:	2200      	movs	r2, #0
 8012034:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8012036:	4b06      	ldr	r3, [pc, #24]	; (8012050 <FLASH_MassErase+0x20>)
 8012038:	691a      	ldr	r2, [r3, #16]
 801203a:	2104      	movs	r1, #4
 801203c:	430a      	orrs	r2, r1
 801203e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012040:	691a      	ldr	r2, [r3, #16]
 8012042:	313c      	adds	r1, #60	; 0x3c
 8012044:	430a      	orrs	r2, r1
 8012046:	611a      	str	r2, [r3, #16]
}
 8012048:	4770      	bx	lr
 801204a:	46c0      	nop			; (mov r8, r8)
 801204c:	200071d8 	.word	0x200071d8
 8012050:	40022000 	.word	0x40022000

08012054 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012054:	4b06      	ldr	r3, [pc, #24]	; (8012070 <FLASH_PageErase+0x1c>)
 8012056:	2200      	movs	r2, #0
 8012058:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801205a:	4b06      	ldr	r3, [pc, #24]	; (8012074 <FLASH_PageErase+0x20>)
 801205c:	691a      	ldr	r2, [r3, #16]
 801205e:	2102      	movs	r1, #2
 8012060:	430a      	orrs	r2, r1
 8012062:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8012064:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012066:	691a      	ldr	r2, [r3, #16]
 8012068:	313e      	adds	r1, #62	; 0x3e
 801206a:	430a      	orrs	r2, r1
 801206c:	611a      	str	r2, [r3, #16]
}
 801206e:	4770      	bx	lr
 8012070:	200071d8 	.word	0x200071d8
 8012074:	40022000 	.word	0x40022000

08012078 <HAL_FLASHEx_Erase>:
{
 8012078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801207a:	46ce      	mov	lr, r9
 801207c:	4647      	mov	r7, r8
 801207e:	b580      	push	{r7, lr}
 8012080:	0005      	movs	r5, r0
 8012082:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8012084:	4b2a      	ldr	r3, [pc, #168]	; (8012130 <HAL_FLASHEx_Erase+0xb8>)
 8012086:	7e1b      	ldrb	r3, [r3, #24]
 8012088:	2b01      	cmp	r3, #1
 801208a:	d04e      	beq.n	801212a <HAL_FLASHEx_Erase+0xb2>
 801208c:	4b28      	ldr	r3, [pc, #160]	; (8012130 <HAL_FLASHEx_Erase+0xb8>)
 801208e:	2201      	movs	r2, #1
 8012090:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8012092:	6803      	ldr	r3, [r0, #0]
 8012094:	2b01      	cmp	r3, #1
 8012096:	d02a      	beq.n	80120ee <HAL_FLASHEx_Erase+0x76>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8012098:	4826      	ldr	r0, [pc, #152]	; (8012134 <HAL_FLASHEx_Erase+0xbc>)
 801209a:	f7ff ff35 	bl	8011f08 <FLASH_WaitForLastOperation>
 801209e:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 80120a0:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d12a      	bne.n	80120fc <HAL_FLASHEx_Erase+0x84>
        *PageError = 0xFFFFFFFF;
 80120a6:	3b01      	subs	r3, #1
 80120a8:	4642      	mov	r2, r8
 80120aa:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 80120ac:	686c      	ldr	r4, [r5, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80120ae:	68ab      	ldr	r3, [r5, #8]
 80120b0:	02db      	lsls	r3, r3, #11
 80120b2:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 80120b4:	429c      	cmp	r4, r3
 80120b6:	d236      	bcs.n	8012126 <HAL_FLASHEx_Erase+0xae>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80120b8:	4b1e      	ldr	r3, [pc, #120]	; (8012134 <HAL_FLASHEx_Erase+0xbc>)
 80120ba:	4699      	mov	r9, r3
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80120bc:	4e1e      	ldr	r6, [pc, #120]	; (8012138 <HAL_FLASHEx_Erase+0xc0>)
 80120be:	2702      	movs	r7, #2
          FLASH_PageErase(address);
 80120c0:	0020      	movs	r0, r4
 80120c2:	f7ff ffc7 	bl	8012054 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80120c6:	4648      	mov	r0, r9
 80120c8:	f7ff ff1e 	bl	8011f08 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80120cc:	6933      	ldr	r3, [r6, #16]
 80120ce:	43bb      	bics	r3, r7
 80120d0:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 80120d2:	2800      	cmp	r0, #0
 80120d4:	d124      	bne.n	8012120 <HAL_FLASHEx_Erase+0xa8>
            address += FLASH_PAGE_SIZE)
 80120d6:	2380      	movs	r3, #128	; 0x80
 80120d8:	011b      	lsls	r3, r3, #4
 80120da:	469c      	mov	ip, r3
 80120dc:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80120de:	68ab      	ldr	r3, [r5, #8]
 80120e0:	02db      	lsls	r3, r3, #11
 80120e2:	686a      	ldr	r2, [r5, #4]
 80120e4:	4694      	mov	ip, r2
 80120e6:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80120e8:	42a3      	cmp	r3, r4
 80120ea:	d8e9      	bhi.n	80120c0 <HAL_FLASHEx_Erase+0x48>
 80120ec:	e006      	b.n	80120fc <HAL_FLASHEx_Erase+0x84>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80120ee:	4811      	ldr	r0, [pc, #68]	; (8012134 <HAL_FLASHEx_Erase+0xbc>)
 80120f0:	f7ff ff0a 	bl	8011f08 <FLASH_WaitForLastOperation>
 80120f4:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 80120f6:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d006      	beq.n	801210a <HAL_FLASHEx_Erase+0x92>
  __HAL_UNLOCK(&pFlash);
 80120fc:	4b0c      	ldr	r3, [pc, #48]	; (8012130 <HAL_FLASHEx_Erase+0xb8>)
 80120fe:	2200      	movs	r2, #0
 8012100:	761a      	strb	r2, [r3, #24]
}
 8012102:	bcc0      	pop	{r6, r7}
 8012104:	46b9      	mov	r9, r7
 8012106:	46b0      	mov	r8, r6
 8012108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 801210a:	f7ff ff91 	bl	8012030 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801210e:	4809      	ldr	r0, [pc, #36]	; (8012134 <HAL_FLASHEx_Erase+0xbc>)
 8012110:	f7ff fefa 	bl	8011f08 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8012114:	4a08      	ldr	r2, [pc, #32]	; (8012138 <HAL_FLASHEx_Erase+0xc0>)
 8012116:	6913      	ldr	r3, [r2, #16]
 8012118:	2104      	movs	r1, #4
 801211a:	438b      	bics	r3, r1
 801211c:	6113      	str	r3, [r2, #16]
 801211e:	e7ed      	b.n	80120fc <HAL_FLASHEx_Erase+0x84>
            *PageError = address;
 8012120:	4643      	mov	r3, r8
 8012122:	601c      	str	r4, [r3, #0]
            break;
 8012124:	e7ea      	b.n	80120fc <HAL_FLASHEx_Erase+0x84>
  HAL_StatusTypeDef status = HAL_ERROR;
 8012126:	2001      	movs	r0, #1
 8012128:	e7e8      	b.n	80120fc <HAL_FLASHEx_Erase+0x84>
  __HAL_LOCK(&pFlash);
 801212a:	2002      	movs	r0, #2
 801212c:	e7e9      	b.n	8012102 <HAL_FLASHEx_Erase+0x8a>
 801212e:	46c0      	nop			; (mov r8, r8)
 8012130:	200071d8 	.word	0x200071d8
 8012134:	0000c350 	.word	0x0000c350
 8012138:	40022000 	.word	0x40022000

0801213c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 801213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801213e:	46de      	mov	lr, fp
 8012140:	4657      	mov	r7, sl
 8012142:	464e      	mov	r6, r9
 8012144:	4645      	mov	r5, r8
 8012146:	b5e0      	push	{r5, r6, r7, lr}
 8012148:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 801214a:	680a      	ldr	r2, [r1, #0]
 801214c:	2a00      	cmp	r2, #0
 801214e:	d100      	bne.n	8012152 <HAL_GPIO_Init+0x16>
 8012150:	e0c9      	b.n	80122e6 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00;
 8012152:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8012154:	2401      	movs	r4, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8012156:	2510      	movs	r5, #16
 8012158:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801215a:	2580      	movs	r5, #128	; 0x80
 801215c:	056d      	lsls	r5, r5, #21
 801215e:	46a8      	mov	r8, r5
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8012160:	4d64      	ldr	r5, [pc, #400]	; (80122f4 <HAL_GPIO_Init+0x1b8>)
 8012162:	1945      	adds	r5, r0, r5
 8012164:	1e6e      	subs	r6, r5, #1
 8012166:	41b5      	sbcs	r5, r6
 8012168:	3504      	adds	r5, #4
 801216a:	46a9      	mov	r9, r5
 801216c:	e044      	b.n	80121f8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 801216e:	08da      	lsrs	r2, r3, #3
 8012170:	0092      	lsls	r2, r2, #2
 8012172:	1882      	adds	r2, r0, r2
 8012174:	9201      	str	r2, [sp, #4]
 8012176:	6a15      	ldr	r5, [r2, #32]
 8012178:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801217a:	2507      	movs	r5, #7
 801217c:	401d      	ands	r5, r3
 801217e:	00ad      	lsls	r5, r5, #2
 8012180:	270f      	movs	r7, #15
 8012182:	40af      	lsls	r7, r5
 8012184:	46bb      	mov	fp, r7
 8012186:	4657      	mov	r7, sl
 8012188:	465a      	mov	r2, fp
 801218a:	4397      	bics	r7, r2
 801218c:	46ba      	mov	sl, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 801218e:	690f      	ldr	r7, [r1, #16]
 8012190:	40af      	lsls	r7, r5
 8012192:	003d      	movs	r5, r7
 8012194:	4652      	mov	r2, sl
 8012196:	4315      	orrs	r5, r2
        GPIOx->AFR[position >> 3] = temp;
 8012198:	9a01      	ldr	r2, [sp, #4]
 801219a:	6215      	str	r5, [r2, #32]
 801219c:	e037      	b.n	801220e <HAL_GPIO_Init+0xd2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801219e:	2500      	movs	r5, #0
 80121a0:	465f      	mov	r7, fp
 80121a2:	40bd      	lsls	r5, r7
 80121a4:	4657      	mov	r7, sl
 80121a6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80121a8:	6095      	str	r5, [r2, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80121aa:	4a53      	ldr	r2, [pc, #332]	; (80122f8 <HAL_GPIO_Init+0x1bc>)
 80121ac:	6812      	ldr	r2, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80121ae:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80121b0:	684f      	ldr	r7, [r1, #4]
 80121b2:	03ff      	lsls	r7, r7, #15
 80121b4:	d500      	bpl.n	80121b8 <HAL_GPIO_Init+0x7c>
 80121b6:	e08e      	b.n	80122d6 <HAL_GPIO_Init+0x19a>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80121b8:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 80121ba:	4f4f      	ldr	r7, [pc, #316]	; (80122f8 <HAL_GPIO_Init+0x1bc>)
 80121bc:	603a      	str	r2, [r7, #0]

        temp = EXTI->EMR;
 80121be:	687a      	ldr	r2, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80121c0:	684f      	ldr	r7, [r1, #4]
 80121c2:	03bf      	lsls	r7, r7, #14
 80121c4:	d500      	bpl.n	80121c8 <HAL_GPIO_Init+0x8c>
 80121c6:	e088      	b.n	80122da <HAL_GPIO_Init+0x19e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80121c8:	402a      	ands	r2, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80121ca:	4f4b      	ldr	r7, [pc, #300]	; (80122f8 <HAL_GPIO_Init+0x1bc>)
 80121cc:	607a      	str	r2, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80121ce:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80121d0:	684f      	ldr	r7, [r1, #4]
 80121d2:	02ff      	lsls	r7, r7, #11
 80121d4:	d500      	bpl.n	80121d8 <HAL_GPIO_Init+0x9c>
 80121d6:	e082      	b.n	80122de <HAL_GPIO_Init+0x1a2>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80121d8:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 80121da:	4f47      	ldr	r7, [pc, #284]	; (80122f8 <HAL_GPIO_Init+0x1bc>)
 80121dc:	60ba      	str	r2, [r7, #8]

        temp = EXTI->FTSR;
 80121de:	68fa      	ldr	r2, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80121e0:	684f      	ldr	r7, [r1, #4]
 80121e2:	02bf      	lsls	r7, r7, #10
 80121e4:	d47d      	bmi.n	80122e2 <HAL_GPIO_Init+0x1a6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80121e6:	402a      	ands	r2, r5
 80121e8:	0016      	movs	r6, r2
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 80121ea:	4a43      	ldr	r2, [pc, #268]	; (80122f8 <HAL_GPIO_Init+0x1bc>)
 80121ec:	60d6      	str	r6, [r2, #12]
      }
    }
    
    position++;
 80121ee:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 80121f0:	680a      	ldr	r2, [r1, #0]
 80121f2:	0015      	movs	r5, r2
 80121f4:	40dd      	lsrs	r5, r3
 80121f6:	d076      	beq.n	80122e6 <HAL_GPIO_Init+0x1aa>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80121f8:	0025      	movs	r5, r4
 80121fa:	409d      	lsls	r5, r3
 80121fc:	0016      	movs	r6, r2
 80121fe:	402e      	ands	r6, r5
    if(iocurrent)
 8012200:	422a      	tst	r2, r5
 8012202:	d0f4      	beq.n	80121ee <HAL_GPIO_Init+0xb2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8012204:	684a      	ldr	r2, [r1, #4]
 8012206:	4665      	mov	r5, ip
 8012208:	43aa      	bics	r2, r5
 801220a:	2a02      	cmp	r2, #2
 801220c:	d0af      	beq.n	801216e <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 801220e:	6802      	ldr	r2, [r0, #0]
 8012210:	4693      	mov	fp, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8012212:	005d      	lsls	r5, r3, #1
 8012214:	2203      	movs	r2, #3
 8012216:	40aa      	lsls	r2, r5
 8012218:	43d7      	mvns	r7, r2
 801221a:	46ba      	mov	sl, r7
 801221c:	465f      	mov	r7, fp
 801221e:	4397      	bics	r7, r2
 8012220:	46bb      	mov	fp, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8012222:	684a      	ldr	r2, [r1, #4]
 8012224:	2703      	movs	r7, #3
 8012226:	403a      	ands	r2, r7
 8012228:	40aa      	lsls	r2, r5
 801222a:	465f      	mov	r7, fp
 801222c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 801222e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012230:	684a      	ldr	r2, [r1, #4]
 8012232:	4667      	mov	r7, ip
 8012234:	43ba      	bics	r2, r7
 8012236:	3a01      	subs	r2, #1
 8012238:	2a01      	cmp	r2, #1
 801223a:	d812      	bhi.n	8012262 <HAL_GPIO_Init+0x126>
        temp = GPIOx->OSPEEDR; 
 801223c:	6882      	ldr	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801223e:	4657      	mov	r7, sl
 8012240:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8012242:	68ca      	ldr	r2, [r1, #12]
 8012244:	40aa      	lsls	r2, r5
 8012246:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 8012248:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 801224a:	6842      	ldr	r2, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 801224c:	0027      	movs	r7, r4
 801224e:	409f      	lsls	r7, r3
 8012250:	43ba      	bics	r2, r7
 8012252:	4693      	mov	fp, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8012254:	684a      	ldr	r2, [r1, #4]
 8012256:	0912      	lsrs	r2, r2, #4
 8012258:	4022      	ands	r2, r4
 801225a:	409a      	lsls	r2, r3
 801225c:	465f      	mov	r7, fp
 801225e:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 8012260:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8012262:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8012264:	4657      	mov	r7, sl
 8012266:	4017      	ands	r7, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8012268:	688a      	ldr	r2, [r1, #8]
 801226a:	40aa      	lsls	r2, r5
 801226c:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 801226e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8012270:	684a      	ldr	r2, [r1, #4]
 8012272:	4645      	mov	r5, r8
 8012274:	422a      	tst	r2, r5
 8012276:	d0ba      	beq.n	80121ee <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012278:	4a20      	ldr	r2, [pc, #128]	; (80122fc <HAL_GPIO_Init+0x1c0>)
 801227a:	6995      	ldr	r5, [r2, #24]
 801227c:	4325      	orrs	r5, r4
 801227e:	6195      	str	r5, [r2, #24]
 8012280:	6992      	ldr	r2, [r2, #24]
 8012282:	4022      	ands	r2, r4
 8012284:	9203      	str	r2, [sp, #12]
 8012286:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8012288:	089a      	lsrs	r2, r3, #2
 801228a:	0092      	lsls	r2, r2, #2
 801228c:	4d1c      	ldr	r5, [pc, #112]	; (8012300 <HAL_GPIO_Init+0x1c4>)
 801228e:	46aa      	mov	sl, r5
 8012290:	4452      	add	r2, sl
 8012292:	6895      	ldr	r5, [r2, #8]
 8012294:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8012296:	2503      	movs	r5, #3
 8012298:	401d      	ands	r5, r3
 801229a:	00ad      	lsls	r5, r5, #2
 801229c:	46ab      	mov	fp, r5
 801229e:	250f      	movs	r5, #15
 80122a0:	465f      	mov	r7, fp
 80122a2:	40bd      	lsls	r5, r7
 80122a4:	4657      	mov	r7, sl
 80122a6:	43af      	bics	r7, r5
 80122a8:	46ba      	mov	sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80122aa:	2590      	movs	r5, #144	; 0x90
 80122ac:	05ed      	lsls	r5, r5, #23
 80122ae:	42a8      	cmp	r0, r5
 80122b0:	d100      	bne.n	80122b4 <HAL_GPIO_Init+0x178>
 80122b2:	e774      	b.n	801219e <HAL_GPIO_Init+0x62>
 80122b4:	4d13      	ldr	r5, [pc, #76]	; (8012304 <HAL_GPIO_Init+0x1c8>)
 80122b6:	42a8      	cmp	r0, r5
 80122b8:	d007      	beq.n	80122ca <HAL_GPIO_Init+0x18e>
 80122ba:	4d13      	ldr	r5, [pc, #76]	; (8012308 <HAL_GPIO_Init+0x1cc>)
 80122bc:	42a8      	cmp	r0, r5
 80122be:	d006      	beq.n	80122ce <HAL_GPIO_Init+0x192>
 80122c0:	4d12      	ldr	r5, [pc, #72]	; (801230c <HAL_GPIO_Init+0x1d0>)
 80122c2:	42a8      	cmp	r0, r5
 80122c4:	d005      	beq.n	80122d2 <HAL_GPIO_Init+0x196>
 80122c6:	464d      	mov	r5, r9
 80122c8:	e76a      	b.n	80121a0 <HAL_GPIO_Init+0x64>
 80122ca:	0025      	movs	r5, r4
 80122cc:	e768      	b.n	80121a0 <HAL_GPIO_Init+0x64>
 80122ce:	2502      	movs	r5, #2
 80122d0:	e766      	b.n	80121a0 <HAL_GPIO_Init+0x64>
 80122d2:	2503      	movs	r5, #3
 80122d4:	e764      	b.n	80121a0 <HAL_GPIO_Init+0x64>
          SET_BIT(temp, iocurrent); 
 80122d6:	4332      	orrs	r2, r6
 80122d8:	e76f      	b.n	80121ba <HAL_GPIO_Init+0x7e>
          SET_BIT(temp, iocurrent); 
 80122da:	4332      	orrs	r2, r6
 80122dc:	e775      	b.n	80121ca <HAL_GPIO_Init+0x8e>
          SET_BIT(temp, iocurrent); 
 80122de:	4332      	orrs	r2, r6
 80122e0:	e77b      	b.n	80121da <HAL_GPIO_Init+0x9e>
          SET_BIT(temp, iocurrent); 
 80122e2:	4316      	orrs	r6, r2
 80122e4:	e781      	b.n	80121ea <HAL_GPIO_Init+0xae>
  } 
}
 80122e6:	b005      	add	sp, #20
 80122e8:	bcf0      	pop	{r4, r5, r6, r7}
 80122ea:	46bb      	mov	fp, r7
 80122ec:	46b2      	mov	sl, r6
 80122ee:	46a9      	mov	r9, r5
 80122f0:	46a0      	mov	r8, r4
 80122f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122f4:	b7fff000 	.word	0xb7fff000
 80122f8:	40010400 	.word	0x40010400
 80122fc:	40021000 	.word	0x40021000
 8012300:	40010000 	.word	0x40010000
 8012304:	48000400 	.word	0x48000400
 8012308:	48000800 	.word	0x48000800
 801230c:	48000c00 	.word	0x48000c00

08012310 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012310:	6900      	ldr	r0, [r0, #16]
 8012312:	4008      	ands	r0, r1
 8012314:	1e41      	subs	r1, r0, #1
 8012316:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8012318:	b2c0      	uxtb	r0, r0
  }
 801231a:	4770      	bx	lr

0801231c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801231c:	2a00      	cmp	r2, #0
 801231e:	d001      	beq.n	8012324 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012320:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8012322:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8012324:	6281      	str	r1, [r0, #40]	; 0x28
}
 8012326:	e7fc      	b.n	8012322 <HAL_GPIO_WritePin+0x6>

08012328 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8012328:	6943      	ldr	r3, [r0, #20]
 801232a:	4059      	eors	r1, r3
 801232c:	6141      	str	r1, [r0, #20]
}
 801232e:	4770      	bx	lr

08012330 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8012330:	4770      	bx	lr
	...

08012334 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8012334:	4a03      	ldr	r2, [pc, #12]	; (8012344 <HAL_PWR_EnableBkUpAccess+0x10>)
 8012336:	6811      	ldr	r1, [r2, #0]
 8012338:	2380      	movs	r3, #128	; 0x80
 801233a:	005b      	lsls	r3, r3, #1
 801233c:	430b      	orrs	r3, r1
 801233e:	6013      	str	r3, [r2, #0]
}
 8012340:	4770      	bx	lr
 8012342:	46c0      	nop			; (mov r8, r8)
 8012344:	40007000 	.word	0x40007000

08012348 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801234a:	46c6      	mov	lr, r8
 801234c:	b500      	push	{lr}
 801234e:	b082      	sub	sp, #8
 8012350:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012352:	6803      	ldr	r3, [r0, #0]
 8012354:	07db      	lsls	r3, r3, #31
 8012356:	d538      	bpl.n	80123ca <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8012358:	4bbd      	ldr	r3, [pc, #756]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 801235a:	685a      	ldr	r2, [r3, #4]
 801235c:	230c      	movs	r3, #12
 801235e:	4013      	ands	r3, r2
 8012360:	2b04      	cmp	r3, #4
 8012362:	d02a      	beq.n	80123ba <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8012364:	4bba      	ldr	r3, [pc, #744]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012366:	685a      	ldr	r2, [r3, #4]
 8012368:	230c      	movs	r3, #12
 801236a:	4013      	ands	r3, r2
 801236c:	2b08      	cmp	r3, #8
 801236e:	d108      	bne.n	8012382 <HAL_RCC_OscConfig+0x3a>
 8012370:	4bb7      	ldr	r3, [pc, #732]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	22c0      	movs	r2, #192	; 0xc0
 8012376:	0252      	lsls	r2, r2, #9
 8012378:	4013      	ands	r3, r2
 801237a:	2280      	movs	r2, #128	; 0x80
 801237c:	0252      	lsls	r2, r2, #9
 801237e:	4293      	cmp	r3, r2
 8012380:	d01b      	beq.n	80123ba <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8012382:	4bb3      	ldr	r3, [pc, #716]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012384:	681a      	ldr	r2, [r3, #0]
 8012386:	49b3      	ldr	r1, [pc, #716]	; (8012654 <HAL_RCC_OscConfig+0x30c>)
 8012388:	400a      	ands	r2, r1
 801238a:	601a      	str	r2, [r3, #0]
 801238c:	681a      	ldr	r2, [r3, #0]
 801238e:	49b2      	ldr	r1, [pc, #712]	; (8012658 <HAL_RCC_OscConfig+0x310>)
 8012390:	400a      	ands	r2, r1
 8012392:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012394:	f7fe feda 	bl	801114c <HAL_GetTick>
 8012398:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801239a:	4fad      	ldr	r7, [pc, #692]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 801239c:	2680      	movs	r6, #128	; 0x80
 801239e:	02b6      	lsls	r6, r6, #10
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	4233      	tst	r3, r6
 80123a4:	d039      	beq.n	801241a <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80123a6:	f7fe fed1 	bl	801114c <HAL_GetTick>
 80123aa:	1b40      	subs	r0, r0, r5
 80123ac:	2864      	cmp	r0, #100	; 0x64
 80123ae:	d9f7      	bls.n	80123a0 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 80123b0:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80123b2:	b002      	add	sp, #8
 80123b4:	bc80      	pop	{r7}
 80123b6:	46b8      	mov	r8, r7
 80123b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80123ba:	4ba5      	ldr	r3, [pc, #660]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	039b      	lsls	r3, r3, #14
 80123c0:	d503      	bpl.n	80123ca <HAL_RCC_OscConfig+0x82>
 80123c2:	6863      	ldr	r3, [r4, #4]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d100      	bne.n	80123ca <HAL_RCC_OscConfig+0x82>
 80123c8:	e274      	b.n	80128b4 <HAL_RCC_OscConfig+0x56c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80123ca:	6823      	ldr	r3, [r4, #0]
 80123cc:	079b      	lsls	r3, r3, #30
 80123ce:	d400      	bmi.n	80123d2 <HAL_RCC_OscConfig+0x8a>
 80123d0:	e08d      	b.n	80124ee <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80123d2:	4b9f      	ldr	r3, [pc, #636]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80123d4:	685b      	ldr	r3, [r3, #4]
 80123d6:	220c      	movs	r2, #12
 80123d8:	421a      	tst	r2, r3
 80123da:	d077      	beq.n	80124cc <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80123dc:	4b9c      	ldr	r3, [pc, #624]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80123de:	685a      	ldr	r2, [r3, #4]
 80123e0:	230c      	movs	r3, #12
 80123e2:	4013      	ands	r3, r2
 80123e4:	2b08      	cmp	r3, #8
 80123e6:	d068      	beq.n	80124ba <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80123e8:	68e3      	ldr	r3, [r4, #12]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d100      	bne.n	80123f0 <HAL_RCC_OscConfig+0xa8>
 80123ee:	e0a1      	b.n	8012534 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 80123f0:	4a97      	ldr	r2, [pc, #604]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80123f2:	6813      	ldr	r3, [r2, #0]
 80123f4:	2101      	movs	r1, #1
 80123f6:	430b      	orrs	r3, r1
 80123f8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80123fa:	f7fe fea7 	bl	801114c <HAL_GetTick>
 80123fe:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012400:	4f93      	ldr	r7, [pc, #588]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012402:	2602      	movs	r6, #2
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	421e      	tst	r6, r3
 8012408:	d000      	beq.n	801240c <HAL_RCC_OscConfig+0xc4>
 801240a:	e08a      	b.n	8012522 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801240c:	f7fe fe9e 	bl	801114c <HAL_GetTick>
 8012410:	1b40      	subs	r0, r0, r5
 8012412:	2864      	cmp	r0, #100	; 0x64
 8012414:	d9f6      	bls.n	8012404 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8012416:	2003      	movs	r0, #3
 8012418:	e7cb      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801241a:	6863      	ldr	r3, [r4, #4]
 801241c:	2b01      	cmp	r3, #1
 801241e:	d00b      	beq.n	8012438 <HAL_RCC_OscConfig+0xf0>
 8012420:	2b00      	cmp	r3, #0
 8012422:	d122      	bne.n	801246a <HAL_RCC_OscConfig+0x122>
 8012424:	4b8a      	ldr	r3, [pc, #552]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012426:	681a      	ldr	r2, [r3, #0]
 8012428:	498a      	ldr	r1, [pc, #552]	; (8012654 <HAL_RCC_OscConfig+0x30c>)
 801242a:	400a      	ands	r2, r1
 801242c:	601a      	str	r2, [r3, #0]
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	4989      	ldr	r1, [pc, #548]	; (8012658 <HAL_RCC_OscConfig+0x310>)
 8012432:	400a      	ands	r2, r1
 8012434:	601a      	str	r2, [r3, #0]
 8012436:	e005      	b.n	8012444 <HAL_RCC_OscConfig+0xfc>
 8012438:	4a85      	ldr	r2, [pc, #532]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 801243a:	6811      	ldr	r1, [r2, #0]
 801243c:	2380      	movs	r3, #128	; 0x80
 801243e:	025b      	lsls	r3, r3, #9
 8012440:	430b      	orrs	r3, r1
 8012442:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012444:	6863      	ldr	r3, [r4, #4]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d027      	beq.n	801249a <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 801244a:	f7fe fe7f 	bl	801114c <HAL_GetTick>
 801244e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012450:	4f7f      	ldr	r7, [pc, #508]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012452:	2680      	movs	r6, #128	; 0x80
 8012454:	02b6      	lsls	r6, r6, #10
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	4233      	tst	r3, r6
 801245a:	d1b6      	bne.n	80123ca <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801245c:	f7fe fe76 	bl	801114c <HAL_GetTick>
 8012460:	1b40      	subs	r0, r0, r5
 8012462:	2864      	cmp	r0, #100	; 0x64
 8012464:	d9f7      	bls.n	8012456 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8012466:	2003      	movs	r0, #3
 8012468:	e7a3      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801246a:	2b05      	cmp	r3, #5
 801246c:	d009      	beq.n	8012482 <HAL_RCC_OscConfig+0x13a>
 801246e:	4b78      	ldr	r3, [pc, #480]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012470:	681a      	ldr	r2, [r3, #0]
 8012472:	4978      	ldr	r1, [pc, #480]	; (8012654 <HAL_RCC_OscConfig+0x30c>)
 8012474:	400a      	ands	r2, r1
 8012476:	601a      	str	r2, [r3, #0]
 8012478:	681a      	ldr	r2, [r3, #0]
 801247a:	4977      	ldr	r1, [pc, #476]	; (8012658 <HAL_RCC_OscConfig+0x310>)
 801247c:	400a      	ands	r2, r1
 801247e:	601a      	str	r2, [r3, #0]
 8012480:	e7e0      	b.n	8012444 <HAL_RCC_OscConfig+0xfc>
 8012482:	4b73      	ldr	r3, [pc, #460]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012484:	6819      	ldr	r1, [r3, #0]
 8012486:	2280      	movs	r2, #128	; 0x80
 8012488:	02d2      	lsls	r2, r2, #11
 801248a:	430a      	orrs	r2, r1
 801248c:	601a      	str	r2, [r3, #0]
 801248e:	6819      	ldr	r1, [r3, #0]
 8012490:	2280      	movs	r2, #128	; 0x80
 8012492:	0252      	lsls	r2, r2, #9
 8012494:	430a      	orrs	r2, r1
 8012496:	601a      	str	r2, [r3, #0]
 8012498:	e7d4      	b.n	8012444 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 801249a:	f7fe fe57 	bl	801114c <HAL_GetTick>
 801249e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80124a0:	4f6b      	ldr	r7, [pc, #428]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80124a2:	2680      	movs	r6, #128	; 0x80
 80124a4:	02b6      	lsls	r6, r6, #10
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	4233      	tst	r3, r6
 80124aa:	d08e      	beq.n	80123ca <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80124ac:	f7fe fe4e 	bl	801114c <HAL_GetTick>
 80124b0:	1b40      	subs	r0, r0, r5
 80124b2:	2864      	cmp	r0, #100	; 0x64
 80124b4:	d9f7      	bls.n	80124a6 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 80124b6:	2003      	movs	r0, #3
 80124b8:	e77b      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80124ba:	4b65      	ldr	r3, [pc, #404]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	22c0      	movs	r2, #192	; 0xc0
 80124c0:	0252      	lsls	r2, r2, #9
 80124c2:	4013      	ands	r3, r2
 80124c4:	2280      	movs	r2, #128	; 0x80
 80124c6:	0212      	lsls	r2, r2, #8
 80124c8:	4293      	cmp	r3, r2
 80124ca:	d18d      	bne.n	80123e8 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80124cc:	4b60      	ldr	r3, [pc, #384]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	079b      	lsls	r3, r3, #30
 80124d2:	d504      	bpl.n	80124de <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 80124d4:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80124d6:	68e3      	ldr	r3, [r4, #12]
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d000      	beq.n	80124de <HAL_RCC_OscConfig+0x196>
 80124dc:	e769      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80124de:	495c      	ldr	r1, [pc, #368]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80124e0:	680a      	ldr	r2, [r1, #0]
 80124e2:	6923      	ldr	r3, [r4, #16]
 80124e4:	00db      	lsls	r3, r3, #3
 80124e6:	20f8      	movs	r0, #248	; 0xf8
 80124e8:	4382      	bics	r2, r0
 80124ea:	4313      	orrs	r3, r2
 80124ec:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80124ee:	6823      	ldr	r3, [r4, #0]
 80124f0:	071b      	lsls	r3, r3, #28
 80124f2:	d547      	bpl.n	8012584 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80124f4:	6a23      	ldr	r3, [r4, #32]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d030      	beq.n	801255c <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 80124fa:	4a55      	ldr	r2, [pc, #340]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80124fc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80124fe:	2101      	movs	r1, #1
 8012500:	430b      	orrs	r3, r1
 8012502:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012504:	f7fe fe22 	bl	801114c <HAL_GetTick>
 8012508:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801250a:	4f51      	ldr	r7, [pc, #324]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 801250c:	2602      	movs	r6, #2
 801250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012510:	421e      	tst	r6, r3
 8012512:	d137      	bne.n	8012584 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012514:	f7fe fe1a 	bl	801114c <HAL_GetTick>
 8012518:	1b40      	subs	r0, r0, r5
 801251a:	2864      	cmp	r0, #100	; 0x64
 801251c:	d9f7      	bls.n	801250e <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 801251e:	2003      	movs	r0, #3
 8012520:	e747      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012522:	494b      	ldr	r1, [pc, #300]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012524:	680a      	ldr	r2, [r1, #0]
 8012526:	6923      	ldr	r3, [r4, #16]
 8012528:	00db      	lsls	r3, r3, #3
 801252a:	20f8      	movs	r0, #248	; 0xf8
 801252c:	4382      	bics	r2, r0
 801252e:	4313      	orrs	r3, r2
 8012530:	600b      	str	r3, [r1, #0]
 8012532:	e7dc      	b.n	80124ee <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8012534:	4a46      	ldr	r2, [pc, #280]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012536:	6813      	ldr	r3, [r2, #0]
 8012538:	2101      	movs	r1, #1
 801253a:	438b      	bics	r3, r1
 801253c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801253e:	f7fe fe05 	bl	801114c <HAL_GetTick>
 8012542:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012544:	4f42      	ldr	r7, [pc, #264]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012546:	2602      	movs	r6, #2
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	421e      	tst	r6, r3
 801254c:	d0cf      	beq.n	80124ee <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801254e:	f7fe fdfd 	bl	801114c <HAL_GetTick>
 8012552:	1b40      	subs	r0, r0, r5
 8012554:	2864      	cmp	r0, #100	; 0x64
 8012556:	d9f7      	bls.n	8012548 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8012558:	2003      	movs	r0, #3
 801255a:	e72a      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 801255c:	4a3c      	ldr	r2, [pc, #240]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 801255e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012560:	2101      	movs	r1, #1
 8012562:	438b      	bics	r3, r1
 8012564:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012566:	f7fe fdf1 	bl	801114c <HAL_GetTick>
 801256a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801256c:	4f38      	ldr	r7, [pc, #224]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 801256e:	2602      	movs	r6, #2
 8012570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012572:	421e      	tst	r6, r3
 8012574:	d006      	beq.n	8012584 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012576:	f7fe fde9 	bl	801114c <HAL_GetTick>
 801257a:	1b40      	subs	r0, r0, r5
 801257c:	2864      	cmp	r0, #100	; 0x64
 801257e:	d9f7      	bls.n	8012570 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 8012580:	2003      	movs	r0, #3
 8012582:	e716      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012584:	6823      	ldr	r3, [r4, #0]
 8012586:	075b      	lsls	r3, r3, #29
 8012588:	d442      	bmi.n	8012610 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 801258a:	6823      	ldr	r3, [r4, #0]
 801258c:	06db      	lsls	r3, r3, #27
 801258e:	d512      	bpl.n	80125b6 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8012590:	6963      	ldr	r3, [r4, #20]
 8012592:	2b01      	cmp	r3, #1
 8012594:	d100      	bne.n	8012598 <HAL_RCC_OscConfig+0x250>
 8012596:	e0ce      	b.n	8012736 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8012598:	3305      	adds	r3, #5
 801259a:	d000      	beq.n	801259e <HAL_RCC_OscConfig+0x256>
 801259c:	e0ec      	b.n	8012778 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 801259e:	4a2c      	ldr	r2, [pc, #176]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80125a0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80125a2:	2104      	movs	r1, #4
 80125a4:	438b      	bics	r3, r1
 80125a6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80125a8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80125aa:	69a3      	ldr	r3, [r4, #24]
 80125ac:	00db      	lsls	r3, r3, #3
 80125ae:	20f8      	movs	r0, #248	; 0xf8
 80125b0:	4381      	bics	r1, r0
 80125b2:	430b      	orrs	r3, r1
 80125b4:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80125b6:	6823      	ldr	r3, [r4, #0]
 80125b8:	069b      	lsls	r3, r3, #26
 80125ba:	d400      	bmi.n	80125be <HAL_RCC_OscConfig+0x276>
 80125bc:	e106      	b.n	80127cc <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80125be:	4b24      	ldr	r3, [pc, #144]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80125c0:	685a      	ldr	r2, [r3, #4]
 80125c2:	230c      	movs	r3, #12
 80125c4:	4013      	ands	r3, r2
 80125c6:	2b0c      	cmp	r3, #12
 80125c8:	d100      	bne.n	80125cc <HAL_RCC_OscConfig+0x284>
 80125ca:	e0f6      	b.n	80127ba <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80125cc:	4b20      	ldr	r3, [pc, #128]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80125ce:	685a      	ldr	r2, [r3, #4]
 80125d0:	230c      	movs	r3, #12
 80125d2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80125d4:	2b08      	cmp	r3, #8
 80125d6:	d100      	bne.n	80125da <HAL_RCC_OscConfig+0x292>
 80125d8:	e0e7      	b.n	80127aa <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80125da:	69e3      	ldr	r3, [r4, #28]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d100      	bne.n	80125e2 <HAL_RCC_OscConfig+0x29a>
 80125e0:	e116      	b.n	8012810 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 80125e2:	4a1b      	ldr	r2, [pc, #108]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80125e4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80125e6:	2380      	movs	r3, #128	; 0x80
 80125e8:	025b      	lsls	r3, r3, #9
 80125ea:	430b      	orrs	r3, r1
 80125ec:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 80125ee:	f7fe fdad 	bl	801114c <HAL_GetTick>
 80125f2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80125f4:	4f16      	ldr	r7, [pc, #88]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 80125f6:	2680      	movs	r6, #128	; 0x80
 80125f8:	0276      	lsls	r6, r6, #9
 80125fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125fc:	4233      	tst	r3, r6
 80125fe:	d000      	beq.n	8012602 <HAL_RCC_OscConfig+0x2ba>
 8012600:	e0e4      	b.n	80127cc <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012602:	f7fe fda3 	bl	801114c <HAL_GetTick>
 8012606:	1b40      	subs	r0, r0, r5
 8012608:	2864      	cmp	r0, #100	; 0x64
 801260a:	d9f6      	bls.n	80125fa <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 801260c:	2003      	movs	r0, #3
 801260e:	e6d0      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012610:	4a0f      	ldr	r2, [pc, #60]	; (8012650 <HAL_RCC_OscConfig+0x308>)
 8012612:	69d1      	ldr	r1, [r2, #28]
 8012614:	2080      	movs	r0, #128	; 0x80
 8012616:	0540      	lsls	r0, r0, #21
 8012618:	4301      	orrs	r1, r0
 801261a:	61d1      	str	r1, [r2, #28]
 801261c:	69d3      	ldr	r3, [r2, #28]
 801261e:	4003      	ands	r3, r0
 8012620:	9301      	str	r3, [sp, #4]
 8012622:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8012624:	4a0d      	ldr	r2, [pc, #52]	; (801265c <HAL_RCC_OscConfig+0x314>)
 8012626:	6811      	ldr	r1, [r2, #0]
 8012628:	2380      	movs	r3, #128	; 0x80
 801262a:	005b      	lsls	r3, r3, #1
 801262c:	430b      	orrs	r3, r1
 801262e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012630:	f7fe fd8c 	bl	801114c <HAL_GetTick>
 8012634:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012636:	4f09      	ldr	r7, [pc, #36]	; (801265c <HAL_RCC_OscConfig+0x314>)
 8012638:	2680      	movs	r6, #128	; 0x80
 801263a:	0076      	lsls	r6, r6, #1
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	4233      	tst	r3, r6
 8012640:	d10e      	bne.n	8012660 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012642:	f7fe fd83 	bl	801114c <HAL_GetTick>
 8012646:	1b40      	subs	r0, r0, r5
 8012648:	2864      	cmp	r0, #100	; 0x64
 801264a:	d9f7      	bls.n	801263c <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 801264c:	2003      	movs	r0, #3
 801264e:	e6b0      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
 8012650:	40021000 	.word	0x40021000
 8012654:	fffeffff 	.word	0xfffeffff
 8012658:	fffbffff 	.word	0xfffbffff
 801265c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8012660:	4b96      	ldr	r3, [pc, #600]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 8012662:	6a1a      	ldr	r2, [r3, #32]
 8012664:	2101      	movs	r1, #1
 8012666:	438a      	bics	r2, r1
 8012668:	621a      	str	r2, [r3, #32]
 801266a:	6a1a      	ldr	r2, [r3, #32]
 801266c:	3103      	adds	r1, #3
 801266e:	438a      	bics	r2, r1
 8012670:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8012672:	f7fe fd6b 	bl	801114c <HAL_GetTick>
 8012676:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012678:	4f90      	ldr	r7, [pc, #576]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 801267a:	2602      	movs	r6, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801267c:	4b90      	ldr	r3, [pc, #576]	; (80128c0 <HAL_RCC_OscConfig+0x578>)
 801267e:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012680:	6a3b      	ldr	r3, [r7, #32]
 8012682:	421e      	tst	r6, r3
 8012684:	d006      	beq.n	8012694 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012686:	f7fe fd61 	bl	801114c <HAL_GetTick>
 801268a:	1b40      	subs	r0, r0, r5
 801268c:	4540      	cmp	r0, r8
 801268e:	d9f7      	bls.n	8012680 <HAL_RCC_OscConfig+0x338>
        return HAL_TIMEOUT;
 8012690:	2003      	movs	r0, #3
 8012692:	e68e      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012694:	68a3      	ldr	r3, [r4, #8]
 8012696:	2b01      	cmp	r3, #1
 8012698:	d00b      	beq.n	80126b2 <HAL_RCC_OscConfig+0x36a>
 801269a:	2b00      	cmp	r3, #0
 801269c:	d123      	bne.n	80126e6 <HAL_RCC_OscConfig+0x39e>
 801269e:	4b87      	ldr	r3, [pc, #540]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 80126a0:	6a1a      	ldr	r2, [r3, #32]
 80126a2:	2101      	movs	r1, #1
 80126a4:	438a      	bics	r2, r1
 80126a6:	621a      	str	r2, [r3, #32]
 80126a8:	6a1a      	ldr	r2, [r3, #32]
 80126aa:	3103      	adds	r1, #3
 80126ac:	438a      	bics	r2, r1
 80126ae:	621a      	str	r2, [r3, #32]
 80126b0:	e004      	b.n	80126bc <HAL_RCC_OscConfig+0x374>
 80126b2:	4a82      	ldr	r2, [pc, #520]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 80126b4:	6a13      	ldr	r3, [r2, #32]
 80126b6:	2101      	movs	r1, #1
 80126b8:	430b      	orrs	r3, r1
 80126ba:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80126bc:	68a3      	ldr	r3, [r4, #8]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d027      	beq.n	8012712 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80126c2:	f7fe fd43 	bl	801114c <HAL_GetTick>
 80126c6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80126c8:	4f7c      	ldr	r7, [pc, #496]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 80126ca:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80126cc:	4b7c      	ldr	r3, [pc, #496]	; (80128c0 <HAL_RCC_OscConfig+0x578>)
 80126ce:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80126d0:	6a3b      	ldr	r3, [r7, #32]
 80126d2:	421e      	tst	r6, r3
 80126d4:	d000      	beq.n	80126d8 <HAL_RCC_OscConfig+0x390>
 80126d6:	e758      	b.n	801258a <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80126d8:	f7fe fd38 	bl	801114c <HAL_GetTick>
 80126dc:	1b40      	subs	r0, r0, r5
 80126de:	4540      	cmp	r0, r8
 80126e0:	d9f6      	bls.n	80126d0 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 80126e2:	2003      	movs	r0, #3
 80126e4:	e665      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80126e6:	2b05      	cmp	r3, #5
 80126e8:	d009      	beq.n	80126fe <HAL_RCC_OscConfig+0x3b6>
 80126ea:	4b74      	ldr	r3, [pc, #464]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 80126ec:	6a1a      	ldr	r2, [r3, #32]
 80126ee:	2101      	movs	r1, #1
 80126f0:	438a      	bics	r2, r1
 80126f2:	621a      	str	r2, [r3, #32]
 80126f4:	6a1a      	ldr	r2, [r3, #32]
 80126f6:	3103      	adds	r1, #3
 80126f8:	438a      	bics	r2, r1
 80126fa:	621a      	str	r2, [r3, #32]
 80126fc:	e7de      	b.n	80126bc <HAL_RCC_OscConfig+0x374>
 80126fe:	4b6f      	ldr	r3, [pc, #444]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 8012700:	6a1a      	ldr	r2, [r3, #32]
 8012702:	2104      	movs	r1, #4
 8012704:	430a      	orrs	r2, r1
 8012706:	621a      	str	r2, [r3, #32]
 8012708:	6a1a      	ldr	r2, [r3, #32]
 801270a:	3903      	subs	r1, #3
 801270c:	430a      	orrs	r2, r1
 801270e:	621a      	str	r2, [r3, #32]
 8012710:	e7d4      	b.n	80126bc <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8012712:	f7fe fd1b 	bl	801114c <HAL_GetTick>
 8012716:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012718:	4f68      	ldr	r7, [pc, #416]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 801271a:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801271c:	4b68      	ldr	r3, [pc, #416]	; (80128c0 <HAL_RCC_OscConfig+0x578>)
 801271e:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012720:	6a3b      	ldr	r3, [r7, #32]
 8012722:	421e      	tst	r6, r3
 8012724:	d100      	bne.n	8012728 <HAL_RCC_OscConfig+0x3e0>
 8012726:	e730      	b.n	801258a <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012728:	f7fe fd10 	bl	801114c <HAL_GetTick>
 801272c:	1b40      	subs	r0, r0, r5
 801272e:	4540      	cmp	r0, r8
 8012730:	d9f6      	bls.n	8012720 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 8012732:	2003      	movs	r0, #3
 8012734:	e63d      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012736:	4b61      	ldr	r3, [pc, #388]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 8012738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801273a:	2104      	movs	r1, #4
 801273c:	430a      	orrs	r2, r1
 801273e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8012740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012742:	3903      	subs	r1, #3
 8012744:	430a      	orrs	r2, r1
 8012746:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012748:	f7fe fd00 	bl	801114c <HAL_GetTick>
 801274c:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801274e:	4f5b      	ldr	r7, [pc, #364]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 8012750:	2602      	movs	r6, #2
 8012752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012754:	421e      	tst	r6, r3
 8012756:	d106      	bne.n	8012766 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012758:	f7fe fcf8 	bl	801114c <HAL_GetTick>
 801275c:	1b40      	subs	r0, r0, r5
 801275e:	2864      	cmp	r0, #100	; 0x64
 8012760:	d9f7      	bls.n	8012752 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8012762:	2003      	movs	r0, #3
 8012764:	e625      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012766:	4955      	ldr	r1, [pc, #340]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 8012768:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 801276a:	69a3      	ldr	r3, [r4, #24]
 801276c:	00db      	lsls	r3, r3, #3
 801276e:	20f8      	movs	r0, #248	; 0xf8
 8012770:	4382      	bics	r2, r0
 8012772:	4313      	orrs	r3, r2
 8012774:	634b      	str	r3, [r1, #52]	; 0x34
 8012776:	e71e      	b.n	80125b6 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012778:	4b50      	ldr	r3, [pc, #320]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 801277a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801277c:	2104      	movs	r1, #4
 801277e:	430a      	orrs	r2, r1
 8012780:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8012782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012784:	3903      	subs	r1, #3
 8012786:	438a      	bics	r2, r1
 8012788:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 801278a:	f7fe fcdf 	bl	801114c <HAL_GetTick>
 801278e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8012790:	4f4a      	ldr	r7, [pc, #296]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 8012792:	2602      	movs	r6, #2
 8012794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012796:	421e      	tst	r6, r3
 8012798:	d100      	bne.n	801279c <HAL_RCC_OscConfig+0x454>
 801279a:	e70c      	b.n	80125b6 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 801279c:	f7fe fcd6 	bl	801114c <HAL_GetTick>
 80127a0:	1b40      	subs	r0, r0, r5
 80127a2:	2864      	cmp	r0, #100	; 0x64
 80127a4:	d9f6      	bls.n	8012794 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 80127a6:	2003      	movs	r0, #3
 80127a8:	e603      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80127aa:	4b44      	ldr	r3, [pc, #272]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 80127ac:	685b      	ldr	r3, [r3, #4]
 80127ae:	22c0      	movs	r2, #192	; 0xc0
 80127b0:	0252      	lsls	r2, r2, #9
 80127b2:	4013      	ands	r3, r2
 80127b4:	4293      	cmp	r3, r2
 80127b6:	d000      	beq.n	80127ba <HAL_RCC_OscConfig+0x472>
 80127b8:	e70f      	b.n	80125da <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80127ba:	4b40      	ldr	r3, [pc, #256]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 80127bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127be:	03db      	lsls	r3, r3, #15
 80127c0:	d504      	bpl.n	80127cc <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 80127c2:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80127c4:	69e3      	ldr	r3, [r4, #28]
 80127c6:	2b01      	cmp	r3, #1
 80127c8:	d000      	beq.n	80127cc <HAL_RCC_OscConfig+0x484>
 80127ca:	e5f2      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80127cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 80127ce:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d100      	bne.n	80127d6 <HAL_RCC_OscConfig+0x48e>
 80127d4:	e5ed      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80127d6:	4a39      	ldr	r2, [pc, #228]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 80127d8:	6851      	ldr	r1, [r2, #4]
 80127da:	220c      	movs	r2, #12
 80127dc:	400a      	ands	r2, r1
 80127de:	2a08      	cmp	r2, #8
 80127e0:	d06a      	beq.n	80128b8 <HAL_RCC_OscConfig+0x570>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80127e2:	2b02      	cmp	r3, #2
 80127e4:	d029      	beq.n	801283a <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 80127e6:	4a35      	ldr	r2, [pc, #212]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 80127e8:	6813      	ldr	r3, [r2, #0]
 80127ea:	4936      	ldr	r1, [pc, #216]	; (80128c4 <HAL_RCC_OscConfig+0x57c>)
 80127ec:	400b      	ands	r3, r1
 80127ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80127f0:	f7fe fcac 	bl	801114c <HAL_GetTick>
 80127f4:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80127f6:	4e31      	ldr	r6, [pc, #196]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 80127f8:	2580      	movs	r5, #128	; 0x80
 80127fa:	04ad      	lsls	r5, r5, #18
 80127fc:	6833      	ldr	r3, [r6, #0]
 80127fe:	422b      	tst	r3, r5
 8012800:	d056      	beq.n	80128b0 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012802:	f7fe fca3 	bl	801114c <HAL_GetTick>
 8012806:	1b00      	subs	r0, r0, r4
 8012808:	2864      	cmp	r0, #100	; 0x64
 801280a:	d9f7      	bls.n	80127fc <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 801280c:	2003      	movs	r0, #3
 801280e:	e5d0      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012810:	4a2a      	ldr	r2, [pc, #168]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 8012812:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012814:	492c      	ldr	r1, [pc, #176]	; (80128c8 <HAL_RCC_OscConfig+0x580>)
 8012816:	400b      	ands	r3, r1
 8012818:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801281a:	f7fe fc97 	bl	801114c <HAL_GetTick>
 801281e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012820:	4f26      	ldr	r7, [pc, #152]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 8012822:	2680      	movs	r6, #128	; 0x80
 8012824:	0276      	lsls	r6, r6, #9
 8012826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012828:	4233      	tst	r3, r6
 801282a:	d0cf      	beq.n	80127cc <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801282c:	f7fe fc8e 	bl	801114c <HAL_GetTick>
 8012830:	1b40      	subs	r0, r0, r5
 8012832:	2864      	cmp	r0, #100	; 0x64
 8012834:	d9f7      	bls.n	8012826 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8012836:	2003      	movs	r0, #3
 8012838:	e5bb      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 801283a:	4a20      	ldr	r2, [pc, #128]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 801283c:	6813      	ldr	r3, [r2, #0]
 801283e:	4921      	ldr	r1, [pc, #132]	; (80128c4 <HAL_RCC_OscConfig+0x57c>)
 8012840:	400b      	ands	r3, r1
 8012842:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012844:	f7fe fc82 	bl	801114c <HAL_GetTick>
 8012848:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801284a:	4f1c      	ldr	r7, [pc, #112]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 801284c:	2680      	movs	r6, #128	; 0x80
 801284e:	04b6      	lsls	r6, r6, #18
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	4233      	tst	r3, r6
 8012854:	d006      	beq.n	8012864 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012856:	f7fe fc79 	bl	801114c <HAL_GetTick>
 801285a:	1b40      	subs	r0, r0, r5
 801285c:	2864      	cmp	r0, #100	; 0x64
 801285e:	d9f7      	bls.n	8012850 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8012860:	2003      	movs	r0, #3
 8012862:	e5a6      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012864:	4b15      	ldr	r3, [pc, #84]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 8012866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012868:	210f      	movs	r1, #15
 801286a:	438a      	bics	r2, r1
 801286c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801286e:	430a      	orrs	r2, r1
 8012870:	62da      	str	r2, [r3, #44]	; 0x2c
 8012872:	6859      	ldr	r1, [r3, #4]
 8012874:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012876:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012878:	4302      	orrs	r2, r0
 801287a:	4814      	ldr	r0, [pc, #80]	; (80128cc <HAL_RCC_OscConfig+0x584>)
 801287c:	4001      	ands	r1, r0
 801287e:	430a      	orrs	r2, r1
 8012880:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8012882:	6819      	ldr	r1, [r3, #0]
 8012884:	2280      	movs	r2, #128	; 0x80
 8012886:	0452      	lsls	r2, r2, #17
 8012888:	430a      	orrs	r2, r1
 801288a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801288c:	f7fe fc5e 	bl	801114c <HAL_GetTick>
 8012890:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012892:	4e0a      	ldr	r6, [pc, #40]	; (80128bc <HAL_RCC_OscConfig+0x574>)
 8012894:	2580      	movs	r5, #128	; 0x80
 8012896:	04ad      	lsls	r5, r5, #18
 8012898:	6833      	ldr	r3, [r6, #0]
 801289a:	422b      	tst	r3, r5
 801289c:	d106      	bne.n	80128ac <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801289e:	f7fe fc55 	bl	801114c <HAL_GetTick>
 80128a2:	1b00      	subs	r0, r0, r4
 80128a4:	2864      	cmp	r0, #100	; 0x64
 80128a6:	d9f7      	bls.n	8012898 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 80128a8:	2003      	movs	r0, #3
 80128aa:	e582      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80128ac:	2000      	movs	r0, #0
 80128ae:	e580      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
 80128b0:	2000      	movs	r0, #0
 80128b2:	e57e      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
        return HAL_ERROR;
 80128b4:	2001      	movs	r0, #1
 80128b6:	e57c      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80128b8:	2001      	movs	r0, #1
 80128ba:	e57a      	b.n	80123b2 <HAL_RCC_OscConfig+0x6a>
 80128bc:	40021000 	.word	0x40021000
 80128c0:	00001388 	.word	0x00001388
 80128c4:	feffffff 	.word	0xfeffffff
 80128c8:	fffeffff 	.word	0xfffeffff
 80128cc:	ffc27fff 	.word	0xffc27fff

080128d0 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80128d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128d2:	46ce      	mov	lr, r9
 80128d4:	4647      	mov	r7, r8
 80128d6:	b580      	push	{r7, lr}
 80128d8:	0004      	movs	r4, r0
 80128da:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80128dc:	4b96      	ldr	r3, [pc, #600]	; (8012b38 <HAL_RCC_ClockConfig+0x268>)
 80128de:	681a      	ldr	r2, [r3, #0]
 80128e0:	2301      	movs	r3, #1
 80128e2:	4013      	ands	r3, r2
 80128e4:	428b      	cmp	r3, r1
 80128e6:	d300      	bcc.n	80128ea <HAL_RCC_ClockConfig+0x1a>
 80128e8:	e086      	b.n	80129f8 <HAL_RCC_ClockConfig+0x128>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80128ea:	4993      	ldr	r1, [pc, #588]	; (8012b38 <HAL_RCC_ClockConfig+0x268>)
 80128ec:	680b      	ldr	r3, [r1, #0]
 80128ee:	2201      	movs	r2, #1
 80128f0:	4393      	bics	r3, r2
 80128f2:	432b      	orrs	r3, r5
 80128f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80128f6:	680b      	ldr	r3, [r1, #0]
 80128f8:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 80128fa:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80128fc:	42aa      	cmp	r2, r5
 80128fe:	d000      	beq.n	8012902 <HAL_RCC_ClockConfig+0x32>
 8012900:	e111      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012902:	6823      	ldr	r3, [r4, #0]
 8012904:	079b      	lsls	r3, r3, #30
 8012906:	d506      	bpl.n	8012916 <HAL_RCC_ClockConfig+0x46>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012908:	4a8c      	ldr	r2, [pc, #560]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 801290a:	6853      	ldr	r3, [r2, #4]
 801290c:	21f0      	movs	r1, #240	; 0xf0
 801290e:	438b      	bics	r3, r1
 8012910:	68a1      	ldr	r1, [r4, #8]
 8012912:	430b      	orrs	r3, r1
 8012914:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012916:	6823      	ldr	r3, [r4, #0]
 8012918:	07db      	lsls	r3, r3, #31
 801291a:	d400      	bmi.n	801291e <HAL_RCC_ClockConfig+0x4e>
 801291c:	e0f5      	b.n	8012b0a <HAL_RCC_ClockConfig+0x23a>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801291e:	6862      	ldr	r2, [r4, #4]
 8012920:	2a01      	cmp	r2, #1
 8012922:	d009      	beq.n	8012938 <HAL_RCC_ClockConfig+0x68>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012924:	2a02      	cmp	r2, #2
 8012926:	d02b      	beq.n	8012980 <HAL_RCC_ClockConfig+0xb0>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012928:	2a03      	cmp	r2, #3
 801292a:	d02f      	beq.n	801298c <HAL_RCC_ClockConfig+0xbc>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801292c:	4b83      	ldr	r3, [pc, #524]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	079b      	lsls	r3, r3, #30
 8012932:	d406      	bmi.n	8012942 <HAL_RCC_ClockConfig+0x72>
        {
          return HAL_ERROR;
 8012934:	2001      	movs	r0, #1
 8012936:	e0f6      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012938:	4b80      	ldr	r3, [pc, #512]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	039b      	lsls	r3, r3, #14
 801293e:	d400      	bmi.n	8012942 <HAL_RCC_ClockConfig+0x72>
 8012940:	e0f5      	b.n	8012b2e <HAL_RCC_ClockConfig+0x25e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012942:	497e      	ldr	r1, [pc, #504]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012944:	684b      	ldr	r3, [r1, #4]
 8012946:	2003      	movs	r0, #3
 8012948:	4383      	bics	r3, r0
 801294a:	4313      	orrs	r3, r2
 801294c:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801294e:	f7fe fbfd 	bl	801114c <HAL_GetTick>
 8012952:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012954:	6863      	ldr	r3, [r4, #4]
 8012956:	2b01      	cmp	r3, #1
 8012958:	d01e      	beq.n	8012998 <HAL_RCC_ClockConfig+0xc8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801295a:	2b02      	cmp	r3, #2
 801295c:	d02c      	beq.n	80129b8 <HAL_RCC_ClockConfig+0xe8>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801295e:	2b03      	cmp	r3, #3
 8012960:	d03a      	beq.n	80129d8 <HAL_RCC_ClockConfig+0x108>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012962:	4f76      	ldr	r7, [pc, #472]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012964:	260c      	movs	r6, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012966:	4b76      	ldr	r3, [pc, #472]	; (8012b40 <HAL_RCC_ClockConfig+0x270>)
 8012968:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	421e      	tst	r6, r3
 801296e:	d100      	bne.n	8012972 <HAL_RCC_ClockConfig+0xa2>
 8012970:	e0cb      	b.n	8012b0a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012972:	f7fe fbeb 	bl	801114c <HAL_GetTick>
 8012976:	1b40      	subs	r0, r0, r5
 8012978:	4540      	cmp	r0, r8
 801297a:	d9f6      	bls.n	801296a <HAL_RCC_ClockConfig+0x9a>
          {
            return HAL_TIMEOUT;
 801297c:	2003      	movs	r0, #3
 801297e:	e0d2      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012980:	4b6e      	ldr	r3, [pc, #440]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	019b      	lsls	r3, r3, #6
 8012986:	d4dc      	bmi.n	8012942 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8012988:	2001      	movs	r0, #1
 801298a:	e0cc      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801298c:	4b6b      	ldr	r3, [pc, #428]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 801298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012990:	03db      	lsls	r3, r3, #15
 8012992:	d4d6      	bmi.n	8012942 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8012994:	2001      	movs	r0, #1
 8012996:	e0c6      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012998:	4f68      	ldr	r7, [pc, #416]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 801299a:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801299c:	4b68      	ldr	r3, [pc, #416]	; (8012b40 <HAL_RCC_ClockConfig+0x270>)
 801299e:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	4033      	ands	r3, r6
 80129a4:	2b04      	cmp	r3, #4
 80129a6:	d100      	bne.n	80129aa <HAL_RCC_ClockConfig+0xda>
 80129a8:	e0af      	b.n	8012b0a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129aa:	f7fe fbcf 	bl	801114c <HAL_GetTick>
 80129ae:	1b40      	subs	r0, r0, r5
 80129b0:	4540      	cmp	r0, r8
 80129b2:	d9f5      	bls.n	80129a0 <HAL_RCC_ClockConfig+0xd0>
            return HAL_TIMEOUT;
 80129b4:	2003      	movs	r0, #3
 80129b6:	e0b6      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80129b8:	4f60      	ldr	r7, [pc, #384]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 80129ba:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129bc:	4b60      	ldr	r3, [pc, #384]	; (8012b40 <HAL_RCC_ClockConfig+0x270>)
 80129be:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	4033      	ands	r3, r6
 80129c4:	2b08      	cmp	r3, #8
 80129c6:	d100      	bne.n	80129ca <HAL_RCC_ClockConfig+0xfa>
 80129c8:	e09f      	b.n	8012b0a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129ca:	f7fe fbbf 	bl	801114c <HAL_GetTick>
 80129ce:	1b40      	subs	r0, r0, r5
 80129d0:	4540      	cmp	r0, r8
 80129d2:	d9f5      	bls.n	80129c0 <HAL_RCC_ClockConfig+0xf0>
            return HAL_TIMEOUT;
 80129d4:	2003      	movs	r0, #3
 80129d6:	e0a6      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80129d8:	4f58      	ldr	r7, [pc, #352]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 80129da:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129dc:	4b58      	ldr	r3, [pc, #352]	; (8012b40 <HAL_RCC_ClockConfig+0x270>)
 80129de:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	4033      	ands	r3, r6
 80129e4:	2b0c      	cmp	r3, #12
 80129e6:	d100      	bne.n	80129ea <HAL_RCC_ClockConfig+0x11a>
 80129e8:	e08f      	b.n	8012b0a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129ea:	f7fe fbaf 	bl	801114c <HAL_GetTick>
 80129ee:	1b40      	subs	r0, r0, r5
 80129f0:	4540      	cmp	r0, r8
 80129f2:	d9f5      	bls.n	80129e0 <HAL_RCC_ClockConfig+0x110>
            return HAL_TIMEOUT;
 80129f4:	2003      	movs	r0, #3
 80129f6:	e096      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80129f8:	6803      	ldr	r3, [r0, #0]
 80129fa:	079b      	lsls	r3, r3, #30
 80129fc:	d506      	bpl.n	8012a0c <HAL_RCC_ClockConfig+0x13c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80129fe:	4a4f      	ldr	r2, [pc, #316]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012a00:	6853      	ldr	r3, [r2, #4]
 8012a02:	21f0      	movs	r1, #240	; 0xf0
 8012a04:	438b      	bics	r3, r1
 8012a06:	6881      	ldr	r1, [r0, #8]
 8012a08:	430b      	orrs	r3, r1
 8012a0a:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012a0c:	6823      	ldr	r3, [r4, #0]
 8012a0e:	07db      	lsls	r3, r3, #31
 8012a10:	d570      	bpl.n	8012af4 <HAL_RCC_ClockConfig+0x224>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012a12:	6862      	ldr	r2, [r4, #4]
 8012a14:	2a01      	cmp	r2, #1
 8012a16:	d009      	beq.n	8012a2c <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012a18:	2a02      	cmp	r2, #2
 8012a1a:	d02c      	beq.n	8012a76 <HAL_RCC_ClockConfig+0x1a6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012a1c:	2a03      	cmp	r2, #3
 8012a1e:	d030      	beq.n	8012a82 <HAL_RCC_ClockConfig+0x1b2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012a20:	4b46      	ldr	r3, [pc, #280]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	079b      	lsls	r3, r3, #30
 8012a26:	d406      	bmi.n	8012a36 <HAL_RCC_ClockConfig+0x166>
        {
          return HAL_ERROR;
 8012a28:	2001      	movs	r0, #1
 8012a2a:	e07c      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012a2c:	4b43      	ldr	r3, [pc, #268]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	039b      	lsls	r3, r3, #14
 8012a32:	d400      	bmi.n	8012a36 <HAL_RCC_ClockConfig+0x166>
 8012a34:	e07d      	b.n	8012b32 <HAL_RCC_ClockConfig+0x262>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012a36:	4941      	ldr	r1, [pc, #260]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012a38:	684b      	ldr	r3, [r1, #4]
 8012a3a:	2003      	movs	r0, #3
 8012a3c:	4383      	bics	r3, r0
 8012a3e:	4313      	orrs	r3, r2
 8012a40:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012a42:	f7fe fb83 	bl	801114c <HAL_GetTick>
 8012a46:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012a48:	6863      	ldr	r3, [r4, #4]
 8012a4a:	2b01      	cmp	r3, #1
 8012a4c:	d01f      	beq.n	8012a8e <HAL_RCC_ClockConfig+0x1be>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012a4e:	2b02      	cmp	r3, #2
 8012a50:	d02e      	beq.n	8012ab0 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012a52:	2b03      	cmp	r3, #3
 8012a54:	d03d      	beq.n	8012ad2 <HAL_RCC_ClockConfig+0x202>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012a56:	4b39      	ldr	r3, [pc, #228]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012a58:	4698      	mov	r8, r3
 8012a5a:	270c      	movs	r7, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a5c:	4b38      	ldr	r3, [pc, #224]	; (8012b40 <HAL_RCC_ClockConfig+0x270>)
 8012a5e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012a60:	4643      	mov	r3, r8
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	421f      	tst	r7, r3
 8012a66:	d045      	beq.n	8012af4 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a68:	f7fe fb70 	bl	801114c <HAL_GetTick>
 8012a6c:	1b80      	subs	r0, r0, r6
 8012a6e:	4548      	cmp	r0, r9
 8012a70:	d9f6      	bls.n	8012a60 <HAL_RCC_ClockConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012a72:	2003      	movs	r0, #3
 8012a74:	e057      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012a76:	4b31      	ldr	r3, [pc, #196]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	019b      	lsls	r3, r3, #6
 8012a7c:	d4db      	bmi.n	8012a36 <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 8012a7e:	2001      	movs	r0, #1
 8012a80:	e051      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012a82:	4b2e      	ldr	r3, [pc, #184]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a86:	03db      	lsls	r3, r3, #15
 8012a88:	d4d5      	bmi.n	8012a36 <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 8012a8a:	2001      	movs	r0, #1
 8012a8c:	e04b      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012a8e:	4b2b      	ldr	r3, [pc, #172]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012a90:	4698      	mov	r8, r3
 8012a92:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a94:	4b2a      	ldr	r3, [pc, #168]	; (8012b40 <HAL_RCC_ClockConfig+0x270>)
 8012a96:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012a98:	4643      	mov	r3, r8
 8012a9a:	685b      	ldr	r3, [r3, #4]
 8012a9c:	403b      	ands	r3, r7
 8012a9e:	2b04      	cmp	r3, #4
 8012aa0:	d028      	beq.n	8012af4 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012aa2:	f7fe fb53 	bl	801114c <HAL_GetTick>
 8012aa6:	1b80      	subs	r0, r0, r6
 8012aa8:	4548      	cmp	r0, r9
 8012aaa:	d9f5      	bls.n	8012a98 <HAL_RCC_ClockConfig+0x1c8>
            return HAL_TIMEOUT;
 8012aac:	2003      	movs	r0, #3
 8012aae:	e03a      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012ab0:	4b22      	ldr	r3, [pc, #136]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012ab2:	4698      	mov	r8, r3
 8012ab4:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012ab6:	4b22      	ldr	r3, [pc, #136]	; (8012b40 <HAL_RCC_ClockConfig+0x270>)
 8012ab8:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012aba:	4643      	mov	r3, r8
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	403b      	ands	r3, r7
 8012ac0:	2b08      	cmp	r3, #8
 8012ac2:	d017      	beq.n	8012af4 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012ac4:	f7fe fb42 	bl	801114c <HAL_GetTick>
 8012ac8:	1b80      	subs	r0, r0, r6
 8012aca:	4548      	cmp	r0, r9
 8012acc:	d9f5      	bls.n	8012aba <HAL_RCC_ClockConfig+0x1ea>
            return HAL_TIMEOUT;
 8012ace:	2003      	movs	r0, #3
 8012ad0:	e029      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012ad2:	4b1a      	ldr	r3, [pc, #104]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012ad4:	4698      	mov	r8, r3
 8012ad6:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012ad8:	4b19      	ldr	r3, [pc, #100]	; (8012b40 <HAL_RCC_ClockConfig+0x270>)
 8012ada:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012adc:	4643      	mov	r3, r8
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	403b      	ands	r3, r7
 8012ae2:	2b0c      	cmp	r3, #12
 8012ae4:	d006      	beq.n	8012af4 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012ae6:	f7fe fb31 	bl	801114c <HAL_GetTick>
 8012aea:	1b80      	subs	r0, r0, r6
 8012aec:	4548      	cmp	r0, r9
 8012aee:	d9f5      	bls.n	8012adc <HAL_RCC_ClockConfig+0x20c>
            return HAL_TIMEOUT;
 8012af0:	2003      	movs	r0, #3
 8012af2:	e018      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012af4:	4910      	ldr	r1, [pc, #64]	; (8012b38 <HAL_RCC_ClockConfig+0x268>)
 8012af6:	680b      	ldr	r3, [r1, #0]
 8012af8:	2201      	movs	r2, #1
 8012afa:	4393      	bics	r3, r2
 8012afc:	432b      	orrs	r3, r5
 8012afe:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012b00:	680b      	ldr	r3, [r1, #0]
 8012b02:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8012b04:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012b06:	42aa      	cmp	r2, r5
 8012b08:	d10d      	bne.n	8012b26 <HAL_RCC_ClockConfig+0x256>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012b0a:	6823      	ldr	r3, [r4, #0]
 8012b0c:	075b      	lsls	r3, r3, #29
 8012b0e:	d506      	bpl.n	8012b1e <HAL_RCC_ClockConfig+0x24e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012b10:	4a0a      	ldr	r2, [pc, #40]	; (8012b3c <HAL_RCC_ClockConfig+0x26c>)
 8012b12:	6853      	ldr	r3, [r2, #4]
 8012b14:	490b      	ldr	r1, [pc, #44]	; (8012b44 <HAL_RCC_ClockConfig+0x274>)
 8012b16:	400b      	ands	r3, r1
 8012b18:	68e1      	ldr	r1, [r4, #12]
 8012b1a:	430b      	orrs	r3, r1
 8012b1c:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8012b1e:	2000      	movs	r0, #0
 8012b20:	f7fe faea 	bl	80110f8 <HAL_InitTick>
  
  return HAL_OK;
 8012b24:	2000      	movs	r0, #0
}
 8012b26:	bcc0      	pop	{r6, r7}
 8012b28:	46b9      	mov	r9, r7
 8012b2a:	46b0      	mov	r8, r6
 8012b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8012b2e:	2001      	movs	r0, #1
 8012b30:	e7f9      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
          return HAL_ERROR;
 8012b32:	2001      	movs	r0, #1
 8012b34:	e7f7      	b.n	8012b26 <HAL_RCC_ClockConfig+0x256>
 8012b36:	46c0      	nop			; (mov r8, r8)
 8012b38:	40022000 	.word	0x40022000
 8012b3c:	40021000 	.word	0x40021000
 8012b40:	00001388 	.word	0x00001388
 8012b44:	fffff8ff 	.word	0xfffff8ff

08012b48 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012b48:	b510      	push	{r4, lr}
 8012b4a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012b4c:	aa04      	add	r2, sp, #16
 8012b4e:	4b20      	ldr	r3, [pc, #128]	; (8012bd0 <HAL_RCC_GetSysClockFreq+0x88>)
 8012b50:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012b52:	c213      	stmia	r2!, {r0, r1, r4}
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012b58:	466a      	mov	r2, sp
 8012b5a:	4b1e      	ldr	r3, [pc, #120]	; (8012bd4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8012b5c:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012b5e:	c213      	stmia	r2!, {r0, r1, r4}
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8012b64:	4b1c      	ldr	r3, [pc, #112]	; (8012bd8 <HAL_RCC_GetSysClockFreq+0x90>)
 8012b66:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012b68:	200c      	movs	r0, #12
 8012b6a:	4018      	ands	r0, r3
 8012b6c:	2808      	cmp	r0, #8
 8012b6e:	d00a      	beq.n	8012b86 <HAL_RCC_GetSysClockFreq+0x3e>
 8012b70:	380c      	subs	r0, #12
 8012b72:	1e43      	subs	r3, r0, #1
 8012b74:	4198      	sbcs	r0, r3
 8012b76:	4240      	negs	r0, r0
 8012b78:	4b18      	ldr	r3, [pc, #96]	; (8012bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8012b7a:	4018      	ands	r0, r3
 8012b7c:	4b18      	ldr	r3, [pc, #96]	; (8012be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8012b7e:	469c      	mov	ip, r3
 8012b80:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8012b82:	b008      	add	sp, #32
 8012b84:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8012b86:	0c99      	lsrs	r1, r3, #18
 8012b88:	220f      	movs	r2, #15
 8012b8a:	4011      	ands	r1, r2
 8012b8c:	a804      	add	r0, sp, #16
 8012b8e:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8012b90:	4911      	ldr	r1, [pc, #68]	; (8012bd8 <HAL_RCC_GetSysClockFreq+0x90>)
 8012b92:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012b94:	400a      	ands	r2, r1
 8012b96:	4669      	mov	r1, sp
 8012b98:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012b9a:	22c0      	movs	r2, #192	; 0xc0
 8012b9c:	0252      	lsls	r2, r2, #9
 8012b9e:	4013      	ands	r3, r2
 8012ba0:	2280      	movs	r2, #128	; 0x80
 8012ba2:	0252      	lsls	r2, r2, #9
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	d008      	beq.n	8012bba <HAL_RCC_GetSysClockFreq+0x72>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8012ba8:	22c0      	movs	r2, #192	; 0xc0
 8012baa:	0252      	lsls	r2, r2, #9
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d009      	beq.n	8012bc4 <HAL_RCC_GetSysClockFreq+0x7c>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8012bb0:	480c      	ldr	r0, [pc, #48]	; (8012be4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8012bb2:	f7ed facd 	bl	8000150 <__udivsi3>
 8012bb6:	4360      	muls	r0, r4
 8012bb8:	e7e3      	b.n	8012b82 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8012bba:	480a      	ldr	r0, [pc, #40]	; (8012be4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8012bbc:	f7ed fac8 	bl	8000150 <__udivsi3>
 8012bc0:	4360      	muls	r0, r4
 8012bc2:	e7de      	b.n	8012b82 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8012bc4:	4806      	ldr	r0, [pc, #24]	; (8012be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8012bc6:	f7ed fac3 	bl	8000150 <__udivsi3>
 8012bca:	4360      	muls	r0, r4
 8012bcc:	e7d9      	b.n	8012b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8012bce:	46c0      	nop			; (mov r8, r8)
 8012bd0:	0801d85c 	.word	0x0801d85c
 8012bd4:	0801d870 	.word	0x0801d870
 8012bd8:	40021000 	.word	0x40021000
 8012bdc:	fd9da600 	.word	0xfd9da600
 8012be0:	02dc6c00 	.word	0x02dc6c00
 8012be4:	007a1200 	.word	0x007a1200

08012be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012be8:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8012bea:	f7ff ffad 	bl	8012b48 <HAL_RCC_GetSysClockFreq>
 8012bee:	4b05      	ldr	r3, [pc, #20]	; (8012c04 <HAL_RCC_GetHCLKFreq+0x1c>)
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	061b      	lsls	r3, r3, #24
 8012bf4:	0f1b      	lsrs	r3, r3, #28
 8012bf6:	4a04      	ldr	r2, [pc, #16]	; (8012c08 <HAL_RCC_GetHCLKFreq+0x20>)
 8012bf8:	5cd3      	ldrb	r3, [r2, r3]
 8012bfa:	40d8      	lsrs	r0, r3
 8012bfc:	4b03      	ldr	r3, [pc, #12]	; (8012c0c <HAL_RCC_GetHCLKFreq+0x24>)
 8012bfe:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012c00:	bd10      	pop	{r4, pc}
 8012c02:	46c0      	nop			; (mov r8, r8)
 8012c04:	40021000 	.word	0x40021000
 8012c08:	0801d884 	.word	0x0801d884
 8012c0c:	200000b8 	.word	0x200000b8

08012c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012c10:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012c12:	f7ff ffe9 	bl	8012be8 <HAL_RCC_GetHCLKFreq>
 8012c16:	4b04      	ldr	r3, [pc, #16]	; (8012c28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	055b      	lsls	r3, r3, #21
 8012c1c:	0f5b      	lsrs	r3, r3, #29
 8012c1e:	4a03      	ldr	r2, [pc, #12]	; (8012c2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012c20:	5cd3      	ldrb	r3, [r2, r3]
 8012c22:	40d8      	lsrs	r0, r3
}    
 8012c24:	bd10      	pop	{r4, pc}
 8012c26:	46c0      	nop			; (mov r8, r8)
 8012c28:	40021000 	.word	0x40021000
 8012c2c:	0801d884 	.word	0x0801d884

08012c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c32:	46c6      	mov	lr, r8
 8012c34:	b500      	push	{lr}
 8012c36:	b082      	sub	sp, #8
 8012c38:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012c3a:	6803      	ldr	r3, [r0, #0]
 8012c3c:	03db      	lsls	r3, r3, #15
 8012c3e:	d507      	bpl.n	8012c50 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012c40:	4b43      	ldr	r3, [pc, #268]	; (8012d50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c42:	6a1b      	ldr	r3, [r3, #32]
 8012c44:	6842      	ldr	r2, [r0, #4]
 8012c46:	4053      	eors	r3, r2
 8012c48:	22c0      	movs	r2, #192	; 0xc0
 8012c4a:	0092      	lsls	r2, r2, #2
 8012c4c:	4213      	tst	r3, r2
 8012c4e:	d136      	bne.n	8012cbe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012c50:	6823      	ldr	r3, [r4, #0]
 8012c52:	07db      	lsls	r3, r3, #31
 8012c54:	d506      	bpl.n	8012c64 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012c56:	4a3e      	ldr	r2, [pc, #248]	; (8012d50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012c5a:	2103      	movs	r1, #3
 8012c5c:	438b      	bics	r3, r1
 8012c5e:	68a1      	ldr	r1, [r4, #8]
 8012c60:	430b      	orrs	r3, r1
 8012c62:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012c64:	6823      	ldr	r3, [r4, #0]
 8012c66:	079b      	lsls	r3, r3, #30
 8012c68:	d506      	bpl.n	8012c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012c6a:	4a39      	ldr	r2, [pc, #228]	; (8012d50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012c6e:	4939      	ldr	r1, [pc, #228]	; (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012c70:	400b      	ands	r3, r1
 8012c72:	68e1      	ldr	r1, [r4, #12]
 8012c74:	430b      	orrs	r3, r1
 8012c76:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012c78:	6823      	ldr	r3, [r4, #0]
 8012c7a:	035b      	lsls	r3, r3, #13
 8012c7c:	d506      	bpl.n	8012c8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012c7e:	4a34      	ldr	r2, [pc, #208]	; (8012d50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012c82:	4935      	ldr	r1, [pc, #212]	; (8012d58 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8012c84:	400b      	ands	r3, r1
 8012c86:	6921      	ldr	r1, [r4, #16]
 8012c88:	430b      	orrs	r3, r1
 8012c8a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012c8c:	6823      	ldr	r3, [r4, #0]
 8012c8e:	069b      	lsls	r3, r3, #26
 8012c90:	d506      	bpl.n	8012ca0 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012c92:	4a2f      	ldr	r2, [pc, #188]	; (8012d50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c94:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012c96:	2110      	movs	r1, #16
 8012c98:	438b      	bics	r3, r1
 8012c9a:	6961      	ldr	r1, [r4, #20]
 8012c9c:	430b      	orrs	r3, r1
 8012c9e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012ca0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012ca2:	6823      	ldr	r3, [r4, #0]
 8012ca4:	055b      	lsls	r3, r3, #21
 8012ca6:	d506      	bpl.n	8012cb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012ca8:	4a29      	ldr	r2, [pc, #164]	; (8012d50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012caa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012cac:	2140      	movs	r1, #64	; 0x40
 8012cae:	438b      	bics	r3, r1
 8012cb0:	69a1      	ldr	r1, [r4, #24]
 8012cb2:	430b      	orrs	r3, r1
 8012cb4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8012cb6:	b002      	add	sp, #8
 8012cb8:	bc80      	pop	{r7}
 8012cba:	46b8      	mov	r8, r7
 8012cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8012cbe:	4a24      	ldr	r2, [pc, #144]	; (8012d50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012cc0:	69d1      	ldr	r1, [r2, #28]
 8012cc2:	2080      	movs	r0, #128	; 0x80
 8012cc4:	0540      	lsls	r0, r0, #21
 8012cc6:	4301      	orrs	r1, r0
 8012cc8:	61d1      	str	r1, [r2, #28]
 8012cca:	69d3      	ldr	r3, [r2, #28]
 8012ccc:	4003      	ands	r3, r0
 8012cce:	9301      	str	r3, [sp, #4]
 8012cd0:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012cd2:	4a22      	ldr	r2, [pc, #136]	; (8012d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012cd4:	6811      	ldr	r1, [r2, #0]
 8012cd6:	2380      	movs	r3, #128	; 0x80
 8012cd8:	005b      	lsls	r3, r3, #1
 8012cda:	430b      	orrs	r3, r1
 8012cdc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8012cde:	f7fe fa35 	bl	801114c <HAL_GetTick>
 8012ce2:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012ce4:	4f1d      	ldr	r7, [pc, #116]	; (8012d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012ce6:	2680      	movs	r6, #128	; 0x80
 8012ce8:	0076      	lsls	r6, r6, #1
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	4233      	tst	r3, r6
 8012cee:	d106      	bne.n	8012cfe <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012cf0:	f7fe fa2c 	bl	801114c <HAL_GetTick>
 8012cf4:	1b40      	subs	r0, r0, r5
 8012cf6:	2864      	cmp	r0, #100	; 0x64
 8012cf8:	d9f7      	bls.n	8012cea <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8012cfa:	2003      	movs	r0, #3
 8012cfc:	e7db      	b.n	8012cb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012cfe:	4b14      	ldr	r3, [pc, #80]	; (8012d50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012d00:	6a18      	ldr	r0, [r3, #32]
 8012d02:	4a17      	ldr	r2, [pc, #92]	; (8012d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012d04:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8012d06:	6a1d      	ldr	r5, [r3, #32]
 8012d08:	2180      	movs	r1, #128	; 0x80
 8012d0a:	0249      	lsls	r1, r1, #9
 8012d0c:	4329      	orrs	r1, r5
 8012d0e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012d10:	6a19      	ldr	r1, [r3, #32]
 8012d12:	4d14      	ldr	r5, [pc, #80]	; (8012d64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012d14:	4029      	ands	r1, r5
 8012d16:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012d18:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012d1a:	0783      	lsls	r3, r0, #30
 8012d1c:	d407      	bmi.n	8012d2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012d1e:	4a0c      	ldr	r2, [pc, #48]	; (8012d50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012d20:	6a13      	ldr	r3, [r2, #32]
 8012d22:	490f      	ldr	r1, [pc, #60]	; (8012d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012d24:	400b      	ands	r3, r1
 8012d26:	6861      	ldr	r1, [r4, #4]
 8012d28:	430b      	orrs	r3, r1
 8012d2a:	6213      	str	r3, [r2, #32]
 8012d2c:	e790      	b.n	8012c50 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8012d2e:	f7fe fa0d 	bl	801114c <HAL_GetTick>
 8012d32:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012d34:	4f06      	ldr	r7, [pc, #24]	; (8012d50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012d36:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012d38:	4b0b      	ldr	r3, [pc, #44]	; (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8012d3a:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012d3c:	6a3b      	ldr	r3, [r7, #32]
 8012d3e:	421e      	tst	r6, r3
 8012d40:	d1ed      	bne.n	8012d1e <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012d42:	f7fe fa03 	bl	801114c <HAL_GetTick>
 8012d46:	1b40      	subs	r0, r0, r5
 8012d48:	4540      	cmp	r0, r8
 8012d4a:	d9f7      	bls.n	8012d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            return HAL_TIMEOUT;
 8012d4c:	2003      	movs	r0, #3
 8012d4e:	e7b2      	b.n	8012cb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8012d50:	40021000 	.word	0x40021000
 8012d54:	fffcffff 	.word	0xfffcffff
 8012d58:	fff3ffff 	.word	0xfff3ffff
 8012d5c:	40007000 	.word	0x40007000
 8012d60:	fffffcff 	.word	0xfffffcff
 8012d64:	fffeffff 	.word	0xfffeffff
 8012d68:	00001388 	.word	0x00001388

08012d6c <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012d6c:	4770      	bx	lr

08012d6e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d70:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012d72:	6802      	ldr	r2, [r0, #0]
 8012d74:	68d3      	ldr	r3, [r2, #12]
 8012d76:	21a0      	movs	r1, #160	; 0xa0
 8012d78:	438b      	bics	r3, r1
 8012d7a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012d7c:	f7fe f9e6 	bl	801114c <HAL_GetTick>
 8012d80:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012d82:	2620      	movs	r6, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012d84:	27fa      	movs	r7, #250	; 0xfa
 8012d86:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012d88:	6823      	ldr	r3, [r4, #0]
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	421e      	tst	r6, r3
 8012d8e:	d106      	bne.n	8012d9e <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012d90:	f7fe f9dc 	bl	801114c <HAL_GetTick>
 8012d94:	1b40      	subs	r0, r0, r5
 8012d96:	42b8      	cmp	r0, r7
 8012d98:	d9f6      	bls.n	8012d88 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8012d9a:	2003      	movs	r0, #3
 8012d9c:	e000      	b.n	8012da0 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8012d9e:	2000      	movs	r0, #0
}
 8012da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012da2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012da4:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012da6:	6803      	ldr	r3, [r0, #0]
 8012da8:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012daa:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012dac:	0652      	lsls	r2, r2, #25
 8012dae:	d500      	bpl.n	8012db2 <RTC_EnterInitMode+0x10>
}
 8012db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012db2:	2201      	movs	r2, #1
 8012db4:	4252      	negs	r2, r2
 8012db6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012db8:	f7fe f9c8 	bl	801114c <HAL_GetTick>
 8012dbc:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012dbe:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012dc0:	27fa      	movs	r7, #250	; 0xfa
 8012dc2:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012dc4:	6823      	ldr	r3, [r4, #0]
 8012dc6:	68db      	ldr	r3, [r3, #12]
 8012dc8:	421e      	tst	r6, r3
 8012dca:	d106      	bne.n	8012dda <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012dcc:	f7fe f9be 	bl	801114c <HAL_GetTick>
 8012dd0:	1b40      	subs	r0, r0, r5
 8012dd2:	42b8      	cmp	r0, r7
 8012dd4:	d9f6      	bls.n	8012dc4 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8012dd6:	2003      	movs	r0, #3
 8012dd8:	e7ea      	b.n	8012db0 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012dda:	2000      	movs	r0, #0
 8012ddc:	e7e8      	b.n	8012db0 <RTC_EnterInitMode+0xe>
	...

08012de0 <HAL_RTC_Init>:
{
 8012de0:	b570      	push	{r4, r5, r6, lr}
 8012de2:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012de4:	d046      	beq.n	8012e74 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012de6:	7f43      	ldrb	r3, [r0, #29]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d013      	beq.n	8012e14 <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012dec:	2302      	movs	r3, #2
 8012dee:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012df0:	6823      	ldr	r3, [r4, #0]
 8012df2:	22ca      	movs	r2, #202	; 0xca
 8012df4:	625a      	str	r2, [r3, #36]	; 0x24
 8012df6:	6823      	ldr	r3, [r4, #0]
 8012df8:	3a77      	subs	r2, #119	; 0x77
 8012dfa:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012dfc:	0020      	movs	r0, r4
 8012dfe:	f7ff ffd0 	bl	8012da2 <RTC_EnterInitMode>
 8012e02:	2800      	cmp	r0, #0
 8012e04:	d00a      	beq.n	8012e1c <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012e06:	6823      	ldr	r3, [r4, #0]
 8012e08:	22ff      	movs	r2, #255	; 0xff
 8012e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012e0c:	2304      	movs	r3, #4
 8012e0e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012e10:	2001      	movs	r0, #1
}
 8012e12:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012e14:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012e16:	f7ff ffa9 	bl	8012d6c <HAL_RTC_MspInit>
 8012e1a:	e7e7      	b.n	8012dec <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012e1c:	6822      	ldr	r2, [r4, #0]
 8012e1e:	6893      	ldr	r3, [r2, #8]
 8012e20:	4915      	ldr	r1, [pc, #84]	; (8012e78 <HAL_RTC_Init+0x98>)
 8012e22:	400b      	ands	r3, r1
 8012e24:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012e26:	6822      	ldr	r2, [r4, #0]
 8012e28:	6891      	ldr	r1, [r2, #8]
 8012e2a:	6863      	ldr	r3, [r4, #4]
 8012e2c:	6925      	ldr	r5, [r4, #16]
 8012e2e:	432b      	orrs	r3, r5
 8012e30:	6965      	ldr	r5, [r4, #20]
 8012e32:	432b      	orrs	r3, r5
 8012e34:	430b      	orrs	r3, r1
 8012e36:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012e38:	6823      	ldr	r3, [r4, #0]
 8012e3a:	68e2      	ldr	r2, [r4, #12]
 8012e3c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012e3e:	6822      	ldr	r2, [r4, #0]
 8012e40:	6911      	ldr	r1, [r2, #16]
 8012e42:	68a3      	ldr	r3, [r4, #8]
 8012e44:	041b      	lsls	r3, r3, #16
 8012e46:	430b      	orrs	r3, r1
 8012e48:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012e4a:	6822      	ldr	r2, [r4, #0]
 8012e4c:	68d3      	ldr	r3, [r2, #12]
 8012e4e:	2180      	movs	r1, #128	; 0x80
 8012e50:	438b      	bics	r3, r1
 8012e52:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012e54:	6822      	ldr	r2, [r4, #0]
 8012e56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012e58:	4908      	ldr	r1, [pc, #32]	; (8012e7c <HAL_RTC_Init+0x9c>)
 8012e5a:	400b      	ands	r3, r1
 8012e5c:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012e5e:	6822      	ldr	r2, [r4, #0]
 8012e60:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012e62:	69a1      	ldr	r1, [r4, #24]
 8012e64:	430b      	orrs	r3, r1
 8012e66:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012e68:	6823      	ldr	r3, [r4, #0]
 8012e6a:	22ff      	movs	r2, #255	; 0xff
 8012e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012e6e:	2301      	movs	r3, #1
 8012e70:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8012e72:	e7ce      	b.n	8012e12 <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 8012e74:	2001      	movs	r0, #1
 8012e76:	e7cc      	b.n	8012e12 <HAL_RTC_Init+0x32>
 8012e78:	ff8fffbf 	.word	0xff8fffbf
 8012e7c:	fffbffff 	.word	0xfffbffff

08012e80 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8012e80:	2809      	cmp	r0, #9
 8012e82:	d909      	bls.n	8012e98 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8012e84:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8012e86:	3301      	adds	r3, #1
    Value -= 10;
 8012e88:	380a      	subs	r0, #10
 8012e8a:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012e8c:	2809      	cmp	r0, #9
 8012e8e:	d8fa      	bhi.n	8012e86 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012e90:	011b      	lsls	r3, r3, #4
 8012e92:	4318      	orrs	r0, r3
 8012e94:	b2c0      	uxtb	r0, r0
}
 8012e96:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	e7f9      	b.n	8012e90 <RTC_ByteToBcd2+0x10>

08012e9c <HAL_RTC_SetTime>:
{
 8012e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e9e:	0004      	movs	r4, r0
 8012ea0:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012ea2:	7f03      	ldrb	r3, [r0, #28]
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	d100      	bne.n	8012eaa <HAL_RTC_SetTime+0xe>
 8012ea8:	e072      	b.n	8012f90 <HAL_RTC_SetTime+0xf4>
 8012eaa:	2301      	movs	r3, #1
 8012eac:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012eae:	3301      	adds	r3, #1
 8012eb0:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012eb2:	2a00      	cmp	r2, #0
 8012eb4:	d144      	bne.n	8012f40 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012eb6:	6803      	ldr	r3, [r0, #0]
 8012eb8:	689b      	ldr	r3, [r3, #8]
 8012eba:	065b      	lsls	r3, r3, #25
 8012ebc:	d401      	bmi.n	8012ec2 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012ec2:	7830      	ldrb	r0, [r6, #0]
 8012ec4:	f7ff ffdc 	bl	8012e80 <RTC_ByteToBcd2>
 8012ec8:	0005      	movs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012eca:	7870      	ldrb	r0, [r6, #1]
 8012ecc:	f7ff ffd8 	bl	8012e80 <RTC_ByteToBcd2>
 8012ed0:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012ed2:	78b0      	ldrb	r0, [r6, #2]
 8012ed4:	f7ff ffd4 	bl	8012e80 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012ed8:	7a33      	ldrb	r3, [r6, #8]
 8012eda:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012edc:	4303      	orrs	r3, r0
 8012ede:	042d      	lsls	r5, r5, #16
 8012ee0:	431d      	orrs	r5, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012ee2:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012ee4:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012ee6:	6823      	ldr	r3, [r4, #0]
 8012ee8:	22ca      	movs	r2, #202	; 0xca
 8012eea:	625a      	str	r2, [r3, #36]	; 0x24
 8012eec:	6823      	ldr	r3, [r4, #0]
 8012eee:	3a77      	subs	r2, #119	; 0x77
 8012ef0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012ef2:	0020      	movs	r0, r4
 8012ef4:	f7ff ff55 	bl	8012da2 <RTC_EnterInitMode>
 8012ef8:	1e07      	subs	r7, r0, #0
 8012efa:	d132      	bne.n	8012f62 <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012efc:	6823      	ldr	r3, [r4, #0]
 8012efe:	4825      	ldr	r0, [pc, #148]	; (8012f94 <HAL_RTC_SetTime+0xf8>)
 8012f00:	4005      	ands	r5, r0
 8012f02:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012f04:	6822      	ldr	r2, [r4, #0]
 8012f06:	6893      	ldr	r3, [r2, #8]
 8012f08:	4923      	ldr	r1, [pc, #140]	; (8012f98 <HAL_RTC_SetTime+0xfc>)
 8012f0a:	400b      	ands	r3, r1
 8012f0c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012f0e:	6822      	ldr	r2, [r4, #0]
 8012f10:	6891      	ldr	r1, [r2, #8]
 8012f12:	68f3      	ldr	r3, [r6, #12]
 8012f14:	6930      	ldr	r0, [r6, #16]
 8012f16:	4303      	orrs	r3, r0
 8012f18:	430b      	orrs	r3, r1
 8012f1a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012f1c:	6822      	ldr	r2, [r4, #0]
 8012f1e:	68d3      	ldr	r3, [r2, #12]
 8012f20:	2180      	movs	r1, #128	; 0x80
 8012f22:	438b      	bics	r3, r1
 8012f24:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012f26:	6823      	ldr	r3, [r4, #0]
 8012f28:	689b      	ldr	r3, [r3, #8]
 8012f2a:	069b      	lsls	r3, r3, #26
 8012f2c:	d522      	bpl.n	8012f74 <HAL_RTC_SetTime+0xd8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012f2e:	6823      	ldr	r3, [r4, #0]
 8012f30:	22ff      	movs	r2, #255	; 0xff
 8012f32:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012f34:	2301      	movs	r3, #1
 8012f36:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012f38:	2300      	movs	r3, #0
 8012f3a:	7723      	strb	r3, [r4, #28]
}
 8012f3c:	0038      	movs	r0, r7
 8012f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012f40:	6803      	ldr	r3, [r0, #0]
 8012f42:	689b      	ldr	r3, [r3, #8]
 8012f44:	065b      	lsls	r3, r3, #25
 8012f46:	d401      	bmi.n	8012f4c <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012f4c:	7835      	ldrb	r5, [r6, #0]
 8012f4e:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012f50:	7870      	ldrb	r0, [r6, #1]
 8012f52:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012f54:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012f56:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012f58:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012f5a:	7a30      	ldrb	r0, [r6, #8]
 8012f5c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012f5e:	4305      	orrs	r5, r0
 8012f60:	e7c1      	b.n	8012ee6 <HAL_RTC_SetTime+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012f62:	6823      	ldr	r3, [r4, #0]
 8012f64:	22ff      	movs	r2, #255	; 0xff
 8012f66:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012f68:	2304      	movs	r3, #4
 8012f6a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012f70:	2701      	movs	r7, #1
 8012f72:	e7e3      	b.n	8012f3c <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012f74:	0020      	movs	r0, r4
 8012f76:	f7ff fefa 	bl	8012d6e <HAL_RTC_WaitForSynchro>
 8012f7a:	2800      	cmp	r0, #0
 8012f7c:	d0d7      	beq.n	8012f2e <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012f7e:	6823      	ldr	r3, [r4, #0]
 8012f80:	22ff      	movs	r2, #255	; 0xff
 8012f82:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012f84:	2304      	movs	r3, #4
 8012f86:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012f88:	2300      	movs	r3, #0
 8012f8a:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012f8c:	2701      	movs	r7, #1
 8012f8e:	e7d5      	b.n	8012f3c <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8012f90:	2702      	movs	r7, #2
 8012f92:	e7d3      	b.n	8012f3c <HAL_RTC_SetTime+0xa0>
 8012f94:	007f7f7f 	.word	0x007f7f7f
 8012f98:	fffbffff 	.word	0xfffbffff

08012f9c <HAL_RTC_SetDate>:
{
 8012f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f9e:	46c6      	mov	lr, r8
 8012fa0:	b500      	push	{lr}
 8012fa2:	0004      	movs	r4, r0
 8012fa4:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012fa6:	7f03      	ldrb	r3, [r0, #28]
 8012fa8:	2b01      	cmp	r3, #1
 8012faa:	d037      	beq.n	801301c <HAL_RTC_SetDate+0x80>
 8012fac:	2301      	movs	r3, #1
 8012fae:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012fb0:	3301      	adds	r3, #1
 8012fb2:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012fb4:	2a00      	cmp	r2, #0
 8012fb6:	d133      	bne.n	8013020 <HAL_RTC_SetDate+0x84>
 8012fb8:	784b      	ldrb	r3, [r1, #1]
 8012fba:	06da      	lsls	r2, r3, #27
 8012fbc:	d503      	bpl.n	8012fc6 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012fbe:	2210      	movs	r2, #16
 8012fc0:	4393      	bics	r3, r2
 8012fc2:	330a      	adds	r3, #10
 8012fc4:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012fc6:	78f0      	ldrb	r0, [r6, #3]
 8012fc8:	f7ff ff5a 	bl	8012e80 <RTC_ByteToBcd2>
 8012fcc:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012fce:	7870      	ldrb	r0, [r6, #1]
 8012fd0:	f7ff ff56 	bl	8012e80 <RTC_ByteToBcd2>
 8012fd4:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012fd6:	78b0      	ldrb	r0, [r6, #2]
 8012fd8:	f7ff ff52 	bl	8012e80 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012fdc:	7833      	ldrb	r3, [r6, #0]
 8012fde:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012fe0:	4303      	orrs	r3, r0
 8012fe2:	042d      	lsls	r5, r5, #16
 8012fe4:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012fe6:	4643      	mov	r3, r8
 8012fe8:	0218      	lsls	r0, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012fea:	4305      	orrs	r5, r0
 8012fec:	e022      	b.n	8013034 <HAL_RTC_SetDate+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012fee:	6823      	ldr	r3, [r4, #0]
 8012ff0:	22ff      	movs	r2, #255	; 0xff
 8012ff2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012ff4:	2304      	movs	r3, #4
 8012ff6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012ffc:	2601      	movs	r6, #1
 8012ffe:	e038      	b.n	8013072 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013000:	0020      	movs	r0, r4
 8013002:	f7ff feb4 	bl	8012d6e <HAL_RTC_WaitForSynchro>
 8013006:	2800      	cmp	r0, #0
 8013008:	d02c      	beq.n	8013064 <HAL_RTC_SetDate+0xc8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801300a:	6823      	ldr	r3, [r4, #0]
 801300c:	22ff      	movs	r2, #255	; 0xff
 801300e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013010:	2304      	movs	r3, #4
 8013012:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8013014:	2300      	movs	r3, #0
 8013016:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8013018:	2601      	movs	r6, #1
 801301a:	e02a      	b.n	8013072 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 801301c:	2602      	movs	r6, #2
 801301e:	e028      	b.n	8013072 <HAL_RTC_SetDate+0xd6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013020:	78cd      	ldrb	r5, [r1, #3]
 8013022:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8013024:	7848      	ldrb	r0, [r1, #1]
 8013026:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013028:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 801302a:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 801302c:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 801302e:	7808      	ldrb	r0, [r1, #0]
 8013030:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013032:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013034:	6823      	ldr	r3, [r4, #0]
 8013036:	22ca      	movs	r2, #202	; 0xca
 8013038:	625a      	str	r2, [r3, #36]	; 0x24
 801303a:	6823      	ldr	r3, [r4, #0]
 801303c:	3a77      	subs	r2, #119	; 0x77
 801303e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013040:	0020      	movs	r0, r4
 8013042:	f7ff feae 	bl	8012da2 <RTC_EnterInitMode>
 8013046:	1e06      	subs	r6, r0, #0
 8013048:	d1d1      	bne.n	8012fee <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801304a:	6823      	ldr	r3, [r4, #0]
 801304c:	480b      	ldr	r0, [pc, #44]	; (801307c <HAL_RTC_SetDate+0xe0>)
 801304e:	4005      	ands	r5, r0
 8013050:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013052:	6822      	ldr	r2, [r4, #0]
 8013054:	68d3      	ldr	r3, [r2, #12]
 8013056:	2180      	movs	r1, #128	; 0x80
 8013058:	438b      	bics	r3, r1
 801305a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801305c:	6823      	ldr	r3, [r4, #0]
 801305e:	689b      	ldr	r3, [r3, #8]
 8013060:	069b      	lsls	r3, r3, #26
 8013062:	d5cd      	bpl.n	8013000 <HAL_RTC_SetDate+0x64>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013064:	6823      	ldr	r3, [r4, #0]
 8013066:	22ff      	movs	r2, #255	; 0xff
 8013068:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 801306a:	2301      	movs	r3, #1
 801306c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 801306e:	2300      	movs	r3, #0
 8013070:	7723      	strb	r3, [r4, #28]
}
 8013072:	0030      	movs	r0, r6
 8013074:	bc80      	pop	{r7}
 8013076:	46b8      	mov	r8, r7
 8013078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801307a:	46c0      	nop			; (mov r8, r8)
 801307c:	00ffff3f 	.word	0x00ffff3f

08013080 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8013080:	0003      	movs	r3, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8013082:	0902      	lsrs	r2, r0, #4
 8013084:	0090      	lsls	r0, r2, #2
 8013086:	1880      	adds	r0, r0, r2
 8013088:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801308a:	220f      	movs	r2, #15
 801308c:	4013      	ands	r3, r2
 801308e:	18c0      	adds	r0, r0, r3
 8013090:	b2c0      	uxtb	r0, r0
}
 8013092:	4770      	bx	lr

08013094 <HAL_RTC_GetTime>:
{
 8013094:	b570      	push	{r4, r5, r6, lr}
 8013096:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013098:	6803      	ldr	r3, [r0, #0]
 801309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801309c:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 801309e:	6803      	ldr	r3, [r0, #0]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	490e      	ldr	r1, [pc, #56]	; (80130dc <HAL_RTC_GetTime+0x48>)
 80130a4:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80130a6:	0c19      	lsrs	r1, r3, #16
 80130a8:	203f      	movs	r0, #63	; 0x3f
 80130aa:	4008      	ands	r0, r1
 80130ac:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80130ae:	0a1e      	lsrs	r6, r3, #8
 80130b0:	b2f6      	uxtb	r6, r6
 80130b2:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80130b4:	b2dd      	uxtb	r5, r3
 80130b6:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80130b8:	2340      	movs	r3, #64	; 0x40
 80130ba:	400b      	ands	r3, r1
 80130bc:	7223      	strb	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 80130be:	2a00      	cmp	r2, #0
 80130c0:	d10a      	bne.n	80130d8 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80130c2:	f7ff ffdd 	bl	8013080 <RTC_Bcd2ToByte>
 80130c6:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80130c8:	0030      	movs	r0, r6
 80130ca:	f7ff ffd9 	bl	8013080 <RTC_Bcd2ToByte>
 80130ce:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80130d0:	0028      	movs	r0, r5
 80130d2:	f7ff ffd5 	bl	8013080 <RTC_Bcd2ToByte>
 80130d6:	70a0      	strb	r0, [r4, #2]
}
 80130d8:	2000      	movs	r0, #0
 80130da:	bd70      	pop	{r4, r5, r6, pc}
 80130dc:	007f7f7f 	.word	0x007f7f7f

080130e0 <HAL_RTC_GetDate>:
{
 80130e0:	b570      	push	{r4, r5, r6, lr}
 80130e2:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80130e4:	6803      	ldr	r3, [r0, #0]
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	490d      	ldr	r1, [pc, #52]	; (8013120 <HAL_RTC_GetDate+0x40>)
 80130ea:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80130ec:	0c18      	lsrs	r0, r3, #16
 80130ee:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80130f0:	04dd      	lsls	r5, r3, #19
 80130f2:	0eed      	lsrs	r5, r5, #27
 80130f4:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80130f6:	b2de      	uxtb	r6, r3
 80130f8:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80130fa:	041b      	lsls	r3, r3, #16
 80130fc:	0f5b      	lsrs	r3, r3, #29
 80130fe:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8013100:	2a00      	cmp	r2, #0
 8013102:	d10a      	bne.n	801311a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013104:	f7ff ffbc 	bl	8013080 <RTC_Bcd2ToByte>
 8013108:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801310a:	0028      	movs	r0, r5
 801310c:	f7ff ffb8 	bl	8013080 <RTC_Bcd2ToByte>
 8013110:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8013112:	0030      	movs	r0, r6
 8013114:	f7ff ffb4 	bl	8013080 <RTC_Bcd2ToByte>
 8013118:	70a0      	strb	r0, [r4, #2]
}
 801311a:	2000      	movs	r0, #0
 801311c:	bd70      	pop	{r4, r5, r6, pc}
 801311e:	46c0      	nop			; (mov r8, r8)
 8013120:	00ffff3f 	.word	0x00ffff3f

08013124 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013124:	6803      	ldr	r3, [r0, #0]
 8013126:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013128:	0089      	lsls	r1, r1, #2
 801312a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801312c:	600a      	str	r2, [r1, #0]
}
 801312e:	4770      	bx	lr

08013130 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013130:	6803      	ldr	r3, [r0, #0]
 8013132:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013134:	0089      	lsls	r1, r1, #2
 8013136:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8013138:	6808      	ldr	r0, [r1, #0]
}
 801313a:	4770      	bx	lr

0801313c <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801313c:	4770      	bx	lr

0801313e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801313e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8013140:	2239      	movs	r2, #57	; 0x39
 8013142:	2302      	movs	r3, #2
 8013144:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013146:	6804      	ldr	r4, [r0, #0]
 8013148:	6823      	ldr	r3, [r4, #0]
 801314a:	2101      	movs	r1, #1
 801314c:	430b      	orrs	r3, r1
 801314e:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8013150:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8013152:	2000      	movs	r0, #0
 8013154:	bd10      	pop	{r4, pc}
	...

08013158 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8013158:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801315a:	4a2f      	ldr	r2, [pc, #188]	; (8013218 <TIM_Base_SetConfig+0xc0>)
 801315c:	4290      	cmp	r0, r2
 801315e:	d044      	beq.n	80131ea <TIM_Base_SetConfig+0x92>
 8013160:	2280      	movs	r2, #128	; 0x80
 8013162:	05d2      	lsls	r2, r2, #23
 8013164:	4290      	cmp	r0, r2
 8013166:	d032      	beq.n	80131ce <TIM_Base_SetConfig+0x76>
 8013168:	4a2c      	ldr	r2, [pc, #176]	; (801321c <TIM_Base_SetConfig+0xc4>)
 801316a:	4290      	cmp	r0, r2
 801316c:	d04f      	beq.n	801320e <TIM_Base_SetConfig+0xb6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801316e:	4a2c      	ldr	r2, [pc, #176]	; (8013220 <TIM_Base_SetConfig+0xc8>)
 8013170:	4290      	cmp	r0, r2
 8013172:	d030      	beq.n	80131d6 <TIM_Base_SetConfig+0x7e>
 8013174:	4a2b      	ldr	r2, [pc, #172]	; (8013224 <TIM_Base_SetConfig+0xcc>)
 8013176:	4290      	cmp	r0, r2
 8013178:	d01f      	beq.n	80131ba <TIM_Base_SetConfig+0x62>
 801317a:	4a2b      	ldr	r2, [pc, #172]	; (8013228 <TIM_Base_SetConfig+0xd0>)
 801317c:	4290      	cmp	r0, r2
 801317e:	d012      	beq.n	80131a6 <TIM_Base_SetConfig+0x4e>
 8013180:	4a2a      	ldr	r2, [pc, #168]	; (801322c <TIM_Base_SetConfig+0xd4>)
 8013182:	4290      	cmp	r0, r2
 8013184:	d005      	beq.n	8013192 <TIM_Base_SetConfig+0x3a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8013186:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013188:	688b      	ldr	r3, [r1, #8]
 801318a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801318c:	680b      	ldr	r3, [r1, #0]
 801318e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013190:	e03a      	b.n	8013208 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8013192:	4a27      	ldr	r2, [pc, #156]	; (8013230 <TIM_Base_SetConfig+0xd8>)
 8013194:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013196:	68ca      	ldr	r2, [r1, #12]
 8013198:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801319a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801319c:	688b      	ldr	r3, [r1, #8]
 801319e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80131a0:	680b      	ldr	r3, [r1, #0]
 80131a2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80131a4:	e02e      	b.n	8013204 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 80131a6:	4a22      	ldr	r2, [pc, #136]	; (8013230 <TIM_Base_SetConfig+0xd8>)
 80131a8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80131aa:	68ca      	ldr	r2, [r1, #12]
 80131ac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80131ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80131b0:	688b      	ldr	r3, [r1, #8]
 80131b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80131b4:	680b      	ldr	r3, [r1, #0]
 80131b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80131b8:	e024      	b.n	8013204 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 80131ba:	4a1d      	ldr	r2, [pc, #116]	; (8013230 <TIM_Base_SetConfig+0xd8>)
 80131bc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80131be:	68ca      	ldr	r2, [r1, #12]
 80131c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80131c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80131c4:	688b      	ldr	r3, [r1, #8]
 80131c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80131c8:	680b      	ldr	r3, [r1, #0]
 80131ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80131cc:	e01a      	b.n	8013204 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80131ce:	2270      	movs	r2, #112	; 0x70
 80131d0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80131d2:	684a      	ldr	r2, [r1, #4]
 80131d4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80131d6:	4a16      	ldr	r2, [pc, #88]	; (8013230 <TIM_Base_SetConfig+0xd8>)
 80131d8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80131da:	68ca      	ldr	r2, [r1, #12]
 80131dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80131de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80131e0:	688b      	ldr	r3, [r1, #8]
 80131e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80131e4:	680b      	ldr	r3, [r1, #0]
 80131e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80131e8:	e00e      	b.n	8013208 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80131ea:	2270      	movs	r2, #112	; 0x70
 80131ec:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80131ee:	684a      	ldr	r2, [r1, #4]
 80131f0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80131f2:	4a0f      	ldr	r2, [pc, #60]	; (8013230 <TIM_Base_SetConfig+0xd8>)
 80131f4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80131f6:	68ca      	ldr	r2, [r1, #12]
 80131f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80131fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80131fc:	688b      	ldr	r3, [r1, #8]
 80131fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013200:	680b      	ldr	r3, [r1, #0]
 8013202:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013204:	690b      	ldr	r3, [r1, #16]
 8013206:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8013208:	2301      	movs	r3, #1
 801320a:	6143      	str	r3, [r0, #20]
}
 801320c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801320e:	2270      	movs	r2, #112	; 0x70
 8013210:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8013212:	684a      	ldr	r2, [r1, #4]
 8013214:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013216:	e7de      	b.n	80131d6 <TIM_Base_SetConfig+0x7e>
 8013218:	40012c00 	.word	0x40012c00
 801321c:	40000400 	.word	0x40000400
 8013220:	40002000 	.word	0x40002000
 8013224:	40014000 	.word	0x40014000
 8013228:	40014400 	.word	0x40014400
 801322c:	40014800 	.word	0x40014800
 8013230:	fffffcff 	.word	0xfffffcff

08013234 <HAL_TIM_Base_Init>:
{
 8013234:	b570      	push	{r4, r5, r6, lr}
 8013236:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8013238:	d014      	beq.n	8013264 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801323a:	2339      	movs	r3, #57	; 0x39
 801323c:	5cc3      	ldrb	r3, [r0, r3]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d00a      	beq.n	8013258 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8013242:	2539      	movs	r5, #57	; 0x39
 8013244:	2302      	movs	r3, #2
 8013246:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013248:	0021      	movs	r1, r4
 801324a:	c901      	ldmia	r1!, {r0}
 801324c:	f7ff ff84 	bl	8013158 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8013250:	2301      	movs	r3, #1
 8013252:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8013254:	2000      	movs	r0, #0
}
 8013256:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8013258:	3338      	adds	r3, #56	; 0x38
 801325a:	2200      	movs	r2, #0
 801325c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 801325e:	f7ff ff6d 	bl	801313c <HAL_TIM_Base_MspInit>
 8013262:	e7ee      	b.n	8013242 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8013264:	2001      	movs	r0, #1
 8013266:	e7f6      	b.n	8013256 <HAL_TIM_Base_Init+0x22>

08013268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8013268:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801326a:	2338      	movs	r3, #56	; 0x38
 801326c:	5cc3      	ldrb	r3, [r0, r3]
 801326e:	2b01      	cmp	r3, #1
 8013270:	d01e      	beq.n	80132b0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8013272:	2238      	movs	r2, #56	; 0x38
 8013274:	2501      	movs	r5, #1
 8013276:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8013278:	2439      	movs	r4, #57	; 0x39
 801327a:	2302      	movs	r3, #2
 801327c:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801327e:	6806      	ldr	r6, [r0, #0]
 8013280:	6873      	ldr	r3, [r6, #4]
 8013282:	2770      	movs	r7, #112	; 0x70
 8013284:	43bb      	bics	r3, r7
 8013286:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8013288:	6806      	ldr	r6, [r0, #0]
 801328a:	6873      	ldr	r3, [r6, #4]
 801328c:	680f      	ldr	r7, [r1, #0]
 801328e:	433b      	orrs	r3, r7
 8013290:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8013292:	6806      	ldr	r6, [r0, #0]
 8013294:	68b3      	ldr	r3, [r6, #8]
 8013296:	2780      	movs	r7, #128	; 0x80
 8013298:	43bb      	bics	r3, r7
 801329a:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 801329c:	6806      	ldr	r6, [r0, #0]
 801329e:	68b3      	ldr	r3, [r6, #8]
 80132a0:	6849      	ldr	r1, [r1, #4]
 80132a2:	430b      	orrs	r3, r1
 80132a4:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80132a6:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80132a8:	2300      	movs	r3, #0
 80132aa:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80132ac:	2000      	movs	r0, #0
}
 80132ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80132b0:	2002      	movs	r0, #2
 80132b2:	e7fc      	b.n	80132ae <HAL_TIMEx_MasterConfigSynchronization+0x46>

080132b4 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80132b4:	4770      	bx	lr

080132b6 <HAL_UART_DeInit>:
{
 80132b6:	b570      	push	{r4, r5, r6, lr}
 80132b8:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80132ba:	d016      	beq.n	80132ea <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 80132bc:	2669      	movs	r6, #105	; 0x69
 80132be:	2302      	movs	r3, #2
 80132c0:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 80132c2:	6802      	ldr	r2, [r0, #0]
 80132c4:	6813      	ldr	r3, [r2, #0]
 80132c6:	2101      	movs	r1, #1
 80132c8:	438b      	bics	r3, r1
 80132ca:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 80132cc:	6803      	ldr	r3, [r0, #0]
 80132ce:	2500      	movs	r5, #0
 80132d0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80132d2:	6803      	ldr	r3, [r0, #0]
 80132d4:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80132d6:	6803      	ldr	r3, [r0, #0]
 80132d8:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80132da:	f7ff ffeb 	bl	80132b4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132de:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 80132e0:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 80132e2:	2368      	movs	r3, #104	; 0x68
 80132e4:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 80132e6:	2000      	movs	r0, #0
}
 80132e8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80132ea:	2001      	movs	r0, #1
 80132ec:	e7fc      	b.n	80132e8 <HAL_UART_DeInit+0x32>

080132ee <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80132ee:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80132f0:	2369      	movs	r3, #105	; 0x69
 80132f2:	5cc3      	ldrb	r3, [r0, r3]
 80132f4:	2b01      	cmp	r3, #1
 80132f6:	d003      	beq.n	8013300 <HAL_UART_Transmit_IT+0x12>
 80132f8:	2369      	movs	r3, #105	; 0x69
 80132fa:	5cc3      	ldrb	r3, [r0, r3]
 80132fc:	2b22      	cmp	r3, #34	; 0x22
 80132fe:	d12b      	bne.n	8013358 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8013300:	2900      	cmp	r1, #0
 8013302:	d02b      	beq.n	801335c <HAL_UART_Transmit_IT+0x6e>
 8013304:	2a00      	cmp	r2, #0
 8013306:	d02b      	beq.n	8013360 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013308:	2368      	movs	r3, #104	; 0x68
 801330a:	5cc3      	ldrb	r3, [r0, r3]
 801330c:	2b01      	cmp	r3, #1
 801330e:	d029      	beq.n	8013364 <HAL_UART_Transmit_IT+0x76>
 8013310:	2368      	movs	r3, #104	; 0x68
 8013312:	2401      	movs	r4, #1
 8013314:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 8013316:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8013318:	3b18      	subs	r3, #24
 801331a:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 801331c:	3302      	adds	r3, #2
 801331e:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013320:	2300      	movs	r3, #0
 8013322:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013324:	3369      	adds	r3, #105	; 0x69
 8013326:	5cc3      	ldrb	r3, [r0, r3]
 8013328:	2b22      	cmp	r3, #34	; 0x22
 801332a:	d011      	beq.n	8013350 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 801332c:	2369      	movs	r3, #105	; 0x69
 801332e:	2212      	movs	r2, #18
 8013330:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013332:	6802      	ldr	r2, [r0, #0]
 8013334:	6893      	ldr	r3, [r2, #8]
 8013336:	2101      	movs	r1, #1
 8013338:	430b      	orrs	r3, r1
 801333a:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801333c:	2368      	movs	r3, #104	; 0x68
 801333e:	2200      	movs	r2, #0
 8013340:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8013342:	6802      	ldr	r2, [r0, #0]
 8013344:	6813      	ldr	r3, [r2, #0]
 8013346:	317f      	adds	r1, #127	; 0x7f
 8013348:	430b      	orrs	r3, r1
 801334a:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 801334c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801334e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013350:	3347      	adds	r3, #71	; 0x47
 8013352:	2232      	movs	r2, #50	; 0x32
 8013354:	54c2      	strb	r2, [r0, r3]
 8013356:	e7ec      	b.n	8013332 <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 8013358:	2002      	movs	r0, #2
 801335a:	e7f8      	b.n	801334e <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 801335c:	2001      	movs	r0, #1
 801335e:	e7f6      	b.n	801334e <HAL_UART_Transmit_IT+0x60>
 8013360:	2001      	movs	r0, #1
 8013362:	e7f4      	b.n	801334e <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 8013364:	2002      	movs	r0, #2
 8013366:	e7f2      	b.n	801334e <HAL_UART_Transmit_IT+0x60>

08013368 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013368:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801336a:	2369      	movs	r3, #105	; 0x69
 801336c:	5cc3      	ldrb	r3, [r0, r3]
 801336e:	2b01      	cmp	r3, #1
 8013370:	d003      	beq.n	801337a <HAL_UART_Receive_IT+0x12>
 8013372:	2369      	movs	r3, #105	; 0x69
 8013374:	5cc3      	ldrb	r3, [r0, r3]
 8013376:	2b12      	cmp	r3, #18
 8013378:	d15d      	bne.n	8013436 <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 801337a:	2900      	cmp	r1, #0
 801337c:	d05d      	beq.n	801343a <HAL_UART_Receive_IT+0xd2>
 801337e:	2a00      	cmp	r2, #0
 8013380:	d05d      	beq.n	801343e <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013382:	2368      	movs	r3, #104	; 0x68
 8013384:	5cc3      	ldrb	r3, [r0, r3]
 8013386:	2b01      	cmp	r3, #1
 8013388:	d05b      	beq.n	8013442 <HAL_UART_Receive_IT+0xda>
 801338a:	2368      	movs	r3, #104	; 0x68
 801338c:	2401      	movs	r4, #1
 801338e:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 8013390:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8013392:	3b10      	subs	r3, #16
 8013394:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8013396:	3302      	adds	r3, #2
 8013398:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801339a:	6883      	ldr	r3, [r0, #8]
 801339c:	2280      	movs	r2, #128	; 0x80
 801339e:	0152      	lsls	r2, r2, #5
 80133a0:	4293      	cmp	r3, r2
 80133a2:	d008      	beq.n	80133b6 <HAL_UART_Receive_IT+0x4e>
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d115      	bne.n	80133d4 <HAL_UART_Receive_IT+0x6c>
 80133a8:	6903      	ldr	r3, [r0, #16]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d10e      	bne.n	80133cc <HAL_UART_Receive_IT+0x64>
 80133ae:	335c      	adds	r3, #92	; 0x5c
 80133b0:	22ff      	movs	r2, #255	; 0xff
 80133b2:	52c2      	strh	r2, [r0, r3]
 80133b4:	e012      	b.n	80133dc <HAL_UART_Receive_IT+0x74>
 80133b6:	6903      	ldr	r3, [r0, #16]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d103      	bne.n	80133c4 <HAL_UART_Receive_IT+0x5c>
 80133bc:	335c      	adds	r3, #92	; 0x5c
 80133be:	4a22      	ldr	r2, [pc, #136]	; (8013448 <HAL_UART_Receive_IT+0xe0>)
 80133c0:	52c2      	strh	r2, [r0, r3]
 80133c2:	e00b      	b.n	80133dc <HAL_UART_Receive_IT+0x74>
 80133c4:	235c      	movs	r3, #92	; 0x5c
 80133c6:	22ff      	movs	r2, #255	; 0xff
 80133c8:	52c2      	strh	r2, [r0, r3]
 80133ca:	e007      	b.n	80133dc <HAL_UART_Receive_IT+0x74>
 80133cc:	235c      	movs	r3, #92	; 0x5c
 80133ce:	227f      	movs	r2, #127	; 0x7f
 80133d0:	52c2      	strh	r2, [r0, r3]
 80133d2:	e003      	b.n	80133dc <HAL_UART_Receive_IT+0x74>
 80133d4:	2280      	movs	r2, #128	; 0x80
 80133d6:	0552      	lsls	r2, r2, #21
 80133d8:	4293      	cmp	r3, r2
 80133da:	d01d      	beq.n	8013418 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133dc:	2300      	movs	r3, #0
 80133de:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80133e0:	3369      	adds	r3, #105	; 0x69
 80133e2:	5cc3      	ldrb	r3, [r0, r3]
 80133e4:	2b12      	cmp	r3, #18
 80133e6:	d022      	beq.n	801342e <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80133e8:	2369      	movs	r3, #105	; 0x69
 80133ea:	2222      	movs	r2, #34	; 0x22
 80133ec:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80133ee:	6802      	ldr	r2, [r0, #0]
 80133f0:	6811      	ldr	r1, [r2, #0]
 80133f2:	2380      	movs	r3, #128	; 0x80
 80133f4:	005b      	lsls	r3, r3, #1
 80133f6:	430b      	orrs	r3, r1
 80133f8:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80133fa:	6802      	ldr	r2, [r0, #0]
 80133fc:	6893      	ldr	r3, [r2, #8]
 80133fe:	2101      	movs	r1, #1
 8013400:	430b      	orrs	r3, r1
 8013402:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013404:	2368      	movs	r3, #104	; 0x68
 8013406:	2200      	movs	r2, #0
 8013408:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801340a:	6802      	ldr	r2, [r0, #0]
 801340c:	6813      	ldr	r3, [r2, #0]
 801340e:	311f      	adds	r1, #31
 8013410:	430b      	orrs	r3, r1
 8013412:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8013414:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013416:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8013418:	6903      	ldr	r3, [r0, #16]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d103      	bne.n	8013426 <HAL_UART_Receive_IT+0xbe>
 801341e:	335c      	adds	r3, #92	; 0x5c
 8013420:	227f      	movs	r2, #127	; 0x7f
 8013422:	52c2      	strh	r2, [r0, r3]
 8013424:	e7da      	b.n	80133dc <HAL_UART_Receive_IT+0x74>
 8013426:	235c      	movs	r3, #92	; 0x5c
 8013428:	223f      	movs	r2, #63	; 0x3f
 801342a:	52c2      	strh	r2, [r0, r3]
 801342c:	e7d6      	b.n	80133dc <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801342e:	3357      	adds	r3, #87	; 0x57
 8013430:	2232      	movs	r2, #50	; 0x32
 8013432:	54c2      	strb	r2, [r0, r3]
 8013434:	e7db      	b.n	80133ee <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 8013436:	2002      	movs	r0, #2
 8013438:	e7ed      	b.n	8013416 <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 801343a:	2001      	movs	r0, #1
 801343c:	e7eb      	b.n	8013416 <HAL_UART_Receive_IT+0xae>
 801343e:	2001      	movs	r0, #1
 8013440:	e7e9      	b.n	8013416 <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 8013442:	2002      	movs	r0, #2
 8013444:	e7e7      	b.n	8013416 <HAL_UART_Receive_IT+0xae>
 8013446:	46c0      	nop			; (mov r8, r8)
 8013448:	000001ff 	.word	0x000001ff

0801344c <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801344c:	b510      	push	{r4, lr}
 801344e:	0004      	movs	r4, r0
 8013450:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013452:	2269      	movs	r2, #105	; 0x69
 8013454:	5c82      	ldrb	r2, [r0, r2]
 8013456:	2a01      	cmp	r2, #1
 8013458:	d003      	beq.n	8013462 <HAL_UART_Transmit_DMA+0x16>
 801345a:	2269      	movs	r2, #105	; 0x69
 801345c:	5c82      	ldrb	r2, [r0, r2]
 801345e:	2a22      	cmp	r2, #34	; 0x22
 8013460:	d137      	bne.n	80134d2 <HAL_UART_Transmit_DMA+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 8013462:	2900      	cmp	r1, #0
 8013464:	d037      	beq.n	80134d6 <HAL_UART_Transmit_DMA+0x8a>
 8013466:	2b00      	cmp	r3, #0
 8013468:	d037      	beq.n	80134da <HAL_UART_Transmit_DMA+0x8e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801346a:	2268      	movs	r2, #104	; 0x68
 801346c:	5ca2      	ldrb	r2, [r4, r2]
 801346e:	2a01      	cmp	r2, #1
 8013470:	d035      	beq.n	80134de <HAL_UART_Transmit_DMA+0x92>
 8013472:	2268      	movs	r2, #104	; 0x68
 8013474:	2001      	movs	r0, #1
 8013476:	54a0      	strb	r0, [r4, r2]

    huart->pTxBuffPtr = pData;
 8013478:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 801347a:	3a18      	subs	r2, #24
 801347c:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 801347e:	3202      	adds	r2, #2
 8013480:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013482:	2200      	movs	r2, #0
 8013484:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013486:	3269      	adds	r2, #105	; 0x69
 8013488:	5ca2      	ldrb	r2, [r4, r2]
 801348a:	2a22      	cmp	r2, #34	; 0x22
 801348c:	d01d      	beq.n	80134ca <HAL_UART_Transmit_DMA+0x7e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 801348e:	2269      	movs	r2, #105	; 0x69
 8013490:	2012      	movs	r0, #18
 8013492:	54a0      	strb	r0, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013494:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8013496:	4813      	ldr	r0, [pc, #76]	; (80134e4 <HAL_UART_Transmit_DMA+0x98>)
 8013498:	6290      	str	r0, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801349a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801349c:	4812      	ldr	r0, [pc, #72]	; (80134e8 <HAL_UART_Transmit_DMA+0x9c>)
 801349e:	62d0      	str	r0, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80134a0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80134a2:	4812      	ldr	r0, [pc, #72]	; (80134ec <HAL_UART_Transmit_DMA+0xa0>)
 80134a4:	6310      	str	r0, [r2, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80134a6:	6822      	ldr	r2, [r4, #0]
 80134a8:	3228      	adds	r2, #40	; 0x28
 80134aa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80134ac:	f7fe f840 	bl	8011530 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80134b0:	6823      	ldr	r3, [r4, #0]
 80134b2:	2240      	movs	r2, #64	; 0x40
 80134b4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 80134b6:	6822      	ldr	r2, [r4, #0]
 80134b8:	6893      	ldr	r3, [r2, #8]
 80134ba:	2180      	movs	r1, #128	; 0x80
 80134bc:	430b      	orrs	r3, r1
 80134be:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80134c0:	2368      	movs	r3, #104	; 0x68
 80134c2:	2200      	movs	r2, #0
 80134c4:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 80134c6:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80134c8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80134ca:	3247      	adds	r2, #71	; 0x47
 80134cc:	3031      	adds	r0, #49	; 0x31
 80134ce:	54a0      	strb	r0, [r4, r2]
 80134d0:	e7e0      	b.n	8013494 <HAL_UART_Transmit_DMA+0x48>
    return HAL_BUSY;
 80134d2:	2002      	movs	r0, #2
 80134d4:	e7f8      	b.n	80134c8 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 80134d6:	2001      	movs	r0, #1
 80134d8:	e7f6      	b.n	80134c8 <HAL_UART_Transmit_DMA+0x7c>
 80134da:	2001      	movs	r0, #1
 80134dc:	e7f4      	b.n	80134c8 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 80134de:	2002      	movs	r0, #2
 80134e0:	e7f2      	b.n	80134c8 <HAL_UART_Transmit_DMA+0x7c>
 80134e2:	46c0      	nop			; (mov r8, r8)
 80134e4:	0801358d 	.word	0x0801358d
 80134e8:	080135bf 	.word	0x080135bf
 80134ec:	0801360f 	.word	0x0801360f

080134f0 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80134f0:	b510      	push	{r4, lr}
 80134f2:	0004      	movs	r4, r0
 80134f4:	0008      	movs	r0, r1
 80134f6:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80134f8:	2269      	movs	r2, #105	; 0x69
 80134fa:	5ca2      	ldrb	r2, [r4, r2]
 80134fc:	2a01      	cmp	r2, #1
 80134fe:	d003      	beq.n	8013508 <HAL_UART_Receive_DMA+0x18>
 8013500:	2269      	movs	r2, #105	; 0x69
 8013502:	5ca2      	ldrb	r2, [r4, r2]
 8013504:	2a12      	cmp	r2, #18
 8013506:	d133      	bne.n	8013570 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8013508:	2800      	cmp	r0, #0
 801350a:	d033      	beq.n	8013574 <HAL_UART_Receive_DMA+0x84>
 801350c:	2b00      	cmp	r3, #0
 801350e:	d033      	beq.n	8013578 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013510:	2268      	movs	r2, #104	; 0x68
 8013512:	5ca2      	ldrb	r2, [r4, r2]
 8013514:	2a01      	cmp	r2, #1
 8013516:	d031      	beq.n	801357c <HAL_UART_Receive_DMA+0x8c>
 8013518:	2268      	movs	r2, #104	; 0x68
 801351a:	2101      	movs	r1, #1
 801351c:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 801351e:	6560      	str	r0, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8013520:	3a10      	subs	r2, #16
 8013522:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013524:	2200      	movs	r2, #0
 8013526:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013528:	3269      	adds	r2, #105	; 0x69
 801352a:	5ca2      	ldrb	r2, [r4, r2]
 801352c:	2a12      	cmp	r2, #18
 801352e:	d01b      	beq.n	8013568 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013530:	2269      	movs	r2, #105	; 0x69
 8013532:	2122      	movs	r1, #34	; 0x22
 8013534:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013536:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013538:	4911      	ldr	r1, [pc, #68]	; (8013580 <HAL_UART_Receive_DMA+0x90>)
 801353a:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801353c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801353e:	4911      	ldr	r1, [pc, #68]	; (8013584 <HAL_UART_Receive_DMA+0x94>)
 8013540:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013544:	4910      	ldr	r1, [pc, #64]	; (8013588 <HAL_UART_Receive_DMA+0x98>)
 8013546:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8013548:	6821      	ldr	r1, [r4, #0]
 801354a:	3124      	adds	r1, #36	; 0x24
 801354c:	0002      	movs	r2, r0
 801354e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8013550:	f7fd ffee 	bl	8011530 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8013554:	6822      	ldr	r2, [r4, #0]
 8013556:	6893      	ldr	r3, [r2, #8]
 8013558:	2140      	movs	r1, #64	; 0x40
 801355a:	430b      	orrs	r3, r1
 801355c:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 801355e:	2368      	movs	r3, #104	; 0x68
 8013560:	2200      	movs	r2, #0
 8013562:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8013564:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013566:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013568:	3257      	adds	r2, #87	; 0x57
 801356a:	3131      	adds	r1, #49	; 0x31
 801356c:	54a1      	strb	r1, [r4, r2]
 801356e:	e7e2      	b.n	8013536 <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 8013570:	2002      	movs	r0, #2
 8013572:	e7f8      	b.n	8013566 <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 8013574:	2001      	movs	r0, #1
 8013576:	e7f6      	b.n	8013566 <HAL_UART_Receive_DMA+0x76>
 8013578:	2001      	movs	r0, #1
 801357a:	e7f4      	b.n	8013566 <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 801357c:	2002      	movs	r0, #2
 801357e:	e7f2      	b.n	8013566 <HAL_UART_Receive_DMA+0x76>
 8013580:	080135c9 	.word	0x080135c9
 8013584:	08013605 	.word	0x08013605
 8013588:	0801360f 	.word	0x0801360f

0801358c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801358c:	b510      	push	{r4, lr}
 801358e:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013590:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	069b      	lsls	r3, r3, #26
 8013598:	d40d      	bmi.n	80135b6 <UART_DMATransmitCplt+0x2a>
  {  
    huart->TxXferCount = 0;
 801359a:	2352      	movs	r3, #82	; 0x52
 801359c:	2200      	movs	r2, #0
 801359e:	52c2      	strh	r2, [r0, r3]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80135a0:	6802      	ldr	r2, [r0, #0]
 80135a2:	6893      	ldr	r3, [r2, #8]
 80135a4:	2180      	movs	r1, #128	; 0x80
 80135a6:	438b      	bics	r3, r1
 80135a8:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80135aa:	6802      	ldr	r2, [r0, #0]
 80135ac:	6813      	ldr	r3, [r2, #0]
 80135ae:	3940      	subs	r1, #64	; 0x40
 80135b0:	430b      	orrs	r3, r1
 80135b2:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80135b4:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80135b6:	f7fb f833 	bl	800e620 <HAL_UART_TxCpltCallback>
}
 80135ba:	e7fb      	b.n	80135b4 <UART_DMATransmitCplt+0x28>

080135bc <HAL_UART_TxHalfCpltCallback>:
}
 80135bc:	4770      	bx	lr

080135be <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80135be:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 80135c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80135c2:	f7ff fffb 	bl	80135bc <HAL_UART_TxHalfCpltCallback>
}
 80135c6:	bd10      	pop	{r4, pc}

080135c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80135c8:	b510      	push	{r4, lr}
 80135ca:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80135cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	069b      	lsls	r3, r3, #26
 80135d4:	d40e      	bmi.n	80135f4 <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 80135d6:	235a      	movs	r3, #90	; 0x5a
 80135d8:	2200      	movs	r2, #0
 80135da:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80135dc:	6802      	ldr	r2, [r0, #0]
 80135de:	6893      	ldr	r3, [r2, #8]
 80135e0:	2140      	movs	r1, #64	; 0x40
 80135e2:	438b      	bics	r3, r1
 80135e4:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80135e6:	2369      	movs	r3, #105	; 0x69
 80135e8:	5cc3      	ldrb	r3, [r0, r3]
 80135ea:	2b32      	cmp	r3, #50	; 0x32
 80135ec:	d005      	beq.n	80135fa <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80135ee:	2369      	movs	r3, #105	; 0x69
 80135f0:	2201      	movs	r2, #1
 80135f2:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 80135f4:	f7fb f852 	bl	800e69c <HAL_UART_RxCpltCallback>
}
 80135f8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 80135fa:	3337      	adds	r3, #55	; 0x37
 80135fc:	2212      	movs	r2, #18
 80135fe:	54c2      	strb	r2, [r0, r3]
 8013600:	e7f8      	b.n	80135f4 <UART_DMAReceiveCplt+0x2c>

08013602 <HAL_UART_RxHalfCpltCallback>:
}
 8013602:	4770      	bx	lr

08013604 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013604:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8013606:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013608:	f7ff fffb 	bl	8013602 <HAL_UART_RxHalfCpltCallback>
}
 801360c:	bd10      	pop	{r4, pc}

0801360e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801360e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013610:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8013612:	2300      	movs	r3, #0
 8013614:	225a      	movs	r2, #90	; 0x5a
 8013616:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8013618:	3a08      	subs	r2, #8
 801361a:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 801361c:	3369      	adds	r3, #105	; 0x69
 801361e:	3a51      	subs	r2, #81	; 0x51
 8013620:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013622:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013624:	320f      	adds	r2, #15
 8013626:	4313      	orrs	r3, r2
 8013628:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801362a:	f7fb f811 	bl	800e650 <HAL_UART_ErrorCallback>
}
 801362e:	bd10      	pop	{r4, pc}

08013630 <UART_SetConfig>:
{
 8013630:	b570      	push	{r4, r5, r6, lr}
 8013632:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013634:	6801      	ldr	r1, [r0, #0]
 8013636:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013638:	6883      	ldr	r3, [r0, #8]
 801363a:	6900      	ldr	r0, [r0, #16]
 801363c:	4303      	orrs	r3, r0
 801363e:	6960      	ldr	r0, [r4, #20]
 8013640:	4303      	orrs	r3, r0
 8013642:	69e0      	ldr	r0, [r4, #28]
 8013644:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013646:	487a      	ldr	r0, [pc, #488]	; (8013830 <UART_SetConfig+0x200>)
 8013648:	4002      	ands	r2, r0
 801364a:	4313      	orrs	r3, r2
 801364c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801364e:	6822      	ldr	r2, [r4, #0]
 8013650:	6853      	ldr	r3, [r2, #4]
 8013652:	4978      	ldr	r1, [pc, #480]	; (8013834 <UART_SetConfig+0x204>)
 8013654:	400b      	ands	r3, r1
 8013656:	68e1      	ldr	r1, [r4, #12]
 8013658:	430b      	orrs	r3, r1
 801365a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801365c:	6821      	ldr	r1, [r4, #0]
 801365e:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8013660:	69a3      	ldr	r3, [r4, #24]
 8013662:	6a20      	ldr	r0, [r4, #32]
 8013664:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013666:	4874      	ldr	r0, [pc, #464]	; (8013838 <UART_SetConfig+0x208>)
 8013668:	4002      	ands	r2, r0
 801366a:	4313      	orrs	r3, r2
 801366c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801366e:	6825      	ldr	r5, [r4, #0]
 8013670:	4b72      	ldr	r3, [pc, #456]	; (801383c <UART_SetConfig+0x20c>)
 8013672:	429d      	cmp	r5, r3
 8013674:	d021      	beq.n	80136ba <UART_SetConfig+0x8a>
 8013676:	4b72      	ldr	r3, [pc, #456]	; (8013840 <UART_SetConfig+0x210>)
 8013678:	429d      	cmp	r5, r3
 801367a:	d03a      	beq.n	80136f2 <UART_SetConfig+0xc2>
 801367c:	4b71      	ldr	r3, [pc, #452]	; (8013844 <UART_SetConfig+0x214>)
 801367e:	429d      	cmp	r5, r3
 8013680:	d061      	beq.n	8013746 <UART_SetConfig+0x116>
 8013682:	4b71      	ldr	r3, [pc, #452]	; (8013848 <UART_SetConfig+0x218>)
 8013684:	429d      	cmp	r5, r3
 8013686:	d100      	bne.n	801368a <UART_SetConfig+0x5a>
 8013688:	e0a8      	b.n	80137dc <UART_SetConfig+0x1ac>
 801368a:	4b70      	ldr	r3, [pc, #448]	; (801384c <UART_SetConfig+0x21c>)
 801368c:	429d      	cmp	r5, r3
 801368e:	d100      	bne.n	8013692 <UART_SetConfig+0x62>
 8013690:	e0a4      	b.n	80137dc <UART_SetConfig+0x1ac>
 8013692:	4b6f      	ldr	r3, [pc, #444]	; (8013850 <UART_SetConfig+0x220>)
 8013694:	429d      	cmp	r5, r3
 8013696:	d100      	bne.n	801369a <UART_SetConfig+0x6a>
 8013698:	e0a0      	b.n	80137dc <UART_SetConfig+0x1ac>
 801369a:	4b6e      	ldr	r3, [pc, #440]	; (8013854 <UART_SetConfig+0x224>)
 801369c:	429d      	cmp	r5, r3
 801369e:	d100      	bne.n	80136a2 <UART_SetConfig+0x72>
 80136a0:	e09c      	b.n	80137dc <UART_SetConfig+0x1ac>
 80136a2:	4b6d      	ldr	r3, [pc, #436]	; (8013858 <UART_SetConfig+0x228>)
 80136a4:	429d      	cmp	r5, r3
 80136a6:	d100      	bne.n	80136aa <UART_SetConfig+0x7a>
 80136a8:	e098      	b.n	80137dc <UART_SetConfig+0x1ac>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80136aa:	2380      	movs	r3, #128	; 0x80
 80136ac:	021b      	lsls	r3, r3, #8
 80136ae:	69e2      	ldr	r2, [r4, #28]
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d100      	bne.n	80136b6 <UART_SetConfig+0x86>
 80136b4:	e08c      	b.n	80137d0 <UART_SetConfig+0x1a0>
 80136b6:	2001      	movs	r0, #1
 80136b8:	e089      	b.n	80137ce <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80136ba:	4b68      	ldr	r3, [pc, #416]	; (801385c <UART_SetConfig+0x22c>)
 80136bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80136be:	2303      	movs	r3, #3
 80136c0:	4013      	ands	r3, r2
 80136c2:	2b02      	cmp	r3, #2
 80136c4:	d100      	bne.n	80136c8 <UART_SetConfig+0x98>
 80136c6:	e0a6      	b.n	8013816 <UART_SetConfig+0x1e6>
 80136c8:	d82f      	bhi.n	801372a <UART_SetConfig+0xfa>
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d069      	beq.n	80137a2 <UART_SetConfig+0x172>
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d120      	bne.n	8013714 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80136d2:	2380      	movs	r3, #128	; 0x80
 80136d4:	021b      	lsls	r3, r3, #8
 80136d6:	69e2      	ldr	r2, [r4, #28]
 80136d8:	429a      	cmp	r2, r3
 80136da:	d049      	beq.n	8013770 <UART_SetConfig+0x140>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80136dc:	f7ff fa34 	bl	8012b48 <HAL_RCC_GetSysClockFreq>
 80136e0:	6825      	ldr	r5, [r4, #0]
 80136e2:	6861      	ldr	r1, [r4, #4]
 80136e4:	f7ec fd34 	bl	8000150 <__udivsi3>
 80136e8:	0400      	lsls	r0, r0, #16
 80136ea:	0c00      	lsrs	r0, r0, #16
 80136ec:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80136ee:	2000      	movs	r0, #0
        break;
 80136f0:	e06d      	b.n	80137ce <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80136f2:	4b5a      	ldr	r3, [pc, #360]	; (801385c <UART_SetConfig+0x22c>)
 80136f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136f6:	22c0      	movs	r2, #192	; 0xc0
 80136f8:	0292      	lsls	r2, r2, #10
 80136fa:	4013      	ands	r3, r2
 80136fc:	2280      	movs	r2, #128	; 0x80
 80136fe:	0292      	lsls	r2, r2, #10
 8013700:	4293      	cmp	r3, r2
 8013702:	d100      	bne.n	8013706 <UART_SetConfig+0xd6>
 8013704:	e087      	b.n	8013816 <UART_SetConfig+0x1e6>
 8013706:	d80c      	bhi.n	8013722 <UART_SetConfig+0xf2>
 8013708:	2b00      	cmp	r3, #0
 801370a:	d04a      	beq.n	80137a2 <UART_SetConfig+0x172>
 801370c:	2280      	movs	r2, #128	; 0x80
 801370e:	0252      	lsls	r2, r2, #9
 8013710:	4293      	cmp	r3, r2
 8013712:	d0de      	beq.n	80136d2 <UART_SetConfig+0xa2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013714:	2380      	movs	r3, #128	; 0x80
 8013716:	021b      	lsls	r3, r3, #8
 8013718:	69e2      	ldr	r2, [r4, #28]
 801371a:	429a      	cmp	r2, r3
 801371c:	d05b      	beq.n	80137d6 <UART_SetConfig+0x1a6>
        ret = HAL_ERROR;
 801371e:	2001      	movs	r0, #1
 8013720:	e055      	b.n	80137ce <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013722:	22c0      	movs	r2, #192	; 0xc0
 8013724:	0292      	lsls	r2, r2, #10
 8013726:	4293      	cmp	r3, r2
 8013728:	d1f4      	bne.n	8013714 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801372a:	2380      	movs	r3, #128	; 0x80
 801372c:	021b      	lsls	r3, r3, #8
 801372e:	69e2      	ldr	r2, [r4, #28]
 8013730:	429a      	cmp	r2, r3
 8013732:	d02f      	beq.n	8013794 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013734:	6861      	ldr	r1, [r4, #4]
 8013736:	484a      	ldr	r0, [pc, #296]	; (8013860 <UART_SetConfig+0x230>)
 8013738:	f7ec fd0a 	bl	8000150 <__udivsi3>
 801373c:	0400      	lsls	r0, r0, #16
 801373e:	0c00      	lsrs	r0, r0, #16
 8013740:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013742:	2000      	movs	r0, #0
        break;
 8013744:	e043      	b.n	80137ce <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013746:	4b45      	ldr	r3, [pc, #276]	; (801385c <UART_SetConfig+0x22c>)
 8013748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801374a:	22c0      	movs	r2, #192	; 0xc0
 801374c:	0312      	lsls	r2, r2, #12
 801374e:	4013      	ands	r3, r2
 8013750:	2280      	movs	r2, #128	; 0x80
 8013752:	0312      	lsls	r2, r2, #12
 8013754:	4293      	cmp	r3, r2
 8013756:	d051      	beq.n	80137fc <UART_SetConfig+0x1cc>
 8013758:	d813      	bhi.n	8013782 <UART_SetConfig+0x152>
 801375a:	2b00      	cmp	r3, #0
 801375c:	d021      	beq.n	80137a2 <UART_SetConfig+0x172>
 801375e:	2280      	movs	r2, #128	; 0x80
 8013760:	02d2      	lsls	r2, r2, #11
 8013762:	4293      	cmp	r3, r2
 8013764:	d1d6      	bne.n	8013714 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013766:	2380      	movs	r3, #128	; 0x80
 8013768:	021b      	lsls	r3, r3, #8
 801376a:	69e2      	ldr	r2, [r4, #28]
 801376c:	429a      	cmp	r2, r3
 801376e:	d1b5      	bne.n	80136dc <UART_SetConfig+0xac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013770:	f7ff f9ea 	bl	8012b48 <HAL_RCC_GetSysClockFreq>
 8013774:	0040      	lsls	r0, r0, #1
 8013776:	6861      	ldr	r1, [r4, #4]
 8013778:	f7ec fcea 	bl	8000150 <__udivsi3>
 801377c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801377e:	2000      	movs	r0, #0
        break;
 8013780:	e01c      	b.n	80137bc <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013782:	22c0      	movs	r2, #192	; 0xc0
 8013784:	0312      	lsls	r2, r2, #12
 8013786:	4293      	cmp	r3, r2
 8013788:	d1c4      	bne.n	8013714 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801378a:	2380      	movs	r3, #128	; 0x80
 801378c:	021b      	lsls	r3, r3, #8
 801378e:	69e2      	ldr	r2, [r4, #28]
 8013790:	429a      	cmp	r2, r3
 8013792:	d1cf      	bne.n	8013734 <UART_SetConfig+0x104>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8013794:	6861      	ldr	r1, [r4, #4]
 8013796:	4833      	ldr	r0, [pc, #204]	; (8013864 <UART_SetConfig+0x234>)
 8013798:	f7ec fcda 	bl	8000150 <__udivsi3>
 801379c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801379e:	2000      	movs	r0, #0
        break;
 80137a0:	e00c      	b.n	80137bc <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80137a2:	2380      	movs	r3, #128	; 0x80
 80137a4:	021b      	lsls	r3, r3, #8
 80137a6:	69e2      	ldr	r2, [r4, #28]
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d11c      	bne.n	80137e6 <UART_SetConfig+0x1b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80137ac:	f7ff fa30 	bl	8012c10 <HAL_RCC_GetPCLK1Freq>
 80137b0:	0040      	lsls	r0, r0, #1
 80137b2:	6861      	ldr	r1, [r4, #4]
 80137b4:	f7ec fccc 	bl	8000150 <__udivsi3>
 80137b8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80137ba:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80137bc:	220f      	movs	r2, #15
 80137be:	0019      	movs	r1, r3
 80137c0:	4391      	bics	r1, r2
 80137c2:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80137c4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80137c6:	071b      	lsls	r3, r3, #28
 80137c8:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80137ca:	4313      	orrs	r3, r2
 80137cc:	60cb      	str	r3, [r1, #12]
}
 80137ce:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 80137d0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80137d2:	2300      	movs	r3, #0
 80137d4:	e7f2      	b.n	80137bc <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80137d6:	2001      	movs	r0, #1
 80137d8:	2300      	movs	r3, #0
 80137da:	e7ef      	b.n	80137bc <UART_SetConfig+0x18c>
 80137dc:	2380      	movs	r3, #128	; 0x80
 80137de:	021b      	lsls	r3, r3, #8
 80137e0:	69e2      	ldr	r2, [r4, #28]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d0e2      	beq.n	80137ac <UART_SetConfig+0x17c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80137e6:	f7ff fa13 	bl	8012c10 <HAL_RCC_GetPCLK1Freq>
 80137ea:	6825      	ldr	r5, [r4, #0]
 80137ec:	6861      	ldr	r1, [r4, #4]
 80137ee:	f7ec fcaf 	bl	8000150 <__udivsi3>
 80137f2:	0400      	lsls	r0, r0, #16
 80137f4:	0c00      	lsrs	r0, r0, #16
 80137f6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80137f8:	2000      	movs	r0, #0
  return ret;
 80137fa:	e7e8      	b.n	80137ce <UART_SetConfig+0x19e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80137fc:	2380      	movs	r3, #128	; 0x80
 80137fe:	021b      	lsls	r3, r3, #8
 8013800:	69e2      	ldr	r2, [r4, #28]
 8013802:	429a      	cmp	r2, r3
 8013804:	d10c      	bne.n	8013820 <UART_SetConfig+0x1f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013806:	6861      	ldr	r1, [r4, #4]
 8013808:	2080      	movs	r0, #128	; 0x80
 801380a:	0240      	lsls	r0, r0, #9
 801380c:	f7ec fca0 	bl	8000150 <__udivsi3>
 8013810:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013812:	2000      	movs	r0, #0
        break;
 8013814:	e7d2      	b.n	80137bc <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013816:	2380      	movs	r3, #128	; 0x80
 8013818:	021b      	lsls	r3, r3, #8
 801381a:	69e2      	ldr	r2, [r4, #28]
 801381c:	429a      	cmp	r2, r3
 801381e:	d0f2      	beq.n	8013806 <UART_SetConfig+0x1d6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013820:	6861      	ldr	r1, [r4, #4]
 8013822:	2080      	movs	r0, #128	; 0x80
 8013824:	0200      	lsls	r0, r0, #8
 8013826:	f7ec fc93 	bl	8000150 <__udivsi3>
 801382a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801382c:	2000      	movs	r0, #0
        break;
 801382e:	e7ce      	b.n	80137ce <UART_SetConfig+0x19e>
 8013830:	efff69f3 	.word	0xefff69f3
 8013834:	ffffcfff 	.word	0xffffcfff
 8013838:	fffff4ff 	.word	0xfffff4ff
 801383c:	40013800 	.word	0x40013800
 8013840:	40004400 	.word	0x40004400
 8013844:	40004800 	.word	0x40004800
 8013848:	40004c00 	.word	0x40004c00
 801384c:	40005000 	.word	0x40005000
 8013850:	40011400 	.word	0x40011400
 8013854:	40011800 	.word	0x40011800
 8013858:	40011c00 	.word	0x40011c00
 801385c:	40021000 	.word	0x40021000
 8013860:	007a1200 	.word	0x007a1200
 8013864:	00f42400 	.word	0x00f42400

08013868 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013868:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801386a:	07db      	lsls	r3, r3, #31
 801386c:	d506      	bpl.n	801387c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801386e:	6802      	ldr	r2, [r0, #0]
 8013870:	6853      	ldr	r3, [r2, #4]
 8013872:	492c      	ldr	r1, [pc, #176]	; (8013924 <UART_AdvFeatureConfig+0xbc>)
 8013874:	400b      	ands	r3, r1
 8013876:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013878:	430b      	orrs	r3, r1
 801387a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801387c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801387e:	079b      	lsls	r3, r3, #30
 8013880:	d506      	bpl.n	8013890 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013882:	6802      	ldr	r2, [r0, #0]
 8013884:	6853      	ldr	r3, [r2, #4]
 8013886:	4928      	ldr	r1, [pc, #160]	; (8013928 <UART_AdvFeatureConfig+0xc0>)
 8013888:	400b      	ands	r3, r1
 801388a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801388c:	430b      	orrs	r3, r1
 801388e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013890:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013892:	075b      	lsls	r3, r3, #29
 8013894:	d506      	bpl.n	80138a4 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013896:	6802      	ldr	r2, [r0, #0]
 8013898:	6853      	ldr	r3, [r2, #4]
 801389a:	4924      	ldr	r1, [pc, #144]	; (801392c <UART_AdvFeatureConfig+0xc4>)
 801389c:	400b      	ands	r3, r1
 801389e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80138a0:	430b      	orrs	r3, r1
 80138a2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80138a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80138a6:	071b      	lsls	r3, r3, #28
 80138a8:	d506      	bpl.n	80138b8 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80138aa:	6802      	ldr	r2, [r0, #0]
 80138ac:	6853      	ldr	r3, [r2, #4]
 80138ae:	4920      	ldr	r1, [pc, #128]	; (8013930 <UART_AdvFeatureConfig+0xc8>)
 80138b0:	400b      	ands	r3, r1
 80138b2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80138b4:	430b      	orrs	r3, r1
 80138b6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80138b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80138ba:	06db      	lsls	r3, r3, #27
 80138bc:	d506      	bpl.n	80138cc <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80138be:	6802      	ldr	r2, [r0, #0]
 80138c0:	6893      	ldr	r3, [r2, #8]
 80138c2:	491c      	ldr	r1, [pc, #112]	; (8013934 <UART_AdvFeatureConfig+0xcc>)
 80138c4:	400b      	ands	r3, r1
 80138c6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80138c8:	430b      	orrs	r3, r1
 80138ca:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80138cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80138ce:	069b      	lsls	r3, r3, #26
 80138d0:	d506      	bpl.n	80138e0 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80138d2:	6802      	ldr	r2, [r0, #0]
 80138d4:	6893      	ldr	r3, [r2, #8]
 80138d6:	4918      	ldr	r1, [pc, #96]	; (8013938 <UART_AdvFeatureConfig+0xd0>)
 80138d8:	400b      	ands	r3, r1
 80138da:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80138dc:	430b      	orrs	r3, r1
 80138de:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80138e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80138e2:	065b      	lsls	r3, r3, #25
 80138e4:	d50b      	bpl.n	80138fe <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80138e6:	6802      	ldr	r2, [r0, #0]
 80138e8:	6853      	ldr	r3, [r2, #4]
 80138ea:	4914      	ldr	r1, [pc, #80]	; (801393c <UART_AdvFeatureConfig+0xd4>)
 80138ec:	400b      	ands	r3, r1
 80138ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80138f0:	430b      	orrs	r3, r1
 80138f2:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80138f4:	2380      	movs	r3, #128	; 0x80
 80138f6:	035b      	lsls	r3, r3, #13
 80138f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d00a      	beq.n	8013914 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80138fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013900:	061b      	lsls	r3, r3, #24
 8013902:	d506      	bpl.n	8013912 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013904:	6802      	ldr	r2, [r0, #0]
 8013906:	6853      	ldr	r3, [r2, #4]
 8013908:	490d      	ldr	r1, [pc, #52]	; (8013940 <UART_AdvFeatureConfig+0xd8>)
 801390a:	400b      	ands	r3, r1
 801390c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801390e:	430b      	orrs	r3, r1
 8013910:	6053      	str	r3, [r2, #4]
}
 8013912:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013914:	6802      	ldr	r2, [r0, #0]
 8013916:	6853      	ldr	r3, [r2, #4]
 8013918:	490a      	ldr	r1, [pc, #40]	; (8013944 <UART_AdvFeatureConfig+0xdc>)
 801391a:	400b      	ands	r3, r1
 801391c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801391e:	430b      	orrs	r3, r1
 8013920:	6053      	str	r3, [r2, #4]
 8013922:	e7ec      	b.n	80138fe <UART_AdvFeatureConfig+0x96>
 8013924:	fffdffff 	.word	0xfffdffff
 8013928:	fffeffff 	.word	0xfffeffff
 801392c:	fffbffff 	.word	0xfffbffff
 8013930:	ffff7fff 	.word	0xffff7fff
 8013934:	ffffefff 	.word	0xffffefff
 8013938:	ffffdfff 	.word	0xffffdfff
 801393c:	ffefffff 	.word	0xffefffff
 8013940:	fff7ffff 	.word	0xfff7ffff
 8013944:	ff9fffff 	.word	0xff9fffff

08013948 <UART_WaitOnFlagUntilTimeout>:
{
 8013948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801394a:	46c6      	mov	lr, r8
 801394c:	b500      	push	{lr}
 801394e:	0007      	movs	r7, r0
 8013950:	000c      	movs	r4, r1
 8013952:	0016      	movs	r6, r2
 8013954:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8013956:	f7fd fbf9 	bl	801114c <HAL_GetTick>
 801395a:	4680      	mov	r8, r0
  if(Status == RESET)
 801395c:	2e00      	cmp	r6, #0
 801395e:	d029      	beq.n	80139b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	69da      	ldr	r2, [r3, #28]
 8013964:	4022      	ands	r2, r4
 8013966:	42a2      	cmp	r2, r4
 8013968:	d152      	bne.n	8013a10 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 801396a:	1c6a      	adds	r2, r5, #1
 801396c:	d0f9      	beq.n	8013962 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801396e:	2d00      	cmp	r5, #0
 8013970:	d005      	beq.n	801397e <UART_WaitOnFlagUntilTimeout+0x36>
 8013972:	f7fd fbeb 	bl	801114c <HAL_GetTick>
 8013976:	4643      	mov	r3, r8
 8013978:	1ac0      	subs	r0, r0, r3
 801397a:	42a8      	cmp	r0, r5
 801397c:	d9f0      	bls.n	8013960 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801397e:	683a      	ldr	r2, [r7, #0]
 8013980:	6813      	ldr	r3, [r2, #0]
 8013982:	2180      	movs	r1, #128	; 0x80
 8013984:	438b      	bics	r3, r1
 8013986:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013988:	683a      	ldr	r2, [r7, #0]
 801398a:	6813      	ldr	r3, [r2, #0]
 801398c:	3960      	subs	r1, #96	; 0x60
 801398e:	438b      	bics	r3, r1
 8013990:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013992:	683a      	ldr	r2, [r7, #0]
 8013994:	6813      	ldr	r3, [r2, #0]
 8013996:	491f      	ldr	r1, [pc, #124]	; (8013a14 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013998:	400b      	ands	r3, r1
 801399a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801399c:	6839      	ldr	r1, [r7, #0]
 801399e:	688b      	ldr	r3, [r1, #8]
 80139a0:	2201      	movs	r2, #1
 80139a2:	4393      	bics	r3, r2
 80139a4:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80139a6:	2369      	movs	r3, #105	; 0x69
 80139a8:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 80139aa:	3b01      	subs	r3, #1
 80139ac:	2200      	movs	r2, #0
 80139ae:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80139b0:	2003      	movs	r0, #3
 80139b2:	e02a      	b.n	8013a0a <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	69d9      	ldr	r1, [r3, #28]
 80139b8:	4021      	ands	r1, r4
 80139ba:	42a1      	cmp	r1, r4
 80139bc:	d024      	beq.n	8013a08 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 80139be:	1c6a      	adds	r2, r5, #1
 80139c0:	d0f9      	beq.n	80139b6 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80139c2:	2d00      	cmp	r5, #0
 80139c4:	d005      	beq.n	80139d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80139c6:	f7fd fbc1 	bl	801114c <HAL_GetTick>
 80139ca:	4643      	mov	r3, r8
 80139cc:	1ac0      	subs	r0, r0, r3
 80139ce:	42a8      	cmp	r0, r5
 80139d0:	d9f0      	bls.n	80139b4 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80139d2:	683a      	ldr	r2, [r7, #0]
 80139d4:	6813      	ldr	r3, [r2, #0]
 80139d6:	2180      	movs	r1, #128	; 0x80
 80139d8:	438b      	bics	r3, r1
 80139da:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80139dc:	683a      	ldr	r2, [r7, #0]
 80139de:	6813      	ldr	r3, [r2, #0]
 80139e0:	3960      	subs	r1, #96	; 0x60
 80139e2:	438b      	bics	r3, r1
 80139e4:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80139e6:	683a      	ldr	r2, [r7, #0]
 80139e8:	6813      	ldr	r3, [r2, #0]
 80139ea:	490a      	ldr	r1, [pc, #40]	; (8013a14 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80139ec:	400b      	ands	r3, r1
 80139ee:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80139f0:	6839      	ldr	r1, [r7, #0]
 80139f2:	688b      	ldr	r3, [r1, #8]
 80139f4:	2201      	movs	r2, #1
 80139f6:	4393      	bics	r3, r2
 80139f8:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80139fa:	2369      	movs	r3, #105	; 0x69
 80139fc:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 80139fe:	3b01      	subs	r3, #1
 8013a00:	2200      	movs	r2, #0
 8013a02:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8013a04:	2003      	movs	r0, #3
 8013a06:	e000      	b.n	8013a0a <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8013a08:	0030      	movs	r0, r6
}
 8013a0a:	bc80      	pop	{r7}
 8013a0c:	46b8      	mov	r8, r7
 8013a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8013a10:	2000      	movs	r0, #0
 8013a12:	e7fa      	b.n	8013a0a <UART_WaitOnFlagUntilTimeout+0xc2>
 8013a14:	fffffeff 	.word	0xfffffeff

08013a18 <HAL_UART_Transmit>:
{
 8013a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a1a:	46c6      	mov	lr, r8
 8013a1c:	b500      	push	{lr}
 8013a1e:	0004      	movs	r4, r0
 8013a20:	000d      	movs	r5, r1
 8013a22:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013a24:	2369      	movs	r3, #105	; 0x69
 8013a26:	5cc3      	ldrb	r3, [r0, r3]
 8013a28:	2b01      	cmp	r3, #1
 8013a2a:	d003      	beq.n	8013a34 <HAL_UART_Transmit+0x1c>
 8013a2c:	2369      	movs	r3, #105	; 0x69
 8013a2e:	5cc3      	ldrb	r3, [r0, r3]
 8013a30:	2b22      	cmp	r3, #34	; 0x22
 8013a32:	d152      	bne.n	8013ada <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 8013a34:	2d00      	cmp	r5, #0
 8013a36:	d054      	beq.n	8013ae2 <HAL_UART_Transmit+0xca>
 8013a38:	2a00      	cmp	r2, #0
 8013a3a:	d054      	beq.n	8013ae6 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8013a3c:	2368      	movs	r3, #104	; 0x68
 8013a3e:	5ce3      	ldrb	r3, [r4, r3]
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	d052      	beq.n	8013aea <HAL_UART_Transmit+0xd2>
 8013a44:	2368      	movs	r3, #104	; 0x68
 8013a46:	2101      	movs	r1, #1
 8013a48:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013a4e:	3369      	adds	r3, #105	; 0x69
 8013a50:	5ce3      	ldrb	r3, [r4, r3]
 8013a52:	2b22      	cmp	r3, #34	; 0x22
 8013a54:	d009      	beq.n	8013a6a <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013a56:	2369      	movs	r3, #105	; 0x69
 8013a58:	2112      	movs	r1, #18
 8013a5a:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8013a5c:	2350      	movs	r3, #80	; 0x50
 8013a5e:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 8013a60:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a62:	2380      	movs	r3, #128	; 0x80
 8013a64:	015b      	lsls	r3, r3, #5
 8013a66:	4698      	mov	r8, r3
 8013a68:	e00a      	b.n	8013a80 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013a6a:	3347      	adds	r3, #71	; 0x47
 8013a6c:	3131      	adds	r1, #49	; 0x31
 8013a6e:	54e1      	strb	r1, [r4, r3]
 8013a70:	e7f4      	b.n	8013a5c <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8013a72:	782b      	ldrb	r3, [r5, #0]
 8013a74:	6822      	ldr	r2, [r4, #0]
 8013a76:	8513      	strh	r3, [r2, #40]	; 0x28
 8013a78:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 8013a7a:	5ba2      	ldrh	r2, [r4, r6]
 8013a7c:	2a00      	cmp	r2, #0
 8013a7e:	d016      	beq.n	8013aae <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8013a80:	3a01      	subs	r2, #1
 8013a82:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8013a84:	003b      	movs	r3, r7
 8013a86:	2200      	movs	r2, #0
 8013a88:	2180      	movs	r1, #128	; 0x80
 8013a8a:	0020      	movs	r0, r4
 8013a8c:	f7ff ff5c 	bl	8013948 <UART_WaitOnFlagUntilTimeout>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	d12c      	bne.n	8013aee <HAL_UART_Transmit+0xd6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a94:	68a3      	ldr	r3, [r4, #8]
 8013a96:	4543      	cmp	r3, r8
 8013a98:	d1eb      	bne.n	8013a72 <HAL_UART_Transmit+0x5a>
 8013a9a:	6923      	ldr	r3, [r4, #16]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d1e8      	bne.n	8013a72 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013aa0:	882b      	ldrh	r3, [r5, #0]
 8013aa2:	05db      	lsls	r3, r3, #23
 8013aa4:	0ddb      	lsrs	r3, r3, #23
 8013aa6:	6822      	ldr	r2, [r4, #0]
 8013aa8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8013aaa:	3502      	adds	r5, #2
 8013aac:	e7e5      	b.n	8013a7a <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8013aae:	003b      	movs	r3, r7
 8013ab0:	2140      	movs	r1, #64	; 0x40
 8013ab2:	0020      	movs	r0, r4
 8013ab4:	f7ff ff48 	bl	8013948 <UART_WaitOnFlagUntilTimeout>
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	d11a      	bne.n	8013af2 <HAL_UART_Transmit+0xda>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013abc:	2369      	movs	r3, #105	; 0x69
 8013abe:	5ce3      	ldrb	r3, [r4, r3]
 8013ac0:	2b32      	cmp	r3, #50	; 0x32
 8013ac2:	d006      	beq.n	8013ad2 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8013ac4:	2369      	movs	r3, #105	; 0x69
 8013ac6:	2201      	movs	r2, #1
 8013ac8:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8013aca:	2368      	movs	r3, #104	; 0x68
 8013acc:	2200      	movs	r2, #0
 8013ace:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013ad0:	e004      	b.n	8013adc <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013ad2:	3337      	adds	r3, #55	; 0x37
 8013ad4:	2222      	movs	r2, #34	; 0x22
 8013ad6:	54e2      	strb	r2, [r4, r3]
 8013ad8:	e7f7      	b.n	8013aca <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 8013ada:	2002      	movs	r0, #2
}
 8013adc:	bc80      	pop	{r7}
 8013ade:	46b8      	mov	r8, r7
 8013ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8013ae2:	2001      	movs	r0, #1
 8013ae4:	e7fa      	b.n	8013adc <HAL_UART_Transmit+0xc4>
 8013ae6:	2001      	movs	r0, #1
 8013ae8:	e7f8      	b.n	8013adc <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8013aea:	2002      	movs	r0, #2
 8013aec:	e7f6      	b.n	8013adc <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8013aee:	2003      	movs	r0, #3
 8013af0:	e7f4      	b.n	8013adc <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8013af2:	2003      	movs	r0, #3
 8013af4:	e7f2      	b.n	8013adc <HAL_UART_Transmit+0xc4>
	...

08013af8 <UART_CheckIdleState>:
{
 8013af8:	b510      	push	{r4, lr}
 8013afa:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013afc:	2300      	movs	r3, #0
 8013afe:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013b00:	6803      	ldr	r3, [r0, #0]
 8013b02:	4a18      	ldr	r2, [pc, #96]	; (8013b64 <UART_CheckIdleState+0x6c>)
 8013b04:	4293      	cmp	r3, r2
 8013b06:	d005      	beq.n	8013b14 <UART_CheckIdleState+0x1c>
 8013b08:	4a17      	ldr	r2, [pc, #92]	; (8013b68 <UART_CheckIdleState+0x70>)
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	d002      	beq.n	8013b14 <UART_CheckIdleState+0x1c>
 8013b0e:	4a17      	ldr	r2, [pc, #92]	; (8013b6c <UART_CheckIdleState+0x74>)
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d106      	bne.n	8013b22 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	071b      	lsls	r3, r3, #28
 8013b18:	d40b      	bmi.n	8013b32 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013b1a:	6823      	ldr	r3, [r4, #0]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	075b      	lsls	r3, r3, #29
 8013b20:	d413      	bmi.n	8013b4a <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8013b22:	2369      	movs	r3, #105	; 0x69
 8013b24:	2201      	movs	r2, #1
 8013b26:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8013b28:	3b01      	subs	r3, #1
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8013b2e:	2000      	movs	r0, #0
}
 8013b30:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013b32:	23fa      	movs	r3, #250	; 0xfa
 8013b34:	2180      	movs	r1, #128	; 0x80
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	2200      	movs	r2, #0
 8013b3a:	0389      	lsls	r1, r1, #14
 8013b3c:	0020      	movs	r0, r4
 8013b3e:	f7ff ff03 	bl	8013948 <UART_WaitOnFlagUntilTimeout>
 8013b42:	2800      	cmp	r0, #0
 8013b44:	d0e9      	beq.n	8013b1a <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8013b46:	2003      	movs	r0, #3
 8013b48:	e7f2      	b.n	8013b30 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013b4a:	23fa      	movs	r3, #250	; 0xfa
 8013b4c:	2180      	movs	r1, #128	; 0x80
 8013b4e:	009b      	lsls	r3, r3, #2
 8013b50:	2200      	movs	r2, #0
 8013b52:	03c9      	lsls	r1, r1, #15
 8013b54:	0020      	movs	r0, r4
 8013b56:	f7ff fef7 	bl	8013948 <UART_WaitOnFlagUntilTimeout>
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	d0e1      	beq.n	8013b22 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8013b5e:	2003      	movs	r0, #3
 8013b60:	e7e6      	b.n	8013b30 <UART_CheckIdleState+0x38>
 8013b62:	46c0      	nop			; (mov r8, r8)
 8013b64:	40013800 	.word	0x40013800
 8013b68:	40004400 	.word	0x40004400
 8013b6c:	40004800 	.word	0x40004800

08013b70 <HAL_UART_Init>:
{
 8013b70:	b510      	push	{r4, lr}
 8013b72:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013b74:	d030      	beq.n	8013bd8 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8013b76:	2369      	movs	r3, #105	; 0x69
 8013b78:	5cc3      	ldrb	r3, [r0, r3]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d022      	beq.n	8013bc4 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8013b7e:	2369      	movs	r3, #105	; 0x69
 8013b80:	2202      	movs	r2, #2
 8013b82:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013b84:	6822      	ldr	r2, [r4, #0]
 8013b86:	6813      	ldr	r3, [r2, #0]
 8013b88:	2101      	movs	r1, #1
 8013b8a:	438b      	bics	r3, r1
 8013b8c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013b8e:	0020      	movs	r0, r4
 8013b90:	f7ff fd4e 	bl	8013630 <UART_SetConfig>
 8013b94:	2801      	cmp	r0, #1
 8013b96:	d014      	beq.n	8013bc2 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d118      	bne.n	8013bd0 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013b9e:	6822      	ldr	r2, [r4, #0]
 8013ba0:	6853      	ldr	r3, [r2, #4]
 8013ba2:	490e      	ldr	r1, [pc, #56]	; (8013bdc <HAL_UART_Init+0x6c>)
 8013ba4:	400b      	ands	r3, r1
 8013ba6:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013ba8:	6822      	ldr	r2, [r4, #0]
 8013baa:	6893      	ldr	r3, [r2, #8]
 8013bac:	212a      	movs	r1, #42	; 0x2a
 8013bae:	438b      	bics	r3, r1
 8013bb0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8013bb2:	6822      	ldr	r2, [r4, #0]
 8013bb4:	6813      	ldr	r3, [r2, #0]
 8013bb6:	3929      	subs	r1, #41	; 0x29
 8013bb8:	430b      	orrs	r3, r1
 8013bba:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8013bbc:	0020      	movs	r0, r4
 8013bbe:	f7ff ff9b 	bl	8013af8 <UART_CheckIdleState>
}
 8013bc2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013bc4:	3368      	adds	r3, #104	; 0x68
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8013bca:	f7fa ffef 	bl	800ebac <HAL_UART_MspInit>
 8013bce:	e7d6      	b.n	8013b7e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8013bd0:	0020      	movs	r0, r4
 8013bd2:	f7ff fe49 	bl	8013868 <UART_AdvFeatureConfig>
 8013bd6:	e7e2      	b.n	8013b9e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013bd8:	2001      	movs	r0, #1
 8013bda:	e7f2      	b.n	8013bc2 <HAL_UART_Init+0x52>
 8013bdc:	ffffb7ff 	.word	0xffffb7ff

08013be0 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013be0:	2369      	movs	r3, #105	; 0x69
 8013be2:	5cc3      	ldrb	r3, [r0, r3]
 8013be4:	2b12      	cmp	r3, #18
 8013be6:	d003      	beq.n	8013bf0 <UART_Transmit_IT+0x10>
 8013be8:	2369      	movs	r3, #105	; 0x69
 8013bea:	5cc3      	ldrb	r3, [r0, r3]
 8013bec:	2b32      	cmp	r3, #50	; 0x32
 8013bee:	d12d      	bne.n	8013c4c <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8013bf0:	2352      	movs	r3, #82	; 0x52
 8013bf2:	5ac3      	ldrh	r3, [r0, r3]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10b      	bne.n	8013c10 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013bf8:	6802      	ldr	r2, [r0, #0]
 8013bfa:	6813      	ldr	r3, [r2, #0]
 8013bfc:	2180      	movs	r1, #128	; 0x80
 8013bfe:	438b      	bics	r3, r1
 8013c00:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013c02:	6802      	ldr	r2, [r0, #0]
 8013c04:	6813      	ldr	r3, [r2, #0]
 8013c06:	3940      	subs	r1, #64	; 0x40
 8013c08:	430b      	orrs	r3, r1
 8013c0a:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 8013c0c:	2000      	movs	r0, #0
 8013c0e:	e00f      	b.n	8013c30 <UART_Transmit_IT+0x50>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c10:	2380      	movs	r3, #128	; 0x80
 8013c12:	015b      	lsls	r3, r3, #5
 8013c14:	6882      	ldr	r2, [r0, #8]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d00b      	beq.n	8013c32 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013c1a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013c1c:	1c5a      	adds	r2, r3, #1
 8013c1e:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013c20:	781b      	ldrb	r3, [r3, #0]
 8013c22:	6802      	ldr	r2, [r0, #0]
 8013c24:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8013c26:	2252      	movs	r2, #82	; 0x52
 8013c28:	5a83      	ldrh	r3, [r0, r2]
 8013c2a:	3b01      	subs	r3, #1
 8013c2c:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 8013c2e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013c30:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c32:	6903      	ldr	r3, [r0, #16]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d1f0      	bne.n	8013c1a <UART_Transmit_IT+0x3a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013c38:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013c3a:	881b      	ldrh	r3, [r3, #0]
 8013c3c:	05db      	lsls	r3, r3, #23
 8013c3e:	0ddb      	lsrs	r3, r3, #23
 8013c40:	6802      	ldr	r2, [r0, #0]
 8013c42:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8013c44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013c46:	3302      	adds	r3, #2
 8013c48:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013c4a:	e7ec      	b.n	8013c26 <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 8013c4c:	2002      	movs	r0, #2
 8013c4e:	e7ef      	b.n	8013c30 <UART_Transmit_IT+0x50>

08013c50 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013c50:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013c52:	6802      	ldr	r2, [r0, #0]
 8013c54:	6813      	ldr	r3, [r2, #0]
 8013c56:	2140      	movs	r1, #64	; 0x40
 8013c58:	438b      	bics	r3, r1
 8013c5a:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013c5c:	2369      	movs	r3, #105	; 0x69
 8013c5e:	5cc3      	ldrb	r3, [r0, r3]
 8013c60:	2b32      	cmp	r3, #50	; 0x32
 8013c62:	d00a      	beq.n	8013c7a <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013c64:	6801      	ldr	r1, [r0, #0]
 8013c66:	688b      	ldr	r3, [r1, #8]
 8013c68:	2201      	movs	r2, #1
 8013c6a:	4393      	bics	r3, r2
 8013c6c:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8013c6e:	2369      	movs	r3, #105	; 0x69
 8013c70:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8013c72:	f7fa fcd5 	bl	800e620 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8013c76:	2000      	movs	r0, #0
 8013c78:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8013c7a:	3337      	adds	r3, #55	; 0x37
 8013c7c:	2222      	movs	r2, #34	; 0x22
 8013c7e:	54c2      	strb	r2, [r0, r3]
 8013c80:	e7f7      	b.n	8013c72 <UART_EndTransmit_IT+0x22>
	...

08013c84 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013c84:	b510      	push	{r4, lr}
 8013c86:	0003      	movs	r3, r0
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013c88:	2269      	movs	r2, #105	; 0x69
 8013c8a:	5c82      	ldrb	r2, [r0, r2]
 8013c8c:	2a22      	cmp	r2, #34	; 0x22
 8013c8e:	d003      	beq.n	8013c98 <UART_Receive_IT+0x14>
 8013c90:	2269      	movs	r2, #105	; 0x69
 8013c92:	5c82      	ldrb	r2, [r0, r2]
 8013c94:	2a32      	cmp	r2, #50	; 0x32
 8013c96:	d13f      	bne.n	8013d18 <UART_Receive_IT+0x94>
  uint16_t uhMask = huart->Mask;
 8013c98:	225c      	movs	r2, #92	; 0x5c
 8013c9a:	5a98      	ldrh	r0, [r3, r2]
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c9c:	2180      	movs	r1, #128	; 0x80
 8013c9e:	0149      	lsls	r1, r1, #5
 8013ca0:	689a      	ldr	r2, [r3, #8]
 8013ca2:	428a      	cmp	r2, r1
 8013ca4:	d028      	beq.n	8013cf8 <UART_Receive_IT+0x74>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8013caa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013cac:	1c4c      	adds	r4, r1, #1
 8013cae:	655c      	str	r4, [r3, #84]	; 0x54
 8013cb0:	4002      	ands	r2, r0
 8013cb2:	700a      	strb	r2, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8013cb4:	215a      	movs	r1, #90	; 0x5a
 8013cb6:	5a5a      	ldrh	r2, [r3, r1]
 8013cb8:	3a01      	subs	r2, #1
 8013cba:	b292      	uxth	r2, r2
 8013cbc:	525a      	strh	r2, [r3, r1]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8013cbe:	2000      	movs	r0, #0
    if(--huart->RxXferCount == 0)
 8013cc0:	2a00      	cmp	r2, #0
 8013cc2:	d118      	bne.n	8013cf6 <UART_Receive_IT+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013cc4:	6819      	ldr	r1, [r3, #0]
 8013cc6:	680a      	ldr	r2, [r1, #0]
 8013cc8:	3020      	adds	r0, #32
 8013cca:	4382      	bics	r2, r0
 8013ccc:	600a      	str	r2, [r1, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013cce:	2269      	movs	r2, #105	; 0x69
 8013cd0:	5c9a      	ldrb	r2, [r3, r2]
 8013cd2:	2a32      	cmp	r2, #50	; 0x32
 8013cd4:	d01c      	beq.n	8013d10 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013cd6:	6819      	ldr	r1, [r3, #0]
 8013cd8:	680a      	ldr	r2, [r1, #0]
 8013cda:	4810      	ldr	r0, [pc, #64]	; (8013d1c <UART_Receive_IT+0x98>)
 8013cdc:	4002      	ands	r2, r0
 8013cde:	600a      	str	r2, [r1, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013ce0:	6818      	ldr	r0, [r3, #0]
 8013ce2:	6882      	ldr	r2, [r0, #8]
 8013ce4:	2101      	movs	r1, #1
 8013ce6:	438a      	bics	r2, r1
 8013ce8:	6082      	str	r2, [r0, #8]
        huart->State = HAL_UART_STATE_READY;
 8013cea:	2269      	movs	r2, #105	; 0x69
 8013cec:	5499      	strb	r1, [r3, r2]
      HAL_UART_RxCpltCallback(huart);
 8013cee:	0018      	movs	r0, r3
 8013cf0:	f7fa fcd4 	bl	800e69c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8013cf4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013cf6:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013cf8:	691a      	ldr	r2, [r3, #16]
 8013cfa:	2a00      	cmp	r2, #0
 8013cfc:	d1d3      	bne.n	8013ca6 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8013cfe:	681a      	ldr	r2, [r3, #0]
 8013d00:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8013d02:	4002      	ands	r2, r0
 8013d04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013d06:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 8013d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013d0a:	3202      	adds	r2, #2
 8013d0c:	655a      	str	r2, [r3, #84]	; 0x54
 8013d0e:	e7d1      	b.n	8013cb4 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013d10:	3237      	adds	r2, #55	; 0x37
 8013d12:	2112      	movs	r1, #18
 8013d14:	5499      	strb	r1, [r3, r2]
 8013d16:	e7ea      	b.n	8013cee <UART_Receive_IT+0x6a>
    return HAL_BUSY;
 8013d18:	2002      	movs	r0, #2
 8013d1a:	e7ec      	b.n	8013cf6 <UART_Receive_IT+0x72>
 8013d1c:	fffffeff 	.word	0xfffffeff

08013d20 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013d20:	4770      	bx	lr

08013d22 <HAL_UART_IRQHandler>:
{
 8013d22:	b510      	push	{r4, lr}
 8013d24:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8013d26:	6803      	ldr	r3, [r0, #0]
 8013d28:	69da      	ldr	r2, [r3, #28]
 8013d2a:	07d2      	lsls	r2, r2, #31
 8013d2c:	d509      	bpl.n	8013d42 <HAL_UART_IRQHandler+0x20>
 8013d2e:	681a      	ldr	r2, [r3, #0]
 8013d30:	05d2      	lsls	r2, r2, #23
 8013d32:	d506      	bpl.n	8013d42 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8013d34:	2201      	movs	r2, #1
 8013d36:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013d38:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013d3a:	4313      	orrs	r3, r2
 8013d3c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013d3e:	2369      	movs	r3, #105	; 0x69
 8013d40:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013d42:	6823      	ldr	r3, [r4, #0]
 8013d44:	69da      	ldr	r2, [r3, #28]
 8013d46:	0792      	lsls	r2, r2, #30
 8013d48:	d50b      	bpl.n	8013d62 <HAL_UART_IRQHandler+0x40>
 8013d4a:	689a      	ldr	r2, [r3, #8]
 8013d4c:	07d2      	lsls	r2, r2, #31
 8013d4e:	d508      	bpl.n	8013d62 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013d50:	2202      	movs	r2, #2
 8013d52:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013d54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013d56:	3202      	adds	r2, #2
 8013d58:	4313      	orrs	r3, r2
 8013d5a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013d5c:	2369      	movs	r3, #105	; 0x69
 8013d5e:	3a03      	subs	r2, #3
 8013d60:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	69da      	ldr	r2, [r3, #28]
 8013d66:	0752      	lsls	r2, r2, #29
 8013d68:	d50b      	bpl.n	8013d82 <HAL_UART_IRQHandler+0x60>
 8013d6a:	689a      	ldr	r2, [r3, #8]
 8013d6c:	07d2      	lsls	r2, r2, #31
 8013d6e:	d508      	bpl.n	8013d82 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013d70:	2204      	movs	r2, #4
 8013d72:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013d74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013d76:	3a02      	subs	r2, #2
 8013d78:	4313      	orrs	r3, r2
 8013d7a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013d7c:	2369      	movs	r3, #105	; 0x69
 8013d7e:	3a01      	subs	r2, #1
 8013d80:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013d82:	6823      	ldr	r3, [r4, #0]
 8013d84:	69da      	ldr	r2, [r3, #28]
 8013d86:	0712      	lsls	r2, r2, #28
 8013d88:	d50a      	bpl.n	8013da0 <HAL_UART_IRQHandler+0x7e>
 8013d8a:	689a      	ldr	r2, [r3, #8]
 8013d8c:	07d2      	lsls	r2, r2, #31
 8013d8e:	d507      	bpl.n	8013da0 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013d90:	2208      	movs	r2, #8
 8013d92:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013d94:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013d96:	4313      	orrs	r3, r2
 8013d98:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013d9a:	2369      	movs	r3, #105	; 0x69
 8013d9c:	3a07      	subs	r2, #7
 8013d9e:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013da0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d11c      	bne.n	8013de0 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013da6:	6823      	ldr	r3, [r4, #0]
 8013da8:	69da      	ldr	r2, [r3, #28]
 8013daa:	02d2      	lsls	r2, r2, #11
 8013dac:	d502      	bpl.n	8013db4 <HAL_UART_IRQHandler+0x92>
 8013dae:	689a      	ldr	r2, [r3, #8]
 8013db0:	0252      	lsls	r2, r2, #9
 8013db2:	d419      	bmi.n	8013de8 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013db4:	6823      	ldr	r3, [r4, #0]
 8013db6:	69da      	ldr	r2, [r3, #28]
 8013db8:	0692      	lsls	r2, r2, #26
 8013dba:	d502      	bpl.n	8013dc2 <HAL_UART_IRQHandler+0xa0>
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	069b      	lsls	r3, r3, #26
 8013dc0:	d41c      	bmi.n	8013dfc <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013dc2:	6823      	ldr	r3, [r4, #0]
 8013dc4:	69da      	ldr	r2, [r3, #28]
 8013dc6:	0612      	lsls	r2, r2, #24
 8013dc8:	d502      	bpl.n	8013dd0 <HAL_UART_IRQHandler+0xae>
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	061b      	lsls	r3, r3, #24
 8013dce:	d41e      	bmi.n	8013e0e <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013dd0:	6823      	ldr	r3, [r4, #0]
 8013dd2:	69da      	ldr	r2, [r3, #28]
 8013dd4:	0652      	lsls	r2, r2, #25
 8013dd6:	d502      	bpl.n	8013dde <HAL_UART_IRQHandler+0xbc>
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	065b      	lsls	r3, r3, #25
 8013ddc:	d41b      	bmi.n	8013e16 <HAL_UART_IRQHandler+0xf4>
}
 8013dde:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013de0:	0020      	movs	r0, r4
 8013de2:	f7fa fc35 	bl	800e650 <HAL_UART_ErrorCallback>
 8013de6:	e7de      	b.n	8013da6 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013de8:	2280      	movs	r2, #128	; 0x80
 8013dea:	0352      	lsls	r2, r2, #13
 8013dec:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013dee:	2369      	movs	r3, #105	; 0x69
 8013df0:	2201      	movs	r2, #1
 8013df2:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013df4:	0020      	movs	r0, r4
 8013df6:	f7ff ff93 	bl	8013d20 <HAL_UARTEx_WakeupCallback>
 8013dfa:	e7db      	b.n	8013db4 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013dfc:	0020      	movs	r0, r4
 8013dfe:	f7ff ff41 	bl	8013c84 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013e02:	6822      	ldr	r2, [r4, #0]
 8013e04:	6993      	ldr	r3, [r2, #24]
 8013e06:	2108      	movs	r1, #8
 8013e08:	430b      	orrs	r3, r1
 8013e0a:	6193      	str	r3, [r2, #24]
 8013e0c:	e7d9      	b.n	8013dc2 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013e0e:	0020      	movs	r0, r4
 8013e10:	f7ff fee6 	bl	8013be0 <UART_Transmit_IT>
 8013e14:	e7dc      	b.n	8013dd0 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8013e16:	0020      	movs	r0, r4
 8013e18:	f7ff ff1a 	bl	8013c50 <UART_EndTransmit_IT>
}
 8013e1c:	e7df      	b.n	8013dde <HAL_UART_IRQHandler+0xbc>

08013e1e <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 8013e1e:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013e20:	f7fd f97c 	bl	801111c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8013e24:	f7f7 fbe0 	bl	800b5e8 <SystemClock_Config>

  /* Initialize all user peripherals */

  /* Initialize BitzOS */
  BOS_Init();
 8013e28:	f7f0 ff22 	bl	8004c70 <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8013e2c:	f7f4 fb24 	bl	8008478 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8013e30:	f7fb f91a 	bl	800f068 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */


  /* Infinite loop */
  while (1)
 8013e34:	e7fe      	b.n	8013e34 <main+0x16>

08013e36 <UserTask>:
/* UserTask function */
void UserTask(void * argument)
{

  /* Infinite loop */
  for(;;)
 8013e36:	e7fe      	b.n	8013e36 <UserTask>

08013e38 <atof>:
 8013e38:	b510      	push	{r4, lr}
 8013e3a:	2100      	movs	r1, #0
 8013e3c:	f001 fb0a 	bl	8015454 <strtod>
 8013e40:	bd10      	pop	{r4, pc}

08013e42 <atoi>:
 8013e42:	b510      	push	{r4, lr}
 8013e44:	220a      	movs	r2, #10
 8013e46:	2100      	movs	r1, #0
 8013e48:	f001 fbda 	bl	8015600 <strtol>
 8013e4c:	bd10      	pop	{r4, pc}

08013e4e <atol>:
 8013e4e:	b510      	push	{r4, lr}
 8013e50:	220a      	movs	r2, #10
 8013e52:	2100      	movs	r1, #0
 8013e54:	f001 fbd4 	bl	8015600 <strtol>
 8013e58:	bd10      	pop	{r4, pc}
	...

08013e5c <__libc_init_array>:
 8013e5c:	b570      	push	{r4, r5, r6, lr}
 8013e5e:	2600      	movs	r6, #0
 8013e60:	4d0c      	ldr	r5, [pc, #48]	; (8013e94 <__libc_init_array+0x38>)
 8013e62:	4c0d      	ldr	r4, [pc, #52]	; (8013e98 <__libc_init_array+0x3c>)
 8013e64:	1b64      	subs	r4, r4, r5
 8013e66:	10a4      	asrs	r4, r4, #2
 8013e68:	42a6      	cmp	r6, r4
 8013e6a:	d109      	bne.n	8013e80 <__libc_init_array+0x24>
 8013e6c:	2600      	movs	r6, #0
 8013e6e:	f006 fb3b 	bl	801a4e8 <_init>
 8013e72:	4d0a      	ldr	r5, [pc, #40]	; (8013e9c <__libc_init_array+0x40>)
 8013e74:	4c0a      	ldr	r4, [pc, #40]	; (8013ea0 <__libc_init_array+0x44>)
 8013e76:	1b64      	subs	r4, r4, r5
 8013e78:	10a4      	asrs	r4, r4, #2
 8013e7a:	42a6      	cmp	r6, r4
 8013e7c:	d105      	bne.n	8013e8a <__libc_init_array+0x2e>
 8013e7e:	bd70      	pop	{r4, r5, r6, pc}
 8013e80:	00b3      	lsls	r3, r6, #2
 8013e82:	58eb      	ldr	r3, [r5, r3]
 8013e84:	4798      	blx	r3
 8013e86:	3601      	adds	r6, #1
 8013e88:	e7ee      	b.n	8013e68 <__libc_init_array+0xc>
 8013e8a:	00b3      	lsls	r3, r6, #2
 8013e8c:	58eb      	ldr	r3, [r5, r3]
 8013e8e:	4798      	blx	r3
 8013e90:	3601      	adds	r6, #1
 8013e92:	e7f2      	b.n	8013e7a <__libc_init_array+0x1e>
 8013e94:	0801dd00 	.word	0x0801dd00
 8013e98:	0801dd00 	.word	0x0801dd00
 8013e9c:	0801dd00 	.word	0x0801dd00
 8013ea0:	0801dd08 	.word	0x0801dd08

08013ea4 <malloc>:
 8013ea4:	b510      	push	{r4, lr}
 8013ea6:	4b03      	ldr	r3, [pc, #12]	; (8013eb4 <malloc+0x10>)
 8013ea8:	0001      	movs	r1, r0
 8013eaa:	6818      	ldr	r0, [r3, #0]
 8013eac:	f000 f80e 	bl	8013ecc <_malloc_r>
 8013eb0:	bd10      	pop	{r4, pc}
 8013eb2:	46c0      	nop			; (mov r8, r8)
 8013eb4:	200000d0 	.word	0x200000d0

08013eb8 <free>:
 8013eb8:	b510      	push	{r4, lr}
 8013eba:	4b03      	ldr	r3, [pc, #12]	; (8013ec8 <free+0x10>)
 8013ebc:	0001      	movs	r1, r0
 8013ebe:	6818      	ldr	r0, [r3, #0]
 8013ec0:	f003 fd2e 	bl	8017920 <_free_r>
 8013ec4:	bd10      	pop	{r4, pc}
 8013ec6:	46c0      	nop			; (mov r8, r8)
 8013ec8:	200000d0 	.word	0x200000d0

08013ecc <_malloc_r>:
 8013ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ece:	000d      	movs	r5, r1
 8013ed0:	b087      	sub	sp, #28
 8013ed2:	350b      	adds	r5, #11
 8013ed4:	9001      	str	r0, [sp, #4]
 8013ed6:	2d16      	cmp	r5, #22
 8013ed8:	d908      	bls.n	8013eec <_malloc_r+0x20>
 8013eda:	2207      	movs	r2, #7
 8013edc:	4395      	bics	r5, r2
 8013ede:	d506      	bpl.n	8013eee <_malloc_r+0x22>
 8013ee0:	230c      	movs	r3, #12
 8013ee2:	9a01      	ldr	r2, [sp, #4]
 8013ee4:	6013      	str	r3, [r2, #0]
 8013ee6:	2000      	movs	r0, #0
 8013ee8:	b007      	add	sp, #28
 8013eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eec:	2510      	movs	r5, #16
 8013eee:	42a9      	cmp	r1, r5
 8013ef0:	d8f6      	bhi.n	8013ee0 <_malloc_r+0x14>
 8013ef2:	9801      	ldr	r0, [sp, #4]
 8013ef4:	f000 fa1e 	bl	8014334 <__malloc_lock>
 8013ef8:	23fc      	movs	r3, #252	; 0xfc
 8013efa:	48bd      	ldr	r0, [pc, #756]	; (80141f0 <_malloc_r+0x324>)
 8013efc:	005b      	lsls	r3, r3, #1
 8013efe:	429d      	cmp	r5, r3
 8013f00:	d21a      	bcs.n	8013f38 <_malloc_r+0x6c>
 8013f02:	002a      	movs	r2, r5
 8013f04:	3208      	adds	r2, #8
 8013f06:	1882      	adds	r2, r0, r2
 8013f08:	0011      	movs	r1, r2
 8013f0a:	6854      	ldr	r4, [r2, #4]
 8013f0c:	3908      	subs	r1, #8
 8013f0e:	08eb      	lsrs	r3, r5, #3
 8013f10:	428c      	cmp	r4, r1
 8013f12:	d103      	bne.n	8013f1c <_malloc_r+0x50>
 8013f14:	68d4      	ldr	r4, [r2, #12]
 8013f16:	3302      	adds	r3, #2
 8013f18:	42a2      	cmp	r2, r4
 8013f1a:	d023      	beq.n	8013f64 <_malloc_r+0x98>
 8013f1c:	2303      	movs	r3, #3
 8013f1e:	6862      	ldr	r2, [r4, #4]
 8013f20:	68a1      	ldr	r1, [r4, #8]
 8013f22:	439a      	bics	r2, r3
 8013f24:	0013      	movs	r3, r2
 8013f26:	68e2      	ldr	r2, [r4, #12]
 8013f28:	18e3      	adds	r3, r4, r3
 8013f2a:	60ca      	str	r2, [r1, #12]
 8013f2c:	6091      	str	r1, [r2, #8]
 8013f2e:	2201      	movs	r2, #1
 8013f30:	6859      	ldr	r1, [r3, #4]
 8013f32:	430a      	orrs	r2, r1
 8013f34:	605a      	str	r2, [r3, #4]
 8013f36:	e02b      	b.n	8013f90 <_malloc_r+0xc4>
 8013f38:	233f      	movs	r3, #63	; 0x3f
 8013f3a:	0a6a      	lsrs	r2, r5, #9
 8013f3c:	d003      	beq.n	8013f46 <_malloc_r+0x7a>
 8013f3e:	2a04      	cmp	r2, #4
 8013f40:	d82c      	bhi.n	8013f9c <_malloc_r+0xd0>
 8013f42:	09ab      	lsrs	r3, r5, #6
 8013f44:	3338      	adds	r3, #56	; 0x38
 8013f46:	2203      	movs	r2, #3
 8013f48:	4694      	mov	ip, r2
 8013f4a:	00d9      	lsls	r1, r3, #3
 8013f4c:	1809      	adds	r1, r1, r0
 8013f4e:	68cc      	ldr	r4, [r1, #12]
 8013f50:	428c      	cmp	r4, r1
 8013f52:	d006      	beq.n	8013f62 <_malloc_r+0x96>
 8013f54:	4666      	mov	r6, ip
 8013f56:	6862      	ldr	r2, [r4, #4]
 8013f58:	43b2      	bics	r2, r6
 8013f5a:	1b57      	subs	r7, r2, r5
 8013f5c:	2f0f      	cmp	r7, #15
 8013f5e:	dd35      	ble.n	8013fcc <_malloc_r+0x100>
 8013f60:	3b01      	subs	r3, #1
 8013f62:	3301      	adds	r3, #1
 8013f64:	6904      	ldr	r4, [r0, #16]
 8013f66:	49a3      	ldr	r1, [pc, #652]	; (80141f4 <_malloc_r+0x328>)
 8013f68:	428c      	cmp	r4, r1
 8013f6a:	d056      	beq.n	801401a <_malloc_r+0x14e>
 8013f6c:	2203      	movs	r2, #3
 8013f6e:	6866      	ldr	r6, [r4, #4]
 8013f70:	4396      	bics	r6, r2
 8013f72:	0032      	movs	r2, r6
 8013f74:	1b76      	subs	r6, r6, r5
 8013f76:	2e0f      	cmp	r6, #15
 8013f78:	dd36      	ble.n	8013fe8 <_malloc_r+0x11c>
 8013f7a:	2701      	movs	r7, #1
 8013f7c:	1963      	adds	r3, r4, r5
 8013f7e:	433d      	orrs	r5, r7
 8013f80:	4337      	orrs	r7, r6
 8013f82:	6065      	str	r5, [r4, #4]
 8013f84:	6143      	str	r3, [r0, #20]
 8013f86:	6103      	str	r3, [r0, #16]
 8013f88:	60d9      	str	r1, [r3, #12]
 8013f8a:	6099      	str	r1, [r3, #8]
 8013f8c:	605f      	str	r7, [r3, #4]
 8013f8e:	50a6      	str	r6, [r4, r2]
 8013f90:	9801      	ldr	r0, [sp, #4]
 8013f92:	f000 f9d7 	bl	8014344 <__malloc_unlock>
 8013f96:	0020      	movs	r0, r4
 8013f98:	3008      	adds	r0, #8
 8013f9a:	e7a5      	b.n	8013ee8 <_malloc_r+0x1c>
 8013f9c:	2a14      	cmp	r2, #20
 8013f9e:	d802      	bhi.n	8013fa6 <_malloc_r+0xda>
 8013fa0:	0013      	movs	r3, r2
 8013fa2:	335b      	adds	r3, #91	; 0x5b
 8013fa4:	e7cf      	b.n	8013f46 <_malloc_r+0x7a>
 8013fa6:	2a54      	cmp	r2, #84	; 0x54
 8013fa8:	d802      	bhi.n	8013fb0 <_malloc_r+0xe4>
 8013faa:	0b2b      	lsrs	r3, r5, #12
 8013fac:	336e      	adds	r3, #110	; 0x6e
 8013fae:	e7ca      	b.n	8013f46 <_malloc_r+0x7a>
 8013fb0:	23aa      	movs	r3, #170	; 0xaa
 8013fb2:	005b      	lsls	r3, r3, #1
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d802      	bhi.n	8013fbe <_malloc_r+0xf2>
 8013fb8:	0beb      	lsrs	r3, r5, #15
 8013fba:	3377      	adds	r3, #119	; 0x77
 8013fbc:	e7c3      	b.n	8013f46 <_malloc_r+0x7a>
 8013fbe:	498e      	ldr	r1, [pc, #568]	; (80141f8 <_malloc_r+0x32c>)
 8013fc0:	237e      	movs	r3, #126	; 0x7e
 8013fc2:	428a      	cmp	r2, r1
 8013fc4:	d8bf      	bhi.n	8013f46 <_malloc_r+0x7a>
 8013fc6:	0cab      	lsrs	r3, r5, #18
 8013fc8:	337c      	adds	r3, #124	; 0x7c
 8013fca:	e7bc      	b.n	8013f46 <_malloc_r+0x7a>
 8013fcc:	68e6      	ldr	r6, [r4, #12]
 8013fce:	2f00      	cmp	r7, #0
 8013fd0:	db08      	blt.n	8013fe4 <_malloc_r+0x118>
 8013fd2:	68a3      	ldr	r3, [r4, #8]
 8013fd4:	60de      	str	r6, [r3, #12]
 8013fd6:	60b3      	str	r3, [r6, #8]
 8013fd8:	2301      	movs	r3, #1
 8013fda:	18a2      	adds	r2, r4, r2
 8013fdc:	6851      	ldr	r1, [r2, #4]
 8013fde:	430b      	orrs	r3, r1
 8013fe0:	6053      	str	r3, [r2, #4]
 8013fe2:	e7d5      	b.n	8013f90 <_malloc_r+0xc4>
 8013fe4:	0034      	movs	r4, r6
 8013fe6:	e7b3      	b.n	8013f50 <_malloc_r+0x84>
 8013fe8:	6141      	str	r1, [r0, #20]
 8013fea:	6101      	str	r1, [r0, #16]
 8013fec:	2e00      	cmp	r6, #0
 8013fee:	daf3      	bge.n	8013fd8 <_malloc_r+0x10c>
 8013ff0:	6841      	ldr	r1, [r0, #4]
 8013ff2:	468c      	mov	ip, r1
 8013ff4:	2180      	movs	r1, #128	; 0x80
 8013ff6:	0089      	lsls	r1, r1, #2
 8013ff8:	428a      	cmp	r2, r1
 8013ffa:	d300      	bcc.n	8013ffe <_malloc_r+0x132>
 8013ffc:	e089      	b.n	8014112 <_malloc_r+0x246>
 8013ffe:	0956      	lsrs	r6, r2, #5
 8014000:	08d1      	lsrs	r1, r2, #3
 8014002:	2201      	movs	r2, #1
 8014004:	40b2      	lsls	r2, r6
 8014006:	4666      	mov	r6, ip
 8014008:	00c9      	lsls	r1, r1, #3
 801400a:	4332      	orrs	r2, r6
 801400c:	6042      	str	r2, [r0, #4]
 801400e:	1808      	adds	r0, r1, r0
 8014010:	6882      	ldr	r2, [r0, #8]
 8014012:	60e0      	str	r0, [r4, #12]
 8014014:	60a2      	str	r2, [r4, #8]
 8014016:	6084      	str	r4, [r0, #8]
 8014018:	60d4      	str	r4, [r2, #12]
 801401a:	2201      	movs	r2, #1
 801401c:	4874      	ldr	r0, [pc, #464]	; (80141f0 <_malloc_r+0x324>)
 801401e:	1099      	asrs	r1, r3, #2
 8014020:	408a      	lsls	r2, r1
 8014022:	6841      	ldr	r1, [r0, #4]
 8014024:	4291      	cmp	r1, r2
 8014026:	d325      	bcc.n	8014074 <_malloc_r+0x1a8>
 8014028:	420a      	tst	r2, r1
 801402a:	d105      	bne.n	8014038 <_malloc_r+0x16c>
 801402c:	2403      	movs	r4, #3
 801402e:	43a3      	bics	r3, r4
 8014030:	0052      	lsls	r2, r2, #1
 8014032:	3304      	adds	r3, #4
 8014034:	420a      	tst	r2, r1
 8014036:	d0fb      	beq.n	8014030 <_malloc_r+0x164>
 8014038:	00d9      	lsls	r1, r3, #3
 801403a:	1841      	adds	r1, r0, r1
 801403c:	468c      	mov	ip, r1
 801403e:	9302      	str	r3, [sp, #8]
 8014040:	68cc      	ldr	r4, [r1, #12]
 8014042:	428c      	cmp	r4, r1
 8014044:	d000      	beq.n	8014048 <_malloc_r+0x17c>
 8014046:	e09b      	b.n	8014180 <_malloc_r+0x2b4>
 8014048:	2603      	movs	r6, #3
 801404a:	9c02      	ldr	r4, [sp, #8]
 801404c:	3108      	adds	r1, #8
 801404e:	3401      	adds	r4, #1
 8014050:	9402      	str	r4, [sp, #8]
 8014052:	4234      	tst	r4, r6
 8014054:	d1f4      	bne.n	8014040 <_malloc_r+0x174>
 8014056:	2103      	movs	r1, #3
 8014058:	420b      	tst	r3, r1
 801405a:	d000      	beq.n	801405e <_malloc_r+0x192>
 801405c:	e0b7      	b.n	80141ce <_malloc_r+0x302>
 801405e:	6843      	ldr	r3, [r0, #4]
 8014060:	4393      	bics	r3, r2
 8014062:	6043      	str	r3, [r0, #4]
 8014064:	4b62      	ldr	r3, [pc, #392]	; (80141f0 <_malloc_r+0x324>)
 8014066:	0052      	lsls	r2, r2, #1
 8014068:	6859      	ldr	r1, [r3, #4]
 801406a:	4291      	cmp	r1, r2
 801406c:	d302      	bcc.n	8014074 <_malloc_r+0x1a8>
 801406e:	2a00      	cmp	r2, #0
 8014070:	d000      	beq.n	8014074 <_malloc_r+0x1a8>
 8014072:	e0bb      	b.n	80141ec <_malloc_r+0x320>
 8014074:	2303      	movs	r3, #3
 8014076:	6886      	ldr	r6, [r0, #8]
 8014078:	6872      	ldr	r2, [r6, #4]
 801407a:	439a      	bics	r2, r3
 801407c:	9202      	str	r2, [sp, #8]
 801407e:	42aa      	cmp	r2, r5
 8014080:	d303      	bcc.n	801408a <_malloc_r+0x1be>
 8014082:	1b51      	subs	r1, r2, r5
 8014084:	290f      	cmp	r1, #15
 8014086:	dd00      	ble.n	801408a <_malloc_r+0x1be>
 8014088:	e125      	b.n	80142d6 <_malloc_r+0x40a>
 801408a:	9b02      	ldr	r3, [sp, #8]
 801408c:	2008      	movs	r0, #8
 801408e:	18f3      	adds	r3, r6, r3
 8014090:	9303      	str	r3, [sp, #12]
 8014092:	4b5a      	ldr	r3, [pc, #360]	; (80141fc <_malloc_r+0x330>)
 8014094:	681f      	ldr	r7, [r3, #0]
 8014096:	f002 fd43 	bl	8016b20 <sysconf>
 801409a:	4b59      	ldr	r3, [pc, #356]	; (8014200 <_malloc_r+0x334>)
 801409c:	3710      	adds	r7, #16
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	197f      	adds	r7, r7, r5
 80140a2:	9004      	str	r0, [sp, #16]
 80140a4:	3301      	adds	r3, #1
 80140a6:	d003      	beq.n	80140b0 <_malloc_r+0x1e4>
 80140a8:	3f01      	subs	r7, #1
 80140aa:	183f      	adds	r7, r7, r0
 80140ac:	4243      	negs	r3, r0
 80140ae:	401f      	ands	r7, r3
 80140b0:	0039      	movs	r1, r7
 80140b2:	9801      	ldr	r0, [sp, #4]
 80140b4:	f000 fb18 	bl	80146e8 <_sbrk_r>
 80140b8:	0004      	movs	r4, r0
 80140ba:	1c43      	adds	r3, r0, #1
 80140bc:	d100      	bne.n	80140c0 <_malloc_r+0x1f4>
 80140be:	e0de      	b.n	801427e <_malloc_r+0x3b2>
 80140c0:	9b03      	ldr	r3, [sp, #12]
 80140c2:	4283      	cmp	r3, r0
 80140c4:	d903      	bls.n	80140ce <_malloc_r+0x202>
 80140c6:	4b4a      	ldr	r3, [pc, #296]	; (80141f0 <_malloc_r+0x324>)
 80140c8:	429e      	cmp	r6, r3
 80140ca:	d000      	beq.n	80140ce <_malloc_r+0x202>
 80140cc:	e0d7      	b.n	801427e <_malloc_r+0x3b2>
 80140ce:	4b4d      	ldr	r3, [pc, #308]	; (8014204 <_malloc_r+0x338>)
 80140d0:	9903      	ldr	r1, [sp, #12]
 80140d2:	681a      	ldr	r2, [r3, #0]
 80140d4:	18ba      	adds	r2, r7, r2
 80140d6:	601a      	str	r2, [r3, #0]
 80140d8:	9b04      	ldr	r3, [sp, #16]
 80140da:	3b01      	subs	r3, #1
 80140dc:	42a1      	cmp	r1, r4
 80140de:	d000      	beq.n	80140e2 <_malloc_r+0x216>
 80140e0:	e096      	b.n	8014210 <_malloc_r+0x344>
 80140e2:	4219      	tst	r1, r3
 80140e4:	d000      	beq.n	80140e8 <_malloc_r+0x21c>
 80140e6:	e093      	b.n	8014210 <_malloc_r+0x344>
 80140e8:	2601      	movs	r6, #1
 80140ea:	4b41      	ldr	r3, [pc, #260]	; (80141f0 <_malloc_r+0x324>)
 80140ec:	9a02      	ldr	r2, [sp, #8]
 80140ee:	689b      	ldr	r3, [r3, #8]
 80140f0:	19d7      	adds	r7, r2, r7
 80140f2:	433e      	orrs	r6, r7
 80140f4:	605e      	str	r6, [r3, #4]
 80140f6:	4b43      	ldr	r3, [pc, #268]	; (8014204 <_malloc_r+0x338>)
 80140f8:	4a43      	ldr	r2, [pc, #268]	; (8014208 <_malloc_r+0x33c>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	6811      	ldr	r1, [r2, #0]
 80140fe:	428b      	cmp	r3, r1
 8014100:	d900      	bls.n	8014104 <_malloc_r+0x238>
 8014102:	6013      	str	r3, [r2, #0]
 8014104:	4a41      	ldr	r2, [pc, #260]	; (801420c <_malloc_r+0x340>)
 8014106:	6811      	ldr	r1, [r2, #0]
 8014108:	428b      	cmp	r3, r1
 801410a:	d800      	bhi.n	801410e <_malloc_r+0x242>
 801410c:	e0b7      	b.n	801427e <_malloc_r+0x3b2>
 801410e:	6013      	str	r3, [r2, #0]
 8014110:	e0b5      	b.n	801427e <_malloc_r+0x3b2>
 8014112:	0a56      	lsrs	r6, r2, #9
 8014114:	2e04      	cmp	r6, #4
 8014116:	d811      	bhi.n	801413c <_malloc_r+0x270>
 8014118:	0991      	lsrs	r1, r2, #6
 801411a:	3138      	adds	r1, #56	; 0x38
 801411c:	00cf      	lsls	r7, r1, #3
 801411e:	183f      	adds	r7, r7, r0
 8014120:	68be      	ldr	r6, [r7, #8]
 8014122:	42b7      	cmp	r7, r6
 8014124:	d125      	bne.n	8014172 <_malloc_r+0x2a6>
 8014126:	2201      	movs	r2, #1
 8014128:	1089      	asrs	r1, r1, #2
 801412a:	408a      	lsls	r2, r1
 801412c:	4661      	mov	r1, ip
 801412e:	430a      	orrs	r2, r1
 8014130:	6042      	str	r2, [r0, #4]
 8014132:	60e7      	str	r7, [r4, #12]
 8014134:	60a6      	str	r6, [r4, #8]
 8014136:	60bc      	str	r4, [r7, #8]
 8014138:	60f4      	str	r4, [r6, #12]
 801413a:	e76e      	b.n	801401a <_malloc_r+0x14e>
 801413c:	2e14      	cmp	r6, #20
 801413e:	d802      	bhi.n	8014146 <_malloc_r+0x27a>
 8014140:	0031      	movs	r1, r6
 8014142:	315b      	adds	r1, #91	; 0x5b
 8014144:	e7ea      	b.n	801411c <_malloc_r+0x250>
 8014146:	2e54      	cmp	r6, #84	; 0x54
 8014148:	d802      	bhi.n	8014150 <_malloc_r+0x284>
 801414a:	0b11      	lsrs	r1, r2, #12
 801414c:	316e      	adds	r1, #110	; 0x6e
 801414e:	e7e5      	b.n	801411c <_malloc_r+0x250>
 8014150:	21aa      	movs	r1, #170	; 0xaa
 8014152:	0049      	lsls	r1, r1, #1
 8014154:	428e      	cmp	r6, r1
 8014156:	d802      	bhi.n	801415e <_malloc_r+0x292>
 8014158:	0bd1      	lsrs	r1, r2, #15
 801415a:	3177      	adds	r1, #119	; 0x77
 801415c:	e7de      	b.n	801411c <_malloc_r+0x250>
 801415e:	4f26      	ldr	r7, [pc, #152]	; (80141f8 <_malloc_r+0x32c>)
 8014160:	217e      	movs	r1, #126	; 0x7e
 8014162:	42be      	cmp	r6, r7
 8014164:	d8da      	bhi.n	801411c <_malloc_r+0x250>
 8014166:	0c91      	lsrs	r1, r2, #18
 8014168:	317c      	adds	r1, #124	; 0x7c
 801416a:	e7d7      	b.n	801411c <_malloc_r+0x250>
 801416c:	68b6      	ldr	r6, [r6, #8]
 801416e:	42b7      	cmp	r7, r6
 8014170:	d004      	beq.n	801417c <_malloc_r+0x2b0>
 8014172:	2003      	movs	r0, #3
 8014174:	6871      	ldr	r1, [r6, #4]
 8014176:	4381      	bics	r1, r0
 8014178:	4291      	cmp	r1, r2
 801417a:	d8f7      	bhi.n	801416c <_malloc_r+0x2a0>
 801417c:	68f7      	ldr	r7, [r6, #12]
 801417e:	e7d8      	b.n	8014132 <_malloc_r+0x266>
 8014180:	2703      	movs	r7, #3
 8014182:	6866      	ldr	r6, [r4, #4]
 8014184:	43be      	bics	r6, r7
 8014186:	9603      	str	r6, [sp, #12]
 8014188:	1b77      	subs	r7, r6, r5
 801418a:	68e6      	ldr	r6, [r4, #12]
 801418c:	2f0f      	cmp	r7, #15
 801418e:	dd10      	ble.n	80141b2 <_malloc_r+0x2e6>
 8014190:	2201      	movs	r2, #1
 8014192:	68a1      	ldr	r1, [r4, #8]
 8014194:	1963      	adds	r3, r4, r5
 8014196:	4315      	orrs	r5, r2
 8014198:	6065      	str	r5, [r4, #4]
 801419a:	60ce      	str	r6, [r1, #12]
 801419c:	60b1      	str	r1, [r6, #8]
 801419e:	6143      	str	r3, [r0, #20]
 80141a0:	6103      	str	r3, [r0, #16]
 80141a2:	4814      	ldr	r0, [pc, #80]	; (80141f4 <_malloc_r+0x328>)
 80141a4:	433a      	orrs	r2, r7
 80141a6:	60d8      	str	r0, [r3, #12]
 80141a8:	6098      	str	r0, [r3, #8]
 80141aa:	605a      	str	r2, [r3, #4]
 80141ac:	9b03      	ldr	r3, [sp, #12]
 80141ae:	50e7      	str	r7, [r4, r3]
 80141b0:	e6ee      	b.n	8013f90 <_malloc_r+0xc4>
 80141b2:	2f00      	cmp	r7, #0
 80141b4:	db09      	blt.n	80141ca <_malloc_r+0x2fe>
 80141b6:	9b03      	ldr	r3, [sp, #12]
 80141b8:	18e1      	adds	r1, r4, r3
 80141ba:	2301      	movs	r3, #1
 80141bc:	684a      	ldr	r2, [r1, #4]
 80141be:	4313      	orrs	r3, r2
 80141c0:	604b      	str	r3, [r1, #4]
 80141c2:	68a3      	ldr	r3, [r4, #8]
 80141c4:	60de      	str	r6, [r3, #12]
 80141c6:	60b3      	str	r3, [r6, #8]
 80141c8:	e6e2      	b.n	8013f90 <_malloc_r+0xc4>
 80141ca:	0034      	movs	r4, r6
 80141cc:	e739      	b.n	8014042 <_malloc_r+0x176>
 80141ce:	2108      	movs	r1, #8
 80141d0:	4249      	negs	r1, r1
 80141d2:	448c      	add	ip, r1
 80141d4:	4661      	mov	r1, ip
 80141d6:	6889      	ldr	r1, [r1, #8]
 80141d8:	3b01      	subs	r3, #1
 80141da:	4561      	cmp	r1, ip
 80141dc:	d100      	bne.n	80141e0 <_malloc_r+0x314>
 80141de:	e73a      	b.n	8014056 <_malloc_r+0x18a>
 80141e0:	e740      	b.n	8014064 <_malloc_r+0x198>
 80141e2:	3304      	adds	r3, #4
 80141e4:	0052      	lsls	r2, r2, #1
 80141e6:	420a      	tst	r2, r1
 80141e8:	d0fb      	beq.n	80141e2 <_malloc_r+0x316>
 80141ea:	e725      	b.n	8014038 <_malloc_r+0x16c>
 80141ec:	9b02      	ldr	r3, [sp, #8]
 80141ee:	e7fa      	b.n	80141e6 <_malloc_r+0x31a>
 80141f0:	20000500 	.word	0x20000500
 80141f4:	20000508 	.word	0x20000508
 80141f8:	00000554 	.word	0x00000554
 80141fc:	20006c94 	.word	0x20006c94
 8014200:	20000908 	.word	0x20000908
 8014204:	20006c64 	.word	0x20006c64
 8014208:	20006c8c 	.word	0x20006c8c
 801420c:	20006c90 	.word	0x20006c90
 8014210:	4935      	ldr	r1, [pc, #212]	; (80142e8 <_malloc_r+0x41c>)
 8014212:	6808      	ldr	r0, [r1, #0]
 8014214:	3001      	adds	r0, #1
 8014216:	d140      	bne.n	801429a <_malloc_r+0x3ce>
 8014218:	600c      	str	r4, [r1, #0]
 801421a:	2207      	movs	r2, #7
 801421c:	0021      	movs	r1, r4
 801421e:	4011      	ands	r1, r2
 8014220:	2000      	movs	r0, #0
 8014222:	9103      	str	r1, [sp, #12]
 8014224:	4214      	tst	r4, r2
 8014226:	d002      	beq.n	801422e <_malloc_r+0x362>
 8014228:	3008      	adds	r0, #8
 801422a:	1a40      	subs	r0, r0, r1
 801422c:	1824      	adds	r4, r4, r0
 801422e:	19e2      	adds	r2, r4, r7
 8014230:	9205      	str	r2, [sp, #20]
 8014232:	9f05      	ldr	r7, [sp, #20]
 8014234:	9a04      	ldr	r2, [sp, #16]
 8014236:	401f      	ands	r7, r3
 8014238:	1810      	adds	r0, r2, r0
 801423a:	1bc7      	subs	r7, r0, r7
 801423c:	401f      	ands	r7, r3
 801423e:	0039      	movs	r1, r7
 8014240:	9801      	ldr	r0, [sp, #4]
 8014242:	f000 fa51 	bl	80146e8 <_sbrk_r>
 8014246:	1c43      	adds	r3, r0, #1
 8014248:	d107      	bne.n	801425a <_malloc_r+0x38e>
 801424a:	9b03      	ldr	r3, [sp, #12]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d02a      	beq.n	80142a6 <_malloc_r+0x3da>
 8014250:	0018      	movs	r0, r3
 8014252:	2700      	movs	r7, #0
 8014254:	9b05      	ldr	r3, [sp, #20]
 8014256:	3808      	subs	r0, #8
 8014258:	1818      	adds	r0, r3, r0
 801425a:	4a24      	ldr	r2, [pc, #144]	; (80142ec <_malloc_r+0x420>)
 801425c:	1b00      	subs	r0, r0, r4
 801425e:	6813      	ldr	r3, [r2, #0]
 8014260:	19db      	adds	r3, r3, r7
 8014262:	6013      	str	r3, [r2, #0]
 8014264:	2201      	movs	r2, #1
 8014266:	4b22      	ldr	r3, [pc, #136]	; (80142f0 <_malloc_r+0x424>)
 8014268:	19c7      	adds	r7, r0, r7
 801426a:	4317      	orrs	r7, r2
 801426c:	609c      	str	r4, [r3, #8]
 801426e:	6067      	str	r7, [r4, #4]
 8014270:	429e      	cmp	r6, r3
 8014272:	d100      	bne.n	8014276 <_malloc_r+0x3aa>
 8014274:	e73f      	b.n	80140f6 <_malloc_r+0x22a>
 8014276:	9b02      	ldr	r3, [sp, #8]
 8014278:	2b0f      	cmp	r3, #15
 801427a:	d817      	bhi.n	80142ac <_malloc_r+0x3e0>
 801427c:	6062      	str	r2, [r4, #4]
 801427e:	2203      	movs	r2, #3
 8014280:	4b1b      	ldr	r3, [pc, #108]	; (80142f0 <_malloc_r+0x424>)
 8014282:	689b      	ldr	r3, [r3, #8]
 8014284:	685b      	ldr	r3, [r3, #4]
 8014286:	4393      	bics	r3, r2
 8014288:	1b59      	subs	r1, r3, r5
 801428a:	42ab      	cmp	r3, r5
 801428c:	d301      	bcc.n	8014292 <_malloc_r+0x3c6>
 801428e:	290f      	cmp	r1, #15
 8014290:	dc21      	bgt.n	80142d6 <_malloc_r+0x40a>
 8014292:	9801      	ldr	r0, [sp, #4]
 8014294:	f000 f856 	bl	8014344 <__malloc_unlock>
 8014298:	e625      	b.n	8013ee6 <_malloc_r+0x1a>
 801429a:	9903      	ldr	r1, [sp, #12]
 801429c:	1a61      	subs	r1, r4, r1
 801429e:	1889      	adds	r1, r1, r2
 80142a0:	4a12      	ldr	r2, [pc, #72]	; (80142ec <_malloc_r+0x420>)
 80142a2:	6011      	str	r1, [r2, #0]
 80142a4:	e7b9      	b.n	801421a <_malloc_r+0x34e>
 80142a6:	9805      	ldr	r0, [sp, #20]
 80142a8:	9f03      	ldr	r7, [sp, #12]
 80142aa:	e7d6      	b.n	801425a <_malloc_r+0x38e>
 80142ac:	2307      	movs	r3, #7
 80142ae:	9f02      	ldr	r7, [sp, #8]
 80142b0:	3f0c      	subs	r7, #12
 80142b2:	439f      	bics	r7, r3
 80142b4:	6873      	ldr	r3, [r6, #4]
 80142b6:	401a      	ands	r2, r3
 80142b8:	433a      	orrs	r2, r7
 80142ba:	6072      	str	r2, [r6, #4]
 80142bc:	2205      	movs	r2, #5
 80142be:	19f3      	adds	r3, r6, r7
 80142c0:	605a      	str	r2, [r3, #4]
 80142c2:	609a      	str	r2, [r3, #8]
 80142c4:	2f0f      	cmp	r7, #15
 80142c6:	d800      	bhi.n	80142ca <_malloc_r+0x3fe>
 80142c8:	e715      	b.n	80140f6 <_malloc_r+0x22a>
 80142ca:	0031      	movs	r1, r6
 80142cc:	9801      	ldr	r0, [sp, #4]
 80142ce:	3108      	adds	r1, #8
 80142d0:	f003 fb26 	bl	8017920 <_free_r>
 80142d4:	e70f      	b.n	80140f6 <_malloc_r+0x22a>
 80142d6:	2201      	movs	r2, #1
 80142d8:	0013      	movs	r3, r2
 80142da:	4805      	ldr	r0, [pc, #20]	; (80142f0 <_malloc_r+0x424>)
 80142dc:	432b      	orrs	r3, r5
 80142de:	6884      	ldr	r4, [r0, #8]
 80142e0:	6063      	str	r3, [r4, #4]
 80142e2:	1963      	adds	r3, r4, r5
 80142e4:	6083      	str	r3, [r0, #8]
 80142e6:	e624      	b.n	8013f32 <_malloc_r+0x66>
 80142e8:	20000908 	.word	0x20000908
 80142ec:	20006c64 	.word	0x20006c64
 80142f0:	20000500 	.word	0x20000500

080142f4 <memcmp>:
 80142f4:	b530      	push	{r4, r5, lr}
 80142f6:	2400      	movs	r4, #0
 80142f8:	3901      	subs	r1, #1
 80142fa:	42a2      	cmp	r2, r4
 80142fc:	d101      	bne.n	8014302 <memcmp+0xe>
 80142fe:	2000      	movs	r0, #0
 8014300:	e005      	b.n	801430e <memcmp+0x1a>
 8014302:	5d03      	ldrb	r3, [r0, r4]
 8014304:	3401      	adds	r4, #1
 8014306:	5d0d      	ldrb	r5, [r1, r4]
 8014308:	42ab      	cmp	r3, r5
 801430a:	d0f6      	beq.n	80142fa <memcmp+0x6>
 801430c:	1b58      	subs	r0, r3, r5
 801430e:	bd30      	pop	{r4, r5, pc}

08014310 <memcpy>:
 8014310:	2300      	movs	r3, #0
 8014312:	b510      	push	{r4, lr}
 8014314:	429a      	cmp	r2, r3
 8014316:	d100      	bne.n	801431a <memcpy+0xa>
 8014318:	bd10      	pop	{r4, pc}
 801431a:	5ccc      	ldrb	r4, [r1, r3]
 801431c:	54c4      	strb	r4, [r0, r3]
 801431e:	3301      	adds	r3, #1
 8014320:	e7f8      	b.n	8014314 <memcpy+0x4>

08014322 <memset>:
 8014322:	0003      	movs	r3, r0
 8014324:	1882      	adds	r2, r0, r2
 8014326:	4293      	cmp	r3, r2
 8014328:	d100      	bne.n	801432c <memset+0xa>
 801432a:	4770      	bx	lr
 801432c:	7019      	strb	r1, [r3, #0]
 801432e:	3301      	adds	r3, #1
 8014330:	e7f9      	b.n	8014326 <memset+0x4>
	...

08014334 <__malloc_lock>:
 8014334:	b510      	push	{r4, lr}
 8014336:	4802      	ldr	r0, [pc, #8]	; (8014340 <__malloc_lock+0xc>)
 8014338:	f003 ff24 	bl	8018184 <__retarget_lock_acquire_recursive>
 801433c:	bd10      	pop	{r4, pc}
 801433e:	46c0      	nop			; (mov r8, r8)
 8014340:	200071fc 	.word	0x200071fc

08014344 <__malloc_unlock>:
 8014344:	b510      	push	{r4, lr}
 8014346:	4802      	ldr	r0, [pc, #8]	; (8014350 <__malloc_unlock+0xc>)
 8014348:	f003 ff1d 	bl	8018186 <__retarget_lock_release_recursive>
 801434c:	bd10      	pop	{r4, pc}
 801434e:	46c0      	nop			; (mov r8, r8)
 8014350:	200071fc 	.word	0x200071fc

08014354 <rand>:
 8014354:	4b09      	ldr	r3, [pc, #36]	; (801437c <rand+0x28>)
 8014356:	b510      	push	{r4, lr}
 8014358:	681c      	ldr	r4, [r3, #0]
 801435a:	4a09      	ldr	r2, [pc, #36]	; (8014380 <rand+0x2c>)
 801435c:	34a8      	adds	r4, #168	; 0xa8
 801435e:	6820      	ldr	r0, [r4, #0]
 8014360:	6861      	ldr	r1, [r4, #4]
 8014362:	4b08      	ldr	r3, [pc, #32]	; (8014384 <rand+0x30>)
 8014364:	f7ec f902 	bl	800056c <__aeabi_lmul>
 8014368:	2201      	movs	r2, #1
 801436a:	2300      	movs	r3, #0
 801436c:	1880      	adds	r0, r0, r2
 801436e:	4159      	adcs	r1, r3
 8014370:	6020      	str	r0, [r4, #0]
 8014372:	6061      	str	r1, [r4, #4]
 8014374:	0048      	lsls	r0, r1, #1
 8014376:	0840      	lsrs	r0, r0, #1
 8014378:	bd10      	pop	{r4, pc}
 801437a:	46c0      	nop			; (mov r8, r8)
 801437c:	200000d0 	.word	0x200000d0
 8014380:	4c957f2d 	.word	0x4c957f2d
 8014384:	5851f42d 	.word	0x5851f42d

08014388 <realloc>:
 8014388:	b510      	push	{r4, lr}
 801438a:	4b03      	ldr	r3, [pc, #12]	; (8014398 <realloc+0x10>)
 801438c:	000a      	movs	r2, r1
 801438e:	0001      	movs	r1, r0
 8014390:	6818      	ldr	r0, [r3, #0]
 8014392:	f000 f803 	bl	801439c <_realloc_r>
 8014396:	bd10      	pop	{r4, pc}
 8014398:	200000d0 	.word	0x200000d0

0801439c <_realloc_r>:
 801439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801439e:	b087      	sub	sp, #28
 80143a0:	1e0c      	subs	r4, r1, #0
 80143a2:	9002      	str	r0, [sp, #8]
 80143a4:	9205      	str	r2, [sp, #20]
 80143a6:	d106      	bne.n	80143b6 <_realloc_r+0x1a>
 80143a8:	0011      	movs	r1, r2
 80143aa:	f7ff fd8f 	bl	8013ecc <_malloc_r>
 80143ae:	0007      	movs	r7, r0
 80143b0:	0038      	movs	r0, r7
 80143b2:	b007      	add	sp, #28
 80143b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143b6:	9802      	ldr	r0, [sp, #8]
 80143b8:	f7ff ffbc 	bl	8014334 <__malloc_lock>
 80143bc:	9e05      	ldr	r6, [sp, #20]
 80143be:	360b      	adds	r6, #11
 80143c0:	2e16      	cmp	r6, #22
 80143c2:	d908      	bls.n	80143d6 <_realloc_r+0x3a>
 80143c4:	2307      	movs	r3, #7
 80143c6:	439e      	bics	r6, r3
 80143c8:	9601      	str	r6, [sp, #4]
 80143ca:	d506      	bpl.n	80143da <_realloc_r+0x3e>
 80143cc:	230c      	movs	r3, #12
 80143ce:	9a02      	ldr	r2, [sp, #8]
 80143d0:	2700      	movs	r7, #0
 80143d2:	6013      	str	r3, [r2, #0]
 80143d4:	e7ec      	b.n	80143b0 <_realloc_r+0x14>
 80143d6:	2310      	movs	r3, #16
 80143d8:	9301      	str	r3, [sp, #4]
 80143da:	9b01      	ldr	r3, [sp, #4]
 80143dc:	9a05      	ldr	r2, [sp, #20]
 80143de:	4293      	cmp	r3, r2
 80143e0:	d3f4      	bcc.n	80143cc <_realloc_r+0x30>
 80143e2:	0023      	movs	r3, r4
 80143e4:	3b08      	subs	r3, #8
 80143e6:	685f      	ldr	r7, [r3, #4]
 80143e8:	9304      	str	r3, [sp, #16]
 80143ea:	003a      	movs	r2, r7
 80143ec:	2303      	movs	r3, #3
 80143ee:	439a      	bics	r2, r3
 80143f0:	9b01      	ldr	r3, [sp, #4]
 80143f2:	9203      	str	r2, [sp, #12]
 80143f4:	4293      	cmp	r3, r2
 80143f6:	dc00      	bgt.n	80143fa <_realloc_r+0x5e>
 80143f8:	e16b      	b.n	80146d2 <_realloc_r+0x336>
 80143fa:	9b04      	ldr	r3, [sp, #16]
 80143fc:	48b9      	ldr	r0, [pc, #740]	; (80146e4 <_realloc_r+0x348>)
 80143fe:	189b      	adds	r3, r3, r2
 8014400:	6882      	ldr	r2, [r0, #8]
 8014402:	4694      	mov	ip, r2
 8014404:	685a      	ldr	r2, [r3, #4]
 8014406:	459c      	cmp	ip, r3
 8014408:	d006      	beq.n	8014418 <_realloc_r+0x7c>
 801440a:	2501      	movs	r5, #1
 801440c:	0011      	movs	r1, r2
 801440e:	43a9      	bics	r1, r5
 8014410:	1859      	adds	r1, r3, r1
 8014412:	6849      	ldr	r1, [r1, #4]
 8014414:	4229      	tst	r1, r5
 8014416:	d126      	bne.n	8014466 <_realloc_r+0xca>
 8014418:	2103      	movs	r1, #3
 801441a:	438a      	bics	r2, r1
 801441c:	9903      	ldr	r1, [sp, #12]
 801441e:	188e      	adds	r6, r1, r2
 8014420:	9901      	ldr	r1, [sp, #4]
 8014422:	459c      	cmp	ip, r3
 8014424:	d117      	bne.n	8014456 <_realloc_r+0xba>
 8014426:	3110      	adds	r1, #16
 8014428:	42b1      	cmp	r1, r6
 801442a:	dc1e      	bgt.n	801446a <_realloc_r+0xce>
 801442c:	9901      	ldr	r1, [sp, #4]
 801442e:	9b04      	ldr	r3, [sp, #16]
 8014430:	468c      	mov	ip, r1
 8014432:	4463      	add	r3, ip
 8014434:	6083      	str	r3, [r0, #8]
 8014436:	001a      	movs	r2, r3
 8014438:	1a73      	subs	r3, r6, r1
 801443a:	2601      	movs	r6, #1
 801443c:	4333      	orrs	r3, r6
 801443e:	6053      	str	r3, [r2, #4]
 8014440:	0023      	movs	r3, r4
 8014442:	3b08      	subs	r3, #8
 8014444:	685a      	ldr	r2, [r3, #4]
 8014446:	9802      	ldr	r0, [sp, #8]
 8014448:	4016      	ands	r6, r2
 801444a:	430e      	orrs	r6, r1
 801444c:	605e      	str	r6, [r3, #4]
 801444e:	f7ff ff79 	bl	8014344 <__malloc_unlock>
 8014452:	0027      	movs	r7, r4
 8014454:	e7ac      	b.n	80143b0 <_realloc_r+0x14>
 8014456:	42b1      	cmp	r1, r6
 8014458:	dc07      	bgt.n	801446a <_realloc_r+0xce>
 801445a:	68da      	ldr	r2, [r3, #12]
 801445c:	689b      	ldr	r3, [r3, #8]
 801445e:	60da      	str	r2, [r3, #12]
 8014460:	6093      	str	r3, [r2, #8]
 8014462:	9d04      	ldr	r5, [sp, #16]
 8014464:	e07f      	b.n	8014566 <_realloc_r+0x1ca>
 8014466:	2200      	movs	r2, #0
 8014468:	0013      	movs	r3, r2
 801446a:	07f9      	lsls	r1, r7, #31
 801446c:	d500      	bpl.n	8014470 <_realloc_r+0xd4>
 801446e:	e0e2      	b.n	8014636 <_realloc_r+0x29a>
 8014470:	0021      	movs	r1, r4
 8014472:	3908      	subs	r1, #8
 8014474:	680d      	ldr	r5, [r1, #0]
 8014476:	9904      	ldr	r1, [sp, #16]
 8014478:	1b4d      	subs	r5, r1, r5
 801447a:	2103      	movs	r1, #3
 801447c:	686f      	ldr	r7, [r5, #4]
 801447e:	438f      	bics	r7, r1
 8014480:	9903      	ldr	r1, [sp, #12]
 8014482:	187f      	adds	r7, r7, r1
 8014484:	2b00      	cmp	r3, #0
 8014486:	d100      	bne.n	801448a <_realloc_r+0xee>
 8014488:	e0a0      	b.n	80145cc <_realloc_r+0x230>
 801448a:	19d6      	adds	r6, r2, r7
 801448c:	459c      	cmp	ip, r3
 801448e:	d149      	bne.n	8014524 <_realloc_r+0x188>
 8014490:	9b01      	ldr	r3, [sp, #4]
 8014492:	3310      	adds	r3, #16
 8014494:	42b3      	cmp	r3, r6
 8014496:	dd00      	ble.n	801449a <_realloc_r+0xfe>
 8014498:	e098      	b.n	80145cc <_realloc_r+0x230>
 801449a:	68aa      	ldr	r2, [r5, #8]
 801449c:	68eb      	ldr	r3, [r5, #12]
 801449e:	002f      	movs	r7, r5
 80144a0:	60d3      	str	r3, [r2, #12]
 80144a2:	609a      	str	r2, [r3, #8]
 80144a4:	000a      	movs	r2, r1
 80144a6:	3a04      	subs	r2, #4
 80144a8:	3708      	adds	r7, #8
 80144aa:	2a24      	cmp	r2, #36	; 0x24
 80144ac:	d835      	bhi.n	801451a <_realloc_r+0x17e>
 80144ae:	003b      	movs	r3, r7
 80144b0:	2a13      	cmp	r2, #19
 80144b2:	d908      	bls.n	80144c6 <_realloc_r+0x12a>
 80144b4:	6823      	ldr	r3, [r4, #0]
 80144b6:	60ab      	str	r3, [r5, #8]
 80144b8:	6863      	ldr	r3, [r4, #4]
 80144ba:	60eb      	str	r3, [r5, #12]
 80144bc:	2a1b      	cmp	r2, #27
 80144be:	d81a      	bhi.n	80144f6 <_realloc_r+0x15a>
 80144c0:	002b      	movs	r3, r5
 80144c2:	3408      	adds	r4, #8
 80144c4:	3310      	adds	r3, #16
 80144c6:	6822      	ldr	r2, [r4, #0]
 80144c8:	601a      	str	r2, [r3, #0]
 80144ca:	6862      	ldr	r2, [r4, #4]
 80144cc:	605a      	str	r2, [r3, #4]
 80144ce:	68a2      	ldr	r2, [r4, #8]
 80144d0:	609a      	str	r2, [r3, #8]
 80144d2:	9b01      	ldr	r3, [sp, #4]
 80144d4:	18ea      	adds	r2, r5, r3
 80144d6:	4b83      	ldr	r3, [pc, #524]	; (80146e4 <_realloc_r+0x348>)
 80144d8:	609a      	str	r2, [r3, #8]
 80144da:	9b01      	ldr	r3, [sp, #4]
 80144dc:	1af3      	subs	r3, r6, r3
 80144de:	2601      	movs	r6, #1
 80144e0:	4333      	orrs	r3, r6
 80144e2:	6053      	str	r3, [r2, #4]
 80144e4:	686b      	ldr	r3, [r5, #4]
 80144e6:	401e      	ands	r6, r3
 80144e8:	9b01      	ldr	r3, [sp, #4]
 80144ea:	431e      	orrs	r6, r3
 80144ec:	606e      	str	r6, [r5, #4]
 80144ee:	9802      	ldr	r0, [sp, #8]
 80144f0:	f7ff ff28 	bl	8014344 <__malloc_unlock>
 80144f4:	e75c      	b.n	80143b0 <_realloc_r+0x14>
 80144f6:	68a3      	ldr	r3, [r4, #8]
 80144f8:	612b      	str	r3, [r5, #16]
 80144fa:	68e3      	ldr	r3, [r4, #12]
 80144fc:	616b      	str	r3, [r5, #20]
 80144fe:	2a24      	cmp	r2, #36	; 0x24
 8014500:	d003      	beq.n	801450a <_realloc_r+0x16e>
 8014502:	002b      	movs	r3, r5
 8014504:	3410      	adds	r4, #16
 8014506:	3318      	adds	r3, #24
 8014508:	e7dd      	b.n	80144c6 <_realloc_r+0x12a>
 801450a:	6923      	ldr	r3, [r4, #16]
 801450c:	61ab      	str	r3, [r5, #24]
 801450e:	002b      	movs	r3, r5
 8014510:	6962      	ldr	r2, [r4, #20]
 8014512:	3320      	adds	r3, #32
 8014514:	61ea      	str	r2, [r5, #28]
 8014516:	3418      	adds	r4, #24
 8014518:	e7d5      	b.n	80144c6 <_realloc_r+0x12a>
 801451a:	0021      	movs	r1, r4
 801451c:	0038      	movs	r0, r7
 801451e:	f003 fe50 	bl	80181c2 <memmove>
 8014522:	e7d6      	b.n	80144d2 <_realloc_r+0x136>
 8014524:	9a01      	ldr	r2, [sp, #4]
 8014526:	42b2      	cmp	r2, r6
 8014528:	dc50      	bgt.n	80145cc <_realloc_r+0x230>
 801452a:	0028      	movs	r0, r5
 801452c:	68da      	ldr	r2, [r3, #12]
 801452e:	689b      	ldr	r3, [r3, #8]
 8014530:	3008      	adds	r0, #8
 8014532:	60da      	str	r2, [r3, #12]
 8014534:	6093      	str	r3, [r2, #8]
 8014536:	68aa      	ldr	r2, [r5, #8]
 8014538:	68eb      	ldr	r3, [r5, #12]
 801453a:	60d3      	str	r3, [r2, #12]
 801453c:	609a      	str	r2, [r3, #8]
 801453e:	9a03      	ldr	r2, [sp, #12]
 8014540:	3a04      	subs	r2, #4
 8014542:	2a24      	cmp	r2, #36	; 0x24
 8014544:	d83e      	bhi.n	80145c4 <_realloc_r+0x228>
 8014546:	2a13      	cmp	r2, #19
 8014548:	d907      	bls.n	801455a <_realloc_r+0x1be>
 801454a:	6823      	ldr	r3, [r4, #0]
 801454c:	60ab      	str	r3, [r5, #8]
 801454e:	6863      	ldr	r3, [r4, #4]
 8014550:	60eb      	str	r3, [r5, #12]
 8014552:	2a1b      	cmp	r2, #27
 8014554:	d824      	bhi.n	80145a0 <_realloc_r+0x204>
 8014556:	3408      	adds	r4, #8
 8014558:	3008      	adds	r0, #8
 801455a:	6823      	ldr	r3, [r4, #0]
 801455c:	6003      	str	r3, [r0, #0]
 801455e:	6863      	ldr	r3, [r4, #4]
 8014560:	6043      	str	r3, [r0, #4]
 8014562:	68a3      	ldr	r3, [r4, #8]
 8014564:	6083      	str	r3, [r0, #8]
 8014566:	9b01      	ldr	r3, [sp, #4]
 8014568:	6868      	ldr	r0, [r5, #4]
 801456a:	1af4      	subs	r4, r6, r3
 801456c:	2301      	movs	r3, #1
 801456e:	19aa      	adds	r2, r5, r6
 8014570:	4018      	ands	r0, r3
 8014572:	2c0f      	cmp	r4, #15
 8014574:	d800      	bhi.n	8014578 <_realloc_r+0x1dc>
 8014576:	e0ae      	b.n	80146d6 <_realloc_r+0x33a>
 8014578:	9901      	ldr	r1, [sp, #4]
 801457a:	9e01      	ldr	r6, [sp, #4]
 801457c:	1869      	adds	r1, r5, r1
 801457e:	4330      	orrs	r0, r6
 8014580:	431c      	orrs	r4, r3
 8014582:	6068      	str	r0, [r5, #4]
 8014584:	604c      	str	r4, [r1, #4]
 8014586:	6850      	ldr	r0, [r2, #4]
 8014588:	3108      	adds	r1, #8
 801458a:	4303      	orrs	r3, r0
 801458c:	6053      	str	r3, [r2, #4]
 801458e:	9802      	ldr	r0, [sp, #8]
 8014590:	f003 f9c6 	bl	8017920 <_free_r>
 8014594:	9802      	ldr	r0, [sp, #8]
 8014596:	3508      	adds	r5, #8
 8014598:	f7ff fed4 	bl	8014344 <__malloc_unlock>
 801459c:	002f      	movs	r7, r5
 801459e:	e707      	b.n	80143b0 <_realloc_r+0x14>
 80145a0:	68a3      	ldr	r3, [r4, #8]
 80145a2:	612b      	str	r3, [r5, #16]
 80145a4:	68e3      	ldr	r3, [r4, #12]
 80145a6:	616b      	str	r3, [r5, #20]
 80145a8:	2a24      	cmp	r2, #36	; 0x24
 80145aa:	d003      	beq.n	80145b4 <_realloc_r+0x218>
 80145ac:	0028      	movs	r0, r5
 80145ae:	3410      	adds	r4, #16
 80145b0:	3018      	adds	r0, #24
 80145b2:	e7d2      	b.n	801455a <_realloc_r+0x1be>
 80145b4:	0028      	movs	r0, r5
 80145b6:	6923      	ldr	r3, [r4, #16]
 80145b8:	3020      	adds	r0, #32
 80145ba:	61ab      	str	r3, [r5, #24]
 80145bc:	6963      	ldr	r3, [r4, #20]
 80145be:	3418      	adds	r4, #24
 80145c0:	61eb      	str	r3, [r5, #28]
 80145c2:	e7ca      	b.n	801455a <_realloc_r+0x1be>
 80145c4:	0021      	movs	r1, r4
 80145c6:	f003 fdfc 	bl	80181c2 <memmove>
 80145ca:	e7cc      	b.n	8014566 <_realloc_r+0x1ca>
 80145cc:	9b01      	ldr	r3, [sp, #4]
 80145ce:	42bb      	cmp	r3, r7
 80145d0:	dc31      	bgt.n	8014636 <_realloc_r+0x29a>
 80145d2:	0028      	movs	r0, r5
 80145d4:	68aa      	ldr	r2, [r5, #8]
 80145d6:	68eb      	ldr	r3, [r5, #12]
 80145d8:	3008      	adds	r0, #8
 80145da:	60d3      	str	r3, [r2, #12]
 80145dc:	609a      	str	r2, [r3, #8]
 80145de:	9a03      	ldr	r2, [sp, #12]
 80145e0:	3a04      	subs	r2, #4
 80145e2:	2a24      	cmp	r2, #36	; 0x24
 80145e4:	d823      	bhi.n	801462e <_realloc_r+0x292>
 80145e6:	2a13      	cmp	r2, #19
 80145e8:	d907      	bls.n	80145fa <_realloc_r+0x25e>
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	60ab      	str	r3, [r5, #8]
 80145ee:	6863      	ldr	r3, [r4, #4]
 80145f0:	60eb      	str	r3, [r5, #12]
 80145f2:	2a1b      	cmp	r2, #27
 80145f4:	d809      	bhi.n	801460a <_realloc_r+0x26e>
 80145f6:	3408      	adds	r4, #8
 80145f8:	3008      	adds	r0, #8
 80145fa:	6823      	ldr	r3, [r4, #0]
 80145fc:	6003      	str	r3, [r0, #0]
 80145fe:	6863      	ldr	r3, [r4, #4]
 8014600:	6043      	str	r3, [r0, #4]
 8014602:	68a3      	ldr	r3, [r4, #8]
 8014604:	6083      	str	r3, [r0, #8]
 8014606:	003e      	movs	r6, r7
 8014608:	e7ad      	b.n	8014566 <_realloc_r+0x1ca>
 801460a:	68a3      	ldr	r3, [r4, #8]
 801460c:	612b      	str	r3, [r5, #16]
 801460e:	68e3      	ldr	r3, [r4, #12]
 8014610:	616b      	str	r3, [r5, #20]
 8014612:	2a24      	cmp	r2, #36	; 0x24
 8014614:	d003      	beq.n	801461e <_realloc_r+0x282>
 8014616:	0028      	movs	r0, r5
 8014618:	3410      	adds	r4, #16
 801461a:	3018      	adds	r0, #24
 801461c:	e7ed      	b.n	80145fa <_realloc_r+0x25e>
 801461e:	0028      	movs	r0, r5
 8014620:	6923      	ldr	r3, [r4, #16]
 8014622:	3020      	adds	r0, #32
 8014624:	61ab      	str	r3, [r5, #24]
 8014626:	6963      	ldr	r3, [r4, #20]
 8014628:	3418      	adds	r4, #24
 801462a:	61eb      	str	r3, [r5, #28]
 801462c:	e7e5      	b.n	80145fa <_realloc_r+0x25e>
 801462e:	0021      	movs	r1, r4
 8014630:	f003 fdc7 	bl	80181c2 <memmove>
 8014634:	e7e7      	b.n	8014606 <_realloc_r+0x26a>
 8014636:	9905      	ldr	r1, [sp, #20]
 8014638:	9802      	ldr	r0, [sp, #8]
 801463a:	f7ff fc47 	bl	8013ecc <_malloc_r>
 801463e:	1e07      	subs	r7, r0, #0
 8014640:	d100      	bne.n	8014644 <_realloc_r+0x2a8>
 8014642:	e754      	b.n	80144ee <_realloc_r+0x152>
 8014644:	0023      	movs	r3, r4
 8014646:	2201      	movs	r2, #1
 8014648:	3b08      	subs	r3, #8
 801464a:	685b      	ldr	r3, [r3, #4]
 801464c:	4393      	bics	r3, r2
 801464e:	9a04      	ldr	r2, [sp, #16]
 8014650:	18d3      	adds	r3, r2, r3
 8014652:	0002      	movs	r2, r0
 8014654:	3a08      	subs	r2, #8
 8014656:	4293      	cmp	r3, r2
 8014658:	d105      	bne.n	8014666 <_realloc_r+0x2ca>
 801465a:	685e      	ldr	r6, [r3, #4]
 801465c:	2303      	movs	r3, #3
 801465e:	439e      	bics	r6, r3
 8014660:	9b03      	ldr	r3, [sp, #12]
 8014662:	18f6      	adds	r6, r6, r3
 8014664:	e6fd      	b.n	8014462 <_realloc_r+0xc6>
 8014666:	9a03      	ldr	r2, [sp, #12]
 8014668:	3a04      	subs	r2, #4
 801466a:	2a24      	cmp	r2, #36	; 0x24
 801466c:	d82d      	bhi.n	80146ca <_realloc_r+0x32e>
 801466e:	2a13      	cmp	r2, #19
 8014670:	d928      	bls.n	80146c4 <_realloc_r+0x328>
 8014672:	6823      	ldr	r3, [r4, #0]
 8014674:	6003      	str	r3, [r0, #0]
 8014676:	6863      	ldr	r3, [r4, #4]
 8014678:	6043      	str	r3, [r0, #4]
 801467a:	2a1b      	cmp	r2, #27
 801467c:	d80e      	bhi.n	801469c <_realloc_r+0x300>
 801467e:	0022      	movs	r2, r4
 8014680:	0003      	movs	r3, r0
 8014682:	3208      	adds	r2, #8
 8014684:	3308      	adds	r3, #8
 8014686:	6811      	ldr	r1, [r2, #0]
 8014688:	6019      	str	r1, [r3, #0]
 801468a:	6851      	ldr	r1, [r2, #4]
 801468c:	6059      	str	r1, [r3, #4]
 801468e:	6892      	ldr	r2, [r2, #8]
 8014690:	609a      	str	r2, [r3, #8]
 8014692:	0021      	movs	r1, r4
 8014694:	9802      	ldr	r0, [sp, #8]
 8014696:	f003 f943 	bl	8017920 <_free_r>
 801469a:	e728      	b.n	80144ee <_realloc_r+0x152>
 801469c:	68a3      	ldr	r3, [r4, #8]
 801469e:	6083      	str	r3, [r0, #8]
 80146a0:	68e3      	ldr	r3, [r4, #12]
 80146a2:	60c3      	str	r3, [r0, #12]
 80146a4:	2a24      	cmp	r2, #36	; 0x24
 80146a6:	d004      	beq.n	80146b2 <_realloc_r+0x316>
 80146a8:	0022      	movs	r2, r4
 80146aa:	0003      	movs	r3, r0
 80146ac:	3210      	adds	r2, #16
 80146ae:	3310      	adds	r3, #16
 80146b0:	e7e9      	b.n	8014686 <_realloc_r+0x2ea>
 80146b2:	6923      	ldr	r3, [r4, #16]
 80146b4:	0022      	movs	r2, r4
 80146b6:	6103      	str	r3, [r0, #16]
 80146b8:	0003      	movs	r3, r0
 80146ba:	6961      	ldr	r1, [r4, #20]
 80146bc:	3218      	adds	r2, #24
 80146be:	3318      	adds	r3, #24
 80146c0:	6141      	str	r1, [r0, #20]
 80146c2:	e7e0      	b.n	8014686 <_realloc_r+0x2ea>
 80146c4:	0003      	movs	r3, r0
 80146c6:	0022      	movs	r2, r4
 80146c8:	e7dd      	b.n	8014686 <_realloc_r+0x2ea>
 80146ca:	0021      	movs	r1, r4
 80146cc:	f003 fd79 	bl	80181c2 <memmove>
 80146d0:	e7df      	b.n	8014692 <_realloc_r+0x2f6>
 80146d2:	9e03      	ldr	r6, [sp, #12]
 80146d4:	e6c5      	b.n	8014462 <_realloc_r+0xc6>
 80146d6:	4306      	orrs	r6, r0
 80146d8:	606e      	str	r6, [r5, #4]
 80146da:	6851      	ldr	r1, [r2, #4]
 80146dc:	430b      	orrs	r3, r1
 80146de:	6053      	str	r3, [r2, #4]
 80146e0:	e758      	b.n	8014594 <_realloc_r+0x1f8>
 80146e2:	46c0      	nop			; (mov r8, r8)
 80146e4:	20000500 	.word	0x20000500

080146e8 <_sbrk_r>:
 80146e8:	2300      	movs	r3, #0
 80146ea:	b570      	push	{r4, r5, r6, lr}
 80146ec:	4d06      	ldr	r5, [pc, #24]	; (8014708 <_sbrk_r+0x20>)
 80146ee:	0004      	movs	r4, r0
 80146f0:	0008      	movs	r0, r1
 80146f2:	602b      	str	r3, [r5, #0]
 80146f4:	f005 fede 	bl	801a4b4 <_sbrk>
 80146f8:	1c43      	adds	r3, r0, #1
 80146fa:	d103      	bne.n	8014704 <_sbrk_r+0x1c>
 80146fc:	682b      	ldr	r3, [r5, #0]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d000      	beq.n	8014704 <_sbrk_r+0x1c>
 8014702:	6023      	str	r3, [r4, #0]
 8014704:	bd70      	pop	{r4, r5, r6, pc}
 8014706:	46c0      	nop			; (mov r8, r8)
 8014708:	20007204 	.word	0x20007204

0801470c <sprintf>:
 801470c:	b40e      	push	{r1, r2, r3}
 801470e:	b500      	push	{lr}
 8014710:	490b      	ldr	r1, [pc, #44]	; (8014740 <sprintf+0x34>)
 8014712:	b09c      	sub	sp, #112	; 0x70
 8014714:	ab1d      	add	r3, sp, #116	; 0x74
 8014716:	9002      	str	r0, [sp, #8]
 8014718:	9006      	str	r0, [sp, #24]
 801471a:	9107      	str	r1, [sp, #28]
 801471c:	9104      	str	r1, [sp, #16]
 801471e:	4809      	ldr	r0, [pc, #36]	; (8014744 <sprintf+0x38>)
 8014720:	4909      	ldr	r1, [pc, #36]	; (8014748 <sprintf+0x3c>)
 8014722:	cb04      	ldmia	r3!, {r2}
 8014724:	9105      	str	r1, [sp, #20]
 8014726:	6800      	ldr	r0, [r0, #0]
 8014728:	a902      	add	r1, sp, #8
 801472a:	9301      	str	r3, [sp, #4]
 801472c:	f000 ff74 	bl	8015618 <_svfprintf_r>
 8014730:	2300      	movs	r3, #0
 8014732:	9a02      	ldr	r2, [sp, #8]
 8014734:	7013      	strb	r3, [r2, #0]
 8014736:	b01c      	add	sp, #112	; 0x70
 8014738:	bc08      	pop	{r3}
 801473a:	b003      	add	sp, #12
 801473c:	4718      	bx	r3
 801473e:	46c0      	nop			; (mov r8, r8)
 8014740:	7fffffff 	.word	0x7fffffff
 8014744:	200000d0 	.word	0x200000d0
 8014748:	ffff0208 	.word	0xffff0208

0801474c <strcat>:
 801474c:	0002      	movs	r2, r0
 801474e:	b510      	push	{r4, lr}
 8014750:	7813      	ldrb	r3, [r2, #0]
 8014752:	0014      	movs	r4, r2
 8014754:	3201      	adds	r2, #1
 8014756:	2b00      	cmp	r3, #0
 8014758:	d1fa      	bne.n	8014750 <strcat+0x4>
 801475a:	5cca      	ldrb	r2, [r1, r3]
 801475c:	54e2      	strb	r2, [r4, r3]
 801475e:	3301      	adds	r3, #1
 8014760:	2a00      	cmp	r2, #0
 8014762:	d1fa      	bne.n	801475a <strcat+0xe>
 8014764:	bd10      	pop	{r4, pc}

08014766 <strchr>:
 8014766:	b2c9      	uxtb	r1, r1
 8014768:	7803      	ldrb	r3, [r0, #0]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d004      	beq.n	8014778 <strchr+0x12>
 801476e:	428b      	cmp	r3, r1
 8014770:	d100      	bne.n	8014774 <strchr+0xe>
 8014772:	4770      	bx	lr
 8014774:	3001      	adds	r0, #1
 8014776:	e7f7      	b.n	8014768 <strchr+0x2>
 8014778:	424b      	negs	r3, r1
 801477a:	4159      	adcs	r1, r3
 801477c:	4249      	negs	r1, r1
 801477e:	4008      	ands	r0, r1
 8014780:	e7f7      	b.n	8014772 <strchr+0xc>

08014782 <strcpy>:
 8014782:	0003      	movs	r3, r0
 8014784:	780a      	ldrb	r2, [r1, #0]
 8014786:	3101      	adds	r1, #1
 8014788:	701a      	strb	r2, [r3, #0]
 801478a:	3301      	adds	r3, #1
 801478c:	2a00      	cmp	r2, #0
 801478e:	d1f9      	bne.n	8014784 <strcpy+0x2>
 8014790:	4770      	bx	lr

08014792 <strncmp>:
 8014792:	b530      	push	{r4, r5, lr}
 8014794:	0005      	movs	r5, r0
 8014796:	1e10      	subs	r0, r2, #0
 8014798:	d00b      	beq.n	80147b2 <strncmp+0x20>
 801479a:	2400      	movs	r4, #0
 801479c:	3a01      	subs	r2, #1
 801479e:	5d2b      	ldrb	r3, [r5, r4]
 80147a0:	5d08      	ldrb	r0, [r1, r4]
 80147a2:	4283      	cmp	r3, r0
 80147a4:	d104      	bne.n	80147b0 <strncmp+0x1e>
 80147a6:	4294      	cmp	r4, r2
 80147a8:	d002      	beq.n	80147b0 <strncmp+0x1e>
 80147aa:	3401      	adds	r4, #1
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d1f6      	bne.n	801479e <strncmp+0xc>
 80147b0:	1a18      	subs	r0, r3, r0
 80147b2:	bd30      	pop	{r4, r5, pc}

080147b4 <strncpy>:
 80147b4:	0003      	movs	r3, r0
 80147b6:	b530      	push	{r4, r5, lr}
 80147b8:	001d      	movs	r5, r3
 80147ba:	2a00      	cmp	r2, #0
 80147bc:	d006      	beq.n	80147cc <strncpy+0x18>
 80147be:	780c      	ldrb	r4, [r1, #0]
 80147c0:	3a01      	subs	r2, #1
 80147c2:	3301      	adds	r3, #1
 80147c4:	702c      	strb	r4, [r5, #0]
 80147c6:	3101      	adds	r1, #1
 80147c8:	2c00      	cmp	r4, #0
 80147ca:	d1f5      	bne.n	80147b8 <strncpy+0x4>
 80147cc:	2100      	movs	r1, #0
 80147ce:	189a      	adds	r2, r3, r2
 80147d0:	4293      	cmp	r3, r2
 80147d2:	d100      	bne.n	80147d6 <strncpy+0x22>
 80147d4:	bd30      	pop	{r4, r5, pc}
 80147d6:	7019      	strb	r1, [r3, #0]
 80147d8:	3301      	adds	r3, #1
 80147da:	e7f9      	b.n	80147d0 <strncpy+0x1c>

080147dc <sulp>:
 80147dc:	b570      	push	{r4, r5, r6, lr}
 80147de:	0016      	movs	r6, r2
 80147e0:	000d      	movs	r5, r1
 80147e2:	f004 f837 	bl	8018854 <__ulp>
 80147e6:	2e00      	cmp	r6, #0
 80147e8:	d00d      	beq.n	8014806 <sulp+0x2a>
 80147ea:	236b      	movs	r3, #107	; 0x6b
 80147ec:	006a      	lsls	r2, r5, #1
 80147ee:	0d52      	lsrs	r2, r2, #21
 80147f0:	1a9b      	subs	r3, r3, r2
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	dd07      	ble.n	8014806 <sulp+0x2a>
 80147f6:	2400      	movs	r4, #0
 80147f8:	4a03      	ldr	r2, [pc, #12]	; (8014808 <sulp+0x2c>)
 80147fa:	051b      	lsls	r3, r3, #20
 80147fc:	189d      	adds	r5, r3, r2
 80147fe:	002b      	movs	r3, r5
 8014800:	0022      	movs	r2, r4
 8014802:	f7ed fe89 	bl	8002518 <__aeabi_dmul>
 8014806:	bd70      	pop	{r4, r5, r6, pc}
 8014808:	3ff00000 	.word	0x3ff00000

0801480c <_strtod_l>:
 801480c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801480e:	001d      	movs	r5, r3
 8014810:	2300      	movs	r3, #0
 8014812:	b0a7      	sub	sp, #156	; 0x9c
 8014814:	9322      	str	r3, [sp, #136]	; 0x88
 8014816:	4bae      	ldr	r3, [pc, #696]	; (8014ad0 <_strtod_l+0x2c4>)
 8014818:	9005      	str	r0, [sp, #20]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	9108      	str	r1, [sp, #32]
 801481e:	0018      	movs	r0, r3
 8014820:	9307      	str	r3, [sp, #28]
 8014822:	921d      	str	r2, [sp, #116]	; 0x74
 8014824:	f7eb fc78 	bl	8000118 <strlen>
 8014828:	2600      	movs	r6, #0
 801482a:	0004      	movs	r4, r0
 801482c:	2700      	movs	r7, #0
 801482e:	9b08      	ldr	r3, [sp, #32]
 8014830:	9321      	str	r3, [sp, #132]	; 0x84
 8014832:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014834:	7813      	ldrb	r3, [r2, #0]
 8014836:	2b2b      	cmp	r3, #43	; 0x2b
 8014838:	d058      	beq.n	80148ec <_strtod_l+0xe0>
 801483a:	d844      	bhi.n	80148c6 <_strtod_l+0xba>
 801483c:	2b0d      	cmp	r3, #13
 801483e:	d83d      	bhi.n	80148bc <_strtod_l+0xb0>
 8014840:	2b08      	cmp	r3, #8
 8014842:	d83d      	bhi.n	80148c0 <_strtod_l+0xb4>
 8014844:	2b00      	cmp	r3, #0
 8014846:	d047      	beq.n	80148d8 <_strtod_l+0xcc>
 8014848:	2300      	movs	r3, #0
 801484a:	9310      	str	r3, [sp, #64]	; 0x40
 801484c:	2200      	movs	r2, #0
 801484e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014850:	920a      	str	r2, [sp, #40]	; 0x28
 8014852:	9306      	str	r3, [sp, #24]
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	2b30      	cmp	r3, #48	; 0x30
 8014858:	d000      	beq.n	801485c <_strtod_l+0x50>
 801485a:	e083      	b.n	8014964 <_strtod_l+0x158>
 801485c:	9b06      	ldr	r3, [sp, #24]
 801485e:	3220      	adds	r2, #32
 8014860:	785b      	ldrb	r3, [r3, #1]
 8014862:	4393      	bics	r3, r2
 8014864:	2b58      	cmp	r3, #88	; 0x58
 8014866:	d000      	beq.n	801486a <_strtod_l+0x5e>
 8014868:	e072      	b.n	8014950 <_strtod_l+0x144>
 801486a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801486c:	9502      	str	r5, [sp, #8]
 801486e:	9301      	str	r3, [sp, #4]
 8014870:	ab22      	add	r3, sp, #136	; 0x88
 8014872:	9300      	str	r3, [sp, #0]
 8014874:	4a97      	ldr	r2, [pc, #604]	; (8014ad4 <_strtod_l+0x2c8>)
 8014876:	ab23      	add	r3, sp, #140	; 0x8c
 8014878:	9805      	ldr	r0, [sp, #20]
 801487a:	a921      	add	r1, sp, #132	; 0x84
 801487c:	f003 f96c 	bl	8017b58 <__gethex>
 8014880:	2307      	movs	r3, #7
 8014882:	0005      	movs	r5, r0
 8014884:	0004      	movs	r4, r0
 8014886:	401d      	ands	r5, r3
 8014888:	4218      	tst	r0, r3
 801488a:	d006      	beq.n	801489a <_strtod_l+0x8e>
 801488c:	2d06      	cmp	r5, #6
 801488e:	d12f      	bne.n	80148f0 <_strtod_l+0xe4>
 8014890:	9b06      	ldr	r3, [sp, #24]
 8014892:	3301      	adds	r3, #1
 8014894:	9321      	str	r3, [sp, #132]	; 0x84
 8014896:	2300      	movs	r3, #0
 8014898:	9310      	str	r3, [sp, #64]	; 0x40
 801489a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801489c:	2b00      	cmp	r3, #0
 801489e:	d002      	beq.n	80148a6 <_strtod_l+0x9a>
 80148a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80148a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80148a4:	601a      	str	r2, [r3, #0]
 80148a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d01c      	beq.n	80148e6 <_strtod_l+0xda>
 80148ac:	2380      	movs	r3, #128	; 0x80
 80148ae:	0032      	movs	r2, r6
 80148b0:	061b      	lsls	r3, r3, #24
 80148b2:	18fb      	adds	r3, r7, r3
 80148b4:	0010      	movs	r0, r2
 80148b6:	0019      	movs	r1, r3
 80148b8:	b027      	add	sp, #156	; 0x9c
 80148ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148bc:	2b20      	cmp	r3, #32
 80148be:	d1c3      	bne.n	8014848 <_strtod_l+0x3c>
 80148c0:	3201      	adds	r2, #1
 80148c2:	9221      	str	r2, [sp, #132]	; 0x84
 80148c4:	e7b5      	b.n	8014832 <_strtod_l+0x26>
 80148c6:	2b2d      	cmp	r3, #45	; 0x2d
 80148c8:	d1be      	bne.n	8014848 <_strtod_l+0x3c>
 80148ca:	3b2c      	subs	r3, #44	; 0x2c
 80148cc:	9310      	str	r3, [sp, #64]	; 0x40
 80148ce:	1c53      	adds	r3, r2, #1
 80148d0:	9321      	str	r3, [sp, #132]	; 0x84
 80148d2:	7853      	ldrb	r3, [r2, #1]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d1b9      	bne.n	801484c <_strtod_l+0x40>
 80148d8:	9b08      	ldr	r3, [sp, #32]
 80148da:	9321      	str	r3, [sp, #132]	; 0x84
 80148dc:	2300      	movs	r3, #0
 80148de:	9310      	str	r3, [sp, #64]	; 0x40
 80148e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d1dc      	bne.n	80148a0 <_strtod_l+0x94>
 80148e6:	0032      	movs	r2, r6
 80148e8:	003b      	movs	r3, r7
 80148ea:	e7e3      	b.n	80148b4 <_strtod_l+0xa8>
 80148ec:	2300      	movs	r3, #0
 80148ee:	e7ed      	b.n	80148cc <_strtod_l+0xc0>
 80148f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80148f2:	2a00      	cmp	r2, #0
 80148f4:	d007      	beq.n	8014906 <_strtod_l+0xfa>
 80148f6:	2135      	movs	r1, #53	; 0x35
 80148f8:	a824      	add	r0, sp, #144	; 0x90
 80148fa:	f004 f8aa 	bl	8018a52 <__copybits>
 80148fe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014900:	9805      	ldr	r0, [sp, #20]
 8014902:	f003 fc99 	bl	8018238 <_Bfree>
 8014906:	1e68      	subs	r0, r5, #1
 8014908:	2805      	cmp	r0, #5
 801490a:	d806      	bhi.n	801491a <_strtod_l+0x10e>
 801490c:	f7eb fc0c 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014910:	1c190b0e 	.word	0x1c190b0e
 8014914:	030e      	.short	0x030e
 8014916:	2700      	movs	r7, #0
 8014918:	003e      	movs	r6, r7
 801491a:	0723      	lsls	r3, r4, #28
 801491c:	d5bd      	bpl.n	801489a <_strtod_l+0x8e>
 801491e:	2380      	movs	r3, #128	; 0x80
 8014920:	061b      	lsls	r3, r3, #24
 8014922:	431f      	orrs	r7, r3
 8014924:	e7b9      	b.n	801489a <_strtod_l+0x8e>
 8014926:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014928:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801492a:	e7f6      	b.n	801491a <_strtod_l+0x10e>
 801492c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801492e:	4a6a      	ldr	r2, [pc, #424]	; (8014ad8 <_strtod_l+0x2cc>)
 8014930:	496a      	ldr	r1, [pc, #424]	; (8014adc <_strtod_l+0x2d0>)
 8014932:	401a      	ands	r2, r3
 8014934:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014936:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014938:	185b      	adds	r3, r3, r1
 801493a:	051b      	lsls	r3, r3, #20
 801493c:	431a      	orrs	r2, r3
 801493e:	0017      	movs	r7, r2
 8014940:	e7eb      	b.n	801491a <_strtod_l+0x10e>
 8014942:	2600      	movs	r6, #0
 8014944:	4f66      	ldr	r7, [pc, #408]	; (8014ae0 <_strtod_l+0x2d4>)
 8014946:	e7e8      	b.n	801491a <_strtod_l+0x10e>
 8014948:	2601      	movs	r6, #1
 801494a:	4f66      	ldr	r7, [pc, #408]	; (8014ae4 <_strtod_l+0x2d8>)
 801494c:	4276      	negs	r6, r6
 801494e:	e7e4      	b.n	801491a <_strtod_l+0x10e>
 8014950:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014952:	1c5a      	adds	r2, r3, #1
 8014954:	9221      	str	r2, [sp, #132]	; 0x84
 8014956:	785b      	ldrb	r3, [r3, #1]
 8014958:	2b30      	cmp	r3, #48	; 0x30
 801495a:	d0f9      	beq.n	8014950 <_strtod_l+0x144>
 801495c:	2b00      	cmp	r3, #0
 801495e:	d09c      	beq.n	801489a <_strtod_l+0x8e>
 8014960:	2301      	movs	r3, #1
 8014962:	930a      	str	r3, [sp, #40]	; 0x28
 8014964:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014966:	220a      	movs	r2, #10
 8014968:	9311      	str	r3, [sp, #68]	; 0x44
 801496a:	2300      	movs	r3, #0
 801496c:	930e      	str	r3, [sp, #56]	; 0x38
 801496e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014970:	9309      	str	r3, [sp, #36]	; 0x24
 8014972:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014974:	7805      	ldrb	r5, [r0, #0]
 8014976:	002b      	movs	r3, r5
 8014978:	3b30      	subs	r3, #48	; 0x30
 801497a:	b2d9      	uxtb	r1, r3
 801497c:	2909      	cmp	r1, #9
 801497e:	d927      	bls.n	80149d0 <_strtod_l+0x1c4>
 8014980:	0022      	movs	r2, r4
 8014982:	9907      	ldr	r1, [sp, #28]
 8014984:	f7ff ff05 	bl	8014792 <strncmp>
 8014988:	2800      	cmp	r0, #0
 801498a:	d033      	beq.n	80149f4 <_strtod_l+0x1e8>
 801498c:	2000      	movs	r0, #0
 801498e:	002b      	movs	r3, r5
 8014990:	4684      	mov	ip, r0
 8014992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014994:	900c      	str	r0, [sp, #48]	; 0x30
 8014996:	9206      	str	r2, [sp, #24]
 8014998:	2220      	movs	r2, #32
 801499a:	0019      	movs	r1, r3
 801499c:	4391      	bics	r1, r2
 801499e:	000a      	movs	r2, r1
 80149a0:	2100      	movs	r1, #0
 80149a2:	9107      	str	r1, [sp, #28]
 80149a4:	2a45      	cmp	r2, #69	; 0x45
 80149a6:	d000      	beq.n	80149aa <_strtod_l+0x19e>
 80149a8:	e0c5      	b.n	8014b36 <_strtod_l+0x32a>
 80149aa:	9b06      	ldr	r3, [sp, #24]
 80149ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80149ae:	4303      	orrs	r3, r0
 80149b0:	4313      	orrs	r3, r2
 80149b2:	428b      	cmp	r3, r1
 80149b4:	d090      	beq.n	80148d8 <_strtod_l+0xcc>
 80149b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149b8:	9308      	str	r3, [sp, #32]
 80149ba:	3301      	adds	r3, #1
 80149bc:	9321      	str	r3, [sp, #132]	; 0x84
 80149be:	9b08      	ldr	r3, [sp, #32]
 80149c0:	785b      	ldrb	r3, [r3, #1]
 80149c2:	2b2b      	cmp	r3, #43	; 0x2b
 80149c4:	d075      	beq.n	8014ab2 <_strtod_l+0x2a6>
 80149c6:	000c      	movs	r4, r1
 80149c8:	2b2d      	cmp	r3, #45	; 0x2d
 80149ca:	d178      	bne.n	8014abe <_strtod_l+0x2b2>
 80149cc:	2401      	movs	r4, #1
 80149ce:	e071      	b.n	8014ab4 <_strtod_l+0x2a8>
 80149d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80149d2:	2908      	cmp	r1, #8
 80149d4:	dc09      	bgt.n	80149ea <_strtod_l+0x1de>
 80149d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149d8:	4351      	muls	r1, r2
 80149da:	185b      	adds	r3, r3, r1
 80149dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80149de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149e0:	3001      	adds	r0, #1
 80149e2:	3301      	adds	r3, #1
 80149e4:	9309      	str	r3, [sp, #36]	; 0x24
 80149e6:	9021      	str	r0, [sp, #132]	; 0x84
 80149e8:	e7c3      	b.n	8014972 <_strtod_l+0x166>
 80149ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80149ec:	4351      	muls	r1, r2
 80149ee:	185b      	adds	r3, r3, r1
 80149f0:	930e      	str	r3, [sp, #56]	; 0x38
 80149f2:	e7f4      	b.n	80149de <_strtod_l+0x1d2>
 80149f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149f8:	191c      	adds	r4, r3, r4
 80149fa:	9421      	str	r4, [sp, #132]	; 0x84
 80149fc:	7823      	ldrb	r3, [r4, #0]
 80149fe:	2a00      	cmp	r2, #0
 8014a00:	d039      	beq.n	8014a76 <_strtod_l+0x26a>
 8014a02:	900c      	str	r0, [sp, #48]	; 0x30
 8014a04:	9206      	str	r2, [sp, #24]
 8014a06:	001a      	movs	r2, r3
 8014a08:	3a30      	subs	r2, #48	; 0x30
 8014a0a:	2a09      	cmp	r2, #9
 8014a0c:	d912      	bls.n	8014a34 <_strtod_l+0x228>
 8014a0e:	2201      	movs	r2, #1
 8014a10:	4694      	mov	ip, r2
 8014a12:	e7c1      	b.n	8014998 <_strtod_l+0x18c>
 8014a14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a16:	3001      	adds	r0, #1
 8014a18:	1c5a      	adds	r2, r3, #1
 8014a1a:	9221      	str	r2, [sp, #132]	; 0x84
 8014a1c:	785b      	ldrb	r3, [r3, #1]
 8014a1e:	2b30      	cmp	r3, #48	; 0x30
 8014a20:	d0f8      	beq.n	8014a14 <_strtod_l+0x208>
 8014a22:	001a      	movs	r2, r3
 8014a24:	3a31      	subs	r2, #49	; 0x31
 8014a26:	2a08      	cmp	r2, #8
 8014a28:	d83e      	bhi.n	8014aa8 <_strtod_l+0x29c>
 8014a2a:	900c      	str	r0, [sp, #48]	; 0x30
 8014a2c:	2000      	movs	r0, #0
 8014a2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014a30:	9006      	str	r0, [sp, #24]
 8014a32:	9211      	str	r2, [sp, #68]	; 0x44
 8014a34:	001a      	movs	r2, r3
 8014a36:	9906      	ldr	r1, [sp, #24]
 8014a38:	1c44      	adds	r4, r0, #1
 8014a3a:	3a30      	subs	r2, #48	; 0x30
 8014a3c:	2b30      	cmp	r3, #48	; 0x30
 8014a3e:	d013      	beq.n	8014a68 <_strtod_l+0x25c>
 8014a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a42:	191b      	adds	r3, r3, r4
 8014a44:	930c      	str	r3, [sp, #48]	; 0x30
 8014a46:	1844      	adds	r4, r0, r1
 8014a48:	000b      	movs	r3, r1
 8014a4a:	210a      	movs	r1, #10
 8014a4c:	429c      	cmp	r4, r3
 8014a4e:	d114      	bne.n	8014a7a <_strtod_l+0x26e>
 8014a50:	9b06      	ldr	r3, [sp, #24]
 8014a52:	1c59      	adds	r1, r3, #1
 8014a54:	1809      	adds	r1, r1, r0
 8014a56:	1818      	adds	r0, r3, r0
 8014a58:	2808      	cmp	r0, #8
 8014a5a:	dc1c      	bgt.n	8014a96 <_strtod_l+0x28a>
 8014a5c:	230a      	movs	r3, #10
 8014a5e:	2400      	movs	r4, #0
 8014a60:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014a62:	4343      	muls	r3, r0
 8014a64:	18d3      	adds	r3, r2, r3
 8014a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a6a:	0020      	movs	r0, r4
 8014a6c:	1c5a      	adds	r2, r3, #1
 8014a6e:	9221      	str	r2, [sp, #132]	; 0x84
 8014a70:	785b      	ldrb	r3, [r3, #1]
 8014a72:	9106      	str	r1, [sp, #24]
 8014a74:	e7c7      	b.n	8014a06 <_strtod_l+0x1fa>
 8014a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a78:	e7d1      	b.n	8014a1e <_strtod_l+0x212>
 8014a7a:	2b08      	cmp	r3, #8
 8014a7c:	dc04      	bgt.n	8014a88 <_strtod_l+0x27c>
 8014a7e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014a80:	434d      	muls	r5, r1
 8014a82:	950b      	str	r5, [sp, #44]	; 0x2c
 8014a84:	3301      	adds	r3, #1
 8014a86:	e7e1      	b.n	8014a4c <_strtod_l+0x240>
 8014a88:	1c5d      	adds	r5, r3, #1
 8014a8a:	2d10      	cmp	r5, #16
 8014a8c:	dcfa      	bgt.n	8014a84 <_strtod_l+0x278>
 8014a8e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014a90:	434d      	muls	r5, r1
 8014a92:	950e      	str	r5, [sp, #56]	; 0x38
 8014a94:	e7f6      	b.n	8014a84 <_strtod_l+0x278>
 8014a96:	2400      	movs	r4, #0
 8014a98:	2910      	cmp	r1, #16
 8014a9a:	dce5      	bgt.n	8014a68 <_strtod_l+0x25c>
 8014a9c:	230a      	movs	r3, #10
 8014a9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014aa0:	4343      	muls	r3, r0
 8014aa2:	18d3      	adds	r3, r2, r3
 8014aa4:	930e      	str	r3, [sp, #56]	; 0x38
 8014aa6:	e7df      	b.n	8014a68 <_strtod_l+0x25c>
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	920c      	str	r2, [sp, #48]	; 0x30
 8014aac:	9206      	str	r2, [sp, #24]
 8014aae:	3201      	adds	r2, #1
 8014ab0:	e7ae      	b.n	8014a10 <_strtod_l+0x204>
 8014ab2:	2400      	movs	r4, #0
 8014ab4:	9b08      	ldr	r3, [sp, #32]
 8014ab6:	3302      	adds	r3, #2
 8014ab8:	9321      	str	r3, [sp, #132]	; 0x84
 8014aba:	9b08      	ldr	r3, [sp, #32]
 8014abc:	789b      	ldrb	r3, [r3, #2]
 8014abe:	001a      	movs	r2, r3
 8014ac0:	3a30      	subs	r2, #48	; 0x30
 8014ac2:	2a09      	cmp	r2, #9
 8014ac4:	d914      	bls.n	8014af0 <_strtod_l+0x2e4>
 8014ac6:	9a08      	ldr	r2, [sp, #32]
 8014ac8:	9221      	str	r2, [sp, #132]	; 0x84
 8014aca:	2200      	movs	r2, #0
 8014acc:	e032      	b.n	8014b34 <_strtod_l+0x328>
 8014ace:	46c0      	nop			; (mov r8, r8)
 8014ad0:	0801db2c 	.word	0x0801db2c
 8014ad4:	0801d99c 	.word	0x0801d99c
 8014ad8:	ffefffff 	.word	0xffefffff
 8014adc:	00000433 	.word	0x00000433
 8014ae0:	7ff00000 	.word	0x7ff00000
 8014ae4:	7fffffff 	.word	0x7fffffff
 8014ae8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014aea:	1c5a      	adds	r2, r3, #1
 8014aec:	9221      	str	r2, [sp, #132]	; 0x84
 8014aee:	785b      	ldrb	r3, [r3, #1]
 8014af0:	2b30      	cmp	r3, #48	; 0x30
 8014af2:	d0f9      	beq.n	8014ae8 <_strtod_l+0x2dc>
 8014af4:	2200      	movs	r2, #0
 8014af6:	9207      	str	r2, [sp, #28]
 8014af8:	001a      	movs	r2, r3
 8014afa:	3a31      	subs	r2, #49	; 0x31
 8014afc:	2a08      	cmp	r2, #8
 8014afe:	d81a      	bhi.n	8014b36 <_strtod_l+0x32a>
 8014b00:	3b30      	subs	r3, #48	; 0x30
 8014b02:	001a      	movs	r2, r3
 8014b04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b06:	9307      	str	r3, [sp, #28]
 8014b08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b0a:	1c59      	adds	r1, r3, #1
 8014b0c:	9121      	str	r1, [sp, #132]	; 0x84
 8014b0e:	785b      	ldrb	r3, [r3, #1]
 8014b10:	001d      	movs	r5, r3
 8014b12:	3d30      	subs	r5, #48	; 0x30
 8014b14:	2d09      	cmp	r5, #9
 8014b16:	d939      	bls.n	8014b8c <_strtod_l+0x380>
 8014b18:	9d07      	ldr	r5, [sp, #28]
 8014b1a:	1b49      	subs	r1, r1, r5
 8014b1c:	4daf      	ldr	r5, [pc, #700]	; (8014ddc <_strtod_l+0x5d0>)
 8014b1e:	9507      	str	r5, [sp, #28]
 8014b20:	2908      	cmp	r1, #8
 8014b22:	dc03      	bgt.n	8014b2c <_strtod_l+0x320>
 8014b24:	9207      	str	r2, [sp, #28]
 8014b26:	42aa      	cmp	r2, r5
 8014b28:	dd00      	ble.n	8014b2c <_strtod_l+0x320>
 8014b2a:	9507      	str	r5, [sp, #28]
 8014b2c:	2c00      	cmp	r4, #0
 8014b2e:	d002      	beq.n	8014b36 <_strtod_l+0x32a>
 8014b30:	9a07      	ldr	r2, [sp, #28]
 8014b32:	4252      	negs	r2, r2
 8014b34:	9207      	str	r2, [sp, #28]
 8014b36:	9a06      	ldr	r2, [sp, #24]
 8014b38:	2a00      	cmp	r2, #0
 8014b3a:	d14b      	bne.n	8014bd4 <_strtod_l+0x3c8>
 8014b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b3e:	4310      	orrs	r0, r2
 8014b40:	d000      	beq.n	8014b44 <_strtod_l+0x338>
 8014b42:	e6aa      	b.n	801489a <_strtod_l+0x8e>
 8014b44:	4662      	mov	r2, ip
 8014b46:	2a00      	cmp	r2, #0
 8014b48:	d000      	beq.n	8014b4c <_strtod_l+0x340>
 8014b4a:	e6c5      	b.n	80148d8 <_strtod_l+0xcc>
 8014b4c:	2b69      	cmp	r3, #105	; 0x69
 8014b4e:	d025      	beq.n	8014b9c <_strtod_l+0x390>
 8014b50:	dc21      	bgt.n	8014b96 <_strtod_l+0x38a>
 8014b52:	2b49      	cmp	r3, #73	; 0x49
 8014b54:	d022      	beq.n	8014b9c <_strtod_l+0x390>
 8014b56:	2b4e      	cmp	r3, #78	; 0x4e
 8014b58:	d000      	beq.n	8014b5c <_strtod_l+0x350>
 8014b5a:	e6bd      	b.n	80148d8 <_strtod_l+0xcc>
 8014b5c:	49a0      	ldr	r1, [pc, #640]	; (8014de0 <_strtod_l+0x5d4>)
 8014b5e:	a821      	add	r0, sp, #132	; 0x84
 8014b60:	f003 fa48 	bl	8017ff4 <__match>
 8014b64:	2800      	cmp	r0, #0
 8014b66:	d100      	bne.n	8014b6a <_strtod_l+0x35e>
 8014b68:	e6b6      	b.n	80148d8 <_strtod_l+0xcc>
 8014b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b6c:	781b      	ldrb	r3, [r3, #0]
 8014b6e:	2b28      	cmp	r3, #40	; 0x28
 8014b70:	d12a      	bne.n	8014bc8 <_strtod_l+0x3bc>
 8014b72:	499c      	ldr	r1, [pc, #624]	; (8014de4 <_strtod_l+0x5d8>)
 8014b74:	aa24      	add	r2, sp, #144	; 0x90
 8014b76:	a821      	add	r0, sp, #132	; 0x84
 8014b78:	f003 fa50 	bl	801801c <__hexnan>
 8014b7c:	2805      	cmp	r0, #5
 8014b7e:	d123      	bne.n	8014bc8 <_strtod_l+0x3bc>
 8014b80:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014b82:	4a99      	ldr	r2, [pc, #612]	; (8014de8 <_strtod_l+0x5dc>)
 8014b84:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014b86:	431a      	orrs	r2, r3
 8014b88:	0017      	movs	r7, r2
 8014b8a:	e686      	b.n	801489a <_strtod_l+0x8e>
 8014b8c:	210a      	movs	r1, #10
 8014b8e:	434a      	muls	r2, r1
 8014b90:	18d2      	adds	r2, r2, r3
 8014b92:	3a30      	subs	r2, #48	; 0x30
 8014b94:	e7b8      	b.n	8014b08 <_strtod_l+0x2fc>
 8014b96:	2b6e      	cmp	r3, #110	; 0x6e
 8014b98:	d0e0      	beq.n	8014b5c <_strtod_l+0x350>
 8014b9a:	e69d      	b.n	80148d8 <_strtod_l+0xcc>
 8014b9c:	4993      	ldr	r1, [pc, #588]	; (8014dec <_strtod_l+0x5e0>)
 8014b9e:	a821      	add	r0, sp, #132	; 0x84
 8014ba0:	f003 fa28 	bl	8017ff4 <__match>
 8014ba4:	2800      	cmp	r0, #0
 8014ba6:	d100      	bne.n	8014baa <_strtod_l+0x39e>
 8014ba8:	e696      	b.n	80148d8 <_strtod_l+0xcc>
 8014baa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bac:	4990      	ldr	r1, [pc, #576]	; (8014df0 <_strtod_l+0x5e4>)
 8014bae:	3b01      	subs	r3, #1
 8014bb0:	a821      	add	r0, sp, #132	; 0x84
 8014bb2:	9321      	str	r3, [sp, #132]	; 0x84
 8014bb4:	f003 fa1e 	bl	8017ff4 <__match>
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d102      	bne.n	8014bc2 <_strtod_l+0x3b6>
 8014bbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	9321      	str	r3, [sp, #132]	; 0x84
 8014bc2:	2600      	movs	r6, #0
 8014bc4:	4f88      	ldr	r7, [pc, #544]	; (8014de8 <_strtod_l+0x5dc>)
 8014bc6:	e668      	b.n	801489a <_strtod_l+0x8e>
 8014bc8:	488a      	ldr	r0, [pc, #552]	; (8014df4 <_strtod_l+0x5e8>)
 8014bca:	f003 ffb9 	bl	8018b40 <nan>
 8014bce:	0006      	movs	r6, r0
 8014bd0:	000f      	movs	r7, r1
 8014bd2:	e662      	b.n	801489a <_strtod_l+0x8e>
 8014bd4:	9b07      	ldr	r3, [sp, #28]
 8014bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014bd8:	1a9b      	subs	r3, r3, r2
 8014bda:	930a      	str	r3, [sp, #40]	; 0x28
 8014bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d101      	bne.n	8014be6 <_strtod_l+0x3da>
 8014be2:	9b06      	ldr	r3, [sp, #24]
 8014be4:	9309      	str	r3, [sp, #36]	; 0x24
 8014be6:	9c06      	ldr	r4, [sp, #24]
 8014be8:	2c10      	cmp	r4, #16
 8014bea:	dd00      	ble.n	8014bee <_strtod_l+0x3e2>
 8014bec:	2410      	movs	r4, #16
 8014bee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014bf0:	f7ee fb14 	bl	800321c <__aeabi_ui2d>
 8014bf4:	9b06      	ldr	r3, [sp, #24]
 8014bf6:	0006      	movs	r6, r0
 8014bf8:	000f      	movs	r7, r1
 8014bfa:	2b09      	cmp	r3, #9
 8014bfc:	dd15      	ble.n	8014c2a <_strtod_l+0x41e>
 8014bfe:	0022      	movs	r2, r4
 8014c00:	4b7d      	ldr	r3, [pc, #500]	; (8014df8 <_strtod_l+0x5ec>)
 8014c02:	3a09      	subs	r2, #9
 8014c04:	00d2      	lsls	r2, r2, #3
 8014c06:	189b      	adds	r3, r3, r2
 8014c08:	681a      	ldr	r2, [r3, #0]
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	f7ed fc84 	bl	8002518 <__aeabi_dmul>
 8014c10:	0006      	movs	r6, r0
 8014c12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014c14:	000f      	movs	r7, r1
 8014c16:	f7ee fb01 	bl	800321c <__aeabi_ui2d>
 8014c1a:	0002      	movs	r2, r0
 8014c1c:	000b      	movs	r3, r1
 8014c1e:	0030      	movs	r0, r6
 8014c20:	0039      	movs	r1, r7
 8014c22:	f7ec fd09 	bl	8001638 <__aeabi_dadd>
 8014c26:	0006      	movs	r6, r0
 8014c28:	000f      	movs	r7, r1
 8014c2a:	9b06      	ldr	r3, [sp, #24]
 8014c2c:	2b0f      	cmp	r3, #15
 8014c2e:	dc39      	bgt.n	8014ca4 <_strtod_l+0x498>
 8014c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d100      	bne.n	8014c38 <_strtod_l+0x42c>
 8014c36:	e630      	b.n	801489a <_strtod_l+0x8e>
 8014c38:	dd24      	ble.n	8014c84 <_strtod_l+0x478>
 8014c3a:	2b16      	cmp	r3, #22
 8014c3c:	dc09      	bgt.n	8014c52 <_strtod_l+0x446>
 8014c3e:	00dd      	lsls	r5, r3, #3
 8014c40:	0032      	movs	r2, r6
 8014c42:	003b      	movs	r3, r7
 8014c44:	4c6c      	ldr	r4, [pc, #432]	; (8014df8 <_strtod_l+0x5ec>)
 8014c46:	1964      	adds	r4, r4, r5
 8014c48:	6820      	ldr	r0, [r4, #0]
 8014c4a:	6861      	ldr	r1, [r4, #4]
 8014c4c:	f7ed fc64 	bl	8002518 <__aeabi_dmul>
 8014c50:	e7bd      	b.n	8014bce <_strtod_l+0x3c2>
 8014c52:	2325      	movs	r3, #37	; 0x25
 8014c54:	9a06      	ldr	r2, [sp, #24]
 8014c56:	1a9b      	subs	r3, r3, r2
 8014c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c5a:	4293      	cmp	r3, r2
 8014c5c:	db22      	blt.n	8014ca4 <_strtod_l+0x498>
 8014c5e:	240f      	movs	r4, #15
 8014c60:	9b06      	ldr	r3, [sp, #24]
 8014c62:	4d65      	ldr	r5, [pc, #404]	; (8014df8 <_strtod_l+0x5ec>)
 8014c64:	1ae4      	subs	r4, r4, r3
 8014c66:	00e1      	lsls	r1, r4, #3
 8014c68:	1869      	adds	r1, r5, r1
 8014c6a:	0032      	movs	r2, r6
 8014c6c:	6808      	ldr	r0, [r1, #0]
 8014c6e:	6849      	ldr	r1, [r1, #4]
 8014c70:	003b      	movs	r3, r7
 8014c72:	f7ed fc51 	bl	8002518 <__aeabi_dmul>
 8014c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c78:	1b1c      	subs	r4, r3, r4
 8014c7a:	00e4      	lsls	r4, r4, #3
 8014c7c:	192c      	adds	r4, r5, r4
 8014c7e:	6822      	ldr	r2, [r4, #0]
 8014c80:	6863      	ldr	r3, [r4, #4]
 8014c82:	e7e3      	b.n	8014c4c <_strtod_l+0x440>
 8014c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c86:	3316      	adds	r3, #22
 8014c88:	db0c      	blt.n	8014ca4 <_strtod_l+0x498>
 8014c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c8c:	9a07      	ldr	r2, [sp, #28]
 8014c8e:	0030      	movs	r0, r6
 8014c90:	1a9a      	subs	r2, r3, r2
 8014c92:	4b59      	ldr	r3, [pc, #356]	; (8014df8 <_strtod_l+0x5ec>)
 8014c94:	00d2      	lsls	r2, r2, #3
 8014c96:	189b      	adds	r3, r3, r2
 8014c98:	0039      	movs	r1, r7
 8014c9a:	681a      	ldr	r2, [r3, #0]
 8014c9c:	685b      	ldr	r3, [r3, #4]
 8014c9e:	f7ed f835 	bl	8001d0c <__aeabi_ddiv>
 8014ca2:	e794      	b.n	8014bce <_strtod_l+0x3c2>
 8014ca4:	9b06      	ldr	r3, [sp, #24]
 8014ca6:	1b1c      	subs	r4, r3, r4
 8014ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014caa:	18e4      	adds	r4, r4, r3
 8014cac:	2c00      	cmp	r4, #0
 8014cae:	dd70      	ble.n	8014d92 <_strtod_l+0x586>
 8014cb0:	230f      	movs	r3, #15
 8014cb2:	0021      	movs	r1, r4
 8014cb4:	4019      	ands	r1, r3
 8014cb6:	421c      	tst	r4, r3
 8014cb8:	d00a      	beq.n	8014cd0 <_strtod_l+0x4c4>
 8014cba:	00cb      	lsls	r3, r1, #3
 8014cbc:	494e      	ldr	r1, [pc, #312]	; (8014df8 <_strtod_l+0x5ec>)
 8014cbe:	0032      	movs	r2, r6
 8014cc0:	18c9      	adds	r1, r1, r3
 8014cc2:	6808      	ldr	r0, [r1, #0]
 8014cc4:	6849      	ldr	r1, [r1, #4]
 8014cc6:	003b      	movs	r3, r7
 8014cc8:	f7ed fc26 	bl	8002518 <__aeabi_dmul>
 8014ccc:	0006      	movs	r6, r0
 8014cce:	000f      	movs	r7, r1
 8014cd0:	230f      	movs	r3, #15
 8014cd2:	439c      	bics	r4, r3
 8014cd4:	d048      	beq.n	8014d68 <_strtod_l+0x55c>
 8014cd6:	3326      	adds	r3, #38	; 0x26
 8014cd8:	33ff      	adds	r3, #255	; 0xff
 8014cda:	429c      	cmp	r4, r3
 8014cdc:	dd22      	ble.n	8014d24 <_strtod_l+0x518>
 8014cde:	2300      	movs	r3, #0
 8014ce0:	9306      	str	r3, [sp, #24]
 8014ce2:	9307      	str	r3, [sp, #28]
 8014ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8014ce8:	2322      	movs	r3, #34	; 0x22
 8014cea:	2600      	movs	r6, #0
 8014cec:	9a05      	ldr	r2, [sp, #20]
 8014cee:	4f3e      	ldr	r7, [pc, #248]	; (8014de8 <_strtod_l+0x5dc>)
 8014cf0:	6013      	str	r3, [r2, #0]
 8014cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cf4:	42b3      	cmp	r3, r6
 8014cf6:	d100      	bne.n	8014cfa <_strtod_l+0x4ee>
 8014cf8:	e5cf      	b.n	801489a <_strtod_l+0x8e>
 8014cfa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014cfc:	9805      	ldr	r0, [sp, #20]
 8014cfe:	f003 fa9b 	bl	8018238 <_Bfree>
 8014d02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d04:	9805      	ldr	r0, [sp, #20]
 8014d06:	f003 fa97 	bl	8018238 <_Bfree>
 8014d0a:	9907      	ldr	r1, [sp, #28]
 8014d0c:	9805      	ldr	r0, [sp, #20]
 8014d0e:	f003 fa93 	bl	8018238 <_Bfree>
 8014d12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d14:	9805      	ldr	r0, [sp, #20]
 8014d16:	f003 fa8f 	bl	8018238 <_Bfree>
 8014d1a:	9906      	ldr	r1, [sp, #24]
 8014d1c:	9805      	ldr	r0, [sp, #20]
 8014d1e:	f003 fa8b 	bl	8018238 <_Bfree>
 8014d22:	e5ba      	b.n	801489a <_strtod_l+0x8e>
 8014d24:	2300      	movs	r3, #0
 8014d26:	0030      	movs	r0, r6
 8014d28:	0039      	movs	r1, r7
 8014d2a:	001d      	movs	r5, r3
 8014d2c:	1124      	asrs	r4, r4, #4
 8014d2e:	2c01      	cmp	r4, #1
 8014d30:	dc1d      	bgt.n	8014d6e <_strtod_l+0x562>
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d001      	beq.n	8014d3a <_strtod_l+0x52e>
 8014d36:	0006      	movs	r6, r0
 8014d38:	000f      	movs	r7, r1
 8014d3a:	4b30      	ldr	r3, [pc, #192]	; (8014dfc <_strtod_l+0x5f0>)
 8014d3c:	00ed      	lsls	r5, r5, #3
 8014d3e:	18ff      	adds	r7, r7, r3
 8014d40:	4b2f      	ldr	r3, [pc, #188]	; (8014e00 <_strtod_l+0x5f4>)
 8014d42:	0032      	movs	r2, r6
 8014d44:	195d      	adds	r5, r3, r5
 8014d46:	6828      	ldr	r0, [r5, #0]
 8014d48:	6869      	ldr	r1, [r5, #4]
 8014d4a:	003b      	movs	r3, r7
 8014d4c:	f7ed fbe4 	bl	8002518 <__aeabi_dmul>
 8014d50:	4b25      	ldr	r3, [pc, #148]	; (8014de8 <_strtod_l+0x5dc>)
 8014d52:	4a2c      	ldr	r2, [pc, #176]	; (8014e04 <_strtod_l+0x5f8>)
 8014d54:	0006      	movs	r6, r0
 8014d56:	400b      	ands	r3, r1
 8014d58:	4293      	cmp	r3, r2
 8014d5a:	d8c0      	bhi.n	8014cde <_strtod_l+0x4d2>
 8014d5c:	4a2a      	ldr	r2, [pc, #168]	; (8014e08 <_strtod_l+0x5fc>)
 8014d5e:	4293      	cmp	r3, r2
 8014d60:	d913      	bls.n	8014d8a <_strtod_l+0x57e>
 8014d62:	2601      	movs	r6, #1
 8014d64:	4f29      	ldr	r7, [pc, #164]	; (8014e0c <_strtod_l+0x600>)
 8014d66:	4276      	negs	r6, r6
 8014d68:	2300      	movs	r3, #0
 8014d6a:	9308      	str	r3, [sp, #32]
 8014d6c:	e087      	b.n	8014e7e <_strtod_l+0x672>
 8014d6e:	2201      	movs	r2, #1
 8014d70:	4214      	tst	r4, r2
 8014d72:	d007      	beq.n	8014d84 <_strtod_l+0x578>
 8014d74:	4a22      	ldr	r2, [pc, #136]	; (8014e00 <_strtod_l+0x5f4>)
 8014d76:	00eb      	lsls	r3, r5, #3
 8014d78:	189b      	adds	r3, r3, r2
 8014d7a:	681a      	ldr	r2, [r3, #0]
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	f7ed fbcb 	bl	8002518 <__aeabi_dmul>
 8014d82:	2301      	movs	r3, #1
 8014d84:	3501      	adds	r5, #1
 8014d86:	1064      	asrs	r4, r4, #1
 8014d88:	e7d1      	b.n	8014d2e <_strtod_l+0x522>
 8014d8a:	23d4      	movs	r3, #212	; 0xd4
 8014d8c:	049b      	lsls	r3, r3, #18
 8014d8e:	18cf      	adds	r7, r1, r3
 8014d90:	e7ea      	b.n	8014d68 <_strtod_l+0x55c>
 8014d92:	2c00      	cmp	r4, #0
 8014d94:	d0e8      	beq.n	8014d68 <_strtod_l+0x55c>
 8014d96:	4264      	negs	r4, r4
 8014d98:	220f      	movs	r2, #15
 8014d9a:	0023      	movs	r3, r4
 8014d9c:	4013      	ands	r3, r2
 8014d9e:	4214      	tst	r4, r2
 8014da0:	d00a      	beq.n	8014db8 <_strtod_l+0x5ac>
 8014da2:	00da      	lsls	r2, r3, #3
 8014da4:	4b14      	ldr	r3, [pc, #80]	; (8014df8 <_strtod_l+0x5ec>)
 8014da6:	0030      	movs	r0, r6
 8014da8:	189b      	adds	r3, r3, r2
 8014daa:	0039      	movs	r1, r7
 8014dac:	681a      	ldr	r2, [r3, #0]
 8014dae:	685b      	ldr	r3, [r3, #4]
 8014db0:	f7ec ffac 	bl	8001d0c <__aeabi_ddiv>
 8014db4:	0006      	movs	r6, r0
 8014db6:	000f      	movs	r7, r1
 8014db8:	1124      	asrs	r4, r4, #4
 8014dba:	d0d5      	beq.n	8014d68 <_strtod_l+0x55c>
 8014dbc:	2c1f      	cmp	r4, #31
 8014dbe:	dd27      	ble.n	8014e10 <_strtod_l+0x604>
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	9306      	str	r3, [sp, #24]
 8014dc4:	9307      	str	r3, [sp, #28]
 8014dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8014dca:	2322      	movs	r3, #34	; 0x22
 8014dcc:	9a05      	ldr	r2, [sp, #20]
 8014dce:	2600      	movs	r6, #0
 8014dd0:	6013      	str	r3, [r2, #0]
 8014dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dd4:	2700      	movs	r7, #0
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d18f      	bne.n	8014cfa <_strtod_l+0x4ee>
 8014dda:	e55e      	b.n	801489a <_strtod_l+0x8e>
 8014ddc:	00004e1f 	.word	0x00004e1f
 8014de0:	0801d9fd 	.word	0x0801d9fd
 8014de4:	0801d9b0 	.word	0x0801d9b0
 8014de8:	7ff00000 	.word	0x7ff00000
 8014dec:	0801d9f5 	.word	0x0801d9f5
 8014df0:	0801da4b 	.word	0x0801da4b
 8014df4:	0801dcd7 	.word	0x0801dcd7
 8014df8:	0801dbc8 	.word	0x0801dbc8
 8014dfc:	fcb00000 	.word	0xfcb00000
 8014e00:	0801dba0 	.word	0x0801dba0
 8014e04:	7ca00000 	.word	0x7ca00000
 8014e08:	7c900000 	.word	0x7c900000
 8014e0c:	7fefffff 	.word	0x7fefffff
 8014e10:	2310      	movs	r3, #16
 8014e12:	0022      	movs	r2, r4
 8014e14:	401a      	ands	r2, r3
 8014e16:	9208      	str	r2, [sp, #32]
 8014e18:	421c      	tst	r4, r3
 8014e1a:	d001      	beq.n	8014e20 <_strtod_l+0x614>
 8014e1c:	335a      	adds	r3, #90	; 0x5a
 8014e1e:	9308      	str	r3, [sp, #32]
 8014e20:	0030      	movs	r0, r6
 8014e22:	0039      	movs	r1, r7
 8014e24:	2300      	movs	r3, #0
 8014e26:	4dca      	ldr	r5, [pc, #808]	; (8015150 <_strtod_l+0x944>)
 8014e28:	2201      	movs	r2, #1
 8014e2a:	4214      	tst	r4, r2
 8014e2c:	d004      	beq.n	8014e38 <_strtod_l+0x62c>
 8014e2e:	682a      	ldr	r2, [r5, #0]
 8014e30:	686b      	ldr	r3, [r5, #4]
 8014e32:	f7ed fb71 	bl	8002518 <__aeabi_dmul>
 8014e36:	2301      	movs	r3, #1
 8014e38:	1064      	asrs	r4, r4, #1
 8014e3a:	3508      	adds	r5, #8
 8014e3c:	2c00      	cmp	r4, #0
 8014e3e:	d1f3      	bne.n	8014e28 <_strtod_l+0x61c>
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d001      	beq.n	8014e48 <_strtod_l+0x63c>
 8014e44:	0006      	movs	r6, r0
 8014e46:	000f      	movs	r7, r1
 8014e48:	9b08      	ldr	r3, [sp, #32]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d00f      	beq.n	8014e6e <_strtod_l+0x662>
 8014e4e:	236b      	movs	r3, #107	; 0x6b
 8014e50:	0079      	lsls	r1, r7, #1
 8014e52:	0d49      	lsrs	r1, r1, #21
 8014e54:	003a      	movs	r2, r7
 8014e56:	1a5b      	subs	r3, r3, r1
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	dd08      	ble.n	8014e6e <_strtod_l+0x662>
 8014e5c:	2b1f      	cmp	r3, #31
 8014e5e:	dc00      	bgt.n	8014e62 <_strtod_l+0x656>
 8014e60:	e126      	b.n	80150b0 <_strtod_l+0x8a4>
 8014e62:	2600      	movs	r6, #0
 8014e64:	2b34      	cmp	r3, #52	; 0x34
 8014e66:	dc00      	bgt.n	8014e6a <_strtod_l+0x65e>
 8014e68:	e11b      	b.n	80150a2 <_strtod_l+0x896>
 8014e6a:	27dc      	movs	r7, #220	; 0xdc
 8014e6c:	04bf      	lsls	r7, r7, #18
 8014e6e:	2200      	movs	r2, #0
 8014e70:	2300      	movs	r3, #0
 8014e72:	0030      	movs	r0, r6
 8014e74:	0039      	movs	r1, r7
 8014e76:	f7eb faf1 	bl	800045c <__aeabi_dcmpeq>
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	d1a0      	bne.n	8014dc0 <_strtod_l+0x5b4>
 8014e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e82:	9300      	str	r3, [sp, #0]
 8014e84:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014e86:	9b06      	ldr	r3, [sp, #24]
 8014e88:	9805      	ldr	r0, [sp, #20]
 8014e8a:	f003 fa23 	bl	80182d4 <__s2b>
 8014e8e:	900b      	str	r0, [sp, #44]	; 0x2c
 8014e90:	2800      	cmp	r0, #0
 8014e92:	d100      	bne.n	8014e96 <_strtod_l+0x68a>
 8014e94:	e723      	b.n	8014cde <_strtod_l+0x4d2>
 8014e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e98:	9907      	ldr	r1, [sp, #28]
 8014e9a:	17da      	asrs	r2, r3, #31
 8014e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e9e:	1a5b      	subs	r3, r3, r1
 8014ea0:	401a      	ands	r2, r3
 8014ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ea4:	9215      	str	r2, [sp, #84]	; 0x54
 8014ea6:	43db      	mvns	r3, r3
 8014ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014eaa:	17db      	asrs	r3, r3, #31
 8014eac:	401a      	ands	r2, r3
 8014eae:	2300      	movs	r3, #0
 8014eb0:	921c      	str	r2, [sp, #112]	; 0x70
 8014eb2:	9306      	str	r3, [sp, #24]
 8014eb4:	9307      	str	r3, [sp, #28]
 8014eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014eb8:	9805      	ldr	r0, [sp, #20]
 8014eba:	6859      	ldr	r1, [r3, #4]
 8014ebc:	f003 f994 	bl	80181e8 <_Balloc>
 8014ec0:	9009      	str	r0, [sp, #36]	; 0x24
 8014ec2:	2800      	cmp	r0, #0
 8014ec4:	d100      	bne.n	8014ec8 <_strtod_l+0x6bc>
 8014ec6:	e70f      	b.n	8014ce8 <_strtod_l+0x4dc>
 8014ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014eca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ecc:	691b      	ldr	r3, [r3, #16]
 8014ece:	310c      	adds	r1, #12
 8014ed0:	1c9a      	adds	r2, r3, #2
 8014ed2:	0092      	lsls	r2, r2, #2
 8014ed4:	300c      	adds	r0, #12
 8014ed6:	930c      	str	r3, [sp, #48]	; 0x30
 8014ed8:	f7ff fa1a 	bl	8014310 <memcpy>
 8014edc:	ab24      	add	r3, sp, #144	; 0x90
 8014ede:	9301      	str	r3, [sp, #4]
 8014ee0:	ab23      	add	r3, sp, #140	; 0x8c
 8014ee2:	9300      	str	r3, [sp, #0]
 8014ee4:	0032      	movs	r2, r6
 8014ee6:	003b      	movs	r3, r7
 8014ee8:	9805      	ldr	r0, [sp, #20]
 8014eea:	960e      	str	r6, [sp, #56]	; 0x38
 8014eec:	970f      	str	r7, [sp, #60]	; 0x3c
 8014eee:	f003 fd25 	bl	801893c <__d2b>
 8014ef2:	9022      	str	r0, [sp, #136]	; 0x88
 8014ef4:	2800      	cmp	r0, #0
 8014ef6:	d100      	bne.n	8014efa <_strtod_l+0x6ee>
 8014ef8:	e6f6      	b.n	8014ce8 <_strtod_l+0x4dc>
 8014efa:	2101      	movs	r1, #1
 8014efc:	9805      	ldr	r0, [sp, #20]
 8014efe:	f003 fa7d 	bl	80183fc <__i2b>
 8014f02:	9007      	str	r0, [sp, #28]
 8014f04:	2800      	cmp	r0, #0
 8014f06:	d100      	bne.n	8014f0a <_strtod_l+0x6fe>
 8014f08:	e6ee      	b.n	8014ce8 <_strtod_l+0x4dc>
 8014f0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	da00      	bge.n	8014f12 <_strtod_l+0x706>
 8014f10:	e0d3      	b.n	80150ba <_strtod_l+0x8ae>
 8014f12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014f14:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014f16:	189d      	adds	r5, r3, r2
 8014f18:	9908      	ldr	r1, [sp, #32]
 8014f1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014f1c:	1a5b      	subs	r3, r3, r1
 8014f1e:	2136      	movs	r1, #54	; 0x36
 8014f20:	189b      	adds	r3, r3, r2
 8014f22:	1a8a      	subs	r2, r1, r2
 8014f24:	498b      	ldr	r1, [pc, #556]	; (8015154 <_strtod_l+0x948>)
 8014f26:	3b01      	subs	r3, #1
 8014f28:	2001      	movs	r0, #1
 8014f2a:	428b      	cmp	r3, r1
 8014f2c:	db00      	blt.n	8014f30 <_strtod_l+0x724>
 8014f2e:	e0cf      	b.n	80150d0 <_strtod_l+0x8c4>
 8014f30:	1ac9      	subs	r1, r1, r3
 8014f32:	1a52      	subs	r2, r2, r1
 8014f34:	291f      	cmp	r1, #31
 8014f36:	dd00      	ble.n	8014f3a <_strtod_l+0x72e>
 8014f38:	e0c3      	b.n	80150c2 <_strtod_l+0x8b6>
 8014f3a:	4088      	lsls	r0, r1
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	9014      	str	r0, [sp, #80]	; 0x50
 8014f40:	9312      	str	r3, [sp, #72]	; 0x48
 8014f42:	18ab      	adds	r3, r5, r2
 8014f44:	930c      	str	r3, [sp, #48]	; 0x30
 8014f46:	18a4      	adds	r4, r4, r2
 8014f48:	9b08      	ldr	r3, [sp, #32]
 8014f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f4c:	191c      	adds	r4, r3, r4
 8014f4e:	002b      	movs	r3, r5
 8014f50:	4295      	cmp	r5, r2
 8014f52:	dd00      	ble.n	8014f56 <_strtod_l+0x74a>
 8014f54:	0013      	movs	r3, r2
 8014f56:	42a3      	cmp	r3, r4
 8014f58:	dd00      	ble.n	8014f5c <_strtod_l+0x750>
 8014f5a:	0023      	movs	r3, r4
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	dd04      	ble.n	8014f6a <_strtod_l+0x75e>
 8014f60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f62:	1ae4      	subs	r4, r4, r3
 8014f64:	1ad2      	subs	r2, r2, r3
 8014f66:	920c      	str	r2, [sp, #48]	; 0x30
 8014f68:	1aed      	subs	r5, r5, r3
 8014f6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	dd17      	ble.n	8014fa0 <_strtod_l+0x794>
 8014f70:	001a      	movs	r2, r3
 8014f72:	9907      	ldr	r1, [sp, #28]
 8014f74:	9805      	ldr	r0, [sp, #20]
 8014f76:	f003 fb07 	bl	8018588 <__pow5mult>
 8014f7a:	9007      	str	r0, [sp, #28]
 8014f7c:	2800      	cmp	r0, #0
 8014f7e:	d100      	bne.n	8014f82 <_strtod_l+0x776>
 8014f80:	e6b2      	b.n	8014ce8 <_strtod_l+0x4dc>
 8014f82:	0001      	movs	r1, r0
 8014f84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014f86:	9805      	ldr	r0, [sp, #20]
 8014f88:	f003 fa4e 	bl	8018428 <__multiply>
 8014f8c:	9011      	str	r0, [sp, #68]	; 0x44
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	d100      	bne.n	8014f94 <_strtod_l+0x788>
 8014f92:	e6a9      	b.n	8014ce8 <_strtod_l+0x4dc>
 8014f94:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014f96:	9805      	ldr	r0, [sp, #20]
 8014f98:	f003 f94e 	bl	8018238 <_Bfree>
 8014f9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f9e:	9322      	str	r3, [sp, #136]	; 0x88
 8014fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	dd00      	ble.n	8014fa8 <_strtod_l+0x79c>
 8014fa6:	e096      	b.n	80150d6 <_strtod_l+0x8ca>
 8014fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	dd08      	ble.n	8014fc0 <_strtod_l+0x7b4>
 8014fae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fb2:	9805      	ldr	r0, [sp, #20]
 8014fb4:	f003 fae8 	bl	8018588 <__pow5mult>
 8014fb8:	9009      	str	r0, [sp, #36]	; 0x24
 8014fba:	2800      	cmp	r0, #0
 8014fbc:	d100      	bne.n	8014fc0 <_strtod_l+0x7b4>
 8014fbe:	e693      	b.n	8014ce8 <_strtod_l+0x4dc>
 8014fc0:	2c00      	cmp	r4, #0
 8014fc2:	dd08      	ble.n	8014fd6 <_strtod_l+0x7ca>
 8014fc4:	0022      	movs	r2, r4
 8014fc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fc8:	9805      	ldr	r0, [sp, #20]
 8014fca:	f003 fb1f 	bl	801860c <__lshift>
 8014fce:	9009      	str	r0, [sp, #36]	; 0x24
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	d100      	bne.n	8014fd6 <_strtod_l+0x7ca>
 8014fd4:	e688      	b.n	8014ce8 <_strtod_l+0x4dc>
 8014fd6:	2d00      	cmp	r5, #0
 8014fd8:	dd08      	ble.n	8014fec <_strtod_l+0x7e0>
 8014fda:	002a      	movs	r2, r5
 8014fdc:	9907      	ldr	r1, [sp, #28]
 8014fde:	9805      	ldr	r0, [sp, #20]
 8014fe0:	f003 fb14 	bl	801860c <__lshift>
 8014fe4:	9007      	str	r0, [sp, #28]
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	d100      	bne.n	8014fec <_strtod_l+0x7e0>
 8014fea:	e67d      	b.n	8014ce8 <_strtod_l+0x4dc>
 8014fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fee:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014ff0:	9805      	ldr	r0, [sp, #20]
 8014ff2:	f003 fb97 	bl	8018724 <__mdiff>
 8014ff6:	9006      	str	r0, [sp, #24]
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	d100      	bne.n	8014ffe <_strtod_l+0x7f2>
 8014ffc:	e674      	b.n	8014ce8 <_strtod_l+0x4dc>
 8014ffe:	2200      	movs	r2, #0
 8015000:	68c3      	ldr	r3, [r0, #12]
 8015002:	9907      	ldr	r1, [sp, #28]
 8015004:	60c2      	str	r2, [r0, #12]
 8015006:	9311      	str	r3, [sp, #68]	; 0x44
 8015008:	f003 fb70 	bl	80186ec <__mcmp>
 801500c:	2800      	cmp	r0, #0
 801500e:	da6c      	bge.n	80150ea <_strtod_l+0x8de>
 8015010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015012:	4333      	orrs	r3, r6
 8015014:	d000      	beq.n	8015018 <_strtod_l+0x80c>
 8015016:	e097      	b.n	8015148 <_strtod_l+0x93c>
 8015018:	033b      	lsls	r3, r7, #12
 801501a:	d000      	beq.n	801501e <_strtod_l+0x812>
 801501c:	e094      	b.n	8015148 <_strtod_l+0x93c>
 801501e:	22d6      	movs	r2, #214	; 0xd6
 8015020:	4b4d      	ldr	r3, [pc, #308]	; (8015158 <_strtod_l+0x94c>)
 8015022:	04d2      	lsls	r2, r2, #19
 8015024:	403b      	ands	r3, r7
 8015026:	4293      	cmp	r3, r2
 8015028:	d800      	bhi.n	801502c <_strtod_l+0x820>
 801502a:	e08d      	b.n	8015148 <_strtod_l+0x93c>
 801502c:	9b06      	ldr	r3, [sp, #24]
 801502e:	695b      	ldr	r3, [r3, #20]
 8015030:	930a      	str	r3, [sp, #40]	; 0x28
 8015032:	2b00      	cmp	r3, #0
 8015034:	d105      	bne.n	8015042 <_strtod_l+0x836>
 8015036:	9b06      	ldr	r3, [sp, #24]
 8015038:	691b      	ldr	r3, [r3, #16]
 801503a:	930a      	str	r3, [sp, #40]	; 0x28
 801503c:	2b01      	cmp	r3, #1
 801503e:	dc00      	bgt.n	8015042 <_strtod_l+0x836>
 8015040:	e082      	b.n	8015148 <_strtod_l+0x93c>
 8015042:	9906      	ldr	r1, [sp, #24]
 8015044:	2201      	movs	r2, #1
 8015046:	9805      	ldr	r0, [sp, #20]
 8015048:	f003 fae0 	bl	801860c <__lshift>
 801504c:	9907      	ldr	r1, [sp, #28]
 801504e:	9006      	str	r0, [sp, #24]
 8015050:	f003 fb4c 	bl	80186ec <__mcmp>
 8015054:	2800      	cmp	r0, #0
 8015056:	dd77      	ble.n	8015148 <_strtod_l+0x93c>
 8015058:	9908      	ldr	r1, [sp, #32]
 801505a:	003b      	movs	r3, r7
 801505c:	4a3e      	ldr	r2, [pc, #248]	; (8015158 <_strtod_l+0x94c>)
 801505e:	2900      	cmp	r1, #0
 8015060:	d100      	bne.n	8015064 <_strtod_l+0x858>
 8015062:	e09e      	b.n	80151a2 <_strtod_l+0x996>
 8015064:	0011      	movs	r1, r2
 8015066:	20d6      	movs	r0, #214	; 0xd6
 8015068:	4039      	ands	r1, r7
 801506a:	04c0      	lsls	r0, r0, #19
 801506c:	4281      	cmp	r1, r0
 801506e:	dd00      	ble.n	8015072 <_strtod_l+0x866>
 8015070:	e097      	b.n	80151a2 <_strtod_l+0x996>
 8015072:	23dc      	movs	r3, #220	; 0xdc
 8015074:	049b      	lsls	r3, r3, #18
 8015076:	4299      	cmp	r1, r3
 8015078:	dc00      	bgt.n	801507c <_strtod_l+0x870>
 801507a:	e6a6      	b.n	8014dca <_strtod_l+0x5be>
 801507c:	4b37      	ldr	r3, [pc, #220]	; (801515c <_strtod_l+0x950>)
 801507e:	0030      	movs	r0, r6
 8015080:	931b      	str	r3, [sp, #108]	; 0x6c
 8015082:	2300      	movs	r3, #0
 8015084:	931a      	str	r3, [sp, #104]	; 0x68
 8015086:	0039      	movs	r1, r7
 8015088:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801508a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801508c:	f7ed fa44 	bl	8002518 <__aeabi_dmul>
 8015090:	0006      	movs	r6, r0
 8015092:	000f      	movs	r7, r1
 8015094:	4308      	orrs	r0, r1
 8015096:	d000      	beq.n	801509a <_strtod_l+0x88e>
 8015098:	e62f      	b.n	8014cfa <_strtod_l+0x4ee>
 801509a:	2322      	movs	r3, #34	; 0x22
 801509c:	9a05      	ldr	r2, [sp, #20]
 801509e:	6013      	str	r3, [r2, #0]
 80150a0:	e62b      	b.n	8014cfa <_strtod_l+0x4ee>
 80150a2:	2101      	movs	r1, #1
 80150a4:	3b20      	subs	r3, #32
 80150a6:	4249      	negs	r1, r1
 80150a8:	4099      	lsls	r1, r3
 80150aa:	400a      	ands	r2, r1
 80150ac:	0017      	movs	r7, r2
 80150ae:	e6de      	b.n	8014e6e <_strtod_l+0x662>
 80150b0:	2201      	movs	r2, #1
 80150b2:	4252      	negs	r2, r2
 80150b4:	409a      	lsls	r2, r3
 80150b6:	4016      	ands	r6, r2
 80150b8:	e6d9      	b.n	8014e6e <_strtod_l+0x662>
 80150ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80150bc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80150be:	1ad4      	subs	r4, r2, r3
 80150c0:	e72a      	b.n	8014f18 <_strtod_l+0x70c>
 80150c2:	4927      	ldr	r1, [pc, #156]	; (8015160 <_strtod_l+0x954>)
 80150c4:	1acb      	subs	r3, r1, r3
 80150c6:	0001      	movs	r1, r0
 80150c8:	4099      	lsls	r1, r3
 80150ca:	9112      	str	r1, [sp, #72]	; 0x48
 80150cc:	9014      	str	r0, [sp, #80]	; 0x50
 80150ce:	e738      	b.n	8014f42 <_strtod_l+0x736>
 80150d0:	2300      	movs	r3, #0
 80150d2:	9312      	str	r3, [sp, #72]	; 0x48
 80150d4:	e7fa      	b.n	80150cc <_strtod_l+0x8c0>
 80150d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80150da:	9805      	ldr	r0, [sp, #20]
 80150dc:	f003 fa96 	bl	801860c <__lshift>
 80150e0:	9022      	str	r0, [sp, #136]	; 0x88
 80150e2:	2800      	cmp	r0, #0
 80150e4:	d000      	beq.n	80150e8 <_strtod_l+0x8dc>
 80150e6:	e75f      	b.n	8014fa8 <_strtod_l+0x79c>
 80150e8:	e5fe      	b.n	8014ce8 <_strtod_l+0x4dc>
 80150ea:	970c      	str	r7, [sp, #48]	; 0x30
 80150ec:	2800      	cmp	r0, #0
 80150ee:	d176      	bne.n	80151de <_strtod_l+0x9d2>
 80150f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80150f2:	033b      	lsls	r3, r7, #12
 80150f4:	0b1b      	lsrs	r3, r3, #12
 80150f6:	2a00      	cmp	r2, #0
 80150f8:	d038      	beq.n	801516c <_strtod_l+0x960>
 80150fa:	4a1a      	ldr	r2, [pc, #104]	; (8015164 <_strtod_l+0x958>)
 80150fc:	4293      	cmp	r3, r2
 80150fe:	d138      	bne.n	8015172 <_strtod_l+0x966>
 8015100:	2201      	movs	r2, #1
 8015102:	9b08      	ldr	r3, [sp, #32]
 8015104:	4252      	negs	r2, r2
 8015106:	0031      	movs	r1, r6
 8015108:	0010      	movs	r0, r2
 801510a:	2b00      	cmp	r3, #0
 801510c:	d00b      	beq.n	8015126 <_strtod_l+0x91a>
 801510e:	24d4      	movs	r4, #212	; 0xd4
 8015110:	4b11      	ldr	r3, [pc, #68]	; (8015158 <_strtod_l+0x94c>)
 8015112:	0010      	movs	r0, r2
 8015114:	403b      	ands	r3, r7
 8015116:	04e4      	lsls	r4, r4, #19
 8015118:	42a3      	cmp	r3, r4
 801511a:	d804      	bhi.n	8015126 <_strtod_l+0x91a>
 801511c:	306c      	adds	r0, #108	; 0x6c
 801511e:	0d1b      	lsrs	r3, r3, #20
 8015120:	1ac3      	subs	r3, r0, r3
 8015122:	409a      	lsls	r2, r3
 8015124:	0010      	movs	r0, r2
 8015126:	4281      	cmp	r1, r0
 8015128:	d123      	bne.n	8015172 <_strtod_l+0x966>
 801512a:	4b0f      	ldr	r3, [pc, #60]	; (8015168 <_strtod_l+0x95c>)
 801512c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801512e:	429a      	cmp	r2, r3
 8015130:	d102      	bne.n	8015138 <_strtod_l+0x92c>
 8015132:	1c4b      	adds	r3, r1, #1
 8015134:	d100      	bne.n	8015138 <_strtod_l+0x92c>
 8015136:	e5d7      	b.n	8014ce8 <_strtod_l+0x4dc>
 8015138:	4b07      	ldr	r3, [pc, #28]	; (8015158 <_strtod_l+0x94c>)
 801513a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801513c:	2600      	movs	r6, #0
 801513e:	401a      	ands	r2, r3
 8015140:	0013      	movs	r3, r2
 8015142:	2280      	movs	r2, #128	; 0x80
 8015144:	0352      	lsls	r2, r2, #13
 8015146:	189f      	adds	r7, r3, r2
 8015148:	9b08      	ldr	r3, [sp, #32]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d196      	bne.n	801507c <_strtod_l+0x870>
 801514e:	e5d4      	b.n	8014cfa <_strtod_l+0x4ee>
 8015150:	0801d9c8 	.word	0x0801d9c8
 8015154:	fffffc02 	.word	0xfffffc02
 8015158:	7ff00000 	.word	0x7ff00000
 801515c:	39500000 	.word	0x39500000
 8015160:	fffffbe2 	.word	0xfffffbe2
 8015164:	000fffff 	.word	0x000fffff
 8015168:	7fefffff 	.word	0x7fefffff
 801516c:	4333      	orrs	r3, r6
 801516e:	d100      	bne.n	8015172 <_strtod_l+0x966>
 8015170:	e772      	b.n	8015058 <_strtod_l+0x84c>
 8015172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015174:	2b00      	cmp	r3, #0
 8015176:	d01d      	beq.n	80151b4 <_strtod_l+0x9a8>
 8015178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801517a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801517c:	4213      	tst	r3, r2
 801517e:	d0e3      	beq.n	8015148 <_strtod_l+0x93c>
 8015180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015182:	0030      	movs	r0, r6
 8015184:	0039      	movs	r1, r7
 8015186:	9a08      	ldr	r2, [sp, #32]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d017      	beq.n	80151bc <_strtod_l+0x9b0>
 801518c:	f7ff fb26 	bl	80147dc <sulp>
 8015190:	0002      	movs	r2, r0
 8015192:	000b      	movs	r3, r1
 8015194:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015196:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015198:	f7ec fa4e 	bl	8001638 <__aeabi_dadd>
 801519c:	0006      	movs	r6, r0
 801519e:	000f      	movs	r7, r1
 80151a0:	e7d2      	b.n	8015148 <_strtod_l+0x93c>
 80151a2:	2601      	movs	r6, #1
 80151a4:	4013      	ands	r3, r2
 80151a6:	4a9b      	ldr	r2, [pc, #620]	; (8015414 <_strtod_l+0xc08>)
 80151a8:	4276      	negs	r6, r6
 80151aa:	189b      	adds	r3, r3, r2
 80151ac:	4a9a      	ldr	r2, [pc, #616]	; (8015418 <_strtod_l+0xc0c>)
 80151ae:	431a      	orrs	r2, r3
 80151b0:	0017      	movs	r7, r2
 80151b2:	e7c9      	b.n	8015148 <_strtod_l+0x93c>
 80151b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151b6:	4233      	tst	r3, r6
 80151b8:	d0c6      	beq.n	8015148 <_strtod_l+0x93c>
 80151ba:	e7e1      	b.n	8015180 <_strtod_l+0x974>
 80151bc:	f7ff fb0e 	bl	80147dc <sulp>
 80151c0:	0002      	movs	r2, r0
 80151c2:	000b      	movs	r3, r1
 80151c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80151c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80151c8:	f7ed fc12 	bl	80029f0 <__aeabi_dsub>
 80151cc:	2200      	movs	r2, #0
 80151ce:	2300      	movs	r3, #0
 80151d0:	0006      	movs	r6, r0
 80151d2:	000f      	movs	r7, r1
 80151d4:	f7eb f942 	bl	800045c <__aeabi_dcmpeq>
 80151d8:	2800      	cmp	r0, #0
 80151da:	d0b5      	beq.n	8015148 <_strtod_l+0x93c>
 80151dc:	e5f5      	b.n	8014dca <_strtod_l+0x5be>
 80151de:	9907      	ldr	r1, [sp, #28]
 80151e0:	9806      	ldr	r0, [sp, #24]
 80151e2:	f003 fc0f 	bl	8018a04 <__ratio>
 80151e6:	2380      	movs	r3, #128	; 0x80
 80151e8:	2200      	movs	r2, #0
 80151ea:	05db      	lsls	r3, r3, #23
 80151ec:	0004      	movs	r4, r0
 80151ee:	000d      	movs	r5, r1
 80151f0:	f7eb f944 	bl	800047c <__aeabi_dcmple>
 80151f4:	2800      	cmp	r0, #0
 80151f6:	d079      	beq.n	80152ec <_strtod_l+0xae0>
 80151f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d04b      	beq.n	8015296 <_strtod_l+0xa8a>
 80151fe:	2300      	movs	r3, #0
 8015200:	4c86      	ldr	r4, [pc, #536]	; (801541c <_strtod_l+0xc10>)
 8015202:	2500      	movs	r5, #0
 8015204:	9312      	str	r3, [sp, #72]	; 0x48
 8015206:	9413      	str	r4, [sp, #76]	; 0x4c
 8015208:	4c84      	ldr	r4, [pc, #528]	; (801541c <_strtod_l+0xc10>)
 801520a:	4a85      	ldr	r2, [pc, #532]	; (8015420 <_strtod_l+0xc14>)
 801520c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801520e:	4013      	ands	r3, r2
 8015210:	9314      	str	r3, [sp, #80]	; 0x50
 8015212:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015214:	4b83      	ldr	r3, [pc, #524]	; (8015424 <_strtod_l+0xc18>)
 8015216:	429a      	cmp	r2, r3
 8015218:	d000      	beq.n	801521c <_strtod_l+0xa10>
 801521a:	e0b0      	b.n	801537e <_strtod_l+0xb72>
 801521c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801521e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015220:	921a      	str	r2, [sp, #104]	; 0x68
 8015222:	931b      	str	r3, [sp, #108]	; 0x6c
 8015224:	4a80      	ldr	r2, [pc, #512]	; (8015428 <_strtod_l+0xc1c>)
 8015226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015228:	4694      	mov	ip, r2
 801522a:	4463      	add	r3, ip
 801522c:	001f      	movs	r7, r3
 801522e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015230:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015232:	0030      	movs	r0, r6
 8015234:	0039      	movs	r1, r7
 8015236:	920c      	str	r2, [sp, #48]	; 0x30
 8015238:	930d      	str	r3, [sp, #52]	; 0x34
 801523a:	f003 fb0b 	bl	8018854 <__ulp>
 801523e:	0002      	movs	r2, r0
 8015240:	000b      	movs	r3, r1
 8015242:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015244:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015246:	f7ed f967 	bl	8002518 <__aeabi_dmul>
 801524a:	0032      	movs	r2, r6
 801524c:	003b      	movs	r3, r7
 801524e:	f7ec f9f3 	bl	8001638 <__aeabi_dadd>
 8015252:	4a73      	ldr	r2, [pc, #460]	; (8015420 <_strtod_l+0xc14>)
 8015254:	4b75      	ldr	r3, [pc, #468]	; (801542c <_strtod_l+0xc20>)
 8015256:	0006      	movs	r6, r0
 8015258:	400a      	ands	r2, r1
 801525a:	429a      	cmp	r2, r3
 801525c:	d95e      	bls.n	801531c <_strtod_l+0xb10>
 801525e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015260:	4a73      	ldr	r2, [pc, #460]	; (8015430 <_strtod_l+0xc24>)
 8015262:	4293      	cmp	r3, r2
 8015264:	d103      	bne.n	801526e <_strtod_l+0xa62>
 8015266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015268:	3301      	adds	r3, #1
 801526a:	d100      	bne.n	801526e <_strtod_l+0xa62>
 801526c:	e53c      	b.n	8014ce8 <_strtod_l+0x4dc>
 801526e:	2601      	movs	r6, #1
 8015270:	4f6f      	ldr	r7, [pc, #444]	; (8015430 <_strtod_l+0xc24>)
 8015272:	4276      	negs	r6, r6
 8015274:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015276:	9805      	ldr	r0, [sp, #20]
 8015278:	f002 ffde 	bl	8018238 <_Bfree>
 801527c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801527e:	9805      	ldr	r0, [sp, #20]
 8015280:	f002 ffda 	bl	8018238 <_Bfree>
 8015284:	9907      	ldr	r1, [sp, #28]
 8015286:	9805      	ldr	r0, [sp, #20]
 8015288:	f002 ffd6 	bl	8018238 <_Bfree>
 801528c:	9906      	ldr	r1, [sp, #24]
 801528e:	9805      	ldr	r0, [sp, #20]
 8015290:	f002 ffd2 	bl	8018238 <_Bfree>
 8015294:	e60f      	b.n	8014eb6 <_strtod_l+0x6aa>
 8015296:	2e00      	cmp	r6, #0
 8015298:	d11c      	bne.n	80152d4 <_strtod_l+0xac8>
 801529a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801529c:	031b      	lsls	r3, r3, #12
 801529e:	d11f      	bne.n	80152e0 <_strtod_l+0xad4>
 80152a0:	2200      	movs	r2, #0
 80152a2:	0020      	movs	r0, r4
 80152a4:	0029      	movs	r1, r5
 80152a6:	4b5d      	ldr	r3, [pc, #372]	; (801541c <_strtod_l+0xc10>)
 80152a8:	f7eb f8de 	bl	8000468 <__aeabi_dcmplt>
 80152ac:	2800      	cmp	r0, #0
 80152ae:	d11a      	bne.n	80152e6 <_strtod_l+0xada>
 80152b0:	0020      	movs	r0, r4
 80152b2:	0029      	movs	r1, r5
 80152b4:	2200      	movs	r2, #0
 80152b6:	4b5f      	ldr	r3, [pc, #380]	; (8015434 <_strtod_l+0xc28>)
 80152b8:	f7ed f92e 	bl	8002518 <__aeabi_dmul>
 80152bc:	0005      	movs	r5, r0
 80152be:	000c      	movs	r4, r1
 80152c0:	2380      	movs	r3, #128	; 0x80
 80152c2:	061b      	lsls	r3, r3, #24
 80152c4:	18e3      	adds	r3, r4, r3
 80152c6:	951e      	str	r5, [sp, #120]	; 0x78
 80152c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80152ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80152cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80152ce:	9212      	str	r2, [sp, #72]	; 0x48
 80152d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80152d2:	e79a      	b.n	801520a <_strtod_l+0x9fe>
 80152d4:	2e01      	cmp	r6, #1
 80152d6:	d103      	bne.n	80152e0 <_strtod_l+0xad4>
 80152d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d100      	bne.n	80152e0 <_strtod_l+0xad4>
 80152de:	e574      	b.n	8014dca <_strtod_l+0x5be>
 80152e0:	2300      	movs	r3, #0
 80152e2:	4c55      	ldr	r4, [pc, #340]	; (8015438 <_strtod_l+0xc2c>)
 80152e4:	e78d      	b.n	8015202 <_strtod_l+0x9f6>
 80152e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80152e8:	4c52      	ldr	r4, [pc, #328]	; (8015434 <_strtod_l+0xc28>)
 80152ea:	e7e9      	b.n	80152c0 <_strtod_l+0xab4>
 80152ec:	2200      	movs	r2, #0
 80152ee:	0020      	movs	r0, r4
 80152f0:	0029      	movs	r1, r5
 80152f2:	4b50      	ldr	r3, [pc, #320]	; (8015434 <_strtod_l+0xc28>)
 80152f4:	f7ed f910 	bl	8002518 <__aeabi_dmul>
 80152f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80152fa:	0005      	movs	r5, r0
 80152fc:	000b      	movs	r3, r1
 80152fe:	000c      	movs	r4, r1
 8015300:	2a00      	cmp	r2, #0
 8015302:	d107      	bne.n	8015314 <_strtod_l+0xb08>
 8015304:	2280      	movs	r2, #128	; 0x80
 8015306:	0612      	lsls	r2, r2, #24
 8015308:	188b      	adds	r3, r1, r2
 801530a:	9016      	str	r0, [sp, #88]	; 0x58
 801530c:	9317      	str	r3, [sp, #92]	; 0x5c
 801530e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015312:	e7dc      	b.n	80152ce <_strtod_l+0xac2>
 8015314:	0002      	movs	r2, r0
 8015316:	9216      	str	r2, [sp, #88]	; 0x58
 8015318:	9317      	str	r3, [sp, #92]	; 0x5c
 801531a:	e7f8      	b.n	801530e <_strtod_l+0xb02>
 801531c:	23d4      	movs	r3, #212	; 0xd4
 801531e:	049b      	lsls	r3, r3, #18
 8015320:	18cf      	adds	r7, r1, r3
 8015322:	9b08      	ldr	r3, [sp, #32]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d1a5      	bne.n	8015274 <_strtod_l+0xa68>
 8015328:	4b3d      	ldr	r3, [pc, #244]	; (8015420 <_strtod_l+0xc14>)
 801532a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801532c:	403b      	ands	r3, r7
 801532e:	429a      	cmp	r2, r3
 8015330:	d1a0      	bne.n	8015274 <_strtod_l+0xa68>
 8015332:	0028      	movs	r0, r5
 8015334:	0021      	movs	r1, r4
 8015336:	f7eb f977 	bl	8000628 <__aeabi_d2lz>
 801533a:	f7eb f9b1 	bl	80006a0 <__aeabi_l2d>
 801533e:	0002      	movs	r2, r0
 8015340:	000b      	movs	r3, r1
 8015342:	0028      	movs	r0, r5
 8015344:	0021      	movs	r1, r4
 8015346:	f7ed fb53 	bl	80029f0 <__aeabi_dsub>
 801534a:	033b      	lsls	r3, r7, #12
 801534c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801534e:	0b1b      	lsrs	r3, r3, #12
 8015350:	4333      	orrs	r3, r6
 8015352:	4313      	orrs	r3, r2
 8015354:	0004      	movs	r4, r0
 8015356:	000d      	movs	r5, r1
 8015358:	4a38      	ldr	r2, [pc, #224]	; (801543c <_strtod_l+0xc30>)
 801535a:	2b00      	cmp	r3, #0
 801535c:	d055      	beq.n	801540a <_strtod_l+0xbfe>
 801535e:	4b38      	ldr	r3, [pc, #224]	; (8015440 <_strtod_l+0xc34>)
 8015360:	f7eb f882 	bl	8000468 <__aeabi_dcmplt>
 8015364:	2800      	cmp	r0, #0
 8015366:	d000      	beq.n	801536a <_strtod_l+0xb5e>
 8015368:	e4c7      	b.n	8014cfa <_strtod_l+0x4ee>
 801536a:	0020      	movs	r0, r4
 801536c:	0029      	movs	r1, r5
 801536e:	4a35      	ldr	r2, [pc, #212]	; (8015444 <_strtod_l+0xc38>)
 8015370:	4b30      	ldr	r3, [pc, #192]	; (8015434 <_strtod_l+0xc28>)
 8015372:	f7eb f88d 	bl	8000490 <__aeabi_dcmpgt>
 8015376:	2800      	cmp	r0, #0
 8015378:	d100      	bne.n	801537c <_strtod_l+0xb70>
 801537a:	e77b      	b.n	8015274 <_strtod_l+0xa68>
 801537c:	e4bd      	b.n	8014cfa <_strtod_l+0x4ee>
 801537e:	9b08      	ldr	r3, [sp, #32]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d02b      	beq.n	80153dc <_strtod_l+0xbd0>
 8015384:	23d4      	movs	r3, #212	; 0xd4
 8015386:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015388:	04db      	lsls	r3, r3, #19
 801538a:	429a      	cmp	r2, r3
 801538c:	d826      	bhi.n	80153dc <_strtod_l+0xbd0>
 801538e:	0028      	movs	r0, r5
 8015390:	0021      	movs	r1, r4
 8015392:	4a2d      	ldr	r2, [pc, #180]	; (8015448 <_strtod_l+0xc3c>)
 8015394:	4b2d      	ldr	r3, [pc, #180]	; (801544c <_strtod_l+0xc40>)
 8015396:	f7eb f871 	bl	800047c <__aeabi_dcmple>
 801539a:	2800      	cmp	r0, #0
 801539c:	d017      	beq.n	80153ce <_strtod_l+0xbc2>
 801539e:	0028      	movs	r0, r5
 80153a0:	0021      	movs	r1, r4
 80153a2:	f7eb f923 	bl	80005ec <__aeabi_d2uiz>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d100      	bne.n	80153ac <_strtod_l+0xba0>
 80153aa:	3001      	adds	r0, #1
 80153ac:	f7ed ff36 	bl	800321c <__aeabi_ui2d>
 80153b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80153b2:	0005      	movs	r5, r0
 80153b4:	000b      	movs	r3, r1
 80153b6:	000c      	movs	r4, r1
 80153b8:	2a00      	cmp	r2, #0
 80153ba:	d122      	bne.n	8015402 <_strtod_l+0xbf6>
 80153bc:	2280      	movs	r2, #128	; 0x80
 80153be:	0612      	lsls	r2, r2, #24
 80153c0:	188b      	adds	r3, r1, r2
 80153c2:	9018      	str	r0, [sp, #96]	; 0x60
 80153c4:	9319      	str	r3, [sp, #100]	; 0x64
 80153c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80153c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80153ca:	9212      	str	r2, [sp, #72]	; 0x48
 80153cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80153ce:	22d6      	movs	r2, #214	; 0xd6
 80153d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80153d2:	04d2      	lsls	r2, r2, #19
 80153d4:	189b      	adds	r3, r3, r2
 80153d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153d8:	1a9b      	subs	r3, r3, r2
 80153da:	9313      	str	r3, [sp, #76]	; 0x4c
 80153dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80153de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80153e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80153e2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80153e4:	f003 fa36 	bl	8018854 <__ulp>
 80153e8:	0002      	movs	r2, r0
 80153ea:	000b      	movs	r3, r1
 80153ec:	0030      	movs	r0, r6
 80153ee:	0039      	movs	r1, r7
 80153f0:	f7ed f892 	bl	8002518 <__aeabi_dmul>
 80153f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153f8:	f7ec f91e 	bl	8001638 <__aeabi_dadd>
 80153fc:	0006      	movs	r6, r0
 80153fe:	000f      	movs	r7, r1
 8015400:	e78f      	b.n	8015322 <_strtod_l+0xb16>
 8015402:	0002      	movs	r2, r0
 8015404:	9218      	str	r2, [sp, #96]	; 0x60
 8015406:	9319      	str	r3, [sp, #100]	; 0x64
 8015408:	e7dd      	b.n	80153c6 <_strtod_l+0xbba>
 801540a:	4b11      	ldr	r3, [pc, #68]	; (8015450 <_strtod_l+0xc44>)
 801540c:	f7eb f82c 	bl	8000468 <__aeabi_dcmplt>
 8015410:	e7b1      	b.n	8015376 <_strtod_l+0xb6a>
 8015412:	46c0      	nop			; (mov r8, r8)
 8015414:	fff00000 	.word	0xfff00000
 8015418:	000fffff 	.word	0x000fffff
 801541c:	3ff00000 	.word	0x3ff00000
 8015420:	7ff00000 	.word	0x7ff00000
 8015424:	7fe00000 	.word	0x7fe00000
 8015428:	fcb00000 	.word	0xfcb00000
 801542c:	7c9fffff 	.word	0x7c9fffff
 8015430:	7fefffff 	.word	0x7fefffff
 8015434:	3fe00000 	.word	0x3fe00000
 8015438:	bff00000 	.word	0xbff00000
 801543c:	94a03595 	.word	0x94a03595
 8015440:	3fdfffff 	.word	0x3fdfffff
 8015444:	35afe535 	.word	0x35afe535
 8015448:	ffc00000 	.word	0xffc00000
 801544c:	41dfffff 	.word	0x41dfffff
 8015450:	3fcfffff 	.word	0x3fcfffff

08015454 <strtod>:
 8015454:	b510      	push	{r4, lr}
 8015456:	000a      	movs	r2, r1
 8015458:	0001      	movs	r1, r0
 801545a:	4803      	ldr	r0, [pc, #12]	; (8015468 <strtod+0x14>)
 801545c:	4b03      	ldr	r3, [pc, #12]	; (801546c <strtod+0x18>)
 801545e:	6800      	ldr	r0, [r0, #0]
 8015460:	f7ff f9d4 	bl	801480c <_strtod_l>
 8015464:	bd10      	pop	{r4, pc}
 8015466:	46c0      	nop			; (mov r8, r8)
 8015468:	200000d0 	.word	0x200000d0
 801546c:	20000918 	.word	0x20000918

08015470 <strtok>:
 8015470:	4b03      	ldr	r3, [pc, #12]	; (8015480 <strtok+0x10>)
 8015472:	b510      	push	{r4, lr}
 8015474:	681a      	ldr	r2, [r3, #0]
 8015476:	2301      	movs	r3, #1
 8015478:	325c      	adds	r2, #92	; 0x5c
 801547a:	f000 f803 	bl	8015484 <__strtok_r>
 801547e:	bd10      	pop	{r4, pc}
 8015480:	200000d0 	.word	0x200000d0

08015484 <__strtok_r>:
 8015484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015486:	2800      	cmp	r0, #0
 8015488:	d102      	bne.n	8015490 <__strtok_r+0xc>
 801548a:	6810      	ldr	r0, [r2, #0]
 801548c:	2800      	cmp	r0, #0
 801548e:	d013      	beq.n	80154b8 <__strtok_r+0x34>
 8015490:	0004      	movs	r4, r0
 8015492:	0020      	movs	r0, r4
 8015494:	000e      	movs	r6, r1
 8015496:	7805      	ldrb	r5, [r0, #0]
 8015498:	3401      	adds	r4, #1
 801549a:	7837      	ldrb	r7, [r6, #0]
 801549c:	2f00      	cmp	r7, #0
 801549e:	d104      	bne.n	80154aa <__strtok_r+0x26>
 80154a0:	2d00      	cmp	r5, #0
 80154a2:	d10f      	bne.n	80154c4 <__strtok_r+0x40>
 80154a4:	0028      	movs	r0, r5
 80154a6:	6015      	str	r5, [r2, #0]
 80154a8:	e006      	b.n	80154b8 <__strtok_r+0x34>
 80154aa:	3601      	adds	r6, #1
 80154ac:	42bd      	cmp	r5, r7
 80154ae:	d1f4      	bne.n	801549a <__strtok_r+0x16>
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d1ee      	bne.n	8015492 <__strtok_r+0xe>
 80154b4:	6014      	str	r4, [r2, #0]
 80154b6:	7003      	strb	r3, [r0, #0]
 80154b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154ba:	002f      	movs	r7, r5
 80154bc:	e00f      	b.n	80154de <__strtok_r+0x5a>
 80154be:	3301      	adds	r3, #1
 80154c0:	2e00      	cmp	r6, #0
 80154c2:	d104      	bne.n	80154ce <__strtok_r+0x4a>
 80154c4:	0023      	movs	r3, r4
 80154c6:	3401      	adds	r4, #1
 80154c8:	781d      	ldrb	r5, [r3, #0]
 80154ca:	0027      	movs	r7, r4
 80154cc:	000b      	movs	r3, r1
 80154ce:	781e      	ldrb	r6, [r3, #0]
 80154d0:	42b5      	cmp	r5, r6
 80154d2:	d1f4      	bne.n	80154be <__strtok_r+0x3a>
 80154d4:	2d00      	cmp	r5, #0
 80154d6:	d0f0      	beq.n	80154ba <__strtok_r+0x36>
 80154d8:	2300      	movs	r3, #0
 80154da:	3c01      	subs	r4, #1
 80154dc:	7023      	strb	r3, [r4, #0]
 80154de:	6017      	str	r7, [r2, #0]
 80154e0:	e7ea      	b.n	80154b8 <__strtok_r+0x34>
	...

080154e4 <_strtol_l.isra.0>:
 80154e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154e6:	b087      	sub	sp, #28
 80154e8:	001e      	movs	r6, r3
 80154ea:	9005      	str	r0, [sp, #20]
 80154ec:	9101      	str	r1, [sp, #4]
 80154ee:	9202      	str	r2, [sp, #8]
 80154f0:	2b01      	cmp	r3, #1
 80154f2:	d045      	beq.n	8015580 <_strtol_l.isra.0+0x9c>
 80154f4:	0008      	movs	r0, r1
 80154f6:	2b24      	cmp	r3, #36	; 0x24
 80154f8:	d842      	bhi.n	8015580 <_strtol_l.isra.0+0x9c>
 80154fa:	4b3f      	ldr	r3, [pc, #252]	; (80155f8 <_strtol_l.isra.0+0x114>)
 80154fc:	2208      	movs	r2, #8
 80154fe:	469c      	mov	ip, r3
 8015500:	0003      	movs	r3, r0
 8015502:	4661      	mov	r1, ip
 8015504:	781c      	ldrb	r4, [r3, #0]
 8015506:	1c45      	adds	r5, r0, #1
 8015508:	5d09      	ldrb	r1, [r1, r4]
 801550a:	0028      	movs	r0, r5
 801550c:	000f      	movs	r7, r1
 801550e:	4017      	ands	r7, r2
 8015510:	4211      	tst	r1, r2
 8015512:	d1f5      	bne.n	8015500 <_strtol_l.isra.0+0x1c>
 8015514:	2c2d      	cmp	r4, #45	; 0x2d
 8015516:	d13a      	bne.n	801558e <_strtol_l.isra.0+0xaa>
 8015518:	2701      	movs	r7, #1
 801551a:	782c      	ldrb	r4, [r5, #0]
 801551c:	1c9d      	adds	r5, r3, #2
 801551e:	2e00      	cmp	r6, #0
 8015520:	d065      	beq.n	80155ee <_strtol_l.isra.0+0x10a>
 8015522:	2e10      	cmp	r6, #16
 8015524:	d109      	bne.n	801553a <_strtol_l.isra.0+0x56>
 8015526:	2c30      	cmp	r4, #48	; 0x30
 8015528:	d107      	bne.n	801553a <_strtol_l.isra.0+0x56>
 801552a:	2220      	movs	r2, #32
 801552c:	782b      	ldrb	r3, [r5, #0]
 801552e:	4393      	bics	r3, r2
 8015530:	2b58      	cmp	r3, #88	; 0x58
 8015532:	d157      	bne.n	80155e4 <_strtol_l.isra.0+0x100>
 8015534:	2610      	movs	r6, #16
 8015536:	786c      	ldrb	r4, [r5, #1]
 8015538:	3502      	adds	r5, #2
 801553a:	4b30      	ldr	r3, [pc, #192]	; (80155fc <_strtol_l.isra.0+0x118>)
 801553c:	0031      	movs	r1, r6
 801553e:	18fb      	adds	r3, r7, r3
 8015540:	0018      	movs	r0, r3
 8015542:	9303      	str	r3, [sp, #12]
 8015544:	f7ea fe8a 	bl	800025c <__aeabi_uidivmod>
 8015548:	2300      	movs	r3, #0
 801554a:	2201      	movs	r2, #1
 801554c:	4684      	mov	ip, r0
 801554e:	0018      	movs	r0, r3
 8015550:	9104      	str	r1, [sp, #16]
 8015552:	4252      	negs	r2, r2
 8015554:	0021      	movs	r1, r4
 8015556:	3930      	subs	r1, #48	; 0x30
 8015558:	2909      	cmp	r1, #9
 801555a:	d81d      	bhi.n	8015598 <_strtol_l.isra.0+0xb4>
 801555c:	000c      	movs	r4, r1
 801555e:	42a6      	cmp	r6, r4
 8015560:	dd28      	ble.n	80155b4 <_strtol_l.isra.0+0xd0>
 8015562:	2b00      	cmp	r3, #0
 8015564:	db24      	blt.n	80155b0 <_strtol_l.isra.0+0xcc>
 8015566:	0013      	movs	r3, r2
 8015568:	4584      	cmp	ip, r0
 801556a:	d306      	bcc.n	801557a <_strtol_l.isra.0+0x96>
 801556c:	d102      	bne.n	8015574 <_strtol_l.isra.0+0x90>
 801556e:	9904      	ldr	r1, [sp, #16]
 8015570:	42a1      	cmp	r1, r4
 8015572:	db02      	blt.n	801557a <_strtol_l.isra.0+0x96>
 8015574:	2301      	movs	r3, #1
 8015576:	4370      	muls	r0, r6
 8015578:	1820      	adds	r0, r4, r0
 801557a:	782c      	ldrb	r4, [r5, #0]
 801557c:	3501      	adds	r5, #1
 801557e:	e7e9      	b.n	8015554 <_strtol_l.isra.0+0x70>
 8015580:	f002 f960 	bl	8017844 <__errno>
 8015584:	2316      	movs	r3, #22
 8015586:	6003      	str	r3, [r0, #0]
 8015588:	2000      	movs	r0, #0
 801558a:	b007      	add	sp, #28
 801558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801558e:	2c2b      	cmp	r4, #43	; 0x2b
 8015590:	d1c5      	bne.n	801551e <_strtol_l.isra.0+0x3a>
 8015592:	782c      	ldrb	r4, [r5, #0]
 8015594:	1c9d      	adds	r5, r3, #2
 8015596:	e7c2      	b.n	801551e <_strtol_l.isra.0+0x3a>
 8015598:	0021      	movs	r1, r4
 801559a:	3941      	subs	r1, #65	; 0x41
 801559c:	2919      	cmp	r1, #25
 801559e:	d801      	bhi.n	80155a4 <_strtol_l.isra.0+0xc0>
 80155a0:	3c37      	subs	r4, #55	; 0x37
 80155a2:	e7dc      	b.n	801555e <_strtol_l.isra.0+0x7a>
 80155a4:	0021      	movs	r1, r4
 80155a6:	3961      	subs	r1, #97	; 0x61
 80155a8:	2919      	cmp	r1, #25
 80155aa:	d803      	bhi.n	80155b4 <_strtol_l.isra.0+0xd0>
 80155ac:	3c57      	subs	r4, #87	; 0x57
 80155ae:	e7d6      	b.n	801555e <_strtol_l.isra.0+0x7a>
 80155b0:	0013      	movs	r3, r2
 80155b2:	e7e2      	b.n	801557a <_strtol_l.isra.0+0x96>
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	da09      	bge.n	80155cc <_strtol_l.isra.0+0xe8>
 80155b8:	2322      	movs	r3, #34	; 0x22
 80155ba:	9a05      	ldr	r2, [sp, #20]
 80155bc:	9803      	ldr	r0, [sp, #12]
 80155be:	6013      	str	r3, [r2, #0]
 80155c0:	9b02      	ldr	r3, [sp, #8]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d0e1      	beq.n	801558a <_strtol_l.isra.0+0xa6>
 80155c6:	1e6b      	subs	r3, r5, #1
 80155c8:	9301      	str	r3, [sp, #4]
 80155ca:	e007      	b.n	80155dc <_strtol_l.isra.0+0xf8>
 80155cc:	2f00      	cmp	r7, #0
 80155ce:	d000      	beq.n	80155d2 <_strtol_l.isra.0+0xee>
 80155d0:	4240      	negs	r0, r0
 80155d2:	9a02      	ldr	r2, [sp, #8]
 80155d4:	2a00      	cmp	r2, #0
 80155d6:	d0d8      	beq.n	801558a <_strtol_l.isra.0+0xa6>
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d1f4      	bne.n	80155c6 <_strtol_l.isra.0+0xe2>
 80155dc:	9b02      	ldr	r3, [sp, #8]
 80155de:	9a01      	ldr	r2, [sp, #4]
 80155e0:	601a      	str	r2, [r3, #0]
 80155e2:	e7d2      	b.n	801558a <_strtol_l.isra.0+0xa6>
 80155e4:	2430      	movs	r4, #48	; 0x30
 80155e6:	2e00      	cmp	r6, #0
 80155e8:	d1a7      	bne.n	801553a <_strtol_l.isra.0+0x56>
 80155ea:	3608      	adds	r6, #8
 80155ec:	e7a5      	b.n	801553a <_strtol_l.isra.0+0x56>
 80155ee:	2c30      	cmp	r4, #48	; 0x30
 80155f0:	d09b      	beq.n	801552a <_strtol_l.isra.0+0x46>
 80155f2:	260a      	movs	r6, #10
 80155f4:	e7a1      	b.n	801553a <_strtol_l.isra.0+0x56>
 80155f6:	46c0      	nop			; (mov r8, r8)
 80155f8:	0801d895 	.word	0x0801d895
 80155fc:	7fffffff 	.word	0x7fffffff

08015600 <strtol>:
 8015600:	b510      	push	{r4, lr}
 8015602:	0013      	movs	r3, r2
 8015604:	000a      	movs	r2, r1
 8015606:	0001      	movs	r1, r0
 8015608:	4802      	ldr	r0, [pc, #8]	; (8015614 <strtol+0x14>)
 801560a:	6800      	ldr	r0, [r0, #0]
 801560c:	f7ff ff6a 	bl	80154e4 <_strtol_l.isra.0>
 8015610:	bd10      	pop	{r4, pc}
 8015612:	46c0      	nop			; (mov r8, r8)
 8015614:	200000d0 	.word	0x200000d0

08015618 <_svfprintf_r>:
 8015618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801561a:	b0d9      	sub	sp, #356	; 0x164
 801561c:	001c      	movs	r4, r3
 801561e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015620:	9208      	str	r2, [sp, #32]
 8015622:	900a      	str	r0, [sp, #40]	; 0x28
 8015624:	f002 fda8 	bl	8018178 <_localeconv_r>
 8015628:	6803      	ldr	r3, [r0, #0]
 801562a:	0018      	movs	r0, r3
 801562c:	931c      	str	r3, [sp, #112]	; 0x70
 801562e:	f7ea fd73 	bl	8000118 <strlen>
 8015632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015634:	9016      	str	r0, [sp, #88]	; 0x58
 8015636:	899b      	ldrh	r3, [r3, #12]
 8015638:	061b      	lsls	r3, r3, #24
 801563a:	d518      	bpl.n	801566e <_svfprintf_r+0x56>
 801563c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801563e:	691b      	ldr	r3, [r3, #16]
 8015640:	9309      	str	r3, [sp, #36]	; 0x24
 8015642:	2b00      	cmp	r3, #0
 8015644:	d113      	bne.n	801566e <_svfprintf_r+0x56>
 8015646:	2140      	movs	r1, #64	; 0x40
 8015648:	980a      	ldr	r0, [sp, #40]	; 0x28
 801564a:	f7fe fc3f 	bl	8013ecc <_malloc_r>
 801564e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015650:	6018      	str	r0, [r3, #0]
 8015652:	6118      	str	r0, [r3, #16]
 8015654:	2800      	cmp	r0, #0
 8015656:	d107      	bne.n	8015668 <_svfprintf_r+0x50>
 8015658:	230c      	movs	r3, #12
 801565a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801565c:	6013      	str	r3, [r2, #0]
 801565e:	3b0d      	subs	r3, #13
 8015660:	9317      	str	r3, [sp, #92]	; 0x5c
 8015662:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015664:	b059      	add	sp, #356	; 0x164
 8015666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015668:	2340      	movs	r3, #64	; 0x40
 801566a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801566c:	6153      	str	r3, [r2, #20]
 801566e:	2300      	movs	r3, #0
 8015670:	2200      	movs	r2, #0
 8015672:	932e      	str	r3, [sp, #184]	; 0xb8
 8015674:	932d      	str	r3, [sp, #180]	; 0xb4
 8015676:	930d      	str	r3, [sp, #52]	; 0x34
 8015678:	2300      	movs	r3, #0
 801567a:	9214      	str	r2, [sp, #80]	; 0x50
 801567c:	9315      	str	r3, [sp, #84]	; 0x54
 801567e:	2300      	movs	r3, #0
 8015680:	af2f      	add	r7, sp, #188	; 0xbc
 8015682:	972c      	str	r7, [sp, #176]	; 0xb0
 8015684:	931f      	str	r3, [sp, #124]	; 0x7c
 8015686:	931e      	str	r3, [sp, #120]	; 0x78
 8015688:	9312      	str	r3, [sp, #72]	; 0x48
 801568a:	931b      	str	r3, [sp, #108]	; 0x6c
 801568c:	931d      	str	r3, [sp, #116]	; 0x74
 801568e:	9317      	str	r3, [sp, #92]	; 0x5c
 8015690:	9d08      	ldr	r5, [sp, #32]
 8015692:	782b      	ldrb	r3, [r5, #0]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d002      	beq.n	801569e <_svfprintf_r+0x86>
 8015698:	2b25      	cmp	r3, #37	; 0x25
 801569a:	d000      	beq.n	801569e <_svfprintf_r+0x86>
 801569c:	e092      	b.n	80157c4 <_svfprintf_r+0x1ac>
 801569e:	9b08      	ldr	r3, [sp, #32]
 80156a0:	1aee      	subs	r6, r5, r3
 80156a2:	429d      	cmp	r5, r3
 80156a4:	d017      	beq.n	80156d6 <_svfprintf_r+0xbe>
 80156a6:	603b      	str	r3, [r7, #0]
 80156a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80156aa:	607e      	str	r6, [r7, #4]
 80156ac:	199b      	adds	r3, r3, r6
 80156ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80156b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156b2:	3708      	adds	r7, #8
 80156b4:	9309      	str	r3, [sp, #36]	; 0x24
 80156b6:	3301      	adds	r3, #1
 80156b8:	932d      	str	r3, [sp, #180]	; 0xb4
 80156ba:	2b07      	cmp	r3, #7
 80156bc:	dd08      	ble.n	80156d0 <_svfprintf_r+0xb8>
 80156be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80156c4:	f003 fa42 	bl	8018b4c <__ssprint_r>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	d000      	beq.n	80156ce <_svfprintf_r+0xb6>
 80156cc:	e2aa      	b.n	8015c24 <_svfprintf_r+0x60c>
 80156ce:	af2f      	add	r7, sp, #188	; 0xbc
 80156d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80156d2:	199b      	adds	r3, r3, r6
 80156d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80156d6:	782b      	ldrb	r3, [r5, #0]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d101      	bne.n	80156e0 <_svfprintf_r+0xc8>
 80156dc:	f001 f9d2 	bl	8016a84 <_svfprintf_r+0x146c>
 80156e0:	221b      	movs	r2, #27
 80156e2:	2300      	movs	r3, #0
 80156e4:	a91e      	add	r1, sp, #120	; 0x78
 80156e6:	1852      	adds	r2, r2, r1
 80156e8:	7013      	strb	r3, [r2, #0]
 80156ea:	2201      	movs	r2, #1
 80156ec:	001e      	movs	r6, r3
 80156ee:	4252      	negs	r2, r2
 80156f0:	3501      	adds	r5, #1
 80156f2:	9209      	str	r2, [sp, #36]	; 0x24
 80156f4:	9318      	str	r3, [sp, #96]	; 0x60
 80156f6:	1c6b      	adds	r3, r5, #1
 80156f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80156fa:	782b      	ldrb	r3, [r5, #0]
 80156fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80156fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015700:	3820      	subs	r0, #32
 8015702:	285a      	cmp	r0, #90	; 0x5a
 8015704:	d901      	bls.n	801570a <_svfprintf_r+0xf2>
 8015706:	f000 fe2e 	bl	8016366 <_svfprintf_r+0xd4e>
 801570a:	f7ea fd17 	bl	800013c <__gnu_thumb1_case_uhi>
 801570e:	0078      	.short	0x0078
 8015710:	062c062c 	.word	0x062c062c
 8015714:	062c0082 	.word	0x062c0082
 8015718:	062c062c 	.word	0x062c062c
 801571c:	062c005d 	.word	0x062c005d
 8015720:	0084062c 	.word	0x0084062c
 8015724:	062c008c 	.word	0x062c008c
 8015728:	0091008a 	.word	0x0091008a
 801572c:	00b2062c 	.word	0x00b2062c
 8015730:	00b400b4 	.word	0x00b400b4
 8015734:	00b400b4 	.word	0x00b400b4
 8015738:	00b400b4 	.word	0x00b400b4
 801573c:	00b400b4 	.word	0x00b400b4
 8015740:	062c00b4 	.word	0x062c00b4
 8015744:	062c062c 	.word	0x062c062c
 8015748:	062c062c 	.word	0x062c062c
 801574c:	062c062c 	.word	0x062c062c
 8015750:	062c0216 	.word	0x062c0216
 8015754:	01cf00e0 	.word	0x01cf00e0
 8015758:	02160216 	.word	0x02160216
 801575c:	062c0216 	.word	0x062c0216
 8015760:	062c062c 	.word	0x062c062c
 8015764:	00c7062c 	.word	0x00c7062c
 8015768:	062c062c 	.word	0x062c062c
 801576c:	062c04d6 	.word	0x062c04d6
 8015770:	062c062c 	.word	0x062c062c
 8015774:	062c051d 	.word	0x062c051d
 8015778:	062c053d 	.word	0x062c053d
 801577c:	056e062c 	.word	0x056e062c
 8015780:	062c062c 	.word	0x062c062c
 8015784:	062c062c 	.word	0x062c062c
 8015788:	062c062c 	.word	0x062c062c
 801578c:	062c062c 	.word	0x062c062c
 8015790:	062c0216 	.word	0x062c0216
 8015794:	01d100e0 	.word	0x01d100e0
 8015798:	02160216 	.word	0x02160216
 801579c:	00c90216 	.word	0x00c90216
 80157a0:	00dc01d1 	.word	0x00dc01d1
 80157a4:	00d5062c 	.word	0x00d5062c
 80157a8:	04b9062c 	.word	0x04b9062c
 80157ac:	050d04d8 	.word	0x050d04d8
 80157b0:	062c00dc 	.word	0x062c00dc
 80157b4:	0080051d 	.word	0x0080051d
 80157b8:	062c053f 	.word	0x062c053f
 80157bc:	058e062c 	.word	0x058e062c
 80157c0:	0080062c 	.word	0x0080062c
 80157c4:	3501      	adds	r5, #1
 80157c6:	e764      	b.n	8015692 <_svfprintf_r+0x7a>
 80157c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157ca:	f002 fcd5 	bl	8018178 <_localeconv_r>
 80157ce:	6843      	ldr	r3, [r0, #4]
 80157d0:	0018      	movs	r0, r3
 80157d2:	931d      	str	r3, [sp, #116]	; 0x74
 80157d4:	f7ea fca0 	bl	8000118 <strlen>
 80157d8:	901b      	str	r0, [sp, #108]	; 0x6c
 80157da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157dc:	f002 fccc 	bl	8018178 <_localeconv_r>
 80157e0:	6883      	ldr	r3, [r0, #8]
 80157e2:	9312      	str	r3, [sp, #72]	; 0x48
 80157e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d011      	beq.n	801580e <_svfprintf_r+0x1f6>
 80157ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d00e      	beq.n	801580e <_svfprintf_r+0x1f6>
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d00b      	beq.n	801580e <_svfprintf_r+0x1f6>
 80157f6:	2380      	movs	r3, #128	; 0x80
 80157f8:	00db      	lsls	r3, r3, #3
 80157fa:	431e      	orrs	r6, r3
 80157fc:	e007      	b.n	801580e <_svfprintf_r+0x1f6>
 80157fe:	231b      	movs	r3, #27
 8015800:	aa1e      	add	r2, sp, #120	; 0x78
 8015802:	189b      	adds	r3, r3, r2
 8015804:	781a      	ldrb	r2, [r3, #0]
 8015806:	2a00      	cmp	r2, #0
 8015808:	d101      	bne.n	801580e <_svfprintf_r+0x1f6>
 801580a:	3220      	adds	r2, #32
 801580c:	701a      	strb	r2, [r3, #0]
 801580e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015810:	e771      	b.n	80156f6 <_svfprintf_r+0xde>
 8015812:	2301      	movs	r3, #1
 8015814:	e7f1      	b.n	80157fa <_svfprintf_r+0x1e2>
 8015816:	cc08      	ldmia	r4!, {r3}
 8015818:	9318      	str	r3, [sp, #96]	; 0x60
 801581a:	2b00      	cmp	r3, #0
 801581c:	daf7      	bge.n	801580e <_svfprintf_r+0x1f6>
 801581e:	425b      	negs	r3, r3
 8015820:	9318      	str	r3, [sp, #96]	; 0x60
 8015822:	2304      	movs	r3, #4
 8015824:	e7e9      	b.n	80157fa <_svfprintf_r+0x1e2>
 8015826:	231b      	movs	r3, #27
 8015828:	aa1e      	add	r2, sp, #120	; 0x78
 801582a:	189b      	adds	r3, r3, r2
 801582c:	222b      	movs	r2, #43	; 0x2b
 801582e:	e7ed      	b.n	801580c <_svfprintf_r+0x1f4>
 8015830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015832:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015834:	7812      	ldrb	r2, [r2, #0]
 8015836:	3301      	adds	r3, #1
 8015838:	920f      	str	r2, [sp, #60]	; 0x3c
 801583a:	2a2a      	cmp	r2, #42	; 0x2a
 801583c:	d010      	beq.n	8015860 <_svfprintf_r+0x248>
 801583e:	2200      	movs	r2, #0
 8015840:	9209      	str	r2, [sp, #36]	; 0x24
 8015842:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015844:	9313      	str	r3, [sp, #76]	; 0x4c
 8015846:	3a30      	subs	r2, #48	; 0x30
 8015848:	2a09      	cmp	r2, #9
 801584a:	d900      	bls.n	801584e <_svfprintf_r+0x236>
 801584c:	e757      	b.n	80156fe <_svfprintf_r+0xe6>
 801584e:	210a      	movs	r1, #10
 8015850:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015852:	4348      	muls	r0, r1
 8015854:	1882      	adds	r2, r0, r2
 8015856:	9209      	str	r2, [sp, #36]	; 0x24
 8015858:	781a      	ldrb	r2, [r3, #0]
 801585a:	3301      	adds	r3, #1
 801585c:	920f      	str	r2, [sp, #60]	; 0x3c
 801585e:	e7f0      	b.n	8015842 <_svfprintf_r+0x22a>
 8015860:	cc04      	ldmia	r4!, {r2}
 8015862:	9209      	str	r2, [sp, #36]	; 0x24
 8015864:	2a00      	cmp	r2, #0
 8015866:	da02      	bge.n	801586e <_svfprintf_r+0x256>
 8015868:	2201      	movs	r2, #1
 801586a:	4252      	negs	r2, r2
 801586c:	9209      	str	r2, [sp, #36]	; 0x24
 801586e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015870:	e7cd      	b.n	801580e <_svfprintf_r+0x1f6>
 8015872:	2380      	movs	r3, #128	; 0x80
 8015874:	e7c1      	b.n	80157fa <_svfprintf_r+0x1e2>
 8015876:	2200      	movs	r2, #0
 8015878:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801587a:	9218      	str	r2, [sp, #96]	; 0x60
 801587c:	210a      	movs	r1, #10
 801587e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015880:	434a      	muls	r2, r1
 8015882:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015884:	3930      	subs	r1, #48	; 0x30
 8015886:	188a      	adds	r2, r1, r2
 8015888:	9218      	str	r2, [sp, #96]	; 0x60
 801588a:	001a      	movs	r2, r3
 801588c:	7812      	ldrb	r2, [r2, #0]
 801588e:	3301      	adds	r3, #1
 8015890:	920f      	str	r2, [sp, #60]	; 0x3c
 8015892:	3a30      	subs	r2, #48	; 0x30
 8015894:	9313      	str	r3, [sp, #76]	; 0x4c
 8015896:	2a09      	cmp	r2, #9
 8015898:	d9f0      	bls.n	801587c <_svfprintf_r+0x264>
 801589a:	e730      	b.n	80156fe <_svfprintf_r+0xe6>
 801589c:	2308      	movs	r3, #8
 801589e:	e7ac      	b.n	80157fa <_svfprintf_r+0x1e2>
 80158a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	2b68      	cmp	r3, #104	; 0x68
 80158a6:	d105      	bne.n	80158b4 <_svfprintf_r+0x29c>
 80158a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80158aa:	3301      	adds	r3, #1
 80158ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80158ae:	2380      	movs	r3, #128	; 0x80
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	e7a2      	b.n	80157fa <_svfprintf_r+0x1e2>
 80158b4:	2340      	movs	r3, #64	; 0x40
 80158b6:	e7a0      	b.n	80157fa <_svfprintf_r+0x1e2>
 80158b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80158ba:	781b      	ldrb	r3, [r3, #0]
 80158bc:	2b6c      	cmp	r3, #108	; 0x6c
 80158be:	d104      	bne.n	80158ca <_svfprintf_r+0x2b2>
 80158c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80158c2:	3301      	adds	r3, #1
 80158c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80158c6:	2320      	movs	r3, #32
 80158c8:	e797      	b.n	80157fa <_svfprintf_r+0x1e2>
 80158ca:	2310      	movs	r3, #16
 80158cc:	e795      	b.n	80157fa <_svfprintf_r+0x1e2>
 80158ce:	0022      	movs	r2, r4
 80158d0:	ca08      	ldmia	r2!, {r3}
 80158d2:	a83f      	add	r0, sp, #252	; 0xfc
 80158d4:	920e      	str	r2, [sp, #56]	; 0x38
 80158d6:	221b      	movs	r2, #27
 80158d8:	7003      	strb	r3, [r0, #0]
 80158da:	2300      	movs	r3, #0
 80158dc:	a91e      	add	r1, sp, #120	; 0x78
 80158de:	1852      	adds	r2, r2, r1
 80158e0:	7013      	strb	r3, [r2, #0]
 80158e2:	930c      	str	r3, [sp, #48]	; 0x30
 80158e4:	3301      	adds	r3, #1
 80158e6:	9309      	str	r3, [sp, #36]	; 0x24
 80158e8:	2300      	movs	r3, #0
 80158ea:	001d      	movs	r5, r3
 80158ec:	9319      	str	r3, [sp, #100]	; 0x64
 80158ee:	9310      	str	r3, [sp, #64]	; 0x40
 80158f0:	9311      	str	r3, [sp, #68]	; 0x44
 80158f2:	9008      	str	r0, [sp, #32]
 80158f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80158f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158f8:	931a      	str	r3, [sp, #104]	; 0x68
 80158fa:	4293      	cmp	r3, r2
 80158fc:	da00      	bge.n	8015900 <_svfprintf_r+0x2e8>
 80158fe:	921a      	str	r2, [sp, #104]	; 0x68
 8015900:	231b      	movs	r3, #27
 8015902:	aa1e      	add	r2, sp, #120	; 0x78
 8015904:	189b      	adds	r3, r3, r2
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	1e5a      	subs	r2, r3, #1
 801590a:	4193      	sbcs	r3, r2
 801590c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801590e:	18d3      	adds	r3, r2, r3
 8015910:	931a      	str	r3, [sp, #104]	; 0x68
 8015912:	0032      	movs	r2, r6
 8015914:	2302      	movs	r3, #2
 8015916:	401a      	ands	r2, r3
 8015918:	9220      	str	r2, [sp, #128]	; 0x80
 801591a:	421e      	tst	r6, r3
 801591c:	d002      	beq.n	8015924 <_svfprintf_r+0x30c>
 801591e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015920:	3302      	adds	r3, #2
 8015922:	931a      	str	r3, [sp, #104]	; 0x68
 8015924:	2384      	movs	r3, #132	; 0x84
 8015926:	0032      	movs	r2, r6
 8015928:	401a      	ands	r2, r3
 801592a:	9221      	str	r2, [sp, #132]	; 0x84
 801592c:	421e      	tst	r6, r3
 801592e:	d121      	bne.n	8015974 <_svfprintf_r+0x35c>
 8015930:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015932:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015934:	1a9c      	subs	r4, r3, r2
 8015936:	2c00      	cmp	r4, #0
 8015938:	dd1c      	ble.n	8015974 <_svfprintf_r+0x35c>
 801593a:	0039      	movs	r1, r7
 801593c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801593e:	48c5      	ldr	r0, [pc, #788]	; (8015c54 <_svfprintf_r+0x63c>)
 8015940:	9322      	str	r3, [sp, #136]	; 0x88
 8015942:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015944:	3301      	adds	r3, #1
 8015946:	3108      	adds	r1, #8
 8015948:	6038      	str	r0, [r7, #0]
 801594a:	2c10      	cmp	r4, #16
 801594c:	dd01      	ble.n	8015952 <_svfprintf_r+0x33a>
 801594e:	f000 fd1d 	bl	801638c <_svfprintf_r+0xd74>
 8015952:	607c      	str	r4, [r7, #4]
 8015954:	18a4      	adds	r4, r4, r2
 8015956:	000f      	movs	r7, r1
 8015958:	942e      	str	r4, [sp, #184]	; 0xb8
 801595a:	932d      	str	r3, [sp, #180]	; 0xb4
 801595c:	2b07      	cmp	r3, #7
 801595e:	dd09      	ble.n	8015974 <_svfprintf_r+0x35c>
 8015960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015962:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015964:	aa2c      	add	r2, sp, #176	; 0xb0
 8015966:	f003 f8f1 	bl	8018b4c <__ssprint_r>
 801596a:	2800      	cmp	r0, #0
 801596c:	d001      	beq.n	8015972 <_svfprintf_r+0x35a>
 801596e:	f001 f868 	bl	8016a42 <_svfprintf_r+0x142a>
 8015972:	af2f      	add	r7, sp, #188	; 0xbc
 8015974:	231b      	movs	r3, #27
 8015976:	aa1e      	add	r2, sp, #120	; 0x78
 8015978:	189b      	adds	r3, r3, r2
 801597a:	781a      	ldrb	r2, [r3, #0]
 801597c:	2a00      	cmp	r2, #0
 801597e:	d017      	beq.n	80159b0 <_svfprintf_r+0x398>
 8015980:	603b      	str	r3, [r7, #0]
 8015982:	2301      	movs	r3, #1
 8015984:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015986:	607b      	str	r3, [r7, #4]
 8015988:	0013      	movs	r3, r2
 801598a:	3301      	adds	r3, #1
 801598c:	932e      	str	r3, [sp, #184]	; 0xb8
 801598e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015990:	3708      	adds	r7, #8
 8015992:	9322      	str	r3, [sp, #136]	; 0x88
 8015994:	3301      	adds	r3, #1
 8015996:	932d      	str	r3, [sp, #180]	; 0xb4
 8015998:	2b07      	cmp	r3, #7
 801599a:	dd09      	ble.n	80159b0 <_svfprintf_r+0x398>
 801599c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801599e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159a0:	aa2c      	add	r2, sp, #176	; 0xb0
 80159a2:	f003 f8d3 	bl	8018b4c <__ssprint_r>
 80159a6:	2800      	cmp	r0, #0
 80159a8:	d001      	beq.n	80159ae <_svfprintf_r+0x396>
 80159aa:	f001 f84a 	bl	8016a42 <_svfprintf_r+0x142a>
 80159ae:	af2f      	add	r7, sp, #188	; 0xbc
 80159b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d019      	beq.n	80159ea <_svfprintf_r+0x3d2>
 80159b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80159b8:	9320      	str	r3, [sp, #128]	; 0x80
 80159ba:	ab25      	add	r3, sp, #148	; 0x94
 80159bc:	603b      	str	r3, [r7, #0]
 80159be:	2302      	movs	r3, #2
 80159c0:	607b      	str	r3, [r7, #4]
 80159c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80159c4:	3708      	adds	r7, #8
 80159c6:	3302      	adds	r3, #2
 80159c8:	932e      	str	r3, [sp, #184]	; 0xb8
 80159ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80159cc:	9320      	str	r3, [sp, #128]	; 0x80
 80159ce:	3301      	adds	r3, #1
 80159d0:	932d      	str	r3, [sp, #180]	; 0xb4
 80159d2:	2b07      	cmp	r3, #7
 80159d4:	dd09      	ble.n	80159ea <_svfprintf_r+0x3d2>
 80159d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80159d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159da:	aa2c      	add	r2, sp, #176	; 0xb0
 80159dc:	f003 f8b6 	bl	8018b4c <__ssprint_r>
 80159e0:	2800      	cmp	r0, #0
 80159e2:	d001      	beq.n	80159e8 <_svfprintf_r+0x3d0>
 80159e4:	f001 f82d 	bl	8016a42 <_svfprintf_r+0x142a>
 80159e8:	af2f      	add	r7, sp, #188	; 0xbc
 80159ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159ec:	2b80      	cmp	r3, #128	; 0x80
 80159ee:	d121      	bne.n	8015a34 <_svfprintf_r+0x41c>
 80159f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80159f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80159f4:	1a9c      	subs	r4, r3, r2
 80159f6:	2c00      	cmp	r4, #0
 80159f8:	dd1c      	ble.n	8015a34 <_svfprintf_r+0x41c>
 80159fa:	0039      	movs	r1, r7
 80159fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80159fe:	4896      	ldr	r0, [pc, #600]	; (8015c58 <_svfprintf_r+0x640>)
 8015a00:	9320      	str	r3, [sp, #128]	; 0x80
 8015a02:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015a04:	3301      	adds	r3, #1
 8015a06:	3108      	adds	r1, #8
 8015a08:	6038      	str	r0, [r7, #0]
 8015a0a:	2c10      	cmp	r4, #16
 8015a0c:	dd01      	ble.n	8015a12 <_svfprintf_r+0x3fa>
 8015a0e:	f000 fcd1 	bl	80163b4 <_svfprintf_r+0xd9c>
 8015a12:	607c      	str	r4, [r7, #4]
 8015a14:	18a4      	adds	r4, r4, r2
 8015a16:	000f      	movs	r7, r1
 8015a18:	942e      	str	r4, [sp, #184]	; 0xb8
 8015a1a:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a1c:	2b07      	cmp	r3, #7
 8015a1e:	dd09      	ble.n	8015a34 <_svfprintf_r+0x41c>
 8015a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a24:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a26:	f003 f891 	bl	8018b4c <__ssprint_r>
 8015a2a:	2800      	cmp	r0, #0
 8015a2c:	d001      	beq.n	8015a32 <_svfprintf_r+0x41a>
 8015a2e:	f001 f808 	bl	8016a42 <_svfprintf_r+0x142a>
 8015a32:	af2f      	add	r7, sp, #188	; 0xbc
 8015a34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a38:	1a9c      	subs	r4, r3, r2
 8015a3a:	2c00      	cmp	r4, #0
 8015a3c:	dd1c      	ble.n	8015a78 <_svfprintf_r+0x460>
 8015a3e:	0039      	movs	r1, r7
 8015a40:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a42:	4885      	ldr	r0, [pc, #532]	; (8015c58 <_svfprintf_r+0x640>)
 8015a44:	9319      	str	r3, [sp, #100]	; 0x64
 8015a46:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015a48:	3301      	adds	r3, #1
 8015a4a:	3108      	adds	r1, #8
 8015a4c:	6038      	str	r0, [r7, #0]
 8015a4e:	2c10      	cmp	r4, #16
 8015a50:	dd01      	ble.n	8015a56 <_svfprintf_r+0x43e>
 8015a52:	f000 fcc3 	bl	80163dc <_svfprintf_r+0xdc4>
 8015a56:	1912      	adds	r2, r2, r4
 8015a58:	607c      	str	r4, [r7, #4]
 8015a5a:	922e      	str	r2, [sp, #184]	; 0xb8
 8015a5c:	000f      	movs	r7, r1
 8015a5e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a60:	2b07      	cmp	r3, #7
 8015a62:	dd09      	ble.n	8015a78 <_svfprintf_r+0x460>
 8015a64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a66:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a68:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a6a:	f003 f86f 	bl	8018b4c <__ssprint_r>
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d001      	beq.n	8015a76 <_svfprintf_r+0x45e>
 8015a72:	f000 ffe6 	bl	8016a42 <_svfprintf_r+0x142a>
 8015a76:	af2f      	add	r7, sp, #188	; 0xbc
 8015a78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015a7a:	9319      	str	r3, [sp, #100]	; 0x64
 8015a7c:	05f3      	lsls	r3, r6, #23
 8015a7e:	d501      	bpl.n	8015a84 <_svfprintf_r+0x46c>
 8015a80:	f000 fcc8 	bl	8016414 <_svfprintf_r+0xdfc>
 8015a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a86:	9b08      	ldr	r3, [sp, #32]
 8015a88:	4694      	mov	ip, r2
 8015a8a:	603b      	str	r3, [r7, #0]
 8015a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a8e:	607b      	str	r3, [r7, #4]
 8015a90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a92:	4463      	add	r3, ip
 8015a94:	932e      	str	r3, [sp, #184]	; 0xb8
 8015a96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a98:	9308      	str	r3, [sp, #32]
 8015a9a:	3301      	adds	r3, #1
 8015a9c:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a9e:	2b07      	cmp	r3, #7
 8015aa0:	dd01      	ble.n	8015aa6 <_svfprintf_r+0x48e>
 8015aa2:	f000 fda8 	bl	80165f6 <_svfprintf_r+0xfde>
 8015aa6:	3708      	adds	r7, #8
 8015aa8:	f000 fcfb 	bl	80164a2 <_svfprintf_r+0xe8a>
 8015aac:	2310      	movs	r3, #16
 8015aae:	431e      	orrs	r6, r3
 8015ab0:	06b3      	lsls	r3, r6, #26
 8015ab2:	d530      	bpl.n	8015b16 <_svfprintf_r+0x4fe>
 8015ab4:	2307      	movs	r3, #7
 8015ab6:	3407      	adds	r4, #7
 8015ab8:	439c      	bics	r4, r3
 8015aba:	0022      	movs	r2, r4
 8015abc:	ca18      	ldmia	r2!, {r3, r4}
 8015abe:	9306      	str	r3, [sp, #24]
 8015ac0:	9407      	str	r4, [sp, #28]
 8015ac2:	920e      	str	r2, [sp, #56]	; 0x38
 8015ac4:	9a07      	ldr	r2, [sp, #28]
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	2a00      	cmp	r2, #0
 8015aca:	da0b      	bge.n	8015ae4 <_svfprintf_r+0x4cc>
 8015acc:	9c06      	ldr	r4, [sp, #24]
 8015ace:	9d07      	ldr	r5, [sp, #28]
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	4261      	negs	r1, r4
 8015ad4:	41aa      	sbcs	r2, r5
 8015ad6:	9106      	str	r1, [sp, #24]
 8015ad8:	9207      	str	r2, [sp, #28]
 8015ada:	221b      	movs	r2, #27
 8015adc:	a91e      	add	r1, sp, #120	; 0x78
 8015ade:	1852      	adds	r2, r2, r1
 8015ae0:	212d      	movs	r1, #45	; 0x2d
 8015ae2:	7011      	strb	r1, [r2, #0]
 8015ae4:	9907      	ldr	r1, [sp, #28]
 8015ae6:	9a06      	ldr	r2, [sp, #24]
 8015ae8:	430a      	orrs	r2, r1
 8015aea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015aec:	3101      	adds	r1, #1
 8015aee:	d101      	bne.n	8015af4 <_svfprintf_r+0x4dc>
 8015af0:	f000 ffd5 	bl	8016a9e <_svfprintf_r+0x1486>
 8015af4:	2180      	movs	r1, #128	; 0x80
 8015af6:	0035      	movs	r5, r6
 8015af8:	438d      	bics	r5, r1
 8015afa:	2a00      	cmp	r2, #0
 8015afc:	d001      	beq.n	8015b02 <_svfprintf_r+0x4ea>
 8015afe:	f000 ffd3 	bl	8016aa8 <_svfprintf_r+0x1490>
 8015b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b04:	2a00      	cmp	r2, #0
 8015b06:	d101      	bne.n	8015b0c <_svfprintf_r+0x4f4>
 8015b08:	f000 fc20 	bl	801634c <_svfprintf_r+0xd34>
 8015b0c:	2b01      	cmp	r3, #1
 8015b0e:	d001      	beq.n	8015b14 <_svfprintf_r+0x4fc>
 8015b10:	f000 ffce 	bl	8016ab0 <_svfprintf_r+0x1498>
 8015b14:	e3b1      	b.n	801627a <_svfprintf_r+0xc62>
 8015b16:	1d23      	adds	r3, r4, #4
 8015b18:	930e      	str	r3, [sp, #56]	; 0x38
 8015b1a:	06f3      	lsls	r3, r6, #27
 8015b1c:	d504      	bpl.n	8015b28 <_svfprintf_r+0x510>
 8015b1e:	6823      	ldr	r3, [r4, #0]
 8015b20:	9306      	str	r3, [sp, #24]
 8015b22:	17db      	asrs	r3, r3, #31
 8015b24:	9307      	str	r3, [sp, #28]
 8015b26:	e7cd      	b.n	8015ac4 <_svfprintf_r+0x4ac>
 8015b28:	6823      	ldr	r3, [r4, #0]
 8015b2a:	0672      	lsls	r2, r6, #25
 8015b2c:	d501      	bpl.n	8015b32 <_svfprintf_r+0x51a>
 8015b2e:	b21b      	sxth	r3, r3
 8015b30:	e7f6      	b.n	8015b20 <_svfprintf_r+0x508>
 8015b32:	05b2      	lsls	r2, r6, #22
 8015b34:	d5f4      	bpl.n	8015b20 <_svfprintf_r+0x508>
 8015b36:	b25b      	sxtb	r3, r3
 8015b38:	e7f2      	b.n	8015b20 <_svfprintf_r+0x508>
 8015b3a:	2307      	movs	r3, #7
 8015b3c:	3407      	adds	r4, #7
 8015b3e:	439c      	bics	r4, r3
 8015b40:	0022      	movs	r2, r4
 8015b42:	ca18      	ldmia	r2!, {r3, r4}
 8015b44:	920e      	str	r2, [sp, #56]	; 0x38
 8015b46:	2201      	movs	r2, #1
 8015b48:	9314      	str	r3, [sp, #80]	; 0x50
 8015b4a:	9415      	str	r4, [sp, #84]	; 0x54
 8015b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b4e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015b50:	005c      	lsls	r4, r3, #1
 8015b52:	0864      	lsrs	r4, r4, #1
 8015b54:	0028      	movs	r0, r5
 8015b56:	0021      	movs	r1, r4
 8015b58:	4b40      	ldr	r3, [pc, #256]	; (8015c5c <_svfprintf_r+0x644>)
 8015b5a:	4252      	negs	r2, r2
 8015b5c:	f7ed fada 	bl	8003114 <__aeabi_dcmpun>
 8015b60:	2800      	cmp	r0, #0
 8015b62:	d126      	bne.n	8015bb2 <_svfprintf_r+0x59a>
 8015b64:	2201      	movs	r2, #1
 8015b66:	0028      	movs	r0, r5
 8015b68:	0021      	movs	r1, r4
 8015b6a:	4b3c      	ldr	r3, [pc, #240]	; (8015c5c <_svfprintf_r+0x644>)
 8015b6c:	4252      	negs	r2, r2
 8015b6e:	f7ea fc85 	bl	800047c <__aeabi_dcmple>
 8015b72:	2800      	cmp	r0, #0
 8015b74:	d11d      	bne.n	8015bb2 <_svfprintf_r+0x59a>
 8015b76:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015b78:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	f7ea fc73 	bl	8000468 <__aeabi_dcmplt>
 8015b82:	2800      	cmp	r0, #0
 8015b84:	d004      	beq.n	8015b90 <_svfprintf_r+0x578>
 8015b86:	231b      	movs	r3, #27
 8015b88:	aa1e      	add	r2, sp, #120	; 0x78
 8015b8a:	189b      	adds	r3, r3, r2
 8015b8c:	222d      	movs	r2, #45	; 0x2d
 8015b8e:	701a      	strb	r2, [r3, #0]
 8015b90:	4b33      	ldr	r3, [pc, #204]	; (8015c60 <_svfprintf_r+0x648>)
 8015b92:	9308      	str	r3, [sp, #32]
 8015b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b96:	2b47      	cmp	r3, #71	; 0x47
 8015b98:	dd01      	ble.n	8015b9e <_svfprintf_r+0x586>
 8015b9a:	4b32      	ldr	r3, [pc, #200]	; (8015c64 <_svfprintf_r+0x64c>)
 8015b9c:	9308      	str	r3, [sp, #32]
 8015b9e:	2380      	movs	r3, #128	; 0x80
 8015ba0:	439e      	bics	r6, r3
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	930c      	str	r3, [sp, #48]	; 0x30
 8015ba6:	3303      	adds	r3, #3
 8015ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8015baa:	2300      	movs	r3, #0
 8015bac:	9319      	str	r3, [sp, #100]	; 0x64
 8015bae:	f000 ffae 	bl	8016b0e <_svfprintf_r+0x14f6>
 8015bb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015bb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bb6:	0010      	movs	r0, r2
 8015bb8:	0019      	movs	r1, r3
 8015bba:	f7ed faab 	bl	8003114 <__aeabi_dcmpun>
 8015bbe:	2800      	cmp	r0, #0
 8015bc0:	d00e      	beq.n	8015be0 <_svfprintf_r+0x5c8>
 8015bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	da04      	bge.n	8015bd2 <_svfprintf_r+0x5ba>
 8015bc8:	231b      	movs	r3, #27
 8015bca:	aa1e      	add	r2, sp, #120	; 0x78
 8015bcc:	189b      	adds	r3, r3, r2
 8015bce:	222d      	movs	r2, #45	; 0x2d
 8015bd0:	701a      	strb	r2, [r3, #0]
 8015bd2:	4b25      	ldr	r3, [pc, #148]	; (8015c68 <_svfprintf_r+0x650>)
 8015bd4:	9308      	str	r3, [sp, #32]
 8015bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bd8:	2b47      	cmp	r3, #71	; 0x47
 8015bda:	dde0      	ble.n	8015b9e <_svfprintf_r+0x586>
 8015bdc:	4b23      	ldr	r3, [pc, #140]	; (8015c6c <_svfprintf_r+0x654>)
 8015bde:	e7dd      	b.n	8015b9c <_svfprintf_r+0x584>
 8015be0:	2320      	movs	r3, #32
 8015be2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015be4:	439a      	bics	r2, r3
 8015be6:	9210      	str	r2, [sp, #64]	; 0x40
 8015be8:	2a41      	cmp	r2, #65	; 0x41
 8015bea:	d123      	bne.n	8015c34 <_svfprintf_r+0x61c>
 8015bec:	2230      	movs	r2, #48	; 0x30
 8015bee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015bf0:	ab25      	add	r3, sp, #148	; 0x94
 8015bf2:	701a      	strb	r2, [r3, #0]
 8015bf4:	3248      	adds	r2, #72	; 0x48
 8015bf6:	2961      	cmp	r1, #97	; 0x61
 8015bf8:	d000      	beq.n	8015bfc <_svfprintf_r+0x5e4>
 8015bfa:	3a20      	subs	r2, #32
 8015bfc:	705a      	strb	r2, [r3, #1]
 8015bfe:	2302      	movs	r3, #2
 8015c00:	431e      	orrs	r6, r3
 8015c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c04:	2b63      	cmp	r3, #99	; 0x63
 8015c06:	dd33      	ble.n	8015c70 <_svfprintf_r+0x658>
 8015c08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c0a:	1c59      	adds	r1, r3, #1
 8015c0c:	f7fe f95e 	bl	8013ecc <_malloc_r>
 8015c10:	9008      	str	r0, [sp, #32]
 8015c12:	2800      	cmp	r0, #0
 8015c14:	d000      	beq.n	8015c18 <_svfprintf_r+0x600>
 8015c16:	e141      	b.n	8015e9c <_svfprintf_r+0x884>
 8015c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c1a:	899a      	ldrh	r2, [r3, #12]
 8015c1c:	2340      	movs	r3, #64	; 0x40
 8015c1e:	4313      	orrs	r3, r2
 8015c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015c22:	8193      	strh	r3, [r2, #12]
 8015c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c26:	899b      	ldrh	r3, [r3, #12]
 8015c28:	065b      	lsls	r3, r3, #25
 8015c2a:	d400      	bmi.n	8015c2e <_svfprintf_r+0x616>
 8015c2c:	e519      	b.n	8015662 <_svfprintf_r+0x4a>
 8015c2e:	2301      	movs	r3, #1
 8015c30:	425b      	negs	r3, r3
 8015c32:	e515      	b.n	8015660 <_svfprintf_r+0x48>
 8015c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c36:	900c      	str	r0, [sp, #48]	; 0x30
 8015c38:	3301      	adds	r3, #1
 8015c3a:	d100      	bne.n	8015c3e <_svfprintf_r+0x626>
 8015c3c:	e131      	b.n	8015ea2 <_svfprintf_r+0x88a>
 8015c3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c40:	2b47      	cmp	r3, #71	; 0x47
 8015c42:	d119      	bne.n	8015c78 <_svfprintf_r+0x660>
 8015c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d116      	bne.n	8015c78 <_svfprintf_r+0x660>
 8015c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8015c4c:	3301      	adds	r3, #1
 8015c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8015c50:	e012      	b.n	8015c78 <_svfprintf_r+0x660>
 8015c52:	46c0      	nop			; (mov r8, r8)
 8015c54:	0801da24 	.word	0x0801da24
 8015c58:	0801da34 	.word	0x0801da34
 8015c5c:	7fefffff 	.word	0x7fefffff
 8015c60:	0801d9f0 	.word	0x0801d9f0
 8015c64:	0801d9f4 	.word	0x0801d9f4
 8015c68:	0801d9f8 	.word	0x0801d9f8
 8015c6c:	0801d9fc 	.word	0x0801d9fc
 8015c70:	2300      	movs	r3, #0
 8015c72:	930c      	str	r3, [sp, #48]	; 0x30
 8015c74:	ab3f      	add	r3, sp, #252	; 0xfc
 8015c76:	9308      	str	r3, [sp, #32]
 8015c78:	2380      	movs	r3, #128	; 0x80
 8015c7a:	005b      	lsls	r3, r3, #1
 8015c7c:	4333      	orrs	r3, r6
 8015c7e:	9320      	str	r3, [sp, #128]	; 0x80
 8015c80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	db00      	blt.n	8015c8a <_svfprintf_r+0x672>
 8015c88:	e10d      	b.n	8015ea6 <_svfprintf_r+0x88e>
 8015c8a:	2280      	movs	r2, #128	; 0x80
 8015c8c:	0612      	lsls	r2, r2, #24
 8015c8e:	4694      	mov	ip, r2
 8015c90:	4463      	add	r3, ip
 8015c92:	930d      	str	r3, [sp, #52]	; 0x34
 8015c94:	232d      	movs	r3, #45	; 0x2d
 8015c96:	9322      	str	r3, [sp, #136]	; 0x88
 8015c98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c9a:	2b41      	cmp	r3, #65	; 0x41
 8015c9c:	d000      	beq.n	8015ca0 <_svfprintf_r+0x688>
 8015c9e:	e11b      	b.n	8015ed8 <_svfprintf_r+0x8c0>
 8015ca0:	0020      	movs	r0, r4
 8015ca2:	aa26      	add	r2, sp, #152	; 0x98
 8015ca4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015ca6:	f002 ff19 	bl	8018adc <frexp>
 8015caa:	23ff      	movs	r3, #255	; 0xff
 8015cac:	2200      	movs	r2, #0
 8015cae:	059b      	lsls	r3, r3, #22
 8015cb0:	f7ec fc32 	bl	8002518 <__aeabi_dmul>
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	0004      	movs	r4, r0
 8015cba:	000d      	movs	r5, r1
 8015cbc:	f7ea fbce 	bl	800045c <__aeabi_dcmpeq>
 8015cc0:	2800      	cmp	r0, #0
 8015cc2:	d001      	beq.n	8015cc8 <_svfprintf_r+0x6b0>
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	9326      	str	r3, [sp, #152]	; 0x98
 8015cc8:	4bc6      	ldr	r3, [pc, #792]	; (8015fe4 <_svfprintf_r+0x9cc>)
 8015cca:	9319      	str	r3, [sp, #100]	; 0x64
 8015ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cce:	2b61      	cmp	r3, #97	; 0x61
 8015cd0:	d001      	beq.n	8015cd6 <_svfprintf_r+0x6be>
 8015cd2:	4bc5      	ldr	r3, [pc, #788]	; (8015fe8 <_svfprintf_r+0x9d0>)
 8015cd4:	9319      	str	r3, [sp, #100]	; 0x64
 8015cd6:	9b08      	ldr	r3, [sp, #32]
 8015cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8015cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cdc:	3b01      	subs	r3, #1
 8015cde:	9311      	str	r3, [sp, #68]	; 0x44
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	4bc2      	ldr	r3, [pc, #776]	; (8015fec <_svfprintf_r+0x9d4>)
 8015ce4:	0020      	movs	r0, r4
 8015ce6:	0029      	movs	r1, r5
 8015ce8:	f7ec fc16 	bl	8002518 <__aeabi_dmul>
 8015cec:	000d      	movs	r5, r1
 8015cee:	0004      	movs	r4, r0
 8015cf0:	f7ed fa2e 	bl	8003150 <__aeabi_d2iz>
 8015cf4:	9021      	str	r0, [sp, #132]	; 0x84
 8015cf6:	f7ed fa61 	bl	80031bc <__aeabi_i2d>
 8015cfa:	0002      	movs	r2, r0
 8015cfc:	000b      	movs	r3, r1
 8015cfe:	0020      	movs	r0, r4
 8015d00:	0029      	movs	r1, r5
 8015d02:	f7ec fe75 	bl	80029f0 <__aeabi_dsub>
 8015d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d08:	000d      	movs	r5, r1
 8015d0a:	001a      	movs	r2, r3
 8015d0c:	3201      	adds	r2, #1
 8015d0e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8015d10:	920d      	str	r2, [sp, #52]	; 0x34
 8015d12:	9223      	str	r2, [sp, #140]	; 0x8c
 8015d14:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015d16:	0004      	movs	r4, r0
 8015d18:	5c52      	ldrb	r2, [r2, r1]
 8015d1a:	701a      	strb	r2, [r3, #0]
 8015d1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d1e:	931a      	str	r3, [sp, #104]	; 0x68
 8015d20:	3301      	adds	r3, #1
 8015d22:	d00a      	beq.n	8015d3a <_svfprintf_r+0x722>
 8015d24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d26:	2200      	movs	r2, #0
 8015d28:	3b01      	subs	r3, #1
 8015d2a:	9311      	str	r3, [sp, #68]	; 0x44
 8015d2c:	0020      	movs	r0, r4
 8015d2e:	2300      	movs	r3, #0
 8015d30:	0029      	movs	r1, r5
 8015d32:	f7ea fb93 	bl	800045c <__aeabi_dcmpeq>
 8015d36:	2800      	cmp	r0, #0
 8015d38:	d0d2      	beq.n	8015ce0 <_svfprintf_r+0x6c8>
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	0020      	movs	r0, r4
 8015d3e:	0029      	movs	r1, r5
 8015d40:	4bab      	ldr	r3, [pc, #684]	; (8015ff0 <_svfprintf_r+0x9d8>)
 8015d42:	f7ea fba5 	bl	8000490 <__aeabi_dcmpgt>
 8015d46:	2800      	cmp	r0, #0
 8015d48:	d10c      	bne.n	8015d64 <_svfprintf_r+0x74c>
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	0020      	movs	r0, r4
 8015d4e:	0029      	movs	r1, r5
 8015d50:	4ba7      	ldr	r3, [pc, #668]	; (8015ff0 <_svfprintf_r+0x9d8>)
 8015d52:	f7ea fb83 	bl	800045c <__aeabi_dcmpeq>
 8015d56:	2800      	cmp	r0, #0
 8015d58:	d100      	bne.n	8015d5c <_svfprintf_r+0x744>
 8015d5a:	e0b7      	b.n	8015ecc <_svfprintf_r+0x8b4>
 8015d5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d5e:	07db      	lsls	r3, r3, #31
 8015d60:	d400      	bmi.n	8015d64 <_svfprintf_r+0x74c>
 8015d62:	e0b3      	b.n	8015ecc <_svfprintf_r+0x8b4>
 8015d64:	2030      	movs	r0, #48	; 0x30
 8015d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d68:	932a      	str	r3, [sp, #168]	; 0xa8
 8015d6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d6c:	7bdb      	ldrb	r3, [r3, #15]
 8015d6e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8015d70:	3a01      	subs	r2, #1
 8015d72:	922a      	str	r2, [sp, #168]	; 0xa8
 8015d74:	7811      	ldrb	r1, [r2, #0]
 8015d76:	4299      	cmp	r1, r3
 8015d78:	d100      	bne.n	8015d7c <_svfprintf_r+0x764>
 8015d7a:	e097      	b.n	8015eac <_svfprintf_r+0x894>
 8015d7c:	1c4b      	adds	r3, r1, #1
 8015d7e:	b2db      	uxtb	r3, r3
 8015d80:	2939      	cmp	r1, #57	; 0x39
 8015d82:	d101      	bne.n	8015d88 <_svfprintf_r+0x770>
 8015d84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d86:	7a9b      	ldrb	r3, [r3, #10]
 8015d88:	7013      	strb	r3, [r2, #0]
 8015d8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015d8c:	9a08      	ldr	r2, [sp, #32]
 8015d8e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8015d90:	1a9b      	subs	r3, r3, r2
 8015d92:	930d      	str	r3, [sp, #52]	; 0x34
 8015d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d96:	2b47      	cmp	r3, #71	; 0x47
 8015d98:	d000      	beq.n	8015d9c <_svfprintf_r+0x784>
 8015d9a:	e0eb      	b.n	8015f74 <_svfprintf_r+0x95c>
 8015d9c:	1ceb      	adds	r3, r5, #3
 8015d9e:	db03      	blt.n	8015da8 <_svfprintf_r+0x790>
 8015da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015da2:	42ab      	cmp	r3, r5
 8015da4:	db00      	blt.n	8015da8 <_svfprintf_r+0x790>
 8015da6:	e113      	b.n	8015fd0 <_svfprintf_r+0x9b8>
 8015da8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015daa:	3b02      	subs	r3, #2
 8015dac:	930f      	str	r3, [sp, #60]	; 0x3c
 8015dae:	223c      	movs	r2, #60	; 0x3c
 8015db0:	466b      	mov	r3, sp
 8015db2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015db4:	189b      	adds	r3, r3, r2
 8015db6:	1e6c      	subs	r4, r5, #1
 8015db8:	3a1c      	subs	r2, #28
 8015dba:	2000      	movs	r0, #0
 8015dbc:	781b      	ldrb	r3, [r3, #0]
 8015dbe:	9426      	str	r4, [sp, #152]	; 0x98
 8015dc0:	4391      	bics	r1, r2
 8015dc2:	2941      	cmp	r1, #65	; 0x41
 8015dc4:	d102      	bne.n	8015dcc <_svfprintf_r+0x7b4>
 8015dc6:	330f      	adds	r3, #15
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	3001      	adds	r0, #1
 8015dcc:	a928      	add	r1, sp, #160	; 0xa0
 8015dce:	700b      	strb	r3, [r1, #0]
 8015dd0:	232b      	movs	r3, #43	; 0x2b
 8015dd2:	2c00      	cmp	r4, #0
 8015dd4:	da02      	bge.n	8015ddc <_svfprintf_r+0x7c4>
 8015dd6:	2401      	movs	r4, #1
 8015dd8:	3302      	adds	r3, #2
 8015dda:	1b64      	subs	r4, r4, r5
 8015ddc:	704b      	strb	r3, [r1, #1]
 8015dde:	2c09      	cmp	r4, #9
 8015de0:	dc00      	bgt.n	8015de4 <_svfprintf_r+0x7cc>
 8015de2:	e0e1      	b.n	8015fa8 <_svfprintf_r+0x990>
 8015de4:	2337      	movs	r3, #55	; 0x37
 8015de6:	250a      	movs	r5, #10
 8015de8:	aa1e      	add	r2, sp, #120	; 0x78
 8015dea:	189b      	adds	r3, r3, r2
 8015dec:	9310      	str	r3, [sp, #64]	; 0x40
 8015dee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015df0:	0020      	movs	r0, r4
 8015df2:	9309      	str	r3, [sp, #36]	; 0x24
 8015df4:	0029      	movs	r1, r5
 8015df6:	3b01      	subs	r3, #1
 8015df8:	9310      	str	r3, [sp, #64]	; 0x40
 8015dfa:	f7ea fb19 	bl	8000430 <__aeabi_idivmod>
 8015dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e00:	3130      	adds	r1, #48	; 0x30
 8015e02:	7019      	strb	r1, [r3, #0]
 8015e04:	0020      	movs	r0, r4
 8015e06:	0029      	movs	r1, r5
 8015e08:	9411      	str	r4, [sp, #68]	; 0x44
 8015e0a:	f7ea fa2b 	bl	8000264 <__divsi3>
 8015e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e10:	0004      	movs	r4, r0
 8015e12:	2b63      	cmp	r3, #99	; 0x63
 8015e14:	dceb      	bgt.n	8015dee <_svfprintf_r+0x7d6>
 8015e16:	222a      	movs	r2, #42	; 0x2a
 8015e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e1a:	a81e      	add	r0, sp, #120	; 0x78
 8015e1c:	1e99      	subs	r1, r3, #2
 8015e1e:	1812      	adds	r2, r2, r0
 8015e20:	2037      	movs	r0, #55	; 0x37
 8015e22:	000b      	movs	r3, r1
 8015e24:	3430      	adds	r4, #48	; 0x30
 8015e26:	700c      	strb	r4, [r1, #0]
 8015e28:	ac1e      	add	r4, sp, #120	; 0x78
 8015e2a:	1900      	adds	r0, r0, r4
 8015e2c:	4283      	cmp	r3, r0
 8015e2e:	d200      	bcs.n	8015e32 <_svfprintf_r+0x81a>
 8015e30:	e0b5      	b.n	8015f9e <_svfprintf_r+0x986>
 8015e32:	2300      	movs	r3, #0
 8015e34:	4281      	cmp	r1, r0
 8015e36:	d804      	bhi.n	8015e42 <_svfprintf_r+0x82a>
 8015e38:	aa1e      	add	r2, sp, #120	; 0x78
 8015e3a:	3339      	adds	r3, #57	; 0x39
 8015e3c:	189b      	adds	r3, r3, r2
 8015e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e40:	1a9b      	subs	r3, r3, r2
 8015e42:	222a      	movs	r2, #42	; 0x2a
 8015e44:	a91e      	add	r1, sp, #120	; 0x78
 8015e46:	1852      	adds	r2, r2, r1
 8015e48:	18d3      	adds	r3, r2, r3
 8015e4a:	aa28      	add	r2, sp, #160	; 0xa0
 8015e4c:	1a9b      	subs	r3, r3, r2
 8015e4e:	931e      	str	r3, [sp, #120]	; 0x78
 8015e50:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e54:	4694      	mov	ip, r2
 8015e56:	4463      	add	r3, ip
 8015e58:	9309      	str	r3, [sp, #36]	; 0x24
 8015e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e5c:	2b01      	cmp	r3, #1
 8015e5e:	dc01      	bgt.n	8015e64 <_svfprintf_r+0x84c>
 8015e60:	07f3      	lsls	r3, r6, #31
 8015e62:	d504      	bpl.n	8015e6e <_svfprintf_r+0x856>
 8015e64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e68:	4694      	mov	ip, r2
 8015e6a:	4463      	add	r3, ip
 8015e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8015e6e:	2280      	movs	r2, #128	; 0x80
 8015e70:	4b60      	ldr	r3, [pc, #384]	; (8015ff4 <_svfprintf_r+0x9dc>)
 8015e72:	0052      	lsls	r2, r2, #1
 8015e74:	4033      	ands	r3, r6
 8015e76:	431a      	orrs	r2, r3
 8015e78:	2300      	movs	r3, #0
 8015e7a:	001d      	movs	r5, r3
 8015e7c:	9220      	str	r2, [sp, #128]	; 0x80
 8015e7e:	9310      	str	r3, [sp, #64]	; 0x40
 8015e80:	9311      	str	r3, [sp, #68]	; 0x44
 8015e82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d100      	bne.n	8015e8a <_svfprintf_r+0x872>
 8015e88:	e27b      	b.n	8016382 <_svfprintf_r+0xd6a>
 8015e8a:	231b      	movs	r3, #27
 8015e8c:	aa1e      	add	r2, sp, #120	; 0x78
 8015e8e:	189b      	adds	r3, r3, r2
 8015e90:	222d      	movs	r2, #45	; 0x2d
 8015e92:	701a      	strb	r2, [r3, #0]
 8015e94:	2300      	movs	r3, #0
 8015e96:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015e98:	9319      	str	r3, [sp, #100]	; 0x64
 8015e9a:	e52b      	b.n	80158f4 <_svfprintf_r+0x2dc>
 8015e9c:	9b08      	ldr	r3, [sp, #32]
 8015e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8015ea0:	e6ea      	b.n	8015c78 <_svfprintf_r+0x660>
 8015ea2:	2306      	movs	r3, #6
 8015ea4:	e6d3      	b.n	8015c4e <_svfprintf_r+0x636>
 8015ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	e6f4      	b.n	8015c96 <_svfprintf_r+0x67e>
 8015eac:	7010      	strb	r0, [r2, #0]
 8015eae:	e75e      	b.n	8015d6e <_svfprintf_r+0x756>
 8015eb0:	7018      	strb	r0, [r3, #0]
 8015eb2:	3301      	adds	r3, #1
 8015eb4:	1aca      	subs	r2, r1, r3
 8015eb6:	d5fb      	bpl.n	8015eb0 <_svfprintf_r+0x898>
 8015eb8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015eba:	2300      	movs	r3, #0
 8015ebc:	3201      	adds	r2, #1
 8015ebe:	db01      	blt.n	8015ec4 <_svfprintf_r+0x8ac>
 8015ec0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ec6:	18d3      	adds	r3, r2, r3
 8015ec8:	9323      	str	r3, [sp, #140]	; 0x8c
 8015eca:	e75e      	b.n	8015d8a <_svfprintf_r+0x772>
 8015ecc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015ece:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015ed0:	2030      	movs	r0, #48	; 0x30
 8015ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ed4:	1851      	adds	r1, r2, r1
 8015ed6:	e7ed      	b.n	8015eb4 <_svfprintf_r+0x89c>
 8015ed8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015eda:	2b46      	cmp	r3, #70	; 0x46
 8015edc:	d006      	beq.n	8015eec <_svfprintf_r+0x8d4>
 8015ede:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015ee0:	2b45      	cmp	r3, #69	; 0x45
 8015ee2:	d101      	bne.n	8015ee8 <_svfprintf_r+0x8d0>
 8015ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ee6:	1c5d      	adds	r5, r3, #1
 8015ee8:	2302      	movs	r3, #2
 8015eea:	e001      	b.n	8015ef0 <_svfprintf_r+0x8d8>
 8015eec:	2303      	movs	r3, #3
 8015eee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015ef0:	aa2a      	add	r2, sp, #168	; 0xa8
 8015ef2:	9204      	str	r2, [sp, #16]
 8015ef4:	aa27      	add	r2, sp, #156	; 0x9c
 8015ef6:	9203      	str	r2, [sp, #12]
 8015ef8:	aa26      	add	r2, sp, #152	; 0x98
 8015efa:	9202      	str	r2, [sp, #8]
 8015efc:	9300      	str	r3, [sp, #0]
 8015efe:	0022      	movs	r2, r4
 8015f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f04:	9501      	str	r5, [sp, #4]
 8015f06:	f000 feb7 	bl	8016c78 <_dtoa_r>
 8015f0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f0c:	9008      	str	r0, [sp, #32]
 8015f0e:	2b47      	cmp	r3, #71	; 0x47
 8015f10:	d103      	bne.n	8015f1a <_svfprintf_r+0x902>
 8015f12:	07f3      	lsls	r3, r6, #31
 8015f14:	d401      	bmi.n	8015f1a <_svfprintf_r+0x902>
 8015f16:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015f18:	e738      	b.n	8015d8c <_svfprintf_r+0x774>
 8015f1a:	9b08      	ldr	r3, [sp, #32]
 8015f1c:	195b      	adds	r3, r3, r5
 8015f1e:	9311      	str	r3, [sp, #68]	; 0x44
 8015f20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f22:	2b46      	cmp	r3, #70	; 0x46
 8015f24:	d113      	bne.n	8015f4e <_svfprintf_r+0x936>
 8015f26:	9b08      	ldr	r3, [sp, #32]
 8015f28:	781b      	ldrb	r3, [r3, #0]
 8015f2a:	2b30      	cmp	r3, #48	; 0x30
 8015f2c:	d10a      	bne.n	8015f44 <_svfprintf_r+0x92c>
 8015f2e:	2200      	movs	r2, #0
 8015f30:	2300      	movs	r3, #0
 8015f32:	0020      	movs	r0, r4
 8015f34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015f36:	f7ea fa91 	bl	800045c <__aeabi_dcmpeq>
 8015f3a:	2800      	cmp	r0, #0
 8015f3c:	d102      	bne.n	8015f44 <_svfprintf_r+0x92c>
 8015f3e:	2301      	movs	r3, #1
 8015f40:	1b5d      	subs	r5, r3, r5
 8015f42:	9526      	str	r5, [sp, #152]	; 0x98
 8015f44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f48:	4694      	mov	ip, r2
 8015f4a:	4463      	add	r3, ip
 8015f4c:	9311      	str	r3, [sp, #68]	; 0x44
 8015f4e:	2200      	movs	r2, #0
 8015f50:	2300      	movs	r3, #0
 8015f52:	0020      	movs	r0, r4
 8015f54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015f56:	f7ea fa81 	bl	800045c <__aeabi_dcmpeq>
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	d001      	beq.n	8015f62 <_svfprintf_r+0x94a>
 8015f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f60:	932a      	str	r3, [sp, #168]	; 0xa8
 8015f62:	2230      	movs	r2, #48	; 0x30
 8015f64:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015f66:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015f68:	4299      	cmp	r1, r3
 8015f6a:	d9d4      	bls.n	8015f16 <_svfprintf_r+0x8fe>
 8015f6c:	1c59      	adds	r1, r3, #1
 8015f6e:	912a      	str	r1, [sp, #168]	; 0xa8
 8015f70:	701a      	strb	r2, [r3, #0]
 8015f72:	e7f7      	b.n	8015f64 <_svfprintf_r+0x94c>
 8015f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f76:	2b46      	cmp	r3, #70	; 0x46
 8015f78:	d000      	beq.n	8015f7c <_svfprintf_r+0x964>
 8015f7a:	e718      	b.n	8015dae <_svfprintf_r+0x796>
 8015f7c:	2201      	movs	r2, #1
 8015f7e:	0033      	movs	r3, r6
 8015f80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f82:	4013      	ands	r3, r2
 8015f84:	430b      	orrs	r3, r1
 8015f86:	2d00      	cmp	r5, #0
 8015f88:	dd1c      	ble.n	8015fc4 <_svfprintf_r+0x9ac>
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d04f      	beq.n	801602e <_svfprintf_r+0xa16>
 8015f8e:	000a      	movs	r2, r1
 8015f90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015f92:	18eb      	adds	r3, r5, r3
 8015f94:	18d3      	adds	r3, r2, r3
 8015f96:	9309      	str	r3, [sp, #36]	; 0x24
 8015f98:	2366      	movs	r3, #102	; 0x66
 8015f9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f9c:	e039      	b.n	8016012 <_svfprintf_r+0x9fa>
 8015f9e:	781c      	ldrb	r4, [r3, #0]
 8015fa0:	3301      	adds	r3, #1
 8015fa2:	7014      	strb	r4, [r2, #0]
 8015fa4:	3201      	adds	r2, #1
 8015fa6:	e741      	b.n	8015e2c <_svfprintf_r+0x814>
 8015fa8:	222a      	movs	r2, #42	; 0x2a
 8015faa:	ab1e      	add	r3, sp, #120	; 0x78
 8015fac:	18d2      	adds	r2, r2, r3
 8015fae:	2800      	cmp	r0, #0
 8015fb0:	d104      	bne.n	8015fbc <_svfprintf_r+0x9a4>
 8015fb2:	2330      	movs	r3, #48	; 0x30
 8015fb4:	222b      	movs	r2, #43	; 0x2b
 8015fb6:	708b      	strb	r3, [r1, #2]
 8015fb8:	ab1e      	add	r3, sp, #120	; 0x78
 8015fba:	18d2      	adds	r2, r2, r3
 8015fbc:	3430      	adds	r4, #48	; 0x30
 8015fbe:	1c53      	adds	r3, r2, #1
 8015fc0:	7014      	strb	r4, [r2, #0]
 8015fc2:	e742      	b.n	8015e4a <_svfprintf_r+0x832>
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d034      	beq.n	8016032 <_svfprintf_r+0xa1a>
 8015fc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fcc:	3301      	adds	r3, #1
 8015fce:	e7e1      	b.n	8015f94 <_svfprintf_r+0x97c>
 8015fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fd2:	429d      	cmp	r5, r3
 8015fd4:	db10      	blt.n	8015ff8 <_svfprintf_r+0x9e0>
 8015fd6:	07f3      	lsls	r3, r6, #31
 8015fd8:	d52f      	bpl.n	801603a <_svfprintf_r+0xa22>
 8015fda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015fdc:	18eb      	adds	r3, r5, r3
 8015fde:	9309      	str	r3, [sp, #36]	; 0x24
 8015fe0:	2367      	movs	r3, #103	; 0x67
 8015fe2:	e7da      	b.n	8015f9a <_svfprintf_r+0x982>
 8015fe4:	0801da00 	.word	0x0801da00
 8015fe8:	0801da11 	.word	0x0801da11
 8015fec:	40300000 	.word	0x40300000
 8015ff0:	3fe00000 	.word	0x3fe00000
 8015ff4:	fffffbff 	.word	0xfffffbff
 8015ff8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ffc:	4694      	mov	ip, r2
 8015ffe:	4463      	add	r3, ip
 8016000:	9309      	str	r3, [sp, #36]	; 0x24
 8016002:	2367      	movs	r3, #103	; 0x67
 8016004:	930f      	str	r3, [sp, #60]	; 0x3c
 8016006:	2d00      	cmp	r5, #0
 8016008:	dc03      	bgt.n	8016012 <_svfprintf_r+0x9fa>
 801600a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801600c:	1b58      	subs	r0, r3, r5
 801600e:	1c43      	adds	r3, r0, #1
 8016010:	9309      	str	r3, [sp, #36]	; 0x24
 8016012:	2380      	movs	r3, #128	; 0x80
 8016014:	0032      	movs	r2, r6
 8016016:	00db      	lsls	r3, r3, #3
 8016018:	401a      	ands	r2, r3
 801601a:	9211      	str	r2, [sp, #68]	; 0x44
 801601c:	2200      	movs	r2, #0
 801601e:	9210      	str	r2, [sp, #64]	; 0x40
 8016020:	421e      	tst	r6, r3
 8016022:	d100      	bne.n	8016026 <_svfprintf_r+0xa0e>
 8016024:	e72d      	b.n	8015e82 <_svfprintf_r+0x86a>
 8016026:	4295      	cmp	r5, r2
 8016028:	dc27      	bgt.n	801607a <_svfprintf_r+0xa62>
 801602a:	9211      	str	r2, [sp, #68]	; 0x44
 801602c:	e729      	b.n	8015e82 <_svfprintf_r+0x86a>
 801602e:	9509      	str	r5, [sp, #36]	; 0x24
 8016030:	e7b2      	b.n	8015f98 <_svfprintf_r+0x980>
 8016032:	2366      	movs	r3, #102	; 0x66
 8016034:	9209      	str	r2, [sp, #36]	; 0x24
 8016036:	930f      	str	r3, [sp, #60]	; 0x3c
 8016038:	e7eb      	b.n	8016012 <_svfprintf_r+0x9fa>
 801603a:	9509      	str	r5, [sp, #36]	; 0x24
 801603c:	e7d0      	b.n	8015fe0 <_svfprintf_r+0x9c8>
 801603e:	42ab      	cmp	r3, r5
 8016040:	da0e      	bge.n	8016060 <_svfprintf_r+0xa48>
 8016042:	1aed      	subs	r5, r5, r3
 8016044:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016046:	785b      	ldrb	r3, [r3, #1]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d012      	beq.n	8016072 <_svfprintf_r+0xa5a>
 801604c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801604e:	3301      	adds	r3, #1
 8016050:	9311      	str	r3, [sp, #68]	; 0x44
 8016052:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016054:	3301      	adds	r3, #1
 8016056:	9312      	str	r3, [sp, #72]	; 0x48
 8016058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801605a:	781b      	ldrb	r3, [r3, #0]
 801605c:	2bff      	cmp	r3, #255	; 0xff
 801605e:	d1ee      	bne.n	801603e <_svfprintf_r+0xa26>
 8016060:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016062:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016064:	189b      	adds	r3, r3, r2
 8016066:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016068:	4353      	muls	r3, r2
 801606a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801606c:	189b      	adds	r3, r3, r2
 801606e:	9309      	str	r3, [sp, #36]	; 0x24
 8016070:	e707      	b.n	8015e82 <_svfprintf_r+0x86a>
 8016072:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016074:	3301      	adds	r3, #1
 8016076:	9310      	str	r3, [sp, #64]	; 0x40
 8016078:	e7ee      	b.n	8016058 <_svfprintf_r+0xa40>
 801607a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801607c:	9311      	str	r3, [sp, #68]	; 0x44
 801607e:	e7eb      	b.n	8016058 <_svfprintf_r+0xa40>
 8016080:	0022      	movs	r2, r4
 8016082:	ca08      	ldmia	r2!, {r3}
 8016084:	920e      	str	r2, [sp, #56]	; 0x38
 8016086:	06b2      	lsls	r2, r6, #26
 8016088:	d508      	bpl.n	801609c <_svfprintf_r+0xa84>
 801608a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801608c:	601a      	str	r2, [r3, #0]
 801608e:	17d2      	asrs	r2, r2, #31
 8016090:	605a      	str	r2, [r3, #4]
 8016092:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016094:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016096:	9308      	str	r3, [sp, #32]
 8016098:	f7ff fafa 	bl	8015690 <_svfprintf_r+0x78>
 801609c:	06f2      	lsls	r2, r6, #27
 801609e:	d502      	bpl.n	80160a6 <_svfprintf_r+0xa8e>
 80160a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80160a2:	601a      	str	r2, [r3, #0]
 80160a4:	e7f5      	b.n	8016092 <_svfprintf_r+0xa7a>
 80160a6:	0672      	lsls	r2, r6, #25
 80160a8:	d502      	bpl.n	80160b0 <_svfprintf_r+0xa98>
 80160aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80160ac:	801a      	strh	r2, [r3, #0]
 80160ae:	e7f0      	b.n	8016092 <_svfprintf_r+0xa7a>
 80160b0:	05b2      	lsls	r2, r6, #22
 80160b2:	d5f5      	bpl.n	80160a0 <_svfprintf_r+0xa88>
 80160b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80160b6:	701a      	strb	r2, [r3, #0]
 80160b8:	e7eb      	b.n	8016092 <_svfprintf_r+0xa7a>
 80160ba:	2310      	movs	r3, #16
 80160bc:	431e      	orrs	r6, r3
 80160be:	2320      	movs	r3, #32
 80160c0:	0031      	movs	r1, r6
 80160c2:	4019      	ands	r1, r3
 80160c4:	421e      	tst	r6, r3
 80160c6:	d00f      	beq.n	80160e8 <_svfprintf_r+0xad0>
 80160c8:	3b19      	subs	r3, #25
 80160ca:	3407      	adds	r4, #7
 80160cc:	439c      	bics	r4, r3
 80160ce:	0022      	movs	r2, r4
 80160d0:	ca18      	ldmia	r2!, {r3, r4}
 80160d2:	9306      	str	r3, [sp, #24]
 80160d4:	9407      	str	r4, [sp, #28]
 80160d6:	920e      	str	r2, [sp, #56]	; 0x38
 80160d8:	4bca      	ldr	r3, [pc, #808]	; (8016404 <_svfprintf_r+0xdec>)
 80160da:	401e      	ands	r6, r3
 80160dc:	2300      	movs	r3, #0
 80160de:	221b      	movs	r2, #27
 80160e0:	a91e      	add	r1, sp, #120	; 0x78
 80160e2:	1852      	adds	r2, r2, r1
 80160e4:	2100      	movs	r1, #0
 80160e6:	e4fc      	b.n	8015ae2 <_svfprintf_r+0x4ca>
 80160e8:	1d23      	adds	r3, r4, #4
 80160ea:	0032      	movs	r2, r6
 80160ec:	930e      	str	r3, [sp, #56]	; 0x38
 80160ee:	2310      	movs	r3, #16
 80160f0:	401a      	ands	r2, r3
 80160f2:	421e      	tst	r6, r3
 80160f4:	d003      	beq.n	80160fe <_svfprintf_r+0xae6>
 80160f6:	6823      	ldr	r3, [r4, #0]
 80160f8:	9306      	str	r3, [sp, #24]
 80160fa:	9107      	str	r1, [sp, #28]
 80160fc:	e7ec      	b.n	80160d8 <_svfprintf_r+0xac0>
 80160fe:	2340      	movs	r3, #64	; 0x40
 8016100:	0031      	movs	r1, r6
 8016102:	4019      	ands	r1, r3
 8016104:	421e      	tst	r6, r3
 8016106:	d004      	beq.n	8016112 <_svfprintf_r+0xafa>
 8016108:	6823      	ldr	r3, [r4, #0]
 801610a:	b29b      	uxth	r3, r3
 801610c:	9306      	str	r3, [sp, #24]
 801610e:	9207      	str	r2, [sp, #28]
 8016110:	e7e2      	b.n	80160d8 <_svfprintf_r+0xac0>
 8016112:	2380      	movs	r3, #128	; 0x80
 8016114:	0032      	movs	r2, r6
 8016116:	009b      	lsls	r3, r3, #2
 8016118:	401a      	ands	r2, r3
 801611a:	421e      	tst	r6, r3
 801611c:	d002      	beq.n	8016124 <_svfprintf_r+0xb0c>
 801611e:	6823      	ldr	r3, [r4, #0]
 8016120:	b2db      	uxtb	r3, r3
 8016122:	e7e9      	b.n	80160f8 <_svfprintf_r+0xae0>
 8016124:	6823      	ldr	r3, [r4, #0]
 8016126:	e7f1      	b.n	801610c <_svfprintf_r+0xaf4>
 8016128:	0023      	movs	r3, r4
 801612a:	cb04      	ldmia	r3!, {r2}
 801612c:	49b6      	ldr	r1, [pc, #728]	; (8016408 <_svfprintf_r+0xdf0>)
 801612e:	9206      	str	r2, [sp, #24]
 8016130:	aa25      	add	r2, sp, #148	; 0x94
 8016132:	8011      	strh	r1, [r2, #0]
 8016134:	4ab5      	ldr	r2, [pc, #724]	; (801640c <_svfprintf_r+0xdf4>)
 8016136:	930e      	str	r3, [sp, #56]	; 0x38
 8016138:	2300      	movs	r3, #0
 801613a:	921f      	str	r2, [sp, #124]	; 0x7c
 801613c:	2278      	movs	r2, #120	; 0x78
 801613e:	9307      	str	r3, [sp, #28]
 8016140:	3302      	adds	r3, #2
 8016142:	431e      	orrs	r6, r3
 8016144:	920f      	str	r2, [sp, #60]	; 0x3c
 8016146:	e7ca      	b.n	80160de <_svfprintf_r+0xac6>
 8016148:	0023      	movs	r3, r4
 801614a:	cb04      	ldmia	r3!, {r2}
 801614c:	2400      	movs	r4, #0
 801614e:	930e      	str	r3, [sp, #56]	; 0x38
 8016150:	231b      	movs	r3, #27
 8016152:	9208      	str	r2, [sp, #32]
 8016154:	aa1e      	add	r2, sp, #120	; 0x78
 8016156:	189b      	adds	r3, r3, r2
 8016158:	701c      	strb	r4, [r3, #0]
 801615a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801615c:	3301      	adds	r3, #1
 801615e:	d00e      	beq.n	801617e <_svfprintf_r+0xb66>
 8016160:	0021      	movs	r1, r4
 8016162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016164:	9808      	ldr	r0, [sp, #32]
 8016166:	f002 f821 	bl	80181ac <memchr>
 801616a:	900c      	str	r0, [sp, #48]	; 0x30
 801616c:	42a0      	cmp	r0, r4
 801616e:	d100      	bne.n	8016172 <_svfprintf_r+0xb5a>
 8016170:	e10a      	b.n	8016388 <_svfprintf_r+0xd70>
 8016172:	9a08      	ldr	r2, [sp, #32]
 8016174:	1a83      	subs	r3, r0, r2
 8016176:	9309      	str	r3, [sp, #36]	; 0x24
 8016178:	0023      	movs	r3, r4
 801617a:	940c      	str	r4, [sp, #48]	; 0x30
 801617c:	e516      	b.n	8015bac <_svfprintf_r+0x594>
 801617e:	9808      	ldr	r0, [sp, #32]
 8016180:	f7e9 ffca 	bl	8000118 <strlen>
 8016184:	9009      	str	r0, [sp, #36]	; 0x24
 8016186:	e7f7      	b.n	8016178 <_svfprintf_r+0xb60>
 8016188:	2310      	movs	r3, #16
 801618a:	431e      	orrs	r6, r3
 801618c:	2320      	movs	r3, #32
 801618e:	0031      	movs	r1, r6
 8016190:	4019      	ands	r1, r3
 8016192:	421e      	tst	r6, r3
 8016194:	d009      	beq.n	80161aa <_svfprintf_r+0xb92>
 8016196:	3b19      	subs	r3, #25
 8016198:	3407      	adds	r4, #7
 801619a:	439c      	bics	r4, r3
 801619c:	0022      	movs	r2, r4
 801619e:	ca18      	ldmia	r2!, {r3, r4}
 80161a0:	9306      	str	r3, [sp, #24]
 80161a2:	9407      	str	r4, [sp, #28]
 80161a4:	920e      	str	r2, [sp, #56]	; 0x38
 80161a6:	2301      	movs	r3, #1
 80161a8:	e799      	b.n	80160de <_svfprintf_r+0xac6>
 80161aa:	1d23      	adds	r3, r4, #4
 80161ac:	0032      	movs	r2, r6
 80161ae:	930e      	str	r3, [sp, #56]	; 0x38
 80161b0:	2310      	movs	r3, #16
 80161b2:	401a      	ands	r2, r3
 80161b4:	421e      	tst	r6, r3
 80161b6:	d003      	beq.n	80161c0 <_svfprintf_r+0xba8>
 80161b8:	6823      	ldr	r3, [r4, #0]
 80161ba:	9306      	str	r3, [sp, #24]
 80161bc:	9107      	str	r1, [sp, #28]
 80161be:	e7f2      	b.n	80161a6 <_svfprintf_r+0xb8e>
 80161c0:	2340      	movs	r3, #64	; 0x40
 80161c2:	0031      	movs	r1, r6
 80161c4:	4019      	ands	r1, r3
 80161c6:	421e      	tst	r6, r3
 80161c8:	d004      	beq.n	80161d4 <_svfprintf_r+0xbbc>
 80161ca:	6823      	ldr	r3, [r4, #0]
 80161cc:	b29b      	uxth	r3, r3
 80161ce:	9306      	str	r3, [sp, #24]
 80161d0:	9207      	str	r2, [sp, #28]
 80161d2:	e7e8      	b.n	80161a6 <_svfprintf_r+0xb8e>
 80161d4:	2380      	movs	r3, #128	; 0x80
 80161d6:	0032      	movs	r2, r6
 80161d8:	009b      	lsls	r3, r3, #2
 80161da:	401a      	ands	r2, r3
 80161dc:	421e      	tst	r6, r3
 80161de:	d002      	beq.n	80161e6 <_svfprintf_r+0xbce>
 80161e0:	6823      	ldr	r3, [r4, #0]
 80161e2:	b2db      	uxtb	r3, r3
 80161e4:	e7e9      	b.n	80161ba <_svfprintf_r+0xba2>
 80161e6:	6823      	ldr	r3, [r4, #0]
 80161e8:	e7f1      	b.n	80161ce <_svfprintf_r+0xbb6>
 80161ea:	4b89      	ldr	r3, [pc, #548]	; (8016410 <_svfprintf_r+0xdf8>)
 80161ec:	0031      	movs	r1, r6
 80161ee:	931f      	str	r3, [sp, #124]	; 0x7c
 80161f0:	2320      	movs	r3, #32
 80161f2:	4019      	ands	r1, r3
 80161f4:	421e      	tst	r6, r3
 80161f6:	d01a      	beq.n	801622e <_svfprintf_r+0xc16>
 80161f8:	3b19      	subs	r3, #25
 80161fa:	3407      	adds	r4, #7
 80161fc:	439c      	bics	r4, r3
 80161fe:	0022      	movs	r2, r4
 8016200:	ca18      	ldmia	r2!, {r3, r4}
 8016202:	9306      	str	r3, [sp, #24]
 8016204:	9407      	str	r4, [sp, #28]
 8016206:	920e      	str	r2, [sp, #56]	; 0x38
 8016208:	07f3      	lsls	r3, r6, #31
 801620a:	d50a      	bpl.n	8016222 <_svfprintf_r+0xc0a>
 801620c:	9b06      	ldr	r3, [sp, #24]
 801620e:	9a07      	ldr	r2, [sp, #28]
 8016210:	4313      	orrs	r3, r2
 8016212:	d006      	beq.n	8016222 <_svfprintf_r+0xc0a>
 8016214:	2230      	movs	r2, #48	; 0x30
 8016216:	ab25      	add	r3, sp, #148	; 0x94
 8016218:	701a      	strb	r2, [r3, #0]
 801621a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801621c:	705a      	strb	r2, [r3, #1]
 801621e:	2302      	movs	r3, #2
 8016220:	431e      	orrs	r6, r3
 8016222:	4b78      	ldr	r3, [pc, #480]	; (8016404 <_svfprintf_r+0xdec>)
 8016224:	401e      	ands	r6, r3
 8016226:	2302      	movs	r3, #2
 8016228:	e759      	b.n	80160de <_svfprintf_r+0xac6>
 801622a:	4b78      	ldr	r3, [pc, #480]	; (801640c <_svfprintf_r+0xdf4>)
 801622c:	e7de      	b.n	80161ec <_svfprintf_r+0xbd4>
 801622e:	1d23      	adds	r3, r4, #4
 8016230:	0032      	movs	r2, r6
 8016232:	930e      	str	r3, [sp, #56]	; 0x38
 8016234:	2310      	movs	r3, #16
 8016236:	401a      	ands	r2, r3
 8016238:	421e      	tst	r6, r3
 801623a:	d003      	beq.n	8016244 <_svfprintf_r+0xc2c>
 801623c:	6823      	ldr	r3, [r4, #0]
 801623e:	9306      	str	r3, [sp, #24]
 8016240:	9107      	str	r1, [sp, #28]
 8016242:	e7e1      	b.n	8016208 <_svfprintf_r+0xbf0>
 8016244:	2340      	movs	r3, #64	; 0x40
 8016246:	0031      	movs	r1, r6
 8016248:	4019      	ands	r1, r3
 801624a:	421e      	tst	r6, r3
 801624c:	d004      	beq.n	8016258 <_svfprintf_r+0xc40>
 801624e:	6823      	ldr	r3, [r4, #0]
 8016250:	b29b      	uxth	r3, r3
 8016252:	9306      	str	r3, [sp, #24]
 8016254:	9207      	str	r2, [sp, #28]
 8016256:	e7d7      	b.n	8016208 <_svfprintf_r+0xbf0>
 8016258:	2380      	movs	r3, #128	; 0x80
 801625a:	0032      	movs	r2, r6
 801625c:	009b      	lsls	r3, r3, #2
 801625e:	401a      	ands	r2, r3
 8016260:	421e      	tst	r6, r3
 8016262:	d002      	beq.n	801626a <_svfprintf_r+0xc52>
 8016264:	6823      	ldr	r3, [r4, #0]
 8016266:	b2db      	uxtb	r3, r3
 8016268:	e7e9      	b.n	801623e <_svfprintf_r+0xc26>
 801626a:	6823      	ldr	r3, [r4, #0]
 801626c:	e7f1      	b.n	8016252 <_svfprintf_r+0xc3a>
 801626e:	9b07      	ldr	r3, [sp, #28]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d10b      	bne.n	801628c <_svfprintf_r+0xc74>
 8016274:	9b06      	ldr	r3, [sp, #24]
 8016276:	2b09      	cmp	r3, #9
 8016278:	d808      	bhi.n	801628c <_svfprintf_r+0xc74>
 801627a:	20e7      	movs	r0, #231	; 0xe7
 801627c:	ab1e      	add	r3, sp, #120	; 0x78
 801627e:	18c0      	adds	r0, r0, r3
 8016280:	9b06      	ldr	r3, [sp, #24]
 8016282:	3330      	adds	r3, #48	; 0x30
 8016284:	7003      	strb	r3, [r0, #0]
 8016286:	9008      	str	r0, [sp, #32]
 8016288:	f000 fc38 	bl	8016afc <_svfprintf_r+0x14e4>
 801628c:	2480      	movs	r4, #128	; 0x80
 801628e:	2300      	movs	r3, #0
 8016290:	00e4      	lsls	r4, r4, #3
 8016292:	930d      	str	r3, [sp, #52]	; 0x34
 8016294:	a858      	add	r0, sp, #352	; 0x160
 8016296:	402c      	ands	r4, r5
 8016298:	1e43      	subs	r3, r0, #1
 801629a:	9308      	str	r3, [sp, #32]
 801629c:	220a      	movs	r2, #10
 801629e:	9806      	ldr	r0, [sp, #24]
 80162a0:	9907      	ldr	r1, [sp, #28]
 80162a2:	2300      	movs	r3, #0
 80162a4:	f7ea f942 	bl	800052c <__aeabi_uldivmod>
 80162a8:	9b08      	ldr	r3, [sp, #32]
 80162aa:	3230      	adds	r2, #48	; 0x30
 80162ac:	701a      	strb	r2, [r3, #0]
 80162ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162b0:	3301      	adds	r3, #1
 80162b2:	930d      	str	r3, [sp, #52]	; 0x34
 80162b4:	2c00      	cmp	r4, #0
 80162b6:	d01d      	beq.n	80162f4 <_svfprintf_r+0xcdc>
 80162b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80162ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	429a      	cmp	r2, r3
 80162c0:	d118      	bne.n	80162f4 <_svfprintf_r+0xcdc>
 80162c2:	2aff      	cmp	r2, #255	; 0xff
 80162c4:	d016      	beq.n	80162f4 <_svfprintf_r+0xcdc>
 80162c6:	9b07      	ldr	r3, [sp, #28]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d102      	bne.n	80162d2 <_svfprintf_r+0xcba>
 80162cc:	9b06      	ldr	r3, [sp, #24]
 80162ce:	2b09      	cmp	r3, #9
 80162d0:	d910      	bls.n	80162f4 <_svfprintf_r+0xcdc>
 80162d2:	9b08      	ldr	r3, [sp, #32]
 80162d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80162d6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80162d8:	1a9b      	subs	r3, r3, r2
 80162da:	0018      	movs	r0, r3
 80162dc:	9308      	str	r3, [sp, #32]
 80162de:	f7fe fa69 	bl	80147b4 <strncpy>
 80162e2:	2200      	movs	r2, #0
 80162e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80162e6:	920d      	str	r2, [sp, #52]	; 0x34
 80162e8:	785b      	ldrb	r3, [r3, #1]
 80162ea:	1e5a      	subs	r2, r3, #1
 80162ec:	4193      	sbcs	r3, r2
 80162ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80162f0:	18d3      	adds	r3, r2, r3
 80162f2:	9312      	str	r3, [sp, #72]	; 0x48
 80162f4:	2300      	movs	r3, #0
 80162f6:	9806      	ldr	r0, [sp, #24]
 80162f8:	9907      	ldr	r1, [sp, #28]
 80162fa:	220a      	movs	r2, #10
 80162fc:	f7ea f916 	bl	800052c <__aeabi_uldivmod>
 8016300:	9b07      	ldr	r3, [sp, #28]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d104      	bne.n	8016310 <_svfprintf_r+0xcf8>
 8016306:	9b06      	ldr	r3, [sp, #24]
 8016308:	2b09      	cmp	r3, #9
 801630a:	d801      	bhi.n	8016310 <_svfprintf_r+0xcf8>
 801630c:	f000 fbf6 	bl	8016afc <_svfprintf_r+0x14e4>
 8016310:	9006      	str	r0, [sp, #24]
 8016312:	9107      	str	r1, [sp, #28]
 8016314:	9808      	ldr	r0, [sp, #32]
 8016316:	e7bf      	b.n	8016298 <_svfprintf_r+0xc80>
 8016318:	200f      	movs	r0, #15
 801631a:	ab58      	add	r3, sp, #352	; 0x160
 801631c:	9308      	str	r3, [sp, #32]
 801631e:	9b08      	ldr	r3, [sp, #32]
 8016320:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016322:	3b01      	subs	r3, #1
 8016324:	9308      	str	r3, [sp, #32]
 8016326:	9b06      	ldr	r3, [sp, #24]
 8016328:	4003      	ands	r3, r0
 801632a:	5cd3      	ldrb	r3, [r2, r3]
 801632c:	9a08      	ldr	r2, [sp, #32]
 801632e:	7013      	strb	r3, [r2, #0]
 8016330:	9b07      	ldr	r3, [sp, #28]
 8016332:	0719      	lsls	r1, r3, #28
 8016334:	9b06      	ldr	r3, [sp, #24]
 8016336:	091a      	lsrs	r2, r3, #4
 8016338:	9b07      	ldr	r3, [sp, #28]
 801633a:	4311      	orrs	r1, r2
 801633c:	091b      	lsrs	r3, r3, #4
 801633e:	9307      	str	r3, [sp, #28]
 8016340:	000b      	movs	r3, r1
 8016342:	9a07      	ldr	r2, [sp, #28]
 8016344:	9106      	str	r1, [sp, #24]
 8016346:	4313      	orrs	r3, r2
 8016348:	d1e9      	bne.n	801631e <_svfprintf_r+0xd06>
 801634a:	e3d7      	b.n	8016afc <_svfprintf_r+0x14e4>
 801634c:	aa58      	add	r2, sp, #352	; 0x160
 801634e:	9208      	str	r2, [sp, #32]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d000      	beq.n	8016356 <_svfprintf_r+0xd3e>
 8016354:	e3d2      	b.n	8016afc <_svfprintf_r+0x14e4>
 8016356:	07f3      	lsls	r3, r6, #31
 8016358:	d400      	bmi.n	801635c <_svfprintf_r+0xd44>
 801635a:	e3cf      	b.n	8016afc <_svfprintf_r+0x14e4>
 801635c:	20e7      	movs	r0, #231	; 0xe7
 801635e:	ab1e      	add	r3, sp, #120	; 0x78
 8016360:	18c0      	adds	r0, r0, r3
 8016362:	2330      	movs	r3, #48	; 0x30
 8016364:	e78e      	b.n	8016284 <_svfprintf_r+0xc6c>
 8016366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016368:	2b00      	cmp	r3, #0
 801636a:	d100      	bne.n	801636e <_svfprintf_r+0xd56>
 801636c:	e38a      	b.n	8016a84 <_svfprintf_r+0x146c>
 801636e:	221b      	movs	r2, #27
 8016370:	a83f      	add	r0, sp, #252	; 0xfc
 8016372:	7003      	strb	r3, [r0, #0]
 8016374:	2300      	movs	r3, #0
 8016376:	a91e      	add	r1, sp, #120	; 0x78
 8016378:	1852      	adds	r2, r2, r1
 801637a:	7013      	strb	r3, [r2, #0]
 801637c:	940e      	str	r4, [sp, #56]	; 0x38
 801637e:	f7ff fab0 	bl	80158e2 <_svfprintf_r+0x2ca>
 8016382:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016386:	e587      	b.n	8015e98 <_svfprintf_r+0x880>
 8016388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801638a:	e40f      	b.n	8015bac <_svfprintf_r+0x594>
 801638c:	2010      	movs	r0, #16
 801638e:	1812      	adds	r2, r2, r0
 8016390:	6078      	str	r0, [r7, #4]
 8016392:	922e      	str	r2, [sp, #184]	; 0xb8
 8016394:	932d      	str	r3, [sp, #180]	; 0xb4
 8016396:	2b07      	cmp	r3, #7
 8016398:	dd08      	ble.n	80163ac <_svfprintf_r+0xd94>
 801639a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801639c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801639e:	aa2c      	add	r2, sp, #176	; 0xb0
 80163a0:	f002 fbd4 	bl	8018b4c <__ssprint_r>
 80163a4:	2800      	cmp	r0, #0
 80163a6:	d000      	beq.n	80163aa <_svfprintf_r+0xd92>
 80163a8:	e34b      	b.n	8016a42 <_svfprintf_r+0x142a>
 80163aa:	a92f      	add	r1, sp, #188	; 0xbc
 80163ac:	000f      	movs	r7, r1
 80163ae:	3c10      	subs	r4, #16
 80163b0:	f7ff fac3 	bl	801593a <_svfprintf_r+0x322>
 80163b4:	2010      	movs	r0, #16
 80163b6:	1812      	adds	r2, r2, r0
 80163b8:	6078      	str	r0, [r7, #4]
 80163ba:	922e      	str	r2, [sp, #184]	; 0xb8
 80163bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80163be:	2b07      	cmp	r3, #7
 80163c0:	dd08      	ble.n	80163d4 <_svfprintf_r+0xdbc>
 80163c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80163c8:	f002 fbc0 	bl	8018b4c <__ssprint_r>
 80163cc:	2800      	cmp	r0, #0
 80163ce:	d000      	beq.n	80163d2 <_svfprintf_r+0xdba>
 80163d0:	e337      	b.n	8016a42 <_svfprintf_r+0x142a>
 80163d2:	a92f      	add	r1, sp, #188	; 0xbc
 80163d4:	000f      	movs	r7, r1
 80163d6:	3c10      	subs	r4, #16
 80163d8:	f7ff fb0f 	bl	80159fa <_svfprintf_r+0x3e2>
 80163dc:	2010      	movs	r0, #16
 80163de:	1812      	adds	r2, r2, r0
 80163e0:	6078      	str	r0, [r7, #4]
 80163e2:	922e      	str	r2, [sp, #184]	; 0xb8
 80163e4:	932d      	str	r3, [sp, #180]	; 0xb4
 80163e6:	2b07      	cmp	r3, #7
 80163e8:	dd08      	ble.n	80163fc <_svfprintf_r+0xde4>
 80163ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163ee:	aa2c      	add	r2, sp, #176	; 0xb0
 80163f0:	f002 fbac 	bl	8018b4c <__ssprint_r>
 80163f4:	2800      	cmp	r0, #0
 80163f6:	d000      	beq.n	80163fa <_svfprintf_r+0xde2>
 80163f8:	e323      	b.n	8016a42 <_svfprintf_r+0x142a>
 80163fa:	a92f      	add	r1, sp, #188	; 0xbc
 80163fc:	000f      	movs	r7, r1
 80163fe:	3c10      	subs	r4, #16
 8016400:	f7ff fb1d 	bl	8015a3e <_svfprintf_r+0x426>
 8016404:	fffffbff 	.word	0xfffffbff
 8016408:	00007830 	.word	0x00007830
 801640c:	0801da00 	.word	0x0801da00
 8016410:	0801da11 	.word	0x0801da11
 8016414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016416:	2b65      	cmp	r3, #101	; 0x65
 8016418:	dc00      	bgt.n	801641c <_svfprintf_r+0xe04>
 801641a:	e258      	b.n	80168ce <_svfprintf_r+0x12b6>
 801641c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801641e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016420:	2200      	movs	r2, #0
 8016422:	2300      	movs	r3, #0
 8016424:	f7ea f81a 	bl	800045c <__aeabi_dcmpeq>
 8016428:	2800      	cmp	r0, #0
 801642a:	d07c      	beq.n	8016526 <_svfprintf_r+0xf0e>
 801642c:	4b80      	ldr	r3, [pc, #512]	; (8016630 <_svfprintf_r+0x1018>)
 801642e:	603b      	str	r3, [r7, #0]
 8016430:	2301      	movs	r3, #1
 8016432:	607b      	str	r3, [r7, #4]
 8016434:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016436:	3708      	adds	r7, #8
 8016438:	3301      	adds	r3, #1
 801643a:	932e      	str	r3, [sp, #184]	; 0xb8
 801643c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801643e:	9308      	str	r3, [sp, #32]
 8016440:	3301      	adds	r3, #1
 8016442:	932d      	str	r3, [sp, #180]	; 0xb4
 8016444:	2b07      	cmp	r3, #7
 8016446:	dd08      	ble.n	801645a <_svfprintf_r+0xe42>
 8016448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801644a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801644c:	aa2c      	add	r2, sp, #176	; 0xb0
 801644e:	f002 fb7d 	bl	8018b4c <__ssprint_r>
 8016452:	2800      	cmp	r0, #0
 8016454:	d000      	beq.n	8016458 <_svfprintf_r+0xe40>
 8016456:	e2f4      	b.n	8016a42 <_svfprintf_r+0x142a>
 8016458:	af2f      	add	r7, sp, #188	; 0xbc
 801645a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801645c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801645e:	4293      	cmp	r3, r2
 8016460:	db01      	blt.n	8016466 <_svfprintf_r+0xe4e>
 8016462:	07f3      	lsls	r3, r6, #31
 8016464:	d51d      	bpl.n	80164a2 <_svfprintf_r+0xe8a>
 8016466:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016468:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801646a:	4694      	mov	ip, r2
 801646c:	603b      	str	r3, [r7, #0]
 801646e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016470:	607b      	str	r3, [r7, #4]
 8016472:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016474:	3708      	adds	r7, #8
 8016476:	4463      	add	r3, ip
 8016478:	932e      	str	r3, [sp, #184]	; 0xb8
 801647a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801647c:	9308      	str	r3, [sp, #32]
 801647e:	3301      	adds	r3, #1
 8016480:	932d      	str	r3, [sp, #180]	; 0xb4
 8016482:	2b07      	cmp	r3, #7
 8016484:	dd08      	ble.n	8016498 <_svfprintf_r+0xe80>
 8016486:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016488:	980a      	ldr	r0, [sp, #40]	; 0x28
 801648a:	aa2c      	add	r2, sp, #176	; 0xb0
 801648c:	f002 fb5e 	bl	8018b4c <__ssprint_r>
 8016490:	2800      	cmp	r0, #0
 8016492:	d000      	beq.n	8016496 <_svfprintf_r+0xe7e>
 8016494:	e2d5      	b.n	8016a42 <_svfprintf_r+0x142a>
 8016496:	af2f      	add	r7, sp, #188	; 0xbc
 8016498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801649a:	2510      	movs	r5, #16
 801649c:	1e5c      	subs	r4, r3, #1
 801649e:	2c00      	cmp	r4, #0
 80164a0:	dc2f      	bgt.n	8016502 <_svfprintf_r+0xeea>
 80164a2:	0773      	lsls	r3, r6, #29
 80164a4:	d500      	bpl.n	80164a8 <_svfprintf_r+0xe90>
 80164a6:	e2ae      	b.n	8016a06 <_svfprintf_r+0x13ee>
 80164a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80164aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80164ac:	4293      	cmp	r3, r2
 80164ae:	da00      	bge.n	80164b2 <_svfprintf_r+0xe9a>
 80164b0:	0013      	movs	r3, r2
 80164b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80164b4:	18d3      	adds	r3, r2, r3
 80164b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80164b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80164ba:	9308      	str	r3, [sp, #32]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d007      	beq.n	80164d0 <_svfprintf_r+0xeb8>
 80164c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80164c6:	f002 fb41 	bl	8018b4c <__ssprint_r>
 80164ca:	2800      	cmp	r0, #0
 80164cc:	d000      	beq.n	80164d0 <_svfprintf_r+0xeb8>
 80164ce:	e2b8      	b.n	8016a42 <_svfprintf_r+0x142a>
 80164d0:	2300      	movs	r3, #0
 80164d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80164d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d000      	beq.n	80164dc <_svfprintf_r+0xec4>
 80164da:	e2ce      	b.n	8016a7a <_svfprintf_r+0x1462>
 80164dc:	af2f      	add	r7, sp, #188	; 0xbc
 80164de:	e5d8      	b.n	8016092 <_svfprintf_r+0xa7a>
 80164e0:	3210      	adds	r2, #16
 80164e2:	607d      	str	r5, [r7, #4]
 80164e4:	922e      	str	r2, [sp, #184]	; 0xb8
 80164e6:	932d      	str	r3, [sp, #180]	; 0xb4
 80164e8:	2b07      	cmp	r3, #7
 80164ea:	dd08      	ble.n	80164fe <_svfprintf_r+0xee6>
 80164ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80164f2:	f002 fb2b 	bl	8018b4c <__ssprint_r>
 80164f6:	2800      	cmp	r0, #0
 80164f8:	d000      	beq.n	80164fc <_svfprintf_r+0xee4>
 80164fa:	e2a2      	b.n	8016a42 <_svfprintf_r+0x142a>
 80164fc:	a92f      	add	r1, sp, #188	; 0xbc
 80164fe:	000f      	movs	r7, r1
 8016500:	3c10      	subs	r4, #16
 8016502:	0039      	movs	r1, r7
 8016504:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016506:	484b      	ldr	r0, [pc, #300]	; (8016634 <_svfprintf_r+0x101c>)
 8016508:	9308      	str	r3, [sp, #32]
 801650a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801650c:	3301      	adds	r3, #1
 801650e:	3108      	adds	r1, #8
 8016510:	6038      	str	r0, [r7, #0]
 8016512:	2c10      	cmp	r4, #16
 8016514:	dce4      	bgt.n	80164e0 <_svfprintf_r+0xec8>
 8016516:	607c      	str	r4, [r7, #4]
 8016518:	18a4      	adds	r4, r4, r2
 801651a:	000f      	movs	r7, r1
 801651c:	942e      	str	r4, [sp, #184]	; 0xb8
 801651e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016520:	2b07      	cmp	r3, #7
 8016522:	ddbe      	ble.n	80164a2 <_svfprintf_r+0xe8a>
 8016524:	e067      	b.n	80165f6 <_svfprintf_r+0xfde>
 8016526:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016528:	2b00      	cmp	r3, #0
 801652a:	dd00      	ble.n	801652e <_svfprintf_r+0xf16>
 801652c:	e084      	b.n	8016638 <_svfprintf_r+0x1020>
 801652e:	4b40      	ldr	r3, [pc, #256]	; (8016630 <_svfprintf_r+0x1018>)
 8016530:	603b      	str	r3, [r7, #0]
 8016532:	2301      	movs	r3, #1
 8016534:	607b      	str	r3, [r7, #4]
 8016536:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016538:	3708      	adds	r7, #8
 801653a:	3301      	adds	r3, #1
 801653c:	932e      	str	r3, [sp, #184]	; 0xb8
 801653e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016540:	9309      	str	r3, [sp, #36]	; 0x24
 8016542:	3301      	adds	r3, #1
 8016544:	932d      	str	r3, [sp, #180]	; 0xb4
 8016546:	2b07      	cmp	r3, #7
 8016548:	dd08      	ble.n	801655c <_svfprintf_r+0xf44>
 801654a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801654c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801654e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016550:	f002 fafc 	bl	8018b4c <__ssprint_r>
 8016554:	2800      	cmp	r0, #0
 8016556:	d000      	beq.n	801655a <_svfprintf_r+0xf42>
 8016558:	e273      	b.n	8016a42 <_svfprintf_r+0x142a>
 801655a:	af2f      	add	r7, sp, #188	; 0xbc
 801655c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801655e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016560:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016562:	430b      	orrs	r3, r1
 8016564:	2101      	movs	r1, #1
 8016566:	4031      	ands	r1, r6
 8016568:	430b      	orrs	r3, r1
 801656a:	d09a      	beq.n	80164a2 <_svfprintf_r+0xe8a>
 801656c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801656e:	603b      	str	r3, [r7, #0]
 8016570:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016572:	607b      	str	r3, [r7, #4]
 8016574:	189a      	adds	r2, r3, r2
 8016576:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016578:	922e      	str	r2, [sp, #184]	; 0xb8
 801657a:	9309      	str	r3, [sp, #36]	; 0x24
 801657c:	3301      	adds	r3, #1
 801657e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016580:	3708      	adds	r7, #8
 8016582:	2b07      	cmp	r3, #7
 8016584:	dd08      	ble.n	8016598 <_svfprintf_r+0xf80>
 8016586:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016588:	980a      	ldr	r0, [sp, #40]	; 0x28
 801658a:	aa2c      	add	r2, sp, #176	; 0xb0
 801658c:	f002 fade 	bl	8018b4c <__ssprint_r>
 8016590:	2800      	cmp	r0, #0
 8016592:	d000      	beq.n	8016596 <_svfprintf_r+0xf7e>
 8016594:	e255      	b.n	8016a42 <_svfprintf_r+0x142a>
 8016596:	af2f      	add	r7, sp, #188	; 0xbc
 8016598:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801659a:	2c00      	cmp	r4, #0
 801659c:	da1a      	bge.n	80165d4 <_svfprintf_r+0xfbc>
 801659e:	0039      	movs	r1, r7
 80165a0:	2510      	movs	r5, #16
 80165a2:	4264      	negs	r4, r4
 80165a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165a6:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80165a8:	9309      	str	r3, [sp, #36]	; 0x24
 80165aa:	1c5a      	adds	r2, r3, #1
 80165ac:	4b21      	ldr	r3, [pc, #132]	; (8016634 <_svfprintf_r+0x101c>)
 80165ae:	3708      	adds	r7, #8
 80165b0:	600b      	str	r3, [r1, #0]
 80165b2:	2c10      	cmp	r4, #16
 80165b4:	dc29      	bgt.n	801660a <_svfprintf_r+0xff2>
 80165b6:	604c      	str	r4, [r1, #4]
 80165b8:	1824      	adds	r4, r4, r0
 80165ba:	942e      	str	r4, [sp, #184]	; 0xb8
 80165bc:	922d      	str	r2, [sp, #180]	; 0xb4
 80165be:	2a07      	cmp	r2, #7
 80165c0:	dd08      	ble.n	80165d4 <_svfprintf_r+0xfbc>
 80165c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80165c8:	f002 fac0 	bl	8018b4c <__ssprint_r>
 80165cc:	2800      	cmp	r0, #0
 80165ce:	d000      	beq.n	80165d2 <_svfprintf_r+0xfba>
 80165d0:	e237      	b.n	8016a42 <_svfprintf_r+0x142a>
 80165d2:	af2f      	add	r7, sp, #188	; 0xbc
 80165d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80165d6:	9b08      	ldr	r3, [sp, #32]
 80165d8:	468c      	mov	ip, r1
 80165da:	603b      	str	r3, [r7, #0]
 80165dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165de:	607b      	str	r3, [r7, #4]
 80165e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80165e2:	4463      	add	r3, ip
 80165e4:	932e      	str	r3, [sp, #184]	; 0xb8
 80165e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165e8:	1c5a      	adds	r2, r3, #1
 80165ea:	9308      	str	r3, [sp, #32]
 80165ec:	922d      	str	r2, [sp, #180]	; 0xb4
 80165ee:	2a07      	cmp	r2, #7
 80165f0:	dc01      	bgt.n	80165f6 <_svfprintf_r+0xfde>
 80165f2:	f7ff fa58 	bl	8015aa6 <_svfprintf_r+0x48e>
 80165f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80165fc:	f002 faa6 	bl	8018b4c <__ssprint_r>
 8016600:	2800      	cmp	r0, #0
 8016602:	d000      	beq.n	8016606 <_svfprintf_r+0xfee>
 8016604:	e21d      	b.n	8016a42 <_svfprintf_r+0x142a>
 8016606:	af2f      	add	r7, sp, #188	; 0xbc
 8016608:	e74b      	b.n	80164a2 <_svfprintf_r+0xe8a>
 801660a:	3010      	adds	r0, #16
 801660c:	604d      	str	r5, [r1, #4]
 801660e:	902e      	str	r0, [sp, #184]	; 0xb8
 8016610:	922d      	str	r2, [sp, #180]	; 0xb4
 8016612:	2a07      	cmp	r2, #7
 8016614:	dd08      	ble.n	8016628 <_svfprintf_r+0x1010>
 8016616:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016618:	980a      	ldr	r0, [sp, #40]	; 0x28
 801661a:	aa2c      	add	r2, sp, #176	; 0xb0
 801661c:	f002 fa96 	bl	8018b4c <__ssprint_r>
 8016620:	2800      	cmp	r0, #0
 8016622:	d000      	beq.n	8016626 <_svfprintf_r+0x100e>
 8016624:	e20d      	b.n	8016a42 <_svfprintf_r+0x142a>
 8016626:	af2f      	add	r7, sp, #188	; 0xbc
 8016628:	0039      	movs	r1, r7
 801662a:	3c10      	subs	r4, #16
 801662c:	e7ba      	b.n	80165a4 <_svfprintf_r+0xf8c>
 801662e:	46c0      	nop			; (mov r8, r8)
 8016630:	0801da22 	.word	0x0801da22
 8016634:	0801da34 	.word	0x0801da34
 8016638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801663a:	002c      	movs	r4, r5
 801663c:	429d      	cmp	r5, r3
 801663e:	dd00      	ble.n	8016642 <_svfprintf_r+0x102a>
 8016640:	001c      	movs	r4, r3
 8016642:	2c00      	cmp	r4, #0
 8016644:	dd15      	ble.n	8016672 <_svfprintf_r+0x105a>
 8016646:	9b08      	ldr	r3, [sp, #32]
 8016648:	607c      	str	r4, [r7, #4]
 801664a:	603b      	str	r3, [r7, #0]
 801664c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801664e:	3708      	adds	r7, #8
 8016650:	18e3      	adds	r3, r4, r3
 8016652:	932e      	str	r3, [sp, #184]	; 0xb8
 8016654:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016656:	9309      	str	r3, [sp, #36]	; 0x24
 8016658:	3301      	adds	r3, #1
 801665a:	932d      	str	r3, [sp, #180]	; 0xb4
 801665c:	2b07      	cmp	r3, #7
 801665e:	dd08      	ble.n	8016672 <_svfprintf_r+0x105a>
 8016660:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016662:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016664:	aa2c      	add	r2, sp, #176	; 0xb0
 8016666:	f002 fa71 	bl	8018b4c <__ssprint_r>
 801666a:	2800      	cmp	r0, #0
 801666c:	d000      	beq.n	8016670 <_svfprintf_r+0x1058>
 801666e:	e1e8      	b.n	8016a42 <_svfprintf_r+0x142a>
 8016670:	af2f      	add	r7, sp, #188	; 0xbc
 8016672:	43e3      	mvns	r3, r4
 8016674:	17db      	asrs	r3, r3, #31
 8016676:	401c      	ands	r4, r3
 8016678:	1b2c      	subs	r4, r5, r4
 801667a:	2c00      	cmp	r4, #0
 801667c:	dd1a      	ble.n	80166b4 <_svfprintf_r+0x109c>
 801667e:	0039      	movs	r1, r7
 8016680:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016682:	48ca      	ldr	r0, [pc, #808]	; (80169ac <_svfprintf_r+0x1394>)
 8016684:	9309      	str	r3, [sp, #36]	; 0x24
 8016686:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016688:	3301      	adds	r3, #1
 801668a:	3108      	adds	r1, #8
 801668c:	6038      	str	r0, [r7, #0]
 801668e:	2c10      	cmp	r4, #16
 8016690:	dd00      	ble.n	8016694 <_svfprintf_r+0x107c>
 8016692:	e08a      	b.n	80167aa <_svfprintf_r+0x1192>
 8016694:	607c      	str	r4, [r7, #4]
 8016696:	18a4      	adds	r4, r4, r2
 8016698:	000f      	movs	r7, r1
 801669a:	942e      	str	r4, [sp, #184]	; 0xb8
 801669c:	932d      	str	r3, [sp, #180]	; 0xb4
 801669e:	2b07      	cmp	r3, #7
 80166a0:	dd08      	ble.n	80166b4 <_svfprintf_r+0x109c>
 80166a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166a6:	aa2c      	add	r2, sp, #176	; 0xb0
 80166a8:	f002 fa50 	bl	8018b4c <__ssprint_r>
 80166ac:	2800      	cmp	r0, #0
 80166ae:	d000      	beq.n	80166b2 <_svfprintf_r+0x109a>
 80166b0:	e1c7      	b.n	8016a42 <_svfprintf_r+0x142a>
 80166b2:	af2f      	add	r7, sp, #188	; 0xbc
 80166b4:	9b08      	ldr	r3, [sp, #32]
 80166b6:	195d      	adds	r5, r3, r5
 80166b8:	0573      	lsls	r3, r6, #21
 80166ba:	d50d      	bpl.n	80166d8 <_svfprintf_r+0x10c0>
 80166bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d000      	beq.n	80166c4 <_svfprintf_r+0x10ac>
 80166c2:	e085      	b.n	80167d0 <_svfprintf_r+0x11b8>
 80166c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d000      	beq.n	80166cc <_svfprintf_r+0x10b4>
 80166ca:	e084      	b.n	80167d6 <_svfprintf_r+0x11be>
 80166cc:	9b08      	ldr	r3, [sp, #32]
 80166ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80166d0:	189b      	adds	r3, r3, r2
 80166d2:	429d      	cmp	r5, r3
 80166d4:	d900      	bls.n	80166d8 <_svfprintf_r+0x10c0>
 80166d6:	001d      	movs	r5, r3
 80166d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80166da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80166dc:	4293      	cmp	r3, r2
 80166de:	db01      	blt.n	80166e4 <_svfprintf_r+0x10cc>
 80166e0:	07f3      	lsls	r3, r6, #31
 80166e2:	d518      	bpl.n	8016716 <_svfprintf_r+0x10fe>
 80166e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80166e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80166e8:	4694      	mov	ip, r2
 80166ea:	603b      	str	r3, [r7, #0]
 80166ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80166ee:	607b      	str	r3, [r7, #4]
 80166f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80166f2:	3708      	adds	r7, #8
 80166f4:	4463      	add	r3, ip
 80166f6:	932e      	str	r3, [sp, #184]	; 0xb8
 80166f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166fa:	9309      	str	r3, [sp, #36]	; 0x24
 80166fc:	3301      	adds	r3, #1
 80166fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8016700:	2b07      	cmp	r3, #7
 8016702:	dd08      	ble.n	8016716 <_svfprintf_r+0x10fe>
 8016704:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016706:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016708:	aa2c      	add	r2, sp, #176	; 0xb0
 801670a:	f002 fa1f 	bl	8018b4c <__ssprint_r>
 801670e:	2800      	cmp	r0, #0
 8016710:	d000      	beq.n	8016714 <_svfprintf_r+0x10fc>
 8016712:	e196      	b.n	8016a42 <_svfprintf_r+0x142a>
 8016714:	af2f      	add	r7, sp, #188	; 0xbc
 8016716:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016718:	9b08      	ldr	r3, [sp, #32]
 801671a:	4694      	mov	ip, r2
 801671c:	4463      	add	r3, ip
 801671e:	1b58      	subs	r0, r3, r5
 8016720:	0013      	movs	r3, r2
 8016722:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016724:	1a9c      	subs	r4, r3, r2
 8016726:	4284      	cmp	r4, r0
 8016728:	dd00      	ble.n	801672c <_svfprintf_r+0x1114>
 801672a:	0004      	movs	r4, r0
 801672c:	2c00      	cmp	r4, #0
 801672e:	dd14      	ble.n	801675a <_svfprintf_r+0x1142>
 8016730:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016732:	603d      	str	r5, [r7, #0]
 8016734:	18e3      	adds	r3, r4, r3
 8016736:	932e      	str	r3, [sp, #184]	; 0xb8
 8016738:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801673a:	607c      	str	r4, [r7, #4]
 801673c:	9308      	str	r3, [sp, #32]
 801673e:	3301      	adds	r3, #1
 8016740:	932d      	str	r3, [sp, #180]	; 0xb4
 8016742:	3708      	adds	r7, #8
 8016744:	2b07      	cmp	r3, #7
 8016746:	dd08      	ble.n	801675a <_svfprintf_r+0x1142>
 8016748:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801674a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801674c:	aa2c      	add	r2, sp, #176	; 0xb0
 801674e:	f002 f9fd 	bl	8018b4c <__ssprint_r>
 8016752:	2800      	cmp	r0, #0
 8016754:	d000      	beq.n	8016758 <_svfprintf_r+0x1140>
 8016756:	e174      	b.n	8016a42 <_svfprintf_r+0x142a>
 8016758:	af2f      	add	r7, sp, #188	; 0xbc
 801675a:	43e3      	mvns	r3, r4
 801675c:	17db      	asrs	r3, r3, #31
 801675e:	401c      	ands	r4, r3
 8016760:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016764:	2510      	movs	r5, #16
 8016766:	1a9b      	subs	r3, r3, r2
 8016768:	1b1c      	subs	r4, r3, r4
 801676a:	2c00      	cmp	r4, #0
 801676c:	dc00      	bgt.n	8016770 <_svfprintf_r+0x1158>
 801676e:	e698      	b.n	80164a2 <_svfprintf_r+0xe8a>
 8016770:	0039      	movs	r1, r7
 8016772:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016774:	488d      	ldr	r0, [pc, #564]	; (80169ac <_svfprintf_r+0x1394>)
 8016776:	9308      	str	r3, [sp, #32]
 8016778:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801677a:	3301      	adds	r3, #1
 801677c:	3108      	adds	r1, #8
 801677e:	6038      	str	r0, [r7, #0]
 8016780:	2c10      	cmp	r4, #16
 8016782:	dc00      	bgt.n	8016786 <_svfprintf_r+0x116e>
 8016784:	e6c7      	b.n	8016516 <_svfprintf_r+0xefe>
 8016786:	3210      	adds	r2, #16
 8016788:	607d      	str	r5, [r7, #4]
 801678a:	922e      	str	r2, [sp, #184]	; 0xb8
 801678c:	932d      	str	r3, [sp, #180]	; 0xb4
 801678e:	2b07      	cmp	r3, #7
 8016790:	dd08      	ble.n	80167a4 <_svfprintf_r+0x118c>
 8016792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016794:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016796:	aa2c      	add	r2, sp, #176	; 0xb0
 8016798:	f002 f9d8 	bl	8018b4c <__ssprint_r>
 801679c:	2800      	cmp	r0, #0
 801679e:	d000      	beq.n	80167a2 <_svfprintf_r+0x118a>
 80167a0:	e14f      	b.n	8016a42 <_svfprintf_r+0x142a>
 80167a2:	a92f      	add	r1, sp, #188	; 0xbc
 80167a4:	000f      	movs	r7, r1
 80167a6:	3c10      	subs	r4, #16
 80167a8:	e7e2      	b.n	8016770 <_svfprintf_r+0x1158>
 80167aa:	2010      	movs	r0, #16
 80167ac:	1812      	adds	r2, r2, r0
 80167ae:	6078      	str	r0, [r7, #4]
 80167b0:	922e      	str	r2, [sp, #184]	; 0xb8
 80167b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80167b4:	2b07      	cmp	r3, #7
 80167b6:	dd08      	ble.n	80167ca <_svfprintf_r+0x11b2>
 80167b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167bc:	aa2c      	add	r2, sp, #176	; 0xb0
 80167be:	f002 f9c5 	bl	8018b4c <__ssprint_r>
 80167c2:	2800      	cmp	r0, #0
 80167c4:	d000      	beq.n	80167c8 <_svfprintf_r+0x11b0>
 80167c6:	e13c      	b.n	8016a42 <_svfprintf_r+0x142a>
 80167c8:	a92f      	add	r1, sp, #188	; 0xbc
 80167ca:	000f      	movs	r7, r1
 80167cc:	3c10      	subs	r4, #16
 80167ce:	e756      	b.n	801667e <_svfprintf_r+0x1066>
 80167d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d061      	beq.n	801689a <_svfprintf_r+0x1282>
 80167d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167d8:	3b01      	subs	r3, #1
 80167da:	9310      	str	r3, [sp, #64]	; 0x40
 80167dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80167de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80167e0:	4694      	mov	ip, r2
 80167e2:	603b      	str	r3, [r7, #0]
 80167e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167e6:	607b      	str	r3, [r7, #4]
 80167e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80167ea:	3708      	adds	r7, #8
 80167ec:	4463      	add	r3, ip
 80167ee:	932e      	str	r3, [sp, #184]	; 0xb8
 80167f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80167f2:	9309      	str	r3, [sp, #36]	; 0x24
 80167f4:	3301      	adds	r3, #1
 80167f6:	932d      	str	r3, [sp, #180]	; 0xb4
 80167f8:	2b07      	cmp	r3, #7
 80167fa:	dd08      	ble.n	801680e <_svfprintf_r+0x11f6>
 80167fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016800:	aa2c      	add	r2, sp, #176	; 0xb0
 8016802:	f002 f9a3 	bl	8018b4c <__ssprint_r>
 8016806:	2800      	cmp	r0, #0
 8016808:	d000      	beq.n	801680c <_svfprintf_r+0x11f4>
 801680a:	e11a      	b.n	8016a42 <_svfprintf_r+0x142a>
 801680c:	af2f      	add	r7, sp, #188	; 0xbc
 801680e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016810:	9b08      	ldr	r3, [sp, #32]
 8016812:	189b      	adds	r3, r3, r2
 8016814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016816:	1b5b      	subs	r3, r3, r5
 8016818:	7814      	ldrb	r4, [r2, #0]
 801681a:	429c      	cmp	r4, r3
 801681c:	dd00      	ble.n	8016820 <_svfprintf_r+0x1208>
 801681e:	001c      	movs	r4, r3
 8016820:	2c00      	cmp	r4, #0
 8016822:	dd14      	ble.n	801684e <_svfprintf_r+0x1236>
 8016824:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016826:	603d      	str	r5, [r7, #0]
 8016828:	18e3      	adds	r3, r4, r3
 801682a:	932e      	str	r3, [sp, #184]	; 0xb8
 801682c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801682e:	607c      	str	r4, [r7, #4]
 8016830:	9309      	str	r3, [sp, #36]	; 0x24
 8016832:	3301      	adds	r3, #1
 8016834:	932d      	str	r3, [sp, #180]	; 0xb4
 8016836:	3708      	adds	r7, #8
 8016838:	2b07      	cmp	r3, #7
 801683a:	dd08      	ble.n	801684e <_svfprintf_r+0x1236>
 801683c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801683e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016840:	aa2c      	add	r2, sp, #176	; 0xb0
 8016842:	f002 f983 	bl	8018b4c <__ssprint_r>
 8016846:	2800      	cmp	r0, #0
 8016848:	d000      	beq.n	801684c <_svfprintf_r+0x1234>
 801684a:	e0fa      	b.n	8016a42 <_svfprintf_r+0x142a>
 801684c:	af2f      	add	r7, sp, #188	; 0xbc
 801684e:	43e3      	mvns	r3, r4
 8016850:	17db      	asrs	r3, r3, #31
 8016852:	401c      	ands	r4, r3
 8016854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016856:	781b      	ldrb	r3, [r3, #0]
 8016858:	1b1c      	subs	r4, r3, r4
 801685a:	2c00      	cmp	r4, #0
 801685c:	dd19      	ble.n	8016892 <_svfprintf_r+0x127a>
 801685e:	0039      	movs	r1, r7
 8016860:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016862:	4852      	ldr	r0, [pc, #328]	; (80169ac <_svfprintf_r+0x1394>)
 8016864:	9309      	str	r3, [sp, #36]	; 0x24
 8016866:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016868:	3301      	adds	r3, #1
 801686a:	3108      	adds	r1, #8
 801686c:	6038      	str	r0, [r7, #0]
 801686e:	2c10      	cmp	r4, #16
 8016870:	dc1a      	bgt.n	80168a8 <_svfprintf_r+0x1290>
 8016872:	607c      	str	r4, [r7, #4]
 8016874:	18a4      	adds	r4, r4, r2
 8016876:	000f      	movs	r7, r1
 8016878:	942e      	str	r4, [sp, #184]	; 0xb8
 801687a:	932d      	str	r3, [sp, #180]	; 0xb4
 801687c:	2b07      	cmp	r3, #7
 801687e:	dd08      	ble.n	8016892 <_svfprintf_r+0x127a>
 8016880:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016882:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016884:	aa2c      	add	r2, sp, #176	; 0xb0
 8016886:	f002 f961 	bl	8018b4c <__ssprint_r>
 801688a:	2800      	cmp	r0, #0
 801688c:	d000      	beq.n	8016890 <_svfprintf_r+0x1278>
 801688e:	e0d8      	b.n	8016a42 <_svfprintf_r+0x142a>
 8016890:	af2f      	add	r7, sp, #188	; 0xbc
 8016892:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016894:	781b      	ldrb	r3, [r3, #0]
 8016896:	18ed      	adds	r5, r5, r3
 8016898:	e710      	b.n	80166bc <_svfprintf_r+0x10a4>
 801689a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801689c:	3b01      	subs	r3, #1
 801689e:	9312      	str	r3, [sp, #72]	; 0x48
 80168a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80168a2:	3b01      	subs	r3, #1
 80168a4:	9311      	str	r3, [sp, #68]	; 0x44
 80168a6:	e799      	b.n	80167dc <_svfprintf_r+0x11c4>
 80168a8:	2010      	movs	r0, #16
 80168aa:	1812      	adds	r2, r2, r0
 80168ac:	6078      	str	r0, [r7, #4]
 80168ae:	922e      	str	r2, [sp, #184]	; 0xb8
 80168b0:	932d      	str	r3, [sp, #180]	; 0xb4
 80168b2:	2b07      	cmp	r3, #7
 80168b4:	dd08      	ble.n	80168c8 <_svfprintf_r+0x12b0>
 80168b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80168bc:	f002 f946 	bl	8018b4c <__ssprint_r>
 80168c0:	2800      	cmp	r0, #0
 80168c2:	d000      	beq.n	80168c6 <_svfprintf_r+0x12ae>
 80168c4:	e0bd      	b.n	8016a42 <_svfprintf_r+0x142a>
 80168c6:	a92f      	add	r1, sp, #188	; 0xbc
 80168c8:	000f      	movs	r7, r1
 80168ca:	3c10      	subs	r4, #16
 80168cc:	e7c7      	b.n	801685e <_svfprintf_r+0x1246>
 80168ce:	003c      	movs	r4, r7
 80168d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80168d2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80168d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80168d6:	9309      	str	r3, [sp, #36]	; 0x24
 80168d8:	3101      	adds	r1, #1
 80168da:	3301      	adds	r3, #1
 80168dc:	3408      	adds	r4, #8
 80168de:	2a01      	cmp	r2, #1
 80168e0:	dc03      	bgt.n	80168ea <_svfprintf_r+0x12d2>
 80168e2:	2201      	movs	r2, #1
 80168e4:	4216      	tst	r6, r2
 80168e6:	d100      	bne.n	80168ea <_svfprintf_r+0x12d2>
 80168e8:	e088      	b.n	80169fc <_svfprintf_r+0x13e4>
 80168ea:	9a08      	ldr	r2, [sp, #32]
 80168ec:	912e      	str	r1, [sp, #184]	; 0xb8
 80168ee:	603a      	str	r2, [r7, #0]
 80168f0:	2201      	movs	r2, #1
 80168f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80168f4:	607a      	str	r2, [r7, #4]
 80168f6:	2b07      	cmp	r3, #7
 80168f8:	dd08      	ble.n	801690c <_svfprintf_r+0x12f4>
 80168fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8016900:	f002 f924 	bl	8018b4c <__ssprint_r>
 8016904:	2800      	cmp	r0, #0
 8016906:	d000      	beq.n	801690a <_svfprintf_r+0x12f2>
 8016908:	e09b      	b.n	8016a42 <_svfprintf_r+0x142a>
 801690a:	ac2f      	add	r4, sp, #188	; 0xbc
 801690c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801690e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016910:	4694      	mov	ip, r2
 8016912:	6023      	str	r3, [r4, #0]
 8016914:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016916:	6063      	str	r3, [r4, #4]
 8016918:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801691a:	3408      	adds	r4, #8
 801691c:	4463      	add	r3, ip
 801691e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016920:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016922:	9309      	str	r3, [sp, #36]	; 0x24
 8016924:	3301      	adds	r3, #1
 8016926:	932d      	str	r3, [sp, #180]	; 0xb4
 8016928:	2b07      	cmp	r3, #7
 801692a:	dd08      	ble.n	801693e <_svfprintf_r+0x1326>
 801692c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801692e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016930:	aa2c      	add	r2, sp, #176	; 0xb0
 8016932:	f002 f90b 	bl	8018b4c <__ssprint_r>
 8016936:	2800      	cmp	r0, #0
 8016938:	d000      	beq.n	801693c <_svfprintf_r+0x1324>
 801693a:	e082      	b.n	8016a42 <_svfprintf_r+0x142a>
 801693c:	ac2f      	add	r4, sp, #188	; 0xbc
 801693e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016940:	2200      	movs	r2, #0
 8016942:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016944:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016946:	1e5d      	subs	r5, r3, #1
 8016948:	2300      	movs	r3, #0
 801694a:	f7e9 fd87 	bl	800045c <__aeabi_dcmpeq>
 801694e:	2800      	cmp	r0, #0
 8016950:	d12e      	bne.n	80169b0 <_svfprintf_r+0x1398>
 8016952:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016954:	9808      	ldr	r0, [sp, #32]
 8016956:	9309      	str	r3, [sp, #36]	; 0x24
 8016958:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801695a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801695c:	1c59      	adds	r1, r3, #1
 801695e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016962:	3001      	adds	r0, #1
 8016964:	3b01      	subs	r3, #1
 8016966:	189b      	adds	r3, r3, r2
 8016968:	6020      	str	r0, [r4, #0]
 801696a:	6065      	str	r5, [r4, #4]
 801696c:	932e      	str	r3, [sp, #184]	; 0xb8
 801696e:	912d      	str	r1, [sp, #180]	; 0xb4
 8016970:	3408      	adds	r4, #8
 8016972:	2907      	cmp	r1, #7
 8016974:	dd07      	ble.n	8016986 <_svfprintf_r+0x136e>
 8016976:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016978:	980a      	ldr	r0, [sp, #40]	; 0x28
 801697a:	aa2c      	add	r2, sp, #176	; 0xb0
 801697c:	f002 f8e6 	bl	8018b4c <__ssprint_r>
 8016980:	2800      	cmp	r0, #0
 8016982:	d15e      	bne.n	8016a42 <_svfprintf_r+0x142a>
 8016984:	ac2f      	add	r4, sp, #188	; 0xbc
 8016986:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016988:	ab28      	add	r3, sp, #160	; 0xa0
 801698a:	4694      	mov	ip, r2
 801698c:	6023      	str	r3, [r4, #0]
 801698e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016990:	6063      	str	r3, [r4, #4]
 8016992:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016994:	4463      	add	r3, ip
 8016996:	932e      	str	r3, [sp, #184]	; 0xb8
 8016998:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801699a:	9308      	str	r3, [sp, #32]
 801699c:	3301      	adds	r3, #1
 801699e:	932d      	str	r3, [sp, #180]	; 0xb4
 80169a0:	2b07      	cmp	r3, #7
 80169a2:	dd00      	ble.n	80169a6 <_svfprintf_r+0x138e>
 80169a4:	e627      	b.n	80165f6 <_svfprintf_r+0xfde>
 80169a6:	3408      	adds	r4, #8
 80169a8:	0027      	movs	r7, r4
 80169aa:	e57a      	b.n	80164a2 <_svfprintf_r+0xe8a>
 80169ac:	0801da34 	.word	0x0801da34
 80169b0:	2710      	movs	r7, #16
 80169b2:	2d00      	cmp	r5, #0
 80169b4:	dde7      	ble.n	8016986 <_svfprintf_r+0x136e>
 80169b6:	0021      	movs	r1, r4
 80169b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169ba:	4857      	ldr	r0, [pc, #348]	; (8016b18 <_svfprintf_r+0x1500>)
 80169bc:	9308      	str	r3, [sp, #32]
 80169be:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80169c0:	3301      	adds	r3, #1
 80169c2:	3108      	adds	r1, #8
 80169c4:	6020      	str	r0, [r4, #0]
 80169c6:	2d10      	cmp	r5, #16
 80169c8:	dc07      	bgt.n	80169da <_svfprintf_r+0x13c2>
 80169ca:	6065      	str	r5, [r4, #4]
 80169cc:	000c      	movs	r4, r1
 80169ce:	18ad      	adds	r5, r5, r2
 80169d0:	952e      	str	r5, [sp, #184]	; 0xb8
 80169d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80169d4:	2b07      	cmp	r3, #7
 80169d6:	ddd6      	ble.n	8016986 <_svfprintf_r+0x136e>
 80169d8:	e7cd      	b.n	8016976 <_svfprintf_r+0x135e>
 80169da:	3210      	adds	r2, #16
 80169dc:	6067      	str	r7, [r4, #4]
 80169de:	922e      	str	r2, [sp, #184]	; 0xb8
 80169e0:	932d      	str	r3, [sp, #180]	; 0xb4
 80169e2:	2b07      	cmp	r3, #7
 80169e4:	dd07      	ble.n	80169f6 <_svfprintf_r+0x13de>
 80169e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169ea:	aa2c      	add	r2, sp, #176	; 0xb0
 80169ec:	f002 f8ae 	bl	8018b4c <__ssprint_r>
 80169f0:	2800      	cmp	r0, #0
 80169f2:	d126      	bne.n	8016a42 <_svfprintf_r+0x142a>
 80169f4:	a92f      	add	r1, sp, #188	; 0xbc
 80169f6:	000c      	movs	r4, r1
 80169f8:	3d10      	subs	r5, #16
 80169fa:	e7dc      	b.n	80169b6 <_svfprintf_r+0x139e>
 80169fc:	9808      	ldr	r0, [sp, #32]
 80169fe:	912e      	str	r1, [sp, #184]	; 0xb8
 8016a00:	c705      	stmia	r7!, {r0, r2}
 8016a02:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a04:	e7e6      	b.n	80169d4 <_svfprintf_r+0x13bc>
 8016a06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016a08:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016a0a:	2510      	movs	r5, #16
 8016a0c:	1a9c      	subs	r4, r3, r2
 8016a0e:	2c00      	cmp	r4, #0
 8016a10:	dc00      	bgt.n	8016a14 <_svfprintf_r+0x13fc>
 8016a12:	e549      	b.n	80164a8 <_svfprintf_r+0xe90>
 8016a14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a16:	4941      	ldr	r1, [pc, #260]	; (8016b1c <_svfprintf_r+0x1504>)
 8016a18:	9308      	str	r3, [sp, #32]
 8016a1a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016a1c:	3301      	adds	r3, #1
 8016a1e:	6039      	str	r1, [r7, #0]
 8016a20:	2c10      	cmp	r4, #16
 8016a22:	dc19      	bgt.n	8016a58 <_svfprintf_r+0x1440>
 8016a24:	607c      	str	r4, [r7, #4]
 8016a26:	1914      	adds	r4, r2, r4
 8016a28:	942e      	str	r4, [sp, #184]	; 0xb8
 8016a2a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a2c:	2b07      	cmp	r3, #7
 8016a2e:	dc00      	bgt.n	8016a32 <_svfprintf_r+0x141a>
 8016a30:	e53a      	b.n	80164a8 <_svfprintf_r+0xe90>
 8016a32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a36:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a38:	f002 f888 	bl	8018b4c <__ssprint_r>
 8016a3c:	2800      	cmp	r0, #0
 8016a3e:	d100      	bne.n	8016a42 <_svfprintf_r+0x142a>
 8016a40:	e532      	b.n	80164a8 <_svfprintf_r+0xe90>
 8016a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d101      	bne.n	8016a4c <_svfprintf_r+0x1434>
 8016a48:	f7ff f8ec 	bl	8015c24 <_svfprintf_r+0x60c>
 8016a4c:	0019      	movs	r1, r3
 8016a4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a50:	f000 ff66 	bl	8017920 <_free_r>
 8016a54:	f7ff f8e6 	bl	8015c24 <_svfprintf_r+0x60c>
 8016a58:	3210      	adds	r2, #16
 8016a5a:	607d      	str	r5, [r7, #4]
 8016a5c:	922e      	str	r2, [sp, #184]	; 0xb8
 8016a5e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a60:	3708      	adds	r7, #8
 8016a62:	2b07      	cmp	r3, #7
 8016a64:	dd07      	ble.n	8016a76 <_svfprintf_r+0x145e>
 8016a66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a68:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a6a:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a6c:	f002 f86e 	bl	8018b4c <__ssprint_r>
 8016a70:	2800      	cmp	r0, #0
 8016a72:	d1e6      	bne.n	8016a42 <_svfprintf_r+0x142a>
 8016a74:	af2f      	add	r7, sp, #188	; 0xbc
 8016a76:	3c10      	subs	r4, #16
 8016a78:	e7cc      	b.n	8016a14 <_svfprintf_r+0x13fc>
 8016a7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016a7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a7e:	f000 ff4f 	bl	8017920 <_free_r>
 8016a82:	e52b      	b.n	80164dc <_svfprintf_r+0xec4>
 8016a84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016a86:	9306      	str	r3, [sp, #24]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d101      	bne.n	8016a90 <_svfprintf_r+0x1478>
 8016a8c:	f7ff f8ca 	bl	8015c24 <_svfprintf_r+0x60c>
 8016a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a94:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a96:	f002 f859 	bl	8018b4c <__ssprint_r>
 8016a9a:	f7ff f8c3 	bl	8015c24 <_svfprintf_r+0x60c>
 8016a9e:	0035      	movs	r5, r6
 8016aa0:	2a00      	cmp	r2, #0
 8016aa2:	d101      	bne.n	8016aa8 <_svfprintf_r+0x1490>
 8016aa4:	f7ff f832 	bl	8015b0c <_svfprintf_r+0x4f4>
 8016aa8:	2b01      	cmp	r3, #1
 8016aaa:	d101      	bne.n	8016ab0 <_svfprintf_r+0x1498>
 8016aac:	f7ff fbdf 	bl	801626e <_svfprintf_r+0xc56>
 8016ab0:	2b02      	cmp	r3, #2
 8016ab2:	d100      	bne.n	8016ab6 <_svfprintf_r+0x149e>
 8016ab4:	e430      	b.n	8016318 <_svfprintf_r+0xd00>
 8016ab6:	2607      	movs	r6, #7
 8016ab8:	ab58      	add	r3, sp, #352	; 0x160
 8016aba:	9308      	str	r3, [sp, #32]
 8016abc:	9908      	ldr	r1, [sp, #32]
 8016abe:	000b      	movs	r3, r1
 8016ac0:	3b01      	subs	r3, #1
 8016ac2:	9308      	str	r3, [sp, #32]
 8016ac4:	9b06      	ldr	r3, [sp, #24]
 8016ac6:	9a08      	ldr	r2, [sp, #32]
 8016ac8:	4033      	ands	r3, r6
 8016aca:	3330      	adds	r3, #48	; 0x30
 8016acc:	7013      	strb	r3, [r2, #0]
 8016ace:	9a07      	ldr	r2, [sp, #28]
 8016ad0:	0754      	lsls	r4, r2, #29
 8016ad2:	9a06      	ldr	r2, [sp, #24]
 8016ad4:	08d0      	lsrs	r0, r2, #3
 8016ad6:	9a07      	ldr	r2, [sp, #28]
 8016ad8:	4304      	orrs	r4, r0
 8016ada:	08d2      	lsrs	r2, r2, #3
 8016adc:	9207      	str	r2, [sp, #28]
 8016ade:	0022      	movs	r2, r4
 8016ae0:	9807      	ldr	r0, [sp, #28]
 8016ae2:	9406      	str	r4, [sp, #24]
 8016ae4:	4302      	orrs	r2, r0
 8016ae6:	d1e9      	bne.n	8016abc <_svfprintf_r+0x14a4>
 8016ae8:	07ea      	lsls	r2, r5, #31
 8016aea:	d507      	bpl.n	8016afc <_svfprintf_r+0x14e4>
 8016aec:	2b30      	cmp	r3, #48	; 0x30
 8016aee:	d005      	beq.n	8016afc <_svfprintf_r+0x14e4>
 8016af0:	2330      	movs	r3, #48	; 0x30
 8016af2:	9808      	ldr	r0, [sp, #32]
 8016af4:	3801      	subs	r0, #1
 8016af6:	7003      	strb	r3, [r0, #0]
 8016af8:	1e8b      	subs	r3, r1, #2
 8016afa:	9308      	str	r3, [sp, #32]
 8016afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016afe:	9a08      	ldr	r2, [sp, #32]
 8016b00:	9319      	str	r3, [sp, #100]	; 0x64
 8016b02:	ab58      	add	r3, sp, #352	; 0x160
 8016b04:	1a9b      	subs	r3, r3, r2
 8016b06:	9309      	str	r3, [sp, #36]	; 0x24
 8016b08:	2300      	movs	r3, #0
 8016b0a:	002e      	movs	r6, r5
 8016b0c:	930c      	str	r3, [sp, #48]	; 0x30
 8016b0e:	001d      	movs	r5, r3
 8016b10:	9310      	str	r3, [sp, #64]	; 0x40
 8016b12:	9311      	str	r3, [sp, #68]	; 0x44
 8016b14:	f7fe feee 	bl	80158f4 <_svfprintf_r+0x2dc>
 8016b18:	0801da34 	.word	0x0801da34
 8016b1c:	0801da24 	.word	0x0801da24

08016b20 <sysconf>:
 8016b20:	2380      	movs	r3, #128	; 0x80
 8016b22:	b510      	push	{r4, lr}
 8016b24:	015b      	lsls	r3, r3, #5
 8016b26:	2808      	cmp	r0, #8
 8016b28:	d004      	beq.n	8016b34 <sysconf+0x14>
 8016b2a:	f000 fe8b 	bl	8017844 <__errno>
 8016b2e:	2316      	movs	r3, #22
 8016b30:	6003      	str	r3, [r0, #0]
 8016b32:	3b17      	subs	r3, #23
 8016b34:	0018      	movs	r0, r3
 8016b36:	bd10      	pop	{r4, pc}

08016b38 <register_fini>:
 8016b38:	4b03      	ldr	r3, [pc, #12]	; (8016b48 <register_fini+0x10>)
 8016b3a:	b510      	push	{r4, lr}
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d002      	beq.n	8016b46 <register_fini+0xe>
 8016b40:	4802      	ldr	r0, [pc, #8]	; (8016b4c <register_fini+0x14>)
 8016b42:	f000 f805 	bl	8016b50 <atexit>
 8016b46:	bd10      	pop	{r4, pc}
 8016b48:	00000000 	.word	0x00000000
 8016b4c:	08017851 	.word	0x08017851

08016b50 <atexit>:
 8016b50:	2300      	movs	r3, #0
 8016b52:	b510      	push	{r4, lr}
 8016b54:	0001      	movs	r1, r0
 8016b56:	001a      	movs	r2, r3
 8016b58:	0018      	movs	r0, r3
 8016b5a:	f002 f885 	bl	8018c68 <__register_exitproc>
 8016b5e:	bd10      	pop	{r4, pc}

08016b60 <quorem>:
 8016b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b62:	0006      	movs	r6, r0
 8016b64:	690d      	ldr	r5, [r1, #16]
 8016b66:	6933      	ldr	r3, [r6, #16]
 8016b68:	b087      	sub	sp, #28
 8016b6a:	2000      	movs	r0, #0
 8016b6c:	9102      	str	r1, [sp, #8]
 8016b6e:	42ab      	cmp	r3, r5
 8016b70:	db6b      	blt.n	8016c4a <quorem+0xea>
 8016b72:	000b      	movs	r3, r1
 8016b74:	3d01      	subs	r5, #1
 8016b76:	00ac      	lsls	r4, r5, #2
 8016b78:	3314      	adds	r3, #20
 8016b7a:	9305      	str	r3, [sp, #20]
 8016b7c:	191b      	adds	r3, r3, r4
 8016b7e:	9303      	str	r3, [sp, #12]
 8016b80:	0033      	movs	r3, r6
 8016b82:	3314      	adds	r3, #20
 8016b84:	9301      	str	r3, [sp, #4]
 8016b86:	191c      	adds	r4, r3, r4
 8016b88:	9b03      	ldr	r3, [sp, #12]
 8016b8a:	6827      	ldr	r7, [r4, #0]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	0038      	movs	r0, r7
 8016b90:	9300      	str	r3, [sp, #0]
 8016b92:	3301      	adds	r3, #1
 8016b94:	0019      	movs	r1, r3
 8016b96:	9304      	str	r3, [sp, #16]
 8016b98:	f7e9 fada 	bl	8000150 <__udivsi3>
 8016b9c:	9b04      	ldr	r3, [sp, #16]
 8016b9e:	9000      	str	r0, [sp, #0]
 8016ba0:	429f      	cmp	r7, r3
 8016ba2:	d329      	bcc.n	8016bf8 <quorem+0x98>
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	469c      	mov	ip, r3
 8016ba8:	9801      	ldr	r0, [sp, #4]
 8016baa:	9f05      	ldr	r7, [sp, #20]
 8016bac:	9304      	str	r3, [sp, #16]
 8016bae:	cf08      	ldmia	r7!, {r3}
 8016bb0:	9a00      	ldr	r2, [sp, #0]
 8016bb2:	b299      	uxth	r1, r3
 8016bb4:	4351      	muls	r1, r2
 8016bb6:	0c1b      	lsrs	r3, r3, #16
 8016bb8:	4353      	muls	r3, r2
 8016bba:	4461      	add	r1, ip
 8016bbc:	0c0a      	lsrs	r2, r1, #16
 8016bbe:	189b      	adds	r3, r3, r2
 8016bc0:	0c1a      	lsrs	r2, r3, #16
 8016bc2:	9305      	str	r3, [sp, #20]
 8016bc4:	6803      	ldr	r3, [r0, #0]
 8016bc6:	4694      	mov	ip, r2
 8016bc8:	b29a      	uxth	r2, r3
 8016bca:	9b04      	ldr	r3, [sp, #16]
 8016bcc:	b289      	uxth	r1, r1
 8016bce:	18d2      	adds	r2, r2, r3
 8016bd0:	6803      	ldr	r3, [r0, #0]
 8016bd2:	1a52      	subs	r2, r2, r1
 8016bd4:	0c19      	lsrs	r1, r3, #16
 8016bd6:	466b      	mov	r3, sp
 8016bd8:	8a9b      	ldrh	r3, [r3, #20]
 8016bda:	1acb      	subs	r3, r1, r3
 8016bdc:	1411      	asrs	r1, r2, #16
 8016bde:	185b      	adds	r3, r3, r1
 8016be0:	1419      	asrs	r1, r3, #16
 8016be2:	b292      	uxth	r2, r2
 8016be4:	041b      	lsls	r3, r3, #16
 8016be6:	431a      	orrs	r2, r3
 8016be8:	9b03      	ldr	r3, [sp, #12]
 8016bea:	9104      	str	r1, [sp, #16]
 8016bec:	c004      	stmia	r0!, {r2}
 8016bee:	42bb      	cmp	r3, r7
 8016bf0:	d2dd      	bcs.n	8016bae <quorem+0x4e>
 8016bf2:	6823      	ldr	r3, [r4, #0]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d02e      	beq.n	8016c56 <quorem+0xf6>
 8016bf8:	0030      	movs	r0, r6
 8016bfa:	9902      	ldr	r1, [sp, #8]
 8016bfc:	f001 fd76 	bl	80186ec <__mcmp>
 8016c00:	2800      	cmp	r0, #0
 8016c02:	db21      	blt.n	8016c48 <quorem+0xe8>
 8016c04:	0030      	movs	r0, r6
 8016c06:	2400      	movs	r4, #0
 8016c08:	9b00      	ldr	r3, [sp, #0]
 8016c0a:	9902      	ldr	r1, [sp, #8]
 8016c0c:	3301      	adds	r3, #1
 8016c0e:	9300      	str	r3, [sp, #0]
 8016c10:	3014      	adds	r0, #20
 8016c12:	3114      	adds	r1, #20
 8016c14:	6802      	ldr	r2, [r0, #0]
 8016c16:	c908      	ldmia	r1!, {r3}
 8016c18:	b292      	uxth	r2, r2
 8016c1a:	1914      	adds	r4, r2, r4
 8016c1c:	b29a      	uxth	r2, r3
 8016c1e:	1aa2      	subs	r2, r4, r2
 8016c20:	6804      	ldr	r4, [r0, #0]
 8016c22:	0c1b      	lsrs	r3, r3, #16
 8016c24:	0c24      	lsrs	r4, r4, #16
 8016c26:	1ae3      	subs	r3, r4, r3
 8016c28:	1414      	asrs	r4, r2, #16
 8016c2a:	191b      	adds	r3, r3, r4
 8016c2c:	141c      	asrs	r4, r3, #16
 8016c2e:	b292      	uxth	r2, r2
 8016c30:	041b      	lsls	r3, r3, #16
 8016c32:	4313      	orrs	r3, r2
 8016c34:	c008      	stmia	r0!, {r3}
 8016c36:	9b03      	ldr	r3, [sp, #12]
 8016c38:	428b      	cmp	r3, r1
 8016c3a:	d2eb      	bcs.n	8016c14 <quorem+0xb4>
 8016c3c:	9a01      	ldr	r2, [sp, #4]
 8016c3e:	00ab      	lsls	r3, r5, #2
 8016c40:	18d3      	adds	r3, r2, r3
 8016c42:	681a      	ldr	r2, [r3, #0]
 8016c44:	2a00      	cmp	r2, #0
 8016c46:	d010      	beq.n	8016c6a <quorem+0x10a>
 8016c48:	9800      	ldr	r0, [sp, #0]
 8016c4a:	b007      	add	sp, #28
 8016c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c4e:	6823      	ldr	r3, [r4, #0]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d104      	bne.n	8016c5e <quorem+0xfe>
 8016c54:	3d01      	subs	r5, #1
 8016c56:	9b01      	ldr	r3, [sp, #4]
 8016c58:	3c04      	subs	r4, #4
 8016c5a:	42a3      	cmp	r3, r4
 8016c5c:	d3f7      	bcc.n	8016c4e <quorem+0xee>
 8016c5e:	6135      	str	r5, [r6, #16]
 8016c60:	e7ca      	b.n	8016bf8 <quorem+0x98>
 8016c62:	681a      	ldr	r2, [r3, #0]
 8016c64:	2a00      	cmp	r2, #0
 8016c66:	d104      	bne.n	8016c72 <quorem+0x112>
 8016c68:	3d01      	subs	r5, #1
 8016c6a:	9a01      	ldr	r2, [sp, #4]
 8016c6c:	3b04      	subs	r3, #4
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d3f7      	bcc.n	8016c62 <quorem+0x102>
 8016c72:	6135      	str	r5, [r6, #16]
 8016c74:	e7e8      	b.n	8016c48 <quorem+0xe8>
	...

08016c78 <_dtoa_r>:
 8016c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c7a:	0014      	movs	r4, r2
 8016c7c:	001d      	movs	r5, r3
 8016c7e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8016c80:	b09d      	sub	sp, #116	; 0x74
 8016c82:	940a      	str	r4, [sp, #40]	; 0x28
 8016c84:	950b      	str	r5, [sp, #44]	; 0x2c
 8016c86:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8016c88:	9003      	str	r0, [sp, #12]
 8016c8a:	2900      	cmp	r1, #0
 8016c8c:	d009      	beq.n	8016ca2 <_dtoa_r+0x2a>
 8016c8e:	2301      	movs	r3, #1
 8016c90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016c92:	4093      	lsls	r3, r2
 8016c94:	604a      	str	r2, [r1, #4]
 8016c96:	608b      	str	r3, [r1, #8]
 8016c98:	f001 face 	bl	8018238 <_Bfree>
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	9a03      	ldr	r2, [sp, #12]
 8016ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8016ca2:	2d00      	cmp	r5, #0
 8016ca4:	da1f      	bge.n	8016ce6 <_dtoa_r+0x6e>
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	6033      	str	r3, [r6, #0]
 8016caa:	006b      	lsls	r3, r5, #1
 8016cac:	085b      	lsrs	r3, r3, #1
 8016cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8016cb0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016cb2:	4bb9      	ldr	r3, [pc, #740]	; (8016f98 <_dtoa_r+0x320>)
 8016cb4:	003a      	movs	r2, r7
 8016cb6:	9318      	str	r3, [sp, #96]	; 0x60
 8016cb8:	401a      	ands	r2, r3
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	d116      	bne.n	8016cec <_dtoa_r+0x74>
 8016cbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016cc0:	4bb6      	ldr	r3, [pc, #728]	; (8016f9c <_dtoa_r+0x324>)
 8016cc2:	6013      	str	r3, [r2, #0]
 8016cc4:	033a      	lsls	r2, r7, #12
 8016cc6:	0b12      	lsrs	r2, r2, #12
 8016cc8:	4314      	orrs	r4, r2
 8016cca:	d101      	bne.n	8016cd0 <_dtoa_r+0x58>
 8016ccc:	f000 fda4 	bl	8017818 <_dtoa_r+0xba0>
 8016cd0:	48b3      	ldr	r0, [pc, #716]	; (8016fa0 <_dtoa_r+0x328>)
 8016cd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016cd4:	9005      	str	r0, [sp, #20]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d002      	beq.n	8016ce0 <_dtoa_r+0x68>
 8016cda:	4bb2      	ldr	r3, [pc, #712]	; (8016fa4 <_dtoa_r+0x32c>)
 8016cdc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016cde:	6013      	str	r3, [r2, #0]
 8016ce0:	9805      	ldr	r0, [sp, #20]
 8016ce2:	b01d      	add	sp, #116	; 0x74
 8016ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	6033      	str	r3, [r6, #0]
 8016cea:	e7e1      	b.n	8016cb0 <_dtoa_r+0x38>
 8016cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016cf0:	9210      	str	r2, [sp, #64]	; 0x40
 8016cf2:	9311      	str	r3, [sp, #68]	; 0x44
 8016cf4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016cf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	f7e9 fbae 	bl	800045c <__aeabi_dcmpeq>
 8016d00:	1e06      	subs	r6, r0, #0
 8016d02:	d00b      	beq.n	8016d1c <_dtoa_r+0xa4>
 8016d04:	2301      	movs	r3, #1
 8016d06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016d08:	6013      	str	r3, [r2, #0]
 8016d0a:	4ba7      	ldr	r3, [pc, #668]	; (8016fa8 <_dtoa_r+0x330>)
 8016d0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016d0e:	9305      	str	r3, [sp, #20]
 8016d10:	2a00      	cmp	r2, #0
 8016d12:	d0e5      	beq.n	8016ce0 <_dtoa_r+0x68>
 8016d14:	4aa5      	ldr	r2, [pc, #660]	; (8016fac <_dtoa_r+0x334>)
 8016d16:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016d18:	600a      	str	r2, [r1, #0]
 8016d1a:	e7e1      	b.n	8016ce0 <_dtoa_r+0x68>
 8016d1c:	ab1a      	add	r3, sp, #104	; 0x68
 8016d1e:	9301      	str	r3, [sp, #4]
 8016d20:	ab1b      	add	r3, sp, #108	; 0x6c
 8016d22:	9300      	str	r3, [sp, #0]
 8016d24:	9803      	ldr	r0, [sp, #12]
 8016d26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016d2a:	f001 fe07 	bl	801893c <__d2b>
 8016d2e:	007b      	lsls	r3, r7, #1
 8016d30:	9004      	str	r0, [sp, #16]
 8016d32:	0d5b      	lsrs	r3, r3, #21
 8016d34:	d100      	bne.n	8016d38 <_dtoa_r+0xc0>
 8016d36:	e07c      	b.n	8016e32 <_dtoa_r+0x1ba>
 8016d38:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016d3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016d3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016d3e:	4c9c      	ldr	r4, [pc, #624]	; (8016fb0 <_dtoa_r+0x338>)
 8016d40:	0312      	lsls	r2, r2, #12
 8016d42:	0b12      	lsrs	r2, r2, #12
 8016d44:	4314      	orrs	r4, r2
 8016d46:	0021      	movs	r1, r4
 8016d48:	4a9a      	ldr	r2, [pc, #616]	; (8016fb4 <_dtoa_r+0x33c>)
 8016d4a:	9616      	str	r6, [sp, #88]	; 0x58
 8016d4c:	189f      	adds	r7, r3, r2
 8016d4e:	2200      	movs	r2, #0
 8016d50:	4b99      	ldr	r3, [pc, #612]	; (8016fb8 <_dtoa_r+0x340>)
 8016d52:	f7eb fe4d 	bl	80029f0 <__aeabi_dsub>
 8016d56:	4a99      	ldr	r2, [pc, #612]	; (8016fbc <_dtoa_r+0x344>)
 8016d58:	4b99      	ldr	r3, [pc, #612]	; (8016fc0 <_dtoa_r+0x348>)
 8016d5a:	f7eb fbdd 	bl	8002518 <__aeabi_dmul>
 8016d5e:	4a99      	ldr	r2, [pc, #612]	; (8016fc4 <_dtoa_r+0x34c>)
 8016d60:	4b99      	ldr	r3, [pc, #612]	; (8016fc8 <_dtoa_r+0x350>)
 8016d62:	f7ea fc69 	bl	8001638 <__aeabi_dadd>
 8016d66:	0004      	movs	r4, r0
 8016d68:	0038      	movs	r0, r7
 8016d6a:	000d      	movs	r5, r1
 8016d6c:	f7ec fa26 	bl	80031bc <__aeabi_i2d>
 8016d70:	4a96      	ldr	r2, [pc, #600]	; (8016fcc <_dtoa_r+0x354>)
 8016d72:	4b97      	ldr	r3, [pc, #604]	; (8016fd0 <_dtoa_r+0x358>)
 8016d74:	f7eb fbd0 	bl	8002518 <__aeabi_dmul>
 8016d78:	0002      	movs	r2, r0
 8016d7a:	000b      	movs	r3, r1
 8016d7c:	0020      	movs	r0, r4
 8016d7e:	0029      	movs	r1, r5
 8016d80:	f7ea fc5a 	bl	8001638 <__aeabi_dadd>
 8016d84:	0004      	movs	r4, r0
 8016d86:	000d      	movs	r5, r1
 8016d88:	f7ec f9e2 	bl	8003150 <__aeabi_d2iz>
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	9002      	str	r0, [sp, #8]
 8016d90:	2300      	movs	r3, #0
 8016d92:	0020      	movs	r0, r4
 8016d94:	0029      	movs	r1, r5
 8016d96:	f7e9 fb67 	bl	8000468 <__aeabi_dcmplt>
 8016d9a:	2800      	cmp	r0, #0
 8016d9c:	d00b      	beq.n	8016db6 <_dtoa_r+0x13e>
 8016d9e:	9802      	ldr	r0, [sp, #8]
 8016da0:	f7ec fa0c 	bl	80031bc <__aeabi_i2d>
 8016da4:	002b      	movs	r3, r5
 8016da6:	0022      	movs	r2, r4
 8016da8:	f7e9 fb58 	bl	800045c <__aeabi_dcmpeq>
 8016dac:	4243      	negs	r3, r0
 8016dae:	4158      	adcs	r0, r3
 8016db0:	9b02      	ldr	r3, [sp, #8]
 8016db2:	1a1b      	subs	r3, r3, r0
 8016db4:	9302      	str	r3, [sp, #8]
 8016db6:	2301      	movs	r3, #1
 8016db8:	9314      	str	r3, [sp, #80]	; 0x50
 8016dba:	9b02      	ldr	r3, [sp, #8]
 8016dbc:	2b16      	cmp	r3, #22
 8016dbe:	d80f      	bhi.n	8016de0 <_dtoa_r+0x168>
 8016dc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016dc2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016dc4:	00da      	lsls	r2, r3, #3
 8016dc6:	4b83      	ldr	r3, [pc, #524]	; (8016fd4 <_dtoa_r+0x35c>)
 8016dc8:	189b      	adds	r3, r3, r2
 8016dca:	681a      	ldr	r2, [r3, #0]
 8016dcc:	685b      	ldr	r3, [r3, #4]
 8016dce:	f7e9 fb4b 	bl	8000468 <__aeabi_dcmplt>
 8016dd2:	2800      	cmp	r0, #0
 8016dd4:	d049      	beq.n	8016e6a <_dtoa_r+0x1f2>
 8016dd6:	9b02      	ldr	r3, [sp, #8]
 8016dd8:	3b01      	subs	r3, #1
 8016dda:	9302      	str	r3, [sp, #8]
 8016ddc:	2300      	movs	r3, #0
 8016dde:	9314      	str	r3, [sp, #80]	; 0x50
 8016de0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016de2:	1bdf      	subs	r7, r3, r7
 8016de4:	2300      	movs	r3, #0
 8016de6:	9309      	str	r3, [sp, #36]	; 0x24
 8016de8:	003b      	movs	r3, r7
 8016dea:	3b01      	subs	r3, #1
 8016dec:	930d      	str	r3, [sp, #52]	; 0x34
 8016dee:	d504      	bpl.n	8016dfa <_dtoa_r+0x182>
 8016df0:	2301      	movs	r3, #1
 8016df2:	1bdb      	subs	r3, r3, r7
 8016df4:	9309      	str	r3, [sp, #36]	; 0x24
 8016df6:	2300      	movs	r3, #0
 8016df8:	930d      	str	r3, [sp, #52]	; 0x34
 8016dfa:	9b02      	ldr	r3, [sp, #8]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	db36      	blt.n	8016e6e <_dtoa_r+0x1f6>
 8016e00:	9a02      	ldr	r2, [sp, #8]
 8016e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e04:	4694      	mov	ip, r2
 8016e06:	4463      	add	r3, ip
 8016e08:	930d      	str	r3, [sp, #52]	; 0x34
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8016e0e:	930e      	str	r3, [sp, #56]	; 0x38
 8016e10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016e12:	2401      	movs	r4, #1
 8016e14:	2b09      	cmp	r3, #9
 8016e16:	d865      	bhi.n	8016ee4 <_dtoa_r+0x26c>
 8016e18:	2b05      	cmp	r3, #5
 8016e1a:	dd02      	ble.n	8016e22 <_dtoa_r+0x1aa>
 8016e1c:	2400      	movs	r4, #0
 8016e1e:	3b04      	subs	r3, #4
 8016e20:	9322      	str	r3, [sp, #136]	; 0x88
 8016e22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016e24:	1e98      	subs	r0, r3, #2
 8016e26:	2803      	cmp	r0, #3
 8016e28:	d865      	bhi.n	8016ef6 <_dtoa_r+0x27e>
 8016e2a:	f7e9 f97d 	bl	8000128 <__gnu_thumb1_case_uqi>
 8016e2e:	3629      	.short	0x3629
 8016e30:	5934      	.short	0x5934
 8016e32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016e34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016e36:	189e      	adds	r6, r3, r2
 8016e38:	4b67      	ldr	r3, [pc, #412]	; (8016fd8 <_dtoa_r+0x360>)
 8016e3a:	18f2      	adds	r2, r6, r3
 8016e3c:	2a20      	cmp	r2, #32
 8016e3e:	dd0f      	ble.n	8016e60 <_dtoa_r+0x1e8>
 8016e40:	2340      	movs	r3, #64	; 0x40
 8016e42:	0038      	movs	r0, r7
 8016e44:	1a9b      	subs	r3, r3, r2
 8016e46:	4098      	lsls	r0, r3
 8016e48:	4b64      	ldr	r3, [pc, #400]	; (8016fdc <_dtoa_r+0x364>)
 8016e4a:	18f3      	adds	r3, r6, r3
 8016e4c:	40dc      	lsrs	r4, r3
 8016e4e:	4320      	orrs	r0, r4
 8016e50:	f7ec f9e4 	bl	800321c <__aeabi_ui2d>
 8016e54:	2301      	movs	r3, #1
 8016e56:	4c62      	ldr	r4, [pc, #392]	; (8016fe0 <_dtoa_r+0x368>)
 8016e58:	1e77      	subs	r7, r6, #1
 8016e5a:	1909      	adds	r1, r1, r4
 8016e5c:	9316      	str	r3, [sp, #88]	; 0x58
 8016e5e:	e776      	b.n	8016d4e <_dtoa_r+0xd6>
 8016e60:	2320      	movs	r3, #32
 8016e62:	0020      	movs	r0, r4
 8016e64:	1a9b      	subs	r3, r3, r2
 8016e66:	4098      	lsls	r0, r3
 8016e68:	e7f2      	b.n	8016e50 <_dtoa_r+0x1d8>
 8016e6a:	9014      	str	r0, [sp, #80]	; 0x50
 8016e6c:	e7b8      	b.n	8016de0 <_dtoa_r+0x168>
 8016e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e70:	9a02      	ldr	r2, [sp, #8]
 8016e72:	1a9b      	subs	r3, r3, r2
 8016e74:	9309      	str	r3, [sp, #36]	; 0x24
 8016e76:	4253      	negs	r3, r2
 8016e78:	930e      	str	r3, [sp, #56]	; 0x38
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8016e7e:	e7c7      	b.n	8016e10 <_dtoa_r+0x198>
 8016e80:	2300      	movs	r3, #0
 8016e82:	9312      	str	r3, [sp, #72]	; 0x48
 8016e84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	dc39      	bgt.n	8016efe <_dtoa_r+0x286>
 8016e8a:	2301      	movs	r3, #1
 8016e8c:	001a      	movs	r2, r3
 8016e8e:	930c      	str	r3, [sp, #48]	; 0x30
 8016e90:	9308      	str	r3, [sp, #32]
 8016e92:	9223      	str	r2, [sp, #140]	; 0x8c
 8016e94:	e00d      	b.n	8016eb2 <_dtoa_r+0x23a>
 8016e96:	2301      	movs	r3, #1
 8016e98:	e7f3      	b.n	8016e82 <_dtoa_r+0x20a>
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8016e9e:	9312      	str	r3, [sp, #72]	; 0x48
 8016ea0:	4694      	mov	ip, r2
 8016ea2:	9b02      	ldr	r3, [sp, #8]
 8016ea4:	4463      	add	r3, ip
 8016ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8016ea8:	3301      	adds	r3, #1
 8016eaa:	9308      	str	r3, [sp, #32]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	dc00      	bgt.n	8016eb2 <_dtoa_r+0x23a>
 8016eb0:	2301      	movs	r3, #1
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	9903      	ldr	r1, [sp, #12]
 8016eb6:	644a      	str	r2, [r1, #68]	; 0x44
 8016eb8:	3204      	adds	r2, #4
 8016eba:	0010      	movs	r0, r2
 8016ebc:	9903      	ldr	r1, [sp, #12]
 8016ebe:	3014      	adds	r0, #20
 8016ec0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8016ec2:	4298      	cmp	r0, r3
 8016ec4:	d91f      	bls.n	8016f06 <_dtoa_r+0x28e>
 8016ec6:	9803      	ldr	r0, [sp, #12]
 8016ec8:	f001 f98e 	bl	80181e8 <_Balloc>
 8016ecc:	9005      	str	r0, [sp, #20]
 8016ece:	2800      	cmp	r0, #0
 8016ed0:	d11e      	bne.n	8016f10 <_dtoa_r+0x298>
 8016ed2:	21d5      	movs	r1, #213	; 0xd5
 8016ed4:	0002      	movs	r2, r0
 8016ed6:	4b43      	ldr	r3, [pc, #268]	; (8016fe4 <_dtoa_r+0x36c>)
 8016ed8:	0049      	lsls	r1, r1, #1
 8016eda:	4843      	ldr	r0, [pc, #268]	; (8016fe8 <_dtoa_r+0x370>)
 8016edc:	f001 ff06 	bl	8018cec <__assert_func>
 8016ee0:	2301      	movs	r3, #1
 8016ee2:	e7db      	b.n	8016e9c <_dtoa_r+0x224>
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	9412      	str	r4, [sp, #72]	; 0x48
 8016ee8:	9322      	str	r3, [sp, #136]	; 0x88
 8016eea:	3b01      	subs	r3, #1
 8016eec:	930c      	str	r3, [sp, #48]	; 0x30
 8016eee:	9308      	str	r3, [sp, #32]
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	3313      	adds	r3, #19
 8016ef4:	e7cd      	b.n	8016e92 <_dtoa_r+0x21a>
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	9312      	str	r3, [sp, #72]	; 0x48
 8016efa:	3b02      	subs	r3, #2
 8016efc:	e7f6      	b.n	8016eec <_dtoa_r+0x274>
 8016efe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016f00:	930c      	str	r3, [sp, #48]	; 0x30
 8016f02:	9308      	str	r3, [sp, #32]
 8016f04:	e7d5      	b.n	8016eb2 <_dtoa_r+0x23a>
 8016f06:	9803      	ldr	r0, [sp, #12]
 8016f08:	3101      	adds	r1, #1
 8016f0a:	6441      	str	r1, [r0, #68]	; 0x44
 8016f0c:	0052      	lsls	r2, r2, #1
 8016f0e:	e7d4      	b.n	8016eba <_dtoa_r+0x242>
 8016f10:	9b03      	ldr	r3, [sp, #12]
 8016f12:	9a05      	ldr	r2, [sp, #20]
 8016f14:	641a      	str	r2, [r3, #64]	; 0x40
 8016f16:	9b08      	ldr	r3, [sp, #32]
 8016f18:	2b0e      	cmp	r3, #14
 8016f1a:	d900      	bls.n	8016f1e <_dtoa_r+0x2a6>
 8016f1c:	e0df      	b.n	80170de <_dtoa_r+0x466>
 8016f1e:	2c00      	cmp	r4, #0
 8016f20:	d100      	bne.n	8016f24 <_dtoa_r+0x2ac>
 8016f22:	e0dc      	b.n	80170de <_dtoa_r+0x466>
 8016f24:	9b02      	ldr	r3, [sp, #8]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	dd62      	ble.n	8016ff0 <_dtoa_r+0x378>
 8016f2a:	001a      	movs	r2, r3
 8016f2c:	210f      	movs	r1, #15
 8016f2e:	4b29      	ldr	r3, [pc, #164]	; (8016fd4 <_dtoa_r+0x35c>)
 8016f30:	400a      	ands	r2, r1
 8016f32:	00d2      	lsls	r2, r2, #3
 8016f34:	189b      	adds	r3, r3, r2
 8016f36:	681d      	ldr	r5, [r3, #0]
 8016f38:	685e      	ldr	r6, [r3, #4]
 8016f3a:	9b02      	ldr	r3, [sp, #8]
 8016f3c:	2702      	movs	r7, #2
 8016f3e:	111c      	asrs	r4, r3, #4
 8016f40:	05db      	lsls	r3, r3, #23
 8016f42:	d50a      	bpl.n	8016f5a <_dtoa_r+0x2e2>
 8016f44:	4b29      	ldr	r3, [pc, #164]	; (8016fec <_dtoa_r+0x374>)
 8016f46:	400c      	ands	r4, r1
 8016f48:	6a1a      	ldr	r2, [r3, #32]
 8016f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016f4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016f50:	f7ea fedc 	bl	8001d0c <__aeabi_ddiv>
 8016f54:	900a      	str	r0, [sp, #40]	; 0x28
 8016f56:	910b      	str	r1, [sp, #44]	; 0x2c
 8016f58:	3701      	adds	r7, #1
 8016f5a:	4b24      	ldr	r3, [pc, #144]	; (8016fec <_dtoa_r+0x374>)
 8016f5c:	9306      	str	r3, [sp, #24]
 8016f5e:	2c00      	cmp	r4, #0
 8016f60:	d108      	bne.n	8016f74 <_dtoa_r+0x2fc>
 8016f62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f66:	002a      	movs	r2, r5
 8016f68:	0033      	movs	r3, r6
 8016f6a:	f7ea fecf 	bl	8001d0c <__aeabi_ddiv>
 8016f6e:	900a      	str	r0, [sp, #40]	; 0x28
 8016f70:	910b      	str	r1, [sp, #44]	; 0x2c
 8016f72:	e058      	b.n	8017026 <_dtoa_r+0x3ae>
 8016f74:	2301      	movs	r3, #1
 8016f76:	421c      	tst	r4, r3
 8016f78:	d009      	beq.n	8016f8e <_dtoa_r+0x316>
 8016f7a:	18ff      	adds	r7, r7, r3
 8016f7c:	9b06      	ldr	r3, [sp, #24]
 8016f7e:	0028      	movs	r0, r5
 8016f80:	681a      	ldr	r2, [r3, #0]
 8016f82:	685b      	ldr	r3, [r3, #4]
 8016f84:	0031      	movs	r1, r6
 8016f86:	f7eb fac7 	bl	8002518 <__aeabi_dmul>
 8016f8a:	0005      	movs	r5, r0
 8016f8c:	000e      	movs	r6, r1
 8016f8e:	9b06      	ldr	r3, [sp, #24]
 8016f90:	1064      	asrs	r4, r4, #1
 8016f92:	3308      	adds	r3, #8
 8016f94:	e7e2      	b.n	8016f5c <_dtoa_r+0x2e4>
 8016f96:	46c0      	nop			; (mov r8, r8)
 8016f98:	7ff00000 	.word	0x7ff00000
 8016f9c:	0000270f 	.word	0x0000270f
 8016fa0:	0801da44 	.word	0x0801da44
 8016fa4:	0801da47 	.word	0x0801da47
 8016fa8:	0801da22 	.word	0x0801da22
 8016fac:	0801da23 	.word	0x0801da23
 8016fb0:	3ff00000 	.word	0x3ff00000
 8016fb4:	fffffc01 	.word	0xfffffc01
 8016fb8:	3ff80000 	.word	0x3ff80000
 8016fbc:	636f4361 	.word	0x636f4361
 8016fc0:	3fd287a7 	.word	0x3fd287a7
 8016fc4:	8b60c8b3 	.word	0x8b60c8b3
 8016fc8:	3fc68a28 	.word	0x3fc68a28
 8016fcc:	509f79fb 	.word	0x509f79fb
 8016fd0:	3fd34413 	.word	0x3fd34413
 8016fd4:	0801dbc8 	.word	0x0801dbc8
 8016fd8:	00000432 	.word	0x00000432
 8016fdc:	00000412 	.word	0x00000412
 8016fe0:	fe100000 	.word	0xfe100000
 8016fe4:	0801da51 	.word	0x0801da51
 8016fe8:	0801da62 	.word	0x0801da62
 8016fec:	0801dba0 	.word	0x0801dba0
 8016ff0:	9b02      	ldr	r3, [sp, #8]
 8016ff2:	2702      	movs	r7, #2
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d016      	beq.n	8017026 <_dtoa_r+0x3ae>
 8016ff8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016ffa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016ffc:	425c      	negs	r4, r3
 8016ffe:	230f      	movs	r3, #15
 8017000:	4ad4      	ldr	r2, [pc, #848]	; (8017354 <_dtoa_r+0x6dc>)
 8017002:	4023      	ands	r3, r4
 8017004:	00db      	lsls	r3, r3, #3
 8017006:	18d3      	adds	r3, r2, r3
 8017008:	681a      	ldr	r2, [r3, #0]
 801700a:	685b      	ldr	r3, [r3, #4]
 801700c:	f7eb fa84 	bl	8002518 <__aeabi_dmul>
 8017010:	2601      	movs	r6, #1
 8017012:	2300      	movs	r3, #0
 8017014:	900a      	str	r0, [sp, #40]	; 0x28
 8017016:	910b      	str	r1, [sp, #44]	; 0x2c
 8017018:	4dcf      	ldr	r5, [pc, #828]	; (8017358 <_dtoa_r+0x6e0>)
 801701a:	1124      	asrs	r4, r4, #4
 801701c:	2c00      	cmp	r4, #0
 801701e:	d000      	beq.n	8017022 <_dtoa_r+0x3aa>
 8017020:	e08d      	b.n	801713e <_dtoa_r+0x4c6>
 8017022:	2b00      	cmp	r3, #0
 8017024:	d1a3      	bne.n	8016f6e <_dtoa_r+0x2f6>
 8017026:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017028:	2b00      	cmp	r3, #0
 801702a:	d100      	bne.n	801702e <_dtoa_r+0x3b6>
 801702c:	e092      	b.n	8017154 <_dtoa_r+0x4dc>
 801702e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017030:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017032:	2200      	movs	r2, #0
 8017034:	0020      	movs	r0, r4
 8017036:	0029      	movs	r1, r5
 8017038:	4bc8      	ldr	r3, [pc, #800]	; (801735c <_dtoa_r+0x6e4>)
 801703a:	f7e9 fa15 	bl	8000468 <__aeabi_dcmplt>
 801703e:	2800      	cmp	r0, #0
 8017040:	d100      	bne.n	8017044 <_dtoa_r+0x3cc>
 8017042:	e087      	b.n	8017154 <_dtoa_r+0x4dc>
 8017044:	9b08      	ldr	r3, [sp, #32]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d100      	bne.n	801704c <_dtoa_r+0x3d4>
 801704a:	e083      	b.n	8017154 <_dtoa_r+0x4dc>
 801704c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801704e:	2b00      	cmp	r3, #0
 8017050:	dd41      	ble.n	80170d6 <_dtoa_r+0x45e>
 8017052:	9b02      	ldr	r3, [sp, #8]
 8017054:	2200      	movs	r2, #0
 8017056:	3b01      	subs	r3, #1
 8017058:	930f      	str	r3, [sp, #60]	; 0x3c
 801705a:	0020      	movs	r0, r4
 801705c:	0029      	movs	r1, r5
 801705e:	4bc0      	ldr	r3, [pc, #768]	; (8017360 <_dtoa_r+0x6e8>)
 8017060:	f7eb fa5a 	bl	8002518 <__aeabi_dmul>
 8017064:	900a      	str	r0, [sp, #40]	; 0x28
 8017066:	910b      	str	r1, [sp, #44]	; 0x2c
 8017068:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801706a:	3701      	adds	r7, #1
 801706c:	0038      	movs	r0, r7
 801706e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017070:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017072:	f7ec f8a3 	bl	80031bc <__aeabi_i2d>
 8017076:	0022      	movs	r2, r4
 8017078:	002b      	movs	r3, r5
 801707a:	f7eb fa4d 	bl	8002518 <__aeabi_dmul>
 801707e:	2200      	movs	r2, #0
 8017080:	4bb8      	ldr	r3, [pc, #736]	; (8017364 <_dtoa_r+0x6ec>)
 8017082:	f7ea fad9 	bl	8001638 <__aeabi_dadd>
 8017086:	900a      	str	r0, [sp, #40]	; 0x28
 8017088:	910b      	str	r1, [sp, #44]	; 0x2c
 801708a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801708c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801708e:	9206      	str	r2, [sp, #24]
 8017090:	9307      	str	r3, [sp, #28]
 8017092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017094:	4ab4      	ldr	r2, [pc, #720]	; (8017368 <_dtoa_r+0x6f0>)
 8017096:	189f      	adds	r7, r3, r2
 8017098:	9707      	str	r7, [sp, #28]
 801709a:	2e00      	cmp	r6, #0
 801709c:	d15e      	bne.n	801715c <_dtoa_r+0x4e4>
 801709e:	2200      	movs	r2, #0
 80170a0:	0020      	movs	r0, r4
 80170a2:	0029      	movs	r1, r5
 80170a4:	4bb1      	ldr	r3, [pc, #708]	; (801736c <_dtoa_r+0x6f4>)
 80170a6:	f7eb fca3 	bl	80029f0 <__aeabi_dsub>
 80170aa:	003b      	movs	r3, r7
 80170ac:	9a06      	ldr	r2, [sp, #24]
 80170ae:	0004      	movs	r4, r0
 80170b0:	000d      	movs	r5, r1
 80170b2:	f7e9 f9ed 	bl	8000490 <__aeabi_dcmpgt>
 80170b6:	2800      	cmp	r0, #0
 80170b8:	d000      	beq.n	80170bc <_dtoa_r+0x444>
 80170ba:	e2aa      	b.n	8017612 <_dtoa_r+0x99a>
 80170bc:	48ac      	ldr	r0, [pc, #688]	; (8017370 <_dtoa_r+0x6f8>)
 80170be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80170c0:	4684      	mov	ip, r0
 80170c2:	4461      	add	r1, ip
 80170c4:	000b      	movs	r3, r1
 80170c6:	0020      	movs	r0, r4
 80170c8:	0029      	movs	r1, r5
 80170ca:	9a06      	ldr	r2, [sp, #24]
 80170cc:	f7e9 f9cc 	bl	8000468 <__aeabi_dcmplt>
 80170d0:	2800      	cmp	r0, #0
 80170d2:	d000      	beq.n	80170d6 <_dtoa_r+0x45e>
 80170d4:	e29b      	b.n	801760e <_dtoa_r+0x996>
 80170d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170d8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80170da:	930a      	str	r3, [sp, #40]	; 0x28
 80170dc:	940b      	str	r4, [sp, #44]	; 0x2c
 80170de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	da00      	bge.n	80170e6 <_dtoa_r+0x46e>
 80170e4:	e16a      	b.n	80173bc <_dtoa_r+0x744>
 80170e6:	9a02      	ldr	r2, [sp, #8]
 80170e8:	2a0e      	cmp	r2, #14
 80170ea:	dd00      	ble.n	80170ee <_dtoa_r+0x476>
 80170ec:	e166      	b.n	80173bc <_dtoa_r+0x744>
 80170ee:	4b99      	ldr	r3, [pc, #612]	; (8017354 <_dtoa_r+0x6dc>)
 80170f0:	00d2      	lsls	r2, r2, #3
 80170f2:	189b      	adds	r3, r3, r2
 80170f4:	681e      	ldr	r6, [r3, #0]
 80170f6:	685f      	ldr	r7, [r3, #4]
 80170f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	db00      	blt.n	8017100 <_dtoa_r+0x488>
 80170fe:	e0d7      	b.n	80172b0 <_dtoa_r+0x638>
 8017100:	9b08      	ldr	r3, [sp, #32]
 8017102:	2b00      	cmp	r3, #0
 8017104:	dd00      	ble.n	8017108 <_dtoa_r+0x490>
 8017106:	e0d3      	b.n	80172b0 <_dtoa_r+0x638>
 8017108:	d000      	beq.n	801710c <_dtoa_r+0x494>
 801710a:	e27f      	b.n	801760c <_dtoa_r+0x994>
 801710c:	2200      	movs	r2, #0
 801710e:	0030      	movs	r0, r6
 8017110:	0039      	movs	r1, r7
 8017112:	4b96      	ldr	r3, [pc, #600]	; (801736c <_dtoa_r+0x6f4>)
 8017114:	f7eb fa00 	bl	8002518 <__aeabi_dmul>
 8017118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801711a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801711c:	f7e9 f9c2 	bl	80004a4 <__aeabi_dcmpge>
 8017120:	9e08      	ldr	r6, [sp, #32]
 8017122:	0037      	movs	r7, r6
 8017124:	2800      	cmp	r0, #0
 8017126:	d000      	beq.n	801712a <_dtoa_r+0x4b2>
 8017128:	e256      	b.n	80175d8 <_dtoa_r+0x960>
 801712a:	9b05      	ldr	r3, [sp, #20]
 801712c:	9a05      	ldr	r2, [sp, #20]
 801712e:	3301      	adds	r3, #1
 8017130:	9306      	str	r3, [sp, #24]
 8017132:	2331      	movs	r3, #49	; 0x31
 8017134:	7013      	strb	r3, [r2, #0]
 8017136:	9b02      	ldr	r3, [sp, #8]
 8017138:	3301      	adds	r3, #1
 801713a:	9302      	str	r3, [sp, #8]
 801713c:	e251      	b.n	80175e2 <_dtoa_r+0x96a>
 801713e:	4234      	tst	r4, r6
 8017140:	d005      	beq.n	801714e <_dtoa_r+0x4d6>
 8017142:	682a      	ldr	r2, [r5, #0]
 8017144:	686b      	ldr	r3, [r5, #4]
 8017146:	f7eb f9e7 	bl	8002518 <__aeabi_dmul>
 801714a:	0033      	movs	r3, r6
 801714c:	3701      	adds	r7, #1
 801714e:	1064      	asrs	r4, r4, #1
 8017150:	3508      	adds	r5, #8
 8017152:	e763      	b.n	801701c <_dtoa_r+0x3a4>
 8017154:	9b02      	ldr	r3, [sp, #8]
 8017156:	9e08      	ldr	r6, [sp, #32]
 8017158:	930f      	str	r3, [sp, #60]	; 0x3c
 801715a:	e787      	b.n	801706c <_dtoa_r+0x3f4>
 801715c:	4b7d      	ldr	r3, [pc, #500]	; (8017354 <_dtoa_r+0x6dc>)
 801715e:	1e72      	subs	r2, r6, #1
 8017160:	00d2      	lsls	r2, r2, #3
 8017162:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017164:	189b      	adds	r3, r3, r2
 8017166:	681a      	ldr	r2, [r3, #0]
 8017168:	685b      	ldr	r3, [r3, #4]
 801716a:	2900      	cmp	r1, #0
 801716c:	d04e      	beq.n	801720c <_dtoa_r+0x594>
 801716e:	2000      	movs	r0, #0
 8017170:	4980      	ldr	r1, [pc, #512]	; (8017374 <_dtoa_r+0x6fc>)
 8017172:	f7ea fdcb 	bl	8001d0c <__aeabi_ddiv>
 8017176:	9a06      	ldr	r2, [sp, #24]
 8017178:	9b07      	ldr	r3, [sp, #28]
 801717a:	f7eb fc39 	bl	80029f0 <__aeabi_dsub>
 801717e:	9b05      	ldr	r3, [sp, #20]
 8017180:	900a      	str	r0, [sp, #40]	; 0x28
 8017182:	910b      	str	r1, [sp, #44]	; 0x2c
 8017184:	9315      	str	r3, [sp, #84]	; 0x54
 8017186:	18f3      	adds	r3, r6, r3
 8017188:	9319      	str	r3, [sp, #100]	; 0x64
 801718a:	0020      	movs	r0, r4
 801718c:	0029      	movs	r1, r5
 801718e:	f7eb ffdf 	bl	8003150 <__aeabi_d2iz>
 8017192:	9017      	str	r0, [sp, #92]	; 0x5c
 8017194:	f7ec f812 	bl	80031bc <__aeabi_i2d>
 8017198:	0002      	movs	r2, r0
 801719a:	000b      	movs	r3, r1
 801719c:	0020      	movs	r0, r4
 801719e:	0029      	movs	r1, r5
 80171a0:	f7eb fc26 	bl	80029f0 <__aeabi_dsub>
 80171a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171a6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80171a8:	3301      	adds	r3, #1
 80171aa:	9306      	str	r3, [sp, #24]
 80171ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171ae:	3430      	adds	r4, #48	; 0x30
 80171b0:	701c      	strb	r4, [r3, #0]
 80171b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80171b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171b6:	0006      	movs	r6, r0
 80171b8:	000f      	movs	r7, r1
 80171ba:	f7e9 f955 	bl	8000468 <__aeabi_dcmplt>
 80171be:	2800      	cmp	r0, #0
 80171c0:	d16c      	bne.n	801729c <_dtoa_r+0x624>
 80171c2:	0032      	movs	r2, r6
 80171c4:	003b      	movs	r3, r7
 80171c6:	2000      	movs	r0, #0
 80171c8:	4964      	ldr	r1, [pc, #400]	; (801735c <_dtoa_r+0x6e4>)
 80171ca:	f7eb fc11 	bl	80029f0 <__aeabi_dsub>
 80171ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80171d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171d2:	f7e9 f949 	bl	8000468 <__aeabi_dcmplt>
 80171d6:	2800      	cmp	r0, #0
 80171d8:	d000      	beq.n	80171dc <_dtoa_r+0x564>
 80171da:	e0cf      	b.n	801737c <_dtoa_r+0x704>
 80171dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80171de:	9a06      	ldr	r2, [sp, #24]
 80171e0:	4293      	cmp	r3, r2
 80171e2:	d100      	bne.n	80171e6 <_dtoa_r+0x56e>
 80171e4:	e777      	b.n	80170d6 <_dtoa_r+0x45e>
 80171e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80171e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80171ea:	2200      	movs	r2, #0
 80171ec:	4b5c      	ldr	r3, [pc, #368]	; (8017360 <_dtoa_r+0x6e8>)
 80171ee:	f7eb f993 	bl	8002518 <__aeabi_dmul>
 80171f2:	4b5b      	ldr	r3, [pc, #364]	; (8017360 <_dtoa_r+0x6e8>)
 80171f4:	900a      	str	r0, [sp, #40]	; 0x28
 80171f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80171f8:	2200      	movs	r2, #0
 80171fa:	0030      	movs	r0, r6
 80171fc:	0039      	movs	r1, r7
 80171fe:	f7eb f98b 	bl	8002518 <__aeabi_dmul>
 8017202:	9b06      	ldr	r3, [sp, #24]
 8017204:	0004      	movs	r4, r0
 8017206:	000d      	movs	r5, r1
 8017208:	9315      	str	r3, [sp, #84]	; 0x54
 801720a:	e7be      	b.n	801718a <_dtoa_r+0x512>
 801720c:	9806      	ldr	r0, [sp, #24]
 801720e:	9907      	ldr	r1, [sp, #28]
 8017210:	f7eb f982 	bl	8002518 <__aeabi_dmul>
 8017214:	9f05      	ldr	r7, [sp, #20]
 8017216:	900a      	str	r0, [sp, #40]	; 0x28
 8017218:	910b      	str	r1, [sp, #44]	; 0x2c
 801721a:	19bb      	adds	r3, r7, r6
 801721c:	9315      	str	r3, [sp, #84]	; 0x54
 801721e:	0029      	movs	r1, r5
 8017220:	0020      	movs	r0, r4
 8017222:	f7eb ff95 	bl	8003150 <__aeabi_d2iz>
 8017226:	9006      	str	r0, [sp, #24]
 8017228:	f7eb ffc8 	bl	80031bc <__aeabi_i2d>
 801722c:	000b      	movs	r3, r1
 801722e:	0002      	movs	r2, r0
 8017230:	0029      	movs	r1, r5
 8017232:	0020      	movs	r0, r4
 8017234:	f7eb fbdc 	bl	80029f0 <__aeabi_dsub>
 8017238:	9b06      	ldr	r3, [sp, #24]
 801723a:	0004      	movs	r4, r0
 801723c:	3330      	adds	r3, #48	; 0x30
 801723e:	703b      	strb	r3, [r7, #0]
 8017240:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017242:	3701      	adds	r7, #1
 8017244:	000d      	movs	r5, r1
 8017246:	429f      	cmp	r7, r3
 8017248:	d12b      	bne.n	80172a2 <_dtoa_r+0x62a>
 801724a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801724c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801724e:	9b05      	ldr	r3, [sp, #20]
 8017250:	2200      	movs	r2, #0
 8017252:	199b      	adds	r3, r3, r6
 8017254:	9306      	str	r3, [sp, #24]
 8017256:	4b47      	ldr	r3, [pc, #284]	; (8017374 <_dtoa_r+0x6fc>)
 8017258:	f7ea f9ee 	bl	8001638 <__aeabi_dadd>
 801725c:	0002      	movs	r2, r0
 801725e:	000b      	movs	r3, r1
 8017260:	0020      	movs	r0, r4
 8017262:	0029      	movs	r1, r5
 8017264:	f7e9 f914 	bl	8000490 <__aeabi_dcmpgt>
 8017268:	2800      	cmp	r0, #0
 801726a:	d000      	beq.n	801726e <_dtoa_r+0x5f6>
 801726c:	e086      	b.n	801737c <_dtoa_r+0x704>
 801726e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017272:	2000      	movs	r0, #0
 8017274:	493f      	ldr	r1, [pc, #252]	; (8017374 <_dtoa_r+0x6fc>)
 8017276:	f7eb fbbb 	bl	80029f0 <__aeabi_dsub>
 801727a:	0002      	movs	r2, r0
 801727c:	000b      	movs	r3, r1
 801727e:	0020      	movs	r0, r4
 8017280:	0029      	movs	r1, r5
 8017282:	f7e9 f8f1 	bl	8000468 <__aeabi_dcmplt>
 8017286:	2800      	cmp	r0, #0
 8017288:	d100      	bne.n	801728c <_dtoa_r+0x614>
 801728a:	e724      	b.n	80170d6 <_dtoa_r+0x45e>
 801728c:	9b06      	ldr	r3, [sp, #24]
 801728e:	001a      	movs	r2, r3
 8017290:	3a01      	subs	r2, #1
 8017292:	9206      	str	r2, [sp, #24]
 8017294:	7812      	ldrb	r2, [r2, #0]
 8017296:	2a30      	cmp	r2, #48	; 0x30
 8017298:	d0f8      	beq.n	801728c <_dtoa_r+0x614>
 801729a:	9306      	str	r3, [sp, #24]
 801729c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801729e:	9302      	str	r3, [sp, #8]
 80172a0:	e046      	b.n	8017330 <_dtoa_r+0x6b8>
 80172a2:	2200      	movs	r2, #0
 80172a4:	4b2e      	ldr	r3, [pc, #184]	; (8017360 <_dtoa_r+0x6e8>)
 80172a6:	f7eb f937 	bl	8002518 <__aeabi_dmul>
 80172aa:	0004      	movs	r4, r0
 80172ac:	000d      	movs	r5, r1
 80172ae:	e7b6      	b.n	801721e <_dtoa_r+0x5a6>
 80172b0:	9b05      	ldr	r3, [sp, #20]
 80172b2:	9a05      	ldr	r2, [sp, #20]
 80172b4:	9309      	str	r3, [sp, #36]	; 0x24
 80172b6:	9b08      	ldr	r3, [sp, #32]
 80172b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80172ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80172bc:	3b01      	subs	r3, #1
 80172be:	189b      	adds	r3, r3, r2
 80172c0:	930a      	str	r3, [sp, #40]	; 0x28
 80172c2:	0032      	movs	r2, r6
 80172c4:	003b      	movs	r3, r7
 80172c6:	0020      	movs	r0, r4
 80172c8:	0029      	movs	r1, r5
 80172ca:	f7ea fd1f 	bl	8001d0c <__aeabi_ddiv>
 80172ce:	f7eb ff3f 	bl	8003150 <__aeabi_d2iz>
 80172d2:	9008      	str	r0, [sp, #32]
 80172d4:	f7eb ff72 	bl	80031bc <__aeabi_i2d>
 80172d8:	0032      	movs	r2, r6
 80172da:	003b      	movs	r3, r7
 80172dc:	f7eb f91c 	bl	8002518 <__aeabi_dmul>
 80172e0:	0002      	movs	r2, r0
 80172e2:	000b      	movs	r3, r1
 80172e4:	0020      	movs	r0, r4
 80172e6:	0029      	movs	r1, r5
 80172e8:	f7eb fb82 	bl	80029f0 <__aeabi_dsub>
 80172ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172ee:	001a      	movs	r2, r3
 80172f0:	3201      	adds	r2, #1
 80172f2:	9209      	str	r2, [sp, #36]	; 0x24
 80172f4:	9206      	str	r2, [sp, #24]
 80172f6:	9a08      	ldr	r2, [sp, #32]
 80172f8:	3230      	adds	r2, #48	; 0x30
 80172fa:	701a      	strb	r2, [r3, #0]
 80172fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80172fe:	429a      	cmp	r2, r3
 8017300:	d14f      	bne.n	80173a2 <_dtoa_r+0x72a>
 8017302:	0002      	movs	r2, r0
 8017304:	000b      	movs	r3, r1
 8017306:	f7ea f997 	bl	8001638 <__aeabi_dadd>
 801730a:	0032      	movs	r2, r6
 801730c:	003b      	movs	r3, r7
 801730e:	0004      	movs	r4, r0
 8017310:	000d      	movs	r5, r1
 8017312:	f7e9 f8bd 	bl	8000490 <__aeabi_dcmpgt>
 8017316:	2800      	cmp	r0, #0
 8017318:	d12e      	bne.n	8017378 <_dtoa_r+0x700>
 801731a:	0032      	movs	r2, r6
 801731c:	003b      	movs	r3, r7
 801731e:	0020      	movs	r0, r4
 8017320:	0029      	movs	r1, r5
 8017322:	f7e9 f89b 	bl	800045c <__aeabi_dcmpeq>
 8017326:	2800      	cmp	r0, #0
 8017328:	d002      	beq.n	8017330 <_dtoa_r+0x6b8>
 801732a:	9b08      	ldr	r3, [sp, #32]
 801732c:	07db      	lsls	r3, r3, #31
 801732e:	d423      	bmi.n	8017378 <_dtoa_r+0x700>
 8017330:	9803      	ldr	r0, [sp, #12]
 8017332:	9904      	ldr	r1, [sp, #16]
 8017334:	f000 ff80 	bl	8018238 <_Bfree>
 8017338:	2300      	movs	r3, #0
 801733a:	9a06      	ldr	r2, [sp, #24]
 801733c:	9802      	ldr	r0, [sp, #8]
 801733e:	7013      	strb	r3, [r2, #0]
 8017340:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017342:	3001      	adds	r0, #1
 8017344:	6018      	str	r0, [r3, #0]
 8017346:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017348:	2b00      	cmp	r3, #0
 801734a:	d100      	bne.n	801734e <_dtoa_r+0x6d6>
 801734c:	e4c8      	b.n	8016ce0 <_dtoa_r+0x68>
 801734e:	601a      	str	r2, [r3, #0]
 8017350:	e4c6      	b.n	8016ce0 <_dtoa_r+0x68>
 8017352:	46c0      	nop			; (mov r8, r8)
 8017354:	0801dbc8 	.word	0x0801dbc8
 8017358:	0801dba0 	.word	0x0801dba0
 801735c:	3ff00000 	.word	0x3ff00000
 8017360:	40240000 	.word	0x40240000
 8017364:	401c0000 	.word	0x401c0000
 8017368:	fcc00000 	.word	0xfcc00000
 801736c:	40140000 	.word	0x40140000
 8017370:	7cc00000 	.word	0x7cc00000
 8017374:	3fe00000 	.word	0x3fe00000
 8017378:	9b02      	ldr	r3, [sp, #8]
 801737a:	930f      	str	r3, [sp, #60]	; 0x3c
 801737c:	9b06      	ldr	r3, [sp, #24]
 801737e:	9306      	str	r3, [sp, #24]
 8017380:	3b01      	subs	r3, #1
 8017382:	781a      	ldrb	r2, [r3, #0]
 8017384:	2a39      	cmp	r2, #57	; 0x39
 8017386:	d108      	bne.n	801739a <_dtoa_r+0x722>
 8017388:	9a05      	ldr	r2, [sp, #20]
 801738a:	429a      	cmp	r2, r3
 801738c:	d1f7      	bne.n	801737e <_dtoa_r+0x706>
 801738e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017390:	9905      	ldr	r1, [sp, #20]
 8017392:	3201      	adds	r2, #1
 8017394:	920f      	str	r2, [sp, #60]	; 0x3c
 8017396:	2230      	movs	r2, #48	; 0x30
 8017398:	700a      	strb	r2, [r1, #0]
 801739a:	781a      	ldrb	r2, [r3, #0]
 801739c:	3201      	adds	r2, #1
 801739e:	701a      	strb	r2, [r3, #0]
 80173a0:	e77c      	b.n	801729c <_dtoa_r+0x624>
 80173a2:	2200      	movs	r2, #0
 80173a4:	4baa      	ldr	r3, [pc, #680]	; (8017650 <_dtoa_r+0x9d8>)
 80173a6:	f7eb f8b7 	bl	8002518 <__aeabi_dmul>
 80173aa:	2200      	movs	r2, #0
 80173ac:	2300      	movs	r3, #0
 80173ae:	0004      	movs	r4, r0
 80173b0:	000d      	movs	r5, r1
 80173b2:	f7e9 f853 	bl	800045c <__aeabi_dcmpeq>
 80173b6:	2800      	cmp	r0, #0
 80173b8:	d083      	beq.n	80172c2 <_dtoa_r+0x64a>
 80173ba:	e7b9      	b.n	8017330 <_dtoa_r+0x6b8>
 80173bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80173be:	2a00      	cmp	r2, #0
 80173c0:	d100      	bne.n	80173c4 <_dtoa_r+0x74c>
 80173c2:	e08a      	b.n	80174da <_dtoa_r+0x862>
 80173c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80173c6:	2a01      	cmp	r2, #1
 80173c8:	dc6e      	bgt.n	80174a8 <_dtoa_r+0x830>
 80173ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80173cc:	2a00      	cmp	r2, #0
 80173ce:	d067      	beq.n	80174a0 <_dtoa_r+0x828>
 80173d0:	4aa0      	ldr	r2, [pc, #640]	; (8017654 <_dtoa_r+0x9dc>)
 80173d2:	189b      	adds	r3, r3, r2
 80173d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80173d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80173d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173da:	2101      	movs	r1, #1
 80173dc:	18d2      	adds	r2, r2, r3
 80173de:	9209      	str	r2, [sp, #36]	; 0x24
 80173e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80173e2:	9803      	ldr	r0, [sp, #12]
 80173e4:	18d3      	adds	r3, r2, r3
 80173e6:	930d      	str	r3, [sp, #52]	; 0x34
 80173e8:	f001 f808 	bl	80183fc <__i2b>
 80173ec:	0007      	movs	r7, r0
 80173ee:	2c00      	cmp	r4, #0
 80173f0:	dd0e      	ble.n	8017410 <_dtoa_r+0x798>
 80173f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	dd0b      	ble.n	8017410 <_dtoa_r+0x798>
 80173f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80173fa:	0023      	movs	r3, r4
 80173fc:	4294      	cmp	r4, r2
 80173fe:	dd00      	ble.n	8017402 <_dtoa_r+0x78a>
 8017400:	0013      	movs	r3, r2
 8017402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017404:	1ae4      	subs	r4, r4, r3
 8017406:	1ad2      	subs	r2, r2, r3
 8017408:	9209      	str	r2, [sp, #36]	; 0x24
 801740a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801740c:	1ad3      	subs	r3, r2, r3
 801740e:	930d      	str	r3, [sp, #52]	; 0x34
 8017410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017412:	2b00      	cmp	r3, #0
 8017414:	d01e      	beq.n	8017454 <_dtoa_r+0x7dc>
 8017416:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017418:	2b00      	cmp	r3, #0
 801741a:	d062      	beq.n	80174e2 <_dtoa_r+0x86a>
 801741c:	2d00      	cmp	r5, #0
 801741e:	dd10      	ble.n	8017442 <_dtoa_r+0x7ca>
 8017420:	0039      	movs	r1, r7
 8017422:	002a      	movs	r2, r5
 8017424:	9803      	ldr	r0, [sp, #12]
 8017426:	f001 f8af 	bl	8018588 <__pow5mult>
 801742a:	9a04      	ldr	r2, [sp, #16]
 801742c:	0001      	movs	r1, r0
 801742e:	0007      	movs	r7, r0
 8017430:	9803      	ldr	r0, [sp, #12]
 8017432:	f000 fff9 	bl	8018428 <__multiply>
 8017436:	0006      	movs	r6, r0
 8017438:	9904      	ldr	r1, [sp, #16]
 801743a:	9803      	ldr	r0, [sp, #12]
 801743c:	f000 fefc 	bl	8018238 <_Bfree>
 8017440:	9604      	str	r6, [sp, #16]
 8017442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017444:	1b5a      	subs	r2, r3, r5
 8017446:	42ab      	cmp	r3, r5
 8017448:	d004      	beq.n	8017454 <_dtoa_r+0x7dc>
 801744a:	9904      	ldr	r1, [sp, #16]
 801744c:	9803      	ldr	r0, [sp, #12]
 801744e:	f001 f89b 	bl	8018588 <__pow5mult>
 8017452:	9004      	str	r0, [sp, #16]
 8017454:	2101      	movs	r1, #1
 8017456:	9803      	ldr	r0, [sp, #12]
 8017458:	f000 ffd0 	bl	80183fc <__i2b>
 801745c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801745e:	0006      	movs	r6, r0
 8017460:	2b00      	cmp	r3, #0
 8017462:	dd40      	ble.n	80174e6 <_dtoa_r+0x86e>
 8017464:	001a      	movs	r2, r3
 8017466:	0001      	movs	r1, r0
 8017468:	9803      	ldr	r0, [sp, #12]
 801746a:	f001 f88d 	bl	8018588 <__pow5mult>
 801746e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017470:	0006      	movs	r6, r0
 8017472:	2500      	movs	r5, #0
 8017474:	2b01      	cmp	r3, #1
 8017476:	dc3e      	bgt.n	80174f6 <_dtoa_r+0x87e>
 8017478:	2500      	movs	r5, #0
 801747a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801747c:	42ab      	cmp	r3, r5
 801747e:	d136      	bne.n	80174ee <_dtoa_r+0x876>
 8017480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017482:	031b      	lsls	r3, r3, #12
 8017484:	42ab      	cmp	r3, r5
 8017486:	d132      	bne.n	80174ee <_dtoa_r+0x876>
 8017488:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801748a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801748c:	4213      	tst	r3, r2
 801748e:	d02e      	beq.n	80174ee <_dtoa_r+0x876>
 8017490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017492:	3501      	adds	r5, #1
 8017494:	3301      	adds	r3, #1
 8017496:	9309      	str	r3, [sp, #36]	; 0x24
 8017498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801749a:	3301      	adds	r3, #1
 801749c:	930d      	str	r3, [sp, #52]	; 0x34
 801749e:	e026      	b.n	80174ee <_dtoa_r+0x876>
 80174a0:	2336      	movs	r3, #54	; 0x36
 80174a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80174a4:	1a9b      	subs	r3, r3, r2
 80174a6:	e795      	b.n	80173d4 <_dtoa_r+0x75c>
 80174a8:	9b08      	ldr	r3, [sp, #32]
 80174aa:	1e5d      	subs	r5, r3, #1
 80174ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174ae:	42ab      	cmp	r3, r5
 80174b0:	db08      	blt.n	80174c4 <_dtoa_r+0x84c>
 80174b2:	1b5d      	subs	r5, r3, r5
 80174b4:	9b08      	ldr	r3, [sp, #32]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	da0c      	bge.n	80174d4 <_dtoa_r+0x85c>
 80174ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174bc:	9a08      	ldr	r2, [sp, #32]
 80174be:	1a9c      	subs	r4, r3, r2
 80174c0:	2300      	movs	r3, #0
 80174c2:	e789      	b.n	80173d8 <_dtoa_r+0x760>
 80174c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80174c8:	1aeb      	subs	r3, r5, r3
 80174ca:	18d3      	adds	r3, r2, r3
 80174cc:	950e      	str	r5, [sp, #56]	; 0x38
 80174ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80174d0:	2500      	movs	r5, #0
 80174d2:	e7ef      	b.n	80174b4 <_dtoa_r+0x83c>
 80174d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80174d6:	9b08      	ldr	r3, [sp, #32]
 80174d8:	e77e      	b.n	80173d8 <_dtoa_r+0x760>
 80174da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80174dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80174de:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80174e0:	e785      	b.n	80173ee <_dtoa_r+0x776>
 80174e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80174e4:	e7b1      	b.n	801744a <_dtoa_r+0x7d2>
 80174e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80174e8:	2500      	movs	r5, #0
 80174ea:	2b01      	cmp	r3, #1
 80174ec:	ddc4      	ble.n	8017478 <_dtoa_r+0x800>
 80174ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80174f0:	2001      	movs	r0, #1
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d008      	beq.n	8017508 <_dtoa_r+0x890>
 80174f6:	6933      	ldr	r3, [r6, #16]
 80174f8:	3303      	adds	r3, #3
 80174fa:	009b      	lsls	r3, r3, #2
 80174fc:	18f3      	adds	r3, r6, r3
 80174fe:	6858      	ldr	r0, [r3, #4]
 8017500:	f000 ff34 	bl	801836c <__hi0bits>
 8017504:	2320      	movs	r3, #32
 8017506:	1a18      	subs	r0, r3, r0
 8017508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801750a:	221f      	movs	r2, #31
 801750c:	1818      	adds	r0, r3, r0
 801750e:	0003      	movs	r3, r0
 8017510:	4013      	ands	r3, r2
 8017512:	4210      	tst	r0, r2
 8017514:	d046      	beq.n	80175a4 <_dtoa_r+0x92c>
 8017516:	3201      	adds	r2, #1
 8017518:	1ad2      	subs	r2, r2, r3
 801751a:	2a04      	cmp	r2, #4
 801751c:	dd3f      	ble.n	801759e <_dtoa_r+0x926>
 801751e:	221c      	movs	r2, #28
 8017520:	1ad3      	subs	r3, r2, r3
 8017522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017524:	18e4      	adds	r4, r4, r3
 8017526:	18d2      	adds	r2, r2, r3
 8017528:	9209      	str	r2, [sp, #36]	; 0x24
 801752a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801752c:	18d3      	adds	r3, r2, r3
 801752e:	930d      	str	r3, [sp, #52]	; 0x34
 8017530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017532:	2b00      	cmp	r3, #0
 8017534:	dd05      	ble.n	8017542 <_dtoa_r+0x8ca>
 8017536:	001a      	movs	r2, r3
 8017538:	9904      	ldr	r1, [sp, #16]
 801753a:	9803      	ldr	r0, [sp, #12]
 801753c:	f001 f866 	bl	801860c <__lshift>
 8017540:	9004      	str	r0, [sp, #16]
 8017542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017544:	2b00      	cmp	r3, #0
 8017546:	dd05      	ble.n	8017554 <_dtoa_r+0x8dc>
 8017548:	0031      	movs	r1, r6
 801754a:	001a      	movs	r2, r3
 801754c:	9803      	ldr	r0, [sp, #12]
 801754e:	f001 f85d 	bl	801860c <__lshift>
 8017552:	0006      	movs	r6, r0
 8017554:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017556:	2b00      	cmp	r3, #0
 8017558:	d026      	beq.n	80175a8 <_dtoa_r+0x930>
 801755a:	0031      	movs	r1, r6
 801755c:	9804      	ldr	r0, [sp, #16]
 801755e:	f001 f8c5 	bl	80186ec <__mcmp>
 8017562:	2800      	cmp	r0, #0
 8017564:	da20      	bge.n	80175a8 <_dtoa_r+0x930>
 8017566:	9b02      	ldr	r3, [sp, #8]
 8017568:	220a      	movs	r2, #10
 801756a:	3b01      	subs	r3, #1
 801756c:	9302      	str	r3, [sp, #8]
 801756e:	9904      	ldr	r1, [sp, #16]
 8017570:	2300      	movs	r3, #0
 8017572:	9803      	ldr	r0, [sp, #12]
 8017574:	f000 fe6a 	bl	801824c <__multadd>
 8017578:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801757a:	9004      	str	r0, [sp, #16]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d100      	bne.n	8017582 <_dtoa_r+0x90a>
 8017580:	e154      	b.n	801782c <_dtoa_r+0xbb4>
 8017582:	2300      	movs	r3, #0
 8017584:	0039      	movs	r1, r7
 8017586:	220a      	movs	r2, #10
 8017588:	9803      	ldr	r0, [sp, #12]
 801758a:	f000 fe5f 	bl	801824c <__multadd>
 801758e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017590:	0007      	movs	r7, r0
 8017592:	2b00      	cmp	r3, #0
 8017594:	dc47      	bgt.n	8017626 <_dtoa_r+0x9ae>
 8017596:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017598:	2b02      	cmp	r3, #2
 801759a:	dc0d      	bgt.n	80175b8 <_dtoa_r+0x940>
 801759c:	e043      	b.n	8017626 <_dtoa_r+0x9ae>
 801759e:	2a04      	cmp	r2, #4
 80175a0:	d0c6      	beq.n	8017530 <_dtoa_r+0x8b8>
 80175a2:	0013      	movs	r3, r2
 80175a4:	331c      	adds	r3, #28
 80175a6:	e7bc      	b.n	8017522 <_dtoa_r+0x8aa>
 80175a8:	9b08      	ldr	r3, [sp, #32]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	dc35      	bgt.n	801761a <_dtoa_r+0x9a2>
 80175ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80175b0:	2b02      	cmp	r3, #2
 80175b2:	dd32      	ble.n	801761a <_dtoa_r+0x9a2>
 80175b4:	9b08      	ldr	r3, [sp, #32]
 80175b6:	930c      	str	r3, [sp, #48]	; 0x30
 80175b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d10c      	bne.n	80175d8 <_dtoa_r+0x960>
 80175be:	0031      	movs	r1, r6
 80175c0:	2205      	movs	r2, #5
 80175c2:	9803      	ldr	r0, [sp, #12]
 80175c4:	f000 fe42 	bl	801824c <__multadd>
 80175c8:	0006      	movs	r6, r0
 80175ca:	0001      	movs	r1, r0
 80175cc:	9804      	ldr	r0, [sp, #16]
 80175ce:	f001 f88d 	bl	80186ec <__mcmp>
 80175d2:	2800      	cmp	r0, #0
 80175d4:	dd00      	ble.n	80175d8 <_dtoa_r+0x960>
 80175d6:	e5a8      	b.n	801712a <_dtoa_r+0x4b2>
 80175d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80175da:	43db      	mvns	r3, r3
 80175dc:	9302      	str	r3, [sp, #8]
 80175de:	9b05      	ldr	r3, [sp, #20]
 80175e0:	9306      	str	r3, [sp, #24]
 80175e2:	2500      	movs	r5, #0
 80175e4:	0031      	movs	r1, r6
 80175e6:	9803      	ldr	r0, [sp, #12]
 80175e8:	f000 fe26 	bl	8018238 <_Bfree>
 80175ec:	2f00      	cmp	r7, #0
 80175ee:	d100      	bne.n	80175f2 <_dtoa_r+0x97a>
 80175f0:	e69e      	b.n	8017330 <_dtoa_r+0x6b8>
 80175f2:	2d00      	cmp	r5, #0
 80175f4:	d005      	beq.n	8017602 <_dtoa_r+0x98a>
 80175f6:	42bd      	cmp	r5, r7
 80175f8:	d003      	beq.n	8017602 <_dtoa_r+0x98a>
 80175fa:	0029      	movs	r1, r5
 80175fc:	9803      	ldr	r0, [sp, #12]
 80175fe:	f000 fe1b 	bl	8018238 <_Bfree>
 8017602:	0039      	movs	r1, r7
 8017604:	9803      	ldr	r0, [sp, #12]
 8017606:	f000 fe17 	bl	8018238 <_Bfree>
 801760a:	e691      	b.n	8017330 <_dtoa_r+0x6b8>
 801760c:	2600      	movs	r6, #0
 801760e:	0037      	movs	r7, r6
 8017610:	e7e2      	b.n	80175d8 <_dtoa_r+0x960>
 8017612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017614:	0037      	movs	r7, r6
 8017616:	9302      	str	r3, [sp, #8]
 8017618:	e587      	b.n	801712a <_dtoa_r+0x4b2>
 801761a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801761c:	2b00      	cmp	r3, #0
 801761e:	d100      	bne.n	8017622 <_dtoa_r+0x9aa>
 8017620:	e0bc      	b.n	801779c <_dtoa_r+0xb24>
 8017622:	9b08      	ldr	r3, [sp, #32]
 8017624:	930c      	str	r3, [sp, #48]	; 0x30
 8017626:	2c00      	cmp	r4, #0
 8017628:	dd05      	ble.n	8017636 <_dtoa_r+0x9be>
 801762a:	0039      	movs	r1, r7
 801762c:	0022      	movs	r2, r4
 801762e:	9803      	ldr	r0, [sp, #12]
 8017630:	f000 ffec 	bl	801860c <__lshift>
 8017634:	0007      	movs	r7, r0
 8017636:	0038      	movs	r0, r7
 8017638:	2d00      	cmp	r5, #0
 801763a:	d01e      	beq.n	801767a <_dtoa_r+0xa02>
 801763c:	6879      	ldr	r1, [r7, #4]
 801763e:	9803      	ldr	r0, [sp, #12]
 8017640:	f000 fdd2 	bl	80181e8 <_Balloc>
 8017644:	1e04      	subs	r4, r0, #0
 8017646:	d10b      	bne.n	8017660 <_dtoa_r+0x9e8>
 8017648:	0002      	movs	r2, r0
 801764a:	4b03      	ldr	r3, [pc, #12]	; (8017658 <_dtoa_r+0x9e0>)
 801764c:	4903      	ldr	r1, [pc, #12]	; (801765c <_dtoa_r+0x9e4>)
 801764e:	e444      	b.n	8016eda <_dtoa_r+0x262>
 8017650:	40240000 	.word	0x40240000
 8017654:	00000433 	.word	0x00000433
 8017658:	0801da51 	.word	0x0801da51
 801765c:	000002ea 	.word	0x000002ea
 8017660:	0039      	movs	r1, r7
 8017662:	693b      	ldr	r3, [r7, #16]
 8017664:	310c      	adds	r1, #12
 8017666:	1c9a      	adds	r2, r3, #2
 8017668:	0092      	lsls	r2, r2, #2
 801766a:	300c      	adds	r0, #12
 801766c:	f7fc fe50 	bl	8014310 <memcpy>
 8017670:	2201      	movs	r2, #1
 8017672:	0021      	movs	r1, r4
 8017674:	9803      	ldr	r0, [sp, #12]
 8017676:	f000 ffc9 	bl	801860c <__lshift>
 801767a:	003d      	movs	r5, r7
 801767c:	0007      	movs	r7, r0
 801767e:	9b05      	ldr	r3, [sp, #20]
 8017680:	9308      	str	r3, [sp, #32]
 8017682:	0031      	movs	r1, r6
 8017684:	9804      	ldr	r0, [sp, #16]
 8017686:	f7ff fa6b 	bl	8016b60 <quorem>
 801768a:	0029      	movs	r1, r5
 801768c:	0004      	movs	r4, r0
 801768e:	900d      	str	r0, [sp, #52]	; 0x34
 8017690:	9804      	ldr	r0, [sp, #16]
 8017692:	f001 f82b 	bl	80186ec <__mcmp>
 8017696:	003a      	movs	r2, r7
 8017698:	900e      	str	r0, [sp, #56]	; 0x38
 801769a:	0031      	movs	r1, r6
 801769c:	9803      	ldr	r0, [sp, #12]
 801769e:	f001 f841 	bl	8018724 <__mdiff>
 80176a2:	68c3      	ldr	r3, [r0, #12]
 80176a4:	3430      	adds	r4, #48	; 0x30
 80176a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80176a8:	2301      	movs	r3, #1
 80176aa:	9309      	str	r3, [sp, #36]	; 0x24
 80176ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176ae:	9006      	str	r0, [sp, #24]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d104      	bne.n	80176be <_dtoa_r+0xa46>
 80176b4:	0001      	movs	r1, r0
 80176b6:	9804      	ldr	r0, [sp, #16]
 80176b8:	f001 f818 	bl	80186ec <__mcmp>
 80176bc:	9009      	str	r0, [sp, #36]	; 0x24
 80176be:	9803      	ldr	r0, [sp, #12]
 80176c0:	9906      	ldr	r1, [sp, #24]
 80176c2:	f000 fdb9 	bl	8018238 <_Bfree>
 80176c6:	2301      	movs	r3, #1
 80176c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80176ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176cc:	4018      	ands	r0, r3
 80176ce:	9b08      	ldr	r3, [sp, #32]
 80176d0:	3301      	adds	r3, #1
 80176d2:	9306      	str	r3, [sp, #24]
 80176d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80176d6:	4313      	orrs	r3, r2
 80176d8:	4303      	orrs	r3, r0
 80176da:	d109      	bne.n	80176f0 <_dtoa_r+0xa78>
 80176dc:	2c39      	cmp	r4, #57	; 0x39
 80176de:	d021      	beq.n	8017724 <_dtoa_r+0xaac>
 80176e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	dd01      	ble.n	80176ea <_dtoa_r+0xa72>
 80176e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80176e8:	3431      	adds	r4, #49	; 0x31
 80176ea:	9b08      	ldr	r3, [sp, #32]
 80176ec:	701c      	strb	r4, [r3, #0]
 80176ee:	e779      	b.n	80175e4 <_dtoa_r+0x96c>
 80176f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	db03      	blt.n	80176fe <_dtoa_r+0xa86>
 80176f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80176f8:	4313      	orrs	r3, r2
 80176fa:	4303      	orrs	r3, r0
 80176fc:	d11e      	bne.n	801773c <_dtoa_r+0xac4>
 80176fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017700:	2b00      	cmp	r3, #0
 8017702:	ddf2      	ble.n	80176ea <_dtoa_r+0xa72>
 8017704:	9904      	ldr	r1, [sp, #16]
 8017706:	2201      	movs	r2, #1
 8017708:	9803      	ldr	r0, [sp, #12]
 801770a:	f000 ff7f 	bl	801860c <__lshift>
 801770e:	0031      	movs	r1, r6
 8017710:	9004      	str	r0, [sp, #16]
 8017712:	f000 ffeb 	bl	80186ec <__mcmp>
 8017716:	2800      	cmp	r0, #0
 8017718:	dc02      	bgt.n	8017720 <_dtoa_r+0xaa8>
 801771a:	d1e6      	bne.n	80176ea <_dtoa_r+0xa72>
 801771c:	07e3      	lsls	r3, r4, #31
 801771e:	d5e4      	bpl.n	80176ea <_dtoa_r+0xa72>
 8017720:	2c39      	cmp	r4, #57	; 0x39
 8017722:	d1e0      	bne.n	80176e6 <_dtoa_r+0xa6e>
 8017724:	2339      	movs	r3, #57	; 0x39
 8017726:	9a08      	ldr	r2, [sp, #32]
 8017728:	7013      	strb	r3, [r2, #0]
 801772a:	9b06      	ldr	r3, [sp, #24]
 801772c:	9306      	str	r3, [sp, #24]
 801772e:	3b01      	subs	r3, #1
 8017730:	781a      	ldrb	r2, [r3, #0]
 8017732:	2a39      	cmp	r2, #57	; 0x39
 8017734:	d067      	beq.n	8017806 <_dtoa_r+0xb8e>
 8017736:	3201      	adds	r2, #1
 8017738:	701a      	strb	r2, [r3, #0]
 801773a:	e753      	b.n	80175e4 <_dtoa_r+0x96c>
 801773c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801773e:	2b00      	cmp	r3, #0
 8017740:	dd03      	ble.n	801774a <_dtoa_r+0xad2>
 8017742:	2c39      	cmp	r4, #57	; 0x39
 8017744:	d0ee      	beq.n	8017724 <_dtoa_r+0xaac>
 8017746:	3401      	adds	r4, #1
 8017748:	e7cf      	b.n	80176ea <_dtoa_r+0xa72>
 801774a:	9b08      	ldr	r3, [sp, #32]
 801774c:	9a05      	ldr	r2, [sp, #20]
 801774e:	701c      	strb	r4, [r3, #0]
 8017750:	2301      	movs	r3, #1
 8017752:	1a9b      	subs	r3, r3, r2
 8017754:	9a08      	ldr	r2, [sp, #32]
 8017756:	189b      	adds	r3, r3, r2
 8017758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801775a:	429a      	cmp	r2, r3
 801775c:	d03e      	beq.n	80177dc <_dtoa_r+0xb64>
 801775e:	2300      	movs	r3, #0
 8017760:	220a      	movs	r2, #10
 8017762:	9904      	ldr	r1, [sp, #16]
 8017764:	9803      	ldr	r0, [sp, #12]
 8017766:	f000 fd71 	bl	801824c <__multadd>
 801776a:	2300      	movs	r3, #0
 801776c:	9004      	str	r0, [sp, #16]
 801776e:	220a      	movs	r2, #10
 8017770:	0029      	movs	r1, r5
 8017772:	9803      	ldr	r0, [sp, #12]
 8017774:	42bd      	cmp	r5, r7
 8017776:	d106      	bne.n	8017786 <_dtoa_r+0xb0e>
 8017778:	f000 fd68 	bl	801824c <__multadd>
 801777c:	0005      	movs	r5, r0
 801777e:	0007      	movs	r7, r0
 8017780:	9b06      	ldr	r3, [sp, #24]
 8017782:	9308      	str	r3, [sp, #32]
 8017784:	e77d      	b.n	8017682 <_dtoa_r+0xa0a>
 8017786:	f000 fd61 	bl	801824c <__multadd>
 801778a:	0039      	movs	r1, r7
 801778c:	0005      	movs	r5, r0
 801778e:	2300      	movs	r3, #0
 8017790:	220a      	movs	r2, #10
 8017792:	9803      	ldr	r0, [sp, #12]
 8017794:	f000 fd5a 	bl	801824c <__multadd>
 8017798:	0007      	movs	r7, r0
 801779a:	e7f1      	b.n	8017780 <_dtoa_r+0xb08>
 801779c:	9b08      	ldr	r3, [sp, #32]
 801779e:	930c      	str	r3, [sp, #48]	; 0x30
 80177a0:	2500      	movs	r5, #0
 80177a2:	0031      	movs	r1, r6
 80177a4:	9804      	ldr	r0, [sp, #16]
 80177a6:	f7ff f9db 	bl	8016b60 <quorem>
 80177aa:	9b05      	ldr	r3, [sp, #20]
 80177ac:	3030      	adds	r0, #48	; 0x30
 80177ae:	5558      	strb	r0, [r3, r5]
 80177b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177b2:	3501      	adds	r5, #1
 80177b4:	0004      	movs	r4, r0
 80177b6:	42ab      	cmp	r3, r5
 80177b8:	dd07      	ble.n	80177ca <_dtoa_r+0xb52>
 80177ba:	2300      	movs	r3, #0
 80177bc:	220a      	movs	r2, #10
 80177be:	9904      	ldr	r1, [sp, #16]
 80177c0:	9803      	ldr	r0, [sp, #12]
 80177c2:	f000 fd43 	bl	801824c <__multadd>
 80177c6:	9004      	str	r0, [sp, #16]
 80177c8:	e7eb      	b.n	80177a2 <_dtoa_r+0xb2a>
 80177ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177cc:	2001      	movs	r0, #1
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	dd00      	ble.n	80177d4 <_dtoa_r+0xb5c>
 80177d2:	0018      	movs	r0, r3
 80177d4:	2500      	movs	r5, #0
 80177d6:	9b05      	ldr	r3, [sp, #20]
 80177d8:	181b      	adds	r3, r3, r0
 80177da:	9306      	str	r3, [sp, #24]
 80177dc:	9904      	ldr	r1, [sp, #16]
 80177de:	2201      	movs	r2, #1
 80177e0:	9803      	ldr	r0, [sp, #12]
 80177e2:	f000 ff13 	bl	801860c <__lshift>
 80177e6:	0031      	movs	r1, r6
 80177e8:	9004      	str	r0, [sp, #16]
 80177ea:	f000 ff7f 	bl	80186ec <__mcmp>
 80177ee:	2800      	cmp	r0, #0
 80177f0:	dc9b      	bgt.n	801772a <_dtoa_r+0xab2>
 80177f2:	d101      	bne.n	80177f8 <_dtoa_r+0xb80>
 80177f4:	07e3      	lsls	r3, r4, #31
 80177f6:	d498      	bmi.n	801772a <_dtoa_r+0xab2>
 80177f8:	9b06      	ldr	r3, [sp, #24]
 80177fa:	9306      	str	r3, [sp, #24]
 80177fc:	3b01      	subs	r3, #1
 80177fe:	781a      	ldrb	r2, [r3, #0]
 8017800:	2a30      	cmp	r2, #48	; 0x30
 8017802:	d0fa      	beq.n	80177fa <_dtoa_r+0xb82>
 8017804:	e6ee      	b.n	80175e4 <_dtoa_r+0x96c>
 8017806:	9a05      	ldr	r2, [sp, #20]
 8017808:	429a      	cmp	r2, r3
 801780a:	d18f      	bne.n	801772c <_dtoa_r+0xab4>
 801780c:	9b02      	ldr	r3, [sp, #8]
 801780e:	3301      	adds	r3, #1
 8017810:	9302      	str	r3, [sp, #8]
 8017812:	2331      	movs	r3, #49	; 0x31
 8017814:	7013      	strb	r3, [r2, #0]
 8017816:	e6e5      	b.n	80175e4 <_dtoa_r+0x96c>
 8017818:	4b08      	ldr	r3, [pc, #32]	; (801783c <_dtoa_r+0xbc4>)
 801781a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801781c:	9305      	str	r3, [sp, #20]
 801781e:	4b08      	ldr	r3, [pc, #32]	; (8017840 <_dtoa_r+0xbc8>)
 8017820:	2a00      	cmp	r2, #0
 8017822:	d001      	beq.n	8017828 <_dtoa_r+0xbb0>
 8017824:	f7ff fa5a 	bl	8016cdc <_dtoa_r+0x64>
 8017828:	f7ff fa5a 	bl	8016ce0 <_dtoa_r+0x68>
 801782c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801782e:	2b00      	cmp	r3, #0
 8017830:	dcb6      	bgt.n	80177a0 <_dtoa_r+0xb28>
 8017832:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017834:	2b02      	cmp	r3, #2
 8017836:	dd00      	ble.n	801783a <_dtoa_r+0xbc2>
 8017838:	e6be      	b.n	80175b8 <_dtoa_r+0x940>
 801783a:	e7b1      	b.n	80177a0 <_dtoa_r+0xb28>
 801783c:	0801da48 	.word	0x0801da48
 8017840:	0801da50 	.word	0x0801da50

08017844 <__errno>:
 8017844:	4b01      	ldr	r3, [pc, #4]	; (801784c <__errno+0x8>)
 8017846:	6818      	ldr	r0, [r3, #0]
 8017848:	4770      	bx	lr
 801784a:	46c0      	nop			; (mov r8, r8)
 801784c:	200000d0 	.word	0x200000d0

08017850 <__libc_fini_array>:
 8017850:	b570      	push	{r4, r5, r6, lr}
 8017852:	4d07      	ldr	r5, [pc, #28]	; (8017870 <__libc_fini_array+0x20>)
 8017854:	4c07      	ldr	r4, [pc, #28]	; (8017874 <__libc_fini_array+0x24>)
 8017856:	1b64      	subs	r4, r4, r5
 8017858:	10a4      	asrs	r4, r4, #2
 801785a:	2c00      	cmp	r4, #0
 801785c:	d102      	bne.n	8017864 <__libc_fini_array+0x14>
 801785e:	f002 fe49 	bl	801a4f4 <_fini>
 8017862:	bd70      	pop	{r4, r5, r6, pc}
 8017864:	3c01      	subs	r4, #1
 8017866:	00a3      	lsls	r3, r4, #2
 8017868:	58eb      	ldr	r3, [r5, r3]
 801786a:	4798      	blx	r3
 801786c:	e7f5      	b.n	801785a <__libc_fini_array+0xa>
 801786e:	46c0      	nop			; (mov r8, r8)
 8017870:	0801dd08 	.word	0x0801dd08
 8017874:	0801dd0c 	.word	0x0801dd0c

08017878 <_malloc_trim_r>:
 8017878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801787a:	0004      	movs	r4, r0
 801787c:	2008      	movs	r0, #8
 801787e:	000d      	movs	r5, r1
 8017880:	f7ff f94e 	bl	8016b20 <sysconf>
 8017884:	0006      	movs	r6, r0
 8017886:	0020      	movs	r0, r4
 8017888:	f7fc fd54 	bl	8014334 <__malloc_lock>
 801788c:	2203      	movs	r2, #3
 801788e:	4f21      	ldr	r7, [pc, #132]	; (8017914 <_malloc_trim_r+0x9c>)
 8017890:	0031      	movs	r1, r6
 8017892:	68bb      	ldr	r3, [r7, #8]
 8017894:	685b      	ldr	r3, [r3, #4]
 8017896:	4393      	bics	r3, r2
 8017898:	1b58      	subs	r0, r3, r5
 801789a:	3811      	subs	r0, #17
 801789c:	1980      	adds	r0, r0, r6
 801789e:	9301      	str	r3, [sp, #4]
 80178a0:	f7e8 fc56 	bl	8000150 <__udivsi3>
 80178a4:	1e45      	subs	r5, r0, #1
 80178a6:	4375      	muls	r5, r6
 80178a8:	42ae      	cmp	r6, r5
 80178aa:	dd04      	ble.n	80178b6 <_malloc_trim_r+0x3e>
 80178ac:	0020      	movs	r0, r4
 80178ae:	f7fc fd49 	bl	8014344 <__malloc_unlock>
 80178b2:	2000      	movs	r0, #0
 80178b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80178b6:	2100      	movs	r1, #0
 80178b8:	0020      	movs	r0, r4
 80178ba:	f7fc ff15 	bl	80146e8 <_sbrk_r>
 80178be:	68bb      	ldr	r3, [r7, #8]
 80178c0:	9a01      	ldr	r2, [sp, #4]
 80178c2:	189b      	adds	r3, r3, r2
 80178c4:	4298      	cmp	r0, r3
 80178c6:	d1f1      	bne.n	80178ac <_malloc_trim_r+0x34>
 80178c8:	0020      	movs	r0, r4
 80178ca:	4269      	negs	r1, r5
 80178cc:	f7fc ff0c 	bl	80146e8 <_sbrk_r>
 80178d0:	1c43      	adds	r3, r0, #1
 80178d2:	d110      	bne.n	80178f6 <_malloc_trim_r+0x7e>
 80178d4:	2100      	movs	r1, #0
 80178d6:	0020      	movs	r0, r4
 80178d8:	f7fc ff06 	bl	80146e8 <_sbrk_r>
 80178dc:	68ba      	ldr	r2, [r7, #8]
 80178de:	1a81      	subs	r1, r0, r2
 80178e0:	290f      	cmp	r1, #15
 80178e2:	dde3      	ble.n	80178ac <_malloc_trim_r+0x34>
 80178e4:	4b0c      	ldr	r3, [pc, #48]	; (8017918 <_malloc_trim_r+0xa0>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	1ac0      	subs	r0, r0, r3
 80178ea:	4b0c      	ldr	r3, [pc, #48]	; (801791c <_malloc_trim_r+0xa4>)
 80178ec:	6018      	str	r0, [r3, #0]
 80178ee:	2301      	movs	r3, #1
 80178f0:	430b      	orrs	r3, r1
 80178f2:	6053      	str	r3, [r2, #4]
 80178f4:	e7da      	b.n	80178ac <_malloc_trim_r+0x34>
 80178f6:	2601      	movs	r6, #1
 80178f8:	9b01      	ldr	r3, [sp, #4]
 80178fa:	68ba      	ldr	r2, [r7, #8]
 80178fc:	1b5b      	subs	r3, r3, r5
 80178fe:	4333      	orrs	r3, r6
 8017900:	6053      	str	r3, [r2, #4]
 8017902:	4b06      	ldr	r3, [pc, #24]	; (801791c <_malloc_trim_r+0xa4>)
 8017904:	0020      	movs	r0, r4
 8017906:	681a      	ldr	r2, [r3, #0]
 8017908:	1b55      	subs	r5, r2, r5
 801790a:	601d      	str	r5, [r3, #0]
 801790c:	f7fc fd1a 	bl	8014344 <__malloc_unlock>
 8017910:	0030      	movs	r0, r6
 8017912:	e7cf      	b.n	80178b4 <_malloc_trim_r+0x3c>
 8017914:	20000500 	.word	0x20000500
 8017918:	20000908 	.word	0x20000908
 801791c:	20006c64 	.word	0x20006c64

08017920 <_free_r>:
 8017920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017922:	1e0d      	subs	r5, r1, #0
 8017924:	9001      	str	r0, [sp, #4]
 8017926:	d02d      	beq.n	8017984 <_free_r+0x64>
 8017928:	f7fc fd04 	bl	8014334 <__malloc_lock>
 801792c:	2301      	movs	r3, #1
 801792e:	0029      	movs	r1, r5
 8017930:	469c      	mov	ip, r3
 8017932:	3908      	subs	r1, #8
 8017934:	684f      	ldr	r7, [r1, #4]
 8017936:	4662      	mov	r2, ip
 8017938:	003b      	movs	r3, r7
 801793a:	4666      	mov	r6, ip
 801793c:	4393      	bics	r3, r2
 801793e:	18c8      	adds	r0, r1, r3
 8017940:	6845      	ldr	r5, [r0, #4]
 8017942:	3202      	adds	r2, #2
 8017944:	4395      	bics	r5, r2
 8017946:	4a4a      	ldr	r2, [pc, #296]	; (8017a70 <_free_r+0x150>)
 8017948:	4037      	ands	r7, r6
 801794a:	6896      	ldr	r6, [r2, #8]
 801794c:	4286      	cmp	r6, r0
 801794e:	d11a      	bne.n	8017986 <_free_r+0x66>
 8017950:	195b      	adds	r3, r3, r5
 8017952:	2f00      	cmp	r7, #0
 8017954:	d106      	bne.n	8017964 <_free_r+0x44>
 8017956:	6808      	ldr	r0, [r1, #0]
 8017958:	1a09      	subs	r1, r1, r0
 801795a:	688d      	ldr	r5, [r1, #8]
 801795c:	181b      	adds	r3, r3, r0
 801795e:	68c8      	ldr	r0, [r1, #12]
 8017960:	60e8      	str	r0, [r5, #12]
 8017962:	6085      	str	r5, [r0, #8]
 8017964:	2001      	movs	r0, #1
 8017966:	4318      	orrs	r0, r3
 8017968:	6048      	str	r0, [r1, #4]
 801796a:	6091      	str	r1, [r2, #8]
 801796c:	4a41      	ldr	r2, [pc, #260]	; (8017a74 <_free_r+0x154>)
 801796e:	6812      	ldr	r2, [r2, #0]
 8017970:	429a      	cmp	r2, r3
 8017972:	d804      	bhi.n	801797e <_free_r+0x5e>
 8017974:	4b40      	ldr	r3, [pc, #256]	; (8017a78 <_free_r+0x158>)
 8017976:	9801      	ldr	r0, [sp, #4]
 8017978:	6819      	ldr	r1, [r3, #0]
 801797a:	f7ff ff7d 	bl	8017878 <_malloc_trim_r>
 801797e:	9801      	ldr	r0, [sp, #4]
 8017980:	f7fc fce0 	bl	8014344 <__malloc_unlock>
 8017984:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017986:	2600      	movs	r6, #0
 8017988:	6045      	str	r5, [r0, #4]
 801798a:	42b7      	cmp	r7, r6
 801798c:	d109      	bne.n	80179a2 <_free_r+0x82>
 801798e:	680f      	ldr	r7, [r1, #0]
 8017990:	4c3a      	ldr	r4, [pc, #232]	; (8017a7c <_free_r+0x15c>)
 8017992:	1bc9      	subs	r1, r1, r7
 8017994:	19db      	adds	r3, r3, r7
 8017996:	688f      	ldr	r7, [r1, #8]
 8017998:	42a7      	cmp	r7, r4
 801799a:	d02c      	beq.n	80179f6 <_free_r+0xd6>
 801799c:	68cc      	ldr	r4, [r1, #12]
 801799e:	60fc      	str	r4, [r7, #12]
 80179a0:	60a7      	str	r7, [r4, #8]
 80179a2:	1947      	adds	r7, r0, r5
 80179a4:	687c      	ldr	r4, [r7, #4]
 80179a6:	2701      	movs	r7, #1
 80179a8:	423c      	tst	r4, r7
 80179aa:	d10b      	bne.n	80179c4 <_free_r+0xa4>
 80179ac:	195b      	adds	r3, r3, r5
 80179ae:	6885      	ldr	r5, [r0, #8]
 80179b0:	2e00      	cmp	r6, #0
 80179b2:	d122      	bne.n	80179fa <_free_r+0xda>
 80179b4:	4c31      	ldr	r4, [pc, #196]	; (8017a7c <_free_r+0x15c>)
 80179b6:	42a5      	cmp	r5, r4
 80179b8:	d11f      	bne.n	80179fa <_free_r+0xda>
 80179ba:	003e      	movs	r6, r7
 80179bc:	6151      	str	r1, [r2, #20]
 80179be:	6111      	str	r1, [r2, #16]
 80179c0:	60cd      	str	r5, [r1, #12]
 80179c2:	608d      	str	r5, [r1, #8]
 80179c4:	2501      	movs	r5, #1
 80179c6:	0028      	movs	r0, r5
 80179c8:	4318      	orrs	r0, r3
 80179ca:	6048      	str	r0, [r1, #4]
 80179cc:	50cb      	str	r3, [r1, r3]
 80179ce:	2e00      	cmp	r6, #0
 80179d0:	d1d5      	bne.n	801797e <_free_r+0x5e>
 80179d2:	2080      	movs	r0, #128	; 0x80
 80179d4:	0080      	lsls	r0, r0, #2
 80179d6:	4283      	cmp	r3, r0
 80179d8:	d213      	bcs.n	8017a02 <_free_r+0xe2>
 80179da:	08d8      	lsrs	r0, r3, #3
 80179dc:	095b      	lsrs	r3, r3, #5
 80179de:	409d      	lsls	r5, r3
 80179e0:	6853      	ldr	r3, [r2, #4]
 80179e2:	00c0      	lsls	r0, r0, #3
 80179e4:	431d      	orrs	r5, r3
 80179e6:	6055      	str	r5, [r2, #4]
 80179e8:	1882      	adds	r2, r0, r2
 80179ea:	6893      	ldr	r3, [r2, #8]
 80179ec:	60ca      	str	r2, [r1, #12]
 80179ee:	608b      	str	r3, [r1, #8]
 80179f0:	6091      	str	r1, [r2, #8]
 80179f2:	60d9      	str	r1, [r3, #12]
 80179f4:	e7c3      	b.n	801797e <_free_r+0x5e>
 80179f6:	4666      	mov	r6, ip
 80179f8:	e7d3      	b.n	80179a2 <_free_r+0x82>
 80179fa:	68c0      	ldr	r0, [r0, #12]
 80179fc:	60e8      	str	r0, [r5, #12]
 80179fe:	6085      	str	r5, [r0, #8]
 8017a00:	e7e0      	b.n	80179c4 <_free_r+0xa4>
 8017a02:	0a5d      	lsrs	r5, r3, #9
 8017a04:	2d04      	cmp	r5, #4
 8017a06:	d812      	bhi.n	8017a2e <_free_r+0x10e>
 8017a08:	0998      	lsrs	r0, r3, #6
 8017a0a:	3038      	adds	r0, #56	; 0x38
 8017a0c:	00c6      	lsls	r6, r0, #3
 8017a0e:	18b6      	adds	r6, r6, r2
 8017a10:	68b5      	ldr	r5, [r6, #8]
 8017a12:	2703      	movs	r7, #3
 8017a14:	42ae      	cmp	r6, r5
 8017a16:	d125      	bne.n	8017a64 <_free_r+0x144>
 8017a18:	2301      	movs	r3, #1
 8017a1a:	1080      	asrs	r0, r0, #2
 8017a1c:	4083      	lsls	r3, r0
 8017a1e:	6850      	ldr	r0, [r2, #4]
 8017a20:	4303      	orrs	r3, r0
 8017a22:	6053      	str	r3, [r2, #4]
 8017a24:	60ce      	str	r6, [r1, #12]
 8017a26:	608d      	str	r5, [r1, #8]
 8017a28:	60b1      	str	r1, [r6, #8]
 8017a2a:	60e9      	str	r1, [r5, #12]
 8017a2c:	e7a7      	b.n	801797e <_free_r+0x5e>
 8017a2e:	2d14      	cmp	r5, #20
 8017a30:	d802      	bhi.n	8017a38 <_free_r+0x118>
 8017a32:	0028      	movs	r0, r5
 8017a34:	305b      	adds	r0, #91	; 0x5b
 8017a36:	e7e9      	b.n	8017a0c <_free_r+0xec>
 8017a38:	2d54      	cmp	r5, #84	; 0x54
 8017a3a:	d802      	bhi.n	8017a42 <_free_r+0x122>
 8017a3c:	0b18      	lsrs	r0, r3, #12
 8017a3e:	306e      	adds	r0, #110	; 0x6e
 8017a40:	e7e4      	b.n	8017a0c <_free_r+0xec>
 8017a42:	20aa      	movs	r0, #170	; 0xaa
 8017a44:	0040      	lsls	r0, r0, #1
 8017a46:	4285      	cmp	r5, r0
 8017a48:	d802      	bhi.n	8017a50 <_free_r+0x130>
 8017a4a:	0bd8      	lsrs	r0, r3, #15
 8017a4c:	3077      	adds	r0, #119	; 0x77
 8017a4e:	e7dd      	b.n	8017a0c <_free_r+0xec>
 8017a50:	4e0b      	ldr	r6, [pc, #44]	; (8017a80 <_free_r+0x160>)
 8017a52:	207e      	movs	r0, #126	; 0x7e
 8017a54:	42b5      	cmp	r5, r6
 8017a56:	d8d9      	bhi.n	8017a0c <_free_r+0xec>
 8017a58:	0c98      	lsrs	r0, r3, #18
 8017a5a:	307c      	adds	r0, #124	; 0x7c
 8017a5c:	e7d6      	b.n	8017a0c <_free_r+0xec>
 8017a5e:	68ad      	ldr	r5, [r5, #8]
 8017a60:	42ae      	cmp	r6, r5
 8017a62:	d003      	beq.n	8017a6c <_free_r+0x14c>
 8017a64:	686a      	ldr	r2, [r5, #4]
 8017a66:	43ba      	bics	r2, r7
 8017a68:	429a      	cmp	r2, r3
 8017a6a:	d8f8      	bhi.n	8017a5e <_free_r+0x13e>
 8017a6c:	68ee      	ldr	r6, [r5, #12]
 8017a6e:	e7d9      	b.n	8017a24 <_free_r+0x104>
 8017a70:	20000500 	.word	0x20000500
 8017a74:	2000090c 	.word	0x2000090c
 8017a78:	20006c94 	.word	0x20006c94
 8017a7c:	20000508 	.word	0x20000508
 8017a80:	00000554 	.word	0x00000554

08017a84 <rshift>:
 8017a84:	0002      	movs	r2, r0
 8017a86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a88:	6907      	ldr	r7, [r0, #16]
 8017a8a:	3214      	adds	r2, #20
 8017a8c:	0013      	movs	r3, r2
 8017a8e:	b085      	sub	sp, #20
 8017a90:	114e      	asrs	r6, r1, #5
 8017a92:	42b7      	cmp	r7, r6
 8017a94:	dd31      	ble.n	8017afa <rshift+0x76>
 8017a96:	00b3      	lsls	r3, r6, #2
 8017a98:	18d3      	adds	r3, r2, r3
 8017a9a:	251f      	movs	r5, #31
 8017a9c:	9301      	str	r3, [sp, #4]
 8017a9e:	000b      	movs	r3, r1
 8017aa0:	00bc      	lsls	r4, r7, #2
 8017aa2:	402b      	ands	r3, r5
 8017aa4:	1914      	adds	r4, r2, r4
 8017aa6:	9302      	str	r3, [sp, #8]
 8017aa8:	4229      	tst	r1, r5
 8017aaa:	d10c      	bne.n	8017ac6 <rshift+0x42>
 8017aac:	0015      	movs	r5, r2
 8017aae:	9901      	ldr	r1, [sp, #4]
 8017ab0:	428c      	cmp	r4, r1
 8017ab2:	d838      	bhi.n	8017b26 <rshift+0xa2>
 8017ab4:	9901      	ldr	r1, [sp, #4]
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	3903      	subs	r1, #3
 8017aba:	428c      	cmp	r4, r1
 8017abc:	d301      	bcc.n	8017ac2 <rshift+0x3e>
 8017abe:	1bbb      	subs	r3, r7, r6
 8017ac0:	009b      	lsls	r3, r3, #2
 8017ac2:	18d3      	adds	r3, r2, r3
 8017ac4:	e019      	b.n	8017afa <rshift+0x76>
 8017ac6:	2120      	movs	r1, #32
 8017ac8:	9b02      	ldr	r3, [sp, #8]
 8017aca:	9d01      	ldr	r5, [sp, #4]
 8017acc:	1acb      	subs	r3, r1, r3
 8017ace:	9303      	str	r3, [sp, #12]
 8017ad0:	cd02      	ldmia	r5!, {r1}
 8017ad2:	9b02      	ldr	r3, [sp, #8]
 8017ad4:	4694      	mov	ip, r2
 8017ad6:	40d9      	lsrs	r1, r3
 8017ad8:	9100      	str	r1, [sp, #0]
 8017ada:	42ac      	cmp	r4, r5
 8017adc:	d816      	bhi.n	8017b0c <rshift+0x88>
 8017ade:	9d01      	ldr	r5, [sp, #4]
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	3501      	adds	r5, #1
 8017ae4:	42ac      	cmp	r4, r5
 8017ae6:	d302      	bcc.n	8017aee <rshift+0x6a>
 8017ae8:	1bbb      	subs	r3, r7, r6
 8017aea:	009b      	lsls	r3, r3, #2
 8017aec:	3b04      	subs	r3, #4
 8017aee:	9900      	ldr	r1, [sp, #0]
 8017af0:	18d3      	adds	r3, r2, r3
 8017af2:	6019      	str	r1, [r3, #0]
 8017af4:	2900      	cmp	r1, #0
 8017af6:	d000      	beq.n	8017afa <rshift+0x76>
 8017af8:	3304      	adds	r3, #4
 8017afa:	1a99      	subs	r1, r3, r2
 8017afc:	1089      	asrs	r1, r1, #2
 8017afe:	6101      	str	r1, [r0, #16]
 8017b00:	4293      	cmp	r3, r2
 8017b02:	d101      	bne.n	8017b08 <rshift+0x84>
 8017b04:	2300      	movs	r3, #0
 8017b06:	6143      	str	r3, [r0, #20]
 8017b08:	b005      	add	sp, #20
 8017b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b0c:	682b      	ldr	r3, [r5, #0]
 8017b0e:	9903      	ldr	r1, [sp, #12]
 8017b10:	408b      	lsls	r3, r1
 8017b12:	9900      	ldr	r1, [sp, #0]
 8017b14:	4319      	orrs	r1, r3
 8017b16:	4663      	mov	r3, ip
 8017b18:	c302      	stmia	r3!, {r1}
 8017b1a:	469c      	mov	ip, r3
 8017b1c:	cd02      	ldmia	r5!, {r1}
 8017b1e:	9b02      	ldr	r3, [sp, #8]
 8017b20:	40d9      	lsrs	r1, r3
 8017b22:	9100      	str	r1, [sp, #0]
 8017b24:	e7d9      	b.n	8017ada <rshift+0x56>
 8017b26:	c908      	ldmia	r1!, {r3}
 8017b28:	c508      	stmia	r5!, {r3}
 8017b2a:	e7c1      	b.n	8017ab0 <rshift+0x2c>

08017b2c <__hexdig_fun>:
 8017b2c:	0002      	movs	r2, r0
 8017b2e:	3a30      	subs	r2, #48	; 0x30
 8017b30:	0003      	movs	r3, r0
 8017b32:	2a09      	cmp	r2, #9
 8017b34:	d802      	bhi.n	8017b3c <__hexdig_fun+0x10>
 8017b36:	3b20      	subs	r3, #32
 8017b38:	b2d8      	uxtb	r0, r3
 8017b3a:	4770      	bx	lr
 8017b3c:	0002      	movs	r2, r0
 8017b3e:	3a61      	subs	r2, #97	; 0x61
 8017b40:	2a05      	cmp	r2, #5
 8017b42:	d801      	bhi.n	8017b48 <__hexdig_fun+0x1c>
 8017b44:	3b47      	subs	r3, #71	; 0x47
 8017b46:	e7f7      	b.n	8017b38 <__hexdig_fun+0xc>
 8017b48:	001a      	movs	r2, r3
 8017b4a:	3a41      	subs	r2, #65	; 0x41
 8017b4c:	2000      	movs	r0, #0
 8017b4e:	2a05      	cmp	r2, #5
 8017b50:	d8f3      	bhi.n	8017b3a <__hexdig_fun+0xe>
 8017b52:	3b27      	subs	r3, #39	; 0x27
 8017b54:	e7f0      	b.n	8017b38 <__hexdig_fun+0xc>
	...

08017b58 <__gethex>:
 8017b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b5a:	b08d      	sub	sp, #52	; 0x34
 8017b5c:	930a      	str	r3, [sp, #40]	; 0x28
 8017b5e:	4bbd      	ldr	r3, [pc, #756]	; (8017e54 <__gethex+0x2fc>)
 8017b60:	9005      	str	r0, [sp, #20]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	9109      	str	r1, [sp, #36]	; 0x24
 8017b66:	0018      	movs	r0, r3
 8017b68:	9202      	str	r2, [sp, #8]
 8017b6a:	9307      	str	r3, [sp, #28]
 8017b6c:	f7e8 fad4 	bl	8000118 <strlen>
 8017b70:	2202      	movs	r2, #2
 8017b72:	9b07      	ldr	r3, [sp, #28]
 8017b74:	4252      	negs	r2, r2
 8017b76:	181b      	adds	r3, r3, r0
 8017b78:	3b01      	subs	r3, #1
 8017b7a:	781b      	ldrb	r3, [r3, #0]
 8017b7c:	9003      	str	r0, [sp, #12]
 8017b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b82:	6819      	ldr	r1, [r3, #0]
 8017b84:	1c8b      	adds	r3, r1, #2
 8017b86:	1a52      	subs	r2, r2, r1
 8017b88:	18d1      	adds	r1, r2, r3
 8017b8a:	9301      	str	r3, [sp, #4]
 8017b8c:	9108      	str	r1, [sp, #32]
 8017b8e:	9901      	ldr	r1, [sp, #4]
 8017b90:	3301      	adds	r3, #1
 8017b92:	7808      	ldrb	r0, [r1, #0]
 8017b94:	2830      	cmp	r0, #48	; 0x30
 8017b96:	d0f7      	beq.n	8017b88 <__gethex+0x30>
 8017b98:	f7ff ffc8 	bl	8017b2c <__hexdig_fun>
 8017b9c:	1e04      	subs	r4, r0, #0
 8017b9e:	d13e      	bne.n	8017c1e <__gethex+0xc6>
 8017ba0:	9a03      	ldr	r2, [sp, #12]
 8017ba2:	9907      	ldr	r1, [sp, #28]
 8017ba4:	9801      	ldr	r0, [sp, #4]
 8017ba6:	f7fc fdf4 	bl	8014792 <strncmp>
 8017baa:	1e07      	subs	r7, r0, #0
 8017bac:	d000      	beq.n	8017bb0 <__gethex+0x58>
 8017bae:	e06f      	b.n	8017c90 <__gethex+0x138>
 8017bb0:	9b01      	ldr	r3, [sp, #4]
 8017bb2:	9a03      	ldr	r2, [sp, #12]
 8017bb4:	5c98      	ldrb	r0, [r3, r2]
 8017bb6:	189d      	adds	r5, r3, r2
 8017bb8:	f7ff ffb8 	bl	8017b2c <__hexdig_fun>
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	9304      	str	r3, [sp, #16]
 8017bc0:	2800      	cmp	r0, #0
 8017bc2:	d034      	beq.n	8017c2e <__gethex+0xd6>
 8017bc4:	9501      	str	r5, [sp, #4]
 8017bc6:	9b01      	ldr	r3, [sp, #4]
 8017bc8:	7818      	ldrb	r0, [r3, #0]
 8017bca:	2830      	cmp	r0, #48	; 0x30
 8017bcc:	d009      	beq.n	8017be2 <__gethex+0x8a>
 8017bce:	f7ff ffad 	bl	8017b2c <__hexdig_fun>
 8017bd2:	4243      	negs	r3, r0
 8017bd4:	4143      	adcs	r3, r0
 8017bd6:	9304      	str	r3, [sp, #16]
 8017bd8:	2301      	movs	r3, #1
 8017bda:	002c      	movs	r4, r5
 8017bdc:	9308      	str	r3, [sp, #32]
 8017bde:	9d01      	ldr	r5, [sp, #4]
 8017be0:	e004      	b.n	8017bec <__gethex+0x94>
 8017be2:	9b01      	ldr	r3, [sp, #4]
 8017be4:	3301      	adds	r3, #1
 8017be6:	9301      	str	r3, [sp, #4]
 8017be8:	e7ed      	b.n	8017bc6 <__gethex+0x6e>
 8017bea:	3501      	adds	r5, #1
 8017bec:	7828      	ldrb	r0, [r5, #0]
 8017bee:	f7ff ff9d 	bl	8017b2c <__hexdig_fun>
 8017bf2:	1e07      	subs	r7, r0, #0
 8017bf4:	d1f9      	bne.n	8017bea <__gethex+0x92>
 8017bf6:	0028      	movs	r0, r5
 8017bf8:	9a03      	ldr	r2, [sp, #12]
 8017bfa:	9907      	ldr	r1, [sp, #28]
 8017bfc:	f7fc fdc9 	bl	8014792 <strncmp>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	d112      	bne.n	8017c2a <__gethex+0xd2>
 8017c04:	2c00      	cmp	r4, #0
 8017c06:	d107      	bne.n	8017c18 <__gethex+0xc0>
 8017c08:	9b03      	ldr	r3, [sp, #12]
 8017c0a:	18ed      	adds	r5, r5, r3
 8017c0c:	002c      	movs	r4, r5
 8017c0e:	7828      	ldrb	r0, [r5, #0]
 8017c10:	f7ff ff8c 	bl	8017b2c <__hexdig_fun>
 8017c14:	2800      	cmp	r0, #0
 8017c16:	d106      	bne.n	8017c26 <__gethex+0xce>
 8017c18:	1b67      	subs	r7, r4, r5
 8017c1a:	00bf      	lsls	r7, r7, #2
 8017c1c:	e007      	b.n	8017c2e <__gethex+0xd6>
 8017c1e:	2300      	movs	r3, #0
 8017c20:	001c      	movs	r4, r3
 8017c22:	9304      	str	r3, [sp, #16]
 8017c24:	e7db      	b.n	8017bde <__gethex+0x86>
 8017c26:	3501      	adds	r5, #1
 8017c28:	e7f1      	b.n	8017c0e <__gethex+0xb6>
 8017c2a:	2c00      	cmp	r4, #0
 8017c2c:	d1f4      	bne.n	8017c18 <__gethex+0xc0>
 8017c2e:	2220      	movs	r2, #32
 8017c30:	782b      	ldrb	r3, [r5, #0]
 8017c32:	002e      	movs	r6, r5
 8017c34:	4393      	bics	r3, r2
 8017c36:	2b50      	cmp	r3, #80	; 0x50
 8017c38:	d11d      	bne.n	8017c76 <__gethex+0x11e>
 8017c3a:	786b      	ldrb	r3, [r5, #1]
 8017c3c:	2b2b      	cmp	r3, #43	; 0x2b
 8017c3e:	d02c      	beq.n	8017c9a <__gethex+0x142>
 8017c40:	2b2d      	cmp	r3, #45	; 0x2d
 8017c42:	d02e      	beq.n	8017ca2 <__gethex+0x14a>
 8017c44:	2300      	movs	r3, #0
 8017c46:	1c6e      	adds	r6, r5, #1
 8017c48:	9306      	str	r3, [sp, #24]
 8017c4a:	7830      	ldrb	r0, [r6, #0]
 8017c4c:	f7ff ff6e 	bl	8017b2c <__hexdig_fun>
 8017c50:	1e43      	subs	r3, r0, #1
 8017c52:	b2db      	uxtb	r3, r3
 8017c54:	2b18      	cmp	r3, #24
 8017c56:	d82b      	bhi.n	8017cb0 <__gethex+0x158>
 8017c58:	3810      	subs	r0, #16
 8017c5a:	0004      	movs	r4, r0
 8017c5c:	7870      	ldrb	r0, [r6, #1]
 8017c5e:	f7ff ff65 	bl	8017b2c <__hexdig_fun>
 8017c62:	1e43      	subs	r3, r0, #1
 8017c64:	b2db      	uxtb	r3, r3
 8017c66:	3601      	adds	r6, #1
 8017c68:	2b18      	cmp	r3, #24
 8017c6a:	d91c      	bls.n	8017ca6 <__gethex+0x14e>
 8017c6c:	9b06      	ldr	r3, [sp, #24]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d000      	beq.n	8017c74 <__gethex+0x11c>
 8017c72:	4264      	negs	r4, r4
 8017c74:	193f      	adds	r7, r7, r4
 8017c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c78:	601e      	str	r6, [r3, #0]
 8017c7a:	9b04      	ldr	r3, [sp, #16]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d019      	beq.n	8017cb4 <__gethex+0x15c>
 8017c80:	2600      	movs	r6, #0
 8017c82:	9b08      	ldr	r3, [sp, #32]
 8017c84:	42b3      	cmp	r3, r6
 8017c86:	d100      	bne.n	8017c8a <__gethex+0x132>
 8017c88:	3606      	adds	r6, #6
 8017c8a:	0030      	movs	r0, r6
 8017c8c:	b00d      	add	sp, #52	; 0x34
 8017c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c90:	2301      	movs	r3, #1
 8017c92:	0027      	movs	r7, r4
 8017c94:	9d01      	ldr	r5, [sp, #4]
 8017c96:	9304      	str	r3, [sp, #16]
 8017c98:	e7c9      	b.n	8017c2e <__gethex+0xd6>
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	9306      	str	r3, [sp, #24]
 8017c9e:	1cae      	adds	r6, r5, #2
 8017ca0:	e7d3      	b.n	8017c4a <__gethex+0xf2>
 8017ca2:	2301      	movs	r3, #1
 8017ca4:	e7fa      	b.n	8017c9c <__gethex+0x144>
 8017ca6:	230a      	movs	r3, #10
 8017ca8:	435c      	muls	r4, r3
 8017caa:	1824      	adds	r4, r4, r0
 8017cac:	3c10      	subs	r4, #16
 8017cae:	e7d5      	b.n	8017c5c <__gethex+0x104>
 8017cb0:	002e      	movs	r6, r5
 8017cb2:	e7e0      	b.n	8017c76 <__gethex+0x11e>
 8017cb4:	9b01      	ldr	r3, [sp, #4]
 8017cb6:	9904      	ldr	r1, [sp, #16]
 8017cb8:	1aeb      	subs	r3, r5, r3
 8017cba:	3b01      	subs	r3, #1
 8017cbc:	2b07      	cmp	r3, #7
 8017cbe:	dc0a      	bgt.n	8017cd6 <__gethex+0x17e>
 8017cc0:	9805      	ldr	r0, [sp, #20]
 8017cc2:	f000 fa91 	bl	80181e8 <_Balloc>
 8017cc6:	1e04      	subs	r4, r0, #0
 8017cc8:	d108      	bne.n	8017cdc <__gethex+0x184>
 8017cca:	0002      	movs	r2, r0
 8017ccc:	21de      	movs	r1, #222	; 0xde
 8017cce:	4b62      	ldr	r3, [pc, #392]	; (8017e58 <__gethex+0x300>)
 8017cd0:	4862      	ldr	r0, [pc, #392]	; (8017e5c <__gethex+0x304>)
 8017cd2:	f001 f80b 	bl	8018cec <__assert_func>
 8017cd6:	3101      	adds	r1, #1
 8017cd8:	105b      	asrs	r3, r3, #1
 8017cda:	e7ef      	b.n	8017cbc <__gethex+0x164>
 8017cdc:	0003      	movs	r3, r0
 8017cde:	3314      	adds	r3, #20
 8017ce0:	9304      	str	r3, [sp, #16]
 8017ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	001e      	movs	r6, r3
 8017ce8:	9306      	str	r3, [sp, #24]
 8017cea:	9b01      	ldr	r3, [sp, #4]
 8017cec:	42ab      	cmp	r3, r5
 8017cee:	d340      	bcc.n	8017d72 <__gethex+0x21a>
 8017cf0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017cf2:	9b04      	ldr	r3, [sp, #16]
 8017cf4:	c540      	stmia	r5!, {r6}
 8017cf6:	1aed      	subs	r5, r5, r3
 8017cf8:	10ad      	asrs	r5, r5, #2
 8017cfa:	0030      	movs	r0, r6
 8017cfc:	6125      	str	r5, [r4, #16]
 8017cfe:	f000 fb35 	bl	801836c <__hi0bits>
 8017d02:	9b02      	ldr	r3, [sp, #8]
 8017d04:	016d      	lsls	r5, r5, #5
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	1a2e      	subs	r6, r5, r0
 8017d0a:	9301      	str	r3, [sp, #4]
 8017d0c:	429e      	cmp	r6, r3
 8017d0e:	dd5a      	ble.n	8017dc6 <__gethex+0x26e>
 8017d10:	1af6      	subs	r6, r6, r3
 8017d12:	0031      	movs	r1, r6
 8017d14:	0020      	movs	r0, r4
 8017d16:	f000 febe 	bl	8018a96 <__any_on>
 8017d1a:	1e05      	subs	r5, r0, #0
 8017d1c:	d016      	beq.n	8017d4c <__gethex+0x1f4>
 8017d1e:	2501      	movs	r5, #1
 8017d20:	211f      	movs	r1, #31
 8017d22:	0028      	movs	r0, r5
 8017d24:	1e73      	subs	r3, r6, #1
 8017d26:	4019      	ands	r1, r3
 8017d28:	4088      	lsls	r0, r1
 8017d2a:	0001      	movs	r1, r0
 8017d2c:	115a      	asrs	r2, r3, #5
 8017d2e:	9804      	ldr	r0, [sp, #16]
 8017d30:	0092      	lsls	r2, r2, #2
 8017d32:	5812      	ldr	r2, [r2, r0]
 8017d34:	420a      	tst	r2, r1
 8017d36:	d009      	beq.n	8017d4c <__gethex+0x1f4>
 8017d38:	42ab      	cmp	r3, r5
 8017d3a:	dd06      	ble.n	8017d4a <__gethex+0x1f2>
 8017d3c:	0020      	movs	r0, r4
 8017d3e:	1eb1      	subs	r1, r6, #2
 8017d40:	f000 fea9 	bl	8018a96 <__any_on>
 8017d44:	3502      	adds	r5, #2
 8017d46:	2800      	cmp	r0, #0
 8017d48:	d100      	bne.n	8017d4c <__gethex+0x1f4>
 8017d4a:	2502      	movs	r5, #2
 8017d4c:	0031      	movs	r1, r6
 8017d4e:	0020      	movs	r0, r4
 8017d50:	f7ff fe98 	bl	8017a84 <rshift>
 8017d54:	19bf      	adds	r7, r7, r6
 8017d56:	9b02      	ldr	r3, [sp, #8]
 8017d58:	689b      	ldr	r3, [r3, #8]
 8017d5a:	9303      	str	r3, [sp, #12]
 8017d5c:	42bb      	cmp	r3, r7
 8017d5e:	da42      	bge.n	8017de6 <__gethex+0x28e>
 8017d60:	0021      	movs	r1, r4
 8017d62:	9805      	ldr	r0, [sp, #20]
 8017d64:	f000 fa68 	bl	8018238 <_Bfree>
 8017d68:	2300      	movs	r3, #0
 8017d6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017d6c:	26a3      	movs	r6, #163	; 0xa3
 8017d6e:	6013      	str	r3, [r2, #0]
 8017d70:	e78b      	b.n	8017c8a <__gethex+0x132>
 8017d72:	1e6b      	subs	r3, r5, #1
 8017d74:	9308      	str	r3, [sp, #32]
 8017d76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017d78:	781b      	ldrb	r3, [r3, #0]
 8017d7a:	4293      	cmp	r3, r2
 8017d7c:	d014      	beq.n	8017da8 <__gethex+0x250>
 8017d7e:	9b06      	ldr	r3, [sp, #24]
 8017d80:	2b20      	cmp	r3, #32
 8017d82:	d104      	bne.n	8017d8e <__gethex+0x236>
 8017d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d86:	c340      	stmia	r3!, {r6}
 8017d88:	2600      	movs	r6, #0
 8017d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8017d8c:	9606      	str	r6, [sp, #24]
 8017d8e:	9b08      	ldr	r3, [sp, #32]
 8017d90:	7818      	ldrb	r0, [r3, #0]
 8017d92:	f7ff fecb 	bl	8017b2c <__hexdig_fun>
 8017d96:	230f      	movs	r3, #15
 8017d98:	4018      	ands	r0, r3
 8017d9a:	9b06      	ldr	r3, [sp, #24]
 8017d9c:	9d08      	ldr	r5, [sp, #32]
 8017d9e:	4098      	lsls	r0, r3
 8017da0:	3304      	adds	r3, #4
 8017da2:	4306      	orrs	r6, r0
 8017da4:	9306      	str	r3, [sp, #24]
 8017da6:	e7a0      	b.n	8017cea <__gethex+0x192>
 8017da8:	2301      	movs	r3, #1
 8017daa:	9a03      	ldr	r2, [sp, #12]
 8017dac:	1a9d      	subs	r5, r3, r2
 8017dae:	9b08      	ldr	r3, [sp, #32]
 8017db0:	195d      	adds	r5, r3, r5
 8017db2:	9b01      	ldr	r3, [sp, #4]
 8017db4:	429d      	cmp	r5, r3
 8017db6:	d3e2      	bcc.n	8017d7e <__gethex+0x226>
 8017db8:	0028      	movs	r0, r5
 8017dba:	9907      	ldr	r1, [sp, #28]
 8017dbc:	f7fc fce9 	bl	8014792 <strncmp>
 8017dc0:	2800      	cmp	r0, #0
 8017dc2:	d1dc      	bne.n	8017d7e <__gethex+0x226>
 8017dc4:	e791      	b.n	8017cea <__gethex+0x192>
 8017dc6:	9b01      	ldr	r3, [sp, #4]
 8017dc8:	2500      	movs	r5, #0
 8017dca:	429e      	cmp	r6, r3
 8017dcc:	dac3      	bge.n	8017d56 <__gethex+0x1fe>
 8017dce:	1b9e      	subs	r6, r3, r6
 8017dd0:	0021      	movs	r1, r4
 8017dd2:	0032      	movs	r2, r6
 8017dd4:	9805      	ldr	r0, [sp, #20]
 8017dd6:	f000 fc19 	bl	801860c <__lshift>
 8017dda:	0003      	movs	r3, r0
 8017ddc:	3314      	adds	r3, #20
 8017dde:	0004      	movs	r4, r0
 8017de0:	1bbf      	subs	r7, r7, r6
 8017de2:	9304      	str	r3, [sp, #16]
 8017de4:	e7b7      	b.n	8017d56 <__gethex+0x1fe>
 8017de6:	9b02      	ldr	r3, [sp, #8]
 8017de8:	685e      	ldr	r6, [r3, #4]
 8017dea:	42be      	cmp	r6, r7
 8017dec:	dd71      	ble.n	8017ed2 <__gethex+0x37a>
 8017dee:	9b01      	ldr	r3, [sp, #4]
 8017df0:	1bf6      	subs	r6, r6, r7
 8017df2:	42b3      	cmp	r3, r6
 8017df4:	dc38      	bgt.n	8017e68 <__gethex+0x310>
 8017df6:	9b02      	ldr	r3, [sp, #8]
 8017df8:	68db      	ldr	r3, [r3, #12]
 8017dfa:	2b02      	cmp	r3, #2
 8017dfc:	d026      	beq.n	8017e4c <__gethex+0x2f4>
 8017dfe:	2b03      	cmp	r3, #3
 8017e00:	d02e      	beq.n	8017e60 <__gethex+0x308>
 8017e02:	2b01      	cmp	r3, #1
 8017e04:	d119      	bne.n	8017e3a <__gethex+0x2e2>
 8017e06:	9b01      	ldr	r3, [sp, #4]
 8017e08:	42b3      	cmp	r3, r6
 8017e0a:	d116      	bne.n	8017e3a <__gethex+0x2e2>
 8017e0c:	2b01      	cmp	r3, #1
 8017e0e:	d10d      	bne.n	8017e2c <__gethex+0x2d4>
 8017e10:	9b02      	ldr	r3, [sp, #8]
 8017e12:	2662      	movs	r6, #98	; 0x62
 8017e14:	685b      	ldr	r3, [r3, #4]
 8017e16:	9301      	str	r3, [sp, #4]
 8017e18:	9a01      	ldr	r2, [sp, #4]
 8017e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e1c:	601a      	str	r2, [r3, #0]
 8017e1e:	2301      	movs	r3, #1
 8017e20:	9a04      	ldr	r2, [sp, #16]
 8017e22:	6123      	str	r3, [r4, #16]
 8017e24:	6013      	str	r3, [r2, #0]
 8017e26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017e28:	601c      	str	r4, [r3, #0]
 8017e2a:	e72e      	b.n	8017c8a <__gethex+0x132>
 8017e2c:	9901      	ldr	r1, [sp, #4]
 8017e2e:	0020      	movs	r0, r4
 8017e30:	3901      	subs	r1, #1
 8017e32:	f000 fe30 	bl	8018a96 <__any_on>
 8017e36:	2800      	cmp	r0, #0
 8017e38:	d1ea      	bne.n	8017e10 <__gethex+0x2b8>
 8017e3a:	0021      	movs	r1, r4
 8017e3c:	9805      	ldr	r0, [sp, #20]
 8017e3e:	f000 f9fb 	bl	8018238 <_Bfree>
 8017e42:	2300      	movs	r3, #0
 8017e44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017e46:	2650      	movs	r6, #80	; 0x50
 8017e48:	6013      	str	r3, [r2, #0]
 8017e4a:	e71e      	b.n	8017c8a <__gethex+0x132>
 8017e4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d1f3      	bne.n	8017e3a <__gethex+0x2e2>
 8017e52:	e7dd      	b.n	8017e10 <__gethex+0x2b8>
 8017e54:	0801db2c 	.word	0x0801db2c
 8017e58:	0801da51 	.word	0x0801da51
 8017e5c:	0801dac1 	.word	0x0801dac1
 8017e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d1d4      	bne.n	8017e10 <__gethex+0x2b8>
 8017e66:	e7e8      	b.n	8017e3a <__gethex+0x2e2>
 8017e68:	1e77      	subs	r7, r6, #1
 8017e6a:	2d00      	cmp	r5, #0
 8017e6c:	d12f      	bne.n	8017ece <__gethex+0x376>
 8017e6e:	2f00      	cmp	r7, #0
 8017e70:	d004      	beq.n	8017e7c <__gethex+0x324>
 8017e72:	0039      	movs	r1, r7
 8017e74:	0020      	movs	r0, r4
 8017e76:	f000 fe0e 	bl	8018a96 <__any_on>
 8017e7a:	0005      	movs	r5, r0
 8017e7c:	231f      	movs	r3, #31
 8017e7e:	117a      	asrs	r2, r7, #5
 8017e80:	401f      	ands	r7, r3
 8017e82:	3b1e      	subs	r3, #30
 8017e84:	40bb      	lsls	r3, r7
 8017e86:	9904      	ldr	r1, [sp, #16]
 8017e88:	0092      	lsls	r2, r2, #2
 8017e8a:	5852      	ldr	r2, [r2, r1]
 8017e8c:	421a      	tst	r2, r3
 8017e8e:	d001      	beq.n	8017e94 <__gethex+0x33c>
 8017e90:	2302      	movs	r3, #2
 8017e92:	431d      	orrs	r5, r3
 8017e94:	9b01      	ldr	r3, [sp, #4]
 8017e96:	0031      	movs	r1, r6
 8017e98:	1b9b      	subs	r3, r3, r6
 8017e9a:	2602      	movs	r6, #2
 8017e9c:	0020      	movs	r0, r4
 8017e9e:	9301      	str	r3, [sp, #4]
 8017ea0:	f7ff fdf0 	bl	8017a84 <rshift>
 8017ea4:	9b02      	ldr	r3, [sp, #8]
 8017ea6:	685f      	ldr	r7, [r3, #4]
 8017ea8:	2d00      	cmp	r5, #0
 8017eaa:	d041      	beq.n	8017f30 <__gethex+0x3d8>
 8017eac:	9b02      	ldr	r3, [sp, #8]
 8017eae:	68db      	ldr	r3, [r3, #12]
 8017eb0:	2b02      	cmp	r3, #2
 8017eb2:	d010      	beq.n	8017ed6 <__gethex+0x37e>
 8017eb4:	2b03      	cmp	r3, #3
 8017eb6:	d012      	beq.n	8017ede <__gethex+0x386>
 8017eb8:	2b01      	cmp	r3, #1
 8017eba:	d106      	bne.n	8017eca <__gethex+0x372>
 8017ebc:	07aa      	lsls	r2, r5, #30
 8017ebe:	d504      	bpl.n	8017eca <__gethex+0x372>
 8017ec0:	9a04      	ldr	r2, [sp, #16]
 8017ec2:	6810      	ldr	r0, [r2, #0]
 8017ec4:	4305      	orrs	r5, r0
 8017ec6:	421d      	tst	r5, r3
 8017ec8:	d10c      	bne.n	8017ee4 <__gethex+0x38c>
 8017eca:	2310      	movs	r3, #16
 8017ecc:	e02f      	b.n	8017f2e <__gethex+0x3d6>
 8017ece:	2501      	movs	r5, #1
 8017ed0:	e7d4      	b.n	8017e7c <__gethex+0x324>
 8017ed2:	2601      	movs	r6, #1
 8017ed4:	e7e8      	b.n	8017ea8 <__gethex+0x350>
 8017ed6:	2301      	movs	r3, #1
 8017ed8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017eda:	1a9b      	subs	r3, r3, r2
 8017edc:	9313      	str	r3, [sp, #76]	; 0x4c
 8017ede:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d0f2      	beq.n	8017eca <__gethex+0x372>
 8017ee4:	6923      	ldr	r3, [r4, #16]
 8017ee6:	2000      	movs	r0, #0
 8017ee8:	9303      	str	r3, [sp, #12]
 8017eea:	009b      	lsls	r3, r3, #2
 8017eec:	9304      	str	r3, [sp, #16]
 8017eee:	0023      	movs	r3, r4
 8017ef0:	9a04      	ldr	r2, [sp, #16]
 8017ef2:	3314      	adds	r3, #20
 8017ef4:	1899      	adds	r1, r3, r2
 8017ef6:	681a      	ldr	r2, [r3, #0]
 8017ef8:	1c55      	adds	r5, r2, #1
 8017efa:	d01e      	beq.n	8017f3a <__gethex+0x3e2>
 8017efc:	3201      	adds	r2, #1
 8017efe:	601a      	str	r2, [r3, #0]
 8017f00:	0023      	movs	r3, r4
 8017f02:	3314      	adds	r3, #20
 8017f04:	2e02      	cmp	r6, #2
 8017f06:	d140      	bne.n	8017f8a <__gethex+0x432>
 8017f08:	9a02      	ldr	r2, [sp, #8]
 8017f0a:	9901      	ldr	r1, [sp, #4]
 8017f0c:	6812      	ldr	r2, [r2, #0]
 8017f0e:	3a01      	subs	r2, #1
 8017f10:	428a      	cmp	r2, r1
 8017f12:	d10b      	bne.n	8017f2c <__gethex+0x3d4>
 8017f14:	114a      	asrs	r2, r1, #5
 8017f16:	211f      	movs	r1, #31
 8017f18:	9801      	ldr	r0, [sp, #4]
 8017f1a:	0092      	lsls	r2, r2, #2
 8017f1c:	4001      	ands	r1, r0
 8017f1e:	2001      	movs	r0, #1
 8017f20:	0005      	movs	r5, r0
 8017f22:	408d      	lsls	r5, r1
 8017f24:	58d3      	ldr	r3, [r2, r3]
 8017f26:	422b      	tst	r3, r5
 8017f28:	d000      	beq.n	8017f2c <__gethex+0x3d4>
 8017f2a:	2601      	movs	r6, #1
 8017f2c:	2320      	movs	r3, #32
 8017f2e:	431e      	orrs	r6, r3
 8017f30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017f32:	601c      	str	r4, [r3, #0]
 8017f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f36:	601f      	str	r7, [r3, #0]
 8017f38:	e6a7      	b.n	8017c8a <__gethex+0x132>
 8017f3a:	c301      	stmia	r3!, {r0}
 8017f3c:	4299      	cmp	r1, r3
 8017f3e:	d8da      	bhi.n	8017ef6 <__gethex+0x39e>
 8017f40:	9b03      	ldr	r3, [sp, #12]
 8017f42:	68a2      	ldr	r2, [r4, #8]
 8017f44:	4293      	cmp	r3, r2
 8017f46:	db17      	blt.n	8017f78 <__gethex+0x420>
 8017f48:	6863      	ldr	r3, [r4, #4]
 8017f4a:	9805      	ldr	r0, [sp, #20]
 8017f4c:	1c59      	adds	r1, r3, #1
 8017f4e:	f000 f94b 	bl	80181e8 <_Balloc>
 8017f52:	1e05      	subs	r5, r0, #0
 8017f54:	d103      	bne.n	8017f5e <__gethex+0x406>
 8017f56:	0002      	movs	r2, r0
 8017f58:	2184      	movs	r1, #132	; 0x84
 8017f5a:	4b1c      	ldr	r3, [pc, #112]	; (8017fcc <__gethex+0x474>)
 8017f5c:	e6b8      	b.n	8017cd0 <__gethex+0x178>
 8017f5e:	0021      	movs	r1, r4
 8017f60:	6923      	ldr	r3, [r4, #16]
 8017f62:	310c      	adds	r1, #12
 8017f64:	1c9a      	adds	r2, r3, #2
 8017f66:	0092      	lsls	r2, r2, #2
 8017f68:	300c      	adds	r0, #12
 8017f6a:	f7fc f9d1 	bl	8014310 <memcpy>
 8017f6e:	0021      	movs	r1, r4
 8017f70:	9805      	ldr	r0, [sp, #20]
 8017f72:	f000 f961 	bl	8018238 <_Bfree>
 8017f76:	002c      	movs	r4, r5
 8017f78:	6923      	ldr	r3, [r4, #16]
 8017f7a:	1c5a      	adds	r2, r3, #1
 8017f7c:	6122      	str	r2, [r4, #16]
 8017f7e:	2201      	movs	r2, #1
 8017f80:	3304      	adds	r3, #4
 8017f82:	009b      	lsls	r3, r3, #2
 8017f84:	18e3      	adds	r3, r4, r3
 8017f86:	605a      	str	r2, [r3, #4]
 8017f88:	e7ba      	b.n	8017f00 <__gethex+0x3a8>
 8017f8a:	6922      	ldr	r2, [r4, #16]
 8017f8c:	9903      	ldr	r1, [sp, #12]
 8017f8e:	428a      	cmp	r2, r1
 8017f90:	dd09      	ble.n	8017fa6 <__gethex+0x44e>
 8017f92:	2101      	movs	r1, #1
 8017f94:	0020      	movs	r0, r4
 8017f96:	f7ff fd75 	bl	8017a84 <rshift>
 8017f9a:	9b02      	ldr	r3, [sp, #8]
 8017f9c:	3701      	adds	r7, #1
 8017f9e:	689b      	ldr	r3, [r3, #8]
 8017fa0:	42bb      	cmp	r3, r7
 8017fa2:	dac2      	bge.n	8017f2a <__gethex+0x3d2>
 8017fa4:	e6dc      	b.n	8017d60 <__gethex+0x208>
 8017fa6:	221f      	movs	r2, #31
 8017fa8:	9d01      	ldr	r5, [sp, #4]
 8017faa:	9901      	ldr	r1, [sp, #4]
 8017fac:	2601      	movs	r6, #1
 8017fae:	4015      	ands	r5, r2
 8017fb0:	4211      	tst	r1, r2
 8017fb2:	d0bb      	beq.n	8017f2c <__gethex+0x3d4>
 8017fb4:	9a04      	ldr	r2, [sp, #16]
 8017fb6:	189b      	adds	r3, r3, r2
 8017fb8:	3b04      	subs	r3, #4
 8017fba:	6818      	ldr	r0, [r3, #0]
 8017fbc:	f000 f9d6 	bl	801836c <__hi0bits>
 8017fc0:	2320      	movs	r3, #32
 8017fc2:	1b5d      	subs	r5, r3, r5
 8017fc4:	42a8      	cmp	r0, r5
 8017fc6:	dbe4      	blt.n	8017f92 <__gethex+0x43a>
 8017fc8:	e7b0      	b.n	8017f2c <__gethex+0x3d4>
 8017fca:	46c0      	nop			; (mov r8, r8)
 8017fcc:	0801da51 	.word	0x0801da51

08017fd0 <L_shift>:
 8017fd0:	2308      	movs	r3, #8
 8017fd2:	b570      	push	{r4, r5, r6, lr}
 8017fd4:	2520      	movs	r5, #32
 8017fd6:	1a9a      	subs	r2, r3, r2
 8017fd8:	0092      	lsls	r2, r2, #2
 8017fda:	1aad      	subs	r5, r5, r2
 8017fdc:	6843      	ldr	r3, [r0, #4]
 8017fde:	6806      	ldr	r6, [r0, #0]
 8017fe0:	001c      	movs	r4, r3
 8017fe2:	40ac      	lsls	r4, r5
 8017fe4:	40d3      	lsrs	r3, r2
 8017fe6:	4334      	orrs	r4, r6
 8017fe8:	6004      	str	r4, [r0, #0]
 8017fea:	6043      	str	r3, [r0, #4]
 8017fec:	3004      	adds	r0, #4
 8017fee:	4288      	cmp	r0, r1
 8017ff0:	d3f4      	bcc.n	8017fdc <L_shift+0xc>
 8017ff2:	bd70      	pop	{r4, r5, r6, pc}

08017ff4 <__match>:
 8017ff4:	b530      	push	{r4, r5, lr}
 8017ff6:	6803      	ldr	r3, [r0, #0]
 8017ff8:	780c      	ldrb	r4, [r1, #0]
 8017ffa:	3301      	adds	r3, #1
 8017ffc:	2c00      	cmp	r4, #0
 8017ffe:	d102      	bne.n	8018006 <__match+0x12>
 8018000:	6003      	str	r3, [r0, #0]
 8018002:	2001      	movs	r0, #1
 8018004:	bd30      	pop	{r4, r5, pc}
 8018006:	781a      	ldrb	r2, [r3, #0]
 8018008:	0015      	movs	r5, r2
 801800a:	3d41      	subs	r5, #65	; 0x41
 801800c:	2d19      	cmp	r5, #25
 801800e:	d800      	bhi.n	8018012 <__match+0x1e>
 8018010:	3220      	adds	r2, #32
 8018012:	3101      	adds	r1, #1
 8018014:	42a2      	cmp	r2, r4
 8018016:	d0ef      	beq.n	8017ff8 <__match+0x4>
 8018018:	2000      	movs	r0, #0
 801801a:	e7f3      	b.n	8018004 <__match+0x10>

0801801c <__hexnan>:
 801801c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801801e:	680b      	ldr	r3, [r1, #0]
 8018020:	b08b      	sub	sp, #44	; 0x2c
 8018022:	115c      	asrs	r4, r3, #5
 8018024:	00a4      	lsls	r4, r4, #2
 8018026:	9201      	str	r2, [sp, #4]
 8018028:	1912      	adds	r2, r2, r4
 801802a:	0019      	movs	r1, r3
 801802c:	9202      	str	r2, [sp, #8]
 801802e:	221f      	movs	r2, #31
 8018030:	4011      	ands	r1, r2
 8018032:	9008      	str	r0, [sp, #32]
 8018034:	9106      	str	r1, [sp, #24]
 8018036:	4213      	tst	r3, r2
 8018038:	d002      	beq.n	8018040 <__hexnan+0x24>
 801803a:	9b02      	ldr	r3, [sp, #8]
 801803c:	3304      	adds	r3, #4
 801803e:	9302      	str	r3, [sp, #8]
 8018040:	9b02      	ldr	r3, [sp, #8]
 8018042:	2500      	movs	r5, #0
 8018044:	1f1e      	subs	r6, r3, #4
 8018046:	0037      	movs	r7, r6
 8018048:	0034      	movs	r4, r6
 801804a:	9b08      	ldr	r3, [sp, #32]
 801804c:	6035      	str	r5, [r6, #0]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	9507      	str	r5, [sp, #28]
 8018052:	9305      	str	r3, [sp, #20]
 8018054:	9503      	str	r5, [sp, #12]
 8018056:	9b05      	ldr	r3, [sp, #20]
 8018058:	3301      	adds	r3, #1
 801805a:	9309      	str	r3, [sp, #36]	; 0x24
 801805c:	9b05      	ldr	r3, [sp, #20]
 801805e:	785b      	ldrb	r3, [r3, #1]
 8018060:	9304      	str	r3, [sp, #16]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d028      	beq.n	80180b8 <__hexnan+0x9c>
 8018066:	9804      	ldr	r0, [sp, #16]
 8018068:	f7ff fd60 	bl	8017b2c <__hexdig_fun>
 801806c:	2800      	cmp	r0, #0
 801806e:	d154      	bne.n	801811a <__hexnan+0xfe>
 8018070:	9b04      	ldr	r3, [sp, #16]
 8018072:	2b20      	cmp	r3, #32
 8018074:	d819      	bhi.n	80180aa <__hexnan+0x8e>
 8018076:	9b03      	ldr	r3, [sp, #12]
 8018078:	9a07      	ldr	r2, [sp, #28]
 801807a:	4293      	cmp	r3, r2
 801807c:	dd12      	ble.n	80180a4 <__hexnan+0x88>
 801807e:	42bc      	cmp	r4, r7
 8018080:	d206      	bcs.n	8018090 <__hexnan+0x74>
 8018082:	2d07      	cmp	r5, #7
 8018084:	dc04      	bgt.n	8018090 <__hexnan+0x74>
 8018086:	002a      	movs	r2, r5
 8018088:	0039      	movs	r1, r7
 801808a:	0020      	movs	r0, r4
 801808c:	f7ff ffa0 	bl	8017fd0 <L_shift>
 8018090:	9b01      	ldr	r3, [sp, #4]
 8018092:	2508      	movs	r5, #8
 8018094:	429c      	cmp	r4, r3
 8018096:	d905      	bls.n	80180a4 <__hexnan+0x88>
 8018098:	1f27      	subs	r7, r4, #4
 801809a:	2500      	movs	r5, #0
 801809c:	003c      	movs	r4, r7
 801809e:	9b03      	ldr	r3, [sp, #12]
 80180a0:	603d      	str	r5, [r7, #0]
 80180a2:	9307      	str	r3, [sp, #28]
 80180a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180a6:	9305      	str	r3, [sp, #20]
 80180a8:	e7d5      	b.n	8018056 <__hexnan+0x3a>
 80180aa:	9b04      	ldr	r3, [sp, #16]
 80180ac:	2b29      	cmp	r3, #41	; 0x29
 80180ae:	d158      	bne.n	8018162 <__hexnan+0x146>
 80180b0:	9b05      	ldr	r3, [sp, #20]
 80180b2:	9a08      	ldr	r2, [sp, #32]
 80180b4:	3302      	adds	r3, #2
 80180b6:	6013      	str	r3, [r2, #0]
 80180b8:	9b03      	ldr	r3, [sp, #12]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d051      	beq.n	8018162 <__hexnan+0x146>
 80180be:	42bc      	cmp	r4, r7
 80180c0:	d206      	bcs.n	80180d0 <__hexnan+0xb4>
 80180c2:	2d07      	cmp	r5, #7
 80180c4:	dc04      	bgt.n	80180d0 <__hexnan+0xb4>
 80180c6:	002a      	movs	r2, r5
 80180c8:	0039      	movs	r1, r7
 80180ca:	0020      	movs	r0, r4
 80180cc:	f7ff ff80 	bl	8017fd0 <L_shift>
 80180d0:	9b01      	ldr	r3, [sp, #4]
 80180d2:	429c      	cmp	r4, r3
 80180d4:	d935      	bls.n	8018142 <__hexnan+0x126>
 80180d6:	001a      	movs	r2, r3
 80180d8:	0023      	movs	r3, r4
 80180da:	cb02      	ldmia	r3!, {r1}
 80180dc:	c202      	stmia	r2!, {r1}
 80180de:	429e      	cmp	r6, r3
 80180e0:	d2fb      	bcs.n	80180da <__hexnan+0xbe>
 80180e2:	9b02      	ldr	r3, [sp, #8]
 80180e4:	1c61      	adds	r1, r4, #1
 80180e6:	1eda      	subs	r2, r3, #3
 80180e8:	2304      	movs	r3, #4
 80180ea:	4291      	cmp	r1, r2
 80180ec:	d805      	bhi.n	80180fa <__hexnan+0xde>
 80180ee:	9b02      	ldr	r3, [sp, #8]
 80180f0:	3b04      	subs	r3, #4
 80180f2:	1b1c      	subs	r4, r3, r4
 80180f4:	08a4      	lsrs	r4, r4, #2
 80180f6:	3401      	adds	r4, #1
 80180f8:	00a3      	lsls	r3, r4, #2
 80180fa:	9a01      	ldr	r2, [sp, #4]
 80180fc:	18d4      	adds	r4, r2, r3
 80180fe:	2300      	movs	r3, #0
 8018100:	c408      	stmia	r4!, {r3}
 8018102:	42a6      	cmp	r6, r4
 8018104:	d2fc      	bcs.n	8018100 <__hexnan+0xe4>
 8018106:	6833      	ldr	r3, [r6, #0]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d104      	bne.n	8018116 <__hexnan+0xfa>
 801810c:	9b01      	ldr	r3, [sp, #4]
 801810e:	429e      	cmp	r6, r3
 8018110:	d125      	bne.n	801815e <__hexnan+0x142>
 8018112:	2301      	movs	r3, #1
 8018114:	6033      	str	r3, [r6, #0]
 8018116:	2005      	movs	r0, #5
 8018118:	e024      	b.n	8018164 <__hexnan+0x148>
 801811a:	9b03      	ldr	r3, [sp, #12]
 801811c:	3501      	adds	r5, #1
 801811e:	3301      	adds	r3, #1
 8018120:	9303      	str	r3, [sp, #12]
 8018122:	2d08      	cmp	r5, #8
 8018124:	dd06      	ble.n	8018134 <__hexnan+0x118>
 8018126:	9b01      	ldr	r3, [sp, #4]
 8018128:	429c      	cmp	r4, r3
 801812a:	d9bb      	bls.n	80180a4 <__hexnan+0x88>
 801812c:	2300      	movs	r3, #0
 801812e:	2501      	movs	r5, #1
 8018130:	3c04      	subs	r4, #4
 8018132:	6023      	str	r3, [r4, #0]
 8018134:	220f      	movs	r2, #15
 8018136:	6823      	ldr	r3, [r4, #0]
 8018138:	4010      	ands	r0, r2
 801813a:	011b      	lsls	r3, r3, #4
 801813c:	4318      	orrs	r0, r3
 801813e:	6020      	str	r0, [r4, #0]
 8018140:	e7b0      	b.n	80180a4 <__hexnan+0x88>
 8018142:	9b06      	ldr	r3, [sp, #24]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d0de      	beq.n	8018106 <__hexnan+0xea>
 8018148:	2220      	movs	r2, #32
 801814a:	1ad2      	subs	r2, r2, r3
 801814c:	2301      	movs	r3, #1
 801814e:	425b      	negs	r3, r3
 8018150:	40d3      	lsrs	r3, r2
 8018152:	9c02      	ldr	r4, [sp, #8]
 8018154:	3c04      	subs	r4, #4
 8018156:	6822      	ldr	r2, [r4, #0]
 8018158:	4013      	ands	r3, r2
 801815a:	6023      	str	r3, [r4, #0]
 801815c:	e7d3      	b.n	8018106 <__hexnan+0xea>
 801815e:	3e04      	subs	r6, #4
 8018160:	e7d1      	b.n	8018106 <__hexnan+0xea>
 8018162:	2004      	movs	r0, #4
 8018164:	b00b      	add	sp, #44	; 0x2c
 8018166:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018168 <__locale_mb_cur_max>:
 8018168:	2394      	movs	r3, #148	; 0x94
 801816a:	4a02      	ldr	r2, [pc, #8]	; (8018174 <__locale_mb_cur_max+0xc>)
 801816c:	005b      	lsls	r3, r3, #1
 801816e:	5cd0      	ldrb	r0, [r2, r3]
 8018170:	4770      	bx	lr
 8018172:	46c0      	nop			; (mov r8, r8)
 8018174:	20000918 	.word	0x20000918

08018178 <_localeconv_r>:
 8018178:	4800      	ldr	r0, [pc, #0]	; (801817c <_localeconv_r+0x4>)
 801817a:	4770      	bx	lr
 801817c:	20000a08 	.word	0x20000a08

08018180 <__retarget_lock_init_recursive>:
 8018180:	4770      	bx	lr

08018182 <__retarget_lock_close_recursive>:
 8018182:	4770      	bx	lr

08018184 <__retarget_lock_acquire_recursive>:
 8018184:	4770      	bx	lr

08018186 <__retarget_lock_release_recursive>:
 8018186:	4770      	bx	lr

08018188 <__ascii_mbtowc>:
 8018188:	b082      	sub	sp, #8
 801818a:	2900      	cmp	r1, #0
 801818c:	d100      	bne.n	8018190 <__ascii_mbtowc+0x8>
 801818e:	a901      	add	r1, sp, #4
 8018190:	1e10      	subs	r0, r2, #0
 8018192:	d006      	beq.n	80181a2 <__ascii_mbtowc+0x1a>
 8018194:	2b00      	cmp	r3, #0
 8018196:	d006      	beq.n	80181a6 <__ascii_mbtowc+0x1e>
 8018198:	7813      	ldrb	r3, [r2, #0]
 801819a:	600b      	str	r3, [r1, #0]
 801819c:	7810      	ldrb	r0, [r2, #0]
 801819e:	1e43      	subs	r3, r0, #1
 80181a0:	4198      	sbcs	r0, r3
 80181a2:	b002      	add	sp, #8
 80181a4:	4770      	bx	lr
 80181a6:	2002      	movs	r0, #2
 80181a8:	4240      	negs	r0, r0
 80181aa:	e7fa      	b.n	80181a2 <__ascii_mbtowc+0x1a>

080181ac <memchr>:
 80181ac:	b2c9      	uxtb	r1, r1
 80181ae:	1882      	adds	r2, r0, r2
 80181b0:	4290      	cmp	r0, r2
 80181b2:	d101      	bne.n	80181b8 <memchr+0xc>
 80181b4:	2000      	movs	r0, #0
 80181b6:	4770      	bx	lr
 80181b8:	7803      	ldrb	r3, [r0, #0]
 80181ba:	428b      	cmp	r3, r1
 80181bc:	d0fb      	beq.n	80181b6 <memchr+0xa>
 80181be:	3001      	adds	r0, #1
 80181c0:	e7f6      	b.n	80181b0 <memchr+0x4>

080181c2 <memmove>:
 80181c2:	b510      	push	{r4, lr}
 80181c4:	4288      	cmp	r0, r1
 80181c6:	d902      	bls.n	80181ce <memmove+0xc>
 80181c8:	188b      	adds	r3, r1, r2
 80181ca:	4298      	cmp	r0, r3
 80181cc:	d303      	bcc.n	80181d6 <memmove+0x14>
 80181ce:	2300      	movs	r3, #0
 80181d0:	e007      	b.n	80181e2 <memmove+0x20>
 80181d2:	5c8b      	ldrb	r3, [r1, r2]
 80181d4:	5483      	strb	r3, [r0, r2]
 80181d6:	3a01      	subs	r2, #1
 80181d8:	d2fb      	bcs.n	80181d2 <memmove+0x10>
 80181da:	bd10      	pop	{r4, pc}
 80181dc:	5ccc      	ldrb	r4, [r1, r3]
 80181de:	54c4      	strb	r4, [r0, r3]
 80181e0:	3301      	adds	r3, #1
 80181e2:	429a      	cmp	r2, r3
 80181e4:	d1fa      	bne.n	80181dc <memmove+0x1a>
 80181e6:	e7f8      	b.n	80181da <memmove+0x18>

080181e8 <_Balloc>:
 80181e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80181ea:	b570      	push	{r4, r5, r6, lr}
 80181ec:	0006      	movs	r6, r0
 80181ee:	000c      	movs	r4, r1
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d012      	beq.n	801821a <_Balloc+0x32>
 80181f4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80181f6:	00a3      	lsls	r3, r4, #2
 80181f8:	18d3      	adds	r3, r2, r3
 80181fa:	6818      	ldr	r0, [r3, #0]
 80181fc:	2800      	cmp	r0, #0
 80181fe:	d115      	bne.n	801822c <_Balloc+0x44>
 8018200:	2101      	movs	r1, #1
 8018202:	000d      	movs	r5, r1
 8018204:	40a5      	lsls	r5, r4
 8018206:	1d6a      	adds	r2, r5, #5
 8018208:	0030      	movs	r0, r6
 801820a:	0092      	lsls	r2, r2, #2
 801820c:	f000 fd8c 	bl	8018d28 <_calloc_r>
 8018210:	2800      	cmp	r0, #0
 8018212:	d009      	beq.n	8018228 <_Balloc+0x40>
 8018214:	6044      	str	r4, [r0, #4]
 8018216:	6085      	str	r5, [r0, #8]
 8018218:	e00a      	b.n	8018230 <_Balloc+0x48>
 801821a:	2221      	movs	r2, #33	; 0x21
 801821c:	2104      	movs	r1, #4
 801821e:	f000 fd83 	bl	8018d28 <_calloc_r>
 8018222:	64f0      	str	r0, [r6, #76]	; 0x4c
 8018224:	2800      	cmp	r0, #0
 8018226:	d1e5      	bne.n	80181f4 <_Balloc+0xc>
 8018228:	2000      	movs	r0, #0
 801822a:	bd70      	pop	{r4, r5, r6, pc}
 801822c:	6802      	ldr	r2, [r0, #0]
 801822e:	601a      	str	r2, [r3, #0]
 8018230:	2300      	movs	r3, #0
 8018232:	6103      	str	r3, [r0, #16]
 8018234:	60c3      	str	r3, [r0, #12]
 8018236:	e7f8      	b.n	801822a <_Balloc+0x42>

08018238 <_Bfree>:
 8018238:	2900      	cmp	r1, #0
 801823a:	d006      	beq.n	801824a <_Bfree+0x12>
 801823c:	684b      	ldr	r3, [r1, #4]
 801823e:	009a      	lsls	r2, r3, #2
 8018240:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018242:	189b      	adds	r3, r3, r2
 8018244:	681a      	ldr	r2, [r3, #0]
 8018246:	600a      	str	r2, [r1, #0]
 8018248:	6019      	str	r1, [r3, #0]
 801824a:	4770      	bx	lr

0801824c <__multadd>:
 801824c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801824e:	000e      	movs	r6, r1
 8018250:	9001      	str	r0, [sp, #4]
 8018252:	000c      	movs	r4, r1
 8018254:	001d      	movs	r5, r3
 8018256:	2000      	movs	r0, #0
 8018258:	690f      	ldr	r7, [r1, #16]
 801825a:	3614      	adds	r6, #20
 801825c:	6833      	ldr	r3, [r6, #0]
 801825e:	3001      	adds	r0, #1
 8018260:	b299      	uxth	r1, r3
 8018262:	4351      	muls	r1, r2
 8018264:	0c1b      	lsrs	r3, r3, #16
 8018266:	4353      	muls	r3, r2
 8018268:	1949      	adds	r1, r1, r5
 801826a:	0c0d      	lsrs	r5, r1, #16
 801826c:	195b      	adds	r3, r3, r5
 801826e:	0c1d      	lsrs	r5, r3, #16
 8018270:	b289      	uxth	r1, r1
 8018272:	041b      	lsls	r3, r3, #16
 8018274:	185b      	adds	r3, r3, r1
 8018276:	c608      	stmia	r6!, {r3}
 8018278:	4287      	cmp	r7, r0
 801827a:	dcef      	bgt.n	801825c <__multadd+0x10>
 801827c:	2d00      	cmp	r5, #0
 801827e:	d022      	beq.n	80182c6 <__multadd+0x7a>
 8018280:	68a3      	ldr	r3, [r4, #8]
 8018282:	42bb      	cmp	r3, r7
 8018284:	dc19      	bgt.n	80182ba <__multadd+0x6e>
 8018286:	6863      	ldr	r3, [r4, #4]
 8018288:	9801      	ldr	r0, [sp, #4]
 801828a:	1c59      	adds	r1, r3, #1
 801828c:	f7ff ffac 	bl	80181e8 <_Balloc>
 8018290:	1e06      	subs	r6, r0, #0
 8018292:	d105      	bne.n	80182a0 <__multadd+0x54>
 8018294:	0002      	movs	r2, r0
 8018296:	21b5      	movs	r1, #181	; 0xb5
 8018298:	4b0c      	ldr	r3, [pc, #48]	; (80182cc <__multadd+0x80>)
 801829a:	480d      	ldr	r0, [pc, #52]	; (80182d0 <__multadd+0x84>)
 801829c:	f000 fd26 	bl	8018cec <__assert_func>
 80182a0:	0021      	movs	r1, r4
 80182a2:	6923      	ldr	r3, [r4, #16]
 80182a4:	310c      	adds	r1, #12
 80182a6:	1c9a      	adds	r2, r3, #2
 80182a8:	0092      	lsls	r2, r2, #2
 80182aa:	300c      	adds	r0, #12
 80182ac:	f7fc f830 	bl	8014310 <memcpy>
 80182b0:	0021      	movs	r1, r4
 80182b2:	9801      	ldr	r0, [sp, #4]
 80182b4:	f7ff ffc0 	bl	8018238 <_Bfree>
 80182b8:	0034      	movs	r4, r6
 80182ba:	1d3b      	adds	r3, r7, #4
 80182bc:	009b      	lsls	r3, r3, #2
 80182be:	18e3      	adds	r3, r4, r3
 80182c0:	605d      	str	r5, [r3, #4]
 80182c2:	1c7b      	adds	r3, r7, #1
 80182c4:	6123      	str	r3, [r4, #16]
 80182c6:	0020      	movs	r0, r4
 80182c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80182ca:	46c0      	nop			; (mov r8, r8)
 80182cc:	0801da51 	.word	0x0801da51
 80182d0:	0801db40 	.word	0x0801db40

080182d4 <__s2b>:
 80182d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80182d6:	0006      	movs	r6, r0
 80182d8:	0018      	movs	r0, r3
 80182da:	000c      	movs	r4, r1
 80182dc:	3008      	adds	r0, #8
 80182de:	2109      	movs	r1, #9
 80182e0:	9301      	str	r3, [sp, #4]
 80182e2:	0015      	movs	r5, r2
 80182e4:	f7e7 ffbe 	bl	8000264 <__divsi3>
 80182e8:	2301      	movs	r3, #1
 80182ea:	2100      	movs	r1, #0
 80182ec:	4283      	cmp	r3, r0
 80182ee:	db0a      	blt.n	8018306 <__s2b+0x32>
 80182f0:	0030      	movs	r0, r6
 80182f2:	f7ff ff79 	bl	80181e8 <_Balloc>
 80182f6:	1e01      	subs	r1, r0, #0
 80182f8:	d108      	bne.n	801830c <__s2b+0x38>
 80182fa:	0002      	movs	r2, r0
 80182fc:	4b19      	ldr	r3, [pc, #100]	; (8018364 <__s2b+0x90>)
 80182fe:	481a      	ldr	r0, [pc, #104]	; (8018368 <__s2b+0x94>)
 8018300:	31ce      	adds	r1, #206	; 0xce
 8018302:	f000 fcf3 	bl	8018cec <__assert_func>
 8018306:	005b      	lsls	r3, r3, #1
 8018308:	3101      	adds	r1, #1
 801830a:	e7ef      	b.n	80182ec <__s2b+0x18>
 801830c:	9b08      	ldr	r3, [sp, #32]
 801830e:	6143      	str	r3, [r0, #20]
 8018310:	2301      	movs	r3, #1
 8018312:	6103      	str	r3, [r0, #16]
 8018314:	2d09      	cmp	r5, #9
 8018316:	dd18      	ble.n	801834a <__s2b+0x76>
 8018318:	0023      	movs	r3, r4
 801831a:	3309      	adds	r3, #9
 801831c:	001f      	movs	r7, r3
 801831e:	9300      	str	r3, [sp, #0]
 8018320:	1964      	adds	r4, r4, r5
 8018322:	783b      	ldrb	r3, [r7, #0]
 8018324:	220a      	movs	r2, #10
 8018326:	0030      	movs	r0, r6
 8018328:	3b30      	subs	r3, #48	; 0x30
 801832a:	f7ff ff8f 	bl	801824c <__multadd>
 801832e:	3701      	adds	r7, #1
 8018330:	0001      	movs	r1, r0
 8018332:	42a7      	cmp	r7, r4
 8018334:	d1f5      	bne.n	8018322 <__s2b+0x4e>
 8018336:	002c      	movs	r4, r5
 8018338:	9b00      	ldr	r3, [sp, #0]
 801833a:	3c08      	subs	r4, #8
 801833c:	191c      	adds	r4, r3, r4
 801833e:	002f      	movs	r7, r5
 8018340:	9b01      	ldr	r3, [sp, #4]
 8018342:	429f      	cmp	r7, r3
 8018344:	db04      	blt.n	8018350 <__s2b+0x7c>
 8018346:	0008      	movs	r0, r1
 8018348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801834a:	2509      	movs	r5, #9
 801834c:	340a      	adds	r4, #10
 801834e:	e7f6      	b.n	801833e <__s2b+0x6a>
 8018350:	1b63      	subs	r3, r4, r5
 8018352:	5ddb      	ldrb	r3, [r3, r7]
 8018354:	220a      	movs	r2, #10
 8018356:	0030      	movs	r0, r6
 8018358:	3b30      	subs	r3, #48	; 0x30
 801835a:	f7ff ff77 	bl	801824c <__multadd>
 801835e:	3701      	adds	r7, #1
 8018360:	0001      	movs	r1, r0
 8018362:	e7ed      	b.n	8018340 <__s2b+0x6c>
 8018364:	0801da51 	.word	0x0801da51
 8018368:	0801db40 	.word	0x0801db40

0801836c <__hi0bits>:
 801836c:	0003      	movs	r3, r0
 801836e:	0c02      	lsrs	r2, r0, #16
 8018370:	2000      	movs	r0, #0
 8018372:	4282      	cmp	r2, r0
 8018374:	d101      	bne.n	801837a <__hi0bits+0xe>
 8018376:	041b      	lsls	r3, r3, #16
 8018378:	3010      	adds	r0, #16
 801837a:	0e1a      	lsrs	r2, r3, #24
 801837c:	d101      	bne.n	8018382 <__hi0bits+0x16>
 801837e:	3008      	adds	r0, #8
 8018380:	021b      	lsls	r3, r3, #8
 8018382:	0f1a      	lsrs	r2, r3, #28
 8018384:	d101      	bne.n	801838a <__hi0bits+0x1e>
 8018386:	3004      	adds	r0, #4
 8018388:	011b      	lsls	r3, r3, #4
 801838a:	0f9a      	lsrs	r2, r3, #30
 801838c:	d101      	bne.n	8018392 <__hi0bits+0x26>
 801838e:	3002      	adds	r0, #2
 8018390:	009b      	lsls	r3, r3, #2
 8018392:	2b00      	cmp	r3, #0
 8018394:	db03      	blt.n	801839e <__hi0bits+0x32>
 8018396:	3001      	adds	r0, #1
 8018398:	005b      	lsls	r3, r3, #1
 801839a:	d400      	bmi.n	801839e <__hi0bits+0x32>
 801839c:	2020      	movs	r0, #32
 801839e:	4770      	bx	lr

080183a0 <__lo0bits>:
 80183a0:	6803      	ldr	r3, [r0, #0]
 80183a2:	0002      	movs	r2, r0
 80183a4:	2107      	movs	r1, #7
 80183a6:	0018      	movs	r0, r3
 80183a8:	4008      	ands	r0, r1
 80183aa:	420b      	tst	r3, r1
 80183ac:	d00d      	beq.n	80183ca <__lo0bits+0x2a>
 80183ae:	3906      	subs	r1, #6
 80183b0:	2000      	movs	r0, #0
 80183b2:	420b      	tst	r3, r1
 80183b4:	d105      	bne.n	80183c2 <__lo0bits+0x22>
 80183b6:	3002      	adds	r0, #2
 80183b8:	4203      	tst	r3, r0
 80183ba:	d003      	beq.n	80183c4 <__lo0bits+0x24>
 80183bc:	40cb      	lsrs	r3, r1
 80183be:	0008      	movs	r0, r1
 80183c0:	6013      	str	r3, [r2, #0]
 80183c2:	4770      	bx	lr
 80183c4:	089b      	lsrs	r3, r3, #2
 80183c6:	6013      	str	r3, [r2, #0]
 80183c8:	e7fb      	b.n	80183c2 <__lo0bits+0x22>
 80183ca:	b299      	uxth	r1, r3
 80183cc:	2900      	cmp	r1, #0
 80183ce:	d101      	bne.n	80183d4 <__lo0bits+0x34>
 80183d0:	2010      	movs	r0, #16
 80183d2:	0c1b      	lsrs	r3, r3, #16
 80183d4:	b2d9      	uxtb	r1, r3
 80183d6:	2900      	cmp	r1, #0
 80183d8:	d101      	bne.n	80183de <__lo0bits+0x3e>
 80183da:	3008      	adds	r0, #8
 80183dc:	0a1b      	lsrs	r3, r3, #8
 80183de:	0719      	lsls	r1, r3, #28
 80183e0:	d101      	bne.n	80183e6 <__lo0bits+0x46>
 80183e2:	3004      	adds	r0, #4
 80183e4:	091b      	lsrs	r3, r3, #4
 80183e6:	0799      	lsls	r1, r3, #30
 80183e8:	d101      	bne.n	80183ee <__lo0bits+0x4e>
 80183ea:	3002      	adds	r0, #2
 80183ec:	089b      	lsrs	r3, r3, #2
 80183ee:	07d9      	lsls	r1, r3, #31
 80183f0:	d4e9      	bmi.n	80183c6 <__lo0bits+0x26>
 80183f2:	3001      	adds	r0, #1
 80183f4:	085b      	lsrs	r3, r3, #1
 80183f6:	d1e6      	bne.n	80183c6 <__lo0bits+0x26>
 80183f8:	2020      	movs	r0, #32
 80183fa:	e7e2      	b.n	80183c2 <__lo0bits+0x22>

080183fc <__i2b>:
 80183fc:	b510      	push	{r4, lr}
 80183fe:	000c      	movs	r4, r1
 8018400:	2101      	movs	r1, #1
 8018402:	f7ff fef1 	bl	80181e8 <_Balloc>
 8018406:	2800      	cmp	r0, #0
 8018408:	d106      	bne.n	8018418 <__i2b+0x1c>
 801840a:	21a0      	movs	r1, #160	; 0xa0
 801840c:	0002      	movs	r2, r0
 801840e:	4b04      	ldr	r3, [pc, #16]	; (8018420 <__i2b+0x24>)
 8018410:	4804      	ldr	r0, [pc, #16]	; (8018424 <__i2b+0x28>)
 8018412:	0049      	lsls	r1, r1, #1
 8018414:	f000 fc6a 	bl	8018cec <__assert_func>
 8018418:	2301      	movs	r3, #1
 801841a:	6144      	str	r4, [r0, #20]
 801841c:	6103      	str	r3, [r0, #16]
 801841e:	bd10      	pop	{r4, pc}
 8018420:	0801da51 	.word	0x0801da51
 8018424:	0801db40 	.word	0x0801db40

08018428 <__multiply>:
 8018428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801842a:	690b      	ldr	r3, [r1, #16]
 801842c:	0014      	movs	r4, r2
 801842e:	6912      	ldr	r2, [r2, #16]
 8018430:	000d      	movs	r5, r1
 8018432:	b089      	sub	sp, #36	; 0x24
 8018434:	4293      	cmp	r3, r2
 8018436:	da01      	bge.n	801843c <__multiply+0x14>
 8018438:	0025      	movs	r5, r4
 801843a:	000c      	movs	r4, r1
 801843c:	692f      	ldr	r7, [r5, #16]
 801843e:	6926      	ldr	r6, [r4, #16]
 8018440:	6869      	ldr	r1, [r5, #4]
 8018442:	19bb      	adds	r3, r7, r6
 8018444:	9302      	str	r3, [sp, #8]
 8018446:	68ab      	ldr	r3, [r5, #8]
 8018448:	19ba      	adds	r2, r7, r6
 801844a:	4293      	cmp	r3, r2
 801844c:	da00      	bge.n	8018450 <__multiply+0x28>
 801844e:	3101      	adds	r1, #1
 8018450:	f7ff feca 	bl	80181e8 <_Balloc>
 8018454:	9001      	str	r0, [sp, #4]
 8018456:	2800      	cmp	r0, #0
 8018458:	d106      	bne.n	8018468 <__multiply+0x40>
 801845a:	215e      	movs	r1, #94	; 0x5e
 801845c:	0002      	movs	r2, r0
 801845e:	4b48      	ldr	r3, [pc, #288]	; (8018580 <__multiply+0x158>)
 8018460:	4848      	ldr	r0, [pc, #288]	; (8018584 <__multiply+0x15c>)
 8018462:	31ff      	adds	r1, #255	; 0xff
 8018464:	f000 fc42 	bl	8018cec <__assert_func>
 8018468:	9b01      	ldr	r3, [sp, #4]
 801846a:	2200      	movs	r2, #0
 801846c:	3314      	adds	r3, #20
 801846e:	469c      	mov	ip, r3
 8018470:	19bb      	adds	r3, r7, r6
 8018472:	009b      	lsls	r3, r3, #2
 8018474:	4463      	add	r3, ip
 8018476:	9303      	str	r3, [sp, #12]
 8018478:	4663      	mov	r3, ip
 801847a:	9903      	ldr	r1, [sp, #12]
 801847c:	428b      	cmp	r3, r1
 801847e:	d32c      	bcc.n	80184da <__multiply+0xb2>
 8018480:	002b      	movs	r3, r5
 8018482:	0022      	movs	r2, r4
 8018484:	3314      	adds	r3, #20
 8018486:	00bf      	lsls	r7, r7, #2
 8018488:	3214      	adds	r2, #20
 801848a:	9306      	str	r3, [sp, #24]
 801848c:	00b6      	lsls	r6, r6, #2
 801848e:	19db      	adds	r3, r3, r7
 8018490:	9304      	str	r3, [sp, #16]
 8018492:	1993      	adds	r3, r2, r6
 8018494:	9307      	str	r3, [sp, #28]
 8018496:	2304      	movs	r3, #4
 8018498:	9305      	str	r3, [sp, #20]
 801849a:	002b      	movs	r3, r5
 801849c:	9904      	ldr	r1, [sp, #16]
 801849e:	3315      	adds	r3, #21
 80184a0:	9200      	str	r2, [sp, #0]
 80184a2:	4299      	cmp	r1, r3
 80184a4:	d305      	bcc.n	80184b2 <__multiply+0x8a>
 80184a6:	1b4b      	subs	r3, r1, r5
 80184a8:	3b15      	subs	r3, #21
 80184aa:	089b      	lsrs	r3, r3, #2
 80184ac:	3301      	adds	r3, #1
 80184ae:	009b      	lsls	r3, r3, #2
 80184b0:	9305      	str	r3, [sp, #20]
 80184b2:	9b07      	ldr	r3, [sp, #28]
 80184b4:	9a00      	ldr	r2, [sp, #0]
 80184b6:	429a      	cmp	r2, r3
 80184b8:	d311      	bcc.n	80184de <__multiply+0xb6>
 80184ba:	9b02      	ldr	r3, [sp, #8]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	dd06      	ble.n	80184ce <__multiply+0xa6>
 80184c0:	9b03      	ldr	r3, [sp, #12]
 80184c2:	3b04      	subs	r3, #4
 80184c4:	9303      	str	r3, [sp, #12]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	9300      	str	r3, [sp, #0]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d054      	beq.n	8018578 <__multiply+0x150>
 80184ce:	9b01      	ldr	r3, [sp, #4]
 80184d0:	9a02      	ldr	r2, [sp, #8]
 80184d2:	0018      	movs	r0, r3
 80184d4:	611a      	str	r2, [r3, #16]
 80184d6:	b009      	add	sp, #36	; 0x24
 80184d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184da:	c304      	stmia	r3!, {r2}
 80184dc:	e7cd      	b.n	801847a <__multiply+0x52>
 80184de:	9b00      	ldr	r3, [sp, #0]
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	b298      	uxth	r0, r3
 80184e4:	2800      	cmp	r0, #0
 80184e6:	d01c      	beq.n	8018522 <__multiply+0xfa>
 80184e8:	4667      	mov	r7, ip
 80184ea:	2400      	movs	r4, #0
 80184ec:	9e06      	ldr	r6, [sp, #24]
 80184ee:	ce02      	ldmia	r6!, {r1}
 80184f0:	683a      	ldr	r2, [r7, #0]
 80184f2:	b28b      	uxth	r3, r1
 80184f4:	4343      	muls	r3, r0
 80184f6:	0c09      	lsrs	r1, r1, #16
 80184f8:	4341      	muls	r1, r0
 80184fa:	b292      	uxth	r2, r2
 80184fc:	189b      	adds	r3, r3, r2
 80184fe:	191b      	adds	r3, r3, r4
 8018500:	000c      	movs	r4, r1
 8018502:	683a      	ldr	r2, [r7, #0]
 8018504:	0c11      	lsrs	r1, r2, #16
 8018506:	1861      	adds	r1, r4, r1
 8018508:	0c1c      	lsrs	r4, r3, #16
 801850a:	1909      	adds	r1, r1, r4
 801850c:	0c0c      	lsrs	r4, r1, #16
 801850e:	b29b      	uxth	r3, r3
 8018510:	0409      	lsls	r1, r1, #16
 8018512:	430b      	orrs	r3, r1
 8018514:	c708      	stmia	r7!, {r3}
 8018516:	9b04      	ldr	r3, [sp, #16]
 8018518:	42b3      	cmp	r3, r6
 801851a:	d8e8      	bhi.n	80184ee <__multiply+0xc6>
 801851c:	4663      	mov	r3, ip
 801851e:	9a05      	ldr	r2, [sp, #20]
 8018520:	509c      	str	r4, [r3, r2]
 8018522:	9b00      	ldr	r3, [sp, #0]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	0c1e      	lsrs	r6, r3, #16
 8018528:	d020      	beq.n	801856c <__multiply+0x144>
 801852a:	4663      	mov	r3, ip
 801852c:	002c      	movs	r4, r5
 801852e:	4660      	mov	r0, ip
 8018530:	2700      	movs	r7, #0
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	3414      	adds	r4, #20
 8018536:	6822      	ldr	r2, [r4, #0]
 8018538:	b29b      	uxth	r3, r3
 801853a:	b291      	uxth	r1, r2
 801853c:	4371      	muls	r1, r6
 801853e:	6802      	ldr	r2, [r0, #0]
 8018540:	0c12      	lsrs	r2, r2, #16
 8018542:	1889      	adds	r1, r1, r2
 8018544:	19cf      	adds	r7, r1, r7
 8018546:	0439      	lsls	r1, r7, #16
 8018548:	430b      	orrs	r3, r1
 801854a:	6003      	str	r3, [r0, #0]
 801854c:	cc02      	ldmia	r4!, {r1}
 801854e:	6843      	ldr	r3, [r0, #4]
 8018550:	0c09      	lsrs	r1, r1, #16
 8018552:	4371      	muls	r1, r6
 8018554:	b29b      	uxth	r3, r3
 8018556:	0c3f      	lsrs	r7, r7, #16
 8018558:	18cb      	adds	r3, r1, r3
 801855a:	9a04      	ldr	r2, [sp, #16]
 801855c:	19db      	adds	r3, r3, r7
 801855e:	0c1f      	lsrs	r7, r3, #16
 8018560:	3004      	adds	r0, #4
 8018562:	42a2      	cmp	r2, r4
 8018564:	d8e7      	bhi.n	8018536 <__multiply+0x10e>
 8018566:	4662      	mov	r2, ip
 8018568:	9905      	ldr	r1, [sp, #20]
 801856a:	5053      	str	r3, [r2, r1]
 801856c:	9b00      	ldr	r3, [sp, #0]
 801856e:	3304      	adds	r3, #4
 8018570:	9300      	str	r3, [sp, #0]
 8018572:	2304      	movs	r3, #4
 8018574:	449c      	add	ip, r3
 8018576:	e79c      	b.n	80184b2 <__multiply+0x8a>
 8018578:	9b02      	ldr	r3, [sp, #8]
 801857a:	3b01      	subs	r3, #1
 801857c:	9302      	str	r3, [sp, #8]
 801857e:	e79c      	b.n	80184ba <__multiply+0x92>
 8018580:	0801da51 	.word	0x0801da51
 8018584:	0801db40 	.word	0x0801db40

08018588 <__pow5mult>:
 8018588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801858a:	2303      	movs	r3, #3
 801858c:	0015      	movs	r5, r2
 801858e:	0007      	movs	r7, r0
 8018590:	000e      	movs	r6, r1
 8018592:	401a      	ands	r2, r3
 8018594:	421d      	tst	r5, r3
 8018596:	d008      	beq.n	80185aa <__pow5mult+0x22>
 8018598:	491a      	ldr	r1, [pc, #104]	; (8018604 <__pow5mult+0x7c>)
 801859a:	3a01      	subs	r2, #1
 801859c:	0092      	lsls	r2, r2, #2
 801859e:	5852      	ldr	r2, [r2, r1]
 80185a0:	2300      	movs	r3, #0
 80185a2:	0031      	movs	r1, r6
 80185a4:	f7ff fe52 	bl	801824c <__multadd>
 80185a8:	0006      	movs	r6, r0
 80185aa:	10ad      	asrs	r5, r5, #2
 80185ac:	d027      	beq.n	80185fe <__pow5mult+0x76>
 80185ae:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80185b0:	2c00      	cmp	r4, #0
 80185b2:	d107      	bne.n	80185c4 <__pow5mult+0x3c>
 80185b4:	0038      	movs	r0, r7
 80185b6:	4914      	ldr	r1, [pc, #80]	; (8018608 <__pow5mult+0x80>)
 80185b8:	f7ff ff20 	bl	80183fc <__i2b>
 80185bc:	2300      	movs	r3, #0
 80185be:	0004      	movs	r4, r0
 80185c0:	64b8      	str	r0, [r7, #72]	; 0x48
 80185c2:	6003      	str	r3, [r0, #0]
 80185c4:	2301      	movs	r3, #1
 80185c6:	421d      	tst	r5, r3
 80185c8:	d00a      	beq.n	80185e0 <__pow5mult+0x58>
 80185ca:	0031      	movs	r1, r6
 80185cc:	0022      	movs	r2, r4
 80185ce:	0038      	movs	r0, r7
 80185d0:	f7ff ff2a 	bl	8018428 <__multiply>
 80185d4:	0031      	movs	r1, r6
 80185d6:	9001      	str	r0, [sp, #4]
 80185d8:	0038      	movs	r0, r7
 80185da:	f7ff fe2d 	bl	8018238 <_Bfree>
 80185de:	9e01      	ldr	r6, [sp, #4]
 80185e0:	106d      	asrs	r5, r5, #1
 80185e2:	d00c      	beq.n	80185fe <__pow5mult+0x76>
 80185e4:	6820      	ldr	r0, [r4, #0]
 80185e6:	2800      	cmp	r0, #0
 80185e8:	d107      	bne.n	80185fa <__pow5mult+0x72>
 80185ea:	0022      	movs	r2, r4
 80185ec:	0021      	movs	r1, r4
 80185ee:	0038      	movs	r0, r7
 80185f0:	f7ff ff1a 	bl	8018428 <__multiply>
 80185f4:	2300      	movs	r3, #0
 80185f6:	6020      	str	r0, [r4, #0]
 80185f8:	6003      	str	r3, [r0, #0]
 80185fa:	0004      	movs	r4, r0
 80185fc:	e7e2      	b.n	80185c4 <__pow5mult+0x3c>
 80185fe:	0030      	movs	r0, r6
 8018600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018602:	46c0      	nop			; (mov r8, r8)
 8018604:	0801dc90 	.word	0x0801dc90
 8018608:	00000271 	.word	0x00000271

0801860c <__lshift>:
 801860c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801860e:	000c      	movs	r4, r1
 8018610:	0017      	movs	r7, r2
 8018612:	6923      	ldr	r3, [r4, #16]
 8018614:	1155      	asrs	r5, r2, #5
 8018616:	b087      	sub	sp, #28
 8018618:	18eb      	adds	r3, r5, r3
 801861a:	9302      	str	r3, [sp, #8]
 801861c:	3301      	adds	r3, #1
 801861e:	9301      	str	r3, [sp, #4]
 8018620:	6849      	ldr	r1, [r1, #4]
 8018622:	68a3      	ldr	r3, [r4, #8]
 8018624:	9004      	str	r0, [sp, #16]
 8018626:	9a01      	ldr	r2, [sp, #4]
 8018628:	4293      	cmp	r3, r2
 801862a:	db11      	blt.n	8018650 <__lshift+0x44>
 801862c:	9804      	ldr	r0, [sp, #16]
 801862e:	f7ff fddb 	bl	80181e8 <_Balloc>
 8018632:	0002      	movs	r2, r0
 8018634:	2300      	movs	r3, #0
 8018636:	3214      	adds	r2, #20
 8018638:	0006      	movs	r6, r0
 801863a:	0011      	movs	r1, r2
 801863c:	9203      	str	r2, [sp, #12]
 801863e:	4298      	cmp	r0, r3
 8018640:	d10d      	bne.n	801865e <__lshift+0x52>
 8018642:	21da      	movs	r1, #218	; 0xda
 8018644:	0002      	movs	r2, r0
 8018646:	4b27      	ldr	r3, [pc, #156]	; (80186e4 <__lshift+0xd8>)
 8018648:	4827      	ldr	r0, [pc, #156]	; (80186e8 <__lshift+0xdc>)
 801864a:	31ff      	adds	r1, #255	; 0xff
 801864c:	f000 fb4e 	bl	8018cec <__assert_func>
 8018650:	3101      	adds	r1, #1
 8018652:	005b      	lsls	r3, r3, #1
 8018654:	e7e7      	b.n	8018626 <__lshift+0x1a>
 8018656:	2200      	movs	r2, #0
 8018658:	0098      	lsls	r0, r3, #2
 801865a:	500a      	str	r2, [r1, r0]
 801865c:	3301      	adds	r3, #1
 801865e:	42ab      	cmp	r3, r5
 8018660:	dbf9      	blt.n	8018656 <__lshift+0x4a>
 8018662:	43eb      	mvns	r3, r5
 8018664:	17db      	asrs	r3, r3, #31
 8018666:	401d      	ands	r5, r3
 8018668:	9b03      	ldr	r3, [sp, #12]
 801866a:	00ad      	lsls	r5, r5, #2
 801866c:	211f      	movs	r1, #31
 801866e:	0038      	movs	r0, r7
 8018670:	195d      	adds	r5, r3, r5
 8018672:	0023      	movs	r3, r4
 8018674:	6922      	ldr	r2, [r4, #16]
 8018676:	3314      	adds	r3, #20
 8018678:	0092      	lsls	r2, r2, #2
 801867a:	4008      	ands	r0, r1
 801867c:	4684      	mov	ip, r0
 801867e:	189a      	adds	r2, r3, r2
 8018680:	420f      	tst	r7, r1
 8018682:	d02a      	beq.n	80186da <__lshift+0xce>
 8018684:	3101      	adds	r1, #1
 8018686:	1a09      	subs	r1, r1, r0
 8018688:	9105      	str	r1, [sp, #20]
 801868a:	2100      	movs	r1, #0
 801868c:	9503      	str	r5, [sp, #12]
 801868e:	4667      	mov	r7, ip
 8018690:	6818      	ldr	r0, [r3, #0]
 8018692:	40b8      	lsls	r0, r7
 8018694:	4301      	orrs	r1, r0
 8018696:	9803      	ldr	r0, [sp, #12]
 8018698:	c002      	stmia	r0!, {r1}
 801869a:	cb02      	ldmia	r3!, {r1}
 801869c:	9003      	str	r0, [sp, #12]
 801869e:	9805      	ldr	r0, [sp, #20]
 80186a0:	40c1      	lsrs	r1, r0
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d8f3      	bhi.n	801868e <__lshift+0x82>
 80186a6:	0020      	movs	r0, r4
 80186a8:	3015      	adds	r0, #21
 80186aa:	2304      	movs	r3, #4
 80186ac:	4282      	cmp	r2, r0
 80186ae:	d304      	bcc.n	80186ba <__lshift+0xae>
 80186b0:	1b13      	subs	r3, r2, r4
 80186b2:	3b15      	subs	r3, #21
 80186b4:	089b      	lsrs	r3, r3, #2
 80186b6:	3301      	adds	r3, #1
 80186b8:	009b      	lsls	r3, r3, #2
 80186ba:	50e9      	str	r1, [r5, r3]
 80186bc:	2900      	cmp	r1, #0
 80186be:	d002      	beq.n	80186c6 <__lshift+0xba>
 80186c0:	9b02      	ldr	r3, [sp, #8]
 80186c2:	3302      	adds	r3, #2
 80186c4:	9301      	str	r3, [sp, #4]
 80186c6:	9b01      	ldr	r3, [sp, #4]
 80186c8:	9804      	ldr	r0, [sp, #16]
 80186ca:	3b01      	subs	r3, #1
 80186cc:	0021      	movs	r1, r4
 80186ce:	6133      	str	r3, [r6, #16]
 80186d0:	f7ff fdb2 	bl	8018238 <_Bfree>
 80186d4:	0030      	movs	r0, r6
 80186d6:	b007      	add	sp, #28
 80186d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186da:	cb02      	ldmia	r3!, {r1}
 80186dc:	c502      	stmia	r5!, {r1}
 80186de:	429a      	cmp	r2, r3
 80186e0:	d8fb      	bhi.n	80186da <__lshift+0xce>
 80186e2:	e7f0      	b.n	80186c6 <__lshift+0xba>
 80186e4:	0801da51 	.word	0x0801da51
 80186e8:	0801db40 	.word	0x0801db40

080186ec <__mcmp>:
 80186ec:	6902      	ldr	r2, [r0, #16]
 80186ee:	690b      	ldr	r3, [r1, #16]
 80186f0:	b530      	push	{r4, r5, lr}
 80186f2:	0004      	movs	r4, r0
 80186f4:	1ad0      	subs	r0, r2, r3
 80186f6:	429a      	cmp	r2, r3
 80186f8:	d10d      	bne.n	8018716 <__mcmp+0x2a>
 80186fa:	009b      	lsls	r3, r3, #2
 80186fc:	3414      	adds	r4, #20
 80186fe:	3114      	adds	r1, #20
 8018700:	18e2      	adds	r2, r4, r3
 8018702:	18c9      	adds	r1, r1, r3
 8018704:	3a04      	subs	r2, #4
 8018706:	3904      	subs	r1, #4
 8018708:	6815      	ldr	r5, [r2, #0]
 801870a:	680b      	ldr	r3, [r1, #0]
 801870c:	429d      	cmp	r5, r3
 801870e:	d003      	beq.n	8018718 <__mcmp+0x2c>
 8018710:	2001      	movs	r0, #1
 8018712:	429d      	cmp	r5, r3
 8018714:	d303      	bcc.n	801871e <__mcmp+0x32>
 8018716:	bd30      	pop	{r4, r5, pc}
 8018718:	4294      	cmp	r4, r2
 801871a:	d3f3      	bcc.n	8018704 <__mcmp+0x18>
 801871c:	e7fb      	b.n	8018716 <__mcmp+0x2a>
 801871e:	4240      	negs	r0, r0
 8018720:	e7f9      	b.n	8018716 <__mcmp+0x2a>
	...

08018724 <__mdiff>:
 8018724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018726:	000e      	movs	r6, r1
 8018728:	0007      	movs	r7, r0
 801872a:	0011      	movs	r1, r2
 801872c:	0030      	movs	r0, r6
 801872e:	b087      	sub	sp, #28
 8018730:	0014      	movs	r4, r2
 8018732:	f7ff ffdb 	bl	80186ec <__mcmp>
 8018736:	1e05      	subs	r5, r0, #0
 8018738:	d110      	bne.n	801875c <__mdiff+0x38>
 801873a:	0001      	movs	r1, r0
 801873c:	0038      	movs	r0, r7
 801873e:	f7ff fd53 	bl	80181e8 <_Balloc>
 8018742:	1e02      	subs	r2, r0, #0
 8018744:	d104      	bne.n	8018750 <__mdiff+0x2c>
 8018746:	4b40      	ldr	r3, [pc, #256]	; (8018848 <__mdiff+0x124>)
 8018748:	4940      	ldr	r1, [pc, #256]	; (801884c <__mdiff+0x128>)
 801874a:	4841      	ldr	r0, [pc, #260]	; (8018850 <__mdiff+0x12c>)
 801874c:	f000 face 	bl	8018cec <__assert_func>
 8018750:	2301      	movs	r3, #1
 8018752:	6145      	str	r5, [r0, #20]
 8018754:	6103      	str	r3, [r0, #16]
 8018756:	0010      	movs	r0, r2
 8018758:	b007      	add	sp, #28
 801875a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801875c:	2301      	movs	r3, #1
 801875e:	9301      	str	r3, [sp, #4]
 8018760:	2800      	cmp	r0, #0
 8018762:	db04      	blt.n	801876e <__mdiff+0x4a>
 8018764:	0023      	movs	r3, r4
 8018766:	0034      	movs	r4, r6
 8018768:	001e      	movs	r6, r3
 801876a:	2300      	movs	r3, #0
 801876c:	9301      	str	r3, [sp, #4]
 801876e:	0038      	movs	r0, r7
 8018770:	6861      	ldr	r1, [r4, #4]
 8018772:	f7ff fd39 	bl	80181e8 <_Balloc>
 8018776:	1e02      	subs	r2, r0, #0
 8018778:	d103      	bne.n	8018782 <__mdiff+0x5e>
 801877a:	2190      	movs	r1, #144	; 0x90
 801877c:	4b32      	ldr	r3, [pc, #200]	; (8018848 <__mdiff+0x124>)
 801877e:	0089      	lsls	r1, r1, #2
 8018780:	e7e3      	b.n	801874a <__mdiff+0x26>
 8018782:	9b01      	ldr	r3, [sp, #4]
 8018784:	2700      	movs	r7, #0
 8018786:	60c3      	str	r3, [r0, #12]
 8018788:	6920      	ldr	r0, [r4, #16]
 801878a:	3414      	adds	r4, #20
 801878c:	9401      	str	r4, [sp, #4]
 801878e:	9b01      	ldr	r3, [sp, #4]
 8018790:	0084      	lsls	r4, r0, #2
 8018792:	191b      	adds	r3, r3, r4
 8018794:	0034      	movs	r4, r6
 8018796:	9302      	str	r3, [sp, #8]
 8018798:	6933      	ldr	r3, [r6, #16]
 801879a:	3414      	adds	r4, #20
 801879c:	0099      	lsls	r1, r3, #2
 801879e:	1863      	adds	r3, r4, r1
 80187a0:	9303      	str	r3, [sp, #12]
 80187a2:	0013      	movs	r3, r2
 80187a4:	3314      	adds	r3, #20
 80187a6:	469c      	mov	ip, r3
 80187a8:	9305      	str	r3, [sp, #20]
 80187aa:	9b01      	ldr	r3, [sp, #4]
 80187ac:	9304      	str	r3, [sp, #16]
 80187ae:	9b04      	ldr	r3, [sp, #16]
 80187b0:	cc02      	ldmia	r4!, {r1}
 80187b2:	cb20      	ldmia	r3!, {r5}
 80187b4:	9304      	str	r3, [sp, #16]
 80187b6:	b2ab      	uxth	r3, r5
 80187b8:	19df      	adds	r7, r3, r7
 80187ba:	b28b      	uxth	r3, r1
 80187bc:	1afb      	subs	r3, r7, r3
 80187be:	0c2d      	lsrs	r5, r5, #16
 80187c0:	0c09      	lsrs	r1, r1, #16
 80187c2:	1a69      	subs	r1, r5, r1
 80187c4:	141d      	asrs	r5, r3, #16
 80187c6:	1949      	adds	r1, r1, r5
 80187c8:	140f      	asrs	r7, r1, #16
 80187ca:	b29b      	uxth	r3, r3
 80187cc:	0409      	lsls	r1, r1, #16
 80187ce:	430b      	orrs	r3, r1
 80187d0:	4661      	mov	r1, ip
 80187d2:	c108      	stmia	r1!, {r3}
 80187d4:	9b03      	ldr	r3, [sp, #12]
 80187d6:	468c      	mov	ip, r1
 80187d8:	42a3      	cmp	r3, r4
 80187da:	d8e8      	bhi.n	80187ae <__mdiff+0x8a>
 80187dc:	0031      	movs	r1, r6
 80187de:	9c03      	ldr	r4, [sp, #12]
 80187e0:	3115      	adds	r1, #21
 80187e2:	2304      	movs	r3, #4
 80187e4:	428c      	cmp	r4, r1
 80187e6:	d304      	bcc.n	80187f2 <__mdiff+0xce>
 80187e8:	1ba3      	subs	r3, r4, r6
 80187ea:	3b15      	subs	r3, #21
 80187ec:	089b      	lsrs	r3, r3, #2
 80187ee:	3301      	adds	r3, #1
 80187f0:	009b      	lsls	r3, r3, #2
 80187f2:	9901      	ldr	r1, [sp, #4]
 80187f4:	18cc      	adds	r4, r1, r3
 80187f6:	9905      	ldr	r1, [sp, #20]
 80187f8:	0026      	movs	r6, r4
 80187fa:	18cb      	adds	r3, r1, r3
 80187fc:	469c      	mov	ip, r3
 80187fe:	9902      	ldr	r1, [sp, #8]
 8018800:	428e      	cmp	r6, r1
 8018802:	d310      	bcc.n	8018826 <__mdiff+0x102>
 8018804:	9e02      	ldr	r6, [sp, #8]
 8018806:	1ee5      	subs	r5, r4, #3
 8018808:	2100      	movs	r1, #0
 801880a:	42ae      	cmp	r6, r5
 801880c:	d304      	bcc.n	8018818 <__mdiff+0xf4>
 801880e:	0031      	movs	r1, r6
 8018810:	3103      	adds	r1, #3
 8018812:	1b09      	subs	r1, r1, r4
 8018814:	0889      	lsrs	r1, r1, #2
 8018816:	0089      	lsls	r1, r1, #2
 8018818:	185b      	adds	r3, r3, r1
 801881a:	3b04      	subs	r3, #4
 801881c:	6819      	ldr	r1, [r3, #0]
 801881e:	2900      	cmp	r1, #0
 8018820:	d00f      	beq.n	8018842 <__mdiff+0x11e>
 8018822:	6110      	str	r0, [r2, #16]
 8018824:	e797      	b.n	8018756 <__mdiff+0x32>
 8018826:	ce02      	ldmia	r6!, {r1}
 8018828:	b28d      	uxth	r5, r1
 801882a:	19ed      	adds	r5, r5, r7
 801882c:	0c0f      	lsrs	r7, r1, #16
 801882e:	1429      	asrs	r1, r5, #16
 8018830:	1879      	adds	r1, r7, r1
 8018832:	140f      	asrs	r7, r1, #16
 8018834:	b2ad      	uxth	r5, r5
 8018836:	0409      	lsls	r1, r1, #16
 8018838:	430d      	orrs	r5, r1
 801883a:	4661      	mov	r1, ip
 801883c:	c120      	stmia	r1!, {r5}
 801883e:	468c      	mov	ip, r1
 8018840:	e7dd      	b.n	80187fe <__mdiff+0xda>
 8018842:	3801      	subs	r0, #1
 8018844:	e7e9      	b.n	801881a <__mdiff+0xf6>
 8018846:	46c0      	nop			; (mov r8, r8)
 8018848:	0801da51 	.word	0x0801da51
 801884c:	00000232 	.word	0x00000232
 8018850:	0801db40 	.word	0x0801db40

08018854 <__ulp>:
 8018854:	4b0f      	ldr	r3, [pc, #60]	; (8018894 <__ulp+0x40>)
 8018856:	4019      	ands	r1, r3
 8018858:	4b0f      	ldr	r3, [pc, #60]	; (8018898 <__ulp+0x44>)
 801885a:	18c9      	adds	r1, r1, r3
 801885c:	2900      	cmp	r1, #0
 801885e:	dd04      	ble.n	801886a <__ulp+0x16>
 8018860:	2200      	movs	r2, #0
 8018862:	000b      	movs	r3, r1
 8018864:	0010      	movs	r0, r2
 8018866:	0019      	movs	r1, r3
 8018868:	4770      	bx	lr
 801886a:	4249      	negs	r1, r1
 801886c:	2200      	movs	r2, #0
 801886e:	2300      	movs	r3, #0
 8018870:	1509      	asrs	r1, r1, #20
 8018872:	2913      	cmp	r1, #19
 8018874:	dc04      	bgt.n	8018880 <__ulp+0x2c>
 8018876:	2080      	movs	r0, #128	; 0x80
 8018878:	0300      	lsls	r0, r0, #12
 801887a:	4108      	asrs	r0, r1
 801887c:	0003      	movs	r3, r0
 801887e:	e7f1      	b.n	8018864 <__ulp+0x10>
 8018880:	3914      	subs	r1, #20
 8018882:	2001      	movs	r0, #1
 8018884:	291e      	cmp	r1, #30
 8018886:	dc02      	bgt.n	801888e <__ulp+0x3a>
 8018888:	2080      	movs	r0, #128	; 0x80
 801888a:	0600      	lsls	r0, r0, #24
 801888c:	40c8      	lsrs	r0, r1
 801888e:	0002      	movs	r2, r0
 8018890:	e7e8      	b.n	8018864 <__ulp+0x10>
 8018892:	46c0      	nop			; (mov r8, r8)
 8018894:	7ff00000 	.word	0x7ff00000
 8018898:	fcc00000 	.word	0xfcc00000

0801889c <__b2d>:
 801889c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801889e:	0006      	movs	r6, r0
 80188a0:	6903      	ldr	r3, [r0, #16]
 80188a2:	3614      	adds	r6, #20
 80188a4:	009b      	lsls	r3, r3, #2
 80188a6:	18f3      	adds	r3, r6, r3
 80188a8:	1f1d      	subs	r5, r3, #4
 80188aa:	682c      	ldr	r4, [r5, #0]
 80188ac:	000f      	movs	r7, r1
 80188ae:	0020      	movs	r0, r4
 80188b0:	9301      	str	r3, [sp, #4]
 80188b2:	f7ff fd5b 	bl	801836c <__hi0bits>
 80188b6:	2320      	movs	r3, #32
 80188b8:	1a1b      	subs	r3, r3, r0
 80188ba:	491f      	ldr	r1, [pc, #124]	; (8018938 <__b2d+0x9c>)
 80188bc:	603b      	str	r3, [r7, #0]
 80188be:	280a      	cmp	r0, #10
 80188c0:	dc16      	bgt.n	80188f0 <__b2d+0x54>
 80188c2:	230b      	movs	r3, #11
 80188c4:	0027      	movs	r7, r4
 80188c6:	1a1b      	subs	r3, r3, r0
 80188c8:	40df      	lsrs	r7, r3
 80188ca:	4339      	orrs	r1, r7
 80188cc:	469c      	mov	ip, r3
 80188ce:	000b      	movs	r3, r1
 80188d0:	2100      	movs	r1, #0
 80188d2:	42ae      	cmp	r6, r5
 80188d4:	d202      	bcs.n	80188dc <__b2d+0x40>
 80188d6:	9901      	ldr	r1, [sp, #4]
 80188d8:	3908      	subs	r1, #8
 80188da:	6809      	ldr	r1, [r1, #0]
 80188dc:	3015      	adds	r0, #21
 80188de:	4084      	lsls	r4, r0
 80188e0:	4660      	mov	r0, ip
 80188e2:	40c1      	lsrs	r1, r0
 80188e4:	430c      	orrs	r4, r1
 80188e6:	0022      	movs	r2, r4
 80188e8:	0010      	movs	r0, r2
 80188ea:	0019      	movs	r1, r3
 80188ec:	b003      	add	sp, #12
 80188ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188f0:	2700      	movs	r7, #0
 80188f2:	42ae      	cmp	r6, r5
 80188f4:	d202      	bcs.n	80188fc <__b2d+0x60>
 80188f6:	9d01      	ldr	r5, [sp, #4]
 80188f8:	3d08      	subs	r5, #8
 80188fa:	682f      	ldr	r7, [r5, #0]
 80188fc:	230b      	movs	r3, #11
 80188fe:	425b      	negs	r3, r3
 8018900:	469c      	mov	ip, r3
 8018902:	4484      	add	ip, r0
 8018904:	280b      	cmp	r0, #11
 8018906:	d013      	beq.n	8018930 <__b2d+0x94>
 8018908:	4663      	mov	r3, ip
 801890a:	2020      	movs	r0, #32
 801890c:	409c      	lsls	r4, r3
 801890e:	1ac0      	subs	r0, r0, r3
 8018910:	003b      	movs	r3, r7
 8018912:	40c3      	lsrs	r3, r0
 8018914:	431c      	orrs	r4, r3
 8018916:	4321      	orrs	r1, r4
 8018918:	000b      	movs	r3, r1
 801891a:	2100      	movs	r1, #0
 801891c:	42b5      	cmp	r5, r6
 801891e:	d901      	bls.n	8018924 <__b2d+0x88>
 8018920:	3d04      	subs	r5, #4
 8018922:	6829      	ldr	r1, [r5, #0]
 8018924:	4664      	mov	r4, ip
 8018926:	40c1      	lsrs	r1, r0
 8018928:	40a7      	lsls	r7, r4
 801892a:	430f      	orrs	r7, r1
 801892c:	003a      	movs	r2, r7
 801892e:	e7db      	b.n	80188e8 <__b2d+0x4c>
 8018930:	4321      	orrs	r1, r4
 8018932:	000b      	movs	r3, r1
 8018934:	e7fa      	b.n	801892c <__b2d+0x90>
 8018936:	46c0      	nop			; (mov r8, r8)
 8018938:	3ff00000 	.word	0x3ff00000

0801893c <__d2b>:
 801893c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801893e:	2101      	movs	r1, #1
 8018940:	0014      	movs	r4, r2
 8018942:	001e      	movs	r6, r3
 8018944:	9f08      	ldr	r7, [sp, #32]
 8018946:	f7ff fc4f 	bl	80181e8 <_Balloc>
 801894a:	1e05      	subs	r5, r0, #0
 801894c:	d105      	bne.n	801895a <__d2b+0x1e>
 801894e:	0002      	movs	r2, r0
 8018950:	4b26      	ldr	r3, [pc, #152]	; (80189ec <__d2b+0xb0>)
 8018952:	4927      	ldr	r1, [pc, #156]	; (80189f0 <__d2b+0xb4>)
 8018954:	4827      	ldr	r0, [pc, #156]	; (80189f4 <__d2b+0xb8>)
 8018956:	f000 f9c9 	bl	8018cec <__assert_func>
 801895a:	0333      	lsls	r3, r6, #12
 801895c:	0076      	lsls	r6, r6, #1
 801895e:	0b1b      	lsrs	r3, r3, #12
 8018960:	0d76      	lsrs	r6, r6, #21
 8018962:	d124      	bne.n	80189ae <__d2b+0x72>
 8018964:	9301      	str	r3, [sp, #4]
 8018966:	2c00      	cmp	r4, #0
 8018968:	d027      	beq.n	80189ba <__d2b+0x7e>
 801896a:	4668      	mov	r0, sp
 801896c:	9400      	str	r4, [sp, #0]
 801896e:	f7ff fd17 	bl	80183a0 <__lo0bits>
 8018972:	9c00      	ldr	r4, [sp, #0]
 8018974:	2800      	cmp	r0, #0
 8018976:	d01e      	beq.n	80189b6 <__d2b+0x7a>
 8018978:	9b01      	ldr	r3, [sp, #4]
 801897a:	2120      	movs	r1, #32
 801897c:	001a      	movs	r2, r3
 801897e:	1a09      	subs	r1, r1, r0
 8018980:	408a      	lsls	r2, r1
 8018982:	40c3      	lsrs	r3, r0
 8018984:	4322      	orrs	r2, r4
 8018986:	616a      	str	r2, [r5, #20]
 8018988:	9301      	str	r3, [sp, #4]
 801898a:	9c01      	ldr	r4, [sp, #4]
 801898c:	61ac      	str	r4, [r5, #24]
 801898e:	1e63      	subs	r3, r4, #1
 8018990:	419c      	sbcs	r4, r3
 8018992:	3401      	adds	r4, #1
 8018994:	612c      	str	r4, [r5, #16]
 8018996:	2e00      	cmp	r6, #0
 8018998:	d018      	beq.n	80189cc <__d2b+0x90>
 801899a:	4b17      	ldr	r3, [pc, #92]	; (80189f8 <__d2b+0xbc>)
 801899c:	18f6      	adds	r6, r6, r3
 801899e:	2335      	movs	r3, #53	; 0x35
 80189a0:	1836      	adds	r6, r6, r0
 80189a2:	1a18      	subs	r0, r3, r0
 80189a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189a6:	603e      	str	r6, [r7, #0]
 80189a8:	6018      	str	r0, [r3, #0]
 80189aa:	0028      	movs	r0, r5
 80189ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80189ae:	2280      	movs	r2, #128	; 0x80
 80189b0:	0352      	lsls	r2, r2, #13
 80189b2:	4313      	orrs	r3, r2
 80189b4:	e7d6      	b.n	8018964 <__d2b+0x28>
 80189b6:	616c      	str	r4, [r5, #20]
 80189b8:	e7e7      	b.n	801898a <__d2b+0x4e>
 80189ba:	a801      	add	r0, sp, #4
 80189bc:	f7ff fcf0 	bl	80183a0 <__lo0bits>
 80189c0:	2401      	movs	r4, #1
 80189c2:	9b01      	ldr	r3, [sp, #4]
 80189c4:	612c      	str	r4, [r5, #16]
 80189c6:	616b      	str	r3, [r5, #20]
 80189c8:	3020      	adds	r0, #32
 80189ca:	e7e4      	b.n	8018996 <__d2b+0x5a>
 80189cc:	4b0b      	ldr	r3, [pc, #44]	; (80189fc <__d2b+0xc0>)
 80189ce:	18c0      	adds	r0, r0, r3
 80189d0:	4b0b      	ldr	r3, [pc, #44]	; (8018a00 <__d2b+0xc4>)
 80189d2:	6038      	str	r0, [r7, #0]
 80189d4:	18e3      	adds	r3, r4, r3
 80189d6:	009b      	lsls	r3, r3, #2
 80189d8:	18eb      	adds	r3, r5, r3
 80189da:	6958      	ldr	r0, [r3, #20]
 80189dc:	f7ff fcc6 	bl	801836c <__hi0bits>
 80189e0:	0164      	lsls	r4, r4, #5
 80189e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189e4:	1a24      	subs	r4, r4, r0
 80189e6:	601c      	str	r4, [r3, #0]
 80189e8:	e7df      	b.n	80189aa <__d2b+0x6e>
 80189ea:	46c0      	nop			; (mov r8, r8)
 80189ec:	0801da51 	.word	0x0801da51
 80189f0:	0000030a 	.word	0x0000030a
 80189f4:	0801db40 	.word	0x0801db40
 80189f8:	fffffbcd 	.word	0xfffffbcd
 80189fc:	fffffbce 	.word	0xfffffbce
 8018a00:	3fffffff 	.word	0x3fffffff

08018a04 <__ratio>:
 8018a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a06:	b085      	sub	sp, #20
 8018a08:	000d      	movs	r5, r1
 8018a0a:	a902      	add	r1, sp, #8
 8018a0c:	0004      	movs	r4, r0
 8018a0e:	f7ff ff45 	bl	801889c <__b2d>
 8018a12:	9000      	str	r0, [sp, #0]
 8018a14:	9101      	str	r1, [sp, #4]
 8018a16:	9e00      	ldr	r6, [sp, #0]
 8018a18:	9f01      	ldr	r7, [sp, #4]
 8018a1a:	0028      	movs	r0, r5
 8018a1c:	a903      	add	r1, sp, #12
 8018a1e:	f7ff ff3d 	bl	801889c <__b2d>
 8018a22:	6924      	ldr	r4, [r4, #16]
 8018a24:	692d      	ldr	r5, [r5, #16]
 8018a26:	0002      	movs	r2, r0
 8018a28:	1b65      	subs	r5, r4, r5
 8018a2a:	016c      	lsls	r4, r5, #5
 8018a2c:	46a4      	mov	ip, r4
 8018a2e:	9d03      	ldr	r5, [sp, #12]
 8018a30:	9c02      	ldr	r4, [sp, #8]
 8018a32:	000b      	movs	r3, r1
 8018a34:	1b64      	subs	r4, r4, r5
 8018a36:	4464      	add	r4, ip
 8018a38:	0525      	lsls	r5, r4, #20
 8018a3a:	2c00      	cmp	r4, #0
 8018a3c:	dd07      	ble.n	8018a4e <__ratio+0x4a>
 8018a3e:	9901      	ldr	r1, [sp, #4]
 8018a40:	186f      	adds	r7, r5, r1
 8018a42:	0030      	movs	r0, r6
 8018a44:	0039      	movs	r1, r7
 8018a46:	f7e9 f961 	bl	8001d0c <__aeabi_ddiv>
 8018a4a:	b005      	add	sp, #20
 8018a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a4e:	1b4b      	subs	r3, r1, r5
 8018a50:	e7f7      	b.n	8018a42 <__ratio+0x3e>

08018a52 <__copybits>:
 8018a52:	b570      	push	{r4, r5, r6, lr}
 8018a54:	0015      	movs	r5, r2
 8018a56:	6913      	ldr	r3, [r2, #16]
 8018a58:	3514      	adds	r5, #20
 8018a5a:	009c      	lsls	r4, r3, #2
 8018a5c:	0006      	movs	r6, r0
 8018a5e:	002b      	movs	r3, r5
 8018a60:	3901      	subs	r1, #1
 8018a62:	1149      	asrs	r1, r1, #5
 8018a64:	3101      	adds	r1, #1
 8018a66:	0089      	lsls	r1, r1, #2
 8018a68:	1841      	adds	r1, r0, r1
 8018a6a:	192c      	adds	r4, r5, r4
 8018a6c:	429c      	cmp	r4, r3
 8018a6e:	d80d      	bhi.n	8018a8c <__copybits+0x3a>
 8018a70:	0015      	movs	r5, r2
 8018a72:	3511      	adds	r5, #17
 8018a74:	2300      	movs	r3, #0
 8018a76:	42a5      	cmp	r5, r4
 8018a78:	d803      	bhi.n	8018a82 <__copybits+0x30>
 8018a7a:	1aa3      	subs	r3, r4, r2
 8018a7c:	3b11      	subs	r3, #17
 8018a7e:	089b      	lsrs	r3, r3, #2
 8018a80:	009b      	lsls	r3, r3, #2
 8018a82:	18c0      	adds	r0, r0, r3
 8018a84:	2300      	movs	r3, #0
 8018a86:	4281      	cmp	r1, r0
 8018a88:	d803      	bhi.n	8018a92 <__copybits+0x40>
 8018a8a:	bd70      	pop	{r4, r5, r6, pc}
 8018a8c:	cb20      	ldmia	r3!, {r5}
 8018a8e:	c620      	stmia	r6!, {r5}
 8018a90:	e7ec      	b.n	8018a6c <__copybits+0x1a>
 8018a92:	c008      	stmia	r0!, {r3}
 8018a94:	e7f7      	b.n	8018a86 <__copybits+0x34>

08018a96 <__any_on>:
 8018a96:	0002      	movs	r2, r0
 8018a98:	6900      	ldr	r0, [r0, #16]
 8018a9a:	b510      	push	{r4, lr}
 8018a9c:	3214      	adds	r2, #20
 8018a9e:	114b      	asrs	r3, r1, #5
 8018aa0:	4298      	cmp	r0, r3
 8018aa2:	db13      	blt.n	8018acc <__any_on+0x36>
 8018aa4:	dd0c      	ble.n	8018ac0 <__any_on+0x2a>
 8018aa6:	241f      	movs	r4, #31
 8018aa8:	0008      	movs	r0, r1
 8018aaa:	4020      	ands	r0, r4
 8018aac:	4221      	tst	r1, r4
 8018aae:	d007      	beq.n	8018ac0 <__any_on+0x2a>
 8018ab0:	0099      	lsls	r1, r3, #2
 8018ab2:	588c      	ldr	r4, [r1, r2]
 8018ab4:	0021      	movs	r1, r4
 8018ab6:	40c1      	lsrs	r1, r0
 8018ab8:	4081      	lsls	r1, r0
 8018aba:	2001      	movs	r0, #1
 8018abc:	428c      	cmp	r4, r1
 8018abe:	d104      	bne.n	8018aca <__any_on+0x34>
 8018ac0:	009b      	lsls	r3, r3, #2
 8018ac2:	18d3      	adds	r3, r2, r3
 8018ac4:	4293      	cmp	r3, r2
 8018ac6:	d803      	bhi.n	8018ad0 <__any_on+0x3a>
 8018ac8:	2000      	movs	r0, #0
 8018aca:	bd10      	pop	{r4, pc}
 8018acc:	0003      	movs	r3, r0
 8018ace:	e7f7      	b.n	8018ac0 <__any_on+0x2a>
 8018ad0:	3b04      	subs	r3, #4
 8018ad2:	6819      	ldr	r1, [r3, #0]
 8018ad4:	2900      	cmp	r1, #0
 8018ad6:	d0f5      	beq.n	8018ac4 <__any_on+0x2e>
 8018ad8:	2001      	movs	r0, #1
 8018ada:	e7f6      	b.n	8018aca <__any_on+0x34>

08018adc <frexp>:
 8018adc:	b570      	push	{r4, r5, r6, lr}
 8018ade:	0014      	movs	r4, r2
 8018ae0:	2500      	movs	r5, #0
 8018ae2:	6025      	str	r5, [r4, #0]
 8018ae4:	4d10      	ldr	r5, [pc, #64]	; (8018b28 <frexp+0x4c>)
 8018ae6:	004b      	lsls	r3, r1, #1
 8018ae8:	000a      	movs	r2, r1
 8018aea:	085b      	lsrs	r3, r3, #1
 8018aec:	42ab      	cmp	r3, r5
 8018aee:	dc1a      	bgt.n	8018b26 <frexp+0x4a>
 8018af0:	001d      	movs	r5, r3
 8018af2:	4305      	orrs	r5, r0
 8018af4:	d017      	beq.n	8018b26 <frexp+0x4a>
 8018af6:	4d0d      	ldr	r5, [pc, #52]	; (8018b2c <frexp+0x50>)
 8018af8:	4229      	tst	r1, r5
 8018afa:	d109      	bne.n	8018b10 <frexp+0x34>
 8018afc:	2200      	movs	r2, #0
 8018afe:	4b0c      	ldr	r3, [pc, #48]	; (8018b30 <frexp+0x54>)
 8018b00:	f7e9 fd0a 	bl	8002518 <__aeabi_dmul>
 8018b04:	2536      	movs	r5, #54	; 0x36
 8018b06:	000a      	movs	r2, r1
 8018b08:	004b      	lsls	r3, r1, #1
 8018b0a:	426d      	negs	r5, r5
 8018b0c:	085b      	lsrs	r3, r3, #1
 8018b0e:	6025      	str	r5, [r4, #0]
 8018b10:	4d08      	ldr	r5, [pc, #32]	; (8018b34 <frexp+0x58>)
 8018b12:	151b      	asrs	r3, r3, #20
 8018b14:	195b      	adds	r3, r3, r5
 8018b16:	6825      	ldr	r5, [r4, #0]
 8018b18:	18eb      	adds	r3, r5, r3
 8018b1a:	6023      	str	r3, [r4, #0]
 8018b1c:	4b06      	ldr	r3, [pc, #24]	; (8018b38 <frexp+0x5c>)
 8018b1e:	401a      	ands	r2, r3
 8018b20:	4b06      	ldr	r3, [pc, #24]	; (8018b3c <frexp+0x60>)
 8018b22:	4313      	orrs	r3, r2
 8018b24:	0019      	movs	r1, r3
 8018b26:	bd70      	pop	{r4, r5, r6, pc}
 8018b28:	7fefffff 	.word	0x7fefffff
 8018b2c:	7ff00000 	.word	0x7ff00000
 8018b30:	43500000 	.word	0x43500000
 8018b34:	fffffc02 	.word	0xfffffc02
 8018b38:	800fffff 	.word	0x800fffff
 8018b3c:	3fe00000 	.word	0x3fe00000

08018b40 <nan>:
 8018b40:	2000      	movs	r0, #0
 8018b42:	4901      	ldr	r1, [pc, #4]	; (8018b48 <nan+0x8>)
 8018b44:	4770      	bx	lr
 8018b46:	46c0      	nop			; (mov r8, r8)
 8018b48:	7ff80000 	.word	0x7ff80000

08018b4c <__ssprint_r>:
 8018b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b4e:	6893      	ldr	r3, [r2, #8]
 8018b50:	b087      	sub	sp, #28
 8018b52:	000c      	movs	r4, r1
 8018b54:	0017      	movs	r7, r2
 8018b56:	9002      	str	r0, [sp, #8]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d065      	beq.n	8018c28 <__ssprint_r+0xdc>
 8018b5c:	6813      	ldr	r3, [r2, #0]
 8018b5e:	9303      	str	r3, [sp, #12]
 8018b60:	2300      	movs	r3, #0
 8018b62:	9305      	str	r3, [sp, #20]
 8018b64:	9301      	str	r3, [sp, #4]
 8018b66:	9b01      	ldr	r3, [sp, #4]
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d02d      	beq.n	8018bc8 <__ssprint_r+0x7c>
 8018b6c:	68a6      	ldr	r6, [r4, #8]
 8018b6e:	42b3      	cmp	r3, r6
 8018b70:	d346      	bcc.n	8018c00 <__ssprint_r+0xb4>
 8018b72:	2390      	movs	r3, #144	; 0x90
 8018b74:	89a2      	ldrh	r2, [r4, #12]
 8018b76:	00db      	lsls	r3, r3, #3
 8018b78:	421a      	tst	r2, r3
 8018b7a:	d041      	beq.n	8018c00 <__ssprint_r+0xb4>
 8018b7c:	6921      	ldr	r1, [r4, #16]
 8018b7e:	6823      	ldr	r3, [r4, #0]
 8018b80:	6965      	ldr	r5, [r4, #20]
 8018b82:	1a5b      	subs	r3, r3, r1
 8018b84:	9304      	str	r3, [sp, #16]
 8018b86:	2303      	movs	r3, #3
 8018b88:	435d      	muls	r5, r3
 8018b8a:	0feb      	lsrs	r3, r5, #31
 8018b8c:	195d      	adds	r5, r3, r5
 8018b8e:	9b04      	ldr	r3, [sp, #16]
 8018b90:	9801      	ldr	r0, [sp, #4]
 8018b92:	3301      	adds	r3, #1
 8018b94:	181b      	adds	r3, r3, r0
 8018b96:	106d      	asrs	r5, r5, #1
 8018b98:	42ab      	cmp	r3, r5
 8018b9a:	d900      	bls.n	8018b9e <__ssprint_r+0x52>
 8018b9c:	001d      	movs	r5, r3
 8018b9e:	0553      	lsls	r3, r2, #21
 8018ba0:	d546      	bpl.n	8018c30 <__ssprint_r+0xe4>
 8018ba2:	0029      	movs	r1, r5
 8018ba4:	9802      	ldr	r0, [sp, #8]
 8018ba6:	f7fb f991 	bl	8013ecc <_malloc_r>
 8018baa:	1e06      	subs	r6, r0, #0
 8018bac:	d116      	bne.n	8018bdc <__ssprint_r+0x90>
 8018bae:	230c      	movs	r3, #12
 8018bb0:	9a02      	ldr	r2, [sp, #8]
 8018bb2:	2001      	movs	r0, #1
 8018bb4:	6013      	str	r3, [r2, #0]
 8018bb6:	2340      	movs	r3, #64	; 0x40
 8018bb8:	89a2      	ldrh	r2, [r4, #12]
 8018bba:	4240      	negs	r0, r0
 8018bbc:	4313      	orrs	r3, r2
 8018bbe:	81a3      	strh	r3, [r4, #12]
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	60bb      	str	r3, [r7, #8]
 8018bc4:	607b      	str	r3, [r7, #4]
 8018bc6:	e031      	b.n	8018c2c <__ssprint_r+0xe0>
 8018bc8:	9b03      	ldr	r3, [sp, #12]
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	9305      	str	r3, [sp, #20]
 8018bce:	9b03      	ldr	r3, [sp, #12]
 8018bd0:	685b      	ldr	r3, [r3, #4]
 8018bd2:	9301      	str	r3, [sp, #4]
 8018bd4:	9b03      	ldr	r3, [sp, #12]
 8018bd6:	3308      	adds	r3, #8
 8018bd8:	9303      	str	r3, [sp, #12]
 8018bda:	e7c4      	b.n	8018b66 <__ssprint_r+0x1a>
 8018bdc:	9a04      	ldr	r2, [sp, #16]
 8018bde:	6921      	ldr	r1, [r4, #16]
 8018be0:	f7fb fb96 	bl	8014310 <memcpy>
 8018be4:	89a3      	ldrh	r3, [r4, #12]
 8018be6:	4a18      	ldr	r2, [pc, #96]	; (8018c48 <__ssprint_r+0xfc>)
 8018be8:	401a      	ands	r2, r3
 8018bea:	2380      	movs	r3, #128	; 0x80
 8018bec:	4313      	orrs	r3, r2
 8018bee:	81a3      	strh	r3, [r4, #12]
 8018bf0:	9b04      	ldr	r3, [sp, #16]
 8018bf2:	6126      	str	r6, [r4, #16]
 8018bf4:	18f6      	adds	r6, r6, r3
 8018bf6:	6026      	str	r6, [r4, #0]
 8018bf8:	6165      	str	r5, [r4, #20]
 8018bfa:	9e01      	ldr	r6, [sp, #4]
 8018bfc:	1aed      	subs	r5, r5, r3
 8018bfe:	60a5      	str	r5, [r4, #8]
 8018c00:	9b01      	ldr	r3, [sp, #4]
 8018c02:	429e      	cmp	r6, r3
 8018c04:	d900      	bls.n	8018c08 <__ssprint_r+0xbc>
 8018c06:	001e      	movs	r6, r3
 8018c08:	0032      	movs	r2, r6
 8018c0a:	9905      	ldr	r1, [sp, #20]
 8018c0c:	6820      	ldr	r0, [r4, #0]
 8018c0e:	f7ff fad8 	bl	80181c2 <memmove>
 8018c12:	68a3      	ldr	r3, [r4, #8]
 8018c14:	9a01      	ldr	r2, [sp, #4]
 8018c16:	1b9b      	subs	r3, r3, r6
 8018c18:	60a3      	str	r3, [r4, #8]
 8018c1a:	6823      	ldr	r3, [r4, #0]
 8018c1c:	199e      	adds	r6, r3, r6
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	6026      	str	r6, [r4, #0]
 8018c22:	1a9b      	subs	r3, r3, r2
 8018c24:	60bb      	str	r3, [r7, #8]
 8018c26:	d1cf      	bne.n	8018bc8 <__ssprint_r+0x7c>
 8018c28:	2000      	movs	r0, #0
 8018c2a:	6078      	str	r0, [r7, #4]
 8018c2c:	b007      	add	sp, #28
 8018c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c30:	002a      	movs	r2, r5
 8018c32:	9802      	ldr	r0, [sp, #8]
 8018c34:	f7fb fbb2 	bl	801439c <_realloc_r>
 8018c38:	1e06      	subs	r6, r0, #0
 8018c3a:	d1d9      	bne.n	8018bf0 <__ssprint_r+0xa4>
 8018c3c:	6921      	ldr	r1, [r4, #16]
 8018c3e:	9802      	ldr	r0, [sp, #8]
 8018c40:	f7fe fe6e 	bl	8017920 <_free_r>
 8018c44:	e7b3      	b.n	8018bae <__ssprint_r+0x62>
 8018c46:	46c0      	nop			; (mov r8, r8)
 8018c48:	fffffb7f 	.word	0xfffffb7f

08018c4c <__ascii_wctomb>:
 8018c4c:	0003      	movs	r3, r0
 8018c4e:	1e08      	subs	r0, r1, #0
 8018c50:	d005      	beq.n	8018c5e <__ascii_wctomb+0x12>
 8018c52:	2aff      	cmp	r2, #255	; 0xff
 8018c54:	d904      	bls.n	8018c60 <__ascii_wctomb+0x14>
 8018c56:	228a      	movs	r2, #138	; 0x8a
 8018c58:	2001      	movs	r0, #1
 8018c5a:	601a      	str	r2, [r3, #0]
 8018c5c:	4240      	negs	r0, r0
 8018c5e:	4770      	bx	lr
 8018c60:	2001      	movs	r0, #1
 8018c62:	700a      	strb	r2, [r1, #0]
 8018c64:	e7fb      	b.n	8018c5e <__ascii_wctomb+0x12>
	...

08018c68 <__register_exitproc>:
 8018c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c6a:	4f1e      	ldr	r7, [pc, #120]	; (8018ce4 <__register_exitproc+0x7c>)
 8018c6c:	0004      	movs	r4, r0
 8018c6e:	6838      	ldr	r0, [r7, #0]
 8018c70:	0016      	movs	r6, r2
 8018c72:	9100      	str	r1, [sp, #0]
 8018c74:	9301      	str	r3, [sp, #4]
 8018c76:	f7ff fa85 	bl	8018184 <__retarget_lock_acquire_recursive>
 8018c7a:	4b1b      	ldr	r3, [pc, #108]	; (8018ce8 <__register_exitproc+0x80>)
 8018c7c:	6819      	ldr	r1, [r3, #0]
 8018c7e:	000b      	movs	r3, r1
 8018c80:	33fc      	adds	r3, #252	; 0xfc
 8018c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018c84:	2a00      	cmp	r2, #0
 8018c86:	d103      	bne.n	8018c90 <__register_exitproc+0x28>
 8018c88:	000a      	movs	r2, r1
 8018c8a:	324d      	adds	r2, #77	; 0x4d
 8018c8c:	32ff      	adds	r2, #255	; 0xff
 8018c8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8018c90:	6853      	ldr	r3, [r2, #4]
 8018c92:	6838      	ldr	r0, [r7, #0]
 8018c94:	2b1f      	cmp	r3, #31
 8018c96:	dd04      	ble.n	8018ca2 <__register_exitproc+0x3a>
 8018c98:	f7ff fa75 	bl	8018186 <__retarget_lock_release_recursive>
 8018c9c:	2001      	movs	r0, #1
 8018c9e:	4240      	negs	r0, r0
 8018ca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018ca2:	2c00      	cmp	r4, #0
 8018ca4:	d014      	beq.n	8018cd0 <__register_exitproc+0x68>
 8018ca6:	0099      	lsls	r1, r3, #2
 8018ca8:	1851      	adds	r1, r2, r1
 8018caa:	000f      	movs	r7, r1
 8018cac:	3788      	adds	r7, #136	; 0x88
 8018cae:	603e      	str	r6, [r7, #0]
 8018cb0:	2701      	movs	r7, #1
 8018cb2:	0016      	movs	r6, r2
 8018cb4:	409f      	lsls	r7, r3
 8018cb6:	3685      	adds	r6, #133	; 0x85
 8018cb8:	36ff      	adds	r6, #255	; 0xff
 8018cba:	6875      	ldr	r5, [r6, #4]
 8018cbc:	31fc      	adds	r1, #252	; 0xfc
 8018cbe:	433d      	orrs	r5, r7
 8018cc0:	6075      	str	r5, [r6, #4]
 8018cc2:	9d01      	ldr	r5, [sp, #4]
 8018cc4:	60cd      	str	r5, [r1, #12]
 8018cc6:	2c02      	cmp	r4, #2
 8018cc8:	d102      	bne.n	8018cd0 <__register_exitproc+0x68>
 8018cca:	68b1      	ldr	r1, [r6, #8]
 8018ccc:	430f      	orrs	r7, r1
 8018cce:	60b7      	str	r7, [r6, #8]
 8018cd0:	1c59      	adds	r1, r3, #1
 8018cd2:	6051      	str	r1, [r2, #4]
 8018cd4:	3302      	adds	r3, #2
 8018cd6:	9900      	ldr	r1, [sp, #0]
 8018cd8:	009b      	lsls	r3, r3, #2
 8018cda:	5099      	str	r1, [r3, r2]
 8018cdc:	f7ff fa53 	bl	8018186 <__retarget_lock_release_recursive>
 8018ce0:	2000      	movs	r0, #0
 8018ce2:	e7dd      	b.n	8018ca0 <__register_exitproc+0x38>
 8018ce4:	20000910 	.word	0x20000910
 8018ce8:	0801d998 	.word	0x0801d998

08018cec <__assert_func>:
 8018cec:	b530      	push	{r4, r5, lr}
 8018cee:	0014      	movs	r4, r2
 8018cf0:	001a      	movs	r2, r3
 8018cf2:	4b09      	ldr	r3, [pc, #36]	; (8018d18 <__assert_func+0x2c>)
 8018cf4:	0005      	movs	r5, r0
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	b085      	sub	sp, #20
 8018cfa:	68d8      	ldr	r0, [r3, #12]
 8018cfc:	4b07      	ldr	r3, [pc, #28]	; (8018d1c <__assert_func+0x30>)
 8018cfe:	2c00      	cmp	r4, #0
 8018d00:	d101      	bne.n	8018d06 <__assert_func+0x1a>
 8018d02:	4b07      	ldr	r3, [pc, #28]	; (8018d20 <__assert_func+0x34>)
 8018d04:	001c      	movs	r4, r3
 8018d06:	9301      	str	r3, [sp, #4]
 8018d08:	9100      	str	r1, [sp, #0]
 8018d0a:	002b      	movs	r3, r5
 8018d0c:	4905      	ldr	r1, [pc, #20]	; (8018d24 <__assert_func+0x38>)
 8018d0e:	9402      	str	r4, [sp, #8]
 8018d10:	f000 f836 	bl	8018d80 <fiprintf>
 8018d14:	f000 fe1e 	bl	8019954 <abort>
 8018d18:	200000d0 	.word	0x200000d0
 8018d1c:	0801dc9c 	.word	0x0801dc9c
 8018d20:	0801dcd7 	.word	0x0801dcd7
 8018d24:	0801dca9 	.word	0x0801dca9

08018d28 <_calloc_r>:
 8018d28:	b510      	push	{r4, lr}
 8018d2a:	4351      	muls	r1, r2
 8018d2c:	f7fb f8ce 	bl	8013ecc <_malloc_r>
 8018d30:	1e04      	subs	r4, r0, #0
 8018d32:	d01a      	beq.n	8018d6a <_calloc_r+0x42>
 8018d34:	0003      	movs	r3, r0
 8018d36:	3b08      	subs	r3, #8
 8018d38:	685a      	ldr	r2, [r3, #4]
 8018d3a:	2303      	movs	r3, #3
 8018d3c:	439a      	bics	r2, r3
 8018d3e:	3a04      	subs	r2, #4
 8018d40:	2a24      	cmp	r2, #36	; 0x24
 8018d42:	d819      	bhi.n	8018d78 <_calloc_r+0x50>
 8018d44:	0003      	movs	r3, r0
 8018d46:	2a13      	cmp	r2, #19
 8018d48:	d90b      	bls.n	8018d62 <_calloc_r+0x3a>
 8018d4a:	2100      	movs	r1, #0
 8018d4c:	3308      	adds	r3, #8
 8018d4e:	6001      	str	r1, [r0, #0]
 8018d50:	6041      	str	r1, [r0, #4]
 8018d52:	2a1b      	cmp	r2, #27
 8018d54:	d905      	bls.n	8018d62 <_calloc_r+0x3a>
 8018d56:	6081      	str	r1, [r0, #8]
 8018d58:	60c1      	str	r1, [r0, #12]
 8018d5a:	2a24      	cmp	r2, #36	; 0x24
 8018d5c:	d007      	beq.n	8018d6e <_calloc_r+0x46>
 8018d5e:	0003      	movs	r3, r0
 8018d60:	3310      	adds	r3, #16
 8018d62:	2200      	movs	r2, #0
 8018d64:	601a      	str	r2, [r3, #0]
 8018d66:	605a      	str	r2, [r3, #4]
 8018d68:	609a      	str	r2, [r3, #8]
 8018d6a:	0020      	movs	r0, r4
 8018d6c:	bd10      	pop	{r4, pc}
 8018d6e:	0003      	movs	r3, r0
 8018d70:	6101      	str	r1, [r0, #16]
 8018d72:	3318      	adds	r3, #24
 8018d74:	6141      	str	r1, [r0, #20]
 8018d76:	e7f4      	b.n	8018d62 <_calloc_r+0x3a>
 8018d78:	2100      	movs	r1, #0
 8018d7a:	f7fb fad2 	bl	8014322 <memset>
 8018d7e:	e7f4      	b.n	8018d6a <_calloc_r+0x42>

08018d80 <fiprintf>:
 8018d80:	b40e      	push	{r1, r2, r3}
 8018d82:	b503      	push	{r0, r1, lr}
 8018d84:	0001      	movs	r1, r0
 8018d86:	ab03      	add	r3, sp, #12
 8018d88:	4804      	ldr	r0, [pc, #16]	; (8018d9c <fiprintf+0x1c>)
 8018d8a:	cb04      	ldmia	r3!, {r2}
 8018d8c:	6800      	ldr	r0, [r0, #0]
 8018d8e:	9301      	str	r3, [sp, #4]
 8018d90:	f000 f83a 	bl	8018e08 <_vfiprintf_r>
 8018d94:	b002      	add	sp, #8
 8018d96:	bc08      	pop	{r3}
 8018d98:	b003      	add	sp, #12
 8018d9a:	4718      	bx	r3
 8018d9c:	200000d0 	.word	0x200000d0

08018da0 <__sprint_r>:
 8018da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018da2:	b085      	sub	sp, #20
 8018da4:	9001      	str	r0, [sp, #4]
 8018da6:	6890      	ldr	r0, [r2, #8]
 8018da8:	000d      	movs	r5, r1
 8018daa:	0014      	movs	r4, r2
 8018dac:	2800      	cmp	r0, #0
 8018dae:	d102      	bne.n	8018db6 <__sprint_r+0x16>
 8018db0:	6050      	str	r0, [r2, #4]
 8018db2:	b005      	add	sp, #20
 8018db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018db6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8018db8:	049b      	lsls	r3, r3, #18
 8018dba:	d521      	bpl.n	8018e00 <__sprint_r+0x60>
 8018dbc:	6817      	ldr	r7, [r2, #0]
 8018dbe:	2600      	movs	r6, #0
 8018dc0:	683b      	ldr	r3, [r7, #0]
 8018dc2:	9302      	str	r3, [sp, #8]
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	9300      	str	r3, [sp, #0]
 8018dc8:	089b      	lsrs	r3, r3, #2
 8018dca:	9303      	str	r3, [sp, #12]
 8018dcc:	9b03      	ldr	r3, [sp, #12]
 8018dce:	42b3      	cmp	r3, r6
 8018dd0:	dc0b      	bgt.n	8018dea <__sprint_r+0x4a>
 8018dd2:	2303      	movs	r3, #3
 8018dd4:	9800      	ldr	r0, [sp, #0]
 8018dd6:	3708      	adds	r7, #8
 8018dd8:	4398      	bics	r0, r3
 8018dda:	68a3      	ldr	r3, [r4, #8]
 8018ddc:	1a18      	subs	r0, r3, r0
 8018dde:	60a0      	str	r0, [r4, #8]
 8018de0:	d1ed      	bne.n	8018dbe <__sprint_r+0x1e>
 8018de2:	2300      	movs	r3, #0
 8018de4:	60a3      	str	r3, [r4, #8]
 8018de6:	6063      	str	r3, [r4, #4]
 8018de8:	e7e3      	b.n	8018db2 <__sprint_r+0x12>
 8018dea:	9902      	ldr	r1, [sp, #8]
 8018dec:	00b3      	lsls	r3, r6, #2
 8018dee:	58c9      	ldr	r1, [r1, r3]
 8018df0:	002a      	movs	r2, r5
 8018df2:	9801      	ldr	r0, [sp, #4]
 8018df4:	f000 ff2c 	bl	8019c50 <_fputwc_r>
 8018df8:	1c43      	adds	r3, r0, #1
 8018dfa:	d0f2      	beq.n	8018de2 <__sprint_r+0x42>
 8018dfc:	3601      	adds	r6, #1
 8018dfe:	e7e5      	b.n	8018dcc <__sprint_r+0x2c>
 8018e00:	9801      	ldr	r0, [sp, #4]
 8018e02:	f000 ff4f 	bl	8019ca4 <__sfvwrite_r>
 8018e06:	e7ec      	b.n	8018de2 <__sprint_r+0x42>

08018e08 <_vfiprintf_r>:
 8018e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e0a:	b0c3      	sub	sp, #268	; 0x10c
 8018e0c:	001c      	movs	r4, r3
 8018e0e:	001d      	movs	r5, r3
 8018e10:	9006      	str	r0, [sp, #24]
 8018e12:	9103      	str	r1, [sp, #12]
 8018e14:	9207      	str	r2, [sp, #28]
 8018e16:	2800      	cmp	r0, #0
 8018e18:	d005      	beq.n	8018e26 <_vfiprintf_r+0x1e>
 8018e1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018e1c:	9304      	str	r3, [sp, #16]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d101      	bne.n	8018e26 <_vfiprintf_r+0x1e>
 8018e22:	f000 fead 	bl	8019b80 <__sinit>
 8018e26:	9b03      	ldr	r3, [sp, #12]
 8018e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018e2a:	07db      	lsls	r3, r3, #31
 8018e2c:	d407      	bmi.n	8018e3e <_vfiprintf_r+0x36>
 8018e2e:	9b03      	ldr	r3, [sp, #12]
 8018e30:	899b      	ldrh	r3, [r3, #12]
 8018e32:	059b      	lsls	r3, r3, #22
 8018e34:	d403      	bmi.n	8018e3e <_vfiprintf_r+0x36>
 8018e36:	9b03      	ldr	r3, [sp, #12]
 8018e38:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018e3a:	f7ff f9a3 	bl	8018184 <__retarget_lock_acquire_recursive>
 8018e3e:	9b03      	ldr	r3, [sp, #12]
 8018e40:	220c      	movs	r2, #12
 8018e42:	5e9a      	ldrsh	r2, [r3, r2]
 8018e44:	2380      	movs	r3, #128	; 0x80
 8018e46:	019b      	lsls	r3, r3, #6
 8018e48:	421a      	tst	r2, r3
 8018e4a:	d107      	bne.n	8018e5c <_vfiprintf_r+0x54>
 8018e4c:	4313      	orrs	r3, r2
 8018e4e:	9a03      	ldr	r2, [sp, #12]
 8018e50:	8193      	strh	r3, [r2, #12]
 8018e52:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8018e54:	4ba7      	ldr	r3, [pc, #668]	; (80190f4 <_vfiprintf_r+0x2ec>)
 8018e56:	4013      	ands	r3, r2
 8018e58:	9a03      	ldr	r2, [sp, #12]
 8018e5a:	6653      	str	r3, [r2, #100]	; 0x64
 8018e5c:	9b03      	ldr	r3, [sp, #12]
 8018e5e:	899b      	ldrh	r3, [r3, #12]
 8018e60:	071b      	lsls	r3, r3, #28
 8018e62:	d503      	bpl.n	8018e6c <_vfiprintf_r+0x64>
 8018e64:	9b03      	ldr	r3, [sp, #12]
 8018e66:	691b      	ldr	r3, [r3, #16]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d118      	bne.n	8018e9e <_vfiprintf_r+0x96>
 8018e6c:	9903      	ldr	r1, [sp, #12]
 8018e6e:	9806      	ldr	r0, [sp, #24]
 8018e70:	f000 fd0c 	bl	801988c <__swsetup_r>
 8018e74:	2800      	cmp	r0, #0
 8018e76:	d012      	beq.n	8018e9e <_vfiprintf_r+0x96>
 8018e78:	9b03      	ldr	r3, [sp, #12]
 8018e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018e7c:	07db      	lsls	r3, r3, #31
 8018e7e:	d505      	bpl.n	8018e8c <_vfiprintf_r+0x84>
 8018e80:	2301      	movs	r3, #1
 8018e82:	425b      	negs	r3, r3
 8018e84:	9308      	str	r3, [sp, #32]
 8018e86:	9808      	ldr	r0, [sp, #32]
 8018e88:	b043      	add	sp, #268	; 0x10c
 8018e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e8c:	9b03      	ldr	r3, [sp, #12]
 8018e8e:	899b      	ldrh	r3, [r3, #12]
 8018e90:	059b      	lsls	r3, r3, #22
 8018e92:	d4f5      	bmi.n	8018e80 <_vfiprintf_r+0x78>
 8018e94:	9b03      	ldr	r3, [sp, #12]
 8018e96:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018e98:	f7ff f975 	bl	8018186 <__retarget_lock_release_recursive>
 8018e9c:	e7f0      	b.n	8018e80 <_vfiprintf_r+0x78>
 8018e9e:	9b03      	ldr	r3, [sp, #12]
 8018ea0:	899a      	ldrh	r2, [r3, #12]
 8018ea2:	231a      	movs	r3, #26
 8018ea4:	4013      	ands	r3, r2
 8018ea6:	2b0a      	cmp	r3, #10
 8018ea8:	d116      	bne.n	8018ed8 <_vfiprintf_r+0xd0>
 8018eaa:	9b03      	ldr	r3, [sp, #12]
 8018eac:	210e      	movs	r1, #14
 8018eae:	5e5b      	ldrsh	r3, [r3, r1]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	db11      	blt.n	8018ed8 <_vfiprintf_r+0xd0>
 8018eb4:	9b03      	ldr	r3, [sp, #12]
 8018eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018eb8:	07db      	lsls	r3, r3, #31
 8018eba:	d405      	bmi.n	8018ec8 <_vfiprintf_r+0xc0>
 8018ebc:	0593      	lsls	r3, r2, #22
 8018ebe:	d403      	bmi.n	8018ec8 <_vfiprintf_r+0xc0>
 8018ec0:	9b03      	ldr	r3, [sp, #12]
 8018ec2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018ec4:	f7ff f95f 	bl	8018186 <__retarget_lock_release_recursive>
 8018ec8:	0023      	movs	r3, r4
 8018eca:	9a07      	ldr	r2, [sp, #28]
 8018ecc:	9903      	ldr	r1, [sp, #12]
 8018ece:	9806      	ldr	r0, [sp, #24]
 8018ed0:	f000 fc98 	bl	8019804 <__sbprintf>
 8018ed4:	9008      	str	r0, [sp, #32]
 8018ed6:	e7d6      	b.n	8018e86 <_vfiprintf_r+0x7e>
 8018ed8:	2300      	movs	r3, #0
 8018eda:	af19      	add	r7, sp, #100	; 0x64
 8018edc:	9716      	str	r7, [sp, #88]	; 0x58
 8018ede:	9318      	str	r3, [sp, #96]	; 0x60
 8018ee0:	9317      	str	r3, [sp, #92]	; 0x5c
 8018ee2:	930c      	str	r3, [sp, #48]	; 0x30
 8018ee4:	930d      	str	r3, [sp, #52]	; 0x34
 8018ee6:	930e      	str	r3, [sp, #56]	; 0x38
 8018ee8:	930f      	str	r3, [sp, #60]	; 0x3c
 8018eea:	9308      	str	r3, [sp, #32]
 8018eec:	9c07      	ldr	r4, [sp, #28]
 8018eee:	7823      	ldrb	r3, [r4, #0]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d002      	beq.n	8018efa <_vfiprintf_r+0xf2>
 8018ef4:	2b25      	cmp	r3, #37	; 0x25
 8018ef6:	d000      	beq.n	8018efa <_vfiprintf_r+0xf2>
 8018ef8:	e093      	b.n	8019022 <_vfiprintf_r+0x21a>
 8018efa:	9b07      	ldr	r3, [sp, #28]
 8018efc:	1ae3      	subs	r3, r4, r3
 8018efe:	001e      	movs	r6, r3
 8018f00:	9b07      	ldr	r3, [sp, #28]
 8018f02:	429c      	cmp	r4, r3
 8018f04:	d01a      	beq.n	8018f3c <_vfiprintf_r+0x134>
 8018f06:	46b4      	mov	ip, r6
 8018f08:	603b      	str	r3, [r7, #0]
 8018f0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018f0c:	607e      	str	r6, [r7, #4]
 8018f0e:	4463      	add	r3, ip
 8018f10:	9318      	str	r3, [sp, #96]	; 0x60
 8018f12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018f14:	3708      	adds	r7, #8
 8018f16:	9304      	str	r3, [sp, #16]
 8018f18:	3301      	adds	r3, #1
 8018f1a:	9317      	str	r3, [sp, #92]	; 0x5c
 8018f1c:	2b07      	cmp	r3, #7
 8018f1e:	dd09      	ble.n	8018f34 <_vfiprintf_r+0x12c>
 8018f20:	9903      	ldr	r1, [sp, #12]
 8018f22:	9806      	ldr	r0, [sp, #24]
 8018f24:	aa16      	add	r2, sp, #88	; 0x58
 8018f26:	f7ff ff3b 	bl	8018da0 <__sprint_r>
 8018f2a:	2800      	cmp	r0, #0
 8018f2c:	d001      	beq.n	8018f32 <_vfiprintf_r+0x12a>
 8018f2e:	f000 fc00 	bl	8019732 <_vfiprintf_r+0x92a>
 8018f32:	af19      	add	r7, sp, #100	; 0x64
 8018f34:	46b4      	mov	ip, r6
 8018f36:	9b08      	ldr	r3, [sp, #32]
 8018f38:	4463      	add	r3, ip
 8018f3a:	9308      	str	r3, [sp, #32]
 8018f3c:	7823      	ldrb	r3, [r4, #0]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d101      	bne.n	8018f46 <_vfiprintf_r+0x13e>
 8018f42:	f000 fc1b 	bl	801977c <_vfiprintf_r+0x974>
 8018f46:	2200      	movs	r2, #0
 8018f48:	a914      	add	r1, sp, #80	; 0x50
 8018f4a:	70ca      	strb	r2, [r1, #3]
 8018f4c:	2101      	movs	r1, #1
 8018f4e:	1c63      	adds	r3, r4, #1
 8018f50:	0014      	movs	r4, r2
 8018f52:	4249      	negs	r1, r1
 8018f54:	9105      	str	r1, [sp, #20]
 8018f56:	9209      	str	r2, [sp, #36]	; 0x24
 8018f58:	1c5a      	adds	r2, r3, #1
 8018f5a:	781b      	ldrb	r3, [r3, #0]
 8018f5c:	9207      	str	r2, [sp, #28]
 8018f5e:	0018      	movs	r0, r3
 8018f60:	3820      	subs	r0, #32
 8018f62:	285a      	cmp	r0, #90	; 0x5a
 8018f64:	d900      	bls.n	8018f68 <_vfiprintf_r+0x160>
 8018f66:	e37c      	b.n	8019662 <_vfiprintf_r+0x85a>
 8018f68:	f7e7 f8e8 	bl	800013c <__gnu_thumb1_case_uhi>
 8018f6c:	037b0098 	.word	0x037b0098
 8018f70:	00a1037b 	.word	0x00a1037b
 8018f74:	037b037b 	.word	0x037b037b
 8018f78:	007d037b 	.word	0x007d037b
 8018f7c:	037b037b 	.word	0x037b037b
 8018f80:	00ab00a3 	.word	0x00ab00a3
 8018f84:	00a9037b 	.word	0x00a9037b
 8018f88:	037b00af 	.word	0x037b00af
 8018f8c:	00d500d3 	.word	0x00d500d3
 8018f90:	00d500d5 	.word	0x00d500d5
 8018f94:	00d500d5 	.word	0x00d500d5
 8018f98:	00d500d5 	.word	0x00d500d5
 8018f9c:	00d500d5 	.word	0x00d500d5
 8018fa0:	037b037b 	.word	0x037b037b
 8018fa4:	037b037b 	.word	0x037b037b
 8018fa8:	037b037b 	.word	0x037b037b
 8018fac:	037b037b 	.word	0x037b037b
 8018fb0:	00fe037b 	.word	0x00fe037b
 8018fb4:	037b01f9 	.word	0x037b01f9
 8018fb8:	037b037b 	.word	0x037b037b
 8018fbc:	037b037b 	.word	0x037b037b
 8018fc0:	037b037b 	.word	0x037b037b
 8018fc4:	037b037b 	.word	0x037b037b
 8018fc8:	0252037b 	.word	0x0252037b
 8018fcc:	037b037b 	.word	0x037b037b
 8018fd0:	0295037b 	.word	0x0295037b
 8018fd4:	02b1037b 	.word	0x02b1037b
 8018fd8:	037b037b 	.word	0x037b037b
 8018fdc:	037b02ec 	.word	0x037b02ec
 8018fe0:	037b037b 	.word	0x037b037b
 8018fe4:	037b037b 	.word	0x037b037b
 8018fe8:	037b037b 	.word	0x037b037b
 8018fec:	037b037b 	.word	0x037b037b
 8018ff0:	00fe037b 	.word	0x00fe037b
 8018ff4:	037b01fb 	.word	0x037b01fb
 8018ff8:	037b037b 	.word	0x037b037b
 8018ffc:	01fb00e7 	.word	0x01fb00e7
 8019000:	037b00fa 	.word	0x037b00fa
 8019004:	037b00f3 	.word	0x037b00f3
 8019008:	0254023b 	.word	0x0254023b
 801900c:	00fa0287 	.word	0x00fa0287
 8019010:	0295037b 	.word	0x0295037b
 8019014:	02b3009f 	.word	0x02b3009f
 8019018:	037b037b 	.word	0x037b037b
 801901c:	037b005d 	.word	0x037b005d
 8019020:	009f      	.short	0x009f
 8019022:	3401      	adds	r4, #1
 8019024:	e763      	b.n	8018eee <_vfiprintf_r+0xe6>
 8019026:	4a34      	ldr	r2, [pc, #208]	; (80190f8 <_vfiprintf_r+0x2f0>)
 8019028:	0020      	movs	r0, r4
 801902a:	920c      	str	r2, [sp, #48]	; 0x30
 801902c:	2220      	movs	r2, #32
 801902e:	4010      	ands	r0, r2
 8019030:	4214      	tst	r4, r2
 8019032:	d100      	bne.n	8019036 <_vfiprintf_r+0x22e>
 8019034:	e288      	b.n	8019548 <_vfiprintf_r+0x740>
 8019036:	3a19      	subs	r2, #25
 8019038:	3507      	adds	r5, #7
 801903a:	4395      	bics	r5, r2
 801903c:	0028      	movs	r0, r5
 801903e:	c806      	ldmia	r0!, {r1, r2}
 8019040:	9100      	str	r1, [sp, #0]
 8019042:	9201      	str	r2, [sp, #4]
 8019044:	9004      	str	r0, [sp, #16]
 8019046:	07e2      	lsls	r2, r4, #31
 8019048:	d509      	bpl.n	801905e <_vfiprintf_r+0x256>
 801904a:	9a00      	ldr	r2, [sp, #0]
 801904c:	9901      	ldr	r1, [sp, #4]
 801904e:	430a      	orrs	r2, r1
 8019050:	d005      	beq.n	801905e <_vfiprintf_r+0x256>
 8019052:	aa15      	add	r2, sp, #84	; 0x54
 8019054:	2130      	movs	r1, #48	; 0x30
 8019056:	7053      	strb	r3, [r2, #1]
 8019058:	2302      	movs	r3, #2
 801905a:	7011      	strb	r1, [r2, #0]
 801905c:	431c      	orrs	r4, r3
 801905e:	4b27      	ldr	r3, [pc, #156]	; (80190fc <_vfiprintf_r+0x2f4>)
 8019060:	401c      	ands	r4, r3
 8019062:	2302      	movs	r3, #2
 8019064:	e1e6      	b.n	8019434 <_vfiprintf_r+0x62c>
 8019066:	9806      	ldr	r0, [sp, #24]
 8019068:	f7ff f886 	bl	8018178 <_localeconv_r>
 801906c:	6843      	ldr	r3, [r0, #4]
 801906e:	0018      	movs	r0, r3
 8019070:	930f      	str	r3, [sp, #60]	; 0x3c
 8019072:	f7e7 f851 	bl	8000118 <strlen>
 8019076:	900e      	str	r0, [sp, #56]	; 0x38
 8019078:	9806      	ldr	r0, [sp, #24]
 801907a:	f7ff f87d 	bl	8018178 <_localeconv_r>
 801907e:	6883      	ldr	r3, [r0, #8]
 8019080:	930d      	str	r3, [sp, #52]	; 0x34
 8019082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019084:	2b00      	cmp	r3, #0
 8019086:	d010      	beq.n	80190aa <_vfiprintf_r+0x2a2>
 8019088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801908a:	2b00      	cmp	r3, #0
 801908c:	d00d      	beq.n	80190aa <_vfiprintf_r+0x2a2>
 801908e:	781b      	ldrb	r3, [r3, #0]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d00a      	beq.n	80190aa <_vfiprintf_r+0x2a2>
 8019094:	2380      	movs	r3, #128	; 0x80
 8019096:	00db      	lsls	r3, r3, #3
 8019098:	431c      	orrs	r4, r3
 801909a:	e006      	b.n	80190aa <_vfiprintf_r+0x2a2>
 801909c:	ab14      	add	r3, sp, #80	; 0x50
 801909e:	78da      	ldrb	r2, [r3, #3]
 80190a0:	3303      	adds	r3, #3
 80190a2:	2a00      	cmp	r2, #0
 80190a4:	d101      	bne.n	80190aa <_vfiprintf_r+0x2a2>
 80190a6:	3220      	adds	r2, #32
 80190a8:	701a      	strb	r2, [r3, #0]
 80190aa:	9b07      	ldr	r3, [sp, #28]
 80190ac:	e754      	b.n	8018f58 <_vfiprintf_r+0x150>
 80190ae:	2301      	movs	r3, #1
 80190b0:	e7f2      	b.n	8019098 <_vfiprintf_r+0x290>
 80190b2:	cd08      	ldmia	r5!, {r3}
 80190b4:	9309      	str	r3, [sp, #36]	; 0x24
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	daf7      	bge.n	80190aa <_vfiprintf_r+0x2a2>
 80190ba:	425b      	negs	r3, r3
 80190bc:	9309      	str	r3, [sp, #36]	; 0x24
 80190be:	2304      	movs	r3, #4
 80190c0:	e7ea      	b.n	8019098 <_vfiprintf_r+0x290>
 80190c2:	222b      	movs	r2, #43	; 0x2b
 80190c4:	ab14      	add	r3, sp, #80	; 0x50
 80190c6:	70da      	strb	r2, [r3, #3]
 80190c8:	e7ef      	b.n	80190aa <_vfiprintf_r+0x2a2>
 80190ca:	9b07      	ldr	r3, [sp, #28]
 80190cc:	1c5a      	adds	r2, r3, #1
 80190ce:	781b      	ldrb	r3, [r3, #0]
 80190d0:	2b2a      	cmp	r3, #42	; 0x2a
 80190d2:	d015      	beq.n	8019100 <_vfiprintf_r+0x2f8>
 80190d4:	2100      	movs	r1, #0
 80190d6:	9105      	str	r1, [sp, #20]
 80190d8:	0019      	movs	r1, r3
 80190da:	3930      	subs	r1, #48	; 0x30
 80190dc:	9207      	str	r2, [sp, #28]
 80190de:	2909      	cmp	r1, #9
 80190e0:	d900      	bls.n	80190e4 <_vfiprintf_r+0x2dc>
 80190e2:	e73c      	b.n	8018f5e <_vfiprintf_r+0x156>
 80190e4:	230a      	movs	r3, #10
 80190e6:	9805      	ldr	r0, [sp, #20]
 80190e8:	4358      	muls	r0, r3
 80190ea:	1843      	adds	r3, r0, r1
 80190ec:	9305      	str	r3, [sp, #20]
 80190ee:	7813      	ldrb	r3, [r2, #0]
 80190f0:	3201      	adds	r2, #1
 80190f2:	e7f1      	b.n	80190d8 <_vfiprintf_r+0x2d0>
 80190f4:	ffffdfff 	.word	0xffffdfff
 80190f8:	0801da00 	.word	0x0801da00
 80190fc:	fffffbff 	.word	0xfffffbff
 8019100:	cd08      	ldmia	r5!, {r3}
 8019102:	9305      	str	r3, [sp, #20]
 8019104:	2b00      	cmp	r3, #0
 8019106:	da02      	bge.n	801910e <_vfiprintf_r+0x306>
 8019108:	2301      	movs	r3, #1
 801910a:	425b      	negs	r3, r3
 801910c:	9305      	str	r3, [sp, #20]
 801910e:	9207      	str	r2, [sp, #28]
 8019110:	e7cb      	b.n	80190aa <_vfiprintf_r+0x2a2>
 8019112:	2380      	movs	r3, #128	; 0x80
 8019114:	e7c0      	b.n	8019098 <_vfiprintf_r+0x290>
 8019116:	2100      	movs	r1, #0
 8019118:	9a07      	ldr	r2, [sp, #28]
 801911a:	9109      	str	r1, [sp, #36]	; 0x24
 801911c:	200a      	movs	r0, #10
 801911e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019120:	3b30      	subs	r3, #48	; 0x30
 8019122:	4341      	muls	r1, r0
 8019124:	185b      	adds	r3, r3, r1
 8019126:	9309      	str	r3, [sp, #36]	; 0x24
 8019128:	0013      	movs	r3, r2
 801912a:	781b      	ldrb	r3, [r3, #0]
 801912c:	3201      	adds	r2, #1
 801912e:	0019      	movs	r1, r3
 8019130:	3930      	subs	r1, #48	; 0x30
 8019132:	9207      	str	r2, [sp, #28]
 8019134:	2909      	cmp	r1, #9
 8019136:	d9f1      	bls.n	801911c <_vfiprintf_r+0x314>
 8019138:	e711      	b.n	8018f5e <_vfiprintf_r+0x156>
 801913a:	9b07      	ldr	r3, [sp, #28]
 801913c:	781b      	ldrb	r3, [r3, #0]
 801913e:	2b68      	cmp	r3, #104	; 0x68
 8019140:	d105      	bne.n	801914e <_vfiprintf_r+0x346>
 8019142:	9b07      	ldr	r3, [sp, #28]
 8019144:	3301      	adds	r3, #1
 8019146:	9307      	str	r3, [sp, #28]
 8019148:	2380      	movs	r3, #128	; 0x80
 801914a:	009b      	lsls	r3, r3, #2
 801914c:	e7a4      	b.n	8019098 <_vfiprintf_r+0x290>
 801914e:	2340      	movs	r3, #64	; 0x40
 8019150:	e7a2      	b.n	8019098 <_vfiprintf_r+0x290>
 8019152:	9b07      	ldr	r3, [sp, #28]
 8019154:	781b      	ldrb	r3, [r3, #0]
 8019156:	2b6c      	cmp	r3, #108	; 0x6c
 8019158:	d104      	bne.n	8019164 <_vfiprintf_r+0x35c>
 801915a:	9b07      	ldr	r3, [sp, #28]
 801915c:	3301      	adds	r3, #1
 801915e:	9307      	str	r3, [sp, #28]
 8019160:	2320      	movs	r3, #32
 8019162:	e799      	b.n	8019098 <_vfiprintf_r+0x290>
 8019164:	2310      	movs	r3, #16
 8019166:	e797      	b.n	8019098 <_vfiprintf_r+0x290>
 8019168:	9504      	str	r5, [sp, #16]
 801916a:	9a04      	ldr	r2, [sp, #16]
 801916c:	ad29      	add	r5, sp, #164	; 0xa4
 801916e:	ca08      	ldmia	r2!, {r3}
 8019170:	9204      	str	r2, [sp, #16]
 8019172:	2200      	movs	r2, #0
 8019174:	702b      	strb	r3, [r5, #0]
 8019176:	ab14      	add	r3, sp, #80	; 0x50
 8019178:	70da      	strb	r2, [r3, #3]
 801917a:	2301      	movs	r3, #1
 801917c:	920b      	str	r2, [sp, #44]	; 0x2c
 801917e:	9305      	str	r3, [sp, #20]
 8019180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019182:	9a05      	ldr	r2, [sp, #20]
 8019184:	930a      	str	r3, [sp, #40]	; 0x28
 8019186:	4293      	cmp	r3, r2
 8019188:	da00      	bge.n	801918c <_vfiprintf_r+0x384>
 801918a:	920a      	str	r2, [sp, #40]	; 0x28
 801918c:	ab14      	add	r3, sp, #80	; 0x50
 801918e:	3303      	adds	r3, #3
 8019190:	781b      	ldrb	r3, [r3, #0]
 8019192:	1e5a      	subs	r2, r3, #1
 8019194:	4193      	sbcs	r3, r2
 8019196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019198:	18d3      	adds	r3, r2, r3
 801919a:	930a      	str	r3, [sp, #40]	; 0x28
 801919c:	0022      	movs	r2, r4
 801919e:	2302      	movs	r3, #2
 80191a0:	401a      	ands	r2, r3
 80191a2:	9210      	str	r2, [sp, #64]	; 0x40
 80191a4:	421c      	tst	r4, r3
 80191a6:	d002      	beq.n	80191ae <_vfiprintf_r+0x3a6>
 80191a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191aa:	3302      	adds	r3, #2
 80191ac:	930a      	str	r3, [sp, #40]	; 0x28
 80191ae:	2384      	movs	r3, #132	; 0x84
 80191b0:	0022      	movs	r2, r4
 80191b2:	401a      	ands	r2, r3
 80191b4:	9211      	str	r2, [sp, #68]	; 0x44
 80191b6:	421c      	tst	r4, r3
 80191b8:	d11f      	bne.n	80191fa <_vfiprintf_r+0x3f2>
 80191ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80191be:	1a9b      	subs	r3, r3, r2
 80191c0:	1e1e      	subs	r6, r3, #0
 80191c2:	dd1a      	ble.n	80191fa <_vfiprintf_r+0x3f2>
 80191c4:	0039      	movs	r1, r7
 80191c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80191c8:	48c9      	ldr	r0, [pc, #804]	; (80194f0 <_vfiprintf_r+0x6e8>)
 80191ca:	9312      	str	r3, [sp, #72]	; 0x48
 80191cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80191ce:	3301      	adds	r3, #1
 80191d0:	3108      	adds	r1, #8
 80191d2:	6038      	str	r0, [r7, #0]
 80191d4:	2e10      	cmp	r6, #16
 80191d6:	dd00      	ble.n	80191da <_vfiprintf_r+0x3d2>
 80191d8:	e251      	b.n	801967e <_vfiprintf_r+0x876>
 80191da:	18b2      	adds	r2, r6, r2
 80191dc:	607e      	str	r6, [r7, #4]
 80191de:	9218      	str	r2, [sp, #96]	; 0x60
 80191e0:	000f      	movs	r7, r1
 80191e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80191e4:	2b07      	cmp	r3, #7
 80191e6:	dd08      	ble.n	80191fa <_vfiprintf_r+0x3f2>
 80191e8:	9903      	ldr	r1, [sp, #12]
 80191ea:	9806      	ldr	r0, [sp, #24]
 80191ec:	aa16      	add	r2, sp, #88	; 0x58
 80191ee:	f7ff fdd7 	bl	8018da0 <__sprint_r>
 80191f2:	2800      	cmp	r0, #0
 80191f4:	d000      	beq.n	80191f8 <_vfiprintf_r+0x3f0>
 80191f6:	e29c      	b.n	8019732 <_vfiprintf_r+0x92a>
 80191f8:	af19      	add	r7, sp, #100	; 0x64
 80191fa:	ab14      	add	r3, sp, #80	; 0x50
 80191fc:	1cda      	adds	r2, r3, #3
 80191fe:	78db      	ldrb	r3, [r3, #3]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d017      	beq.n	8019234 <_vfiprintf_r+0x42c>
 8019204:	603a      	str	r2, [r7, #0]
 8019206:	2201      	movs	r2, #1
 8019208:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801920a:	607a      	str	r2, [r7, #4]
 801920c:	9312      	str	r3, [sp, #72]	; 0x48
 801920e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019212:	3201      	adds	r2, #1
 8019214:	9313      	str	r3, [sp, #76]	; 0x4c
 8019216:	3301      	adds	r3, #1
 8019218:	9218      	str	r2, [sp, #96]	; 0x60
 801921a:	9317      	str	r3, [sp, #92]	; 0x5c
 801921c:	3708      	adds	r7, #8
 801921e:	2b07      	cmp	r3, #7
 8019220:	dd08      	ble.n	8019234 <_vfiprintf_r+0x42c>
 8019222:	9903      	ldr	r1, [sp, #12]
 8019224:	9806      	ldr	r0, [sp, #24]
 8019226:	aa16      	add	r2, sp, #88	; 0x58
 8019228:	f7ff fdba 	bl	8018da0 <__sprint_r>
 801922c:	2800      	cmp	r0, #0
 801922e:	d000      	beq.n	8019232 <_vfiprintf_r+0x42a>
 8019230:	e27f      	b.n	8019732 <_vfiprintf_r+0x92a>
 8019232:	af19      	add	r7, sp, #100	; 0x64
 8019234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019236:	2b00      	cmp	r3, #0
 8019238:	d018      	beq.n	801926c <_vfiprintf_r+0x464>
 801923a:	aa15      	add	r2, sp, #84	; 0x54
 801923c:	603a      	str	r2, [r7, #0]
 801923e:	2202      	movs	r2, #2
 8019240:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019242:	607a      	str	r2, [r7, #4]
 8019244:	9310      	str	r3, [sp, #64]	; 0x40
 8019246:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019248:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801924a:	3202      	adds	r2, #2
 801924c:	9312      	str	r3, [sp, #72]	; 0x48
 801924e:	3301      	adds	r3, #1
 8019250:	9218      	str	r2, [sp, #96]	; 0x60
 8019252:	9317      	str	r3, [sp, #92]	; 0x5c
 8019254:	3708      	adds	r7, #8
 8019256:	2b07      	cmp	r3, #7
 8019258:	dd08      	ble.n	801926c <_vfiprintf_r+0x464>
 801925a:	9903      	ldr	r1, [sp, #12]
 801925c:	9806      	ldr	r0, [sp, #24]
 801925e:	aa16      	add	r2, sp, #88	; 0x58
 8019260:	f7ff fd9e 	bl	8018da0 <__sprint_r>
 8019264:	2800      	cmp	r0, #0
 8019266:	d000      	beq.n	801926a <_vfiprintf_r+0x462>
 8019268:	e263      	b.n	8019732 <_vfiprintf_r+0x92a>
 801926a:	af19      	add	r7, sp, #100	; 0x64
 801926c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801926e:	2b80      	cmp	r3, #128	; 0x80
 8019270:	d11f      	bne.n	80192b2 <_vfiprintf_r+0x4aa>
 8019272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019276:	1a9b      	subs	r3, r3, r2
 8019278:	1e1e      	subs	r6, r3, #0
 801927a:	dd1a      	ble.n	80192b2 <_vfiprintf_r+0x4aa>
 801927c:	0039      	movs	r1, r7
 801927e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019280:	489c      	ldr	r0, [pc, #624]	; (80194f4 <_vfiprintf_r+0x6ec>)
 8019282:	9310      	str	r3, [sp, #64]	; 0x40
 8019284:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019286:	3301      	adds	r3, #1
 8019288:	3108      	adds	r1, #8
 801928a:	6038      	str	r0, [r7, #0]
 801928c:	2e10      	cmp	r6, #16
 801928e:	dd00      	ble.n	8019292 <_vfiprintf_r+0x48a>
 8019290:	e209      	b.n	80196a6 <_vfiprintf_r+0x89e>
 8019292:	18b2      	adds	r2, r6, r2
 8019294:	607e      	str	r6, [r7, #4]
 8019296:	9218      	str	r2, [sp, #96]	; 0x60
 8019298:	000f      	movs	r7, r1
 801929a:	9317      	str	r3, [sp, #92]	; 0x5c
 801929c:	2b07      	cmp	r3, #7
 801929e:	dd08      	ble.n	80192b2 <_vfiprintf_r+0x4aa>
 80192a0:	9903      	ldr	r1, [sp, #12]
 80192a2:	9806      	ldr	r0, [sp, #24]
 80192a4:	aa16      	add	r2, sp, #88	; 0x58
 80192a6:	f7ff fd7b 	bl	8018da0 <__sprint_r>
 80192aa:	2800      	cmp	r0, #0
 80192ac:	d000      	beq.n	80192b0 <_vfiprintf_r+0x4a8>
 80192ae:	e240      	b.n	8019732 <_vfiprintf_r+0x92a>
 80192b0:	af19      	add	r7, sp, #100	; 0x64
 80192b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80192b4:	9a05      	ldr	r2, [sp, #20]
 80192b6:	1a9b      	subs	r3, r3, r2
 80192b8:	1e1e      	subs	r6, r3, #0
 80192ba:	dd1a      	ble.n	80192f2 <_vfiprintf_r+0x4ea>
 80192bc:	0039      	movs	r1, r7
 80192be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80192c0:	488c      	ldr	r0, [pc, #560]	; (80194f4 <_vfiprintf_r+0x6ec>)
 80192c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80192c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80192c6:	3301      	adds	r3, #1
 80192c8:	3108      	adds	r1, #8
 80192ca:	6038      	str	r0, [r7, #0]
 80192cc:	2e10      	cmp	r6, #16
 80192ce:	dd00      	ble.n	80192d2 <_vfiprintf_r+0x4ca>
 80192d0:	e1fd      	b.n	80196ce <_vfiprintf_r+0x8c6>
 80192d2:	18b2      	adds	r2, r6, r2
 80192d4:	607e      	str	r6, [r7, #4]
 80192d6:	9218      	str	r2, [sp, #96]	; 0x60
 80192d8:	000f      	movs	r7, r1
 80192da:	9317      	str	r3, [sp, #92]	; 0x5c
 80192dc:	2b07      	cmp	r3, #7
 80192de:	dd08      	ble.n	80192f2 <_vfiprintf_r+0x4ea>
 80192e0:	9903      	ldr	r1, [sp, #12]
 80192e2:	9806      	ldr	r0, [sp, #24]
 80192e4:	aa16      	add	r2, sp, #88	; 0x58
 80192e6:	f7ff fd5b 	bl	8018da0 <__sprint_r>
 80192ea:	2800      	cmp	r0, #0
 80192ec:	d000      	beq.n	80192f0 <_vfiprintf_r+0x4e8>
 80192ee:	e220      	b.n	8019732 <_vfiprintf_r+0x92a>
 80192f0:	af19      	add	r7, sp, #100	; 0x64
 80192f2:	9b05      	ldr	r3, [sp, #20]
 80192f4:	603d      	str	r5, [r7, #0]
 80192f6:	607b      	str	r3, [r7, #4]
 80192f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80192fa:	3708      	adds	r7, #8
 80192fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80192fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019300:	9b05      	ldr	r3, [sp, #20]
 8019302:	4694      	mov	ip, r2
 8019304:	4463      	add	r3, ip
 8019306:	9318      	str	r3, [sp, #96]	; 0x60
 8019308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801930a:	9305      	str	r3, [sp, #20]
 801930c:	3301      	adds	r3, #1
 801930e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019310:	2b07      	cmp	r3, #7
 8019312:	dd08      	ble.n	8019326 <_vfiprintf_r+0x51e>
 8019314:	9903      	ldr	r1, [sp, #12]
 8019316:	9806      	ldr	r0, [sp, #24]
 8019318:	aa16      	add	r2, sp, #88	; 0x58
 801931a:	f7ff fd41 	bl	8018da0 <__sprint_r>
 801931e:	2800      	cmp	r0, #0
 8019320:	d000      	beq.n	8019324 <_vfiprintf_r+0x51c>
 8019322:	e206      	b.n	8019732 <_vfiprintf_r+0x92a>
 8019324:	af19      	add	r7, sp, #100	; 0x64
 8019326:	0763      	lsls	r3, r4, #29
 8019328:	d500      	bpl.n	801932c <_vfiprintf_r+0x524>
 801932a:	e1e4      	b.n	80196f6 <_vfiprintf_r+0x8ee>
 801932c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801932e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019330:	4293      	cmp	r3, r2
 8019332:	da00      	bge.n	8019336 <_vfiprintf_r+0x52e>
 8019334:	0013      	movs	r3, r2
 8019336:	9a08      	ldr	r2, [sp, #32]
 8019338:	18d3      	adds	r3, r2, r3
 801933a:	9308      	str	r3, [sp, #32]
 801933c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801933e:	9305      	str	r3, [sp, #20]
 8019340:	2b00      	cmp	r3, #0
 8019342:	d007      	beq.n	8019354 <_vfiprintf_r+0x54c>
 8019344:	9903      	ldr	r1, [sp, #12]
 8019346:	9806      	ldr	r0, [sp, #24]
 8019348:	aa16      	add	r2, sp, #88	; 0x58
 801934a:	f7ff fd29 	bl	8018da0 <__sprint_r>
 801934e:	2800      	cmp	r0, #0
 8019350:	d000      	beq.n	8019354 <_vfiprintf_r+0x54c>
 8019352:	e1ee      	b.n	8019732 <_vfiprintf_r+0x92a>
 8019354:	2300      	movs	r3, #0
 8019356:	9d04      	ldr	r5, [sp, #16]
 8019358:	9317      	str	r3, [sp, #92]	; 0x5c
 801935a:	af19      	add	r7, sp, #100	; 0x64
 801935c:	e5c6      	b.n	8018eec <_vfiprintf_r+0xe4>
 801935e:	2310      	movs	r3, #16
 8019360:	431c      	orrs	r4, r3
 8019362:	06a3      	lsls	r3, r4, #26
 8019364:	d52b      	bpl.n	80193be <_vfiprintf_r+0x5b6>
 8019366:	2307      	movs	r3, #7
 8019368:	3507      	adds	r5, #7
 801936a:	439d      	bics	r5, r3
 801936c:	0029      	movs	r1, r5
 801936e:	c90c      	ldmia	r1!, {r2, r3}
 8019370:	9200      	str	r2, [sp, #0]
 8019372:	9301      	str	r3, [sp, #4]
 8019374:	9104      	str	r1, [sp, #16]
 8019376:	9a01      	ldr	r2, [sp, #4]
 8019378:	2301      	movs	r3, #1
 801937a:	2a00      	cmp	r2, #0
 801937c:	da09      	bge.n	8019392 <_vfiprintf_r+0x58a>
 801937e:	9d00      	ldr	r5, [sp, #0]
 8019380:	9e01      	ldr	r6, [sp, #4]
 8019382:	2200      	movs	r2, #0
 8019384:	4269      	negs	r1, r5
 8019386:	41b2      	sbcs	r2, r6
 8019388:	9100      	str	r1, [sp, #0]
 801938a:	9201      	str	r2, [sp, #4]
 801938c:	212d      	movs	r1, #45	; 0x2d
 801938e:	aa14      	add	r2, sp, #80	; 0x50
 8019390:	70d1      	strb	r1, [r2, #3]
 8019392:	9901      	ldr	r1, [sp, #4]
 8019394:	9a00      	ldr	r2, [sp, #0]
 8019396:	430a      	orrs	r2, r1
 8019398:	9905      	ldr	r1, [sp, #20]
 801939a:	3101      	adds	r1, #1
 801939c:	d100      	bne.n	80193a0 <_vfiprintf_r+0x598>
 801939e:	e1fc      	b.n	801979a <_vfiprintf_r+0x992>
 80193a0:	2180      	movs	r1, #128	; 0x80
 80193a2:	0020      	movs	r0, r4
 80193a4:	4388      	bics	r0, r1
 80193a6:	0006      	movs	r6, r0
 80193a8:	2a00      	cmp	r2, #0
 80193aa:	d000      	beq.n	80193ae <_vfiprintf_r+0x5a6>
 80193ac:	e1f9      	b.n	80197a2 <_vfiprintf_r+0x99a>
 80193ae:	9a05      	ldr	r2, [sp, #20]
 80193b0:	2a00      	cmp	r2, #0
 80193b2:	d100      	bne.n	80193b6 <_vfiprintf_r+0x5ae>
 80193b4:	e149      	b.n	801964a <_vfiprintf_r+0x842>
 80193b6:	2b01      	cmp	r3, #1
 80193b8:	d000      	beq.n	80193bc <_vfiprintf_r+0x5b4>
 80193ba:	e1f5      	b.n	80197a8 <_vfiprintf_r+0x9a0>
 80193bc:	e0ea      	b.n	8019594 <_vfiprintf_r+0x78c>
 80193be:	1d2b      	adds	r3, r5, #4
 80193c0:	9304      	str	r3, [sp, #16]
 80193c2:	06e3      	lsls	r3, r4, #27
 80193c4:	d504      	bpl.n	80193d0 <_vfiprintf_r+0x5c8>
 80193c6:	682b      	ldr	r3, [r5, #0]
 80193c8:	9300      	str	r3, [sp, #0]
 80193ca:	17db      	asrs	r3, r3, #31
 80193cc:	9301      	str	r3, [sp, #4]
 80193ce:	e7d2      	b.n	8019376 <_vfiprintf_r+0x56e>
 80193d0:	682b      	ldr	r3, [r5, #0]
 80193d2:	0662      	lsls	r2, r4, #25
 80193d4:	d501      	bpl.n	80193da <_vfiprintf_r+0x5d2>
 80193d6:	b21b      	sxth	r3, r3
 80193d8:	e7f6      	b.n	80193c8 <_vfiprintf_r+0x5c0>
 80193da:	05a2      	lsls	r2, r4, #22
 80193dc:	d5f4      	bpl.n	80193c8 <_vfiprintf_r+0x5c0>
 80193de:	b25b      	sxtb	r3, r3
 80193e0:	e7f2      	b.n	80193c8 <_vfiprintf_r+0x5c0>
 80193e2:	cd08      	ldmia	r5!, {r3}
 80193e4:	06a2      	lsls	r2, r4, #26
 80193e6:	d504      	bpl.n	80193f2 <_vfiprintf_r+0x5ea>
 80193e8:	9a08      	ldr	r2, [sp, #32]
 80193ea:	601a      	str	r2, [r3, #0]
 80193ec:	17d2      	asrs	r2, r2, #31
 80193ee:	605a      	str	r2, [r3, #4]
 80193f0:	e57c      	b.n	8018eec <_vfiprintf_r+0xe4>
 80193f2:	06e2      	lsls	r2, r4, #27
 80193f4:	d502      	bpl.n	80193fc <_vfiprintf_r+0x5f4>
 80193f6:	9a08      	ldr	r2, [sp, #32]
 80193f8:	601a      	str	r2, [r3, #0]
 80193fa:	e577      	b.n	8018eec <_vfiprintf_r+0xe4>
 80193fc:	0662      	lsls	r2, r4, #25
 80193fe:	d502      	bpl.n	8019406 <_vfiprintf_r+0x5fe>
 8019400:	9a08      	ldr	r2, [sp, #32]
 8019402:	801a      	strh	r2, [r3, #0]
 8019404:	e572      	b.n	8018eec <_vfiprintf_r+0xe4>
 8019406:	05a2      	lsls	r2, r4, #22
 8019408:	d5f5      	bpl.n	80193f6 <_vfiprintf_r+0x5ee>
 801940a:	9a08      	ldr	r2, [sp, #32]
 801940c:	701a      	strb	r2, [r3, #0]
 801940e:	e56d      	b.n	8018eec <_vfiprintf_r+0xe4>
 8019410:	2310      	movs	r3, #16
 8019412:	431c      	orrs	r4, r3
 8019414:	2320      	movs	r3, #32
 8019416:	0021      	movs	r1, r4
 8019418:	4019      	ands	r1, r3
 801941a:	421c      	tst	r4, r3
 801941c:	d00d      	beq.n	801943a <_vfiprintf_r+0x632>
 801941e:	3b19      	subs	r3, #25
 8019420:	3507      	adds	r5, #7
 8019422:	439d      	bics	r5, r3
 8019424:	0029      	movs	r1, r5
 8019426:	c90c      	ldmia	r1!, {r2, r3}
 8019428:	9200      	str	r2, [sp, #0]
 801942a:	9301      	str	r3, [sp, #4]
 801942c:	9104      	str	r1, [sp, #16]
 801942e:	4b32      	ldr	r3, [pc, #200]	; (80194f8 <_vfiprintf_r+0x6f0>)
 8019430:	401c      	ands	r4, r3
 8019432:	2300      	movs	r3, #0
 8019434:	2100      	movs	r1, #0
 8019436:	aa14      	add	r2, sp, #80	; 0x50
 8019438:	e7aa      	b.n	8019390 <_vfiprintf_r+0x588>
 801943a:	1d2b      	adds	r3, r5, #4
 801943c:	0022      	movs	r2, r4
 801943e:	9304      	str	r3, [sp, #16]
 8019440:	2310      	movs	r3, #16
 8019442:	401a      	ands	r2, r3
 8019444:	421c      	tst	r4, r3
 8019446:	d003      	beq.n	8019450 <_vfiprintf_r+0x648>
 8019448:	682b      	ldr	r3, [r5, #0]
 801944a:	9300      	str	r3, [sp, #0]
 801944c:	9101      	str	r1, [sp, #4]
 801944e:	e7ee      	b.n	801942e <_vfiprintf_r+0x626>
 8019450:	2340      	movs	r3, #64	; 0x40
 8019452:	0021      	movs	r1, r4
 8019454:	4019      	ands	r1, r3
 8019456:	421c      	tst	r4, r3
 8019458:	d004      	beq.n	8019464 <_vfiprintf_r+0x65c>
 801945a:	682b      	ldr	r3, [r5, #0]
 801945c:	b29b      	uxth	r3, r3
 801945e:	9300      	str	r3, [sp, #0]
 8019460:	9201      	str	r2, [sp, #4]
 8019462:	e7e4      	b.n	801942e <_vfiprintf_r+0x626>
 8019464:	2380      	movs	r3, #128	; 0x80
 8019466:	0022      	movs	r2, r4
 8019468:	009b      	lsls	r3, r3, #2
 801946a:	401a      	ands	r2, r3
 801946c:	421c      	tst	r4, r3
 801946e:	d002      	beq.n	8019476 <_vfiprintf_r+0x66e>
 8019470:	682b      	ldr	r3, [r5, #0]
 8019472:	b2db      	uxtb	r3, r3
 8019474:	e7e9      	b.n	801944a <_vfiprintf_r+0x642>
 8019476:	682b      	ldr	r3, [r5, #0]
 8019478:	e7f1      	b.n	801945e <_vfiprintf_r+0x656>
 801947a:	002b      	movs	r3, r5
 801947c:	cb04      	ldmia	r3!, {r2}
 801947e:	491f      	ldr	r1, [pc, #124]	; (80194fc <_vfiprintf_r+0x6f4>)
 8019480:	9304      	str	r3, [sp, #16]
 8019482:	2300      	movs	r3, #0
 8019484:	9200      	str	r2, [sp, #0]
 8019486:	aa15      	add	r2, sp, #84	; 0x54
 8019488:	8011      	strh	r1, [r2, #0]
 801948a:	4a1d      	ldr	r2, [pc, #116]	; (8019500 <_vfiprintf_r+0x6f8>)
 801948c:	9301      	str	r3, [sp, #4]
 801948e:	3302      	adds	r3, #2
 8019490:	431c      	orrs	r4, r3
 8019492:	920c      	str	r2, [sp, #48]	; 0x30
 8019494:	e7ce      	b.n	8019434 <_vfiprintf_r+0x62c>
 8019496:	002b      	movs	r3, r5
 8019498:	2200      	movs	r2, #0
 801949a:	cb20      	ldmia	r3!, {r5}
 801949c:	9304      	str	r3, [sp, #16]
 801949e:	ab14      	add	r3, sp, #80	; 0x50
 80194a0:	70da      	strb	r2, [r3, #3]
 80194a2:	9b05      	ldr	r3, [sp, #20]
 80194a4:	3301      	adds	r3, #1
 80194a6:	d00d      	beq.n	80194c4 <_vfiprintf_r+0x6bc>
 80194a8:	2100      	movs	r1, #0
 80194aa:	0028      	movs	r0, r5
 80194ac:	9a05      	ldr	r2, [sp, #20]
 80194ae:	f7fe fe7d 	bl	80181ac <memchr>
 80194b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80194b4:	2800      	cmp	r0, #0
 80194b6:	d100      	bne.n	80194ba <_vfiprintf_r+0x6b2>
 80194b8:	e662      	b.n	8019180 <_vfiprintf_r+0x378>
 80194ba:	1b43      	subs	r3, r0, r5
 80194bc:	9305      	str	r3, [sp, #20]
 80194be:	2300      	movs	r3, #0
 80194c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80194c2:	e65d      	b.n	8019180 <_vfiprintf_r+0x378>
 80194c4:	0028      	movs	r0, r5
 80194c6:	f7e6 fe27 	bl	8000118 <strlen>
 80194ca:	9005      	str	r0, [sp, #20]
 80194cc:	e7f7      	b.n	80194be <_vfiprintf_r+0x6b6>
 80194ce:	2310      	movs	r3, #16
 80194d0:	431c      	orrs	r4, r3
 80194d2:	2320      	movs	r3, #32
 80194d4:	0021      	movs	r1, r4
 80194d6:	4019      	ands	r1, r3
 80194d8:	421c      	tst	r4, r3
 80194da:	d013      	beq.n	8019504 <_vfiprintf_r+0x6fc>
 80194dc:	3b19      	subs	r3, #25
 80194de:	3507      	adds	r5, #7
 80194e0:	439d      	bics	r5, r3
 80194e2:	0029      	movs	r1, r5
 80194e4:	c90c      	ldmia	r1!, {r2, r3}
 80194e6:	9200      	str	r2, [sp, #0]
 80194e8:	9301      	str	r3, [sp, #4]
 80194ea:	9104      	str	r1, [sp, #16]
 80194ec:	2301      	movs	r3, #1
 80194ee:	e7a1      	b.n	8019434 <_vfiprintf_r+0x62c>
 80194f0:	0801dcd8 	.word	0x0801dcd8
 80194f4:	0801dce8 	.word	0x0801dce8
 80194f8:	fffffbff 	.word	0xfffffbff
 80194fc:	00007830 	.word	0x00007830
 8019500:	0801da00 	.word	0x0801da00
 8019504:	1d2b      	adds	r3, r5, #4
 8019506:	0022      	movs	r2, r4
 8019508:	9304      	str	r3, [sp, #16]
 801950a:	2310      	movs	r3, #16
 801950c:	401a      	ands	r2, r3
 801950e:	421c      	tst	r4, r3
 8019510:	d003      	beq.n	801951a <_vfiprintf_r+0x712>
 8019512:	682b      	ldr	r3, [r5, #0]
 8019514:	9300      	str	r3, [sp, #0]
 8019516:	9101      	str	r1, [sp, #4]
 8019518:	e7e8      	b.n	80194ec <_vfiprintf_r+0x6e4>
 801951a:	2340      	movs	r3, #64	; 0x40
 801951c:	0021      	movs	r1, r4
 801951e:	4019      	ands	r1, r3
 8019520:	421c      	tst	r4, r3
 8019522:	d004      	beq.n	801952e <_vfiprintf_r+0x726>
 8019524:	682b      	ldr	r3, [r5, #0]
 8019526:	b29b      	uxth	r3, r3
 8019528:	9300      	str	r3, [sp, #0]
 801952a:	9201      	str	r2, [sp, #4]
 801952c:	e7de      	b.n	80194ec <_vfiprintf_r+0x6e4>
 801952e:	2380      	movs	r3, #128	; 0x80
 8019530:	0022      	movs	r2, r4
 8019532:	009b      	lsls	r3, r3, #2
 8019534:	401a      	ands	r2, r3
 8019536:	421c      	tst	r4, r3
 8019538:	d002      	beq.n	8019540 <_vfiprintf_r+0x738>
 801953a:	682b      	ldr	r3, [r5, #0]
 801953c:	b2db      	uxtb	r3, r3
 801953e:	e7e9      	b.n	8019514 <_vfiprintf_r+0x70c>
 8019540:	682b      	ldr	r3, [r5, #0]
 8019542:	e7f1      	b.n	8019528 <_vfiprintf_r+0x720>
 8019544:	4aad      	ldr	r2, [pc, #692]	; (80197fc <_vfiprintf_r+0x9f4>)
 8019546:	e56f      	b.n	8019028 <_vfiprintf_r+0x220>
 8019548:	1d2a      	adds	r2, r5, #4
 801954a:	0021      	movs	r1, r4
 801954c:	9204      	str	r2, [sp, #16]
 801954e:	2210      	movs	r2, #16
 8019550:	4011      	ands	r1, r2
 8019552:	4214      	tst	r4, r2
 8019554:	d003      	beq.n	801955e <_vfiprintf_r+0x756>
 8019556:	682a      	ldr	r2, [r5, #0]
 8019558:	9200      	str	r2, [sp, #0]
 801955a:	9001      	str	r0, [sp, #4]
 801955c:	e573      	b.n	8019046 <_vfiprintf_r+0x23e>
 801955e:	2240      	movs	r2, #64	; 0x40
 8019560:	0020      	movs	r0, r4
 8019562:	4010      	ands	r0, r2
 8019564:	4214      	tst	r4, r2
 8019566:	d004      	beq.n	8019572 <_vfiprintf_r+0x76a>
 8019568:	682a      	ldr	r2, [r5, #0]
 801956a:	b292      	uxth	r2, r2
 801956c:	9200      	str	r2, [sp, #0]
 801956e:	9101      	str	r1, [sp, #4]
 8019570:	e569      	b.n	8019046 <_vfiprintf_r+0x23e>
 8019572:	2280      	movs	r2, #128	; 0x80
 8019574:	0021      	movs	r1, r4
 8019576:	0092      	lsls	r2, r2, #2
 8019578:	4011      	ands	r1, r2
 801957a:	4214      	tst	r4, r2
 801957c:	d002      	beq.n	8019584 <_vfiprintf_r+0x77c>
 801957e:	682a      	ldr	r2, [r5, #0]
 8019580:	b2d2      	uxtb	r2, r2
 8019582:	e7e9      	b.n	8019558 <_vfiprintf_r+0x750>
 8019584:	682a      	ldr	r2, [r5, #0]
 8019586:	e7f1      	b.n	801956c <_vfiprintf_r+0x764>
 8019588:	9b01      	ldr	r3, [sp, #4]
 801958a:	2b00      	cmp	r3, #0
 801958c:	d109      	bne.n	80195a2 <_vfiprintf_r+0x79a>
 801958e:	9b00      	ldr	r3, [sp, #0]
 8019590:	2b09      	cmp	r3, #9
 8019592:	d806      	bhi.n	80195a2 <_vfiprintf_r+0x79a>
 8019594:	25b7      	movs	r5, #183	; 0xb7
 8019596:	ab14      	add	r3, sp, #80	; 0x50
 8019598:	18ed      	adds	r5, r5, r3
 801959a:	9b00      	ldr	r3, [sp, #0]
 801959c:	3330      	adds	r3, #48	; 0x30
 801959e:	702b      	strb	r3, [r5, #0]
 80195a0:	e125      	b.n	80197ee <_vfiprintf_r+0x9e6>
 80195a2:	2380      	movs	r3, #128	; 0x80
 80195a4:	0032      	movs	r2, r6
 80195a6:	2400      	movs	r4, #0
 80195a8:	00db      	lsls	r3, r3, #3
 80195aa:	401a      	ands	r2, r3
 80195ac:	ad42      	add	r5, sp, #264	; 0x108
 80195ae:	920a      	str	r2, [sp, #40]	; 0x28
 80195b0:	220a      	movs	r2, #10
 80195b2:	9800      	ldr	r0, [sp, #0]
 80195b4:	9901      	ldr	r1, [sp, #4]
 80195b6:	2300      	movs	r3, #0
 80195b8:	f7e6 ffb8 	bl	800052c <__aeabi_uldivmod>
 80195bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195be:	3d01      	subs	r5, #1
 80195c0:	3230      	adds	r2, #48	; 0x30
 80195c2:	702a      	strb	r2, [r5, #0]
 80195c4:	3401      	adds	r4, #1
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d01a      	beq.n	8019600 <_vfiprintf_r+0x7f8>
 80195ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195cc:	781b      	ldrb	r3, [r3, #0]
 80195ce:	42a3      	cmp	r3, r4
 80195d0:	d116      	bne.n	8019600 <_vfiprintf_r+0x7f8>
 80195d2:	2cff      	cmp	r4, #255	; 0xff
 80195d4:	d014      	beq.n	8019600 <_vfiprintf_r+0x7f8>
 80195d6:	9b01      	ldr	r3, [sp, #4]
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d102      	bne.n	80195e2 <_vfiprintf_r+0x7da>
 80195dc:	9b00      	ldr	r3, [sp, #0]
 80195de:	2b09      	cmp	r3, #9
 80195e0:	d90e      	bls.n	8019600 <_vfiprintf_r+0x7f8>
 80195e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80195e6:	1aed      	subs	r5, r5, r3
 80195e8:	001a      	movs	r2, r3
 80195ea:	0028      	movs	r0, r5
 80195ec:	f7fb f8e2 	bl	80147b4 <strncpy>
 80195f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195f2:	2400      	movs	r4, #0
 80195f4:	785b      	ldrb	r3, [r3, #1]
 80195f6:	1e5a      	subs	r2, r3, #1
 80195f8:	4193      	sbcs	r3, r2
 80195fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80195fc:	18d3      	adds	r3, r2, r3
 80195fe:	930d      	str	r3, [sp, #52]	; 0x34
 8019600:	2300      	movs	r3, #0
 8019602:	9800      	ldr	r0, [sp, #0]
 8019604:	9901      	ldr	r1, [sp, #4]
 8019606:	220a      	movs	r2, #10
 8019608:	f7e6 ff90 	bl	800052c <__aeabi_uldivmod>
 801960c:	9b01      	ldr	r3, [sp, #4]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d103      	bne.n	801961a <_vfiprintf_r+0x812>
 8019612:	9b00      	ldr	r3, [sp, #0]
 8019614:	2b09      	cmp	r3, #9
 8019616:	d800      	bhi.n	801961a <_vfiprintf_r+0x812>
 8019618:	e0e9      	b.n	80197ee <_vfiprintf_r+0x9e6>
 801961a:	9000      	str	r0, [sp, #0]
 801961c:	9101      	str	r1, [sp, #4]
 801961e:	e7c7      	b.n	80195b0 <_vfiprintf_r+0x7a8>
 8019620:	200f      	movs	r0, #15
 8019622:	9b00      	ldr	r3, [sp, #0]
 8019624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019626:	4003      	ands	r3, r0
 8019628:	5cd3      	ldrb	r3, [r2, r3]
 801962a:	3d01      	subs	r5, #1
 801962c:	702b      	strb	r3, [r5, #0]
 801962e:	9b01      	ldr	r3, [sp, #4]
 8019630:	0719      	lsls	r1, r3, #28
 8019632:	9b00      	ldr	r3, [sp, #0]
 8019634:	091a      	lsrs	r2, r3, #4
 8019636:	9b01      	ldr	r3, [sp, #4]
 8019638:	4311      	orrs	r1, r2
 801963a:	091b      	lsrs	r3, r3, #4
 801963c:	9301      	str	r3, [sp, #4]
 801963e:	000b      	movs	r3, r1
 8019640:	9a01      	ldr	r2, [sp, #4]
 8019642:	9100      	str	r1, [sp, #0]
 8019644:	4313      	orrs	r3, r2
 8019646:	d1ec      	bne.n	8019622 <_vfiprintf_r+0x81a>
 8019648:	e0d1      	b.n	80197ee <_vfiprintf_r+0x9e6>
 801964a:	ad42      	add	r5, sp, #264	; 0x108
 801964c:	2b00      	cmp	r3, #0
 801964e:	d000      	beq.n	8019652 <_vfiprintf_r+0x84a>
 8019650:	e0cd      	b.n	80197ee <_vfiprintf_r+0x9e6>
 8019652:	07e3      	lsls	r3, r4, #31
 8019654:	d400      	bmi.n	8019658 <_vfiprintf_r+0x850>
 8019656:	e0ca      	b.n	80197ee <_vfiprintf_r+0x9e6>
 8019658:	25b7      	movs	r5, #183	; 0xb7
 801965a:	ab14      	add	r3, sp, #80	; 0x50
 801965c:	18ed      	adds	r5, r5, r3
 801965e:	2330      	movs	r3, #48	; 0x30
 8019660:	e79d      	b.n	801959e <_vfiprintf_r+0x796>
 8019662:	2b00      	cmp	r3, #0
 8019664:	d100      	bne.n	8019668 <_vfiprintf_r+0x860>
 8019666:	e089      	b.n	801977c <_vfiprintf_r+0x974>
 8019668:	2100      	movs	r1, #0
 801966a:	aa29      	add	r2, sp, #164	; 0xa4
 801966c:	7013      	strb	r3, [r2, #0]
 801966e:	ab14      	add	r3, sp, #80	; 0x50
 8019670:	70d9      	strb	r1, [r3, #3]
 8019672:	2301      	movs	r3, #1
 8019674:	9504      	str	r5, [sp, #16]
 8019676:	9305      	str	r3, [sp, #20]
 8019678:	0015      	movs	r5, r2
 801967a:	910b      	str	r1, [sp, #44]	; 0x2c
 801967c:	e580      	b.n	8019180 <_vfiprintf_r+0x378>
 801967e:	2010      	movs	r0, #16
 8019680:	1812      	adds	r2, r2, r0
 8019682:	6078      	str	r0, [r7, #4]
 8019684:	9218      	str	r2, [sp, #96]	; 0x60
 8019686:	9317      	str	r3, [sp, #92]	; 0x5c
 8019688:	2b07      	cmp	r3, #7
 801968a:	dd07      	ble.n	801969c <_vfiprintf_r+0x894>
 801968c:	9903      	ldr	r1, [sp, #12]
 801968e:	9806      	ldr	r0, [sp, #24]
 8019690:	aa16      	add	r2, sp, #88	; 0x58
 8019692:	f7ff fb85 	bl	8018da0 <__sprint_r>
 8019696:	2800      	cmp	r0, #0
 8019698:	d14b      	bne.n	8019732 <_vfiprintf_r+0x92a>
 801969a:	a919      	add	r1, sp, #100	; 0x64
 801969c:	0033      	movs	r3, r6
 801969e:	3b10      	subs	r3, #16
 80196a0:	001e      	movs	r6, r3
 80196a2:	000f      	movs	r7, r1
 80196a4:	e58e      	b.n	80191c4 <_vfiprintf_r+0x3bc>
 80196a6:	2010      	movs	r0, #16
 80196a8:	1812      	adds	r2, r2, r0
 80196aa:	6078      	str	r0, [r7, #4]
 80196ac:	9218      	str	r2, [sp, #96]	; 0x60
 80196ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80196b0:	2b07      	cmp	r3, #7
 80196b2:	dd07      	ble.n	80196c4 <_vfiprintf_r+0x8bc>
 80196b4:	9903      	ldr	r1, [sp, #12]
 80196b6:	9806      	ldr	r0, [sp, #24]
 80196b8:	aa16      	add	r2, sp, #88	; 0x58
 80196ba:	f7ff fb71 	bl	8018da0 <__sprint_r>
 80196be:	2800      	cmp	r0, #0
 80196c0:	d137      	bne.n	8019732 <_vfiprintf_r+0x92a>
 80196c2:	a919      	add	r1, sp, #100	; 0x64
 80196c4:	0033      	movs	r3, r6
 80196c6:	3b10      	subs	r3, #16
 80196c8:	001e      	movs	r6, r3
 80196ca:	000f      	movs	r7, r1
 80196cc:	e5d6      	b.n	801927c <_vfiprintf_r+0x474>
 80196ce:	2010      	movs	r0, #16
 80196d0:	1812      	adds	r2, r2, r0
 80196d2:	6078      	str	r0, [r7, #4]
 80196d4:	9218      	str	r2, [sp, #96]	; 0x60
 80196d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80196d8:	2b07      	cmp	r3, #7
 80196da:	dd07      	ble.n	80196ec <_vfiprintf_r+0x8e4>
 80196dc:	9903      	ldr	r1, [sp, #12]
 80196de:	9806      	ldr	r0, [sp, #24]
 80196e0:	aa16      	add	r2, sp, #88	; 0x58
 80196e2:	f7ff fb5d 	bl	8018da0 <__sprint_r>
 80196e6:	2800      	cmp	r0, #0
 80196e8:	d123      	bne.n	8019732 <_vfiprintf_r+0x92a>
 80196ea:	a919      	add	r1, sp, #100	; 0x64
 80196ec:	0033      	movs	r3, r6
 80196ee:	3b10      	subs	r3, #16
 80196f0:	001e      	movs	r6, r3
 80196f2:	000f      	movs	r7, r1
 80196f4:	e5e2      	b.n	80192bc <_vfiprintf_r+0x4b4>
 80196f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196fa:	2510      	movs	r5, #16
 80196fc:	1a9c      	subs	r4, r3, r2
 80196fe:	2c00      	cmp	r4, #0
 8019700:	dc00      	bgt.n	8019704 <_vfiprintf_r+0x8fc>
 8019702:	e613      	b.n	801932c <_vfiprintf_r+0x524>
 8019704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019706:	483e      	ldr	r0, [pc, #248]	; (8019800 <_vfiprintf_r+0x9f8>)
 8019708:	9918      	ldr	r1, [sp, #96]	; 0x60
 801970a:	9305      	str	r3, [sp, #20]
 801970c:	1c5a      	adds	r2, r3, #1
 801970e:	6038      	str	r0, [r7, #0]
 8019710:	2c10      	cmp	r4, #16
 8019712:	dc22      	bgt.n	801975a <_vfiprintf_r+0x952>
 8019714:	607c      	str	r4, [r7, #4]
 8019716:	190c      	adds	r4, r1, r4
 8019718:	9418      	str	r4, [sp, #96]	; 0x60
 801971a:	9217      	str	r2, [sp, #92]	; 0x5c
 801971c:	2a07      	cmp	r2, #7
 801971e:	dc00      	bgt.n	8019722 <_vfiprintf_r+0x91a>
 8019720:	e604      	b.n	801932c <_vfiprintf_r+0x524>
 8019722:	9903      	ldr	r1, [sp, #12]
 8019724:	9806      	ldr	r0, [sp, #24]
 8019726:	aa16      	add	r2, sp, #88	; 0x58
 8019728:	f7ff fb3a 	bl	8018da0 <__sprint_r>
 801972c:	2800      	cmp	r0, #0
 801972e:	d100      	bne.n	8019732 <_vfiprintf_r+0x92a>
 8019730:	e5fc      	b.n	801932c <_vfiprintf_r+0x524>
 8019732:	9b03      	ldr	r3, [sp, #12]
 8019734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019736:	07db      	lsls	r3, r3, #31
 8019738:	d407      	bmi.n	801974a <_vfiprintf_r+0x942>
 801973a:	9b03      	ldr	r3, [sp, #12]
 801973c:	899b      	ldrh	r3, [r3, #12]
 801973e:	059b      	lsls	r3, r3, #22
 8019740:	d403      	bmi.n	801974a <_vfiprintf_r+0x942>
 8019742:	9b03      	ldr	r3, [sp, #12]
 8019744:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8019746:	f7fe fd1e 	bl	8018186 <__retarget_lock_release_recursive>
 801974a:	9b03      	ldr	r3, [sp, #12]
 801974c:	899b      	ldrh	r3, [r3, #12]
 801974e:	065b      	lsls	r3, r3, #25
 8019750:	d401      	bmi.n	8019756 <_vfiprintf_r+0x94e>
 8019752:	f7ff fb98 	bl	8018e86 <_vfiprintf_r+0x7e>
 8019756:	f7ff fb93 	bl	8018e80 <_vfiprintf_r+0x78>
 801975a:	3110      	adds	r1, #16
 801975c:	607d      	str	r5, [r7, #4]
 801975e:	9118      	str	r1, [sp, #96]	; 0x60
 8019760:	9217      	str	r2, [sp, #92]	; 0x5c
 8019762:	3708      	adds	r7, #8
 8019764:	2a07      	cmp	r2, #7
 8019766:	dd07      	ble.n	8019778 <_vfiprintf_r+0x970>
 8019768:	9903      	ldr	r1, [sp, #12]
 801976a:	9806      	ldr	r0, [sp, #24]
 801976c:	aa16      	add	r2, sp, #88	; 0x58
 801976e:	f7ff fb17 	bl	8018da0 <__sprint_r>
 8019772:	2800      	cmp	r0, #0
 8019774:	d1dd      	bne.n	8019732 <_vfiprintf_r+0x92a>
 8019776:	af19      	add	r7, sp, #100	; 0x64
 8019778:	3c10      	subs	r4, #16
 801977a:	e7c3      	b.n	8019704 <_vfiprintf_r+0x8fc>
 801977c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801977e:	9300      	str	r3, [sp, #0]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d102      	bne.n	801978a <_vfiprintf_r+0x982>
 8019784:	2300      	movs	r3, #0
 8019786:	9317      	str	r3, [sp, #92]	; 0x5c
 8019788:	e7d3      	b.n	8019732 <_vfiprintf_r+0x92a>
 801978a:	9903      	ldr	r1, [sp, #12]
 801978c:	9806      	ldr	r0, [sp, #24]
 801978e:	aa16      	add	r2, sp, #88	; 0x58
 8019790:	f7ff fb06 	bl	8018da0 <__sprint_r>
 8019794:	2800      	cmp	r0, #0
 8019796:	d0f5      	beq.n	8019784 <_vfiprintf_r+0x97c>
 8019798:	e7cb      	b.n	8019732 <_vfiprintf_r+0x92a>
 801979a:	0026      	movs	r6, r4
 801979c:	2a00      	cmp	r2, #0
 801979e:	d100      	bne.n	80197a2 <_vfiprintf_r+0x99a>
 80197a0:	e609      	b.n	80193b6 <_vfiprintf_r+0x5ae>
 80197a2:	2b01      	cmp	r3, #1
 80197a4:	d100      	bne.n	80197a8 <_vfiprintf_r+0x9a0>
 80197a6:	e6ef      	b.n	8019588 <_vfiprintf_r+0x780>
 80197a8:	ad42      	add	r5, sp, #264	; 0x108
 80197aa:	2b02      	cmp	r3, #2
 80197ac:	d100      	bne.n	80197b0 <_vfiprintf_r+0x9a8>
 80197ae:	e737      	b.n	8019620 <_vfiprintf_r+0x818>
 80197b0:	2307      	movs	r3, #7
 80197b2:	469c      	mov	ip, r3
 80197b4:	4663      	mov	r3, ip
 80197b6:	9900      	ldr	r1, [sp, #0]
 80197b8:	002a      	movs	r2, r5
 80197ba:	400b      	ands	r3, r1
 80197bc:	9901      	ldr	r1, [sp, #4]
 80197be:	3d01      	subs	r5, #1
 80197c0:	074c      	lsls	r4, r1, #29
 80197c2:	9900      	ldr	r1, [sp, #0]
 80197c4:	3330      	adds	r3, #48	; 0x30
 80197c6:	08c8      	lsrs	r0, r1, #3
 80197c8:	9901      	ldr	r1, [sp, #4]
 80197ca:	4304      	orrs	r4, r0
 80197cc:	08c9      	lsrs	r1, r1, #3
 80197ce:	9101      	str	r1, [sp, #4]
 80197d0:	0021      	movs	r1, r4
 80197d2:	9801      	ldr	r0, [sp, #4]
 80197d4:	702b      	strb	r3, [r5, #0]
 80197d6:	9400      	str	r4, [sp, #0]
 80197d8:	4301      	orrs	r1, r0
 80197da:	d1eb      	bne.n	80197b4 <_vfiprintf_r+0x9ac>
 80197dc:	0031      	movs	r1, r6
 80197de:	07c9      	lsls	r1, r1, #31
 80197e0:	d505      	bpl.n	80197ee <_vfiprintf_r+0x9e6>
 80197e2:	2b30      	cmp	r3, #48	; 0x30
 80197e4:	d003      	beq.n	80197ee <_vfiprintf_r+0x9e6>
 80197e6:	2330      	movs	r3, #48	; 0x30
 80197e8:	3d01      	subs	r5, #1
 80197ea:	702b      	strb	r3, [r5, #0]
 80197ec:	1e95      	subs	r5, r2, #2
 80197ee:	9b05      	ldr	r3, [sp, #20]
 80197f0:	0034      	movs	r4, r6
 80197f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80197f4:	ab42      	add	r3, sp, #264	; 0x108
 80197f6:	1b5b      	subs	r3, r3, r5
 80197f8:	9305      	str	r3, [sp, #20]
 80197fa:	e4c1      	b.n	8019180 <_vfiprintf_r+0x378>
 80197fc:	0801da11 	.word	0x0801da11
 8019800:	0801dcd8 	.word	0x0801dcd8

08019804 <__sbprintf>:
 8019804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019806:	0015      	movs	r5, r2
 8019808:	2202      	movs	r2, #2
 801980a:	4c1e      	ldr	r4, [pc, #120]	; (8019884 <__sbprintf+0x80>)
 801980c:	001f      	movs	r7, r3
 801980e:	898b      	ldrh	r3, [r1, #12]
 8019810:	44a5      	add	sp, r4
 8019812:	4393      	bics	r3, r2
 8019814:	466a      	mov	r2, sp
 8019816:	8193      	strh	r3, [r2, #12]
 8019818:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801981a:	0006      	movs	r6, r0
 801981c:	9319      	str	r3, [sp, #100]	; 0x64
 801981e:	89cb      	ldrh	r3, [r1, #14]
 8019820:	a816      	add	r0, sp, #88	; 0x58
 8019822:	81d3      	strh	r3, [r2, #14]
 8019824:	69cb      	ldr	r3, [r1, #28]
 8019826:	000c      	movs	r4, r1
 8019828:	9307      	str	r3, [sp, #28]
 801982a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801982c:	9309      	str	r3, [sp, #36]	; 0x24
 801982e:	ab1a      	add	r3, sp, #104	; 0x68
 8019830:	9300      	str	r3, [sp, #0]
 8019832:	9304      	str	r3, [sp, #16]
 8019834:	2380      	movs	r3, #128	; 0x80
 8019836:	00db      	lsls	r3, r3, #3
 8019838:	9302      	str	r3, [sp, #8]
 801983a:	9305      	str	r3, [sp, #20]
 801983c:	2300      	movs	r3, #0
 801983e:	9306      	str	r3, [sp, #24]
 8019840:	f7fe fc9e 	bl	8018180 <__retarget_lock_init_recursive>
 8019844:	002a      	movs	r2, r5
 8019846:	003b      	movs	r3, r7
 8019848:	4669      	mov	r1, sp
 801984a:	0030      	movs	r0, r6
 801984c:	f7ff fadc 	bl	8018e08 <_vfiprintf_r>
 8019850:	1e05      	subs	r5, r0, #0
 8019852:	db07      	blt.n	8019864 <__sbprintf+0x60>
 8019854:	4669      	mov	r1, sp
 8019856:	0030      	movs	r0, r6
 8019858:	f000 f91c 	bl	8019a94 <_fflush_r>
 801985c:	2800      	cmp	r0, #0
 801985e:	d001      	beq.n	8019864 <__sbprintf+0x60>
 8019860:	2501      	movs	r5, #1
 8019862:	426d      	negs	r5, r5
 8019864:	466b      	mov	r3, sp
 8019866:	899a      	ldrh	r2, [r3, #12]
 8019868:	2340      	movs	r3, #64	; 0x40
 801986a:	421a      	tst	r2, r3
 801986c:	d002      	beq.n	8019874 <__sbprintf+0x70>
 801986e:	89a2      	ldrh	r2, [r4, #12]
 8019870:	4313      	orrs	r3, r2
 8019872:	81a3      	strh	r3, [r4, #12]
 8019874:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019876:	f7fe fc84 	bl	8018182 <__retarget_lock_close_recursive>
 801987a:	0028      	movs	r0, r5
 801987c:	4b02      	ldr	r3, [pc, #8]	; (8019888 <__sbprintf+0x84>)
 801987e:	449d      	add	sp, r3
 8019880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019882:	46c0      	nop			; (mov r8, r8)
 8019884:	fffffb94 	.word	0xfffffb94
 8019888:	0000046c 	.word	0x0000046c

0801988c <__swsetup_r>:
 801988c:	4b30      	ldr	r3, [pc, #192]	; (8019950 <__swsetup_r+0xc4>)
 801988e:	b570      	push	{r4, r5, r6, lr}
 8019890:	0005      	movs	r5, r0
 8019892:	6818      	ldr	r0, [r3, #0]
 8019894:	000c      	movs	r4, r1
 8019896:	2800      	cmp	r0, #0
 8019898:	d004      	beq.n	80198a4 <__swsetup_r+0x18>
 801989a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801989c:	2b00      	cmp	r3, #0
 801989e:	d101      	bne.n	80198a4 <__swsetup_r+0x18>
 80198a0:	f000 f96e 	bl	8019b80 <__sinit>
 80198a4:	230c      	movs	r3, #12
 80198a6:	5ee2      	ldrsh	r2, [r4, r3]
 80198a8:	b293      	uxth	r3, r2
 80198aa:	0711      	lsls	r1, r2, #28
 80198ac:	d423      	bmi.n	80198f6 <__swsetup_r+0x6a>
 80198ae:	06d9      	lsls	r1, r3, #27
 80198b0:	d407      	bmi.n	80198c2 <__swsetup_r+0x36>
 80198b2:	2309      	movs	r3, #9
 80198b4:	2001      	movs	r0, #1
 80198b6:	602b      	str	r3, [r5, #0]
 80198b8:	3337      	adds	r3, #55	; 0x37
 80198ba:	4313      	orrs	r3, r2
 80198bc:	81a3      	strh	r3, [r4, #12]
 80198be:	4240      	negs	r0, r0
 80198c0:	bd70      	pop	{r4, r5, r6, pc}
 80198c2:	075b      	lsls	r3, r3, #29
 80198c4:	d513      	bpl.n	80198ee <__swsetup_r+0x62>
 80198c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80198c8:	2900      	cmp	r1, #0
 80198ca:	d008      	beq.n	80198de <__swsetup_r+0x52>
 80198cc:	0023      	movs	r3, r4
 80198ce:	3340      	adds	r3, #64	; 0x40
 80198d0:	4299      	cmp	r1, r3
 80198d2:	d002      	beq.n	80198da <__swsetup_r+0x4e>
 80198d4:	0028      	movs	r0, r5
 80198d6:	f7fe f823 	bl	8017920 <_free_r>
 80198da:	2300      	movs	r3, #0
 80198dc:	6323      	str	r3, [r4, #48]	; 0x30
 80198de:	2224      	movs	r2, #36	; 0x24
 80198e0:	89a3      	ldrh	r3, [r4, #12]
 80198e2:	4393      	bics	r3, r2
 80198e4:	81a3      	strh	r3, [r4, #12]
 80198e6:	2300      	movs	r3, #0
 80198e8:	6063      	str	r3, [r4, #4]
 80198ea:	6923      	ldr	r3, [r4, #16]
 80198ec:	6023      	str	r3, [r4, #0]
 80198ee:	2308      	movs	r3, #8
 80198f0:	89a2      	ldrh	r2, [r4, #12]
 80198f2:	4313      	orrs	r3, r2
 80198f4:	81a3      	strh	r3, [r4, #12]
 80198f6:	6923      	ldr	r3, [r4, #16]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d10b      	bne.n	8019914 <__swsetup_r+0x88>
 80198fc:	21a0      	movs	r1, #160	; 0xa0
 80198fe:	2280      	movs	r2, #128	; 0x80
 8019900:	89a3      	ldrh	r3, [r4, #12]
 8019902:	0089      	lsls	r1, r1, #2
 8019904:	0092      	lsls	r2, r2, #2
 8019906:	400b      	ands	r3, r1
 8019908:	4293      	cmp	r3, r2
 801990a:	d003      	beq.n	8019914 <__swsetup_r+0x88>
 801990c:	0021      	movs	r1, r4
 801990e:	0028      	movs	r0, r5
 8019910:	f000 fb80 	bl	801a014 <__smakebuf_r>
 8019914:	220c      	movs	r2, #12
 8019916:	5ea3      	ldrsh	r3, [r4, r2]
 8019918:	2001      	movs	r0, #1
 801991a:	001a      	movs	r2, r3
 801991c:	b299      	uxth	r1, r3
 801991e:	4002      	ands	r2, r0
 8019920:	4203      	tst	r3, r0
 8019922:	d00f      	beq.n	8019944 <__swsetup_r+0xb8>
 8019924:	2200      	movs	r2, #0
 8019926:	60a2      	str	r2, [r4, #8]
 8019928:	6962      	ldr	r2, [r4, #20]
 801992a:	4252      	negs	r2, r2
 801992c:	61a2      	str	r2, [r4, #24]
 801992e:	2000      	movs	r0, #0
 8019930:	6922      	ldr	r2, [r4, #16]
 8019932:	4282      	cmp	r2, r0
 8019934:	d1c4      	bne.n	80198c0 <__swsetup_r+0x34>
 8019936:	060a      	lsls	r2, r1, #24
 8019938:	d5c2      	bpl.n	80198c0 <__swsetup_r+0x34>
 801993a:	2240      	movs	r2, #64	; 0x40
 801993c:	4313      	orrs	r3, r2
 801993e:	81a3      	strh	r3, [r4, #12]
 8019940:	3801      	subs	r0, #1
 8019942:	e7bd      	b.n	80198c0 <__swsetup_r+0x34>
 8019944:	0788      	lsls	r0, r1, #30
 8019946:	d400      	bmi.n	801994a <__swsetup_r+0xbe>
 8019948:	6962      	ldr	r2, [r4, #20]
 801994a:	60a2      	str	r2, [r4, #8]
 801994c:	e7ef      	b.n	801992e <__swsetup_r+0xa2>
 801994e:	46c0      	nop			; (mov r8, r8)
 8019950:	200000d0 	.word	0x200000d0

08019954 <abort>:
 8019954:	2006      	movs	r0, #6
 8019956:	b510      	push	{r4, lr}
 8019958:	f000 fbcc 	bl	801a0f4 <raise>
 801995c:	2001      	movs	r0, #1
 801995e:	f000 fdc1 	bl	801a4e4 <_exit>
	...

08019964 <__sflush_r>:
 8019964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019966:	230c      	movs	r3, #12
 8019968:	5eca      	ldrsh	r2, [r1, r3]
 801996a:	000c      	movs	r4, r1
 801996c:	0005      	movs	r5, r0
 801996e:	b291      	uxth	r1, r2
 8019970:	0713      	lsls	r3, r2, #28
 8019972:	d467      	bmi.n	8019a44 <__sflush_r+0xe0>
 8019974:	2380      	movs	r3, #128	; 0x80
 8019976:	011b      	lsls	r3, r3, #4
 8019978:	4313      	orrs	r3, r2
 801997a:	6862      	ldr	r2, [r4, #4]
 801997c:	81a3      	strh	r3, [r4, #12]
 801997e:	2a00      	cmp	r2, #0
 8019980:	dc04      	bgt.n	801998c <__sflush_r+0x28>
 8019982:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8019984:	2a00      	cmp	r2, #0
 8019986:	dc01      	bgt.n	801998c <__sflush_r+0x28>
 8019988:	2000      	movs	r0, #0
 801998a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801998c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801998e:	2f00      	cmp	r7, #0
 8019990:	d0fa      	beq.n	8019988 <__sflush_r+0x24>
 8019992:	2200      	movs	r2, #0
 8019994:	2180      	movs	r1, #128	; 0x80
 8019996:	682e      	ldr	r6, [r5, #0]
 8019998:	602a      	str	r2, [r5, #0]
 801999a:	001a      	movs	r2, r3
 801999c:	0149      	lsls	r1, r1, #5
 801999e:	400a      	ands	r2, r1
 80199a0:	420b      	tst	r3, r1
 80199a2:	d038      	beq.n	8019a16 <__sflush_r+0xb2>
 80199a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80199a6:	89a3      	ldrh	r3, [r4, #12]
 80199a8:	075b      	lsls	r3, r3, #29
 80199aa:	d506      	bpl.n	80199ba <__sflush_r+0x56>
 80199ac:	6863      	ldr	r3, [r4, #4]
 80199ae:	1ac0      	subs	r0, r0, r3
 80199b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d001      	beq.n	80199ba <__sflush_r+0x56>
 80199b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80199b8:	1ac0      	subs	r0, r0, r3
 80199ba:	0002      	movs	r2, r0
 80199bc:	69e1      	ldr	r1, [r4, #28]
 80199be:	2300      	movs	r3, #0
 80199c0:	0028      	movs	r0, r5
 80199c2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80199c4:	47b8      	blx	r7
 80199c6:	89a1      	ldrh	r1, [r4, #12]
 80199c8:	1c43      	adds	r3, r0, #1
 80199ca:	d106      	bne.n	80199da <__sflush_r+0x76>
 80199cc:	682b      	ldr	r3, [r5, #0]
 80199ce:	2b1d      	cmp	r3, #29
 80199d0:	d835      	bhi.n	8019a3e <__sflush_r+0xda>
 80199d2:	4a2e      	ldr	r2, [pc, #184]	; (8019a8c <__sflush_r+0x128>)
 80199d4:	40da      	lsrs	r2, r3
 80199d6:	07d3      	lsls	r3, r2, #31
 80199d8:	d531      	bpl.n	8019a3e <__sflush_r+0xda>
 80199da:	2200      	movs	r2, #0
 80199dc:	4b2c      	ldr	r3, [pc, #176]	; (8019a90 <__sflush_r+0x12c>)
 80199de:	6062      	str	r2, [r4, #4]
 80199e0:	400b      	ands	r3, r1
 80199e2:	6922      	ldr	r2, [r4, #16]
 80199e4:	b21b      	sxth	r3, r3
 80199e6:	81a3      	strh	r3, [r4, #12]
 80199e8:	6022      	str	r2, [r4, #0]
 80199ea:	04db      	lsls	r3, r3, #19
 80199ec:	d505      	bpl.n	80199fa <__sflush_r+0x96>
 80199ee:	1c43      	adds	r3, r0, #1
 80199f0:	d102      	bne.n	80199f8 <__sflush_r+0x94>
 80199f2:	682b      	ldr	r3, [r5, #0]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d100      	bne.n	80199fa <__sflush_r+0x96>
 80199f8:	6520      	str	r0, [r4, #80]	; 0x50
 80199fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80199fc:	602e      	str	r6, [r5, #0]
 80199fe:	2900      	cmp	r1, #0
 8019a00:	d0c2      	beq.n	8019988 <__sflush_r+0x24>
 8019a02:	0023      	movs	r3, r4
 8019a04:	3340      	adds	r3, #64	; 0x40
 8019a06:	4299      	cmp	r1, r3
 8019a08:	d002      	beq.n	8019a10 <__sflush_r+0xac>
 8019a0a:	0028      	movs	r0, r5
 8019a0c:	f7fd ff88 	bl	8017920 <_free_r>
 8019a10:	2000      	movs	r0, #0
 8019a12:	6320      	str	r0, [r4, #48]	; 0x30
 8019a14:	e7b9      	b.n	801998a <__sflush_r+0x26>
 8019a16:	2301      	movs	r3, #1
 8019a18:	0028      	movs	r0, r5
 8019a1a:	69e1      	ldr	r1, [r4, #28]
 8019a1c:	47b8      	blx	r7
 8019a1e:	1c43      	adds	r3, r0, #1
 8019a20:	d1c1      	bne.n	80199a6 <__sflush_r+0x42>
 8019a22:	682b      	ldr	r3, [r5, #0]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d0be      	beq.n	80199a6 <__sflush_r+0x42>
 8019a28:	2b1d      	cmp	r3, #29
 8019a2a:	d001      	beq.n	8019a30 <__sflush_r+0xcc>
 8019a2c:	2b16      	cmp	r3, #22
 8019a2e:	d101      	bne.n	8019a34 <__sflush_r+0xd0>
 8019a30:	602e      	str	r6, [r5, #0]
 8019a32:	e7a9      	b.n	8019988 <__sflush_r+0x24>
 8019a34:	2340      	movs	r3, #64	; 0x40
 8019a36:	89a2      	ldrh	r2, [r4, #12]
 8019a38:	4313      	orrs	r3, r2
 8019a3a:	81a3      	strh	r3, [r4, #12]
 8019a3c:	e7a5      	b.n	801998a <__sflush_r+0x26>
 8019a3e:	2340      	movs	r3, #64	; 0x40
 8019a40:	430b      	orrs	r3, r1
 8019a42:	e7fa      	b.n	8019a3a <__sflush_r+0xd6>
 8019a44:	6927      	ldr	r7, [r4, #16]
 8019a46:	2f00      	cmp	r7, #0
 8019a48:	d09e      	beq.n	8019988 <__sflush_r+0x24>
 8019a4a:	6823      	ldr	r3, [r4, #0]
 8019a4c:	6027      	str	r7, [r4, #0]
 8019a4e:	1bdb      	subs	r3, r3, r7
 8019a50:	9301      	str	r3, [sp, #4]
 8019a52:	2300      	movs	r3, #0
 8019a54:	078a      	lsls	r2, r1, #30
 8019a56:	d100      	bne.n	8019a5a <__sflush_r+0xf6>
 8019a58:	6963      	ldr	r3, [r4, #20]
 8019a5a:	60a3      	str	r3, [r4, #8]
 8019a5c:	9b01      	ldr	r3, [sp, #4]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	dc00      	bgt.n	8019a64 <__sflush_r+0x100>
 8019a62:	e791      	b.n	8019988 <__sflush_r+0x24>
 8019a64:	003a      	movs	r2, r7
 8019a66:	0028      	movs	r0, r5
 8019a68:	9b01      	ldr	r3, [sp, #4]
 8019a6a:	69e1      	ldr	r1, [r4, #28]
 8019a6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019a6e:	47b0      	blx	r6
 8019a70:	2800      	cmp	r0, #0
 8019a72:	dc06      	bgt.n	8019a82 <__sflush_r+0x11e>
 8019a74:	2340      	movs	r3, #64	; 0x40
 8019a76:	2001      	movs	r0, #1
 8019a78:	89a2      	ldrh	r2, [r4, #12]
 8019a7a:	4240      	negs	r0, r0
 8019a7c:	4313      	orrs	r3, r2
 8019a7e:	81a3      	strh	r3, [r4, #12]
 8019a80:	e783      	b.n	801998a <__sflush_r+0x26>
 8019a82:	9b01      	ldr	r3, [sp, #4]
 8019a84:	183f      	adds	r7, r7, r0
 8019a86:	1a1b      	subs	r3, r3, r0
 8019a88:	9301      	str	r3, [sp, #4]
 8019a8a:	e7e7      	b.n	8019a5c <__sflush_r+0xf8>
 8019a8c:	20400001 	.word	0x20400001
 8019a90:	fffff7ff 	.word	0xfffff7ff

08019a94 <_fflush_r>:
 8019a94:	b570      	push	{r4, r5, r6, lr}
 8019a96:	0005      	movs	r5, r0
 8019a98:	000c      	movs	r4, r1
 8019a9a:	2800      	cmp	r0, #0
 8019a9c:	d004      	beq.n	8019aa8 <_fflush_r+0x14>
 8019a9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d101      	bne.n	8019aa8 <_fflush_r+0x14>
 8019aa4:	f000 f86c 	bl	8019b80 <__sinit>
 8019aa8:	220c      	movs	r2, #12
 8019aaa:	5ea3      	ldrsh	r3, [r4, r2]
 8019aac:	1e1e      	subs	r6, r3, #0
 8019aae:	d015      	beq.n	8019adc <_fflush_r+0x48>
 8019ab0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019ab2:	07d2      	lsls	r2, r2, #31
 8019ab4:	d404      	bmi.n	8019ac0 <_fflush_r+0x2c>
 8019ab6:	059b      	lsls	r3, r3, #22
 8019ab8:	d402      	bmi.n	8019ac0 <_fflush_r+0x2c>
 8019aba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019abc:	f7fe fb62 	bl	8018184 <__retarget_lock_acquire_recursive>
 8019ac0:	0021      	movs	r1, r4
 8019ac2:	0028      	movs	r0, r5
 8019ac4:	f7ff ff4e 	bl	8019964 <__sflush_r>
 8019ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019aca:	0006      	movs	r6, r0
 8019acc:	07db      	lsls	r3, r3, #31
 8019ace:	d405      	bmi.n	8019adc <_fflush_r+0x48>
 8019ad0:	89a3      	ldrh	r3, [r4, #12]
 8019ad2:	059b      	lsls	r3, r3, #22
 8019ad4:	d402      	bmi.n	8019adc <_fflush_r+0x48>
 8019ad6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ad8:	f7fe fb55 	bl	8018186 <__retarget_lock_release_recursive>
 8019adc:	0030      	movs	r0, r6
 8019ade:	bd70      	pop	{r4, r5, r6, pc}

08019ae0 <std>:
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	b510      	push	{r4, lr}
 8019ae4:	0004      	movs	r4, r0
 8019ae6:	6003      	str	r3, [r0, #0]
 8019ae8:	6043      	str	r3, [r0, #4]
 8019aea:	6083      	str	r3, [r0, #8]
 8019aec:	8181      	strh	r1, [r0, #12]
 8019aee:	6643      	str	r3, [r0, #100]	; 0x64
 8019af0:	0019      	movs	r1, r3
 8019af2:	81c2      	strh	r2, [r0, #14]
 8019af4:	6103      	str	r3, [r0, #16]
 8019af6:	2208      	movs	r2, #8
 8019af8:	6143      	str	r3, [r0, #20]
 8019afa:	6183      	str	r3, [r0, #24]
 8019afc:	305c      	adds	r0, #92	; 0x5c
 8019afe:	f7fa fc10 	bl	8014322 <memset>
 8019b02:	0020      	movs	r0, r4
 8019b04:	4b06      	ldr	r3, [pc, #24]	; (8019b20 <std+0x40>)
 8019b06:	61e4      	str	r4, [r4, #28]
 8019b08:	6223      	str	r3, [r4, #32]
 8019b0a:	4b06      	ldr	r3, [pc, #24]	; (8019b24 <std+0x44>)
 8019b0c:	3058      	adds	r0, #88	; 0x58
 8019b0e:	6263      	str	r3, [r4, #36]	; 0x24
 8019b10:	4b05      	ldr	r3, [pc, #20]	; (8019b28 <std+0x48>)
 8019b12:	62a3      	str	r3, [r4, #40]	; 0x28
 8019b14:	4b05      	ldr	r3, [pc, #20]	; (8019b2c <std+0x4c>)
 8019b16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019b18:	f7fe fb32 	bl	8018180 <__retarget_lock_init_recursive>
 8019b1c:	bd10      	pop	{r4, pc}
 8019b1e:	46c0      	nop			; (mov r8, r8)
 8019b20:	0801a135 	.word	0x0801a135
 8019b24:	0801a15d 	.word	0x0801a15d
 8019b28:	0801a195 	.word	0x0801a195
 8019b2c:	0801a1c1 	.word	0x0801a1c1

08019b30 <_cleanup_r>:
 8019b30:	b510      	push	{r4, lr}
 8019b32:	4902      	ldr	r1, [pc, #8]	; (8019b3c <_cleanup_r+0xc>)
 8019b34:	f000 fa1c 	bl	8019f70 <_fwalk_reent>
 8019b38:	bd10      	pop	{r4, pc}
 8019b3a:	46c0      	nop			; (mov r8, r8)
 8019b3c:	0801a2ed 	.word	0x0801a2ed

08019b40 <__sfp_lock_acquire>:
 8019b40:	b510      	push	{r4, lr}
 8019b42:	4802      	ldr	r0, [pc, #8]	; (8019b4c <__sfp_lock_acquire+0xc>)
 8019b44:	f7fe fb1e 	bl	8018184 <__retarget_lock_acquire_recursive>
 8019b48:	bd10      	pop	{r4, pc}
 8019b4a:	46c0      	nop			; (mov r8, r8)
 8019b4c:	20007200 	.word	0x20007200

08019b50 <__sfp_lock_release>:
 8019b50:	b510      	push	{r4, lr}
 8019b52:	4802      	ldr	r0, [pc, #8]	; (8019b5c <__sfp_lock_release+0xc>)
 8019b54:	f7fe fb17 	bl	8018186 <__retarget_lock_release_recursive>
 8019b58:	bd10      	pop	{r4, pc}
 8019b5a:	46c0      	nop			; (mov r8, r8)
 8019b5c:	20007200 	.word	0x20007200

08019b60 <__sinit_lock_acquire>:
 8019b60:	b510      	push	{r4, lr}
 8019b62:	4802      	ldr	r0, [pc, #8]	; (8019b6c <__sinit_lock_acquire+0xc>)
 8019b64:	f7fe fb0e 	bl	8018184 <__retarget_lock_acquire_recursive>
 8019b68:	bd10      	pop	{r4, pc}
 8019b6a:	46c0      	nop			; (mov r8, r8)
 8019b6c:	200071fb 	.word	0x200071fb

08019b70 <__sinit_lock_release>:
 8019b70:	b510      	push	{r4, lr}
 8019b72:	4802      	ldr	r0, [pc, #8]	; (8019b7c <__sinit_lock_release+0xc>)
 8019b74:	f7fe fb07 	bl	8018186 <__retarget_lock_release_recursive>
 8019b78:	bd10      	pop	{r4, pc}
 8019b7a:	46c0      	nop			; (mov r8, r8)
 8019b7c:	200071fb 	.word	0x200071fb

08019b80 <__sinit>:
 8019b80:	b510      	push	{r4, lr}
 8019b82:	0004      	movs	r4, r0
 8019b84:	f7ff ffec 	bl	8019b60 <__sinit_lock_acquire>
 8019b88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019b8a:	2a00      	cmp	r2, #0
 8019b8c:	d002      	beq.n	8019b94 <__sinit+0x14>
 8019b8e:	f7ff ffef 	bl	8019b70 <__sinit_lock_release>
 8019b92:	bd10      	pop	{r4, pc}
 8019b94:	4b0e      	ldr	r3, [pc, #56]	; (8019bd0 <__sinit+0x50>)
 8019b96:	2103      	movs	r1, #3
 8019b98:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019b9a:	23b8      	movs	r3, #184	; 0xb8
 8019b9c:	009b      	lsls	r3, r3, #2
 8019b9e:	50e2      	str	r2, [r4, r3]
 8019ba0:	3304      	adds	r3, #4
 8019ba2:	50e1      	str	r1, [r4, r3]
 8019ba4:	3308      	adds	r3, #8
 8019ba6:	18e1      	adds	r1, r4, r3
 8019ba8:	3b04      	subs	r3, #4
 8019baa:	50e1      	str	r1, [r4, r3]
 8019bac:	6860      	ldr	r0, [r4, #4]
 8019bae:	2104      	movs	r1, #4
 8019bb0:	f7ff ff96 	bl	8019ae0 <std>
 8019bb4:	2201      	movs	r2, #1
 8019bb6:	2109      	movs	r1, #9
 8019bb8:	68a0      	ldr	r0, [r4, #8]
 8019bba:	f7ff ff91 	bl	8019ae0 <std>
 8019bbe:	2202      	movs	r2, #2
 8019bc0:	2112      	movs	r1, #18
 8019bc2:	68e0      	ldr	r0, [r4, #12]
 8019bc4:	f7ff ff8c 	bl	8019ae0 <std>
 8019bc8:	2301      	movs	r3, #1
 8019bca:	63a3      	str	r3, [r4, #56]	; 0x38
 8019bcc:	e7df      	b.n	8019b8e <__sinit+0xe>
 8019bce:	46c0      	nop			; (mov r8, r8)
 8019bd0:	08019b31 	.word	0x08019b31

08019bd4 <__fputwc>:
 8019bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bd6:	b085      	sub	sp, #20
 8019bd8:	000e      	movs	r6, r1
 8019bda:	0015      	movs	r5, r2
 8019bdc:	9001      	str	r0, [sp, #4]
 8019bde:	f7fe fac3 	bl	8018168 <__locale_mb_cur_max>
 8019be2:	0004      	movs	r4, r0
 8019be4:	2801      	cmp	r0, #1
 8019be6:	d119      	bne.n	8019c1c <__fputwc+0x48>
 8019be8:	1e73      	subs	r3, r6, #1
 8019bea:	2bfe      	cmp	r3, #254	; 0xfe
 8019bec:	d816      	bhi.n	8019c1c <__fputwc+0x48>
 8019bee:	ab02      	add	r3, sp, #8
 8019bf0:	711e      	strb	r6, [r3, #4]
 8019bf2:	2700      	movs	r7, #0
 8019bf4:	42a7      	cmp	r7, r4
 8019bf6:	d020      	beq.n	8019c3a <__fputwc+0x66>
 8019bf8:	ab03      	add	r3, sp, #12
 8019bfa:	5dd9      	ldrb	r1, [r3, r7]
 8019bfc:	68ab      	ldr	r3, [r5, #8]
 8019bfe:	3b01      	subs	r3, #1
 8019c00:	60ab      	str	r3, [r5, #8]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	da04      	bge.n	8019c10 <__fputwc+0x3c>
 8019c06:	69aa      	ldr	r2, [r5, #24]
 8019c08:	4293      	cmp	r3, r2
 8019c0a:	db19      	blt.n	8019c40 <__fputwc+0x6c>
 8019c0c:	290a      	cmp	r1, #10
 8019c0e:	d017      	beq.n	8019c40 <__fputwc+0x6c>
 8019c10:	682b      	ldr	r3, [r5, #0]
 8019c12:	1c5a      	adds	r2, r3, #1
 8019c14:	602a      	str	r2, [r5, #0]
 8019c16:	7019      	strb	r1, [r3, #0]
 8019c18:	3701      	adds	r7, #1
 8019c1a:	e7eb      	b.n	8019bf4 <__fputwc+0x20>
 8019c1c:	002b      	movs	r3, r5
 8019c1e:	0032      	movs	r2, r6
 8019c20:	9801      	ldr	r0, [sp, #4]
 8019c22:	335c      	adds	r3, #92	; 0x5c
 8019c24:	a903      	add	r1, sp, #12
 8019c26:	f000 fb23 	bl	801a270 <_wcrtomb_r>
 8019c2a:	0004      	movs	r4, r0
 8019c2c:	1c43      	adds	r3, r0, #1
 8019c2e:	d1e0      	bne.n	8019bf2 <__fputwc+0x1e>
 8019c30:	2340      	movs	r3, #64	; 0x40
 8019c32:	0006      	movs	r6, r0
 8019c34:	89aa      	ldrh	r2, [r5, #12]
 8019c36:	4313      	orrs	r3, r2
 8019c38:	81ab      	strh	r3, [r5, #12]
 8019c3a:	0030      	movs	r0, r6
 8019c3c:	b005      	add	sp, #20
 8019c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c40:	002a      	movs	r2, r5
 8019c42:	9801      	ldr	r0, [sp, #4]
 8019c44:	f000 fac2 	bl	801a1cc <__swbuf_r>
 8019c48:	1c43      	adds	r3, r0, #1
 8019c4a:	d1e5      	bne.n	8019c18 <__fputwc+0x44>
 8019c4c:	0006      	movs	r6, r0
 8019c4e:	e7f4      	b.n	8019c3a <__fputwc+0x66>

08019c50 <_fputwc_r>:
 8019c50:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8019c52:	b570      	push	{r4, r5, r6, lr}
 8019c54:	0005      	movs	r5, r0
 8019c56:	000e      	movs	r6, r1
 8019c58:	0014      	movs	r4, r2
 8019c5a:	07db      	lsls	r3, r3, #31
 8019c5c:	d405      	bmi.n	8019c6a <_fputwc_r+0x1a>
 8019c5e:	8993      	ldrh	r3, [r2, #12]
 8019c60:	059b      	lsls	r3, r3, #22
 8019c62:	d402      	bmi.n	8019c6a <_fputwc_r+0x1a>
 8019c64:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8019c66:	f7fe fa8d 	bl	8018184 <__retarget_lock_acquire_recursive>
 8019c6a:	230c      	movs	r3, #12
 8019c6c:	5ee2      	ldrsh	r2, [r4, r3]
 8019c6e:	2380      	movs	r3, #128	; 0x80
 8019c70:	019b      	lsls	r3, r3, #6
 8019c72:	421a      	tst	r2, r3
 8019c74:	d104      	bne.n	8019c80 <_fputwc_r+0x30>
 8019c76:	431a      	orrs	r2, r3
 8019c78:	81a2      	strh	r2, [r4, #12]
 8019c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019c7c:	4313      	orrs	r3, r2
 8019c7e:	6663      	str	r3, [r4, #100]	; 0x64
 8019c80:	0028      	movs	r0, r5
 8019c82:	0022      	movs	r2, r4
 8019c84:	0031      	movs	r1, r6
 8019c86:	f7ff ffa5 	bl	8019bd4 <__fputwc>
 8019c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019c8c:	0005      	movs	r5, r0
 8019c8e:	07db      	lsls	r3, r3, #31
 8019c90:	d405      	bmi.n	8019c9e <_fputwc_r+0x4e>
 8019c92:	89a3      	ldrh	r3, [r4, #12]
 8019c94:	059b      	lsls	r3, r3, #22
 8019c96:	d402      	bmi.n	8019c9e <_fputwc_r+0x4e>
 8019c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c9a:	f7fe fa74 	bl	8018186 <__retarget_lock_release_recursive>
 8019c9e:	0028      	movs	r0, r5
 8019ca0:	bd70      	pop	{r4, r5, r6, pc}
	...

08019ca4 <__sfvwrite_r>:
 8019ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ca6:	6893      	ldr	r3, [r2, #8]
 8019ca8:	b087      	sub	sp, #28
 8019caa:	000c      	movs	r4, r1
 8019cac:	9002      	str	r0, [sp, #8]
 8019cae:	9203      	str	r2, [sp, #12]
 8019cb0:	9300      	str	r3, [sp, #0]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d102      	bne.n	8019cbc <__sfvwrite_r+0x18>
 8019cb6:	2000      	movs	r0, #0
 8019cb8:	b007      	add	sp, #28
 8019cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cbc:	898b      	ldrh	r3, [r1, #12]
 8019cbe:	071b      	lsls	r3, r3, #28
 8019cc0:	d559      	bpl.n	8019d76 <__sfvwrite_r+0xd2>
 8019cc2:	690b      	ldr	r3, [r1, #16]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d056      	beq.n	8019d76 <__sfvwrite_r+0xd2>
 8019cc8:	9b03      	ldr	r3, [sp, #12]
 8019cca:	2202      	movs	r2, #2
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	9301      	str	r3, [sp, #4]
 8019cd0:	89a3      	ldrh	r3, [r4, #12]
 8019cd2:	001f      	movs	r7, r3
 8019cd4:	4017      	ands	r7, r2
 8019cd6:	4213      	tst	r3, r2
 8019cd8:	d173      	bne.n	8019dc2 <__sfvwrite_r+0x11e>
 8019cda:	2201      	movs	r2, #1
 8019cdc:	0019      	movs	r1, r3
 8019cde:	4011      	ands	r1, r2
 8019ce0:	4213      	tst	r3, r2
 8019ce2:	d100      	bne.n	8019ce6 <__sfvwrite_r+0x42>
 8019ce4:	e0a8      	b.n	8019e38 <__sfvwrite_r+0x194>
 8019ce6:	0038      	movs	r0, r7
 8019ce8:	003e      	movs	r6, r7
 8019cea:	9700      	str	r7, [sp, #0]
 8019cec:	9205      	str	r2, [sp, #20]
 8019cee:	9b00      	ldr	r3, [sp, #0]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d100      	bne.n	8019cf6 <__sfvwrite_r+0x52>
 8019cf4:	e112      	b.n	8019f1c <__sfvwrite_r+0x278>
 8019cf6:	2800      	cmp	r0, #0
 8019cf8:	d10a      	bne.n	8019d10 <__sfvwrite_r+0x6c>
 8019cfa:	001a      	movs	r2, r3
 8019cfc:	210a      	movs	r1, #10
 8019cfe:	0030      	movs	r0, r6
 8019d00:	f7fe fa54 	bl	80181ac <memchr>
 8019d04:	9b00      	ldr	r3, [sp, #0]
 8019d06:	1c5f      	adds	r7, r3, #1
 8019d08:	2800      	cmp	r0, #0
 8019d0a:	d001      	beq.n	8019d10 <__sfvwrite_r+0x6c>
 8019d0c:	3001      	adds	r0, #1
 8019d0e:	1b87      	subs	r7, r0, r6
 8019d10:	9b00      	ldr	r3, [sp, #0]
 8019d12:	9704      	str	r7, [sp, #16]
 8019d14:	429f      	cmp	r7, r3
 8019d16:	d900      	bls.n	8019d1a <__sfvwrite_r+0x76>
 8019d18:	9304      	str	r3, [sp, #16]
 8019d1a:	6820      	ldr	r0, [r4, #0]
 8019d1c:	6922      	ldr	r2, [r4, #16]
 8019d1e:	6963      	ldr	r3, [r4, #20]
 8019d20:	4290      	cmp	r0, r2
 8019d22:	d800      	bhi.n	8019d26 <__sfvwrite_r+0x82>
 8019d24:	e103      	b.n	8019f2e <__sfvwrite_r+0x28a>
 8019d26:	68a2      	ldr	r2, [r4, #8]
 8019d28:	189d      	adds	r5, r3, r2
 8019d2a:	9a04      	ldr	r2, [sp, #16]
 8019d2c:	42aa      	cmp	r2, r5
 8019d2e:	dc00      	bgt.n	8019d32 <__sfvwrite_r+0x8e>
 8019d30:	e0fd      	b.n	8019f2e <__sfvwrite_r+0x28a>
 8019d32:	0031      	movs	r1, r6
 8019d34:	002a      	movs	r2, r5
 8019d36:	f7fe fa44 	bl	80181c2 <memmove>
 8019d3a:	6823      	ldr	r3, [r4, #0]
 8019d3c:	0021      	movs	r1, r4
 8019d3e:	195b      	adds	r3, r3, r5
 8019d40:	9802      	ldr	r0, [sp, #8]
 8019d42:	6023      	str	r3, [r4, #0]
 8019d44:	f7ff fea6 	bl	8019a94 <_fflush_r>
 8019d48:	2800      	cmp	r0, #0
 8019d4a:	d170      	bne.n	8019e2e <__sfvwrite_r+0x18a>
 8019d4c:	9805      	ldr	r0, [sp, #20]
 8019d4e:	1b7f      	subs	r7, r7, r5
 8019d50:	d105      	bne.n	8019d5e <__sfvwrite_r+0xba>
 8019d52:	0021      	movs	r1, r4
 8019d54:	9802      	ldr	r0, [sp, #8]
 8019d56:	f7ff fe9d 	bl	8019a94 <_fflush_r>
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	d167      	bne.n	8019e2e <__sfvwrite_r+0x18a>
 8019d5e:	9b00      	ldr	r3, [sp, #0]
 8019d60:	1976      	adds	r6, r6, r5
 8019d62:	1b5b      	subs	r3, r3, r5
 8019d64:	9300      	str	r3, [sp, #0]
 8019d66:	9b03      	ldr	r3, [sp, #12]
 8019d68:	689b      	ldr	r3, [r3, #8]
 8019d6a:	1b5d      	subs	r5, r3, r5
 8019d6c:	9304      	str	r3, [sp, #16]
 8019d6e:	9b03      	ldr	r3, [sp, #12]
 8019d70:	609d      	str	r5, [r3, #8]
 8019d72:	d1bc      	bne.n	8019cee <__sfvwrite_r+0x4a>
 8019d74:	e79f      	b.n	8019cb6 <__sfvwrite_r+0x12>
 8019d76:	0021      	movs	r1, r4
 8019d78:	9802      	ldr	r0, [sp, #8]
 8019d7a:	f7ff fd87 	bl	801988c <__swsetup_r>
 8019d7e:	2800      	cmp	r0, #0
 8019d80:	d0a2      	beq.n	8019cc8 <__sfvwrite_r+0x24>
 8019d82:	2001      	movs	r0, #1
 8019d84:	4240      	negs	r0, r0
 8019d86:	e797      	b.n	8019cb8 <__sfvwrite_r+0x14>
 8019d88:	9b01      	ldr	r3, [sp, #4]
 8019d8a:	681e      	ldr	r6, [r3, #0]
 8019d8c:	685d      	ldr	r5, [r3, #4]
 8019d8e:	3308      	adds	r3, #8
 8019d90:	9301      	str	r3, [sp, #4]
 8019d92:	2d00      	cmp	r5, #0
 8019d94:	d0f8      	beq.n	8019d88 <__sfvwrite_r+0xe4>
 8019d96:	4a72      	ldr	r2, [pc, #456]	; (8019f60 <__sfvwrite_r+0x2bc>)
 8019d98:	002b      	movs	r3, r5
 8019d9a:	4295      	cmp	r5, r2
 8019d9c:	d900      	bls.n	8019da0 <__sfvwrite_r+0xfc>
 8019d9e:	0013      	movs	r3, r2
 8019da0:	0032      	movs	r2, r6
 8019da2:	69e1      	ldr	r1, [r4, #28]
 8019da4:	9802      	ldr	r0, [sp, #8]
 8019da6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8019da8:	47b8      	blx	r7
 8019daa:	2800      	cmp	r0, #0
 8019dac:	dd3f      	ble.n	8019e2e <__sfvwrite_r+0x18a>
 8019dae:	9b03      	ldr	r3, [sp, #12]
 8019db0:	1836      	adds	r6, r6, r0
 8019db2:	689b      	ldr	r3, [r3, #8]
 8019db4:	1a2d      	subs	r5, r5, r0
 8019db6:	9300      	str	r3, [sp, #0]
 8019db8:	1a18      	subs	r0, r3, r0
 8019dba:	9b03      	ldr	r3, [sp, #12]
 8019dbc:	6098      	str	r0, [r3, #8]
 8019dbe:	d1e8      	bne.n	8019d92 <__sfvwrite_r+0xee>
 8019dc0:	e779      	b.n	8019cb6 <__sfvwrite_r+0x12>
 8019dc2:	2600      	movs	r6, #0
 8019dc4:	0035      	movs	r5, r6
 8019dc6:	e7e4      	b.n	8019d92 <__sfvwrite_r+0xee>
 8019dc8:	9b01      	ldr	r3, [sp, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	9304      	str	r3, [sp, #16]
 8019dce:	9b01      	ldr	r3, [sp, #4]
 8019dd0:	685b      	ldr	r3, [r3, #4]
 8019dd2:	9300      	str	r3, [sp, #0]
 8019dd4:	9b01      	ldr	r3, [sp, #4]
 8019dd6:	3308      	adds	r3, #8
 8019dd8:	9301      	str	r3, [sp, #4]
 8019dda:	9b00      	ldr	r3, [sp, #0]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d0f3      	beq.n	8019dc8 <__sfvwrite_r+0x124>
 8019de0:	2380      	movs	r3, #128	; 0x80
 8019de2:	89a2      	ldrh	r2, [r4, #12]
 8019de4:	009b      	lsls	r3, r3, #2
 8019de6:	68a5      	ldr	r5, [r4, #8]
 8019de8:	6820      	ldr	r0, [r4, #0]
 8019dea:	421a      	tst	r2, r3
 8019dec:	d064      	beq.n	8019eb8 <__sfvwrite_r+0x214>
 8019dee:	9b00      	ldr	r3, [sp, #0]
 8019df0:	429d      	cmp	r5, r3
 8019df2:	d835      	bhi.n	8019e60 <__sfvwrite_r+0x1bc>
 8019df4:	2390      	movs	r3, #144	; 0x90
 8019df6:	00db      	lsls	r3, r3, #3
 8019df8:	421a      	tst	r2, r3
 8019dfa:	d031      	beq.n	8019e60 <__sfvwrite_r+0x1bc>
 8019dfc:	2603      	movs	r6, #3
 8019dfe:	6963      	ldr	r3, [r4, #20]
 8019e00:	6921      	ldr	r1, [r4, #16]
 8019e02:	435e      	muls	r6, r3
 8019e04:	1a47      	subs	r7, r0, r1
 8019e06:	0ff0      	lsrs	r0, r6, #31
 8019e08:	1986      	adds	r6, r0, r6
 8019e0a:	9800      	ldr	r0, [sp, #0]
 8019e0c:	1c7b      	adds	r3, r7, #1
 8019e0e:	181b      	adds	r3, r3, r0
 8019e10:	1076      	asrs	r6, r6, #1
 8019e12:	42b3      	cmp	r3, r6
 8019e14:	d900      	bls.n	8019e18 <__sfvwrite_r+0x174>
 8019e16:	001e      	movs	r6, r3
 8019e18:	0553      	lsls	r3, r2, #21
 8019e1a:	d53e      	bpl.n	8019e9a <__sfvwrite_r+0x1f6>
 8019e1c:	0031      	movs	r1, r6
 8019e1e:	9802      	ldr	r0, [sp, #8]
 8019e20:	f7fa f854 	bl	8013ecc <_malloc_r>
 8019e24:	1e05      	subs	r5, r0, #0
 8019e26:	d10a      	bne.n	8019e3e <__sfvwrite_r+0x19a>
 8019e28:	230c      	movs	r3, #12
 8019e2a:	9a02      	ldr	r2, [sp, #8]
 8019e2c:	6013      	str	r3, [r2, #0]
 8019e2e:	2340      	movs	r3, #64	; 0x40
 8019e30:	89a2      	ldrh	r2, [r4, #12]
 8019e32:	4313      	orrs	r3, r2
 8019e34:	81a3      	strh	r3, [r4, #12]
 8019e36:	e7a4      	b.n	8019d82 <__sfvwrite_r+0xde>
 8019e38:	9104      	str	r1, [sp, #16]
 8019e3a:	9100      	str	r1, [sp, #0]
 8019e3c:	e7cd      	b.n	8019dda <__sfvwrite_r+0x136>
 8019e3e:	003a      	movs	r2, r7
 8019e40:	6921      	ldr	r1, [r4, #16]
 8019e42:	f7fa fa65 	bl	8014310 <memcpy>
 8019e46:	89a3      	ldrh	r3, [r4, #12]
 8019e48:	4a46      	ldr	r2, [pc, #280]	; (8019f64 <__sfvwrite_r+0x2c0>)
 8019e4a:	401a      	ands	r2, r3
 8019e4c:	2380      	movs	r3, #128	; 0x80
 8019e4e:	4313      	orrs	r3, r2
 8019e50:	81a3      	strh	r3, [r4, #12]
 8019e52:	6125      	str	r5, [r4, #16]
 8019e54:	19ed      	adds	r5, r5, r7
 8019e56:	6025      	str	r5, [r4, #0]
 8019e58:	6166      	str	r6, [r4, #20]
 8019e5a:	9d00      	ldr	r5, [sp, #0]
 8019e5c:	1bf6      	subs	r6, r6, r7
 8019e5e:	60a6      	str	r6, [r4, #8]
 8019e60:	9f00      	ldr	r7, [sp, #0]
 8019e62:	42bd      	cmp	r5, r7
 8019e64:	d900      	bls.n	8019e68 <__sfvwrite_r+0x1c4>
 8019e66:	003d      	movs	r5, r7
 8019e68:	002a      	movs	r2, r5
 8019e6a:	9904      	ldr	r1, [sp, #16]
 8019e6c:	6820      	ldr	r0, [r4, #0]
 8019e6e:	f7fe f9a8 	bl	80181c2 <memmove>
 8019e72:	68a3      	ldr	r3, [r4, #8]
 8019e74:	1b5b      	subs	r3, r3, r5
 8019e76:	60a3      	str	r3, [r4, #8]
 8019e78:	6823      	ldr	r3, [r4, #0]
 8019e7a:	195d      	adds	r5, r3, r5
 8019e7c:	6025      	str	r5, [r4, #0]
 8019e7e:	9b04      	ldr	r3, [sp, #16]
 8019e80:	19db      	adds	r3, r3, r7
 8019e82:	9304      	str	r3, [sp, #16]
 8019e84:	9b00      	ldr	r3, [sp, #0]
 8019e86:	1bdb      	subs	r3, r3, r7
 8019e88:	9300      	str	r3, [sp, #0]
 8019e8a:	9b03      	ldr	r3, [sp, #12]
 8019e8c:	689b      	ldr	r3, [r3, #8]
 8019e8e:	1bdf      	subs	r7, r3, r7
 8019e90:	9305      	str	r3, [sp, #20]
 8019e92:	9b03      	ldr	r3, [sp, #12]
 8019e94:	609f      	str	r7, [r3, #8]
 8019e96:	d1a0      	bne.n	8019dda <__sfvwrite_r+0x136>
 8019e98:	e70d      	b.n	8019cb6 <__sfvwrite_r+0x12>
 8019e9a:	0032      	movs	r2, r6
 8019e9c:	9802      	ldr	r0, [sp, #8]
 8019e9e:	f7fa fa7d 	bl	801439c <_realloc_r>
 8019ea2:	1e05      	subs	r5, r0, #0
 8019ea4:	d1d5      	bne.n	8019e52 <__sfvwrite_r+0x1ae>
 8019ea6:	6921      	ldr	r1, [r4, #16]
 8019ea8:	9802      	ldr	r0, [sp, #8]
 8019eaa:	f7fd fd39 	bl	8017920 <_free_r>
 8019eae:	2280      	movs	r2, #128	; 0x80
 8019eb0:	89a3      	ldrh	r3, [r4, #12]
 8019eb2:	4393      	bics	r3, r2
 8019eb4:	81a3      	strh	r3, [r4, #12]
 8019eb6:	e7b7      	b.n	8019e28 <__sfvwrite_r+0x184>
 8019eb8:	6923      	ldr	r3, [r4, #16]
 8019eba:	4283      	cmp	r3, r0
 8019ebc:	d303      	bcc.n	8019ec6 <__sfvwrite_r+0x222>
 8019ebe:	6967      	ldr	r7, [r4, #20]
 8019ec0:	9b00      	ldr	r3, [sp, #0]
 8019ec2:	429f      	cmp	r7, r3
 8019ec4:	d917      	bls.n	8019ef6 <__sfvwrite_r+0x252>
 8019ec6:	9b00      	ldr	r3, [sp, #0]
 8019ec8:	429d      	cmp	r5, r3
 8019eca:	d900      	bls.n	8019ece <__sfvwrite_r+0x22a>
 8019ecc:	001d      	movs	r5, r3
 8019ece:	002a      	movs	r2, r5
 8019ed0:	9904      	ldr	r1, [sp, #16]
 8019ed2:	f7fe f976 	bl	80181c2 <memmove>
 8019ed6:	68a3      	ldr	r3, [r4, #8]
 8019ed8:	6822      	ldr	r2, [r4, #0]
 8019eda:	1b5b      	subs	r3, r3, r5
 8019edc:	1952      	adds	r2, r2, r5
 8019ede:	002f      	movs	r7, r5
 8019ee0:	60a3      	str	r3, [r4, #8]
 8019ee2:	6022      	str	r2, [r4, #0]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d1ca      	bne.n	8019e7e <__sfvwrite_r+0x1da>
 8019ee8:	0021      	movs	r1, r4
 8019eea:	9802      	ldr	r0, [sp, #8]
 8019eec:	f7ff fdd2 	bl	8019a94 <_fflush_r>
 8019ef0:	2800      	cmp	r0, #0
 8019ef2:	d0c4      	beq.n	8019e7e <__sfvwrite_r+0x1da>
 8019ef4:	e79b      	b.n	8019e2e <__sfvwrite_r+0x18a>
 8019ef6:	9a00      	ldr	r2, [sp, #0]
 8019ef8:	4b1b      	ldr	r3, [pc, #108]	; (8019f68 <__sfvwrite_r+0x2c4>)
 8019efa:	0010      	movs	r0, r2
 8019efc:	429a      	cmp	r2, r3
 8019efe:	d900      	bls.n	8019f02 <__sfvwrite_r+0x25e>
 8019f00:	481a      	ldr	r0, [pc, #104]	; (8019f6c <__sfvwrite_r+0x2c8>)
 8019f02:	0039      	movs	r1, r7
 8019f04:	f7e6 f9ae 	bl	8000264 <__divsi3>
 8019f08:	003b      	movs	r3, r7
 8019f0a:	9a04      	ldr	r2, [sp, #16]
 8019f0c:	4343      	muls	r3, r0
 8019f0e:	69e1      	ldr	r1, [r4, #28]
 8019f10:	9802      	ldr	r0, [sp, #8]
 8019f12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019f14:	47a8      	blx	r5
 8019f16:	1e07      	subs	r7, r0, #0
 8019f18:	dcb1      	bgt.n	8019e7e <__sfvwrite_r+0x1da>
 8019f1a:	e788      	b.n	8019e2e <__sfvwrite_r+0x18a>
 8019f1c:	9b01      	ldr	r3, [sp, #4]
 8019f1e:	2000      	movs	r0, #0
 8019f20:	681e      	ldr	r6, [r3, #0]
 8019f22:	685b      	ldr	r3, [r3, #4]
 8019f24:	9300      	str	r3, [sp, #0]
 8019f26:	9b01      	ldr	r3, [sp, #4]
 8019f28:	3308      	adds	r3, #8
 8019f2a:	9301      	str	r3, [sp, #4]
 8019f2c:	e6df      	b.n	8019cee <__sfvwrite_r+0x4a>
 8019f2e:	9a04      	ldr	r2, [sp, #16]
 8019f30:	4293      	cmp	r3, r2
 8019f32:	dc08      	bgt.n	8019f46 <__sfvwrite_r+0x2a2>
 8019f34:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019f36:	0032      	movs	r2, r6
 8019f38:	69e1      	ldr	r1, [r4, #28]
 8019f3a:	9802      	ldr	r0, [sp, #8]
 8019f3c:	47a8      	blx	r5
 8019f3e:	1e05      	subs	r5, r0, #0
 8019f40:	dd00      	ble.n	8019f44 <__sfvwrite_r+0x2a0>
 8019f42:	e703      	b.n	8019d4c <__sfvwrite_r+0xa8>
 8019f44:	e773      	b.n	8019e2e <__sfvwrite_r+0x18a>
 8019f46:	9a04      	ldr	r2, [sp, #16]
 8019f48:	0031      	movs	r1, r6
 8019f4a:	f7fe f93a 	bl	80181c2 <memmove>
 8019f4e:	9a04      	ldr	r2, [sp, #16]
 8019f50:	68a3      	ldr	r3, [r4, #8]
 8019f52:	0015      	movs	r5, r2
 8019f54:	1a9b      	subs	r3, r3, r2
 8019f56:	60a3      	str	r3, [r4, #8]
 8019f58:	6823      	ldr	r3, [r4, #0]
 8019f5a:	189b      	adds	r3, r3, r2
 8019f5c:	6023      	str	r3, [r4, #0]
 8019f5e:	e6f5      	b.n	8019d4c <__sfvwrite_r+0xa8>
 8019f60:	7ffffc00 	.word	0x7ffffc00
 8019f64:	fffffb7f 	.word	0xfffffb7f
 8019f68:	7ffffffe 	.word	0x7ffffffe
 8019f6c:	7fffffff 	.word	0x7fffffff

08019f70 <_fwalk_reent>:
 8019f70:	23b8      	movs	r3, #184	; 0xb8
 8019f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f74:	0006      	movs	r6, r0
 8019f76:	2700      	movs	r7, #0
 8019f78:	009b      	lsls	r3, r3, #2
 8019f7a:	9101      	str	r1, [sp, #4]
 8019f7c:	18c4      	adds	r4, r0, r3
 8019f7e:	6863      	ldr	r3, [r4, #4]
 8019f80:	68a5      	ldr	r5, [r4, #8]
 8019f82:	9300      	str	r3, [sp, #0]
 8019f84:	9b00      	ldr	r3, [sp, #0]
 8019f86:	3b01      	subs	r3, #1
 8019f88:	9300      	str	r3, [sp, #0]
 8019f8a:	d504      	bpl.n	8019f96 <_fwalk_reent+0x26>
 8019f8c:	6824      	ldr	r4, [r4, #0]
 8019f8e:	2c00      	cmp	r4, #0
 8019f90:	d1f5      	bne.n	8019f7e <_fwalk_reent+0xe>
 8019f92:	0038      	movs	r0, r7
 8019f94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019f96:	89ab      	ldrh	r3, [r5, #12]
 8019f98:	2b01      	cmp	r3, #1
 8019f9a:	d908      	bls.n	8019fae <_fwalk_reent+0x3e>
 8019f9c:	220e      	movs	r2, #14
 8019f9e:	5eab      	ldrsh	r3, [r5, r2]
 8019fa0:	3301      	adds	r3, #1
 8019fa2:	d004      	beq.n	8019fae <_fwalk_reent+0x3e>
 8019fa4:	0029      	movs	r1, r5
 8019fa6:	0030      	movs	r0, r6
 8019fa8:	9b01      	ldr	r3, [sp, #4]
 8019faa:	4798      	blx	r3
 8019fac:	4307      	orrs	r7, r0
 8019fae:	3568      	adds	r5, #104	; 0x68
 8019fb0:	e7e8      	b.n	8019f84 <_fwalk_reent+0x14>
	...

08019fb4 <__swhatbuf_r>:
 8019fb4:	b570      	push	{r4, r5, r6, lr}
 8019fb6:	000e      	movs	r6, r1
 8019fb8:	001d      	movs	r5, r3
 8019fba:	230e      	movs	r3, #14
 8019fbc:	5ec9      	ldrsh	r1, [r1, r3]
 8019fbe:	0014      	movs	r4, r2
 8019fc0:	b096      	sub	sp, #88	; 0x58
 8019fc2:	2900      	cmp	r1, #0
 8019fc4:	da0b      	bge.n	8019fde <__swhatbuf_r+0x2a>
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	602b      	str	r3, [r5, #0]
 8019fca:	89b1      	ldrh	r1, [r6, #12]
 8019fcc:	2280      	movs	r2, #128	; 0x80
 8019fce:	0008      	movs	r0, r1
 8019fd0:	4010      	ands	r0, r2
 8019fd2:	4211      	tst	r1, r2
 8019fd4:	d117      	bne.n	801a006 <__swhatbuf_r+0x52>
 8019fd6:	2380      	movs	r3, #128	; 0x80
 8019fd8:	00db      	lsls	r3, r3, #3
 8019fda:	6023      	str	r3, [r4, #0]
 8019fdc:	e016      	b.n	801a00c <__swhatbuf_r+0x58>
 8019fde:	466a      	mov	r2, sp
 8019fe0:	f000 f9e4 	bl	801a3ac <_fstat_r>
 8019fe4:	2800      	cmp	r0, #0
 8019fe6:	dbee      	blt.n	8019fc6 <__swhatbuf_r+0x12>
 8019fe8:	23f0      	movs	r3, #240	; 0xf0
 8019fea:	9901      	ldr	r1, [sp, #4]
 8019fec:	021b      	lsls	r3, r3, #8
 8019fee:	4019      	ands	r1, r3
 8019ff0:	4b07      	ldr	r3, [pc, #28]	; (801a010 <__swhatbuf_r+0x5c>)
 8019ff2:	2080      	movs	r0, #128	; 0x80
 8019ff4:	18c9      	adds	r1, r1, r3
 8019ff6:	424b      	negs	r3, r1
 8019ff8:	4159      	adcs	r1, r3
 8019ffa:	2380      	movs	r3, #128	; 0x80
 8019ffc:	00db      	lsls	r3, r3, #3
 8019ffe:	6029      	str	r1, [r5, #0]
 801a000:	0100      	lsls	r0, r0, #4
 801a002:	6023      	str	r3, [r4, #0]
 801a004:	e002      	b.n	801a00c <__swhatbuf_r+0x58>
 801a006:	2240      	movs	r2, #64	; 0x40
 801a008:	0018      	movs	r0, r3
 801a00a:	6022      	str	r2, [r4, #0]
 801a00c:	b016      	add	sp, #88	; 0x58
 801a00e:	bd70      	pop	{r4, r5, r6, pc}
 801a010:	ffffe000 	.word	0xffffe000

0801a014 <__smakebuf_r>:
 801a014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a016:	2602      	movs	r6, #2
 801a018:	898b      	ldrh	r3, [r1, #12]
 801a01a:	0005      	movs	r5, r0
 801a01c:	000c      	movs	r4, r1
 801a01e:	4233      	tst	r3, r6
 801a020:	d006      	beq.n	801a030 <__smakebuf_r+0x1c>
 801a022:	0023      	movs	r3, r4
 801a024:	3343      	adds	r3, #67	; 0x43
 801a026:	6023      	str	r3, [r4, #0]
 801a028:	6123      	str	r3, [r4, #16]
 801a02a:	2301      	movs	r3, #1
 801a02c:	6163      	str	r3, [r4, #20]
 801a02e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801a030:	466a      	mov	r2, sp
 801a032:	ab01      	add	r3, sp, #4
 801a034:	f7ff ffbe 	bl	8019fb4 <__swhatbuf_r>
 801a038:	9900      	ldr	r1, [sp, #0]
 801a03a:	0007      	movs	r7, r0
 801a03c:	0028      	movs	r0, r5
 801a03e:	f7f9 ff45 	bl	8013ecc <_malloc_r>
 801a042:	2800      	cmp	r0, #0
 801a044:	d108      	bne.n	801a058 <__smakebuf_r+0x44>
 801a046:	220c      	movs	r2, #12
 801a048:	5ea3      	ldrsh	r3, [r4, r2]
 801a04a:	059a      	lsls	r2, r3, #22
 801a04c:	d4ef      	bmi.n	801a02e <__smakebuf_r+0x1a>
 801a04e:	2203      	movs	r2, #3
 801a050:	4393      	bics	r3, r2
 801a052:	431e      	orrs	r6, r3
 801a054:	81a6      	strh	r6, [r4, #12]
 801a056:	e7e4      	b.n	801a022 <__smakebuf_r+0xe>
 801a058:	4b0f      	ldr	r3, [pc, #60]	; (801a098 <__smakebuf_r+0x84>)
 801a05a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801a05c:	2380      	movs	r3, #128	; 0x80
 801a05e:	89a2      	ldrh	r2, [r4, #12]
 801a060:	6020      	str	r0, [r4, #0]
 801a062:	4313      	orrs	r3, r2
 801a064:	81a3      	strh	r3, [r4, #12]
 801a066:	9b00      	ldr	r3, [sp, #0]
 801a068:	6120      	str	r0, [r4, #16]
 801a06a:	6163      	str	r3, [r4, #20]
 801a06c:	9b01      	ldr	r3, [sp, #4]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d00d      	beq.n	801a08e <__smakebuf_r+0x7a>
 801a072:	0028      	movs	r0, r5
 801a074:	230e      	movs	r3, #14
 801a076:	5ee1      	ldrsh	r1, [r4, r3]
 801a078:	f000 f9aa 	bl	801a3d0 <_isatty_r>
 801a07c:	2800      	cmp	r0, #0
 801a07e:	d006      	beq.n	801a08e <__smakebuf_r+0x7a>
 801a080:	2203      	movs	r2, #3
 801a082:	89a3      	ldrh	r3, [r4, #12]
 801a084:	4393      	bics	r3, r2
 801a086:	001a      	movs	r2, r3
 801a088:	2301      	movs	r3, #1
 801a08a:	4313      	orrs	r3, r2
 801a08c:	81a3      	strh	r3, [r4, #12]
 801a08e:	89a0      	ldrh	r0, [r4, #12]
 801a090:	4307      	orrs	r7, r0
 801a092:	81a7      	strh	r7, [r4, #12]
 801a094:	e7cb      	b.n	801a02e <__smakebuf_r+0x1a>
 801a096:	46c0      	nop			; (mov r8, r8)
 801a098:	08019b31 	.word	0x08019b31

0801a09c <_raise_r>:
 801a09c:	b570      	push	{r4, r5, r6, lr}
 801a09e:	0004      	movs	r4, r0
 801a0a0:	000d      	movs	r5, r1
 801a0a2:	291f      	cmp	r1, #31
 801a0a4:	d904      	bls.n	801a0b0 <_raise_r+0x14>
 801a0a6:	2316      	movs	r3, #22
 801a0a8:	6003      	str	r3, [r0, #0]
 801a0aa:	2001      	movs	r0, #1
 801a0ac:	4240      	negs	r0, r0
 801a0ae:	bd70      	pop	{r4, r5, r6, pc}
 801a0b0:	23b7      	movs	r3, #183	; 0xb7
 801a0b2:	009b      	lsls	r3, r3, #2
 801a0b4:	58c3      	ldr	r3, [r0, r3]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d004      	beq.n	801a0c4 <_raise_r+0x28>
 801a0ba:	008a      	lsls	r2, r1, #2
 801a0bc:	189b      	adds	r3, r3, r2
 801a0be:	681a      	ldr	r2, [r3, #0]
 801a0c0:	2a00      	cmp	r2, #0
 801a0c2:	d108      	bne.n	801a0d6 <_raise_r+0x3a>
 801a0c4:	0020      	movs	r0, r4
 801a0c6:	f000 f831 	bl	801a12c <_getpid_r>
 801a0ca:	002a      	movs	r2, r5
 801a0cc:	0001      	movs	r1, r0
 801a0ce:	0020      	movs	r0, r4
 801a0d0:	f000 f81a 	bl	801a108 <_kill_r>
 801a0d4:	e7eb      	b.n	801a0ae <_raise_r+0x12>
 801a0d6:	2000      	movs	r0, #0
 801a0d8:	2a01      	cmp	r2, #1
 801a0da:	d0e8      	beq.n	801a0ae <_raise_r+0x12>
 801a0dc:	1c51      	adds	r1, r2, #1
 801a0de:	d103      	bne.n	801a0e8 <_raise_r+0x4c>
 801a0e0:	2316      	movs	r3, #22
 801a0e2:	3001      	adds	r0, #1
 801a0e4:	6023      	str	r3, [r4, #0]
 801a0e6:	e7e2      	b.n	801a0ae <_raise_r+0x12>
 801a0e8:	2400      	movs	r4, #0
 801a0ea:	0028      	movs	r0, r5
 801a0ec:	601c      	str	r4, [r3, #0]
 801a0ee:	4790      	blx	r2
 801a0f0:	0020      	movs	r0, r4
 801a0f2:	e7dc      	b.n	801a0ae <_raise_r+0x12>

0801a0f4 <raise>:
 801a0f4:	b510      	push	{r4, lr}
 801a0f6:	4b03      	ldr	r3, [pc, #12]	; (801a104 <raise+0x10>)
 801a0f8:	0001      	movs	r1, r0
 801a0fa:	6818      	ldr	r0, [r3, #0]
 801a0fc:	f7ff ffce 	bl	801a09c <_raise_r>
 801a100:	bd10      	pop	{r4, pc}
 801a102:	46c0      	nop			; (mov r8, r8)
 801a104:	200000d0 	.word	0x200000d0

0801a108 <_kill_r>:
 801a108:	2300      	movs	r3, #0
 801a10a:	b570      	push	{r4, r5, r6, lr}
 801a10c:	4d06      	ldr	r5, [pc, #24]	; (801a128 <_kill_r+0x20>)
 801a10e:	0004      	movs	r4, r0
 801a110:	0008      	movs	r0, r1
 801a112:	0011      	movs	r1, r2
 801a114:	602b      	str	r3, [r5, #0]
 801a116:	f000 f9b5 	bl	801a484 <_kill>
 801a11a:	1c43      	adds	r3, r0, #1
 801a11c:	d103      	bne.n	801a126 <_kill_r+0x1e>
 801a11e:	682b      	ldr	r3, [r5, #0]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d000      	beq.n	801a126 <_kill_r+0x1e>
 801a124:	6023      	str	r3, [r4, #0]
 801a126:	bd70      	pop	{r4, r5, r6, pc}
 801a128:	20007204 	.word	0x20007204

0801a12c <_getpid_r>:
 801a12c:	b510      	push	{r4, lr}
 801a12e:	f000 f999 	bl	801a464 <_getpid>
 801a132:	bd10      	pop	{r4, pc}

0801a134 <__sread>:
 801a134:	b570      	push	{r4, r5, r6, lr}
 801a136:	000c      	movs	r4, r1
 801a138:	250e      	movs	r5, #14
 801a13a:	5f49      	ldrsh	r1, [r1, r5]
 801a13c:	f000 f96e 	bl	801a41c <_read_r>
 801a140:	2800      	cmp	r0, #0
 801a142:	db03      	blt.n	801a14c <__sread+0x18>
 801a144:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801a146:	181b      	adds	r3, r3, r0
 801a148:	6523      	str	r3, [r4, #80]	; 0x50
 801a14a:	bd70      	pop	{r4, r5, r6, pc}
 801a14c:	89a3      	ldrh	r3, [r4, #12]
 801a14e:	4a02      	ldr	r2, [pc, #8]	; (801a158 <__sread+0x24>)
 801a150:	4013      	ands	r3, r2
 801a152:	81a3      	strh	r3, [r4, #12]
 801a154:	e7f9      	b.n	801a14a <__sread+0x16>
 801a156:	46c0      	nop			; (mov r8, r8)
 801a158:	ffffefff 	.word	0xffffefff

0801a15c <__swrite>:
 801a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a15e:	001f      	movs	r7, r3
 801a160:	898b      	ldrh	r3, [r1, #12]
 801a162:	0005      	movs	r5, r0
 801a164:	000c      	movs	r4, r1
 801a166:	0016      	movs	r6, r2
 801a168:	05db      	lsls	r3, r3, #23
 801a16a:	d505      	bpl.n	801a178 <__swrite+0x1c>
 801a16c:	230e      	movs	r3, #14
 801a16e:	5ec9      	ldrsh	r1, [r1, r3]
 801a170:	2200      	movs	r2, #0
 801a172:	2302      	movs	r3, #2
 801a174:	f000 f93e 	bl	801a3f4 <_lseek_r>
 801a178:	89a3      	ldrh	r3, [r4, #12]
 801a17a:	4a05      	ldr	r2, [pc, #20]	; (801a190 <__swrite+0x34>)
 801a17c:	0028      	movs	r0, r5
 801a17e:	4013      	ands	r3, r2
 801a180:	81a3      	strh	r3, [r4, #12]
 801a182:	0032      	movs	r2, r6
 801a184:	230e      	movs	r3, #14
 801a186:	5ee1      	ldrsh	r1, [r4, r3]
 801a188:	003b      	movs	r3, r7
 801a18a:	f000 f889 	bl	801a2a0 <_write_r>
 801a18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a190:	ffffefff 	.word	0xffffefff

0801a194 <__sseek>:
 801a194:	b570      	push	{r4, r5, r6, lr}
 801a196:	000c      	movs	r4, r1
 801a198:	250e      	movs	r5, #14
 801a19a:	5f49      	ldrsh	r1, [r1, r5]
 801a19c:	f000 f92a 	bl	801a3f4 <_lseek_r>
 801a1a0:	89a3      	ldrh	r3, [r4, #12]
 801a1a2:	1c42      	adds	r2, r0, #1
 801a1a4:	d103      	bne.n	801a1ae <__sseek+0x1a>
 801a1a6:	4a05      	ldr	r2, [pc, #20]	; (801a1bc <__sseek+0x28>)
 801a1a8:	4013      	ands	r3, r2
 801a1aa:	81a3      	strh	r3, [r4, #12]
 801a1ac:	bd70      	pop	{r4, r5, r6, pc}
 801a1ae:	2280      	movs	r2, #128	; 0x80
 801a1b0:	0152      	lsls	r2, r2, #5
 801a1b2:	4313      	orrs	r3, r2
 801a1b4:	81a3      	strh	r3, [r4, #12]
 801a1b6:	6520      	str	r0, [r4, #80]	; 0x50
 801a1b8:	e7f8      	b.n	801a1ac <__sseek+0x18>
 801a1ba:	46c0      	nop			; (mov r8, r8)
 801a1bc:	ffffefff 	.word	0xffffefff

0801a1c0 <__sclose>:
 801a1c0:	b510      	push	{r4, lr}
 801a1c2:	230e      	movs	r3, #14
 801a1c4:	5ec9      	ldrsh	r1, [r1, r3]
 801a1c6:	f000 f87f 	bl	801a2c8 <_close_r>
 801a1ca:	bd10      	pop	{r4, pc}

0801a1cc <__swbuf_r>:
 801a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ce:	0006      	movs	r6, r0
 801a1d0:	000d      	movs	r5, r1
 801a1d2:	0014      	movs	r4, r2
 801a1d4:	2800      	cmp	r0, #0
 801a1d6:	d004      	beq.n	801a1e2 <__swbuf_r+0x16>
 801a1d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d101      	bne.n	801a1e2 <__swbuf_r+0x16>
 801a1de:	f7ff fccf 	bl	8019b80 <__sinit>
 801a1e2:	69a3      	ldr	r3, [r4, #24]
 801a1e4:	60a3      	str	r3, [r4, #8]
 801a1e6:	89a3      	ldrh	r3, [r4, #12]
 801a1e8:	071b      	lsls	r3, r3, #28
 801a1ea:	d52e      	bpl.n	801a24a <__swbuf_r+0x7e>
 801a1ec:	6923      	ldr	r3, [r4, #16]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d02b      	beq.n	801a24a <__swbuf_r+0x7e>
 801a1f2:	230c      	movs	r3, #12
 801a1f4:	5ee2      	ldrsh	r2, [r4, r3]
 801a1f6:	2380      	movs	r3, #128	; 0x80
 801a1f8:	019b      	lsls	r3, r3, #6
 801a1fa:	b2ef      	uxtb	r7, r5
 801a1fc:	b2ed      	uxtb	r5, r5
 801a1fe:	421a      	tst	r2, r3
 801a200:	d02c      	beq.n	801a25c <__swbuf_r+0x90>
 801a202:	6823      	ldr	r3, [r4, #0]
 801a204:	6922      	ldr	r2, [r4, #16]
 801a206:	1a98      	subs	r0, r3, r2
 801a208:	6963      	ldr	r3, [r4, #20]
 801a20a:	4283      	cmp	r3, r0
 801a20c:	dc05      	bgt.n	801a21a <__swbuf_r+0x4e>
 801a20e:	0021      	movs	r1, r4
 801a210:	0030      	movs	r0, r6
 801a212:	f7ff fc3f 	bl	8019a94 <_fflush_r>
 801a216:	2800      	cmp	r0, #0
 801a218:	d11d      	bne.n	801a256 <__swbuf_r+0x8a>
 801a21a:	68a3      	ldr	r3, [r4, #8]
 801a21c:	3001      	adds	r0, #1
 801a21e:	3b01      	subs	r3, #1
 801a220:	60a3      	str	r3, [r4, #8]
 801a222:	6823      	ldr	r3, [r4, #0]
 801a224:	1c5a      	adds	r2, r3, #1
 801a226:	6022      	str	r2, [r4, #0]
 801a228:	701f      	strb	r7, [r3, #0]
 801a22a:	6963      	ldr	r3, [r4, #20]
 801a22c:	4283      	cmp	r3, r0
 801a22e:	d004      	beq.n	801a23a <__swbuf_r+0x6e>
 801a230:	89a3      	ldrh	r3, [r4, #12]
 801a232:	07db      	lsls	r3, r3, #31
 801a234:	d507      	bpl.n	801a246 <__swbuf_r+0x7a>
 801a236:	2d0a      	cmp	r5, #10
 801a238:	d105      	bne.n	801a246 <__swbuf_r+0x7a>
 801a23a:	0021      	movs	r1, r4
 801a23c:	0030      	movs	r0, r6
 801a23e:	f7ff fc29 	bl	8019a94 <_fflush_r>
 801a242:	2800      	cmp	r0, #0
 801a244:	d107      	bne.n	801a256 <__swbuf_r+0x8a>
 801a246:	0028      	movs	r0, r5
 801a248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a24a:	0021      	movs	r1, r4
 801a24c:	0030      	movs	r0, r6
 801a24e:	f7ff fb1d 	bl	801988c <__swsetup_r>
 801a252:	2800      	cmp	r0, #0
 801a254:	d0cd      	beq.n	801a1f2 <__swbuf_r+0x26>
 801a256:	2501      	movs	r5, #1
 801a258:	426d      	negs	r5, r5
 801a25a:	e7f4      	b.n	801a246 <__swbuf_r+0x7a>
 801a25c:	4313      	orrs	r3, r2
 801a25e:	81a3      	strh	r3, [r4, #12]
 801a260:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a262:	4b02      	ldr	r3, [pc, #8]	; (801a26c <__swbuf_r+0xa0>)
 801a264:	4013      	ands	r3, r2
 801a266:	6663      	str	r3, [r4, #100]	; 0x64
 801a268:	e7cb      	b.n	801a202 <__swbuf_r+0x36>
 801a26a:	46c0      	nop			; (mov r8, r8)
 801a26c:	ffffdfff 	.word	0xffffdfff

0801a270 <_wcrtomb_r>:
 801a270:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a272:	001d      	movs	r5, r3
 801a274:	4b09      	ldr	r3, [pc, #36]	; (801a29c <_wcrtomb_r+0x2c>)
 801a276:	0004      	movs	r4, r0
 801a278:	33e0      	adds	r3, #224	; 0xe0
 801a27a:	681e      	ldr	r6, [r3, #0]
 801a27c:	002b      	movs	r3, r5
 801a27e:	2900      	cmp	r1, #0
 801a280:	d101      	bne.n	801a286 <_wcrtomb_r+0x16>
 801a282:	000a      	movs	r2, r1
 801a284:	a901      	add	r1, sp, #4
 801a286:	0020      	movs	r0, r4
 801a288:	47b0      	blx	r6
 801a28a:	1c43      	adds	r3, r0, #1
 801a28c:	d103      	bne.n	801a296 <_wcrtomb_r+0x26>
 801a28e:	2300      	movs	r3, #0
 801a290:	602b      	str	r3, [r5, #0]
 801a292:	338a      	adds	r3, #138	; 0x8a
 801a294:	6023      	str	r3, [r4, #0]
 801a296:	b004      	add	sp, #16
 801a298:	bd70      	pop	{r4, r5, r6, pc}
 801a29a:	46c0      	nop			; (mov r8, r8)
 801a29c:	20000918 	.word	0x20000918

0801a2a0 <_write_r>:
 801a2a0:	b570      	push	{r4, r5, r6, lr}
 801a2a2:	0004      	movs	r4, r0
 801a2a4:	0008      	movs	r0, r1
 801a2a6:	0011      	movs	r1, r2
 801a2a8:	001a      	movs	r2, r3
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	4d05      	ldr	r5, [pc, #20]	; (801a2c4 <_write_r+0x24>)
 801a2ae:	602b      	str	r3, [r5, #0]
 801a2b0:	f000 f910 	bl	801a4d4 <_write>
 801a2b4:	1c43      	adds	r3, r0, #1
 801a2b6:	d103      	bne.n	801a2c0 <_write_r+0x20>
 801a2b8:	682b      	ldr	r3, [r5, #0]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d000      	beq.n	801a2c0 <_write_r+0x20>
 801a2be:	6023      	str	r3, [r4, #0]
 801a2c0:	bd70      	pop	{r4, r5, r6, pc}
 801a2c2:	46c0      	nop			; (mov r8, r8)
 801a2c4:	20007204 	.word	0x20007204

0801a2c8 <_close_r>:
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	b570      	push	{r4, r5, r6, lr}
 801a2cc:	4d06      	ldr	r5, [pc, #24]	; (801a2e8 <_close_r+0x20>)
 801a2ce:	0004      	movs	r4, r0
 801a2d0:	0008      	movs	r0, r1
 801a2d2:	602b      	str	r3, [r5, #0]
 801a2d4:	f000 f8b6 	bl	801a444 <_close>
 801a2d8:	1c43      	adds	r3, r0, #1
 801a2da:	d103      	bne.n	801a2e4 <_close_r+0x1c>
 801a2dc:	682b      	ldr	r3, [r5, #0]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d000      	beq.n	801a2e4 <_close_r+0x1c>
 801a2e2:	6023      	str	r3, [r4, #0]
 801a2e4:	bd70      	pop	{r4, r5, r6, pc}
 801a2e6:	46c0      	nop			; (mov r8, r8)
 801a2e8:	20007204 	.word	0x20007204

0801a2ec <_fclose_r>:
 801a2ec:	b570      	push	{r4, r5, r6, lr}
 801a2ee:	0005      	movs	r5, r0
 801a2f0:	1e0c      	subs	r4, r1, #0
 801a2f2:	d102      	bne.n	801a2fa <_fclose_r+0xe>
 801a2f4:	2600      	movs	r6, #0
 801a2f6:	0030      	movs	r0, r6
 801a2f8:	bd70      	pop	{r4, r5, r6, pc}
 801a2fa:	2800      	cmp	r0, #0
 801a2fc:	d004      	beq.n	801a308 <_fclose_r+0x1c>
 801a2fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a300:	2b00      	cmp	r3, #0
 801a302:	d101      	bne.n	801a308 <_fclose_r+0x1c>
 801a304:	f7ff fc3c 	bl	8019b80 <__sinit>
 801a308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a30a:	07db      	lsls	r3, r3, #31
 801a30c:	d405      	bmi.n	801a31a <_fclose_r+0x2e>
 801a30e:	89a3      	ldrh	r3, [r4, #12]
 801a310:	059b      	lsls	r3, r3, #22
 801a312:	d402      	bmi.n	801a31a <_fclose_r+0x2e>
 801a314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a316:	f7fd ff35 	bl	8018184 <__retarget_lock_acquire_recursive>
 801a31a:	220c      	movs	r2, #12
 801a31c:	5ea3      	ldrsh	r3, [r4, r2]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d109      	bne.n	801a336 <_fclose_r+0x4a>
 801a322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a324:	3301      	adds	r3, #1
 801a326:	0016      	movs	r6, r2
 801a328:	401e      	ands	r6, r3
 801a32a:	421a      	tst	r2, r3
 801a32c:	d1e2      	bne.n	801a2f4 <_fclose_r+0x8>
 801a32e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a330:	f7fd ff29 	bl	8018186 <__retarget_lock_release_recursive>
 801a334:	e7df      	b.n	801a2f6 <_fclose_r+0xa>
 801a336:	0021      	movs	r1, r4
 801a338:	0028      	movs	r0, r5
 801a33a:	f7ff fb13 	bl	8019964 <__sflush_r>
 801a33e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a340:	0006      	movs	r6, r0
 801a342:	2b00      	cmp	r3, #0
 801a344:	d006      	beq.n	801a354 <_fclose_r+0x68>
 801a346:	0028      	movs	r0, r5
 801a348:	69e1      	ldr	r1, [r4, #28]
 801a34a:	4798      	blx	r3
 801a34c:	2800      	cmp	r0, #0
 801a34e:	da01      	bge.n	801a354 <_fclose_r+0x68>
 801a350:	2601      	movs	r6, #1
 801a352:	4276      	negs	r6, r6
 801a354:	89a3      	ldrh	r3, [r4, #12]
 801a356:	061b      	lsls	r3, r3, #24
 801a358:	d503      	bpl.n	801a362 <_fclose_r+0x76>
 801a35a:	0028      	movs	r0, r5
 801a35c:	6921      	ldr	r1, [r4, #16]
 801a35e:	f7fd fadf 	bl	8017920 <_free_r>
 801a362:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a364:	2900      	cmp	r1, #0
 801a366:	d008      	beq.n	801a37a <_fclose_r+0x8e>
 801a368:	0023      	movs	r3, r4
 801a36a:	3340      	adds	r3, #64	; 0x40
 801a36c:	4299      	cmp	r1, r3
 801a36e:	d002      	beq.n	801a376 <_fclose_r+0x8a>
 801a370:	0028      	movs	r0, r5
 801a372:	f7fd fad5 	bl	8017920 <_free_r>
 801a376:	2300      	movs	r3, #0
 801a378:	6323      	str	r3, [r4, #48]	; 0x30
 801a37a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a37c:	2900      	cmp	r1, #0
 801a37e:	d004      	beq.n	801a38a <_fclose_r+0x9e>
 801a380:	0028      	movs	r0, r5
 801a382:	f7fd facd 	bl	8017920 <_free_r>
 801a386:	2300      	movs	r3, #0
 801a388:	6463      	str	r3, [r4, #68]	; 0x44
 801a38a:	f7ff fbd9 	bl	8019b40 <__sfp_lock_acquire>
 801a38e:	2300      	movs	r3, #0
 801a390:	81a3      	strh	r3, [r4, #12]
 801a392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a394:	07db      	lsls	r3, r3, #31
 801a396:	d402      	bmi.n	801a39e <_fclose_r+0xb2>
 801a398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a39a:	f7fd fef4 	bl	8018186 <__retarget_lock_release_recursive>
 801a39e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3a0:	f7fd feef 	bl	8018182 <__retarget_lock_close_recursive>
 801a3a4:	f7ff fbd4 	bl	8019b50 <__sfp_lock_release>
 801a3a8:	e7a5      	b.n	801a2f6 <_fclose_r+0xa>
	...

0801a3ac <_fstat_r>:
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	b570      	push	{r4, r5, r6, lr}
 801a3b0:	4d06      	ldr	r5, [pc, #24]	; (801a3cc <_fstat_r+0x20>)
 801a3b2:	0004      	movs	r4, r0
 801a3b4:	0008      	movs	r0, r1
 801a3b6:	0011      	movs	r1, r2
 801a3b8:	602b      	str	r3, [r5, #0]
 801a3ba:	f000 f84b 	bl	801a454 <_fstat>
 801a3be:	1c43      	adds	r3, r0, #1
 801a3c0:	d103      	bne.n	801a3ca <_fstat_r+0x1e>
 801a3c2:	682b      	ldr	r3, [r5, #0]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d000      	beq.n	801a3ca <_fstat_r+0x1e>
 801a3c8:	6023      	str	r3, [r4, #0]
 801a3ca:	bd70      	pop	{r4, r5, r6, pc}
 801a3cc:	20007204 	.word	0x20007204

0801a3d0 <_isatty_r>:
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	b570      	push	{r4, r5, r6, lr}
 801a3d4:	4d06      	ldr	r5, [pc, #24]	; (801a3f0 <_isatty_r+0x20>)
 801a3d6:	0004      	movs	r4, r0
 801a3d8:	0008      	movs	r0, r1
 801a3da:	602b      	str	r3, [r5, #0]
 801a3dc:	f000 f84a 	bl	801a474 <_isatty>
 801a3e0:	1c43      	adds	r3, r0, #1
 801a3e2:	d103      	bne.n	801a3ec <_isatty_r+0x1c>
 801a3e4:	682b      	ldr	r3, [r5, #0]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d000      	beq.n	801a3ec <_isatty_r+0x1c>
 801a3ea:	6023      	str	r3, [r4, #0]
 801a3ec:	bd70      	pop	{r4, r5, r6, pc}
 801a3ee:	46c0      	nop			; (mov r8, r8)
 801a3f0:	20007204 	.word	0x20007204

0801a3f4 <_lseek_r>:
 801a3f4:	b570      	push	{r4, r5, r6, lr}
 801a3f6:	0004      	movs	r4, r0
 801a3f8:	0008      	movs	r0, r1
 801a3fa:	0011      	movs	r1, r2
 801a3fc:	001a      	movs	r2, r3
 801a3fe:	2300      	movs	r3, #0
 801a400:	4d05      	ldr	r5, [pc, #20]	; (801a418 <_lseek_r+0x24>)
 801a402:	602b      	str	r3, [r5, #0]
 801a404:	f000 f846 	bl	801a494 <_lseek>
 801a408:	1c43      	adds	r3, r0, #1
 801a40a:	d103      	bne.n	801a414 <_lseek_r+0x20>
 801a40c:	682b      	ldr	r3, [r5, #0]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d000      	beq.n	801a414 <_lseek_r+0x20>
 801a412:	6023      	str	r3, [r4, #0]
 801a414:	bd70      	pop	{r4, r5, r6, pc}
 801a416:	46c0      	nop			; (mov r8, r8)
 801a418:	20007204 	.word	0x20007204

0801a41c <_read_r>:
 801a41c:	b570      	push	{r4, r5, r6, lr}
 801a41e:	0004      	movs	r4, r0
 801a420:	0008      	movs	r0, r1
 801a422:	0011      	movs	r1, r2
 801a424:	001a      	movs	r2, r3
 801a426:	2300      	movs	r3, #0
 801a428:	4d05      	ldr	r5, [pc, #20]	; (801a440 <_read_r+0x24>)
 801a42a:	602b      	str	r3, [r5, #0]
 801a42c:	f000 f83a 	bl	801a4a4 <_read>
 801a430:	1c43      	adds	r3, r0, #1
 801a432:	d103      	bne.n	801a43c <_read_r+0x20>
 801a434:	682b      	ldr	r3, [r5, #0]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d000      	beq.n	801a43c <_read_r+0x20>
 801a43a:	6023      	str	r3, [r4, #0]
 801a43c:	bd70      	pop	{r4, r5, r6, pc}
 801a43e:	46c0      	nop			; (mov r8, r8)
 801a440:	20007204 	.word	0x20007204

0801a444 <_close>:
 801a444:	2258      	movs	r2, #88	; 0x58
 801a446:	2001      	movs	r0, #1
 801a448:	4b01      	ldr	r3, [pc, #4]	; (801a450 <_close+0xc>)
 801a44a:	4240      	negs	r0, r0
 801a44c:	601a      	str	r2, [r3, #0]
 801a44e:	4770      	bx	lr
 801a450:	20007204 	.word	0x20007204

0801a454 <_fstat>:
 801a454:	2258      	movs	r2, #88	; 0x58
 801a456:	2001      	movs	r0, #1
 801a458:	4b01      	ldr	r3, [pc, #4]	; (801a460 <_fstat+0xc>)
 801a45a:	4240      	negs	r0, r0
 801a45c:	601a      	str	r2, [r3, #0]
 801a45e:	4770      	bx	lr
 801a460:	20007204 	.word	0x20007204

0801a464 <_getpid>:
 801a464:	2258      	movs	r2, #88	; 0x58
 801a466:	2001      	movs	r0, #1
 801a468:	4b01      	ldr	r3, [pc, #4]	; (801a470 <_getpid+0xc>)
 801a46a:	4240      	negs	r0, r0
 801a46c:	601a      	str	r2, [r3, #0]
 801a46e:	4770      	bx	lr
 801a470:	20007204 	.word	0x20007204

0801a474 <_isatty>:
 801a474:	2258      	movs	r2, #88	; 0x58
 801a476:	4b02      	ldr	r3, [pc, #8]	; (801a480 <_isatty+0xc>)
 801a478:	2000      	movs	r0, #0
 801a47a:	601a      	str	r2, [r3, #0]
 801a47c:	4770      	bx	lr
 801a47e:	46c0      	nop			; (mov r8, r8)
 801a480:	20007204 	.word	0x20007204

0801a484 <_kill>:
 801a484:	2258      	movs	r2, #88	; 0x58
 801a486:	2001      	movs	r0, #1
 801a488:	4b01      	ldr	r3, [pc, #4]	; (801a490 <_kill+0xc>)
 801a48a:	4240      	negs	r0, r0
 801a48c:	601a      	str	r2, [r3, #0]
 801a48e:	4770      	bx	lr
 801a490:	20007204 	.word	0x20007204

0801a494 <_lseek>:
 801a494:	2258      	movs	r2, #88	; 0x58
 801a496:	2001      	movs	r0, #1
 801a498:	4b01      	ldr	r3, [pc, #4]	; (801a4a0 <_lseek+0xc>)
 801a49a:	4240      	negs	r0, r0
 801a49c:	601a      	str	r2, [r3, #0]
 801a49e:	4770      	bx	lr
 801a4a0:	20007204 	.word	0x20007204

0801a4a4 <_read>:
 801a4a4:	2258      	movs	r2, #88	; 0x58
 801a4a6:	2001      	movs	r0, #1
 801a4a8:	4b01      	ldr	r3, [pc, #4]	; (801a4b0 <_read+0xc>)
 801a4aa:	4240      	negs	r0, r0
 801a4ac:	601a      	str	r2, [r3, #0]
 801a4ae:	4770      	bx	lr
 801a4b0:	20007204 	.word	0x20007204

0801a4b4 <_sbrk>:
 801a4b4:	4a05      	ldr	r2, [pc, #20]	; (801a4cc <_sbrk+0x18>)
 801a4b6:	0003      	movs	r3, r0
 801a4b8:	6811      	ldr	r1, [r2, #0]
 801a4ba:	2900      	cmp	r1, #0
 801a4bc:	d101      	bne.n	801a4c2 <_sbrk+0xe>
 801a4be:	4904      	ldr	r1, [pc, #16]	; (801a4d0 <_sbrk+0x1c>)
 801a4c0:	6011      	str	r1, [r2, #0]
 801a4c2:	6810      	ldr	r0, [r2, #0]
 801a4c4:	18c3      	adds	r3, r0, r3
 801a4c6:	6013      	str	r3, [r2, #0]
 801a4c8:	4770      	bx	lr
 801a4ca:	46c0      	nop			; (mov r8, r8)
 801a4cc:	20006c98 	.word	0x20006c98
 801a4d0:	20007208 	.word	0x20007208

0801a4d4 <_write>:
 801a4d4:	2258      	movs	r2, #88	; 0x58
 801a4d6:	2001      	movs	r0, #1
 801a4d8:	4b01      	ldr	r3, [pc, #4]	; (801a4e0 <_write+0xc>)
 801a4da:	4240      	negs	r0, r0
 801a4dc:	601a      	str	r2, [r3, #0]
 801a4de:	4770      	bx	lr
 801a4e0:	20007204 	.word	0x20007204

0801a4e4 <_exit>:
 801a4e4:	e7fe      	b.n	801a4e4 <_exit>
	...

0801a4e8 <_init>:
 801a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4ea:	46c0      	nop			; (mov r8, r8)
 801a4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4ee:	bc08      	pop	{r3}
 801a4f0:	469e      	mov	lr, r3
 801a4f2:	4770      	bx	lr

0801a4f4 <_fini>:
 801a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4f6:	46c0      	nop			; (mov r8, r8)
 801a4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4fa:	bc08      	pop	{r3}
 801a4fc:	469e      	mov	lr, r3
 801a4fe:	4770      	bx	lr
