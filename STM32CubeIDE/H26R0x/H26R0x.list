
H26R0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019ca0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a34  08019d60  08019d60  00029d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d794  0801d794  00030a88  2**0
                  CONTENTS
  4 .ARM          00000008  0801d794  0801d794  0002d794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d79c  0801d79c  00030a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801d79c  0801d79c  0002d79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d7a4  0801d7a4  0002d7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a88  20000000  0801d7a8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006b00  20000a88  0801e230  00030a88  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007588  0801e230  00037588  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a88  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052d43  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008740  00000000  00000000  000837f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b3bf  00000000  00000000  0008bf33  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001ed8  00000000  00000000  000a72f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002090  00000000  00000000  000a91d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016fac  00000000  00000000  000ab260  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000abdc  00000000  00000000  000c220c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ccde8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006780  00000000  00000000  000cce64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a88 	.word	0x20000a88
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08019d44 	.word	0x08019d44

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a8c 	.word	0x20000a8c
 8000100:	08019d44 	.word	0x08019d44

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 ff89 	bl	8002364 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fee1 	bl	8002224 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 ff7b 	bl	8002364 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 ff71 	bl	8002364 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 ff03 	bl	800229c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fef9 	bl	800229c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fca1 	bl	8000e08 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc23 	bl	8000d1c <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc93 	bl	8000e08 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc89 	bl	8000e08 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc31 	bl	8000d6c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc27 	bl	8000d6c <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ulcmp>:
 800052c:	4299      	cmp	r1, r3
 800052e:	d101      	bne.n	8000534 <__aeabi_ulcmp+0x8>
 8000530:	1a80      	subs	r0, r0, r2
 8000532:	d004      	beq.n	800053e <__aeabi_ulcmp+0x12>
 8000534:	d202      	bcs.n	800053c <__aeabi_ulcmp+0x10>
 8000536:	2001      	movs	r0, #1
 8000538:	4240      	negs	r0, r0
 800053a:	4770      	bx	lr
 800053c:	2001      	movs	r0, #1
 800053e:	4770      	bx	lr

08000540 <__aeabi_uldivmod>:
 8000540:	2b00      	cmp	r3, #0
 8000542:	d111      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000544:	2a00      	cmp	r2, #0
 8000546:	d10f      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000548:	2900      	cmp	r1, #0
 800054a:	d100      	bne.n	800054e <__aeabi_uldivmod+0xe>
 800054c:	2800      	cmp	r0, #0
 800054e:	d002      	beq.n	8000556 <__aeabi_uldivmod+0x16>
 8000550:	2100      	movs	r1, #0
 8000552:	43c9      	mvns	r1, r1
 8000554:	1c08      	adds	r0, r1, #0
 8000556:	b407      	push	{r0, r1, r2}
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <__aeabi_uldivmod+0x24>)
 800055a:	a102      	add	r1, pc, #8	; (adr r1, 8000564 <__aeabi_uldivmod+0x24>)
 800055c:	1840      	adds	r0, r0, r1
 800055e:	9002      	str	r0, [sp, #8]
 8000560:	bd03      	pop	{r0, r1, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	fffffed5 	.word	0xfffffed5
 8000568:	b403      	push	{r0, r1}
 800056a:	4668      	mov	r0, sp
 800056c:	b501      	push	{r0, lr}
 800056e:	9802      	ldr	r0, [sp, #8]
 8000570:	f000 f866 	bl	8000640 <__udivmoddi4>
 8000574:	9b01      	ldr	r3, [sp, #4]
 8000576:	469e      	mov	lr, r3
 8000578:	b002      	add	sp, #8
 800057a:	bc0c      	pop	{r2, r3}
 800057c:	4770      	bx	lr
 800057e:	46c0      	nop			; (mov r8, r8)

08000580 <__aeabi_lmul>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	46ce      	mov	lr, r9
 8000584:	4647      	mov	r7, r8
 8000586:	0415      	lsls	r5, r2, #16
 8000588:	0c2d      	lsrs	r5, r5, #16
 800058a:	002e      	movs	r6, r5
 800058c:	b580      	push	{r7, lr}
 800058e:	0407      	lsls	r7, r0, #16
 8000590:	0c14      	lsrs	r4, r2, #16
 8000592:	0c3f      	lsrs	r7, r7, #16
 8000594:	4699      	mov	r9, r3
 8000596:	0c03      	lsrs	r3, r0, #16
 8000598:	437e      	muls	r6, r7
 800059a:	435d      	muls	r5, r3
 800059c:	4367      	muls	r7, r4
 800059e:	4363      	muls	r3, r4
 80005a0:	197f      	adds	r7, r7, r5
 80005a2:	0c34      	lsrs	r4, r6, #16
 80005a4:	19e4      	adds	r4, r4, r7
 80005a6:	469c      	mov	ip, r3
 80005a8:	42a5      	cmp	r5, r4
 80005aa:	d903      	bls.n	80005b4 <__aeabi_lmul+0x34>
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	025b      	lsls	r3, r3, #9
 80005b0:	4698      	mov	r8, r3
 80005b2:	44c4      	add	ip, r8
 80005b4:	464b      	mov	r3, r9
 80005b6:	4343      	muls	r3, r0
 80005b8:	4351      	muls	r1, r2
 80005ba:	0c25      	lsrs	r5, r4, #16
 80005bc:	0436      	lsls	r6, r6, #16
 80005be:	4465      	add	r5, ip
 80005c0:	0c36      	lsrs	r6, r6, #16
 80005c2:	0424      	lsls	r4, r4, #16
 80005c4:	19a4      	adds	r4, r4, r6
 80005c6:	195b      	adds	r3, r3, r5
 80005c8:	1859      	adds	r1, r3, r1
 80005ca:	0020      	movs	r0, r4
 80005cc:	bc0c      	pop	{r2, r3}
 80005ce:	4690      	mov	r8, r2
 80005d0:	4699      	mov	r9, r3
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d4 <__aeabi_f2uiz>:
 80005d4:	219e      	movs	r1, #158	; 0x9e
 80005d6:	b510      	push	{r4, lr}
 80005d8:	05c9      	lsls	r1, r1, #23
 80005da:	1c04      	adds	r4, r0, #0
 80005dc:	f7ff ff9c 	bl	8000518 <__aeabi_fcmpge>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d103      	bne.n	80005ec <__aeabi_f2uiz+0x18>
 80005e4:	1c20      	adds	r0, r4, #0
 80005e6:	f000 ff55 	bl	8001494 <__aeabi_f2iz>
 80005ea:	bd10      	pop	{r4, pc}
 80005ec:	219e      	movs	r1, #158	; 0x9e
 80005ee:	1c20      	adds	r0, r4, #0
 80005f0:	05c9      	lsls	r1, r1, #23
 80005f2:	f000 fd8b 	bl	800110c <__aeabi_fsub>
 80005f6:	f000 ff4d 	bl	8001494 <__aeabi_f2iz>
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	061b      	lsls	r3, r3, #24
 80005fe:	469c      	mov	ip, r3
 8000600:	4460      	add	r0, ip
 8000602:	e7f2      	b.n	80005ea <__aeabi_f2uiz+0x16>

08000604 <__aeabi_d2uiz>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	2200      	movs	r2, #0
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__aeabi_d2uiz+0x38>)
 800060a:	0004      	movs	r4, r0
 800060c:	000d      	movs	r5, r1
 800060e:	f7ff ff49 	bl	80004a4 <__aeabi_dcmpge>
 8000612:	2800      	cmp	r0, #0
 8000614:	d104      	bne.n	8000620 <__aeabi_d2uiz+0x1c>
 8000616:	0020      	movs	r0, r4
 8000618:	0029      	movs	r1, r5
 800061a:	f002 fce1 	bl	8002fe0 <__aeabi_d2iz>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <__aeabi_d2uiz+0x38>)
 8000622:	2200      	movs	r2, #0
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f002 f976 	bl	8002918 <__aeabi_dsub>
 800062c:	f002 fcd8 	bl	8002fe0 <__aeabi_d2iz>
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	061b      	lsls	r3, r3, #24
 8000634:	469c      	mov	ip, r3
 8000636:	4460      	add	r0, ip
 8000638:	e7f1      	b.n	800061e <__aeabi_d2uiz+0x1a>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	41e00000 	.word	0x41e00000

08000640 <__udivmoddi4>:
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	464f      	mov	r7, r9
 8000644:	4646      	mov	r6, r8
 8000646:	46d6      	mov	lr, sl
 8000648:	b5c0      	push	{r6, r7, lr}
 800064a:	0004      	movs	r4, r0
 800064c:	b082      	sub	sp, #8
 800064e:	000d      	movs	r5, r1
 8000650:	4691      	mov	r9, r2
 8000652:	4698      	mov	r8, r3
 8000654:	428b      	cmp	r3, r1
 8000656:	d82f      	bhi.n	80006b8 <__udivmoddi4+0x78>
 8000658:	d02c      	beq.n	80006b4 <__udivmoddi4+0x74>
 800065a:	4641      	mov	r1, r8
 800065c:	4648      	mov	r0, r9
 800065e:	f002 fe55 	bl	800330c <__clzdi2>
 8000662:	0029      	movs	r1, r5
 8000664:	0006      	movs	r6, r0
 8000666:	0020      	movs	r0, r4
 8000668:	f002 fe50 	bl	800330c <__clzdi2>
 800066c:	1a33      	subs	r3, r6, r0
 800066e:	469c      	mov	ip, r3
 8000670:	3b20      	subs	r3, #32
 8000672:	469a      	mov	sl, r3
 8000674:	d500      	bpl.n	8000678 <__udivmoddi4+0x38>
 8000676:	e076      	b.n	8000766 <__udivmoddi4+0x126>
 8000678:	464b      	mov	r3, r9
 800067a:	4652      	mov	r2, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001f      	movs	r7, r3
 8000680:	464b      	mov	r3, r9
 8000682:	4662      	mov	r2, ip
 8000684:	4093      	lsls	r3, r2
 8000686:	001e      	movs	r6, r3
 8000688:	42af      	cmp	r7, r5
 800068a:	d828      	bhi.n	80006de <__udivmoddi4+0x9e>
 800068c:	d025      	beq.n	80006da <__udivmoddi4+0x9a>
 800068e:	4653      	mov	r3, sl
 8000690:	1ba4      	subs	r4, r4, r6
 8000692:	41bd      	sbcs	r5, r7
 8000694:	2b00      	cmp	r3, #0
 8000696:	da00      	bge.n	800069a <__udivmoddi4+0x5a>
 8000698:	e07b      	b.n	8000792 <__udivmoddi4+0x152>
 800069a:	2200      	movs	r2, #0
 800069c:	2300      	movs	r3, #0
 800069e:	9200      	str	r2, [sp, #0]
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2301      	movs	r3, #1
 80006a4:	4652      	mov	r2, sl
 80006a6:	4093      	lsls	r3, r2
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2301      	movs	r3, #1
 80006ac:	4662      	mov	r2, ip
 80006ae:	4093      	lsls	r3, r2
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	e018      	b.n	80006e6 <__udivmoddi4+0xa6>
 80006b4:	4282      	cmp	r2, r0
 80006b6:	d9d0      	bls.n	800065a <__udivmoddi4+0x1a>
 80006b8:	2200      	movs	r2, #0
 80006ba:	2300      	movs	r3, #0
 80006bc:	9200      	str	r2, [sp, #0]
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <__udivmoddi4+0x8a>
 80006c6:	601c      	str	r4, [r3, #0]
 80006c8:	605d      	str	r5, [r3, #4]
 80006ca:	9800      	ldr	r0, [sp, #0]
 80006cc:	9901      	ldr	r1, [sp, #4]
 80006ce:	b002      	add	sp, #8
 80006d0:	bc1c      	pop	{r2, r3, r4}
 80006d2:	4690      	mov	r8, r2
 80006d4:	4699      	mov	r9, r3
 80006d6:	46a2      	mov	sl, r4
 80006d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006da:	42a3      	cmp	r3, r4
 80006dc:	d9d7      	bls.n	800068e <__udivmoddi4+0x4e>
 80006de:	2200      	movs	r2, #0
 80006e0:	2300      	movs	r3, #0
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	4663      	mov	r3, ip
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0e9      	beq.n	80006c0 <__udivmoddi4+0x80>
 80006ec:	07fb      	lsls	r3, r7, #31
 80006ee:	4698      	mov	r8, r3
 80006f0:	4641      	mov	r1, r8
 80006f2:	0872      	lsrs	r2, r6, #1
 80006f4:	430a      	orrs	r2, r1
 80006f6:	087b      	lsrs	r3, r7, #1
 80006f8:	4666      	mov	r6, ip
 80006fa:	e00e      	b.n	800071a <__udivmoddi4+0xda>
 80006fc:	42ab      	cmp	r3, r5
 80006fe:	d101      	bne.n	8000704 <__udivmoddi4+0xc4>
 8000700:	42a2      	cmp	r2, r4
 8000702:	d80c      	bhi.n	800071e <__udivmoddi4+0xde>
 8000704:	1aa4      	subs	r4, r4, r2
 8000706:	419d      	sbcs	r5, r3
 8000708:	2001      	movs	r0, #1
 800070a:	1924      	adds	r4, r4, r4
 800070c:	416d      	adcs	r5, r5
 800070e:	2100      	movs	r1, #0
 8000710:	3e01      	subs	r6, #1
 8000712:	1824      	adds	r4, r4, r0
 8000714:	414d      	adcs	r5, r1
 8000716:	2e00      	cmp	r6, #0
 8000718:	d006      	beq.n	8000728 <__udivmoddi4+0xe8>
 800071a:	42ab      	cmp	r3, r5
 800071c:	d9ee      	bls.n	80006fc <__udivmoddi4+0xbc>
 800071e:	3e01      	subs	r6, #1
 8000720:	1924      	adds	r4, r4, r4
 8000722:	416d      	adcs	r5, r5
 8000724:	2e00      	cmp	r6, #0
 8000726:	d1f8      	bne.n	800071a <__udivmoddi4+0xda>
 8000728:	9800      	ldr	r0, [sp, #0]
 800072a:	9901      	ldr	r1, [sp, #4]
 800072c:	4653      	mov	r3, sl
 800072e:	1900      	adds	r0, r0, r4
 8000730:	4169      	adcs	r1, r5
 8000732:	2b00      	cmp	r3, #0
 8000734:	db23      	blt.n	800077e <__udivmoddi4+0x13e>
 8000736:	002b      	movs	r3, r5
 8000738:	4652      	mov	r2, sl
 800073a:	40d3      	lsrs	r3, r2
 800073c:	002a      	movs	r2, r5
 800073e:	4664      	mov	r4, ip
 8000740:	40e2      	lsrs	r2, r4
 8000742:	001c      	movs	r4, r3
 8000744:	4653      	mov	r3, sl
 8000746:	0015      	movs	r5, r2
 8000748:	2b00      	cmp	r3, #0
 800074a:	db2d      	blt.n	80007a8 <__udivmoddi4+0x168>
 800074c:	0026      	movs	r6, r4
 800074e:	4657      	mov	r7, sl
 8000750:	40be      	lsls	r6, r7
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4667      	mov	r7, ip
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e7ac      	b.n	80006c0 <__udivmoddi4+0x80>
 8000766:	4662      	mov	r2, ip
 8000768:	2320      	movs	r3, #32
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	464a      	mov	r2, r9
 800076e:	40da      	lsrs	r2, r3
 8000770:	4661      	mov	r1, ip
 8000772:	0013      	movs	r3, r2
 8000774:	4642      	mov	r2, r8
 8000776:	408a      	lsls	r2, r1
 8000778:	0017      	movs	r7, r2
 800077a:	431f      	orrs	r7, r3
 800077c:	e780      	b.n	8000680 <__udivmoddi4+0x40>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	002a      	movs	r2, r5
 8000786:	4666      	mov	r6, ip
 8000788:	409a      	lsls	r2, r3
 800078a:	0023      	movs	r3, r4
 800078c:	40f3      	lsrs	r3, r6
 800078e:	4313      	orrs	r3, r2
 8000790:	e7d4      	b.n	800073c <__udivmoddi4+0xfc>
 8000792:	4662      	mov	r2, ip
 8000794:	2320      	movs	r3, #32
 8000796:	2100      	movs	r1, #0
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	2200      	movs	r2, #0
 800079c:	9100      	str	r1, [sp, #0]
 800079e:	9201      	str	r2, [sp, #4]
 80007a0:	2201      	movs	r2, #1
 80007a2:	40da      	lsrs	r2, r3
 80007a4:	9201      	str	r2, [sp, #4]
 80007a6:	e780      	b.n	80006aa <__udivmoddi4+0x6a>
 80007a8:	2320      	movs	r3, #32
 80007aa:	4662      	mov	r2, ip
 80007ac:	0026      	movs	r6, r4
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	002f      	movs	r7, r5
 80007b4:	46b0      	mov	r8, r6
 80007b6:	4666      	mov	r6, ip
 80007b8:	40b7      	lsls	r7, r6
 80007ba:	4646      	mov	r6, r8
 80007bc:	003b      	movs	r3, r7
 80007be:	4333      	orrs	r3, r6
 80007c0:	e7c8      	b.n	8000754 <__udivmoddi4+0x114>
 80007c2:	46c0      	nop			; (mov r8, r8)

080007c4 <__aeabi_fadd>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	4647      	mov	r7, r8
 80007c8:	46ce      	mov	lr, r9
 80007ca:	0243      	lsls	r3, r0, #9
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0044      	lsls	r4, r0, #1
 80007d0:	0fc2      	lsrs	r2, r0, #31
 80007d2:	469c      	mov	ip, r3
 80007d4:	0048      	lsls	r0, r1, #1
 80007d6:	00dd      	lsls	r5, r3, #3
 80007d8:	024b      	lsls	r3, r1, #9
 80007da:	0e24      	lsrs	r4, r4, #24
 80007dc:	0a5b      	lsrs	r3, r3, #9
 80007de:	0e00      	lsrs	r0, r0, #24
 80007e0:	b580      	push	{r7, lr}
 80007e2:	4698      	mov	r8, r3
 80007e4:	0026      	movs	r6, r4
 80007e6:	4691      	mov	r9, r2
 80007e8:	0fc9      	lsrs	r1, r1, #31
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	1a27      	subs	r7, r4, r0
 80007ee:	428a      	cmp	r2, r1
 80007f0:	d029      	beq.n	8000846 <__aeabi_fadd+0x82>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	dd15      	ble.n	8000822 <__aeabi_fadd+0x5e>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d14a      	bne.n	8000890 <__aeabi_fadd+0xcc>
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d000      	beq.n	8000800 <__aeabi_fadd+0x3c>
 80007fe:	e095      	b.n	800092c <__aeabi_fadd+0x168>
 8000800:	08ed      	lsrs	r5, r5, #3
 8000802:	2cff      	cmp	r4, #255	; 0xff
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x44>
 8000806:	e088      	b.n	800091a <__aeabi_fadd+0x156>
 8000808:	026b      	lsls	r3, r5, #9
 800080a:	0a5b      	lsrs	r3, r3, #9
 800080c:	b2e6      	uxtb	r6, r4
 800080e:	025b      	lsls	r3, r3, #9
 8000810:	05f6      	lsls	r6, r6, #23
 8000812:	0a58      	lsrs	r0, r3, #9
 8000814:	4330      	orrs	r0, r6
 8000816:	07d2      	lsls	r2, r2, #31
 8000818:	4310      	orrs	r0, r2
 800081a:	bc0c      	pop	{r2, r3}
 800081c:	4690      	mov	r8, r2
 800081e:	4699      	mov	r9, r3
 8000820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000822:	2f00      	cmp	r7, #0
 8000824:	d000      	beq.n	8000828 <__aeabi_fadd+0x64>
 8000826:	e087      	b.n	8000938 <__aeabi_fadd+0x174>
 8000828:	1c60      	adds	r0, r4, #1
 800082a:	b2c0      	uxtb	r0, r0
 800082c:	2801      	cmp	r0, #1
 800082e:	dc00      	bgt.n	8000832 <__aeabi_fadd+0x6e>
 8000830:	e0b6      	b.n	80009a0 <__aeabi_fadd+0x1dc>
 8000832:	1aee      	subs	r6, r5, r3
 8000834:	0172      	lsls	r2, r6, #5
 8000836:	d500      	bpl.n	800083a <__aeabi_fadd+0x76>
 8000838:	e0c5      	b.n	80009c6 <__aeabi_fadd+0x202>
 800083a:	2e00      	cmp	r6, #0
 800083c:	d13d      	bne.n	80008ba <__aeabi_fadd+0xf6>
 800083e:	2200      	movs	r2, #0
 8000840:	2600      	movs	r6, #0
 8000842:	2300      	movs	r3, #0
 8000844:	e7e3      	b.n	800080e <__aeabi_fadd+0x4a>
 8000846:	2f00      	cmp	r7, #0
 8000848:	dc00      	bgt.n	800084c <__aeabi_fadd+0x88>
 800084a:	e096      	b.n	800097a <__aeabi_fadd+0x1b6>
 800084c:	2800      	cmp	r0, #0
 800084e:	d05d      	beq.n	800090c <__aeabi_fadd+0x148>
 8000850:	2cff      	cmp	r4, #255	; 0xff
 8000852:	d060      	beq.n	8000916 <__aeabi_fadd+0x152>
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	04d2      	lsls	r2, r2, #19
 8000858:	4313      	orrs	r3, r2
 800085a:	2f1b      	cmp	r7, #27
 800085c:	dd00      	ble.n	8000860 <__aeabi_fadd+0x9c>
 800085e:	e0ec      	b.n	8000a3a <__aeabi_fadd+0x276>
 8000860:	2220      	movs	r2, #32
 8000862:	1bd2      	subs	r2, r2, r7
 8000864:	0018      	movs	r0, r3
 8000866:	4093      	lsls	r3, r2
 8000868:	40f8      	lsrs	r0, r7
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	4193      	sbcs	r3, r2
 800086e:	4303      	orrs	r3, r0
 8000870:	18ed      	adds	r5, r5, r3
 8000872:	016b      	lsls	r3, r5, #5
 8000874:	d57b      	bpl.n	800096e <__aeabi_fadd+0x1aa>
 8000876:	3401      	adds	r4, #1
 8000878:	2cff      	cmp	r4, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0xba>
 800087c:	e0b7      	b.n	80009ee <__aeabi_fadd+0x22a>
 800087e:	2201      	movs	r2, #1
 8000880:	2607      	movs	r6, #7
 8000882:	402a      	ands	r2, r5
 8000884:	086b      	lsrs	r3, r5, #1
 8000886:	4d9a      	ldr	r5, [pc, #616]	; (8000af0 <__aeabi_fadd+0x32c>)
 8000888:	401d      	ands	r5, r3
 800088a:	4315      	orrs	r5, r2
 800088c:	402e      	ands	r6, r5
 800088e:	e029      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000890:	2cff      	cmp	r4, #255	; 0xff
 8000892:	d0b5      	beq.n	8000800 <__aeabi_fadd+0x3c>
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	04d2      	lsls	r2, r2, #19
 8000898:	4313      	orrs	r3, r2
 800089a:	2f1b      	cmp	r7, #27
 800089c:	dd00      	ble.n	80008a0 <__aeabi_fadd+0xdc>
 800089e:	e0b2      	b.n	8000a06 <__aeabi_fadd+0x242>
 80008a0:	2220      	movs	r2, #32
 80008a2:	1bd2      	subs	r2, r2, r7
 80008a4:	0019      	movs	r1, r3
 80008a6:	4093      	lsls	r3, r2
 80008a8:	40f9      	lsrs	r1, r7
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	4193      	sbcs	r3, r2
 80008ae:	430b      	orrs	r3, r1
 80008b0:	1aed      	subs	r5, r5, r3
 80008b2:	016b      	lsls	r3, r5, #5
 80008b4:	d55b      	bpl.n	800096e <__aeabi_fadd+0x1aa>
 80008b6:	01ad      	lsls	r5, r5, #6
 80008b8:	09ae      	lsrs	r6, r5, #6
 80008ba:	0030      	movs	r0, r6
 80008bc:	f002 fd08 	bl	80032d0 <__clzsi2>
 80008c0:	3805      	subs	r0, #5
 80008c2:	4086      	lsls	r6, r0
 80008c4:	4284      	cmp	r4, r0
 80008c6:	dc65      	bgt.n	8000994 <__aeabi_fadd+0x1d0>
 80008c8:	1b04      	subs	r4, r0, r4
 80008ca:	0033      	movs	r3, r6
 80008cc:	2020      	movs	r0, #32
 80008ce:	3401      	adds	r4, #1
 80008d0:	40e3      	lsrs	r3, r4
 80008d2:	1b04      	subs	r4, r0, r4
 80008d4:	40a6      	lsls	r6, r4
 80008d6:	1e75      	subs	r5, r6, #1
 80008d8:	41ae      	sbcs	r6, r5
 80008da:	4333      	orrs	r3, r6
 80008dc:	2607      	movs	r6, #7
 80008de:	001d      	movs	r5, r3
 80008e0:	2400      	movs	r4, #0
 80008e2:	401e      	ands	r6, r3
 80008e4:	2201      	movs	r2, #1
 80008e6:	464b      	mov	r3, r9
 80008e8:	401a      	ands	r2, r3
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d004      	beq.n	80008f8 <__aeabi_fadd+0x134>
 80008ee:	230f      	movs	r3, #15
 80008f0:	402b      	ands	r3, r5
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fadd+0x134>
 80008f6:	3504      	adds	r5, #4
 80008f8:	016b      	lsls	r3, r5, #5
 80008fa:	d400      	bmi.n	80008fe <__aeabi_fadd+0x13a>
 80008fc:	e780      	b.n	8000800 <__aeabi_fadd+0x3c>
 80008fe:	3401      	adds	r4, #1
 8000900:	b2e6      	uxtb	r6, r4
 8000902:	2cff      	cmp	r4, #255	; 0xff
 8000904:	d12f      	bne.n	8000966 <__aeabi_fadd+0x1a2>
 8000906:	26ff      	movs	r6, #255	; 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e780      	b.n	800080e <__aeabi_fadd+0x4a>
 800090c:	2b00      	cmp	r3, #0
 800090e:	d152      	bne.n	80009b6 <__aeabi_fadd+0x1f2>
 8000910:	2cff      	cmp	r4, #255	; 0xff
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x152>
 8000914:	e774      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000916:	000a      	movs	r2, r1
 8000918:	08ed      	lsrs	r5, r5, #3
 800091a:	2d00      	cmp	r5, #0
 800091c:	d0f3      	beq.n	8000906 <__aeabi_fadd+0x142>
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	03db      	lsls	r3, r3, #15
 8000922:	432b      	orrs	r3, r5
 8000924:	025b      	lsls	r3, r3, #9
 8000926:	0a5b      	lsrs	r3, r3, #9
 8000928:	26ff      	movs	r6, #255	; 0xff
 800092a:	e770      	b.n	800080e <__aeabi_fadd+0x4a>
 800092c:	3f01      	subs	r7, #1
 800092e:	2f00      	cmp	r7, #0
 8000930:	d0be      	beq.n	80008b0 <__aeabi_fadd+0xec>
 8000932:	2cff      	cmp	r4, #255	; 0xff
 8000934:	d1b1      	bne.n	800089a <__aeabi_fadd+0xd6>
 8000936:	e763      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_fadd+0x208>
 800093c:	28ff      	cmp	r0, #255	; 0xff
 800093e:	d069      	beq.n	8000a14 <__aeabi_fadd+0x250>
 8000940:	2480      	movs	r4, #128	; 0x80
 8000942:	04e4      	lsls	r4, r4, #19
 8000944:	427a      	negs	r2, r7
 8000946:	4325      	orrs	r5, r4
 8000948:	2a1b      	cmp	r2, #27
 800094a:	dd00      	ble.n	800094e <__aeabi_fadd+0x18a>
 800094c:	e0c5      	b.n	8000ada <__aeabi_fadd+0x316>
 800094e:	002c      	movs	r4, r5
 8000950:	2620      	movs	r6, #32
 8000952:	40d4      	lsrs	r4, r2
 8000954:	1ab2      	subs	r2, r6, r2
 8000956:	4095      	lsls	r5, r2
 8000958:	1e6a      	subs	r2, r5, #1
 800095a:	4195      	sbcs	r5, r2
 800095c:	4325      	orrs	r5, r4
 800095e:	1b5d      	subs	r5, r3, r5
 8000960:	0004      	movs	r4, r0
 8000962:	4689      	mov	r9, r1
 8000964:	e7a5      	b.n	80008b2 <__aeabi_fadd+0xee>
 8000966:	01ab      	lsls	r3, r5, #6
 8000968:	0a5b      	lsrs	r3, r3, #9
 800096a:	e750      	b.n	800080e <__aeabi_fadd+0x4a>
 800096c:	2400      	movs	r4, #0
 800096e:	2201      	movs	r2, #1
 8000970:	464b      	mov	r3, r9
 8000972:	401a      	ands	r2, r3
 8000974:	076b      	lsls	r3, r5, #29
 8000976:	d1ba      	bne.n	80008ee <__aeabi_fadd+0x12a>
 8000978:	e742      	b.n	8000800 <__aeabi_fadd+0x3c>
 800097a:	2f00      	cmp	r7, #0
 800097c:	d13b      	bne.n	80009f6 <__aeabi_fadd+0x232>
 800097e:	3401      	adds	r4, #1
 8000980:	b2e0      	uxtb	r0, r4
 8000982:	2801      	cmp	r0, #1
 8000984:	dd4a      	ble.n	8000a1c <__aeabi_fadd+0x258>
 8000986:	2cff      	cmp	r4, #255	; 0xff
 8000988:	d0bd      	beq.n	8000906 <__aeabi_fadd+0x142>
 800098a:	2607      	movs	r6, #7
 800098c:	18ed      	adds	r5, r5, r3
 800098e:	086d      	lsrs	r5, r5, #1
 8000990:	402e      	ands	r6, r5
 8000992:	e7a7      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000994:	2307      	movs	r3, #7
 8000996:	4d57      	ldr	r5, [pc, #348]	; (8000af4 <__aeabi_fadd+0x330>)
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	4035      	ands	r5, r6
 800099c:	401e      	ands	r6, r3
 800099e:	e7a1      	b.n	80008e4 <__aeabi_fadd+0x120>
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d11b      	bne.n	80009dc <__aeabi_fadd+0x218>
 80009a4:	2d00      	cmp	r5, #0
 80009a6:	d16e      	bne.n	8000a86 <__aeabi_fadd+0x2c2>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_fadd+0x1ea>
 80009ac:	e09a      	b.n	8000ae4 <__aeabi_fadd+0x320>
 80009ae:	000a      	movs	r2, r1
 80009b0:	001d      	movs	r5, r3
 80009b2:	003c      	movs	r4, r7
 80009b4:	e724      	b.n	8000800 <__aeabi_fadd+0x3c>
 80009b6:	3f01      	subs	r7, #1
 80009b8:	2f00      	cmp	r7, #0
 80009ba:	d100      	bne.n	80009be <__aeabi_fadd+0x1fa>
 80009bc:	e758      	b.n	8000870 <__aeabi_fadd+0xac>
 80009be:	2cff      	cmp	r4, #255	; 0xff
 80009c0:	d000      	beq.n	80009c4 <__aeabi_fadd+0x200>
 80009c2:	e74a      	b.n	800085a <__aeabi_fadd+0x96>
 80009c4:	e7a7      	b.n	8000916 <__aeabi_fadd+0x152>
 80009c6:	1b5e      	subs	r6, r3, r5
 80009c8:	4689      	mov	r9, r1
 80009ca:	e776      	b.n	80008ba <__aeabi_fadd+0xf6>
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d11c      	bne.n	8000a0a <__aeabi_fadd+0x246>
 80009d0:	000a      	movs	r2, r1
 80009d2:	28ff      	cmp	r0, #255	; 0xff
 80009d4:	d01f      	beq.n	8000a16 <__aeabi_fadd+0x252>
 80009d6:	0004      	movs	r4, r0
 80009d8:	001d      	movs	r5, r3
 80009da:	e711      	b.n	8000800 <__aeabi_fadd+0x3c>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d15d      	bne.n	8000a9c <__aeabi_fadd+0x2d8>
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d117      	bne.n	8000a14 <__aeabi_fadd+0x250>
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	2200      	movs	r2, #0
 80009e8:	03db      	lsls	r3, r3, #15
 80009ea:	26ff      	movs	r6, #255	; 0xff
 80009ec:	e70f      	b.n	800080e <__aeabi_fadd+0x4a>
 80009ee:	000a      	movs	r2, r1
 80009f0:	26ff      	movs	r6, #255	; 0xff
 80009f2:	2300      	movs	r3, #0
 80009f4:	e70b      	b.n	800080e <__aeabi_fadd+0x4a>
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d121      	bne.n	8000a3e <__aeabi_fadd+0x27a>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d166      	bne.n	8000acc <__aeabi_fadd+0x308>
 80009fe:	28ff      	cmp	r0, #255	; 0xff
 8000a00:	d1e9      	bne.n	80009d6 <__aeabi_fadd+0x212>
 8000a02:	001d      	movs	r5, r3
 8000a04:	e787      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e752      	b.n	80008b0 <__aeabi_fadd+0xec>
 8000a0a:	1c7a      	adds	r2, r7, #1
 8000a0c:	d0a7      	beq.n	800095e <__aeabi_fadd+0x19a>
 8000a0e:	43fa      	mvns	r2, r7
 8000a10:	28ff      	cmp	r0, #255	; 0xff
 8000a12:	d199      	bne.n	8000948 <__aeabi_fadd+0x184>
 8000a14:	000a      	movs	r2, r1
 8000a16:	001d      	movs	r5, r3
 8000a18:	24ff      	movs	r4, #255	; 0xff
 8000a1a:	e6f1      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000a1c:	2e00      	cmp	r6, #0
 8000a1e:	d121      	bne.n	8000a64 <__aeabi_fadd+0x2a0>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d04f      	beq.n	8000ac4 <__aeabi_fadd+0x300>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d04c      	beq.n	8000ac2 <__aeabi_fadd+0x2fe>
 8000a28:	18ed      	adds	r5, r5, r3
 8000a2a:	016b      	lsls	r3, r5, #5
 8000a2c:	d59e      	bpl.n	800096c <__aeabi_fadd+0x1a8>
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <__aeabi_fadd+0x330>)
 8000a30:	3607      	adds	r6, #7
 8000a32:	402e      	ands	r6, r5
 8000a34:	2401      	movs	r4, #1
 8000a36:	401d      	ands	r5, r3
 8000a38:	e754      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xac>
 8000a3e:	28ff      	cmp	r0, #255	; 0xff
 8000a40:	d0df      	beq.n	8000a02 <__aeabi_fadd+0x23e>
 8000a42:	2480      	movs	r4, #128	; 0x80
 8000a44:	04e4      	lsls	r4, r4, #19
 8000a46:	427f      	negs	r7, r7
 8000a48:	4325      	orrs	r5, r4
 8000a4a:	2f1b      	cmp	r7, #27
 8000a4c:	dc4d      	bgt.n	8000aea <__aeabi_fadd+0x326>
 8000a4e:	2620      	movs	r6, #32
 8000a50:	1bf6      	subs	r6, r6, r7
 8000a52:	002c      	movs	r4, r5
 8000a54:	40b5      	lsls	r5, r6
 8000a56:	40fc      	lsrs	r4, r7
 8000a58:	1e6a      	subs	r2, r5, #1
 8000a5a:	4195      	sbcs	r5, r2
 8000a5c:	4325      	orrs	r5, r4
 8000a5e:	18ed      	adds	r5, r5, r3
 8000a60:	0004      	movs	r4, r0
 8000a62:	e706      	b.n	8000872 <__aeabi_fadd+0xae>
 8000a64:	2d00      	cmp	r5, #0
 8000a66:	d0cc      	beq.n	8000a02 <__aeabi_fadd+0x23e>
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_fadd+0x2aa>
 8000a6c:	e753      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	4660      	mov	r0, ip
 8000a72:	03c9      	lsls	r1, r1, #15
 8000a74:	4208      	tst	r0, r1
 8000a76:	d003      	beq.n	8000a80 <__aeabi_fadd+0x2bc>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	4208      	tst	r0, r1
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fadd+0x2bc>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	2101      	movs	r1, #1
 8000a82:	4011      	ands	r1, r2
 8000a84:	e747      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x2c8>
 8000a8a:	e6b9      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000a8c:	1aea      	subs	r2, r5, r3
 8000a8e:	0150      	lsls	r0, r2, #5
 8000a90:	d525      	bpl.n	8000ade <__aeabi_fadd+0x31a>
 8000a92:	2607      	movs	r6, #7
 8000a94:	1b5d      	subs	r5, r3, r5
 8000a96:	402e      	ands	r6, r5
 8000a98:	4689      	mov	r9, r1
 8000a9a:	e723      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000a9c:	24ff      	movs	r4, #255	; 0xff
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fadd+0x2e0>
 8000aa2:	e6ad      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	4660      	mov	r0, ip
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	4210      	tst	r0, r2
 8000aac:	d004      	beq.n	8000ab8 <__aeabi_fadd+0x2f4>
 8000aae:	4640      	mov	r0, r8
 8000ab0:	4210      	tst	r0, r2
 8000ab2:	d101      	bne.n	8000ab8 <__aeabi_fadd+0x2f4>
 8000ab4:	001d      	movs	r5, r3
 8000ab6:	4689      	mov	r9, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	464b      	mov	r3, r9
 8000abc:	24ff      	movs	r4, #255	; 0xff
 8000abe:	401a      	ands	r2, r3
 8000ac0:	e69e      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000ac2:	002b      	movs	r3, r5
 8000ac4:	08dd      	lsrs	r5, r3, #3
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	2400      	movs	r4, #0
 8000aca:	e69d      	b.n	8000808 <__aeabi_fadd+0x44>
 8000acc:	1c7a      	adds	r2, r7, #1
 8000ace:	d0c6      	beq.n	8000a5e <__aeabi_fadd+0x29a>
 8000ad0:	43ff      	mvns	r7, r7
 8000ad2:	28ff      	cmp	r0, #255	; 0xff
 8000ad4:	d1b9      	bne.n	8000a4a <__aeabi_fadd+0x286>
 8000ad6:	001d      	movs	r5, r3
 8000ad8:	e71d      	b.n	8000916 <__aeabi_fadd+0x152>
 8000ada:	2501      	movs	r5, #1
 8000adc:	e73f      	b.n	800095e <__aeabi_fadd+0x19a>
 8000ade:	1e15      	subs	r5, r2, #0
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fadd+0x320>
 8000ae2:	e744      	b.n	800096e <__aeabi_fadd+0x1aa>
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e691      	b.n	800080e <__aeabi_fadd+0x4a>
 8000aea:	2501      	movs	r5, #1
 8000aec:	e7b7      	b.n	8000a5e <__aeabi_fadd+0x29a>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	7dffffff 	.word	0x7dffffff
 8000af4:	fbffffff 	.word	0xfbffffff

08000af8 <__aeabi_fdiv>:
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	4657      	mov	r7, sl
 8000afc:	464e      	mov	r6, r9
 8000afe:	4645      	mov	r5, r8
 8000b00:	46de      	mov	lr, fp
 8000b02:	0244      	lsls	r4, r0, #9
 8000b04:	b5e0      	push	{r5, r6, r7, lr}
 8000b06:	0046      	lsls	r6, r0, #1
 8000b08:	4688      	mov	r8, r1
 8000b0a:	0a64      	lsrs	r4, r4, #9
 8000b0c:	0e36      	lsrs	r6, r6, #24
 8000b0e:	0fc7      	lsrs	r7, r0, #31
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d063      	beq.n	8000bdc <__aeabi_fdiv+0xe4>
 8000b14:	2eff      	cmp	r6, #255	; 0xff
 8000b16:	d024      	beq.n	8000b62 <__aeabi_fdiv+0x6a>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	00e4      	lsls	r4, r4, #3
 8000b1c:	04db      	lsls	r3, r3, #19
 8000b1e:	431c      	orrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	4699      	mov	r9, r3
 8000b24:	469b      	mov	fp, r3
 8000b26:	3e7f      	subs	r6, #127	; 0x7f
 8000b28:	4643      	mov	r3, r8
 8000b2a:	4642      	mov	r2, r8
 8000b2c:	025d      	lsls	r5, r3, #9
 8000b2e:	0fd2      	lsrs	r2, r2, #31
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	0a6d      	lsrs	r5, r5, #9
 8000b34:	0e1b      	lsrs	r3, r3, #24
 8000b36:	4690      	mov	r8, r2
 8000b38:	4692      	mov	sl, r2
 8000b3a:	d065      	beq.n	8000c08 <__aeabi_fdiv+0x110>
 8000b3c:	2bff      	cmp	r3, #255	; 0xff
 8000b3e:	d055      	beq.n	8000bec <__aeabi_fdiv+0xf4>
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	2100      	movs	r1, #0
 8000b44:	00ed      	lsls	r5, r5, #3
 8000b46:	04d2      	lsls	r2, r2, #19
 8000b48:	3b7f      	subs	r3, #127	; 0x7f
 8000b4a:	4315      	orrs	r5, r2
 8000b4c:	1af6      	subs	r6, r6, r3
 8000b4e:	4643      	mov	r3, r8
 8000b50:	464a      	mov	r2, r9
 8000b52:	407b      	eors	r3, r7
 8000b54:	2a0f      	cmp	r2, #15
 8000b56:	d900      	bls.n	8000b5a <__aeabi_fdiv+0x62>
 8000b58:	e08d      	b.n	8000c76 <__aeabi_fdiv+0x17e>
 8000b5a:	486d      	ldr	r0, [pc, #436]	; (8000d10 <__aeabi_fdiv+0x218>)
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	5882      	ldr	r2, [r0, r2]
 8000b60:	4697      	mov	pc, r2
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d154      	bne.n	8000c10 <__aeabi_fdiv+0x118>
 8000b66:	2308      	movs	r3, #8
 8000b68:	4699      	mov	r9, r3
 8000b6a:	3b06      	subs	r3, #6
 8000b6c:	26ff      	movs	r6, #255	; 0xff
 8000b6e:	469b      	mov	fp, r3
 8000b70:	e7da      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000b72:	2500      	movs	r5, #0
 8000b74:	4653      	mov	r3, sl
 8000b76:	2902      	cmp	r1, #2
 8000b78:	d01b      	beq.n	8000bb2 <__aeabi_fdiv+0xba>
 8000b7a:	2903      	cmp	r1, #3
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fdiv+0x88>
 8000b7e:	e0bf      	b.n	8000d00 <__aeabi_fdiv+0x208>
 8000b80:	2901      	cmp	r1, #1
 8000b82:	d028      	beq.n	8000bd6 <__aeabi_fdiv+0xde>
 8000b84:	0030      	movs	r0, r6
 8000b86:	307f      	adds	r0, #127	; 0x7f
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	dd20      	ble.n	8000bce <__aeabi_fdiv+0xd6>
 8000b8c:	076a      	lsls	r2, r5, #29
 8000b8e:	d004      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b90:	220f      	movs	r2, #15
 8000b92:	402a      	ands	r2, r5
 8000b94:	2a04      	cmp	r2, #4
 8000b96:	d000      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b98:	3504      	adds	r5, #4
 8000b9a:	012a      	lsls	r2, r5, #4
 8000b9c:	d503      	bpl.n	8000ba6 <__aeabi_fdiv+0xae>
 8000b9e:	0030      	movs	r0, r6
 8000ba0:	4a5c      	ldr	r2, [pc, #368]	; (8000d14 <__aeabi_fdiv+0x21c>)
 8000ba2:	3080      	adds	r0, #128	; 0x80
 8000ba4:	4015      	ands	r5, r2
 8000ba6:	28fe      	cmp	r0, #254	; 0xfe
 8000ba8:	dc03      	bgt.n	8000bb2 <__aeabi_fdiv+0xba>
 8000baa:	01ac      	lsls	r4, r5, #6
 8000bac:	0a64      	lsrs	r4, r4, #9
 8000bae:	b2c2      	uxtb	r2, r0
 8000bb0:	e001      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	0264      	lsls	r4, r4, #9
 8000bb8:	05d2      	lsls	r2, r2, #23
 8000bba:	0a60      	lsrs	r0, r4, #9
 8000bbc:	07db      	lsls	r3, r3, #31
 8000bbe:	4310      	orrs	r0, r2
 8000bc0:	4318      	orrs	r0, r3
 8000bc2:	bc3c      	pop	{r2, r3, r4, r5}
 8000bc4:	4690      	mov	r8, r2
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	46a2      	mov	sl, r4
 8000bca:	46ab      	mov	fp, r5
 8000bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bce:	2201      	movs	r2, #1
 8000bd0:	1a10      	subs	r0, r2, r0
 8000bd2:	281b      	cmp	r0, #27
 8000bd4:	dd7c      	ble.n	8000cd0 <__aeabi_fdiv+0x1d8>
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2400      	movs	r4, #0
 8000bda:	e7ec      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d11d      	bne.n	8000c1c <__aeabi_fdiv+0x124>
 8000be0:	2304      	movs	r3, #4
 8000be2:	4699      	mov	r9, r3
 8000be4:	3b03      	subs	r3, #3
 8000be6:	2600      	movs	r6, #0
 8000be8:	469b      	mov	fp, r3
 8000bea:	e79d      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000bec:	3eff      	subs	r6, #255	; 0xff
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d120      	bne.n	8000c34 <__aeabi_fdiv+0x13c>
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	2a0f      	cmp	r2, #15
 8000bfe:	d8d8      	bhi.n	8000bb2 <__aeabi_fdiv+0xba>
 8000c00:	4845      	ldr	r0, [pc, #276]	; (8000d18 <__aeabi_fdiv+0x220>)
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	5882      	ldr	r2, [r0, r2]
 8000c06:	4697      	mov	pc, r2
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d119      	bne.n	8000c40 <__aeabi_fdiv+0x148>
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	e7f1      	b.n	8000bf4 <__aeabi_fdiv+0xfc>
 8000c10:	230c      	movs	r3, #12
 8000c12:	4699      	mov	r9, r3
 8000c14:	3b09      	subs	r3, #9
 8000c16:	26ff      	movs	r6, #255	; 0xff
 8000c18:	469b      	mov	fp, r3
 8000c1a:	e785      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f002 fb57 	bl	80032d0 <__clzsi2>
 8000c22:	2676      	movs	r6, #118	; 0x76
 8000c24:	1f43      	subs	r3, r0, #5
 8000c26:	409c      	lsls	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	4276      	negs	r6, r6
 8000c2c:	1a36      	subs	r6, r6, r0
 8000c2e:	4699      	mov	r9, r3
 8000c30:	469b      	mov	fp, r3
 8000c32:	e779      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000c34:	464a      	mov	r2, r9
 8000c36:	2303      	movs	r3, #3
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	4691      	mov	r9, r2
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	e786      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c40:	0028      	movs	r0, r5
 8000c42:	f002 fb45 	bl	80032d0 <__clzsi2>
 8000c46:	1f43      	subs	r3, r0, #5
 8000c48:	1836      	adds	r6, r6, r0
 8000c4a:	409d      	lsls	r5, r3
 8000c4c:	3676      	adds	r6, #118	; 0x76
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e77d      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c52:	2480      	movs	r4, #128	; 0x80
 8000c54:	2300      	movs	r3, #0
 8000c56:	03e4      	lsls	r4, r4, #15
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	e7ac      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	03db      	lsls	r3, r3, #15
 8000c62:	421c      	tst	r4, r3
 8000c64:	d028      	beq.n	8000cb8 <__aeabi_fdiv+0x1c0>
 8000c66:	421d      	tst	r5, r3
 8000c68:	d126      	bne.n	8000cb8 <__aeabi_fdiv+0x1c0>
 8000c6a:	432b      	orrs	r3, r5
 8000c6c:	025c      	lsls	r4, r3, #9
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	4643      	mov	r3, r8
 8000c72:	22ff      	movs	r2, #255	; 0xff
 8000c74:	e79f      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c76:	0162      	lsls	r2, r4, #5
 8000c78:	016c      	lsls	r4, r5, #5
 8000c7a:	42a2      	cmp	r2, r4
 8000c7c:	d224      	bcs.n	8000cc8 <__aeabi_fdiv+0x1d0>
 8000c7e:	211b      	movs	r1, #27
 8000c80:	2500      	movs	r5, #0
 8000c82:	3e01      	subs	r6, #1
 8000c84:	2701      	movs	r7, #1
 8000c86:	0010      	movs	r0, r2
 8000c88:	006d      	lsls	r5, r5, #1
 8000c8a:	0052      	lsls	r2, r2, #1
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	db01      	blt.n	8000c94 <__aeabi_fdiv+0x19c>
 8000c90:	4294      	cmp	r4, r2
 8000c92:	d801      	bhi.n	8000c98 <__aeabi_fdiv+0x1a0>
 8000c94:	1b12      	subs	r2, r2, r4
 8000c96:	433d      	orrs	r5, r7
 8000c98:	3901      	subs	r1, #1
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d1f3      	bne.n	8000c86 <__aeabi_fdiv+0x18e>
 8000c9e:	0014      	movs	r4, r2
 8000ca0:	1e62      	subs	r2, r4, #1
 8000ca2:	4194      	sbcs	r4, r2
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	e76d      	b.n	8000b84 <__aeabi_fdiv+0x8c>
 8000ca8:	46ba      	mov	sl, r7
 8000caa:	4659      	mov	r1, fp
 8000cac:	0025      	movs	r5, r4
 8000cae:	4653      	mov	r3, sl
 8000cb0:	2902      	cmp	r1, #2
 8000cb2:	d000      	beq.n	8000cb6 <__aeabi_fdiv+0x1be>
 8000cb4:	e761      	b.n	8000b7a <__aeabi_fdiv+0x82>
 8000cb6:	e77c      	b.n	8000bb2 <__aeabi_fdiv+0xba>
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	03db      	lsls	r3, r3, #15
 8000cbc:	431c      	orrs	r4, r3
 8000cbe:	0264      	lsls	r4, r4, #9
 8000cc0:	0a64      	lsrs	r4, r4, #9
 8000cc2:	003b      	movs	r3, r7
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	e776      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000cc8:	1b12      	subs	r2, r2, r4
 8000cca:	211a      	movs	r1, #26
 8000ccc:	2501      	movs	r5, #1
 8000cce:	e7d9      	b.n	8000c84 <__aeabi_fdiv+0x18c>
 8000cd0:	369e      	adds	r6, #158	; 0x9e
 8000cd2:	002a      	movs	r2, r5
 8000cd4:	40b5      	lsls	r5, r6
 8000cd6:	002c      	movs	r4, r5
 8000cd8:	40c2      	lsrs	r2, r0
 8000cda:	1e65      	subs	r5, r4, #1
 8000cdc:	41ac      	sbcs	r4, r5
 8000cde:	4314      	orrs	r4, r2
 8000ce0:	0762      	lsls	r2, r4, #29
 8000ce2:	d004      	beq.n	8000cee <__aeabi_fdiv+0x1f6>
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	4022      	ands	r2, r4
 8000ce8:	2a04      	cmp	r2, #4
 8000cea:	d000      	beq.n	8000cee <__aeabi_fdiv+0x1f6>
 8000cec:	3404      	adds	r4, #4
 8000cee:	0162      	lsls	r2, r4, #5
 8000cf0:	d403      	bmi.n	8000cfa <__aeabi_fdiv+0x202>
 8000cf2:	01a4      	lsls	r4, r4, #6
 8000cf4:	0a64      	lsrs	r4, r4, #9
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	e75d      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	e75a      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000d00:	2480      	movs	r4, #128	; 0x80
 8000d02:	03e4      	lsls	r4, r4, #15
 8000d04:	432c      	orrs	r4, r5
 8000d06:	0264      	lsls	r4, r4, #9
 8000d08:	0a64      	lsrs	r4, r4, #9
 8000d0a:	22ff      	movs	r2, #255	; 0xff
 8000d0c:	e753      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	08019d94 	.word	0x08019d94
 8000d14:	f7ffffff 	.word	0xf7ffffff
 8000d18:	08019dd4 	.word	0x08019dd4

08000d1c <__eqsf2>:
 8000d1c:	b570      	push	{r4, r5, r6, lr}
 8000d1e:	0042      	lsls	r2, r0, #1
 8000d20:	024e      	lsls	r6, r1, #9
 8000d22:	004c      	lsls	r4, r1, #1
 8000d24:	0245      	lsls	r5, r0, #9
 8000d26:	0a6d      	lsrs	r5, r5, #9
 8000d28:	0e12      	lsrs	r2, r2, #24
 8000d2a:	0fc3      	lsrs	r3, r0, #31
 8000d2c:	0a76      	lsrs	r6, r6, #9
 8000d2e:	0e24      	lsrs	r4, r4, #24
 8000d30:	0fc9      	lsrs	r1, r1, #31
 8000d32:	2aff      	cmp	r2, #255	; 0xff
 8000d34:	d00f      	beq.n	8000d56 <__eqsf2+0x3a>
 8000d36:	2cff      	cmp	r4, #255	; 0xff
 8000d38:	d011      	beq.n	8000d5e <__eqsf2+0x42>
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	42a2      	cmp	r2, r4
 8000d3e:	d000      	beq.n	8000d42 <__eqsf2+0x26>
 8000d40:	bd70      	pop	{r4, r5, r6, pc}
 8000d42:	42b5      	cmp	r5, r6
 8000d44:	d1fc      	bne.n	8000d40 <__eqsf2+0x24>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d00d      	beq.n	8000d66 <__eqsf2+0x4a>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d1f8      	bne.n	8000d40 <__eqsf2+0x24>
 8000d4e:	0028      	movs	r0, r5
 8000d50:	1e45      	subs	r5, r0, #1
 8000d52:	41a8      	sbcs	r0, r5
 8000d54:	e7f4      	b.n	8000d40 <__eqsf2+0x24>
 8000d56:	2001      	movs	r0, #1
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d1f1      	bne.n	8000d40 <__eqsf2+0x24>
 8000d5c:	e7eb      	b.n	8000d36 <__eqsf2+0x1a>
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d1ed      	bne.n	8000d40 <__eqsf2+0x24>
 8000d64:	e7e9      	b.n	8000d3a <__eqsf2+0x1e>
 8000d66:	2000      	movs	r0, #0
 8000d68:	e7ea      	b.n	8000d40 <__eqsf2+0x24>
 8000d6a:	46c0      	nop			; (mov r8, r8)

08000d6c <__gesf2>:
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	004a      	lsls	r2, r1, #1
 8000d70:	024e      	lsls	r6, r1, #9
 8000d72:	0245      	lsls	r5, r0, #9
 8000d74:	0044      	lsls	r4, r0, #1
 8000d76:	0a6d      	lsrs	r5, r5, #9
 8000d78:	0e24      	lsrs	r4, r4, #24
 8000d7a:	0fc3      	lsrs	r3, r0, #31
 8000d7c:	0a76      	lsrs	r6, r6, #9
 8000d7e:	0e12      	lsrs	r2, r2, #24
 8000d80:	0fc9      	lsrs	r1, r1, #31
 8000d82:	2cff      	cmp	r4, #255	; 0xff
 8000d84:	d015      	beq.n	8000db2 <__gesf2+0x46>
 8000d86:	2aff      	cmp	r2, #255	; 0xff
 8000d88:	d00e      	beq.n	8000da8 <__gesf2+0x3c>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d115      	bne.n	8000dba <__gesf2+0x4e>
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	d101      	bne.n	8000d96 <__gesf2+0x2a>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d01c      	beq.n	8000dd0 <__gesf2+0x64>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d014      	beq.n	8000dc4 <__gesf2+0x58>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d027      	beq.n	8000dee <__gesf2+0x82>
 8000d9e:	2002      	movs	r0, #2
 8000da0:	3b01      	subs	r3, #1
 8000da2:	4018      	ands	r0, r3
 8000da4:	3801      	subs	r0, #1
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d0ee      	beq.n	8000d8a <__gesf2+0x1e>
 8000dac:	2002      	movs	r0, #2
 8000dae:	4240      	negs	r0, r0
 8000db0:	e7f9      	b.n	8000da6 <__gesf2+0x3a>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d1fa      	bne.n	8000dac <__gesf2+0x40>
 8000db6:	2aff      	cmp	r2, #255	; 0xff
 8000db8:	d00e      	beq.n	8000dd8 <__gesf2+0x6c>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d10e      	bne.n	8000ddc <__gesf2+0x70>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d0ed      	beq.n	8000d9e <__gesf2+0x32>
 8000dc2:	e00b      	b.n	8000ddc <__gesf2+0x70>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	3901      	subs	r1, #1
 8000dc8:	4399      	bics	r1, r3
 8000dca:	0008      	movs	r0, r1
 8000dcc:	3001      	adds	r0, #1
 8000dce:	e7ea      	b.n	8000da6 <__gesf2+0x3a>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0e7      	beq.n	8000da6 <__gesf2+0x3a>
 8000dd6:	e7e2      	b.n	8000d9e <__gesf2+0x32>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d1e7      	bne.n	8000dac <__gesf2+0x40>
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d1de      	bne.n	8000d9e <__gesf2+0x32>
 8000de0:	4294      	cmp	r4, r2
 8000de2:	dd05      	ble.n	8000df0 <__gesf2+0x84>
 8000de4:	2102      	movs	r1, #2
 8000de6:	1e58      	subs	r0, r3, #1
 8000de8:	4008      	ands	r0, r1
 8000dea:	3801      	subs	r0, #1
 8000dec:	e7db      	b.n	8000da6 <__gesf2+0x3a>
 8000dee:	2400      	movs	r4, #0
 8000df0:	42a2      	cmp	r2, r4
 8000df2:	dc04      	bgt.n	8000dfe <__gesf2+0x92>
 8000df4:	42b5      	cmp	r5, r6
 8000df6:	d8d2      	bhi.n	8000d9e <__gesf2+0x32>
 8000df8:	2000      	movs	r0, #0
 8000dfa:	42b5      	cmp	r5, r6
 8000dfc:	d2d3      	bcs.n	8000da6 <__gesf2+0x3a>
 8000dfe:	1e58      	subs	r0, r3, #1
 8000e00:	2301      	movs	r3, #1
 8000e02:	4398      	bics	r0, r3
 8000e04:	3001      	adds	r0, #1
 8000e06:	e7ce      	b.n	8000da6 <__gesf2+0x3a>

08000e08 <__lesf2>:
 8000e08:	b530      	push	{r4, r5, lr}
 8000e0a:	0042      	lsls	r2, r0, #1
 8000e0c:	0244      	lsls	r4, r0, #9
 8000e0e:	024d      	lsls	r5, r1, #9
 8000e10:	0fc3      	lsrs	r3, r0, #31
 8000e12:	0048      	lsls	r0, r1, #1
 8000e14:	0a64      	lsrs	r4, r4, #9
 8000e16:	0e12      	lsrs	r2, r2, #24
 8000e18:	0a6d      	lsrs	r5, r5, #9
 8000e1a:	0e00      	lsrs	r0, r0, #24
 8000e1c:	0fc9      	lsrs	r1, r1, #31
 8000e1e:	2aff      	cmp	r2, #255	; 0xff
 8000e20:	d012      	beq.n	8000e48 <__lesf2+0x40>
 8000e22:	28ff      	cmp	r0, #255	; 0xff
 8000e24:	d00c      	beq.n	8000e40 <__lesf2+0x38>
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d112      	bne.n	8000e50 <__lesf2+0x48>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d119      	bne.n	8000e62 <__lesf2+0x5a>
 8000e2e:	2d00      	cmp	r5, #0
 8000e30:	d117      	bne.n	8000e62 <__lesf2+0x5a>
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d02b      	beq.n	8000e8e <__lesf2+0x86>
 8000e36:	2002      	movs	r0, #2
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	4018      	ands	r0, r3
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	e026      	b.n	8000e8e <__lesf2+0x86>
 8000e40:	2d00      	cmp	r5, #0
 8000e42:	d0f0      	beq.n	8000e26 <__lesf2+0x1e>
 8000e44:	2002      	movs	r0, #2
 8000e46:	e022      	b.n	8000e8e <__lesf2+0x86>
 8000e48:	2c00      	cmp	r4, #0
 8000e4a:	d1fb      	bne.n	8000e44 <__lesf2+0x3c>
 8000e4c:	28ff      	cmp	r0, #255	; 0xff
 8000e4e:	d01f      	beq.n	8000e90 <__lesf2+0x88>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d11f      	bne.n	8000e94 <__lesf2+0x8c>
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d11d      	bne.n	8000e94 <__lesf2+0x8c>
 8000e58:	2002      	movs	r0, #2
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4018      	ands	r0, r3
 8000e5e:	3801      	subs	r0, #1
 8000e60:	e015      	b.n	8000e8e <__lesf2+0x86>
 8000e62:	2c00      	cmp	r4, #0
 8000e64:	d00e      	beq.n	8000e84 <__lesf2+0x7c>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d1e5      	bne.n	8000e36 <__lesf2+0x2e>
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	dc04      	bgt.n	8000e7a <__lesf2+0x72>
 8000e70:	42ac      	cmp	r4, r5
 8000e72:	d8e0      	bhi.n	8000e36 <__lesf2+0x2e>
 8000e74:	2000      	movs	r0, #0
 8000e76:	42ac      	cmp	r4, r5
 8000e78:	d209      	bcs.n	8000e8e <__lesf2+0x86>
 8000e7a:	1e58      	subs	r0, r3, #1
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4398      	bics	r0, r3
 8000e80:	3001      	adds	r0, #1
 8000e82:	e004      	b.n	8000e8e <__lesf2+0x86>
 8000e84:	2301      	movs	r3, #1
 8000e86:	3901      	subs	r1, #1
 8000e88:	4399      	bics	r1, r3
 8000e8a:	0008      	movs	r0, r1
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	bd30      	pop	{r4, r5, pc}
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d1d7      	bne.n	8000e44 <__lesf2+0x3c>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d1ce      	bne.n	8000e36 <__lesf2+0x2e>
 8000e98:	4282      	cmp	r2, r0
 8000e9a:	dde7      	ble.n	8000e6c <__lesf2+0x64>
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	1e58      	subs	r0, r3, #1
 8000ea0:	4008      	ands	r0, r1
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7f3      	b.n	8000e8e <__lesf2+0x86>
 8000ea6:	46c0      	nop			; (mov r8, r8)

08000ea8 <__aeabi_fmul>:
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	464e      	mov	r6, r9
 8000eac:	4657      	mov	r7, sl
 8000eae:	4645      	mov	r5, r8
 8000eb0:	46de      	mov	lr, fp
 8000eb2:	b5e0      	push	{r5, r6, r7, lr}
 8000eb4:	0243      	lsls	r3, r0, #9
 8000eb6:	0a5b      	lsrs	r3, r3, #9
 8000eb8:	0045      	lsls	r5, r0, #1
 8000eba:	b083      	sub	sp, #12
 8000ebc:	1c0f      	adds	r7, r1, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	0e2d      	lsrs	r5, r5, #24
 8000ec2:	0fc6      	lsrs	r6, r0, #31
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d057      	beq.n	8000f78 <__aeabi_fmul+0xd0>
 8000ec8:	2dff      	cmp	r5, #255	; 0xff
 8000eca:	d024      	beq.n	8000f16 <__aeabi_fmul+0x6e>
 8000ecc:	2080      	movs	r0, #128	; 0x80
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	04c0      	lsls	r0, r0, #19
 8000ed2:	4318      	orrs	r0, r3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4681      	mov	r9, r0
 8000ed8:	469a      	mov	sl, r3
 8000eda:	469b      	mov	fp, r3
 8000edc:	3d7f      	subs	r5, #127	; 0x7f
 8000ede:	027c      	lsls	r4, r7, #9
 8000ee0:	007a      	lsls	r2, r7, #1
 8000ee2:	0ffb      	lsrs	r3, r7, #31
 8000ee4:	0a64      	lsrs	r4, r4, #9
 8000ee6:	0e12      	lsrs	r2, r2, #24
 8000ee8:	4698      	mov	r8, r3
 8000eea:	d023      	beq.n	8000f34 <__aeabi_fmul+0x8c>
 8000eec:	2aff      	cmp	r2, #255	; 0xff
 8000eee:	d04b      	beq.n	8000f88 <__aeabi_fmul+0xe0>
 8000ef0:	00e3      	lsls	r3, r4, #3
 8000ef2:	2480      	movs	r4, #128	; 0x80
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	04e4      	lsls	r4, r4, #19
 8000ef8:	3a7f      	subs	r2, #127	; 0x7f
 8000efa:	431c      	orrs	r4, r3
 8000efc:	18ad      	adds	r5, r5, r2
 8000efe:	1c6b      	adds	r3, r5, #1
 8000f00:	4647      	mov	r7, r8
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	4653      	mov	r3, sl
 8000f06:	4077      	eors	r7, r6
 8000f08:	003a      	movs	r2, r7
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d848      	bhi.n	8000fa0 <__aeabi_fmul+0xf8>
 8000f0e:	497d      	ldr	r1, [pc, #500]	; (8001104 <__aeabi_fmul+0x25c>)
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	58cb      	ldr	r3, [r1, r3]
 8000f14:	469f      	mov	pc, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_fmul+0x74>
 8000f1a:	e085      	b.n	8001028 <__aeabi_fmul+0x180>
 8000f1c:	3308      	adds	r3, #8
 8000f1e:	469a      	mov	sl, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	469b      	mov	fp, r3
 8000f24:	027c      	lsls	r4, r7, #9
 8000f26:	007a      	lsls	r2, r7, #1
 8000f28:	0ffb      	lsrs	r3, r7, #31
 8000f2a:	25ff      	movs	r5, #255	; 0xff
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	4698      	mov	r8, r3
 8000f32:	d1db      	bne.n	8000eec <__aeabi_fmul+0x44>
 8000f34:	2c00      	cmp	r4, #0
 8000f36:	d000      	beq.n	8000f3a <__aeabi_fmul+0x92>
 8000f38:	e090      	b.n	800105c <__aeabi_fmul+0x1b4>
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	4692      	mov	sl, r2
 8000f42:	2001      	movs	r0, #1
 8000f44:	e7db      	b.n	8000efe <__aeabi_fmul+0x56>
 8000f46:	464c      	mov	r4, r9
 8000f48:	4658      	mov	r0, fp
 8000f4a:	0017      	movs	r7, r2
 8000f4c:	2802      	cmp	r0, #2
 8000f4e:	d024      	beq.n	8000f9a <__aeabi_fmul+0xf2>
 8000f50:	2803      	cmp	r0, #3
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fmul+0xae>
 8000f54:	e0cf      	b.n	80010f6 <__aeabi_fmul+0x24e>
 8000f56:	2200      	movs	r2, #0
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2801      	cmp	r0, #1
 8000f5c:	d14d      	bne.n	8000ffa <__aeabi_fmul+0x152>
 8000f5e:	0258      	lsls	r0, r3, #9
 8000f60:	05d2      	lsls	r2, r2, #23
 8000f62:	0a40      	lsrs	r0, r0, #9
 8000f64:	07ff      	lsls	r7, r7, #31
 8000f66:	4310      	orrs	r0, r2
 8000f68:	4338      	orrs	r0, r7
 8000f6a:	b003      	add	sp, #12
 8000f6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000f6e:	4690      	mov	r8, r2
 8000f70:	4699      	mov	r9, r3
 8000f72:	46a2      	mov	sl, r4
 8000f74:	46ab      	mov	fp, r5
 8000f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d15b      	bne.n	8001034 <__aeabi_fmul+0x18c>
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	469a      	mov	sl, r3
 8000f80:	3b03      	subs	r3, #3
 8000f82:	2500      	movs	r5, #0
 8000f84:	469b      	mov	fp, r3
 8000f86:	e7aa      	b.n	8000ede <__aeabi_fmul+0x36>
 8000f88:	35ff      	adds	r5, #255	; 0xff
 8000f8a:	2c00      	cmp	r4, #0
 8000f8c:	d160      	bne.n	8001050 <__aeabi_fmul+0x1a8>
 8000f8e:	4652      	mov	r2, sl
 8000f90:	2302      	movs	r3, #2
 8000f92:	431a      	orrs	r2, r3
 8000f94:	4692      	mov	sl, r2
 8000f96:	2002      	movs	r0, #2
 8000f98:	e7b1      	b.n	8000efe <__aeabi_fmul+0x56>
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e7de      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8000fa0:	464b      	mov	r3, r9
 8000fa2:	0c1b      	lsrs	r3, r3, #16
 8000fa4:	469c      	mov	ip, r3
 8000fa6:	464b      	mov	r3, r9
 8000fa8:	0426      	lsls	r6, r4, #16
 8000faa:	0c36      	lsrs	r6, r6, #16
 8000fac:	0418      	lsls	r0, r3, #16
 8000fae:	4661      	mov	r1, ip
 8000fb0:	0033      	movs	r3, r6
 8000fb2:	0c22      	lsrs	r2, r4, #16
 8000fb4:	4664      	mov	r4, ip
 8000fb6:	0c00      	lsrs	r0, r0, #16
 8000fb8:	4343      	muls	r3, r0
 8000fba:	434e      	muls	r6, r1
 8000fbc:	4350      	muls	r0, r2
 8000fbe:	4354      	muls	r4, r2
 8000fc0:	1980      	adds	r0, r0, r6
 8000fc2:	0c1a      	lsrs	r2, r3, #16
 8000fc4:	1812      	adds	r2, r2, r0
 8000fc6:	4296      	cmp	r6, r2
 8000fc8:	d903      	bls.n	8000fd2 <__aeabi_fmul+0x12a>
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	0249      	lsls	r1, r1, #9
 8000fce:	468c      	mov	ip, r1
 8000fd0:	4464      	add	r4, ip
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	0410      	lsls	r0, r2, #16
 8000fd8:	18c0      	adds	r0, r0, r3
 8000fda:	0183      	lsls	r3, r0, #6
 8000fdc:	1e5e      	subs	r6, r3, #1
 8000fde:	41b3      	sbcs	r3, r6
 8000fe0:	0e80      	lsrs	r0, r0, #26
 8000fe2:	4318      	orrs	r0, r3
 8000fe4:	0c13      	lsrs	r3, r2, #16
 8000fe6:	191b      	adds	r3, r3, r4
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	4303      	orrs	r3, r0
 8000fec:	001c      	movs	r4, r3
 8000fee:	0123      	lsls	r3, r4, #4
 8000ff0:	d579      	bpl.n	80010e6 <__aeabi_fmul+0x23e>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	0862      	lsrs	r2, r4, #1
 8000ff6:	401c      	ands	r4, r3
 8000ff8:	4314      	orrs	r4, r2
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	327f      	adds	r2, #127	; 0x7f
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	dd4d      	ble.n	800109e <__aeabi_fmul+0x1f6>
 8001002:	0763      	lsls	r3, r4, #29
 8001004:	d004      	beq.n	8001010 <__aeabi_fmul+0x168>
 8001006:	230f      	movs	r3, #15
 8001008:	4023      	ands	r3, r4
 800100a:	2b04      	cmp	r3, #4
 800100c:	d000      	beq.n	8001010 <__aeabi_fmul+0x168>
 800100e:	3404      	adds	r4, #4
 8001010:	0123      	lsls	r3, r4, #4
 8001012:	d503      	bpl.n	800101c <__aeabi_fmul+0x174>
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <__aeabi_fmul+0x260>)
 8001016:	9a01      	ldr	r2, [sp, #4]
 8001018:	401c      	ands	r4, r3
 800101a:	3280      	adds	r2, #128	; 0x80
 800101c:	2afe      	cmp	r2, #254	; 0xfe
 800101e:	dcbc      	bgt.n	8000f9a <__aeabi_fmul+0xf2>
 8001020:	01a3      	lsls	r3, r4, #6
 8001022:	0a5b      	lsrs	r3, r3, #9
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	e79a      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001028:	230c      	movs	r3, #12
 800102a:	469a      	mov	sl, r3
 800102c:	3b09      	subs	r3, #9
 800102e:	25ff      	movs	r5, #255	; 0xff
 8001030:	469b      	mov	fp, r3
 8001032:	e754      	b.n	8000ede <__aeabi_fmul+0x36>
 8001034:	0018      	movs	r0, r3
 8001036:	f002 f94b 	bl	80032d0 <__clzsi2>
 800103a:	464a      	mov	r2, r9
 800103c:	1f43      	subs	r3, r0, #5
 800103e:	2576      	movs	r5, #118	; 0x76
 8001040:	409a      	lsls	r2, r3
 8001042:	2300      	movs	r3, #0
 8001044:	426d      	negs	r5, r5
 8001046:	4691      	mov	r9, r2
 8001048:	1a2d      	subs	r5, r5, r0
 800104a:	469a      	mov	sl, r3
 800104c:	469b      	mov	fp, r3
 800104e:	e746      	b.n	8000ede <__aeabi_fmul+0x36>
 8001050:	4652      	mov	r2, sl
 8001052:	2303      	movs	r3, #3
 8001054:	431a      	orrs	r2, r3
 8001056:	4692      	mov	sl, r2
 8001058:	2003      	movs	r0, #3
 800105a:	e750      	b.n	8000efe <__aeabi_fmul+0x56>
 800105c:	0020      	movs	r0, r4
 800105e:	f002 f937 	bl	80032d0 <__clzsi2>
 8001062:	1f43      	subs	r3, r0, #5
 8001064:	1a2d      	subs	r5, r5, r0
 8001066:	409c      	lsls	r4, r3
 8001068:	3d76      	subs	r5, #118	; 0x76
 800106a:	2000      	movs	r0, #0
 800106c:	e747      	b.n	8000efe <__aeabi_fmul+0x56>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	2700      	movs	r7, #0
 8001072:	03db      	lsls	r3, r3, #15
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	e772      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001078:	4642      	mov	r2, r8
 800107a:	e766      	b.n	8000f4a <__aeabi_fmul+0xa2>
 800107c:	464c      	mov	r4, r9
 800107e:	0032      	movs	r2, r6
 8001080:	4658      	mov	r0, fp
 8001082:	e762      	b.n	8000f4a <__aeabi_fmul+0xa2>
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	464a      	mov	r2, r9
 8001088:	03db      	lsls	r3, r3, #15
 800108a:	421a      	tst	r2, r3
 800108c:	d022      	beq.n	80010d4 <__aeabi_fmul+0x22c>
 800108e:	421c      	tst	r4, r3
 8001090:	d120      	bne.n	80010d4 <__aeabi_fmul+0x22c>
 8001092:	4323      	orrs	r3, r4
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	0a5b      	lsrs	r3, r3, #9
 8001098:	4647      	mov	r7, r8
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	e75f      	b.n	8000f5e <__aeabi_fmul+0xb6>
 800109e:	2301      	movs	r3, #1
 80010a0:	1a9a      	subs	r2, r3, r2
 80010a2:	2a1b      	cmp	r2, #27
 80010a4:	dc21      	bgt.n	80010ea <__aeabi_fmul+0x242>
 80010a6:	0023      	movs	r3, r4
 80010a8:	9901      	ldr	r1, [sp, #4]
 80010aa:	40d3      	lsrs	r3, r2
 80010ac:	319e      	adds	r1, #158	; 0x9e
 80010ae:	408c      	lsls	r4, r1
 80010b0:	001a      	movs	r2, r3
 80010b2:	0023      	movs	r3, r4
 80010b4:	1e5c      	subs	r4, r3, #1
 80010b6:	41a3      	sbcs	r3, r4
 80010b8:	4313      	orrs	r3, r2
 80010ba:	075a      	lsls	r2, r3, #29
 80010bc:	d004      	beq.n	80010c8 <__aeabi_fmul+0x220>
 80010be:	220f      	movs	r2, #15
 80010c0:	401a      	ands	r2, r3
 80010c2:	2a04      	cmp	r2, #4
 80010c4:	d000      	beq.n	80010c8 <__aeabi_fmul+0x220>
 80010c6:	3304      	adds	r3, #4
 80010c8:	015a      	lsls	r2, r3, #5
 80010ca:	d411      	bmi.n	80010f0 <__aeabi_fmul+0x248>
 80010cc:	019b      	lsls	r3, r3, #6
 80010ce:	0a5b      	lsrs	r3, r3, #9
 80010d0:	2200      	movs	r2, #0
 80010d2:	e744      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	464a      	mov	r2, r9
 80010d8:	03db      	lsls	r3, r3, #15
 80010da:	4313      	orrs	r3, r2
 80010dc:	025b      	lsls	r3, r3, #9
 80010de:	0a5b      	lsrs	r3, r3, #9
 80010e0:	0037      	movs	r7, r6
 80010e2:	22ff      	movs	r2, #255	; 0xff
 80010e4:	e73b      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010e6:	9501      	str	r5, [sp, #4]
 80010e8:	e787      	b.n	8000ffa <__aeabi_fmul+0x152>
 80010ea:	2200      	movs	r2, #0
 80010ec:	2300      	movs	r3, #0
 80010ee:	e736      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010f0:	2201      	movs	r2, #1
 80010f2:	2300      	movs	r3, #0
 80010f4:	e733      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	03db      	lsls	r3, r3, #15
 80010fa:	4323      	orrs	r3, r4
 80010fc:	025b      	lsls	r3, r3, #9
 80010fe:	0a5b      	lsrs	r3, r3, #9
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	e72c      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001104:	08019e14 	.word	0x08019e14
 8001108:	f7ffffff 	.word	0xf7ffffff

0800110c <__aeabi_fsub>:
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	4647      	mov	r7, r8
 8001110:	46ce      	mov	lr, r9
 8001112:	0044      	lsls	r4, r0, #1
 8001114:	0fc2      	lsrs	r2, r0, #31
 8001116:	b580      	push	{r7, lr}
 8001118:	0247      	lsls	r7, r0, #9
 800111a:	0248      	lsls	r0, r1, #9
 800111c:	0a40      	lsrs	r0, r0, #9
 800111e:	4684      	mov	ip, r0
 8001120:	4666      	mov	r6, ip
 8001122:	0048      	lsls	r0, r1, #1
 8001124:	0a7f      	lsrs	r7, r7, #9
 8001126:	0e24      	lsrs	r4, r4, #24
 8001128:	00f6      	lsls	r6, r6, #3
 800112a:	0025      	movs	r5, r4
 800112c:	4690      	mov	r8, r2
 800112e:	00fb      	lsls	r3, r7, #3
 8001130:	0e00      	lsrs	r0, r0, #24
 8001132:	0fc9      	lsrs	r1, r1, #31
 8001134:	46b1      	mov	r9, r6
 8001136:	28ff      	cmp	r0, #255	; 0xff
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x30>
 800113a:	e085      	b.n	8001248 <__aeabi_fsub+0x13c>
 800113c:	2601      	movs	r6, #1
 800113e:	4071      	eors	r1, r6
 8001140:	1a26      	subs	r6, r4, r0
 8001142:	4291      	cmp	r1, r2
 8001144:	d057      	beq.n	80011f6 <__aeabi_fsub+0xea>
 8001146:	2e00      	cmp	r6, #0
 8001148:	dd43      	ble.n	80011d2 <__aeabi_fsub+0xc6>
 800114a:	2800      	cmp	r0, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fsub+0x44>
 800114e:	e07f      	b.n	8001250 <__aeabi_fsub+0x144>
 8001150:	4649      	mov	r1, r9
 8001152:	2900      	cmp	r1, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x4c>
 8001156:	e0aa      	b.n	80012ae <__aeabi_fsub+0x1a2>
 8001158:	3e01      	subs	r6, #1
 800115a:	2e00      	cmp	r6, #0
 800115c:	d000      	beq.n	8001160 <__aeabi_fsub+0x54>
 800115e:	e0f7      	b.n	8001350 <__aeabi_fsub+0x244>
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	015a      	lsls	r2, r3, #5
 8001164:	d400      	bmi.n	8001168 <__aeabi_fsub+0x5c>
 8001166:	e08b      	b.n	8001280 <__aeabi_fsub+0x174>
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	099c      	lsrs	r4, r3, #6
 800116c:	0020      	movs	r0, r4
 800116e:	f002 f8af 	bl	80032d0 <__clzsi2>
 8001172:	3805      	subs	r0, #5
 8001174:	4084      	lsls	r4, r0
 8001176:	4285      	cmp	r5, r0
 8001178:	dd00      	ble.n	800117c <__aeabi_fsub+0x70>
 800117a:	e0d3      	b.n	8001324 <__aeabi_fsub+0x218>
 800117c:	1b45      	subs	r5, r0, r5
 800117e:	0023      	movs	r3, r4
 8001180:	2020      	movs	r0, #32
 8001182:	3501      	adds	r5, #1
 8001184:	40eb      	lsrs	r3, r5
 8001186:	1b45      	subs	r5, r0, r5
 8001188:	40ac      	lsls	r4, r5
 800118a:	1e62      	subs	r2, r4, #1
 800118c:	4194      	sbcs	r4, r2
 800118e:	4323      	orrs	r3, r4
 8001190:	2407      	movs	r4, #7
 8001192:	2500      	movs	r5, #0
 8001194:	401c      	ands	r4, r3
 8001196:	2201      	movs	r2, #1
 8001198:	4641      	mov	r1, r8
 800119a:	400a      	ands	r2, r1
 800119c:	2c00      	cmp	r4, #0
 800119e:	d004      	beq.n	80011aa <__aeabi_fsub+0x9e>
 80011a0:	210f      	movs	r1, #15
 80011a2:	4019      	ands	r1, r3
 80011a4:	2904      	cmp	r1, #4
 80011a6:	d000      	beq.n	80011aa <__aeabi_fsub+0x9e>
 80011a8:	3304      	adds	r3, #4
 80011aa:	0159      	lsls	r1, r3, #5
 80011ac:	d400      	bmi.n	80011b0 <__aeabi_fsub+0xa4>
 80011ae:	e080      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 80011b0:	3501      	adds	r5, #1
 80011b2:	b2ec      	uxtb	r4, r5
 80011b4:	2dff      	cmp	r5, #255	; 0xff
 80011b6:	d000      	beq.n	80011ba <__aeabi_fsub+0xae>
 80011b8:	e0a3      	b.n	8001302 <__aeabi_fsub+0x1f6>
 80011ba:	24ff      	movs	r4, #255	; 0xff
 80011bc:	2300      	movs	r3, #0
 80011be:	025b      	lsls	r3, r3, #9
 80011c0:	05e4      	lsls	r4, r4, #23
 80011c2:	0a58      	lsrs	r0, r3, #9
 80011c4:	07d2      	lsls	r2, r2, #31
 80011c6:	4320      	orrs	r0, r4
 80011c8:	4310      	orrs	r0, r2
 80011ca:	bc0c      	pop	{r2, r3}
 80011cc:	4690      	mov	r8, r2
 80011ce:	4699      	mov	r9, r3
 80011d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d174      	bne.n	80012c0 <__aeabi_fsub+0x1b4>
 80011d6:	1c60      	adds	r0, r4, #1
 80011d8:	b2c0      	uxtb	r0, r0
 80011da:	2801      	cmp	r0, #1
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_fsub+0xd4>
 80011de:	e0a7      	b.n	8001330 <__aeabi_fsub+0x224>
 80011e0:	464a      	mov	r2, r9
 80011e2:	1a9c      	subs	r4, r3, r2
 80011e4:	0162      	lsls	r2, r4, #5
 80011e6:	d500      	bpl.n	80011ea <__aeabi_fsub+0xde>
 80011e8:	e0b6      	b.n	8001358 <__aeabi_fsub+0x24c>
 80011ea:	2c00      	cmp	r4, #0
 80011ec:	d1be      	bne.n	800116c <__aeabi_fsub+0x60>
 80011ee:	2200      	movs	r2, #0
 80011f0:	2400      	movs	r4, #0
 80011f2:	2300      	movs	r3, #0
 80011f4:	e7e3      	b.n	80011be <__aeabi_fsub+0xb2>
 80011f6:	2e00      	cmp	r6, #0
 80011f8:	dc00      	bgt.n	80011fc <__aeabi_fsub+0xf0>
 80011fa:	e085      	b.n	8001308 <__aeabi_fsub+0x1fc>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d046      	beq.n	800128e <__aeabi_fsub+0x182>
 8001200:	2cff      	cmp	r4, #255	; 0xff
 8001202:	d049      	beq.n	8001298 <__aeabi_fsub+0x18c>
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	4648      	mov	r0, r9
 8001208:	04d2      	lsls	r2, r2, #19
 800120a:	4310      	orrs	r0, r2
 800120c:	4681      	mov	r9, r0
 800120e:	2201      	movs	r2, #1
 8001210:	2e1b      	cmp	r6, #27
 8001212:	dc09      	bgt.n	8001228 <__aeabi_fsub+0x11c>
 8001214:	2020      	movs	r0, #32
 8001216:	464c      	mov	r4, r9
 8001218:	1b80      	subs	r0, r0, r6
 800121a:	4084      	lsls	r4, r0
 800121c:	464a      	mov	r2, r9
 800121e:	0020      	movs	r0, r4
 8001220:	40f2      	lsrs	r2, r6
 8001222:	1e44      	subs	r4, r0, #1
 8001224:	41a0      	sbcs	r0, r4
 8001226:	4302      	orrs	r2, r0
 8001228:	189b      	adds	r3, r3, r2
 800122a:	015a      	lsls	r2, r3, #5
 800122c:	d528      	bpl.n	8001280 <__aeabi_fsub+0x174>
 800122e:	3501      	adds	r5, #1
 8001230:	2dff      	cmp	r5, #255	; 0xff
 8001232:	d100      	bne.n	8001236 <__aeabi_fsub+0x12a>
 8001234:	e0a8      	b.n	8001388 <__aeabi_fsub+0x27c>
 8001236:	2201      	movs	r2, #1
 8001238:	2407      	movs	r4, #7
 800123a:	4994      	ldr	r1, [pc, #592]	; (800148c <__aeabi_fsub+0x380>)
 800123c:	401a      	ands	r2, r3
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	400b      	ands	r3, r1
 8001242:	4313      	orrs	r3, r2
 8001244:	401c      	ands	r4, r3
 8001246:	e7a6      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001248:	2e00      	cmp	r6, #0
 800124a:	d000      	beq.n	800124e <__aeabi_fsub+0x142>
 800124c:	e778      	b.n	8001140 <__aeabi_fsub+0x34>
 800124e:	e775      	b.n	800113c <__aeabi_fsub+0x30>
 8001250:	2cff      	cmp	r4, #255	; 0xff
 8001252:	d054      	beq.n	80012fe <__aeabi_fsub+0x1f2>
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	4649      	mov	r1, r9
 8001258:	04d2      	lsls	r2, r2, #19
 800125a:	4311      	orrs	r1, r2
 800125c:	4689      	mov	r9, r1
 800125e:	2201      	movs	r2, #1
 8001260:	2e1b      	cmp	r6, #27
 8001262:	dc09      	bgt.n	8001278 <__aeabi_fsub+0x16c>
 8001264:	2120      	movs	r1, #32
 8001266:	4648      	mov	r0, r9
 8001268:	1b89      	subs	r1, r1, r6
 800126a:	4088      	lsls	r0, r1
 800126c:	464a      	mov	r2, r9
 800126e:	0001      	movs	r1, r0
 8001270:	40f2      	lsrs	r2, r6
 8001272:	1e48      	subs	r0, r1, #1
 8001274:	4181      	sbcs	r1, r0
 8001276:	430a      	orrs	r2, r1
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	015a      	lsls	r2, r3, #5
 800127c:	d500      	bpl.n	8001280 <__aeabi_fsub+0x174>
 800127e:	e773      	b.n	8001168 <__aeabi_fsub+0x5c>
 8001280:	2201      	movs	r2, #1
 8001282:	4641      	mov	r1, r8
 8001284:	400a      	ands	r2, r1
 8001286:	0759      	lsls	r1, r3, #29
 8001288:	d000      	beq.n	800128c <__aeabi_fsub+0x180>
 800128a:	e789      	b.n	80011a0 <__aeabi_fsub+0x94>
 800128c:	e011      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 800128e:	4648      	mov	r0, r9
 8001290:	2800      	cmp	r0, #0
 8001292:	d158      	bne.n	8001346 <__aeabi_fsub+0x23a>
 8001294:	2cff      	cmp	r4, #255	; 0xff
 8001296:	d10c      	bne.n	80012b2 <__aeabi_fsub+0x1a6>
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_fsub+0x194>
 800129e:	e78c      	b.n	80011ba <__aeabi_fsub+0xae>
 80012a0:	2080      	movs	r0, #128	; 0x80
 80012a2:	03c0      	lsls	r0, r0, #15
 80012a4:	4303      	orrs	r3, r0
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	0a5b      	lsrs	r3, r3, #9
 80012aa:	24ff      	movs	r4, #255	; 0xff
 80012ac:	e787      	b.n	80011be <__aeabi_fsub+0xb2>
 80012ae:	2cff      	cmp	r4, #255	; 0xff
 80012b0:	d025      	beq.n	80012fe <__aeabi_fsub+0x1f2>
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	2dff      	cmp	r5, #255	; 0xff
 80012b6:	d0f0      	beq.n	800129a <__aeabi_fsub+0x18e>
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	0a5b      	lsrs	r3, r3, #9
 80012bc:	b2ec      	uxtb	r4, r5
 80012be:	e77e      	b.n	80011be <__aeabi_fsub+0xb2>
 80012c0:	2c00      	cmp	r4, #0
 80012c2:	d04d      	beq.n	8001360 <__aeabi_fsub+0x254>
 80012c4:	28ff      	cmp	r0, #255	; 0xff
 80012c6:	d018      	beq.n	80012fa <__aeabi_fsub+0x1ee>
 80012c8:	2480      	movs	r4, #128	; 0x80
 80012ca:	04e4      	lsls	r4, r4, #19
 80012cc:	4272      	negs	r2, r6
 80012ce:	4323      	orrs	r3, r4
 80012d0:	2a1b      	cmp	r2, #27
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_fsub+0x1ca>
 80012d4:	e0c4      	b.n	8001460 <__aeabi_fsub+0x354>
 80012d6:	001c      	movs	r4, r3
 80012d8:	2520      	movs	r5, #32
 80012da:	40d4      	lsrs	r4, r2
 80012dc:	1aaa      	subs	r2, r5, r2
 80012de:	4093      	lsls	r3, r2
 80012e0:	1e5a      	subs	r2, r3, #1
 80012e2:	4193      	sbcs	r3, r2
 80012e4:	4323      	orrs	r3, r4
 80012e6:	464a      	mov	r2, r9
 80012e8:	0005      	movs	r5, r0
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	4688      	mov	r8, r1
 80012ee:	e738      	b.n	8001162 <__aeabi_fsub+0x56>
 80012f0:	1c72      	adds	r2, r6, #1
 80012f2:	d0f8      	beq.n	80012e6 <__aeabi_fsub+0x1da>
 80012f4:	43f2      	mvns	r2, r6
 80012f6:	28ff      	cmp	r0, #255	; 0xff
 80012f8:	d1ea      	bne.n	80012d0 <__aeabi_fsub+0x1c4>
 80012fa:	000a      	movs	r2, r1
 80012fc:	464b      	mov	r3, r9
 80012fe:	25ff      	movs	r5, #255	; 0xff
 8001300:	e7d7      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001302:	019b      	lsls	r3, r3, #6
 8001304:	0a5b      	lsrs	r3, r3, #9
 8001306:	e75a      	b.n	80011be <__aeabi_fsub+0xb2>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d141      	bne.n	8001390 <__aeabi_fsub+0x284>
 800130c:	1c65      	adds	r5, r4, #1
 800130e:	b2e9      	uxtb	r1, r5
 8001310:	2901      	cmp	r1, #1
 8001312:	dd45      	ble.n	80013a0 <__aeabi_fsub+0x294>
 8001314:	2dff      	cmp	r5, #255	; 0xff
 8001316:	d100      	bne.n	800131a <__aeabi_fsub+0x20e>
 8001318:	e74f      	b.n	80011ba <__aeabi_fsub+0xae>
 800131a:	2407      	movs	r4, #7
 800131c:	444b      	add	r3, r9
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	401c      	ands	r4, r3
 8001322:	e738      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001324:	2207      	movs	r2, #7
 8001326:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <__aeabi_fsub+0x384>)
 8001328:	1a2d      	subs	r5, r5, r0
 800132a:	4023      	ands	r3, r4
 800132c:	4014      	ands	r4, r2
 800132e:	e732      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001330:	2c00      	cmp	r4, #0
 8001332:	d11d      	bne.n	8001370 <__aeabi_fsub+0x264>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d17a      	bne.n	800142e <__aeabi_fsub+0x322>
 8001338:	464b      	mov	r3, r9
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x234>
 800133e:	e091      	b.n	8001464 <__aeabi_fsub+0x358>
 8001340:	000a      	movs	r2, r1
 8001342:	2500      	movs	r5, #0
 8001344:	e7b5      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001346:	3e01      	subs	r6, #1
 8001348:	2e00      	cmp	r6, #0
 800134a:	d119      	bne.n	8001380 <__aeabi_fsub+0x274>
 800134c:	444b      	add	r3, r9
 800134e:	e76c      	b.n	800122a <__aeabi_fsub+0x11e>
 8001350:	2cff      	cmp	r4, #255	; 0xff
 8001352:	d184      	bne.n	800125e <__aeabi_fsub+0x152>
 8001354:	25ff      	movs	r5, #255	; 0xff
 8001356:	e7ac      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001358:	464a      	mov	r2, r9
 800135a:	4688      	mov	r8, r1
 800135c:	1ad4      	subs	r4, r2, r3
 800135e:	e705      	b.n	800116c <__aeabi_fsub+0x60>
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1c5      	bne.n	80012f0 <__aeabi_fsub+0x1e4>
 8001364:	000a      	movs	r2, r1
 8001366:	28ff      	cmp	r0, #255	; 0xff
 8001368:	d0c8      	beq.n	80012fc <__aeabi_fsub+0x1f0>
 800136a:	0005      	movs	r5, r0
 800136c:	464b      	mov	r3, r9
 800136e:	e7a0      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d149      	bne.n	8001408 <__aeabi_fsub+0x2fc>
 8001374:	464b      	mov	r3, r9
 8001376:	2b00      	cmp	r3, #0
 8001378:	d077      	beq.n	800146a <__aeabi_fsub+0x35e>
 800137a:	000a      	movs	r2, r1
 800137c:	25ff      	movs	r5, #255	; 0xff
 800137e:	e798      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001380:	2cff      	cmp	r4, #255	; 0xff
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x27a>
 8001384:	e743      	b.n	800120e <__aeabi_fsub+0x102>
 8001386:	e787      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001388:	000a      	movs	r2, r1
 800138a:	24ff      	movs	r4, #255	; 0xff
 800138c:	2300      	movs	r3, #0
 800138e:	e716      	b.n	80011be <__aeabi_fsub+0xb2>
 8001390:	2c00      	cmp	r4, #0
 8001392:	d115      	bne.n	80013c0 <__aeabi_fsub+0x2b4>
 8001394:	2b00      	cmp	r3, #0
 8001396:	d157      	bne.n	8001448 <__aeabi_fsub+0x33c>
 8001398:	28ff      	cmp	r0, #255	; 0xff
 800139a:	d1e6      	bne.n	800136a <__aeabi_fsub+0x25e>
 800139c:	464b      	mov	r3, r9
 800139e:	e77b      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d120      	bne.n	80013e6 <__aeabi_fsub+0x2da>
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d057      	beq.n	8001458 <__aeabi_fsub+0x34c>
 80013a8:	4649      	mov	r1, r9
 80013aa:	2900      	cmp	r1, #0
 80013ac:	d053      	beq.n	8001456 <__aeabi_fsub+0x34a>
 80013ae:	444b      	add	r3, r9
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	d568      	bpl.n	8001486 <__aeabi_fsub+0x37a>
 80013b4:	2407      	movs	r4, #7
 80013b6:	4a36      	ldr	r2, [pc, #216]	; (8001490 <__aeabi_fsub+0x384>)
 80013b8:	401c      	ands	r4, r3
 80013ba:	2501      	movs	r5, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	e6ea      	b.n	8001196 <__aeabi_fsub+0x8a>
 80013c0:	28ff      	cmp	r0, #255	; 0xff
 80013c2:	d0eb      	beq.n	800139c <__aeabi_fsub+0x290>
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	04d2      	lsls	r2, r2, #19
 80013c8:	4276      	negs	r6, r6
 80013ca:	4313      	orrs	r3, r2
 80013cc:	2e1b      	cmp	r6, #27
 80013ce:	dc53      	bgt.n	8001478 <__aeabi_fsub+0x36c>
 80013d0:	2520      	movs	r5, #32
 80013d2:	1bad      	subs	r5, r5, r6
 80013d4:	001a      	movs	r2, r3
 80013d6:	40ab      	lsls	r3, r5
 80013d8:	40f2      	lsrs	r2, r6
 80013da:	1e5c      	subs	r4, r3, #1
 80013dc:	41a3      	sbcs	r3, r4
 80013de:	4313      	orrs	r3, r2
 80013e0:	444b      	add	r3, r9
 80013e2:	0005      	movs	r5, r0
 80013e4:	e721      	b.n	800122a <__aeabi_fsub+0x11e>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0d8      	beq.n	800139c <__aeabi_fsub+0x290>
 80013ea:	4649      	mov	r1, r9
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_fsub+0x2e6>
 80013f0:	e752      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	03c9      	lsls	r1, r1, #15
 80013f6:	420f      	tst	r7, r1
 80013f8:	d100      	bne.n	80013fc <__aeabi_fsub+0x2f0>
 80013fa:	e74d      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013fc:	4660      	mov	r0, ip
 80013fe:	4208      	tst	r0, r1
 8001400:	d000      	beq.n	8001404 <__aeabi_fsub+0x2f8>
 8001402:	e749      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001404:	464b      	mov	r3, r9
 8001406:	e747      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001408:	4648      	mov	r0, r9
 800140a:	25ff      	movs	r5, #255	; 0xff
 800140c:	2800      	cmp	r0, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x306>
 8001410:	e74f      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	03d2      	lsls	r2, r2, #15
 8001416:	4217      	tst	r7, r2
 8001418:	d004      	beq.n	8001424 <__aeabi_fsub+0x318>
 800141a:	4660      	mov	r0, ip
 800141c:	4210      	tst	r0, r2
 800141e:	d101      	bne.n	8001424 <__aeabi_fsub+0x318>
 8001420:	464b      	mov	r3, r9
 8001422:	4688      	mov	r8, r1
 8001424:	2201      	movs	r2, #1
 8001426:	4641      	mov	r1, r8
 8001428:	25ff      	movs	r5, #255	; 0xff
 800142a:	400a      	ands	r2, r1
 800142c:	e741      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 800142e:	4648      	mov	r0, r9
 8001430:	2800      	cmp	r0, #0
 8001432:	d01f      	beq.n	8001474 <__aeabi_fsub+0x368>
 8001434:	1a1a      	subs	r2, r3, r0
 8001436:	0150      	lsls	r0, r2, #5
 8001438:	d520      	bpl.n	800147c <__aeabi_fsub+0x370>
 800143a:	464a      	mov	r2, r9
 800143c:	2407      	movs	r4, #7
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	401c      	ands	r4, r3
 8001442:	4688      	mov	r8, r1
 8001444:	2500      	movs	r5, #0
 8001446:	e6a6      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001448:	1c74      	adds	r4, r6, #1
 800144a:	d0c9      	beq.n	80013e0 <__aeabi_fsub+0x2d4>
 800144c:	43f6      	mvns	r6, r6
 800144e:	28ff      	cmp	r0, #255	; 0xff
 8001450:	d1bc      	bne.n	80013cc <__aeabi_fsub+0x2c0>
 8001452:	464b      	mov	r3, r9
 8001454:	e720      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001456:	4699      	mov	r9, r3
 8001458:	464b      	mov	r3, r9
 800145a:	2500      	movs	r5, #0
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	e72b      	b.n	80012b8 <__aeabi_fsub+0x1ac>
 8001460:	2301      	movs	r3, #1
 8001462:	e740      	b.n	80012e6 <__aeabi_fsub+0x1da>
 8001464:	2200      	movs	r2, #0
 8001466:	2300      	movs	r3, #0
 8001468:	e6a9      	b.n	80011be <__aeabi_fsub+0xb2>
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	2200      	movs	r2, #0
 800146e:	03db      	lsls	r3, r3, #15
 8001470:	24ff      	movs	r4, #255	; 0xff
 8001472:	e6a4      	b.n	80011be <__aeabi_fsub+0xb2>
 8001474:	2500      	movs	r5, #0
 8001476:	e71c      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001478:	2301      	movs	r3, #1
 800147a:	e7b1      	b.n	80013e0 <__aeabi_fsub+0x2d4>
 800147c:	2a00      	cmp	r2, #0
 800147e:	d0f1      	beq.n	8001464 <__aeabi_fsub+0x358>
 8001480:	0013      	movs	r3, r2
 8001482:	2500      	movs	r5, #0
 8001484:	e6fc      	b.n	8001280 <__aeabi_fsub+0x174>
 8001486:	2500      	movs	r5, #0
 8001488:	e6fa      	b.n	8001280 <__aeabi_fsub+0x174>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	7dffffff 	.word	0x7dffffff
 8001490:	fbffffff 	.word	0xfbffffff

08001494 <__aeabi_f2iz>:
 8001494:	0241      	lsls	r1, r0, #9
 8001496:	0042      	lsls	r2, r0, #1
 8001498:	0fc3      	lsrs	r3, r0, #31
 800149a:	0a49      	lsrs	r1, r1, #9
 800149c:	0e12      	lsrs	r2, r2, #24
 800149e:	2000      	movs	r0, #0
 80014a0:	2a7e      	cmp	r2, #126	; 0x7e
 80014a2:	d90d      	bls.n	80014c0 <__aeabi_f2iz+0x2c>
 80014a4:	2a9d      	cmp	r2, #157	; 0x9d
 80014a6:	d80c      	bhi.n	80014c2 <__aeabi_f2iz+0x2e>
 80014a8:	2080      	movs	r0, #128	; 0x80
 80014aa:	0400      	lsls	r0, r0, #16
 80014ac:	4301      	orrs	r1, r0
 80014ae:	2a95      	cmp	r2, #149	; 0x95
 80014b0:	dc0a      	bgt.n	80014c8 <__aeabi_f2iz+0x34>
 80014b2:	2096      	movs	r0, #150	; 0x96
 80014b4:	1a82      	subs	r2, r0, r2
 80014b6:	40d1      	lsrs	r1, r2
 80014b8:	4248      	negs	r0, r1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_f2iz+0x2c>
 80014be:	0008      	movs	r0, r1
 80014c0:	4770      	bx	lr
 80014c2:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <__aeabi_f2iz+0x3c>)
 80014c4:	1898      	adds	r0, r3, r2
 80014c6:	e7fb      	b.n	80014c0 <__aeabi_f2iz+0x2c>
 80014c8:	3a96      	subs	r2, #150	; 0x96
 80014ca:	4091      	lsls	r1, r2
 80014cc:	e7f4      	b.n	80014b8 <__aeabi_f2iz+0x24>
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	7fffffff 	.word	0x7fffffff

080014d4 <__aeabi_i2f>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d03d      	beq.n	8001556 <__aeabi_i2f+0x82>
 80014da:	17c3      	asrs	r3, r0, #31
 80014dc:	18c5      	adds	r5, r0, r3
 80014de:	405d      	eors	r5, r3
 80014e0:	0fc4      	lsrs	r4, r0, #31
 80014e2:	0028      	movs	r0, r5
 80014e4:	f001 fef4 	bl	80032d0 <__clzsi2>
 80014e8:	229e      	movs	r2, #158	; 0x9e
 80014ea:	1a12      	subs	r2, r2, r0
 80014ec:	2a96      	cmp	r2, #150	; 0x96
 80014ee:	dc07      	bgt.n	8001500 <__aeabi_i2f+0x2c>
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	2808      	cmp	r0, #8
 80014f4:	dd33      	ble.n	800155e <__aeabi_i2f+0x8a>
 80014f6:	3808      	subs	r0, #8
 80014f8:	4085      	lsls	r5, r0
 80014fa:	0268      	lsls	r0, r5, #9
 80014fc:	0a40      	lsrs	r0, r0, #9
 80014fe:	e023      	b.n	8001548 <__aeabi_i2f+0x74>
 8001500:	2a99      	cmp	r2, #153	; 0x99
 8001502:	dd0b      	ble.n	800151c <__aeabi_i2f+0x48>
 8001504:	2305      	movs	r3, #5
 8001506:	0029      	movs	r1, r5
 8001508:	1a1b      	subs	r3, r3, r0
 800150a:	40d9      	lsrs	r1, r3
 800150c:	0003      	movs	r3, r0
 800150e:	331b      	adds	r3, #27
 8001510:	409d      	lsls	r5, r3
 8001512:	002b      	movs	r3, r5
 8001514:	1e5d      	subs	r5, r3, #1
 8001516:	41ab      	sbcs	r3, r5
 8001518:	4319      	orrs	r1, r3
 800151a:	000d      	movs	r5, r1
 800151c:	2805      	cmp	r0, #5
 800151e:	dd01      	ble.n	8001524 <__aeabi_i2f+0x50>
 8001520:	1f43      	subs	r3, r0, #5
 8001522:	409d      	lsls	r5, r3
 8001524:	002b      	movs	r3, r5
 8001526:	490f      	ldr	r1, [pc, #60]	; (8001564 <__aeabi_i2f+0x90>)
 8001528:	400b      	ands	r3, r1
 800152a:	076e      	lsls	r6, r5, #29
 800152c:	d009      	beq.n	8001542 <__aeabi_i2f+0x6e>
 800152e:	260f      	movs	r6, #15
 8001530:	4035      	ands	r5, r6
 8001532:	2d04      	cmp	r5, #4
 8001534:	d005      	beq.n	8001542 <__aeabi_i2f+0x6e>
 8001536:	3304      	adds	r3, #4
 8001538:	015d      	lsls	r5, r3, #5
 800153a:	d502      	bpl.n	8001542 <__aeabi_i2f+0x6e>
 800153c:	229f      	movs	r2, #159	; 0x9f
 800153e:	400b      	ands	r3, r1
 8001540:	1a12      	subs	r2, r2, r0
 8001542:	019b      	lsls	r3, r3, #6
 8001544:	0a58      	lsrs	r0, r3, #9
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	0240      	lsls	r0, r0, #9
 800154a:	05d2      	lsls	r2, r2, #23
 800154c:	0a40      	lsrs	r0, r0, #9
 800154e:	07e4      	lsls	r4, r4, #31
 8001550:	4310      	orrs	r0, r2
 8001552:	4320      	orrs	r0, r4
 8001554:	bd70      	pop	{r4, r5, r6, pc}
 8001556:	2400      	movs	r4, #0
 8001558:	2200      	movs	r2, #0
 800155a:	2000      	movs	r0, #0
 800155c:	e7f4      	b.n	8001548 <__aeabi_i2f+0x74>
 800155e:	0268      	lsls	r0, r5, #9
 8001560:	0a40      	lsrs	r0, r0, #9
 8001562:	e7f1      	b.n	8001548 <__aeabi_i2f+0x74>
 8001564:	fbffffff 	.word	0xfbffffff

08001568 <__aeabi_ui2f>:
 8001568:	b570      	push	{r4, r5, r6, lr}
 800156a:	1e04      	subs	r4, r0, #0
 800156c:	d034      	beq.n	80015d8 <__aeabi_ui2f+0x70>
 800156e:	f001 feaf 	bl	80032d0 <__clzsi2>
 8001572:	229e      	movs	r2, #158	; 0x9e
 8001574:	1a12      	subs	r2, r2, r0
 8001576:	2a96      	cmp	r2, #150	; 0x96
 8001578:	dc07      	bgt.n	800158a <__aeabi_ui2f+0x22>
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	2808      	cmp	r0, #8
 800157e:	dd2e      	ble.n	80015de <__aeabi_ui2f+0x76>
 8001580:	3808      	subs	r0, #8
 8001582:	4084      	lsls	r4, r0
 8001584:	0260      	lsls	r0, r4, #9
 8001586:	0a40      	lsrs	r0, r0, #9
 8001588:	e021      	b.n	80015ce <__aeabi_ui2f+0x66>
 800158a:	2a99      	cmp	r2, #153	; 0x99
 800158c:	dd09      	ble.n	80015a2 <__aeabi_ui2f+0x3a>
 800158e:	0003      	movs	r3, r0
 8001590:	0021      	movs	r1, r4
 8001592:	331b      	adds	r3, #27
 8001594:	4099      	lsls	r1, r3
 8001596:	1e4b      	subs	r3, r1, #1
 8001598:	4199      	sbcs	r1, r3
 800159a:	2305      	movs	r3, #5
 800159c:	1a1b      	subs	r3, r3, r0
 800159e:	40dc      	lsrs	r4, r3
 80015a0:	430c      	orrs	r4, r1
 80015a2:	2805      	cmp	r0, #5
 80015a4:	dd01      	ble.n	80015aa <__aeabi_ui2f+0x42>
 80015a6:	1f43      	subs	r3, r0, #5
 80015a8:	409c      	lsls	r4, r3
 80015aa:	0023      	movs	r3, r4
 80015ac:	490d      	ldr	r1, [pc, #52]	; (80015e4 <__aeabi_ui2f+0x7c>)
 80015ae:	400b      	ands	r3, r1
 80015b0:	0765      	lsls	r5, r4, #29
 80015b2:	d009      	beq.n	80015c8 <__aeabi_ui2f+0x60>
 80015b4:	250f      	movs	r5, #15
 80015b6:	402c      	ands	r4, r5
 80015b8:	2c04      	cmp	r4, #4
 80015ba:	d005      	beq.n	80015c8 <__aeabi_ui2f+0x60>
 80015bc:	3304      	adds	r3, #4
 80015be:	015c      	lsls	r4, r3, #5
 80015c0:	d502      	bpl.n	80015c8 <__aeabi_ui2f+0x60>
 80015c2:	229f      	movs	r2, #159	; 0x9f
 80015c4:	400b      	ands	r3, r1
 80015c6:	1a12      	subs	r2, r2, r0
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	0a58      	lsrs	r0, r3, #9
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	0240      	lsls	r0, r0, #9
 80015d0:	05d2      	lsls	r2, r2, #23
 80015d2:	0a40      	lsrs	r0, r0, #9
 80015d4:	4310      	orrs	r0, r2
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
 80015d8:	2200      	movs	r2, #0
 80015da:	2000      	movs	r0, #0
 80015dc:	e7f7      	b.n	80015ce <__aeabi_ui2f+0x66>
 80015de:	0260      	lsls	r0, r4, #9
 80015e0:	0a40      	lsrs	r0, r0, #9
 80015e2:	e7f4      	b.n	80015ce <__aeabi_ui2f+0x66>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	464f      	mov	r7, r9
 80015ec:	4646      	mov	r6, r8
 80015ee:	46d6      	mov	lr, sl
 80015f0:	000c      	movs	r4, r1
 80015f2:	0309      	lsls	r1, r1, #12
 80015f4:	b5c0      	push	{r6, r7, lr}
 80015f6:	0a49      	lsrs	r1, r1, #9
 80015f8:	0f47      	lsrs	r7, r0, #29
 80015fa:	005e      	lsls	r6, r3, #1
 80015fc:	4339      	orrs	r1, r7
 80015fe:	031f      	lsls	r7, r3, #12
 8001600:	0fdb      	lsrs	r3, r3, #31
 8001602:	469c      	mov	ip, r3
 8001604:	0065      	lsls	r5, r4, #1
 8001606:	0a7b      	lsrs	r3, r7, #9
 8001608:	0f57      	lsrs	r7, r2, #29
 800160a:	431f      	orrs	r7, r3
 800160c:	0d6d      	lsrs	r5, r5, #21
 800160e:	0fe4      	lsrs	r4, r4, #31
 8001610:	0d76      	lsrs	r6, r6, #21
 8001612:	46a1      	mov	r9, r4
 8001614:	00c0      	lsls	r0, r0, #3
 8001616:	46b8      	mov	r8, r7
 8001618:	00d2      	lsls	r2, r2, #3
 800161a:	1bab      	subs	r3, r5, r6
 800161c:	4564      	cmp	r4, ip
 800161e:	d07b      	beq.n	8001718 <__aeabi_dadd+0x130>
 8001620:	2b00      	cmp	r3, #0
 8001622:	dd5f      	ble.n	80016e4 <__aeabi_dadd+0xfc>
 8001624:	2e00      	cmp	r6, #0
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x42>
 8001628:	e0a4      	b.n	8001774 <__aeabi_dadd+0x18c>
 800162a:	003e      	movs	r6, r7
 800162c:	4316      	orrs	r6, r2
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0x4a>
 8001630:	e112      	b.n	8001858 <__aeabi_dadd+0x270>
 8001632:	1e5e      	subs	r6, r3, #1
 8001634:	2e00      	cmp	r6, #0
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x52>
 8001638:	e19e      	b.n	8001978 <__aeabi_dadd+0x390>
 800163a:	1a87      	subs	r7, r0, r2
 800163c:	4643      	mov	r3, r8
 800163e:	42b8      	cmp	r0, r7
 8001640:	4180      	sbcs	r0, r0
 8001642:	2501      	movs	r5, #1
 8001644:	1ac9      	subs	r1, r1, r3
 8001646:	4240      	negs	r0, r0
 8001648:	1a09      	subs	r1, r1, r0
 800164a:	020b      	lsls	r3, r1, #8
 800164c:	d400      	bmi.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e131      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001650:	0249      	lsls	r1, r1, #9
 8001652:	0a4e      	lsrs	r6, r1, #9
 8001654:	2e00      	cmp	r6, #0
 8001656:	d100      	bne.n	800165a <__aeabi_dadd+0x72>
 8001658:	e16e      	b.n	8001938 <__aeabi_dadd+0x350>
 800165a:	0030      	movs	r0, r6
 800165c:	f001 fe38 	bl	80032d0 <__clzsi2>
 8001660:	0003      	movs	r3, r0
 8001662:	3b08      	subs	r3, #8
 8001664:	2b1f      	cmp	r3, #31
 8001666:	dd00      	ble.n	800166a <__aeabi_dadd+0x82>
 8001668:	e161      	b.n	800192e <__aeabi_dadd+0x346>
 800166a:	2220      	movs	r2, #32
 800166c:	0039      	movs	r1, r7
 800166e:	1ad2      	subs	r2, r2, r3
 8001670:	409e      	lsls	r6, r3
 8001672:	40d1      	lsrs	r1, r2
 8001674:	409f      	lsls	r7, r3
 8001676:	430e      	orrs	r6, r1
 8001678:	429d      	cmp	r5, r3
 800167a:	dd00      	ble.n	800167e <__aeabi_dadd+0x96>
 800167c:	e151      	b.n	8001922 <__aeabi_dadd+0x33a>
 800167e:	1b5d      	subs	r5, r3, r5
 8001680:	1c6b      	adds	r3, r5, #1
 8001682:	2b1f      	cmp	r3, #31
 8001684:	dd00      	ble.n	8001688 <__aeabi_dadd+0xa0>
 8001686:	e17c      	b.n	8001982 <__aeabi_dadd+0x39a>
 8001688:	2120      	movs	r1, #32
 800168a:	1ac9      	subs	r1, r1, r3
 800168c:	003d      	movs	r5, r7
 800168e:	0030      	movs	r0, r6
 8001690:	408f      	lsls	r7, r1
 8001692:	4088      	lsls	r0, r1
 8001694:	40dd      	lsrs	r5, r3
 8001696:	1e79      	subs	r1, r7, #1
 8001698:	418f      	sbcs	r7, r1
 800169a:	0031      	movs	r1, r6
 800169c:	2207      	movs	r2, #7
 800169e:	4328      	orrs	r0, r5
 80016a0:	40d9      	lsrs	r1, r3
 80016a2:	2500      	movs	r5, #0
 80016a4:	4307      	orrs	r7, r0
 80016a6:	403a      	ands	r2, r7
 80016a8:	2a00      	cmp	r2, #0
 80016aa:	d009      	beq.n	80016c0 <__aeabi_dadd+0xd8>
 80016ac:	230f      	movs	r3, #15
 80016ae:	403b      	ands	r3, r7
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_dadd+0xd8>
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	42bb      	cmp	r3, r7
 80016b8:	41bf      	sbcs	r7, r7
 80016ba:	427f      	negs	r7, r7
 80016bc:	19c9      	adds	r1, r1, r7
 80016be:	001f      	movs	r7, r3
 80016c0:	020b      	lsls	r3, r1, #8
 80016c2:	d400      	bmi.n	80016c6 <__aeabi_dadd+0xde>
 80016c4:	e226      	b.n	8001b14 <__aeabi_dadd+0x52c>
 80016c6:	1c6a      	adds	r2, r5, #1
 80016c8:	4bc6      	ldr	r3, [pc, #792]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80016ca:	0555      	lsls	r5, r2, #21
 80016cc:	0d6d      	lsrs	r5, r5, #21
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0xec>
 80016d2:	e106      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 80016d4:	4ac4      	ldr	r2, [pc, #784]	; (80019e8 <__aeabi_dadd+0x400>)
 80016d6:	08ff      	lsrs	r7, r7, #3
 80016d8:	400a      	ands	r2, r1
 80016da:	0753      	lsls	r3, r2, #29
 80016dc:	0252      	lsls	r2, r2, #9
 80016de:	433b      	orrs	r3, r7
 80016e0:	0b12      	lsrs	r2, r2, #12
 80016e2:	e08e      	b.n	8001802 <__aeabi_dadd+0x21a>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d000      	beq.n	80016ea <__aeabi_dadd+0x102>
 80016e8:	e0b8      	b.n	800185c <__aeabi_dadd+0x274>
 80016ea:	1c6b      	adds	r3, r5, #1
 80016ec:	055b      	lsls	r3, r3, #21
 80016ee:	0d5b      	lsrs	r3, r3, #21
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	dc00      	bgt.n	80016f6 <__aeabi_dadd+0x10e>
 80016f4:	e130      	b.n	8001958 <__aeabi_dadd+0x370>
 80016f6:	1a87      	subs	r7, r0, r2
 80016f8:	4643      	mov	r3, r8
 80016fa:	42b8      	cmp	r0, r7
 80016fc:	41b6      	sbcs	r6, r6
 80016fe:	1acb      	subs	r3, r1, r3
 8001700:	4276      	negs	r6, r6
 8001702:	1b9e      	subs	r6, r3, r6
 8001704:	0233      	lsls	r3, r6, #8
 8001706:	d500      	bpl.n	800170a <__aeabi_dadd+0x122>
 8001708:	e14c      	b.n	80019a4 <__aeabi_dadd+0x3bc>
 800170a:	003b      	movs	r3, r7
 800170c:	4333      	orrs	r3, r6
 800170e:	d1a1      	bne.n	8001654 <__aeabi_dadd+0x6c>
 8001710:	2200      	movs	r2, #0
 8001712:	2400      	movs	r4, #0
 8001714:	2500      	movs	r5, #0
 8001716:	e070      	b.n	80017fa <__aeabi_dadd+0x212>
 8001718:	2b00      	cmp	r3, #0
 800171a:	dc00      	bgt.n	800171e <__aeabi_dadd+0x136>
 800171c:	e0e5      	b.n	80018ea <__aeabi_dadd+0x302>
 800171e:	2e00      	cmp	r6, #0
 8001720:	d100      	bne.n	8001724 <__aeabi_dadd+0x13c>
 8001722:	e083      	b.n	800182c <__aeabi_dadd+0x244>
 8001724:	4eaf      	ldr	r6, [pc, #700]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001726:	42b5      	cmp	r5, r6
 8001728:	d060      	beq.n	80017ec <__aeabi_dadd+0x204>
 800172a:	2680      	movs	r6, #128	; 0x80
 800172c:	0436      	lsls	r6, r6, #16
 800172e:	4337      	orrs	r7, r6
 8001730:	46b8      	mov	r8, r7
 8001732:	2b38      	cmp	r3, #56	; 0x38
 8001734:	dc00      	bgt.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e13e      	b.n	80019b6 <__aeabi_dadd+0x3ce>
 8001738:	4643      	mov	r3, r8
 800173a:	4313      	orrs	r3, r2
 800173c:	001f      	movs	r7, r3
 800173e:	1e7a      	subs	r2, r7, #1
 8001740:	4197      	sbcs	r7, r2
 8001742:	183f      	adds	r7, r7, r0
 8001744:	4287      	cmp	r7, r0
 8001746:	4180      	sbcs	r0, r0
 8001748:	4240      	negs	r0, r0
 800174a:	1809      	adds	r1, r1, r0
 800174c:	020b      	lsls	r3, r1, #8
 800174e:	d400      	bmi.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e0b0      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001752:	4ba4      	ldr	r3, [pc, #656]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001754:	3501      	adds	r5, #1
 8001756:	429d      	cmp	r5, r3
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x174>
 800175a:	e0c3      	b.n	80018e4 <__aeabi_dadd+0x2fc>
 800175c:	4aa2      	ldr	r2, [pc, #648]	; (80019e8 <__aeabi_dadd+0x400>)
 800175e:	087b      	lsrs	r3, r7, #1
 8001760:	400a      	ands	r2, r1
 8001762:	2101      	movs	r1, #1
 8001764:	400f      	ands	r7, r1
 8001766:	431f      	orrs	r7, r3
 8001768:	0851      	lsrs	r1, r2, #1
 800176a:	07d3      	lsls	r3, r2, #31
 800176c:	2207      	movs	r2, #7
 800176e:	431f      	orrs	r7, r3
 8001770:	403a      	ands	r2, r7
 8001772:	e799      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001774:	4e9b      	ldr	r6, [pc, #620]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001776:	42b5      	cmp	r5, r6
 8001778:	d038      	beq.n	80017ec <__aeabi_dadd+0x204>
 800177a:	2680      	movs	r6, #128	; 0x80
 800177c:	0436      	lsls	r6, r6, #16
 800177e:	4337      	orrs	r7, r6
 8001780:	46b8      	mov	r8, r7
 8001782:	2b38      	cmp	r3, #56	; 0x38
 8001784:	dd00      	ble.n	8001788 <__aeabi_dadd+0x1a0>
 8001786:	e0dc      	b.n	8001942 <__aeabi_dadd+0x35a>
 8001788:	2b1f      	cmp	r3, #31
 800178a:	dc00      	bgt.n	800178e <__aeabi_dadd+0x1a6>
 800178c:	e130      	b.n	80019f0 <__aeabi_dadd+0x408>
 800178e:	001e      	movs	r6, r3
 8001790:	4647      	mov	r7, r8
 8001792:	3e20      	subs	r6, #32
 8001794:	40f7      	lsrs	r7, r6
 8001796:	46bc      	mov	ip, r7
 8001798:	2b20      	cmp	r3, #32
 800179a:	d004      	beq.n	80017a6 <__aeabi_dadd+0x1be>
 800179c:	2640      	movs	r6, #64	; 0x40
 800179e:	1af3      	subs	r3, r6, r3
 80017a0:	4646      	mov	r6, r8
 80017a2:	409e      	lsls	r6, r3
 80017a4:	4332      	orrs	r2, r6
 80017a6:	0017      	movs	r7, r2
 80017a8:	4663      	mov	r3, ip
 80017aa:	1e7a      	subs	r2, r7, #1
 80017ac:	4197      	sbcs	r7, r2
 80017ae:	431f      	orrs	r7, r3
 80017b0:	e0cc      	b.n	800194c <__aeabi_dadd+0x364>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x1d0>
 80017b6:	e204      	b.n	8001bc2 <__aeabi_dadd+0x5da>
 80017b8:	4643      	mov	r3, r8
 80017ba:	4313      	orrs	r3, r2
 80017bc:	d100      	bne.n	80017c0 <__aeabi_dadd+0x1d8>
 80017be:	e159      	b.n	8001a74 <__aeabi_dadd+0x48c>
 80017c0:	074b      	lsls	r3, r1, #29
 80017c2:	08c0      	lsrs	r0, r0, #3
 80017c4:	4318      	orrs	r0, r3
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	08c9      	lsrs	r1, r1, #3
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	4219      	tst	r1, r3
 80017ce:	d008      	beq.n	80017e2 <__aeabi_dadd+0x1fa>
 80017d0:	4645      	mov	r5, r8
 80017d2:	08ed      	lsrs	r5, r5, #3
 80017d4:	421d      	tst	r5, r3
 80017d6:	d104      	bne.n	80017e2 <__aeabi_dadd+0x1fa>
 80017d8:	4643      	mov	r3, r8
 80017da:	08d0      	lsrs	r0, r2, #3
 80017dc:	0759      	lsls	r1, r3, #29
 80017de:	4308      	orrs	r0, r1
 80017e0:	0029      	movs	r1, r5
 80017e2:	0f42      	lsrs	r2, r0, #29
 80017e4:	00c9      	lsls	r1, r1, #3
 80017e6:	4d7f      	ldr	r5, [pc, #508]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80017e8:	4311      	orrs	r1, r2
 80017ea:	00c0      	lsls	r0, r0, #3
 80017ec:	074b      	lsls	r3, r1, #29
 80017ee:	08ca      	lsrs	r2, r1, #3
 80017f0:	497c      	ldr	r1, [pc, #496]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80017f2:	08c0      	lsrs	r0, r0, #3
 80017f4:	4303      	orrs	r3, r0
 80017f6:	428d      	cmp	r5, r1
 80017f8:	d068      	beq.n	80018cc <__aeabi_dadd+0x2e4>
 80017fa:	0312      	lsls	r2, r2, #12
 80017fc:	056d      	lsls	r5, r5, #21
 80017fe:	0b12      	lsrs	r2, r2, #12
 8001800:	0d6d      	lsrs	r5, r5, #21
 8001802:	2100      	movs	r1, #0
 8001804:	0312      	lsls	r2, r2, #12
 8001806:	0018      	movs	r0, r3
 8001808:	0b13      	lsrs	r3, r2, #12
 800180a:	0d0a      	lsrs	r2, r1, #20
 800180c:	0512      	lsls	r2, r2, #20
 800180e:	431a      	orrs	r2, r3
 8001810:	4b76      	ldr	r3, [pc, #472]	; (80019ec <__aeabi_dadd+0x404>)
 8001812:	052d      	lsls	r5, r5, #20
 8001814:	4013      	ands	r3, r2
 8001816:	432b      	orrs	r3, r5
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	07e4      	lsls	r4, r4, #31
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	4323      	orrs	r3, r4
 8001820:	0019      	movs	r1, r3
 8001822:	bc1c      	pop	{r2, r3, r4}
 8001824:	4690      	mov	r8, r2
 8001826:	4699      	mov	r9, r3
 8001828:	46a2      	mov	sl, r4
 800182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182c:	003e      	movs	r6, r7
 800182e:	4316      	orrs	r6, r2
 8001830:	d012      	beq.n	8001858 <__aeabi_dadd+0x270>
 8001832:	1e5e      	subs	r6, r3, #1
 8001834:	2e00      	cmp	r6, #0
 8001836:	d000      	beq.n	800183a <__aeabi_dadd+0x252>
 8001838:	e100      	b.n	8001a3c <__aeabi_dadd+0x454>
 800183a:	1887      	adds	r7, r0, r2
 800183c:	4287      	cmp	r7, r0
 800183e:	4180      	sbcs	r0, r0
 8001840:	4441      	add	r1, r8
 8001842:	4240      	negs	r0, r0
 8001844:	1809      	adds	r1, r1, r0
 8001846:	2501      	movs	r5, #1
 8001848:	020b      	lsls	r3, r1, #8
 800184a:	d533      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 800184c:	2502      	movs	r5, #2
 800184e:	e785      	b.n	800175c <__aeabi_dadd+0x174>
 8001850:	4664      	mov	r4, ip
 8001852:	0033      	movs	r3, r6
 8001854:	4641      	mov	r1, r8
 8001856:	0010      	movs	r0, r2
 8001858:	001d      	movs	r5, r3
 800185a:	e7c7      	b.n	80017ec <__aeabi_dadd+0x204>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d000      	beq.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e0da      	b.n	8001a18 <__aeabi_dadd+0x430>
 8001862:	000c      	movs	r4, r1
 8001864:	4304      	orrs	r4, r0
 8001866:	d0f3      	beq.n	8001850 <__aeabi_dadd+0x268>
 8001868:	1c5c      	adds	r4, r3, #1
 800186a:	d100      	bne.n	800186e <__aeabi_dadd+0x286>
 800186c:	e19f      	b.n	8001bae <__aeabi_dadd+0x5c6>
 800186e:	4c5d      	ldr	r4, [pc, #372]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001870:	42a6      	cmp	r6, r4
 8001872:	d100      	bne.n	8001876 <__aeabi_dadd+0x28e>
 8001874:	e12f      	b.n	8001ad6 <__aeabi_dadd+0x4ee>
 8001876:	43db      	mvns	r3, r3
 8001878:	2b38      	cmp	r3, #56	; 0x38
 800187a:	dd00      	ble.n	800187e <__aeabi_dadd+0x296>
 800187c:	e166      	b.n	8001b4c <__aeabi_dadd+0x564>
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dadd+0x29c>
 8001882:	e183      	b.n	8001b8c <__aeabi_dadd+0x5a4>
 8001884:	2420      	movs	r4, #32
 8001886:	0005      	movs	r5, r0
 8001888:	1ae4      	subs	r4, r4, r3
 800188a:	000f      	movs	r7, r1
 800188c:	40dd      	lsrs	r5, r3
 800188e:	40d9      	lsrs	r1, r3
 8001890:	40a0      	lsls	r0, r4
 8001892:	4643      	mov	r3, r8
 8001894:	40a7      	lsls	r7, r4
 8001896:	1a5b      	subs	r3, r3, r1
 8001898:	1e44      	subs	r4, r0, #1
 800189a:	41a0      	sbcs	r0, r4
 800189c:	4698      	mov	r8, r3
 800189e:	432f      	orrs	r7, r5
 80018a0:	4338      	orrs	r0, r7
 80018a2:	1a17      	subs	r7, r2, r0
 80018a4:	42ba      	cmp	r2, r7
 80018a6:	4192      	sbcs	r2, r2
 80018a8:	4643      	mov	r3, r8
 80018aa:	4252      	negs	r2, r2
 80018ac:	1a99      	subs	r1, r3, r2
 80018ae:	4664      	mov	r4, ip
 80018b0:	0035      	movs	r5, r6
 80018b2:	e6ca      	b.n	800164a <__aeabi_dadd+0x62>
 80018b4:	2207      	movs	r2, #7
 80018b6:	403a      	ands	r2, r7
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e6f6      	b.n	80016ac <__aeabi_dadd+0xc4>
 80018be:	074b      	lsls	r3, r1, #29
 80018c0:	08ca      	lsrs	r2, r1, #3
 80018c2:	4948      	ldr	r1, [pc, #288]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018c4:	08ff      	lsrs	r7, r7, #3
 80018c6:	433b      	orrs	r3, r7
 80018c8:	428d      	cmp	r5, r1
 80018ca:	d196      	bne.n	80017fa <__aeabi_dadd+0x212>
 80018cc:	0019      	movs	r1, r3
 80018ce:	4311      	orrs	r1, r2
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x2ec>
 80018d2:	e19e      	b.n	8001c12 <__aeabi_dadd+0x62a>
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0309      	lsls	r1, r1, #12
 80018d8:	430a      	orrs	r2, r1
 80018da:	0312      	lsls	r2, r2, #12
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	4d41      	ldr	r5, [pc, #260]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018e0:	e78f      	b.n	8001802 <__aeabi_dadd+0x21a>
 80018e2:	0015      	movs	r5, r2
 80018e4:	2200      	movs	r2, #0
 80018e6:	2300      	movs	r3, #0
 80018e8:	e78b      	b.n	8001802 <__aeabi_dadd+0x21a>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d000      	beq.n	80018f0 <__aeabi_dadd+0x308>
 80018ee:	e0c7      	b.n	8001a80 <__aeabi_dadd+0x498>
 80018f0:	1c6b      	adds	r3, r5, #1
 80018f2:	055f      	lsls	r7, r3, #21
 80018f4:	0d7f      	lsrs	r7, r7, #21
 80018f6:	2f01      	cmp	r7, #1
 80018f8:	dc00      	bgt.n	80018fc <__aeabi_dadd+0x314>
 80018fa:	e0f1      	b.n	8001ae0 <__aeabi_dadd+0x4f8>
 80018fc:	4d39      	ldr	r5, [pc, #228]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018fe:	42ab      	cmp	r3, r5
 8001900:	d100      	bne.n	8001904 <__aeabi_dadd+0x31c>
 8001902:	e0b9      	b.n	8001a78 <__aeabi_dadd+0x490>
 8001904:	1885      	adds	r5, r0, r2
 8001906:	000a      	movs	r2, r1
 8001908:	4285      	cmp	r5, r0
 800190a:	4189      	sbcs	r1, r1
 800190c:	4442      	add	r2, r8
 800190e:	4249      	negs	r1, r1
 8001910:	1851      	adds	r1, r2, r1
 8001912:	2207      	movs	r2, #7
 8001914:	07cf      	lsls	r7, r1, #31
 8001916:	086d      	lsrs	r5, r5, #1
 8001918:	432f      	orrs	r7, r5
 800191a:	0849      	lsrs	r1, r1, #1
 800191c:	403a      	ands	r2, r7
 800191e:	001d      	movs	r5, r3
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	2207      	movs	r2, #7
 8001924:	4930      	ldr	r1, [pc, #192]	; (80019e8 <__aeabi_dadd+0x400>)
 8001926:	1aed      	subs	r5, r5, r3
 8001928:	4031      	ands	r1, r6
 800192a:	403a      	ands	r2, r7
 800192c:	e6bc      	b.n	80016a8 <__aeabi_dadd+0xc0>
 800192e:	003e      	movs	r6, r7
 8001930:	3828      	subs	r0, #40	; 0x28
 8001932:	4086      	lsls	r6, r0
 8001934:	2700      	movs	r7, #0
 8001936:	e69f      	b.n	8001678 <__aeabi_dadd+0x90>
 8001938:	0038      	movs	r0, r7
 800193a:	f001 fcc9 	bl	80032d0 <__clzsi2>
 800193e:	3020      	adds	r0, #32
 8001940:	e68e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001942:	4643      	mov	r3, r8
 8001944:	4313      	orrs	r3, r2
 8001946:	001f      	movs	r7, r3
 8001948:	1e7a      	subs	r2, r7, #1
 800194a:	4197      	sbcs	r7, r2
 800194c:	1bc7      	subs	r7, r0, r7
 800194e:	42b8      	cmp	r0, r7
 8001950:	4180      	sbcs	r0, r0
 8001952:	4240      	negs	r0, r0
 8001954:	1a09      	subs	r1, r1, r0
 8001956:	e678      	b.n	800164a <__aeabi_dadd+0x62>
 8001958:	000e      	movs	r6, r1
 800195a:	003b      	movs	r3, r7
 800195c:	4306      	orrs	r6, r0
 800195e:	4313      	orrs	r3, r2
 8001960:	2d00      	cmp	r5, #0
 8001962:	d161      	bne.n	8001a28 <__aeabi_dadd+0x440>
 8001964:	2e00      	cmp	r6, #0
 8001966:	d000      	beq.n	800196a <__aeabi_dadd+0x382>
 8001968:	e0f4      	b.n	8001b54 <__aeabi_dadd+0x56c>
 800196a:	2b00      	cmp	r3, #0
 800196c:	d100      	bne.n	8001970 <__aeabi_dadd+0x388>
 800196e:	e11b      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001970:	4664      	mov	r4, ip
 8001972:	0039      	movs	r1, r7
 8001974:	0010      	movs	r0, r2
 8001976:	e739      	b.n	80017ec <__aeabi_dadd+0x204>
 8001978:	4f1a      	ldr	r7, [pc, #104]	; (80019e4 <__aeabi_dadd+0x3fc>)
 800197a:	42bb      	cmp	r3, r7
 800197c:	d07a      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 800197e:	0033      	movs	r3, r6
 8001980:	e6ff      	b.n	8001782 <__aeabi_dadd+0x19a>
 8001982:	0030      	movs	r0, r6
 8001984:	3d1f      	subs	r5, #31
 8001986:	40e8      	lsrs	r0, r5
 8001988:	2b20      	cmp	r3, #32
 800198a:	d003      	beq.n	8001994 <__aeabi_dadd+0x3ac>
 800198c:	2140      	movs	r1, #64	; 0x40
 800198e:	1acb      	subs	r3, r1, r3
 8001990:	409e      	lsls	r6, r3
 8001992:	4337      	orrs	r7, r6
 8001994:	1e7b      	subs	r3, r7, #1
 8001996:	419f      	sbcs	r7, r3
 8001998:	2207      	movs	r2, #7
 800199a:	4307      	orrs	r7, r0
 800199c:	403a      	ands	r2, r7
 800199e:	2100      	movs	r1, #0
 80019a0:	2500      	movs	r5, #0
 80019a2:	e789      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 80019a4:	1a17      	subs	r7, r2, r0
 80019a6:	4643      	mov	r3, r8
 80019a8:	42ba      	cmp	r2, r7
 80019aa:	41b6      	sbcs	r6, r6
 80019ac:	1a59      	subs	r1, r3, r1
 80019ae:	4276      	negs	r6, r6
 80019b0:	1b8e      	subs	r6, r1, r6
 80019b2:	4664      	mov	r4, ip
 80019b4:	e64e      	b.n	8001654 <__aeabi_dadd+0x6c>
 80019b6:	2b1f      	cmp	r3, #31
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dadd+0x3d4>
 80019ba:	e0ad      	b.n	8001b18 <__aeabi_dadd+0x530>
 80019bc:	2620      	movs	r6, #32
 80019be:	4647      	mov	r7, r8
 80019c0:	1af6      	subs	r6, r6, r3
 80019c2:	40b7      	lsls	r7, r6
 80019c4:	46b9      	mov	r9, r7
 80019c6:	0017      	movs	r7, r2
 80019c8:	46b2      	mov	sl, r6
 80019ca:	40df      	lsrs	r7, r3
 80019cc:	464e      	mov	r6, r9
 80019ce:	433e      	orrs	r6, r7
 80019d0:	0037      	movs	r7, r6
 80019d2:	4656      	mov	r6, sl
 80019d4:	40b2      	lsls	r2, r6
 80019d6:	1e56      	subs	r6, r2, #1
 80019d8:	41b2      	sbcs	r2, r6
 80019da:	4317      	orrs	r7, r2
 80019dc:	4642      	mov	r2, r8
 80019de:	40da      	lsrs	r2, r3
 80019e0:	1889      	adds	r1, r1, r2
 80019e2:	e6ae      	b.n	8001742 <__aeabi_dadd+0x15a>
 80019e4:	000007ff 	.word	0x000007ff
 80019e8:	ff7fffff 	.word	0xff7fffff
 80019ec:	800fffff 	.word	0x800fffff
 80019f0:	2620      	movs	r6, #32
 80019f2:	4647      	mov	r7, r8
 80019f4:	1af6      	subs	r6, r6, r3
 80019f6:	40b7      	lsls	r7, r6
 80019f8:	46b9      	mov	r9, r7
 80019fa:	0017      	movs	r7, r2
 80019fc:	46b2      	mov	sl, r6
 80019fe:	40df      	lsrs	r7, r3
 8001a00:	464e      	mov	r6, r9
 8001a02:	433e      	orrs	r6, r7
 8001a04:	0037      	movs	r7, r6
 8001a06:	4656      	mov	r6, sl
 8001a08:	40b2      	lsls	r2, r6
 8001a0a:	1e56      	subs	r6, r2, #1
 8001a0c:	41b2      	sbcs	r2, r6
 8001a0e:	4317      	orrs	r7, r2
 8001a10:	4642      	mov	r2, r8
 8001a12:	40da      	lsrs	r2, r3
 8001a14:	1a89      	subs	r1, r1, r2
 8001a16:	e799      	b.n	800194c <__aeabi_dadd+0x364>
 8001a18:	4c7f      	ldr	r4, [pc, #508]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a1a:	42a6      	cmp	r6, r4
 8001a1c:	d05b      	beq.n	8001ad6 <__aeabi_dadd+0x4ee>
 8001a1e:	2480      	movs	r4, #128	; 0x80
 8001a20:	0424      	lsls	r4, r4, #16
 8001a22:	425b      	negs	r3, r3
 8001a24:	4321      	orrs	r1, r4
 8001a26:	e727      	b.n	8001878 <__aeabi_dadd+0x290>
 8001a28:	2e00      	cmp	r6, #0
 8001a2a:	d10c      	bne.n	8001a46 <__aeabi_dadd+0x45e>
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_dadd+0x44a>
 8001a30:	e0cb      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001a32:	4664      	mov	r4, ip
 8001a34:	0039      	movs	r1, r7
 8001a36:	0010      	movs	r0, r2
 8001a38:	4d77      	ldr	r5, [pc, #476]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a3a:	e6d7      	b.n	80017ec <__aeabi_dadd+0x204>
 8001a3c:	4f76      	ldr	r7, [pc, #472]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a3e:	42bb      	cmp	r3, r7
 8001a40:	d018      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 8001a42:	0033      	movs	r3, r6
 8001a44:	e675      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d014      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 8001a4a:	074b      	lsls	r3, r1, #29
 8001a4c:	08c0      	lsrs	r0, r0, #3
 8001a4e:	4318      	orrs	r0, r3
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	08c9      	lsrs	r1, r1, #3
 8001a54:	031b      	lsls	r3, r3, #12
 8001a56:	4219      	tst	r1, r3
 8001a58:	d007      	beq.n	8001a6a <__aeabi_dadd+0x482>
 8001a5a:	08fc      	lsrs	r4, r7, #3
 8001a5c:	421c      	tst	r4, r3
 8001a5e:	d104      	bne.n	8001a6a <__aeabi_dadd+0x482>
 8001a60:	0779      	lsls	r1, r7, #29
 8001a62:	08d0      	lsrs	r0, r2, #3
 8001a64:	4308      	orrs	r0, r1
 8001a66:	46e1      	mov	r9, ip
 8001a68:	0021      	movs	r1, r4
 8001a6a:	464c      	mov	r4, r9
 8001a6c:	0f42      	lsrs	r2, r0, #29
 8001a6e:	00c9      	lsls	r1, r1, #3
 8001a70:	4311      	orrs	r1, r2
 8001a72:	00c0      	lsls	r0, r0, #3
 8001a74:	4d68      	ldr	r5, [pc, #416]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a76:	e6b9      	b.n	80017ec <__aeabi_dadd+0x204>
 8001a78:	001d      	movs	r5, r3
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e6c0      	b.n	8001802 <__aeabi_dadd+0x21a>
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	d15b      	bne.n	8001b3c <__aeabi_dadd+0x554>
 8001a84:	000d      	movs	r5, r1
 8001a86:	4305      	orrs	r5, r0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dadd+0x4a4>
 8001a8a:	e6e2      	b.n	8001852 <__aeabi_dadd+0x26a>
 8001a8c:	1c5d      	adds	r5, r3, #1
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x4aa>
 8001a90:	e0b0      	b.n	8001bf4 <__aeabi_dadd+0x60c>
 8001a92:	4d61      	ldr	r5, [pc, #388]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a94:	42ae      	cmp	r6, r5
 8001a96:	d01f      	beq.n	8001ad8 <__aeabi_dadd+0x4f0>
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	2b38      	cmp	r3, #56	; 0x38
 8001a9c:	dc71      	bgt.n	8001b82 <__aeabi_dadd+0x59a>
 8001a9e:	2b1f      	cmp	r3, #31
 8001aa0:	dd00      	ble.n	8001aa4 <__aeabi_dadd+0x4bc>
 8001aa2:	e096      	b.n	8001bd2 <__aeabi_dadd+0x5ea>
 8001aa4:	2520      	movs	r5, #32
 8001aa6:	000f      	movs	r7, r1
 8001aa8:	1aed      	subs	r5, r5, r3
 8001aaa:	40af      	lsls	r7, r5
 8001aac:	46b9      	mov	r9, r7
 8001aae:	0007      	movs	r7, r0
 8001ab0:	46aa      	mov	sl, r5
 8001ab2:	40df      	lsrs	r7, r3
 8001ab4:	464d      	mov	r5, r9
 8001ab6:	433d      	orrs	r5, r7
 8001ab8:	002f      	movs	r7, r5
 8001aba:	4655      	mov	r5, sl
 8001abc:	40a8      	lsls	r0, r5
 8001abe:	40d9      	lsrs	r1, r3
 8001ac0:	1e45      	subs	r5, r0, #1
 8001ac2:	41a8      	sbcs	r0, r5
 8001ac4:	4488      	add	r8, r1
 8001ac6:	4307      	orrs	r7, r0
 8001ac8:	18bf      	adds	r7, r7, r2
 8001aca:	4297      	cmp	r7, r2
 8001acc:	4192      	sbcs	r2, r2
 8001ace:	4251      	negs	r1, r2
 8001ad0:	4441      	add	r1, r8
 8001ad2:	0035      	movs	r5, r6
 8001ad4:	e63a      	b.n	800174c <__aeabi_dadd+0x164>
 8001ad6:	4664      	mov	r4, ip
 8001ad8:	0035      	movs	r5, r6
 8001ada:	4641      	mov	r1, r8
 8001adc:	0010      	movs	r0, r2
 8001ade:	e685      	b.n	80017ec <__aeabi_dadd+0x204>
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	4303      	orrs	r3, r0
 8001ae4:	2d00      	cmp	r5, #0
 8001ae6:	d000      	beq.n	8001aea <__aeabi_dadd+0x502>
 8001ae8:	e663      	b.n	80017b2 <__aeabi_dadd+0x1ca>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f5      	beq.n	8001ada <__aeabi_dadd+0x4f2>
 8001aee:	4643      	mov	r3, r8
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dadd+0x50e>
 8001af4:	e67a      	b.n	80017ec <__aeabi_dadd+0x204>
 8001af6:	1887      	adds	r7, r0, r2
 8001af8:	4287      	cmp	r7, r0
 8001afa:	4180      	sbcs	r0, r0
 8001afc:	2207      	movs	r2, #7
 8001afe:	4441      	add	r1, r8
 8001b00:	4240      	negs	r0, r0
 8001b02:	1809      	adds	r1, r1, r0
 8001b04:	403a      	ands	r2, r7
 8001b06:	020b      	lsls	r3, r1, #8
 8001b08:	d400      	bmi.n	8001b0c <__aeabi_dadd+0x524>
 8001b0a:	e6d5      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <__aeabi_dadd+0x634>)
 8001b0e:	3501      	adds	r5, #1
 8001b10:	4019      	ands	r1, r3
 8001b12:	e5c9      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001b14:	0038      	movs	r0, r7
 8001b16:	e669      	b.n	80017ec <__aeabi_dadd+0x204>
 8001b18:	001e      	movs	r6, r3
 8001b1a:	4647      	mov	r7, r8
 8001b1c:	3e20      	subs	r6, #32
 8001b1e:	40f7      	lsrs	r7, r6
 8001b20:	46bc      	mov	ip, r7
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d004      	beq.n	8001b30 <__aeabi_dadd+0x548>
 8001b26:	2640      	movs	r6, #64	; 0x40
 8001b28:	1af3      	subs	r3, r6, r3
 8001b2a:	4646      	mov	r6, r8
 8001b2c:	409e      	lsls	r6, r3
 8001b2e:	4332      	orrs	r2, r6
 8001b30:	0017      	movs	r7, r2
 8001b32:	4663      	mov	r3, ip
 8001b34:	1e7a      	subs	r2, r7, #1
 8001b36:	4197      	sbcs	r7, r2
 8001b38:	431f      	orrs	r7, r3
 8001b3a:	e602      	b.n	8001742 <__aeabi_dadd+0x15a>
 8001b3c:	4d36      	ldr	r5, [pc, #216]	; (8001c18 <__aeabi_dadd+0x630>)
 8001b3e:	42ae      	cmp	r6, r5
 8001b40:	d0ca      	beq.n	8001ad8 <__aeabi_dadd+0x4f0>
 8001b42:	2580      	movs	r5, #128	; 0x80
 8001b44:	042d      	lsls	r5, r5, #16
 8001b46:	425b      	negs	r3, r3
 8001b48:	4329      	orrs	r1, r5
 8001b4a:	e7a6      	b.n	8001a9a <__aeabi_dadd+0x4b2>
 8001b4c:	4308      	orrs	r0, r1
 8001b4e:	1e41      	subs	r1, r0, #1
 8001b50:	4188      	sbcs	r0, r1
 8001b52:	e6a6      	b.n	80018a2 <__aeabi_dadd+0x2ba>
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dadd+0x572>
 8001b58:	e648      	b.n	80017ec <__aeabi_dadd+0x204>
 8001b5a:	1a87      	subs	r7, r0, r2
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	42b8      	cmp	r0, r7
 8001b60:	41b6      	sbcs	r6, r6
 8001b62:	1acb      	subs	r3, r1, r3
 8001b64:	4276      	negs	r6, r6
 8001b66:	1b9e      	subs	r6, r3, r6
 8001b68:	0233      	lsls	r3, r6, #8
 8001b6a:	d54b      	bpl.n	8001c04 <__aeabi_dadd+0x61c>
 8001b6c:	1a17      	subs	r7, r2, r0
 8001b6e:	4643      	mov	r3, r8
 8001b70:	42ba      	cmp	r2, r7
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	1a59      	subs	r1, r3, r1
 8001b76:	4252      	negs	r2, r2
 8001b78:	1a89      	subs	r1, r1, r2
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	4664      	mov	r4, ip
 8001b7e:	403a      	ands	r2, r7
 8001b80:	e592      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001b82:	4301      	orrs	r1, r0
 8001b84:	000f      	movs	r7, r1
 8001b86:	1e79      	subs	r1, r7, #1
 8001b88:	418f      	sbcs	r7, r1
 8001b8a:	e79d      	b.n	8001ac8 <__aeabi_dadd+0x4e0>
 8001b8c:	001c      	movs	r4, r3
 8001b8e:	000f      	movs	r7, r1
 8001b90:	3c20      	subs	r4, #32
 8001b92:	40e7      	lsrs	r7, r4
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d003      	beq.n	8001ba0 <__aeabi_dadd+0x5b8>
 8001b98:	2440      	movs	r4, #64	; 0x40
 8001b9a:	1ae3      	subs	r3, r4, r3
 8001b9c:	4099      	lsls	r1, r3
 8001b9e:	4308      	orrs	r0, r1
 8001ba0:	1e41      	subs	r1, r0, #1
 8001ba2:	4188      	sbcs	r0, r1
 8001ba4:	4338      	orrs	r0, r7
 8001ba6:	e67c      	b.n	80018a2 <__aeabi_dadd+0x2ba>
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2400      	movs	r4, #0
 8001bac:	e625      	b.n	80017fa <__aeabi_dadd+0x212>
 8001bae:	1a17      	subs	r7, r2, r0
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	42ba      	cmp	r2, r7
 8001bb4:	4192      	sbcs	r2, r2
 8001bb6:	1a59      	subs	r1, r3, r1
 8001bb8:	4252      	negs	r2, r2
 8001bba:	1a89      	subs	r1, r1, r2
 8001bbc:	4664      	mov	r4, ip
 8001bbe:	0035      	movs	r5, r6
 8001bc0:	e543      	b.n	800164a <__aeabi_dadd+0x62>
 8001bc2:	4641      	mov	r1, r8
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	4d14      	ldr	r5, [pc, #80]	; (8001c18 <__aeabi_dadd+0x630>)
 8001bc8:	e610      	b.n	80017ec <__aeabi_dadd+0x204>
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	2400      	movs	r4, #0
 8001bce:	0312      	lsls	r2, r2, #12
 8001bd0:	e680      	b.n	80018d4 <__aeabi_dadd+0x2ec>
 8001bd2:	001d      	movs	r5, r3
 8001bd4:	000f      	movs	r7, r1
 8001bd6:	3d20      	subs	r5, #32
 8001bd8:	40ef      	lsrs	r7, r5
 8001bda:	46bc      	mov	ip, r7
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d003      	beq.n	8001be8 <__aeabi_dadd+0x600>
 8001be0:	2540      	movs	r5, #64	; 0x40
 8001be2:	1aeb      	subs	r3, r5, r3
 8001be4:	4099      	lsls	r1, r3
 8001be6:	4308      	orrs	r0, r1
 8001be8:	0007      	movs	r7, r0
 8001bea:	4663      	mov	r3, ip
 8001bec:	1e78      	subs	r0, r7, #1
 8001bee:	4187      	sbcs	r7, r0
 8001bf0:	431f      	orrs	r7, r3
 8001bf2:	e769      	b.n	8001ac8 <__aeabi_dadd+0x4e0>
 8001bf4:	1887      	adds	r7, r0, r2
 8001bf6:	4297      	cmp	r7, r2
 8001bf8:	419b      	sbcs	r3, r3
 8001bfa:	4441      	add	r1, r8
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	18c9      	adds	r1, r1, r3
 8001c00:	0035      	movs	r5, r6
 8001c02:	e5a3      	b.n	800174c <__aeabi_dadd+0x164>
 8001c04:	003b      	movs	r3, r7
 8001c06:	4333      	orrs	r3, r6
 8001c08:	d0ce      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	0031      	movs	r1, r6
 8001c0e:	403a      	ands	r2, r7
 8001c10:	e652      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001c12:	2300      	movs	r3, #0
 8001c14:	001a      	movs	r2, r3
 8001c16:	e5f4      	b.n	8001802 <__aeabi_dadd+0x21a>
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	ff7fffff 	.word	0xff7fffff

08001c20 <__aeabi_ddiv>:
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	4657      	mov	r7, sl
 8001c24:	46de      	mov	lr, fp
 8001c26:	464e      	mov	r6, r9
 8001c28:	4645      	mov	r5, r8
 8001c2a:	b5e0      	push	{r5, r6, r7, lr}
 8001c2c:	4683      	mov	fp, r0
 8001c2e:	0007      	movs	r7, r0
 8001c30:	030e      	lsls	r6, r1, #12
 8001c32:	0048      	lsls	r0, r1, #1
 8001c34:	b085      	sub	sp, #20
 8001c36:	4692      	mov	sl, r2
 8001c38:	001c      	movs	r4, r3
 8001c3a:	0b36      	lsrs	r6, r6, #12
 8001c3c:	0d40      	lsrs	r0, r0, #21
 8001c3e:	0fcd      	lsrs	r5, r1, #31
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d100      	bne.n	8001c46 <__aeabi_ddiv+0x26>
 8001c44:	e09d      	b.n	8001d82 <__aeabi_ddiv+0x162>
 8001c46:	4b95      	ldr	r3, [pc, #596]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001c48:	4298      	cmp	r0, r3
 8001c4a:	d039      	beq.n	8001cc0 <__aeabi_ddiv+0xa0>
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	00f6      	lsls	r6, r6, #3
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	431e      	orrs	r6, r3
 8001c54:	4a92      	ldr	r2, [pc, #584]	; (8001ea0 <__aeabi_ddiv+0x280>)
 8001c56:	0f7b      	lsrs	r3, r7, #29
 8001c58:	4333      	orrs	r3, r6
 8001c5a:	4699      	mov	r9, r3
 8001c5c:	4694      	mov	ip, r2
 8001c5e:	0003      	movs	r3, r0
 8001c60:	4463      	add	r3, ip
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	2600      	movs	r6, #0
 8001c68:	00ff      	lsls	r7, r7, #3
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	0323      	lsls	r3, r4, #12
 8001c6e:	0b1b      	lsrs	r3, r3, #12
 8001c70:	4698      	mov	r8, r3
 8001c72:	0063      	lsls	r3, r4, #1
 8001c74:	0fe4      	lsrs	r4, r4, #31
 8001c76:	4652      	mov	r2, sl
 8001c78:	0d5b      	lsrs	r3, r3, #21
 8001c7a:	9401      	str	r4, [sp, #4]
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_ddiv+0x60>
 8001c7e:	e0b3      	b.n	8001de8 <__aeabi_ddiv+0x1c8>
 8001c80:	4986      	ldr	r1, [pc, #536]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001c82:	428b      	cmp	r3, r1
 8001c84:	d100      	bne.n	8001c88 <__aeabi_ddiv+0x68>
 8001c86:	e09e      	b.n	8001dc6 <__aeabi_ddiv+0x1a6>
 8001c88:	4642      	mov	r2, r8
 8001c8a:	00d1      	lsls	r1, r2, #3
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	0412      	lsls	r2, r2, #16
 8001c90:	430a      	orrs	r2, r1
 8001c92:	4651      	mov	r1, sl
 8001c94:	0f49      	lsrs	r1, r1, #29
 8001c96:	4311      	orrs	r1, r2
 8001c98:	468b      	mov	fp, r1
 8001c9a:	4981      	ldr	r1, [pc, #516]	; (8001ea0 <__aeabi_ddiv+0x280>)
 8001c9c:	4652      	mov	r2, sl
 8001c9e:	468c      	mov	ip, r1
 8001ca0:	9900      	ldr	r1, [sp, #0]
 8001ca2:	4463      	add	r3, ip
 8001ca4:	1acb      	subs	r3, r1, r3
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	00d2      	lsls	r2, r2, #3
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	002b      	movs	r3, r5
 8001cae:	4063      	eors	r3, r4
 8001cb0:	469a      	mov	sl, r3
 8001cb2:	2e0f      	cmp	r6, #15
 8001cb4:	d900      	bls.n	8001cb8 <__aeabi_ddiv+0x98>
 8001cb6:	e105      	b.n	8001ec4 <__aeabi_ddiv+0x2a4>
 8001cb8:	4b7a      	ldr	r3, [pc, #488]	; (8001ea4 <__aeabi_ddiv+0x284>)
 8001cba:	00b6      	lsls	r6, r6, #2
 8001cbc:	599b      	ldr	r3, [r3, r6]
 8001cbe:	469f      	mov	pc, r3
 8001cc0:	465b      	mov	r3, fp
 8001cc2:	4333      	orrs	r3, r6
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	d000      	beq.n	8001cca <__aeabi_ddiv+0xaa>
 8001cc8:	e0b8      	b.n	8001e3c <__aeabi_ddiv+0x21c>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	2608      	movs	r6, #8
 8001cce:	2700      	movs	r7, #0
 8001cd0:	9000      	str	r0, [sp, #0]
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	e7ca      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001cd6:	46cb      	mov	fp, r9
 8001cd8:	003a      	movs	r2, r7
 8001cda:	9902      	ldr	r1, [sp, #8]
 8001cdc:	9501      	str	r5, [sp, #4]
 8001cde:	9b01      	ldr	r3, [sp, #4]
 8001ce0:	469a      	mov	sl, r3
 8001ce2:	2902      	cmp	r1, #2
 8001ce4:	d027      	beq.n	8001d36 <__aeabi_ddiv+0x116>
 8001ce6:	2903      	cmp	r1, #3
 8001ce8:	d100      	bne.n	8001cec <__aeabi_ddiv+0xcc>
 8001cea:	e280      	b.n	80021ee <__aeabi_ddiv+0x5ce>
 8001cec:	2901      	cmp	r1, #1
 8001cee:	d044      	beq.n	8001d7a <__aeabi_ddiv+0x15a>
 8001cf0:	496d      	ldr	r1, [pc, #436]	; (8001ea8 <__aeabi_ddiv+0x288>)
 8001cf2:	9b00      	ldr	r3, [sp, #0]
 8001cf4:	468c      	mov	ip, r1
 8001cf6:	4463      	add	r3, ip
 8001cf8:	001c      	movs	r4, r3
 8001cfa:	2c00      	cmp	r4, #0
 8001cfc:	dd38      	ble.n	8001d70 <__aeabi_ddiv+0x150>
 8001cfe:	0753      	lsls	r3, r2, #29
 8001d00:	d000      	beq.n	8001d04 <__aeabi_ddiv+0xe4>
 8001d02:	e213      	b.n	800212c <__aeabi_ddiv+0x50c>
 8001d04:	08d2      	lsrs	r2, r2, #3
 8001d06:	465b      	mov	r3, fp
 8001d08:	01db      	lsls	r3, r3, #7
 8001d0a:	d509      	bpl.n	8001d20 <__aeabi_ddiv+0x100>
 8001d0c:	4659      	mov	r1, fp
 8001d0e:	4b67      	ldr	r3, [pc, #412]	; (8001eac <__aeabi_ddiv+0x28c>)
 8001d10:	4019      	ands	r1, r3
 8001d12:	468b      	mov	fp, r1
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	00c9      	lsls	r1, r1, #3
 8001d18:	468c      	mov	ip, r1
 8001d1a:	9b00      	ldr	r3, [sp, #0]
 8001d1c:	4463      	add	r3, ip
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <__aeabi_ddiv+0x290>)
 8001d22:	429c      	cmp	r4, r3
 8001d24:	dc07      	bgt.n	8001d36 <__aeabi_ddiv+0x116>
 8001d26:	465b      	mov	r3, fp
 8001d28:	0564      	lsls	r4, r4, #21
 8001d2a:	075f      	lsls	r7, r3, #29
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	4317      	orrs	r7, r2
 8001d30:	0b1b      	lsrs	r3, r3, #12
 8001d32:	0d62      	lsrs	r2, r4, #21
 8001d34:	e002      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2700      	movs	r7, #0
 8001d3a:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	031b      	lsls	r3, r3, #12
 8001d40:	0b1c      	lsrs	r4, r3, #12
 8001d42:	0d0b      	lsrs	r3, r1, #20
 8001d44:	051b      	lsls	r3, r3, #20
 8001d46:	4323      	orrs	r3, r4
 8001d48:	0514      	lsls	r4, r2, #20
 8001d4a:	4a5a      	ldr	r2, [pc, #360]	; (8001eb4 <__aeabi_ddiv+0x294>)
 8001d4c:	0038      	movs	r0, r7
 8001d4e:	4013      	ands	r3, r2
 8001d50:	431c      	orrs	r4, r3
 8001d52:	4653      	mov	r3, sl
 8001d54:	0064      	lsls	r4, r4, #1
 8001d56:	07db      	lsls	r3, r3, #31
 8001d58:	0864      	lsrs	r4, r4, #1
 8001d5a:	431c      	orrs	r4, r3
 8001d5c:	0021      	movs	r1, r4
 8001d5e:	b005      	add	sp, #20
 8001d60:	bc3c      	pop	{r2, r3, r4, r5}
 8001d62:	4690      	mov	r8, r2
 8001d64:	4699      	mov	r9, r3
 8001d66:	46a2      	mov	sl, r4
 8001d68:	46ab      	mov	fp, r5
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4252      	negs	r2, r2
 8001d70:	2301      	movs	r3, #1
 8001d72:	1b1b      	subs	r3, r3, r4
 8001d74:	2b38      	cmp	r3, #56	; 0x38
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_ddiv+0x15a>
 8001d78:	e1ad      	b.n	80020d6 <__aeabi_ddiv+0x4b6>
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2700      	movs	r7, #0
 8001d80:	e7dc      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001d82:	465b      	mov	r3, fp
 8001d84:	4333      	orrs	r3, r6
 8001d86:	4699      	mov	r9, r3
 8001d88:	d05e      	beq.n	8001e48 <__aeabi_ddiv+0x228>
 8001d8a:	2e00      	cmp	r6, #0
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x170>
 8001d8e:	e18a      	b.n	80020a6 <__aeabi_ddiv+0x486>
 8001d90:	0030      	movs	r0, r6
 8001d92:	f001 fa9d 	bl	80032d0 <__clzsi2>
 8001d96:	0003      	movs	r3, r0
 8001d98:	3b0b      	subs	r3, #11
 8001d9a:	2b1c      	cmp	r3, #28
 8001d9c:	dd00      	ble.n	8001da0 <__aeabi_ddiv+0x180>
 8001d9e:	e17b      	b.n	8002098 <__aeabi_ddiv+0x478>
 8001da0:	221d      	movs	r2, #29
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	465a      	mov	r2, fp
 8001da6:	0001      	movs	r1, r0
 8001da8:	40da      	lsrs	r2, r3
 8001daa:	3908      	subs	r1, #8
 8001dac:	408e      	lsls	r6, r1
 8001dae:	0013      	movs	r3, r2
 8001db0:	465f      	mov	r7, fp
 8001db2:	4333      	orrs	r3, r6
 8001db4:	4699      	mov	r9, r3
 8001db6:	408f      	lsls	r7, r1
 8001db8:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <__aeabi_ddiv+0x298>)
 8001dba:	2600      	movs	r6, #0
 8001dbc:	1a1b      	subs	r3, r3, r0
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9302      	str	r3, [sp, #8]
 8001dc4:	e752      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001dc6:	4641      	mov	r1, r8
 8001dc8:	4653      	mov	r3, sl
 8001dca:	430b      	orrs	r3, r1
 8001dcc:	493b      	ldr	r1, [pc, #236]	; (8001ebc <__aeabi_ddiv+0x29c>)
 8001dce:	469b      	mov	fp, r3
 8001dd0:	468c      	mov	ip, r1
 8001dd2:	9b00      	ldr	r3, [sp, #0]
 8001dd4:	4463      	add	r3, ip
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	465b      	mov	r3, fp
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d13b      	bne.n	8001e56 <__aeabi_ddiv+0x236>
 8001dde:	2302      	movs	r3, #2
 8001de0:	2200      	movs	r2, #0
 8001de2:	431e      	orrs	r6, r3
 8001de4:	2102      	movs	r1, #2
 8001de6:	e761      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001de8:	4643      	mov	r3, r8
 8001dea:	4313      	orrs	r3, r2
 8001dec:	469b      	mov	fp, r3
 8001dee:	d037      	beq.n	8001e60 <__aeabi_ddiv+0x240>
 8001df0:	4643      	mov	r3, r8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d100      	bne.n	8001df8 <__aeabi_ddiv+0x1d8>
 8001df6:	e162      	b.n	80020be <__aeabi_ddiv+0x49e>
 8001df8:	4640      	mov	r0, r8
 8001dfa:	f001 fa69 	bl	80032d0 <__clzsi2>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	3b0b      	subs	r3, #11
 8001e02:	2b1c      	cmp	r3, #28
 8001e04:	dd00      	ble.n	8001e08 <__aeabi_ddiv+0x1e8>
 8001e06:	e153      	b.n	80020b0 <__aeabi_ddiv+0x490>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	4641      	mov	r1, r8
 8001e0c:	3a08      	subs	r2, #8
 8001e0e:	4091      	lsls	r1, r2
 8001e10:	4688      	mov	r8, r1
 8001e12:	211d      	movs	r1, #29
 8001e14:	1acb      	subs	r3, r1, r3
 8001e16:	4651      	mov	r1, sl
 8001e18:	40d9      	lsrs	r1, r3
 8001e1a:	000b      	movs	r3, r1
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	469b      	mov	fp, r3
 8001e22:	4653      	mov	r3, sl
 8001e24:	4093      	lsls	r3, r2
 8001e26:	001a      	movs	r2, r3
 8001e28:	9b00      	ldr	r3, [sp, #0]
 8001e2a:	4925      	ldr	r1, [pc, #148]	; (8001ec0 <__aeabi_ddiv+0x2a0>)
 8001e2c:	469c      	mov	ip, r3
 8001e2e:	4460      	add	r0, ip
 8001e30:	0003      	movs	r3, r0
 8001e32:	468c      	mov	ip, r1
 8001e34:	4463      	add	r3, ip
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2100      	movs	r1, #0
 8001e3a:	e737      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	46b1      	mov	r9, r6
 8001e40:	9000      	str	r0, [sp, #0]
 8001e42:	260c      	movs	r6, #12
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	e711      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	2604      	movs	r6, #4
 8001e50:	2700      	movs	r7, #0
 8001e52:	9302      	str	r3, [sp, #8]
 8001e54:	e70a      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001e56:	2303      	movs	r3, #3
 8001e58:	46c3      	mov	fp, r8
 8001e5a:	431e      	orrs	r6, r3
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	e725      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e60:	3301      	adds	r3, #1
 8001e62:	431e      	orrs	r6, r3
 8001e64:	2200      	movs	r2, #0
 8001e66:	2101      	movs	r1, #1
 8001e68:	e720      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	469a      	mov	sl, r3
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	2700      	movs	r7, #0
 8001e72:	031b      	lsls	r3, r3, #12
 8001e74:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001e76:	e761      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	031b      	lsls	r3, r3, #12
 8001e7e:	4219      	tst	r1, r3
 8001e80:	d100      	bne.n	8001e84 <__aeabi_ddiv+0x264>
 8001e82:	e0e2      	b.n	800204a <__aeabi_ddiv+0x42a>
 8001e84:	4659      	mov	r1, fp
 8001e86:	4219      	tst	r1, r3
 8001e88:	d000      	beq.n	8001e8c <__aeabi_ddiv+0x26c>
 8001e8a:	e0de      	b.n	800204a <__aeabi_ddiv+0x42a>
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	031b      	lsls	r3, r3, #12
 8001e90:	0017      	movs	r7, r2
 8001e92:	0b1b      	lsrs	r3, r3, #12
 8001e94:	46a2      	mov	sl, r4
 8001e96:	4a01      	ldr	r2, [pc, #4]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001e98:	e750      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	000007ff 	.word	0x000007ff
 8001ea0:	fffffc01 	.word	0xfffffc01
 8001ea4:	08019e54 	.word	0x08019e54
 8001ea8:	000003ff 	.word	0x000003ff
 8001eac:	feffffff 	.word	0xfeffffff
 8001eb0:	000007fe 	.word	0x000007fe
 8001eb4:	800fffff 	.word	0x800fffff
 8001eb8:	fffffc0d 	.word	0xfffffc0d
 8001ebc:	fffff801 	.word	0xfffff801
 8001ec0:	000003f3 	.word	0x000003f3
 8001ec4:	45d9      	cmp	r9, fp
 8001ec6:	d900      	bls.n	8001eca <__aeabi_ddiv+0x2aa>
 8001ec8:	e0cb      	b.n	8002062 <__aeabi_ddiv+0x442>
 8001eca:	d100      	bne.n	8001ece <__aeabi_ddiv+0x2ae>
 8001ecc:	e0c6      	b.n	800205c <__aeabi_ddiv+0x43c>
 8001ece:	003c      	movs	r4, r7
 8001ed0:	4648      	mov	r0, r9
 8001ed2:	2700      	movs	r7, #0
 8001ed4:	9b00      	ldr	r3, [sp, #0]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	465b      	mov	r3, fp
 8001edc:	0e16      	lsrs	r6, r2, #24
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	431e      	orrs	r6, r3
 8001ee2:	0213      	lsls	r3, r2, #8
 8001ee4:	4698      	mov	r8, r3
 8001ee6:	0433      	lsls	r3, r6, #16
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	4699      	mov	r9, r3
 8001eec:	0c31      	lsrs	r1, r6, #16
 8001eee:	9101      	str	r1, [sp, #4]
 8001ef0:	f7fe f9b4 	bl	800025c <__aeabi_uidivmod>
 8001ef4:	464a      	mov	r2, r9
 8001ef6:	4342      	muls	r2, r0
 8001ef8:	040b      	lsls	r3, r1, #16
 8001efa:	0c21      	lsrs	r1, r4, #16
 8001efc:	0005      	movs	r5, r0
 8001efe:	4319      	orrs	r1, r3
 8001f00:	428a      	cmp	r2, r1
 8001f02:	d907      	bls.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f04:	1989      	adds	r1, r1, r6
 8001f06:	3d01      	subs	r5, #1
 8001f08:	428e      	cmp	r6, r1
 8001f0a:	d803      	bhi.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f0c:	428a      	cmp	r2, r1
 8001f0e:	d901      	bls.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f10:	1e85      	subs	r5, r0, #2
 8001f12:	1989      	adds	r1, r1, r6
 8001f14:	1a88      	subs	r0, r1, r2
 8001f16:	9901      	ldr	r1, [sp, #4]
 8001f18:	f7fe f9a0 	bl	800025c <__aeabi_uidivmod>
 8001f1c:	0409      	lsls	r1, r1, #16
 8001f1e:	468c      	mov	ip, r1
 8001f20:	464a      	mov	r2, r9
 8001f22:	0421      	lsls	r1, r4, #16
 8001f24:	4664      	mov	r4, ip
 8001f26:	4342      	muls	r2, r0
 8001f28:	0c09      	lsrs	r1, r1, #16
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	4321      	orrs	r1, r4
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	d904      	bls.n	8001f3c <__aeabi_ddiv+0x31c>
 8001f32:	1989      	adds	r1, r1, r6
 8001f34:	3b01      	subs	r3, #1
 8001f36:	428e      	cmp	r6, r1
 8001f38:	d800      	bhi.n	8001f3c <__aeabi_ddiv+0x31c>
 8001f3a:	e0f1      	b.n	8002120 <__aeabi_ddiv+0x500>
 8001f3c:	042d      	lsls	r5, r5, #16
 8001f3e:	431d      	orrs	r5, r3
 8001f40:	46ab      	mov	fp, r5
 8001f42:	4643      	mov	r3, r8
 8001f44:	1a89      	subs	r1, r1, r2
 8001f46:	4642      	mov	r2, r8
 8001f48:	0c28      	lsrs	r0, r5, #16
 8001f4a:	0412      	lsls	r2, r2, #16
 8001f4c:	0c1d      	lsrs	r5, r3, #16
 8001f4e:	465b      	mov	r3, fp
 8001f50:	0c14      	lsrs	r4, r2, #16
 8001f52:	0022      	movs	r2, r4
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	435a      	muls	r2, r3
 8001f5a:	9403      	str	r4, [sp, #12]
 8001f5c:	436b      	muls	r3, r5
 8001f5e:	4344      	muls	r4, r0
 8001f60:	9502      	str	r5, [sp, #8]
 8001f62:	4368      	muls	r0, r5
 8001f64:	191b      	adds	r3, r3, r4
 8001f66:	0c15      	lsrs	r5, r2, #16
 8001f68:	18eb      	adds	r3, r5, r3
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	d903      	bls.n	8001f76 <__aeabi_ddiv+0x356>
 8001f6e:	2480      	movs	r4, #128	; 0x80
 8001f70:	0264      	lsls	r4, r4, #9
 8001f72:	46a4      	mov	ip, r4
 8001f74:	4460      	add	r0, ip
 8001f76:	0c1c      	lsrs	r4, r3, #16
 8001f78:	0415      	lsls	r5, r2, #16
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	0c2d      	lsrs	r5, r5, #16
 8001f7e:	1820      	adds	r0, r4, r0
 8001f80:	195d      	adds	r5, r3, r5
 8001f82:	4281      	cmp	r1, r0
 8001f84:	d377      	bcc.n	8002076 <__aeabi_ddiv+0x456>
 8001f86:	d073      	beq.n	8002070 <__aeabi_ddiv+0x450>
 8001f88:	1a0c      	subs	r4, r1, r0
 8001f8a:	4aa2      	ldr	r2, [pc, #648]	; (8002214 <__aeabi_ddiv+0x5f4>)
 8001f8c:	1b7d      	subs	r5, r7, r5
 8001f8e:	42af      	cmp	r7, r5
 8001f90:	41bf      	sbcs	r7, r7
 8001f92:	4694      	mov	ip, r2
 8001f94:	9b00      	ldr	r3, [sp, #0]
 8001f96:	427f      	negs	r7, r7
 8001f98:	4463      	add	r3, ip
 8001f9a:	1be0      	subs	r0, r4, r7
 8001f9c:	001c      	movs	r4, r3
 8001f9e:	4286      	cmp	r6, r0
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_ddiv+0x384>
 8001fa2:	e0db      	b.n	800215c <__aeabi_ddiv+0x53c>
 8001fa4:	9901      	ldr	r1, [sp, #4]
 8001fa6:	f7fe f959 	bl	800025c <__aeabi_uidivmod>
 8001faa:	464a      	mov	r2, r9
 8001fac:	4342      	muls	r2, r0
 8001fae:	040b      	lsls	r3, r1, #16
 8001fb0:	0c29      	lsrs	r1, r5, #16
 8001fb2:	0007      	movs	r7, r0
 8001fb4:	4319      	orrs	r1, r3
 8001fb6:	428a      	cmp	r2, r1
 8001fb8:	d907      	bls.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fba:	1989      	adds	r1, r1, r6
 8001fbc:	3f01      	subs	r7, #1
 8001fbe:	428e      	cmp	r6, r1
 8001fc0:	d803      	bhi.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d901      	bls.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fc6:	1e87      	subs	r7, r0, #2
 8001fc8:	1989      	adds	r1, r1, r6
 8001fca:	1a88      	subs	r0, r1, r2
 8001fcc:	9901      	ldr	r1, [sp, #4]
 8001fce:	f7fe f945 	bl	800025c <__aeabi_uidivmod>
 8001fd2:	0409      	lsls	r1, r1, #16
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	4689      	mov	r9, r1
 8001fd8:	0429      	lsls	r1, r5, #16
 8001fda:	464d      	mov	r5, r9
 8001fdc:	4342      	muls	r2, r0
 8001fde:	0c09      	lsrs	r1, r1, #16
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	4329      	orrs	r1, r5
 8001fe4:	428a      	cmp	r2, r1
 8001fe6:	d907      	bls.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001fe8:	1989      	adds	r1, r1, r6
 8001fea:	3b01      	subs	r3, #1
 8001fec:	428e      	cmp	r6, r1
 8001fee:	d803      	bhi.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001ff0:	428a      	cmp	r2, r1
 8001ff2:	d901      	bls.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001ff4:	1e83      	subs	r3, r0, #2
 8001ff6:	1989      	adds	r1, r1, r6
 8001ff8:	043f      	lsls	r7, r7, #16
 8001ffa:	1a89      	subs	r1, r1, r2
 8001ffc:	003a      	movs	r2, r7
 8001ffe:	9f03      	ldr	r7, [sp, #12]
 8002000:	431a      	orrs	r2, r3
 8002002:	0038      	movs	r0, r7
 8002004:	0413      	lsls	r3, r2, #16
 8002006:	0c1b      	lsrs	r3, r3, #16
 8002008:	4358      	muls	r0, r3
 800200a:	4681      	mov	r9, r0
 800200c:	9802      	ldr	r0, [sp, #8]
 800200e:	0c15      	lsrs	r5, r2, #16
 8002010:	436f      	muls	r7, r5
 8002012:	4343      	muls	r3, r0
 8002014:	4345      	muls	r5, r0
 8002016:	4648      	mov	r0, r9
 8002018:	0c00      	lsrs	r0, r0, #16
 800201a:	4684      	mov	ip, r0
 800201c:	19db      	adds	r3, r3, r7
 800201e:	4463      	add	r3, ip
 8002020:	429f      	cmp	r7, r3
 8002022:	d903      	bls.n	800202c <__aeabi_ddiv+0x40c>
 8002024:	2080      	movs	r0, #128	; 0x80
 8002026:	0240      	lsls	r0, r0, #9
 8002028:	4684      	mov	ip, r0
 800202a:	4465      	add	r5, ip
 800202c:	4648      	mov	r0, r9
 800202e:	0c1f      	lsrs	r7, r3, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	041b      	lsls	r3, r3, #16
 8002034:	0c00      	lsrs	r0, r0, #16
 8002036:	197d      	adds	r5, r7, r5
 8002038:	1818      	adds	r0, r3, r0
 800203a:	42a9      	cmp	r1, r5
 800203c:	d200      	bcs.n	8002040 <__aeabi_ddiv+0x420>
 800203e:	e084      	b.n	800214a <__aeabi_ddiv+0x52a>
 8002040:	d100      	bne.n	8002044 <__aeabi_ddiv+0x424>
 8002042:	e07f      	b.n	8002144 <__aeabi_ddiv+0x524>
 8002044:	2301      	movs	r3, #1
 8002046:	431a      	orrs	r2, r3
 8002048:	e657      	b.n	8001cfa <__aeabi_ddiv+0xda>
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	464a      	mov	r2, r9
 800204e:	031b      	lsls	r3, r3, #12
 8002050:	4313      	orrs	r3, r2
 8002052:	031b      	lsls	r3, r3, #12
 8002054:	0b1b      	lsrs	r3, r3, #12
 8002056:	46aa      	mov	sl, r5
 8002058:	4a6f      	ldr	r2, [pc, #444]	; (8002218 <__aeabi_ddiv+0x5f8>)
 800205a:	e66f      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 800205c:	42ba      	cmp	r2, r7
 800205e:	d900      	bls.n	8002062 <__aeabi_ddiv+0x442>
 8002060:	e735      	b.n	8001ece <__aeabi_ddiv+0x2ae>
 8002062:	464b      	mov	r3, r9
 8002064:	07dc      	lsls	r4, r3, #31
 8002066:	0858      	lsrs	r0, r3, #1
 8002068:	087b      	lsrs	r3, r7, #1
 800206a:	431c      	orrs	r4, r3
 800206c:	07ff      	lsls	r7, r7, #31
 800206e:	e734      	b.n	8001eda <__aeabi_ddiv+0x2ba>
 8002070:	2400      	movs	r4, #0
 8002072:	42af      	cmp	r7, r5
 8002074:	d289      	bcs.n	8001f8a <__aeabi_ddiv+0x36a>
 8002076:	4447      	add	r7, r8
 8002078:	4547      	cmp	r7, r8
 800207a:	41a4      	sbcs	r4, r4
 800207c:	465b      	mov	r3, fp
 800207e:	4264      	negs	r4, r4
 8002080:	19a4      	adds	r4, r4, r6
 8002082:	1864      	adds	r4, r4, r1
 8002084:	3b01      	subs	r3, #1
 8002086:	42a6      	cmp	r6, r4
 8002088:	d21e      	bcs.n	80020c8 <__aeabi_ddiv+0x4a8>
 800208a:	42a0      	cmp	r0, r4
 800208c:	d86d      	bhi.n	800216a <__aeabi_ddiv+0x54a>
 800208e:	d100      	bne.n	8002092 <__aeabi_ddiv+0x472>
 8002090:	e0b6      	b.n	8002200 <__aeabi_ddiv+0x5e0>
 8002092:	1a24      	subs	r4, r4, r0
 8002094:	469b      	mov	fp, r3
 8002096:	e778      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 8002098:	0003      	movs	r3, r0
 800209a:	465a      	mov	r2, fp
 800209c:	3b28      	subs	r3, #40	; 0x28
 800209e:	409a      	lsls	r2, r3
 80020a0:	2700      	movs	r7, #0
 80020a2:	4691      	mov	r9, r2
 80020a4:	e688      	b.n	8001db8 <__aeabi_ddiv+0x198>
 80020a6:	4658      	mov	r0, fp
 80020a8:	f001 f912 	bl	80032d0 <__clzsi2>
 80020ac:	3020      	adds	r0, #32
 80020ae:	e672      	b.n	8001d96 <__aeabi_ddiv+0x176>
 80020b0:	0003      	movs	r3, r0
 80020b2:	4652      	mov	r2, sl
 80020b4:	3b28      	subs	r3, #40	; 0x28
 80020b6:	409a      	lsls	r2, r3
 80020b8:	4693      	mov	fp, r2
 80020ba:	2200      	movs	r2, #0
 80020bc:	e6b4      	b.n	8001e28 <__aeabi_ddiv+0x208>
 80020be:	4650      	mov	r0, sl
 80020c0:	f001 f906 	bl	80032d0 <__clzsi2>
 80020c4:	3020      	adds	r0, #32
 80020c6:	e69a      	b.n	8001dfe <__aeabi_ddiv+0x1de>
 80020c8:	42a6      	cmp	r6, r4
 80020ca:	d1e2      	bne.n	8002092 <__aeabi_ddiv+0x472>
 80020cc:	45b8      	cmp	r8, r7
 80020ce:	d9dc      	bls.n	800208a <__aeabi_ddiv+0x46a>
 80020d0:	1a34      	subs	r4, r6, r0
 80020d2:	469b      	mov	fp, r3
 80020d4:	e759      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 80020d6:	2b1f      	cmp	r3, #31
 80020d8:	dc65      	bgt.n	80021a6 <__aeabi_ddiv+0x586>
 80020da:	4c50      	ldr	r4, [pc, #320]	; (800221c <__aeabi_ddiv+0x5fc>)
 80020dc:	9900      	ldr	r1, [sp, #0]
 80020de:	46a4      	mov	ip, r4
 80020e0:	465c      	mov	r4, fp
 80020e2:	4461      	add	r1, ip
 80020e4:	0008      	movs	r0, r1
 80020e6:	408c      	lsls	r4, r1
 80020e8:	0011      	movs	r1, r2
 80020ea:	4082      	lsls	r2, r0
 80020ec:	40d9      	lsrs	r1, r3
 80020ee:	1e50      	subs	r0, r2, #1
 80020f0:	4182      	sbcs	r2, r0
 80020f2:	430c      	orrs	r4, r1
 80020f4:	4314      	orrs	r4, r2
 80020f6:	465a      	mov	r2, fp
 80020f8:	40da      	lsrs	r2, r3
 80020fa:	0013      	movs	r3, r2
 80020fc:	0762      	lsls	r2, r4, #29
 80020fe:	d009      	beq.n	8002114 <__aeabi_ddiv+0x4f4>
 8002100:	220f      	movs	r2, #15
 8002102:	4022      	ands	r2, r4
 8002104:	2a04      	cmp	r2, #4
 8002106:	d005      	beq.n	8002114 <__aeabi_ddiv+0x4f4>
 8002108:	0022      	movs	r2, r4
 800210a:	1d14      	adds	r4, r2, #4
 800210c:	4294      	cmp	r4, r2
 800210e:	4189      	sbcs	r1, r1
 8002110:	4249      	negs	r1, r1
 8002112:	185b      	adds	r3, r3, r1
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	d562      	bpl.n	80021de <__aeabi_ddiv+0x5be>
 8002118:	2201      	movs	r2, #1
 800211a:	2300      	movs	r3, #0
 800211c:	2700      	movs	r7, #0
 800211e:	e60d      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8002120:	428a      	cmp	r2, r1
 8002122:	d800      	bhi.n	8002126 <__aeabi_ddiv+0x506>
 8002124:	e70a      	b.n	8001f3c <__aeabi_ddiv+0x31c>
 8002126:	1e83      	subs	r3, r0, #2
 8002128:	1989      	adds	r1, r1, r6
 800212a:	e707      	b.n	8001f3c <__aeabi_ddiv+0x31c>
 800212c:	230f      	movs	r3, #15
 800212e:	4013      	ands	r3, r2
 8002130:	2b04      	cmp	r3, #4
 8002132:	d100      	bne.n	8002136 <__aeabi_ddiv+0x516>
 8002134:	e5e6      	b.n	8001d04 <__aeabi_ddiv+0xe4>
 8002136:	1d17      	adds	r7, r2, #4
 8002138:	4297      	cmp	r7, r2
 800213a:	4192      	sbcs	r2, r2
 800213c:	4253      	negs	r3, r2
 800213e:	449b      	add	fp, r3
 8002140:	08fa      	lsrs	r2, r7, #3
 8002142:	e5e0      	b.n	8001d06 <__aeabi_ddiv+0xe6>
 8002144:	2800      	cmp	r0, #0
 8002146:	d100      	bne.n	800214a <__aeabi_ddiv+0x52a>
 8002148:	e5d7      	b.n	8001cfa <__aeabi_ddiv+0xda>
 800214a:	1871      	adds	r1, r6, r1
 800214c:	1e53      	subs	r3, r2, #1
 800214e:	42b1      	cmp	r1, r6
 8002150:	d327      	bcc.n	80021a2 <__aeabi_ddiv+0x582>
 8002152:	42a9      	cmp	r1, r5
 8002154:	d315      	bcc.n	8002182 <__aeabi_ddiv+0x562>
 8002156:	d058      	beq.n	800220a <__aeabi_ddiv+0x5ea>
 8002158:	001a      	movs	r2, r3
 800215a:	e773      	b.n	8002044 <__aeabi_ddiv+0x424>
 800215c:	2b00      	cmp	r3, #0
 800215e:	dc00      	bgt.n	8002162 <__aeabi_ddiv+0x542>
 8002160:	e604      	b.n	8001d6c <__aeabi_ddiv+0x14c>
 8002162:	2301      	movs	r3, #1
 8002164:	2200      	movs	r2, #0
 8002166:	449b      	add	fp, r3
 8002168:	e5cd      	b.n	8001d06 <__aeabi_ddiv+0xe6>
 800216a:	2302      	movs	r3, #2
 800216c:	4447      	add	r7, r8
 800216e:	4547      	cmp	r7, r8
 8002170:	4189      	sbcs	r1, r1
 8002172:	425b      	negs	r3, r3
 8002174:	469c      	mov	ip, r3
 8002176:	4249      	negs	r1, r1
 8002178:	1989      	adds	r1, r1, r6
 800217a:	190c      	adds	r4, r1, r4
 800217c:	44e3      	add	fp, ip
 800217e:	1a24      	subs	r4, r4, r0
 8002180:	e703      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 8002182:	4643      	mov	r3, r8
 8002184:	005f      	lsls	r7, r3, #1
 8002186:	4547      	cmp	r7, r8
 8002188:	419b      	sbcs	r3, r3
 800218a:	46b8      	mov	r8, r7
 800218c:	425b      	negs	r3, r3
 800218e:	199e      	adds	r6, r3, r6
 8002190:	3a02      	subs	r2, #2
 8002192:	1989      	adds	r1, r1, r6
 8002194:	42a9      	cmp	r1, r5
 8002196:	d000      	beq.n	800219a <__aeabi_ddiv+0x57a>
 8002198:	e754      	b.n	8002044 <__aeabi_ddiv+0x424>
 800219a:	4540      	cmp	r0, r8
 800219c:	d000      	beq.n	80021a0 <__aeabi_ddiv+0x580>
 800219e:	e751      	b.n	8002044 <__aeabi_ddiv+0x424>
 80021a0:	e5ab      	b.n	8001cfa <__aeabi_ddiv+0xda>
 80021a2:	001a      	movs	r2, r3
 80021a4:	e7f6      	b.n	8002194 <__aeabi_ddiv+0x574>
 80021a6:	211f      	movs	r1, #31
 80021a8:	465f      	mov	r7, fp
 80021aa:	4249      	negs	r1, r1
 80021ac:	1b0c      	subs	r4, r1, r4
 80021ae:	40e7      	lsrs	r7, r4
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d007      	beq.n	80021c4 <__aeabi_ddiv+0x5a4>
 80021b4:	491a      	ldr	r1, [pc, #104]	; (8002220 <__aeabi_ddiv+0x600>)
 80021b6:	9b00      	ldr	r3, [sp, #0]
 80021b8:	468c      	mov	ip, r1
 80021ba:	4463      	add	r3, ip
 80021bc:	0018      	movs	r0, r3
 80021be:	465b      	mov	r3, fp
 80021c0:	4083      	lsls	r3, r0
 80021c2:	431a      	orrs	r2, r3
 80021c4:	1e50      	subs	r0, r2, #1
 80021c6:	4182      	sbcs	r2, r0
 80021c8:	433a      	orrs	r2, r7
 80021ca:	2707      	movs	r7, #7
 80021cc:	2300      	movs	r3, #0
 80021ce:	4017      	ands	r7, r2
 80021d0:	d009      	beq.n	80021e6 <__aeabi_ddiv+0x5c6>
 80021d2:	210f      	movs	r1, #15
 80021d4:	2300      	movs	r3, #0
 80021d6:	4011      	ands	r1, r2
 80021d8:	0014      	movs	r4, r2
 80021da:	2904      	cmp	r1, #4
 80021dc:	d195      	bne.n	800210a <__aeabi_ddiv+0x4ea>
 80021de:	0022      	movs	r2, r4
 80021e0:	075f      	lsls	r7, r3, #29
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	0b1b      	lsrs	r3, r3, #12
 80021e6:	08d2      	lsrs	r2, r2, #3
 80021e8:	4317      	orrs	r7, r2
 80021ea:	2200      	movs	r2, #0
 80021ec:	e5a6      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	4659      	mov	r1, fp
 80021f2:	031b      	lsls	r3, r3, #12
 80021f4:	430b      	orrs	r3, r1
 80021f6:	031b      	lsls	r3, r3, #12
 80021f8:	0017      	movs	r7, r2
 80021fa:	0b1b      	lsrs	r3, r3, #12
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <__aeabi_ddiv+0x5f8>)
 80021fe:	e59d      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8002200:	42bd      	cmp	r5, r7
 8002202:	d8b2      	bhi.n	800216a <__aeabi_ddiv+0x54a>
 8002204:	469b      	mov	fp, r3
 8002206:	2400      	movs	r4, #0
 8002208:	e6bf      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 800220a:	4580      	cmp	r8, r0
 800220c:	d3b9      	bcc.n	8002182 <__aeabi_ddiv+0x562>
 800220e:	001a      	movs	r2, r3
 8002210:	e7c3      	b.n	800219a <__aeabi_ddiv+0x57a>
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	000003ff 	.word	0x000003ff
 8002218:	000007ff 	.word	0x000007ff
 800221c:	0000041e 	.word	0x0000041e
 8002220:	0000043e 	.word	0x0000043e

08002224 <__eqdf2>:
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002226:	464f      	mov	r7, r9
 8002228:	4646      	mov	r6, r8
 800222a:	46d6      	mov	lr, sl
 800222c:	4684      	mov	ip, r0
 800222e:	b5c0      	push	{r6, r7, lr}
 8002230:	4680      	mov	r8, r0
 8002232:	4e19      	ldr	r6, [pc, #100]	; (8002298 <__eqdf2+0x74>)
 8002234:	0318      	lsls	r0, r3, #12
 8002236:	030f      	lsls	r7, r1, #12
 8002238:	004d      	lsls	r5, r1, #1
 800223a:	0b00      	lsrs	r0, r0, #12
 800223c:	005c      	lsls	r4, r3, #1
 800223e:	4682      	mov	sl, r0
 8002240:	0b3f      	lsrs	r7, r7, #12
 8002242:	0d6d      	lsrs	r5, r5, #21
 8002244:	0fc9      	lsrs	r1, r1, #31
 8002246:	4691      	mov	r9, r2
 8002248:	0d64      	lsrs	r4, r4, #21
 800224a:	0fdb      	lsrs	r3, r3, #31
 800224c:	2001      	movs	r0, #1
 800224e:	42b5      	cmp	r5, r6
 8002250:	d00a      	beq.n	8002268 <__eqdf2+0x44>
 8002252:	42b4      	cmp	r4, r6
 8002254:	d003      	beq.n	800225e <__eqdf2+0x3a>
 8002256:	42a5      	cmp	r5, r4
 8002258:	d101      	bne.n	800225e <__eqdf2+0x3a>
 800225a:	4557      	cmp	r7, sl
 800225c:	d00c      	beq.n	8002278 <__eqdf2+0x54>
 800225e:	bc1c      	pop	{r2, r3, r4}
 8002260:	4690      	mov	r8, r2
 8002262:	4699      	mov	r9, r3
 8002264:	46a2      	mov	sl, r4
 8002266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002268:	4666      	mov	r6, ip
 800226a:	433e      	orrs	r6, r7
 800226c:	d1f7      	bne.n	800225e <__eqdf2+0x3a>
 800226e:	42ac      	cmp	r4, r5
 8002270:	d1f5      	bne.n	800225e <__eqdf2+0x3a>
 8002272:	4654      	mov	r4, sl
 8002274:	4314      	orrs	r4, r2
 8002276:	d1f2      	bne.n	800225e <__eqdf2+0x3a>
 8002278:	2001      	movs	r0, #1
 800227a:	45c8      	cmp	r8, r9
 800227c:	d1ef      	bne.n	800225e <__eqdf2+0x3a>
 800227e:	4299      	cmp	r1, r3
 8002280:	d007      	beq.n	8002292 <__eqdf2+0x6e>
 8002282:	2d00      	cmp	r5, #0
 8002284:	d1eb      	bne.n	800225e <__eqdf2+0x3a>
 8002286:	4663      	mov	r3, ip
 8002288:	431f      	orrs	r7, r3
 800228a:	0038      	movs	r0, r7
 800228c:	1e47      	subs	r7, r0, #1
 800228e:	41b8      	sbcs	r0, r7
 8002290:	e7e5      	b.n	800225e <__eqdf2+0x3a>
 8002292:	2000      	movs	r0, #0
 8002294:	e7e3      	b.n	800225e <__eqdf2+0x3a>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	000007ff 	.word	0x000007ff

0800229c <__gedf2>:
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	464f      	mov	r7, r9
 80022a0:	4646      	mov	r6, r8
 80022a2:	46d6      	mov	lr, sl
 80022a4:	004d      	lsls	r5, r1, #1
 80022a6:	b5c0      	push	{r6, r7, lr}
 80022a8:	030e      	lsls	r6, r1, #12
 80022aa:	0fc9      	lsrs	r1, r1, #31
 80022ac:	468a      	mov	sl, r1
 80022ae:	492c      	ldr	r1, [pc, #176]	; (8002360 <__gedf2+0xc4>)
 80022b0:	031f      	lsls	r7, r3, #12
 80022b2:	005c      	lsls	r4, r3, #1
 80022b4:	4680      	mov	r8, r0
 80022b6:	0b36      	lsrs	r6, r6, #12
 80022b8:	0d6d      	lsrs	r5, r5, #21
 80022ba:	4691      	mov	r9, r2
 80022bc:	0b3f      	lsrs	r7, r7, #12
 80022be:	0d64      	lsrs	r4, r4, #21
 80022c0:	0fdb      	lsrs	r3, r3, #31
 80022c2:	428d      	cmp	r5, r1
 80022c4:	d01e      	beq.n	8002304 <__gedf2+0x68>
 80022c6:	428c      	cmp	r4, r1
 80022c8:	d016      	beq.n	80022f8 <__gedf2+0x5c>
 80022ca:	2d00      	cmp	r5, #0
 80022cc:	d11e      	bne.n	800230c <__gedf2+0x70>
 80022ce:	4330      	orrs	r0, r6
 80022d0:	4684      	mov	ip, r0
 80022d2:	2c00      	cmp	r4, #0
 80022d4:	d101      	bne.n	80022da <__gedf2+0x3e>
 80022d6:	433a      	orrs	r2, r7
 80022d8:	d023      	beq.n	8002322 <__gedf2+0x86>
 80022da:	4662      	mov	r2, ip
 80022dc:	2a00      	cmp	r2, #0
 80022de:	d01a      	beq.n	8002316 <__gedf2+0x7a>
 80022e0:	459a      	cmp	sl, r3
 80022e2:	d029      	beq.n	8002338 <__gedf2+0x9c>
 80022e4:	4651      	mov	r1, sl
 80022e6:	2002      	movs	r0, #2
 80022e8:	3901      	subs	r1, #1
 80022ea:	4008      	ands	r0, r1
 80022ec:	3801      	subs	r0, #1
 80022ee:	bc1c      	pop	{r2, r3, r4}
 80022f0:	4690      	mov	r8, r2
 80022f2:	4699      	mov	r9, r3
 80022f4:	46a2      	mov	sl, r4
 80022f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f8:	0039      	movs	r1, r7
 80022fa:	4311      	orrs	r1, r2
 80022fc:	d0e5      	beq.n	80022ca <__gedf2+0x2e>
 80022fe:	2002      	movs	r0, #2
 8002300:	4240      	negs	r0, r0
 8002302:	e7f4      	b.n	80022ee <__gedf2+0x52>
 8002304:	4330      	orrs	r0, r6
 8002306:	d1fa      	bne.n	80022fe <__gedf2+0x62>
 8002308:	42ac      	cmp	r4, r5
 800230a:	d00f      	beq.n	800232c <__gedf2+0x90>
 800230c:	2c00      	cmp	r4, #0
 800230e:	d10f      	bne.n	8002330 <__gedf2+0x94>
 8002310:	433a      	orrs	r2, r7
 8002312:	d0e7      	beq.n	80022e4 <__gedf2+0x48>
 8002314:	e00c      	b.n	8002330 <__gedf2+0x94>
 8002316:	2201      	movs	r2, #1
 8002318:	3b01      	subs	r3, #1
 800231a:	4393      	bics	r3, r2
 800231c:	0018      	movs	r0, r3
 800231e:	3001      	adds	r0, #1
 8002320:	e7e5      	b.n	80022ee <__gedf2+0x52>
 8002322:	4663      	mov	r3, ip
 8002324:	2000      	movs	r0, #0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0e1      	beq.n	80022ee <__gedf2+0x52>
 800232a:	e7db      	b.n	80022e4 <__gedf2+0x48>
 800232c:	433a      	orrs	r2, r7
 800232e:	d1e6      	bne.n	80022fe <__gedf2+0x62>
 8002330:	459a      	cmp	sl, r3
 8002332:	d1d7      	bne.n	80022e4 <__gedf2+0x48>
 8002334:	42a5      	cmp	r5, r4
 8002336:	dcd5      	bgt.n	80022e4 <__gedf2+0x48>
 8002338:	42a5      	cmp	r5, r4
 800233a:	db05      	blt.n	8002348 <__gedf2+0xac>
 800233c:	42be      	cmp	r6, r7
 800233e:	d8d1      	bhi.n	80022e4 <__gedf2+0x48>
 8002340:	d008      	beq.n	8002354 <__gedf2+0xb8>
 8002342:	2000      	movs	r0, #0
 8002344:	42be      	cmp	r6, r7
 8002346:	d2d2      	bcs.n	80022ee <__gedf2+0x52>
 8002348:	4650      	mov	r0, sl
 800234a:	2301      	movs	r3, #1
 800234c:	3801      	subs	r0, #1
 800234e:	4398      	bics	r0, r3
 8002350:	3001      	adds	r0, #1
 8002352:	e7cc      	b.n	80022ee <__gedf2+0x52>
 8002354:	45c8      	cmp	r8, r9
 8002356:	d8c5      	bhi.n	80022e4 <__gedf2+0x48>
 8002358:	2000      	movs	r0, #0
 800235a:	45c8      	cmp	r8, r9
 800235c:	d3f4      	bcc.n	8002348 <__gedf2+0xac>
 800235e:	e7c6      	b.n	80022ee <__gedf2+0x52>
 8002360:	000007ff 	.word	0x000007ff

08002364 <__ledf2>:
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	464f      	mov	r7, r9
 8002368:	4646      	mov	r6, r8
 800236a:	46d6      	mov	lr, sl
 800236c:	004d      	lsls	r5, r1, #1
 800236e:	b5c0      	push	{r6, r7, lr}
 8002370:	030e      	lsls	r6, r1, #12
 8002372:	0fc9      	lsrs	r1, r1, #31
 8002374:	468a      	mov	sl, r1
 8002376:	492e      	ldr	r1, [pc, #184]	; (8002430 <__ledf2+0xcc>)
 8002378:	031f      	lsls	r7, r3, #12
 800237a:	005c      	lsls	r4, r3, #1
 800237c:	4680      	mov	r8, r0
 800237e:	0b36      	lsrs	r6, r6, #12
 8002380:	0d6d      	lsrs	r5, r5, #21
 8002382:	4691      	mov	r9, r2
 8002384:	0b3f      	lsrs	r7, r7, #12
 8002386:	0d64      	lsrs	r4, r4, #21
 8002388:	0fdb      	lsrs	r3, r3, #31
 800238a:	428d      	cmp	r5, r1
 800238c:	d018      	beq.n	80023c0 <__ledf2+0x5c>
 800238e:	428c      	cmp	r4, r1
 8002390:	d011      	beq.n	80023b6 <__ledf2+0x52>
 8002392:	2d00      	cmp	r5, #0
 8002394:	d118      	bne.n	80023c8 <__ledf2+0x64>
 8002396:	4330      	orrs	r0, r6
 8002398:	4684      	mov	ip, r0
 800239a:	2c00      	cmp	r4, #0
 800239c:	d11e      	bne.n	80023dc <__ledf2+0x78>
 800239e:	433a      	orrs	r2, r7
 80023a0:	d11c      	bne.n	80023dc <__ledf2+0x78>
 80023a2:	4663      	mov	r3, ip
 80023a4:	2000      	movs	r0, #0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d030      	beq.n	800240c <__ledf2+0xa8>
 80023aa:	4651      	mov	r1, sl
 80023ac:	2002      	movs	r0, #2
 80023ae:	3901      	subs	r1, #1
 80023b0:	4008      	ands	r0, r1
 80023b2:	3801      	subs	r0, #1
 80023b4:	e02a      	b.n	800240c <__ledf2+0xa8>
 80023b6:	0039      	movs	r1, r7
 80023b8:	4311      	orrs	r1, r2
 80023ba:	d0ea      	beq.n	8002392 <__ledf2+0x2e>
 80023bc:	2002      	movs	r0, #2
 80023be:	e025      	b.n	800240c <__ledf2+0xa8>
 80023c0:	4330      	orrs	r0, r6
 80023c2:	d1fb      	bne.n	80023bc <__ledf2+0x58>
 80023c4:	42ac      	cmp	r4, r5
 80023c6:	d026      	beq.n	8002416 <__ledf2+0xb2>
 80023c8:	2c00      	cmp	r4, #0
 80023ca:	d126      	bne.n	800241a <__ledf2+0xb6>
 80023cc:	433a      	orrs	r2, r7
 80023ce:	d124      	bne.n	800241a <__ledf2+0xb6>
 80023d0:	4651      	mov	r1, sl
 80023d2:	2002      	movs	r0, #2
 80023d4:	3901      	subs	r1, #1
 80023d6:	4008      	ands	r0, r1
 80023d8:	3801      	subs	r0, #1
 80023da:	e017      	b.n	800240c <__ledf2+0xa8>
 80023dc:	4662      	mov	r2, ip
 80023de:	2a00      	cmp	r2, #0
 80023e0:	d00f      	beq.n	8002402 <__ledf2+0x9e>
 80023e2:	459a      	cmp	sl, r3
 80023e4:	d1e1      	bne.n	80023aa <__ledf2+0x46>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	db05      	blt.n	80023f6 <__ledf2+0x92>
 80023ea:	42be      	cmp	r6, r7
 80023ec:	d8dd      	bhi.n	80023aa <__ledf2+0x46>
 80023ee:	d019      	beq.n	8002424 <__ledf2+0xc0>
 80023f0:	2000      	movs	r0, #0
 80023f2:	42be      	cmp	r6, r7
 80023f4:	d20a      	bcs.n	800240c <__ledf2+0xa8>
 80023f6:	4650      	mov	r0, sl
 80023f8:	2301      	movs	r3, #1
 80023fa:	3801      	subs	r0, #1
 80023fc:	4398      	bics	r0, r3
 80023fe:	3001      	adds	r0, #1
 8002400:	e004      	b.n	800240c <__ledf2+0xa8>
 8002402:	2201      	movs	r2, #1
 8002404:	3b01      	subs	r3, #1
 8002406:	4393      	bics	r3, r2
 8002408:	0018      	movs	r0, r3
 800240a:	3001      	adds	r0, #1
 800240c:	bc1c      	pop	{r2, r3, r4}
 800240e:	4690      	mov	r8, r2
 8002410:	4699      	mov	r9, r3
 8002412:	46a2      	mov	sl, r4
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002416:	433a      	orrs	r2, r7
 8002418:	d1d0      	bne.n	80023bc <__ledf2+0x58>
 800241a:	459a      	cmp	sl, r3
 800241c:	d1c5      	bne.n	80023aa <__ledf2+0x46>
 800241e:	42a5      	cmp	r5, r4
 8002420:	dcc3      	bgt.n	80023aa <__ledf2+0x46>
 8002422:	e7e0      	b.n	80023e6 <__ledf2+0x82>
 8002424:	45c8      	cmp	r8, r9
 8002426:	d8c0      	bhi.n	80023aa <__ledf2+0x46>
 8002428:	2000      	movs	r0, #0
 800242a:	45c8      	cmp	r8, r9
 800242c:	d3e3      	bcc.n	80023f6 <__ledf2+0x92>
 800242e:	e7ed      	b.n	800240c <__ledf2+0xa8>
 8002430:	000007ff 	.word	0x000007ff

08002434 <__aeabi_dmul>:
 8002434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002436:	4657      	mov	r7, sl
 8002438:	46de      	mov	lr, fp
 800243a:	464e      	mov	r6, r9
 800243c:	4645      	mov	r5, r8
 800243e:	b5e0      	push	{r5, r6, r7, lr}
 8002440:	4683      	mov	fp, r0
 8002442:	0006      	movs	r6, r0
 8002444:	030f      	lsls	r7, r1, #12
 8002446:	0048      	lsls	r0, r1, #1
 8002448:	b087      	sub	sp, #28
 800244a:	4692      	mov	sl, r2
 800244c:	001d      	movs	r5, r3
 800244e:	0b3f      	lsrs	r7, r7, #12
 8002450:	0d40      	lsrs	r0, r0, #21
 8002452:	0fcc      	lsrs	r4, r1, #31
 8002454:	2800      	cmp	r0, #0
 8002456:	d100      	bne.n	800245a <__aeabi_dmul+0x26>
 8002458:	e06f      	b.n	800253a <__aeabi_dmul+0x106>
 800245a:	4bde      	ldr	r3, [pc, #888]	; (80027d4 <__aeabi_dmul+0x3a0>)
 800245c:	4298      	cmp	r0, r3
 800245e:	d038      	beq.n	80024d2 <__aeabi_dmul+0x9e>
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	00ff      	lsls	r7, r7, #3
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431f      	orrs	r7, r3
 8002468:	0f73      	lsrs	r3, r6, #29
 800246a:	433b      	orrs	r3, r7
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	4bda      	ldr	r3, [pc, #872]	; (80027d8 <__aeabi_dmul+0x3a4>)
 8002470:	2700      	movs	r7, #0
 8002472:	4699      	mov	r9, r3
 8002474:	2300      	movs	r3, #0
 8002476:	469b      	mov	fp, r3
 8002478:	00f6      	lsls	r6, r6, #3
 800247a:	4481      	add	r9, r0
 800247c:	032b      	lsls	r3, r5, #12
 800247e:	0069      	lsls	r1, r5, #1
 8002480:	0b1b      	lsrs	r3, r3, #12
 8002482:	4652      	mov	r2, sl
 8002484:	4698      	mov	r8, r3
 8002486:	0d49      	lsrs	r1, r1, #21
 8002488:	0fed      	lsrs	r5, r5, #31
 800248a:	2900      	cmp	r1, #0
 800248c:	d100      	bne.n	8002490 <__aeabi_dmul+0x5c>
 800248e:	e085      	b.n	800259c <__aeabi_dmul+0x168>
 8002490:	4bd0      	ldr	r3, [pc, #832]	; (80027d4 <__aeabi_dmul+0x3a0>)
 8002492:	4299      	cmp	r1, r3
 8002494:	d100      	bne.n	8002498 <__aeabi_dmul+0x64>
 8002496:	e073      	b.n	8002580 <__aeabi_dmul+0x14c>
 8002498:	4643      	mov	r3, r8
 800249a:	00da      	lsls	r2, r3, #3
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	4313      	orrs	r3, r2
 80024a2:	4652      	mov	r2, sl
 80024a4:	48cc      	ldr	r0, [pc, #816]	; (80027d8 <__aeabi_dmul+0x3a4>)
 80024a6:	0f52      	lsrs	r2, r2, #29
 80024a8:	4684      	mov	ip, r0
 80024aa:	4313      	orrs	r3, r2
 80024ac:	4652      	mov	r2, sl
 80024ae:	2000      	movs	r0, #0
 80024b0:	4461      	add	r1, ip
 80024b2:	00d2      	lsls	r2, r2, #3
 80024b4:	4489      	add	r9, r1
 80024b6:	0021      	movs	r1, r4
 80024b8:	4069      	eors	r1, r5
 80024ba:	9100      	str	r1, [sp, #0]
 80024bc:	468c      	mov	ip, r1
 80024be:	2101      	movs	r1, #1
 80024c0:	4449      	add	r1, r9
 80024c2:	468a      	mov	sl, r1
 80024c4:	2f0f      	cmp	r7, #15
 80024c6:	d900      	bls.n	80024ca <__aeabi_dmul+0x96>
 80024c8:	e090      	b.n	80025ec <__aeabi_dmul+0x1b8>
 80024ca:	49c4      	ldr	r1, [pc, #784]	; (80027dc <__aeabi_dmul+0x3a8>)
 80024cc:	00bf      	lsls	r7, r7, #2
 80024ce:	59cf      	ldr	r7, [r1, r7]
 80024d0:	46bf      	mov	pc, r7
 80024d2:	465b      	mov	r3, fp
 80024d4:	433b      	orrs	r3, r7
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	d000      	beq.n	80024dc <__aeabi_dmul+0xa8>
 80024da:	e16a      	b.n	80027b2 <__aeabi_dmul+0x37e>
 80024dc:	2302      	movs	r3, #2
 80024de:	2708      	movs	r7, #8
 80024e0:	2600      	movs	r6, #0
 80024e2:	4681      	mov	r9, r0
 80024e4:	469b      	mov	fp, r3
 80024e6:	e7c9      	b.n	800247c <__aeabi_dmul+0x48>
 80024e8:	0032      	movs	r2, r6
 80024ea:	4658      	mov	r0, fp
 80024ec:	9b01      	ldr	r3, [sp, #4]
 80024ee:	4661      	mov	r1, ip
 80024f0:	9100      	str	r1, [sp, #0]
 80024f2:	2802      	cmp	r0, #2
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dmul+0xc4>
 80024f6:	e075      	b.n	80025e4 <__aeabi_dmul+0x1b0>
 80024f8:	2803      	cmp	r0, #3
 80024fa:	d100      	bne.n	80024fe <__aeabi_dmul+0xca>
 80024fc:	e1fe      	b.n	80028fc <__aeabi_dmul+0x4c8>
 80024fe:	2801      	cmp	r0, #1
 8002500:	d000      	beq.n	8002504 <__aeabi_dmul+0xd0>
 8002502:	e12c      	b.n	800275e <__aeabi_dmul+0x32a>
 8002504:	2300      	movs	r3, #0
 8002506:	2700      	movs	r7, #0
 8002508:	2600      	movs	r6, #0
 800250a:	2500      	movs	r5, #0
 800250c:	033f      	lsls	r7, r7, #12
 800250e:	0d2a      	lsrs	r2, r5, #20
 8002510:	0b3f      	lsrs	r7, r7, #12
 8002512:	48b3      	ldr	r0, [pc, #716]	; (80027e0 <__aeabi_dmul+0x3ac>)
 8002514:	0512      	lsls	r2, r2, #20
 8002516:	433a      	orrs	r2, r7
 8002518:	4002      	ands	r2, r0
 800251a:	051b      	lsls	r3, r3, #20
 800251c:	4313      	orrs	r3, r2
 800251e:	9a00      	ldr	r2, [sp, #0]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	07d1      	lsls	r1, r2, #31
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	430b      	orrs	r3, r1
 8002528:	0030      	movs	r0, r6
 800252a:	0019      	movs	r1, r3
 800252c:	b007      	add	sp, #28
 800252e:	bc3c      	pop	{r2, r3, r4, r5}
 8002530:	4690      	mov	r8, r2
 8002532:	4699      	mov	r9, r3
 8002534:	46a2      	mov	sl, r4
 8002536:	46ab      	mov	fp, r5
 8002538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800253a:	465b      	mov	r3, fp
 800253c:	433b      	orrs	r3, r7
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	d100      	bne.n	8002544 <__aeabi_dmul+0x110>
 8002542:	e12f      	b.n	80027a4 <__aeabi_dmul+0x370>
 8002544:	2f00      	cmp	r7, #0
 8002546:	d100      	bne.n	800254a <__aeabi_dmul+0x116>
 8002548:	e1a5      	b.n	8002896 <__aeabi_dmul+0x462>
 800254a:	0038      	movs	r0, r7
 800254c:	f000 fec0 	bl	80032d0 <__clzsi2>
 8002550:	0003      	movs	r3, r0
 8002552:	3b0b      	subs	r3, #11
 8002554:	2b1c      	cmp	r3, #28
 8002556:	dd00      	ble.n	800255a <__aeabi_dmul+0x126>
 8002558:	e196      	b.n	8002888 <__aeabi_dmul+0x454>
 800255a:	221d      	movs	r2, #29
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	465a      	mov	r2, fp
 8002560:	0001      	movs	r1, r0
 8002562:	40da      	lsrs	r2, r3
 8002564:	465e      	mov	r6, fp
 8002566:	3908      	subs	r1, #8
 8002568:	408f      	lsls	r7, r1
 800256a:	0013      	movs	r3, r2
 800256c:	408e      	lsls	r6, r1
 800256e:	433b      	orrs	r3, r7
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	4b9c      	ldr	r3, [pc, #624]	; (80027e4 <__aeabi_dmul+0x3b0>)
 8002574:	2700      	movs	r7, #0
 8002576:	1a1b      	subs	r3, r3, r0
 8002578:	4699      	mov	r9, r3
 800257a:	2300      	movs	r3, #0
 800257c:	469b      	mov	fp, r3
 800257e:	e77d      	b.n	800247c <__aeabi_dmul+0x48>
 8002580:	4641      	mov	r1, r8
 8002582:	4653      	mov	r3, sl
 8002584:	430b      	orrs	r3, r1
 8002586:	4993      	ldr	r1, [pc, #588]	; (80027d4 <__aeabi_dmul+0x3a0>)
 8002588:	468c      	mov	ip, r1
 800258a:	44e1      	add	r9, ip
 800258c:	2b00      	cmp	r3, #0
 800258e:	d000      	beq.n	8002592 <__aeabi_dmul+0x15e>
 8002590:	e11a      	b.n	80027c8 <__aeabi_dmul+0x394>
 8002592:	2202      	movs	r2, #2
 8002594:	2002      	movs	r0, #2
 8002596:	4317      	orrs	r7, r2
 8002598:	2200      	movs	r2, #0
 800259a:	e78c      	b.n	80024b6 <__aeabi_dmul+0x82>
 800259c:	4313      	orrs	r3, r2
 800259e:	d100      	bne.n	80025a2 <__aeabi_dmul+0x16e>
 80025a0:	e10d      	b.n	80027be <__aeabi_dmul+0x38a>
 80025a2:	4643      	mov	r3, r8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d100      	bne.n	80025aa <__aeabi_dmul+0x176>
 80025a8:	e181      	b.n	80028ae <__aeabi_dmul+0x47a>
 80025aa:	4640      	mov	r0, r8
 80025ac:	f000 fe90 	bl	80032d0 <__clzsi2>
 80025b0:	0002      	movs	r2, r0
 80025b2:	3a0b      	subs	r2, #11
 80025b4:	2a1c      	cmp	r2, #28
 80025b6:	dd00      	ble.n	80025ba <__aeabi_dmul+0x186>
 80025b8:	e172      	b.n	80028a0 <__aeabi_dmul+0x46c>
 80025ba:	0001      	movs	r1, r0
 80025bc:	4643      	mov	r3, r8
 80025be:	3908      	subs	r1, #8
 80025c0:	408b      	lsls	r3, r1
 80025c2:	4698      	mov	r8, r3
 80025c4:	231d      	movs	r3, #29
 80025c6:	1a9a      	subs	r2, r3, r2
 80025c8:	4653      	mov	r3, sl
 80025ca:	40d3      	lsrs	r3, r2
 80025cc:	001a      	movs	r2, r3
 80025ce:	4643      	mov	r3, r8
 80025d0:	4313      	orrs	r3, r2
 80025d2:	4652      	mov	r2, sl
 80025d4:	408a      	lsls	r2, r1
 80025d6:	4649      	mov	r1, r9
 80025d8:	1a08      	subs	r0, r1, r0
 80025da:	4982      	ldr	r1, [pc, #520]	; (80027e4 <__aeabi_dmul+0x3b0>)
 80025dc:	4689      	mov	r9, r1
 80025de:	4481      	add	r9, r0
 80025e0:	2000      	movs	r0, #0
 80025e2:	e768      	b.n	80024b6 <__aeabi_dmul+0x82>
 80025e4:	4b7b      	ldr	r3, [pc, #492]	; (80027d4 <__aeabi_dmul+0x3a0>)
 80025e6:	2700      	movs	r7, #0
 80025e8:	2600      	movs	r6, #0
 80025ea:	e78e      	b.n	800250a <__aeabi_dmul+0xd6>
 80025ec:	0c14      	lsrs	r4, r2, #16
 80025ee:	0412      	lsls	r2, r2, #16
 80025f0:	0c12      	lsrs	r2, r2, #16
 80025f2:	0011      	movs	r1, r2
 80025f4:	0c37      	lsrs	r7, r6, #16
 80025f6:	0436      	lsls	r6, r6, #16
 80025f8:	0c35      	lsrs	r5, r6, #16
 80025fa:	4379      	muls	r1, r7
 80025fc:	0028      	movs	r0, r5
 80025fe:	468c      	mov	ip, r1
 8002600:	002e      	movs	r6, r5
 8002602:	4360      	muls	r0, r4
 8002604:	4460      	add	r0, ip
 8002606:	4683      	mov	fp, r0
 8002608:	4356      	muls	r6, r2
 800260a:	0021      	movs	r1, r4
 800260c:	0c30      	lsrs	r0, r6, #16
 800260e:	4680      	mov	r8, r0
 8002610:	4658      	mov	r0, fp
 8002612:	4379      	muls	r1, r7
 8002614:	4440      	add	r0, r8
 8002616:	9102      	str	r1, [sp, #8]
 8002618:	4584      	cmp	ip, r0
 800261a:	d906      	bls.n	800262a <__aeabi_dmul+0x1f6>
 800261c:	4688      	mov	r8, r1
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0249      	lsls	r1, r1, #9
 8002622:	468c      	mov	ip, r1
 8002624:	44e0      	add	r8, ip
 8002626:	4641      	mov	r1, r8
 8002628:	9102      	str	r1, [sp, #8]
 800262a:	0436      	lsls	r6, r6, #16
 800262c:	0c01      	lsrs	r1, r0, #16
 800262e:	0c36      	lsrs	r6, r6, #16
 8002630:	0400      	lsls	r0, r0, #16
 8002632:	468b      	mov	fp, r1
 8002634:	1981      	adds	r1, r0, r6
 8002636:	0c1e      	lsrs	r6, r3, #16
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	9103      	str	r1, [sp, #12]
 800263e:	0019      	movs	r1, r3
 8002640:	4379      	muls	r1, r7
 8002642:	468c      	mov	ip, r1
 8002644:	0028      	movs	r0, r5
 8002646:	4375      	muls	r5, r6
 8002648:	4465      	add	r5, ip
 800264a:	46a8      	mov	r8, r5
 800264c:	4358      	muls	r0, r3
 800264e:	0c05      	lsrs	r5, r0, #16
 8002650:	4445      	add	r5, r8
 8002652:	4377      	muls	r7, r6
 8002654:	42a9      	cmp	r1, r5
 8002656:	d903      	bls.n	8002660 <__aeabi_dmul+0x22c>
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	0249      	lsls	r1, r1, #9
 800265c:	468c      	mov	ip, r1
 800265e:	4467      	add	r7, ip
 8002660:	0c29      	lsrs	r1, r5, #16
 8002662:	468c      	mov	ip, r1
 8002664:	0039      	movs	r1, r7
 8002666:	0400      	lsls	r0, r0, #16
 8002668:	0c00      	lsrs	r0, r0, #16
 800266a:	042d      	lsls	r5, r5, #16
 800266c:	182d      	adds	r5, r5, r0
 800266e:	4461      	add	r1, ip
 8002670:	44ab      	add	fp, r5
 8002672:	9105      	str	r1, [sp, #20]
 8002674:	4659      	mov	r1, fp
 8002676:	9104      	str	r1, [sp, #16]
 8002678:	9901      	ldr	r1, [sp, #4]
 800267a:	040f      	lsls	r7, r1, #16
 800267c:	0c3f      	lsrs	r7, r7, #16
 800267e:	0c08      	lsrs	r0, r1, #16
 8002680:	0039      	movs	r1, r7
 8002682:	4351      	muls	r1, r2
 8002684:	4342      	muls	r2, r0
 8002686:	4690      	mov	r8, r2
 8002688:	0002      	movs	r2, r0
 800268a:	468c      	mov	ip, r1
 800268c:	0c09      	lsrs	r1, r1, #16
 800268e:	468b      	mov	fp, r1
 8002690:	4362      	muls	r2, r4
 8002692:	437c      	muls	r4, r7
 8002694:	4444      	add	r4, r8
 8002696:	445c      	add	r4, fp
 8002698:	45a0      	cmp	r8, r4
 800269a:	d903      	bls.n	80026a4 <__aeabi_dmul+0x270>
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0249      	lsls	r1, r1, #9
 80026a0:	4688      	mov	r8, r1
 80026a2:	4442      	add	r2, r8
 80026a4:	0c21      	lsrs	r1, r4, #16
 80026a6:	4688      	mov	r8, r1
 80026a8:	4661      	mov	r1, ip
 80026aa:	0409      	lsls	r1, r1, #16
 80026ac:	0c09      	lsrs	r1, r1, #16
 80026ae:	468c      	mov	ip, r1
 80026b0:	0039      	movs	r1, r7
 80026b2:	4359      	muls	r1, r3
 80026b4:	4343      	muls	r3, r0
 80026b6:	4370      	muls	r0, r6
 80026b8:	437e      	muls	r6, r7
 80026ba:	0c0f      	lsrs	r7, r1, #16
 80026bc:	18f6      	adds	r6, r6, r3
 80026be:	0424      	lsls	r4, r4, #16
 80026c0:	19be      	adds	r6, r7, r6
 80026c2:	4464      	add	r4, ip
 80026c4:	4442      	add	r2, r8
 80026c6:	468c      	mov	ip, r1
 80026c8:	42b3      	cmp	r3, r6
 80026ca:	d903      	bls.n	80026d4 <__aeabi_dmul+0x2a0>
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	025b      	lsls	r3, r3, #9
 80026d0:	4698      	mov	r8, r3
 80026d2:	4440      	add	r0, r8
 80026d4:	9b02      	ldr	r3, [sp, #8]
 80026d6:	4661      	mov	r1, ip
 80026d8:	4698      	mov	r8, r3
 80026da:	9b04      	ldr	r3, [sp, #16]
 80026dc:	0437      	lsls	r7, r6, #16
 80026de:	4443      	add	r3, r8
 80026e0:	469b      	mov	fp, r3
 80026e2:	45ab      	cmp	fp, r5
 80026e4:	41ad      	sbcs	r5, r5
 80026e6:	426b      	negs	r3, r5
 80026e8:	040d      	lsls	r5, r1, #16
 80026ea:	9905      	ldr	r1, [sp, #20]
 80026ec:	0c2d      	lsrs	r5, r5, #16
 80026ee:	468c      	mov	ip, r1
 80026f0:	197f      	adds	r7, r7, r5
 80026f2:	4467      	add	r7, ip
 80026f4:	18fd      	adds	r5, r7, r3
 80026f6:	46a8      	mov	r8, r5
 80026f8:	465d      	mov	r5, fp
 80026fa:	192d      	adds	r5, r5, r4
 80026fc:	42a5      	cmp	r5, r4
 80026fe:	41a4      	sbcs	r4, r4
 8002700:	4693      	mov	fp, r2
 8002702:	4264      	negs	r4, r4
 8002704:	46a4      	mov	ip, r4
 8002706:	44c3      	add	fp, r8
 8002708:	44dc      	add	ip, fp
 800270a:	428f      	cmp	r7, r1
 800270c:	41bf      	sbcs	r7, r7
 800270e:	4598      	cmp	r8, r3
 8002710:	419b      	sbcs	r3, r3
 8002712:	4593      	cmp	fp, r2
 8002714:	4192      	sbcs	r2, r2
 8002716:	45a4      	cmp	ip, r4
 8002718:	41a4      	sbcs	r4, r4
 800271a:	425b      	negs	r3, r3
 800271c:	427f      	negs	r7, r7
 800271e:	431f      	orrs	r7, r3
 8002720:	0c36      	lsrs	r6, r6, #16
 8002722:	4252      	negs	r2, r2
 8002724:	4264      	negs	r4, r4
 8002726:	19bf      	adds	r7, r7, r6
 8002728:	4322      	orrs	r2, r4
 800272a:	18bf      	adds	r7, r7, r2
 800272c:	4662      	mov	r2, ip
 800272e:	1838      	adds	r0, r7, r0
 8002730:	0243      	lsls	r3, r0, #9
 8002732:	0dd2      	lsrs	r2, r2, #23
 8002734:	9903      	ldr	r1, [sp, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	026a      	lsls	r2, r5, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	1e50      	subs	r0, r2, #1
 800273e:	4182      	sbcs	r2, r0
 8002740:	4661      	mov	r1, ip
 8002742:	0ded      	lsrs	r5, r5, #23
 8002744:	432a      	orrs	r2, r5
 8002746:	024e      	lsls	r6, r1, #9
 8002748:	4332      	orrs	r2, r6
 800274a:	01d9      	lsls	r1, r3, #7
 800274c:	d400      	bmi.n	8002750 <__aeabi_dmul+0x31c>
 800274e:	e0b3      	b.n	80028b8 <__aeabi_dmul+0x484>
 8002750:	2601      	movs	r6, #1
 8002752:	0850      	lsrs	r0, r2, #1
 8002754:	4032      	ands	r2, r6
 8002756:	4302      	orrs	r2, r0
 8002758:	07de      	lsls	r6, r3, #31
 800275a:	4332      	orrs	r2, r6
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	4c22      	ldr	r4, [pc, #136]	; (80027e8 <__aeabi_dmul+0x3b4>)
 8002760:	4454      	add	r4, sl
 8002762:	2c00      	cmp	r4, #0
 8002764:	dd62      	ble.n	800282c <__aeabi_dmul+0x3f8>
 8002766:	0751      	lsls	r1, r2, #29
 8002768:	d009      	beq.n	800277e <__aeabi_dmul+0x34a>
 800276a:	200f      	movs	r0, #15
 800276c:	4010      	ands	r0, r2
 800276e:	2804      	cmp	r0, #4
 8002770:	d005      	beq.n	800277e <__aeabi_dmul+0x34a>
 8002772:	1d10      	adds	r0, r2, #4
 8002774:	4290      	cmp	r0, r2
 8002776:	4192      	sbcs	r2, r2
 8002778:	4252      	negs	r2, r2
 800277a:	189b      	adds	r3, r3, r2
 800277c:	0002      	movs	r2, r0
 800277e:	01d9      	lsls	r1, r3, #7
 8002780:	d504      	bpl.n	800278c <__aeabi_dmul+0x358>
 8002782:	2480      	movs	r4, #128	; 0x80
 8002784:	4819      	ldr	r0, [pc, #100]	; (80027ec <__aeabi_dmul+0x3b8>)
 8002786:	00e4      	lsls	r4, r4, #3
 8002788:	4003      	ands	r3, r0
 800278a:	4454      	add	r4, sl
 800278c:	4818      	ldr	r0, [pc, #96]	; (80027f0 <__aeabi_dmul+0x3bc>)
 800278e:	4284      	cmp	r4, r0
 8002790:	dd00      	ble.n	8002794 <__aeabi_dmul+0x360>
 8002792:	e727      	b.n	80025e4 <__aeabi_dmul+0x1b0>
 8002794:	075e      	lsls	r6, r3, #29
 8002796:	025b      	lsls	r3, r3, #9
 8002798:	08d2      	lsrs	r2, r2, #3
 800279a:	0b1f      	lsrs	r7, r3, #12
 800279c:	0563      	lsls	r3, r4, #21
 800279e:	4316      	orrs	r6, r2
 80027a0:	0d5b      	lsrs	r3, r3, #21
 80027a2:	e6b2      	b.n	800250a <__aeabi_dmul+0xd6>
 80027a4:	2300      	movs	r3, #0
 80027a6:	4699      	mov	r9, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	2704      	movs	r7, #4
 80027ac:	2600      	movs	r6, #0
 80027ae:	469b      	mov	fp, r3
 80027b0:	e664      	b.n	800247c <__aeabi_dmul+0x48>
 80027b2:	2303      	movs	r3, #3
 80027b4:	9701      	str	r7, [sp, #4]
 80027b6:	4681      	mov	r9, r0
 80027b8:	270c      	movs	r7, #12
 80027ba:	469b      	mov	fp, r3
 80027bc:	e65e      	b.n	800247c <__aeabi_dmul+0x48>
 80027be:	2201      	movs	r2, #1
 80027c0:	2001      	movs	r0, #1
 80027c2:	4317      	orrs	r7, r2
 80027c4:	2200      	movs	r2, #0
 80027c6:	e676      	b.n	80024b6 <__aeabi_dmul+0x82>
 80027c8:	2303      	movs	r3, #3
 80027ca:	2003      	movs	r0, #3
 80027cc:	431f      	orrs	r7, r3
 80027ce:	4643      	mov	r3, r8
 80027d0:	e671      	b.n	80024b6 <__aeabi_dmul+0x82>
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	000007ff 	.word	0x000007ff
 80027d8:	fffffc01 	.word	0xfffffc01
 80027dc:	08019e94 	.word	0x08019e94
 80027e0:	800fffff 	.word	0x800fffff
 80027e4:	fffffc0d 	.word	0xfffffc0d
 80027e8:	000003ff 	.word	0x000003ff
 80027ec:	feffffff 	.word	0xfeffffff
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	2300      	movs	r3, #0
 80027f6:	2780      	movs	r7, #128	; 0x80
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	033f      	lsls	r7, r7, #12
 80027fc:	2600      	movs	r6, #0
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <__aeabi_dmul+0x4d8>)
 8002800:	e683      	b.n	800250a <__aeabi_dmul+0xd6>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0032      	movs	r2, r6
 8002806:	46a4      	mov	ip, r4
 8002808:	4658      	mov	r0, fp
 800280a:	e670      	b.n	80024ee <__aeabi_dmul+0xba>
 800280c:	46ac      	mov	ip, r5
 800280e:	e66e      	b.n	80024ee <__aeabi_dmul+0xba>
 8002810:	2780      	movs	r7, #128	; 0x80
 8002812:	9901      	ldr	r1, [sp, #4]
 8002814:	033f      	lsls	r7, r7, #12
 8002816:	4239      	tst	r1, r7
 8002818:	d02d      	beq.n	8002876 <__aeabi_dmul+0x442>
 800281a:	423b      	tst	r3, r7
 800281c:	d12b      	bne.n	8002876 <__aeabi_dmul+0x442>
 800281e:	431f      	orrs	r7, r3
 8002820:	033f      	lsls	r7, r7, #12
 8002822:	0b3f      	lsrs	r7, r7, #12
 8002824:	9500      	str	r5, [sp, #0]
 8002826:	0016      	movs	r6, r2
 8002828:	4b38      	ldr	r3, [pc, #224]	; (800290c <__aeabi_dmul+0x4d8>)
 800282a:	e66e      	b.n	800250a <__aeabi_dmul+0xd6>
 800282c:	2501      	movs	r5, #1
 800282e:	1b2d      	subs	r5, r5, r4
 8002830:	2d38      	cmp	r5, #56	; 0x38
 8002832:	dd00      	ble.n	8002836 <__aeabi_dmul+0x402>
 8002834:	e666      	b.n	8002504 <__aeabi_dmul+0xd0>
 8002836:	2d1f      	cmp	r5, #31
 8002838:	dc40      	bgt.n	80028bc <__aeabi_dmul+0x488>
 800283a:	4835      	ldr	r0, [pc, #212]	; (8002910 <__aeabi_dmul+0x4dc>)
 800283c:	001c      	movs	r4, r3
 800283e:	4450      	add	r0, sl
 8002840:	0016      	movs	r6, r2
 8002842:	4082      	lsls	r2, r0
 8002844:	4084      	lsls	r4, r0
 8002846:	40ee      	lsrs	r6, r5
 8002848:	1e50      	subs	r0, r2, #1
 800284a:	4182      	sbcs	r2, r0
 800284c:	4334      	orrs	r4, r6
 800284e:	4314      	orrs	r4, r2
 8002850:	40eb      	lsrs	r3, r5
 8002852:	0762      	lsls	r2, r4, #29
 8002854:	d009      	beq.n	800286a <__aeabi_dmul+0x436>
 8002856:	220f      	movs	r2, #15
 8002858:	4022      	ands	r2, r4
 800285a:	2a04      	cmp	r2, #4
 800285c:	d005      	beq.n	800286a <__aeabi_dmul+0x436>
 800285e:	0022      	movs	r2, r4
 8002860:	1d14      	adds	r4, r2, #4
 8002862:	4294      	cmp	r4, r2
 8002864:	4180      	sbcs	r0, r0
 8002866:	4240      	negs	r0, r0
 8002868:	181b      	adds	r3, r3, r0
 800286a:	021a      	lsls	r2, r3, #8
 800286c:	d53e      	bpl.n	80028ec <__aeabi_dmul+0x4b8>
 800286e:	2301      	movs	r3, #1
 8002870:	2700      	movs	r7, #0
 8002872:	2600      	movs	r6, #0
 8002874:	e649      	b.n	800250a <__aeabi_dmul+0xd6>
 8002876:	2780      	movs	r7, #128	; 0x80
 8002878:	9b01      	ldr	r3, [sp, #4]
 800287a:	033f      	lsls	r7, r7, #12
 800287c:	431f      	orrs	r7, r3
 800287e:	033f      	lsls	r7, r7, #12
 8002880:	0b3f      	lsrs	r7, r7, #12
 8002882:	9400      	str	r4, [sp, #0]
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <__aeabi_dmul+0x4d8>)
 8002886:	e640      	b.n	800250a <__aeabi_dmul+0xd6>
 8002888:	0003      	movs	r3, r0
 800288a:	465a      	mov	r2, fp
 800288c:	3b28      	subs	r3, #40	; 0x28
 800288e:	409a      	lsls	r2, r3
 8002890:	2600      	movs	r6, #0
 8002892:	9201      	str	r2, [sp, #4]
 8002894:	e66d      	b.n	8002572 <__aeabi_dmul+0x13e>
 8002896:	4658      	mov	r0, fp
 8002898:	f000 fd1a 	bl	80032d0 <__clzsi2>
 800289c:	3020      	adds	r0, #32
 800289e:	e657      	b.n	8002550 <__aeabi_dmul+0x11c>
 80028a0:	0003      	movs	r3, r0
 80028a2:	4652      	mov	r2, sl
 80028a4:	3b28      	subs	r3, #40	; 0x28
 80028a6:	409a      	lsls	r2, r3
 80028a8:	0013      	movs	r3, r2
 80028aa:	2200      	movs	r2, #0
 80028ac:	e693      	b.n	80025d6 <__aeabi_dmul+0x1a2>
 80028ae:	4650      	mov	r0, sl
 80028b0:	f000 fd0e 	bl	80032d0 <__clzsi2>
 80028b4:	3020      	adds	r0, #32
 80028b6:	e67b      	b.n	80025b0 <__aeabi_dmul+0x17c>
 80028b8:	46ca      	mov	sl, r9
 80028ba:	e750      	b.n	800275e <__aeabi_dmul+0x32a>
 80028bc:	201f      	movs	r0, #31
 80028be:	001e      	movs	r6, r3
 80028c0:	4240      	negs	r0, r0
 80028c2:	1b04      	subs	r4, r0, r4
 80028c4:	40e6      	lsrs	r6, r4
 80028c6:	2d20      	cmp	r5, #32
 80028c8:	d003      	beq.n	80028d2 <__aeabi_dmul+0x49e>
 80028ca:	4c12      	ldr	r4, [pc, #72]	; (8002914 <__aeabi_dmul+0x4e0>)
 80028cc:	4454      	add	r4, sl
 80028ce:	40a3      	lsls	r3, r4
 80028d0:	431a      	orrs	r2, r3
 80028d2:	1e50      	subs	r0, r2, #1
 80028d4:	4182      	sbcs	r2, r0
 80028d6:	4332      	orrs	r2, r6
 80028d8:	2607      	movs	r6, #7
 80028da:	2700      	movs	r7, #0
 80028dc:	4016      	ands	r6, r2
 80028de:	d009      	beq.n	80028f4 <__aeabi_dmul+0x4c0>
 80028e0:	200f      	movs	r0, #15
 80028e2:	2300      	movs	r3, #0
 80028e4:	4010      	ands	r0, r2
 80028e6:	0014      	movs	r4, r2
 80028e8:	2804      	cmp	r0, #4
 80028ea:	d1b9      	bne.n	8002860 <__aeabi_dmul+0x42c>
 80028ec:	0022      	movs	r2, r4
 80028ee:	075e      	lsls	r6, r3, #29
 80028f0:	025b      	lsls	r3, r3, #9
 80028f2:	0b1f      	lsrs	r7, r3, #12
 80028f4:	08d2      	lsrs	r2, r2, #3
 80028f6:	4316      	orrs	r6, r2
 80028f8:	2300      	movs	r3, #0
 80028fa:	e606      	b.n	800250a <__aeabi_dmul+0xd6>
 80028fc:	2780      	movs	r7, #128	; 0x80
 80028fe:	033f      	lsls	r7, r7, #12
 8002900:	431f      	orrs	r7, r3
 8002902:	033f      	lsls	r7, r7, #12
 8002904:	0b3f      	lsrs	r7, r7, #12
 8002906:	0016      	movs	r6, r2
 8002908:	4b00      	ldr	r3, [pc, #0]	; (800290c <__aeabi_dmul+0x4d8>)
 800290a:	e5fe      	b.n	800250a <__aeabi_dmul+0xd6>
 800290c:	000007ff 	.word	0x000007ff
 8002910:	0000041e 	.word	0x0000041e
 8002914:	0000043e 	.word	0x0000043e

08002918 <__aeabi_dsub>:
 8002918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291a:	4657      	mov	r7, sl
 800291c:	464e      	mov	r6, r9
 800291e:	4645      	mov	r5, r8
 8002920:	46de      	mov	lr, fp
 8002922:	000c      	movs	r4, r1
 8002924:	0309      	lsls	r1, r1, #12
 8002926:	b5e0      	push	{r5, r6, r7, lr}
 8002928:	0a49      	lsrs	r1, r1, #9
 800292a:	0f46      	lsrs	r6, r0, #29
 800292c:	005f      	lsls	r7, r3, #1
 800292e:	4331      	orrs	r1, r6
 8002930:	031e      	lsls	r6, r3, #12
 8002932:	0fdb      	lsrs	r3, r3, #31
 8002934:	0a76      	lsrs	r6, r6, #9
 8002936:	469b      	mov	fp, r3
 8002938:	0f53      	lsrs	r3, r2, #29
 800293a:	4333      	orrs	r3, r6
 800293c:	4ec8      	ldr	r6, [pc, #800]	; (8002c60 <__aeabi_dsub+0x348>)
 800293e:	0065      	lsls	r5, r4, #1
 8002940:	00c0      	lsls	r0, r0, #3
 8002942:	0fe4      	lsrs	r4, r4, #31
 8002944:	00d2      	lsls	r2, r2, #3
 8002946:	0d6d      	lsrs	r5, r5, #21
 8002948:	46a2      	mov	sl, r4
 800294a:	4681      	mov	r9, r0
 800294c:	0d7f      	lsrs	r7, r7, #21
 800294e:	469c      	mov	ip, r3
 8002950:	4690      	mov	r8, r2
 8002952:	42b7      	cmp	r7, r6
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x40>
 8002956:	e0b9      	b.n	8002acc <__aeabi_dsub+0x1b4>
 8002958:	465b      	mov	r3, fp
 800295a:	2601      	movs	r6, #1
 800295c:	4073      	eors	r3, r6
 800295e:	469b      	mov	fp, r3
 8002960:	1bee      	subs	r6, r5, r7
 8002962:	45a3      	cmp	fp, r4
 8002964:	d100      	bne.n	8002968 <__aeabi_dsub+0x50>
 8002966:	e083      	b.n	8002a70 <__aeabi_dsub+0x158>
 8002968:	2e00      	cmp	r6, #0
 800296a:	dd63      	ble.n	8002a34 <__aeabi_dsub+0x11c>
 800296c:	2f00      	cmp	r7, #0
 800296e:	d000      	beq.n	8002972 <__aeabi_dsub+0x5a>
 8002970:	e0b1      	b.n	8002ad6 <__aeabi_dsub+0x1be>
 8002972:	4663      	mov	r3, ip
 8002974:	4313      	orrs	r3, r2
 8002976:	d100      	bne.n	800297a <__aeabi_dsub+0x62>
 8002978:	e123      	b.n	8002bc2 <__aeabi_dsub+0x2aa>
 800297a:	1e73      	subs	r3, r6, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d000      	beq.n	8002982 <__aeabi_dsub+0x6a>
 8002980:	e1ba      	b.n	8002cf8 <__aeabi_dsub+0x3e0>
 8002982:	1a86      	subs	r6, r0, r2
 8002984:	4663      	mov	r3, ip
 8002986:	42b0      	cmp	r0, r6
 8002988:	4180      	sbcs	r0, r0
 800298a:	2501      	movs	r5, #1
 800298c:	1ac9      	subs	r1, r1, r3
 800298e:	4240      	negs	r0, r0
 8002990:	1a09      	subs	r1, r1, r0
 8002992:	020b      	lsls	r3, r1, #8
 8002994:	d400      	bmi.n	8002998 <__aeabi_dsub+0x80>
 8002996:	e147      	b.n	8002c28 <__aeabi_dsub+0x310>
 8002998:	0249      	lsls	r1, r1, #9
 800299a:	0a4b      	lsrs	r3, r1, #9
 800299c:	4698      	mov	r8, r3
 800299e:	4643      	mov	r3, r8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d100      	bne.n	80029a6 <__aeabi_dsub+0x8e>
 80029a4:	e189      	b.n	8002cba <__aeabi_dsub+0x3a2>
 80029a6:	4640      	mov	r0, r8
 80029a8:	f000 fc92 	bl	80032d0 <__clzsi2>
 80029ac:	0003      	movs	r3, r0
 80029ae:	3b08      	subs	r3, #8
 80029b0:	2b1f      	cmp	r3, #31
 80029b2:	dd00      	ble.n	80029b6 <__aeabi_dsub+0x9e>
 80029b4:	e17c      	b.n	8002cb0 <__aeabi_dsub+0x398>
 80029b6:	2220      	movs	r2, #32
 80029b8:	0030      	movs	r0, r6
 80029ba:	1ad2      	subs	r2, r2, r3
 80029bc:	4641      	mov	r1, r8
 80029be:	40d0      	lsrs	r0, r2
 80029c0:	4099      	lsls	r1, r3
 80029c2:	0002      	movs	r2, r0
 80029c4:	409e      	lsls	r6, r3
 80029c6:	430a      	orrs	r2, r1
 80029c8:	429d      	cmp	r5, r3
 80029ca:	dd00      	ble.n	80029ce <__aeabi_dsub+0xb6>
 80029cc:	e16a      	b.n	8002ca4 <__aeabi_dsub+0x38c>
 80029ce:	1b5d      	subs	r5, r3, r5
 80029d0:	1c6b      	adds	r3, r5, #1
 80029d2:	2b1f      	cmp	r3, #31
 80029d4:	dd00      	ble.n	80029d8 <__aeabi_dsub+0xc0>
 80029d6:	e194      	b.n	8002d02 <__aeabi_dsub+0x3ea>
 80029d8:	2120      	movs	r1, #32
 80029da:	0010      	movs	r0, r2
 80029dc:	0035      	movs	r5, r6
 80029de:	1ac9      	subs	r1, r1, r3
 80029e0:	408e      	lsls	r6, r1
 80029e2:	40da      	lsrs	r2, r3
 80029e4:	4088      	lsls	r0, r1
 80029e6:	40dd      	lsrs	r5, r3
 80029e8:	1e71      	subs	r1, r6, #1
 80029ea:	418e      	sbcs	r6, r1
 80029ec:	0011      	movs	r1, r2
 80029ee:	2207      	movs	r2, #7
 80029f0:	4328      	orrs	r0, r5
 80029f2:	2500      	movs	r5, #0
 80029f4:	4306      	orrs	r6, r0
 80029f6:	4032      	ands	r2, r6
 80029f8:	2a00      	cmp	r2, #0
 80029fa:	d009      	beq.n	8002a10 <__aeabi_dsub+0xf8>
 80029fc:	230f      	movs	r3, #15
 80029fe:	4033      	ands	r3, r6
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d005      	beq.n	8002a10 <__aeabi_dsub+0xf8>
 8002a04:	1d33      	adds	r3, r6, #4
 8002a06:	42b3      	cmp	r3, r6
 8002a08:	41b6      	sbcs	r6, r6
 8002a0a:	4276      	negs	r6, r6
 8002a0c:	1989      	adds	r1, r1, r6
 8002a0e:	001e      	movs	r6, r3
 8002a10:	020b      	lsls	r3, r1, #8
 8002a12:	d400      	bmi.n	8002a16 <__aeabi_dsub+0xfe>
 8002a14:	e23d      	b.n	8002e92 <__aeabi_dsub+0x57a>
 8002a16:	1c6a      	adds	r2, r5, #1
 8002a18:	4b91      	ldr	r3, [pc, #580]	; (8002c60 <__aeabi_dsub+0x348>)
 8002a1a:	0555      	lsls	r5, r2, #21
 8002a1c:	0d6d      	lsrs	r5, r5, #21
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d100      	bne.n	8002a24 <__aeabi_dsub+0x10c>
 8002a22:	e119      	b.n	8002c58 <__aeabi_dsub+0x340>
 8002a24:	4a8f      	ldr	r2, [pc, #572]	; (8002c64 <__aeabi_dsub+0x34c>)
 8002a26:	08f6      	lsrs	r6, r6, #3
 8002a28:	400a      	ands	r2, r1
 8002a2a:	0757      	lsls	r7, r2, #29
 8002a2c:	0252      	lsls	r2, r2, #9
 8002a2e:	4337      	orrs	r7, r6
 8002a30:	0b12      	lsrs	r2, r2, #12
 8002a32:	e09b      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002a34:	2e00      	cmp	r6, #0
 8002a36:	d000      	beq.n	8002a3a <__aeabi_dsub+0x122>
 8002a38:	e0c5      	b.n	8002bc6 <__aeabi_dsub+0x2ae>
 8002a3a:	1c6e      	adds	r6, r5, #1
 8002a3c:	0576      	lsls	r6, r6, #21
 8002a3e:	0d76      	lsrs	r6, r6, #21
 8002a40:	2e01      	cmp	r6, #1
 8002a42:	dc00      	bgt.n	8002a46 <__aeabi_dsub+0x12e>
 8002a44:	e148      	b.n	8002cd8 <__aeabi_dsub+0x3c0>
 8002a46:	4667      	mov	r7, ip
 8002a48:	1a86      	subs	r6, r0, r2
 8002a4a:	1bcb      	subs	r3, r1, r7
 8002a4c:	42b0      	cmp	r0, r6
 8002a4e:	41bf      	sbcs	r7, r7
 8002a50:	427f      	negs	r7, r7
 8002a52:	46b8      	mov	r8, r7
 8002a54:	001f      	movs	r7, r3
 8002a56:	4643      	mov	r3, r8
 8002a58:	1aff      	subs	r7, r7, r3
 8002a5a:	003b      	movs	r3, r7
 8002a5c:	46b8      	mov	r8, r7
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	d500      	bpl.n	8002a64 <__aeabi_dsub+0x14c>
 8002a62:	e15f      	b.n	8002d24 <__aeabi_dsub+0x40c>
 8002a64:	4337      	orrs	r7, r6
 8002a66:	d19a      	bne.n	800299e <__aeabi_dsub+0x86>
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2400      	movs	r4, #0
 8002a6c:	2500      	movs	r5, #0
 8002a6e:	e079      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002a70:	2e00      	cmp	r6, #0
 8002a72:	dc00      	bgt.n	8002a76 <__aeabi_dsub+0x15e>
 8002a74:	e0fa      	b.n	8002c6c <__aeabi_dsub+0x354>
 8002a76:	2f00      	cmp	r7, #0
 8002a78:	d100      	bne.n	8002a7c <__aeabi_dsub+0x164>
 8002a7a:	e08d      	b.n	8002b98 <__aeabi_dsub+0x280>
 8002a7c:	4b78      	ldr	r3, [pc, #480]	; (8002c60 <__aeabi_dsub+0x348>)
 8002a7e:	429d      	cmp	r5, r3
 8002a80:	d067      	beq.n	8002b52 <__aeabi_dsub+0x23a>
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	4667      	mov	r7, ip
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	431f      	orrs	r7, r3
 8002a8a:	46bc      	mov	ip, r7
 8002a8c:	2e38      	cmp	r6, #56	; 0x38
 8002a8e:	dc00      	bgt.n	8002a92 <__aeabi_dsub+0x17a>
 8002a90:	e152      	b.n	8002d38 <__aeabi_dsub+0x420>
 8002a92:	4663      	mov	r3, ip
 8002a94:	4313      	orrs	r3, r2
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	4193      	sbcs	r3, r2
 8002a9a:	181e      	adds	r6, r3, r0
 8002a9c:	4286      	cmp	r6, r0
 8002a9e:	4180      	sbcs	r0, r0
 8002aa0:	4240      	negs	r0, r0
 8002aa2:	1809      	adds	r1, r1, r0
 8002aa4:	020b      	lsls	r3, r1, #8
 8002aa6:	d400      	bmi.n	8002aaa <__aeabi_dsub+0x192>
 8002aa8:	e0be      	b.n	8002c28 <__aeabi_dsub+0x310>
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <__aeabi_dsub+0x348>)
 8002aac:	3501      	adds	r5, #1
 8002aae:	429d      	cmp	r5, r3
 8002ab0:	d100      	bne.n	8002ab4 <__aeabi_dsub+0x19c>
 8002ab2:	e0d2      	b.n	8002c5a <__aeabi_dsub+0x342>
 8002ab4:	4a6b      	ldr	r2, [pc, #428]	; (8002c64 <__aeabi_dsub+0x34c>)
 8002ab6:	0873      	lsrs	r3, r6, #1
 8002ab8:	400a      	ands	r2, r1
 8002aba:	2101      	movs	r1, #1
 8002abc:	400e      	ands	r6, r1
 8002abe:	431e      	orrs	r6, r3
 8002ac0:	0851      	lsrs	r1, r2, #1
 8002ac2:	07d3      	lsls	r3, r2, #31
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	431e      	orrs	r6, r3
 8002ac8:	4032      	ands	r2, r6
 8002aca:	e795      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002acc:	001e      	movs	r6, r3
 8002ace:	4316      	orrs	r6, r2
 8002ad0:	d000      	beq.n	8002ad4 <__aeabi_dsub+0x1bc>
 8002ad2:	e745      	b.n	8002960 <__aeabi_dsub+0x48>
 8002ad4:	e740      	b.n	8002958 <__aeabi_dsub+0x40>
 8002ad6:	4b62      	ldr	r3, [pc, #392]	; (8002c60 <__aeabi_dsub+0x348>)
 8002ad8:	429d      	cmp	r5, r3
 8002ada:	d03a      	beq.n	8002b52 <__aeabi_dsub+0x23a>
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	4667      	mov	r7, ip
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	431f      	orrs	r7, r3
 8002ae4:	46bc      	mov	ip, r7
 8002ae6:	2e38      	cmp	r6, #56	; 0x38
 8002ae8:	dd00      	ble.n	8002aec <__aeabi_dsub+0x1d4>
 8002aea:	e0eb      	b.n	8002cc4 <__aeabi_dsub+0x3ac>
 8002aec:	2e1f      	cmp	r6, #31
 8002aee:	dc00      	bgt.n	8002af2 <__aeabi_dsub+0x1da>
 8002af0:	e13a      	b.n	8002d68 <__aeabi_dsub+0x450>
 8002af2:	0033      	movs	r3, r6
 8002af4:	4667      	mov	r7, ip
 8002af6:	3b20      	subs	r3, #32
 8002af8:	40df      	lsrs	r7, r3
 8002afa:	003b      	movs	r3, r7
 8002afc:	2e20      	cmp	r6, #32
 8002afe:	d005      	beq.n	8002b0c <__aeabi_dsub+0x1f4>
 8002b00:	2740      	movs	r7, #64	; 0x40
 8002b02:	1bbf      	subs	r7, r7, r6
 8002b04:	4666      	mov	r6, ip
 8002b06:	40be      	lsls	r6, r7
 8002b08:	4332      	orrs	r2, r6
 8002b0a:	4690      	mov	r8, r2
 8002b0c:	4646      	mov	r6, r8
 8002b0e:	1e72      	subs	r2, r6, #1
 8002b10:	4196      	sbcs	r6, r2
 8002b12:	4333      	orrs	r3, r6
 8002b14:	e0da      	b.n	8002ccc <__aeabi_dsub+0x3b4>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d100      	bne.n	8002b1c <__aeabi_dsub+0x204>
 8002b1a:	e214      	b.n	8002f46 <__aeabi_dsub+0x62e>
 8002b1c:	4663      	mov	r3, ip
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	d100      	bne.n	8002b24 <__aeabi_dsub+0x20c>
 8002b22:	e168      	b.n	8002df6 <__aeabi_dsub+0x4de>
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	074e      	lsls	r6, r1, #29
 8002b28:	08c0      	lsrs	r0, r0, #3
 8002b2a:	08c9      	lsrs	r1, r1, #3
 8002b2c:	031b      	lsls	r3, r3, #12
 8002b2e:	4306      	orrs	r6, r0
 8002b30:	4219      	tst	r1, r3
 8002b32:	d008      	beq.n	8002b46 <__aeabi_dsub+0x22e>
 8002b34:	4660      	mov	r0, ip
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	4218      	tst	r0, r3
 8002b3a:	d104      	bne.n	8002b46 <__aeabi_dsub+0x22e>
 8002b3c:	4663      	mov	r3, ip
 8002b3e:	0001      	movs	r1, r0
 8002b40:	08d2      	lsrs	r2, r2, #3
 8002b42:	075e      	lsls	r6, r3, #29
 8002b44:	4316      	orrs	r6, r2
 8002b46:	00f3      	lsls	r3, r6, #3
 8002b48:	4699      	mov	r9, r3
 8002b4a:	00c9      	lsls	r1, r1, #3
 8002b4c:	0f72      	lsrs	r2, r6, #29
 8002b4e:	4d44      	ldr	r5, [pc, #272]	; (8002c60 <__aeabi_dsub+0x348>)
 8002b50:	4311      	orrs	r1, r2
 8002b52:	464b      	mov	r3, r9
 8002b54:	08de      	lsrs	r6, r3, #3
 8002b56:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <__aeabi_dsub+0x348>)
 8002b58:	074f      	lsls	r7, r1, #29
 8002b5a:	4337      	orrs	r7, r6
 8002b5c:	08ca      	lsrs	r2, r1, #3
 8002b5e:	429d      	cmp	r5, r3
 8002b60:	d100      	bne.n	8002b64 <__aeabi_dsub+0x24c>
 8002b62:	e06e      	b.n	8002c42 <__aeabi_dsub+0x32a>
 8002b64:	0312      	lsls	r2, r2, #12
 8002b66:	056d      	lsls	r5, r5, #21
 8002b68:	0b12      	lsrs	r2, r2, #12
 8002b6a:	0d6d      	lsrs	r5, r5, #21
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	0312      	lsls	r2, r2, #12
 8002b70:	0b13      	lsrs	r3, r2, #12
 8002b72:	0d0a      	lsrs	r2, r1, #20
 8002b74:	0512      	lsls	r2, r2, #20
 8002b76:	431a      	orrs	r2, r3
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <__aeabi_dsub+0x350>)
 8002b7a:	052d      	lsls	r5, r5, #20
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	432b      	orrs	r3, r5
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	07e4      	lsls	r4, r4, #31
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	4323      	orrs	r3, r4
 8002b88:	0038      	movs	r0, r7
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	bc3c      	pop	{r2, r3, r4, r5}
 8002b8e:	4690      	mov	r8, r2
 8002b90:	4699      	mov	r9, r3
 8002b92:	46a2      	mov	sl, r4
 8002b94:	46ab      	mov	fp, r5
 8002b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b98:	4663      	mov	r3, ip
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	d011      	beq.n	8002bc2 <__aeabi_dsub+0x2aa>
 8002b9e:	1e73      	subs	r3, r6, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d000      	beq.n	8002ba6 <__aeabi_dsub+0x28e>
 8002ba4:	e107      	b.n	8002db6 <__aeabi_dsub+0x49e>
 8002ba6:	1886      	adds	r6, r0, r2
 8002ba8:	4286      	cmp	r6, r0
 8002baa:	4180      	sbcs	r0, r0
 8002bac:	4461      	add	r1, ip
 8002bae:	4240      	negs	r0, r0
 8002bb0:	1809      	adds	r1, r1, r0
 8002bb2:	2501      	movs	r5, #1
 8002bb4:	020b      	lsls	r3, r1, #8
 8002bb6:	d537      	bpl.n	8002c28 <__aeabi_dsub+0x310>
 8002bb8:	2502      	movs	r5, #2
 8002bba:	e77b      	b.n	8002ab4 <__aeabi_dsub+0x19c>
 8002bbc:	003e      	movs	r6, r7
 8002bbe:	4661      	mov	r1, ip
 8002bc0:	4691      	mov	r9, r2
 8002bc2:	0035      	movs	r5, r6
 8002bc4:	e7c5      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002bc6:	465c      	mov	r4, fp
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	d000      	beq.n	8002bce <__aeabi_dsub+0x2b6>
 8002bcc:	e0e1      	b.n	8002d92 <__aeabi_dsub+0x47a>
 8002bce:	000b      	movs	r3, r1
 8002bd0:	4303      	orrs	r3, r0
 8002bd2:	d0f3      	beq.n	8002bbc <__aeabi_dsub+0x2a4>
 8002bd4:	1c73      	adds	r3, r6, #1
 8002bd6:	d100      	bne.n	8002bda <__aeabi_dsub+0x2c2>
 8002bd8:	e1ac      	b.n	8002f34 <__aeabi_dsub+0x61c>
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <__aeabi_dsub+0x348>)
 8002bdc:	429f      	cmp	r7, r3
 8002bde:	d100      	bne.n	8002be2 <__aeabi_dsub+0x2ca>
 8002be0:	e13a      	b.n	8002e58 <__aeabi_dsub+0x540>
 8002be2:	43f3      	mvns	r3, r6
 8002be4:	2b38      	cmp	r3, #56	; 0x38
 8002be6:	dd00      	ble.n	8002bea <__aeabi_dsub+0x2d2>
 8002be8:	e16f      	b.n	8002eca <__aeabi_dsub+0x5b2>
 8002bea:	2b1f      	cmp	r3, #31
 8002bec:	dd00      	ble.n	8002bf0 <__aeabi_dsub+0x2d8>
 8002bee:	e18c      	b.n	8002f0a <__aeabi_dsub+0x5f2>
 8002bf0:	2520      	movs	r5, #32
 8002bf2:	000e      	movs	r6, r1
 8002bf4:	1aed      	subs	r5, r5, r3
 8002bf6:	40ae      	lsls	r6, r5
 8002bf8:	46b0      	mov	r8, r6
 8002bfa:	0006      	movs	r6, r0
 8002bfc:	46aa      	mov	sl, r5
 8002bfe:	40de      	lsrs	r6, r3
 8002c00:	4645      	mov	r5, r8
 8002c02:	4335      	orrs	r5, r6
 8002c04:	002e      	movs	r6, r5
 8002c06:	4655      	mov	r5, sl
 8002c08:	40d9      	lsrs	r1, r3
 8002c0a:	40a8      	lsls	r0, r5
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	1e45      	subs	r5, r0, #1
 8002c10:	41a8      	sbcs	r0, r5
 8002c12:	1a5b      	subs	r3, r3, r1
 8002c14:	469c      	mov	ip, r3
 8002c16:	4330      	orrs	r0, r6
 8002c18:	1a16      	subs	r6, r2, r0
 8002c1a:	42b2      	cmp	r2, r6
 8002c1c:	4192      	sbcs	r2, r2
 8002c1e:	4663      	mov	r3, ip
 8002c20:	4252      	negs	r2, r2
 8002c22:	1a99      	subs	r1, r3, r2
 8002c24:	003d      	movs	r5, r7
 8002c26:	e6b4      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002c28:	2207      	movs	r2, #7
 8002c2a:	4032      	ands	r2, r6
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	d000      	beq.n	8002c32 <__aeabi_dsub+0x31a>
 8002c30:	e6e4      	b.n	80029fc <__aeabi_dsub+0xe4>
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <__aeabi_dsub+0x348>)
 8002c34:	08f6      	lsrs	r6, r6, #3
 8002c36:	074f      	lsls	r7, r1, #29
 8002c38:	4337      	orrs	r7, r6
 8002c3a:	08ca      	lsrs	r2, r1, #3
 8002c3c:	429d      	cmp	r5, r3
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x32a>
 8002c40:	e790      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002c42:	003b      	movs	r3, r7
 8002c44:	4313      	orrs	r3, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x332>
 8002c48:	e1a6      	b.n	8002f98 <__aeabi_dsub+0x680>
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	031b      	lsls	r3, r3, #12
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	0312      	lsls	r2, r2, #12
 8002c52:	0b12      	lsrs	r2, r2, #12
 8002c54:	4d02      	ldr	r5, [pc, #8]	; (8002c60 <__aeabi_dsub+0x348>)
 8002c56:	e789      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002c58:	0015      	movs	r5, r2
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2700      	movs	r7, #0
 8002c5e:	e785      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002c60:	000007ff 	.word	0x000007ff
 8002c64:	ff7fffff 	.word	0xff7fffff
 8002c68:	800fffff 	.word	0x800fffff
 8002c6c:	2e00      	cmp	r6, #0
 8002c6e:	d000      	beq.n	8002c72 <__aeabi_dsub+0x35a>
 8002c70:	e0c7      	b.n	8002e02 <__aeabi_dsub+0x4ea>
 8002c72:	1c6b      	adds	r3, r5, #1
 8002c74:	055e      	lsls	r6, r3, #21
 8002c76:	0d76      	lsrs	r6, r6, #21
 8002c78:	2e01      	cmp	r6, #1
 8002c7a:	dc00      	bgt.n	8002c7e <__aeabi_dsub+0x366>
 8002c7c:	e0f0      	b.n	8002e60 <__aeabi_dsub+0x548>
 8002c7e:	4dc8      	ldr	r5, [pc, #800]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002c80:	42ab      	cmp	r3, r5
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x36e>
 8002c84:	e0b9      	b.n	8002dfa <__aeabi_dsub+0x4e2>
 8002c86:	1885      	adds	r5, r0, r2
 8002c88:	000a      	movs	r2, r1
 8002c8a:	4285      	cmp	r5, r0
 8002c8c:	4189      	sbcs	r1, r1
 8002c8e:	4462      	add	r2, ip
 8002c90:	4249      	negs	r1, r1
 8002c92:	1851      	adds	r1, r2, r1
 8002c94:	2207      	movs	r2, #7
 8002c96:	07ce      	lsls	r6, r1, #31
 8002c98:	086d      	lsrs	r5, r5, #1
 8002c9a:	432e      	orrs	r6, r5
 8002c9c:	0849      	lsrs	r1, r1, #1
 8002c9e:	4032      	ands	r2, r6
 8002ca0:	001d      	movs	r5, r3
 8002ca2:	e6a9      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002ca4:	49bf      	ldr	r1, [pc, #764]	; (8002fa4 <__aeabi_dsub+0x68c>)
 8002ca6:	1aed      	subs	r5, r5, r3
 8002ca8:	4011      	ands	r1, r2
 8002caa:	2207      	movs	r2, #7
 8002cac:	4032      	ands	r2, r6
 8002cae:	e6a3      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002cb0:	0032      	movs	r2, r6
 8002cb2:	3828      	subs	r0, #40	; 0x28
 8002cb4:	4082      	lsls	r2, r0
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	e686      	b.n	80029c8 <__aeabi_dsub+0xb0>
 8002cba:	0030      	movs	r0, r6
 8002cbc:	f000 fb08 	bl	80032d0 <__clzsi2>
 8002cc0:	3020      	adds	r0, #32
 8002cc2:	e673      	b.n	80029ac <__aeabi_dsub+0x94>
 8002cc4:	4663      	mov	r3, ip
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	4193      	sbcs	r3, r2
 8002ccc:	1ac6      	subs	r6, r0, r3
 8002cce:	42b0      	cmp	r0, r6
 8002cd0:	4180      	sbcs	r0, r0
 8002cd2:	4240      	negs	r0, r0
 8002cd4:	1a09      	subs	r1, r1, r0
 8002cd6:	e65c      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002cd8:	000e      	movs	r6, r1
 8002cda:	4667      	mov	r7, ip
 8002cdc:	4306      	orrs	r6, r0
 8002cde:	4317      	orrs	r7, r2
 8002ce0:	2d00      	cmp	r5, #0
 8002ce2:	d15e      	bne.n	8002da2 <__aeabi_dsub+0x48a>
 8002ce4:	2e00      	cmp	r6, #0
 8002ce6:	d000      	beq.n	8002cea <__aeabi_dsub+0x3d2>
 8002ce8:	e0f3      	b.n	8002ed2 <__aeabi_dsub+0x5ba>
 8002cea:	2f00      	cmp	r7, #0
 8002cec:	d100      	bne.n	8002cf0 <__aeabi_dsub+0x3d8>
 8002cee:	e11e      	b.n	8002f2e <__aeabi_dsub+0x616>
 8002cf0:	465c      	mov	r4, fp
 8002cf2:	4661      	mov	r1, ip
 8002cf4:	4691      	mov	r9, r2
 8002cf6:	e72c      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002cf8:	4fa9      	ldr	r7, [pc, #676]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002cfa:	42be      	cmp	r6, r7
 8002cfc:	d07b      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002cfe:	001e      	movs	r6, r3
 8002d00:	e6f1      	b.n	8002ae6 <__aeabi_dsub+0x1ce>
 8002d02:	0010      	movs	r0, r2
 8002d04:	3d1f      	subs	r5, #31
 8002d06:	40e8      	lsrs	r0, r5
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d003      	beq.n	8002d14 <__aeabi_dsub+0x3fc>
 8002d0c:	2140      	movs	r1, #64	; 0x40
 8002d0e:	1acb      	subs	r3, r1, r3
 8002d10:	409a      	lsls	r2, r3
 8002d12:	4316      	orrs	r6, r2
 8002d14:	1e73      	subs	r3, r6, #1
 8002d16:	419e      	sbcs	r6, r3
 8002d18:	2207      	movs	r2, #7
 8002d1a:	4306      	orrs	r6, r0
 8002d1c:	4032      	ands	r2, r6
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2500      	movs	r5, #0
 8002d22:	e783      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002d24:	1a16      	subs	r6, r2, r0
 8002d26:	4663      	mov	r3, ip
 8002d28:	42b2      	cmp	r2, r6
 8002d2a:	4180      	sbcs	r0, r0
 8002d2c:	1a59      	subs	r1, r3, r1
 8002d2e:	4240      	negs	r0, r0
 8002d30:	1a0b      	subs	r3, r1, r0
 8002d32:	4698      	mov	r8, r3
 8002d34:	465c      	mov	r4, fp
 8002d36:	e632      	b.n	800299e <__aeabi_dsub+0x86>
 8002d38:	2e1f      	cmp	r6, #31
 8002d3a:	dd00      	ble.n	8002d3e <__aeabi_dsub+0x426>
 8002d3c:	e0ab      	b.n	8002e96 <__aeabi_dsub+0x57e>
 8002d3e:	2720      	movs	r7, #32
 8002d40:	1bbb      	subs	r3, r7, r6
 8002d42:	469a      	mov	sl, r3
 8002d44:	4663      	mov	r3, ip
 8002d46:	4657      	mov	r7, sl
 8002d48:	40bb      	lsls	r3, r7
 8002d4a:	4699      	mov	r9, r3
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	464f      	mov	r7, r9
 8002d50:	40f3      	lsrs	r3, r6
 8002d52:	431f      	orrs	r7, r3
 8002d54:	003b      	movs	r3, r7
 8002d56:	4657      	mov	r7, sl
 8002d58:	40ba      	lsls	r2, r7
 8002d5a:	1e57      	subs	r7, r2, #1
 8002d5c:	41ba      	sbcs	r2, r7
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	4662      	mov	r2, ip
 8002d62:	40f2      	lsrs	r2, r6
 8002d64:	1889      	adds	r1, r1, r2
 8002d66:	e698      	b.n	8002a9a <__aeabi_dsub+0x182>
 8002d68:	2720      	movs	r7, #32
 8002d6a:	1bbb      	subs	r3, r7, r6
 8002d6c:	469a      	mov	sl, r3
 8002d6e:	4663      	mov	r3, ip
 8002d70:	4657      	mov	r7, sl
 8002d72:	40bb      	lsls	r3, r7
 8002d74:	4699      	mov	r9, r3
 8002d76:	0013      	movs	r3, r2
 8002d78:	464f      	mov	r7, r9
 8002d7a:	40f3      	lsrs	r3, r6
 8002d7c:	431f      	orrs	r7, r3
 8002d7e:	003b      	movs	r3, r7
 8002d80:	4657      	mov	r7, sl
 8002d82:	40ba      	lsls	r2, r7
 8002d84:	1e57      	subs	r7, r2, #1
 8002d86:	41ba      	sbcs	r2, r7
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	4662      	mov	r2, ip
 8002d8c:	40f2      	lsrs	r2, r6
 8002d8e:	1a89      	subs	r1, r1, r2
 8002d90:	e79c      	b.n	8002ccc <__aeabi_dsub+0x3b4>
 8002d92:	4b83      	ldr	r3, [pc, #524]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002d94:	429f      	cmp	r7, r3
 8002d96:	d05f      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002d98:	2580      	movs	r5, #128	; 0x80
 8002d9a:	042d      	lsls	r5, r5, #16
 8002d9c:	4273      	negs	r3, r6
 8002d9e:	4329      	orrs	r1, r5
 8002da0:	e720      	b.n	8002be4 <__aeabi_dsub+0x2cc>
 8002da2:	2e00      	cmp	r6, #0
 8002da4:	d10c      	bne.n	8002dc0 <__aeabi_dsub+0x4a8>
 8002da6:	2f00      	cmp	r7, #0
 8002da8:	d100      	bne.n	8002dac <__aeabi_dsub+0x494>
 8002daa:	e0d0      	b.n	8002f4e <__aeabi_dsub+0x636>
 8002dac:	465c      	mov	r4, fp
 8002dae:	4661      	mov	r1, ip
 8002db0:	4691      	mov	r9, r2
 8002db2:	4d7b      	ldr	r5, [pc, #492]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002db4:	e6cd      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002db6:	4f7a      	ldr	r7, [pc, #488]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002db8:	42be      	cmp	r6, r7
 8002dba:	d01c      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002dbc:	001e      	movs	r6, r3
 8002dbe:	e665      	b.n	8002a8c <__aeabi_dsub+0x174>
 8002dc0:	2f00      	cmp	r7, #0
 8002dc2:	d018      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002dc4:	08c0      	lsrs	r0, r0, #3
 8002dc6:	074e      	lsls	r6, r1, #29
 8002dc8:	4306      	orrs	r6, r0
 8002dca:	2080      	movs	r0, #128	; 0x80
 8002dcc:	08c9      	lsrs	r1, r1, #3
 8002dce:	0300      	lsls	r0, r0, #12
 8002dd0:	4201      	tst	r1, r0
 8002dd2:	d008      	beq.n	8002de6 <__aeabi_dsub+0x4ce>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	08dc      	lsrs	r4, r3, #3
 8002dd8:	4204      	tst	r4, r0
 8002dda:	d104      	bne.n	8002de6 <__aeabi_dsub+0x4ce>
 8002ddc:	0021      	movs	r1, r4
 8002dde:	46da      	mov	sl, fp
 8002de0:	08d2      	lsrs	r2, r2, #3
 8002de2:	075e      	lsls	r6, r3, #29
 8002de4:	4316      	orrs	r6, r2
 8002de6:	00f3      	lsls	r3, r6, #3
 8002de8:	4699      	mov	r9, r3
 8002dea:	2401      	movs	r4, #1
 8002dec:	4653      	mov	r3, sl
 8002dee:	00c9      	lsls	r1, r1, #3
 8002df0:	0f72      	lsrs	r2, r6, #29
 8002df2:	4311      	orrs	r1, r2
 8002df4:	401c      	ands	r4, r3
 8002df6:	4d6a      	ldr	r5, [pc, #424]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002df8:	e6ab      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002dfa:	001d      	movs	r5, r3
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2700      	movs	r7, #0
 8002e00:	e6b4      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002e02:	2d00      	cmp	r5, #0
 8002e04:	d159      	bne.n	8002eba <__aeabi_dsub+0x5a2>
 8002e06:	000b      	movs	r3, r1
 8002e08:	4303      	orrs	r3, r0
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x4f6>
 8002e0c:	e6d6      	b.n	8002bbc <__aeabi_dsub+0x2a4>
 8002e0e:	1c73      	adds	r3, r6, #1
 8002e10:	d100      	bne.n	8002e14 <__aeabi_dsub+0x4fc>
 8002e12:	e0b2      	b.n	8002f7a <__aeabi_dsub+0x662>
 8002e14:	4b62      	ldr	r3, [pc, #392]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002e16:	429f      	cmp	r7, r3
 8002e18:	d01e      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002e1a:	43f3      	mvns	r3, r6
 8002e1c:	2b38      	cmp	r3, #56	; 0x38
 8002e1e:	dc6f      	bgt.n	8002f00 <__aeabi_dsub+0x5e8>
 8002e20:	2b1f      	cmp	r3, #31
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x50e>
 8002e24:	e097      	b.n	8002f56 <__aeabi_dsub+0x63e>
 8002e26:	2520      	movs	r5, #32
 8002e28:	000e      	movs	r6, r1
 8002e2a:	1aed      	subs	r5, r5, r3
 8002e2c:	40ae      	lsls	r6, r5
 8002e2e:	46b0      	mov	r8, r6
 8002e30:	0006      	movs	r6, r0
 8002e32:	46aa      	mov	sl, r5
 8002e34:	40de      	lsrs	r6, r3
 8002e36:	4645      	mov	r5, r8
 8002e38:	4335      	orrs	r5, r6
 8002e3a:	002e      	movs	r6, r5
 8002e3c:	4655      	mov	r5, sl
 8002e3e:	40a8      	lsls	r0, r5
 8002e40:	40d9      	lsrs	r1, r3
 8002e42:	1e45      	subs	r5, r0, #1
 8002e44:	41a8      	sbcs	r0, r5
 8002e46:	448c      	add	ip, r1
 8002e48:	4306      	orrs	r6, r0
 8002e4a:	18b6      	adds	r6, r6, r2
 8002e4c:	4296      	cmp	r6, r2
 8002e4e:	4192      	sbcs	r2, r2
 8002e50:	4251      	negs	r1, r2
 8002e52:	4461      	add	r1, ip
 8002e54:	003d      	movs	r5, r7
 8002e56:	e625      	b.n	8002aa4 <__aeabi_dsub+0x18c>
 8002e58:	003d      	movs	r5, r7
 8002e5a:	4661      	mov	r1, ip
 8002e5c:	4691      	mov	r9, r2
 8002e5e:	e678      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e60:	000b      	movs	r3, r1
 8002e62:	4303      	orrs	r3, r0
 8002e64:	2d00      	cmp	r5, #0
 8002e66:	d000      	beq.n	8002e6a <__aeabi_dsub+0x552>
 8002e68:	e655      	b.n	8002b16 <__aeabi_dsub+0x1fe>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f5      	beq.n	8002e5a <__aeabi_dsub+0x542>
 8002e6e:	4663      	mov	r3, ip
 8002e70:	4313      	orrs	r3, r2
 8002e72:	d100      	bne.n	8002e76 <__aeabi_dsub+0x55e>
 8002e74:	e66d      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e76:	1886      	adds	r6, r0, r2
 8002e78:	4286      	cmp	r6, r0
 8002e7a:	4180      	sbcs	r0, r0
 8002e7c:	4461      	add	r1, ip
 8002e7e:	4240      	negs	r0, r0
 8002e80:	1809      	adds	r1, r1, r0
 8002e82:	2200      	movs	r2, #0
 8002e84:	020b      	lsls	r3, r1, #8
 8002e86:	d400      	bmi.n	8002e8a <__aeabi_dsub+0x572>
 8002e88:	e6d0      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <__aeabi_dsub+0x68c>)
 8002e8c:	3501      	adds	r5, #1
 8002e8e:	4019      	ands	r1, r3
 8002e90:	e5b2      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002e92:	46b1      	mov	r9, r6
 8002e94:	e65d      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e96:	0033      	movs	r3, r6
 8002e98:	4667      	mov	r7, ip
 8002e9a:	3b20      	subs	r3, #32
 8002e9c:	40df      	lsrs	r7, r3
 8002e9e:	003b      	movs	r3, r7
 8002ea0:	2e20      	cmp	r6, #32
 8002ea2:	d005      	beq.n	8002eb0 <__aeabi_dsub+0x598>
 8002ea4:	2740      	movs	r7, #64	; 0x40
 8002ea6:	1bbf      	subs	r7, r7, r6
 8002ea8:	4666      	mov	r6, ip
 8002eaa:	40be      	lsls	r6, r7
 8002eac:	4332      	orrs	r2, r6
 8002eae:	4690      	mov	r8, r2
 8002eb0:	4646      	mov	r6, r8
 8002eb2:	1e72      	subs	r2, r6, #1
 8002eb4:	4196      	sbcs	r6, r2
 8002eb6:	4333      	orrs	r3, r6
 8002eb8:	e5ef      	b.n	8002a9a <__aeabi_dsub+0x182>
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002ebc:	429f      	cmp	r7, r3
 8002ebe:	d0cb      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002ec0:	2580      	movs	r5, #128	; 0x80
 8002ec2:	042d      	lsls	r5, r5, #16
 8002ec4:	4273      	negs	r3, r6
 8002ec6:	4329      	orrs	r1, r5
 8002ec8:	e7a8      	b.n	8002e1c <__aeabi_dsub+0x504>
 8002eca:	4308      	orrs	r0, r1
 8002ecc:	1e41      	subs	r1, r0, #1
 8002ece:	4188      	sbcs	r0, r1
 8002ed0:	e6a2      	b.n	8002c18 <__aeabi_dsub+0x300>
 8002ed2:	2f00      	cmp	r7, #0
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x5c0>
 8002ed6:	e63c      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a86      	subs	r6, r0, r2
 8002edc:	1acf      	subs	r7, r1, r3
 8002ede:	42b0      	cmp	r0, r6
 8002ee0:	419b      	sbcs	r3, r3
 8002ee2:	425b      	negs	r3, r3
 8002ee4:	1afb      	subs	r3, r7, r3
 8002ee6:	4698      	mov	r8, r3
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	d54e      	bpl.n	8002f8a <__aeabi_dsub+0x672>
 8002eec:	1a16      	subs	r6, r2, r0
 8002eee:	4663      	mov	r3, ip
 8002ef0:	42b2      	cmp	r2, r6
 8002ef2:	4192      	sbcs	r2, r2
 8002ef4:	1a59      	subs	r1, r3, r1
 8002ef6:	4252      	negs	r2, r2
 8002ef8:	1a89      	subs	r1, r1, r2
 8002efa:	465c      	mov	r4, fp
 8002efc:	2200      	movs	r2, #0
 8002efe:	e57b      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002f00:	4301      	orrs	r1, r0
 8002f02:	000e      	movs	r6, r1
 8002f04:	1e71      	subs	r1, r6, #1
 8002f06:	418e      	sbcs	r6, r1
 8002f08:	e79f      	b.n	8002e4a <__aeabi_dsub+0x532>
 8002f0a:	001d      	movs	r5, r3
 8002f0c:	000e      	movs	r6, r1
 8002f0e:	3d20      	subs	r5, #32
 8002f10:	40ee      	lsrs	r6, r5
 8002f12:	46b0      	mov	r8, r6
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d004      	beq.n	8002f22 <__aeabi_dsub+0x60a>
 8002f18:	2540      	movs	r5, #64	; 0x40
 8002f1a:	1aeb      	subs	r3, r5, r3
 8002f1c:	4099      	lsls	r1, r3
 8002f1e:	4308      	orrs	r0, r1
 8002f20:	4681      	mov	r9, r0
 8002f22:	4648      	mov	r0, r9
 8002f24:	4643      	mov	r3, r8
 8002f26:	1e41      	subs	r1, r0, #1
 8002f28:	4188      	sbcs	r0, r1
 8002f2a:	4318      	orrs	r0, r3
 8002f2c:	e674      	b.n	8002c18 <__aeabi_dsub+0x300>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2400      	movs	r4, #0
 8002f32:	e617      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002f34:	1a16      	subs	r6, r2, r0
 8002f36:	4663      	mov	r3, ip
 8002f38:	42b2      	cmp	r2, r6
 8002f3a:	4192      	sbcs	r2, r2
 8002f3c:	1a59      	subs	r1, r3, r1
 8002f3e:	4252      	negs	r2, r2
 8002f40:	1a89      	subs	r1, r1, r2
 8002f42:	003d      	movs	r5, r7
 8002f44:	e525      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002f46:	4661      	mov	r1, ip
 8002f48:	4691      	mov	r9, r2
 8002f4a:	4d15      	ldr	r5, [pc, #84]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002f4c:	e601      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	2400      	movs	r4, #0
 8002f52:	0312      	lsls	r2, r2, #12
 8002f54:	e679      	b.n	8002c4a <__aeabi_dsub+0x332>
 8002f56:	001d      	movs	r5, r3
 8002f58:	000e      	movs	r6, r1
 8002f5a:	3d20      	subs	r5, #32
 8002f5c:	40ee      	lsrs	r6, r5
 8002f5e:	46b0      	mov	r8, r6
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d004      	beq.n	8002f6e <__aeabi_dsub+0x656>
 8002f64:	2540      	movs	r5, #64	; 0x40
 8002f66:	1aeb      	subs	r3, r5, r3
 8002f68:	4099      	lsls	r1, r3
 8002f6a:	4308      	orrs	r0, r1
 8002f6c:	4681      	mov	r9, r0
 8002f6e:	464e      	mov	r6, r9
 8002f70:	4643      	mov	r3, r8
 8002f72:	1e71      	subs	r1, r6, #1
 8002f74:	418e      	sbcs	r6, r1
 8002f76:	431e      	orrs	r6, r3
 8002f78:	e767      	b.n	8002e4a <__aeabi_dsub+0x532>
 8002f7a:	1886      	adds	r6, r0, r2
 8002f7c:	4296      	cmp	r6, r2
 8002f7e:	419b      	sbcs	r3, r3
 8002f80:	4461      	add	r1, ip
 8002f82:	425b      	negs	r3, r3
 8002f84:	18c9      	adds	r1, r1, r3
 8002f86:	003d      	movs	r5, r7
 8002f88:	e58c      	b.n	8002aa4 <__aeabi_dsub+0x18c>
 8002f8a:	4647      	mov	r7, r8
 8002f8c:	4337      	orrs	r7, r6
 8002f8e:	d0ce      	beq.n	8002f2e <__aeabi_dsub+0x616>
 8002f90:	2207      	movs	r2, #7
 8002f92:	4641      	mov	r1, r8
 8002f94:	4032      	ands	r2, r6
 8002f96:	e649      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002f98:	2700      	movs	r7, #0
 8002f9a:	003a      	movs	r2, r7
 8002f9c:	e5e6      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	000007ff 	.word	0x000007ff
 8002fa4:	ff7fffff 	.word	0xff7fffff

08002fa8 <__aeabi_dcmpun>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4e0c      	ldr	r6, [pc, #48]	; (8002fdc <__aeabi_dcmpun+0x34>)
 8002fac:	030d      	lsls	r5, r1, #12
 8002fae:	031c      	lsls	r4, r3, #12
 8002fb0:	0049      	lsls	r1, r1, #1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	0b2d      	lsrs	r5, r5, #12
 8002fb6:	0d49      	lsrs	r1, r1, #21
 8002fb8:	0b24      	lsrs	r4, r4, #12
 8002fba:	0d5b      	lsrs	r3, r3, #21
 8002fbc:	42b1      	cmp	r1, r6
 8002fbe:	d008      	beq.n	8002fd2 <__aeabi_dcmpun+0x2a>
 8002fc0:	4906      	ldr	r1, [pc, #24]	; (8002fdc <__aeabi_dcmpun+0x34>)
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	428b      	cmp	r3, r1
 8002fc6:	d103      	bne.n	8002fd0 <__aeabi_dcmpun+0x28>
 8002fc8:	4314      	orrs	r4, r2
 8002fca:	0020      	movs	r0, r4
 8002fcc:	1e44      	subs	r4, r0, #1
 8002fce:	41a0      	sbcs	r0, r4
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	4305      	orrs	r5, r0
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	2d00      	cmp	r5, #0
 8002fd8:	d1fa      	bne.n	8002fd0 <__aeabi_dcmpun+0x28>
 8002fda:	e7f1      	b.n	8002fc0 <__aeabi_dcmpun+0x18>
 8002fdc:	000007ff 	.word	0x000007ff

08002fe0 <__aeabi_d2iz>:
 8002fe0:	b530      	push	{r4, r5, lr}
 8002fe2:	4d14      	ldr	r5, [pc, #80]	; (8003034 <__aeabi_d2iz+0x54>)
 8002fe4:	030a      	lsls	r2, r1, #12
 8002fe6:	004b      	lsls	r3, r1, #1
 8002fe8:	0b12      	lsrs	r2, r2, #12
 8002fea:	0d5b      	lsrs	r3, r3, #21
 8002fec:	0fc9      	lsrs	r1, r1, #31
 8002fee:	2400      	movs	r4, #0
 8002ff0:	42ab      	cmp	r3, r5
 8002ff2:	dd11      	ble.n	8003018 <__aeabi_d2iz+0x38>
 8002ff4:	4c10      	ldr	r4, [pc, #64]	; (8003038 <__aeabi_d2iz+0x58>)
 8002ff6:	42a3      	cmp	r3, r4
 8002ff8:	dc10      	bgt.n	800301c <__aeabi_d2iz+0x3c>
 8002ffa:	2480      	movs	r4, #128	; 0x80
 8002ffc:	0364      	lsls	r4, r4, #13
 8002ffe:	4322      	orrs	r2, r4
 8003000:	4c0e      	ldr	r4, [pc, #56]	; (800303c <__aeabi_d2iz+0x5c>)
 8003002:	1ae4      	subs	r4, r4, r3
 8003004:	2c1f      	cmp	r4, #31
 8003006:	dd0c      	ble.n	8003022 <__aeabi_d2iz+0x42>
 8003008:	480d      	ldr	r0, [pc, #52]	; (8003040 <__aeabi_d2iz+0x60>)
 800300a:	1ac3      	subs	r3, r0, r3
 800300c:	40da      	lsrs	r2, r3
 800300e:	0013      	movs	r3, r2
 8003010:	425c      	negs	r4, r3
 8003012:	2900      	cmp	r1, #0
 8003014:	d100      	bne.n	8003018 <__aeabi_d2iz+0x38>
 8003016:	001c      	movs	r4, r3
 8003018:	0020      	movs	r0, r4
 800301a:	bd30      	pop	{r4, r5, pc}
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <__aeabi_d2iz+0x64>)
 800301e:	18cc      	adds	r4, r1, r3
 8003020:	e7fa      	b.n	8003018 <__aeabi_d2iz+0x38>
 8003022:	4d09      	ldr	r5, [pc, #36]	; (8003048 <__aeabi_d2iz+0x68>)
 8003024:	40e0      	lsrs	r0, r4
 8003026:	46ac      	mov	ip, r5
 8003028:	4463      	add	r3, ip
 800302a:	409a      	lsls	r2, r3
 800302c:	0013      	movs	r3, r2
 800302e:	4303      	orrs	r3, r0
 8003030:	e7ee      	b.n	8003010 <__aeabi_d2iz+0x30>
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	000003fe 	.word	0x000003fe
 8003038:	0000041d 	.word	0x0000041d
 800303c:	00000433 	.word	0x00000433
 8003040:	00000413 	.word	0x00000413
 8003044:	7fffffff 	.word	0x7fffffff
 8003048:	fffffbed 	.word	0xfffffbed

0800304c <__aeabi_i2d>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	2800      	cmp	r0, #0
 8003050:	d02d      	beq.n	80030ae <__aeabi_i2d+0x62>
 8003052:	17c3      	asrs	r3, r0, #31
 8003054:	18c5      	adds	r5, r0, r3
 8003056:	405d      	eors	r5, r3
 8003058:	0fc4      	lsrs	r4, r0, #31
 800305a:	0028      	movs	r0, r5
 800305c:	f000 f938 	bl	80032d0 <__clzsi2>
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <__aeabi_i2d+0x6c>)
 8003062:	1a1b      	subs	r3, r3, r0
 8003064:	055b      	lsls	r3, r3, #21
 8003066:	0d5b      	lsrs	r3, r3, #21
 8003068:	280a      	cmp	r0, #10
 800306a:	dd15      	ble.n	8003098 <__aeabi_i2d+0x4c>
 800306c:	380b      	subs	r0, #11
 800306e:	4085      	lsls	r5, r0
 8003070:	2200      	movs	r2, #0
 8003072:	032d      	lsls	r5, r5, #12
 8003074:	0b2d      	lsrs	r5, r5, #12
 8003076:	2100      	movs	r1, #0
 8003078:	0010      	movs	r0, r2
 800307a:	032d      	lsls	r5, r5, #12
 800307c:	0d0a      	lsrs	r2, r1, #20
 800307e:	0b2d      	lsrs	r5, r5, #12
 8003080:	0512      	lsls	r2, r2, #20
 8003082:	432a      	orrs	r2, r5
 8003084:	4d0d      	ldr	r5, [pc, #52]	; (80030bc <__aeabi_i2d+0x70>)
 8003086:	051b      	lsls	r3, r3, #20
 8003088:	402a      	ands	r2, r5
 800308a:	4313      	orrs	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	07e4      	lsls	r4, r4, #31
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	4323      	orrs	r3, r4
 8003094:	0019      	movs	r1, r3
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	0002      	movs	r2, r0
 800309a:	0029      	movs	r1, r5
 800309c:	3215      	adds	r2, #21
 800309e:	4091      	lsls	r1, r2
 80030a0:	000a      	movs	r2, r1
 80030a2:	210b      	movs	r1, #11
 80030a4:	1a08      	subs	r0, r1, r0
 80030a6:	40c5      	lsrs	r5, r0
 80030a8:	032d      	lsls	r5, r5, #12
 80030aa:	0b2d      	lsrs	r5, r5, #12
 80030ac:	e7e3      	b.n	8003076 <__aeabi_i2d+0x2a>
 80030ae:	2400      	movs	r4, #0
 80030b0:	2300      	movs	r3, #0
 80030b2:	2500      	movs	r5, #0
 80030b4:	2200      	movs	r2, #0
 80030b6:	e7de      	b.n	8003076 <__aeabi_i2d+0x2a>
 80030b8:	0000041e 	.word	0x0000041e
 80030bc:	800fffff 	.word	0x800fffff

080030c0 <__aeabi_ui2d>:
 80030c0:	b510      	push	{r4, lr}
 80030c2:	1e04      	subs	r4, r0, #0
 80030c4:	d025      	beq.n	8003112 <__aeabi_ui2d+0x52>
 80030c6:	f000 f903 	bl	80032d0 <__clzsi2>
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <__aeabi_ui2d+0x5c>)
 80030cc:	1a1b      	subs	r3, r3, r0
 80030ce:	055b      	lsls	r3, r3, #21
 80030d0:	0d5b      	lsrs	r3, r3, #21
 80030d2:	280a      	cmp	r0, #10
 80030d4:	dd12      	ble.n	80030fc <__aeabi_ui2d+0x3c>
 80030d6:	380b      	subs	r0, #11
 80030d8:	4084      	lsls	r4, r0
 80030da:	2200      	movs	r2, #0
 80030dc:	0324      	lsls	r4, r4, #12
 80030de:	0b24      	lsrs	r4, r4, #12
 80030e0:	2100      	movs	r1, #0
 80030e2:	0010      	movs	r0, r2
 80030e4:	0324      	lsls	r4, r4, #12
 80030e6:	0d0a      	lsrs	r2, r1, #20
 80030e8:	0b24      	lsrs	r4, r4, #12
 80030ea:	0512      	lsls	r2, r2, #20
 80030ec:	4322      	orrs	r2, r4
 80030ee:	4c0c      	ldr	r4, [pc, #48]	; (8003120 <__aeabi_ui2d+0x60>)
 80030f0:	051b      	lsls	r3, r3, #20
 80030f2:	4022      	ands	r2, r4
 80030f4:	4313      	orrs	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	0859      	lsrs	r1, r3, #1
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	0002      	movs	r2, r0
 80030fe:	0021      	movs	r1, r4
 8003100:	3215      	adds	r2, #21
 8003102:	4091      	lsls	r1, r2
 8003104:	000a      	movs	r2, r1
 8003106:	210b      	movs	r1, #11
 8003108:	1a08      	subs	r0, r1, r0
 800310a:	40c4      	lsrs	r4, r0
 800310c:	0324      	lsls	r4, r4, #12
 800310e:	0b24      	lsrs	r4, r4, #12
 8003110:	e7e6      	b.n	80030e0 <__aeabi_ui2d+0x20>
 8003112:	2300      	movs	r3, #0
 8003114:	2400      	movs	r4, #0
 8003116:	2200      	movs	r2, #0
 8003118:	e7e2      	b.n	80030e0 <__aeabi_ui2d+0x20>
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	0000041e 	.word	0x0000041e
 8003120:	800fffff 	.word	0x800fffff

08003124 <__aeabi_f2d>:
 8003124:	0041      	lsls	r1, r0, #1
 8003126:	0e09      	lsrs	r1, r1, #24
 8003128:	1c4b      	adds	r3, r1, #1
 800312a:	b570      	push	{r4, r5, r6, lr}
 800312c:	b2db      	uxtb	r3, r3
 800312e:	0246      	lsls	r6, r0, #9
 8003130:	0a75      	lsrs	r5, r6, #9
 8003132:	0fc4      	lsrs	r4, r0, #31
 8003134:	2b01      	cmp	r3, #1
 8003136:	dd14      	ble.n	8003162 <__aeabi_f2d+0x3e>
 8003138:	23e0      	movs	r3, #224	; 0xe0
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	076d      	lsls	r5, r5, #29
 800313e:	0b36      	lsrs	r6, r6, #12
 8003140:	18cb      	adds	r3, r1, r3
 8003142:	2100      	movs	r1, #0
 8003144:	0d0a      	lsrs	r2, r1, #20
 8003146:	0028      	movs	r0, r5
 8003148:	0512      	lsls	r2, r2, #20
 800314a:	4d1c      	ldr	r5, [pc, #112]	; (80031bc <__aeabi_f2d+0x98>)
 800314c:	4332      	orrs	r2, r6
 800314e:	055b      	lsls	r3, r3, #21
 8003150:	402a      	ands	r2, r5
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	4313      	orrs	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	07e4      	lsls	r4, r4, #31
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	4323      	orrs	r3, r4
 800315e:	0019      	movs	r1, r3
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	2900      	cmp	r1, #0
 8003164:	d114      	bne.n	8003190 <__aeabi_f2d+0x6c>
 8003166:	2d00      	cmp	r5, #0
 8003168:	d01e      	beq.n	80031a8 <__aeabi_f2d+0x84>
 800316a:	0028      	movs	r0, r5
 800316c:	f000 f8b0 	bl	80032d0 <__clzsi2>
 8003170:	280a      	cmp	r0, #10
 8003172:	dc1c      	bgt.n	80031ae <__aeabi_f2d+0x8a>
 8003174:	230b      	movs	r3, #11
 8003176:	002a      	movs	r2, r5
 8003178:	1a1b      	subs	r3, r3, r0
 800317a:	40da      	lsrs	r2, r3
 800317c:	0003      	movs	r3, r0
 800317e:	3315      	adds	r3, #21
 8003180:	409d      	lsls	r5, r3
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <__aeabi_f2d+0x9c>)
 8003184:	0312      	lsls	r2, r2, #12
 8003186:	1a1b      	subs	r3, r3, r0
 8003188:	055b      	lsls	r3, r3, #21
 800318a:	0b16      	lsrs	r6, r2, #12
 800318c:	0d5b      	lsrs	r3, r3, #21
 800318e:	e7d8      	b.n	8003142 <__aeabi_f2d+0x1e>
 8003190:	2d00      	cmp	r5, #0
 8003192:	d006      	beq.n	80031a2 <__aeabi_f2d+0x7e>
 8003194:	0b32      	lsrs	r2, r6, #12
 8003196:	2680      	movs	r6, #128	; 0x80
 8003198:	0336      	lsls	r6, r6, #12
 800319a:	076d      	lsls	r5, r5, #29
 800319c:	4316      	orrs	r6, r2
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <__aeabi_f2d+0xa0>)
 80031a0:	e7cf      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <__aeabi_f2d+0xa0>)
 80031a4:	2600      	movs	r6, #0
 80031a6:	e7cc      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2600      	movs	r6, #0
 80031ac:	e7c9      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031ae:	0003      	movs	r3, r0
 80031b0:	002a      	movs	r2, r5
 80031b2:	3b0b      	subs	r3, #11
 80031b4:	409a      	lsls	r2, r3
 80031b6:	2500      	movs	r5, #0
 80031b8:	e7e3      	b.n	8003182 <__aeabi_f2d+0x5e>
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	800fffff 	.word	0x800fffff
 80031c0:	00000389 	.word	0x00000389
 80031c4:	000007ff 	.word	0x000007ff

080031c8 <__aeabi_d2f>:
 80031c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ca:	004c      	lsls	r4, r1, #1
 80031cc:	0d64      	lsrs	r4, r4, #21
 80031ce:	030b      	lsls	r3, r1, #12
 80031d0:	1c62      	adds	r2, r4, #1
 80031d2:	0a5b      	lsrs	r3, r3, #9
 80031d4:	0f46      	lsrs	r6, r0, #29
 80031d6:	0552      	lsls	r2, r2, #21
 80031d8:	0fc9      	lsrs	r1, r1, #31
 80031da:	431e      	orrs	r6, r3
 80031dc:	00c5      	lsls	r5, r0, #3
 80031de:	0d52      	lsrs	r2, r2, #21
 80031e0:	2a01      	cmp	r2, #1
 80031e2:	dd29      	ble.n	8003238 <__aeabi_d2f+0x70>
 80031e4:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <__aeabi_d2f+0xfc>)
 80031e6:	18e7      	adds	r7, r4, r3
 80031e8:	2ffe      	cmp	r7, #254	; 0xfe
 80031ea:	dc1c      	bgt.n	8003226 <__aeabi_d2f+0x5e>
 80031ec:	2f00      	cmp	r7, #0
 80031ee:	dd3b      	ble.n	8003268 <__aeabi_d2f+0xa0>
 80031f0:	0180      	lsls	r0, r0, #6
 80031f2:	1e43      	subs	r3, r0, #1
 80031f4:	4198      	sbcs	r0, r3
 80031f6:	2207      	movs	r2, #7
 80031f8:	00f3      	lsls	r3, r6, #3
 80031fa:	0f6d      	lsrs	r5, r5, #29
 80031fc:	4303      	orrs	r3, r0
 80031fe:	432b      	orrs	r3, r5
 8003200:	401a      	ands	r2, r3
 8003202:	2a00      	cmp	r2, #0
 8003204:	d004      	beq.n	8003210 <__aeabi_d2f+0x48>
 8003206:	220f      	movs	r2, #15
 8003208:	401a      	ands	r2, r3
 800320a:	2a04      	cmp	r2, #4
 800320c:	d000      	beq.n	8003210 <__aeabi_d2f+0x48>
 800320e:	3304      	adds	r3, #4
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	04d2      	lsls	r2, r2, #19
 8003214:	401a      	ands	r2, r3
 8003216:	d024      	beq.n	8003262 <__aeabi_d2f+0x9a>
 8003218:	3701      	adds	r7, #1
 800321a:	b2fa      	uxtb	r2, r7
 800321c:	2fff      	cmp	r7, #255	; 0xff
 800321e:	d002      	beq.n	8003226 <__aeabi_d2f+0x5e>
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	0a58      	lsrs	r0, r3, #9
 8003224:	e001      	b.n	800322a <__aeabi_d2f+0x62>
 8003226:	22ff      	movs	r2, #255	; 0xff
 8003228:	2000      	movs	r0, #0
 800322a:	0240      	lsls	r0, r0, #9
 800322c:	05d2      	lsls	r2, r2, #23
 800322e:	0a40      	lsrs	r0, r0, #9
 8003230:	07c9      	lsls	r1, r1, #31
 8003232:	4310      	orrs	r0, r2
 8003234:	4308      	orrs	r0, r1
 8003236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003238:	4335      	orrs	r5, r6
 800323a:	2c00      	cmp	r4, #0
 800323c:	d104      	bne.n	8003248 <__aeabi_d2f+0x80>
 800323e:	2d00      	cmp	r5, #0
 8003240:	d10a      	bne.n	8003258 <__aeabi_d2f+0x90>
 8003242:	2200      	movs	r2, #0
 8003244:	2000      	movs	r0, #0
 8003246:	e7f0      	b.n	800322a <__aeabi_d2f+0x62>
 8003248:	2d00      	cmp	r5, #0
 800324a:	d0ec      	beq.n	8003226 <__aeabi_d2f+0x5e>
 800324c:	2080      	movs	r0, #128	; 0x80
 800324e:	03c0      	lsls	r0, r0, #15
 8003250:	4330      	orrs	r0, r6
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	e7e9      	b.n	800322a <__aeabi_d2f+0x62>
 8003256:	2400      	movs	r4, #0
 8003258:	2300      	movs	r3, #0
 800325a:	025b      	lsls	r3, r3, #9
 800325c:	0a58      	lsrs	r0, r3, #9
 800325e:	b2e2      	uxtb	r2, r4
 8003260:	e7e3      	b.n	800322a <__aeabi_d2f+0x62>
 8003262:	08db      	lsrs	r3, r3, #3
 8003264:	003c      	movs	r4, r7
 8003266:	e7f8      	b.n	800325a <__aeabi_d2f+0x92>
 8003268:	003b      	movs	r3, r7
 800326a:	3317      	adds	r3, #23
 800326c:	dbf3      	blt.n	8003256 <__aeabi_d2f+0x8e>
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	4333      	orrs	r3, r6
 8003274:	261e      	movs	r6, #30
 8003276:	1bf6      	subs	r6, r6, r7
 8003278:	2e1f      	cmp	r6, #31
 800327a:	dd14      	ble.n	80032a6 <__aeabi_d2f+0xde>
 800327c:	2202      	movs	r2, #2
 800327e:	4252      	negs	r2, r2
 8003280:	1bd7      	subs	r7, r2, r7
 8003282:	001a      	movs	r2, r3
 8003284:	40fa      	lsrs	r2, r7
 8003286:	0017      	movs	r7, r2
 8003288:	2e20      	cmp	r6, #32
 800328a:	d004      	beq.n	8003296 <__aeabi_d2f+0xce>
 800328c:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <__aeabi_d2f+0x100>)
 800328e:	4694      	mov	ip, r2
 8003290:	4464      	add	r4, ip
 8003292:	40a3      	lsls	r3, r4
 8003294:	431d      	orrs	r5, r3
 8003296:	002b      	movs	r3, r5
 8003298:	1e5d      	subs	r5, r3, #1
 800329a:	41ab      	sbcs	r3, r5
 800329c:	2207      	movs	r2, #7
 800329e:	433b      	orrs	r3, r7
 80032a0:	401a      	ands	r2, r3
 80032a2:	2700      	movs	r7, #0
 80032a4:	e7ad      	b.n	8003202 <__aeabi_d2f+0x3a>
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <__aeabi_d2f+0x104>)
 80032a8:	0028      	movs	r0, r5
 80032aa:	18a2      	adds	r2, r4, r2
 80032ac:	4095      	lsls	r5, r2
 80032ae:	4093      	lsls	r3, r2
 80032b0:	1e6c      	subs	r4, r5, #1
 80032b2:	41a5      	sbcs	r5, r4
 80032b4:	40f0      	lsrs	r0, r6
 80032b6:	2207      	movs	r2, #7
 80032b8:	432b      	orrs	r3, r5
 80032ba:	4303      	orrs	r3, r0
 80032bc:	401a      	ands	r2, r3
 80032be:	2700      	movs	r7, #0
 80032c0:	e79f      	b.n	8003202 <__aeabi_d2f+0x3a>
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	fffffc80 	.word	0xfffffc80
 80032c8:	fffffca2 	.word	0xfffffca2
 80032cc:	fffffc82 	.word	0xfffffc82

080032d0 <__clzsi2>:
 80032d0:	211c      	movs	r1, #28
 80032d2:	2301      	movs	r3, #1
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	4298      	cmp	r0, r3
 80032d8:	d301      	bcc.n	80032de <__clzsi2+0xe>
 80032da:	0c00      	lsrs	r0, r0, #16
 80032dc:	3910      	subs	r1, #16
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	4298      	cmp	r0, r3
 80032e2:	d301      	bcc.n	80032e8 <__clzsi2+0x18>
 80032e4:	0a00      	lsrs	r0, r0, #8
 80032e6:	3908      	subs	r1, #8
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	4298      	cmp	r0, r3
 80032ec:	d301      	bcc.n	80032f2 <__clzsi2+0x22>
 80032ee:	0900      	lsrs	r0, r0, #4
 80032f0:	3904      	subs	r1, #4
 80032f2:	a202      	add	r2, pc, #8	; (adr r2, 80032fc <__clzsi2+0x2c>)
 80032f4:	5c10      	ldrb	r0, [r2, r0]
 80032f6:	1840      	adds	r0, r0, r1
 80032f8:	4770      	bx	lr
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	02020304 	.word	0x02020304
 8003300:	01010101 	.word	0x01010101
	...

0800330c <__clzdi2>:
 800330c:	b510      	push	{r4, lr}
 800330e:	2900      	cmp	r1, #0
 8003310:	d103      	bne.n	800331a <__clzdi2+0xe>
 8003312:	f7ff ffdd 	bl	80032d0 <__clzsi2>
 8003316:	3020      	adds	r0, #32
 8003318:	e002      	b.n	8003320 <__clzdi2+0x14>
 800331a:	1c08      	adds	r0, r1, #0
 800331c:	f7ff ffd8 	bl	80032d0 <__clzsi2>
 8003320:	bd10      	pop	{r4, pc}
 8003322:	46c0      	nop			; (mov r8, r8)

08003324 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <LoadROtopology+0x88>)
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 800332e:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <LoadROtopology+0x8c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00b      	beq.n	800334c <LoadROtopology+0x28>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8003334:	0a1a      	lsrs	r2, r3, #8
 8003336:	491f      	ldr	r1, [pc, #124]	; (80033b4 <LoadROtopology+0x90>)
 8003338:	700a      	strb	r2, [r1, #0]
		if(N == 0)
 800333a:	d102      	bne.n	8003342 <LoadROtopology+0x1e>
			N =1;
 800333c:	000a      	movs	r2, r1
 800333e:	2101      	movs	r1, #1
 8003340:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <LoadROtopology+0x94>)
 8003344:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8003346:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8003348:	2002      	movs	r0, #2
		for(uint8_t i =1; i <= N; i++){
 800334a:	e023      	b.n	8003394 <LoadROtopology+0x70>
		N =1;
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <LoadROtopology+0x90>)
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
		myID =0;
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <LoadROtopology+0x94>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003358:	20fa      	movs	r0, #250	; 0xfa
 800335a:	e024      	b.n	80033a6 <LoadROtopology+0x82>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <LoadROtopology+0x88>)
 800335e:	18c3      	adds	r3, r0, r3
 8003360:	1e65      	subs	r5, r4, #1
 8003362:	466a      	mov	r2, sp
 8003364:	79d1      	ldrb	r1, [r2, #7]
 8003366:	881e      	ldrh	r6, [r3, #0]
 8003368:	00ab      	lsls	r3, r5, #2
 800336a:	195b      	adds	r3, r3, r5
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	195b      	adds	r3, r3, r5
 8003370:	18cb      	adds	r3, r1, r3
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4911      	ldr	r1, [pc, #68]	; (80033bc <LoadROtopology+0x98>)
 8003376:	52ce      	strh	r6, [r1, r3]
				add +=2;
 8003378:	3002      	adds	r0, #2
 800337a:	b280      	uxth	r0, r0
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 800337c:	79d3      	ldrb	r3, [r2, #7]
 800337e:	3301      	adds	r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	71d3      	strb	r3, [r2, #7]
 8003384:	466b      	mov	r3, sp
 8003386:	3307      	adds	r3, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b0a      	cmp	r3, #10
 800338e:	d9e5      	bls.n	800335c <LoadROtopology+0x38>
		for(uint8_t i =1; i <= N; i++){
 8003390:	3401      	adds	r4, #1
 8003392:	b2e4      	uxtb	r4, r4
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <LoadROtopology+0x90>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	42a3      	cmp	r3, r4
 800339a:	d303      	bcc.n	80033a4 <LoadROtopology+0x80>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 800339c:	466b      	mov	r3, sp
 800339e:	2200      	movs	r2, #0
 80033a0:	71da      	strb	r2, [r3, #7]
 80033a2:	e7ef      	b.n	8003384 <LoadROtopology+0x60>
			}
		}
	}
	
	return result;
 80033a4:	2000      	movs	r0, #0
}
 80033a6:	b002      	add	sp, #8
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	0801d800 	.word	0x0801d800
 80033b0:	0000ffff 	.word	0x0000ffff
 80033b4:	20000024 	.word	0x20000024
 80033b8:	20001072 	.word	0x20001072
 80033bc:	20000aac 	.word	0x20000aac

080033c0 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 80033c0:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80033c2:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80033c4:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 80033c6:	e001      	b.n	80033cc <LoadEEportsDir+0xc>
 80033c8:	3401      	adds	r4, #1
 80033ca:	b2e4      	uxtb	r4, r4
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <LoadEEportsDir+0x30>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	42a3      	cmp	r3, r4
 80033d2:	d30b      	bcc.n	80033ec <LoadEEportsDir+0x2c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 80033d4:	1e61      	subs	r1, r4, #1
 80033d6:	0049      	lsls	r1, r1, #1
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <LoadEEportsDir+0x34>)
 80033da:	18c9      	adds	r1, r1, r3
 80033dc:	1c60      	adds	r0, r4, #1
 80033de:	f004 fc45 	bl	8007c6c <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80033e2:	1ca3      	adds	r3, r4, #2
 80033e4:	2b1b      	cmp	r3, #27
 80033e6:	ddef      	ble.n	80033c8 <LoadEEportsDir+0x8>
			result =BOS_ERR_EEPROM;
 80033e8:	250a      	movs	r5, #10
 80033ea:	e7ed      	b.n	80033c8 <LoadEEportsDir+0x8>
	}
	
	return result;
}
 80033ec:	0028      	movs	r0, r5
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	20000024 	.word	0x20000024
 80033f4:	200074e4 	.word	0x200074e4

080033f8 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80033fc:	466b      	mov	r3, sp
 80033fe:	2200      	movs	r2, #0
 8003400:	80da      	strh	r2, [r3, #6]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003402:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003404:	2500      	movs	r5, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003406:	e023      	b.n	8003450 <LoadEEalias+0x58>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8003408:	466b      	mov	r3, sp
 800340a:	1d9f      	adds	r7, r3, #6
 800340c:	0028      	movs	r0, r5
 800340e:	301c      	adds	r0, #28
 8003410:	b280      	uxth	r0, r0
 8003412:	0039      	movs	r1, r7
 8003414:	f004 fc2a 	bl	8007c6c <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8003418:	8839      	ldrh	r1, [r7, #0]
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <LoadEEalias+0x6c>)
 800341c:	00b3      	lsls	r3, r6, #2
 800341e:	199f      	adds	r7, r3, r6
 8003420:	0078      	lsls	r0, r7, #1
 8003422:	1810      	adds	r0, r2, r0
 8003424:	5501      	strb	r1, [r0, r4]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003426:	1e67      	subs	r7, r4, #1
 8003428:	0a09      	lsrs	r1, r1, #8
 800342a:	199b      	adds	r3, r3, r6
 800342c:	0058      	lsls	r0, r3, #1
 800342e:	1812      	adds	r2, r2, r0
 8003430:	55d1      	strb	r1, [r2, r7]
			add++;
 8003432:	3501      	adds	r5, #1
 8003434:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003436:	3402      	adds	r4, #2
 8003438:	b2e4      	uxtb	r4, r4
 800343a:	2c09      	cmp	r4, #9
 800343c:	d9e4      	bls.n	8003408 <LoadEEalias+0x10>
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 800343e:	00b3      	lsls	r3, r6, #2
 8003440:	199b      	adds	r3, r3, r6
 8003442:	005a      	lsls	r2, r3, #1
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <LoadEEalias+0x6c>)
 8003446:	189b      	adds	r3, r3, r2
 8003448:	2200      	movs	r2, #0
 800344a:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800344c:	3601      	adds	r6, #1
 800344e:	b2f6      	uxtb	r6, r6
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <LoadEEalias+0x70>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	42b3      	cmp	r3, r6
 8003456:	d301      	bcc.n	800345c <LoadEEalias+0x64>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003458:	2401      	movs	r4, #1
 800345a:	e7ee      	b.n	800343a <LoadEEalias+0x42>
	}
	
	return result;
}
 800345c:	2000      	movs	r0, #0
 800345e:	b003      	add	sp, #12
 8003460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	20000f64 	.word	0x20000f64
 8003468:	20000024 	.word	0x20000024

0800346c <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003470:	466b      	mov	r3, sp
 8003472:	2200      	movs	r2, #0
 8003474:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8003476:	2400      	movs	r4, #0
	uint16_t add =0, temp =0;
 8003478:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 800347a:	e00b      	b.n	8003494 <LoadEEgroup+0x28>
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800347c:	0063      	lsls	r3, r4, #1
 800347e:	491e      	ldr	r1, [pc, #120]	; (80034f8 <LoadEEgroup+0x8c>)
 8003480:	18c9      	adds	r1, r1, r3
 8003482:	0028      	movs	r0, r5
 8003484:	30cb      	adds	r0, #203	; 0xcb
 8003486:	b280      	uxth	r0, r0
 8003488:	f004 fbf0 	bl	8007c6c <EE_ReadVariable>
		add++;
 800348c:	3501      	adds	r5, #1
 800348e:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8003490:	3401      	adds	r4, #1
 8003492:	b2e4      	uxtb	r4, r4
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <LoadEEgroup+0x90>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	42a3      	cmp	r3, r4
 800349a:	d8ef      	bhi.n	800347c <LoadEEgroup+0x10>
	}
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 800349c:	2600      	movs	r6, #0
 800349e:	e023      	b.n	80034e8 <LoadEEgroup+0x7c>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 80034a0:	466b      	mov	r3, sp
 80034a2:	1d9f      	adds	r7, r3, #6
 80034a4:	0028      	movs	r0, r5
 80034a6:	3099      	adds	r0, #153	; 0x99
 80034a8:	b280      	uxth	r0, r0
 80034aa:	0039      	movs	r1, r7
 80034ac:	f004 fbde 	bl	8007c6c <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 80034b0:	8839      	ldrh	r1, [r7, #0]
 80034b2:	4a13      	ldr	r2, [pc, #76]	; (8003500 <LoadEEgroup+0x94>)
 80034b4:	00b3      	lsls	r3, r6, #2
 80034b6:	199f      	adds	r7, r3, r6
 80034b8:	0078      	lsls	r0, r7, #1
 80034ba:	1810      	adds	r0, r2, r0
 80034bc:	5501      	strb	r1, [r0, r4]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80034be:	1e67      	subs	r7, r4, #1
 80034c0:	0a09      	lsrs	r1, r1, #8
 80034c2:	199b      	adds	r3, r3, r6
 80034c4:	0058      	lsls	r0, r3, #1
 80034c6:	1812      	adds	r2, r2, r0
 80034c8:	55d1      	strb	r1, [r2, r7]
			add++;
 80034ca:	3501      	adds	r5, #1
 80034cc:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ce:	3402      	adds	r4, #2
 80034d0:	b2e4      	uxtb	r4, r4
 80034d2:	2c09      	cmp	r4, #9
 80034d4:	d9e4      	bls.n	80034a0 <LoadEEgroup+0x34>
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 80034d6:	00b3      	lsls	r3, r6, #2
 80034d8:	199b      	adds	r3, r3, r6
 80034da:	005a      	lsls	r2, r3, #1
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <LoadEEgroup+0x94>)
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	2200      	movs	r2, #0
 80034e2:	725a      	strb	r2, [r3, #9]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 80034e4:	3601      	adds	r6, #1
 80034e6:	b2f6      	uxtb	r6, r6
 80034e8:	2e09      	cmp	r6, #9
 80034ea:	d801      	bhi.n	80034f0 <LoadEEgroup+0x84>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ec:	2401      	movs	r4, #1
 80034ee:	e7f0      	b.n	80034d2 <LoadEEgroup+0x66>
	}
	
	return result;
}
 80034f0:	2000      	movs	r0, #0
 80034f2:	b003      	add	sp, #12
 80034f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	20000ebc 	.word	0x20000ebc
 80034fc:	20000024 	.word	0x20000024
 8003500:	20000e58 	.word	0x20000e58

08003504 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8003508:	210e      	movs	r1, #14
 800350a:	4469      	add	r1, sp
 800350c:	2300      	movs	r3, #0
 800350e:	800b      	strh	r3, [r1, #0]
 8003510:	aa03      	add	r2, sp, #12
 8003512:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8003514:	20e4      	movs	r0, #228	; 0xe4
 8003516:	f004 fba9 	bl	8007c6c <EE_ReadVariable>
	if(!status1){
 800351a:	2800      	cmp	r0, #0
 800351c:	d000      	beq.n	8003520 <LoadEEstreams+0x1c>
 800351e:	e075      	b.n	800360c <LoadEEstreams+0x108>
		direction =(uint8_t )temp1;
 8003520:	230e      	movs	r3, #14
 8003522:	446b      	add	r3, sp
 8003524:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8003526:	210e      	movs	r1, #14
 8003528:	4469      	add	r1, sp
 800352a:	20e5      	movs	r0, #229	; 0xe5
 800352c:	f004 fb9e 	bl	8007c6c <EE_ReadVariable>
 8003530:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8003532:	a903      	add	r1, sp, #12
 8003534:	20e6      	movs	r0, #230	; 0xe6
 8003536:	f004 fb99 	bl	8007c6c <EE_ReadVariable>
	if(!status1 && !status2){
 800353a:	4304      	orrs	r4, r0
 800353c:	b2a4      	uxth	r4, r4
 800353e:	2c00      	cmp	r4, #0
 8003540:	d000      	beq.n	8003544 <LoadEEstreams+0x40>
 8003542:	e065      	b.n	8003610 <LoadEEstreams+0x10c>
		count =((uint32_t )temp1 << 16) + temp2;
 8003544:	230e      	movs	r3, #14
 8003546:	446b      	add	r3, sp
 8003548:	881d      	ldrh	r5, [r3, #0]
 800354a:	042d      	lsls	r5, r5, #16
 800354c:	ab03      	add	r3, sp, #12
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8003552:	210e      	movs	r1, #14
 8003554:	4469      	add	r1, sp
 8003556:	20e7      	movs	r0, #231	; 0xe7
 8003558:	f004 fb88 	bl	8007c6c <EE_ReadVariable>
 800355c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 800355e:	a903      	add	r1, sp, #12
 8003560:	20e8      	movs	r0, #232	; 0xe8
 8003562:	f004 fb83 	bl	8007c6c <EE_ReadVariable>
	if(!status1 && !status2){
 8003566:	4304      	orrs	r4, r0
 8003568:	b2a4      	uxth	r4, r4
 800356a:	2c00      	cmp	r4, #0
 800356c:	d152      	bne.n	8003614 <LoadEEstreams+0x110>
		timeout =((uint32_t )temp1 << 16) + temp2;
 800356e:	230e      	movs	r3, #14
 8003570:	446b      	add	r3, sp
 8003572:	881c      	ldrh	r4, [r3, #0]
 8003574:	0424      	lsls	r4, r4, #16
 8003576:	ab03      	add	r3, sp, #12
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 800357c:	210e      	movs	r1, #14
 800357e:	4469      	add	r1, sp
 8003580:	20e9      	movs	r0, #233	; 0xe9
 8003582:	f004 fb73 	bl	8007c6c <EE_ReadVariable>
	if(!status1){
 8003586:	2800      	cmp	r0, #0
 8003588:	d107      	bne.n	800359a <LoadEEstreams+0x96>
		src1 =(uint8_t )(temp1 >> 8);
 800358a:	230e      	movs	r3, #14
 800358c:	446b      	add	r3, sp
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	0a19      	lsrs	r1, r3, #8
 8003592:	4a2c      	ldr	r2, [pc, #176]	; (8003644 <LoadEEstreams+0x140>)
 8003594:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <LoadEEstreams+0x144>)
 8003598:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 800359a:	210e      	movs	r1, #14
 800359c:	4469      	add	r1, sp
 800359e:	20ea      	movs	r0, #234	; 0xea
 80035a0:	f004 fb64 	bl	8007c6c <EE_ReadVariable>
	if(!status1){
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d107      	bne.n	80035b8 <LoadEEstreams+0xb4>
		src2 =(uint8_t )(temp1 >> 8);
 80035a8:	230e      	movs	r3, #14
 80035aa:	446b      	add	r3, sp
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	0a19      	lsrs	r1, r3, #8
 80035b0:	4a26      	ldr	r2, [pc, #152]	; (800364c <LoadEEstreams+0x148>)
 80035b2:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 80035b4:	4a26      	ldr	r2, [pc, #152]	; (8003650 <LoadEEstreams+0x14c>)
 80035b6:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 80035b8:	210e      	movs	r1, #14
 80035ba:	4469      	add	r1, sp
 80035bc:	20eb      	movs	r0, #235	; 0xeb
 80035be:	f004 fb55 	bl	8007c6c <EE_ReadVariable>
	if(!status1){
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d107      	bne.n	80035d6 <LoadEEstreams+0xd2>
		src3 =(uint8_t )(temp1 >> 8);
 80035c6:	230e      	movs	r3, #14
 80035c8:	446b      	add	r3, sp
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	0a19      	lsrs	r1, r3, #8
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <LoadEEstreams+0x150>)
 80035d0:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 80035d2:	4a21      	ldr	r2, [pc, #132]	; (8003658 <LoadEEstreams+0x154>)
 80035d4:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <LoadEEstreams+0x140>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <LoadEEstreams+0xe2>
 80035de:	4a1a      	ldr	r2, [pc, #104]	; (8003648 <LoadEEstreams+0x144>)
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	d118      	bne.n	8003618 <LoadEEstreams+0x114>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 80035e6:	4b19      	ldr	r3, [pc, #100]	; (800364c <LoadEEstreams+0x148>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <LoadEEstreams+0xf2>
 80035ee:	4a18      	ldr	r2, [pc, #96]	; (8003650 <LoadEEstreams+0x14c>)
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	d117      	bne.n	8003626 <LoadEEstreams+0x122>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <LoadEEstreams+0x150>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <LoadEEstreams+0x102>
 80035fe:	4a16      	ldr	r2, [pc, #88]	; (8003658 <LoadEEstreams+0x154>)
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	2a00      	cmp	r2, #0
 8003604:	d116      	bne.n	8003634 <LoadEEstreams+0x130>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003606:	2000      	movs	r0, #0
 8003608:	b004      	add	sp, #16
 800360a:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t direction =0;
 800360c:	2600      	movs	r6, #0
 800360e:	e78a      	b.n	8003526 <LoadEEstreams+0x22>
	uint32_t count =0, timeout =0;
 8003610:	2500      	movs	r5, #0
 8003612:	e79e      	b.n	8003552 <LoadEEstreams+0x4e>
 8003614:	2400      	movs	r4, #0
 8003616:	e7b1      	b.n	800357c <LoadEEstreams+0x78>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003618:	9200      	str	r2, [sp, #0]
 800361a:	0022      	movs	r2, r4
 800361c:	0029      	movs	r1, r5
 800361e:	0030      	movs	r0, r6
 8003620:	f005 ff8c 	bl	800953c <SetupDMAStreams>
 8003624:	e7df      	b.n	80035e6 <LoadEEstreams+0xe2>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003626:	9200      	str	r2, [sp, #0]
 8003628:	0022      	movs	r2, r4
 800362a:	0029      	movs	r1, r5
 800362c:	0030      	movs	r0, r6
 800362e:	f005 ff85 	bl	800953c <SetupDMAStreams>
 8003632:	e7e0      	b.n	80035f6 <LoadEEstreams+0xf2>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003634:	9200      	str	r2, [sp, #0]
 8003636:	0022      	movs	r2, r4
 8003638:	0029      	movs	r1, r5
 800363a:	0030      	movs	r0, r6
 800363c:	f005 ff7e 	bl	800953c <SetupDMAStreams>
 8003640:	e7e1      	b.n	8003606 <LoadEEstreams+0x102>
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	20001142 	.word	0x20001142
 8003648:	20000e55 	.word	0x20000e55
 800364c:	20001143 	.word	0x20001143
 8003650:	20000e56 	.word	0x20000e56
 8003654:	20001144 	.word	0x20001144
 8003658:	20000e57 	.word	0x20000e57

0800365c <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 800365c:	b510      	push	{r4, lr}
 800365e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003660:	208a      	movs	r0, #138	; 0x8a
 8003662:	466b      	mov	r3, sp
 8003664:	1d99      	adds	r1, r3, #6
 8003666:	0040      	lsls	r0, r0, #1
 8003668:	f004 fb00 	bl	8007c6c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800366c:	2800      	cmp	r0, #0
 800366e:	d000      	beq.n	8003672 <LoadEEparams+0x16>
 8003670:	e075      	b.n	800375e <LoadEEparams+0x102>
		BOSMessaging.response =(uint8_t )temp1;
 8003672:	466b      	mov	r3, sp
 8003674:	3306      	adds	r3, #6
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	4a55      	ldr	r2, [pc, #340]	; (80037d0 <LoadEEparams+0x174>)
 800367a:	7013      	strb	r3, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003680:	208e      	movs	r0, #142	; 0x8e
 8003682:	466b      	mov	r3, sp
 8003684:	1d99      	adds	r1, r3, #6
 8003686:	0040      	lsls	r0, r0, #1
 8003688:	f004 faf0 	bl	8007c6c <EE_ReadVariable>

	if(!status1){
 800368c:	2800      	cmp	r0, #0
 800368e:	d000      	beq.n	8003692 <LoadEEparams+0x36>
 8003690:	e06c      	b.n	800376c <LoadEEparams+0x110>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003692:	466b      	mov	r3, sp
 8003694:	3306      	adds	r3, #6
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	0bd9      	lsrs	r1, r3, #15
 800369a:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <LoadEEparams+0x174>)
 800369c:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	80d3      	strh	r3, [r2, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80036a2:	2016      	movs	r0, #22
 80036a4:	466b      	mov	r3, sp
 80036a6:	1d99      	adds	r1, r3, #6
 80036a8:	30ff      	adds	r0, #255	; 0xff
 80036aa:	f004 fadf 	bl	8007c6c <EE_ReadVariable>
	if(!status1)
 80036ae:	2800      	cmp	r0, #0
 80036b0:	d163      	bne.n	800377a <LoadEEparams+0x11e>
		BOS.buttons.debounce =temp1;
 80036b2:	466b      	mov	r3, sp
 80036b4:	88da      	ldrh	r2, [r3, #6]
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <LoadEEparams+0x178>)
 80036b8:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80036ba:	208b      	movs	r0, #139	; 0x8b
 80036bc:	466b      	mov	r3, sp
 80036be:	1d99      	adds	r1, r3, #6
 80036c0:	0040      	lsls	r0, r0, #1
 80036c2:	f004 fad3 	bl	8007c6c <EE_ReadVariable>
	if(!status1)
 80036c6:	2800      	cmp	r0, #0
 80036c8:	d15c      	bne.n	8003784 <LoadEEparams+0x128>
		BOS.buttons.singleClickTime =temp1;
 80036ca:	466b      	mov	r3, sp
 80036cc:	88da      	ldrh	r2, [r3, #6]
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <LoadEEparams+0x178>)
 80036d0:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80036d2:	2018      	movs	r0, #24
 80036d4:	466b      	mov	r3, sp
 80036d6:	1d99      	adds	r1, r3, #6
 80036d8:	30ff      	adds	r0, #255	; 0xff
 80036da:	f004 fac7 	bl	8007c6c <EE_ReadVariable>
	if(!status1){
 80036de:	2800      	cmp	r0, #0
 80036e0:	d155      	bne.n	800378e <LoadEEparams+0x132>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80036e2:	466b      	mov	r3, sp
 80036e4:	3306      	adds	r3, #6
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	4a3a      	ldr	r2, [pc, #232]	; (80037d4 <LoadEEparams+0x178>)
 80036ea:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80036ec:	0a1b      	lsrs	r3, r3, #8
 80036ee:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80036f0:	208c      	movs	r0, #140	; 0x8c
 80036f2:	466b      	mov	r3, sp
 80036f4:	1d99      	adds	r1, r3, #6
 80036f6:	0040      	lsls	r0, r0, #1
 80036f8:	f004 fab8 	bl	8007c6c <EE_ReadVariable>
 80036fc:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80036fe:	201a      	movs	r0, #26
 8003700:	a901      	add	r1, sp, #4
 8003702:	30ff      	adds	r0, #255	; 0xff
 8003704:	f004 fab2 	bl	8007c6c <EE_ReadVariable>
	if(!status1 && !status2){
 8003708:	4304      	orrs	r4, r0
 800370a:	b2a4      	uxth	r4, r4
 800370c:	2c00      	cmp	r4, #0
 800370e:	d145      	bne.n	800379c <LoadEEparams+0x140>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003710:	466b      	mov	r3, sp
 8003712:	3306      	adds	r3, #6
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	aa01      	add	r2, sp, #4
 8003718:	8812      	ldrh	r2, [r2, #0]
 800371a:	0412      	lsls	r2, r2, #16
 800371c:	4313      	orrs	r3, r2
 800371e:	4a2d      	ldr	r2, [pc, #180]	; (80037d4 <LoadEEparams+0x178>)
 8003720:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003722:	208d      	movs	r0, #141	; 0x8d
 8003724:	466b      	mov	r3, sp
 8003726:	1d99      	adds	r1, r3, #6
 8003728:	0040      	lsls	r0, r0, #1
 800372a:	f004 fa9f 	bl	8007c6c <EE_ReadVariable>
	if(!status1){
 800372e:	2800      	cmp	r0, #0
 8003730:	d142      	bne.n	80037b8 <LoadEEparams+0x15c>
		BOS.daylightsaving =(int8_t )temp1;
 8003732:	466b      	mov	r3, sp
 8003734:	3306      	adds	r3, #6
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	4a26      	ldr	r2, [pc, #152]	; (80037d4 <LoadEEparams+0x178>)
 800373a:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003740:	201c      	movs	r0, #28
 8003742:	466b      	mov	r3, sp
 8003744:	1d99      	adds	r1, r3, #6
 8003746:	30ff      	adds	r0, #255	; 0xff
 8003748:	f004 fa90 	bl	8007c6c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800374c:	2800      	cmp	r0, #0
 800374e:	d039      	beq.n	80037c4 <LoadEEparams+0x168>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 8003750:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <LoadEEparams+0x17c>)
 8003752:	7e9a      	ldrb	r2, [r3, #26]
 8003754:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <LoadEEparams+0x178>)
 8003756:	769a      	strb	r2, [r3, #26]
	}
	
	return result;
}
 8003758:	2000      	movs	r0, #0
 800375a:	b002      	add	sp, #8
 800375c:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 800375e:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <LoadEEparams+0x180>)
 8003760:	7811      	ldrb	r1, [r2, #0]
 8003762:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <LoadEEparams+0x174>)
 8003764:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003766:	7852      	ldrb	r2, [r2, #1]
 8003768:	705a      	strb	r2, [r3, #1]
 800376a:	e789      	b.n	8003680 <LoadEEparams+0x24>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 800376c:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <LoadEEparams+0x180>)
 800376e:	7911      	ldrb	r1, [r2, #4]
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <LoadEEparams+0x174>)
 8003772:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 8003774:	88d2      	ldrh	r2, [r2, #6]
 8003776:	80da      	strh	r2, [r3, #6]
 8003778:	e793      	b.n	80036a2 <LoadEEparams+0x46>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800377a:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <LoadEEparams+0x17c>)
 800377c:	881a      	ldrh	r2, [r3, #0]
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <LoadEEparams+0x178>)
 8003780:	801a      	strh	r2, [r3, #0]
 8003782:	e79a      	b.n	80036ba <LoadEEparams+0x5e>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <LoadEEparams+0x17c>)
 8003786:	885a      	ldrh	r2, [r3, #2]
 8003788:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <LoadEEparams+0x178>)
 800378a:	805a      	strh	r2, [r3, #2]
 800378c:	e7a1      	b.n	80036d2 <LoadEEparams+0x76>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <LoadEEparams+0x17c>)
 8003790:	7911      	ldrb	r1, [r2, #4]
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <LoadEEparams+0x178>)
 8003794:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003796:	7952      	ldrb	r2, [r2, #5]
 8003798:	715a      	strb	r2, [r3, #5]
 800379a:	e7a9      	b.n	80036f0 <LoadEEparams+0x94>
	else if(CLI_LOW_Baudrate_Flag)
 800379c:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <LoadEEparams+0x184>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d004      	beq.n	80037ae <LoadEEparams+0x152>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <LoadEEparams+0x178>)
 80037a6:	22e1      	movs	r2, #225	; 0xe1
 80037a8:	0252      	lsls	r2, r2, #9
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	e7b9      	b.n	8003722 <LoadEEparams+0xc6>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <LoadEEparams+0x17c>)
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <LoadEEparams+0x178>)
 80037b4:	609a      	str	r2, [r3, #8]
 80037b6:	e7b4      	b.n	8003722 <LoadEEparams+0xc6>
		BOS.hourformat =24;
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <LoadEEparams+0x178>)
 80037ba:	2218      	movs	r2, #24
 80037bc:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 80037be:	2200      	movs	r2, #0
 80037c0:	731a      	strb	r2, [r3, #12]
 80037c2:	e7bd      	b.n	8003740 <LoadEEparams+0xe4>
		BOS.disableCLI =(uint8_t )temp1;
 80037c4:	466b      	mov	r3, sp
 80037c6:	799a      	ldrb	r2, [r3, #6]
 80037c8:	4b02      	ldr	r3, [pc, #8]	; (80037d4 <LoadEEparams+0x178>)
 80037ca:	769a      	strb	r2, [r3, #26]
 80037cc:	e7c4      	b.n	8003758 <LoadEEparams+0xfc>
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	20006fcc 	.word	0x20006fcc
 80037d4:	2000704c 	.word	0x2000704c
 80037d8:	20000008 	.word	0x20000008
 80037dc:	20000000 	.word	0x20000000
 80037e0:	20000aa7 	.word	0x20000aa7

080037e4 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80037e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e6:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80037e8:	231e      	movs	r3, #30
 80037ea:	446b      	add	r3, sp
 80037ec:	2200      	movs	r2, #0
 80037ee:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80037f0:	2400      	movs	r4, #0
 80037f2:	e001      	b.n	80037f8 <LoadEEbuttons+0x14>
 80037f4:	3401      	adds	r4, #1
 80037f6:	b2e4      	uxtb	r4, r4
 80037f8:	2c05      	cmp	r4, #5
 80037fa:	d854      	bhi.n	80038a6 <LoadEEbuttons+0xc2>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80037fc:	0025      	movs	r5, r4
 80037fe:	353b      	adds	r5, #59	; 0x3b
 8003800:	00ad      	lsls	r5, r5, #2
 8003802:	b2ad      	uxth	r5, r5
 8003804:	211e      	movs	r1, #30
 8003806:	4469      	add	r1, sp
 8003808:	0028      	movs	r0, r5
 800380a:	f004 fa2f 	bl	8007c6c <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 800380e:	2800      	cmp	r0, #0
 8003810:	d1f0      	bne.n	80037f4 <LoadEEbuttons+0x10>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 8003812:	231e      	movs	r3, #30
 8003814:	446b      	add	r3, sp
 8003816:	8819      	ldrh	r1, [r3, #0]
 8003818:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800381a:	0918      	lsrs	r0, r3, #4
 800381c:	1c62      	adds	r2, r4, #1
 800381e:	4290      	cmp	r0, r2
 8003820:	d1e8      	bne.n	80037f4 <LoadEEbuttons+0x10>
 8003822:	200f      	movs	r0, #15
 8003824:	4003      	ands	r3, r0
 8003826:	d0e5      	beq.n	80037f4 <LoadEEbuttons+0x10>
			{
				button[i + 1].type =temp8 & 0x0F;
 8003828:	00d7      	lsls	r7, r2, #3
 800382a:	18ba      	adds	r2, r7, r2
 800382c:	4f1f      	ldr	r7, [pc, #124]	; (80038ac <LoadEEbuttons+0xc8>)
 800382e:	18bf      	adds	r7, r7, r2
 8003830:	707b      	strb	r3, [r7, #1]
				button[i + 1].events =(uint8_t )temp16;
 8003832:	7239      	strb	r1, [r7, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003834:	261e      	movs	r6, #30
 8003836:	446e      	add	r6, sp
 8003838:	1c68      	adds	r0, r5, #1
 800383a:	b280      	uxth	r0, r0
 800383c:	0031      	movs	r1, r6
 800383e:	f004 fa15 	bl	8007c6c <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003842:	8833      	ldrh	r3, [r6, #0]
 8003844:	0a1a      	lsrs	r2, r3, #8
 8003846:	70ba      	strb	r2, [r7, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003848:	717b      	strb	r3, [r7, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 800384a:	1ca8      	adds	r0, r5, #2
 800384c:	b280      	uxth	r0, r0
 800384e:	0031      	movs	r1, r6
 8003850:	f004 fa0c 	bl	8007c6c <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003854:	8833      	ldrh	r3, [r6, #0]
 8003856:	0a1a      	lsrs	r2, r3, #8
 8003858:	70fa      	strb	r2, [r7, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 800385a:	71bb      	strb	r3, [r7, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 800385c:	3503      	adds	r5, #3
 800385e:	b2a8      	uxth	r0, r5
 8003860:	0031      	movs	r1, r6
 8003862:	f004 fa03 	bl	8007c6c <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003866:	8833      	ldrh	r3, [r6, #0]
 8003868:	0a1a      	lsrs	r2, r3, #8
 800386a:	713a      	strb	r2, [r7, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 800386c:	71fb      	strb	r3, [r7, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 800386e:	1c65      	adds	r5, r4, #1
 8003870:	b2ed      	uxtb	r5, r5
 8003872:	7878      	ldrb	r0, [r7, #1]
 8003874:	0029      	movs	r1, r5
 8003876:	f004 fecd 	bl	8008614 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800387a:	7a39      	ldrb	r1, [r7, #8]
 800387c:	084a      	lsrs	r2, r1, #1
 800387e:	78bb      	ldrb	r3, [r7, #2]
 8003880:	2001      	movs	r0, #1
 8003882:	4002      	ands	r2, r0
 8003884:	4001      	ands	r1, r0
 8003886:	2000      	movs	r0, #0
 8003888:	9005      	str	r0, [sp, #20]
 800388a:	79f8      	ldrb	r0, [r7, #7]
 800388c:	9004      	str	r0, [sp, #16]
 800388e:	79b8      	ldrb	r0, [r7, #6]
 8003890:	9003      	str	r0, [sp, #12]
 8003892:	7978      	ldrb	r0, [r7, #5]
 8003894:	9002      	str	r0, [sp, #8]
 8003896:	7938      	ldrb	r0, [r7, #4]
 8003898:	9001      	str	r0, [sp, #4]
 800389a:	78f8      	ldrb	r0, [r7, #3]
 800389c:	9000      	str	r0, [sp, #0]
 800389e:	0028      	movs	r0, r5
 80038a0:	f004 ffd0 	bl	8008844 <SetButtonEvents>
 80038a4:	e7a6      	b.n	80037f4 <LoadEEbuttons+0x10>
			}
		}
	}
	
	return result;
}
 80038a6:	2000      	movs	r0, #0
 80038a8:	b009      	add	sp, #36	; 0x24
 80038aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ac:	20001744 	.word	0x20001744

080038b0 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80038b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b2:	46d6      	mov	lr, sl
 80038b4:	464f      	mov	r7, r9
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b083      	sub	sp, #12
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80038ba:	2032      	movs	r0, #50	; 0x32
 80038bc:	f011 fc00 	bl	80150c0 <malloc>
 80038c0:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 80038c2:	d065      	beq.n	8003990 <LoadROsnippets+0xe0>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80038c4:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <LoadROsnippets+0xf0>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2bfe      	cmp	r3, #254	; 0xfe
 80038ca:	d163      	bne.n	8003994 <LoadROsnippets+0xe4>
		return BOS_ERROR;
	
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80038cc:	2600      	movs	r6, #0
	int currentAdd = RO_MID_ADDRESS;
 80038ce:	4c34      	ldr	r4, [pc, #208]	; (80039a0 <LoadROsnippets+0xf0>)
 80038d0:	e04b      	b.n	800396a <LoadROsnippets+0xba>
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80038d2:	7822      	ldrb	r2, [r4, #0]
 80038d4:	54fa      	strb	r2, [r7, r3]
		for(i =0; i < sizeof(snippet_t); i++)
 80038d6:	3301      	adds	r3, #1
 80038d8:	b2db      	uxtb	r3, r3
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80038da:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 80038dc:	2b13      	cmp	r3, #19
 80038de:	d9f8      	bls.n	80038d2 <LoadROsnippets+0x22>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80038e0:	46b2      	mov	sl, r6
 80038e2:	00b3      	lsls	r3, r6, #2
 80038e4:	199b      	adds	r3, r3, r6
 80038e6:	009a      	lsls	r2, r3, #2
 80038e8:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <LoadROsnippets+0xf4>)
 80038ea:	4691      	mov	r9, r2
 80038ec:	4499      	add	r9, r3
 80038ee:	1c79      	adds	r1, r7, #1
 80038f0:	2214      	movs	r2, #20
 80038f2:	4648      	mov	r0, r9
 80038f4:	f011 fe31 	bl	801555a <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 80038f8:	2214      	movs	r2, #20
 80038fa:	2100      	movs	r1, #0
 80038fc:	0038      	movs	r0, r7
 80038fe:	f011 fe35 	bl	801556c <memset>
		i =0;
 8003902:	2500      	movs	r5, #0
		// Load commands until you get next 0xFE
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003904:	e003      	b.n	800390e <LoadROsnippets+0x5e>
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003906:	557a      	strb	r2, [r7, r5]
			++currentAdd;
 8003908:	3401      	adds	r4, #1
			++i;
 800390a:	3501      	adds	r5, #1
 800390c:	b2ed      	uxtb	r5, r5
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800390e:	9401      	str	r4, [sp, #4]
 8003910:	7822      	ldrb	r2, [r4, #0]
 8003912:	1c93      	adds	r3, r2, #2
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d901      	bls.n	800391e <LoadROsnippets+0x6e>
 800391a:	2d31      	cmp	r5, #49	; 0x31
 800391c:	d9f3      	bls.n	8003906 <LoadROsnippets+0x56>
		}
		if(snipBuffer[i - 1] != 0)
 800391e:	197b      	adds	r3, r7, r5
 8003920:	3b01      	subs	r3, #1
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <LoadROsnippets+0x7c>
			++i;	// String termination char was not recorded, then add one
 8003928:	3501      	adds	r5, #1
 800392a:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd =(char* )malloc(i);
 800392c:	0028      	movs	r0, r5
 800392e:	f011 fbc7 	bl	80150c0 <malloc>
 8003932:	4653      	mov	r3, sl
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4453      	add	r3, sl
 8003938:	009a      	lsls	r2, r3, #2
 800393a:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <LoadROsnippets+0xf4>)
 800393c:	189b      	adds	r3, r3, r2
 800393e:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003940:	2800      	cmp	r0, #0
 8003942:	d016      	beq.n	8003972 <LoadROsnippets+0xc2>
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003944:	002a      	movs	r2, r5
 8003946:	0039      	movs	r1, r7
 8003948:	f011 fe07 	bl	801555a <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800394c:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <LoadROsnippets+0xf8>)
 800394e:	7813      	ldrb	r3, [r2, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003954:	002a      	movs	r2, r5
 8003956:	2100      	movs	r1, #0
 8003958:	0038      	movs	r0, r7
 800395a:	f011 fe07 	bl	801556c <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 800395e:	9b01      	ldr	r3, [sp, #4]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2bfe      	cmp	r3, #254	; 0xfe
 8003964:	d10f      	bne.n	8003986 <LoadROsnippets+0xd6>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003966:	3601      	adds	r6, #1
 8003968:	b2f6      	uxtb	r6, r6
 800396a:	2e04      	cmp	r6, #4
 800396c:	d80b      	bhi.n	8003986 <LoadROsnippets+0xd6>
		for(i =0; i < sizeof(snippet_t); i++)
 800396e:	2300      	movs	r3, #0
 8003970:	e7b4      	b.n	80038dc <LoadROsnippets+0x2c>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003972:	2214      	movs	r2, #20
 8003974:	2100      	movs	r1, #0
 8003976:	4648      	mov	r0, r9
 8003978:	f011 fdf8 	bl	801556c <memset>
			free(snipBuffer);
 800397c:	0038      	movs	r0, r7
 800397e:	f011 fba9 	bl	80150d4 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003982:	200e      	movs	r0, #14
 8003984:	e007      	b.n	8003996 <LoadROsnippets+0xe6>
			break;
	}
	
	free(snipBuffer);
 8003986:	0038      	movs	r0, r7
 8003988:	f011 fba4 	bl	80150d4 <free>
	return BOS_OK;
 800398c:	2000      	movs	r0, #0
 800398e:	e002      	b.n	8003996 <LoadROsnippets+0xe6>
		return BOS_MEM_FULL;
 8003990:	20fb      	movs	r0, #251	; 0xfb
 8003992:	e000      	b.n	8003996 <LoadROsnippets+0xe6>
		return BOS_ERROR;
 8003994:	20ff      	movs	r0, #255	; 0xff
}
 8003996:	b003      	add	sp, #12
 8003998:	bc0c      	pop	{r2, r3}
 800399a:	4691      	mov	r9, r2
 800399c:	469a      	mov	sl, r3
 800399e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a0:	0801dc00 	.word	0x0801dc00
 80039a4:	20007068 	.word	0x20007068
 80039a8:	20001217 	.word	0x20001217

080039ac <LoadEEvars>:
void LoadEEvars(void){
 80039ac:	b510      	push	{r4, lr}
	LoadROtopology();
 80039ae:	f7ff fcb9 	bl	8003324 <LoadROtopology>
	LoadEEportsDir();
 80039b2:	f7ff fd05 	bl	80033c0 <LoadEEportsDir>
	LoadEEalias();
 80039b6:	f7ff fd1f 	bl	80033f8 <LoadEEalias>
	LoadEEgroup();
 80039ba:	f7ff fd57 	bl	800346c <LoadEEgroup>
	LoadEEstreams();
 80039be:	f7ff fda1 	bl	8003504 <LoadEEstreams>
	LoadEEparams();
 80039c2:	f7ff fe4b 	bl	800365c <LoadEEparams>
	LoadEEbuttons();
 80039c6:	f7ff ff0d 	bl	80037e4 <LoadEEbuttons>
	LoadROsnippets();
 80039ca:	f7ff ff71 	bl	80038b0 <LoadROsnippets>
}
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 80039d0:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80039d2:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80039d4:	2600      	movs	r6, #0
	for(uint8_t i =1; i <= N; i++){
 80039d6:	e005      	b.n	80039e4 <SaveEEportsDir+0x14>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80039d8:	1c60      	adds	r0, r4, #1
 80039da:	f004 f9f9 	bl	8007dd0 <EE_WriteVariable>
 80039de:	e00c      	b.n	80039fa <SaveEEportsDir+0x2a>
	for(uint8_t i =1; i <= N; i++){
 80039e0:	3401      	adds	r4, #1
 80039e2:	b2e4      	uxtb	r4, r4
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <SaveEEportsDir+0x38>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	42a3      	cmp	r3, r4
 80039ea:	d30b      	bcc.n	8003a04 <SaveEEportsDir+0x34>
		if(arrayPortsDir[i - 1])
 80039ec:	0025      	movs	r5, r4
 80039ee:	1e63      	subs	r3, r4, #1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <SaveEEportsDir+0x3c>)
 80039f4:	5a99      	ldrh	r1, [r3, r2]
 80039f6:	2900      	cmp	r1, #0
 80039f8:	d1ee      	bne.n	80039d8 <SaveEEportsDir+0x8>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80039fa:	3502      	adds	r5, #2
 80039fc:	2d1b      	cmp	r5, #27
 80039fe:	ddef      	ble.n	80039e0 <SaveEEportsDir+0x10>
			result =BOS_ERR_EEPROM;
 8003a00:	260a      	movs	r6, #10
 8003a02:	e7ed      	b.n	80039e0 <SaveEEportsDir+0x10>
	}
	
	return result;
}
 8003a04:	0030      	movs	r0, r6
 8003a06:	bd70      	pop	{r4, r5, r6, pc}
 8003a08:	20000024 	.word	0x20000024
 8003a0c:	200074e4 	.word	0x200074e4

08003a10 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003a12:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003a14:	2500      	movs	r5, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003a16:	e017      	b.n	8003a48 <SaveEEalias+0x38>
	    {
		if(moduleAlias[i][0]){
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003a18:	1e60      	subs	r0, r4, #1
 8003a1a:	00ba      	lsls	r2, r7, #2
 8003a1c:	19d2      	adds	r2, r2, r7
 8003a1e:	0051      	lsls	r1, r2, #1
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <SaveEEalias+0x58>)
 8003a22:	185b      	adds	r3, r3, r1
 8003a24:	5c19      	ldrb	r1, [r3, r0]
 8003a26:	0209      	lsls	r1, r1, #8
 8003a28:	5d1b      	ldrb	r3, [r3, r4]
 8003a2a:	18c9      	adds	r1, r1, r3
 8003a2c:	b289      	uxth	r1, r1
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003a2e:	0028      	movs	r0, r5
 8003a30:	301c      	adds	r0, #28
 8003a32:	b280      	uxth	r0, r0
 8003a34:	f004 f9cc 	bl	8007dd0 <EE_WriteVariable>
				add++;
 8003a38:	3501      	adds	r5, #1
 8003a3a:	b2ad      	uxth	r5, r5
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003a3c:	3402      	adds	r4, #2
 8003a3e:	b2e4      	uxtb	r4, r4
 8003a40:	2c09      	cmp	r4, #9
 8003a42:	d9e9      	bls.n	8003a18 <SaveEEalias+0x8>
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003a44:	3601      	adds	r6, #1
 8003a46:	b2f6      	uxtb	r6, r6
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <SaveEEalias+0x5c>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	42b3      	cmp	r3, r6
 8003a4e:	d309      	bcc.n	8003a64 <SaveEEalias+0x54>
		if(moduleAlias[i][0]){
 8003a50:	0037      	movs	r7, r6
 8003a52:	00b3      	lsls	r3, r6, #2
 8003a54:	199b      	adds	r3, r3, r6
 8003a56:	005a      	lsls	r2, r3, #1
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <SaveEEalias+0x58>)
 8003a5a:	5cd3      	ldrb	r3, [r2, r3]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f1      	beq.n	8003a44 <SaveEEalias+0x34>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003a60:	2401      	movs	r4, #1
 8003a62:	e7ed      	b.n	8003a40 <SaveEEalias+0x30>
			}
		}
	}
	
	return result;
}
 8003a64:	2000      	movs	r0, #0
 8003a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a68:	20000f64 	.word	0x20000f64
 8003a6c:	20000024 	.word	0x20000024

08003a70 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	46de      	mov	lr, fp
 8003a74:	4657      	mov	r7, sl
 8003a76:	464e      	mov	r6, r9
 8003a78:	4645      	mov	r5, r8
 8003a7a:	b5e0      	push	{r5, r6, r7, lr}
 8003a7c:	000f      	movs	r7, r1
 8003a7e:	0016      	movs	r6, r2
 8003a80:	4699      	mov	r9, r3
 8003a82:	ab0a      	add	r3, sp, #40	; 0x28
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	469b      	mov	fp, r3
 8003a88:	ab0b      	add	r3, sp, #44	; 0x2c
 8003a8a:	781d      	ldrb	r5, [r3, #0]
 8003a8c:	ab0c      	add	r3, sp, #48	; 0x30
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	469a      	mov	sl, r3
 8003a92:	ab0d      	add	r3, sp, #52	; 0x34
 8003a94:	781c      	ldrb	r4, [r3, #0]
 8003a96:	ab0e      	add	r3, sp, #56	; 0x38
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003a9c:	b281      	uxth	r1, r0
 8003a9e:	20e4      	movs	r0, #228	; 0xe4
 8003aa0:	f004 f996 	bl	8007dd0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003aa4:	0a39      	lsrs	r1, r7, #8
 8003aa6:	b289      	uxth	r1, r1
 8003aa8:	20e5      	movs	r0, #229	; 0xe5
 8003aaa:	f004 f991 	bl	8007dd0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003aae:	b2b9      	uxth	r1, r7
 8003ab0:	20e6      	movs	r0, #230	; 0xe6
 8003ab2:	f004 f98d 	bl	8007dd0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003ab6:	0a31      	lsrs	r1, r6, #8
 8003ab8:	b289      	uxth	r1, r1
 8003aba:	20e7      	movs	r0, #231	; 0xe7
 8003abc:	f004 f988 	bl	8007dd0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003ac0:	b2b1      	uxth	r1, r6
 8003ac2:	20e8      	movs	r0, #232	; 0xe8
 8003ac4:	f004 f984 	bl	8007dd0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003ac8:	464b      	mov	r3, r9
 8003aca:	0219      	lsls	r1, r3, #8
 8003acc:	4459      	add	r1, fp
 8003ace:	b289      	uxth	r1, r1
 8003ad0:	20e9      	movs	r0, #233	; 0xe9
 8003ad2:	f004 f97d 	bl	8007dd0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003ad6:	022d      	lsls	r5, r5, #8
 8003ad8:	4455      	add	r5, sl
 8003ada:	b2a9      	uxth	r1, r5
 8003adc:	20ea      	movs	r0, #234	; 0xea
 8003ade:	f004 f977 	bl	8007dd0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003ae2:	0224      	lsls	r4, r4, #8
 8003ae4:	4444      	add	r4, r8
 8003ae6:	b2a1      	uxth	r1, r4
 8003ae8:	20eb      	movs	r0, #235	; 0xeb
 8003aea:	f004 f971 	bl	8007dd0 <EE_WriteVariable>
	
	return result;
}
 8003aee:	2000      	movs	r0, #0
 8003af0:	bc3c      	pop	{r2, r3, r4, r5}
 8003af2:	4690      	mov	r8, r2
 8003af4:	4699      	mov	r9, r3
 8003af6:	46a2      	mov	sl, r4
 8003af8:	46ab      	mov	fp, r5
 8003afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003afc <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003afc:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003afe:	4c1f      	ldr	r4, [pc, #124]	; (8003b7c <SaveEEparams+0x80>)
 8003b00:	7863      	ldrb	r3, [r4, #1]
 8003b02:	015b      	lsls	r3, r3, #5
 8003b04:	7821      	ldrb	r1, [r4, #0]
 8003b06:	4319      	orrs	r1, r3
 8003b08:	208a      	movs	r0, #138	; 0x8a
 8003b0a:	0040      	lsls	r0, r0, #1
 8003b0c:	f004 f960 	bl	8007dd0 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 8003b10:	7923      	ldrb	r3, [r4, #4]
 8003b12:	03db      	lsls	r3, r3, #15
 8003b14:	2206      	movs	r2, #6
 8003b16:	5ea1      	ldrsh	r1, [r4, r2]
 8003b18:	4319      	orrs	r1, r3
 8003b1a:	b289      	uxth	r1, r1
 8003b1c:	208e      	movs	r0, #142	; 0x8e
 8003b1e:	0040      	lsls	r0, r0, #1
 8003b20:	f004 f956 	bl	8007dd0 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003b24:	4c16      	ldr	r4, [pc, #88]	; (8003b80 <SaveEEparams+0x84>)
 8003b26:	8821      	ldrh	r1, [r4, #0]
 8003b28:	2016      	movs	r0, #22
 8003b2a:	30ff      	adds	r0, #255	; 0xff
 8003b2c:	f004 f950 	bl	8007dd0 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003b30:	8861      	ldrh	r1, [r4, #2]
 8003b32:	208b      	movs	r0, #139	; 0x8b
 8003b34:	0040      	lsls	r0, r0, #1
 8003b36:	f004 f94b 	bl	8007dd0 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003b3a:	7963      	ldrb	r3, [r4, #5]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	7b21      	ldrb	r1, [r4, #12]
 8003b40:	4319      	orrs	r1, r3
 8003b42:	2018      	movs	r0, #24
 8003b44:	30ff      	adds	r0, #255	; 0xff
 8003b46:	f004 f943 	bl	8007dd0 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003b4a:	8921      	ldrh	r1, [r4, #8]
 8003b4c:	208c      	movs	r0, #140	; 0x8c
 8003b4e:	0040      	lsls	r0, r0, #1
 8003b50:	f004 f93e 	bl	8007dd0 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8003b54:	8961      	ldrh	r1, [r4, #10]
 8003b56:	201a      	movs	r0, #26
 8003b58:	30ff      	adds	r0, #255	; 0xff
 8003b5a:	f004 f939 	bl	8007dd0 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003b5e:	7b63      	ldrb	r3, [r4, #13]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	7921      	ldrb	r1, [r4, #4]
 8003b64:	4319      	orrs	r1, r3
 8003b66:	208d      	movs	r0, #141	; 0x8d
 8003b68:	0040      	lsls	r0, r0, #1
 8003b6a:	f004 f931 	bl	8007dd0 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003b6e:	7ea1      	ldrb	r1, [r4, #26]
 8003b70:	201c      	movs	r0, #28
 8003b72:	30ff      	adds	r0, #255	; 0xff
 8003b74:	f004 f92c 	bl	8007dd0 <EE_WriteVariable>
	
	return result;
}
 8003b78:	2000      	movs	r0, #0
 8003b7a:	bd10      	pop	{r4, pc}
 8003b7c:	20006fcc 	.word	0x20006fcc
 8003b80:	2000704c 	.word	0x2000704c

08003b84 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003b84:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003b86:	2234      	movs	r2, #52	; 0x34
 8003b88:	2100      	movs	r1, #0
 8003b8a:	480f      	ldr	r0, [pc, #60]	; (8003bc8 <ClearEEportsDir+0x44>)
 8003b8c:	f011 fcee 	bl	801556c <memset>
	
	for(uint8_t i =1; i <= N; i++){
 8003b90:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003b92:	2600      	movs	r6, #0
	for(uint8_t i =1; i <= N; i++){
 8003b94:	e005      	b.n	8003ba2 <ClearEEportsDir+0x1e>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003b96:	1c60      	adds	r0, r4, #1
 8003b98:	f004 f91a 	bl	8007dd0 <EE_WriteVariable>
 8003b9c:	e00c      	b.n	8003bb8 <ClearEEportsDir+0x34>
	for(uint8_t i =1; i <= N; i++){
 8003b9e:	3401      	adds	r4, #1
 8003ba0:	b2e4      	uxtb	r4, r4
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <ClearEEportsDir+0x48>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	42a3      	cmp	r3, r4
 8003ba8:	d30b      	bcc.n	8003bc2 <ClearEEportsDir+0x3e>
		if(arrayPortsDir[i - 1])
 8003baa:	0025      	movs	r5, r4
 8003bac:	1e63      	subs	r3, r4, #1
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4a05      	ldr	r2, [pc, #20]	; (8003bc8 <ClearEEportsDir+0x44>)
 8003bb2:	5a99      	ldrh	r1, [r3, r2]
 8003bb4:	2900      	cmp	r1, #0
 8003bb6:	d1ee      	bne.n	8003b96 <ClearEEportsDir+0x12>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003bb8:	3502      	adds	r5, #2
 8003bba:	2d1b      	cmp	r5, #27
 8003bbc:	ddef      	ble.n	8003b9e <ClearEEportsDir+0x1a>
			result =BOS_ERR_EEPROM;
 8003bbe:	260a      	movs	r6, #10
 8003bc0:	e7ed      	b.n	8003b9e <ClearEEportsDir+0x1a>
	}
	
	return result;
}
 8003bc2:	0030      	movs	r0, r6
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	200074e4 	.word	0x200074e4
 8003bcc:	20000024 	.word	0x20000024

08003bd0 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 8003bd0:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <EE_FormatForFactoryReset+0x1c>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <EE_FormatForFactoryReset+0x20>)
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d006      	beq.n	8003bea <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 8003bdc:	f004 f90e 	bl	8007dfc <EE_Format>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d102      	bne.n	8003bea <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003be4:	4b01      	ldr	r3, [pc, #4]	; (8003bec <EE_FormatForFactoryReset+0x1c>)
 8003be6:	4a02      	ldr	r2, [pc, #8]	; (8003bf0 <EE_FormatForFactoryReset+0x20>)
 8003be8:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003bea:	bd10      	pop	{r4, pc}
 8003bec:	20007ff0 	.word	0x20007ff0
 8003bf0:	beefdead 	.word	0xbeefdead

08003bf4 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003bf8:	2512      	movs	r5, #18
 8003bfa:	446d      	add	r5, sp
 8003bfc:	ab04      	add	r3, sp, #16
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	ab07      	add	r3, sp, #28
 8003c02:	002a      	movs	r2, r5
 8003c04:	a908      	add	r1, sp, #32
 8003c06:	2001      	movs	r0, #1
 8003c08:	f00b f9f6 	bl	800eff8 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003c0c:	ac03      	add	r4, sp, #12
 8003c0e:	9400      	str	r4, [sp, #0]
 8003c10:	ab05      	add	r3, sp, #20
 8003c12:	220e      	movs	r2, #14
 8003c14:	446a      	add	r2, sp
 8003c16:	a906      	add	r1, sp, #24
 8003c18:	2002      	movs	r0, #2
 8003c1a:	f00b f9ed 	bl	800eff8 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2600      	movs	r6, #0
 8003c24:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003c26:	882b      	ldrh	r3, [r5, #0]
 8003c28:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003c2a:	a909      	add	r1, sp, #36	; 0x24
 8003c2c:	9808      	ldr	r0, [sp, #32]
 8003c2e:	f00f fb91 	bl	8013354 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c32:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c34:	2302      	movs	r3, #2
 8003c36:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003c38:	8823      	ldrh	r3, [r4, #0]
 8003c3a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003c3c:	a909      	add	r1, sp, #36	; 0x24
 8003c3e:	9805      	ldr	r0, [sp, #20]
 8003c40:	f00f fb88 	bl	8013354 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003c44:	8829      	ldrh	r1, [r5, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	9808      	ldr	r0, [sp, #32]
 8003c4a:	f00f fcd4 	bl	80135f6 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003c4e:	2005      	movs	r0, #5
 8003c50:	f00b fd68 	bl	800f724 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003c54:	8821      	ldrh	r1, [r4, #0]
 8003c56:	9805      	ldr	r0, [sp, #20]
 8003c58:	f00f fcc6 	bl	80135e8 <HAL_GPIO_ReadPin>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d002      	beq.n	8003c66 <IsLowerCLIbaud+0x72>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003c60:	2000      	movs	r0, #0
}
 8003c62:	b00e      	add	sp, #56	; 0x38
 8003c64:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003c66:	2312      	movs	r3, #18
 8003c68:	446b      	add	r3, sp
 8003c6a:	8819      	ldrh	r1, [r3, #0]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	9808      	ldr	r0, [sp, #32]
 8003c70:	f00f fcc1 	bl	80135f6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003c74:	2005      	movs	r0, #5
 8003c76:	f00b fd55 	bl	800f724 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003c7a:	ab03      	add	r3, sp, #12
 8003c7c:	8819      	ldrh	r1, [r3, #0]
 8003c7e:	9805      	ldr	r0, [sp, #20]
 8003c80:	f00f fcb2 	bl	80135e8 <HAL_GPIO_ReadPin>
 8003c84:	2801      	cmp	r0, #1
 8003c86:	d0ec      	beq.n	8003c62 <IsLowerCLIbaud+0x6e>
	return 0;
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e7ea      	b.n	8003c62 <IsLowerCLIbaud+0x6e>

08003c8c <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8003c8c:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8003c8e:	f00b fedd 	bl	800fa4c <GetUart>
 8003c92:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 8003c94:	23e1      	movs	r3, #225	; 0xe1
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8003c9a:	2380      	movs	r3, #128	; 0x80
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	015b      	lsls	r3, r3, #5
 8003ca4:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8003ca6:	f011 f867 	bl	8014d78 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8003caa:	6822      	ldr	r2, [r4, #0]
 8003cac:	6813      	ldr	r3, [r2, #0]
 8003cae:	2120      	movs	r1, #32
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bd10      	pop	{r4, pc}
	...

08003cb8 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	0005      	movs	r5, r0
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003cbc:	2400      	movs	r4, #0
 8003cbe:	2c02      	cmp	r4, #2
 8003cc0:	d810      	bhi.n	8003ce4 <IsModuleParameter+0x2c>
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003cc2:	0063      	lsls	r3, r4, #1
 8003cc4:	191b      	adds	r3, r3, r4
 8003cc6:	009a      	lsls	r2, r3, #2
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <IsModuleParameter+0x30>)
 8003cca:	189b      	adds	r3, r3, r2
 8003ccc:	6899      	ldr	r1, [r3, #8]
 8003cce:	0028      	movs	r0, r5
 8003cd0:	f7fc fa18 	bl	8000104 <strcmp>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d002      	beq.n	8003cde <IsModuleParameter+0x26>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003cd8:	3401      	adds	r4, #1
 8003cda:	b2e4      	uxtb	r4, r4
 8003cdc:	e7ef      	b.n	8003cbe <IsModuleParameter+0x6>
			return i + 1;
 8003cde:	3401      	adds	r4, #1
 8003ce0:	b2e0      	uxtb	r0, r4
 8003ce2:	e000      	b.n	8003ce6 <IsModuleParameter+0x2e>
	}
	return 0;
 8003ce4:	2000      	movs	r0, #0
}
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	20000098 	.word	0x20000098

08003cec <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003cf0:	2500      	movs	r5, #0
 8003cf2:	e001      	b.n	8003cf8 <IsMathOperator+0xc>
 8003cf4:	3501      	adds	r5, #1
 8003cf6:	b2ed      	uxtb	r5, r5
 8003cf8:	2d05      	cmp	r5, #5
 8003cfa:	d825      	bhi.n	8003d48 <IsMathOperator+0x5c>
		if(!strcmp(string,"="))
 8003cfc:	4918      	ldr	r1, [pc, #96]	; (8003d60 <IsMathOperator+0x74>)
 8003cfe:	0020      	movs	r0, r4
 8003d00:	f7fc fa00 	bl	8000104 <strcmp>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d021      	beq.n	8003d4c <IsMathOperator+0x60>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 8003d08:	4916      	ldr	r1, [pc, #88]	; (8003d64 <IsMathOperator+0x78>)
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	f7fc f9fa 	bl	8000104 <strcmp>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d01d      	beq.n	8003d50 <IsMathOperator+0x64>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003d14:	4914      	ldr	r1, [pc, #80]	; (8003d68 <IsMathOperator+0x7c>)
 8003d16:	0020      	movs	r0, r4
 8003d18:	f7fc f9f4 	bl	8000104 <strcmp>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d019      	beq.n	8003d54 <IsMathOperator+0x68>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003d20:	4912      	ldr	r1, [pc, #72]	; (8003d6c <IsMathOperator+0x80>)
 8003d22:	0020      	movs	r0, r4
 8003d24:	f7fc f9ee 	bl	8000104 <strcmp>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d015      	beq.n	8003d58 <IsMathOperator+0x6c>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003d2c:	4910      	ldr	r1, [pc, #64]	; (8003d70 <IsMathOperator+0x84>)
 8003d2e:	0020      	movs	r0, r4
 8003d30:	f7fc f9e8 	bl	8000104 <strcmp>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d011      	beq.n	8003d5c <IsMathOperator+0x70>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003d38:	490e      	ldr	r1, [pc, #56]	; (8003d74 <IsMathOperator+0x88>)
 8003d3a:	0020      	movs	r0, r4
 8003d3c:	f7fc f9e2 	bl	8000104 <strcmp>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d1d7      	bne.n	8003cf4 <IsMathOperator+0x8>
			return MATH_NOT_EQUAL;
 8003d44:	2006      	movs	r0, #6
 8003d46:	e000      	b.n	8003d4a <IsMathOperator+0x5e>
	}
	return 0;
 8003d48:	2000      	movs	r0, #0
}
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	e7fc      	b.n	8003d4a <IsMathOperator+0x5e>
			return MATH_GREATER;
 8003d50:	2002      	movs	r0, #2
 8003d52:	e7fa      	b.n	8003d4a <IsMathOperator+0x5e>
			return MATH_SMALLER;
 8003d54:	2003      	movs	r0, #3
 8003d56:	e7f8      	b.n	8003d4a <IsMathOperator+0x5e>
			return MATH_GREATER_EQUAL;
 8003d58:	2004      	movs	r0, #4
 8003d5a:	e7f6      	b.n	8003d4a <IsMathOperator+0x5e>
			return MATH_SMALLER_EQUAL;
 8003d5c:	2005      	movs	r0, #5
 8003d5e:	e7f4      	b.n	8003d4a <IsMathOperator+0x5e>
 8003d60:	0801a140 	.word	0x0801a140
 8003d64:	0801a144 	.word	0x0801a144
 8003d68:	0801a148 	.word	0x0801a148
 8003d6c:	0801a14c 	.word	0x0801a14c
 8003d70:	0801a150 	.word	0x0801a150
 8003d74:	0801a154 	.word	0x0801a154

08003d78 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003d78:	b530      	push	{r4, r5, lr}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003d7e:	2401      	movs	r4, #1
 8003d80:	e001      	b.n	8003d86 <ExploreNeighbors+0xe>
 8003d82:	3401      	adds	r4, #1
 8003d84:	b2e4      	uxtb	r4, r4
 8003d86:	2c05      	cmp	r4, #5
 8003d88:	d814      	bhi.n	8003db4 <ExploreNeighbors+0x3c>
		if(port != ignore){
 8003d8a:	42ac      	cmp	r4, r5
 8003d8c:	d0f9      	beq.n	8003d82 <ExploreNeighbors+0xa>
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <ExploreNeighbors+0x44>)
 8003d90:	881a      	ldrh	r2, [r3, #0]
 8003d92:	0a11      	lsrs	r1, r2, #8
 8003d94:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <ExploreNeighbors+0x48>)
 8003d96:	7019      	strb	r1, [r3, #0]
			messageParams[1] =(uint8_t )myPN;
 8003d98:	705a      	strb	r2, [r3, #1]
			messageParams[2] =port;
 8003d9a:	709c      	strb	r4, [r3, #2]
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	3307      	adds	r3, #7
 8003da2:	2200      	movs	r2, #0
 8003da4:	2100      	movs	r1, #0
 8003da6:	0020      	movs	r0, r4
 8003da8:	f005 fcdc 	bl	8009764 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003dac:	200a      	movs	r0, #10
 8003dae:	f00b ff9f 	bl	800fcf0 <osDelay>
 8003db2:	e7e6      	b.n	8003d82 <ExploreNeighbors+0xa>
		}
	}
	
	return result;
}
 8003db4:	2000      	movs	r0, #0
 8003db6:	b003      	add	sp, #12
 8003db8:	bd30      	pop	{r4, r5, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	20000058 	.word	0x20000058
 8003dc0:	20000f34 	.word	0x20000f34

08003dc4 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc6:	46de      	mov	lr, fp
 8003dc8:	4657      	mov	r7, sl
 8003dca:	464e      	mov	r6, r9
 8003dcc:	4645      	mov	r5, r8
 8003dce:	b5e0      	push	{r5, r6, r7, lr}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003dd4:	4b44      	ldr	r3, [pc, #272]	; (8003ee8 <FindBroadcastRoutes+0x124>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	3307      	adds	r3, #7
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	466a      	mov	r2, sp
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	469d      	mov	sp, r3
 8003de4:	466d      	mov	r5, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003de6:	2300      	movs	r3, #0
 8003de8:	e006      	b.n	8003df8 <FindBroadcastRoutes+0x34>
		modules[m] =0;
 8003dea:	2200      	movs	r2, #0
 8003dec:	54ea      	strb	r2, [r5, r3]
		bcastRoutes[m] =0;
 8003dee:	005c      	lsls	r4, r3, #1
 8003df0:	493e      	ldr	r1, [pc, #248]	; (8003eec <FindBroadcastRoutes+0x128>)
 8003df2:	5262      	strh	r2, [r4, r1]
	for(m =0; m < N; m++){
 8003df4:	3301      	adds	r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4a3b      	ldr	r2, [pc, #236]	; (8003ee8 <FindBroadcastRoutes+0x124>)
 8003dfa:	7812      	ldrb	r2, [r2, #0]
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d3f4      	bcc.n	8003dea <FindBroadcastRoutes+0x26>
	}
	modules[src - 1] =++level;					// Tag the source
 8003e00:	3801      	subs	r0, #1
 8003e02:	2301      	movs	r3, #1
 8003e04:	542b      	strb	r3, [r5, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
 8003e06:	2201      	movs	r2, #1
 8003e08:	e001      	b.n	8003e0e <FindBroadcastRoutes+0x4a>
 8003e0a:	3201      	adds	r2, #1
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	2a06      	cmp	r2, #6
 8003e10:	d819      	bhi.n	8003e46 <FindBroadcastRoutes+0x82>
		if(array[src - 1][p]){
 8003e12:	0083      	lsls	r3, r0, #2
 8003e14:	181b      	adds	r3, r3, r0
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	181b      	adds	r3, r3, r0
 8003e1a:	189b      	adds	r3, r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4934      	ldr	r1, [pc, #208]	; (8003ef0 <FindBroadcastRoutes+0x12c>)
 8003e20:	5a5b      	ldrh	r3, [r3, r1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f1      	beq.n	8003e0a <FindBroadcastRoutes+0x46>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003e26:	1e54      	subs	r4, r2, #1
 8003e28:	2101      	movs	r1, #1
 8003e2a:	40a1      	lsls	r1, r4
 8003e2c:	000c      	movs	r4, r1
 8003e2e:	4e2f      	ldr	r6, [pc, #188]	; (8003eec <FindBroadcastRoutes+0x128>)
 8003e30:	0041      	lsls	r1, r0, #1
 8003e32:	468c      	mov	ip, r1
 8003e34:	5b89      	ldrh	r1, [r1, r6]
 8003e36:	4321      	orrs	r1, r4
 8003e38:	4664      	mov	r4, ip
 8003e3a:	53a1      	strh	r1, [r4, r6]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003e3c:	08db      	lsrs	r3, r3, #3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	2102      	movs	r1, #2
 8003e42:	54e9      	strb	r1, [r5, r3]
 8003e44:	e7e1      	b.n	8003e0a <FindBroadcastRoutes+0x46>
	++level;												// Move one level
 8003e46:	2302      	movs	r3, #2
 8003e48:	469b      	mov	fp, r3
	
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do{
		untaged =0;								// Reset the untaged counter
		++level;											// Move one level
 8003e4a:	465e      	mov	r6, fp
 8003e4c:	3601      	adds	r6, #1
 8003e4e:	b2f3      	uxtb	r3, r6
 8003e50:	469b      	mov	fp, r3
		untaged =0;								// Reset the untaged counter
 8003e52:	2300      	movs	r3, #0
 8003e54:	469c      	mov	ip, r3
		
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003e56:	2000      	movs	r0, #0
 8003e58:	e02e      	b.n	8003eb8 <FindBroadcastRoutes+0xf4>
		    {
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003e5a:	3201      	adds	r2, #1
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	2a06      	cmp	r2, #6
 8003e60:	d828      	bhi.n	8003eb4 <FindBroadcastRoutes+0xf0>
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003e62:	00a3      	lsls	r3, r4, #2
 8003e64:	191b      	adds	r3, r3, r4
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	191b      	adds	r3, r3, r4
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4920      	ldr	r1, [pc, #128]	; (8003ef0 <FindBroadcastRoutes+0x12c>)
 8003e70:	5a5b      	ldrh	r3, [r3, r1]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f1      	beq.n	8003e5a <FindBroadcastRoutes+0x96>
 8003e76:	08db      	lsrs	r3, r3, #3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	607b      	str	r3, [r7, #4]
 8003e7c:	5ce9      	ldrb	r1, [r5, r3]
 8003e7e:	2900      	cmp	r1, #0
 8003e80:	d1eb      	bne.n	8003e5a <FindBroadcastRoutes+0x96>
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003e82:	0011      	movs	r1, r2
 8003e84:	3901      	subs	r1, #1
 8003e86:	2601      	movs	r6, #1
 8003e88:	408e      	lsls	r6, r1
 8003e8a:	46b0      	mov	r8, r6
 8003e8c:	4917      	ldr	r1, [pc, #92]	; (8003eec <FindBroadcastRoutes+0x128>)
 8003e8e:	4689      	mov	r9, r1
 8003e90:	0061      	lsls	r1, r4, #1
 8003e92:	468a      	mov	sl, r1
 8003e94:	4649      	mov	r1, r9
 8003e96:	4656      	mov	r6, sl
 8003e98:	5a71      	ldrh	r1, [r6, r1]
 8003e9a:	4646      	mov	r6, r8
 8003e9c:	4331      	orrs	r1, r6
 8003e9e:	464e      	mov	r6, r9
 8003ea0:	4653      	mov	r3, sl
 8003ea2:	5399      	strh	r1, [r3, r6]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4659      	mov	r1, fp
 8003ea8:	54e9      	strb	r1, [r5, r3]
						++untaged;
 8003eaa:	4663      	mov	r3, ip
 8003eac:	3301      	adds	r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	469c      	mov	ip, r3
 8003eb2:	e7d2      	b.n	8003e5a <FindBroadcastRoutes+0x96>
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	b2c0      	uxtb	r0, r0
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <FindBroadcastRoutes+0x124>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	4298      	cmp	r0, r3
 8003ebe:	d207      	bcs.n	8003ed0 <FindBroadcastRoutes+0x10c>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003ec0:	0004      	movs	r4, r0
 8003ec2:	5c2a      	ldrb	r2, [r5, r0]
 8003ec4:	465b      	mov	r3, fp
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1f3      	bne.n	8003eb4 <FindBroadcastRoutes+0xf0>
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003ecc:	2201      	movs	r2, #1
 8003ece:	e7c6      	b.n	8003e5e <FindBroadcastRoutes+0x9a>
					}
				}
			}
		}
	} while(untaged);
 8003ed0:	4663      	mov	r3, ip
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1b9      	bne.n	8003e4a <FindBroadcastRoutes+0x86>
	
	return result;
}
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b003      	add	sp, #12
 8003edc:	bc3c      	pop	{r2, r3, r4, r5}
 8003ede:	4690      	mov	r8, r2
 8003ee0:	4699      	mov	r9, r3
 8003ee2:	46a2      	mov	sl, r4
 8003ee4:	46ab      	mov	fp, r5
 8003ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee8:	20000024 	.word	0x20000024
 8003eec:	20000cec 	.word	0x20000cec
 8003ef0:	20000aac 	.word	0x20000aac

08003ef4 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003ef4:	b570      	push	{r4, r5, r6, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003ef6:	780b      	ldrb	r3, [r1, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d103      	bne.n	8003f04 <minArr+0x10>
		smallest =arr[0];
 8003efc:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
		if((arr[i] < smallest) && !Q[i]){
			smallest =arr[i];
 8003efe:	2300      	movs	r3, #0
 8003f00:	2600      	movs	r6, #0
 8003f02:	e002      	b.n	8003f0a <minArr+0x16>
	uint8_t smallest =0xFF;
 8003f04:	24ff      	movs	r4, #255	; 0xff
 8003f06:	e7fa      	b.n	8003efe <minArr+0xa>
	for(int i =0; i < N; i++){
 8003f08:	3301      	adds	r3, #1
 8003f0a:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <minArr+0x34>)
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	dd08      	ble.n	8003f24 <minArr+0x30>
		if((arr[i] < smallest) && !Q[i]){
 8003f12:	5cc2      	ldrb	r2, [r0, r3]
 8003f14:	42a2      	cmp	r2, r4
 8003f16:	d2f7      	bcs.n	8003f08 <minArr+0x14>
 8003f18:	5ccd      	ldrb	r5, [r1, r3]
 8003f1a:	2d00      	cmp	r5, #0
 8003f1c:	d1f4      	bne.n	8003f08 <minArr+0x14>
			index =i;
 8003f1e:	b2de      	uxtb	r6, r3
			smallest =arr[i];
 8003f20:	0014      	movs	r4, r2
 8003f22:	e7f1      	b.n	8003f08 <minArr+0x14>
		}
	}
	
	return index;
}
 8003f24:	0030      	movs	r0, r6
 8003f26:	bd70      	pop	{r4, r5, r6, pc}
 8003f28:	20000024 	.word	0x20000024

08003f2c <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003f2c:	2300      	movs	r3, #0
	char temp =1;
 8003f2e:	2201      	movs	r2, #1
	for(int i =0; i < N; i++){
 8003f30:	e002      	b.n	8003f38 <QnotEmpty+0xc>
		temp &=Q[i];
 8003f32:	5cc1      	ldrb	r1, [r0, r3]
 8003f34:	400a      	ands	r2, r1
	for(int i =0; i < N; i++){
 8003f36:	3301      	adds	r3, #1
 8003f38:	4902      	ldr	r1, [pc, #8]	; (8003f44 <QnotEmpty+0x18>)
 8003f3a:	7809      	ldrb	r1, [r1, #0]
 8003f3c:	4299      	cmp	r1, r3
 8003f3e:	dcf8      	bgt.n	8003f32 <QnotEmpty+0x6>
	}
	
	return temp;
}
 8003f40:	0010      	movs	r0, r2
 8003f42:	4770      	bx	lr
 8003f44:	20000024 	.word	0x20000024

08003f48 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4a:	b08f      	sub	sp, #60	; 0x3c
 8003f4c:	0005      	movs	r5, r0
 8003f4e:	000e      	movs	r6, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003f50:	2232      	movs	r2, #50	; 0x32
 8003f52:	2100      	movs	r1, #0
 8003f54:	a801      	add	r0, sp, #4
 8003f56:	f011 fb09 	bl	801556c <memset>
	memset(route,0,sizeof(route));
 8003f5a:	221a      	movs	r2, #26
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4848      	ldr	r0, [pc, #288]	; (8004080 <FindRoute+0x138>)
 8003f60:	f011 fb04 	bl	801556c <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003f64:	002a      	movs	r2, r5
 8003f66:	3d01      	subs	r5, #1
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4946      	ldr	r1, [pc, #280]	; (8004084 <FindRoute+0x13c>)
 8003f6c:	554b      	strb	r3, [r1, r5]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003f6e:	4946      	ldr	r1, [pc, #280]	; (8004088 <FindRoute+0x140>)
 8003f70:	554b      	strb	r3, [r1, r5]
	for(int col =1; col <= 6; col++){
 8003f72:	2001      	movs	r0, #1
 8003f74:	e000      	b.n	8003f78 <FindRoute+0x30>
 8003f76:	3001      	adds	r0, #1
 8003f78:	2806      	cmp	r0, #6
 8003f7a:	dc16      	bgt.n	8003faa <FindRoute+0x62>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003f7c:	00ab      	lsls	r3, r5, #2
 8003f7e:	195b      	adds	r3, r3, r5
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	195b      	adds	r3, r3, r5
 8003f84:	181b      	adds	r3, r3, r0
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4940      	ldr	r1, [pc, #256]	; (800408c <FindRoute+0x144>)
 8003f8a:	5a5b      	ldrh	r3, [r3, r1]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f2      	beq.n	8003f76 <FindRoute+0x2e>
 8003f90:	08db      	lsrs	r3, r3, #3
 8003f92:	b2b1      	uxth	r1, r6
 8003f94:	428b      	cmp	r3, r1
 8003f96:	d1ee      	bne.n	8003f76 <FindRoute+0x2e>
			routeDist[desID - 1] =1;
 8003f98:	1e73      	subs	r3, r6, #1
 8003f9a:	4a3a      	ldr	r2, [pc, #232]	; (8004084 <FindRoute+0x13c>)
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	54d1      	strb	r1, [r2, r3]
			route[0] =desID;
 8003fa0:	4b37      	ldr	r3, [pc, #220]	; (8004080 <FindRoute+0x138>)
 8003fa2:	701e      	strb	r6, [r3, #0]
			return col;
 8003fa4:	b2c0      	uxtb	r0, r0
}
 8003fa6:	b00f      	add	sp, #60	; 0x3c
 8003fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(int i =1; i <= N; i++){
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <FindRoute+0x68>
 8003fae:	3301      	adds	r3, #1
 8003fb0:	4937      	ldr	r1, [pc, #220]	; (8004090 <FindRoute+0x148>)
 8003fb2:	7809      	ldrb	r1, [r1, #0]
 8003fb4:	4299      	cmp	r1, r3
 8003fb6:	db09      	blt.n	8003fcc <FindRoute+0x84>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d0f8      	beq.n	8003fae <FindRoute+0x66>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003fbc:	1e59      	subs	r1, r3, #1
 8003fbe:	4831      	ldr	r0, [pc, #196]	; (8004084 <FindRoute+0x13c>)
 8003fc0:	24ff      	movs	r4, #255	; 0xff
 8003fc2:	5444      	strb	r4, [r0, r1]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003fc4:	4830      	ldr	r0, [pc, #192]	; (8004088 <FindRoute+0x140>)
 8003fc6:	2400      	movs	r4, #0
 8003fc8:	5444      	strb	r4, [r0, r1]
 8003fca:	e7f0      	b.n	8003fae <FindRoute+0x66>
	uint8_t u =0;
 8003fcc:	2400      	movs	r4, #0
	while(!QnotEmpty(Q)){
 8003fce:	a801      	add	r0, sp, #4
 8003fd0:	f7ff ffac 	bl	8003f2c <QnotEmpty>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d10c      	bne.n	8003ff2 <FindRoute+0xaa>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003fd8:	a901      	add	r1, sp, #4
 8003fda:	482a      	ldr	r0, [pc, #168]	; (8004084 <FindRoute+0x13c>)
 8003fdc:	f7ff ff8a 	bl	8003ef4 <minArr>
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003fe4:	42b4      	cmp	r4, r6
 8003fe6:	d004      	beq.n	8003ff2 <FindRoute+0xaa>
			Q[u - 1] =1;									// Remove u from Q
 8003fe8:	1e61      	subs	r1, r4, #1
 8003fea:	ab01      	add	r3, sp, #4
 8003fec:	2201      	movs	r2, #1
 8003fee:	545a      	strb	r2, [r3, r1]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003ff0:	e003      	b.n	8003ffa <FindRoute+0xb2>
	uint8_t u =0;
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	e025      	b.n	8004042 <FindRoute+0xfa>
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003ff6:	3201      	adds	r2, #1
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	2a06      	cmp	r2, #6
 8003ffc:	d8e7      	bhi.n	8003fce <FindRoute+0x86>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003ffe:	008b      	lsls	r3, r1, #2
 8004000:	185b      	adds	r3, r3, r1
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	185b      	adds	r3, r3, r1
 8004006:	189b      	adds	r3, r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	4820      	ldr	r0, [pc, #128]	; (800408c <FindRoute+0x144>)
 800400c:	5a1b      	ldrh	r3, [r3, r0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f1      	beq.n	8003ff6 <FindRoute+0xae>
				v =(array[u - 1][n] >> 3);
 8004012:	08db      	lsrs	r3, r3, #3
 8004014:	b2db      	uxtb	r3, r3
				if(!Q[v - 1])								// v is still in Q
 8004016:	3b01      	subs	r3, #1
 8004018:	a801      	add	r0, sp, #4
 800401a:	5cc0      	ldrb	r0, [r0, r3]
 800401c:	2800      	cmp	r0, #0
 800401e:	d1ea      	bne.n	8003ff6 <FindRoute+0xae>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8004020:	4f18      	ldr	r7, [pc, #96]	; (8004084 <FindRoute+0x13c>)
 8004022:	5c78      	ldrb	r0, [r7, r1]
 8004024:	3001      	adds	r0, #1
 8004026:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8004028:	5cff      	ldrb	r7, [r7, r3]
 800402a:	4287      	cmp	r7, r0
 800402c:	d9e3      	bls.n	8003ff6 <FindRoute+0xae>
						routeDist[v - 1] =alt;
 800402e:	4f15      	ldr	r7, [pc, #84]	; (8004084 <FindRoute+0x13c>)
 8004030:	54f8      	strb	r0, [r7, r3]
						routePrev[v - 1] =u;
 8004032:	4815      	ldr	r0, [pc, #84]	; (8004088 <FindRoute+0x140>)
 8004034:	54c4      	strb	r4, [r0, r3]
 8004036:	e7de      	b.n	8003ff6 <FindRoute+0xae>
		route[j++] =u;          			// Push the vertex onto the stack
 8004038:	1c53      	adds	r3, r2, #1
 800403a:	4911      	ldr	r1, [pc, #68]	; (8004080 <FindRoute+0x138>)
 800403c:	548c      	strb	r4, [r1, r2]
 800403e:	b2da      	uxtb	r2, r3
		u =routePrev[u - 1];           		// Traverse from target to source
 8004040:	0004      	movs	r4, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8004042:	1e63      	subs	r3, r4, #1
 8004044:	4910      	ldr	r1, [pc, #64]	; (8004088 <FindRoute+0x140>)
 8004046:	5cc8      	ldrb	r0, [r1, r3]
 8004048:	2800      	cmp	r0, #0
 800404a:	d1f5      	bne.n	8004038 <FindRoute+0xf0>
	for(int col =1; col <= 6; col++){
 800404c:	2201      	movs	r2, #1
 800404e:	e000      	b.n	8004052 <FindRoute+0x10a>
 8004050:	3201      	adds	r2, #1
 8004052:	2a06      	cmp	r2, #6
 8004054:	dca7      	bgt.n	8003fa6 <FindRoute+0x5e>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8004056:	00ab      	lsls	r3, r5, #2
 8004058:	195b      	adds	r3, r3, r5
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	195b      	adds	r3, r3, r5
 800405e:	189b      	adds	r3, r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	490a      	ldr	r1, [pc, #40]	; (800408c <FindRoute+0x144>)
 8004064:	5a5b      	ldrh	r3, [r3, r1]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f2      	beq.n	8004050 <FindRoute+0x108>
 800406a:	08db      	lsrs	r3, r3, #3
 800406c:	1e71      	subs	r1, r6, #1
 800406e:	4c05      	ldr	r4, [pc, #20]	; (8004084 <FindRoute+0x13c>)
 8004070:	5c61      	ldrb	r1, [r4, r1]
 8004072:	3901      	subs	r1, #1
 8004074:	4c02      	ldr	r4, [pc, #8]	; (8004080 <FindRoute+0x138>)
 8004076:	5c61      	ldrb	r1, [r4, r1]
 8004078:	428b      	cmp	r3, r1
 800407a:	d1e9      	bne.n	8004050 <FindRoute+0x108>
			return col;
 800407c:	b2d0      	uxtb	r0, r2
 800407e:	e792      	b.n	8003fa6 <FindRoute+0x5e>
 8004080:	20007150 	.word	0x20007150
 8004084:	2000110c 	.word	0x2000110c
 8004088:	20001128 	.word	0x20001128
 800408c:	20000aac 	.word	0x20000aac
 8004090:	20000024 	.word	0x20000024

08004094 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8004094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004096:	b087      	sub	sp, #28
 8004098:	0007      	movs	r7, r0
 800409a:	000e      	movs	r6, r1
 800409c:	9205      	str	r2, [sp, #20]
 800409e:	001c      	movs	r4, r3
	myOutport =FindRoute(myID,dst);
 80040a0:	4b31      	ldr	r3, [pc, #196]	; (8004168 <remoteBootloaderUpdate+0xd4>)
 80040a2:	7818      	ldrb	r0, [r3, #0]
 80040a4:	f7ff ff50 	bl	8003f48 <FindRoute>
 80040a8:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 80040aa:	2c00      	cmp	r4, #0
 80040ac:	d003      	beq.n	80040b6 <remoteBootloaderUpdate+0x22>
 80040ae:	4b2e      	ldr	r3, [pc, #184]	; (8004168 <remoteBootloaderUpdate+0xd4>)
 80040b0:	781d      	ldrb	r5, [r3, #0]
 80040b2:	42b5      	cmp	r5, r6
 80040b4:	d00d      	beq.n	80040d2 <remoteBootloaderUpdate+0x3e>
	else if(outport == 0){ /* This is a remote update */
 80040b6:	2c00      	cmp	r4, #0
 80040b8:	d10d      	bne.n	80040d6 <remoteBootloaderUpdate+0x42>
		if(NumberOfHops(dst)== 1)
 80040ba:	1e73      	subs	r3, r6, #1
 80040bc:	4a2b      	ldr	r2, [pc, #172]	; (800416c <remoteBootloaderUpdate+0xd8>)
 80040be:	5cd3      	ldrb	r3, [r2, r3]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d003      	beq.n	80040cc <remoteBootloaderUpdate+0x38>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 80040c4:	3b01      	subs	r3, #1
 80040c6:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <remoteBootloaderUpdate+0xdc>)
 80040c8:	5cd5      	ldrb	r5, [r2, r3]
 80040ca:	e005      	b.n	80040d8 <remoteBootloaderUpdate+0x44>
		lastModule = myID;
 80040cc:	4b26      	ldr	r3, [pc, #152]	; (8004168 <remoteBootloaderUpdate+0xd4>)
 80040ce:	781d      	ldrb	r5, [r3, #0]
 80040d0:	e002      	b.n	80040d8 <remoteBootloaderUpdate+0x44>
		myOutport =outport;
 80040d2:	9404      	str	r4, [sp, #16]
 80040d4:	e000      	b.n	80040d8 <remoteBootloaderUpdate+0x44>
	uint8_t myOutport =0, lastModule =0;
 80040d6:	2500      	movs	r5, #0
	if(src == myID){
 80040d8:	4b23      	ldr	r3, [pc, #140]	; (8004168 <remoteBootloaderUpdate+0xd4>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	42bb      	cmp	r3, r7
 80040de:	d019      	beq.n	8004114 <remoteBootloaderUpdate+0x80>
	SetupPortForRemoteBootloaderUpdate(inport);
 80040e0:	9805      	ldr	r0, [sp, #20]
 80040e2:	f7ff fdd3 	bl	8003c8c <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 80040e6:	9804      	ldr	r0, [sp, #16]
 80040e8:	f7ff fdd0 	bl	8003c8c <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 80040ec:	4b1e      	ldr	r3, [pc, #120]	; (8004168 <remoteBootloaderUpdate+0xd4>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	42ab      	cmp	r3, r5
 80040f2:	d032      	beq.n	800415a <remoteBootloaderUpdate+0xc6>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 80040f4:	4b1c      	ldr	r3, [pc, #112]	; (8004168 <remoteBootloaderUpdate+0xd4>)
 80040f6:	7819      	ldrb	r1, [r3, #0]
 80040f8:	2300      	movs	r3, #0
 80040fa:	9303      	str	r3, [sp, #12]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	9302      	str	r3, [sp, #8]
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	3303      	adds	r3, #3
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	000b      	movs	r3, r1
 8004108:	9a04      	ldr	r2, [sp, #16]
 800410a:	9805      	ldr	r0, [sp, #20]
 800410c:	f005 fda8 	bl	8009c60 <StartScastDMAStream>
}
 8004110:	b007      	add	sp, #28
 8004112:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004114:	f00b ff0e 	bl	800ff34 <FreeRTOS_CLIGetOutputBuffer>
 8004118:	0007      	movs	r7, r0
		if(outport == 0)		// This is a remote module update
 800411a:	2c00      	cmp	r4, #0
 800411c:	d116      	bne.n	800414c <remoteBootloaderUpdate+0xb8>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <remoteBootloaderUpdate+0xe0>)
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	0032      	movs	r2, r6
 8004124:	f011 fc1c 	bl	8015960 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <remoteBootloaderUpdate+0xe4>)
 800412a:	6819      	ldr	r1, [r3, #0]
 800412c:	0038      	movs	r0, r7
 800412e:	f011 fc37 	bl	80159a0 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8004132:	0038      	movs	r0, r7
 8004134:	f7fb fff0 	bl	8000118 <strlen>
 8004138:	b282      	uxth	r2, r0
 800413a:	2332      	movs	r3, #50	; 0x32
 800413c:	0039      	movs	r1, r7
 800413e:	9805      	ldr	r0, [sp, #20]
 8004140:	f00b fcd0 	bl	800fae4 <writePxITMutex>
		Delay_ms(100);
 8004144:	2064      	movs	r0, #100	; 0x64
 8004146:	f00d fe4f 	bl	8011de8 <HAL_Delay>
 800414a:	e7c9      	b.n	80040e0 <remoteBootloaderUpdate+0x4c>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <remoteBootloaderUpdate+0xe8>)
 800414e:	6819      	ldr	r1, [r3, #0]
 8004150:	0023      	movs	r3, r4
 8004152:	0032      	movs	r2, r6
 8004154:	f011 fc04 	bl	8015960 <sprintf>
 8004158:	e7e6      	b.n	8004128 <remoteBootloaderUpdate+0x94>
		SwapUartPins(GetUart(myOutport),REVERSED);
 800415a:	9804      	ldr	r0, [sp, #16]
 800415c:	f00b fc76 	bl	800fa4c <GetUart>
 8004160:	2101      	movs	r1, #1
 8004162:	f00b fd0b 	bl	800fb7c <SwapUartPins>
 8004166:	e7c5      	b.n	80040f4 <remoteBootloaderUpdate+0x60>
 8004168:	20001072 	.word	0x20001072
 800416c:	2000110c 	.word	0x2000110c
 8004170:	20007150 	.word	0x20007150
 8004174:	20000080 	.word	0x20000080
 8004178:	20000088 	.word	0x20000088
 800417c:	20000084 	.word	0x20000084

08004180 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	b085      	sub	sp, #20
 8004184:	0004      	movs	r4, r0
 8004186:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8004188:	4d55      	ldr	r5, [pc, #340]	; (80042e0 <DisplayTopology+0x160>)
 800418a:	4b56      	ldr	r3, [pc, #344]	; (80042e4 <DisplayTopology+0x164>)
 800418c:	002a      	movs	r2, r5
 800418e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004190:	c243      	stmia	r2!, {r0, r1, r6}
 8004192:	0019      	movs	r1, r3
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	888b      	ldrh	r3, [r1, #4]
 800419a:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800419c:	0028      	movs	r0, r5
 800419e:	f7fb ffbb 	bl	8000118 <strlen>
 80041a2:	b282      	uxth	r2, r0
 80041a4:	2301      	movs	r3, #1
 80041a6:	425b      	negs	r3, r3
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	3333      	adds	r3, #51	; 0x33
 80041ac:	0029      	movs	r1, r5
 80041ae:	0020      	movs	r0, r4
 80041b0:	f00b fc6a 	bl	800fa88 <writePxMutex>
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80041b4:	2501      	movs	r5, #1
 80041b6:	e013      	b.n	80041e0 <DisplayTopology+0x60>
		sprintf(pcUserMessage,"P%d\t",i);
 80041b8:	4e49      	ldr	r6, [pc, #292]	; (80042e0 <DisplayTopology+0x160>)
 80041ba:	002a      	movs	r2, r5
 80041bc:	494a      	ldr	r1, [pc, #296]	; (80042e8 <DisplayTopology+0x168>)
 80041be:	0030      	movs	r0, r6
 80041c0:	f011 fbce 	bl	8015960 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80041c4:	0030      	movs	r0, r6
 80041c6:	f7fb ffa7 	bl	8000118 <strlen>
 80041ca:	b282      	uxth	r2, r0
 80041cc:	2301      	movs	r3, #1
 80041ce:	425b      	negs	r3, r3
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	3333      	adds	r3, #51	; 0x33
 80041d4:	0031      	movs	r1, r6
 80041d6:	9803      	ldr	r0, [sp, #12]
 80041d8:	f00b fc56 	bl	800fa88 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80041dc:	3501      	adds	r5, #1
 80041de:	b2ed      	uxtb	r5, r5
 80041e0:	2d05      	cmp	r5, #5
 80041e2:	d9e9      	bls.n	80041b8 <DisplayTopology+0x38>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 80041e4:	2301      	movs	r3, #1
 80041e6:	425b      	negs	r3, r3
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	3333      	adds	r3, #51	; 0x33
 80041ec:	2203      	movs	r2, #3
 80041ee:	493f      	ldr	r1, [pc, #252]	; (80042ec <DisplayTopology+0x16c>)
 80041f0:	9803      	ldr	r0, [sp, #12]
 80041f2:	f00b fc49 	bl	800fa88 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 80041f6:	2400      	movs	r4, #0
 80041f8:	e031      	b.n	800425e <DisplayTopology+0xde>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 80041fa:	2307      	movs	r3, #7
 80041fc:	4013      	ands	r3, r2
 80041fe:	08d2      	lsrs	r2, r2, #3
 8004200:	493b      	ldr	r1, [pc, #236]	; (80042f0 <DisplayTopology+0x170>)
 8004202:	4837      	ldr	r0, [pc, #220]	; (80042e0 <DisplayTopology+0x160>)
 8004204:	f011 fbac 	bl	8015960 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004208:	4f35      	ldr	r7, [pc, #212]	; (80042e0 <DisplayTopology+0x160>)
 800420a:	0038      	movs	r0, r7
 800420c:	f7fb ff84 	bl	8000118 <strlen>
 8004210:	b282      	uxth	r2, r0
 8004212:	2301      	movs	r3, #1
 8004214:	425b      	negs	r3, r3
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	3333      	adds	r3, #51	; 0x33
 800421a:	0039      	movs	r1, r7
 800421c:	9803      	ldr	r0, [sp, #12]
 800421e:	f00b fc33 	bl	800fa88 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8004222:	3501      	adds	r5, #1
 8004224:	b2ed      	uxtb	r5, r5
 8004226:	2d05      	cmp	r5, #5
 8004228:	d80e      	bhi.n	8004248 <DisplayTopology+0xc8>
			if(!array[row][col])
 800422a:	00b3      	lsls	r3, r6, #2
 800422c:	199b      	adds	r3, r3, r6
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	199b      	adds	r3, r3, r6
 8004232:	195b      	adds	r3, r3, r5
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4a2f      	ldr	r2, [pc, #188]	; (80042f4 <DisplayTopology+0x174>)
 8004238:	5a9a      	ldrh	r2, [r3, r2]
 800423a:	2a00      	cmp	r2, #0
 800423c:	d1dd      	bne.n	80041fa <DisplayTopology+0x7a>
				sprintf(pcUserMessage,"%d\t",0);
 800423e:	492e      	ldr	r1, [pc, #184]	; (80042f8 <DisplayTopology+0x178>)
 8004240:	4827      	ldr	r0, [pc, #156]	; (80042e0 <DisplayTopology+0x160>)
 8004242:	f011 fb8d 	bl	8015960 <sprintf>
 8004246:	e7df      	b.n	8004208 <DisplayTopology+0x88>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8004248:	2301      	movs	r3, #1
 800424a:	425b      	negs	r3, r3
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	3333      	adds	r3, #51	; 0x33
 8004250:	2202      	movs	r2, #2
 8004252:	492a      	ldr	r1, [pc, #168]	; (80042fc <DisplayTopology+0x17c>)
 8004254:	9803      	ldr	r0, [sp, #12]
 8004256:	f00b fc17 	bl	800fa88 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 800425a:	3401      	adds	r4, #1
 800425c:	b2e4      	uxtb	r4, r4
 800425e:	4b28      	ldr	r3, [pc, #160]	; (8004300 <DisplayTopology+0x180>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	42a3      	cmp	r3, r4
 8004264:	d930      	bls.n	80042c8 <DisplayTopology+0x148>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8004266:	0026      	movs	r6, r4
 8004268:	1c62      	adds	r2, r4, #1
 800426a:	4d1d      	ldr	r5, [pc, #116]	; (80042e0 <DisplayTopology+0x160>)
 800426c:	4925      	ldr	r1, [pc, #148]	; (8004304 <DisplayTopology+0x184>)
 800426e:	0028      	movs	r0, r5
 8004270:	f011 fb76 	bl	8015960 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004274:	0028      	movs	r0, r5
 8004276:	f7fb ff4f 	bl	8000118 <strlen>
 800427a:	b282      	uxth	r2, r0
 800427c:	2701      	movs	r7, #1
 800427e:	427f      	negs	r7, r7
 8004280:	9700      	str	r7, [sp, #0]
 8004282:	2332      	movs	r3, #50	; 0x32
 8004284:	0029      	movs	r1, r5
 8004286:	9803      	ldr	r0, [sp, #12]
 8004288:	f00b fbfe 	bl	800fa88 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 800428c:	2316      	movs	r3, #22
 800428e:	4363      	muls	r3, r4
 8004290:	4a18      	ldr	r2, [pc, #96]	; (80042f4 <DisplayTopology+0x174>)
 8004292:	5a9a      	ldrh	r2, [r3, r2]
 8004294:	0053      	lsls	r3, r2, #1
 8004296:	189b      	adds	r3, r3, r2
 8004298:	0059      	lsls	r1, r3, #1
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <DisplayTopology+0x188>)
 800429c:	18c9      	adds	r1, r1, r3
 800429e:	2205      	movs	r2, #5
 80042a0:	0028      	movs	r0, r5
 80042a2:	f011 fbb2 	bl	8015a0a <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 80042a6:	9700      	str	r7, [sp, #0]
 80042a8:	2332      	movs	r3, #50	; 0x32
 80042aa:	2205      	movs	r2, #5
 80042ac:	0029      	movs	r1, r5
 80042ae:	9d03      	ldr	r5, [sp, #12]
 80042b0:	0028      	movs	r0, r5
 80042b2:	f00b fbe9 	bl	800fa88 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 80042b6:	9700      	str	r7, [sp, #0]
 80042b8:	2332      	movs	r3, #50	; 0x32
 80042ba:	2201      	movs	r2, #1
 80042bc:	4913      	ldr	r1, [pc, #76]	; (800430c <DisplayTopology+0x18c>)
 80042be:	0028      	movs	r0, r5
 80042c0:	f00b fbe2 	bl	800fa88 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 80042c4:	2501      	movs	r5, #1
 80042c6:	e7ae      	b.n	8004226 <DisplayTopology+0xa6>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 80042c8:	2301      	movs	r3, #1
 80042ca:	425b      	negs	r3, r3
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	3333      	adds	r3, #51	; 0x33
 80042d0:	2201      	movs	r2, #1
 80042d2:	490f      	ldr	r1, [pc, #60]	; (8004310 <DisplayTopology+0x190>)
 80042d4:	9803      	ldr	r0, [sp, #12]
 80042d6:	f00b fbd7 	bl	800fa88 <writePxMutex>
}
 80042da:	b005      	add	sp, #20
 80042dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	2000109c 	.word	0x2000109c
 80042e4:	0801a104 	.word	0x0801a104
 80042e8:	0801a118 	.word	0x0801a118
 80042ec:	0801b598 	.word	0x0801b598
 80042f0:	0801a130 	.word	0x0801a130
 80042f4:	20000aac 	.word	0x20000aac
 80042f8:	0801a12c 	.word	0x0801a12c
 80042fc:	08019fac 	.word	0x08019fac
 8004300:	20000024 	.word	0x20000024
 8004304:	0801a120 	.word	0x0801a120
 8004308:	0801a16c 	.word	0x0801a16c
 800430c:	0801a114 	.word	0x0801a114
 8004310:	0801b75c 	.word	0x0801b75c

08004314 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8004314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004316:	b083      	sub	sp, #12
 8004318:	0005      	movs	r5, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 800431a:	4c2d      	ldr	r4, [pc, #180]	; (80043d0 <DisplayPortsDir+0xbc>)
 800431c:	492d      	ldr	r1, [pc, #180]	; (80043d4 <DisplayPortsDir+0xc0>)
 800431e:	0023      	movs	r3, r4
 8004320:	000a      	movs	r2, r1
 8004322:	ca43      	ldmia	r2!, {r0, r1, r6}
 8004324:	c343      	stmia	r3!, {r0, r1, r6}
 8004326:	ca43      	ldmia	r2!, {r0, r1, r6}
 8004328:	c343      	stmia	r3!, {r0, r1, r6}
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	601a      	str	r2, [r3, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800432e:	0020      	movs	r0, r4
 8004330:	f7fb fef2 	bl	8000118 <strlen>
 8004334:	b282      	uxth	r2, r0
 8004336:	2301      	movs	r3, #1
 8004338:	425b      	negs	r3, r3
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	3333      	adds	r3, #51	; 0x33
 800433e:	0021      	movs	r1, r4
 8004340:	0028      	movs	r0, r5
 8004342:	f00b fba1 	bl	800fa88 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8004346:	2601      	movs	r6, #1
 8004348:	e023      	b.n	8004392 <DisplayPortsDir+0x7e>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 800434a:	3401      	adds	r4, #1
 800434c:	b2e4      	uxtb	r4, r4
 800434e:	2c0a      	cmp	r4, #10
 8004350:	d81d      	bhi.n	800438e <DisplayPortsDir+0x7a>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004352:	1e73      	subs	r3, r6, #1
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <DisplayPortsDir+0xc4>)
 8004358:	5a9a      	ldrh	r2, [r3, r2]
 800435a:	1e61      	subs	r1, r4, #1
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	410b      	asrs	r3, r1
 8004362:	4213      	tst	r3, r2
 8004364:	d0f1      	beq.n	800434a <DisplayPortsDir+0x36>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8004366:	4f1a      	ldr	r7, [pc, #104]	; (80043d0 <DisplayPortsDir+0xbc>)
 8004368:	0023      	movs	r3, r4
 800436a:	0032      	movs	r2, r6
 800436c:	491b      	ldr	r1, [pc, #108]	; (80043dc <DisplayPortsDir+0xc8>)
 800436e:	0038      	movs	r0, r7
 8004370:	f011 faf6 	bl	8015960 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8004374:	0038      	movs	r0, r7
 8004376:	f7fb fecf 	bl	8000118 <strlen>
 800437a:	b282      	uxth	r2, r0
 800437c:	2301      	movs	r3, #1
 800437e:	425b      	negs	r3, r3
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	3333      	adds	r3, #51	; 0x33
 8004384:	0039      	movs	r1, r7
 8004386:	0028      	movs	r0, r5
 8004388:	f00b fb7e 	bl	800fa88 <writePxMutex>
 800438c:	e7dd      	b.n	800434a <DisplayPortsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 800438e:	3601      	adds	r6, #1
 8004390:	b2f6      	uxtb	r6, r6
 8004392:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <DisplayPortsDir+0xcc>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	42b3      	cmp	r3, r6
 8004398:	d301      	bcc.n	800439e <DisplayPortsDir+0x8a>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 800439a:	2401      	movs	r4, #1
 800439c:	e7d7      	b.n	800434e <DisplayPortsDir+0x3a>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 800439e:	4c0c      	ldr	r4, [pc, #48]	; (80043d0 <DisplayPortsDir+0xbc>)
 80043a0:	4910      	ldr	r1, [pc, #64]	; (80043e4 <DisplayPortsDir+0xd0>)
 80043a2:	0023      	movs	r3, r4
 80043a4:	000a      	movs	r2, r1
 80043a6:	ca43      	ldmia	r2!, {r0, r1, r6}
 80043a8:	c343      	stmia	r3!, {r0, r1, r6}
 80043aa:	ca43      	ldmia	r2!, {r0, r1, r6}
 80043ac:	c343      	stmia	r3!, {r0, r1, r6}
 80043ae:	ca03      	ldmia	r2!, {r0, r1}
 80043b0:	c303      	stmia	r3!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80043b2:	0020      	movs	r0, r4
 80043b4:	f7fb feb0 	bl	8000118 <strlen>
 80043b8:	b282      	uxth	r2, r0
 80043ba:	2301      	movs	r3, #1
 80043bc:	425b      	negs	r3, r3
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	3333      	adds	r3, #51	; 0x33
 80043c2:	0021      	movs	r1, r4
 80043c4:	0028      	movs	r0, r5
 80043c6:	f00b fb5f 	bl	800fa88 <writePxMutex>
	HAL_MAX_DELAY);
}
 80043ca:	b003      	add	sp, #12
 80043cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	2000109c 	.word	0x2000109c
 80043d4:	0801a0b4 	.word	0x0801a0b4
 80043d8:	200074e4 	.word	0x200074e4
 80043dc:	0801a0d0 	.word	0x0801a0d0
 80043e0:	20000024 	.word	0x20000024
 80043e4:	0801a0e4 	.word	0x0801a0e4

080043e8 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 80043e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ea:	46c6      	mov	lr, r8
 80043ec:	b500      	push	{lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	0007      	movs	r7, r0
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80043f2:	f00b fd9f 	bl	800ff34 <FreeRTOS_CLIGetOutputBuffer>
 80043f6:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 80043f8:	2300      	movs	r3, #0
 80043fa:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 80043fc:	4b93      	ldr	r3, [pc, #588]	; (800464c <DisplayModuleStatus+0x264>)
 80043fe:	781a      	ldrb	r2, [r3, #0]
 8004400:	4d93      	ldr	r5, [pc, #588]	; (8004650 <DisplayModuleStatus+0x268>)
 8004402:	4994      	ldr	r1, [pc, #592]	; (8004654 <DisplayModuleStatus+0x26c>)
 8004404:	0028      	movs	r0, r5
 8004406:	f011 faab 	bl	8015960 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800440a:	0029      	movs	r1, r5
 800440c:	0020      	movs	r0, r4
 800440e:	f011 fac7 	bl	80159a0 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8004412:	4b91      	ldr	r3, [pc, #580]	; (8004658 <DisplayModuleStatus+0x270>)
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	4991      	ldr	r1, [pc, #580]	; (800465c <DisplayModuleStatus+0x274>)
 8004418:	0028      	movs	r0, r5
 800441a:	f011 faa1 	bl	8015960 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800441e:	0029      	movs	r1, r5
 8004420:	0020      	movs	r0, r4
 8004422:	f011 fabd 	bl	80159a0 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8004426:	2305      	movs	r3, #5
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	3b03      	subs	r3, #3
 800442c:	2200      	movs	r2, #0
 800442e:	498c      	ldr	r1, [pc, #560]	; (8004660 <DisplayModuleStatus+0x278>)
 8004430:	0028      	movs	r0, r5
 8004432:	f011 fa95 	bl	8015960 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8004436:	0029      	movs	r1, r5
 8004438:	0020      	movs	r0, r4
 800443a:	f011 fab1 	bl	80159a0 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 800443e:	4a89      	ldr	r2, [pc, #548]	; (8004664 <DisplayModuleStatus+0x27c>)
 8004440:	4989      	ldr	r1, [pc, #548]	; (8004668 <DisplayModuleStatus+0x280>)
 8004442:	0028      	movs	r0, r5
 8004444:	f011 fa8c 	bl	8015960 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004448:	0029      	movs	r1, r5
 800444a:	0020      	movs	r0, r4
 800444c:	f011 faa8 	bl	80159a0 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8004450:	4a86      	ldr	r2, [pc, #536]	; (800466c <DisplayModuleStatus+0x284>)
 8004452:	4987      	ldr	r1, [pc, #540]	; (8004670 <DisplayModuleStatus+0x288>)
 8004454:	0028      	movs	r0, r5
 8004456:	f011 fa83 	bl	8015960 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800445a:	0029      	movs	r1, r5
 800445c:	0020      	movs	r0, r4
 800445e:	f011 fa9f 	bl	80159a0 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004462:	4b84      	ldr	r3, [pc, #528]	; (8004674 <DisplayModuleStatus+0x28c>)
 8004464:	002a      	movs	r2, r5
 8004466:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004468:	c243      	stmia	r2!, {r0, r1, r6}
 800446a:	0019      	movs	r1, r3
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	888b      	ldrh	r3, [r1, #4]
 8004472:	8093      	strh	r3, [r2, #4]
 8004474:	798b      	ldrb	r3, [r1, #6]
 8004476:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8004478:	0029      	movs	r1, r5
 800447a:	0020      	movs	r0, r4
 800447c:	f011 fa90 	bl	80159a0 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004480:	2501      	movs	r5, #1
 8004482:	e00d      	b.n	80044a0 <DisplayModuleStatus+0xb8>
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8004484:	4b72      	ldr	r3, [pc, #456]	; (8004650 <DisplayModuleStatus+0x268>)
 8004486:	4a7c      	ldr	r2, [pc, #496]	; (8004678 <DisplayModuleStatus+0x290>)
 8004488:	6811      	ldr	r1, [r2, #0]
 800448a:	6019      	str	r1, [r3, #0]
 800448c:	8891      	ldrh	r1, [r2, #4]
 800448e:	8099      	strh	r1, [r3, #4]
 8004490:	7992      	ldrb	r2, [r2, #6]
 8004492:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004494:	496e      	ldr	r1, [pc, #440]	; (8004650 <DisplayModuleStatus+0x268>)
 8004496:	0020      	movs	r0, r4
 8004498:	f011 fa82 	bl	80159a0 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800449c:	3501      	adds	r5, #1
 800449e:	b2ed      	uxtb	r5, r5
 80044a0:	2d05      	cmp	r5, #5
 80044a2:	d83b      	bhi.n	800451c <DisplayModuleStatus+0x134>
		sprintf(pcUserMessage,"P%d: ",i);
 80044a4:	4e6a      	ldr	r6, [pc, #424]	; (8004650 <DisplayModuleStatus+0x268>)
 80044a6:	002a      	movs	r2, r5
 80044a8:	4974      	ldr	r1, [pc, #464]	; (800467c <DisplayModuleStatus+0x294>)
 80044aa:	0030      	movs	r0, r6
 80044ac:	f011 fa58 	bl	8015960 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 80044b0:	0031      	movs	r1, r6
 80044b2:	0020      	movs	r0, r4
 80044b4:	f011 fa74 	bl	80159a0 <strcat>
		switch(portStatus[i]){
 80044b8:	4b71      	ldr	r3, [pc, #452]	; (8004680 <DisplayModuleStatus+0x298>)
 80044ba:	5d5b      	ldrb	r3, [r3, r5]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d8e9      	bhi.n	8004494 <DisplayModuleStatus+0xac>
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4a70      	ldr	r2, [pc, #448]	; (8004684 <DisplayModuleStatus+0x29c>)
 80044c4:	58d3      	ldr	r3, [r2, r3]
 80044c6:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 80044c8:	4961      	ldr	r1, [pc, #388]	; (8004650 <DisplayModuleStatus+0x268>)
 80044ca:	486f      	ldr	r0, [pc, #444]	; (8004688 <DisplayModuleStatus+0x2a0>)
 80044cc:	000b      	movs	r3, r1
 80044ce:	0002      	movs	r2, r0
 80044d0:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044d2:	c343      	stmia	r3!, {r0, r1, r6}
 80044d4:	ca03      	ldmia	r2!, {r0, r1}
 80044d6:	c303      	stmia	r3!, {r0, r1}
 80044d8:	7812      	ldrb	r2, [r2, #0]
 80044da:	701a      	strb	r2, [r3, #0]
				break;
 80044dc:	e7da      	b.n	8004494 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Streaming\n\r");
 80044de:	4a5c      	ldr	r2, [pc, #368]	; (8004650 <DisplayModuleStatus+0x268>)
 80044e0:	4b6a      	ldr	r3, [pc, #424]	; (800468c <DisplayModuleStatus+0x2a4>)
 80044e2:	cb43      	ldmia	r3!, {r0, r1, r6}
 80044e4:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 80044e6:	e7d5      	b.n	8004494 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 80044e8:	4959      	ldr	r1, [pc, #356]	; (8004650 <DisplayModuleStatus+0x268>)
 80044ea:	4869      	ldr	r0, [pc, #420]	; (8004690 <DisplayModuleStatus+0x2a8>)
 80044ec:	000b      	movs	r3, r1
 80044ee:	0002      	movs	r2, r0
 80044f0:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044f2:	c343      	stmia	r3!, {r0, r1, r6}
 80044f4:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044f6:	c343      	stmia	r3!, {r0, r1, r6}
 80044f8:	8812      	ldrh	r2, [r2, #0]
 80044fa:	801a      	strh	r2, [r3, #0]
				break;
 80044fc:	e7ca      	b.n	8004494 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 80044fe:	4954      	ldr	r1, [pc, #336]	; (8004650 <DisplayModuleStatus+0x268>)
 8004500:	4864      	ldr	r0, [pc, #400]	; (8004694 <DisplayModuleStatus+0x2ac>)
 8004502:	000b      	movs	r3, r1
 8004504:	0002      	movs	r2, r0
 8004506:	ca43      	ldmia	r2!, {r0, r1, r6}
 8004508:	c343      	stmia	r3!, {r0, r1, r6}
 800450a:	ca43      	ldmia	r2!, {r0, r1, r6}
 800450c:	c343      	stmia	r3!, {r0, r1, r6}
 800450e:	6811      	ldr	r1, [r2, #0]
 8004510:	6019      	str	r1, [r3, #0]
 8004512:	8891      	ldrh	r1, [r2, #4]
 8004514:	8099      	strh	r1, [r3, #4]
 8004516:	7992      	ldrb	r2, [r2, #6]
 8004518:	719a      	strb	r2, [r3, #6]
				break;
 800451a:	e7bb      	b.n	8004494 <DisplayModuleStatus+0xac>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800451c:	494c      	ldr	r1, [pc, #304]	; (8004650 <DisplayModuleStatus+0x268>)
 800451e:	485e      	ldr	r0, [pc, #376]	; (8004698 <DisplayModuleStatus+0x2b0>)
 8004520:	000b      	movs	r3, r1
 8004522:	0002      	movs	r2, r0
 8004524:	ca61      	ldmia	r2!, {r0, r5, r6}
 8004526:	c361      	stmia	r3!, {r0, r5, r6}
 8004528:	ca61      	ldmia	r2!, {r0, r5, r6}
 800452a:	c361      	stmia	r3!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800452c:	0020      	movs	r0, r4
 800452e:	f011 fa37 	bl	80159a0 <strcat>
	for(char i =1; i <= 6; i++){
 8004532:	2601      	movs	r6, #1
 8004534:	e00b      	b.n	800454e <DisplayModuleStatus+0x166>
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004536:	4d46      	ldr	r5, [pc, #280]	; (8004650 <DisplayModuleStatus+0x268>)
 8004538:	0032      	movs	r2, r6
 800453a:	4958      	ldr	r1, [pc, #352]	; (800469c <DisplayModuleStatus+0x2b4>)
 800453c:	0028      	movs	r0, r5
 800453e:	f011 fa0f 	bl	8015960 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004542:	0029      	movs	r1, r5
 8004544:	0020      	movs	r0, r4
 8004546:	f011 fa2b 	bl	80159a0 <strcat>
	for(char i =1; i <= 6; i++){
 800454a:	3601      	adds	r6, #1
 800454c:	b2f6      	uxtb	r6, r6
 800454e:	2e06      	cmp	r6, #6
 8004550:	d822      	bhi.n	8004598 <DisplayModuleStatus+0x1b0>
		if(streamDMA[i - 1].Instance == 0){
 8004552:	1e75      	subs	r5, r6, #1
 8004554:	00eb      	lsls	r3, r5, #3
 8004556:	1b5b      	subs	r3, r3, r5
 8004558:	00da      	lsls	r2, r3, #3
 800455a:	4b51      	ldr	r3, [pc, #324]	; (80046a0 <DisplayModuleStatus+0x2b8>)
 800455c:	58d3      	ldr	r3, [r2, r3]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0e9      	beq.n	8004536 <DisplayModuleStatus+0x14e>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004562:	00eb      	lsls	r3, r5, #3
 8004564:	1b5b      	subs	r3, r3, r5
 8004566:	00da      	lsls	r2, r3, #3
 8004568:	4b4d      	ldr	r3, [pc, #308]	; (80046a0 <DisplayModuleStatus+0x2b8>)
 800456a:	189b      	adds	r3, r3, r2
 800456c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800456e:	f007 fe37 	bl	800c1e0 <GetPort>
 8004572:	9003      	str	r0, [sp, #12]
 8004574:	00ad      	lsls	r5, r5, #2
 8004576:	4b4b      	ldr	r3, [pc, #300]	; (80046a4 <DisplayModuleStatus+0x2bc>)
 8004578:	58e8      	ldr	r0, [r5, r3]
 800457a:	f007 fe31 	bl	800c1e0 <GetPort>
 800457e:	4d34      	ldr	r5, [pc, #208]	; (8004650 <DisplayModuleStatus+0x268>)
 8004580:	9000      	str	r0, [sp, #0]
 8004582:	9b03      	ldr	r3, [sp, #12]
 8004584:	0032      	movs	r2, r6
 8004586:	4948      	ldr	r1, [pc, #288]	; (80046a8 <DisplayModuleStatus+0x2c0>)
 8004588:	0028      	movs	r0, r5
 800458a:	f011 f9e9 	bl	8015960 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800458e:	0029      	movs	r1, r5
 8004590:	0020      	movs	r0, r4
 8004592:	f011 fa05 	bl	80159a0 <strcat>
 8004596:	e7d8      	b.n	800454a <DisplayModuleStatus+0x162>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004598:	0020      	movs	r0, r4
 800459a:	f7fb fdbd 	bl	8000118 <strlen>
 800459e:	1820      	adds	r0, r4, r0
 80045a0:	2203      	movs	r2, #3
 80045a2:	4942      	ldr	r1, [pc, #264]	; (80046ac <DisplayModuleStatus+0x2c4>)
 80045a4:	f010 ffd9 	bl	801555a <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80045a8:	0020      	movs	r0, r4
 80045aa:	f7fb fdb5 	bl	8000118 <strlen>
 80045ae:	1820      	adds	r0, r4, r0
 80045b0:	221d      	movs	r2, #29
 80045b2:	493f      	ldr	r1, [pc, #252]	; (80046b0 <DisplayModuleStatus+0x2c8>)
 80045b4:	f010 ffd1 	bl	801555a <memcpy>
	temp =strlen((char* )pcOutputString);
 80045b8:	0020      	movs	r0, r4
 80045ba:	f7fb fdad 	bl	8000118 <strlen>
 80045be:	4680      	mov	r8, r0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80045c0:	2501      	movs	r5, #1
 80045c2:	e001      	b.n	80045c8 <DisplayModuleStatus+0x1e0>
 80045c4:	3501      	adds	r5, #1
 80045c6:	b2ed      	uxtb	r5, r5
 80045c8:	2d05      	cmp	r5, #5
 80045ca:	d816      	bhi.n	80045fa <DisplayModuleStatus+0x212>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <DisplayModuleStatus+0x264>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4a37      	ldr	r2, [pc, #220]	; (80046b4 <DisplayModuleStatus+0x2cc>)
 80045d6:	5a9a      	ldrh	r2, [r3, r2]
 80045d8:	1e69      	subs	r1, r5, #1
 80045da:	2380      	movs	r3, #128	; 0x80
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	410b      	asrs	r3, r1
 80045e0:	4213      	tst	r3, r2
 80045e2:	d0ef      	beq.n	80045c4 <DisplayModuleStatus+0x1dc>
		{
			sprintf(pcUserMessage,"P%d ",p);
 80045e4:	4e1a      	ldr	r6, [pc, #104]	; (8004650 <DisplayModuleStatus+0x268>)
 80045e6:	002a      	movs	r2, r5
 80045e8:	4933      	ldr	r1, [pc, #204]	; (80046b8 <DisplayModuleStatus+0x2d0>)
 80045ea:	0030      	movs	r0, r6
 80045ec:	f011 f9b8 	bl	8015960 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80045f0:	0031      	movs	r1, r6
 80045f2:	0020      	movs	r0, r4
 80045f4:	f011 f9d4 	bl	80159a0 <strcat>
 80045f8:	e7e4      	b.n	80045c4 <DisplayModuleStatus+0x1dc>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80045fa:	0020      	movs	r0, r4
 80045fc:	f7fb fd8c 	bl	8000118 <strlen>
 8004600:	4643      	mov	r3, r8
 8004602:	041b      	lsls	r3, r3, #16
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	4298      	cmp	r0, r3
 8004608:	d00d      	beq.n	8004626 <DisplayModuleStatus+0x23e>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 800460a:	0020      	movs	r0, r4
 800460c:	f7fb fd84 	bl	8000118 <strlen>
 8004610:	1820      	adds	r0, r4, r0
 8004612:	2203      	movs	r2, #3
 8004614:	4925      	ldr	r1, [pc, #148]	; (80046ac <DisplayModuleStatus+0x2c4>)
 8004616:	f010 ffa0 	bl	801555a <memcpy>
	
	/* Display output */
	if(port)
 800461a:	2f00      	cmp	r7, #0
 800461c:	d109      	bne.n	8004632 <DisplayModuleStatus+0x24a>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 800461e:	b004      	add	sp, #16
 8004620:	bc04      	pop	{r2}
 8004622:	4690      	mov	r8, r2
 8004624:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 8004626:	1820      	adds	r0, r4, r0
 8004628:	2205      	movs	r2, #5
 800462a:	4924      	ldr	r1, [pc, #144]	; (80046bc <DisplayModuleStatus+0x2d4>)
 800462c:	f010 ff95 	bl	801555a <memcpy>
 8004630:	e7eb      	b.n	800460a <DisplayModuleStatus+0x222>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004632:	0020      	movs	r0, r4
 8004634:	f7fb fd70 	bl	8000118 <strlen>
 8004638:	b282      	uxth	r2, r0
 800463a:	2301      	movs	r3, #1
 800463c:	425b      	negs	r3, r3
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	3333      	adds	r3, #51	; 0x33
 8004642:	0021      	movs	r1, r4
 8004644:	0038      	movs	r0, r7
 8004646:	f00b fa1f 	bl	800fa88 <writePxMutex>
}
 800464a:	e7e8      	b.n	800461e <DisplayModuleStatus+0x236>
 800464c:	20001072 	.word	0x20001072
 8004650:	2000109c 	.word	0x2000109c
 8004654:	08019ef8 	.word	0x08019ef8
 8004658:	20000aa8 	.word	0x20000aa8
 800465c:	08019f14 	.word	0x08019f14
 8004660:	08019f30 	.word	0x08019f30
 8004664:	08019f50 	.word	0x08019f50
 8004668:	08019f5c 	.word	0x08019f5c
 800466c:	08019f74 	.word	0x08019f74
 8004670:	08019f80 	.word	0x08019f80
 8004674:	08019f9c 	.word	0x08019f9c
 8004678:	08019fb8 	.word	0x08019fb8
 800467c:	08019fb0 	.word	0x08019fb0
 8004680:	200010ec 	.word	0x200010ec
 8004684:	08019ed4 	.word	0x08019ed4
 8004688:	08019fc0 	.word	0x08019fc0
 800468c:	08019fd8 	.word	0x08019fd8
 8004690:	08019fe4 	.word	0x08019fe4
 8004694:	0801a000 	.word	0x0801a000
 8004698:	0801a020 	.word	0x0801a020
 800469c:	0801a038 	.word	0x0801a038
 80046a0:	20002014 	.word	0x20002014
 80046a4:	200016dc 	.word	0x200016dc
 80046a8:	0801a054 	.word	0x0801a054
 80046ac:	08019fac 	.word	0x08019fac
 80046b0:	0801a084 	.word	0x0801a084
 80046b4:	200074e4 	.word	0x200074e4
 80046b8:	0801a0a4 	.word	0x0801a0a4
 80046bc:	0801a0ac 	.word	0x0801a0ac

080046c0 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80046c4:	4929      	ldr	r1, [pc, #164]	; (800476c <GetID+0xac>)
 80046c6:	f7fb fd1d 	bl	8000104 <strcmp>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d00a      	beq.n	80046e4 <GetID+0x24>
		return myID;
	else if(!strcmp(string,"all"))
 80046ce:	4928      	ldr	r1, [pc, #160]	; (8004770 <GetID+0xb0>)
 80046d0:	0028      	movs	r0, r5
 80046d2:	f7fb fd17 	bl	8000104 <strcmp>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d044      	beq.n	8004764 <GetID+0xa4>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80046da:	782e      	ldrb	r6, [r5, #0]
 80046dc:	2e23      	cmp	r6, #35	; 0x23
 80046de:	d004      	beq.n	80046ea <GetID+0x2a>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 80046e0:	2400      	movs	r4, #0
 80046e2:	e016      	b.n	8004712 <GetID+0x52>
		return myID;
 80046e4:	4b23      	ldr	r3, [pc, #140]	; (8004774 <GetID+0xb4>)
 80046e6:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 80046e8:	bd70      	pop	{r4, r5, r6, pc}
		id =atol(string + 1);
 80046ea:	1c68      	adds	r0, r5, #1
 80046ec:	f010 fcab 	bl	8015046 <atol>
 80046f0:	b2c0      	uxtb	r0, r0
		if(id > 0 && id <= N)
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d003      	beq.n	80046fe <GetID+0x3e>
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <GetID+0xb8>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	4283      	cmp	r3, r0
 80046fc:	d205      	bcs.n	800470a <GetID+0x4a>
		else if(id == myID)
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <GetID+0xb4>)
 8004700:	781c      	ldrb	r4, [r3, #0]
 8004702:	4284      	cmp	r4, r0
 8004704:	d130      	bne.n	8004768 <GetID+0xa8>
			return myID;
 8004706:	b220      	sxth	r0, r4
 8004708:	e7ee      	b.n	80046e8 <GetID+0x28>
			return id;
 800470a:	b200      	sxth	r0, r0
 800470c:	e7ec      	b.n	80046e8 <GetID+0x28>
		for(i =0; i < N; i++){
 800470e:	3401      	adds	r4, #1
 8004710:	b2e4      	uxtb	r4, r4
 8004712:	4b19      	ldr	r3, [pc, #100]	; (8004778 <GetID+0xb8>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	42a3      	cmp	r3, r4
 8004718:	d90d      	bls.n	8004736 <GetID+0x76>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800471a:	00a3      	lsls	r3, r4, #2
 800471c:	191b      	adds	r3, r3, r4
 800471e:	0059      	lsls	r1, r3, #1
 8004720:	4b16      	ldr	r3, [pc, #88]	; (800477c <GetID+0xbc>)
 8004722:	18c9      	adds	r1, r1, r3
 8004724:	0028      	movs	r0, r5
 8004726:	f7fb fced 	bl	8000104 <strcmp>
 800472a:	2800      	cmp	r0, #0
 800472c:	d1ef      	bne.n	800470e <GetID+0x4e>
 800472e:	2e00      	cmp	r6, #0
 8004730:	d0ed      	beq.n	800470e <GetID+0x4e>
				return (i);
 8004732:	b220      	sxth	r0, r4
 8004734:	e7d8      	b.n	80046e8 <GetID+0x28>
		for(i =0; i < MaxNumOfGroups; i++){
 8004736:	2600      	movs	r6, #0
 8004738:	2e09      	cmp	r6, #9
 800473a:	d811      	bhi.n	8004760 <GetID+0xa0>
			if(!strcmp(string,groupAlias[i]))
 800473c:	00b3      	lsls	r3, r6, #2
 800473e:	199b      	adds	r3, r3, r6
 8004740:	005a      	lsls	r2, r3, #1
 8004742:	490f      	ldr	r1, [pc, #60]	; (8004780 <GetID+0xc0>)
 8004744:	1889      	adds	r1, r1, r2
 8004746:	0028      	movs	r0, r5
 8004748:	f7fb fcdc 	bl	8000104 <strcmp>
 800474c:	2800      	cmp	r0, #0
 800474e:	d002      	beq.n	8004756 <GetID+0x96>
		for(i =0; i < MaxNumOfGroups; i++){
 8004750:	3601      	adds	r6, #1
 8004752:	b2f6      	uxtb	r6, r6
 8004754:	e7f0      	b.n	8004738 <GetID+0x78>
				return (BOS_MULTICAST | (i << 8));
 8004756:	0234      	lsls	r4, r6, #8
 8004758:	20fe      	movs	r0, #254	; 0xfe
 800475a:	4320      	orrs	r0, r4
 800475c:	b200      	sxth	r0, r0
 800475e:	e7c3      	b.n	80046e8 <GetID+0x28>
		return BOS_ERR_WrongName;
 8004760:	2064      	movs	r0, #100	; 0x64
 8004762:	e7c1      	b.n	80046e8 <GetID+0x28>
		return BOS_BROADCAST;
 8004764:	20ff      	movs	r0, #255	; 0xff
 8004766:	e7bf      	b.n	80046e8 <GetID+0x28>
			return BOS_ERR_WrongID;
 8004768:	2066      	movs	r0, #102	; 0x66
 800476a:	e7bd      	b.n	80046e8 <GetID+0x28>
 800476c:	0801a138 	.word	0x0801a138
 8004770:	0801a13c 	.word	0x0801a13c
 8004774:	20001072 	.word	0x20001072
 8004778:	20000024 	.word	0x20000024
 800477c:	20000f64 	.word	0x20000f64
 8004780:	20000e58 	.word	0x20000e58

08004784 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	0006      	movs	r6, r0
 8004788:	000d      	movs	r5, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
 800478a:	2400      	movs	r4, #0
 800478c:	2c03      	cmp	r4, #3
 800478e:	dc09      	bgt.n	80047a4 <NameModule+0x20>
		if(!strcmp(alias,BOSkeywords[i]))
 8004790:	00a3      	lsls	r3, r4, #2
 8004792:	4929      	ldr	r1, [pc, #164]	; (8004838 <NameModule+0xb4>)
 8004794:	18c9      	adds	r1, r1, r3
 8004796:	0028      	movs	r0, r5
 8004798:	f7fb fcb4 	bl	8000104 <strcmp>
 800479c:	2800      	cmp	r0, #0
 800479e:	d043      	beq.n	8004828 <NameModule+0xa4>
	for(i =0; i < NumOfKeywords; i++){
 80047a0:	3401      	adds	r4, #1
 80047a2:	e7f3      	b.n	800478c <NameModule+0x8>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 80047a4:	2401      	movs	r4, #1
 80047a6:	4b25      	ldr	r3, [pc, #148]	; (800483c <NameModule+0xb8>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	dd0b      	ble.n	80047c6 <NameModule+0x42>
		if(!strcmp(alias,moduleAlias[i]))
 80047ae:	00a3      	lsls	r3, r4, #2
 80047b0:	191b      	adds	r3, r3, r4
 80047b2:	0059      	lsls	r1, r3, #1
 80047b4:	4b22      	ldr	r3, [pc, #136]	; (8004840 <NameModule+0xbc>)
 80047b6:	18c9      	adds	r1, r1, r3
 80047b8:	0028      	movs	r0, r5
 80047ba:	f7fb fca3 	bl	8000104 <strcmp>
 80047be:	2800      	cmp	r0, #0
 80047c0:	d034      	beq.n	800482c <NameModule+0xa8>
	for(i =1; i < N; i++){
 80047c2:	3401      	adds	r4, #1
 80047c4:	e7ef      	b.n	80047a6 <NameModule+0x22>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
 80047c6:	2400      	movs	r4, #0
 80047c8:	2c09      	cmp	r4, #9
 80047ca:	dc0b      	bgt.n	80047e4 <NameModule+0x60>
		if(!strcmp(alias,groupAlias[i]))
 80047cc:	00a3      	lsls	r3, r4, #2
 80047ce:	191b      	adds	r3, r3, r4
 80047d0:	005a      	lsls	r2, r3, #1
 80047d2:	491c      	ldr	r1, [pc, #112]	; (8004844 <NameModule+0xc0>)
 80047d4:	1889      	adds	r1, r1, r2
 80047d6:	0028      	movs	r0, r5
 80047d8:	f7fb fc94 	bl	8000104 <strcmp>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d027      	beq.n	8004830 <NameModule+0xac>
	for(i =0; i < MaxNumOfGroups; i++){
 80047e0:	3401      	adds	r4, #1
 80047e2:	e7f1      	b.n	80047c8 <NameModule+0x44>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80047e4:	4b18      	ldr	r3, [pc, #96]	; (8004848 <NameModule+0xc4>)
 80047e6:	4a19      	ldr	r2, [pc, #100]	; (800484c <NameModule+0xc8>)
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	4b17      	ldr	r3, [pc, #92]	; (8004848 <NameModule+0xc4>)
 80047ec:	681c      	ldr	r4, [r3, #0]
 80047ee:	2c00      	cmp	r4, #0
 80047f0:	d00f      	beq.n	8004812 <NameModule+0x8e>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80047f6:	0038      	movs	r0, r7
 80047f8:	f7fb fc8e 	bl	8000118 <strlen>
 80047fc:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80047fe:	0039      	movs	r1, r7
 8004800:	0028      	movs	r0, r5
 8004802:	f011 f8f1 	bl	80159e8 <strncmp>
 8004806:	2800      	cmp	r0, #0
 8004808:	d014      	beq.n	8004834 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800480a:	6862      	ldr	r2, [r4, #4]
 800480c:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <NameModule+0xc4>)
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e7eb      	b.n	80047ea <NameModule+0x66>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 8004812:	00b3      	lsls	r3, r6, #2
 8004814:	199e      	adds	r6, r3, r6
 8004816:	0070      	lsls	r0, r6, #1
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <NameModule+0xbc>)
 800481a:	18c0      	adds	r0, r0, r3
 800481c:	0029      	movs	r1, r5
 800481e:	f011 f8db 	bl	80159d8 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 8004822:	f7ff f8f5 	bl	8003a10 <SaveEEalias>
	
	return result;
 8004826:	e002      	b.n	800482e <NameModule+0xaa>
			return BOS_ERR_Keyword;
 8004828:	2006      	movs	r0, #6
 800482a:	e000      	b.n	800482e <NameModule+0xaa>
			return BOS_ERR_ExistingAlias;
 800482c:	2007      	movs	r0, #7
}
 800482e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8004830:	2007      	movs	r0, #7
 8004832:	e7fc      	b.n	800482e <NameModule+0xaa>
			return BOS_ERR_ExistingCmd;
 8004834:	2008      	movs	r0, #8
 8004836:	e7fa      	b.n	800482e <NameModule+0xaa>
 8004838:	08019ee8 	.word	0x08019ee8
 800483c:	20000024 	.word	0x20000024
 8004840:	20000f64 	.word	0x20000f64
 8004844:	20000e58 	.word	0x20000e58
 8004848:	200010f4 	.word	0x200010f4
 800484c:	200000c8 	.word	0x200000c8

08004850 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	0006      	movs	r6, r0
 8004854:	000d      	movs	r5, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004856:	2400      	movs	r4, #0
 8004858:	2c09      	cmp	r4, #9
 800485a:	dc14      	bgt.n	8004886 <AddModuleToGroup+0x36>
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800485c:	00a3      	lsls	r3, r4, #2
 800485e:	191b      	adds	r3, r3, r4
 8004860:	005a      	lsls	r2, r3, #1
 8004862:	4933      	ldr	r1, [pc, #204]	; (8004930 <AddModuleToGroup+0xe0>)
 8004864:	1889      	adds	r1, r1, r2
 8004866:	0028      	movs	r0, r5
 8004868:	f7fb fc4c 	bl	8000104 <strcmp>
 800486c:	2800      	cmp	r0, #0
 800486e:	d001      	beq.n	8004874 <AddModuleToGroup+0x24>
	for(i =0; i < MaxNumOfGroups; i++){
 8004870:	3401      	adds	r4, #1
 8004872:	e7f1      	b.n	8004858 <AddModuleToGroup+0x8>
			/* 1. Add this module to the group */
			groupModules[module - 1] |=(0x0001 << i);
 8004874:	3e01      	subs	r6, #1
 8004876:	2201      	movs	r2, #1
 8004878:	40a2      	lsls	r2, r4
 800487a:	492e      	ldr	r1, [pc, #184]	; (8004934 <AddModuleToGroup+0xe4>)
 800487c:	0076      	lsls	r6, r6, #1
 800487e:	5a73      	ldrh	r3, [r6, r1]
 8004880:	4313      	orrs	r3, r2
 8004882:	5273      	strh	r3, [r6, r1]
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 8004884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(j =0; j < NumOfKeywords; j++){
 8004886:	2400      	movs	r4, #0
 8004888:	2c03      	cmp	r4, #3
 800488a:	dc09      	bgt.n	80048a0 <AddModuleToGroup+0x50>
		if(!strcmp(group,BOSkeywords[j]))
 800488c:	00a3      	lsls	r3, r4, #2
 800488e:	492a      	ldr	r1, [pc, #168]	; (8004938 <AddModuleToGroup+0xe8>)
 8004890:	18c9      	adds	r1, r1, r3
 8004892:	0028      	movs	r0, r5
 8004894:	f7fb fc36 	bl	8000104 <strcmp>
 8004898:	2800      	cmp	r0, #0
 800489a:	d045      	beq.n	8004928 <AddModuleToGroup+0xd8>
	for(j =0; j < NumOfKeywords; j++){
 800489c:	3401      	adds	r4, #1
 800489e:	e7f3      	b.n	8004888 <AddModuleToGroup+0x38>
	for(j =1; j < N; j++){
 80048a0:	2401      	movs	r4, #1
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <AddModuleToGroup+0xec>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	42a3      	cmp	r3, r4
 80048a8:	dd0b      	ble.n	80048c2 <AddModuleToGroup+0x72>
		if(!strcmp(group,moduleAlias[j]))
 80048aa:	00a3      	lsls	r3, r4, #2
 80048ac:	191b      	adds	r3, r3, r4
 80048ae:	0059      	lsls	r1, r3, #1
 80048b0:	4b23      	ldr	r3, [pc, #140]	; (8004940 <AddModuleToGroup+0xf0>)
 80048b2:	18c9      	adds	r1, r1, r3
 80048b4:	0028      	movs	r0, r5
 80048b6:	f7fb fc25 	bl	8000104 <strcmp>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d036      	beq.n	800492c <AddModuleToGroup+0xdc>
	for(j =1; j < N; j++){
 80048be:	3401      	adds	r4, #1
 80048c0:	e7ef      	b.n	80048a2 <AddModuleToGroup+0x52>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <AddModuleToGroup+0xf4>)
 80048c4:	4a20      	ldr	r2, [pc, #128]	; (8004948 <AddModuleToGroup+0xf8>)
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e002      	b.n	80048d0 <AddModuleToGroup+0x80>
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <AddModuleToGroup+0xf4>)
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <AddModuleToGroup+0xf4>)
 80048d2:	681c      	ldr	r4, [r3, #0]
 80048d4:	2c00      	cmp	r4, #0
 80048d6:	d01c      	beq.n	8004912 <AddModuleToGroup+0xc2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80048dc:	0038      	movs	r0, r7
 80048de:	f7fb fc1b 	bl	8000118 <strlen>
 80048e2:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80048e4:	0039      	movs	r1, r7
 80048e6:	0028      	movs	r0, r5
 80048e8:	f011 f87e 	bl	80159e8 <strncmp>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d1ec      	bne.n	80048ca <AddModuleToGroup+0x7a>
			return BOS_ERR_ExistingCmd;
 80048f0:	2008      	movs	r0, #8
 80048f2:	e7c7      	b.n	8004884 <AddModuleToGroup+0x34>
			strcpy(groupAlias[i],group);
 80048f4:	480e      	ldr	r0, [pc, #56]	; (8004930 <AddModuleToGroup+0xe0>)
 80048f6:	1880      	adds	r0, r0, r2
 80048f8:	0029      	movs	r1, r5
 80048fa:	f011 f86d 	bl	80159d8 <strcpy>
	groupModules[module - 1] |=(0x0001 << i);
 80048fe:	3e01      	subs	r6, #1
 8004900:	2201      	movs	r2, #1
 8004902:	40a2      	lsls	r2, r4
 8004904:	490b      	ldr	r1, [pc, #44]	; (8004934 <AddModuleToGroup+0xe4>)
 8004906:	0076      	lsls	r6, r6, #1
 8004908:	5a73      	ldrh	r3, [r6, r1]
 800490a:	4313      	orrs	r3, r2
 800490c:	5273      	strh	r3, [r6, r1]
	return result;
 800490e:	2000      	movs	r0, #0
 8004910:	e7b8      	b.n	8004884 <AddModuleToGroup+0x34>
	for(i =0; i < MaxNumOfGroups; i++){
 8004912:	2c09      	cmp	r4, #9
 8004914:	dcf3      	bgt.n	80048fe <AddModuleToGroup+0xae>
		if(!groupAlias[i][0]){
 8004916:	00a3      	lsls	r3, r4, #2
 8004918:	191b      	adds	r3, r3, r4
 800491a:	005a      	lsls	r2, r3, #1
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <AddModuleToGroup+0xe0>)
 800491e:	5cd3      	ldrb	r3, [r2, r3]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0e7      	beq.n	80048f4 <AddModuleToGroup+0xa4>
	for(i =0; i < MaxNumOfGroups; i++){
 8004924:	3401      	adds	r4, #1
 8004926:	e7f4      	b.n	8004912 <AddModuleToGroup+0xc2>
			return BOS_ERR_Keyword;
 8004928:	2006      	movs	r0, #6
 800492a:	e7ab      	b.n	8004884 <AddModuleToGroup+0x34>
			return BOS_ERR_ExistingAlias;
 800492c:	2007      	movs	r0, #7
 800492e:	e7a9      	b.n	8004884 <AddModuleToGroup+0x34>
 8004930:	20000e58 	.word	0x20000e58
 8004934:	20000ebc 	.word	0x20000ebc
 8004938:	08019ee8 	.word	0x08019ee8
 800493c:	20000024 	.word	0x20000024
 8004940:	20000f64 	.word	0x20000f64
 8004944:	200010f8 	.word	0x200010f8
 8004948:	200000c8 	.word	0x200000c8

0800494c <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 800494c:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 800494e:	2601      	movs	r6, #1
	BOS_Status result =BOS_OK;
 8004950:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8004952:	e01d      	b.n	8004990 <ReadPortsDir+0x44>
				result =BOS_ERR_NoResponse;
			}
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004954:	3401      	adds	r4, #1
 8004956:	b2e4      	uxtb	r4, r4
 8004958:	2c05      	cmp	r4, #5
 800495a:	d817      	bhi.n	800498c <ReadPortsDir+0x40>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800495c:	0020      	movs	r0, r4
 800495e:	f00b f875 	bl	800fa4c <GetUart>
 8004962:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	429a      	cmp	r2, r3
 800496a:	d1f3      	bne.n	8004954 <ReadPortsDir+0x8>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <ReadPortsDir+0x74>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	3b01      	subs	r3, #1
 8004972:	1e61      	subs	r1, r4, #1
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	0212      	lsls	r2, r2, #8
 8004978:	410a      	asrs	r2, r1
 800497a:	0011      	movs	r1, r2
 800497c:	4811      	ldr	r0, [pc, #68]	; (80049c4 <ReadPortsDir+0x78>)
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	5a1a      	ldrh	r2, [r3, r0]
 8004982:	430a      	orrs	r2, r1
 8004984:	521a      	strh	r2, [r3, r0]
 8004986:	e7e5      	b.n	8004954 <ReadPortsDir+0x8>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004988:	2401      	movs	r4, #1
 800498a:	e7e5      	b.n	8004958 <ReadPortsDir+0xc>
	for(uint8_t i =1; i <= N; i++){
 800498c:	3601      	adds	r6, #1
 800498e:	b2f6      	uxtb	r6, r6
 8004990:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <ReadPortsDir+0x7c>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	42b3      	cmp	r3, r6
 8004996:	d311      	bcc.n	80049bc <ReadPortsDir+0x70>
		if(i != myID){
 8004998:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <ReadPortsDir+0x74>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	42b3      	cmp	r3, r6
 800499e:	d0f3      	beq.n	8004988 <ReadPortsDir+0x3c>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 80049a0:	2200      	movs	r2, #0
 80049a2:	2113      	movs	r1, #19
 80049a4:	0030      	movs	r0, r6
 80049a6:	f005 f935 	bl	8009c14 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80049aa:	2032      	movs	r0, #50	; 0x32
 80049ac:	f00a feba 	bl	800f724 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <ReadPortsDir+0x80>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0e9      	beq.n	800498c <ReadPortsDir+0x40>
				result =BOS_ERR_NoResponse;
 80049b8:	2502      	movs	r5, #2
 80049ba:	e7e7      	b.n	800498c <ReadPortsDir+0x40>
			}
		}
	}
	
	return result;
}
 80049bc:	0028      	movs	r0, r5
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	20001072 	.word	0x20001072
 80049c4:	200074e4 	.word	0x200074e4
 80049c8:	20000024 	.word	0x20000024
 80049cc:	20001108 	.word	0x20001108

080049d0 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 80049d0:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80049d2:	2401      	movs	r4, #1
 80049d4:	e007      	b.n	80049e6 <UpdateMyPortsDir+0x16>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 80049d6:	0020      	movs	r0, r4
 80049d8:	f00b f838 	bl	800fa4c <GetUart>
 80049dc:	2101      	movs	r1, #1
 80049de:	f00b f8cd 	bl	800fb7c <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80049e2:	3401      	adds	r4, #1
 80049e4:	b2e4      	uxtb	r4, r4
 80049e6:	2c05      	cmp	r4, #5
 80049e8:	d812      	bhi.n	8004a10 <UpdateMyPortsDir+0x40>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <UpdateMyPortsDir+0x44>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <UpdateMyPortsDir+0x48>)
 80049f4:	5a9a      	ldrh	r2, [r3, r2]
 80049f6:	1e61      	subs	r1, r4, #1
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	410b      	asrs	r3, r1
 80049fe:	4213      	tst	r3, r2
 8004a00:	d1e9      	bne.n	80049d6 <UpdateMyPortsDir+0x6>
			SwapUartPins(GetUart(p),NORMAL);
 8004a02:	0020      	movs	r0, r4
 8004a04:	f00b f822 	bl	800fa4c <GetUart>
 8004a08:	2100      	movs	r1, #0
 8004a0a:	f00b f8b7 	bl	800fb7c <SwapUartPins>
 8004a0e:	e7e8      	b.n	80049e2 <UpdateMyPortsDir+0x12>
		}
	}
	
	return result;
}
 8004a10:	2000      	movs	r0, #0
 8004a12:	bd10      	pop	{r4, pc}
 8004a14:	20001072 	.word	0x20001072
 8004a18:	200074e4 	.word	0x200074e4

08004a1c <BOS_Init>:
void BOS_Init(void){
 8004a1c:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8004a1e:	f00a fd39 	bl	800f494 <RTC_Init>
	GetTimeDate();
 8004a22:	f00a fdd7 	bl	800f5d4 <GetTimeDate>
	EE_Init();
 8004a26:	f003 fa4d 	bl	8007ec4 <EE_Init>
	GPIO_Init();
 8004a2a:	f00a fa93 	bl	800ef54 <GPIO_Init>
	DMA_Init();
 8004a2e:	f009 f81b 	bl	800da68 <DMA_Init>
	TIM_USEC_Init();
 8004a32:	f00a fe03 	bl	800f63c <TIM_USEC_Init>
	CRC_Init();
 8004a36:	f00a fa3b 	bl	800eeb0 <CRC_Init>
	TIM_MSEC_Init();
 8004a3a:	f00a fe31 	bl	800f6a0 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 8004a3e:	f00a fb3d 	bl	800f0bc <IsFactoryReset>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d111      	bne.n	8004a6a <BOS_Init+0x4e>
	if(IsLowerCLIbaud()){
 8004a46:	f7ff f8d5 	bl	8003bf4 <IsLowerCLIbaud>
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d053      	beq.n	8004af6 <BOS_Init+0xda>
		CLI_LOW_Baudrate_Flag =1;
 8004a4e:	4b36      	ldr	r3, [pc, #216]	; (8004b28 <BOS_Init+0x10c>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004a54:	2032      	movs	r0, #50	; 0x32
 8004a56:	f00a fe65 	bl	800f724 <StartMilliDelay>
		Module_Peripheral_Init();
 8004a5a:	f007 fa09 	bl	800be70 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004a5e:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <BOS_Init+0x110>)
 8004a60:	22e1      	movs	r2, #225	; 0xe1
 8004a62:	0252      	lsls	r2, r2, #9
 8004a64:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004a66:	2401      	movs	r4, #1
 8004a68:	e011      	b.n	8004a8e <BOS_Init+0x72>
		EE_FormatForFactoryReset();
 8004a6a:	f7ff f8b1 	bl	8003bd0 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a6e:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a72:	4b2f      	ldr	r3, [pc, #188]	; (8004b30 <BOS_Init+0x114>)
 8004a74:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <BOS_Init+0x118>)
 8004a76:	60da      	str	r2, [r3, #12]
 8004a78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8004a7c:	46c0      	nop			; (mov r8, r8)
 8004a7e:	e7fd      	b.n	8004a7c <BOS_Init+0x60>
			UpdateBaudrate(port,BOS.clibaudrate);
 8004a80:	4b2a      	ldr	r3, [pc, #168]	; (8004b2c <BOS_Init+0x110>)
 8004a82:	6899      	ldr	r1, [r3, #8]
 8004a84:	0020      	movs	r0, r4
 8004a86:	f00b f86f 	bl	800fb68 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004a8a:	3401      	adds	r4, #1
 8004a8c:	b2e4      	uxtb	r4, r4
 8004a8e:	2c05      	cmp	r4, #5
 8004a90:	d9f6      	bls.n	8004a80 <BOS_Init+0x64>
	LoadEEvars();
 8004a92:	f7fe ff8b 	bl	80039ac <LoadEEvars>
	UpdateMyPortsDir();
 8004a96:	f7ff ff9b 	bl	80049d0 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004a9a:	f009 fd4d 	bl	800e538 <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 8004a9e:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <BOS_Init+0x11c>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d02d      	beq.n	8004b02 <BOS_Init+0xe6>
		IND_ON();
 8004aa6:	2580      	movs	r5, #128	; 0x80
 8004aa8:	012d      	lsls	r5, r5, #4
 8004aaa:	2490      	movs	r4, #144	; 0x90
 8004aac:	05e4      	lsls	r4, r4, #23
 8004aae:	2201      	movs	r2, #1
 8004ab0:	0029      	movs	r1, r5
 8004ab2:	0020      	movs	r0, r4
 8004ab4:	f00e fd9f 	bl	80135f6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8004ab8:	20fa      	movs	r0, #250	; 0xfa
 8004aba:	0040      	lsls	r0, r0, #1
 8004abc:	f00a fe32 	bl	800f724 <StartMilliDelay>
		IND_OFF();
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	0029      	movs	r1, r5
 8004ac4:	0020      	movs	r0, r4
 8004ac6:	f00e fd96 	bl	80135f6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004aca:	2064      	movs	r0, #100	; 0x64
 8004acc:	f00a fe2a 	bl	800f724 <StartMilliDelay>
		IND_ON();
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	0029      	movs	r1, r5
 8004ad4:	0020      	movs	r0, r4
 8004ad6:	f00e fd8e 	bl	80135f6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004ada:	2064      	movs	r0, #100	; 0x64
 8004adc:	f00a fe22 	bl	800f724 <StartMilliDelay>
		IND_OFF();
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	0029      	movs	r1, r5
 8004ae4:	0020      	movs	r0, r4
 8004ae6:	f00e fd86 	bl	80135f6 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004aea:	f003 f825 	bl	8007b38 <ResetUartORE>
	BOS_initialized =1;
 8004aee:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <BOS_Init+0x120>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]
}
 8004af4:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004af6:	2032      	movs	r0, #50	; 0x32
 8004af8:	f00a fe14 	bl	800f724 <StartMilliDelay>
		Module_Peripheral_Init();
 8004afc:	f007 f9b8 	bl	800be70 <Module_Peripheral_Init>
 8004b00:	e7c7      	b.n	8004a92 <BOS_Init+0x76>
		IND_ON();
 8004b02:	2580      	movs	r5, #128	; 0x80
 8004b04:	012d      	lsls	r5, r5, #4
 8004b06:	2490      	movs	r4, #144	; 0x90
 8004b08:	05e4      	lsls	r4, r4, #23
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	0029      	movs	r1, r5
 8004b0e:	0020      	movs	r0, r4
 8004b10:	f00e fd71 	bl	80135f6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8004b14:	20fa      	movs	r0, #250	; 0xfa
 8004b16:	0040      	lsls	r0, r0, #1
 8004b18:	f00a fe04 	bl	800f724 <StartMilliDelay>
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	0029      	movs	r1, r5
 8004b20:	0020      	movs	r0, r4
 8004b22:	f00e fd68 	bl	80135f6 <HAL_GPIO_WritePin>
 8004b26:	e7e0      	b.n	8004aea <BOS_Init+0xce>
 8004b28:	20000aa7 	.word	0x20000aa7
 8004b2c:	2000704c 	.word	0x2000704c
 8004b30:	e000ed00 	.word	0xe000ed00
 8004b34:	05fa0004 	.word	0x05fa0004
 8004b38:	20001072 	.word	0x20001072
 8004b3c:	20000aa6 	.word	0x20000aa6

08004b40 <Module_Init>:
void Module_Init(void){
 8004b40:	b510      	push	{r4, lr}
	HAL_Init();
 8004b42:	f00d f933 	bl	8011dac <HAL_Init>
	SystemClock_Config();
 8004b46:	f007 f93b 	bl	800bdc0 <SystemClock_Config>
	BOS_Init();
 8004b4a:	f7ff ff67 	bl	8004a1c <BOS_Init>
	MX_FREERTOS_Init();
 8004b4e:	f003 fbd7 	bl	8008300 <MX_FREERTOS_Init>
	osKernelStart();
 8004b52:	f00b f8c8 	bl	800fce6 <osKernelStart>
}
 8004b56:	bd10      	pop	{r4, pc}

08004b58 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004b58:	b530      	push	{r4, r5, lr}
 8004b5a:	b083      	sub	sp, #12
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004b5c:	201e      	movs	r0, #30
 8004b5e:	f010 faaf 	bl	80150c0 <malloc>
 8004b62:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8004b64:	221e      	movs	r2, #30
 8004b66:	2100      	movs	r1, #0
 8004b68:	f010 fd00 	bl	801556c <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004b6c:	4908      	ldr	r1, [pc, #32]	; (8004b90 <GetDateString+0x38>)
 8004b6e:	7d0a      	ldrb	r2, [r1, #20]
 8004b70:	3a01      	subs	r2, #1
 8004b72:	7d8b      	ldrb	r3, [r1, #22]
 8004b74:	7d48      	ldrb	r0, [r1, #21]
 8004b76:	8b09      	ldrh	r1, [r1, #24]
 8004b78:	0092      	lsls	r2, r2, #2
 8004b7a:	4d06      	ldr	r5, [pc, #24]	; (8004b94 <GetDateString+0x3c>)
 8004b7c:	5952      	ldr	r2, [r2, r5]
 8004b7e:	9101      	str	r1, [sp, #4]
 8004b80:	9000      	str	r0, [sp, #0]
 8004b82:	4905      	ldr	r1, [pc, #20]	; (8004b98 <GetDateString+0x40>)
 8004b84:	0020      	movs	r0, r4
 8004b86:	f010 feeb 	bl	8015960 <sprintf>
	return buffer;
}
 8004b8a:	0020      	movs	r0, r4
 8004b8c:	b003      	add	sp, #12
 8004b8e:	bd30      	pop	{r4, r5, pc}
 8004b90:	2000704c 	.word	0x2000704c
 8004b94:	0801a44c 	.word	0x0801a44c
 8004b98:	0801a158 	.word	0x0801a158

08004b9c <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004b9c:	b500      	push	{lr}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <Bridge+0x24>)
 8004ba4:	7819      	ldrb	r1, [r3, #0]
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	9303      	str	r3, [sp, #12]
 8004baa:	3b02      	subs	r3, #2
 8004bac:	9302      	str	r3, [sp, #8]
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	3303      	adds	r3, #3
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	000b      	movs	r3, r1
 8004bb6:	f005 f853 	bl	8009c60 <StartScastDMAStream>
}
 8004bba:	b005      	add	sp, #20
 8004bbc:	bd00      	pop	{pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	20001072 	.word	0x20001072

08004bc4 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004bc4:	b530      	push	{r4, r5, lr}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	0004      	movs	r4, r0
 8004bca:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	9304      	str	r3, [sp, #16]
 8004bd0:	9303      	str	r3, [sp, #12]
 8004bd2:	9302      	str	r3, [sp, #8]
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2100      	movs	r1, #0
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f7fe ff47 	bl	8003a70 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004be2:	1e62      	subs	r2, r4, #1
 8004be4:	00d3      	lsls	r3, r2, #3
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	00da      	lsls	r2, r3, #3
 8004bea:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <Unbridge+0x7c>)
 8004bec:	58d2      	ldr	r2, [r2, r3]
 8004bee:	2a00      	cmp	r2, #0
 8004bf0:	d007      	beq.n	8004c02 <Unbridge+0x3e>
 8004bf2:	1e69      	subs	r1, r5, #1
 8004bf4:	00cb      	lsls	r3, r1, #3
 8004bf6:	1a5b      	subs	r3, r3, r1
 8004bf8:	00d9      	lsls	r1, r3, #3
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <Unbridge+0x7c>)
 8004bfc:	58cb      	ldr	r3, [r1, r3]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10e      	bne.n	8004c20 <Unbridge+0x5c>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
 8004c02:	2a00      	cmp	r2, #0
 8004c04:	d115      	bne.n	8004c32 <Unbridge+0x6e>
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
 8004c06:	1e6a      	subs	r2, r5, #1
 8004c08:	00d3      	lsls	r3, r2, #3
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	00da      	lsls	r2, r3, #3
 8004c0e:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <Unbridge+0x7c>)
 8004c10:	58d3      	ldr	r3, [r2, r3]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d012      	beq.n	8004c3c <Unbridge+0x78>
		SwitchStreamDMAToMsg(port2);
 8004c16:	0028      	movs	r0, r5
 8004c18:	f002 fefe 	bl	8007a18 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	e006      	b.n	8004c2e <Unbridge+0x6a>
		SwitchStreamDMAToMsg(port1);
 8004c20:	0020      	movs	r0, r4
 8004c22:	f002 fef9 	bl	8007a18 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 8004c26:	0028      	movs	r0, r5
 8004c28:	f002 fef6 	bl	8007a18 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004c2c:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004c2e:	b007      	add	sp, #28
 8004c30:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 8004c32:	0020      	movs	r0, r4
 8004c34:	f002 fef0 	bl	8007a18 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004c38:	2000      	movs	r0, #0
 8004c3a:	e7f8      	b.n	8004c2e <Unbridge+0x6a>
		return BOS_ERR_WrongValue;
 8004c3c:	2068      	movs	r0, #104	; 0x68
 8004c3e:	e7f6      	b.n	8004c2e <Unbridge+0x6a>
 8004c40:	20002014 	.word	0x20002014

08004c44 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	0007      	movs	r7, r0
	for(int i =0; string[i]; i++){
 8004c48:	2500      	movs	r5, #0
 8004c4a:	e001      	b.n	8004c50 <StringToLowerCase+0xc>
		string[i] =tolower(string[i]);
 8004c4c:	7034      	strb	r4, [r6, #0]
	for(int i =0; string[i]; i++){
 8004c4e:	3501      	adds	r5, #1
 8004c50:	197e      	adds	r6, r7, r5
 8004c52:	7834      	ldrb	r4, [r6, #0]
 8004c54:	2c00      	cmp	r4, #0
 8004c56:	d009      	beq.n	8004c6c <StringToLowerCase+0x28>
		string[i] =tolower(string[i]);
 8004c58:	f010 fa24 	bl	80150a4 <__locale_ctype_ptr>
 8004c5c:	1900      	adds	r0, r0, r4
 8004c5e:	7842      	ldrb	r2, [r0, #1]
 8004c60:	2303      	movs	r3, #3
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d1f1      	bne.n	8004c4c <StringToLowerCase+0x8>
 8004c68:	3420      	adds	r4, #32
 8004c6a:	e7ef      	b.n	8004c4c <StringToLowerCase+0x8>
	}
}
 8004c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c70 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c72:	46c6      	mov	lr, r8
 8004c74:	b500      	push	{lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004c7a:	4bd7      	ldr	r3, [pc, #860]	; (8004fd8 <ParseSnippetCondition+0x368>)
 8004c7c:	781c      	ldrb	r4, [r3, #0]
 8004c7e:	2c05      	cmp	r4, #5
 8004c80:	d100      	bne.n	8004c84 <ParseSnippetCondition+0x14>
 8004c82:	e20d      	b.n	80050a0 <ParseSnippetCondition+0x430>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004c84:	48d5      	ldr	r0, [pc, #852]	; (8004fdc <ParseSnippetCondition+0x36c>)
 8004c86:	00a3      	lsls	r3, r4, #2
 8004c88:	191a      	adds	r2, r3, r4
 8004c8a:	0091      	lsls	r1, r2, #2
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	540a      	strb	r2, [r1, r0]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004c90:	1840      	adds	r0, r0, r1
 8004c92:	7042      	strb	r2, [r0, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004c94:	3002      	adds	r0, #2
 8004c96:	3204      	adds	r2, #4
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f010 fc67 	bl	801556c <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004c9e:	782b      	ldrb	r3, [r5, #0]
 8004ca0:	2b62      	cmp	r3, #98	; 0x62
 8004ca2:	d102      	bne.n	8004caa <ParseSnippetCondition+0x3a>
 8004ca4:	78ab      	ldrb	r3, [r5, #2]
 8004ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ca8:	d04f      	beq.n	8004d4a <ParseSnippetCondition+0xda>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004caa:	4ecd      	ldr	r6, [pc, #820]	; (8004fe0 <ParseSnippetCondition+0x370>)
 8004cac:	0029      	movs	r1, r5
 8004cae:	0030      	movs	r0, r6
 8004cb0:	f010 fe92 	bl	80159d8 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004cb4:	4ccb      	ldr	r4, [pc, #812]	; (8004fe4 <ParseSnippetCondition+0x374>)
 8004cb6:	0021      	movs	r1, r4
 8004cb8:	0030      	movs	r0, r6
 8004cba:	f011 fd0d 	bl	80166d8 <strtok>
 8004cbe:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004cc0:	0021      	movs	r1, r4
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f011 fd08 	bl	80166d8 <strtok>
 8004cc8:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 8004cca:	0021      	movs	r1, r4
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f011 fd03 	bl	80166d8 <strtok>
 8004cd2:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004cd4:	2d00      	cmp	r5, #0
 8004cd6:	d100      	bne.n	8004cda <ParseSnippetCondition+0x6a>
 8004cd8:	e1e9      	b.n	80050ae <ParseSnippetCondition+0x43e>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004cda:	0028      	movs	r0, r5
 8004cdc:	f7fe ffec 	bl	8003cb8 <IsModuleParameter>
 8004ce0:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004ce2:	d002      	beq.n	8004cea <ParseSnippetCondition+0x7a>
 8004ce4:	2e00      	cmp	r6, #0
 8004ce6:	d100      	bne.n	8004cea <ParseSnippetCondition+0x7a>
 8004ce8:	e1ac      	b.n	8005044 <ParseSnippetCondition+0x3d4>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004cea:	2e00      	cmp	r6, #0
 8004cec:	d100      	bne.n	8004cf0 <ParseSnippetCondition+0x80>
 8004cee:	e1e0      	b.n	80050b2 <ParseSnippetCondition+0x442>
 8004cf0:	2c00      	cmp	r4, #0
 8004cf2:	d100      	bne.n	8004cf6 <ParseSnippetCondition+0x86>
 8004cf4:	e1df      	b.n	80050b6 <ParseSnippetCondition+0x446>
				modPar2 =IsModuleParameter(thirdPart);
 8004cf6:	0020      	movs	r0, r4
 8004cf8:	f7fe ffde 	bl	8003cb8 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d100      	bne.n	8004d02 <ParseSnippetCondition+0x92>
 8004d00:	e1b1      	b.n	8005066 <ParseSnippetCondition+0x3f6>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004d02:	4bb5      	ldr	r3, [pc, #724]	; (8004fd8 <ParseSnippetCondition+0x368>)
 8004d04:	7819      	ldrb	r1, [r3, #0]
 8004d06:	4ab5      	ldr	r2, [pc, #724]	; (8004fdc <ParseSnippetCondition+0x36c>)
 8004d08:	008b      	lsls	r3, r1, #2
 8004d0a:	185f      	adds	r7, r3, r1
 8004d0c:	00bc      	lsls	r4, r7, #2
 8004d0e:	2704      	movs	r7, #4
 8004d10:	54a7      	strb	r7, [r4, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004d12:	1914      	adds	r4, r2, r4
 8004d14:	70e5      	strb	r5, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004d16:	71e0      	strb	r0, [r4, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004d18:	4daf      	ldr	r5, [pc, #700]	; (8004fd8 <ParseSnippetCondition+0x368>)
 8004d1a:	782c      	ldrb	r4, [r5, #0]
 8004d1c:	0030      	movs	r0, r6
 8004d1e:	f7fe ffe5 	bl	8003cec <IsMathOperator>
 8004d22:	4aae      	ldr	r2, [pc, #696]	; (8004fdc <ParseSnippetCondition+0x36c>)
 8004d24:	00a1      	lsls	r1, r4, #2
 8004d26:	1909      	adds	r1, r1, r4
 8004d28:	008b      	lsls	r3, r1, #2
 8004d2a:	18d3      	adds	r3, r2, r3
 8004d2c:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004d2e:	782b      	ldrb	r3, [r5, #0]
 8004d30:	0099      	lsls	r1, r3, #2
 8004d32:	18c9      	adds	r1, r1, r3
 8004d34:	0088      	lsls	r0, r1, #2
 8004d36:	1812      	adds	r2, r2, r0
 8004d38:	7852      	ldrb	r2, [r2, #1]
 8004d3a:	2a00      	cmp	r2, #0
 8004d3c:	d100      	bne.n	8004d40 <ParseSnippetCondition+0xd0>
 8004d3e:	e1bc      	b.n	80050ba <ParseSnippetCondition+0x44a>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004d40:	3301      	adds	r3, #1
 8004d42:	4aa5      	ldr	r2, [pc, #660]	; (8004fd8 <ParseSnippetCondition+0x368>)
 8004d44:	7013      	strb	r3, [r2, #0]
				return BOS_OK;
 8004d46:	2000      	movs	r0, #0
 8004d48:	e1ab      	b.n	80050a2 <ParseSnippetCondition+0x432>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004d4a:	786e      	ldrb	r6, [r5, #1]
 8004d4c:	3e30      	subs	r6, #48	; 0x30
 8004d4e:	b2f6      	uxtb	r6, r6
 8004d50:	2e05      	cmp	r6, #5
 8004d52:	d900      	bls.n	8004d56 <ParseSnippetCondition+0xe6>
 8004d54:	e1a9      	b.n	80050aa <ParseSnippetCondition+0x43a>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004d56:	4ba1      	ldr	r3, [pc, #644]	; (8004fdc <ParseSnippetCondition+0x36c>)
 8004d58:	00a2      	lsls	r2, r4, #2
 8004d5a:	1910      	adds	r0, r2, r4
 8004d5c:	0081      	lsls	r1, r0, #2
 8004d5e:	2001      	movs	r0, #1
 8004d60:	54c8      	strb	r0, [r1, r3]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 8004d62:	185b      	adds	r3, r3, r1
 8004d64:	2200      	movs	r2, #0
 8004d66:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004d68:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004d6a:	1cef      	adds	r7, r5, #3
 8004d6c:	3207      	adds	r2, #7
 8004d6e:	499e      	ldr	r1, [pc, #632]	; (8004fe8 <ParseSnippetCondition+0x378>)
 8004d70:	0038      	movs	r0, r7
 8004d72:	f010 fe39 	bl	80159e8 <strncmp>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d122      	bne.n	8004dc0 <ParseSnippetCondition+0x150>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004d7a:	00a3      	lsls	r3, r4, #2
 8004d7c:	191c      	adds	r4, r3, r4
 8004d7e:	00a2      	lsls	r2, r4, #2
 8004d80:	4b96      	ldr	r3, [pc, #600]	; (8004fdc <ParseSnippetCondition+0x36c>)
 8004d82:	189b      	adds	r3, r3, r2
 8004d84:	2205      	movs	r2, #5
 8004d86:	70da      	strb	r2, [r3, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004d88:	00f2      	lsls	r2, r6, #3
 8004d8a:	1992      	adds	r2, r2, r6
 8004d8c:	4b97      	ldr	r3, [pc, #604]	; (8004fec <ParseSnippetCondition+0x37c>)
 8004d8e:	189b      	adds	r3, r3, r2
 8004d90:	7a1b      	ldrb	r3, [r3, #8]
 8004d92:	07db      	lsls	r3, r3, #31
 8004d94:	d505      	bpl.n	8004da2 <ParseSnippetCondition+0x132>
				status =BOS_OK;
 8004d96:	2000      	movs	r0, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004d98:	4a8f      	ldr	r2, [pc, #572]	; (8004fd8 <ParseSnippetCondition+0x368>)
 8004d9a:	7813      	ldrb	r3, [r2, #0]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	7013      	strb	r3, [r2, #0]
 8004da0:	e17f      	b.n	80050a2 <ParseSnippetCondition+0x432>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004da2:	2301      	movs	r3, #1
 8004da4:	9305      	str	r3, [sp, #20]
 8004da6:	2300      	movs	r3, #0
 8004da8:	9304      	str	r3, [sp, #16]
 8004daa:	9303      	str	r3, [sp, #12]
 8004dac:	9302      	str	r3, [sp, #8]
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	2101      	movs	r1, #1
 8004db6:	0030      	movs	r0, r6
 8004db8:	f003 fd44 	bl	8008844 <SetButtonEvents>
				status =BOS_OK;
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	e7eb      	b.n	8004d98 <ParseSnippetCondition+0x128>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004dc0:	220e      	movs	r2, #14
 8004dc2:	498b      	ldr	r1, [pc, #556]	; (8004ff0 <ParseSnippetCondition+0x380>)
 8004dc4:	0038      	movs	r0, r7
 8004dc6:	f010 fe0f 	bl	80159e8 <strncmp>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d11e      	bne.n	8004e0c <ParseSnippetCondition+0x19c>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004dce:	00a3      	lsls	r3, r4, #2
 8004dd0:	191c      	adds	r4, r3, r4
 8004dd2:	00a2      	lsls	r2, r4, #2
 8004dd4:	4b81      	ldr	r3, [pc, #516]	; (8004fdc <ParseSnippetCondition+0x36c>)
 8004dd6:	189b      	adds	r3, r3, r2
 8004dd8:	2206      	movs	r2, #6
 8004dda:	70da      	strb	r2, [r3, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004ddc:	00f2      	lsls	r2, r6, #3
 8004dde:	1992      	adds	r2, r2, r6
 8004de0:	4b82      	ldr	r3, [pc, #520]	; (8004fec <ParseSnippetCondition+0x37c>)
 8004de2:	189b      	adds	r3, r3, r2
 8004de4:	7a1b      	ldrb	r3, [r3, #8]
 8004de6:	079b      	lsls	r3, r3, #30
 8004de8:	d501      	bpl.n	8004dee <ParseSnippetCondition+0x17e>
				status =BOS_OK;
 8004dea:	2000      	movs	r0, #0
 8004dec:	e7d4      	b.n	8004d98 <ParseSnippetCondition+0x128>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dee:	2301      	movs	r3, #1
 8004df0:	9305      	str	r3, [sp, #20]
 8004df2:	2300      	movs	r3, #0
 8004df4:	9304      	str	r3, [sp, #16]
 8004df6:	9303      	str	r3, [sp, #12]
 8004df8:	9302      	str	r3, [sp, #8]
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	2100      	movs	r1, #0
 8004e02:	0030      	movs	r0, r6
 8004e04:	f003 fd1e 	bl	8008844 <SetButtonEvents>
				status =BOS_OK;
 8004e08:	2000      	movs	r0, #0
 8004e0a:	e7c5      	b.n	8004d98 <ParseSnippetCondition+0x128>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004e0c:	220c      	movs	r2, #12
 8004e0e:	4979      	ldr	r1, [pc, #484]	; (8004ff4 <ParseSnippetCondition+0x384>)
 8004e10:	0038      	movs	r0, r7
 8004e12:	f010 fde9 	bl	80159e8 <strncmp>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d17b      	bne.n	8004f12 <ParseSnippetCondition+0x2a2>
				if(!button[port].pressedX1Sec){
 8004e1a:	00f2      	lsls	r2, r6, #3
 8004e1c:	1992      	adds	r2, r2, r6
 8004e1e:	4b73      	ldr	r3, [pc, #460]	; (8004fec <ParseSnippetCondition+0x37c>)
 8004e20:	189b      	adds	r3, r3, r2
 8004e22:	789b      	ldrb	r3, [r3, #2]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00f      	beq.n	8004e48 <ParseSnippetCondition+0x1d8>
				else if(!button[port].pressedX2Sec){
 8004e28:	00f2      	lsls	r2, r6, #3
 8004e2a:	1992      	adds	r2, r2, r6
 8004e2c:	4b6f      	ldr	r3, [pc, #444]	; (8004fec <ParseSnippetCondition+0x37c>)
 8004e2e:	189b      	adds	r3, r3, r2
 8004e30:	78db      	ldrb	r3, [r3, #3]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d029      	beq.n	8004e8a <ParseSnippetCondition+0x21a>
				else if(!button[port].pressedX3Sec){
 8004e36:	00f2      	lsls	r2, r6, #3
 8004e38:	1992      	adds	r2, r2, r6
 8004e3a:	4b6c      	ldr	r3, [pc, #432]	; (8004fec <ParseSnippetCondition+0x37c>)
 8004e3c:	189b      	adds	r3, r3, r2
 8004e3e:	791b      	ldrb	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d044      	beq.n	8004ece <ParseSnippetCondition+0x25e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004e44:	200c      	movs	r0, #12
 8004e46:	e7a7      	b.n	8004d98 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004e48:	4f64      	ldr	r7, [pc, #400]	; (8004fdc <ParseSnippetCondition+0x36c>)
 8004e4a:	00a3      	lsls	r3, r4, #2
 8004e4c:	191c      	adds	r4, r3, r4
 8004e4e:	00a3      	lsls	r3, r4, #2
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	2209      	movs	r2, #9
 8004e54:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e56:	0028      	movs	r0, r5
 8004e58:	300f      	adds	r0, #15
 8004e5a:	f010 f8ee 	bl	801503a <atoi>
 8004e5e:	4b5e      	ldr	r3, [pc, #376]	; (8004fd8 <ParseSnippetCondition+0x368>)
 8004e60:	7819      	ldrb	r1, [r3, #0]
 8004e62:	b2c3      	uxtb	r3, r0
 8004e64:	008a      	lsls	r2, r1, #2
 8004e66:	1852      	adds	r2, r2, r1
 8004e68:	0091      	lsls	r1, r2, #2
 8004e6a:	187f      	adds	r7, r7, r1
 8004e6c:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e6e:	2201      	movs	r2, #1
 8004e70:	9205      	str	r2, [sp, #20]
 8004e72:	2200      	movs	r2, #0
 8004e74:	9204      	str	r2, [sp, #16]
 8004e76:	9203      	str	r2, [sp, #12]
 8004e78:	9202      	str	r2, [sp, #8]
 8004e7a:	9201      	str	r2, [sp, #4]
 8004e7c:	9200      	str	r2, [sp, #0]
 8004e7e:	2100      	movs	r1, #0
 8004e80:	0030      	movs	r0, r6
 8004e82:	f003 fcdf 	bl	8008844 <SetButtonEvents>
					status =BOS_OK;
 8004e86:	2000      	movs	r0, #0
 8004e88:	e786      	b.n	8004d98 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004e8a:	4f54      	ldr	r7, [pc, #336]	; (8004fdc <ParseSnippetCondition+0x36c>)
 8004e8c:	00a3      	lsls	r3, r4, #2
 8004e8e:	191c      	adds	r4, r3, r4
 8004e90:	00a3      	lsls	r3, r4, #2
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	220a      	movs	r2, #10
 8004e96:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e98:	0028      	movs	r0, r5
 8004e9a:	300f      	adds	r0, #15
 8004e9c:	f010 f8cd 	bl	801503a <atoi>
 8004ea0:	4b4d      	ldr	r3, [pc, #308]	; (8004fd8 <ParseSnippetCondition+0x368>)
 8004ea2:	781a      	ldrb	r2, [r3, #0]
 8004ea4:	b2c0      	uxtb	r0, r0
 8004ea6:	0093      	lsls	r3, r2, #2
 8004ea8:	189b      	adds	r3, r3, r2
 8004eaa:	009a      	lsls	r2, r3, #2
 8004eac:	18bf      	adds	r7, r7, r2
 8004eae:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	9305      	str	r3, [sp, #20]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	9303      	str	r3, [sp, #12]
 8004eba:	9302      	str	r3, [sp, #8]
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	9000      	str	r0, [sp, #0]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	0030      	movs	r0, r6
 8004ec6:	f003 fcbd 	bl	8008844 <SetButtonEvents>
					status =BOS_OK;
 8004eca:	2000      	movs	r0, #0
 8004ecc:	e764      	b.n	8004d98 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004ece:	4f43      	ldr	r7, [pc, #268]	; (8004fdc <ParseSnippetCondition+0x36c>)
 8004ed0:	00a3      	lsls	r3, r4, #2
 8004ed2:	191c      	adds	r4, r3, r4
 8004ed4:	00a3      	lsls	r3, r4, #2
 8004ed6:	18fb      	adds	r3, r7, r3
 8004ed8:	220b      	movs	r2, #11
 8004eda:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004edc:	0028      	movs	r0, r5
 8004ede:	300f      	adds	r0, #15
 8004ee0:	f010 f8ab 	bl	801503a <atoi>
 8004ee4:	4b3c      	ldr	r3, [pc, #240]	; (8004fd8 <ParseSnippetCondition+0x368>)
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	b2c0      	uxtb	r0, r0
 8004eea:	0093      	lsls	r3, r2, #2
 8004eec:	189b      	adds	r3, r3, r2
 8004eee:	009a      	lsls	r2, r3, #2
 8004ef0:	18bf      	adds	r7, r7, r2
 8004ef2:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	9305      	str	r3, [sp, #20]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9304      	str	r3, [sp, #16]
 8004efc:	9303      	str	r3, [sp, #12]
 8004efe:	9302      	str	r3, [sp, #8]
 8004f00:	9001      	str	r0, [sp, #4]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2200      	movs	r2, #0
 8004f06:	2100      	movs	r1, #0
 8004f08:	0030      	movs	r0, r6
 8004f0a:	f003 fc9b 	bl	8008844 <SetButtonEvents>
					status =BOS_OK;
 8004f0e:	2000      	movs	r0, #0
 8004f10:	e742      	b.n	8004d98 <ParseSnippetCondition+0x128>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004f12:	220d      	movs	r2, #13
 8004f14:	4938      	ldr	r1, [pc, #224]	; (8004ff8 <ParseSnippetCondition+0x388>)
 8004f16:	0038      	movs	r0, r7
 8004f18:	f010 fd66 	bl	80159e8 <strncmp>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d000      	beq.n	8004f22 <ParseSnippetCondition+0x2b2>
 8004f20:	e08e      	b.n	8005040 <ParseSnippetCondition+0x3d0>
				if(!button[port].releasedY1Sec){
 8004f22:	00f2      	lsls	r2, r6, #3
 8004f24:	1992      	adds	r2, r2, r6
 8004f26:	4b31      	ldr	r3, [pc, #196]	; (8004fec <ParseSnippetCondition+0x37c>)
 8004f28:	189b      	adds	r3, r3, r2
 8004f2a:	795b      	ldrb	r3, [r3, #5]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00f      	beq.n	8004f50 <ParseSnippetCondition+0x2e0>
				else if(!button[port].releasedY2Sec){
 8004f30:	00f2      	lsls	r2, r6, #3
 8004f32:	1992      	adds	r2, r2, r6
 8004f34:	4b2d      	ldr	r3, [pc, #180]	; (8004fec <ParseSnippetCondition+0x37c>)
 8004f36:	189b      	adds	r3, r3, r2
 8004f38:	799b      	ldrb	r3, [r3, #6]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d02a      	beq.n	8004f94 <ParseSnippetCondition+0x324>
				else if(!button[port].releasedY3Sec){
 8004f3e:	00f2      	lsls	r2, r6, #3
 8004f40:	1992      	adds	r2, r2, r6
 8004f42:	4b2a      	ldr	r3, [pc, #168]	; (8004fec <ParseSnippetCondition+0x37c>)
 8004f44:	189b      	adds	r3, r3, r2
 8004f46:	79db      	ldrb	r3, [r3, #7]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d057      	beq.n	8004ffc <ParseSnippetCondition+0x38c>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004f4c:	200d      	movs	r0, #13
 8004f4e:	e723      	b.n	8004d98 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004f50:	4f22      	ldr	r7, [pc, #136]	; (8004fdc <ParseSnippetCondition+0x36c>)
 8004f52:	00a3      	lsls	r3, r4, #2
 8004f54:	191c      	adds	r4, r3, r4
 8004f56:	00a3      	lsls	r3, r4, #2
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	220c      	movs	r2, #12
 8004f5c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004f5e:	0028      	movs	r0, r5
 8004f60:	3010      	adds	r0, #16
 8004f62:	f010 f86a 	bl	801503a <atoi>
 8004f66:	4b1c      	ldr	r3, [pc, #112]	; (8004fd8 <ParseSnippetCondition+0x368>)
 8004f68:	781a      	ldrb	r2, [r3, #0]
 8004f6a:	b2c0      	uxtb	r0, r0
 8004f6c:	0093      	lsls	r3, r2, #2
 8004f6e:	189b      	adds	r3, r3, r2
 8004f70:	009a      	lsls	r2, r3, #2
 8004f72:	18bf      	adds	r7, r7, r2
 8004f74:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004f76:	2301      	movs	r3, #1
 8004f78:	9305      	str	r3, [sp, #20]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	9304      	str	r3, [sp, #16]
 8004f7e:	9303      	str	r3, [sp, #12]
 8004f80:	9002      	str	r0, [sp, #8]
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	2100      	movs	r1, #0
 8004f8a:	0030      	movs	r0, r6
 8004f8c:	f003 fc5a 	bl	8008844 <SetButtonEvents>
					status =BOS_OK;
 8004f90:	2000      	movs	r0, #0
 8004f92:	e701      	b.n	8004d98 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004f94:	4f11      	ldr	r7, [pc, #68]	; (8004fdc <ParseSnippetCondition+0x36c>)
 8004f96:	00a3      	lsls	r3, r4, #2
 8004f98:	191c      	adds	r4, r3, r4
 8004f9a:	00a3      	lsls	r3, r4, #2
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	220d      	movs	r2, #13
 8004fa0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004fa2:	0028      	movs	r0, r5
 8004fa4:	3010      	adds	r0, #16
 8004fa6:	f010 f848 	bl	801503a <atoi>
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <ParseSnippetCondition+0x368>)
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	b2c0      	uxtb	r0, r0
 8004fb0:	0093      	lsls	r3, r2, #2
 8004fb2:	189b      	adds	r3, r3, r2
 8004fb4:	009a      	lsls	r2, r3, #2
 8004fb6:	18bf      	adds	r7, r7, r2
 8004fb8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004fba:	2301      	movs	r3, #1
 8004fbc:	9305      	str	r3, [sp, #20]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9304      	str	r3, [sp, #16]
 8004fc2:	9003      	str	r0, [sp, #12]
 8004fc4:	9302      	str	r3, [sp, #8]
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2100      	movs	r1, #0
 8004fce:	0030      	movs	r0, r6
 8004fd0:	f003 fc38 	bl	8008844 <SetButtonEvents>
					status =BOS_OK;
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	e6df      	b.n	8004d98 <ParseSnippetCondition+0x128>
 8004fd8:	20001217 	.word	0x20001217
 8004fdc:	20007068 	.word	0x20007068
 8004fe0:	2000117c 	.word	0x2000117c
 8004fe4:	08019fb4 	.word	0x08019fb4
 8004fe8:	0801b5cc 	.word	0x0801b5cc
 8004fec:	20001744 	.word	0x20001744
 8004ff0:	0801a650 	.word	0x0801a650
 8004ff4:	0801a660 	.word	0x0801a660
 8004ff8:	0801a670 	.word	0x0801a670
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004ffc:	4f30      	ldr	r7, [pc, #192]	; (80050c0 <ParseSnippetCondition+0x450>)
 8004ffe:	3314      	adds	r3, #20
 8005000:	4698      	mov	r8, r3
 8005002:	435c      	muls	r4, r3
 8005004:	193c      	adds	r4, r7, r4
 8005006:	3b06      	subs	r3, #6
 8005008:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 800500a:	0028      	movs	r0, r5
 800500c:	3010      	adds	r0, #16
 800500e:	f010 f814 	bl	801503a <atoi>
 8005012:	4b2c      	ldr	r3, [pc, #176]	; (80050c4 <ParseSnippetCondition+0x454>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	b2c0      	uxtb	r0, r0
 8005018:	4642      	mov	r2, r8
 800501a:	4353      	muls	r3, r2
 800501c:	18ff      	adds	r7, r7, r3
 800501e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8005020:	2301      	movs	r3, #1
 8005022:	9305      	str	r3, [sp, #20]
 8005024:	9004      	str	r0, [sp, #16]
 8005026:	2400      	movs	r4, #0
 8005028:	9403      	str	r4, [sp, #12]
 800502a:	9402      	str	r4, [sp, #8]
 800502c:	9401      	str	r4, [sp, #4]
 800502e:	9400      	str	r4, [sp, #0]
 8005030:	0023      	movs	r3, r4
 8005032:	0022      	movs	r2, r4
 8005034:	0021      	movs	r1, r4
 8005036:	0030      	movs	r0, r6
 8005038:	f003 fc04 	bl	8008844 <SetButtonEvents>
					status =BOS_OK;
 800503c:	0020      	movs	r0, r4
 800503e:	e6ab      	b.n	8004d98 <ParseSnippetCondition+0x128>
	BOS_Status status =BOS_OK;
 8005040:	2000      	movs	r0, #0
 8005042:	e6a9      	b.n	8004d98 <ParseSnippetCondition+0x128>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8005044:	2c00      	cmp	r4, #0
 8005046:	d000      	beq.n	800504a <ParseSnippetCondition+0x3da>
 8005048:	e64f      	b.n	8004cea <ParseSnippetCondition+0x7a>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 800504a:	481e      	ldr	r0, [pc, #120]	; (80050c4 <ParseSnippetCondition+0x454>)
 800504c:	7803      	ldrb	r3, [r0, #0]
 800504e:	491c      	ldr	r1, [pc, #112]	; (80050c0 <ParseSnippetCondition+0x450>)
 8005050:	009a      	lsls	r2, r3, #2
 8005052:	18d6      	adds	r6, r2, r3
 8005054:	00b4      	lsls	r4, r6, #2
 8005056:	2602      	movs	r6, #2
 8005058:	5466      	strb	r6, [r4, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 800505a:	1909      	adds	r1, r1, r4
 800505c:	70cd      	strb	r5, [r1, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800505e:	3301      	adds	r3, #1
 8005060:	7003      	strb	r3, [r0, #0]
				return BOS_OK;
 8005062:	2000      	movs	r0, #0
 8005064:	e01d      	b.n	80050a2 <ParseSnippetCondition+0x432>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8005066:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <ParseSnippetCondition+0x454>)
 8005068:	4698      	mov	r8, r3
 800506a:	781a      	ldrb	r2, [r3, #0]
 800506c:	4f14      	ldr	r7, [pc, #80]	; (80050c0 <ParseSnippetCondition+0x450>)
 800506e:	0093      	lsls	r3, r2, #2
 8005070:	1898      	adds	r0, r3, r2
 8005072:	0081      	lsls	r1, r0, #2
 8005074:	2003      	movs	r0, #3
 8005076:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8005078:	187a      	adds	r2, r7, r1
 800507a:	70d5      	strb	r5, [r2, #3]
					float constant =atof(thirdPart);
 800507c:	0020      	movs	r0, r4
 800507e:	f00f ffd7 	bl	8015030 <atof>
 8005082:	f7fe f8a1 	bl	80031c8 <__aeabi_d2f>
 8005086:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005088:	4643      	mov	r3, r8
 800508a:	781a      	ldrb	r2, [r3, #0]
 800508c:	0093      	lsls	r3, r2, #2
 800508e:	189b      	adds	r3, r3, r2
 8005090:	0098      	lsls	r0, r3, #2
 8005092:	19c0      	adds	r0, r0, r7
 8005094:	3006      	adds	r0, #6
 8005096:	2204      	movs	r2, #4
 8005098:	a907      	add	r1, sp, #28
 800509a:	f010 fa5e 	bl	801555a <memcpy>
 800509e:	e63b      	b.n	8004d18 <ParseSnippetCondition+0xa8>
		return BOS_ERR_SNIP_MEM_FULL;
 80050a0:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 80050a2:	b008      	add	sp, #32
 80050a4:	bc04      	pop	{r2}
 80050a6:	4690      	mov	r8, r2
 80050a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status status =BOS_OK;
 80050aa:	2000      	movs	r0, #0
 80050ac:	e7f9      	b.n	80050a2 <ParseSnippetCondition+0x432>
			return BOS_ERR_WrongParam;
 80050ae:	2067      	movs	r0, #103	; 0x67
 80050b0:	e7f7      	b.n	80050a2 <ParseSnippetCondition+0x432>
				return BOS_ERR_WrongParam;
 80050b2:	2067      	movs	r0, #103	; 0x67
 80050b4:	e7f5      	b.n	80050a2 <ParseSnippetCondition+0x432>
 80050b6:	2067      	movs	r0, #103	; 0x67
 80050b8:	e7f3      	b.n	80050a2 <ParseSnippetCondition+0x432>
					return BOS_ERR_WrongParam;
 80050ba:	2067      	movs	r0, #103	; 0x67
 80050bc:	e7f1      	b.n	80050a2 <ParseSnippetCondition+0x432>
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	20007068 	.word	0x20007068
 80050c4:	20001217 	.word	0x20001217

080050c8 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	000c      	movs	r4, r1
	switch(code){
 80050cc:	2802      	cmp	r0, #2
 80050ce:	d017      	beq.n	8005100 <AddSnippet+0x38>
 80050d0:	2803      	cmp	r0, #3
 80050d2:	d003      	beq.n	80050dc <AddSnippet+0x14>
 80050d4:	2801      	cmp	r0, #1
 80050d6:	d00f      	beq.n	80050f8 <AddSnippet+0x30>
	return BOS_OK;
 80050d8:	2000      	movs	r0, #0
 80050da:	e00c      	b.n	80050f6 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 80050dc:	4b34      	ldr	r3, [pc, #208]	; (80051b0 <AddSnippet+0xe8>)
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	3a01      	subs	r2, #1
 80050e2:	0093      	lsls	r3, r2, #2
 80050e4:	189b      	adds	r3, r3, r2
 80050e6:	009a      	lsls	r2, r3, #2
 80050e8:	4b32      	ldr	r3, [pc, #200]	; (80051b4 <AddSnippet+0xec>)
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	2201      	movs	r2, #1
 80050ee:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 80050f0:	f006 ff3a 	bl	800bf68 <SaveToRO>
	return BOS_OK;
 80050f4:	2000      	movs	r0, #0
}
 80050f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 80050f8:	0008      	movs	r0, r1
 80050fa:	f7ff fdb9 	bl	8004c70 <ParseSnippetCondition>
 80050fe:	e7fa      	b.n	80050f6 <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8005100:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <AddSnippet+0xe8>)
 8005102:	781d      	ldrb	r5, [r3, #0]
 8005104:	3d01      	subs	r5, #1
 8005106:	00ab      	lsls	r3, r5, #2
 8005108:	195b      	adds	r3, r3, r5
 800510a:	009a      	lsls	r2, r3, #2
 800510c:	4b29      	ldr	r3, [pc, #164]	; (80051b4 <AddSnippet+0xec>)
 800510e:	189b      	adds	r3, r3, r2
 8005110:	68de      	ldr	r6, [r3, #12]
 8005112:	2e00      	cmp	r6, #0
 8005114:	d034      	beq.n	8005180 <AddSnippet+0xb8>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8005116:	0030      	movs	r0, r6
 8005118:	f7fa fffe 	bl	8000118 <strlen>
 800511c:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 800511e:	0020      	movs	r0, r4
 8005120:	f7fa fffa 	bl	8000118 <strlen>
 8005124:	1839      	adds	r1, r7, r0
 8005126:	3102      	adds	r1, #2
 8005128:	0030      	movs	r0, r6
 800512a:	f010 fa51 	bl	80155d0 <realloc>
 800512e:	4e21      	ldr	r6, [pc, #132]	; (80051b4 <AddSnippet+0xec>)
 8005130:	00ab      	lsls	r3, r5, #2
 8005132:	195d      	adds	r5, r3, r5
 8005134:	00ab      	lsls	r3, r5, #2
 8005136:	18f3      	adds	r3, r6, r3
 8005138:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 800513a:	4d1d      	ldr	r5, [pc, #116]	; (80051b0 <AddSnippet+0xe8>)
 800513c:	782b      	ldrb	r3, [r5, #0]
 800513e:	3b01      	subs	r3, #1
 8005140:	009a      	lsls	r2, r3, #2
 8005142:	18d2      	adds	r2, r2, r3
 8005144:	0093      	lsls	r3, r2, #2
 8005146:	18f3      	adds	r3, r6, r3
 8005148:	68d8      	ldr	r0, [r3, #12]
 800514a:	1c7b      	adds	r3, r7, #1
 800514c:	18c0      	adds	r0, r0, r3
 800514e:	0021      	movs	r1, r4
 8005150:	f010 fc42 	bl	80159d8 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8005154:	782a      	ldrb	r2, [r5, #0]
 8005156:	3a01      	subs	r2, #1
 8005158:	0093      	lsls	r3, r2, #2
 800515a:	189b      	adds	r3, r3, r2
 800515c:	009a      	lsls	r2, r3, #2
 800515e:	18b6      	adds	r6, r6, r2
 8005160:	68f3      	ldr	r3, [r6, #12]
 8005162:	2213      	movs	r2, #19
 8005164:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <AddSnippet+0xe8>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	3b01      	subs	r3, #1
 800516c:	009a      	lsls	r2, r3, #2
 800516e:	18d2      	adds	r2, r2, r3
 8005170:	0091      	lsls	r1, r2, #2
 8005172:	4a10      	ldr	r2, [pc, #64]	; (80051b4 <AddSnippet+0xec>)
 8005174:	1852      	adds	r2, r2, r1
 8005176:	68d2      	ldr	r2, [r2, #12]
 8005178:	2a00      	cmp	r2, #0
 800517a:	d011      	beq.n	80051a0 <AddSnippet+0xd8>
	return BOS_OK;
 800517c:	2000      	movs	r0, #0
 800517e:	e7ba      	b.n	80050f6 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8005180:	0008      	movs	r0, r1
 8005182:	f7fa ffc9 	bl	8000118 <strlen>
 8005186:	3001      	adds	r0, #1
 8005188:	f00f ff9a 	bl	80150c0 <malloc>
 800518c:	00ab      	lsls	r3, r5, #2
 800518e:	195d      	adds	r5, r3, r5
 8005190:	00aa      	lsls	r2, r5, #2
 8005192:	4b08      	ldr	r3, [pc, #32]	; (80051b4 <AddSnippet+0xec>)
 8005194:	189b      	adds	r3, r3, r2
 8005196:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8005198:	0021      	movs	r1, r4
 800519a:	f010 fc1d 	bl	80159d8 <strcpy>
 800519e:	e7e2      	b.n	8005166 <AddSnippet+0x9e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <AddSnippet+0xec>)
 80051a2:	18c8      	adds	r0, r1, r3
 80051a4:	2214      	movs	r2, #20
 80051a6:	2100      	movs	r1, #0
 80051a8:	f010 f9e0 	bl	801556c <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 80051ac:	200e      	movs	r0, #14
 80051ae:	e7a2      	b.n	80050f6 <AddSnippet+0x2e>
 80051b0:	20001217 	.word	0x20001217
 80051b4:	20007068 	.word	0x20007068

080051b8 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	46de      	mov	lr, fp
 80051bc:	4657      	mov	r7, sl
 80051be:	464e      	mov	r6, r9
 80051c0:	4645      	mov	r5, r8
 80051c2:	b5e0      	push	{r5, r6, r7, lr}
 80051c4:	b08b      	sub	sp, #44	; 0x2c
 80051c6:	9004      	str	r0, [sp, #16]
 80051c8:	9103      	str	r1, [sp, #12]
 80051ca:	0015      	movs	r5, r2
 80051cc:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 80051ce:	2209      	movs	r2, #9
 80051d0:	2100      	movs	r1, #0
 80051d2:	a807      	add	r0, sp, #28
 80051d4:	f010 f9ca 	bl	801556c <memset>
 80051d8:	e160      	b.n	800549c <CLI_CommandParser+0x2e4>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 80051da:	1ce9      	adds	r1, r5, #3
 80051dc:	3001      	adds	r0, #1
 80051de:	f7ff ff73 	bl	80050c8 <AddSnippet>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d106      	bne.n	80051f4 <CLI_CommandParser+0x3c>
				recordSnippet = SNIPPET_COMMANDS;
 80051e6:	4bcf      	ldr	r3, [pc, #828]	; (8005524 <CLI_CommandParser+0x36c>)
 80051e8:	2202      	movs	r2, #2
 80051ea:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 80051ec:	230d      	movs	r3, #13
 80051ee:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 80051f0:	2700      	movs	r7, #0
 80051f2:	e184      	b.n	80054fe <CLI_CommandParser+0x346>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80051f4:	2252      	movs	r2, #82	; 0x52
 80051f6:	49cc      	ldr	r1, [pc, #816]	; (8005528 <CLI_CommandParser+0x370>)
 80051f8:	0020      	movs	r0, r4
 80051fa:	f010 f9ae 	bl	801555a <memcpy>
				recordSnippet =0;
 80051fe:	4bc9      	ldr	r3, [pc, #804]	; (8005524 <CLI_CommandParser+0x36c>)
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]
			xReturned = pdFALSE;
 8005204:	2700      	movs	r7, #0
 8005206:	e17a      	b.n	80054fe <CLI_CommandParser+0x346>
			recordSnippet =0;
 8005208:	4bc6      	ldr	r3, [pc, #792]	; (8005524 <CLI_CommandParser+0x36c>)
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 800520e:	49c7      	ldr	r1, [pc, #796]	; (800552c <CLI_CommandParser+0x374>)
 8005210:	3003      	adds	r0, #3
 8005212:	f7ff ff59 	bl	80050c8 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8005216:	2241      	movs	r2, #65	; 0x41
 8005218:	49c5      	ldr	r1, [pc, #788]	; (8005530 <CLI_CommandParser+0x378>)
 800521a:	0020      	movs	r0, r4
 800521c:	f010 f99d 	bl	801555a <memcpy>
			xReturned = pdFALSE;
 8005220:	2700      	movs	r7, #0
 8005222:	e16c      	b.n	80054fe <CLI_CommandParser+0x346>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8005224:	0029      	movs	r1, r5
 8005226:	2002      	movs	r0, #2
 8005228:	f7ff ff4e 	bl	80050c8 <AddSnippet>
 800522c:	2800      	cmp	r0, #0
 800522e:	d103      	bne.n	8005238 <CLI_CommandParser+0x80>
				pcOutputString[0] ='\r';
 8005230:	230d      	movs	r3, #13
 8005232:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8005234:	2700      	movs	r7, #0
 8005236:	e162      	b.n	80054fe <CLI_CommandParser+0x346>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8005238:	2252      	movs	r2, #82	; 0x52
 800523a:	49bb      	ldr	r1, [pc, #748]	; (8005528 <CLI_CommandParser+0x370>)
 800523c:	0020      	movs	r0, r4
 800523e:	f010 f98c 	bl	801555a <memcpy>
			xReturned = pdFALSE;
 8005242:	2700      	movs	r7, #0
 8005244:	e15b      	b.n	80054fe <CLI_CommandParser+0x346>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005246:	f00f ff2d 	bl	80150a4 <__locale_ctype_ptr>
 800524a:	7873      	ldrb	r3, [r6, #1]
 800524c:	18c0      	adds	r0, r0, r3
 800524e:	7843      	ldrb	r3, [r0, #1]
 8005250:	075b      	lsls	r3, r3, #29
 8005252:	d500      	bpl.n	8005256 <CLI_CommandParser+0x9e>
 8005254:	e14c      	b.n	80054f0 <CLI_CommandParser+0x338>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8005256:	1b72      	subs	r2, r6, r5
 8005258:	0029      	movs	r1, r5
 800525a:	a807      	add	r0, sp, #28
 800525c:	f010 fbd5 	bl	8015a0a <strncpy>
				id =GetID(idString);
 8005260:	a807      	add	r0, sp, #28
 8005262:	f7ff fa2d 	bl	80046c0 <GetID>
 8005266:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8005268:	4ab2      	ldr	r2, [pc, #712]	; (8005534 <CLI_CommandParser+0x37c>)
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	4691      	mov	r9, r2
 800526e:	4290      	cmp	r0, r2
 8005270:	d02c      	beq.n	80052cc <CLI_CommandParser+0x114>
				else if(id == BOS_ERR_WrongName){
 8005272:	2864      	cmp	r0, #100	; 0x64
 8005274:	d032      	beq.n	80052dc <CLI_CommandParser+0x124>
				else if(id == BOS_ERR_WrongID){
 8005276:	2866      	cmp	r0, #102	; 0x66
 8005278:	d037      	beq.n	80052ea <CLI_CommandParser+0x132>
				else if(id == BOS_BROADCAST){
 800527a:	28ff      	cmp	r0, #255	; 0xff
 800527c:	d03c      	beq.n	80052f8 <CLI_CommandParser+0x140>
				else if((uint8_t )id == BOS_MULTICAST){
 800527e:	466b      	mov	r3, sp
 8005280:	7d1b      	ldrb	r3, [r3, #20]
 8005282:	469a      	mov	sl, r3
 8005284:	2bfe      	cmp	r3, #254	; 0xfe
 8005286:	d068      	beq.n	800535a <CLI_CommandParser+0x1a2>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8005288:	3601      	adds	r6, #1
 800528a:	2206      	movs	r2, #6
 800528c:	49aa      	ldr	r1, [pc, #680]	; (8005538 <CLI_CommandParser+0x380>)
 800528e:	0030      	movs	r0, r6
 8005290:	f010 fbaa 	bl	80159e8 <strncmp>
 8005294:	2800      	cmp	r0, #0
 8005296:	d000      	beq.n	800529a <CLI_CommandParser+0xe2>
 8005298:	e0a3      	b.n	80053e2 <CLI_CommandParser+0x22a>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 800529a:	4ba8      	ldr	r3, [pc, #672]	; (800553c <CLI_CommandParser+0x384>)
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 80052a0:	2119      	movs	r1, #25
 80052a2:	4650      	mov	r0, sl
 80052a4:	f004 fcb6 	bl	8009c14 <SendMessageToModule>
						osDelay(100);
 80052a8:	2064      	movs	r0, #100	; 0x64
 80052aa:	f00a fd21 	bl	800fcf0 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 80052ae:	4ba4      	ldr	r3, [pc, #656]	; (8005540 <CLI_CommandParser+0x388>)
 80052b0:	781a      	ldrb	r2, [r3, #0]
 80052b2:	4ba0      	ldr	r3, [pc, #640]	; (8005534 <CLI_CommandParser+0x37c>)
 80052b4:	7818      	ldrb	r0, [r3, #0]
 80052b6:	2300      	movs	r3, #0
 80052b8:	4651      	mov	r1, sl
 80052ba:	f7fe feeb 	bl	8004094 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 80052be:	4b9f      	ldr	r3, [pc, #636]	; (800553c <CLI_CommandParser+0x384>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b60      	cmp	r3, #96	; 0x60
 80052c4:	d100      	bne.n	80052c8 <CLI_CommandParser+0x110>
 80052c6:	e0c8      	b.n	800545a <CLI_CommandParser+0x2a2>
					xReturned = pdFALSE;
 80052c8:	2700      	movs	r7, #0
 80052ca:	e118      	b.n	80054fe <CLI_CommandParser+0x346>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80052cc:	1c70      	adds	r0, r6, #1
 80052ce:	2299      	movs	r2, #153	; 0x99
 80052d0:	0092      	lsls	r2, r2, #2
 80052d2:	0021      	movs	r1, r4
 80052d4:	f00a fdc8 	bl	800fe68 <FreeRTOS_CLIProcessCommand>
 80052d8:	0007      	movs	r7, r0
 80052da:	e110      	b.n	80054fe <CLI_CommandParser+0x346>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 80052dc:	2227      	movs	r2, #39	; 0x27
 80052de:	4999      	ldr	r1, [pc, #612]	; (8005544 <CLI_CommandParser+0x38c>)
 80052e0:	0020      	movs	r0, r4
 80052e2:	f010 f93a 	bl	801555a <memcpy>
					xReturned = pdFALSE;
 80052e6:	2700      	movs	r7, #0
 80052e8:	e109      	b.n	80054fe <CLI_CommandParser+0x346>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 80052ea:	2225      	movs	r2, #37	; 0x25
 80052ec:	4996      	ldr	r1, [pc, #600]	; (8005548 <CLI_CommandParser+0x390>)
 80052ee:	0020      	movs	r0, r4
 80052f0:	f010 f933 	bl	801555a <memcpy>
					xReturned = pdFALSE;
 80052f4:	2700      	movs	r7, #0
 80052f6:	e102      	b.n	80054fe <CLI_CommandParser+0x346>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 80052f8:	221a      	movs	r2, #26
 80052fa:	2100      	movs	r1, #0
 80052fc:	4893      	ldr	r0, [pc, #588]	; (800554c <CLI_CommandParser+0x394>)
 80052fe:	f010 f935 	bl	801556c <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005302:	3601      	adds	r6, #1
 8005304:	0028      	movs	r0, r5
 8005306:	f7fa ff07 	bl	8000118 <strlen>
 800530a:	0007      	movs	r7, r0
 800530c:	a807      	add	r0, sp, #28
 800530e:	f7fa ff03 	bl	8000118 <strlen>
 8005312:	1a3a      	subs	r2, r7, r0
 8005314:	3a01      	subs	r2, #1
 8005316:	0031      	movs	r1, r6
 8005318:	488d      	ldr	r0, [pc, #564]	; (8005550 <CLI_CommandParser+0x398>)
 800531a:	f010 fb76 	bl	8015a0a <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 800531e:	0028      	movs	r0, r5
 8005320:	f7fa fefa 	bl	8000118 <strlen>
 8005324:	0007      	movs	r7, r0
 8005326:	a807      	add	r0, sp, #28
 8005328:	f7fa fef6 	bl	8000118 <strlen>
 800532c:	1a3b      	subs	r3, r7, r0
 800532e:	b29b      	uxth	r3, r3
 8005330:	2217      	movs	r2, #23
 8005332:	21ff      	movs	r1, #255	; 0xff
 8005334:	4648      	mov	r0, r9
 8005336:	f004 fc45 	bl	8009bc4 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800533a:	2299      	movs	r2, #153	; 0x99
 800533c:	0092      	lsls	r2, r2, #2
 800533e:	0021      	movs	r1, r4
 8005340:	0030      	movs	r0, r6
 8005342:	f00a fd91 	bl	800fe68 <FreeRTOS_CLIProcessCommand>
 8005346:	0007      	movs	r7, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8005348:	0020      	movs	r0, r4
 800534a:	f7fa fee5 	bl	8000118 <strlen>
 800534e:	1820      	adds	r0, r4, r0
 8005350:	221d      	movs	r2, #29
 8005352:	4980      	ldr	r1, [pc, #512]	; (8005554 <CLI_CommandParser+0x39c>)
 8005354:	f010 f901 	bl	801555a <memcpy>
 8005358:	e0d1      	b.n	80054fe <CLI_CommandParser+0x346>
					group =id >> 8;
 800535a:	9b05      	ldr	r3, [sp, #20]
 800535c:	121b      	asrs	r3, r3, #8
 800535e:	b2db      	uxtb	r3, r3
 8005360:	469a      	mov	sl, r3
 8005362:	4b7d      	ldr	r3, [pc, #500]	; (8005558 <CLI_CommandParser+0x3a0>)
 8005364:	469b      	mov	fp, r3
 8005366:	4652      	mov	r2, sl
 8005368:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800536a:	221a      	movs	r2, #26
 800536c:	2100      	movs	r1, #0
 800536e:	4877      	ldr	r0, [pc, #476]	; (800554c <CLI_CommandParser+0x394>)
 8005370:	f010 f8fc 	bl	801556c <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005374:	1c73      	adds	r3, r6, #1
 8005376:	4698      	mov	r8, r3
 8005378:	0028      	movs	r0, r5
 800537a:	f7fa fecd 	bl	8000118 <strlen>
 800537e:	0006      	movs	r6, r0
 8005380:	a807      	add	r0, sp, #28
 8005382:	f7fa fec9 	bl	8000118 <strlen>
 8005386:	1a32      	subs	r2, r6, r0
 8005388:	3a01      	subs	r2, #1
 800538a:	4641      	mov	r1, r8
 800538c:	4870      	ldr	r0, [pc, #448]	; (8005550 <CLI_CommandParser+0x398>)
 800538e:	f010 fb3c 	bl	8015a0a <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005392:	0028      	movs	r0, r5
 8005394:	f7fa fec0 	bl	8000118 <strlen>
 8005398:	0006      	movs	r6, r0
 800539a:	a807      	add	r0, sp, #28
 800539c:	f7fa febc 	bl	8000118 <strlen>
 80053a0:	1a33      	subs	r3, r6, r0
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2217      	movs	r2, #23
 80053a6:	4651      	mov	r1, sl
 80053a8:	4648      	mov	r0, r9
 80053aa:	f004 fc0b 	bl	8009bc4 <BroadcastMessage>
					if(InGroup(myID,group))
 80053ae:	4b61      	ldr	r3, [pc, #388]	; (8005534 <CLI_CommandParser+0x37c>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	4a69      	ldr	r2, [pc, #420]	; (800555c <CLI_CommandParser+0x3a4>)
 80053b8:	5a9b      	ldrh	r3, [r3, r2]
 80053ba:	465a      	mov	r2, fp
 80053bc:	7812      	ldrb	r2, [r2, #0]
 80053be:	4113      	asrs	r3, r2
 80053c0:	07db      	lsls	r3, r3, #31
 80053c2:	d406      	bmi.n	80053d2 <CLI_CommandParser+0x21a>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80053c4:	ab07      	add	r3, sp, #28
 80053c6:	0022      	movs	r2, r4
 80053c8:	4965      	ldr	r1, [pc, #404]	; (8005560 <CLI_CommandParser+0x3a8>)
 80053ca:	0020      	movs	r0, r4
 80053cc:	f010 fac8 	bl	8015960 <sprintf>
 80053d0:	e095      	b.n	80054fe <CLI_CommandParser+0x346>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80053d2:	2299      	movs	r2, #153	; 0x99
 80053d4:	0092      	lsls	r2, r2, #2
 80053d6:	0021      	movs	r1, r4
 80053d8:	4640      	mov	r0, r8
 80053da:	f00a fd45 	bl	800fe68 <FreeRTOS_CLIProcessCommand>
 80053de:	0007      	movs	r7, r0
 80053e0:	e7f0      	b.n	80053c4 <CLI_CommandParser+0x20c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80053e2:	0028      	movs	r0, r5
 80053e4:	f7fa fe98 	bl	8000118 <strlen>
 80053e8:	0007      	movs	r7, r0
 80053ea:	a807      	add	r0, sp, #28
 80053ec:	f7fa fe94 	bl	8000118 <strlen>
 80053f0:	1a3a      	subs	r2, r7, r0
 80053f2:	3a01      	subs	r2, #1
 80053f4:	0031      	movs	r1, r6
 80053f6:	4856      	ldr	r0, [pc, #344]	; (8005550 <CLI_CommandParser+0x398>)
 80053f8:	f010 fb07 	bl	8015a0a <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 80053fc:	0028      	movs	r0, r5
 80053fe:	f7fa fe8b 	bl	8000118 <strlen>
 8005402:	0006      	movs	r6, r0
 8005404:	a807      	add	r0, sp, #28
 8005406:	f7fa fe87 	bl	8000118 <strlen>
 800540a:	1a32      	subs	r2, r6, r0
 800540c:	b292      	uxth	r2, r2
 800540e:	3a01      	subs	r2, #1
 8005410:	b292      	uxth	r2, r2
 8005412:	2117      	movs	r1, #23
 8005414:	4650      	mov	r0, sl
 8005416:	f004 fbfd 	bl	8009c14 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 800541a:	9a05      	ldr	r2, [sp, #20]
 800541c:	4951      	ldr	r1, [pc, #324]	; (8005564 <CLI_CommandParser+0x3ac>)
 800541e:	0020      	movs	r0, r4
 8005420:	f010 fa9e 	bl	8015960 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8005424:	7823      	ldrb	r3, [r4, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <CLI_CommandParser+0x278>
 800542a:	9b03      	ldr	r3, [sp, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d108      	bne.n	8005442 <CLI_CommandParser+0x28a>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005430:	0020      	movs	r0, r4
 8005432:	f7fa fe71 	bl	8000118 <strlen>
 8005436:	0002      	movs	r2, r0
 8005438:	2100      	movs	r1, #0
 800543a:	0020      	movs	r0, r4
 800543c:	f010 f896 	bl	801556c <memset>
 8005440:	e73d      	b.n	80052be <CLI_CommandParser+0x106>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8005442:	0020      	movs	r0, r4
 8005444:	f7fa fe68 	bl	8000118 <strlen>
 8005448:	b282      	uxth	r2, r0
 800544a:	2301      	movs	r3, #1
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	3331      	adds	r3, #49	; 0x31
 8005450:	0021      	movs	r1, r4
 8005452:	9804      	ldr	r0, [sp, #16]
 8005454:	f00a fb18 	bl	800fa88 <writePxMutex>
 8005458:	e7ea      	b.n	8005430 <CLI_CommandParser+0x278>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 800545a:	21fa      	movs	r1, #250	; 0xfa
 800545c:	0089      	lsls	r1, r1, #2
 800545e:	2001      	movs	r0, #1
 8005460:	f00c f83c 	bl	80114dc <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8005464:	4b40      	ldr	r3, [pc, #256]	; (8005568 <CLI_CommandParser+0x3b0>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <CLI_CommandParser+0x2cc>
							++timedoutMsg;
 800546c:	4a3f      	ldr	r2, [pc, #252]	; (800556c <CLI_CommandParser+0x3b4>)
 800546e:	8813      	ldrh	r3, [r2, #0]
 8005470:	3301      	adds	r3, #1
 8005472:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005474:	9b05      	ldr	r3, [sp, #20]
 8005476:	0022      	movs	r2, r4
 8005478:	493d      	ldr	r1, [pc, #244]	; (8005570 <CLI_CommandParser+0x3b8>)
 800547a:	0020      	movs	r0, r4
 800547c:	f010 fa70 	bl	8015960 <sprintf>
					xReturned = pdFALSE;
 8005480:	2700      	movs	r7, #0
 8005482:	e03c      	b.n	80054fe <CLI_CommandParser+0x346>
 8005484:	2700      	movs	r7, #0
 8005486:	e03a      	b.n	80054fe <CLI_CommandParser+0x346>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005488:	0020      	movs	r0, r4
 800548a:	f7fa fe45 	bl	8000118 <strlen>
 800548e:	0002      	movs	r2, r0
 8005490:	2100      	movs	r1, #0
 8005492:	0020      	movs	r0, r4
 8005494:	f010 f86a 	bl	801556c <memset>
	} while(xReturned != pdFALSE);
 8005498:	2f00      	cmp	r7, #0
 800549a:	d071      	beq.n	8005580 <CLI_CommandParser+0x3c8>
		StringToLowerCase((char* )cInputString);
 800549c:	0028      	movs	r0, r5
 800549e:	f7ff fbd1 	bl	8004c44 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 80054a2:	4b20      	ldr	r3, [pc, #128]	; (8005524 <CLI_CommandParser+0x36c>)
 80054a4:	781e      	ldrb	r6, [r3, #0]
 80054a6:	2e00      	cmp	r6, #0
 80054a8:	d107      	bne.n	80054ba <CLI_CommandParser+0x302>
 80054aa:	2203      	movs	r2, #3
 80054ac:	4931      	ldr	r1, [pc, #196]	; (8005574 <CLI_CommandParser+0x3bc>)
 80054ae:	0028      	movs	r0, r5
 80054b0:	f010 fa9a 	bl	80159e8 <strncmp>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d100      	bne.n	80054ba <CLI_CommandParser+0x302>
 80054b8:	e68f      	b.n	80051da <CLI_CommandParser+0x22>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 80054ba:	2e00      	cmp	r6, #0
 80054bc:	d007      	beq.n	80054ce <CLI_CommandParser+0x316>
 80054be:	2206      	movs	r2, #6
 80054c0:	492d      	ldr	r1, [pc, #180]	; (8005578 <CLI_CommandParser+0x3c0>)
 80054c2:	0028      	movs	r0, r5
 80054c4:	f010 fa90 	bl	80159e8 <strncmp>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d100      	bne.n	80054ce <CLI_CommandParser+0x316>
 80054cc:	e69c      	b.n	8005208 <CLI_CommandParser+0x50>
		else if(recordSnippet == SNIPPET_COMMANDS){
 80054ce:	2e02      	cmp	r6, #2
 80054d0:	d100      	bne.n	80054d4 <CLI_CommandParser+0x31c>
 80054d2:	e6a7      	b.n	8005224 <CLI_CommandParser+0x6c>
			loc =strchr((char* )cInputString,'.');
 80054d4:	212e      	movs	r1, #46	; 0x2e
 80054d6:	0028      	movs	r0, r5
 80054d8:	f010 fa70 	bl	80159bc <strchr>
 80054dc:	1e06      	subs	r6, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 80054de:	d007      	beq.n	80054f0 <CLI_CommandParser+0x338>
 80054e0:	3803      	subs	r0, #3
 80054e2:	2203      	movs	r2, #3
 80054e4:	4925      	ldr	r1, [pc, #148]	; (800557c <CLI_CommandParser+0x3c4>)
 80054e6:	f010 fa7f 	bl	80159e8 <strncmp>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d000      	beq.n	80054f0 <CLI_CommandParser+0x338>
 80054ee:	e6aa      	b.n	8005246 <CLI_CommandParser+0x8e>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80054f0:	2299      	movs	r2, #153	; 0x99
 80054f2:	0092      	lsls	r2, r2, #2
 80054f4:	0021      	movs	r1, r4
 80054f6:	0028      	movs	r0, r5
 80054f8:	f00a fcb6 	bl	800fe68 <FreeRTOS_CLIProcessCommand>
 80054fc:	0007      	movs	r7, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80054fe:	7823      	ldrb	r3, [r4, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0c1      	beq.n	8005488 <CLI_CommandParser+0x2d0>
 8005504:	9b03      	ldr	r3, [sp, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0be      	beq.n	8005488 <CLI_CommandParser+0x2d0>
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800550a:	0020      	movs	r0, r4
 800550c:	f7fa fe04 	bl	8000118 <strlen>
 8005510:	b282      	uxth	r2, r0
 8005512:	2301      	movs	r3, #1
 8005514:	425b      	negs	r3, r3
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	3333      	adds	r3, #51	; 0x33
 800551a:	0021      	movs	r1, r4
 800551c:	9804      	ldr	r0, [sp, #16]
 800551e:	f00a fab3 	bl	800fa88 <writePxMutex>
 8005522:	e7b1      	b.n	8005488 <CLI_CommandParser+0x2d0>
 8005524:	20001244 	.word	0x20001244
 8005528:	0801a488 	.word	0x0801a488
 800552c:	0801a11c 	.word	0x0801a11c
 8005530:	0801a4e4 	.word	0x0801a4e4
 8005534:	20001072 	.word	0x20001072
 8005538:	0801a5c8 	.word	0x0801a5c8
 800553c:	20006fcc 	.word	0x20006fcc
 8005540:	20000aa8 	.word	0x20000aa8
 8005544:	0801a52c 	.word	0x0801a52c
 8005548:	0801a554 	.word	0x0801a554
 800554c:	20000d20 	.word	0x20000d20
 8005550:	20000f34 	.word	0x20000f34
 8005554:	0801a57c 	.word	0x0801a57c
 8005558:	20001216 	.word	0x20001216
 800555c:	20000ebc 	.word	0x20000ebc
 8005560:	0801a59c 	.word	0x0801a59c
 8005564:	0801a5d0 	.word	0x0801a5d0
 8005568:	20001108 	.word	0x20001108
 800556c:	200019be 	.word	0x200019be
 8005570:	0801a5f4 	.word	0x0801a5f4
 8005574:	0801a484 	.word	0x0801a484
 8005578:	0801a4dc 	.word	0x0801a4dc
 800557c:	0801a528 	.word	0x0801a528
	memset(idString,0x00,MaxLengthOfAlias);
 8005580:	2209      	movs	r2, #9
 8005582:	2100      	movs	r1, #0
 8005584:	a807      	add	r0, sp, #28
 8005586:	f00f fff1 	bl	801556c <memset>
	if(!recordSnippet && enableOutput)
 800558a:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <CLI_CommandParser+0x404>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <CLI_CommandParser+0x3e0>
 8005592:	9b03      	ldr	r3, [sp, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <CLI_CommandParser+0x3ee>
}
 8005598:	b00b      	add	sp, #44	; 0x2c
 800559a:	bc3c      	pop	{r2, r3, r4, r5}
 800559c:	4690      	mov	r8, r2
 800559e:	4699      	mov	r9, r3
 80055a0:	46a2      	mov	sl, r4
 80055a2:	46ab      	mov	fp, r5
 80055a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80055a6:	2301      	movs	r3, #1
 80055a8:	425b      	negs	r3, r3
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	3333      	adds	r3, #51	; 0x33
 80055ae:	2238      	movs	r2, #56	; 0x38
 80055b0:	4903      	ldr	r1, [pc, #12]	; (80055c0 <CLI_CommandParser+0x408>)
 80055b2:	9804      	ldr	r0, [sp, #16]
 80055b4:	f00a fa68 	bl	800fa88 <writePxMutex>
}
 80055b8:	e7ee      	b.n	8005598 <CLI_CommandParser+0x3e0>
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	20001244 	.word	0x20001244
 80055c0:	0801a614 	.word	0x0801a614

080055c4 <prvCLITask>:
void prvCLITask(void *pvParameters){
 80055c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c6:	b085      	sub	sp, #20
	char cRxedChar ='\0';
 80055c8:	230f      	movs	r3, #15
 80055ca:	446b      	add	r3, sp
 80055cc:	2200      	movs	r2, #0
 80055ce:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80055d0:	2101      	movs	r1, #1
 80055d2:	4249      	negs	r1, r1
 80055d4:	2001      	movs	r0, #1
 80055d6:	f00b ff81 	bl	80114dc <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80055da:	f00a fcab 	bl	800ff34 <FreeRTOS_CLIGetOutputBuffer>
 80055de:	0004      	movs	r4, r0
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 80055e0:	4b51      	ldr	r3, [pc, #324]	; (8005728 <prvCLITask+0x164>)
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	23e1      	movs	r3, #225	; 0xe1
 80055e6:	031b      	lsls	r3, r3, #12
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d122      	bne.n	8005632 <prvCLITask+0x6e>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 80055ec:	4b4f      	ldr	r3, [pc, #316]	; (800572c <prvCLITask+0x168>)
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	005a      	lsls	r2, r3, #1
 80055f2:	18d2      	adds	r2, r2, r3
 80055f4:	0053      	lsls	r3, r2, #1
 80055f6:	4a4e      	ldr	r2, [pc, #312]	; (8005730 <prvCLITask+0x16c>)
 80055f8:	189b      	adds	r3, r3, r2
 80055fa:	4a4e      	ldr	r2, [pc, #312]	; (8005734 <prvCLITask+0x170>)
 80055fc:	7812      	ldrb	r2, [r2, #0]
 80055fe:	4d4e      	ldr	r5, [pc, #312]	; (8005738 <prvCLITask+0x174>)
 8005600:	4e4e      	ldr	r6, [pc, #312]	; (800573c <prvCLITask+0x178>)
 8005602:	7831      	ldrb	r1, [r6, #0]
 8005604:	9100      	str	r1, [sp, #0]
 8005606:	494e      	ldr	r1, [pc, #312]	; (8005740 <prvCLITask+0x17c>)
 8005608:	0028      	movs	r0, r5
 800560a:	f010 f9a9 	bl	8015960 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 800560e:	22a4      	movs	r2, #164	; 0xa4
 8005610:	7830      	ldrb	r0, [r6, #0]
 8005612:	230a      	movs	r3, #10
 8005614:	0092      	lsls	r2, r2, #2
 8005616:	494b      	ldr	r1, [pc, #300]	; (8005744 <prvCLITask+0x180>)
 8005618:	f00a fa64 	bl	800fae4 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 800561c:	0028      	movs	r0, r5
 800561e:	f7fa fd7b 	bl	8000118 <strlen>
 8005622:	b282      	uxth	r2, r0
 8005624:	7830      	ldrb	r0, [r6, #0]
 8005626:	230a      	movs	r3, #10
 8005628:	0029      	movs	r1, r5
 800562a:	f00a fa5b 	bl	800fae4 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 800562e:	2500      	movs	r5, #0
 8005630:	e066      	b.n	8005700 <prvCLITask+0x13c>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005632:	2501      	movs	r5, #1
 8005634:	2d05      	cmp	r5, #5
 8005636:	d8d9      	bhi.n	80055ec <prvCLITask+0x28>
			if(port != PcPort)
 8005638:	4b40      	ldr	r3, [pc, #256]	; (800573c <prvCLITask+0x178>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	42ab      	cmp	r3, r5
 800563e:	d004      	beq.n	800564a <prvCLITask+0x86>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005640:	21e1      	movs	r1, #225	; 0xe1
 8005642:	0309      	lsls	r1, r1, #12
 8005644:	0028      	movs	r0, r5
 8005646:	f00a fa8f 	bl	800fb68 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800564a:	3501      	adds	r5, #1
 800564c:	b2ed      	uxtb	r5, r5
 800564e:	e7f1      	b.n	8005634 <prvCLITask+0x70>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 8005650:	260f      	movs	r6, #15
 8005652:	446e      	add	r6, sp
 8005654:	7032      	strb	r2, [r6, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005656:	007a      	lsls	r2, r7, #1
 8005658:	19d2      	adds	r2, r2, r7
 800565a:	0196      	lsls	r6, r2, #6
 800565c:	4a3a      	ldr	r2, [pc, #232]	; (8005748 <prvCLITask+0x184>)
 800565e:	1992      	adds	r2, r2, r6
 8005660:	2600      	movs	r6, #0
 8005662:	54d6      	strb	r6, [r2, r3]
				UARTRxBufIndex[PcPort - 1] =chr;
 8005664:	4a39      	ldr	r2, [pc, #228]	; (800574c <prvCLITask+0x188>)
 8005666:	55d3      	strb	r3, [r2, r7]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 8005668:	260f      	movs	r6, #15
 800566a:	446e      	add	r6, sp
 800566c:	230a      	movs	r3, #10
 800566e:	2201      	movs	r2, #1
 8005670:	0031      	movs	r1, r6
 8005672:	f00a fa37 	bl	800fae4 <writePxITMutex>
		if(cRxedChar == '\r'){
 8005676:	7833      	ldrb	r3, [r6, #0]
 8005678:	2b0d      	cmp	r3, #13
 800567a:	d024      	beq.n	80056c6 <prvCLITask+0x102>
			if(cRxedChar == '\n'){
 800567c:	2b0a      	cmp	r3, #10
 800567e:	d03d      	beq.n	80056fc <prvCLITask+0x138>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 8005680:	2b08      	cmp	r3, #8
 8005682:	d048      	beq.n	8005716 <prvCLITask+0x152>
 8005684:	2b7f      	cmp	r3, #127	; 0x7f
 8005686:	d046      	beq.n	8005716 <prvCLITask+0x152>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005688:	001a      	movs	r2, r3
 800568a:	3a20      	subs	r2, #32
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	2a5e      	cmp	r2, #94	; 0x5e
 8005690:	d834      	bhi.n	80056fc <prvCLITask+0x138>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005692:	2d31      	cmp	r5, #49	; 0x31
 8005694:	dc32      	bgt.n	80056fc <prvCLITask+0x138>
						cInputString[cInputIndex] =cRxedChar;
 8005696:	4a2e      	ldr	r2, [pc, #184]	; (8005750 <prvCLITask+0x18c>)
 8005698:	5553      	strb	r3, [r2, r5]
						cInputIndex++;
 800569a:	3501      	adds	r5, #1
 800569c:	b26d      	sxtb	r5, r5
 800569e:	e02d      	b.n	80056fc <prvCLITask+0x138>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80056a0:	3301      	adds	r3, #1
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2bbf      	cmp	r3, #191	; 0xbf
 80056a6:	d8df      	bhi.n	8005668 <prvCLITask+0xa4>
			if(UARTRxBuf[PcPort - 1][chr]){
 80056a8:	007a      	lsls	r2, r7, #1
 80056aa:	19d2      	adds	r2, r2, r7
 80056ac:	0196      	lsls	r6, r2, #6
 80056ae:	4a26      	ldr	r2, [pc, #152]	; (8005748 <prvCLITask+0x184>)
 80056b0:	1992      	adds	r2, r2, r6
 80056b2:	5cd2      	ldrb	r2, [r2, r3]
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	d1cb      	bne.n	8005650 <prvCLITask+0x8c>
			if(chr == MSG_RX_BUF_SIZE - 1){
 80056b8:	2bbf      	cmp	r3, #191	; 0xbf
 80056ba:	d1f1      	bne.n	80056a0 <prvCLITask+0xdc>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80056bc:	4b23      	ldr	r3, [pc, #140]	; (800574c <prvCLITask+0x188>)
 80056be:	2200      	movs	r2, #0
 80056c0:	55da      	strb	r2, [r3, r7]
 80056c2:	2300      	movs	r3, #0
 80056c4:	e7ec      	b.n	80056a0 <prvCLITask+0xdc>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <prvCLITask+0x178>)
 80056c8:	7818      	ldrb	r0, [r3, #0]
 80056ca:	230a      	movs	r3, #10
 80056cc:	2202      	movs	r2, #2
 80056ce:	4921      	ldr	r1, [pc, #132]	; (8005754 <prvCLITask+0x190>)
 80056d0:	f00a fa08 	bl	800fae4 <writePxITMutex>
			if(cInputIndex == 0){
 80056d4:	2d00      	cmp	r5, #0
 80056d6:	d019      	beq.n	800570c <prvCLITask+0x148>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80056d8:	4d1d      	ldr	r5, [pc, #116]	; (8005750 <prvCLITask+0x18c>)
 80056da:	4b18      	ldr	r3, [pc, #96]	; (800573c <prvCLITask+0x178>)
 80056dc:	7818      	ldrb	r0, [r3, #0]
 80056de:	0023      	movs	r3, r4
 80056e0:	002a      	movs	r2, r5
 80056e2:	2101      	movs	r1, #1
 80056e4:	f7ff fd68 	bl	80051b8 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 80056e8:	0029      	movs	r1, r5
 80056ea:	481b      	ldr	r0, [pc, #108]	; (8005758 <prvCLITask+0x194>)
 80056ec:	f010 f974 	bl	80159d8 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 80056f0:	2232      	movs	r2, #50	; 0x32
 80056f2:	2100      	movs	r1, #0
 80056f4:	0028      	movs	r0, r5
 80056f6:	f00f ff39 	bl	801556c <memset>
			cInputIndex =0;
 80056fa:	2500      	movs	r5, #0
		taskYIELD();
 80056fc:	f00c f9e2 	bl	8011ac4 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005700:	4b0e      	ldr	r3, [pc, #56]	; (800573c <prvCLITask+0x178>)
 8005702:	7818      	ldrb	r0, [r3, #0]
 8005704:	1e47      	subs	r7, r0, #1
 8005706:	4b11      	ldr	r3, [pc, #68]	; (800574c <prvCLITask+0x188>)
 8005708:	5ddb      	ldrb	r3, [r3, r7]
 800570a:	e7cb      	b.n	80056a4 <prvCLITask+0xe0>
				strcpy((char* )cInputString,(char* )cLastInputString);
 800570c:	4912      	ldr	r1, [pc, #72]	; (8005758 <prvCLITask+0x194>)
 800570e:	4810      	ldr	r0, [pc, #64]	; (8005750 <prvCLITask+0x18c>)
 8005710:	f010 f962 	bl	80159d8 <strcpy>
 8005714:	e7e0      	b.n	80056d8 <prvCLITask+0x114>
				if(cInputIndex > 0){
 8005716:	2d00      	cmp	r5, #0
 8005718:	ddf0      	ble.n	80056fc <prvCLITask+0x138>
					cInputIndex--;
 800571a:	3d01      	subs	r5, #1
 800571c:	b26d      	sxtb	r5, r5
					cInputString[cInputIndex] ='\0';
 800571e:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <prvCLITask+0x18c>)
 8005720:	2200      	movs	r2, #0
 8005722:	555a      	strb	r2, [r3, r5]
 8005724:	e7ea      	b.n	80056fc <prvCLITask+0x138>
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	2000704c 	.word	0x2000704c
 800572c:	20000058 	.word	0x20000058
 8005730:	0801a16c 	.word	0x0801a16c
 8005734:	20001072 	.word	0x20001072
 8005738:	20001218 	.word	0x20001218
 800573c:	20000aa8 	.word	0x20000aa8
 8005740:	0801a680 	.word	0x0801a680
 8005744:	0801a6ac 	.word	0x0801a6ac
 8005748:	200012c8 	.word	0x200012c8
 800574c:	20001688 	.word	0x20001688
 8005750:	20001148 	.word	0x20001148
 8005754:	0801bf68 	.word	0x0801bf68
 8005758:	200011e4 	.word	0x200011e4

0800575c <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005760:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <ParseSnippetCommand+0x78>)
 8005762:	781a      	ldrb	r2, [r3, #0]
 8005764:	3a01      	subs	r2, #1
 8005766:	0093      	lsls	r3, r2, #2
 8005768:	189b      	adds	r3, r3, r2
 800576a:	009a      	lsls	r2, r3, #2
 800576c:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <ParseSnippetCommand+0x7c>)
 800576e:	189b      	adds	r3, r3, r2
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d02c      	beq.n	80057d0 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005776:	4b19      	ldr	r3, [pc, #100]	; (80057dc <ParseSnippetCommand+0x80>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d014      	beq.n	80057a8 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800577e:	4b17      	ldr	r3, [pc, #92]	; (80057dc <ParseSnippetCommand+0x80>)
 8005780:	681d      	ldr	r5, [r3, #0]
 8005782:	782b      	ldrb	r3, [r5, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d012      	beq.n	80057ae <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005788:	2113      	movs	r1, #19
 800578a:	0028      	movs	r0, r5
 800578c:	f010 f916 	bl	80159bc <strchr>
 8005790:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 8005792:	d011      	beq.n	80057b8 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005794:	1b42      	subs	r2, r0, r5
 8005796:	0029      	movs	r1, r5
 8005798:	0020      	movs	r0, r4
 800579a:	f010 f936 	bl	8015a0a <strncpy>
		ptrStart =ptrEnd + 1;
 800579e:	3601      	adds	r6, #1
 80057a0:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <ParseSnippetCommand+0x80>)
 80057a2:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80057a4:	2001      	movs	r0, #1
 80057a6:	e006      	b.n	80057b6 <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <ParseSnippetCommand+0x80>)
 80057aa:	6018      	str	r0, [r3, #0]
 80057ac:	e7e7      	b.n	800577e <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80057ae:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <ParseSnippetCommand+0x80>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
		return false;
 80057b4:	2000      	movs	r0, #0
}
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 80057b8:	0029      	movs	r1, r5
 80057ba:	0020      	movs	r0, r4
 80057bc:	f010 f90c 	bl	80159d8 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80057c0:	0020      	movs	r0, r4
 80057c2:	f7fa fca9 	bl	8000118 <strlen>
 80057c6:	182d      	adds	r5, r5, r0
 80057c8:	4b04      	ldr	r3, [pc, #16]	; (80057dc <ParseSnippetCommand+0x80>)
 80057ca:	601d      	str	r5, [r3, #0]
	return true;
 80057cc:	2001      	movs	r0, #1
 80057ce:	e7f2      	b.n	80057b6 <ParseSnippetCommand+0x5a>
		return false;
 80057d0:	2000      	movs	r0, #0
 80057d2:	e7f0      	b.n	80057b6 <ParseSnippetCommand+0x5a>
 80057d4:	20001217 	.word	0x20001217
 80057d8:	20007068 	.word	0x20007068
 80057dc:	20001240 	.word	0x20001240

080057e0 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 80057e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e2:	b083      	sub	sp, #12
 80057e4:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80057e6:	0083      	lsls	r3, r0, #2
 80057e8:	181b      	adds	r3, r3, r0
 80057ea:	009a      	lsls	r2, r3, #2
 80057ec:	4b46      	ldr	r3, [pc, #280]	; (8005908 <CheckSnippetCondition+0x128>)
 80057ee:	5cd3      	ldrb	r3, [r2, r3]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d004      	beq.n	80057fe <CheckSnippetCondition+0x1e>
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d015      	beq.n	8005824 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 80057f8:	2000      	movs	r0, #0
}
 80057fa:	b003      	add	sp, #12
 80057fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 80057fe:	4a42      	ldr	r2, [pc, #264]	; (8005908 <CheckSnippetCondition+0x128>)
 8005800:	0083      	lsls	r3, r0, #2
 8005802:	1818      	adds	r0, r3, r0
 8005804:	0081      	lsls	r1, r0, #2
 8005806:	0008      	movs	r0, r1
 8005808:	1851      	adds	r1, r2, r1
 800580a:	7889      	ldrb	r1, [r1, #2]
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 800580c:	1812      	adds	r2, r2, r0
 800580e:	78d2      	ldrb	r2, [r2, #3]
 8005810:	00cb      	lsls	r3, r1, #3
 8005812:	185b      	adds	r3, r3, r1
 8005814:	493d      	ldr	r1, [pc, #244]	; (800590c <CheckSnippetCondition+0x12c>)
 8005816:	5c5b      	ldrb	r3, [r3, r1]
 8005818:	429a      	cmp	r2, r3
 800581a:	d001      	beq.n	8005820 <CheckSnippetCondition+0x40>
				return false;
 800581c:	2000      	movs	r0, #0
 800581e:	e7ec      	b.n	80057fa <CheckSnippetCondition+0x1a>
				return true;
 8005820:	2001      	movs	r0, #1
 8005822:	e7ea      	b.n	80057fa <CheckSnippetCondition+0x1a>
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005824:	4e38      	ldr	r6, [pc, #224]	; (8005908 <CheckSnippetCondition+0x128>)
 8005826:	0085      	lsls	r5, r0, #2
 8005828:	182b      	adds	r3, r5, r0
 800582a:	0099      	lsls	r1, r3, #2
 800582c:	1871      	adds	r1, r6, r1
 800582e:	78ca      	ldrb	r2, [r1, #3]
 8005830:	3a01      	subs	r2, #1
 8005832:	0053      	lsls	r3, r2, #1
 8005834:	189b      	adds	r3, r3, r2
 8005836:	009a      	lsls	r2, r3, #2
 8005838:	4b35      	ldr	r3, [pc, #212]	; (8005910 <CheckSnippetCondition+0x130>)
 800583a:	58d3      	ldr	r3, [r2, r3]
 800583c:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800583e:	3106      	adds	r1, #6
 8005840:	2204      	movs	r2, #4
 8005842:	a801      	add	r0, sp, #4
 8005844:	f00f fe89 	bl	801555a <memcpy>
			switch(snippets[index].cond.mathOperator){
 8005848:	192c      	adds	r4, r5, r4
 800584a:	00a3      	lsls	r3, r4, #2
 800584c:	18f6      	adds	r6, r6, r3
 800584e:	7873      	ldrb	r3, [r6, #1]
 8005850:	2b06      	cmp	r3, #6
 8005852:	d847      	bhi.n	80058e4 <CheckSnippetCondition+0x104>
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4a2f      	ldr	r2, [pc, #188]	; (8005914 <CheckSnippetCondition+0x134>)
 8005858:	58d3      	ldr	r3, [r2, r3]
 800585a:	469f      	mov	pc, r3
					if(flt1 == flt2)
 800585c:	1c39      	adds	r1, r7, #0
 800585e:	9801      	ldr	r0, [sp, #4]
 8005860:	f7fa fe36 	bl	80004d0 <__aeabi_fcmpeq>
 8005864:	2800      	cmp	r0, #0
 8005866:	d03f      	beq.n	80058e8 <CheckSnippetCondition+0x108>
						return true;
 8005868:	2001      	movs	r0, #1
 800586a:	e7c6      	b.n	80057fa <CheckSnippetCondition+0x1a>
					if(flt1 > flt2)
 800586c:	1c39      	adds	r1, r7, #0
 800586e:	9801      	ldr	r0, [sp, #4]
 8005870:	f7fa fe34 	bl	80004dc <__aeabi_fcmplt>
 8005874:	2800      	cmp	r0, #0
 8005876:	d101      	bne.n	800587c <CheckSnippetCondition+0x9c>
	return false;
 8005878:	2000      	movs	r0, #0
 800587a:	e7be      	b.n	80057fa <CheckSnippetCondition+0x1a>
						return true;
 800587c:	2001      	movs	r0, #1
 800587e:	e7bc      	b.n	80057fa <CheckSnippetCondition+0x1a>
					if(flt1 < flt2 && flt1 != 0.0f)
 8005880:	1c39      	adds	r1, r7, #0
 8005882:	9801      	ldr	r0, [sp, #4]
 8005884:	f7fa fe3e 	bl	8000504 <__aeabi_fcmpgt>
 8005888:	2800      	cmp	r0, #0
 800588a:	d02f      	beq.n	80058ec <CheckSnippetCondition+0x10c>
 800588c:	2100      	movs	r1, #0
 800588e:	1c38      	adds	r0, r7, #0
 8005890:	f7fa fe1e 	bl	80004d0 <__aeabi_fcmpeq>
 8005894:	2800      	cmp	r0, #0
 8005896:	d12b      	bne.n	80058f0 <CheckSnippetCondition+0x110>
						return true;
 8005898:	3001      	adds	r0, #1
 800589a:	e7ae      	b.n	80057fa <CheckSnippetCondition+0x1a>
					if(flt1 >= flt2)
 800589c:	1c39      	adds	r1, r7, #0
 800589e:	9801      	ldr	r0, [sp, #4]
 80058a0:	f7fa fe26 	bl	80004f0 <__aeabi_fcmple>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d025      	beq.n	80058f4 <CheckSnippetCondition+0x114>
						return true;
 80058a8:	2001      	movs	r0, #1
 80058aa:	e7a6      	b.n	80057fa <CheckSnippetCondition+0x1a>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80058ac:	1c39      	adds	r1, r7, #0
 80058ae:	9801      	ldr	r0, [sp, #4]
 80058b0:	f7fa fe32 	bl	8000518 <__aeabi_fcmpge>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d01f      	beq.n	80058f8 <CheckSnippetCondition+0x118>
 80058b8:	2100      	movs	r1, #0
 80058ba:	1c38      	adds	r0, r7, #0
 80058bc:	f7fa fe08 	bl	80004d0 <__aeabi_fcmpeq>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d11b      	bne.n	80058fc <CheckSnippetCondition+0x11c>
						return true;
 80058c4:	3001      	adds	r0, #1
 80058c6:	e798      	b.n	80057fa <CheckSnippetCondition+0x1a>
					if(flt1 != flt2 && flt1 != 0.0f)
 80058c8:	1c39      	adds	r1, r7, #0
 80058ca:	9801      	ldr	r0, [sp, #4]
 80058cc:	f7fa fe00 	bl	80004d0 <__aeabi_fcmpeq>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d115      	bne.n	8005900 <CheckSnippetCondition+0x120>
 80058d4:	2100      	movs	r1, #0
 80058d6:	1c38      	adds	r0, r7, #0
 80058d8:	f7fa fdfa 	bl	80004d0 <__aeabi_fcmpeq>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d111      	bne.n	8005904 <CheckSnippetCondition+0x124>
						return true;
 80058e0:	3001      	adds	r0, #1
 80058e2:	e78a      	b.n	80057fa <CheckSnippetCondition+0x1a>
	return false;
 80058e4:	2000      	movs	r0, #0
 80058e6:	e788      	b.n	80057fa <CheckSnippetCondition+0x1a>
 80058e8:	2000      	movs	r0, #0
 80058ea:	e786      	b.n	80057fa <CheckSnippetCondition+0x1a>
 80058ec:	2000      	movs	r0, #0
 80058ee:	e784      	b.n	80057fa <CheckSnippetCondition+0x1a>
 80058f0:	2000      	movs	r0, #0
 80058f2:	e782      	b.n	80057fa <CheckSnippetCondition+0x1a>
 80058f4:	2000      	movs	r0, #0
 80058f6:	e780      	b.n	80057fa <CheckSnippetCondition+0x1a>
 80058f8:	2000      	movs	r0, #0
 80058fa:	e77e      	b.n	80057fa <CheckSnippetCondition+0x1a>
 80058fc:	2000      	movs	r0, #0
 80058fe:	e77c      	b.n	80057fa <CheckSnippetCondition+0x1a>
 8005900:	2000      	movs	r0, #0
 8005902:	e77a      	b.n	80057fa <CheckSnippetCondition+0x1a>
 8005904:	2000      	movs	r0, #0
 8005906:	e778      	b.n	80057fa <CheckSnippetCondition+0x1a>
 8005908:	20007068 	.word	0x20007068
 800590c:	20001744 	.word	0x20001744
 8005910:	20000098 	.word	0x20000098
 8005914:	0801a468 	.word	0x0801a468

08005918 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 8005918:	b570      	push	{r4, r5, r6, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800591a:	f00a fb0b 	bl	800ff34 <FreeRTOS_CLIGetOutputBuffer>
 800591e:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005920:	2400      	movs	r4, #0
 8005922:	e01b      	b.n	800595c <ExecuteSnippet+0x44>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005924:	4b19      	ldr	r3, [pc, #100]	; (800598c <ExecuteSnippet+0x74>)
 8005926:	7818      	ldrb	r0, [r3, #0]
 8005928:	002b      	movs	r3, r5
 800592a:	4a19      	ldr	r2, [pc, #100]	; (8005990 <ExecuteSnippet+0x78>)
 800592c:	2100      	movs	r1, #0
 800592e:	f7ff fc43 	bl	80051b8 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005932:	0028      	movs	r0, r5
 8005934:	f7fa fbf0 	bl	8000118 <strlen>
 8005938:	0002      	movs	r2, r0
 800593a:	2100      	movs	r1, #0
 800593c:	0028      	movs	r0, r5
 800593e:	f00f fe15 	bl	801556c <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005942:	00b3      	lsls	r3, r6, #2
 8005944:	199b      	adds	r3, r3, r6
 8005946:	009a      	lsls	r2, r3, #2
 8005948:	4b12      	ldr	r3, [pc, #72]	; (8005994 <ExecuteSnippet+0x7c>)
 800594a:	189b      	adds	r3, r3, r2
 800594c:	68d8      	ldr	r0, [r3, #12]
 800594e:	4910      	ldr	r1, [pc, #64]	; (8005990 <ExecuteSnippet+0x78>)
 8005950:	f7ff ff04 	bl	800575c <ParseSnippetCommand>
 8005954:	2800      	cmp	r0, #0
 8005956:	d1e5      	bne.n	8005924 <ExecuteSnippet+0xc>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005958:	3401      	adds	r4, #1
 800595a:	b2a4      	uxth	r4, r4
 800595c:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <ExecuteSnippet+0x80>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	42a3      	cmp	r3, r4
 8005962:	d911      	bls.n	8005988 <ExecuteSnippet+0x70>
		if(snippets[s].state)								// Check for activated Snippets
 8005964:	0026      	movs	r6, r4
 8005966:	00a3      	lsls	r3, r4, #2
 8005968:	191b      	adds	r3, r3, r4
 800596a:	009a      	lsls	r2, r3, #2
 800596c:	4b09      	ldr	r3, [pc, #36]	; (8005994 <ExecuteSnippet+0x7c>)
 800596e:	189b      	adds	r3, r3, r2
 8005970:	7c1b      	ldrb	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 8005976:	b2e0      	uxtb	r0, r4
 8005978:	f7ff ff32 	bl	80057e0 <CheckSnippetCondition>
 800597c:	2800      	cmp	r0, #0
 800597e:	d0eb      	beq.n	8005958 <ExecuteSnippet+0x40>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <ExecuteSnippet+0x84>)
 8005982:	2220      	movs	r2, #32
 8005984:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005986:	e7dc      	b.n	8005942 <ExecuteSnippet+0x2a>
			}
		}
	}
	
	return result;
}
 8005988:	2000      	movs	r0, #0
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	20000aa8 	.word	0x20000aa8
 8005990:	200011b0 	.word	0x200011b0
 8005994:	20007068 	.word	0x20007068
 8005998:	20001217 	.word	0x20001217
 800599c:	20006fcc 	.word	0x20006fcc

080059a0 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 80059a0:	2000      	movs	r0, #0
 80059a2:	4770      	bx	lr

080059a4 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a6:	b083      	sub	sp, #12
 80059a8:	0005      	movs	r5, r0
 80059aa:	0016      	movs	r6, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 80059b0:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d101      	bne.n	80059ba <setBaudrateCommand+0x16>
 80059b6:	b672      	cpsid	i
 80059b8:	e7fe      	b.n	80059b8 <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059ba:	aa01      	add	r2, sp, #4
 80059bc:	2101      	movs	r1, #1
 80059be:	0030      	movs	r0, r6
 80059c0:	f00a fabc 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80059c4:	2300      	movs	r3, #0
 80059c6:	56c3      	ldrsb	r3, [r0, r3]
 80059c8:	2b70      	cmp	r3, #112	; 0x70
 80059ca:	d017      	beq.n	80059fc <setBaudrateCommand+0x58>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
	}
	else{
		result =BOS_ERR_WrongValue;
 80059cc:	2768      	movs	r7, #104	; 0x68
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059ce:	466a      	mov	r2, sp
 80059d0:	2102      	movs	r1, #2
 80059d2:	0030      	movs	r0, r6
 80059d4:	f00a fab2 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80059d8:	f00f fb35 	bl	8015046 <atol>
 80059dc:	0006      	movs	r6, r0
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
 80059de:	2f68      	cmp	r7, #104	; 0x68
 80059e0:	d012      	beq.n	8005a08 <setBaudrateCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
	}
	else{
		UpdateBaudrate(port,baudrate);
 80059e2:	0001      	movs	r1, r0
 80059e4:	0020      	movs	r0, r4
 80059e6:	f00a f8bf 	bl	800fb68 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80059ea:	0023      	movs	r3, r4
 80059ec:	0032      	movs	r2, r6
 80059ee:	4909      	ldr	r1, [pc, #36]	; (8005a14 <setBaudrateCommand+0x70>)
 80059f0:	0028      	movs	r0, r5
 80059f2:	f00f ffb5 	bl	8015960 <sprintf>
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 80059f6:	2000      	movs	r0, #0
 80059f8:	b003      	add	sp, #12
 80059fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059fc:	3001      	adds	r0, #1
 80059fe:	f00f fb22 	bl	8015046 <atol>
 8005a02:	b2c4      	uxtb	r4, r0
	BOS_Status result =BOS_OK;
 8005a04:	2700      	movs	r7, #0
 8005a06:	e7e2      	b.n	80059ce <setBaudrateCommand+0x2a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005a08:	2213      	movs	r2, #19
 8005a0a:	4903      	ldr	r1, [pc, #12]	; (8005a18 <setBaudrateCommand+0x74>)
 8005a0c:	0028      	movs	r0, r5
 8005a0e:	f00f fda4 	bl	801555a <memcpy>
 8005a12:	e7f0      	b.n	80059f6 <setBaudrateCommand+0x52>
 8005a14:	0801b324 	.word	0x0801b324
 8005a18:	0801b310 	.word	0x0801b310

08005a1c <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a1c:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d101      	bne.n	8005a26 <flashsizeCommand+0xa>
 8005a22:	b672      	cpsid	i
 8005a24:	e7fe      	b.n	8005a24 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 8005a26:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <flashsizeCommand+0x1c>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	0412      	lsls	r2, r2, #16
 8005a2c:	0c12      	lsrs	r2, r2, #16
 8005a2e:	4903      	ldr	r1, [pc, #12]	; (8005a3c <flashsizeCommand+0x20>)
 8005a30:	f00f ff96 	bl	8015960 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005a34:	2000      	movs	r0, #0
 8005a36:	bd10      	pop	{r4, pc}
 8005a38:	1ffff7cc 	.word	0x1ffff7cc
 8005a3c:	0801ad04 	.word	0x0801ad04

08005a40 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a40:	b510      	push	{r4, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	0004      	movs	r4, r0
 8005a46:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005a50:	2c00      	cmp	r4, #0
 8005a52:	d101      	bne.n	8005a58 <GetReadPrecentageCommand+0x18>
 8005a54:	b672      	cpsid	i
 8005a56:	e7fe      	b.n	8005a56 <GetReadPrecentageCommand+0x16>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a58:	aa01      	add	r2, sp, #4
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	f00a fa6e 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005a60:	2300      	movs	r3, #0
 8005a62:	56c3      	ldrsb	r3, [r0, r3]
 8005a64:	3b32      	subs	r3, #50	; 0x32
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d907      	bls.n	8005a7c <GetReadPrecentageCommand+0x3c>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a6c:	2215      	movs	r2, #21
 8005a6e:	490b      	ldr	r1, [pc, #44]	; (8005a9c <GetReadPrecentageCommand+0x5c>)
 8005a70:	0020      	movs	r0, r4
 8005a72:	f00f fd72 	bl	801555a <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 8005a76:	2000      	movs	r0, #0
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005a7c:	f00f fae3 	bl	8015046 <atol>
 8005a80:	b2c0      	uxtb	r0, r0
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8005a82:	4669      	mov	r1, sp
 8005a84:	f003 f9a8 	bl	8008dd8 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005a88:	9800      	ldr	r0, [sp, #0]
 8005a8a:	f7fd fb4b 	bl	8003124 <__aeabi_f2d>
 8005a8e:	0002      	movs	r2, r0
 8005a90:	000b      	movs	r3, r1
 8005a92:	4903      	ldr	r1, [pc, #12]	; (8005aa0 <GetReadPrecentageCommand+0x60>)
 8005a94:	0020      	movs	r0, r4
 8005a96:	f00f ff63 	bl	8015960 <sprintf>
 8005a9a:	e7ec      	b.n	8005a76 <GetReadPrecentageCommand+0x36>
 8005a9c:	0801aa00 	.word	0x0801aa00
 8005aa0:	0801a9dc 	.word	0x0801a9dc

08005aa4 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d101      	bne.n	8005ab8 <ReadVrefCommand+0x14>
 8005ab4:	b672      	cpsid	i
 8005ab6:	e7fe      	b.n	8005ab6 <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005ab8:	4669      	mov	r1, sp
 8005aba:	a801      	add	r0, sp, #4
 8005abc:	f003 f8d0 	bl	8008c60 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005ac0:	a901      	add	r1, sp, #4
 8005ac2:	0020      	movs	r0, r4
 8005ac4:	f00f ff88 	bl	80159d8 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005ac8:	9800      	ldr	r0, [sp, #0]
 8005aca:	f7fd fb2b 	bl	8003124 <__aeabi_f2d>
 8005ace:	0002      	movs	r2, r0
 8005ad0:	000b      	movs	r3, r1
 8005ad2:	4903      	ldr	r1, [pc, #12]	; (8005ae0 <ReadVrefCommand+0x3c>)
 8005ad4:	0020      	movs	r0, r4
 8005ad6:	f00f ff43 	bl	8015960 <sprintf>
}
 8005ada:	2000      	movs	r0, #0
 8005adc:	b002      	add	sp, #8
 8005ade:	bd10      	pop	{r4, pc}
 8005ae0:	0801aa4c 	.word	0x0801aa4c

08005ae4 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d101      	bne.n	8005af8 <ReadTempCommand+0x14>
 8005af4:	b672      	cpsid	i
 8005af6:	e7fe      	b.n	8005af6 <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005af8:	4669      	mov	r1, sp
 8005afa:	a801      	add	r0, sp, #4
 8005afc:	f003 f8b0 	bl	8008c60 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005b00:	a901      	add	r1, sp, #4
 8005b02:	0020      	movs	r0, r4
 8005b04:	f00f ff68 	bl	80159d8 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005b08:	9801      	ldr	r0, [sp, #4]
 8005b0a:	f7fd fb0b 	bl	8003124 <__aeabi_f2d>
 8005b0e:	0002      	movs	r2, r0
 8005b10:	000b      	movs	r3, r1
 8005b12:	4903      	ldr	r1, [pc, #12]	; (8005b20 <ReadTempCommand+0x3c>)
 8005b14:	0020      	movs	r0, r4
 8005b16:	f00f ff23 	bl	8015960 <sprintf>
}
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd10      	pop	{r4, pc}
 8005b20:	0801aa18 	.word	0x0801aa18

08005b24 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	0004      	movs	r4, r0
 8005b2a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 8005b30:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d101      	bne.n	8005b3e <ADCReadCommand+0x1a>
 8005b3a:	b672      	cpsid	i
 8005b3c:	e7fe      	b.n	8005b3c <ADCReadCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b3e:	aa03      	add	r2, sp, #12
 8005b40:	2101      	movs	r1, #1
 8005b42:	0028      	movs	r0, r5
 8005b44:	f00a f9fa 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8005b48:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b4a:	aa02      	add	r2, sp, #8
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	0028      	movs	r0, r5
 8005b50:	f00a f9f4 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8005b54:	0005      	movs	r5, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005b56:	2300      	movs	r3, #0
 8005b58:	56f3      	ldrsb	r3, [r6, r3]
 8005b5a:	3b32      	subs	r3, #50	; 0x32
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d907      	bls.n	8005b72 <ADCReadCommand+0x4e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005b62:	2215      	movs	r2, #21
 8005b64:	4919      	ldr	r1, [pc, #100]	; (8005bcc <ADCReadCommand+0xa8>)
 8005b66:	0020      	movs	r0, r4
 8005b68:	f00f fcf7 	bl	801555a <memcpy>
}
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	b004      	add	sp, #16
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005b72:	0030      	movs	r0, r6
 8005b74:	f00f fa67 	bl	8015046 <atol>
 8005b78:	b2c6      	uxtb	r6, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005b7a:	4915      	ldr	r1, [pc, #84]	; (8005bd0 <ADCReadCommand+0xac>)
 8005b7c:	0028      	movs	r0, r5
 8005b7e:	f7fa fac1 	bl	8000104 <strcmp>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d005      	beq.n	8005b92 <ADCReadCommand+0x6e>
 8005b86:	4913      	ldr	r1, [pc, #76]	; (8005bd4 <ADCReadCommand+0xb0>)
 8005b88:	0028      	movs	r0, r5
 8005b8a:	f7fa fabb 	bl	8000104 <strcmp>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d116      	bne.n	8005bc0 <ADCReadCommand+0x9c>
			ADCSelectChannel(ADCports,ADC_Side);
 8005b92:	4d0f      	ldr	r5, [pc, #60]	; (8005bd0 <ADCReadCommand+0xac>)
 8005b94:	0029      	movs	r1, r5
 8005b96:	0030      	movs	r0, r6
 8005b98:	f003 f9ec 	bl	8008f74 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005b9c:	aa01      	add	r2, sp, #4
 8005b9e:	0029      	movs	r1, r5
 8005ba0:	0030      	movs	r0, r6
 8005ba2:	f003 fa19 	bl	8008fd8 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005ba6:	a901      	add	r1, sp, #4
 8005ba8:	0020      	movs	r0, r4
 8005baa:	f00f ff15 	bl	80159d8 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005bae:	9801      	ldr	r0, [sp, #4]
 8005bb0:	f7fa fd10 	bl	80005d4 <__aeabi_f2uiz>
 8005bb4:	b282      	uxth	r2, r0
 8005bb6:	4908      	ldr	r1, [pc, #32]	; (8005bd8 <ADCReadCommand+0xb4>)
 8005bb8:	0020      	movs	r0, r4
 8005bba:	f00f fed1 	bl	8015960 <sprintf>
 8005bbe:	e7d5      	b.n	8005b6c <ADCReadCommand+0x48>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bc0:	2212      	movs	r2, #18
 8005bc2:	4906      	ldr	r1, [pc, #24]	; (8005bdc <ADCReadCommand+0xb8>)
 8005bc4:	0020      	movs	r0, r4
 8005bc6:	f00f fcc8 	bl	801555a <memcpy>
 8005bca:	e7cf      	b.n	8005b6c <ADCReadCommand+0x48>
 8005bcc:	0801aa00 	.word	0x0801aa00
 8005bd0:	0801a98c 	.word	0x0801a98c
 8005bd4:	0801a990 	.word	0x0801a990
 8005bd8:	0801a998 	.word	0x0801a998
 8005bdc:	0801a9a8 	.word	0x0801a9a8

08005be0 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	b085      	sub	sp, #20
 8005be4:	0004      	movs	r4, r0
 8005be6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 8005bec:	4b60      	ldr	r3, [pc, #384]	; (8005d70 <testportCommand+0x190>)
 8005bee:	781a      	ldrb	r2, [r3, #0]
 8005bf0:	ab02      	add	r3, sp, #8
 8005bf2:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 8005bf4:	2c00      	cmp	r4, #0
 8005bf6:	d101      	bne.n	8005bfc <testportCommand+0x1c>
 8005bf8:	b672      	cpsid	i
 8005bfa:	e7fe      	b.n	8005bfa <testportCommand+0x1a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bfc:	aa03      	add	r2, sp, #12
 8005bfe:	2101      	movs	r1, #1
 8005c00:	f00a f99c 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8005c04:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005c06:	495b      	ldr	r1, [pc, #364]	; (8005d74 <testportCommand+0x194>)
 8005c08:	f7fa fa7c 	bl	8000104 <strcmp>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d000      	beq.n	8005c12 <testportCommand+0x32>
 8005c10:	e06c      	b.n	8005cec <testportCommand+0x10c>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005c12:	4b59      	ldr	r3, [pc, #356]	; (8005d78 <testportCommand+0x198>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	4a58      	ldr	r2, [pc, #352]	; (8005d7c <testportCommand+0x19c>)
 8005c1a:	5cd6      	ldrb	r6, [r2, r3]
		for(ports =1; ports <= NumOfPorts; ports++){
 8005c1c:	2501      	movs	r5, #1
 8005c1e:	e005      	b.n	8005c2c <testportCommand+0x4c>
			if(PcPort != ports){
 8005c20:	4b55      	ldr	r3, [pc, #340]	; (8005d78 <testportCommand+0x198>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	d106      	bne.n	8005c36 <testportCommand+0x56>
		for(ports =1; ports <= NumOfPorts; ports++){
 8005c28:	3501      	adds	r5, #1
 8005c2a:	b2ed      	uxtb	r5, r5
 8005c2c:	2d05      	cmp	r5, #5
 8005c2e:	d9f7      	bls.n	8005c20 <testportCommand+0x40>
}
 8005c30:	2000      	movs	r0, #0
 8005c32:	b005      	add	sp, #20
 8005c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
				WriteVaule[0] =rand();
 8005c36:	f00f fcb1 	bl	801559c <rand>
 8005c3a:	af02      	add	r7, sp, #8
 8005c3c:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005c3e:	2364      	movs	r3, #100	; 0x64
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	3b5a      	subs	r3, #90	; 0x5a
 8005c44:	2201      	movs	r2, #1
 8005c46:	0039      	movs	r1, r7
 8005c48:	0028      	movs	r0, r5
 8005c4a:	f009 ff1d 	bl	800fa88 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005c4e:	0028      	movs	r0, r5
 8005c50:	f009 fefc 	bl	800fa4c <GetUart>
 8005c54:	6803      	ldr	r3, [r0, #0]
 8005c56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c58:	b2db      	uxtb	r3, r3
				if(WriteVaule[0] == ReadValue[0])
 8005c5a:	783a      	ldrb	r2, [r7, #0]
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d022      	beq.n	8005ca6 <testportCommand+0xc6>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005c60:	002a      	movs	r2, r5
 8005c62:	4947      	ldr	r1, [pc, #284]	; (8005d80 <testportCommand+0x1a0>)
 8005c64:	0020      	movs	r0, r4
 8005c66:	f00f fe7b 	bl	8015960 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005c6a:	0020      	movs	r0, r4
 8005c6c:	f7fa fa54 	bl	8000118 <strlen>
 8005c70:	b282      	uxth	r2, r0
 8005c72:	4b41      	ldr	r3, [pc, #260]	; (8005d78 <testportCommand+0x198>)
 8005c74:	7818      	ldrb	r0, [r3, #0]
 8005c76:	2364      	movs	r3, #100	; 0x64
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	3b5a      	subs	r3, #90	; 0x5a
 8005c7c:	0021      	movs	r1, r4
 8005c7e:	f009 ff03 	bl	800fa88 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005c82:	2254      	movs	r2, #84	; 0x54
 8005c84:	493f      	ldr	r1, [pc, #252]	; (8005d84 <testportCommand+0x1a4>)
 8005c86:	0020      	movs	r0, r4
 8005c88:	f00f fc67 	bl	801555a <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005c8c:	0020      	movs	r0, r4
 8005c8e:	f7fa fa43 	bl	8000118 <strlen>
 8005c92:	b282      	uxth	r2, r0
 8005c94:	4b38      	ldr	r3, [pc, #224]	; (8005d78 <testportCommand+0x198>)
 8005c96:	7818      	ldrb	r0, [r3, #0]
 8005c98:	2364      	movs	r3, #100	; 0x64
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	3b5a      	subs	r3, #90	; 0x5a
 8005c9e:	0021      	movs	r1, r4
 8005ca0:	f009 fef2 	bl	800fa88 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005ca4:	e014      	b.n	8005cd0 <testportCommand+0xf0>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005ca6:	002a      	movs	r2, r5
 8005ca8:	4937      	ldr	r1, [pc, #220]	; (8005d88 <testportCommand+0x1a8>)
 8005caa:	0020      	movs	r0, r4
 8005cac:	f00f fe58 	bl	8015960 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005cb0:	0020      	movs	r0, r4
 8005cb2:	f7fa fa31 	bl	8000118 <strlen>
 8005cb6:	b282      	uxth	r2, r0
 8005cb8:	4b2f      	ldr	r3, [pc, #188]	; (8005d78 <testportCommand+0x198>)
 8005cba:	7818      	ldrb	r0, [r3, #0]
 8005cbc:	2364      	movs	r3, #100	; 0x64
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	3b5a      	subs	r3, #90	; 0x5a
 8005cc2:	0021      	movs	r1, r4
 8005cc4:	f009 fee0 	bl	800fa88 <writePxMutex>
 8005cc8:	e7db      	b.n	8005c82 <testportCommand+0xa2>
					Delay_ms(1);
 8005cca:	2001      	movs	r0, #1
 8005ccc:	f00c f88c 	bl	8011de8 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005cd0:	4b29      	ldr	r3, [pc, #164]	; (8005d78 <testportCommand+0x198>)
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	3a01      	subs	r2, #1
 8005cd6:	1c71      	adds	r1, r6, #1
 8005cd8:	0053      	lsls	r3, r2, #1
 8005cda:	189b      	adds	r3, r3, r2
 8005cdc:	019a      	lsls	r2, r3, #6
 8005cde:	4b2b      	ldr	r3, [pc, #172]	; (8005d8c <testportCommand+0x1ac>)
 8005ce0:	189b      	adds	r3, r3, r2
 8005ce2:	5c5b      	ldrb	r3, [r3, r1]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0f0      	beq.n	8005cca <testportCommand+0xea>
				LastEnter++;
 8005ce8:	000e      	movs	r6, r1
 8005cea:	e79d      	b.n	8005c28 <testportCommand+0x48>
	else if(pcParameterString1[0] == 'p'){
 8005cec:	2300      	movs	r3, #0
 8005cee:	56eb      	ldrsb	r3, [r5, r3]
 8005cf0:	2b70      	cmp	r3, #112	; 0x70
 8005cf2:	d005      	beq.n	8005d00 <testportCommand+0x120>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005cf4:	220f      	movs	r2, #15
 8005cf6:	4926      	ldr	r1, [pc, #152]	; (8005d90 <testportCommand+0x1b0>)
 8005cf8:	0020      	movs	r0, r4
 8005cfa:	f00f fc2e 	bl	801555a <memcpy>
 8005cfe:	e797      	b.n	8005c30 <testportCommand+0x50>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005d00:	1c68      	adds	r0, r5, #1
 8005d02:	f00f f9a0 	bl	8015046 <atol>
 8005d06:	0005      	movs	r5, r0
 8005d08:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005d0a:	1e7b      	subs	r3, r7, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d81a      	bhi.n	8005d48 <testportCommand+0x168>
				WriteVaule[0] =rand();
 8005d12:	f00f fc43 	bl	801559c <rand>
 8005d16:	ae02      	add	r6, sp, #8
 8005d18:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005d1a:	2364      	movs	r3, #100	; 0x64
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	3b32      	subs	r3, #50	; 0x32
 8005d20:	2201      	movs	r2, #1
 8005d22:	0031      	movs	r1, r6
 8005d24:	0038      	movs	r0, r7
 8005d26:	f009 feaf 	bl	800fa88 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005d2a:	0038      	movs	r0, r7
 8005d2c:	f009 fe8e 	bl	800fa4c <GetUart>
 8005d30:	6803      	ldr	r3, [r0, #0]
 8005d32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d34:	b2db      	uxtb	r3, r3
			if(WriteVaule[0] == ReadValue[0])
 8005d36:	7832      	ldrb	r2, [r6, #0]
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d10e      	bne.n	8005d5a <testportCommand+0x17a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005d3c:	b2ea      	uxtb	r2, r5
 8005d3e:	4912      	ldr	r1, [pc, #72]	; (8005d88 <testportCommand+0x1a8>)
 8005d40:	0020      	movs	r0, r4
 8005d42:	f00f fe0d 	bl	8015960 <sprintf>
 8005d46:	e773      	b.n	8005c30 <testportCommand+0x50>
			result =BOS_ERR_WrongID;
 8005d48:	2366      	movs	r3, #102	; 0x66
		else if(result == BOS_ERR_WrongID)
 8005d4a:	2b66      	cmp	r3, #102	; 0x66
 8005d4c:	d107      	bne.n	8005d5e <testportCommand+0x17e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005d4e:	221b      	movs	r2, #27
 8005d50:	4910      	ldr	r1, [pc, #64]	; (8005d94 <testportCommand+0x1b4>)
 8005d52:	0020      	movs	r0, r4
 8005d54:	f00f fc01 	bl	801555a <memcpy>
 8005d58:	e76a      	b.n	8005c30 <testportCommand+0x50>
				result =BOS_ERR_Keyword;
 8005d5a:	2306      	movs	r3, #6
 8005d5c:	e7f5      	b.n	8005d4a <testportCommand+0x16a>
		else if(result == BOS_ERR_Keyword)
 8005d5e:	2b06      	cmp	r3, #6
 8005d60:	d000      	beq.n	8005d64 <testportCommand+0x184>
 8005d62:	e765      	b.n	8005c30 <testportCommand+0x50>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005d64:	b2ea      	uxtb	r2, r5
 8005d66:	4906      	ldr	r1, [pc, #24]	; (8005d80 <testportCommand+0x1a0>)
 8005d68:	0020      	movs	r0, r4
 8005d6a:	f00f fdf9 	bl	8015960 <sprintf>
 8005d6e:	e75f      	b.n	8005c30 <testportCommand+0x50>
 8005d70:	08019d60 	.word	0x08019d60
 8005d74:	0801a13c 	.word	0x0801a13c
 8005d78:	20000aa8 	.word	0x20000aa8
 8005d7c:	20001688 	.word	0x20001688
 8005d80:	0801c614 	.word	0x0801c614
 8005d84:	0801c628 	.word	0x0801c628
 8005d88:	0801c5f8 	.word	0x0801c5f8
 8005d8c:	200012c8 	.word	0x200012c8
 8005d90:	0801c698 	.word	0x0801c698
 8005d94:	0801c67c 	.word	0x0801c67c

08005d98 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	0004      	movs	r4, r0
 8005d9e:	9201      	str	r2, [sp, #4]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	9303      	str	r3, [sp, #12]
 8005da4:	9302      	str	r3, [sp, #8]
	configASSERT(pcWriteBuffer);
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d101      	bne.n	8005dae <unbridgeCommand+0x16>
 8005daa:	b672      	cpsid	i
 8005dac:	e7fe      	b.n	8005dac <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dae:	aa03      	add	r2, sp, #12
 8005db0:	2101      	movs	r1, #1
 8005db2:	9801      	ldr	r0, [sp, #4]
 8005db4:	f00a f8c2 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005db8:	2300      	movs	r3, #0
 8005dba:	56c3      	ldrsb	r3, [r0, r3]
 8005dbc:	2b70      	cmp	r3, #112	; 0x70
 8005dbe:	d016      	beq.n	8005dee <unbridgeCommand+0x56>
		result =BOS_ERR_WrongParam;
 8005dc0:	2767      	movs	r7, #103	; 0x67
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005dc2:	aa02      	add	r2, sp, #8
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	9801      	ldr	r0, [sp, #4]
 8005dc8:	f00a f8b8 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005dcc:	2300      	movs	r3, #0
 8005dce:	56c3      	ldrsb	r3, [r0, r3]
 8005dd0:	2b70      	cmp	r3, #112	; 0x70
 8005dd2:	d012      	beq.n	8005dfa <unbridgeCommand+0x62>
		result =BOS_ERR_WrongParam;
 8005dd4:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d01a      	beq.n	8005e10 <unbridgeCommand+0x78>
	else if(result == BOS_ERR_WrongParam)
 8005dda:	2867      	cmp	r0, #103	; 0x67
 8005ddc:	d021      	beq.n	8005e22 <unbridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005dde:	2219      	movs	r2, #25
 8005de0:	4913      	ldr	r1, [pc, #76]	; (8005e30 <unbridgeCommand+0x98>)
 8005de2:	0020      	movs	r0, r4
 8005de4:	f00f fbb9 	bl	801555a <memcpy>
}
 8005de8:	2000      	movs	r0, #0
 8005dea:	b005      	add	sp, #20
 8005dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005dee:	3001      	adds	r0, #1
 8005df0:	f00f f929 	bl	8015046 <atol>
 8005df4:	b2c5      	uxtb	r5, r0
	BOS_Status result =BOS_OK;
 8005df6:	2700      	movs	r7, #0
 8005df8:	e7e3      	b.n	8005dc2 <unbridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	f00f f923 	bl	8015046 <atol>
 8005e00:	b2c6      	uxtb	r6, r0
	if(result == BOS_OK)
 8005e02:	2f00      	cmp	r7, #0
 8005e04:	d10b      	bne.n	8005e1e <unbridgeCommand+0x86>
		result =Unbridge(port1,port2);
 8005e06:	0031      	movs	r1, r6
 8005e08:	0028      	movs	r0, r5
 8005e0a:	f7fe fedb 	bl	8004bc4 <Unbridge>
 8005e0e:	e7e2      	b.n	8005dd6 <unbridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005e10:	0033      	movs	r3, r6
 8005e12:	002a      	movs	r2, r5
 8005e14:	4907      	ldr	r1, [pc, #28]	; (8005e34 <unbridgeCommand+0x9c>)
 8005e16:	0020      	movs	r0, r4
 8005e18:	f00f fda2 	bl	8015960 <sprintf>
 8005e1c:	e7e4      	b.n	8005de8 <unbridgeCommand+0x50>
		result =BOS_ERR_WrongParam;
 8005e1e:	2067      	movs	r0, #103	; 0x67
 8005e20:	e7db      	b.n	8005dda <unbridgeCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005e22:	220f      	movs	r2, #15
 8005e24:	4904      	ldr	r1, [pc, #16]	; (8005e38 <unbridgeCommand+0xa0>)
 8005e26:	0020      	movs	r0, r4
 8005e28:	f00f fb97 	bl	801555a <memcpy>
 8005e2c:	e7dc      	b.n	8005de8 <unbridgeCommand+0x50>
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	0801c744 	.word	0x0801c744
 8005e34:	0801c724 	.word	0x0801c724
 8005e38:	0801c698 	.word	0x0801c698

08005e3c <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	0004      	movs	r4, r0
 8005e42:	9201      	str	r2, [sp, #4]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	9303      	str	r3, [sp, #12]
 8005e48:	9302      	str	r3, [sp, #8]
	configASSERT(pcWriteBuffer);
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d101      	bne.n	8005e52 <bridgeCommand+0x16>
 8005e4e:	b672      	cpsid	i
 8005e50:	e7fe      	b.n	8005e50 <bridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e52:	aa03      	add	r2, sp, #12
 8005e54:	2101      	movs	r1, #1
 8005e56:	9801      	ldr	r0, [sp, #4]
 8005e58:	f00a f870 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	56c3      	ldrsb	r3, [r0, r3]
 8005e60:	2b70      	cmp	r3, #112	; 0x70
 8005e62:	d016      	beq.n	8005e92 <bridgeCommand+0x56>
		result =BOS_ERR_WrongParam;
 8005e64:	2767      	movs	r7, #103	; 0x67
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005e66:	aa02      	add	r2, sp, #8
 8005e68:	2102      	movs	r1, #2
 8005e6a:	9801      	ldr	r0, [sp, #4]
 8005e6c:	f00a f866 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005e70:	2300      	movs	r3, #0
 8005e72:	56c3      	ldrsb	r3, [r0, r3]
 8005e74:	2b70      	cmp	r3, #112	; 0x70
 8005e76:	d012      	beq.n	8005e9e <bridgeCommand+0x62>
		result =BOS_ERR_WrongParam;
 8005e78:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d01a      	beq.n	8005eb4 <bridgeCommand+0x78>
	else if(result == BOS_ERR_WrongParam)
 8005e7e:	2867      	cmp	r0, #103	; 0x67
 8005e80:	d021      	beq.n	8005ec6 <bridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005e82:	2217      	movs	r2, #23
 8005e84:	4913      	ldr	r1, [pc, #76]	; (8005ed4 <bridgeCommand+0x98>)
 8005e86:	0020      	movs	r0, r4
 8005e88:	f00f fb67 	bl	801555a <memcpy>
}
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	b005      	add	sp, #20
 8005e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005e92:	3001      	adds	r0, #1
 8005e94:	f00f f8d7 	bl	8015046 <atol>
 8005e98:	b2c5      	uxtb	r5, r0
	BOS_Status result =BOS_OK;
 8005e9a:	2700      	movs	r7, #0
 8005e9c:	e7e3      	b.n	8005e66 <bridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	f00f f8d1 	bl	8015046 <atol>
 8005ea4:	b2c6      	uxtb	r6, r0
	if(result == BOS_OK)
 8005ea6:	2f00      	cmp	r7, #0
 8005ea8:	d10b      	bne.n	8005ec2 <bridgeCommand+0x86>
		result =Bridge(port1,port2);
 8005eaa:	0031      	movs	r1, r6
 8005eac:	0028      	movs	r0, r5
 8005eae:	f7fe fe75 	bl	8004b9c <Bridge>
 8005eb2:	e7e2      	b.n	8005e7a <bridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005eb4:	0033      	movs	r3, r6
 8005eb6:	002a      	movs	r2, r5
 8005eb8:	4907      	ldr	r1, [pc, #28]	; (8005ed8 <bridgeCommand+0x9c>)
 8005eba:	0020      	movs	r0, r4
 8005ebc:	f00f fd50 	bl	8015960 <sprintf>
 8005ec0:	e7e4      	b.n	8005e8c <bridgeCommand+0x50>
		result =BOS_ERR_WrongParam;
 8005ec2:	2067      	movs	r0, #103	; 0x67
 8005ec4:	e7db      	b.n	8005e7e <bridgeCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ec6:	220f      	movs	r2, #15
 8005ec8:	4904      	ldr	r1, [pc, #16]	; (8005edc <bridgeCommand+0xa0>)
 8005eca:	0020      	movs	r0, r4
 8005ecc:	f00f fb45 	bl	801555a <memcpy>
 8005ed0:	e7dc      	b.n	8005e8c <bridgeCommand+0x50>
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	0801aba0 	.word	0x0801aba0
 8005ed8:	0801ab7c 	.word	0x0801ab7c
 8005edc:	0801c698 	.word	0x0801c698

08005ee0 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	0006      	movs	r6, r0
 8005ee6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005eec:	2e00      	cmp	r6, #0
 8005eee:	d101      	bne.n	8005ef4 <delSnipCommand+0x14>
 8005ef0:	b672      	cpsid	i
 8005ef2:	e7fe      	b.n	8005ef2 <delSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ef4:	aa01      	add	r2, sp, #4
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	f00a f820 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005efc:	f00f f89d 	bl	801503a <atoi>
 8005f00:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005f02:	2c00      	cmp	r4, #0
 8005f04:	d03f      	beq.n	8005f86 <delSnipCommand+0xa6>
 8005f06:	4b28      	ldr	r3, [pc, #160]	; (8005fa8 <delSnipCommand+0xc8>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	d201      	bcs.n	8005f12 <delSnipCommand+0x32>
 8005f0e:	23ff      	movs	r3, #255	; 0xff
 8005f10:	e03a      	b.n	8005f88 <delSnipCommand+0xa8>
		snippets[index - 1].cond.conditionType =0;
 8005f12:	b2c0      	uxtb	r0, r0
 8005f14:	3801      	subs	r0, #1
 8005f16:	4d25      	ldr	r5, [pc, #148]	; (8005fac <delSnipCommand+0xcc>)
 8005f18:	2314      	movs	r3, #20
 8005f1a:	4358      	muls	r0, r3
 8005f1c:	2700      	movs	r7, #0
 8005f1e:	5547      	strb	r7, [r0, r5]
		snippets[index - 1].cond.mathOperator =0;
 8005f20:	182d      	adds	r5, r5, r0
 8005f22:	706f      	strb	r7, [r5, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005f24:	1ca8      	adds	r0, r5, #2
 8005f26:	2204      	movs	r2, #4
 8005f28:	0039      	movs	r1, r7
 8005f2a:	f00f fb1f 	bl	801556c <memset>
		snippets[index - 1].state = false;
 8005f2e:	742f      	strb	r7, [r5, #16]
		free(snippets[index - 1].cmd);
 8005f30:	68e8      	ldr	r0, [r5, #12]
 8005f32:	f00f f8cf 	bl	80150d4 <free>
		snippets[index - 1].cmd = NULL;
 8005f36:	60ef      	str	r7, [r5, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005f38:	e008      	b.n	8005f4c <delSnipCommand+0x6c>
			if(snippets[s].cond.conditionType){
 8005f3a:	00a3      	lsls	r3, r4, #2
 8005f3c:	191b      	adds	r3, r3, r4
 8005f3e:	009a      	lsls	r2, r3, #2
 8005f40:	4b1a      	ldr	r3, [pc, #104]	; (8005fac <delSnipCommand+0xcc>)
 8005f42:	5cd3      	ldrb	r3, [r2, r3]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10c      	bne.n	8005f62 <delSnipCommand+0x82>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005f48:	3401      	adds	r4, #1
 8005f4a:	b2e4      	uxtb	r4, r4
 8005f4c:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <delSnipCommand+0xc8>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	42a3      	cmp	r3, r4
 8005f52:	d8f2      	bhi.n	8005f3a <delSnipCommand+0x5a>
		--numOfRecordedSnippets;
 8005f54:	3b01      	subs	r3, #1
 8005f56:	4a14      	ldr	r2, [pc, #80]	; (8005fa8 <delSnipCommand+0xc8>)
 8005f58:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005f5a:	f006 f805 	bl	800bf68 <SaveToRO>
	BOS_Status result =BOS_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e012      	b.n	8005f88 <delSnipCommand+0xa8>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005f62:	1e60      	subs	r0, r4, #1
 8005f64:	2714      	movs	r7, #20
 8005f66:	4378      	muls	r0, r7
 8005f68:	4b10      	ldr	r3, [pc, #64]	; (8005fac <delSnipCommand+0xcc>)
 8005f6a:	18c0      	adds	r0, r0, r3
 8005f6c:	003d      	movs	r5, r7
 8005f6e:	4365      	muls	r5, r4
 8005f70:	18ed      	adds	r5, r5, r3
 8005f72:	003a      	movs	r2, r7
 8005f74:	0029      	movs	r1, r5
 8005f76:	f00f faf0 	bl	801555a <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005f7a:	003a      	movs	r2, r7
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	0028      	movs	r0, r5
 8005f80:	f00f faf4 	bl	801556c <memset>
 8005f84:	e7e0      	b.n	8005f48 <delSnipCommand+0x68>
 8005f86:	23ff      	movs	r3, #255	; 0xff
	if(result == BOS_OK)
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <delSnipCommand+0xb8>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005f8c:	2223      	movs	r2, #35	; 0x23
 8005f8e:	4908      	ldr	r1, [pc, #32]	; (8005fb0 <delSnipCommand+0xd0>)
 8005f90:	0030      	movs	r0, r6
 8005f92:	f00f fae2 	bl	801555a <memcpy>
 8005f96:	e004      	b.n	8005fa2 <delSnipCommand+0xc2>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005f98:	2236      	movs	r2, #54	; 0x36
 8005f9a:	4906      	ldr	r1, [pc, #24]	; (8005fb4 <delSnipCommand+0xd4>)
 8005f9c:	0030      	movs	r0, r6
 8005f9e:	f00f fadc 	bl	801555a <memcpy>
}
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	b003      	add	sp, #12
 8005fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fa8:	20001217 	.word	0x20001217
 8005fac:	20007068 	.word	0x20007068
 8005fb0:	0801acc0 	.word	0x0801acc0
 8005fb4:	0801ac88 	.word	0x0801ac88

08005fb8 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	0004      	movs	r4, r0
 8005fbe:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005fc4:	2c00      	cmp	r4, #0
 8005fc6:	d101      	bne.n	8005fcc <pauseSnipCommand+0x14>
 8005fc8:	b672      	cpsid	i
 8005fca:	e7fe      	b.n	8005fca <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005fcc:	aa01      	add	r2, sp, #4
 8005fce:	2101      	movs	r1, #1
 8005fd0:	f009 ffb4 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005fd4:	f00f f831 	bl	801503a <atoi>
 8005fd8:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <pauseSnipCommand+0x2e>
 8005fde:	4a0e      	ldr	r2, [pc, #56]	; (8006018 <pauseSnipCommand+0x60>)
 8005fe0:	7812      	ldrb	r2, [r2, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d207      	bcs.n	8005ff6 <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005fe6:	2223      	movs	r2, #35	; 0x23
 8005fe8:	490c      	ldr	r1, [pc, #48]	; (800601c <pauseSnipCommand+0x64>)
 8005fea:	0020      	movs	r0, r4
 8005fec:	f00f fab5 	bl	801555a <memcpy>
}
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	b002      	add	sp, #8
 8005ff4:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005ff6:	b2c0      	uxtb	r0, r0
 8005ff8:	3801      	subs	r0, #1
 8005ffa:	2314      	movs	r3, #20
 8005ffc:	4343      	muls	r3, r0
 8005ffe:	4808      	ldr	r0, [pc, #32]	; (8006020 <pauseSnipCommand+0x68>)
 8006000:	18c0      	adds	r0, r0, r3
 8006002:	2300      	movs	r3, #0
 8006004:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8006006:	f005 ffaf 	bl	800bf68 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 800600a:	2235      	movs	r2, #53	; 0x35
 800600c:	4905      	ldr	r1, [pc, #20]	; (8006024 <pauseSnipCommand+0x6c>)
 800600e:	0020      	movs	r0, r4
 8006010:	f00f faa3 	bl	801555a <memcpy>
 8006014:	e7ec      	b.n	8005ff0 <pauseSnipCommand+0x38>
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	20001217 	.word	0x20001217
 800601c:	0801acc0 	.word	0x0801acc0
 8006020:	20007068 	.word	0x20007068
 8006024:	0801b0d0 	.word	0x0801b0d0

08006028 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006028:	b510      	push	{r4, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	0004      	movs	r4, r0
 800602e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006030:	2300      	movs	r3, #0
 8006032:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006034:	2c00      	cmp	r4, #0
 8006036:	d101      	bne.n	800603c <actSnipCommand+0x14>
 8006038:	b672      	cpsid	i
 800603a:	e7fe      	b.n	800603a <actSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800603c:	aa01      	add	r2, sp, #4
 800603e:	2101      	movs	r1, #1
 8006040:	f009 ff7c 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8006044:	f00e fff9 	bl	801503a <atoi>
 8006048:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <actSnipCommand+0x2e>
 800604e:	4a0e      	ldr	r2, [pc, #56]	; (8006088 <actSnipCommand+0x60>)
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d207      	bcs.n	8006066 <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8006056:	2223      	movs	r2, #35	; 0x23
 8006058:	490c      	ldr	r1, [pc, #48]	; (800608c <actSnipCommand+0x64>)
 800605a:	0020      	movs	r0, r4
 800605c:	f00f fa7d 	bl	801555a <memcpy>
}
 8006060:	2000      	movs	r0, #0
 8006062:	b002      	add	sp, #8
 8006064:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8006066:	b2c0      	uxtb	r0, r0
 8006068:	3801      	subs	r0, #1
 800606a:	2314      	movs	r3, #20
 800606c:	4343      	muls	r3, r0
 800606e:	4808      	ldr	r0, [pc, #32]	; (8006090 <actSnipCommand+0x68>)
 8006070:	18c0      	adds	r0, r0, r3
 8006072:	2301      	movs	r3, #1
 8006074:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8006076:	f005 ff77 	bl	800bf68 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 800607a:	2238      	movs	r2, #56	; 0x38
 800607c:	4905      	ldr	r1, [pc, #20]	; (8006094 <actSnipCommand+0x6c>)
 800607e:	0020      	movs	r0, r4
 8006080:	f00f fa6b 	bl	801555a <memcpy>
 8006084:	e7ec      	b.n	8006060 <actSnipCommand+0x38>
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	20001217 	.word	0x20001217
 800608c:	0801acc0 	.word	0x0801acc0
 8006090:	20007068 	.word	0x20007068
 8006094:	0801aa84 	.word	0x0801aa84

08006098 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609a:	46ce      	mov	lr, r9
 800609c:	4647      	mov	r7, r8
 800609e:	b580      	push	{r7, lr}
 80060a0:	b08b      	sub	sp, #44	; 0x2c
 80060a2:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 80060a4:	aa06      	add	r2, sp, #24
 80060a6:	4b74      	ldr	r3, [pc, #464]	; (8006278 <snipCommand+0x1e0>)
 80060a8:	3304      	adds	r3, #4
 80060aa:	cb23      	ldmia	r3!, {r0, r1, r5}
 80060ac:	c223      	stmia	r2!, {r0, r1, r5}
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 80060b2:	2c00      	cmp	r4, #0
 80060b4:	d101      	bne.n	80060ba <snipCommand+0x22>
 80060b6:	b672      	cpsid	i
 80060b8:	e7fe      	b.n	80060b8 <snipCommand+0x20>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 80060ba:	4b70      	ldr	r3, [pc, #448]	; (800627c <snipCommand+0x1e4>)
 80060bc:	7818      	ldrb	r0, [r3, #0]
 80060be:	2301      	movs	r3, #1
 80060c0:	425b      	negs	r3, r3
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	3333      	adds	r3, #51	; 0x33
 80060c6:	2237      	movs	r2, #55	; 0x37
 80060c8:	496d      	ldr	r1, [pc, #436]	; (8006280 <snipCommand+0x1e8>)
 80060ca:	f009 fcdd 	bl	800fa88 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 80060ce:	2700      	movs	r7, #0
	uint8_t count =1;
 80060d0:	2301      	movs	r3, #1
 80060d2:	4698      	mov	r8, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 80060d4:	e088      	b.n	80061e8 <snipCommand+0x150>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 80060d6:	4b6b      	ldr	r3, [pc, #428]	; (8006284 <snipCommand+0x1ec>)
 80060d8:	189b      	adds	r3, r3, r2
 80060da:	7c1a      	ldrb	r2, [r3, #16]
 80060dc:	00d3      	lsls	r3, r2, #3
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	aa06      	add	r2, sp, #24
 80060e2:	4694      	mov	ip, r2
 80060e4:	4463      	add	r3, ip
 80060e6:	4642      	mov	r2, r8
 80060e8:	4967      	ldr	r1, [pc, #412]	; (8006288 <snipCommand+0x1f0>)
 80060ea:	0020      	movs	r0, r4
 80060ec:	f00f fc38 	bl	8015960 <sprintf>
 80060f0:	e087      	b.n	8006202 <snipCommand+0x16a>
				switch(snippets[s].cond.buffer1[1]){
 80060f2:	00ab      	lsls	r3, r5, #2
 80060f4:	195b      	adds	r3, r3, r5
 80060f6:	009a      	lsls	r2, r3, #2
 80060f8:	4b62      	ldr	r3, [pc, #392]	; (8006284 <snipCommand+0x1ec>)
 80060fa:	189b      	adds	r3, r3, r2
 80060fc:	78db      	ldrb	r3, [r3, #3]
 80060fe:	3b05      	subs	r3, #5
 8006100:	b2da      	uxtb	r2, r3
 8006102:	2a09      	cmp	r2, #9
 8006104:	d84a      	bhi.n	800619c <snipCommand+0x104>
 8006106:	0093      	lsls	r3, r2, #2
 8006108:	4a60      	ldr	r2, [pc, #384]	; (800628c <snipCommand+0x1f4>)
 800610a:	58d3      	ldr	r3, [r2, r3]
 800610c:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 800610e:	2314      	movs	r3, #20
 8006110:	436b      	muls	r3, r5
 8006112:	4a5c      	ldr	r2, [pc, #368]	; (8006284 <snipCommand+0x1ec>)
 8006114:	18d2      	adds	r2, r2, r3
 8006116:	7893      	ldrb	r3, [r2, #2]
 8006118:	68d2      	ldr	r2, [r2, #12]
 800611a:	9200      	str	r2, [sp, #0]
 800611c:	0022      	movs	r2, r4
 800611e:	495c      	ldr	r1, [pc, #368]	; (8006290 <snipCommand+0x1f8>)
 8006120:	0020      	movs	r0, r4
 8006122:	f00f fc1d 	bl	8015960 <sprintf>
						break;
 8006126:	e039      	b.n	800619c <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8006128:	2314      	movs	r3, #20
 800612a:	436b      	muls	r3, r5
 800612c:	4a55      	ldr	r2, [pc, #340]	; (8006284 <snipCommand+0x1ec>)
 800612e:	18d2      	adds	r2, r2, r3
 8006130:	7893      	ldrb	r3, [r2, #2]
 8006132:	68d2      	ldr	r2, [r2, #12]
 8006134:	9200      	str	r2, [sp, #0]
 8006136:	0022      	movs	r2, r4
 8006138:	4956      	ldr	r1, [pc, #344]	; (8006294 <snipCommand+0x1fc>)
 800613a:	0020      	movs	r0, r4
 800613c:	f00f fc10 	bl	8015960 <sprintf>
						break;
 8006140:	e02c      	b.n	800619c <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8006142:	2314      	movs	r3, #20
 8006144:	436b      	muls	r3, r5
 8006146:	4a4f      	ldr	r2, [pc, #316]	; (8006284 <snipCommand+0x1ec>)
 8006148:	18d2      	adds	r2, r2, r3
 800614a:	7893      	ldrb	r3, [r2, #2]
 800614c:	7911      	ldrb	r1, [r2, #4]
 800614e:	68d2      	ldr	r2, [r2, #12]
 8006150:	9201      	str	r2, [sp, #4]
 8006152:	9100      	str	r1, [sp, #0]
 8006154:	0022      	movs	r2, r4
 8006156:	4950      	ldr	r1, [pc, #320]	; (8006298 <snipCommand+0x200>)
 8006158:	0020      	movs	r0, r4
 800615a:	f00f fc01 	bl	8015960 <sprintf>
						break;
 800615e:	e01d      	b.n	800619c <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8006160:	2314      	movs	r3, #20
 8006162:	436b      	muls	r3, r5
 8006164:	4a47      	ldr	r2, [pc, #284]	; (8006284 <snipCommand+0x1ec>)
 8006166:	18d2      	adds	r2, r2, r3
 8006168:	7893      	ldrb	r3, [r2, #2]
 800616a:	7911      	ldrb	r1, [r2, #4]
 800616c:	68d2      	ldr	r2, [r2, #12]
 800616e:	9201      	str	r2, [sp, #4]
 8006170:	9100      	str	r1, [sp, #0]
 8006172:	0022      	movs	r2, r4
 8006174:	4949      	ldr	r1, [pc, #292]	; (800629c <snipCommand+0x204>)
 8006176:	0020      	movs	r0, r4
 8006178:	f00f fbf2 	bl	8015960 <sprintf>
						break;
 800617c:	e00e      	b.n	800619c <snipCommand+0x104>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 800617e:	4e48      	ldr	r6, [pc, #288]	; (80062a0 <snipCommand+0x208>)
 8006180:	0033      	movs	r3, r6
 8006182:	0022      	movs	r2, r4
 8006184:	4947      	ldr	r1, [pc, #284]	; (80062a4 <snipCommand+0x20c>)
 8006186:	0020      	movs	r0, r4
 8006188:	f00f fbea 	bl	8015960 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 800618c:	0030      	movs	r0, r6
 800618e:	f7f9 ffc3 	bl	8000118 <strlen>
 8006192:	0002      	movs	r2, r0
 8006194:	2100      	movs	r1, #0
 8006196:	0030      	movs	r0, r6
 8006198:	f00f f9e8 	bl	801556c <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 800619c:	00ab      	lsls	r3, r5, #2
 800619e:	195b      	adds	r3, r3, r5
 80061a0:	009a      	lsls	r2, r3, #2
 80061a2:	4b38      	ldr	r3, [pc, #224]	; (8006284 <snipCommand+0x1ec>)
 80061a4:	189b      	adds	r3, r3, r2
 80061a6:	68d8      	ldr	r0, [r3, #12]
 80061a8:	493d      	ldr	r1, [pc, #244]	; (80062a0 <snipCommand+0x208>)
 80061aa:	f7ff fad7 	bl	800575c <ParseSnippetCommand>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d1e5      	bne.n	800617e <snipCommand+0xe6>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 80061b2:	0020      	movs	r0, r4
 80061b4:	f7f9 ffb0 	bl	8000118 <strlen>
 80061b8:	1820      	adds	r0, r4, r0
 80061ba:	220c      	movs	r2, #12
 80061bc:	493a      	ldr	r1, [pc, #232]	; (80062a8 <snipCommand+0x210>)
 80061be:	f00f f9cc 	bl	801555a <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80061c2:	0020      	movs	r0, r4
 80061c4:	f7f9 ffa8 	bl	8000118 <strlen>
 80061c8:	b282      	uxth	r2, r0
 80061ca:	4b2c      	ldr	r3, [pc, #176]	; (800627c <snipCommand+0x1e4>)
 80061cc:	7818      	ldrb	r0, [r3, #0]
 80061ce:	2301      	movs	r3, #1
 80061d0:	425b      	negs	r3, r3
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	3333      	adds	r3, #51	; 0x33
 80061d6:	0021      	movs	r1, r4
 80061d8:	f009 fc56 	bl	800fa88 <writePxMutex>
		++count;
 80061dc:	4643      	mov	r3, r8
 80061de:	3301      	adds	r3, #1
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	4698      	mov	r8, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 80061e4:	3701      	adds	r7, #1
 80061e6:	b2ff      	uxtb	r7, r7
 80061e8:	4b30      	ldr	r3, [pc, #192]	; (80062ac <snipCommand+0x214>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	42bb      	cmp	r3, r7
 80061ee:	d938      	bls.n	8006262 <snipCommand+0x1ca>
		if(snippets[s].cond.conditionType)
 80061f0:	003d      	movs	r5, r7
 80061f2:	00bb      	lsls	r3, r7, #2
 80061f4:	19db      	adds	r3, r3, r7
 80061f6:	009a      	lsls	r2, r3, #2
 80061f8:	4b22      	ldr	r3, [pc, #136]	; (8006284 <snipCommand+0x1ec>)
 80061fa:	5cd3      	ldrb	r3, [r2, r3]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d000      	beq.n	8006202 <snipCommand+0x16a>
 8006200:	e769      	b.n	80060d6 <snipCommand+0x3e>
		switch(snippets[s].cond.conditionType){
 8006202:	00ab      	lsls	r3, r5, #2
 8006204:	195b      	adds	r3, r3, r5
 8006206:	009a      	lsls	r2, r3, #2
 8006208:	4b1e      	ldr	r3, [pc, #120]	; (8006284 <snipCommand+0x1ec>)
 800620a:	5cd3      	ldrb	r3, [r2, r3]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d100      	bne.n	8006212 <snipCommand+0x17a>
 8006210:	e76f      	b.n	80060f2 <snipCommand+0x5a>
 8006212:	2b03      	cmp	r3, #3
 8006214:	d1c2      	bne.n	800619c <snipCommand+0x104>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8006216:	00ab      	lsls	r3, r5, #2
 8006218:	195b      	adds	r3, r3, r5
 800621a:	009e      	lsls	r6, r3, #2
 800621c:	4b19      	ldr	r3, [pc, #100]	; (8006284 <snipCommand+0x1ec>)
 800621e:	18f6      	adds	r6, r6, r3
 8006220:	1db1      	adds	r1, r6, #6
 8006222:	2204      	movs	r2, #4
 8006224:	a805      	add	r0, sp, #20
 8006226:	f00f f998 	bl	801555a <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 800622a:	78f2      	ldrb	r2, [r6, #3]
 800622c:	3a01      	subs	r2, #1
 800622e:	7873      	ldrb	r3, [r6, #1]
 8006230:	3b01      	subs	r3, #1
 8006232:	005e      	lsls	r6, r3, #1
 8006234:	18f3      	adds	r3, r6, r3
 8006236:	4e1e      	ldr	r6, [pc, #120]	; (80062b0 <snipCommand+0x218>)
 8006238:	18f6      	adds	r6, r6, r3
 800623a:	0053      	lsls	r3, r2, #1
 800623c:	189b      	adds	r3, r3, r2
 800623e:	009a      	lsls	r2, r3, #2
 8006240:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <snipCommand+0x21c>)
 8006242:	189b      	adds	r3, r3, r2
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	4699      	mov	r9, r3
 8006248:	9805      	ldr	r0, [sp, #20]
 800624a:	f7fc ff6b 	bl	8003124 <__aeabi_f2d>
 800624e:	9002      	str	r0, [sp, #8]
 8006250:	9103      	str	r1, [sp, #12]
 8006252:	9600      	str	r6, [sp, #0]
 8006254:	464b      	mov	r3, r9
 8006256:	0022      	movs	r2, r4
 8006258:	4917      	ldr	r1, [pc, #92]	; (80062b8 <snipCommand+0x220>)
 800625a:	0020      	movs	r0, r4
 800625c:	f00f fb80 	bl	8015960 <sprintf>
				break;
 8006260:	e79c      	b.n	800619c <snipCommand+0x104>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8006262:	22b5      	movs	r2, #181	; 0xb5
 8006264:	4915      	ldr	r1, [pc, #84]	; (80062bc <snipCommand+0x224>)
 8006266:	0020      	movs	r0, r4
 8006268:	f00f f977 	bl	801555a <memcpy>
}
 800626c:	2000      	movs	r0, #0
 800626e:	b00b      	add	sp, #44	; 0x2c
 8006270:	bc0c      	pop	{r2, r3}
 8006272:	4690      	mov	r8, r2
 8006274:	4699      	mov	r9, r3
 8006276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006278:	08019d60 	.word	0x08019d60
 800627c:	20000aa8 	.word	0x20000aa8
 8006280:	0801b564 	.word	0x0801b564
 8006284:	20007068 	.word	0x20007068
 8006288:	0801b59c 	.word	0x0801b59c
 800628c:	0801a940 	.word	0x0801a940
 8006290:	0801b5a8 	.word	0x0801b5a8
 8006294:	0801b5bc 	.word	0x0801b5bc
 8006298:	0801b5d4 	.word	0x0801b5d4
 800629c:	0801b5ec 	.word	0x0801b5ec
 80062a0:	20001248 	.word	0x20001248
 80062a4:	0801b618 	.word	0x0801b618
 80062a8:	0801b620 	.word	0x0801b620
 80062ac:	20001217 	.word	0x20001217
 80062b0:	0801b094 	.word	0x0801b094
 80062b4:	20000098 	.word	0x20000098
 80062b8:	0801b608 	.word	0x0801b608
 80062bc:	0801b62c 	.word	0x0801b62c

080062c0 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062c0:	b510      	push	{r4, lr}
 80062c2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80062c4:	d101      	bne.n	80062ca <idcodeCommand+0xa>
 80062c6:	b672      	cpsid	i
 80062c8:	e7fe      	b.n	80062c8 <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 80062ca:	f00b fda1 	bl	8011e10 <HAL_GetDEVID>
	switch(dev){
 80062ce:	0403      	lsls	r3, r0, #16
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	4a1b      	ldr	r2, [pc, #108]	; (8006340 <idcodeCommand+0x80>)
 80062d4:	4694      	mov	ip, r2
 80062d6:	4463      	add	r3, ip
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d82a      	bhi.n	8006332 <idcodeCommand+0x72>
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4a19      	ldr	r2, [pc, #100]	; (8006344 <idcodeCommand+0x84>)
 80062e0:	58d3      	ldr	r3, [r2, r3]
 80062e2:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 80062e4:	4a18      	ldr	r2, [pc, #96]	; (8006348 <idcodeCommand+0x88>)
 80062e6:	4919      	ldr	r1, [pc, #100]	; (800634c <idcodeCommand+0x8c>)
 80062e8:	0020      	movs	r0, r4
 80062ea:	f00f fb39 	bl	8015960 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 80062ee:	f00b fd89 	bl	8011e04 <HAL_GetREVID>
 80062f2:	0b03      	lsrs	r3, r0, #12
 80062f4:	0022      	movs	r2, r4
 80062f6:	4916      	ldr	r1, [pc, #88]	; (8006350 <idcodeCommand+0x90>)
 80062f8:	0020      	movs	r0, r4
 80062fa:	f00f fb31 	bl	8015960 <sprintf>
}
 80062fe:	2000      	movs	r0, #0
 8006300:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8006302:	4a14      	ldr	r2, [pc, #80]	; (8006354 <idcodeCommand+0x94>)
 8006304:	4911      	ldr	r1, [pc, #68]	; (800634c <idcodeCommand+0x8c>)
 8006306:	0020      	movs	r0, r4
 8006308:	f00f fb2a 	bl	8015960 <sprintf>
			break;
 800630c:	e7ef      	b.n	80062ee <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 800630e:	4a12      	ldr	r2, [pc, #72]	; (8006358 <idcodeCommand+0x98>)
 8006310:	490e      	ldr	r1, [pc, #56]	; (800634c <idcodeCommand+0x8c>)
 8006312:	0020      	movs	r0, r4
 8006314:	f00f fb24 	bl	8015960 <sprintf>
			break;
 8006318:	e7e9      	b.n	80062ee <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 800631a:	4a10      	ldr	r2, [pc, #64]	; (800635c <idcodeCommand+0x9c>)
 800631c:	490b      	ldr	r1, [pc, #44]	; (800634c <idcodeCommand+0x8c>)
 800631e:	0020      	movs	r0, r4
 8006320:	f00f fb1e 	bl	8015960 <sprintf>
			break;
 8006324:	e7e3      	b.n	80062ee <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8006326:	4a0e      	ldr	r2, [pc, #56]	; (8006360 <idcodeCommand+0xa0>)
 8006328:	4908      	ldr	r1, [pc, #32]	; (800634c <idcodeCommand+0x8c>)
 800632a:	0020      	movs	r0, r4
 800632c:	f00f fb18 	bl	8015960 <sprintf>
			break;
 8006330:	e7dd      	b.n	80062ee <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8006332:	4a0c      	ldr	r2, [pc, #48]	; (8006364 <idcodeCommand+0xa4>)
 8006334:	4905      	ldr	r1, [pc, #20]	; (800634c <idcodeCommand+0x8c>)
 8006336:	0020      	movs	r0, r4
 8006338:	f00f fb12 	bl	8015960 <sprintf>
			break;
 800633c:	e7d7      	b.n	80062ee <idcodeCommand+0x2e>
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	fffffbc0 	.word	0xfffffbc0
 8006344:	0801a968 	.word	0x0801a968
 8006348:	0801af90 	.word	0x0801af90
 800634c:	0801af9c 	.word	0x0801af9c
 8006350:	0801afe8 	.word	0x0801afe8
 8006354:	0801afb0 	.word	0x0801afb0
 8006358:	0801afbc 	.word	0x0801afbc
 800635c:	0801afc8 	.word	0x0801afc8
 8006360:	0801afd4 	.word	0x0801afd4
 8006364:	0801afe0 	.word	0x0801afe0

08006368 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800636c:	d101      	bne.n	8006372 <uuidCommand+0xa>
 800636e:	b672      	cpsid	i
 8006370:	e7fe      	b.n	8006370 <uuidCommand+0x8>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8006372:	220e      	movs	r2, #14
 8006374:	490d      	ldr	r1, [pc, #52]	; (80063ac <uuidCommand+0x44>)
 8006376:	f00f f8f0 	bl	801555a <memcpy>
	for(uint8_t i =0; i < 3; i++){
 800637a:	2500      	movs	r5, #0
 800637c:	2d02      	cmp	r5, #2
 800637e:	d80b      	bhi.n	8006398 <uuidCommand+0x30>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <uuidCommand+0x48>)
 8006382:	18eb      	adds	r3, r5, r3
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	0022      	movs	r2, r4
 800638a:	490a      	ldr	r1, [pc, #40]	; (80063b4 <uuidCommand+0x4c>)
 800638c:	0020      	movs	r0, r4
 800638e:	f00f fae7 	bl	8015960 <sprintf>
	for(uint8_t i =0; i < 3; i++){
 8006392:	3501      	adds	r5, #1
 8006394:	b2ed      	uxtb	r5, r5
 8006396:	e7f1      	b.n	800637c <uuidCommand+0x14>
	strcat((char* )pcWriteBuffer,"\r\n");
 8006398:	0020      	movs	r0, r4
 800639a:	f7f9 febd 	bl	8000118 <strlen>
 800639e:	1820      	adds	r0, r4, r0
 80063a0:	2203      	movs	r2, #3
 80063a2:	4905      	ldr	r1, [pc, #20]	; (80063b8 <uuidCommand+0x50>)
 80063a4:	f00f f8d9 	bl	801555a <memcpy>
}
 80063a8:	2000      	movs	r0, #0
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
 80063ac:	0801c770 	.word	0x0801c770
 80063b0:	07fffdeb 	.word	0x07fffdeb
 80063b4:	0801c780 	.word	0x0801c780
 80063b8:	0801bf68 	.word	0x0801bf68

080063bc <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063bc:	b530      	push	{r4, r5, lr}
 80063be:	b085      	sub	sp, #20
 80063c0:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80063c2:	d101      	bne.n	80063c8 <timeCommand+0xc>
 80063c4:	b672      	cpsid	i
 80063c6:	e7fe      	b.n	80063c6 <timeCommand+0xa>
	GetTimeDate();
 80063c8:	f009 f904 	bl	800f5d4 <GetTimeDate>
	if(BOS.hourformat == 24)
 80063cc:	4b1b      	ldr	r3, [pc, #108]	; (800643c <timeCommand+0x80>)
 80063ce:	7b5b      	ldrb	r3, [r3, #13]
 80063d0:	2b18      	cmp	r3, #24
 80063d2:	d004      	beq.n	80063de <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 80063d4:	2b0c      	cmp	r3, #12
 80063d6:	d00e      	beq.n	80063f6 <timeCommand+0x3a>
}
 80063d8:	2000      	movs	r0, #0
 80063da:	b005      	add	sp, #20
 80063dc:	bd30      	pop	{r4, r5, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 80063de:	4917      	ldr	r1, [pc, #92]	; (800643c <timeCommand+0x80>)
 80063e0:	7c8a      	ldrb	r2, [r1, #18]
 80063e2:	7c4b      	ldrb	r3, [r1, #17]
 80063e4:	7c08      	ldrb	r0, [r1, #16]
 80063e6:	89c9      	ldrh	r1, [r1, #14]
 80063e8:	9101      	str	r1, [sp, #4]
 80063ea:	9000      	str	r0, [sp, #0]
 80063ec:	4914      	ldr	r1, [pc, #80]	; (8006440 <timeCommand+0x84>)
 80063ee:	0020      	movs	r0, r4
 80063f0:	f00f fab6 	bl	8015960 <sprintf>
 80063f4:	e7f0      	b.n	80063d8 <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 80063f6:	4b11      	ldr	r3, [pc, #68]	; (800643c <timeCommand+0x80>)
 80063f8:	7cdb      	ldrb	r3, [r3, #19]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d10d      	bne.n	800641a <timeCommand+0x5e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 80063fe:	490f      	ldr	r1, [pc, #60]	; (800643c <timeCommand+0x80>)
 8006400:	7c8a      	ldrb	r2, [r1, #18]
 8006402:	7c4b      	ldrb	r3, [r1, #17]
 8006404:	7c08      	ldrb	r0, [r1, #16]
 8006406:	89c9      	ldrh	r1, [r1, #14]
 8006408:	4d0e      	ldr	r5, [pc, #56]	; (8006444 <timeCommand+0x88>)
 800640a:	9502      	str	r5, [sp, #8]
 800640c:	9101      	str	r1, [sp, #4]
 800640e:	9000      	str	r0, [sp, #0]
 8006410:	490d      	ldr	r1, [pc, #52]	; (8006448 <timeCommand+0x8c>)
 8006412:	0020      	movs	r0, r4
 8006414:	f00f faa4 	bl	8015960 <sprintf>
 8006418:	e7de      	b.n	80063d8 <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 800641a:	2b02      	cmp	r3, #2
 800641c:	d1dc      	bne.n	80063d8 <timeCommand+0x1c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800641e:	4907      	ldr	r1, [pc, #28]	; (800643c <timeCommand+0x80>)
 8006420:	7c8a      	ldrb	r2, [r1, #18]
 8006422:	7c4b      	ldrb	r3, [r1, #17]
 8006424:	7c08      	ldrb	r0, [r1, #16]
 8006426:	89c9      	ldrh	r1, [r1, #14]
 8006428:	4d08      	ldr	r5, [pc, #32]	; (800644c <timeCommand+0x90>)
 800642a:	9502      	str	r5, [sp, #8]
 800642c:	9101      	str	r1, [sp, #4]
 800642e:	9000      	str	r0, [sp, #0]
 8006430:	4905      	ldr	r1, [pc, #20]	; (8006448 <timeCommand+0x8c>)
 8006432:	0020      	movs	r0, r4
 8006434:	f00f fa94 	bl	8015960 <sprintf>
 8006438:	e7ce      	b.n	80063d8 <timeCommand+0x1c>
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	2000704c 	.word	0x2000704c
 8006440:	0801c6b8 	.word	0x0801c6b8
 8006444:	0801c70c 	.word	0x0801c70c
 8006448:	0801c6e0 	.word	0x0801c6e0
 800644c:	0801c710 	.word	0x0801c710

08006450 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006450:	b510      	push	{r4, lr}
 8006452:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006454:	d101      	bne.n	800645a <dateCommand+0xa>
 8006456:	b672      	cpsid	i
 8006458:	e7fe      	b.n	8006458 <dateCommand+0x8>
	GetTimeDate();
 800645a:	f009 f8bb 	bl	800f5d4 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 800645e:	f7fe fb7b 	bl	8004b58 <GetDateString>
 8006462:	0002      	movs	r2, r0
 8006464:	4902      	ldr	r1, [pc, #8]	; (8006470 <dateCommand+0x20>)
 8006466:	0020      	movs	r0, r4
 8006468:	f00f fa7a 	bl	8015960 <sprintf>
}
 800646c:	2000      	movs	r0, #0
 800646e:	bd10      	pop	{r4, pc}
 8006470:	0801abc8 	.word	0x0801abc8

08006474 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006476:	b083      	sub	sp, #12
 8006478:	0004      	movs	r4, r0
 800647a:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800647c:	2300      	movs	r3, #0
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8006482:	2800      	cmp	r0, #0
 8006484:	d101      	bne.n	800648a <getCommand+0x16>
 8006486:	b672      	cpsid	i
 8006488:	e7fe      	b.n	8006488 <getCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800648a:	aa01      	add	r2, sp, #4
 800648c:	2101      	movs	r1, #1
 800648e:	0030      	movs	r0, r6
 8006490:	f009 fd54 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8006494:	0005      	movs	r5, r0
 8006496:	4b7d      	ldr	r3, [pc, #500]	; (800668c <getCommand+0x218>)
 8006498:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800649a:	2204      	movs	r2, #4
 800649c:	497c      	ldr	r1, [pc, #496]	; (8006690 <getCommand+0x21c>)
 800649e:	f00f faa3 	bl	80159e8 <strncmp>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d000      	beq.n	80064a8 <getCommand+0x34>
 80064a6:	e09c      	b.n	80065e2 <getCommand+0x16e>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80064a8:	3504      	adds	r5, #4
 80064aa:	9b01      	ldr	r3, [sp, #4]
 80064ac:	1f1e      	subs	r6, r3, #4
 80064ae:	0032      	movs	r2, r6
 80064b0:	4978      	ldr	r1, [pc, #480]	; (8006694 <getCommand+0x220>)
 80064b2:	0028      	movs	r0, r5
 80064b4:	f00f fa98 	bl	80159e8 <strncmp>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d122      	bne.n	8006502 <getCommand+0x8e>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 80064bc:	4b76      	ldr	r3, [pc, #472]	; (8006698 <getCommand+0x224>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b60      	cmp	r3, #96	; 0x60
 80064c2:	d10b      	bne.n	80064dc <getCommand+0x68>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80064c4:	4a75      	ldr	r2, [pc, #468]	; (800669c <getCommand+0x228>)
 80064c6:	4976      	ldr	r1, [pc, #472]	; (80066a0 <getCommand+0x22c>)
 80064c8:	0020      	movs	r0, r4
 80064ca:	f00f fa49 	bl	8015960 <sprintf>
	BOS_Status result =BOS_OK;
 80064ce:	2300      	movs	r3, #0
	else if(result == BOS_ERR_WrongValue)
 80064d0:	2b68      	cmp	r3, #104	; 0x68
 80064d2:	d100      	bne.n	80064d6 <getCommand+0x62>
 80064d4:	e0d3      	b.n	800667e <getCommand+0x20a>
}
 80064d6:	2000      	movs	r0, #0
 80064d8:	b003      	add	sp, #12
 80064da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d106      	bne.n	80064ee <getCommand+0x7a>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80064e0:	4a70      	ldr	r2, [pc, #448]	; (80066a4 <getCommand+0x230>)
 80064e2:	496f      	ldr	r1, [pc, #444]	; (80066a0 <getCommand+0x22c>)
 80064e4:	0020      	movs	r0, r4
 80064e6:	f00f fa3b 	bl	8015960 <sprintf>
	BOS_Status result =BOS_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	e7f0      	b.n	80064d0 <getCommand+0x5c>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d000      	beq.n	80064f4 <getCommand+0x80>
 80064f2:	e0c0      	b.n	8006676 <getCommand+0x202>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80064f4:	4a6c      	ldr	r2, [pc, #432]	; (80066a8 <getCommand+0x234>)
 80064f6:	496a      	ldr	r1, [pc, #424]	; (80066a0 <getCommand+0x22c>)
 80064f8:	0020      	movs	r0, r4
 80064fa:	f00f fa31 	bl	8015960 <sprintf>
	BOS_Status result =BOS_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	e7e6      	b.n	80064d0 <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006502:	0032      	movs	r2, r6
 8006504:	4969      	ldr	r1, [pc, #420]	; (80066ac <getCommand+0x238>)
 8006506:	0028      	movs	r0, r5
 8006508:	f00f fa6e 	bl	80159e8 <strncmp>
 800650c:	2800      	cmp	r0, #0
 800650e:	d11d      	bne.n	800654c <getCommand+0xd8>
			if(BOSMessaging.trace == TRACE_BOTH)
 8006510:	4b61      	ldr	r3, [pc, #388]	; (8006698 <getCommand+0x224>)
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	2b03      	cmp	r3, #3
 8006516:	d106      	bne.n	8006526 <getCommand+0xb2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006518:	4a60      	ldr	r2, [pc, #384]	; (800669c <getCommand+0x228>)
 800651a:	4961      	ldr	r1, [pc, #388]	; (80066a0 <getCommand+0x22c>)
 800651c:	0020      	movs	r0, r4
 800651e:	f00f fa1f 	bl	8015960 <sprintf>
	BOS_Status result =BOS_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	e7d4      	b.n	80064d0 <getCommand+0x5c>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8006526:	2b01      	cmp	r3, #1
 8006528:	d106      	bne.n	8006538 <getCommand+0xc4>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800652a:	4a5e      	ldr	r2, [pc, #376]	; (80066a4 <getCommand+0x230>)
 800652c:	495c      	ldr	r1, [pc, #368]	; (80066a0 <getCommand+0x22c>)
 800652e:	0020      	movs	r0, r4
 8006530:	f00f fa16 	bl	8015960 <sprintf>
	BOS_Status result =BOS_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	e7cb      	b.n	80064d0 <getCommand+0x5c>
			else if(BOSMessaging.trace == TRACE_NONE)
 8006538:	2b00      	cmp	r3, #0
 800653a:	d000      	beq.n	800653e <getCommand+0xca>
 800653c:	e09d      	b.n	800667a <getCommand+0x206>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800653e:	4a5a      	ldr	r2, [pc, #360]	; (80066a8 <getCommand+0x234>)
 8006540:	4957      	ldr	r1, [pc, #348]	; (80066a0 <getCommand+0x22c>)
 8006542:	0020      	movs	r0, r4
 8006544:	f00f fa0c 	bl	8015960 <sprintf>
	BOS_Status result =BOS_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	e7c1      	b.n	80064d0 <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800654c:	0032      	movs	r2, r6
 800654e:	4958      	ldr	r1, [pc, #352]	; (80066b0 <getCommand+0x23c>)
 8006550:	0028      	movs	r0, r5
 8006552:	f00f fa49 	bl	80159e8 <strncmp>
 8006556:	2800      	cmp	r0, #0
 8006558:	d107      	bne.n	800656a <getCommand+0xf6>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 800655a:	4b56      	ldr	r3, [pc, #344]	; (80066b4 <getCommand+0x240>)
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	4956      	ldr	r1, [pc, #344]	; (80066b8 <getCommand+0x244>)
 8006560:	0020      	movs	r0, r4
 8006562:	f00f f9fd 	bl	8015960 <sprintf>
	BOS_Status result =BOS_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	e7b2      	b.n	80064d0 <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800656a:	0032      	movs	r2, r6
 800656c:	4953      	ldr	r1, [pc, #332]	; (80066bc <getCommand+0x248>)
 800656e:	0028      	movs	r0, r5
 8006570:	f00f fa3a 	bl	80159e8 <strncmp>
 8006574:	2800      	cmp	r0, #0
 8006576:	d107      	bne.n	8006588 <getCommand+0x114>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006578:	4b4e      	ldr	r3, [pc, #312]	; (80066b4 <getCommand+0x240>)
 800657a:	881a      	ldrh	r2, [r3, #0]
 800657c:	494e      	ldr	r1, [pc, #312]	; (80066b8 <getCommand+0x244>)
 800657e:	0020      	movs	r0, r4
 8006580:	f00f f9ee 	bl	8015960 <sprintf>
	BOS_Status result =BOS_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	e7a3      	b.n	80064d0 <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006588:	0032      	movs	r2, r6
 800658a:	494d      	ldr	r1, [pc, #308]	; (80066c0 <getCommand+0x24c>)
 800658c:	0028      	movs	r0, r5
 800658e:	f00f fa2b 	bl	80159e8 <strncmp>
 8006592:	2800      	cmp	r0, #0
 8006594:	d107      	bne.n	80065a6 <getCommand+0x132>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006596:	4b47      	ldr	r3, [pc, #284]	; (80066b4 <getCommand+0x240>)
 8006598:	885a      	ldrh	r2, [r3, #2]
 800659a:	4947      	ldr	r1, [pc, #284]	; (80066b8 <getCommand+0x244>)
 800659c:	0020      	movs	r0, r4
 800659e:	f00f f9df 	bl	8015960 <sprintf>
	BOS_Status result =BOS_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e794      	b.n	80064d0 <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80065a6:	0032      	movs	r2, r6
 80065a8:	4946      	ldr	r1, [pc, #280]	; (80066c4 <getCommand+0x250>)
 80065aa:	0028      	movs	r0, r5
 80065ac:	f00f fa1c 	bl	80159e8 <strncmp>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d107      	bne.n	80065c4 <getCommand+0x150>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 80065b4:	4b3f      	ldr	r3, [pc, #252]	; (80066b4 <getCommand+0x240>)
 80065b6:	791a      	ldrb	r2, [r3, #4]
 80065b8:	493f      	ldr	r1, [pc, #252]	; (80066b8 <getCommand+0x244>)
 80065ba:	0020      	movs	r0, r4
 80065bc:	f00f f9d0 	bl	8015960 <sprintf>
	BOS_Status result =BOS_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	e785      	b.n	80064d0 <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80065c4:	0032      	movs	r2, r6
 80065c6:	4940      	ldr	r1, [pc, #256]	; (80066c8 <getCommand+0x254>)
 80065c8:	0028      	movs	r0, r5
 80065ca:	f00f fa0d 	bl	80159e8 <strncmp>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d10e      	bne.n	80065f0 <getCommand+0x17c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 80065d2:	4b38      	ldr	r3, [pc, #224]	; (80066b4 <getCommand+0x240>)
 80065d4:	795a      	ldrb	r2, [r3, #5]
 80065d6:	4938      	ldr	r1, [pc, #224]	; (80066b8 <getCommand+0x244>)
 80065d8:	0020      	movs	r0, r4
 80065da:	f00f f9c1 	bl	8015960 <sprintf>
	BOS_Status result =BOS_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	e776      	b.n	80064d0 <getCommand+0x5c>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 80065e2:	2205      	movs	r2, #5
 80065e4:	4939      	ldr	r1, [pc, #228]	; (80066cc <getCommand+0x258>)
 80065e6:	0028      	movs	r0, r5
 80065e8:	f00f f9fe 	bl	80159e8 <strncmp>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d005      	beq.n	80065fc <getCommand+0x188>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80065f0:	2213      	movs	r2, #19
 80065f2:	4937      	ldr	r1, [pc, #220]	; (80066d0 <getCommand+0x25c>)
 80065f4:	0020      	movs	r0, r4
 80065f6:	f00e ffb0 	bl	801555a <memcpy>
 80065fa:	e76c      	b.n	80064d6 <getCommand+0x62>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065fc:	466a      	mov	r2, sp
 80065fe:	2102      	movs	r1, #2
 8006600:	0030      	movs	r0, r6
 8006602:	f009 fc9b 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8006606:	0007      	movs	r7, r0
		for(i =0; i < MaxNumOfGroups; i++){
 8006608:	2600      	movs	r6, #0
 800660a:	e00b      	b.n	8006624 <getCommand+0x1b0>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 800660c:	00b3      	lsls	r3, r6, #2
 800660e:	199b      	adds	r3, r3, r6
 8006610:	0059      	lsls	r1, r3, #1
 8006612:	4b30      	ldr	r3, [pc, #192]	; (80066d4 <getCommand+0x260>)
 8006614:	18c9      	adds	r1, r1, r3
 8006616:	0038      	movs	r0, r7
 8006618:	f7f9 fd74 	bl	8000104 <strcmp>
 800661c:	2800      	cmp	r0, #0
 800661e:	d00c      	beq.n	800663a <getCommand+0x1c6>
		for(i =0; i < MaxNumOfGroups; i++){
 8006620:	3601      	adds	r6, #1
 8006622:	b2f6      	uxtb	r6, r6
 8006624:	2e09      	cmp	r6, #9
 8006626:	d9f1      	bls.n	800660c <getCommand+0x198>
		temp8 =0;
 8006628:	2500      	movs	r5, #0
		if(!temp8){
 800662a:	2d00      	cmp	r5, #0
 800662c:	d107      	bne.n	800663e <getCommand+0x1ca>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 800662e:	003a      	movs	r2, r7
 8006630:	4929      	ldr	r1, [pc, #164]	; (80066d8 <getCommand+0x264>)
 8006632:	0020      	movs	r0, r4
 8006634:	f00f f994 	bl	8015960 <sprintf>
			return pdFALSE;
 8006638:	e74d      	b.n	80064d6 <getCommand+0x62>
				temp8 =1;
 800663a:	2501      	movs	r5, #1
 800663c:	e7f5      	b.n	800662a <getCommand+0x1b6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 800663e:	003a      	movs	r2, r7
 8006640:	4926      	ldr	r1, [pc, #152]	; (80066dc <getCommand+0x268>)
 8006642:	0020      	movs	r0, r4
 8006644:	f00f f98c 	bl	8015960 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 8006648:	e008      	b.n	800665c <getCommand+0x1e8>
				if(InGroup(j,i)){
 800664a:	1e6b      	subs	r3, r5, #1
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	4a24      	ldr	r2, [pc, #144]	; (80066e0 <getCommand+0x26c>)
 8006650:	5a9b      	ldrh	r3, [r3, r2]
 8006652:	4133      	asrs	r3, r6
 8006654:	07db      	lsls	r3, r3, #31
 8006656:	d407      	bmi.n	8006668 <getCommand+0x1f4>
			for(j =1; j <= N; j++)						// N modules
 8006658:	3501      	adds	r5, #1
 800665a:	b2ed      	uxtb	r5, r5
 800665c:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <getCommand+0x270>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	42ab      	cmp	r3, r5
 8006662:	d2f2      	bcs.n	800664a <getCommand+0x1d6>
	BOS_Status result =BOS_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	e733      	b.n	80064d0 <getCommand+0x5c>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006668:	002b      	movs	r3, r5
 800666a:	0022      	movs	r2, r4
 800666c:	491e      	ldr	r1, [pc, #120]	; (80066e8 <getCommand+0x274>)
 800666e:	0020      	movs	r0, r4
 8006670:	f00f f976 	bl	8015960 <sprintf>
 8006674:	e7f0      	b.n	8006658 <getCommand+0x1e4>
				result =BOS_ERR_WrongValue;
 8006676:	2368      	movs	r3, #104	; 0x68
 8006678:	e72a      	b.n	80064d0 <getCommand+0x5c>
				result =BOS_ERR_WrongValue;
 800667a:	2368      	movs	r3, #104	; 0x68
 800667c:	e728      	b.n	80064d0 <getCommand+0x5c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <getCommand+0x218>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	491a      	ldr	r1, [pc, #104]	; (80066ec <getCommand+0x278>)
 8006684:	0020      	movs	r0, r4
 8006686:	f00f f96b 	bl	8015960 <sprintf>
 800668a:	e724      	b.n	80064d6 <getCommand+0x62>
 800668c:	2000128c 	.word	0x2000128c
 8006690:	0801ad34 	.word	0x0801ad34
 8006694:	0801ad3c 	.word	0x0801ad3c
 8006698:	20006fcc 	.word	0x20006fcc
 800669c:	0801a13c 	.word	0x0801a13c
 80066a0:	08019f94 	.word	0x08019f94
 80066a4:	0801ad48 	.word	0x0801ad48
 80066a8:	0801ad4c 	.word	0x0801ad4c
 80066ac:	0801ad54 	.word	0x0801ad54
 80066b0:	0801ad5c 	.word	0x0801ad5c
 80066b4:	2000704c 	.word	0x2000704c
 80066b8:	0801a5ec 	.word	0x0801a5ec
 80066bc:	0801ad68 	.word	0x0801ad68
 80066c0:	0801ad74 	.word	0x0801ad74
 80066c4:	0801ad84 	.word	0x0801ad84
 80066c8:	0801ad98 	.word	0x0801ad98
 80066cc:	0801adac 	.word	0x0801adac
 80066d0:	0801adec 	.word	0x0801adec
 80066d4:	20000e58 	.word	0x20000e58
 80066d8:	0801adb4 	.word	0x0801adb4
 80066dc:	0801add0 	.word	0x0801add0
 80066e0:	20000ebc 	.word	0x20000ebc
 80066e4:	20000024 	.word	0x20000024
 80066e8:	0801ade4 	.word	0x0801ade4
 80066ec:	0801ae00 	.word	0x0801ae00

080066f0 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	0004      	movs	r4, r0
 80066f6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80066fc:	2c00      	cmp	r4, #0
 80066fe:	d101      	bne.n	8006704 <defaultCommand+0x14>
 8006700:	b672      	cpsid	i
 8006702:	e7fe      	b.n	8006702 <defaultCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006704:	aa01      	add	r2, sp, #4
 8006706:	2101      	movs	r1, #1
 8006708:	f009 fc18 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800670c:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800670e:	9e01      	ldr	r6, [sp, #4]
 8006710:	0032      	movs	r2, r6
 8006712:	491f      	ldr	r1, [pc, #124]	; (8006790 <defaultCommand+0xa0>)
 8006714:	f00f f968 	bl	80159e8 <strncmp>
 8006718:	2800      	cmp	r0, #0
 800671a:	d01e      	beq.n	800675a <defaultCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 800671c:	0032      	movs	r2, r6
 800671e:	491d      	ldr	r1, [pc, #116]	; (8006794 <defaultCommand+0xa4>)
 8006720:	0028      	movs	r0, r5
 8006722:	f00f f961 	bl	80159e8 <strncmp>
 8006726:	2800      	cmp	r0, #0
 8006728:	d12b      	bne.n	8006782 <defaultCommand+0x92>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 800672a:	2200      	movs	r2, #0
 800672c:	2116      	movs	r1, #22
 800672e:	20ff      	movs	r0, #255	; 0xff
 8006730:	f003 fa70 	bl	8009c14 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006734:	4b18      	ldr	r3, [pc, #96]	; (8006798 <defaultCommand+0xa8>)
 8006736:	2202      	movs	r2, #2
 8006738:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 800673a:	2064      	movs	r0, #100	; 0x64
 800673c:	f009 fad8 	bl	800fcf0 <osDelay>
		ClearEEportsDir();
 8006740:	f7fd fa20 	bl	8003b84 <ClearEEportsDir>
		ClearROtopology();
 8006744:	f005 fcfc 	bl	800c140 <ClearROtopology>
		osDelay(100);
 8006748:	2064      	movs	r0, #100	; 0x64
 800674a:	f009 fad1 	bl	800fcf0 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 800674e:	2240      	movs	r2, #64	; 0x40
 8006750:	4912      	ldr	r1, [pc, #72]	; (800679c <defaultCommand+0xac>)
 8006752:	0020      	movs	r0, r4
 8006754:	f00e ff01 	bl	801555a <memcpy>
 8006758:	e010      	b.n	800677c <defaultCommand+0x8c>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800675a:	4911      	ldr	r1, [pc, #68]	; (80067a0 <defaultCommand+0xb0>)
 800675c:	4811      	ldr	r0, [pc, #68]	; (80067a4 <defaultCommand+0xb4>)
 800675e:	000b      	movs	r3, r1
 8006760:	0002      	movs	r2, r0
 8006762:	ca23      	ldmia	r2!, {r0, r1, r5}
 8006764:	c323      	stmia	r3!, {r0, r1, r5}
 8006766:	ca23      	ldmia	r2!, {r0, r1, r5}
 8006768:	c323      	stmia	r3!, {r0, r1, r5}
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	601a      	str	r2, [r3, #0]
		SaveEEparams();
 800676e:	f7fd f9c5 	bl	8003afc <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006772:	2227      	movs	r2, #39	; 0x27
 8006774:	490c      	ldr	r1, [pc, #48]	; (80067a8 <defaultCommand+0xb8>)
 8006776:	0020      	movs	r0, r4
 8006778:	f00e feef 	bl	801555a <memcpy>
}
 800677c:	2000      	movs	r0, #0
 800677e:	b002      	add	sp, #8
 8006780:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006782:	220f      	movs	r2, #15
 8006784:	4909      	ldr	r1, [pc, #36]	; (80067ac <defaultCommand+0xbc>)
 8006786:	0020      	movs	r0, r4
 8006788:	f00e fee7 	bl	801555a <memcpy>
 800678c:	e7f6      	b.n	800677c <defaultCommand+0x8c>
 800678e:	46c0      	nop			; (mov r8, r8)
 8006790:	0801abf0 	.word	0x0801abf0
 8006794:	0801ac20 	.word	0x0801ac20
 8006798:	20000ef0 	.word	0x20000ef0
 800679c:	0801ac38 	.word	0x0801ac38
 80067a0:	2000704c 	.word	0x2000704c
 80067a4:	20000008 	.word	0x20000008
 80067a8:	0801abf8 	.word	0x0801abf8
 80067ac:	0801ac28 	.word	0x0801ac28

080067b0 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80067b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067b2:	46ce      	mov	lr, r9
 80067b4:	4647      	mov	r7, r8
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b08f      	sub	sp, #60	; 0x3c
 80067ba:	9007      	str	r0, [sp, #28]
 80067bc:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80067be:	2300      	movs	r3, #0
 80067c0:	930d      	str	r3, [sp, #52]	; 0x34
 80067c2:	930c      	str	r3, [sp, #48]	; 0x30
 80067c4:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80067c6:	930a      	str	r3, [sp, #40]	; 0x28
 80067c8:	9309      	str	r3, [sp, #36]	; 0x24
	configASSERT(pcWriteBuffer);
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d101      	bne.n	80067d2 <setCommand+0x22>
 80067ce:	b672      	cpsid	i
 80067d0:	e7fe      	b.n	80067d0 <setCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80067d2:	aa0d      	add	r2, sp, #52	; 0x34
 80067d4:	2101      	movs	r1, #1
 80067d6:	0020      	movs	r0, r4
 80067d8:	f009 fbb0 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 80067dc:	0005      	movs	r5, r0
 80067de:	4bba      	ldr	r3, [pc, #744]	; (8006ac8 <setCommand+0x318>)
 80067e0:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80067e2:	2204      	movs	r2, #4
 80067e4:	49b9      	ldr	r1, [pc, #740]	; (8006acc <setCommand+0x31c>)
 80067e6:	f00f f8ff 	bl	80159e8 <strncmp>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d01c      	beq.n	8006828 <setCommand+0x78>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80067ee:	2204      	movs	r2, #4
 80067f0:	49b7      	ldr	r1, [pc, #732]	; (8006ad0 <setCommand+0x320>)
 80067f2:	0028      	movs	r0, r5
 80067f4:	f00f f8f8 	bl	80159e8 <strncmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d100      	bne.n	80067fe <setCommand+0x4e>
 80067fc:	e18e      	b.n	8006b1c <setCommand+0x36c>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 80067fe:	2204      	movs	r2, #4
 8006800:	49b4      	ldr	r1, [pc, #720]	; (8006ad4 <setCommand+0x324>)
 8006802:	0028      	movs	r0, r5
 8006804:	f00f f8f0 	bl	80159e8 <strncmp>
 8006808:	2800      	cmp	r0, #0
 800680a:	d100      	bne.n	800680e <setCommand+0x5e>
 800680c:	e1e4      	b.n	8006bd8 <setCommand+0x428>
		result =BOS_ERR_WrongParam;
 800680e:	2467      	movs	r4, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8006810:	2c67      	cmp	r4, #103	; 0x67
 8006812:	d100      	bne.n	8006816 <setCommand+0x66>
 8006814:	e3dc      	b.n	8006fd0 <setCommand+0x820>
	else if(result == BOS_ERR_WrongValue)
 8006816:	2c68      	cmp	r4, #104	; 0x68
 8006818:	d100      	bne.n	800681c <setCommand+0x6c>
 800681a:	e3df      	b.n	8006fdc <setCommand+0x82c>
}
 800681c:	2000      	movs	r0, #0
 800681e:	b00f      	add	sp, #60	; 0x3c
 8006820:	bc0c      	pop	{r2, r3}
 8006822:	4690      	mov	r8, r2
 8006824:	4699      	mov	r9, r3
 8006826:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006828:	aa0c      	add	r2, sp, #48	; 0x30
 800682a:	2102      	movs	r1, #2
 800682c:	0020      	movs	r0, r4
 800682e:	f009 fb85 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8006832:	0004      	movs	r4, r0
 8006834:	4ba8      	ldr	r3, [pc, #672]	; (8006ad8 <setCommand+0x328>)
 8006836:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006838:	4ba3      	ldr	r3, [pc, #652]	; (8006ac8 <setCommand+0x318>)
 800683a:	681d      	ldr	r5, [r3, #0]
 800683c:	3504      	adds	r5, #4
 800683e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006840:	1f1f      	subs	r7, r3, #4
 8006842:	003a      	movs	r2, r7
 8006844:	49a5      	ldr	r1, [pc, #660]	; (8006adc <setCommand+0x32c>)
 8006846:	0028      	movs	r0, r5
 8006848:	f00f f8ce 	bl	80159e8 <strncmp>
 800684c:	2800      	cmp	r0, #0
 800684e:	d162      	bne.n	8006916 <setCommand+0x166>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006850:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006852:	002a      	movs	r2, r5
 8006854:	49a2      	ldr	r1, [pc, #648]	; (8006ae0 <setCommand+0x330>)
 8006856:	0020      	movs	r0, r4
 8006858:	f00f f8c6 	bl	80159e8 <strncmp>
 800685c:	2800      	cmp	r0, #0
 800685e:	d122      	bne.n	80068a6 <setCommand+0xf6>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006860:	4ba0      	ldr	r3, [pc, #640]	; (8006ae4 <setCommand+0x334>)
 8006862:	2160      	movs	r1, #96	; 0x60
 8006864:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	4319      	orrs	r1, r3
 800686c:	308a      	adds	r0, #138	; 0x8a
 800686e:	0040      	lsls	r0, r0, #1
 8006870:	f001 faae 	bl	8007dd0 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006874:	2400      	movs	r4, #0
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006876:	4b94      	ldr	r3, [pc, #592]	; (8006ac8 <setCommand+0x318>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800687c:	18d3      	adds	r3, r2, r3
 800687e:	2100      	movs	r1, #0
 8006880:	7019      	strb	r1, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006882:	4b95      	ldr	r3, [pc, #596]	; (8006ad8 <setCommand+0x328>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4998      	ldr	r1, [pc, #608]	; (8006ae8 <setCommand+0x338>)
 8006888:	9807      	ldr	r0, [sp, #28]
 800688a:	f00f f869 	bl	8015960 <sprintf>
		if(extraMessage == 1){
 800688e:	2c01      	cmp	r4, #1
 8006890:	d1c4      	bne.n	800681c <setCommand+0x6c>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006892:	4996      	ldr	r1, [pc, #600]	; (8006aec <setCommand+0x33c>)
 8006894:	9c07      	ldr	r4, [sp, #28]
 8006896:	0020      	movs	r0, r4
 8006898:	f00f f882 	bl	80159a0 <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 800689c:	4994      	ldr	r1, [pc, #592]	; (8006af0 <setCommand+0x340>)
 800689e:	0020      	movs	r0, r4
 80068a0:	f00f f87e 	bl	80159a0 <strcat>
 80068a4:	e7ba      	b.n	800681c <setCommand+0x6c>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80068a6:	002a      	movs	r2, r5
 80068a8:	4992      	ldr	r1, [pc, #584]	; (8006af4 <setCommand+0x344>)
 80068aa:	0020      	movs	r0, r4
 80068ac:	f00f f89c 	bl	80159e8 <strncmp>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d10b      	bne.n	80068cc <setCommand+0x11c>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80068b4:	4b8b      	ldr	r3, [pc, #556]	; (8006ae4 <setCommand+0x334>)
 80068b6:	2120      	movs	r1, #32
 80068b8:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	4319      	orrs	r1, r3
 80068c0:	308a      	adds	r0, #138	; 0x8a
 80068c2:	0040      	lsls	r0, r0, #1
 80068c4:	f001 fa84 	bl	8007dd0 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80068c8:	2400      	movs	r4, #0
 80068ca:	e7d4      	b.n	8006876 <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 80068cc:	002a      	movs	r2, r5
 80068ce:	498a      	ldr	r1, [pc, #552]	; (8006af8 <setCommand+0x348>)
 80068d0:	0020      	movs	r0, r4
 80068d2:	f00f f889 	bl	80159e8 <strncmp>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d10b      	bne.n	80068f2 <setCommand+0x142>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80068da:	4b82      	ldr	r3, [pc, #520]	; (8006ae4 <setCommand+0x334>)
 80068dc:	2140      	movs	r1, #64	; 0x40
 80068de:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	021b      	lsls	r3, r3, #8
 80068e4:	4319      	orrs	r1, r3
 80068e6:	308a      	adds	r0, #138	; 0x8a
 80068e8:	0040      	lsls	r0, r0, #1
 80068ea:	f001 fa71 	bl	8007dd0 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80068ee:	2400      	movs	r4, #0
 80068f0:	e7c1      	b.n	8006876 <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80068f2:	002a      	movs	r2, r5
 80068f4:	4981      	ldr	r1, [pc, #516]	; (8006afc <setCommand+0x34c>)
 80068f6:	0020      	movs	r0, r4
 80068f8:	f00f f876 	bl	80159e8 <strncmp>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d000      	beq.n	8006902 <setCommand+0x152>
 8006900:	e34a      	b.n	8006f98 <setCommand+0x7e8>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006902:	4b78      	ldr	r3, [pc, #480]	; (8006ae4 <setCommand+0x334>)
 8006904:	2400      	movs	r4, #0
 8006906:	701c      	strb	r4, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006908:	7859      	ldrb	r1, [r3, #1]
 800690a:	0209      	lsls	r1, r1, #8
 800690c:	308a      	adds	r0, #138	; 0x8a
 800690e:	0040      	lsls	r0, r0, #1
 8006910:	f001 fa5e 	bl	8007dd0 <EE_WriteVariable>
 8006914:	e7af      	b.n	8006876 <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006916:	003a      	movs	r2, r7
 8006918:	4979      	ldr	r1, [pc, #484]	; (8006b00 <setCommand+0x350>)
 800691a:	0028      	movs	r0, r5
 800691c:	f00f f864 	bl	80159e8 <strncmp>
 8006920:	2800      	cmp	r0, #0
 8006922:	d14d      	bne.n	80069c0 <setCommand+0x210>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006924:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006926:	002a      	movs	r2, r5
 8006928:	496d      	ldr	r1, [pc, #436]	; (8006ae0 <setCommand+0x330>)
 800692a:	0020      	movs	r0, r4
 800692c:	f00f f85c 	bl	80159e8 <strncmp>
 8006930:	2800      	cmp	r0, #0
 8006932:	d10c      	bne.n	800694e <setCommand+0x19e>
				BOSMessaging.trace =TRACE_BOTH;
 8006934:	4b6b      	ldr	r3, [pc, #428]	; (8006ae4 <setCommand+0x334>)
 8006936:	2203      	movs	r2, #3
 8006938:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	21c0      	movs	r1, #192	; 0xc0
 800693e:	0089      	lsls	r1, r1, #2
 8006940:	4319      	orrs	r1, r3
 8006942:	308a      	adds	r0, #138	; 0x8a
 8006944:	0040      	lsls	r0, r0, #1
 8006946:	f001 fa43 	bl	8007dd0 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800694a:	2400      	movs	r4, #0
 800694c:	e793      	b.n	8006876 <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800694e:	002a      	movs	r2, r5
 8006950:	4968      	ldr	r1, [pc, #416]	; (8006af4 <setCommand+0x344>)
 8006952:	0020      	movs	r0, r4
 8006954:	f00f f848 	bl	80159e8 <strncmp>
 8006958:	2800      	cmp	r0, #0
 800695a:	d10c      	bne.n	8006976 <setCommand+0x1c6>
				BOSMessaging.trace =TRACE_MESSAGE;
 800695c:	4b61      	ldr	r3, [pc, #388]	; (8006ae4 <setCommand+0x334>)
 800695e:	2201      	movs	r2, #1
 8006960:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2180      	movs	r1, #128	; 0x80
 8006966:	0049      	lsls	r1, r1, #1
 8006968:	4319      	orrs	r1, r3
 800696a:	308a      	adds	r0, #138	; 0x8a
 800696c:	4090      	lsls	r0, r2
 800696e:	f001 fa2f 	bl	8007dd0 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006972:	2400      	movs	r4, #0
 8006974:	e77f      	b.n	8006876 <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006976:	002a      	movs	r2, r5
 8006978:	4958      	ldr	r1, [pc, #352]	; (8006adc <setCommand+0x32c>)
 800697a:	0020      	movs	r0, r4
 800697c:	f00f f834 	bl	80159e8 <strncmp>
 8006980:	2800      	cmp	r0, #0
 8006982:	d10c      	bne.n	800699e <setCommand+0x1ee>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006984:	4b57      	ldr	r3, [pc, #348]	; (8006ae4 <setCommand+0x334>)
 8006986:	2202      	movs	r2, #2
 8006988:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2180      	movs	r1, #128	; 0x80
 800698e:	0089      	lsls	r1, r1, #2
 8006990:	4319      	orrs	r1, r3
 8006992:	308a      	adds	r0, #138	; 0x8a
 8006994:	0040      	lsls	r0, r0, #1
 8006996:	f001 fa1b 	bl	8007dd0 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800699a:	2400      	movs	r4, #0
 800699c:	e76b      	b.n	8006876 <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 800699e:	002a      	movs	r2, r5
 80069a0:	4956      	ldr	r1, [pc, #344]	; (8006afc <setCommand+0x34c>)
 80069a2:	0020      	movs	r0, r4
 80069a4:	f00f f820 	bl	80159e8 <strncmp>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d000      	beq.n	80069ae <setCommand+0x1fe>
 80069ac:	e2f6      	b.n	8006f9c <setCommand+0x7ec>
				BOSMessaging.trace =TRACE_NONE;
 80069ae:	4b4d      	ldr	r3, [pc, #308]	; (8006ae4 <setCommand+0x334>)
 80069b0:	2400      	movs	r4, #0
 80069b2:	705c      	strb	r4, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80069b4:	7819      	ldrb	r1, [r3, #0]
 80069b6:	308a      	adds	r0, #138	; 0x8a
 80069b8:	0040      	lsls	r0, r0, #1
 80069ba:	f001 fa09 	bl	8007dd0 <EE_WriteVariable>
 80069be:	e75a      	b.n	8006876 <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80069c0:	003a      	movs	r2, r7
 80069c2:	4950      	ldr	r1, [pc, #320]	; (8006b04 <setCommand+0x354>)
 80069c4:	0028      	movs	r0, r5
 80069c6:	f00f f80f 	bl	80159e8 <strncmp>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d116      	bne.n	80069fc <setCommand+0x24c>
			temp2 =atoi((const char* )pcParameterString2);
 80069ce:	0020      	movs	r0, r4
 80069d0:	f00e fb33 	bl	801503a <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 80069d4:	23e1      	movs	r3, #225	; 0xe1
 80069d6:	031b      	lsls	r3, r3, #12
 80069d8:	4298      	cmp	r0, r3
 80069da:	d900      	bls.n	80069de <setCommand+0x22e>
 80069dc:	e2e0      	b.n	8006fa0 <setCommand+0x7f0>
				BOS.clibaudrate =temp2;
 80069de:	4c4a      	ldr	r4, [pc, #296]	; (8006b08 <setCommand+0x358>)
 80069e0:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80069e2:	b281      	uxth	r1, r0
 80069e4:	208c      	movs	r0, #140	; 0x8c
 80069e6:	0040      	lsls	r0, r0, #1
 80069e8:	f001 f9f2 	bl	8007dd0 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80069ec:	68a1      	ldr	r1, [r4, #8]
 80069ee:	0c09      	lsrs	r1, r1, #16
 80069f0:	201a      	movs	r0, #26
 80069f2:	30ff      	adds	r0, #255	; 0xff
 80069f4:	f001 f9ec 	bl	8007dd0 <EE_WriteVariable>
				extraMessage =1;
 80069f8:	2401      	movs	r4, #1
 80069fa:	e73c      	b.n	8006876 <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80069fc:	003a      	movs	r2, r7
 80069fe:	4943      	ldr	r1, [pc, #268]	; (8006b0c <setCommand+0x35c>)
 8006a00:	0028      	movs	r0, r5
 8006a02:	f00e fff1 	bl	80159e8 <strncmp>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d10e      	bne.n	8006a28 <setCommand+0x278>
			temp16 =atoi((const char* )pcParameterString2);
 8006a0a:	0020      	movs	r0, r4
 8006a0c:	f00e fb15 	bl	801503a <atoi>
 8006a10:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006a12:	2900      	cmp	r1, #0
 8006a14:	d100      	bne.n	8006a18 <setCommand+0x268>
 8006a16:	e2c5      	b.n	8006fa4 <setCommand+0x7f4>
				BOS.buttons.debounce =temp16;
 8006a18:	4b3b      	ldr	r3, [pc, #236]	; (8006b08 <setCommand+0x358>)
 8006a1a:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a1c:	2016      	movs	r0, #22
 8006a1e:	30ff      	adds	r0, #255	; 0xff
 8006a20:	f001 f9d6 	bl	8007dd0 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006a24:	2400      	movs	r4, #0
 8006a26:	e726      	b.n	8006876 <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006a28:	003a      	movs	r2, r7
 8006a2a:	4939      	ldr	r1, [pc, #228]	; (8006b10 <setCommand+0x360>)
 8006a2c:	0028      	movs	r0, r5
 8006a2e:	f00e ffdb 	bl	80159e8 <strncmp>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d10e      	bne.n	8006a54 <setCommand+0x2a4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a36:	0020      	movs	r0, r4
 8006a38:	f00e faff 	bl	801503a <atoi>
 8006a3c:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006a3e:	2900      	cmp	r1, #0
 8006a40:	d100      	bne.n	8006a44 <setCommand+0x294>
 8006a42:	e2b1      	b.n	8006fa8 <setCommand+0x7f8>
				BOS.buttons.singleClickTime =temp16;
 8006a44:	4b30      	ldr	r3, [pc, #192]	; (8006b08 <setCommand+0x358>)
 8006a46:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a48:	208b      	movs	r0, #139	; 0x8b
 8006a4a:	0040      	lsls	r0, r0, #1
 8006a4c:	f001 f9c0 	bl	8007dd0 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006a50:	2400      	movs	r4, #0
 8006a52:	e710      	b.n	8006876 <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006a54:	003a      	movs	r2, r7
 8006a56:	492f      	ldr	r1, [pc, #188]	; (8006b14 <setCommand+0x364>)
 8006a58:	0028      	movs	r0, r5
 8006a5a:	f00e ffc5 	bl	80159e8 <strncmp>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d114      	bne.n	8006a8c <setCommand+0x2dc>
			temp16 =atoi((const char* )pcParameterString2);
 8006a62:	0020      	movs	r0, r4
 8006a64:	f00e fae9 	bl	801503a <atoi>
 8006a68:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2bfe      	cmp	r3, #254	; 0xfe
 8006a70:	d900      	bls.n	8006a74 <setCommand+0x2c4>
 8006a72:	e29b      	b.n	8006fac <setCommand+0x7fc>
				BOS.buttons.minInterClickTime =temp16;
 8006a74:	b2c0      	uxtb	r0, r0
 8006a76:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <setCommand+0x358>)
 8006a78:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a7a:	7959      	ldrb	r1, [r3, #5]
 8006a7c:	0209      	lsls	r1, r1, #8
 8006a7e:	4301      	orrs	r1, r0
 8006a80:	2018      	movs	r0, #24
 8006a82:	30ff      	adds	r0, #255	; 0xff
 8006a84:	f001 f9a4 	bl	8007dd0 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006a88:	2400      	movs	r4, #0
 8006a8a:	e6f4      	b.n	8006876 <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006a8c:	003a      	movs	r2, r7
 8006a8e:	4922      	ldr	r1, [pc, #136]	; (8006b18 <setCommand+0x368>)
 8006a90:	0028      	movs	r0, r5
 8006a92:	f00e ffa9 	bl	80159e8 <strncmp>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d000      	beq.n	8006a9c <setCommand+0x2ec>
 8006a9a:	e289      	b.n	8006fb0 <setCommand+0x800>
			temp16 =atoi((const char* )pcParameterString2);
 8006a9c:	0020      	movs	r0, r4
 8006a9e:	f00e facc 	bl	801503a <atoi>
 8006aa2:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2bfe      	cmp	r3, #254	; 0xfe
 8006aaa:	d900      	bls.n	8006aae <setCommand+0x2fe>
 8006aac:	e282      	b.n	8006fb4 <setCommand+0x804>
				BOS.buttons.maxInterClickTime =temp16;
 8006aae:	b2c0      	uxtb	r0, r0
 8006ab0:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <setCommand+0x358>)
 8006ab2:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006ab4:	0200      	lsls	r0, r0, #8
 8006ab6:	7919      	ldrb	r1, [r3, #4]
 8006ab8:	4301      	orrs	r1, r0
 8006aba:	2018      	movs	r0, #24
 8006abc:	30ff      	adds	r0, #255	; 0xff
 8006abe:	f001 f987 	bl	8007dd0 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006ac2:	2400      	movs	r4, #0
 8006ac4:	e6d7      	b.n	8006876 <setCommand+0xc6>
 8006ac6:	46c0      	nop			; (mov r8, r8)
 8006ac8:	20001288 	.word	0x20001288
 8006acc:	0801ad34 	.word	0x0801ad34
 8006ad0:	0801b368 	.word	0x0801b368
 8006ad4:	0801b374 	.word	0x0801b374
 8006ad8:	20001294 	.word	0x20001294
 8006adc:	0801ad3c 	.word	0x0801ad3c
 8006ae0:	0801a13c 	.word	0x0801a13c
 8006ae4:	20006fcc 	.word	0x20006fcc
 8006ae8:	0801b45c 	.word	0x0801b45c
 8006aec:	0801b470 	.word	0x0801b470
 8006af0:	0801b4a0 	.word	0x0801b4a0
 8006af4:	0801b35c 	.word	0x0801b35c
 8006af8:	0801b364 	.word	0x0801b364
 8006afc:	0801ad4c 	.word	0x0801ad4c
 8006b00:	0801ad54 	.word	0x0801ad54
 8006b04:	0801ad5c 	.word	0x0801ad5c
 8006b08:	2000704c 	.word	0x2000704c
 8006b0c:	0801ad68 	.word	0x0801ad68
 8006b10:	0801ad74 	.word	0x0801ad74
 8006b14:	0801ad84 	.word	0x0801ad84
 8006b18:	0801ad98 	.word	0x0801ad98
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006b1c:	aa0c      	add	r2, sp, #48	; 0x30
 8006b1e:	2102      	movs	r1, #2
 8006b20:	0020      	movs	r0, r4
 8006b22:	f009 fa0b 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8006b26:	4edf      	ldr	r6, [pc, #892]	; (8006ea4 <setCommand+0x6f4>)
 8006b28:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006b2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b2c:	2103      	movs	r1, #3
 8006b2e:	0020      	movs	r0, r4
 8006b30:	f009 fa04 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8006b34:	4fdc      	ldr	r7, [pc, #880]	; (8006ea8 <setCommand+0x6f8>)
 8006b36:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006b38:	aa0a      	add	r2, sp, #40	; 0x28
 8006b3a:	2104      	movs	r1, #4
 8006b3c:	0020      	movs	r0, r4
 8006b3e:	f009 f9fd 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8006b42:	4dda      	ldr	r5, [pc, #872]	; (8006eac <setCommand+0x6fc>)
 8006b44:	6028      	str	r0, [r5, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006b46:	aa09      	add	r2, sp, #36	; 0x24
 8006b48:	2105      	movs	r1, #5
 8006b4a:	0020      	movs	r0, r4
 8006b4c:	f009 f9f6 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8006b50:	4cd7      	ldr	r4, [pc, #860]	; (8006eb0 <setCommand+0x700>)
 8006b52:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006b54:	6830      	ldr	r0, [r6, #0]
 8006b56:	f00e fa70 	bl	801503a <atoi>
 8006b5a:	b2c6      	uxtb	r6, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006b5c:	6838      	ldr	r0, [r7, #0]
 8006b5e:	f00e fa6c 	bl	801503a <atoi>
 8006b62:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006b64:	6828      	ldr	r0, [r5, #0]
 8006b66:	f00e fa68 	bl	801503a <atoi>
 8006b6a:	b2c5      	uxtb	r5, r0
		if(pcParameterString5 != NULL){
 8006b6c:	6824      	ldr	r4, [r4, #0]
 8006b6e:	2c00      	cmp	r4, #0
 8006b70:	d010      	beq.n	8006b94 <setCommand+0x3e4>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006b72:	2202      	movs	r2, #2
 8006b74:	49cf      	ldr	r1, [pc, #828]	; (8006eb4 <setCommand+0x704>)
 8006b76:	0020      	movs	r0, r4
 8006b78:	f00e ff36 	bl	80159e8 <strncmp>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d028      	beq.n	8006bd2 <setCommand+0x422>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006b80:	2202      	movs	r2, #2
 8006b82:	49cd      	ldr	r1, [pc, #820]	; (8006eb8 <setCommand+0x708>)
 8006b84:	0020      	movs	r0, r4
 8006b86:	f00e ff2f 	bl	80159e8 <strncmp>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d000      	beq.n	8006b90 <setCommand+0x3e0>
 8006b8e:	e1ff      	b.n	8006f90 <setCommand+0x7e0>
				temp84 =RTC_PM;
 8006b90:	2302      	movs	r3, #2
 8006b92:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006b94:	2e17      	cmp	r6, #23
 8006b96:	d900      	bls.n	8006b9a <setCommand+0x3ea>
 8006b98:	e20e      	b.n	8006fb8 <setCommand+0x808>
 8006b9a:	2f3b      	cmp	r7, #59	; 0x3b
 8006b9c:	d900      	bls.n	8006ba0 <setCommand+0x3f0>
 8006b9e:	e20d      	b.n	8006fbc <setCommand+0x80c>
 8006ba0:	2d3b      	cmp	r5, #59	; 0x3b
 8006ba2:	d900      	bls.n	8006ba6 <setCommand+0x3f6>
 8006ba4:	e20c      	b.n	8006fc0 <setCommand+0x810>
				GetTimeDate();
 8006ba6:	f008 fd15 	bl	800f5d4 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006baa:	4cc4      	ldr	r4, [pc, #784]	; (8006ebc <setCommand+0x70c>)
 8006bac:	7da0      	ldrb	r0, [r4, #22]
 8006bae:	7d61      	ldrb	r1, [r4, #21]
 8006bb0:	8b22      	ldrh	r2, [r4, #24]
 8006bb2:	7d23      	ldrb	r3, [r4, #20]
 8006bb4:	7b24      	ldrb	r4, [r4, #12]
 8006bb6:	b264      	sxtb	r4, r4
 8006bb8:	9404      	str	r4, [sp, #16]
 8006bba:	4644      	mov	r4, r8
 8006bbc:	9403      	str	r4, [sp, #12]
 8006bbe:	9602      	str	r6, [sp, #8]
 8006bc0:	9701      	str	r7, [sp, #4]
 8006bc2:	9500      	str	r5, [sp, #0]
 8006bc4:	f008 fcac 	bl	800f520 <BOS_CalendarConfig>
 8006bc8:	0004      	movs	r4, r0
	if(result == BOS_OK){
 8006bca:	2c00      	cmp	r4, #0
 8006bcc:	d000      	beq.n	8006bd0 <setCommand+0x420>
 8006bce:	e61f      	b.n	8006810 <setCommand+0x60>
 8006bd0:	e651      	b.n	8006876 <setCommand+0xc6>
				temp84 =RTC_AM;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4698      	mov	r8, r3
 8006bd6:	e7dd      	b.n	8006b94 <setCommand+0x3e4>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006bd8:	aa0c      	add	r2, sp, #48	; 0x30
 8006bda:	2102      	movs	r1, #2
 8006bdc:	0020      	movs	r0, r4
 8006bde:	f009 f9ad 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8006be2:	4db0      	ldr	r5, [pc, #704]	; (8006ea4 <setCommand+0x6f4>)
 8006be4:	6028      	str	r0, [r5, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006be6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006be8:	2103      	movs	r1, #3
 8006bea:	0020      	movs	r0, r4
 8006bec:	f009 f9a6 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8006bf0:	4bad      	ldr	r3, [pc, #692]	; (8006ea8 <setCommand+0x6f8>)
 8006bf2:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006bf4:	aa0a      	add	r2, sp, #40	; 0x28
 8006bf6:	2104      	movs	r1, #4
 8006bf8:	0020      	movs	r0, r4
 8006bfa:	f009 f99f 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8006bfe:	4eab      	ldr	r6, [pc, #684]	; (8006eac <setCommand+0x6fc>)
 8006c00:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006c02:	aa09      	add	r2, sp, #36	; 0x24
 8006c04:	2105      	movs	r1, #5
 8006c06:	0020      	movs	r0, r4
 8006c08:	f009 f998 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8006c0c:	4ca8      	ldr	r4, [pc, #672]	; (8006eb0 <setCommand+0x700>)
 8006c0e:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006c10:	6830      	ldr	r0, [r6, #0]
 8006c12:	f00e fa12 	bl	801503a <atoi>
 8006c16:	b2c3      	uxtb	r3, r0
 8006c18:	4699      	mov	r9, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006c1a:	6820      	ldr	r0, [r4, #0]
 8006c1c:	f00e fa0d 	bl	801503a <atoi>
 8006c20:	b286      	uxth	r6, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006c22:	682c      	ldr	r4, [r5, #0]
 8006c24:	2206      	movs	r2, #6
 8006c26:	49a6      	ldr	r1, [pc, #664]	; (8006ec0 <setCommand+0x710>)
 8006c28:	0020      	movs	r0, r4
 8006c2a:	f00e fedd 	bl	80159e8 <strncmp>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d100      	bne.n	8006c34 <setCommand+0x484>
 8006c32:	e11b      	b.n	8006e6c <setCommand+0x6bc>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006c34:	2207      	movs	r2, #7
 8006c36:	49a3      	ldr	r1, [pc, #652]	; (8006ec4 <setCommand+0x714>)
 8006c38:	0020      	movs	r0, r4
 8006c3a:	f00e fed5 	bl	80159e8 <strncmp>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d100      	bne.n	8006c44 <setCommand+0x494>
 8006c42:	e116      	b.n	8006e72 <setCommand+0x6c2>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006c44:	2209      	movs	r2, #9
 8006c46:	49a0      	ldr	r1, [pc, #640]	; (8006ec8 <setCommand+0x718>)
 8006c48:	0020      	movs	r0, r4
 8006c4a:	f00e fecd 	bl	80159e8 <strncmp>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d100      	bne.n	8006c54 <setCommand+0x4a4>
 8006c52:	e111      	b.n	8006e78 <setCommand+0x6c8>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006c54:	2208      	movs	r2, #8
 8006c56:	499d      	ldr	r1, [pc, #628]	; (8006ecc <setCommand+0x71c>)
 8006c58:	0020      	movs	r0, r4
 8006c5a:	f00e fec5 	bl	80159e8 <strncmp>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d100      	bne.n	8006c64 <setCommand+0x4b4>
 8006c62:	e10c      	b.n	8006e7e <setCommand+0x6ce>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006c64:	2206      	movs	r2, #6
 8006c66:	499a      	ldr	r1, [pc, #616]	; (8006ed0 <setCommand+0x720>)
 8006c68:	0020      	movs	r0, r4
 8006c6a:	f00e febd 	bl	80159e8 <strncmp>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d100      	bne.n	8006c74 <setCommand+0x4c4>
 8006c72:	e107      	b.n	8006e84 <setCommand+0x6d4>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006c74:	2208      	movs	r2, #8
 8006c76:	4997      	ldr	r1, [pc, #604]	; (8006ed4 <setCommand+0x724>)
 8006c78:	0020      	movs	r0, r4
 8006c7a:	f00e feb5 	bl	80159e8 <strncmp>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d100      	bne.n	8006c84 <setCommand+0x4d4>
 8006c82:	e102      	b.n	8006e8a <setCommand+0x6da>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006c84:	2206      	movs	r2, #6
 8006c86:	4994      	ldr	r1, [pc, #592]	; (8006ed8 <setCommand+0x728>)
 8006c88:	0020      	movs	r0, r4
 8006c8a:	f00e fead 	bl	80159e8 <strncmp>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d000      	beq.n	8006c94 <setCommand+0x4e4>
 8006c92:	e0fd      	b.n	8006e90 <setCommand+0x6e0>
			temp81 =SUNDAY;
 8006c94:	2707      	movs	r7, #7
	BOS_Status result =BOS_OK;
 8006c96:	2400      	movs	r4, #0
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006c98:	4b83      	ldr	r3, [pc, #524]	; (8006ea8 <setCommand+0x6f8>)
 8006c9a:	681d      	ldr	r5, [r3, #0]
 8006c9c:	2207      	movs	r2, #7
 8006c9e:	498f      	ldr	r1, [pc, #572]	; (8006edc <setCommand+0x72c>)
 8006ca0:	0028      	movs	r0, r5
 8006ca2:	f00e fea1 	bl	80159e8 <strncmp>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d100      	bne.n	8006cac <setCommand+0x4fc>
 8006caa:	e0f3      	b.n	8006e94 <setCommand+0x6e4>
 8006cac:	2202      	movs	r2, #2
 8006cae:	498c      	ldr	r1, [pc, #560]	; (8006ee0 <setCommand+0x730>)
 8006cb0:	0028      	movs	r0, r5
 8006cb2:	f00e fe99 	bl	80159e8 <strncmp>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d100      	bne.n	8006cbc <setCommand+0x50c>
 8006cba:	e0ed      	b.n	8006e98 <setCommand+0x6e8>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	4989      	ldr	r1, [pc, #548]	; (8006ee4 <setCommand+0x734>)
 8006cc0:	0028      	movs	r0, r5
 8006cc2:	f00e fe91 	bl	80159e8 <strncmp>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d100      	bne.n	8006ccc <setCommand+0x51c>
 8006cca:	e0e7      	b.n	8006e9c <setCommand+0x6ec>
 8006ccc:	2202      	movs	r2, #2
 8006cce:	4986      	ldr	r1, [pc, #536]	; (8006ee8 <setCommand+0x738>)
 8006cd0:	0028      	movs	r0, r5
 8006cd2:	f00e fe89 	bl	80159e8 <strncmp>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d100      	bne.n	8006cdc <setCommand+0x52c>
 8006cda:	e0e1      	b.n	8006ea0 <setCommand+0x6f0>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006cdc:	2205      	movs	r2, #5
 8006cde:	4983      	ldr	r1, [pc, #524]	; (8006eec <setCommand+0x73c>)
 8006ce0:	0028      	movs	r0, r5
 8006ce2:	f00e fe81 	bl	80159e8 <strncmp>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d100      	bne.n	8006cec <setCommand+0x53c>
 8006cea:	e12b      	b.n	8006f44 <setCommand+0x794>
 8006cec:	2202      	movs	r2, #2
 8006cee:	4980      	ldr	r1, [pc, #512]	; (8006ef0 <setCommand+0x740>)
 8006cf0:	0028      	movs	r0, r5
 8006cf2:	f00e fe79 	bl	80159e8 <strncmp>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d100      	bne.n	8006cfc <setCommand+0x54c>
 8006cfa:	e125      	b.n	8006f48 <setCommand+0x798>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006cfc:	2205      	movs	r2, #5
 8006cfe:	497d      	ldr	r1, [pc, #500]	; (8006ef4 <setCommand+0x744>)
 8006d00:	0028      	movs	r0, r5
 8006d02:	f00e fe71 	bl	80159e8 <strncmp>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d100      	bne.n	8006d0c <setCommand+0x55c>
 8006d0a:	e11f      	b.n	8006f4c <setCommand+0x79c>
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	497a      	ldr	r1, [pc, #488]	; (8006ef8 <setCommand+0x748>)
 8006d10:	0028      	movs	r0, r5
 8006d12:	f00e fe69 	bl	80159e8 <strncmp>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d100      	bne.n	8006d1c <setCommand+0x56c>
 8006d1a:	e119      	b.n	8006f50 <setCommand+0x7a0>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	4977      	ldr	r1, [pc, #476]	; (8006efc <setCommand+0x74c>)
 8006d20:	0028      	movs	r0, r5
 8006d22:	f00e fe61 	bl	80159e8 <strncmp>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d100      	bne.n	8006d2c <setCommand+0x57c>
 8006d2a:	e113      	b.n	8006f54 <setCommand+0x7a4>
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	4974      	ldr	r1, [pc, #464]	; (8006f00 <setCommand+0x750>)
 8006d30:	0028      	movs	r0, r5
 8006d32:	f00e fe59 	bl	80159e8 <strncmp>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d100      	bne.n	8006d3c <setCommand+0x58c>
 8006d3a:	e10d      	b.n	8006f58 <setCommand+0x7a8>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	4971      	ldr	r1, [pc, #452]	; (8006f04 <setCommand+0x754>)
 8006d40:	0028      	movs	r0, r5
 8006d42:	f00e fe51 	bl	80159e8 <strncmp>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d100      	bne.n	8006d4c <setCommand+0x59c>
 8006d4a:	e107      	b.n	8006f5c <setCommand+0x7ac>
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	496e      	ldr	r1, [pc, #440]	; (8006f08 <setCommand+0x758>)
 8006d50:	0028      	movs	r0, r5
 8006d52:	f00e fe49 	bl	80159e8 <strncmp>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d100      	bne.n	8006d5c <setCommand+0x5ac>
 8006d5a:	e101      	b.n	8006f60 <setCommand+0x7b0>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	496b      	ldr	r1, [pc, #428]	; (8006f0c <setCommand+0x75c>)
 8006d60:	0028      	movs	r0, r5
 8006d62:	f00e fe41 	bl	80159e8 <strncmp>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d100      	bne.n	8006d6c <setCommand+0x5bc>
 8006d6a:	e0fb      	b.n	8006f64 <setCommand+0x7b4>
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	4968      	ldr	r1, [pc, #416]	; (8006f10 <setCommand+0x760>)
 8006d70:	0028      	movs	r0, r5
 8006d72:	f00e fe39 	bl	80159e8 <strncmp>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d100      	bne.n	8006d7c <setCommand+0x5cc>
 8006d7a:	e0f5      	b.n	8006f68 <setCommand+0x7b8>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006d7c:	2205      	movs	r2, #5
 8006d7e:	4965      	ldr	r1, [pc, #404]	; (8006f14 <setCommand+0x764>)
 8006d80:	0028      	movs	r0, r5
 8006d82:	f00e fe31 	bl	80159e8 <strncmp>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d100      	bne.n	8006d8c <setCommand+0x5dc>
 8006d8a:	e0ef      	b.n	8006f6c <setCommand+0x7bc>
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	4962      	ldr	r1, [pc, #392]	; (8006f18 <setCommand+0x768>)
 8006d90:	0028      	movs	r0, r5
 8006d92:	f00e fe29 	bl	80159e8 <strncmp>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d100      	bne.n	8006d9c <setCommand+0x5ec>
 8006d9a:	e0e9      	b.n	8006f70 <setCommand+0x7c0>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006d9c:	2209      	movs	r2, #9
 8006d9e:	495f      	ldr	r1, [pc, #380]	; (8006f1c <setCommand+0x76c>)
 8006da0:	0028      	movs	r0, r5
 8006da2:	f00e fe21 	bl	80159e8 <strncmp>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d100      	bne.n	8006dac <setCommand+0x5fc>
 8006daa:	e0e3      	b.n	8006f74 <setCommand+0x7c4>
 8006dac:	2202      	movs	r2, #2
 8006dae:	495c      	ldr	r1, [pc, #368]	; (8006f20 <setCommand+0x770>)
 8006db0:	0028      	movs	r0, r5
 8006db2:	f00e fe19 	bl	80159e8 <strncmp>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d100      	bne.n	8006dbc <setCommand+0x60c>
 8006dba:	e0dd      	b.n	8006f78 <setCommand+0x7c8>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006dbc:	2207      	movs	r2, #7
 8006dbe:	4959      	ldr	r1, [pc, #356]	; (8006f24 <setCommand+0x774>)
 8006dc0:	0028      	movs	r0, r5
 8006dc2:	f00e fe11 	bl	80159e8 <strncmp>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d100      	bne.n	8006dcc <setCommand+0x61c>
 8006dca:	e0d7      	b.n	8006f7c <setCommand+0x7cc>
 8006dcc:	2202      	movs	r2, #2
 8006dce:	4956      	ldr	r1, [pc, #344]	; (8006f28 <setCommand+0x778>)
 8006dd0:	0028      	movs	r0, r5
 8006dd2:	f00e fe09 	bl	80159e8 <strncmp>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d100      	bne.n	8006ddc <setCommand+0x62c>
 8006dda:	e0d1      	b.n	8006f80 <setCommand+0x7d0>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006ddc:	2208      	movs	r2, #8
 8006dde:	4953      	ldr	r1, [pc, #332]	; (8006f2c <setCommand+0x77c>)
 8006de0:	0028      	movs	r0, r5
 8006de2:	f00e fe01 	bl	80159e8 <strncmp>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d100      	bne.n	8006dec <setCommand+0x63c>
 8006dea:	e0cb      	b.n	8006f84 <setCommand+0x7d4>
 8006dec:	2202      	movs	r2, #2
 8006dee:	4950      	ldr	r1, [pc, #320]	; (8006f30 <setCommand+0x780>)
 8006df0:	0028      	movs	r0, r5
 8006df2:	f00e fdf9 	bl	80159e8 <strncmp>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d100      	bne.n	8006dfc <setCommand+0x64c>
 8006dfa:	e0c5      	b.n	8006f88 <setCommand+0x7d8>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	494d      	ldr	r1, [pc, #308]	; (8006f34 <setCommand+0x784>)
 8006e00:	0028      	movs	r0, r5
 8006e02:	f00e fdf1 	bl	80159e8 <strncmp>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d100      	bne.n	8006e0c <setCommand+0x65c>
 8006e0a:	e0bf      	b.n	8006f8c <setCommand+0x7dc>
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	494a      	ldr	r1, [pc, #296]	; (8006f38 <setCommand+0x788>)
 8006e10:	0028      	movs	r0, r5
 8006e12:	f00e fde9 	bl	80159e8 <strncmp>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d000      	beq.n	8006e1c <setCommand+0x66c>
 8006e1a:	e0bb      	b.n	8006f94 <setCommand+0x7e4>
			temp82 =DECEMBER;
 8006e1c:	250c      	movs	r5, #12
		if(result == BOS_OK){
 8006e1e:	2c00      	cmp	r4, #0
 8006e20:	d000      	beq.n	8006e24 <setCommand+0x674>
 8006e22:	e6d2      	b.n	8006bca <setCommand+0x41a>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006e24:	464b      	mov	r3, r9
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b1e      	cmp	r3, #30
 8006e2c:	d900      	bls.n	8006e30 <setCommand+0x680>
 8006e2e:	e0c9      	b.n	8006fc4 <setCommand+0x814>
 8006e30:	4b42      	ldr	r3, [pc, #264]	; (8006f3c <setCommand+0x78c>)
 8006e32:	429e      	cmp	r6, r3
 8006e34:	d800      	bhi.n	8006e38 <setCommand+0x688>
 8006e36:	e0c7      	b.n	8006fc8 <setCommand+0x818>
 8006e38:	4b41      	ldr	r3, [pc, #260]	; (8006f40 <setCommand+0x790>)
 8006e3a:	429e      	cmp	r6, r3
 8006e3c:	d900      	bls.n	8006e40 <setCommand+0x690>
 8006e3e:	e0c5      	b.n	8006fcc <setCommand+0x81c>
				GetTimeDate();
 8006e40:	f008 fbc8 	bl	800f5d4 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006e44:	4b1d      	ldr	r3, [pc, #116]	; (8006ebc <setCommand+0x70c>)
 8006e46:	7c1a      	ldrb	r2, [r3, #16]
 8006e48:	7c59      	ldrb	r1, [r3, #17]
 8006e4a:	7c98      	ldrb	r0, [r3, #18]
 8006e4c:	7cdc      	ldrb	r4, [r3, #19]
 8006e4e:	7b1b      	ldrb	r3, [r3, #12]
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	9304      	str	r3, [sp, #16]
 8006e54:	9403      	str	r4, [sp, #12]
 8006e56:	9002      	str	r0, [sp, #8]
 8006e58:	9101      	str	r1, [sp, #4]
 8006e5a:	9200      	str	r2, [sp, #0]
 8006e5c:	003b      	movs	r3, r7
 8006e5e:	0032      	movs	r2, r6
 8006e60:	4649      	mov	r1, r9
 8006e62:	0028      	movs	r0, r5
 8006e64:	f008 fb5c 	bl	800f520 <BOS_CalendarConfig>
 8006e68:	0004      	movs	r4, r0
 8006e6a:	e6ae      	b.n	8006bca <setCommand+0x41a>
			temp81 =MONDAY;
 8006e6c:	2701      	movs	r7, #1
	BOS_Status result =BOS_OK;
 8006e6e:	2400      	movs	r4, #0
 8006e70:	e712      	b.n	8006c98 <setCommand+0x4e8>
			temp81 =TUESDAY;
 8006e72:	2702      	movs	r7, #2
	BOS_Status result =BOS_OK;
 8006e74:	2400      	movs	r4, #0
 8006e76:	e70f      	b.n	8006c98 <setCommand+0x4e8>
			temp81 =WEDNESDAY;
 8006e78:	2703      	movs	r7, #3
	BOS_Status result =BOS_OK;
 8006e7a:	2400      	movs	r4, #0
 8006e7c:	e70c      	b.n	8006c98 <setCommand+0x4e8>
			temp81 =THURSDAY;
 8006e7e:	2704      	movs	r7, #4
	BOS_Status result =BOS_OK;
 8006e80:	2400      	movs	r4, #0
 8006e82:	e709      	b.n	8006c98 <setCommand+0x4e8>
			temp81 =FRIDAY;
 8006e84:	2705      	movs	r7, #5
	BOS_Status result =BOS_OK;
 8006e86:	2400      	movs	r4, #0
 8006e88:	e706      	b.n	8006c98 <setCommand+0x4e8>
			temp81 =SATURDAY;
 8006e8a:	2706      	movs	r7, #6
	BOS_Status result =BOS_OK;
 8006e8c:	2400      	movs	r4, #0
 8006e8e:	e703      	b.n	8006c98 <setCommand+0x4e8>
			result =BOS_ERR_WrongValue;
 8006e90:	2468      	movs	r4, #104	; 0x68
 8006e92:	e701      	b.n	8006c98 <setCommand+0x4e8>
			temp82 =JANUARY;
 8006e94:	2501      	movs	r5, #1
 8006e96:	e7c2      	b.n	8006e1e <setCommand+0x66e>
 8006e98:	2501      	movs	r5, #1
 8006e9a:	e7c0      	b.n	8006e1e <setCommand+0x66e>
			temp82 =FEBRUARY;
 8006e9c:	2502      	movs	r5, #2
 8006e9e:	e7be      	b.n	8006e1e <setCommand+0x66e>
 8006ea0:	2502      	movs	r5, #2
 8006ea2:	e7bc      	b.n	8006e1e <setCommand+0x66e>
 8006ea4:	20001294 	.word	0x20001294
 8006ea8:	2000129c 	.word	0x2000129c
 8006eac:	200012a0 	.word	0x200012a0
 8006eb0:	200012a4 	.word	0x200012a4
 8006eb4:	0801cfbc 	.word	0x0801cfbc
 8006eb8:	0801b370 	.word	0x0801b370
 8006ebc:	2000704c 	.word	0x2000704c
 8006ec0:	0801b37c 	.word	0x0801b37c
 8006ec4:	0801b384 	.word	0x0801b384
 8006ec8:	0801b38c 	.word	0x0801b38c
 8006ecc:	0801b398 	.word	0x0801b398
 8006ed0:	0801b3a4 	.word	0x0801b3a4
 8006ed4:	0801b3ac 	.word	0x0801b3ac
 8006ed8:	0801b3b8 	.word	0x0801b3b8
 8006edc:	0801b3c0 	.word	0x0801b3c0
 8006ee0:	0801b3c8 	.word	0x0801b3c8
 8006ee4:	0801b3cc 	.word	0x0801b3cc
 8006ee8:	0801b3d8 	.word	0x0801b3d8
 8006eec:	0801b3dc 	.word	0x0801b3dc
 8006ef0:	0801b3e4 	.word	0x0801b3e4
 8006ef4:	0801b3e8 	.word	0x0801b3e8
 8006ef8:	0801b3f0 	.word	0x0801b3f0
 8006efc:	0801b3f4 	.word	0x0801b3f4
 8006f00:	0801b3f8 	.word	0x0801b3f8
 8006f04:	0801b3fc 	.word	0x0801b3fc
 8006f08:	0801b404 	.word	0x0801b404
 8006f0c:	0801b408 	.word	0x0801b408
 8006f10:	0801b410 	.word	0x0801b410
 8006f14:	0801b414 	.word	0x0801b414
 8006f18:	0801b41c 	.word	0x0801b41c
 8006f1c:	0801b420 	.word	0x0801b420
 8006f20:	0801b42c 	.word	0x0801b42c
 8006f24:	0801b430 	.word	0x0801b430
 8006f28:	0801b438 	.word	0x0801b438
 8006f2c:	0801b43c 	.word	0x0801b43c
 8006f30:	0801b448 	.word	0x0801b448
 8006f34:	0801b44c 	.word	0x0801b44c
 8006f38:	0801b458 	.word	0x0801b458
 8006f3c:	000007cf 	.word	0x000007cf
 8006f40:	00000834 	.word	0x00000834
			temp82 =MARCH;
 8006f44:	2503      	movs	r5, #3
 8006f46:	e76a      	b.n	8006e1e <setCommand+0x66e>
 8006f48:	2503      	movs	r5, #3
 8006f4a:	e768      	b.n	8006e1e <setCommand+0x66e>
			temp82 =APRIL;
 8006f4c:	2504      	movs	r5, #4
 8006f4e:	e766      	b.n	8006e1e <setCommand+0x66e>
 8006f50:	2504      	movs	r5, #4
 8006f52:	e764      	b.n	8006e1e <setCommand+0x66e>
			temp82 =MAY;
 8006f54:	2505      	movs	r5, #5
 8006f56:	e762      	b.n	8006e1e <setCommand+0x66e>
 8006f58:	2505      	movs	r5, #5
 8006f5a:	e760      	b.n	8006e1e <setCommand+0x66e>
			temp82 =JUNE;
 8006f5c:	2506      	movs	r5, #6
 8006f5e:	e75e      	b.n	8006e1e <setCommand+0x66e>
 8006f60:	2506      	movs	r5, #6
 8006f62:	e75c      	b.n	8006e1e <setCommand+0x66e>
			temp82 =JULY;
 8006f64:	2507      	movs	r5, #7
 8006f66:	e75a      	b.n	8006e1e <setCommand+0x66e>
 8006f68:	2507      	movs	r5, #7
 8006f6a:	e758      	b.n	8006e1e <setCommand+0x66e>
			temp82 =AUGUST;
 8006f6c:	2508      	movs	r5, #8
 8006f6e:	e756      	b.n	8006e1e <setCommand+0x66e>
 8006f70:	2508      	movs	r5, #8
 8006f72:	e754      	b.n	8006e1e <setCommand+0x66e>
			temp82 =SEPTEMBER;
 8006f74:	2509      	movs	r5, #9
 8006f76:	e752      	b.n	8006e1e <setCommand+0x66e>
 8006f78:	2509      	movs	r5, #9
 8006f7a:	e750      	b.n	8006e1e <setCommand+0x66e>
			temp82 =OCTOBER;
 8006f7c:	250a      	movs	r5, #10
 8006f7e:	e74e      	b.n	8006e1e <setCommand+0x66e>
 8006f80:	250a      	movs	r5, #10
 8006f82:	e74c      	b.n	8006e1e <setCommand+0x66e>
			temp82 =NOVEMBER;
 8006f84:	250b      	movs	r5, #11
 8006f86:	e74a      	b.n	8006e1e <setCommand+0x66e>
 8006f88:	250b      	movs	r5, #11
 8006f8a:	e748      	b.n	8006e1e <setCommand+0x66e>
			temp82 =DECEMBER;
 8006f8c:	250c      	movs	r5, #12
 8006f8e:	e746      	b.n	8006e1e <setCommand+0x66e>
				result =BOS_ERR_WrongValue;
 8006f90:	2468      	movs	r4, #104	; 0x68
 8006f92:	e61a      	b.n	8006bca <setCommand+0x41a>
			result =BOS_ERR_WrongValue;
 8006f94:	2468      	movs	r4, #104	; 0x68
 8006f96:	e618      	b.n	8006bca <setCommand+0x41a>
				result =BOS_ERR_WrongValue;
 8006f98:	2468      	movs	r4, #104	; 0x68
 8006f9a:	e439      	b.n	8006810 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f9c:	2468      	movs	r4, #104	; 0x68
 8006f9e:	e437      	b.n	8006810 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006fa0:	2468      	movs	r4, #104	; 0x68
 8006fa2:	e435      	b.n	8006810 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006fa4:	2468      	movs	r4, #104	; 0x68
 8006fa6:	e433      	b.n	8006810 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006fa8:	2468      	movs	r4, #104	; 0x68
 8006faa:	e431      	b.n	8006810 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006fac:	2468      	movs	r4, #104	; 0x68
 8006fae:	e42f      	b.n	8006810 <setCommand+0x60>
			result =BOS_ERR_WrongParam;
 8006fb0:	2467      	movs	r4, #103	; 0x67
 8006fb2:	e42d      	b.n	8006810 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006fb4:	2468      	movs	r4, #104	; 0x68
 8006fb6:	e42b      	b.n	8006810 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006fb8:	2468      	movs	r4, #104	; 0x68
 8006fba:	e429      	b.n	8006810 <setCommand+0x60>
 8006fbc:	2468      	movs	r4, #104	; 0x68
 8006fbe:	e427      	b.n	8006810 <setCommand+0x60>
 8006fc0:	2468      	movs	r4, #104	; 0x68
 8006fc2:	e425      	b.n	8006810 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006fc4:	2468      	movs	r4, #104	; 0x68
 8006fc6:	e423      	b.n	8006810 <setCommand+0x60>
 8006fc8:	2468      	movs	r4, #104	; 0x68
 8006fca:	e421      	b.n	8006810 <setCommand+0x60>
 8006fcc:	2468      	movs	r4, #104	; 0x68
 8006fce:	e41f      	b.n	8006810 <setCommand+0x60>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006fd0:	2213      	movs	r2, #19
 8006fd2:	4906      	ldr	r1, [pc, #24]	; (8006fec <setCommand+0x83c>)
 8006fd4:	9807      	ldr	r0, [sp, #28]
 8006fd6:	f00e fac0 	bl	801555a <memcpy>
 8006fda:	e41f      	b.n	800681c <setCommand+0x6c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006fdc:	220f      	movs	r2, #15
 8006fde:	4904      	ldr	r1, [pc, #16]	; (8006ff0 <setCommand+0x840>)
 8006fe0:	9807      	ldr	r0, [sp, #28]
 8006fe2:	f00e faba 	bl	801555a <memcpy>
 8006fe6:	f7ff fc19 	bl	800681c <setCommand+0x6c>
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	0801adec 	.word	0x0801adec
 8006ff0:	0801ac28 	.word	0x0801ac28

08006ff4 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ff4:	b530      	push	{r4, r5, lr}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	0005      	movs	r5, r0
 8006ffa:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8007000:	2d00      	cmp	r5, #0
 8007002:	d101      	bne.n	8007008 <removebuttonCommand+0x14>
 8007004:	b672      	cpsid	i
 8007006:	e7fe      	b.n	8007006 <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007008:	aa01      	add	r2, sp, #4
 800700a:	2101      	movs	r1, #1
 800700c:	f008 ff96 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8007010:	2300      	movs	r3, #0
 8007012:	56c3      	ldrsb	r3, [r0, r3]
 8007014:	2b70      	cmp	r3, #112	; 0x70
 8007016:	d008      	beq.n	800702a <removebuttonCommand+0x36>
	uint8_t port =0;
 8007018:	2400      	movs	r4, #0
	result =RemovePortButton(port);
 800701a:	0020      	movs	r0, r4
 800701c:	f001 fb8c 	bl	8008738 <RemovePortButton>
	if(result == BOS_OK){
 8007020:	2800      	cmp	r0, #0
 8007022:	d007      	beq.n	8007034 <removebuttonCommand+0x40>
}
 8007024:	2000      	movs	r0, #0
 8007026:	b003      	add	sp, #12
 8007028:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800702a:	3001      	adds	r0, #1
 800702c:	f00e f80b 	bl	8015046 <atol>
 8007030:	b2c4      	uxtb	r4, r0
 8007032:	e7f2      	b.n	800701a <removebuttonCommand+0x26>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8007034:	0023      	movs	r3, r4
 8007036:	0022      	movs	r2, r4
 8007038:	4902      	ldr	r1, [pc, #8]	; (8007044 <removebuttonCommand+0x50>)
 800703a:	0028      	movs	r0, r5
 800703c:	f00e fc90 	bl	8015960 <sprintf>
 8007040:	e7f0      	b.n	8007024 <removebuttonCommand+0x30>
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	0801b20c 	.word	0x0801b20c

08007048 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800704a:	b085      	sub	sp, #20
 800704c:	0006      	movs	r6, r0
 800704e:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8007050:	2300      	movs	r3, #0
 8007052:	9303      	str	r3, [sp, #12]
 8007054:	9302      	str	r3, [sp, #8]
	configASSERT(pcWriteBuffer);
 8007056:	2800      	cmp	r0, #0
 8007058:	d101      	bne.n	800705e <addbuttonCommand+0x16>
 800705a:	b672      	cpsid	i
 800705c:	e7fe      	b.n	800705c <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800705e:	aa03      	add	r2, sp, #12
 8007060:	2101      	movs	r1, #1
 8007062:	0038      	movs	r0, r7
 8007064:	f008 ff6a 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8007068:	0004      	movs	r4, r0
 800706a:	4b26      	ldr	r3, [pc, #152]	; (8007104 <addbuttonCommand+0xbc>)
 800706c:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800706e:	9d03      	ldr	r5, [sp, #12]
 8007070:	002a      	movs	r2, r5
 8007072:	4925      	ldr	r1, [pc, #148]	; (8007108 <addbuttonCommand+0xc0>)
 8007074:	f00e fcb8 	bl	80159e8 <strncmp>
 8007078:	2800      	cmp	r0, #0
 800707a:	d016      	beq.n	80070aa <addbuttonCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 800707c:	002a      	movs	r2, r5
 800707e:	4923      	ldr	r1, [pc, #140]	; (800710c <addbuttonCommand+0xc4>)
 8007080:	0020      	movs	r0, r4
 8007082:	f00e fcb1 	bl	80159e8 <strncmp>
 8007086:	2800      	cmp	r0, #0
 8007088:	d023      	beq.n	80070d2 <addbuttonCommand+0x8a>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 800708a:	002a      	movs	r2, r5
 800708c:	4920      	ldr	r1, [pc, #128]	; (8007110 <addbuttonCommand+0xc8>)
 800708e:	0020      	movs	r0, r4
 8007090:	f00e fcaa 	bl	80159e8 <strncmp>
 8007094:	2800      	cmp	r0, #0
 8007096:	d01e      	beq.n	80070d6 <addbuttonCommand+0x8e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8007098:	002a      	movs	r2, r5
 800709a:	491e      	ldr	r1, [pc, #120]	; (8007114 <addbuttonCommand+0xcc>)
 800709c:	0020      	movs	r0, r4
 800709e:	f00e fca3 	bl	80159e8 <strncmp>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d019      	beq.n	80070da <addbuttonCommand+0x92>
	uint8_t port =0, type =0;
 80070a6:	2500      	movs	r5, #0
 80070a8:	e000      	b.n	80070ac <addbuttonCommand+0x64>
		type =MOMENTARY_NO;
 80070aa:	2501      	movs	r5, #1
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80070ac:	aa02      	add	r2, sp, #8
 80070ae:	2102      	movs	r1, #2
 80070b0:	0038      	movs	r0, r7
 80070b2:	f008 ff43 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80070b6:	2300      	movs	r3, #0
 80070b8:	56c3      	ldrsb	r3, [r0, r3]
 80070ba:	2b70      	cmp	r3, #112	; 0x70
 80070bc:	d00f      	beq.n	80070de <addbuttonCommand+0x96>
	uint8_t port =0, type =0;
 80070be:	2400      	movs	r4, #0
	result =AddPortButton(type,port);
 80070c0:	0021      	movs	r1, r4
 80070c2:	0028      	movs	r0, r5
 80070c4:	f001 faa6 	bl	8008614 <AddPortButton>
	if(result == BOS_OK){
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d00d      	beq.n	80070e8 <addbuttonCommand+0xa0>
}
 80070cc:	2000      	movs	r0, #0
 80070ce:	b005      	add	sp, #20
 80070d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		type =MOMENTARY_NC;
 80070d2:	2502      	movs	r5, #2
 80070d4:	e7ea      	b.n	80070ac <addbuttonCommand+0x64>
		type =ONOFF_NO;
 80070d6:	2503      	movs	r5, #3
 80070d8:	e7e8      	b.n	80070ac <addbuttonCommand+0x64>
		type =ONOFF_NC;
 80070da:	2504      	movs	r5, #4
 80070dc:	e7e6      	b.n	80070ac <addbuttonCommand+0x64>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 80070de:	3001      	adds	r0, #1
 80070e0:	f00d ffb1 	bl	8015046 <atol>
 80070e4:	b2c4      	uxtb	r4, r0
 80070e6:	e7eb      	b.n	80070c0 <addbuttonCommand+0x78>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 80070e8:	4b06      	ldr	r3, [pc, #24]	; (8007104 <addbuttonCommand+0xbc>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	18d3      	adds	r3, r2, r3
 80070f0:	2100      	movs	r1, #0
 80070f2:	7019      	strb	r1, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 80070f4:	9400      	str	r4, [sp, #0]
 80070f6:	0023      	movs	r3, r4
 80070f8:	4907      	ldr	r1, [pc, #28]	; (8007118 <addbuttonCommand+0xd0>)
 80070fa:	0030      	movs	r0, r6
 80070fc:	f00e fc30 	bl	8015960 <sprintf>
 8007100:	e7e4      	b.n	80070cc <addbuttonCommand+0x84>
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	20001284 	.word	0x20001284
 8007108:	0801aacc 	.word	0x0801aacc
 800710c:	0801aadc 	.word	0x0801aadc
 8007110:	0801aaec 	.word	0x0801aaec
 8007114:	0801aaf8 	.word	0x0801aaf8
 8007118:	0801ab04 	.word	0x0801ab04

0800711c <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711e:	46de      	mov	lr, fp
 8007120:	4657      	mov	r7, sl
 8007122:	b580      	push	{r7, lr}
 8007124:	b09b      	sub	sp, #108	; 0x6c
 8007126:	0005      	movs	r5, r0
 8007128:	9009      	str	r0, [sp, #36]	; 0x24
 800712a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 800712c:	2300      	movs	r3, #0
 800712e:	9319      	str	r3, [sp, #100]	; 0x64
 8007130:	9318      	str	r3, [sp, #96]	; 0x60
 8007132:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8007134:	9316      	str	r3, [sp, #88]	; 0x58
 8007136:	9315      	str	r3, [sp, #84]	; 0x54
 8007138:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 800713a:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 800713c:	220a      	movs	r2, #10
 800713e:	2100      	movs	r1, #0
 8007140:	a810      	add	r0, sp, #64	; 0x40
 8007142:	f00e fa13 	bl	801556c <memset>
 8007146:	220a      	movs	r2, #10
 8007148:	2100      	movs	r1, #0
 800714a:	a80d      	add	r0, sp, #52	; 0x34
 800714c:	f00e fa0e 	bl	801556c <memset>
 8007150:	220a      	movs	r2, #10
 8007152:	2100      	movs	r1, #0
 8007154:	a80a      	add	r0, sp, #40	; 0x28
 8007156:	f00e fa09 	bl	801556c <memset>
	configASSERT(pcWriteBuffer);
 800715a:	2d00      	cmp	r5, #0
 800715c:	d101      	bne.n	8007162 <scastCommand+0x46>
 800715e:	b672      	cpsid	i
 8007160:	e7fe      	b.n	8007160 <scastCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007162:	aa19      	add	r2, sp, #100	; 0x64
 8007164:	2101      	movs	r1, #1
 8007166:	0020      	movs	r0, r4
 8007168:	f008 fee8 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 800716c:	2300      	movs	r3, #0
 800716e:	56c3      	ldrsb	r3, [r0, r3]
 8007170:	2b50      	cmp	r3, #80	; 0x50
 8007172:	d047      	beq.n	8007204 <scastCommand+0xe8>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8007174:	2300      	movs	r3, #0
 8007176:	9307      	str	r3, [sp, #28]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007178:	aa18      	add	r2, sp, #96	; 0x60
 800717a:	2102      	movs	r1, #2
 800717c:	0020      	movs	r0, r4
 800717e:	f008 fedd 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8007182:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8007184:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007186:	a810      	add	r0, sp, #64	; 0x40
 8007188:	f00e fc3f 	bl	8015a0a <strncpy>
	srcM =(uint8_t )GetID(par1);
 800718c:	a810      	add	r0, sp, #64	; 0x40
 800718e:	f7fd fa97 	bl	80046c0 <GetID>
 8007192:	b2c3      	uxtb	r3, r0
 8007194:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007196:	aa17      	add	r2, sp, #92	; 0x5c
 8007198:	2103      	movs	r1, #3
 800719a:	0020      	movs	r0, r4
 800719c:	f008 fece 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 80071a0:	2300      	movs	r3, #0
 80071a2:	56c3      	ldrsb	r3, [r0, r3]
 80071a4:	2b70      	cmp	r3, #112	; 0x70
 80071a6:	d033      	beq.n	8007210 <scastCommand+0xf4>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 80071a8:	2700      	movs	r7, #0
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80071aa:	aa16      	add	r2, sp, #88	; 0x58
 80071ac:	2104      	movs	r1, #4
 80071ae:	0020      	movs	r0, r4
 80071b0:	f008 fec4 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 80071b4:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 80071b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80071b8:	a80d      	add	r0, sp, #52	; 0x34
 80071ba:	f00e fc26 	bl	8015a0a <strncpy>
	dstM =(uint8_t )GetID(par2);
 80071be:	a80d      	add	r0, sp, #52	; 0x34
 80071c0:	f7fd fa7e 	bl	80046c0 <GetID>
 80071c4:	b2c3      	uxtb	r3, r0
 80071c6:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80071c8:	aa15      	add	r2, sp, #84	; 0x54
 80071ca:	2105      	movs	r1, #5
 80071cc:	0020      	movs	r0, r4
 80071ce:	f008 feb5 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 80071d2:	0005      	movs	r5, r0
 80071d4:	9008      	str	r0, [sp, #32]
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 80071d6:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80071d8:	0032      	movs	r2, r6
 80071da:	492d      	ldr	r1, [pc, #180]	; (8007290 <scastCommand+0x174>)
 80071dc:	f00e fc04 	bl	80159e8 <strncmp>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d01a      	beq.n	800721a <scastCommand+0xfe>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 80071e4:	0032      	movs	r2, r6
 80071e6:	492b      	ldr	r1, [pc, #172]	; (8007294 <scastCommand+0x178>)
 80071e8:	0028      	movs	r0, r5
 80071ea:	f00e fbfd 	bl	80159e8 <strncmp>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d03c      	beq.n	800726c <scastCommand+0x150>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 80071f2:	0032      	movs	r2, r6
 80071f4:	4928      	ldr	r1, [pc, #160]	; (8007298 <scastCommand+0x17c>)
 80071f6:	0028      	movs	r0, r5
 80071f8:	f00e fbf6 	bl	80159e8 <strncmp>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d037      	beq.n	8007270 <scastCommand+0x154>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8007200:	2500      	movs	r5, #0
 8007202:	e00b      	b.n	800721c <scastCommand+0x100>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8007204:	3001      	adds	r0, #1
 8007206:	f00d ff1e 	bl	8015046 <atol>
 800720a:	b2c3      	uxtb	r3, r0
 800720c:	9307      	str	r3, [sp, #28]
 800720e:	e7b3      	b.n	8007178 <scastCommand+0x5c>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007210:	3001      	adds	r0, #1
 8007212:	f00d ff18 	bl	8015046 <atol>
 8007216:	b2c7      	uxtb	r7, r0
 8007218:	e7c7      	b.n	80071aa <scastCommand+0x8e>
		direction =FORWARD;
 800721a:	2500      	movs	r5, #0
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 800721c:	0032      	movs	r2, r6
 800721e:	9908      	ldr	r1, [sp, #32]
 8007220:	a80a      	add	r0, sp, #40	; 0x28
 8007222:	f00e fbf2 	bl	8015a0a <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8007226:	aa14      	add	r2, sp, #80	; 0x50
 8007228:	2106      	movs	r1, #6
 800722a:	0020      	movs	r0, r4
 800722c:	f008 fe86 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8007230:	f00d ff09 	bl	8015046 <atol>
 8007234:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8007236:	aa13      	add	r2, sp, #76	; 0x4c
 8007238:	2107      	movs	r1, #7
 800723a:	0020      	movs	r0, r4
 800723c:	f008 fe7e 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8007240:	f00d ff01 	bl	8015046 <atol>
 8007244:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8007246:	2300      	movs	r3, #0
 8007248:	9303      	str	r3, [sp, #12]
 800724a:	9002      	str	r0, [sp, #8]
 800724c:	9601      	str	r6, [sp, #4]
 800724e:	9500      	str	r5, [sp, #0]
 8007250:	465b      	mov	r3, fp
 8007252:	003a      	movs	r2, r7
 8007254:	4651      	mov	r1, sl
 8007256:	9807      	ldr	r0, [sp, #28]
 8007258:	f002 fd02 	bl	8009c60 <StartScastDMAStream>
	if(result == BOS_OK){
 800725c:	2800      	cmp	r0, #0
 800725e:	d009      	beq.n	8007274 <scastCommand+0x158>
}
 8007260:	2000      	movs	r0, #0
 8007262:	b01b      	add	sp, #108	; 0x6c
 8007264:	bc0c      	pop	{r2, r3}
 8007266:	4692      	mov	sl, r2
 8007268:	469b      	mov	fp, r3
 800726a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		direction =BACKWARD;
 800726c:	2501      	movs	r5, #1
 800726e:	e7d5      	b.n	800721c <scastCommand+0x100>
		direction =BIDIRECTIONAL;
 8007270:	2502      	movs	r5, #2
 8007272:	e7d3      	b.n	800721c <scastCommand+0x100>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8007274:	9404      	str	r4, [sp, #16]
 8007276:	9603      	str	r6, [sp, #12]
 8007278:	ab0d      	add	r3, sp, #52	; 0x34
 800727a:	9302      	str	r3, [sp, #8]
 800727c:	9701      	str	r7, [sp, #4]
 800727e:	ab10      	add	r3, sp, #64	; 0x40
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	9b07      	ldr	r3, [sp, #28]
 8007284:	aa0a      	add	r2, sp, #40	; 0x28
 8007286:	4905      	ldr	r1, [pc, #20]	; (800729c <scastCommand+0x180>)
 8007288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800728a:	f00e fb69 	bl	8015960 <sprintf>
 800728e:	e7e7      	b.n	8007260 <scastCommand+0x144>
 8007290:	0801b254 	.word	0x0801b254
 8007294:	0801b25c 	.word	0x0801b25c
 8007298:	0801b268 	.word	0x0801b268
 800729c:	0801b278 	.word	0x0801b278

080072a0 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072a2:	b083      	sub	sp, #12
 80072a4:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80072a6:	d038      	beq.n	800731a <infoCommand+0x7a>
	if(N > 1)
 80072a8:	4b27      	ldr	r3, [pc, #156]	; (8007348 <infoCommand+0xa8>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d936      	bls.n	800731e <infoCommand+0x7e>
		result =ReadPortsDir();
 80072b0:	f7fd fb4c 	bl	800494c <ReadPortsDir>
 80072b4:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 80072b6:	4b24      	ldr	r3, [pc, #144]	; (8007348 <infoCommand+0xa8>)
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	4924      	ldr	r1, [pc, #144]	; (800734c <infoCommand+0xac>)
 80072bc:	0020      	movs	r0, r4
 80072be:	f00e fb4f 	bl	8015960 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 80072c2:	0020      	movs	r0, r4
 80072c4:	f7f8 ff28 	bl	8000118 <strlen>
 80072c8:	b282      	uxth	r2, r0
 80072ca:	4e21      	ldr	r6, [pc, #132]	; (8007350 <infoCommand+0xb0>)
 80072cc:	7830      	ldrb	r0, [r6, #0]
 80072ce:	2701      	movs	r7, #1
 80072d0:	427f      	negs	r7, r7
 80072d2:	9700      	str	r7, [sp, #0]
 80072d4:	2332      	movs	r3, #50	; 0x32
 80072d6:	0021      	movs	r1, r4
 80072d8:	f008 fbd6 	bl	800fa88 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 80072dc:	2213      	movs	r2, #19
 80072de:	491d      	ldr	r1, [pc, #116]	; (8007354 <infoCommand+0xb4>)
 80072e0:	0020      	movs	r0, r4
 80072e2:	f00e f93a 	bl	801555a <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 80072e6:	0020      	movs	r0, r4
 80072e8:	f7f8 ff16 	bl	8000118 <strlen>
 80072ec:	b282      	uxth	r2, r0
 80072ee:	7830      	ldrb	r0, [r6, #0]
 80072f0:	9700      	str	r7, [sp, #0]
 80072f2:	2332      	movs	r3, #50	; 0x32
 80072f4:	0021      	movs	r1, r4
 80072f6:	f008 fbc7 	bl	800fa88 <writePxMutex>
	DisplayTopology(PcPort);
 80072fa:	7830      	ldrb	r0, [r6, #0]
 80072fc:	f7fc ff40 	bl	8004180 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8007300:	7830      	ldrb	r0, [r6, #0]
 8007302:	f7fd f807 	bl	8004314 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8007306:	2d02      	cmp	r5, #2
 8007308:	d00b      	beq.n	8007322 <infoCommand+0x82>
	sprintf((char* )pcWriteBuffer," ");
 800730a:	2202      	movs	r2, #2
 800730c:	4912      	ldr	r1, [pc, #72]	; (8007358 <infoCommand+0xb8>)
 800730e:	0020      	movs	r0, r4
 8007310:	f00e f923 	bl	801555a <memcpy>
}
 8007314:	2000      	movs	r0, #0
 8007316:	b003      	add	sp, #12
 8007318:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 800731a:	b672      	cpsid	i
 800731c:	e7fe      	b.n	800731c <infoCommand+0x7c>
	BOS_Status result =BOS_OK;
 800731e:	2500      	movs	r5, #0
 8007320:	e7c9      	b.n	80072b6 <infoCommand+0x16>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8007322:	2244      	movs	r2, #68	; 0x44
 8007324:	490d      	ldr	r1, [pc, #52]	; (800735c <infoCommand+0xbc>)
 8007326:	0020      	movs	r0, r4
 8007328:	f00e f917 	bl	801555a <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800732c:	0020      	movs	r0, r4
 800732e:	f7f8 fef3 	bl	8000118 <strlen>
 8007332:	b282      	uxth	r2, r0
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <infoCommand+0xb0>)
 8007336:	7818      	ldrb	r0, [r3, #0]
 8007338:	003b      	movs	r3, r7
 800733a:	9700      	str	r7, [sp, #0]
 800733c:	3333      	adds	r3, #51	; 0x33
 800733e:	0021      	movs	r1, r4
 8007340:	f008 fba2 	bl	800fa88 <writePxMutex>
 8007344:	e7e1      	b.n	800730a <infoCommand+0x6a>
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	20000024 	.word	0x20000024
 800734c:	0801b010 	.word	0x0801b010
 8007350:	20000aa8 	.word	0x20000aa8
 8007354:	0801b02c 	.word	0x0801b02c
 8007358:	08019fb4 	.word	0x08019fb4
 800735c:	0801b040 	.word	0x0801b040

08007360 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007360:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8007362:	2800      	cmp	r0, #0
 8007364:	d101      	bne.n	800736a <statusCommand+0xa>
 8007366:	b672      	cpsid	i
 8007368:	e7fe      	b.n	8007368 <statusCommand+0x8>
	DisplayModuleStatus(0);
 800736a:	2000      	movs	r0, #0
 800736c:	f7fd f83c 	bl	80043e8 <DisplayModuleStatus>
}
 8007370:	2000      	movs	r0, #0
 8007372:	bd10      	pop	{r4, pc}

08007374 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007376:	46ce      	mov	lr, r9
 8007378:	b500      	push	{lr}
 800737a:	b090      	sub	sp, #64	; 0x40
 800737c:	0004      	movs	r4, r0
 800737e:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8007380:	2227      	movs	r2, #39	; 0x27
 8007382:	2100      	movs	r1, #0
 8007384:	a806      	add	r0, sp, #24
 8007386:	f00e f8f1 	bl	801556c <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 800738a:	220a      	movs	r2, #10
 800738c:	2100      	movs	r1, #0
 800738e:	a803      	add	r0, sp, #12
 8007390:	f00e f8ec 	bl	801556c <memset>
	configASSERT(pcWriteBuffer);
 8007394:	2c00      	cmp	r4, #0
 8007396:	d101      	bne.n	800739c <groupCommand+0x28>
 8007398:	b672      	cpsid	i
 800739a:	e7fe      	b.n	800739a <groupCommand+0x26>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800739c:	4d59      	ldr	r5, [pc, #356]	; (8007504 <groupCommand+0x190>)
 800739e:	002a      	movs	r2, r5
 80073a0:	2101      	movs	r1, #1
 80073a2:	9801      	ldr	r0, [sp, #4]
 80073a4:	f008 fdca 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 80073a8:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 80073aa:	682a      	ldr	r2, [r5, #0]
 80073ac:	a803      	add	r0, sp, #12
 80073ae:	f00e fb2c 	bl	8015a0a <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 80073b2:	2500      	movs	r5, #0
 80073b4:	e00b      	b.n	80073ce <groupCommand+0x5a>
		if(!strcmp(alias,groupAlias[i])){
 80073b6:	00ab      	lsls	r3, r5, #2
 80073b8:	195b      	adds	r3, r3, r5
 80073ba:	0059      	lsls	r1, r3, #1
 80073bc:	4b52      	ldr	r3, [pc, #328]	; (8007508 <groupCommand+0x194>)
 80073be:	18c9      	adds	r1, r1, r3
 80073c0:	a803      	add	r0, sp, #12
 80073c2:	f7f8 fe9f 	bl	8000104 <strcmp>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d017      	beq.n	80073fa <groupCommand+0x86>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 80073ca:	3501      	adds	r5, #1
 80073cc:	b2ed      	uxtb	r5, r5
 80073ce:	2d09      	cmp	r5, #9
 80073d0:	d9f1      	bls.n	80073b6 <groupCommand+0x42>
	type =1;
 80073d2:	2601      	movs	r6, #1
	count =2;
 80073d4:	4b4d      	ldr	r3, [pc, #308]	; (800750c <groupCommand+0x198>)
 80073d6:	2202      	movs	r2, #2
 80073d8:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 80073da:	3208      	adds	r2, #8
 80073dc:	494c      	ldr	r1, [pc, #304]	; (8007510 <groupCommand+0x19c>)
 80073de:	0020      	movs	r0, r4
 80073e0:	f00e f8bb 	bl	801555a <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 80073e4:	4a4b      	ldr	r2, [pc, #300]	; (8007514 <groupCommand+0x1a0>)
 80073e6:	2102      	movs	r1, #2
 80073e8:	9801      	ldr	r0, [sp, #4]
 80073ea:	f008 fda7 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 80073ee:	4b4a      	ldr	r3, [pc, #296]	; (8007518 <groupCommand+0x1a4>)
 80073f0:	6018      	str	r0, [r3, #0]
	int16_t modID =0, type =0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	4699      	mov	r9, r3
	BOS_Status result =BOS_OK;
 80073f6:	2500      	movs	r5, #0
	while(pcParameterString != NULL){
 80073f8:	e00f      	b.n	800741a <groupCommand+0xa6>
			type =0;
 80073fa:	2600      	movs	r6, #0
 80073fc:	e7ea      	b.n	80073d4 <groupCommand+0x60>
		strcat((char* )pcWriteBuffer,module);
 80073fe:	a906      	add	r1, sp, #24
 8007400:	0020      	movs	r0, r4
 8007402:	f00e facd 	bl	80159a0 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8007406:	1c79      	adds	r1, r7, #1
 8007408:	b249      	sxtb	r1, r1
 800740a:	4b40      	ldr	r3, [pc, #256]	; (800750c <groupCommand+0x198>)
 800740c:	7019      	strb	r1, [r3, #0]
 800740e:	4a41      	ldr	r2, [pc, #260]	; (8007514 <groupCommand+0x1a0>)
 8007410:	9801      	ldr	r0, [sp, #4]
 8007412:	f008 fd93 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8007416:	4b40      	ldr	r3, [pc, #256]	; (8007518 <groupCommand+0x1a4>)
 8007418:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 800741a:	4b3f      	ldr	r3, [pc, #252]	; (8007518 <groupCommand+0x1a4>)
 800741c:	6819      	ldr	r1, [r3, #0]
 800741e:	2900      	cmp	r1, #0
 8007420:	d024      	beq.n	800746c <groupCommand+0xf8>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8007422:	4b3c      	ldr	r3, [pc, #240]	; (8007514 <groupCommand+0x1a0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4699      	mov	r9, r3
 8007428:	af06      	add	r7, sp, #24
 800742a:	001a      	movs	r2, r3
 800742c:	0038      	movs	r0, r7
 800742e:	f00e faec 	bl	8015a0a <strncpy>
		module[xParameterStringLength] ='\0';
 8007432:	2300      	movs	r3, #0
 8007434:	464a      	mov	r2, r9
 8007436:	54bb      	strb	r3, [r7, r2]
		modID =GetID(module);
 8007438:	0038      	movs	r0, r7
 800743a:	f7fd f941 	bl	80046c0 <GetID>
 800743e:	4681      	mov	r9, r0
		if(modID < 0)
 8007440:	2800      	cmp	r0, #0
 8007442:	db13      	blt.n	800746c <groupCommand+0xf8>
		result =AddModuleToGroup(modID,alias);
 8007444:	b2c0      	uxtb	r0, r0
 8007446:	a903      	add	r1, sp, #12
 8007448:	f7fd fa02 	bl	8004850 <AddModuleToGroup>
 800744c:	1e05      	subs	r5, r0, #0
		if(result != BOS_OK)
 800744e:	d10d      	bne.n	800746c <groupCommand+0xf8>
		if(count > 2)
 8007450:	4b2e      	ldr	r3, [pc, #184]	; (800750c <groupCommand+0x198>)
 8007452:	2700      	movs	r7, #0
 8007454:	57df      	ldrsb	r7, [r3, r7]
 8007456:	2f02      	cmp	r7, #2
 8007458:	ddd1      	ble.n	80073fe <groupCommand+0x8a>
			strcat((char* )pcWriteBuffer,", ");
 800745a:	0020      	movs	r0, r4
 800745c:	f7f8 fe5c 	bl	8000118 <strlen>
 8007460:	1820      	adds	r0, r4, r0
 8007462:	2203      	movs	r2, #3
 8007464:	492d      	ldr	r1, [pc, #180]	; (800751c <groupCommand+0x1a8>)
 8007466:	f00e f878 	bl	801555a <memcpy>
 800746a:	e7c8      	b.n	80073fe <groupCommand+0x8a>
	if(modID < 0)
 800746c:	464b      	mov	r3, r9
 800746e:	2b00      	cmp	r3, #0
 8007470:	db12      	blt.n	8007498 <groupCommand+0x124>
	else if(count == 2)
 8007472:	4b26      	ldr	r3, [pc, #152]	; (800750c <groupCommand+0x198>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	b25b      	sxtb	r3, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d017      	beq.n	80074ac <groupCommand+0x138>
	else if(result == BOS_OK && type){
 800747c:	2d00      	cmp	r5, #0
 800747e:	d11b      	bne.n	80074b8 <groupCommand+0x144>
 8007480:	2e00      	cmp	r6, #0
 8007482:	d019      	beq.n	80074b8 <groupCommand+0x144>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8007484:	aa03      	add	r2, sp, #12
 8007486:	4926      	ldr	r1, [pc, #152]	; (8007520 <groupCommand+0x1ac>)
 8007488:	a806      	add	r0, sp, #24
 800748a:	f00e fa69 	bl	8015960 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 800748e:	a906      	add	r1, sp, #24
 8007490:	0020      	movs	r0, r4
 8007492:	f00e fa85 	bl	80159a0 <strcat>
 8007496:	e004      	b.n	80074a2 <groupCommand+0x12e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8007498:	aa06      	add	r2, sp, #24
 800749a:	4922      	ldr	r1, [pc, #136]	; (8007524 <groupCommand+0x1b0>)
 800749c:	0020      	movs	r0, r4
 800749e:	f00e fa5f 	bl	8015960 <sprintf>
}
 80074a2:	2000      	movs	r0, #0
 80074a4:	b010      	add	sp, #64	; 0x40
 80074a6:	bc04      	pop	{r2}
 80074a8:	4691      	mov	r9, r2
 80074aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 80074ac:	aa03      	add	r2, sp, #12
 80074ae:	491e      	ldr	r1, [pc, #120]	; (8007528 <groupCommand+0x1b4>)
 80074b0:	0020      	movs	r0, r4
 80074b2:	f00e fa55 	bl	8015960 <sprintf>
 80074b6:	e7f4      	b.n	80074a2 <groupCommand+0x12e>
	else if(result == BOS_OK && !type){
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	d10b      	bne.n	80074d4 <groupCommand+0x160>
 80074bc:	2e00      	cmp	r6, #0
 80074be:	d109      	bne.n	80074d4 <groupCommand+0x160>
		sprintf(module,(char* )pcMessageOKexist,alias);
 80074c0:	aa03      	add	r2, sp, #12
 80074c2:	491a      	ldr	r1, [pc, #104]	; (800752c <groupCommand+0x1b8>)
 80074c4:	a806      	add	r0, sp, #24
 80074c6:	f00e fa4b 	bl	8015960 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 80074ca:	a906      	add	r1, sp, #24
 80074cc:	0020      	movs	r0, r4
 80074ce:	f00e fa67 	bl	80159a0 <strcat>
 80074d2:	e7e6      	b.n	80074a2 <groupCommand+0x12e>
	else if(result == BOS_ERR_Keyword)
 80074d4:	2d06      	cmp	r5, #6
 80074d6:	d007      	beq.n	80074e8 <groupCommand+0x174>
	else if(result == BOS_ERR_ExistingAlias)
 80074d8:	2d07      	cmp	r5, #7
 80074da:	d10b      	bne.n	80074f4 <groupCommand+0x180>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 80074dc:	aa03      	add	r2, sp, #12
 80074de:	4914      	ldr	r1, [pc, #80]	; (8007530 <groupCommand+0x1bc>)
 80074e0:	0020      	movs	r0, r4
 80074e2:	f00e fa3d 	bl	8015960 <sprintf>
 80074e6:	e7dc      	b.n	80074a2 <groupCommand+0x12e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 80074e8:	aa03      	add	r2, sp, #12
 80074ea:	4912      	ldr	r1, [pc, #72]	; (8007534 <groupCommand+0x1c0>)
 80074ec:	0020      	movs	r0, r4
 80074ee:	f00e fa37 	bl	8015960 <sprintf>
 80074f2:	e7d6      	b.n	80074a2 <groupCommand+0x12e>
	else if(result == BOS_ERR_ExistingCmd)
 80074f4:	2d08      	cmp	r5, #8
 80074f6:	d1d4      	bne.n	80074a2 <groupCommand+0x12e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 80074f8:	aa03      	add	r2, sp, #12
 80074fa:	490f      	ldr	r1, [pc, #60]	; (8007538 <groupCommand+0x1c4>)
 80074fc:	0020      	movs	r0, r4
 80074fe:	f00e fa2f 	bl	8015960 <sprintf>
 8007502:	e7ce      	b.n	80074a2 <groupCommand+0x12e>
 8007504:	200012b4 	.word	0x200012b4
 8007508:	20000e58 	.word	0x20000e58
 800750c:	2000127a 	.word	0x2000127a
 8007510:	0801ae30 	.word	0x0801ae30
 8007514:	200012a8 	.word	0x200012a8
 8007518:	2000127c 	.word	0x2000127c
 800751c:	0801ae3c 	.word	0x0801ae3c
 8007520:	0801ae90 	.word	0x0801ae90
 8007524:	0801ae40 	.word	0x0801ae40
 8007528:	0801ae64 	.word	0x0801ae64
 800752c:	0801aeac 	.word	0x0801aeac
 8007530:	0801af0c 	.word	0x0801af0c
 8007534:	0801aecc 	.word	0x0801aecc
 8007538:	0801af40 	.word	0x0801af40

0800753c <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	0004      	movs	r4, r0
 8007540:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8007542:	2c00      	cmp	r4, #0
 8007544:	d101      	bne.n	800754a <nameCommand+0xe>
 8007546:	b672      	cpsid	i
 8007548:	e7fe      	b.n	8007548 <nameCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800754a:	4d1c      	ldr	r5, [pc, #112]	; (80075bc <nameCommand+0x80>)
 800754c:	002a      	movs	r2, r5
 800754e:	2101      	movs	r1, #1
 8007550:	f008 fcf4 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 8007554:	0001      	movs	r1, r0
 8007556:	4b1a      	ldr	r3, [pc, #104]	; (80075c0 <nameCommand+0x84>)
 8007558:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 800755a:	682b      	ldr	r3, [r5, #0]
 800755c:	2b09      	cmp	r3, #9
 800755e:	dd01      	ble.n	8007564 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007560:	2300      	movs	r3, #0
 8007562:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8007564:	4b17      	ldr	r3, [pc, #92]	; (80075c4 <nameCommand+0x88>)
 8007566:	7818      	ldrb	r0, [r3, #0]
 8007568:	f7fd f90c 	bl	8004784 <NameModule>
	if(result == BOS_OK)
 800756c:	2800      	cmp	r0, #0
 800756e:	d007      	beq.n	8007580 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 8007570:	2806      	cmp	r0, #6
 8007572:	d00e      	beq.n	8007592 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8007574:	2807      	cmp	r0, #7
 8007576:	d013      	beq.n	80075a0 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 8007578:	2808      	cmp	r0, #8
 800757a:	d018      	beq.n	80075ae <nameCommand+0x72>
}
 800757c:	2000      	movs	r0, #0
 800757e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007580:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <nameCommand+0x88>)
 8007582:	781a      	ldrb	r2, [r3, #0]
 8007584:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <nameCommand+0x84>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	490f      	ldr	r1, [pc, #60]	; (80075c8 <nameCommand+0x8c>)
 800758a:	0020      	movs	r0, r4
 800758c:	f00e f9e8 	bl	8015960 <sprintf>
 8007590:	e7f4      	b.n	800757c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8007592:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <nameCommand+0x84>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	490d      	ldr	r1, [pc, #52]	; (80075cc <nameCommand+0x90>)
 8007598:	0020      	movs	r0, r4
 800759a:	f00e f9e1 	bl	8015960 <sprintf>
 800759e:	e7ed      	b.n	800757c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <nameCommand+0x84>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	490a      	ldr	r1, [pc, #40]	; (80075d0 <nameCommand+0x94>)
 80075a6:	0020      	movs	r0, r4
 80075a8:	f00e f9da 	bl	8015960 <sprintf>
 80075ac:	e7e6      	b.n	800757c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <nameCommand+0x84>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4908      	ldr	r1, [pc, #32]	; (80075d4 <nameCommand+0x98>)
 80075b4:	0020      	movs	r0, r4
 80075b6:	f00e f9d3 	bl	8015960 <sprintf>
 80075ba:	e7df      	b.n	800757c <nameCommand+0x40>
 80075bc:	200012b0 	.word	0x200012b0
 80075c0:	20001280 	.word	0x20001280
 80075c4:	20001072 	.word	0x20001072
 80075c8:	0801b0a8 	.word	0x0801b0a8
 80075cc:	0801aecc 	.word	0x0801aecc
 80075d0:	0801af0c 	.word	0x0801af0c
 80075d4:	0801af40 	.word	0x0801af40

080075d8 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80075d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075da:	b085      	sub	sp, #20
 80075dc:	1e04      	subs	r4, r0, #0
 80075de:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 80075e0:	d101      	bne.n	80075e6 <bootloaderUpdateCommand+0xe>
 80075e2:	b672      	cpsid	i
 80075e4:	e7fe      	b.n	80075e4 <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80075e6:	4a4b      	ldr	r2, [pc, #300]	; (8007714 <bootloaderUpdateCommand+0x13c>)
 80075e8:	2101      	movs	r1, #1
 80075ea:	9803      	ldr	r0, [sp, #12]
 80075ec:	f008 fca6 	bl	800ff3c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d040      	beq.n	8007676 <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 80075f4:	4b47      	ldr	r3, [pc, #284]	; (8007714 <bootloaderUpdateCommand+0x13c>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	4947      	ldr	r1, [pc, #284]	; (8007718 <bootloaderUpdateCommand+0x140>)
 80075fa:	f00e f9f5 	bl	80159e8 <strncmp>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d000      	beq.n	8007604 <bootloaderUpdateCommand+0x2c>
 8007602:	e080      	b.n	8007706 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007604:	4a45      	ldr	r2, [pc, #276]	; (800771c <bootloaderUpdateCommand+0x144>)
 8007606:	2102      	movs	r1, #2
 8007608:	9803      	ldr	r0, [sp, #12]
 800760a:	f008 fc97 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800760e:	4f44      	ldr	r7, [pc, #272]	; (8007720 <bootloaderUpdateCommand+0x148>)
 8007610:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007612:	4a44      	ldr	r2, [pc, #272]	; (8007724 <bootloaderUpdateCommand+0x14c>)
 8007614:	2103      	movs	r1, #3
 8007616:	9803      	ldr	r0, [sp, #12]
 8007618:	f008 fc90 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800761c:	4b42      	ldr	r3, [pc, #264]	; (8007728 <bootloaderUpdateCommand+0x150>)
 800761e:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8007620:	6838      	ldr	r0, [r7, #0]
 8007622:	2300      	movs	r3, #0
 8007624:	56c3      	ldrsb	r3, [r0, r3]
 8007626:	2b23      	cmp	r3, #35	; 0x23
 8007628:	d04f      	beq.n	80076ca <bootloaderUpdateCommand+0xf2>
				result =BOS_ERR_WrongValue;
 800762a:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString3[0] == 'p'){
 800762c:	4b3e      	ldr	r3, [pc, #248]	; (8007728 <bootloaderUpdateCommand+0x150>)
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	2300      	movs	r3, #0
 8007632:	56c3      	ldrsb	r3, [r0, r3]
 8007634:	2b70      	cmp	r3, #112	; 0x70
 8007636:	d04e      	beq.n	80076d6 <bootloaderUpdateCommand+0xfe>
				result =BOS_ERR_WrongValue;
 8007638:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 800763a:	4b3c      	ldr	r3, [pc, #240]	; (800772c <bootloaderUpdateCommand+0x154>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	42b3      	cmp	r3, r6
 8007640:	d04e      	beq.n	80076e0 <bootloaderUpdateCommand+0x108>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8007642:	4b3b      	ldr	r3, [pc, #236]	; (8007730 <bootloaderUpdateCommand+0x158>)
 8007644:	2200      	movs	r2, #0
 8007646:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8007648:	4b3a      	ldr	r3, [pc, #232]	; (8007734 <bootloaderUpdateCommand+0x15c>)
 800764a:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 800764c:	3201      	adds	r2, #1
 800764e:	211a      	movs	r1, #26
 8007650:	0030      	movs	r0, r6
 8007652:	f002 fadf 	bl	8009c14 <SendMessageToModule>
				osDelay(100);
 8007656:	2064      	movs	r0, #100	; 0x64
 8007658:	f008 fb4a 	bl	800fcf0 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 800765c:	4b36      	ldr	r3, [pc, #216]	; (8007738 <bootloaderUpdateCommand+0x160>)
 800765e:	781a      	ldrb	r2, [r3, #0]
 8007660:	4b32      	ldr	r3, [pc, #200]	; (800772c <bootloaderUpdateCommand+0x154>)
 8007662:	7818      	ldrb	r0, [r3, #0]
 8007664:	002b      	movs	r3, r5
 8007666:	0031      	movs	r1, r6
 8007668:	f7fc fd14 	bl	8004094 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 800766c:	2f68      	cmp	r7, #104	; 0x68
 800766e:	d04a      	beq.n	8007706 <bootloaderUpdateCommand+0x12e>
}
 8007670:	2000      	movs	r0, #0
 8007672:	b005      	add	sp, #20
 8007674:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8007676:	4b2d      	ldr	r3, [pc, #180]	; (800772c <bootloaderUpdateCommand+0x154>)
 8007678:	781a      	ldrb	r2, [r3, #0]
 800767a:	4930      	ldr	r1, [pc, #192]	; (800773c <bootloaderUpdateCommand+0x164>)
 800767c:	0020      	movs	r0, r4
 800767e:	f00e f96f 	bl	8015960 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007682:	4b2f      	ldr	r3, [pc, #188]	; (8007740 <bootloaderUpdateCommand+0x168>)
 8007684:	6819      	ldr	r1, [r3, #0]
 8007686:	0020      	movs	r0, r4
 8007688:	f00e f98a 	bl	80159a0 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800768c:	0020      	movs	r0, r4
 800768e:	f7f8 fd43 	bl	8000118 <strlen>
 8007692:	b282      	uxth	r2, r0
 8007694:	4b28      	ldr	r3, [pc, #160]	; (8007738 <bootloaderUpdateCommand+0x160>)
 8007696:	7818      	ldrb	r0, [r3, #0]
 8007698:	2301      	movs	r3, #1
 800769a:	425b      	negs	r3, r3
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	3333      	adds	r3, #51	; 0x33
 80076a0:	0021      	movs	r1, r4
 80076a2:	f008 f9f1 	bl	800fa88 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80076a6:	4b27      	ldr	r3, [pc, #156]	; (8007744 <bootloaderUpdateCommand+0x16c>)
 80076a8:	4a27      	ldr	r2, [pc, #156]	; (8007748 <bootloaderUpdateCommand+0x170>)
 80076aa:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 80076ac:	4b27      	ldr	r3, [pc, #156]	; (800774c <bootloaderUpdateCommand+0x174>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80076b2:	200a      	movs	r0, #10
 80076b4:	f008 fb1c 	bl	800fcf0 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	4b24      	ldr	r3, [pc, #144]	; (8007750 <bootloaderUpdateCommand+0x178>)
 80076be:	4a25      	ldr	r2, [pc, #148]	; (8007754 <bootloaderUpdateCommand+0x17c>)
 80076c0:	60da      	str	r2, [r3, #12]
 80076c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	e7fd      	b.n	80076c6 <bootloaderUpdateCommand+0xee>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 80076ca:	3001      	adds	r0, #1
 80076cc:	f00d fcbb 	bl	8015046 <atol>
 80076d0:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 80076d2:	2700      	movs	r7, #0
 80076d4:	e7aa      	b.n	800762c <bootloaderUpdateCommand+0x54>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 80076d6:	3001      	adds	r0, #1
 80076d8:	f00d fcb5 	bl	8015046 <atol>
 80076dc:	b2c5      	uxtb	r5, r0
 80076de:	e7ac      	b.n	800763a <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 80076e0:	2100      	movs	r1, #0
 80076e2:	9100      	str	r1, [sp, #0]
 80076e4:	2319      	movs	r3, #25
 80076e6:	000a      	movs	r2, r1
 80076e8:	0028      	movs	r0, r5
 80076ea:	f002 f83b 	bl	8009764 <SendMessageFromPort>
				osDelay(100);
 80076ee:	2064      	movs	r0, #100	; 0x64
 80076f0:	f008 fafe 	bl	800fcf0 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 80076f4:	4b0d      	ldr	r3, [pc, #52]	; (800772c <bootloaderUpdateCommand+0x154>)
 80076f6:	7818      	ldrb	r0, [r3, #0]
 80076f8:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <bootloaderUpdateCommand+0x160>)
 80076fa:	781a      	ldrb	r2, [r3, #0]
 80076fc:	002b      	movs	r3, r5
 80076fe:	0001      	movs	r1, r0
 8007700:	f7fc fcc8 	bl	8004094 <remoteBootloaderUpdate>
 8007704:	e7b2      	b.n	800766c <bootloaderUpdateCommand+0x94>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007706:	220f      	movs	r2, #15
 8007708:	4913      	ldr	r1, [pc, #76]	; (8007758 <bootloaderUpdateCommand+0x180>)
 800770a:	0020      	movs	r0, r4
 800770c:	f00d ff25 	bl	801555a <memcpy>
 8007710:	e7ae      	b.n	8007670 <bootloaderUpdateCommand+0x98>
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	200012ac 	.word	0x200012ac
 8007718:	0801ab68 	.word	0x0801ab68
 800771c:	200012b8 	.word	0x200012b8
 8007720:	20001290 	.word	0x20001290
 8007724:	200012bc 	.word	0x200012bc
 8007728:	20001298 	.word	0x20001298
 800772c:	20001072 	.word	0x20001072
 8007730:	20006fcc 	.word	0x20006fcc
 8007734:	20000f34 	.word	0x20000f34
 8007738:	20000aa8 	.word	0x20000aa8
 800773c:	0801ab48 	.word	0x0801ab48
 8007740:	2000007c 	.word	0x2000007c
 8007744:	20007ff0 	.word	0x20007ff0
 8007748:	deadbeef 	.word	0xdeadbeef
 800774c:	20000ef0 	.word	0x20000ef0
 8007750:	e000ed00 	.word	0xe000ed00
 8007754:	05fa0004 	.word	0x05fa0004
 8007758:	0801ac28 	.word	0x0801ac28

0800775c <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800775c:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 800775e:	2800      	cmp	r0, #0
 8007760:	d01e      	beq.n	80077a0 <pingCommand+0x44>
	if(!moduleAlias[myID][0])
 8007762:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <pingCommand+0x5c>)
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	0093      	lsls	r3, r2, #2
 8007768:	189b      	adds	r3, r3, r2
 800776a:	0059      	lsls	r1, r3, #1
 800776c:	4b13      	ldr	r3, [pc, #76]	; (80077bc <pingCommand+0x60>)
 800776e:	5ccb      	ldrb	r3, [r1, r3]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d117      	bne.n	80077a4 <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007774:	4912      	ldr	r1, [pc, #72]	; (80077c0 <pingCommand+0x64>)
 8007776:	f00e f8f3 	bl	8015960 <sprintf>
	RTOS_IND_blink(200);
 800777a:	2580      	movs	r5, #128	; 0x80
 800777c:	012d      	lsls	r5, r5, #4
 800777e:	2490      	movs	r4, #144	; 0x90
 8007780:	05e4      	lsls	r4, r4, #23
 8007782:	2201      	movs	r2, #1
 8007784:	0029      	movs	r1, r5
 8007786:	0020      	movs	r0, r4
 8007788:	f00b ff35 	bl	80135f6 <HAL_GPIO_WritePin>
 800778c:	20c8      	movs	r0, #200	; 0xc8
 800778e:	f008 faaf 	bl	800fcf0 <osDelay>
 8007792:	2200      	movs	r2, #0
 8007794:	0029      	movs	r1, r5
 8007796:	0020      	movs	r0, r4
 8007798:	f00b ff2d 	bl	80135f6 <HAL_GPIO_WritePin>
}
 800779c:	2000      	movs	r0, #0
 800779e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80077a0:	b672      	cpsid	i
 80077a2:	e7fe      	b.n	80077a2 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80077a4:	0091      	lsls	r1, r2, #2
 80077a6:	1889      	adds	r1, r1, r2
 80077a8:	004b      	lsls	r3, r1, #1
 80077aa:	4904      	ldr	r1, [pc, #16]	; (80077bc <pingCommand+0x60>)
 80077ac:	185b      	adds	r3, r3, r1
 80077ae:	4905      	ldr	r1, [pc, #20]	; (80077c4 <pingCommand+0x68>)
 80077b0:	f00e f8d6 	bl	8015960 <sprintf>
 80077b4:	e7e1      	b.n	800777a <pingCommand+0x1e>
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	20001072 	.word	0x20001072
 80077bc:	20000f64 	.word	0x20000f64
 80077c0:	0801b118 	.word	0x0801b118
 80077c4:	0801b12c 	.word	0x0801b12c

080077c8 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80077c8:	b510      	push	{r4, lr}
 80077ca:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80077cc:	d101      	bne.n	80077d2 <prvRunTimeStatsCommand+0xa>
 80077ce:	b672      	cpsid	i
 80077d0:	e7fe      	b.n	80077d0 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 80077d2:	2241      	movs	r2, #65	; 0x41
 80077d4:	4904      	ldr	r1, [pc, #16]	; (80077e8 <prvRunTimeStatsCommand+0x20>)
 80077d6:	f00d fec0 	bl	801555a <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 80077da:	0020      	movs	r0, r4
 80077dc:	3040      	adds	r0, #64	; 0x40
 80077de:	f009 fe19 	bl	8011414 <vTaskGetRunTimeStats>
}
 80077e2:	2000      	movs	r0, #0
 80077e4:	bd10      	pop	{r4, pc}
 80077e6:	46c0      	nop			; (mov r8, r8)
 80077e8:	0801b158 	.word	0x0801b158

080077ec <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80077ec:	b510      	push	{r4, lr}
 80077ee:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80077f0:	d101      	bne.n	80077f6 <prvTaskStatsCommand+0xa>
 80077f2:	b672      	cpsid	i
 80077f4:	e7fe      	b.n	80077f4 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 80077f6:	2250      	movs	r2, #80	; 0x50
 80077f8:	4904      	ldr	r1, [pc, #16]	; (800780c <prvTaskStatsCommand+0x20>)
 80077fa:	f00d feae 	bl	801555a <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 80077fe:	0020      	movs	r0, r4
 8007800:	304f      	adds	r0, #79	; 0x4f
 8007802:	f009 fdad 	bl	8011360 <vTaskList>
}
 8007806:	2000      	movs	r0, #0
 8007808:	bd10      	pop	{r4, pc}
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	0801b1ac 	.word	0x0801b1ac

08007810 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007810:	2800      	cmp	r0, #0
 8007812:	d101      	bne.n	8007818 <resetCommand+0x8>
 8007814:	b672      	cpsid	i
 8007816:	e7fe      	b.n	8007816 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	4b03      	ldr	r3, [pc, #12]	; (800782c <resetCommand+0x1c>)
 800781e:	4a04      	ldr	r2, [pc, #16]	; (8007830 <resetCommand+0x20>)
 8007820:	60da      	str	r2, [r3, #12]
 8007822:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	e7fd      	b.n	8007826 <resetCommand+0x16>
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	e000ed00 	.word	0xe000ed00
 8007830:	05fa0004 	.word	0x05fa0004

08007834 <RegisterUserCLICommands>:
}
 8007834:	4770      	bx	lr
	...

08007838 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007838:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800783a:	4835      	ldr	r0, [pc, #212]	; (8007910 <vRegisterCLICommands+0xd8>)
 800783c:	f008 faf8 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007840:	4834      	ldr	r0, [pc, #208]	; (8007914 <vRegisterCLICommands+0xdc>)
 8007842:	f008 faf5 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007846:	4834      	ldr	r0, [pc, #208]	; (8007918 <vRegisterCLICommands+0xe0>)
 8007848:	f008 faf2 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 800784c:	4833      	ldr	r0, [pc, #204]	; (800791c <vRegisterCLICommands+0xe4>)
 800784e:	f008 faef 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007852:	4833      	ldr	r0, [pc, #204]	; (8007920 <vRegisterCLICommands+0xe8>)
 8007854:	f008 faec 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007858:	4832      	ldr	r0, [pc, #200]	; (8007924 <vRegisterCLICommands+0xec>)
 800785a:	f008 fae9 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 800785e:	4832      	ldr	r0, [pc, #200]	; (8007928 <vRegisterCLICommands+0xf0>)
 8007860:	f008 fae6 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007864:	4831      	ldr	r0, [pc, #196]	; (800792c <vRegisterCLICommands+0xf4>)
 8007866:	f008 fae3 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 800786a:	4831      	ldr	r0, [pc, #196]	; (8007930 <vRegisterCLICommands+0xf8>)
 800786c:	f008 fae0 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007870:	4830      	ldr	r0, [pc, #192]	; (8007934 <vRegisterCLICommands+0xfc>)
 8007872:	f008 fadd 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007876:	4830      	ldr	r0, [pc, #192]	; (8007938 <vRegisterCLICommands+0x100>)
 8007878:	f008 fada 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 800787c:	482f      	ldr	r0, [pc, #188]	; (800793c <vRegisterCLICommands+0x104>)
 800787e:	f008 fad7 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007882:	482f      	ldr	r0, [pc, #188]	; (8007940 <vRegisterCLICommands+0x108>)
 8007884:	f008 fad4 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007888:	482e      	ldr	r0, [pc, #184]	; (8007944 <vRegisterCLICommands+0x10c>)
 800788a:	f008 fad1 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 800788e:	482e      	ldr	r0, [pc, #184]	; (8007948 <vRegisterCLICommands+0x110>)
 8007890:	f008 face 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007894:	482d      	ldr	r0, [pc, #180]	; (800794c <vRegisterCLICommands+0x114>)
 8007896:	f008 facb 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800789a:	482d      	ldr	r0, [pc, #180]	; (8007950 <vRegisterCLICommands+0x118>)
 800789c:	f008 fac8 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 80078a0:	482c      	ldr	r0, [pc, #176]	; (8007954 <vRegisterCLICommands+0x11c>)
 80078a2:	f008 fac5 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 80078a6:	482c      	ldr	r0, [pc, #176]	; (8007958 <vRegisterCLICommands+0x120>)
 80078a8:	f008 fac2 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 80078ac:	482b      	ldr	r0, [pc, #172]	; (800795c <vRegisterCLICommands+0x124>)
 80078ae:	f008 fabf 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 80078b2:	482b      	ldr	r0, [pc, #172]	; (8007960 <vRegisterCLICommands+0x128>)
 80078b4:	f008 fabc 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 80078b8:	482a      	ldr	r0, [pc, #168]	; (8007964 <vRegisterCLICommands+0x12c>)
 80078ba:	f008 fab9 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80078be:	482a      	ldr	r0, [pc, #168]	; (8007968 <vRegisterCLICommands+0x130>)
 80078c0:	f008 fab6 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 80078c4:	4829      	ldr	r0, [pc, #164]	; (800796c <vRegisterCLICommands+0x134>)
 80078c6:	f008 fab3 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80078ca:	4829      	ldr	r0, [pc, #164]	; (8007970 <vRegisterCLICommands+0x138>)
 80078cc:	f008 fab0 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80078d0:	4828      	ldr	r0, [pc, #160]	; (8007974 <vRegisterCLICommands+0x13c>)
 80078d2:	f008 faad 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 80078d6:	4828      	ldr	r0, [pc, #160]	; (8007978 <vRegisterCLICommands+0x140>)
 80078d8:	f008 faaa 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 80078dc:	4827      	ldr	r0, [pc, #156]	; (800797c <vRegisterCLICommands+0x144>)
 80078de:	f008 faa7 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 80078e2:	4827      	ldr	r0, [pc, #156]	; (8007980 <vRegisterCLICommands+0x148>)
 80078e4:	f008 faa4 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80078e8:	4826      	ldr	r0, [pc, #152]	; (8007984 <vRegisterCLICommands+0x14c>)
 80078ea:	f008 faa1 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80078ee:	4826      	ldr	r0, [pc, #152]	; (8007988 <vRegisterCLICommands+0x150>)
 80078f0:	f008 fa9e 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80078f4:	4825      	ldr	r0, [pc, #148]	; (800798c <vRegisterCLICommands+0x154>)
 80078f6:	f008 fa9b 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80078fa:	4825      	ldr	r0, [pc, #148]	; (8007990 <vRegisterCLICommands+0x158>)
 80078fc:	f008 fa98 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007900:	4b24      	ldr	r3, [pc, #144]	; (8007994 <vRegisterCLICommands+0x15c>)
 8007902:	2223      	movs	r2, #35	; 0x23
 8007904:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007906:	f004 fc31 	bl	800c16c <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800790a:	f7ff ff93 	bl	8007834 <RegisterUserCLICommands>
}
 800790e:	bd10      	pop	{r4, pc}
 8007910:	0801b1fc 	.word	0x0801b1fc
 8007914:	0801b19c 	.word	0x0801b19c
 8007918:	0801b148 	.word	0x0801b148
 800791c:	0801ab6c 	.word	0x0801ab6c
 8007920:	0801acf4 	.word	0x0801acf4
 8007924:	0801b244 	.word	0x0801b244
 8007928:	0801b0c0 	.word	0x0801b0c0
 800792c:	0801af80 	.word	0x0801af80
 8007930:	0801b6f4 	.word	0x0801b6f4
 8007934:	0801b084 	.word	0x0801b084
 8007938:	0801b300 	.word	0x0801b300
 800793c:	0801ab38 	.word	0x0801ab38
 8007940:	0801b234 	.word	0x0801b234
 8007944:	0801b554 	.word	0x0801b554
 8007948:	0801ae20 	.word	0x0801ae20
 800794c:	0801ac78 	.word	0x0801ac78
 8007950:	0801c714 	.word	0x0801c714
 8007954:	0801abe0 	.word	0x0801abe0
 8007958:	0801b34c 	.word	0x0801b34c
 800795c:	0801c788 	.word	0x0801c788
 8007960:	0801b000 	.word	0x0801b000
 8007964:	0801ad24 	.word	0x0801ad24
 8007968:	0801b6e4 	.word	0x0801b6e4
 800796c:	0801aabc 	.word	0x0801aabc
 8007970:	0801b108 	.word	0x0801b108
 8007974:	0801ace4 	.word	0x0801ace4
 8007978:	0801abb8 	.word	0x0801abb8
 800797c:	0801c760 	.word	0x0801c760
 8007980:	0801c6a8 	.word	0x0801c6a8
 8007984:	0801a9bc 	.word	0x0801a9bc
 8007988:	0801aa3c 	.word	0x0801aa3c
 800798c:	0801aa74 	.word	0x0801aa74
 8007990:	0801a9cc 	.word	0x0801a9cc
 8007994:	20006fc8 	.word	0x20006fc8

08007998 <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 8007998:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800799a:	1e45      	subs	r5, r0, #1
 800799c:	00ec      	lsls	r4, r5, #3
 800799e:	1b63      	subs	r3, r4, r5
 80079a0:	00d8      	lsls	r0, r3, #3
 80079a2:	4e05      	ldr	r6, [pc, #20]	; (80079b8 <StopMsgDMA+0x20>)
 80079a4:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80079a6:	f00a ff4e 	bl	8012846 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80079aa:	1b64      	subs	r4, r4, r5
 80079ac:	00e3      	lsls	r3, r4, #3
 80079ae:	599b      	ldr	r3, [r3, r6]
 80079b0:	2200      	movs	r2, #0
 80079b2:	605a      	str	r2, [r3, #4]
}
 80079b4:	bd70      	pop	{r4, r5, r6, pc}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	20001e1c 	.word	0x20001e1c

080079bc <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 80079bc:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 80079be:	1e44      	subs	r4, r0, #1
 80079c0:	00e5      	lsls	r5, r4, #3
 80079c2:	1b2b      	subs	r3, r5, r4
 80079c4:	00d8      	lsls	r0, r3, #3
 80079c6:	4e07      	ldr	r6, [pc, #28]	; (80079e4 <StopStreamDMA+0x28>)
 80079c8:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80079ca:	f00a ff3c 	bl	8012846 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80079ce:	1b2d      	subs	r5, r5, r4
 80079d0:	00eb      	lsls	r3, r5, #3
 80079d2:	599a      	ldr	r2, [r3, r6]
 80079d4:	2300      	movs	r3, #0
 80079d6:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 80079d8:	00a4      	lsls	r4, r4, #2
 80079da:	4a03      	ldr	r2, [pc, #12]	; (80079e8 <StopStreamDMA+0x2c>)
 80079dc:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 80079de:	4a03      	ldr	r2, [pc, #12]	; (80079ec <StopStreamDMA+0x30>)
 80079e0:	50a3      	str	r3, [r4, r2]
	
}
 80079e2:	bd70      	pop	{r4, r5, r6, pc}
 80079e4:	20002014 	.word	0x20002014
 80079e8:	200016c8 	.word	0x200016c8
 80079ec:	200016f0 	.word	0x200016f0

080079f0 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 80079f0:	b510      	push	{r4, lr}
 80079f2:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 80079f4:	f7ff ffd0 	bl	8007998 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 80079f8:	3c01      	subs	r4, #1
 80079fa:	00e3      	lsls	r3, r4, #3
 80079fc:	1b19      	subs	r1, r3, r4
 80079fe:	00ca      	lsls	r2, r1, #3
 8007a00:	4903      	ldr	r1, [pc, #12]	; (8007a10 <SwitchMsgDMAToStream+0x20>)
 8007a02:	5851      	ldr	r1, [r2, r1]
 8007a04:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <SwitchMsgDMAToStream+0x24>)
 8007a06:	18d0      	adds	r0, r2, r3
 8007a08:	f006 f882 	bl	800db10 <DMA_STREAM_CH_Init>
}
 8007a0c:	bd10      	pop	{r4, pc}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	20001e1c 	.word	0x20001e1c
 8007a14:	20002014 	.word	0x20002014

08007a18 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8007a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 8007a1e:	f7ff ffcd 	bl	80079bc <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007a22:	9401      	str	r4, [sp, #4]
 8007a24:	3c01      	subs	r4, #1
 8007a26:	00e7      	lsls	r7, r4, #3
 8007a28:	1b3b      	subs	r3, r7, r4
 8007a2a:	00dd      	lsls	r5, r3, #3
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <SwitchStreamDMAToMsg+0x54>)
 8007a2e:	18ed      	adds	r5, r5, r3
 8007a30:	4e0f      	ldr	r6, [pc, #60]	; (8007a70 <SwitchStreamDMAToMsg+0x58>)
 8007a32:	1b3a      	subs	r2, r7, r4
 8007a34:	00d3      	lsls	r3, r2, #3
 8007a36:	5999      	ldr	r1, [r3, r6]
 8007a38:	0028      	movs	r0, r5
 8007a3a:	f005 fff3 	bl	800da24 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 8007a3e:	1b3a      	subs	r2, r7, r4
 8007a40:	00d3      	lsls	r3, r2, #3
 8007a42:	18f3      	adds	r3, r6, r3
 8007a44:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007a46:	f004 fbcb 	bl	800c1e0 <GetPort>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	4a09      	ldr	r2, [pc, #36]	; (8007a74 <SwitchStreamDMAToMsg+0x5c>)
 8007a4e:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 8007a50:	1b3f      	subs	r7, r7, r4
 8007a52:	00fa      	lsls	r2, r7, #3
 8007a54:	5193      	str	r3, [r2, r6]
	dmaStreamDst[port - 1] =0;
 8007a56:	00a4      	lsls	r4, r4, #2
 8007a58:	4a07      	ldr	r2, [pc, #28]	; (8007a78 <SwitchStreamDMAToMsg+0x60>)
 8007a5a:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8007a5c:	9801      	ldr	r0, [sp, #4]
 8007a5e:	f007 fff5 	bl	800fa4c <GetUart>
 8007a62:	0029      	movs	r1, r5
 8007a64:	f006 fd4e 	bl	800e504 <DMA_MSG_RX_Setup>
	
}
 8007a68:	b003      	add	sp, #12
 8007a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a6c:	20001e1c 	.word	0x20001e1c
 8007a70:	20002014 	.word	0x20002014
 8007a74:	200010ec 	.word	0x200010ec
 8007a78:	200016dc 	.word	0x200016dc

08007a7c <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	0005      	movs	r5, r0
 8007a80:	000e      	movs	r6, r1
 8007a82:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007a84:	f004 fbac 	bl	800c1e0 <GetPort>
 8007a88:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007a8a:	4b0e      	ldr	r3, [pc, #56]	; (8007ac4 <StartDMAstream+0x48>)
 8007a8c:	5c1b      	ldrb	r3, [r3, r0]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d901      	bls.n	8007a96 <StartDMAstream+0x1a>
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d113      	bne.n	8007abe <StartDMAstream+0x42>
	{
		SwitchMsgDMAToStream(srcPort);
 8007a96:	0020      	movs	r0, r4
 8007a98:	f7ff ffaa 	bl	80079f0 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007a9c:	1e63      	subs	r3, r4, #1
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4a09      	ldr	r2, [pc, #36]	; (8007ac8 <StartDMAstream+0x4c>)
 8007aa2:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 8007aa4:	4a07      	ldr	r2, [pc, #28]	; (8007ac4 <StartDMAstream+0x48>)
 8007aa6:	2102      	movs	r1, #2
 8007aa8:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007aaa:	4a08      	ldr	r2, [pc, #32]	; (8007acc <StartDMAstream+0x50>)
 8007aac:	2100      	movs	r1, #0
 8007aae:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007ab0:	003a      	movs	r2, r7
 8007ab2:	0031      	movs	r1, r6
 8007ab4:	0028      	movs	r0, r5
 8007ab6:	f006 fd85 	bl	800e5c4 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007aba:	2000      	movs	r0, #0
}
 8007abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007abe:	2017      	movs	r0, #23
 8007ac0:	e7fc      	b.n	8007abc <StartDMAstream+0x40>
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	200010ec 	.word	0x200010ec
 8007ac8:	200016dc 	.word	0x200016dc
 8007acc:	200016c8 	.word	0x200016c8

08007ad0 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007ad4:	4b13      	ldr	r3, [pc, #76]	; (8007b24 <DMA_IRQHandler+0x54>)
 8007ad6:	5c1b      	ldrb	r3, [r3, r0]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d008      	beq.n	8007aee <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007adc:	3c01      	subs	r4, #1
 8007ade:	00e3      	lsls	r3, r4, #3
 8007ae0:	1b1c      	subs	r4, r3, r4
 8007ae2:	00e0      	lsls	r0, r4, #3
 8007ae4:	4b10      	ldr	r3, [pc, #64]	; (8007b28 <DMA_IRQHandler+0x58>)
 8007ae6:	18c0      	adds	r0, r0, r3
 8007ae8:	f00a fed6 	bl	8012898 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007aec:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007aee:	1e45      	subs	r5, r0, #1
 8007af0:	00eb      	lsls	r3, r5, #3
 8007af2:	1b5b      	subs	r3, r3, r5
 8007af4:	00d8      	lsls	r0, r3, #3
 8007af6:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <DMA_IRQHandler+0x5c>)
 8007af8:	18c0      	adds	r0, r0, r3
 8007afa:	f00a fecd 	bl	8012898 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007afe:	00aa      	lsls	r2, r5, #2
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <DMA_IRQHandler+0x60>)
 8007b02:	58d3      	ldr	r3, [r2, r3]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d004      	beq.n	8007b12 <DMA_IRQHandler+0x42>
			++dmaStreamCount[port - 1];
 8007b08:	490a      	ldr	r1, [pc, #40]	; (8007b34 <DMA_IRQHandler+0x64>)
 8007b0a:	0010      	movs	r0, r2
 8007b0c:	5852      	ldr	r2, [r2, r1]
 8007b0e:	3201      	adds	r2, #1
 8007b10:	5042      	str	r2, [r0, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 8007b12:	00ad      	lsls	r5, r5, #2
 8007b14:	4a07      	ldr	r2, [pc, #28]	; (8007b34 <DMA_IRQHandler+0x64>)
 8007b16:	58aa      	ldr	r2, [r5, r2]
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d8e7      	bhi.n	8007aec <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007b1c:	0020      	movs	r0, r4
 8007b1e:	f7ff ff4d 	bl	80079bc <StopStreamDMA>
}
 8007b22:	e7e3      	b.n	8007aec <DMA_IRQHandler+0x1c>
 8007b24:	200010ec 	.word	0x200010ec
 8007b28:	20001e1c 	.word	0x20001e1c
 8007b2c:	20002014 	.word	0x20002014
 8007b30:	200016f0 	.word	0x200016f0
 8007b34:	200016c8 	.word	0x200016c8

08007b38 <ResetUartORE>:
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007b38:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <ResetUartORE+0x1c>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007b40:	4a05      	ldr	r2, [pc, #20]	; (8007b58 <ResetUartORE+0x20>)
 8007b42:	6812      	ldr	r2, [r2, #0]
 8007b44:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007b46:	4a05      	ldr	r2, [pc, #20]	; (8007b5c <ResetUartORE+0x24>)
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007b4c:	4a04      	ldr	r2, [pc, #16]	; (8007b60 <ResetUartORE+0x28>)
 8007b4e:	6812      	ldr	r2, [r2, #0]
 8007b50:	6213      	str	r3, [r2, #32]
#endif
}
 8007b52:	4770      	bx	lr
 8007b54:	200073b0 	.word	0x200073b0
 8007b58:	20007170 	.word	0x20007170
 8007b5c:	200071e4 	.word	0x200071e4
 8007b60:	200072cc 	.word	0x200072cc

08007b64 <EE_FindValidPage>:
 */
static uint16_t EE_FindValidPage(uint8_t Operation){
	uint16_t PageStatusA =6, PageStatusB =6;
	
	/* Get PageA actual status */
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007b64:	4b13      	ldr	r3, [pc, #76]	; (8007bb4 <EE_FindValidPage+0x50>)
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
	
	/* Get PageB actual status */
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007b6a:	4a13      	ldr	r2, [pc, #76]	; (8007bb8 <EE_FindValidPage+0x54>)
 8007b6c:	8812      	ldrh	r2, [r2, #0]
 8007b6e:	b292      	uxth	r2, r2
	
	/* Write or read operation */
	switch(Operation){
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d00f      	beq.n	8007b94 <EE_FindValidPage+0x30>
 8007b74:	2801      	cmp	r0, #1
 8007b76:	d113      	bne.n	8007ba0 <EE_FindValidPage+0x3c>
		case WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
			if(PageStatusB == VALID_PAGE){
 8007b78:	2a00      	cmp	r2, #0
 8007b7a:	d104      	bne.n	8007b86 <EE_FindValidPage+0x22>
				/* PageA receiving data */
				if(PageStatusA == RECEIVE_DATA){
 8007b7c:	490f      	ldr	r1, [pc, #60]	; (8007bbc <EE_FindValidPage+0x58>)
 8007b7e:	428b      	cmp	r3, r1
 8007b80:	d111      	bne.n	8007ba6 <EE_FindValidPage+0x42>
					return PAGEA; /* PageA valid */
 8007b82:	0013      	movs	r3, r2
 8007b84:	e00d      	b.n	8007ba2 <EE_FindValidPage+0x3e>
				}
				else{
					return PAGEB; /* PageB valid */
				}
			}
			else if(PageStatusA == VALID_PAGE){
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10f      	bne.n	8007baa <EE_FindValidPage+0x46>
				/* PageB receiving data */
				if(PageStatusB == RECEIVE_DATA){
 8007b8a:	490c      	ldr	r1, [pc, #48]	; (8007bbc <EE_FindValidPage+0x58>)
 8007b8c:	428a      	cmp	r2, r1
 8007b8e:	d108      	bne.n	8007ba2 <EE_FindValidPage+0x3e>
					return PAGEB; /* PageB valid */
 8007b90:	3302      	adds	r3, #2
 8007b92:	e006      	b.n	8007ba2 <EE_FindValidPage+0x3e>
			else{
				return NO_VALID_PAGE; /* No valid Page */
			}
			
		case READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
			if(PageStatusA == VALID_PAGE){
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <EE_FindValidPage+0x3e>
				return PAGEA; /* PageA valid */
			}
			else if(PageStatusB == VALID_PAGE){
 8007b98:	2a00      	cmp	r2, #0
 8007b9a:	d108      	bne.n	8007bae <EE_FindValidPage+0x4a>
				return PAGEB; /* PageB valid */
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e000      	b.n	8007ba2 <EE_FindValidPage+0x3e>
			else{
				return NO_VALID_PAGE; /* No valid Page */
			}
			
		default:
			return PAGEA; /* PageA valid */
 8007ba0:	2300      	movs	r3, #0
	}
}
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	4770      	bx	lr
					return PAGEB; /* PageB valid */
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e7fb      	b.n	8007ba2 <EE_FindValidPage+0x3e>
				return NO_VALID_PAGE; /* No valid Page */
 8007baa:	23ab      	movs	r3, #171	; 0xab
 8007bac:	e7f9      	b.n	8007ba2 <EE_FindValidPage+0x3e>
				return NO_VALID_PAGE; /* No valid Page */
 8007bae:	23ab      	movs	r3, #171	; 0xab
 8007bb0:	e7f7      	b.n	8007ba2 <EE_FindValidPage+0x3e>
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	0801e000 	.word	0x0801e000
 8007bb8:	0801f000 	.word	0x0801f000
 8007bbc:	0000eeee 	.word	0x0000eeee

08007bc0 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	0005      	movs	r5, r0
 8007bc4:	000e      	movs	r6, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 8007bc6:	f00b fab3 	bl	8013130 <HAL_FLASH_Unlock>
	
	/* Get valid Page for write operation */
	ValidPage =EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8007bca:	2001      	movs	r0, #1
 8007bcc:	f7ff ffca 	bl	8007b64 <EE_FindValidPage>
 8007bd0:	0003      	movs	r3, r0
	
	/* Check if there is no valid page */
	if(ValidPage == NO_VALID_PAGE){
 8007bd2:	28ab      	cmp	r0, #171	; 0xab
 8007bd4:	d03d      	beq.n	8007c52 <EE_VerifyPageFullWriteVariable+0x92>
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 8007bd6:	4b20      	ldr	r3, [pc, #128]	; (8007c58 <EE_VerifyPageFullWriteVariable+0x98>)
 8007bd8:	18c4      	adds	r4, r0, r3
 8007bda:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 8007bdc:	3002      	adds	r0, #2
 8007bde:	02c0      	lsls	r0, r0, #11
 8007be0:	4b1e      	ldr	r3, [pc, #120]	; (8007c5c <EE_VerifyPageFullWriteVariable+0x9c>)
 8007be2:	469c      	mov	ip, r3
 8007be4:	4460      	add	r0, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
 8007be6:	4284      	cmp	r4, r0
 8007be8:	d230      	bcs.n	8007c4c <EE_VerifyPageFullWriteVariable+0x8c>
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	3301      	adds	r3, #1
 8007bee:	d001      	beq.n	8007bf4 <EE_VerifyPageFullWriteVariable+0x34>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 8007bf0:	3404      	adds	r4, #4
 8007bf2:	e7f8      	b.n	8007be6 <EE_VerifyPageFullWriteVariable+0x26>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 8007bf4:	0032      	movs	r2, r6
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	0021      	movs	r1, r4
 8007bfa:	2001      	movs	r0, #1
 8007bfc:	f00b fae4 	bl	80131c8 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c00:	4817      	ldr	r0, [pc, #92]	; (8007c60 <EE_VerifyPageFullWriteVariable+0xa0>)
 8007c02:	f00b fab3 	bl	801316c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d003      	beq.n	8007c12 <EE_VerifyPageFullWriteVariable+0x52>
				return pFlash.ErrorCode;
 8007c0a:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	e01f      	b.n	8007c52 <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c12:	4a15      	ldr	r2, [pc, #84]	; (8007c68 <EE_VerifyPageFullWriteVariable+0xa8>)
 8007c14:	6913      	ldr	r3, [r2, #16]
 8007c16:	2101      	movs	r1, #1
 8007c18:	438b      	bics	r3, r1
 8007c1a:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007c1c:	1ca1      	adds	r1, r4, #2
 8007c1e:	002a      	movs	r2, r5
 8007c20:	2300      	movs	r3, #0
 8007c22:	2001      	movs	r0, #1
 8007c24:	f00b fad0 	bl	80131c8 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c28:	480d      	ldr	r0, [pc, #52]	; (8007c60 <EE_VerifyPageFullWriteVariable+0xa0>)
 8007c2a:	f00b fa9f 	bl	801316c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d003      	beq.n	8007c3a <EE_VerifyPageFullWriteVariable+0x7a>
				return pFlash.ErrorCode;
 8007c32:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	e00b      	b.n	8007c52 <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c3a:	4a0b      	ldr	r2, [pc, #44]	; (8007c68 <EE_VerifyPageFullWriteVariable+0xa8>)
 8007c3c:	6913      	ldr	r3, [r2, #16]
 8007c3e:	2101      	movs	r1, #1
 8007c40:	438b      	bics	r3, r1
 8007c42:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	e002      	b.n	8007c52 <EE_VerifyPageFullWriteVariable+0x92>
		}
	}
	
	HAL_FLASH_Lock();
 8007c4c:	f00b fa84 	bl	8013158 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8007c50:	2380      	movs	r3, #128	; 0x80
}
 8007c52:	0018      	movs	r0, r3
 8007c54:	bd70      	pop	{r4, r5, r6, pc}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	0001003c 	.word	0x0001003c
 8007c5c:	0801dffe 	.word	0x0801dffe
 8007c60:	0000c350 	.word	0x0000c350
 8007c64:	20007558 	.word	0x20007558
 8007c68:	40022000 	.word	0x40022000

08007c6c <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	0005      	movs	r5, r0
 8007c70:	000c      	movs	r4, r1
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 8007c72:	2000      	movs	r0, #0
 8007c74:	f7ff ff76 	bl	8007b64 <EE_FindValidPage>
 8007c78:	0003      	movs	r3, r0
	if(ValidPage == NO_VALID_PAGE){
 8007c7a:	28ab      	cmp	r0, #171	; 0xab
 8007c7c:	d016      	beq.n	8007cac <EE_ReadVariable+0x40>
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 8007c7e:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <EE_ReadVariable+0x44>)
 8007c80:	18c2      	adds	r2, r0, r3
 8007c82:	02d2      	lsls	r2, r2, #11
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 8007c84:	3002      	adds	r0, #2
 8007c86:	02c0      	lsls	r0, r0, #11
 8007c88:	4b0a      	ldr	r3, [pc, #40]	; (8007cb4 <EE_ReadVariable+0x48>)
 8007c8a:	469c      	mov	ip, r3
 8007c8c:	4460      	add	r0, ip
	while(Address > (PageStartAddress + 2)){
 8007c8e:	1c93      	adds	r3, r2, #2
 8007c90:	4283      	cmp	r3, r0
 8007c92:	d20a      	bcs.n	8007caa <EE_ReadVariable+0x3e>
		AddressValue =(*(__IO uint16_t* )Address);
 8007c94:	8803      	ldrh	r3, [r0, #0]
 8007c96:	b29b      	uxth	r3, r3
		if(AddressValue == VirtAddress){
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	d001      	beq.n	8007ca0 <EE_ReadVariable+0x34>
			Address =Address - 4;
 8007c9c:	3804      	subs	r0, #4
 8007c9e:	e7f6      	b.n	8007c8e <EE_ReadVariable+0x22>
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007ca0:	3802      	subs	r0, #2
 8007ca2:	8803      	ldrh	r3, [r0, #0]
 8007ca4:	8023      	strh	r3, [r4, #0]
			ReadStatus =0;
 8007ca6:	2300      	movs	r3, #0
			break;
 8007ca8:	e000      	b.n	8007cac <EE_ReadVariable+0x40>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 8007caa:	2301      	movs	r3, #1
}
 8007cac:	0018      	movs	r0, r3
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	0001003c 	.word	0x0001003c
 8007cb4:	0801dffe 	.word	0x0801dffe

08007cb8 <EE_PageTransfer>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_PageTransfer(uint16_t VirtAddress,uint16_t Data){
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	0006      	movs	r6, r0
 8007cbc:	000c      	movs	r4, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007cbe:	f00b fa37 	bl	8013130 <HAL_FLASH_Unlock>
	
	/* Get active Page for read operation */
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	f7ff ff4e 	bl	8007b64 <EE_FindValidPage>
	
	if(ValidPage == PAGEB) /* PageB valid */
 8007cc8:	2802      	cmp	r0, #2
 8007cca:	d013      	beq.n	8007cf4 <EE_PageTransfer+0x3c>
		NewPageAddress = PAGEA1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEB1_BASE_ADDRESS;
	}
	else if(ValidPage == PAGEA) /* PageA valid */
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d000      	beq.n	8007cd2 <EE_PageTransfer+0x1a>
 8007cd0:	e06d      	b.n	8007dae <EE_PageTransfer+0xf6>
	{
		/* New page address where variable will be moved to */
		NewPageAddress = PAGEB1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007cd2:	4f38      	ldr	r7, [pc, #224]	; (8007db4 <EE_PageTransfer+0xfc>)
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007cd4:	4d38      	ldr	r5, [pc, #224]	; (8007db8 <EE_PageTransfer+0x100>)
	else{
		return NO_VALID_PAGE; /* No valid Page */
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 8007cd6:	4a39      	ldr	r2, [pc, #228]	; (8007dbc <EE_PageTransfer+0x104>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	0029      	movs	r1, r5
 8007cdc:	2001      	movs	r0, #1
 8007cde:	f00b fa73 	bl	80131c8 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ce2:	4837      	ldr	r0, [pc, #220]	; (8007dc0 <EE_PageTransfer+0x108>)
 8007ce4:	f00b fa42 	bl	801316c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d006      	beq.n	8007cfa <EE_PageTransfer+0x42>
		return pFlash.ErrorCode;
 8007cec:	4b35      	ldr	r3, [pc, #212]	; (8007dc4 <EE_PageTransfer+0x10c>)
 8007cee:	69d8      	ldr	r0, [r3, #28]
 8007cf0:	b280      	uxth	r0, r0
	
	HAL_FLASH_Lock();
	
	/* Return last operation flash status */
	return FlashStatus;
}
 8007cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007cf4:	4f30      	ldr	r7, [pc, #192]	; (8007db8 <EE_PageTransfer+0x100>)
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007cf6:	4d2f      	ldr	r5, [pc, #188]	; (8007db4 <EE_PageTransfer+0xfc>)
 8007cf8:	e7ed      	b.n	8007cd6 <EE_PageTransfer+0x1e>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007cfa:	4a33      	ldr	r2, [pc, #204]	; (8007dc8 <EE_PageTransfer+0x110>)
 8007cfc:	6913      	ldr	r3, [r2, #16]
 8007cfe:	2101      	movs	r1, #1
 8007d00:	438b      	bics	r3, r1
 8007d02:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007d04:	0021      	movs	r1, r4
 8007d06:	0030      	movs	r0, r6
 8007d08:	f7ff ff5a 	bl	8007bc0 <EE_VerifyPageFullWriteVariable>
	if(EepromStatus != HAL_OK){
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d1f0      	bne.n	8007cf2 <EE_PageTransfer+0x3a>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007d10:	2401      	movs	r4, #1
 8007d12:	e001      	b.n	8007d18 <EE_PageTransfer+0x60>
 8007d14:	3401      	adds	r4, #1
 8007d16:	b2a4      	uxth	r4, r4
 8007d18:	2380      	movs	r3, #128	; 0x80
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	d80f      	bhi.n	8007d40 <EE_PageTransfer+0x88>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007d20:	42b4      	cmp	r4, r6
 8007d22:	d0f7      	beq.n	8007d14 <EE_PageTransfer+0x5c>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007d24:	4929      	ldr	r1, [pc, #164]	; (8007dcc <EE_PageTransfer+0x114>)
 8007d26:	0020      	movs	r0, r4
 8007d28:	f7ff ffa0 	bl	8007c6c <EE_ReadVariable>
			if(ReadStatus != 0x1){
 8007d2c:	2801      	cmp	r0, #1
 8007d2e:	d0f1      	beq.n	8007d14 <EE_PageTransfer+0x5c>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007d30:	4b26      	ldr	r3, [pc, #152]	; (8007dcc <EE_PageTransfer+0x114>)
 8007d32:	8819      	ldrh	r1, [r3, #0]
 8007d34:	0020      	movs	r0, r4
 8007d36:	f7ff ff43 	bl	8007bc0 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d0ea      	beq.n	8007d14 <EE_PageTransfer+0x5c>
 8007d3e:	e7d8      	b.n	8007cf2 <EE_PageTransfer+0x3a>
	FLASH_PageErase(OldPageAddress);
 8007d40:	0038      	movs	r0, r7
 8007d42:	f00b faa3 	bl	801328c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d46:	481e      	ldr	r0, [pc, #120]	; (8007dc0 <EE_PageTransfer+0x108>)
 8007d48:	f00b fa10 	bl	801316c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d003      	beq.n	8007d58 <EE_PageTransfer+0xa0>
		return pFlash.ErrorCode;
 8007d50:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <EE_PageTransfer+0x10c>)
 8007d52:	69d8      	ldr	r0, [r3, #28]
 8007d54:	b280      	uxth	r0, r0
 8007d56:	e7cc      	b.n	8007cf2 <EE_PageTransfer+0x3a>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007d58:	2380      	movs	r3, #128	; 0x80
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	18f8      	adds	r0, r7, r3
 8007d5e:	f00b fa95 	bl	801328c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d62:	4817      	ldr	r0, [pc, #92]	; (8007dc0 <EE_PageTransfer+0x108>)
 8007d64:	f00b fa02 	bl	801316c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d003      	beq.n	8007d74 <EE_PageTransfer+0xbc>
			return pFlash.ErrorCode;
 8007d6c:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <EE_PageTransfer+0x10c>)
 8007d6e:	69d8      	ldr	r0, [r3, #28]
 8007d70:	b280      	uxth	r0, r0
 8007d72:	e7be      	b.n	8007cf2 <EE_PageTransfer+0x3a>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d74:	4a14      	ldr	r2, [pc, #80]	; (8007dc8 <EE_PageTransfer+0x110>)
 8007d76:	6913      	ldr	r3, [r2, #16]
 8007d78:	2102      	movs	r1, #2
 8007d7a:	438b      	bics	r3, r1
 8007d7c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2300      	movs	r3, #0
 8007d82:	0029      	movs	r1, r5
 8007d84:	2001      	movs	r0, #1
 8007d86:	f00b fa1f 	bl	80131c8 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d8a:	480d      	ldr	r0, [pc, #52]	; (8007dc0 <EE_PageTransfer+0x108>)
 8007d8c:	f00b f9ee 	bl	801316c <FLASH_WaitForLastOperation>
 8007d90:	1e04      	subs	r4, r0, #0
	if(FlashStatus != HAL_OK){
 8007d92:	d003      	beq.n	8007d9c <EE_PageTransfer+0xe4>
		return pFlash.ErrorCode;
 8007d94:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <EE_PageTransfer+0x10c>)
 8007d96:	69d8      	ldr	r0, [r3, #28]
 8007d98:	b280      	uxth	r0, r0
 8007d9a:	e7aa      	b.n	8007cf2 <EE_PageTransfer+0x3a>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d9c:	4a0a      	ldr	r2, [pc, #40]	; (8007dc8 <EE_PageTransfer+0x110>)
 8007d9e:	6913      	ldr	r3, [r2, #16]
 8007da0:	2101      	movs	r1, #1
 8007da2:	438b      	bics	r3, r1
 8007da4:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007da6:	f00b f9d7 	bl	8013158 <HAL_FLASH_Lock>
	return FlashStatus;
 8007daa:	b2a0      	uxth	r0, r4
 8007dac:	e7a1      	b.n	8007cf2 <EE_PageTransfer+0x3a>
		return NO_VALID_PAGE; /* No valid Page */
 8007dae:	20ab      	movs	r0, #171	; 0xab
 8007db0:	e79f      	b.n	8007cf2 <EE_PageTransfer+0x3a>
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	0801e000 	.word	0x0801e000
 8007db8:	0801f000 	.word	0x0801f000
 8007dbc:	0000eeee 	.word	0x0000eeee
 8007dc0:	0000c350 	.word	0x0000c350
 8007dc4:	20007558 	.word	0x20007558
 8007dc8:	40022000 	.word	0x40022000
 8007dcc:	20001704 	.word	0x20001704

08007dd0 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	0005      	movs	r5, r0
 8007dd4:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007dd6:	f00b f9ab 	bl	8013130 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007dda:	0031      	movs	r1, r6
 8007ddc:	0028      	movs	r0, r5
 8007dde:	f7ff feef 	bl	8007bc0 <EE_VerifyPageFullWriteVariable>
 8007de2:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 8007de4:	2880      	cmp	r0, #128	; 0x80
 8007de6:	d003      	beq.n	8007df0 <EE_WriteVariable+0x20>
	HAL_FLASH_Lock();
 8007de8:	f00b f9b6 	bl	8013158 <HAL_FLASH_Lock>
}
 8007dec:	0020      	movs	r0, r4
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
		Status =EE_PageTransfer(VirtAddress,Data);
 8007df0:	0031      	movs	r1, r6
 8007df2:	0028      	movs	r0, r5
 8007df4:	f7ff ff60 	bl	8007cb8 <EE_PageTransfer>
 8007df8:	0004      	movs	r4, r0
 8007dfa:	e7f5      	b.n	8007de8 <EE_WriteVariable+0x18>

08007dfc <EE_Format>:
uint16_t EE_Format(void){
 8007dfc:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007dfe:	f00b f997 	bl	8013130 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007e02:	4829      	ldr	r0, [pc, #164]	; (8007ea8 <EE_Format+0xac>)
 8007e04:	f00b fa42 	bl	801328c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e08:	4828      	ldr	r0, [pc, #160]	; (8007eac <EE_Format+0xb0>)
 8007e0a:	f00b f9af 	bl	801316c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d003      	beq.n	8007e1a <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007e12:	4b27      	ldr	r3, [pc, #156]	; (8007eb0 <EE_Format+0xb4>)
 8007e14:	69d8      	ldr	r0, [r3, #28]
 8007e16:	b280      	uxth	r0, r0
}
 8007e18:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007e1a:	4826      	ldr	r0, [pc, #152]	; (8007eb4 <EE_Format+0xb8>)
 8007e1c:	f00b fa36 	bl	801328c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e20:	4822      	ldr	r0, [pc, #136]	; (8007eac <EE_Format+0xb0>)
 8007e22:	f00b f9a3 	bl	801316c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d003      	beq.n	8007e32 <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007e2a:	4b21      	ldr	r3, [pc, #132]	; (8007eb0 <EE_Format+0xb4>)
 8007e2c:	69d8      	ldr	r0, [r3, #28]
 8007e2e:	b280      	uxth	r0, r0
 8007e30:	e7f2      	b.n	8007e18 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007e32:	4a21      	ldr	r2, [pc, #132]	; (8007eb8 <EE_Format+0xbc>)
 8007e34:	6913      	ldr	r3, [r2, #16]
 8007e36:	2102      	movs	r1, #2
 8007e38:	438b      	bics	r3, r1
 8007e3a:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2300      	movs	r3, #0
 8007e40:	4919      	ldr	r1, [pc, #100]	; (8007ea8 <EE_Format+0xac>)
 8007e42:	2001      	movs	r0, #1
 8007e44:	f00b f9c0 	bl	80131c8 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e48:	4818      	ldr	r0, [pc, #96]	; (8007eac <EE_Format+0xb0>)
 8007e4a:	f00b f98f 	bl	801316c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d003      	beq.n	8007e5a <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007e52:	4b17      	ldr	r3, [pc, #92]	; (8007eb0 <EE_Format+0xb4>)
 8007e54:	69d8      	ldr	r0, [r3, #28]
 8007e56:	b280      	uxth	r0, r0
 8007e58:	e7de      	b.n	8007e18 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007e5a:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <EE_Format+0xbc>)
 8007e5c:	6913      	ldr	r3, [r2, #16]
 8007e5e:	2101      	movs	r1, #1
 8007e60:	438b      	bics	r3, r1
 8007e62:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e64:	4815      	ldr	r0, [pc, #84]	; (8007ebc <EE_Format+0xc0>)
 8007e66:	f00b fa11 	bl	801328c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e6a:	4810      	ldr	r0, [pc, #64]	; (8007eac <EE_Format+0xb0>)
 8007e6c:	f00b f97e 	bl	801316c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d003      	beq.n	8007e7c <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007e74:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <EE_Format+0xb4>)
 8007e76:	69d8      	ldr	r0, [r3, #28]
 8007e78:	b280      	uxth	r0, r0
 8007e7a:	e7cd      	b.n	8007e18 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e7c:	4810      	ldr	r0, [pc, #64]	; (8007ec0 <EE_Format+0xc4>)
 8007e7e:	f00b fa05 	bl	801328c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e82:	480a      	ldr	r0, [pc, #40]	; (8007eac <EE_Format+0xb0>)
 8007e84:	f00b f972 	bl	801316c <FLASH_WaitForLastOperation>
 8007e88:	1e04      	subs	r4, r0, #0
		if(FlashStatus != HAL_OK){
 8007e8a:	d003      	beq.n	8007e94 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007e8c:	4b08      	ldr	r3, [pc, #32]	; (8007eb0 <EE_Format+0xb4>)
 8007e8e:	69d8      	ldr	r0, [r3, #28]
 8007e90:	b280      	uxth	r0, r0
 8007e92:	e7c1      	b.n	8007e18 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007e94:	4a08      	ldr	r2, [pc, #32]	; (8007eb8 <EE_Format+0xbc>)
 8007e96:	6913      	ldr	r3, [r2, #16]
 8007e98:	2101      	movs	r1, #1
 8007e9a:	438b      	bics	r3, r1
 8007e9c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007e9e:	f00b f95b 	bl	8013158 <HAL_FLASH_Lock>
	return FlashStatus;
 8007ea2:	b2a0      	uxth	r0, r4
 8007ea4:	e7b8      	b.n	8007e18 <EE_Format+0x1c>
 8007ea6:	46c0      	nop			; (mov r8, r8)
 8007ea8:	0801e000 	.word	0x0801e000
 8007eac:	0000c350 	.word	0x0000c350
 8007eb0:	20007558 	.word	0x20007558
 8007eb4:	0801e800 	.word	0x0801e800
 8007eb8:	40022000 	.word	0x40022000
 8007ebc:	0801f000 	.word	0x0801f000
 8007ec0:	0801f800 	.word	0x0801f800

08007ec4 <EE_Init>:
uint16_t EE_Init(void){
 8007ec4:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 8007ec6:	f00b f933 	bl	8013130 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007eca:	4bbc      	ldr	r3, [pc, #752]	; (80081bc <EE_Init+0x2f8>)
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007ed0:	4abb      	ldr	r2, [pc, #748]	; (80081c0 <EE_Init+0x2fc>)
 8007ed2:	8812      	ldrh	r2, [r2, #0]
 8007ed4:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007ed6:	49bb      	ldr	r1, [pc, #748]	; (80081c4 <EE_Init+0x300>)
 8007ed8:	428b      	cmp	r3, r1
 8007eda:	d100      	bne.n	8007ede <EE_Init+0x1a>
 8007edc:	e072      	b.n	8007fc4 <EE_Init+0x100>
 8007ede:	49ba      	ldr	r1, [pc, #744]	; (80081c8 <EE_Init+0x304>)
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	d00f      	beq.n	8007f04 <EE_Init+0x40>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d100      	bne.n	8007eea <EE_Init+0x26>
 8007ee8:	e106      	b.n	80080f8 <EE_Init+0x234>
			FlashStatus =EE_Format();
 8007eea:	f7ff ff87 	bl	8007dfc <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007eee:	48b7      	ldr	r0, [pc, #732]	; (80081cc <EE_Init+0x308>)
 8007ef0:	f00b f93c 	bl	801316c <FLASH_WaitForLastOperation>
 8007ef4:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 8007ef6:	2d00      	cmp	r5, #0
 8007ef8:	d102      	bne.n	8007f00 <EE_Init+0x3c>
	HAL_FLASH_Lock();
 8007efa:	f00b f92d 	bl	8013158 <HAL_FLASH_Lock>
	return HAL_OK;
 8007efe:	2500      	movs	r5, #0
}
 8007f00:	0028      	movs	r0, r5
 8007f02:	bd70      	pop	{r4, r5, r6, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	d00d      	beq.n	8007f24 <EE_Init+0x60>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007f08:	4bae      	ldr	r3, [pc, #696]	; (80081c4 <EE_Init+0x300>)
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d028      	beq.n	8007f60 <EE_Init+0x9c>
				FlashStatus =EE_Format();
 8007f0e:	f7ff ff75 	bl	8007dfc <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f12:	48ae      	ldr	r0, [pc, #696]	; (80081cc <EE_Init+0x308>)
 8007f14:	f00b f92a 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d0ee      	beq.n	8007efa <EE_Init+0x36>
					return pFlash.ErrorCode;
 8007f1c:	4bac      	ldr	r3, [pc, #688]	; (80081d0 <EE_Init+0x30c>)
 8007f1e:	69dd      	ldr	r5, [r3, #28]
 8007f20:	b2ad      	uxth	r5, r5
 8007f22:	e7ed      	b.n	8007f00 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007f24:	48a5      	ldr	r0, [pc, #660]	; (80081bc <EE_Init+0x2f8>)
 8007f26:	f00b f9b1 	bl	801328c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f2a:	48a8      	ldr	r0, [pc, #672]	; (80081cc <EE_Init+0x308>)
 8007f2c:	f00b f91e 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d003      	beq.n	8007f3c <EE_Init+0x78>
					return pFlash.ErrorCode;
 8007f34:	4ba6      	ldr	r3, [pc, #664]	; (80081d0 <EE_Init+0x30c>)
 8007f36:	69dd      	ldr	r5, [r3, #28]
 8007f38:	b2ad      	uxth	r5, r5
 8007f3a:	e7e1      	b.n	8007f00 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007f3c:	48a5      	ldr	r0, [pc, #660]	; (80081d4 <EE_Init+0x310>)
 8007f3e:	f00b f9a5 	bl	801328c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f42:	48a2      	ldr	r0, [pc, #648]	; (80081cc <EE_Init+0x308>)
 8007f44:	f00b f912 	bl	801316c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d105      	bne.n	8007f58 <EE_Init+0x94>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007f4c:	4aa2      	ldr	r2, [pc, #648]	; (80081d8 <EE_Init+0x314>)
 8007f4e:	6913      	ldr	r3, [r2, #16]
 8007f50:	2102      	movs	r1, #2
 8007f52:	438b      	bics	r3, r1
 8007f54:	6113      	str	r3, [r2, #16]
 8007f56:	e7d0      	b.n	8007efa <EE_Init+0x36>
						return pFlash.ErrorCode;
 8007f58:	4b9d      	ldr	r3, [pc, #628]	; (80081d0 <EE_Init+0x30c>)
 8007f5a:	69dd      	ldr	r5, [r3, #28]
 8007f5c:	b2ad      	uxth	r5, r5
 8007f5e:	e7cf      	b.n	8007f00 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007f60:	4896      	ldr	r0, [pc, #600]	; (80081bc <EE_Init+0x2f8>)
 8007f62:	f00b f993 	bl	801328c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f66:	4899      	ldr	r0, [pc, #612]	; (80081cc <EE_Init+0x308>)
 8007f68:	f00b f900 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d003      	beq.n	8007f78 <EE_Init+0xb4>
					return pFlash.ErrorCode;
 8007f70:	4b97      	ldr	r3, [pc, #604]	; (80081d0 <EE_Init+0x30c>)
 8007f72:	69dd      	ldr	r5, [r3, #28]
 8007f74:	b2ad      	uxth	r5, r5
 8007f76:	e7c3      	b.n	8007f00 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007f78:	4896      	ldr	r0, [pc, #600]	; (80081d4 <EE_Init+0x310>)
 8007f7a:	f00b f987 	bl	801328c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f7e:	4893      	ldr	r0, [pc, #588]	; (80081cc <EE_Init+0x308>)
 8007f80:	f00b f8f4 	bl	801316c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d003      	beq.n	8007f90 <EE_Init+0xcc>
						return pFlash.ErrorCode;
 8007f88:	4b91      	ldr	r3, [pc, #580]	; (80081d0 <EE_Init+0x30c>)
 8007f8a:	69dd      	ldr	r5, [r3, #28]
 8007f8c:	b2ad      	uxth	r5, r5
 8007f8e:	e7b7      	b.n	8007f00 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007f90:	4a91      	ldr	r2, [pc, #580]	; (80081d8 <EE_Init+0x314>)
 8007f92:	6913      	ldr	r3, [r2, #16]
 8007f94:	2102      	movs	r1, #2
 8007f96:	438b      	bics	r3, r1
 8007f98:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4988      	ldr	r1, [pc, #544]	; (80081c0 <EE_Init+0x2fc>)
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	f00b f911 	bl	80131c8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007fa6:	4889      	ldr	r0, [pc, #548]	; (80081cc <EE_Init+0x308>)
 8007fa8:	f00b f8e0 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d105      	bne.n	8007fbc <EE_Init+0xf8>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007fb0:	4a89      	ldr	r2, [pc, #548]	; (80081d8 <EE_Init+0x314>)
 8007fb2:	6913      	ldr	r3, [r2, #16]
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	438b      	bics	r3, r1
 8007fb8:	6113      	str	r3, [r2, #16]
 8007fba:	e79e      	b.n	8007efa <EE_Init+0x36>
					return pFlash.ErrorCode;
 8007fbc:	4b84      	ldr	r3, [pc, #528]	; (80081d0 <EE_Init+0x30c>)
 8007fbe:	69dd      	ldr	r5, [r3, #28]
 8007fc0:	b2ad      	uxth	r5, r5
 8007fc2:	e79d      	b.n	8007f00 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007fc4:	2a00      	cmp	r2, #0
 8007fc6:	d02f      	beq.n	8008028 <EE_Init+0x164>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007fc8:	4b7f      	ldr	r3, [pc, #508]	; (80081c8 <EE_Init+0x304>)
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d062      	beq.n	8008094 <EE_Init+0x1d0>
				FlashStatus =EE_Format();
 8007fce:	f7ff ff15 	bl	8007dfc <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007fd2:	487e      	ldr	r0, [pc, #504]	; (80081cc <EE_Init+0x308>)
 8007fd4:	f00b f8ca 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d100      	bne.n	8007fde <EE_Init+0x11a>
 8007fdc:	e78d      	b.n	8007efa <EE_Init+0x36>
					return pFlash.ErrorCode;
 8007fde:	4b7c      	ldr	r3, [pc, #496]	; (80081d0 <EE_Init+0x30c>)
 8007fe0:	69dd      	ldr	r5, [r3, #28]
 8007fe2:	b2ad      	uxth	r5, r5
 8007fe4:	e78c      	b.n	8007f00 <EE_Init+0x3c>
						x =VarIdx;
 8007fe6:	b226      	sxth	r6, r4
 8007fe8:	e00a      	b.n	8008000 <EE_Init+0x13c>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007fea:	3401      	adds	r4, #1
 8007fec:	b2a4      	uxth	r4, r4
 8007fee:	2380      	movs	r3, #128	; 0x80
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	429c      	cmp	r4, r3
 8007ff4:	d81c      	bhi.n	8008030 <EE_Init+0x16c>
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007ff6:	4b79      	ldr	r3, [pc, #484]	; (80081dc <EE_Init+0x318>)
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	d0f2      	beq.n	8007fe6 <EE_Init+0x122>
					if(VarIdx != x){
 8008000:	42b4      	cmp	r4, r6
 8008002:	d0f2      	beq.n	8007fea <EE_Init+0x126>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8008004:	4976      	ldr	r1, [pc, #472]	; (80081e0 <EE_Init+0x31c>)
 8008006:	0020      	movs	r0, r4
 8008008:	f7ff fe30 	bl	8007c6c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800800c:	2801      	cmp	r0, #1
 800800e:	d0ec      	beq.n	8007fea <EE_Init+0x126>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8008010:	4b73      	ldr	r3, [pc, #460]	; (80081e0 <EE_Init+0x31c>)
 8008012:	8819      	ldrh	r1, [r3, #0]
 8008014:	0020      	movs	r0, r4
 8008016:	f7ff fdd3 	bl	8007bc0 <EE_VerifyPageFullWriteVariable>
 800801a:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800801c:	486b      	ldr	r0, [pc, #428]	; (80081cc <EE_Init+0x308>)
 800801e:	f00b f8a5 	bl	801316c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8008022:	2800      	cmp	r0, #0
 8008024:	d0e1      	beq.n	8007fea <EE_Init+0x126>
 8008026:	e76b      	b.n	8007f00 <EE_Init+0x3c>
	int16_t x =-1;
 8008028:	2601      	movs	r6, #1
 800802a:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800802c:	2401      	movs	r4, #1
 800802e:	e7de      	b.n	8007fee <EE_Init+0x12a>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8008030:	2200      	movs	r2, #0
 8008032:	2300      	movs	r3, #0
 8008034:	4961      	ldr	r1, [pc, #388]	; (80081bc <EE_Init+0x2f8>)
 8008036:	2001      	movs	r0, #1
 8008038:	f00b f8c6 	bl	80131c8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800803c:	4863      	ldr	r0, [pc, #396]	; (80081cc <EE_Init+0x308>)
 800803e:	f00b f895 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008042:	2800      	cmp	r0, #0
 8008044:	d003      	beq.n	800804e <EE_Init+0x18a>
					return pFlash.ErrorCode;
 8008046:	4b62      	ldr	r3, [pc, #392]	; (80081d0 <EE_Init+0x30c>)
 8008048:	69dd      	ldr	r5, [r3, #28]
 800804a:	b2ad      	uxth	r5, r5
 800804c:	e758      	b.n	8007f00 <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800804e:	4a62      	ldr	r2, [pc, #392]	; (80081d8 <EE_Init+0x314>)
 8008050:	6913      	ldr	r3, [r2, #16]
 8008052:	2101      	movs	r1, #1
 8008054:	438b      	bics	r3, r1
 8008056:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8008058:	4859      	ldr	r0, [pc, #356]	; (80081c0 <EE_Init+0x2fc>)
 800805a:	f00b f917 	bl	801328c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800805e:	485b      	ldr	r0, [pc, #364]	; (80081cc <EE_Init+0x308>)
 8008060:	f00b f884 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008064:	2800      	cmp	r0, #0
 8008066:	d003      	beq.n	8008070 <EE_Init+0x1ac>
					return pFlash.ErrorCode;
 8008068:	4b59      	ldr	r3, [pc, #356]	; (80081d0 <EE_Init+0x30c>)
 800806a:	69dd      	ldr	r5, [r3, #28]
 800806c:	b2ad      	uxth	r5, r5
 800806e:	e747      	b.n	8007f00 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8008070:	485c      	ldr	r0, [pc, #368]	; (80081e4 <EE_Init+0x320>)
 8008072:	f00b f90b 	bl	801328c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008076:	4855      	ldr	r0, [pc, #340]	; (80081cc <EE_Init+0x308>)
 8008078:	f00b f878 	bl	801316c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800807c:	2800      	cmp	r0, #0
 800807e:	d105      	bne.n	800808c <EE_Init+0x1c8>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8008080:	4a55      	ldr	r2, [pc, #340]	; (80081d8 <EE_Init+0x314>)
 8008082:	6913      	ldr	r3, [r2, #16]
 8008084:	2102      	movs	r1, #2
 8008086:	438b      	bics	r3, r1
 8008088:	6113      	str	r3, [r2, #16]
 800808a:	e736      	b.n	8007efa <EE_Init+0x36>
						return pFlash.ErrorCode;
 800808c:	4b50      	ldr	r3, [pc, #320]	; (80081d0 <EE_Init+0x30c>)
 800808e:	69dd      	ldr	r5, [r3, #28]
 8008090:	b2ad      	uxth	r5, r5
 8008092:	e735      	b.n	8007f00 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8008094:	484a      	ldr	r0, [pc, #296]	; (80081c0 <EE_Init+0x2fc>)
 8008096:	f00b f8f9 	bl	801328c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800809a:	484c      	ldr	r0, [pc, #304]	; (80081cc <EE_Init+0x308>)
 800809c:	f00b f866 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d003      	beq.n	80080ac <EE_Init+0x1e8>
					return pFlash.ErrorCode;
 80080a4:	4b4a      	ldr	r3, [pc, #296]	; (80081d0 <EE_Init+0x30c>)
 80080a6:	69dd      	ldr	r5, [r3, #28]
 80080a8:	b2ad      	uxth	r5, r5
 80080aa:	e729      	b.n	8007f00 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80080ac:	484d      	ldr	r0, [pc, #308]	; (80081e4 <EE_Init+0x320>)
 80080ae:	f00b f8ed 	bl	801328c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80080b2:	4846      	ldr	r0, [pc, #280]	; (80081cc <EE_Init+0x308>)
 80080b4:	f00b f85a 	bl	801316c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d003      	beq.n	80080c4 <EE_Init+0x200>
						return pFlash.ErrorCode;
 80080bc:	4b44      	ldr	r3, [pc, #272]	; (80081d0 <EE_Init+0x30c>)
 80080be:	69dd      	ldr	r5, [r3, #28]
 80080c0:	b2ad      	uxth	r5, r5
 80080c2:	e71d      	b.n	8007f00 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80080c4:	4a44      	ldr	r2, [pc, #272]	; (80081d8 <EE_Init+0x314>)
 80080c6:	6913      	ldr	r3, [r2, #16]
 80080c8:	2102      	movs	r1, #2
 80080ca:	438b      	bics	r3, r1
 80080cc:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 80080ce:	2200      	movs	r2, #0
 80080d0:	2300      	movs	r3, #0
 80080d2:	493a      	ldr	r1, [pc, #232]	; (80081bc <EE_Init+0x2f8>)
 80080d4:	2001      	movs	r0, #1
 80080d6:	f00b f877 	bl	80131c8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80080da:	483c      	ldr	r0, [pc, #240]	; (80081cc <EE_Init+0x308>)
 80080dc:	f00b f846 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d003      	beq.n	80080ec <EE_Init+0x228>
					return pFlash.ErrorCode;
 80080e4:	4b3a      	ldr	r3, [pc, #232]	; (80081d0 <EE_Init+0x30c>)
 80080e6:	69dd      	ldr	r5, [r3, #28]
 80080e8:	b2ad      	uxth	r5, r5
 80080ea:	e709      	b.n	8007f00 <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80080ec:	4a3a      	ldr	r2, [pc, #232]	; (80081d8 <EE_Init+0x314>)
 80080ee:	6913      	ldr	r3, [r2, #16]
 80080f0:	2101      	movs	r1, #1
 80080f2:	438b      	bics	r3, r1
 80080f4:	6113      	str	r3, [r2, #16]
 80080f6:	e700      	b.n	8007efa <EE_Init+0x36>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 80080f8:	2a00      	cmp	r2, #0
 80080fa:	d006      	beq.n	800810a <EE_Init+0x246>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 80080fc:	4b32      	ldr	r3, [pc, #200]	; (80081c8 <EE_Init+0x304>)
 80080fe:	429a      	cmp	r2, r3
 8008100:	d00d      	beq.n	800811e <EE_Init+0x25a>
	int16_t x =-1;
 8008102:	2601      	movs	r6, #1
 8008104:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8008106:	2401      	movs	r4, #1
 8008108:	e02b      	b.n	8008162 <EE_Init+0x29e>
				FlashStatus =EE_Format();
 800810a:	f7ff fe77 	bl	8007dfc <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800810e:	482f      	ldr	r0, [pc, #188]	; (80081cc <EE_Init+0x308>)
 8008110:	f00b f82c 	bl	801316c <FLASH_WaitForLastOperation>
 8008114:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK){
 8008116:	2d00      	cmp	r5, #0
 8008118:	d100      	bne.n	800811c <EE_Init+0x258>
 800811a:	e6ee      	b.n	8007efa <EE_Init+0x36>
 800811c:	e6f0      	b.n	8007f00 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800811e:	4828      	ldr	r0, [pc, #160]	; (80081c0 <EE_Init+0x2fc>)
 8008120:	f00b f8b4 	bl	801328c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008124:	4829      	ldr	r0, [pc, #164]	; (80081cc <EE_Init+0x308>)
 8008126:	f00b f821 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800812a:	2800      	cmp	r0, #0
 800812c:	d003      	beq.n	8008136 <EE_Init+0x272>
					return pFlash.ErrorCode;
 800812e:	4b28      	ldr	r3, [pc, #160]	; (80081d0 <EE_Init+0x30c>)
 8008130:	69dd      	ldr	r5, [r3, #28]
 8008132:	b2ad      	uxth	r5, r5
 8008134:	e6e4      	b.n	8007f00 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8008136:	482b      	ldr	r0, [pc, #172]	; (80081e4 <EE_Init+0x320>)
 8008138:	f00b f8a8 	bl	801328c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800813c:	4823      	ldr	r0, [pc, #140]	; (80081cc <EE_Init+0x308>)
 800813e:	f00b f815 	bl	801316c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8008142:	2800      	cmp	r0, #0
 8008144:	d105      	bne.n	8008152 <EE_Init+0x28e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8008146:	4a24      	ldr	r2, [pc, #144]	; (80081d8 <EE_Init+0x314>)
 8008148:	6913      	ldr	r3, [r2, #16]
 800814a:	2102      	movs	r1, #2
 800814c:	438b      	bics	r3, r1
 800814e:	6113      	str	r3, [r2, #16]
 8008150:	e6d3      	b.n	8007efa <EE_Init+0x36>
						return pFlash.ErrorCode;
 8008152:	4b1f      	ldr	r3, [pc, #124]	; (80081d0 <EE_Init+0x30c>)
 8008154:	69dd      	ldr	r5, [r3, #28]
 8008156:	b2ad      	uxth	r5, r5
 8008158:	e6d2      	b.n	8007f00 <EE_Init+0x3c>
						x =VarIdx;
 800815a:	b226      	sxth	r6, r4
 800815c:	e00a      	b.n	8008174 <EE_Init+0x2b0>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800815e:	3401      	adds	r4, #1
 8008160:	b2a4      	uxth	r4, r4
 8008162:	2380      	movs	r3, #128	; 0x80
 8008164:	00db      	lsls	r3, r3, #3
 8008166:	429c      	cmp	r4, r3
 8008168:	d818      	bhi.n	800819c <EE_Init+0x2d8>
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800816a:	4b1f      	ldr	r3, [pc, #124]	; (80081e8 <EE_Init+0x324>)
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	b29b      	uxth	r3, r3
 8008170:	42a3      	cmp	r3, r4
 8008172:	d0f2      	beq.n	800815a <EE_Init+0x296>
					if(VarIdx != x){
 8008174:	42b4      	cmp	r4, r6
 8008176:	d0f2      	beq.n	800815e <EE_Init+0x29a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8008178:	4919      	ldr	r1, [pc, #100]	; (80081e0 <EE_Init+0x31c>)
 800817a:	0020      	movs	r0, r4
 800817c:	f7ff fd76 	bl	8007c6c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8008180:	2801      	cmp	r0, #1
 8008182:	d0ec      	beq.n	800815e <EE_Init+0x29a>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8008184:	4b16      	ldr	r3, [pc, #88]	; (80081e0 <EE_Init+0x31c>)
 8008186:	8819      	ldrh	r1, [r3, #0]
 8008188:	0020      	movs	r0, r4
 800818a:	f7ff fd19 	bl	8007bc0 <EE_VerifyPageFullWriteVariable>
 800818e:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008190:	480e      	ldr	r0, [pc, #56]	; (80081cc <EE_Init+0x308>)
 8008192:	f00a ffeb 	bl	801316c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8008196:	2800      	cmp	r0, #0
 8008198:	d0e1      	beq.n	800815e <EE_Init+0x29a>
 800819a:	e6b1      	b.n	8007f00 <EE_Init+0x3c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800819c:	2200      	movs	r2, #0
 800819e:	2300      	movs	r3, #0
 80081a0:	4907      	ldr	r1, [pc, #28]	; (80081c0 <EE_Init+0x2fc>)
 80081a2:	2001      	movs	r0, #1
 80081a4:	f00b f810 	bl	80131c8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80081a8:	4808      	ldr	r0, [pc, #32]	; (80081cc <EE_Init+0x308>)
 80081aa:	f00a ffdf 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d01c      	beq.n	80081ec <EE_Init+0x328>
					return pFlash.ErrorCode;
 80081b2:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <EE_Init+0x30c>)
 80081b4:	69dd      	ldr	r5, [r3, #28]
 80081b6:	b2ad      	uxth	r5, r5
 80081b8:	e6a2      	b.n	8007f00 <EE_Init+0x3c>
 80081ba:	46c0      	nop			; (mov r8, r8)
 80081bc:	0801e000 	.word	0x0801e000
 80081c0:	0801f000 	.word	0x0801f000
 80081c4:	0000eeee 	.word	0x0000eeee
 80081c8:	0000ffff 	.word	0x0000ffff
 80081cc:	0000c350 	.word	0x0000c350
 80081d0:	20007558 	.word	0x20007558
 80081d4:	0801e800 	.word	0x0801e800
 80081d8:	40022000 	.word	0x40022000
 80081dc:	0801e006 	.word	0x0801e006
 80081e0:	20001704 	.word	0x20001704
 80081e4:	0801f800 	.word	0x0801f800
 80081e8:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80081ec:	4a11      	ldr	r2, [pc, #68]	; (8008234 <EE_Init+0x370>)
 80081ee:	6913      	ldr	r3, [r2, #16]
 80081f0:	2101      	movs	r1, #1
 80081f2:	438b      	bics	r3, r1
 80081f4:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80081f6:	4810      	ldr	r0, [pc, #64]	; (8008238 <EE_Init+0x374>)
 80081f8:	f00b f848 	bl	801328c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80081fc:	480f      	ldr	r0, [pc, #60]	; (800823c <EE_Init+0x378>)
 80081fe:	f00a ffb5 	bl	801316c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008202:	2800      	cmp	r0, #0
 8008204:	d003      	beq.n	800820e <EE_Init+0x34a>
					return pFlash.ErrorCode;
 8008206:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <EE_Init+0x37c>)
 8008208:	69dd      	ldr	r5, [r3, #28]
 800820a:	b2ad      	uxth	r5, r5
 800820c:	e678      	b.n	8007f00 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800820e:	480d      	ldr	r0, [pc, #52]	; (8008244 <EE_Init+0x380>)
 8008210:	f00b f83c 	bl	801328c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008214:	4809      	ldr	r0, [pc, #36]	; (800823c <EE_Init+0x378>)
 8008216:	f00a ffa9 	bl	801316c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800821a:	2800      	cmp	r0, #0
 800821c:	d105      	bne.n	800822a <EE_Init+0x366>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800821e:	4a05      	ldr	r2, [pc, #20]	; (8008234 <EE_Init+0x370>)
 8008220:	6913      	ldr	r3, [r2, #16]
 8008222:	2102      	movs	r1, #2
 8008224:	438b      	bics	r3, r1
 8008226:	6113      	str	r3, [r2, #16]
 8008228:	e667      	b.n	8007efa <EE_Init+0x36>
						return pFlash.ErrorCode;
 800822a:	4b05      	ldr	r3, [pc, #20]	; (8008240 <EE_Init+0x37c>)
 800822c:	69dd      	ldr	r5, [r3, #28]
 800822e:	b2ad      	uxth	r5, r5
 8008230:	e666      	b.n	8007f00 <EE_Init+0x3c>
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	40022000 	.word	0x40022000
 8008238:	0801e000 	.word	0x0801e000
 800823c:	0000c350 	.word	0x0000c350
 8008240:	20007558 	.word	0x20007558
 8008244:	0801e800 	.word	0x0801e800

08008248 <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	e020      	b.n	800828e <StartDefaultTask+0x46>
	/* Infinite loop */
	for(;;){
		/* Switch indicator LED according to mode */
		switch(indMode){
			case IND_PING:
				RTOS_IND_blink(200);
 800824c:	2580      	movs	r5, #128	; 0x80
 800824e:	012d      	lsls	r5, r5, #4
 8008250:	2490      	movs	r4, #144	; 0x90
 8008252:	05e4      	lsls	r4, r4, #23
 8008254:	2201      	movs	r2, #1
 8008256:	0029      	movs	r1, r5
 8008258:	0020      	movs	r0, r4
 800825a:	f00b f9cc 	bl	80135f6 <HAL_GPIO_WritePin>
 800825e:	20c8      	movs	r0, #200	; 0xc8
 8008260:	f007 fd46 	bl	800fcf0 <osDelay>
 8008264:	2200      	movs	r2, #0
 8008266:	0029      	movs	r1, r5
 8008268:	0020      	movs	r0, r4
 800826a:	f00b f9c4 	bl	80135f6 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800826e:	4b21      	ldr	r3, [pc, #132]	; (80082f4 <StartDefaultTask+0xac>)
 8008270:	2200      	movs	r2, #0
 8008272:	701a      	strb	r2, [r3, #0]
				break;
				
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8008274:	f000 ff16 	bl	80090a4 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8008278:	f7fd fb4e 	bl	8005918 <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 800827c:	4b1e      	ldr	r3, [pc, #120]	; (80082f8 <StartDefaultTask+0xb0>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <StartDefaultTask+0x42>
			delayButtonStateReset = false;
 8008284:	4b1d      	ldr	r3, [pc, #116]	; (80082fc <StartDefaultTask+0xb4>)
 8008286:	2200      	movs	r2, #0
 8008288:	701a      	strb	r2, [r3, #0]
		
		taskYIELD();
 800828a:	f009 fc1b 	bl	8011ac4 <vPortYield>
		switch(indMode){
 800828e:	4b19      	ldr	r3, [pc, #100]	; (80082f4 <StartDefaultTask+0xac>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d004      	beq.n	80082a0 <StartDefaultTask+0x58>
 8008296:	2b03      	cmp	r3, #3
 8008298:	d017      	beq.n	80082ca <StartDefaultTask+0x82>
 800829a:	2b01      	cmp	r3, #1
 800829c:	d1ea      	bne.n	8008274 <StartDefaultTask+0x2c>
 800829e:	e7d5      	b.n	800824c <StartDefaultTask+0x4>
				RTOS_IND_blink(100);
 80082a0:	2580      	movs	r5, #128	; 0x80
 80082a2:	012d      	lsls	r5, r5, #4
 80082a4:	2490      	movs	r4, #144	; 0x90
 80082a6:	05e4      	lsls	r4, r4, #23
 80082a8:	2201      	movs	r2, #1
 80082aa:	0029      	movs	r1, r5
 80082ac:	0020      	movs	r0, r4
 80082ae:	f00b f9a2 	bl	80135f6 <HAL_GPIO_WritePin>
 80082b2:	2064      	movs	r0, #100	; 0x64
 80082b4:	f007 fd1c 	bl	800fcf0 <osDelay>
 80082b8:	2200      	movs	r2, #0
 80082ba:	0029      	movs	r1, r5
 80082bc:	0020      	movs	r0, r4
 80082be:	f00b f99a 	bl	80135f6 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80082c2:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <StartDefaultTask+0xac>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	701a      	strb	r2, [r3, #0]
				break;
 80082c8:	e7d4      	b.n	8008274 <StartDefaultTask+0x2c>
				RTOS_IND_blink(30);
 80082ca:	2580      	movs	r5, #128	; 0x80
 80082cc:	012d      	lsls	r5, r5, #4
 80082ce:	2490      	movs	r4, #144	; 0x90
 80082d0:	05e4      	lsls	r4, r4, #23
 80082d2:	2201      	movs	r2, #1
 80082d4:	0029      	movs	r1, r5
 80082d6:	0020      	movs	r0, r4
 80082d8:	f00b f98d 	bl	80135f6 <HAL_GPIO_WritePin>
 80082dc:	201e      	movs	r0, #30
 80082de:	f007 fd07 	bl	800fcf0 <osDelay>
 80082e2:	2200      	movs	r2, #0
 80082e4:	0029      	movs	r1, r5
 80082e6:	0020      	movs	r0, r4
 80082e8:	f00b f985 	bl	80135f6 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80082ec:	4b01      	ldr	r3, [pc, #4]	; (80082f4 <StartDefaultTask+0xac>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	701a      	strb	r2, [r3, #0]
				break;
 80082f2:	e7bf      	b.n	8008274 <StartDefaultTask+0x2c>
 80082f4:	20000ef0 	.word	0x20000ef0
 80082f8:	20001787 	.word	0x20001787
 80082fc:	20001786 	.word	0x20001786

08008300 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 8008300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008302:	b08f      	sub	sp, #60	; 0x3c
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8008304:	25a0      	movs	r5, #160	; 0xa0
 8008306:	006d      	lsls	r5, r5, #1
 8008308:	2400      	movs	r4, #0
 800830a:	9403      	str	r4, [sp, #12]
 800830c:	9402      	str	r4, [sp, #8]
 800830e:	4b53      	ldr	r3, [pc, #332]	; (800845c <MX_FREERTOS_Init+0x15c>)
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	2603      	movs	r6, #3
 8008314:	9600      	str	r6, [sp, #0]
 8008316:	2300      	movs	r3, #0
 8008318:	002a      	movs	r2, r5
 800831a:	4951      	ldr	r1, [pc, #324]	; (8008460 <MX_FREERTOS_Init+0x160>)
 800831c:	4851      	ldr	r0, [pc, #324]	; (8008464 <MX_FREERTOS_Init+0x164>)
 800831e:	f008 fb7b 	bl	8010a18 <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8008322:	9403      	str	r4, [sp, #12]
 8008324:	9402      	str	r4, [sp, #8]
 8008326:	4b50      	ldr	r3, [pc, #320]	; (8008468 <MX_FREERTOS_Init+0x168>)
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	9600      	str	r6, [sp, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	002a      	movs	r2, r5
 8008330:	494e      	ldr	r1, [pc, #312]	; (800846c <MX_FREERTOS_Init+0x16c>)
 8008332:	484f      	ldr	r0, [pc, #316]	; (8008470 <MX_FREERTOS_Init+0x170>)
 8008334:	f008 fb70 	bl	8010a18 <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8008338:	9403      	str	r4, [sp, #12]
 800833a:	9402      	str	r4, [sp, #8]
 800833c:	4b4d      	ldr	r3, [pc, #308]	; (8008474 <MX_FREERTOS_Init+0x174>)
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	9600      	str	r6, [sp, #0]
 8008342:	2300      	movs	r3, #0
 8008344:	002a      	movs	r2, r5
 8008346:	494c      	ldr	r1, [pc, #304]	; (8008478 <MX_FREERTOS_Init+0x178>)
 8008348:	484c      	ldr	r0, [pc, #304]	; (800847c <MX_FREERTOS_Init+0x17c>)
 800834a:	f008 fb65 	bl	8010a18 <xTaskGenericCreate>
	vRegisterCLICommands();
 800834e:	f7ff fa73 	bl	8007838 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8008352:	9403      	str	r4, [sp, #12]
 8008354:	9402      	str	r4, [sp, #8]
 8008356:	4b4a      	ldr	r3, [pc, #296]	; (8008480 <MX_FREERTOS_Init+0x180>)
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	9600      	str	r6, [sp, #0]
 800835c:	2300      	movs	r3, #0
 800835e:	002a      	movs	r2, r5
 8008360:	4948      	ldr	r1, [pc, #288]	; (8008484 <MX_FREERTOS_Init+0x184>)
 8008362:	4849      	ldr	r0, [pc, #292]	; (8008488 <MX_FREERTOS_Init+0x188>)
 8008364:	f008 fb58 	bl	8010a18 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8008368:	4e48      	ldr	r6, [pc, #288]	; (800848c <MX_FREERTOS_Init+0x18c>)
 800836a:	9403      	str	r4, [sp, #12]
 800836c:	9402      	str	r4, [sp, #8]
 800836e:	4b48      	ldr	r3, [pc, #288]	; (8008490 <MX_FREERTOS_Init+0x190>)
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	2704      	movs	r7, #4
 8008374:	9700      	str	r7, [sp, #0]
 8008376:	2301      	movs	r3, #1
 8008378:	002a      	movs	r2, r5
 800837a:	4946      	ldr	r1, [pc, #280]	; (8008494 <MX_FREERTOS_Init+0x194>)
 800837c:	0030      	movs	r0, r6
 800837e:	f008 fb4b 	bl	8010a18 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8008382:	9403      	str	r4, [sp, #12]
 8008384:	9402      	str	r4, [sp, #8]
 8008386:	4b44      	ldr	r3, [pc, #272]	; (8008498 <MX_FREERTOS_Init+0x198>)
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	9700      	str	r7, [sp, #0]
 800838c:	2302      	movs	r3, #2
 800838e:	002a      	movs	r2, r5
 8008390:	4942      	ldr	r1, [pc, #264]	; (800849c <MX_FREERTOS_Init+0x19c>)
 8008392:	0030      	movs	r0, r6
 8008394:	f008 fb40 	bl	8010a18 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8008398:	9403      	str	r4, [sp, #12]
 800839a:	9402      	str	r4, [sp, #8]
 800839c:	4b40      	ldr	r3, [pc, #256]	; (80084a0 <MX_FREERTOS_Init+0x1a0>)
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	9700      	str	r7, [sp, #0]
 80083a2:	2303      	movs	r3, #3
 80083a4:	002a      	movs	r2, r5
 80083a6:	493f      	ldr	r1, [pc, #252]	; (80084a4 <MX_FREERTOS_Init+0x1a4>)
 80083a8:	0030      	movs	r0, r6
 80083aa:	f008 fb35 	bl	8010a18 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 80083ae:	9403      	str	r4, [sp, #12]
 80083b0:	9402      	str	r4, [sp, #8]
 80083b2:	4b3d      	ldr	r3, [pc, #244]	; (80084a8 <MX_FREERTOS_Init+0x1a8>)
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	9700      	str	r7, [sp, #0]
 80083b8:	2304      	movs	r3, #4
 80083ba:	002a      	movs	r2, r5
 80083bc:	493b      	ldr	r1, [pc, #236]	; (80084ac <MX_FREERTOS_Init+0x1ac>)
 80083be:	0030      	movs	r0, r6
 80083c0:	f008 fb2a 	bl	8010a18 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80083c4:	9403      	str	r4, [sp, #12]
 80083c6:	9402      	str	r4, [sp, #8]
 80083c8:	4b39      	ldr	r3, [pc, #228]	; (80084b0 <MX_FREERTOS_Init+0x1b0>)
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	9700      	str	r7, [sp, #0]
 80083ce:	2305      	movs	r3, #5
 80083d0:	002a      	movs	r2, r5
 80083d2:	4938      	ldr	r1, [pc, #224]	; (80084b4 <MX_FREERTOS_Init+0x1b4>)
 80083d4:	0030      	movs	r0, r6
 80083d6:	f008 fb1f 	bl	8010a18 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1);
 80083da:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80083dc:	2101      	movs	r1, #1
 80083de:	a80d      	add	r0, sp, #52	; 0x34
 80083e0:	f007 fc8e 	bl	800fd00 <osSemaphoreCreate>
 80083e4:	4e34      	ldr	r6, [pc, #208]	; (80084b8 <MX_FREERTOS_Init+0x1b8>)
 80083e6:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 80083e8:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80083ea:	2101      	movs	r1, #1
 80083ec:	a80c      	add	r0, sp, #48	; 0x30
 80083ee:	f007 fc87 	bl	800fd00 <osSemaphoreCreate>
 80083f2:	4d32      	ldr	r5, [pc, #200]	; (80084bc <MX_FREERTOS_Init+0x1bc>)
 80083f4:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3);
 80083f6:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80083f8:	2101      	movs	r1, #1
 80083fa:	a80b      	add	r0, sp, #44	; 0x2c
 80083fc:	f007 fc80 	bl	800fd00 <osSemaphoreCreate>
 8008400:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 8008402:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8008404:	2101      	movs	r1, #1
 8008406:	a80a      	add	r0, sp, #40	; 0x28
 8008408:	f007 fc7a 	bl	800fd00 <osSemaphoreCreate>
 800840c:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5);
 800840e:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8008410:	2101      	movs	r1, #1
 8008412:	a809      	add	r0, sp, #36	; 0x24
 8008414:	f007 fc74 	bl	800fd00 <osSemaphoreCreate>
 8008418:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 800841a:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 800841c:	2101      	movs	r1, #1
 800841e:	a808      	add	r0, sp, #32
 8008420:	f007 fc6e 	bl	800fd00 <osSemaphoreCreate>
 8008424:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7);
 8008426:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8008428:	2101      	movs	r1, #1
 800842a:	a807      	add	r0, sp, #28
 800842c:	f007 fc68 	bl	800fd00 <osSemaphoreCreate>
 8008430:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 8008432:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8008434:	2101      	movs	r1, #1
 8008436:	a806      	add	r0, sp, #24
 8008438:	f007 fc62 	bl	800fd00 <osSemaphoreCreate>
 800843c:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9);
 800843e:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8008440:	2101      	movs	r1, #1
 8008442:	a805      	add	r0, sp, #20
 8008444:	f007 fc5c 	bl	800fd00 <osSemaphoreCreate>
 8008448:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 800844a:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800844c:	2101      	movs	r1, #1
 800844e:	a804      	add	r0, sp, #16
 8008450:	f007 fc56 	bl	800fd00 <osSemaphoreCreate>
 8008454:	6168      	str	r0, [r5, #20]
}
 8008456:	b00f      	add	sp, #60	; 0x3c
 8008458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800845a:	46c0      	nop			; (mov r8, r8)
 800845c:	20001724 	.word	0x20001724
 8008460:	0801c798 	.word	0x0801c798
 8008464:	08008249 	.word	0x08008249
 8008468:	20001708 	.word	0x20001708
 800846c:	0801c7a4 	.word	0x0801c7a4
 8008470:	08009dcd 	.word	0x08009dcd
 8008474:	20001720 	.word	0x20001720
 8008478:	0801c7b0 	.word	0x0801c7b0
 800847c:	0801502f 	.word	0x0801502f
 8008480:	2000172c 	.word	0x2000172c
 8008484:	0801c7bc 	.word	0x0801c7bc
 8008488:	080055c5 	.word	0x080055c5
 800848c:	0800a24d 	.word	0x0800a24d
 8008490:	2000170c 	.word	0x2000170c
 8008494:	0801c7c4 	.word	0x0801c7c4
 8008498:	20001710 	.word	0x20001710
 800849c:	0801c7d0 	.word	0x0801c7d0
 80084a0:	20001714 	.word	0x20001714
 80084a4:	0801c7dc 	.word	0x0801c7dc
 80084a8:	20001718 	.word	0x20001718
 80084ac:	0801c7e8 	.word	0x0801c7e8
 80084b0:	2000171c 	.word	0x2000171c
 80084b4:	0801c7f4 	.word	0x0801c7f4
 80084b8:	200070e8 	.word	0x200070e8
 80084bc:	200070cc 	.word	0x200070cc

080084c0 <vMainConfigureTimerForRunTimeStats>:
	
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
 80084c0:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80084c2:	4b04      	ldr	r3, [pc, #16]	; (80084d4 <vMainConfigureTimerForRunTimeStats+0x14>)
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	4904      	ldr	r1, [pc, #16]	; (80084d8 <vMainConfigureTimerForRunTimeStats+0x18>)
 80084c8:	f7f7 fe42 	bl	8000150 <__udivsi3>
 80084cc:	4b03      	ldr	r3, [pc, #12]	; (80084dc <vMainConfigureTimerForRunTimeStats+0x1c>)
 80084ce:	6018      	str	r0, [r3, #0]
}
 80084d0:	bd10      	pop	{r4, pc}
 80084d2:	46c0      	nop			; (mov r8, r8)
 80084d4:	200000c0 	.word	0x200000c0
 80084d8:	00002710 	.word	0x00002710
 80084dc:	20001728 	.word	0x20001728

080084e0 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 80084e0:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80084e2:	4b0f      	ldr	r3, [pc, #60]	; (8008520 <ulMainGetRunTimeCounterValue+0x40>)
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	21fa      	movs	r1, #250	; 0xfa
 80084e8:	0089      	lsls	r1, r1, #2
 80084ea:	f7f7 fe31 	bl	8000150 <__udivsi3>
 80084ee:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80084f0:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <ulMainGetRunTimeCounterValue+0x44>)
 80084f2:	681c      	ldr	r4, [r3, #0]
 80084f4:	1b2c      	subs	r4, r5, r4
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 80084f6:	f008 fbb9 	bl	8010c6c <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 80084fa:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <ulMainGetRunTimeCounterValue+0x48>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	015b      	lsls	r3, r3, #5
 8008500:	d503      	bpl.n	800850a <ulMainGetRunTimeCounterValue+0x2a>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8008502:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008504:	4b07      	ldr	r3, [pc, #28]	; (8008524 <ulMainGetRunTimeCounterValue+0x44>)
 8008506:	681c      	ldr	r4, [r3, #0]
 8008508:	1b2c      	subs	r4, r5, r4
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 800850a:	0083      	lsls	r3, r0, #2
 800850c:	1818      	adds	r0, r3, r0
 800850e:	0045      	lsls	r5, r0, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8008510:	4b06      	ldr	r3, [pc, #24]	; (800852c <ulMainGetRunTimeCounterValue+0x4c>)
 8008512:	6819      	ldr	r1, [r3, #0]
 8008514:	0020      	movs	r0, r4
 8008516:	f7f7 fe1b 	bl	8000150 <__udivsi3>
 800851a:	1940      	adds	r0, r0, r5
	
	return ulReturn;
}
 800851c:	bd70      	pop	{r4, r5, r6, pc}
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	200000c0 	.word	0x200000c0
 8008524:	e000e018 	.word	0xe000e018
 8008528:	e000ed04 	.word	0xe000ed04
 800852c:	20001728 	.word	0x20001728

08008530 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 8008530:	4770      	bx	lr
	...

08008534 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port){
 8008534:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 8008536:	00c2      	lsls	r2, r0, #3
 8008538:	1812      	adds	r2, r2, r0
 800853a:	4b18      	ldr	r3, [pc, #96]	; (800859c <CheckForTimedButtonPress+0x68>)
 800853c:	189b      	adds	r3, r3, r2
 800853e:	789a      	ldrb	r2, [r3, #2]
 8008540:	78de      	ldrb	r6, [r3, #3]
 8008542:	791c      	ldrb	r4, [r3, #4]
	
	/* Convert to ms */
	t1 *=1000;
 8008544:	0151      	lsls	r1, r2, #5
 8008546:	1a89      	subs	r1, r1, r2
 8008548:	0089      	lsls	r1, r1, #2
 800854a:	1889      	adds	r1, r1, r2
 800854c:	00cd      	lsls	r5, r1, #3
	t2 *=1000;
 800854e:	0172      	lsls	r2, r6, #5
 8008550:	1b92      	subs	r2, r2, r6
 8008552:	0092      	lsls	r2, r2, #2
 8008554:	1992      	adds	r2, r2, r6
 8008556:	00d3      	lsls	r3, r2, #3
 8008558:	001a      	movs	r2, r3
	t3 *=1000;
 800855a:	0163      	lsls	r3, r4, #5
 800855c:	1b1b      	subs	r3, r3, r4
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	191b      	adds	r3, r3, r4
 8008562:	00d9      	lsls	r1, r3, #3
	
	if(pressCounter[port] == t1){
 8008564:	0084      	lsls	r4, r0, #2
 8008566:	4b0e      	ldr	r3, [pc, #56]	; (80085a0 <CheckForTimedButtonPress+0x6c>)
 8008568:	58e3      	ldr	r3, [r4, r3]
 800856a:	42ab      	cmp	r3, r5
 800856c:	d009      	beq.n	8008582 <CheckForTimedButtonPress+0x4e>
		button[port].state =PRESSED_FOR_X1_SEC;
	}
	else if(pressCounter[port] == t2){
 800856e:	4293      	cmp	r3, r2
 8008570:	d00e      	beq.n	8008590 <CheckForTimedButtonPress+0x5c>
		button[port].state =PRESSED_FOR_X2_SEC;
	}
	else if(pressCounter[port] == t3){
 8008572:	428b      	cmp	r3, r1
 8008574:	d10a      	bne.n	800858c <CheckForTimedButtonPress+0x58>
		button[port].state =PRESSED_FOR_X2_SEC;
 8008576:	00c3      	lsls	r3, r0, #3
 8008578:	1818      	adds	r0, r3, r0
 800857a:	4b08      	ldr	r3, [pc, #32]	; (800859c <CheckForTimedButtonPress+0x68>)
 800857c:	220a      	movs	r2, #10
 800857e:	54c2      	strb	r2, [r0, r3]
 8008580:	e004      	b.n	800858c <CheckForTimedButtonPress+0x58>
		button[port].state =PRESSED_FOR_X1_SEC;
 8008582:	00c3      	lsls	r3, r0, #3
 8008584:	1818      	adds	r0, r3, r0
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <CheckForTimedButtonPress+0x68>)
 8008588:	2209      	movs	r2, #9
 800858a:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 800858c:	2000      	movs	r0, #0
 800858e:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state =PRESSED_FOR_X2_SEC;
 8008590:	00c3      	lsls	r3, r0, #3
 8008592:	1818      	adds	r0, r3, r0
 8008594:	4b01      	ldr	r3, [pc, #4]	; (800859c <CheckForTimedButtonPress+0x68>)
 8008596:	220a      	movs	r2, #10
 8008598:	54c2      	strb	r2, [r0, r3]
 800859a:	e7f7      	b.n	800858c <CheckForTimedButtonPress+0x58>
 800859c:	20001744 	.word	0x20001744
 80085a0:	2000178c 	.word	0x2000178c

080085a4 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port){
 80085a4:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 80085a6:	00c2      	lsls	r2, r0, #3
 80085a8:	1812      	adds	r2, r2, r0
 80085aa:	4b18      	ldr	r3, [pc, #96]	; (800860c <CheckForTimedButtonRelease+0x68>)
 80085ac:	189b      	adds	r3, r3, r2
 80085ae:	795a      	ldrb	r2, [r3, #5]
 80085b0:	799e      	ldrb	r6, [r3, #6]
 80085b2:	79dc      	ldrb	r4, [r3, #7]
	
	/* Convert to ms */
	t1 *=1000;
 80085b4:	0151      	lsls	r1, r2, #5
 80085b6:	1a89      	subs	r1, r1, r2
 80085b8:	0089      	lsls	r1, r1, #2
 80085ba:	1889      	adds	r1, r1, r2
 80085bc:	00cd      	lsls	r5, r1, #3
	t2 *=1000;
 80085be:	0172      	lsls	r2, r6, #5
 80085c0:	1b92      	subs	r2, r2, r6
 80085c2:	0092      	lsls	r2, r2, #2
 80085c4:	1992      	adds	r2, r2, r6
 80085c6:	00d3      	lsls	r3, r2, #3
 80085c8:	001a      	movs	r2, r3
	t3 *=1000;
 80085ca:	0163      	lsls	r3, r4, #5
 80085cc:	1b1b      	subs	r3, r3, r4
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	191b      	adds	r3, r3, r4
 80085d2:	00d9      	lsls	r1, r3, #3
	
	if(releaseCounter[port] == t1){
 80085d4:	0084      	lsls	r4, r0, #2
 80085d6:	4b0e      	ldr	r3, [pc, #56]	; (8008610 <CheckForTimedButtonRelease+0x6c>)
 80085d8:	58e3      	ldr	r3, [r4, r3]
 80085da:	42ab      	cmp	r3, r5
 80085dc:	d009      	beq.n	80085f2 <CheckForTimedButtonRelease+0x4e>
		button[port].state =RELEASED_FOR_Y1_SEC;
	}
	else if(releaseCounter[port] == t2){
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00e      	beq.n	8008600 <CheckForTimedButtonRelease+0x5c>
		button[port].state =RELEASED_FOR_Y2_SEC;
	}
	else if(releaseCounter[port] == t3){
 80085e2:	428b      	cmp	r3, r1
 80085e4:	d10a      	bne.n	80085fc <CheckForTimedButtonRelease+0x58>
		button[port].state =RELEASED_FOR_Y2_SEC;
 80085e6:	00c3      	lsls	r3, r0, #3
 80085e8:	1818      	adds	r0, r3, r0
 80085ea:	4b08      	ldr	r3, [pc, #32]	; (800860c <CheckForTimedButtonRelease+0x68>)
 80085ec:	220d      	movs	r2, #13
 80085ee:	54c2      	strb	r2, [r0, r3]
 80085f0:	e004      	b.n	80085fc <CheckForTimedButtonRelease+0x58>
		button[port].state =RELEASED_FOR_Y1_SEC;
 80085f2:	00c3      	lsls	r3, r0, #3
 80085f4:	1818      	adds	r0, r3, r0
 80085f6:	4b05      	ldr	r3, [pc, #20]	; (800860c <CheckForTimedButtonRelease+0x68>)
 80085f8:	220c      	movs	r2, #12
 80085fa:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 80085fc:	2000      	movs	r0, #0
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008600:	00c3      	lsls	r3, r0, #3
 8008602:	1818      	adds	r0, r3, r0
 8008604:	4b01      	ldr	r3, [pc, #4]	; (800860c <CheckForTimedButtonRelease+0x68>)
 8008606:	220d      	movs	r2, #13
 8008608:	54c2      	strb	r2, [r0, r3]
 800860a:	e7f7      	b.n	80085fc <CheckForTimedButtonRelease+0x58>
 800860c:	20001744 	.word	0x20001744
 8008610:	200017a4 	.word	0x200017a4

08008614 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 8008614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008616:	b08d      	sub	sp, #52	; 0x34
 8008618:	0006      	movs	r6, r0
 800861a:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 800861c:	4b41      	ldr	r3, [pc, #260]	; (8008724 <AddPortButton+0x110>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d157      	bne.n	80086d4 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 8008624:	4b40      	ldr	r3, [pc, #256]	; (8008728 <AddPortButton+0x114>)
 8008626:	2204      	movs	r2, #4
 8008628:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if(BOS_initialized){
 800862a:	4b3e      	ldr	r3, [pc, #248]	; (8008724 <AddPortButton+0x110>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d15a      	bne.n	80086e8 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8008632:	2512      	movs	r5, #18
 8008634:	446d      	add	r5, sp
 8008636:	af04      	add	r7, sp, #16
 8008638:	9700      	str	r7, [sp, #0]
 800863a:	ab05      	add	r3, sp, #20
 800863c:	002a      	movs	r2, r5
 800863e:	a906      	add	r1, sp, #24
 8008640:	0020      	movs	r0, r4
 8008642:	f006 fcd9 	bl	800eff8 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 8008646:	882b      	ldrh	r3, [r5, #0]
 8008648:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800864a:	2301      	movs	r3, #1
 800864c:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800864e:	2500      	movs	r5, #0
 8008650:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008652:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 8008654:	a907      	add	r1, sp, #28
 8008656:	9806      	ldr	r0, [sp, #24]
 8008658:	f00a fe7c 	bl	8013354 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 800865c:	883b      	ldrh	r3, [r7, #0]
 800865e:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008660:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008662:	2302      	movs	r3, #2
 8008664:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 8008666:	a907      	add	r1, sp, #28
 8008668:	9805      	ldr	r0, [sp, #20]
 800866a:	f00a fe73 	bl	8013354 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 800866e:	00e2      	lsls	r2, r4, #3
 8008670:	1912      	adds	r2, r2, r4
 8008672:	4b2e      	ldr	r3, [pc, #184]	; (800872c <AddPortButton+0x118>)
 8008674:	189b      	adds	r3, r3, r2
 8008676:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008678:	0025      	movs	r5, r4
 800867a:	353a      	adds	r5, #58	; 0x3a
 800867c:	00ad      	lsls	r5, r5, #2
 800867e:	210e      	movs	r1, #14
 8008680:	4469      	add	r1, sp
 8008682:	0028      	movs	r0, r5
 8008684:	f7ff faf2 	bl	8007c6c <EE_ReadVariable>
	if(!res)											// This variable exists
 8008688:	2800      	cmp	r0, #0
 800868a:	d133      	bne.n	80086f4 <AddPortButton+0xe0>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 800868c:	230e      	movs	r3, #14
 800868e:	446b      	add	r3, sp
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	0a1b      	lsrs	r3, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 8008694:	091a      	lsrs	r2, r3, #4
 8008696:	42a2      	cmp	r2, r4
 8008698:	d103      	bne.n	80086a2 <AddPortButton+0x8e>
 800869a:	220f      	movs	r2, #15
 800869c:	4013      	ands	r3, r2
 800869e:	42b3      	cmp	r3, r6
 80086a0:	d015      	beq.n	80086ce <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 80086a2:	0324      	lsls	r4, r4, #12
 80086a4:	0231      	lsls	r1, r6, #8
 80086a6:	4321      	orrs	r1, r4
 80086a8:	b289      	uxth	r1, r1
 80086aa:	230e      	movs	r3, #14
 80086ac:	446b      	add	r3, sp
 80086ae:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80086b0:	0028      	movs	r0, r5
 80086b2:	f7ff fb8d 	bl	8007dd0 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80086b6:	1c68      	adds	r0, r5, #1
 80086b8:	2100      	movs	r1, #0
 80086ba:	f7ff fb89 	bl	8007dd0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80086be:	1ca8      	adds	r0, r5, #2
 80086c0:	2100      	movs	r1, #0
 80086c2:	f7ff fb85 	bl	8007dd0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80086c6:	1ce8      	adds	r0, r5, #3
 80086c8:	2100      	movs	r1, #0
 80086ca:	f7ff fb81 	bl	8007dd0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	return result;
}
 80086ce:	2000      	movs	r0, #0
 80086d0:	b00d      	add	sp, #52	; 0x34
 80086d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 80086d4:	008d      	lsls	r5, r1, #2
 80086d6:	4b16      	ldr	r3, [pc, #88]	; (8008730 <AddPortButton+0x11c>)
 80086d8:	58e8      	ldr	r0, [r5, r3]
 80086da:	f007 fb5d 	bl	800fd98 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 80086de:	4b15      	ldr	r3, [pc, #84]	; (8008734 <AddPortButton+0x120>)
 80086e0:	58e8      	ldr	r0, [r5, r3]
 80086e2:	f007 fb59 	bl	800fd98 <osSemaphoreRelease>
 80086e6:	e79d      	b.n	8008624 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 80086e8:	0020      	movs	r0, r4
 80086ea:	f007 f9af 	bl	800fa4c <GetUart>
 80086ee:	f00b fee4 	bl	80144ba <HAL_UART_DeInit>
 80086f2:	e79e      	b.n	8008632 <AddPortButton+0x1e>
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 80086f4:	0324      	lsls	r4, r4, #12
 80086f6:	0231      	lsls	r1, r6, #8
 80086f8:	4321      	orrs	r1, r4
 80086fa:	b289      	uxth	r1, r1
 80086fc:	230e      	movs	r3, #14
 80086fe:	446b      	add	r3, sp
 8008700:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008702:	0028      	movs	r0, r5
 8008704:	f7ff fb64 	bl	8007dd0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008708:	1c68      	adds	r0, r5, #1
 800870a:	2100      	movs	r1, #0
 800870c:	f7ff fb60 	bl	8007dd0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 8008710:	1ca8      	adds	r0, r5, #2
 8008712:	2100      	movs	r1, #0
 8008714:	f7ff fb5c 	bl	8007dd0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8008718:	1ce8      	adds	r0, r5, #3
 800871a:	2100      	movs	r1, #0
 800871c:	f7ff fb58 	bl	8007dd0 <EE_WriteVariable>
 8008720:	e7d5      	b.n	80086ce <AddPortButton+0xba>
 8008722:	46c0      	nop			; (mov r8, r8)
 8008724:	20000aa6 	.word	0x20000aa6
 8008728:	200010ec 	.word	0x200010ec
 800872c:	20001744 	.word	0x20001744
 8008730:	200070e8 	.word	0x200070e8
 8008734:	200070cc 	.word	0x200070cc

08008738 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	0004      	movs	r4, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 800873e:	4836      	ldr	r0, [pc, #216]	; (8008818 <RemovePortButton+0xe0>)
 8008740:	00e1      	lsls	r1, r4, #3
 8008742:	1909      	adds	r1, r1, r4
 8008744:	1842      	adds	r2, r0, r1
 8008746:	2300      	movs	r3, #0
 8008748:	7053      	strb	r3, [r2, #1]
	button[port].state =NONE;
 800874a:	540b      	strb	r3, [r1, r0]
	button[port].events =0;
 800874c:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 800874e:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 8008750:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 8008752:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 8008754:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 8008756:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 8008758:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800875a:	0025      	movs	r5, r4
 800875c:	353a      	adds	r5, #58	; 0x3a
 800875e:	00ad      	lsls	r5, r5, #2
 8008760:	466b      	mov	r3, sp
 8008762:	1d99      	adds	r1, r3, #6
 8008764:	0028      	movs	r0, r5
 8008766:	f7ff fa81 	bl	8007c6c <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 800876a:	2800      	cmp	r0, #0
 800876c:	d01e      	beq.n	80087ac <RemovePortButton+0x74>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 800876e:	0020      	movs	r0, r4
 8008770:	f007 f96c 	bl	800fa4c <GetUart>
 8008774:	0005      	movs	r5, r0
	
	if(huart->Instance == USART1){
 8008776:	6803      	ldr	r3, [r0, #0]
 8008778:	4a28      	ldr	r2, [pc, #160]	; (800881c <RemovePortButton+0xe4>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d03d      	beq.n	80087fa <RemovePortButton+0xc2>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 800877e:	4a28      	ldr	r2, [pc, #160]	; (8008820 <RemovePortButton+0xe8>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d024      	beq.n	80087ce <RemovePortButton+0x96>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 8008784:	4a27      	ldr	r2, [pc, #156]	; (8008824 <RemovePortButton+0xec>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d025      	beq.n	80087d6 <RemovePortButton+0x9e>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 800878a:	4a27      	ldr	r2, [pc, #156]	; (8008828 <RemovePortButton+0xf0>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d026      	beq.n	80087de <RemovePortButton+0xa6>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 8008790:	4a26      	ldr	r2, [pc, #152]	; (800882c <RemovePortButton+0xf4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d027      	beq.n	80087e6 <RemovePortButton+0xae>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 8008796:	4a26      	ldr	r2, [pc, #152]	; (8008830 <RemovePortButton+0xf8>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d028      	beq.n	80087ee <RemovePortButton+0xb6>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 800879c:	4a25      	ldr	r2, [pc, #148]	; (8008834 <RemovePortButton+0xfc>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d037      	beq.n	8008812 <RemovePortButton+0xda>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 80087a2:	4a25      	ldr	r2, [pc, #148]	; (8008838 <RemovePortButton+0x100>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d026      	beq.n	80087f6 <RemovePortButton+0xbe>
#ifdef _Usart8	
		MX_USART8_UART_Init();
#endif
	}
	else
		result =BOS_ERROR;
 80087a8:	26ff      	movs	r6, #255	; 0xff
 80087aa:	e027      	b.n	80087fc <RemovePortButton+0xc4>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 80087ac:	2100      	movs	r1, #0
 80087ae:	0028      	movs	r0, r5
 80087b0:	f7ff fb0e 	bl	8007dd0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80087b4:	1c68      	adds	r0, r5, #1
 80087b6:	2100      	movs	r1, #0
 80087b8:	f7ff fb0a 	bl	8007dd0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80087bc:	1ca8      	adds	r0, r5, #2
 80087be:	2100      	movs	r1, #0
 80087c0:	f7ff fb06 	bl	8007dd0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80087c4:	1ce8      	adds	r0, r5, #3
 80087c6:	2100      	movs	r1, #0
 80087c8:	f7ff fb02 	bl	8007dd0 <EE_WriteVariable>
 80087cc:	e7cf      	b.n	800876e <RemovePortButton+0x36>
		MX_USART2_UART_Init();
 80087ce:	f006 ffbb 	bl	800f748 <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 80087d2:	2600      	movs	r6, #0
 80087d4:	e012      	b.n	80087fc <RemovePortButton+0xc4>
		MX_USART3_UART_Init();
 80087d6:	f006 ffcf 	bl	800f778 <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 80087da:	2600      	movs	r6, #0
 80087dc:	e00e      	b.n	80087fc <RemovePortButton+0xc4>
		MX_USART4_UART_Init();
 80087de:	f006 ffe3 	bl	800f7a8 <MX_USART4_UART_Init>
	BOS_Status result =BOS_OK;
 80087e2:	2600      	movs	r6, #0
 80087e4:	e00a      	b.n	80087fc <RemovePortButton+0xc4>
		MX_USART5_UART_Init();
 80087e6:	f006 fff7 	bl	800f7d8 <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 80087ea:	2600      	movs	r6, #0
 80087ec:	e006      	b.n	80087fc <RemovePortButton+0xc4>
		MX_USART6_UART_Init();
 80087ee:	f007 f80b 	bl	800f808 <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 80087f2:	2600      	movs	r6, #0
 80087f4:	e002      	b.n	80087fc <RemovePortButton+0xc4>
 80087f6:	2600      	movs	r6, #0
 80087f8:	e000      	b.n	80087fc <RemovePortButton+0xc4>
 80087fa:	2600      	movs	r6, #0
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 80087fc:	4b0f      	ldr	r3, [pc, #60]	; (800883c <RemovePortButton+0x104>)
 80087fe:	2200      	movs	r2, #0
 8008800:	551a      	strb	r2, [r3, r4]
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 8008802:	3201      	adds	r2, #1
 8008804:	490e      	ldr	r1, [pc, #56]	; (8008840 <RemovePortButton+0x108>)
 8008806:	0028      	movs	r0, r5
 8008808:	f00b feb0 	bl	801456c <HAL_UART_Receive_IT>
	
	return result;
}
 800880c:	0030      	movs	r0, r6
 800880e:	b002      	add	sp, #8
 8008810:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result =BOS_OK;
 8008812:	2600      	movs	r6, #0
 8008814:	e7f2      	b.n	80087fc <RemovePortButton+0xc4>
 8008816:	46c0      	nop			; (mov r8, r8)
 8008818:	20001744 	.word	0x20001744
 800881c:	40013800 	.word	0x40013800
 8008820:	40004400 	.word	0x40004400
 8008824:	40004800 	.word	0x40004800
 8008828:	40004c00 	.word	0x40004c00
 800882c:	40005000 	.word	0x40005000
 8008830:	40011400 	.word	0x40011400
 8008834:	40011800 	.word	0x40011800
 8008838:	40011c00 	.word	0x40011c00
 800883c:	200010ec 	.word	0x200010ec
 8008840:	20000e54 	.word	0x20000e54

08008844 <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 8008844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008846:	46de      	mov	lr, fp
 8008848:	4657      	mov	r7, sl
 800884a:	464e      	mov	r6, r9
 800884c:	4645      	mov	r5, r8
 800884e:	b5e0      	push	{r5, r6, r7, lr}
 8008850:	b085      	sub	sp, #20
 8008852:	0007      	movs	r7, r0
 8008854:	469b      	mov	fp, r3
 8008856:	ab0e      	add	r3, sp, #56	; 0x38
 8008858:	781e      	ldrb	r6, [r3, #0]
 800885a:	ab0f      	add	r3, sp, #60	; 0x3c
 800885c:	781d      	ldrb	r5, [r3, #0]
 800885e:	ab10      	add	r3, sp, #64	; 0x40
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	469a      	mov	sl, r3
 8008864:	ab11      	add	r3, sp, #68	; 0x44
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	4699      	mov	r9, r3
 800886a:	ab12      	add	r3, sp, #72	; 0x48
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	4698      	mov	r8, r3
 8008870:	ab13      	add	r3, sp, #76	; 0x4c
 8008872:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 8008874:	00c4      	lsls	r4, r0, #3
 8008876:	1824      	adds	r4, r4, r0
 8008878:	48b3      	ldr	r0, [pc, #716]	; (8008b48 <SetButtonEvents+0x304>)
 800887a:	1900      	adds	r0, r0, r4
 800887c:	7840      	ldrb	r0, [r0, #1]
 800887e:	2800      	cmp	r0, #0
 8008880:	d100      	bne.n	8008884 <SetButtonEvents+0x40>
 8008882:	e155      	b.n	8008b30 <SetButtonEvents+0x2ec>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 8008884:	00fc      	lsls	r4, r7, #3
 8008886:	19e4      	adds	r4, r4, r7
 8008888:	48af      	ldr	r0, [pc, #700]	; (8008b48 <SetButtonEvents+0x304>)
 800888a:	1900      	adds	r0, r0, r4
 800888c:	465c      	mov	r4, fp
 800888e:	7084      	strb	r4, [r0, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 8008890:	70c6      	strb	r6, [r0, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 8008892:	7105      	strb	r5, [r0, #4]
	button[port].releasedY1Sec =released_y1sec;
 8008894:	4654      	mov	r4, sl
 8008896:	7144      	strb	r4, [r0, #5]
	button[port].releasedY2Sec =released_y2sec;
 8008898:	464c      	mov	r4, r9
 800889a:	7184      	strb	r4, [r0, #6]
	button[port].releasedY3Sec =released_y3sec;
 800889c:	4644      	mov	r4, r8
 800889e:	71c4      	strb	r4, [r0, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d005      	beq.n	80088b0 <SetButtonEvents+0x6c>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d000      	beq.n	80088aa <SetButtonEvents+0x66>
 80088a8:	e0ca      	b.n	8008a40 <SetButtonEvents+0x1fc>
 80088aa:	2900      	cmp	r1, #0
 80088ac:	d100      	bne.n	80088b0 <SetButtonEvents+0x6c>
 80088ae:	e0c7      	b.n	8008a40 <SetButtonEvents+0x1fc>
		button[port].events |= BUTTON_EVENT_CLICKED;
 80088b0:	00f8      	lsls	r0, r7, #3
 80088b2:	19c0      	adds	r0, r0, r7
 80088b4:	49a4      	ldr	r1, [pc, #656]	; (8008b48 <SetButtonEvents+0x304>)
 80088b6:	1809      	adds	r1, r1, r0
 80088b8:	7a08      	ldrb	r0, [r1, #8]
 80088ba:	2401      	movs	r4, #1
 80088bc:	4320      	orrs	r0, r4
 80088be:	7208      	strb	r0, [r1, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
		button[port].events &=~BUTTON_EVENT_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d005      	beq.n	80088d0 <SetButtonEvents+0x8c>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d000      	beq.n	80088ca <SetButtonEvents+0x86>
 80088c8:	e0c6      	b.n	8008a58 <SetButtonEvents+0x214>
 80088ca:	2a00      	cmp	r2, #0
 80088cc:	d100      	bne.n	80088d0 <SetButtonEvents+0x8c>
 80088ce:	e0c3      	b.n	8008a58 <SetButtonEvents+0x214>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 80088d0:	00f9      	lsls	r1, r7, #3
 80088d2:	19c9      	adds	r1, r1, r7
 80088d4:	4a9c      	ldr	r2, [pc, #624]	; (8008b48 <SetButtonEvents+0x304>)
 80088d6:	1852      	adds	r2, r2, r1
 80088d8:	7a11      	ldrb	r1, [r2, #8]
 80088da:	2002      	movs	r0, #2
 80088dc:	4301      	orrs	r1, r0
 80088de:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d006      	beq.n	80088f2 <SetButtonEvents+0xae>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d000      	beq.n	80088ea <SetButtonEvents+0xa6>
 80088e8:	e0c2      	b.n	8008a70 <SetButtonEvents+0x22c>
 80088ea:	465a      	mov	r2, fp
 80088ec:	2a00      	cmp	r2, #0
 80088ee:	d100      	bne.n	80088f2 <SetButtonEvents+0xae>
 80088f0:	e0be      	b.n	8008a70 <SetButtonEvents+0x22c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80088f2:	00f9      	lsls	r1, r7, #3
 80088f4:	19c9      	adds	r1, r1, r7
 80088f6:	4a94      	ldr	r2, [pc, #592]	; (8008b48 <SetButtonEvents+0x304>)
 80088f8:	1852      	adds	r2, r2, r1
 80088fa:	7a11      	ldrb	r1, [r2, #8]
 80088fc:	2004      	movs	r0, #4
 80088fe:	4301      	orrs	r1, r0
 8008900:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008902:	2b01      	cmp	r3, #1
 8008904:	d005      	beq.n	8008912 <SetButtonEvents+0xce>
 8008906:	2b00      	cmp	r3, #0
 8008908:	d000      	beq.n	800890c <SetButtonEvents+0xc8>
 800890a:	e0be      	b.n	8008a8a <SetButtonEvents+0x246>
 800890c:	2e00      	cmp	r6, #0
 800890e:	d100      	bne.n	8008912 <SetButtonEvents+0xce>
 8008910:	e0bb      	b.n	8008a8a <SetButtonEvents+0x246>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008912:	00f9      	lsls	r1, r7, #3
 8008914:	19c9      	adds	r1, r1, r7
 8008916:	4a8c      	ldr	r2, [pc, #560]	; (8008b48 <SetButtonEvents+0x304>)
 8008918:	1852      	adds	r2, r2, r1
 800891a:	7a11      	ldrb	r1, [r2, #8]
 800891c:	2008      	movs	r0, #8
 800891e:	4301      	orrs	r1, r0
 8008920:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 8008922:	2b01      	cmp	r3, #1
 8008924:	d005      	beq.n	8008932 <SetButtonEvents+0xee>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d000      	beq.n	800892c <SetButtonEvents+0xe8>
 800892a:	e0bb      	b.n	8008aa4 <SetButtonEvents+0x260>
 800892c:	2d00      	cmp	r5, #0
 800892e:	d100      	bne.n	8008932 <SetButtonEvents+0xee>
 8008930:	e0b8      	b.n	8008aa4 <SetButtonEvents+0x260>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008932:	00f9      	lsls	r1, r7, #3
 8008934:	19c9      	adds	r1, r1, r7
 8008936:	4a84      	ldr	r2, [pc, #528]	; (8008b48 <SetButtonEvents+0x304>)
 8008938:	1852      	adds	r2, r2, r1
 800893a:	7a11      	ldrb	r1, [r2, #8]
 800893c:	2010      	movs	r0, #16
 800893e:	4301      	orrs	r1, r0
 8008940:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 8008942:	2b01      	cmp	r3, #1
 8008944:	d006      	beq.n	8008954 <SetButtonEvents+0x110>
 8008946:	2b00      	cmp	r3, #0
 8008948:	d000      	beq.n	800894c <SetButtonEvents+0x108>
 800894a:	e0b8      	b.n	8008abe <SetButtonEvents+0x27a>
 800894c:	4652      	mov	r2, sl
 800894e:	2a00      	cmp	r2, #0
 8008950:	d100      	bne.n	8008954 <SetButtonEvents+0x110>
 8008952:	e0b4      	b.n	8008abe <SetButtonEvents+0x27a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008954:	00f9      	lsls	r1, r7, #3
 8008956:	19c9      	adds	r1, r1, r7
 8008958:	4a7b      	ldr	r2, [pc, #492]	; (8008b48 <SetButtonEvents+0x304>)
 800895a:	1852      	adds	r2, r2, r1
 800895c:	7a11      	ldrb	r1, [r2, #8]
 800895e:	2020      	movs	r0, #32
 8008960:	4301      	orrs	r1, r0
 8008962:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008964:	2b01      	cmp	r3, #1
 8008966:	d006      	beq.n	8008976 <SetButtonEvents+0x132>
 8008968:	2b00      	cmp	r3, #0
 800896a:	d000      	beq.n	800896e <SetButtonEvents+0x12a>
 800896c:	e0b4      	b.n	8008ad8 <SetButtonEvents+0x294>
 800896e:	464a      	mov	r2, r9
 8008970:	2a00      	cmp	r2, #0
 8008972:	d100      	bne.n	8008976 <SetButtonEvents+0x132>
 8008974:	e0b0      	b.n	8008ad8 <SetButtonEvents+0x294>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008976:	00f9      	lsls	r1, r7, #3
 8008978:	19c9      	adds	r1, r1, r7
 800897a:	4a73      	ldr	r2, [pc, #460]	; (8008b48 <SetButtonEvents+0x304>)
 800897c:	1852      	adds	r2, r2, r1
 800897e:	7a11      	ldrb	r1, [r2, #8]
 8008980:	2040      	movs	r0, #64	; 0x40
 8008982:	4301      	orrs	r1, r0
 8008984:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008986:	2b01      	cmp	r3, #1
 8008988:	d006      	beq.n	8008998 <SetButtonEvents+0x154>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d000      	beq.n	8008990 <SetButtonEvents+0x14c>
 800898e:	e0b0      	b.n	8008af2 <SetButtonEvents+0x2ae>
 8008990:	4642      	mov	r2, r8
 8008992:	2a00      	cmp	r2, #0
 8008994:	d100      	bne.n	8008998 <SetButtonEvents+0x154>
 8008996:	e0ac      	b.n	8008af2 <SetButtonEvents+0x2ae>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008998:	00fa      	lsls	r2, r7, #3
 800899a:	19d2      	adds	r2, r2, r7
 800899c:	4b6a      	ldr	r3, [pc, #424]	; (8008b48 <SetButtonEvents+0x304>)
 800899e:	189b      	adds	r3, r3, r2
 80089a0:	7a19      	ldrb	r1, [r3, #8]
 80089a2:	2280      	movs	r2, #128	; 0x80
 80089a4:	4252      	negs	r2, r2
 80089a6:	430a      	orrs	r2, r1
 80089a8:	721a      	strb	r2, [r3, #8]
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}
	
	/* Add to EEPROM */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80089aa:	003c      	movs	r4, r7
 80089ac:	343a      	adds	r4, #58	; 0x3a
 80089ae:	00a4      	lsls	r4, r4, #2
 80089b0:	ab02      	add	r3, sp, #8
 80089b2:	1d99      	adds	r1, r3, #6
 80089b4:	0020      	movs	r0, r4
 80089b6:	f7ff f959 	bl	8007c6c <EE_ReadVariable>
	if(!res)											// This variable exists
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d000      	beq.n	80089c0 <SetButtonEvents+0x17c>
 80089be:	e0bf      	b.n	8008b40 <SetButtonEvents+0x2fc>
	{
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 80089c0:	ab02      	add	r3, sp, #8
 80089c2:	3306      	adds	r3, #6
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	0a18      	lsrs	r0, r3, #8
		/* Store event flags */
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	00fa      	lsls	r2, r7, #3
 80089cc:	19d2      	adds	r2, r2, r7
 80089ce:	4f5e      	ldr	r7, [pc, #376]	; (8008b48 <SetButtonEvents+0x304>)
 80089d0:	18bf      	adds	r7, r7, r2
 80089d2:	7a39      	ldrb	r1, [r7, #8]
 80089d4:	428b      	cmp	r3, r1
 80089d6:	d000      	beq.n	80089da <SetButtonEvents+0x196>
 80089d8:	e098      	b.n	8008b0c <SetButtonEvents+0x2c8>
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 80089da:	1c63      	adds	r3, r4, #1
 80089dc:	aa02      	add	r2, sp, #8
 80089de:	1d97      	adds	r7, r2, #6
 80089e0:	0039      	movs	r1, r7
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	0018      	movs	r0, r3
 80089e6:	f7ff f941 	bl	8007c6c <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 80089ea:	883a      	ldrh	r2, [r7, #0]
 80089ec:	4659      	mov	r1, fp
 80089ee:	0209      	lsls	r1, r1, #8
 80089f0:	4653      	mov	r3, sl
 80089f2:	430b      	orrs	r3, r1
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d000      	beq.n	80089fa <SetButtonEvents+0x1b6>
 80089f8:	e090      	b.n	8008b1c <SetButtonEvents+0x2d8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 80089fa:	1ca3      	adds	r3, r4, #2
 80089fc:	aa02      	add	r2, sp, #8
 80089fe:	1d97      	adds	r7, r2, #6
 8008a00:	0039      	movs	r1, r7
 8008a02:	9301      	str	r3, [sp, #4]
 8008a04:	0018      	movs	r0, r3
 8008a06:	f7ff f931 	bl	8007c6c <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 8008a0a:	883a      	ldrh	r2, [r7, #0]
 8008a0c:	0236      	lsls	r6, r6, #8
 8008a0e:	464b      	mov	r3, r9
 8008a10:	4333      	orrs	r3, r6
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d000      	beq.n	8008a18 <SetButtonEvents+0x1d4>
 8008a16:	e086      	b.n	8008b26 <SetButtonEvents+0x2e2>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 8008a18:	3403      	adds	r4, #3
 8008a1a:	ab02      	add	r3, sp, #8
 8008a1c:	1d9e      	adds	r6, r3, #6
 8008a1e:	0031      	movs	r1, r6
 8008a20:	0020      	movs	r0, r4
 8008a22:	f7ff f923 	bl	8007c6c <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008a26:	8832      	ldrh	r2, [r6, #0]
 8008a28:	022d      	lsls	r5, r5, #8
 8008a2a:	4643      	mov	r3, r8
 8008a2c:	432b      	orrs	r3, r5
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d100      	bne.n	8008a34 <SetButtonEvents+0x1f0>
 8008a32:	e087      	b.n	8008b44 <SetButtonEvents+0x300>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 8008a34:	0019      	movs	r1, r3
 8008a36:	0020      	movs	r0, r4
 8008a38:	f7ff f9ca 	bl	8007dd0 <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	e078      	b.n	8008b32 <SetButtonEvents+0x2ee>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
 8008a40:	4319      	orrs	r1, r3
 8008a42:	d000      	beq.n	8008a46 <SetButtonEvents+0x202>
 8008a44:	e73c      	b.n	80088c0 <SetButtonEvents+0x7c>
		button[port].events &=~BUTTON_EVENT_CLICKED;
 8008a46:	00f8      	lsls	r0, r7, #3
 8008a48:	19c0      	adds	r0, r0, r7
 8008a4a:	493f      	ldr	r1, [pc, #252]	; (8008b48 <SetButtonEvents+0x304>)
 8008a4c:	1809      	adds	r1, r1, r0
 8008a4e:	7a08      	ldrb	r0, [r1, #8]
 8008a50:	2401      	movs	r4, #1
 8008a52:	43a0      	bics	r0, r4
 8008a54:	7208      	strb	r0, [r1, #8]
 8008a56:	e733      	b.n	80088c0 <SetButtonEvents+0x7c>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	d000      	beq.n	8008a5e <SetButtonEvents+0x21a>
 8008a5c:	e740      	b.n	80088e0 <SetButtonEvents+0x9c>
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 8008a5e:	00f9      	lsls	r1, r7, #3
 8008a60:	19c9      	adds	r1, r1, r7
 8008a62:	4a39      	ldr	r2, [pc, #228]	; (8008b48 <SetButtonEvents+0x304>)
 8008a64:	1852      	adds	r2, r2, r1
 8008a66:	7a11      	ldrb	r1, [r2, #8]
 8008a68:	2002      	movs	r0, #2
 8008a6a:	4381      	bics	r1, r0
 8008a6c:	7211      	strb	r1, [r2, #8]
 8008a6e:	e737      	b.n	80088e0 <SetButtonEvents+0x9c>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
 8008a70:	465a      	mov	r2, fp
 8008a72:	431a      	orrs	r2, r3
 8008a74:	d000      	beq.n	8008a78 <SetButtonEvents+0x234>
 8008a76:	e744      	b.n	8008902 <SetButtonEvents+0xbe>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008a78:	00f9      	lsls	r1, r7, #3
 8008a7a:	19c9      	adds	r1, r1, r7
 8008a7c:	4a32      	ldr	r2, [pc, #200]	; (8008b48 <SetButtonEvents+0x304>)
 8008a7e:	1852      	adds	r2, r2, r1
 8008a80:	7a11      	ldrb	r1, [r2, #8]
 8008a82:	2004      	movs	r0, #4
 8008a84:	4381      	bics	r1, r0
 8008a86:	7211      	strb	r1, [r2, #8]
 8008a88:	e73b      	b.n	8008902 <SetButtonEvents+0xbe>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec){
 8008a8a:	0032      	movs	r2, r6
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	d000      	beq.n	8008a92 <SetButtonEvents+0x24e>
 8008a90:	e747      	b.n	8008922 <SetButtonEvents+0xde>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008a92:	00f9      	lsls	r1, r7, #3
 8008a94:	19c9      	adds	r1, r1, r7
 8008a96:	4a2c      	ldr	r2, [pc, #176]	; (8008b48 <SetButtonEvents+0x304>)
 8008a98:	1852      	adds	r2, r2, r1
 8008a9a:	7a11      	ldrb	r1, [r2, #8]
 8008a9c:	2008      	movs	r0, #8
 8008a9e:	4381      	bics	r1, r0
 8008aa0:	7211      	strb	r1, [r2, #8]
 8008aa2:	e73e      	b.n	8008922 <SetButtonEvents+0xde>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
 8008aa4:	002a      	movs	r2, r5
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	d000      	beq.n	8008aac <SetButtonEvents+0x268>
 8008aaa:	e74a      	b.n	8008942 <SetButtonEvents+0xfe>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008aac:	00f9      	lsls	r1, r7, #3
 8008aae:	19c9      	adds	r1, r1, r7
 8008ab0:	4a25      	ldr	r2, [pc, #148]	; (8008b48 <SetButtonEvents+0x304>)
 8008ab2:	1852      	adds	r2, r2, r1
 8008ab4:	7a11      	ldrb	r1, [r2, #8]
 8008ab6:	2010      	movs	r0, #16
 8008ab8:	4381      	bics	r1, r0
 8008aba:	7211      	strb	r1, [r2, #8]
 8008abc:	e741      	b.n	8008942 <SetButtonEvents+0xfe>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec){
 8008abe:	4652      	mov	r2, sl
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	d000      	beq.n	8008ac6 <SetButtonEvents+0x282>
 8008ac4:	e74e      	b.n	8008964 <SetButtonEvents+0x120>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008ac6:	00f9      	lsls	r1, r7, #3
 8008ac8:	19c9      	adds	r1, r1, r7
 8008aca:	4a1f      	ldr	r2, [pc, #124]	; (8008b48 <SetButtonEvents+0x304>)
 8008acc:	1852      	adds	r2, r2, r1
 8008ace:	7a11      	ldrb	r1, [r2, #8]
 8008ad0:	2020      	movs	r0, #32
 8008ad2:	4381      	bics	r1, r0
 8008ad4:	7211      	strb	r1, [r2, #8]
 8008ad6:	e745      	b.n	8008964 <SetButtonEvents+0x120>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
 8008ad8:	464a      	mov	r2, r9
 8008ada:	431a      	orrs	r2, r3
 8008adc:	d000      	beq.n	8008ae0 <SetButtonEvents+0x29c>
 8008ade:	e752      	b.n	8008986 <SetButtonEvents+0x142>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008ae0:	00f9      	lsls	r1, r7, #3
 8008ae2:	19c9      	adds	r1, r1, r7
 8008ae4:	4a18      	ldr	r2, [pc, #96]	; (8008b48 <SetButtonEvents+0x304>)
 8008ae6:	1852      	adds	r2, r2, r1
 8008ae8:	7a11      	ldrb	r1, [r2, #8]
 8008aea:	2040      	movs	r0, #64	; 0x40
 8008aec:	4381      	bics	r1, r0
 8008aee:	7211      	strb	r1, [r2, #8]
 8008af0:	e749      	b.n	8008986 <SetButtonEvents+0x142>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec){
 8008af2:	4642      	mov	r2, r8
 8008af4:	4313      	orrs	r3, r2
 8008af6:	d000      	beq.n	8008afa <SetButtonEvents+0x2b6>
 8008af8:	e757      	b.n	80089aa <SetButtonEvents+0x166>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008afa:	00fa      	lsls	r2, r7, #3
 8008afc:	19d2      	adds	r2, r2, r7
 8008afe:	4b12      	ldr	r3, [pc, #72]	; (8008b48 <SetButtonEvents+0x304>)
 8008b00:	189b      	adds	r3, r3, r2
 8008b02:	7a19      	ldrb	r1, [r3, #8]
 8008b04:	227f      	movs	r2, #127	; 0x7f
 8008b06:	400a      	ands	r2, r1
 8008b08:	721a      	strb	r2, [r3, #8]
 8008b0a:	e74e      	b.n	80089aa <SetButtonEvents+0x166>
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 8008b0c:	0200      	lsls	r0, r0, #8
 8008b0e:	4301      	orrs	r1, r0
 8008b10:	ab02      	add	r3, sp, #8
 8008b12:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008b14:	0020      	movs	r0, r4
 8008b16:	f7ff f95b 	bl	8007dd0 <EE_WriteVariable>
 8008b1a:	e75e      	b.n	80089da <SetButtonEvents+0x196>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 8008b1c:	0019      	movs	r1, r3
 8008b1e:	9801      	ldr	r0, [sp, #4]
 8008b20:	f7ff f956 	bl	8007dd0 <EE_WriteVariable>
 8008b24:	e769      	b.n	80089fa <SetButtonEvents+0x1b6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 8008b26:	0019      	movs	r1, r3
 8008b28:	9801      	ldr	r0, [sp, #4]
 8008b2a:	f7ff f951 	bl	8007dd0 <EE_WriteVariable>
 8008b2e:	e773      	b.n	8008a18 <SetButtonEvents+0x1d4>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008b30:	200b      	movs	r0, #11
}
 8008b32:	b005      	add	sp, #20
 8008b34:	bc3c      	pop	{r2, r3, r4, r5}
 8008b36:	4690      	mov	r8, r2
 8008b38:	4699      	mov	r9, r3
 8008b3a:	46a2      	mov	sl, r4
 8008b3c:	46ab      	mov	fp, r5
 8008b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008b40:	200b      	movs	r0, #11
 8008b42:	e7f6      	b.n	8008b32 <SetButtonEvents+0x2ee>
	return result;
 8008b44:	2000      	movs	r0, #0
 8008b46:	e7f4      	b.n	8008b32 <SetButtonEvents+0x2ee>
 8008b48:	20001744 	.word	0x20001744

08008b4c <ADC_Channels_Config>:
		Error_Handler();
	}
	ADC_flag =1;
}

void ADC_Channels_Config(ADC_HandleTypeDef *adcHandle){
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	0004      	movs	r4, r0
	
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8008b52:	2214      	movs	r2, #20
 8008b54:	2100      	movs	r1, #0
 8008b56:	a803      	add	r0, sp, #12
 8008b58:	f00c fd08 	bl	801556c <memset>
	if(adcHandle->Instance == ADC1){
 8008b5c:	6822      	ldr	r2, [r4, #0]
 8008b5e:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <ADC_Channels_Config+0x58>)
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d001      	beq.n	8008b68 <ADC_Channels_Config+0x1c>
		
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8008b64:	b008      	add	sp, #32
 8008b66:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008b68:	4b0f      	ldr	r3, [pc, #60]	; (8008ba8 <ADC_Channels_Config+0x5c>)
 8008b6a:	6999      	ldr	r1, [r3, #24]
 8008b6c:	2080      	movs	r0, #128	; 0x80
 8008b6e:	0080      	lsls	r0, r0, #2
 8008b70:	4301      	orrs	r1, r0
 8008b72:	6199      	str	r1, [r3, #24]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	4002      	ands	r2, r0
 8008b78:	9201      	str	r2, [sp, #4]
 8008b7a:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008b7c:	695a      	ldr	r2, [r3, #20]
 8008b7e:	2180      	movs	r1, #128	; 0x80
 8008b80:	0289      	lsls	r1, r1, #10
 8008b82:	430a      	orrs	r2, r1
 8008b84:	615a      	str	r2, [r3, #20]
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	400b      	ands	r3, r1
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8008b8e:	233c      	movs	r3, #60	; 0x3c
 8008b90:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b92:	3b39      	subs	r3, #57	; 0x39
 8008b94:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008b96:	3871      	subs	r0, #113	; 0x71
 8008b98:	38ff      	subs	r0, #255	; 0xff
 8008b9a:	a903      	add	r1, sp, #12
 8008b9c:	05c0      	lsls	r0, r0, #23
 8008b9e:	f00a fbd9 	bl	8013354 <HAL_GPIO_Init>
}
 8008ba2:	e7df      	b.n	8008b64 <ADC_Channels_Config+0x18>
 8008ba4:	40012400 	.word	0x40012400
 8008ba8:	40021000 	.word	0x40021000

08008bac <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart,char *side){
	
	if(huart->Instance == USART2 && side == "top")
 8008bac:	6803      	ldr	r3, [r0, #0]
 8008bae:	4a10      	ldr	r2, [pc, #64]	; (8008bf0 <Get_channel+0x44>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d009      	beq.n	8008bc8 <Get_channel+0x1c>
		return ADC_CHANNEL_2;
	else if(huart->Instance == USART2 && side == "bottom")
 8008bb4:	4a0e      	ldr	r2, [pc, #56]	; (8008bf0 <Get_channel+0x44>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d00b      	beq.n	8008bd2 <Get_channel+0x26>
		return ADC_CHANNEL_3;
	else if(huart->Instance == USART6 && side == "top")
 8008bba:	4a0e      	ldr	r2, [pc, #56]	; (8008bf4 <Get_channel+0x48>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d00d      	beq.n	8008bdc <Get_channel+0x30>
		return ADC_CHANNEL_4;
	else if(huart->Instance == USART6 && side == "bottom")
 8008bc0:	4a0c      	ldr	r2, [pc, #48]	; (8008bf4 <Get_channel+0x48>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00f      	beq.n	8008be6 <Get_channel+0x3a>
		return ADC_CHANNEL_5;
}
 8008bc6:	4770      	bx	lr
	if(huart->Instance == USART2 && side == "top")
 8008bc8:	4a0b      	ldr	r2, [pc, #44]	; (8008bf8 <Get_channel+0x4c>)
 8008bca:	4291      	cmp	r1, r2
 8008bcc:	d1f2      	bne.n	8008bb4 <Get_channel+0x8>
		return ADC_CHANNEL_2;
 8008bce:	2002      	movs	r0, #2
 8008bd0:	e7f9      	b.n	8008bc6 <Get_channel+0x1a>
	else if(huart->Instance == USART2 && side == "bottom")
 8008bd2:	4a0a      	ldr	r2, [pc, #40]	; (8008bfc <Get_channel+0x50>)
 8008bd4:	4291      	cmp	r1, r2
 8008bd6:	d1f0      	bne.n	8008bba <Get_channel+0xe>
		return ADC_CHANNEL_3;
 8008bd8:	2003      	movs	r0, #3
 8008bda:	e7f4      	b.n	8008bc6 <Get_channel+0x1a>
	else if(huart->Instance == USART6 && side == "top")
 8008bdc:	4a06      	ldr	r2, [pc, #24]	; (8008bf8 <Get_channel+0x4c>)
 8008bde:	4291      	cmp	r1, r2
 8008be0:	d1ee      	bne.n	8008bc0 <Get_channel+0x14>
		return ADC_CHANNEL_4;
 8008be2:	2004      	movs	r0, #4
 8008be4:	e7ef      	b.n	8008bc6 <Get_channel+0x1a>
	else if(huart->Instance == USART6 && side == "bottom")
 8008be6:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <Get_channel+0x50>)
 8008be8:	4299      	cmp	r1, r3
 8008bea:	d1ec      	bne.n	8008bc6 <Get_channel+0x1a>
		return ADC_CHANNEL_5;
 8008bec:	2005      	movs	r0, #5
 8008bee:	e7ea      	b.n	8008bc6 <Get_channel+0x1a>
 8008bf0:	40004400 	.word	0x40004400
 8008bf4:	40011400 	.word	0x40011400
 8008bf8:	0801a98c 	.word	0x0801a98c
 8008bfc:	0801a990 	.word	0x0801a990

08008c00 <Error_Handler>:

void Error_Handler(void){
 8008c00:	b510      	push	{r4, lr}
	
	HAL_Delay(100);
 8008c02:	2064      	movs	r0, #100	; 0x64
 8008c04:	f009 f8f0 	bl	8011de8 <HAL_Delay>
	
}
 8008c08:	bd10      	pop	{r4, pc}
	...

08008c0c <MX_ADC_Init>:
void MX_ADC_Init(void){
 8008c0c:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 8008c0e:	4811      	ldr	r0, [pc, #68]	; (8008c54 <MX_ADC_Init+0x48>)
 8008c10:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <MX_ADC_Init+0x4c>)
 8008c12:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008c14:	2380      	movs	r3, #128	; 0x80
 8008c16:	061b      	lsls	r3, r3, #24
 8008c18:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008c1e:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008c20:	2201      	movs	r2, #1
 8008c22:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008c24:	2104      	movs	r1, #4
 8008c26:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait =DISABLE;
 8008c28:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 8008c2a:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 8008c2c:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 8008c2e:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008c30:	21c2      	movs	r1, #194	; 0xc2
 8008c32:	31ff      	adds	r1, #255	; 0xff
 8008c34:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008c36:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 8008c38:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008c3a:	6342      	str	r2, [r0, #52]	; 0x34
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 8008c3c:	f009 f9b0 	bl	8011fa0 <HAL_ADC_Init>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d103      	bne.n	8008c4c <MX_ADC_Init+0x40>
	ADC_flag =1;
 8008c44:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <MX_ADC_Init+0x50>)
 8008c46:	2201      	movs	r2, #1
 8008c48:	701a      	strb	r2, [r3, #0]
}
 8008c4a:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008c4c:	f7ff ffd8 	bl	8008c00 <Error_Handler>
 8008c50:	e7f8      	b.n	8008c44 <MX_ADC_Init+0x38>
 8008c52:	46c0      	nop			; (mov r8, r8)
 8008c54:	20007104 	.word	0x20007104
 8008c58:	40012400 	.word	0x40012400
 8008c5c:	20001730 	.word	0x20001730

08008c60 <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	0005      	movs	r5, r0
 8008c66:	000e      	movs	r6, r1
	if(0 == ADC_flag)
 8008c68:	4b4c      	ldr	r3, [pc, #304]	; (8008d9c <ReadTempAndVref+0x13c>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d100      	bne.n	8008c72 <ReadTempAndVref+0x12>
 8008c70:	e085      	b.n	8008d7e <ReadTempAndVref+0x11e>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c72:	494b      	ldr	r1, [pc, #300]	; (8008da0 <ReadTempAndVref+0x140>)
 8008c74:	2310      	movs	r3, #16
 8008c76:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008c78:	2380      	movs	r3, #128	; 0x80
 8008c7a:	015b      	lsls	r3, r3, #5
 8008c7c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c82:	4848      	ldr	r0, [pc, #288]	; (8008da4 <ReadTempAndVref+0x144>)
 8008c84:	f009 fafa 	bl	801227c <HAL_ADC_ConfigChannel>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d000      	beq.n	8008c8e <ReadTempAndVref+0x2e>
 8008c8c:	e07a      	b.n	8008d84 <ReadTempAndVref+0x124>
	HAL_ADC_Start(&hadc);
 8008c8e:	4c45      	ldr	r4, [pc, #276]	; (8008da4 <ReadTempAndVref+0x144>)
 8008c90:	0020      	movs	r0, r4
 8008c92:	f009 fa39 	bl	8012108 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008c96:	2164      	movs	r1, #100	; 0x64
 8008c98:	0020      	movs	r0, r4
 8008c9a:	f009 fa87 	bl	80121ac <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 8008c9e:	0020      	movs	r0, r4
 8008ca0:	f009 fae6 	bl	8012270 <HAL_ADC_GetValue>
 8008ca4:	b280      	uxth	r0, r0
 8008ca6:	4b40      	ldr	r3, [pc, #256]	; (8008da8 <ReadTempAndVref+0x148>)
 8008ca8:	8018      	strh	r0, [r3, #0]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008caa:	f7fa f9cf 	bl	800304c <__aeabi_i2d>
 8008cae:	4a3f      	ldr	r2, [pc, #252]	; (8008dac <ReadTempAndVref+0x14c>)
 8008cb0:	4b3f      	ldr	r3, [pc, #252]	; (8008db0 <ReadTempAndVref+0x150>)
 8008cb2:	f7f9 fbbf 	bl	8002434 <__aeabi_dmul>
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4b3e      	ldr	r3, [pc, #248]	; (8008db4 <ReadTempAndVref+0x154>)
 8008cba:	f7f8 ffb1 	bl	8001c20 <__aeabi_ddiv>
 8008cbe:	4a3e      	ldr	r2, [pc, #248]	; (8008db8 <ReadTempAndVref+0x158>)
 8008cc0:	4b3e      	ldr	r3, [pc, #248]	; (8008dbc <ReadTempAndVref+0x15c>)
 8008cc2:	f7f9 fe29 	bl	8002918 <__aeabi_dsub>
 8008cc6:	4a3e      	ldr	r2, [pc, #248]	; (8008dc0 <ReadTempAndVref+0x160>)
 8008cc8:	4b3e      	ldr	r3, [pc, #248]	; (8008dc4 <ReadTempAndVref+0x164>)
 8008cca:	f7f8 ffa9 	bl	8001c20 <__aeabi_ddiv>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	4b3d      	ldr	r3, [pc, #244]	; (8008dc8 <ReadTempAndVref+0x168>)
 8008cd2:	f7f8 fc89 	bl	80015e8 <__aeabi_dadd>
 8008cd6:	f7fa fa77 	bl	80031c8 <__aeabi_d2f>
 8008cda:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 8008cdc:	0020      	movs	r0, r4
 8008cde:	f009 fa43 	bl	8012168 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008ce2:	492f      	ldr	r1, [pc, #188]	; (8008da0 <ReadTempAndVref+0x140>)
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008ce8:	4b38      	ldr	r3, [pc, #224]	; (8008dcc <ReadTempAndVref+0x16c>)
 8008cea:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008cec:	2301      	movs	r3, #1
 8008cee:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008cf0:	0020      	movs	r0, r4
 8008cf2:	f009 fac3 	bl	801227c <HAL_ADC_ConfigChannel>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d147      	bne.n	8008d8a <ReadTempAndVref+0x12a>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008cfa:	4929      	ldr	r1, [pc, #164]	; (8008da0 <ReadTempAndVref+0x140>)
 8008cfc:	2311      	movs	r3, #17
 8008cfe:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d00:	2380      	movs	r3, #128	; 0x80
 8008d02:	015b      	lsls	r3, r3, #5
 8008d04:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008d06:	2305      	movs	r3, #5
 8008d08:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008d0a:	4826      	ldr	r0, [pc, #152]	; (8008da4 <ReadTempAndVref+0x144>)
 8008d0c:	f009 fab6 	bl	801227c <HAL_ADC_ConfigChannel>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d13d      	bne.n	8008d90 <ReadTempAndVref+0x130>
	HAL_ADC_Start(&hadc);
 8008d14:	4c23      	ldr	r4, [pc, #140]	; (8008da4 <ReadTempAndVref+0x144>)
 8008d16:	0020      	movs	r0, r4
 8008d18:	f009 f9f6 	bl	8012108 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008d1c:	2164      	movs	r1, #100	; 0x64
 8008d1e:	0020      	movs	r0, r4
 8008d20:	f009 fa44 	bl	80121ac <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 8008d24:	0020      	movs	r0, r4
 8008d26:	f009 faa3 	bl	8012270 <HAL_ADC_GetValue>
 8008d2a:	b285      	uxth	r5, r0
 8008d2c:	4b28      	ldr	r3, [pc, #160]	; (8008dd0 <ReadTempAndVref+0x170>)
 8008d2e:	801d      	strh	r5, [r3, #0]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 8008d30:	4b28      	ldr	r3, [pc, #160]	; (8008dd4 <ReadTempAndVref+0x174>)
 8008d32:	8818      	ldrh	r0, [r3, #0]
 8008d34:	f7fa f98a 	bl	800304c <__aeabi_i2d>
 8008d38:	4a1c      	ldr	r2, [pc, #112]	; (8008dac <ReadTempAndVref+0x14c>)
 8008d3a:	4b1d      	ldr	r3, [pc, #116]	; (8008db0 <ReadTempAndVref+0x150>)
 8008d3c:	f7f9 fb7a 	bl	8002434 <__aeabi_dmul>
 8008d40:	9000      	str	r0, [sp, #0]
 8008d42:	9101      	str	r1, [sp, #4]
 8008d44:	0028      	movs	r0, r5
 8008d46:	f7fa f981 	bl	800304c <__aeabi_i2d>
 8008d4a:	0002      	movs	r2, r0
 8008d4c:	000b      	movs	r3, r1
 8008d4e:	9800      	ldr	r0, [sp, #0]
 8008d50:	9901      	ldr	r1, [sp, #4]
 8008d52:	f7f8 ff65 	bl	8001c20 <__aeabi_ddiv>
 8008d56:	f7fa fa37 	bl	80031c8 <__aeabi_d2f>
 8008d5a:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 8008d5c:	0020      	movs	r0, r4
 8008d5e:	f009 fa03 	bl	8012168 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008d62:	490f      	ldr	r1, [pc, #60]	; (8008da0 <ReadTempAndVref+0x140>)
 8008d64:	2311      	movs	r3, #17
 8008d66:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008d68:	4b18      	ldr	r3, [pc, #96]	; (8008dcc <ReadTempAndVref+0x16c>)
 8008d6a:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008d70:	0020      	movs	r0, r4
 8008d72:	f009 fa83 	bl	801227c <HAL_ADC_ConfigChannel>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d10d      	bne.n	8008d96 <ReadTempAndVref+0x136>
}
 8008d7a:	b002      	add	sp, #8
 8008d7c:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 8008d7e:	f7ff ff45 	bl	8008c0c <MX_ADC_Init>
 8008d82:	e776      	b.n	8008c72 <ReadTempAndVref+0x12>
		Error_Handler();
 8008d84:	f7ff ff3c 	bl	8008c00 <Error_Handler>
 8008d88:	e781      	b.n	8008c8e <ReadTempAndVref+0x2e>
		Error_Handler();
 8008d8a:	f7ff ff39 	bl	8008c00 <Error_Handler>
 8008d8e:	e7b4      	b.n	8008cfa <ReadTempAndVref+0x9a>
		Error_Handler();
 8008d90:	f7ff ff36 	bl	8008c00 <Error_Handler>
 8008d94:	e7be      	b.n	8008d14 <ReadTempAndVref+0xb4>
		Error_Handler();
 8008d96:	f7ff ff33 	bl	8008c00 <Error_Handler>
}
 8008d9a:	e7ee      	b.n	8008d7a <ReadTempAndVref+0x11a>
 8008d9c:	20001730 	.word	0x20001730
 8008da0:	200017bc 	.word	0x200017bc
 8008da4:	20007104 	.word	0x20007104
 8008da8:	20001734 	.word	0x20001734
 8008dac:	66666666 	.word	0x66666666
 8008db0:	400a6666 	.word	0x400a6666
 8008db4:	40affe00 	.word	0x40affe00
 8008db8:	28f5c28f 	.word	0x28f5c28f
 8008dbc:	3ff68f5c 	.word	0x3ff68f5c
 8008dc0:	33333333 	.word	0x33333333
 8008dc4:	40113333 	.word	0x40113333
 8008dc8:	40390000 	.word	0x40390000
 8008dcc:	00001001 	.word	0x00001001
 8008dd0:	20001732 	.word	0x20001732
 8008dd4:	1ffff7ba 	.word	0x1ffff7ba

08008dd8 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	0004      	movs	r4, r0
 8008dde:	000d      	movs	r5, r1
	if(port == 2 || port == 3){
 8008de0:	1e83      	subs	r3, r0, #2
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d901      	bls.n	8008dec <GetReadPrecentage+0x14>
}
 8008de8:	b006      	add	sp, #24
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
		if(0 == ADC_flag){
 8008dec:	4b3d      	ldr	r3, [pc, #244]	; (8008ee4 <GetReadPrecentage+0x10c>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d055      	beq.n	8008ea0 <GetReadPrecentage+0xc8>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8008df4:	2090      	movs	r0, #144	; 0x90
 8008df6:	2201      	movs	r2, #1
 8008df8:	2110      	movs	r1, #16
 8008dfa:	05c0      	lsls	r0, r0, #23
 8008dfc:	f00a fbfb 	bl	80135f6 <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 8008e00:	0020      	movs	r0, r4
 8008e02:	f006 fe23 	bl	800fa4c <GetUart>
 8008e06:	4938      	ldr	r1, [pc, #224]	; (8008ee8 <GetReadPrecentage+0x110>)
 8008e08:	f7ff fed0 	bl	8008bac <Get_channel>
 8008e0c:	4b37      	ldr	r3, [pc, #220]	; (8008eec <GetReadPrecentage+0x114>)
 8008e0e:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008e10:	4937      	ldr	r1, [pc, #220]	; (8008ef0 <GetReadPrecentage+0x118>)
 8008e12:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008e14:	2380      	movs	r3, #128	; 0x80
 8008e16:	015b      	lsls	r3, r3, #5
 8008e18:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008e1e:	4835      	ldr	r0, [pc, #212]	; (8008ef4 <GetReadPrecentage+0x11c>)
 8008e20:	f009 fa2c 	bl	801227c <HAL_ADC_ConfigChannel>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d15a      	bne.n	8008ede <GetReadPrecentage+0x106>
		HAL_ADC_Start(&hadc);
 8008e28:	4c32      	ldr	r4, [pc, #200]	; (8008ef4 <GetReadPrecentage+0x11c>)
 8008e2a:	0020      	movs	r0, r4
 8008e2c:	f009 f96c 	bl	8012108 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008e30:	2164      	movs	r1, #100	; 0x64
 8008e32:	0020      	movs	r0, r4
 8008e34:	f009 f9ba 	bl	80121ac <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 8008e38:	0020      	movs	r0, r4
 8008e3a:	f009 fa19 	bl	8012270 <HAL_ADC_GetValue>
 8008e3e:	f7f8 fb93 	bl	8001568 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 8008e42:	f7fa f96f 	bl	8003124 <__aeabi_f2d>
 8008e46:	4a2c      	ldr	r2, [pc, #176]	; (8008ef8 <GetReadPrecentage+0x120>)
 8008e48:	4b2c      	ldr	r3, [pc, #176]	; (8008efc <GetReadPrecentage+0x124>)
 8008e4a:	f7f9 faf3 	bl	8002434 <__aeabi_dmul>
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4b2b      	ldr	r3, [pc, #172]	; (8008f00 <GetReadPrecentage+0x128>)
 8008e52:	f7f8 fee5 	bl	8001c20 <__aeabi_ddiv>
 8008e56:	f7fa f9b7 	bl	80031c8 <__aeabi_d2f>
 8008e5a:	4b2a      	ldr	r3, [pc, #168]	; (8008f04 <GetReadPrecentage+0x12c>)
 8008e5c:	6018      	str	r0, [r3, #0]
		current =(100 * percentage) / 3.3;
 8008e5e:	492a      	ldr	r1, [pc, #168]	; (8008f08 <GetReadPrecentage+0x130>)
 8008e60:	f7f8 f822 	bl	8000ea8 <__aeabi_fmul>
 8008e64:	f7fa f95e 	bl	8003124 <__aeabi_f2d>
 8008e68:	4a23      	ldr	r2, [pc, #140]	; (8008ef8 <GetReadPrecentage+0x120>)
 8008e6a:	4b24      	ldr	r3, [pc, #144]	; (8008efc <GetReadPrecentage+0x124>)
 8008e6c:	f7f8 fed8 	bl	8001c20 <__aeabi_ddiv>
 8008e70:	f7fa f9aa 	bl	80031c8 <__aeabi_d2f>
 8008e74:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <GetReadPrecentage+0x134>)
 8008e76:	6018      	str	r0, [r3, #0]
		*precentageValue =current;
 8008e78:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 8008e7a:	0020      	movs	r0, r4
 8008e7c:	f009 f974 	bl	8012168 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008e80:	491b      	ldr	r1, [pc, #108]	; (8008ef0 <GetReadPrecentage+0x118>)
 8008e82:	4b1a      	ldr	r3, [pc, #104]	; (8008eec <GetReadPrecentage+0x114>)
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008e88:	4b21      	ldr	r3, [pc, #132]	; (8008f10 <GetReadPrecentage+0x138>)
 8008e8a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008e90:	0020      	movs	r0, r4
 8008e92:	f009 f9f3 	bl	801227c <HAL_ADC_ConfigChannel>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d0a6      	beq.n	8008de8 <GetReadPrecentage+0x10>
			Error_Handler();
 8008e9a:	f7ff feb1 	bl	8008c00 <Error_Handler>
 8008e9e:	e7a3      	b.n	8008de8 <GetReadPrecentage+0x10>
			MX_ADC_Init();
 8008ea0:	f7ff feb4 	bl	8008c0c <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008ea4:	0020      	movs	r0, r4
 8008ea6:	f006 fdd1 	bl	800fa4c <GetUart>
 8008eaa:	f00b fb06 	bl	80144ba <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 8008eae:	2690      	movs	r6, #144	; 0x90
 8008eb0:	05f6      	lsls	r6, r6, #23
 8008eb2:	2110      	movs	r1, #16
 8008eb4:	0030      	movs	r0, r6
 8008eb6:	f00a fb15 	bl	80134e4 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 8008eba:	480e      	ldr	r0, [pc, #56]	; (8008ef4 <GetReadPrecentage+0x11c>)
 8008ebc:	f009 fa84 	bl	80123c8 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ec4:	3b0f      	subs	r3, #15
 8008ec6:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008ec8:	3302      	adds	r3, #2
 8008eca:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008ecc:	a901      	add	r1, sp, #4
 8008ece:	0030      	movs	r0, r6
 8008ed0:	f00a fa40 	bl	8013354 <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 8008ed4:	1e63      	subs	r3, r4, #1
 8008ed6:	4a0f      	ldr	r2, [pc, #60]	; (8008f14 <GetReadPrecentage+0x13c>)
 8008ed8:	2106      	movs	r1, #6
 8008eda:	54d1      	strb	r1, [r2, r3]
 8008edc:	e78a      	b.n	8008df4 <GetReadPrecentage+0x1c>
			Error_Handler();
 8008ede:	f7ff fe8f 	bl	8008c00 <Error_Handler>
 8008ee2:	e7a1      	b.n	8008e28 <GetReadPrecentage+0x50>
 8008ee4:	20001730 	.word	0x20001730
 8008ee8:	0801a990 	.word	0x0801a990
 8008eec:	20001740 	.word	0x20001740
 8008ef0:	200017bc 	.word	0x200017bc
 8008ef4:	20007104 	.word	0x20007104
 8008ef8:	66666666 	.word	0x66666666
 8008efc:	400a6666 	.word	0x400a6666
 8008f00:	40affe00 	.word	0x40affe00
 8008f04:	20001788 	.word	0x20001788
 8008f08:	42c80000 	.word	0x42c80000
 8008f0c:	2000177c 	.word	0x2000177c
 8008f10:	00001001 	.word	0x00001001
 8008f14:	200010ec 	.word	0x200010ec

08008f18 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008f18:	2802      	cmp	r0, #2
 8008f1a:	d008      	beq.n	8008f2e <Get_Rank+0x16>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
 8008f1c:	2802      	cmp	r0, #2
 8008f1e:	d00d      	beq.n	8008f3c <Get_Rank+0x24>
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008f20:	2803      	cmp	r0, #3
 8008f22:	d012      	beq.n	8008f4a <Get_Rank+0x32>
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
 8008f24:	2803      	cmp	r0, #3
 8008f26:	d017      	beq.n	8008f58 <Get_Rank+0x40>
		Rank_t =3;
	return Rank_t;
 8008f28:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <Get_Rank+0x50>)
 8008f2a:	7818      	ldrb	r0, [r3, #0]
}
 8008f2c:	4770      	bx	lr
	if(Port == 2 && side == "top")
 8008f2e:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <Get_Rank+0x54>)
 8008f30:	4299      	cmp	r1, r3
 8008f32:	d1f3      	bne.n	8008f1c <Get_Rank+0x4>
		Rank_t =0;
 8008f34:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <Get_Rank+0x50>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
 8008f3a:	e7f5      	b.n	8008f28 <Get_Rank+0x10>
	else if(Port == 2 && side == "bottom")
 8008f3c:	4b0c      	ldr	r3, [pc, #48]	; (8008f70 <Get_Rank+0x58>)
 8008f3e:	4299      	cmp	r1, r3
 8008f40:	d1ee      	bne.n	8008f20 <Get_Rank+0x8>
		Rank_t =1;
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <Get_Rank+0x50>)
 8008f44:	2201      	movs	r2, #1
 8008f46:	701a      	strb	r2, [r3, #0]
 8008f48:	e7ee      	b.n	8008f28 <Get_Rank+0x10>
	else if(Port == 3 && side == "top")
 8008f4a:	4b08      	ldr	r3, [pc, #32]	; (8008f6c <Get_Rank+0x54>)
 8008f4c:	4299      	cmp	r1, r3
 8008f4e:	d1e9      	bne.n	8008f24 <Get_Rank+0xc>
		Rank_t =2;
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <Get_Rank+0x50>)
 8008f52:	2202      	movs	r2, #2
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	e7e7      	b.n	8008f28 <Get_Rank+0x10>
	else if(Port == 3 && side == "bottom")
 8008f58:	4b05      	ldr	r3, [pc, #20]	; (8008f70 <Get_Rank+0x58>)
 8008f5a:	4299      	cmp	r1, r3
 8008f5c:	d1e4      	bne.n	8008f28 <Get_Rank+0x10>
		Rank_t =3;
 8008f5e:	4b02      	ldr	r3, [pc, #8]	; (8008f68 <Get_Rank+0x50>)
 8008f60:	2203      	movs	r2, #3
 8008f62:	701a      	strb	r2, [r3, #0]
 8008f64:	e7e0      	b.n	8008f28 <Get_Rank+0x10>
 8008f66:	46c0      	nop			; (mov r8, r8)
 8008f68:	20001741 	.word	0x20001741
 8008f6c:	0801a98c 	.word	0x0801a98c
 8008f70:	0801a990 	.word	0x0801a990

08008f74 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008f74:	b570      	push	{r4, r5, r6, lr}
 8008f76:	0004      	movs	r4, r0
 8008f78:	000d      	movs	r5, r1
	if(ADC_port == 2 || ADC_port == 3){
 8008f7a:	1e83      	subs	r3, r0, #2
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d900      	bls.n	8008f84 <ADCSelectChannel+0x10>
}
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008f84:	f006 fd62 	bl	800fa4c <GetUart>
 8008f88:	f00b fa97 	bl	80144ba <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008f8c:	1e63      	subs	r3, r4, #1
 8008f8e:	4a0d      	ldr	r2, [pc, #52]	; (8008fc4 <ADCSelectChannel+0x50>)
 8008f90:	2106      	movs	r1, #6
 8008f92:	54d1      	strb	r1, [r2, r3]
		ADC_Channels_Config(&hadc);
 8008f94:	480c      	ldr	r0, [pc, #48]	; (8008fc8 <ADCSelectChannel+0x54>)
 8008f96:	f7ff fdd9 	bl	8008b4c <ADC_Channels_Config>
		Channel =Get_channel(GetUart(ADC_port),side);
 8008f9a:	0020      	movs	r0, r4
 8008f9c:	f006 fd56 	bl	800fa4c <GetUart>
 8008fa0:	0029      	movs	r1, r5
 8008fa2:	f7ff fe03 	bl	8008bac <Get_channel>
 8008fa6:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <ADCSelectChannel+0x58>)
 8008fa8:	7018      	strb	r0, [r3, #0]
		Rank_t =Get_Rank(ADC_port,side);
 8008faa:	0029      	movs	r1, r5
 8008fac:	0020      	movs	r0, r4
 8008fae:	f7ff ffb3 	bl	8008f18 <Get_Rank>
 8008fb2:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <ADCSelectChannel+0x5c>)
 8008fb4:	7018      	strb	r0, [r3, #0]
		if(ADC_flag == 0)
 8008fb6:	4b07      	ldr	r3, [pc, #28]	; (8008fd4 <ADCSelectChannel+0x60>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e1      	bne.n	8008f82 <ADCSelectChannel+0xe>
			MX_ADC_Init();
 8008fbe:	f7ff fe25 	bl	8008c0c <MX_ADC_Init>
}
 8008fc2:	e7de      	b.n	8008f82 <ADCSelectChannel+0xe>
 8008fc4:	200010ec 	.word	0x200010ec
 8008fc8:	20007104 	.word	0x20007104
 8008fcc:	20001740 	.word	0x20001740
 8008fd0:	20001741 	.word	0x20001741
 8008fd4:	20001730 	.word	0x20001730

08008fd8 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fda:	0005      	movs	r5, r0
 8008fdc:	000e      	movs	r6, r1
 8008fde:	0014      	movs	r4, r2
	if(ADC_flag == 1){
 8008fe0:	4b26      	ldr	r3, [pc, #152]	; (800907c <ReadADCChannel+0xa4>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d008      	beq.n	8008ffa <ReadADCChannel+0x22>
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8008fe8:	4b25      	ldr	r3, [pc, #148]	; (8009080 <ReadADCChannel+0xa8>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	4a25      	ldr	r2, [pc, #148]	; (8009084 <ReadADCChannel+0xac>)
 8008ff0:	5a98      	ldrh	r0, [r3, r2]
 8008ff2:	f7f8 fab9 	bl	8001568 <__aeabi_ui2f>
 8008ff6:	6020      	str	r0, [r4, #0]
}
 8008ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8008ffa:	f006 fd27 	bl	800fa4c <GetUart>
 8008ffe:	0031      	movs	r1, r6
 8009000:	f7ff fdd4 	bl	8008bac <Get_channel>
 8009004:	4f20      	ldr	r7, [pc, #128]	; (8009088 <ReadADCChannel+0xb0>)
 8009006:	7038      	strb	r0, [r7, #0]
		Rank_t =Get_Rank(Port,side);
 8009008:	0031      	movs	r1, r6
 800900a:	0028      	movs	r0, r5
 800900c:	f7ff ff84 	bl	8008f18 <Get_Rank>
 8009010:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <ReadADCChannel+0xa8>)
 8009012:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8009014:	491d      	ldr	r1, [pc, #116]	; (800908c <ReadADCChannel+0xb4>)
 8009016:	783b      	ldrb	r3, [r7, #0]
 8009018:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800901a:	2380      	movs	r3, #128	; 0x80
 800901c:	015b      	lsls	r3, r3, #5
 800901e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8009020:	2303      	movs	r3, #3
 8009022:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8009024:	481a      	ldr	r0, [pc, #104]	; (8009090 <ReadADCChannel+0xb8>)
 8009026:	f009 f929 	bl	801227c <HAL_ADC_ConfigChannel>
 800902a:	2800      	cmp	r0, #0
 800902c:	d122      	bne.n	8009074 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 800902e:	4d18      	ldr	r5, [pc, #96]	; (8009090 <ReadADCChannel+0xb8>)
 8009030:	0028      	movs	r0, r5
 8009032:	f009 f869 	bl	8012108 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8009036:	2164      	movs	r1, #100	; 0x64
 8009038:	0028      	movs	r0, r5
 800903a:	f009 f8b7 	bl	80121ac <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 800903e:	0028      	movs	r0, r5
 8009040:	f009 f916 	bl	8012270 <HAL_ADC_GetValue>
 8009044:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <ReadADCChannel+0xa8>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	4a0e      	ldr	r2, [pc, #56]	; (8009084 <ReadADCChannel+0xac>)
 800904c:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 800904e:	0028      	movs	r0, r5
 8009050:	f009 f88a 	bl	8012168 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8009054:	490d      	ldr	r1, [pc, #52]	; (800908c <ReadADCChannel+0xb4>)
 8009056:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <ReadADCChannel+0xb0>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800905c:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <ReadADCChannel+0xbc>)
 800905e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8009060:	2303      	movs	r3, #3
 8009062:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8009064:	0028      	movs	r0, r5
 8009066:	f009 f909 	bl	801227c <HAL_ADC_ConfigChannel>
 800906a:	2800      	cmp	r0, #0
 800906c:	d0bc      	beq.n	8008fe8 <ReadADCChannel+0x10>
			Error_Handler();
 800906e:	f7ff fdc7 	bl	8008c00 <Error_Handler>
 8009072:	e7b9      	b.n	8008fe8 <ReadADCChannel+0x10>
			Error_Handler();
 8009074:	f7ff fdc4 	bl	8008c00 <Error_Handler>
 8009078:	e7d9      	b.n	800902e <ReadADCChannel+0x56>
 800907a:	46c0      	nop			; (mov r8, r8)
 800907c:	20001730 	.word	0x20001730
 8009080:	20001741 	.word	0x20001741
 8009084:	20001738 	.word	0x20001738
 8009088:	20001740 	.word	0x20001740
 800908c:	200017bc 	.word	0x200017bc
 8009090:	20007104 	.word	0x20007104
 8009094:	00001001 	.word	0x00001001

08009098 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port){
}
 8009098:	4770      	bx	lr

0800909a <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port){
}
 800909a:	4770      	bx	lr

0800909c <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port){
}
 800909c:	4770      	bx	lr

0800909e <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 800909e:	4770      	bx	lr

080090a0 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port,uint8_t eventType){
}
 80090a0:	4770      	bx	lr
	...

080090a4 <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 80090a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090a6:	46ce      	mov	lr, r9
 80090a8:	4647      	mov	r7, r8
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b087      	sub	sp, #28
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80090ae:	2401      	movs	r4, #1
	uint8_t connected =GPIO_PIN_RESET, state =0;
 80090b0:	2600      	movs	r6, #0
 80090b2:	2300      	movs	r3, #0
 80090b4:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80090b6:	e11e      	b.n	80092f6 <CheckAttachedButtons+0x252>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 80090b8:	230e      	movs	r3, #14
 80090ba:	446b      	add	r3, sp
 80090bc:	8819      	ldrh	r1, [r3, #0]
 80090be:	2201      	movs	r2, #1
 80090c0:	9805      	ldr	r0, [sp, #20]
 80090c2:	f00a fa98 	bl	80135f6 <HAL_GPIO_WritePin>
				Delay_us(10);
 80090c6:	200a      	movs	r0, #10
 80090c8:	f006 fb1a 	bl	800f700 <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 80090cc:	ab03      	add	r3, sp, #12
 80090ce:	8819      	ldrh	r1, [r3, #0]
 80090d0:	9804      	ldr	r0, [sp, #16]
 80090d2:	f00a fa89 	bl	80135e8 <HAL_GPIO_ReadPin>
 80090d6:	4680      	mov	r8, r0
 80090d8:	e13b      	b.n	8009352 <CheckAttachedButtons+0x2ae>
			switch(button[i].type){
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d104      	bne.n	80090e8 <CheckAttachedButtons+0x44>
					if(connected == GPIO_PIN_SET)
 80090de:	4643      	mov	r3, r8
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d043      	beq.n	800916c <CheckAttachedButtons+0xc8>
					else if(connected == GPIO_PIN_RESET)
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d03b      	beq.n	8009160 <CheckAttachedButtons+0xbc>
			if(state == CLOSED || state == ON){
 80090e8:	2e04      	cmp	r6, #4
 80090ea:	d040      	beq.n	800916e <CheckAttachedButtons+0xca>
 80090ec:	2e02      	cmp	r6, #2
 80090ee:	d03e      	beq.n	800916e <CheckAttachedButtons+0xca>
			if(state == OPEN || state == OFF){
 80090f0:	2e03      	cmp	r6, #3
 80090f2:	d04e      	beq.n	8009192 <CheckAttachedButtons+0xee>
 80090f4:	2e01      	cmp	r6, #1
 80090f6:	d04c      	beq.n	8009192 <CheckAttachedButtons+0xee>
			if(pressCounter[i] < BOS.buttons.debounce){
 80090f8:	00ab      	lsls	r3, r5, #2
 80090fa:	4abc      	ldr	r2, [pc, #752]	; (80093ec <CheckAttachedButtons+0x348>)
 80090fc:	589b      	ldr	r3, [r3, r2]
 80090fe:	4abc      	ldr	r2, [pc, #752]	; (80093f0 <CheckAttachedButtons+0x34c>)
 8009100:	8812      	ldrh	r2, [r2, #0]
 8009102:	4293      	cmp	r3, r2
 8009104:	d200      	bcs.n	8009108 <CheckAttachedButtons+0x64>
 8009106:	e099      	b.n	800923c <CheckAttachedButtons+0x198>
				if(pressCounter[i] == BOS.buttons.debounce){
 8009108:	d06c      	beq.n	80091e4 <CheckAttachedButtons+0x140>
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800910a:	00ab      	lsls	r3, r5, #2
 800910c:	49b9      	ldr	r1, [pc, #740]	; (80093f4 <CheckAttachedButtons+0x350>)
 800910e:	585b      	ldr	r3, [r3, r1]
 8009110:	429a      	cmp	r2, r3
 8009112:	d203      	bcs.n	800911c <CheckAttachedButtons+0x78>
					releaseCounter[i] =0;
 8009114:	00ab      	lsls	r3, r5, #2
 8009116:	000a      	movs	r2, r1
 8009118:	2100      	movs	r1, #0
 800911a:	5099      	str	r1, [r3, r2]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 800911c:	00ab      	lsls	r3, r5, #2
 800911e:	4ab3      	ldr	r2, [pc, #716]	; (80093ec <CheckAttachedButtons+0x348>)
 8009120:	589b      	ldr	r3, [r3, r2]
 8009122:	4ab3      	ldr	r2, [pc, #716]	; (80093f0 <CheckAttachedButtons+0x34c>)
 8009124:	8852      	ldrh	r2, [r2, #2]
 8009126:	4293      	cmp	r3, r2
 8009128:	d979      	bls.n	800921e <CheckAttachedButtons+0x17a>
 800912a:	22f4      	movs	r2, #244	; 0xf4
 800912c:	32ff      	adds	r2, #255	; 0xff
 800912e:	4293      	cmp	r3, r2
 8009130:	d875      	bhi.n	800921e <CheckAttachedButtons+0x17a>
					if(clicked == 0)
 8009132:	4bb1      	ldr	r3, [pc, #708]	; (80093f8 <CheckAttachedButtons+0x354>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d15e      	bne.n	80091f8 <CheckAttachedButtons+0x154>
						clicked =1;		// Record a possible single click
 800913a:	4baf      	ldr	r3, [pc, #700]	; (80093f8 <CheckAttachedButtons+0x354>)
 800913c:	3af3      	subs	r2, #243	; 0xf3
 800913e:	3aff      	subs	r2, #255	; 0xff
 8009140:	701a      	strb	r2, [r3, #0]
 8009142:	e07b      	b.n	800923c <CheckAttachedButtons+0x198>
					if(connected == GPIO_PIN_SET)
 8009144:	4643      	mov	r3, r8
 8009146:	2b01      	cmp	r3, #1
 8009148:	d01c      	beq.n	8009184 <CheckAttachedButtons+0xe0>
					else if(connected == GPIO_PIN_RESET)
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1cc      	bne.n	80090e8 <CheckAttachedButtons+0x44>
						state =OPEN;
 800914e:	2603      	movs	r6, #3
 8009150:	e7cc      	b.n	80090ec <CheckAttachedButtons+0x48>
					if(connected == GPIO_PIN_SET)
 8009152:	4643      	mov	r3, r8
 8009154:	2b01      	cmp	r3, #1
 8009156:	d005      	beq.n	8009164 <CheckAttachedButtons+0xc0>
					else if(connected == GPIO_PIN_RESET)
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1c5      	bne.n	80090e8 <CheckAttachedButtons+0x44>
						state =OFF;
 800915c:	2601      	movs	r6, #1
 800915e:	e7c5      	b.n	80090ec <CheckAttachedButtons+0x48>
						state =OPEN;
 8009160:	2603      	movs	r6, #3
 8009162:	e7c3      	b.n	80090ec <CheckAttachedButtons+0x48>
						state =ON;
 8009164:	2602      	movs	r6, #2
 8009166:	e7c1      	b.n	80090ec <CheckAttachedButtons+0x48>
						state =OFF;
 8009168:	4646      	mov	r6, r8
 800916a:	e7bf      	b.n	80090ec <CheckAttachedButtons+0x48>
						state =CLOSED;
 800916c:	2604      	movs	r6, #4
				if(pressCounter[i] < 0xFFFF)
 800916e:	00ab      	lsls	r3, r5, #2
 8009170:	4a9e      	ldr	r2, [pc, #632]	; (80093ec <CheckAttachedButtons+0x348>)
 8009172:	589b      	ldr	r3, [r3, r2]
 8009174:	4aa1      	ldr	r2, [pc, #644]	; (80093fc <CheckAttachedButtons+0x358>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d806      	bhi.n	8009188 <CheckAttachedButtons+0xe4>
					++pressCounter[i];			// Advance the debounce counter
 800917a:	00aa      	lsls	r2, r5, #2
 800917c:	3301      	adds	r3, #1
 800917e:	499b      	ldr	r1, [pc, #620]	; (80093ec <CheckAttachedButtons+0x348>)
 8009180:	5053      	str	r3, [r2, r1]
 8009182:	e7b5      	b.n	80090f0 <CheckAttachedButtons+0x4c>
						state =CLOSED;
 8009184:	2604      	movs	r6, #4
 8009186:	e7f2      	b.n	800916e <CheckAttachedButtons+0xca>
					pressCounter[i] =0;			// Reset debounce counter
 8009188:	00ab      	lsls	r3, r5, #2
 800918a:	4a98      	ldr	r2, [pc, #608]	; (80093ec <CheckAttachedButtons+0x348>)
 800918c:	2100      	movs	r1, #0
 800918e:	5099      	str	r1, [r3, r2]
 8009190:	e7ae      	b.n	80090f0 <CheckAttachedButtons+0x4c>
				if(releaseCounter[i] < 0xFFFF)
 8009192:	00ab      	lsls	r3, r5, #2
 8009194:	4a97      	ldr	r2, [pc, #604]	; (80093f4 <CheckAttachedButtons+0x350>)
 8009196:	589b      	ldr	r3, [r3, r2]
 8009198:	4a98      	ldr	r2, [pc, #608]	; (80093fc <CheckAttachedButtons+0x358>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d813      	bhi.n	80091c6 <CheckAttachedButtons+0x122>
					++releaseCounter[i];		// Advance the debounce counter
 800919e:	00aa      	lsls	r2, r5, #2
 80091a0:	3301      	adds	r3, #1
 80091a2:	4994      	ldr	r1, [pc, #592]	; (80093f4 <CheckAttachedButtons+0x350>)
 80091a4:	5053      	str	r3, [r2, r1]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 80091a6:	4b94      	ldr	r3, [pc, #592]	; (80093f8 <CheckAttachedButtons+0x354>)
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d010      	beq.n	80091d0 <CheckAttachedButtons+0x12c>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 80091ae:	4b94      	ldr	r3, [pc, #592]	; (8009400 <CheckAttachedButtons+0x35c>)
 80091b0:	5d5a      	ldrb	r2, [r3, r5]
 80091b2:	4b8f      	ldr	r3, [pc, #572]	; (80093f0 <CheckAttachedButtons+0x34c>)
 80091b4:	795b      	ldrb	r3, [r3, #5]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d99e      	bls.n	80090f8 <CheckAttachedButtons+0x54>
					clicked =0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	4a8e      	ldr	r2, [pc, #568]	; (80093f8 <CheckAttachedButtons+0x354>)
 80091be:	7013      	strb	r3, [r2, #0]
					dblCounter[i] =0;			// Reset the inter-click counter
 80091c0:	4a8f      	ldr	r2, [pc, #572]	; (8009400 <CheckAttachedButtons+0x35c>)
 80091c2:	5553      	strb	r3, [r2, r5]
 80091c4:	e798      	b.n	80090f8 <CheckAttachedButtons+0x54>
					releaseCounter[i] =0;		// Reset debounce counter
 80091c6:	00ab      	lsls	r3, r5, #2
 80091c8:	4a8a      	ldr	r2, [pc, #552]	; (80093f4 <CheckAttachedButtons+0x350>)
 80091ca:	2100      	movs	r1, #0
 80091cc:	5099      	str	r1, [r3, r2]
 80091ce:	e7ea      	b.n	80091a6 <CheckAttachedButtons+0x102>
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 80091d0:	4b8b      	ldr	r3, [pc, #556]	; (8009400 <CheckAttachedButtons+0x35c>)
 80091d2:	5d5b      	ldrb	r3, [r3, r5]
 80091d4:	4a86      	ldr	r2, [pc, #536]	; (80093f0 <CheckAttachedButtons+0x34c>)
 80091d6:	7952      	ldrb	r2, [r2, #5]
 80091d8:	4293      	cmp	r3, r2
 80091da:	d8e8      	bhi.n	80091ae <CheckAttachedButtons+0x10a>
					++dblCounter[i];
 80091dc:	3301      	adds	r3, #1
 80091de:	4a88      	ldr	r2, [pc, #544]	; (8009400 <CheckAttachedButtons+0x35c>)
 80091e0:	5553      	strb	r3, [r2, r5]
 80091e2:	e789      	b.n	80090f8 <CheckAttachedButtons+0x54>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 80091e4:	00e9      	lsls	r1, r5, #3
 80091e6:	1949      	adds	r1, r1, r5
 80091e8:	4886      	ldr	r0, [pc, #536]	; (8009404 <CheckAttachedButtons+0x360>)
 80091ea:	2707      	movs	r7, #7
 80091ec:	540f      	strb	r7, [r1, r0]
					++pressCounter[i];
 80091ee:	00a9      	lsls	r1, r5, #2
 80091f0:	3301      	adds	r3, #1
 80091f2:	487e      	ldr	r0, [pc, #504]	; (80093ec <CheckAttachedButtons+0x348>)
 80091f4:	500b      	str	r3, [r1, r0]
 80091f6:	e788      	b.n	800910a <CheckAttachedButtons+0x66>
					else if(clicked == 2){
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d11f      	bne.n	800923c <CheckAttachedButtons+0x198>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 80091fc:	4b80      	ldr	r3, [pc, #512]	; (8009400 <CheckAttachedButtons+0x35c>)
 80091fe:	5d5b      	ldrb	r3, [r3, r5]
 8009200:	4a7b      	ldr	r2, [pc, #492]	; (80093f0 <CheckAttachedButtons+0x34c>)
 8009202:	7912      	ldrb	r2, [r2, #4]
 8009204:	4293      	cmp	r3, r2
 8009206:	d919      	bls.n	800923c <CheckAttachedButtons+0x198>
 8009208:	4a79      	ldr	r2, [pc, #484]	; (80093f0 <CheckAttachedButtons+0x34c>)
 800920a:	7952      	ldrb	r2, [r2, #5]
 800920c:	4293      	cmp	r3, r2
 800920e:	d215      	bcs.n	800923c <CheckAttachedButtons+0x198>
							clicked =3;	// Record a possible double click
 8009210:	4b79      	ldr	r3, [pc, #484]	; (80093f8 <CheckAttachedButtons+0x354>)
 8009212:	2203      	movs	r2, #3
 8009214:	701a      	strb	r2, [r3, #0]
							dblCounter[i] =0;	// Reset the inter-click counter
 8009216:	4b7a      	ldr	r3, [pc, #488]	; (8009400 <CheckAttachedButtons+0x35c>)
 8009218:	2200      	movs	r2, #0
 800921a:	555a      	strb	r2, [r3, r5]
 800921c:	e00e      	b.n	800923c <CheckAttachedButtons+0x198>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 800921e:	3bf5      	subs	r3, #245	; 0xf5
 8009220:	3bff      	subs	r3, #255	; 0xff
 8009222:	4a79      	ldr	r2, [pc, #484]	; (8009408 <CheckAttachedButtons+0x364>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d809      	bhi.n	800923c <CheckAttachedButtons+0x198>
					if(clicked)
 8009228:	4b73      	ldr	r3, [pc, #460]	; (80093f8 <CheckAttachedButtons+0x354>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <CheckAttachedButtons+0x192>
						clicked =0;						// Cannot be a click
 8009230:	4b71      	ldr	r3, [pc, #452]	; (80093f8 <CheckAttachedButtons+0x354>)
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8009236:	0020      	movs	r0, r4
 8009238:	f7ff f97c 	bl	8008534 <CheckForTimedButtonPress>
			if(releaseCounter[i] < BOS.buttons.debounce){
 800923c:	00ab      	lsls	r3, r5, #2
 800923e:	4a6d      	ldr	r2, [pc, #436]	; (80093f4 <CheckAttachedButtons+0x350>)
 8009240:	589b      	ldr	r3, [r3, r2]
 8009242:	4a6b      	ldr	r2, [pc, #428]	; (80093f0 <CheckAttachedButtons+0x34c>)
 8009244:	8812      	ldrh	r2, [r2, #0]
 8009246:	4293      	cmp	r3, r2
 8009248:	d33b      	bcc.n	80092c2 <CheckAttachedButtons+0x21e>
				if(releaseCounter[i] == BOS.buttons.debounce){
 800924a:	d022      	beq.n	8009292 <CheckAttachedButtons+0x1ee>
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800924c:	00ab      	lsls	r3, r5, #2
 800924e:	4967      	ldr	r1, [pc, #412]	; (80093ec <CheckAttachedButtons+0x348>)
 8009250:	585b      	ldr	r3, [r3, r1]
 8009252:	429a      	cmp	r2, r3
 8009254:	d203      	bcs.n	800925e <CheckAttachedButtons+0x1ba>
					pressCounter[i] =0;
 8009256:	00ab      	lsls	r3, r5, #2
 8009258:	000a      	movs	r2, r1
 800925a:	2100      	movs	r1, #0
 800925c:	5099      	str	r1, [r3, r2]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 800925e:	00ab      	lsls	r3, r5, #2
 8009260:	4a64      	ldr	r2, [pc, #400]	; (80093f4 <CheckAttachedButtons+0x350>)
 8009262:	589b      	ldr	r3, [r3, r2]
 8009264:	4a62      	ldr	r2, [pc, #392]	; (80093f0 <CheckAttachedButtons+0x34c>)
 8009266:	8852      	ldrh	r2, [r2, #2]
 8009268:	4293      	cmp	r3, r2
 800926a:	d925      	bls.n	80092b8 <CheckAttachedButtons+0x214>
 800926c:	22f4      	movs	r2, #244	; 0xf4
 800926e:	32ff      	adds	r2, #255	; 0xff
 8009270:	4293      	cmp	r3, r2
 8009272:	d821      	bhi.n	80092b8 <CheckAttachedButtons+0x214>
					if(clicked == 1){
 8009274:	4b60      	ldr	r3, [pc, #384]	; (80093f8 <CheckAttachedButtons+0x354>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d014      	beq.n	80092a6 <CheckAttachedButtons+0x202>
					else if(clicked == 3){
 800927c:	2b03      	cmp	r3, #3
 800927e:	d120      	bne.n	80092c2 <CheckAttachedButtons+0x21e>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 8009280:	00eb      	lsls	r3, r5, #3
 8009282:	195b      	adds	r3, r3, r5
 8009284:	4a5f      	ldr	r2, [pc, #380]	; (8009404 <CheckAttachedButtons+0x360>)
 8009286:	2106      	movs	r1, #6
 8009288:	5499      	strb	r1, [r3, r2]
						clicked =0;			// Prepare for a single click
 800928a:	4b5b      	ldr	r3, [pc, #364]	; (80093f8 <CheckAttachedButtons+0x354>)
 800928c:	2200      	movs	r2, #0
 800928e:	701a      	strb	r2, [r3, #0]
 8009290:	e017      	b.n	80092c2 <CheckAttachedButtons+0x21e>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8009292:	00e9      	lsls	r1, r5, #3
 8009294:	1949      	adds	r1, r1, r5
 8009296:	485b      	ldr	r0, [pc, #364]	; (8009404 <CheckAttachedButtons+0x360>)
 8009298:	2708      	movs	r7, #8
 800929a:	540f      	strb	r7, [r1, r0]
					++releaseCounter[i];
 800929c:	00a9      	lsls	r1, r5, #2
 800929e:	3301      	adds	r3, #1
 80092a0:	4854      	ldr	r0, [pc, #336]	; (80093f4 <CheckAttachedButtons+0x350>)
 80092a2:	500b      	str	r3, [r1, r0]
 80092a4:	e7d2      	b.n	800924c <CheckAttachedButtons+0x1a8>
						button[i].state =CLICKED;	// Record a single button click event
 80092a6:	00eb      	lsls	r3, r5, #3
 80092a8:	195b      	adds	r3, r3, r5
 80092aa:	4a56      	ldr	r2, [pc, #344]	; (8009404 <CheckAttachedButtons+0x360>)
 80092ac:	2105      	movs	r1, #5
 80092ae:	5499      	strb	r1, [r3, r2]
						clicked =2;			// Prepare for a double click
 80092b0:	4b51      	ldr	r3, [pc, #324]	; (80093f8 <CheckAttachedButtons+0x354>)
 80092b2:	2202      	movs	r2, #2
 80092b4:	701a      	strb	r2, [r3, #0]
 80092b6:	e004      	b.n	80092c2 <CheckAttachedButtons+0x21e>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 80092b8:	3bf5      	subs	r3, #245	; 0xf5
 80092ba:	3bff      	subs	r3, #255	; 0xff
 80092bc:	4a52      	ldr	r2, [pc, #328]	; (8009408 <CheckAttachedButtons+0x364>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d90b      	bls.n	80092da <CheckAttachedButtons+0x236>
			switch(button[i].state){
 80092c2:	00eb      	lsls	r3, r5, #3
 80092c4:	195b      	adds	r3, r3, r5
 80092c6:	4a4f      	ldr	r2, [pc, #316]	; (8009404 <CheckAttachedButtons+0x360>)
 80092c8:	5c9b      	ldrb	r3, [r3, r2]
 80092ca:	3b05      	subs	r3, #5
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	2a09      	cmp	r2, #9
 80092d0:	d80f      	bhi.n	80092f2 <CheckAttachedButtons+0x24e>
 80092d2:	0093      	lsls	r3, r2, #2
 80092d4:	4a4d      	ldr	r2, [pc, #308]	; (800940c <CheckAttachedButtons+0x368>)
 80092d6:	58d3      	ldr	r3, [r2, r3]
 80092d8:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 80092da:	0020      	movs	r0, r4
 80092dc:	f7ff f962 	bl	80085a4 <CheckForTimedButtonRelease>
 80092e0:	e7ef      	b.n	80092c2 <CheckAttachedButtons+0x21e>
					buttonPressedCallback(i);
 80092e2:	0020      	movs	r0, r4
 80092e4:	f7ff f924 	bl	8008530 <buttonPressedCallback>
					button[i].state =NONE;
 80092e8:	00eb      	lsls	r3, r5, #3
 80092ea:	195d      	adds	r5, r3, r5
 80092ec:	4b45      	ldr	r3, [pc, #276]	; (8009404 <CheckAttachedButtons+0x360>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	54ea      	strb	r2, [r5, r3]
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80092f2:	3401      	adds	r4, #1
 80092f4:	b2e4      	uxtb	r4, r4
 80092f6:	2c05      	cmp	r4, #5
 80092f8:	d900      	bls.n	80092fc <CheckAttachedButtons+0x258>
 80092fa:	e10a      	b.n	8009512 <CheckAttachedButtons+0x46e>
		if(button[i].type)			// Only check defined butons
 80092fc:	0025      	movs	r5, r4
 80092fe:	00e2      	lsls	r2, r4, #3
 8009300:	1912      	adds	r2, r2, r4
 8009302:	4b40      	ldr	r3, [pc, #256]	; (8009404 <CheckAttachedButtons+0x360>)
 8009304:	189b      	adds	r3, r3, r2
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d0f2      	beq.n	80092f2 <CheckAttachedButtons+0x24e>
			if(delayButtonStateReset == false)
 800930c:	4b40      	ldr	r3, [pc, #256]	; (8009410 <CheckAttachedButtons+0x36c>)
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <CheckAttachedButtons+0x278>
				button[i].state =NONE;
 8009314:	0013      	movs	r3, r2
 8009316:	4a3b      	ldr	r2, [pc, #236]	; (8009404 <CheckAttachedButtons+0x360>)
 8009318:	2100      	movs	r1, #0
 800931a:	5499      	strb	r1, [r3, r2]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 800931c:	230e      	movs	r3, #14
 800931e:	446b      	add	r3, sp
 8009320:	4699      	mov	r9, r3
 8009322:	af03      	add	r7, sp, #12
 8009324:	9700      	str	r7, [sp, #0]
 8009326:	ab04      	add	r3, sp, #16
 8009328:	464a      	mov	r2, r9
 800932a:	a905      	add	r1, sp, #20
 800932c:	0020      	movs	r0, r4
 800932e:	f005 fe63 	bl	800eff8 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8009332:	464b      	mov	r3, r9
 8009334:	8819      	ldrh	r1, [r3, #0]
 8009336:	2200      	movs	r2, #0
 8009338:	9805      	ldr	r0, [sp, #20]
 800933a:	f00a f95c 	bl	80135f6 <HAL_GPIO_WritePin>
			Delay_us(10);
 800933e:	200a      	movs	r0, #10
 8009340:	f006 f9de 	bl	800f700 <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 8009344:	8839      	ldrh	r1, [r7, #0]
 8009346:	9804      	ldr	r0, [sp, #16]
 8009348:	f00a f94e 	bl	80135e8 <HAL_GPIO_ReadPin>
 800934c:	2800      	cmp	r0, #0
 800934e:	d100      	bne.n	8009352 <CheckAttachedButtons+0x2ae>
 8009350:	e6b2      	b.n	80090b8 <CheckAttachedButtons+0x14>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8009352:	230e      	movs	r3, #14
 8009354:	446b      	add	r3, sp
 8009356:	8819      	ldrh	r1, [r3, #0]
 8009358:	2200      	movs	r2, #0
 800935a:	9805      	ldr	r0, [sp, #20]
 800935c:	f00a f94b 	bl	80135f6 <HAL_GPIO_WritePin>
			switch(button[i].type){
 8009360:	00ea      	lsls	r2, r5, #3
 8009362:	1952      	adds	r2, r2, r5
 8009364:	4b27      	ldr	r3, [pc, #156]	; (8009404 <CheckAttachedButtons+0x360>)
 8009366:	189b      	adds	r3, r3, r2
 8009368:	785b      	ldrb	r3, [r3, #1]
 800936a:	2b02      	cmp	r3, #2
 800936c:	d100      	bne.n	8009370 <CheckAttachedButtons+0x2cc>
 800936e:	e6e9      	b.n	8009144 <CheckAttachedButtons+0xa0>
 8009370:	d800      	bhi.n	8009374 <CheckAttachedButtons+0x2d0>
 8009372:	e6b2      	b.n	80090da <CheckAttachedButtons+0x36>
 8009374:	2b03      	cmp	r3, #3
 8009376:	d100      	bne.n	800937a <CheckAttachedButtons+0x2d6>
 8009378:	e6eb      	b.n	8009152 <CheckAttachedButtons+0xae>
 800937a:	2b04      	cmp	r3, #4
 800937c:	d000      	beq.n	8009380 <CheckAttachedButtons+0x2dc>
 800937e:	e6b3      	b.n	80090e8 <CheckAttachedButtons+0x44>
					if(connected == GPIO_PIN_SET)
 8009380:	4643      	mov	r3, r8
 8009382:	2b01      	cmp	r3, #1
 8009384:	d100      	bne.n	8009388 <CheckAttachedButtons+0x2e4>
 8009386:	e6ef      	b.n	8009168 <CheckAttachedButtons+0xc4>
					else if(connected == GPIO_PIN_RESET)
 8009388:	2b00      	cmp	r3, #0
 800938a:	d000      	beq.n	800938e <CheckAttachedButtons+0x2ea>
 800938c:	e6ac      	b.n	80090e8 <CheckAttachedButtons+0x44>
						state =ON;
 800938e:	2602      	movs	r6, #2
 8009390:	e6ac      	b.n	80090ec <CheckAttachedButtons+0x48>
					buttonReleasedCallback(i);
 8009392:	0020      	movs	r0, r4
 8009394:	f7ff fe80 	bl	8009098 <buttonReleasedCallback>
					button[i].state =NONE;
 8009398:	00eb      	lsls	r3, r5, #3
 800939a:	195d      	adds	r5, r3, r5
 800939c:	4b19      	ldr	r3, [pc, #100]	; (8009404 <CheckAttachedButtons+0x360>)
 800939e:	2200      	movs	r2, #0
 80093a0:	54ea      	strb	r2, [r5, r3]
					break;
 80093a2:	e7a6      	b.n	80092f2 <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 80093a4:	4b1a      	ldr	r3, [pc, #104]	; (8009410 <CheckAttachedButtons+0x36c>)
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1a2      	bne.n	80092f2 <CheckAttachedButtons+0x24e>
 80093ac:	00eb      	lsls	r3, r5, #3
 80093ae:	195b      	adds	r3, r3, r5
 80093b0:	4d14      	ldr	r5, [pc, #80]	; (8009404 <CheckAttachedButtons+0x360>)
 80093b2:	18ed      	adds	r5, r5, r3
 80093b4:	7a2b      	ldrb	r3, [r5, #8]
 80093b6:	07db      	lsls	r3, r3, #31
 80093b8:	d59b      	bpl.n	80092f2 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80093ba:	4b15      	ldr	r3, [pc, #84]	; (8009410 <CheckAttachedButtons+0x36c>)
 80093bc:	2201      	movs	r2, #1
 80093be:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 80093c0:	0020      	movs	r0, r4
 80093c2:	f7ff fe6a 	bl	800909a <buttonClickedCallback>
 80093c6:	e794      	b.n	80092f2 <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 80093c8:	4b11      	ldr	r3, [pc, #68]	; (8009410 <CheckAttachedButtons+0x36c>)
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d190      	bne.n	80092f2 <CheckAttachedButtons+0x24e>
 80093d0:	00eb      	lsls	r3, r5, #3
 80093d2:	195b      	adds	r3, r3, r5
 80093d4:	4d0b      	ldr	r5, [pc, #44]	; (8009404 <CheckAttachedButtons+0x360>)
 80093d6:	18ed      	adds	r5, r5, r3
 80093d8:	7a2b      	ldrb	r3, [r5, #8]
 80093da:	079b      	lsls	r3, r3, #30
 80093dc:	d589      	bpl.n	80092f2 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80093de:	4b0c      	ldr	r3, [pc, #48]	; (8009410 <CheckAttachedButtons+0x36c>)
 80093e0:	2201      	movs	r2, #1
 80093e2:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 80093e4:	0020      	movs	r0, r4
 80093e6:	f7ff fe59 	bl	800909c <buttonDblClickedCallback>
 80093ea:	e782      	b.n	80092f2 <CheckAttachedButtons+0x24e>
 80093ec:	2000178c 	.word	0x2000178c
 80093f0:	2000704c 	.word	0x2000704c
 80093f4:	200017a4 	.word	0x200017a4
 80093f8:	2000177a 	.word	0x2000177a
 80093fc:	0000fffe 	.word	0x0000fffe
 8009400:	20001780 	.word	0x20001780
 8009404:	20001744 	.word	0x20001744
 8009408:	0000fe0a 	.word	0x0000fe0a
 800940c:	0801c800 	.word	0x0801c800
 8009410:	20001786 	.word	0x20001786
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 8009414:	4b41      	ldr	r3, [pc, #260]	; (800951c <CheckAttachedButtons+0x478>)
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d000      	beq.n	800941e <CheckAttachedButtons+0x37a>
 800941c:	e769      	b.n	80092f2 <CheckAttachedButtons+0x24e>
 800941e:	00eb      	lsls	r3, r5, #3
 8009420:	195b      	adds	r3, r3, r5
 8009422:	4d3f      	ldr	r5, [pc, #252]	; (8009520 <CheckAttachedButtons+0x47c>)
 8009424:	18ed      	adds	r5, r5, r3
 8009426:	7a2b      	ldrb	r3, [r5, #8]
 8009428:	075b      	lsls	r3, r3, #29
 800942a:	d400      	bmi.n	800942e <CheckAttachedButtons+0x38a>
 800942c:	e761      	b.n	80092f2 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800942e:	4b3b      	ldr	r3, [pc, #236]	; (800951c <CheckAttachedButtons+0x478>)
 8009430:	2201      	movs	r2, #1
 8009432:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 8009434:	2101      	movs	r1, #1
 8009436:	0020      	movs	r0, r4
 8009438:	f7ff fe31 	bl	800909e <buttonPressedForXCallback>
 800943c:	e759      	b.n	80092f2 <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 800943e:	4b37      	ldr	r3, [pc, #220]	; (800951c <CheckAttachedButtons+0x478>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d000      	beq.n	8009448 <CheckAttachedButtons+0x3a4>
 8009446:	e754      	b.n	80092f2 <CheckAttachedButtons+0x24e>
 8009448:	00eb      	lsls	r3, r5, #3
 800944a:	195b      	adds	r3, r3, r5
 800944c:	4d34      	ldr	r5, [pc, #208]	; (8009520 <CheckAttachedButtons+0x47c>)
 800944e:	18ed      	adds	r5, r5, r3
 8009450:	7a2b      	ldrb	r3, [r5, #8]
 8009452:	071b      	lsls	r3, r3, #28
 8009454:	d400      	bmi.n	8009458 <CheckAttachedButtons+0x3b4>
 8009456:	e74c      	b.n	80092f2 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8009458:	4b30      	ldr	r3, [pc, #192]	; (800951c <CheckAttachedButtons+0x478>)
 800945a:	2201      	movs	r2, #1
 800945c:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 800945e:	2102      	movs	r1, #2
 8009460:	0020      	movs	r0, r4
 8009462:	f7ff fe1c 	bl	800909e <buttonPressedForXCallback>
 8009466:	e744      	b.n	80092f2 <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 8009468:	4b2c      	ldr	r3, [pc, #176]	; (800951c <CheckAttachedButtons+0x478>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d000      	beq.n	8009472 <CheckAttachedButtons+0x3ce>
 8009470:	e73f      	b.n	80092f2 <CheckAttachedButtons+0x24e>
 8009472:	00eb      	lsls	r3, r5, #3
 8009474:	195b      	adds	r3, r3, r5
 8009476:	4d2a      	ldr	r5, [pc, #168]	; (8009520 <CheckAttachedButtons+0x47c>)
 8009478:	18ed      	adds	r5, r5, r3
 800947a:	7a2b      	ldrb	r3, [r5, #8]
 800947c:	06db      	lsls	r3, r3, #27
 800947e:	d400      	bmi.n	8009482 <CheckAttachedButtons+0x3de>
 8009480:	e737      	b.n	80092f2 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8009482:	4b26      	ldr	r3, [pc, #152]	; (800951c <CheckAttachedButtons+0x478>)
 8009484:	2201      	movs	r2, #1
 8009486:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8009488:	2103      	movs	r1, #3
 800948a:	0020      	movs	r0, r4
 800948c:	f7ff fe07 	bl	800909e <buttonPressedForXCallback>
 8009490:	e72f      	b.n	80092f2 <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 8009492:	4b22      	ldr	r3, [pc, #136]	; (800951c <CheckAttachedButtons+0x478>)
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d000      	beq.n	800949c <CheckAttachedButtons+0x3f8>
 800949a:	e72a      	b.n	80092f2 <CheckAttachedButtons+0x24e>
 800949c:	00eb      	lsls	r3, r5, #3
 800949e:	195b      	adds	r3, r3, r5
 80094a0:	4d1f      	ldr	r5, [pc, #124]	; (8009520 <CheckAttachedButtons+0x47c>)
 80094a2:	18ed      	adds	r5, r5, r3
 80094a4:	7a2b      	ldrb	r3, [r5, #8]
 80094a6:	069b      	lsls	r3, r3, #26
 80094a8:	d400      	bmi.n	80094ac <CheckAttachedButtons+0x408>
 80094aa:	e722      	b.n	80092f2 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80094ac:	4b1b      	ldr	r3, [pc, #108]	; (800951c <CheckAttachedButtons+0x478>)
 80094ae:	2201      	movs	r2, #1
 80094b0:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 80094b2:	2101      	movs	r1, #1
 80094b4:	0020      	movs	r0, r4
 80094b6:	f7ff fdf3 	bl	80090a0 <buttonReleasedForYCallback>
 80094ba:	e71a      	b.n	80092f2 <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 80094bc:	4b17      	ldr	r3, [pc, #92]	; (800951c <CheckAttachedButtons+0x478>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d000      	beq.n	80094c6 <CheckAttachedButtons+0x422>
 80094c4:	e715      	b.n	80092f2 <CheckAttachedButtons+0x24e>
 80094c6:	00eb      	lsls	r3, r5, #3
 80094c8:	195b      	adds	r3, r3, r5
 80094ca:	4d15      	ldr	r5, [pc, #84]	; (8009520 <CheckAttachedButtons+0x47c>)
 80094cc:	18ed      	adds	r5, r5, r3
 80094ce:	7a2b      	ldrb	r3, [r5, #8]
 80094d0:	065b      	lsls	r3, r3, #25
 80094d2:	d400      	bmi.n	80094d6 <CheckAttachedButtons+0x432>
 80094d4:	e70d      	b.n	80092f2 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80094d6:	4b11      	ldr	r3, [pc, #68]	; (800951c <CheckAttachedButtons+0x478>)
 80094d8:	2201      	movs	r2, #1
 80094da:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 80094dc:	2102      	movs	r1, #2
 80094de:	0020      	movs	r0, r4
 80094e0:	f7ff fdde 	bl	80090a0 <buttonReleasedForYCallback>
 80094e4:	e705      	b.n	80092f2 <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 80094e6:	4b0d      	ldr	r3, [pc, #52]	; (800951c <CheckAttachedButtons+0x478>)
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d000      	beq.n	80094f0 <CheckAttachedButtons+0x44c>
 80094ee:	e700      	b.n	80092f2 <CheckAttachedButtons+0x24e>
 80094f0:	00eb      	lsls	r3, r5, #3
 80094f2:	195b      	adds	r3, r3, r5
 80094f4:	4d0a      	ldr	r5, [pc, #40]	; (8009520 <CheckAttachedButtons+0x47c>)
 80094f6:	18ed      	adds	r5, r5, r3
 80094f8:	2308      	movs	r3, #8
 80094fa:	56eb      	ldrsb	r3, [r5, r3]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	db00      	blt.n	8009502 <CheckAttachedButtons+0x45e>
 8009500:	e6f7      	b.n	80092f2 <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8009502:	4b06      	ldr	r3, [pc, #24]	; (800951c <CheckAttachedButtons+0x478>)
 8009504:	2201      	movs	r2, #1
 8009506:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 8009508:	2103      	movs	r1, #3
 800950a:	0020      	movs	r0, r4
 800950c:	f7ff fdc8 	bl	80090a0 <buttonReleasedForYCallback>
 8009510:	e6ef      	b.n	80092f2 <CheckAttachedButtons+0x24e>
}
 8009512:	b007      	add	sp, #28
 8009514:	bc0c      	pop	{r2, r3}
 8009516:	4690      	mov	r8, r2
 8009518:	4699      	mov	r9, r3
 800951a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800951c:	20001786 	.word	0x20001786
 8009520:	20001744 	.word	0x20001744

08009524 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8009524:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8009526:	f008 fa66 	bl	80119f6 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800952a:	b2c4      	uxtb	r4, r0
 800952c:	0020      	movs	r0, r4
 800952e:	f7fe fa45 	bl	80079bc <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8009532:	0020      	movs	r0, r4
 8009534:	f7fe fa70 	bl	8007a18 <SwitchStreamDMAToMsg>
}
 8009538:	bd10      	pop	{r4, pc}
	...

0800953c <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 800953c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953e:	b085      	sub	sp, #20
 8009540:	000d      	movs	r5, r1
 8009542:	0014      	movs	r4, r2
 8009544:	220f      	movs	r2, #15
 8009546:	446a      	add	r2, sp
 8009548:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800954a:	aa0a      	add	r2, sp, #40	; 0x28
 800954c:	7812      	ldrb	r2, [r2, #0]
 800954e:	4293      	cmp	r3, r2
 8009550:	d00d      	beq.n	800956e <SetupDMAStreams+0x32>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8009552:	2b00      	cmp	r3, #0
 8009554:	d100      	bne.n	8009558 <SetupDMAStreams+0x1c>
 8009556:	e0b9      	b.n	80096cc <SetupDMAStreams+0x190>
 8009558:	2a00      	cmp	r2, #0
 800955a:	d100      	bne.n	800955e <SetupDMAStreams+0x22>
 800955c:	e0b9      	b.n	80096d2 <SetupDMAStreams+0x196>
	if(direction == FORWARD){
 800955e:	2800      	cmp	r0, #0
 8009560:	d00a      	beq.n	8009578 <SetupDMAStreams+0x3c>
	else if(direction == BACKWARD){
 8009562:	2801      	cmp	r0, #1
 8009564:	d041      	beq.n	80095ea <SetupDMAStreams+0xae>
	else if(direction == BIDIRECTIONAL){
 8009566:	2802      	cmp	r0, #2
 8009568:	d069      	beq.n	800963e <SetupDMAStreams+0x102>
		return BOS_ERR_WrongParam;
 800956a:	2067      	movs	r0, #103	; 0x67
 800956c:	e0af      	b.n	80096ce <SetupDMAStreams+0x192>
		portStatus[src] =STREAM;
 800956e:	4a5b      	ldr	r2, [pc, #364]	; (80096dc <SetupDMAStreams+0x1a0>)
 8009570:	2102      	movs	r1, #2
 8009572:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8009574:	2067      	movs	r0, #103	; 0x67
 8009576:	e0aa      	b.n	80096ce <SetupDMAStreams+0x192>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009578:	0018      	movs	r0, r3
 800957a:	f006 fa67 	bl	800fa4c <GetUart>
 800957e:	0006      	movs	r6, r0
 8009580:	ab0a      	add	r3, sp, #40	; 0x28
 8009582:	7818      	ldrb	r0, [r3, #0]
 8009584:	f006 fa62 	bl	800fa4c <GetUart>
 8009588:	0001      	movs	r1, r0
 800958a:	2201      	movs	r2, #1
 800958c:	0030      	movs	r0, r6
 800958e:	f7fe fa75 	bl	8007a7c <StartDMAstream>
 8009592:	2817      	cmp	r0, #23
 8009594:	d100      	bne.n	8009598 <SetupDMAStreams+0x5c>
 8009596:	e09a      	b.n	80096ce <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009598:	0160      	lsls	r0, r4, #5
 800959a:	1b00      	subs	r0, r0, r4
 800959c:	0080      	lsls	r0, r0, #2
 800959e:	1900      	adds	r0, r0, r4
 80095a0:	00c0      	lsls	r0, r0, #3
 80095a2:	21fa      	movs	r1, #250	; 0xfa
 80095a4:	0089      	lsls	r1, r1, #2
 80095a6:	f7f6 fdd3 	bl	8000150 <__udivsi3>
 80095aa:	0001      	movs	r1, r0
 80095ac:	260f      	movs	r6, #15
 80095ae:	446e      	add	r6, sp
 80095b0:	4b4b      	ldr	r3, [pc, #300]	; (80096e0 <SetupDMAStreams+0x1a4>)
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	0033      	movs	r3, r6
 80095b6:	2200      	movs	r2, #0
 80095b8:	484a      	ldr	r0, [pc, #296]	; (80096e4 <SetupDMAStreams+0x1a8>)
 80095ba:	f008 f8bf 	bl	801173c <xTimerCreate>
 80095be:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80095c0:	7833      	ldrb	r3, [r6, #0]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4a48      	ldr	r2, [pc, #288]	; (80096e8 <SetupDMAStreams+0x1ac>)
 80095c8:	509d      	str	r5, [r3, r2]
	if(xTimerStream != NULL)
 80095ca:	2c00      	cmp	r4, #0
 80095cc:	d100      	bne.n	80095d0 <SetupDMAStreams+0x94>
 80095ce:	e082      	b.n	80096d6 <SetupDMAStreams+0x19a>
		xTimerStart(xTimerStream,portMAX_DELAY);
 80095d0:	f007 fb46 	bl	8010c60 <xTaskGetTickCount>
 80095d4:	0002      	movs	r2, r0
 80095d6:	2301      	movs	r3, #1
 80095d8:	425b      	negs	r3, r3
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	2300      	movs	r3, #0
 80095de:	2101      	movs	r1, #1
 80095e0:	0020      	movs	r0, r4
 80095e2:	f008 f8cf 	bl	8011784 <xTimerGenericCommand>
	return BOS_OK;
 80095e6:	2000      	movs	r0, #0
 80095e8:	e071      	b.n	80096ce <SetupDMAStreams+0x192>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80095ea:	0010      	movs	r0, r2
 80095ec:	f006 fa2e 	bl	800fa4c <GetUart>
 80095f0:	0006      	movs	r6, r0
 80095f2:	230f      	movs	r3, #15
 80095f4:	446b      	add	r3, sp
 80095f6:	7818      	ldrb	r0, [r3, #0]
 80095f8:	f006 fa28 	bl	800fa4c <GetUart>
 80095fc:	0001      	movs	r1, r0
 80095fe:	2201      	movs	r2, #1
 8009600:	0030      	movs	r0, r6
 8009602:	f7fe fa3b 	bl	8007a7c <StartDMAstream>
 8009606:	2817      	cmp	r0, #23
 8009608:	d061      	beq.n	80096ce <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 800960a:	0160      	lsls	r0, r4, #5
 800960c:	1b00      	subs	r0, r0, r4
 800960e:	0080      	lsls	r0, r0, #2
 8009610:	1900      	adds	r0, r0, r4
 8009612:	00c0      	lsls	r0, r0, #3
 8009614:	21fa      	movs	r1, #250	; 0xfa
 8009616:	0089      	lsls	r1, r1, #2
 8009618:	f7f6 fd9a 	bl	8000150 <__udivsi3>
 800961c:	0001      	movs	r1, r0
 800961e:	4b30      	ldr	r3, [pc, #192]	; (80096e0 <SetupDMAStreams+0x1a4>)
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	ab0a      	add	r3, sp, #40	; 0x28
 8009624:	2200      	movs	r2, #0
 8009626:	482f      	ldr	r0, [pc, #188]	; (80096e4 <SetupDMAStreams+0x1a8>)
 8009628:	f008 f888 	bl	801173c <xTimerCreate>
 800962c:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 800962e:	230f      	movs	r3, #15
 8009630:	446b      	add	r3, sp
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	3b01      	subs	r3, #1
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4a2b      	ldr	r2, [pc, #172]	; (80096e8 <SetupDMAStreams+0x1ac>)
 800963a:	509d      	str	r5, [r3, r2]
 800963c:	e7c5      	b.n	80095ca <SetupDMAStreams+0x8e>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 800963e:	0018      	movs	r0, r3
 8009640:	f006 fa04 	bl	800fa4c <GetUart>
 8009644:	0006      	movs	r6, r0
 8009646:	ab0a      	add	r3, sp, #40	; 0x28
 8009648:	7818      	ldrb	r0, [r3, #0]
 800964a:	f006 f9ff 	bl	800fa4c <GetUart>
 800964e:	0001      	movs	r1, r0
 8009650:	2201      	movs	r2, #1
 8009652:	0030      	movs	r0, r6
 8009654:	f7fe fa12 	bl	8007a7c <StartDMAstream>
 8009658:	2817      	cmp	r0, #23
 800965a:	d038      	beq.n	80096ce <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 800965c:	0160      	lsls	r0, r4, #5
 800965e:	1b00      	subs	r0, r0, r4
 8009660:	0080      	lsls	r0, r0, #2
 8009662:	1900      	adds	r0, r0, r4
 8009664:	00c0      	lsls	r0, r0, #3
 8009666:	21fa      	movs	r1, #250	; 0xfa
 8009668:	0089      	lsls	r1, r1, #2
 800966a:	f7f6 fd71 	bl	8000150 <__udivsi3>
 800966e:	0004      	movs	r4, r0
 8009670:	260f      	movs	r6, #15
 8009672:	446e      	add	r6, sp
 8009674:	4b1a      	ldr	r3, [pc, #104]	; (80096e0 <SetupDMAStreams+0x1a4>)
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	0033      	movs	r3, r6
 800967a:	2200      	movs	r2, #0
 800967c:	0001      	movs	r1, r0
 800967e:	4819      	ldr	r0, [pc, #100]	; (80096e4 <SetupDMAStreams+0x1a8>)
 8009680:	f008 f85c 	bl	801173c <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8009684:	7833      	ldrb	r3, [r6, #0]
 8009686:	3b01      	subs	r3, #1
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4a17      	ldr	r2, [pc, #92]	; (80096e8 <SetupDMAStreams+0x1ac>)
 800968c:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 800968e:	ab0a      	add	r3, sp, #40	; 0x28
 8009690:	7818      	ldrb	r0, [r3, #0]
 8009692:	f006 f9db 	bl	800fa4c <GetUart>
 8009696:	0007      	movs	r7, r0
 8009698:	7830      	ldrb	r0, [r6, #0]
 800969a:	f006 f9d7 	bl	800fa4c <GetUart>
 800969e:	0001      	movs	r1, r0
 80096a0:	2201      	movs	r2, #1
 80096a2:	0038      	movs	r0, r7
 80096a4:	f7fe f9ea 	bl	8007a7c <StartDMAstream>
 80096a8:	2817      	cmp	r0, #23
 80096aa:	d010      	beq.n	80096ce <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80096ac:	4b0c      	ldr	r3, [pc, #48]	; (80096e0 <SetupDMAStreams+0x1a4>)
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	ab0a      	add	r3, sp, #40	; 0x28
 80096b2:	2200      	movs	r2, #0
 80096b4:	0021      	movs	r1, r4
 80096b6:	480b      	ldr	r0, [pc, #44]	; (80096e4 <SetupDMAStreams+0x1a8>)
 80096b8:	f008 f840 	bl	801173c <xTimerCreate>
 80096bc:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 80096be:	ab0a      	add	r3, sp, #40	; 0x28
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4a08      	ldr	r2, [pc, #32]	; (80096e8 <SetupDMAStreams+0x1ac>)
 80096c8:	509d      	str	r5, [r3, r2]
 80096ca:	e77e      	b.n	80095ca <SetupDMAStreams+0x8e>
		return BOS_ERR_WrongParam;
 80096cc:	2067      	movs	r0, #103	; 0x67
}
 80096ce:	b005      	add	sp, #20
 80096d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 80096d2:	2067      	movs	r0, #103	; 0x67
 80096d4:	e7fb      	b.n	80096ce <SetupDMAStreams+0x192>
	return BOS_OK;
 80096d6:	2000      	movs	r0, #0
 80096d8:	e7f9      	b.n	80096ce <SetupDMAStreams+0x192>
 80096da:	46c0      	nop			; (mov r8, r8)
 80096dc:	200010ec 	.word	0x200010ec
 80096e0:	08009525 	.word	0x08009525
 80096e4:	0801c840 	.word	0x0801c840
 80096e8:	200016f0 	.word	0x200016f0

080096ec <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 80096ec:	b510      	push	{r4, lr}
	switch(port){
 80096ee:	2805      	cmp	r0, #5
 80096f0:	d80a      	bhi.n	8009708 <NotifyMessagingTask+0x1c>
 80096f2:	0080      	lsls	r0, r0, #2
 80096f4:	4b15      	ldr	r3, [pc, #84]	; (800974c <NotifyMessagingTask+0x60>)
 80096f6:	581b      	ldr	r3, [r3, r0]
 80096f8:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 80096fa:	4b15      	ldr	r3, [pc, #84]	; (8009750 <NotifyMessagingTask+0x64>)
 80096fc:	6818      	ldr	r0, [r3, #0]
 80096fe:	2300      	movs	r3, #0
 8009700:	2202      	movs	r2, #2
 8009702:	2100      	movs	r1, #0
 8009704:	f007 ff36 	bl	8011574 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8009708:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 800970a:	4b12      	ldr	r3, [pc, #72]	; (8009754 <NotifyMessagingTask+0x68>)
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	2300      	movs	r3, #0
 8009710:	2202      	movs	r2, #2
 8009712:	2100      	movs	r1, #0
 8009714:	f007 ff2e 	bl	8011574 <xTaskGenericNotify>
			break;
 8009718:	e7f6      	b.n	8009708 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 800971a:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <NotifyMessagingTask+0x6c>)
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	2300      	movs	r3, #0
 8009720:	2202      	movs	r2, #2
 8009722:	2100      	movs	r1, #0
 8009724:	f007 ff26 	bl	8011574 <xTaskGenericNotify>
			break;
 8009728:	e7ee      	b.n	8009708 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 800972a:	4b0c      	ldr	r3, [pc, #48]	; (800975c <NotifyMessagingTask+0x70>)
 800972c:	6818      	ldr	r0, [r3, #0]
 800972e:	2300      	movs	r3, #0
 8009730:	2202      	movs	r2, #2
 8009732:	2100      	movs	r1, #0
 8009734:	f007 ff1e 	bl	8011574 <xTaskGenericNotify>
			break;
 8009738:	e7e6      	b.n	8009708 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 800973a:	4b09      	ldr	r3, [pc, #36]	; (8009760 <NotifyMessagingTask+0x74>)
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	2300      	movs	r3, #0
 8009740:	2202      	movs	r2, #2
 8009742:	2100      	movs	r1, #0
 8009744:	f007 ff16 	bl	8011574 <xTaskGenericNotify>
}
 8009748:	e7de      	b.n	8009708 <NotifyMessagingTask+0x1c>
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	0801c828 	.word	0x0801c828
 8009750:	2000170c 	.word	0x2000170c
 8009754:	20001710 	.word	0x20001710
 8009758:	20001714 	.word	0x20001714
 800975c:	20001718 	.word	0x20001718
 8009760:	2000171c 	.word	0x2000171c

08009764 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009766:	46de      	mov	lr, fp
 8009768:	4657      	mov	r7, sl
 800976a:	464e      	mov	r6, r9
 800976c:	4645      	mov	r5, r8
 800976e:	b5e0      	push	{r5, r6, r7, lr}
 8009770:	b085      	sub	sp, #20
 8009772:	0005      	movs	r5, r0
 8009774:	4689      	mov	r9, r1
 8009776:	0016      	movs	r6, r2
 8009778:	4698      	mov	r8, r3
 800977a:	ab0e      	add	r3, sp, #56	; 0x38
 800977c:	881f      	ldrh	r7, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 800977e:	0003      	movs	r3, r0
 8009780:	4313      	orrs	r3, r2
 8009782:	d100      	bne.n	8009786 <SendMessageFromPort+0x22>
 8009784:	e1ac      	b.n	8009ae0 <SendMessageFromPort+0x37c>
 8009786:	2800      	cmp	r0, #0
 8009788:	d104      	bne.n	8009794 <SendMessageFromPort+0x30>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800978a:	2aff      	cmp	r2, #255	; 0xff
 800978c:	d002      	beq.n	8009794 <SendMessageFromPort+0x30>
 800978e:	2afe      	cmp	r2, #254	; 0xfe
 8009790:	d000      	beq.n	8009794 <SendMessageFromPort+0x30>
 8009792:	e1a7      	b.n	8009ae4 <SendMessageFromPort+0x380>
 8009794:	2d00      	cmp	r5, #0
 8009796:	d005      	beq.n	80097a4 <SendMessageFromPort+0x40>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8009798:	464b      	mov	r3, r9
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <SendMessageFromPort+0x40>
 800979e:	2e00      	cmp	r6, #0
 80097a0:	d100      	bne.n	80097a4 <SendMessageFromPort+0x40>
 80097a2:	e1a1      	b.n	8009ae8 <SendMessageFromPort+0x384>
		return BOS_ERR_WrongParam;
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 80097a4:	2000      	movs	r0, #0
 80097a6:	f007 f9bf 	bl	8010b28 <uxTaskPriorityGet>
 80097aa:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80097ac:	2105      	movs	r1, #5
 80097ae:	2000      	movs	r0, #0
 80097b0:	f007 f9ca 	bl	8010b48 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 80097b4:	4bcd      	ldr	r3, [pc, #820]	; (8009aec <SendMessageFromPort+0x388>)
 80097b6:	2248      	movs	r2, #72	; 0x48
 80097b8:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80097ba:	3212      	adds	r2, #18
 80097bc:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80097be:	464b      	mov	r3, r9
 80097c0:	432b      	orrs	r3, r5
 80097c2:	d103      	bne.n	80097cc <SendMessageFromPort+0x68>
 80097c4:	1cb3      	adds	r3, r6, #2
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d902      	bls.n	80097d2 <SendMessageFromPort+0x6e>
 80097cc:	4643      	mov	r3, r8
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d12e      	bne.n	8009830 <SendMessageFromPort+0xcc>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 80097d2:	3f01      	subs	r7, #1
 80097d4:	4bc6      	ldr	r3, [pc, #792]	; (8009af0 <SendMessageFromPort+0x38c>)
 80097d6:	5ddc      	ldrb	r4, [r3, r7]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80097d8:	00fb      	lsls	r3, r7, #3
 80097da:	1bdf      	subs	r7, r3, r7
 80097dc:	00f9      	lsls	r1, r7, #3
 80097de:	4bc5      	ldr	r3, [pc, #788]	; (8009af4 <SendMessageFromPort+0x390>)
 80097e0:	18c9      	adds	r1, r1, r3
 80097e2:	0022      	movs	r2, r4
 80097e4:	48c4      	ldr	r0, [pc, #784]	; (8009af8 <SendMessageFromPort+0x394>)
 80097e6:	f00b feb8 	bl	801555a <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 80097ea:	4bc0      	ldr	r3, [pc, #768]	; (8009aec <SendMessageFromPort+0x388>)
 80097ec:	469a      	mov	sl, r3
 80097ee:	709c      	strb	r4, [r3, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 80097f0:	1ce7      	adds	r7, r4, #3
 80097f2:	003a      	movs	r2, r7
 80097f4:	0019      	movs	r1, r3
 80097f6:	48c1      	ldr	r0, [pc, #772]	; (8009afc <SendMessageFromPort+0x398>)
 80097f8:	f00b feaf 	bl	801555a <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 80097fc:	b2a4      	uxth	r4, r4
 80097fe:	1ce1      	adds	r1, r4, #3
 8009800:	b289      	uxth	r1, r1
 8009802:	48be      	ldr	r0, [pc, #760]	; (8009afc <SendMessageFromPort+0x398>)
 8009804:	f005 fb76 	bl	800eef4 <CalculateCRC8>
 8009808:	4653      	mov	r3, sl
 800980a:	55d8      	strb	r0, [r3, r7]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 800980c:	2238      	movs	r2, #56	; 0x38
 800980e:	2100      	movs	r1, #0
 8009810:	48ba      	ldr	r0, [pc, #744]	; (8009afc <SendMessageFromPort+0x398>)
 8009812:	f00b feab 	bl	801556c <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009816:	3602      	adds	r6, #2
 8009818:	b2f6      	uxtb	r6, r6
 800981a:	2e01      	cmp	r6, #1
 800981c:	d800      	bhi.n	8009820 <SendMessageFromPort+0xbc>
 800981e:	e127      	b.n	8009a70 <SendMessageFromPort+0x30c>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8009820:	4643      	mov	r3, r8
 8009822:	3b2c      	subs	r3, #44	; 0x2c
 8009824:	b29b      	uxth	r3, r3
 8009826:	2b01      	cmp	r3, #1
 8009828:	d800      	bhi.n	800982c <SendMessageFromPort+0xc8>
 800982a:	e0e5      	b.n	80099f8 <SendMessageFromPort+0x294>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800982c:	2600      	movs	r6, #0
 800982e:	e106      	b.n	8009a3e <SendMessageFromPort+0x2da>
		if(src == 0)
 8009830:	464b      	mov	r3, r9
 8009832:	2b00      	cmp	r3, #0
 8009834:	d102      	bne.n	800983c <SendMessageFromPort+0xd8>
			src =myID;
 8009836:	4bb2      	ldr	r3, [pc, #712]	; (8009b00 <SendMessageFromPort+0x39c>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	4699      	mov	r9, r3
		if(code > 0xFF)
 800983c:	4643      	mov	r3, r8
 800983e:	2bff      	cmp	r3, #255	; 0xff
 8009840:	d84f      	bhi.n	80098e2 <SendMessageFromPort+0x17e>
	bool extendOptions = false, extendCode = false;
 8009842:	2100      	movs	r1, #0
		message[2] =length;
 8009844:	4aa9      	ldr	r2, [pc, #676]	; (8009aec <SendMessageFromPort+0x388>)
 8009846:	2300      	movs	r3, #0
 8009848:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 800984a:	70d6      	strb	r6, [r2, #3]
		message[4] =src;
 800984c:	464b      	mov	r3, r9
 800984e:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009850:	48ac      	ldr	r0, [pc, #688]	; (8009b04 <SendMessageFromPort+0x3a0>)
 8009852:	2300      	movs	r3, #0
 8009854:	56c3      	ldrsb	r3, [r0, r3]
 8009856:	7904      	ldrb	r4, [r0, #4]
 8009858:	0124      	lsls	r4, r4, #4
 800985a:	4323      	orrs	r3, r4
 800985c:	b25b      	sxtb	r3, r3
 800985e:	7840      	ldrb	r0, [r0, #1]
 8009860:	0080      	lsls	r0, r0, #2
 8009862:	4303      	orrs	r3, r0
 8009864:	b25b      	sxtb	r3, r3
 8009866:	0048      	lsls	r0, r1, #1
 8009868:	4303      	orrs	r3, r0
 800986a:	b2db      	uxtb	r3, r3
 800986c:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 800986e:	4640      	mov	r0, r8
 8009870:	7190      	strb	r0, [r2, #6]
		if(extendCode == true){
 8009872:	2900      	cmp	r1, #0
 8009874:	d037      	beq.n	80098e6 <SendMessageFromPort+0x182>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009876:	0a02      	lsrs	r2, r0, #8
 8009878:	499c      	ldr	r1, [pc, #624]	; (8009aec <SendMessageFromPort+0x388>)
 800987a:	71ca      	strb	r2, [r1, #7]
			++shift;
 800987c:	2201      	movs	r2, #1
 800987e:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8009880:	2f2e      	cmp	r7, #46	; 0x2e
 8009882:	d933      	bls.n	80098ec <SendMessageFromPort+0x188>
			message[5] |=0x80;
 8009884:	2280      	movs	r2, #128	; 0x80
 8009886:	4252      	negs	r2, r2
 8009888:	4313      	orrs	r3, r2
 800988a:	4a98      	ldr	r2, [pc, #608]	; (8009aec <SendMessageFromPort+0x388>)
 800988c:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 800988e:	4b9e      	ldr	r3, [pc, #632]	; (8009b08 <SendMessageFromPort+0x3a4>)
 8009890:	801f      	strh	r7, [r3, #0]
	uint8_t length =0, shift =0;
 8009892:	2400      	movs	r4, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8009894:	272e      	movs	r7, #46	; 0x2e
			while(totalNumberOfParams != 0){
 8009896:	4b9c      	ldr	r3, [pc, #624]	; (8009b08 <SendMessageFromPort+0x3a4>)
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	469a      	mov	sl, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	d035      	beq.n	800990c <SendMessageFromPort+0x1a8>
				if((totalNumberOfParams / numberOfParams) >= 1){
 80098a0:	0039      	movs	r1, r7
 80098a2:	4650      	mov	r0, sl
 80098a4:	f7f6 fc54 	bl	8000150 <__udivsi3>
 80098a8:	b280      	uxth	r0, r0
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d13b      	bne.n	8009926 <SendMessageFromPort+0x1c2>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 80098ae:	488f      	ldr	r0, [pc, #572]	; (8009aec <SendMessageFromPort+0x388>)
 80098b0:	7942      	ldrb	r2, [r0, #5]
 80098b2:	237f      	movs	r3, #127	; 0x7f
 80098b4:	4013      	ands	r3, r2
 80098b6:	7143      	strb	r3, [r0, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80098b8:	465b      	mov	r3, fp
 80098ba:	3307      	adds	r3, #7
 80098bc:	1818      	adds	r0, r3, r0
 80098be:	4c93      	ldr	r4, [pc, #588]	; (8009b0c <SendMessageFromPort+0x3a8>)
 80098c0:	8821      	ldrh	r1, [r4, #0]
 80098c2:	4b93      	ldr	r3, [pc, #588]	; (8009b10 <SendMessageFromPort+0x3ac>)
 80098c4:	18c9      	adds	r1, r1, r3
 80098c6:	4652      	mov	r2, sl
 80098c8:	f00b fe47 	bl	801555a <memcpy>
					ptrShift =0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	8023      	strh	r3, [r4, #0]
					totalNumberOfParams =0;
 80098d0:	4a8d      	ldr	r2, [pc, #564]	; (8009b08 <SendMessageFromPort+0x3a4>)
 80098d2:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 80098d4:	465c      	mov	r4, fp
 80098d6:	4454      	add	r4, sl
 80098d8:	b2e4      	uxtb	r4, r4
 80098da:	3404      	adds	r4, #4
 80098dc:	b2e4      	uxtb	r4, r4
					numberOfParams =totalNumberOfParams;
 80098de:	4657      	mov	r7, sl
 80098e0:	e7d9      	b.n	8009896 <SendMessageFromPort+0x132>
			extendCode = true;
 80098e2:	2101      	movs	r1, #1
 80098e4:	e7ae      	b.n	8009844 <SendMessageFromPort+0xe0>
 80098e6:	2200      	movs	r2, #0
 80098e8:	4693      	mov	fp, r2
 80098ea:	e7c9      	b.n	8009880 <SendMessageFromPort+0x11c>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80098ec:	465b      	mov	r3, fp
 80098ee:	3307      	adds	r3, #7
 80098f0:	487e      	ldr	r0, [pc, #504]	; (8009aec <SendMessageFromPort+0x388>)
 80098f2:	1818      	adds	r0, r3, r0
 80098f4:	4b85      	ldr	r3, [pc, #532]	; (8009b0c <SendMessageFromPort+0x3a8>)
 80098f6:	8819      	ldrh	r1, [r3, #0]
 80098f8:	4b85      	ldr	r3, [pc, #532]	; (8009b10 <SendMessageFromPort+0x3ac>)
 80098fa:	18c9      	adds	r1, r1, r3
 80098fc:	003a      	movs	r2, r7
 80098fe:	f00b fe2c 	bl	801555a <memcpy>
			length =numberOfParams + shift + 4;
 8009902:	465b      	mov	r3, fp
 8009904:	19dc      	adds	r4, r3, r7
 8009906:	b2e4      	uxtb	r4, r4
 8009908:	3404      	adds	r4, #4
 800990a:	b2e4      	uxtb	r4, r4
		if(AddBcastPayload == true){
 800990c:	4b81      	ldr	r3, [pc, #516]	; (8009b14 <SendMessageFromPort+0x3b0>)
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d100      	bne.n	8009916 <SendMessageFromPort+0x1b2>
 8009914:	e769      	b.n	80097ea <SendMessageFromPort+0x86>
			if(dstGroupID < BOS_BROADCAST){
 8009916:	4b80      	ldr	r3, [pc, #512]	; (8009b18 <SendMessageFromPort+0x3b4>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	469a      	mov	sl, r3
 800991c:	2bff      	cmp	r3, #255	; 0xff
 800991e:	d015      	beq.n	800994c <SendMessageFromPort+0x1e8>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009920:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8009922:	2200      	movs	r2, #0
 8009924:	e016      	b.n	8009954 <SendMessageFromPort+0x1f0>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009926:	9700      	str	r7, [sp, #0]
 8009928:	4643      	mov	r3, r8
 800992a:	0032      	movs	r2, r6
 800992c:	4649      	mov	r1, r9
 800992e:	0028      	movs	r0, r5
 8009930:	f7ff ff18 	bl	8009764 <SendMessageFromPort>
					osDelay(10);
 8009934:	200a      	movs	r0, #10
 8009936:	f006 f9db 	bl	800fcf0 <osDelay>
					totalNumberOfParams -=numberOfParams;
 800993a:	4a73      	ldr	r2, [pc, #460]	; (8009b08 <SendMessageFromPort+0x3a4>)
 800993c:	8813      	ldrh	r3, [r2, #0]
 800993e:	1bdb      	subs	r3, r3, r7
 8009940:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 8009942:	4a72      	ldr	r2, [pc, #456]	; (8009b0c <SendMessageFromPort+0x3a8>)
 8009944:	8813      	ldrh	r3, [r2, #0]
 8009946:	18fb      	adds	r3, r7, r3
 8009948:	8013      	strh	r3, [r2, #0]
 800994a:	e7a4      	b.n	8009896 <SendMessageFromPort+0x132>
			uint8_t groupMembers =0;
 800994c:	2200      	movs	r2, #0
 800994e:	e022      	b.n	8009996 <SendMessageFromPort+0x232>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009950:	3301      	adds	r3, #1
 8009952:	b29b      	uxth	r3, r3
 8009954:	4871      	ldr	r0, [pc, #452]	; (8009b1c <SendMessageFromPort+0x3b8>)
 8009956:	7800      	ldrb	r0, [r0, #0]
 8009958:	4298      	cmp	r0, r3
 800995a:	d316      	bcc.n	800998a <SendMessageFromPort+0x226>
					if(InGroup(i,dstGroupID)){
 800995c:	1e58      	subs	r0, r3, #1
 800995e:	0040      	lsls	r0, r0, #1
 8009960:	496f      	ldr	r1, [pc, #444]	; (8009b20 <SendMessageFromPort+0x3bc>)
 8009962:	5a40      	ldrh	r0, [r0, r1]
 8009964:	4651      	mov	r1, sl
 8009966:	4108      	asrs	r0, r1
 8009968:	07c1      	lsls	r1, r0, #31
 800996a:	d5f1      	bpl.n	8009950 <SendMessageFromPort+0x1ec>
						++groupMembers;							// Add this member
 800996c:	3201      	adds	r2, #1
 800996e:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8009970:	18b8      	adds	r0, r7, r2
 8009972:	3001      	adds	r0, #1
 8009974:	282d      	cmp	r0, #45	; 0x2d
 8009976:	dd00      	ble.n	800997a <SendMessageFromPort+0x216>
 8009978:	e0de      	b.n	8009b38 <SendMessageFromPort+0x3d4>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800997a:	4659      	mov	r1, fp
 800997c:	1dc8      	adds	r0, r1, #7
 800997e:	1838      	adds	r0, r7, r0
 8009980:	1810      	adds	r0, r2, r0
 8009982:	3801      	subs	r0, #1
 8009984:	4959      	ldr	r1, [pc, #356]	; (8009aec <SendMessageFromPort+0x388>)
 8009986:	540b      	strb	r3, [r1, r0]
 8009988:	e7e2      	b.n	8009950 <SendMessageFromPort+0x1ec>
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 800998a:	465b      	mov	r3, fp
 800998c:	3307      	adds	r3, #7
 800998e:	18fb      	adds	r3, r7, r3
 8009990:	18d3      	adds	r3, r2, r3
 8009992:	4856      	ldr	r0, [pc, #344]	; (8009aec <SendMessageFromPort+0x388>)
 8009994:	54c2      	strb	r2, [r0, r3]
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009996:	4653      	mov	r3, sl
 8009998:	2bff      	cmp	r3, #255	; 0xff
 800999a:	d01c      	beq.n	80099d6 <SendMessageFromPort+0x272>
			else if(dstGroupID == BOS_BROADCAST)
 800999c:	4653      	mov	r3, sl
 800999e:	2bff      	cmp	r3, #255	; 0xff
 80099a0:	d100      	bne.n	80099a4 <SendMessageFromPort+0x240>
 80099a2:	e0cb      	b.n	8009b3c <SendMessageFromPort+0x3d8>
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80099a4:	18bb      	adds	r3, r7, r2
 80099a6:	3302      	adds	r3, #2
 80099a8:	2b2d      	cmp	r3, #45	; 0x2d
 80099aa:	dd00      	ble.n	80099ae <SendMessageFromPort+0x24a>
 80099ac:	e0c8      	b.n	8009b40 <SendMessageFromPort+0x3dc>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80099ae:	485d      	ldr	r0, [pc, #372]	; (8009b24 <SendMessageFromPort+0x3c0>)
 80099b0:	7803      	ldrb	r3, [r0, #0]
 80099b2:	3301      	adds	r3, #1
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	7003      	strb	r3, [r0, #0]
 80099b8:	4658      	mov	r0, fp
 80099ba:	3007      	adds	r0, #7
 80099bc:	183f      	adds	r7, r7, r0
 80099be:	19d7      	adds	r7, r2, r7
 80099c0:	3701      	adds	r7, #1
 80099c2:	484a      	ldr	r0, [pc, #296]	; (8009aec <SendMessageFromPort+0x388>)
 80099c4:	55c3      	strb	r3, [r0, r7]
			if(dstGroupID == BOS_BROADCAST)
 80099c6:	4653      	mov	r3, sl
 80099c8:	2bff      	cmp	r3, #255	; 0xff
 80099ca:	d012      	beq.n	80099f2 <SendMessageFromPort+0x28e>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80099cc:	18a4      	adds	r4, r4, r2
 80099ce:	b2e4      	uxtb	r4, r4
 80099d0:	3402      	adds	r4, #2
 80099d2:	b2e4      	uxtb	r4, r4
 80099d4:	e709      	b.n	80097ea <SendMessageFromPort+0x86>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80099d6:	1c7b      	adds	r3, r7, #1
 80099d8:	2b2d      	cmp	r3, #45	; 0x2d
 80099da:	dcdf      	bgt.n	800999c <SendMessageFromPort+0x238>
				message[7 + shift + numberOfParams] =++bcastID;
 80099dc:	4851      	ldr	r0, [pc, #324]	; (8009b24 <SendMessageFromPort+0x3c0>)
 80099de:	7803      	ldrb	r3, [r0, #0]
 80099e0:	3301      	adds	r3, #1
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	7003      	strb	r3, [r0, #0]
 80099e6:	4658      	mov	r0, fp
 80099e8:	3007      	adds	r0, #7
 80099ea:	183f      	adds	r7, r7, r0
 80099ec:	483f      	ldr	r0, [pc, #252]	; (8009aec <SendMessageFromPort+0x388>)
 80099ee:	55c3      	strb	r3, [r0, r7]
 80099f0:	e7e9      	b.n	80099c6 <SendMessageFromPort+0x262>
				length +=1;		// + bcastID
 80099f2:	3401      	adds	r4, #1
 80099f4:	b2e4      	uxtb	r4, r4
 80099f6:	e6f8      	b.n	80097ea <SendMessageFromPort+0x86>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 80099f8:	1d22      	adds	r2, r4, #4
 80099fa:	b292      	uxth	r2, r2
 80099fc:	2332      	movs	r3, #50	; 0x32
 80099fe:	493b      	ldr	r1, [pc, #236]	; (8009aec <SendMessageFromPort+0x388>)
 8009a00:	0028      	movs	r0, r5
 8009a02:	f006 f88f 	bl	800fb24 <writePxDMAMutex>
					break;
				if(rejected_FLAG == true)
					writePxDMAMutex(port,message,length + 4,cmd50ms);
			}
		}
		ACK_FLAG =false; rejected_FLAG=false;
 8009a06:	2300      	movs	r3, #0
 8009a08:	4a47      	ldr	r2, [pc, #284]	; (8009b28 <SendMessageFromPort+0x3c4>)
 8009a0a:	7013      	strb	r3, [r2, #0]
 8009a0c:	4a47      	ldr	r2, [pc, #284]	; (8009b2c <SendMessageFromPort+0x3c8>)
 8009a0e:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8009a10:	9903      	ldr	r1, [sp, #12]
 8009a12:	2000      	movs	r0, #0
 8009a14:	f007 f898 	bl	8010b48 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8009a18:	4b45      	ldr	r3, [pc, #276]	; (8009b30 <SendMessageFromPort+0x3cc>)
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	701a      	strb	r2, [r3, #0]
	
	return result;
 8009a1e:	2000      	movs	r0, #0
}
 8009a20:	b005      	add	sp, #20
 8009a22:	bc3c      	pop	{r2, r3, r4, r5}
 8009a24:	4690      	mov	r8, r2
 8009a26:	4699      	mov	r9, r3
 8009a28:	46a2      	mov	sl, r4
 8009a2a:	46ab      	mov	fp, r5
 8009a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009a2e:	2332      	movs	r3, #50	; 0x32
 8009a30:	003a      	movs	r2, r7
 8009a32:	492e      	ldr	r1, [pc, #184]	; (8009aec <SendMessageFromPort+0x388>)
 8009a34:	0028      	movs	r0, r5
 8009a36:	f006 f875 	bl	800fb24 <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8009a3a:	3601      	adds	r6, #1
 8009a3c:	b2f6      	uxtb	r6, r6
 8009a3e:	b2b3      	uxth	r3, r6
 8009a40:	4a30      	ldr	r2, [pc, #192]	; (8009b04 <SendMessageFromPort+0x3a0>)
 8009a42:	88d2      	ldrh	r2, [r2, #6]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d2de      	bcs.n	8009a06 <SendMessageFromPort+0x2a2>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009a48:	1d27      	adds	r7, r4, #4
 8009a4a:	b2bf      	uxth	r7, r7
 8009a4c:	2332      	movs	r3, #50	; 0x32
 8009a4e:	003a      	movs	r2, r7
 8009a50:	4926      	ldr	r1, [pc, #152]	; (8009aec <SendMessageFromPort+0x388>)
 8009a52:	0028      	movs	r0, r5
 8009a54:	f006 f866 	bl	800fb24 <writePxDMAMutex>
				osDelay(200);
 8009a58:	20c8      	movs	r0, #200	; 0xc8
 8009a5a:	f006 f949 	bl	800fcf0 <osDelay>
				if(ACK_FLAG == true)
 8009a5e:	4b32      	ldr	r3, [pc, #200]	; (8009b28 <SendMessageFromPort+0x3c4>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1cf      	bne.n	8009a06 <SendMessageFromPort+0x2a2>
				if(rejected_FLAG == true)
 8009a66:	4b31      	ldr	r3, [pc, #196]	; (8009b2c <SendMessageFromPort+0x3c8>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0e5      	beq.n	8009a3a <SendMessageFromPort+0x2d6>
 8009a6e:	e7de      	b.n	8009a2e <SendMessageFromPort+0x2ca>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8009a70:	4643      	mov	r3, r8
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d105      	bne.n	8009a82 <SendMessageFromPort+0x31e>
 8009a76:	464b      	mov	r3, r9
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <SendMessageFromPort+0x31e>
			src =message[4];
 8009a7c:	4b1b      	ldr	r3, [pc, #108]	; (8009aec <SendMessageFromPort+0x388>)
 8009a7e:	791b      	ldrb	r3, [r3, #4]
 8009a80:	4699      	mov	r9, r3
		FindBroadcastRoutes(src);
 8009a82:	4648      	mov	r0, r9
 8009a84:	f7fa f99e 	bl	8003dc4 <FindBroadcastRoutes>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009a88:	2601      	movs	r6, #1
 8009a8a:	e007      	b.n	8009a9c <SendMessageFromPort+0x338>
			rejected_FLAG=false;
 8009a8c:	4b27      	ldr	r3, [pc, #156]	; (8009b2c <SendMessageFromPort+0x3c8>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 8009a92:	200a      	movs	r0, #10
 8009a94:	f005 fe34 	bl	800f700 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009a98:	3601      	adds	r6, #1
 8009a9a:	b2f6      	uxtb	r6, r6
 8009a9c:	2e05      	cmp	r6, #5
 8009a9e:	d8b7      	bhi.n	8009a10 <SendMessageFromPort+0x2ac>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009aa0:	4b17      	ldr	r3, [pc, #92]	; (8009b00 <SendMessageFromPort+0x39c>)
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	4a22      	ldr	r2, [pc, #136]	; (8009b34 <SendMessageFromPort+0x3d0>)
 8009aaa:	5a9b      	ldrh	r3, [r3, r2]
 8009aac:	1e72      	subs	r2, r6, #1
 8009aae:	4113      	asrs	r3, r2
 8009ab0:	07db      	lsls	r3, r3, #31
 8009ab2:	d5eb      	bpl.n	8009a8c <SendMessageFromPort+0x328>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009ab4:	1d27      	adds	r7, r4, #4
 8009ab6:	b2bf      	uxth	r7, r7
 8009ab8:	2332      	movs	r3, #50	; 0x32
 8009aba:	003a      	movs	r2, r7
 8009abc:	490b      	ldr	r1, [pc, #44]	; (8009aec <SendMessageFromPort+0x388>)
 8009abe:	0030      	movs	r0, r6
 8009ac0:	f006 f830 	bl	800fb24 <writePxDMAMutex>
				osDelay(200);
 8009ac4:	20c8      	movs	r0, #200	; 0xc8
 8009ac6:	f006 f913 	bl	800fcf0 <osDelay>
				if(rejected_FLAG == true)
 8009aca:	4b18      	ldr	r3, [pc, #96]	; (8009b2c <SendMessageFromPort+0x3c8>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d0dc      	beq.n	8009a8c <SendMessageFromPort+0x328>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009ad2:	2332      	movs	r3, #50	; 0x32
 8009ad4:	003a      	movs	r2, r7
 8009ad6:	4905      	ldr	r1, [pc, #20]	; (8009aec <SendMessageFromPort+0x388>)
 8009ad8:	0028      	movs	r0, r5
 8009ada:	f006 f823 	bl	800fb24 <writePxDMAMutex>
 8009ade:	e7d5      	b.n	8009a8c <SendMessageFromPort+0x328>
		return BOS_ERR_WrongParam;
 8009ae0:	2067      	movs	r0, #103	; 0x67
 8009ae2:	e79d      	b.n	8009a20 <SendMessageFromPort+0x2bc>
 8009ae4:	2067      	movs	r0, #103	; 0x67
 8009ae6:	e79b      	b.n	8009a20 <SendMessageFromPort+0x2bc>
 8009ae8:	2067      	movs	r0, #103	; 0x67
 8009aea:	e799      	b.n	8009a20 <SendMessageFromPort+0x2bc>
 8009aec:	20000ef4 	.word	0x20000ef4
 8009af0:	20000f2c 	.word	0x20000f2c
 8009af4:	20000d3c 	.word	0x20000d3c
 8009af8:	20000ef7 	.word	0x20000ef7
 8009afc:	20001690 	.word	0x20001690
 8009b00:	20001072 	.word	0x20001072
 8009b04:	20006fcc 	.word	0x20006fcc
 8009b08:	200017ca 	.word	0x200017ca
 8009b0c:	200017c8 	.word	0x200017c8
 8009b10:	20000f34 	.word	0x20000f34
 8009b14:	20000aa5 	.word	0x20000aa5
 8009b18:	20000025 	.word	0x20000025
 8009b1c:	20000024 	.word	0x20000024
 8009b20:	20000ebc 	.word	0x20000ebc
 8009b24:	20000ce8 	.word	0x20000ce8
 8009b28:	20000aa4 	.word	0x20000aa4
 8009b2c:	200010fc 	.word	0x200010fc
 8009b30:	20001108 	.word	0x20001108
 8009b34:	20000cec 	.word	0x20000cec
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009b38:	2069      	movs	r0, #105	; 0x69
 8009b3a:	e771      	b.n	8009a20 <SendMessageFromPort+0x2bc>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009b3c:	2069      	movs	r0, #105	; 0x69
 8009b3e:	e76f      	b.n	8009a20 <SendMessageFromPort+0x2bc>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009b40:	2069      	movs	r0, #105	; 0x69
 8009b42:	e76d      	b.n	8009a20 <SendMessageFromPort+0x2bc>

08009b44 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009b44:	b530      	push	{r4, r5, lr}
 8009b46:	b083      	sub	sp, #12
 8009b48:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8009b4a:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <ForwardReceivedMessage+0x34>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009b50:	1e42      	subs	r2, r0, #1
 8009b52:	00d3      	lsls	r3, r2, #3
 8009b54:	1a9b      	subs	r3, r3, r2
 8009b56:	00da      	lsls	r2, r3, #3
 8009b58:	4b08      	ldr	r3, [pc, #32]	; (8009b7c <ForwardReceivedMessage+0x38>)
 8009b5a:	5cd4      	ldrb	r4, [r2, r3]
	port =FindRoute(myID,dst);
 8009b5c:	4b08      	ldr	r3, [pc, #32]	; (8009b80 <ForwardReceivedMessage+0x3c>)
 8009b5e:	7818      	ldrb	r0, [r3, #0]
 8009b60:	0021      	movs	r1, r4
 8009b62:	f7fa f9f1 	bl	8003f48 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009b66:	9500      	str	r5, [sp, #0]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	0022      	movs	r2, r4
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	f7ff fdf9 	bl	8009764 <SendMessageFromPort>
}
 8009b72:	2000      	movs	r0, #0
 8009b74:	b003      	add	sp, #12
 8009b76:	bd30      	pop	{r4, r5, pc}
 8009b78:	20000aa5 	.word	0x20000aa5
 8009b7c:	20000d3c 	.word	0x20000d3c
 8009b80:	20001072 	.word	0x20001072

08009b84 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009b84:	b500      	push	{lr}
 8009b86:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009b88:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <BroadcastReceivedMessage+0x38>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <BroadcastReceivedMessage+0x3c>)
 8009b90:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009b92:	28ff      	cmp	r0, #255	; 0xff
 8009b94:	d009      	beq.n	8009baa <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8009b96:	9100      	str	r1, [sp, #0]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	22fe      	movs	r2, #254	; 0xfe
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	f7ff fde0 	bl	8009764 <SendMessageFromPort>
}
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	b003      	add	sp, #12
 8009ba8:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8009baa:	9100      	str	r1, [sp, #0]
 8009bac:	2300      	movs	r3, #0
 8009bae:	32ff      	adds	r2, #255	; 0xff
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	f7ff fdd6 	bl	8009764 <SendMessageFromPort>
 8009bb8:	e7f4      	b.n	8009ba4 <BroadcastReceivedMessage+0x20>
 8009bba:	46c0      	nop			; (mov r8, r8)
 8009bbc:	20000aa5 	.word	0x20000aa5
 8009bc0:	20000025 	.word	0x20000025

08009bc4 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009bc4:	b530      	push	{r4, r5, lr}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8009bca:	4b0f      	ldr	r3, [pc, #60]	; (8009c08 <BroadcastMessage+0x44>)
 8009bcc:	2501      	movs	r5, #1
 8009bce:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009bd0:	4b0e      	ldr	r3, [pc, #56]	; (8009c0c <BroadcastMessage+0x48>)
 8009bd2:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009bd4:	29ff      	cmp	r1, #255	; 0xff
 8009bd6:	d00e      	beq.n	8009bf6 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8009bd8:	9400      	str	r4, [sp, #0]
 8009bda:	0013      	movs	r3, r2
 8009bdc:	22fe      	movs	r2, #254	; 0xfe
 8009bde:	0001      	movs	r1, r0
 8009be0:	2000      	movs	r0, #0
 8009be2:	f7ff fdbf 	bl	8009764 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8009be6:	0022      	movs	r2, r4
 8009be8:	2100      	movs	r1, #0
 8009bea:	4809      	ldr	r0, [pc, #36]	; (8009c10 <BroadcastMessage+0x4c>)
 8009bec:	f00b fcbe 	bl	801556c <memset>
}
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	b003      	add	sp, #12
 8009bf4:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8009bf6:	9400      	str	r4, [sp, #0]
 8009bf8:	0013      	movs	r3, r2
 8009bfa:	22ff      	movs	r2, #255	; 0xff
 8009bfc:	0001      	movs	r1, r0
 8009bfe:	2000      	movs	r0, #0
 8009c00:	f7ff fdb0 	bl	8009764 <SendMessageFromPort>
 8009c04:	e7ef      	b.n	8009be6 <BroadcastMessage+0x22>
 8009c06:	46c0      	nop			; (mov r8, r8)
 8009c08:	20000aa5 	.word	0x20000aa5
 8009c0c:	20000025 	.word	0x20000025
 8009c10:	20000f34 	.word	0x20000f34

08009c14 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c16:	b083      	sub	sp, #12
 8009c18:	0004      	movs	r4, r0
 8009c1a:	000e      	movs	r6, r1
 8009c1c:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 8009c1e:	28ff      	cmp	r0, #255	; 0xff
 8009c20:	d012      	beq.n	8009c48 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8009c22:	4f0d      	ldr	r7, [pc, #52]	; (8009c58 <SendMessageToModule+0x44>)
 8009c24:	7838      	ldrb	r0, [r7, #0]
 8009c26:	0021      	movs	r1, r4
 8009c28:	f7fa f98e 	bl	8003f48 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009c2c:	7839      	ldrb	r1, [r7, #0]
 8009c2e:	9500      	str	r5, [sp, #0]
 8009c30:	0033      	movs	r3, r6
 8009c32:	0022      	movs	r2, r4
 8009c34:	f7ff fd96 	bl	8009764 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009c38:	002a      	movs	r2, r5
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	4807      	ldr	r0, [pc, #28]	; (8009c5c <SendMessageToModule+0x48>)
 8009c3e:	f00b fc95 	bl	801556c <memset>
}
 8009c42:	2000      	movs	r0, #0
 8009c44:	b003      	add	sp, #12
 8009c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009c48:	4b03      	ldr	r3, [pc, #12]	; (8009c58 <SendMessageToModule+0x44>)
 8009c4a:	7818      	ldrb	r0, [r3, #0]
 8009c4c:	0013      	movs	r3, r2
 8009c4e:	000a      	movs	r2, r1
 8009c50:	21ff      	movs	r1, #255	; 0xff
 8009c52:	f7ff ffb7 	bl	8009bc4 <BroadcastMessage>
 8009c56:	e7f4      	b.n	8009c42 <SendMessageToModule+0x2e>
 8009c58:	20001072 	.word	0x20001072
 8009c5c:	20000f34 	.word	0x20000f34

08009c60 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c62:	46de      	mov	lr, fp
 8009c64:	4657      	mov	r7, sl
 8009c66:	464e      	mov	r6, r9
 8009c68:	b5c0      	push	{r6, r7, lr}
 8009c6a:	b08a      	sub	sp, #40	; 0x28
 8009c6c:	9009      	str	r0, [sp, #36]	; 0x24
 8009c6e:	000c      	movs	r4, r1
 8009c70:	9107      	str	r1, [sp, #28]
 8009c72:	9208      	str	r2, [sp, #32]
 8009c74:	001d      	movs	r5, r3
 8009c76:	9306      	str	r3, [sp, #24]
 8009c78:	ab12      	add	r3, sp, #72	; 0x48
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	469a      	mov	sl, r3
 8009c7e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009c80:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009c82:	ab15      	add	r3, sp, #84	; 0x54
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	469b      	mov	fp, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009c88:	4b4d      	ldr	r3, [pc, #308]	; (8009dc0 <StartScastDMAStream+0x160>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	428b      	cmp	r3, r1
 8009c8e:	d103      	bne.n	8009c98 <StartScastDMAStream+0x38>
		
		return result;
	}
	
	/* Inform participating modules */
	for(uint8_t i =0; i < sizeof(route); i++){
 8009c90:	2400      	movs	r4, #0
 8009c92:	003d      	movs	r5, r7
 8009c94:	0037      	movs	r7, r6
 8009c96:	e055      	b.n	8009d44 <StartScastDMAStream+0xe4>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c98:	0e32      	lsrs	r2, r6, #24
 8009c9a:	4b4a      	ldr	r3, [pc, #296]	; (8009dc4 <StartScastDMAStream+0x164>)
 8009c9c:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009c9e:	0c32      	lsrs	r2, r6, #16
 8009ca0:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009ca2:	0a32      	lsrs	r2, r6, #8
 8009ca4:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009ca6:	70de      	strb	r6, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009ca8:	0e3a      	lsrs	r2, r7, #24
 8009caa:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009cac:	0c3a      	lsrs	r2, r7, #16
 8009cae:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009cb0:	0a3a      	lsrs	r2, r7, #8
 8009cb2:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009cb4:	71df      	strb	r7, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009cb6:	4651      	mov	r1, sl
 8009cb8:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009cba:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 8009cbc:	729d      	strb	r5, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8009cbe:	9a08      	ldr	r2, [sp, #32]
 8009cc0:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8009cc2:	465a      	mov	r2, fp
 8009cc4:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009cc6:	220d      	movs	r2, #13
 8009cc8:	211c      	movs	r1, #28
 8009cca:	0020      	movs	r0, r4
 8009ccc:	f7ff ffa2 	bl	8009c14 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	b00a      	add	sp, #40	; 0x28
 8009cd4:	bc1c      	pop	{r2, r3, r4}
 8009cd6:	4691      	mov	r9, r2
 8009cd8:	469a      	mov	sl, r3
 8009cda:	46a3      	mov	fp, r4
 8009cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 8009cde:	9907      	ldr	r1, [sp, #28]
 8009ce0:	f7fa f932 	bl	8003f48 <FindRoute>
 8009ce4:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 8009ce6:	9906      	ldr	r1, [sp, #24]
 8009ce8:	9807      	ldr	r0, [sp, #28]
 8009cea:	f7fa f92d 	bl	8003f48 <FindRoute>
			if(route[i] == dstM){
 8009cee:	4b36      	ldr	r3, [pc, #216]	; (8009dc8 <StartScastDMAStream+0x168>)
 8009cf0:	5d98      	ldrb	r0, [r3, r6]
 8009cf2:	9b06      	ldr	r3, [sp, #24]
 8009cf4:	4298      	cmp	r0, r3
 8009cf6:	d139      	bne.n	8009d6c <StartScastDMAStream+0x10c>
				temp2 =dstP;
 8009cf8:	9808      	ldr	r0, [sp, #32]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009cfa:	0e3a      	lsrs	r2, r7, #24
 8009cfc:	4b31      	ldr	r3, [pc, #196]	; (8009dc4 <StartScastDMAStream+0x164>)
 8009cfe:	701a      	strb	r2, [r3, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009d00:	0c3a      	lsrs	r2, r7, #16
 8009d02:	705a      	strb	r2, [r3, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009d04:	0a3a      	lsrs	r2, r7, #8
 8009d06:	709a      	strb	r2, [r3, #2]
			messageParams[3] =(uint8_t )count;
 8009d08:	70df      	strb	r7, [r3, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009d0a:	0e2a      	lsrs	r2, r5, #24
 8009d0c:	711a      	strb	r2, [r3, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009d0e:	0c2a      	lsrs	r2, r5, #16
 8009d10:	715a      	strb	r2, [r3, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009d12:	0a2a      	lsrs	r2, r5, #8
 8009d14:	719a      	strb	r2, [r3, #6]
			messageParams[7] =(uint8_t )timeout;
 8009d16:	71dd      	strb	r5, [r3, #7]
			messageParams[8] =direction; /* Stream direction */
 8009d18:	4652      	mov	r2, sl
 8009d1a:	721a      	strb	r2, [r3, #8]
			messageParams[9] =temp1; /* Source port */
 8009d1c:	464a      	mov	r2, r9
 8009d1e:	725a      	strb	r2, [r3, #9]
			messageParams[10] =temp2; /* destination port */
 8009d20:	7298      	strb	r0, [r3, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8009d22:	465a      	mov	r2, fp
 8009d24:	72da      	strb	r2, [r3, #11]
			FindRoute(srcM,dstM);
 8009d26:	9906      	ldr	r1, [sp, #24]
 8009d28:	9807      	ldr	r0, [sp, #28]
 8009d2a:	f7fa f90d 	bl	8003f48 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009d2e:	4b26      	ldr	r3, [pc, #152]	; (8009dc8 <StartScastDMAStream+0x168>)
 8009d30:	5d98      	ldrb	r0, [r3, r6]
 8009d32:	220c      	movs	r2, #12
 8009d34:	211b      	movs	r1, #27
 8009d36:	f7ff ff6d 	bl	8009c14 <SendMessageToModule>
			osDelay(10);
 8009d3a:	200a      	movs	r0, #10
 8009d3c:	f005 ffd8 	bl	800fcf0 <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 8009d40:	3401      	adds	r4, #1
 8009d42:	b2e4      	uxtb	r4, r4
 8009d44:	2c19      	cmp	r4, #25
 8009d46:	d817      	bhi.n	8009d78 <StartScastDMAStream+0x118>
		FindRoute(srcM,dstM);
 8009d48:	9906      	ldr	r1, [sp, #24]
 8009d4a:	9807      	ldr	r0, [sp, #28]
 8009d4c:	f7fa f8fc 	bl	8003f48 <FindRoute>
		if(route[i]){
 8009d50:	0026      	movs	r6, r4
 8009d52:	4b1d      	ldr	r3, [pc, #116]	; (8009dc8 <StartScastDMAStream+0x168>)
 8009d54:	5d18      	ldrb	r0, [r3, r4]
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d0f2      	beq.n	8009d40 <StartScastDMAStream+0xe0>
			if(route[i + 1]){
 8009d5a:	1c63      	adds	r3, r4, #1
 8009d5c:	4a1a      	ldr	r2, [pc, #104]	; (8009dc8 <StartScastDMAStream+0x168>)
 8009d5e:	5cd1      	ldrb	r1, [r2, r3]
 8009d60:	2900      	cmp	r1, #0
 8009d62:	d0bc      	beq.n	8009cde <StartScastDMAStream+0x7e>
				temp1 =FindRoute(route[i],route[i + 1]);
 8009d64:	f7fa f8f0 	bl	8003f48 <FindRoute>
 8009d68:	4681      	mov	r9, r0
 8009d6a:	e7bc      	b.n	8009ce6 <StartScastDMAStream+0x86>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009d6c:	1e73      	subs	r3, r6, #1
 8009d6e:	4a16      	ldr	r2, [pc, #88]	; (8009dc8 <StartScastDMAStream+0x168>)
 8009d70:	5cd1      	ldrb	r1, [r2, r3]
 8009d72:	f7fa f8e9 	bl	8003f48 <FindRoute>
 8009d76:	e7c0      	b.n	8009cfa <StartScastDMAStream+0x9a>
 8009d78:	003e      	movs	r6, r7
 8009d7a:	002f      	movs	r7, r5
	if(srcM == dstM)
 8009d7c:	9807      	ldr	r0, [sp, #28]
 8009d7e:	9906      	ldr	r1, [sp, #24]
 8009d80:	4288      	cmp	r0, r1
 8009d82:	d118      	bne.n	8009db6 <StartScastDMAStream+0x156>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009d84:	9b08      	ldr	r3, [sp, #32]
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8a:	003a      	movs	r2, r7
 8009d8c:	0031      	movs	r1, r6
 8009d8e:	4650      	mov	r0, sl
 8009d90:	f7ff fbd4 	bl	800953c <SetupDMAStreams>
	if(stored){
 8009d94:	465b      	mov	r3, fp
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d09a      	beq.n	8009cd0 <StartScastDMAStream+0x70>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	9304      	str	r3, [sp, #16]
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	9302      	str	r3, [sp, #8]
 8009da2:	9301      	str	r3, [sp, #4]
 8009da4:	9b08      	ldr	r3, [sp, #32]
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009daa:	003a      	movs	r2, r7
 8009dac:	0031      	movs	r1, r6
 8009dae:	4650      	mov	r0, sl
 8009db0:	f7f9 fe5e 	bl	8003a70 <SaveEEstreams>
 8009db4:	e78c      	b.n	8009cd0 <StartScastDMAStream+0x70>
		port =FindRoute(srcM,dstM);
 8009db6:	f7fa f8c7 	bl	8003f48 <FindRoute>
 8009dba:	9008      	str	r0, [sp, #32]
 8009dbc:	e7e2      	b.n	8009d84 <StartScastDMAStream+0x124>
 8009dbe:	46c0      	nop			; (mov r8, r8)
 8009dc0:	20001072 	.word	0x20001072
 8009dc4:	20000f34 	.word	0x20000f34
 8009dc8:	20007150 	.word	0x20007150

08009dcc <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	46de      	mov	lr, fp
 8009dd0:	4657      	mov	r7, sl
 8009dd2:	464e      	mov	r6, r9
 8009dd4:	4645      	mov	r5, r8
 8009dd6:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t port;
	bool emptyBuffer = false;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4698      	mov	r8, r3
 8009ddc:	e228      	b.n	800a230 <BackEndTask+0x464>
			/* A. Check for BOS messages */
			if(portStatus[port] == MSG || portStatus[port] == FREE){
				/* A.1. Look for HZ delimiter and determine packet start */
				/* Note this parses only a single packet on each pass TODO update to parse all */

				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009dde:	1e6c      	subs	r4, r5, #1
 8009de0:	4bce      	ldr	r3, [pc, #824]	; (800a11c <BackEndTask+0x350>)
 8009de2:	5d1f      	ldrb	r7, [r3, r4]
 8009de4:	e004      	b.n	8009df0 <BackEndTask+0x24>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
						packetStart =i;
						break;
					}
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009de6:	2fbf      	cmp	r7, #191	; 0xbf
 8009de8:	d038      	beq.n	8009e5c <BackEndTask+0x90>
						packetStart = MSG_RX_BUF_SIZE - 1;
						break;
					}
					else{
						/* B. Did not find any messaging packets. Check for CLI enter key (0xD) */
						if(i == MSG_RX_BUF_SIZE - 1){
 8009dea:	2fbf      	cmp	r7, #191	; 0xbf
 8009dec:	d047      	beq.n	8009e7e <BackEndTask+0xb2>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009dee:	3701      	adds	r7, #1
 8009df0:	2fbf      	cmp	r7, #191	; 0xbf
 8009df2:	dc14      	bgt.n	8009e1e <BackEndTask+0x52>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009df4:	2fbe      	cmp	r7, #190	; 0xbe
 8009df6:	dcf6      	bgt.n	8009de6 <BackEndTask+0x1a>
 8009df8:	0063      	lsls	r3, r4, #1
 8009dfa:	191b      	adds	r3, r3, r4
 8009dfc:	019a      	lsls	r2, r3, #6
 8009dfe:	4bc8      	ldr	r3, [pc, #800]	; (800a120 <BackEndTask+0x354>)
 8009e00:	189b      	adds	r3, r3, r2
 8009e02:	5ddb      	ldrb	r3, [r3, r7]
 8009e04:	2b48      	cmp	r3, #72	; 0x48
 8009e06:	d1ee      	bne.n	8009de6 <BackEndTask+0x1a>
 8009e08:	1c7a      	adds	r2, r7, #1
 8009e0a:	0063      	lsls	r3, r4, #1
 8009e0c:	191b      	adds	r3, r3, r4
 8009e0e:	0199      	lsls	r1, r3, #6
 8009e10:	4bc3      	ldr	r3, [pc, #780]	; (800a120 <BackEndTask+0x354>)
 8009e12:	185b      	adds	r3, r3, r1
 8009e14:	5c9b      	ldrb	r3, [r3, r2]
 8009e16:	2b5a      	cmp	r3, #90	; 0x5a
 8009e18:	d1e5      	bne.n	8009de6 <BackEndTask+0x1a>
						packetStart =i;
 8009e1a:	4bc2      	ldr	r3, [pc, #776]	; (800a124 <BackEndTask+0x358>)
 8009e1c:	601f      	str	r7, [r3, #0]
							emptyBuffer = true;
						}
					}
				}
				/* Check parse status */
				if(emptyBuffer){
 8009e1e:	4643      	mov	r3, r8
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d000      	beq.n	8009e26 <BackEndTask+0x5a>
 8009e24:	e1ff      	b.n	800a226 <BackEndTask+0x45a>
					emptyBuffer = false;
					continue;
				}
				totalnumberofrecevedmesg++;
 8009e26:	4ac0      	ldr	r2, [pc, #768]	; (800a128 <BackEndTask+0x35c>)
 8009e28:	6813      	ldr	r3, [r2, #0]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	6013      	str	r3, [r2, #0]

				/* A.2. Parse the length byte */
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009e2e:	4bbd      	ldr	r3, [pc, #756]	; (800a124 <BackEndTask+0x358>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2bbd      	cmp	r3, #189	; 0xbd
 8009e34:	d06b      	beq.n	8009f0e <BackEndTask+0x142>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
					parseStart =0;
				}
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009e36:	2bbe      	cmp	r3, #190	; 0xbe
 8009e38:	d100      	bne.n	8009e3c <BackEndTask+0x70>
 8009e3a:	e0d1      	b.n	8009fe0 <BackEndTask+0x214>
					packetLength =UARTRxBuf[port - 1][0];
					parseStart =1;
				}
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009e3c:	2bbf      	cmp	r3, #191	; 0xbf
 8009e3e:	d100      	bne.n	8009e42 <BackEndTask+0x76>
 8009e40:	e0d9      	b.n	8009ff6 <BackEndTask+0x22a>
					packetLength =UARTRxBuf[port - 1][1];
					parseStart =2;
				}
				else{
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009e42:	1c98      	adds	r0, r3, #2
 8009e44:	0062      	lsls	r2, r4, #1
 8009e46:	1912      	adds	r2, r2, r4
 8009e48:	0191      	lsls	r1, r2, #6
 8009e4a:	4ab5      	ldr	r2, [pc, #724]	; (800a120 <BackEndTask+0x354>)
 8009e4c:	1852      	adds	r2, r2, r1
 8009e4e:	5c11      	ldrb	r1, [r2, r0]
 8009e50:	4ab6      	ldr	r2, [pc, #728]	; (800a12c <BackEndTask+0x360>)
 8009e52:	6011      	str	r1, [r2, #0]
					parseStart =packetStart + 3;
 8009e54:	3303      	adds	r3, #3
 8009e56:	4ab6      	ldr	r2, [pc, #728]	; (800a130 <BackEndTask+0x364>)
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	e064      	b.n	8009f26 <BackEndTask+0x15a>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009e5c:	0062      	lsls	r2, r4, #1
 8009e5e:	1912      	adds	r2, r2, r4
 8009e60:	0191      	lsls	r1, r2, #6
 8009e62:	4baf      	ldr	r3, [pc, #700]	; (800a120 <BackEndTask+0x354>)
 8009e64:	185b      	adds	r3, r3, r1
 8009e66:	33bf      	adds	r3, #191	; 0xbf
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	2b48      	cmp	r3, #72	; 0x48
 8009e6c:	d1bd      	bne.n	8009dea <BackEndTask+0x1e>
 8009e6e:	4bac      	ldr	r3, [pc, #688]	; (800a120 <BackEndTask+0x354>)
 8009e70:	5ccb      	ldrb	r3, [r1, r3]
 8009e72:	2b5a      	cmp	r3, #90	; 0x5a
 8009e74:	d1b9      	bne.n	8009dea <BackEndTask+0x1e>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009e76:	4bab      	ldr	r3, [pc, #684]	; (800a124 <BackEndTask+0x358>)
 8009e78:	22bf      	movs	r2, #191	; 0xbf
 8009e7a:	601a      	str	r2, [r3, #0]
						break;
 8009e7c:	e7cf      	b.n	8009e1e <BackEndTask+0x52>
							if(BOS.disableCLI == false){
 8009e7e:	4bad      	ldr	r3, [pc, #692]	; (800a134 <BackEndTask+0x368>)
 8009e80:	7e9b      	ldrb	r3, [r3, #26]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <BackEndTask+0xc0>
							emptyBuffer = true;
 8009e86:	2301      	movs	r3, #1
 8009e88:	4698      	mov	r8, r3
 8009e8a:	e7b0      	b.n	8009dee <BackEndTask+0x22>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009e8c:	4ba3      	ldr	r3, [pc, #652]	; (800a11c <BackEndTask+0x350>)
 8009e8e:	5d1b      	ldrb	r3, [r3, r4]
 8009e90:	e002      	b.n	8009e98 <BackEndTask+0xcc>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e92:	2bbf      	cmp	r3, #191	; 0xbf
 8009e94:	d030      	beq.n	8009ef8 <BackEndTask+0x12c>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009e96:	3301      	adds	r3, #1
 8009e98:	2bbf      	cmp	r3, #191	; 0xbf
 8009e9a:	dc35      	bgt.n	8009f08 <BackEndTask+0x13c>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e9c:	0062      	lsls	r2, r4, #1
 8009e9e:	1912      	adds	r2, r2, r4
 8009ea0:	0191      	lsls	r1, r2, #6
 8009ea2:	4a9f      	ldr	r2, [pc, #636]	; (800a120 <BackEndTask+0x354>)
 8009ea4:	1852      	adds	r2, r2, r1
 8009ea6:	5cd2      	ldrb	r2, [r2, r3]
 8009ea8:	2a0d      	cmp	r2, #13
 8009eaa:	d1f4      	bne.n	8009e96 <BackEndTask+0xca>
 8009eac:	2bbe      	cmp	r3, #190	; 0xbe
 8009eae:	dcf0      	bgt.n	8009e92 <BackEndTask+0xc6>
 8009eb0:	1c59      	adds	r1, r3, #1
 8009eb2:	0062      	lsls	r2, r4, #1
 8009eb4:	1912      	adds	r2, r2, r4
 8009eb6:	0190      	lsls	r0, r2, #6
 8009eb8:	4a99      	ldr	r2, [pc, #612]	; (800a120 <BackEndTask+0x354>)
 8009eba:	1812      	adds	r2, r2, r0
 8009ebc:	5c52      	ldrb	r2, [r2, r1]
 8009ebe:	2a00      	cmp	r2, #0
 8009ec0:	d1e7      	bne.n	8009e92 <BackEndTask+0xc6>
										UARTRxBuf[port - 1][j] =0;
 8009ec2:	0062      	lsls	r2, r4, #1
 8009ec4:	1912      	adds	r2, r2, r4
 8009ec6:	0191      	lsls	r1, r2, #6
 8009ec8:	4a95      	ldr	r2, [pc, #596]	; (800a120 <BackEndTask+0x354>)
 8009eca:	1852      	adds	r2, r2, r1
 8009ecc:	2100      	movs	r1, #0
 8009ece:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	4a92      	ldr	r2, [pc, #584]	; (800a11c <BackEndTask+0x350>)
 8009ed4:	5513      	strb	r3, [r2, r4]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009ed6:	4b98      	ldr	r3, [pc, #608]	; (800a138 <BackEndTask+0x36c>)
 8009ed8:	7818      	ldrb	r0, [r3, #0]
 8009eda:	4a98      	ldr	r2, [pc, #608]	; (800a13c <BackEndTask+0x370>)
 8009edc:	5411      	strb	r1, [r2, r0]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009ede:	3103      	adds	r1, #3
 8009ee0:	5591      	strb	r1, [r2, r6]
										PcPort =port;
 8009ee2:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009ee4:	4b96      	ldr	r3, [pc, #600]	; (800a140 <BackEndTask+0x374>)
 8009ee6:	6818      	ldr	r0, [r3, #0]
 8009ee8:	2300      	movs	r3, #0
 8009eea:	2202      	movs	r2, #2
 8009eec:	2100      	movs	r1, #0
 8009eee:	f007 fb41 	bl	8011574 <xTaskGenericNotify>
							emptyBuffer = true;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4698      	mov	r8, r3
										break;
 8009ef6:	e77a      	b.n	8009dee <BackEndTask+0x22>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009ef8:	0062      	lsls	r2, r4, #1
 8009efa:	1912      	adds	r2, r2, r4
 8009efc:	0191      	lsls	r1, r2, #6
 8009efe:	4a88      	ldr	r2, [pc, #544]	; (800a120 <BackEndTask+0x354>)
 8009f00:	5c8a      	ldrb	r2, [r1, r2]
 8009f02:	2a00      	cmp	r2, #0
 8009f04:	d1c7      	bne.n	8009e96 <BackEndTask+0xca>
 8009f06:	e7dc      	b.n	8009ec2 <BackEndTask+0xf6>
							emptyBuffer = true;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4698      	mov	r8, r3
 8009f0c:	e76f      	b.n	8009dee <BackEndTask+0x22>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009f0e:	0062      	lsls	r2, r4, #1
 8009f10:	1912      	adds	r2, r2, r4
 8009f12:	0191      	lsls	r1, r2, #6
 8009f14:	4b82      	ldr	r3, [pc, #520]	; (800a120 <BackEndTask+0x354>)
 8009f16:	185b      	adds	r3, r3, r1
 8009f18:	33bf      	adds	r3, #191	; 0xbf
 8009f1a:	781a      	ldrb	r2, [r3, #0]
 8009f1c:	4b83      	ldr	r3, [pc, #524]	; (800a12c <BackEndTask+0x360>)
 8009f1e:	601a      	str	r2, [r3, #0]
					parseStart =0;
 8009f20:	4b83      	ldr	r3, [pc, #524]	; (800a130 <BackEndTask+0x364>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	601a      	str	r2, [r3, #0]
				}

				/* A.3. Set packet end from packet start and length */
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009f26:	4b81      	ldr	r3, [pc, #516]	; (800a12c <BackEndTask+0x360>)
 8009f28:	681f      	ldr	r7, [r3, #0]
 8009f2a:	3703      	adds	r7, #3
 8009f2c:	4b7d      	ldr	r3, [pc, #500]	; (800a124 <BackEndTask+0x358>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	18fa      	adds	r2, r7, r3
 8009f32:	4984      	ldr	r1, [pc, #528]	; (800a144 <BackEndTask+0x378>)
 8009f34:	600a      	str	r2, [r1, #0]
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009f36:	2abf      	cmp	r2, #191	; 0xbf
 8009f38:	dd01      	ble.n	8009f3e <BackEndTask+0x172>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009f3a:	3ac0      	subs	r2, #192	; 0xc0
 8009f3c:	600a      	str	r2, [r1, #0]

				if(packetStart != packetEnd) // Non-empty packet
 8009f3e:	4a81      	ldr	r2, [pc, #516]	; (800a144 <BackEndTask+0x378>)
 8009f40:	6812      	ldr	r2, [r2, #0]
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d022      	beq.n	8009f8c <BackEndTask+0x1c0>
				{
					/* A.4. Calculate packet CRC */
					if(packetStart < packetEnd){
 8009f46:	da62      	bge.n	800a00e <BackEndTask+0x242>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009f48:	0062      	lsls	r2, r4, #1
 8009f4a:	1912      	adds	r2, r2, r4
 8009f4c:	0191      	lsls	r1, r2, #6
 8009f4e:	18c9      	adds	r1, r1, r3
 8009f50:	4b73      	ldr	r3, [pc, #460]	; (800a120 <BackEndTask+0x354>)
 8009f52:	18c9      	adds	r1, r1, r3
 8009f54:	003a      	movs	r2, r7
 8009f56:	487c      	ldr	r0, [pc, #496]	; (800a148 <BackEndTask+0x37c>)
 8009f58:	f00b faff 	bl	801555a <memcpy>
						MSG_RX_BUF_SIZE - packetStart);
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
					}

					/* crc8 calculation */
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009f5c:	4b73      	ldr	r3, [pc, #460]	; (800a12c <BackEndTask+0x360>)
 8009f5e:	6819      	ldr	r1, [r3, #0]
 8009f60:	3103      	adds	r1, #3
 8009f62:	b289      	uxth	r1, r1
 8009f64:	4f78      	ldr	r7, [pc, #480]	; (800a148 <BackEndTask+0x37c>)
 8009f66:	0038      	movs	r0, r7
 8009f68:	f004 ffc4 	bl	800eef4 <CalculateCRC8>
 8009f6c:	4681      	mov	r9, r0
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009f6e:	2238      	movs	r2, #56	; 0x38
 8009f70:	2100      	movs	r1, #0
 8009f72:	0038      	movs	r0, r7
 8009f74:	f00b fafa 	bl	801556c <memset>

					/* A.5. Compare CRC. If matched, accept the packet as a BOS message and notify the appropriate message parser task */
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009f78:	4b72      	ldr	r3, [pc, #456]	; (800a144 <BackEndTask+0x378>)
 8009f7a:	6819      	ldr	r1, [r3, #0]
 8009f7c:	0063      	lsls	r3, r4, #1
 8009f7e:	191b      	adds	r3, r3, r4
 8009f80:	019a      	lsls	r2, r3, #6
 8009f82:	4b67      	ldr	r3, [pc, #412]	; (800a120 <BackEndTask+0x354>)
 8009f84:	189b      	adds	r3, r3, r2
 8009f86:	5c5b      	ldrb	r3, [r3, r1]
 8009f88:	4599      	cmp	r9, r3
 8009f8a:	d05b      	beq.n	800a044 <BackEndTask+0x278>
				}

				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
 8009f8c:	4b65      	ldr	r3, [pc, #404]	; (800a124 <BackEndTask+0x358>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a6c      	ldr	r2, [pc, #432]	; (800a144 <BackEndTask+0x378>)
 8009f92:	6812      	ldr	r2, [r2, #0]
 8009f94:	4293      	cmp	r3, r2
 8009f96:	db00      	blt.n	8009f9a <BackEndTask+0x1ce>
 8009f98:	e103      	b.n	800a1a2 <BackEndTask+0x3d6>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009f9a:	0062      	lsls	r2, r4, #1
 8009f9c:	1912      	adds	r2, r2, r4
 8009f9e:	0190      	lsls	r0, r2, #6
 8009fa0:	18c0      	adds	r0, r0, r3
 8009fa2:	4b5f      	ldr	r3, [pc, #380]	; (800a120 <BackEndTask+0x354>)
 8009fa4:	18c0      	adds	r0, r0, r3
 8009fa6:	4b61      	ldr	r3, [pc, #388]	; (800a12c <BackEndTask+0x360>)
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	3204      	adds	r2, #4
 8009fac:	2100      	movs	r1, #0
 8009fae:	f00b fadd 	bl	801556c <memset>
					MSG_RX_BUF_SIZE - packetStart);
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
				}

				/* A.6.2 Advance buffer index */
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009fb2:	4b64      	ldr	r3, [pc, #400]	; (800a144 <BackEndTask+0x378>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2bbf      	cmp	r3, #191	; 0xbf
 8009fb8:	d100      	bne.n	8009fbc <BackEndTask+0x1f0>
 8009fba:	e10c      	b.n	800a1d6 <BackEndTask+0x40a>
					UARTRxBufIndex[port - 1] =0;
				else{
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	4a57      	ldr	r2, [pc, #348]	; (800a11c <BackEndTask+0x350>)
 8009fc0:	5513      	strb	r3, [r2, r4]
				}
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8009fc2:	00e3      	lsls	r3, r4, #3
 8009fc4:	1b1c      	subs	r4, r3, r4
 8009fc6:	00e2      	lsls	r2, r4, #3
 8009fc8:	4b60      	ldr	r3, [pc, #384]	; (800a14c <BackEndTask+0x380>)
 8009fca:	189b      	adds	r3, r3, r2
 8009fcc:	7858      	ldrb	r0, [r3, #1]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	212d      	movs	r1, #45	; 0x2d
 8009fd2:	f7ff fe1f 	bl	8009c14 <SendMessageToModule>
				++rejectedMsg;
 8009fd6:	4a5e      	ldr	r2, [pc, #376]	; (800a150 <BackEndTask+0x384>)
 8009fd8:	8813      	ldrh	r3, [r2, #0]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	8013      	strh	r3, [r2, #0]
 8009fde:	e113      	b.n	800a208 <BackEndTask+0x43c>
					packetLength =UARTRxBuf[port - 1][0];
 8009fe0:	0063      	lsls	r3, r4, #1
 8009fe2:	191b      	adds	r3, r3, r4
 8009fe4:	019a      	lsls	r2, r3, #6
 8009fe6:	4b4e      	ldr	r3, [pc, #312]	; (800a120 <BackEndTask+0x354>)
 8009fe8:	5cd2      	ldrb	r2, [r2, r3]
 8009fea:	4b50      	ldr	r3, [pc, #320]	; (800a12c <BackEndTask+0x360>)
 8009fec:	601a      	str	r2, [r3, #0]
					parseStart =1;
 8009fee:	4b50      	ldr	r3, [pc, #320]	; (800a130 <BackEndTask+0x364>)
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	e797      	b.n	8009f26 <BackEndTask+0x15a>
					packetLength =UARTRxBuf[port - 1][1];
 8009ff6:	0063      	lsls	r3, r4, #1
 8009ff8:	191b      	adds	r3, r3, r4
 8009ffa:	019a      	lsls	r2, r3, #6
 8009ffc:	4b48      	ldr	r3, [pc, #288]	; (800a120 <BackEndTask+0x354>)
 8009ffe:	189b      	adds	r3, r3, r2
 800a000:	785a      	ldrb	r2, [r3, #1]
 800a002:	4b4a      	ldr	r3, [pc, #296]	; (800a12c <BackEndTask+0x360>)
 800a004:	601a      	str	r2, [r3, #0]
					parseStart =2;
 800a006:	4b4a      	ldr	r3, [pc, #296]	; (800a130 <BackEndTask+0x364>)
 800a008:	2202      	movs	r2, #2
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	e78b      	b.n	8009f26 <BackEndTask+0x15a>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 800a00e:	0062      	lsls	r2, r4, #1
 800a010:	4692      	mov	sl, r2
 800a012:	1912      	adds	r2, r2, r4
 800a014:	0191      	lsls	r1, r2, #6
 800a016:	18c9      	adds	r1, r1, r3
 800a018:	4a41      	ldr	r2, [pc, #260]	; (800a120 <BackEndTask+0x354>)
 800a01a:	4693      	mov	fp, r2
 800a01c:	4459      	add	r1, fp
						MSG_RX_BUF_SIZE - packetStart);
 800a01e:	22c0      	movs	r2, #192	; 0xc0
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	4699      	mov	r9, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 800a024:	001a      	movs	r2, r3
 800a026:	4848      	ldr	r0, [pc, #288]	; (800a148 <BackEndTask+0x37c>)
 800a028:	f00b fa97 	bl	801555a <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 800a02c:	4b46      	ldr	r3, [pc, #280]	; (800a148 <BackEndTask+0x37c>)
 800a02e:	444b      	add	r3, r9
 800a030:	0018      	movs	r0, r3
 800a032:	4653      	mov	r3, sl
 800a034:	191b      	adds	r3, r3, r4
 800a036:	0199      	lsls	r1, r3, #6
 800a038:	4459      	add	r1, fp
 800a03a:	464b      	mov	r3, r9
 800a03c:	1afa      	subs	r2, r7, r3
 800a03e:	f00b fa8c 	bl	801555a <memcpy>
 800a042:	e78b      	b.n	8009f5c <BackEndTask+0x190>
						portStatus[port] =MSG;
 800a044:	4b3d      	ldr	r3, [pc, #244]	; (800a13c <BackEndTask+0x370>)
 800a046:	2201      	movs	r2, #1
 800a048:	559a      	strb	r2, [r3, r6]
						messageLength[port - 1] =packetLength;
 800a04a:	4b38      	ldr	r3, [pc, #224]	; (800a12c <BackEndTask+0x360>)
 800a04c:	681e      	ldr	r6, [r3, #0]
 800a04e:	4b41      	ldr	r3, [pc, #260]	; (800a154 <BackEndTask+0x388>)
 800a050:	551e      	strb	r6, [r3, r4]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 800a052:	4b37      	ldr	r3, [pc, #220]	; (800a130 <BackEndTask+0x364>)
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	23bf      	movs	r3, #191	; 0xbf
 800a058:	1a9b      	subs	r3, r3, r2
 800a05a:	429e      	cmp	r6, r3
 800a05c:	dc3b      	bgt.n	800a0d6 <BackEndTask+0x30a>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 800a05e:	00e3      	lsls	r3, r4, #3
 800a060:	1b1b      	subs	r3, r3, r4
 800a062:	00d8      	lsls	r0, r3, #3
 800a064:	4b39      	ldr	r3, [pc, #228]	; (800a14c <BackEndTask+0x380>)
 800a066:	18c0      	adds	r0, r0, r3
 800a068:	0063      	lsls	r3, r4, #1
 800a06a:	191b      	adds	r3, r3, r4
 800a06c:	019f      	lsls	r7, r3, #6
 800a06e:	18bf      	adds	r7, r7, r2
 800a070:	492b      	ldr	r1, [pc, #172]	; (800a120 <BackEndTask+0x354>)
 800a072:	1879      	adds	r1, r7, r1
 800a074:	0032      	movs	r2, r6
 800a076:	f00b fa70 	bl	801555a <memcpy>
						if(packetStart < packetEnd){
 800a07a:	4b2a      	ldr	r3, [pc, #168]	; (800a124 <BackEndTask+0x358>)
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	4b31      	ldr	r3, [pc, #196]	; (800a144 <BackEndTask+0x378>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	429a      	cmp	r2, r3
 800a084:	da6c      	bge.n	800a160 <BackEndTask+0x394>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 800a086:	0061      	lsls	r1, r4, #1
 800a088:	1909      	adds	r1, r1, r4
 800a08a:	018b      	lsls	r3, r1, #6
 800a08c:	189b      	adds	r3, r3, r2
 800a08e:	4824      	ldr	r0, [pc, #144]	; (800a120 <BackEndTask+0x354>)
 800a090:	1818      	adds	r0, r3, r0
 800a092:	4b26      	ldr	r3, [pc, #152]	; (800a12c <BackEndTask+0x360>)
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	3204      	adds	r2, #4
 800a098:	2100      	movs	r1, #0
 800a09a:	f00b fa67 	bl	801556c <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 800a09e:	4b29      	ldr	r3, [pc, #164]	; (800a144 <BackEndTask+0x378>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2bbf      	cmp	r3, #191	; 0xbf
 800a0a4:	d075      	beq.n	800a192 <BackEndTask+0x3c6>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	4a1c      	ldr	r2, [pc, #112]	; (800a11c <BackEndTask+0x350>)
 800a0aa:	5513      	strb	r3, [r2, r4]
						++acceptedMsg;
 800a0ac:	4a2a      	ldr	r2, [pc, #168]	; (800a158 <BackEndTask+0x38c>)
 800a0ae:	8813      	ldrh	r3, [r2, #0]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	8013      	strh	r3, [r2, #0]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 800a0b4:	00e3      	lsls	r3, r4, #3
 800a0b6:	1b1c      	subs	r4, r3, r4
 800a0b8:	00e3      	lsls	r3, r4, #3
 800a0ba:	4a24      	ldr	r2, [pc, #144]	; (800a14c <BackEndTask+0x380>)
 800a0bc:	5c9b      	ldrb	r3, [r3, r2]
 800a0be:	4a27      	ldr	r2, [pc, #156]	; (800a15c <BackEndTask+0x390>)
 800a0c0:	7812      	ldrb	r2, [r2, #0]
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d003      	beq.n	800a0ce <BackEndTask+0x302>
 800a0c6:	2bff      	cmp	r3, #255	; 0xff
 800a0c8:	d001      	beq.n	800a0ce <BackEndTask+0x302>
 800a0ca:	2bfe      	cmp	r3, #254	; 0xfe
 800a0cc:	d165      	bne.n	800a19a <BackEndTask+0x3ce>
							NotifyMessagingTask(port);
 800a0ce:	0028      	movs	r0, r5
 800a0d0:	f7ff fb0c 	bl	80096ec <NotifyMessagingTask>
 800a0d4:	e08e      	b.n	800a1f4 <BackEndTask+0x428>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 800a0d6:	00e3      	lsls	r3, r4, #3
 800a0d8:	469a      	mov	sl, r3
 800a0da:	1b1b      	subs	r3, r3, r4
 800a0dc:	00d8      	lsls	r0, r3, #3
 800a0de:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <BackEndTask+0x380>)
 800a0e0:	469b      	mov	fp, r3
 800a0e2:	4458      	add	r0, fp
 800a0e4:	0063      	lsls	r3, r4, #1
 800a0e6:	4699      	mov	r9, r3
 800a0e8:	1919      	adds	r1, r3, r4
 800a0ea:	018b      	lsls	r3, r1, #6
 800a0ec:	189b      	adds	r3, r3, r2
 800a0ee:	490c      	ldr	r1, [pc, #48]	; (800a120 <BackEndTask+0x354>)
 800a0f0:	1859      	adds	r1, r3, r1
							MSG_RX_BUF_SIZE - parseStart);
 800a0f2:	27c0      	movs	r7, #192	; 0xc0
 800a0f4:	1abf      	subs	r7, r7, r2
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 800a0f6:	003a      	movs	r2, r7
 800a0f8:	f00b fa2f 	bl	801555a <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 800a0fc:	4653      	mov	r3, sl
 800a0fe:	1b1b      	subs	r3, r3, r4
 800a100:	00d8      	lsls	r0, r3, #3
 800a102:	19c0      	adds	r0, r0, r7
 800a104:	4458      	add	r0, fp
 800a106:	464b      	mov	r3, r9
 800a108:	191b      	adds	r3, r3, r4
 800a10a:	0199      	lsls	r1, r3, #6
 800a10c:	4b04      	ldr	r3, [pc, #16]	; (800a120 <BackEndTask+0x354>)
 800a10e:	469c      	mov	ip, r3
 800a110:	4461      	add	r1, ip
 800a112:	1bf2      	subs	r2, r6, r7
 800a114:	f00b fa21 	bl	801555a <memcpy>
 800a118:	e7af      	b.n	800a07a <BackEndTask+0x2ae>
 800a11a:	46c0      	nop			; (mov r8, r8)
 800a11c:	20001688 	.word	0x20001688
 800a120:	200012c8 	.word	0x200012c8
 800a124:	20001964 	.word	0x20001964
 800a128:	200019c0 	.word	0x200019c0
 800a12c:	20001960 	.word	0x20001960
 800a130:	20001968 	.word	0x20001968
 800a134:	2000704c 	.word	0x2000704c
 800a138:	20000aa8 	.word	0x20000aa8
 800a13c:	200010ec 	.word	0x200010ec
 800a140:	2000172c 	.word	0x2000172c
 800a144:	2000195c 	.word	0x2000195c
 800a148:	20001690 	.word	0x20001690
 800a14c:	20000d3c 	.word	0x20000d3c
 800a150:	200019bc 	.word	0x200019bc
 800a154:	20000f2c 	.word	0x20000f2c
 800a158:	20001804 	.word	0x20001804
 800a15c:	20001072 	.word	0x20001072
							memset(&UARTRxBuf[port - 1][packetStart],0,
 800a160:	0066      	lsls	r6, r4, #1
 800a162:	1931      	adds	r1, r6, r4
 800a164:	018b      	lsls	r3, r1, #6
 800a166:	189b      	adds	r3, r3, r2
 800a168:	4f32      	ldr	r7, [pc, #200]	; (800a234 <BackEndTask+0x468>)
 800a16a:	19d8      	adds	r0, r3, r7
							MSG_RX_BUF_SIZE - packetStart);
 800a16c:	23c0      	movs	r3, #192	; 0xc0
 800a16e:	1a9b      	subs	r3, r3, r2
 800a170:	4699      	mov	r9, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 800a172:	001a      	movs	r2, r3
 800a174:	2100      	movs	r1, #0
 800a176:	f00b f9f9 	bl	801556c <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800a17a:	1936      	adds	r6, r6, r4
 800a17c:	01b0      	lsls	r0, r6, #6
 800a17e:	19c0      	adds	r0, r0, r7
 800a180:	4b2d      	ldr	r3, [pc, #180]	; (800a238 <BackEndTask+0x46c>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	3204      	adds	r2, #4
 800a186:	464b      	mov	r3, r9
 800a188:	1ad2      	subs	r2, r2, r3
 800a18a:	2100      	movs	r1, #0
 800a18c:	f00b f9ee 	bl	801556c <memset>
 800a190:	e785      	b.n	800a09e <BackEndTask+0x2d2>
							UARTRxBufIndex[port - 1] =0;
 800a192:	4b2a      	ldr	r3, [pc, #168]	; (800a23c <BackEndTask+0x470>)
 800a194:	2200      	movs	r2, #0
 800a196:	551a      	strb	r2, [r3, r4]
 800a198:	e788      	b.n	800a0ac <BackEndTask+0x2e0>
							ForwardReceivedMessage(port);
 800a19a:	0028      	movs	r0, r5
 800a19c:	f7ff fcd2 	bl	8009b44 <ForwardReceivedMessage>
						continue; // Inspect the next port circular buffer
 800a1a0:	e028      	b.n	800a1f4 <BackEndTask+0x428>
					memset(&UARTRxBuf[port - 1][packetStart],0,
 800a1a2:	0067      	lsls	r7, r4, #1
 800a1a4:	193a      	adds	r2, r7, r4
 800a1a6:	0190      	lsls	r0, r2, #6
 800a1a8:	18c0      	adds	r0, r0, r3
 800a1aa:	4a22      	ldr	r2, [pc, #136]	; (800a234 <BackEndTask+0x468>)
 800a1ac:	4691      	mov	r9, r2
 800a1ae:	4448      	add	r0, r9
					MSG_RX_BUF_SIZE - packetStart);
 800a1b0:	22c0      	movs	r2, #192	; 0xc0
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	469a      	mov	sl, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 800a1b6:	001a      	movs	r2, r3
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	f00b f9d7 	bl	801556c <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800a1be:	193f      	adds	r7, r7, r4
 800a1c0:	01b8      	lsls	r0, r7, #6
 800a1c2:	4448      	add	r0, r9
 800a1c4:	4b1c      	ldr	r3, [pc, #112]	; (800a238 <BackEndTask+0x46c>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	3204      	adds	r2, #4
 800a1ca:	4653      	mov	r3, sl
 800a1cc:	1ad2      	subs	r2, r2, r3
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	f00b f9cc 	bl	801556c <memset>
 800a1d4:	e6ed      	b.n	8009fb2 <BackEndTask+0x1e6>
					UARTRxBufIndex[port - 1] =0;
 800a1d6:	4b19      	ldr	r3, [pc, #100]	; (800a23c <BackEndTask+0x470>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	551a      	strb	r2, [r3, r4]
 800a1dc:	e6f1      	b.n	8009fc2 <BackEndTask+0x1f6>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 800a1de:	0028      	movs	r0, r5
 800a1e0:	f005 fc34 	bl	800fa4c <GetUart>
 800a1e4:	0063      	lsls	r3, r4, #1
 800a1e6:	191c      	adds	r4, r3, r4
 800a1e8:	01a1      	lsls	r1, r4, #6
 800a1ea:	4b12      	ldr	r3, [pc, #72]	; (800a234 <BackEndTask+0x468>)
 800a1ec:	18c9      	adds	r1, r1, r3
 800a1ee:	22c0      	movs	r2, #192	; 0xc0
 800a1f0:	f00a fa80 	bl	80146f4 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 800a1f4:	3501      	adds	r5, #1
 800a1f6:	b2ed      	uxtb	r5, r5
 800a1f8:	2d05      	cmp	r5, #5
 800a1fa:	d817      	bhi.n	800a22c <BackEndTask+0x460>
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 800a1fc:	002e      	movs	r6, r5
 800a1fe:	4b10      	ldr	r3, [pc, #64]	; (800a240 <BackEndTask+0x474>)
 800a200:	5d5b      	ldrb	r3, [r3, r5]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d800      	bhi.n	800a208 <BackEndTask+0x43c>
 800a206:	e5ea      	b.n	8009dde <BackEndTask+0x12>
			if(MsgDMAStopped[port - 1] == true){
 800a208:	1e74      	subs	r4, r6, #1
 800a20a:	4b0e      	ldr	r3, [pc, #56]	; (800a244 <BackEndTask+0x478>)
 800a20c:	5d1b      	ldrb	r3, [r3, r4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0f0      	beq.n	800a1f4 <BackEndTask+0x428>
				MsgDMAStopped[port - 1] = false;
 800a212:	4b0c      	ldr	r3, [pc, #48]	; (800a244 <BackEndTask+0x478>)
 800a214:	2200      	movs	r2, #0
 800a216:	551a      	strb	r2, [r3, r4]
				if(portStatus[port] == OVERRUN)
 800a218:	4b09      	ldr	r3, [pc, #36]	; (800a240 <BackEndTask+0x474>)
 800a21a:	5d9b      	ldrb	r3, [r3, r6]
 800a21c:	2b05      	cmp	r3, #5
 800a21e:	d1de      	bne.n	800a1de <BackEndTask+0x412>
					portStatus[port] =FREE;
 800a220:	4b07      	ldr	r3, [pc, #28]	; (800a240 <BackEndTask+0x474>)
 800a222:	559a      	strb	r2, [r3, r6]
 800a224:	e7db      	b.n	800a1de <BackEndTask+0x412>
					emptyBuffer = false;
 800a226:	2300      	movs	r3, #0
 800a228:	4698      	mov	r8, r3
 800a22a:	e7e3      	b.n	800a1f4 <BackEndTask+0x428>
			}
		}

		taskYIELD();
 800a22c:	f007 fc4a 	bl	8011ac4 <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 800a230:	2501      	movs	r5, #1
 800a232:	e7e1      	b.n	800a1f8 <BackEndTask+0x42c>
 800a234:	200012c8 	.word	0x200012c8
 800a238:	20001960 	.word	0x20001960
 800a23c:	20001688 	.word	0x20001688
 800a240:	200010ec 	.word	0x200010ec
 800a244:	200012c0 	.word	0x200012c0

0800a248 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800a248:	2001      	movs	r0, #1
 800a24a:	4770      	bx	lr

0800a24c <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800a24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a24e:	46de      	mov	lr, fp
 800a250:	4657      	mov	r7, sl
 800a252:	464e      	mov	r6, r9
 800a254:	4645      	mov	r5, r8
 800a256:	b5e0      	push	{r5, r6, r7, lr}
 800a258:	b097      	sub	sp, #92	; 0x5c
 800a25a:	9006      	str	r0, [sp, #24]
	port =(int8_t )(unsigned )argument;
 800a25c:	b2c3      	uxtb	r3, r0
 800a25e:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
 800a264:	469b      	mov	fp, r3
 800a266:	e065      	b.n	800a334 <PxMessagingTask+0xe8>
				longMessage =1;
 800a268:	4add      	ldr	r2, [pc, #884]	; (800a5e0 <PxMessagingTask+0x394>)
 800a26a:	2101      	movs	r1, #1
 800a26c:	7011      	strb	r1, [r2, #0]
 800a26e:	e07b      	b.n	800a368 <PxMessagingTask+0x11c>
				++shift;
 800a270:	2401      	movs	r4, #1
 800a272:	e087      	b.n	800a384 <PxMessagingTask+0x138>
				code =cMessage[port - 1][3 + shift];
 800a274:	1ce1      	adds	r1, r4, #3
 800a276:	00eb      	lsls	r3, r5, #3
 800a278:	1b5b      	subs	r3, r3, r5
 800a27a:	00d8      	lsls	r0, r3, #3
 800a27c:	4bd9      	ldr	r3, [pc, #868]	; (800a5e4 <PxMessagingTask+0x398>)
 800a27e:	181b      	adds	r3, r3, r0
 800a280:	5c5e      	ldrb	r6, [r3, r1]
 800a282:	e09d      	b.n	800a3c0 <PxMessagingTask+0x174>
				BOSMessaging.Acknowledgment =false;
 800a284:	4bd8      	ldr	r3, [pc, #864]	; (800a5e8 <PxMessagingTask+0x39c>)
 800a286:	2200      	movs	r2, #0
 800a288:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800a28a:	212c      	movs	r1, #44	; 0x2c
 800a28c:	9805      	ldr	r0, [sp, #20]
 800a28e:	f7ff fcc1 	bl	8009c14 <SendMessageToModule>
 800a292:	e098      	b.n	800a3c6 <PxMessagingTask+0x17a>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a294:	2bfc      	cmp	r3, #252	; 0xfc
 800a296:	d805      	bhi.n	800a2a4 <PxMessagingTask+0x58>
 800a298:	4bd4      	ldr	r3, [pc, #848]	; (800a5ec <PxMessagingTask+0x3a0>)
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	454b      	cmp	r3, r9
 800a29e:	d001      	beq.n	800a2a4 <PxMessagingTask+0x58>
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d020      	beq.n	800a2e6 <PxMessagingTask+0x9a>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a2a4:	464b      	mov	r3, r9
 800a2a6:	2bff      	cmp	r3, #255	; 0xff
 800a2a8:	d100      	bne.n	800a2ac <PxMessagingTask+0x60>
 800a2aa:	e0bf      	b.n	800a42c <PxMessagingTask+0x1e0>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a2ac:	464b      	mov	r3, r9
 800a2ae:	2bff      	cmp	r3, #255	; 0xff
 800a2b0:	d100      	bne.n	800a2b4 <PxMessagingTask+0x68>
 800a2b2:	e0de      	b.n	800a472 <PxMessagingTask+0x226>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a2b4:	464b      	mov	r3, r9
 800a2b6:	2bfe      	cmp	r3, #254	; 0xfe
 800a2b8:	d100      	bne.n	800a2bc <PxMessagingTask+0x70>
 800a2ba:	e0eb      	b.n	800a494 <PxMessagingTask+0x248>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a2bc:	464b      	mov	r3, r9
 800a2be:	2bfe      	cmp	r3, #254	; 0xfe
 800a2c0:	d100      	bne.n	800a2c4 <PxMessagingTask+0x78>
 800a2c2:	e126      	b.n	800a512 <PxMessagingTask+0x2c6>
				shift +=4;
 800a2c4:	3404      	adds	r4, #4
 800a2c6:	b2e4      	uxtb	r4, r4
				numOfParams =messageLength[port - 1] - shift;
 800a2c8:	4bc9      	ldr	r3, [pc, #804]	; (800a5f0 <PxMessagingTask+0x3a4>)
 800a2ca:	5d5b      	ldrb	r3, [r3, r5]
 800a2cc:	1b1f      	subs	r7, r3, r4
 800a2ce:	b2ff      	uxtb	r7, r7
				if(result == BOS_OK){
 800a2d0:	465a      	mov	r2, fp
 800a2d2:	2a00      	cmp	r2, #0
 800a2d4:	d110      	bne.n	800a2f8 <PxMessagingTask+0xac>
					switch(code){
 800a2d6:	2e2d      	cmp	r6, #45	; 0x2d
 800a2d8:	d901      	bls.n	800a2de <PxMessagingTask+0x92>
 800a2da:	f001 fc4d 	bl	800bb78 <PxMessagingTask+0x192c>
 800a2de:	00b2      	lsls	r2, r6, #2
 800a2e0:	49c4      	ldr	r1, [pc, #784]	; (800a5f4 <PxMessagingTask+0x3a8>)
 800a2e2:	588a      	ldr	r2, [r1, r2]
 800a2e4:	4697      	mov	pc, r2
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a2e6:	2e10      	cmp	r6, #16
 800a2e8:	d17b      	bne.n	800a3e2 <PxMessagingTask+0x196>
 800a2ea:	e7db      	b.n	800a2a4 <PxMessagingTask+0x58>
				if(code == CODE_UPDATE){ // Remote bootloader update
 800a2ec:	2e19      	cmp	r6, #25
 800a2ee:	d100      	bne.n	800a2f2 <PxMessagingTask+0xa6>
 800a2f0:	e083      	b.n	800a3fa <PxMessagingTask+0x1ae>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800a2f2:	2e1a      	cmp	r6, #26
 800a2f4:	d100      	bne.n	800a2f8 <PxMessagingTask+0xac>
 800a2f6:	e08a      	b.n	800a40e <PxMessagingTask+0x1c2>
		if(result == BOS_ERR_UnknownMessage){
 800a2f8:	465b      	mov	r3, fp
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d101      	bne.n	800a302 <PxMessagingTask+0xb6>
 800a2fe:	f001 fc51 	bl	800bba4 <PxMessagingTask+0x1958>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a302:	00eb      	lsls	r3, r5, #3
 800a304:	1b5b      	subs	r3, r3, r5
 800a306:	00d8      	lsls	r0, r3, #3
 800a308:	4bb6      	ldr	r3, [pc, #728]	; (800a5e4 <PxMessagingTask+0x398>)
 800a30a:	18c0      	adds	r0, r0, r3
 800a30c:	4cb8      	ldr	r4, [pc, #736]	; (800a5f0 <PxMessagingTask+0x3a4>)
 800a30e:	5d62      	ldrb	r2, [r4, r5]
 800a310:	2100      	movs	r1, #0
 800a312:	f00b f92b 	bl	801556c <memset>
		messageLength[port - 1] =0;
 800a316:	2300      	movs	r3, #0
 800a318:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a31a:	4bb7      	ldr	r3, [pc, #732]	; (800a5f8 <PxMessagingTask+0x3ac>)
 800a31c:	4642      	mov	r2, r8
 800a31e:	5c9b      	ldrb	r3, [r3, r2]
 800a320:	3b02      	subs	r3, #2
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b02      	cmp	r3, #2
 800a326:	d903      	bls.n	800a330 <PxMessagingTask+0xe4>
			portStatus[port] =FREE;
 800a328:	4bb3      	ldr	r3, [pc, #716]	; (800a5f8 <PxMessagingTask+0x3ac>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	4641      	mov	r1, r8
 800a32e:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a330:	f007 fbc8 	bl	8011ac4 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a334:	2101      	movs	r1, #1
 800a336:	4249      	negs	r1, r1
 800a338:	2001      	movs	r0, #1
 800a33a:	f007 f8cf 	bl	80114dc <ulTaskNotifyTake>
 800a33e:	23ff      	movs	r3, #255	; 0xff
 800a340:	9a06      	ldr	r2, [sp, #24]
 800a342:	401a      	ands	r2, r3
 800a344:	4690      	mov	r8, r2
		if(messageLength[port - 1]){
 800a346:	1e55      	subs	r5, r2, #1
 800a348:	4ba9      	ldr	r3, [pc, #676]	; (800a5f0 <PxMessagingTask+0x3a4>)
 800a34a:	5d5b      	ldrb	r3, [r3, r5]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d0d3      	beq.n	800a2f8 <PxMessagingTask+0xac>
			if(cMessage[port - 1][2] >> 7){
 800a350:	00eb      	lsls	r3, r5, #3
 800a352:	1b5b      	subs	r3, r3, r5
 800a354:	00da      	lsls	r2, r3, #3
 800a356:	4ba3      	ldr	r3, [pc, #652]	; (800a5e4 <PxMessagingTask+0x398>)
 800a358:	189b      	adds	r3, r3, r2
 800a35a:	789b      	ldrb	r3, [r3, #2]
 800a35c:	b25a      	sxtb	r2, r3
 800a35e:	2a00      	cmp	r2, #0
 800a360:	db82      	blt.n	800a268 <PxMessagingTask+0x1c>
				longMessage =0;
 800a362:	4a9f      	ldr	r2, [pc, #636]	; (800a5e0 <PxMessagingTask+0x394>)
 800a364:	2100      	movs	r1, #0
 800a366:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 800a368:	499e      	ldr	r1, [pc, #632]	; (800a5e4 <PxMessagingTask+0x398>)
 800a36a:	00ea      	lsls	r2, r5, #3
 800a36c:	1b54      	subs	r4, r2, r5
 800a36e:	00e0      	lsls	r0, r4, #3
 800a370:	5c40      	ldrb	r0, [r0, r1]
 800a372:	4681      	mov	r9, r0
			src =cMessage[port - 1][1];
 800a374:	00e0      	lsls	r0, r4, #3
 800a376:	1809      	adds	r1, r1, r0
 800a378:	784a      	ldrb	r2, [r1, #1]
 800a37a:	9205      	str	r2, [sp, #20]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 800a37c:	07da      	lsls	r2, r3, #31
 800a37e:	d500      	bpl.n	800a382 <PxMessagingTask+0x136>
 800a380:	e776      	b.n	800a270 <PxMessagingTask+0x24>
			shift =0;
 800a382:	2400      	movs	r4, #0
			extendCode =(cMessage[port - 1][2] >> 1) & 0x01; 					// 2nd bit Extended code
 800a384:	085f      	lsrs	r7, r3, #1
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a386:	0899      	lsrs	r1, r3, #2
 800a388:	2203      	movs	r2, #3
 800a38a:	400a      	ands	r2, r1
 800a38c:	4996      	ldr	r1, [pc, #600]	; (800a5e8 <PxMessagingTask+0x39c>)
 800a38e:	704a      	strb	r2, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800a390:	091a      	lsrs	r2, r3, #4
 800a392:	2601      	movs	r6, #1
 800a394:	4032      	ands	r2, r6
 800a396:	70ca      	strb	r2, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800a398:	2060      	movs	r0, #96	; 0x60
 800a39a:	4003      	ands	r3, r0
 800a39c:	700b      	strb	r3, [r1, #0]
			if(extendCode == true){
 800a39e:	423e      	tst	r6, r7
 800a3a0:	d100      	bne.n	800a3a4 <PxMessagingTask+0x158>
 800a3a2:	e767      	b.n	800a274 <PxMessagingTask+0x28>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a3a4:	1d20      	adds	r0, r4, #4
 800a3a6:	00e9      	lsls	r1, r5, #3
 800a3a8:	1b49      	subs	r1, r1, r5
 800a3aa:	00cb      	lsls	r3, r1, #3
 800a3ac:	498d      	ldr	r1, [pc, #564]	; (800a5e4 <PxMessagingTask+0x398>)
 800a3ae:	18cb      	adds	r3, r1, r3
 800a3b0:	5c1e      	ldrb	r6, [r3, r0]
 800a3b2:	0236      	lsls	r6, r6, #8
 800a3b4:	1ce1      	adds	r1, r4, #3
 800a3b6:	5c5b      	ldrb	r3, [r3, r1]
 800a3b8:	18f6      	adds	r6, r6, r3
 800a3ba:	b2b6      	uxth	r6, r6
				++shift;
 800a3bc:	3401      	adds	r4, #1
 800a3be:	b2e4      	uxtb	r4, r4
			if(true == BOSMessaging.received_Acknowledgment){
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	d000      	beq.n	800a3c6 <PxMessagingTask+0x17a>
 800a3c4:	e75e      	b.n	800a284 <PxMessagingTask+0x38>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a3c6:	464b      	mov	r3, r9
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2bfc      	cmp	r3, #252	; 0xfc
 800a3ce:	d900      	bls.n	800a3d2 <PxMessagingTask+0x186>
 800a3d0:	e760      	b.n	800a294 <PxMessagingTask+0x48>
 800a3d2:	4a86      	ldr	r2, [pc, #536]	; (800a5ec <PxMessagingTask+0x3a0>)
 800a3d4:	7812      	ldrb	r2, [r2, #0]
 800a3d6:	454a      	cmp	r2, r9
 800a3d8:	d100      	bne.n	800a3dc <PxMessagingTask+0x190>
 800a3da:	e75b      	b.n	800a294 <PxMessagingTask+0x48>
 800a3dc:	2a01      	cmp	r2, #1
 800a3de:	d100      	bne.n	800a3e2 <PxMessagingTask+0x196>
 800a3e0:	e758      	b.n	800a294 <PxMessagingTask+0x48>
				ForwardReceivedMessage(port);
 800a3e2:	9807      	ldr	r0, [sp, #28]
 800a3e4:	f7ff fbae 	bl	8009b44 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800a3e8:	4b7f      	ldr	r3, [pc, #508]	; (800a5e8 <PxMessagingTask+0x39c>)
 800a3ea:	785b      	ldrb	r3, [r3, #1]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d100      	bne.n	800a3f2 <PxMessagingTask+0x1a6>
 800a3f0:	e77c      	b.n	800a2ec <PxMessagingTask+0xa0>
					indMode =IND_SHORT_BLINK;
 800a3f2:	4b82      	ldr	r3, [pc, #520]	; (800a5fc <PxMessagingTask+0x3b0>)
 800a3f4:	2203      	movs	r2, #3
 800a3f6:	701a      	strb	r2, [r3, #0]
 800a3f8:	e778      	b.n	800a2ec <PxMessagingTask+0xa0>
					Delay_ms(100);
 800a3fa:	2064      	movs	r0, #100	; 0x64
 800a3fc:	f007 fcf4 	bl	8011de8 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800a400:	2300      	movs	r3, #0
 800a402:	9a07      	ldr	r2, [sp, #28]
 800a404:	4649      	mov	r1, r9
 800a406:	9805      	ldr	r0, [sp, #20]
 800a408:	f7f9 fe44 	bl	8004094 <remoteBootloaderUpdate>
 800a40c:	e774      	b.n	800a2f8 <PxMessagingTask+0xac>
					Delay_ms(100);
 800a40e:	2064      	movs	r0, #100	; 0x64
 800a410:	f007 fcea 	bl	8011de8 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800a414:	00eb      	lsls	r3, r5, #3
 800a416:	1b5b      	subs	r3, r3, r5
 800a418:	00da      	lsls	r2, r3, #3
 800a41a:	4b72      	ldr	r3, [pc, #456]	; (800a5e4 <PxMessagingTask+0x398>)
 800a41c:	189b      	adds	r3, r3, r2
 800a41e:	5d1b      	ldrb	r3, [r3, r4]
 800a420:	9a07      	ldr	r2, [sp, #28]
 800a422:	4649      	mov	r1, r9
 800a424:	9805      	ldr	r0, [sp, #20]
 800a426:	f7f9 fe35 	bl	8004094 <remoteBootloaderUpdate>
 800a42a:	e765      	b.n	800a2f8 <PxMessagingTask+0xac>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a42c:	4b70      	ldr	r3, [pc, #448]	; (800a5f0 <PxMessagingTask+0x3a4>)
 800a42e:	5d5a      	ldrb	r2, [r3, r5]
 800a430:	3a01      	subs	r2, #1
 800a432:	00eb      	lsls	r3, r5, #3
 800a434:	1b5b      	subs	r3, r3, r5
 800a436:	00d9      	lsls	r1, r3, #3
 800a438:	4b6a      	ldr	r3, [pc, #424]	; (800a5e4 <PxMessagingTask+0x398>)
 800a43a:	185b      	adds	r3, r3, r1
 800a43c:	5c9b      	ldrb	r3, [r3, r2]
 800a43e:	4a70      	ldr	r2, [pc, #448]	; (800a600 <PxMessagingTask+0x3b4>)
 800a440:	7812      	ldrb	r2, [r2, #0]
 800a442:	4293      	cmp	r3, r2
 800a444:	d100      	bne.n	800a448 <PxMessagingTask+0x1fc>
 800a446:	e731      	b.n	800a2ac <PxMessagingTask+0x60>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a448:	4a6d      	ldr	r2, [pc, #436]	; (800a600 <PxMessagingTask+0x3b4>)
 800a44a:	7013      	strb	r3, [r2, #0]
 800a44c:	4a6d      	ldr	r2, [pc, #436]	; (800a604 <PxMessagingTask+0x3b8>)
 800a44e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a450:	9907      	ldr	r1, [sp, #28]
 800a452:	20ff      	movs	r0, #255	; 0xff
 800a454:	f7ff fb96 	bl	8009b84 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a458:	4b65      	ldr	r3, [pc, #404]	; (800a5f0 <PxMessagingTask+0x3a4>)
 800a45a:	5d5a      	ldrb	r2, [r3, r5]
 800a45c:	3a01      	subs	r2, #1
 800a45e:	00eb      	lsls	r3, r5, #3
 800a460:	1b5b      	subs	r3, r3, r5
 800a462:	00d9      	lsls	r1, r3, #3
 800a464:	4b5f      	ldr	r3, [pc, #380]	; (800a5e4 <PxMessagingTask+0x398>)
 800a466:	185b      	adds	r3, r3, r1
 800a468:	2100      	movs	r1, #0
 800a46a:	5499      	strb	r1, [r3, r2]
					result =BOS_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	469b      	mov	fp, r3
 800a470:	e720      	b.n	800a2b4 <PxMessagingTask+0x68>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a472:	4b5f      	ldr	r3, [pc, #380]	; (800a5f0 <PxMessagingTask+0x3a4>)
 800a474:	5d5a      	ldrb	r2, [r3, r5]
 800a476:	3a01      	subs	r2, #1
 800a478:	00eb      	lsls	r3, r5, #3
 800a47a:	1b5b      	subs	r3, r3, r5
 800a47c:	00d9      	lsls	r1, r3, #3
 800a47e:	4b59      	ldr	r3, [pc, #356]	; (800a5e4 <PxMessagingTask+0x398>)
 800a480:	185b      	adds	r3, r3, r1
 800a482:	5c9a      	ldrb	r2, [r3, r2]
 800a484:	4b5e      	ldr	r3, [pc, #376]	; (800a600 <PxMessagingTask+0x3b4>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d000      	beq.n	800a48e <PxMessagingTask+0x242>
 800a48c:	e712      	b.n	800a2b4 <PxMessagingTask+0x68>
					result =BOS_ERR_MSG_Reflection;
 800a48e:	2303      	movs	r3, #3
 800a490:	469b      	mov	fp, r3
 800a492:	e70f      	b.n	800a2b4 <PxMessagingTask+0x68>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a494:	4b56      	ldr	r3, [pc, #344]	; (800a5f0 <PxMessagingTask+0x3a4>)
 800a496:	5d5a      	ldrb	r2, [r3, r5]
 800a498:	3a01      	subs	r2, #1
 800a49a:	00eb      	lsls	r3, r5, #3
 800a49c:	1b5b      	subs	r3, r3, r5
 800a49e:	00d9      	lsls	r1, r3, #3
 800a4a0:	4b50      	ldr	r3, [pc, #320]	; (800a5e4 <PxMessagingTask+0x398>)
 800a4a2:	185b      	adds	r3, r3, r1
 800a4a4:	5c9b      	ldrb	r3, [r3, r2]
 800a4a6:	4a56      	ldr	r2, [pc, #344]	; (800a600 <PxMessagingTask+0x3b4>)
 800a4a8:	7812      	ldrb	r2, [r2, #0]
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d100      	bne.n	800a4b0 <PxMessagingTask+0x264>
 800a4ae:	e705      	b.n	800a2bc <PxMessagingTask+0x70>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a4b0:	4a53      	ldr	r2, [pc, #332]	; (800a600 <PxMessagingTask+0x3b4>)
 800a4b2:	7013      	strb	r3, [r2, #0]
 800a4b4:	4a53      	ldr	r2, [pc, #332]	; (800a604 <PxMessagingTask+0x3b8>)
 800a4b6:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800a4b8:	9907      	ldr	r1, [sp, #28]
 800a4ba:	20fe      	movs	r0, #254	; 0xfe
 800a4bc:	f7ff fb62 	bl	8009b84 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a4c0:	4b4b      	ldr	r3, [pc, #300]	; (800a5f0 <PxMessagingTask+0x3a4>)
 800a4c2:	5d58      	ldrb	r0, [r3, r5]
 800a4c4:	1e41      	subs	r1, r0, #1
 800a4c6:	00ea      	lsls	r2, r5, #3
 800a4c8:	1b52      	subs	r2, r2, r5
 800a4ca:	00d7      	lsls	r7, r2, #3
 800a4cc:	4b45      	ldr	r3, [pc, #276]	; (800a5e4 <PxMessagingTask+0x398>)
 800a4ce:	19db      	adds	r3, r3, r7
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	545a      	strb	r2, [r3, r1]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800a4d4:	3802      	subs	r0, #2
 800a4d6:	5c1b      	ldrb	r3, [r3, r0]
 800a4d8:	001f      	movs	r7, r3
 800a4da:	46a4      	mov	ip, r4
					for(i =0; i < temp; i++){
 800a4dc:	e001      	b.n	800a4e2 <PxMessagingTask+0x296>
 800a4de:	3201      	adds	r2, #1
 800a4e0:	b2d2      	uxtb	r2, r2
 800a4e2:	42ba      	cmp	r2, r7
 800a4e4:	d210      	bcs.n	800a508 <PxMessagingTask+0x2bc>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800a4e6:	1bc1      	subs	r1, r0, r7
 800a4e8:	1851      	adds	r1, r2, r1
 800a4ea:	00eb      	lsls	r3, r5, #3
 800a4ec:	1b5b      	subs	r3, r3, r5
 800a4ee:	00dc      	lsls	r4, r3, #3
 800a4f0:	4b3c      	ldr	r3, [pc, #240]	; (800a5e4 <PxMessagingTask+0x398>)
 800a4f2:	191b      	adds	r3, r3, r4
 800a4f4:	5c59      	ldrb	r1, [r3, r1]
 800a4f6:	4b3d      	ldr	r3, [pc, #244]	; (800a5ec <PxMessagingTask+0x3a0>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	4299      	cmp	r1, r3
 800a4fc:	d1ef      	bne.n	800a4de <PxMessagingTask+0x292>
 800a4fe:	46ba      	mov	sl, r7
 800a500:	4664      	mov	r4, ip
							result =BOS_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	469b      	mov	fp, r3
 800a506:	e6dd      	b.n	800a2c4 <PxMessagingTask+0x78>
 800a508:	46ba      	mov	sl, r7
 800a50a:	4664      	mov	r4, ip
					result =BOS_ERR_WrongID;
 800a50c:	2366      	movs	r3, #102	; 0x66
 800a50e:	469b      	mov	fp, r3
 800a510:	e6d8      	b.n	800a2c4 <PxMessagingTask+0x78>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a512:	4b37      	ldr	r3, [pc, #220]	; (800a5f0 <PxMessagingTask+0x3a4>)
 800a514:	5d5a      	ldrb	r2, [r3, r5]
 800a516:	3a01      	subs	r2, #1
 800a518:	00eb      	lsls	r3, r5, #3
 800a51a:	1b5b      	subs	r3, r3, r5
 800a51c:	00d9      	lsls	r1, r3, #3
 800a51e:	4b31      	ldr	r3, [pc, #196]	; (800a5e4 <PxMessagingTask+0x398>)
 800a520:	185b      	adds	r3, r3, r1
 800a522:	5c9a      	ldrb	r2, [r3, r2]
 800a524:	4b36      	ldr	r3, [pc, #216]	; (800a600 <PxMessagingTask+0x3b4>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d000      	beq.n	800a52e <PxMessagingTask+0x2e2>
 800a52c:	e6ca      	b.n	800a2c4 <PxMessagingTask+0x78>
					result =BOS_ERR_MSG_Reflection;
 800a52e:	2303      	movs	r3, #3
 800a530:	469b      	mov	fp, r3
 800a532:	e6c7      	b.n	800a2c4 <PxMessagingTask+0x78>
							indMode =IND_PING;
 800a534:	4b31      	ldr	r3, [pc, #196]	; (800a5fc <PxMessagingTask+0x3b0>)
 800a536:	2201      	movs	r2, #1
 800a538:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a53a:	200a      	movs	r0, #10
 800a53c:	f005 fbd8 	bl	800fcf0 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800a540:	4b29      	ldr	r3, [pc, #164]	; (800a5e8 <PxMessagingTask+0x39c>)
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	2b60      	cmp	r3, #96	; 0x60
 800a546:	d002      	beq.n	800a54e <PxMessagingTask+0x302>
 800a548:	2b20      	cmp	r3, #32
 800a54a:	d000      	beq.n	800a54e <PxMessagingTask+0x302>
 800a54c:	e6d4      	b.n	800a2f8 <PxMessagingTask+0xac>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a54e:	2200      	movs	r2, #0
 800a550:	2102      	movs	r1, #2
 800a552:	9805      	ldr	r0, [sp, #20]
 800a554:	f7ff fb5e 	bl	8009c14 <SendMessageToModule>
 800a558:	e6ce      	b.n	800a2f8 <PxMessagingTask+0xac>
							if(!moduleAlias[myID][0])
 800a55a:	4b24      	ldr	r3, [pc, #144]	; (800a5ec <PxMessagingTask+0x3a0>)
 800a55c:	781a      	ldrb	r2, [r3, #0]
 800a55e:	0093      	lsls	r3, r2, #2
 800a560:	189b      	adds	r3, r3, r2
 800a562:	005a      	lsls	r2, r3, #1
 800a564:	4b28      	ldr	r3, [pc, #160]	; (800a608 <PxMessagingTask+0x3bc>)
 800a566:	5cd3      	ldrb	r3, [r2, r3]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d116      	bne.n	800a59a <PxMessagingTask+0x34e>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a56c:	9a05      	ldr	r2, [sp, #20]
 800a56e:	4927      	ldr	r1, [pc, #156]	; (800a60c <PxMessagingTask+0x3c0>)
 800a570:	4827      	ldr	r0, [pc, #156]	; (800a610 <PxMessagingTask+0x3c4>)
 800a572:	f00b f9f5 	bl	8015960 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a576:	4c26      	ldr	r4, [pc, #152]	; (800a610 <PxMessagingTask+0x3c4>)
 800a578:	0020      	movs	r0, r4
 800a57a:	f7f5 fdcd 	bl	8000118 <strlen>
 800a57e:	b282      	uxth	r2, r0
 800a580:	4b24      	ldr	r3, [pc, #144]	; (800a614 <PxMessagingTask+0x3c8>)
 800a582:	7818      	ldrb	r0, [r3, #0]
 800a584:	2301      	movs	r3, #1
 800a586:	425b      	negs	r3, r3
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	3333      	adds	r3, #51	; 0x33
 800a58c:	0021      	movs	r1, r4
 800a58e:	f005 fa7b 	bl	800fa88 <writePxMutex>
							responseStatus =BOS_OK;
 800a592:	4b21      	ldr	r3, [pc, #132]	; (800a618 <PxMessagingTask+0x3cc>)
 800a594:	2200      	movs	r2, #0
 800a596:	701a      	strb	r2, [r3, #0]
							break;
 800a598:	e6ae      	b.n	800a2f8 <PxMessagingTask+0xac>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800a59a:	230a      	movs	r3, #10
 800a59c:	9905      	ldr	r1, [sp, #20]
 800a59e:	434b      	muls	r3, r1
 800a5a0:	4a19      	ldr	r2, [pc, #100]	; (800a608 <PxMessagingTask+0x3bc>)
 800a5a2:	189b      	adds	r3, r3, r2
 800a5a4:	000a      	movs	r2, r1
 800a5a6:	491d      	ldr	r1, [pc, #116]	; (800a61c <PxMessagingTask+0x3d0>)
 800a5a8:	4819      	ldr	r0, [pc, #100]	; (800a610 <PxMessagingTask+0x3c4>)
 800a5aa:	f00b f9d9 	bl	8015960 <sprintf>
 800a5ae:	e7e2      	b.n	800a576 <PxMessagingTask+0x32a>
							IND_ON();
 800a5b0:	2180      	movs	r1, #128	; 0x80
 800a5b2:	2090      	movs	r0, #144	; 0x90
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	0109      	lsls	r1, r1, #4
 800a5b8:	05c0      	lsls	r0, r0, #23
 800a5ba:	f009 f81c 	bl	80135f6 <HAL_GPIO_WritePin>
							break;
 800a5be:	e69b      	b.n	800a2f8 <PxMessagingTask+0xac>
							IND_OFF();
 800a5c0:	2180      	movs	r1, #128	; 0x80
 800a5c2:	2090      	movs	r0, #144	; 0x90
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	0109      	lsls	r1, r1, #4
 800a5c8:	05c0      	lsls	r0, r0, #23
 800a5ca:	f009 f814 	bl	80135f6 <HAL_GPIO_WritePin>
							break;
 800a5ce:	e693      	b.n	800a2f8 <PxMessagingTask+0xac>
							IND_toggle();
 800a5d0:	2180      	movs	r1, #128	; 0x80
 800a5d2:	2090      	movs	r0, #144	; 0x90
 800a5d4:	0109      	lsls	r1, r1, #4
 800a5d6:	05c0      	lsls	r0, r0, #23
 800a5d8:	f009 f813 	bl	8013602 <HAL_GPIO_TogglePin>
							break;
 800a5dc:	e68c      	b.n	800a2f8 <PxMessagingTask+0xac>
 800a5de:	46c0      	nop			; (mov r8, r8)
 800a5e0:	20000ef1 	.word	0x20000ef1
 800a5e4:	20000d3c 	.word	0x20000d3c
 800a5e8:	20006fcc 	.word	0x20006fcc
 800a5ec:	20001072 	.word	0x20001072
 800a5f0:	20000f2c 	.word	0x20000f2c
 800a5f4:	0801c84c 	.word	0x0801c84c
 800a5f8:	200010ec 	.word	0x200010ec
 800a5fc:	20000ef0 	.word	0x20000ef0
 800a600:	20001806 	.word	0x20001806
 800a604:	20000ce8 	.word	0x20000ce8
 800a608:	20000f64 	.word	0x20000f64
 800a60c:	0801b118 	.word	0x0801b118
 800a610:	2000196c 	.word	0x2000196c
 800a614:	20000aa8 	.word	0x20000aa8
 800a618:	20001108 	.word	0x20001108
 800a61c:	0801b12c 	.word	0x0801b12c
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a620:	9b05      	ldr	r3, [sp, #20]
 800a622:	021a      	lsls	r2, r3, #8
 800a624:	b292      	uxth	r2, r2
 800a626:	1ca0      	adds	r0, r4, #2
 800a628:	00eb      	lsls	r3, r5, #3
 800a62a:	1b5b      	subs	r3, r3, r5
 800a62c:	00d9      	lsls	r1, r3, #3
 800a62e:	4bca      	ldr	r3, [pc, #808]	; (800a958 <PxMessagingTask+0x70c>)
 800a630:	1859      	adds	r1, r3, r1
 800a632:	5c0b      	ldrb	r3, [r1, r0]
 800a634:	18d2      	adds	r2, r2, r3
 800a636:	4bc9      	ldr	r3, [pc, #804]	; (800a95c <PxMessagingTask+0x710>)
 800a638:	00a8      	lsls	r0, r5, #2
 800a63a:	521a      	strh	r2, [r3, r0]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a63c:	5d0a      	ldrb	r2, [r1, r4]
 800a63e:	0212      	lsls	r2, r2, #8
 800a640:	3401      	adds	r4, #1
 800a642:	5d09      	ldrb	r1, [r1, r4]
 800a644:	1852      	adds	r2, r2, r1
 800a646:	181b      	adds	r3, r3, r0
 800a648:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 800a64a:	4bc5      	ldr	r3, [pc, #788]	; (800a960 <PxMessagingTask+0x714>)
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	4ac5      	ldr	r2, [pc, #788]	; (800a964 <PxMessagingTask+0x718>)
 800a650:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a652:	0a1b      	lsrs	r3, r3, #8
 800a654:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a656:	9c07      	ldr	r4, [sp, #28]
 800a658:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a65a:	2002      	movs	r0, #2
 800a65c:	f005 fb48 	bl	800fcf0 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a660:	2303      	movs	r3, #3
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	3308      	adds	r3, #8
 800a666:	2200      	movs	r2, #0
 800a668:	2100      	movs	r1, #0
 800a66a:	0020      	movs	r0, r4
 800a66c:	f7ff f87a 	bl	8009764 <SendMessageFromPort>
							break;
 800a670:	e642      	b.n	800a2f8 <PxMessagingTask+0xac>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a672:	9b05      	ldr	r3, [sp, #20]
 800a674:	021a      	lsls	r2, r3, #8
 800a676:	b292      	uxth	r2, r2
 800a678:	1ca1      	adds	r1, r4, #2
 800a67a:	00eb      	lsls	r3, r5, #3
 800a67c:	1b5b      	subs	r3, r3, r5
 800a67e:	00d8      	lsls	r0, r3, #3
 800a680:	4bb5      	ldr	r3, [pc, #724]	; (800a958 <PxMessagingTask+0x70c>)
 800a682:	1818      	adds	r0, r3, r0
 800a684:	5c43      	ldrb	r3, [r0, r1]
 800a686:	18d2      	adds	r2, r2, r3
 800a688:	4bb4      	ldr	r3, [pc, #720]	; (800a95c <PxMessagingTask+0x710>)
 800a68a:	00a9      	lsls	r1, r5, #2
 800a68c:	525a      	strh	r2, [r3, r1]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a68e:	5d02      	ldrb	r2, [r0, r4]
 800a690:	0212      	lsls	r2, r2, #8
 800a692:	3401      	adds	r4, #1
 800a694:	5d00      	ldrb	r0, [r0, r4]
 800a696:	1812      	adds	r2, r2, r0
 800a698:	185b      	adds	r3, r3, r1
 800a69a:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 800a69c:	4bb2      	ldr	r3, [pc, #712]	; (800a968 <PxMessagingTask+0x71c>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	701a      	strb	r2, [r3, #0]
							break;
 800a6a2:	e629      	b.n	800a2f8 <PxMessagingTask+0xac>
							ExploreNeighbors(port);
 800a6a4:	9807      	ldr	r0, [sp, #28]
 800a6a6:	f7f9 fb67 	bl	8003d78 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a6aa:	4bb0      	ldr	r3, [pc, #704]	; (800a96c <PxMessagingTask+0x720>)
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a6b0:	200a      	movs	r0, #10
 800a6b2:	f005 fb1d 	bl	800fcf0 <osDelay>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a6b6:	2401      	movs	r4, #1
							temp =0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	001e      	movs	r6, r3
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a6bc:	e001      	b.n	800a6c2 <PxMessagingTask+0x476>
 800a6be:	3401      	adds	r4, #1
 800a6c0:	b2e4      	uxtb	r4, r4
 800a6c2:	2c05      	cmp	r4, #5
 800a6c4:	d812      	bhi.n	800a6ec <PxMessagingTask+0x4a0>
								if(neighbors[p - 1][0]){
 800a6c6:	1e63      	subs	r3, r4, #1
 800a6c8:	0099      	lsls	r1, r3, #2
 800a6ca:	4aa4      	ldr	r2, [pc, #656]	; (800a95c <PxMessagingTask+0x710>)
 800a6cc:	5a8a      	ldrh	r2, [r1, r2]
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	d0f5      	beq.n	800a6be <PxMessagingTask+0x472>
									messageParams[temp] =p;
 800a6d2:	4aa4      	ldr	r2, [pc, #656]	; (800a964 <PxMessagingTask+0x718>)
 800a6d4:	5594      	strb	r4, [r2, r6]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a6d6:	1c70      	adds	r0, r6, #1
 800a6d8:	000b      	movs	r3, r1
 800a6da:	49a0      	ldr	r1, [pc, #640]	; (800a95c <PxMessagingTask+0x710>)
 800a6dc:	1859      	adds	r1, r3, r1
 800a6de:	1880      	adds	r0, r0, r2
 800a6e0:	2204      	movs	r2, #4
 800a6e2:	f00a ff3a 	bl	801555a <memcpy>
									temp +=5;
 800a6e6:	3605      	adds	r6, #5
 800a6e8:	b2f6      	uxtb	r6, r6
 800a6ea:	e7e8      	b.n	800a6be <PxMessagingTask+0x472>
 800a6ec:	46b2      	mov	sl, r6
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a6ee:	b2b2      	uxth	r2, r6
 800a6f0:	210d      	movs	r1, #13
 800a6f2:	9805      	ldr	r0, [sp, #20]
 800a6f4:	f7ff fa8e 	bl	8009c14 <SendMessageToModule>
							break;
 800a6f8:	e5fe      	b.n	800a2f8 <PxMessagingTask+0xac>
							temp =numOfParams / 5;
 800a6fa:	2105      	movs	r1, #5
 800a6fc:	0038      	movs	r0, r7
 800a6fe:	f7f5 fd27 	bl	8000150 <__udivsi3>
 800a702:	b2c3      	uxtb	r3, r0
 800a704:	469a      	mov	sl, r3
							for(uint8_t k =0; k < temp; k++){
 800a706:	2600      	movs	r6, #0
 800a708:	e019      	b.n	800a73e <PxMessagingTask+0x4f2>
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a70a:	00b3      	lsls	r3, r6, #2
 800a70c:	199b      	adds	r3, r3, r6
 800a70e:	18e2      	adds	r2, r4, r3
 800a710:	4694      	mov	ip, r2
 800a712:	4991      	ldr	r1, [pc, #580]	; (800a958 <PxMessagingTask+0x70c>)
 800a714:	00ea      	lsls	r2, r5, #3
 800a716:	1b57      	subs	r7, r2, r5
 800a718:	00f8      	lsls	r0, r7, #3
 800a71a:	1808      	adds	r0, r1, r0
 800a71c:	4667      	mov	r7, ip
 800a71e:	5dc0      	ldrb	r0, [r0, r7]
 800a720:	3801      	subs	r0, #1
 800a722:	0080      	lsls	r0, r0, #2
 800a724:	4f92      	ldr	r7, [pc, #584]	; (800a970 <PxMessagingTask+0x724>)
 800a726:	19c0      	adds	r0, r0, r7
 800a728:	1c67      	adds	r7, r4, #1
 800a72a:	19df      	adds	r7, r3, r7
 800a72c:	1b52      	subs	r2, r2, r5
 800a72e:	00d3      	lsls	r3, r2, #3
 800a730:	19db      	adds	r3, r3, r7
 800a732:	1859      	adds	r1, r3, r1
 800a734:	2204      	movs	r2, #4
 800a736:	f00a ff10 	bl	801555a <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800a73a:	3601      	adds	r6, #1
 800a73c:	b2f6      	uxtb	r6, r6
 800a73e:	4556      	cmp	r6, sl
 800a740:	d3e3      	bcc.n	800a70a <PxMessagingTask+0x4be>
							responseStatus =BOS_OK;
 800a742:	4b89      	ldr	r3, [pc, #548]	; (800a968 <PxMessagingTask+0x71c>)
 800a744:	2200      	movs	r2, #0
 800a746:	701a      	strb	r2, [r3, #0]
							break;
 800a748:	e5d6      	b.n	800a2f8 <PxMessagingTask+0xac>
								if(p != port)
 800a74a:	9b07      	ldr	r3, [sp, #28]
 800a74c:	429e      	cmp	r6, r3
 800a74e:	d00c      	beq.n	800a76a <PxMessagingTask+0x51e>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a750:	0030      	movs	r0, r6
 800a752:	f005 f97b 	bl	800fa4c <GetUart>
 800a756:	19a2      	adds	r2, r4, r6
 800a758:	3a01      	subs	r2, #1
 800a75a:	00eb      	lsls	r3, r5, #3
 800a75c:	1b5b      	subs	r3, r3, r5
 800a75e:	00d9      	lsls	r1, r3, #3
 800a760:	4b7d      	ldr	r3, [pc, #500]	; (800a958 <PxMessagingTask+0x70c>)
 800a762:	185b      	adds	r3, r3, r1
 800a764:	5c99      	ldrb	r1, [r3, r2]
 800a766:	f005 fa09 	bl	800fb7c <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a76a:	3601      	adds	r6, #1
 800a76c:	b2f6      	uxtb	r6, r6
 800a76e:	2e05      	cmp	r6, #5
 800a770:	d9eb      	bls.n	800a74a <PxMessagingTask+0x4fe>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a772:	9807      	ldr	r0, [sp, #28]
 800a774:	f005 f96a 	bl	800fa4c <GetUart>
 800a778:	340a      	adds	r4, #10
 800a77a:	00eb      	lsls	r3, r5, #3
 800a77c:	1b5b      	subs	r3, r3, r5
 800a77e:	00da      	lsls	r2, r3, #3
 800a780:	4b75      	ldr	r3, [pc, #468]	; (800a958 <PxMessagingTask+0x70c>)
 800a782:	189b      	adds	r3, r3, r2
 800a784:	5d19      	ldrb	r1, [r3, r4]
 800a786:	f005 f9f9 	bl	800fb7c <SwapUartPins>
							break;
 800a78a:	e5b5      	b.n	800a2f8 <PxMessagingTask+0xac>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a78c:	2601      	movs	r6, #1
 800a78e:	e7ee      	b.n	800a76e <PxMessagingTask+0x522>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a790:	00eb      	lsls	r3, r5, #3
 800a792:	1b5b      	subs	r3, r3, r5
 800a794:	00da      	lsls	r2, r3, #3
 800a796:	4b70      	ldr	r3, [pc, #448]	; (800a958 <PxMessagingTask+0x70c>)
 800a798:	189b      	adds	r3, r3, r2
 800a79a:	5d1b      	ldrb	r3, [r3, r4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d108      	bne.n	800a7b2 <PxMessagingTask+0x566>
								myID =cMessage[port - 1][1 + shift];
 800a7a0:	3401      	adds	r4, #1
 800a7a2:	2238      	movs	r2, #56	; 0x38
 800a7a4:	436a      	muls	r2, r5
 800a7a6:	4b6c      	ldr	r3, [pc, #432]	; (800a958 <PxMessagingTask+0x70c>)
 800a7a8:	189b      	adds	r3, r3, r2
 800a7aa:	5d1a      	ldrb	r2, [r3, r4]
 800a7ac:	4b71      	ldr	r3, [pc, #452]	; (800a974 <PxMessagingTask+0x728>)
 800a7ae:	701a      	strb	r2, [r3, #0]
 800a7b0:	e5a2      	b.n	800a2f8 <PxMessagingTask+0xac>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d000      	beq.n	800a7b8 <PxMessagingTask+0x56c>
 800a7b6:	e59f      	b.n	800a2f8 <PxMessagingTask+0xac>
								messageParams[0] =0; /* change own ID */
 800a7b8:	4a6a      	ldr	r2, [pc, #424]	; (800a964 <PxMessagingTask+0x718>)
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	7011      	strb	r1, [r2, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a7be:	1c60      	adds	r0, r4, #1
 800a7c0:	3337      	adds	r3, #55	; 0x37
 800a7c2:	436b      	muls	r3, r5
 800a7c4:	4e64      	ldr	r6, [pc, #400]	; (800a958 <PxMessagingTask+0x70c>)
 800a7c6:	18f3      	adds	r3, r6, r3
 800a7c8:	5c18      	ldrb	r0, [r3, r0]
 800a7ca:	7050      	strb	r0, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a7cc:	3402      	adds	r4, #2
 800a7ce:	5d18      	ldrb	r0, [r3, r4]
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	330d      	adds	r3, #13
 800a7d6:	000a      	movs	r2, r1
 800a7d8:	f7fe ffc4 	bl	8009764 <SendMessageFromPort>
 800a7dc:	e58c      	b.n	800a2f8 <PxMessagingTask+0xac>
							if(longMessage){
 800a7de:	4b66      	ldr	r3, [pc, #408]	; (800a978 <PxMessagingTask+0x72c>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00f      	beq.n	800a806 <PxMessagingTask+0x5ba>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a7e6:	4e65      	ldr	r6, [pc, #404]	; (800a97c <PxMessagingTask+0x730>)
 800a7e8:	8833      	ldrh	r3, [r6, #0]
 800a7ea:	4865      	ldr	r0, [pc, #404]	; (800a980 <PxMessagingTask+0x734>)
 800a7ec:	1818      	adds	r0, r3, r0
 800a7ee:	2138      	movs	r1, #56	; 0x38
 800a7f0:	4369      	muls	r1, r5
 800a7f2:	190c      	adds	r4, r1, r4
 800a7f4:	4958      	ldr	r1, [pc, #352]	; (800a958 <PxMessagingTask+0x70c>)
 800a7f6:	1861      	adds	r1, r4, r1
 800a7f8:	003a      	movs	r2, r7
 800a7fa:	f00a feae 	bl	801555a <memcpy>
								longMessageLastPtr +=numOfParams;
 800a7fe:	8833      	ldrh	r3, [r6, #0]
 800a800:	19df      	adds	r7, r3, r7
 800a802:	8037      	strh	r7, [r6, #0]
 800a804:	e578      	b.n	800a2f8 <PxMessagingTask+0xac>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a806:	4e5d      	ldr	r6, [pc, #372]	; (800a97c <PxMessagingTask+0x730>)
 800a808:	8830      	ldrh	r0, [r6, #0]
 800a80a:	4b5d      	ldr	r3, [pc, #372]	; (800a980 <PxMessagingTask+0x734>)
 800a80c:	4699      	mov	r9, r3
 800a80e:	4448      	add	r0, r9
 800a810:	2138      	movs	r1, #56	; 0x38
 800a812:	4369      	muls	r1, r5
 800a814:	190c      	adds	r4, r1, r4
 800a816:	4950      	ldr	r1, [pc, #320]	; (800a958 <PxMessagingTask+0x70c>)
 800a818:	1861      	adds	r1, r4, r1
 800a81a:	003a      	movs	r2, r7
 800a81c:	f00a fe9d 	bl	801555a <memcpy>
								longMessageLastPtr +=numOfParams;
 800a820:	8834      	ldrh	r4, [r6, #0]
 800a822:	19e4      	adds	r4, r4, r7
 800a824:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a826:	2116      	movs	r1, #22
 800a828:	0020      	movs	r0, r4
 800a82a:	f7f5 fc91 	bl	8000150 <__udivsi3>
 800a82e:	4b55      	ldr	r3, [pc, #340]	; (800a984 <PxMessagingTask+0x738>)
 800a830:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a832:	0022      	movs	r2, r4
 800a834:	4649      	mov	r1, r9
 800a836:	4854      	ldr	r0, [pc, #336]	; (800a988 <PxMessagingTask+0x73c>)
 800a838:	f00a fe8f 	bl	801555a <memcpy>
								longMessageLastPtr =0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	8033      	strh	r3, [r6, #0]
 800a840:	e55a      	b.n	800a2f8 <PxMessagingTask+0xac>
							for(p =1; p <= NumOfPorts; p++){
 800a842:	3401      	adds	r4, #1
 800a844:	b2e4      	uxtb	r4, r4
 800a846:	2c05      	cmp	r4, #5
 800a848:	d810      	bhi.n	800a86c <PxMessagingTask+0x620>
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a84a:	0020      	movs	r0, r4
 800a84c:	f005 f8fe 	bl	800fa4c <GetUart>
 800a850:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a852:	2380      	movs	r3, #128	; 0x80
 800a854:	021b      	lsls	r3, r3, #8
 800a856:	429a      	cmp	r2, r3
 800a858:	d1f3      	bne.n	800a842 <PxMessagingTask+0x5f6>
									messageParams[temp++] =p;
 800a85a:	1c73      	adds	r3, r6, #1
 800a85c:	4a41      	ldr	r2, [pc, #260]	; (800a964 <PxMessagingTask+0x718>)
 800a85e:	5594      	strb	r4, [r2, r6]
 800a860:	b2de      	uxtb	r6, r3
 800a862:	e7ee      	b.n	800a842 <PxMessagingTask+0x5f6>
							for(p =1; p <= NumOfPorts; p++){
 800a864:	2401      	movs	r4, #1
							temp =0;
 800a866:	2300      	movs	r3, #0
 800a868:	001e      	movs	r6, r3
 800a86a:	e7ec      	b.n	800a846 <PxMessagingTask+0x5fa>
 800a86c:	46b2      	mov	sl, r6
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a86e:	b2b2      	uxth	r2, r6
 800a870:	2114      	movs	r1, #20
 800a872:	9805      	ldr	r0, [sp, #20]
 800a874:	f7ff f9ce 	bl	8009c14 <SendMessageToModule>
							break;
 800a878:	e53e      	b.n	800a2f8 <PxMessagingTask+0xac>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a87a:	9b05      	ldr	r3, [sp, #20]
 800a87c:	3b01      	subs	r3, #1
 800a87e:	1860      	adds	r0, r4, r1
 800a880:	00ea      	lsls	r2, r5, #3
 800a882:	1b52      	subs	r2, r2, r5
 800a884:	00d6      	lsls	r6, r2, #3
 800a886:	4a34      	ldr	r2, [pc, #208]	; (800a958 <PxMessagingTask+0x70c>)
 800a888:	1992      	adds	r2, r2, r6
 800a88a:	5c10      	ldrb	r0, [r2, r0]
 800a88c:	3801      	subs	r0, #1
 800a88e:	2680      	movs	r6, #128	; 0x80
 800a890:	0236      	lsls	r6, r6, #8
 800a892:	4106      	asrs	r6, r0
 800a894:	483d      	ldr	r0, [pc, #244]	; (800a98c <PxMessagingTask+0x740>)
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	5a1a      	ldrh	r2, [r3, r0]
 800a89a:	4332      	orrs	r2, r6
 800a89c:	521a      	strh	r2, [r3, r0]
							for(p =0; p < numOfParams; p++){
 800a89e:	3101      	adds	r1, #1
 800a8a0:	b2c9      	uxtb	r1, r1
 800a8a2:	42b9      	cmp	r1, r7
 800a8a4:	d3e9      	bcc.n	800a87a <PxMessagingTask+0x62e>
							responseStatus =BOS_OK;
 800a8a6:	4b30      	ldr	r3, [pc, #192]	; (800a968 <PxMessagingTask+0x71c>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	701a      	strb	r2, [r3, #0]
							break;
 800a8ac:	e524      	b.n	800a2f8 <PxMessagingTask+0xac>
							for(p =0; p < numOfParams; p++){
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	e7f7      	b.n	800a8a2 <PxMessagingTask+0x656>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a8b2:	00eb      	lsls	r3, r5, #3
 800a8b4:	1b5b      	subs	r3, r3, r5
 800a8b6:	00da      	lsls	r2, r3, #3
 800a8b8:	4b27      	ldr	r3, [pc, #156]	; (800a958 <PxMessagingTask+0x70c>)
 800a8ba:	189b      	adds	r3, r3, r2
 800a8bc:	5d1e      	ldrb	r6, [r3, r4]
 800a8be:	0636      	lsls	r6, r6, #24
 800a8c0:	1c62      	adds	r2, r4, #1
 800a8c2:	5c9a      	ldrb	r2, [r3, r2]
 800a8c4:	0412      	lsls	r2, r2, #16
 800a8c6:	18b6      	adds	r6, r6, r2
 800a8c8:	1ca2      	adds	r2, r4, #2
 800a8ca:	5c9a      	ldrb	r2, [r3, r2]
 800a8cc:	0212      	lsls	r2, r2, #8
 800a8ce:	18b6      	adds	r6, r6, r2
 800a8d0:	1ce2      	adds	r2, r4, #3
 800a8d2:	5c9a      	ldrb	r2, [r3, r2]
 800a8d4:	18b6      	adds	r6, r6, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a8d6:	1d22      	adds	r2, r4, #4
 800a8d8:	4691      	mov	r9, r2
 800a8da:	5c9b      	ldrb	r3, [r3, r2]
 800a8dc:	2bff      	cmp	r3, #255	; 0xff
 800a8de:	d00e      	beq.n	800a8fe <PxMessagingTask+0x6b2>
								for(p =0; p < numOfParams; p++){
 800a8e0:	2400      	movs	r4, #0
							temp =temp32 =0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	469a      	mov	sl, r3
 800a8e6:	e01b      	b.n	800a920 <PxMessagingTask+0x6d4>
									UpdateBaudrate(p,temp32);
 800a8e8:	0031      	movs	r1, r6
 800a8ea:	0020      	movs	r0, r4
 800a8ec:	f005 f93c 	bl	800fb68 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a8f0:	3401      	adds	r4, #1
 800a8f2:	b2e4      	uxtb	r4, r4
 800a8f4:	2c05      	cmp	r4, #5
 800a8f6:	d9f7      	bls.n	800a8e8 <PxMessagingTask+0x69c>
							temp =temp32 =0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	469a      	mov	sl, r3
 800a8fc:	e4fc      	b.n	800a2f8 <PxMessagingTask+0xac>
								for(p =1; p <= NumOfPorts; p++){
 800a8fe:	2401      	movs	r4, #1
 800a900:	e7f8      	b.n	800a8f4 <PxMessagingTask+0x6a8>
									temp =cMessage[port - 1][4 + shift + p];
 800a902:	464b      	mov	r3, r9
 800a904:	18e2      	adds	r2, r4, r3
 800a906:	00eb      	lsls	r3, r5, #3
 800a908:	1b5b      	subs	r3, r3, r5
 800a90a:	00d9      	lsls	r1, r3, #3
 800a90c:	4b12      	ldr	r3, [pc, #72]	; (800a958 <PxMessagingTask+0x70c>)
 800a90e:	185b      	adds	r3, r3, r1
 800a910:	5c9b      	ldrb	r3, [r3, r2]
 800a912:	469a      	mov	sl, r3
									if(temp > 0 && temp <= NumOfPorts){
 800a914:	3b01      	subs	r3, #1
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b04      	cmp	r3, #4
 800a91a:	d904      	bls.n	800a926 <PxMessagingTask+0x6da>
								for(p =0; p < numOfParams; p++){
 800a91c:	3401      	adds	r4, #1
 800a91e:	b2e4      	uxtb	r4, r4
 800a920:	42bc      	cmp	r4, r7
 800a922:	d3ee      	bcc.n	800a902 <PxMessagingTask+0x6b6>
 800a924:	e4e8      	b.n	800a2f8 <PxMessagingTask+0xac>
										UpdateBaudrate(temp,temp32);
 800a926:	0031      	movs	r1, r6
 800a928:	4650      	mov	r0, sl
 800a92a:	f005 f91d 	bl	800fb68 <UpdateBaudrate>
 800a92e:	e7f5      	b.n	800a91c <PxMessagingTask+0x6d0>
							SaveToRO();
 800a930:	f001 fb1a 	bl	800bf68 <SaveToRO>
							SaveEEportsDir();
 800a934:	f7f9 f84c 	bl	80039d0 <SaveEEportsDir>
							indMode =IND_PING;
 800a938:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <PxMessagingTask+0x720>)
 800a93a:	2201      	movs	r2, #1
 800a93c:	701a      	strb	r2, [r3, #0]
							break;
 800a93e:	e4db      	b.n	800a2f8 <PxMessagingTask+0xac>
							ClearEEportsDir();
 800a940:	f7f9 f920 	bl	8003b84 <ClearEEportsDir>
							ClearROtopology();
 800a944:	f001 fbfc 	bl	800c140 <ClearROtopology>
							osDelay(100);
 800a948:	2064      	movs	r0, #100	; 0x64
 800a94a:	f005 f9d1 	bl	800fcf0 <osDelay>
							indMode =IND_TOPOLOGY;
 800a94e:	4b07      	ldr	r3, [pc, #28]	; (800a96c <PxMessagingTask+0x720>)
 800a950:	2202      	movs	r2, #2
 800a952:	701a      	strb	r2, [r3, #0]
							break;
 800a954:	e4d0      	b.n	800a2f8 <PxMessagingTask+0xac>
 800a956:	46c0      	nop			; (mov r8, r8)
 800a958:	20000d3c 	.word	0x20000d3c
 800a95c:	20001074 	.word	0x20001074
 800a960:	20000058 	.word	0x20000058
 800a964:	20000f34 	.word	0x20000f34
 800a968:	20001108 	.word	0x20001108
 800a96c:	20000ef0 	.word	0x20000ef0
 800a970:	20001088 	.word	0x20001088
 800a974:	20001072 	.word	0x20001072
 800a978:	20000ef1 	.word	0x20000ef1
 800a97c:	20000ef2 	.word	0x20000ef2
 800a980:	2000183c 	.word	0x2000183c
 800a984:	20000024 	.word	0x20000024
 800a988:	20000aac 	.word	0x20000aac
 800a98c:	200074e4 	.word	0x200074e4
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a990:	f005 fad0 	bl	800ff34 <FreeRTOS_CLIGetOutputBuffer>
 800a994:	0006      	movs	r6, r0
							if(dst == BOS_BROADCAST)
 800a996:	464b      	mov	r3, r9
 800a998:	2bff      	cmp	r3, #255	; 0xff
 800a99a:	d025      	beq.n	800a9e8 <PxMessagingTask+0x79c>
							else if(dst == BOS_MULTICAST)
 800a99c:	2bfe      	cmp	r3, #254	; 0xfe
 800a99e:	d02d      	beq.n	800a9fc <PxMessagingTask+0x7b0>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a9a0:	00ea      	lsls	r2, r5, #3
 800a9a2:	1b52      	subs	r2, r2, r5
 800a9a4:	00d3      	lsls	r3, r2, #3
 800a9a6:	191c      	adds	r4, r3, r4
 800a9a8:	49e3      	ldr	r1, [pc, #908]	; (800ad38 <PxMessagingTask+0xaec>)
 800a9aa:	1861      	adds	r1, r4, r1
 800a9ac:	003a      	movs	r2, r7
 800a9ae:	48e3      	ldr	r0, [pc, #908]	; (800ad3c <PxMessagingTask+0xaf0>)
 800a9b0:	f00a fdd3 	bl	801555a <memcpy>
								temp =PcPort;
 800a9b4:	4fe2      	ldr	r7, [pc, #904]	; (800ad40 <PxMessagingTask+0xaf4>)
 800a9b6:	783c      	ldrb	r4, [r7, #0]
								PcPort =port;
 800a9b8:	9b07      	ldr	r3, [sp, #28]
 800a9ba:	703b      	strb	r3, [r7, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a9bc:	2299      	movs	r2, #153	; 0x99
 800a9be:	0092      	lsls	r2, r2, #2
 800a9c0:	0031      	movs	r1, r6
 800a9c2:	48de      	ldr	r0, [pc, #888]	; (800ad3c <PxMessagingTask+0xaf0>)
 800a9c4:	f005 fa50 	bl	800fe68 <FreeRTOS_CLIProcessCommand>
 800a9c8:	4681      	mov	r9, r0
								PcPort =temp;
 800a9ca:	703c      	strb	r4, [r7, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a9cc:	4bdd      	ldr	r3, [pc, #884]	; (800ad44 <PxMessagingTask+0xaf8>)
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	2b60      	cmp	r3, #96	; 0x60
 800a9d2:	d01f      	beq.n	800aa14 <PxMessagingTask+0x7c8>
							} while(xReturned != pdFALSE);
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1ec      	bne.n	800a9b4 <PxMessagingTask+0x768>
 800a9da:	46a2      	mov	sl, r4
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a9dc:	2232      	movs	r2, #50	; 0x32
 800a9de:	2100      	movs	r1, #0
 800a9e0:	48d6      	ldr	r0, [pc, #856]	; (800ad3c <PxMessagingTask+0xaf0>)
 800a9e2:	f00a fdc3 	bl	801556c <memset>
							break;
 800a9e6:	e487      	b.n	800a2f8 <PxMessagingTask+0xac>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a9e8:	2138      	movs	r1, #56	; 0x38
 800a9ea:	4369      	muls	r1, r5
 800a9ec:	190c      	adds	r4, r1, r4
 800a9ee:	49d2      	ldr	r1, [pc, #840]	; (800ad38 <PxMessagingTask+0xaec>)
 800a9f0:	1861      	adds	r1, r4, r1
 800a9f2:	1e7a      	subs	r2, r7, #1
 800a9f4:	48d1      	ldr	r0, [pc, #836]	; (800ad3c <PxMessagingTask+0xaf0>)
 800a9f6:	f00a fdb0 	bl	801555a <memcpy>
 800a9fa:	e7db      	b.n	800a9b4 <PxMessagingTask+0x768>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a9fc:	2138      	movs	r1, #56	; 0x38
 800a9fe:	4369      	muls	r1, r5
 800aa00:	190c      	adds	r4, r1, r4
 800aa02:	49cd      	ldr	r1, [pc, #820]	; (800ad38 <PxMessagingTask+0xaec>)
 800aa04:	1861      	adds	r1, r4, r1
 800aa06:	4653      	mov	r3, sl
 800aa08:	1afa      	subs	r2, r7, r3
 800aa0a:	3a02      	subs	r2, #2
 800aa0c:	48cb      	ldr	r0, [pc, #812]	; (800ad3c <PxMessagingTask+0xaf0>)
 800aa0e:	f00a fda4 	bl	801555a <memcpy>
 800aa12:	e7cf      	b.n	800a9b4 <PxMessagingTask+0x768>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800aa14:	0030      	movs	r0, r6
 800aa16:	f7f5 fb7f 	bl	8000118 <strlen>
 800aa1a:	0002      	movs	r2, r0
 800aa1c:	0031      	movs	r1, r6
 800aa1e:	48ca      	ldr	r0, [pc, #808]	; (800ad48 <PxMessagingTask+0xafc>)
 800aa20:	f00a fd9b 	bl	801555a <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800aa24:	0030      	movs	r0, r6
 800aa26:	f7f5 fb77 	bl	8000118 <strlen>
 800aa2a:	b282      	uxth	r2, r0
 800aa2c:	2118      	movs	r1, #24
 800aa2e:	9805      	ldr	r0, [sp, #20]
 800aa30:	f7ff f8f0 	bl	8009c14 <SendMessageToModule>
									osDelay(10);
 800aa34:	200a      	movs	r0, #10
 800aa36:	f005 f95b 	bl	800fcf0 <osDelay>
 800aa3a:	e7cb      	b.n	800a9d4 <PxMessagingTask+0x788>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800aa3c:	f005 fa7a 	bl	800ff34 <FreeRTOS_CLIGetOutputBuffer>
 800aa40:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800aa42:	f7f5 fb69 	bl	8000118 <strlen>
 800aa46:	0002      	movs	r2, r0
 800aa48:	2100      	movs	r1, #0
 800aa4a:	0030      	movs	r0, r6
 800aa4c:	f00a fd8e 	bl	801556c <memset>
							if(longMessage){
 800aa50:	4bbe      	ldr	r3, [pc, #760]	; (800ad4c <PxMessagingTask+0xb00>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d011      	beq.n	800aa7c <PxMessagingTask+0x830>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800aa58:	4bbd      	ldr	r3, [pc, #756]	; (800ad50 <PxMessagingTask+0xb04>)
 800aa5a:	4699      	mov	r9, r3
 800aa5c:	8818      	ldrh	r0, [r3, #0]
 800aa5e:	1830      	adds	r0, r6, r0
 800aa60:	2138      	movs	r1, #56	; 0x38
 800aa62:	4369      	muls	r1, r5
 800aa64:	190c      	adds	r4, r1, r4
 800aa66:	49b4      	ldr	r1, [pc, #720]	; (800ad38 <PxMessagingTask+0xaec>)
 800aa68:	1861      	adds	r1, r4, r1
 800aa6a:	003a      	movs	r2, r7
 800aa6c:	f00a fd75 	bl	801555a <memcpy>
								longMessageLastPtr +=numOfParams;
 800aa70:	464b      	mov	r3, r9
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	19df      	adds	r7, r3, r7
 800aa76:	464b      	mov	r3, r9
 800aa78:	801f      	strh	r7, [r3, #0]
 800aa7a:	e43d      	b.n	800a2f8 <PxMessagingTask+0xac>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800aa7c:	4bb4      	ldr	r3, [pc, #720]	; (800ad50 <PxMessagingTask+0xb04>)
 800aa7e:	4699      	mov	r9, r3
 800aa80:	8818      	ldrh	r0, [r3, #0]
 800aa82:	1830      	adds	r0, r6, r0
 800aa84:	2138      	movs	r1, #56	; 0x38
 800aa86:	4369      	muls	r1, r5
 800aa88:	190c      	adds	r4, r1, r4
 800aa8a:	49ab      	ldr	r1, [pc, #684]	; (800ad38 <PxMessagingTask+0xaec>)
 800aa8c:	1861      	adds	r1, r4, r1
 800aa8e:	003a      	movs	r2, r7
 800aa90:	f00a fd63 	bl	801555a <memcpy>
								longMessageLastPtr =0;
 800aa94:	2100      	movs	r1, #0
 800aa96:	464b      	mov	r3, r9
 800aa98:	8019      	strh	r1, [r3, #0]
								responseStatus =BOS_OK;
 800aa9a:	4bae      	ldr	r3, [pc, #696]	; (800ad54 <PxMessagingTask+0xb08>)
 800aa9c:	7019      	strb	r1, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800aa9e:	000b      	movs	r3, r1
 800aaa0:	000a      	movs	r2, r1
 800aaa2:	48ad      	ldr	r0, [pc, #692]	; (800ad58 <PxMessagingTask+0xb0c>)
 800aaa4:	6800      	ldr	r0, [r0, #0]
 800aaa6:	f006 fd65 	bl	8011574 <xTaskGenericNotify>
 800aaaa:	e425      	b.n	800a2f8 <PxMessagingTask+0xac>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800aaac:	4bab      	ldr	r3, [pc, #684]	; (800ad5c <PxMessagingTask+0xb10>)
 800aaae:	4aac      	ldr	r2, [pc, #688]	; (800ad60 <PxMessagingTask+0xb14>)
 800aab0:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800aab2:	4bac      	ldr	r3, [pc, #688]	; (800ad64 <PxMessagingTask+0xb18>)
 800aab4:	2201      	movs	r2, #1
 800aab6:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800aab8:	200a      	movs	r0, #10
 800aaba:	f005 f919 	bl	800fcf0 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	4ba9      	ldr	r3, [pc, #676]	; (800ad68 <PxMessagingTask+0xb1c>)
 800aac4:	4aa9      	ldr	r2, [pc, #676]	; (800ad6c <PxMessagingTask+0xb20>)
 800aac6:	60da      	str	r2, [r3, #12]
 800aac8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800aacc:	46c0      	nop			; (mov r8, r8)
 800aace:	e7fd      	b.n	800aacc <PxMessagingTask+0x880>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800aad0:	00eb      	lsls	r3, r5, #3
 800aad2:	1b5b      	subs	r3, r3, r5
 800aad4:	00da      	lsls	r2, r3, #3
 800aad6:	4e98      	ldr	r6, [pc, #608]	; (800ad38 <PxMessagingTask+0xaec>)
 800aad8:	18b6      	adds	r6, r6, r2
 800aada:	5d30      	ldrb	r0, [r6, r4]
 800aadc:	2300      	movs	r3, #0
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	3319      	adds	r3, #25
 800aae2:	2200      	movs	r2, #0
 800aae4:	2100      	movs	r1, #0
 800aae6:	f7fe fe3d 	bl	8009764 <SendMessageFromPort>
							osDelay(100);
 800aaea:	2064      	movs	r0, #100	; 0x64
 800aaec:	f005 f900 	bl	800fcf0 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800aaf0:	5d33      	ldrb	r3, [r6, r4]
 800aaf2:	4a9f      	ldr	r2, [pc, #636]	; (800ad70 <PxMessagingTask+0xb24>)
 800aaf4:	7811      	ldrb	r1, [r2, #0]
 800aaf6:	9a07      	ldr	r2, [sp, #28]
 800aaf8:	9805      	ldr	r0, [sp, #20]
 800aafa:	f7f9 facb 	bl	8004094 <remoteBootloaderUpdate>
							break;
 800aafe:	f7ff fbfb 	bl	800a2f8 <PxMessagingTask+0xac>
							temp =cMessage[port - 1][11 + shift];
 800ab02:	9409      	str	r4, [sp, #36]	; 0x24
 800ab04:	230b      	movs	r3, #11
 800ab06:	469c      	mov	ip, r3
 800ab08:	44a4      	add	ip, r4
 800ab0a:	4661      	mov	r1, ip
 800ab0c:	910b      	str	r1, [sp, #44]	; 0x2c
 800ab0e:	00eb      	lsls	r3, r5, #3
 800ab10:	1b5b      	subs	r3, r3, r5
 800ab12:	00da      	lsls	r2, r3, #3
 800ab14:	4b88      	ldr	r3, [pc, #544]	; (800ad38 <PxMessagingTask+0xaec>)
 800ab16:	189b      	adds	r3, r3, r2
 800ab18:	5c5b      	ldrb	r3, [r3, r1]
 800ab1a:	469a      	mov	sl, r3
							if(numOfParams == 15)
 800ab1c:	2f0f      	cmp	r7, #15
 800ab1e:	d100      	bne.n	800ab22 <PxMessagingTask+0x8d6>
 800ab20:	e08a      	b.n	800ac38 <PxMessagingTask+0x9ec>
							if(numOfParams == 17)
 800ab22:	2f11      	cmp	r7, #17
 800ab24:	d100      	bne.n	800ab28 <PxMessagingTask+0x8dc>
 800ab26:	e090      	b.n	800ac4a <PxMessagingTask+0x9fe>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800ab28:	00ea      	lsls	r2, r5, #3
 800ab2a:	1b52      	subs	r2, r2, r5
 800ab2c:	00d3      	lsls	r3, r2, #3
 800ab2e:	4a82      	ldr	r2, [pc, #520]	; (800ad38 <PxMessagingTask+0xaec>)
 800ab30:	18d3      	adds	r3, r2, r3
 800ab32:	5d1a      	ldrb	r2, [r3, r4]
 800ab34:	0612      	lsls	r2, r2, #24
 800ab36:	1c61      	adds	r1, r4, #1
 800ab38:	910c      	str	r1, [sp, #48]	; 0x30
 800ab3a:	5c59      	ldrb	r1, [r3, r1]
 800ab3c:	0409      	lsls	r1, r1, #16
 800ab3e:	1852      	adds	r2, r2, r1
 800ab40:	1ca1      	adds	r1, r4, #2
 800ab42:	910d      	str	r1, [sp, #52]	; 0x34
 800ab44:	5c59      	ldrb	r1, [r3, r1]
 800ab46:	0209      	lsls	r1, r1, #8
 800ab48:	1852      	adds	r2, r2, r1
 800ab4a:	1ce1      	adds	r1, r4, #3
 800ab4c:	910e      	str	r1, [sp, #56]	; 0x38
 800ab4e:	5c59      	ldrb	r1, [r3, r1]
 800ab50:	1852      	adds	r2, r2, r1
 800ab52:	920a      	str	r2, [sp, #40]	; 0x28
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800ab54:	1d22      	adds	r2, r4, #4
 800ab56:	920f      	str	r2, [sp, #60]	; 0x3c
 800ab58:	5c9e      	ldrb	r6, [r3, r2]
 800ab5a:	0636      	lsls	r6, r6, #24
 800ab5c:	1d62      	adds	r2, r4, #5
 800ab5e:	9210      	str	r2, [sp, #64]	; 0x40
 800ab60:	5c9a      	ldrb	r2, [r3, r2]
 800ab62:	0412      	lsls	r2, r2, #16
 800ab64:	18b6      	adds	r6, r6, r2
 800ab66:	1da2      	adds	r2, r4, #6
 800ab68:	9211      	str	r2, [sp, #68]	; 0x44
 800ab6a:	5c9a      	ldrb	r2, [r3, r2]
 800ab6c:	0212      	lsls	r2, r2, #8
 800ab6e:	18b2      	adds	r2, r6, r2
 800ab70:	1de1      	adds	r1, r4, #7
 800ab72:	5c5e      	ldrb	r6, [r3, r1]
 800ab74:	1996      	adds	r6, r2, r6
							if(temp == false){
 800ab76:	4653      	mov	r3, sl
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d16f      	bne.n	800ac5c <PxMessagingTask+0xa10>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800ab7c:	00eb      	lsls	r3, r5, #3
 800ab7e:	1b5b      	subs	r3, r3, r5
 800ab80:	00d9      	lsls	r1, r3, #3
 800ab82:	4a6d      	ldr	r2, [pc, #436]	; (800ad38 <PxMessagingTask+0xaec>)
 800ab84:	1852      	adds	r2, r2, r1
 800ab86:	0023      	movs	r3, r4
 800ab88:	3309      	adds	r3, #9
 800ab8a:	5cd3      	ldrb	r3, [r2, r3]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d013      	beq.n	800abb8 <PxMessagingTask+0x96c>
 800ab90:	2238      	movs	r2, #56	; 0x38
 800ab92:	436a      	muls	r2, r5
 800ab94:	4968      	ldr	r1, [pc, #416]	; (800ad38 <PxMessagingTask+0xaec>)
 800ab96:	1889      	adds	r1, r1, r2
 800ab98:	0022      	movs	r2, r4
 800ab9a:	320a      	adds	r2, #10
 800ab9c:	5c89      	ldrb	r1, [r1, r2]
 800ab9e:	2900      	cmp	r1, #0
 800aba0:	d00a      	beq.n	800abb8 <PxMessagingTask+0x96c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800aba2:	3a02      	subs	r2, #2
 800aba4:	2738      	movs	r7, #56	; 0x38
 800aba6:	436f      	muls	r7, r5
 800aba8:	4863      	ldr	r0, [pc, #396]	; (800ad38 <PxMessagingTask+0xaec>)
 800abaa:	19c0      	adds	r0, r0, r7
 800abac:	5c80      	ldrb	r0, [r0, r2]
 800abae:	9100      	str	r1, [sp, #0]
 800abb0:	0032      	movs	r2, r6
 800abb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800abb4:	f7fe fcc2 	bl	800953c <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800abb8:	00eb      	lsls	r3, r5, #3
 800abba:	1b5b      	subs	r3, r3, r5
 800abbc:	00da      	lsls	r2, r3, #3
 800abbe:	4b5e      	ldr	r3, [pc, #376]	; (800ad38 <PxMessagingTask+0xaec>)
 800abc0:	189b      	adds	r3, r3, r2
 800abc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abc4:	5c9b      	ldrb	r3, [r3, r2]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d012      	beq.n	800abf0 <PxMessagingTask+0x9a4>
 800abca:	0022      	movs	r2, r4
 800abcc:	320c      	adds	r2, #12
 800abce:	2038      	movs	r0, #56	; 0x38
 800abd0:	4368      	muls	r0, r5
 800abd2:	4959      	ldr	r1, [pc, #356]	; (800ad38 <PxMessagingTask+0xaec>)
 800abd4:	1809      	adds	r1, r1, r0
 800abd6:	5c89      	ldrb	r1, [r1, r2]
 800abd8:	2900      	cmp	r1, #0
 800abda:	d009      	beq.n	800abf0 <PxMessagingTask+0x9a4>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800abdc:	3a04      	subs	r2, #4
 800abde:	0007      	movs	r7, r0
 800abe0:	4855      	ldr	r0, [pc, #340]	; (800ad38 <PxMessagingTask+0xaec>)
 800abe2:	19c0      	adds	r0, r0, r7
 800abe4:	5c80      	ldrb	r0, [r0, r2]
 800abe6:	9100      	str	r1, [sp, #0]
 800abe8:	0032      	movs	r2, r6
 800abea:	990a      	ldr	r1, [sp, #40]	; 0x28
 800abec:	f7fe fca6 	bl	800953c <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800abf0:	00eb      	lsls	r3, r5, #3
 800abf2:	1b5b      	subs	r3, r3, r5
 800abf4:	00d9      	lsls	r1, r3, #3
 800abf6:	4a50      	ldr	r2, [pc, #320]	; (800ad38 <PxMessagingTask+0xaec>)
 800abf8:	1852      	adds	r2, r2, r1
 800abfa:	0023      	movs	r3, r4
 800abfc:	330d      	adds	r3, #13
 800abfe:	5cd3      	ldrb	r3, [r2, r3]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <PxMessagingTask+0x9bc>
 800ac04:	f7ff fb78 	bl	800a2f8 <PxMessagingTask+0xac>
 800ac08:	2238      	movs	r2, #56	; 0x38
 800ac0a:	436a      	muls	r2, r5
 800ac0c:	494a      	ldr	r1, [pc, #296]	; (800ad38 <PxMessagingTask+0xaec>)
 800ac0e:	1889      	adds	r1, r1, r2
 800ac10:	0022      	movs	r2, r4
 800ac12:	320e      	adds	r2, #14
 800ac14:	5c89      	ldrb	r1, [r1, r2]
 800ac16:	2900      	cmp	r1, #0
 800ac18:	d101      	bne.n	800ac1e <PxMessagingTask+0x9d2>
 800ac1a:	f7ff fb6d 	bl	800a2f8 <PxMessagingTask+0xac>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800ac1e:	3408      	adds	r4, #8
 800ac20:	2038      	movs	r0, #56	; 0x38
 800ac22:	4368      	muls	r0, r5
 800ac24:	4a44      	ldr	r2, [pc, #272]	; (800ad38 <PxMessagingTask+0xaec>)
 800ac26:	1812      	adds	r2, r2, r0
 800ac28:	5d10      	ldrb	r0, [r2, r4]
 800ac2a:	9100      	str	r1, [sp, #0]
 800ac2c:	0032      	movs	r2, r6
 800ac2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac30:	f7fe fc84 	bl	800953c <SetupDMAStreams>
 800ac34:	f7ff fb60 	bl	800a2f8 <PxMessagingTask+0xac>
								temp =cMessage[port - 1][13 + shift];
 800ac38:	2338      	movs	r3, #56	; 0x38
 800ac3a:	436b      	muls	r3, r5
 800ac3c:	4a3e      	ldr	r2, [pc, #248]	; (800ad38 <PxMessagingTask+0xaec>)
 800ac3e:	18d2      	adds	r2, r2, r3
 800ac40:	0023      	movs	r3, r4
 800ac42:	330d      	adds	r3, #13
 800ac44:	5cd3      	ldrb	r3, [r2, r3]
 800ac46:	469a      	mov	sl, r3
 800ac48:	e76b      	b.n	800ab22 <PxMessagingTask+0x8d6>
								temp =cMessage[port - 1][15 + shift];
 800ac4a:	2338      	movs	r3, #56	; 0x38
 800ac4c:	436b      	muls	r3, r5
 800ac4e:	4a3a      	ldr	r2, [pc, #232]	; (800ad38 <PxMessagingTask+0xaec>)
 800ac50:	18d2      	adds	r2, r2, r3
 800ac52:	0023      	movs	r3, r4
 800ac54:	330f      	adds	r3, #15
 800ac56:	5cd3      	ldrb	r3, [r2, r3]
 800ac58:	469a      	mov	sl, r3
 800ac5a:	e765      	b.n	800ab28 <PxMessagingTask+0x8dc>
 800ac5c:	000e      	movs	r6, r1
 800ac5e:	46b9      	mov	r9, r7
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800ac60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ac62:	003b      	movs	r3, r7
 800ac64:	3308      	adds	r3, #8
 800ac66:	2238      	movs	r2, #56	; 0x38
 800ac68:	436a      	muls	r2, r5
 800ac6a:	4c33      	ldr	r4, [pc, #204]	; (800ad38 <PxMessagingTask+0xaec>)
 800ac6c:	18a4      	adds	r4, r4, r2
 800ac6e:	5ce1      	ldrb	r1, [r4, r3]
 800ac70:	20e4      	movs	r0, #228	; 0xe4
 800ac72:	f7fd f8ad 	bl	8007dd0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800ac76:	5de1      	ldrb	r1, [r4, r7]
 800ac78:	0209      	lsls	r1, r1, #8
 800ac7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac7c:	5ce3      	ldrb	r3, [r4, r3]
 800ac7e:	18c9      	adds	r1, r1, r3
 800ac80:	b289      	uxth	r1, r1
 800ac82:	20e5      	movs	r0, #229	; 0xe5
 800ac84:	f7fd f8a4 	bl	8007dd0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800ac88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac8a:	5ce1      	ldrb	r1, [r4, r3]
 800ac8c:	0209      	lsls	r1, r1, #8
 800ac8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac90:	5ce3      	ldrb	r3, [r4, r3]
 800ac92:	18c9      	adds	r1, r1, r3
 800ac94:	b289      	uxth	r1, r1
 800ac96:	20e6      	movs	r0, #230	; 0xe6
 800ac98:	f7fd f89a 	bl	8007dd0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800ac9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac9e:	5ce1      	ldrb	r1, [r4, r3]
 800aca0:	0209      	lsls	r1, r1, #8
 800aca2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aca4:	5ce3      	ldrb	r3, [r4, r3]
 800aca6:	18c9      	adds	r1, r1, r3
 800aca8:	b289      	uxth	r1, r1
 800acaa:	20e7      	movs	r0, #231	; 0xe7
 800acac:	f7fd f890 	bl	8007dd0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800acb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acb2:	5ce1      	ldrb	r1, [r4, r3]
 800acb4:	0209      	lsls	r1, r1, #8
 800acb6:	5da3      	ldrb	r3, [r4, r6]
 800acb8:	18c9      	adds	r1, r1, r3
 800acba:	b289      	uxth	r1, r1
 800acbc:	20e8      	movs	r0, #232	; 0xe8
 800acbe:	f7fd f887 	bl	8007dd0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800acc2:	003b      	movs	r3, r7
 800acc4:	3309      	adds	r3, #9
 800acc6:	5ce1      	ldrb	r1, [r4, r3]
 800acc8:	0209      	lsls	r1, r1, #8
 800acca:	3301      	adds	r3, #1
 800accc:	5ce3      	ldrb	r3, [r4, r3]
 800acce:	18c9      	adds	r1, r1, r3
 800acd0:	b289      	uxth	r1, r1
 800acd2:	20e9      	movs	r0, #233	; 0xe9
 800acd4:	f7fd f87c 	bl	8007dd0 <EE_WriteVariable>
								if(numOfParams == 19)
 800acd8:	464b      	mov	r3, r9
 800acda:	2b13      	cmp	r3, #19
 800acdc:	d10e      	bne.n	800acfc <PxMessagingTask+0xab0>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800acde:	2238      	movs	r2, #56	; 0x38
 800ace0:	436a      	muls	r2, r5
 800ace2:	4b15      	ldr	r3, [pc, #84]	; (800ad38 <PxMessagingTask+0xaec>)
 800ace4:	189b      	adds	r3, r3, r2
 800ace6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ace8:	5c99      	ldrb	r1, [r3, r2]
 800acea:	0209      	lsls	r1, r1, #8
 800acec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acee:	320c      	adds	r2, #12
 800acf0:	5c9b      	ldrb	r3, [r3, r2]
 800acf2:	18c9      	adds	r1, r1, r3
 800acf4:	b289      	uxth	r1, r1
 800acf6:	20ea      	movs	r0, #234	; 0xea
 800acf8:	f7fd f86a 	bl	8007dd0 <EE_WriteVariable>
								if(numOfParams == 21)
 800acfc:	464b      	mov	r3, r9
 800acfe:	2b15      	cmp	r3, #21
 800ad00:	d110      	bne.n	800ad24 <PxMessagingTask+0xad8>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800ad02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad04:	0001      	movs	r1, r0
 800ad06:	310d      	adds	r1, #13
 800ad08:	3323      	adds	r3, #35	; 0x23
 800ad0a:	436b      	muls	r3, r5
 800ad0c:	4a0a      	ldr	r2, [pc, #40]	; (800ad38 <PxMessagingTask+0xaec>)
 800ad0e:	18d2      	adds	r2, r2, r3
 800ad10:	5c51      	ldrb	r1, [r2, r1]
 800ad12:	0209      	lsls	r1, r1, #8
 800ad14:	0003      	movs	r3, r0
 800ad16:	330e      	adds	r3, #14
 800ad18:	5cd3      	ldrb	r3, [r2, r3]
 800ad1a:	18c9      	adds	r1, r1, r3
 800ad1c:	b289      	uxth	r1, r1
 800ad1e:	20eb      	movs	r0, #235	; 0xeb
 800ad20:	f7fd f856 	bl	8007dd0 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	4b0f      	ldr	r3, [pc, #60]	; (800ad68 <PxMessagingTask+0xb1c>)
 800ad2a:	4a10      	ldr	r2, [pc, #64]	; (800ad6c <PxMessagingTask+0xb20>)
 800ad2c:	60da      	str	r2, [r3, #12]
 800ad2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800ad32:	46c0      	nop			; (mov r8, r8)
 800ad34:	e7fd      	b.n	800ad32 <PxMessagingTask+0xae6>
 800ad36:	46c0      	nop			; (mov r8, r8)
 800ad38:	20000d3c 	.word	0x20000d3c
 800ad3c:	20001808 	.word	0x20001808
 800ad40:	20000aa8 	.word	0x20000aa8
 800ad44:	20006fcc 	.word	0x20006fcc
 800ad48:	20000f34 	.word	0x20000f34
 800ad4c:	20000ef1 	.word	0x20000ef1
 800ad50:	20000ef2 	.word	0x20000ef2
 800ad54:	20001108 	.word	0x20001108
 800ad58:	2000172c 	.word	0x2000172c
 800ad5c:	20007ff0 	.word	0x20007ff0
 800ad60:	deadbeef 	.word	0xdeadbeef
 800ad64:	20000ef0 	.word	0x20000ef0
 800ad68:	e000ed00 	.word	0xe000ed00
 800ad6c:	05fa0004 	.word	0x05fa0004
 800ad70:	20001072 	.word	0x20001072
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800ad74:	00eb      	lsls	r3, r5, #3
 800ad76:	1b5b      	subs	r3, r3, r5
 800ad78:	00da      	lsls	r2, r3, #3
 800ad7a:	4eea      	ldr	r6, [pc, #936]	; (800b124 <PxMessagingTask+0xed8>)
 800ad7c:	18b6      	adds	r6, r6, r2
 800ad7e:	5d33      	ldrb	r3, [r6, r4]
 800ad80:	061b      	lsls	r3, r3, #24
 800ad82:	1c62      	adds	r2, r4, #1
 800ad84:	5cb2      	ldrb	r2, [r6, r2]
 800ad86:	0412      	lsls	r2, r2, #16
 800ad88:	189b      	adds	r3, r3, r2
 800ad8a:	1ca2      	adds	r2, r4, #2
 800ad8c:	5cb2      	ldrb	r2, [r6, r2]
 800ad8e:	0212      	lsls	r2, r2, #8
 800ad90:	189b      	adds	r3, r3, r2
 800ad92:	1ce2      	adds	r2, r4, #3
 800ad94:	5cb2      	ldrb	r2, [r6, r2]
 800ad96:	4699      	mov	r9, r3
 800ad98:	4491      	add	r9, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800ad9a:	1d23      	adds	r3, r4, #4
 800ad9c:	5cf2      	ldrb	r2, [r6, r3]
 800ad9e:	0612      	lsls	r2, r2, #24
 800ada0:	1d63      	adds	r3, r4, #5
 800ada2:	5cf3      	ldrb	r3, [r6, r3]
 800ada4:	041b      	lsls	r3, r3, #16
 800ada6:	18d3      	adds	r3, r2, r3
 800ada8:	1da2      	adds	r2, r4, #6
 800adaa:	5cb2      	ldrb	r2, [r6, r2]
 800adac:	0212      	lsls	r2, r2, #8
 800adae:	189b      	adds	r3, r3, r2
 800adb0:	1de2      	adds	r2, r4, #7
 800adb2:	5cb2      	ldrb	r2, [r6, r2]
 800adb4:	469c      	mov	ip, r3
 800adb6:	4494      	add	ip, r2
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800adb8:	0020      	movs	r0, r4
 800adba:	3009      	adds	r0, #9
 800adbc:	0022      	movs	r2, r4
 800adbe:	320b      	adds	r2, #11
 800adc0:	0023      	movs	r3, r4
 800adc2:	330a      	adds	r3, #10
 800adc4:	0027      	movs	r7, r4
 800adc6:	3708      	adds	r7, #8
 800adc8:	340c      	adds	r4, #12
 800adca:	5d34      	ldrb	r4, [r6, r4]
 800adcc:	5cf3      	ldrb	r3, [r6, r3]
 800adce:	9309      	str	r3, [sp, #36]	; 0x24
 800add0:	5cb2      	ldrb	r2, [r6, r2]
 800add2:	49d5      	ldr	r1, [pc, #852]	; (800b128 <PxMessagingTask+0xedc>)
 800add4:	7809      	ldrb	r1, [r1, #0]
 800add6:	5c30      	ldrb	r0, [r6, r0]
 800add8:	1e63      	subs	r3, r4, #1
 800adda:	419c      	sbcs	r4, r3
 800addc:	9403      	str	r4, [sp, #12]
 800adde:	4664      	mov	r4, ip
 800ade0:	9402      	str	r4, [sp, #8]
 800ade2:	464c      	mov	r4, r9
 800ade4:	9401      	str	r4, [sp, #4]
 800ade6:	5df4      	ldrb	r4, [r6, r7]
 800ade8:	9400      	str	r4, [sp, #0]
 800adea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adec:	f7fe ff38 	bl	8009c60 <StartScastDMAStream>
							break;
 800adf0:	f7ff fa82 	bl	800a2f8 <PxMessagingTask+0xac>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800adf4:	00ea      	lsls	r2, r5, #3
 800adf6:	1b52      	subs	r2, r2, r5
 800adf8:	00d1      	lsls	r1, r2, #3
 800adfa:	4aca      	ldr	r2, [pc, #808]	; (800b124 <PxMessagingTask+0xed8>)
 800adfc:	1852      	adds	r2, r2, r1
 800adfe:	5d12      	ldrb	r2, [r2, r4]
 800ae00:	2a00      	cmp	r2, #0
 800ae02:	d000      	beq.n	800ae06 <PxMessagingTask+0xbba>
 800ae04:	e083      	b.n	800af0e <PxMessagingTask+0xcc2>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ae06:	1ca1      	adds	r1, r4, #2
 800ae08:	2338      	movs	r3, #56	; 0x38
 800ae0a:	436b      	muls	r3, r5
 800ae0c:	4ac5      	ldr	r2, [pc, #788]	; (800b124 <PxMessagingTask+0xed8>)
 800ae0e:	18d2      	adds	r2, r2, r3
 800ae10:	5c53      	ldrb	r3, [r2, r1]
 800ae12:	061b      	lsls	r3, r3, #24
 800ae14:	1ce1      	adds	r1, r4, #3
 800ae16:	5c51      	ldrb	r1, [r2, r1]
 800ae18:	0409      	lsls	r1, r1, #16
 800ae1a:	185b      	adds	r3, r3, r1
 800ae1c:	1d21      	adds	r1, r4, #4
 800ae1e:	5c51      	ldrb	r1, [r2, r1]
 800ae20:	0209      	lsls	r1, r1, #8
 800ae22:	185b      	adds	r3, r3, r1
 800ae24:	1d61      	adds	r1, r4, #5
 800ae26:	5c51      	ldrb	r1, [r2, r1]
 800ae28:	185b      	adds	r3, r3, r1
								switch(cMessage[port - 1][1 + shift]) // requested format
 800ae2a:	3401      	adds	r4, #1
 800ae2c:	5d12      	ldrb	r2, [r2, r4]
 800ae2e:	3a01      	subs	r2, #1
 800ae30:	b2d1      	uxtb	r1, r2
 800ae32:	2907      	cmp	r1, #7
 800ae34:	d901      	bls.n	800ae3a <PxMessagingTask+0xbee>
 800ae36:	f7ff fa5f 	bl	800a2f8 <PxMessagingTask+0xac>
 800ae3a:	b2d2      	uxtb	r2, r2
 800ae3c:	0092      	lsls	r2, r2, #2
 800ae3e:	49bb      	ldr	r1, [pc, #748]	; (800b12c <PxMessagingTask+0xee0>)
 800ae40:	588a      	ldr	r2, [r1, r2]
 800ae42:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800ae44:	781a      	ldrb	r2, [r3, #0]
 800ae46:	4bba      	ldr	r3, [pc, #744]	; (800b130 <PxMessagingTask+0xee4>)
 800ae48:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	211f      	movs	r1, #31
 800ae4e:	9805      	ldr	r0, [sp, #20]
 800ae50:	f7fe fee0 	bl	8009c14 <SendMessageToModule>
										break;
 800ae54:	f7ff fa50 	bl	800a2f8 <PxMessagingTask+0xac>
										messageParams[0] =*(__IO int8_t* )temp32;
 800ae58:	781a      	ldrb	r2, [r3, #0]
 800ae5a:	4bb5      	ldr	r3, [pc, #724]	; (800b130 <PxMessagingTask+0xee4>)
 800ae5c:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800ae5e:	2201      	movs	r2, #1
 800ae60:	211f      	movs	r1, #31
 800ae62:	9805      	ldr	r0, [sp, #20]
 800ae64:	f7fe fed6 	bl	8009c14 <SendMessageToModule>
										break;
 800ae68:	f7ff fa46 	bl	800a2f8 <PxMessagingTask+0xac>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ae6c:	8819      	ldrh	r1, [r3, #0]
 800ae6e:	4ab0      	ldr	r2, [pc, #704]	; (800b130 <PxMessagingTask+0xee4>)
 800ae70:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ae72:	881b      	ldrh	r3, [r3, #0]
 800ae74:	0a1b      	lsrs	r3, r3, #8
 800ae76:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ae78:	2202      	movs	r2, #2
 800ae7a:	211f      	movs	r1, #31
 800ae7c:	9805      	ldr	r0, [sp, #20]
 800ae7e:	f7fe fec9 	bl	8009c14 <SendMessageToModule>
										break;
 800ae82:	f7ff fa39 	bl	800a2f8 <PxMessagingTask+0xac>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ae86:	8819      	ldrh	r1, [r3, #0]
 800ae88:	4aa9      	ldr	r2, [pc, #676]	; (800b130 <PxMessagingTask+0xee4>)
 800ae8a:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	b21b      	sxth	r3, r3
 800ae90:	121b      	asrs	r3, r3, #8
 800ae92:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ae94:	2202      	movs	r2, #2
 800ae96:	211f      	movs	r1, #31
 800ae98:	9805      	ldr	r0, [sp, #20]
 800ae9a:	f7fe febb 	bl	8009c14 <SendMessageToModule>
										break;
 800ae9e:	f7ff fa2b 	bl	800a2f8 <PxMessagingTask+0xac>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800aea2:	6819      	ldr	r1, [r3, #0]
 800aea4:	4aa2      	ldr	r2, [pc, #648]	; (800b130 <PxMessagingTask+0xee4>)
 800aea6:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800aea8:	6819      	ldr	r1, [r3, #0]
 800aeaa:	0a09      	lsrs	r1, r1, #8
 800aeac:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800aeae:	6819      	ldr	r1, [r3, #0]
 800aeb0:	0c09      	lsrs	r1, r1, #16
 800aeb2:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	0e1b      	lsrs	r3, r3, #24
 800aeb8:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800aeba:	2204      	movs	r2, #4
 800aebc:	211f      	movs	r1, #31
 800aebe:	9805      	ldr	r0, [sp, #20]
 800aec0:	f7fe fea8 	bl	8009c14 <SendMessageToModule>
										break;
 800aec4:	f7ff fa18 	bl	800a2f8 <PxMessagingTask+0xac>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800aec8:	6819      	ldr	r1, [r3, #0]
 800aeca:	4a99      	ldr	r2, [pc, #612]	; (800b130 <PxMessagingTask+0xee4>)
 800aecc:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800aece:	6819      	ldr	r1, [r3, #0]
 800aed0:	1209      	asrs	r1, r1, #8
 800aed2:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800aed4:	6819      	ldr	r1, [r3, #0]
 800aed6:	1409      	asrs	r1, r1, #16
 800aed8:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	0e1b      	lsrs	r3, r3, #24
 800aede:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800aee0:	2204      	movs	r2, #4
 800aee2:	211f      	movs	r1, #31
 800aee4:	9805      	ldr	r0, [sp, #20]
 800aee6:	f7fe fe95 	bl	8009c14 <SendMessageToModule>
										break;
 800aeea:	f7ff fa05 	bl	800a2f8 <PxMessagingTask+0xac>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800aeee:	7819      	ldrb	r1, [r3, #0]
 800aef0:	4a8f      	ldr	r2, [pc, #572]	; (800b130 <PxMessagingTask+0xee4>)
 800aef2:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800aef4:	7859      	ldrb	r1, [r3, #1]
 800aef6:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800aef8:	7899      	ldrb	r1, [r3, #2]
 800aefa:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800aefc:	78db      	ldrb	r3, [r3, #3]
 800aefe:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800af00:	2208      	movs	r2, #8
 800af02:	211f      	movs	r1, #31
 800af04:	9805      	ldr	r0, [sp, #20]
 800af06:	f7fe fe85 	bl	8009c14 <SendMessageToModule>
										break; // You cannot bitwise floats
 800af0a:	f7ff f9f5 	bl	800a2f8 <PxMessagingTask+0xac>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800af0e:	2a02      	cmp	r2, #2
 800af10:	d000      	beq.n	800af14 <PxMessagingTask+0xcc8>
 800af12:	e08e      	b.n	800b032 <PxMessagingTask+0xde6>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800af14:	3b01      	subs	r3, #1
 800af16:	4883      	ldr	r0, [pc, #524]	; (800b124 <PxMessagingTask+0xed8>)
 800af18:	3236      	adds	r2, #54	; 0x36
 800af1a:	436a      	muls	r2, r5
 800af1c:	1881      	adds	r1, r0, r2
 800af1e:	2600      	movs	r6, #0
 800af20:	54ce      	strb	r6, [r1, r3]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800af22:	3401      	adds	r4, #1
 800af24:	1912      	adds	r2, r2, r4
 800af26:	1810      	adds	r0, r2, r0
 800af28:	f7f8 fec6 	bl	8003cb8 <IsModuleParameter>
 800af2c:	4682      	mov	sl, r0
								if(temp == 0){ // Parameter does not exist
 800af2e:	42b0      	cmp	r0, r6
 800af30:	d106      	bne.n	800af40 <PxMessagingTask+0xcf4>
									SendMessageToModule(src,
 800af32:	2201      	movs	r2, #1
 800af34:	211f      	movs	r1, #31
 800af36:	9805      	ldr	r0, [sp, #20]
 800af38:	f7fe fe6c 	bl	8009c14 <SendMessageToModule>
 800af3c:	f7ff f9dc 	bl	800a2f8 <PxMessagingTask+0xac>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800af40:	3801      	subs	r0, #1
 800af42:	4a7c      	ldr	r2, [pc, #496]	; (800b134 <PxMessagingTask+0xee8>)
 800af44:	210c      	movs	r1, #12
 800af46:	4341      	muls	r1, r0
 800af48:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800af4a:	1852      	adds	r2, r2, r1
 800af4c:	7912      	ldrb	r2, [r2, #4]
 800af4e:	4978      	ldr	r1, [pc, #480]	; (800b130 <PxMessagingTask+0xee4>)
 800af50:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800af52:	3a01      	subs	r2, #1
 800af54:	b2d1      	uxtb	r1, r2
 800af56:	2907      	cmp	r1, #7
 800af58:	d901      	bls.n	800af5e <PxMessagingTask+0xd12>
 800af5a:	f7ff f9cd 	bl	800a2f8 <PxMessagingTask+0xac>
 800af5e:	b2d2      	uxtb	r2, r2
 800af60:	0092      	lsls	r2, r2, #2
 800af62:	4975      	ldr	r1, [pc, #468]	; (800b138 <PxMessagingTask+0xeec>)
 800af64:	588a      	ldr	r2, [r1, r2]
 800af66:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800af68:	781a      	ldrb	r2, [r3, #0]
 800af6a:	4b71      	ldr	r3, [pc, #452]	; (800b130 <PxMessagingTask+0xee4>)
 800af6c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800af6e:	2202      	movs	r2, #2
 800af70:	211f      	movs	r1, #31
 800af72:	9805      	ldr	r0, [sp, #20]
 800af74:	f7fe fe4e 	bl	8009c14 <SendMessageToModule>
											break;
 800af78:	f7ff f9be 	bl	800a2f8 <PxMessagingTask+0xac>
											messageParams[1] =*(__IO int8_t* )temp32;
 800af7c:	781a      	ldrb	r2, [r3, #0]
 800af7e:	4b6c      	ldr	r3, [pc, #432]	; (800b130 <PxMessagingTask+0xee4>)
 800af80:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800af82:	2202      	movs	r2, #2
 800af84:	211f      	movs	r1, #31
 800af86:	9805      	ldr	r0, [sp, #20]
 800af88:	f7fe fe44 	bl	8009c14 <SendMessageToModule>
											break;
 800af8c:	f7ff f9b4 	bl	800a2f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800af90:	8819      	ldrh	r1, [r3, #0]
 800af92:	4a67      	ldr	r2, [pc, #412]	; (800b130 <PxMessagingTask+0xee4>)
 800af94:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	0a1b      	lsrs	r3, r3, #8
 800af9a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800af9c:	2203      	movs	r2, #3
 800af9e:	211f      	movs	r1, #31
 800afa0:	9805      	ldr	r0, [sp, #20]
 800afa2:	f7fe fe37 	bl	8009c14 <SendMessageToModule>
											break;
 800afa6:	f7ff f9a7 	bl	800a2f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800afaa:	8819      	ldrh	r1, [r3, #0]
 800afac:	4a60      	ldr	r2, [pc, #384]	; (800b130 <PxMessagingTask+0xee4>)
 800afae:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800afb0:	881b      	ldrh	r3, [r3, #0]
 800afb2:	b21b      	sxth	r3, r3
 800afb4:	121b      	asrs	r3, r3, #8
 800afb6:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800afb8:	2203      	movs	r2, #3
 800afba:	211f      	movs	r1, #31
 800afbc:	9805      	ldr	r0, [sp, #20]
 800afbe:	f7fe fe29 	bl	8009c14 <SendMessageToModule>
											break;
 800afc2:	f7ff f999 	bl	800a2f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800afc6:	6819      	ldr	r1, [r3, #0]
 800afc8:	4a59      	ldr	r2, [pc, #356]	; (800b130 <PxMessagingTask+0xee4>)
 800afca:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800afcc:	6819      	ldr	r1, [r3, #0]
 800afce:	0a09      	lsrs	r1, r1, #8
 800afd0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800afd2:	6819      	ldr	r1, [r3, #0]
 800afd4:	0c09      	lsrs	r1, r1, #16
 800afd6:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	0e1b      	lsrs	r3, r3, #24
 800afdc:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800afde:	2205      	movs	r2, #5
 800afe0:	211f      	movs	r1, #31
 800afe2:	9805      	ldr	r0, [sp, #20]
 800afe4:	f7fe fe16 	bl	8009c14 <SendMessageToModule>
											break;
 800afe8:	f7ff f986 	bl	800a2f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800afec:	6819      	ldr	r1, [r3, #0]
 800afee:	4a50      	ldr	r2, [pc, #320]	; (800b130 <PxMessagingTask+0xee4>)
 800aff0:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800aff2:	6819      	ldr	r1, [r3, #0]
 800aff4:	1209      	asrs	r1, r1, #8
 800aff6:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800aff8:	6819      	ldr	r1, [r3, #0]
 800affa:	1409      	asrs	r1, r1, #16
 800affc:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	0e1b      	lsrs	r3, r3, #24
 800b002:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800b004:	2205      	movs	r2, #5
 800b006:	211f      	movs	r1, #31
 800b008:	9805      	ldr	r0, [sp, #20]
 800b00a:	f7fe fe03 	bl	8009c14 <SendMessageToModule>
											break;
 800b00e:	f7ff f973 	bl	800a2f8 <PxMessagingTask+0xac>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b012:	7819      	ldrb	r1, [r3, #0]
 800b014:	4a46      	ldr	r2, [pc, #280]	; (800b130 <PxMessagingTask+0xee4>)
 800b016:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b018:	7859      	ldrb	r1, [r3, #1]
 800b01a:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b01c:	7899      	ldrb	r1, [r3, #2]
 800b01e:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b020:	78db      	ldrb	r3, [r3, #3]
 800b022:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800b024:	2209      	movs	r2, #9
 800b026:	211f      	movs	r1, #31
 800b028:	9805      	ldr	r0, [sp, #20]
 800b02a:	f7fe fdf3 	bl	8009c14 <SendMessageToModule>
											break;
 800b02e:	f7ff f963 	bl	800a2f8 <PxMessagingTask+0xac>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800b032:	2a02      	cmp	r2, #2
 800b034:	d801      	bhi.n	800b03a <PxMessagingTask+0xdee>
 800b036:	f7ff f95f 	bl	800a2f8 <PxMessagingTask+0xac>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800b03a:	3a04      	subs	r2, #4
 800b03c:	0092      	lsls	r2, r2, #2
 800b03e:	4b3f      	ldr	r3, [pc, #252]	; (800b13c <PxMessagingTask+0xef0>)
 800b040:	58d1      	ldr	r1, [r2, r3]
 800b042:	220f      	movs	r2, #15
 800b044:	400a      	ands	r2, r1
 800b046:	4b3a      	ldr	r3, [pc, #232]	; (800b130 <PxMessagingTask+0xee4>)
 800b048:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800b04a:	d106      	bne.n	800b05a <PxMessagingTask+0xe0e>
									SendMessageToModule(src,
 800b04c:	3201      	adds	r2, #1
 800b04e:	211f      	movs	r1, #31
 800b050:	9805      	ldr	r0, [sp, #20]
 800b052:	f7fe fddf 	bl	8009c14 <SendMessageToModule>
 800b056:	f7ff f94f 	bl	800a2f8 <PxMessagingTask+0xac>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800b05a:	0c09      	lsrs	r1, r1, #16
 800b05c:	2380      	movs	r3, #128	; 0x80
 800b05e:	059b      	lsls	r3, r3, #22
 800b060:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800b062:	3a01      	subs	r2, #1
 800b064:	b2d0      	uxtb	r0, r2
 800b066:	2807      	cmp	r0, #7
 800b068:	d901      	bls.n	800b06e <PxMessagingTask+0xe22>
 800b06a:	f7ff f945 	bl	800a2f8 <PxMessagingTask+0xac>
 800b06e:	b2d2      	uxtb	r2, r2
 800b070:	0092      	lsls	r2, r2, #2
 800b072:	4833      	ldr	r0, [pc, #204]	; (800b140 <PxMessagingTask+0xef4>)
 800b074:	5882      	ldr	r2, [r0, r2]
 800b076:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800b078:	781a      	ldrb	r2, [r3, #0]
 800b07a:	4b2d      	ldr	r3, [pc, #180]	; (800b130 <PxMessagingTask+0xee4>)
 800b07c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800b07e:	2202      	movs	r2, #2
 800b080:	211f      	movs	r1, #31
 800b082:	9805      	ldr	r0, [sp, #20]
 800b084:	f7fe fdc6 	bl	8009c14 <SendMessageToModule>
											break;
 800b088:	f7ff f936 	bl	800a2f8 <PxMessagingTask+0xac>
											messageParams[1] =*(__IO int8_t* )temp32;
 800b08c:	781a      	ldrb	r2, [r3, #0]
 800b08e:	4b28      	ldr	r3, [pc, #160]	; (800b130 <PxMessagingTask+0xee4>)
 800b090:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800b092:	2202      	movs	r2, #2
 800b094:	211f      	movs	r1, #31
 800b096:	9805      	ldr	r0, [sp, #20]
 800b098:	f7fe fdbc 	bl	8009c14 <SendMessageToModule>
											break;
 800b09c:	f7ff f92c 	bl	800a2f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800b0a0:	8819      	ldrh	r1, [r3, #0]
 800b0a2:	4a23      	ldr	r2, [pc, #140]	; (800b130 <PxMessagingTask+0xee4>)
 800b0a4:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b0a6:	881b      	ldrh	r3, [r3, #0]
 800b0a8:	0a1b      	lsrs	r3, r3, #8
 800b0aa:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800b0ac:	2203      	movs	r2, #3
 800b0ae:	211f      	movs	r1, #31
 800b0b0:	9805      	ldr	r0, [sp, #20]
 800b0b2:	f7fe fdaf 	bl	8009c14 <SendMessageToModule>
											break;
 800b0b6:	f7ff f91f 	bl	800a2f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800b0ba:	8819      	ldrh	r1, [r3, #0]
 800b0bc:	4a1c      	ldr	r2, [pc, #112]	; (800b130 <PxMessagingTask+0xee4>)
 800b0be:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	b21b      	sxth	r3, r3
 800b0c4:	121b      	asrs	r3, r3, #8
 800b0c6:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800b0c8:	2203      	movs	r2, #3
 800b0ca:	211f      	movs	r1, #31
 800b0cc:	9805      	ldr	r0, [sp, #20]
 800b0ce:	f7fe fda1 	bl	8009c14 <SendMessageToModule>
											break;
 800b0d2:	f7ff f911 	bl	800a2f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800b0d6:	6819      	ldr	r1, [r3, #0]
 800b0d8:	4a15      	ldr	r2, [pc, #84]	; (800b130 <PxMessagingTask+0xee4>)
 800b0da:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800b0dc:	6819      	ldr	r1, [r3, #0]
 800b0de:	0a09      	lsrs	r1, r1, #8
 800b0e0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800b0e2:	6819      	ldr	r1, [r3, #0]
 800b0e4:	0c09      	lsrs	r1, r1, #16
 800b0e6:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	0e1b      	lsrs	r3, r3, #24
 800b0ec:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800b0ee:	2205      	movs	r2, #5
 800b0f0:	211f      	movs	r1, #31
 800b0f2:	9805      	ldr	r0, [sp, #20]
 800b0f4:	f7fe fd8e 	bl	8009c14 <SendMessageToModule>
											break;
 800b0f8:	f7ff f8fe 	bl	800a2f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800b0fc:	6819      	ldr	r1, [r3, #0]
 800b0fe:	4a0c      	ldr	r2, [pc, #48]	; (800b130 <PxMessagingTask+0xee4>)
 800b100:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800b102:	6819      	ldr	r1, [r3, #0]
 800b104:	1209      	asrs	r1, r1, #8
 800b106:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800b108:	6819      	ldr	r1, [r3, #0]
 800b10a:	1409      	asrs	r1, r1, #16
 800b10c:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	0e1b      	lsrs	r3, r3, #24
 800b112:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800b114:	2205      	movs	r2, #5
 800b116:	211f      	movs	r1, #31
 800b118:	9805      	ldr	r0, [sp, #20]
 800b11a:	f7fe fd7b 	bl	8009c14 <SendMessageToModule>
											break;
 800b11e:	f7ff f8eb 	bl	800a2f8 <PxMessagingTask+0xac>
 800b122:	46c0      	nop			; (mov r8, r8)
 800b124:	20000d3c 	.word	0x20000d3c
 800b128:	20001072 	.word	0x20001072
 800b12c:	0801c904 	.word	0x0801c904
 800b130:	20000f34 	.word	0x20000f34
 800b134:	20000098 	.word	0x20000098
 800b138:	0801c924 	.word	0x0801c924
 800b13c:	20006fd4 	.word	0x20006fd4
 800b140:	0801c944 	.word	0x0801c944
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b144:	781a      	ldrb	r2, [r3, #0]
 800b146:	4bd7      	ldr	r3, [pc, #860]	; (800b4a4 <PxMessagingTask+0x1258>)
 800b148:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b14a:	4ad7      	ldr	r2, [pc, #860]	; (800b4a8 <PxMessagingTask+0x125c>)
 800b14c:	188a      	adds	r2, r1, r2
 800b14e:	7812      	ldrb	r2, [r2, #0]
 800b150:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b152:	4ad6      	ldr	r2, [pc, #856]	; (800b4ac <PxMessagingTask+0x1260>)
 800b154:	188a      	adds	r2, r1, r2
 800b156:	7812      	ldrb	r2, [r2, #0]
 800b158:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b15a:	4ad5      	ldr	r2, [pc, #852]	; (800b4b0 <PxMessagingTask+0x1264>)
 800b15c:	4694      	mov	ip, r2
 800b15e:	4461      	add	r1, ip
 800b160:	780a      	ldrb	r2, [r1, #0]
 800b162:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800b164:	2209      	movs	r2, #9
 800b166:	211f      	movs	r1, #31
 800b168:	9805      	ldr	r0, [sp, #20]
 800b16a:	f7fe fd53 	bl	8009c14 <SendMessageToModule>
											break;
 800b16e:	f7ff f8c3 	bl	800a2f8 <PxMessagingTask+0xac>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800b172:	4bd0      	ldr	r3, [pc, #832]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	2002      	movs	r0, #2
 800b17a:	4240      	negs	r0, r0
 800b17c:	17c1      	asrs	r1, r0, #31
 800b17e:	1880      	adds	r0, r0, r2
 800b180:	4159      	adcs	r1, r3
 800b182:	2900      	cmp	r1, #0
 800b184:	d014      	beq.n	800b1b0 <PxMessagingTask+0xf64>
							else if(remoteBuffer == REMOTE_MEMORY_ADD) // We requested a memory location
 800b186:	0011      	movs	r1, r2
 800b188:	4319      	orrs	r1, r3
 800b18a:	d125      	bne.n	800b1d8 <PxMessagingTask+0xf8c>
								switch(remoteBuffer) // Requested format
 800b18c:	2601      	movs	r6, #1
 800b18e:	4276      	negs	r6, r6
 800b190:	17f7      	asrs	r7, r6, #31
 800b192:	18b6      	adds	r6, r6, r2
 800b194:	415f      	adcs	r7, r3
 800b196:	2207      	movs	r2, #7
 800b198:	2300      	movs	r3, #0
 800b19a:	0030      	movs	r0, r6
 800b19c:	0039      	movs	r1, r7
 800b19e:	f7f5 f9c5 	bl	800052c <__aeabi_ulcmp>
 800b1a2:	3001      	adds	r0, #1
 800b1a4:	2801      	cmp	r0, #1
 800b1a6:	d817      	bhi.n	800b1d8 <PxMessagingTask+0xf8c>
 800b1a8:	00b6      	lsls	r6, r6, #2
 800b1aa:	4bc3      	ldr	r3, [pc, #780]	; (800b4b8 <PxMessagingTask+0x126c>)
 800b1ac:	599b      	ldr	r3, [r3, r6]
 800b1ae:	469f      	mov	pc, r3
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800b1b0:	2900      	cmp	r1, #0
 800b1b2:	d101      	bne.n	800b1b8 <PxMessagingTask+0xf6c>
 800b1b4:	2801      	cmp	r0, #1
 800b1b6:	d8e6      	bhi.n	800b186 <PxMessagingTask+0xf3a>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800b1b8:	2238      	movs	r2, #56	; 0x38
 800b1ba:	436a      	muls	r2, r5
 800b1bc:	4bbf      	ldr	r3, [pc, #764]	; (800b4bc <PxMessagingTask+0x1270>)
 800b1be:	189b      	adds	r3, r3, r2
 800b1c0:	5d1b      	ldrb	r3, [r3, r4]
 800b1c2:	4abf      	ldr	r2, [pc, #764]	; (800b4c0 <PxMessagingTask+0x1274>)
 800b1c4:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800b1c6:	2b08      	cmp	r3, #8
 800b1c8:	d806      	bhi.n	800b1d8 <PxMessagingTask+0xf8c>
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	4abd      	ldr	r2, [pc, #756]	; (800b4c4 <PxMessagingTask+0x1278>)
 800b1ce:	58d3      	ldr	r3, [r2, r3]
 800b1d0:	469f      	mov	pc, r3
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b1d2:	4bbd      	ldr	r3, [pc, #756]	; (800b4c8 <PxMessagingTask+0x127c>)
 800b1d4:	2210      	movs	r2, #16
 800b1d6:	701a      	strb	r2, [r3, #0]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800b1d8:	4bbb      	ldr	r3, [pc, #748]	; (800b4c8 <PxMessagingTask+0x127c>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b10      	cmp	r3, #16
 800b1de:	d101      	bne.n	800b1e4 <PxMessagingTask+0xf98>
 800b1e0:	f7ff f88a 	bl	800a2f8 <PxMessagingTask+0xac>
								responseStatus =BOS_OK;
 800b1e4:	4bb8      	ldr	r3, [pc, #736]	; (800b4c8 <PxMessagingTask+0x127c>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	701a      	strb	r2, [r3, #0]
 800b1ea:	f7ff f885 	bl	800a2f8 <PxMessagingTask+0xac>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800b1ee:	3401      	adds	r4, #1
 800b1f0:	2238      	movs	r2, #56	; 0x38
 800b1f2:	436a      	muls	r2, r5
 800b1f4:	4bb1      	ldr	r3, [pc, #708]	; (800b4bc <PxMessagingTask+0x1270>)
 800b1f6:	189b      	adds	r3, r3, r2
 800b1f8:	5d1a      	ldrb	r2, [r3, r4]
 800b1fa:	4bae      	ldr	r3, [pc, #696]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b1fc:	601a      	str	r2, [r3, #0]
 800b1fe:	2200      	movs	r2, #0
 800b200:	605a      	str	r2, [r3, #4]
										break;
 800b202:	e7e9      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800b204:	3401      	adds	r4, #1
 800b206:	2238      	movs	r2, #56	; 0x38
 800b208:	436a      	muls	r2, r5
 800b20a:	4bac      	ldr	r3, [pc, #688]	; (800b4bc <PxMessagingTask+0x1270>)
 800b20c:	189b      	adds	r3, r3, r2
 800b20e:	571a      	ldrsb	r2, [r3, r4]
 800b210:	17d1      	asrs	r1, r2, #31
 800b212:	4ba8      	ldr	r3, [pc, #672]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	6059      	str	r1, [r3, #4]
										break;
 800b218:	e7de      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800b21a:	1c61      	adds	r1, r4, #1
 800b21c:	2338      	movs	r3, #56	; 0x38
 800b21e:	436b      	muls	r3, r5
 800b220:	4aa6      	ldr	r2, [pc, #664]	; (800b4bc <PxMessagingTask+0x1270>)
 800b222:	18d2      	adds	r2, r2, r3
 800b224:	5c53      	ldrb	r3, [r2, r1]
 800b226:	3402      	adds	r4, #2
 800b228:	5d12      	ldrb	r2, [r2, r4]
 800b22a:	0212      	lsls	r2, r2, #8
 800b22c:	189b      	adds	r3, r3, r2
 800b22e:	17d9      	asrs	r1, r3, #31
 800b230:	4aa0      	ldr	r2, [pc, #640]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b232:	6013      	str	r3, [r2, #0]
 800b234:	6051      	str	r1, [r2, #4]
										break;
 800b236:	e7cf      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b238:	1c61      	adds	r1, r4, #1
 800b23a:	2338      	movs	r3, #56	; 0x38
 800b23c:	436b      	muls	r3, r5
 800b23e:	4a9f      	ldr	r2, [pc, #636]	; (800b4bc <PxMessagingTask+0x1270>)
 800b240:	18d2      	adds	r2, r2, r3
 800b242:	5c53      	ldrb	r3, [r2, r1]
 800b244:	3402      	adds	r4, #2
 800b246:	5d12      	ldrb	r2, [r2, r4]
 800b248:	0212      	lsls	r2, r2, #8
 800b24a:	189b      	adds	r3, r3, r2
 800b24c:	17d9      	asrs	r1, r3, #31
 800b24e:	4a99      	ldr	r2, [pc, #612]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	6051      	str	r1, [r2, #4]
										break;
 800b254:	e7c0      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b256:	1c61      	adds	r1, r4, #1
 800b258:	2338      	movs	r3, #56	; 0x38
 800b25a:	436b      	muls	r3, r5
 800b25c:	4a97      	ldr	r2, [pc, #604]	; (800b4bc <PxMessagingTask+0x1270>)
 800b25e:	18d2      	adds	r2, r2, r3
 800b260:	5c53      	ldrb	r3, [r2, r1]
 800b262:	1ca1      	adds	r1, r4, #2
 800b264:	5c51      	ldrb	r1, [r2, r1]
 800b266:	0209      	lsls	r1, r1, #8
 800b268:	185b      	adds	r3, r3, r1
 800b26a:	1ce1      	adds	r1, r4, #3
 800b26c:	5c51      	ldrb	r1, [r2, r1]
 800b26e:	0409      	lsls	r1, r1, #16
 800b270:	185b      	adds	r3, r3, r1
 800b272:	3404      	adds	r4, #4
 800b274:	5d12      	ldrb	r2, [r2, r4]
 800b276:	0612      	lsls	r2, r2, #24
 800b278:	189b      	adds	r3, r3, r2
 800b27a:	4a8e      	ldr	r2, [pc, #568]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b27c:	6013      	str	r3, [r2, #0]
 800b27e:	2300      	movs	r3, #0
 800b280:	6053      	str	r3, [r2, #4]
										break;
 800b282:	e7a9      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b284:	1c61      	adds	r1, r4, #1
 800b286:	2338      	movs	r3, #56	; 0x38
 800b288:	436b      	muls	r3, r5
 800b28a:	4a8c      	ldr	r2, [pc, #560]	; (800b4bc <PxMessagingTask+0x1270>)
 800b28c:	18d2      	adds	r2, r2, r3
 800b28e:	5c53      	ldrb	r3, [r2, r1]
 800b290:	1ca1      	adds	r1, r4, #2
 800b292:	5c51      	ldrb	r1, [r2, r1]
 800b294:	0209      	lsls	r1, r1, #8
 800b296:	185b      	adds	r3, r3, r1
 800b298:	1ce1      	adds	r1, r4, #3
 800b29a:	5c51      	ldrb	r1, [r2, r1]
 800b29c:	0409      	lsls	r1, r1, #16
 800b29e:	185b      	adds	r3, r3, r1
 800b2a0:	3404      	adds	r4, #4
 800b2a2:	5d12      	ldrb	r2, [r2, r4]
 800b2a4:	0612      	lsls	r2, r2, #24
 800b2a6:	189b      	adds	r3, r3, r2
 800b2a8:	17d9      	asrs	r1, r3, #31
 800b2aa:	4a82      	ldr	r2, [pc, #520]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	6051      	str	r1, [r2, #4]
										break;
 800b2b0:	e792      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b2b2:	1c61      	adds	r1, r4, #1
 800b2b4:	2338      	movs	r3, #56	; 0x38
 800b2b6:	436b      	muls	r3, r5
 800b2b8:	4a80      	ldr	r2, [pc, #512]	; (800b4bc <PxMessagingTask+0x1270>)
 800b2ba:	18d2      	adds	r2, r2, r3
 800b2bc:	5c53      	ldrb	r3, [r2, r1]
 800b2be:	1ca1      	adds	r1, r4, #2
 800b2c0:	5c51      	ldrb	r1, [r2, r1]
 800b2c2:	0209      	lsls	r1, r1, #8
 800b2c4:	185b      	adds	r3, r3, r1
 800b2c6:	1ce1      	adds	r1, r4, #3
 800b2c8:	5c51      	ldrb	r1, [r2, r1]
 800b2ca:	0409      	lsls	r1, r1, #16
 800b2cc:	185b      	adds	r3, r3, r1
 800b2ce:	3404      	adds	r4, #4
 800b2d0:	5d12      	ldrb	r2, [r2, r4]
 800b2d2:	0612      	lsls	r2, r2, #24
 800b2d4:	189b      	adds	r3, r3, r2
 800b2d6:	4a77      	ldr	r2, [pc, #476]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	6053      	str	r3, [r2, #4]
										break;
 800b2de:	e77b      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =cMessage[port - 1][shift];
 800b2e0:	2238      	movs	r2, #56	; 0x38
 800b2e2:	436a      	muls	r2, r5
 800b2e4:	4b75      	ldr	r3, [pc, #468]	; (800b4bc <PxMessagingTask+0x1270>)
 800b2e6:	189b      	adds	r3, r3, r2
 800b2e8:	5d1a      	ldrb	r2, [r3, r4]
 800b2ea:	4b72      	ldr	r3, [pc, #456]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	605a      	str	r2, [r3, #4]
										break;
 800b2f2:	e771      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =(int8_t )cMessage[port - 1][shift];
 800b2f4:	2238      	movs	r2, #56	; 0x38
 800b2f6:	436a      	muls	r2, r5
 800b2f8:	4b70      	ldr	r3, [pc, #448]	; (800b4bc <PxMessagingTask+0x1270>)
 800b2fa:	189b      	adds	r3, r3, r2
 800b2fc:	571a      	ldrsb	r2, [r3, r4]
 800b2fe:	17d1      	asrs	r1, r2, #31
 800b300:	4b6c      	ldr	r3, [pc, #432]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	6059      	str	r1, [r3, #4]
										break;
 800b306:	e767      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =((uint16_t )cMessage[port - 1][shift] << 0) + ((uint16_t )cMessage[port - 1][1 + shift] << 8);
 800b308:	2338      	movs	r3, #56	; 0x38
 800b30a:	436b      	muls	r3, r5
 800b30c:	4a6b      	ldr	r2, [pc, #428]	; (800b4bc <PxMessagingTask+0x1270>)
 800b30e:	18d2      	adds	r2, r2, r3
 800b310:	5d13      	ldrb	r3, [r2, r4]
 800b312:	3401      	adds	r4, #1
 800b314:	5d12      	ldrb	r2, [r2, r4]
 800b316:	0212      	lsls	r2, r2, #8
 800b318:	189b      	adds	r3, r3, r2
 800b31a:	17d9      	asrs	r1, r3, #31
 800b31c:	4a65      	ldr	r2, [pc, #404]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	6051      	str	r1, [r2, #4]
										break;
 800b322:	e759      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =((int16_t )cMessage[port - 1][shift] << 0) + ((int16_t )cMessage[port - 1][1 + shift] << 8);
 800b324:	2338      	movs	r3, #56	; 0x38
 800b326:	436b      	muls	r3, r5
 800b328:	4a64      	ldr	r2, [pc, #400]	; (800b4bc <PxMessagingTask+0x1270>)
 800b32a:	18d2      	adds	r2, r2, r3
 800b32c:	5d13      	ldrb	r3, [r2, r4]
 800b32e:	3401      	adds	r4, #1
 800b330:	5d12      	ldrb	r2, [r2, r4]
 800b332:	0212      	lsls	r2, r2, #8
 800b334:	189b      	adds	r3, r3, r2
 800b336:	17d9      	asrs	r1, r3, #31
 800b338:	4a5e      	ldr	r2, [pc, #376]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	6051      	str	r1, [r2, #4]
										break;
 800b33e:	e74b      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 800b340:	2338      	movs	r3, #56	; 0x38
 800b342:	436b      	muls	r3, r5
 800b344:	4a5d      	ldr	r2, [pc, #372]	; (800b4bc <PxMessagingTask+0x1270>)
 800b346:	18d2      	adds	r2, r2, r3
 800b348:	5d13      	ldrb	r3, [r2, r4]
 800b34a:	1c61      	adds	r1, r4, #1
 800b34c:	5c51      	ldrb	r1, [r2, r1]
 800b34e:	0209      	lsls	r1, r1, #8
 800b350:	185b      	adds	r3, r3, r1
 800b352:	1ca1      	adds	r1, r4, #2
 800b354:	5c51      	ldrb	r1, [r2, r1]
 800b356:	0409      	lsls	r1, r1, #16
 800b358:	185b      	adds	r3, r3, r1
 800b35a:	3403      	adds	r4, #3
 800b35c:	5d12      	ldrb	r2, [r2, r4]
 800b35e:	0612      	lsls	r2, r2, #24
 800b360:	189b      	adds	r3, r3, r2
 800b362:	4a54      	ldr	r2, [pc, #336]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	2300      	movs	r3, #0
 800b368:	6053      	str	r3, [r2, #4]
										break;
 800b36a:	e735      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =((int32_t )cMessage[port - 1][shift] << 0) + ((int32_t )cMessage[port - 1][1 + shift] << 8) + ((int32_t )cMessage[port - 1][2 + shift] << 16) + ((int32_t )cMessage[port - 1][3 + shift] << 24);
 800b36c:	2338      	movs	r3, #56	; 0x38
 800b36e:	436b      	muls	r3, r5
 800b370:	4a52      	ldr	r2, [pc, #328]	; (800b4bc <PxMessagingTask+0x1270>)
 800b372:	18d2      	adds	r2, r2, r3
 800b374:	5d13      	ldrb	r3, [r2, r4]
 800b376:	1c61      	adds	r1, r4, #1
 800b378:	5c51      	ldrb	r1, [r2, r1]
 800b37a:	0209      	lsls	r1, r1, #8
 800b37c:	185b      	adds	r3, r3, r1
 800b37e:	1ca1      	adds	r1, r4, #2
 800b380:	5c51      	ldrb	r1, [r2, r1]
 800b382:	0409      	lsls	r1, r1, #16
 800b384:	185b      	adds	r3, r3, r1
 800b386:	3403      	adds	r4, #3
 800b388:	5d12      	ldrb	r2, [r2, r4]
 800b38a:	0612      	lsls	r2, r2, #24
 800b38c:	189b      	adds	r3, r3, r2
 800b38e:	17d9      	asrs	r1, r3, #31
 800b390:	4a48      	ldr	r2, [pc, #288]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b392:	6013      	str	r3, [r2, #0]
 800b394:	6051      	str	r1, [r2, #4]
										break;
 800b396:	e71f      	b.n	800b1d8 <PxMessagingTask+0xf8c>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 800b398:	2338      	movs	r3, #56	; 0x38
 800b39a:	436b      	muls	r3, r5
 800b39c:	4a47      	ldr	r2, [pc, #284]	; (800b4bc <PxMessagingTask+0x1270>)
 800b39e:	18d2      	adds	r2, r2, r3
 800b3a0:	5d13      	ldrb	r3, [r2, r4]
 800b3a2:	1c61      	adds	r1, r4, #1
 800b3a4:	5c51      	ldrb	r1, [r2, r1]
 800b3a6:	0209      	lsls	r1, r1, #8
 800b3a8:	185b      	adds	r3, r3, r1
 800b3aa:	1ca1      	adds	r1, r4, #2
 800b3ac:	5c51      	ldrb	r1, [r2, r1]
 800b3ae:	0409      	lsls	r1, r1, #16
 800b3b0:	185b      	adds	r3, r3, r1
 800b3b2:	3403      	adds	r4, #3
 800b3b4:	5d12      	ldrb	r2, [r2, r4]
 800b3b6:	0612      	lsls	r2, r2, #24
 800b3b8:	189b      	adds	r3, r3, r2
 800b3ba:	4a3e      	ldr	r2, [pc, #248]	; (800b4b4 <PxMessagingTask+0x1268>)
 800b3bc:	6013      	str	r3, [r2, #0]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	6053      	str	r3, [r2, #4]
										break;
 800b3c2:	e709      	b.n	800b1d8 <PxMessagingTask+0xf8c>
							responseStatus =BOS_OK; // Initialize response
 800b3c4:	4b40      	ldr	r3, [pc, #256]	; (800b4c8 <PxMessagingTask+0x127c>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800b3ca:	00eb      	lsls	r3, r5, #3
 800b3cc:	1b5b      	subs	r3, r3, r5
 800b3ce:	00da      	lsls	r2, r3, #3
 800b3d0:	4b3a      	ldr	r3, [pc, #232]	; (800b4bc <PxMessagingTask+0x1270>)
 800b3d2:	189b      	adds	r3, r3, r2
 800b3d4:	5d1f      	ldrb	r7, [r3, r4]
 800b3d6:	2f00      	cmp	r7, #0
 800b3d8:	d100      	bne.n	800b3dc <PxMessagingTask+0x1190>
 800b3da:	e161      	b.n	800b6a0 <PxMessagingTask+0x1454>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800b3dc:	2f1e      	cmp	r7, #30
 800b3de:	d900      	bls.n	800b3e2 <PxMessagingTask+0x1196>
 800b3e0:	e15a      	b.n	800b698 <PxMessagingTask+0x144c>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800b3e2:	3f01      	subs	r7, #1
 800b3e4:	00ba      	lsls	r2, r7, #2
 800b3e6:	4b39      	ldr	r3, [pc, #228]	; (800b4cc <PxMessagingTask+0x1280>)
 800b3e8:	58d2      	ldr	r2, [r2, r3]
 800b3ea:	0c13      	lsrs	r3, r2, #16
 800b3ec:	2180      	movs	r1, #128	; 0x80
 800b3ee:	0589      	lsls	r1, r1, #22
 800b3f0:	468c      	mov	ip, r1
 800b3f2:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800b3f4:	1c61      	adds	r1, r4, #1
 800b3f6:	4689      	mov	r9, r1
 800b3f8:	2038      	movs	r0, #56	; 0x38
 800b3fa:	4368      	muls	r0, r5
 800b3fc:	492f      	ldr	r1, [pc, #188]	; (800b4bc <PxMessagingTask+0x1270>)
 800b3fe:	1809      	adds	r1, r1, r0
 800b400:	4648      	mov	r0, r9
 800b402:	5c0e      	ldrb	r6, [r1, r0]
 800b404:	1e71      	subs	r1, r6, #1
 800b406:	b2c8      	uxtb	r0, r1
 800b408:	2807      	cmp	r0, #7
 800b40a:	d81b      	bhi.n	800b444 <PxMessagingTask+0x11f8>
 800b40c:	b2c9      	uxtb	r1, r1
 800b40e:	0089      	lsls	r1, r1, #2
 800b410:	482f      	ldr	r0, [pc, #188]	; (800b4d0 <PxMessagingTask+0x1284>)
 800b412:	5841      	ldr	r1, [r0, r1]
 800b414:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b416:	0712      	lsls	r2, r2, #28
 800b418:	d109      	bne.n	800b42e <PxMessagingTask+0x11e2>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800b41a:	2001      	movs	r0, #1
 800b41c:	f009 fe50 	bl	80150c0 <malloc>
 800b420:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b422:	d03b      	beq.n	800b49c <PxMessagingTask+0x1250>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b424:	0400      	lsls	r0, r0, #16
 800b426:	1986      	adds	r6, r0, r6
 800b428:	00bf      	lsls	r7, r7, #2
 800b42a:	4a28      	ldr	r2, [pc, #160]	; (800b4cc <PxMessagingTask+0x1280>)
 800b42c:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b42e:	4a26      	ldr	r2, [pc, #152]	; (800b4c8 <PxMessagingTask+0x127c>)
 800b430:	7812      	ldrb	r2, [r2, #0]
 800b432:	2a12      	cmp	r2, #18
 800b434:	d006      	beq.n	800b444 <PxMessagingTask+0x11f8>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800b436:	1ca2      	adds	r2, r4, #2
 800b438:	2038      	movs	r0, #56	; 0x38
 800b43a:	4368      	muls	r0, r5
 800b43c:	491f      	ldr	r1, [pc, #124]	; (800b4bc <PxMessagingTask+0x1270>)
 800b43e:	1809      	adds	r1, r1, r0
 800b440:	5c8a      	ldrb	r2, [r1, r2]
 800b442:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b444:	2338      	movs	r3, #56	; 0x38
 800b446:	436b      	muls	r3, r5
 800b448:	4a1c      	ldr	r2, [pc, #112]	; (800b4bc <PxMessagingTask+0x1270>)
 800b44a:	18d3      	adds	r3, r2, r3
 800b44c:	5d1a      	ldrb	r2, [r3, r4]
 800b44e:	3a01      	subs	r2, #1
 800b450:	0090      	lsls	r0, r2, #2
 800b452:	491e      	ldr	r1, [pc, #120]	; (800b4cc <PxMessagingTask+0x1280>)
 800b454:	5841      	ldr	r1, [r0, r1]
 800b456:	200f      	movs	r0, #15
 800b458:	4008      	ands	r0, r1
 800b45a:	464c      	mov	r4, r9
 800b45c:	5d1b      	ldrb	r3, [r3, r4]
 800b45e:	4298      	cmp	r0, r3
 800b460:	d009      	beq.n	800b476 <PxMessagingTask+0x122a>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800b462:	481c      	ldr	r0, [pc, #112]	; (800b4d4 <PxMessagingTask+0x1288>)
 800b464:	4684      	mov	ip, r0
 800b466:	4463      	add	r3, ip
 800b468:	0092      	lsls	r2, r2, #2
 800b46a:	400b      	ands	r3, r1
 800b46c:	4917      	ldr	r1, [pc, #92]	; (800b4cc <PxMessagingTask+0x1280>)
 800b46e:	5053      	str	r3, [r2, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800b470:	4b15      	ldr	r3, [pc, #84]	; (800b4c8 <PxMessagingTask+0x127c>)
 800b472:	2214      	movs	r2, #20
 800b474:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800b476:	4b18      	ldr	r3, [pc, #96]	; (800b4d8 <PxMessagingTask+0x128c>)
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b60      	cmp	r3, #96	; 0x60
 800b47c:	d003      	beq.n	800b486 <PxMessagingTask+0x123a>
 800b47e:	2b20      	cmp	r3, #32
 800b480:	d001      	beq.n	800b486 <PxMessagingTask+0x123a>
 800b482:	f7fe ff39 	bl	800a2f8 <PxMessagingTask+0xac>
								messageParams[0] =responseStatus;
 800b486:	4b10      	ldr	r3, [pc, #64]	; (800b4c8 <PxMessagingTask+0x127c>)
 800b488:	781a      	ldrb	r2, [r3, #0]
 800b48a:	4b06      	ldr	r3, [pc, #24]	; (800b4a4 <PxMessagingTask+0x1258>)
 800b48c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800b48e:	2201      	movs	r2, #1
 800b490:	2121      	movs	r1, #33	; 0x21
 800b492:	9805      	ldr	r0, [sp, #20]
 800b494:	f7fe fbbe 	bl	8009c14 <SendMessageToModule>
 800b498:	f7fe ff2e 	bl	800a2f8 <PxMessagingTask+0xac>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b49c:	4a0a      	ldr	r2, [pc, #40]	; (800b4c8 <PxMessagingTask+0x127c>)
 800b49e:	2112      	movs	r1, #18
 800b4a0:	7011      	strb	r1, [r2, #0]
 800b4a2:	e7c4      	b.n	800b42e <PxMessagingTask+0x11e2>
 800b4a4:	20000f34 	.word	0x20000f34
 800b4a8:	20000001 	.word	0x20000001
 800b4ac:	20000002 	.word	0x20000002
 800b4b0:	20000003 	.word	0x20000003
 800b4b4:	20001100 	.word	0x20001100
 800b4b8:	0801c964 	.word	0x0801c964
 800b4bc:	20000d3c 	.word	0x20000d3c
 800b4c0:	20000078 	.word	0x20000078
 800b4c4:	0801c984 	.word	0x0801c984
 800b4c8:	20001108 	.word	0x20001108
 800b4cc:	20006fd4 	.word	0x20006fd4
 800b4d0:	0801c9a8 	.word	0x0801c9a8
 800b4d4:	0000fff0 	.word	0x0000fff0
 800b4d8:	20006fcc 	.word	0x20006fcc
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b4dc:	0712      	lsls	r2, r2, #28
 800b4de:	d109      	bne.n	800b4f4 <PxMessagingTask+0x12a8>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	f009 fded 	bl	80150c0 <malloc>
 800b4e6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b4e8:	d010      	beq.n	800b50c <PxMessagingTask+0x12c0>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b4ea:	0400      	lsls	r0, r0, #16
 800b4ec:	1986      	adds	r6, r0, r6
 800b4ee:	00bf      	lsls	r7, r7, #2
 800b4f0:	4ad7      	ldr	r2, [pc, #860]	; (800b850 <PxMessagingTask+0x1604>)
 800b4f2:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b4f4:	4ad7      	ldr	r2, [pc, #860]	; (800b854 <PxMessagingTask+0x1608>)
 800b4f6:	7812      	ldrb	r2, [r2, #0]
 800b4f8:	2a12      	cmp	r2, #18
 800b4fa:	d0a3      	beq.n	800b444 <PxMessagingTask+0x11f8>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800b4fc:	1ca2      	adds	r2, r4, #2
 800b4fe:	2038      	movs	r0, #56	; 0x38
 800b500:	4368      	muls	r0, r5
 800b502:	49d5      	ldr	r1, [pc, #852]	; (800b858 <PxMessagingTask+0x160c>)
 800b504:	1809      	adds	r1, r1, r0
 800b506:	568a      	ldrsb	r2, [r1, r2]
 800b508:	701a      	strb	r2, [r3, #0]
 800b50a:	e79b      	b.n	800b444 <PxMessagingTask+0x11f8>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b50c:	4ad1      	ldr	r2, [pc, #836]	; (800b854 <PxMessagingTask+0x1608>)
 800b50e:	2112      	movs	r1, #18
 800b510:	7011      	strb	r1, [r2, #0]
 800b512:	e7ef      	b.n	800b4f4 <PxMessagingTask+0x12a8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b514:	0712      	lsls	r2, r2, #28
 800b516:	d109      	bne.n	800b52c <PxMessagingTask+0x12e0>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800b518:	2002      	movs	r0, #2
 800b51a:	f009 fdd1 	bl	80150c0 <malloc>
 800b51e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b520:	d015      	beq.n	800b54e <PxMessagingTask+0x1302>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b522:	0400      	lsls	r0, r0, #16
 800b524:	1986      	adds	r6, r0, r6
 800b526:	00bf      	lsls	r7, r7, #2
 800b528:	4ac9      	ldr	r2, [pc, #804]	; (800b850 <PxMessagingTask+0x1604>)
 800b52a:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b52c:	4ac9      	ldr	r2, [pc, #804]	; (800b854 <PxMessagingTask+0x1608>)
 800b52e:	7812      	ldrb	r2, [r2, #0]
 800b530:	2a12      	cmp	r2, #18
 800b532:	d087      	beq.n	800b444 <PxMessagingTask+0x11f8>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800b534:	1ca2      	adds	r2, r4, #2
 800b536:	2138      	movs	r1, #56	; 0x38
 800b538:	4369      	muls	r1, r5
 800b53a:	48c7      	ldr	r0, [pc, #796]	; (800b858 <PxMessagingTask+0x160c>)
 800b53c:	1841      	adds	r1, r0, r1
 800b53e:	5c88      	ldrb	r0, [r1, r2]
 800b540:	1ce2      	adds	r2, r4, #3
 800b542:	5c8a      	ldrb	r2, [r1, r2]
 800b544:	0212      	lsls	r2, r2, #8
 800b546:	1882      	adds	r2, r0, r2
 800b548:	b292      	uxth	r2, r2
 800b54a:	801a      	strh	r2, [r3, #0]
 800b54c:	e77a      	b.n	800b444 <PxMessagingTask+0x11f8>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b54e:	4ac1      	ldr	r2, [pc, #772]	; (800b854 <PxMessagingTask+0x1608>)
 800b550:	2112      	movs	r1, #18
 800b552:	7011      	strb	r1, [r2, #0]
 800b554:	e7ea      	b.n	800b52c <PxMessagingTask+0x12e0>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b556:	0712      	lsls	r2, r2, #28
 800b558:	d109      	bne.n	800b56e <PxMessagingTask+0x1322>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800b55a:	2002      	movs	r0, #2
 800b55c:	f009 fdb0 	bl	80150c0 <malloc>
 800b560:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b562:	d016      	beq.n	800b592 <PxMessagingTask+0x1346>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b564:	0400      	lsls	r0, r0, #16
 800b566:	1986      	adds	r6, r0, r6
 800b568:	00bf      	lsls	r7, r7, #2
 800b56a:	4ab9      	ldr	r2, [pc, #740]	; (800b850 <PxMessagingTask+0x1604>)
 800b56c:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b56e:	4ab9      	ldr	r2, [pc, #740]	; (800b854 <PxMessagingTask+0x1608>)
 800b570:	7812      	ldrb	r2, [r2, #0]
 800b572:	2a12      	cmp	r2, #18
 800b574:	d100      	bne.n	800b578 <PxMessagingTask+0x132c>
 800b576:	e765      	b.n	800b444 <PxMessagingTask+0x11f8>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800b578:	1ca2      	adds	r2, r4, #2
 800b57a:	2138      	movs	r1, #56	; 0x38
 800b57c:	4369      	muls	r1, r5
 800b57e:	48b6      	ldr	r0, [pc, #728]	; (800b858 <PxMessagingTask+0x160c>)
 800b580:	1841      	adds	r1, r0, r1
 800b582:	5c88      	ldrb	r0, [r1, r2]
 800b584:	1ce2      	adds	r2, r4, #3
 800b586:	5c8a      	ldrb	r2, [r1, r2]
 800b588:	0212      	lsls	r2, r2, #8
 800b58a:	1882      	adds	r2, r0, r2
 800b58c:	b212      	sxth	r2, r2
 800b58e:	801a      	strh	r2, [r3, #0]
 800b590:	e758      	b.n	800b444 <PxMessagingTask+0x11f8>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b592:	4ab0      	ldr	r2, [pc, #704]	; (800b854 <PxMessagingTask+0x1608>)
 800b594:	2112      	movs	r1, #18
 800b596:	7011      	strb	r1, [r2, #0]
 800b598:	e7e9      	b.n	800b56e <PxMessagingTask+0x1322>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b59a:	0712      	lsls	r2, r2, #28
 800b59c:	d109      	bne.n	800b5b2 <PxMessagingTask+0x1366>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b59e:	2004      	movs	r0, #4
 800b5a0:	f009 fd8e 	bl	80150c0 <malloc>
 800b5a4:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b5a6:	d01d      	beq.n	800b5e4 <PxMessagingTask+0x1398>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b5a8:	0400      	lsls	r0, r0, #16
 800b5aa:	1986      	adds	r6, r0, r6
 800b5ac:	00bf      	lsls	r7, r7, #2
 800b5ae:	4aa8      	ldr	r2, [pc, #672]	; (800b850 <PxMessagingTask+0x1604>)
 800b5b0:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b5b2:	4aa8      	ldr	r2, [pc, #672]	; (800b854 <PxMessagingTask+0x1608>)
 800b5b4:	7812      	ldrb	r2, [r2, #0]
 800b5b6:	2a12      	cmp	r2, #18
 800b5b8:	d100      	bne.n	800b5bc <PxMessagingTask+0x1370>
 800b5ba:	e743      	b.n	800b444 <PxMessagingTask+0x11f8>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b5bc:	1ca2      	adds	r2, r4, #2
 800b5be:	2138      	movs	r1, #56	; 0x38
 800b5c0:	4369      	muls	r1, r5
 800b5c2:	48a5      	ldr	r0, [pc, #660]	; (800b858 <PxMessagingTask+0x160c>)
 800b5c4:	1841      	adds	r1, r0, r1
 800b5c6:	5c88      	ldrb	r0, [r1, r2]
 800b5c8:	1ce2      	adds	r2, r4, #3
 800b5ca:	5c8a      	ldrb	r2, [r1, r2]
 800b5cc:	0212      	lsls	r2, r2, #8
 800b5ce:	1880      	adds	r0, r0, r2
 800b5d0:	1d22      	adds	r2, r4, #4
 800b5d2:	5c8a      	ldrb	r2, [r1, r2]
 800b5d4:	0412      	lsls	r2, r2, #16
 800b5d6:	1882      	adds	r2, r0, r2
 800b5d8:	1d60      	adds	r0, r4, #5
 800b5da:	5c09      	ldrb	r1, [r1, r0]
 800b5dc:	0609      	lsls	r1, r1, #24
 800b5de:	1852      	adds	r2, r2, r1
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	e72f      	b.n	800b444 <PxMessagingTask+0x11f8>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b5e4:	4a9b      	ldr	r2, [pc, #620]	; (800b854 <PxMessagingTask+0x1608>)
 800b5e6:	2112      	movs	r1, #18
 800b5e8:	7011      	strb	r1, [r2, #0]
 800b5ea:	e7e2      	b.n	800b5b2 <PxMessagingTask+0x1366>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b5ec:	0712      	lsls	r2, r2, #28
 800b5ee:	d109      	bne.n	800b604 <PxMessagingTask+0x13b8>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b5f0:	2004      	movs	r0, #4
 800b5f2:	f009 fd65 	bl	80150c0 <malloc>
 800b5f6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b5f8:	d01d      	beq.n	800b636 <PxMessagingTask+0x13ea>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b5fa:	0400      	lsls	r0, r0, #16
 800b5fc:	1986      	adds	r6, r0, r6
 800b5fe:	00bf      	lsls	r7, r7, #2
 800b600:	4a93      	ldr	r2, [pc, #588]	; (800b850 <PxMessagingTask+0x1604>)
 800b602:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b604:	4a93      	ldr	r2, [pc, #588]	; (800b854 <PxMessagingTask+0x1608>)
 800b606:	7812      	ldrb	r2, [r2, #0]
 800b608:	2a12      	cmp	r2, #18
 800b60a:	d100      	bne.n	800b60e <PxMessagingTask+0x13c2>
 800b60c:	e71a      	b.n	800b444 <PxMessagingTask+0x11f8>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800b60e:	1ca2      	adds	r2, r4, #2
 800b610:	2138      	movs	r1, #56	; 0x38
 800b612:	4369      	muls	r1, r5
 800b614:	4890      	ldr	r0, [pc, #576]	; (800b858 <PxMessagingTask+0x160c>)
 800b616:	1841      	adds	r1, r0, r1
 800b618:	5c88      	ldrb	r0, [r1, r2]
 800b61a:	1ce2      	adds	r2, r4, #3
 800b61c:	5c8a      	ldrb	r2, [r1, r2]
 800b61e:	0212      	lsls	r2, r2, #8
 800b620:	1880      	adds	r0, r0, r2
 800b622:	1d22      	adds	r2, r4, #4
 800b624:	5c8a      	ldrb	r2, [r1, r2]
 800b626:	0412      	lsls	r2, r2, #16
 800b628:	1882      	adds	r2, r0, r2
 800b62a:	1d60      	adds	r0, r4, #5
 800b62c:	5c09      	ldrb	r1, [r1, r0]
 800b62e:	0609      	lsls	r1, r1, #24
 800b630:	1852      	adds	r2, r2, r1
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	e706      	b.n	800b444 <PxMessagingTask+0x11f8>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b636:	4a87      	ldr	r2, [pc, #540]	; (800b854 <PxMessagingTask+0x1608>)
 800b638:	2112      	movs	r1, #18
 800b63a:	7011      	strb	r1, [r2, #0]
 800b63c:	e7e2      	b.n	800b604 <PxMessagingTask+0x13b8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b63e:	0712      	lsls	r2, r2, #28
 800b640:	d109      	bne.n	800b656 <PxMessagingTask+0x140a>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800b642:	2004      	movs	r0, #4
 800b644:	f009 fd3c 	bl	80150c0 <malloc>
 800b648:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b64a:	d021      	beq.n	800b690 <PxMessagingTask+0x1444>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b64c:	0400      	lsls	r0, r0, #16
 800b64e:	1986      	adds	r6, r0, r6
 800b650:	00bf      	lsls	r7, r7, #2
 800b652:	4a7f      	ldr	r2, [pc, #508]	; (800b850 <PxMessagingTask+0x1604>)
 800b654:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL){ // Write remote value
 800b656:	4a7f      	ldr	r2, [pc, #508]	; (800b854 <PxMessagingTask+0x1608>)
 800b658:	7812      	ldrb	r2, [r2, #0]
 800b65a:	2a12      	cmp	r2, #18
 800b65c:	d100      	bne.n	800b660 <PxMessagingTask+0x1414>
 800b65e:	e6f1      	b.n	800b444 <PxMessagingTask+0x11f8>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b660:	1ca2      	adds	r2, r4, #2
 800b662:	2138      	movs	r1, #56	; 0x38
 800b664:	4369      	muls	r1, r5
 800b666:	487c      	ldr	r0, [pc, #496]	; (800b858 <PxMessagingTask+0x160c>)
 800b668:	1841      	adds	r1, r0, r1
 800b66a:	5c88      	ldrb	r0, [r1, r2]
 800b66c:	1ce2      	adds	r2, r4, #3
 800b66e:	5c8a      	ldrb	r2, [r1, r2]
 800b670:	0212      	lsls	r2, r2, #8
 800b672:	1880      	adds	r0, r0, r2
 800b674:	1d22      	adds	r2, r4, #4
 800b676:	5c8a      	ldrb	r2, [r1, r2]
 800b678:	0412      	lsls	r2, r2, #16
 800b67a:	1882      	adds	r2, r0, r2
 800b67c:	1d60      	adds	r0, r4, #5
 800b67e:	5c09      	ldrb	r1, [r1, r0]
 800b680:	0609      	lsls	r1, r1, #24
 800b682:	1852      	adds	r2, r2, r1
 800b684:	4975      	ldr	r1, [pc, #468]	; (800b85c <PxMessagingTask+0x1610>)
 800b686:	600a      	str	r2, [r1, #0]
 800b688:	2000      	movs	r0, #0
 800b68a:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	e6d9      	b.n	800b444 <PxMessagingTask+0x11f8>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b690:	4a70      	ldr	r2, [pc, #448]	; (800b854 <PxMessagingTask+0x1608>)
 800b692:	2112      	movs	r1, #18
 800b694:	7011      	strb	r1, [r2, #0]
 800b696:	e7de      	b.n	800b656 <PxMessagingTask+0x140a>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800b698:	4b6e      	ldr	r3, [pc, #440]	; (800b854 <PxMessagingTask+0x1608>)
 800b69a:	2213      	movs	r2, #19
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	e6ea      	b.n	800b476 <PxMessagingTask+0x122a>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800b6a0:	1ca2      	adds	r2, r4, #2
 800b6a2:	2338      	movs	r3, #56	; 0x38
 800b6a4:	436b      	muls	r3, r5
 800b6a6:	496c      	ldr	r1, [pc, #432]	; (800b858 <PxMessagingTask+0x160c>)
 800b6a8:	18cb      	adds	r3, r1, r3
 800b6aa:	5c9f      	ldrb	r7, [r3, r2]
 800b6ac:	063f      	lsls	r7, r7, #24
 800b6ae:	1ce2      	adds	r2, r4, #3
 800b6b0:	5c9a      	ldrb	r2, [r3, r2]
 800b6b2:	0412      	lsls	r2, r2, #16
 800b6b4:	18bf      	adds	r7, r7, r2
 800b6b6:	1d22      	adds	r2, r4, #4
 800b6b8:	5c9a      	ldrb	r2, [r3, r2]
 800b6ba:	0212      	lsls	r2, r2, #8
 800b6bc:	18bf      	adds	r7, r7, r2
 800b6be:	1d62      	adds	r2, r4, #5
 800b6c0:	5c9b      	ldrb	r3, [r3, r2]
 800b6c2:	18ff      	adds	r7, r7, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800b6c4:	23e0      	movs	r3, #224	; 0xe0
 800b6c6:	061b      	lsls	r3, r3, #24
 800b6c8:	18fa      	adds	r2, r7, r3
 800b6ca:	4b65      	ldr	r3, [pc, #404]	; (800b860 <PxMessagingTask+0x1614>)
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d87c      	bhi.n	800b7ca <PxMessagingTask+0x157e>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800b6d0:	1c63      	adds	r3, r4, #1
 800b6d2:	2138      	movs	r1, #56	; 0x38
 800b6d4:	4369      	muls	r1, r5
 800b6d6:	4a60      	ldr	r2, [pc, #384]	; (800b858 <PxMessagingTask+0x160c>)
 800b6d8:	1852      	adds	r2, r2, r1
 800b6da:	5cd3      	ldrb	r3, [r2, r3]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	2a07      	cmp	r2, #7
 800b6e2:	d900      	bls.n	800b6e6 <PxMessagingTask+0x149a>
 800b6e4:	e6c7      	b.n	800b476 <PxMessagingTask+0x122a>
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4a5e      	ldr	r2, [pc, #376]	; (800b864 <PxMessagingTask+0x1618>)
 800b6ec:	58d3      	ldr	r3, [r2, r3]
 800b6ee:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800b6f0:	3406      	adds	r4, #6
 800b6f2:	2238      	movs	r2, #56	; 0x38
 800b6f4:	436a      	muls	r2, r5
 800b6f6:	4b58      	ldr	r3, [pc, #352]	; (800b858 <PxMessagingTask+0x160c>)
 800b6f8:	189b      	adds	r3, r3, r2
 800b6fa:	5d1b      	ldrb	r3, [r3, r4]
 800b6fc:	703b      	strb	r3, [r7, #0]
											break;
 800b6fe:	e6ba      	b.n	800b476 <PxMessagingTask+0x122a>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800b700:	3406      	adds	r4, #6
 800b702:	2238      	movs	r2, #56	; 0x38
 800b704:	436a      	muls	r2, r5
 800b706:	4b54      	ldr	r3, [pc, #336]	; (800b858 <PxMessagingTask+0x160c>)
 800b708:	189b      	adds	r3, r3, r2
 800b70a:	571b      	ldrsb	r3, [r3, r4]
 800b70c:	703b      	strb	r3, [r7, #0]
											break;
 800b70e:	e6b2      	b.n	800b476 <PxMessagingTask+0x122a>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b710:	1da1      	adds	r1, r4, #6
 800b712:	2338      	movs	r3, #56	; 0x38
 800b714:	436b      	muls	r3, r5
 800b716:	4a50      	ldr	r2, [pc, #320]	; (800b858 <PxMessagingTask+0x160c>)
 800b718:	18d2      	adds	r2, r2, r3
 800b71a:	5c53      	ldrb	r3, [r2, r1]
 800b71c:	3407      	adds	r4, #7
 800b71e:	5d12      	ldrb	r2, [r2, r4]
 800b720:	0212      	lsls	r2, r2, #8
 800b722:	189b      	adds	r3, r3, r2
 800b724:	b29b      	uxth	r3, r3
 800b726:	803b      	strh	r3, [r7, #0]
											break;
 800b728:	e6a5      	b.n	800b476 <PxMessagingTask+0x122a>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800b72a:	1da1      	adds	r1, r4, #6
 800b72c:	2338      	movs	r3, #56	; 0x38
 800b72e:	436b      	muls	r3, r5
 800b730:	4a49      	ldr	r2, [pc, #292]	; (800b858 <PxMessagingTask+0x160c>)
 800b732:	18d2      	adds	r2, r2, r3
 800b734:	5c53      	ldrb	r3, [r2, r1]
 800b736:	3407      	adds	r4, #7
 800b738:	5d12      	ldrb	r2, [r2, r4]
 800b73a:	0212      	lsls	r2, r2, #8
 800b73c:	189b      	adds	r3, r3, r2
 800b73e:	b21b      	sxth	r3, r3
 800b740:	803b      	strh	r3, [r7, #0]
											break;
 800b742:	e698      	b.n	800b476 <PxMessagingTask+0x122a>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b744:	1da1      	adds	r1, r4, #6
 800b746:	2338      	movs	r3, #56	; 0x38
 800b748:	436b      	muls	r3, r5
 800b74a:	4a43      	ldr	r2, [pc, #268]	; (800b858 <PxMessagingTask+0x160c>)
 800b74c:	18d2      	adds	r2, r2, r3
 800b74e:	5c53      	ldrb	r3, [r2, r1]
 800b750:	1de1      	adds	r1, r4, #7
 800b752:	5c51      	ldrb	r1, [r2, r1]
 800b754:	0209      	lsls	r1, r1, #8
 800b756:	185b      	adds	r3, r3, r1
 800b758:	0021      	movs	r1, r4
 800b75a:	3108      	adds	r1, #8
 800b75c:	5c51      	ldrb	r1, [r2, r1]
 800b75e:	0409      	lsls	r1, r1, #16
 800b760:	185b      	adds	r3, r3, r1
 800b762:	3409      	adds	r4, #9
 800b764:	5d12      	ldrb	r2, [r2, r4]
 800b766:	0612      	lsls	r2, r2, #24
 800b768:	189b      	adds	r3, r3, r2
 800b76a:	603b      	str	r3, [r7, #0]
											break;
 800b76c:	e683      	b.n	800b476 <PxMessagingTask+0x122a>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800b76e:	1da1      	adds	r1, r4, #6
 800b770:	2338      	movs	r3, #56	; 0x38
 800b772:	436b      	muls	r3, r5
 800b774:	4a38      	ldr	r2, [pc, #224]	; (800b858 <PxMessagingTask+0x160c>)
 800b776:	18d2      	adds	r2, r2, r3
 800b778:	5c53      	ldrb	r3, [r2, r1]
 800b77a:	1de1      	adds	r1, r4, #7
 800b77c:	5c51      	ldrb	r1, [r2, r1]
 800b77e:	0209      	lsls	r1, r1, #8
 800b780:	185b      	adds	r3, r3, r1
 800b782:	0021      	movs	r1, r4
 800b784:	3108      	adds	r1, #8
 800b786:	5c51      	ldrb	r1, [r2, r1]
 800b788:	0409      	lsls	r1, r1, #16
 800b78a:	185b      	adds	r3, r3, r1
 800b78c:	3409      	adds	r4, #9
 800b78e:	5d12      	ldrb	r2, [r2, r4]
 800b790:	0612      	lsls	r2, r2, #24
 800b792:	189b      	adds	r3, r3, r2
 800b794:	603b      	str	r3, [r7, #0]
											break;
 800b796:	e66e      	b.n	800b476 <PxMessagingTask+0x122a>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b798:	1da1      	adds	r1, r4, #6
 800b79a:	2338      	movs	r3, #56	; 0x38
 800b79c:	436b      	muls	r3, r5
 800b79e:	4a2e      	ldr	r2, [pc, #184]	; (800b858 <PxMessagingTask+0x160c>)
 800b7a0:	18d2      	adds	r2, r2, r3
 800b7a2:	5c53      	ldrb	r3, [r2, r1]
 800b7a4:	1de1      	adds	r1, r4, #7
 800b7a6:	5c51      	ldrb	r1, [r2, r1]
 800b7a8:	0209      	lsls	r1, r1, #8
 800b7aa:	185b      	adds	r3, r3, r1
 800b7ac:	0021      	movs	r1, r4
 800b7ae:	3108      	adds	r1, #8
 800b7b0:	5c51      	ldrb	r1, [r2, r1]
 800b7b2:	0409      	lsls	r1, r1, #16
 800b7b4:	185b      	adds	r3, r3, r1
 800b7b6:	3409      	adds	r4, #9
 800b7b8:	5d12      	ldrb	r2, [r2, r4]
 800b7ba:	0612      	lsls	r2, r2, #24
 800b7bc:	189b      	adds	r3, r3, r2
 800b7be:	4a27      	ldr	r2, [pc, #156]	; (800b85c <PxMessagingTask+0x1610>)
 800b7c0:	6013      	str	r3, [r2, #0]
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800b7c6:	603b      	str	r3, [r7, #0]
											break;
 800b7c8:	e655      	b.n	800b476 <PxMessagingTask+0x122a>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800b7ca:	4a27      	ldr	r2, [pc, #156]	; (800b868 <PxMessagingTask+0x161c>)
 800b7cc:	23f8      	movs	r3, #248	; 0xf8
 800b7ce:	061b      	lsls	r3, r3, #24
 800b7d0:	18fb      	adds	r3, r7, r3
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d900      	bls.n	800b7d8 <PxMessagingTask+0x158c>
 800b7d6:	e0c2      	b.n	800b95e <PxMessagingTask+0x1712>
									HAL_FLASH_Unlock();
 800b7d8:	f007 fcaa 	bl	8013130 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800b7dc:	2e22      	cmp	r6, #34	; 0x22
 800b7de:	d111      	bne.n	800b804 <PxMessagingTask+0x15b8>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress =temp32;
 800b7e4:	9714      	str	r7, [sp, #80]	; 0x50
										erase.NbPages =1;
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	9315      	str	r3, [sp, #84]	; 0x54
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b7ea:	a912      	add	r1, sp, #72	; 0x48
 800b7ec:	a813      	add	r0, sp, #76	; 0x4c
 800b7ee:	f007 fd5f 	bl	80132b0 <HAL_FLASHEx_Erase>
 800b7f2:	9008      	str	r0, [sp, #32]
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d102      	bne.n	800b7fe <PxMessagingTask+0x15b2>
 800b7f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	d002      	beq.n	800b804 <PxMessagingTask+0x15b8>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b7fe:	4b15      	ldr	r3, [pc, #84]	; (800b854 <PxMessagingTask+0x1608>)
 800b800:	2216      	movs	r2, #22
 800b802:	701a      	strb	r2, [r3, #0]
									if(responseStatus == BOS_OK){
 800b804:	4b13      	ldr	r3, [pc, #76]	; (800b854 <PxMessagingTask+0x1608>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d116      	bne.n	800b83a <PxMessagingTask+0x15ee>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800b80c:	1c63      	adds	r3, r4, #1
 800b80e:	2138      	movs	r1, #56	; 0x38
 800b810:	4369      	muls	r1, r5
 800b812:	4a11      	ldr	r2, [pc, #68]	; (800b858 <PxMessagingTask+0x160c>)
 800b814:	1852      	adds	r2, r2, r1
 800b816:	5cd3      	ldrb	r3, [r2, r3]
 800b818:	3b01      	subs	r3, #1
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	2a07      	cmp	r2, #7
 800b81e:	d80c      	bhi.n	800b83a <PxMessagingTask+0x15ee>
 800b820:	b2db      	uxtb	r3, r3
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4a11      	ldr	r2, [pc, #68]	; (800b86c <PxMessagingTask+0x1620>)
 800b826:	58d3      	ldr	r3, [r2, r3]
 800b828:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b82a:	883b      	ldrh	r3, [r7, #0]
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	4a10      	ldr	r2, [pc, #64]	; (800b870 <PxMessagingTask+0x1624>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d01f      	beq.n	800b874 <PxMessagingTask+0x1628>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b834:	4b07      	ldr	r3, [pc, #28]	; (800b854 <PxMessagingTask+0x1608>)
 800b836:	2216      	movs	r2, #22
 800b838:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800b83a:	f007 fc8d 	bl	8013158 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b83e:	9b08      	ldr	r3, [sp, #32]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d100      	bne.n	800b846 <PxMessagingTask+0x15fa>
 800b844:	e617      	b.n	800b476 <PxMessagingTask+0x122a>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b846:	4b03      	ldr	r3, [pc, #12]	; (800b854 <PxMessagingTask+0x1608>)
 800b848:	2216      	movs	r2, #22
 800b84a:	701a      	strb	r2, [r3, #0]
 800b84c:	e613      	b.n	800b476 <PxMessagingTask+0x122a>
 800b84e:	46c0      	nop			; (mov r8, r8)
 800b850:	20006fd4 	.word	0x20006fd4
 800b854:	20001108 	.word	0x20001108
 800b858:	20000d3c 	.word	0x20000d3c
 800b85c:	20001100 	.word	0x20001100
 800b860:	00007fff 	.word	0x00007fff
 800b864:	0801c9c8 	.word	0x0801c9c8
 800b868:	0001ffff 	.word	0x0001ffff
 800b86c:	0801c9e8 	.word	0x0801c9e8
 800b870:	0000ffff 	.word	0x0000ffff
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b874:	3406      	adds	r4, #6
 800b876:	2238      	movs	r2, #56	; 0x38
 800b878:	436a      	muls	r2, r5
 800b87a:	4bcf      	ldr	r3, [pc, #828]	; (800bbb8 <PxMessagingTask+0x196c>)
 800b87c:	189b      	adds	r3, r3, r2
 800b87e:	5d1a      	ldrb	r2, [r3, r4]
 800b880:	2300      	movs	r3, #0
 800b882:	49ce      	ldr	r1, [pc, #824]	; (800bbbc <PxMessagingTask+0x1970>)
 800b884:	600a      	str	r2, [r1, #0]
 800b886:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b888:	0039      	movs	r1, r7
 800b88a:	2001      	movs	r0, #1
 800b88c:	f007 fc9c 	bl	80131c8 <HAL_FLASH_Program>
 800b890:	9008      	str	r0, [sp, #32]
													break;
 800b892:	e7d2      	b.n	800b83a <PxMessagingTask+0x15ee>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b894:	883b      	ldrh	r3, [r7, #0]
 800b896:	b29b      	uxth	r3, r3
 800b898:	4ac9      	ldr	r2, [pc, #804]	; (800bbc0 <PxMessagingTask+0x1974>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d003      	beq.n	800b8a6 <PxMessagingTask+0x165a>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b89e:	4bc9      	ldr	r3, [pc, #804]	; (800bbc4 <PxMessagingTask+0x1978>)
 800b8a0:	2216      	movs	r2, #22
 800b8a2:	701a      	strb	r2, [r3, #0]
													break;
 800b8a4:	e7c9      	b.n	800b83a <PxMessagingTask+0x15ee>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b8a6:	1da1      	adds	r1, r4, #6
 800b8a8:	2238      	movs	r2, #56	; 0x38
 800b8aa:	436a      	muls	r2, r5
 800b8ac:	4bc2      	ldr	r3, [pc, #776]	; (800bbb8 <PxMessagingTask+0x196c>)
 800b8ae:	189b      	adds	r3, r3, r2
 800b8b0:	5c5a      	ldrb	r2, [r3, r1]
 800b8b2:	3407      	adds	r4, #7
 800b8b4:	5d1b      	ldrb	r3, [r3, r4]
 800b8b6:	021b      	lsls	r3, r3, #8
 800b8b8:	18d2      	adds	r2, r2, r3
 800b8ba:	17d3      	asrs	r3, r2, #31
 800b8bc:	49bf      	ldr	r1, [pc, #764]	; (800bbbc <PxMessagingTask+0x1970>)
 800b8be:	600a      	str	r2, [r1, #0]
 800b8c0:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b8c2:	0039      	movs	r1, r7
 800b8c4:	2001      	movs	r0, #1
 800b8c6:	f007 fc7f 	bl	80131c8 <HAL_FLASH_Program>
 800b8ca:	9008      	str	r0, [sp, #32]
													break;
 800b8cc:	e7b5      	b.n	800b83a <PxMessagingTask+0x15ee>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	d003      	beq.n	800b8dc <PxMessagingTask+0x1690>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b8d4:	4bbb      	ldr	r3, [pc, #748]	; (800bbc4 <PxMessagingTask+0x1978>)
 800b8d6:	2216      	movs	r2, #22
 800b8d8:	701a      	strb	r2, [r3, #0]
													break;
 800b8da:	e7ae      	b.n	800b83a <PxMessagingTask+0x15ee>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b8dc:	1da2      	adds	r2, r4, #6
 800b8de:	2338      	movs	r3, #56	; 0x38
 800b8e0:	436b      	muls	r3, r5
 800b8e2:	49b5      	ldr	r1, [pc, #724]	; (800bbb8 <PxMessagingTask+0x196c>)
 800b8e4:	18cb      	adds	r3, r1, r3
 800b8e6:	5c9a      	ldrb	r2, [r3, r2]
 800b8e8:	1de1      	adds	r1, r4, #7
 800b8ea:	5c59      	ldrb	r1, [r3, r1]
 800b8ec:	0209      	lsls	r1, r1, #8
 800b8ee:	1852      	adds	r2, r2, r1
 800b8f0:	0021      	movs	r1, r4
 800b8f2:	3108      	adds	r1, #8
 800b8f4:	5c59      	ldrb	r1, [r3, r1]
 800b8f6:	0409      	lsls	r1, r1, #16
 800b8f8:	1852      	adds	r2, r2, r1
 800b8fa:	3409      	adds	r4, #9
 800b8fc:	5d1b      	ldrb	r3, [r3, r4]
 800b8fe:	061b      	lsls	r3, r3, #24
 800b900:	18d2      	adds	r2, r2, r3
 800b902:	2300      	movs	r3, #0
 800b904:	49ad      	ldr	r1, [pc, #692]	; (800bbbc <PxMessagingTask+0x1970>)
 800b906:	600a      	str	r2, [r1, #0]
 800b908:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b90a:	0039      	movs	r1, r7
 800b90c:	2002      	movs	r0, #2
 800b90e:	f007 fc5b 	bl	80131c8 <HAL_FLASH_Program>
 800b912:	9008      	str	r0, [sp, #32]
													break;
 800b914:	e791      	b.n	800b83a <PxMessagingTask+0x15ee>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	3301      	adds	r3, #1
 800b91a:	d003      	beq.n	800b924 <PxMessagingTask+0x16d8>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b91c:	4ba9      	ldr	r3, [pc, #676]	; (800bbc4 <PxMessagingTask+0x1978>)
 800b91e:	2216      	movs	r2, #22
 800b920:	701a      	strb	r2, [r3, #0]
													break;
 800b922:	e78a      	b.n	800b83a <PxMessagingTask+0x15ee>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b924:	1da2      	adds	r2, r4, #6
 800b926:	2338      	movs	r3, #56	; 0x38
 800b928:	436b      	muls	r3, r5
 800b92a:	49a3      	ldr	r1, [pc, #652]	; (800bbb8 <PxMessagingTask+0x196c>)
 800b92c:	18cb      	adds	r3, r1, r3
 800b92e:	5c9a      	ldrb	r2, [r3, r2]
 800b930:	1de1      	adds	r1, r4, #7
 800b932:	5c59      	ldrb	r1, [r3, r1]
 800b934:	0209      	lsls	r1, r1, #8
 800b936:	1852      	adds	r2, r2, r1
 800b938:	0021      	movs	r1, r4
 800b93a:	3108      	adds	r1, #8
 800b93c:	5c59      	ldrb	r1, [r3, r1]
 800b93e:	0409      	lsls	r1, r1, #16
 800b940:	1852      	adds	r2, r2, r1
 800b942:	3409      	adds	r4, #9
 800b944:	5d1b      	ldrb	r3, [r3, r4]
 800b946:	061b      	lsls	r3, r3, #24
 800b948:	18d2      	adds	r2, r2, r3
 800b94a:	2300      	movs	r3, #0
 800b94c:	499b      	ldr	r1, [pc, #620]	; (800bbbc <PxMessagingTask+0x1970>)
 800b94e:	600a      	str	r2, [r1, #0]
 800b950:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b952:	0039      	movs	r1, r7
 800b954:	2003      	movs	r0, #3
 800b956:	f007 fc37 	bl	80131c8 <HAL_FLASH_Program>
 800b95a:	9008      	str	r0, [sp, #32]
													break;
 800b95c:	e76d      	b.n	800b83a <PxMessagingTask+0x15ee>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b95e:	4b99      	ldr	r3, [pc, #612]	; (800bbc4 <PxMessagingTask+0x1978>)
 800b960:	2215      	movs	r2, #21
 800b962:	701a      	strb	r2, [r3, #0]
 800b964:	e587      	b.n	800b476 <PxMessagingTask+0x122a>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b966:	00eb      	lsls	r3, r5, #3
 800b968:	1b5b      	subs	r3, r3, r5
 800b96a:	00da      	lsls	r2, r3, #3
 800b96c:	4b92      	ldr	r3, [pc, #584]	; (800bbb8 <PxMessagingTask+0x196c>)
 800b96e:	189b      	adds	r3, r3, r2
 800b970:	5d1a      	ldrb	r2, [r3, r4]
 800b972:	4b94      	ldr	r3, [pc, #592]	; (800bbc4 <PxMessagingTask+0x1978>)
 800b974:	701a      	strb	r2, [r3, #0]
							break;
 800b976:	f7fe fcbf 	bl	800a2f8 <PxMessagingTask+0xac>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b97a:	1c60      	adds	r0, r4, #1
 800b97c:	00eb      	lsls	r3, r5, #3
 800b97e:	1b5a      	subs	r2, r3, r5
 800b980:	00d1      	lsls	r1, r2, #3
 800b982:	1809      	adds	r1, r1, r0
 800b984:	488c      	ldr	r0, [pc, #560]	; (800bbb8 <PxMessagingTask+0x196c>)
 800b986:	1809      	adds	r1, r1, r0
 800b988:	1e7a      	subs	r2, r7, #1
 800b98a:	b292      	uxth	r2, r2
 800b98c:	1b5b      	subs	r3, r3, r5
 800b98e:	00de      	lsls	r6, r3, #3
 800b990:	1980      	adds	r0, r0, r6
 800b992:	5d00      	ldrb	r0, [r0, r4]
 800b994:	230a      	movs	r3, #10
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	f004 f876 	bl	800fa88 <writePxMutex>
							break;
 800b99c:	f7fe fcac 	bl	800a2f8 <PxMessagingTask+0xac>
							switch(cMessage[port - 1][0 + shift]){
 800b9a0:	00eb      	lsls	r3, r5, #3
 800b9a2:	1b5b      	subs	r3, r3, r5
 800b9a4:	00da      	lsls	r2, r3, #3
 800b9a6:	4b84      	ldr	r3, [pc, #528]	; (800bbb8 <PxMessagingTask+0x196c>)
 800b9a8:	189b      	adds	r3, r3, r2
 800b9aa:	5d18      	ldrb	r0, [r3, r4]
 800b9ac:	282b      	cmp	r0, #43	; 0x2b
 800b9ae:	d900      	bls.n	800b9b2 <PxMessagingTask+0x1766>
 800b9b0:	e0cb      	b.n	800bb4a <PxMessagingTask+0x18fe>
 800b9b2:	0083      	lsls	r3, r0, #2
 800b9b4:	4a84      	ldr	r2, [pc, #528]	; (800bbc8 <PxMessagingTask+0x197c>)
 800b9b6:	58d3      	ldr	r3, [r2, r3]
 800b9b8:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b9ba:	1c62      	adds	r2, r4, #1
 800b9bc:	2338      	movs	r3, #56	; 0x38
 800b9be:	436b      	muls	r3, r5
 800b9c0:	497d      	ldr	r1, [pc, #500]	; (800bbb8 <PxMessagingTask+0x196c>)
 800b9c2:	18cb      	adds	r3, r1, r3
 800b9c4:	5c9a      	ldrb	r2, [r3, r2]
 800b9c6:	1ca1      	adds	r1, r4, #2
 800b9c8:	5c59      	ldrb	r1, [r3, r1]
 800b9ca:	0209      	lsls	r1, r1, #8
 800b9cc:	1852      	adds	r2, r2, r1
 800b9ce:	1ce1      	adds	r1, r4, #3
 800b9d0:	5c59      	ldrb	r1, [r3, r1]
 800b9d2:	0409      	lsls	r1, r1, #16
 800b9d4:	1852      	adds	r2, r2, r1
 800b9d6:	1d21      	adds	r1, r4, #4
 800b9d8:	5c59      	ldrb	r1, [r3, r1]
 800b9da:	0609      	lsls	r1, r1, #24
 800b9dc:	1852      	adds	r2, r2, r1
 800b9de:	497b      	ldr	r1, [pc, #492]	; (800bbcc <PxMessagingTask+0x1980>)
 800b9e0:	600a      	str	r2, [r1, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b9e2:	1d62      	adds	r2, r4, #5
 800b9e4:	5c98      	ldrb	r0, [r3, r2]
 800b9e6:	1da2      	adds	r2, r4, #6
 800b9e8:	5c9a      	ldrb	r2, [r3, r2]
 800b9ea:	0212      	lsls	r2, r2, #8
 800b9ec:	1880      	adds	r0, r0, r2
 800b9ee:	1de2      	adds	r2, r4, #7
 800b9f0:	5c9a      	ldrb	r2, [r3, r2]
 800b9f2:	0412      	lsls	r2, r2, #16
 800b9f4:	1880      	adds	r0, r0, r2
 800b9f6:	0022      	movs	r2, r4
 800b9f8:	3208      	adds	r2, #8
 800b9fa:	5c9a      	ldrb	r2, [r3, r2]
 800b9fc:	0612      	lsls	r2, r2, #24
 800b9fe:	1882      	adds	r2, r0, r2
 800ba00:	604a      	str	r2, [r1, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800ba02:	0022      	movs	r2, r4
 800ba04:	3209      	adds	r2, #9
 800ba06:	5c98      	ldrb	r0, [r3, r2]
 800ba08:	3201      	adds	r2, #1
 800ba0a:	5c9a      	ldrb	r2, [r3, r2]
 800ba0c:	0212      	lsls	r2, r2, #8
 800ba0e:	1880      	adds	r0, r0, r2
 800ba10:	0022      	movs	r2, r4
 800ba12:	320b      	adds	r2, #11
 800ba14:	5c9a      	ldrb	r2, [r3, r2]
 800ba16:	0412      	lsls	r2, r2, #16
 800ba18:	1882      	adds	r2, r0, r2
 800ba1a:	340c      	adds	r4, #12
 800ba1c:	5d1b      	ldrb	r3, [r3, r4]
 800ba1e:	061b      	lsls	r3, r3, #24
 800ba20:	18d3      	adds	r3, r2, r3
 800ba22:	608b      	str	r3, [r1, #8]
									break;
 800ba24:	e091      	b.n	800bb4a <PxMessagingTask+0x18fe>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ba26:	1c62      	adds	r2, r4, #1
 800ba28:	2338      	movs	r3, #56	; 0x38
 800ba2a:	436b      	muls	r3, r5
 800ba2c:	4962      	ldr	r1, [pc, #392]	; (800bbb8 <PxMessagingTask+0x196c>)
 800ba2e:	18cb      	adds	r3, r1, r3
 800ba30:	5c9a      	ldrb	r2, [r3, r2]
 800ba32:	1ca1      	adds	r1, r4, #2
 800ba34:	5c59      	ldrb	r1, [r3, r1]
 800ba36:	0209      	lsls	r1, r1, #8
 800ba38:	1852      	adds	r2, r2, r1
 800ba3a:	1ce1      	adds	r1, r4, #3
 800ba3c:	5c59      	ldrb	r1, [r3, r1]
 800ba3e:	0409      	lsls	r1, r1, #16
 800ba40:	1852      	adds	r2, r2, r1
 800ba42:	1d21      	adds	r1, r4, #4
 800ba44:	5c59      	ldrb	r1, [r3, r1]
 800ba46:	0609      	lsls	r1, r1, #24
 800ba48:	1852      	adds	r2, r2, r1
 800ba4a:	4960      	ldr	r1, [pc, #384]	; (800bbcc <PxMessagingTask+0x1980>)
 800ba4c:	60ca      	str	r2, [r1, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800ba4e:	1d62      	adds	r2, r4, #5
 800ba50:	5c98      	ldrb	r0, [r3, r2]
 800ba52:	1da2      	adds	r2, r4, #6
 800ba54:	5c9a      	ldrb	r2, [r3, r2]
 800ba56:	0212      	lsls	r2, r2, #8
 800ba58:	1880      	adds	r0, r0, r2
 800ba5a:	1de2      	adds	r2, r4, #7
 800ba5c:	5c9a      	ldrb	r2, [r3, r2]
 800ba5e:	0412      	lsls	r2, r2, #16
 800ba60:	1880      	adds	r0, r0, r2
 800ba62:	0022      	movs	r2, r4
 800ba64:	3208      	adds	r2, #8
 800ba66:	5c9a      	ldrb	r2, [r3, r2]
 800ba68:	0612      	lsls	r2, r2, #24
 800ba6a:	1882      	adds	r2, r0, r2
 800ba6c:	610a      	str	r2, [r1, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800ba6e:	0022      	movs	r2, r4
 800ba70:	3209      	adds	r2, #9
 800ba72:	5c98      	ldrb	r0, [r3, r2]
 800ba74:	3201      	adds	r2, #1
 800ba76:	5c9a      	ldrb	r2, [r3, r2]
 800ba78:	0212      	lsls	r2, r2, #8
 800ba7a:	1880      	adds	r0, r0, r2
 800ba7c:	0022      	movs	r2, r4
 800ba7e:	320b      	adds	r2, #11
 800ba80:	5c9a      	ldrb	r2, [r3, r2]
 800ba82:	0412      	lsls	r2, r2, #16
 800ba84:	1882      	adds	r2, r0, r2
 800ba86:	340c      	adds	r4, #12
 800ba88:	5d1b      	ldrb	r3, [r3, r4]
 800ba8a:	061b      	lsls	r3, r3, #24
 800ba8c:	18d3      	adds	r3, r2, r3
 800ba8e:	614b      	str	r3, [r1, #20]
									break;
 800ba90:	e05b      	b.n	800bb4a <PxMessagingTask+0x18fe>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ba92:	1c63      	adds	r3, r4, #1
 800ba94:	2238      	movs	r2, #56	; 0x38
 800ba96:	436a      	muls	r2, r5
 800ba98:	4947      	ldr	r1, [pc, #284]	; (800bbb8 <PxMessagingTask+0x196c>)
 800ba9a:	188a      	adds	r2, r1, r2
 800ba9c:	5cd1      	ldrb	r1, [r2, r3]
 800ba9e:	1ca3      	adds	r3, r4, #2
 800baa0:	5cd3      	ldrb	r3, [r2, r3]
 800baa2:	021b      	lsls	r3, r3, #8
 800baa4:	18c9      	adds	r1, r1, r3
 800baa6:	1ce3      	adds	r3, r4, #3
 800baa8:	5cd3      	ldrb	r3, [r2, r3]
 800baaa:	041b      	lsls	r3, r3, #16
 800baac:	18c9      	adds	r1, r1, r3
 800baae:	1d23      	adds	r3, r4, #4
 800bab0:	5cd3      	ldrb	r3, [r2, r3]
 800bab2:	061b      	lsls	r3, r3, #24
 800bab4:	18cb      	adds	r3, r1, r3
 800bab6:	4a45      	ldr	r2, [pc, #276]	; (800bbcc <PxMessagingTask+0x1980>)
 800bab8:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800baba:	4b45      	ldr	r3, [pc, #276]	; (800bbd0 <PxMessagingTask+0x1984>)
 800babc:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800babe:	1c63      	adds	r3, r4, #1
 800bac0:	2138      	movs	r1, #56	; 0x38
 800bac2:	4369      	muls	r1, r5
 800bac4:	4a3c      	ldr	r2, [pc, #240]	; (800bbb8 <PxMessagingTask+0x196c>)
 800bac6:	1852      	adds	r2, r2, r1
 800bac8:	5cd3      	ldrb	r3, [r2, r3]
 800baca:	4a42      	ldr	r2, [pc, #264]	; (800bbd4 <PxMessagingTask+0x1988>)
 800bacc:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d140      	bne.n	800bb54 <PxMessagingTask+0x1908>
										ADCSelectChannel(ADCPort,"top");
 800bad2:	4e41      	ldr	r6, [pc, #260]	; (800bbd8 <PxMessagingTask+0x198c>)
 800bad4:	0031      	movs	r1, r6
 800bad6:	f7fd fa4d 	bl	8008f74 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800bada:	4b3d      	ldr	r3, [pc, #244]	; (800bbd0 <PxMessagingTask+0x1984>)
 800badc:	7818      	ldrb	r0, [r3, #0]
 800bade:	4a3f      	ldr	r2, [pc, #252]	; (800bbdc <PxMessagingTask+0x1990>)
 800bae0:	0031      	movs	r1, r6
 800bae2:	f7fd fa79 	bl	8008fd8 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800bae6:	493e      	ldr	r1, [pc, #248]	; (800bbe0 <PxMessagingTask+0x1994>)
 800bae8:	483e      	ldr	r0, [pc, #248]	; (800bbe4 <PxMessagingTask+0x1998>)
 800baea:	f7fd f8b9 	bl	8008c60 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800baee:	00eb      	lsls	r3, r5, #3
 800baf0:	1b5b      	subs	r3, r3, r5
 800baf2:	00da      	lsls	r2, r3, #3
 800baf4:	4e30      	ldr	r6, [pc, #192]	; (800bbb8 <PxMessagingTask+0x196c>)
 800baf6:	18b6      	adds	r6, r6, r2
 800baf8:	5d30      	ldrb	r0, [r6, r4]
 800bafa:	4b35      	ldr	r3, [pc, #212]	; (800bbd0 <PxMessagingTask+0x1984>)
 800bafc:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800bafe:	493a      	ldr	r1, [pc, #232]	; (800bbe8 <PxMessagingTask+0x199c>)
 800bb00:	f7fd f96a 	bl	8008dd8 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800bb04:	1d63      	adds	r3, r4, #5
 800bb06:	5cf3      	ldrb	r3, [r6, r3]
 800bb08:	1da2      	adds	r2, r4, #6
 800bb0a:	5cb2      	ldrb	r2, [r6, r2]
 800bb0c:	0212      	lsls	r2, r2, #8
 800bb0e:	189b      	adds	r3, r3, r2
 800bb10:	1de2      	adds	r2, r4, #7
 800bb12:	5cb2      	ldrb	r2, [r6, r2]
 800bb14:	0412      	lsls	r2, r2, #16
 800bb16:	189b      	adds	r3, r3, r2
 800bb18:	0022      	movs	r2, r4
 800bb1a:	3208      	adds	r2, #8
 800bb1c:	5cb2      	ldrb	r2, [r6, r2]
 800bb1e:	0612      	lsls	r2, r2, #24
 800bb20:	189b      	adds	r3, r3, r2
 800bb22:	4a2a      	ldr	r2, [pc, #168]	; (800bbcc <PxMessagingTask+0x1980>)
 800bb24:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800bb26:	0023      	movs	r3, r4
 800bb28:	3309      	adds	r3, #9
 800bb2a:	5cf3      	ldrb	r3, [r6, r3]
 800bb2c:	0021      	movs	r1, r4
 800bb2e:	310a      	adds	r1, #10
 800bb30:	5c71      	ldrb	r1, [r6, r1]
 800bb32:	0209      	lsls	r1, r1, #8
 800bb34:	185b      	adds	r3, r3, r1
 800bb36:	0021      	movs	r1, r4
 800bb38:	310b      	adds	r1, #11
 800bb3a:	5c71      	ldrb	r1, [r6, r1]
 800bb3c:	0409      	lsls	r1, r1, #16
 800bb3e:	185b      	adds	r3, r3, r1
 800bb40:	340c      	adds	r4, #12
 800bb42:	5d31      	ldrb	r1, [r6, r4]
 800bb44:	0609      	lsls	r1, r1, #24
 800bb46:	185b      	adds	r3, r3, r1
 800bb48:	6213      	str	r3, [r2, #32]
							ACK_FLAG =1;
 800bb4a:	4b28      	ldr	r3, [pc, #160]	; (800bbec <PxMessagingTask+0x19a0>)
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	701a      	strb	r2, [r3, #0]
							break;
 800bb50:	f7fe fbd2 	bl	800a2f8 <PxMessagingTask+0xac>
									else if(1 == ADCSide){
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d1c6      	bne.n	800bae6 <PxMessagingTask+0x189a>
										ADCSelectChannel(ADCPort,"bottom");
 800bb58:	4e25      	ldr	r6, [pc, #148]	; (800bbf0 <PxMessagingTask+0x19a4>)
 800bb5a:	0031      	movs	r1, r6
 800bb5c:	f7fd fa0a 	bl	8008f74 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800bb60:	4b1b      	ldr	r3, [pc, #108]	; (800bbd0 <PxMessagingTask+0x1984>)
 800bb62:	7818      	ldrb	r0, [r3, #0]
 800bb64:	4a1d      	ldr	r2, [pc, #116]	; (800bbdc <PxMessagingTask+0x1990>)
 800bb66:	0031      	movs	r1, r6
 800bb68:	f7fd fa36 	bl	8008fd8 <ReadADCChannel>
 800bb6c:	e7bb      	b.n	800bae6 <PxMessagingTask+0x189a>
							rejected_FLAG =1;
 800bb6e:	4b21      	ldr	r3, [pc, #132]	; (800bbf4 <PxMessagingTask+0x19a8>)
 800bb70:	2201      	movs	r2, #1
 800bb72:	701a      	strb	r2, [r3, #0]
							break;
 800bb74:	f7fe fbc0 	bl	800a2f8 <PxMessagingTask+0xac>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800bb78:	9400      	str	r4, [sp, #0]
 800bb7a:	464b      	mov	r3, r9
 800bb7c:	9a05      	ldr	r2, [sp, #20]
 800bb7e:	9907      	ldr	r1, [sp, #28]
 800bb80:	0030      	movs	r0, r6
 800bb82:	f7fe fb61 	bl	800a248 <User_MessagingParser>
 800bb86:	4683      	mov	fp, r0
							if(result == BOS_ERR_UnknownMessage){
 800bb88:	2801      	cmp	r0, #1
 800bb8a:	d001      	beq.n	800bb90 <PxMessagingTask+0x1944>
 800bb8c:	f7fe fbb4 	bl	800a2f8 <PxMessagingTask+0xac>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800bb90:	9400      	str	r4, [sp, #0]
 800bb92:	464b      	mov	r3, r9
 800bb94:	9a05      	ldr	r2, [sp, #20]
 800bb96:	9907      	ldr	r1, [sp, #28]
 800bb98:	0030      	movs	r0, r6
 800bb9a:	f001 fd1d 	bl	800d5d8 <Module_MessagingTask>
 800bb9e:	4683      	mov	fp, r0
 800bba0:	f7fe fbaa 	bl	800a2f8 <PxMessagingTask+0xac>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800bba4:	2200      	movs	r2, #0
 800bba6:	2100      	movs	r1, #0
 800bba8:	9805      	ldr	r0, [sp, #20]
 800bbaa:	f7fe f833 	bl	8009c14 <SendMessageToModule>
			result =BOS_OK;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	469b      	mov	fp, r3
 800bbb2:	f7fe fba6 	bl	800a302 <PxMessagingTask+0xb6>
 800bbb6:	46c0      	nop			; (mov r8, r8)
 800bbb8:	20000d3c 	.word	0x20000d3c
 800bbbc:	20001100 	.word	0x20001100
 800bbc0:	0000ffff 	.word	0x0000ffff
 800bbc4:	20001108 	.word	0x20001108
 800bbc8:	0801ca08 	.word	0x0801ca08
 800bbcc:	200017e0 	.word	0x200017e0
 800bbd0:	200017d0 	.word	0x200017d0
 800bbd4:	200017d2 	.word	0x200017d2
 800bbd8:	0801a98c 	.word	0x0801a98c
 800bbdc:	200017d4 	.word	0x200017d4
 800bbe0:	200017dc 	.word	0x200017dc
 800bbe4:	200017d8 	.word	0x200017d8
 800bbe8:	200017cc 	.word	0x200017cc
 800bbec:	20000aa4 	.word	0x20000aa4
 800bbf0:	0801a990 	.word	0x0801a990
 800bbf4:	200010fc 	.word	0x200010fc

0800bbf8 <weight1ModParamCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE weight1ModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800bbf8:	b510      	push	{r4, lr}
 800bbfa:	1e04      	subs	r4, r0, #0

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800bbfc:	d101      	bne.n	800bc02 <weight1ModParamCommand+0xa>
 800bbfe:	b672      	cpsid	i
 800bc00:	e7fe      	b.n	800bc00 <weight1ModParamCommand+0x8>

  sprintf( ( char * ) pcWriteBuffer, ( char * ) pcWeightVerboseMsg, weight1_buffer);
 800bc02:	4b06      	ldr	r3, [pc, #24]	; (800bc1c <weight1ModParamCommand+0x24>)
 800bc04:	6818      	ldr	r0, [r3, #0]
 800bc06:	f7f7 fa8d 	bl	8003124 <__aeabi_f2d>
 800bc0a:	0002      	movs	r2, r0
 800bc0c:	000b      	movs	r3, r1
 800bc0e:	4904      	ldr	r1, [pc, #16]	; (800bc20 <weight1ModParamCommand+0x28>)
 800bc10:	0020      	movs	r0, r4
 800bc12:	f009 fea5 	bl	8015960 <sprintf>

  /* There is no more data to return after this single string, so return pdFALSE. */
  return pdFALSE;
}
 800bc16:	2000      	movs	r0, #0
 800bc18:	bd10      	pop	{r4, pc}
 800bc1a:	46c0      	nop			; (mov r8, r8)
 800bc1c:	20007254 	.word	0x20007254
 800bc20:	0801d274 	.word	0x0801d274

0800bc24 <weight2ModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE weight2ModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800bc24:	b510      	push	{r4, lr}
 800bc26:	1e04      	subs	r4, r0, #0

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800bc28:	d101      	bne.n	800bc2e <weight2ModParamCommand+0xa>
 800bc2a:	b672      	cpsid	i
 800bc2c:	e7fe      	b.n	800bc2c <weight2ModParamCommand+0x8>

  sprintf( ( char * ) pcWriteBuffer, ( char * ) pcWeightVerboseMsg, weight2_buffer);
 800bc2e:	4b06      	ldr	r3, [pc, #24]	; (800bc48 <weight2ModParamCommand+0x24>)
 800bc30:	6818      	ldr	r0, [r3, #0]
 800bc32:	f7f7 fa77 	bl	8003124 <__aeabi_f2d>
 800bc36:	0002      	movs	r2, r0
 800bc38:	000b      	movs	r3, r1
 800bc3a:	4904      	ldr	r1, [pc, #16]	; (800bc4c <weight2ModParamCommand+0x28>)
 800bc3c:	0020      	movs	r0, r4
 800bc3e:	f009 fe8f 	bl	8015960 <sprintf>

  /* There is no more data to return after this single string, so return pdFALSE. */
  return pdFALSE;
}
 800bc42:	2000      	movs	r0, #0
 800bc44:	bd10      	pop	{r4, pc}
 800bc46:	46c0      	nop			; (mov r8, r8)
 800bc48:	2000716c 	.word	0x2000716c
 800bc4c:	0801d274 	.word	0x0801d274

0800bc50 <unitCommand>:
{
 800bc50:	b530      	push	{r4, r5, lr}
 800bc52:	b083      	sub	sp, #12
 800bc54:	0004      	movs	r4, r0
 800bc56:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800bc5c:	2c00      	cmp	r4, #0
 800bc5e:	d101      	bne.n	800bc64 <unitCommand+0x14>
 800bc60:	b672      	cpsid	i
 800bc62:	e7fe      	b.n	800bc62 <unitCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800bc64:	aa01      	add	r2, sp, #4
 800bc66:	2101      	movs	r1, #1
 800bc68:	f004 f968 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800bc6c:	0005      	movs	r5, r0
  if (!strncmp((const char *)pcParameterString1, "g", 1))
 800bc6e:	7803      	ldrb	r3, [r0, #0]
 800bc70:	2b67      	cmp	r3, #103	; 0x67
 800bc72:	d01c      	beq.n	800bcae <unitCommand+0x5e>
  else if (!strncmp((const char *)pcParameterString1, "kg", 2))
 800bc74:	2202      	movs	r2, #2
 800bc76:	4927      	ldr	r1, [pc, #156]	; (800bd14 <unitCommand+0xc4>)
 800bc78:	f009 feb6 	bl	80159e8 <strncmp>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d021      	beq.n	800bcc4 <unitCommand+0x74>
  else if (!strncmp((const char *)pcParameterString1, "ounce", 5))
 800bc80:	2205      	movs	r2, #5
 800bc82:	4925      	ldr	r1, [pc, #148]	; (800bd18 <unitCommand+0xc8>)
 800bc84:	0028      	movs	r0, r5
 800bc86:	f009 feaf 	bl	80159e8 <strncmp>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d023      	beq.n	800bcd6 <unitCommand+0x86>
	else if (!strncmp((const char *)pcParameterString1, "lb", 2))
 800bc8e:	2202      	movs	r2, #2
 800bc90:	4922      	ldr	r1, [pc, #136]	; (800bd1c <unitCommand+0xcc>)
 800bc92:	0028      	movs	r0, r5
 800bc94:	f009 fea8 	bl	80159e8 <strncmp>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d125      	bne.n	800bce8 <unitCommand+0x98>
    unit = Pound;
 800bc9c:	4b20      	ldr	r3, [pc, #128]	; (800bd20 <unitCommand+0xd0>)
 800bc9e:	2204      	movs	r2, #4
 800bca0:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Pound\r\n" );
 800bca2:	321b      	adds	r2, #27
 800bca4:	491f      	ldr	r1, [pc, #124]	; (800bd24 <unitCommand+0xd4>)
 800bca6:	0020      	movs	r0, r4
 800bca8:	f009 fc57 	bl	801555a <memcpy>
 800bcac:	e007      	b.n	800bcbe <unitCommand+0x6e>
    unit = Gram;
 800bcae:	4b1c      	ldr	r3, [pc, #112]	; (800bd20 <unitCommand+0xd0>)
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Gram\r\n" );
 800bcb4:	321d      	adds	r2, #29
 800bcb6:	491c      	ldr	r1, [pc, #112]	; (800bd28 <unitCommand+0xd8>)
 800bcb8:	0020      	movs	r0, r4
 800bcba:	f009 fc4e 	bl	801555a <memcpy>
}
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	b003      	add	sp, #12
 800bcc2:	bd30      	pop	{r4, r5, pc}
    unit = KGram;
 800bcc4:	4b16      	ldr	r3, [pc, #88]	; (800bd20 <unitCommand+0xd0>)
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: KGram\r\n" );
 800bcca:	321d      	adds	r2, #29
 800bccc:	4917      	ldr	r1, [pc, #92]	; (800bd2c <unitCommand+0xdc>)
 800bcce:	0020      	movs	r0, r4
 800bcd0:	f009 fc43 	bl	801555a <memcpy>
 800bcd4:	e7f3      	b.n	800bcbe <unitCommand+0x6e>
    unit = Ounce;
 800bcd6:	4b12      	ldr	r3, [pc, #72]	; (800bd20 <unitCommand+0xd0>)
 800bcd8:	2203      	movs	r2, #3
 800bcda:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Ounce\r\n" );
 800bcdc:	321c      	adds	r2, #28
 800bcde:	4914      	ldr	r1, [pc, #80]	; (800bd30 <unitCommand+0xe0>)
 800bce0:	0020      	movs	r0, r4
 800bce2:	f009 fc3a 	bl	801555a <memcpy>
 800bce6:	e7ea      	b.n	800bcbe <unitCommand+0x6e>
	else if (!strncmp((const char *)pcParameterString1, "raw", 3))
 800bce8:	2203      	movs	r2, #3
 800bcea:	4912      	ldr	r1, [pc, #72]	; (800bd34 <unitCommand+0xe4>)
 800bcec:	0028      	movs	r0, r5
 800bcee:	f009 fe7b 	bl	80159e8 <strncmp>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d005      	beq.n	800bd02 <unitCommand+0xb2>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800bcf6:	2213      	movs	r2, #19
 800bcf8:	490f      	ldr	r1, [pc, #60]	; (800bd38 <unitCommand+0xe8>)
 800bcfa:	0020      	movs	r0, r4
 800bcfc:	f009 fc2d 	bl	801555a <memcpy>
 800bd00:	e7dd      	b.n	800bcbe <unitCommand+0x6e>
    unit = RAW;
 800bd02:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <unitCommand+0xd0>)
 800bd04:	2205      	movs	r2, #5
 800bd06:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Raw\r\n" );
 800bd08:	3218      	adds	r2, #24
 800bd0a:	490c      	ldr	r1, [pc, #48]	; (800bd3c <unitCommand+0xec>)
 800bd0c:	0020      	movs	r0, r4
 800bd0e:	f009 fc24 	bl	801555a <memcpy>
 800bd12:	e7d4      	b.n	800bcbe <unitCommand+0x6e>
 800bd14:	0801d1c0 	.word	0x0801d1c0
 800bd18:	0801d1e4 	.word	0x0801d1e4
 800bd1c:	0801d20c 	.word	0x0801d20c
 800bd20:	200000bc 	.word	0x200000bc
 800bd24:	0801d210 	.word	0x0801d210
 800bd28:	0801d1a0 	.word	0x0801d1a0
 800bd2c:	0801d1c4 	.word	0x0801d1c4
 800bd30:	0801d1ec 	.word	0x0801d1ec
 800bd34:	0801d230 	.word	0x0801d230
 800bd38:	0801b310 	.word	0x0801b310
 800bd3c:	0801d234 	.word	0x0801d234

0800bd40 <CheckForEnterKey>:
{
 800bd40:	b510      	push	{r4, lr}
 800bd42:	b082      	sub	sp, #8
	for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800bd44:	2300      	movs	r3, #0
 800bd46:	2bbf      	cmp	r3, #191	; 0xbf
 800bd48:	d81d      	bhi.n	800bd86 <CheckForEnterKey+0x46>
		if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800bd4a:	4a10      	ldr	r2, [pc, #64]	; (800bd8c <CheckForEnterKey+0x4c>)
 800bd4c:	7812      	ldrb	r2, [r2, #0]
 800bd4e:	3a01      	subs	r2, #1
 800bd50:	001c      	movs	r4, r3
 800bd52:	0051      	lsls	r1, r2, #1
 800bd54:	1889      	adds	r1, r1, r2
 800bd56:	0188      	lsls	r0, r1, #6
 800bd58:	490d      	ldr	r1, [pc, #52]	; (800bd90 <CheckForEnterKey+0x50>)
 800bd5a:	1809      	adds	r1, r1, r0
 800bd5c:	5cc9      	ldrb	r1, [r1, r3]
 800bd5e:	290d      	cmp	r1, #13
 800bd60:	d002      	beq.n	800bd68 <CheckForEnterKey+0x28>
	for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800bd62:	3301      	adds	r3, #1
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	e7ee      	b.n	800bd46 <CheckForEnterKey+0x6>
			UARTRxBuf[PcPort-1][chr] = 0;
 800bd68:	4a09      	ldr	r2, [pc, #36]	; (800bd90 <CheckForEnterKey+0x50>)
 800bd6a:	1812      	adds	r2, r2, r0
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	5513      	strb	r3, [r2, r4]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800bd70:	4a08      	ldr	r2, [pc, #32]	; (800bd94 <CheckForEnterKey+0x54>)
 800bd72:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		                // Stop the streaming task
 800bd74:	4a08      	ldr	r2, [pc, #32]	; (800bd98 <CheckForEnterKey+0x58>)
 800bd76:	7013      	strb	r3, [r2, #0]
			xTimerStop( xTimer, 0 );            // Stop the timeout timer
 800bd78:	4a08      	ldr	r2, [pc, #32]	; (800bd9c <CheckForEnterKey+0x5c>)
 800bd7a:	6810      	ldr	r0, [r2, #0]
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	390a      	subs	r1, #10
 800bd82:	f005 fcff 	bl	8011784 <xTimerGenericCommand>
}
 800bd86:	b002      	add	sp, #8
 800bd88:	bd10      	pop	{r4, pc}
 800bd8a:	46c0      	nop			; (mov r8, r8)
 800bd8c:	20000aa8 	.word	0x20000aa8
 800bd90:	200012c8 	.word	0x200012c8
 800bd94:	20001df0 	.word	0x20001df0
 800bd98:	200071e1 	.word	0x200071e1
 800bd9c:	20001e18 	.word	0x20001e18

0800bda0 <HandleTimeout>:
{
 800bda0:	b510      	push	{r4, lr}
  tid = ( uint32_t ) pvTimerGetTimerID( xTimer );
 800bda2:	f005 fe28 	bl	80119f6 <pvTimerGetTimerID>
  if (TIMERID_TIMEOUT_MEASUREMENT == tid)
 800bda6:	28ff      	cmp	r0, #255	; 0xff
 800bda8:	d000      	beq.n	800bdac <HandleTimeout+0xc>
}
 800bdaa:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		                                    // Stop the streaming task
 800bdac:	2300      	movs	r3, #0
 800bdae:	4a02      	ldr	r2, [pc, #8]	; (800bdb8 <HandleTimeout+0x18>)
 800bdb0:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING;     // stop streaming
 800bdb2:	4a02      	ldr	r2, [pc, #8]	; (800bdbc <HandleTimeout+0x1c>)
 800bdb4:	7013      	strb	r3, [r2, #0]
}
 800bdb6:	e7f8      	b.n	800bdaa <HandleTimeout+0xa>
 800bdb8:	200071e1 	.word	0x200071e1
 800bdbc:	20001df0 	.word	0x20001df0

0800bdc0 <SystemClock_Config>:
{
 800bdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc2:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bdc4:	2401      	movs	r4, #1
 800bdc6:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bdc8:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bdca:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue =16;
 800bdcc:	2310      	movs	r3, #16
 800bdce:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bdd0:	2702      	movs	r7, #2
 800bdd2:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bdd4:	2680      	movs	r6, #128	; 0x80
 800bdd6:	0276      	lsls	r6, r6, #9
 800bdd8:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800bdda:	2380      	movs	r3, #128	; 0x80
 800bddc:	035b      	lsls	r3, r3, #13
 800bdde:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800bde0:	2500      	movs	r5, #0
 800bde2:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bde4:	a80d      	add	r0, sp, #52	; 0x34
 800bde6:	f007 fc1b 	bl	8013620 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800bdea:	2307      	movs	r3, #7
 800bdec:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bdee:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bdf0:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bdf2:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1);
 800bdf4:	2101      	movs	r1, #1
 800bdf6:	a809      	add	r0, sp, #36	; 0x24
 800bdf8:	f007 feb6 	bl	8013b68 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
 800bdfc:	4b1a      	ldr	r3, [pc, #104]	; (800be68 <SystemClock_Config+0xa8>)
 800bdfe:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800be00:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800be02:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800be04:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800be06:	a802      	add	r0, sp, #8
 800be08:	f008 f842 	bl	8013e90 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800be0c:	4d17      	ldr	r5, [pc, #92]	; (800be6c <SystemClock_Config+0xac>)
 800be0e:	69ea      	ldr	r2, [r5, #28]
 800be10:	2180      	movs	r1, #128	; 0x80
 800be12:	0549      	lsls	r1, r1, #21
 800be14:	430a      	orrs	r2, r1
 800be16:	61ea      	str	r2, [r5, #28]
 800be18:	69eb      	ldr	r3, [r5, #28]
 800be1a:	400b      	ands	r3, r1
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800be20:	f007 fbf4 	bl	801360c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800be24:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800be26:	23c0      	movs	r3, #192	; 0xc0
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800be2c:	a802      	add	r0, sp, #8
 800be2e:	f008 f82f 	bl	8013e90 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800be32:	f008 f809 	bl	8013e48 <HAL_RCC_GetHCLKFreq>
 800be36:	21fa      	movs	r1, #250	; 0xfa
 800be38:	0089      	lsls	r1, r1, #2
 800be3a:	f7f4 f989 	bl	8000150 <__udivsi3>
 800be3e:	f006 fb55 	bl	80124ec <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800be42:	2004      	movs	r0, #4
 800be44:	f006 fb6e 	bl	8012524 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800be48:	69ab      	ldr	r3, [r5, #24]
 800be4a:	4323      	orrs	r3, r4
 800be4c:	61ab      	str	r3, [r5, #24]
 800be4e:	69ab      	ldr	r3, [r5, #24]
 800be50:	401c      	ands	r4, r3
 800be52:	9401      	str	r4, [sp, #4]
 800be54:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800be56:	2001      	movs	r0, #1
 800be58:	2200      	movs	r2, #0
 800be5a:	2100      	movs	r1, #0
 800be5c:	4240      	negs	r0, r0
 800be5e:	f006 fb01 	bl	8012464 <HAL_NVIC_SetPriority>
}
 800be62:	b01b      	add	sp, #108	; 0x6c
 800be64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be66:	46c0      	nop			; (mov r8, r8)
 800be68:	00040003 	.word	0x00040003
 800be6c:	40021000 	.word	0x40021000

0800be70 <Module_Peripheral_Init>:
{
 800be70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be72:	b085      	sub	sp, #20
	MX_USART2_UART_Init();
 800be74:	f003 fc68 	bl	800f748 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800be78:	f003 fc7e 	bl	800f778 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800be7c:	f003 fc94 	bl	800f7a8 <MX_USART4_UART_Init>
	MX_USART5_UART_Init();
 800be80:	f003 fcaa 	bl	800f7d8 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800be84:	f003 fcc0 	bl	800f808 <MX_USART6_UART_Init>
	HX711_GPIO_Init();// GPIO init
 800be88:	f003 f89a 	bl	800efc0 <HX711_GPIO_Init>
	xTaskCreate(LoadcellTask,(const char* ) "LoadcellTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&LoadcellHandle);
 800be8c:	22a0      	movs	r2, #160	; 0xa0
 800be8e:	2300      	movs	r3, #0
 800be90:	9303      	str	r3, [sp, #12]
 800be92:	9302      	str	r3, [sp, #8]
 800be94:	4b27      	ldr	r3, [pc, #156]	; (800bf34 <Module_Peripheral_Init+0xc4>)
 800be96:	9301      	str	r3, [sp, #4]
 800be98:	2303      	movs	r3, #3
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	2300      	movs	r3, #0
 800be9e:	0052      	lsls	r2, r2, #1
 800bea0:	4925      	ldr	r1, [pc, #148]	; (800bf38 <Module_Peripheral_Init+0xc8>)
 800bea2:	4826      	ldr	r0, [pc, #152]	; (800bf3c <Module_Peripheral_Init+0xcc>)
 800bea4:	f004 fdb8 	bl	8010a18 <xTaskGenericCreate>
	EE_ReadVariable(_EE_cell_full_scale,&full_scale);
 800bea8:	20fa      	movs	r0, #250	; 0xfa
 800beaa:	4925      	ldr	r1, [pc, #148]	; (800bf40 <Module_Peripheral_Init+0xd0>)
 800beac:	0040      	lsls	r0, r0, #1
 800beae:	f7fb fedd 	bl	8007c6c <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_drift_LSB,&word_LSB);
 800beb2:	4d24      	ldr	r5, [pc, #144]	; (800bf44 <Module_Peripheral_Init+0xd4>)
 800beb4:	20f6      	movs	r0, #246	; 0xf6
 800beb6:	0029      	movs	r1, r5
 800beb8:	30ff      	adds	r0, #255	; 0xff
 800beba:	f7fb fed7 	bl	8007c6c <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_drift_MSB,&word_MSB);
 800bebe:	4c22      	ldr	r4, [pc, #136]	; (800bf48 <Module_Peripheral_Init+0xd8>)
 800bec0:	20fb      	movs	r0, #251	; 0xfb
 800bec2:	0021      	movs	r1, r4
 800bec4:	0040      	lsls	r0, r0, #1
 800bec6:	f7fb fed1 	bl	8007c6c <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800beca:	882b      	ldrh	r3, [r5, #0]
 800becc:	8822      	ldrh	r2, [r4, #0]
 800bece:	0412      	lsls	r2, r2, #16
 800bed0:	189b      	adds	r3, r3, r2
 800bed2:	4f1e      	ldr	r7, [pc, #120]	; (800bf4c <Module_Peripheral_Init+0xdc>)
 800bed4:	603b      	str	r3, [r7, #0]
	cell_drift =*(float*) &temp32;
 800bed6:	4a1e      	ldr	r2, [pc, #120]	; (800bf50 <Module_Peripheral_Init+0xe0>)
 800bed8:	6013      	str	r3, [r2, #0]
	EE_ReadVariable(_EE_cell_output_LSB,&word_LSB);
 800beda:	20f8      	movs	r0, #248	; 0xf8
 800bedc:	0029      	movs	r1, r5
 800bede:	30ff      	adds	r0, #255	; 0xff
 800bee0:	f7fb fec4 	bl	8007c6c <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_output_MSB,&word_MSB);
 800bee4:	20fc      	movs	r0, #252	; 0xfc
 800bee6:	0021      	movs	r1, r4
 800bee8:	0040      	lsls	r0, r0, #1
 800beea:	f7fb febf 	bl	8007c6c <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800beee:	882b      	ldrh	r3, [r5, #0]
 800bef0:	8822      	ldrh	r2, [r4, #0]
 800bef2:	0412      	lsls	r2, r2, #16
 800bef4:	189b      	adds	r3, r3, r2
 800bef6:	603b      	str	r3, [r7, #0]
	cell_output =*(float*) &temp32;
 800bef8:	4e16      	ldr	r6, [pc, #88]	; (800bf54 <Module_Peripheral_Init+0xe4>)
 800befa:	6033      	str	r3, [r6, #0]
	EE_ReadVariable(_EE_zero_drift_LSB,&word_LSB);
 800befc:	20fa      	movs	r0, #250	; 0xfa
 800befe:	0029      	movs	r1, r5
 800bf00:	30ff      	adds	r0, #255	; 0xff
 800bf02:	f7fb feb3 	bl	8007c6c <EE_ReadVariable>
	EE_ReadVariable(_EE_zero_drift_MSB,&word_MSB);
 800bf06:	20fd      	movs	r0, #253	; 0xfd
 800bf08:	0021      	movs	r1, r4
 800bf0a:	0040      	lsls	r0, r0, #1
 800bf0c:	f7fb feae 	bl	8007c6c <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800bf10:	882b      	ldrh	r3, [r5, #0]
 800bf12:	8822      	ldrh	r2, [r4, #0]
 800bf14:	0412      	lsls	r2, r2, #16
 800bf16:	189b      	adds	r3, r3, r2
 800bf18:	603b      	str	r3, [r7, #0]
	Zero_Drift =*(float*) &temp32;
 800bf1a:	4a0f      	ldr	r2, [pc, #60]	; (800bf58 <Module_Peripheral_Init+0xe8>)
 800bf1c:	6013      	str	r3, [r2, #0]
	calibration_factor =cell_output * AVDD / 1000.0f;// mV
 800bf1e:	490f      	ldr	r1, [pc, #60]	; (800bf5c <Module_Peripheral_Init+0xec>)
 800bf20:	6830      	ldr	r0, [r6, #0]
 800bf22:	f7f4 ffc1 	bl	8000ea8 <__aeabi_fmul>
 800bf26:	490e      	ldr	r1, [pc, #56]	; (800bf60 <Module_Peripheral_Init+0xf0>)
 800bf28:	f7f4 fde6 	bl	8000af8 <__aeabi_fdiv>
 800bf2c:	4b0d      	ldr	r3, [pc, #52]	; (800bf64 <Module_Peripheral_Init+0xf4>)
 800bf2e:	6018      	str	r0, [r3, #0]
}
 800bf30:	b005      	add	sp, #20
 800bf32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf34:	200019d8 	.word	0x200019d8
 800bf38:	0801cb30 	.word	0x0801cb30
 800bf3c:	0800d37d 	.word	0x0800d37d
 800bf40:	20001de8 	.word	0x20001de8
 800bf44:	20001e14 	.word	0x20001e14
 800bf48:	20001e16 	.word	0x20001e16
 800bf4c:	20001df8 	.word	0x20001df8
 800bf50:	20000090 	.word	0x20000090
 800bf54:	20001de4 	.word	0x20001de4
 800bf58:	20001ddc 	.word	0x20001ddc
 800bf5c:	40400000 	.word	0x40400000
 800bf60:	447a0000 	.word	0x447a0000
 800bf64:	20001de0 	.word	0x20001de0

0800bf68 <SaveToRO>:
{
 800bf68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf6a:	46c6      	mov	lr, r8
 800bf6c:	b500      	push	{lr}
 800bf6e:	b086      	sub	sp, #24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800bf70:	2215      	movs	r2, #21
 800bf72:	2100      	movs	r1, #0
 800bf74:	4668      	mov	r0, sp
 800bf76:	f009 faf9 	bl	801556c <memset>
	HAL_FLASH_Unlock();
 800bf7a:	f007 f8d9 	bl	8013130 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800bf7e:	4866      	ldr	r0, [pc, #408]	; (800c118 <SaveToRO+0x1b0>)
 800bf80:	f007 f984 	bl	801328c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bf84:	4865      	ldr	r0, [pc, #404]	; (800c11c <SaveToRO+0x1b4>)
 800bf86:	f007 f8f1 	bl	801316c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d10b      	bne.n	800bfa6 <SaveToRO+0x3e>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800bf8e:	4a64      	ldr	r2, [pc, #400]	; (800c120 <SaveToRO+0x1b8>)
 800bf90:	6913      	ldr	r3, [r2, #16]
 800bf92:	2102      	movs	r1, #2
 800bf94:	438b      	bics	r3, r1
 800bf96:	6113      	str	r3, [r2, #16]
	if (myID)
 800bf98:	4b62      	ldr	r3, [pc, #392]	; (800c124 <SaveToRO+0x1bc>)
 800bf9a:	781a      	ldrb	r2, [r3, #0]
 800bf9c:	2a00      	cmp	r2, #0
 800bf9e:	d109      	bne.n	800bfb4 <SaveToRO+0x4c>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800bfa0:	2400      	movs	r4, #0
 800bfa2:	4e61      	ldr	r6, [pc, #388]	; (800c128 <SaveToRO+0x1c0>)
 800bfa4:	e081      	b.n	800c0aa <SaveToRO+0x142>
		return pFlash.ErrorCode;
 800bfa6:	4b61      	ldr	r3, [pc, #388]	; (800c12c <SaveToRO+0x1c4>)
 800bfa8:	69d8      	ldr	r0, [r3, #28]
 800bfaa:	b2c0      	uxtb	r0, r0
}
 800bfac:	b006      	add	sp, #24
 800bfae:	bc04      	pop	{r2}
 800bfb0:	4690      	mov	r8, r2
 800bfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800bfb4:	4b5e      	ldr	r3, [pc, #376]	; (800c130 <SaveToRO+0x1c8>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	021b      	lsls	r3, r3, #8
 800bfba:	18d2      	adds	r2, r2, r3
 800bfbc:	b292      	uxth	r2, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	4955      	ldr	r1, [pc, #340]	; (800c118 <SaveToRO+0x1b0>)
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	f007 f900 	bl	80131c8 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bfc8:	4854      	ldr	r0, [pc, #336]	; (800c11c <SaveToRO+0x1b4>)
 800bfca:	f007 f8cf 	bl	801316c <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d107      	bne.n	800bfe2 <SaveToRO+0x7a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bfd2:	4a53      	ldr	r2, [pc, #332]	; (800c120 <SaveToRO+0x1b8>)
 800bfd4:	6913      	ldr	r3, [r2, #16]
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	438b      	bics	r3, r1
 800bfda:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800bfdc:	2601      	movs	r6, #1
	uint16_t add = 2, temp = 0;
 800bfde:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800bfe0:	e02e      	b.n	800c040 <SaveToRO+0xd8>
			return pFlash.ErrorCode;
 800bfe2:	4b52      	ldr	r3, [pc, #328]	; (800c12c <SaveToRO+0x1c4>)
 800bfe4:	69d8      	ldr	r0, [r3, #28]
 800bfe6:	b2c0      	uxtb	r0, r0
 800bfe8:	e7e0      	b.n	800bfac <SaveToRO+0x44>
						return pFlash.ErrorCode;
 800bfea:	4b50      	ldr	r3, [pc, #320]	; (800c12c <SaveToRO+0x1c4>)
 800bfec:	69d8      	ldr	r0, [r3, #28]
 800bfee:	b2c0      	uxtb	r0, r0
 800bff0:	e7dc      	b.n	800bfac <SaveToRO+0x44>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800bff2:	3401      	adds	r4, #1
 800bff4:	b2e4      	uxtb	r4, r4
 800bff6:	2c0a      	cmp	r4, #10
 800bff8:	d820      	bhi.n	800c03c <SaveToRO+0xd4>
				if (array[i-1][0]) {
 800bffa:	1e72      	subs	r2, r6, #1
 800bffc:	2316      	movs	r3, #22
 800bffe:	4353      	muls	r3, r2
 800c000:	494c      	ldr	r1, [pc, #304]	; (800c134 <SaveToRO+0x1cc>)
 800c002:	5a5b      	ldrh	r3, [r3, r1]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d0f4      	beq.n	800bff2 <SaveToRO+0x8a>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800c008:	0093      	lsls	r3, r2, #2
 800c00a:	189b      	adds	r3, r3, r2
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	189b      	adds	r3, r3, r2
 800c010:	191b      	adds	r3, r3, r4
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	5a5a      	ldrh	r2, [r3, r1]
 800c016:	4b40      	ldr	r3, [pc, #256]	; (800c118 <SaveToRO+0x1b0>)
 800c018:	18e9      	adds	r1, r5, r3
 800c01a:	2300      	movs	r3, #0
 800c01c:	2001      	movs	r0, #1
 800c01e:	f007 f8d3 	bl	80131c8 <HAL_FLASH_Program>
					add += 2;
 800c022:	3502      	adds	r5, #2
 800c024:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800c026:	483d      	ldr	r0, [pc, #244]	; (800c11c <SaveToRO+0x1b4>)
 800c028:	f007 f8a0 	bl	801316c <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d1dc      	bne.n	800bfea <SaveToRO+0x82>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c030:	4a3b      	ldr	r2, [pc, #236]	; (800c120 <SaveToRO+0x1b8>)
 800c032:	6913      	ldr	r3, [r2, #16]
 800c034:	2101      	movs	r1, #1
 800c036:	438b      	bics	r3, r1
 800c038:	6113      	str	r3, [r2, #16]
 800c03a:	e7da      	b.n	800bff2 <SaveToRO+0x8a>
		for(uint8_t i=1 ; i<=N ; i++)
 800c03c:	3601      	adds	r6, #1
 800c03e:	b2f6      	uxtb	r6, r6
 800c040:	4b3b      	ldr	r3, [pc, #236]	; (800c130 <SaveToRO+0x1c8>)
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	42b3      	cmp	r3, r6
 800c046:	d3ab      	bcc.n	800bfa0 <SaveToRO+0x38>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800c048:	2400      	movs	r4, #0
 800c04a:	e7d4      	b.n	800bff6 <SaveToRO+0x8e>
					return pFlash.ErrorCode;
 800c04c:	4b37      	ldr	r3, [pc, #220]	; (800c12c <SaveToRO+0x1c4>)
 800c04e:	69d8      	ldr	r0, [r3, #28]
 800c050:	b2c0      	uxtb	r0, r0
 800c052:	e7ab      	b.n	800bfac <SaveToRO+0x44>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800c054:	2500      	movs	r5, #0
 800c056:	00bb      	lsls	r3, r7, #2
 800c058:	19db      	adds	r3, r3, r7
 800c05a:	009a      	lsls	r2, r3, #2
 800c05c:	4b36      	ldr	r3, [pc, #216]	; (800c138 <SaveToRO+0x1d0>)
 800c05e:	189b      	adds	r3, r3, r2
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	4698      	mov	r8, r3
 800c064:	0018      	movs	r0, r3
 800c066:	f7f4 f857 	bl	8000118 <strlen>
 800c06a:	3001      	adds	r0, #1
 800c06c:	0840      	lsrs	r0, r0, #1
 800c06e:	4285      	cmp	r5, r0
 800c070:	d219      	bcs.n	800c0a6 <SaveToRO+0x13e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800c072:	006b      	lsls	r3, r5, #1
 800c074:	4642      	mov	r2, r8
 800c076:	5ad2      	ldrh	r2, [r2, r3]
 800c078:	2300      	movs	r3, #0
 800c07a:	0031      	movs	r1, r6
 800c07c:	2001      	movs	r0, #1
 800c07e:	f007 f8a3 	bl	80131c8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800c082:	4826      	ldr	r0, [pc, #152]	; (800c11c <SaveToRO+0x1b4>)
 800c084:	f007 f872 	bl	801316c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800c088:	2800      	cmp	r0, #0
 800c08a:	d108      	bne.n	800c09e <SaveToRO+0x136>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c08c:	4a24      	ldr	r2, [pc, #144]	; (800c120 <SaveToRO+0x1b8>)
 800c08e:	6913      	ldr	r3, [r2, #16]
 800c090:	2101      	movs	r1, #1
 800c092:	438b      	bics	r3, r1
 800c094:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800c096:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800c098:	3501      	adds	r5, #1
 800c09a:	b2ed      	uxtb	r5, r5
 800c09c:	e7db      	b.n	800c056 <SaveToRO+0xee>
					return pFlash.ErrorCode;
 800c09e:	4b23      	ldr	r3, [pc, #140]	; (800c12c <SaveToRO+0x1c4>)
 800c0a0:	69d8      	ldr	r0, [r3, #28]
 800c0a2:	b2c0      	uxtb	r0, r0
 800c0a4:	e782      	b.n	800bfac <SaveToRO+0x44>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800c0a6:	3401      	adds	r4, #1
 800c0a8:	b2e4      	uxtb	r4, r4
 800c0aa:	4b24      	ldr	r3, [pc, #144]	; (800c13c <SaveToRO+0x1d4>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	42a3      	cmp	r3, r4
 800c0b0:	d92d      	bls.n	800c10e <SaveToRO+0x1a6>
		if (snippets[s].cond.conditionType) 
 800c0b2:	0027      	movs	r7, r4
 800c0b4:	00a3      	lsls	r3, r4, #2
 800c0b6:	191b      	adds	r3, r3, r4
 800c0b8:	009a      	lsls	r2, r3, #2
 800c0ba:	4b1f      	ldr	r3, [pc, #124]	; (800c138 <SaveToRO+0x1d0>)
 800c0bc:	5cd3      	ldrb	r3, [r2, r3]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d0f1      	beq.n	800c0a6 <SaveToRO+0x13e>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800c0c2:	23fe      	movs	r3, #254	; 0xfe
 800c0c4:	466a      	mov	r2, sp
 800c0c6:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800c0c8:	00a3      	lsls	r3, r4, #2
 800c0ca:	191b      	adds	r3, r3, r4
 800c0cc:	0099      	lsls	r1, r3, #2
 800c0ce:	4b1a      	ldr	r3, [pc, #104]	; (800c138 <SaveToRO+0x1d0>)
 800c0d0:	18c9      	adds	r1, r1, r3
 800c0d2:	2214      	movs	r2, #20
 800c0d4:	466b      	mov	r3, sp
 800c0d6:	1c58      	adds	r0, r3, #1
 800c0d8:	f009 fa3f 	bl	801555a <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800c0dc:	2500      	movs	r5, #0
 800c0de:	2d09      	cmp	r5, #9
 800c0e0:	d8b8      	bhi.n	800c054 <SaveToRO+0xec>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800c0e2:	006b      	lsls	r3, r5, #1
 800c0e4:	466a      	mov	r2, sp
 800c0e6:	5ad2      	ldrh	r2, [r2, r3]
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	0031      	movs	r1, r6
 800c0ec:	2001      	movs	r0, #1
 800c0ee:	f007 f86b 	bl	80131c8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800c0f2:	480a      	ldr	r0, [pc, #40]	; (800c11c <SaveToRO+0x1b4>)
 800c0f4:	f007 f83a 	bl	801316c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d1a7      	bne.n	800c04c <SaveToRO+0xe4>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c0fc:	4a08      	ldr	r2, [pc, #32]	; (800c120 <SaveToRO+0x1b8>)
 800c0fe:	6913      	ldr	r3, [r2, #16]
 800c100:	2101      	movs	r1, #1
 800c102:	438b      	bics	r3, r1
 800c104:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800c106:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800c108:	3501      	adds	r5, #1
 800c10a:	b2ed      	uxtb	r5, r5
 800c10c:	e7e7      	b.n	800c0de <SaveToRO+0x176>
	HAL_FLASH_Lock();
 800c10e:	f007 f823 	bl	8013158 <HAL_FLASH_Lock>
	return result;
 800c112:	2000      	movs	r0, #0
 800c114:	e74a      	b.n	800bfac <SaveToRO+0x44>
 800c116:	46c0      	nop			; (mov r8, r8)
 800c118:	0801d800 	.word	0x0801d800
 800c11c:	0000c350 	.word	0x0000c350
 800c120:	40022000 	.word	0x40022000
 800c124:	20001072 	.word	0x20001072
 800c128:	0801dc00 	.word	0x0801dc00
 800c12c:	20007558 	.word	0x20007558
 800c130:	20000024 	.word	0x20000024
 800c134:	20000aac 	.word	0x20000aac
 800c138:	20007068 	.word	0x20007068
 800c13c:	20001217 	.word	0x20001217

0800c140 <ClearROtopology>:
{
 800c140:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800c142:	228f      	movs	r2, #143	; 0x8f
 800c144:	0092      	lsls	r2, r2, #2
 800c146:	2100      	movs	r1, #0
 800c148:	4805      	ldr	r0, [pc, #20]	; (800c160 <ClearROtopology+0x20>)
 800c14a:	f009 fa0f 	bl	801556c <memset>
	N = 1; myID = 0;
 800c14e:	4b05      	ldr	r3, [pc, #20]	; (800c164 <ClearROtopology+0x24>)
 800c150:	2201      	movs	r2, #1
 800c152:	701a      	strb	r2, [r3, #0]
 800c154:	4b04      	ldr	r3, [pc, #16]	; (800c168 <ClearROtopology+0x28>)
 800c156:	2200      	movs	r2, #0
 800c158:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800c15a:	f7ff ff05 	bl	800bf68 <SaveToRO>
}
 800c15e:	bd10      	pop	{r4, pc}
 800c160:	20000aac 	.word	0x20000aac
 800c164:	20000024 	.word	0x20000024
 800c168:	20001072 	.word	0x20001072

0800c16c <RegisterModuleCLICommands>:
{
 800c16c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &demoCommandDefinition );
 800c16e:	4811      	ldr	r0, [pc, #68]	; (800c1b4 <RegisterModuleCLICommands+0x48>)
 800c170:	f003 fe5e 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &sampleCommandDefinition );
 800c174:	4810      	ldr	r0, [pc, #64]	; (800c1b8 <RegisterModuleCLICommands+0x4c>)
 800c176:	f003 fe5b 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &streamCommandDefinition);
 800c17a:	4810      	ldr	r0, [pc, #64]	; (800c1bc <RegisterModuleCLICommands+0x50>)
 800c17c:	f003 fe58 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &stopCommandDefinition);
 800c180:	480f      	ldr	r0, [pc, #60]	; (800c1c0 <RegisterModuleCLICommands+0x54>)
 800c182:	f003 fe55 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unitCommandDefinition);
 800c186:	480f      	ldr	r0, [pc, #60]	; (800c1c4 <RegisterModuleCLICommands+0x58>)
 800c188:	f003 fe52 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &rateCommandDefinition);
 800c18c:	480e      	ldr	r0, [pc, #56]	; (800c1c8 <RegisterModuleCLICommands+0x5c>)
 800c18e:	f003 fe4f 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &calibrationCommandDefinition);
 800c192:	480e      	ldr	r0, [pc, #56]	; (800c1cc <RegisterModuleCLICommands+0x60>)
 800c194:	f003 fe4c 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &zerocalCommandDefinition);
 800c198:	480d      	ldr	r0, [pc, #52]	; (800c1d0 <RegisterModuleCLICommands+0x64>)
 800c19a:	f003 fe49 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &weight1CommandDefinition);
 800c19e:	480d      	ldr	r0, [pc, #52]	; (800c1d4 <RegisterModuleCLICommands+0x68>)
 800c1a0:	f003 fe46 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &weight2CommandDefinition);
 800c1a4:	480c      	ldr	r0, [pc, #48]	; (800c1d8 <RegisterModuleCLICommands+0x6c>)
 800c1a6:	f003 fe43 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dataformatCommandDefinition);
 800c1aa:	480c      	ldr	r0, [pc, #48]	; (800c1dc <RegisterModuleCLICommands+0x70>)
 800c1ac:	f003 fe40 	bl	800fe30 <FreeRTOS_CLIRegisterCommand>
}
 800c1b0:	bd10      	pop	{r4, pc}
 800c1b2:	46c0      	nop			; (mov r8, r8)
 800c1b4:	0801cc5c 	.word	0x0801cc5c
 800c1b8:	0801ccf0 	.word	0x0801ccf0
 800c1bc:	0801d190 	.word	0x0801d190
 800c1c0:	0801cd00 	.word	0x0801cd00
 800c1c4:	0801d254 	.word	0x0801d254
 800c1c8:	0801cce0 	.word	0x0801cce0
 800c1cc:	0801cbf0 	.word	0x0801cbf0
 800c1d0:	0801d2d4 	.word	0x0801d2d4
 800c1d4:	0801d264 	.word	0x0801d264
 800c1d8:	0801d27c 	.word	0x0801d27c
 800c1dc:	0801cc00 	.word	0x0801cc00

0800c1e0 <GetPort>:
	if (huart->Instance == USART4)
 800c1e0:	6803      	ldr	r3, [r0, #0]
 800c1e2:	4a0d      	ldr	r2, [pc, #52]	; (800c218 <GetPort+0x38>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d00f      	beq.n	800c208 <GetPort+0x28>
	else if (huart->Instance == USART2)
 800c1e8:	4a0c      	ldr	r2, [pc, #48]	; (800c21c <GetPort+0x3c>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d00e      	beq.n	800c20c <GetPort+0x2c>
	else if (huart->Instance == USART6)
 800c1ee:	4a0c      	ldr	r2, [pc, #48]	; (800c220 <GetPort+0x40>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d00d      	beq.n	800c210 <GetPort+0x30>
	else if (huart->Instance == USART3)
 800c1f4:	4a0b      	ldr	r2, [pc, #44]	; (800c224 <GetPort+0x44>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d00c      	beq.n	800c214 <GetPort+0x34>
	else if (huart->Instance == USART5)
 800c1fa:	4a0b      	ldr	r2, [pc, #44]	; (800c228 <GetPort+0x48>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d001      	beq.n	800c204 <GetPort+0x24>
	return 0;
 800c200:	2000      	movs	r0, #0
}
 800c202:	4770      	bx	lr
			return P5;
 800c204:	2005      	movs	r0, #5
 800c206:	e7fc      	b.n	800c202 <GetPort+0x22>
			return P1;
 800c208:	2001      	movs	r0, #1
 800c20a:	e7fa      	b.n	800c202 <GetPort+0x22>
			return P2;
 800c20c:	2002      	movs	r0, #2
 800c20e:	e7f8      	b.n	800c202 <GetPort+0x22>
			return P3;
 800c210:	2003      	movs	r0, #3
 800c212:	e7f6      	b.n	800c202 <GetPort+0x22>
			return P4;
 800c214:	2004      	movs	r0, #4
 800c216:	e7f4      	b.n	800c202 <GetPort+0x22>
 800c218:	40004c00 	.word	0x40004c00
 800c21c:	40004400 	.word	0x40004400
 800c220:	40011400 	.word	0x40011400
 800c224:	40004800 	.word	0x40004800
 800c228:	40005000 	.word	0x40005000

0800c22c <readHX711>:
{
 800c22c:	b510      	push	{r4, lr}
	while(HAL_GPIO_ReadPin(GPIOA,DOUT) == 1) {
 800c22e:	2180      	movs	r1, #128	; 0x80
 800c230:	2090      	movs	r0, #144	; 0x90
 800c232:	00c9      	lsls	r1, r1, #3
 800c234:	05c0      	lsls	r0, r0, #23
 800c236:	f007 f9d7 	bl	80135e8 <HAL_GPIO_ReadPin>
 800c23a:	2801      	cmp	r0, #1
 800c23c:	d0f7      	beq.n	800c22e <readHX711+0x2>
	portENTER_CRITICAL();
 800c23e:	f005 fc4d 	bl	8011adc <vPortEnterCritical>
	for(j =0; j < pulses; j++) {
 800c242:	2400      	movs	r4, #0
 800c244:	e00b      	b.n	800c25e <readHX711+0x32>
		HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800c246:	2180      	movs	r1, #128	; 0x80
 800c248:	2090      	movs	r0, #144	; 0x90
 800c24a:	2200      	movs	r2, #0
 800c24c:	0089      	lsls	r1, r1, #2
 800c24e:	05c0      	lsls	r0, r0, #23
 800c250:	f007 f9d1 	bl	80135f6 <HAL_GPIO_WritePin>
		Delay_us(1);
 800c254:	2001      	movs	r0, #1
 800c256:	f003 fa53 	bl	800f700 <StartMicroDelay>
	for(j =0; j < pulses; j++) {
 800c25a:	3401      	adds	r4, #1
 800c25c:	b2e4      	uxtb	r4, r4
 800c25e:	4b23      	ldr	r3, [pc, #140]	; (800c2ec <readHX711+0xc0>)
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	42a3      	cmp	r3, r4
 800c264:	d91f      	bls.n	800c2a6 <readHX711+0x7a>
		HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_SET);
 800c266:	2180      	movs	r1, #128	; 0x80
 800c268:	2090      	movs	r0, #144	; 0x90
 800c26a:	2201      	movs	r2, #1
 800c26c:	0089      	lsls	r1, r1, #2
 800c26e:	05c0      	lsls	r0, r0, #23
 800c270:	f007 f9c1 	bl	80135f6 <HAL_GPIO_WritePin>
		Delay_us(1);
 800c274:	2001      	movs	r0, #1
 800c276:	f003 fa43 	bl	800f700 <StartMicroDelay>
		if(j < 24) {
 800c27a:	2c17      	cmp	r4, #23
 800c27c:	d8e3      	bhi.n	800c246 <readHX711+0x1a>
			Current_pin_state =HAL_GPIO_ReadPin(GPIOA,DOUT);
 800c27e:	2180      	movs	r1, #128	; 0x80
 800c280:	2090      	movs	r0, #144	; 0x90
 800c282:	00c9      	lsls	r1, r1, #3
 800c284:	05c0      	lsls	r0, r0, #23
 800c286:	f007 f9af 	bl	80135e8 <HAL_GPIO_ReadPin>
 800c28a:	1e43      	subs	r3, r0, #1
 800c28c:	4198      	sbcs	r0, r3
 800c28e:	b2c0      	uxtb	r0, r0
 800c290:	4b17      	ldr	r3, [pc, #92]	; (800c2f0 <readHX711+0xc4>)
 800c292:	7018      	strb	r0, [r3, #0]
			Data |=Current_pin_state;
 800c294:	4b17      	ldr	r3, [pc, #92]	; (800c2f4 <readHX711+0xc8>)
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	4310      	orrs	r0, r2
 800c29a:	6018      	str	r0, [r3, #0]
			if(j < 23) Data =Data << 1;
 800c29c:	2c16      	cmp	r4, #22
 800c29e:	d8d2      	bhi.n	800c246 <readHX711+0x1a>
 800c2a0:	0040      	lsls	r0, r0, #1
 800c2a2:	6018      	str	r0, [r3, #0]
 800c2a4:	e7cf      	b.n	800c246 <readHX711+0x1a>
	value =Data;
 800c2a6:	4c14      	ldr	r4, [pc, #80]	; (800c2f8 <readHX711+0xcc>)
 800c2a8:	4b12      	ldr	r3, [pc, #72]	; (800c2f4 <readHX711+0xc8>)
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	6022      	str	r2, [r4, #0]
	Data =0;
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	601a      	str	r2, [r3, #0]
	portEXIT_CRITICAL();
 800c2b2:	f005 fc1f 	bl	8011af4 <vPortExitCritical>
	if(value > ADC_full_range) {
 800c2b6:	6820      	ldr	r0, [r4, #0]
 800c2b8:	4b10      	ldr	r3, [pc, #64]	; (800c2fc <readHX711+0xd0>)
 800c2ba:	4298      	cmp	r0, r3
 800c2bc:	d806      	bhi.n	800c2cc <readHX711+0xa0>
		valuef =(float) value;
 800c2be:	f7f5 f953 	bl	8001568 <__aeabi_ui2f>
 800c2c2:	4b0f      	ldr	r3, [pc, #60]	; (800c300 <readHX711+0xd4>)
 800c2c4:	6018      	str	r0, [r3, #0]
	return (valuef);		
 800c2c6:	4b0e      	ldr	r3, [pc, #56]	; (800c300 <readHX711+0xd4>)
 800c2c8:	6818      	ldr	r0, [r3, #0]
}
 800c2ca:	bd10      	pop	{r4, pc}
		value = (~value & 0x00FFFFFF);
 800c2cc:	43c0      	mvns	r0, r0
 800c2ce:	0200      	lsls	r0, r0, #8
 800c2d0:	0a00      	lsrs	r0, r0, #8
		value +=1;// the output of the ADC
 800c2d2:	3001      	adds	r0, #1
 800c2d4:	4b08      	ldr	r3, [pc, #32]	; (800c2f8 <readHX711+0xcc>)
 800c2d6:	6018      	str	r0, [r3, #0]
		valuef =-(float) value;
 800c2d8:	f7f5 f946 	bl	8001568 <__aeabi_ui2f>
 800c2dc:	2380      	movs	r3, #128	; 0x80
 800c2de:	061b      	lsls	r3, r3, #24
 800c2e0:	469c      	mov	ip, r3
 800c2e2:	4460      	add	r0, ip
 800c2e4:	4b06      	ldr	r3, [pc, #24]	; (800c300 <readHX711+0xd4>)
 800c2e6:	6018      	str	r0, [r3, #0]
 800c2e8:	e7ed      	b.n	800c2c6 <readHX711+0x9a>
 800c2ea:	46c0      	nop			; (mov r8, r8)
 800c2ec:	20001dea 	.word	0x20001dea
 800c2f0:	200019c4 	.word	0x200019c4
 800c2f4:	200019cc 	.word	0x200019cc
 800c2f8:	20001dfc 	.word	0x20001dfc
 800c2fc:	007fffff 	.word	0x007fffff
 800c300:	20001e00 	.word	0x20001e00

0800c304 <weightCalculation>:
{
 800c304:	b570      	push	{r4, r5, r6, lr}
	rawvalue = (valuef * 0.5 * AVDD) / (ADC_full_range * gain) + cell_drift - IC_drift - Zero_Drift;//+0.000022;
 800c306:	4b22      	ldr	r3, [pc, #136]	; (800c390 <weightCalculation+0x8c>)
 800c308:	6818      	ldr	r0, [r3, #0]
 800c30a:	f7f6 ff0b 	bl	8003124 <__aeabi_f2d>
 800c30e:	2200      	movs	r2, #0
 800c310:	4b20      	ldr	r3, [pc, #128]	; (800c394 <weightCalculation+0x90>)
 800c312:	f7f6 f88f 	bl	8002434 <__aeabi_dmul>
 800c316:	2200      	movs	r2, #0
 800c318:	4b1f      	ldr	r3, [pc, #124]	; (800c398 <weightCalculation+0x94>)
 800c31a:	f7f6 f88b 	bl	8002434 <__aeabi_dmul>
 800c31e:	0004      	movs	r4, r0
 800c320:	000d      	movs	r5, r1
 800c322:	4b1e      	ldr	r3, [pc, #120]	; (800c39c <weightCalculation+0x98>)
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	05d8      	lsls	r0, r3, #23
 800c328:	1ac0      	subs	r0, r0, r3
 800c32a:	f7f6 fe8f 	bl	800304c <__aeabi_i2d>
 800c32e:	0002      	movs	r2, r0
 800c330:	000b      	movs	r3, r1
 800c332:	0020      	movs	r0, r4
 800c334:	0029      	movs	r1, r5
 800c336:	f7f5 fc73 	bl	8001c20 <__aeabi_ddiv>
 800c33a:	0004      	movs	r4, r0
 800c33c:	000d      	movs	r5, r1
 800c33e:	4b18      	ldr	r3, [pc, #96]	; (800c3a0 <weightCalculation+0x9c>)
 800c340:	6818      	ldr	r0, [r3, #0]
 800c342:	f7f6 feef 	bl	8003124 <__aeabi_f2d>
 800c346:	0022      	movs	r2, r4
 800c348:	002b      	movs	r3, r5
 800c34a:	f7f5 f94d 	bl	80015e8 <__aeabi_dadd>
 800c34e:	4a15      	ldr	r2, [pc, #84]	; (800c3a4 <weightCalculation+0xa0>)
 800c350:	4b15      	ldr	r3, [pc, #84]	; (800c3a8 <weightCalculation+0xa4>)
 800c352:	f7f6 fae1 	bl	8002918 <__aeabi_dsub>
 800c356:	0004      	movs	r4, r0
 800c358:	000d      	movs	r5, r1
 800c35a:	4b14      	ldr	r3, [pc, #80]	; (800c3ac <weightCalculation+0xa8>)
 800c35c:	6818      	ldr	r0, [r3, #0]
 800c35e:	f7f6 fee1 	bl	8003124 <__aeabi_f2d>
 800c362:	0002      	movs	r2, r0
 800c364:	000b      	movs	r3, r1
 800c366:	0020      	movs	r0, r4
 800c368:	0029      	movs	r1, r5
 800c36a:	f7f6 fad5 	bl	8002918 <__aeabi_dsub>
 800c36e:	f7f6 ff2b 	bl	80031c8 <__aeabi_d2f>
 800c372:	1c04      	adds	r4, r0, #0
 800c374:	4b0e      	ldr	r3, [pc, #56]	; (800c3b0 <weightCalculation+0xac>)
 800c376:	6018      	str	r0, [r3, #0]
	weight = (rawvalue * full_scale) / calibration_factor;
 800c378:	4b0e      	ldr	r3, [pc, #56]	; (800c3b4 <weightCalculation+0xb0>)
 800c37a:	8818      	ldrh	r0, [r3, #0]
 800c37c:	f7f5 f8aa 	bl	80014d4 <__aeabi_i2f>
 800c380:	1c21      	adds	r1, r4, #0
 800c382:	f7f4 fd91 	bl	8000ea8 <__aeabi_fmul>
 800c386:	4b0c      	ldr	r3, [pc, #48]	; (800c3b8 <weightCalculation+0xb4>)
 800c388:	6819      	ldr	r1, [r3, #0]
 800c38a:	f7f4 fbb5 	bl	8000af8 <__aeabi_fdiv>
}
 800c38e:	bd70      	pop	{r4, r5, r6, pc}
 800c390:	20001e00 	.word	0x20001e00
 800c394:	3fe00000 	.word	0x3fe00000
 800c398:	40080000 	.word	0x40080000
 800c39c:	20000094 	.word	0x20000094
 800c3a0:	20000090 	.word	0x20000090
 800c3a4:	62317873 	.word	0x62317873
 800c3a8:	3ee3abd9 	.word	0x3ee3abd9
 800c3ac:	20001ddc 	.word	0x20001ddc
 800c3b0:	20001dec 	.word	0x20001dec
 800c3b4:	20001de8 	.word	0x20001de8
 800c3b8:	20001de0 	.word	0x20001de0

0800c3bc <SetHX711Rate>:
{
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800c3c0:	2180      	movs	r1, #128	; 0x80
 800c3c2:	2090      	movs	r0, #144	; 0x90
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	0089      	lsls	r1, r1, #2
 800c3c8:	05c0      	lsls	r0, r0, #23
 800c3ca:	f007 f914 	bl	80135f6 <HAL_GPIO_WritePin>
	rate=Data_Rate;
 800c3ce:	4b0d      	ldr	r3, [pc, #52]	; (800c404 <SetHX711Rate+0x48>)
 800c3d0:	701c      	strb	r4, [r3, #0]
	switch(rate)
 800c3d2:	2c0a      	cmp	r4, #10
 800c3d4:	d008      	beq.n	800c3e8 <SetHX711Rate+0x2c>
 800c3d6:	2c50      	cmp	r4, #80	; 0x50
 800c3d8:	d00d      	beq.n	800c3f6 <SetHX711Rate+0x3a>
		default: HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_RESET);
 800c3da:	2090      	movs	r0, #144	; 0x90
 800c3dc:	2200      	movs	r2, #0
 800c3de:	2140      	movs	r1, #64	; 0x40
 800c3e0:	05c0      	lsls	r0, r0, #23
 800c3e2:	f007 f908 	bl	80135f6 <HAL_GPIO_WritePin>
}
 800c3e6:	e005      	b.n	800c3f4 <SetHX711Rate+0x38>
		case(10): HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_RESET); break;
 800c3e8:	2090      	movs	r0, #144	; 0x90
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	2140      	movs	r1, #64	; 0x40
 800c3ee:	05c0      	lsls	r0, r0, #23
 800c3f0:	f007 f901 	bl	80135f6 <HAL_GPIO_WritePin>
}
 800c3f4:	bd10      	pop	{r4, pc}
		case(80): HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_SET); break;
 800c3f6:	2090      	movs	r0, #144	; 0x90
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	2140      	movs	r1, #64	; 0x40
 800c3fc:	05c0      	lsls	r0, r0, #23
 800c3fe:	f007 f8fa 	bl	80135f6 <HAL_GPIO_WritePin>
 800c402:	e7f7      	b.n	800c3f4 <SetHX711Rate+0x38>
 800c404:	20001deb 	.word	0x20001deb

0800c408 <rateCommand>:
{
 800c408:	b530      	push	{r4, r5, lr}
 800c40a:	b083      	sub	sp, #12
 800c40c:	0004      	movs	r4, r0
 800c40e:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800c410:	2300      	movs	r3, #0
 800c412:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800c414:	2c00      	cmp	r4, #0
 800c416:	d101      	bne.n	800c41c <rateCommand+0x14>
 800c418:	b672      	cpsid	i
 800c41a:	e7fe      	b.n	800c41a <rateCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c41c:	aa01      	add	r2, sp, #4
 800c41e:	2101      	movs	r1, #1
 800c420:	f003 fd8c 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800c424:	0005      	movs	r5, r0
  if (!strncmp((const char *)pcParameterString1, "10", 2))
 800c426:	2202      	movs	r2, #2
 800c428:	4914      	ldr	r1, [pc, #80]	; (800c47c <rateCommand+0x74>)
 800c42a:	f009 fadd 	bl	80159e8 <strncmp>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d00c      	beq.n	800c44c <rateCommand+0x44>
  else if (!strncmp((const char *)pcParameterString1, "80", 2))
 800c432:	2202      	movs	r2, #2
 800c434:	4912      	ldr	r1, [pc, #72]	; (800c480 <rateCommand+0x78>)
 800c436:	0028      	movs	r0, r5
 800c438:	f009 fad6 	bl	80159e8 <strncmp>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d014      	beq.n	800c46a <rateCommand+0x62>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800c440:	2213      	movs	r2, #19
 800c442:	4910      	ldr	r1, [pc, #64]	; (800c484 <rateCommand+0x7c>)
 800c444:	0020      	movs	r0, r4
 800c446:	f009 f888 	bl	801555a <memcpy>
 800c44a:	e007      	b.n	800c45c <rateCommand+0x54>
    rate = 10;      // 10SPS
 800c44c:	4b0e      	ldr	r3, [pc, #56]	; (800c488 <rateCommand+0x80>)
 800c44e:	220a      	movs	r2, #10
 800c450:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement rate: 10\r\n" );
 800c452:	3212      	adds	r2, #18
 800c454:	490d      	ldr	r1, [pc, #52]	; (800c48c <rateCommand+0x84>)
 800c456:	0020      	movs	r0, r4
 800c458:	f009 f87f 	bl	801555a <memcpy>
	SetHX711Rate(rate);
 800c45c:	4b0a      	ldr	r3, [pc, #40]	; (800c488 <rateCommand+0x80>)
 800c45e:	7818      	ldrb	r0, [r3, #0]
 800c460:	f7ff ffac 	bl	800c3bc <SetHX711Rate>
}
 800c464:	2000      	movs	r0, #0
 800c466:	b003      	add	sp, #12
 800c468:	bd30      	pop	{r4, r5, pc}
    rate = 80;      // 80SPS
 800c46a:	4b07      	ldr	r3, [pc, #28]	; (800c488 <rateCommand+0x80>)
 800c46c:	2250      	movs	r2, #80	; 0x50
 800c46e:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement rate: 80\r\n" );
 800c470:	3a34      	subs	r2, #52	; 0x34
 800c472:	4907      	ldr	r1, [pc, #28]	; (800c490 <rateCommand+0x88>)
 800c474:	0020      	movs	r0, r4
 800c476:	f009 f870 	bl	801555a <memcpy>
 800c47a:	e7ef      	b.n	800c45c <rateCommand+0x54>
 800c47c:	0801b438 	.word	0x0801b438
 800c480:	0801ccc0 	.word	0x0801ccc0
 800c484:	0801b310 	.word	0x0801b310
 800c488:	20001deb 	.word	0x20001deb
 800c48c:	0801cca4 	.word	0x0801cca4
 800c490:	0801ccc4 	.word	0x0801ccc4

0800c494 <formatModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE formatModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 800c494:	b510      	push	{r4, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	0004      	movs	r4, r0
 800c49a:	0010      	movs	r0, r2
	//Module_Status result = H26R0_OK;
  int8_t *pcParameterString1;
  portBASE_TYPE xParameterStringLength1 = 0;
 800c49c:	2300      	movs	r3, #0
 800c49e:	9301      	str	r3, [sp, #4]

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800c4a0:	2c00      	cmp	r4, #0
 800c4a2:	d101      	bne.n	800c4a8 <formatModParamCommand+0x14>
 800c4a4:	b672      	cpsid	i
 800c4a6:	e7fe      	b.n	800c4a6 <formatModParamCommand+0x12>

  /* 1st parameter for naming of uart port: P1 to P6 */
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c4a8:	aa01      	add	r2, sp, #4
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	f003 fd46 	bl	800ff3c <FreeRTOS_CLIGetParameter>
  if (!strncmp((const char *)pcParameterString1, "u", 1))
 800c4b0:	7803      	ldrb	r3, [r0, #0]
 800c4b2:	2b75      	cmp	r3, #117	; 0x75
 800c4b4:	d00d      	beq.n	800c4d2 <formatModParamCommand+0x3e>
  {
    H26R0_DATA_FORMAT = FMT_UINT32;      
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: uint\r\n" );
  }
  else if (!strncmp((const char *)pcParameterString1, "f", 1))
 800c4b6:	2b66      	cmp	r3, #102	; 0x66
 800c4b8:	d014      	beq.n	800c4e4 <formatModParamCommand+0x50>
    H26R0_DATA_FORMAT = FMT_FLOAT;        
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: float\r\n" );
  }
	else
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800c4ba:	2213      	movs	r2, #19
 800c4bc:	490e      	ldr	r1, [pc, #56]	; (800c4f8 <formatModParamCommand+0x64>)
 800c4be:	0020      	movs	r0, r4
 800c4c0:	f009 f84b 	bl	801555a <memcpy>
	}
	SetHX711Rate(rate);
 800c4c4:	4b0d      	ldr	r3, [pc, #52]	; (800c4fc <formatModParamCommand+0x68>)
 800c4c6:	7818      	ldrb	r0, [r3, #0]
 800c4c8:	f7ff ff78 	bl	800c3bc <SetHX711Rate>
	return pdFALSE;	
}
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	b002      	add	sp, #8
 800c4d0:	bd10      	pop	{r4, pc}
    H26R0_DATA_FORMAT = FMT_UINT32;      
 800c4d2:	4b0b      	ldr	r3, [pc, #44]	; (800c500 <formatModParamCommand+0x6c>)
 800c4d4:	2205      	movs	r2, #5
 800c4d6:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: uint\r\n" );
 800c4d8:	3214      	adds	r2, #20
 800c4da:	490a      	ldr	r1, [pc, #40]	; (800c504 <formatModParamCommand+0x70>)
 800c4dc:	0020      	movs	r0, r4
 800c4de:	f009 f83c 	bl	801555a <memcpy>
 800c4e2:	e7ef      	b.n	800c4c4 <formatModParamCommand+0x30>
    H26R0_DATA_FORMAT = FMT_FLOAT;        
 800c4e4:	4b06      	ldr	r3, [pc, #24]	; (800c500 <formatModParamCommand+0x6c>)
 800c4e6:	2207      	movs	r2, #7
 800c4e8:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: float\r\n" );
 800c4ea:	3213      	adds	r2, #19
 800c4ec:	4906      	ldr	r1, [pc, #24]	; (800c508 <formatModParamCommand+0x74>)
 800c4ee:	0020      	movs	r0, r4
 800c4f0:	f009 f833 	bl	801555a <memcpy>
 800c4f4:	e7e6      	b.n	800c4c4 <formatModParamCommand+0x30>
 800c4f6:	46c0      	nop			; (mov r8, r8)
 800c4f8:	0801b310 	.word	0x0801b310
 800c4fc:	20001deb 	.word	0x20001deb
 800c500:	2000008c 	.word	0x2000008c
 800c504:	0801cc6c 	.word	0x0801cc6c
 800c508:	0801cc88 	.word	0x0801cc88

0800c50c <SetHX711Gain>:
	switch(ch)
 800c50c:	2801      	cmp	r0, #1
 800c50e:	d005      	beq.n	800c51c <SetHX711Gain+0x10>
 800c510:	2802      	cmp	r0, #2
 800c512:	d00a      	beq.n	800c52a <SetHX711Gain+0x1e>
		default: pulses=25;
 800c514:	4b08      	ldr	r3, [pc, #32]	; (800c538 <SetHX711Gain+0x2c>)
 800c516:	2219      	movs	r2, #25
 800c518:	701a      	strb	r2, [r3, #0]
}
 800c51a:	e005      	b.n	800c528 <SetHX711Gain+0x1c>
		case(1): pulses=25;	gain=128; break;  //Chanel A, Gain factor 128
 800c51c:	4b06      	ldr	r3, [pc, #24]	; (800c538 <SetHX711Gain+0x2c>)
 800c51e:	2219      	movs	r2, #25
 800c520:	701a      	strb	r2, [r3, #0]
 800c522:	4b06      	ldr	r3, [pc, #24]	; (800c53c <SetHX711Gain+0x30>)
 800c524:	3267      	adds	r2, #103	; 0x67
 800c526:	701a      	strb	r2, [r3, #0]
}
 800c528:	4770      	bx	lr
		case(2): pulses=27; gain=32;  break;  //Chanel B, Gain factor 32
 800c52a:	4b03      	ldr	r3, [pc, #12]	; (800c538 <SetHX711Gain+0x2c>)
 800c52c:	221b      	movs	r2, #27
 800c52e:	701a      	strb	r2, [r3, #0]
 800c530:	4b02      	ldr	r3, [pc, #8]	; (800c53c <SetHX711Gain+0x30>)
 800c532:	3205      	adds	r2, #5
 800c534:	701a      	strb	r2, [r3, #0]
 800c536:	e7f7      	b.n	800c528 <SetHX711Gain+0x1c>
 800c538:	20001dea 	.word	0x20001dea
 800c53c:	20000094 	.word	0x20000094

0800c540 <Calibration>:
{
 800c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c542:	0004      	movs	r4, r0
 800c544:	1c0f      	adds	r7, r1, #0
	cell_output=Cell_Output;
 800c546:	4d1b      	ldr	r5, [pc, #108]	; (800c5b4 <Calibration+0x74>)
 800c548:	6029      	str	r1, [r5, #0]
	full_scale=Full_Scale;
 800c54a:	4b1b      	ldr	r3, [pc, #108]	; (800c5b8 <Calibration+0x78>)
 800c54c:	8018      	strh	r0, [r3, #0]
	cell_drift=Cell_Drift/1000.0f;
 800c54e:	491b      	ldr	r1, [pc, #108]	; (800c5bc <Calibration+0x7c>)
 800c550:	1c10      	adds	r0, r2, #0
 800c552:	f7f4 fad1 	bl	8000af8 <__aeabi_fdiv>
 800c556:	4e1a      	ldr	r6, [pc, #104]	; (800c5c0 <Calibration+0x80>)
 800c558:	6030      	str	r0, [r6, #0]
	calibration_factor=cell_output*AVDD/1000.0f;		// mV
 800c55a:	491a      	ldr	r1, [pc, #104]	; (800c5c4 <Calibration+0x84>)
 800c55c:	1c38      	adds	r0, r7, #0
 800c55e:	f7f4 fca3 	bl	8000ea8 <__aeabi_fmul>
 800c562:	4916      	ldr	r1, [pc, #88]	; (800c5bc <Calibration+0x7c>)
 800c564:	f7f4 fac8 	bl	8000af8 <__aeabi_fdiv>
 800c568:	4b17      	ldr	r3, [pc, #92]	; (800c5c8 <Calibration+0x88>)
 800c56a:	6018      	str	r0, [r3, #0]
	EE_WriteVariable(_EE_cell_full_scale, full_scale);
 800c56c:	20fa      	movs	r0, #250	; 0xfa
 800c56e:	0021      	movs	r1, r4
 800c570:	0040      	lsls	r0, r0, #1
 800c572:	f7fb fc2d 	bl	8007dd0 <EE_WriteVariable>
	word_LSB=*(uint16_t*)&cell_drift;
 800c576:	8831      	ldrh	r1, [r6, #0]
 800c578:	4f14      	ldr	r7, [pc, #80]	; (800c5cc <Calibration+0x8c>)
 800c57a:	8039      	strh	r1, [r7, #0]
	word_MSB=*(((uint16_t*)&cell_drift)+1);
 800c57c:	4c14      	ldr	r4, [pc, #80]	; (800c5d0 <Calibration+0x90>)
 800c57e:	8873      	ldrh	r3, [r6, #2]
 800c580:	8023      	strh	r3, [r4, #0]
	EE_WriteVariable(_EE_cell_drift_LSB, word_LSB);
 800c582:	20f6      	movs	r0, #246	; 0xf6
 800c584:	30ff      	adds	r0, #255	; 0xff
 800c586:	f7fb fc23 	bl	8007dd0 <EE_WriteVariable>
	EE_WriteVariable(_EE_cell_drift_MSB, word_MSB);
 800c58a:	8821      	ldrh	r1, [r4, #0]
 800c58c:	20fb      	movs	r0, #251	; 0xfb
 800c58e:	0040      	lsls	r0, r0, #1
 800c590:	f7fb fc1e 	bl	8007dd0 <EE_WriteVariable>
	word_LSB=*(uint16_t*)&cell_output;
 800c594:	8829      	ldrh	r1, [r5, #0]
 800c596:	8039      	strh	r1, [r7, #0]
	word_MSB=*(((uint16_t*)&cell_output)+1);
 800c598:	886b      	ldrh	r3, [r5, #2]
 800c59a:	8023      	strh	r3, [r4, #0]
	EE_WriteVariable(_EE_cell_output_LSB, word_LSB);
 800c59c:	20f8      	movs	r0, #248	; 0xf8
 800c59e:	30ff      	adds	r0, #255	; 0xff
 800c5a0:	f7fb fc16 	bl	8007dd0 <EE_WriteVariable>
	EE_WriteVariable(_EE_cell_output_MSB, word_MSB);
 800c5a4:	8821      	ldrh	r1, [r4, #0]
 800c5a6:	20fc      	movs	r0, #252	; 0xfc
 800c5a8:	0040      	lsls	r0, r0, #1
 800c5aa:	f7fb fc11 	bl	8007dd0 <EE_WriteVariable>
}
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5b2:	46c0      	nop			; (mov r8, r8)
 800c5b4:	20001de4 	.word	0x20001de4
 800c5b8:	20001de8 	.word	0x20001de8
 800c5bc:	447a0000 	.word	0x447a0000
 800c5c0:	20000090 	.word	0x20000090
 800c5c4:	40400000 	.word	0x40400000
 800c5c8:	20001de0 	.word	0x20001de0
 800c5cc:	20001e14 	.word	0x20001e14
 800c5d0:	20001e16 	.word	0x20001e16

0800c5d4 <calibrationCommand>:
{
 800c5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	9001      	str	r0, [sp, #4]
 800c5da:	0017      	movs	r7, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	9305      	str	r3, [sp, #20]
	portBASE_TYPE xParameterStringLength2 = 0;
 800c5e0:	9304      	str	r3, [sp, #16]
	portBASE_TYPE xParameterStringLength3 = 0;
 800c5e2:	9303      	str	r3, [sp, #12]
  configASSERT( pcWriteBuffer );
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d101      	bne.n	800c5ec <calibrationCommand+0x18>
 800c5e8:	b672      	cpsid	i
 800c5ea:	e7fe      	b.n	800c5ea <calibrationCommand+0x16>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c5ec:	aa05      	add	r2, sp, #20
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	0038      	movs	r0, r7
 800c5f2:	f003 fca3 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800c5f6:	0004      	movs	r4, r0
  pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800c5f8:	aa04      	add	r2, sp, #16
 800c5fa:	2102      	movs	r1, #2
 800c5fc:	0038      	movs	r0, r7
 800c5fe:	f003 fc9d 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800c602:	0006      	movs	r6, r0
  pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800c604:	aa03      	add	r2, sp, #12
 800c606:	2103      	movs	r1, #3
 800c608:	0038      	movs	r0, r7
 800c60a:	f003 fc97 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800c60e:	0007      	movs	r7, r0
  if (NULL != pcParameterString1)
 800c610:	2c00      	cmp	r4, #0
 800c612:	d023      	beq.n	800c65c <calibrationCommand+0x88>
    load_cell_scale = atoi( (char *)pcParameterString1);
 800c614:	0020      	movs	r0, r4
 800c616:	f008 fd10 	bl	801503a <atoi>
 800c61a:	b284      	uxth	r4, r0
	Module_Status result = H26R0_OK;
 800c61c:	2500      	movs	r5, #0
	if (NULL != pcParameterString2)
 800c61e:	2e00      	cmp	r6, #0
 800c620:	d01f      	beq.n	800c662 <calibrationCommand+0x8e>
    load_cell_output = atof( (char *)pcParameterString2);
 800c622:	0030      	movs	r0, r6
 800c624:	f008 fd04 	bl	8015030 <atof>
 800c628:	f7f6 fdce 	bl	80031c8 <__aeabi_d2f>
 800c62c:	1c06      	adds	r6, r0, #0
  if (NULL != pcParameterString3)
 800c62e:	2f00      	cmp	r7, #0
 800c630:	d01a      	beq.n	800c668 <calibrationCommand+0x94>
      load_cell_drift = atof( (char *)pcParameterString3);
 800c632:	0038      	movs	r0, r7
 800c634:	f008 fcfc 	bl	8015030 <atof>
 800c638:	f7f6 fdc6 	bl	80031c8 <__aeabi_d2f>
 800c63c:	1c07      	adds	r7, r0, #0
  if (H26R0_ERR_WrongParams == result)
 800c63e:	2d02      	cmp	r5, #2
 800c640:	d013      	beq.n	800c66a <calibrationCommand+0x96>
	strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800c642:	2228      	movs	r2, #40	; 0x28
 800c644:	490c      	ldr	r1, [pc, #48]	; (800c678 <calibrationCommand+0xa4>)
 800c646:	9801      	ldr	r0, [sp, #4]
 800c648:	f008 ff87 	bl	801555a <memcpy>
	Calibration(load_cell_scale, load_cell_output, load_cell_drift);
 800c64c:	1c3a      	adds	r2, r7, #0
 800c64e:	1c31      	adds	r1, r6, #0
 800c650:	0020      	movs	r0, r4
 800c652:	f7ff ff75 	bl	800c540 <Calibration>
}
 800c656:	2000      	movs	r0, #0
 800c658:	b007      	add	sp, #28
 800c65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t load_cell_scale=0;
 800c65c:	2400      	movs	r4, #0
    result = H26R0_ERR_WrongParams;
 800c65e:	2502      	movs	r5, #2
 800c660:	e7dd      	b.n	800c61e <calibrationCommand+0x4a>
	float load_cell_output=0.0f;
 800c662:	2600      	movs	r6, #0
    result = H26R0_ERR_WrongParams;
 800c664:	2502      	movs	r5, #2
 800c666:	e7e2      	b.n	800c62e <calibrationCommand+0x5a>
	float load_cell_drift=0.0f;
 800c668:	2700      	movs	r7, #0
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800c66a:	2213      	movs	r2, #19
 800c66c:	4903      	ldr	r1, [pc, #12]	; (800c67c <calibrationCommand+0xa8>)
 800c66e:	9801      	ldr	r0, [sp, #4]
 800c670:	f008 ff73 	bl	801555a <memcpy>
 800c674:	e7e5      	b.n	800c642 <calibrationCommand+0x6e>
 800c676:	46c0      	nop			; (mov r8, r8)
 800c678:	0801cbc8 	.word	0x0801cbc8
 800c67c:	0801b310 	.word	0x0801b310

0800c680 <StreamGramToPort>:
{
 800c680:	b530      	push	{r4, r5, lr}
 800c682:	b083      	sub	sp, #12
 800c684:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c686:	4d1b      	ldr	r5, [pc, #108]	; (800c6f4 <StreamGramToPort+0x74>)
 800c688:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c68a:	481b      	ldr	r0, [pc, #108]	; (800c6f8 <StreamGramToPort+0x78>)
 800c68c:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c68e:	491b      	ldr	r1, [pc, #108]	; (800c6fc <StreamGramToPort+0x7c>)
 800c690:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c692:	4a1b      	ldr	r2, [pc, #108]	; (800c700 <StreamGramToPort+0x80>)
 800c694:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c696:	4b1b      	ldr	r3, [pc, #108]	; (800c704 <StreamGramToPort+0x84>)
 800c698:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c69a:	4b1b      	ldr	r3, [pc, #108]	; (800c708 <StreamGramToPort+0x88>)
 800c69c:	2202      	movs	r2, #2
 800c69e:	701a      	strb	r2, [r3, #0]
	unit=Gram;
 800c6a0:	4b1a      	ldr	r3, [pc, #104]	; (800c70c <StreamGramToPort+0x8c>)
 800c6a2:	3a01      	subs	r2, #1
 800c6a4:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c6a6:	1e63      	subs	r3, r4, #1
 800c6a8:	3303      	adds	r3, #3
 800c6aa:	d902      	bls.n	800c6b2 <StreamGramToPort+0x32>
}	
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	b003      	add	sp, #12
 800c6b0:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Timeout Measurement", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c6b2:	0163      	lsls	r3, r4, #5
 800c6b4:	1b1b      	subs	r3, r3, r4
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	191c      	adds	r4, r3, r4
 800c6ba:	00e0      	lsls	r0, r4, #3
 800c6bc:	21fa      	movs	r1, #250	; 0xfa
 800c6be:	0089      	lsls	r1, r1, #2
 800c6c0:	f7f3 fd46 	bl	8000150 <__udivsi3>
 800c6c4:	0001      	movs	r1, r0
 800c6c6:	4b12      	ldr	r3, [pc, #72]	; (800c710 <StreamGramToPort+0x90>)
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	23ff      	movs	r3, #255	; 0xff
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	4811      	ldr	r0, [pc, #68]	; (800c714 <StreamGramToPort+0x94>)
 800c6d0:	f005 f834 	bl	801173c <xTimerCreate>
 800c6d4:	0004      	movs	r4, r0
 800c6d6:	4b10      	ldr	r3, [pc, #64]	; (800c718 <StreamGramToPort+0x98>)
 800c6d8:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c6da:	f004 fac1 	bl	8010c60 <xTaskGetTickCount>
 800c6de:	0002      	movs	r2, r0
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	425b      	negs	r3, r3
 800c6e4:	9300      	str	r3, [sp, #0]
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	0020      	movs	r0, r4
 800c6ec:	f005 f84a 	bl	8011784 <xTimerGenericCommand>
 800c6f0:	e7dc      	b.n	800c6ac <StreamGramToPort+0x2c>
 800c6f2:	46c0      	nop			; (mov r8, r8)
 800c6f4:	200071e0 	.word	0x200071e0
 800c6f8:	200071e2 	.word	0x200071e2
 800c6fc:	20007420 	.word	0x20007420
 800c700:	200073ac 	.word	0x200073ac
 800c704:	20007424 	.word	0x20007424
 800c708:	200071e1 	.word	0x200071e1
 800c70c:	200000bc 	.word	0x200000bc
 800c710:	0800bda1 	.word	0x0800bda1
 800c714:	0801cba0 	.word	0x0801cba0
 800c718:	20001e18 	.word	0x20001e18

0800c71c <StreamKGramToPort>:
{
 800c71c:	b530      	push	{r4, r5, lr}
 800c71e:	b083      	sub	sp, #12
 800c720:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c722:	4d1a      	ldr	r5, [pc, #104]	; (800c78c <StreamKGramToPort+0x70>)
 800c724:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c726:	481a      	ldr	r0, [pc, #104]	; (800c790 <StreamKGramToPort+0x74>)
 800c728:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c72a:	491a      	ldr	r1, [pc, #104]	; (800c794 <StreamKGramToPort+0x78>)
 800c72c:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c72e:	4a1a      	ldr	r2, [pc, #104]	; (800c798 <StreamKGramToPort+0x7c>)
 800c730:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c732:	4b1a      	ldr	r3, [pc, #104]	; (800c79c <StreamKGramToPort+0x80>)
 800c734:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c736:	2302      	movs	r3, #2
 800c738:	4a19      	ldr	r2, [pc, #100]	; (800c7a0 <StreamKGramToPort+0x84>)
 800c73a:	7013      	strb	r3, [r2, #0]
	unit=KGram;
 800c73c:	4a19      	ldr	r2, [pc, #100]	; (800c7a4 <StreamKGramToPort+0x88>)
 800c73e:	7013      	strb	r3, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c740:	1e63      	subs	r3, r4, #1
 800c742:	3303      	adds	r3, #3
 800c744:	d902      	bls.n	800c74c <StreamKGramToPort+0x30>
}
 800c746:	2000      	movs	r0, #0
 800c748:	b003      	add	sp, #12
 800c74a:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c74c:	0163      	lsls	r3, r4, #5
 800c74e:	1b1b      	subs	r3, r3, r4
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	191c      	adds	r4, r3, r4
 800c754:	00e0      	lsls	r0, r4, #3
 800c756:	21fa      	movs	r1, #250	; 0xfa
 800c758:	0089      	lsls	r1, r1, #2
 800c75a:	f7f3 fcf9 	bl	8000150 <__udivsi3>
 800c75e:	0001      	movs	r1, r0
 800c760:	4b11      	ldr	r3, [pc, #68]	; (800c7a8 <StreamKGramToPort+0x8c>)
 800c762:	9300      	str	r3, [sp, #0]
 800c764:	23ff      	movs	r3, #255	; 0xff
 800c766:	2200      	movs	r2, #0
 800c768:	4810      	ldr	r0, [pc, #64]	; (800c7ac <StreamKGramToPort+0x90>)
 800c76a:	f004 ffe7 	bl	801173c <xTimerCreate>
 800c76e:	0004      	movs	r4, r0
 800c770:	4b0f      	ldr	r3, [pc, #60]	; (800c7b0 <StreamKGramToPort+0x94>)
 800c772:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c774:	f004 fa74 	bl	8010c60 <xTaskGetTickCount>
 800c778:	0002      	movs	r2, r0
 800c77a:	2301      	movs	r3, #1
 800c77c:	425b      	negs	r3, r3
 800c77e:	9300      	str	r3, [sp, #0]
 800c780:	2300      	movs	r3, #0
 800c782:	2101      	movs	r1, #1
 800c784:	0020      	movs	r0, r4
 800c786:	f004 fffd 	bl	8011784 <xTimerGenericCommand>
 800c78a:	e7dc      	b.n	800c746 <StreamKGramToPort+0x2a>
 800c78c:	200071e0 	.word	0x200071e0
 800c790:	200071e2 	.word	0x200071e2
 800c794:	20007420 	.word	0x20007420
 800c798:	200073ac 	.word	0x200073ac
 800c79c:	20007424 	.word	0x20007424
 800c7a0:	200071e1 	.word	0x200071e1
 800c7a4:	200000bc 	.word	0x200000bc
 800c7a8:	0800bda1 	.word	0x0800bda1
 800c7ac:	0801cbb4 	.word	0x0801cbb4
 800c7b0:	20001e18 	.word	0x20001e18

0800c7b4 <StreamOunceToPort>:
{
 800c7b4:	b530      	push	{r4, r5, lr}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c7ba:	4d1b      	ldr	r5, [pc, #108]	; (800c828 <StreamOunceToPort+0x74>)
 800c7bc:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c7be:	481b      	ldr	r0, [pc, #108]	; (800c82c <StreamOunceToPort+0x78>)
 800c7c0:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c7c2:	491b      	ldr	r1, [pc, #108]	; (800c830 <StreamOunceToPort+0x7c>)
 800c7c4:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c7c6:	4a1b      	ldr	r2, [pc, #108]	; (800c834 <StreamOunceToPort+0x80>)
 800c7c8:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c7ca:	4b1b      	ldr	r3, [pc, #108]	; (800c838 <StreamOunceToPort+0x84>)
 800c7cc:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c7ce:	4b1b      	ldr	r3, [pc, #108]	; (800c83c <StreamOunceToPort+0x88>)
 800c7d0:	2202      	movs	r2, #2
 800c7d2:	701a      	strb	r2, [r3, #0]
	unit=Ounce;
 800c7d4:	4b1a      	ldr	r3, [pc, #104]	; (800c840 <StreamOunceToPort+0x8c>)
 800c7d6:	3201      	adds	r2, #1
 800c7d8:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c7da:	1e63      	subs	r3, r4, #1
 800c7dc:	3303      	adds	r3, #3
 800c7de:	d902      	bls.n	800c7e6 <StreamOunceToPort+0x32>
}
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	b003      	add	sp, #12
 800c7e4:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c7e6:	0163      	lsls	r3, r4, #5
 800c7e8:	1b1b      	subs	r3, r3, r4
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	191c      	adds	r4, r3, r4
 800c7ee:	00e0      	lsls	r0, r4, #3
 800c7f0:	21fa      	movs	r1, #250	; 0xfa
 800c7f2:	0089      	lsls	r1, r1, #2
 800c7f4:	f7f3 fcac 	bl	8000150 <__udivsi3>
 800c7f8:	0001      	movs	r1, r0
 800c7fa:	4b12      	ldr	r3, [pc, #72]	; (800c844 <StreamOunceToPort+0x90>)
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	23ff      	movs	r3, #255	; 0xff
 800c800:	2200      	movs	r2, #0
 800c802:	4811      	ldr	r0, [pc, #68]	; (800c848 <StreamOunceToPort+0x94>)
 800c804:	f004 ff9a 	bl	801173c <xTimerCreate>
 800c808:	0004      	movs	r4, r0
 800c80a:	4b10      	ldr	r3, [pc, #64]	; (800c84c <StreamOunceToPort+0x98>)
 800c80c:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c80e:	f004 fa27 	bl	8010c60 <xTaskGetTickCount>
 800c812:	0002      	movs	r2, r0
 800c814:	2301      	movs	r3, #1
 800c816:	425b      	negs	r3, r3
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	2300      	movs	r3, #0
 800c81c:	2101      	movs	r1, #1
 800c81e:	0020      	movs	r0, r4
 800c820:	f004 ffb0 	bl	8011784 <xTimerGenericCommand>
 800c824:	e7dc      	b.n	800c7e0 <StreamOunceToPort+0x2c>
 800c826:	46c0      	nop			; (mov r8, r8)
 800c828:	200071e0 	.word	0x200071e0
 800c82c:	200071e2 	.word	0x200071e2
 800c830:	20007420 	.word	0x20007420
 800c834:	200073ac 	.word	0x200073ac
 800c838:	20007424 	.word	0x20007424
 800c83c:	200071e1 	.word	0x200071e1
 800c840:	200000bc 	.word	0x200000bc
 800c844:	0800bda1 	.word	0x0800bda1
 800c848:	0801cbb4 	.word	0x0801cbb4
 800c84c:	20001e18 	.word	0x20001e18

0800c850 <StreamPoundToPort>:
{
 800c850:	b530      	push	{r4, r5, lr}
 800c852:	b083      	sub	sp, #12
 800c854:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c856:	4d1b      	ldr	r5, [pc, #108]	; (800c8c4 <StreamPoundToPort+0x74>)
 800c858:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c85a:	481b      	ldr	r0, [pc, #108]	; (800c8c8 <StreamPoundToPort+0x78>)
 800c85c:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c85e:	491b      	ldr	r1, [pc, #108]	; (800c8cc <StreamPoundToPort+0x7c>)
 800c860:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c862:	4a1b      	ldr	r2, [pc, #108]	; (800c8d0 <StreamPoundToPort+0x80>)
 800c864:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c866:	4b1b      	ldr	r3, [pc, #108]	; (800c8d4 <StreamPoundToPort+0x84>)
 800c868:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c86a:	4b1b      	ldr	r3, [pc, #108]	; (800c8d8 <StreamPoundToPort+0x88>)
 800c86c:	2202      	movs	r2, #2
 800c86e:	701a      	strb	r2, [r3, #0]
	unit=Pound;
 800c870:	4b1a      	ldr	r3, [pc, #104]	; (800c8dc <StreamPoundToPort+0x8c>)
 800c872:	3202      	adds	r2, #2
 800c874:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c876:	1e63      	subs	r3, r4, #1
 800c878:	3303      	adds	r3, #3
 800c87a:	d902      	bls.n	800c882 <StreamPoundToPort+0x32>
}
 800c87c:	2000      	movs	r0, #0
 800c87e:	b003      	add	sp, #12
 800c880:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c882:	0163      	lsls	r3, r4, #5
 800c884:	1b1b      	subs	r3, r3, r4
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	191c      	adds	r4, r3, r4
 800c88a:	00e0      	lsls	r0, r4, #3
 800c88c:	21fa      	movs	r1, #250	; 0xfa
 800c88e:	0089      	lsls	r1, r1, #2
 800c890:	f7f3 fc5e 	bl	8000150 <__udivsi3>
 800c894:	0001      	movs	r1, r0
 800c896:	4b12      	ldr	r3, [pc, #72]	; (800c8e0 <StreamPoundToPort+0x90>)
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	23ff      	movs	r3, #255	; 0xff
 800c89c:	2200      	movs	r2, #0
 800c89e:	4811      	ldr	r0, [pc, #68]	; (800c8e4 <StreamPoundToPort+0x94>)
 800c8a0:	f004 ff4c 	bl	801173c <xTimerCreate>
 800c8a4:	0004      	movs	r4, r0
 800c8a6:	4b10      	ldr	r3, [pc, #64]	; (800c8e8 <StreamPoundToPort+0x98>)
 800c8a8:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c8aa:	f004 f9d9 	bl	8010c60 <xTaskGetTickCount>
 800c8ae:	0002      	movs	r2, r0
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	425b      	negs	r3, r3
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	2101      	movs	r1, #1
 800c8ba:	0020      	movs	r0, r4
 800c8bc:	f004 ff62 	bl	8011784 <xTimerGenericCommand>
 800c8c0:	e7dc      	b.n	800c87c <StreamPoundToPort+0x2c>
 800c8c2:	46c0      	nop			; (mov r8, r8)
 800c8c4:	200071e0 	.word	0x200071e0
 800c8c8:	200071e2 	.word	0x200071e2
 800c8cc:	20007420 	.word	0x20007420
 800c8d0:	200073ac 	.word	0x200073ac
 800c8d4:	20007424 	.word	0x20007424
 800c8d8:	200071e1 	.word	0x200071e1
 800c8dc:	200000bc 	.word	0x200000bc
 800c8e0:	0800bda1 	.word	0x0800bda1
 800c8e4:	0801cbb4 	.word	0x0801cbb4
 800c8e8:	20001e18 	.word	0x20001e18

0800c8ec <StreamKGramToCLI>:
{
 800c8ec:	b510      	push	{r4, lr}
 800c8ee:	b082      	sub	sp, #8
	global_ch=Ch;
 800c8f0:	4b1a      	ldr	r3, [pc, #104]	; (800c95c <StreamKGramToCLI+0x70>)
 800c8f2:	7018      	strb	r0, [r3, #0]
	global_period=Period;
 800c8f4:	4b1a      	ldr	r3, [pc, #104]	; (800c960 <StreamKGramToCLI+0x74>)
 800c8f6:	6019      	str	r1, [r3, #0]
	global_timeout=Timeout;
 800c8f8:	4b1a      	ldr	r3, [pc, #104]	; (800c964 <StreamKGramToCLI+0x78>)
 800c8fa:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800c8fc:	4b1a      	ldr	r3, [pc, #104]	; (800c968 <StreamKGramToCLI+0x7c>)
 800c8fe:	2101      	movs	r1, #1
 800c900:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c902:	1e53      	subs	r3, r2, #1
 800c904:	3303      	adds	r3, #3
 800c906:	d909      	bls.n	800c91c <StreamKGramToCLI+0x30>
	if (global_timeout > 0)
 800c908:	4b16      	ldr	r3, [pc, #88]	; (800c964 <StreamKGramToCLI+0x78>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <StreamKGramToCLI+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c910:	4b16      	ldr	r3, [pc, #88]	; (800c96c <StreamKGramToCLI+0x80>)
 800c912:	2201      	movs	r2, #1
 800c914:	701a      	strb	r2, [r3, #0]
}
 800c916:	2000      	movs	r0, #0
 800c918:	b002      	add	sp, #8
 800c91a:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c91c:	0153      	lsls	r3, r2, #5
 800c91e:	1a9b      	subs	r3, r3, r2
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	189a      	adds	r2, r3, r2
 800c924:	00d0      	lsls	r0, r2, #3
 800c926:	21fa      	movs	r1, #250	; 0xfa
 800c928:	0089      	lsls	r1, r1, #2
 800c92a:	f7f3 fc11 	bl	8000150 <__udivsi3>
 800c92e:	0001      	movs	r1, r0
 800c930:	4b0f      	ldr	r3, [pc, #60]	; (800c970 <StreamKGramToCLI+0x84>)
 800c932:	9300      	str	r3, [sp, #0]
 800c934:	23ff      	movs	r3, #255	; 0xff
 800c936:	2200      	movs	r2, #0
 800c938:	480e      	ldr	r0, [pc, #56]	; (800c974 <StreamKGramToCLI+0x88>)
 800c93a:	f004 feff 	bl	801173c <xTimerCreate>
 800c93e:	0004      	movs	r4, r0
 800c940:	4b0d      	ldr	r3, [pc, #52]	; (800c978 <StreamKGramToCLI+0x8c>)
 800c942:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c944:	f004 f98c 	bl	8010c60 <xTaskGetTickCount>
 800c948:	0002      	movs	r2, r0
 800c94a:	2301      	movs	r3, #1
 800c94c:	425b      	negs	r3, r3
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	2300      	movs	r3, #0
 800c952:	2101      	movs	r1, #1
 800c954:	0020      	movs	r0, r4
 800c956:	f004 ff15 	bl	8011784 <xTimerGenericCommand>
 800c95a:	e7d5      	b.n	800c908 <StreamKGramToCLI+0x1c>
 800c95c:	200071e0 	.word	0x200071e0
 800c960:	200073ac 	.word	0x200073ac
 800c964:	20007424 	.word	0x20007424
 800c968:	200071e1 	.word	0x200071e1
 800c96c:	20001df0 	.word	0x20001df0
 800c970:	0800bda1 	.word	0x0800bda1
 800c974:	0801cbb4 	.word	0x0801cbb4
 800c978:	20001e18 	.word	0x20001e18

0800c97c <demoCommand>:
{
 800c97c:	b570      	push	{r4, r5, r6, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	0004      	movs	r4, r0
 800c982:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	9303      	str	r3, [sp, #12]
	configASSERT( pcWriteBuffer );
 800c988:	2c00      	cmp	r4, #0
 800c98a:	d101      	bne.n	800c990 <demoCommand+0x14>
 800c98c:	b672      	cpsid	i
 800c98e:	e7fe      	b.n	800c98e <demoCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c990:	aa03      	add	r2, sp, #12
 800c992:	2101      	movs	r1, #1
 800c994:	f003 fad2 	bl	800ff3c <FreeRTOS_CLIGetParameter>
  if (NULL != pcParameterString1)
 800c998:	2800      	cmp	r0, #0
 800c99a:	d01b      	beq.n	800c9d4 <demoCommand+0x58>
    channel = atoi( (char *)pcParameterString1);
 800c99c:	f008 fb4d 	bl	801503a <atoi>
 800c9a0:	b2c5      	uxtb	r5, r0
	Module_Status result = H26R0_OK;
 800c9a2:	2600      	movs	r6, #0
		if (channel == 1 || channel == 2)
 800c9a4:	1e6b      	subs	r3, r5, #1
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d916      	bls.n	800c9da <demoCommand+0x5e>
	if (result != H26R0_OK || channel != 1 || channel != 2){
 800c9ac:	2e00      	cmp	r6, #0
 800c9ae:	d101      	bne.n	800c9b4 <demoCommand+0x38>
 800c9b0:	2d01      	cmp	r5, #1
 800c9b2:	d032      	beq.n	800ca1a <demoCommand+0x9e>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800c9b4:	2212      	movs	r2, #18
 800c9b6:	491a      	ldr	r1, [pc, #104]	; (800ca20 <demoCommand+0xa4>)
 800c9b8:	0020      	movs	r0, r4
 800c9ba:	f008 fdce 	bl	801555a <memcpy>
	memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800c9be:	0020      	movs	r0, r4
 800c9c0:	f7f3 fbaa 	bl	8000118 <strlen>
 800c9c4:	0002      	movs	r2, r0
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	0020      	movs	r0, r4
 800c9ca:	f008 fdcf 	bl	801556c <memset>
}
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	b004      	add	sp, #16
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
    result = H26R0_ERR_WrongParams;
 800c9d4:	2602      	movs	r6, #2
	uint8_t channel = 0;
 800c9d6:	2500      	movs	r5, #0
 800c9d8:	e7e4      	b.n	800c9a4 <demoCommand+0x28>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800c9da:	2237      	movs	r2, #55	; 0x37
 800c9dc:	4911      	ldr	r1, [pc, #68]	; (800ca24 <demoCommand+0xa8>)
 800c9de:	0020      	movs	r0, r4
 800c9e0:	f008 fdbb 	bl	801555a <memcpy>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c9e4:	0020      	movs	r0, r4
 800c9e6:	f7f3 fb97 	bl	8000118 <strlen>
 800c9ea:	b282      	uxth	r2, r0
 800c9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ca28 <demoCommand+0xac>)
 800c9ee:	7818      	ldrb	r0, [r3, #0]
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	425b      	negs	r3, r3
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	3333      	adds	r3, #51	; 0x33
 800c9f8:	0021      	movs	r1, r4
 800c9fa:	f003 f845 	bl	800fa88 <writePxMutex>
		StreamKGramToCLI(channel, 500, 10000);
 800c9fe:	21fa      	movs	r1, #250	; 0xfa
 800ca00:	4a0a      	ldr	r2, [pc, #40]	; (800ca2c <demoCommand+0xb0>)
 800ca02:	0049      	lsls	r1, r1, #1
 800ca04:	0028      	movs	r0, r5
 800ca06:	f7ff ff71 	bl	800c8ec <StreamKGramToCLI>
		while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){ Delay_ms(1); };
 800ca0a:	4b09      	ldr	r3, [pc, #36]	; (800ca30 <demoCommand+0xb4>)
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d0cc      	beq.n	800c9ac <demoCommand+0x30>
 800ca12:	2001      	movs	r0, #1
 800ca14:	f005 f9e8 	bl	8011de8 <HAL_Delay>
 800ca18:	e7f7      	b.n	800ca0a <demoCommand+0x8e>
	if (result != H26R0_OK || channel != 1 || channel != 2){
 800ca1a:	2d02      	cmp	r5, #2
 800ca1c:	d1ca      	bne.n	800c9b4 <demoCommand+0x38>
 800ca1e:	e7ce      	b.n	800c9be <demoCommand+0x42>
 800ca20:	0801cc48 	.word	0x0801cc48
 800ca24:	0801cc10 	.word	0x0801cc10
 800ca28:	20000aa8 	.word	0x20000aa8
 800ca2c:	00002710 	.word	0x00002710
 800ca30:	20001df0 	.word	0x20001df0

0800ca34 <StreamKGramToVERBOSE>:
{
 800ca34:	b510      	push	{r4, lr}
 800ca36:	b082      	sub	sp, #8
	global_ch=Ch;
 800ca38:	4b1a      	ldr	r3, [pc, #104]	; (800caa4 <StreamKGramToVERBOSE+0x70>)
 800ca3a:	7018      	strb	r0, [r3, #0]
	global_period=Period;
 800ca3c:	4b1a      	ldr	r3, [pc, #104]	; (800caa8 <StreamKGramToVERBOSE+0x74>)
 800ca3e:	6019      	str	r1, [r3, #0]
	global_timeout=Timeout;
 800ca40:	4b1a      	ldr	r3, [pc, #104]	; (800caac <StreamKGramToVERBOSE+0x78>)
 800ca42:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_CLI_VERBOSE_CASE;
 800ca44:	4b1a      	ldr	r3, [pc, #104]	; (800cab0 <StreamKGramToVERBOSE+0x7c>)
 800ca46:	2104      	movs	r1, #4
 800ca48:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800ca4a:	1e53      	subs	r3, r2, #1
 800ca4c:	3303      	adds	r3, #3
 800ca4e:	d909      	bls.n	800ca64 <StreamKGramToVERBOSE+0x30>
	if (global_timeout > 0)
 800ca50:	4b16      	ldr	r3, [pc, #88]	; (800caac <StreamKGramToVERBOSE+0x78>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d002      	beq.n	800ca5e <StreamKGramToVERBOSE+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800ca58:	4b16      	ldr	r3, [pc, #88]	; (800cab4 <StreamKGramToVERBOSE+0x80>)
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	701a      	strb	r2, [r3, #0]
}
 800ca5e:	2000      	movs	r0, #0
 800ca60:	b002      	add	sp, #8
 800ca62:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800ca64:	0153      	lsls	r3, r2, #5
 800ca66:	1a9b      	subs	r3, r3, r2
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	189a      	adds	r2, r3, r2
 800ca6c:	00d0      	lsls	r0, r2, #3
 800ca6e:	21fa      	movs	r1, #250	; 0xfa
 800ca70:	0089      	lsls	r1, r1, #2
 800ca72:	f7f3 fb6d 	bl	8000150 <__udivsi3>
 800ca76:	0001      	movs	r1, r0
 800ca78:	4b0f      	ldr	r3, [pc, #60]	; (800cab8 <StreamKGramToVERBOSE+0x84>)
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	23ff      	movs	r3, #255	; 0xff
 800ca7e:	2200      	movs	r2, #0
 800ca80:	480e      	ldr	r0, [pc, #56]	; (800cabc <StreamKGramToVERBOSE+0x88>)
 800ca82:	f004 fe5b 	bl	801173c <xTimerCreate>
 800ca86:	0004      	movs	r4, r0
 800ca88:	4b0d      	ldr	r3, [pc, #52]	; (800cac0 <StreamKGramToVERBOSE+0x8c>)
 800ca8a:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800ca8c:	f004 f8e8 	bl	8010c60 <xTaskGetTickCount>
 800ca90:	0002      	movs	r2, r0
 800ca92:	2301      	movs	r3, #1
 800ca94:	425b      	negs	r3, r3
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	2300      	movs	r3, #0
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	0020      	movs	r0, r4
 800ca9e:	f004 fe71 	bl	8011784 <xTimerGenericCommand>
 800caa2:	e7d5      	b.n	800ca50 <StreamKGramToVERBOSE+0x1c>
 800caa4:	200071e0 	.word	0x200071e0
 800caa8:	200073ac 	.word	0x200073ac
 800caac:	20007424 	.word	0x20007424
 800cab0:	200071e1 	.word	0x200071e1
 800cab4:	20001df0 	.word	0x20001df0
 800cab8:	0800bda1 	.word	0x0800bda1
 800cabc:	0801cbb4 	.word	0x0801cbb4
 800cac0:	20001e18 	.word	0x20001e18

0800cac4 <StreamRawToPort>:
{
 800cac4:	b510      	push	{r4, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	9a04      	ldr	r2, [sp, #16]
	global_ch=Ch;
 800caca:	491c      	ldr	r1, [pc, #112]	; (800cb3c <StreamRawToPort+0x78>)
 800cacc:	7008      	strb	r0, [r1, #0]
	global_period=Period;
 800cace:	491c      	ldr	r1, [pc, #112]	; (800cb40 <StreamRawToPort+0x7c>)
 800cad0:	600b      	str	r3, [r1, #0]
	global_timeout=Timeout;
 800cad2:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <StreamRawToPort+0x80>)
 800cad4:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800cad6:	4b1c      	ldr	r3, [pc, #112]	; (800cb48 <StreamRawToPort+0x84>)
 800cad8:	2102      	movs	r1, #2
 800cada:	7019      	strb	r1, [r3, #0]
	unit=RAW;
 800cadc:	4b1b      	ldr	r3, [pc, #108]	; (800cb4c <StreamRawToPort+0x88>)
 800cade:	3103      	adds	r1, #3
 800cae0:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800cae2:	1e53      	subs	r3, r2, #1
 800cae4:	3303      	adds	r3, #3
 800cae6:	d909      	bls.n	800cafc <StreamRawToPort+0x38>
	if (global_timeout > 0)
 800cae8:	4b16      	ldr	r3, [pc, #88]	; (800cb44 <StreamRawToPort+0x80>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <StreamRawToPort+0x32>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800caf0:	4b17      	ldr	r3, [pc, #92]	; (800cb50 <StreamRawToPort+0x8c>)
 800caf2:	2201      	movs	r2, #1
 800caf4:	701a      	strb	r2, [r3, #0]
}
 800caf6:	2000      	movs	r0, #0
 800caf8:	b002      	add	sp, #8
 800cafa:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800cafc:	0153      	lsls	r3, r2, #5
 800cafe:	1a9b      	subs	r3, r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	189a      	adds	r2, r3, r2
 800cb04:	00d0      	lsls	r0, r2, #3
 800cb06:	21fa      	movs	r1, #250	; 0xfa
 800cb08:	0089      	lsls	r1, r1, #2
 800cb0a:	f7f3 fb21 	bl	8000150 <__udivsi3>
 800cb0e:	0001      	movs	r1, r0
 800cb10:	4b10      	ldr	r3, [pc, #64]	; (800cb54 <StreamRawToPort+0x90>)
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	23ff      	movs	r3, #255	; 0xff
 800cb16:	2200      	movs	r2, #0
 800cb18:	480f      	ldr	r0, [pc, #60]	; (800cb58 <StreamRawToPort+0x94>)
 800cb1a:	f004 fe0f 	bl	801173c <xTimerCreate>
 800cb1e:	0004      	movs	r4, r0
 800cb20:	4b0e      	ldr	r3, [pc, #56]	; (800cb5c <StreamRawToPort+0x98>)
 800cb22:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800cb24:	f004 f89c 	bl	8010c60 <xTaskGetTickCount>
 800cb28:	0002      	movs	r2, r0
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	425b      	negs	r3, r3
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	2300      	movs	r3, #0
 800cb32:	2101      	movs	r1, #1
 800cb34:	0020      	movs	r0, r4
 800cb36:	f004 fe25 	bl	8011784 <xTimerGenericCommand>
 800cb3a:	e7d5      	b.n	800cae8 <StreamRawToPort+0x24>
 800cb3c:	200071e0 	.word	0x200071e0
 800cb40:	200073ac 	.word	0x200073ac
 800cb44:	20007424 	.word	0x20007424
 800cb48:	200071e1 	.word	0x200071e1
 800cb4c:	200000bc 	.word	0x200000bc
 800cb50:	20001df0 	.word	0x20001df0
 800cb54:	0800bda1 	.word	0x0800bda1
 800cb58:	0801cbb4 	.word	0x0801cbb4
 800cb5c:	20001e18 	.word	0x20001e18

0800cb60 <StreamKGramToBuffer>:
{
 800cb60:	b510      	push	{r4, lr}
 800cb62:	b082      	sub	sp, #8
	global_ch=Ch;
 800cb64:	4c19      	ldr	r4, [pc, #100]	; (800cbcc <StreamKGramToBuffer+0x6c>)
 800cb66:	7020      	strb	r0, [r4, #0]
	global_period=Period;
 800cb68:	4819      	ldr	r0, [pc, #100]	; (800cbd0 <StreamKGramToBuffer+0x70>)
 800cb6a:	6002      	str	r2, [r0, #0]
	global_timeout=Timeout;
 800cb6c:	4a19      	ldr	r2, [pc, #100]	; (800cbd4 <StreamKGramToBuffer+0x74>)
 800cb6e:	6013      	str	r3, [r2, #0]
	ptr_weight_buffer=Buffer;
 800cb70:	4a19      	ldr	r2, [pc, #100]	; (800cbd8 <StreamKGramToBuffer+0x78>)
 800cb72:	6011      	str	r1, [r2, #0]
	global_mode=STREAM_BUFFER_CASE;
 800cb74:	4a19      	ldr	r2, [pc, #100]	; (800cbdc <StreamKGramToBuffer+0x7c>)
 800cb76:	2103      	movs	r1, #3
 800cb78:	7011      	strb	r1, [r2, #0]
	unit=KGram;
 800cb7a:	4a19      	ldr	r2, [pc, #100]	; (800cbe0 <StreamKGramToBuffer+0x80>)
 800cb7c:	3901      	subs	r1, #1
 800cb7e:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800cb80:	1e5a      	subs	r2, r3, #1
 800cb82:	3203      	adds	r2, #3
 800cb84:	d902      	bls.n	800cb8c <StreamKGramToBuffer+0x2c>
}
 800cb86:	2000      	movs	r0, #0
 800cb88:	b002      	add	sp, #8
 800cb8a:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800cb8c:	015a      	lsls	r2, r3, #5
 800cb8e:	1ad2      	subs	r2, r2, r3
 800cb90:	0092      	lsls	r2, r2, #2
 800cb92:	18d3      	adds	r3, r2, r3
 800cb94:	00d8      	lsls	r0, r3, #3
 800cb96:	21fa      	movs	r1, #250	; 0xfa
 800cb98:	0089      	lsls	r1, r1, #2
 800cb9a:	f7f3 fad9 	bl	8000150 <__udivsi3>
 800cb9e:	0001      	movs	r1, r0
 800cba0:	4b10      	ldr	r3, [pc, #64]	; (800cbe4 <StreamKGramToBuffer+0x84>)
 800cba2:	9300      	str	r3, [sp, #0]
 800cba4:	23ff      	movs	r3, #255	; 0xff
 800cba6:	2200      	movs	r2, #0
 800cba8:	480f      	ldr	r0, [pc, #60]	; (800cbe8 <StreamKGramToBuffer+0x88>)
 800cbaa:	f004 fdc7 	bl	801173c <xTimerCreate>
 800cbae:	0004      	movs	r4, r0
 800cbb0:	4b0e      	ldr	r3, [pc, #56]	; (800cbec <StreamKGramToBuffer+0x8c>)
 800cbb2:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800cbb4:	f004 f854 	bl	8010c60 <xTaskGetTickCount>
 800cbb8:	0002      	movs	r2, r0
 800cbba:	2301      	movs	r3, #1
 800cbbc:	425b      	negs	r3, r3
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	2101      	movs	r1, #1
 800cbc4:	0020      	movs	r0, r4
 800cbc6:	f004 fddd 	bl	8011784 <xTimerGenericCommand>
 800cbca:	e7dc      	b.n	800cb86 <StreamKGramToBuffer+0x26>
 800cbcc:	200071e0 	.word	0x200071e0
 800cbd0:	200073ac 	.word	0x200073ac
 800cbd4:	20007424 	.word	0x20007424
 800cbd8:	200072c8 	.word	0x200072c8
 800cbdc:	200071e1 	.word	0x200071e1
 800cbe0:	200000bc 	.word	0x200000bc
 800cbe4:	0800bda1 	.word	0x0800bda1
 800cbe8:	0801cbb4 	.word	0x0801cbb4
 800cbec:	20001e18 	.word	0x20001e18

0800cbf0 <streamCommand>:
{
 800cbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf2:	46de      	mov	lr, fp
 800cbf4:	4647      	mov	r7, r8
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b08d      	sub	sp, #52	; 0x34
 800cbfa:	9003      	str	r0, [sp, #12]
 800cbfc:	0015      	movs	r5, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	930b      	str	r3, [sp, #44]	; 0x2c
  portBASE_TYPE xParameterStringLength2 = 0;
 800cc02:	930a      	str	r3, [sp, #40]	; 0x28
  portBASE_TYPE xParameterStringLength3 = 0;
 800cc04:	9309      	str	r3, [sp, #36]	; 0x24
  portBASE_TYPE xParameterStringLength4 = 0;
 800cc06:	9308      	str	r3, [sp, #32]
	portBASE_TYPE xParameterStringLength5 = 0;
 800cc08:	9307      	str	r3, [sp, #28]
  configASSERT( pcWriteBuffer );
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	d101      	bne.n	800cc12 <streamCommand+0x22>
 800cc0e:	b672      	cpsid	i
 800cc10:	e7fe      	b.n	800cc10 <streamCommand+0x20>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800cc12:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc14:	2101      	movs	r1, #1
 800cc16:	0028      	movs	r0, r5
 800cc18:	f003 f990 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800cc1c:	0007      	movs	r7, r0
  pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800cc1e:	aa0a      	add	r2, sp, #40	; 0x28
 800cc20:	2102      	movs	r1, #2
 800cc22:	0028      	movs	r0, r5
 800cc24:	f003 f98a 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800cc28:	9004      	str	r0, [sp, #16]
  pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800cc2a:	aa09      	add	r2, sp, #36	; 0x24
 800cc2c:	2103      	movs	r1, #3
 800cc2e:	0028      	movs	r0, r5
 800cc30:	f003 f984 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800cc34:	0006      	movs	r6, r0
  pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800cc36:	aa08      	add	r2, sp, #32
 800cc38:	2104      	movs	r1, #4
 800cc3a:	0028      	movs	r0, r5
 800cc3c:	f003 f97e 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800cc40:	0004      	movs	r4, r0
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 800cc42:	aa07      	add	r2, sp, #28
 800cc44:	2105      	movs	r1, #5
 800cc46:	0028      	movs	r0, r5
 800cc48:	f003 f978 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800cc4c:	4683      	mov	fp, r0
  if (NULL != pcParameterString1)
 800cc4e:	2f00      	cmp	r7, #0
 800cc50:	d043      	beq.n	800ccda <streamCommand+0xea>
    channel = atoi( (char *)pcParameterString1);
 800cc52:	0038      	movs	r0, r7
 800cc54:	f008 f9f1 	bl	801503a <atoi>
 800cc58:	b2c5      	uxtb	r5, r0
  Module_Status result = H26R0_OK;
 800cc5a:	2700      	movs	r7, #0
	if (NULL != pcParameterString2)
 800cc5c:	9804      	ldr	r0, [sp, #16]
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	d03e      	beq.n	800cce0 <streamCommand+0xf0>
    period = atoi( (char *)pcParameterString2);
 800cc62:	f008 f9ea 	bl	801503a <atoi>
 800cc66:	9004      	str	r0, [sp, #16]
  if (NULL != pcParameterString3)
 800cc68:	2e00      	cmp	r6, #0
 800cc6a:	d042      	beq.n	800ccf2 <streamCommand+0x102>
    if (!strncmp((const char *)pcParameterString3, "inf", 3))
 800cc6c:	2203      	movs	r2, #3
 800cc6e:	4959      	ldr	r1, [pc, #356]	; (800cdd4 <streamCommand+0x1e4>)
 800cc70:	0030      	movs	r0, r6
 800cc72:	f008 feb9 	bl	80159e8 <strncmp>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d136      	bne.n	800cce8 <streamCommand+0xf8>
      timeout = portMAX_DELAY;
 800cc7a:	2601      	movs	r6, #1
 800cc7c:	4276      	negs	r6, r6
	if (NULL != pcParameterString4 && !strncmp((const char *)pcParameterString4, "buffer", 6)) 
 800cc7e:	2c00      	cmp	r4, #0
 800cc80:	d006      	beq.n	800cc90 <streamCommand+0xa0>
 800cc82:	2206      	movs	r2, #6
 800cc84:	4954      	ldr	r1, [pc, #336]	; (800cdd8 <streamCommand+0x1e8>)
 800cc86:	0020      	movs	r0, r4
 800cc88:	f008 feae 	bl	80159e8 <strncmp>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d033      	beq.n	800ccf8 <streamCommand+0x108>
	else if (NULL != pcParameterString4 && NULL != pcParameterString5 && pcParameterString4[0] == 'p') 
 800cc90:	2c00      	cmp	r4, #0
 800cc92:	d04e      	beq.n	800cd32 <streamCommand+0x142>
 800cc94:	465b      	mov	r3, fp
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d04b      	beq.n	800cd32 <streamCommand+0x142>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	56e3      	ldrsb	r3, [r4, r3]
 800cc9e:	2b70      	cmp	r3, #112	; 0x70
 800cca0:	d147      	bne.n	800cd32 <streamCommand+0x142>
		port = ( uint8_t ) atol( ( char * ) pcParameterString4+1 );
 800cca2:	1c60      	adds	r0, r4, #1
 800cca4:	f008 f9cf 	bl	8015046 <atol>
 800cca8:	9005      	str	r0, [sp, #20]
 800ccaa:	466b      	mov	r3, sp
 800ccac:	7d1b      	ldrb	r3, [r3, #20]
 800ccae:	4698      	mov	r8, r3
		module = (uint8_t) GetID((char *)pcParameterString5);
 800ccb0:	4658      	mov	r0, fp
 800ccb2:	f7f7 fd05 	bl	80046c0 <GetID>
 800ccb6:	b2c4      	uxtb	r4, r0
		if (module != (uint8_t) BOS_ERR_WrongName) {
 800ccb8:	2c64      	cmp	r4, #100	; 0x64
 800ccba:	d032      	beq.n	800cd22 <streamCommand+0x132>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageModule, port, module);
 800ccbc:	466b      	mov	r3, sp
 800ccbe:	7d1a      	ldrb	r2, [r3, #20]
 800ccc0:	0023      	movs	r3, r4
 800ccc2:	4946      	ldr	r1, [pc, #280]	; (800cddc <streamCommand+0x1ec>)
 800ccc4:	9803      	ldr	r0, [sp, #12]
 800ccc6:	f008 fe4b 	bl	8015960 <sprintf>
			StreamKGramToPort(channel, port, module, period, timeout);
 800ccca:	9600      	str	r6, [sp, #0]
 800cccc:	9b04      	ldr	r3, [sp, #16]
 800ccce:	0022      	movs	r2, r4
 800ccd0:	4641      	mov	r1, r8
 800ccd2:	0028      	movs	r0, r5
 800ccd4:	f7ff fd22 	bl	800c71c <StreamKGramToPort>
			return pdFALSE;
 800ccd8:	e033      	b.n	800cd42 <streamCommand+0x152>
    result = H26R0_ERR_WrongParams;
 800ccda:	2702      	movs	r7, #2
	uint8_t channel = 1;
 800ccdc:	2501      	movs	r5, #1
 800ccde:	e7bd      	b.n	800cc5c <streamCommand+0x6c>
    result = H26R0_ERR_WrongParams;
 800cce0:	2702      	movs	r7, #2
  uint32_t period = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	9304      	str	r3, [sp, #16]
 800cce6:	e7bf      	b.n	800cc68 <streamCommand+0x78>
      timeout = atoi( (char *)pcParameterString3);
 800cce8:	0030      	movs	r0, r6
 800ccea:	f008 f9a6 	bl	801503a <atoi>
 800ccee:	0006      	movs	r6, r0
 800ccf0:	e7c5      	b.n	800cc7e <streamCommand+0x8e>
    result = H26R0_ERR_WrongParams;
 800ccf2:	2702      	movs	r7, #2
  uint32_t timeout = 0;
 800ccf4:	2600      	movs	r6, #0
 800ccf6:	e7c2      	b.n	800cc7e <streamCommand+0x8e>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageBuffer);
 800ccf8:	226b      	movs	r2, #107	; 0x6b
 800ccfa:	4939      	ldr	r1, [pc, #228]	; (800cde0 <streamCommand+0x1f0>)
 800ccfc:	9803      	ldr	r0, [sp, #12]
 800ccfe:	f008 fc2c 	bl	801555a <memcpy>
		if (channel==1){
 800cd02:	2d01      	cmp	r5, #1
 800cd04:	d106      	bne.n	800cd14 <streamCommand+0x124>
		StreamKGramToBuffer(channel, &weight1_buffer, period, timeout);
 800cd06:	0033      	movs	r3, r6
 800cd08:	9a04      	ldr	r2, [sp, #16]
 800cd0a:	4936      	ldr	r1, [pc, #216]	; (800cde4 <streamCommand+0x1f4>)
 800cd0c:	0028      	movs	r0, r5
 800cd0e:	f7ff ff27 	bl	800cb60 <StreamKGramToBuffer>
 800cd12:	e016      	b.n	800cd42 <streamCommand+0x152>
		StreamKGramToBuffer(channel, &weight2_buffer, period, timeout);
 800cd14:	0033      	movs	r3, r6
 800cd16:	9a04      	ldr	r2, [sp, #16]
 800cd18:	4933      	ldr	r1, [pc, #204]	; (800cde8 <streamCommand+0x1f8>)
 800cd1a:	0028      	movs	r0, r5
 800cd1c:	f7ff ff20 	bl	800cb60 <StreamKGramToBuffer>
 800cd20:	e00f      	b.n	800cd42 <streamCommand+0x152>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongName);
 800cd22:	2214      	movs	r2, #20
 800cd24:	4931      	ldr	r1, [pc, #196]	; (800cdec <streamCommand+0x1fc>)
 800cd26:	9803      	ldr	r0, [sp, #12]
 800cd28:	f008 fc17 	bl	801555a <memcpy>
  if (H26R0_ERR_WrongParams == result)
 800cd2c:	2f02      	cmp	r7, #2
 800cd2e:	d108      	bne.n	800cd42 <streamCommand+0x152>
 800cd30:	e002      	b.n	800cd38 <streamCommand+0x148>
	else if (NULL == pcParameterString5) 
 800cd32:	465b      	mov	r3, fp
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00a      	beq.n	800cd4e <streamCommand+0x15e>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800cd38:	2212      	movs	r2, #18
 800cd3a:	492d      	ldr	r1, [pc, #180]	; (800cdf0 <streamCommand+0x200>)
 800cd3c:	9803      	ldr	r0, [sp, #12]
 800cd3e:	f008 fc0c 	bl	801555a <memcpy>
}
 800cd42:	2000      	movs	r0, #0
 800cd44:	b00d      	add	sp, #52	; 0x34
 800cd46:	bc0c      	pop	{r2, r3}
 800cd48:	4690      	mov	r8, r2
 800cd4a:	469b      	mov	fp, r3
 800cd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NULL != pcParameterString4 && !strncmp((const char *)pcParameterString4, "-v", 2)) {
 800cd4e:	2c00      	cmp	r4, #0
 800cd50:	d00c      	beq.n	800cd6c <streamCommand+0x17c>
 800cd52:	2202      	movs	r2, #2
 800cd54:	4927      	ldr	r1, [pc, #156]	; (800cdf4 <streamCommand+0x204>)
 800cd56:	0020      	movs	r0, r4
 800cd58:	f008 fe46 	bl	80159e8 <strncmp>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d105      	bne.n	800cd6c <streamCommand+0x17c>
			StreamKGramToVERBOSE(channel, period, timeout);
 800cd60:	0032      	movs	r2, r6
 800cd62:	9904      	ldr	r1, [sp, #16]
 800cd64:	0028      	movs	r0, r5
 800cd66:	f7ff fe65 	bl	800ca34 <StreamKGramToVERBOSE>
 800cd6a:	e7df      	b.n	800cd2c <streamCommand+0x13c>
			if (channel == 1 || channel == 2)
 800cd6c:	1e6b      	subs	r3, r5, #1
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d828      	bhi.n	800cdc6 <streamCommand+0x1d6>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI);
 800cd74:	2225      	movs	r2, #37	; 0x25
 800cd76:	4920      	ldr	r1, [pc, #128]	; (800cdf8 <streamCommand+0x208>)
 800cd78:	9c03      	ldr	r4, [sp, #12]
 800cd7a:	0020      	movs	r0, r4
 800cd7c:	f008 fbed 	bl	801555a <memcpy>
			writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800cd80:	0020      	movs	r0, r4
 800cd82:	f7f3 f9c9 	bl	8000118 <strlen>
 800cd86:	b282      	uxth	r2, r0
 800cd88:	4b1c      	ldr	r3, [pc, #112]	; (800cdfc <streamCommand+0x20c>)
 800cd8a:	7818      	ldrb	r0, [r3, #0]
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	425b      	negs	r3, r3
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	3333      	adds	r3, #51	; 0x33
 800cd94:	0021      	movs	r1, r4
 800cd96:	f002 fe77 	bl	800fa88 <writePxMutex>
			StreamKGramToCLI(channel, period, timeout);
 800cd9a:	0032      	movs	r2, r6
 800cd9c:	9904      	ldr	r1, [sp, #16]
 800cd9e:	0028      	movs	r0, r5
 800cda0:	f7ff fda4 	bl	800c8ec <StreamKGramToCLI>
			while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){taskYIELD();}
 800cda4:	4b16      	ldr	r3, [pc, #88]	; (800ce00 <streamCommand+0x210>)
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d109      	bne.n	800cdc0 <streamCommand+0x1d0>
			memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800cdac:	9c03      	ldr	r4, [sp, #12]
 800cdae:	0020      	movs	r0, r4
 800cdb0:	f7f3 f9b2 	bl	8000118 <strlen>
 800cdb4:	0002      	movs	r2, r0
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	0020      	movs	r0, r4
 800cdba:	f008 fbd7 	bl	801556c <memset>
 800cdbe:	e7b5      	b.n	800cd2c <streamCommand+0x13c>
			while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){taskYIELD();}
 800cdc0:	f004 fe80 	bl	8011ac4 <vPortYield>
 800cdc4:	e7ee      	b.n	800cda4 <streamCommand+0x1b4>
				 strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800cdc6:	2212      	movs	r2, #18
 800cdc8:	4909      	ldr	r1, [pc, #36]	; (800cdf0 <streamCommand+0x200>)
 800cdca:	9803      	ldr	r0, [sp, #12]
 800cdcc:	f008 fbc5 	bl	801555a <memcpy>
 800cdd0:	e7ac      	b.n	800cd2c <streamCommand+0x13c>
 800cdd2:	46c0      	nop			; (mov r8, r8)
 800cdd4:	0801d0a4 	.word	0x0801d0a4
 800cdd8:	0801d0a8 	.word	0x0801d0a8
 800cddc:	0801d11c 	.word	0x0801d11c
 800cde0:	0801d0b0 	.word	0x0801d0b0
 800cde4:	20007254 	.word	0x20007254
 800cde8:	2000716c 	.word	0x2000716c
 800cdec:	0801d150 	.word	0x0801d150
 800cdf0:	0801cc48 	.word	0x0801cc48
 800cdf4:	0801d164 	.word	0x0801d164
 800cdf8:	0801d168 	.word	0x0801d168
 800cdfc:	20000aa8 	.word	0x20000aa8
 800ce00:	20001df0 	.word	0x20001df0

0800ce04 <PowerDown>:
{
 800ce04:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_SET);
 800ce06:	2180      	movs	r1, #128	; 0x80
 800ce08:	2090      	movs	r0, #144	; 0x90
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	0089      	lsls	r1, r1, #2
 800ce0e:	05c0      	lsls	r0, r0, #23
 800ce10:	f006 fbf1 	bl	80135f6 <HAL_GPIO_WritePin>
}
 800ce14:	2000      	movs	r0, #0
 800ce16:	bd10      	pop	{r4, pc}

0800ce18 <Stop>:
{
 800ce18:	b510      	push	{r4, lr}
 800ce1a:	b082      	sub	sp, #8
	global_mode=IDLE_CASE;
 800ce1c:	2400      	movs	r4, #0
 800ce1e:	4b0a      	ldr	r3, [pc, #40]	; (800ce48 <Stop+0x30>)
 800ce20:	701c      	strb	r4, [r3, #0]
  PowerDown();
 800ce22:	f7ff ffef 	bl	800ce04 <PowerDown>
	xTimerStop( xTimer, 0 );
 800ce26:	4b09      	ldr	r3, [pc, #36]	; (800ce4c <Stop+0x34>)
 800ce28:	6818      	ldr	r0, [r3, #0]
 800ce2a:	9400      	str	r4, [sp, #0]
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	2200      	movs	r2, #0
 800ce30:	2103      	movs	r1, #3
 800ce32:	f004 fca7 	bl	8011784 <xTimerGenericCommand>
	weight1_buffer=0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	4a05      	ldr	r2, [pc, #20]	; (800ce50 <Stop+0x38>)
 800ce3a:	6013      	str	r3, [r2, #0]
	weight2_buffer=0;
 800ce3c:	4a05      	ldr	r2, [pc, #20]	; (800ce54 <Stop+0x3c>)
 800ce3e:	6013      	str	r3, [r2, #0]
}
 800ce40:	2000      	movs	r0, #0
 800ce42:	b002      	add	sp, #8
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	46c0      	nop			; (mov r8, r8)
 800ce48:	200071e1 	.word	0x200071e1
 800ce4c:	20001e18 	.word	0x20001e18
 800ce50:	20007254 	.word	0x20007254
 800ce54:	2000716c 	.word	0x2000716c

0800ce58 <stopCommand>:
{
 800ce58:	b510      	push	{r4, lr}
  configASSERT( pcWriteBuffer );
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d101      	bne.n	800ce62 <stopCommand+0xa>
 800ce5e:	b672      	cpsid	i
 800ce60:	e7fe      	b.n	800ce60 <stopCommand+0x8>
	Stop();
 800ce62:	f7ff ffd9 	bl	800ce18 <Stop>
}
 800ce66:	2000      	movs	r0, #0
 800ce68:	bd10      	pop	{r4, pc}

0800ce6a <PowerOn>:
{
 800ce6a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800ce6c:	2180      	movs	r1, #128	; 0x80
 800ce6e:	2090      	movs	r0, #144	; 0x90
 800ce70:	2200      	movs	r2, #0
 800ce72:	0089      	lsls	r1, r1, #2
 800ce74:	05c0      	lsls	r0, r0, #23
 800ce76:	f006 fbbe 	bl	80135f6 <HAL_GPIO_WritePin>
}
 800ce7a:	2000      	movs	r0, #0
 800ce7c:	bd10      	pop	{r4, pc}
	...

0800ce80 <SampleGram>:
{
 800ce80:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800ce82:	f7ff fb43 	bl	800c50c <SetHX711Gain>
	PowerOn();
 800ce86:	f7ff fff0 	bl	800ce6a <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800ce8a:	2400      	movs	r4, #0
 800ce8c:	e003      	b.n	800ce96 <SampleGram+0x16>
 800ce8e:	f7ff f9cd 	bl	800c22c <readHX711>
 800ce92:	3401      	adds	r4, #1
 800ce94:	b2e4      	uxtb	r4, r4
 800ce96:	2c01      	cmp	r4, #1
 800ce98:	d9f9      	bls.n	800ce8e <SampleGram+0xe>
	weightGram=weightCalculation()*Kg2Gram_ratio;
 800ce9a:	f7ff fa33 	bl	800c304 <weightCalculation>
 800ce9e:	4903      	ldr	r1, [pc, #12]	; (800ceac <SampleGram+0x2c>)
 800cea0:	f7f4 f802 	bl	8000ea8 <__aeabi_fmul>
 800cea4:	4b02      	ldr	r3, [pc, #8]	; (800ceb0 <SampleGram+0x30>)
 800cea6:	6018      	str	r0, [r3, #0]
}
 800cea8:	bd10      	pop	{r4, pc}
 800ceaa:	46c0      	nop			; (mov r8, r8)
 800ceac:	447a0000 	.word	0x447a0000
 800ceb0:	20001e04 	.word	0x20001e04

0800ceb4 <SampleKGram>:
{
 800ceb4:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800ceb6:	f7ff fb29 	bl	800c50c <SetHX711Gain>
	PowerOn();
 800ceba:	f7ff ffd6 	bl	800ce6a <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800cebe:	2400      	movs	r4, #0
 800cec0:	e003      	b.n	800ceca <SampleKGram+0x16>
 800cec2:	f7ff f9b3 	bl	800c22c <readHX711>
 800cec6:	3401      	adds	r4, #1
 800cec8:	b2e4      	uxtb	r4, r4
 800ceca:	2c01      	cmp	r4, #1
 800cecc:	d9f9      	bls.n	800cec2 <SampleKGram+0xe>
	weightKGram=weightCalculation();
 800cece:	f7ff fa19 	bl	800c304 <weightCalculation>
 800ced2:	4b01      	ldr	r3, [pc, #4]	; (800ced8 <SampleKGram+0x24>)
 800ced4:	6018      	str	r0, [r3, #0]
}
 800ced6:	bd10      	pop	{r4, pc}
 800ced8:	20001e08 	.word	0x20001e08

0800cedc <SampleOunce>:
{
 800cedc:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800cede:	f7ff fb15 	bl	800c50c <SetHX711Gain>
	PowerOn();
 800cee2:	f7ff ffc2 	bl	800ce6a <PowerOn>
	for(i=0; i<2; i++)		readHX711();
 800cee6:	2400      	movs	r4, #0
 800cee8:	e003      	b.n	800cef2 <SampleOunce+0x16>
 800ceea:	f7ff f99f 	bl	800c22c <readHX711>
 800ceee:	3401      	adds	r4, #1
 800cef0:	b2e4      	uxtb	r4, r4
 800cef2:	2c01      	cmp	r4, #1
 800cef4:	d9f9      	bls.n	800ceea <SampleOunce+0xe>
	weightOunce=weightCalculation()*Kg2Ounce_ratio;
 800cef6:	f7ff fa05 	bl	800c304 <weightCalculation>
 800cefa:	f7f6 f913 	bl	8003124 <__aeabi_f2d>
 800cefe:	4a04      	ldr	r2, [pc, #16]	; (800cf10 <SampleOunce+0x34>)
 800cf00:	4b04      	ldr	r3, [pc, #16]	; (800cf14 <SampleOunce+0x38>)
 800cf02:	f7f5 fa97 	bl	8002434 <__aeabi_dmul>
 800cf06:	f7f6 f95f 	bl	80031c8 <__aeabi_d2f>
 800cf0a:	4b03      	ldr	r3, [pc, #12]	; (800cf18 <SampleOunce+0x3c>)
 800cf0c:	6018      	str	r0, [r3, #0]
}
 800cf0e:	bd10      	pop	{r4, pc}
 800cf10:	6e978d50 	.word	0x6e978d50
 800cf14:	4041a312 	.word	0x4041a312
 800cf18:	20001e0c 	.word	0x20001e0c

0800cf1c <SamplePound>:
{
 800cf1c:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800cf1e:	f7ff faf5 	bl	800c50c <SetHX711Gain>
	PowerOn();
 800cf22:	f7ff ffa2 	bl	800ce6a <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800cf26:	2400      	movs	r4, #0
 800cf28:	e003      	b.n	800cf32 <SamplePound+0x16>
 800cf2a:	f7ff f97f 	bl	800c22c <readHX711>
 800cf2e:	3401      	adds	r4, #1
 800cf30:	b2e4      	uxtb	r4, r4
 800cf32:	2c01      	cmp	r4, #1
 800cf34:	d9f9      	bls.n	800cf2a <SamplePound+0xe>
	weightPound=weightCalculation()*Kg2Pound_ratio;  
 800cf36:	f7ff f9e5 	bl	800c304 <weightCalculation>
 800cf3a:	f7f6 f8f3 	bl	8003124 <__aeabi_f2d>
 800cf3e:	4a04      	ldr	r2, [pc, #16]	; (800cf50 <SamplePound+0x34>)
 800cf40:	4b04      	ldr	r3, [pc, #16]	; (800cf54 <SamplePound+0x38>)
 800cf42:	f7f5 fa77 	bl	8002434 <__aeabi_dmul>
 800cf46:	f7f6 f93f 	bl	80031c8 <__aeabi_d2f>
 800cf4a:	4b03      	ldr	r3, [pc, #12]	; (800cf58 <SamplePound+0x3c>)
 800cf4c:	6018      	str	r0, [r3, #0]
}
 800cf4e:	bd10      	pop	{r4, pc}
 800cf50:	2f275feb 	.word	0x2f275feb
 800cf54:	4001a311 	.word	0x4001a311
 800cf58:	20001e10 	.word	0x20001e10

0800cf5c <Average>:
{
 800cf5c:	b570      	push	{r4, r5, r6, lr}
 800cf5e:	0004      	movs	r4, r0
 800cf60:	000d      	movs	r5, r1
	PowerOn();
 800cf62:	f7ff ff82 	bl	800ce6a <PowerOn>
	SetHX711Gain(ch);
 800cf66:	0020      	movs	r0, r4
 800cf68:	f7ff fad0 	bl	800c50c <SetHX711Gain>
	for(i=0; i<=N; i++)
 800cf6c:	2400      	movs	r4, #0
 800cf6e:	e001      	b.n	800cf74 <Average+0x18>
 800cf70:	3401      	adds	r4, #1
 800cf72:	b2e4      	uxtb	r4, r4
 800cf74:	42ac      	cmp	r4, r5
 800cf76:	d809      	bhi.n	800cf8c <Average+0x30>
		readHX711();	
 800cf78:	f7ff f958 	bl	800c22c <readHX711>
		if (i>=1)
 800cf7c:	2c00      	cmp	r4, #0
 800cf7e:	d0f7      	beq.n	800cf70 <Average+0x14>
			Sample[i]=valuef;
 800cf80:	00a3      	lsls	r3, r4, #2
 800cf82:	4a0d      	ldr	r2, [pc, #52]	; (800cfb8 <Average+0x5c>)
 800cf84:	6811      	ldr	r1, [r2, #0]
 800cf86:	4a0d      	ldr	r2, [pc, #52]	; (800cfbc <Average+0x60>)
 800cf88:	5099      	str	r1, [r3, r2]
 800cf8a:	e7f1      	b.n	800cf70 <Average+0x14>
	float average=0.0;
 800cf8c:	2600      	movs	r6, #0
	for (ii=0; ii<N; ii++)
 800cf8e:	2400      	movs	r4, #0
 800cf90:	e008      	b.n	800cfa4 <Average+0x48>
		average+=Sample[ii+1];
 800cf92:	3401      	adds	r4, #1
 800cf94:	00a2      	lsls	r2, r4, #2
 800cf96:	4b09      	ldr	r3, [pc, #36]	; (800cfbc <Average+0x60>)
 800cf98:	58d1      	ldr	r1, [r2, r3]
 800cf9a:	1c30      	adds	r0, r6, #0
 800cf9c:	f7f3 fc12 	bl	80007c4 <__aeabi_fadd>
 800cfa0:	1c06      	adds	r6, r0, #0
	for (ii=0; ii<N; ii++)
 800cfa2:	b2e4      	uxtb	r4, r4
 800cfa4:	42ac      	cmp	r4, r5
 800cfa6:	d3f4      	bcc.n	800cf92 <Average+0x36>
	average/=N;
 800cfa8:	0028      	movs	r0, r5
 800cfaa:	f7f4 fa93 	bl	80014d4 <__aeabi_i2f>
 800cfae:	1c01      	adds	r1, r0, #0
 800cfb0:	1c30      	adds	r0, r6, #0
 800cfb2:	f7f3 fda1 	bl	8000af8 <__aeabi_fdiv>
}
 800cfb6:	bd70      	pop	{r4, r5, r6, pc}
 800cfb8:	20001e00 	.word	0x20001e00
 800cfbc:	200019dc 	.word	0x200019dc

0800cfc0 <SendResults>:
{
 800cfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfc2:	b087      	sub	sp, #28
 800cfc4:	1c05      	adds	r5, r0, #0
 800cfc6:	000c      	movs	r4, r1
 800cfc8:	001f      	movs	r7, r3
 800cfca:	ab0c      	add	r3, sp, #48	; 0x30
 800cfcc:	781e      	ldrb	r6, [r3, #0]
	float Raw_Msg=0.0f;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	9305      	str	r3, [sp, #20]
	uint32_t RawMsgInt=0;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9304      	str	r3, [sp, #16]
	switch (unit)
 800cfd6:	4bad      	ldr	r3, [pc, #692]	; (800d28c <SendResults+0x2cc>)
 800cfd8:	781a      	ldrb	r2, [r3, #0]
 800cfda:	2a05      	cmp	r2, #5
 800cfdc:	d823      	bhi.n	800d026 <SendResults+0x66>
 800cfde:	0093      	lsls	r3, r2, #2
 800cfe0:	4aab      	ldr	r2, [pc, #684]	; (800d290 <SendResults+0x2d0>)
 800cfe2:	58d3      	ldr	r3, [r2, r3]
 800cfe4:	469f      	mov	pc, r3
			Raw_Msg=message*Kg2Gram_ratio; break;
 800cfe6:	49ab      	ldr	r1, [pc, #684]	; (800d294 <SendResults+0x2d4>)
 800cfe8:	f7f3 ff5e 	bl	8000ea8 <__aeabi_fmul>
 800cfec:	9005      	str	r0, [sp, #20]
 800cfee:	e01b      	b.n	800d028 <SendResults+0x68>
			Raw_Msg=message; break;
 800cff0:	9005      	str	r0, [sp, #20]
 800cff2:	e019      	b.n	800d028 <SendResults+0x68>
			Raw_Msg=message*Kg2Ounce_ratio; break;
 800cff4:	f7f6 f896 	bl	8003124 <__aeabi_f2d>
 800cff8:	4aa7      	ldr	r2, [pc, #668]	; (800d298 <SendResults+0x2d8>)
 800cffa:	4ba8      	ldr	r3, [pc, #672]	; (800d29c <SendResults+0x2dc>)
 800cffc:	f7f5 fa1a 	bl	8002434 <__aeabi_dmul>
 800d000:	f7f6 f8e2 	bl	80031c8 <__aeabi_d2f>
 800d004:	9005      	str	r0, [sp, #20]
 800d006:	e00f      	b.n	800d028 <SendResults+0x68>
			Raw_Msg=message*Kg2Pound_ratio; break;
 800d008:	f7f6 f88c 	bl	8003124 <__aeabi_f2d>
 800d00c:	4aa4      	ldr	r2, [pc, #656]	; (800d2a0 <SendResults+0x2e0>)
 800d00e:	4ba5      	ldr	r3, [pc, #660]	; (800d2a4 <SendResults+0x2e4>)
 800d010:	f7f5 fa10 	bl	8002434 <__aeabi_dmul>
 800d014:	f7f6 f8d8 	bl	80031c8 <__aeabi_d2f>
 800d018:	9005      	str	r0, [sp, #20]
 800d01a:	e005      	b.n	800d028 <SendResults+0x68>
			Raw_Msg=Average(global_ch, 1);
 800d01c:	4ba2      	ldr	r3, [pc, #648]	; (800d2a8 <SendResults+0x2e8>)
 800d01e:	7818      	ldrb	r0, [r3, #0]
 800d020:	2101      	movs	r1, #1
 800d022:	f7ff ff9b 	bl	800cf5c <Average>
			Raw_Msg=message; break;
 800d026:	9505      	str	r5, [sp, #20]
  pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800d028:	f002 ff84 	bl	800ff34 <FreeRTOS_CLIGetOutputBuffer>
 800d02c:	0005      	movs	r5, r0
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE)
 800d02e:	2c04      	cmp	r4, #4
 800d030:	d001      	beq.n	800d036 <SendResults+0x76>
 800d032:	2c02      	cmp	r4, #2
 800d034:	d106      	bne.n	800d044 <SendResults+0x84>
  switch(Mode)
 800d036:	2c09      	cmp	r4, #9
 800d038:	d900      	bls.n	800d03c <SendResults+0x7c>
 800d03a:	e11c      	b.n	800d276 <SendResults+0x2b6>
 800d03c:	00a3      	lsls	r3, r4, #2
 800d03e:	4a9b      	ldr	r2, [pc, #620]	; (800d2ac <SendResults+0x2ec>)
 800d040:	58d3      	ldr	r3, [r2, r3]
 800d042:	469f      	mov	pc, r3
		strUnit = malloc(6*sizeof(char));
 800d044:	2006      	movs	r0, #6
 800d046:	f008 f83b 	bl	80150c0 <malloc>
 800d04a:	9003      	str	r0, [sp, #12]
		memset(strUnit, 0, (6*sizeof(char)));
 800d04c:	2206      	movs	r2, #6
 800d04e:	2100      	movs	r1, #0
 800d050:	f008 fa8c 	bl	801556c <memset>
		if (unit == Gram)
 800d054:	4b8d      	ldr	r3, [pc, #564]	; (800d28c <SendResults+0x2cc>)
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d00d      	beq.n	800d078 <SendResults+0xb8>
		else if (unit == KGram)
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d011      	beq.n	800d084 <SendResults+0xc4>
		else if (unit == Ounce)
 800d060:	2b03      	cmp	r3, #3
 800d062:	d015      	beq.n	800d090 <SendResults+0xd0>
		else if (unit == Pound)
 800d064:	2b04      	cmp	r3, #4
 800d066:	d019      	beq.n	800d09c <SendResults+0xdc>
		else if (unit == RAW)
 800d068:	2b05      	cmp	r3, #5
 800d06a:	d01d      	beq.n	800d0a8 <SendResults+0xe8>
			sprintf( ( char * ) strUnit, "Kg");
 800d06c:	2203      	movs	r2, #3
 800d06e:	4990      	ldr	r1, [pc, #576]	; (800d2b0 <SendResults+0x2f0>)
 800d070:	9803      	ldr	r0, [sp, #12]
 800d072:	f008 fa72 	bl	801555a <memcpy>
 800d076:	e7de      	b.n	800d036 <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Gram");
 800d078:	2205      	movs	r2, #5
 800d07a:	498e      	ldr	r1, [pc, #568]	; (800d2b4 <SendResults+0x2f4>)
 800d07c:	9803      	ldr	r0, [sp, #12]
 800d07e:	f008 fa6c 	bl	801555a <memcpy>
 800d082:	e7d8      	b.n	800d036 <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Kg");
 800d084:	2203      	movs	r2, #3
 800d086:	498a      	ldr	r1, [pc, #552]	; (800d2b0 <SendResults+0x2f0>)
 800d088:	9803      	ldr	r0, [sp, #12]
 800d08a:	f008 fa66 	bl	801555a <memcpy>
 800d08e:	e7d2      	b.n	800d036 <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Ounce");
 800d090:	2206      	movs	r2, #6
 800d092:	4989      	ldr	r1, [pc, #548]	; (800d2b8 <SendResults+0x2f8>)
 800d094:	9803      	ldr	r0, [sp, #12]
 800d096:	f008 fa60 	bl	801555a <memcpy>
 800d09a:	e7cc      	b.n	800d036 <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Pound");
 800d09c:	2206      	movs	r2, #6
 800d09e:	4987      	ldr	r1, [pc, #540]	; (800d2bc <SendResults+0x2fc>)
 800d0a0:	9803      	ldr	r0, [sp, #12]
 800d0a2:	f008 fa5a 	bl	801555a <memcpy>
 800d0a6:	e7c6      	b.n	800d036 <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Raw Data");
 800d0a8:	2209      	movs	r2, #9
 800d0aa:	4985      	ldr	r1, [pc, #532]	; (800d2c0 <SendResults+0x300>)
 800d0ac:	9803      	ldr	r0, [sp, #12]
 800d0ae:	f008 fa54 	bl	801555a <memcpy>
 800d0b2:	e7c0      	b.n	800d036 <SendResults+0x76>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800d0b4:	4b83      	ldr	r3, [pc, #524]	; (800d2c4 <SendResults+0x304>)
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	2b05      	cmp	r3, #5
 800d0ba:	d01d      	beq.n	800d0f8 <SendResults+0x138>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800d0bc:	2b07      	cmp	r3, #7
 800d0be:	d000      	beq.n	800d0c2 <SendResults+0x102>
 800d0c0:	e0d9      	b.n	800d276 <SendResults+0x2b6>
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightMsg, strUnit, Raw_Msg);
 800d0c2:	9805      	ldr	r0, [sp, #20]
 800d0c4:	f7f6 f82e 	bl	8003124 <__aeabi_f2d>
 800d0c8:	9000      	str	r0, [sp, #0]
 800d0ca:	9101      	str	r1, [sp, #4]
 800d0cc:	9a03      	ldr	r2, [sp, #12]
 800d0ce:	497e      	ldr	r1, [pc, #504]	; (800d2c8 <SendResults+0x308>)
 800d0d0:	0028      	movs	r0, r5
 800d0d2:	f008 fc45 	bl	8015960 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800d0d6:	0028      	movs	r0, r5
 800d0d8:	f7f3 f81e 	bl	8000118 <strlen>
 800d0dc:	23fa      	movs	r3, #250	; 0xfa
 800d0de:	b282      	uxth	r2, r0
 800d0e0:	497a      	ldr	r1, [pc, #488]	; (800d2cc <SendResults+0x30c>)
 800d0e2:	7808      	ldrb	r0, [r1, #0]
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	4249      	negs	r1, r1
 800d0e8:	9100      	str	r1, [sp, #0]
 800d0ea:	005b      	lsls	r3, r3, #1
 800d0ec:	0029      	movs	r1, r5
 800d0ee:	f002 fccb 	bl	800fa88 <writePxMutex>
			CheckForEnterKey();
 800d0f2:	f7fe fe25 	bl	800bd40 <CheckForEnterKey>
 800d0f6:	e0be      	b.n	800d276 <SendResults+0x2b6>
			RawMsgInt=Raw_Msg*10;
 800d0f8:	4975      	ldr	r1, [pc, #468]	; (800d2d0 <SendResults+0x310>)
 800d0fa:	9805      	ldr	r0, [sp, #20]
 800d0fc:	f7f3 fed4 	bl	8000ea8 <__aeabi_fmul>
 800d100:	f7f3 fa68 	bl	80005d4 <__aeabi_f2uiz>
 800d104:	0003      	movs	r3, r0
 800d106:	9004      	str	r0, [sp, #16]
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightMsgUINT, strUnit, RawMsgInt);
 800d108:	9a03      	ldr	r2, [sp, #12]
 800d10a:	4972      	ldr	r1, [pc, #456]	; (800d2d4 <SendResults+0x314>)
 800d10c:	0028      	movs	r0, r5
 800d10e:	f008 fc27 	bl	8015960 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800d112:	0028      	movs	r0, r5
 800d114:	f7f3 f800 	bl	8000118 <strlen>
 800d118:	23fa      	movs	r3, #250	; 0xfa
 800d11a:	b282      	uxth	r2, r0
 800d11c:	496b      	ldr	r1, [pc, #428]	; (800d2cc <SendResults+0x30c>)
 800d11e:	7808      	ldrb	r0, [r1, #0]
 800d120:	2101      	movs	r1, #1
 800d122:	4249      	negs	r1, r1
 800d124:	9100      	str	r1, [sp, #0]
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	0029      	movs	r1, r5
 800d12a:	f002 fcad 	bl	800fa88 <writePxMutex>
			CheckForEnterKey();
 800d12e:	f7fe fe07 	bl	800bd40 <CheckForEnterKey>
 800d132:	e0a0      	b.n	800d276 <SendResults+0x2b6>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800d134:	4b63      	ldr	r3, [pc, #396]	; (800d2c4 <SendResults+0x304>)
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	2b05      	cmp	r3, #5
 800d13a:	d01c      	beq.n	800d176 <SendResults+0x1b6>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800d13c:	2b07      	cmp	r3, #7
 800d13e:	d000      	beq.n	800d142 <SendResults+0x182>
 800d140:	e099      	b.n	800d276 <SendResults+0x2b6>
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightVerboseMsg, Raw_Msg);
 800d142:	9805      	ldr	r0, [sp, #20]
 800d144:	f7f5 ffee 	bl	8003124 <__aeabi_f2d>
 800d148:	0002      	movs	r2, r0
 800d14a:	000b      	movs	r3, r1
 800d14c:	4962      	ldr	r1, [pc, #392]	; (800d2d8 <SendResults+0x318>)
 800d14e:	0028      	movs	r0, r5
 800d150:	f008 fc06 	bl	8015960 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800d154:	0028      	movs	r0, r5
 800d156:	f7f2 ffdf 	bl	8000118 <strlen>
 800d15a:	23fa      	movs	r3, #250	; 0xfa
 800d15c:	b282      	uxth	r2, r0
 800d15e:	495b      	ldr	r1, [pc, #364]	; (800d2cc <SendResults+0x30c>)
 800d160:	7808      	ldrb	r0, [r1, #0]
 800d162:	2101      	movs	r1, #1
 800d164:	4249      	negs	r1, r1
 800d166:	9100      	str	r1, [sp, #0]
 800d168:	005b      	lsls	r3, r3, #1
 800d16a:	0029      	movs	r1, r5
 800d16c:	f002 fc8c 	bl	800fa88 <writePxMutex>
			CheckForEnterKey();
 800d170:	f7fe fde6 	bl	800bd40 <CheckForEnterKey>
 800d174:	e07f      	b.n	800d276 <SendResults+0x2b6>
			RawMsgInt=Raw_Msg*10;
 800d176:	4956      	ldr	r1, [pc, #344]	; (800d2d0 <SendResults+0x310>)
 800d178:	9805      	ldr	r0, [sp, #20]
 800d17a:	f7f3 fe95 	bl	8000ea8 <__aeabi_fmul>
 800d17e:	f7f3 fa29 	bl	80005d4 <__aeabi_f2uiz>
 800d182:	0002      	movs	r2, r0
 800d184:	9004      	str	r0, [sp, #16]
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightVerboseMsgUINT, RawMsgInt);
 800d186:	4955      	ldr	r1, [pc, #340]	; (800d2dc <SendResults+0x31c>)
 800d188:	0028      	movs	r0, r5
 800d18a:	f008 fbe9 	bl	8015960 <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800d18e:	0028      	movs	r0, r5
 800d190:	f7f2 ffc2 	bl	8000118 <strlen>
 800d194:	23fa      	movs	r3, #250	; 0xfa
 800d196:	b282      	uxth	r2, r0
 800d198:	494c      	ldr	r1, [pc, #304]	; (800d2cc <SendResults+0x30c>)
 800d19a:	7808      	ldrb	r0, [r1, #0]
 800d19c:	2101      	movs	r1, #1
 800d19e:	4249      	negs	r1, r1
 800d1a0:	9100      	str	r1, [sp, #0]
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	0029      	movs	r1, r5
 800d1a6:	f002 fc6f 	bl	800fa88 <writePxMutex>
			CheckForEnterKey();
 800d1aa:	f7fe fdc9 	bl	800bd40 <CheckForEnterKey>
 800d1ae:	e062      	b.n	800d276 <SendResults+0x2b6>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800d1b0:	4b44      	ldr	r3, [pc, #272]	; (800d2c4 <SendResults+0x304>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	2b05      	cmp	r3, #5
 800d1b6:	d016      	beq.n	800d1e6 <SendResults+0x226>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800d1b8:	2b07      	cmp	r3, #7
 800d1ba:	d15c      	bne.n	800d276 <SendResults+0x2b6>
				if (Module==myID){ 
 800d1bc:	4b48      	ldr	r3, [pc, #288]	; (800d2e0 <SendResults+0x320>)
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	42b3      	cmp	r3, r6
 800d1c2:	d03d      	beq.n	800d240 <SendResults+0x280>
						messageParams[0] = Port;
 800d1c4:	4b47      	ldr	r3, [pc, #284]	; (800d2e4 <SendResults+0x324>)
 800d1c6:	701f      	strb	r7, [r3, #0]
						messageParams[1] = *((__IO uint8_t *)(&Raw_Msg)+3);
 800d1c8:	aa05      	add	r2, sp, #20
 800d1ca:	78d1      	ldrb	r1, [r2, #3]
 800d1cc:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&Raw_Msg)+2);
 800d1ce:	7891      	ldrb	r1, [r2, #2]
 800d1d0:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&Raw_Msg)+1);
 800d1d2:	7851      	ldrb	r1, [r2, #1]
 800d1d4:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&Raw_Msg)+0);
 800d1d6:	7812      	ldrb	r2, [r2, #0]
 800d1d8:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(Module, CODE_PORT_FORWARD, sizeof(float)+1);
 800d1da:	2205      	movs	r2, #5
 800d1dc:	2123      	movs	r1, #35	; 0x23
 800d1de:	0030      	movs	r0, r6
 800d1e0:	f7fc fd18 	bl	8009c14 <SendMessageToModule>
 800d1e4:	e047      	b.n	800d276 <SendResults+0x2b6>
				RawMsgInt=Raw_Msg*10;
 800d1e6:	493a      	ldr	r1, [pc, #232]	; (800d2d0 <SendResults+0x310>)
 800d1e8:	9805      	ldr	r0, [sp, #20]
 800d1ea:	f7f3 fe5d 	bl	8000ea8 <__aeabi_fmul>
 800d1ee:	f7f3 f9f1 	bl	80005d4 <__aeabi_f2uiz>
 800d1f2:	9004      	str	r0, [sp, #16]
				if (Module==myID){
 800d1f4:	4b3a      	ldr	r3, [pc, #232]	; (800d2e0 <SendResults+0x320>)
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	42b3      	cmp	r3, r6
 800d1fa:	d010      	beq.n	800d21e <SendResults+0x25e>
						messageParams[0] = Port;
 800d1fc:	4b39      	ldr	r3, [pc, #228]	; (800d2e4 <SendResults+0x324>)
 800d1fe:	701f      	strb	r7, [r3, #0]
						messageParams[1] = *((__IO uint8_t *)(&RawMsgInt)+3);
 800d200:	aa04      	add	r2, sp, #16
 800d202:	78d1      	ldrb	r1, [r2, #3]
 800d204:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&RawMsgInt)+2);
 800d206:	7891      	ldrb	r1, [r2, #2]
 800d208:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&RawMsgInt)+1);
 800d20a:	7851      	ldrb	r1, [r2, #1]
 800d20c:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&RawMsgInt)+0);
 800d20e:	7812      	ldrb	r2, [r2, #0]
 800d210:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(Module, CODE_PORT_FORWARD, sizeof(uint32_t)+1);
 800d212:	2205      	movs	r2, #5
 800d214:	2123      	movs	r1, #35	; 0x23
 800d216:	0030      	movs	r0, r6
 800d218:	f7fc fcfc 	bl	8009c14 <SendMessageToModule>
 800d21c:	e02b      	b.n	800d276 <SendResults+0x2b6>
						temp[0] = *((__IO uint8_t *)(&RawMsgInt)+3);
 800d21e:	ab04      	add	r3, sp, #16
 800d220:	78da      	ldrb	r2, [r3, #3]
 800d222:	4931      	ldr	r1, [pc, #196]	; (800d2e8 <SendResults+0x328>)
 800d224:	700a      	strb	r2, [r1, #0]
						temp[1] = *((__IO uint8_t *)(&RawMsgInt)+2);
 800d226:	789a      	ldrb	r2, [r3, #2]
 800d228:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&RawMsgInt)+1);
 800d22a:	785a      	ldrb	r2, [r3, #1]
 800d22c:	708a      	strb	r2, [r1, #2]
						temp[3] = *((__IO uint8_t *)(&RawMsgInt)+0);
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	70cb      	strb	r3, [r1, #3]
						writePxMutex(Port, (char *)&temp, 4*sizeof(uint8_t), 10, 10);
 800d232:	230a      	movs	r3, #10
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	2204      	movs	r2, #4
 800d238:	0038      	movs	r0, r7
 800d23a:	f002 fc25 	bl	800fa88 <writePxMutex>
 800d23e:	e01a      	b.n	800d276 <SendResults+0x2b6>
						temp[0] = *((__IO uint8_t *)(&Raw_Msg)+3);
 800d240:	ab05      	add	r3, sp, #20
 800d242:	78da      	ldrb	r2, [r3, #3]
 800d244:	4928      	ldr	r1, [pc, #160]	; (800d2e8 <SendResults+0x328>)
 800d246:	700a      	strb	r2, [r1, #0]
						temp[1] = *((__IO uint8_t *)(&Raw_Msg)+2);
 800d248:	789a      	ldrb	r2, [r3, #2]
 800d24a:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&Raw_Msg)+1);
 800d24c:	785a      	ldrb	r2, [r3, #1]
 800d24e:	708a      	strb	r2, [r1, #2]
						temp[3] = *((__IO uint8_t *)(&Raw_Msg)+0);
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	70cb      	strb	r3, [r1, #3]
						writePxMutex(Port, (char *)&temp, 4*sizeof(uint8_t), 10, 10);
 800d254:	230a      	movs	r3, #10
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	2204      	movs	r2, #4
 800d25a:	0038      	movs	r0, r7
 800d25c:	f002 fc14 	bl	800fa88 <writePxMutex>
 800d260:	e009      	b.n	800d276 <SendResults+0x2b6>
      memset(Buffer, 0, sizeof(float));
 800d262:	2204      	movs	r2, #4
 800d264:	2100      	movs	r1, #0
 800d266:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d268:	f008 f980 	bl	801556c <memset>
      memcpy(Buffer, &Raw_Msg, sizeof(float));
 800d26c:	2204      	movs	r2, #4
 800d26e:	a905      	add	r1, sp, #20
 800d270:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d272:	f008 f972 	bl	801555a <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE){
 800d276:	2c04      	cmp	r4, #4
 800d278:	d004      	beq.n	800d284 <SendResults+0x2c4>
 800d27a:	2c02      	cmp	r4, #2
 800d27c:	d002      	beq.n	800d284 <SendResults+0x2c4>
		free(strUnit);
 800d27e:	9803      	ldr	r0, [sp, #12]
 800d280:	f007 ff28 	bl	80150d4 <free>
}
 800d284:	2000      	movs	r0, #0
 800d286:	b007      	add	sp, #28
 800d288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d28a:	46c0      	nop			; (mov r8, r8)
 800d28c:	200000bc 	.word	0x200000bc
 800d290:	0801cab8 	.word	0x0801cab8
 800d294:	447a0000 	.word	0x447a0000
 800d298:	6e978d50 	.word	0x6e978d50
 800d29c:	4041a312 	.word	0x4041a312
 800d2a0:	2f275feb 	.word	0x2f275feb
 800d2a4:	4001a311 	.word	0x4001a311
 800d2a8:	200071e0 	.word	0x200071e0
 800d2ac:	0801cad0 	.word	0x0801cad0
 800d2b0:	0801cb48 	.word	0x0801cb48
 800d2b4:	0801cb40 	.word	0x0801cb40
 800d2b8:	0801cb4c 	.word	0x0801cb4c
 800d2bc:	0801cb54 	.word	0x0801cb54
 800d2c0:	0801cb5c 	.word	0x0801cb5c
 800d2c4:	2000008c 	.word	0x2000008c
 800d2c8:	0801cb7c 	.word	0x0801cb7c
 800d2cc:	20000aa8 	.word	0x20000aa8
 800d2d0:	41200000 	.word	0x41200000
 800d2d4:	0801cb68 	.word	0x0801cb68
 800d2d8:	0801cb98 	.word	0x0801cb98
 800d2dc:	0801cb90 	.word	0x0801cb90
 800d2e0:	20001072 	.word	0x20001072
 800d2e4:	20000f34 	.word	0x20000f34
 800d2e8:	20001df4 	.word	0x20001df4

0800d2ec <sampleCommand>:
{
 800d2ec:	b570      	push	{r4, r5, r6, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	0005      	movs	r5, r0
 800d2f2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	9303      	str	r3, [sp, #12]
  configASSERT( pcWriteBuffer );
 800d2f8:	2d00      	cmp	r5, #0
 800d2fa:	d101      	bne.n	800d300 <sampleCommand+0x14>
 800d2fc:	b672      	cpsid	i
 800d2fe:	e7fe      	b.n	800d2fe <sampleCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d300:	aa03      	add	r2, sp, #12
 800d302:	2101      	movs	r1, #1
 800d304:	f002 fe1a 	bl	800ff3c <FreeRTOS_CLIGetParameter>
  if (NULL != pcParameterString1)
 800d308:	2800      	cmp	r0, #0
 800d30a:	d019      	beq.n	800d340 <sampleCommand+0x54>
    channel = atoi( (char *)pcParameterString1);
 800d30c:	f007 fe95 	bl	801503a <atoi>
 800d310:	b2c4      	uxtb	r4, r0
	Module_Status result = H26R0_OK;
 800d312:	2600      	movs	r6, #0
	if (channel == 1 || channel == 2)
 800d314:	1e63      	subs	r3, r4, #1
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d914      	bls.n	800d346 <sampleCommand+0x5a>
		if (result != H26R0_OK || channel != 1 || channel != 2 )
 800d31c:	2e00      	cmp	r6, #0
 800d31e:	d101      	bne.n	800d324 <sampleCommand+0x38>
 800d320:	2c01      	cmp	r4, #1
 800d322:	d020      	beq.n	800d366 <sampleCommand+0x7a>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800d324:	2212      	movs	r2, #18
 800d326:	4911      	ldr	r1, [pc, #68]	; (800d36c <sampleCommand+0x80>)
 800d328:	0028      	movs	r0, r5
 800d32a:	f008 f916 	bl	801555a <memcpy>
  memset((char *) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800d32e:	2299      	movs	r2, #153	; 0x99
 800d330:	0092      	lsls	r2, r2, #2
 800d332:	2100      	movs	r1, #0
 800d334:	0028      	movs	r0, r5
 800d336:	f008 f919 	bl	801556c <memset>
}
 800d33a:	2000      	movs	r0, #0
 800d33c:	b004      	add	sp, #16
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
    result = H26R0_ERR_WrongParams;
 800d340:	2602      	movs	r6, #2
	uint8_t channel = 0;
 800d342:	2400      	movs	r4, #0
 800d344:	e7e6      	b.n	800d314 <sampleCommand+0x28>
		DATA_To_SEND=SampleKGram(channel);
 800d346:	0020      	movs	r0, r4
 800d348:	f7ff fdb4 	bl	800ceb4 <SampleKGram>
 800d34c:	4b08      	ldr	r3, [pc, #32]	; (800d370 <sampleCommand+0x84>)
 800d34e:	6018      	str	r0, [r3, #0]
		global_mode=SAMPLE_CLI_CASE;
 800d350:	2106      	movs	r1, #6
 800d352:	4b08      	ldr	r3, [pc, #32]	; (800d374 <sampleCommand+0x88>)
 800d354:	7019      	strb	r1, [r3, #0]
		SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800d356:	4b08      	ldr	r3, [pc, #32]	; (800d378 <sampleCommand+0x8c>)
 800d358:	781a      	ldrb	r2, [r3, #0]
 800d35a:	2300      	movs	r3, #0
 800d35c:	9301      	str	r3, [sp, #4]
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	f7ff fe2e 	bl	800cfc0 <SendResults>
 800d364:	e7da      	b.n	800d31c <sampleCommand+0x30>
		if (result != H26R0_OK || channel != 1 || channel != 2 )
 800d366:	2c02      	cmp	r4, #2
 800d368:	d1dc      	bne.n	800d324 <sampleCommand+0x38>
 800d36a:	e7e0      	b.n	800d32e <sampleCommand+0x42>
 800d36c:	0801cc48 	.word	0x0801cc48
 800d370:	200019c8 	.word	0x200019c8
 800d374:	200071e1 	.word	0x200071e1
 800d378:	200000bc 	.word	0x200000bc

0800d37c <LoadcellTask>:
{
 800d37c:	b530      	push	{r4, r5, lr}
 800d37e:	b083      	sub	sp, #12
 800d380:	e021      	b.n	800d3c6 <LoadcellTask+0x4a>
		switch(global_mode)
 800d382:	2b01      	cmp	r3, #1
 800d384:	d000      	beq.n	800d388 <LoadcellTask+0xc>
 800d386:	e086      	b.n	800d496 <LoadcellTask+0x11a>
				t0=HAL_GetTick();
 800d388:	f004 fd28 	bl	8011ddc <HAL_GetTick>
 800d38c:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);		
 800d38e:	4b44      	ldr	r3, [pc, #272]	; (800d4a0 <LoadcellTask+0x124>)
 800d390:	7818      	ldrb	r0, [r3, #0]
 800d392:	f7ff fd8f 	bl	800ceb4 <SampleKGram>
 800d396:	4b43      	ldr	r3, [pc, #268]	; (800d4a4 <LoadcellTask+0x128>)
 800d398:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800d39a:	4b43      	ldr	r3, [pc, #268]	; (800d4a8 <LoadcellTask+0x12c>)
 800d39c:	781a      	ldrb	r2, [r3, #0]
 800d39e:	4b43      	ldr	r3, [pc, #268]	; (800d4ac <LoadcellTask+0x130>)
 800d3a0:	7819      	ldrb	r1, [r3, #0]
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	9301      	str	r3, [sp, #4]
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	f7ff fe0a 	bl	800cfc0 <SendResults>
				while(HAL_GetTick()-t0<(global_period-1)) {taskYIELD();}
 800d3ac:	e001      	b.n	800d3b2 <LoadcellTask+0x36>
 800d3ae:	f004 fb89 	bl	8011ac4 <vPortYield>
 800d3b2:	f004 fd13 	bl	8011ddc <HAL_GetTick>
 800d3b6:	1b00      	subs	r0, r0, r4
 800d3b8:	4b3d      	ldr	r3, [pc, #244]	; (800d4b0 <LoadcellTask+0x134>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	4298      	cmp	r0, r3
 800d3c0:	d3f5      	bcc.n	800d3ae <LoadcellTask+0x32>
		taskYIELD();
 800d3c2:	f004 fb7f 	bl	8011ac4 <vPortYield>
		switch(global_mode)
 800d3c6:	4b39      	ldr	r3, [pc, #228]	; (800d4ac <LoadcellTask+0x130>)
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	2b02      	cmp	r3, #2
 800d3cc:	d023      	beq.n	800d416 <LoadcellTask+0x9a>
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	2a02      	cmp	r2, #2
 800d3d2:	d9d6      	bls.n	800d382 <LoadcellTask+0x6>
 800d3d4:	2b03      	cmp	r3, #3
 800d3d6:	d03f      	beq.n	800d458 <LoadcellTask+0xdc>
 800d3d8:	2b04      	cmp	r3, #4
 800d3da:	d15c      	bne.n	800d496 <LoadcellTask+0x11a>
				t0=HAL_GetTick();
 800d3dc:	f004 fcfe 	bl	8011ddc <HAL_GetTick>
 800d3e0:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800d3e2:	4b2f      	ldr	r3, [pc, #188]	; (800d4a0 <LoadcellTask+0x124>)
 800d3e4:	7818      	ldrb	r0, [r3, #0]
 800d3e6:	f7ff fd65 	bl	800ceb4 <SampleKGram>
 800d3ea:	4b2e      	ldr	r3, [pc, #184]	; (800d4a4 <LoadcellTask+0x128>)
 800d3ec:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800d3ee:	4b2e      	ldr	r3, [pc, #184]	; (800d4a8 <LoadcellTask+0x12c>)
 800d3f0:	781a      	ldrb	r2, [r3, #0]
 800d3f2:	4b2e      	ldr	r3, [pc, #184]	; (800d4ac <LoadcellTask+0x130>)
 800d3f4:	7819      	ldrb	r1, [r3, #0]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	9301      	str	r3, [sp, #4]
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	f7ff fde0 	bl	800cfc0 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800d400:	e001      	b.n	800d406 <LoadcellTask+0x8a>
 800d402:	f004 fb5f 	bl	8011ac4 <vPortYield>
 800d406:	f004 fce9 	bl	8011ddc <HAL_GetTick>
 800d40a:	1b00      	subs	r0, r0, r4
 800d40c:	4b28      	ldr	r3, [pc, #160]	; (800d4b0 <LoadcellTask+0x134>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4298      	cmp	r0, r3
 800d412:	d3f6      	bcc.n	800d402 <LoadcellTask+0x86>
 800d414:	e7d5      	b.n	800d3c2 <LoadcellTask+0x46>
				t0=HAL_GetTick();
 800d416:	f004 fce1 	bl	8011ddc <HAL_GetTick>
 800d41a:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800d41c:	4b20      	ldr	r3, [pc, #128]	; (800d4a0 <LoadcellTask+0x124>)
 800d41e:	7818      	ldrb	r0, [r3, #0]
 800d420:	f7ff fd48 	bl	800ceb4 <SampleKGram>
 800d424:	4b1f      	ldr	r3, [pc, #124]	; (800d4a4 <LoadcellTask+0x128>)
 800d426:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, global_port, global_module, NULL);
 800d428:	4b22      	ldr	r3, [pc, #136]	; (800d4b4 <LoadcellTask+0x138>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	4a1e      	ldr	r2, [pc, #120]	; (800d4a8 <LoadcellTask+0x12c>)
 800d42e:	7812      	ldrb	r2, [r2, #0]
 800d430:	491e      	ldr	r1, [pc, #120]	; (800d4ac <LoadcellTask+0x130>)
 800d432:	7809      	ldrb	r1, [r1, #0]
 800d434:	2500      	movs	r5, #0
 800d436:	9501      	str	r5, [sp, #4]
 800d438:	4d1f      	ldr	r5, [pc, #124]	; (800d4b8 <LoadcellTask+0x13c>)
 800d43a:	782d      	ldrb	r5, [r5, #0]
 800d43c:	9500      	str	r5, [sp, #0]
 800d43e:	f7ff fdbf 	bl	800cfc0 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800d442:	e001      	b.n	800d448 <LoadcellTask+0xcc>
 800d444:	f004 fb3e 	bl	8011ac4 <vPortYield>
 800d448:	f004 fcc8 	bl	8011ddc <HAL_GetTick>
 800d44c:	1b00      	subs	r0, r0, r4
 800d44e:	4b18      	ldr	r3, [pc, #96]	; (800d4b0 <LoadcellTask+0x134>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4298      	cmp	r0, r3
 800d454:	d3f6      	bcc.n	800d444 <LoadcellTask+0xc8>
 800d456:	e7b4      	b.n	800d3c2 <LoadcellTask+0x46>
				t0=HAL_GetTick();
 800d458:	f004 fcc0 	bl	8011ddc <HAL_GetTick>
 800d45c:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800d45e:	4b10      	ldr	r3, [pc, #64]	; (800d4a0 <LoadcellTask+0x124>)
 800d460:	7818      	ldrb	r0, [r3, #0]
 800d462:	f7ff fd27 	bl	800ceb4 <SampleKGram>
 800d466:	4b0f      	ldr	r3, [pc, #60]	; (800d4a4 <LoadcellTask+0x128>)
 800d468:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, ptr_weight_buffer);
 800d46a:	4b0f      	ldr	r3, [pc, #60]	; (800d4a8 <LoadcellTask+0x12c>)
 800d46c:	781a      	ldrb	r2, [r3, #0]
 800d46e:	4b0f      	ldr	r3, [pc, #60]	; (800d4ac <LoadcellTask+0x130>)
 800d470:	7819      	ldrb	r1, [r3, #0]
 800d472:	4b12      	ldr	r3, [pc, #72]	; (800d4bc <LoadcellTask+0x140>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	9301      	str	r3, [sp, #4]
 800d478:	2300      	movs	r3, #0
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	f7ff fda0 	bl	800cfc0 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800d480:	e001      	b.n	800d486 <LoadcellTask+0x10a>
 800d482:	f004 fb1f 	bl	8011ac4 <vPortYield>
 800d486:	f004 fca9 	bl	8011ddc <HAL_GetTick>
 800d48a:	1b00      	subs	r0, r0, r4
 800d48c:	4b08      	ldr	r3, [pc, #32]	; (800d4b0 <LoadcellTask+0x134>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4298      	cmp	r0, r3
 800d492:	d3f6      	bcc.n	800d482 <LoadcellTask+0x106>
 800d494:	e795      	b.n	800d3c2 <LoadcellTask+0x46>
			default: global_mode = IDLE_CASE; break;
 800d496:	4b05      	ldr	r3, [pc, #20]	; (800d4ac <LoadcellTask+0x130>)
 800d498:	2200      	movs	r2, #0
 800d49a:	701a      	strb	r2, [r3, #0]
 800d49c:	e791      	b.n	800d3c2 <LoadcellTask+0x46>
 800d49e:	46c0      	nop			; (mov r8, r8)
 800d4a0:	200071e0 	.word	0x200071e0
 800d4a4:	200019c8 	.word	0x200019c8
 800d4a8:	200000bc 	.word	0x200000bc
 800d4ac:	200071e1 	.word	0x200071e1
 800d4b0:	200073ac 	.word	0x200073ac
 800d4b4:	200071e2 	.word	0x200071e2
 800d4b8:	20007420 	.word	0x20007420
 800d4bc:	200072c8 	.word	0x200072c8

0800d4c0 <ZeroCal>:
{
 800d4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c2:	0006      	movs	r6, r0
	IND_ON();
 800d4c4:	2580      	movs	r5, #128	; 0x80
 800d4c6:	012d      	lsls	r5, r5, #4
 800d4c8:	2490      	movs	r4, #144	; 0x90
 800d4ca:	05e4      	lsls	r4, r4, #23
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	0029      	movs	r1, r5
 800d4d0:	0020      	movs	r0, r4
 800d4d2:	f006 f890 	bl	80135f6 <HAL_GPIO_WritePin>
	SetHX711Rate(80);
 800d4d6:	2050      	movs	r0, #80	; 0x50
 800d4d8:	f7fe ff70 	bl	800c3bc <SetHX711Rate>
	Zero_Drift=(Average(ch,100)*0.5*AVDD)/(ADC_full_range*gain);
 800d4dc:	2164      	movs	r1, #100	; 0x64
 800d4de:	0030      	movs	r0, r6
 800d4e0:	f7ff fd3c 	bl	800cf5c <Average>
 800d4e4:	f7f5 fe1e 	bl	8003124 <__aeabi_f2d>
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	4b1a      	ldr	r3, [pc, #104]	; (800d554 <ZeroCal+0x94>)
 800d4ec:	f7f4 ffa2 	bl	8002434 <__aeabi_dmul>
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	4b19      	ldr	r3, [pc, #100]	; (800d558 <ZeroCal+0x98>)
 800d4f4:	f7f4 ff9e 	bl	8002434 <__aeabi_dmul>
 800d4f8:	0006      	movs	r6, r0
 800d4fa:	000f      	movs	r7, r1
 800d4fc:	4b17      	ldr	r3, [pc, #92]	; (800d55c <ZeroCal+0x9c>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	05d8      	lsls	r0, r3, #23
 800d502:	1ac0      	subs	r0, r0, r3
 800d504:	f7f5 fda2 	bl	800304c <__aeabi_i2d>
 800d508:	0002      	movs	r2, r0
 800d50a:	000b      	movs	r3, r1
 800d50c:	0030      	movs	r0, r6
 800d50e:	0039      	movs	r1, r7
 800d510:	f7f4 fb86 	bl	8001c20 <__aeabi_ddiv>
 800d514:	f7f5 fe58 	bl	80031c8 <__aeabi_d2f>
 800d518:	4b11      	ldr	r3, [pc, #68]	; (800d560 <ZeroCal+0xa0>)
 800d51a:	6018      	str	r0, [r3, #0]
	temp32=*(uint32_t*)&Zero_Drift;
 800d51c:	4e11      	ldr	r6, [pc, #68]	; (800d564 <ZeroCal+0xa4>)
 800d51e:	6030      	str	r0, [r6, #0]
	SetHX711Rate(10);
 800d520:	200a      	movs	r0, #10
 800d522:	f7fe ff4b 	bl	800c3bc <SetHX711Rate>
	word_LSB=0x0000FFFF & temp32;
 800d526:	6833      	ldr	r3, [r6, #0]
 800d528:	b299      	uxth	r1, r3
 800d52a:	4a0f      	ldr	r2, [pc, #60]	; (800d568 <ZeroCal+0xa8>)
 800d52c:	8011      	strh	r1, [r2, #0]
	word_MSB=0x0000FFFF & (temp32>>16); 
 800d52e:	0c1b      	lsrs	r3, r3, #16
 800d530:	4e0e      	ldr	r6, [pc, #56]	; (800d56c <ZeroCal+0xac>)
 800d532:	8033      	strh	r3, [r6, #0]
	EE_WriteVariable(_EE_zero_drift_LSB, word_LSB);
 800d534:	20fa      	movs	r0, #250	; 0xfa
 800d536:	30ff      	adds	r0, #255	; 0xff
 800d538:	f7fa fc4a 	bl	8007dd0 <EE_WriteVariable>
	EE_WriteVariable(_EE_zero_drift_MSB, word_MSB);
 800d53c:	8831      	ldrh	r1, [r6, #0]
 800d53e:	20fd      	movs	r0, #253	; 0xfd
 800d540:	0040      	lsls	r0, r0, #1
 800d542:	f7fa fc45 	bl	8007dd0 <EE_WriteVariable>
	IND_OFF();
 800d546:	2200      	movs	r2, #0
 800d548:	0029      	movs	r1, r5
 800d54a:	0020      	movs	r0, r4
 800d54c:	f006 f853 	bl	80135f6 <HAL_GPIO_WritePin>
}
 800d550:	2000      	movs	r0, #0
 800d552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d554:	3fe00000 	.word	0x3fe00000
 800d558:	40080000 	.word	0x40080000
 800d55c:	20000094 	.word	0x20000094
 800d560:	20001ddc 	.word	0x20001ddc
 800d564:	20001df8 	.word	0x20001df8
 800d568:	20001e14 	.word	0x20001e14
 800d56c:	20001e16 	.word	0x20001e16

0800d570 <zerocalCommand>:
{
 800d570:	b510      	push	{r4, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	0004      	movs	r4, r0
 800d576:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800d57c:	2c00      	cmp	r4, #0
 800d57e:	d101      	bne.n	800d584 <zerocalCommand+0x14>
 800d580:	b672      	cpsid	i
 800d582:	e7fe      	b.n	800d582 <zerocalCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d584:	aa01      	add	r2, sp, #4
 800d586:	2101      	movs	r1, #1
 800d588:	f002 fcd8 	bl	800ff3c <FreeRTOS_CLIGetParameter>
  if (!strncmp((const char *)pcParameterString1, "1", 1))
 800d58c:	7803      	ldrb	r3, [r0, #0]
 800d58e:	2b31      	cmp	r3, #49	; 0x31
 800d590:	d009      	beq.n	800d5a6 <zerocalCommand+0x36>
  else if (!strncmp((const char *)pcParameterString1, "2", 1))
 800d592:	2b32      	cmp	r3, #50	; 0x32
 800d594:	d010      	beq.n	800d5b8 <zerocalCommand+0x48>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800d596:	2213      	movs	r2, #19
 800d598:	490c      	ldr	r1, [pc, #48]	; (800d5cc <zerocalCommand+0x5c>)
 800d59a:	0020      	movs	r0, r4
 800d59c:	f007 ffdd 	bl	801555a <memcpy>
}
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	b002      	add	sp, #8
 800d5a4:	bd10      	pop	{r4, pc}
		ZeroCal(channel);
 800d5a6:	2001      	movs	r0, #1
 800d5a8:	f7ff ff8a 	bl	800d4c0 <ZeroCal>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Zero calibration for channel 1\r\n" );
 800d5ac:	2221      	movs	r2, #33	; 0x21
 800d5ae:	4908      	ldr	r1, [pc, #32]	; (800d5d0 <zerocalCommand+0x60>)
 800d5b0:	0020      	movs	r0, r4
 800d5b2:	f007 ffd2 	bl	801555a <memcpy>
 800d5b6:	e7f3      	b.n	800d5a0 <zerocalCommand+0x30>
		ZeroCal(channel);
 800d5b8:	2002      	movs	r0, #2
 800d5ba:	f7ff ff81 	bl	800d4c0 <ZeroCal>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Zero calibration for channel 2\r\n" );
 800d5be:	2221      	movs	r2, #33	; 0x21
 800d5c0:	4904      	ldr	r1, [pc, #16]	; (800d5d4 <zerocalCommand+0x64>)
 800d5c2:	0020      	movs	r0, r4
 800d5c4:	f007 ffc9 	bl	801555a <memcpy>
 800d5c8:	e7ea      	b.n	800d5a0 <zerocalCommand+0x30>
 800d5ca:	46c0      	nop			; (mov r8, r8)
 800d5cc:	0801b310 	.word	0x0801b310
 800d5d0:	0801d28c 	.word	0x0801d28c
 800d5d4:	0801d2b0 	.word	0x0801d2b0

0800d5d8 <Module_MessagingTask>:
{
 800d5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5da:	46c6      	mov	lr, r8
 800d5dc:	b500      	push	{lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	ab08      	add	r3, sp, #32
 800d5e2:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800d5e4:	4bd6      	ldr	r3, [pc, #856]	; (800d940 <Module_MessagingTask+0x368>)
 800d5e6:	469c      	mov	ip, r3
 800d5e8:	4460      	add	r0, ip
 800d5ea:	b283      	uxth	r3, r0
 800d5ec:	2b0d      	cmp	r3, #13
 800d5ee:	d900      	bls.n	800d5f2 <Module_MessagingTask+0x1a>
 800d5f0:	e210      	b.n	800da14 <Module_MessagingTask+0x43c>
 800d5f2:	0098      	lsls	r0, r3, #2
 800d5f4:	4bd3      	ldr	r3, [pc, #844]	; (800d944 <Module_MessagingTask+0x36c>)
 800d5f6:	581b      	ldr	r3, [r3, r0]
 800d5f8:	469f      	mov	pc, r3
			SetHX711Rate(cMessage[port-1][shift]);
 800d5fa:	3901      	subs	r1, #1
 800d5fc:	00cb      	lsls	r3, r1, #3
 800d5fe:	1a59      	subs	r1, r3, r1
 800d600:	00ca      	lsls	r2, r1, #3
 800d602:	4bd1      	ldr	r3, [pc, #836]	; (800d948 <Module_MessagingTask+0x370>)
 800d604:	189b      	adds	r3, r3, r2
 800d606:	5d18      	ldrb	r0, [r3, r4]
 800d608:	f7fe fed8 	bl	800c3bc <SetHX711Rate>
	Module_Status result = H26R0_OK;
 800d60c:	2000      	movs	r0, #0
}
 800d60e:	b002      	add	sp, #8
 800d610:	bc04      	pop	{r2}
 800d612:	4690      	mov	r8, r2
 800d614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d616:	1e48      	subs	r0, r1, #1
 800d618:	1da1      	adds	r1, r4, #6
 800d61a:	4acb      	ldr	r2, [pc, #812]	; (800d948 <Module_MessagingTask+0x370>)
 800d61c:	00c7      	lsls	r7, r0, #3
 800d61e:	1a3b      	subs	r3, r7, r0
 800d620:	00dd      	lsls	r5, r3, #3
 800d622:	1955      	adds	r5, r2, r5
 800d624:	5c6b      	ldrb	r3, [r5, r1]
 800d626:	061b      	lsls	r3, r3, #24
 800d628:	1d61      	adds	r1, r4, #5
 800d62a:	5c69      	ldrb	r1, [r5, r1]
 800d62c:	0409      	lsls	r1, r1, #16
 800d62e:	185b      	adds	r3, r3, r1
 800d630:	1d21      	adds	r1, r4, #4
 800d632:	5c69      	ldrb	r1, [r5, r1]
 800d634:	0209      	lsls	r1, r1, #8
 800d636:	185b      	adds	r3, r3, r1
 800d638:	1ce1      	adds	r1, r4, #3
 800d63a:	5c69      	ldrb	r1, [r5, r1]
 800d63c:	4698      	mov	r8, r3
 800d63e:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d640:	0021      	movs	r1, r4
 800d642:	310a      	adds	r1, #10
 800d644:	5c6e      	ldrb	r6, [r5, r1]
 800d646:	0636      	lsls	r6, r6, #24
 800d648:	3901      	subs	r1, #1
 800d64a:	5c69      	ldrb	r1, [r5, r1]
 800d64c:	0409      	lsls	r1, r1, #16
 800d64e:	1876      	adds	r6, r6, r1
 800d650:	0021      	movs	r1, r4
 800d652:	3108      	adds	r1, #8
 800d654:	5c69      	ldrb	r1, [r5, r1]
 800d656:	0209      	lsls	r1, r1, #8
 800d658:	1876      	adds	r6, r6, r1
 800d65a:	1de1      	adds	r1, r4, #7
 800d65c:	5c69      	ldrb	r1, [r5, r1]
 800d65e:	1876      	adds	r6, r6, r1
		StreamGramToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d660:	1c61      	adds	r1, r4, #1
 800d662:	1ca3      	adds	r3, r4, #2
 800d664:	5ceb      	ldrb	r3, [r5, r3]
 800d666:	469c      	mov	ip, r3
 800d668:	5c69      	ldrb	r1, [r5, r1]
 800d66a:	1a38      	subs	r0, r7, r0
 800d66c:	00c5      	lsls	r5, r0, #3
 800d66e:	1952      	adds	r2, r2, r5
 800d670:	5d10      	ldrb	r0, [r2, r4]
 800d672:	9600      	str	r6, [sp, #0]
 800d674:	4643      	mov	r3, r8
 800d676:	4662      	mov	r2, ip
 800d678:	f7ff f802 	bl	800c680 <StreamGramToPort>
	Module_Status result = H26R0_OK;
 800d67c:	2000      	movs	r0, #0
			break;
 800d67e:	e7c6      	b.n	800d60e <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d680:	1e48      	subs	r0, r1, #1
 800d682:	1da1      	adds	r1, r4, #6
 800d684:	4ab0      	ldr	r2, [pc, #704]	; (800d948 <Module_MessagingTask+0x370>)
 800d686:	00c7      	lsls	r7, r0, #3
 800d688:	1a3b      	subs	r3, r7, r0
 800d68a:	00dd      	lsls	r5, r3, #3
 800d68c:	1955      	adds	r5, r2, r5
 800d68e:	5c6b      	ldrb	r3, [r5, r1]
 800d690:	061b      	lsls	r3, r3, #24
 800d692:	1d61      	adds	r1, r4, #5
 800d694:	5c69      	ldrb	r1, [r5, r1]
 800d696:	0409      	lsls	r1, r1, #16
 800d698:	185b      	adds	r3, r3, r1
 800d69a:	1d21      	adds	r1, r4, #4
 800d69c:	5c69      	ldrb	r1, [r5, r1]
 800d69e:	0209      	lsls	r1, r1, #8
 800d6a0:	185b      	adds	r3, r3, r1
 800d6a2:	1ce1      	adds	r1, r4, #3
 800d6a4:	5c69      	ldrb	r1, [r5, r1]
 800d6a6:	4698      	mov	r8, r3
 800d6a8:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d6aa:	0021      	movs	r1, r4
 800d6ac:	310a      	adds	r1, #10
 800d6ae:	5c6e      	ldrb	r6, [r5, r1]
 800d6b0:	0636      	lsls	r6, r6, #24
 800d6b2:	3901      	subs	r1, #1
 800d6b4:	5c69      	ldrb	r1, [r5, r1]
 800d6b6:	0409      	lsls	r1, r1, #16
 800d6b8:	1876      	adds	r6, r6, r1
 800d6ba:	0021      	movs	r1, r4
 800d6bc:	3108      	adds	r1, #8
 800d6be:	5c69      	ldrb	r1, [r5, r1]
 800d6c0:	0209      	lsls	r1, r1, #8
 800d6c2:	1876      	adds	r6, r6, r1
 800d6c4:	1de1      	adds	r1, r4, #7
 800d6c6:	5c69      	ldrb	r1, [r5, r1]
 800d6c8:	1876      	adds	r6, r6, r1
		StreamKGramToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d6ca:	1c61      	adds	r1, r4, #1
 800d6cc:	1ca3      	adds	r3, r4, #2
 800d6ce:	5ceb      	ldrb	r3, [r5, r3]
 800d6d0:	469c      	mov	ip, r3
 800d6d2:	5c69      	ldrb	r1, [r5, r1]
 800d6d4:	1a38      	subs	r0, r7, r0
 800d6d6:	00c5      	lsls	r5, r0, #3
 800d6d8:	1952      	adds	r2, r2, r5
 800d6da:	5d10      	ldrb	r0, [r2, r4]
 800d6dc:	9600      	str	r6, [sp, #0]
 800d6de:	4643      	mov	r3, r8
 800d6e0:	4662      	mov	r2, ip
 800d6e2:	f7ff f81b 	bl	800c71c <StreamKGramToPort>
	Module_Status result = H26R0_OK;
 800d6e6:	2000      	movs	r0, #0
			break;
 800d6e8:	e791      	b.n	800d60e <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d6ea:	1e48      	subs	r0, r1, #1
 800d6ec:	1da1      	adds	r1, r4, #6
 800d6ee:	4a96      	ldr	r2, [pc, #600]	; (800d948 <Module_MessagingTask+0x370>)
 800d6f0:	00c7      	lsls	r7, r0, #3
 800d6f2:	1a3b      	subs	r3, r7, r0
 800d6f4:	00dd      	lsls	r5, r3, #3
 800d6f6:	1955      	adds	r5, r2, r5
 800d6f8:	5c6b      	ldrb	r3, [r5, r1]
 800d6fa:	061b      	lsls	r3, r3, #24
 800d6fc:	1d61      	adds	r1, r4, #5
 800d6fe:	5c69      	ldrb	r1, [r5, r1]
 800d700:	0409      	lsls	r1, r1, #16
 800d702:	185b      	adds	r3, r3, r1
 800d704:	1d21      	adds	r1, r4, #4
 800d706:	5c69      	ldrb	r1, [r5, r1]
 800d708:	0209      	lsls	r1, r1, #8
 800d70a:	185b      	adds	r3, r3, r1
 800d70c:	1ce1      	adds	r1, r4, #3
 800d70e:	5c69      	ldrb	r1, [r5, r1]
 800d710:	4698      	mov	r8, r3
 800d712:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d714:	0021      	movs	r1, r4
 800d716:	310a      	adds	r1, #10
 800d718:	5c6e      	ldrb	r6, [r5, r1]
 800d71a:	0636      	lsls	r6, r6, #24
 800d71c:	3901      	subs	r1, #1
 800d71e:	5c69      	ldrb	r1, [r5, r1]
 800d720:	0409      	lsls	r1, r1, #16
 800d722:	1876      	adds	r6, r6, r1
 800d724:	0021      	movs	r1, r4
 800d726:	3108      	adds	r1, #8
 800d728:	5c69      	ldrb	r1, [r5, r1]
 800d72a:	0209      	lsls	r1, r1, #8
 800d72c:	1876      	adds	r6, r6, r1
 800d72e:	1de1      	adds	r1, r4, #7
 800d730:	5c69      	ldrb	r1, [r5, r1]
 800d732:	1876      	adds	r6, r6, r1
		StreamOunceToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d734:	1c61      	adds	r1, r4, #1
 800d736:	1ca3      	adds	r3, r4, #2
 800d738:	5ceb      	ldrb	r3, [r5, r3]
 800d73a:	469c      	mov	ip, r3
 800d73c:	5c69      	ldrb	r1, [r5, r1]
 800d73e:	1a38      	subs	r0, r7, r0
 800d740:	00c5      	lsls	r5, r0, #3
 800d742:	1952      	adds	r2, r2, r5
 800d744:	5d10      	ldrb	r0, [r2, r4]
 800d746:	9600      	str	r6, [sp, #0]
 800d748:	4643      	mov	r3, r8
 800d74a:	4662      	mov	r2, ip
 800d74c:	f7ff f832 	bl	800c7b4 <StreamOunceToPort>
	Module_Status result = H26R0_OK;
 800d750:	2000      	movs	r0, #0
			break;
 800d752:	e75c      	b.n	800d60e <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d754:	1e48      	subs	r0, r1, #1
 800d756:	1da1      	adds	r1, r4, #6
 800d758:	4a7b      	ldr	r2, [pc, #492]	; (800d948 <Module_MessagingTask+0x370>)
 800d75a:	00c7      	lsls	r7, r0, #3
 800d75c:	1a3b      	subs	r3, r7, r0
 800d75e:	00dd      	lsls	r5, r3, #3
 800d760:	1955      	adds	r5, r2, r5
 800d762:	5c6b      	ldrb	r3, [r5, r1]
 800d764:	061b      	lsls	r3, r3, #24
 800d766:	1d61      	adds	r1, r4, #5
 800d768:	5c69      	ldrb	r1, [r5, r1]
 800d76a:	0409      	lsls	r1, r1, #16
 800d76c:	185b      	adds	r3, r3, r1
 800d76e:	1d21      	adds	r1, r4, #4
 800d770:	5c69      	ldrb	r1, [r5, r1]
 800d772:	0209      	lsls	r1, r1, #8
 800d774:	185b      	adds	r3, r3, r1
 800d776:	1ce1      	adds	r1, r4, #3
 800d778:	5c69      	ldrb	r1, [r5, r1]
 800d77a:	4698      	mov	r8, r3
 800d77c:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d77e:	0021      	movs	r1, r4
 800d780:	310a      	adds	r1, #10
 800d782:	5c6e      	ldrb	r6, [r5, r1]
 800d784:	0636      	lsls	r6, r6, #24
 800d786:	3901      	subs	r1, #1
 800d788:	5c69      	ldrb	r1, [r5, r1]
 800d78a:	0409      	lsls	r1, r1, #16
 800d78c:	1876      	adds	r6, r6, r1
 800d78e:	0021      	movs	r1, r4
 800d790:	3108      	adds	r1, #8
 800d792:	5c69      	ldrb	r1, [r5, r1]
 800d794:	0209      	lsls	r1, r1, #8
 800d796:	1876      	adds	r6, r6, r1
 800d798:	1de1      	adds	r1, r4, #7
 800d79a:	5c69      	ldrb	r1, [r5, r1]
 800d79c:	1876      	adds	r6, r6, r1
		StreamPoundToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d79e:	1c61      	adds	r1, r4, #1
 800d7a0:	1ca3      	adds	r3, r4, #2
 800d7a2:	5ceb      	ldrb	r3, [r5, r3]
 800d7a4:	469c      	mov	ip, r3
 800d7a6:	5c69      	ldrb	r1, [r5, r1]
 800d7a8:	1a38      	subs	r0, r7, r0
 800d7aa:	00c5      	lsls	r5, r0, #3
 800d7ac:	1952      	adds	r2, r2, r5
 800d7ae:	5d10      	ldrb	r0, [r2, r4]
 800d7b0:	9600      	str	r6, [sp, #0]
 800d7b2:	4643      	mov	r3, r8
 800d7b4:	4662      	mov	r2, ip
 800d7b6:	f7ff f84b 	bl	800c850 <StreamPoundToPort>
	Module_Status result = H26R0_OK;
 800d7ba:	2000      	movs	r0, #0
			break;
 800d7bc:	e727      	b.n	800d60e <Module_MessagingTask+0x36>
			global_mode=IDLE_CASE;
 800d7be:	4b63      	ldr	r3, [pc, #396]	; (800d94c <Module_MessagingTask+0x374>)
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	701a      	strb	r2, [r3, #0]
			PowerDown();
 800d7c4:	f7ff fb1e 	bl	800ce04 <PowerDown>
			xTimerStop( xTimer, portMAX_DELAY );
 800d7c8:	4b61      	ldr	r3, [pc, #388]	; (800d950 <Module_MessagingTask+0x378>)
 800d7ca:	6818      	ldr	r0, [r3, #0]
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	425b      	negs	r3, r3
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	2103      	movs	r1, #3
 800d7d8:	f003 ffd4 	bl	8011784 <xTimerGenericCommand>
	Module_Status result = H26R0_OK;
 800d7dc:	2000      	movs	r0, #0
			break;
 800d7de:	e716      	b.n	800d60e <Module_MessagingTask+0x36>
			if(cMessage[port - 1][shift] == 1)
 800d7e0:	1e4d      	subs	r5, r1, #1
 800d7e2:	00eb      	lsls	r3, r5, #3
 800d7e4:	1b5b      	subs	r3, r3, r5
 800d7e6:	00da      	lsls	r2, r3, #3
 800d7e8:	4b57      	ldr	r3, [pc, #348]	; (800d948 <Module_MessagingTask+0x370>)
 800d7ea:	189b      	adds	r3, r3, r2
 800d7ec:	5d18      	ldrb	r0, [r3, r4]
 800d7ee:	2801      	cmp	r0, #1
 800d7f0:	d01a      	beq.n	800d828 <Module_MessagingTask+0x250>
				H26R0_Weight2 =SampleGram(cMessage[port - 1][shift]);
 800d7f2:	f7ff fb45 	bl	800ce80 <SampleGram>
 800d7f6:	4b57      	ldr	r3, [pc, #348]	; (800d954 <Module_MessagingTask+0x37c>)
 800d7f8:	6018      	str	r0, [r3, #0]
			SendResults(DATA_To_SEND,SAMPLE_PORT_CASE,Gram,cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],NULL);
 800d7fa:	1c66      	adds	r6, r4, #1
 800d7fc:	3402      	adds	r4, #2
 800d7fe:	4a52      	ldr	r2, [pc, #328]	; (800d948 <Module_MessagingTask+0x370>)
 800d800:	00e9      	lsls	r1, r5, #3
 800d802:	1b48      	subs	r0, r1, r5
 800d804:	00c3      	lsls	r3, r0, #3
 800d806:	18d3      	adds	r3, r2, r3
 800d808:	5d9b      	ldrb	r3, [r3, r6]
 800d80a:	4853      	ldr	r0, [pc, #332]	; (800d958 <Module_MessagingTask+0x380>)
 800d80c:	6800      	ldr	r0, [r0, #0]
 800d80e:	2600      	movs	r6, #0
 800d810:	9601      	str	r6, [sp, #4]
 800d812:	1b49      	subs	r1, r1, r5
 800d814:	00cd      	lsls	r5, r1, #3
 800d816:	1952      	adds	r2, r2, r5
 800d818:	5d12      	ldrb	r2, [r2, r4]
 800d81a:	9200      	str	r2, [sp, #0]
 800d81c:	2201      	movs	r2, #1
 800d81e:	2107      	movs	r1, #7
 800d820:	f7ff fbce 	bl	800cfc0 <SendResults>
	Module_Status result = H26R0_OK;
 800d824:	2000      	movs	r0, #0
			break;
 800d826:	e6f2      	b.n	800d60e <Module_MessagingTask+0x36>
				H26R0_Weight1 =SampleGram(cMessage[port - 1][shift]);
 800d828:	f7ff fb2a 	bl	800ce80 <SampleGram>
 800d82c:	4b4b      	ldr	r3, [pc, #300]	; (800d95c <Module_MessagingTask+0x384>)
 800d82e:	6018      	str	r0, [r3, #0]
 800d830:	e7e3      	b.n	800d7fa <Module_MessagingTask+0x222>
			if(cMessage[port - 1][shift] == 1)
 800d832:	1e4d      	subs	r5, r1, #1
 800d834:	00eb      	lsls	r3, r5, #3
 800d836:	1b5b      	subs	r3, r3, r5
 800d838:	00da      	lsls	r2, r3, #3
 800d83a:	4b43      	ldr	r3, [pc, #268]	; (800d948 <Module_MessagingTask+0x370>)
 800d83c:	189b      	adds	r3, r3, r2
 800d83e:	5d18      	ldrb	r0, [r3, r4]
 800d840:	2801      	cmp	r0, #1
 800d842:	d01a      	beq.n	800d87a <Module_MessagingTask+0x2a2>
				H26R0_Weight2 =SampleKGram(cMessage[port - 1][shift]);
 800d844:	f7ff fb36 	bl	800ceb4 <SampleKGram>
 800d848:	4b42      	ldr	r3, [pc, #264]	; (800d954 <Module_MessagingTask+0x37c>)
 800d84a:	6018      	str	r0, [r3, #0]
			SendResults(DATA_To_SEND,SAMPLE_PORT_CASE,KGram,cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],NULL);
 800d84c:	1c66      	adds	r6, r4, #1
 800d84e:	3402      	adds	r4, #2
 800d850:	4a3d      	ldr	r2, [pc, #244]	; (800d948 <Module_MessagingTask+0x370>)
 800d852:	00e9      	lsls	r1, r5, #3
 800d854:	1b48      	subs	r0, r1, r5
 800d856:	00c3      	lsls	r3, r0, #3
 800d858:	18d3      	adds	r3, r2, r3
 800d85a:	5d9b      	ldrb	r3, [r3, r6]
 800d85c:	483e      	ldr	r0, [pc, #248]	; (800d958 <Module_MessagingTask+0x380>)
 800d85e:	6800      	ldr	r0, [r0, #0]
 800d860:	2600      	movs	r6, #0
 800d862:	9601      	str	r6, [sp, #4]
 800d864:	1b49      	subs	r1, r1, r5
 800d866:	00cd      	lsls	r5, r1, #3
 800d868:	1952      	adds	r2, r2, r5
 800d86a:	5d12      	ldrb	r2, [r2, r4]
 800d86c:	9200      	str	r2, [sp, #0]
 800d86e:	2202      	movs	r2, #2
 800d870:	2107      	movs	r1, #7
 800d872:	f7ff fba5 	bl	800cfc0 <SendResults>
	Module_Status result = H26R0_OK;
 800d876:	2000      	movs	r0, #0
			break;
 800d878:	e6c9      	b.n	800d60e <Module_MessagingTask+0x36>
				H26R0_Weight1 =SampleKGram(cMessage[port - 1][shift]);
 800d87a:	f7ff fb1b 	bl	800ceb4 <SampleKGram>
 800d87e:	4b37      	ldr	r3, [pc, #220]	; (800d95c <Module_MessagingTask+0x384>)
 800d880:	6018      	str	r0, [r3, #0]
 800d882:	e7e3      	b.n	800d84c <Module_MessagingTask+0x274>
			if(cMessage[port - 1][shift] == 1)
 800d884:	1e4d      	subs	r5, r1, #1
 800d886:	00eb      	lsls	r3, r5, #3
 800d888:	1b5b      	subs	r3, r3, r5
 800d88a:	00da      	lsls	r2, r3, #3
 800d88c:	4b2e      	ldr	r3, [pc, #184]	; (800d948 <Module_MessagingTask+0x370>)
 800d88e:	189b      	adds	r3, r3, r2
 800d890:	5d18      	ldrb	r0, [r3, r4]
 800d892:	2801      	cmp	r0, #1
 800d894:	d01a      	beq.n	800d8cc <Module_MessagingTask+0x2f4>
				H26R0_Weight2 =SampleOunce(cMessage[port - 1][shift]);
 800d896:	f7ff fb21 	bl	800cedc <SampleOunce>
 800d89a:	4b2e      	ldr	r3, [pc, #184]	; (800d954 <Module_MessagingTask+0x37c>)
 800d89c:	6018      	str	r0, [r3, #0]
			SendResults(DATA_To_SEND,SAMPLE_PORT_CASE,Ounce,cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],NULL);
 800d89e:	1c66      	adds	r6, r4, #1
 800d8a0:	3402      	adds	r4, #2
 800d8a2:	4a29      	ldr	r2, [pc, #164]	; (800d948 <Module_MessagingTask+0x370>)
 800d8a4:	00e9      	lsls	r1, r5, #3
 800d8a6:	1b48      	subs	r0, r1, r5
 800d8a8:	00c3      	lsls	r3, r0, #3
 800d8aa:	18d3      	adds	r3, r2, r3
 800d8ac:	5d9b      	ldrb	r3, [r3, r6]
 800d8ae:	482a      	ldr	r0, [pc, #168]	; (800d958 <Module_MessagingTask+0x380>)
 800d8b0:	6800      	ldr	r0, [r0, #0]
 800d8b2:	2600      	movs	r6, #0
 800d8b4:	9601      	str	r6, [sp, #4]
 800d8b6:	1b49      	subs	r1, r1, r5
 800d8b8:	00cd      	lsls	r5, r1, #3
 800d8ba:	1952      	adds	r2, r2, r5
 800d8bc:	5d12      	ldrb	r2, [r2, r4]
 800d8be:	9200      	str	r2, [sp, #0]
 800d8c0:	2203      	movs	r2, #3
 800d8c2:	2107      	movs	r1, #7
 800d8c4:	f7ff fb7c 	bl	800cfc0 <SendResults>
	Module_Status result = H26R0_OK;
 800d8c8:	2000      	movs	r0, #0
			break;
 800d8ca:	e6a0      	b.n	800d60e <Module_MessagingTask+0x36>
				H26R0_Weight1 =SampleOunce(cMessage[port - 1][shift]);
 800d8cc:	f7ff fb06 	bl	800cedc <SampleOunce>
 800d8d0:	4b22      	ldr	r3, [pc, #136]	; (800d95c <Module_MessagingTask+0x384>)
 800d8d2:	6018      	str	r0, [r3, #0]
 800d8d4:	e7e3      	b.n	800d89e <Module_MessagingTask+0x2c6>
			if(cMessage[port - 1][shift] == 1)
 800d8d6:	1e4d      	subs	r5, r1, #1
 800d8d8:	00eb      	lsls	r3, r5, #3
 800d8da:	1b5b      	subs	r3, r3, r5
 800d8dc:	00da      	lsls	r2, r3, #3
 800d8de:	4b1a      	ldr	r3, [pc, #104]	; (800d948 <Module_MessagingTask+0x370>)
 800d8e0:	189b      	adds	r3, r3, r2
 800d8e2:	5d18      	ldrb	r0, [r3, r4]
 800d8e4:	2801      	cmp	r0, #1
 800d8e6:	d01a      	beq.n	800d91e <Module_MessagingTask+0x346>
				H26R0_Weight2 =SamplePound(cMessage[port - 1][shift]);
 800d8e8:	f7ff fb18 	bl	800cf1c <SamplePound>
 800d8ec:	4b19      	ldr	r3, [pc, #100]	; (800d954 <Module_MessagingTask+0x37c>)
 800d8ee:	6018      	str	r0, [r3, #0]
			SendResults(DATA_To_SEND,SAMPLE_PORT_CASE,Pound,cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],NULL);
 800d8f0:	1c66      	adds	r6, r4, #1
 800d8f2:	3402      	adds	r4, #2
 800d8f4:	4a14      	ldr	r2, [pc, #80]	; (800d948 <Module_MessagingTask+0x370>)
 800d8f6:	00e9      	lsls	r1, r5, #3
 800d8f8:	1b48      	subs	r0, r1, r5
 800d8fa:	00c3      	lsls	r3, r0, #3
 800d8fc:	18d3      	adds	r3, r2, r3
 800d8fe:	5d9b      	ldrb	r3, [r3, r6]
 800d900:	4815      	ldr	r0, [pc, #84]	; (800d958 <Module_MessagingTask+0x380>)
 800d902:	6800      	ldr	r0, [r0, #0]
 800d904:	2600      	movs	r6, #0
 800d906:	9601      	str	r6, [sp, #4]
 800d908:	1b49      	subs	r1, r1, r5
 800d90a:	00cd      	lsls	r5, r1, #3
 800d90c:	1952      	adds	r2, r2, r5
 800d90e:	5d12      	ldrb	r2, [r2, r4]
 800d910:	9200      	str	r2, [sp, #0]
 800d912:	2204      	movs	r2, #4
 800d914:	2107      	movs	r1, #7
 800d916:	f7ff fb53 	bl	800cfc0 <SendResults>
	Module_Status result = H26R0_OK;
 800d91a:	2000      	movs	r0, #0
			break;
 800d91c:	e677      	b.n	800d60e <Module_MessagingTask+0x36>
				H26R0_Weight1 =SamplePound(cMessage[port - 1][shift]);
 800d91e:	f7ff fafd 	bl	800cf1c <SamplePound>
 800d922:	4b0e      	ldr	r3, [pc, #56]	; (800d95c <Module_MessagingTask+0x384>)
 800d924:	6018      	str	r0, [r3, #0]
 800d926:	e7e3      	b.n	800d8f0 <Module_MessagingTask+0x318>
				ZeroCal(cMessage[port-1][shift]);
 800d928:	3901      	subs	r1, #1
 800d92a:	00cb      	lsls	r3, r1, #3
 800d92c:	1a59      	subs	r1, r3, r1
 800d92e:	00ca      	lsls	r2, r1, #3
 800d930:	4b05      	ldr	r3, [pc, #20]	; (800d948 <Module_MessagingTask+0x370>)
 800d932:	189b      	adds	r3, r3, r2
 800d934:	5d18      	ldrb	r0, [r3, r4]
 800d936:	f7ff fdc3 	bl	800d4c0 <ZeroCal>
	Module_Status result = H26R0_OK;
 800d93a:	2000      	movs	r0, #0
			break;
 800d93c:	e667      	b.n	800d60e <Module_MessagingTask+0x36>
 800d93e:	46c0      	nop			; (mov r8, r8)
 800d940:	fffff894 	.word	0xfffff894
 800d944:	0801caf8 	.word	0x0801caf8
 800d948:	20000d3c 	.word	0x20000d3c
 800d94c:	200071e1 	.word	0x200071e1
 800d950:	20001e18 	.word	0x20001e18
 800d954:	200019d4 	.word	0x200019d4
 800d958:	200019c8 	.word	0x200019c8
 800d95c:	200019d0 	.word	0x200019d0
			period = ( (uint32_t) cMessage[port-1][1+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + cMessage[port-1][4+shift];
 800d960:	1e4d      	subs	r5, r1, #1
 800d962:	1c62      	adds	r2, r4, #1
 800d964:	4b2c      	ldr	r3, [pc, #176]	; (800da18 <Module_MessagingTask+0x440>)
 800d966:	4698      	mov	r8, r3
 800d968:	00ef      	lsls	r7, r5, #3
 800d96a:	1b7b      	subs	r3, r7, r5
 800d96c:	00d8      	lsls	r0, r3, #3
 800d96e:	4440      	add	r0, r8
 800d970:	5c83      	ldrb	r3, [r0, r2]
 800d972:	061b      	lsls	r3, r3, #24
 800d974:	1ca2      	adds	r2, r4, #2
 800d976:	5c82      	ldrb	r2, [r0, r2]
 800d978:	0412      	lsls	r2, r2, #16
 800d97a:	189b      	adds	r3, r3, r2
 800d97c:	1ce2      	adds	r2, r4, #3
 800d97e:	5c82      	ldrb	r2, [r0, r2]
 800d980:	0212      	lsls	r2, r2, #8
 800d982:	189b      	adds	r3, r3, r2
 800d984:	1d22      	adds	r2, r4, #4
 800d986:	5c82      	ldrb	r2, [r0, r2]
 800d988:	189b      	adds	r3, r3, r2
			timeout = ( (uint32_t) cMessage[port-1][5+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][7+shift] << 8 ) + cMessage[port-1][8+shift];
 800d98a:	1d62      	adds	r2, r4, #5
 800d98c:	5c86      	ldrb	r6, [r0, r2]
 800d98e:	0636      	lsls	r6, r6, #24
 800d990:	1da2      	adds	r2, r4, #6
 800d992:	5c82      	ldrb	r2, [r0, r2]
 800d994:	0412      	lsls	r2, r2, #16
 800d996:	18b6      	adds	r6, r6, r2
 800d998:	1de2      	adds	r2, r4, #7
 800d99a:	5c82      	ldrb	r2, [r0, r2]
 800d99c:	0212      	lsls	r2, r2, #8
 800d99e:	18b6      	adds	r6, r6, r2
 800d9a0:	0022      	movs	r2, r4
 800d9a2:	3208      	adds	r2, #8
 800d9a4:	5c82      	ldrb	r2, [r0, r2]
 800d9a6:	18b6      	adds	r6, r6, r2
			StreamRawToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800d9a8:	0021      	movs	r1, r4
 800d9aa:	3109      	adds	r1, #9
 800d9ac:	0022      	movs	r2, r4
 800d9ae:	320a      	adds	r2, #10
 800d9b0:	5c82      	ldrb	r2, [r0, r2]
 800d9b2:	5c41      	ldrb	r1, [r0, r1]
 800d9b4:	5d00      	ldrb	r0, [r0, r4]
 800d9b6:	9600      	str	r6, [sp, #0]
 800d9b8:	f7ff f884 	bl	800cac4 <StreamRawToPort>
			H26R0_Weight2=Average(cMessage[port-1][shift],1);	
 800d9bc:	1b7d      	subs	r5, r7, r5
 800d9be:	00eb      	lsls	r3, r5, #3
 800d9c0:	4443      	add	r3, r8
 800d9c2:	5d18      	ldrb	r0, [r3, r4]
 800d9c4:	2101      	movs	r1, #1
 800d9c6:	f7ff fac9 	bl	800cf5c <Average>
 800d9ca:	4b14      	ldr	r3, [pc, #80]	; (800da1c <Module_MessagingTask+0x444>)
 800d9cc:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d9ce:	2000      	movs	r0, #0
			break;
 800d9d0:	e61d      	b.n	800d60e <Module_MessagingTask+0x36>
			H26R0_Weight2=Average(cMessage[port-1][shift],1);	
 800d9d2:	3901      	subs	r1, #1
 800d9d4:	00cb      	lsls	r3, r1, #3
 800d9d6:	1a59      	subs	r1, r3, r1
 800d9d8:	00ca      	lsls	r2, r1, #3
 800d9da:	4b0f      	ldr	r3, [pc, #60]	; (800da18 <Module_MessagingTask+0x440>)
 800d9dc:	189b      	adds	r3, r3, r2
 800d9de:	5d18      	ldrb	r0, [r3, r4]
 800d9e0:	2101      	movs	r1, #1
 800d9e2:	f7ff fabb 	bl	800cf5c <Average>
 800d9e6:	4b0d      	ldr	r3, [pc, #52]	; (800da1c <Module_MessagingTask+0x444>)
 800d9e8:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d9ea:	2000      	movs	r0, #0
			break;
 800d9ec:	e60f      	b.n	800d60e <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 0)
 800d9ee:	3901      	subs	r1, #1
 800d9f0:	00cb      	lsls	r3, r1, #3
 800d9f2:	1a59      	subs	r1, r3, r1
 800d9f4:	00ca      	lsls	r2, r1, #3
 800d9f6:	4b08      	ldr	r3, [pc, #32]	; (800da18 <Module_MessagingTask+0x440>)
 800d9f8:	189b      	adds	r3, r3, r2
 800d9fa:	5d1b      	ldrb	r3, [r3, r4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d004      	beq.n	800da0a <Module_MessagingTask+0x432>
				H26R0_DATA_FORMAT = FMT_FLOAT;
 800da00:	4b07      	ldr	r3, [pc, #28]	; (800da20 <Module_MessagingTask+0x448>)
 800da02:	2207      	movs	r2, #7
 800da04:	701a      	strb	r2, [r3, #0]
	Module_Status result = H26R0_OK;
 800da06:	2000      	movs	r0, #0
 800da08:	e601      	b.n	800d60e <Module_MessagingTask+0x36>
				H26R0_DATA_FORMAT = FMT_UINT32;
 800da0a:	4b05      	ldr	r3, [pc, #20]	; (800da20 <Module_MessagingTask+0x448>)
 800da0c:	2205      	movs	r2, #5
 800da0e:	701a      	strb	r2, [r3, #0]
	Module_Status result = H26R0_OK;
 800da10:	2000      	movs	r0, #0
 800da12:	e5fc      	b.n	800d60e <Module_MessagingTask+0x36>
			result = H26R0_ERR_UnknownMessage;
 800da14:	2001      	movs	r0, #1
 800da16:	e5fa      	b.n	800d60e <Module_MessagingTask+0x36>
 800da18:	20000d3c 	.word	0x20000d3c
 800da1c:	200019d4 	.word	0x200019d4
 800da20:	2000008c 	.word	0x2000008c

0800da24 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800da24:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800da26:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800da28:	2300      	movs	r3, #0
 800da2a:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800da2c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800da2e:	2280      	movs	r2, #128	; 0x80
 800da30:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800da32:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800da34:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800da36:	3320      	adds	r3, #32
 800da38:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800da3a:	2380      	movs	r3, #128	; 0x80
 800da3c:	019b      	lsls	r3, r3, #6
 800da3e:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800da40:	f004 feae 	bl	80127a0 <HAL_DMA_Init>
}
 800da44:	bd10      	pop	{r4, pc}

0800da46 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800da46:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800da48:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800da4a:	2310      	movs	r3, #16
 800da4c:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800da4e:	2300      	movs	r3, #0
 800da50:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800da52:	2280      	movs	r2, #128	; 0x80
 800da54:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800da56:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800da58:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800da5a:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800da5c:	2380      	movs	r3, #128	; 0x80
 800da5e:	019b      	lsls	r3, r3, #6
 800da60:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800da62:	f004 fe9d 	bl	80127a0 <HAL_DMA_Init>
}
 800da66:	bd10      	pop	{r4, pc}

0800da68 <DMA_Init>:
{
 800da68:	b510      	push	{r4, lr}
 800da6a:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800da6c:	4b1d      	ldr	r3, [pc, #116]	; (800dae4 <DMA_Init+0x7c>)
 800da6e:	6959      	ldr	r1, [r3, #20]
 800da70:	2201      	movs	r2, #1
 800da72:	4311      	orrs	r1, r2
 800da74:	6159      	str	r1, [r3, #20]
 800da76:	6959      	ldr	r1, [r3, #20]
 800da78:	400a      	ands	r2, r1
 800da7a:	9200      	str	r2, [sp, #0]
 800da7c:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800da7e:	6959      	ldr	r1, [r3, #20]
 800da80:	2202      	movs	r2, #2
 800da82:	4311      	orrs	r1, r2
 800da84:	6159      	str	r1, [r3, #20]
 800da86:	695b      	ldr	r3, [r3, #20]
 800da88:	401a      	ands	r2, r3
 800da8a:	9201      	str	r2, [sp, #4]
 800da8c:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800da8e:	4c16      	ldr	r4, [pc, #88]	; (800dae8 <DMA_Init+0x80>)
 800da90:	4916      	ldr	r1, [pc, #88]	; (800daec <DMA_Init+0x84>)
 800da92:	0020      	movs	r0, r4
 800da94:	f7ff ffc6 	bl	800da24 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800da98:	0020      	movs	r0, r4
 800da9a:	3038      	adds	r0, #56	; 0x38
 800da9c:	4914      	ldr	r1, [pc, #80]	; (800daf0 <DMA_Init+0x88>)
 800da9e:	f7ff ffc1 	bl	800da24 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800daa2:	0020      	movs	r0, r4
 800daa4:	3070      	adds	r0, #112	; 0x70
 800daa6:	4913      	ldr	r1, [pc, #76]	; (800daf4 <DMA_Init+0x8c>)
 800daa8:	f7ff ffbc 	bl	800da24 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800daac:	0020      	movs	r0, r4
 800daae:	30a8      	adds	r0, #168	; 0xa8
 800dab0:	4911      	ldr	r1, [pc, #68]	; (800daf8 <DMA_Init+0x90>)
 800dab2:	f7ff ffb7 	bl	800da24 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800dab6:	0020      	movs	r0, r4
 800dab8:	30e0      	adds	r0, #224	; 0xe0
 800daba:	4910      	ldr	r1, [pc, #64]	; (800dafc <DMA_Init+0x94>)
 800dabc:	f7ff ffb2 	bl	800da24 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800dac0:	4c0f      	ldr	r4, [pc, #60]	; (800db00 <DMA_Init+0x98>)
 800dac2:	4910      	ldr	r1, [pc, #64]	; (800db04 <DMA_Init+0x9c>)
 800dac4:	0020      	movs	r0, r4
 800dac6:	f7ff ffbe 	bl	800da46 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800daca:	0020      	movs	r0, r4
 800dacc:	3038      	adds	r0, #56	; 0x38
 800dace:	490e      	ldr	r1, [pc, #56]	; (800db08 <DMA_Init+0xa0>)
 800dad0:	f7ff ffb9 	bl	800da46 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800dad4:	0020      	movs	r0, r4
 800dad6:	3070      	adds	r0, #112	; 0x70
 800dad8:	490c      	ldr	r1, [pc, #48]	; (800db0c <DMA_Init+0xa4>)
 800dada:	f7ff ffb4 	bl	800da46 <DMA_MSG_TX_CH_Init>
}
 800dade:	b002      	add	sp, #8
 800dae0:	bd10      	pop	{r4, pc}
 800dae2:	46c0      	nop			; (mov r8, r8)
 800dae4:	40021000 	.word	0x40021000
 800dae8:	20001e1c 	.word	0x20001e1c
 800daec:	40020008 	.word	0x40020008
 800daf0:	40020030 	.word	0x40020030
 800daf4:	40020058 	.word	0x40020058
 800daf8:	4002006c 	.word	0x4002006c
 800dafc:	4002041c 	.word	0x4002041c
 800db00:	20001f6c 	.word	0x20001f6c
 800db04:	4002001c 	.word	0x4002001c
 800db08:	40020044 	.word	0x40020044
 800db0c:	40020080 	.word	0x40020080

0800db10 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800db10:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800db12:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800db14:	2300      	movs	r3, #0
 800db16:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800db18:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800db1a:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800db1c:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800db1e:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800db20:	3320      	adds	r3, #32
 800db22:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800db24:	2380      	movs	r3, #128	; 0x80
 800db26:	015b      	lsls	r3, r3, #5
 800db28:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800db2a:	f004 fe39 	bl	80127a0 <HAL_DMA_Init>
}
 800db2e:	bd10      	pop	{r4, pc}

0800db30 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800db30:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800db32:	6803      	ldr	r3, [r0, #0]
 800db34:	4a20      	ldr	r2, [pc, #128]	; (800dbb8 <SetupDMAInterrupts+0x88>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d020      	beq.n	800db7c <SetupDMAInterrupts+0x4c>
 800db3a:	d827      	bhi.n	800db8c <SetupDMAInterrupts+0x5c>
 800db3c:	4a1f      	ldr	r2, [pc, #124]	; (800dbbc <SetupDMAInterrupts+0x8c>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d00e      	beq.n	800db60 <SetupDMAInterrupts+0x30>
 800db42:	d815      	bhi.n	800db70 <SetupDMAInterrupts+0x40>
 800db44:	4a1e      	ldr	r2, [pc, #120]	; (800dbc0 <SetupDMAInterrupts+0x90>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d107      	bne.n	800db5a <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800db4a:	2200      	movs	r2, #0
 800db4c:	2009      	movs	r0, #9
 800db4e:	f004 fc89 	bl	8012464 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800db52:	2009      	movs	r0, #9
 800db54:	f004 fcb6 	bl	80124c4 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800db58:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800db5a:	4a1a      	ldr	r2, [pc, #104]	; (800dbc4 <SetupDMAInterrupts+0x94>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d1fb      	bne.n	800db58 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800db60:	2200      	movs	r2, #0
 800db62:	200a      	movs	r0, #10
 800db64:	f004 fc7e 	bl	8012464 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800db68:	200a      	movs	r0, #10
 800db6a:	f004 fcab 	bl	80124c4 <HAL_NVIC_EnableIRQ>
			break;
 800db6e:	e7f3      	b.n	800db58 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800db70:	4a15      	ldr	r2, [pc, #84]	; (800dbc8 <SetupDMAInterrupts+0x98>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d002      	beq.n	800db7c <SetupDMAInterrupts+0x4c>
 800db76:	4a15      	ldr	r2, [pc, #84]	; (800dbcc <SetupDMAInterrupts+0x9c>)
 800db78:	4293      	cmp	r3, r2
 800db7a:	d1ed      	bne.n	800db58 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800db7c:	2200      	movs	r2, #0
 800db7e:	200b      	movs	r0, #11
 800db80:	f004 fc70 	bl	8012464 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800db84:	200b      	movs	r0, #11
 800db86:	f004 fc9d 	bl	80124c4 <HAL_NVIC_EnableIRQ>
}
 800db8a:	e7e5      	b.n	800db58 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800db8c:	4a10      	ldr	r2, [pc, #64]	; (800dbd0 <SetupDMAInterrupts+0xa0>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d0e6      	beq.n	800db60 <SetupDMAInterrupts+0x30>
 800db92:	d909      	bls.n	800dba8 <SetupDMAInterrupts+0x78>
 800db94:	4a0f      	ldr	r2, [pc, #60]	; (800dbd4 <SetupDMAInterrupts+0xa4>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d0f0      	beq.n	800db7c <SetupDMAInterrupts+0x4c>
 800db9a:	4a0f      	ldr	r2, [pc, #60]	; (800dbd8 <SetupDMAInterrupts+0xa8>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d0ed      	beq.n	800db7c <SetupDMAInterrupts+0x4c>
 800dba0:	4a0e      	ldr	r2, [pc, #56]	; (800dbdc <SetupDMAInterrupts+0xac>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d1d8      	bne.n	800db58 <SetupDMAInterrupts+0x28>
 800dba6:	e7e9      	b.n	800db7c <SetupDMAInterrupts+0x4c>
 800dba8:	4a0d      	ldr	r2, [pc, #52]	; (800dbe0 <SetupDMAInterrupts+0xb0>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d0e6      	beq.n	800db7c <SetupDMAInterrupts+0x4c>
 800dbae:	4a0d      	ldr	r2, [pc, #52]	; (800dbe4 <SetupDMAInterrupts+0xb4>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d0d5      	beq.n	800db60 <SetupDMAInterrupts+0x30>
 800dbb4:	e7d0      	b.n	800db58 <SetupDMAInterrupts+0x28>
 800dbb6:	46c0      	nop			; (mov r8, r8)
 800dbb8:	4002006c 	.word	0x4002006c
 800dbbc:	40020030 	.word	0x40020030
 800dbc0:	40020008 	.word	0x40020008
 800dbc4:	4002001c 	.word	0x4002001c
 800dbc8:	40020044 	.word	0x40020044
 800dbcc:	40020058 	.word	0x40020058
 800dbd0:	4002041c 	.word	0x4002041c
 800dbd4:	40020444 	.word	0x40020444
 800dbd8:	40020458 	.word	0x40020458
 800dbdc:	40020430 	.word	0x40020430
 800dbe0:	40020080 	.word	0x40020080
 800dbe4:	40020408 	.word	0x40020408

0800dbe8 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800dbe8:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800dbea:	6803      	ldr	r3, [r0, #0]
 800dbec:	4a1a      	ldr	r2, [pc, #104]	; (800dc58 <UnSetupDMAInterrupts+0x70>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d018      	beq.n	800dc24 <UnSetupDMAInterrupts+0x3c>
 800dbf2:	d81b      	bhi.n	800dc2c <UnSetupDMAInterrupts+0x44>
 800dbf4:	4a19      	ldr	r2, [pc, #100]	; (800dc5c <UnSetupDMAInterrupts+0x74>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d00a      	beq.n	800dc10 <UnSetupDMAInterrupts+0x28>
 800dbfa:	d80d      	bhi.n	800dc18 <UnSetupDMAInterrupts+0x30>
 800dbfc:	4a18      	ldr	r2, [pc, #96]	; (800dc60 <UnSetupDMAInterrupts+0x78>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d103      	bne.n	800dc0a <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800dc02:	2009      	movs	r0, #9
 800dc04:	f004 fc68 	bl	80124d8 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800dc08:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800dc0a:	4a16      	ldr	r2, [pc, #88]	; (800dc64 <UnSetupDMAInterrupts+0x7c>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d1fb      	bne.n	800dc08 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800dc10:	200a      	movs	r0, #10
 800dc12:	f004 fc61 	bl	80124d8 <HAL_NVIC_DisableIRQ>
			break;
 800dc16:	e7f7      	b.n	800dc08 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800dc18:	4a13      	ldr	r2, [pc, #76]	; (800dc68 <UnSetupDMAInterrupts+0x80>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d002      	beq.n	800dc24 <UnSetupDMAInterrupts+0x3c>
 800dc1e:	4a13      	ldr	r2, [pc, #76]	; (800dc6c <UnSetupDMAInterrupts+0x84>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d1f1      	bne.n	800dc08 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800dc24:	200b      	movs	r0, #11
 800dc26:	f004 fc57 	bl	80124d8 <HAL_NVIC_DisableIRQ>
}
 800dc2a:	e7ed      	b.n	800dc08 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800dc2c:	4a10      	ldr	r2, [pc, #64]	; (800dc70 <UnSetupDMAInterrupts+0x88>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d0ee      	beq.n	800dc10 <UnSetupDMAInterrupts+0x28>
 800dc32:	d909      	bls.n	800dc48 <UnSetupDMAInterrupts+0x60>
 800dc34:	4a0f      	ldr	r2, [pc, #60]	; (800dc74 <UnSetupDMAInterrupts+0x8c>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d0f4      	beq.n	800dc24 <UnSetupDMAInterrupts+0x3c>
 800dc3a:	4a0f      	ldr	r2, [pc, #60]	; (800dc78 <UnSetupDMAInterrupts+0x90>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d0f1      	beq.n	800dc24 <UnSetupDMAInterrupts+0x3c>
 800dc40:	4a0e      	ldr	r2, [pc, #56]	; (800dc7c <UnSetupDMAInterrupts+0x94>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d1e0      	bne.n	800dc08 <UnSetupDMAInterrupts+0x20>
 800dc46:	e7ed      	b.n	800dc24 <UnSetupDMAInterrupts+0x3c>
 800dc48:	4a0d      	ldr	r2, [pc, #52]	; (800dc80 <UnSetupDMAInterrupts+0x98>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d0ea      	beq.n	800dc24 <UnSetupDMAInterrupts+0x3c>
 800dc4e:	4a0d      	ldr	r2, [pc, #52]	; (800dc84 <UnSetupDMAInterrupts+0x9c>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d0dd      	beq.n	800dc10 <UnSetupDMAInterrupts+0x28>
 800dc54:	e7d8      	b.n	800dc08 <UnSetupDMAInterrupts+0x20>
 800dc56:	46c0      	nop			; (mov r8, r8)
 800dc58:	4002006c 	.word	0x4002006c
 800dc5c:	40020030 	.word	0x40020030
 800dc60:	40020008 	.word	0x40020008
 800dc64:	4002001c 	.word	0x4002001c
 800dc68:	40020044 	.word	0x40020044
 800dc6c:	40020058 	.word	0x40020058
 800dc70:	4002041c 	.word	0x4002041c
 800dc74:	40020444 	.word	0x40020444
 800dc78:	40020458 	.word	0x40020458
 800dc7c:	40020430 	.word	0x40020430
 800dc80:	40020080 	.word	0x40020080
 800dc84:	40020408 	.word	0x40020408

0800dc88 <DMA_MSG_TX_UnSetup>:
{	
 800dc88:	b510      	push	{r4, lr}
 800dc8a:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800dc8c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800dc8e:	f7ff ffab 	bl	800dbe8 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800dc92:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800dc94:	2300      	movs	r3, #0
 800dc96:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800dc98:	6623      	str	r3, [r4, #96]	; 0x60
}
 800dc9a:	bd10      	pop	{r4, pc}

0800dc9c <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800dc9c:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800dc9e:	6803      	ldr	r3, [r0, #0]
 800dca0:	4acc      	ldr	r2, [pc, #816]	; (800dfd4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d100      	bne.n	800dca8 <RemapAndLinkDMAtoUARTRx+0xc>
 800dca6:	e0ca      	b.n	800de3e <RemapAndLinkDMAtoUARTRx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800dca8:	4aca      	ldr	r2, [pc, #808]	; (800dfd4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d100      	bne.n	800dcb0 <RemapAndLinkDMAtoUARTRx+0x14>
 800dcae:	e0d8      	b.n	800de62 <RemapAndLinkDMAtoUARTRx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800dcb0:	4ac8      	ldr	r2, [pc, #800]	; (800dfd4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d100      	bne.n	800dcb8 <RemapAndLinkDMAtoUARTRx+0x1c>
 800dcb6:	e0e5      	b.n	800de84 <RemapAndLinkDMAtoUARTRx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800dcb8:	4ac6      	ldr	r2, [pc, #792]	; (800dfd4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d100      	bne.n	800dcc0 <RemapAndLinkDMAtoUARTRx+0x24>
 800dcbe:	e0f2      	b.n	800dea6 <RemapAndLinkDMAtoUARTRx+0x20a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800dcc0:	4ac4      	ldr	r2, [pc, #784]	; (800dfd4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d100      	bne.n	800dcc8 <RemapAndLinkDMAtoUARTRx+0x2c>
 800dcc6:	e0ff      	b.n	800dec8 <RemapAndLinkDMAtoUARTRx+0x22c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800dcc8:	4ac2      	ldr	r2, [pc, #776]	; (800dfd4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d100      	bne.n	800dcd0 <RemapAndLinkDMAtoUARTRx+0x34>
 800dcce:	e10b      	b.n	800dee8 <RemapAndLinkDMAtoUARTRx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800dcd0:	4ac1      	ldr	r2, [pc, #772]	; (800dfd8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d100      	bne.n	800dcd8 <RemapAndLinkDMAtoUARTRx+0x3c>
 800dcd6:	e118      	b.n	800df0a <RemapAndLinkDMAtoUARTRx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800dcd8:	4abf      	ldr	r2, [pc, #764]	; (800dfd8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d100      	bne.n	800dce0 <RemapAndLinkDMAtoUARTRx+0x44>
 800dcde:	e124      	b.n	800df2a <RemapAndLinkDMAtoUARTRx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800dce0:	4abd      	ldr	r2, [pc, #756]	; (800dfd8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d100      	bne.n	800dce8 <RemapAndLinkDMAtoUARTRx+0x4c>
 800dce6:	e131      	b.n	800df4c <RemapAndLinkDMAtoUARTRx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800dce8:	4abb      	ldr	r2, [pc, #748]	; (800dfd8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d100      	bne.n	800dcf0 <RemapAndLinkDMAtoUARTRx+0x54>
 800dcee:	e13e      	b.n	800df6e <RemapAndLinkDMAtoUARTRx+0x2d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800dcf0:	4ab9      	ldr	r2, [pc, #740]	; (800dfd8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d100      	bne.n	800dcf8 <RemapAndLinkDMAtoUARTRx+0x5c>
 800dcf6:	e14b      	b.n	800df90 <RemapAndLinkDMAtoUARTRx+0x2f4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800dcf8:	4ab7      	ldr	r2, [pc, #732]	; (800dfd8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d100      	bne.n	800dd00 <RemapAndLinkDMAtoUARTRx+0x64>
 800dcfe:	e157      	b.n	800dfb0 <RemapAndLinkDMAtoUARTRx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800dd00:	4ab6      	ldr	r2, [pc, #728]	; (800dfdc <RemapAndLinkDMAtoUARTRx+0x340>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d100      	bne.n	800dd08 <RemapAndLinkDMAtoUARTRx+0x6c>
 800dd06:	e18b      	b.n	800e020 <RemapAndLinkDMAtoUARTRx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800dd08:	4ab4      	ldr	r2, [pc, #720]	; (800dfdc <RemapAndLinkDMAtoUARTRx+0x340>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d100      	bne.n	800dd10 <RemapAndLinkDMAtoUARTRx+0x74>
 800dd0e:	e197      	b.n	800e040 <RemapAndLinkDMAtoUARTRx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800dd10:	4ab2      	ldr	r2, [pc, #712]	; (800dfdc <RemapAndLinkDMAtoUARTRx+0x340>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d100      	bne.n	800dd18 <RemapAndLinkDMAtoUARTRx+0x7c>
 800dd16:	e1a4      	b.n	800e062 <RemapAndLinkDMAtoUARTRx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800dd18:	4ab0      	ldr	r2, [pc, #704]	; (800dfdc <RemapAndLinkDMAtoUARTRx+0x340>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d100      	bne.n	800dd20 <RemapAndLinkDMAtoUARTRx+0x84>
 800dd1e:	e1b1      	b.n	800e084 <RemapAndLinkDMAtoUARTRx+0x3e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800dd20:	4aae      	ldr	r2, [pc, #696]	; (800dfdc <RemapAndLinkDMAtoUARTRx+0x340>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d100      	bne.n	800dd28 <RemapAndLinkDMAtoUARTRx+0x8c>
 800dd26:	e1be      	b.n	800e0a6 <RemapAndLinkDMAtoUARTRx+0x40a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800dd28:	4aac      	ldr	r2, [pc, #688]	; (800dfdc <RemapAndLinkDMAtoUARTRx+0x340>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d100      	bne.n	800dd30 <RemapAndLinkDMAtoUARTRx+0x94>
 800dd2e:	e1ca      	b.n	800e0c6 <RemapAndLinkDMAtoUARTRx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800dd30:	4aab      	ldr	r2, [pc, #684]	; (800dfe0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d100      	bne.n	800dd38 <RemapAndLinkDMAtoUARTRx+0x9c>
 800dd36:	e1d7      	b.n	800e0e8 <RemapAndLinkDMAtoUARTRx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800dd38:	4aa9      	ldr	r2, [pc, #676]	; (800dfe0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d100      	bne.n	800dd40 <RemapAndLinkDMAtoUARTRx+0xa4>
 800dd3e:	e1e3      	b.n	800e108 <RemapAndLinkDMAtoUARTRx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800dd40:	4aa7      	ldr	r2, [pc, #668]	; (800dfe0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d100      	bne.n	800dd48 <RemapAndLinkDMAtoUARTRx+0xac>
 800dd46:	e1f0      	b.n	800e12a <RemapAndLinkDMAtoUARTRx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800dd48:	4aa5      	ldr	r2, [pc, #660]	; (800dfe0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d100      	bne.n	800dd50 <RemapAndLinkDMAtoUARTRx+0xb4>
 800dd4e:	e1fd      	b.n	800e14c <RemapAndLinkDMAtoUARTRx+0x4b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800dd50:	4aa3      	ldr	r2, [pc, #652]	; (800dfe0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d100      	bne.n	800dd58 <RemapAndLinkDMAtoUARTRx+0xbc>
 800dd56:	e20a      	b.n	800e16e <RemapAndLinkDMAtoUARTRx+0x4d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800dd58:	4aa1      	ldr	r2, [pc, #644]	; (800dfe0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d100      	bne.n	800dd60 <RemapAndLinkDMAtoUARTRx+0xc4>
 800dd5e:	e216      	b.n	800e18e <RemapAndLinkDMAtoUARTRx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800dd60:	4aa0      	ldr	r2, [pc, #640]	; (800dfe4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d100      	bne.n	800dd68 <RemapAndLinkDMAtoUARTRx+0xcc>
 800dd66:	e223      	b.n	800e1b0 <RemapAndLinkDMAtoUARTRx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800dd68:	4a9e      	ldr	r2, [pc, #632]	; (800dfe4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d100      	bne.n	800dd70 <RemapAndLinkDMAtoUARTRx+0xd4>
 800dd6e:	e22f      	b.n	800e1d0 <RemapAndLinkDMAtoUARTRx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800dd70:	4a9c      	ldr	r2, [pc, #624]	; (800dfe4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d100      	bne.n	800dd78 <RemapAndLinkDMAtoUARTRx+0xdc>
 800dd76:	e23c      	b.n	800e1f2 <RemapAndLinkDMAtoUARTRx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800dd78:	4a9a      	ldr	r2, [pc, #616]	; (800dfe4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d100      	bne.n	800dd80 <RemapAndLinkDMAtoUARTRx+0xe4>
 800dd7e:	e249      	b.n	800e214 <RemapAndLinkDMAtoUARTRx+0x578>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800dd80:	4a98      	ldr	r2, [pc, #608]	; (800dfe4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d100      	bne.n	800dd88 <RemapAndLinkDMAtoUARTRx+0xec>
 800dd86:	e256      	b.n	800e236 <RemapAndLinkDMAtoUARTRx+0x59a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800dd88:	4a96      	ldr	r2, [pc, #600]	; (800dfe4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d100      	bne.n	800dd90 <RemapAndLinkDMAtoUARTRx+0xf4>
 800dd8e:	e262      	b.n	800e256 <RemapAndLinkDMAtoUARTRx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800dd90:	4a95      	ldr	r2, [pc, #596]	; (800dfe8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d100      	bne.n	800dd98 <RemapAndLinkDMAtoUARTRx+0xfc>
 800dd96:	e26f      	b.n	800e278 <RemapAndLinkDMAtoUARTRx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800dd98:	4a93      	ldr	r2, [pc, #588]	; (800dfe8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d100      	bne.n	800dda0 <RemapAndLinkDMAtoUARTRx+0x104>
 800dd9e:	e27b      	b.n	800e298 <RemapAndLinkDMAtoUARTRx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800dda0:	4a91      	ldr	r2, [pc, #580]	; (800dfe8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d100      	bne.n	800dda8 <RemapAndLinkDMAtoUARTRx+0x10c>
 800dda6:	e288      	b.n	800e2ba <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800dda8:	4a8f      	ldr	r2, [pc, #572]	; (800dfe8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d100      	bne.n	800ddb0 <RemapAndLinkDMAtoUARTRx+0x114>
 800ddae:	e295      	b.n	800e2dc <RemapAndLinkDMAtoUARTRx+0x640>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800ddb0:	4a8d      	ldr	r2, [pc, #564]	; (800dfe8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d100      	bne.n	800ddb8 <RemapAndLinkDMAtoUARTRx+0x11c>
 800ddb6:	e2a2      	b.n	800e2fe <RemapAndLinkDMAtoUARTRx+0x662>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800ddb8:	4a8b      	ldr	r2, [pc, #556]	; (800dfe8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d100      	bne.n	800ddc0 <RemapAndLinkDMAtoUARTRx+0x124>
 800ddbe:	e2ae      	b.n	800e31e <RemapAndLinkDMAtoUARTRx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800ddc0:	4a8a      	ldr	r2, [pc, #552]	; (800dfec <RemapAndLinkDMAtoUARTRx+0x350>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d100      	bne.n	800ddc8 <RemapAndLinkDMAtoUARTRx+0x12c>
 800ddc6:	e2bb      	b.n	800e340 <RemapAndLinkDMAtoUARTRx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800ddc8:	4a88      	ldr	r2, [pc, #544]	; (800dfec <RemapAndLinkDMAtoUARTRx+0x350>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d100      	bne.n	800ddd0 <RemapAndLinkDMAtoUARTRx+0x134>
 800ddce:	e2c7      	b.n	800e360 <RemapAndLinkDMAtoUARTRx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800ddd0:	4a86      	ldr	r2, [pc, #536]	; (800dfec <RemapAndLinkDMAtoUARTRx+0x350>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d100      	bne.n	800ddd8 <RemapAndLinkDMAtoUARTRx+0x13c>
 800ddd6:	e2d4      	b.n	800e382 <RemapAndLinkDMAtoUARTRx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800ddd8:	4a84      	ldr	r2, [pc, #528]	; (800dfec <RemapAndLinkDMAtoUARTRx+0x350>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d100      	bne.n	800dde0 <RemapAndLinkDMAtoUARTRx+0x144>
 800ddde:	e2f7      	b.n	800e3d0 <RemapAndLinkDMAtoUARTRx+0x734>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800dde0:	4a82      	ldr	r2, [pc, #520]	; (800dfec <RemapAndLinkDMAtoUARTRx+0x350>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d100      	bne.n	800dde8 <RemapAndLinkDMAtoUARTRx+0x14c>
 800dde6:	e304      	b.n	800e3f2 <RemapAndLinkDMAtoUARTRx+0x756>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800dde8:	4a80      	ldr	r2, [pc, #512]	; (800dfec <RemapAndLinkDMAtoUARTRx+0x350>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d100      	bne.n	800ddf0 <RemapAndLinkDMAtoUARTRx+0x154>
 800ddee:	e310      	b.n	800e412 <RemapAndLinkDMAtoUARTRx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800ddf0:	4a7f      	ldr	r2, [pc, #508]	; (800dff0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d100      	bne.n	800ddf8 <RemapAndLinkDMAtoUARTRx+0x15c>
 800ddf6:	e31d      	b.n	800e434 <RemapAndLinkDMAtoUARTRx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800ddf8:	4a7d      	ldr	r2, [pc, #500]	; (800dff0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d100      	bne.n	800de00 <RemapAndLinkDMAtoUARTRx+0x164>
 800ddfe:	e328      	b.n	800e452 <RemapAndLinkDMAtoUARTRx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800de00:	4a7b      	ldr	r2, [pc, #492]	; (800dff0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d100      	bne.n	800de08 <RemapAndLinkDMAtoUARTRx+0x16c>
 800de06:	e335      	b.n	800e474 <RemapAndLinkDMAtoUARTRx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800de08:	4a79      	ldr	r2, [pc, #484]	; (800dff0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d100      	bne.n	800de10 <RemapAndLinkDMAtoUARTRx+0x174>
 800de0e:	e342      	b.n	800e496 <RemapAndLinkDMAtoUARTRx+0x7fa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800de10:	4a77      	ldr	r2, [pc, #476]	; (800dff0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d100      	bne.n	800de18 <RemapAndLinkDMAtoUARTRx+0x17c>
 800de16:	e34f      	b.n	800e4b8 <RemapAndLinkDMAtoUARTRx+0x81c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800de18:	4a75      	ldr	r2, [pc, #468]	; (800dff0 <RemapAndLinkDMAtoUARTRx+0x354>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d11e      	bne.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
 800de1e:	4b75      	ldr	r3, [pc, #468]	; (800dff4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800de20:	680a      	ldr	r2, [r1, #0]
 800de22:	429a      	cmp	r2, r3
 800de24:	d11a      	bne.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800de26:	4a74      	ldr	r2, [pc, #464]	; (800dff8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800de28:	23a8      	movs	r3, #168	; 0xa8
 800de2a:	58d4      	ldr	r4, [r2, r3]
 800de2c:	4d73      	ldr	r5, [pc, #460]	; (800dffc <RemapAndLinkDMAtoUARTRx+0x360>)
 800de2e:	402c      	ands	r4, r5
 800de30:	50d4      	str	r4, [r2, r3]
 800de32:	58d5      	ldr	r5, [r2, r3]
 800de34:	24f0      	movs	r4, #240	; 0xf0
 800de36:	0124      	lsls	r4, r4, #4
 800de38:	432c      	orrs	r4, r5
 800de3a:	50d4      	str	r4, [r2, r3]
 800de3c:	e00e      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800de3e:	4a70      	ldr	r2, [pc, #448]	; (800e000 <RemapAndLinkDMAtoUARTRx+0x364>)
 800de40:	680c      	ldr	r4, [r1, #0]
 800de42:	4294      	cmp	r4, r2
 800de44:	d000      	beq.n	800de48 <RemapAndLinkDMAtoUARTRx+0x1ac>
 800de46:	e72f      	b.n	800dca8 <RemapAndLinkDMAtoUARTRx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800de48:	4a6e      	ldr	r2, [pc, #440]	; (800e004 <RemapAndLinkDMAtoUARTRx+0x368>)
 800de4a:	23a8      	movs	r3, #168	; 0xa8
 800de4c:	58d4      	ldr	r4, [r2, r3]
 800de4e:	250f      	movs	r5, #15
 800de50:	43ac      	bics	r4, r5
 800de52:	50d4      	str	r4, [r2, r3]
 800de54:	58d4      	ldr	r4, [r2, r3]
 800de56:	3d07      	subs	r5, #7
 800de58:	432c      	orrs	r4, r5
 800de5a:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800de5c:	6641      	str	r1, [r0, #100]	; 0x64
 800de5e:	6248      	str	r0, [r1, #36]	; 0x24
}
 800de60:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800de62:	4a69      	ldr	r2, [pc, #420]	; (800e008 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800de64:	680c      	ldr	r4, [r1, #0]
 800de66:	4294      	cmp	r4, r2
 800de68:	d000      	beq.n	800de6c <RemapAndLinkDMAtoUARTRx+0x1d0>
 800de6a:	e721      	b.n	800dcb0 <RemapAndLinkDMAtoUARTRx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800de6c:	4a65      	ldr	r2, [pc, #404]	; (800e004 <RemapAndLinkDMAtoUARTRx+0x368>)
 800de6e:	23a8      	movs	r3, #168	; 0xa8
 800de70:	58d4      	ldr	r4, [r2, r3]
 800de72:	4d62      	ldr	r5, [pc, #392]	; (800dffc <RemapAndLinkDMAtoUARTRx+0x360>)
 800de74:	402c      	ands	r4, r5
 800de76:	50d4      	str	r4, [r2, r3]
 800de78:	58d5      	ldr	r5, [r2, r3]
 800de7a:	2480      	movs	r4, #128	; 0x80
 800de7c:	0124      	lsls	r4, r4, #4
 800de7e:	432c      	orrs	r4, r5
 800de80:	50d4      	str	r4, [r2, r3]
 800de82:	e7eb      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800de84:	4a61      	ldr	r2, [pc, #388]	; (800e00c <RemapAndLinkDMAtoUARTRx+0x370>)
 800de86:	680c      	ldr	r4, [r1, #0]
 800de88:	4294      	cmp	r4, r2
 800de8a:	d000      	beq.n	800de8e <RemapAndLinkDMAtoUARTRx+0x1f2>
 800de8c:	e714      	b.n	800dcb8 <RemapAndLinkDMAtoUARTRx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800de8e:	4a5d      	ldr	r2, [pc, #372]	; (800e004 <RemapAndLinkDMAtoUARTRx+0x368>)
 800de90:	23a8      	movs	r3, #168	; 0xa8
 800de92:	58d4      	ldr	r4, [r2, r3]
 800de94:	4d5e      	ldr	r5, [pc, #376]	; (800e010 <RemapAndLinkDMAtoUARTRx+0x374>)
 800de96:	402c      	ands	r4, r5
 800de98:	50d4      	str	r4, [r2, r3]
 800de9a:	58d5      	ldr	r5, [r2, r3]
 800de9c:	2480      	movs	r4, #128	; 0x80
 800de9e:	0324      	lsls	r4, r4, #12
 800dea0:	432c      	orrs	r4, r5
 800dea2:	50d4      	str	r4, [r2, r3]
 800dea4:	e7da      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800dea6:	4a5b      	ldr	r2, [pc, #364]	; (800e014 <RemapAndLinkDMAtoUARTRx+0x378>)
 800dea8:	680c      	ldr	r4, [r1, #0]
 800deaa:	4294      	cmp	r4, r2
 800deac:	d000      	beq.n	800deb0 <RemapAndLinkDMAtoUARTRx+0x214>
 800deae:	e707      	b.n	800dcc0 <RemapAndLinkDMAtoUARTRx+0x24>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800deb0:	4a54      	ldr	r2, [pc, #336]	; (800e004 <RemapAndLinkDMAtoUARTRx+0x368>)
 800deb2:	23a8      	movs	r3, #168	; 0xa8
 800deb4:	58d4      	ldr	r4, [r2, r3]
 800deb6:	4d58      	ldr	r5, [pc, #352]	; (800e018 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800deb8:	402c      	ands	r4, r5
 800deba:	50d4      	str	r4, [r2, r3]
 800debc:	58d5      	ldr	r5, [r2, r3]
 800debe:	2480      	movs	r4, #128	; 0x80
 800dec0:	0424      	lsls	r4, r4, #16
 800dec2:	432c      	orrs	r4, r5
 800dec4:	50d4      	str	r4, [r2, r3]
 800dec6:	e7c9      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800dec8:	4a54      	ldr	r2, [pc, #336]	; (800e01c <RemapAndLinkDMAtoUARTRx+0x380>)
 800deca:	680c      	ldr	r4, [r1, #0]
 800decc:	4294      	cmp	r4, r2
 800dece:	d000      	beq.n	800ded2 <RemapAndLinkDMAtoUARTRx+0x236>
 800ded0:	e6fa      	b.n	800dcc8 <RemapAndLinkDMAtoUARTRx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800ded2:	4a49      	ldr	r2, [pc, #292]	; (800dff8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ded4:	23a8      	movs	r3, #168	; 0xa8
 800ded6:	58d4      	ldr	r4, [r2, r3]
 800ded8:	25f0      	movs	r5, #240	; 0xf0
 800deda:	43ac      	bics	r4, r5
 800dedc:	50d4      	str	r4, [r2, r3]
 800dede:	58d4      	ldr	r4, [r2, r3]
 800dee0:	3d70      	subs	r5, #112	; 0x70
 800dee2:	432c      	orrs	r4, r5
 800dee4:	50d4      	str	r4, [r2, r3]
 800dee6:	e7b9      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800dee8:	4a42      	ldr	r2, [pc, #264]	; (800dff4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800deea:	680c      	ldr	r4, [r1, #0]
 800deec:	4294      	cmp	r4, r2
 800deee:	d000      	beq.n	800def2 <RemapAndLinkDMAtoUARTRx+0x256>
 800def0:	e6ee      	b.n	800dcd0 <RemapAndLinkDMAtoUARTRx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800def2:	4a41      	ldr	r2, [pc, #260]	; (800dff8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800def4:	23a8      	movs	r3, #168	; 0xa8
 800def6:	58d4      	ldr	r4, [r2, r3]
 800def8:	4d40      	ldr	r5, [pc, #256]	; (800dffc <RemapAndLinkDMAtoUARTRx+0x360>)
 800defa:	402c      	ands	r4, r5
 800defc:	50d4      	str	r4, [r2, r3]
 800defe:	58d5      	ldr	r5, [r2, r3]
 800df00:	2480      	movs	r4, #128	; 0x80
 800df02:	0124      	lsls	r4, r4, #4
 800df04:	432c      	orrs	r4, r5
 800df06:	50d4      	str	r4, [r2, r3]
 800df08:	e7a8      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800df0a:	4a3d      	ldr	r2, [pc, #244]	; (800e000 <RemapAndLinkDMAtoUARTRx+0x364>)
 800df0c:	680c      	ldr	r4, [r1, #0]
 800df0e:	4294      	cmp	r4, r2
 800df10:	d000      	beq.n	800df14 <RemapAndLinkDMAtoUARTRx+0x278>
 800df12:	e6e1      	b.n	800dcd8 <RemapAndLinkDMAtoUARTRx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800df14:	4a3b      	ldr	r2, [pc, #236]	; (800e004 <RemapAndLinkDMAtoUARTRx+0x368>)
 800df16:	23a8      	movs	r3, #168	; 0xa8
 800df18:	58d4      	ldr	r4, [r2, r3]
 800df1a:	250f      	movs	r5, #15
 800df1c:	43ac      	bics	r4, r5
 800df1e:	50d4      	str	r4, [r2, r3]
 800df20:	58d4      	ldr	r4, [r2, r3]
 800df22:	3d06      	subs	r5, #6
 800df24:	432c      	orrs	r4, r5
 800df26:	50d4      	str	r4, [r2, r3]
 800df28:	e798      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800df2a:	4a37      	ldr	r2, [pc, #220]	; (800e008 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800df2c:	680c      	ldr	r4, [r1, #0]
 800df2e:	4294      	cmp	r4, r2
 800df30:	d000      	beq.n	800df34 <RemapAndLinkDMAtoUARTRx+0x298>
 800df32:	e6d5      	b.n	800dce0 <RemapAndLinkDMAtoUARTRx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800df34:	4a33      	ldr	r2, [pc, #204]	; (800e004 <RemapAndLinkDMAtoUARTRx+0x368>)
 800df36:	23a8      	movs	r3, #168	; 0xa8
 800df38:	58d4      	ldr	r4, [r2, r3]
 800df3a:	4d30      	ldr	r5, [pc, #192]	; (800dffc <RemapAndLinkDMAtoUARTRx+0x360>)
 800df3c:	402c      	ands	r4, r5
 800df3e:	50d4      	str	r4, [r2, r3]
 800df40:	58d5      	ldr	r5, [r2, r3]
 800df42:	2490      	movs	r4, #144	; 0x90
 800df44:	0124      	lsls	r4, r4, #4
 800df46:	432c      	orrs	r4, r5
 800df48:	50d4      	str	r4, [r2, r3]
 800df4a:	e787      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800df4c:	4a2f      	ldr	r2, [pc, #188]	; (800e00c <RemapAndLinkDMAtoUARTRx+0x370>)
 800df4e:	680c      	ldr	r4, [r1, #0]
 800df50:	4294      	cmp	r4, r2
 800df52:	d000      	beq.n	800df56 <RemapAndLinkDMAtoUARTRx+0x2ba>
 800df54:	e6c8      	b.n	800dce8 <RemapAndLinkDMAtoUARTRx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800df56:	4a2b      	ldr	r2, [pc, #172]	; (800e004 <RemapAndLinkDMAtoUARTRx+0x368>)
 800df58:	23a8      	movs	r3, #168	; 0xa8
 800df5a:	58d4      	ldr	r4, [r2, r3]
 800df5c:	4d2c      	ldr	r5, [pc, #176]	; (800e010 <RemapAndLinkDMAtoUARTRx+0x374>)
 800df5e:	402c      	ands	r4, r5
 800df60:	50d4      	str	r4, [r2, r3]
 800df62:	58d5      	ldr	r5, [r2, r3]
 800df64:	2490      	movs	r4, #144	; 0x90
 800df66:	0324      	lsls	r4, r4, #12
 800df68:	432c      	orrs	r4, r5
 800df6a:	50d4      	str	r4, [r2, r3]
 800df6c:	e776      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800df6e:	4a29      	ldr	r2, [pc, #164]	; (800e014 <RemapAndLinkDMAtoUARTRx+0x378>)
 800df70:	680c      	ldr	r4, [r1, #0]
 800df72:	4294      	cmp	r4, r2
 800df74:	d000      	beq.n	800df78 <RemapAndLinkDMAtoUARTRx+0x2dc>
 800df76:	e6bb      	b.n	800dcf0 <RemapAndLinkDMAtoUARTRx+0x54>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800df78:	4a22      	ldr	r2, [pc, #136]	; (800e004 <RemapAndLinkDMAtoUARTRx+0x368>)
 800df7a:	23a8      	movs	r3, #168	; 0xa8
 800df7c:	58d4      	ldr	r4, [r2, r3]
 800df7e:	4d26      	ldr	r5, [pc, #152]	; (800e018 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800df80:	402c      	ands	r4, r5
 800df82:	50d4      	str	r4, [r2, r3]
 800df84:	58d5      	ldr	r5, [r2, r3]
 800df86:	2490      	movs	r4, #144	; 0x90
 800df88:	0424      	lsls	r4, r4, #16
 800df8a:	432c      	orrs	r4, r5
 800df8c:	50d4      	str	r4, [r2, r3]
 800df8e:	e765      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800df90:	4a22      	ldr	r2, [pc, #136]	; (800e01c <RemapAndLinkDMAtoUARTRx+0x380>)
 800df92:	680c      	ldr	r4, [r1, #0]
 800df94:	4294      	cmp	r4, r2
 800df96:	d000      	beq.n	800df9a <RemapAndLinkDMAtoUARTRx+0x2fe>
 800df98:	e6ae      	b.n	800dcf8 <RemapAndLinkDMAtoUARTRx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800df9a:	4a17      	ldr	r2, [pc, #92]	; (800dff8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800df9c:	23a8      	movs	r3, #168	; 0xa8
 800df9e:	58d4      	ldr	r4, [r2, r3]
 800dfa0:	25f0      	movs	r5, #240	; 0xf0
 800dfa2:	43ac      	bics	r4, r5
 800dfa4:	50d4      	str	r4, [r2, r3]
 800dfa6:	58d4      	ldr	r4, [r2, r3]
 800dfa8:	3d60      	subs	r5, #96	; 0x60
 800dfaa:	432c      	orrs	r4, r5
 800dfac:	50d4      	str	r4, [r2, r3]
 800dfae:	e755      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800dfb0:	4a10      	ldr	r2, [pc, #64]	; (800dff4 <RemapAndLinkDMAtoUARTRx+0x358>)
 800dfb2:	680c      	ldr	r4, [r1, #0]
 800dfb4:	4294      	cmp	r4, r2
 800dfb6:	d000      	beq.n	800dfba <RemapAndLinkDMAtoUARTRx+0x31e>
 800dfb8:	e6a2      	b.n	800dd00 <RemapAndLinkDMAtoUARTRx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800dfba:	4a0f      	ldr	r2, [pc, #60]	; (800dff8 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800dfbc:	23a8      	movs	r3, #168	; 0xa8
 800dfbe:	58d4      	ldr	r4, [r2, r3]
 800dfc0:	4d0e      	ldr	r5, [pc, #56]	; (800dffc <RemapAndLinkDMAtoUARTRx+0x360>)
 800dfc2:	402c      	ands	r4, r5
 800dfc4:	50d4      	str	r4, [r2, r3]
 800dfc6:	58d5      	ldr	r5, [r2, r3]
 800dfc8:	2490      	movs	r4, #144	; 0x90
 800dfca:	0124      	lsls	r4, r4, #4
 800dfcc:	432c      	orrs	r4, r5
 800dfce:	50d4      	str	r4, [r2, r3]
 800dfd0:	e744      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
 800dfd2:	46c0      	nop			; (mov r8, r8)
 800dfd4:	40013800 	.word	0x40013800
 800dfd8:	40004400 	.word	0x40004400
 800dfdc:	40004800 	.word	0x40004800
 800dfe0:	40004c00 	.word	0x40004c00
 800dfe4:	40005000 	.word	0x40005000
 800dfe8:	40011400 	.word	0x40011400
 800dfec:	40011800 	.word	0x40011800
 800dff0:	40011c00 	.word	0x40011c00
 800dff4:	40020430 	.word	0x40020430
 800dff8:	40020400 	.word	0x40020400
 800dffc:	fffff0ff 	.word	0xfffff0ff
 800e000:	40020008 	.word	0x40020008
 800e004:	40020000 	.word	0x40020000
 800e008:	40020030 	.word	0x40020030
 800e00c:	40020058 	.word	0x40020058
 800e010:	fff0ffff 	.word	0xfff0ffff
 800e014:	4002006c 	.word	0x4002006c
 800e018:	ff0fffff 	.word	0xff0fffff
 800e01c:	4002041c 	.word	0x4002041c
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800e020:	4ae0      	ldr	r2, [pc, #896]	; (800e3a4 <RemapAndLinkDMAtoUARTRx+0x708>)
 800e022:	680c      	ldr	r4, [r1, #0]
 800e024:	4294      	cmp	r4, r2
 800e026:	d000      	beq.n	800e02a <RemapAndLinkDMAtoUARTRx+0x38e>
 800e028:	e66e      	b.n	800dd08 <RemapAndLinkDMAtoUARTRx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800e02a:	4adf      	ldr	r2, [pc, #892]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e02c:	23a8      	movs	r3, #168	; 0xa8
 800e02e:	58d4      	ldr	r4, [r2, r3]
 800e030:	250f      	movs	r5, #15
 800e032:	43ac      	bics	r4, r5
 800e034:	50d4      	str	r4, [r2, r3]
 800e036:	58d4      	ldr	r4, [r2, r3]
 800e038:	3d05      	subs	r5, #5
 800e03a:	432c      	orrs	r4, r5
 800e03c:	50d4      	str	r4, [r2, r3]
 800e03e:	e70d      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800e040:	4ada      	ldr	r2, [pc, #872]	; (800e3ac <RemapAndLinkDMAtoUARTRx+0x710>)
 800e042:	680c      	ldr	r4, [r1, #0]
 800e044:	4294      	cmp	r4, r2
 800e046:	d000      	beq.n	800e04a <RemapAndLinkDMAtoUARTRx+0x3ae>
 800e048:	e662      	b.n	800dd10 <RemapAndLinkDMAtoUARTRx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800e04a:	4ad7      	ldr	r2, [pc, #860]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e04c:	23a8      	movs	r3, #168	; 0xa8
 800e04e:	58d4      	ldr	r4, [r2, r3]
 800e050:	4dd7      	ldr	r5, [pc, #860]	; (800e3b0 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e052:	402c      	ands	r4, r5
 800e054:	50d4      	str	r4, [r2, r3]
 800e056:	58d5      	ldr	r5, [r2, r3]
 800e058:	24a0      	movs	r4, #160	; 0xa0
 800e05a:	0124      	lsls	r4, r4, #4
 800e05c:	432c      	orrs	r4, r5
 800e05e:	50d4      	str	r4, [r2, r3]
 800e060:	e6fc      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800e062:	4ad4      	ldr	r2, [pc, #848]	; (800e3b4 <RemapAndLinkDMAtoUARTRx+0x718>)
 800e064:	680c      	ldr	r4, [r1, #0]
 800e066:	4294      	cmp	r4, r2
 800e068:	d000      	beq.n	800e06c <RemapAndLinkDMAtoUARTRx+0x3d0>
 800e06a:	e655      	b.n	800dd18 <RemapAndLinkDMAtoUARTRx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800e06c:	4ace      	ldr	r2, [pc, #824]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e06e:	23a8      	movs	r3, #168	; 0xa8
 800e070:	58d4      	ldr	r4, [r2, r3]
 800e072:	4dd1      	ldr	r5, [pc, #836]	; (800e3b8 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800e074:	402c      	ands	r4, r5
 800e076:	50d4      	str	r4, [r2, r3]
 800e078:	58d5      	ldr	r5, [r2, r3]
 800e07a:	24a0      	movs	r4, #160	; 0xa0
 800e07c:	0324      	lsls	r4, r4, #12
 800e07e:	432c      	orrs	r4, r5
 800e080:	50d4      	str	r4, [r2, r3]
 800e082:	e6eb      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800e084:	4acd      	ldr	r2, [pc, #820]	; (800e3bc <RemapAndLinkDMAtoUARTRx+0x720>)
 800e086:	680c      	ldr	r4, [r1, #0]
 800e088:	4294      	cmp	r4, r2
 800e08a:	d000      	beq.n	800e08e <RemapAndLinkDMAtoUARTRx+0x3f2>
 800e08c:	e648      	b.n	800dd20 <RemapAndLinkDMAtoUARTRx+0x84>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800e08e:	4ac6      	ldr	r2, [pc, #792]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e090:	23a8      	movs	r3, #168	; 0xa8
 800e092:	58d4      	ldr	r4, [r2, r3]
 800e094:	4dca      	ldr	r5, [pc, #808]	; (800e3c0 <RemapAndLinkDMAtoUARTRx+0x724>)
 800e096:	402c      	ands	r4, r5
 800e098:	50d4      	str	r4, [r2, r3]
 800e09a:	58d5      	ldr	r5, [r2, r3]
 800e09c:	24a0      	movs	r4, #160	; 0xa0
 800e09e:	0424      	lsls	r4, r4, #16
 800e0a0:	432c      	orrs	r4, r5
 800e0a2:	50d4      	str	r4, [r2, r3]
 800e0a4:	e6da      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800e0a6:	4ac7      	ldr	r2, [pc, #796]	; (800e3c4 <RemapAndLinkDMAtoUARTRx+0x728>)
 800e0a8:	680c      	ldr	r4, [r1, #0]
 800e0aa:	4294      	cmp	r4, r2
 800e0ac:	d000      	beq.n	800e0b0 <RemapAndLinkDMAtoUARTRx+0x414>
 800e0ae:	e63b      	b.n	800dd28 <RemapAndLinkDMAtoUARTRx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800e0b0:	4ac5      	ldr	r2, [pc, #788]	; (800e3c8 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e0b2:	23a8      	movs	r3, #168	; 0xa8
 800e0b4:	58d4      	ldr	r4, [r2, r3]
 800e0b6:	25f0      	movs	r5, #240	; 0xf0
 800e0b8:	43ac      	bics	r4, r5
 800e0ba:	50d4      	str	r4, [r2, r3]
 800e0bc:	58d4      	ldr	r4, [r2, r3]
 800e0be:	3d50      	subs	r5, #80	; 0x50
 800e0c0:	432c      	orrs	r4, r5
 800e0c2:	50d4      	str	r4, [r2, r3]
 800e0c4:	e6ca      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800e0c6:	4ac1      	ldr	r2, [pc, #772]	; (800e3cc <RemapAndLinkDMAtoUARTRx+0x730>)
 800e0c8:	680c      	ldr	r4, [r1, #0]
 800e0ca:	4294      	cmp	r4, r2
 800e0cc:	d000      	beq.n	800e0d0 <RemapAndLinkDMAtoUARTRx+0x434>
 800e0ce:	e62f      	b.n	800dd30 <RemapAndLinkDMAtoUARTRx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800e0d0:	4abd      	ldr	r2, [pc, #756]	; (800e3c8 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e0d2:	23a8      	movs	r3, #168	; 0xa8
 800e0d4:	58d4      	ldr	r4, [r2, r3]
 800e0d6:	4db6      	ldr	r5, [pc, #728]	; (800e3b0 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e0d8:	402c      	ands	r4, r5
 800e0da:	50d4      	str	r4, [r2, r3]
 800e0dc:	58d5      	ldr	r5, [r2, r3]
 800e0de:	24a0      	movs	r4, #160	; 0xa0
 800e0e0:	0124      	lsls	r4, r4, #4
 800e0e2:	432c      	orrs	r4, r5
 800e0e4:	50d4      	str	r4, [r2, r3]
 800e0e6:	e6b9      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800e0e8:	4aae      	ldr	r2, [pc, #696]	; (800e3a4 <RemapAndLinkDMAtoUARTRx+0x708>)
 800e0ea:	680c      	ldr	r4, [r1, #0]
 800e0ec:	4294      	cmp	r4, r2
 800e0ee:	d000      	beq.n	800e0f2 <RemapAndLinkDMAtoUARTRx+0x456>
 800e0f0:	e622      	b.n	800dd38 <RemapAndLinkDMAtoUARTRx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800e0f2:	4aad      	ldr	r2, [pc, #692]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e0f4:	23a8      	movs	r3, #168	; 0xa8
 800e0f6:	58d4      	ldr	r4, [r2, r3]
 800e0f8:	250f      	movs	r5, #15
 800e0fa:	43ac      	bics	r4, r5
 800e0fc:	50d4      	str	r4, [r2, r3]
 800e0fe:	58d4      	ldr	r4, [r2, r3]
 800e100:	3d04      	subs	r5, #4
 800e102:	432c      	orrs	r4, r5
 800e104:	50d4      	str	r4, [r2, r3]
 800e106:	e6a9      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800e108:	4aa8      	ldr	r2, [pc, #672]	; (800e3ac <RemapAndLinkDMAtoUARTRx+0x710>)
 800e10a:	680c      	ldr	r4, [r1, #0]
 800e10c:	4294      	cmp	r4, r2
 800e10e:	d000      	beq.n	800e112 <RemapAndLinkDMAtoUARTRx+0x476>
 800e110:	e616      	b.n	800dd40 <RemapAndLinkDMAtoUARTRx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800e112:	4aa5      	ldr	r2, [pc, #660]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e114:	23a8      	movs	r3, #168	; 0xa8
 800e116:	58d4      	ldr	r4, [r2, r3]
 800e118:	4da5      	ldr	r5, [pc, #660]	; (800e3b0 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e11a:	402c      	ands	r4, r5
 800e11c:	50d4      	str	r4, [r2, r3]
 800e11e:	58d5      	ldr	r5, [r2, r3]
 800e120:	24b0      	movs	r4, #176	; 0xb0
 800e122:	0124      	lsls	r4, r4, #4
 800e124:	432c      	orrs	r4, r5
 800e126:	50d4      	str	r4, [r2, r3]
 800e128:	e698      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800e12a:	4aa2      	ldr	r2, [pc, #648]	; (800e3b4 <RemapAndLinkDMAtoUARTRx+0x718>)
 800e12c:	680c      	ldr	r4, [r1, #0]
 800e12e:	4294      	cmp	r4, r2
 800e130:	d000      	beq.n	800e134 <RemapAndLinkDMAtoUARTRx+0x498>
 800e132:	e609      	b.n	800dd48 <RemapAndLinkDMAtoUARTRx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800e134:	4a9c      	ldr	r2, [pc, #624]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e136:	23a8      	movs	r3, #168	; 0xa8
 800e138:	58d4      	ldr	r4, [r2, r3]
 800e13a:	4d9f      	ldr	r5, [pc, #636]	; (800e3b8 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800e13c:	402c      	ands	r4, r5
 800e13e:	50d4      	str	r4, [r2, r3]
 800e140:	58d5      	ldr	r5, [r2, r3]
 800e142:	24b0      	movs	r4, #176	; 0xb0
 800e144:	0324      	lsls	r4, r4, #12
 800e146:	432c      	orrs	r4, r5
 800e148:	50d4      	str	r4, [r2, r3]
 800e14a:	e687      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800e14c:	4a9b      	ldr	r2, [pc, #620]	; (800e3bc <RemapAndLinkDMAtoUARTRx+0x720>)
 800e14e:	680c      	ldr	r4, [r1, #0]
 800e150:	4294      	cmp	r4, r2
 800e152:	d000      	beq.n	800e156 <RemapAndLinkDMAtoUARTRx+0x4ba>
 800e154:	e5fc      	b.n	800dd50 <RemapAndLinkDMAtoUARTRx+0xb4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800e156:	4a94      	ldr	r2, [pc, #592]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e158:	23a8      	movs	r3, #168	; 0xa8
 800e15a:	58d4      	ldr	r4, [r2, r3]
 800e15c:	4d98      	ldr	r5, [pc, #608]	; (800e3c0 <RemapAndLinkDMAtoUARTRx+0x724>)
 800e15e:	402c      	ands	r4, r5
 800e160:	50d4      	str	r4, [r2, r3]
 800e162:	58d5      	ldr	r5, [r2, r3]
 800e164:	24b0      	movs	r4, #176	; 0xb0
 800e166:	0424      	lsls	r4, r4, #16
 800e168:	432c      	orrs	r4, r5
 800e16a:	50d4      	str	r4, [r2, r3]
 800e16c:	e676      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800e16e:	4a95      	ldr	r2, [pc, #596]	; (800e3c4 <RemapAndLinkDMAtoUARTRx+0x728>)
 800e170:	680c      	ldr	r4, [r1, #0]
 800e172:	4294      	cmp	r4, r2
 800e174:	d000      	beq.n	800e178 <RemapAndLinkDMAtoUARTRx+0x4dc>
 800e176:	e5ef      	b.n	800dd58 <RemapAndLinkDMAtoUARTRx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800e178:	4a93      	ldr	r2, [pc, #588]	; (800e3c8 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e17a:	23a8      	movs	r3, #168	; 0xa8
 800e17c:	58d4      	ldr	r4, [r2, r3]
 800e17e:	25f0      	movs	r5, #240	; 0xf0
 800e180:	43ac      	bics	r4, r5
 800e182:	50d4      	str	r4, [r2, r3]
 800e184:	58d4      	ldr	r4, [r2, r3]
 800e186:	3d40      	subs	r5, #64	; 0x40
 800e188:	432c      	orrs	r4, r5
 800e18a:	50d4      	str	r4, [r2, r3]
 800e18c:	e666      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800e18e:	4a8f      	ldr	r2, [pc, #572]	; (800e3cc <RemapAndLinkDMAtoUARTRx+0x730>)
 800e190:	680c      	ldr	r4, [r1, #0]
 800e192:	4294      	cmp	r4, r2
 800e194:	d000      	beq.n	800e198 <RemapAndLinkDMAtoUARTRx+0x4fc>
 800e196:	e5e3      	b.n	800dd60 <RemapAndLinkDMAtoUARTRx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800e198:	4a8b      	ldr	r2, [pc, #556]	; (800e3c8 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e19a:	23a8      	movs	r3, #168	; 0xa8
 800e19c:	58d4      	ldr	r4, [r2, r3]
 800e19e:	4d84      	ldr	r5, [pc, #528]	; (800e3b0 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e1a0:	402c      	ands	r4, r5
 800e1a2:	50d4      	str	r4, [r2, r3]
 800e1a4:	58d5      	ldr	r5, [r2, r3]
 800e1a6:	24b0      	movs	r4, #176	; 0xb0
 800e1a8:	0124      	lsls	r4, r4, #4
 800e1aa:	432c      	orrs	r4, r5
 800e1ac:	50d4      	str	r4, [r2, r3]
 800e1ae:	e655      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800e1b0:	4a7c      	ldr	r2, [pc, #496]	; (800e3a4 <RemapAndLinkDMAtoUARTRx+0x708>)
 800e1b2:	680c      	ldr	r4, [r1, #0]
 800e1b4:	4294      	cmp	r4, r2
 800e1b6:	d000      	beq.n	800e1ba <RemapAndLinkDMAtoUARTRx+0x51e>
 800e1b8:	e5d6      	b.n	800dd68 <RemapAndLinkDMAtoUARTRx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800e1ba:	4a7b      	ldr	r2, [pc, #492]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e1bc:	23a8      	movs	r3, #168	; 0xa8
 800e1be:	58d4      	ldr	r4, [r2, r3]
 800e1c0:	250f      	movs	r5, #15
 800e1c2:	43ac      	bics	r4, r5
 800e1c4:	50d4      	str	r4, [r2, r3]
 800e1c6:	58d4      	ldr	r4, [r2, r3]
 800e1c8:	3d03      	subs	r5, #3
 800e1ca:	432c      	orrs	r4, r5
 800e1cc:	50d4      	str	r4, [r2, r3]
 800e1ce:	e645      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800e1d0:	4a76      	ldr	r2, [pc, #472]	; (800e3ac <RemapAndLinkDMAtoUARTRx+0x710>)
 800e1d2:	680c      	ldr	r4, [r1, #0]
 800e1d4:	4294      	cmp	r4, r2
 800e1d6:	d000      	beq.n	800e1da <RemapAndLinkDMAtoUARTRx+0x53e>
 800e1d8:	e5ca      	b.n	800dd70 <RemapAndLinkDMAtoUARTRx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800e1da:	4a73      	ldr	r2, [pc, #460]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e1dc:	23a8      	movs	r3, #168	; 0xa8
 800e1de:	58d4      	ldr	r4, [r2, r3]
 800e1e0:	4d73      	ldr	r5, [pc, #460]	; (800e3b0 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e1e2:	402c      	ands	r4, r5
 800e1e4:	50d4      	str	r4, [r2, r3]
 800e1e6:	58d5      	ldr	r5, [r2, r3]
 800e1e8:	24c0      	movs	r4, #192	; 0xc0
 800e1ea:	0124      	lsls	r4, r4, #4
 800e1ec:	432c      	orrs	r4, r5
 800e1ee:	50d4      	str	r4, [r2, r3]
 800e1f0:	e634      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800e1f2:	4a70      	ldr	r2, [pc, #448]	; (800e3b4 <RemapAndLinkDMAtoUARTRx+0x718>)
 800e1f4:	680c      	ldr	r4, [r1, #0]
 800e1f6:	4294      	cmp	r4, r2
 800e1f8:	d000      	beq.n	800e1fc <RemapAndLinkDMAtoUARTRx+0x560>
 800e1fa:	e5bd      	b.n	800dd78 <RemapAndLinkDMAtoUARTRx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800e1fc:	4a6a      	ldr	r2, [pc, #424]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e1fe:	23a8      	movs	r3, #168	; 0xa8
 800e200:	58d4      	ldr	r4, [r2, r3]
 800e202:	4d6d      	ldr	r5, [pc, #436]	; (800e3b8 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800e204:	402c      	ands	r4, r5
 800e206:	50d4      	str	r4, [r2, r3]
 800e208:	58d5      	ldr	r5, [r2, r3]
 800e20a:	24c0      	movs	r4, #192	; 0xc0
 800e20c:	0324      	lsls	r4, r4, #12
 800e20e:	432c      	orrs	r4, r5
 800e210:	50d4      	str	r4, [r2, r3]
 800e212:	e623      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800e214:	4a69      	ldr	r2, [pc, #420]	; (800e3bc <RemapAndLinkDMAtoUARTRx+0x720>)
 800e216:	680c      	ldr	r4, [r1, #0]
 800e218:	4294      	cmp	r4, r2
 800e21a:	d000      	beq.n	800e21e <RemapAndLinkDMAtoUARTRx+0x582>
 800e21c:	e5b0      	b.n	800dd80 <RemapAndLinkDMAtoUARTRx+0xe4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800e21e:	4a62      	ldr	r2, [pc, #392]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e220:	23a8      	movs	r3, #168	; 0xa8
 800e222:	58d4      	ldr	r4, [r2, r3]
 800e224:	4d66      	ldr	r5, [pc, #408]	; (800e3c0 <RemapAndLinkDMAtoUARTRx+0x724>)
 800e226:	402c      	ands	r4, r5
 800e228:	50d4      	str	r4, [r2, r3]
 800e22a:	58d5      	ldr	r5, [r2, r3]
 800e22c:	24c0      	movs	r4, #192	; 0xc0
 800e22e:	0424      	lsls	r4, r4, #16
 800e230:	432c      	orrs	r4, r5
 800e232:	50d4      	str	r4, [r2, r3]
 800e234:	e612      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800e236:	4a63      	ldr	r2, [pc, #396]	; (800e3c4 <RemapAndLinkDMAtoUARTRx+0x728>)
 800e238:	680c      	ldr	r4, [r1, #0]
 800e23a:	4294      	cmp	r4, r2
 800e23c:	d000      	beq.n	800e240 <RemapAndLinkDMAtoUARTRx+0x5a4>
 800e23e:	e5a3      	b.n	800dd88 <RemapAndLinkDMAtoUARTRx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800e240:	4a61      	ldr	r2, [pc, #388]	; (800e3c8 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e242:	23a8      	movs	r3, #168	; 0xa8
 800e244:	58d4      	ldr	r4, [r2, r3]
 800e246:	25f0      	movs	r5, #240	; 0xf0
 800e248:	43ac      	bics	r4, r5
 800e24a:	50d4      	str	r4, [r2, r3]
 800e24c:	58d4      	ldr	r4, [r2, r3]
 800e24e:	3d30      	subs	r5, #48	; 0x30
 800e250:	432c      	orrs	r4, r5
 800e252:	50d4      	str	r4, [r2, r3]
 800e254:	e602      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800e256:	4a5d      	ldr	r2, [pc, #372]	; (800e3cc <RemapAndLinkDMAtoUARTRx+0x730>)
 800e258:	680c      	ldr	r4, [r1, #0]
 800e25a:	4294      	cmp	r4, r2
 800e25c:	d000      	beq.n	800e260 <RemapAndLinkDMAtoUARTRx+0x5c4>
 800e25e:	e597      	b.n	800dd90 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800e260:	4a59      	ldr	r2, [pc, #356]	; (800e3c8 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e262:	23a8      	movs	r3, #168	; 0xa8
 800e264:	58d4      	ldr	r4, [r2, r3]
 800e266:	4d52      	ldr	r5, [pc, #328]	; (800e3b0 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e268:	402c      	ands	r4, r5
 800e26a:	50d4      	str	r4, [r2, r3]
 800e26c:	58d5      	ldr	r5, [r2, r3]
 800e26e:	24c0      	movs	r4, #192	; 0xc0
 800e270:	0124      	lsls	r4, r4, #4
 800e272:	432c      	orrs	r4, r5
 800e274:	50d4      	str	r4, [r2, r3]
 800e276:	e5f1      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800e278:	4a4a      	ldr	r2, [pc, #296]	; (800e3a4 <RemapAndLinkDMAtoUARTRx+0x708>)
 800e27a:	680c      	ldr	r4, [r1, #0]
 800e27c:	4294      	cmp	r4, r2
 800e27e:	d000      	beq.n	800e282 <RemapAndLinkDMAtoUARTRx+0x5e6>
 800e280:	e58a      	b.n	800dd98 <RemapAndLinkDMAtoUARTRx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800e282:	4a49      	ldr	r2, [pc, #292]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e284:	23a8      	movs	r3, #168	; 0xa8
 800e286:	58d4      	ldr	r4, [r2, r3]
 800e288:	250f      	movs	r5, #15
 800e28a:	43ac      	bics	r4, r5
 800e28c:	50d4      	str	r4, [r2, r3]
 800e28e:	58d4      	ldr	r4, [r2, r3]
 800e290:	3d02      	subs	r5, #2
 800e292:	432c      	orrs	r4, r5
 800e294:	50d4      	str	r4, [r2, r3]
 800e296:	e5e1      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800e298:	4a44      	ldr	r2, [pc, #272]	; (800e3ac <RemapAndLinkDMAtoUARTRx+0x710>)
 800e29a:	680c      	ldr	r4, [r1, #0]
 800e29c:	4294      	cmp	r4, r2
 800e29e:	d000      	beq.n	800e2a2 <RemapAndLinkDMAtoUARTRx+0x606>
 800e2a0:	e57e      	b.n	800dda0 <RemapAndLinkDMAtoUARTRx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800e2a2:	4a41      	ldr	r2, [pc, #260]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e2a4:	23a8      	movs	r3, #168	; 0xa8
 800e2a6:	58d4      	ldr	r4, [r2, r3]
 800e2a8:	4d41      	ldr	r5, [pc, #260]	; (800e3b0 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e2aa:	402c      	ands	r4, r5
 800e2ac:	50d4      	str	r4, [r2, r3]
 800e2ae:	58d5      	ldr	r5, [r2, r3]
 800e2b0:	24d0      	movs	r4, #208	; 0xd0
 800e2b2:	0124      	lsls	r4, r4, #4
 800e2b4:	432c      	orrs	r4, r5
 800e2b6:	50d4      	str	r4, [r2, r3]
 800e2b8:	e5d0      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800e2ba:	4a3e      	ldr	r2, [pc, #248]	; (800e3b4 <RemapAndLinkDMAtoUARTRx+0x718>)
 800e2bc:	680c      	ldr	r4, [r1, #0]
 800e2be:	4294      	cmp	r4, r2
 800e2c0:	d000      	beq.n	800e2c4 <RemapAndLinkDMAtoUARTRx+0x628>
 800e2c2:	e571      	b.n	800dda8 <RemapAndLinkDMAtoUARTRx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800e2c4:	4a38      	ldr	r2, [pc, #224]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e2c6:	23a8      	movs	r3, #168	; 0xa8
 800e2c8:	58d4      	ldr	r4, [r2, r3]
 800e2ca:	4d3b      	ldr	r5, [pc, #236]	; (800e3b8 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800e2cc:	402c      	ands	r4, r5
 800e2ce:	50d4      	str	r4, [r2, r3]
 800e2d0:	58d5      	ldr	r5, [r2, r3]
 800e2d2:	24d0      	movs	r4, #208	; 0xd0
 800e2d4:	0324      	lsls	r4, r4, #12
 800e2d6:	432c      	orrs	r4, r5
 800e2d8:	50d4      	str	r4, [r2, r3]
 800e2da:	e5bf      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800e2dc:	4a37      	ldr	r2, [pc, #220]	; (800e3bc <RemapAndLinkDMAtoUARTRx+0x720>)
 800e2de:	680c      	ldr	r4, [r1, #0]
 800e2e0:	4294      	cmp	r4, r2
 800e2e2:	d000      	beq.n	800e2e6 <RemapAndLinkDMAtoUARTRx+0x64a>
 800e2e4:	e564      	b.n	800ddb0 <RemapAndLinkDMAtoUARTRx+0x114>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800e2e6:	4a30      	ldr	r2, [pc, #192]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e2e8:	23a8      	movs	r3, #168	; 0xa8
 800e2ea:	58d4      	ldr	r4, [r2, r3]
 800e2ec:	4d34      	ldr	r5, [pc, #208]	; (800e3c0 <RemapAndLinkDMAtoUARTRx+0x724>)
 800e2ee:	402c      	ands	r4, r5
 800e2f0:	50d4      	str	r4, [r2, r3]
 800e2f2:	58d5      	ldr	r5, [r2, r3]
 800e2f4:	24d0      	movs	r4, #208	; 0xd0
 800e2f6:	0424      	lsls	r4, r4, #16
 800e2f8:	432c      	orrs	r4, r5
 800e2fa:	50d4      	str	r4, [r2, r3]
 800e2fc:	e5ae      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800e2fe:	4a31      	ldr	r2, [pc, #196]	; (800e3c4 <RemapAndLinkDMAtoUARTRx+0x728>)
 800e300:	680c      	ldr	r4, [r1, #0]
 800e302:	4294      	cmp	r4, r2
 800e304:	d000      	beq.n	800e308 <RemapAndLinkDMAtoUARTRx+0x66c>
 800e306:	e557      	b.n	800ddb8 <RemapAndLinkDMAtoUARTRx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800e308:	4a2f      	ldr	r2, [pc, #188]	; (800e3c8 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e30a:	23a8      	movs	r3, #168	; 0xa8
 800e30c:	58d4      	ldr	r4, [r2, r3]
 800e30e:	25f0      	movs	r5, #240	; 0xf0
 800e310:	43ac      	bics	r4, r5
 800e312:	50d4      	str	r4, [r2, r3]
 800e314:	58d4      	ldr	r4, [r2, r3]
 800e316:	3d20      	subs	r5, #32
 800e318:	432c      	orrs	r4, r5
 800e31a:	50d4      	str	r4, [r2, r3]
 800e31c:	e59e      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800e31e:	4a2b      	ldr	r2, [pc, #172]	; (800e3cc <RemapAndLinkDMAtoUARTRx+0x730>)
 800e320:	680c      	ldr	r4, [r1, #0]
 800e322:	4294      	cmp	r4, r2
 800e324:	d000      	beq.n	800e328 <RemapAndLinkDMAtoUARTRx+0x68c>
 800e326:	e54b      	b.n	800ddc0 <RemapAndLinkDMAtoUARTRx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800e328:	4a27      	ldr	r2, [pc, #156]	; (800e3c8 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e32a:	23a8      	movs	r3, #168	; 0xa8
 800e32c:	58d4      	ldr	r4, [r2, r3]
 800e32e:	4d20      	ldr	r5, [pc, #128]	; (800e3b0 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e330:	402c      	ands	r4, r5
 800e332:	50d4      	str	r4, [r2, r3]
 800e334:	58d5      	ldr	r5, [r2, r3]
 800e336:	24d0      	movs	r4, #208	; 0xd0
 800e338:	0124      	lsls	r4, r4, #4
 800e33a:	432c      	orrs	r4, r5
 800e33c:	50d4      	str	r4, [r2, r3]
 800e33e:	e58d      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800e340:	4a18      	ldr	r2, [pc, #96]	; (800e3a4 <RemapAndLinkDMAtoUARTRx+0x708>)
 800e342:	680c      	ldr	r4, [r1, #0]
 800e344:	4294      	cmp	r4, r2
 800e346:	d000      	beq.n	800e34a <RemapAndLinkDMAtoUARTRx+0x6ae>
 800e348:	e53e      	b.n	800ddc8 <RemapAndLinkDMAtoUARTRx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800e34a:	4a17      	ldr	r2, [pc, #92]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e34c:	23a8      	movs	r3, #168	; 0xa8
 800e34e:	58d4      	ldr	r4, [r2, r3]
 800e350:	250f      	movs	r5, #15
 800e352:	43ac      	bics	r4, r5
 800e354:	50d4      	str	r4, [r2, r3]
 800e356:	58d4      	ldr	r4, [r2, r3]
 800e358:	3d01      	subs	r5, #1
 800e35a:	432c      	orrs	r4, r5
 800e35c:	50d4      	str	r4, [r2, r3]
 800e35e:	e57d      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800e360:	4a12      	ldr	r2, [pc, #72]	; (800e3ac <RemapAndLinkDMAtoUARTRx+0x710>)
 800e362:	680c      	ldr	r4, [r1, #0]
 800e364:	4294      	cmp	r4, r2
 800e366:	d000      	beq.n	800e36a <RemapAndLinkDMAtoUARTRx+0x6ce>
 800e368:	e532      	b.n	800ddd0 <RemapAndLinkDMAtoUARTRx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800e36a:	4a0f      	ldr	r2, [pc, #60]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e36c:	23a8      	movs	r3, #168	; 0xa8
 800e36e:	58d4      	ldr	r4, [r2, r3]
 800e370:	4d0f      	ldr	r5, [pc, #60]	; (800e3b0 <RemapAndLinkDMAtoUARTRx+0x714>)
 800e372:	402c      	ands	r4, r5
 800e374:	50d4      	str	r4, [r2, r3]
 800e376:	58d5      	ldr	r5, [r2, r3]
 800e378:	24e0      	movs	r4, #224	; 0xe0
 800e37a:	0124      	lsls	r4, r4, #4
 800e37c:	432c      	orrs	r4, r5
 800e37e:	50d4      	str	r4, [r2, r3]
 800e380:	e56c      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800e382:	4a0c      	ldr	r2, [pc, #48]	; (800e3b4 <RemapAndLinkDMAtoUARTRx+0x718>)
 800e384:	680c      	ldr	r4, [r1, #0]
 800e386:	4294      	cmp	r4, r2
 800e388:	d000      	beq.n	800e38c <RemapAndLinkDMAtoUARTRx+0x6f0>
 800e38a:	e525      	b.n	800ddd8 <RemapAndLinkDMAtoUARTRx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800e38c:	4a06      	ldr	r2, [pc, #24]	; (800e3a8 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e38e:	23a8      	movs	r3, #168	; 0xa8
 800e390:	58d4      	ldr	r4, [r2, r3]
 800e392:	4d09      	ldr	r5, [pc, #36]	; (800e3b8 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800e394:	402c      	ands	r4, r5
 800e396:	50d4      	str	r4, [r2, r3]
 800e398:	58d5      	ldr	r5, [r2, r3]
 800e39a:	24e0      	movs	r4, #224	; 0xe0
 800e39c:	0324      	lsls	r4, r4, #12
 800e39e:	432c      	orrs	r4, r5
 800e3a0:	50d4      	str	r4, [r2, r3]
 800e3a2:	e55b      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
 800e3a4:	40020008 	.word	0x40020008
 800e3a8:	40020000 	.word	0x40020000
 800e3ac:	40020030 	.word	0x40020030
 800e3b0:	fffff0ff 	.word	0xfffff0ff
 800e3b4:	40020058 	.word	0x40020058
 800e3b8:	fff0ffff 	.word	0xfff0ffff
 800e3bc:	4002006c 	.word	0x4002006c
 800e3c0:	ff0fffff 	.word	0xff0fffff
 800e3c4:	4002041c 	.word	0x4002041c
 800e3c8:	40020400 	.word	0x40020400
 800e3cc:	40020430 	.word	0x40020430
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800e3d0:	4a41      	ldr	r2, [pc, #260]	; (800e4d8 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800e3d2:	680c      	ldr	r4, [r1, #0]
 800e3d4:	4294      	cmp	r4, r2
 800e3d6:	d000      	beq.n	800e3da <RemapAndLinkDMAtoUARTRx+0x73e>
 800e3d8:	e502      	b.n	800dde0 <RemapAndLinkDMAtoUARTRx+0x144>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800e3da:	4a40      	ldr	r2, [pc, #256]	; (800e4dc <RemapAndLinkDMAtoUARTRx+0x840>)
 800e3dc:	23a8      	movs	r3, #168	; 0xa8
 800e3de:	58d4      	ldr	r4, [r2, r3]
 800e3e0:	4d3f      	ldr	r5, [pc, #252]	; (800e4e0 <RemapAndLinkDMAtoUARTRx+0x844>)
 800e3e2:	402c      	ands	r4, r5
 800e3e4:	50d4      	str	r4, [r2, r3]
 800e3e6:	58d5      	ldr	r5, [r2, r3]
 800e3e8:	24e0      	movs	r4, #224	; 0xe0
 800e3ea:	0424      	lsls	r4, r4, #16
 800e3ec:	432c      	orrs	r4, r5
 800e3ee:	50d4      	str	r4, [r2, r3]
 800e3f0:	e534      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800e3f2:	4a3c      	ldr	r2, [pc, #240]	; (800e4e4 <RemapAndLinkDMAtoUARTRx+0x848>)
 800e3f4:	680c      	ldr	r4, [r1, #0]
 800e3f6:	4294      	cmp	r4, r2
 800e3f8:	d000      	beq.n	800e3fc <RemapAndLinkDMAtoUARTRx+0x760>
 800e3fa:	e4f5      	b.n	800dde8 <RemapAndLinkDMAtoUARTRx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800e3fc:	4a3a      	ldr	r2, [pc, #232]	; (800e4e8 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800e3fe:	23a8      	movs	r3, #168	; 0xa8
 800e400:	58d4      	ldr	r4, [r2, r3]
 800e402:	25f0      	movs	r5, #240	; 0xf0
 800e404:	43ac      	bics	r4, r5
 800e406:	50d4      	str	r4, [r2, r3]
 800e408:	58d4      	ldr	r4, [r2, r3]
 800e40a:	3d10      	subs	r5, #16
 800e40c:	432c      	orrs	r4, r5
 800e40e:	50d4      	str	r4, [r2, r3]
 800e410:	e524      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800e412:	4a36      	ldr	r2, [pc, #216]	; (800e4ec <RemapAndLinkDMAtoUARTRx+0x850>)
 800e414:	680c      	ldr	r4, [r1, #0]
 800e416:	4294      	cmp	r4, r2
 800e418:	d000      	beq.n	800e41c <RemapAndLinkDMAtoUARTRx+0x780>
 800e41a:	e4e9      	b.n	800ddf0 <RemapAndLinkDMAtoUARTRx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800e41c:	4a32      	ldr	r2, [pc, #200]	; (800e4e8 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800e41e:	23a8      	movs	r3, #168	; 0xa8
 800e420:	58d4      	ldr	r4, [r2, r3]
 800e422:	4d33      	ldr	r5, [pc, #204]	; (800e4f0 <RemapAndLinkDMAtoUARTRx+0x854>)
 800e424:	402c      	ands	r4, r5
 800e426:	50d4      	str	r4, [r2, r3]
 800e428:	58d5      	ldr	r5, [r2, r3]
 800e42a:	24e0      	movs	r4, #224	; 0xe0
 800e42c:	0124      	lsls	r4, r4, #4
 800e42e:	432c      	orrs	r4, r5
 800e430:	50d4      	str	r4, [r2, r3]
 800e432:	e513      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800e434:	4a2f      	ldr	r2, [pc, #188]	; (800e4f4 <RemapAndLinkDMAtoUARTRx+0x858>)
 800e436:	680c      	ldr	r4, [r1, #0]
 800e438:	4294      	cmp	r4, r2
 800e43a:	d000      	beq.n	800e43e <RemapAndLinkDMAtoUARTRx+0x7a2>
 800e43c:	e4dc      	b.n	800ddf8 <RemapAndLinkDMAtoUARTRx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800e43e:	4a27      	ldr	r2, [pc, #156]	; (800e4dc <RemapAndLinkDMAtoUARTRx+0x840>)
 800e440:	23a8      	movs	r3, #168	; 0xa8
 800e442:	58d5      	ldr	r5, [r2, r3]
 800e444:	260f      	movs	r6, #15
 800e446:	43b5      	bics	r5, r6
 800e448:	50d5      	str	r5, [r2, r3]
 800e44a:	58d4      	ldr	r4, [r2, r3]
 800e44c:	4334      	orrs	r4, r6
 800e44e:	50d4      	str	r4, [r2, r3]
 800e450:	e504      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800e452:	4a29      	ldr	r2, [pc, #164]	; (800e4f8 <RemapAndLinkDMAtoUARTRx+0x85c>)
 800e454:	680c      	ldr	r4, [r1, #0]
 800e456:	4294      	cmp	r4, r2
 800e458:	d000      	beq.n	800e45c <RemapAndLinkDMAtoUARTRx+0x7c0>
 800e45a:	e4d1      	b.n	800de00 <RemapAndLinkDMAtoUARTRx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800e45c:	4a1f      	ldr	r2, [pc, #124]	; (800e4dc <RemapAndLinkDMAtoUARTRx+0x840>)
 800e45e:	23a8      	movs	r3, #168	; 0xa8
 800e460:	58d4      	ldr	r4, [r2, r3]
 800e462:	4d23      	ldr	r5, [pc, #140]	; (800e4f0 <RemapAndLinkDMAtoUARTRx+0x854>)
 800e464:	402c      	ands	r4, r5
 800e466:	50d4      	str	r4, [r2, r3]
 800e468:	58d5      	ldr	r5, [r2, r3]
 800e46a:	24f0      	movs	r4, #240	; 0xf0
 800e46c:	0124      	lsls	r4, r4, #4
 800e46e:	432c      	orrs	r4, r5
 800e470:	50d4      	str	r4, [r2, r3]
 800e472:	e4f3      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800e474:	4a21      	ldr	r2, [pc, #132]	; (800e4fc <RemapAndLinkDMAtoUARTRx+0x860>)
 800e476:	680c      	ldr	r4, [r1, #0]
 800e478:	4294      	cmp	r4, r2
 800e47a:	d000      	beq.n	800e47e <RemapAndLinkDMAtoUARTRx+0x7e2>
 800e47c:	e4c4      	b.n	800de08 <RemapAndLinkDMAtoUARTRx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800e47e:	4a17      	ldr	r2, [pc, #92]	; (800e4dc <RemapAndLinkDMAtoUARTRx+0x840>)
 800e480:	23a8      	movs	r3, #168	; 0xa8
 800e482:	58d4      	ldr	r4, [r2, r3]
 800e484:	4d1e      	ldr	r5, [pc, #120]	; (800e500 <RemapAndLinkDMAtoUARTRx+0x864>)
 800e486:	402c      	ands	r4, r5
 800e488:	50d4      	str	r4, [r2, r3]
 800e48a:	58d5      	ldr	r5, [r2, r3]
 800e48c:	24f0      	movs	r4, #240	; 0xf0
 800e48e:	0324      	lsls	r4, r4, #12
 800e490:	432c      	orrs	r4, r5
 800e492:	50d4      	str	r4, [r2, r3]
 800e494:	e4e2      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800e496:	4a10      	ldr	r2, [pc, #64]	; (800e4d8 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800e498:	680c      	ldr	r4, [r1, #0]
 800e49a:	4294      	cmp	r4, r2
 800e49c:	d000      	beq.n	800e4a0 <RemapAndLinkDMAtoUARTRx+0x804>
 800e49e:	e4b7      	b.n	800de10 <RemapAndLinkDMAtoUARTRx+0x174>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800e4a0:	4a0e      	ldr	r2, [pc, #56]	; (800e4dc <RemapAndLinkDMAtoUARTRx+0x840>)
 800e4a2:	23a8      	movs	r3, #168	; 0xa8
 800e4a4:	58d4      	ldr	r4, [r2, r3]
 800e4a6:	4d0e      	ldr	r5, [pc, #56]	; (800e4e0 <RemapAndLinkDMAtoUARTRx+0x844>)
 800e4a8:	402c      	ands	r4, r5
 800e4aa:	50d4      	str	r4, [r2, r3]
 800e4ac:	58d5      	ldr	r5, [r2, r3]
 800e4ae:	24f0      	movs	r4, #240	; 0xf0
 800e4b0:	0424      	lsls	r4, r4, #16
 800e4b2:	432c      	orrs	r4, r5
 800e4b4:	50d4      	str	r4, [r2, r3]
 800e4b6:	e4d1      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800e4b8:	4a0a      	ldr	r2, [pc, #40]	; (800e4e4 <RemapAndLinkDMAtoUARTRx+0x848>)
 800e4ba:	680c      	ldr	r4, [r1, #0]
 800e4bc:	4294      	cmp	r4, r2
 800e4be:	d000      	beq.n	800e4c2 <RemapAndLinkDMAtoUARTRx+0x826>
 800e4c0:	e4aa      	b.n	800de18 <RemapAndLinkDMAtoUARTRx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800e4c2:	4a09      	ldr	r2, [pc, #36]	; (800e4e8 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800e4c4:	23a8      	movs	r3, #168	; 0xa8
 800e4c6:	58d5      	ldr	r5, [r2, r3]
 800e4c8:	26f0      	movs	r6, #240	; 0xf0
 800e4ca:	43b5      	bics	r5, r6
 800e4cc:	50d5      	str	r5, [r2, r3]
 800e4ce:	58d4      	ldr	r4, [r2, r3]
 800e4d0:	4334      	orrs	r4, r6
 800e4d2:	50d4      	str	r4, [r2, r3]
 800e4d4:	e4c2      	b.n	800de5c <RemapAndLinkDMAtoUARTRx+0x1c0>
 800e4d6:	46c0      	nop			; (mov r8, r8)
 800e4d8:	4002006c 	.word	0x4002006c
 800e4dc:	40020000 	.word	0x40020000
 800e4e0:	ff0fffff 	.word	0xff0fffff
 800e4e4:	4002041c 	.word	0x4002041c
 800e4e8:	40020400 	.word	0x40020400
 800e4ec:	40020430 	.word	0x40020430
 800e4f0:	fffff0ff 	.word	0xfffff0ff
 800e4f4:	40020008 	.word	0x40020008
 800e4f8:	40020030 	.word	0x40020030
 800e4fc:	40020058 	.word	0x40020058
 800e500:	fff0ffff 	.word	0xfff0ffff

0800e504 <DMA_MSG_RX_Setup>:
{	
 800e504:	b570      	push	{r4, r5, r6, lr}
 800e506:	0004      	movs	r4, r0
 800e508:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800e50a:	f7ff fbc7 	bl	800dc9c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800e50e:	2100      	movs	r1, #0
 800e510:	0028      	movs	r0, r5
 800e512:	f7ff fb0d 	bl	800db30 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800e516:	0020      	movs	r0, r4
 800e518:	f7fd fe62 	bl	800c1e0 <GetPort>
 800e51c:	1e43      	subs	r3, r0, #1
 800e51e:	0058      	lsls	r0, r3, #1
 800e520:	18c0      	adds	r0, r0, r3
 800e522:	0181      	lsls	r1, r0, #6
 800e524:	4b03      	ldr	r3, [pc, #12]	; (800e534 <DMA_MSG_RX_Setup+0x30>)
 800e526:	18c9      	adds	r1, r1, r3
 800e528:	22c0      	movs	r2, #192	; 0xc0
 800e52a:	0020      	movs	r0, r4
 800e52c:	f006 f8e2 	bl	80146f4 <HAL_UART_Receive_DMA>
}
 800e530:	bd70      	pop	{r4, r5, r6, pc}
 800e532:	46c0      	nop			; (mov r8, r8)
 800e534:	200012c8 	.word	0x200012c8

0800e538 <SetupMessagingRxDMAs>:
{	
 800e538:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800e53a:	4b17      	ldr	r3, [pc, #92]	; (800e598 <SetupMessagingRxDMAs+0x60>)
 800e53c:	785b      	ldrb	r3, [r3, #1]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d010      	beq.n	800e564 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800e542:	4b15      	ldr	r3, [pc, #84]	; (800e598 <SetupMessagingRxDMAs+0x60>)
 800e544:	789b      	ldrb	r3, [r3, #2]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d011      	beq.n	800e56e <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800e54a:	4b13      	ldr	r3, [pc, #76]	; (800e598 <SetupMessagingRxDMAs+0x60>)
 800e54c:	78db      	ldrb	r3, [r3, #3]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d012      	beq.n	800e578 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800e552:	4b11      	ldr	r3, [pc, #68]	; (800e598 <SetupMessagingRxDMAs+0x60>)
 800e554:	791b      	ldrb	r3, [r3, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d013      	beq.n	800e582 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800e55a:	4b0f      	ldr	r3, [pc, #60]	; (800e598 <SetupMessagingRxDMAs+0x60>)
 800e55c:	795b      	ldrb	r3, [r3, #5]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d014      	beq.n	800e58c <SetupMessagingRxDMAs+0x54>
}
 800e562:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800e564:	490d      	ldr	r1, [pc, #52]	; (800e59c <SetupMessagingRxDMAs+0x64>)
 800e566:	480e      	ldr	r0, [pc, #56]	; (800e5a0 <SetupMessagingRxDMAs+0x68>)
 800e568:	f7ff ffcc 	bl	800e504 <DMA_MSG_RX_Setup>
 800e56c:	e7e9      	b.n	800e542 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800e56e:	490d      	ldr	r1, [pc, #52]	; (800e5a4 <SetupMessagingRxDMAs+0x6c>)
 800e570:	480d      	ldr	r0, [pc, #52]	; (800e5a8 <SetupMessagingRxDMAs+0x70>)
 800e572:	f7ff ffc7 	bl	800e504 <DMA_MSG_RX_Setup>
 800e576:	e7e8      	b.n	800e54a <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800e578:	490c      	ldr	r1, [pc, #48]	; (800e5ac <SetupMessagingRxDMAs+0x74>)
 800e57a:	480d      	ldr	r0, [pc, #52]	; (800e5b0 <SetupMessagingRxDMAs+0x78>)
 800e57c:	f7ff ffc2 	bl	800e504 <DMA_MSG_RX_Setup>
 800e580:	e7e7      	b.n	800e552 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800e582:	490c      	ldr	r1, [pc, #48]	; (800e5b4 <SetupMessagingRxDMAs+0x7c>)
 800e584:	480c      	ldr	r0, [pc, #48]	; (800e5b8 <SetupMessagingRxDMAs+0x80>)
 800e586:	f7ff ffbd 	bl	800e504 <DMA_MSG_RX_Setup>
 800e58a:	e7e6      	b.n	800e55a <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800e58c:	490b      	ldr	r1, [pc, #44]	; (800e5bc <SetupMessagingRxDMAs+0x84>)
 800e58e:	480c      	ldr	r0, [pc, #48]	; (800e5c0 <SetupMessagingRxDMAs+0x88>)
 800e590:	f7ff ffb8 	bl	800e504 <DMA_MSG_RX_Setup>
}
 800e594:	e7e5      	b.n	800e562 <SetupMessagingRxDMAs+0x2a>
 800e596:	46c0      	nop			; (mov r8, r8)
 800e598:	200010ec 	.word	0x200010ec
 800e59c:	20001e1c 	.word	0x20001e1c
 800e5a0:	2000733c 	.word	0x2000733c
 800e5a4:	20001e54 	.word	0x20001e54
 800e5a8:	200073b0 	.word	0x200073b0
 800e5ac:	20001e8c 	.word	0x20001e8c
 800e5b0:	200072cc 	.word	0x200072cc
 800e5b4:	20001ec4 	.word	0x20001ec4
 800e5b8:	20007170 	.word	0x20007170
 800e5bc:	20001efc 	.word	0x20001efc
 800e5c0:	200071e4 	.word	0x200071e4

0800e5c4 <DMA_STREAM_Setup>:
{	
 800e5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c6:	0005      	movs	r5, r0
 800e5c8:	000f      	movs	r7, r1
 800e5ca:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800e5cc:	f7fd fe08 	bl	800c1e0 <GetPort>
	hDMA = &streamDMA[port-1];
 800e5d0:	3801      	subs	r0, #1
 800e5d2:	00c3      	lsls	r3, r0, #3
 800e5d4:	1a18      	subs	r0, r3, r0
 800e5d6:	00c4      	lsls	r4, r0, #3
 800e5d8:	4b09      	ldr	r3, [pc, #36]	; (800e600 <DMA_STREAM_Setup+0x3c>)
 800e5da:	18e4      	adds	r4, r4, r3
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800e5dc:	0021      	movs	r1, r4
 800e5de:	0028      	movs	r0, r5
 800e5e0:	f7ff fb5c 	bl	800dc9c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800e5e4:	2101      	movs	r1, #1
 800e5e6:	0020      	movs	r0, r4
 800e5e8:	f7ff faa2 	bl	800db30 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800e5ec:	2369      	movs	r3, #105	; 0x69
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	3128      	adds	r1, #40	; 0x28
 800e5f6:	0032      	movs	r2, r6
 800e5f8:	0028      	movs	r0, r5
 800e5fa:	f006 f87b 	bl	80146f4 <HAL_UART_Receive_DMA>
}
 800e5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e600:	20002014 	.word	0x20002014

0800e604 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800e604:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800e606:	6803      	ldr	r3, [r0, #0]
 800e608:	4acc      	ldr	r2, [pc, #816]	; (800e93c <RemapAndLinkDMAtoUARTTx+0x338>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d100      	bne.n	800e610 <RemapAndLinkDMAtoUARTTx+0xc>
 800e60e:	e0ca      	b.n	800e7a6 <RemapAndLinkDMAtoUARTTx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800e610:	4aca      	ldr	r2, [pc, #808]	; (800e93c <RemapAndLinkDMAtoUARTTx+0x338>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d100      	bne.n	800e618 <RemapAndLinkDMAtoUARTTx+0x14>
 800e616:	e0d8      	b.n	800e7ca <RemapAndLinkDMAtoUARTTx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800e618:	4ac8      	ldr	r2, [pc, #800]	; (800e93c <RemapAndLinkDMAtoUARTTx+0x338>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d100      	bne.n	800e620 <RemapAndLinkDMAtoUARTTx+0x1c>
 800e61e:	e0e5      	b.n	800e7ec <RemapAndLinkDMAtoUARTTx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800e620:	4ac6      	ldr	r2, [pc, #792]	; (800e93c <RemapAndLinkDMAtoUARTTx+0x338>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d100      	bne.n	800e628 <RemapAndLinkDMAtoUARTTx+0x24>
 800e626:	e0f2      	b.n	800e80e <RemapAndLinkDMAtoUARTTx+0x20a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800e628:	4ac4      	ldr	r2, [pc, #784]	; (800e93c <RemapAndLinkDMAtoUARTTx+0x338>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d100      	bne.n	800e630 <RemapAndLinkDMAtoUARTTx+0x2c>
 800e62e:	e0fe      	b.n	800e82e <RemapAndLinkDMAtoUARTTx+0x22a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800e630:	4ac2      	ldr	r2, [pc, #776]	; (800e93c <RemapAndLinkDMAtoUARTTx+0x338>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d100      	bne.n	800e638 <RemapAndLinkDMAtoUARTTx+0x34>
 800e636:	e10b      	b.n	800e850 <RemapAndLinkDMAtoUARTTx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800e638:	4ac1      	ldr	r2, [pc, #772]	; (800e940 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d100      	bne.n	800e640 <RemapAndLinkDMAtoUARTTx+0x3c>
 800e63e:	e118      	b.n	800e872 <RemapAndLinkDMAtoUARTTx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800e640:	4abf      	ldr	r2, [pc, #764]	; (800e940 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d100      	bne.n	800e648 <RemapAndLinkDMAtoUARTTx+0x44>
 800e646:	e124      	b.n	800e892 <RemapAndLinkDMAtoUARTTx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800e648:	4abd      	ldr	r2, [pc, #756]	; (800e940 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d100      	bne.n	800e650 <RemapAndLinkDMAtoUARTTx+0x4c>
 800e64e:	e131      	b.n	800e8b4 <RemapAndLinkDMAtoUARTTx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800e650:	4abb      	ldr	r2, [pc, #748]	; (800e940 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d100      	bne.n	800e658 <RemapAndLinkDMAtoUARTTx+0x54>
 800e656:	e13e      	b.n	800e8d6 <RemapAndLinkDMAtoUARTTx+0x2d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800e658:	4ab9      	ldr	r2, [pc, #740]	; (800e940 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d100      	bne.n	800e660 <RemapAndLinkDMAtoUARTTx+0x5c>
 800e65e:	e14a      	b.n	800e8f6 <RemapAndLinkDMAtoUARTTx+0x2f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800e660:	4ab7      	ldr	r2, [pc, #732]	; (800e940 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d100      	bne.n	800e668 <RemapAndLinkDMAtoUARTTx+0x64>
 800e666:	e157      	b.n	800e918 <RemapAndLinkDMAtoUARTTx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800e668:	4ab6      	ldr	r2, [pc, #728]	; (800e944 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d100      	bne.n	800e670 <RemapAndLinkDMAtoUARTTx+0x6c>
 800e66e:	e18b      	b.n	800e988 <RemapAndLinkDMAtoUARTTx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800e670:	4ab4      	ldr	r2, [pc, #720]	; (800e944 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d100      	bne.n	800e678 <RemapAndLinkDMAtoUARTTx+0x74>
 800e676:	e197      	b.n	800e9a8 <RemapAndLinkDMAtoUARTTx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800e678:	4ab2      	ldr	r2, [pc, #712]	; (800e944 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d100      	bne.n	800e680 <RemapAndLinkDMAtoUARTTx+0x7c>
 800e67e:	e1a4      	b.n	800e9ca <RemapAndLinkDMAtoUARTTx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800e680:	4ab0      	ldr	r2, [pc, #704]	; (800e944 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d100      	bne.n	800e688 <RemapAndLinkDMAtoUARTTx+0x84>
 800e686:	e1b1      	b.n	800e9ec <RemapAndLinkDMAtoUARTTx+0x3e8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800e688:	4aae      	ldr	r2, [pc, #696]	; (800e944 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d100      	bne.n	800e690 <RemapAndLinkDMAtoUARTTx+0x8c>
 800e68e:	e1bd      	b.n	800ea0c <RemapAndLinkDMAtoUARTTx+0x408>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800e690:	4aac      	ldr	r2, [pc, #688]	; (800e944 <RemapAndLinkDMAtoUARTTx+0x340>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d100      	bne.n	800e698 <RemapAndLinkDMAtoUARTTx+0x94>
 800e696:	e1ca      	b.n	800ea2e <RemapAndLinkDMAtoUARTTx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800e698:	4aab      	ldr	r2, [pc, #684]	; (800e948 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d100      	bne.n	800e6a0 <RemapAndLinkDMAtoUARTTx+0x9c>
 800e69e:	e1d7      	b.n	800ea50 <RemapAndLinkDMAtoUARTTx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800e6a0:	4aa9      	ldr	r2, [pc, #676]	; (800e948 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d100      	bne.n	800e6a8 <RemapAndLinkDMAtoUARTTx+0xa4>
 800e6a6:	e1e3      	b.n	800ea70 <RemapAndLinkDMAtoUARTTx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800e6a8:	4aa7      	ldr	r2, [pc, #668]	; (800e948 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d100      	bne.n	800e6b0 <RemapAndLinkDMAtoUARTTx+0xac>
 800e6ae:	e1f0      	b.n	800ea92 <RemapAndLinkDMAtoUARTTx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800e6b0:	4aa5      	ldr	r2, [pc, #660]	; (800e948 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d100      	bne.n	800e6b8 <RemapAndLinkDMAtoUARTTx+0xb4>
 800e6b6:	e1fd      	b.n	800eab4 <RemapAndLinkDMAtoUARTTx+0x4b0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800e6b8:	4aa3      	ldr	r2, [pc, #652]	; (800e948 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d100      	bne.n	800e6c0 <RemapAndLinkDMAtoUARTTx+0xbc>
 800e6be:	e209      	b.n	800ead4 <RemapAndLinkDMAtoUARTTx+0x4d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800e6c0:	4aa1      	ldr	r2, [pc, #644]	; (800e948 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d100      	bne.n	800e6c8 <RemapAndLinkDMAtoUARTTx+0xc4>
 800e6c6:	e216      	b.n	800eaf6 <RemapAndLinkDMAtoUARTTx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800e6c8:	4aa0      	ldr	r2, [pc, #640]	; (800e94c <RemapAndLinkDMAtoUARTTx+0x348>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d100      	bne.n	800e6d0 <RemapAndLinkDMAtoUARTTx+0xcc>
 800e6ce:	e223      	b.n	800eb18 <RemapAndLinkDMAtoUARTTx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800e6d0:	4a9e      	ldr	r2, [pc, #632]	; (800e94c <RemapAndLinkDMAtoUARTTx+0x348>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d100      	bne.n	800e6d8 <RemapAndLinkDMAtoUARTTx+0xd4>
 800e6d6:	e22f      	b.n	800eb38 <RemapAndLinkDMAtoUARTTx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800e6d8:	4a9c      	ldr	r2, [pc, #624]	; (800e94c <RemapAndLinkDMAtoUARTTx+0x348>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d100      	bne.n	800e6e0 <RemapAndLinkDMAtoUARTTx+0xdc>
 800e6de:	e23c      	b.n	800eb5a <RemapAndLinkDMAtoUARTTx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800e6e0:	4a9a      	ldr	r2, [pc, #616]	; (800e94c <RemapAndLinkDMAtoUARTTx+0x348>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d100      	bne.n	800e6e8 <RemapAndLinkDMAtoUARTTx+0xe4>
 800e6e6:	e249      	b.n	800eb7c <RemapAndLinkDMAtoUARTTx+0x578>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800e6e8:	4a98      	ldr	r2, [pc, #608]	; (800e94c <RemapAndLinkDMAtoUARTTx+0x348>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d100      	bne.n	800e6f0 <RemapAndLinkDMAtoUARTTx+0xec>
 800e6ee:	e255      	b.n	800eb9c <RemapAndLinkDMAtoUARTTx+0x598>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800e6f0:	4a96      	ldr	r2, [pc, #600]	; (800e94c <RemapAndLinkDMAtoUARTTx+0x348>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d100      	bne.n	800e6f8 <RemapAndLinkDMAtoUARTTx+0xf4>
 800e6f6:	e262      	b.n	800ebbe <RemapAndLinkDMAtoUARTTx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800e6f8:	4a95      	ldr	r2, [pc, #596]	; (800e950 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d100      	bne.n	800e700 <RemapAndLinkDMAtoUARTTx+0xfc>
 800e6fe:	e26f      	b.n	800ebe0 <RemapAndLinkDMAtoUARTTx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800e700:	4a93      	ldr	r2, [pc, #588]	; (800e950 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d100      	bne.n	800e708 <RemapAndLinkDMAtoUARTTx+0x104>
 800e706:	e27b      	b.n	800ec00 <RemapAndLinkDMAtoUARTTx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800e708:	4a91      	ldr	r2, [pc, #580]	; (800e950 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d100      	bne.n	800e710 <RemapAndLinkDMAtoUARTTx+0x10c>
 800e70e:	e288      	b.n	800ec22 <RemapAndLinkDMAtoUARTTx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800e710:	4a8f      	ldr	r2, [pc, #572]	; (800e950 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d100      	bne.n	800e718 <RemapAndLinkDMAtoUARTTx+0x114>
 800e716:	e295      	b.n	800ec44 <RemapAndLinkDMAtoUARTTx+0x640>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800e718:	4a8d      	ldr	r2, [pc, #564]	; (800e950 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d100      	bne.n	800e720 <RemapAndLinkDMAtoUARTTx+0x11c>
 800e71e:	e2a1      	b.n	800ec64 <RemapAndLinkDMAtoUARTTx+0x660>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800e720:	4a8b      	ldr	r2, [pc, #556]	; (800e950 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d100      	bne.n	800e728 <RemapAndLinkDMAtoUARTTx+0x124>
 800e726:	e2ae      	b.n	800ec86 <RemapAndLinkDMAtoUARTTx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800e728:	4a8a      	ldr	r2, [pc, #552]	; (800e954 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d100      	bne.n	800e730 <RemapAndLinkDMAtoUARTTx+0x12c>
 800e72e:	e2bb      	b.n	800eca8 <RemapAndLinkDMAtoUARTTx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800e730:	4a88      	ldr	r2, [pc, #544]	; (800e954 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d100      	bne.n	800e738 <RemapAndLinkDMAtoUARTTx+0x134>
 800e736:	e2c7      	b.n	800ecc8 <RemapAndLinkDMAtoUARTTx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800e738:	4a86      	ldr	r2, [pc, #536]	; (800e954 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d100      	bne.n	800e740 <RemapAndLinkDMAtoUARTTx+0x13c>
 800e73e:	e2d4      	b.n	800ecea <RemapAndLinkDMAtoUARTTx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800e740:	4a84      	ldr	r2, [pc, #528]	; (800e954 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d100      	bne.n	800e748 <RemapAndLinkDMAtoUARTTx+0x144>
 800e746:	e2f7      	b.n	800ed38 <RemapAndLinkDMAtoUARTTx+0x734>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800e748:	4a82      	ldr	r2, [pc, #520]	; (800e954 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d100      	bne.n	800e750 <RemapAndLinkDMAtoUARTTx+0x14c>
 800e74e:	e303      	b.n	800ed58 <RemapAndLinkDMAtoUARTTx+0x754>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800e750:	4a80      	ldr	r2, [pc, #512]	; (800e954 <RemapAndLinkDMAtoUARTTx+0x350>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d100      	bne.n	800e758 <RemapAndLinkDMAtoUARTTx+0x154>
 800e756:	e310      	b.n	800ed7a <RemapAndLinkDMAtoUARTTx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800e758:	4a7f      	ldr	r2, [pc, #508]	; (800e958 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d100      	bne.n	800e760 <RemapAndLinkDMAtoUARTTx+0x15c>
 800e75e:	e31d      	b.n	800ed9c <RemapAndLinkDMAtoUARTTx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800e760:	4a7d      	ldr	r2, [pc, #500]	; (800e958 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d100      	bne.n	800e768 <RemapAndLinkDMAtoUARTTx+0x164>
 800e766:	e328      	b.n	800edba <RemapAndLinkDMAtoUARTTx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800e768:	4a7b      	ldr	r2, [pc, #492]	; (800e958 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d100      	bne.n	800e770 <RemapAndLinkDMAtoUARTTx+0x16c>
 800e76e:	e335      	b.n	800eddc <RemapAndLinkDMAtoUARTTx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800e770:	4a79      	ldr	r2, [pc, #484]	; (800e958 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d100      	bne.n	800e778 <RemapAndLinkDMAtoUARTTx+0x174>
 800e776:	e342      	b.n	800edfe <RemapAndLinkDMAtoUARTTx+0x7fa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800e778:	4a77      	ldr	r2, [pc, #476]	; (800e958 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d100      	bne.n	800e780 <RemapAndLinkDMAtoUARTTx+0x17c>
 800e77e:	e34d      	b.n	800ee1c <RemapAndLinkDMAtoUARTTx+0x818>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800e780:	4a75      	ldr	r2, [pc, #468]	; (800e958 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d11e      	bne.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800e786:	4b75      	ldr	r3, [pc, #468]	; (800e95c <RemapAndLinkDMAtoUARTTx+0x358>)
 800e788:	680a      	ldr	r2, [r1, #0]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d11a      	bne.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800e78e:	4a74      	ldr	r2, [pc, #464]	; (800e960 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e790:	23a8      	movs	r3, #168	; 0xa8
 800e792:	58d4      	ldr	r4, [r2, r3]
 800e794:	4d73      	ldr	r5, [pc, #460]	; (800e964 <RemapAndLinkDMAtoUARTTx+0x360>)
 800e796:	402c      	ands	r4, r5
 800e798:	50d4      	str	r4, [r2, r3]
 800e79a:	58d5      	ldr	r5, [r2, r3]
 800e79c:	24f0      	movs	r4, #240	; 0xf0
 800e79e:	0324      	lsls	r4, r4, #12
 800e7a0:	432c      	orrs	r4, r5
 800e7a2:	50d4      	str	r4, [r2, r3]
 800e7a4:	e00e      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800e7a6:	4a70      	ldr	r2, [pc, #448]	; (800e968 <RemapAndLinkDMAtoUARTTx+0x364>)
 800e7a8:	680c      	ldr	r4, [r1, #0]
 800e7aa:	4294      	cmp	r4, r2
 800e7ac:	d000      	beq.n	800e7b0 <RemapAndLinkDMAtoUARTTx+0x1ac>
 800e7ae:	e72f      	b.n	800e610 <RemapAndLinkDMAtoUARTTx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800e7b0:	4a6e      	ldr	r2, [pc, #440]	; (800e96c <RemapAndLinkDMAtoUARTTx+0x368>)
 800e7b2:	23a8      	movs	r3, #168	; 0xa8
 800e7b4:	58d4      	ldr	r4, [r2, r3]
 800e7b6:	25f0      	movs	r5, #240	; 0xf0
 800e7b8:	43ac      	bics	r4, r5
 800e7ba:	50d4      	str	r4, [r2, r3]
 800e7bc:	58d4      	ldr	r4, [r2, r3]
 800e7be:	3d70      	subs	r5, #112	; 0x70
 800e7c0:	432c      	orrs	r4, r5
 800e7c2:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800e7c4:	6601      	str	r1, [r0, #96]	; 0x60
 800e7c6:	6248      	str	r0, [r1, #36]	; 0x24
}
 800e7c8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800e7ca:	4a69      	ldr	r2, [pc, #420]	; (800e970 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800e7cc:	680c      	ldr	r4, [r1, #0]
 800e7ce:	4294      	cmp	r4, r2
 800e7d0:	d000      	beq.n	800e7d4 <RemapAndLinkDMAtoUARTTx+0x1d0>
 800e7d2:	e721      	b.n	800e618 <RemapAndLinkDMAtoUARTTx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800e7d4:	4a65      	ldr	r2, [pc, #404]	; (800e96c <RemapAndLinkDMAtoUARTTx+0x368>)
 800e7d6:	23a8      	movs	r3, #168	; 0xa8
 800e7d8:	58d4      	ldr	r4, [r2, r3]
 800e7da:	4d66      	ldr	r5, [pc, #408]	; (800e974 <RemapAndLinkDMAtoUARTTx+0x370>)
 800e7dc:	402c      	ands	r4, r5
 800e7de:	50d4      	str	r4, [r2, r3]
 800e7e0:	58d5      	ldr	r5, [r2, r3]
 800e7e2:	2480      	movs	r4, #128	; 0x80
 800e7e4:	0224      	lsls	r4, r4, #8
 800e7e6:	432c      	orrs	r4, r5
 800e7e8:	50d4      	str	r4, [r2, r3]
 800e7ea:	e7eb      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800e7ec:	4a62      	ldr	r2, [pc, #392]	; (800e978 <RemapAndLinkDMAtoUARTTx+0x374>)
 800e7ee:	680c      	ldr	r4, [r1, #0]
 800e7f0:	4294      	cmp	r4, r2
 800e7f2:	d000      	beq.n	800e7f6 <RemapAndLinkDMAtoUARTTx+0x1f2>
 800e7f4:	e714      	b.n	800e620 <RemapAndLinkDMAtoUARTTx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800e7f6:	4a5d      	ldr	r2, [pc, #372]	; (800e96c <RemapAndLinkDMAtoUARTTx+0x368>)
 800e7f8:	23a8      	movs	r3, #168	; 0xa8
 800e7fa:	58d4      	ldr	r4, [r2, r3]
 800e7fc:	4d5f      	ldr	r5, [pc, #380]	; (800e97c <RemapAndLinkDMAtoUARTTx+0x378>)
 800e7fe:	402c      	ands	r4, r5
 800e800:	50d4      	str	r4, [r2, r3]
 800e802:	58d5      	ldr	r5, [r2, r3]
 800e804:	2480      	movs	r4, #128	; 0x80
 800e806:	0524      	lsls	r4, r4, #20
 800e808:	432c      	orrs	r4, r5
 800e80a:	50d4      	str	r4, [r2, r3]
 800e80c:	e7da      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800e80e:	4a5c      	ldr	r2, [pc, #368]	; (800e980 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800e810:	680c      	ldr	r4, [r1, #0]
 800e812:	4294      	cmp	r4, r2
 800e814:	d000      	beq.n	800e818 <RemapAndLinkDMAtoUARTTx+0x214>
 800e816:	e707      	b.n	800e628 <RemapAndLinkDMAtoUARTTx+0x24>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800e818:	4a51      	ldr	r2, [pc, #324]	; (800e960 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e81a:	23a8      	movs	r3, #168	; 0xa8
 800e81c:	58d4      	ldr	r4, [r2, r3]
 800e81e:	250f      	movs	r5, #15
 800e820:	43ac      	bics	r4, r5
 800e822:	50d4      	str	r4, [r2, r3]
 800e824:	58d4      	ldr	r4, [r2, r3]
 800e826:	3d07      	subs	r5, #7
 800e828:	432c      	orrs	r4, r5
 800e82a:	50d4      	str	r4, [r2, r3]
 800e82c:	e7ca      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800e82e:	4a55      	ldr	r2, [pc, #340]	; (800e984 <RemapAndLinkDMAtoUARTTx+0x380>)
 800e830:	680c      	ldr	r4, [r1, #0]
 800e832:	4294      	cmp	r4, r2
 800e834:	d000      	beq.n	800e838 <RemapAndLinkDMAtoUARTTx+0x234>
 800e836:	e6fb      	b.n	800e630 <RemapAndLinkDMAtoUARTTx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800e838:	4a49      	ldr	r2, [pc, #292]	; (800e960 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e83a:	23a8      	movs	r3, #168	; 0xa8
 800e83c:	58d4      	ldr	r4, [r2, r3]
 800e83e:	4d4d      	ldr	r5, [pc, #308]	; (800e974 <RemapAndLinkDMAtoUARTTx+0x370>)
 800e840:	402c      	ands	r4, r5
 800e842:	50d4      	str	r4, [r2, r3]
 800e844:	58d5      	ldr	r5, [r2, r3]
 800e846:	2480      	movs	r4, #128	; 0x80
 800e848:	0224      	lsls	r4, r4, #8
 800e84a:	432c      	orrs	r4, r5
 800e84c:	50d4      	str	r4, [r2, r3]
 800e84e:	e7b9      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800e850:	4a42      	ldr	r2, [pc, #264]	; (800e95c <RemapAndLinkDMAtoUARTTx+0x358>)
 800e852:	680c      	ldr	r4, [r1, #0]
 800e854:	4294      	cmp	r4, r2
 800e856:	d000      	beq.n	800e85a <RemapAndLinkDMAtoUARTTx+0x256>
 800e858:	e6ee      	b.n	800e638 <RemapAndLinkDMAtoUARTTx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800e85a:	4a41      	ldr	r2, [pc, #260]	; (800e960 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e85c:	23a8      	movs	r3, #168	; 0xa8
 800e85e:	58d4      	ldr	r4, [r2, r3]
 800e860:	4d40      	ldr	r5, [pc, #256]	; (800e964 <RemapAndLinkDMAtoUARTTx+0x360>)
 800e862:	402c      	ands	r4, r5
 800e864:	50d4      	str	r4, [r2, r3]
 800e866:	58d5      	ldr	r5, [r2, r3]
 800e868:	2480      	movs	r4, #128	; 0x80
 800e86a:	0324      	lsls	r4, r4, #12
 800e86c:	432c      	orrs	r4, r5
 800e86e:	50d4      	str	r4, [r2, r3]
 800e870:	e7a8      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800e872:	4a3d      	ldr	r2, [pc, #244]	; (800e968 <RemapAndLinkDMAtoUARTTx+0x364>)
 800e874:	680c      	ldr	r4, [r1, #0]
 800e876:	4294      	cmp	r4, r2
 800e878:	d000      	beq.n	800e87c <RemapAndLinkDMAtoUARTTx+0x278>
 800e87a:	e6e1      	b.n	800e640 <RemapAndLinkDMAtoUARTTx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800e87c:	4a3b      	ldr	r2, [pc, #236]	; (800e96c <RemapAndLinkDMAtoUARTTx+0x368>)
 800e87e:	23a8      	movs	r3, #168	; 0xa8
 800e880:	58d4      	ldr	r4, [r2, r3]
 800e882:	25f0      	movs	r5, #240	; 0xf0
 800e884:	43ac      	bics	r4, r5
 800e886:	50d4      	str	r4, [r2, r3]
 800e888:	58d4      	ldr	r4, [r2, r3]
 800e88a:	3d60      	subs	r5, #96	; 0x60
 800e88c:	432c      	orrs	r4, r5
 800e88e:	50d4      	str	r4, [r2, r3]
 800e890:	e798      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800e892:	4a37      	ldr	r2, [pc, #220]	; (800e970 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800e894:	680c      	ldr	r4, [r1, #0]
 800e896:	4294      	cmp	r4, r2
 800e898:	d000      	beq.n	800e89c <RemapAndLinkDMAtoUARTTx+0x298>
 800e89a:	e6d5      	b.n	800e648 <RemapAndLinkDMAtoUARTTx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800e89c:	4a33      	ldr	r2, [pc, #204]	; (800e96c <RemapAndLinkDMAtoUARTTx+0x368>)
 800e89e:	23a8      	movs	r3, #168	; 0xa8
 800e8a0:	58d4      	ldr	r4, [r2, r3]
 800e8a2:	4d34      	ldr	r5, [pc, #208]	; (800e974 <RemapAndLinkDMAtoUARTTx+0x370>)
 800e8a4:	402c      	ands	r4, r5
 800e8a6:	50d4      	str	r4, [r2, r3]
 800e8a8:	58d5      	ldr	r5, [r2, r3]
 800e8aa:	2490      	movs	r4, #144	; 0x90
 800e8ac:	0224      	lsls	r4, r4, #8
 800e8ae:	432c      	orrs	r4, r5
 800e8b0:	50d4      	str	r4, [r2, r3]
 800e8b2:	e787      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800e8b4:	4a30      	ldr	r2, [pc, #192]	; (800e978 <RemapAndLinkDMAtoUARTTx+0x374>)
 800e8b6:	680c      	ldr	r4, [r1, #0]
 800e8b8:	4294      	cmp	r4, r2
 800e8ba:	d000      	beq.n	800e8be <RemapAndLinkDMAtoUARTTx+0x2ba>
 800e8bc:	e6c8      	b.n	800e650 <RemapAndLinkDMAtoUARTTx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800e8be:	4a2b      	ldr	r2, [pc, #172]	; (800e96c <RemapAndLinkDMAtoUARTTx+0x368>)
 800e8c0:	23a8      	movs	r3, #168	; 0xa8
 800e8c2:	58d4      	ldr	r4, [r2, r3]
 800e8c4:	4d2d      	ldr	r5, [pc, #180]	; (800e97c <RemapAndLinkDMAtoUARTTx+0x378>)
 800e8c6:	402c      	ands	r4, r5
 800e8c8:	50d4      	str	r4, [r2, r3]
 800e8ca:	58d5      	ldr	r5, [r2, r3]
 800e8cc:	2490      	movs	r4, #144	; 0x90
 800e8ce:	0524      	lsls	r4, r4, #20
 800e8d0:	432c      	orrs	r4, r5
 800e8d2:	50d4      	str	r4, [r2, r3]
 800e8d4:	e776      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800e8d6:	4a2a      	ldr	r2, [pc, #168]	; (800e980 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800e8d8:	680c      	ldr	r4, [r1, #0]
 800e8da:	4294      	cmp	r4, r2
 800e8dc:	d000      	beq.n	800e8e0 <RemapAndLinkDMAtoUARTTx+0x2dc>
 800e8de:	e6bb      	b.n	800e658 <RemapAndLinkDMAtoUARTTx+0x54>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800e8e0:	4a1f      	ldr	r2, [pc, #124]	; (800e960 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e8e2:	23a8      	movs	r3, #168	; 0xa8
 800e8e4:	58d4      	ldr	r4, [r2, r3]
 800e8e6:	250f      	movs	r5, #15
 800e8e8:	43ac      	bics	r4, r5
 800e8ea:	50d4      	str	r4, [r2, r3]
 800e8ec:	58d4      	ldr	r4, [r2, r3]
 800e8ee:	3d06      	subs	r5, #6
 800e8f0:	432c      	orrs	r4, r5
 800e8f2:	50d4      	str	r4, [r2, r3]
 800e8f4:	e766      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800e8f6:	4a23      	ldr	r2, [pc, #140]	; (800e984 <RemapAndLinkDMAtoUARTTx+0x380>)
 800e8f8:	680c      	ldr	r4, [r1, #0]
 800e8fa:	4294      	cmp	r4, r2
 800e8fc:	d000      	beq.n	800e900 <RemapAndLinkDMAtoUARTTx+0x2fc>
 800e8fe:	e6af      	b.n	800e660 <RemapAndLinkDMAtoUARTTx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800e900:	4a17      	ldr	r2, [pc, #92]	; (800e960 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e902:	23a8      	movs	r3, #168	; 0xa8
 800e904:	58d4      	ldr	r4, [r2, r3]
 800e906:	4d1b      	ldr	r5, [pc, #108]	; (800e974 <RemapAndLinkDMAtoUARTTx+0x370>)
 800e908:	402c      	ands	r4, r5
 800e90a:	50d4      	str	r4, [r2, r3]
 800e90c:	58d5      	ldr	r5, [r2, r3]
 800e90e:	2490      	movs	r4, #144	; 0x90
 800e910:	0224      	lsls	r4, r4, #8
 800e912:	432c      	orrs	r4, r5
 800e914:	50d4      	str	r4, [r2, r3]
 800e916:	e755      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800e918:	4a10      	ldr	r2, [pc, #64]	; (800e95c <RemapAndLinkDMAtoUARTTx+0x358>)
 800e91a:	680c      	ldr	r4, [r1, #0]
 800e91c:	4294      	cmp	r4, r2
 800e91e:	d000      	beq.n	800e922 <RemapAndLinkDMAtoUARTTx+0x31e>
 800e920:	e6a2      	b.n	800e668 <RemapAndLinkDMAtoUARTTx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800e922:	4a0f      	ldr	r2, [pc, #60]	; (800e960 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e924:	23a8      	movs	r3, #168	; 0xa8
 800e926:	58d4      	ldr	r4, [r2, r3]
 800e928:	4d0e      	ldr	r5, [pc, #56]	; (800e964 <RemapAndLinkDMAtoUARTTx+0x360>)
 800e92a:	402c      	ands	r4, r5
 800e92c:	50d4      	str	r4, [r2, r3]
 800e92e:	58d5      	ldr	r5, [r2, r3]
 800e930:	2490      	movs	r4, #144	; 0x90
 800e932:	0324      	lsls	r4, r4, #12
 800e934:	432c      	orrs	r4, r5
 800e936:	50d4      	str	r4, [r2, r3]
 800e938:	e744      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800e93a:	46c0      	nop			; (mov r8, r8)
 800e93c:	40013800 	.word	0x40013800
 800e940:	40004400 	.word	0x40004400
 800e944:	40004800 	.word	0x40004800
 800e948:	40004c00 	.word	0x40004c00
 800e94c:	40005000 	.word	0x40005000
 800e950:	40011400 	.word	0x40011400
 800e954:	40011800 	.word	0x40011800
 800e958:	40011c00 	.word	0x40011c00
 800e95c:	40020458 	.word	0x40020458
 800e960:	40020400 	.word	0x40020400
 800e964:	fff0ffff 	.word	0xfff0ffff
 800e968:	4002001c 	.word	0x4002001c
 800e96c:	40020000 	.word	0x40020000
 800e970:	40020044 	.word	0x40020044
 800e974:	ffff0fff 	.word	0xffff0fff
 800e978:	40020080 	.word	0x40020080
 800e97c:	f0ffffff 	.word	0xf0ffffff
 800e980:	40020408 	.word	0x40020408
 800e984:	40020444 	.word	0x40020444
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800e988:	4ae0      	ldr	r2, [pc, #896]	; (800ed0c <RemapAndLinkDMAtoUARTTx+0x708>)
 800e98a:	680c      	ldr	r4, [r1, #0]
 800e98c:	4294      	cmp	r4, r2
 800e98e:	d000      	beq.n	800e992 <RemapAndLinkDMAtoUARTTx+0x38e>
 800e990:	e66e      	b.n	800e670 <RemapAndLinkDMAtoUARTTx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800e992:	4adf      	ldr	r2, [pc, #892]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e994:	23a8      	movs	r3, #168	; 0xa8
 800e996:	58d4      	ldr	r4, [r2, r3]
 800e998:	25f0      	movs	r5, #240	; 0xf0
 800e99a:	43ac      	bics	r4, r5
 800e99c:	50d4      	str	r4, [r2, r3]
 800e99e:	58d4      	ldr	r4, [r2, r3]
 800e9a0:	3d50      	subs	r5, #80	; 0x50
 800e9a2:	432c      	orrs	r4, r5
 800e9a4:	50d4      	str	r4, [r2, r3]
 800e9a6:	e70d      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800e9a8:	4ada      	ldr	r2, [pc, #872]	; (800ed14 <RemapAndLinkDMAtoUARTTx+0x710>)
 800e9aa:	680c      	ldr	r4, [r1, #0]
 800e9ac:	4294      	cmp	r4, r2
 800e9ae:	d000      	beq.n	800e9b2 <RemapAndLinkDMAtoUARTTx+0x3ae>
 800e9b0:	e662      	b.n	800e678 <RemapAndLinkDMAtoUARTTx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800e9b2:	4ad7      	ldr	r2, [pc, #860]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e9b4:	23a8      	movs	r3, #168	; 0xa8
 800e9b6:	58d4      	ldr	r4, [r2, r3]
 800e9b8:	4dd7      	ldr	r5, [pc, #860]	; (800ed18 <RemapAndLinkDMAtoUARTTx+0x714>)
 800e9ba:	402c      	ands	r4, r5
 800e9bc:	50d4      	str	r4, [r2, r3]
 800e9be:	58d5      	ldr	r5, [r2, r3]
 800e9c0:	24a0      	movs	r4, #160	; 0xa0
 800e9c2:	0224      	lsls	r4, r4, #8
 800e9c4:	432c      	orrs	r4, r5
 800e9c6:	50d4      	str	r4, [r2, r3]
 800e9c8:	e6fc      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800e9ca:	4ad4      	ldr	r2, [pc, #848]	; (800ed1c <RemapAndLinkDMAtoUARTTx+0x718>)
 800e9cc:	680c      	ldr	r4, [r1, #0]
 800e9ce:	4294      	cmp	r4, r2
 800e9d0:	d000      	beq.n	800e9d4 <RemapAndLinkDMAtoUARTTx+0x3d0>
 800e9d2:	e655      	b.n	800e680 <RemapAndLinkDMAtoUARTTx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800e9d4:	4ace      	ldr	r2, [pc, #824]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e9d6:	23a8      	movs	r3, #168	; 0xa8
 800e9d8:	58d4      	ldr	r4, [r2, r3]
 800e9da:	4dd1      	ldr	r5, [pc, #836]	; (800ed20 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800e9dc:	402c      	ands	r4, r5
 800e9de:	50d4      	str	r4, [r2, r3]
 800e9e0:	58d5      	ldr	r5, [r2, r3]
 800e9e2:	24a0      	movs	r4, #160	; 0xa0
 800e9e4:	0524      	lsls	r4, r4, #20
 800e9e6:	432c      	orrs	r4, r5
 800e9e8:	50d4      	str	r4, [r2, r3]
 800e9ea:	e6eb      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800e9ec:	4acd      	ldr	r2, [pc, #820]	; (800ed24 <RemapAndLinkDMAtoUARTTx+0x720>)
 800e9ee:	680c      	ldr	r4, [r1, #0]
 800e9f0:	4294      	cmp	r4, r2
 800e9f2:	d000      	beq.n	800e9f6 <RemapAndLinkDMAtoUARTTx+0x3f2>
 800e9f4:	e648      	b.n	800e688 <RemapAndLinkDMAtoUARTTx+0x84>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800e9f6:	4acc      	ldr	r2, [pc, #816]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e9f8:	23a8      	movs	r3, #168	; 0xa8
 800e9fa:	58d4      	ldr	r4, [r2, r3]
 800e9fc:	250f      	movs	r5, #15
 800e9fe:	43ac      	bics	r4, r5
 800ea00:	50d4      	str	r4, [r2, r3]
 800ea02:	58d4      	ldr	r4, [r2, r3]
 800ea04:	3d05      	subs	r5, #5
 800ea06:	432c      	orrs	r4, r5
 800ea08:	50d4      	str	r4, [r2, r3]
 800ea0a:	e6db      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800ea0c:	4ac7      	ldr	r2, [pc, #796]	; (800ed2c <RemapAndLinkDMAtoUARTTx+0x728>)
 800ea0e:	680c      	ldr	r4, [r1, #0]
 800ea10:	4294      	cmp	r4, r2
 800ea12:	d000      	beq.n	800ea16 <RemapAndLinkDMAtoUARTTx+0x412>
 800ea14:	e63c      	b.n	800e690 <RemapAndLinkDMAtoUARTTx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800ea16:	4ac4      	ldr	r2, [pc, #784]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800ea18:	23a8      	movs	r3, #168	; 0xa8
 800ea1a:	58d4      	ldr	r4, [r2, r3]
 800ea1c:	4dbe      	ldr	r5, [pc, #760]	; (800ed18 <RemapAndLinkDMAtoUARTTx+0x714>)
 800ea1e:	402c      	ands	r4, r5
 800ea20:	50d4      	str	r4, [r2, r3]
 800ea22:	58d5      	ldr	r5, [r2, r3]
 800ea24:	24a0      	movs	r4, #160	; 0xa0
 800ea26:	0224      	lsls	r4, r4, #8
 800ea28:	432c      	orrs	r4, r5
 800ea2a:	50d4      	str	r4, [r2, r3]
 800ea2c:	e6ca      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800ea2e:	4ac0      	ldr	r2, [pc, #768]	; (800ed30 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800ea30:	680c      	ldr	r4, [r1, #0]
 800ea32:	4294      	cmp	r4, r2
 800ea34:	d000      	beq.n	800ea38 <RemapAndLinkDMAtoUARTTx+0x434>
 800ea36:	e62f      	b.n	800e698 <RemapAndLinkDMAtoUARTTx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800ea38:	4abb      	ldr	r2, [pc, #748]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800ea3a:	23a8      	movs	r3, #168	; 0xa8
 800ea3c:	58d4      	ldr	r4, [r2, r3]
 800ea3e:	4dbd      	ldr	r5, [pc, #756]	; (800ed34 <RemapAndLinkDMAtoUARTTx+0x730>)
 800ea40:	402c      	ands	r4, r5
 800ea42:	50d4      	str	r4, [r2, r3]
 800ea44:	58d5      	ldr	r5, [r2, r3]
 800ea46:	24a0      	movs	r4, #160	; 0xa0
 800ea48:	0324      	lsls	r4, r4, #12
 800ea4a:	432c      	orrs	r4, r5
 800ea4c:	50d4      	str	r4, [r2, r3]
 800ea4e:	e6b9      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800ea50:	4aae      	ldr	r2, [pc, #696]	; (800ed0c <RemapAndLinkDMAtoUARTTx+0x708>)
 800ea52:	680c      	ldr	r4, [r1, #0]
 800ea54:	4294      	cmp	r4, r2
 800ea56:	d000      	beq.n	800ea5a <RemapAndLinkDMAtoUARTTx+0x456>
 800ea58:	e622      	b.n	800e6a0 <RemapAndLinkDMAtoUARTTx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800ea5a:	4aad      	ldr	r2, [pc, #692]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ea5c:	23a8      	movs	r3, #168	; 0xa8
 800ea5e:	58d4      	ldr	r4, [r2, r3]
 800ea60:	25f0      	movs	r5, #240	; 0xf0
 800ea62:	43ac      	bics	r4, r5
 800ea64:	50d4      	str	r4, [r2, r3]
 800ea66:	58d4      	ldr	r4, [r2, r3]
 800ea68:	3d40      	subs	r5, #64	; 0x40
 800ea6a:	432c      	orrs	r4, r5
 800ea6c:	50d4      	str	r4, [r2, r3]
 800ea6e:	e6a9      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800ea70:	4aa8      	ldr	r2, [pc, #672]	; (800ed14 <RemapAndLinkDMAtoUARTTx+0x710>)
 800ea72:	680c      	ldr	r4, [r1, #0]
 800ea74:	4294      	cmp	r4, r2
 800ea76:	d000      	beq.n	800ea7a <RemapAndLinkDMAtoUARTTx+0x476>
 800ea78:	e616      	b.n	800e6a8 <RemapAndLinkDMAtoUARTTx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800ea7a:	4aa5      	ldr	r2, [pc, #660]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ea7c:	23a8      	movs	r3, #168	; 0xa8
 800ea7e:	58d4      	ldr	r4, [r2, r3]
 800ea80:	4da5      	ldr	r5, [pc, #660]	; (800ed18 <RemapAndLinkDMAtoUARTTx+0x714>)
 800ea82:	402c      	ands	r4, r5
 800ea84:	50d4      	str	r4, [r2, r3]
 800ea86:	58d5      	ldr	r5, [r2, r3]
 800ea88:	24b0      	movs	r4, #176	; 0xb0
 800ea8a:	0224      	lsls	r4, r4, #8
 800ea8c:	432c      	orrs	r4, r5
 800ea8e:	50d4      	str	r4, [r2, r3]
 800ea90:	e698      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800ea92:	4aa2      	ldr	r2, [pc, #648]	; (800ed1c <RemapAndLinkDMAtoUARTTx+0x718>)
 800ea94:	680c      	ldr	r4, [r1, #0]
 800ea96:	4294      	cmp	r4, r2
 800ea98:	d000      	beq.n	800ea9c <RemapAndLinkDMAtoUARTTx+0x498>
 800ea9a:	e609      	b.n	800e6b0 <RemapAndLinkDMAtoUARTTx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800ea9c:	4a9c      	ldr	r2, [pc, #624]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ea9e:	23a8      	movs	r3, #168	; 0xa8
 800eaa0:	58d4      	ldr	r4, [r2, r3]
 800eaa2:	4d9f      	ldr	r5, [pc, #636]	; (800ed20 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800eaa4:	402c      	ands	r4, r5
 800eaa6:	50d4      	str	r4, [r2, r3]
 800eaa8:	58d5      	ldr	r5, [r2, r3]
 800eaaa:	24b0      	movs	r4, #176	; 0xb0
 800eaac:	0524      	lsls	r4, r4, #20
 800eaae:	432c      	orrs	r4, r5
 800eab0:	50d4      	str	r4, [r2, r3]
 800eab2:	e687      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800eab4:	4a9b      	ldr	r2, [pc, #620]	; (800ed24 <RemapAndLinkDMAtoUARTTx+0x720>)
 800eab6:	680c      	ldr	r4, [r1, #0]
 800eab8:	4294      	cmp	r4, r2
 800eaba:	d000      	beq.n	800eabe <RemapAndLinkDMAtoUARTTx+0x4ba>
 800eabc:	e5fc      	b.n	800e6b8 <RemapAndLinkDMAtoUARTTx+0xb4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800eabe:	4a9a      	ldr	r2, [pc, #616]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800eac0:	23a8      	movs	r3, #168	; 0xa8
 800eac2:	58d4      	ldr	r4, [r2, r3]
 800eac4:	250f      	movs	r5, #15
 800eac6:	43ac      	bics	r4, r5
 800eac8:	50d4      	str	r4, [r2, r3]
 800eaca:	58d4      	ldr	r4, [r2, r3]
 800eacc:	3d04      	subs	r5, #4
 800eace:	432c      	orrs	r4, r5
 800ead0:	50d4      	str	r4, [r2, r3]
 800ead2:	e677      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800ead4:	4a95      	ldr	r2, [pc, #596]	; (800ed2c <RemapAndLinkDMAtoUARTTx+0x728>)
 800ead6:	680c      	ldr	r4, [r1, #0]
 800ead8:	4294      	cmp	r4, r2
 800eada:	d000      	beq.n	800eade <RemapAndLinkDMAtoUARTTx+0x4da>
 800eadc:	e5f0      	b.n	800e6c0 <RemapAndLinkDMAtoUARTTx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800eade:	4a92      	ldr	r2, [pc, #584]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800eae0:	23a8      	movs	r3, #168	; 0xa8
 800eae2:	58d4      	ldr	r4, [r2, r3]
 800eae4:	4d8c      	ldr	r5, [pc, #560]	; (800ed18 <RemapAndLinkDMAtoUARTTx+0x714>)
 800eae6:	402c      	ands	r4, r5
 800eae8:	50d4      	str	r4, [r2, r3]
 800eaea:	58d5      	ldr	r5, [r2, r3]
 800eaec:	24b0      	movs	r4, #176	; 0xb0
 800eaee:	0224      	lsls	r4, r4, #8
 800eaf0:	432c      	orrs	r4, r5
 800eaf2:	50d4      	str	r4, [r2, r3]
 800eaf4:	e666      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800eaf6:	4a8e      	ldr	r2, [pc, #568]	; (800ed30 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800eaf8:	680c      	ldr	r4, [r1, #0]
 800eafa:	4294      	cmp	r4, r2
 800eafc:	d000      	beq.n	800eb00 <RemapAndLinkDMAtoUARTTx+0x4fc>
 800eafe:	e5e3      	b.n	800e6c8 <RemapAndLinkDMAtoUARTTx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800eb00:	4a89      	ldr	r2, [pc, #548]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800eb02:	23a8      	movs	r3, #168	; 0xa8
 800eb04:	58d4      	ldr	r4, [r2, r3]
 800eb06:	4d8b      	ldr	r5, [pc, #556]	; (800ed34 <RemapAndLinkDMAtoUARTTx+0x730>)
 800eb08:	402c      	ands	r4, r5
 800eb0a:	50d4      	str	r4, [r2, r3]
 800eb0c:	58d5      	ldr	r5, [r2, r3]
 800eb0e:	24b0      	movs	r4, #176	; 0xb0
 800eb10:	0324      	lsls	r4, r4, #12
 800eb12:	432c      	orrs	r4, r5
 800eb14:	50d4      	str	r4, [r2, r3]
 800eb16:	e655      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800eb18:	4a7c      	ldr	r2, [pc, #496]	; (800ed0c <RemapAndLinkDMAtoUARTTx+0x708>)
 800eb1a:	680c      	ldr	r4, [r1, #0]
 800eb1c:	4294      	cmp	r4, r2
 800eb1e:	d000      	beq.n	800eb22 <RemapAndLinkDMAtoUARTTx+0x51e>
 800eb20:	e5d6      	b.n	800e6d0 <RemapAndLinkDMAtoUARTTx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800eb22:	4a7b      	ldr	r2, [pc, #492]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800eb24:	23a8      	movs	r3, #168	; 0xa8
 800eb26:	58d4      	ldr	r4, [r2, r3]
 800eb28:	25f0      	movs	r5, #240	; 0xf0
 800eb2a:	43ac      	bics	r4, r5
 800eb2c:	50d4      	str	r4, [r2, r3]
 800eb2e:	58d4      	ldr	r4, [r2, r3]
 800eb30:	3d30      	subs	r5, #48	; 0x30
 800eb32:	432c      	orrs	r4, r5
 800eb34:	50d4      	str	r4, [r2, r3]
 800eb36:	e645      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800eb38:	4a76      	ldr	r2, [pc, #472]	; (800ed14 <RemapAndLinkDMAtoUARTTx+0x710>)
 800eb3a:	680c      	ldr	r4, [r1, #0]
 800eb3c:	4294      	cmp	r4, r2
 800eb3e:	d000      	beq.n	800eb42 <RemapAndLinkDMAtoUARTTx+0x53e>
 800eb40:	e5ca      	b.n	800e6d8 <RemapAndLinkDMAtoUARTTx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800eb42:	4a73      	ldr	r2, [pc, #460]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800eb44:	23a8      	movs	r3, #168	; 0xa8
 800eb46:	58d4      	ldr	r4, [r2, r3]
 800eb48:	4d73      	ldr	r5, [pc, #460]	; (800ed18 <RemapAndLinkDMAtoUARTTx+0x714>)
 800eb4a:	402c      	ands	r4, r5
 800eb4c:	50d4      	str	r4, [r2, r3]
 800eb4e:	58d5      	ldr	r5, [r2, r3]
 800eb50:	24c0      	movs	r4, #192	; 0xc0
 800eb52:	0224      	lsls	r4, r4, #8
 800eb54:	432c      	orrs	r4, r5
 800eb56:	50d4      	str	r4, [r2, r3]
 800eb58:	e634      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800eb5a:	4a70      	ldr	r2, [pc, #448]	; (800ed1c <RemapAndLinkDMAtoUARTTx+0x718>)
 800eb5c:	680c      	ldr	r4, [r1, #0]
 800eb5e:	4294      	cmp	r4, r2
 800eb60:	d000      	beq.n	800eb64 <RemapAndLinkDMAtoUARTTx+0x560>
 800eb62:	e5bd      	b.n	800e6e0 <RemapAndLinkDMAtoUARTTx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800eb64:	4a6a      	ldr	r2, [pc, #424]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800eb66:	23a8      	movs	r3, #168	; 0xa8
 800eb68:	58d4      	ldr	r4, [r2, r3]
 800eb6a:	4d6d      	ldr	r5, [pc, #436]	; (800ed20 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800eb6c:	402c      	ands	r4, r5
 800eb6e:	50d4      	str	r4, [r2, r3]
 800eb70:	58d5      	ldr	r5, [r2, r3]
 800eb72:	24c0      	movs	r4, #192	; 0xc0
 800eb74:	0524      	lsls	r4, r4, #20
 800eb76:	432c      	orrs	r4, r5
 800eb78:	50d4      	str	r4, [r2, r3]
 800eb7a:	e623      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800eb7c:	4a69      	ldr	r2, [pc, #420]	; (800ed24 <RemapAndLinkDMAtoUARTTx+0x720>)
 800eb7e:	680c      	ldr	r4, [r1, #0]
 800eb80:	4294      	cmp	r4, r2
 800eb82:	d000      	beq.n	800eb86 <RemapAndLinkDMAtoUARTTx+0x582>
 800eb84:	e5b0      	b.n	800e6e8 <RemapAndLinkDMAtoUARTTx+0xe4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800eb86:	4a68      	ldr	r2, [pc, #416]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800eb88:	23a8      	movs	r3, #168	; 0xa8
 800eb8a:	58d4      	ldr	r4, [r2, r3]
 800eb8c:	250f      	movs	r5, #15
 800eb8e:	43ac      	bics	r4, r5
 800eb90:	50d4      	str	r4, [r2, r3]
 800eb92:	58d4      	ldr	r4, [r2, r3]
 800eb94:	3d03      	subs	r5, #3
 800eb96:	432c      	orrs	r4, r5
 800eb98:	50d4      	str	r4, [r2, r3]
 800eb9a:	e613      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800eb9c:	4a63      	ldr	r2, [pc, #396]	; (800ed2c <RemapAndLinkDMAtoUARTTx+0x728>)
 800eb9e:	680c      	ldr	r4, [r1, #0]
 800eba0:	4294      	cmp	r4, r2
 800eba2:	d000      	beq.n	800eba6 <RemapAndLinkDMAtoUARTTx+0x5a2>
 800eba4:	e5a4      	b.n	800e6f0 <RemapAndLinkDMAtoUARTTx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800eba6:	4a60      	ldr	r2, [pc, #384]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800eba8:	23a8      	movs	r3, #168	; 0xa8
 800ebaa:	58d4      	ldr	r4, [r2, r3]
 800ebac:	4d5a      	ldr	r5, [pc, #360]	; (800ed18 <RemapAndLinkDMAtoUARTTx+0x714>)
 800ebae:	402c      	ands	r4, r5
 800ebb0:	50d4      	str	r4, [r2, r3]
 800ebb2:	58d5      	ldr	r5, [r2, r3]
 800ebb4:	24c0      	movs	r4, #192	; 0xc0
 800ebb6:	0224      	lsls	r4, r4, #8
 800ebb8:	432c      	orrs	r4, r5
 800ebba:	50d4      	str	r4, [r2, r3]
 800ebbc:	e602      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800ebbe:	4a5c      	ldr	r2, [pc, #368]	; (800ed30 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800ebc0:	680c      	ldr	r4, [r1, #0]
 800ebc2:	4294      	cmp	r4, r2
 800ebc4:	d000      	beq.n	800ebc8 <RemapAndLinkDMAtoUARTTx+0x5c4>
 800ebc6:	e597      	b.n	800e6f8 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800ebc8:	4a57      	ldr	r2, [pc, #348]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800ebca:	23a8      	movs	r3, #168	; 0xa8
 800ebcc:	58d4      	ldr	r4, [r2, r3]
 800ebce:	4d59      	ldr	r5, [pc, #356]	; (800ed34 <RemapAndLinkDMAtoUARTTx+0x730>)
 800ebd0:	402c      	ands	r4, r5
 800ebd2:	50d4      	str	r4, [r2, r3]
 800ebd4:	58d5      	ldr	r5, [r2, r3]
 800ebd6:	24c0      	movs	r4, #192	; 0xc0
 800ebd8:	0324      	lsls	r4, r4, #12
 800ebda:	432c      	orrs	r4, r5
 800ebdc:	50d4      	str	r4, [r2, r3]
 800ebde:	e5f1      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800ebe0:	4a4a      	ldr	r2, [pc, #296]	; (800ed0c <RemapAndLinkDMAtoUARTTx+0x708>)
 800ebe2:	680c      	ldr	r4, [r1, #0]
 800ebe4:	4294      	cmp	r4, r2
 800ebe6:	d000      	beq.n	800ebea <RemapAndLinkDMAtoUARTTx+0x5e6>
 800ebe8:	e58a      	b.n	800e700 <RemapAndLinkDMAtoUARTTx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800ebea:	4a49      	ldr	r2, [pc, #292]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ebec:	23a8      	movs	r3, #168	; 0xa8
 800ebee:	58d4      	ldr	r4, [r2, r3]
 800ebf0:	25f0      	movs	r5, #240	; 0xf0
 800ebf2:	43ac      	bics	r4, r5
 800ebf4:	50d4      	str	r4, [r2, r3]
 800ebf6:	58d4      	ldr	r4, [r2, r3]
 800ebf8:	3d20      	subs	r5, #32
 800ebfa:	432c      	orrs	r4, r5
 800ebfc:	50d4      	str	r4, [r2, r3]
 800ebfe:	e5e1      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800ec00:	4a44      	ldr	r2, [pc, #272]	; (800ed14 <RemapAndLinkDMAtoUARTTx+0x710>)
 800ec02:	680c      	ldr	r4, [r1, #0]
 800ec04:	4294      	cmp	r4, r2
 800ec06:	d000      	beq.n	800ec0a <RemapAndLinkDMAtoUARTTx+0x606>
 800ec08:	e57e      	b.n	800e708 <RemapAndLinkDMAtoUARTTx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800ec0a:	4a41      	ldr	r2, [pc, #260]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ec0c:	23a8      	movs	r3, #168	; 0xa8
 800ec0e:	58d4      	ldr	r4, [r2, r3]
 800ec10:	4d41      	ldr	r5, [pc, #260]	; (800ed18 <RemapAndLinkDMAtoUARTTx+0x714>)
 800ec12:	402c      	ands	r4, r5
 800ec14:	50d4      	str	r4, [r2, r3]
 800ec16:	58d5      	ldr	r5, [r2, r3]
 800ec18:	24d0      	movs	r4, #208	; 0xd0
 800ec1a:	0224      	lsls	r4, r4, #8
 800ec1c:	432c      	orrs	r4, r5
 800ec1e:	50d4      	str	r4, [r2, r3]
 800ec20:	e5d0      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800ec22:	4a3e      	ldr	r2, [pc, #248]	; (800ed1c <RemapAndLinkDMAtoUARTTx+0x718>)
 800ec24:	680c      	ldr	r4, [r1, #0]
 800ec26:	4294      	cmp	r4, r2
 800ec28:	d000      	beq.n	800ec2c <RemapAndLinkDMAtoUARTTx+0x628>
 800ec2a:	e571      	b.n	800e710 <RemapAndLinkDMAtoUARTTx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800ec2c:	4a38      	ldr	r2, [pc, #224]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ec2e:	23a8      	movs	r3, #168	; 0xa8
 800ec30:	58d4      	ldr	r4, [r2, r3]
 800ec32:	4d3b      	ldr	r5, [pc, #236]	; (800ed20 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800ec34:	402c      	ands	r4, r5
 800ec36:	50d4      	str	r4, [r2, r3]
 800ec38:	58d5      	ldr	r5, [r2, r3]
 800ec3a:	24d0      	movs	r4, #208	; 0xd0
 800ec3c:	0524      	lsls	r4, r4, #20
 800ec3e:	432c      	orrs	r4, r5
 800ec40:	50d4      	str	r4, [r2, r3]
 800ec42:	e5bf      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800ec44:	4a37      	ldr	r2, [pc, #220]	; (800ed24 <RemapAndLinkDMAtoUARTTx+0x720>)
 800ec46:	680c      	ldr	r4, [r1, #0]
 800ec48:	4294      	cmp	r4, r2
 800ec4a:	d000      	beq.n	800ec4e <RemapAndLinkDMAtoUARTTx+0x64a>
 800ec4c:	e564      	b.n	800e718 <RemapAndLinkDMAtoUARTTx+0x114>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800ec4e:	4a36      	ldr	r2, [pc, #216]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800ec50:	23a8      	movs	r3, #168	; 0xa8
 800ec52:	58d4      	ldr	r4, [r2, r3]
 800ec54:	250f      	movs	r5, #15
 800ec56:	43ac      	bics	r4, r5
 800ec58:	50d4      	str	r4, [r2, r3]
 800ec5a:	58d4      	ldr	r4, [r2, r3]
 800ec5c:	3d02      	subs	r5, #2
 800ec5e:	432c      	orrs	r4, r5
 800ec60:	50d4      	str	r4, [r2, r3]
 800ec62:	e5af      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800ec64:	4a31      	ldr	r2, [pc, #196]	; (800ed2c <RemapAndLinkDMAtoUARTTx+0x728>)
 800ec66:	680c      	ldr	r4, [r1, #0]
 800ec68:	4294      	cmp	r4, r2
 800ec6a:	d000      	beq.n	800ec6e <RemapAndLinkDMAtoUARTTx+0x66a>
 800ec6c:	e558      	b.n	800e720 <RemapAndLinkDMAtoUARTTx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800ec6e:	4a2e      	ldr	r2, [pc, #184]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800ec70:	23a8      	movs	r3, #168	; 0xa8
 800ec72:	58d4      	ldr	r4, [r2, r3]
 800ec74:	4d28      	ldr	r5, [pc, #160]	; (800ed18 <RemapAndLinkDMAtoUARTTx+0x714>)
 800ec76:	402c      	ands	r4, r5
 800ec78:	50d4      	str	r4, [r2, r3]
 800ec7a:	58d5      	ldr	r5, [r2, r3]
 800ec7c:	24d0      	movs	r4, #208	; 0xd0
 800ec7e:	0224      	lsls	r4, r4, #8
 800ec80:	432c      	orrs	r4, r5
 800ec82:	50d4      	str	r4, [r2, r3]
 800ec84:	e59e      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800ec86:	4a2a      	ldr	r2, [pc, #168]	; (800ed30 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800ec88:	680c      	ldr	r4, [r1, #0]
 800ec8a:	4294      	cmp	r4, r2
 800ec8c:	d000      	beq.n	800ec90 <RemapAndLinkDMAtoUARTTx+0x68c>
 800ec8e:	e54b      	b.n	800e728 <RemapAndLinkDMAtoUARTTx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800ec90:	4a25      	ldr	r2, [pc, #148]	; (800ed28 <RemapAndLinkDMAtoUARTTx+0x724>)
 800ec92:	23a8      	movs	r3, #168	; 0xa8
 800ec94:	58d4      	ldr	r4, [r2, r3]
 800ec96:	4d27      	ldr	r5, [pc, #156]	; (800ed34 <RemapAndLinkDMAtoUARTTx+0x730>)
 800ec98:	402c      	ands	r4, r5
 800ec9a:	50d4      	str	r4, [r2, r3]
 800ec9c:	58d5      	ldr	r5, [r2, r3]
 800ec9e:	24d0      	movs	r4, #208	; 0xd0
 800eca0:	0324      	lsls	r4, r4, #12
 800eca2:	432c      	orrs	r4, r5
 800eca4:	50d4      	str	r4, [r2, r3]
 800eca6:	e58d      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800eca8:	4a18      	ldr	r2, [pc, #96]	; (800ed0c <RemapAndLinkDMAtoUARTTx+0x708>)
 800ecaa:	680c      	ldr	r4, [r1, #0]
 800ecac:	4294      	cmp	r4, r2
 800ecae:	d000      	beq.n	800ecb2 <RemapAndLinkDMAtoUARTTx+0x6ae>
 800ecb0:	e53e      	b.n	800e730 <RemapAndLinkDMAtoUARTTx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800ecb2:	4a17      	ldr	r2, [pc, #92]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ecb4:	23a8      	movs	r3, #168	; 0xa8
 800ecb6:	58d4      	ldr	r4, [r2, r3]
 800ecb8:	25f0      	movs	r5, #240	; 0xf0
 800ecba:	43ac      	bics	r4, r5
 800ecbc:	50d4      	str	r4, [r2, r3]
 800ecbe:	58d4      	ldr	r4, [r2, r3]
 800ecc0:	3d10      	subs	r5, #16
 800ecc2:	432c      	orrs	r4, r5
 800ecc4:	50d4      	str	r4, [r2, r3]
 800ecc6:	e57d      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800ecc8:	4a12      	ldr	r2, [pc, #72]	; (800ed14 <RemapAndLinkDMAtoUARTTx+0x710>)
 800ecca:	680c      	ldr	r4, [r1, #0]
 800eccc:	4294      	cmp	r4, r2
 800ecce:	d000      	beq.n	800ecd2 <RemapAndLinkDMAtoUARTTx+0x6ce>
 800ecd0:	e532      	b.n	800e738 <RemapAndLinkDMAtoUARTTx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800ecd2:	4a0f      	ldr	r2, [pc, #60]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ecd4:	23a8      	movs	r3, #168	; 0xa8
 800ecd6:	58d4      	ldr	r4, [r2, r3]
 800ecd8:	4d0f      	ldr	r5, [pc, #60]	; (800ed18 <RemapAndLinkDMAtoUARTTx+0x714>)
 800ecda:	402c      	ands	r4, r5
 800ecdc:	50d4      	str	r4, [r2, r3]
 800ecde:	58d5      	ldr	r5, [r2, r3]
 800ece0:	24e0      	movs	r4, #224	; 0xe0
 800ece2:	0224      	lsls	r4, r4, #8
 800ece4:	432c      	orrs	r4, r5
 800ece6:	50d4      	str	r4, [r2, r3]
 800ece8:	e56c      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800ecea:	4a0c      	ldr	r2, [pc, #48]	; (800ed1c <RemapAndLinkDMAtoUARTTx+0x718>)
 800ecec:	680c      	ldr	r4, [r1, #0]
 800ecee:	4294      	cmp	r4, r2
 800ecf0:	d000      	beq.n	800ecf4 <RemapAndLinkDMAtoUARTTx+0x6f0>
 800ecf2:	e525      	b.n	800e740 <RemapAndLinkDMAtoUARTTx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800ecf4:	4a06      	ldr	r2, [pc, #24]	; (800ed10 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ecf6:	23a8      	movs	r3, #168	; 0xa8
 800ecf8:	58d4      	ldr	r4, [r2, r3]
 800ecfa:	4d09      	ldr	r5, [pc, #36]	; (800ed20 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800ecfc:	402c      	ands	r4, r5
 800ecfe:	50d4      	str	r4, [r2, r3]
 800ed00:	58d5      	ldr	r5, [r2, r3]
 800ed02:	24e0      	movs	r4, #224	; 0xe0
 800ed04:	0524      	lsls	r4, r4, #20
 800ed06:	432c      	orrs	r4, r5
 800ed08:	50d4      	str	r4, [r2, r3]
 800ed0a:	e55b      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800ed0c:	4002001c 	.word	0x4002001c
 800ed10:	40020000 	.word	0x40020000
 800ed14:	40020044 	.word	0x40020044
 800ed18:	ffff0fff 	.word	0xffff0fff
 800ed1c:	40020080 	.word	0x40020080
 800ed20:	f0ffffff 	.word	0xf0ffffff
 800ed24:	40020408 	.word	0x40020408
 800ed28:	40020400 	.word	0x40020400
 800ed2c:	40020444 	.word	0x40020444
 800ed30:	40020458 	.word	0x40020458
 800ed34:	fff0ffff 	.word	0xfff0ffff
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800ed38:	4a41      	ldr	r2, [pc, #260]	; (800ee40 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800ed3a:	680c      	ldr	r4, [r1, #0]
 800ed3c:	4294      	cmp	r4, r2
 800ed3e:	d000      	beq.n	800ed42 <RemapAndLinkDMAtoUARTTx+0x73e>
 800ed40:	e502      	b.n	800e748 <RemapAndLinkDMAtoUARTTx+0x144>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800ed42:	4a40      	ldr	r2, [pc, #256]	; (800ee44 <RemapAndLinkDMAtoUARTTx+0x840>)
 800ed44:	23a8      	movs	r3, #168	; 0xa8
 800ed46:	58d4      	ldr	r4, [r2, r3]
 800ed48:	250f      	movs	r5, #15
 800ed4a:	43ac      	bics	r4, r5
 800ed4c:	50d4      	str	r4, [r2, r3]
 800ed4e:	58d4      	ldr	r4, [r2, r3]
 800ed50:	3d01      	subs	r5, #1
 800ed52:	432c      	orrs	r4, r5
 800ed54:	50d4      	str	r4, [r2, r3]
 800ed56:	e535      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800ed58:	4a3b      	ldr	r2, [pc, #236]	; (800ee48 <RemapAndLinkDMAtoUARTTx+0x844>)
 800ed5a:	680c      	ldr	r4, [r1, #0]
 800ed5c:	4294      	cmp	r4, r2
 800ed5e:	d000      	beq.n	800ed62 <RemapAndLinkDMAtoUARTTx+0x75e>
 800ed60:	e4f6      	b.n	800e750 <RemapAndLinkDMAtoUARTTx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800ed62:	4a38      	ldr	r2, [pc, #224]	; (800ee44 <RemapAndLinkDMAtoUARTTx+0x840>)
 800ed64:	23a8      	movs	r3, #168	; 0xa8
 800ed66:	58d4      	ldr	r4, [r2, r3]
 800ed68:	4d38      	ldr	r5, [pc, #224]	; (800ee4c <RemapAndLinkDMAtoUARTTx+0x848>)
 800ed6a:	402c      	ands	r4, r5
 800ed6c:	50d4      	str	r4, [r2, r3]
 800ed6e:	58d5      	ldr	r5, [r2, r3]
 800ed70:	24e0      	movs	r4, #224	; 0xe0
 800ed72:	0224      	lsls	r4, r4, #8
 800ed74:	432c      	orrs	r4, r5
 800ed76:	50d4      	str	r4, [r2, r3]
 800ed78:	e524      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800ed7a:	4a35      	ldr	r2, [pc, #212]	; (800ee50 <RemapAndLinkDMAtoUARTTx+0x84c>)
 800ed7c:	680c      	ldr	r4, [r1, #0]
 800ed7e:	4294      	cmp	r4, r2
 800ed80:	d000      	beq.n	800ed84 <RemapAndLinkDMAtoUARTTx+0x780>
 800ed82:	e4e9      	b.n	800e758 <RemapAndLinkDMAtoUARTTx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800ed84:	4a2f      	ldr	r2, [pc, #188]	; (800ee44 <RemapAndLinkDMAtoUARTTx+0x840>)
 800ed86:	23a8      	movs	r3, #168	; 0xa8
 800ed88:	58d4      	ldr	r4, [r2, r3]
 800ed8a:	4d32      	ldr	r5, [pc, #200]	; (800ee54 <RemapAndLinkDMAtoUARTTx+0x850>)
 800ed8c:	402c      	ands	r4, r5
 800ed8e:	50d4      	str	r4, [r2, r3]
 800ed90:	58d5      	ldr	r5, [r2, r3]
 800ed92:	24e0      	movs	r4, #224	; 0xe0
 800ed94:	0324      	lsls	r4, r4, #12
 800ed96:	432c      	orrs	r4, r5
 800ed98:	50d4      	str	r4, [r2, r3]
 800ed9a:	e513      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800ed9c:	4a2e      	ldr	r2, [pc, #184]	; (800ee58 <RemapAndLinkDMAtoUARTTx+0x854>)
 800ed9e:	680c      	ldr	r4, [r1, #0]
 800eda0:	4294      	cmp	r4, r2
 800eda2:	d000      	beq.n	800eda6 <RemapAndLinkDMAtoUARTTx+0x7a2>
 800eda4:	e4dc      	b.n	800e760 <RemapAndLinkDMAtoUARTTx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800eda6:	4a2d      	ldr	r2, [pc, #180]	; (800ee5c <RemapAndLinkDMAtoUARTTx+0x858>)
 800eda8:	23a8      	movs	r3, #168	; 0xa8
 800edaa:	58d5      	ldr	r5, [r2, r3]
 800edac:	26f0      	movs	r6, #240	; 0xf0
 800edae:	43b5      	bics	r5, r6
 800edb0:	50d5      	str	r5, [r2, r3]
 800edb2:	58d4      	ldr	r4, [r2, r3]
 800edb4:	4334      	orrs	r4, r6
 800edb6:	50d4      	str	r4, [r2, r3]
 800edb8:	e504      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800edba:	4a29      	ldr	r2, [pc, #164]	; (800ee60 <RemapAndLinkDMAtoUARTTx+0x85c>)
 800edbc:	680c      	ldr	r4, [r1, #0]
 800edbe:	4294      	cmp	r4, r2
 800edc0:	d000      	beq.n	800edc4 <RemapAndLinkDMAtoUARTTx+0x7c0>
 800edc2:	e4d1      	b.n	800e768 <RemapAndLinkDMAtoUARTTx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800edc4:	4a25      	ldr	r2, [pc, #148]	; (800ee5c <RemapAndLinkDMAtoUARTTx+0x858>)
 800edc6:	23a8      	movs	r3, #168	; 0xa8
 800edc8:	58d4      	ldr	r4, [r2, r3]
 800edca:	4d20      	ldr	r5, [pc, #128]	; (800ee4c <RemapAndLinkDMAtoUARTTx+0x848>)
 800edcc:	402c      	ands	r4, r5
 800edce:	50d4      	str	r4, [r2, r3]
 800edd0:	58d5      	ldr	r5, [r2, r3]
 800edd2:	24f0      	movs	r4, #240	; 0xf0
 800edd4:	0224      	lsls	r4, r4, #8
 800edd6:	432c      	orrs	r4, r5
 800edd8:	50d4      	str	r4, [r2, r3]
 800edda:	e4f3      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800eddc:	4a21      	ldr	r2, [pc, #132]	; (800ee64 <RemapAndLinkDMAtoUARTTx+0x860>)
 800edde:	680c      	ldr	r4, [r1, #0]
 800ede0:	4294      	cmp	r4, r2
 800ede2:	d000      	beq.n	800ede6 <RemapAndLinkDMAtoUARTTx+0x7e2>
 800ede4:	e4c4      	b.n	800e770 <RemapAndLinkDMAtoUARTTx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800ede6:	4a1d      	ldr	r2, [pc, #116]	; (800ee5c <RemapAndLinkDMAtoUARTTx+0x858>)
 800ede8:	23a8      	movs	r3, #168	; 0xa8
 800edea:	58d4      	ldr	r4, [r2, r3]
 800edec:	4d1e      	ldr	r5, [pc, #120]	; (800ee68 <RemapAndLinkDMAtoUARTTx+0x864>)
 800edee:	402c      	ands	r4, r5
 800edf0:	50d4      	str	r4, [r2, r3]
 800edf2:	58d5      	ldr	r5, [r2, r3]
 800edf4:	24f0      	movs	r4, #240	; 0xf0
 800edf6:	0524      	lsls	r4, r4, #20
 800edf8:	432c      	orrs	r4, r5
 800edfa:	50d4      	str	r4, [r2, r3]
 800edfc:	e4e2      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800edfe:	4a10      	ldr	r2, [pc, #64]	; (800ee40 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800ee00:	680c      	ldr	r4, [r1, #0]
 800ee02:	4294      	cmp	r4, r2
 800ee04:	d000      	beq.n	800ee08 <RemapAndLinkDMAtoUARTTx+0x804>
 800ee06:	e4b7      	b.n	800e778 <RemapAndLinkDMAtoUARTTx+0x174>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800ee08:	4a0e      	ldr	r2, [pc, #56]	; (800ee44 <RemapAndLinkDMAtoUARTTx+0x840>)
 800ee0a:	23a8      	movs	r3, #168	; 0xa8
 800ee0c:	58d5      	ldr	r5, [r2, r3]
 800ee0e:	260f      	movs	r6, #15
 800ee10:	43b5      	bics	r5, r6
 800ee12:	50d5      	str	r5, [r2, r3]
 800ee14:	58d4      	ldr	r4, [r2, r3]
 800ee16:	4334      	orrs	r4, r6
 800ee18:	50d4      	str	r4, [r2, r3]
 800ee1a:	e4d3      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800ee1c:	4a0a      	ldr	r2, [pc, #40]	; (800ee48 <RemapAndLinkDMAtoUARTTx+0x844>)
 800ee1e:	680c      	ldr	r4, [r1, #0]
 800ee20:	4294      	cmp	r4, r2
 800ee22:	d000      	beq.n	800ee26 <RemapAndLinkDMAtoUARTTx+0x822>
 800ee24:	e4ac      	b.n	800e780 <RemapAndLinkDMAtoUARTTx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800ee26:	4a07      	ldr	r2, [pc, #28]	; (800ee44 <RemapAndLinkDMAtoUARTTx+0x840>)
 800ee28:	23a8      	movs	r3, #168	; 0xa8
 800ee2a:	58d4      	ldr	r4, [r2, r3]
 800ee2c:	4d07      	ldr	r5, [pc, #28]	; (800ee4c <RemapAndLinkDMAtoUARTTx+0x848>)
 800ee2e:	402c      	ands	r4, r5
 800ee30:	50d4      	str	r4, [r2, r3]
 800ee32:	58d5      	ldr	r5, [r2, r3]
 800ee34:	24f0      	movs	r4, #240	; 0xf0
 800ee36:	0224      	lsls	r4, r4, #8
 800ee38:	432c      	orrs	r4, r5
 800ee3a:	50d4      	str	r4, [r2, r3]
 800ee3c:	e4c2      	b.n	800e7c4 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800ee3e:	46c0      	nop			; (mov r8, r8)
 800ee40:	40020408 	.word	0x40020408
 800ee44:	40020400 	.word	0x40020400
 800ee48:	40020444 	.word	0x40020444
 800ee4c:	ffff0fff 	.word	0xffff0fff
 800ee50:	40020458 	.word	0x40020458
 800ee54:	fff0ffff 	.word	0xfff0ffff
 800ee58:	4002001c 	.word	0x4002001c
 800ee5c:	40020000 	.word	0x40020000
 800ee60:	40020044 	.word	0x40020044
 800ee64:	40020080 	.word	0x40020080
 800ee68:	f0ffffff 	.word	0xf0ffffff

0800ee6c <DMA_MSG_TX_Setup>:
{	
 800ee6c:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800ee6e:	4b0d      	ldr	r3, [pc, #52]	; (800eea4 <DMA_MSG_TX_Setup+0x38>)
 800ee70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d010      	beq.n	800ee98 <DMA_MSG_TX_Setup+0x2c>
	else if (msgTxDMA[1].Parent == NULL)
 800ee76:	4b0b      	ldr	r3, [pc, #44]	; (800eea4 <DMA_MSG_TX_Setup+0x38>)
 800ee78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d00e      	beq.n	800ee9c <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[2].Parent == NULL)
 800ee7e:	4a09      	ldr	r2, [pc, #36]	; (800eea4 <DMA_MSG_TX_Setup+0x38>)
 800ee80:	2394      	movs	r3, #148	; 0x94
 800ee82:	58d3      	ldr	r3, [r2, r3]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d00b      	beq.n	800eea0 <DMA_MSG_TX_Setup+0x34>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800ee88:	0021      	movs	r1, r4
 800ee8a:	f7ff fbbb 	bl	800e604 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800ee8e:	2100      	movs	r1, #0
 800ee90:	0020      	movs	r0, r4
 800ee92:	f7fe fe4d 	bl	800db30 <SetupDMAInterrupts>
}
 800ee96:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[0];
 800ee98:	4c02      	ldr	r4, [pc, #8]	; (800eea4 <DMA_MSG_TX_Setup+0x38>)
 800ee9a:	e7f5      	b.n	800ee88 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800ee9c:	4c02      	ldr	r4, [pc, #8]	; (800eea8 <DMA_MSG_TX_Setup+0x3c>)
 800ee9e:	e7f3      	b.n	800ee88 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[2];  
 800eea0:	4c02      	ldr	r4, [pc, #8]	; (800eeac <DMA_MSG_TX_Setup+0x40>)
 800eea2:	e7f1      	b.n	800ee88 <DMA_MSG_TX_Setup+0x1c>
 800eea4:	20001f6c 	.word	0x20001f6c
 800eea8:	20001fa4 	.word	0x20001fa4
 800eeac:	20001fdc 	.word	0x20001fdc

0800eeb0 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800eeb0:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800eeb2:	4807      	ldr	r0, [pc, #28]	; (800eed0 <CRC_Init+0x20>)
 800eeb4:	4b07      	ldr	r3, [pc, #28]	; (800eed4 <CRC_Init+0x24>)
 800eeb6:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800eeb8:	2310      	movs	r3, #16
 800eeba:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800eebc:	2300      	movs	r3, #0
 800eebe:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800eec0:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    //CRC_INPUTDATA_INVERSION_NONE
 800eec2:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    //CRC_OUTPUTDATA_INVERSION_DISABLE;
 800eec4:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800eec6:	3303      	adds	r3, #3
 800eec8:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800eeca:	f003 fb8e 	bl	80125ea <HAL_CRC_Init>
}
 800eece:	bd10      	pop	{r4, pc}
 800eed0:	20007428 	.word	0x20007428
 800eed4:	40023000 	.word	0x40023000

0800eed8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800eed8:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800eeda:	4a05      	ldr	r2, [pc, #20]	; (800eef0 <HAL_CRC_MspInit+0x18>)
 800eedc:	6951      	ldr	r1, [r2, #20]
 800eede:	2340      	movs	r3, #64	; 0x40
 800eee0:	4319      	orrs	r1, r3
 800eee2:	6151      	str	r1, [r2, #20]
 800eee4:	6952      	ldr	r2, [r2, #20]
 800eee6:	4013      	ands	r3, r2
 800eee8:	9301      	str	r3, [sp, #4]
 800eeea:	9b01      	ldr	r3, [sp, #4]
}
 800eeec:	b002      	add	sp, #8
 800eeee:	4770      	bx	lr
 800eef0:	40021000 	.word	0x40021000

0800eef4 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800eef4:	b570      	push	{r4, r5, r6, lr}
 800eef6:	0004      	movs	r4, r0
 800eef8:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d014      	beq.n	800ef28 <CalculateCRC8+0x34>
 800eefe:	2900      	cmp	r1, #0
 800ef00:	d101      	bne.n	800ef06 <CalculateCRC8+0x12>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800ef02:	2000      	movs	r0, #0
}
 800ef04:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800ef06:	088e      	lsrs	r6, r1, #2
 800ef08:	0032      	movs	r2, r6
 800ef0a:	0001      	movs	r1, r0
 800ef0c:	4807      	ldr	r0, [pc, #28]	; (800ef2c <CalculateCRC8+0x38>)
 800ef0e:	f003 fbc7 	bl	80126a0 <HAL_CRC_Calculate>
 800ef12:	b2c0      	uxtb	r0, r0
		if ((size%4)!=0)
 800ef14:	07ab      	lsls	r3, r5, #30
 800ef16:	d0f5      	beq.n	800ef04 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800ef18:	0131      	lsls	r1, r6, #4
 800ef1a:	1861      	adds	r1, r4, r1
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	4803      	ldr	r0, [pc, #12]	; (800ef2c <CalculateCRC8+0x38>)
 800ef20:	f003 fb94 	bl	801264c <HAL_CRC_Accumulate>
 800ef24:	b2c0      	uxtb	r0, r0
 800ef26:	e7ed      	b.n	800ef04 <CalculateCRC8+0x10>
	return 0;
 800ef28:	2000      	movs	r0, #0
 800ef2a:	e7eb      	b.n	800ef04 <CalculateCRC8+0x10>
 800ef2c:	20007428 	.word	0x20007428

0800ef30 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800ef30:	b500      	push	{lr}
 800ef32:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800ef34:	2380      	movs	r3, #128	; 0x80
 800ef36:	011b      	lsls	r3, r3, #4
 800ef38:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ef42:	3303      	adds	r3, #3
 800ef44:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800ef46:	2090      	movs	r0, #144	; 0x90
 800ef48:	a901      	add	r1, sp, #4
 800ef4a:	05c0      	lsls	r0, r0, #23
 800ef4c:	f004 fa02 	bl	8013354 <HAL_GPIO_Init>
}
 800ef50:	b007      	add	sp, #28
 800ef52:	bd00      	pop	{pc}

0800ef54 <GPIO_Init>:
{
 800ef54:	b500      	push	{lr}
 800ef56:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800ef58:	4b18      	ldr	r3, [pc, #96]	; (800efbc <GPIO_Init+0x68>)
 800ef5a:	6959      	ldr	r1, [r3, #20]
 800ef5c:	2080      	movs	r0, #128	; 0x80
 800ef5e:	0300      	lsls	r0, r0, #12
 800ef60:	4301      	orrs	r1, r0
 800ef62:	6159      	str	r1, [r3, #20]
 800ef64:	695a      	ldr	r2, [r3, #20]
 800ef66:	4002      	ands	r2, r0
 800ef68:	9201      	str	r2, [sp, #4]
 800ef6a:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800ef6c:	6959      	ldr	r1, [r3, #20]
 800ef6e:	2080      	movs	r0, #128	; 0x80
 800ef70:	0280      	lsls	r0, r0, #10
 800ef72:	4301      	orrs	r1, r0
 800ef74:	6159      	str	r1, [r3, #20]
 800ef76:	695a      	ldr	r2, [r3, #20]
 800ef78:	4002      	ands	r2, r0
 800ef7a:	9202      	str	r2, [sp, #8]
 800ef7c:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800ef7e:	6959      	ldr	r1, [r3, #20]
 800ef80:	2080      	movs	r0, #128	; 0x80
 800ef82:	0340      	lsls	r0, r0, #13
 800ef84:	4301      	orrs	r1, r0
 800ef86:	6159      	str	r1, [r3, #20]
 800ef88:	695a      	ldr	r2, [r3, #20]
 800ef8a:	4002      	ands	r2, r0
 800ef8c:	9203      	str	r2, [sp, #12]
 800ef8e:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800ef90:	6959      	ldr	r1, [r3, #20]
 800ef92:	2080      	movs	r0, #128	; 0x80
 800ef94:	02c0      	lsls	r0, r0, #11
 800ef96:	4301      	orrs	r1, r0
 800ef98:	6159      	str	r1, [r3, #20]
 800ef9a:	695a      	ldr	r2, [r3, #20]
 800ef9c:	4002      	ands	r2, r0
 800ef9e:	9204      	str	r2, [sp, #16]
 800efa0:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800efa2:	695a      	ldr	r2, [r3, #20]
 800efa4:	2180      	movs	r1, #128	; 0x80
 800efa6:	03c9      	lsls	r1, r1, #15
 800efa8:	430a      	orrs	r2, r1
 800efaa:	615a      	str	r2, [r3, #20]
 800efac:	695b      	ldr	r3, [r3, #20]
 800efae:	400b      	ands	r3, r1
 800efb0:	9305      	str	r3, [sp, #20]
 800efb2:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800efb4:	f7ff ffbc 	bl	800ef30 <IND_LED_Init>
}
 800efb8:	b007      	add	sp, #28
 800efba:	bd00      	pop	{pc}
 800efbc:	40021000 	.word	0x40021000

0800efc0 <HX711_GPIO_Init>:

//-- Configure indicator LED
void HX711_GPIO_Init(void)
{
 800efc0:	b530      	push	{r4, r5, lr}
 800efc2:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800efc4:	2390      	movs	r3, #144	; 0x90
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800efca:	2301      	movs	r3, #1
 800efcc:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800efce:	2500      	movs	r5, #0
 800efd0:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800efd2:	3302      	adds	r3, #2
 800efd4:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800efd6:	2490      	movs	r4, #144	; 0x90
 800efd8:	05e4      	lsls	r4, r4, #23
 800efda:	a901      	add	r1, sp, #4
 800efdc:	0020      	movs	r0, r4
 800efde:	f004 f9b9 	bl	8013354 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800efe2:	2380      	movs	r3, #128	; 0x80
 800efe4:	00db      	lsls	r3, r3, #3
 800efe6:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800efe8:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);	
 800efea:	a901      	add	r1, sp, #4
 800efec:	0020      	movs	r0, r4
 800efee:	f004 f9b1 	bl	8013354 <HAL_GPIO_Init>
}
 800eff2:	b007      	add	sp, #28
 800eff4:	bd30      	pop	{r4, r5, pc}
	...

0800eff8 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800eff8:	b570      	push	{r4, r5, r6, lr}
 800effa:	000e      	movs	r6, r1
 800effc:	0014      	movs	r4, r2
 800effe:	001d      	movs	r5, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800f000:	f000 fd24 	bl	800fa4c <GetUart>
	
	if (huart == &huart1) 
 800f004:	4b26      	ldr	r3, [pc, #152]	; (800f0a0 <GetPortGPIOs+0xa8>)
 800f006:	4298      	cmp	r0, r3
 800f008:	d047      	beq.n	800f09a <GetPortGPIOs+0xa2>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800f00a:	4b26      	ldr	r3, [pc, #152]	; (800f0a4 <GetPortGPIOs+0xac>)
 800f00c:	4298      	cmp	r0, r3
 800f00e:	d00d      	beq.n	800f02c <GetPortGPIOs+0x34>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800f010:	4b25      	ldr	r3, [pc, #148]	; (800f0a8 <GetPortGPIOs+0xb0>)
 800f012:	4298      	cmp	r0, r3
 800f014:	d015      	beq.n	800f042 <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800f016:	4b25      	ldr	r3, [pc, #148]	; (800f0ac <GetPortGPIOs+0xb4>)
 800f018:	4298      	cmp	r0, r3
 800f01a:	d01e      	beq.n	800f05a <GetPortGPIOs+0x62>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800f01c:	4b24      	ldr	r3, [pc, #144]	; (800f0b0 <GetPortGPIOs+0xb8>)
 800f01e:	4298      	cmp	r0, r3
 800f020:	d026      	beq.n	800f070 <GetPortGPIOs+0x78>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800f022:	4b24      	ldr	r3, [pc, #144]	; (800f0b4 <GetPortGPIOs+0xbc>)
 800f024:	4298      	cmp	r0, r3
 800f026:	d02d      	beq.n	800f084 <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800f028:	20ff      	movs	r0, #255	; 0xff
 800f02a:	e037      	b.n	800f09c <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800f02c:	2390      	movs	r3, #144	; 0x90
 800f02e:	05db      	lsls	r3, r3, #23
 800f030:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800f032:	2204      	movs	r2, #4
 800f034:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800f036:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART2_RX_PIN;
 800f038:	2308      	movs	r3, #8
 800f03a:	9a04      	ldr	r2, [sp, #16]
 800f03c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800f03e:	2000      	movs	r0, #0
 800f040:	e02c      	b.n	800f09c <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800f042:	4b1d      	ldr	r3, [pc, #116]	; (800f0b8 <GetPortGPIOs+0xc0>)
 800f044:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800f046:	2280      	movs	r2, #128	; 0x80
 800f048:	00d2      	lsls	r2, r2, #3
 800f04a:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800f04c:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART3_RX_PIN;
 800f04e:	2380      	movs	r3, #128	; 0x80
 800f050:	011b      	lsls	r3, r3, #4
 800f052:	9a04      	ldr	r2, [sp, #16]
 800f054:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800f056:	2000      	movs	r0, #0
 800f058:	e020      	b.n	800f09c <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800f05a:	2390      	movs	r3, #144	; 0x90
 800f05c:	05db      	lsls	r3, r3, #23
 800f05e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800f060:	2201      	movs	r2, #1
 800f062:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800f064:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART4_RX_PIN;
 800f066:	2302      	movs	r3, #2
 800f068:	9a04      	ldr	r2, [sp, #16]
 800f06a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800f06c:	2000      	movs	r0, #0
 800f06e:	e015      	b.n	800f09c <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800f070:	4b11      	ldr	r3, [pc, #68]	; (800f0b8 <GetPortGPIOs+0xc0>)
 800f072:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800f074:	2208      	movs	r2, #8
 800f076:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800f078:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART5_RX_PIN;
 800f07a:	2310      	movs	r3, #16
 800f07c:	9a04      	ldr	r2, [sp, #16]
 800f07e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800f080:	2000      	movs	r0, #0
 800f082:	e00b      	b.n	800f09c <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800f084:	2390      	movs	r3, #144	; 0x90
 800f086:	05db      	lsls	r3, r3, #23
 800f088:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800f08a:	2210      	movs	r2, #16
 800f08c:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800f08e:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART6_RX_PIN;
 800f090:	2320      	movs	r3, #32
 800f092:	9a04      	ldr	r2, [sp, #16]
 800f094:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800f096:	2000      	movs	r0, #0
 800f098:	e000      	b.n	800f09c <GetPortGPIOs+0xa4>
 800f09a:	2000      	movs	r0, #0
	
	return result;	
}
 800f09c:	bd70      	pop	{r4, r5, r6, pc}
 800f09e:	46c0      	nop			; (mov r8, r8)
 800f0a0:	20007258 	.word	0x20007258
 800f0a4:	200073b0 	.word	0x200073b0
 800f0a8:	20007170 	.word	0x20007170
 800f0ac:	2000733c 	.word	0x2000733c
 800f0b0:	200071e4 	.word	0x200071e4
 800f0b4:	200072cc 	.word	0x200072cc
 800f0b8:	48000400 	.word	0x48000400

0800f0bc <IsFactoryReset>:
{
 800f0bc:	b570      	push	{r4, r5, r6, lr}
 800f0be:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800f0c0:	4b39      	ldr	r3, [pc, #228]	; (800f1a8 <IsFactoryReset+0xec>)
 800f0c2:	6959      	ldr	r1, [r3, #20]
 800f0c4:	2080      	movs	r0, #128	; 0x80
 800f0c6:	0280      	lsls	r0, r0, #10
 800f0c8:	4301      	orrs	r1, r0
 800f0ca:	6159      	str	r1, [r3, #20]
 800f0cc:	695a      	ldr	r2, [r3, #20]
 800f0ce:	4002      	ands	r2, r0
 800f0d0:	9203      	str	r2, [sp, #12]
 800f0d2:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800f0d4:	6959      	ldr	r1, [r3, #20]
 800f0d6:	2080      	movs	r0, #128	; 0x80
 800f0d8:	02c0      	lsls	r0, r0, #11
 800f0da:	4301      	orrs	r1, r0
 800f0dc:	6159      	str	r1, [r3, #20]
 800f0de:	695a      	ldr	r2, [r3, #20]
 800f0e0:	4002      	ands	r2, r0
 800f0e2:	9204      	str	r2, [sp, #16]
 800f0e4:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800f0e6:	6959      	ldr	r1, [r3, #20]
 800f0e8:	2080      	movs	r0, #128	; 0x80
 800f0ea:	0300      	lsls	r0, r0, #12
 800f0ec:	4301      	orrs	r1, r0
 800f0ee:	6159      	str	r1, [r3, #20]
 800f0f0:	695a      	ldr	r2, [r3, #20]
 800f0f2:	4002      	ands	r2, r0
 800f0f4:	9205      	str	r2, [sp, #20]
 800f0f6:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800f0f8:	695a      	ldr	r2, [r3, #20]
 800f0fa:	2180      	movs	r1, #128	; 0x80
 800f0fc:	0349      	lsls	r1, r1, #13
 800f0fe:	430a      	orrs	r2, r1
 800f100:	615a      	str	r2, [r3, #20]
 800f102:	695b      	ldr	r3, [r3, #20]
 800f104:	400b      	ands	r3, r1
 800f106:	9306      	str	r3, [sp, #24]
 800f108:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800f10a:	2522      	movs	r5, #34	; 0x22
 800f10c:	446d      	add	r5, sp
 800f10e:	ab08      	add	r3, sp, #32
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	ab0b      	add	r3, sp, #44	; 0x2c
 800f114:	002a      	movs	r2, r5
 800f116:	a90c      	add	r1, sp, #48	; 0x30
 800f118:	2001      	movs	r0, #1
 800f11a:	f7ff ff6d 	bl	800eff8 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800f11e:	ac07      	add	r4, sp, #28
 800f120:	9400      	str	r4, [sp, #0]
 800f122:	ab09      	add	r3, sp, #36	; 0x24
 800f124:	221e      	movs	r2, #30
 800f126:	446a      	add	r2, sp
 800f128:	a90a      	add	r1, sp, #40	; 0x28
 800f12a:	2005      	movs	r0, #5
 800f12c:	f7ff ff64 	bl	800eff8 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f130:	2301      	movs	r3, #1
 800f132:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f134:	2600      	movs	r6, #0
 800f136:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800f138:	882b      	ldrh	r3, [r5, #0]
 800f13a:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800f13c:	a90d      	add	r1, sp, #52	; 0x34
 800f13e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f140:	f004 f908 	bl	8013354 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f144:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800f146:	2302      	movs	r3, #2
 800f148:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800f14a:	8823      	ldrh	r3, [r4, #0]
 800f14c:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800f14e:	a90d      	add	r1, sp, #52	; 0x34
 800f150:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f152:	f004 f8ff 	bl	8013354 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800f156:	8829      	ldrh	r1, [r5, #0]
 800f158:	2200      	movs	r2, #0
 800f15a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f15c:	f004 fa4b 	bl	80135f6 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800f160:	2005      	movs	r0, #5
 800f162:	f000 fadf 	bl	800f724 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800f166:	8821      	ldrh	r1, [r4, #0]
 800f168:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f16a:	f004 fa3d 	bl	80135e8 <HAL_GPIO_ReadPin>
 800f16e:	2800      	cmp	r0, #0
 800f170:	d006      	beq.n	800f180 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800f172:	4b0e      	ldr	r3, [pc, #56]	; (800f1ac <IsFactoryReset+0xf0>)
 800f174:	2201      	movs	r2, #1
 800f176:	4252      	negs	r2, r2
 800f178:	601a      	str	r2, [r3, #0]
	return 0;
 800f17a:	2000      	movs	r0, #0
}
 800f17c:	b012      	add	sp, #72	; 0x48
 800f17e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800f180:	2322      	movs	r3, #34	; 0x22
 800f182:	446b      	add	r3, sp
 800f184:	8819      	ldrh	r1, [r3, #0]
 800f186:	2201      	movs	r2, #1
 800f188:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f18a:	f004 fa34 	bl	80135f6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800f18e:	2005      	movs	r0, #5
 800f190:	f000 fac8 	bl	800f724 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800f194:	ab07      	add	r3, sp, #28
 800f196:	8819      	ldrh	r1, [r3, #0]
 800f198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f19a:	f004 fa25 	bl	80135e8 <HAL_GPIO_ReadPin>
 800f19e:	2801      	cmp	r0, #1
 800f1a0:	d1e7      	bne.n	800f172 <IsFactoryReset+0xb6>
			return 1;
 800f1a2:	2001      	movs	r0, #1
 800f1a4:	e7ea      	b.n	800f17c <IsFactoryReset+0xc0>
 800f1a6:	46c0      	nop			; (mov r8, r8)
 800f1a8:	40021000 	.word	0x40021000
 800f1ac:	20007ff0 	.word	0x20007ff0

0800f1b0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800f1b0:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800f1b2:	f002 fe0b 	bl	8011dcc <HAL_IncTick>
  osSystickHandler();  
 800f1b6:	f000 fe1b 	bl	800fdf0 <osSystickHandler>

}
 800f1ba:	bd10      	pop	{r4, pc}

0800f1bc <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800f1bc:	e7fe      	b.n	800f1bc <HardFault_Handler>

0800f1be <USART1_IRQHandler>:
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800f1be:	4770      	bx	lr

0800f1c0 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800f1c0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800f1c2:	4802      	ldr	r0, [pc, #8]	; (800f1cc <USART2_IRQHandler+0xc>)
 800f1c4:	f005 feb1 	bl	8014f2a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800f1c8:	bd10      	pop	{r4, pc}
 800f1ca:	46c0      	nop			; (mov r8, r8)
 800f1cc:	200073b0 	.word	0x200073b0

0800f1d0 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800f1d0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800f1d2:	4806      	ldr	r0, [pc, #24]	; (800f1ec <USART3_8_IRQHandler+0x1c>)
 800f1d4:	f005 fea9 	bl	8014f2a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800f1d8:	4805      	ldr	r0, [pc, #20]	; (800f1f0 <USART3_8_IRQHandler+0x20>)
 800f1da:	f005 fea6 	bl	8014f2a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800f1de:	4805      	ldr	r0, [pc, #20]	; (800f1f4 <USART3_8_IRQHandler+0x24>)
 800f1e0:	f005 fea3 	bl	8014f2a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800f1e4:	4804      	ldr	r0, [pc, #16]	; (800f1f8 <USART3_8_IRQHandler+0x28>)
 800f1e6:	f005 fea0 	bl	8014f2a <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800f1ea:	bd10      	pop	{r4, pc}
 800f1ec:	20007170 	.word	0x20007170
 800f1f0:	2000733c 	.word	0x2000733c
 800f1f4:	200071e4 	.word	0x200071e4
 800f1f8:	200072cc 	.word	0x200072cc

0800f1fc <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800f1fc:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800f1fe:	2001      	movs	r0, #1
 800f200:	f7f8 fc66 	bl	8007ad0 <DMA_IRQHandler>
	
}
 800f204:	bd10      	pop	{r4, pc}
	...

0800f208 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800f208:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800f20a:	4b0c      	ldr	r3, [pc, #48]	; (800f23c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	06db      	lsls	r3, r3, #27
 800f210:	d408      	bmi.n	800f224 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800f212:	4b0b      	ldr	r3, [pc, #44]	; (800f240 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	05db      	lsls	r3, r3, #23
 800f218:	d408      	bmi.n	800f22c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800f21a:	4b09      	ldr	r3, [pc, #36]	; (800f240 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	06db      	lsls	r3, r3, #27
 800f220:	d408      	bmi.n	800f234 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800f222:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800f224:	2005      	movs	r0, #5
 800f226:	f7f8 fc53 	bl	8007ad0 <DMA_IRQHandler>
 800f22a:	e7fa      	b.n	800f222 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800f22c:	2002      	movs	r0, #2
 800f22e:	f7f8 fc4f 	bl	8007ad0 <DMA_IRQHandler>
 800f232:	e7f6      	b.n	800f222 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800f234:	4803      	ldr	r0, [pc, #12]	; (800f244 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800f236:	f003 fb2f 	bl	8012898 <HAL_DMA_IRQHandler>
}
 800f23a:	e7f2      	b.n	800f222 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800f23c:	40020400 	.word	0x40020400
 800f240:	40020000 	.word	0x40020000
 800f244:	20001f6c 	.word	0x20001f6c

0800f248 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800f248:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800f24a:	4b14      	ldr	r3, [pc, #80]	; (800f29c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	03db      	lsls	r3, r3, #15
 800f250:	d413      	bmi.n	800f27a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800f252:	4b12      	ldr	r3, [pc, #72]	; (800f29c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	02db      	lsls	r3, r3, #11
 800f258:	d413      	bmi.n	800f282 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800f25a:	4b11      	ldr	r3, [pc, #68]	; (800f2a0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	05db      	lsls	r3, r3, #23
 800f260:	d413      	bmi.n	800f28a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800f262:	4b0e      	ldr	r3, [pc, #56]	; (800f29c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	04db      	lsls	r3, r3, #19
 800f268:	d413      	bmi.n	800f292 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800f26a:	4b0c      	ldr	r3, [pc, #48]	; (800f29c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	01db      	lsls	r3, r3, #7
 800f270:	d506      	bpl.n	800f280 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800f272:	480c      	ldr	r0, [pc, #48]	; (800f2a4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800f274:	f003 fb10 	bl	8012898 <HAL_DMA_IRQHandler>
	}
}
 800f278:	e002      	b.n	800f280 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800f27a:	2003      	movs	r0, #3
 800f27c:	f7f8 fc28 	bl	8007ad0 <DMA_IRQHandler>
}
 800f280:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800f282:	2004      	movs	r0, #4
 800f284:	f7f8 fc24 	bl	8007ad0 <DMA_IRQHandler>
 800f288:	e7fa      	b.n	800f280 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800f28a:	2006      	movs	r0, #6
 800f28c:	f7f8 fc20 	bl	8007ad0 <DMA_IRQHandler>
 800f290:	e7f6      	b.n	800f280 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800f292:	4805      	ldr	r0, [pc, #20]	; (800f2a8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800f294:	f003 fb00 	bl	8012898 <HAL_DMA_IRQHandler>
 800f298:	e7f2      	b.n	800f280 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800f29a:	46c0      	nop			; (mov r8, r8)
 800f29c:	40020000 	.word	0x40020000
 800f2a0:	40020400 	.word	0x40020400
 800f2a4:	20001fdc 	.word	0x20001fdc
 800f2a8:	20001fa4 	.word	0x20001fa4

0800f2ac <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f2ac:	b510      	push	{r4, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800f2b6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d001      	beq.n	800f2c0 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800f2bc:	f7fe fce4 	bl	800dc88 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800f2c0:	0020      	movs	r0, r4
 800f2c2:	f7fc ff8d 	bl	800c1e0 <GetPort>
 800f2c6:	0080      	lsls	r0, r0, #2
 800f2c8:	4b03      	ldr	r3, [pc, #12]	; (800f2d8 <HAL_UART_TxCpltCallback+0x2c>)
 800f2ca:	58c0      	ldr	r0, [r0, r3]
 800f2cc:	a901      	add	r1, sp, #4
 800f2ce:	f001 f91f 	bl	8010510 <xQueueGiveFromISR>
}
 800f2d2:	b002      	add	sp, #8
 800f2d4:	bd10      	pop	{r4, pc}
 800f2d6:	46c0      	nop			; (mov r8, r8)
 800f2d8:	200070cc 	.word	0x200070cc

0800f2dc <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f2dc:	b510      	push	{r4, lr}
 800f2de:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800f2e0:	2369      	movs	r3, #105	; 0x69
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800f2e6:	f7fc ff7b 	bl	800c1e0 <GetPort>
	if (portStatus[port] == STREAM) {
 800f2ea:	4b0b      	ldr	r3, [pc, #44]	; (800f318 <HAL_UART_ErrorCallback+0x3c>)
 800f2ec:	5c1b      	ldrb	r3, [r3, r0]
 800f2ee:	2b02      	cmp	r3, #2
 800f2f0:	d004      	beq.n	800f2fc <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800f2f2:	3801      	subs	r0, #1
 800f2f4:	4b09      	ldr	r3, [pc, #36]	; (800f31c <HAL_UART_ErrorCallback+0x40>)
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	541a      	strb	r2, [r3, r0]
	}	
}
 800f2fa:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800f2fc:	3801      	subs	r0, #1
 800f2fe:	0080      	lsls	r0, r0, #2
 800f300:	4b07      	ldr	r3, [pc, #28]	; (800f320 <HAL_UART_ErrorCallback+0x44>)
 800f302:	58c3      	ldr	r3, [r0, r3]
 800f304:	6819      	ldr	r1, [r3, #0]
 800f306:	3128      	adds	r1, #40	; 0x28
 800f308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	b292      	uxth	r2, r2
 800f310:	0020      	movs	r0, r4
 800f312:	f005 f9ef 	bl	80146f4 <HAL_UART_Receive_DMA>
 800f316:	e7f0      	b.n	800f2fa <HAL_UART_ErrorCallback+0x1e>
 800f318:	200010ec 	.word	0x200010ec
 800f31c:	200012c0 	.word	0x200012c0
 800f320:	200016dc 	.word	0x200016dc

0800f324 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f324:	b510      	push	{r4, lr}
 800f326:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800f328:	f7fc ff5a 	bl	800c1e0 <GetPort>
 800f32c:	4b12      	ldr	r3, [pc, #72]	; (800f378 <HAL_UART_RxCpltCallback+0x54>)
 800f32e:	5c1b      	ldrb	r3, [r3, r0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d006      	beq.n	800f342 <HAL_UART_RxCpltCallback+0x1e>
 800f334:	0020      	movs	r0, r4
 800f336:	f7fc ff53 	bl	800c1e0 <GetPort>
 800f33a:	4b0f      	ldr	r3, [pc, #60]	; (800f378 <HAL_UART_RxCpltCallback+0x54>)
 800f33c:	5c1b      	ldrb	r3, [r3, r0]
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d118      	bne.n	800f374 <HAL_UART_RxCpltCallback+0x50>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOSMessaging.overrun = GetPort(huart);
 800f342:	0020      	movs	r0, r4
 800f344:	f7fc ff4c 	bl	800c1e0 <GetPort>
 800f348:	4b0c      	ldr	r3, [pc, #48]	; (800f37c <HAL_UART_RxCpltCallback+0x58>)
 800f34a:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800f34c:	0020      	movs	r0, r4
 800f34e:	f7fc ff47 	bl	800c1e0 <GetPort>
 800f352:	4b09      	ldr	r3, [pc, #36]	; (800f378 <HAL_UART_RxCpltCallback+0x54>)
 800f354:	2205      	movs	r2, #5
 800f356:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800f358:	0020      	movs	r0, r4
 800f35a:	f7fc ff41 	bl	800c1e0 <GetPort>
 800f35e:	3801      	subs	r0, #1
 800f360:	4b07      	ldr	r3, [pc, #28]	; (800f380 <HAL_UART_RxCpltCallback+0x5c>)
 800f362:	2200      	movs	r2, #0
 800f364:	541a      	strb	r2, [r3, r0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800f366:	0020      	movs	r0, r4
 800f368:	f7fc ff3a 	bl	800c1e0 <GetPort>
 800f36c:	3801      	subs	r0, #1
 800f36e:	4b05      	ldr	r3, [pc, #20]	; (800f384 <HAL_UART_RxCpltCallback+0x60>)
 800f370:	2201      	movs	r2, #1
 800f372:	541a      	strb	r2, [r3, r0]
	}

}
 800f374:	bd10      	pop	{r4, pc}
 800f376:	46c0      	nop			; (mov r8, r8)
 800f378:	200010ec 	.word	0x200010ec
 800f37c:	20006fcc 	.word	0x20006fcc
 800f380:	20001688 	.word	0x20001688
 800f384:	200012c0 	.word	0x200012c0

0800f388 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800f388:	b672      	cpsid	i
 800f38a:	e7fe      	b.n	800f38a <vApplicationStackOverflowHook+0x2>

0800f38c <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800f38c:	b672      	cpsid	i
 800f38e:	e7fe      	b.n	800f38e <vApplicationMallocFailedHook+0x2>

0800f390 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800f390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f392:	46d6      	mov	lr, sl
 800f394:	464f      	mov	r7, r9
 800f396:	4646      	mov	r6, r8
 800f398:	b5c0      	push	{r6, r7, lr}
 800f39a:	b08c      	sub	sp, #48	; 0x30
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800f39c:	ac03      	add	r4, sp, #12
 800f39e:	4b37      	ldr	r3, [pc, #220]	; (800f47c <RTC_CalendarConfig+0xec>)
 800f3a0:	0022      	movs	r2, r4
 800f3a2:	cb43      	ldmia	r3!, {r0, r1, r6}
 800f3a4:	c243      	stmia	r2!, {r0, r1, r6}
 800f3a6:	466b      	mov	r3, sp
 800f3a8:	4a35      	ldr	r2, [pc, #212]	; (800f480 <RTC_CalendarConfig+0xf0>)
 800f3aa:	ca03      	ldmia	r2!, {r0, r1}
 800f3ac:	c303      	stmia	r3!, {r0, r1}
 800f3ae:	0019      	movs	r1, r3
 800f3b0:	7813      	ldrb	r3, [r2, #0]
 800f3b2:	700b      	strb	r3, [r1, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800f3b4:	2015      	movs	r0, #21
 800f3b6:	4468      	add	r0, sp
 800f3b8:	f005 fe3f 	bl	801503a <atoi>
 800f3bc:	b2c7      	uxtb	r7, r0
  *(comDate + 6) = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	4698      	mov	r8, r3
 800f3c2:	71a3      	strb	r3, [r4, #6]
  day = atoi(comDate + 4);
 800f3c4:	a804      	add	r0, sp, #16
 800f3c6:	f005 fe38 	bl	801503a <atoi>
 800f3ca:	b2c6      	uxtb	r6, r0
  *(comDate + 3) = 0;
 800f3cc:	4643      	mov	r3, r8
 800f3ce:	70e3      	strb	r3, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800f3d0:	2400      	movs	r4, #0
 800f3d2:	e001      	b.n	800f3d8 <RTC_CalendarConfig+0x48>
 800f3d4:	3401      	adds	r4, #1
 800f3d6:	b2e4      	uxtb	r4, r4
 800f3d8:	2c0b      	cmp	r4, #11
 800f3da:	d80a      	bhi.n	800f3f2 <RTC_CalendarConfig+0x62>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800f3dc:	00a3      	lsls	r3, r4, #2
 800f3de:	4a29      	ldr	r2, [pc, #164]	; (800f484 <RTC_CalendarConfig+0xf4>)
 800f3e0:	5899      	ldr	r1, [r3, r2]
 800f3e2:	a803      	add	r0, sp, #12
 800f3e4:	f7f0 fe8e 	bl	8000104 <strcmp>
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	d1f3      	bne.n	800f3d4 <RTC_CalendarConfig+0x44>
			month = i + 1;
 800f3ec:	1c65      	adds	r5, r4, #1
 800f3ee:	b2ed      	uxtb	r5, r5
 800f3f0:	e7f0      	b.n	800f3d4 <RTC_CalendarConfig+0x44>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800f3f2:	466b      	mov	r3, sp
 800f3f4:	1d98      	adds	r0, r3, #6
 800f3f6:	f005 fe20 	bl	801503a <atoi>
 800f3fa:	b2c3      	uxtb	r3, r0
 800f3fc:	4698      	mov	r8, r3
	*(comDate + 5) = 0;
 800f3fe:	ac03      	add	r4, sp, #12
 800f400:	2300      	movs	r3, #0
 800f402:	469a      	mov	sl, r3
 800f404:	7163      	strb	r3, [r4, #5]
	minutes = atoi(comTime + 3);
 800f406:	466b      	mov	r3, sp
 800f408:	1cd8      	adds	r0, r3, #3
 800f40a:	f005 fe16 	bl	801503a <atoi>
 800f40e:	b2c3      	uxtb	r3, r0
 800f410:	4699      	mov	r9, r3
	*(comDate + 2) = 0;
 800f412:	4653      	mov	r3, sl
 800f414:	70a3      	strb	r3, [r4, #2]
	hours = atoi(comTime);
 800f416:	4668      	mov	r0, sp
 800f418:	f005 fe0f 	bl	801503a <atoi>
 800f41c:	b2c4      	uxtb	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800f41e:	a90b      	add	r1, sp, #44	; 0x2c
 800f420:	70cf      	strb	r7, [r1, #3]
  sdatestructure.Month = month;
 800f422:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800f424:	708e      	strb	r6, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800f426:	2301      	movs	r3, #1
 800f428:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800f42a:	2200      	movs	r2, #0
 800f42c:	4816      	ldr	r0, [pc, #88]	; (800f488 <RTC_CalendarConfig+0xf8>)
 800f42e:	f004 fed9 	bl	80141e4 <HAL_RTC_SetDate>
 800f432:	2800      	cmp	r0, #0
 800f434:	d119      	bne.n	800f46a <RTC_CalendarConfig+0xda>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800f436:	a906      	add	r1, sp, #24
 800f438:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800f43a:	464b      	mov	r3, r9
 800f43c:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800f43e:	4643      	mov	r3, r8
 800f440:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800f442:	2300      	movs	r3, #0
 800f444:	720b      	strb	r3, [r1, #8]
 800f446:	4a11      	ldr	r2, [pc, #68]	; (800f48c <RTC_CalendarConfig+0xfc>)
 800f448:	3018      	adds	r0, #24
 800f44a:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f44c:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800f44e:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800f450:	2200      	movs	r2, #0
 800f452:	480d      	ldr	r0, [pc, #52]	; (800f488 <RTC_CalendarConfig+0xf8>)
 800f454:	f004 fe48 	bl	80140e8 <HAL_RTC_SetTime>
 800f458:	2800      	cmp	r0, #0
 800f45a:	d10d      	bne.n	800f478 <RTC_CalendarConfig+0xe8>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800f45c:	4a0c      	ldr	r2, [pc, #48]	; (800f490 <RTC_CalendarConfig+0x100>)
 800f45e:	2101      	movs	r1, #1
 800f460:	4809      	ldr	r0, [pc, #36]	; (800f488 <RTC_CalendarConfig+0xf8>)
 800f462:	f004 ff81 	bl	8014368 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800f466:	2000      	movs	r0, #0
 800f468:	e000      	b.n	800f46c <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;
 800f46a:	20ff      	movs	r0, #255	; 0xff
}
 800f46c:	b00c      	add	sp, #48	; 0x30
 800f46e:	bc1c      	pop	{r2, r3, r4}
 800f470:	4690      	mov	r8, r2
 800f472:	4699      	mov	r9, r3
 800f474:	46a2      	mov	sl, r4
 800f476:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800f478:	20ff      	movs	r0, #255	; 0xff
 800f47a:	e7f7      	b.n	800f46c <RTC_CalendarConfig+0xdc>
 800f47c:	08019f50 	.word	0x08019f50
 800f480:	0801d2e4 	.word	0x0801d2e4
 800f484:	20000028 	.word	0x20000028
 800f488:	2000744c 	.word	0x2000744c
 800f48c:	2000704c 	.word	0x2000704c
 800f490:	000032f2 	.word	0x000032f2

0800f494 <RTC_Init>:
{
 800f494:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800f496:	4a1c      	ldr	r2, [pc, #112]	; (800f508 <RTC_Init+0x74>)
 800f498:	6a11      	ldr	r1, [r2, #32]
 800f49a:	2380      	movs	r3, #128	; 0x80
 800f49c:	021b      	lsls	r3, r3, #8
 800f49e:	430b      	orrs	r3, r1
 800f4a0:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800f4a2:	481a      	ldr	r0, [pc, #104]	; (800f50c <RTC_Init+0x78>)
 800f4a4:	4b1a      	ldr	r3, [pc, #104]	; (800f510 <RTC_Init+0x7c>)
 800f4a6:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800f4ac:	227c      	movs	r2, #124	; 0x7c
 800f4ae:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800f4b0:	4a18      	ldr	r2, [pc, #96]	; (800f514 <RTC_Init+0x80>)
 800f4b2:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800f4b4:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f4b6:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f4b8:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800f4ba:	f004 fdb9 	bl	8014030 <HAL_RTC_Init>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d11f      	bne.n	800f502 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800f4c2:	2101      	movs	r1, #1
 800f4c4:	4811      	ldr	r0, [pc, #68]	; (800f50c <RTC_Init+0x78>)
 800f4c6:	f004 ff55 	bl	8014374 <HAL_RTCEx_BKUPRead>
 800f4ca:	4b13      	ldr	r3, [pc, #76]	; (800f518 <RTC_Init+0x84>)
 800f4cc:	4298      	cmp	r0, r3
 800f4ce:	d10e      	bne.n	800f4ee <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800f4d0:	4b0d      	ldr	r3, [pc, #52]	; (800f508 <RTC_Init+0x74>)
 800f4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d4:	011b      	lsls	r3, r3, #4
 800f4d6:	d502      	bpl.n	800f4de <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800f4d8:	4b10      	ldr	r3, [pc, #64]	; (800f51c <RTC_Init+0x88>)
 800f4da:	2200      	movs	r2, #0
 800f4dc:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800f4de:	4b0a      	ldr	r3, [pc, #40]	; (800f508 <RTC_Init+0x74>)
 800f4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e2:	015b      	lsls	r3, r3, #5
 800f4e4:	d505      	bpl.n	800f4f2 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800f4e6:	4b0d      	ldr	r3, [pc, #52]	; (800f51c <RTC_Init+0x88>)
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	701a      	strb	r2, [r3, #0]
 800f4ec:	e001      	b.n	800f4f2 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800f4ee:	f7ff ff4f 	bl	800f390 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800f4f2:	4a05      	ldr	r2, [pc, #20]	; (800f508 <RTC_Init+0x74>)
 800f4f4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800f4f6:	2380      	movs	r3, #128	; 0x80
 800f4f8:	045b      	lsls	r3, r3, #17
 800f4fa:	430b      	orrs	r3, r1
 800f4fc:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800f4fe:	2000      	movs	r0, #0
}
 800f500:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800f502:	20ff      	movs	r0, #255	; 0xff
 800f504:	e7fc      	b.n	800f500 <RTC_Init+0x6c>
 800f506:	46c0      	nop			; (mov r8, r8)
 800f508:	40021000 	.word	0x40021000
 800f50c:	2000744c 	.word	0x2000744c
 800f510:	40002800 	.word	0x40002800
 800f514:	000007cf 	.word	0x000007cf
 800f518:	000032f2 	.word	0x000032f2
 800f51c:	20002164 	.word	0x20002164

0800f520 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800f520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f522:	46c6      	mov	lr, r8
 800f524:	b500      	push	{lr}
 800f526:	b086      	sub	sp, #24
 800f528:	ac0c      	add	r4, sp, #48	; 0x30
 800f52a:	7827      	ldrb	r7, [r4, #0]
 800f52c:	ac0d      	add	r4, sp, #52	; 0x34
 800f52e:	7824      	ldrb	r4, [r4, #0]
 800f530:	46a0      	mov	r8, r4
 800f532:	ac0e      	add	r4, sp, #56	; 0x38
 800f534:	7825      	ldrb	r5, [r4, #0]
 800f536:	ac0f      	add	r4, sp, #60	; 0x3c
 800f538:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800f53a:	3230      	adds	r2, #48	; 0x30
 800f53c:	ac05      	add	r4, sp, #20
 800f53e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800f540:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800f542:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800f544:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800f546:	2200      	movs	r2, #0
 800f548:	0021      	movs	r1, r4
 800f54a:	481f      	ldr	r0, [pc, #124]	; (800f5c8 <BOS_CalendarConfig+0xa8>)
 800f54c:	f004 fe4a 	bl	80141e4 <HAL_RTC_SetDate>
 800f550:	2800      	cmp	r0, #0
 800f552:	d134      	bne.n	800f5be <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800f554:	466b      	mov	r3, sp
 800f556:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800f558:	4642      	mov	r2, r8
 800f55a:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800f55c:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800f55e:	2300      	movs	r3, #0
 800f560:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800f562:	2e01      	cmp	r6, #1
 800f564:	d01e      	beq.n	800f5a4 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800f566:	2e02      	cmp	r6, #2
 800f568:	d022      	beq.n	800f5b0 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800f56a:	4b18      	ldr	r3, [pc, #96]	; (800f5cc <BOS_CalendarConfig+0xac>)
 800f56c:	2218      	movs	r2, #24
 800f56e:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800f570:	2200      	movs	r2, #0
 800f572:	4669      	mov	r1, sp
 800f574:	4814      	ldr	r0, [pc, #80]	; (800f5c8 <BOS_CalendarConfig+0xa8>)
 800f576:	f004 fdb7 	bl	80140e8 <HAL_RTC_SetTime>
 800f57a:	2800      	cmp	r0, #0
 800f57c:	d121      	bne.n	800f5c2 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800f57e:	4a13      	ldr	r2, [pc, #76]	; (800f5cc <BOS_CalendarConfig+0xac>)
 800f580:	7b53      	ldrb	r3, [r2, #13]
 800f582:	021b      	lsls	r3, r3, #8
 800f584:	7911      	ldrb	r1, [r2, #4]
 800f586:	4319      	orrs	r1, r3
 800f588:	308d      	adds	r0, #141	; 0x8d
 800f58a:	0040      	lsls	r0, r0, #1
 800f58c:	f7f8 fc20 	bl	8007dd0 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800f590:	4a0f      	ldr	r2, [pc, #60]	; (800f5d0 <BOS_CalendarConfig+0xb0>)
 800f592:	2101      	movs	r1, #1
 800f594:	480c      	ldr	r0, [pc, #48]	; (800f5c8 <BOS_CalendarConfig+0xa8>)
 800f596:	f004 fee7 	bl	8014368 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800f59a:	2000      	movs	r0, #0
}
 800f59c:	b006      	add	sp, #24
 800f59e:	bc04      	pop	{r2}
 800f5a0:	4690      	mov	r8, r2
 800f5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800f5a4:	466a      	mov	r2, sp
 800f5a6:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800f5a8:	4b08      	ldr	r3, [pc, #32]	; (800f5cc <BOS_CalendarConfig+0xac>)
 800f5aa:	220c      	movs	r2, #12
 800f5ac:	735a      	strb	r2, [r3, #13]
 800f5ae:	e7df      	b.n	800f570 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800f5b0:	2340      	movs	r3, #64	; 0x40
 800f5b2:	466a      	mov	r2, sp
 800f5b4:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800f5b6:	4b05      	ldr	r3, [pc, #20]	; (800f5cc <BOS_CalendarConfig+0xac>)
 800f5b8:	220c      	movs	r2, #12
 800f5ba:	735a      	strb	r2, [r3, #13]
 800f5bc:	e7d8      	b.n	800f570 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800f5be:	20ff      	movs	r0, #255	; 0xff
 800f5c0:	e7ec      	b.n	800f59c <BOS_CalendarConfig+0x7c>
		return BOS_ERROR;
 800f5c2:	20ff      	movs	r0, #255	; 0xff
 800f5c4:	e7ea      	b.n	800f59c <BOS_CalendarConfig+0x7c>
 800f5c6:	46c0      	nop			; (mov r8, r8)
 800f5c8:	2000744c 	.word	0x2000744c
 800f5cc:	2000704c 	.word	0x2000704c
 800f5d0:	000032f2 	.word	0x000032f2

0800f5d4 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800f5d4:	b530      	push	{r4, r5, lr}
 800f5d6:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800f5d8:	4d16      	ldr	r5, [pc, #88]	; (800f634 <GetTimeDate+0x60>)
 800f5da:	2200      	movs	r2, #0
 800f5dc:	a902      	add	r1, sp, #8
 800f5de:	0028      	movs	r0, r5
 800f5e0:	f004 fe76 	bl	80142d0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800f5e4:	ac07      	add	r4, sp, #28
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	0021      	movs	r1, r4
 800f5ea:	0028      	movs	r0, r5
 800f5ec:	f004 fe98 	bl	8014320 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800f5f0:	ab02      	add	r3, sp, #8
 800f5f2:	7a1a      	ldrb	r2, [r3, #8]
 800f5f4:	09d2      	lsrs	r2, r2, #7
 800f5f6:	3201      	adds	r2, #1
 800f5f8:	4b0f      	ldr	r3, [pc, #60]	; (800f638 <GetTimeDate+0x64>)
 800f5fa:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800f5fc:	9a03      	ldr	r2, [sp, #12]
 800f5fe:	9201      	str	r2, [sp, #4]
 800f600:	0852      	lsrs	r2, r2, #1
 800f602:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800f604:	aa02      	add	r2, sp, #8
 800f606:	7892      	ldrb	r2, [r2, #2]
 800f608:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800f60a:	aa02      	add	r2, sp, #8
 800f60c:	7852      	ldrb	r2, [r2, #1]
 800f60e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800f610:	aa02      	add	r2, sp, #8
 800f612:	7812      	ldrb	r2, [r2, #0]
 800f614:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800f616:	78a2      	ldrb	r2, [r4, #2]
 800f618:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800f61a:	7862      	ldrb	r2, [r4, #1]
 800f61c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800f61e:	7822      	ldrb	r2, [r4, #0]
 800f620:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800f622:	78e2      	ldrb	r2, [r4, #3]
 800f624:	21fa      	movs	r1, #250	; 0xfa
 800f626:	00c9      	lsls	r1, r1, #3
 800f628:	468c      	mov	ip, r1
 800f62a:	4462      	add	r2, ip
 800f62c:	831a      	strh	r2, [r3, #24]
}
 800f62e:	b009      	add	sp, #36	; 0x24
 800f630:	bd30      	pop	{r4, r5, pc}
 800f632:	46c0      	nop			; (mov r8, r8)
 800f634:	2000744c 	.word	0x2000744c
 800f638:	2000704c 	.word	0x2000704c

0800f63c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800f63c:	b530      	push	{r4, r5, lr}
 800f63e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800f640:	4a12      	ldr	r2, [pc, #72]	; (800f68c <TIM_USEC_Init+0x50>)
 800f642:	69d1      	ldr	r1, [r2, #28]
 800f644:	2080      	movs	r0, #128	; 0x80
 800f646:	0040      	lsls	r0, r0, #1
 800f648:	4301      	orrs	r1, r0
 800f64a:	61d1      	str	r1, [r2, #28]
 800f64c:	69d3      	ldr	r3, [r2, #28]
 800f64e:	4003      	ands	r3, r0
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800f654:	4c0e      	ldr	r4, [pc, #56]	; (800f690 <TIM_USEC_Init+0x54>)
 800f656:	4b0f      	ldr	r3, [pc, #60]	; (800f694 <TIM_USEC_Init+0x58>)
 800f658:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800f65a:	f004 fc09 	bl	8013e70 <HAL_RCC_GetPCLK1Freq>
 800f65e:	490e      	ldr	r1, [pc, #56]	; (800f698 <TIM_USEC_Init+0x5c>)
 800f660:	f7f0 fd76 	bl	8000150 <__udivsi3>
 800f664:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f666:	2500      	movs	r5, #0
 800f668:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800f66a:	4b0c      	ldr	r3, [pc, #48]	; (800f69c <TIM_USEC_Init+0x60>)
 800f66c:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800f66e:	0020      	movs	r0, r4
 800f670:	f004 fee2 	bl	8014438 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f674:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f676:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800f678:	a902      	add	r1, sp, #8
 800f67a:	0020      	movs	r0, r4
 800f67c:	f004 fef6 	bl	801446c <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800f680:	0020      	movs	r0, r4
 800f682:	f004 fe7e 	bl	8014382 <HAL_TIM_Base_Start>
}
 800f686:	b005      	add	sp, #20
 800f688:	bd30      	pop	{r4, r5, pc}
 800f68a:	46c0      	nop			; (mov r8, r8)
 800f68c:	40021000 	.word	0x40021000
 800f690:	200074a8 	.word	0x200074a8
 800f694:	40002000 	.word	0x40002000
 800f698:	000f4240 	.word	0x000f4240
 800f69c:	0000ffff 	.word	0x0000ffff

0800f6a0 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800f6a0:	b530      	push	{r4, r5, lr}
 800f6a2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800f6a4:	4a12      	ldr	r2, [pc, #72]	; (800f6f0 <TIM_MSEC_Init+0x50>)
 800f6a6:	6991      	ldr	r1, [r2, #24]
 800f6a8:	2080      	movs	r0, #128	; 0x80
 800f6aa:	0240      	lsls	r0, r0, #9
 800f6ac:	4301      	orrs	r1, r0
 800f6ae:	6191      	str	r1, [r2, #24]
 800f6b0:	6993      	ldr	r3, [r2, #24]
 800f6b2:	4003      	ands	r3, r0
 800f6b4:	9301      	str	r3, [sp, #4]
 800f6b6:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800f6b8:	4c0e      	ldr	r4, [pc, #56]	; (800f6f4 <TIM_MSEC_Init+0x54>)
 800f6ba:	4b0f      	ldr	r3, [pc, #60]	; (800f6f8 <TIM_MSEC_Init+0x58>)
 800f6bc:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800f6be:	f004 fbd7 	bl	8013e70 <HAL_RCC_GetPCLK1Freq>
 800f6c2:	21fa      	movs	r1, #250	; 0xfa
 800f6c4:	0089      	lsls	r1, r1, #2
 800f6c6:	f7f0 fd43 	bl	8000150 <__udivsi3>
 800f6ca:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f6cc:	2500      	movs	r5, #0
 800f6ce:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800f6d0:	4b0a      	ldr	r3, [pc, #40]	; (800f6fc <TIM_MSEC_Init+0x5c>)
 800f6d2:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800f6d4:	0020      	movs	r0, r4
 800f6d6:	f004 feaf 	bl	8014438 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f6da:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f6dc:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800f6de:	a902      	add	r1, sp, #8
 800f6e0:	0020      	movs	r0, r4
 800f6e2:	f004 fec3 	bl	801446c <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800f6e6:	0020      	movs	r0, r4
 800f6e8:	f004 fe4b 	bl	8014382 <HAL_TIM_Base_Start>
}
 800f6ec:	b005      	add	sp, #20
 800f6ee:	bd30      	pop	{r4, r5, pc}
 800f6f0:	40021000 	.word	0x40021000
 800f6f4:	2000746c 	.word	0x2000746c
 800f6f8:	40014000 	.word	0x40014000
 800f6fc:	0000ffff 	.word	0x0000ffff

0800f700 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800f700:	b510      	push	{r4, lr}
 800f702:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800f704:	f002 f9ea 	bl	8011adc <vPortEnterCritical>
	
	if (Delay)
 800f708:	2c00      	cmp	r4, #0
 800f70a:	d006      	beq.n	800f71a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800f70c:	4b04      	ldr	r3, [pc, #16]	; (800f720 <StartMicroDelay+0x20>)
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800f712:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f714:	1a5b      	subs	r3, r3, r1
 800f716:	42a3      	cmp	r3, r4
 800f718:	d9fb      	bls.n	800f712 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800f71a:	f002 f9eb 	bl	8011af4 <vPortExitCritical>
}
 800f71e:	bd10      	pop	{r4, pc}
 800f720:	200074a8 	.word	0x200074a8

0800f724 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800f724:	b510      	push	{r4, lr}
 800f726:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800f728:	f002 f9d8 	bl	8011adc <vPortEnterCritical>
	
	if (Delay)
 800f72c:	2c00      	cmp	r4, #0
 800f72e:	d006      	beq.n	800f73e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800f730:	4b04      	ldr	r3, [pc, #16]	; (800f744 <StartMilliDelay+0x20>)
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800f736:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f738:	1a5b      	subs	r3, r3, r1
 800f73a:	42a3      	cmp	r3, r4
 800f73c:	d9fb      	bls.n	800f736 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800f73e:	f002 f9d9 	bl	8011af4 <vPortExitCritical>
}
 800f742:	bd10      	pop	{r4, pc}
 800f744:	2000746c 	.word	0x2000746c

0800f748 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800f748:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800f74a:	4809      	ldr	r0, [pc, #36]	; (800f770 <MX_USART2_UART_Init+0x28>)
 800f74c:	4b09      	ldr	r3, [pc, #36]	; (800f774 <MX_USART2_UART_Init+0x2c>)
 800f74e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f750:	23e1      	movs	r3, #225	; 0xe1
 800f752:	031b      	lsls	r3, r3, #12
 800f754:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f756:	2300      	movs	r3, #0
 800f758:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800f75a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800f75c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f75e:	220c      	movs	r2, #12
 800f760:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f762:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f764:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f766:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f768:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800f76a:	f005 fb05 	bl	8014d78 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800f76e:	bd10      	pop	{r4, pc}
 800f770:	200073b0 	.word	0x200073b0
 800f774:	40004400 	.word	0x40004400

0800f778 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800f778:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800f77a:	4809      	ldr	r0, [pc, #36]	; (800f7a0 <MX_USART3_UART_Init+0x28>)
 800f77c:	4b09      	ldr	r3, [pc, #36]	; (800f7a4 <MX_USART3_UART_Init+0x2c>)
 800f77e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f780:	23e1      	movs	r3, #225	; 0xe1
 800f782:	031b      	lsls	r3, r3, #12
 800f784:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800f786:	2300      	movs	r3, #0
 800f788:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800f78a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800f78c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800f78e:	220c      	movs	r2, #12
 800f790:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f792:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800f794:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f796:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f798:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800f79a:	f005 faed 	bl	8014d78 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800f79e:	bd10      	pop	{r4, pc}
 800f7a0:	20007170 	.word	0x20007170
 800f7a4:	40004800 	.word	0x40004800

0800f7a8 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800f7a8:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800f7aa:	4809      	ldr	r0, [pc, #36]	; (800f7d0 <MX_USART4_UART_Init+0x28>)
 800f7ac:	4b09      	ldr	r3, [pc, #36]	; (800f7d4 <MX_USART4_UART_Init+0x2c>)
 800f7ae:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f7b0:	23e1      	movs	r3, #225	; 0xe1
 800f7b2:	031b      	lsls	r3, r3, #12
 800f7b4:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800f7ba:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800f7bc:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800f7be:	220c      	movs	r2, #12
 800f7c0:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f7c2:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800f7c4:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f7c6:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f7c8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800f7ca:	f005 fad5 	bl	8014d78 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800f7ce:	bd10      	pop	{r4, pc}
 800f7d0:	2000733c 	.word	0x2000733c
 800f7d4:	40004c00 	.word	0x40004c00

0800f7d8 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800f7d8:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800f7da:	4809      	ldr	r0, [pc, #36]	; (800f800 <MX_USART5_UART_Init+0x28>)
 800f7dc:	4b09      	ldr	r3, [pc, #36]	; (800f804 <MX_USART5_UART_Init+0x2c>)
 800f7de:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f7e0:	23e1      	movs	r3, #225	; 0xe1
 800f7e2:	031b      	lsls	r3, r3, #12
 800f7e4:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800f7ea:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800f7ec:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800f7ee:	220c      	movs	r2, #12
 800f7f0:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f7f2:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800f7f4:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f7f6:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f7f8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800f7fa:	f005 fabd 	bl	8014d78 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800f7fe:	bd10      	pop	{r4, pc}
 800f800:	200071e4 	.word	0x200071e4
 800f804:	40005000 	.word	0x40005000

0800f808 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800f808:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800f80a:	4809      	ldr	r0, [pc, #36]	; (800f830 <MX_USART6_UART_Init+0x28>)
 800f80c:	4b09      	ldr	r3, [pc, #36]	; (800f834 <MX_USART6_UART_Init+0x2c>)
 800f80e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f810:	23e1      	movs	r3, #225	; 0xe1
 800f812:	031b      	lsls	r3, r3, #12
 800f814:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800f816:	2300      	movs	r3, #0
 800f818:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800f81a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800f81c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800f81e:	220c      	movs	r2, #12
 800f820:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f822:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800f824:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f826:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f828:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800f82a:	f005 faa5 	bl	8014d78 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800f82e:	bd10      	pop	{r4, pc}
 800f830:	200072cc 	.word	0x200072cc
 800f834:	40011400 	.word	0x40011400

0800f838 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f83a:	46ce      	mov	lr, r9
 800f83c:	b500      	push	{lr}
 800f83e:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800f840:	6803      	ldr	r3, [r0, #0]
 800f842:	4a7a      	ldr	r2, [pc, #488]	; (800fa2c <HAL_UART_MspInit+0x1f4>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d010      	beq.n	800f86a <HAL_UART_MspInit+0x32>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800f848:	4a79      	ldr	r2, [pc, #484]	; (800fa30 <HAL_UART_MspInit+0x1f8>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d011      	beq.n	800f872 <HAL_UART_MspInit+0x3a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800f84e:	4a79      	ldr	r2, [pc, #484]	; (800fa34 <HAL_UART_MspInit+0x1fc>)
 800f850:	4293      	cmp	r3, r2
 800f852:	d03a      	beq.n	800f8ca <HAL_UART_MspInit+0x92>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800f854:	4a78      	ldr	r2, [pc, #480]	; (800fa38 <HAL_UART_MspInit+0x200>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d064      	beq.n	800f924 <HAL_UART_MspInit+0xec>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800f85a:	4a78      	ldr	r2, [pc, #480]	; (800fa3c <HAL_UART_MspInit+0x204>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d100      	bne.n	800f862 <HAL_UART_MspInit+0x2a>
 800f860:	e08b      	b.n	800f97a <HAL_UART_MspInit+0x142>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800f862:	4a77      	ldr	r2, [pc, #476]	; (800fa40 <HAL_UART_MspInit+0x208>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d100      	bne.n	800f86a <HAL_UART_MspInit+0x32>
 800f868:	e0b2      	b.n	800f9d0 <HAL_UART_MspInit+0x198>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800f86a:	b00a      	add	sp, #40	; 0x28
 800f86c:	bc04      	pop	{r2}
 800f86e:	4691      	mov	r9, r2
 800f870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART2_CLK_ENABLE();
 800f872:	4a74      	ldr	r2, [pc, #464]	; (800fa44 <HAL_UART_MspInit+0x20c>)
 800f874:	69d1      	ldr	r1, [r2, #28]
 800f876:	2080      	movs	r0, #128	; 0x80
 800f878:	0280      	lsls	r0, r0, #10
 800f87a:	4301      	orrs	r1, r0
 800f87c:	61d1      	str	r1, [r2, #28]
 800f87e:	69d3      	ldr	r3, [r2, #28]
 800f880:	4003      	ands	r3, r0
 800f882:	9300      	str	r3, [sp, #0]
 800f884:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800f886:	2304      	movs	r3, #4
 800f888:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f88a:	2702      	movs	r7, #2
 800f88c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f88e:	2401      	movs	r4, #1
 800f890:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f892:	2603      	movs	r6, #3
 800f894:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800f896:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800f898:	2590      	movs	r5, #144	; 0x90
 800f89a:	05ed      	lsls	r5, r5, #23
 800f89c:	a905      	add	r1, sp, #20
 800f89e:	0028      	movs	r0, r5
 800f8a0:	f003 fd58 	bl	8013354 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800f8a4:	2308      	movs	r3, #8
 800f8a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8a8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f8aa:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f8ac:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800f8ae:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800f8b0:	a905      	add	r1, sp, #20
 800f8b2:	0028      	movs	r0, r5
 800f8b4:	f003 fd4e 	bl	8013354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	2101      	movs	r1, #1
 800f8bc:	201c      	movs	r0, #28
 800f8be:	f002 fdd1 	bl	8012464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f8c2:	201c      	movs	r0, #28
 800f8c4:	f002 fdfe 	bl	80124c4 <HAL_NVIC_EnableIRQ>
 800f8c8:	e7cf      	b.n	800f86a <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800f8ca:	4a5e      	ldr	r2, [pc, #376]	; (800fa44 <HAL_UART_MspInit+0x20c>)
 800f8cc:	69d1      	ldr	r1, [r2, #28]
 800f8ce:	2080      	movs	r0, #128	; 0x80
 800f8d0:	02c0      	lsls	r0, r0, #11
 800f8d2:	4301      	orrs	r1, r0
 800f8d4:	61d1      	str	r1, [r2, #28]
 800f8d6:	69d3      	ldr	r3, [r2, #28]
 800f8d8:	4003      	ands	r3, r0
 800f8da:	9301      	str	r3, [sp, #4]
 800f8dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800f8de:	2380      	movs	r3, #128	; 0x80
 800f8e0:	00db      	lsls	r3, r3, #3
 800f8e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8e4:	2402      	movs	r4, #2
 800f8e6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f8e8:	2701      	movs	r7, #1
 800f8ea:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f8ec:	2603      	movs	r6, #3
 800f8ee:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800f8f0:	2504      	movs	r5, #4
 800f8f2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800f8f4:	a905      	add	r1, sp, #20
 800f8f6:	4854      	ldr	r0, [pc, #336]	; (800fa48 <HAL_UART_MspInit+0x210>)
 800f8f8:	f003 fd2c 	bl	8013354 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800f8fc:	2380      	movs	r3, #128	; 0x80
 800f8fe:	011b      	lsls	r3, r3, #4
 800f900:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f902:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f904:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f906:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800f908:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800f90a:	a905      	add	r1, sp, #20
 800f90c:	484e      	ldr	r0, [pc, #312]	; (800fa48 <HAL_UART_MspInit+0x210>)
 800f90e:	f003 fd21 	bl	8013354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800f912:	2200      	movs	r2, #0
 800f914:	2101      	movs	r1, #1
 800f916:	201d      	movs	r0, #29
 800f918:	f002 fda4 	bl	8012464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800f91c:	201d      	movs	r0, #29
 800f91e:	f002 fdd1 	bl	80124c4 <HAL_NVIC_EnableIRQ>
 800f922:	e7a2      	b.n	800f86a <HAL_UART_MspInit+0x32>
    __USART4_CLK_ENABLE();
 800f924:	4a47      	ldr	r2, [pc, #284]	; (800fa44 <HAL_UART_MspInit+0x20c>)
 800f926:	69d1      	ldr	r1, [r2, #28]
 800f928:	2080      	movs	r0, #128	; 0x80
 800f92a:	0300      	lsls	r0, r0, #12
 800f92c:	4301      	orrs	r1, r0
 800f92e:	61d1      	str	r1, [r2, #28]
 800f930:	69d3      	ldr	r3, [r2, #28]
 800f932:	4003      	ands	r3, r0
 800f934:	9302      	str	r3, [sp, #8]
 800f936:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800f938:	2401      	movs	r4, #1
 800f93a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f93c:	2502      	movs	r5, #2
 800f93e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f940:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f942:	2603      	movs	r6, #3
 800f944:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;	
 800f946:	2704      	movs	r7, #4
 800f948:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800f94a:	a905      	add	r1, sp, #20
 800f94c:	2090      	movs	r0, #144	; 0x90
 800f94e:	05c0      	lsls	r0, r0, #23
 800f950:	f003 fd00 	bl	8013354 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800f954:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f956:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f958:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f95a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;
 800f95c:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800f95e:	a905      	add	r1, sp, #20
 800f960:	2090      	movs	r0, #144	; 0x90
 800f962:	05c0      	lsls	r0, r0, #23
 800f964:	f003 fcf6 	bl	8013354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800f968:	2200      	movs	r2, #0
 800f96a:	2101      	movs	r1, #1
 800f96c:	201d      	movs	r0, #29
 800f96e:	f002 fd79 	bl	8012464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800f972:	201d      	movs	r0, #29
 800f974:	f002 fda6 	bl	80124c4 <HAL_NVIC_EnableIRQ>
 800f978:	e777      	b.n	800f86a <HAL_UART_MspInit+0x32>
    __USART5_CLK_ENABLE();
 800f97a:	4a32      	ldr	r2, [pc, #200]	; (800fa44 <HAL_UART_MspInit+0x20c>)
 800f97c:	69d1      	ldr	r1, [r2, #28]
 800f97e:	2080      	movs	r0, #128	; 0x80
 800f980:	0340      	lsls	r0, r0, #13
 800f982:	4301      	orrs	r1, r0
 800f984:	61d1      	str	r1, [r2, #28]
 800f986:	69d3      	ldr	r3, [r2, #28]
 800f988:	4003      	ands	r3, r0
 800f98a:	9303      	str	r3, [sp, #12]
 800f98c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800f98e:	2308      	movs	r3, #8
 800f990:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f992:	2402      	movs	r4, #2
 800f994:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f996:	2701      	movs	r7, #1
 800f998:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f99a:	2603      	movs	r6, #3
 800f99c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800f99e:	2504      	movs	r5, #4
 800f9a0:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800f9a2:	a905      	add	r1, sp, #20
 800f9a4:	4828      	ldr	r0, [pc, #160]	; (800fa48 <HAL_UART_MspInit+0x210>)
 800f9a6:	f003 fcd5 	bl	8013354 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800f9aa:	2310      	movs	r3, #16
 800f9ac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9ae:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f9b0:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f9b2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800f9b4:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800f9b6:	a905      	add	r1, sp, #20
 800f9b8:	4823      	ldr	r0, [pc, #140]	; (800fa48 <HAL_UART_MspInit+0x210>)
 800f9ba:	f003 fccb 	bl	8013354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800f9be:	2200      	movs	r2, #0
 800f9c0:	2101      	movs	r1, #1
 800f9c2:	201d      	movs	r0, #29
 800f9c4:	f002 fd4e 	bl	8012464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800f9c8:	201d      	movs	r0, #29
 800f9ca:	f002 fd7b 	bl	80124c4 <HAL_NVIC_EnableIRQ>
 800f9ce:	e74c      	b.n	800f86a <HAL_UART_MspInit+0x32>
    __USART6_CLK_ENABLE();
 800f9d0:	4b1c      	ldr	r3, [pc, #112]	; (800fa44 <HAL_UART_MspInit+0x20c>)
 800f9d2:	699a      	ldr	r2, [r3, #24]
 800f9d4:	2420      	movs	r4, #32
 800f9d6:	4322      	orrs	r2, r4
 800f9d8:	619a      	str	r2, [r3, #24]
 800f9da:	699b      	ldr	r3, [r3, #24]
 800f9dc:	4023      	ands	r3, r4
 800f9de:	9304      	str	r3, [sp, #16]
 800f9e0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800f9e2:	2310      	movs	r3, #16
 800f9e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9e6:	3b0e      	subs	r3, #14
 800f9e8:	4699      	mov	r9, r3
 800f9ea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f9ec:	2501      	movs	r5, #1
 800f9ee:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f9f0:	2703      	movs	r7, #3
 800f9f2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800f9f4:	2605      	movs	r6, #5
 800f9f6:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800f9f8:	a905      	add	r1, sp, #20
 800f9fa:	2090      	movs	r0, #144	; 0x90
 800f9fc:	05c0      	lsls	r0, r0, #23
 800f9fe:	f003 fca9 	bl	8013354 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800fa02:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa04:	464b      	mov	r3, r9
 800fa06:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fa08:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800fa0a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800fa0c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800fa0e:	a905      	add	r1, sp, #20
 800fa10:	2090      	movs	r0, #144	; 0x90
 800fa12:	05c0      	lsls	r0, r0, #23
 800fa14:	f003 fc9e 	bl	8013354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800fa18:	2200      	movs	r2, #0
 800fa1a:	2101      	movs	r1, #1
 800fa1c:	201d      	movs	r0, #29
 800fa1e:	f002 fd21 	bl	8012464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800fa22:	201d      	movs	r0, #29
 800fa24:	f002 fd4e 	bl	80124c4 <HAL_NVIC_EnableIRQ>
}
 800fa28:	e71f      	b.n	800f86a <HAL_UART_MspInit+0x32>
 800fa2a:	46c0      	nop			; (mov r8, r8)
 800fa2c:	40013800 	.word	0x40013800
 800fa30:	40004400 	.word	0x40004400
 800fa34:	40004800 	.word	0x40004800
 800fa38:	40004c00 	.word	0x40004c00
 800fa3c:	40005000 	.word	0x40005000
 800fa40:	40011400 	.word	0x40011400
 800fa44:	40021000 	.word	0x40021000
 800fa48:	48000400 	.word	0x48000400

0800fa4c <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800fa4c:	2805      	cmp	r0, #5
 800fa4e:	d80b      	bhi.n	800fa68 <GetUart+0x1c>
 800fa50:	0080      	lsls	r0, r0, #2
 800fa52:	4b07      	ldr	r3, [pc, #28]	; (800fa70 <GetUart+0x24>)
 800fa54:	581b      	ldr	r3, [r3, r0]
 800fa56:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			return P1uart;	
 800fa58:	4806      	ldr	r0, [pc, #24]	; (800fa74 <GetUart+0x28>)
 800fa5a:	e008      	b.n	800fa6e <GetUart+0x22>
		case P2 :
			return P2uart;
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800fa5c:	4806      	ldr	r0, [pc, #24]	; (800fa78 <GetUart+0x2c>)
 800fa5e:	e006      	b.n	800fa6e <GetUart+0x22>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800fa60:	4806      	ldr	r0, [pc, #24]	; (800fa7c <GetUart+0x30>)
 800fa62:	e004      	b.n	800fa6e <GetUart+0x22>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800fa64:	4806      	ldr	r0, [pc, #24]	; (800fa80 <GetUart+0x34>)
 800fa66:	e002      	b.n	800fa6e <GetUart+0x22>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800fa68:	2000      	movs	r0, #0
 800fa6a:	e000      	b.n	800fa6e <GetUart+0x22>
			return P2uart;
 800fa6c:	4805      	ldr	r0, [pc, #20]	; (800fa84 <GetUart+0x38>)
	}		
}
 800fa6e:	4770      	bx	lr
 800fa70:	0801d2f0 	.word	0x0801d2f0
 800fa74:	2000733c 	.word	0x2000733c
 800fa78:	200072cc 	.word	0x200072cc
 800fa7c:	20007170 	.word	0x20007170
 800fa80:	200071e4 	.word	0x200071e4
 800fa84:	200073b0 	.word	0x200073b0

0800fa88 <writePxMutex>:
{
 800fa88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	0005      	movs	r5, r0
 800fa8e:	9101      	str	r1, [sp, #4]
 800fa90:	0017      	movs	r7, r2
 800fa92:	001e      	movs	r6, r3
	if (GetUart(port) != NULL) {
 800fa94:	f7ff ffda 	bl	800fa4c <GetUart>
 800fa98:	1e04      	subs	r4, r0, #0
 800fa9a:	d01c      	beq.n	800fad6 <writePxMutex+0x4e>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800fa9c:	00ab      	lsls	r3, r5, #2
 800fa9e:	4a10      	ldr	r2, [pc, #64]	; (800fae0 <writePxMutex+0x58>)
 800faa0:	5898      	ldr	r0, [r3, r2]
 800faa2:	0031      	movs	r1, r6
 800faa4:	f000 f942 	bl	800fd2c <osSemaphoreWait>
 800faa8:	2800      	cmp	r0, #0
 800faaa:	d101      	bne.n	800fab0 <writePxMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR;
 800faac:	2601      	movs	r6, #1
 800faae:	e008      	b.n	800fac2 <writePxMutex+0x3a>
 800fab0:	2601      	movs	r6, #1
 800fab2:	e011      	b.n	800fad8 <writePxMutex+0x50>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800fab4:	9b08      	ldr	r3, [sp, #32]
 800fab6:	003a      	movs	r2, r7
 800fab8:	9901      	ldr	r1, [sp, #4]
 800faba:	0020      	movs	r0, r4
 800fabc:	f005 f8b2 	bl	8014c24 <HAL_UART_Transmit>
 800fac0:	0006      	movs	r6, r0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800fac2:	2e00      	cmp	r6, #0
 800fac4:	d001      	beq.n	800faca <writePxMutex+0x42>
 800fac6:	2e03      	cmp	r6, #3
 800fac8:	d1f4      	bne.n	800fab4 <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800faca:	00ad      	lsls	r5, r5, #2
 800facc:	4b04      	ldr	r3, [pc, #16]	; (800fae0 <writePxMutex+0x58>)
 800face:	58e8      	ldr	r0, [r5, r3]
 800fad0:	f000 f962 	bl	800fd98 <osSemaphoreRelease>
 800fad4:	e000      	b.n	800fad8 <writePxMutex+0x50>
	HAL_StatusTypeDef result = HAL_ERROR;
 800fad6:	2601      	movs	r6, #1
}
 800fad8:	0030      	movs	r0, r6
 800fada:	b003      	add	sp, #12
 800fadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fade:	46c0      	nop			; (mov r8, r8)
 800fae0:	200070cc 	.word	0x200070cc

0800fae4 <writePxITMutex>:
{
 800fae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fae6:	b083      	sub	sp, #12
 800fae8:	0004      	movs	r4, r0
 800faea:	9101      	str	r1, [sp, #4]
 800faec:	0017      	movs	r7, r2
 800faee:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800faf0:	f7ff ffac 	bl	800fa4c <GetUart>
 800faf4:	1e06      	subs	r6, r0, #0
 800faf6:	d00f      	beq.n	800fb18 <writePxITMutex+0x34>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800faf8:	00a4      	lsls	r4, r4, #2
 800fafa:	4b09      	ldr	r3, [pc, #36]	; (800fb20 <writePxITMutex+0x3c>)
 800fafc:	58e0      	ldr	r0, [r4, r3]
 800fafe:	0029      	movs	r1, r5
 800fb00:	f000 f914 	bl	800fd2c <osSemaphoreWait>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	d001      	beq.n	800fb0c <writePxITMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800fb08:	2001      	movs	r0, #1
 800fb0a:	e006      	b.n	800fb1a <writePxITMutex+0x36>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800fb0c:	003a      	movs	r2, r7
 800fb0e:	9901      	ldr	r1, [sp, #4]
 800fb10:	0030      	movs	r0, r6
 800fb12:	f004 fcee 	bl	80144f2 <HAL_UART_Transmit_IT>
 800fb16:	e000      	b.n	800fb1a <writePxITMutex+0x36>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800fb18:	2001      	movs	r0, #1
}
 800fb1a:	b003      	add	sp, #12
 800fb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb1e:	46c0      	nop			; (mov r8, r8)
 800fb20:	200070cc 	.word	0x200070cc

0800fb24 <writePxDMAMutex>:
{
 800fb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb26:	b083      	sub	sp, #12
 800fb28:	0004      	movs	r4, r0
 800fb2a:	000f      	movs	r7, r1
 800fb2c:	9201      	str	r2, [sp, #4]
 800fb2e:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800fb30:	f7ff ff8c 	bl	800fa4c <GetUart>
 800fb34:	1e05      	subs	r5, r0, #0
	if (hUart != NULL) {	
 800fb36:	d012      	beq.n	800fb5e <writePxDMAMutex+0x3a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800fb38:	00a4      	lsls	r4, r4, #2
 800fb3a:	4b0a      	ldr	r3, [pc, #40]	; (800fb64 <writePxDMAMutex+0x40>)
 800fb3c:	58e0      	ldr	r0, [r4, r3]
 800fb3e:	0031      	movs	r1, r6
 800fb40:	f000 f8f4 	bl	800fd2c <osSemaphoreWait>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d001      	beq.n	800fb4c <writePxDMAMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800fb48:	2001      	movs	r0, #1
 800fb4a:	e009      	b.n	800fb60 <writePxDMAMutex+0x3c>
			DMA_MSG_TX_Setup(hUart);
 800fb4c:	0028      	movs	r0, r5
 800fb4e:	f7ff f98d 	bl	800ee6c <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800fb52:	9a01      	ldr	r2, [sp, #4]
 800fb54:	0039      	movs	r1, r7
 800fb56:	0028      	movs	r0, r5
 800fb58:	f004 fd7a 	bl	8014650 <HAL_UART_Transmit_DMA>
 800fb5c:	e000      	b.n	800fb60 <writePxDMAMutex+0x3c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800fb5e:	2001      	movs	r0, #1
}
 800fb60:	b003      	add	sp, #12
 800fb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb64:	200070cc 	.word	0x200070cc

0800fb68 <UpdateBaudrate>:
{
 800fb68:	b510      	push	{r4, lr}
 800fb6a:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800fb6c:	f7ff ff6e 	bl	800fa4c <GetUart>
	huart->Init.BaudRate = baudrate;
 800fb70:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800fb72:	f005 f901 	bl	8014d78 <HAL_UART_Init>
}
 800fb76:	2000      	movs	r0, #0
 800fb78:	bd10      	pop	{r4, pc}
	...

0800fb7c <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800fb80:	d003      	beq.n	800fb8a <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800fb82:	2901      	cmp	r1, #1
 800fb84:	d002      	beq.n	800fb8c <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800fb86:	2900      	cmp	r1, #0
 800fb88:	d016      	beq.n	800fbb8 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800fb8a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800fb8c:	f7fc fb28 	bl	800c1e0 <GetPort>
 800fb90:	3801      	subs	r0, #1
 800fb92:	2180      	movs	r1, #128	; 0x80
 800fb94:	0209      	lsls	r1, r1, #8
 800fb96:	000d      	movs	r5, r1
 800fb98:	4105      	asrs	r5, r0
 800fb9a:	4b12      	ldr	r3, [pc, #72]	; (800fbe4 <SwapUartPins+0x68>)
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	3b01      	subs	r3, #1
 800fba0:	4811      	ldr	r0, [pc, #68]	; (800fbe8 <SwapUartPins+0x6c>)
 800fba2:	005b      	lsls	r3, r3, #1
 800fba4:	5a1a      	ldrh	r2, [r3, r0]
 800fba6:	432a      	orrs	r2, r5
 800fba8:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800fbaa:	2308      	movs	r3, #8
 800fbac:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800fbae:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800fbb0:	0020      	movs	r0, r4
 800fbb2:	f005 f8e1 	bl	8014d78 <HAL_UART_Init>
 800fbb6:	e7e8      	b.n	800fb8a <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800fbb8:	f7fc fb12 	bl	800c1e0 <GetPort>
 800fbbc:	3801      	subs	r0, #1
 800fbbe:	2180      	movs	r1, #128	; 0x80
 800fbc0:	0209      	lsls	r1, r1, #8
 800fbc2:	4101      	asrs	r1, r0
 800fbc4:	4b07      	ldr	r3, [pc, #28]	; (800fbe4 <SwapUartPins+0x68>)
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	4807      	ldr	r0, [pc, #28]	; (800fbe8 <SwapUartPins+0x6c>)
 800fbcc:	005b      	lsls	r3, r3, #1
 800fbce:	5a1a      	ldrh	r2, [r3, r0]
 800fbd0:	438a      	bics	r2, r1
 800fbd2:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800fbd4:	2308      	movs	r3, #8
 800fbd6:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800fbdc:	0020      	movs	r0, r4
 800fbde:	f005 f8cb 	bl	8014d78 <HAL_UART_Init>
}
 800fbe2:	e7d2      	b.n	800fb8a <SwapUartPins+0xe>
 800fbe4:	20001072 	.word	0x20001072
 800fbe8:	200074e4 	.word	0x200074e4

0800fbec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800fbec:	4816      	ldr	r0, [pc, #88]	; (800fc48 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800fbee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800fbf0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800fbf2:	e003      	b.n	800fbfc <LoopCopyDataInit>

0800fbf4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800fbf4:	4b15      	ldr	r3, [pc, #84]	; (800fc4c <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800fbf6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800fbf8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800fbfa:	3104      	adds	r1, #4

0800fbfc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800fbfc:	4814      	ldr	r0, [pc, #80]	; (800fc50 <LoopForever+0xc>)
  ldr r3, =_edata
 800fbfe:	4b15      	ldr	r3, [pc, #84]	; (800fc54 <LoopForever+0x10>)
  adds r2, r0, r1
 800fc00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800fc02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800fc04:	d3f6      	bcc.n	800fbf4 <CopyDataInit>
  ldr r2, =_sbss
 800fc06:	4a14      	ldr	r2, [pc, #80]	; (800fc58 <LoopForever+0x14>)
  b LoopFillZerobss
 800fc08:	e002      	b.n	800fc10 <LoopFillZerobss>

0800fc0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800fc0a:	2300      	movs	r3, #0
  str  r3, [r2]
 800fc0c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800fc0e:	3204      	adds	r2, #4

0800fc10 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800fc10:	4b12      	ldr	r3, [pc, #72]	; (800fc5c <LoopForever+0x18>)
  cmp r2, r3
 800fc12:	429a      	cmp	r2, r3
  bcc FillZerobss
 800fc14:	d3f9      	bcc.n	800fc0a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800fc16:	4812      	ldr	r0, [pc, #72]	; (800fc60 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800fc18:	4912      	ldr	r1, [pc, #72]	; (800fc64 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800fc1a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800fc1c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800fc1e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800fc20:	d005      	beq.n	800fc2e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800fc22:	f000 f82b 	bl	800fc7c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800fc26:	f005 fa15 	bl	8015054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800fc2a:	f005 f9fc 	bl	8015026 <main>

0800fc2e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800fc2e:	480e      	ldr	r0, [pc, #56]	; (800fc68 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800fc30:	490e      	ldr	r1, [pc, #56]	; (800fc6c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800fc32:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800fc34:	480e      	ldr	r0, [pc, #56]	; (800fc70 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800fc36:	490d      	ldr	r1, [pc, #52]	; (800fc6c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800fc38:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800fc3a:	480e      	ldr	r0, [pc, #56]	; (800fc74 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800fc3c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800fc3e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800fc40:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800fc42:	4700      	bx	r0

0800fc44 <LoopForever>:


LoopForever:
    b LoopForever
 800fc44:	e7fe      	b.n	800fc44 <LoopForever>
 800fc46:	0000      	.short	0x0000
  ldr   r0, =_estack
 800fc48:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800fc4c:	0801d7a8 	.word	0x0801d7a8
  ldr r0, =_sdata
 800fc50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800fc54:	20000a88 	.word	0x20000a88
  ldr r2, =_sbss
 800fc58:	20000a88 	.word	0x20000a88
  ldr r3, = _ebss
 800fc5c:	20007588 	.word	0x20007588
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800fc60:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800fc64:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800fc68:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800fc6c:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800fc70:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800fc74:	1fffd800 	.word	0x1fffd800

0800fc78 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800fc78:	e7fe      	b.n	800fc78 <ADC1_COMP_IRQHandler>
	...

0800fc7c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800fc7c:	4b11      	ldr	r3, [pc, #68]	; (800fcc4 <SystemInit+0x48>)
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	2101      	movs	r1, #1
 800fc82:	430a      	orrs	r2, r1
 800fc84:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800fc86:	685a      	ldr	r2, [r3, #4]
 800fc88:	480f      	ldr	r0, [pc, #60]	; (800fcc8 <SystemInit+0x4c>)
 800fc8a:	4002      	ands	r2, r0
 800fc8c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	480e      	ldr	r0, [pc, #56]	; (800fccc <SystemInit+0x50>)
 800fc92:	4002      	ands	r2, r0
 800fc94:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	480d      	ldr	r0, [pc, #52]	; (800fcd0 <SystemInit+0x54>)
 800fc9a:	4002      	ands	r2, r0
 800fc9c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800fc9e:	685a      	ldr	r2, [r3, #4]
 800fca0:	480c      	ldr	r0, [pc, #48]	; (800fcd4 <SystemInit+0x58>)
 800fca2:	4002      	ands	r2, r0
 800fca4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800fca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fca8:	200f      	movs	r0, #15
 800fcaa:	4382      	bics	r2, r0
 800fcac:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800fcae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcb0:	4809      	ldr	r0, [pc, #36]	; (800fcd8 <SystemInit+0x5c>)
 800fcb2:	4002      	ands	r2, r0
 800fcb4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800fcb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fcb8:	438a      	bics	r2, r1
 800fcba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	609a      	str	r2, [r3, #8]

}
 800fcc0:	4770      	bx	lr
 800fcc2:	46c0      	nop			; (mov r8, r8)
 800fcc4:	40021000 	.word	0x40021000
 800fcc8:	08ffb80c 	.word	0x08ffb80c
 800fccc:	fef6ffff 	.word	0xfef6ffff
 800fcd0:	fffbffff 	.word	0xfffbffff
 800fcd4:	ffc0ffff 	.word	0xffc0ffff
 800fcd8:	fff0feac 	.word	0xfff0feac

0800fcdc <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcdc:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 800fce0:	1e43      	subs	r3, r0, #1
 800fce2:	4198      	sbcs	r0, r3
}
 800fce4:	4770      	bx	lr

0800fce6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fce6:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800fce8:	f000 ff86 	bl	8010bf8 <vTaskStartScheduler>
  
  return osOK;
}
 800fcec:	2000      	movs	r0, #0
 800fcee:	bd10      	pop	{r4, pc}

0800fcf0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fcf0:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	d100      	bne.n	800fcf8 <osDelay+0x8>
 800fcf6:	3001      	adds	r0, #1
 800fcf8:	f001 f8ba 	bl	8010e70 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	bd10      	pop	{r4, pc}

0800fd00 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800fd00:	b510      	push	{r4, lr}
 800fd02:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800fd04:	2901      	cmp	r1, #1
 800fd06:	d005      	beq.n	800fd14 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800fd08:	2100      	movs	r1, #0
 800fd0a:	f000 fb13 	bl	8010334 <xQueueCreateCountingSemaphore>
 800fd0e:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800fd10:	0020      	movs	r0, r4
 800fd12:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800fd14:	2203      	movs	r2, #3
 800fd16:	2100      	movs	r1, #0
 800fd18:	f000 fae5 	bl	80102e6 <xQueueGenericCreate>
 800fd1c:	1e04      	subs	r4, r0, #0
 800fd1e:	d0f7      	beq.n	800fd10 <osSemaphoreCreate+0x10>
 800fd20:	2300      	movs	r3, #0
 800fd22:	2200      	movs	r2, #0
 800fd24:	2100      	movs	r1, #0
 800fd26:	f000 fb1b 	bl	8010360 <xQueueGenericSend>
 800fd2a:	e7f1      	b.n	800fd10 <osSemaphoreCreate+0x10>

0800fd2c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fd2c:	b530      	push	{r4, r5, lr}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	0005      	movs	r5, r0
 800fd32:	000c      	movs	r4, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fd34:	2300      	movs	r3, #0
 800fd36:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	d025      	beq.n	800fd88 <osSemaphoreWait+0x5c>
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800fd3c:	1c4b      	adds	r3, r1, #1
 800fd3e:	d013      	beq.n	800fd68 <osSemaphoreWait+0x3c>
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800fd40:	f7ff ffcc 	bl	800fcdc <inHandlerMode>
 800fd44:	2800      	cmp	r0, #0
 800fd46:	d012      	beq.n	800fd6e <osSemaphoreWait+0x42>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fd48:	aa01      	add	r2, sp, #4
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	0028      	movs	r0, r5
 800fd4e:	f000 fcc2 	bl	80106d6 <xQueueReceiveFromISR>
 800fd52:	2801      	cmp	r0, #1
 800fd54:	d11a      	bne.n	800fd8c <osSemaphoreWait+0x60>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fd56:	9b01      	ldr	r3, [sp, #4]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d019      	beq.n	800fd90 <osSemaphoreWait+0x64>
 800fd5c:	4b0d      	ldr	r3, [pc, #52]	; (800fd94 <osSemaphoreWait+0x68>)
 800fd5e:	2280      	movs	r2, #128	; 0x80
 800fd60:	0552      	lsls	r2, r2, #21
 800fd62:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800fd64:	2000      	movs	r0, #0
 800fd66:	e00b      	b.n	800fd80 <osSemaphoreWait+0x54>
    ticks = portMAX_DELAY;
 800fd68:	2401      	movs	r4, #1
 800fd6a:	4264      	negs	r4, r4
 800fd6c:	e7e8      	b.n	800fd40 <osSemaphoreWait+0x14>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fd6e:	2300      	movs	r3, #0
 800fd70:	0022      	movs	r2, r4
 800fd72:	2100      	movs	r1, #0
 800fd74:	0028      	movs	r0, r5
 800fd76:	f000 fc0b 	bl	8010590 <xQueueGenericReceive>
 800fd7a:	2801      	cmp	r0, #1
 800fd7c:	d102      	bne.n	800fd84 <osSemaphoreWait+0x58>
  return osOK;
 800fd7e:	2000      	movs	r0, #0
}
 800fd80:	b003      	add	sp, #12
 800fd82:	bd30      	pop	{r4, r5, pc}
    return osErrorOS;
 800fd84:	20ff      	movs	r0, #255	; 0xff
 800fd86:	e7fb      	b.n	800fd80 <osSemaphoreWait+0x54>
    return osErrorParameter;
 800fd88:	2080      	movs	r0, #128	; 0x80
 800fd8a:	e7f9      	b.n	800fd80 <osSemaphoreWait+0x54>
      return osErrorOS;
 800fd8c:	20ff      	movs	r0, #255	; 0xff
 800fd8e:	e7f7      	b.n	800fd80 <osSemaphoreWait+0x54>
  return osOK;
 800fd90:	2000      	movs	r0, #0
 800fd92:	e7f5      	b.n	800fd80 <osSemaphoreWait+0x54>
 800fd94:	e000ed04 	.word	0xe000ed04

0800fd98 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fd98:	b510      	push	{r4, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	0004      	movs	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800fda2:	f7ff ff9b 	bl	800fcdc <inHandlerMode>
 800fda6:	2800      	cmp	r0, #0
 800fda8:	d00e      	beq.n	800fdc8 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fdaa:	a901      	add	r1, sp, #4
 800fdac:	0020      	movs	r0, r4
 800fdae:	f000 fbaf 	bl	8010510 <xQueueGiveFromISR>
 800fdb2:	2801      	cmp	r0, #1
 800fdb4:	d113      	bne.n	800fdde <osSemaphoreRelease+0x46>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fdb6:	9b01      	ldr	r3, [sp, #4]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d012      	beq.n	800fde2 <osSemaphoreRelease+0x4a>
 800fdbc:	4b0b      	ldr	r3, [pc, #44]	; (800fdec <osSemaphoreRelease+0x54>)
 800fdbe:	2280      	movs	r2, #128	; 0x80
 800fdc0:	0552      	lsls	r2, r2, #21
 800fdc2:	601a      	str	r2, [r3, #0]
  osStatus result = osOK;
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	e008      	b.n	800fdda <osSemaphoreRelease+0x42>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fdc8:	2300      	movs	r3, #0
 800fdca:	2200      	movs	r2, #0
 800fdcc:	2100      	movs	r1, #0
 800fdce:	0020      	movs	r0, r4
 800fdd0:	f000 fac6 	bl	8010360 <xQueueGenericSend>
 800fdd4:	2801      	cmp	r0, #1
 800fdd6:	d106      	bne.n	800fde6 <osSemaphoreRelease+0x4e>
  osStatus result = osOK;
 800fdd8:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800fdda:	b002      	add	sp, #8
 800fddc:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800fdde:	20ff      	movs	r0, #255	; 0xff
 800fde0:	e7fb      	b.n	800fdda <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800fde2:	2000      	movs	r0, #0
 800fde4:	e7f9      	b.n	800fdda <osSemaphoreRelease+0x42>
      result = osErrorOS;
 800fde6:	20ff      	movs	r0, #255	; 0xff
 800fde8:	e7f7      	b.n	800fdda <osSemaphoreRelease+0x42>
 800fdea:	46c0      	nop			; (mov r8, r8)
 800fdec:	e000ed04 	.word	0xe000ed04

0800fdf0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800fdf0:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800fdf2:	f001 fa2b 	bl	801124c <xTaskGetSchedulerState>
 800fdf6:	2801      	cmp	r0, #1
 800fdf8:	d001      	beq.n	800fdfe <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800fdfa:	f001 feb5 	bl	8011b68 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800fdfe:	bd10      	pop	{r4, pc}

0800fe00 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 800fe00:	0003      	movs	r3, r0
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800fe02:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800fe04:	2000      	movs	r0, #0

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800fe06:	e005      	b.n	800fe14 <prvGetNumberOfParameters+0x14>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800fe08:	2901      	cmp	r1, #1
 800fe0a:	d002      	beq.n	800fe12 <prvGetNumberOfParameters+0x12>
			{
				cParameters++;
 800fe0c:	3001      	adds	r0, #1
 800fe0e:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800fe10:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800fe12:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800fe14:	2200      	movs	r2, #0
 800fe16:	569a      	ldrsb	r2, [r3, r2]
 800fe18:	2a00      	cmp	r2, #0
 800fe1a:	d003      	beq.n	800fe24 <prvGetNumberOfParameters+0x24>
		if( ( *pcCommandString ) == ' ' )
 800fe1c:	2a20      	cmp	r2, #32
 800fe1e:	d0f3      	beq.n	800fe08 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800fe20:	2100      	movs	r1, #0
 800fe22:	e7f6      	b.n	800fe12 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800fe24:	2901      	cmp	r1, #1
 800fe26:	d000      	beq.n	800fe2a <prvGetNumberOfParameters+0x2a>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800fe28:	4770      	bx	lr
		cParameters--;
 800fe2a:	3801      	subs	r0, #1
 800fe2c:	b240      	sxtb	r0, r0
 800fe2e:	e7fb      	b.n	800fe28 <prvGetNumberOfParameters+0x28>

0800fe30 <FreeRTOS_CLIRegisterCommand>:
{
 800fe30:	b570      	push	{r4, r5, r6, lr}
 800fe32:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
 800fe34:	d101      	bne.n	800fe3a <FreeRTOS_CLIRegisterCommand+0xa>
 800fe36:	b672      	cpsid	i
 800fe38:	e7fe      	b.n	800fe38 <FreeRTOS_CLIRegisterCommand+0x8>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800fe3a:	2008      	movs	r0, #8
 800fe3c:	f001 ff02 	bl	8011c44 <pvPortMalloc>
 800fe40:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800fe42:	d101      	bne.n	800fe48 <FreeRTOS_CLIRegisterCommand+0x18>
 800fe44:	b672      	cpsid	i
 800fe46:	e7fe      	b.n	800fe46 <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
 800fe48:	f001 fe48 	bl	8011adc <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800fe4c:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800fe52:	4b04      	ldr	r3, [pc, #16]	; (800fe64 <FreeRTOS_CLIRegisterCommand+0x34>)
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800fe58:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800fe5a:	f001 fe4b 	bl	8011af4 <vPortExitCritical>
}
 800fe5e:	2001      	movs	r0, #1
 800fe60:	bd70      	pop	{r4, r5, r6, pc}
 800fe62:	46c0      	nop			; (mov r8, r8)
 800fe64:	200000c4 	.word	0x200000c4

0800fe68 <FreeRTOS_CLIProcessCommand>:
{
 800fe68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	0005      	movs	r5, r0
 800fe6e:	9100      	str	r1, [sp, #0]
 800fe70:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
 800fe72:	4b2c      	ldr	r3, [pc, #176]	; (800ff24 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d016      	beq.n	800fea8 <FreeRTOS_CLIProcessCommand+0x40>
portBASE_TYPE xReturn = pdTRUE;
 800fe7a:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800fe7c:	4b29      	ldr	r3, [pc, #164]	; (800ff24 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d001      	beq.n	800fe88 <FreeRTOS_CLIProcessCommand+0x20>
 800fe84:	2c00      	cmp	r4, #0
 800fe86:	d03d      	beq.n	800ff04 <FreeRTOS_CLIProcessCommand+0x9c>
	else if( pxCommand != NULL )
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d044      	beq.n	800ff16 <FreeRTOS_CLIProcessCommand+0xae>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	002a      	movs	r2, r5
 800fe92:	9901      	ldr	r1, [sp, #4]
 800fe94:	9800      	ldr	r0, [sp, #0]
 800fe96:	4798      	blx	r3
 800fe98:	1e04      	subs	r4, r0, #0
		if( xReturn == pdFALSE )
 800fe9a:	d102      	bne.n	800fea2 <FreeRTOS_CLIProcessCommand+0x3a>
			pxCommand = NULL;
 800fe9c:	4b21      	ldr	r3, [pc, #132]	; (800ff24 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fe9e:	2200      	movs	r2, #0
 800fea0:	601a      	str	r2, [r3, #0]
}
 800fea2:	0020      	movs	r0, r4
 800fea4:	b003      	add	sp, #12
 800fea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800fea8:	4b1e      	ldr	r3, [pc, #120]	; (800ff24 <FreeRTOS_CLIProcessCommand+0xbc>)
 800feaa:	4a1f      	ldr	r2, [pc, #124]	; (800ff28 <FreeRTOS_CLIProcessCommand+0xc0>)
 800feac:	601a      	str	r2, [r3, #0]
 800feae:	e009      	b.n	800fec4 <FreeRTOS_CLIProcessCommand+0x5c>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800feb0:	0002      	movs	r2, r0
 800feb2:	0021      	movs	r1, r4
 800feb4:	0028      	movs	r0, r5
 800feb6:	f005 fd97 	bl	80159e8 <strncmp>
 800feba:	2800      	cmp	r0, #0
 800febc:	d011      	beq.n	800fee2 <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	4b18      	ldr	r3, [pc, #96]	; (800ff24 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fec2:	601a      	str	r2, [r3, #0]
 800fec4:	4b17      	ldr	r3, [pc, #92]	; (800ff24 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fec6:	681f      	ldr	r7, [r3, #0]
 800fec8:	2f00      	cmp	r7, #0
 800feca:	d019      	beq.n	800ff00 <FreeRTOS_CLIProcessCommand+0x98>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800fecc:	683e      	ldr	r6, [r7, #0]
 800fece:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800fed0:	0020      	movs	r0, r4
 800fed2:	f7f0 f921 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800fed6:	562b      	ldrsb	r3, [r5, r0]
 800fed8:	2b20      	cmp	r3, #32
 800feda:	d0e9      	beq.n	800feb0 <FreeRTOS_CLIProcessCommand+0x48>
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1ee      	bne.n	800febe <FreeRTOS_CLIProcessCommand+0x56>
 800fee0:	e7e6      	b.n	800feb0 <FreeRTOS_CLIProcessCommand+0x48>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800fee2:	240c      	movs	r4, #12
 800fee4:	5734      	ldrsb	r4, [r6, r4]
 800fee6:	2c00      	cmp	r4, #0
 800fee8:	da01      	bge.n	800feee <FreeRTOS_CLIProcessCommand+0x86>
portBASE_TYPE xReturn = pdTRUE;
 800feea:	2401      	movs	r4, #1
 800feec:	e7c6      	b.n	800fe7c <FreeRTOS_CLIProcessCommand+0x14>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800feee:	0028      	movs	r0, r5
 800fef0:	f7ff ff86 	bl	800fe00 <prvGetNumberOfParameters>
 800fef4:	4284      	cmp	r4, r0
 800fef6:	d001      	beq.n	800fefc <FreeRTOS_CLIProcessCommand+0x94>
							xReturn = pdFALSE;
 800fef8:	2400      	movs	r4, #0
 800fefa:	e7bf      	b.n	800fe7c <FreeRTOS_CLIProcessCommand+0x14>
portBASE_TYPE xReturn = pdTRUE;
 800fefc:	2401      	movs	r4, #1
 800fefe:	e7bd      	b.n	800fe7c <FreeRTOS_CLIProcessCommand+0x14>
 800ff00:	2401      	movs	r4, #1
 800ff02:	e7bb      	b.n	800fe7c <FreeRTOS_CLIProcessCommand+0x14>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ff04:	9a01      	ldr	r2, [sp, #4]
 800ff06:	4909      	ldr	r1, [pc, #36]	; (800ff2c <FreeRTOS_CLIProcessCommand+0xc4>)
 800ff08:	9800      	ldr	r0, [sp, #0]
 800ff0a:	f005 fd7e 	bl	8015a0a <strncpy>
		pxCommand = NULL;
 800ff0e:	4b05      	ldr	r3, [pc, #20]	; (800ff24 <FreeRTOS_CLIProcessCommand+0xbc>)
 800ff10:	2200      	movs	r2, #0
 800ff12:	601a      	str	r2, [r3, #0]
 800ff14:	e7c5      	b.n	800fea2 <FreeRTOS_CLIProcessCommand+0x3a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ff16:	9a01      	ldr	r2, [sp, #4]
 800ff18:	4905      	ldr	r1, [pc, #20]	; (800ff30 <FreeRTOS_CLIProcessCommand+0xc8>)
 800ff1a:	9800      	ldr	r0, [sp, #0]
 800ff1c:	f005 fd75 	bl	8015a0a <strncpy>
		xReturn = pdFALSE;
 800ff20:	2400      	movs	r4, #0
	return xReturn;
 800ff22:	e7be      	b.n	800fea2 <FreeRTOS_CLIProcessCommand+0x3a>
 800ff24:	200023d0 	.word	0x200023d0
 800ff28:	200000c8 	.word	0x200000c8
 800ff2c:	0801d308 	.word	0x0801d308
 800ff30:	0801d360 	.word	0x0801d360

0800ff34 <FreeRTOS_CLIGetOutputBuffer>:
}
 800ff34:	4800      	ldr	r0, [pc, #0]	; (800ff38 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800ff36:	4770      	bx	lr
 800ff38:	20002168 	.word	0x20002168

0800ff3c <FreeRTOS_CLIGetParameter>:
{
 800ff3c:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800ff42:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800ff44:	e011      	b.n	800ff6a <FreeRTOS_CLIGetParameter+0x2e>
			pcCommandString++;
 800ff46:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ff48:	2300      	movs	r3, #0
 800ff4a:	56c3      	ldrsb	r3, [r0, r3]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d003      	beq.n	800ff58 <FreeRTOS_CLIGetParameter+0x1c>
 800ff50:	2b20      	cmp	r3, #32
 800ff52:	d1f8      	bne.n	800ff46 <FreeRTOS_CLIGetParameter+0xa>
 800ff54:	e000      	b.n	800ff58 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800ff56:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ff58:	2300      	movs	r3, #0
 800ff5a:	56c3      	ldrsb	r3, [r0, r3]
 800ff5c:	2b20      	cmp	r3, #32
 800ff5e:	d0fa      	beq.n	800ff56 <FreeRTOS_CLIGetParameter+0x1a>
		if( *pcCommandString != 0x00 )
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d017      	beq.n	800ff94 <FreeRTOS_CLIGetParameter+0x58>
			uxParametersFound++;
 800ff64:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800ff66:	42a1      	cmp	r1, r4
 800ff68:	d012      	beq.n	800ff90 <FreeRTOS_CLIGetParameter+0x54>
	while( uxParametersFound < uxWantedParameter )
 800ff6a:	428c      	cmp	r4, r1
 800ff6c:	d3ec      	bcc.n	800ff48 <FreeRTOS_CLIGetParameter+0xc>
const int8_t *pcReturn = NULL;
 800ff6e:	2000      	movs	r0, #0
}
 800ff70:	bd10      	pop	{r4, pc}
					( *pxParameterStringLength )++;
 800ff72:	6813      	ldr	r3, [r2, #0]
 800ff74:	3301      	adds	r3, #1
 800ff76:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800ff78:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	56cb      	ldrsb	r3, [r1, r3]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d001      	beq.n	800ff86 <FreeRTOS_CLIGetParameter+0x4a>
 800ff82:	2b20      	cmp	r3, #32
 800ff84:	d1f5      	bne.n	800ff72 <FreeRTOS_CLIGetParameter+0x36>
				if( *pxParameterStringLength == 0 )
 800ff86:	6813      	ldr	r3, [r2, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1f1      	bne.n	800ff70 <FreeRTOS_CLIGetParameter+0x34>
					pcReturn = NULL;
 800ff8c:	2000      	movs	r0, #0
	return pcReturn;
 800ff8e:	e7ef      	b.n	800ff70 <FreeRTOS_CLIGetParameter+0x34>
 800ff90:	0001      	movs	r1, r0
 800ff92:	e7f2      	b.n	800ff7a <FreeRTOS_CLIGetParameter+0x3e>
const int8_t *pcReturn = NULL;
 800ff94:	2000      	movs	r0, #0
 800ff96:	e7eb      	b.n	800ff70 <FreeRTOS_CLIGetParameter+0x34>

0800ff98 <prvHelpCommand>:
{
 800ff98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	0005      	movs	r5, r0
 800ff9e:	000e      	movs	r6, r1
 800ffa0:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800ffa6:	aa01      	add	r2, sp, #4
 800ffa8:	2101      	movs	r1, #1
 800ffaa:	f7ff ffc7 	bl	800ff3c <FreeRTOS_CLIGetParameter>
 800ffae:	1e04      	subs	r4, r0, #0
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800ffb0:	d022      	beq.n	800fff8 <prvHelpCommand+0x60>
 800ffb2:	2206      	movs	r2, #6
 800ffb4:	4931      	ldr	r1, [pc, #196]	; (801007c <prvHelpCommand+0xe4>)
 800ffb6:	f005 fd17 	bl	80159e8 <strncmp>
 800ffba:	2800      	cmp	r0, #0
 800ffbc:	d11c      	bne.n	800fff8 <prvHelpCommand+0x60>
		if( str == NumOfParamsHelpStrings )
 800ffbe:	4b30      	ldr	r3, [pc, #192]	; (8010080 <prvHelpCommand+0xe8>)
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	2b07      	cmp	r3, #7
 800ffc4:	d00f      	beq.n	800ffe6 <prvHelpCommand+0x4e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ffc6:	4a2e      	ldr	r2, [pc, #184]	; (8010080 <prvHelpCommand+0xe8>)
 800ffc8:	7813      	ldrb	r3, [r2, #0]
 800ffca:	1c5c      	adds	r4, r3, #1
 800ffcc:	b2e4      	uxtb	r4, r4
 800ffce:	7014      	strb	r4, [r2, #0]
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	4a2c      	ldr	r2, [pc, #176]	; (8010084 <prvHelpCommand+0xec>)
 800ffd4:	5899      	ldr	r1, [r3, r2]
 800ffd6:	0032      	movs	r2, r6
 800ffd8:	0028      	movs	r0, r5
 800ffda:	f005 fd16 	bl	8015a0a <strncpy>
		if( str == NumOfParamsHelpStrings )
 800ffde:	2c07      	cmp	r4, #7
 800ffe0:	d005      	beq.n	800ffee <prvHelpCommand+0x56>
			xReturn = pdTRUE;
 800ffe2:	2701      	movs	r7, #1
 800ffe4:	e00a      	b.n	800fffc <prvHelpCommand+0x64>
			str = 0;
 800ffe6:	4b26      	ldr	r3, [pc, #152]	; (8010080 <prvHelpCommand+0xe8>)
 800ffe8:	2200      	movs	r2, #0
 800ffea:	701a      	strb	r2, [r3, #0]
 800ffec:	e7eb      	b.n	800ffc6 <prvHelpCommand+0x2e>
			xReturn = pdFALSE; str = 0;
 800ffee:	4b24      	ldr	r3, [pc, #144]	; (8010080 <prvHelpCommand+0xe8>)
 800fff0:	2200      	movs	r2, #0
 800fff2:	701a      	strb	r2, [r3, #0]
 800fff4:	2700      	movs	r7, #0
 800fff6:	e001      	b.n	800fffc <prvHelpCommand+0x64>
	else if (pcParameterString1 == NULL)
 800fff8:	2c00      	cmp	r4, #0
 800fffa:	d002      	beq.n	8010002 <prvHelpCommand+0x6a>
}
 800fffc:	0038      	movs	r0, r7
 800fffe:	b003      	add	sp, #12
 8010000:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 8010002:	4b21      	ldr	r3, [pc, #132]	; (8010088 <prvHelpCommand+0xf0>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d025      	beq.n	8010056 <prvHelpCommand+0xbe>
		if (counter > numOfBosCommands) {
 801000a:	4b20      	ldr	r3, [pc, #128]	; (801008c <prvHelpCommand+0xf4>)
 801000c:	781a      	ldrb	r2, [r3, #0]
 801000e:	4b20      	ldr	r3, [pc, #128]	; (8010090 <prvHelpCommand+0xf8>)
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	429a      	cmp	r2, r3
 8010014:	d926      	bls.n	8010064 <prvHelpCommand+0xcc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 8010016:	4b1c      	ldr	r3, [pc, #112]	; (8010088 <prvHelpCommand+0xf0>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	6859      	ldr	r1, [r3, #4]
 801001e:	0032      	movs	r2, r6
 8010020:	3a08      	subs	r2, #8
 8010022:	0028      	movs	r0, r5
 8010024:	3008      	adds	r0, #8
 8010026:	f005 fcf0 	bl	8015a0a <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 801002a:	1c68      	adds	r0, r5, #1
 801002c:	4919      	ldr	r1, [pc, #100]	; (8010094 <prvHelpCommand+0xfc>)
 801002e:	f005 fcd3 	bl	80159d8 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 8010032:	2328      	movs	r3, #40	; 0x28
 8010034:	702b      	strb	r3, [r5, #0]
 8010036:	3301      	adds	r3, #1
 8010038:	71ab      	strb	r3, [r5, #6]
 801003a:	3b09      	subs	r3, #9
 801003c:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 801003e:	4b12      	ldr	r3, [pc, #72]	; (8010088 <prvHelpCommand+0xf0>)
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	6852      	ldr	r2, [r2, #4]
 8010044:	601a      	str	r2, [r3, #0]
		counter++;
 8010046:	4911      	ldr	r1, [pc, #68]	; (801008c <prvHelpCommand+0xf4>)
 8010048:	780b      	ldrb	r3, [r1, #0]
 801004a:	3301      	adds	r3, #1
 801004c:	700b      	strb	r3, [r1, #0]
		if( pxCommand == NULL )
 801004e:	2a00      	cmp	r2, #0
 8010050:	d011      	beq.n	8010076 <prvHelpCommand+0xde>
			xReturn = pdTRUE;
 8010052:	2701      	movs	r7, #1
	return xReturn;
 8010054:	e7d2      	b.n	800fffc <prvHelpCommand+0x64>
			pxCommand = &xRegisteredCommands;
 8010056:	4b0c      	ldr	r3, [pc, #48]	; (8010088 <prvHelpCommand+0xf0>)
 8010058:	4a0f      	ldr	r2, [pc, #60]	; (8010098 <prvHelpCommand+0x100>)
 801005a:	601a      	str	r2, [r3, #0]
			counter = 1;
 801005c:	4b0b      	ldr	r3, [pc, #44]	; (801008c <prvHelpCommand+0xf4>)
 801005e:	2201      	movs	r2, #1
 8010060:	701a      	strb	r2, [r3, #0]
 8010062:	e7d2      	b.n	801000a <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8010064:	4b08      	ldr	r3, [pc, #32]	; (8010088 <prvHelpCommand+0xf0>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	6859      	ldr	r1, [r3, #4]
 801006c:	0032      	movs	r2, r6
 801006e:	0028      	movs	r0, r5
 8010070:	f005 fccb 	bl	8015a0a <strncpy>
 8010074:	e7e3      	b.n	801003e <prvHelpCommand+0xa6>
			xReturn = pdFALSE;
 8010076:	2700      	movs	r7, #0
 8010078:	e7c0      	b.n	800fffc <prvHelpCommand+0x64>
 801007a:	46c0      	nop			; (mov r8, r8)
 801007c:	0801abf0 	.word	0x0801abf0
 8010080:	200023d8 	.word	0x200023d8
 8010084:	2000005c 	.word	0x2000005c
 8010088:	200023d4 	.word	0x200023d4
 801008c:	200023cc 	.word	0x200023cc
 8010090:	20006fc8 	.word	0x20006fc8
 8010094:	0801a1f0 	.word	0x0801a1f0
 8010098:	200000c8 	.word	0x200000c8

0801009c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801009c:	0003      	movs	r3, r0
 801009e:	3308      	adds	r3, #8
 80100a0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80100a2:	2201      	movs	r2, #1
 80100a4:	4252      	negs	r2, r2
 80100a6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100a8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100aa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80100ac:	2300      	movs	r3, #0
 80100ae:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80100b0:	4770      	bx	lr

080100b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80100b2:	2300      	movs	r3, #0
 80100b4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80100b6:	4770      	bx	lr

080100b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80100b8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80100ba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80100bc:	689a      	ldr	r2, [r3, #8]
 80100be:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80100c0:	689a      	ldr	r2, [r3, #8]
 80100c2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80100c4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80100c6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80100c8:	6803      	ldr	r3, [r0, #0]
 80100ca:	3301      	adds	r3, #1
 80100cc:	6003      	str	r3, [r0, #0]
}
 80100ce:	4770      	bx	lr

080100d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80100d0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80100d2:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80100d4:	1c63      	adds	r3, r4, #1
 80100d6:	d002      	beq.n	80100de <vListInsert+0xe>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100d8:	0002      	movs	r2, r0
 80100da:	3208      	adds	r2, #8
 80100dc:	e002      	b.n	80100e4 <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
 80100de:	6902      	ldr	r2, [r0, #16]
 80100e0:	e004      	b.n	80100ec <vListInsert+0x1c>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100e2:	001a      	movs	r2, r3
 80100e4:	6853      	ldr	r3, [r2, #4]
 80100e6:	681d      	ldr	r5, [r3, #0]
 80100e8:	42a5      	cmp	r5, r4
 80100ea:	d9fa      	bls.n	80100e2 <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80100ec:	6853      	ldr	r3, [r2, #4]
 80100ee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80100f0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80100f2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80100f4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80100f6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80100f8:	6803      	ldr	r3, [r0, #0]
 80100fa:	3301      	adds	r3, #1
 80100fc:	6003      	str	r3, [r0, #0]
}
 80100fe:	bd30      	pop	{r4, r5, pc}

08010100 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010100:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010102:	6842      	ldr	r2, [r0, #4]
 8010104:	6881      	ldr	r1, [r0, #8]
 8010106:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010108:	6882      	ldr	r2, [r0, #8]
 801010a:	6841      	ldr	r1, [r0, #4]
 801010c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801010e:	685a      	ldr	r2, [r3, #4]
 8010110:	4282      	cmp	r2, r0
 8010112:	d005      	beq.n	8010120 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010114:	2200      	movs	r2, #0
 8010116:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010118:	681a      	ldr	r2, [r3, #0]
 801011a:	1e50      	subs	r0, r2, #1
 801011c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 801011e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010120:	6882      	ldr	r2, [r0, #8]
 8010122:	605a      	str	r2, [r3, #4]
 8010124:	e7f6      	b.n	8010114 <uxListRemove+0x14>

08010126 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010126:	b510      	push	{r4, lr}
 8010128:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801012a:	f001 fcd7 	bl	8011adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801012e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010132:	429a      	cmp	r2, r3
 8010134:	d004      	beq.n	8010140 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8010136:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8010138:	f001 fcdc 	bl	8011af4 <vPortExitCritical>

	return xReturn;
}
 801013c:	0020      	movs	r0, r4
 801013e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8010140:	2401      	movs	r4, #1
 8010142:	e7f9      	b.n	8010138 <prvIsQueueFull+0x12>

08010144 <prvIsQueueEmpty>:
{
 8010144:	b510      	push	{r4, lr}
 8010146:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8010148:	f001 fcc8 	bl	8011adc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801014c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801014e:	2b00      	cmp	r3, #0
 8010150:	d004      	beq.n	801015c <prvIsQueueEmpty+0x18>
			xReturn = pdFALSE;
 8010152:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010154:	f001 fcce 	bl	8011af4 <vPortExitCritical>
}
 8010158:	0020      	movs	r0, r4
 801015a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 801015c:	2401      	movs	r4, #1
 801015e:	e7f9      	b.n	8010154 <prvIsQueueEmpty+0x10>

08010160 <prvCopyDataToQueue>:
{
 8010160:	b570      	push	{r4, r5, r6, lr}
 8010162:	0004      	movs	r4, r0
 8010164:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010166:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010168:	2a00      	cmp	r2, #0
 801016a:	d10d      	bne.n	8010188 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801016c:	6803      	ldr	r3, [r0, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d004      	beq.n	801017c <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 8010172:	2000      	movs	r0, #0
	++( pxQueue->uxMessagesWaiting );
 8010174:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010176:	3301      	adds	r3, #1
 8010178:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801017a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801017c:	6840      	ldr	r0, [r0, #4]
 801017e:	f001 f8b5 	bl	80112ec <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8010182:	2300      	movs	r3, #0
 8010184:	6063      	str	r3, [r4, #4]
 8010186:	e7f5      	b.n	8010174 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 8010188:	2d00      	cmp	r5, #0
 801018a:	d10e      	bne.n	80101aa <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801018c:	6880      	ldr	r0, [r0, #8]
 801018e:	f005 f9e4 	bl	801555a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010192:	68a3      	ldr	r3, [r4, #8]
 8010194:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010196:	4694      	mov	ip, r2
 8010198:	4463      	add	r3, ip
 801019a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801019c:	6862      	ldr	r2, [r4, #4]
 801019e:	4293      	cmp	r3, r2
 80101a0:	d31e      	bcc.n	80101e0 <prvCopyDataToQueue+0x80>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80101a2:	6823      	ldr	r3, [r4, #0]
 80101a4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80101a6:	2000      	movs	r0, #0
 80101a8:	e7e4      	b.n	8010174 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101aa:	68c0      	ldr	r0, [r0, #12]
 80101ac:	f005 f9d5 	bl	801555a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80101b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101b2:	425a      	negs	r2, r3
 80101b4:	68e3      	ldr	r3, [r4, #12]
 80101b6:	189b      	adds	r3, r3, r2
 80101b8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80101ba:	6821      	ldr	r1, [r4, #0]
 80101bc:	428b      	cmp	r3, r1
 80101be:	d203      	bcs.n	80101c8 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80101c0:	6863      	ldr	r3, [r4, #4]
 80101c2:	469c      	mov	ip, r3
 80101c4:	4462      	add	r2, ip
 80101c6:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80101c8:	2d02      	cmp	r5, #2
 80101ca:	d001      	beq.n	80101d0 <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 80101cc:	2000      	movs	r0, #0
 80101ce:	e7d1      	b.n	8010174 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80101d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d006      	beq.n	80101e4 <prvCopyDataToQueue+0x84>
				--( pxQueue->uxMessagesWaiting );
 80101d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80101d8:	3b01      	subs	r3, #1
 80101da:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
 80101dc:	2000      	movs	r0, #0
 80101de:	e7c9      	b.n	8010174 <prvCopyDataToQueue+0x14>
 80101e0:	2000      	movs	r0, #0
 80101e2:	e7c7      	b.n	8010174 <prvCopyDataToQueue+0x14>
 80101e4:	2000      	movs	r0, #0
 80101e6:	e7c5      	b.n	8010174 <prvCopyDataToQueue+0x14>

080101e8 <prvCopyDataFromQueue>:
{
 80101e8:	b510      	push	{r4, lr}
 80101ea:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80101ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80101ee:	2a00      	cmp	r2, #0
 80101f0:	d00b      	beq.n	801020a <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80101f2:	68c3      	ldr	r3, [r0, #12]
 80101f4:	189b      	adds	r3, r3, r2
 80101f6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80101f8:	6841      	ldr	r1, [r0, #4]
 80101fa:	428b      	cmp	r3, r1
 80101fc:	d301      	bcc.n	8010202 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80101fe:	6803      	ldr	r3, [r0, #0]
 8010200:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010202:	68c1      	ldr	r1, [r0, #12]
 8010204:	0020      	movs	r0, r4
 8010206:	f005 f9a8 	bl	801555a <memcpy>
}
 801020a:	bd10      	pop	{r4, pc}

0801020c <prvUnlockQueue>:
{
 801020c:	b510      	push	{r4, lr}
 801020e:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8010210:	f001 fc64 	bl	8011adc <vPortEnterCritical>
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8010214:	e004      	b.n	8010220 <prvUnlockQueue+0x14>
						vTaskMissedYield();
 8010216:	f001 f813 	bl	8011240 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 801021a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801021c:	3b01      	subs	r3, #1
 801021e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8010220:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010222:	2b00      	cmp	r3, #0
 8010224:	dd09      	ble.n	801023a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010228:	2b00      	cmp	r3, #0
 801022a:	d006      	beq.n	801023a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801022c:	0020      	movs	r0, r4
 801022e:	3024      	adds	r0, #36	; 0x24
 8010230:	f000 ff80 	bl	8011134 <xTaskRemoveFromEventList>
 8010234:	2800      	cmp	r0, #0
 8010236:	d0f0      	beq.n	801021a <prvUnlockQueue+0xe>
 8010238:	e7ed      	b.n	8010216 <prvUnlockQueue+0xa>
		pxQueue->xTxLock = queueUNLOCKED;
 801023a:	2301      	movs	r3, #1
 801023c:	425b      	negs	r3, r3
 801023e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
 8010240:	f001 fc58 	bl	8011af4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010244:	f001 fc4a 	bl	8011adc <vPortEnterCritical>
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8010248:	e004      	b.n	8010254 <prvUnlockQueue+0x48>
					vTaskMissedYield();
 801024a:	f000 fff9 	bl	8011240 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 801024e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010250:	3b01      	subs	r3, #1
 8010252:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8010254:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010256:	2b00      	cmp	r3, #0
 8010258:	dd09      	ble.n	801026e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801025a:	6923      	ldr	r3, [r4, #16]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d006      	beq.n	801026e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010260:	0020      	movs	r0, r4
 8010262:	3010      	adds	r0, #16
 8010264:	f000 ff66 	bl	8011134 <xTaskRemoveFromEventList>
 8010268:	2800      	cmp	r0, #0
 801026a:	d0f0      	beq.n	801024e <prvUnlockQueue+0x42>
 801026c:	e7ed      	b.n	801024a <prvUnlockQueue+0x3e>
		pxQueue->xRxLock = queueUNLOCKED;
 801026e:	2301      	movs	r3, #1
 8010270:	425b      	negs	r3, r3
 8010272:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8010274:	f001 fc3e 	bl	8011af4 <vPortExitCritical>
}
 8010278:	bd10      	pop	{r4, pc}

0801027a <xQueueGenericReset>:
{
 801027a:	b570      	push	{r4, r5, r6, lr}
 801027c:	0004      	movs	r4, r0
 801027e:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 8010280:	2800      	cmp	r0, #0
 8010282:	d101      	bne.n	8010288 <xQueueGenericReset+0xe>
 8010284:	b672      	cpsid	i
 8010286:	e7fe      	b.n	8010286 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 8010288:	f001 fc28 	bl	8011adc <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801028c:	6822      	ldr	r2, [r4, #0]
 801028e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010290:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010292:	0001      	movs	r1, r0
 8010294:	4359      	muls	r1, r3
 8010296:	1851      	adds	r1, r2, r1
 8010298:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801029a:	2100      	movs	r1, #0
 801029c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801029e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80102a0:	3b01      	subs	r3, #1
 80102a2:	4343      	muls	r3, r0
 80102a4:	18d3      	adds	r3, r2, r3
 80102a6:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 80102a8:	2301      	movs	r3, #1
 80102aa:	425b      	negs	r3, r3
 80102ac:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 80102ae:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 80102b0:	2d00      	cmp	r5, #0
 80102b2:	d10f      	bne.n	80102d4 <xQueueGenericReset+0x5a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102b4:	6923      	ldr	r3, [r4, #16]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d103      	bne.n	80102c2 <xQueueGenericReset+0x48>
	taskEXIT_CRITICAL();
 80102ba:	f001 fc1b 	bl	8011af4 <vPortExitCritical>
}
 80102be:	2001      	movs	r0, #1
 80102c0:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80102c2:	0020      	movs	r0, r4
 80102c4:	3010      	adds	r0, #16
 80102c6:	f000 ff35 	bl	8011134 <xTaskRemoveFromEventList>
 80102ca:	2801      	cmp	r0, #1
 80102cc:	d1f5      	bne.n	80102ba <xQueueGenericReset+0x40>
					queueYIELD_IF_USING_PREEMPTION();
 80102ce:	f001 fbf9 	bl	8011ac4 <vPortYield>
 80102d2:	e7f2      	b.n	80102ba <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80102d4:	0020      	movs	r0, r4
 80102d6:	3010      	adds	r0, #16
 80102d8:	f7ff fee0 	bl	801009c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80102dc:	0020      	movs	r0, r4
 80102de:	3024      	adds	r0, #36	; 0x24
 80102e0:	f7ff fedc 	bl	801009c <vListInitialise>
 80102e4:	e7e9      	b.n	80102ba <xQueueGenericReset+0x40>

080102e6 <xQueueGenericCreate>:
{
 80102e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e8:	0006      	movs	r6, r0
 80102ea:	000d      	movs	r5, r1
 80102ec:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80102ee:	2800      	cmp	r0, #0
 80102f0:	d101      	bne.n	80102f6 <xQueueGenericCreate+0x10>
 80102f2:	b672      	cpsid	i
 80102f4:	e7fe      	b.n	80102f4 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80102f6:	2900      	cmp	r1, #0
 80102f8:	d003      	beq.n	8010302 <xQueueGenericCreate+0x1c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102fa:	0008      	movs	r0, r1
 80102fc:	4370      	muls	r0, r6
 80102fe:	3001      	adds	r0, #1
 8010300:	e000      	b.n	8010304 <xQueueGenericCreate+0x1e>
		xQueueSizeInBytes = ( size_t ) 0;
 8010302:	2000      	movs	r0, #0
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010304:	3054      	adds	r0, #84	; 0x54
 8010306:	f001 fc9d 	bl	8011c44 <pvPortMalloc>
 801030a:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 801030c:	d005      	beq.n	801031a <xQueueGenericCreate+0x34>
		if( uxItemSize == ( UBaseType_t ) 0 )
 801030e:	2d00      	cmp	r5, #0
 8010310:	d005      	beq.n	801031e <xQueueGenericCreate+0x38>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 8010312:	0003      	movs	r3, r0
 8010314:	3354      	adds	r3, #84	; 0x54
 8010316:	6003      	str	r3, [r0, #0]
 8010318:	e002      	b.n	8010320 <xQueueGenericCreate+0x3a>
	configASSERT( xReturn );
 801031a:	b672      	cpsid	i
 801031c:	e7fe      	b.n	801031c <xQueueGenericCreate+0x36>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801031e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 8010320:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 8010322:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010324:	2101      	movs	r1, #1
 8010326:	0020      	movs	r0, r4
 8010328:	f7ff ffa7 	bl	801027a <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 801032c:	2350      	movs	r3, #80	; 0x50
 801032e:	54e7      	strb	r7, [r4, r3]
}
 8010330:	0020      	movs	r0, r4
 8010332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010334 <xQueueCreateCountingSemaphore>:
	{
 8010334:	b510      	push	{r4, lr}
 8010336:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 8010338:	2800      	cmp	r0, #0
 801033a:	d101      	bne.n	8010340 <xQueueCreateCountingSemaphore+0xc>
 801033c:	b672      	cpsid	i
 801033e:	e7fe      	b.n	801033e <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010340:	4288      	cmp	r0, r1
 8010342:	d201      	bcs.n	8010348 <xQueueCreateCountingSemaphore+0x14>
 8010344:	b672      	cpsid	i
 8010346:	e7fe      	b.n	8010346 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010348:	2202      	movs	r2, #2
 801034a:	2100      	movs	r1, #0
 801034c:	f7ff ffcb 	bl	80102e6 <xQueueGenericCreate>
		if( xHandle != NULL )
 8010350:	2800      	cmp	r0, #0
 8010352:	d000      	beq.n	8010356 <xQueueCreateCountingSemaphore+0x22>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010354:	6384      	str	r4, [r0, #56]	; 0x38
		configASSERT( xHandle );
 8010356:	2800      	cmp	r0, #0
 8010358:	d101      	bne.n	801035e <xQueueCreateCountingSemaphore+0x2a>
 801035a:	b672      	cpsid	i
 801035c:	e7fe      	b.n	801035c <xQueueCreateCountingSemaphore+0x28>
	}
 801035e:	bd10      	pop	{r4, pc}

08010360 <xQueueGenericSend>:
{
 8010360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010362:	b085      	sub	sp, #20
 8010364:	0004      	movs	r4, r0
 8010366:	000f      	movs	r7, r1
 8010368:	9201      	str	r2, [sp, #4]
 801036a:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 801036c:	2800      	cmp	r0, #0
 801036e:	d006      	beq.n	801037e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010370:	2900      	cmp	r1, #0
 8010372:	d106      	bne.n	8010382 <xQueueGenericSend+0x22>
 8010374:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010376:	2b00      	cmp	r3, #0
 8010378:	d003      	beq.n	8010382 <xQueueGenericSend+0x22>
 801037a:	b672      	cpsid	i
 801037c:	e7fe      	b.n	801037c <xQueueGenericSend+0x1c>
	configASSERT( pxQueue );
 801037e:	b672      	cpsid	i
 8010380:	e7fe      	b.n	8010380 <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010382:	2d02      	cmp	r5, #2
 8010384:	d104      	bne.n	8010390 <xQueueGenericSend+0x30>
 8010386:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010388:	2b01      	cmp	r3, #1
 801038a:	d001      	beq.n	8010390 <xQueueGenericSend+0x30>
 801038c:	b672      	cpsid	i
 801038e:	e7fe      	b.n	801038e <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010390:	f000 ff5c 	bl	801124c <xTaskGetSchedulerState>
 8010394:	2800      	cmp	r0, #0
 8010396:	d104      	bne.n	80103a2 <xQueueGenericSend+0x42>
 8010398:	9b01      	ldr	r3, [sp, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d003      	beq.n	80103a6 <xQueueGenericSend+0x46>
 801039e:	b672      	cpsid	i
 80103a0:	e7fe      	b.n	80103a0 <xQueueGenericSend+0x40>
 80103a2:	2600      	movs	r6, #0
 80103a4:	e02f      	b.n	8010406 <xQueueGenericSend+0xa6>
 80103a6:	2600      	movs	r6, #0
 80103a8:	e02d      	b.n	8010406 <xQueueGenericSend+0xa6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103aa:	002a      	movs	r2, r5
 80103ac:	0039      	movs	r1, r7
 80103ae:	0020      	movs	r0, r4
 80103b0:	f7ff fed6 	bl	8010160 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d104      	bne.n	80103c4 <xQueueGenericSend+0x64>
					else if( xYieldRequired != pdFALSE )
 80103ba:	2800      	cmp	r0, #0
 80103bc:	d00a      	beq.n	80103d4 <xQueueGenericSend+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 80103be:	f001 fb81 	bl	8011ac4 <vPortYield>
 80103c2:	e007      	b.n	80103d4 <xQueueGenericSend+0x74>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80103c4:	0020      	movs	r0, r4
 80103c6:	3024      	adds	r0, #36	; 0x24
 80103c8:	f000 feb4 	bl	8011134 <xTaskRemoveFromEventList>
 80103cc:	2801      	cmp	r0, #1
 80103ce:	d101      	bne.n	80103d4 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
 80103d0:	f001 fb78 	bl	8011ac4 <vPortYield>
				taskEXIT_CRITICAL();
 80103d4:	f001 fb8e 	bl	8011af4 <vPortExitCritical>
				return pdPASS;
 80103d8:	2001      	movs	r0, #1
}
 80103da:	b005      	add	sp, #20
 80103dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80103de:	f001 fb89 	bl	8011af4 <vPortExitCritical>
					return errQUEUE_FULL;
 80103e2:	2000      	movs	r0, #0
 80103e4:	e7f9      	b.n	80103da <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 80103e6:	a802      	add	r0, sp, #8
 80103e8:	f000 fee6 	bl	80111b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80103ec:	3601      	adds	r6, #1
 80103ee:	e017      	b.n	8010420 <xQueueGenericSend+0xc0>
		prvLockQueue( pxQueue );
 80103f0:	2300      	movs	r3, #0
 80103f2:	6463      	str	r3, [r4, #68]	; 0x44
 80103f4:	e01d      	b.n	8010432 <xQueueGenericSend+0xd2>
 80103f6:	2300      	movs	r3, #0
 80103f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80103fa:	e01d      	b.n	8010438 <xQueueGenericSend+0xd8>
				prvUnlockQueue( pxQueue );
 80103fc:	0020      	movs	r0, r4
 80103fe:	f7ff ff05 	bl	801020c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010402:	f000 fcc3 	bl	8010d8c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8010406:	f001 fb69 	bl	8011adc <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801040a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801040c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801040e:	4293      	cmp	r3, r2
 8010410:	d3cb      	bcc.n	80103aa <xQueueGenericSend+0x4a>
 8010412:	2d02      	cmp	r5, #2
 8010414:	d0c9      	beq.n	80103aa <xQueueGenericSend+0x4a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010416:	9b01      	ldr	r3, [sp, #4]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d0e0      	beq.n	80103de <xQueueGenericSend+0x7e>
				else if( xEntryTimeSet == pdFALSE )
 801041c:	2e00      	cmp	r6, #0
 801041e:	d0e2      	beq.n	80103e6 <xQueueGenericSend+0x86>
		taskEXIT_CRITICAL();
 8010420:	f001 fb68 	bl	8011af4 <vPortExitCritical>
		vTaskSuspendAll();
 8010424:	f000 fc14 	bl	8010c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010428:	f001 fb58 	bl	8011adc <vPortEnterCritical>
 801042c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801042e:	3301      	adds	r3, #1
 8010430:	d0de      	beq.n	80103f0 <xQueueGenericSend+0x90>
 8010432:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010434:	3301      	adds	r3, #1
 8010436:	d0de      	beq.n	80103f6 <xQueueGenericSend+0x96>
 8010438:	f001 fb5c 	bl	8011af4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801043c:	a901      	add	r1, sp, #4
 801043e:	a802      	add	r0, sp, #8
 8010440:	f000 feca 	bl	80111d8 <xTaskCheckForTimeOut>
 8010444:	2800      	cmp	r0, #0
 8010446:	d113      	bne.n	8010470 <xQueueGenericSend+0x110>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010448:	0020      	movs	r0, r4
 801044a:	f7ff fe6c 	bl	8010126 <prvIsQueueFull>
 801044e:	2800      	cmp	r0, #0
 8010450:	d0d4      	beq.n	80103fc <xQueueGenericSend+0x9c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010452:	0020      	movs	r0, r4
 8010454:	3010      	adds	r0, #16
 8010456:	9901      	ldr	r1, [sp, #4]
 8010458:	f000 fe2e 	bl	80110b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801045c:	0020      	movs	r0, r4
 801045e:	f7ff fed5 	bl	801020c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010462:	f000 fc93 	bl	8010d8c <xTaskResumeAll>
 8010466:	2800      	cmp	r0, #0
 8010468:	d1cd      	bne.n	8010406 <xQueueGenericSend+0xa6>
					portYIELD_WITHIN_API();
 801046a:	f001 fb2b 	bl	8011ac4 <vPortYield>
 801046e:	e7ca      	b.n	8010406 <xQueueGenericSend+0xa6>
			prvUnlockQueue( pxQueue );
 8010470:	0020      	movs	r0, r4
 8010472:	f7ff fecb 	bl	801020c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010476:	f000 fc89 	bl	8010d8c <xTaskResumeAll>
			return errQUEUE_FULL;
 801047a:	2000      	movs	r0, #0
 801047c:	e7ad      	b.n	80103da <xQueueGenericSend+0x7a>

0801047e <xQueueGenericSendFromISR>:
{
 801047e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010480:	b083      	sub	sp, #12
 8010482:	0004      	movs	r4, r0
 8010484:	000f      	movs	r7, r1
 8010486:	0015      	movs	r5, r2
 8010488:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 801048a:	2800      	cmp	r0, #0
 801048c:	d006      	beq.n	801049c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801048e:	2900      	cmp	r1, #0
 8010490:	d106      	bne.n	80104a0 <xQueueGenericSendFromISR+0x22>
 8010492:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010494:	2b00      	cmp	r3, #0
 8010496:	d003      	beq.n	80104a0 <xQueueGenericSendFromISR+0x22>
 8010498:	b672      	cpsid	i
 801049a:	e7fe      	b.n	801049a <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 801049c:	b672      	cpsid	i
 801049e:	e7fe      	b.n	801049e <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104a0:	2e02      	cmp	r6, #2
 80104a2:	d104      	bne.n	80104ae <xQueueGenericSendFromISR+0x30>
 80104a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d001      	beq.n	80104ae <xQueueGenericSendFromISR+0x30>
 80104aa:	b672      	cpsid	i
 80104ac:	e7fe      	b.n	80104ac <xQueueGenericSendFromISR+0x2e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80104ae:	f001 fb31 	bl	8011b14 <ulSetInterruptMaskFromISR>
 80104b2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80104b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80104b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d303      	bcc.n	80104c4 <xQueueGenericSendFromISR+0x46>
 80104bc:	2e02      	cmp	r6, #2
 80104be:	d001      	beq.n	80104c4 <xQueueGenericSendFromISR+0x46>
			xReturn = errQUEUE_FULL;
 80104c0:	2400      	movs	r4, #0
 80104c2:	e00b      	b.n	80104dc <xQueueGenericSendFromISR+0x5e>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80104c4:	0032      	movs	r2, r6
 80104c6:	0039      	movs	r1, r7
 80104c8:	0020      	movs	r0, r4
 80104ca:	f7ff fe49 	bl	8010160 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 80104ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80104d0:	3301      	adds	r3, #1
 80104d2:	d009      	beq.n	80104e8 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
 80104d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80104d6:	3301      	adds	r3, #1
 80104d8:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 80104da:	2401      	movs	r4, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80104dc:	9801      	ldr	r0, [sp, #4]
 80104de:	f001 fb1e 	bl	8011b1e <vClearInterruptMaskFromISR>
}
 80104e2:	0020      	movs	r0, r4
 80104e4:	b003      	add	sp, #12
 80104e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80104e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d00a      	beq.n	8010504 <xQueueGenericSendFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80104ee:	0020      	movs	r0, r4
 80104f0:	3024      	adds	r0, #36	; 0x24
 80104f2:	f000 fe1f 	bl	8011134 <xTaskRemoveFromEventList>
 80104f6:	2800      	cmp	r0, #0
 80104f8:	d006      	beq.n	8010508 <xQueueGenericSendFromISR+0x8a>
							if( pxHigherPriorityTaskWoken != NULL )
 80104fa:	2d00      	cmp	r5, #0
 80104fc:	d006      	beq.n	801050c <xQueueGenericSendFromISR+0x8e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80104fe:	2401      	movs	r4, #1
 8010500:	602c      	str	r4, [r5, #0]
 8010502:	e7eb      	b.n	80104dc <xQueueGenericSendFromISR+0x5e>
			xReturn = pdPASS;
 8010504:	2401      	movs	r4, #1
 8010506:	e7e9      	b.n	80104dc <xQueueGenericSendFromISR+0x5e>
 8010508:	2401      	movs	r4, #1
 801050a:	e7e7      	b.n	80104dc <xQueueGenericSendFromISR+0x5e>
 801050c:	2401      	movs	r4, #1
 801050e:	e7e5      	b.n	80104dc <xQueueGenericSendFromISR+0x5e>

08010510 <xQueueGiveFromISR>:
{
 8010510:	b570      	push	{r4, r5, r6, lr}
 8010512:	0004      	movs	r4, r0
 8010514:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 8010516:	2800      	cmp	r0, #0
 8010518:	d004      	beq.n	8010524 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 801051a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801051c:	2b00      	cmp	r3, #0
 801051e:	d003      	beq.n	8010528 <xQueueGiveFromISR+0x18>
 8010520:	b672      	cpsid	i
 8010522:	e7fe      	b.n	8010522 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 8010524:	b672      	cpsid	i
 8010526:	e7fe      	b.n	8010526 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010528:	6803      	ldr	r3, [r0, #0]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d01e      	beq.n	801056c <xQueueGiveFromISR+0x5c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801052e:	f001 faf1 	bl	8011b14 <ulSetInterruptMaskFromISR>
 8010532:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8010534:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010536:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010538:	4293      	cmp	r3, r2
 801053a:	d221      	bcs.n	8010580 <xQueueGiveFromISR+0x70>
			++( pxQueue->uxMessagesWaiting );
 801053c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801053e:	3301      	adds	r3, #1
 8010540:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 8010542:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010544:	3301      	adds	r3, #1
 8010546:	d116      	bne.n	8010576 <xQueueGiveFromISR+0x66>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801054a:	2b00      	cmp	r3, #0
 801054c:	d01a      	beq.n	8010584 <xQueueGiveFromISR+0x74>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801054e:	0020      	movs	r0, r4
 8010550:	3024      	adds	r0, #36	; 0x24
 8010552:	f000 fdef 	bl	8011134 <xTaskRemoveFromEventList>
 8010556:	2800      	cmp	r0, #0
 8010558:	d016      	beq.n	8010588 <xQueueGiveFromISR+0x78>
							if( pxHigherPriorityTaskWoken != NULL )
 801055a:	2e00      	cmp	r6, #0
 801055c:	d016      	beq.n	801058c <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801055e:	2401      	movs	r4, #1
 8010560:	6034      	str	r4, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8010562:	0028      	movs	r0, r5
 8010564:	f001 fadb 	bl	8011b1e <vClearInterruptMaskFromISR>
}
 8010568:	0020      	movs	r0, r4
 801056a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 801056c:	6843      	ldr	r3, [r0, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d0dd      	beq.n	801052e <xQueueGiveFromISR+0x1e>
 8010572:	b672      	cpsid	i
 8010574:	e7fe      	b.n	8010574 <xQueueGiveFromISR+0x64>
				++( pxQueue->xTxLock );
 8010576:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010578:	3301      	adds	r3, #1
 801057a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 801057c:	2401      	movs	r4, #1
 801057e:	e7f0      	b.n	8010562 <xQueueGiveFromISR+0x52>
			xReturn = errQUEUE_FULL;
 8010580:	2400      	movs	r4, #0
 8010582:	e7ee      	b.n	8010562 <xQueueGiveFromISR+0x52>
			xReturn = pdPASS;
 8010584:	2401      	movs	r4, #1
 8010586:	e7ec      	b.n	8010562 <xQueueGiveFromISR+0x52>
 8010588:	2401      	movs	r4, #1
 801058a:	e7ea      	b.n	8010562 <xQueueGiveFromISR+0x52>
 801058c:	2401      	movs	r4, #1
 801058e:	e7e8      	b.n	8010562 <xQueueGiveFromISR+0x52>

08010590 <xQueueGenericReceive>:
{
 8010590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010592:	b085      	sub	sp, #20
 8010594:	0004      	movs	r4, r0
 8010596:	000e      	movs	r6, r1
 8010598:	9201      	str	r2, [sp, #4]
 801059a:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 801059c:	2800      	cmp	r0, #0
 801059e:	d006      	beq.n	80105ae <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105a0:	2900      	cmp	r1, #0
 80105a2:	d106      	bne.n	80105b2 <xQueueGenericReceive+0x22>
 80105a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d003      	beq.n	80105b2 <xQueueGenericReceive+0x22>
 80105aa:	b672      	cpsid	i
 80105ac:	e7fe      	b.n	80105ac <xQueueGenericReceive+0x1c>
	configASSERT( pxQueue );
 80105ae:	b672      	cpsid	i
 80105b0:	e7fe      	b.n	80105b0 <xQueueGenericReceive+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105b2:	f000 fe4b 	bl	801124c <xTaskGetSchedulerState>
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d104      	bne.n	80105c4 <xQueueGenericReceive+0x34>
 80105ba:	9b01      	ldr	r3, [sp, #4]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d003      	beq.n	80105c8 <xQueueGenericReceive+0x38>
 80105c0:	b672      	cpsid	i
 80105c2:	e7fe      	b.n	80105c2 <xQueueGenericReceive+0x32>
 80105c4:	2500      	movs	r5, #0
 80105c6:	e04a      	b.n	801065e <xQueueGenericReceive+0xce>
 80105c8:	2500      	movs	r5, #0
 80105ca:	e048      	b.n	801065e <xQueueGenericReceive+0xce>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80105cc:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80105ce:	0031      	movs	r1, r6
 80105d0:	0020      	movs	r0, r4
 80105d2:	f7ff fe09 	bl	80101e8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80105d6:	2f00      	cmp	r7, #0
 80105d8:	d118      	bne.n	801060c <xQueueGenericReceive+0x7c>
					--( pxQueue->uxMessagesWaiting );
 80105da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80105dc:	3b01      	subs	r3, #1
 80105de:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80105e0:	6823      	ldr	r3, [r4, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d102      	bne.n	80105ec <xQueueGenericReceive+0x5c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80105e6:	f000 ff6b 	bl	80114c0 <pvTaskIncrementMutexHeldCount>
 80105ea:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105ec:	6923      	ldr	r3, [r4, #16]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d007      	beq.n	8010602 <xQueueGenericReceive+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80105f2:	0020      	movs	r0, r4
 80105f4:	3010      	adds	r0, #16
 80105f6:	f000 fd9d 	bl	8011134 <xTaskRemoveFromEventList>
 80105fa:	2801      	cmp	r0, #1
 80105fc:	d101      	bne.n	8010602 <xQueueGenericReceive+0x72>
							queueYIELD_IF_USING_PREEMPTION();
 80105fe:	f001 fa61 	bl	8011ac4 <vPortYield>
				taskEXIT_CRITICAL();
 8010602:	f001 fa77 	bl	8011af4 <vPortExitCritical>
				return pdPASS;
 8010606:	2001      	movs	r0, #1
}
 8010608:	b005      	add	sp, #20
 801060a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 801060c:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801060e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010610:	2b00      	cmp	r3, #0
 8010612:	d0f6      	beq.n	8010602 <xQueueGenericReceive+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010614:	0020      	movs	r0, r4
 8010616:	3024      	adds	r0, #36	; 0x24
 8010618:	f000 fd8c 	bl	8011134 <xTaskRemoveFromEventList>
 801061c:	2800      	cmp	r0, #0
 801061e:	d0f0      	beq.n	8010602 <xQueueGenericReceive+0x72>
							queueYIELD_IF_USING_PREEMPTION();
 8010620:	f001 fa50 	bl	8011ac4 <vPortYield>
 8010624:	e7ed      	b.n	8010602 <xQueueGenericReceive+0x72>
					taskEXIT_CRITICAL();
 8010626:	f001 fa65 	bl	8011af4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801062a:	2000      	movs	r0, #0
 801062c:	e7ec      	b.n	8010608 <xQueueGenericReceive+0x78>
					vTaskSetTimeOutState( &xTimeOut );
 801062e:	a802      	add	r0, sp, #8
 8010630:	f000 fdc2 	bl	80111b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010634:	3501      	adds	r5, #1
 8010636:	e01c      	b.n	8010672 <xQueueGenericReceive+0xe2>
		prvLockQueue( pxQueue );
 8010638:	2300      	movs	r3, #0
 801063a:	6463      	str	r3, [r4, #68]	; 0x44
 801063c:	e022      	b.n	8010684 <xQueueGenericReceive+0xf4>
 801063e:	2300      	movs	r3, #0
 8010640:	64a3      	str	r3, [r4, #72]	; 0x48
 8010642:	e022      	b.n	801068a <xQueueGenericReceive+0xfa>
						taskENTER_CRITICAL();
 8010644:	f001 fa4a 	bl	8011adc <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010648:	6860      	ldr	r0, [r4, #4]
 801064a:	f000 fe11 	bl	8011270 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 801064e:	f001 fa51 	bl	8011af4 <vPortExitCritical>
 8010652:	e02a      	b.n	80106aa <xQueueGenericReceive+0x11a>
				prvUnlockQueue( pxQueue );
 8010654:	0020      	movs	r0, r4
 8010656:	f7ff fdd9 	bl	801020c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801065a:	f000 fb97 	bl	8010d8c <xTaskResumeAll>
		taskENTER_CRITICAL();
 801065e:	f001 fa3d 	bl	8011adc <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010662:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010664:	2b00      	cmp	r3, #0
 8010666:	d1b1      	bne.n	80105cc <xQueueGenericReceive+0x3c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010668:	9b01      	ldr	r3, [sp, #4]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d0db      	beq.n	8010626 <xQueueGenericReceive+0x96>
				else if( xEntryTimeSet == pdFALSE )
 801066e:	2d00      	cmp	r5, #0
 8010670:	d0dd      	beq.n	801062e <xQueueGenericReceive+0x9e>
		taskEXIT_CRITICAL();
 8010672:	f001 fa3f 	bl	8011af4 <vPortExitCritical>
		vTaskSuspendAll();
 8010676:	f000 faeb 	bl	8010c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801067a:	f001 fa2f 	bl	8011adc <vPortEnterCritical>
 801067e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010680:	3301      	adds	r3, #1
 8010682:	d0d9      	beq.n	8010638 <xQueueGenericReceive+0xa8>
 8010684:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010686:	3301      	adds	r3, #1
 8010688:	d0d9      	beq.n	801063e <xQueueGenericReceive+0xae>
 801068a:	f001 fa33 	bl	8011af4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801068e:	a901      	add	r1, sp, #4
 8010690:	a802      	add	r0, sp, #8
 8010692:	f000 fda1 	bl	80111d8 <xTaskCheckForTimeOut>
 8010696:	2800      	cmp	r0, #0
 8010698:	d116      	bne.n	80106c8 <xQueueGenericReceive+0x138>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801069a:	0020      	movs	r0, r4
 801069c:	f7ff fd52 	bl	8010144 <prvIsQueueEmpty>
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d0d7      	beq.n	8010654 <xQueueGenericReceive+0xc4>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80106a4:	6823      	ldr	r3, [r4, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d0cc      	beq.n	8010644 <xQueueGenericReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80106aa:	0020      	movs	r0, r4
 80106ac:	3024      	adds	r0, #36	; 0x24
 80106ae:	9901      	ldr	r1, [sp, #4]
 80106b0:	f000 fd02 	bl	80110b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80106b4:	0020      	movs	r0, r4
 80106b6:	f7ff fda9 	bl	801020c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80106ba:	f000 fb67 	bl	8010d8c <xTaskResumeAll>
 80106be:	2800      	cmp	r0, #0
 80106c0:	d1cd      	bne.n	801065e <xQueueGenericReceive+0xce>
					portYIELD_WITHIN_API();
 80106c2:	f001 f9ff 	bl	8011ac4 <vPortYield>
 80106c6:	e7ca      	b.n	801065e <xQueueGenericReceive+0xce>
			prvUnlockQueue( pxQueue );
 80106c8:	0020      	movs	r0, r4
 80106ca:	f7ff fd9f 	bl	801020c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106ce:	f000 fb5d 	bl	8010d8c <xTaskResumeAll>
			return errQUEUE_EMPTY;
 80106d2:	2000      	movs	r0, #0
 80106d4:	e798      	b.n	8010608 <xQueueGenericReceive+0x78>

080106d6 <xQueueReceiveFromISR>:
{
 80106d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106d8:	0004      	movs	r4, r0
 80106da:	000f      	movs	r7, r1
 80106dc:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 80106de:	2800      	cmp	r0, #0
 80106e0:	d006      	beq.n	80106f0 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80106e2:	2900      	cmp	r1, #0
 80106e4:	d106      	bne.n	80106f4 <xQueueReceiveFromISR+0x1e>
 80106e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d003      	beq.n	80106f4 <xQueueReceiveFromISR+0x1e>
 80106ec:	b672      	cpsid	i
 80106ee:	e7fe      	b.n	80106ee <xQueueReceiveFromISR+0x18>
	configASSERT( pxQueue );
 80106f0:	b672      	cpsid	i
 80106f2:	e7fe      	b.n	80106f2 <xQueueReceiveFromISR+0x1c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80106f4:	f001 fa0e 	bl	8011b14 <ulSetInterruptMaskFromISR>
 80106f8:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80106fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d01c      	beq.n	801073a <xQueueReceiveFromISR+0x64>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010700:	0039      	movs	r1, r7
 8010702:	0020      	movs	r0, r4
 8010704:	f7ff fd70 	bl	80101e8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8010708:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801070a:	3b01      	subs	r3, #1
 801070c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 801070e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010710:	3301      	adds	r3, #1
 8010712:	d004      	beq.n	801071e <xQueueReceiveFromISR+0x48>
				++( pxQueue->xRxLock );
 8010714:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010716:	3301      	adds	r3, #1
 8010718:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 801071a:	2401      	movs	r4, #1
 801071c:	e00e      	b.n	801073c <xQueueReceiveFromISR+0x66>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801071e:	6923      	ldr	r3, [r4, #16]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d010      	beq.n	8010746 <xQueueReceiveFromISR+0x70>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010724:	0020      	movs	r0, r4
 8010726:	3010      	adds	r0, #16
 8010728:	f000 fd04 	bl	8011134 <xTaskRemoveFromEventList>
 801072c:	2800      	cmp	r0, #0
 801072e:	d00c      	beq.n	801074a <xQueueReceiveFromISR+0x74>
						if( pxHigherPriorityTaskWoken != NULL )
 8010730:	2e00      	cmp	r6, #0
 8010732:	d00c      	beq.n	801074e <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010734:	2401      	movs	r4, #1
 8010736:	6034      	str	r4, [r6, #0]
 8010738:	e000      	b.n	801073c <xQueueReceiveFromISR+0x66>
			xReturn = pdFAIL;
 801073a:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801073c:	0028      	movs	r0, r5
 801073e:	f001 f9ee 	bl	8011b1e <vClearInterruptMaskFromISR>
}
 8010742:	0020      	movs	r0, r4
 8010744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 8010746:	2401      	movs	r4, #1
 8010748:	e7f8      	b.n	801073c <xQueueReceiveFromISR+0x66>
 801074a:	2401      	movs	r4, #1
 801074c:	e7f6      	b.n	801073c <xQueueReceiveFromISR+0x66>
 801074e:	2401      	movs	r4, #1
 8010750:	e7f4      	b.n	801073c <xQueueReceiveFromISR+0x66>
	...

08010754 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010754:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010756:	2300      	movs	r3, #0
 8010758:	2b07      	cmp	r3, #7
 801075a:	d80a      	bhi.n	8010772 <vQueueAddToRegistry+0x1e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801075c:	00da      	lsls	r2, r3, #3
 801075e:	4c05      	ldr	r4, [pc, #20]	; (8010774 <vQueueAddToRegistry+0x20>)
 8010760:	5912      	ldr	r2, [r2, r4]
 8010762:	2a00      	cmp	r2, #0
 8010764:	d001      	beq.n	801076a <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010766:	3301      	adds	r3, #1
 8010768:	e7f6      	b.n	8010758 <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801076a:	00db      	lsls	r3, r3, #3
 801076c:	5119      	str	r1, [r3, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801076e:	18e3      	adds	r3, r4, r3
 8010770:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010772:	bd10      	pop	{r4, pc}
 8010774:	20007518 	.word	0x20007518

08010778 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8010778:	b570      	push	{r4, r5, r6, lr}
 801077a:	0004      	movs	r4, r0
 801077c:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801077e:	f001 f9ad 	bl	8011adc <vPortEnterCritical>
 8010782:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010784:	3301      	adds	r3, #1
 8010786:	d00b      	beq.n	80107a0 <vQueueWaitForMessageRestricted+0x28>
 8010788:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801078a:	3301      	adds	r3, #1
 801078c:	d00b      	beq.n	80107a6 <vQueueWaitForMessageRestricted+0x2e>
 801078e:	f001 f9b1 	bl	8011af4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010792:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010794:	2b00      	cmp	r3, #0
 8010796:	d009      	beq.n	80107ac <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010798:	0020      	movs	r0, r4
 801079a:	f7ff fd37 	bl	801020c <prvUnlockQueue>
	}
 801079e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80107a0:	2300      	movs	r3, #0
 80107a2:	6463      	str	r3, [r4, #68]	; 0x44
 80107a4:	e7f0      	b.n	8010788 <vQueueWaitForMessageRestricted+0x10>
 80107a6:	2300      	movs	r3, #0
 80107a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80107aa:	e7f0      	b.n	801078e <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80107ac:	0020      	movs	r0, r4
 80107ae:	3024      	adds	r0, #36	; 0x24
 80107b0:	0029      	movs	r1, r5
 80107b2:	f000 fca5 	bl	8011100 <vTaskPlaceOnEventListRestricted>
 80107b6:	e7ef      	b.n	8010798 <vQueueWaitForMessageRestricted+0x20>

080107b8 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 80107b8:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80107ba:	e001      	b.n	80107c0 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 80107bc:	3001      	adds	r0, #1
			ulCount++;
 80107be:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80107c0:	7802      	ldrb	r2, [r0, #0]
 80107c2:	2aa5      	cmp	r2, #165	; 0xa5
 80107c4:	d0fa      	beq.n	80107bc <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80107c6:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 80107c8:	b298      	uxth	r0, r3
	}
 80107ca:	4770      	bx	lr

080107cc <prvListTaskWithinSingleList>:
	{
 80107cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ce:	46de      	mov	lr, fp
 80107d0:	4657      	mov	r7, sl
 80107d2:	464e      	mov	r6, r9
 80107d4:	4645      	mov	r5, r8
 80107d6:	b5e0      	push	{r5, r6, r7, lr}
 80107d8:	4682      	mov	sl, r0
 80107da:	000e      	movs	r6, r1
 80107dc:	4690      	mov	r8, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80107de:	680f      	ldr	r7, [r1, #0]
 80107e0:	2f00      	cmp	r7, #0
 80107e2:	d039      	beq.n	8010858 <prvListTaskWithinSingleList+0x8c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80107e4:	684b      	ldr	r3, [r1, #4]
 80107e6:	685b      	ldr	r3, [r3, #4]
 80107e8:	604b      	str	r3, [r1, #4]
 80107ea:	2208      	movs	r2, #8
 80107ec:	4691      	mov	r9, r2
 80107ee:	4489      	add	r9, r1
 80107f0:	454b      	cmp	r3, r9
 80107f2:	d004      	beq.n	80107fe <prvListTaskWithinSingleList+0x32>
 80107f4:	6873      	ldr	r3, [r6, #4]
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	469b      	mov	fp, r3
	UBaseType_t uxTask = 0;
 80107fa:	2700      	movs	r7, #0
 80107fc:	e010      	b.n	8010820 <prvListTaskWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	604b      	str	r3, [r1, #4]
 8010802:	e7f7      	b.n	80107f4 <prvListTaskWithinSingleList+0x28>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	6073      	str	r3, [r6, #4]
 8010808:	e00f      	b.n	801082a <prvListTaskWithinSingleList+0x5e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 801080a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801080c:	6163      	str	r3, [r4, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 801080e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8010810:	61a3      	str	r3, [r4, #24]
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 8010812:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010814:	f7ff ffd0 	bl	80107b8 <prvTaskCheckFreeStackSpace>
 8010818:	83a0      	strh	r0, [r4, #28]
				uxTask++;
 801081a:	3701      	adds	r7, #1
			} while( pxNextTCB != pxFirstTCB );
 801081c:	45ab      	cmp	fp, r5
 801081e:	d01b      	beq.n	8010858 <prvListTaskWithinSingleList+0x8c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8010820:	6873      	ldr	r3, [r6, #4]
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	6073      	str	r3, [r6, #4]
 8010826:	4599      	cmp	r9, r3
 8010828:	d0ec      	beq.n	8010804 <prvListTaskWithinSingleList+0x38>
 801082a:	6873      	ldr	r3, [r6, #4]
 801082c:	68dd      	ldr	r5, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 801082e:	017c      	lsls	r4, r7, #5
 8010830:	4454      	add	r4, sl
 8010832:	6025      	str	r5, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 8010834:	002b      	movs	r3, r5
 8010836:	3334      	adds	r3, #52	; 0x34
 8010838:	6063      	str	r3, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 801083a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801083c:	60a3      	str	r3, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 801083e:	4643      	mov	r3, r8
 8010840:	7323      	strb	r3, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 8010842:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010844:	6123      	str	r3, [r4, #16]
					if( eState == eSuspended )
 8010846:	4643      	mov	r3, r8
 8010848:	2b03      	cmp	r3, #3
 801084a:	d1de      	bne.n	801080a <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 801084c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801084e:	2b00      	cmp	r3, #0
 8010850:	d0db      	beq.n	801080a <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 8010852:	2302      	movs	r3, #2
 8010854:	7323      	strb	r3, [r4, #12]
 8010856:	e7d8      	b.n	801080a <prvListTaskWithinSingleList+0x3e>
	}
 8010858:	0038      	movs	r0, r7
 801085a:	bc3c      	pop	{r2, r3, r4, r5}
 801085c:	4690      	mov	r8, r2
 801085e:	4699      	mov	r9, r3
 8010860:	46a2      	mov	sl, r4
 8010862:	46ab      	mov	fp, r5
 8010864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010868 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010868:	4b08      	ldr	r3, [pc, #32]	; (801088c <prvResetNextTaskUnblockTime+0x24>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d007      	beq.n	8010882 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010872:	4b06      	ldr	r3, [pc, #24]	; (801088c <prvResetNextTaskUnblockTime+0x24>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 801087a:	685a      	ldr	r2, [r3, #4]
 801087c:	4b04      	ldr	r3, [pc, #16]	; (8010890 <prvResetNextTaskUnblockTime+0x28>)
 801087e:	601a      	str	r2, [r3, #0]
	}
}
 8010880:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8010882:	4b03      	ldr	r3, [pc, #12]	; (8010890 <prvResetNextTaskUnblockTime+0x28>)
 8010884:	2201      	movs	r2, #1
 8010886:	4252      	negs	r2, r2
 8010888:	601a      	str	r2, [r3, #0]
 801088a:	e7f9      	b.n	8010880 <prvResetNextTaskUnblockTime+0x18>
 801088c:	200023e0 	.word	0x200023e0
 8010890:	200000d0 	.word	0x200000d0

08010894 <prvDeleteTCB>:
	{
 8010894:	b510      	push	{r4, lr}
 8010896:	0004      	movs	r4, r0
			vPortFreeAligned( pxTCB->pxStack );
 8010898:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801089a:	f001 fa4b 	bl	8011d34 <vPortFree>
		vPortFree( pxTCB );
 801089e:	0020      	movs	r0, r4
 80108a0:	f001 fa48 	bl	8011d34 <vPortFree>
	}
 80108a4:	bd10      	pop	{r4, pc}

080108a6 <prvAllocateTCBAndStack>:
{
 80108a6:	b570      	push	{r4, r5, r6, lr}
 80108a8:	0006      	movs	r6, r0
 80108aa:	1e0d      	subs	r5, r1, #0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ac:	d103      	bne.n	80108b6 <prvAllocateTCBAndStack+0x10>
 80108ae:	0080      	lsls	r0, r0, #2
 80108b0:	f001 f9c8 	bl	8011c44 <pvPortMalloc>
 80108b4:	0005      	movs	r5, r0
		if( pxStack != NULL )
 80108b6:	2d00      	cmp	r5, #0
 80108b8:	d012      	beq.n	80108e0 <prvAllocateTCBAndStack+0x3a>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80108ba:	2060      	movs	r0, #96	; 0x60
 80108bc:	f001 f9c2 	bl	8011c44 <pvPortMalloc>
 80108c0:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 80108c2:	d009      	beq.n	80108d8 <prvAllocateTCBAndStack+0x32>
				pxNewTCB->pxStack = pxStack;
 80108c4:	6305      	str	r5, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
 80108c6:	2c00      	cmp	r4, #0
 80108c8:	d004      	beq.n	80108d4 <prvAllocateTCBAndStack+0x2e>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80108ca:	00b2      	lsls	r2, r6, #2
 80108cc:	21a5      	movs	r1, #165	; 0xa5
 80108ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80108d0:	f004 fe4c 	bl	801556c <memset>
}
 80108d4:	0020      	movs	r0, r4
 80108d6:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxStack );
 80108d8:	0028      	movs	r0, r5
 80108da:	f001 fa2b 	bl	8011d34 <vPortFree>
 80108de:	e7f2      	b.n	80108c6 <prvAllocateTCBAndStack+0x20>
			pxNewTCB = NULL;
 80108e0:	2400      	movs	r4, #0
	return pxNewTCB;
 80108e2:	e7f7      	b.n	80108d4 <prvAllocateTCBAndStack+0x2e>

080108e4 <prvInitialiseTCBVariables>:
{
 80108e4:	b570      	push	{r4, r5, r6, lr}
 80108e6:	0004      	movs	r4, r0
 80108e8:	0015      	movs	r5, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80108ea:	2300      	movs	r3, #0
 80108ec:	2b0c      	cmp	r3, #12
 80108ee:	d91a      	bls.n	8010926 <prvInitialiseTCBVariables+0x42>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80108f0:	2340      	movs	r3, #64	; 0x40
 80108f2:	2200      	movs	r2, #0
 80108f4:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80108f6:	2d06      	cmp	r5, #6
 80108f8:	d900      	bls.n	80108fc <prvInitialiseTCBVariables+0x18>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80108fa:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 80108fc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 80108fe:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 8010900:	2600      	movs	r6, #0
 8010902:	6526      	str	r6, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8010904:	1d20      	adds	r0, r4, #4
 8010906:	f7ff fbd4 	bl	80100b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 801090a:	0020      	movs	r0, r4
 801090c:	3018      	adds	r0, #24
 801090e:	f7ff fbd0 	bl	80100b2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8010912:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010914:	2307      	movs	r3, #7
 8010916:	1b5d      	subs	r5, r3, r5
 8010918:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 801091a:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 801091c:	6566      	str	r6, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 801091e:	65a6      	str	r6, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 8010920:	3355      	adds	r3, #85	; 0x55
 8010922:	54e6      	strb	r6, [r4, r3]
}
 8010924:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8010926:	18c8      	adds	r0, r1, r3
 8010928:	7806      	ldrb	r6, [r0, #0]
 801092a:	18e2      	adds	r2, r4, r3
 801092c:	3234      	adds	r2, #52	; 0x34
 801092e:	7016      	strb	r6, [r2, #0]
		if( pcName[ x ] == 0x00 )
 8010930:	7802      	ldrb	r2, [r0, #0]
 8010932:	2a00      	cmp	r2, #0
 8010934:	d0dc      	beq.n	80108f0 <prvInitialiseTCBVariables+0xc>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010936:	3301      	adds	r3, #1
 8010938:	e7d8      	b.n	80108ec <prvInitialiseTCBVariables+0x8>
	...

0801093c <prvInitialiseTaskLists>:
{
 801093c:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801093e:	2400      	movs	r4, #0
 8010940:	2c06      	cmp	r4, #6
 8010942:	d915      	bls.n	8010970 <prvInitialiseTaskLists+0x34>
	vListInitialise( &xDelayedTaskList1 );
 8010944:	4d0e      	ldr	r5, [pc, #56]	; (8010980 <prvInitialiseTaskLists+0x44>)
 8010946:	0028      	movs	r0, r5
 8010948:	f7ff fba8 	bl	801009c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801094c:	4c0d      	ldr	r4, [pc, #52]	; (8010984 <prvInitialiseTaskLists+0x48>)
 801094e:	0020      	movs	r0, r4
 8010950:	f7ff fba4 	bl	801009c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010954:	480c      	ldr	r0, [pc, #48]	; (8010988 <prvInitialiseTaskLists+0x4c>)
 8010956:	f7ff fba1 	bl	801009c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 801095a:	480c      	ldr	r0, [pc, #48]	; (801098c <prvInitialiseTaskLists+0x50>)
 801095c:	f7ff fb9e 	bl	801009c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8010960:	480b      	ldr	r0, [pc, #44]	; (8010990 <prvInitialiseTaskLists+0x54>)
 8010962:	f7ff fb9b 	bl	801009c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8010966:	4b0b      	ldr	r3, [pc, #44]	; (8010994 <prvInitialiseTaskLists+0x58>)
 8010968:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801096a:	4b0b      	ldr	r3, [pc, #44]	; (8010998 <prvInitialiseTaskLists+0x5c>)
 801096c:	601c      	str	r4, [r3, #0]
}
 801096e:	bd70      	pop	{r4, r5, r6, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010970:	2014      	movs	r0, #20
 8010972:	4360      	muls	r0, r4
 8010974:	4b09      	ldr	r3, [pc, #36]	; (801099c <prvInitialiseTaskLists+0x60>)
 8010976:	18c0      	adds	r0, r0, r3
 8010978:	f7ff fb90 	bl	801009c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801097c:	3401      	adds	r4, #1
 801097e:	e7df      	b.n	8010940 <prvInitialiseTaskLists+0x4>
 8010980:	20002490 	.word	0x20002490
 8010984:	200024a4 	.word	0x200024a4
 8010988:	200024bc 	.word	0x200024bc
 801098c:	200024e8 	.word	0x200024e8
 8010990:	200024d4 	.word	0x200024d4
 8010994:	200023e0 	.word	0x200023e0
 8010998:	200023e4 	.word	0x200023e4
 801099c:	200023e8 	.word	0x200023e8

080109a0 <prvAddCurrentTaskToDelayedList>:
{
 80109a0:	b510      	push	{r4, lr}
 80109a2:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80109a4:	4b0e      	ldr	r3, [pc, #56]	; (80109e0 <prvAddCurrentTaskToDelayedList+0x40>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 80109aa:	4b0e      	ldr	r3, [pc, #56]	; (80109e4 <prvAddCurrentTaskToDelayedList+0x44>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4283      	cmp	r3, r0
 80109b0:	d80d      	bhi.n	80109ce <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80109b2:	4b0d      	ldr	r3, [pc, #52]	; (80109e8 <prvAddCurrentTaskToDelayedList+0x48>)
 80109b4:	6818      	ldr	r0, [r3, #0]
 80109b6:	4b0a      	ldr	r3, [pc, #40]	; (80109e0 <prvAddCurrentTaskToDelayedList+0x40>)
 80109b8:	6819      	ldr	r1, [r3, #0]
 80109ba:	3104      	adds	r1, #4
 80109bc:	f7ff fb88 	bl	80100d0 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 80109c0:	4b0a      	ldr	r3, [pc, #40]	; (80109ec <prvAddCurrentTaskToDelayedList+0x4c>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	42a3      	cmp	r3, r4
 80109c6:	d909      	bls.n	80109dc <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 80109c8:	4b08      	ldr	r3, [pc, #32]	; (80109ec <prvAddCurrentTaskToDelayedList+0x4c>)
 80109ca:	601c      	str	r4, [r3, #0]
}
 80109cc:	e006      	b.n	80109dc <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80109ce:	4b08      	ldr	r3, [pc, #32]	; (80109f0 <prvAddCurrentTaskToDelayedList+0x50>)
 80109d0:	6818      	ldr	r0, [r3, #0]
 80109d2:	4b03      	ldr	r3, [pc, #12]	; (80109e0 <prvAddCurrentTaskToDelayedList+0x40>)
 80109d4:	6819      	ldr	r1, [r3, #0]
 80109d6:	3104      	adds	r1, #4
 80109d8:	f7ff fb7a 	bl	80100d0 <vListInsert>
}
 80109dc:	bd10      	pop	{r4, pc}
 80109de:	46c0      	nop			; (mov r8, r8)
 80109e0:	200023dc 	.word	0x200023dc
 80109e4:	200024fc 	.word	0x200024fc
 80109e8:	200023e0 	.word	0x200023e0
 80109ec:	200000d0 	.word	0x200000d0
 80109f0:	200023e4 	.word	0x200023e4

080109f4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80109f4:	b510      	push	{r4, lr}
 80109f6:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80109f8:	f004 ffee 	bl	80159d8 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80109fc:	0020      	movs	r0, r4
 80109fe:	f7ef fb8b 	bl	8000118 <strlen>
 8010a02:	e002      	b.n	8010a0a <prvWriteNameToBuffer+0x16>
		{
			pcBuffer[ x ] = ' ';
 8010a04:	2320      	movs	r3, #32
 8010a06:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8010a08:	3001      	adds	r0, #1
 8010a0a:	280b      	cmp	r0, #11
 8010a0c:	ddfa      	ble.n	8010a04 <prvWriteNameToBuffer+0x10>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 8010a0e:	1820      	adds	r0, r4, r0
 8010a10:	2300      	movs	r3, #0
 8010a12:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 8010a14:	bd10      	pop	{r4, pc}
	...

08010a18 <xTaskGenericCreate>:
{
 8010a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a1a:	46ce      	mov	lr, r9
 8010a1c:	b500      	push	{lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	0006      	movs	r6, r0
 8010a22:	9102      	str	r1, [sp, #8]
 8010a24:	0015      	movs	r5, r2
 8010a26:	9303      	str	r3, [sp, #12]
 8010a28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	configASSERT( pxTaskCode );
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	d101      	bne.n	8010a32 <xTaskGenericCreate+0x1a>
 8010a2e:	b672      	cpsid	i
 8010a30:	e7fe      	b.n	8010a30 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8010a32:	2c06      	cmp	r4, #6
 8010a34:	d901      	bls.n	8010a3a <xTaskGenericCreate+0x22>
 8010a36:	b672      	cpsid	i
 8010a38:	e7fe      	b.n	8010a38 <xTaskGenericCreate+0x20>
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8010a3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a3c:	0010      	movs	r0, r2
 8010a3e:	f7ff ff32 	bl	80108a6 <prvAllocateTCBAndStack>
 8010a42:	1e07      	subs	r7, r0, #0
	if( pxNewTCB != NULL )
 8010a44:	d05a      	beq.n	8010afc <xTaskGenericCreate+0xe4>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8010a46:	4b31      	ldr	r3, [pc, #196]	; (8010b0c <xTaskGenericCreate+0xf4>)
 8010a48:	18eb      	adds	r3, r5, r3
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8010a4e:	4694      	mov	ip, r2
 8010a50:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010a52:	2207      	movs	r2, #7
 8010a54:	4393      	bics	r3, r2
 8010a56:	4699      	mov	r9, r3
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8010a58:	9500      	str	r5, [sp, #0]
 8010a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a5c:	0022      	movs	r2, r4
 8010a5e:	9902      	ldr	r1, [sp, #8]
 8010a60:	f7ff ff40 	bl	80108e4 <prvInitialiseTCBVariables>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010a64:	9a03      	ldr	r2, [sp, #12]
 8010a66:	0031      	movs	r1, r6
 8010a68:	4648      	mov	r0, r9
 8010a6a:	f000 ffff 	bl	8011a6c <pxPortInitialiseStack>
 8010a6e:	6038      	str	r0, [r7, #0]
		if( ( void * ) pxCreatedTask != NULL )
 8010a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d000      	beq.n	8010a78 <xTaskGenericCreate+0x60>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010a76:	601f      	str	r7, [r3, #0]
		taskENTER_CRITICAL();
 8010a78:	f001 f830 	bl	8011adc <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 8010a7c:	4a24      	ldr	r2, [pc, #144]	; (8010b10 <xTaskGenericCreate+0xf8>)
 8010a7e:	6813      	ldr	r3, [r2, #0]
 8010a80:	3301      	adds	r3, #1
 8010a82:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8010a84:	4b23      	ldr	r3, [pc, #140]	; (8010b14 <xTaskGenericCreate+0xfc>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d12b      	bne.n	8010ae4 <xTaskGenericCreate+0xcc>
				pxCurrentTCB =  pxNewTCB;
 8010a8c:	4b21      	ldr	r3, [pc, #132]	; (8010b14 <xTaskGenericCreate+0xfc>)
 8010a8e:	601f      	str	r7, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010a90:	6813      	ldr	r3, [r2, #0]
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d101      	bne.n	8010a9a <xTaskGenericCreate+0x82>
					prvInitialiseTaskLists();
 8010a96:	f7ff ff51 	bl	801093c <prvInitialiseTaskLists>
			uxTaskNumber++;
 8010a9a:	4a1f      	ldr	r2, [pc, #124]	; (8010b18 <xTaskGenericCreate+0x100>)
 8010a9c:	6813      	ldr	r3, [r2, #0]
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010aa2:	647b      	str	r3, [r7, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 8010aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa6:	4a1d      	ldr	r2, [pc, #116]	; (8010b1c <xTaskGenericCreate+0x104>)
 8010aa8:	6812      	ldr	r2, [r2, #0]
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d901      	bls.n	8010ab2 <xTaskGenericCreate+0x9a>
 8010aae:	4a1b      	ldr	r2, [pc, #108]	; (8010b1c <xTaskGenericCreate+0x104>)
 8010ab0:	6013      	str	r3, [r2, #0]
 8010ab2:	1d39      	adds	r1, r7, #4
 8010ab4:	2014      	movs	r0, #20
 8010ab6:	4358      	muls	r0, r3
 8010ab8:	4b19      	ldr	r3, [pc, #100]	; (8010b20 <xTaskGenericCreate+0x108>)
 8010aba:	18c0      	adds	r0, r0, r3
 8010abc:	f7ff fafc 	bl	80100b8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 8010ac0:	f001 f818 	bl	8011af4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8010ac4:	4b17      	ldr	r3, [pc, #92]	; (8010b24 <xTaskGenericCreate+0x10c>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d01a      	beq.n	8010b02 <xTaskGenericCreate+0xea>
			if( pxCurrentTCB->uxPriority < uxPriority )
 8010acc:	4b11      	ldr	r3, [pc, #68]	; (8010b14 <xTaskGenericCreate+0xfc>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ad2:	42a3      	cmp	r3, r4
 8010ad4:	d217      	bcs.n	8010b06 <xTaskGenericCreate+0xee>
				taskYIELD_IF_USING_PREEMPTION();
 8010ad6:	f000 fff5 	bl	8011ac4 <vPortYield>
			xReturn = pdPASS;
 8010ada:	2001      	movs	r0, #1
}
 8010adc:	b004      	add	sp, #16
 8010ade:	bc04      	pop	{r2}
 8010ae0:	4691      	mov	r9, r2
 8010ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xSchedulerRunning == pdFALSE )
 8010ae4:	4b0f      	ldr	r3, [pc, #60]	; (8010b24 <xTaskGenericCreate+0x10c>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d1d6      	bne.n	8010a9a <xTaskGenericCreate+0x82>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8010aec:	4b09      	ldr	r3, [pc, #36]	; (8010b14 <xTaskGenericCreate+0xfc>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af2:	42a3      	cmp	r3, r4
 8010af4:	d8d1      	bhi.n	8010a9a <xTaskGenericCreate+0x82>
						pxCurrentTCB = pxNewTCB;
 8010af6:	4b07      	ldr	r3, [pc, #28]	; (8010b14 <xTaskGenericCreate+0xfc>)
 8010af8:	601f      	str	r7, [r3, #0]
 8010afa:	e7ce      	b.n	8010a9a <xTaskGenericCreate+0x82>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010afc:	2001      	movs	r0, #1
 8010afe:	4240      	negs	r0, r0
 8010b00:	e7ec      	b.n	8010adc <xTaskGenericCreate+0xc4>
			xReturn = pdPASS;
 8010b02:	2001      	movs	r0, #1
 8010b04:	e7ea      	b.n	8010adc <xTaskGenericCreate+0xc4>
 8010b06:	2001      	movs	r0, #1
	return xReturn;
 8010b08:	e7e8      	b.n	8010adc <xTaskGenericCreate+0xc4>
 8010b0a:	46c0      	nop			; (mov r8, r8)
 8010b0c:	3fffffff 	.word	0x3fffffff
 8010b10:	20002478 	.word	0x20002478
 8010b14:	200023dc 	.word	0x200023dc
 8010b18:	20002484 	.word	0x20002484
 8010b1c:	2000248c 	.word	0x2000248c
 8010b20:	200023e8 	.word	0x200023e8
 8010b24:	200024d0 	.word	0x200024d0

08010b28 <uxTaskPriorityGet>:
	{
 8010b28:	b510      	push	{r4, lr}
 8010b2a:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 8010b2c:	f000 ffd6 	bl	8011adc <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 8010b30:	2c00      	cmp	r4, #0
 8010b32:	d004      	beq.n	8010b3e <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 8010b34:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 8010b36:	f000 ffdd 	bl	8011af4 <vPortExitCritical>
	}
 8010b3a:	0020      	movs	r0, r4
 8010b3c:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 8010b3e:	4b01      	ldr	r3, [pc, #4]	; (8010b44 <uxTaskPriorityGet+0x1c>)
 8010b40:	681c      	ldr	r4, [r3, #0]
 8010b42:	e7f7      	b.n	8010b34 <uxTaskPriorityGet+0xc>
 8010b44:	200023dc 	.word	0x200023dc

08010b48 <vTaskPrioritySet>:
	{
 8010b48:	b570      	push	{r4, r5, r6, lr}
 8010b4a:	0004      	movs	r4, r0
 8010b4c:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8010b4e:	2906      	cmp	r1, #6
 8010b50:	d901      	bls.n	8010b56 <vTaskPrioritySet+0xe>
 8010b52:	b672      	cpsid	i
 8010b54:	e7fe      	b.n	8010b54 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 8010b56:	f000 ffc1 	bl	8011adc <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 8010b5a:	2c00      	cmp	r4, #0
 8010b5c:	d101      	bne.n	8010b62 <vTaskPrioritySet+0x1a>
 8010b5e:	4b23      	ldr	r3, [pc, #140]	; (8010bec <vTaskPrioritySet+0xa4>)
 8010b60:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8010b62:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 8010b64:	4295      	cmp	r5, r2
 8010b66:	d032      	beq.n	8010bce <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 8010b68:	d934      	bls.n	8010bd4 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 8010b6a:	4b20      	ldr	r3, [pc, #128]	; (8010bec <vTaskPrioritySet+0xa4>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	42a3      	cmp	r3, r4
 8010b70:	d036      	beq.n	8010be0 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8010b72:	4b1e      	ldr	r3, [pc, #120]	; (8010bec <vTaskPrioritySet+0xa4>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b78:	42ab      	cmp	r3, r5
 8010b7a:	d933      	bls.n	8010be4 <vTaskPrioritySet+0x9c>
	BaseType_t xYieldRequired = pdFALSE;
 8010b7c:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010b7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8010b80:	428a      	cmp	r2, r1
 8010b82:	d100      	bne.n	8010b86 <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 8010b84:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 8010b86:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b88:	69a3      	ldr	r3, [r4, #24]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	db02      	blt.n	8010b94 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b8e:	2207      	movs	r2, #7
 8010b90:	1b55      	subs	r5, r2, r5
 8010b92:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8010b94:	2314      	movs	r3, #20
 8010b96:	434b      	muls	r3, r1
 8010b98:	4a15      	ldr	r2, [pc, #84]	; (8010bf0 <vTaskPrioritySet+0xa8>)
 8010b9a:	189b      	adds	r3, r3, r2
 8010b9c:	6962      	ldr	r2, [r4, #20]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d111      	bne.n	8010bc6 <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010ba2:	1d25      	adds	r5, r4, #4
 8010ba4:	0028      	movs	r0, r5
 8010ba6:	f7ff faab 	bl	8010100 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010baa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010bac:	4a11      	ldr	r2, [pc, #68]	; (8010bf4 <vTaskPrioritySet+0xac>)
 8010bae:	6812      	ldr	r2, [r2, #0]
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d901      	bls.n	8010bb8 <vTaskPrioritySet+0x70>
 8010bb4:	4a0f      	ldr	r2, [pc, #60]	; (8010bf4 <vTaskPrioritySet+0xac>)
 8010bb6:	6013      	str	r3, [r2, #0]
 8010bb8:	2014      	movs	r0, #20
 8010bba:	4358      	muls	r0, r3
 8010bbc:	4b0c      	ldr	r3, [pc, #48]	; (8010bf0 <vTaskPrioritySet+0xa8>)
 8010bbe:	18c0      	adds	r0, r0, r3
 8010bc0:	0029      	movs	r1, r5
 8010bc2:	f7ff fa79 	bl	80100b8 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 8010bc6:	2e01      	cmp	r6, #1
 8010bc8:	d101      	bne.n	8010bce <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 8010bca:	f000 ff7b 	bl	8011ac4 <vPortYield>
		taskEXIT_CRITICAL();
 8010bce:	f000 ff91 	bl	8011af4 <vPortExitCritical>
	}
 8010bd2:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 8010bd4:	4b05      	ldr	r3, [pc, #20]	; (8010bec <vTaskPrioritySet+0xa4>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	42a3      	cmp	r3, r4
 8010bda:	d005      	beq.n	8010be8 <vTaskPrioritySet+0xa0>
	BaseType_t xYieldRequired = pdFALSE;
 8010bdc:	2600      	movs	r6, #0
 8010bde:	e7ce      	b.n	8010b7e <vTaskPrioritySet+0x36>
 8010be0:	2600      	movs	r6, #0
 8010be2:	e7cc      	b.n	8010b7e <vTaskPrioritySet+0x36>
							xYieldRequired = pdTRUE;
 8010be4:	2601      	movs	r6, #1
 8010be6:	e7ca      	b.n	8010b7e <vTaskPrioritySet+0x36>
					xYieldRequired = pdTRUE;
 8010be8:	2601      	movs	r6, #1
 8010bea:	e7c8      	b.n	8010b7e <vTaskPrioritySet+0x36>
 8010bec:	200023dc 	.word	0x200023dc
 8010bf0:	200023e8 	.word	0x200023e8
 8010bf4:	2000248c 	.word	0x2000248c

08010bf8 <vTaskStartScheduler>:
{
 8010bf8:	b500      	push	{lr}
 8010bfa:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	9303      	str	r3, [sp, #12]
 8010c00:	9302      	str	r3, [sp, #8]
 8010c02:	9301      	str	r3, [sp, #4]
 8010c04:	9300      	str	r3, [sp, #0]
 8010c06:	22a0      	movs	r2, #160	; 0xa0
 8010c08:	490d      	ldr	r1, [pc, #52]	; (8010c40 <vTaskStartScheduler+0x48>)
 8010c0a:	480e      	ldr	r0, [pc, #56]	; (8010c44 <vTaskStartScheduler+0x4c>)
 8010c0c:	f7ff ff04 	bl	8010a18 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 8010c10:	2801      	cmp	r0, #1
 8010c12:	d005      	beq.n	8010c20 <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
 8010c14:	2801      	cmp	r0, #1
 8010c16:	d006      	beq.n	8010c26 <vTaskStartScheduler+0x2e>
		configASSERT( xReturn );
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	d10f      	bne.n	8010c3c <vTaskStartScheduler+0x44>
 8010c1c:	b672      	cpsid	i
 8010c1e:	e7fe      	b.n	8010c1e <vTaskStartScheduler+0x26>
			xReturn = xTimerCreateTimerTask();
 8010c20:	f000 fd6c 	bl	80116fc <xTimerCreateTimerTask>
 8010c24:	e7f6      	b.n	8010c14 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 8010c26:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 8010c28:	4b07      	ldr	r3, [pc, #28]	; (8010c48 <vTaskStartScheduler+0x50>)
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010c2e:	4b07      	ldr	r3, [pc, #28]	; (8010c4c <vTaskStartScheduler+0x54>)
 8010c30:	2200      	movs	r2, #0
 8010c32:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8010c34:	f7f7 fc44 	bl	80084c0 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8010c38:	f000 ff2a 	bl	8011a90 <xPortStartScheduler>
}
 8010c3c:	b005      	add	sp, #20
 8010c3e:	bd00      	pop	{pc}
 8010c40:	0801d480 	.word	0x0801d480
 8010c44:	08010f0d 	.word	0x08010f0d
 8010c48:	200024d0 	.word	0x200024d0
 8010c4c:	200024fc 	.word	0x200024fc

08010c50 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010c50:	4a02      	ldr	r2, [pc, #8]	; (8010c5c <vTaskSuspendAll+0xc>)
 8010c52:	6813      	ldr	r3, [r2, #0]
 8010c54:	3301      	adds	r3, #1
 8010c56:	6013      	str	r3, [r2, #0]
}
 8010c58:	4770      	bx	lr
 8010c5a:	46c0      	nop			; (mov r8, r8)
 8010c5c:	20002480 	.word	0x20002480

08010c60 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010c60:	4b01      	ldr	r3, [pc, #4]	; (8010c68 <xTaskGetTickCount+0x8>)
 8010c62:	6818      	ldr	r0, [r3, #0]
}
 8010c64:	4770      	bx	lr
 8010c66:	46c0      	nop			; (mov r8, r8)
 8010c68:	200024fc 	.word	0x200024fc

08010c6c <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 8010c6c:	4b01      	ldr	r3, [pc, #4]	; (8010c74 <xTaskGetTickCountFromISR+0x8>)
 8010c6e:	6818      	ldr	r0, [r3, #0]
}
 8010c70:	4770      	bx	lr
 8010c72:	46c0      	nop			; (mov r8, r8)
 8010c74:	200024fc 	.word	0x200024fc

08010c78 <xTaskIncrementTick>:
{
 8010c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c7a:	4b39      	ldr	r3, [pc, #228]	; (8010d60 <xTaskIncrementTick+0xe8>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d162      	bne.n	8010d48 <xTaskIncrementTick+0xd0>
		++xTickCount;
 8010c82:	4b38      	ldr	r3, [pc, #224]	; (8010d64 <xTaskIncrementTick+0xec>)
 8010c84:	681a      	ldr	r2, [r3, #0]
 8010c86:	3201      	adds	r2, #1
 8010c88:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 8010c8a:	681f      	ldr	r7, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 8010c8c:	2f00      	cmp	r7, #0
 8010c8e:	d112      	bne.n	8010cb6 <xTaskIncrementTick+0x3e>
				taskSWITCH_DELAYED_LISTS();
 8010c90:	4b35      	ldr	r3, [pc, #212]	; (8010d68 <xTaskIncrementTick+0xf0>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d001      	beq.n	8010c9e <xTaskIncrementTick+0x26>
 8010c9a:	b672      	cpsid	i
 8010c9c:	e7fe      	b.n	8010c9c <xTaskIncrementTick+0x24>
 8010c9e:	4a32      	ldr	r2, [pc, #200]	; (8010d68 <xTaskIncrementTick+0xf0>)
 8010ca0:	6811      	ldr	r1, [r2, #0]
 8010ca2:	4b32      	ldr	r3, [pc, #200]	; (8010d6c <xTaskIncrementTick+0xf4>)
 8010ca4:	6818      	ldr	r0, [r3, #0]
 8010ca6:	6010      	str	r0, [r2, #0]
 8010ca8:	6019      	str	r1, [r3, #0]
 8010caa:	4a31      	ldr	r2, [pc, #196]	; (8010d70 <xTaskIncrementTick+0xf8>)
 8010cac:	6813      	ldr	r3, [r2, #0]
 8010cae:	3301      	adds	r3, #1
 8010cb0:	6013      	str	r3, [r2, #0]
 8010cb2:	f7ff fdd9 	bl	8010868 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 8010cb6:	4b2f      	ldr	r3, [pc, #188]	; (8010d74 <xTaskIncrementTick+0xfc>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	42bb      	cmp	r3, r7
 8010cbc:	d93a      	bls.n	8010d34 <xTaskIncrementTick+0xbc>
BaseType_t xSwitchRequired = pdFALSE;
 8010cbe:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010cc0:	4b2d      	ldr	r3, [pc, #180]	; (8010d78 <xTaskIncrementTick+0x100>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cc6:	0093      	lsls	r3, r2, #2
 8010cc8:	189b      	adds	r3, r3, r2
 8010cca:	009a      	lsls	r2, r3, #2
 8010ccc:	4b2b      	ldr	r3, [pc, #172]	; (8010d7c <xTaskIncrementTick+0x104>)
 8010cce:	58d3      	ldr	r3, [r2, r3]
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	d93e      	bls.n	8010d52 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 8010cd4:	2401      	movs	r4, #1
 8010cd6:	e03c      	b.n	8010d52 <xTaskIncrementTick+0xda>
								xSwitchRequired = pdTRUE;
 8010cd8:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010cda:	4b23      	ldr	r3, [pc, #140]	; (8010d68 <xTaskIncrementTick+0xf0>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d029      	beq.n	8010d38 <xTaskIncrementTick+0xc0>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010ce4:	4b20      	ldr	r3, [pc, #128]	; (8010d68 <xTaskIncrementTick+0xf0>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	68db      	ldr	r3, [r3, #12]
 8010cea:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8010cec:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 8010cee:	429f      	cmp	r7, r3
 8010cf0:	d327      	bcc.n	8010d42 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010cf2:	1d2e      	adds	r6, r5, #4
 8010cf4:	0030      	movs	r0, r6
 8010cf6:	f7ff fa03 	bl	8010100 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010cfa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d003      	beq.n	8010d08 <xTaskIncrementTick+0x90>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d00:	0028      	movs	r0, r5
 8010d02:	3018      	adds	r0, #24
 8010d04:	f7ff f9fc 	bl	8010100 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8010d08:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8010d0a:	4b1d      	ldr	r3, [pc, #116]	; (8010d80 <xTaskIncrementTick+0x108>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d901      	bls.n	8010d16 <xTaskIncrementTick+0x9e>
 8010d12:	4b1b      	ldr	r3, [pc, #108]	; (8010d80 <xTaskIncrementTick+0x108>)
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	0093      	lsls	r3, r2, #2
 8010d18:	189b      	adds	r3, r3, r2
 8010d1a:	0098      	lsls	r0, r3, #2
 8010d1c:	4b17      	ldr	r3, [pc, #92]	; (8010d7c <xTaskIncrementTick+0x104>)
 8010d1e:	18c0      	adds	r0, r0, r3
 8010d20:	0031      	movs	r1, r6
 8010d22:	f7ff f9c9 	bl	80100b8 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d26:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8010d28:	4b13      	ldr	r3, [pc, #76]	; (8010d78 <xTaskIncrementTick+0x100>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d2d2      	bcs.n	8010cd8 <xTaskIncrementTick+0x60>
 8010d32:	e7d2      	b.n	8010cda <xTaskIncrementTick+0x62>
BaseType_t xSwitchRequired = pdFALSE;
 8010d34:	2400      	movs	r4, #0
 8010d36:	e7d0      	b.n	8010cda <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = portMAX_DELAY;
 8010d38:	4b0e      	ldr	r3, [pc, #56]	; (8010d74 <xTaskIncrementTick+0xfc>)
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	601a      	str	r2, [r3, #0]
						break;
 8010d40:	e7be      	b.n	8010cc0 <xTaskIncrementTick+0x48>
							xNextTaskUnblockTime = xItemValue;
 8010d42:	4a0c      	ldr	r2, [pc, #48]	; (8010d74 <xTaskIncrementTick+0xfc>)
 8010d44:	6013      	str	r3, [r2, #0]
							break;
 8010d46:	e7bb      	b.n	8010cc0 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 8010d48:	4a0e      	ldr	r2, [pc, #56]	; (8010d84 <xTaskIncrementTick+0x10c>)
 8010d4a:	6813      	ldr	r3, [r2, #0]
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8010d50:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8010d52:	4b0d      	ldr	r3, [pc, #52]	; (8010d88 <xTaskIncrementTick+0x110>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d000      	beq.n	8010d5c <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 8010d5a:	2401      	movs	r4, #1
}
 8010d5c:	0020      	movs	r0, r4
 8010d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d60:	20002480 	.word	0x20002480
 8010d64:	200024fc 	.word	0x200024fc
 8010d68:	200023e0 	.word	0x200023e0
 8010d6c:	200023e4 	.word	0x200023e4
 8010d70:	200024b8 	.word	0x200024b8
 8010d74:	200000d0 	.word	0x200000d0
 8010d78:	200023dc 	.word	0x200023dc
 8010d7c:	200023e8 	.word	0x200023e8
 8010d80:	2000248c 	.word	0x2000248c
 8010d84:	2000247c 	.word	0x2000247c
 8010d88:	20002500 	.word	0x20002500

08010d8c <xTaskResumeAll>:
{
 8010d8c:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 8010d8e:	4b30      	ldr	r3, [pc, #192]	; (8010e50 <xTaskResumeAll+0xc4>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d101      	bne.n	8010d9a <xTaskResumeAll+0xe>
 8010d96:	b672      	cpsid	i
 8010d98:	e7fe      	b.n	8010d98 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8010d9a:	f000 fe9f 	bl	8011adc <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010d9e:	4b2c      	ldr	r3, [pc, #176]	; (8010e50 <xTaskResumeAll+0xc4>)
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	3a01      	subs	r2, #1
 8010da4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d14d      	bne.n	8010e48 <xTaskResumeAll+0xbc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010dac:	4b29      	ldr	r3, [pc, #164]	; (8010e54 <xTaskResumeAll+0xc8>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d112      	bne.n	8010dda <xTaskResumeAll+0x4e>
BaseType_t xAlreadyYielded = pdFALSE;
 8010db4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010db6:	f000 fe9d 	bl	8011af4 <vPortExitCritical>
}
 8010dba:	0020      	movs	r0, r4
 8010dbc:	bd70      	pop	{r4, r5, r6, pc}
					prvAddTaskToReadyList( pxTCB );
 8010dbe:	0093      	lsls	r3, r2, #2
 8010dc0:	189b      	adds	r3, r3, r2
 8010dc2:	0098      	lsls	r0, r3, #2
 8010dc4:	4b24      	ldr	r3, [pc, #144]	; (8010e58 <xTaskResumeAll+0xcc>)
 8010dc6:	18c0      	adds	r0, r0, r3
 8010dc8:	0029      	movs	r1, r5
 8010dca:	f7ff f975 	bl	80100b8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010dce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010dd0:	4b22      	ldr	r3, [pc, #136]	; (8010e5c <xTaskResumeAll+0xd0>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d216      	bcs.n	8010e08 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010dda:	4b21      	ldr	r3, [pc, #132]	; (8010e60 <xTaskResumeAll+0xd4>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d016      	beq.n	8010e10 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010de2:	4b1f      	ldr	r3, [pc, #124]	; (8010e60 <xTaskResumeAll+0xd4>)
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010de8:	0020      	movs	r0, r4
 8010dea:	3018      	adds	r0, #24
 8010dec:	f7ff f988 	bl	8010100 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010df0:	1d25      	adds	r5, r4, #4
 8010df2:	0028      	movs	r0, r5
 8010df4:	f7ff f984 	bl	8010100 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010df8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010dfa:	4b1a      	ldr	r3, [pc, #104]	; (8010e64 <xTaskResumeAll+0xd8>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d9dd      	bls.n	8010dbe <xTaskResumeAll+0x32>
 8010e02:	4b18      	ldr	r3, [pc, #96]	; (8010e64 <xTaskResumeAll+0xd8>)
 8010e04:	601a      	str	r2, [r3, #0]
 8010e06:	e7da      	b.n	8010dbe <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 8010e08:	4b17      	ldr	r3, [pc, #92]	; (8010e68 <xTaskResumeAll+0xdc>)
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	601a      	str	r2, [r3, #0]
 8010e0e:	e7e4      	b.n	8010dda <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8010e10:	4b16      	ldr	r3, [pc, #88]	; (8010e6c <xTaskResumeAll+0xe0>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d112      	bne.n	8010e3e <xTaskResumeAll+0xb2>
				if( xYieldPending == pdTRUE )
 8010e18:	4b13      	ldr	r3, [pc, #76]	; (8010e68 <xTaskResumeAll+0xdc>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	d115      	bne.n	8010e4c <xTaskResumeAll+0xc0>
					taskYIELD_IF_USING_PREEMPTION();
 8010e20:	f000 fe50 	bl	8011ac4 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8010e24:	2401      	movs	r4, #1
 8010e26:	e7c6      	b.n	8010db6 <xTaskResumeAll+0x2a>
						if( xTaskIncrementTick() != pdFALSE )
 8010e28:	f7ff ff26 	bl	8010c78 <xTaskIncrementTick>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	d002      	beq.n	8010e36 <xTaskResumeAll+0xaa>
							xYieldPending = pdTRUE;
 8010e30:	4b0d      	ldr	r3, [pc, #52]	; (8010e68 <xTaskResumeAll+0xdc>)
 8010e32:	2201      	movs	r2, #1
 8010e34:	601a      	str	r2, [r3, #0]
						--uxPendedTicks;
 8010e36:	4a0d      	ldr	r2, [pc, #52]	; (8010e6c <xTaskResumeAll+0xe0>)
 8010e38:	6813      	ldr	r3, [r2, #0]
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8010e3e:	4b0b      	ldr	r3, [pc, #44]	; (8010e6c <xTaskResumeAll+0xe0>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d1f0      	bne.n	8010e28 <xTaskResumeAll+0x9c>
 8010e46:	e7e7      	b.n	8010e18 <xTaskResumeAll+0x8c>
BaseType_t xAlreadyYielded = pdFALSE;
 8010e48:	2400      	movs	r4, #0
 8010e4a:	e7b4      	b.n	8010db6 <xTaskResumeAll+0x2a>
 8010e4c:	2400      	movs	r4, #0
 8010e4e:	e7b2      	b.n	8010db6 <xTaskResumeAll+0x2a>
 8010e50:	20002480 	.word	0x20002480
 8010e54:	20002478 	.word	0x20002478
 8010e58:	200023e8 	.word	0x200023e8
 8010e5c:	200023dc 	.word	0x200023dc
 8010e60:	200024bc 	.word	0x200024bc
 8010e64:	2000248c 	.word	0x2000248c
 8010e68:	20002500 	.word	0x20002500
 8010e6c:	2000247c 	.word	0x2000247c

08010e70 <vTaskDelay>:
	{
 8010e70:	b570      	push	{r4, r5, r6, lr}
 8010e72:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010e74:	d016      	beq.n	8010ea4 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 8010e76:	4b0d      	ldr	r3, [pc, #52]	; (8010eac <vTaskDelay+0x3c>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d001      	beq.n	8010e82 <vTaskDelay+0x12>
 8010e7e:	b672      	cpsid	i
 8010e80:	e7fe      	b.n	8010e80 <vTaskDelay+0x10>
			vTaskSuspendAll();
 8010e82:	f7ff fee5 	bl	8010c50 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 8010e86:	4b0a      	ldr	r3, [pc, #40]	; (8010eb0 <vTaskDelay+0x40>)
 8010e88:	681c      	ldr	r4, [r3, #0]
 8010e8a:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010e8c:	4b09      	ldr	r3, [pc, #36]	; (8010eb4 <vTaskDelay+0x44>)
 8010e8e:	6818      	ldr	r0, [r3, #0]
 8010e90:	3004      	adds	r0, #4
 8010e92:	f7ff f935 	bl	8010100 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010e96:	0020      	movs	r0, r4
 8010e98:	f7ff fd82 	bl	80109a0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8010e9c:	f7ff ff76 	bl	8010d8c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	d101      	bne.n	8010ea8 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 8010ea4:	f000 fe0e 	bl	8011ac4 <vPortYield>
	}
 8010ea8:	bd70      	pop	{r4, r5, r6, pc}
 8010eaa:	46c0      	nop			; (mov r8, r8)
 8010eac:	20002480 	.word	0x20002480
 8010eb0:	200024fc 	.word	0x200024fc
 8010eb4:	200023dc 	.word	0x200023dc

08010eb8 <prvCheckTasksWaitingTermination>:
{
 8010eb8:	b510      	push	{r4, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8010eba:	4b11      	ldr	r3, [pc, #68]	; (8010f00 <prvCheckTasksWaitingTermination+0x48>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d01d      	beq.n	8010efe <prvCheckTasksWaitingTermination+0x46>
			vTaskSuspendAll();
 8010ec2:	f7ff fec5 	bl	8010c50 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010ec6:	4b0f      	ldr	r3, [pc, #60]	; (8010f04 <prvCheckTasksWaitingTermination+0x4c>)
 8010ec8:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8010eca:	f7ff ff5f 	bl	8010d8c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8010ece:	2c00      	cmp	r4, #0
 8010ed0:	d0f3      	beq.n	8010eba <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 8010ed2:	f000 fe03 	bl	8011adc <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010ed6:	4b0b      	ldr	r3, [pc, #44]	; (8010f04 <prvCheckTasksWaitingTermination+0x4c>)
 8010ed8:	68db      	ldr	r3, [r3, #12]
 8010eda:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010edc:	1d20      	adds	r0, r4, #4
 8010ede:	f7ff f90f 	bl	8010100 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8010ee2:	4a09      	ldr	r2, [pc, #36]	; (8010f08 <prvCheckTasksWaitingTermination+0x50>)
 8010ee4:	6813      	ldr	r3, [r2, #0]
 8010ee6:	3b01      	subs	r3, #1
 8010ee8:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8010eea:	4a05      	ldr	r2, [pc, #20]	; (8010f00 <prvCheckTasksWaitingTermination+0x48>)
 8010eec:	6813      	ldr	r3, [r2, #0]
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8010ef2:	f000 fdff 	bl	8011af4 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8010ef6:	0020      	movs	r0, r4
 8010ef8:	f7ff fccc 	bl	8010894 <prvDeleteTCB>
 8010efc:	e7dd      	b.n	8010eba <prvCheckTasksWaitingTermination+0x2>
}
 8010efe:	bd10      	pop	{r4, pc}
 8010f00:	20002488 	.word	0x20002488
 8010f04:	200024e8 	.word	0x200024e8
 8010f08:	20002478 	.word	0x20002478

08010f0c <prvIdleTask>:
{
 8010f0c:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 8010f0e:	f7ff ffd3 	bl	8010eb8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010f12:	4b03      	ldr	r3, [pc, #12]	; (8010f20 <prvIdleTask+0x14>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	2b01      	cmp	r3, #1
 8010f18:	d9f9      	bls.n	8010f0e <prvIdleTask+0x2>
				taskYIELD();
 8010f1a:	f000 fdd3 	bl	8011ac4 <vPortYield>
 8010f1e:	e7f6      	b.n	8010f0e <prvIdleTask+0x2>
 8010f20:	200023e8 	.word	0x200023e8

08010f24 <uxTaskGetSystemState>:
	{
 8010f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f26:	0007      	movs	r7, r0
 8010f28:	000c      	movs	r4, r1
 8010f2a:	0016      	movs	r6, r2
		vTaskSuspendAll();
 8010f2c:	f7ff fe90 	bl	8010c50 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8010f30:	4b1e      	ldr	r3, [pc, #120]	; (8010fac <uxTaskGetSystemState+0x88>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	42a3      	cmp	r3, r4
 8010f36:	d833      	bhi.n	8010fa0 <uxTaskGetSystemState+0x7c>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8010f38:	2507      	movs	r5, #7
 8010f3a:	2400      	movs	r4, #0
					uxQueue--;
 8010f3c:	3d01      	subs	r5, #1
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8010f3e:	0160      	lsls	r0, r4, #5
 8010f40:	00ab      	lsls	r3, r5, #2
 8010f42:	195b      	adds	r3, r3, r5
 8010f44:	0099      	lsls	r1, r3, #2
 8010f46:	4b1a      	ldr	r3, [pc, #104]	; (8010fb0 <uxTaskGetSystemState+0x8c>)
 8010f48:	18c9      	adds	r1, r1, r3
 8010f4a:	1838      	adds	r0, r7, r0
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	f7ff fc3d 	bl	80107cc <prvListTaskWithinSingleList>
 8010f52:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f54:	2d00      	cmp	r5, #0
 8010f56:	d1f1      	bne.n	8010f3c <uxTaskGetSystemState+0x18>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8010f58:	0160      	lsls	r0, r4, #5
 8010f5a:	4b16      	ldr	r3, [pc, #88]	; (8010fb4 <uxTaskGetSystemState+0x90>)
 8010f5c:	6819      	ldr	r1, [r3, #0]
 8010f5e:	1838      	adds	r0, r7, r0
 8010f60:	2202      	movs	r2, #2
 8010f62:	f7ff fc33 	bl	80107cc <prvListTaskWithinSingleList>
 8010f66:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8010f68:	0160      	lsls	r0, r4, #5
 8010f6a:	4b13      	ldr	r3, [pc, #76]	; (8010fb8 <uxTaskGetSystemState+0x94>)
 8010f6c:	6819      	ldr	r1, [r3, #0]
 8010f6e:	1838      	adds	r0, r7, r0
 8010f70:	2202      	movs	r2, #2
 8010f72:	f7ff fc2b 	bl	80107cc <prvListTaskWithinSingleList>
 8010f76:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8010f78:	0160      	lsls	r0, r4, #5
 8010f7a:	1838      	adds	r0, r7, r0
 8010f7c:	2204      	movs	r2, #4
 8010f7e:	490f      	ldr	r1, [pc, #60]	; (8010fbc <uxTaskGetSystemState+0x98>)
 8010f80:	f7ff fc24 	bl	80107cc <prvListTaskWithinSingleList>
 8010f84:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8010f86:	0160      	lsls	r0, r4, #5
 8010f88:	1838      	adds	r0, r7, r0
 8010f8a:	2203      	movs	r2, #3
 8010f8c:	490c      	ldr	r1, [pc, #48]	; (8010fc0 <uxTaskGetSystemState+0x9c>)
 8010f8e:	f7ff fc1d 	bl	80107cc <prvListTaskWithinSingleList>
 8010f92:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 8010f94:	2e00      	cmp	r6, #0
 8010f96:	d004      	beq.n	8010fa2 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010f98:	f7f7 faa2 	bl	80084e0 <ulMainGetRunTimeCounterValue>
 8010f9c:	6030      	str	r0, [r6, #0]
 8010f9e:	e000      	b.n	8010fa2 <uxTaskGetSystemState+0x7e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8010fa0:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 8010fa2:	f7ff fef3 	bl	8010d8c <xTaskResumeAll>
	}
 8010fa6:	0020      	movs	r0, r4
 8010fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010faa:	46c0      	nop			; (mov r8, r8)
 8010fac:	20002478 	.word	0x20002478
 8010fb0:	200023e8 	.word	0x200023e8
 8010fb4:	200023e0 	.word	0x200023e0
 8010fb8:	200023e4 	.word	0x200023e4
 8010fbc:	200024e8 	.word	0x200024e8
 8010fc0:	200024d4 	.word	0x200024d4

08010fc4 <vTaskSwitchContext>:
{
 8010fc4:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010fc6:	4b35      	ldr	r3, [pc, #212]	; (801109c <vTaskSwitchContext+0xd8>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d003      	beq.n	8010fd6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8010fce:	4b34      	ldr	r3, [pc, #208]	; (80110a0 <vTaskSwitchContext+0xdc>)
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	601a      	str	r2, [r3, #0]
}
 8010fd4:	bd70      	pop	{r4, r5, r6, pc}
		xYieldPending = pdFALSE;
 8010fd6:	4b32      	ldr	r3, [pc, #200]	; (80110a0 <vTaskSwitchContext+0xdc>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010fdc:	f7f7 fa80 	bl	80084e0 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010fe0:	4b30      	ldr	r3, [pc, #192]	; (80110a4 <vTaskSwitchContext+0xe0>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4298      	cmp	r0, r3
 8010fe6:	d906      	bls.n	8010ff6 <vTaskSwitchContext+0x32>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010fe8:	4a2f      	ldr	r2, [pc, #188]	; (80110a8 <vTaskSwitchContext+0xe4>)
 8010fea:	6812      	ldr	r2, [r2, #0]
 8010fec:	1ac3      	subs	r3, r0, r3
 8010fee:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8010ff0:	468c      	mov	ip, r1
 8010ff2:	4463      	add	r3, ip
 8010ff4:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8010ff6:	4b2b      	ldr	r3, [pc, #172]	; (80110a4 <vTaskSwitchContext+0xe0>)
 8010ff8:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8010ffa:	4b2b      	ldr	r3, [pc, #172]	; (80110a8 <vTaskSwitchContext+0xe4>)
 8010ffc:	681a      	ldr	r2, [r3, #0]
 8010ffe:	6812      	ldr	r2, [r2, #0]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011004:	429a      	cmp	r2, r3
 8011006:	d805      	bhi.n	8011014 <vTaskSwitchContext+0x50>
 8011008:	4b27      	ldr	r3, [pc, #156]	; (80110a8 <vTaskSwitchContext+0xe4>)
 801100a:	6818      	ldr	r0, [r3, #0]
 801100c:	6819      	ldr	r1, [r3, #0]
 801100e:	3134      	adds	r1, #52	; 0x34
 8011010:	f7fe f9ba 	bl	800f388 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8011014:	4b24      	ldr	r3, [pc, #144]	; (80110a8 <vTaskSwitchContext+0xe4>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801101a:	2214      	movs	r2, #20
 801101c:	4923      	ldr	r1, [pc, #140]	; (80110ac <vTaskSwitchContext+0xe8>)
 801101e:	f004 fa8d 	bl	801553c <memcmp>
 8011022:	2800      	cmp	r0, #0
 8011024:	d005      	beq.n	8011032 <vTaskSwitchContext+0x6e>
 8011026:	4b20      	ldr	r3, [pc, #128]	; (80110a8 <vTaskSwitchContext+0xe4>)
 8011028:	6818      	ldr	r0, [r3, #0]
 801102a:	6819      	ldr	r1, [r3, #0]
 801102c:	3134      	adds	r1, #52	; 0x34
 801102e:	f7fe f9ab 	bl	800f388 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011032:	4b1f      	ldr	r3, [pc, #124]	; (80110b0 <vTaskSwitchContext+0xec>)
 8011034:	681a      	ldr	r2, [r3, #0]
 8011036:	0093      	lsls	r3, r2, #2
 8011038:	189b      	adds	r3, r3, r2
 801103a:	009a      	lsls	r2, r3, #2
 801103c:	4b1d      	ldr	r3, [pc, #116]	; (80110b4 <vTaskSwitchContext+0xf0>)
 801103e:	58d3      	ldr	r3, [r2, r3]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d10a      	bne.n	801105a <vTaskSwitchContext+0x96>
 8011044:	4b1a      	ldr	r3, [pc, #104]	; (80110b0 <vTaskSwitchContext+0xec>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d004      	beq.n	8011056 <vTaskSwitchContext+0x92>
 801104c:	4a18      	ldr	r2, [pc, #96]	; (80110b0 <vTaskSwitchContext+0xec>)
 801104e:	6813      	ldr	r3, [r2, #0]
 8011050:	3b01      	subs	r3, #1
 8011052:	6013      	str	r3, [r2, #0]
 8011054:	e7ed      	b.n	8011032 <vTaskSwitchContext+0x6e>
 8011056:	b672      	cpsid	i
 8011058:	e7fe      	b.n	8011058 <vTaskSwitchContext+0x94>
 801105a:	4b15      	ldr	r3, [pc, #84]	; (80110b0 <vTaskSwitchContext+0xec>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	4d15      	ldr	r5, [pc, #84]	; (80110b4 <vTaskSwitchContext+0xf0>)
 8011060:	0099      	lsls	r1, r3, #2
 8011062:	18ca      	adds	r2, r1, r3
 8011064:	0090      	lsls	r0, r2, #2
 8011066:	1828      	adds	r0, r5, r0
 8011068:	6842      	ldr	r2, [r0, #4]
 801106a:	6854      	ldr	r4, [r2, #4]
 801106c:	6044      	str	r4, [r0, #4]
 801106e:	18c9      	adds	r1, r1, r3
 8011070:	008a      	lsls	r2, r1, #2
 8011072:	3208      	adds	r2, #8
 8011074:	1952      	adds	r2, r2, r5
 8011076:	4294      	cmp	r4, r2
 8011078:	d009      	beq.n	801108e <vTaskSwitchContext+0xca>
 801107a:	009a      	lsls	r2, r3, #2
 801107c:	18d3      	adds	r3, r2, r3
 801107e:	009a      	lsls	r2, r3, #2
 8011080:	4b0c      	ldr	r3, [pc, #48]	; (80110b4 <vTaskSwitchContext+0xf0>)
 8011082:	189b      	adds	r3, r3, r2
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	68da      	ldr	r2, [r3, #12]
 8011088:	4b07      	ldr	r3, [pc, #28]	; (80110a8 <vTaskSwitchContext+0xe4>)
 801108a:	601a      	str	r2, [r3, #0]
}
 801108c:	e7a2      	b.n	8010fd4 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801108e:	6860      	ldr	r0, [r4, #4]
 8011090:	2114      	movs	r1, #20
 8011092:	4359      	muls	r1, r3
 8011094:	186a      	adds	r2, r5, r1
 8011096:	6050      	str	r0, [r2, #4]
 8011098:	e7ef      	b.n	801107a <vTaskSwitchContext+0xb6>
 801109a:	46c0      	nop			; (mov r8, r8)
 801109c:	20002480 	.word	0x20002480
 80110a0:	20002500 	.word	0x20002500
 80110a4:	20002474 	.word	0x20002474
 80110a8:	200023dc 	.word	0x200023dc
 80110ac:	0801d444 	.word	0x0801d444
 80110b0:	2000248c 	.word	0x2000248c
 80110b4:	200023e8 	.word	0x200023e8

080110b8 <vTaskPlaceOnEventList>:
{
 80110b8:	b570      	push	{r4, r5, r6, lr}
 80110ba:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 80110bc:	2800      	cmp	r0, #0
 80110be:	d101      	bne.n	80110c4 <vTaskPlaceOnEventList+0xc>
 80110c0:	b672      	cpsid	i
 80110c2:	e7fe      	b.n	80110c2 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110c4:	4d0b      	ldr	r5, [pc, #44]	; (80110f4 <vTaskPlaceOnEventList+0x3c>)
 80110c6:	6829      	ldr	r1, [r5, #0]
 80110c8:	3118      	adds	r1, #24
 80110ca:	f7ff f801 	bl	80100d0 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80110ce:	6828      	ldr	r0, [r5, #0]
 80110d0:	3004      	adds	r0, #4
 80110d2:	f7ff f815 	bl	8010100 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 80110d6:	1c63      	adds	r3, r4, #1
 80110d8:	d005      	beq.n	80110e6 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 80110da:	4b07      	ldr	r3, [pc, #28]	; (80110f8 <vTaskPlaceOnEventList+0x40>)
 80110dc:	6818      	ldr	r0, [r3, #0]
 80110de:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80110e0:	f7ff fc5e 	bl	80109a0 <prvAddCurrentTaskToDelayedList>
}
 80110e4:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80110e6:	4b03      	ldr	r3, [pc, #12]	; (80110f4 <vTaskPlaceOnEventList+0x3c>)
 80110e8:	6819      	ldr	r1, [r3, #0]
 80110ea:	3104      	adds	r1, #4
 80110ec:	4803      	ldr	r0, [pc, #12]	; (80110fc <vTaskPlaceOnEventList+0x44>)
 80110ee:	f7fe ffe3 	bl	80100b8 <vListInsertEnd>
 80110f2:	e7f7      	b.n	80110e4 <vTaskPlaceOnEventList+0x2c>
 80110f4:	200023dc 	.word	0x200023dc
 80110f8:	200024fc 	.word	0x200024fc
 80110fc:	200024d4 	.word	0x200024d4

08011100 <vTaskPlaceOnEventListRestricted>:
	{
 8011100:	b570      	push	{r4, r5, r6, lr}
 8011102:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 8011104:	2800      	cmp	r0, #0
 8011106:	d101      	bne.n	801110c <vTaskPlaceOnEventListRestricted+0xc>
 8011108:	b672      	cpsid	i
 801110a:	e7fe      	b.n	801110a <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801110c:	4c07      	ldr	r4, [pc, #28]	; (801112c <vTaskPlaceOnEventListRestricted+0x2c>)
 801110e:	6821      	ldr	r1, [r4, #0]
 8011110:	3118      	adds	r1, #24
 8011112:	f7fe ffd1 	bl	80100b8 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8011116:	6820      	ldr	r0, [r4, #0]
 8011118:	3004      	adds	r0, #4
 801111a:	f7fe fff1 	bl	8010100 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 801111e:	4b04      	ldr	r3, [pc, #16]	; (8011130 <vTaskPlaceOnEventListRestricted+0x30>)
 8011120:	6818      	ldr	r0, [r3, #0]
 8011122:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8011124:	f7ff fc3c 	bl	80109a0 <prvAddCurrentTaskToDelayedList>
	}
 8011128:	bd70      	pop	{r4, r5, r6, pc}
 801112a:	46c0      	nop			; (mov r8, r8)
 801112c:	200023dc 	.word	0x200023dc
 8011130:	200024fc 	.word	0x200024fc

08011134 <xTaskRemoveFromEventList>:
{
 8011134:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011136:	68c3      	ldr	r3, [r0, #12]
 8011138:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801113a:	2c00      	cmp	r4, #0
 801113c:	d101      	bne.n	8011142 <xTaskRemoveFromEventList+0xe>
 801113e:	b672      	cpsid	i
 8011140:	e7fe      	b.n	8011140 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011142:	0025      	movs	r5, r4
 8011144:	3518      	adds	r5, #24
 8011146:	0028      	movs	r0, r5
 8011148:	f7fe ffda 	bl	8010100 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801114c:	4b14      	ldr	r3, [pc, #80]	; (80111a0 <xTaskRemoveFromEventList+0x6c>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d11d      	bne.n	8011190 <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8011154:	1d25      	adds	r5, r4, #4
 8011156:	0028      	movs	r0, r5
 8011158:	f7fe ffd2 	bl	8010100 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801115c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801115e:	4b11      	ldr	r3, [pc, #68]	; (80111a4 <xTaskRemoveFromEventList+0x70>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	429a      	cmp	r2, r3
 8011164:	d901      	bls.n	801116a <xTaskRemoveFromEventList+0x36>
 8011166:	4b0f      	ldr	r3, [pc, #60]	; (80111a4 <xTaskRemoveFromEventList+0x70>)
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	0093      	lsls	r3, r2, #2
 801116c:	189b      	adds	r3, r3, r2
 801116e:	0098      	lsls	r0, r3, #2
 8011170:	4b0d      	ldr	r3, [pc, #52]	; (80111a8 <xTaskRemoveFromEventList+0x74>)
 8011172:	18c0      	adds	r0, r0, r3
 8011174:	0029      	movs	r1, r5
 8011176:	f7fe ff9f 	bl	80100b8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801117a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801117c:	4b0b      	ldr	r3, [pc, #44]	; (80111ac <xTaskRemoveFromEventList+0x78>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011182:	429a      	cmp	r2, r3
 8011184:	d909      	bls.n	801119a <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 8011186:	4b0a      	ldr	r3, [pc, #40]	; (80111b0 <xTaskRemoveFromEventList+0x7c>)
 8011188:	2201      	movs	r2, #1
 801118a:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 801118c:	2001      	movs	r0, #1
}
 801118e:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011190:	0029      	movs	r1, r5
 8011192:	4808      	ldr	r0, [pc, #32]	; (80111b4 <xTaskRemoveFromEventList+0x80>)
 8011194:	f7fe ff90 	bl	80100b8 <vListInsertEnd>
 8011198:	e7ef      	b.n	801117a <xTaskRemoveFromEventList+0x46>
		xReturn = pdFALSE;
 801119a:	2000      	movs	r0, #0
	return xReturn;
 801119c:	e7f7      	b.n	801118e <xTaskRemoveFromEventList+0x5a>
 801119e:	46c0      	nop			; (mov r8, r8)
 80111a0:	20002480 	.word	0x20002480
 80111a4:	2000248c 	.word	0x2000248c
 80111a8:	200023e8 	.word	0x200023e8
 80111ac:	200023dc 	.word	0x200023dc
 80111b0:	20002500 	.word	0x20002500
 80111b4:	200024bc 	.word	0x200024bc

080111b8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 80111b8:	2800      	cmp	r0, #0
 80111ba:	d006      	beq.n	80111ca <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80111bc:	4b04      	ldr	r3, [pc, #16]	; (80111d0 <vTaskSetTimeOutState+0x18>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80111c2:	4b04      	ldr	r3, [pc, #16]	; (80111d4 <vTaskSetTimeOutState+0x1c>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	6043      	str	r3, [r0, #4]
}
 80111c8:	4770      	bx	lr
	configASSERT( pxTimeOut );
 80111ca:	b672      	cpsid	i
 80111cc:	e7fe      	b.n	80111cc <vTaskSetTimeOutState+0x14>
 80111ce:	46c0      	nop			; (mov r8, r8)
 80111d0:	200024b8 	.word	0x200024b8
 80111d4:	200024fc 	.word	0x200024fc

080111d8 <xTaskCheckForTimeOut>:
{
 80111d8:	b570      	push	{r4, r5, r6, lr}
 80111da:	0004      	movs	r4, r0
 80111dc:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 80111de:	2800      	cmp	r0, #0
 80111e0:	d003      	beq.n	80111ea <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80111e2:	2900      	cmp	r1, #0
 80111e4:	d103      	bne.n	80111ee <xTaskCheckForTimeOut+0x16>
 80111e6:	b672      	cpsid	i
 80111e8:	e7fe      	b.n	80111e8 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 80111ea:	b672      	cpsid	i
 80111ec:	e7fe      	b.n	80111ec <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 80111ee:	f000 fc75 	bl	8011adc <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80111f2:	4b11      	ldr	r3, [pc, #68]	; (8011238 <xTaskCheckForTimeOut+0x60>)
 80111f4:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80111f6:	682b      	ldr	r3, [r5, #0]
 80111f8:	1c5a      	adds	r2, r3, #1
 80111fa:	d018      	beq.n	801122e <xTaskCheckForTimeOut+0x56>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80111fc:	4a0f      	ldr	r2, [pc, #60]	; (801123c <xTaskCheckForTimeOut+0x64>)
 80111fe:	6812      	ldr	r2, [r2, #0]
 8011200:	6820      	ldr	r0, [r4, #0]
 8011202:	4290      	cmp	r0, r2
 8011204:	d002      	beq.n	801120c <xTaskCheckForTimeOut+0x34>
 8011206:	6862      	ldr	r2, [r4, #4]
 8011208:	428a      	cmp	r2, r1
 801120a:	d912      	bls.n	8011232 <xTaskCheckForTimeOut+0x5a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 801120c:	6862      	ldr	r2, [r4, #4]
 801120e:	1a88      	subs	r0, r1, r2
 8011210:	4283      	cmp	r3, r0
 8011212:	d804      	bhi.n	801121e <xTaskCheckForTimeOut+0x46>
			xReturn = pdTRUE;
 8011214:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8011216:	f000 fc6d 	bl	8011af4 <vPortExitCritical>
}
 801121a:	0020      	movs	r0, r4
 801121c:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 801121e:	1a52      	subs	r2, r2, r1
 8011220:	189b      	adds	r3, r3, r2
 8011222:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8011224:	0020      	movs	r0, r4
 8011226:	f7ff ffc7 	bl	80111b8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 801122a:	2400      	movs	r4, #0
 801122c:	e7f3      	b.n	8011216 <xTaskCheckForTimeOut+0x3e>
				xReturn = pdFALSE;
 801122e:	2400      	movs	r4, #0
 8011230:	e7f1      	b.n	8011216 <xTaskCheckForTimeOut+0x3e>
			xReturn = pdTRUE;
 8011232:	2401      	movs	r4, #1
 8011234:	e7ef      	b.n	8011216 <xTaskCheckForTimeOut+0x3e>
 8011236:	46c0      	nop			; (mov r8, r8)
 8011238:	200024fc 	.word	0x200024fc
 801123c:	200024b8 	.word	0x200024b8

08011240 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8011240:	4b01      	ldr	r3, [pc, #4]	; (8011248 <vTaskMissedYield+0x8>)
 8011242:	2201      	movs	r2, #1
 8011244:	601a      	str	r2, [r3, #0]
}
 8011246:	4770      	bx	lr
 8011248:	20002500 	.word	0x20002500

0801124c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801124c:	4b06      	ldr	r3, [pc, #24]	; (8011268 <xTaskGetSchedulerState+0x1c>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d007      	beq.n	8011264 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011254:	4b05      	ldr	r3, [pc, #20]	; (801126c <xTaskGetSchedulerState+0x20>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d001      	beq.n	8011260 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 801125c:	2000      	movs	r0, #0
		return xReturn;
 801125e:	e002      	b.n	8011266 <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 8011260:	2002      	movs	r0, #2
 8011262:	e000      	b.n	8011266 <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011264:	2001      	movs	r0, #1
	}
 8011266:	4770      	bx	lr
 8011268:	200024d0 	.word	0x200024d0
 801126c:	20002480 	.word	0x20002480

08011270 <vTaskPriorityInherit>:
	{
 8011270:	b570      	push	{r4, r5, r6, lr}
 8011272:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8011274:	d01a      	beq.n	80112ac <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011276:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011278:	4a19      	ldr	r2, [pc, #100]	; (80112e0 <vTaskPriorityInherit+0x70>)
 801127a:	6812      	ldr	r2, [r2, #0]
 801127c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801127e:	4293      	cmp	r3, r2
 8011280:	d214      	bcs.n	80112ac <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011282:	6982      	ldr	r2, [r0, #24]
 8011284:	2a00      	cmp	r2, #0
 8011286:	db05      	blt.n	8011294 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011288:	4a15      	ldr	r2, [pc, #84]	; (80112e0 <vTaskPriorityInherit+0x70>)
 801128a:	6812      	ldr	r2, [r2, #0]
 801128c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801128e:	2207      	movs	r2, #7
 8011290:	1a52      	subs	r2, r2, r1
 8011292:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8011294:	009a      	lsls	r2, r3, #2
 8011296:	18d3      	adds	r3, r2, r3
 8011298:	009a      	lsls	r2, r3, #2
 801129a:	4b12      	ldr	r3, [pc, #72]	; (80112e4 <vTaskPriorityInherit+0x74>)
 801129c:	18d2      	adds	r2, r2, r3
 801129e:	6963      	ldr	r3, [r4, #20]
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d004      	beq.n	80112ae <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112a4:	4b0e      	ldr	r3, [pc, #56]	; (80112e0 <vTaskPriorityInherit+0x70>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 80112ac:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80112ae:	1d25      	adds	r5, r4, #4
 80112b0:	0028      	movs	r0, r5
 80112b2:	f7fe ff25 	bl	8010100 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112b6:	4b0a      	ldr	r3, [pc, #40]	; (80112e0 <vTaskPriorityInherit+0x70>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112bc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80112be:	4a0a      	ldr	r2, [pc, #40]	; (80112e8 <vTaskPriorityInherit+0x78>)
 80112c0:	6812      	ldr	r2, [r2, #0]
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d808      	bhi.n	80112d8 <vTaskPriorityInherit+0x68>
 80112c6:	009a      	lsls	r2, r3, #2
 80112c8:	18d3      	adds	r3, r2, r3
 80112ca:	0098      	lsls	r0, r3, #2
 80112cc:	4b05      	ldr	r3, [pc, #20]	; (80112e4 <vTaskPriorityInherit+0x74>)
 80112ce:	18c0      	adds	r0, r0, r3
 80112d0:	0029      	movs	r1, r5
 80112d2:	f7fe fef1 	bl	80100b8 <vListInsertEnd>
	}
 80112d6:	e7e9      	b.n	80112ac <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 80112d8:	4a03      	ldr	r2, [pc, #12]	; (80112e8 <vTaskPriorityInherit+0x78>)
 80112da:	6013      	str	r3, [r2, #0]
 80112dc:	e7f3      	b.n	80112c6 <vTaskPriorityInherit+0x56>
 80112de:	46c0      	nop			; (mov r8, r8)
 80112e0:	200023dc 	.word	0x200023dc
 80112e4:	200023e8 	.word	0x200023e8
 80112e8:	2000248c 	.word	0x2000248c

080112ec <xTaskPriorityDisinherit>:
	{
 80112ec:	b570      	push	{r4, r5, r6, lr}
 80112ee:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80112f0:	d02a      	beq.n	8011348 <xTaskPriorityDisinherit+0x5c>
			configASSERT( pxTCB == pxCurrentTCB );
 80112f2:	4b18      	ldr	r3, [pc, #96]	; (8011354 <xTaskPriorityDisinherit+0x68>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	4283      	cmp	r3, r0
 80112f8:	d001      	beq.n	80112fe <xTaskPriorityDisinherit+0x12>
 80112fa:	b672      	cpsid	i
 80112fc:	e7fe      	b.n	80112fc <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80112fe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011300:	2b00      	cmp	r3, #0
 8011302:	d101      	bne.n	8011308 <xTaskPriorityDisinherit+0x1c>
 8011304:	b672      	cpsid	i
 8011306:	e7fe      	b.n	8011306 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 8011308:	3b01      	subs	r3, #1
 801130a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801130c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801130e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8011310:	428a      	cmp	r2, r1
 8011312:	d01b      	beq.n	801134c <xTaskPriorityDisinherit+0x60>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011314:	2b00      	cmp	r3, #0
 8011316:	d11b      	bne.n	8011350 <xTaskPriorityDisinherit+0x64>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8011318:	1d05      	adds	r5, r0, #4
 801131a:	0028      	movs	r0, r5
 801131c:	f7fe fef0 	bl	8010100 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011320:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011322:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011324:	2207      	movs	r2, #7
 8011326:	1ad2      	subs	r2, r2, r3
 8011328:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801132a:	4a0b      	ldr	r2, [pc, #44]	; (8011358 <xTaskPriorityDisinherit+0x6c>)
 801132c:	6812      	ldr	r2, [r2, #0]
 801132e:	4293      	cmp	r3, r2
 8011330:	d901      	bls.n	8011336 <xTaskPriorityDisinherit+0x4a>
 8011332:	4a09      	ldr	r2, [pc, #36]	; (8011358 <xTaskPriorityDisinherit+0x6c>)
 8011334:	6013      	str	r3, [r2, #0]
 8011336:	2014      	movs	r0, #20
 8011338:	4358      	muls	r0, r3
 801133a:	4b08      	ldr	r3, [pc, #32]	; (801135c <xTaskPriorityDisinherit+0x70>)
 801133c:	18c0      	adds	r0, r0, r3
 801133e:	0029      	movs	r1, r5
 8011340:	f7fe feba 	bl	80100b8 <vListInsertEnd>
					xReturn = pdTRUE;
 8011344:	2001      	movs	r0, #1
 8011346:	e000      	b.n	801134a <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
 8011348:	2000      	movs	r0, #0
	}
 801134a:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 801134c:	2000      	movs	r0, #0
 801134e:	e7fc      	b.n	801134a <xTaskPriorityDisinherit+0x5e>
 8011350:	2000      	movs	r0, #0
		return xReturn;
 8011352:	e7fa      	b.n	801134a <xTaskPriorityDisinherit+0x5e>
 8011354:	200023dc 	.word	0x200023dc
 8011358:	2000248c 	.word	0x2000248c
 801135c:	200023e8 	.word	0x200023e8

08011360 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8011360:	b570      	push	{r4, r5, r6, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8011366:	2300      	movs	r3, #0
 8011368:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801136a:	4b28      	ldr	r3, [pc, #160]	; (801140c <vTaskList+0xac>)
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8011370:	6818      	ldr	r0, [r3, #0]
 8011372:	0140      	lsls	r0, r0, #5
 8011374:	f000 fc66 	bl	8011c44 <pvPortMalloc>
 8011378:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 801137a:	d045      	beq.n	8011408 <vTaskList+0xa8>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 801137c:	9903      	ldr	r1, [sp, #12]
 801137e:	2200      	movs	r2, #0
 8011380:	f7ff fdd0 	bl	8010f24 <uxTaskGetSystemState>
 8011384:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8011386:	2300      	movs	r3, #0
 8011388:	9302      	str	r3, [sp, #8]
 801138a:	e023      	b.n	80113d4 <vTaskList+0x74>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 801138c:	2b01      	cmp	r3, #1
 801138e:	d134      	bne.n	80113fa <vTaskList+0x9a>
				{
					case eReady:		cStatus = tskREADY_CHAR;
 8011390:	2552      	movs	r5, #82	; 0x52
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8011392:	9b02      	ldr	r3, [sp, #8]
 8011394:	015b      	lsls	r3, r3, #5
 8011396:	18f3      	adds	r3, r6, r3
 8011398:	6859      	ldr	r1, [r3, #4]
 801139a:	0020      	movs	r0, r4
 801139c:	f7ff fb2a 	bl	80109f4 <prvWriteNameToBuffer>
 80113a0:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 80113a2:	9b02      	ldr	r3, [sp, #8]
 80113a4:	015b      	lsls	r3, r3, #5
 80113a6:	18f3      	adds	r3, r6, r3
 80113a8:	691b      	ldr	r3, [r3, #16]
 80113aa:	9a02      	ldr	r2, [sp, #8]
 80113ac:	0152      	lsls	r2, r2, #5
 80113ae:	18b2      	adds	r2, r6, r2
 80113b0:	8b91      	ldrh	r1, [r2, #28]
 80113b2:	9a02      	ldr	r2, [sp, #8]
 80113b4:	0152      	lsls	r2, r2, #5
 80113b6:	18b2      	adds	r2, r6, r2
 80113b8:	6892      	ldr	r2, [r2, #8]
 80113ba:	9201      	str	r2, [sp, #4]
 80113bc:	9100      	str	r1, [sp, #0]
 80113be:	002a      	movs	r2, r5
 80113c0:	4913      	ldr	r1, [pc, #76]	; (8011410 <vTaskList+0xb0>)
 80113c2:	f004 facd 	bl	8015960 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 80113c6:	0020      	movs	r0, r4
 80113c8:	f7ee fea6 	bl	8000118 <strlen>
 80113cc:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 80113ce:	9b02      	ldr	r3, [sp, #8]
 80113d0:	3301      	adds	r3, #1
 80113d2:	9302      	str	r3, [sp, #8]
 80113d4:	9a02      	ldr	r2, [sp, #8]
 80113d6:	9b03      	ldr	r3, [sp, #12]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d212      	bcs.n	8011402 <vTaskList+0xa2>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80113dc:	9b02      	ldr	r3, [sp, #8]
 80113de:	015b      	lsls	r3, r3, #5
 80113e0:	18f3      	adds	r3, r6, r3
 80113e2:	7b1b      	ldrb	r3, [r3, #12]
 80113e4:	2b02      	cmp	r3, #2
 80113e6:	d00a      	beq.n	80113fe <vTaskList+0x9e>
 80113e8:	d9d0      	bls.n	801138c <vTaskList+0x2c>
 80113ea:	2b03      	cmp	r3, #3
 80113ec:	d003      	beq.n	80113f6 <vTaskList+0x96>
 80113ee:	2b04      	cmp	r3, #4
 80113f0:	d103      	bne.n	80113fa <vTaskList+0x9a>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 80113f2:	2544      	movs	r5, #68	; 0x44
										break;
 80113f4:	e7cd      	b.n	8011392 <vTaskList+0x32>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80113f6:	2553      	movs	r5, #83	; 0x53
										break;
 80113f8:	e7cb      	b.n	8011392 <vTaskList+0x32>
										cStatus = 0x00;
 80113fa:	2500      	movs	r5, #0
										break;
 80113fc:	e7c9      	b.n	8011392 <vTaskList+0x32>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80113fe:	2542      	movs	r5, #66	; 0x42
 8011400:	e7c7      	b.n	8011392 <vTaskList+0x32>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8011402:	0030      	movs	r0, r6
 8011404:	f000 fc96 	bl	8011d34 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011408:	b004      	add	sp, #16
 801140a:	bd70      	pop	{r4, r5, r6, pc}
 801140c:	20002478 	.word	0x20002478
 8011410:	0801d470 	.word	0x0801d470

08011414 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8011414:	b570      	push	{r4, r5, r6, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 801141a:	2300      	movs	r3, #0
 801141c:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801141e:	4b25      	ldr	r3, [pc, #148]	; (80114b4 <vTaskGetRunTimeStats+0xa0>)
 8011420:	681a      	ldr	r2, [r3, #0]
 8011422:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8011424:	6818      	ldr	r0, [r3, #0]
 8011426:	0140      	lsls	r0, r0, #5
 8011428:	f000 fc0c 	bl	8011c44 <pvPortMalloc>
 801142c:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 801142e:	d03e      	beq.n	80114ae <vTaskGetRunTimeStats+0x9a>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8011430:	9903      	ldr	r1, [sp, #12]
 8011432:	aa01      	add	r2, sp, #4
 8011434:	f7ff fd76 	bl	8010f24 <uxTaskGetSystemState>
 8011438:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 801143a:	2164      	movs	r1, #100	; 0x64
 801143c:	9801      	ldr	r0, [sp, #4]
 801143e:	f7ee fe87 	bl	8000150 <__udivsi3>
 8011442:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 8011444:	2800      	cmp	r0, #0
 8011446:	d02f      	beq.n	80114a8 <vTaskGetRunTimeStats+0x94>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8011448:	2300      	movs	r3, #0
 801144a:	9302      	str	r3, [sp, #8]
 801144c:	e00d      	b.n	801146a <vTaskGetRunTimeStats+0x56>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 801144e:	9b02      	ldr	r3, [sp, #8]
 8011450:	015b      	lsls	r3, r3, #5
 8011452:	18f3      	adds	r3, r6, r3
 8011454:	699a      	ldr	r2, [r3, #24]
 8011456:	4918      	ldr	r1, [pc, #96]	; (80114b8 <vTaskGetRunTimeStats+0xa4>)
 8011458:	f004 fa82 	bl	8015960 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 801145c:	0020      	movs	r0, r4
 801145e:	f7ee fe5b 	bl	8000118 <strlen>
 8011462:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8011464:	9b02      	ldr	r3, [sp, #8]
 8011466:	3301      	adds	r3, #1
 8011468:	9302      	str	r3, [sp, #8]
 801146a:	9a02      	ldr	r2, [sp, #8]
 801146c:	9b03      	ldr	r3, [sp, #12]
 801146e:	429a      	cmp	r2, r3
 8011470:	d21a      	bcs.n	80114a8 <vTaskGetRunTimeStats+0x94>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8011472:	9b02      	ldr	r3, [sp, #8]
 8011474:	015b      	lsls	r3, r3, #5
 8011476:	18f3      	adds	r3, r6, r3
 8011478:	6998      	ldr	r0, [r3, #24]
 801147a:	9901      	ldr	r1, [sp, #4]
 801147c:	f7ee fe68 	bl	8000150 <__udivsi3>
 8011480:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8011482:	9b02      	ldr	r3, [sp, #8]
 8011484:	015b      	lsls	r3, r3, #5
 8011486:	18f3      	adds	r3, r6, r3
 8011488:	6859      	ldr	r1, [r3, #4]
 801148a:	0020      	movs	r0, r4
 801148c:	f7ff fab2 	bl	80109f4 <prvWriteNameToBuffer>
 8011490:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 8011492:	2d00      	cmp	r5, #0
 8011494:	d0db      	beq.n	801144e <vTaskGetRunTimeStats+0x3a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8011496:	9b02      	ldr	r3, [sp, #8]
 8011498:	015b      	lsls	r3, r3, #5
 801149a:	18f3      	adds	r3, r6, r3
 801149c:	699a      	ldr	r2, [r3, #24]
 801149e:	002b      	movs	r3, r5
 80114a0:	4906      	ldr	r1, [pc, #24]	; (80114bc <vTaskGetRunTimeStats+0xa8>)
 80114a2:	f004 fa5d 	bl	8015960 <sprintf>
 80114a6:	e7d9      	b.n	801145c <vTaskGetRunTimeStats+0x48>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 80114a8:	0030      	movs	r0, r6
 80114aa:	f000 fc43 	bl	8011d34 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80114ae:	b004      	add	sp, #16
 80114b0:	bd70      	pop	{r4, r5, r6, pc}
 80114b2:	46c0      	nop			; (mov r8, r8)
 80114b4:	20002478 	.word	0x20002478
 80114b8:	0801d464 	.word	0x0801d464
 80114bc:	0801d458 	.word	0x0801d458

080114c0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80114c0:	4b05      	ldr	r3, [pc, #20]	; (80114d8 <pvTaskIncrementMutexHeldCount+0x18>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d004      	beq.n	80114d2 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80114c8:	4b03      	ldr	r3, [pc, #12]	; (80114d8 <pvTaskIncrementMutexHeldCount+0x18>)
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80114ce:	3301      	adds	r3, #1
 80114d0:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 80114d2:	4b01      	ldr	r3, [pc, #4]	; (80114d8 <pvTaskIncrementMutexHeldCount+0x18>)
 80114d4:	6818      	ldr	r0, [r3, #0]
	}
 80114d6:	4770      	bx	lr
 80114d8:	200023dc 	.word	0x200023dc

080114dc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80114dc:	b570      	push	{r4, r5, r6, lr}
 80114de:	0005      	movs	r5, r0
 80114e0:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80114e2:	f000 fafb 	bl	8011adc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80114e6:	4b20      	ldr	r3, [pc, #128]	; (8011568 <ulTaskNotifyTake+0x8c>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d106      	bne.n	80114fe <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80114f0:	4b1d      	ldr	r3, [pc, #116]	; (8011568 <ulTaskNotifyTake+0x8c>)
 80114f2:	681a      	ldr	r2, [r3, #0]
 80114f4:	235c      	movs	r3, #92	; 0x5c
 80114f6:	2101      	movs	r1, #1
 80114f8:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 80114fa:	2c00      	cmp	r4, #0
 80114fc:	d118      	bne.n	8011530 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80114fe:	f000 faf9 	bl	8011af4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011502:	f000 faeb 	bl	8011adc <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8011506:	4b18      	ldr	r3, [pc, #96]	; (8011568 <ulTaskNotifyTake+0x8c>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 801150c:	2c00      	cmp	r4, #0
 801150e:	d006      	beq.n	801151e <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 8011510:	2d00      	cmp	r5, #0
 8011512:	d123      	bne.n	801155c <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 8011514:	4b14      	ldr	r3, [pc, #80]	; (8011568 <ulTaskNotifyTake+0x8c>)
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	6d93      	ldr	r3, [r2, #88]	; 0x58
 801151a:	3b01      	subs	r3, #1
 801151c:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 801151e:	4b12      	ldr	r3, [pc, #72]	; (8011568 <ulTaskNotifyTake+0x8c>)
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	235c      	movs	r3, #92	; 0x5c
 8011524:	2100      	movs	r1, #0
 8011526:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 8011528:	f000 fae4 	bl	8011af4 <vPortExitCritical>

		return ulReturn;
	}
 801152c:	0020      	movs	r0, r4
 801152e:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8011530:	4b0d      	ldr	r3, [pc, #52]	; (8011568 <ulTaskNotifyTake+0x8c>)
 8011532:	6818      	ldr	r0, [r3, #0]
 8011534:	3004      	adds	r0, #4
 8011536:	f7fe fde3 	bl	8010100 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 801153a:	1c63      	adds	r3, r4, #1
 801153c:	d007      	beq.n	801154e <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 801153e:	4b0b      	ldr	r3, [pc, #44]	; (801156c <ulTaskNotifyTake+0x90>)
 8011540:	6818      	ldr	r0, [r3, #0]
 8011542:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8011544:	f7ff fa2c 	bl	80109a0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8011548:	f000 fabc 	bl	8011ac4 <vPortYield>
 801154c:	e7d7      	b.n	80114fe <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 801154e:	4b06      	ldr	r3, [pc, #24]	; (8011568 <ulTaskNotifyTake+0x8c>)
 8011550:	6819      	ldr	r1, [r3, #0]
 8011552:	3104      	adds	r1, #4
 8011554:	4806      	ldr	r0, [pc, #24]	; (8011570 <ulTaskNotifyTake+0x94>)
 8011556:	f7fe fdaf 	bl	80100b8 <vListInsertEnd>
 801155a:	e7f5      	b.n	8011548 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801155c:	4b02      	ldr	r3, [pc, #8]	; (8011568 <ulTaskNotifyTake+0x8c>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2200      	movs	r2, #0
 8011562:	659a      	str	r2, [r3, #88]	; 0x58
 8011564:	e7db      	b.n	801151e <ulTaskNotifyTake+0x42>
 8011566:	46c0      	nop			; (mov r8, r8)
 8011568:	200023dc 	.word	0x200023dc
 801156c:	200024fc 	.word	0x200024fc
 8011570:	200024d4 	.word	0x200024d4

08011574 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011576:	0004      	movs	r4, r0
 8011578:	000e      	movs	r6, r1
 801157a:	0015      	movs	r5, r2
 801157c:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 801157e:	2800      	cmp	r0, #0
 8011580:	d101      	bne.n	8011586 <xTaskGenericNotify+0x12>
 8011582:	b672      	cpsid	i
 8011584:	e7fe      	b.n	8011584 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8011586:	f000 faa9 	bl	8011adc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801158a:	2f00      	cmp	r7, #0
 801158c:	d001      	beq.n	8011592 <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801158e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011590:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8011592:	225c      	movs	r2, #92	; 0x5c
 8011594:	5ca3      	ldrb	r3, [r4, r2]
 8011596:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 8011598:	2102      	movs	r1, #2
 801159a:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 801159c:	2d02      	cmp	r5, #2
 801159e:	d017      	beq.n	80115d0 <xTaskGenericNotify+0x5c>
 80115a0:	d908      	bls.n	80115b4 <xTaskGenericNotify+0x40>
 80115a2:	2d03      	cmp	r5, #3
 80115a4:	d019      	beq.n	80115da <xTaskGenericNotify+0x66>
 80115a6:	2d04      	cmp	r5, #4
 80115a8:	d106      	bne.n	80115b8 <xTaskGenericNotify+0x44>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 80115aa:	2b02      	cmp	r3, #2
 80115ac:	d018      	beq.n	80115e0 <xTaskGenericNotify+0x6c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80115ae:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 80115b0:	2501      	movs	r5, #1
 80115b2:	e007      	b.n	80115c4 <xTaskGenericNotify+0x50>
			switch( eAction )
 80115b4:	2d01      	cmp	r5, #1
 80115b6:	d001      	beq.n	80115bc <xTaskGenericNotify+0x48>
	BaseType_t xReturn = pdPASS;
 80115b8:	2501      	movs	r5, #1
 80115ba:	e003      	b.n	80115c4 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 80115bc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80115be:	4316      	orrs	r6, r2
 80115c0:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 80115c2:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d00d      	beq.n	80115e4 <xTaskGenericNotify+0x70>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80115c8:	f000 fa94 	bl	8011af4 <vPortExitCritical>

		return xReturn;
	}
 80115cc:	0028      	movs	r0, r5
 80115ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 80115d0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80115d2:	3201      	adds	r2, #1
 80115d4:	65a2      	str	r2, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 80115d6:	2501      	movs	r5, #1
					break;
 80115d8:	e7f4      	b.n	80115c4 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue = ulValue;
 80115da:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 80115dc:	2501      	movs	r5, #1
					break;
 80115de:	e7f1      	b.n	80115c4 <xTaskGenericNotify+0x50>
						xReturn = pdFAIL;
 80115e0:	2500      	movs	r5, #0
 80115e2:	e7ef      	b.n	80115c4 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80115e4:	1d26      	adds	r6, r4, #4
 80115e6:	0030      	movs	r0, r6
 80115e8:	f7fe fd8a 	bl	8010100 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80115ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80115ee:	4a0d      	ldr	r2, [pc, #52]	; (8011624 <xTaskGenericNotify+0xb0>)
 80115f0:	6812      	ldr	r2, [r2, #0]
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d901      	bls.n	80115fa <xTaskGenericNotify+0x86>
 80115f6:	4a0b      	ldr	r2, [pc, #44]	; (8011624 <xTaskGenericNotify+0xb0>)
 80115f8:	6013      	str	r3, [r2, #0]
 80115fa:	2014      	movs	r0, #20
 80115fc:	4358      	muls	r0, r3
 80115fe:	4b0a      	ldr	r3, [pc, #40]	; (8011628 <xTaskGenericNotify+0xb4>)
 8011600:	18c0      	adds	r0, r0, r3
 8011602:	0031      	movs	r1, r6
 8011604:	f7fe fd58 	bl	80100b8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011608:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801160a:	2b00      	cmp	r3, #0
 801160c:	d001      	beq.n	8011612 <xTaskGenericNotify+0x9e>
 801160e:	b672      	cpsid	i
 8011610:	e7fe      	b.n	8011610 <xTaskGenericNotify+0x9c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011612:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011614:	4b05      	ldr	r3, [pc, #20]	; (801162c <xTaskGenericNotify+0xb8>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801161a:	429a      	cmp	r2, r3
 801161c:	d9d4      	bls.n	80115c8 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 801161e:	f000 fa51 	bl	8011ac4 <vPortYield>
 8011622:	e7d1      	b.n	80115c8 <xTaskGenericNotify+0x54>
 8011624:	2000248c 	.word	0x2000248c
 8011628:	200023e8 	.word	0x200023e8
 801162c:	200023dc 	.word	0x200023dc

08011630 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011630:	4b06      	ldr	r3, [pc, #24]	; (801164c <prvGetNextExpireTime+0x1c>)
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	6813      	ldr	r3, [r2, #0]
 8011636:	4259      	negs	r1, r3
 8011638:	414b      	adcs	r3, r1
 801163a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 801163c:	2b00      	cmp	r3, #0
 801163e:	d102      	bne.n	8011646 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011640:	68d3      	ldr	r3, [r2, #12]
 8011642:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
	}

	return xNextExpireTime;
}
 8011644:	4770      	bx	lr
		xNextExpireTime = ( TickType_t ) 0U;
 8011646:	2000      	movs	r0, #0
	return xNextExpireTime;
 8011648:	e7fc      	b.n	8011644 <prvGetNextExpireTime+0x14>
 801164a:	46c0      	nop			; (mov r8, r8)
 801164c:	20002504 	.word	0x20002504

08011650 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011650:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011652:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011654:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011656:	4291      	cmp	r1, r2
 8011658:	d80c      	bhi.n	8011674 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 801165a:	1ad2      	subs	r2, r2, r3
 801165c:	6983      	ldr	r3, [r0, #24]
 801165e:	429a      	cmp	r2, r3
 8011660:	d301      	bcc.n	8011666 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011662:	2001      	movs	r0, #1
 8011664:	e010      	b.n	8011688 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011666:	1d01      	adds	r1, r0, #4
 8011668:	4b09      	ldr	r3, [pc, #36]	; (8011690 <prvInsertTimerInActiveList+0x40>)
 801166a:	6818      	ldr	r0, [r3, #0]
 801166c:	f7fe fd30 	bl	80100d0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8011670:	2000      	movs	r0, #0
 8011672:	e009      	b.n	8011688 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011674:	429a      	cmp	r2, r3
 8011676:	d201      	bcs.n	801167c <prvInsertTimerInActiveList+0x2c>
 8011678:	4299      	cmp	r1, r3
 801167a:	d206      	bcs.n	801168a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801167c:	1d01      	adds	r1, r0, #4
 801167e:	4b05      	ldr	r3, [pc, #20]	; (8011694 <prvInsertTimerInActiveList+0x44>)
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	f7fe fd25 	bl	80100d0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8011686:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8011688:	bd10      	pop	{r4, pc}
			xProcessTimerNow = pdTRUE;
 801168a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801168c:	e7fc      	b.n	8011688 <prvInsertTimerInActiveList+0x38>
 801168e:	46c0      	nop			; (mov r8, r8)
 8011690:	20002508 	.word	0x20002508
 8011694:	20002504 	.word	0x20002504

08011698 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011698:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801169a:	f000 fa1f 	bl	8011adc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801169e:	4b11      	ldr	r3, [pc, #68]	; (80116e4 <prvCheckForValidListAndQueue+0x4c>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d002      	beq.n	80116ac <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80116a6:	f000 fa25 	bl	8011af4 <vPortExitCritical>
}
 80116aa:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 80116ac:	4d0e      	ldr	r5, [pc, #56]	; (80116e8 <prvCheckForValidListAndQueue+0x50>)
 80116ae:	0028      	movs	r0, r5
 80116b0:	f7fe fcf4 	bl	801009c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80116b4:	4c0d      	ldr	r4, [pc, #52]	; (80116ec <prvCheckForValidListAndQueue+0x54>)
 80116b6:	0020      	movs	r0, r4
 80116b8:	f7fe fcf0 	bl	801009c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80116bc:	4b0c      	ldr	r3, [pc, #48]	; (80116f0 <prvCheckForValidListAndQueue+0x58>)
 80116be:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80116c0:	4b0c      	ldr	r3, [pc, #48]	; (80116f4 <prvCheckForValidListAndQueue+0x5c>)
 80116c2:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80116c4:	2200      	movs	r2, #0
 80116c6:	2110      	movs	r1, #16
 80116c8:	2004      	movs	r0, #4
 80116ca:	f7fe fe0c 	bl	80102e6 <xQueueGenericCreate>
 80116ce:	4b05      	ldr	r3, [pc, #20]	; (80116e4 <prvCheckForValidListAndQueue+0x4c>)
 80116d0:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 80116d2:	2800      	cmp	r0, #0
 80116d4:	d101      	bne.n	80116da <prvCheckForValidListAndQueue+0x42>
 80116d6:	b672      	cpsid	i
 80116d8:	e7fe      	b.n	80116d8 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80116da:	4907      	ldr	r1, [pc, #28]	; (80116f8 <prvCheckForValidListAndQueue+0x60>)
 80116dc:	f7ff f83a 	bl	8010754 <vQueueAddToRegistry>
 80116e0:	e7e1      	b.n	80116a6 <prvCheckForValidListAndQueue+0xe>
 80116e2:	46c0      	nop			; (mov r8, r8)
 80116e4:	20002538 	.word	0x20002538
 80116e8:	2000250c 	.word	0x2000250c
 80116ec:	20002520 	.word	0x20002520
 80116f0:	20002504 	.word	0x20002504
 80116f4:	20002508 	.word	0x20002508
 80116f8:	0801d4b0 	.word	0x0801d4b0

080116fc <xTimerCreateTimerTask>:
{
 80116fc:	b500      	push	{lr}
 80116fe:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 8011700:	f7ff ffca 	bl	8011698 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8011704:	4b0a      	ldr	r3, [pc, #40]	; (8011730 <xTimerCreateTimerTask+0x34>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d00d      	beq.n	8011728 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 801170c:	2300      	movs	r3, #0
 801170e:	9303      	str	r3, [sp, #12]
 8011710:	9302      	str	r3, [sp, #8]
 8011712:	9301      	str	r3, [sp, #4]
 8011714:	3303      	adds	r3, #3
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	2300      	movs	r3, #0
 801171a:	22a0      	movs	r2, #160	; 0xa0
 801171c:	4905      	ldr	r1, [pc, #20]	; (8011734 <xTimerCreateTimerTask+0x38>)
 801171e:	4806      	ldr	r0, [pc, #24]	; (8011738 <xTimerCreateTimerTask+0x3c>)
 8011720:	f7ff f97a 	bl	8010a18 <xTaskGenericCreate>
	configASSERT( xReturn );
 8011724:	2800      	cmp	r0, #0
 8011726:	d101      	bne.n	801172c <xTimerCreateTimerTask+0x30>
 8011728:	b672      	cpsid	i
 801172a:	e7fe      	b.n	801172a <xTimerCreateTimerTask+0x2e>
}
 801172c:	b005      	add	sp, #20
 801172e:	bd00      	pop	{pc}
 8011730:	20002538 	.word	0x20002538
 8011734:	0801d4b8 	.word	0x0801d4b8
 8011738:	080119e1 	.word	0x080119e1

0801173c <xTimerCreate>:
{
 801173c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801173e:	46c6      	mov	lr, r8
 8011740:	b500      	push	{lr}
 8011742:	4680      	mov	r8, r0
 8011744:	000d      	movs	r5, r1
 8011746:	0017      	movs	r7, r2
 8011748:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 801174a:	2900      	cmp	r1, #0
 801174c:	d014      	beq.n	8011778 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 801174e:	202c      	movs	r0, #44	; 0x2c
 8011750:	f000 fa78 	bl	8011c44 <pvPortMalloc>
 8011754:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 8011756:	d00b      	beq.n	8011770 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 8011758:	f7ff ff9e 	bl	8011698 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 801175c:	4643      	mov	r3, r8
 801175e:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011760:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8011762:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8011764:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011766:	9b06      	ldr	r3, [sp, #24]
 8011768:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801176a:	1d20      	adds	r0, r4, #4
 801176c:	f7fe fca1 	bl	80100b2 <vListInitialiseItem>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011770:	2d00      	cmp	r5, #0
 8011772:	d103      	bne.n	801177c <xTimerCreate+0x40>
 8011774:	b672      	cpsid	i
 8011776:	e7fe      	b.n	8011776 <xTimerCreate+0x3a>
		pxNewTimer = NULL;
 8011778:	2400      	movs	r4, #0
 801177a:	e7f9      	b.n	8011770 <xTimerCreate+0x34>
}
 801177c:	0020      	movs	r0, r4
 801177e:	bc04      	pop	{r2}
 8011780:	4690      	mov	r8, r2
 8011782:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011784 <xTimerGenericCommand>:
{
 8011784:	b530      	push	{r4, r5, lr}
 8011786:	b085      	sub	sp, #20
 8011788:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 801178a:	4b13      	ldr	r3, [pc, #76]	; (80117d8 <xTimerGenericCommand+0x54>)
 801178c:	681c      	ldr	r4, [r3, #0]
 801178e:	2c00      	cmp	r4, #0
 8011790:	d020      	beq.n	80117d4 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 8011792:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011794:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8011796:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011798:	2905      	cmp	r1, #5
 801179a:	dc13      	bgt.n	80117c4 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801179c:	f7ff fd56 	bl	801124c <xTaskGetSchedulerState>
 80117a0:	2802      	cmp	r0, #2
 80117a2:	d007      	beq.n	80117b4 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80117a4:	4b0c      	ldr	r3, [pc, #48]	; (80117d8 <xTimerGenericCommand+0x54>)
 80117a6:	6818      	ldr	r0, [r3, #0]
 80117a8:	2300      	movs	r3, #0
 80117aa:	2200      	movs	r2, #0
 80117ac:	4669      	mov	r1, sp
 80117ae:	f7fe fdd7 	bl	8010360 <xQueueGenericSend>
 80117b2:	e00d      	b.n	80117d0 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80117b4:	4b08      	ldr	r3, [pc, #32]	; (80117d8 <xTimerGenericCommand+0x54>)
 80117b6:	6818      	ldr	r0, [r3, #0]
 80117b8:	2300      	movs	r3, #0
 80117ba:	9a08      	ldr	r2, [sp, #32]
 80117bc:	4669      	mov	r1, sp
 80117be:	f7fe fdcf 	bl	8010360 <xQueueGenericSend>
 80117c2:	e005      	b.n	80117d0 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80117c4:	2300      	movs	r3, #0
 80117c6:	002a      	movs	r2, r5
 80117c8:	4669      	mov	r1, sp
 80117ca:	0020      	movs	r0, r4
 80117cc:	f7fe fe57 	bl	801047e <xQueueGenericSendFromISR>
}
 80117d0:	b005      	add	sp, #20
 80117d2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80117d4:	2000      	movs	r0, #0
	return xReturn;
 80117d6:	e7fb      	b.n	80117d0 <xTimerGenericCommand+0x4c>
 80117d8:	20002538 	.word	0x20002538

080117dc <prvSwitchTimerLists>:
{
 80117dc:	b570      	push	{r4, r5, r6, lr}
 80117de:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80117e0:	4b17      	ldr	r3, [pc, #92]	; (8011840 <prvSwitchTimerLists+0x64>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	2a00      	cmp	r2, #0
 80117e8:	d023      	beq.n	8011832 <prvSwitchTimerLists+0x56>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80117ea:	68db      	ldr	r3, [r3, #12]
 80117ec:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80117ee:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80117f0:	1d25      	adds	r5, r4, #4
 80117f2:	0028      	movs	r0, r5
 80117f4:	f7fe fc84 	bl	8010100 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80117f8:	0020      	movs	r0, r4
 80117fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117fc:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80117fe:	69e3      	ldr	r3, [r4, #28]
 8011800:	2b01      	cmp	r3, #1
 8011802:	d1ed      	bne.n	80117e0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011804:	69a3      	ldr	r3, [r4, #24]
 8011806:	199b      	adds	r3, r3, r6
			if( xReloadTime > xNextExpireTime )
 8011808:	429e      	cmp	r6, r3
 801180a:	d207      	bcs.n	801181c <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801180c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801180e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011810:	4b0b      	ldr	r3, [pc, #44]	; (8011840 <prvSwitchTimerLists+0x64>)
 8011812:	6818      	ldr	r0, [r3, #0]
 8011814:	0029      	movs	r1, r5
 8011816:	f7fe fc5b 	bl	80100d0 <vListInsert>
 801181a:	e7e1      	b.n	80117e0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801181c:	2300      	movs	r3, #0
 801181e:	9300      	str	r3, [sp, #0]
 8011820:	0032      	movs	r2, r6
 8011822:	2100      	movs	r1, #0
 8011824:	0020      	movs	r0, r4
 8011826:	f7ff ffad 	bl	8011784 <xTimerGenericCommand>
				configASSERT( xResult );
 801182a:	2800      	cmp	r0, #0
 801182c:	d1d8      	bne.n	80117e0 <prvSwitchTimerLists+0x4>
 801182e:	b672      	cpsid	i
 8011830:	e7fe      	b.n	8011830 <prvSwitchTimerLists+0x54>
	pxCurrentTimerList = pxOverflowTimerList;
 8011832:	4a04      	ldr	r2, [pc, #16]	; (8011844 <prvSwitchTimerLists+0x68>)
 8011834:	4902      	ldr	r1, [pc, #8]	; (8011840 <prvSwitchTimerLists+0x64>)
 8011836:	6810      	ldr	r0, [r2, #0]
 8011838:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801183a:	6013      	str	r3, [r2, #0]
}
 801183c:	b002      	add	sp, #8
 801183e:	bd70      	pop	{r4, r5, r6, pc}
 8011840:	20002504 	.word	0x20002504
 8011844:	20002508 	.word	0x20002508

08011848 <prvSampleTimeNow>:
{
 8011848:	b570      	push	{r4, r5, r6, lr}
 801184a:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
 801184c:	f7ff fa08 	bl	8010c60 <xTaskGetTickCount>
 8011850:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8011852:	4b07      	ldr	r3, [pc, #28]	; (8011870 <prvSampleTimeNow+0x28>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	4283      	cmp	r3, r0
 8011858:	d805      	bhi.n	8011866 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801185a:	2300      	movs	r3, #0
 801185c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801185e:	4b04      	ldr	r3, [pc, #16]	; (8011870 <prvSampleTimeNow+0x28>)
 8011860:	601c      	str	r4, [r3, #0]
}
 8011862:	0020      	movs	r0, r4
 8011864:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
 8011866:	f7ff ffb9 	bl	80117dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801186a:	2301      	movs	r3, #1
 801186c:	602b      	str	r3, [r5, #0]
 801186e:	e7f6      	b.n	801185e <prvSampleTimeNow+0x16>
 8011870:	20002534 	.word	0x20002534

08011874 <prvProcessExpiredTimer>:
{
 8011874:	b570      	push	{r4, r5, r6, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	0005      	movs	r5, r0
 801187a:	000e      	movs	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801187c:	4b11      	ldr	r3, [pc, #68]	; (80118c4 <prvProcessExpiredTimer+0x50>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	68db      	ldr	r3, [r3, #12]
 8011882:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011884:	1d20      	adds	r0, r4, #4
 8011886:	f7fe fc3b 	bl	8010100 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801188a:	69e3      	ldr	r3, [r4, #28]
 801188c:	2b01      	cmp	r3, #1
 801188e:	d004      	beq.n	801189a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011892:	0020      	movs	r0, r4
 8011894:	4798      	blx	r3
}
 8011896:	b002      	add	sp, #8
 8011898:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 801189a:	69a3      	ldr	r3, [r4, #24]
 801189c:	1959      	adds	r1, r3, r5
 801189e:	002b      	movs	r3, r5
 80118a0:	0032      	movs	r2, r6
 80118a2:	0020      	movs	r0, r4
 80118a4:	f7ff fed4 	bl	8011650 <prvInsertTimerInActiveList>
 80118a8:	2801      	cmp	r0, #1
 80118aa:	d1f1      	bne.n	8011890 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80118ac:	2300      	movs	r3, #0
 80118ae:	9300      	str	r3, [sp, #0]
 80118b0:	002a      	movs	r2, r5
 80118b2:	2100      	movs	r1, #0
 80118b4:	0020      	movs	r0, r4
 80118b6:	f7ff ff65 	bl	8011784 <xTimerGenericCommand>
			configASSERT( xResult );
 80118ba:	2800      	cmp	r0, #0
 80118bc:	d1e8      	bne.n	8011890 <prvProcessExpiredTimer+0x1c>
 80118be:	b672      	cpsid	i
 80118c0:	e7fe      	b.n	80118c0 <prvProcessExpiredTimer+0x4c>
 80118c2:	46c0      	nop			; (mov r8, r8)
 80118c4:	20002504 	.word	0x20002504

080118c8 <prvProcessTimerOrBlockTask>:
{
 80118c8:	b570      	push	{r4, r5, r6, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	0004      	movs	r4, r0
 80118ce:	000e      	movs	r6, r1
	vTaskSuspendAll();
 80118d0:	f7ff f9be 	bl	8010c50 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80118d4:	a801      	add	r0, sp, #4
 80118d6:	f7ff ffb7 	bl	8011848 <prvSampleTimeNow>
 80118da:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80118dc:	9b01      	ldr	r3, [sp, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d118      	bne.n	8011914 <prvProcessTimerOrBlockTask+0x4c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80118e2:	2e00      	cmp	r6, #0
 80118e4:	d101      	bne.n	80118ea <prvProcessTimerOrBlockTask+0x22>
 80118e6:	42a0      	cmp	r0, r4
 80118e8:	d20a      	bcs.n	8011900 <prvProcessTimerOrBlockTask+0x38>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80118ea:	1b61      	subs	r1, r4, r5
 80118ec:	4b0b      	ldr	r3, [pc, #44]	; (801191c <prvProcessTimerOrBlockTask+0x54>)
 80118ee:	6818      	ldr	r0, [r3, #0]
 80118f0:	f7fe ff42 	bl	8010778 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80118f4:	f7ff fa4a 	bl	8010d8c <xTaskResumeAll>
 80118f8:	2800      	cmp	r0, #0
 80118fa:	d008      	beq.n	801190e <prvProcessTimerOrBlockTask+0x46>
}
 80118fc:	b002      	add	sp, #8
 80118fe:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 8011900:	f7ff fa44 	bl	8010d8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011904:	0029      	movs	r1, r5
 8011906:	0020      	movs	r0, r4
 8011908:	f7ff ffb4 	bl	8011874 <prvProcessExpiredTimer>
 801190c:	e7f6      	b.n	80118fc <prvProcessTimerOrBlockTask+0x34>
					portYIELD_WITHIN_API();
 801190e:	f000 f8d9 	bl	8011ac4 <vPortYield>
 8011912:	e7f3      	b.n	80118fc <prvProcessTimerOrBlockTask+0x34>
			( void ) xTaskResumeAll();
 8011914:	f7ff fa3a 	bl	8010d8c <xTaskResumeAll>
}
 8011918:	e7f0      	b.n	80118fc <prvProcessTimerOrBlockTask+0x34>
 801191a:	46c0      	nop			; (mov r8, r8)
 801191c:	20002538 	.word	0x20002538

08011920 <prvProcessReceivedCommands>:
{
 8011920:	b510      	push	{r4, lr}
 8011922:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011924:	e002      	b.n	801192c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011926:	9b04      	ldr	r3, [sp, #16]
 8011928:	2b00      	cmp	r3, #0
 801192a:	da10      	bge.n	801194e <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801192c:	4b2a      	ldr	r3, [pc, #168]	; (80119d8 <prvProcessReceivedCommands+0xb8>)
 801192e:	6818      	ldr	r0, [r3, #0]
 8011930:	2300      	movs	r3, #0
 8011932:	2200      	movs	r2, #0
 8011934:	a904      	add	r1, sp, #16
 8011936:	f7fe fe2b 	bl	8010590 <xQueueGenericReceive>
 801193a:	2800      	cmp	r0, #0
 801193c:	d04a      	beq.n	80119d4 <prvProcessReceivedCommands+0xb4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801193e:	9b04      	ldr	r3, [sp, #16]
 8011940:	2b00      	cmp	r3, #0
 8011942:	daf0      	bge.n	8011926 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011944:	9b05      	ldr	r3, [sp, #20]
 8011946:	9907      	ldr	r1, [sp, #28]
 8011948:	9806      	ldr	r0, [sp, #24]
 801194a:	4798      	blx	r3
 801194c:	e7eb      	b.n	8011926 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801194e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8011950:	6963      	ldr	r3, [r4, #20]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d002      	beq.n	801195c <prvProcessReceivedCommands+0x3c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011956:	1d20      	adds	r0, r4, #4
 8011958:	f7fe fbd2 	bl	8010100 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801195c:	a803      	add	r0, sp, #12
 801195e:	f7ff ff73 	bl	8011848 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8011962:	9b04      	ldr	r3, [sp, #16]
 8011964:	2b09      	cmp	r3, #9
 8011966:	d8e1      	bhi.n	801192c <prvProcessReceivedCommands+0xc>
 8011968:	009b      	lsls	r3, r3, #2
 801196a:	491c      	ldr	r1, [pc, #112]	; (80119dc <prvProcessReceivedCommands+0xbc>)
 801196c:	58cb      	ldr	r3, [r1, r3]
 801196e:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8011970:	9b05      	ldr	r3, [sp, #20]
 8011972:	69a2      	ldr	r2, [r4, #24]
 8011974:	4694      	mov	ip, r2
 8011976:	4463      	add	r3, ip
 8011978:	0019      	movs	r1, r3
 801197a:	9b05      	ldr	r3, [sp, #20]
 801197c:	0002      	movs	r2, r0
 801197e:	0020      	movs	r0, r4
 8011980:	f7ff fe66 	bl	8011650 <prvInsertTimerInActiveList>
 8011984:	2801      	cmp	r0, #1
 8011986:	d1d1      	bne.n	801192c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011988:	0020      	movs	r0, r4
 801198a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801198c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801198e:	69e3      	ldr	r3, [r4, #28]
 8011990:	2b01      	cmp	r3, #1
 8011992:	d1cb      	bne.n	801192c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011994:	9b05      	ldr	r3, [sp, #20]
 8011996:	69a1      	ldr	r1, [r4, #24]
 8011998:	468c      	mov	ip, r1
 801199a:	4463      	add	r3, ip
 801199c:	001a      	movs	r2, r3
 801199e:	2300      	movs	r3, #0
 80119a0:	9300      	str	r3, [sp, #0]
 80119a2:	2100      	movs	r1, #0
 80119a4:	0020      	movs	r0, r4
 80119a6:	f7ff feed 	bl	8011784 <xTimerGenericCommand>
							configASSERT( xResult );
 80119aa:	2800      	cmp	r0, #0
 80119ac:	d1be      	bne.n	801192c <prvProcessReceivedCommands+0xc>
 80119ae:	b672      	cpsid	i
 80119b0:	e7fe      	b.n	80119b0 <prvProcessReceivedCommands+0x90>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80119b2:	9905      	ldr	r1, [sp, #20]
 80119b4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80119b6:	2900      	cmp	r1, #0
 80119b8:	d006      	beq.n	80119c8 <prvProcessReceivedCommands+0xa8>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80119ba:	1809      	adds	r1, r1, r0
 80119bc:	0003      	movs	r3, r0
 80119be:	0002      	movs	r2, r0
 80119c0:	0020      	movs	r0, r4
 80119c2:	f7ff fe45 	bl	8011650 <prvInsertTimerInActiveList>
					break;
 80119c6:	e7b1      	b.n	801192c <prvProcessReceivedCommands+0xc>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80119c8:	b672      	cpsid	i
 80119ca:	e7fe      	b.n	80119ca <prvProcessReceivedCommands+0xaa>
					vPortFree( pxTimer );
 80119cc:	0020      	movs	r0, r4
 80119ce:	f000 f9b1 	bl	8011d34 <vPortFree>
					break;
 80119d2:	e7ab      	b.n	801192c <prvProcessReceivedCommands+0xc>
}
 80119d4:	b008      	add	sp, #32
 80119d6:	bd10      	pop	{r4, pc}
 80119d8:	20002538 	.word	0x20002538
 80119dc:	0801d488 	.word	0x0801d488

080119e0 <prvTimerTask>:
{
 80119e0:	b500      	push	{lr}
 80119e2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80119e4:	a801      	add	r0, sp, #4
 80119e6:	f7ff fe23 	bl	8011630 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80119ea:	9901      	ldr	r1, [sp, #4]
 80119ec:	f7ff ff6c 	bl	80118c8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80119f0:	f7ff ff96 	bl	8011920 <prvProcessReceivedCommands>
 80119f4:	e7f6      	b.n	80119e4 <prvTimerTask+0x4>

080119f6 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80119f6:	b510      	push	{r4, lr}
 80119f8:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 80119fa:	d101      	bne.n	8011a00 <pvTimerGetTimerID+0xa>
 80119fc:	b672      	cpsid	i
 80119fe:	e7fe      	b.n	80119fe <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 8011a00:	f000 f86c 	bl	8011adc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011a04:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8011a06:	f000 f875 	bl	8011af4 <vPortExitCritical>

	return pvReturn;
}
 8011a0a:	0020      	movs	r0, r4
 8011a0c:	bd10      	pop	{r4, pc}
	...

08011a10 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011a10:	4b03      	ldr	r3, [pc, #12]	; (8011a20 <prvTaskExitError+0x10>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	3301      	adds	r3, #1
 8011a16:	d001      	beq.n	8011a1c <prvTaskExitError+0xc>
 8011a18:	b672      	cpsid	i
 8011a1a:	e7fe      	b.n	8011a1a <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8011a1c:	b672      	cpsid	i
 8011a1e:	e7fe      	b.n	8011a1e <prvTaskExitError+0xe>
 8011a20:	200000d4 	.word	0x200000d4

08011a24 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8011a24:	4a06      	ldr	r2, [pc, #24]	; (8011a40 <pxCurrentTCBConst2>)
 8011a26:	6813      	ldr	r3, [r2, #0]
 8011a28:	6818      	ldr	r0, [r3, #0]
 8011a2a:	3020      	adds	r0, #32
 8011a2c:	f380 8809 	msr	PSP, r0
 8011a30:	2002      	movs	r0, #2
 8011a32:	f380 8814 	msr	CONTROL, r0
 8011a36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8011a38:	46ae      	mov	lr, r5
 8011a3a:	b662      	cpsie	i
 8011a3c:	bd00      	pop	{pc}
 8011a3e:	46c0      	nop			; (mov r8, r8)

08011a40 <pxCurrentTCBConst2>:
 8011a40:	200023dc 	.word	0x200023dc

08011a44 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8011a44:	b510      	push	{r4, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a46:	4b06      	ldr	r3, [pc, #24]	; (8011a60 <prvSetupTimerInterrupt+0x1c>)
 8011a48:	6818      	ldr	r0, [r3, #0]
 8011a4a:	21fa      	movs	r1, #250	; 0xfa
 8011a4c:	0089      	lsls	r1, r1, #2
 8011a4e:	f7ee fb7f 	bl	8000150 <__udivsi3>
 8011a52:	3801      	subs	r0, #1
 8011a54:	4b03      	ldr	r3, [pc, #12]	; (8011a64 <prvSetupTimerInterrupt+0x20>)
 8011a56:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8011a58:	4b03      	ldr	r3, [pc, #12]	; (8011a68 <prvSetupTimerInterrupt+0x24>)
 8011a5a:	2207      	movs	r2, #7
 8011a5c:	601a      	str	r2, [r3, #0]
}
 8011a5e:	bd10      	pop	{r4, pc}
 8011a60:	200000c0 	.word	0x200000c0
 8011a64:	e000e014 	.word	0xe000e014
 8011a68:	e000e010 	.word	0xe000e010

08011a6c <pxPortInitialiseStack>:
{
 8011a6c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011a6e:	1f03      	subs	r3, r0, #4
 8011a70:	2480      	movs	r4, #128	; 0x80
 8011a72:	0464      	lsls	r4, r4, #17
 8011a74:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8011a76:	3b04      	subs	r3, #4
 8011a78:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011a7a:	3b04      	subs	r3, #4
 8011a7c:	4902      	ldr	r1, [pc, #8]	; (8011a88 <pxPortInitialiseStack+0x1c>)
 8011a7e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011a80:	3b14      	subs	r3, #20
 8011a82:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8011a84:	3840      	subs	r0, #64	; 0x40
}
 8011a86:	bd10      	pop	{r4, pc}
 8011a88:	08011a11 	.word	0x08011a11

08011a8c <SVC_Handler>:
}
 8011a8c:	4770      	bx	lr
	...

08011a90 <xPortStartScheduler>:
{
 8011a90:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8011a92:	4b0a      	ldr	r3, [pc, #40]	; (8011abc <xPortStartScheduler+0x2c>)
 8011a94:	6819      	ldr	r1, [r3, #0]
 8011a96:	22ff      	movs	r2, #255	; 0xff
 8011a98:	0412      	lsls	r2, r2, #16
 8011a9a:	430a      	orrs	r2, r1
 8011a9c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8011a9e:	6819      	ldr	r1, [r3, #0]
 8011aa0:	22ff      	movs	r2, #255	; 0xff
 8011aa2:	0612      	lsls	r2, r2, #24
 8011aa4:	430a      	orrs	r2, r1
 8011aa6:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 8011aa8:	f7ff ffcc 	bl	8011a44 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8011aac:	4b04      	ldr	r3, [pc, #16]	; (8011ac0 <xPortStartScheduler+0x30>)
 8011aae:	2200      	movs	r2, #0
 8011ab0:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8011ab2:	f7ff ffb7 	bl	8011a24 <vPortStartFirstTask>
	prvTaskExitError();
 8011ab6:	f7ff ffab 	bl	8011a10 <prvTaskExitError>
 8011aba:	46c0      	nop			; (mov r8, r8)
 8011abc:	e000ed20 	.word	0xe000ed20
 8011ac0:	200000d4 	.word	0x200000d4

08011ac4 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8011ac4:	4b04      	ldr	r3, [pc, #16]	; (8011ad8 <vPortYield+0x14>)
 8011ac6:	2280      	movs	r2, #128	; 0x80
 8011ac8:	0552      	lsls	r2, r2, #21
 8011aca:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8011acc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011ad0:	f3bf 8f6f 	isb	sy
}
 8011ad4:	4770      	bx	lr
 8011ad6:	46c0      	nop			; (mov r8, r8)
 8011ad8:	e000ed04 	.word	0xe000ed04

08011adc <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8011adc:	b672      	cpsid	i
    uxCriticalNesting++;
 8011ade:	4a04      	ldr	r2, [pc, #16]	; (8011af0 <vPortEnterCritical+0x14>)
 8011ae0:	6813      	ldr	r3, [r2, #0]
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8011ae6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011aea:	f3bf 8f6f 	isb	sy
}
 8011aee:	4770      	bx	lr
 8011af0:	200000d4 	.word	0x200000d4

08011af4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8011af4:	4b06      	ldr	r3, [pc, #24]	; (8011b10 <vPortExitCritical+0x1c>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d101      	bne.n	8011b00 <vPortExitCritical+0xc>
 8011afc:	b672      	cpsid	i
 8011afe:	e7fe      	b.n	8011afe <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8011b00:	3b01      	subs	r3, #1
 8011b02:	4a03      	ldr	r2, [pc, #12]	; (8011b10 <vPortExitCritical+0x1c>)
 8011b04:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d100      	bne.n	8011b0c <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 8011b0a:	b662      	cpsie	i
}
 8011b0c:	4770      	bx	lr
 8011b0e:	46c0      	nop			; (mov r8, r8)
 8011b10:	200000d4 	.word	0x200000d4

08011b14 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8011b14:	f3ef 8010 	mrs	r0, PRIMASK
 8011b18:	b672      	cpsid	i
 8011b1a:	4770      	bx	lr
}
 8011b1c:	2000      	movs	r0, #0

08011b1e <vClearInterruptMaskFromISR>:
	__asm volatile(
 8011b1e:	f380 8810 	msr	PRIMASK, r0
 8011b22:	4770      	bx	lr

08011b24 <PendSV_Handler>:
	__asm volatile
 8011b24:	f3ef 8009 	mrs	r0, PSP
 8011b28:	4b0e      	ldr	r3, [pc, #56]	; (8011b64 <pxCurrentTCBConst>)
 8011b2a:	681a      	ldr	r2, [r3, #0]
 8011b2c:	3820      	subs	r0, #32
 8011b2e:	6010      	str	r0, [r2, #0]
 8011b30:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011b32:	4644      	mov	r4, r8
 8011b34:	464d      	mov	r5, r9
 8011b36:	4656      	mov	r6, sl
 8011b38:	465f      	mov	r7, fp
 8011b3a:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011b3c:	b508      	push	{r3, lr}
 8011b3e:	b672      	cpsid	i
 8011b40:	f7ff fa40 	bl	8010fc4 <vTaskSwitchContext>
 8011b44:	b662      	cpsie	i
 8011b46:	bc0c      	pop	{r2, r3}
 8011b48:	6811      	ldr	r1, [r2, #0]
 8011b4a:	6808      	ldr	r0, [r1, #0]
 8011b4c:	3010      	adds	r0, #16
 8011b4e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011b50:	46a0      	mov	r8, r4
 8011b52:	46a9      	mov	r9, r5
 8011b54:	46b2      	mov	sl, r6
 8011b56:	46bb      	mov	fp, r7
 8011b58:	f380 8809 	msr	PSP, r0
 8011b5c:	3820      	subs	r0, #32
 8011b5e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011b60:	4718      	bx	r3
 8011b62:	46c0      	nop			; (mov r8, r8)

08011b64 <pxCurrentTCBConst>:
 8011b64:	200023dc 	.word	0x200023dc

08011b68 <xPortSysTickHandler>:
{
 8011b68:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8011b6a:	f7ff ffd3 	bl	8011b14 <ulSetInterruptMaskFromISR>
 8011b6e:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8011b70:	f7ff f882 	bl	8010c78 <xTaskIncrementTick>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	d003      	beq.n	8011b80 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8011b78:	4b03      	ldr	r3, [pc, #12]	; (8011b88 <xPortSysTickHandler+0x20>)
 8011b7a:	2280      	movs	r2, #128	; 0x80
 8011b7c:	0552      	lsls	r2, r2, #21
 8011b7e:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8011b80:	0020      	movs	r0, r4
 8011b82:	f7ff ffcc 	bl	8011b1e <vClearInterruptMaskFromISR>
}
 8011b86:	bd10      	pop	{r4, pc}
 8011b88:	e000ed04 	.word	0xe000ed04

08011b8c <prvHeapInit>:
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 8011b8c:	4a11      	ldr	r2, [pc, #68]	; (8011bd4 <prvHeapInit+0x48>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011b8e:	0753      	lsls	r3, r2, #29
 8011b90:	d01e      	beq.n	8011bd0 <prvHeapInit+0x44>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8011b92:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8011b94:	2307      	movs	r3, #7
 8011b96:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8011b98:	4b0f      	ldr	r3, [pc, #60]	; (8011bd8 <prvHeapInit+0x4c>)
 8011b9a:	1a5b      	subs	r3, r3, r1
 8011b9c:	189b      	adds	r3, r3, r2
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8011b9e:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ba0:	480e      	ldr	r0, [pc, #56]	; (8011bdc <prvHeapInit+0x50>)
 8011ba2:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011ba8:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 8011baa:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8011bac:	2007      	movs	r0, #7
 8011bae:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 8011bb0:	480b      	ldr	r0, [pc, #44]	; (8011be0 <prvHeapInit+0x54>)
 8011bb2:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8011bb4:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011bb6:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8011bb8:	1a99      	subs	r1, r3, r2
 8011bba:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011bbc:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011bbe:	4b09      	ldr	r3, [pc, #36]	; (8011be4 <prvHeapInit+0x58>)
 8011bc0:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011bc2:	4b09      	ldr	r3, [pc, #36]	; (8011be8 <prvHeapInit+0x5c>)
 8011bc4:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011bc6:	4b09      	ldr	r3, [pc, #36]	; (8011bec <prvHeapInit+0x60>)
 8011bc8:	2280      	movs	r2, #128	; 0x80
 8011bca:	0612      	lsls	r2, r2, #24
 8011bcc:	601a      	str	r2, [r3, #0]
}
 8011bce:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011bd0:	4b01      	ldr	r3, [pc, #4]	; (8011bd8 <prvHeapInit+0x4c>)
 8011bd2:	e7e5      	b.n	8011ba0 <prvHeapInit+0x14>
 8011bd4:	20002540 	.word	0x20002540
 8011bd8:	00004a38 	.word	0x00004a38
 8011bdc:	20006f84 	.word	0x20006f84
 8011be0:	2000253c 	.word	0x2000253c
 8011be4:	20006f80 	.word	0x20006f80
 8011be8:	20006f7c 	.word	0x20006f7c
 8011bec:	20006f78 	.word	0x20006f78

08011bf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011bf0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011bf2:	4b12      	ldr	r3, [pc, #72]	; (8011c3c <prvInsertBlockIntoFreeList+0x4c>)
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	4282      	cmp	r2, r0
 8011bf8:	d319      	bcc.n	8011c2e <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011bfa:	6859      	ldr	r1, [r3, #4]
 8011bfc:	185c      	adds	r4, r3, r1
 8011bfe:	4284      	cmp	r4, r0
 8011c00:	d103      	bne.n	8011c0a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011c02:	6840      	ldr	r0, [r0, #4]
 8011c04:	1809      	adds	r1, r1, r0
 8011c06:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011c08:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011c0a:	6841      	ldr	r1, [r0, #4]
 8011c0c:	1844      	adds	r4, r0, r1
 8011c0e:	42a2      	cmp	r2, r4
 8011c10:	d111      	bne.n	8011c36 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011c12:	4c0b      	ldr	r4, [pc, #44]	; (8011c40 <prvInsertBlockIntoFreeList+0x50>)
 8011c14:	6824      	ldr	r4, [r4, #0]
 8011c16:	42a2      	cmp	r2, r4
 8011c18:	d00b      	beq.n	8011c32 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011c1a:	6852      	ldr	r2, [r2, #4]
 8011c1c:	1889      	adds	r1, r1, r2
 8011c1e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011c20:	681a      	ldr	r2, [r3, #0]
 8011c22:	6812      	ldr	r2, [r2, #0]
 8011c24:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011c26:	4298      	cmp	r0, r3
 8011c28:	d000      	beq.n	8011c2c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011c2a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011c2c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c2e:	0013      	movs	r3, r2
 8011c30:	e7e0      	b.n	8011bf4 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011c32:	6004      	str	r4, [r0, #0]
 8011c34:	e7f7      	b.n	8011c26 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011c36:	6002      	str	r2, [r0, #0]
 8011c38:	e7f5      	b.n	8011c26 <prvInsertBlockIntoFreeList+0x36>
 8011c3a:	46c0      	nop			; (mov r8, r8)
 8011c3c:	20006f84 	.word	0x20006f84
 8011c40:	2000253c 	.word	0x2000253c

08011c44 <pvPortMalloc>:
{
 8011c44:	b570      	push	{r4, r5, r6, lr}
 8011c46:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8011c48:	f7ff f802 	bl	8010c50 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8011c4c:	4b34      	ldr	r3, [pc, #208]	; (8011d20 <pvPortMalloc+0xdc>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d00c      	beq.n	8011c6e <pvPortMalloc+0x2a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c54:	4b33      	ldr	r3, [pc, #204]	; (8011d24 <pvPortMalloc+0xe0>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	4223      	tst	r3, r4
 8011c5a:	d00b      	beq.n	8011c74 <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 8011c5c:	f7ff f896 	bl	8010d8c <xTaskResumeAll>
void *pvReturn = NULL;
 8011c60:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 8011c62:	f7fd fb93 	bl	800f38c <vApplicationMallocFailedHook>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c66:	0773      	lsls	r3, r6, #29
 8011c68:	d058      	beq.n	8011d1c <pvPortMalloc+0xd8>
 8011c6a:	b672      	cpsid	i
 8011c6c:	e7fe      	b.n	8011c6c <pvPortMalloc+0x28>
			prvHeapInit();
 8011c6e:	f7ff ff8d 	bl	8011b8c <prvHeapInit>
 8011c72:	e7ef      	b.n	8011c54 <pvPortMalloc+0x10>
			if( xWantedSize > 0 )
 8011c74:	2c00      	cmp	r4, #0
 8011c76:	d009      	beq.n	8011c8c <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8011c78:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c7a:	0763      	lsls	r3, r4, #29
 8011c7c:	d006      	beq.n	8011c8c <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011c7e:	2307      	movs	r3, #7
 8011c80:	439c      	bics	r4, r3
 8011c82:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c84:	421c      	tst	r4, r3
 8011c86:	d001      	beq.n	8011c8c <pvPortMalloc+0x48>
 8011c88:	b672      	cpsid	i
 8011c8a:	e7fe      	b.n	8011c8a <pvPortMalloc+0x46>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011c8c:	2c00      	cmp	r4, #0
 8011c8e:	d006      	beq.n	8011c9e <pvPortMalloc+0x5a>
 8011c90:	4b25      	ldr	r3, [pc, #148]	; (8011d28 <pvPortMalloc+0xe4>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	42a3      	cmp	r3, r4
 8011c96:	d306      	bcc.n	8011ca6 <pvPortMalloc+0x62>
				pxBlock = xStart.pxNextFreeBlock;
 8011c98:	4b24      	ldr	r3, [pc, #144]	; (8011d2c <pvPortMalloc+0xe8>)
 8011c9a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c9c:	e009      	b.n	8011cb2 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 8011c9e:	f7ff f875 	bl	8010d8c <xTaskResumeAll>
void *pvReturn = NULL;
 8011ca2:	2600      	movs	r6, #0
 8011ca4:	e7dd      	b.n	8011c62 <pvPortMalloc+0x1e>
	( void ) xTaskResumeAll();
 8011ca6:	f7ff f871 	bl	8010d8c <xTaskResumeAll>
void *pvReturn = NULL;
 8011caa:	2600      	movs	r6, #0
 8011cac:	e7d9      	b.n	8011c62 <pvPortMalloc+0x1e>
					pxPreviousBlock = pxBlock;
 8011cae:	002b      	movs	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8011cb0:	0015      	movs	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cb2:	686a      	ldr	r2, [r5, #4]
 8011cb4:	42a2      	cmp	r2, r4
 8011cb6:	d202      	bcs.n	8011cbe <pvPortMalloc+0x7a>
 8011cb8:	682a      	ldr	r2, [r5, #0]
 8011cba:	2a00      	cmp	r2, #0
 8011cbc:	d1f7      	bne.n	8011cae <pvPortMalloc+0x6a>
				if( pxBlock != pxEnd )
 8011cbe:	4a18      	ldr	r2, [pc, #96]	; (8011d20 <pvPortMalloc+0xdc>)
 8011cc0:	6812      	ldr	r2, [r2, #0]
 8011cc2:	42aa      	cmp	r2, r5
 8011cc4:	d00c      	beq.n	8011ce0 <pvPortMalloc+0x9c>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011cc6:	681e      	ldr	r6, [r3, #0]
 8011cc8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011cca:	682a      	ldr	r2, [r5, #0]
 8011ccc:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011cce:	686b      	ldr	r3, [r5, #4]
 8011cd0:	1b1b      	subs	r3, r3, r4
 8011cd2:	2b10      	cmp	r3, #16
 8011cd4:	d90c      	bls.n	8011cf0 <pvPortMalloc+0xac>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011cd6:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011cd8:	0742      	lsls	r2, r0, #29
 8011cda:	d005      	beq.n	8011ce8 <pvPortMalloc+0xa4>
 8011cdc:	b672      	cpsid	i
 8011cde:	e7fe      	b.n	8011cde <pvPortMalloc+0x9a>
	( void ) xTaskResumeAll();
 8011ce0:	f7ff f854 	bl	8010d8c <xTaskResumeAll>
void *pvReturn = NULL;
 8011ce4:	2600      	movs	r6, #0
 8011ce6:	e7bc      	b.n	8011c62 <pvPortMalloc+0x1e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011ce8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011cea:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8011cec:	f7ff ff80 	bl	8011bf0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011cf0:	686a      	ldr	r2, [r5, #4]
 8011cf2:	490d      	ldr	r1, [pc, #52]	; (8011d28 <pvPortMalloc+0xe4>)
 8011cf4:	680b      	ldr	r3, [r1, #0]
 8011cf6:	1a9b      	subs	r3, r3, r2
 8011cf8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011cfa:	490d      	ldr	r1, [pc, #52]	; (8011d30 <pvPortMalloc+0xec>)
 8011cfc:	6809      	ldr	r1, [r1, #0]
 8011cfe:	428b      	cmp	r3, r1
 8011d00:	d201      	bcs.n	8011d06 <pvPortMalloc+0xc2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011d02:	490b      	ldr	r1, [pc, #44]	; (8011d30 <pvPortMalloc+0xec>)
 8011d04:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011d06:	4b07      	ldr	r3, [pc, #28]	; (8011d24 <pvPortMalloc+0xe0>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	4313      	orrs	r3, r2
 8011d0c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8011d12:	f7ff f83b 	bl	8010d8c <xTaskResumeAll>
		if( pvReturn == NULL )
 8011d16:	2e00      	cmp	r6, #0
 8011d18:	d1a5      	bne.n	8011c66 <pvPortMalloc+0x22>
 8011d1a:	e7a2      	b.n	8011c62 <pvPortMalloc+0x1e>
}
 8011d1c:	0030      	movs	r0, r6
 8011d1e:	bd70      	pop	{r4, r5, r6, pc}
 8011d20:	2000253c 	.word	0x2000253c
 8011d24:	20006f78 	.word	0x20006f78
 8011d28:	20006f7c 	.word	0x20006f7c
 8011d2c:	20006f84 	.word	0x20006f84
 8011d30:	20006f80 	.word	0x20006f80

08011d34 <vPortFree>:
{
 8011d34:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 8011d36:	2800      	cmp	r0, #0
 8011d38:	d020      	beq.n	8011d7c <vPortFree+0x48>
		puc -= xHeapStructSize;
 8011d3a:	0005      	movs	r5, r0
 8011d3c:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011d3e:	686b      	ldr	r3, [r5, #4]
 8011d40:	4a0f      	ldr	r2, [pc, #60]	; (8011d80 <vPortFree+0x4c>)
 8011d42:	6812      	ldr	r2, [r2, #0]
 8011d44:	421a      	tst	r2, r3
 8011d46:	d101      	bne.n	8011d4c <vPortFree+0x18>
 8011d48:	b672      	cpsid	i
 8011d4a:	e7fe      	b.n	8011d4a <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011d4c:	0001      	movs	r1, r0
 8011d4e:	3908      	subs	r1, #8
 8011d50:	6809      	ldr	r1, [r1, #0]
 8011d52:	2900      	cmp	r1, #0
 8011d54:	d001      	beq.n	8011d5a <vPortFree+0x26>
 8011d56:	b672      	cpsid	i
 8011d58:	e7fe      	b.n	8011d58 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011d5a:	3808      	subs	r0, #8
 8011d5c:	0004      	movs	r4, r0
 8011d5e:	4393      	bics	r3, r2
 8011d60:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8011d62:	f7fe ff75 	bl	8010c50 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011d66:	6863      	ldr	r3, [r4, #4]
 8011d68:	4a06      	ldr	r2, [pc, #24]	; (8011d84 <vPortFree+0x50>)
 8011d6a:	6811      	ldr	r1, [r2, #0]
 8011d6c:	468c      	mov	ip, r1
 8011d6e:	4463      	add	r3, ip
 8011d70:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011d72:	0028      	movs	r0, r5
 8011d74:	f7ff ff3c 	bl	8011bf0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8011d78:	f7ff f808 	bl	8010d8c <xTaskResumeAll>
}
 8011d7c:	bd70      	pop	{r4, r5, r6, pc}
 8011d7e:	46c0      	nop			; (mov r8, r8)
 8011d80:	20006f78 	.word	0x20006f78
 8011d84:	20006f7c 	.word	0x20006f7c

08011d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011d88:	b510      	push	{r4, lr}
 8011d8a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8011d8c:	f002 f85c 	bl	8013e48 <HAL_RCC_GetHCLKFreq>
 8011d90:	21fa      	movs	r1, #250	; 0xfa
 8011d92:	0089      	lsls	r1, r1, #2
 8011d94:	f7ee f9dc 	bl	8000150 <__udivsi3>
 8011d98:	f000 fba8 	bl	80124ec <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8011d9c:	2001      	movs	r0, #1
 8011d9e:	2200      	movs	r2, #0
 8011da0:	0021      	movs	r1, r4
 8011da2:	4240      	negs	r0, r0
 8011da4:	f000 fb5e 	bl	8012464 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8011da8:	2000      	movs	r0, #0
 8011daa:	bd10      	pop	{r4, pc}

08011dac <HAL_Init>:
{
 8011dac:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011dae:	4a06      	ldr	r2, [pc, #24]	; (8011dc8 <HAL_Init+0x1c>)
 8011db0:	6813      	ldr	r3, [r2, #0]
 8011db2:	2110      	movs	r1, #16
 8011db4:	430b      	orrs	r3, r1
 8011db6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8011db8:	2000      	movs	r0, #0
 8011dba:	f7ff ffe5 	bl	8011d88 <HAL_InitTick>
  HAL_MspInit();
 8011dbe:	f001 fc24 	bl	801360a <HAL_MspInit>
}
 8011dc2:	2000      	movs	r0, #0
 8011dc4:	bd10      	pop	{r4, pc}
 8011dc6:	46c0      	nop			; (mov r8, r8)
 8011dc8:	40022000 	.word	0x40022000

08011dcc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8011dcc:	4a02      	ldr	r2, [pc, #8]	; (8011dd8 <HAL_IncTick+0xc>)
 8011dce:	6813      	ldr	r3, [r2, #0]
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	6013      	str	r3, [r2, #0]
}
 8011dd4:	4770      	bx	lr
 8011dd6:	46c0      	nop			; (mov r8, r8)
 8011dd8:	20006f8c 	.word	0x20006f8c

08011ddc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8011ddc:	4b01      	ldr	r3, [pc, #4]	; (8011de4 <HAL_GetTick+0x8>)
 8011dde:	6818      	ldr	r0, [r3, #0]
}
 8011de0:	4770      	bx	lr
 8011de2:	46c0      	nop			; (mov r8, r8)
 8011de4:	20006f8c 	.word	0x20006f8c

08011de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8011de8:	b510      	push	{r4, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8011dee:	f7ff fff5 	bl	8011ddc <HAL_GetTick>
 8011df2:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8011df4:	f7ff fff2 	bl	8011ddc <HAL_GetTick>
 8011df8:	1b00      	subs	r0, r0, r4
 8011dfa:	9b01      	ldr	r3, [sp, #4]
 8011dfc:	4298      	cmp	r0, r3
 8011dfe:	d3f9      	bcc.n	8011df4 <HAL_Delay+0xc>
  {
  }
}
 8011e00:	b002      	add	sp, #8
 8011e02:	bd10      	pop	{r4, pc}

08011e04 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8011e04:	4b01      	ldr	r3, [pc, #4]	; (8011e0c <HAL_GetREVID+0x8>)
 8011e06:	6818      	ldr	r0, [r3, #0]
 8011e08:	0c00      	lsrs	r0, r0, #16
}
 8011e0a:	4770      	bx	lr
 8011e0c:	40015800 	.word	0x40015800

08011e10 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8011e10:	4b02      	ldr	r3, [pc, #8]	; (8011e1c <HAL_GetDEVID+0xc>)
 8011e12:	6818      	ldr	r0, [r3, #0]
 8011e14:	0500      	lsls	r0, r0, #20
 8011e16:	0d00      	lsrs	r0, r0, #20
}
 8011e18:	4770      	bx	lr
 8011e1a:	46c0      	nop			; (mov r8, r8)
 8011e1c:	40015800 	.word	0x40015800

08011e20 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8011e20:	b570      	push	{r4, r5, r6, lr}
 8011e22:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8011e24:	6803      	ldr	r3, [r0, #0]
 8011e26:	689a      	ldr	r2, [r3, #8]
 8011e28:	0752      	lsls	r2, r2, #29
 8011e2a:	d521      	bpl.n	8011e70 <ADC_ConversionStop+0x50>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8011e2c:	689a      	ldr	r2, [r3, #8]
 8011e2e:	0752      	lsls	r2, r2, #29
 8011e30:	d506      	bpl.n	8011e40 <ADC_ConversionStop+0x20>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8011e32:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8011e34:	0792      	lsls	r2, r2, #30
 8011e36:	d403      	bmi.n	8011e40 <ADC_ConversionStop+0x20>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8011e38:	689a      	ldr	r2, [r3, #8]
 8011e3a:	2110      	movs	r1, #16
 8011e3c:	430a      	orrs	r2, r1
 8011e3e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8011e40:	f7ff ffcc 	bl	8011ddc <HAL_GetTick>
 8011e44:	0005      	movs	r5, r0
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8011e46:	6823      	ldr	r3, [r4, #0]
 8011e48:	689b      	ldr	r3, [r3, #8]
 8011e4a:	075b      	lsls	r3, r3, #29
 8011e4c:	d50e      	bpl.n	8011e6c <ADC_ConversionStop+0x4c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8011e4e:	f7ff ffc5 	bl	8011ddc <HAL_GetTick>
 8011e52:	1b40      	subs	r0, r0, r5
 8011e54:	2802      	cmp	r0, #2
 8011e56:	d9f6      	bls.n	8011e46 <ADC_ConversionStop+0x26>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011e58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011e5a:	2210      	movs	r2, #16
 8011e5c:	4313      	orrs	r3, r2
 8011e5e:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011e60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011e62:	3a0f      	subs	r2, #15
 8011e64:	4313      	orrs	r3, r2
 8011e66:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8011e68:	2001      	movs	r0, #1
 8011e6a:	e002      	b.n	8011e72 <ADC_ConversionStop+0x52>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8011e6c:	2000      	movs	r0, #0
 8011e6e:	e000      	b.n	8011e72 <ADC_ConversionStop+0x52>
 8011e70:	2000      	movs	r0, #0
}
 8011e72:	bd70      	pop	{r4, r5, r6, pc}

08011e74 <ADC_Disable>:
{
 8011e74:	b570      	push	{r4, r5, r6, lr}
 8011e76:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8011e78:	6802      	ldr	r2, [r0, #0]
 8011e7a:	6891      	ldr	r1, [r2, #8]
 8011e7c:	2303      	movs	r3, #3
 8011e7e:	400b      	ands	r3, r1
 8011e80:	2b01      	cmp	r3, #1
 8011e82:	d001      	beq.n	8011e88 <ADC_Disable+0x14>
  return HAL_OK;
 8011e84:	2000      	movs	r0, #0
}
 8011e86:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8011e88:	6813      	ldr	r3, [r2, #0]
 8011e8a:	07db      	lsls	r3, r3, #31
 8011e8c:	d402      	bmi.n	8011e94 <ADC_Disable+0x20>
 8011e8e:	68d3      	ldr	r3, [r2, #12]
 8011e90:	041b      	lsls	r3, r3, #16
 8011e92:	d52d      	bpl.n	8011ef0 <ADC_Disable+0x7c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8011e94:	6891      	ldr	r1, [r2, #8]
 8011e96:	2305      	movs	r3, #5
 8011e98:	400b      	ands	r3, r1
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	d009      	beq.n	8011eb2 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011e9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011ea0:	2210      	movs	r2, #16
 8011ea2:	4313      	orrs	r3, r2
 8011ea4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011ea6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011ea8:	3a0f      	subs	r2, #15
 8011eaa:	4313      	orrs	r3, r2
 8011eac:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8011eae:	2001      	movs	r0, #1
 8011eb0:	e7e9      	b.n	8011e86 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 8011eb2:	6893      	ldr	r3, [r2, #8]
 8011eb4:	2102      	movs	r1, #2
 8011eb6:	430b      	orrs	r3, r1
 8011eb8:	6093      	str	r3, [r2, #8]
 8011eba:	6823      	ldr	r3, [r4, #0]
 8011ebc:	2203      	movs	r2, #3
 8011ebe:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8011ec0:	f7ff ff8c 	bl	8011ddc <HAL_GetTick>
 8011ec4:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8011ec6:	6823      	ldr	r3, [r4, #0]
 8011ec8:	689b      	ldr	r3, [r3, #8]
 8011eca:	07db      	lsls	r3, r3, #31
 8011ecc:	d50e      	bpl.n	8011eec <ADC_Disable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8011ece:	f7ff ff85 	bl	8011ddc <HAL_GetTick>
 8011ed2:	1b40      	subs	r0, r0, r5
 8011ed4:	2802      	cmp	r0, #2
 8011ed6:	d9f6      	bls.n	8011ec6 <ADC_Disable+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011ed8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011eda:	2210      	movs	r2, #16
 8011edc:	4313      	orrs	r3, r2
 8011ede:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011ee0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011ee2:	3a0f      	subs	r2, #15
 8011ee4:	4313      	orrs	r3, r2
 8011ee6:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8011ee8:	2001      	movs	r0, #1
 8011eea:	e7cc      	b.n	8011e86 <ADC_Disable+0x12>
  return HAL_OK;
 8011eec:	2000      	movs	r0, #0
 8011eee:	e7ca      	b.n	8011e86 <ADC_Disable+0x12>
 8011ef0:	2000      	movs	r0, #0
 8011ef2:	e7c8      	b.n	8011e86 <ADC_Disable+0x12>

08011ef4 <ADC_Enable>:
{
 8011ef4:	b530      	push	{r4, r5, lr}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8011efa:	2300      	movs	r3, #0
 8011efc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8011efe:	6803      	ldr	r3, [r0, #0]
 8011f00:	6899      	ldr	r1, [r3, #8]
 8011f02:	2203      	movs	r2, #3
 8011f04:	400a      	ands	r2, r1
 8011f06:	2a01      	cmp	r2, #1
 8011f08:	d00e      	beq.n	8011f28 <ADC_Enable+0x34>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8011f0a:	6899      	ldr	r1, [r3, #8]
 8011f0c:	4a20      	ldr	r2, [pc, #128]	; (8011f90 <ADC_Enable+0x9c>)
 8011f0e:	4211      	tst	r1, r2
 8011f10:	d112      	bne.n	8011f38 <ADC_Enable+0x44>
    __HAL_ADC_ENABLE(hadc);
 8011f12:	689a      	ldr	r2, [r3, #8]
 8011f14:	2101      	movs	r1, #1
 8011f16:	430a      	orrs	r2, r1
 8011f18:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8011f1a:	4b1e      	ldr	r3, [pc, #120]	; (8011f94 <ADC_Enable+0xa0>)
 8011f1c:	6818      	ldr	r0, [r3, #0]
 8011f1e:	491e      	ldr	r1, [pc, #120]	; (8011f98 <ADC_Enable+0xa4>)
 8011f20:	f7ee f916 	bl	8000150 <__udivsi3>
 8011f24:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8011f26:	e015      	b.n	8011f54 <ADC_Enable+0x60>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8011f28:	681a      	ldr	r2, [r3, #0]
 8011f2a:	07d2      	lsls	r2, r2, #31
 8011f2c:	d42d      	bmi.n	8011f8a <ADC_Enable+0x96>
 8011f2e:	68da      	ldr	r2, [r3, #12]
 8011f30:	0412      	lsls	r2, r2, #16
 8011f32:	d5ea      	bpl.n	8011f0a <ADC_Enable+0x16>
  return HAL_OK;
 8011f34:	2000      	movs	r0, #0
 8011f36:	e008      	b.n	8011f4a <ADC_Enable+0x56>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011f38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011f3a:	2210      	movs	r2, #16
 8011f3c:	4313      	orrs	r3, r2
 8011f3e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011f40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011f42:	3a0f      	subs	r2, #15
 8011f44:	4313      	orrs	r3, r2
 8011f46:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8011f48:	2001      	movs	r0, #1
}
 8011f4a:	b003      	add	sp, #12
 8011f4c:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8011f4e:	9b01      	ldr	r3, [sp, #4]
 8011f50:	3b01      	subs	r3, #1
 8011f52:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8011f54:	9b01      	ldr	r3, [sp, #4]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d1f9      	bne.n	8011f4e <ADC_Enable+0x5a>
    tickstart = HAL_GetTick();
 8011f5a:	f7ff ff3f 	bl	8011ddc <HAL_GetTick>
 8011f5e:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011f60:	6823      	ldr	r3, [r4, #0]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	07db      	lsls	r3, r3, #31
 8011f66:	d40e      	bmi.n	8011f86 <ADC_Enable+0x92>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8011f68:	f7ff ff38 	bl	8011ddc <HAL_GetTick>
 8011f6c:	1b40      	subs	r0, r0, r5
 8011f6e:	2802      	cmp	r0, #2
 8011f70:	d9f6      	bls.n	8011f60 <ADC_Enable+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011f72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011f74:	2210      	movs	r2, #16
 8011f76:	4313      	orrs	r3, r2
 8011f78:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011f7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011f7c:	3a0f      	subs	r2, #15
 8011f7e:	4313      	orrs	r3, r2
 8011f80:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8011f82:	2001      	movs	r0, #1
 8011f84:	e7e1      	b.n	8011f4a <ADC_Enable+0x56>
  return HAL_OK;
 8011f86:	2000      	movs	r0, #0
 8011f88:	e7df      	b.n	8011f4a <ADC_Enable+0x56>
 8011f8a:	2000      	movs	r0, #0
 8011f8c:	e7dd      	b.n	8011f4a <ADC_Enable+0x56>
 8011f8e:	46c0      	nop			; (mov r8, r8)
 8011f90:	80000017 	.word	0x80000017
 8011f94:	200000c0 	.word	0x200000c0
 8011f98:	000f4240 	.word	0x000f4240

08011f9c <HAL_ADC_MspInit>:
}
 8011f9c:	4770      	bx	lr
	...

08011fa0 <HAL_ADC_Init>:
{
 8011fa0:	b570      	push	{r4, r5, r6, lr}
 8011fa2:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8011fa4:	d100      	bne.n	8011fa8 <HAL_ADC_Init+0x8>
 8011fa6:	e0a7      	b.n	80120f8 <HAL_ADC_Init+0x158>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8011fa8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d07d      	beq.n	80120aa <HAL_ADC_Init+0x10a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8011fae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011fb0:	06db      	lsls	r3, r3, #27
 8011fb2:	d500      	bpl.n	8011fb6 <HAL_ADC_Init+0x16>
 8011fb4:	e09a      	b.n	80120ec <HAL_ADC_Init+0x14c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8011fb6:	6821      	ldr	r1, [r4, #0]
 8011fb8:	688b      	ldr	r3, [r1, #8]
 8011fba:	2204      	movs	r2, #4
 8011fbc:	401a      	ands	r2, r3
      (tmp_hal_status == HAL_OK)                                &&
 8011fbe:	d000      	beq.n	8011fc2 <HAL_ADC_Init+0x22>
 8011fc0:	e094      	b.n	80120ec <HAL_ADC_Init+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 8011fc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011fc4:	484d      	ldr	r0, [pc, #308]	; (80120fc <HAL_ADC_Init+0x15c>)
 8011fc6:	4003      	ands	r3, r0
 8011fc8:	3006      	adds	r0, #6
 8011fca:	30ff      	adds	r0, #255	; 0xff
 8011fcc:	4303      	orrs	r3, r0
 8011fce:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8011fd0:	6888      	ldr	r0, [r1, #8]
 8011fd2:	2303      	movs	r3, #3
 8011fd4:	4003      	ands	r3, r0
 8011fd6:	2b01      	cmp	r3, #1
 8011fd8:	d06d      	beq.n	80120b6 <HAL_ADC_Init+0x116>
      MODIFY_REG(hadc->Instance->CFGR1,
 8011fda:	68cb      	ldr	r3, [r1, #12]
 8011fdc:	2018      	movs	r0, #24
 8011fde:	4383      	bics	r3, r0
 8011fe0:	68a0      	ldr	r0, [r4, #8]
 8011fe2:	4303      	orrs	r3, r0
 8011fe4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8011fe6:	6821      	ldr	r1, [r4, #0]
 8011fe8:	690b      	ldr	r3, [r1, #16]
 8011fea:	009b      	lsls	r3, r3, #2
 8011fec:	089b      	lsrs	r3, r3, #2
 8011fee:	6860      	ldr	r0, [r4, #4]
 8011ff0:	4303      	orrs	r3, r0
 8011ff2:	610b      	str	r3, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8011ff4:	6821      	ldr	r1, [r4, #0]
 8011ff6:	68cb      	ldr	r3, [r1, #12]
 8011ff8:	4841      	ldr	r0, [pc, #260]	; (8012100 <HAL_ADC_Init+0x160>)
 8011ffa:	4003      	ands	r3, r0
 8011ffc:	60cb      	str	r3, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8011ffe:	69a3      	ldr	r3, [r4, #24]
 8012000:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8012002:	69e1      	ldr	r1, [r4, #28]
 8012004:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8012006:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8012008:	6a21      	ldr	r1, [r4, #32]
 801200a:	0348      	lsls	r0, r1, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 801200c:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 801200e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012010:	2801      	cmp	r0, #1
 8012012:	d057      	beq.n	80120c4 <HAL_ADC_Init+0x124>
 8012014:	2080      	movs	r0, #128	; 0x80
 8012016:	0140      	lsls	r0, r0, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8012018:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 801201a:	68e0      	ldr	r0, [r4, #12]
 801201c:	4303      	orrs	r3, r0
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801201e:	6920      	ldr	r0, [r4, #16]
 8012020:	2802      	cmp	r0, #2
 8012022:	d051      	beq.n	80120c8 <HAL_ADC_Init+0x128>
                 hadc->Init.DataAlign                                   |
 8012024:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8012026:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012028:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801202a:	4313      	orrs	r3, r2
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 801202c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801202e:	2a01      	cmp	r2, #1
 8012030:	d04c      	beq.n	80120cc <HAL_ADC_Init+0x12c>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012032:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012034:	21c2      	movs	r1, #194	; 0xc2
 8012036:	31ff      	adds	r1, #255	; 0xff
 8012038:	428a      	cmp	r2, r1
 801203a:	d002      	beq.n	8012042 <HAL_ADC_Init+0xa2>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 801203c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801203e:	430a      	orrs	r2, r1
 8012040:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8012042:	6821      	ldr	r1, [r4, #0]
 8012044:	68ca      	ldr	r2, [r1, #12]
 8012046:	431a      	orrs	r2, r3
 8012048:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 801204a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801204c:	2180      	movs	r1, #128	; 0x80
 801204e:	0549      	lsls	r1, r1, #21
 8012050:	428a      	cmp	r2, r1
 8012052:	d00d      	beq.n	8012070 <HAL_ADC_Init+0xd0>
 8012054:	2a01      	cmp	r2, #1
 8012056:	d00b      	beq.n	8012070 <HAL_ADC_Init+0xd0>
 8012058:	2a02      	cmp	r2, #2
 801205a:	d009      	beq.n	8012070 <HAL_ADC_Init+0xd0>
 801205c:	2a03      	cmp	r2, #3
 801205e:	d007      	beq.n	8012070 <HAL_ADC_Init+0xd0>
 8012060:	2a04      	cmp	r2, #4
 8012062:	d005      	beq.n	8012070 <HAL_ADC_Init+0xd0>
 8012064:	2a05      	cmp	r2, #5
 8012066:	d003      	beq.n	8012070 <HAL_ADC_Init+0xd0>
 8012068:	2a06      	cmp	r2, #6
 801206a:	d001      	beq.n	8012070 <HAL_ADC_Init+0xd0>
 801206c:	2a07      	cmp	r2, #7
 801206e:	d10a      	bne.n	8012086 <HAL_ADC_Init+0xe6>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8012070:	6820      	ldr	r0, [r4, #0]
 8012072:	6941      	ldr	r1, [r0, #20]
 8012074:	2207      	movs	r2, #7
 8012076:	4391      	bics	r1, r2
 8012078:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 801207a:	6820      	ldr	r0, [r4, #0]
 801207c:	6941      	ldr	r1, [r0, #20]
 801207e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8012080:	402a      	ands	r2, r5
 8012082:	430a      	orrs	r2, r1
 8012084:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8012086:	6822      	ldr	r2, [r4, #0]
 8012088:	68d2      	ldr	r2, [r2, #12]
 801208a:	491e      	ldr	r1, [pc, #120]	; (8012104 <HAL_ADC_Init+0x164>)
 801208c:	400a      	ands	r2, r1
 801208e:	429a      	cmp	r2, r3
 8012090:	d022      	beq.n	80120d8 <HAL_ADC_Init+0x138>
      ADC_STATE_CLR_SET(hadc->State,
 8012092:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012094:	2212      	movs	r2, #18
 8012096:	4393      	bics	r3, r2
 8012098:	3a02      	subs	r2, #2
 801209a:	4313      	orrs	r3, r2
 801209c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801209e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80120a0:	3a0f      	subs	r2, #15
 80120a2:	4313      	orrs	r3, r2
 80120a4:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80120a6:	2001      	movs	r0, #1
 80120a8:	e025      	b.n	80120f6 <HAL_ADC_Init+0x156>
    ADC_CLEAR_ERRORCODE(hadc);
 80120aa:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80120ac:	2240      	movs	r2, #64	; 0x40
 80120ae:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80120b0:	f7ff ff74 	bl	8011f9c <HAL_ADC_MspInit>
 80120b4:	e77b      	b.n	8011fae <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80120b6:	680b      	ldr	r3, [r1, #0]
 80120b8:	07db      	lsls	r3, r3, #31
 80120ba:	d49b      	bmi.n	8011ff4 <HAL_ADC_Init+0x54>
 80120bc:	68cb      	ldr	r3, [r1, #12]
 80120be:	041b      	lsls	r3, r3, #16
 80120c0:	d498      	bmi.n	8011ff4 <HAL_ADC_Init+0x54>
 80120c2:	e78a      	b.n	8011fda <HAL_ADC_Init+0x3a>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80120c4:	0010      	movs	r0, r2
 80120c6:	e7a7      	b.n	8012018 <HAL_ADC_Init+0x78>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80120c8:	2204      	movs	r2, #4
 80120ca:	e7ab      	b.n	8012024 <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80120cc:	2900      	cmp	r1, #0
 80120ce:	d1b0      	bne.n	8012032 <HAL_ADC_Init+0x92>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80120d0:	2280      	movs	r2, #128	; 0x80
 80120d2:	0252      	lsls	r2, r2, #9
 80120d4:	4313      	orrs	r3, r2
 80120d6:	e7ac      	b.n	8012032 <HAL_ADC_Init+0x92>
      ADC_CLEAR_ERRORCODE(hadc);
 80120d8:	2300      	movs	r3, #0
 80120da:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80120dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80120de:	2203      	movs	r2, #3
 80120e0:	4393      	bics	r3, r2
 80120e2:	3a02      	subs	r2, #2
 80120e4:	4313      	orrs	r3, r2
 80120e6:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80120e8:	2000      	movs	r0, #0
 80120ea:	e004      	b.n	80120f6 <HAL_ADC_Init+0x156>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80120ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80120ee:	2210      	movs	r2, #16
 80120f0:	4313      	orrs	r3, r2
 80120f2:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80120f4:	2001      	movs	r0, #1
}
 80120f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80120f8:	2001      	movs	r0, #1
 80120fa:	e7fc      	b.n	80120f6 <HAL_ADC_Init+0x156>
 80120fc:	fffffefd 	.word	0xfffffefd
 8012100:	fffe0219 	.word	0xfffe0219
 8012104:	833fffe7 	.word	0x833fffe7

08012108 <HAL_ADC_Start>:
{
 8012108:	b510      	push	{r4, lr}
 801210a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801210c:	6803      	ldr	r3, [r0, #0]
 801210e:	689b      	ldr	r3, [r3, #8]
 8012110:	075b      	lsls	r3, r3, #29
 8012112:	d423      	bmi.n	801215c <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8012114:	2340      	movs	r3, #64	; 0x40
 8012116:	5cc3      	ldrb	r3, [r0, r3]
 8012118:	2b01      	cmp	r3, #1
 801211a:	d021      	beq.n	8012160 <HAL_ADC_Start+0x58>
 801211c:	2340      	movs	r3, #64	; 0x40
 801211e:	2201      	movs	r2, #1
 8012120:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8012122:	69c3      	ldr	r3, [r0, #28]
 8012124:	2b01      	cmp	r3, #1
 8012126:	d114      	bne.n	8012152 <HAL_ADC_Start+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012128:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 801212a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801212c:	4a0d      	ldr	r2, [pc, #52]	; (8012164 <HAL_ADC_Start+0x5c>)
 801212e:	401a      	ands	r2, r3
 8012130:	2380      	movs	r3, #128	; 0x80
 8012132:	005b      	lsls	r3, r3, #1
 8012134:	4313      	orrs	r3, r2
 8012136:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8012138:	2300      	movs	r3, #0
 801213a:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 801213c:	2240      	movs	r2, #64	; 0x40
 801213e:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8012140:	6823      	ldr	r3, [r4, #0]
 8012142:	3a24      	subs	r2, #36	; 0x24
 8012144:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8012146:	6822      	ldr	r2, [r4, #0]
 8012148:	6893      	ldr	r3, [r2, #8]
 801214a:	2104      	movs	r1, #4
 801214c:	430b      	orrs	r3, r1
 801214e:	6093      	str	r3, [r2, #8]
}
 8012150:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8012152:	f7ff fecf 	bl	8011ef4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8012156:	2800      	cmp	r0, #0
 8012158:	d0e7      	beq.n	801212a <HAL_ADC_Start+0x22>
 801215a:	e7f9      	b.n	8012150 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 801215c:	2002      	movs	r0, #2
 801215e:	e7f7      	b.n	8012150 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8012160:	2002      	movs	r0, #2
 8012162:	e7f5      	b.n	8012150 <HAL_ADC_Start+0x48>
 8012164:	fffff0fe 	.word	0xfffff0fe

08012168 <HAL_ADC_Stop>:
{ 
 8012168:	b510      	push	{r4, lr}
 801216a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 801216c:	2340      	movs	r3, #64	; 0x40
 801216e:	5cc3      	ldrb	r3, [r0, r3]
 8012170:	2b01      	cmp	r3, #1
 8012172:	d017      	beq.n	80121a4 <HAL_ADC_Stop+0x3c>
 8012174:	2340      	movs	r3, #64	; 0x40
 8012176:	2201      	movs	r2, #1
 8012178:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 801217a:	f7ff fe51 	bl	8011e20 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 801217e:	2800      	cmp	r0, #0
 8012180:	d003      	beq.n	801218a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8012182:	2340      	movs	r3, #64	; 0x40
 8012184:	2200      	movs	r2, #0
 8012186:	54e2      	strb	r2, [r4, r3]
}
 8012188:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 801218a:	0020      	movs	r0, r4
 801218c:	f7ff fe72 	bl	8011e74 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8012190:	2800      	cmp	r0, #0
 8012192:	d1f6      	bne.n	8012182 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8012194:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012196:	4a04      	ldr	r2, [pc, #16]	; (80121a8 <HAL_ADC_Stop+0x40>)
 8012198:	4013      	ands	r3, r2
 801219a:	3204      	adds	r2, #4
 801219c:	32ff      	adds	r2, #255	; 0xff
 801219e:	4313      	orrs	r3, r2
 80121a0:	6463      	str	r3, [r4, #68]	; 0x44
 80121a2:	e7ee      	b.n	8012182 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 80121a4:	2002      	movs	r0, #2
 80121a6:	e7ef      	b.n	8012188 <HAL_ADC_Stop+0x20>
 80121a8:	fffffefe 	.word	0xfffffefe

080121ac <HAL_ADC_PollForConversion>:
{
 80121ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ae:	0004      	movs	r4, r0
 80121b0:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80121b2:	6943      	ldr	r3, [r0, #20]
 80121b4:	2b08      	cmp	r3, #8
 80121b6:	d026      	beq.n	8012206 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80121b8:	6803      	ldr	r3, [r0, #0]
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	07db      	lsls	r3, r3, #31
 80121be:	d419      	bmi.n	80121f4 <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80121c0:	260c      	movs	r6, #12
  tickstart = HAL_GetTick();
 80121c2:	f7ff fe0b 	bl	8011ddc <HAL_GetTick>
 80121c6:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80121c8:	6823      	ldr	r3, [r4, #0]
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	4216      	tst	r6, r2
 80121ce:	d11c      	bne.n	801220a <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80121d0:	1c6b      	adds	r3, r5, #1
 80121d2:	d0f9      	beq.n	80121c8 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80121d4:	2d00      	cmp	r5, #0
 80121d6:	d004      	beq.n	80121e2 <HAL_ADC_PollForConversion+0x36>
 80121d8:	f7ff fe00 	bl	8011ddc <HAL_GetTick>
 80121dc:	1bc0      	subs	r0, r0, r7
 80121de:	42a8      	cmp	r0, r5
 80121e0:	d9f2      	bls.n	80121c8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80121e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80121e4:	2204      	movs	r2, #4
 80121e6:	4313      	orrs	r3, r2
 80121e8:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80121ea:	2340      	movs	r3, #64	; 0x40
 80121ec:	2200      	movs	r2, #0
 80121ee:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80121f0:	2003      	movs	r0, #3
 80121f2:	e007      	b.n	8012204 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80121f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80121f6:	2220      	movs	r2, #32
 80121f8:	4313      	orrs	r3, r2
 80121fa:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80121fc:	2340      	movs	r3, #64	; 0x40
 80121fe:	2200      	movs	r2, #0
 8012200:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8012202:	2001      	movs	r0, #1
}
 8012204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8012206:	2608      	movs	r6, #8
 8012208:	e7db      	b.n	80121c2 <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801220a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801220c:	2280      	movs	r2, #128	; 0x80
 801220e:	0092      	lsls	r2, r2, #2
 8012210:	430a      	orrs	r2, r1
 8012212:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8012214:	68d9      	ldr	r1, [r3, #12]
 8012216:	22c0      	movs	r2, #192	; 0xc0
 8012218:	0112      	lsls	r2, r2, #4
 801221a:	4211      	tst	r1, r2
 801221c:	d113      	bne.n	8012246 <HAL_ADC_PollForConversion+0x9a>
 801221e:	6a22      	ldr	r2, [r4, #32]
 8012220:	2a00      	cmp	r2, #0
 8012222:	d110      	bne.n	8012246 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	0712      	lsls	r2, r2, #28
 8012228:	d50d      	bpl.n	8012246 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801222a:	689a      	ldr	r2, [r3, #8]
 801222c:	0752      	lsls	r2, r2, #29
 801222e:	d412      	bmi.n	8012256 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8012230:	685a      	ldr	r2, [r3, #4]
 8012232:	210c      	movs	r1, #12
 8012234:	438a      	bics	r2, r1
 8012236:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8012238:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801223a:	4a0c      	ldr	r2, [pc, #48]	; (801226c <HAL_ADC_PollForConversion+0xc0>)
 801223c:	4013      	ands	r3, r2
 801223e:	3204      	adds	r2, #4
 8012240:	32ff      	adds	r2, #255	; 0xff
 8012242:	4313      	orrs	r3, r2
 8012244:	6463      	str	r3, [r4, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8012246:	69a3      	ldr	r3, [r4, #24]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d10d      	bne.n	8012268 <HAL_ADC_PollForConversion+0xbc>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801224c:	6823      	ldr	r3, [r4, #0]
 801224e:	220c      	movs	r2, #12
 8012250:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8012252:	2000      	movs	r0, #0
 8012254:	e7d6      	b.n	8012204 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012256:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012258:	2220      	movs	r2, #32
 801225a:	4313      	orrs	r3, r2
 801225c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801225e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8012260:	3a1f      	subs	r2, #31
 8012262:	4313      	orrs	r3, r2
 8012264:	64a3      	str	r3, [r4, #72]	; 0x48
 8012266:	e7ee      	b.n	8012246 <HAL_ADC_PollForConversion+0x9a>
  return HAL_OK;
 8012268:	2000      	movs	r0, #0
 801226a:	e7cb      	b.n	8012204 <HAL_ADC_PollForConversion+0x58>
 801226c:	fffffefe 	.word	0xfffffefe

08012270 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8012270:	6803      	ldr	r3, [r0, #0]
 8012272:	2208      	movs	r2, #8
 8012274:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8012276:	6803      	ldr	r3, [r0, #0]
 8012278:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 801227a:	4770      	bx	lr

0801227c <HAL_ADC_ConfigChannel>:
{
 801227c:	b530      	push	{r4, r5, lr}
 801227e:	b083      	sub	sp, #12
 8012280:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8012282:	2300      	movs	r3, #0
 8012284:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8012286:	3340      	adds	r3, #64	; 0x40
 8012288:	5cc3      	ldrb	r3, [r0, r3]
 801228a:	2b01      	cmp	r3, #1
 801228c:	d100      	bne.n	8012290 <HAL_ADC_ConfigChannel+0x14>
 801228e:	e08a      	b.n	80123a6 <HAL_ADC_ConfigChannel+0x12a>
 8012290:	2340      	movs	r3, #64	; 0x40
 8012292:	2201      	movs	r2, #1
 8012294:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8012296:	6803      	ldr	r3, [r0, #0]
 8012298:	689a      	ldr	r2, [r3, #8]
 801229a:	0752      	lsls	r2, r2, #29
 801229c:	d475      	bmi.n	801238a <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 801229e:	4a43      	ldr	r2, [pc, #268]	; (80123ac <HAL_ADC_ConfigChannel+0x130>)
 80122a0:	6848      	ldr	r0, [r1, #4]
 80122a2:	4290      	cmp	r0, r2
 80122a4:	d056      	beq.n	8012354 <HAL_ADC_ConfigChannel+0xd8>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80122a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80122a8:	2001      	movs	r0, #1
 80122aa:	680d      	ldr	r5, [r1, #0]
 80122ac:	40a8      	lsls	r0, r5
 80122ae:	4302      	orrs	r2, r0
 80122b0:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80122b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80122b4:	2280      	movs	r2, #128	; 0x80
 80122b6:	0552      	lsls	r2, r2, #21
 80122b8:	4293      	cmp	r3, r2
 80122ba:	d01e      	beq.n	80122fa <HAL_ADC_ConfigChannel+0x7e>
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d01c      	beq.n	80122fa <HAL_ADC_ConfigChannel+0x7e>
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d01a      	beq.n	80122fa <HAL_ADC_ConfigChannel+0x7e>
 80122c4:	2b03      	cmp	r3, #3
 80122c6:	d018      	beq.n	80122fa <HAL_ADC_ConfigChannel+0x7e>
 80122c8:	2b04      	cmp	r3, #4
 80122ca:	d016      	beq.n	80122fa <HAL_ADC_ConfigChannel+0x7e>
 80122cc:	2b05      	cmp	r3, #5
 80122ce:	d014      	beq.n	80122fa <HAL_ADC_ConfigChannel+0x7e>
 80122d0:	2b06      	cmp	r3, #6
 80122d2:	d012      	beq.n	80122fa <HAL_ADC_ConfigChannel+0x7e>
 80122d4:	2b07      	cmp	r3, #7
 80122d6:	d010      	beq.n	80122fa <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80122d8:	6822      	ldr	r2, [r4, #0]
 80122da:	6950      	ldr	r0, [r2, #20]
 80122dc:	2307      	movs	r3, #7
 80122de:	4003      	ands	r3, r0
 80122e0:	6888      	ldr	r0, [r1, #8]
 80122e2:	4298      	cmp	r0, r3
 80122e4:	d009      	beq.n	80122fa <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80122e6:	6950      	ldr	r0, [r2, #20]
 80122e8:	2307      	movs	r3, #7
 80122ea:	4398      	bics	r0, r3
 80122ec:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80122ee:	6820      	ldr	r0, [r4, #0]
 80122f0:	6942      	ldr	r2, [r0, #20]
 80122f2:	688d      	ldr	r5, [r1, #8]
 80122f4:	402b      	ands	r3, r5
 80122f6:	4313      	orrs	r3, r2
 80122f8:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80122fa:	680b      	ldr	r3, [r1, #0]
 80122fc:	001a      	movs	r2, r3
 80122fe:	3a10      	subs	r2, #16
 8012300:	2a02      	cmp	r2, #2
 8012302:	d84c      	bhi.n	801239e <HAL_ADC_ConfigChannel+0x122>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8012304:	4a2a      	ldr	r2, [pc, #168]	; (80123b0 <HAL_ADC_ConfigChannel+0x134>)
 8012306:	6812      	ldr	r2, [r2, #0]
 8012308:	2b10      	cmp	r3, #16
 801230a:	d00e      	beq.n	801232a <HAL_ADC_ConfigChannel+0xae>
 801230c:	2b11      	cmp	r3, #17
 801230e:	d009      	beq.n	8012324 <HAL_ADC_ConfigChannel+0xa8>
 8012310:	2380      	movs	r3, #128	; 0x80
 8012312:	045b      	lsls	r3, r3, #17
 8012314:	4313      	orrs	r3, r2
 8012316:	4a26      	ldr	r2, [pc, #152]	; (80123b0 <HAL_ADC_ConfigChannel+0x134>)
 8012318:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801231a:	680b      	ldr	r3, [r1, #0]
 801231c:	2b10      	cmp	r3, #16
 801231e:	d007      	beq.n	8012330 <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012320:	2000      	movs	r0, #0
 8012322:	e037      	b.n	8012394 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8012324:	2380      	movs	r3, #128	; 0x80
 8012326:	03db      	lsls	r3, r3, #15
 8012328:	e7f4      	b.n	8012314 <HAL_ADC_ConfigChannel+0x98>
 801232a:	2380      	movs	r3, #128	; 0x80
 801232c:	041b      	lsls	r3, r3, #16
 801232e:	e7f1      	b.n	8012314 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8012330:	4b20      	ldr	r3, [pc, #128]	; (80123b4 <HAL_ADC_ConfigChannel+0x138>)
 8012332:	6818      	ldr	r0, [r3, #0]
 8012334:	4920      	ldr	r1, [pc, #128]	; (80123b8 <HAL_ADC_ConfigChannel+0x13c>)
 8012336:	f7ed ff0b 	bl	8000150 <__udivsi3>
 801233a:	0083      	lsls	r3, r0, #2
 801233c:	1818      	adds	r0, r3, r0
 801233e:	0043      	lsls	r3, r0, #1
 8012340:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8012342:	e002      	b.n	801234a <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8012344:	9b01      	ldr	r3, [sp, #4]
 8012346:	3b01      	subs	r3, #1
 8012348:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 801234a:	9b01      	ldr	r3, [sp, #4]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d1f9      	bne.n	8012344 <HAL_ADC_ConfigChannel+0xc8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012350:	2000      	movs	r0, #0
 8012352:	e01f      	b.n	8012394 <HAL_ADC_ConfigChannel+0x118>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8012354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012356:	2001      	movs	r0, #1
 8012358:	680d      	ldr	r5, [r1, #0]
 801235a:	40a8      	lsls	r0, r5
 801235c:	4382      	bics	r2, r0
 801235e:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8012360:	680b      	ldr	r3, [r1, #0]
 8012362:	001a      	movs	r2, r3
 8012364:	3a10      	subs	r2, #16
 8012366:	2a02      	cmp	r2, #2
 8012368:	d81b      	bhi.n	80123a2 <HAL_ADC_ConfigChannel+0x126>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801236a:	4a11      	ldr	r2, [pc, #68]	; (80123b0 <HAL_ADC_ConfigChannel+0x134>)
 801236c:	6812      	ldr	r2, [r2, #0]
 801236e:	2b10      	cmp	r3, #16
 8012370:	d009      	beq.n	8012386 <HAL_ADC_ConfigChannel+0x10a>
 8012372:	2b11      	cmp	r3, #17
 8012374:	d005      	beq.n	8012382 <HAL_ADC_ConfigChannel+0x106>
 8012376:	4b11      	ldr	r3, [pc, #68]	; (80123bc <HAL_ADC_ConfigChannel+0x140>)
 8012378:	4013      	ands	r3, r2
 801237a:	4a0d      	ldr	r2, [pc, #52]	; (80123b0 <HAL_ADC_ConfigChannel+0x134>)
 801237c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801237e:	2000      	movs	r0, #0
 8012380:	e008      	b.n	8012394 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8012382:	4b0f      	ldr	r3, [pc, #60]	; (80123c0 <HAL_ADC_ConfigChannel+0x144>)
 8012384:	e7f8      	b.n	8012378 <HAL_ADC_ConfigChannel+0xfc>
 8012386:	4b0f      	ldr	r3, [pc, #60]	; (80123c4 <HAL_ADC_ConfigChannel+0x148>)
 8012388:	e7f6      	b.n	8012378 <HAL_ADC_ConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801238a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801238c:	2220      	movs	r2, #32
 801238e:	4313      	orrs	r3, r2
 8012390:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8012392:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8012394:	2340      	movs	r3, #64	; 0x40
 8012396:	2200      	movs	r2, #0
 8012398:	54e2      	strb	r2, [r4, r3]
}
 801239a:	b003      	add	sp, #12
 801239c:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801239e:	2000      	movs	r0, #0
 80123a0:	e7f8      	b.n	8012394 <HAL_ADC_ConfigChannel+0x118>
 80123a2:	2000      	movs	r0, #0
 80123a4:	e7f6      	b.n	8012394 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 80123a6:	2002      	movs	r0, #2
 80123a8:	e7f7      	b.n	801239a <HAL_ADC_ConfigChannel+0x11e>
 80123aa:	46c0      	nop			; (mov r8, r8)
 80123ac:	00001001 	.word	0x00001001
 80123b0:	40012708 	.word	0x40012708
 80123b4:	200000c0 	.word	0x200000c0
 80123b8:	000f4240 	.word	0x000f4240
 80123bc:	feffffff 	.word	0xfeffffff
 80123c0:	ffbfffff 	.word	0xffbfffff
 80123c4:	ff7fffff 	.word	0xff7fffff

080123c8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80123c8:	b570      	push	{r4, r5, r6, lr}
 80123ca:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80123cc:	2340      	movs	r3, #64	; 0x40
 80123ce:	5cc3      	ldrb	r3, [r0, r3]
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d042      	beq.n	801245a <HAL_ADCEx_Calibration_Start+0x92>
 80123d4:	2340      	movs	r3, #64	; 0x40
 80123d6:	2201      	movs	r2, #1
 80123d8:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80123da:	6802      	ldr	r2, [r0, #0]
 80123dc:	6891      	ldr	r1, [r2, #8]
 80123de:	3b3d      	subs	r3, #61	; 0x3d
 80123e0:	400b      	ands	r3, r1
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	d105      	bne.n	80123f2 <HAL_ADCEx_Calibration_Start+0x2a>
 80123e6:	6813      	ldr	r3, [r2, #0]
 80123e8:	07db      	lsls	r3, r3, #31
 80123ea:	d42d      	bmi.n	8012448 <HAL_ADCEx_Calibration_Start+0x80>
 80123ec:	68d3      	ldr	r3, [r2, #12]
 80123ee:	041b      	lsls	r3, r3, #16
 80123f0:	d42a      	bmi.n	8012448 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80123f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80123f4:	491a      	ldr	r1, [pc, #104]	; (8012460 <HAL_ADCEx_Calibration_Start+0x98>)
 80123f6:	400b      	ands	r3, r1
 80123f8:	3106      	adds	r1, #6
 80123fa:	31ff      	adds	r1, #255	; 0xff
 80123fc:	430b      	orrs	r3, r1
 80123fe:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8012400:	6891      	ldr	r1, [r2, #8]
 8012402:	2380      	movs	r3, #128	; 0x80
 8012404:	061b      	lsls	r3, r3, #24
 8012406:	430b      	orrs	r3, r1
 8012408:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 801240a:	f7ff fce7 	bl	8011ddc <HAL_GetTick>
 801240e:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8012410:	6823      	ldr	r3, [r4, #0]
 8012412:	689b      	ldr	r3, [r3, #8]
 8012414:	2b00      	cmp	r3, #0
 8012416:	da0f      	bge.n	8012438 <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8012418:	f7ff fce0 	bl	8011ddc <HAL_GetTick>
 801241c:	1b40      	subs	r0, r0, r5
 801241e:	2802      	cmp	r0, #2
 8012420:	d9f6      	bls.n	8012410 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8012422:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012424:	2212      	movs	r2, #18
 8012426:	4393      	bics	r3, r2
 8012428:	3a02      	subs	r2, #2
 801242a:	4313      	orrs	r3, r2
 801242c:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801242e:	2340      	movs	r3, #64	; 0x40
 8012430:	2200      	movs	r2, #0
 8012432:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 8012434:	2001      	movs	r0, #1
 8012436:	e00f      	b.n	8012458 <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012438:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801243a:	2203      	movs	r2, #3
 801243c:	4393      	bics	r3, r2
 801243e:	3a02      	subs	r2, #2
 8012440:	4313      	orrs	r3, r2
 8012442:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012444:	2000      	movs	r0, #0
 8012446:	e004      	b.n	8012452 <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012448:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801244a:	2220      	movs	r2, #32
 801244c:	4313      	orrs	r3, r2
 801244e:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8012450:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012452:	2340      	movs	r3, #64	; 0x40
 8012454:	2200      	movs	r2, #0
 8012456:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8012458:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 801245a:	2002      	movs	r0, #2
 801245c:	e7fc      	b.n	8012458 <HAL_ADCEx_Calibration_Start+0x90>
 801245e:	46c0      	nop			; (mov r8, r8)
 8012460:	fffffefd 	.word	0xfffffefd

08012464 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012464:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8012466:	2800      	cmp	r0, #0
 8012468:	db11      	blt.n	801248e <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801246a:	0884      	lsrs	r4, r0, #2
 801246c:	4d13      	ldr	r5, [pc, #76]	; (80124bc <HAL_NVIC_SetPriority+0x58>)
 801246e:	34c0      	adds	r4, #192	; 0xc0
 8012470:	00a4      	lsls	r4, r4, #2
 8012472:	5962      	ldr	r2, [r4, r5]
 8012474:	2303      	movs	r3, #3
 8012476:	4018      	ands	r0, r3
 8012478:	00c0      	lsls	r0, r0, #3
 801247a:	33fc      	adds	r3, #252	; 0xfc
 801247c:	001e      	movs	r6, r3
 801247e:	4086      	lsls	r6, r0
 8012480:	43b2      	bics	r2, r6
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8012482:	0189      	lsls	r1, r1, #6
 8012484:	400b      	ands	r3, r1
 8012486:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012488:	4313      	orrs	r3, r2
 801248a:	5163      	str	r3, [r4, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 801248c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801248e:	b2c0      	uxtb	r0, r0
 8012490:	220f      	movs	r2, #15
 8012492:	4002      	ands	r2, r0
 8012494:	3a08      	subs	r2, #8
 8012496:	0892      	lsrs	r2, r2, #2
 8012498:	3206      	adds	r2, #6
 801249a:	0092      	lsls	r2, r2, #2
 801249c:	4b08      	ldr	r3, [pc, #32]	; (80124c0 <HAL_NVIC_SetPriority+0x5c>)
 801249e:	18d3      	adds	r3, r2, r3
 80124a0:	685d      	ldr	r5, [r3, #4]
 80124a2:	2403      	movs	r4, #3
 80124a4:	4020      	ands	r0, r4
 80124a6:	00c0      	lsls	r0, r0, #3
 80124a8:	22ff      	movs	r2, #255	; 0xff
 80124aa:	0014      	movs	r4, r2
 80124ac:	4084      	lsls	r4, r0
 80124ae:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80124b0:	0189      	lsls	r1, r1, #6
 80124b2:	400a      	ands	r2, r1
 80124b4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80124b6:	432a      	orrs	r2, r5
 80124b8:	605a      	str	r2, [r3, #4]
 80124ba:	e7e7      	b.n	801248c <HAL_NVIC_SetPriority+0x28>
 80124bc:	e000e100 	.word	0xe000e100
 80124c0:	e000ed00 	.word	0xe000ed00

080124c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80124c4:	231f      	movs	r3, #31
 80124c6:	4018      	ands	r0, r3
 80124c8:	3b1e      	subs	r3, #30
 80124ca:	4083      	lsls	r3, r0
 80124cc:	4a01      	ldr	r2, [pc, #4]	; (80124d4 <HAL_NVIC_EnableIRQ+0x10>)
 80124ce:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80124d0:	4770      	bx	lr
 80124d2:	46c0      	nop			; (mov r8, r8)
 80124d4:	e000e100 	.word	0xe000e100

080124d8 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80124d8:	231f      	movs	r3, #31
 80124da:	4018      	ands	r0, r3
 80124dc:	3b1e      	subs	r3, #30
 80124de:	4083      	lsls	r3, r0
 80124e0:	4901      	ldr	r1, [pc, #4]	; (80124e8 <HAL_NVIC_DisableIRQ+0x10>)
 80124e2:	2280      	movs	r2, #128	; 0x80
 80124e4:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80124e6:	4770      	bx	lr
 80124e8:	e000e100 	.word	0xe000e100

080124ec <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80124ec:	3801      	subs	r0, #1
 80124ee:	4b0a      	ldr	r3, [pc, #40]	; (8012518 <HAL_SYSTICK_Config+0x2c>)
 80124f0:	4298      	cmp	r0, r3
 80124f2:	d80f      	bhi.n	8012514 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80124f4:	4a09      	ldr	r2, [pc, #36]	; (801251c <HAL_SYSTICK_Config+0x30>)
 80124f6:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80124f8:	4809      	ldr	r0, [pc, #36]	; (8012520 <HAL_SYSTICK_Config+0x34>)
 80124fa:	6a03      	ldr	r3, [r0, #32]
 80124fc:	021b      	lsls	r3, r3, #8
 80124fe:	0a1b      	lsrs	r3, r3, #8
 8012500:	21c0      	movs	r1, #192	; 0xc0
 8012502:	0609      	lsls	r1, r1, #24
 8012504:	430b      	orrs	r3, r1
 8012506:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012508:	2300      	movs	r3, #0
 801250a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801250c:	3307      	adds	r3, #7
 801250e:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012510:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8012512:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8012514:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8012516:	e7fc      	b.n	8012512 <HAL_SYSTICK_Config+0x26>
 8012518:	00ffffff 	.word	0x00ffffff
 801251c:	e000e010 	.word	0xe000e010
 8012520:	e000ed00 	.word	0xe000ed00

08012524 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8012524:	2804      	cmp	r0, #4
 8012526:	d005      	beq.n	8012534 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8012528:	4a05      	ldr	r2, [pc, #20]	; (8012540 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801252a:	6813      	ldr	r3, [r2, #0]
 801252c:	2104      	movs	r1, #4
 801252e:	438b      	bics	r3, r1
 8012530:	6013      	str	r3, [r2, #0]
  }
}
 8012532:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8012534:	4a02      	ldr	r2, [pc, #8]	; (8012540 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8012536:	6813      	ldr	r3, [r2, #0]
 8012538:	2104      	movs	r1, #4
 801253a:	430b      	orrs	r3, r1
 801253c:	6013      	str	r3, [r2, #0]
 801253e:	e7f8      	b.n	8012532 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8012540:	e000e010 	.word	0xe000e010

08012544 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8012544:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8012546:	2500      	movs	r5, #0
 8012548:	e00e      	b.n	8012568 <CRC_Handle_8+0x24>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 801254a:	00ac      	lsls	r4, r5, #2
 801254c:	5d0b      	ldrb	r3, [r1, r4]
 801254e:	061b      	lsls	r3, r3, #24
 8012550:	190c      	adds	r4, r1, r4
 8012552:	7866      	ldrb	r6, [r4, #1]
 8012554:	0436      	lsls	r6, r6, #16
 8012556:	4333      	orrs	r3, r6
 8012558:	78a6      	ldrb	r6, [r4, #2]
 801255a:	0236      	lsls	r6, r6, #8
 801255c:	4333      	orrs	r3, r6
 801255e:	78e6      	ldrb	r6, [r4, #3]
 8012560:	6804      	ldr	r4, [r0, #0]
 8012562:	4333      	orrs	r3, r6
 8012564:	6023      	str	r3, [r4, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8012566:	3501      	adds	r5, #1
 8012568:	0893      	lsrs	r3, r2, #2
 801256a:	42ab      	cmp	r3, r5
 801256c:	d8ed      	bhi.n	801254a <CRC_Handle_8+0x6>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 801256e:	2303      	movs	r3, #3
 8012570:	401a      	ands	r2, r3
 8012572:	d005      	beq.n	8012580 <CRC_Handle_8+0x3c>
   {
     if  (BufferLength%4 == 1)
 8012574:	2a01      	cmp	r2, #1
 8012576:	d006      	beq.n	8012586 <CRC_Handle_8+0x42>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8012578:	2a02      	cmp	r2, #2
 801257a:	d009      	beq.n	8012590 <CRC_Handle_8+0x4c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
     }
     if  (BufferLength%4 == 3)
 801257c:	2a03      	cmp	r2, #3
 801257e:	d010      	beq.n	80125a2 <CRC_Handle_8+0x5e>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8012580:	6803      	ldr	r3, [r0, #0]
 8012582:	6818      	ldr	r0, [r3, #0]
}
 8012584:	bd70      	pop	{r4, r5, r6, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8012586:	00ab      	lsls	r3, r5, #2
 8012588:	5ccb      	ldrb	r3, [r1, r3]
 801258a:	6804      	ldr	r4, [r0, #0]
 801258c:	7023      	strb	r3, [r4, #0]
 801258e:	e7f3      	b.n	8012578 <CRC_Handle_8+0x34>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8012590:	00ab      	lsls	r3, r5, #2
 8012592:	5ccc      	ldrb	r4, [r1, r3]
 8012594:	0224      	lsls	r4, r4, #8
 8012596:	18cb      	adds	r3, r1, r3
 8012598:	785b      	ldrb	r3, [r3, #1]
 801259a:	4323      	orrs	r3, r4
 801259c:	6804      	ldr	r4, [r0, #0]
 801259e:	8023      	strh	r3, [r4, #0]
 80125a0:	e7ec      	b.n	801257c <CRC_Handle_8+0x38>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80125a2:	00ad      	lsls	r5, r5, #2
 80125a4:	5d4a      	ldrb	r2, [r1, r5]
 80125a6:	0212      	lsls	r2, r2, #8
 80125a8:	194d      	adds	r5, r1, r5
 80125aa:	786b      	ldrb	r3, [r5, #1]
 80125ac:	4313      	orrs	r3, r2
 80125ae:	6802      	ldr	r2, [r0, #0]
 80125b0:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 80125b2:	78ab      	ldrb	r3, [r5, #2]
 80125b4:	6802      	ldr	r2, [r0, #0]
 80125b6:	7013      	strb	r3, [r2, #0]
 80125b8:	e7e2      	b.n	8012580 <CRC_Handle_8+0x3c>

080125ba <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80125ba:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 80125bc:	2500      	movs	r5, #0
 80125be:	e008      	b.n	80125d2 <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 80125c0:	00ac      	lsls	r4, r5, #2
 80125c2:	5b0b      	ldrh	r3, [r1, r4]
 80125c4:	041b      	lsls	r3, r3, #16
 80125c6:	190c      	adds	r4, r1, r4
 80125c8:	8866      	ldrh	r6, [r4, #2]
 80125ca:	6804      	ldr	r4, [r0, #0]
 80125cc:	4333      	orrs	r3, r6
 80125ce:	6023      	str	r3, [r4, #0]
  for(i = 0; i < (BufferLength/2); i++)
 80125d0:	3501      	adds	r5, #1
 80125d2:	0853      	lsrs	r3, r2, #1
 80125d4:	42ab      	cmp	r3, r5
 80125d6:	d8f3      	bhi.n	80125c0 <CRC_Handle_16+0x6>
  }
  if ((BufferLength%2) != 0)
 80125d8:	07d3      	lsls	r3, r2, #31
 80125da:	d503      	bpl.n	80125e4 <CRC_Handle_16+0x2a>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 80125dc:	00ad      	lsls	r5, r5, #2
 80125de:	5a6b      	ldrh	r3, [r5, r1]
 80125e0:	6802      	ldr	r2, [r0, #0]
 80125e2:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80125e4:	6803      	ldr	r3, [r0, #0]
 80125e6:	6818      	ldr	r0, [r3, #0]
}
 80125e8:	bd70      	pop	{r4, r5, r6, pc}

080125ea <HAL_CRC_Init>:
{
 80125ea:	b510      	push	{r4, lr}
 80125ec:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 80125ee:	d029      	beq.n	8012644 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80125f0:	7f43      	ldrb	r3, [r0, #29]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d01e      	beq.n	8012634 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80125f6:	2302      	movs	r3, #2
 80125f8:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80125fa:	0020      	movs	r0, r4
 80125fc:	f000 f8a8 	bl	8012750 <HAL_CRCEx_Init>
 8012600:	2800      	cmp	r0, #0
 8012602:	d121      	bne.n	8012648 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8012604:	7963      	ldrb	r3, [r4, #5]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d118      	bne.n	801263c <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 801260a:	6823      	ldr	r3, [r4, #0]
 801260c:	2201      	movs	r2, #1
 801260e:	4252      	negs	r2, r2
 8012610:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8012612:	6822      	ldr	r2, [r4, #0]
 8012614:	6893      	ldr	r3, [r2, #8]
 8012616:	2160      	movs	r1, #96	; 0x60
 8012618:	438b      	bics	r3, r1
 801261a:	6961      	ldr	r1, [r4, #20]
 801261c:	430b      	orrs	r3, r1
 801261e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8012620:	6822      	ldr	r2, [r4, #0]
 8012622:	6893      	ldr	r3, [r2, #8]
 8012624:	2180      	movs	r1, #128	; 0x80
 8012626:	438b      	bics	r3, r1
 8012628:	69a1      	ldr	r1, [r4, #24]
 801262a:	430b      	orrs	r3, r1
 801262c:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 801262e:	2301      	movs	r3, #1
 8012630:	7763      	strb	r3, [r4, #29]
}
 8012632:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8012634:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8012636:	f7fc fc4f 	bl	800eed8 <HAL_CRC_MspInit>
 801263a:	e7dc      	b.n	80125f6 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 801263c:	6823      	ldr	r3, [r4, #0]
 801263e:	6922      	ldr	r2, [r4, #16]
 8012640:	611a      	str	r2, [r3, #16]
 8012642:	e7e6      	b.n	8012612 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8012644:	2001      	movs	r0, #1
 8012646:	e7f4      	b.n	8012632 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8012648:	2001      	movs	r0, #1
 801264a:	e7f2      	b.n	8012632 <HAL_CRC_Init+0x48>

0801264c <HAL_CRC_Accumulate>:
{
 801264c:	b570      	push	{r4, r5, r6, lr}
 801264e:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8012650:	7f03      	ldrb	r3, [r0, #28]
 8012652:	2b01      	cmp	r3, #1
 8012654:	d022      	beq.n	801269c <HAL_CRC_Accumulate+0x50>
 8012656:	2301      	movs	r3, #1
 8012658:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 801265a:	3301      	adds	r3, #1
 801265c:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 801265e:	6a03      	ldr	r3, [r0, #32]
 8012660:	2b02      	cmp	r3, #2
 8012662:	d018      	beq.n	8012696 <HAL_CRC_Accumulate+0x4a>
 8012664:	2b03      	cmp	r3, #3
 8012666:	d011      	beq.n	801268c <HAL_CRC_Accumulate+0x40>
 8012668:	2b01      	cmp	r3, #1
 801266a:	d011      	beq.n	8012690 <HAL_CRC_Accumulate+0x44>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 801266c:	2000      	movs	r0, #0
 801266e:	e008      	b.n	8012682 <HAL_CRC_Accumulate+0x36>
        hcrc->Instance->DR = pBuffer[index];
 8012670:	6820      	ldr	r0, [r4, #0]
 8012672:	009d      	lsls	r5, r3, #2
 8012674:	586d      	ldr	r5, [r5, r1]
 8012676:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8012678:	3301      	adds	r3, #1
 801267a:	4293      	cmp	r3, r2
 801267c:	d3f8      	bcc.n	8012670 <HAL_CRC_Accumulate+0x24>
      temp = hcrc->Instance->DR;
 801267e:	6823      	ldr	r3, [r4, #0]
 8012680:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 8012682:	2301      	movs	r3, #1
 8012684:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8012686:	2300      	movs	r3, #0
 8012688:	7723      	strb	r3, [r4, #28]
}
 801268a:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 801268c:	2300      	movs	r3, #0
 801268e:	e7f4      	b.n	801267a <HAL_CRC_Accumulate+0x2e>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8012690:	f7ff ff58 	bl	8012544 <CRC_Handle_8>
      break;
 8012694:	e7f5      	b.n	8012682 <HAL_CRC_Accumulate+0x36>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8012696:	f7ff ff90 	bl	80125ba <CRC_Handle_16>
      break;
 801269a:	e7f2      	b.n	8012682 <HAL_CRC_Accumulate+0x36>
  __HAL_LOCK(hcrc); 
 801269c:	2002      	movs	r0, #2
 801269e:	e7f4      	b.n	801268a <HAL_CRC_Accumulate+0x3e>

080126a0 <HAL_CRC_Calculate>:
{
 80126a0:	b570      	push	{r4, r5, r6, lr}
 80126a2:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80126a4:	7f03      	ldrb	r3, [r0, #28]
 80126a6:	2b01      	cmp	r3, #1
 80126a8:	d028      	beq.n	80126fc <HAL_CRC_Calculate+0x5c>
 80126aa:	2501      	movs	r5, #1
 80126ac:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80126ae:	2302      	movs	r3, #2
 80126b0:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80126b2:	6800      	ldr	r0, [r0, #0]
 80126b4:	6883      	ldr	r3, [r0, #8]
 80126b6:	432b      	orrs	r3, r5
 80126b8:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 80126ba:	6a23      	ldr	r3, [r4, #32]
 80126bc:	2b02      	cmp	r3, #2
 80126be:	d019      	beq.n	80126f4 <HAL_CRC_Calculate+0x54>
 80126c0:	2b03      	cmp	r3, #3
 80126c2:	d011      	beq.n	80126e8 <HAL_CRC_Calculate+0x48>
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d011      	beq.n	80126ec <HAL_CRC_Calculate+0x4c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 80126c8:	2000      	movs	r0, #0
 80126ca:	e008      	b.n	80126de <HAL_CRC_Calculate+0x3e>
        hcrc->Instance->DR = pBuffer[index];
 80126cc:	6820      	ldr	r0, [r4, #0]
 80126ce:	009d      	lsls	r5, r3, #2
 80126d0:	586d      	ldr	r5, [r5, r1]
 80126d2:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 80126d4:	3301      	adds	r3, #1
 80126d6:	4293      	cmp	r3, r2
 80126d8:	d3f8      	bcc.n	80126cc <HAL_CRC_Calculate+0x2c>
      temp = hcrc->Instance->DR;
 80126da:	6823      	ldr	r3, [r4, #0]
 80126dc:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 80126de:	2301      	movs	r3, #1
 80126e0:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80126e2:	2300      	movs	r3, #0
 80126e4:	7723      	strb	r3, [r4, #28]
}
 80126e6:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 80126e8:	2300      	movs	r3, #0
 80126ea:	e7f4      	b.n	80126d6 <HAL_CRC_Calculate+0x36>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80126ec:	0020      	movs	r0, r4
 80126ee:	f7ff ff29 	bl	8012544 <CRC_Handle_8>
      break;
 80126f2:	e7f4      	b.n	80126de <HAL_CRC_Calculate+0x3e>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80126f4:	0020      	movs	r0, r4
 80126f6:	f7ff ff60 	bl	80125ba <CRC_Handle_16>
      break;
 80126fa:	e7f0      	b.n	80126de <HAL_CRC_Calculate+0x3e>
  __HAL_LOCK(hcrc); 
 80126fc:	2002      	movs	r0, #2
 80126fe:	e7f2      	b.n	80126e6 <HAL_CRC_Calculate+0x46>

08012700 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8012700:	b510      	push	{r4, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8012702:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8012704:	e000      	b.n	8012708 <HAL_CRCEx_Polynomial_Set+0x8>
 8012706:	001c      	movs	r4, r3
 8012708:	2301      	movs	r3, #1
 801270a:	40a3      	lsls	r3, r4
 801270c:	4219      	tst	r1, r3
 801270e:	d103      	bne.n	8012718 <HAL_CRCEx_Polynomial_Set+0x18>
 8012710:	1e63      	subs	r3, r4, #1
 8012712:	2c00      	cmp	r4, #0
 8012714:	d1f7      	bne.n	8012706 <HAL_CRCEx_Polynomial_Set+0x6>
 8012716:	001c      	movs	r4, r3
  {}

  switch (PolyLength)
 8012718:	2a10      	cmp	r2, #16
 801271a:	d011      	beq.n	8012740 <HAL_CRCEx_Polynomial_Set+0x40>
 801271c:	2a18      	cmp	r2, #24
 801271e:	d00b      	beq.n	8012738 <HAL_CRCEx_Polynomial_Set+0x38>
 8012720:	2a08      	cmp	r2, #8
 8012722:	d011      	beq.n	8012748 <HAL_CRCEx_Polynomial_Set+0x48>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8012724:	6803      	ldr	r3, [r0, #0]
 8012726:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8012728:	6801      	ldr	r1, [r0, #0]
 801272a:	688b      	ldr	r3, [r1, #8]
 801272c:	2018      	movs	r0, #24
 801272e:	4383      	bics	r3, r0
 8012730:	431a      	orrs	r2, r3
 8012732:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8012734:	2000      	movs	r0, #0
}
 8012736:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8012738:	2c06      	cmp	r4, #6
 801273a:	d9f3      	bls.n	8012724 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 801273c:	2001      	movs	r0, #1
 801273e:	e7fa      	b.n	8012736 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_8B)
 8012740:	2c07      	cmp	r4, #7
 8012742:	d9ef      	bls.n	8012724 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8012744:	2001      	movs	r0, #1
 8012746:	e7f6      	b.n	8012736 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 8012748:	2c0f      	cmp	r4, #15
 801274a:	d9eb      	bls.n	8012724 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 801274c:	2001      	movs	r0, #1
 801274e:	e7f2      	b.n	8012736 <HAL_CRCEx_Polynomial_Set+0x36>

08012750 <HAL_CRCEx_Init>:
{
 8012750:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8012752:	7903      	ldrb	r3, [r0, #4]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d109      	bne.n	801276c <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8012758:	6803      	ldr	r3, [r0, #0]
 801275a:	4a08      	ldr	r2, [pc, #32]	; (801277c <HAL_CRCEx_Init+0x2c>)
 801275c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801275e:	6802      	ldr	r2, [r0, #0]
 8012760:	6893      	ldr	r3, [r2, #8]
 8012762:	2118      	movs	r1, #24
 8012764:	438b      	bics	r3, r1
 8012766:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8012768:	2000      	movs	r0, #0
}
 801276a:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 801276c:	68c2      	ldr	r2, [r0, #12]
 801276e:	6881      	ldr	r1, [r0, #8]
 8012770:	f7ff ffc6 	bl	8012700 <HAL_CRCEx_Polynomial_Set>
 8012774:	2800      	cmp	r0, #0
 8012776:	d0f8      	beq.n	801276a <HAL_CRCEx_Init+0x1a>
      return HAL_ERROR;
 8012778:	2001      	movs	r0, #1
 801277a:	e7f6      	b.n	801276a <HAL_CRCEx_Init+0x1a>
 801277c:	04c11db7 	.word	0x04c11db7

08012780 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8012780:	b510      	push	{r4, lr}
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8012782:	6804      	ldr	r4, [r0, #0]
 8012784:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012786:	6843      	ldr	r3, [r0, #4]
 8012788:	2b10      	cmp	r3, #16
 801278a:	d004      	beq.n	8012796 <DMA_SetConfig+0x16>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 801278c:	6803      	ldr	r3, [r0, #0]
 801278e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8012790:	6803      	ldr	r3, [r0, #0]
 8012792:	60da      	str	r2, [r3, #12]
  }
}
 8012794:	bd10      	pop	{r4, pc}
    hdma->Instance->CPAR = DstAddress;
 8012796:	6803      	ldr	r3, [r0, #0]
 8012798:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 801279a:	6803      	ldr	r3, [r0, #0]
 801279c:	60d9      	str	r1, [r3, #12]
 801279e:	e7f9      	b.n	8012794 <DMA_SetConfig+0x14>

080127a0 <HAL_DMA_Init>:
{ 
 80127a0:	b530      	push	{r4, r5, lr}
  if(hdma == NULL)
 80127a2:	2800      	cmp	r0, #0
 80127a4:	d022      	beq.n	80127ec <HAL_DMA_Init+0x4c>
  if(hdma->State == HAL_DMA_STATE_RESET)
 80127a6:	2321      	movs	r3, #33	; 0x21
 80127a8:	5cc3      	ldrb	r3, [r0, r3]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d102      	bne.n	80127b4 <HAL_DMA_Init+0x14>
    hdma->Lock = HAL_UNLOCKED;
 80127ae:	3320      	adds	r3, #32
 80127b0:	2200      	movs	r2, #0
 80127b2:	54c2      	strb	r2, [r0, r3]
  hdma->State = HAL_DMA_STATE_BUSY;
 80127b4:	2121      	movs	r1, #33	; 0x21
 80127b6:	2302      	movs	r3, #2
 80127b8:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 80127ba:	6804      	ldr	r4, [r0, #0]
 80127bc:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80127be:	4a0c      	ldr	r2, [pc, #48]	; (80127f0 <HAL_DMA_Init+0x50>)
 80127c0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80127c2:	6843      	ldr	r3, [r0, #4]
 80127c4:	6885      	ldr	r5, [r0, #8]
 80127c6:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80127c8:	68c5      	ldr	r5, [r0, #12]
 80127ca:	432b      	orrs	r3, r5
 80127cc:	6905      	ldr	r5, [r0, #16]
 80127ce:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80127d0:	6945      	ldr	r5, [r0, #20]
 80127d2:	432b      	orrs	r3, r5
 80127d4:	6985      	ldr	r5, [r0, #24]
 80127d6:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80127d8:	69c5      	ldr	r5, [r0, #28]
 80127da:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80127dc:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80127de:	6023      	str	r3, [r4, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80127e0:	2300      	movs	r3, #0
 80127e2:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State  = HAL_DMA_STATE_READY;
 80127e4:	3301      	adds	r3, #1
 80127e6:	5443      	strb	r3, [r0, r1]
  return HAL_OK;
 80127e8:	2000      	movs	r0, #0
}  
 80127ea:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80127ec:	2001      	movs	r0, #1
 80127ee:	e7fc      	b.n	80127ea <HAL_DMA_Init+0x4a>
 80127f0:	ffffc00f 	.word	0xffffc00f

080127f4 <HAL_DMA_Start_IT>:
{
 80127f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127f6:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80127f8:	2020      	movs	r0, #32
 80127fa:	5c20      	ldrb	r0, [r4, r0]
 80127fc:	2801      	cmp	r0, #1
 80127fe:	d020      	beq.n	8012842 <HAL_DMA_Start_IT+0x4e>
 8012800:	2501      	movs	r5, #1
 8012802:	2020      	movs	r0, #32
 8012804:	5425      	strb	r5, [r4, r0]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8012806:	2602      	movs	r6, #2
 8012808:	3001      	adds	r0, #1
 801280a:	5426      	strb	r6, [r4, r0]
  __HAL_DMA_DISABLE(hdma);
 801280c:	6827      	ldr	r7, [r4, #0]
 801280e:	6838      	ldr	r0, [r7, #0]
 8012810:	43a8      	bics	r0, r5
 8012812:	6038      	str	r0, [r7, #0]
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012814:	0020      	movs	r0, r4
 8012816:	f7ff ffb3 	bl	8012780 <DMA_SetConfig>
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 801281a:	6822      	ldr	r2, [r4, #0]
 801281c:	6813      	ldr	r3, [r2, #0]
 801281e:	4333      	orrs	r3, r6
 8012820:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8012822:	6822      	ldr	r2, [r4, #0]
 8012824:	6813      	ldr	r3, [r2, #0]
 8012826:	2104      	movs	r1, #4
 8012828:	430b      	orrs	r3, r1
 801282a:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 801282c:	6822      	ldr	r2, [r4, #0]
 801282e:	6813      	ldr	r3, [r2, #0]
 8012830:	3104      	adds	r1, #4
 8012832:	430b      	orrs	r3, r1
 8012834:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8012836:	6822      	ldr	r2, [r4, #0]
 8012838:	6813      	ldr	r3, [r2, #0]
 801283a:	432b      	orrs	r3, r5
 801283c:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 801283e:	2000      	movs	r0, #0
} 
 8012840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8012842:	2002      	movs	r0, #2
 8012844:	e7fc      	b.n	8012840 <HAL_DMA_Start_IT+0x4c>

08012846 <HAL_DMA_Abort>:
{
 8012846:	b570      	push	{r4, r5, r6, lr}
 8012848:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801284a:	6802      	ldr	r2, [r0, #0]
 801284c:	6813      	ldr	r3, [r2, #0]
 801284e:	2101      	movs	r1, #1
 8012850:	438b      	bics	r3, r1
 8012852:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8012854:	f7ff fac2 	bl	8011ddc <HAL_GetTick>
 8012858:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801285a:	6823      	ldr	r3, [r4, #0]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	07db      	lsls	r3, r3, #31
 8012860:	d511      	bpl.n	8012886 <HAL_DMA_Abort+0x40>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8012862:	f7ff fabb 	bl	8011ddc <HAL_GetTick>
 8012866:	1b40      	subs	r0, r0, r5
 8012868:	23fa      	movs	r3, #250	; 0xfa
 801286a:	009b      	lsls	r3, r3, #2
 801286c:	4298      	cmp	r0, r3
 801286e:	d9f4      	bls.n	801285a <HAL_DMA_Abort+0x14>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8012870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012872:	2220      	movs	r2, #32
 8012874:	4313      	orrs	r3, r2
 8012876:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012878:	2321      	movs	r3, #33	; 0x21
 801287a:	2103      	movs	r1, #3
 801287c:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 801287e:	2300      	movs	r3, #0
 8012880:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8012882:	2003      	movs	r0, #3
 8012884:	e006      	b.n	8012894 <HAL_DMA_Abort+0x4e>
  hdma->State = HAL_DMA_STATE_READY; 
 8012886:	2321      	movs	r3, #33	; 0x21
 8012888:	2201      	movs	r2, #1
 801288a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 801288c:	3b01      	subs	r3, #1
 801288e:	2200      	movs	r2, #0
 8012890:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8012892:	2000      	movs	r0, #0
}
 8012894:	bd70      	pop	{r4, r5, r6, pc}
	...

08012898 <HAL_DMA_IRQHandler>:
{        
 8012898:	b510      	push	{r4, lr}
 801289a:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801289c:	6802      	ldr	r2, [r0, #0]
 801289e:	4bb6      	ldr	r3, [pc, #728]	; (8012b78 <HAL_DMA_IRQHandler+0x2e0>)
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d800      	bhi.n	80128a6 <HAL_DMA_IRQHandler+0xe>
 80128a4:	e083      	b.n	80129ae <HAL_DMA_IRQHandler+0x116>
 80128a6:	4bb5      	ldr	r3, [pc, #724]	; (8012b7c <HAL_DMA_IRQHandler+0x2e4>)
 80128a8:	6819      	ldr	r1, [r3, #0]
 80128aa:	4bb5      	ldr	r3, [pc, #724]	; (8012b80 <HAL_DMA_IRQHandler+0x2e8>)
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d023      	beq.n	80128f8 <HAL_DMA_IRQHandler+0x60>
 80128b0:	4bb4      	ldr	r3, [pc, #720]	; (8012b84 <HAL_DMA_IRQHandler+0x2ec>)
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d063      	beq.n	801297e <HAL_DMA_IRQHandler+0xe6>
 80128b6:	4bb4      	ldr	r3, [pc, #720]	; (8012b88 <HAL_DMA_IRQHandler+0x2f0>)
 80128b8:	429a      	cmp	r2, r3
 80128ba:	d062      	beq.n	8012982 <HAL_DMA_IRQHandler+0xea>
 80128bc:	4bb3      	ldr	r3, [pc, #716]	; (8012b8c <HAL_DMA_IRQHandler+0x2f4>)
 80128be:	429a      	cmp	r2, r3
 80128c0:	d062      	beq.n	8012988 <HAL_DMA_IRQHandler+0xf0>
 80128c2:	4bb3      	ldr	r3, [pc, #716]	; (8012b90 <HAL_DMA_IRQHandler+0x2f8>)
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d062      	beq.n	801298e <HAL_DMA_IRQHandler+0xf6>
 80128c8:	4bb2      	ldr	r3, [pc, #712]	; (8012b94 <HAL_DMA_IRQHandler+0x2fc>)
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d062      	beq.n	8012994 <HAL_DMA_IRQHandler+0xfc>
 80128ce:	4baa      	ldr	r3, [pc, #680]	; (8012b78 <HAL_DMA_IRQHandler+0x2e0>)
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d062      	beq.n	801299a <HAL_DMA_IRQHandler+0x102>
 80128d4:	4bb0      	ldr	r3, [pc, #704]	; (8012b98 <HAL_DMA_IRQHandler+0x300>)
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d062      	beq.n	80129a0 <HAL_DMA_IRQHandler+0x108>
 80128da:	4bb0      	ldr	r3, [pc, #704]	; (8012b9c <HAL_DMA_IRQHandler+0x304>)
 80128dc:	429a      	cmp	r2, r3
 80128de:	d061      	beq.n	80129a4 <HAL_DMA_IRQHandler+0x10c>
 80128e0:	4baf      	ldr	r3, [pc, #700]	; (8012ba0 <HAL_DMA_IRQHandler+0x308>)
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d060      	beq.n	80129a8 <HAL_DMA_IRQHandler+0x110>
 80128e6:	4baf      	ldr	r3, [pc, #700]	; (8012ba4 <HAL_DMA_IRQHandler+0x30c>)
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d002      	beq.n	80128f2 <HAL_DMA_IRQHandler+0x5a>
 80128ec:	2380      	movs	r3, #128	; 0x80
 80128ee:	031b      	lsls	r3, r3, #12
 80128f0:	e003      	b.n	80128fa <HAL_DMA_IRQHandler+0x62>
 80128f2:	2380      	movs	r3, #128	; 0x80
 80128f4:	021b      	lsls	r3, r3, #8
 80128f6:	e000      	b.n	80128fa <HAL_DMA_IRQHandler+0x62>
 80128f8:	2308      	movs	r3, #8
 80128fa:	400b      	ands	r3, r1
 80128fc:	1e59      	subs	r1, r3, #1
 80128fe:	418b      	sbcs	r3, r1
 8012900:	b2db      	uxtb	r3, r3
 8012902:	2b00      	cmp	r3, #0
 8012904:	d100      	bne.n	8012908 <HAL_DMA_IRQHandler+0x70>
 8012906:	e0ae      	b.n	8012a66 <HAL_DMA_IRQHandler+0x1ce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8012908:	6813      	ldr	r3, [r2, #0]
 801290a:	071b      	lsls	r3, r3, #28
 801290c:	d400      	bmi.n	8012910 <HAL_DMA_IRQHandler+0x78>
 801290e:	e0aa      	b.n	8012a66 <HAL_DMA_IRQHandler+0x1ce>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8012910:	6813      	ldr	r3, [r2, #0]
 8012912:	2108      	movs	r1, #8
 8012914:	438b      	bics	r3, r1
 8012916:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8012918:	6823      	ldr	r3, [r4, #0]
 801291a:	4a97      	ldr	r2, [pc, #604]	; (8012b78 <HAL_DMA_IRQHandler+0x2e0>)
 801291c:	4293      	cmp	r3, r2
 801291e:	d800      	bhi.n	8012922 <HAL_DMA_IRQHandler+0x8a>
 8012920:	e0ee      	b.n	8012b00 <HAL_DMA_IRQHandler+0x268>
 8012922:	4a97      	ldr	r2, [pc, #604]	; (8012b80 <HAL_DMA_IRQHandler+0x2e8>)
 8012924:	4293      	cmp	r3, r2
 8012926:	d100      	bne.n	801292a <HAL_DMA_IRQHandler+0x92>
 8012928:	e08b      	b.n	8012a42 <HAL_DMA_IRQHandler+0x1aa>
 801292a:	4a96      	ldr	r2, [pc, #600]	; (8012b84 <HAL_DMA_IRQHandler+0x2ec>)
 801292c:	4293      	cmp	r3, r2
 801292e:	d100      	bne.n	8012932 <HAL_DMA_IRQHandler+0x9a>
 8012930:	e0ce      	b.n	8012ad0 <HAL_DMA_IRQHandler+0x238>
 8012932:	4a95      	ldr	r2, [pc, #596]	; (8012b88 <HAL_DMA_IRQHandler+0x2f0>)
 8012934:	4293      	cmp	r3, r2
 8012936:	d100      	bne.n	801293a <HAL_DMA_IRQHandler+0xa2>
 8012938:	e0cc      	b.n	8012ad4 <HAL_DMA_IRQHandler+0x23c>
 801293a:	4a94      	ldr	r2, [pc, #592]	; (8012b8c <HAL_DMA_IRQHandler+0x2f4>)
 801293c:	4293      	cmp	r3, r2
 801293e:	d100      	bne.n	8012942 <HAL_DMA_IRQHandler+0xaa>
 8012940:	e0cb      	b.n	8012ada <HAL_DMA_IRQHandler+0x242>
 8012942:	4a93      	ldr	r2, [pc, #588]	; (8012b90 <HAL_DMA_IRQHandler+0x2f8>)
 8012944:	4293      	cmp	r3, r2
 8012946:	d100      	bne.n	801294a <HAL_DMA_IRQHandler+0xb2>
 8012948:	e0ca      	b.n	8012ae0 <HAL_DMA_IRQHandler+0x248>
 801294a:	4a92      	ldr	r2, [pc, #584]	; (8012b94 <HAL_DMA_IRQHandler+0x2fc>)
 801294c:	4293      	cmp	r3, r2
 801294e:	d100      	bne.n	8012952 <HAL_DMA_IRQHandler+0xba>
 8012950:	e0c9      	b.n	8012ae6 <HAL_DMA_IRQHandler+0x24e>
 8012952:	4a89      	ldr	r2, [pc, #548]	; (8012b78 <HAL_DMA_IRQHandler+0x2e0>)
 8012954:	4293      	cmp	r3, r2
 8012956:	d100      	bne.n	801295a <HAL_DMA_IRQHandler+0xc2>
 8012958:	e0c8      	b.n	8012aec <HAL_DMA_IRQHandler+0x254>
 801295a:	4a8f      	ldr	r2, [pc, #572]	; (8012b98 <HAL_DMA_IRQHandler+0x300>)
 801295c:	4293      	cmp	r3, r2
 801295e:	d100      	bne.n	8012962 <HAL_DMA_IRQHandler+0xca>
 8012960:	e0c7      	b.n	8012af2 <HAL_DMA_IRQHandler+0x25a>
 8012962:	4a8e      	ldr	r2, [pc, #568]	; (8012b9c <HAL_DMA_IRQHandler+0x304>)
 8012964:	4293      	cmp	r3, r2
 8012966:	d100      	bne.n	801296a <HAL_DMA_IRQHandler+0xd2>
 8012968:	e0c5      	b.n	8012af6 <HAL_DMA_IRQHandler+0x25e>
 801296a:	4a8d      	ldr	r2, [pc, #564]	; (8012ba0 <HAL_DMA_IRQHandler+0x308>)
 801296c:	4293      	cmp	r3, r2
 801296e:	d100      	bne.n	8012972 <HAL_DMA_IRQHandler+0xda>
 8012970:	e0c3      	b.n	8012afa <HAL_DMA_IRQHandler+0x262>
 8012972:	4a8c      	ldr	r2, [pc, #560]	; (8012ba4 <HAL_DMA_IRQHandler+0x30c>)
 8012974:	4293      	cmp	r3, r2
 8012976:	d061      	beq.n	8012a3c <HAL_DMA_IRQHandler+0x1a4>
 8012978:	2280      	movs	r2, #128	; 0x80
 801297a:	0312      	lsls	r2, r2, #12
 801297c:	e062      	b.n	8012a44 <HAL_DMA_IRQHandler+0x1ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801297e:	2380      	movs	r3, #128	; 0x80
 8012980:	e7bb      	b.n	80128fa <HAL_DMA_IRQHandler+0x62>
 8012982:	2380      	movs	r3, #128	; 0x80
 8012984:	011b      	lsls	r3, r3, #4
 8012986:	e7b8      	b.n	80128fa <HAL_DMA_IRQHandler+0x62>
 8012988:	2380      	movs	r3, #128	; 0x80
 801298a:	021b      	lsls	r3, r3, #8
 801298c:	e7b5      	b.n	80128fa <HAL_DMA_IRQHandler+0x62>
 801298e:	2380      	movs	r3, #128	; 0x80
 8012990:	031b      	lsls	r3, r3, #12
 8012992:	e7b2      	b.n	80128fa <HAL_DMA_IRQHandler+0x62>
 8012994:	2380      	movs	r3, #128	; 0x80
 8012996:	041b      	lsls	r3, r3, #16
 8012998:	e7af      	b.n	80128fa <HAL_DMA_IRQHandler+0x62>
 801299a:	2380      	movs	r3, #128	; 0x80
 801299c:	051b      	lsls	r3, r3, #20
 801299e:	e7ac      	b.n	80128fa <HAL_DMA_IRQHandler+0x62>
 80129a0:	2308      	movs	r3, #8
 80129a2:	e7aa      	b.n	80128fa <HAL_DMA_IRQHandler+0x62>
 80129a4:	2380      	movs	r3, #128	; 0x80
 80129a6:	e7a8      	b.n	80128fa <HAL_DMA_IRQHandler+0x62>
 80129a8:	2380      	movs	r3, #128	; 0x80
 80129aa:	011b      	lsls	r3, r3, #4
 80129ac:	e7a5      	b.n	80128fa <HAL_DMA_IRQHandler+0x62>
 80129ae:	4b7e      	ldr	r3, [pc, #504]	; (8012ba8 <HAL_DMA_IRQHandler+0x310>)
 80129b0:	6819      	ldr	r1, [r3, #0]
 80129b2:	4b73      	ldr	r3, [pc, #460]	; (8012b80 <HAL_DMA_IRQHandler+0x2e8>)
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d023      	beq.n	8012a00 <HAL_DMA_IRQHandler+0x168>
 80129b8:	4b72      	ldr	r3, [pc, #456]	; (8012b84 <HAL_DMA_IRQHandler+0x2ec>)
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d026      	beq.n	8012a0c <HAL_DMA_IRQHandler+0x174>
 80129be:	4b72      	ldr	r3, [pc, #456]	; (8012b88 <HAL_DMA_IRQHandler+0x2f0>)
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d025      	beq.n	8012a10 <HAL_DMA_IRQHandler+0x178>
 80129c4:	4b71      	ldr	r3, [pc, #452]	; (8012b8c <HAL_DMA_IRQHandler+0x2f4>)
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d025      	beq.n	8012a16 <HAL_DMA_IRQHandler+0x17e>
 80129ca:	4b71      	ldr	r3, [pc, #452]	; (8012b90 <HAL_DMA_IRQHandler+0x2f8>)
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d025      	beq.n	8012a1c <HAL_DMA_IRQHandler+0x184>
 80129d0:	4b70      	ldr	r3, [pc, #448]	; (8012b94 <HAL_DMA_IRQHandler+0x2fc>)
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d025      	beq.n	8012a22 <HAL_DMA_IRQHandler+0x18a>
 80129d6:	4b68      	ldr	r3, [pc, #416]	; (8012b78 <HAL_DMA_IRQHandler+0x2e0>)
 80129d8:	429a      	cmp	r2, r3
 80129da:	d025      	beq.n	8012a28 <HAL_DMA_IRQHandler+0x190>
 80129dc:	4b6e      	ldr	r3, [pc, #440]	; (8012b98 <HAL_DMA_IRQHandler+0x300>)
 80129de:	429a      	cmp	r2, r3
 80129e0:	d025      	beq.n	8012a2e <HAL_DMA_IRQHandler+0x196>
 80129e2:	4b6e      	ldr	r3, [pc, #440]	; (8012b9c <HAL_DMA_IRQHandler+0x304>)
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d024      	beq.n	8012a32 <HAL_DMA_IRQHandler+0x19a>
 80129e8:	4b6d      	ldr	r3, [pc, #436]	; (8012ba0 <HAL_DMA_IRQHandler+0x308>)
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d023      	beq.n	8012a36 <HAL_DMA_IRQHandler+0x19e>
 80129ee:	4b6d      	ldr	r3, [pc, #436]	; (8012ba4 <HAL_DMA_IRQHandler+0x30c>)
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d002      	beq.n	80129fa <HAL_DMA_IRQHandler+0x162>
 80129f4:	2380      	movs	r3, #128	; 0x80
 80129f6:	031b      	lsls	r3, r3, #12
 80129f8:	e003      	b.n	8012a02 <HAL_DMA_IRQHandler+0x16a>
 80129fa:	2380      	movs	r3, #128	; 0x80
 80129fc:	021b      	lsls	r3, r3, #8
 80129fe:	e000      	b.n	8012a02 <HAL_DMA_IRQHandler+0x16a>
 8012a00:	2308      	movs	r3, #8
 8012a02:	400b      	ands	r3, r1
 8012a04:	1e59      	subs	r1, r3, #1
 8012a06:	418b      	sbcs	r3, r1
 8012a08:	b2db      	uxtb	r3, r3
 8012a0a:	e77a      	b.n	8012902 <HAL_DMA_IRQHandler+0x6a>
 8012a0c:	2380      	movs	r3, #128	; 0x80
 8012a0e:	e7f8      	b.n	8012a02 <HAL_DMA_IRQHandler+0x16a>
 8012a10:	2380      	movs	r3, #128	; 0x80
 8012a12:	011b      	lsls	r3, r3, #4
 8012a14:	e7f5      	b.n	8012a02 <HAL_DMA_IRQHandler+0x16a>
 8012a16:	2380      	movs	r3, #128	; 0x80
 8012a18:	021b      	lsls	r3, r3, #8
 8012a1a:	e7f2      	b.n	8012a02 <HAL_DMA_IRQHandler+0x16a>
 8012a1c:	2380      	movs	r3, #128	; 0x80
 8012a1e:	031b      	lsls	r3, r3, #12
 8012a20:	e7ef      	b.n	8012a02 <HAL_DMA_IRQHandler+0x16a>
 8012a22:	2380      	movs	r3, #128	; 0x80
 8012a24:	041b      	lsls	r3, r3, #16
 8012a26:	e7ec      	b.n	8012a02 <HAL_DMA_IRQHandler+0x16a>
 8012a28:	2380      	movs	r3, #128	; 0x80
 8012a2a:	051b      	lsls	r3, r3, #20
 8012a2c:	e7e9      	b.n	8012a02 <HAL_DMA_IRQHandler+0x16a>
 8012a2e:	2308      	movs	r3, #8
 8012a30:	e7e7      	b.n	8012a02 <HAL_DMA_IRQHandler+0x16a>
 8012a32:	2380      	movs	r3, #128	; 0x80
 8012a34:	e7e5      	b.n	8012a02 <HAL_DMA_IRQHandler+0x16a>
 8012a36:	2380      	movs	r3, #128	; 0x80
 8012a38:	011b      	lsls	r3, r3, #4
 8012a3a:	e7e2      	b.n	8012a02 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8012a3c:	2280      	movs	r2, #128	; 0x80
 8012a3e:	0212      	lsls	r2, r2, #8
 8012a40:	e000      	b.n	8012a44 <HAL_DMA_IRQHandler+0x1ac>
 8012a42:	2208      	movs	r2, #8
 8012a44:	4b4d      	ldr	r3, [pc, #308]	; (8012b7c <HAL_DMA_IRQHandler+0x2e4>)
 8012a46:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8012a48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	4313      	orrs	r3, r2
 8012a4e:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8012a50:	2321      	movs	r3, #33	; 0x21
 8012a52:	3203      	adds	r2, #3
 8012a54:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8012a56:	3b01      	subs	r3, #1
 8012a58:	2200      	movs	r2, #0
 8012a5a:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8012a5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d001      	beq.n	8012a66 <HAL_DMA_IRQHandler+0x1ce>
        hdma->XferErrorCallback(hdma);
 8012a62:	0020      	movs	r0, r4
 8012a64:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012a66:	6822      	ldr	r2, [r4, #0]
 8012a68:	4b43      	ldr	r3, [pc, #268]	; (8012b78 <HAL_DMA_IRQHandler+0x2e0>)
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d800      	bhi.n	8012a70 <HAL_DMA_IRQHandler+0x1d8>
 8012a6e:	e105      	b.n	8012c7c <HAL_DMA_IRQHandler+0x3e4>
 8012a70:	4b42      	ldr	r3, [pc, #264]	; (8012b7c <HAL_DMA_IRQHandler+0x2e4>)
 8012a72:	6819      	ldr	r1, [r3, #0]
 8012a74:	4b42      	ldr	r3, [pc, #264]	; (8012b80 <HAL_DMA_IRQHandler+0x2e8>)
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d100      	bne.n	8012a7c <HAL_DMA_IRQHandler+0x1e4>
 8012a7a:	e0a1      	b.n	8012bc0 <HAL_DMA_IRQHandler+0x328>
 8012a7c:	4b41      	ldr	r3, [pc, #260]	; (8012b84 <HAL_DMA_IRQHandler+0x2ec>)
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d100      	bne.n	8012a84 <HAL_DMA_IRQHandler+0x1ec>
 8012a82:	e0e3      	b.n	8012c4c <HAL_DMA_IRQHandler+0x3b4>
 8012a84:	4b40      	ldr	r3, [pc, #256]	; (8012b88 <HAL_DMA_IRQHandler+0x2f0>)
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d100      	bne.n	8012a8c <HAL_DMA_IRQHandler+0x1f4>
 8012a8a:	e0e1      	b.n	8012c50 <HAL_DMA_IRQHandler+0x3b8>
 8012a8c:	4b3f      	ldr	r3, [pc, #252]	; (8012b8c <HAL_DMA_IRQHandler+0x2f4>)
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d100      	bne.n	8012a94 <HAL_DMA_IRQHandler+0x1fc>
 8012a92:	e0e0      	b.n	8012c56 <HAL_DMA_IRQHandler+0x3be>
 8012a94:	4b3e      	ldr	r3, [pc, #248]	; (8012b90 <HAL_DMA_IRQHandler+0x2f8>)
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d100      	bne.n	8012a9c <HAL_DMA_IRQHandler+0x204>
 8012a9a:	e0df      	b.n	8012c5c <HAL_DMA_IRQHandler+0x3c4>
 8012a9c:	4b3d      	ldr	r3, [pc, #244]	; (8012b94 <HAL_DMA_IRQHandler+0x2fc>)
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d100      	bne.n	8012aa4 <HAL_DMA_IRQHandler+0x20c>
 8012aa2:	e0de      	b.n	8012c62 <HAL_DMA_IRQHandler+0x3ca>
 8012aa4:	4b34      	ldr	r3, [pc, #208]	; (8012b78 <HAL_DMA_IRQHandler+0x2e0>)
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d100      	bne.n	8012aac <HAL_DMA_IRQHandler+0x214>
 8012aaa:	e0dd      	b.n	8012c68 <HAL_DMA_IRQHandler+0x3d0>
 8012aac:	4b3a      	ldr	r3, [pc, #232]	; (8012b98 <HAL_DMA_IRQHandler+0x300>)
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d100      	bne.n	8012ab4 <HAL_DMA_IRQHandler+0x21c>
 8012ab2:	e0dc      	b.n	8012c6e <HAL_DMA_IRQHandler+0x3d6>
 8012ab4:	4b39      	ldr	r3, [pc, #228]	; (8012b9c <HAL_DMA_IRQHandler+0x304>)
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d100      	bne.n	8012abc <HAL_DMA_IRQHandler+0x224>
 8012aba:	e0da      	b.n	8012c72 <HAL_DMA_IRQHandler+0x3da>
 8012abc:	4b38      	ldr	r3, [pc, #224]	; (8012ba0 <HAL_DMA_IRQHandler+0x308>)
 8012abe:	429a      	cmp	r2, r3
 8012ac0:	d100      	bne.n	8012ac4 <HAL_DMA_IRQHandler+0x22c>
 8012ac2:	e0d8      	b.n	8012c76 <HAL_DMA_IRQHandler+0x3de>
 8012ac4:	4b37      	ldr	r3, [pc, #220]	; (8012ba4 <HAL_DMA_IRQHandler+0x30c>)
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d077      	beq.n	8012bba <HAL_DMA_IRQHandler+0x322>
 8012aca:	2380      	movs	r3, #128	; 0x80
 8012acc:	02db      	lsls	r3, r3, #11
 8012ace:	e078      	b.n	8012bc2 <HAL_DMA_IRQHandler+0x32a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8012ad0:	2280      	movs	r2, #128	; 0x80
 8012ad2:	e7b7      	b.n	8012a44 <HAL_DMA_IRQHandler+0x1ac>
 8012ad4:	2280      	movs	r2, #128	; 0x80
 8012ad6:	0112      	lsls	r2, r2, #4
 8012ad8:	e7b4      	b.n	8012a44 <HAL_DMA_IRQHandler+0x1ac>
 8012ada:	2280      	movs	r2, #128	; 0x80
 8012adc:	0212      	lsls	r2, r2, #8
 8012ade:	e7b1      	b.n	8012a44 <HAL_DMA_IRQHandler+0x1ac>
 8012ae0:	2280      	movs	r2, #128	; 0x80
 8012ae2:	0312      	lsls	r2, r2, #12
 8012ae4:	e7ae      	b.n	8012a44 <HAL_DMA_IRQHandler+0x1ac>
 8012ae6:	2280      	movs	r2, #128	; 0x80
 8012ae8:	0412      	lsls	r2, r2, #16
 8012aea:	e7ab      	b.n	8012a44 <HAL_DMA_IRQHandler+0x1ac>
 8012aec:	2280      	movs	r2, #128	; 0x80
 8012aee:	0512      	lsls	r2, r2, #20
 8012af0:	e7a8      	b.n	8012a44 <HAL_DMA_IRQHandler+0x1ac>
 8012af2:	2208      	movs	r2, #8
 8012af4:	e7a6      	b.n	8012a44 <HAL_DMA_IRQHandler+0x1ac>
 8012af6:	2280      	movs	r2, #128	; 0x80
 8012af8:	e7a4      	b.n	8012a44 <HAL_DMA_IRQHandler+0x1ac>
 8012afa:	2280      	movs	r2, #128	; 0x80
 8012afc:	0112      	lsls	r2, r2, #4
 8012afe:	e7a1      	b.n	8012a44 <HAL_DMA_IRQHandler+0x1ac>
 8012b00:	4a1f      	ldr	r2, [pc, #124]	; (8012b80 <HAL_DMA_IRQHandler+0x2e8>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d023      	beq.n	8012b4e <HAL_DMA_IRQHandler+0x2b6>
 8012b06:	4a1f      	ldr	r2, [pc, #124]	; (8012b84 <HAL_DMA_IRQHandler+0x2ec>)
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d024      	beq.n	8012b56 <HAL_DMA_IRQHandler+0x2be>
 8012b0c:	4a1e      	ldr	r2, [pc, #120]	; (8012b88 <HAL_DMA_IRQHandler+0x2f0>)
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	d023      	beq.n	8012b5a <HAL_DMA_IRQHandler+0x2c2>
 8012b12:	4a1e      	ldr	r2, [pc, #120]	; (8012b8c <HAL_DMA_IRQHandler+0x2f4>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d023      	beq.n	8012b60 <HAL_DMA_IRQHandler+0x2c8>
 8012b18:	4a1d      	ldr	r2, [pc, #116]	; (8012b90 <HAL_DMA_IRQHandler+0x2f8>)
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d023      	beq.n	8012b66 <HAL_DMA_IRQHandler+0x2ce>
 8012b1e:	4a1d      	ldr	r2, [pc, #116]	; (8012b94 <HAL_DMA_IRQHandler+0x2fc>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d023      	beq.n	8012b6c <HAL_DMA_IRQHandler+0x2d4>
 8012b24:	4a14      	ldr	r2, [pc, #80]	; (8012b78 <HAL_DMA_IRQHandler+0x2e0>)
 8012b26:	4293      	cmp	r3, r2
 8012b28:	d023      	beq.n	8012b72 <HAL_DMA_IRQHandler+0x2da>
 8012b2a:	4a1b      	ldr	r2, [pc, #108]	; (8012b98 <HAL_DMA_IRQHandler+0x300>)
 8012b2c:	4293      	cmp	r3, r2
 8012b2e:	d03d      	beq.n	8012bac <HAL_DMA_IRQHandler+0x314>
 8012b30:	4a1a      	ldr	r2, [pc, #104]	; (8012b9c <HAL_DMA_IRQHandler+0x304>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d03c      	beq.n	8012bb0 <HAL_DMA_IRQHandler+0x318>
 8012b36:	4a1a      	ldr	r2, [pc, #104]	; (8012ba0 <HAL_DMA_IRQHandler+0x308>)
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	d03b      	beq.n	8012bb4 <HAL_DMA_IRQHandler+0x31c>
 8012b3c:	4a19      	ldr	r2, [pc, #100]	; (8012ba4 <HAL_DMA_IRQHandler+0x30c>)
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	d002      	beq.n	8012b48 <HAL_DMA_IRQHandler+0x2b0>
 8012b42:	2280      	movs	r2, #128	; 0x80
 8012b44:	0312      	lsls	r2, r2, #12
 8012b46:	e003      	b.n	8012b50 <HAL_DMA_IRQHandler+0x2b8>
 8012b48:	2280      	movs	r2, #128	; 0x80
 8012b4a:	0212      	lsls	r2, r2, #8
 8012b4c:	e000      	b.n	8012b50 <HAL_DMA_IRQHandler+0x2b8>
 8012b4e:	2208      	movs	r2, #8
 8012b50:	4b15      	ldr	r3, [pc, #84]	; (8012ba8 <HAL_DMA_IRQHandler+0x310>)
 8012b52:	605a      	str	r2, [r3, #4]
 8012b54:	e778      	b.n	8012a48 <HAL_DMA_IRQHandler+0x1b0>
 8012b56:	2280      	movs	r2, #128	; 0x80
 8012b58:	e7fa      	b.n	8012b50 <HAL_DMA_IRQHandler+0x2b8>
 8012b5a:	2280      	movs	r2, #128	; 0x80
 8012b5c:	0112      	lsls	r2, r2, #4
 8012b5e:	e7f7      	b.n	8012b50 <HAL_DMA_IRQHandler+0x2b8>
 8012b60:	2280      	movs	r2, #128	; 0x80
 8012b62:	0212      	lsls	r2, r2, #8
 8012b64:	e7f4      	b.n	8012b50 <HAL_DMA_IRQHandler+0x2b8>
 8012b66:	2280      	movs	r2, #128	; 0x80
 8012b68:	0312      	lsls	r2, r2, #12
 8012b6a:	e7f1      	b.n	8012b50 <HAL_DMA_IRQHandler+0x2b8>
 8012b6c:	2280      	movs	r2, #128	; 0x80
 8012b6e:	0412      	lsls	r2, r2, #16
 8012b70:	e7ee      	b.n	8012b50 <HAL_DMA_IRQHandler+0x2b8>
 8012b72:	2280      	movs	r2, #128	; 0x80
 8012b74:	0512      	lsls	r2, r2, #20
 8012b76:	e7eb      	b.n	8012b50 <HAL_DMA_IRQHandler+0x2b8>
 8012b78:	40020080 	.word	0x40020080
 8012b7c:	40020400 	.word	0x40020400
 8012b80:	40020008 	.word	0x40020008
 8012b84:	4002001c 	.word	0x4002001c
 8012b88:	40020030 	.word	0x40020030
 8012b8c:	40020044 	.word	0x40020044
 8012b90:	40020058 	.word	0x40020058
 8012b94:	4002006c 	.word	0x4002006c
 8012b98:	40020408 	.word	0x40020408
 8012b9c:	4002041c 	.word	0x4002041c
 8012ba0:	40020430 	.word	0x40020430
 8012ba4:	40020444 	.word	0x40020444
 8012ba8:	40020000 	.word	0x40020000
 8012bac:	2208      	movs	r2, #8
 8012bae:	e7cf      	b.n	8012b50 <HAL_DMA_IRQHandler+0x2b8>
 8012bb0:	2280      	movs	r2, #128	; 0x80
 8012bb2:	e7cd      	b.n	8012b50 <HAL_DMA_IRQHandler+0x2b8>
 8012bb4:	2280      	movs	r2, #128	; 0x80
 8012bb6:	0112      	lsls	r2, r2, #4
 8012bb8:	e7ca      	b.n	8012b50 <HAL_DMA_IRQHandler+0x2b8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012bba:	2380      	movs	r3, #128	; 0x80
 8012bbc:	01db      	lsls	r3, r3, #7
 8012bbe:	e000      	b.n	8012bc2 <HAL_DMA_IRQHandler+0x32a>
 8012bc0:	2304      	movs	r3, #4
 8012bc2:	400b      	ands	r3, r1
 8012bc4:	1e59      	subs	r1, r3, #1
 8012bc6:	418b      	sbcs	r3, r1
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d100      	bne.n	8012bd0 <HAL_DMA_IRQHandler+0x338>
 8012bce:	e0aa      	b.n	8012d26 <HAL_DMA_IRQHandler+0x48e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8012bd0:	6813      	ldr	r3, [r2, #0]
 8012bd2:	075b      	lsls	r3, r3, #29
 8012bd4:	d400      	bmi.n	8012bd8 <HAL_DMA_IRQHandler+0x340>
 8012bd6:	e0a6      	b.n	8012d26 <HAL_DMA_IRQHandler+0x48e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8012bd8:	6813      	ldr	r3, [r2, #0]
 8012bda:	069b      	lsls	r3, r3, #26
 8012bdc:	d403      	bmi.n	8012be6 <HAL_DMA_IRQHandler+0x34e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012bde:	6813      	ldr	r3, [r2, #0]
 8012be0:	2104      	movs	r1, #4
 8012be2:	438b      	bics	r3, r1
 8012be4:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012be6:	6823      	ldr	r3, [r4, #0]
 8012be8:	4a98      	ldr	r2, [pc, #608]	; (8012e4c <HAL_DMA_IRQHandler+0x5b4>)
 8012bea:	4293      	cmp	r3, r2
 8012bec:	d800      	bhi.n	8012bf0 <HAL_DMA_IRQHandler+0x358>
 8012bee:	e0e7      	b.n	8012dc0 <HAL_DMA_IRQHandler+0x528>
 8012bf0:	4a97      	ldr	r2, [pc, #604]	; (8012e50 <HAL_DMA_IRQHandler+0x5b8>)
 8012bf2:	4293      	cmp	r3, r2
 8012bf4:	d100      	bne.n	8012bf8 <HAL_DMA_IRQHandler+0x360>
 8012bf6:	e08b      	b.n	8012d10 <HAL_DMA_IRQHandler+0x478>
 8012bf8:	4a96      	ldr	r2, [pc, #600]	; (8012e54 <HAL_DMA_IRQHandler+0x5bc>)
 8012bfa:	4293      	cmp	r3, r2
 8012bfc:	d100      	bne.n	8012c00 <HAL_DMA_IRQHandler+0x368>
 8012bfe:	e0c7      	b.n	8012d90 <HAL_DMA_IRQHandler+0x4f8>
 8012c00:	4a95      	ldr	r2, [pc, #596]	; (8012e58 <HAL_DMA_IRQHandler+0x5c0>)
 8012c02:	4293      	cmp	r3, r2
 8012c04:	d100      	bne.n	8012c08 <HAL_DMA_IRQHandler+0x370>
 8012c06:	e0c5      	b.n	8012d94 <HAL_DMA_IRQHandler+0x4fc>
 8012c08:	4a94      	ldr	r2, [pc, #592]	; (8012e5c <HAL_DMA_IRQHandler+0x5c4>)
 8012c0a:	4293      	cmp	r3, r2
 8012c0c:	d100      	bne.n	8012c10 <HAL_DMA_IRQHandler+0x378>
 8012c0e:	e0c4      	b.n	8012d9a <HAL_DMA_IRQHandler+0x502>
 8012c10:	4a93      	ldr	r2, [pc, #588]	; (8012e60 <HAL_DMA_IRQHandler+0x5c8>)
 8012c12:	4293      	cmp	r3, r2
 8012c14:	d100      	bne.n	8012c18 <HAL_DMA_IRQHandler+0x380>
 8012c16:	e0c3      	b.n	8012da0 <HAL_DMA_IRQHandler+0x508>
 8012c18:	4a92      	ldr	r2, [pc, #584]	; (8012e64 <HAL_DMA_IRQHandler+0x5cc>)
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	d100      	bne.n	8012c20 <HAL_DMA_IRQHandler+0x388>
 8012c1e:	e0c2      	b.n	8012da6 <HAL_DMA_IRQHandler+0x50e>
 8012c20:	4a8a      	ldr	r2, [pc, #552]	; (8012e4c <HAL_DMA_IRQHandler+0x5b4>)
 8012c22:	4293      	cmp	r3, r2
 8012c24:	d100      	bne.n	8012c28 <HAL_DMA_IRQHandler+0x390>
 8012c26:	e0c1      	b.n	8012dac <HAL_DMA_IRQHandler+0x514>
 8012c28:	4a8f      	ldr	r2, [pc, #572]	; (8012e68 <HAL_DMA_IRQHandler+0x5d0>)
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	d100      	bne.n	8012c30 <HAL_DMA_IRQHandler+0x398>
 8012c2e:	e0c0      	b.n	8012db2 <HAL_DMA_IRQHandler+0x51a>
 8012c30:	4a8e      	ldr	r2, [pc, #568]	; (8012e6c <HAL_DMA_IRQHandler+0x5d4>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d100      	bne.n	8012c38 <HAL_DMA_IRQHandler+0x3a0>
 8012c36:	e0be      	b.n	8012db6 <HAL_DMA_IRQHandler+0x51e>
 8012c38:	4a8d      	ldr	r2, [pc, #564]	; (8012e70 <HAL_DMA_IRQHandler+0x5d8>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d100      	bne.n	8012c40 <HAL_DMA_IRQHandler+0x3a8>
 8012c3e:	e0bc      	b.n	8012dba <HAL_DMA_IRQHandler+0x522>
 8012c40:	4a8c      	ldr	r2, [pc, #560]	; (8012e74 <HAL_DMA_IRQHandler+0x5dc>)
 8012c42:	4293      	cmp	r3, r2
 8012c44:	d061      	beq.n	8012d0a <HAL_DMA_IRQHandler+0x472>
 8012c46:	2280      	movs	r2, #128	; 0x80
 8012c48:	02d2      	lsls	r2, r2, #11
 8012c4a:	e062      	b.n	8012d12 <HAL_DMA_IRQHandler+0x47a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012c4c:	2340      	movs	r3, #64	; 0x40
 8012c4e:	e7b8      	b.n	8012bc2 <HAL_DMA_IRQHandler+0x32a>
 8012c50:	2380      	movs	r3, #128	; 0x80
 8012c52:	00db      	lsls	r3, r3, #3
 8012c54:	e7b5      	b.n	8012bc2 <HAL_DMA_IRQHandler+0x32a>
 8012c56:	2380      	movs	r3, #128	; 0x80
 8012c58:	01db      	lsls	r3, r3, #7
 8012c5a:	e7b2      	b.n	8012bc2 <HAL_DMA_IRQHandler+0x32a>
 8012c5c:	2380      	movs	r3, #128	; 0x80
 8012c5e:	02db      	lsls	r3, r3, #11
 8012c60:	e7af      	b.n	8012bc2 <HAL_DMA_IRQHandler+0x32a>
 8012c62:	2380      	movs	r3, #128	; 0x80
 8012c64:	03db      	lsls	r3, r3, #15
 8012c66:	e7ac      	b.n	8012bc2 <HAL_DMA_IRQHandler+0x32a>
 8012c68:	2380      	movs	r3, #128	; 0x80
 8012c6a:	04db      	lsls	r3, r3, #19
 8012c6c:	e7a9      	b.n	8012bc2 <HAL_DMA_IRQHandler+0x32a>
 8012c6e:	2304      	movs	r3, #4
 8012c70:	e7a7      	b.n	8012bc2 <HAL_DMA_IRQHandler+0x32a>
 8012c72:	2340      	movs	r3, #64	; 0x40
 8012c74:	e7a5      	b.n	8012bc2 <HAL_DMA_IRQHandler+0x32a>
 8012c76:	2380      	movs	r3, #128	; 0x80
 8012c78:	00db      	lsls	r3, r3, #3
 8012c7a:	e7a2      	b.n	8012bc2 <HAL_DMA_IRQHandler+0x32a>
 8012c7c:	4b7e      	ldr	r3, [pc, #504]	; (8012e78 <HAL_DMA_IRQHandler+0x5e0>)
 8012c7e:	6819      	ldr	r1, [r3, #0]
 8012c80:	4b73      	ldr	r3, [pc, #460]	; (8012e50 <HAL_DMA_IRQHandler+0x5b8>)
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d023      	beq.n	8012cce <HAL_DMA_IRQHandler+0x436>
 8012c86:	4b73      	ldr	r3, [pc, #460]	; (8012e54 <HAL_DMA_IRQHandler+0x5bc>)
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d026      	beq.n	8012cda <HAL_DMA_IRQHandler+0x442>
 8012c8c:	4b72      	ldr	r3, [pc, #456]	; (8012e58 <HAL_DMA_IRQHandler+0x5c0>)
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d025      	beq.n	8012cde <HAL_DMA_IRQHandler+0x446>
 8012c92:	4b72      	ldr	r3, [pc, #456]	; (8012e5c <HAL_DMA_IRQHandler+0x5c4>)
 8012c94:	429a      	cmp	r2, r3
 8012c96:	d025      	beq.n	8012ce4 <HAL_DMA_IRQHandler+0x44c>
 8012c98:	4b71      	ldr	r3, [pc, #452]	; (8012e60 <HAL_DMA_IRQHandler+0x5c8>)
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d025      	beq.n	8012cea <HAL_DMA_IRQHandler+0x452>
 8012c9e:	4b71      	ldr	r3, [pc, #452]	; (8012e64 <HAL_DMA_IRQHandler+0x5cc>)
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	d025      	beq.n	8012cf0 <HAL_DMA_IRQHandler+0x458>
 8012ca4:	4b69      	ldr	r3, [pc, #420]	; (8012e4c <HAL_DMA_IRQHandler+0x5b4>)
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d025      	beq.n	8012cf6 <HAL_DMA_IRQHandler+0x45e>
 8012caa:	4b6f      	ldr	r3, [pc, #444]	; (8012e68 <HAL_DMA_IRQHandler+0x5d0>)
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d025      	beq.n	8012cfc <HAL_DMA_IRQHandler+0x464>
 8012cb0:	4b6e      	ldr	r3, [pc, #440]	; (8012e6c <HAL_DMA_IRQHandler+0x5d4>)
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d024      	beq.n	8012d00 <HAL_DMA_IRQHandler+0x468>
 8012cb6:	4b6e      	ldr	r3, [pc, #440]	; (8012e70 <HAL_DMA_IRQHandler+0x5d8>)
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d023      	beq.n	8012d04 <HAL_DMA_IRQHandler+0x46c>
 8012cbc:	4b6d      	ldr	r3, [pc, #436]	; (8012e74 <HAL_DMA_IRQHandler+0x5dc>)
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d002      	beq.n	8012cc8 <HAL_DMA_IRQHandler+0x430>
 8012cc2:	2380      	movs	r3, #128	; 0x80
 8012cc4:	02db      	lsls	r3, r3, #11
 8012cc6:	e003      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x438>
 8012cc8:	2380      	movs	r3, #128	; 0x80
 8012cca:	01db      	lsls	r3, r3, #7
 8012ccc:	e000      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x438>
 8012cce:	2304      	movs	r3, #4
 8012cd0:	400b      	ands	r3, r1
 8012cd2:	1e59      	subs	r1, r3, #1
 8012cd4:	418b      	sbcs	r3, r1
 8012cd6:	b2db      	uxtb	r3, r3
 8012cd8:	e777      	b.n	8012bca <HAL_DMA_IRQHandler+0x332>
 8012cda:	2340      	movs	r3, #64	; 0x40
 8012cdc:	e7f8      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x438>
 8012cde:	2380      	movs	r3, #128	; 0x80
 8012ce0:	00db      	lsls	r3, r3, #3
 8012ce2:	e7f5      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x438>
 8012ce4:	2380      	movs	r3, #128	; 0x80
 8012ce6:	01db      	lsls	r3, r3, #7
 8012ce8:	e7f2      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x438>
 8012cea:	2380      	movs	r3, #128	; 0x80
 8012cec:	02db      	lsls	r3, r3, #11
 8012cee:	e7ef      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x438>
 8012cf0:	2380      	movs	r3, #128	; 0x80
 8012cf2:	03db      	lsls	r3, r3, #15
 8012cf4:	e7ec      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x438>
 8012cf6:	2380      	movs	r3, #128	; 0x80
 8012cf8:	04db      	lsls	r3, r3, #19
 8012cfa:	e7e9      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x438>
 8012cfc:	2304      	movs	r3, #4
 8012cfe:	e7e7      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x438>
 8012d00:	2340      	movs	r3, #64	; 0x40
 8012d02:	e7e5      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x438>
 8012d04:	2380      	movs	r3, #128	; 0x80
 8012d06:	00db      	lsls	r3, r3, #3
 8012d08:	e7e2      	b.n	8012cd0 <HAL_DMA_IRQHandler+0x438>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012d0a:	2280      	movs	r2, #128	; 0x80
 8012d0c:	01d2      	lsls	r2, r2, #7
 8012d0e:	e000      	b.n	8012d12 <HAL_DMA_IRQHandler+0x47a>
 8012d10:	2204      	movs	r2, #4
 8012d12:	4b5a      	ldr	r3, [pc, #360]	; (8012e7c <HAL_DMA_IRQHandler+0x5e4>)
 8012d14:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8012d16:	2321      	movs	r3, #33	; 0x21
 8012d18:	2211      	movs	r2, #17
 8012d1a:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8012d1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d001      	beq.n	8012d26 <HAL_DMA_IRQHandler+0x48e>
        hdma->XferHalfCpltCallback(hdma);
 8012d22:	0020      	movs	r0, r4
 8012d24:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8012d26:	6822      	ldr	r2, [r4, #0]
 8012d28:	4b48      	ldr	r3, [pc, #288]	; (8012e4c <HAL_DMA_IRQHandler+0x5b4>)
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d800      	bhi.n	8012d30 <HAL_DMA_IRQHandler+0x498>
 8012d2e:	e105      	b.n	8012f3c <HAL_DMA_IRQHandler+0x6a4>
 8012d30:	4b52      	ldr	r3, [pc, #328]	; (8012e7c <HAL_DMA_IRQHandler+0x5e4>)
 8012d32:	6819      	ldr	r1, [r3, #0]
 8012d34:	4b46      	ldr	r3, [pc, #280]	; (8012e50 <HAL_DMA_IRQHandler+0x5b8>)
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d100      	bne.n	8012d3c <HAL_DMA_IRQHandler+0x4a4>
 8012d3a:	e0a1      	b.n	8012e80 <HAL_DMA_IRQHandler+0x5e8>
 8012d3c:	4b45      	ldr	r3, [pc, #276]	; (8012e54 <HAL_DMA_IRQHandler+0x5bc>)
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d100      	bne.n	8012d44 <HAL_DMA_IRQHandler+0x4ac>
 8012d42:	e0e3      	b.n	8012f0c <HAL_DMA_IRQHandler+0x674>
 8012d44:	4b44      	ldr	r3, [pc, #272]	; (8012e58 <HAL_DMA_IRQHandler+0x5c0>)
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d100      	bne.n	8012d4c <HAL_DMA_IRQHandler+0x4b4>
 8012d4a:	e0e1      	b.n	8012f10 <HAL_DMA_IRQHandler+0x678>
 8012d4c:	4b43      	ldr	r3, [pc, #268]	; (8012e5c <HAL_DMA_IRQHandler+0x5c4>)
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	d100      	bne.n	8012d54 <HAL_DMA_IRQHandler+0x4bc>
 8012d52:	e0e0      	b.n	8012f16 <HAL_DMA_IRQHandler+0x67e>
 8012d54:	4b42      	ldr	r3, [pc, #264]	; (8012e60 <HAL_DMA_IRQHandler+0x5c8>)
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d100      	bne.n	8012d5c <HAL_DMA_IRQHandler+0x4c4>
 8012d5a:	e0df      	b.n	8012f1c <HAL_DMA_IRQHandler+0x684>
 8012d5c:	4b41      	ldr	r3, [pc, #260]	; (8012e64 <HAL_DMA_IRQHandler+0x5cc>)
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d100      	bne.n	8012d64 <HAL_DMA_IRQHandler+0x4cc>
 8012d62:	e0de      	b.n	8012f22 <HAL_DMA_IRQHandler+0x68a>
 8012d64:	4b39      	ldr	r3, [pc, #228]	; (8012e4c <HAL_DMA_IRQHandler+0x5b4>)
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d100      	bne.n	8012d6c <HAL_DMA_IRQHandler+0x4d4>
 8012d6a:	e0dd      	b.n	8012f28 <HAL_DMA_IRQHandler+0x690>
 8012d6c:	4b3e      	ldr	r3, [pc, #248]	; (8012e68 <HAL_DMA_IRQHandler+0x5d0>)
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d100      	bne.n	8012d74 <HAL_DMA_IRQHandler+0x4dc>
 8012d72:	e0dc      	b.n	8012f2e <HAL_DMA_IRQHandler+0x696>
 8012d74:	4b3d      	ldr	r3, [pc, #244]	; (8012e6c <HAL_DMA_IRQHandler+0x5d4>)
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d100      	bne.n	8012d7c <HAL_DMA_IRQHandler+0x4e4>
 8012d7a:	e0da      	b.n	8012f32 <HAL_DMA_IRQHandler+0x69a>
 8012d7c:	4b3c      	ldr	r3, [pc, #240]	; (8012e70 <HAL_DMA_IRQHandler+0x5d8>)
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d100      	bne.n	8012d84 <HAL_DMA_IRQHandler+0x4ec>
 8012d82:	e0d8      	b.n	8012f36 <HAL_DMA_IRQHandler+0x69e>
 8012d84:	4b3b      	ldr	r3, [pc, #236]	; (8012e74 <HAL_DMA_IRQHandler+0x5dc>)
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d05d      	beq.n	8012e46 <HAL_DMA_IRQHandler+0x5ae>
 8012d8a:	2380      	movs	r3, #128	; 0x80
 8012d8c:	029b      	lsls	r3, r3, #10
 8012d8e:	e078      	b.n	8012e82 <HAL_DMA_IRQHandler+0x5ea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012d90:	2240      	movs	r2, #64	; 0x40
 8012d92:	e7be      	b.n	8012d12 <HAL_DMA_IRQHandler+0x47a>
 8012d94:	2280      	movs	r2, #128	; 0x80
 8012d96:	00d2      	lsls	r2, r2, #3
 8012d98:	e7bb      	b.n	8012d12 <HAL_DMA_IRQHandler+0x47a>
 8012d9a:	2280      	movs	r2, #128	; 0x80
 8012d9c:	01d2      	lsls	r2, r2, #7
 8012d9e:	e7b8      	b.n	8012d12 <HAL_DMA_IRQHandler+0x47a>
 8012da0:	2280      	movs	r2, #128	; 0x80
 8012da2:	02d2      	lsls	r2, r2, #11
 8012da4:	e7b5      	b.n	8012d12 <HAL_DMA_IRQHandler+0x47a>
 8012da6:	2280      	movs	r2, #128	; 0x80
 8012da8:	03d2      	lsls	r2, r2, #15
 8012daa:	e7b2      	b.n	8012d12 <HAL_DMA_IRQHandler+0x47a>
 8012dac:	2280      	movs	r2, #128	; 0x80
 8012dae:	04d2      	lsls	r2, r2, #19
 8012db0:	e7af      	b.n	8012d12 <HAL_DMA_IRQHandler+0x47a>
 8012db2:	2204      	movs	r2, #4
 8012db4:	e7ad      	b.n	8012d12 <HAL_DMA_IRQHandler+0x47a>
 8012db6:	2240      	movs	r2, #64	; 0x40
 8012db8:	e7ab      	b.n	8012d12 <HAL_DMA_IRQHandler+0x47a>
 8012dba:	2280      	movs	r2, #128	; 0x80
 8012dbc:	00d2      	lsls	r2, r2, #3
 8012dbe:	e7a8      	b.n	8012d12 <HAL_DMA_IRQHandler+0x47a>
 8012dc0:	4a23      	ldr	r2, [pc, #140]	; (8012e50 <HAL_DMA_IRQHandler+0x5b8>)
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	d023      	beq.n	8012e0e <HAL_DMA_IRQHandler+0x576>
 8012dc6:	4a23      	ldr	r2, [pc, #140]	; (8012e54 <HAL_DMA_IRQHandler+0x5bc>)
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	d024      	beq.n	8012e16 <HAL_DMA_IRQHandler+0x57e>
 8012dcc:	4a22      	ldr	r2, [pc, #136]	; (8012e58 <HAL_DMA_IRQHandler+0x5c0>)
 8012dce:	4293      	cmp	r3, r2
 8012dd0:	d023      	beq.n	8012e1a <HAL_DMA_IRQHandler+0x582>
 8012dd2:	4a22      	ldr	r2, [pc, #136]	; (8012e5c <HAL_DMA_IRQHandler+0x5c4>)
 8012dd4:	4293      	cmp	r3, r2
 8012dd6:	d023      	beq.n	8012e20 <HAL_DMA_IRQHandler+0x588>
 8012dd8:	4a21      	ldr	r2, [pc, #132]	; (8012e60 <HAL_DMA_IRQHandler+0x5c8>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	d023      	beq.n	8012e26 <HAL_DMA_IRQHandler+0x58e>
 8012dde:	4a21      	ldr	r2, [pc, #132]	; (8012e64 <HAL_DMA_IRQHandler+0x5cc>)
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d023      	beq.n	8012e2c <HAL_DMA_IRQHandler+0x594>
 8012de4:	4a19      	ldr	r2, [pc, #100]	; (8012e4c <HAL_DMA_IRQHandler+0x5b4>)
 8012de6:	4293      	cmp	r3, r2
 8012de8:	d023      	beq.n	8012e32 <HAL_DMA_IRQHandler+0x59a>
 8012dea:	4a1f      	ldr	r2, [pc, #124]	; (8012e68 <HAL_DMA_IRQHandler+0x5d0>)
 8012dec:	4293      	cmp	r3, r2
 8012dee:	d023      	beq.n	8012e38 <HAL_DMA_IRQHandler+0x5a0>
 8012df0:	4a1e      	ldr	r2, [pc, #120]	; (8012e6c <HAL_DMA_IRQHandler+0x5d4>)
 8012df2:	4293      	cmp	r3, r2
 8012df4:	d022      	beq.n	8012e3c <HAL_DMA_IRQHandler+0x5a4>
 8012df6:	4a1e      	ldr	r2, [pc, #120]	; (8012e70 <HAL_DMA_IRQHandler+0x5d8>)
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d021      	beq.n	8012e40 <HAL_DMA_IRQHandler+0x5a8>
 8012dfc:	4a1d      	ldr	r2, [pc, #116]	; (8012e74 <HAL_DMA_IRQHandler+0x5dc>)
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	d002      	beq.n	8012e08 <HAL_DMA_IRQHandler+0x570>
 8012e02:	2280      	movs	r2, #128	; 0x80
 8012e04:	02d2      	lsls	r2, r2, #11
 8012e06:	e003      	b.n	8012e10 <HAL_DMA_IRQHandler+0x578>
 8012e08:	2280      	movs	r2, #128	; 0x80
 8012e0a:	01d2      	lsls	r2, r2, #7
 8012e0c:	e000      	b.n	8012e10 <HAL_DMA_IRQHandler+0x578>
 8012e0e:	2204      	movs	r2, #4
 8012e10:	4b19      	ldr	r3, [pc, #100]	; (8012e78 <HAL_DMA_IRQHandler+0x5e0>)
 8012e12:	605a      	str	r2, [r3, #4]
 8012e14:	e77f      	b.n	8012d16 <HAL_DMA_IRQHandler+0x47e>
 8012e16:	2240      	movs	r2, #64	; 0x40
 8012e18:	e7fa      	b.n	8012e10 <HAL_DMA_IRQHandler+0x578>
 8012e1a:	2280      	movs	r2, #128	; 0x80
 8012e1c:	00d2      	lsls	r2, r2, #3
 8012e1e:	e7f7      	b.n	8012e10 <HAL_DMA_IRQHandler+0x578>
 8012e20:	2280      	movs	r2, #128	; 0x80
 8012e22:	01d2      	lsls	r2, r2, #7
 8012e24:	e7f4      	b.n	8012e10 <HAL_DMA_IRQHandler+0x578>
 8012e26:	2280      	movs	r2, #128	; 0x80
 8012e28:	02d2      	lsls	r2, r2, #11
 8012e2a:	e7f1      	b.n	8012e10 <HAL_DMA_IRQHandler+0x578>
 8012e2c:	2280      	movs	r2, #128	; 0x80
 8012e2e:	03d2      	lsls	r2, r2, #15
 8012e30:	e7ee      	b.n	8012e10 <HAL_DMA_IRQHandler+0x578>
 8012e32:	2280      	movs	r2, #128	; 0x80
 8012e34:	04d2      	lsls	r2, r2, #19
 8012e36:	e7eb      	b.n	8012e10 <HAL_DMA_IRQHandler+0x578>
 8012e38:	2204      	movs	r2, #4
 8012e3a:	e7e9      	b.n	8012e10 <HAL_DMA_IRQHandler+0x578>
 8012e3c:	2240      	movs	r2, #64	; 0x40
 8012e3e:	e7e7      	b.n	8012e10 <HAL_DMA_IRQHandler+0x578>
 8012e40:	2280      	movs	r2, #128	; 0x80
 8012e42:	00d2      	lsls	r2, r2, #3
 8012e44:	e7e4      	b.n	8012e10 <HAL_DMA_IRQHandler+0x578>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8012e46:	2380      	movs	r3, #128	; 0x80
 8012e48:	019b      	lsls	r3, r3, #6
 8012e4a:	e01a      	b.n	8012e82 <HAL_DMA_IRQHandler+0x5ea>
 8012e4c:	40020080 	.word	0x40020080
 8012e50:	40020008 	.word	0x40020008
 8012e54:	4002001c 	.word	0x4002001c
 8012e58:	40020030 	.word	0x40020030
 8012e5c:	40020044 	.word	0x40020044
 8012e60:	40020058 	.word	0x40020058
 8012e64:	4002006c 	.word	0x4002006c
 8012e68:	40020408 	.word	0x40020408
 8012e6c:	4002041c 	.word	0x4002041c
 8012e70:	40020430 	.word	0x40020430
 8012e74:	40020444 	.word	0x40020444
 8012e78:	40020000 	.word	0x40020000
 8012e7c:	40020400 	.word	0x40020400
 8012e80:	2302      	movs	r3, #2
 8012e82:	400b      	ands	r3, r1
 8012e84:	1e59      	subs	r1, r3, #1
 8012e86:	418b      	sbcs	r3, r1
 8012e88:	b2db      	uxtb	r3, r3
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d100      	bne.n	8012e90 <HAL_DMA_IRQHandler+0x5f8>
 8012e8e:	e0af      	b.n	8012ff0 <HAL_DMA_IRQHandler+0x758>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8012e90:	6813      	ldr	r3, [r2, #0]
 8012e92:	079b      	lsls	r3, r3, #30
 8012e94:	d400      	bmi.n	8012e98 <HAL_DMA_IRQHandler+0x600>
 8012e96:	e0ab      	b.n	8012ff0 <HAL_DMA_IRQHandler+0x758>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8012e98:	6813      	ldr	r3, [r2, #0]
 8012e9a:	069b      	lsls	r3, r3, #26
 8012e9c:	d403      	bmi.n	8012ea6 <HAL_DMA_IRQHandler+0x60e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8012e9e:	6813      	ldr	r3, [r2, #0]
 8012ea0:	2102      	movs	r1, #2
 8012ea2:	438b      	bics	r3, r1
 8012ea4:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012ea6:	6823      	ldr	r3, [r4, #0]
 8012ea8:	4a7f      	ldr	r2, [pc, #508]	; (80130a8 <HAL_DMA_IRQHandler+0x810>)
 8012eaa:	4293      	cmp	r3, r2
 8012eac:	d800      	bhi.n	8012eb0 <HAL_DMA_IRQHandler+0x618>
 8012eae:	e0b8      	b.n	8013022 <HAL_DMA_IRQHandler+0x78a>
 8012eb0:	4a7e      	ldr	r2, [pc, #504]	; (80130ac <HAL_DMA_IRQHandler+0x814>)
 8012eb2:	4293      	cmp	r3, r2
 8012eb4:	d100      	bne.n	8012eb8 <HAL_DMA_IRQHandler+0x620>
 8012eb6:	e08b      	b.n	8012fd0 <HAL_DMA_IRQHandler+0x738>
 8012eb8:	4a7d      	ldr	r2, [pc, #500]	; (80130b0 <HAL_DMA_IRQHandler+0x818>)
 8012eba:	4293      	cmp	r3, r2
 8012ebc:	d100      	bne.n	8012ec0 <HAL_DMA_IRQHandler+0x628>
 8012ebe:	e098      	b.n	8012ff2 <HAL_DMA_IRQHandler+0x75a>
 8012ec0:	4a7c      	ldr	r2, [pc, #496]	; (80130b4 <HAL_DMA_IRQHandler+0x81c>)
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	d100      	bne.n	8012ec8 <HAL_DMA_IRQHandler+0x630>
 8012ec6:	e096      	b.n	8012ff6 <HAL_DMA_IRQHandler+0x75e>
 8012ec8:	4a7b      	ldr	r2, [pc, #492]	; (80130b8 <HAL_DMA_IRQHandler+0x820>)
 8012eca:	4293      	cmp	r3, r2
 8012ecc:	d100      	bne.n	8012ed0 <HAL_DMA_IRQHandler+0x638>
 8012ece:	e095      	b.n	8012ffc <HAL_DMA_IRQHandler+0x764>
 8012ed0:	4a7a      	ldr	r2, [pc, #488]	; (80130bc <HAL_DMA_IRQHandler+0x824>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d100      	bne.n	8012ed8 <HAL_DMA_IRQHandler+0x640>
 8012ed6:	e094      	b.n	8013002 <HAL_DMA_IRQHandler+0x76a>
 8012ed8:	4a79      	ldr	r2, [pc, #484]	; (80130c0 <HAL_DMA_IRQHandler+0x828>)
 8012eda:	4293      	cmp	r3, r2
 8012edc:	d100      	bne.n	8012ee0 <HAL_DMA_IRQHandler+0x648>
 8012ede:	e093      	b.n	8013008 <HAL_DMA_IRQHandler+0x770>
 8012ee0:	4a71      	ldr	r2, [pc, #452]	; (80130a8 <HAL_DMA_IRQHandler+0x810>)
 8012ee2:	4293      	cmp	r3, r2
 8012ee4:	d100      	bne.n	8012ee8 <HAL_DMA_IRQHandler+0x650>
 8012ee6:	e092      	b.n	801300e <HAL_DMA_IRQHandler+0x776>
 8012ee8:	4a76      	ldr	r2, [pc, #472]	; (80130c4 <HAL_DMA_IRQHandler+0x82c>)
 8012eea:	4293      	cmp	r3, r2
 8012eec:	d100      	bne.n	8012ef0 <HAL_DMA_IRQHandler+0x658>
 8012eee:	e091      	b.n	8013014 <HAL_DMA_IRQHandler+0x77c>
 8012ef0:	4a75      	ldr	r2, [pc, #468]	; (80130c8 <HAL_DMA_IRQHandler+0x830>)
 8012ef2:	4293      	cmp	r3, r2
 8012ef4:	d100      	bne.n	8012ef8 <HAL_DMA_IRQHandler+0x660>
 8012ef6:	e08f      	b.n	8013018 <HAL_DMA_IRQHandler+0x780>
 8012ef8:	4a74      	ldr	r2, [pc, #464]	; (80130cc <HAL_DMA_IRQHandler+0x834>)
 8012efa:	4293      	cmp	r3, r2
 8012efc:	d100      	bne.n	8012f00 <HAL_DMA_IRQHandler+0x668>
 8012efe:	e08d      	b.n	801301c <HAL_DMA_IRQHandler+0x784>
 8012f00:	4a73      	ldr	r2, [pc, #460]	; (80130d0 <HAL_DMA_IRQHandler+0x838>)
 8012f02:	4293      	cmp	r3, r2
 8012f04:	d061      	beq.n	8012fca <HAL_DMA_IRQHandler+0x732>
 8012f06:	2280      	movs	r2, #128	; 0x80
 8012f08:	0292      	lsls	r2, r2, #10
 8012f0a:	e062      	b.n	8012fd2 <HAL_DMA_IRQHandler+0x73a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8012f0c:	2320      	movs	r3, #32
 8012f0e:	e7b8      	b.n	8012e82 <HAL_DMA_IRQHandler+0x5ea>
 8012f10:	2380      	movs	r3, #128	; 0x80
 8012f12:	009b      	lsls	r3, r3, #2
 8012f14:	e7b5      	b.n	8012e82 <HAL_DMA_IRQHandler+0x5ea>
 8012f16:	2380      	movs	r3, #128	; 0x80
 8012f18:	019b      	lsls	r3, r3, #6
 8012f1a:	e7b2      	b.n	8012e82 <HAL_DMA_IRQHandler+0x5ea>
 8012f1c:	2380      	movs	r3, #128	; 0x80
 8012f1e:	029b      	lsls	r3, r3, #10
 8012f20:	e7af      	b.n	8012e82 <HAL_DMA_IRQHandler+0x5ea>
 8012f22:	2380      	movs	r3, #128	; 0x80
 8012f24:	039b      	lsls	r3, r3, #14
 8012f26:	e7ac      	b.n	8012e82 <HAL_DMA_IRQHandler+0x5ea>
 8012f28:	2380      	movs	r3, #128	; 0x80
 8012f2a:	049b      	lsls	r3, r3, #18
 8012f2c:	e7a9      	b.n	8012e82 <HAL_DMA_IRQHandler+0x5ea>
 8012f2e:	2302      	movs	r3, #2
 8012f30:	e7a7      	b.n	8012e82 <HAL_DMA_IRQHandler+0x5ea>
 8012f32:	2320      	movs	r3, #32
 8012f34:	e7a5      	b.n	8012e82 <HAL_DMA_IRQHandler+0x5ea>
 8012f36:	2380      	movs	r3, #128	; 0x80
 8012f38:	009b      	lsls	r3, r3, #2
 8012f3a:	e7a2      	b.n	8012e82 <HAL_DMA_IRQHandler+0x5ea>
 8012f3c:	4b65      	ldr	r3, [pc, #404]	; (80130d4 <HAL_DMA_IRQHandler+0x83c>)
 8012f3e:	6819      	ldr	r1, [r3, #0]
 8012f40:	4b5a      	ldr	r3, [pc, #360]	; (80130ac <HAL_DMA_IRQHandler+0x814>)
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d023      	beq.n	8012f8e <HAL_DMA_IRQHandler+0x6f6>
 8012f46:	4b5a      	ldr	r3, [pc, #360]	; (80130b0 <HAL_DMA_IRQHandler+0x818>)
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d026      	beq.n	8012f9a <HAL_DMA_IRQHandler+0x702>
 8012f4c:	4b59      	ldr	r3, [pc, #356]	; (80130b4 <HAL_DMA_IRQHandler+0x81c>)
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d025      	beq.n	8012f9e <HAL_DMA_IRQHandler+0x706>
 8012f52:	4b59      	ldr	r3, [pc, #356]	; (80130b8 <HAL_DMA_IRQHandler+0x820>)
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d025      	beq.n	8012fa4 <HAL_DMA_IRQHandler+0x70c>
 8012f58:	4b58      	ldr	r3, [pc, #352]	; (80130bc <HAL_DMA_IRQHandler+0x824>)
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d025      	beq.n	8012faa <HAL_DMA_IRQHandler+0x712>
 8012f5e:	4b58      	ldr	r3, [pc, #352]	; (80130c0 <HAL_DMA_IRQHandler+0x828>)
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d025      	beq.n	8012fb0 <HAL_DMA_IRQHandler+0x718>
 8012f64:	4b50      	ldr	r3, [pc, #320]	; (80130a8 <HAL_DMA_IRQHandler+0x810>)
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d025      	beq.n	8012fb6 <HAL_DMA_IRQHandler+0x71e>
 8012f6a:	4b56      	ldr	r3, [pc, #344]	; (80130c4 <HAL_DMA_IRQHandler+0x82c>)
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d025      	beq.n	8012fbc <HAL_DMA_IRQHandler+0x724>
 8012f70:	4b55      	ldr	r3, [pc, #340]	; (80130c8 <HAL_DMA_IRQHandler+0x830>)
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d024      	beq.n	8012fc0 <HAL_DMA_IRQHandler+0x728>
 8012f76:	4b55      	ldr	r3, [pc, #340]	; (80130cc <HAL_DMA_IRQHandler+0x834>)
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d023      	beq.n	8012fc4 <HAL_DMA_IRQHandler+0x72c>
 8012f7c:	4b54      	ldr	r3, [pc, #336]	; (80130d0 <HAL_DMA_IRQHandler+0x838>)
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d002      	beq.n	8012f88 <HAL_DMA_IRQHandler+0x6f0>
 8012f82:	2380      	movs	r3, #128	; 0x80
 8012f84:	029b      	lsls	r3, r3, #10
 8012f86:	e003      	b.n	8012f90 <HAL_DMA_IRQHandler+0x6f8>
 8012f88:	2380      	movs	r3, #128	; 0x80
 8012f8a:	019b      	lsls	r3, r3, #6
 8012f8c:	e000      	b.n	8012f90 <HAL_DMA_IRQHandler+0x6f8>
 8012f8e:	2302      	movs	r3, #2
 8012f90:	400b      	ands	r3, r1
 8012f92:	1e59      	subs	r1, r3, #1
 8012f94:	418b      	sbcs	r3, r1
 8012f96:	b2db      	uxtb	r3, r3
 8012f98:	e777      	b.n	8012e8a <HAL_DMA_IRQHandler+0x5f2>
 8012f9a:	2320      	movs	r3, #32
 8012f9c:	e7f8      	b.n	8012f90 <HAL_DMA_IRQHandler+0x6f8>
 8012f9e:	2380      	movs	r3, #128	; 0x80
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	e7f5      	b.n	8012f90 <HAL_DMA_IRQHandler+0x6f8>
 8012fa4:	2380      	movs	r3, #128	; 0x80
 8012fa6:	019b      	lsls	r3, r3, #6
 8012fa8:	e7f2      	b.n	8012f90 <HAL_DMA_IRQHandler+0x6f8>
 8012faa:	2380      	movs	r3, #128	; 0x80
 8012fac:	029b      	lsls	r3, r3, #10
 8012fae:	e7ef      	b.n	8012f90 <HAL_DMA_IRQHandler+0x6f8>
 8012fb0:	2380      	movs	r3, #128	; 0x80
 8012fb2:	039b      	lsls	r3, r3, #14
 8012fb4:	e7ec      	b.n	8012f90 <HAL_DMA_IRQHandler+0x6f8>
 8012fb6:	2380      	movs	r3, #128	; 0x80
 8012fb8:	049b      	lsls	r3, r3, #18
 8012fba:	e7e9      	b.n	8012f90 <HAL_DMA_IRQHandler+0x6f8>
 8012fbc:	2302      	movs	r3, #2
 8012fbe:	e7e7      	b.n	8012f90 <HAL_DMA_IRQHandler+0x6f8>
 8012fc0:	2320      	movs	r3, #32
 8012fc2:	e7e5      	b.n	8012f90 <HAL_DMA_IRQHandler+0x6f8>
 8012fc4:	2380      	movs	r3, #128	; 0x80
 8012fc6:	009b      	lsls	r3, r3, #2
 8012fc8:	e7e2      	b.n	8012f90 <HAL_DMA_IRQHandler+0x6f8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012fca:	2280      	movs	r2, #128	; 0x80
 8012fcc:	0192      	lsls	r2, r2, #6
 8012fce:	e000      	b.n	8012fd2 <HAL_DMA_IRQHandler+0x73a>
 8012fd0:	2202      	movs	r2, #2
 8012fd2:	4b41      	ldr	r3, [pc, #260]	; (80130d8 <HAL_DMA_IRQHandler+0x840>)
 8012fd4:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8012fd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012fd8:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8012fda:	2321      	movs	r3, #33	; 0x21
 8012fdc:	2201      	movs	r2, #1
 8012fde:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8012fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d001      	beq.n	8012ff0 <HAL_DMA_IRQHandler+0x758>
        hdma->XferCpltCallback(hdma);
 8012fec:	0020      	movs	r0, r4
 8012fee:	4798      	blx	r3
}  
 8012ff0:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012ff2:	2220      	movs	r2, #32
 8012ff4:	e7ed      	b.n	8012fd2 <HAL_DMA_IRQHandler+0x73a>
 8012ff6:	2280      	movs	r2, #128	; 0x80
 8012ff8:	0092      	lsls	r2, r2, #2
 8012ffa:	e7ea      	b.n	8012fd2 <HAL_DMA_IRQHandler+0x73a>
 8012ffc:	2280      	movs	r2, #128	; 0x80
 8012ffe:	0192      	lsls	r2, r2, #6
 8013000:	e7e7      	b.n	8012fd2 <HAL_DMA_IRQHandler+0x73a>
 8013002:	2280      	movs	r2, #128	; 0x80
 8013004:	0292      	lsls	r2, r2, #10
 8013006:	e7e4      	b.n	8012fd2 <HAL_DMA_IRQHandler+0x73a>
 8013008:	2280      	movs	r2, #128	; 0x80
 801300a:	0392      	lsls	r2, r2, #14
 801300c:	e7e1      	b.n	8012fd2 <HAL_DMA_IRQHandler+0x73a>
 801300e:	2280      	movs	r2, #128	; 0x80
 8013010:	0492      	lsls	r2, r2, #18
 8013012:	e7de      	b.n	8012fd2 <HAL_DMA_IRQHandler+0x73a>
 8013014:	2202      	movs	r2, #2
 8013016:	e7dc      	b.n	8012fd2 <HAL_DMA_IRQHandler+0x73a>
 8013018:	2220      	movs	r2, #32
 801301a:	e7da      	b.n	8012fd2 <HAL_DMA_IRQHandler+0x73a>
 801301c:	2280      	movs	r2, #128	; 0x80
 801301e:	0092      	lsls	r2, r2, #2
 8013020:	e7d7      	b.n	8012fd2 <HAL_DMA_IRQHandler+0x73a>
 8013022:	4a22      	ldr	r2, [pc, #136]	; (80130ac <HAL_DMA_IRQHandler+0x814>)
 8013024:	4293      	cmp	r3, r2
 8013026:	d023      	beq.n	8013070 <HAL_DMA_IRQHandler+0x7d8>
 8013028:	4a21      	ldr	r2, [pc, #132]	; (80130b0 <HAL_DMA_IRQHandler+0x818>)
 801302a:	4293      	cmp	r3, r2
 801302c:	d024      	beq.n	8013078 <HAL_DMA_IRQHandler+0x7e0>
 801302e:	4a21      	ldr	r2, [pc, #132]	; (80130b4 <HAL_DMA_IRQHandler+0x81c>)
 8013030:	4293      	cmp	r3, r2
 8013032:	d023      	beq.n	801307c <HAL_DMA_IRQHandler+0x7e4>
 8013034:	4a20      	ldr	r2, [pc, #128]	; (80130b8 <HAL_DMA_IRQHandler+0x820>)
 8013036:	4293      	cmp	r3, r2
 8013038:	d023      	beq.n	8013082 <HAL_DMA_IRQHandler+0x7ea>
 801303a:	4a20      	ldr	r2, [pc, #128]	; (80130bc <HAL_DMA_IRQHandler+0x824>)
 801303c:	4293      	cmp	r3, r2
 801303e:	d023      	beq.n	8013088 <HAL_DMA_IRQHandler+0x7f0>
 8013040:	4a1f      	ldr	r2, [pc, #124]	; (80130c0 <HAL_DMA_IRQHandler+0x828>)
 8013042:	4293      	cmp	r3, r2
 8013044:	d023      	beq.n	801308e <HAL_DMA_IRQHandler+0x7f6>
 8013046:	4a18      	ldr	r2, [pc, #96]	; (80130a8 <HAL_DMA_IRQHandler+0x810>)
 8013048:	4293      	cmp	r3, r2
 801304a:	d023      	beq.n	8013094 <HAL_DMA_IRQHandler+0x7fc>
 801304c:	4a1d      	ldr	r2, [pc, #116]	; (80130c4 <HAL_DMA_IRQHandler+0x82c>)
 801304e:	4293      	cmp	r3, r2
 8013050:	d023      	beq.n	801309a <HAL_DMA_IRQHandler+0x802>
 8013052:	4a1d      	ldr	r2, [pc, #116]	; (80130c8 <HAL_DMA_IRQHandler+0x830>)
 8013054:	4293      	cmp	r3, r2
 8013056:	d022      	beq.n	801309e <HAL_DMA_IRQHandler+0x806>
 8013058:	4a1c      	ldr	r2, [pc, #112]	; (80130cc <HAL_DMA_IRQHandler+0x834>)
 801305a:	4293      	cmp	r3, r2
 801305c:	d021      	beq.n	80130a2 <HAL_DMA_IRQHandler+0x80a>
 801305e:	4a1c      	ldr	r2, [pc, #112]	; (80130d0 <HAL_DMA_IRQHandler+0x838>)
 8013060:	4293      	cmp	r3, r2
 8013062:	d002      	beq.n	801306a <HAL_DMA_IRQHandler+0x7d2>
 8013064:	2280      	movs	r2, #128	; 0x80
 8013066:	0292      	lsls	r2, r2, #10
 8013068:	e003      	b.n	8013072 <HAL_DMA_IRQHandler+0x7da>
 801306a:	2280      	movs	r2, #128	; 0x80
 801306c:	0192      	lsls	r2, r2, #6
 801306e:	e000      	b.n	8013072 <HAL_DMA_IRQHandler+0x7da>
 8013070:	2202      	movs	r2, #2
 8013072:	4b18      	ldr	r3, [pc, #96]	; (80130d4 <HAL_DMA_IRQHandler+0x83c>)
 8013074:	605a      	str	r2, [r3, #4]
 8013076:	e7ae      	b.n	8012fd6 <HAL_DMA_IRQHandler+0x73e>
 8013078:	2220      	movs	r2, #32
 801307a:	e7fa      	b.n	8013072 <HAL_DMA_IRQHandler+0x7da>
 801307c:	2280      	movs	r2, #128	; 0x80
 801307e:	0092      	lsls	r2, r2, #2
 8013080:	e7f7      	b.n	8013072 <HAL_DMA_IRQHandler+0x7da>
 8013082:	2280      	movs	r2, #128	; 0x80
 8013084:	0192      	lsls	r2, r2, #6
 8013086:	e7f4      	b.n	8013072 <HAL_DMA_IRQHandler+0x7da>
 8013088:	2280      	movs	r2, #128	; 0x80
 801308a:	0292      	lsls	r2, r2, #10
 801308c:	e7f1      	b.n	8013072 <HAL_DMA_IRQHandler+0x7da>
 801308e:	2280      	movs	r2, #128	; 0x80
 8013090:	0392      	lsls	r2, r2, #14
 8013092:	e7ee      	b.n	8013072 <HAL_DMA_IRQHandler+0x7da>
 8013094:	2280      	movs	r2, #128	; 0x80
 8013096:	0492      	lsls	r2, r2, #18
 8013098:	e7eb      	b.n	8013072 <HAL_DMA_IRQHandler+0x7da>
 801309a:	2202      	movs	r2, #2
 801309c:	e7e9      	b.n	8013072 <HAL_DMA_IRQHandler+0x7da>
 801309e:	2220      	movs	r2, #32
 80130a0:	e7e7      	b.n	8013072 <HAL_DMA_IRQHandler+0x7da>
 80130a2:	2280      	movs	r2, #128	; 0x80
 80130a4:	0092      	lsls	r2, r2, #2
 80130a6:	e7e4      	b.n	8013072 <HAL_DMA_IRQHandler+0x7da>
 80130a8:	40020080 	.word	0x40020080
 80130ac:	40020008 	.word	0x40020008
 80130b0:	4002001c 	.word	0x4002001c
 80130b4:	40020030 	.word	0x40020030
 80130b8:	40020044 	.word	0x40020044
 80130bc:	40020058 	.word	0x40020058
 80130c0:	4002006c 	.word	0x4002006c
 80130c4:	40020408 	.word	0x40020408
 80130c8:	4002041c 	.word	0x4002041c
 80130cc:	40020430 	.word	0x40020430
 80130d0:	40020444 	.word	0x40020444
 80130d4:	40020000 	.word	0x40020000
 80130d8:	40020400 	.word	0x40020400

080130dc <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80130dc:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80130de:	4b05      	ldr	r3, [pc, #20]	; (80130f4 <FLASH_Program_HalfWord+0x18>)
 80130e0:	2200      	movs	r2, #0
 80130e2:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80130e4:	4a04      	ldr	r2, [pc, #16]	; (80130f8 <FLASH_Program_HalfWord+0x1c>)
 80130e6:	6913      	ldr	r3, [r2, #16]
 80130e8:	2401      	movs	r4, #1
 80130ea:	4323      	orrs	r3, r4
 80130ec:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80130ee:	8001      	strh	r1, [r0, #0]
}
 80130f0:	bd10      	pop	{r4, pc}
 80130f2:	46c0      	nop			; (mov r8, r8)
 80130f4:	20007558 	.word	0x20007558
 80130f8:	40022000 	.word	0x40022000

080130fc <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80130fc:	4b0a      	ldr	r3, [pc, #40]	; (8013128 <FLASH_SetErrorCode+0x2c>)
 80130fe:	68db      	ldr	r3, [r3, #12]
 8013100:	06db      	lsls	r3, r3, #27
 8013102:	d504      	bpl.n	801310e <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8013104:	4a09      	ldr	r2, [pc, #36]	; (801312c <FLASH_SetErrorCode+0x30>)
 8013106:	69d3      	ldr	r3, [r2, #28]
 8013108:	2102      	movs	r1, #2
 801310a:	430b      	orrs	r3, r1
 801310c:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801310e:	4b06      	ldr	r3, [pc, #24]	; (8013128 <FLASH_SetErrorCode+0x2c>)
 8013110:	68db      	ldr	r3, [r3, #12]
 8013112:	075b      	lsls	r3, r3, #29
 8013114:	d504      	bpl.n	8013120 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8013116:	4a05      	ldr	r2, [pc, #20]	; (801312c <FLASH_SetErrorCode+0x30>)
 8013118:	69d3      	ldr	r3, [r2, #28]
 801311a:	2101      	movs	r1, #1
 801311c:	430b      	orrs	r3, r1
 801311e:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8013120:	4b01      	ldr	r3, [pc, #4]	; (8013128 <FLASH_SetErrorCode+0x2c>)
 8013122:	2214      	movs	r2, #20
 8013124:	60da      	str	r2, [r3, #12]
}  
 8013126:	4770      	bx	lr
 8013128:	40022000 	.word	0x40022000
 801312c:	20007558 	.word	0x20007558

08013130 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8013130:	4b06      	ldr	r3, [pc, #24]	; (801314c <HAL_FLASH_Unlock+0x1c>)
 8013132:	691b      	ldr	r3, [r3, #16]
 8013134:	061b      	lsls	r3, r3, #24
 8013136:	d506      	bpl.n	8013146 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8013138:	4b04      	ldr	r3, [pc, #16]	; (801314c <HAL_FLASH_Unlock+0x1c>)
 801313a:	4a05      	ldr	r2, [pc, #20]	; (8013150 <HAL_FLASH_Unlock+0x20>)
 801313c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801313e:	4a05      	ldr	r2, [pc, #20]	; (8013154 <HAL_FLASH_Unlock+0x24>)
 8013140:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8013142:	2000      	movs	r0, #0
}
 8013144:	4770      	bx	lr
    return HAL_ERROR;
 8013146:	2001      	movs	r0, #1
 8013148:	e7fc      	b.n	8013144 <HAL_FLASH_Unlock+0x14>
 801314a:	46c0      	nop			; (mov r8, r8)
 801314c:	40022000 	.word	0x40022000
 8013150:	45670123 	.word	0x45670123
 8013154:	cdef89ab 	.word	0xcdef89ab

08013158 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8013158:	4a03      	ldr	r2, [pc, #12]	; (8013168 <HAL_FLASH_Lock+0x10>)
 801315a:	6913      	ldr	r3, [r2, #16]
 801315c:	2180      	movs	r1, #128	; 0x80
 801315e:	430b      	orrs	r3, r1
 8013160:	6113      	str	r3, [r2, #16]
}
 8013162:	2000      	movs	r0, #0
 8013164:	4770      	bx	lr
 8013166:	46c0      	nop			; (mov r8, r8)
 8013168:	40022000 	.word	0x40022000

0801316c <FLASH_WaitForLastOperation>:
{
 801316c:	b570      	push	{r4, r5, r6, lr}
 801316e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8013170:	f7fe fe34 	bl	8011ddc <HAL_GetTick>
 8013174:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8013176:	4b13      	ldr	r3, [pc, #76]	; (80131c4 <FLASH_WaitForLastOperation+0x58>)
 8013178:	68db      	ldr	r3, [r3, #12]
 801317a:	07db      	lsls	r3, r3, #31
 801317c:	d50a      	bpl.n	8013194 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 801317e:	1c63      	adds	r3, r4, #1
 8013180:	d0f9      	beq.n	8013176 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013182:	2c00      	cmp	r4, #0
 8013184:	d019      	beq.n	80131ba <FLASH_WaitForLastOperation+0x4e>
 8013186:	f7fe fe29 	bl	8011ddc <HAL_GetTick>
 801318a:	1b40      	subs	r0, r0, r5
 801318c:	42a0      	cmp	r0, r4
 801318e:	d9f2      	bls.n	8013176 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8013190:	2003      	movs	r0, #3
 8013192:	e011      	b.n	80131b8 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8013194:	4b0b      	ldr	r3, [pc, #44]	; (80131c4 <FLASH_WaitForLastOperation+0x58>)
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	069b      	lsls	r3, r3, #26
 801319a:	d502      	bpl.n	80131a2 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801319c:	4b09      	ldr	r3, [pc, #36]	; (80131c4 <FLASH_WaitForLastOperation+0x58>)
 801319e:	2220      	movs	r2, #32
 80131a0:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80131a2:	4b08      	ldr	r3, [pc, #32]	; (80131c4 <FLASH_WaitForLastOperation+0x58>)
 80131a4:	68db      	ldr	r3, [r3, #12]
 80131a6:	06db      	lsls	r3, r3, #27
 80131a8:	d403      	bmi.n	80131b2 <FLASH_WaitForLastOperation+0x46>
 80131aa:	4b06      	ldr	r3, [pc, #24]	; (80131c4 <FLASH_WaitForLastOperation+0x58>)
 80131ac:	68db      	ldr	r3, [r3, #12]
 80131ae:	075b      	lsls	r3, r3, #29
 80131b0:	d505      	bpl.n	80131be <FLASH_WaitForLastOperation+0x52>
    FLASH_SetErrorCode();
 80131b2:	f7ff ffa3 	bl	80130fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80131b6:	2001      	movs	r0, #1
}
 80131b8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 80131ba:	2003      	movs	r0, #3
 80131bc:	e7fc      	b.n	80131b8 <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 80131be:	2000      	movs	r0, #0
 80131c0:	e7fa      	b.n	80131b8 <FLASH_WaitForLastOperation+0x4c>
 80131c2:	46c0      	nop			; (mov r8, r8)
 80131c4:	40022000 	.word	0x40022000

080131c8 <HAL_FLASH_Program>:
{
 80131c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131ca:	46c6      	mov	lr, r8
 80131cc:	b500      	push	{lr}
 80131ce:	0004      	movs	r4, r0
 80131d0:	000d      	movs	r5, r1
 80131d2:	4690      	mov	r8, r2
 80131d4:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 80131d6:	4b21      	ldr	r3, [pc, #132]	; (801325c <HAL_FLASH_Program+0x94>)
 80131d8:	7e1b      	ldrb	r3, [r3, #24]
 80131da:	2b01      	cmp	r3, #1
 80131dc:	d03b      	beq.n	8013256 <HAL_FLASH_Program+0x8e>
 80131de:	4b1f      	ldr	r3, [pc, #124]	; (801325c <HAL_FLASH_Program+0x94>)
 80131e0:	2201      	movs	r2, #1
 80131e2:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80131e4:	481e      	ldr	r0, [pc, #120]	; (8013260 <HAL_FLASH_Program+0x98>)
 80131e6:	f7ff ffc1 	bl	801316c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80131ea:	2800      	cmp	r0, #0
 80131ec:	d12d      	bne.n	801324a <HAL_FLASH_Program+0x82>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80131ee:	2c01      	cmp	r4, #1
 80131f0:	d006      	beq.n	8013200 <HAL_FLASH_Program+0x38>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80131f2:	2c02      	cmp	r4, #2
 80131f4:	d002      	beq.n	80131fc <HAL_FLASH_Program+0x34>
      nbiterations = 4;
 80131f6:	2704      	movs	r7, #4
    for (index = 0; index < nbiterations; index++)
 80131f8:	2400      	movs	r4, #0
 80131fa:	e01b      	b.n	8013234 <HAL_FLASH_Program+0x6c>
      nbiterations = 2;
 80131fc:	2702      	movs	r7, #2
 80131fe:	e7fb      	b.n	80131f8 <HAL_FLASH_Program+0x30>
      nbiterations = 1;
 8013200:	2701      	movs	r7, #1
 8013202:	e7f9      	b.n	80131f8 <HAL_FLASH_Program+0x30>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8013204:	2220      	movs	r2, #32
 8013206:	1ad2      	subs	r2, r2, r3
 8013208:	0031      	movs	r1, r6
 801320a:	4091      	lsls	r1, r2
 801320c:	000a      	movs	r2, r1
 801320e:	4641      	mov	r1, r8
 8013210:	40d9      	lsrs	r1, r3
 8013212:	4311      	orrs	r1, r2
 8013214:	b289      	uxth	r1, r1
 8013216:	1940      	adds	r0, r0, r5
 8013218:	f7ff ff60 	bl	80130dc <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801321c:	4810      	ldr	r0, [pc, #64]	; (8013260 <HAL_FLASH_Program+0x98>)
 801321e:	f7ff ffa5 	bl	801316c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8013222:	4a10      	ldr	r2, [pc, #64]	; (8013264 <HAL_FLASH_Program+0x9c>)
 8013224:	6913      	ldr	r3, [r2, #16]
 8013226:	2101      	movs	r1, #1
 8013228:	438b      	bics	r3, r1
 801322a:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 801322c:	2800      	cmp	r0, #0
 801322e:	d10c      	bne.n	801324a <HAL_FLASH_Program+0x82>
    for (index = 0; index < nbiterations; index++)
 8013230:	3401      	adds	r4, #1
 8013232:	b2e4      	uxtb	r4, r4
 8013234:	42bc      	cmp	r4, r7
 8013236:	d208      	bcs.n	801324a <HAL_FLASH_Program+0x82>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8013238:	0060      	lsls	r0, r4, #1
 801323a:	0123      	lsls	r3, r4, #4
 801323c:	2220      	movs	r2, #32
 801323e:	4252      	negs	r2, r2
 8013240:	189a      	adds	r2, r3, r2
 8013242:	d4df      	bmi.n	8013204 <HAL_FLASH_Program+0x3c>
 8013244:	0031      	movs	r1, r6
 8013246:	40d1      	lsrs	r1, r2
 8013248:	e7e4      	b.n	8013214 <HAL_FLASH_Program+0x4c>
  __HAL_UNLOCK(&pFlash);
 801324a:	4b04      	ldr	r3, [pc, #16]	; (801325c <HAL_FLASH_Program+0x94>)
 801324c:	2200      	movs	r2, #0
 801324e:	761a      	strb	r2, [r3, #24]
}
 8013250:	bc04      	pop	{r2}
 8013252:	4690      	mov	r8, r2
 8013254:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8013256:	2002      	movs	r0, #2
 8013258:	e7fa      	b.n	8013250 <HAL_FLASH_Program+0x88>
 801325a:	46c0      	nop			; (mov r8, r8)
 801325c:	20007558 	.word	0x20007558
 8013260:	0000c350 	.word	0x0000c350
 8013264:	40022000 	.word	0x40022000

08013268 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013268:	4b06      	ldr	r3, [pc, #24]	; (8013284 <FLASH_MassErase+0x1c>)
 801326a:	2200      	movs	r2, #0
 801326c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801326e:	4b06      	ldr	r3, [pc, #24]	; (8013288 <FLASH_MassErase+0x20>)
 8013270:	691a      	ldr	r2, [r3, #16]
 8013272:	2104      	movs	r1, #4
 8013274:	430a      	orrs	r2, r1
 8013276:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8013278:	691a      	ldr	r2, [r3, #16]
 801327a:	313c      	adds	r1, #60	; 0x3c
 801327c:	430a      	orrs	r2, r1
 801327e:	611a      	str	r2, [r3, #16]
}
 8013280:	4770      	bx	lr
 8013282:	46c0      	nop			; (mov r8, r8)
 8013284:	20007558 	.word	0x20007558
 8013288:	40022000 	.word	0x40022000

0801328c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801328c:	4b06      	ldr	r3, [pc, #24]	; (80132a8 <FLASH_PageErase+0x1c>)
 801328e:	2200      	movs	r2, #0
 8013290:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8013292:	4b06      	ldr	r3, [pc, #24]	; (80132ac <FLASH_PageErase+0x20>)
 8013294:	691a      	ldr	r2, [r3, #16]
 8013296:	2102      	movs	r1, #2
 8013298:	430a      	orrs	r2, r1
 801329a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 801329c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801329e:	691a      	ldr	r2, [r3, #16]
 80132a0:	313e      	adds	r1, #62	; 0x3e
 80132a2:	430a      	orrs	r2, r1
 80132a4:	611a      	str	r2, [r3, #16]
}
 80132a6:	4770      	bx	lr
 80132a8:	20007558 	.word	0x20007558
 80132ac:	40022000 	.word	0x40022000

080132b0 <HAL_FLASHEx_Erase>:
{
 80132b0:	b570      	push	{r4, r5, r6, lr}
 80132b2:	0005      	movs	r5, r0
 80132b4:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 80132b6:	4b24      	ldr	r3, [pc, #144]	; (8013348 <HAL_FLASHEx_Erase+0x98>)
 80132b8:	7e1b      	ldrb	r3, [r3, #24]
 80132ba:	2b01      	cmp	r3, #1
 80132bc:	d041      	beq.n	8013342 <HAL_FLASHEx_Erase+0x92>
 80132be:	4b22      	ldr	r3, [pc, #136]	; (8013348 <HAL_FLASHEx_Erase+0x98>)
 80132c0:	2201      	movs	r2, #1
 80132c2:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80132c4:	6803      	ldr	r3, [r0, #0]
 80132c6:	2b01      	cmp	r3, #1
 80132c8:	d022      	beq.n	8013310 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80132ca:	4820      	ldr	r0, [pc, #128]	; (801334c <HAL_FLASHEx_Erase+0x9c>)
 80132cc:	f7ff ff4e 	bl	801316c <FLASH_WaitForLastOperation>
 80132d0:	2800      	cmp	r0, #0
 80132d2:	d131      	bne.n	8013338 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFF;
 80132d4:	2301      	movs	r3, #1
 80132d6:	425b      	negs	r3, r3
 80132d8:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 80132da:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80132dc:	3001      	adds	r0, #1
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80132de:	68ab      	ldr	r3, [r5, #8]
 80132e0:	02db      	lsls	r3, r3, #11
 80132e2:	686a      	ldr	r2, [r5, #4]
 80132e4:	4694      	mov	ip, r2
 80132e6:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80132e8:	42a3      	cmp	r3, r4
 80132ea:	d926      	bls.n	801333a <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 80132ec:	0020      	movs	r0, r4
 80132ee:	f7ff ffcd 	bl	801328c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80132f2:	4816      	ldr	r0, [pc, #88]	; (801334c <HAL_FLASHEx_Erase+0x9c>)
 80132f4:	f7ff ff3a 	bl	801316c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80132f8:	4a15      	ldr	r2, [pc, #84]	; (8013350 <HAL_FLASHEx_Erase+0xa0>)
 80132fa:	6913      	ldr	r3, [r2, #16]
 80132fc:	2102      	movs	r1, #2
 80132fe:	438b      	bics	r3, r1
 8013300:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8013302:	2800      	cmp	r0, #0
 8013304:	d116      	bne.n	8013334 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8013306:	2380      	movs	r3, #128	; 0x80
 8013308:	011b      	lsls	r3, r3, #4
 801330a:	469c      	mov	ip, r3
 801330c:	4464      	add	r4, ip
 801330e:	e7e6      	b.n	80132de <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8013310:	480e      	ldr	r0, [pc, #56]	; (801334c <HAL_FLASHEx_Erase+0x9c>)
 8013312:	f7ff ff2b 	bl	801316c <FLASH_WaitForLastOperation>
 8013316:	2800      	cmp	r0, #0
 8013318:	d001      	beq.n	801331e <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 801331a:	2001      	movs	r0, #1
 801331c:	e00d      	b.n	801333a <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 801331e:	f7ff ffa3 	bl	8013268 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013322:	480a      	ldr	r0, [pc, #40]	; (801334c <HAL_FLASHEx_Erase+0x9c>)
 8013324:	f7ff ff22 	bl	801316c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8013328:	4a09      	ldr	r2, [pc, #36]	; (8013350 <HAL_FLASHEx_Erase+0xa0>)
 801332a:	6913      	ldr	r3, [r2, #16]
 801332c:	2104      	movs	r1, #4
 801332e:	438b      	bics	r3, r1
 8013330:	6113      	str	r3, [r2, #16]
 8013332:	e002      	b.n	801333a <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8013334:	6034      	str	r4, [r6, #0]
            break;
 8013336:	e000      	b.n	801333a <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8013338:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 801333a:	4b03      	ldr	r3, [pc, #12]	; (8013348 <HAL_FLASHEx_Erase+0x98>)
 801333c:	2200      	movs	r2, #0
 801333e:	761a      	strb	r2, [r3, #24]
}
 8013340:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8013342:	2002      	movs	r0, #2
 8013344:	e7fc      	b.n	8013340 <HAL_FLASHEx_Erase+0x90>
 8013346:	46c0      	nop			; (mov r8, r8)
 8013348:	20007558 	.word	0x20007558
 801334c:	0000c350 	.word	0x0000c350
 8013350:	40022000 	.word	0x40022000

08013354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8013354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013356:	46c6      	mov	lr, r8
 8013358:	b500      	push	{lr}
 801335a:	b082      	sub	sp, #8
  uint32_t position = 0x00;
 801335c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 801335e:	e033      	b.n	80133c8 <HAL_GPIO_Init+0x74>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8013360:	2604      	movs	r6, #4
 8013362:	e000      	b.n	8013366 <HAL_GPIO_Init+0x12>
 8013364:	2600      	movs	r6, #0
 8013366:	40ae      	lsls	r6, r5
 8013368:	0035      	movs	r5, r6
 801336a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 801336c:	3402      	adds	r4, #2
 801336e:	00a4      	lsls	r4, r4, #2
 8013370:	4e55      	ldr	r6, [pc, #340]	; (80134c8 <HAL_GPIO_Init+0x174>)
 8013372:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013374:	4c55      	ldr	r4, [pc, #340]	; (80134cc <HAL_GPIO_Init+0x178>)
 8013376:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8013378:	43d4      	mvns	r4, r2
 801337a:	002e      	movs	r6, r5
 801337c:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801337e:	684f      	ldr	r7, [r1, #4]
 8013380:	03ff      	lsls	r7, r7, #15
 8013382:	d501      	bpl.n	8013388 <HAL_GPIO_Init+0x34>
        {
          SET_BIT(temp, iocurrent); 
 8013384:	4315      	orrs	r5, r2
 8013386:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8013388:	4d50      	ldr	r5, [pc, #320]	; (80134cc <HAL_GPIO_Init+0x178>)
 801338a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 801338c:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 801338e:	002e      	movs	r6, r5
 8013390:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8013392:	684f      	ldr	r7, [r1, #4]
 8013394:	03bf      	lsls	r7, r7, #14
 8013396:	d501      	bpl.n	801339c <HAL_GPIO_Init+0x48>
        { 
          SET_BIT(temp, iocurrent); 
 8013398:	4315      	orrs	r5, r2
 801339a:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 801339c:	4d4b      	ldr	r5, [pc, #300]	; (80134cc <HAL_GPIO_Init+0x178>)
 801339e:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80133a0:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80133a2:	002e      	movs	r6, r5
 80133a4:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80133a6:	684f      	ldr	r7, [r1, #4]
 80133a8:	02ff      	lsls	r7, r7, #11
 80133aa:	d501      	bpl.n	80133b0 <HAL_GPIO_Init+0x5c>
        {
          SET_BIT(temp, iocurrent); 
 80133ac:	4315      	orrs	r5, r2
 80133ae:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80133b0:	4d46      	ldr	r5, [pc, #280]	; (80134cc <HAL_GPIO_Init+0x178>)
 80133b2:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80133b4:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80133b6:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80133b8:	684e      	ldr	r6, [r1, #4]
 80133ba:	02b6      	lsls	r6, r6, #10
 80133bc:	d501      	bpl.n	80133c2 <HAL_GPIO_Init+0x6e>
        {
          SET_BIT(temp, iocurrent); 
 80133be:	432a      	orrs	r2, r5
 80133c0:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 80133c2:	4a42      	ldr	r2, [pc, #264]	; (80134cc <HAL_GPIO_Init+0x178>)
 80133c4:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80133c6:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 80133c8:	680a      	ldr	r2, [r1, #0]
 80133ca:	0014      	movs	r4, r2
 80133cc:	40dc      	lsrs	r4, r3
 80133ce:	d076      	beq.n	80134be <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80133d0:	2401      	movs	r4, #1
 80133d2:	409c      	lsls	r4, r3
 80133d4:	4022      	ands	r2, r4
    if(iocurrent)
 80133d6:	d0f6      	beq.n	80133c6 <HAL_GPIO_Init+0x72>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80133d8:	684c      	ldr	r4, [r1, #4]
 80133da:	2c02      	cmp	r4, #2
 80133dc:	d001      	beq.n	80133e2 <HAL_GPIO_Init+0x8e>
 80133de:	2c12      	cmp	r4, #18
 80133e0:	d10e      	bne.n	8013400 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 80133e2:	08dc      	lsrs	r4, r3, #3
 80133e4:	3408      	adds	r4, #8
 80133e6:	00a4      	lsls	r4, r4, #2
 80133e8:	5826      	ldr	r6, [r4, r0]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80133ea:	2507      	movs	r5, #7
 80133ec:	401d      	ands	r5, r3
 80133ee:	00ad      	lsls	r5, r5, #2
 80133f0:	270f      	movs	r7, #15
 80133f2:	40af      	lsls	r7, r5
 80133f4:	43be      	bics	r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 80133f6:	690f      	ldr	r7, [r1, #16]
 80133f8:	40af      	lsls	r7, r5
 80133fa:	003d      	movs	r5, r7
 80133fc:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3] = temp;
 80133fe:	5025      	str	r5, [r4, r0]
      temp = GPIOx->MODER;
 8013400:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8013402:	005e      	lsls	r6, r3, #1
 8013404:	2403      	movs	r4, #3
 8013406:	0025      	movs	r5, r4
 8013408:	40b5      	lsls	r5, r6
 801340a:	43ed      	mvns	r5, r5
 801340c:	46a8      	mov	r8, r5
 801340e:	402f      	ands	r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8013410:	684d      	ldr	r5, [r1, #4]
 8013412:	402c      	ands	r4, r5
 8013414:	40b4      	lsls	r4, r6
 8013416:	433c      	orrs	r4, r7
      GPIOx->MODER = temp;
 8013418:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801341a:	684c      	ldr	r4, [r1, #4]
 801341c:	1e67      	subs	r7, r4, #1
 801341e:	2f01      	cmp	r7, #1
 8013420:	d903      	bls.n	801342a <HAL_GPIO_Init+0xd6>
 8013422:	2c11      	cmp	r4, #17
 8013424:	d001      	beq.n	801342a <HAL_GPIO_Init+0xd6>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013426:	2c12      	cmp	r4, #18
 8013428:	d111      	bne.n	801344e <HAL_GPIO_Init+0xfa>
        temp = GPIOx->OSPEEDR; 
 801342a:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801342c:	4644      	mov	r4, r8
 801342e:	4027      	ands	r7, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8013430:	68cc      	ldr	r4, [r1, #12]
 8013432:	40b4      	lsls	r4, r6
 8013434:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8013436:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8013438:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 801343a:	2401      	movs	r4, #1
 801343c:	0025      	movs	r5, r4
 801343e:	409d      	lsls	r5, r3
 8013440:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8013442:	684d      	ldr	r5, [r1, #4]
 8013444:	092d      	lsrs	r5, r5, #4
 8013446:	402c      	ands	r4, r5
 8013448:	409c      	lsls	r4, r3
 801344a:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 801344c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 801344e:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8013450:	4645      	mov	r5, r8
 8013452:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8013454:	688d      	ldr	r5, [r1, #8]
 8013456:	40b5      	lsls	r5, r6
 8013458:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 801345a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801345c:	684c      	ldr	r4, [r1, #4]
 801345e:	00e4      	lsls	r4, r4, #3
 8013460:	d5b1      	bpl.n	80133c6 <HAL_GPIO_Init+0x72>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013462:	4d1b      	ldr	r5, [pc, #108]	; (80134d0 <HAL_GPIO_Init+0x17c>)
 8013464:	69ae      	ldr	r6, [r5, #24]
 8013466:	2401      	movs	r4, #1
 8013468:	4326      	orrs	r6, r4
 801346a:	61ae      	str	r6, [r5, #24]
 801346c:	69ad      	ldr	r5, [r5, #24]
 801346e:	402c      	ands	r4, r5
 8013470:	9401      	str	r4, [sp, #4]
 8013472:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8013474:	089c      	lsrs	r4, r3, #2
 8013476:	1ca5      	adds	r5, r4, #2
 8013478:	00ad      	lsls	r5, r5, #2
 801347a:	4e13      	ldr	r6, [pc, #76]	; (80134c8 <HAL_GPIO_Init+0x174>)
 801347c:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801347e:	2603      	movs	r6, #3
 8013480:	401e      	ands	r6, r3
 8013482:	00b5      	lsls	r5, r6, #2
 8013484:	260f      	movs	r6, #15
 8013486:	40ae      	lsls	r6, r5
 8013488:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801348a:	2690      	movs	r6, #144	; 0x90
 801348c:	05f6      	lsls	r6, r6, #23
 801348e:	42b0      	cmp	r0, r6
 8013490:	d100      	bne.n	8013494 <HAL_GPIO_Init+0x140>
 8013492:	e767      	b.n	8013364 <HAL_GPIO_Init+0x10>
 8013494:	4e0f      	ldr	r6, [pc, #60]	; (80134d4 <HAL_GPIO_Init+0x180>)
 8013496:	42b0      	cmp	r0, r6
 8013498:	d00b      	beq.n	80134b2 <HAL_GPIO_Init+0x15e>
 801349a:	4e0f      	ldr	r6, [pc, #60]	; (80134d8 <HAL_GPIO_Init+0x184>)
 801349c:	42b0      	cmp	r0, r6
 801349e:	d00a      	beq.n	80134b6 <HAL_GPIO_Init+0x162>
 80134a0:	4e0e      	ldr	r6, [pc, #56]	; (80134dc <HAL_GPIO_Init+0x188>)
 80134a2:	42b0      	cmp	r0, r6
 80134a4:	d009      	beq.n	80134ba <HAL_GPIO_Init+0x166>
 80134a6:	4e0e      	ldr	r6, [pc, #56]	; (80134e0 <HAL_GPIO_Init+0x18c>)
 80134a8:	42b0      	cmp	r0, r6
 80134aa:	d100      	bne.n	80134ae <HAL_GPIO_Init+0x15a>
 80134ac:	e758      	b.n	8013360 <HAL_GPIO_Init+0xc>
 80134ae:	2605      	movs	r6, #5
 80134b0:	e759      	b.n	8013366 <HAL_GPIO_Init+0x12>
 80134b2:	2601      	movs	r6, #1
 80134b4:	e757      	b.n	8013366 <HAL_GPIO_Init+0x12>
 80134b6:	2602      	movs	r6, #2
 80134b8:	e755      	b.n	8013366 <HAL_GPIO_Init+0x12>
 80134ba:	2603      	movs	r6, #3
 80134bc:	e753      	b.n	8013366 <HAL_GPIO_Init+0x12>
  } 
}
 80134be:	b002      	add	sp, #8
 80134c0:	bc04      	pop	{r2}
 80134c2:	4690      	mov	r8, r2
 80134c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134c6:	46c0      	nop			; (mov r8, r8)
 80134c8:	40010000 	.word	0x40010000
 80134cc:	40010400 	.word	0x40010400
 80134d0:	40021000 	.word	0x40021000
 80134d4:	48000400 	.word	0x48000400
 80134d8:	48000800 	.word	0x48000800
 80134dc:	48000c00 	.word	0x48000c00
 80134e0:	48001000 	.word	0x48001000

080134e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80134e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134e6:	46ce      	mov	lr, r9
 80134e8:	4647      	mov	r7, r8
 80134ea:	b580      	push	{r7, lr}
  uint32_t position = 0x00;
 80134ec:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 80134ee:	e006      	b.n	80134fe <HAL_GPIO_DeInit+0x1a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80134f0:	2704      	movs	r7, #4
 80134f2:	e000      	b.n	80134f6 <HAL_GPIO_DeInit+0x12>
 80134f4:	2700      	movs	r7, #0
 80134f6:	40a7      	lsls	r7, r4
 80134f8:	42af      	cmp	r7, r5
 80134fa:	d04e      	beq.n	801359a <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 80134fc:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 80134fe:	000a      	movs	r2, r1
 8013500:	40da      	lsrs	r2, r3
 8013502:	d060      	beq.n	80135c6 <HAL_GPIO_DeInit+0xe2>
    iocurrent = (GPIO_Pin) & (1 << position);
 8013504:	2201      	movs	r2, #1
 8013506:	409a      	lsls	r2, r3
 8013508:	400a      	ands	r2, r1
    if (iocurrent)
 801350a:	d0f7      	beq.n	80134fc <HAL_GPIO_DeInit+0x18>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 801350c:	6805      	ldr	r5, [r0, #0]
 801350e:	005e      	lsls	r6, r3, #1
 8013510:	2403      	movs	r4, #3
 8013512:	46a1      	mov	r9, r4
 8013514:	0027      	movs	r7, r4
 8013516:	40b7      	lsls	r7, r6
 8013518:	43ff      	mvns	r7, r7
 801351a:	403d      	ands	r5, r7
 801351c:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801351e:	08de      	lsrs	r6, r3, #3
 8013520:	3608      	adds	r6, #8
 8013522:	00b6      	lsls	r6, r6, #2
 8013524:	5834      	ldr	r4, [r6, r0]
 8013526:	46a0      	mov	r8, r4
 8013528:	2507      	movs	r5, #7
 801352a:	401d      	ands	r5, r3
 801352c:	00ad      	lsls	r5, r5, #2
 801352e:	240f      	movs	r4, #15
 8013530:	46a4      	mov	ip, r4
 8013532:	40ac      	lsls	r4, r5
 8013534:	0025      	movs	r5, r4
 8013536:	4644      	mov	r4, r8
 8013538:	43ac      	bics	r4, r5
 801353a:	5034      	str	r4, [r6, r0]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801353c:	6885      	ldr	r5, [r0, #8]
 801353e:	403d      	ands	r5, r7
 8013540:	6085      	str	r5, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8013542:	6845      	ldr	r5, [r0, #4]
 8013544:	2601      	movs	r6, #1
 8013546:	409e      	lsls	r6, r3
 8013548:	43b5      	bics	r5, r6
 801354a:	6045      	str	r5, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801354c:	68c5      	ldr	r5, [r0, #12]
 801354e:	402f      	ands	r7, r5
 8013550:	60c7      	str	r7, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8013552:	089e      	lsrs	r6, r3, #2
 8013554:	1cb5      	adds	r5, r6, #2
 8013556:	00ad      	lsls	r5, r5, #2
 8013558:	4f1d      	ldr	r7, [pc, #116]	; (80135d0 <HAL_GPIO_DeInit+0xec>)
 801355a:	59ed      	ldr	r5, [r5, r7]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 801355c:	464c      	mov	r4, r9
 801355e:	401c      	ands	r4, r3
 8013560:	00a4      	lsls	r4, r4, #2
 8013562:	4667      	mov	r7, ip
 8013564:	40a7      	lsls	r7, r4
 8013566:	46bc      	mov	ip, r7
 8013568:	403d      	ands	r5, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801356a:	2790      	movs	r7, #144	; 0x90
 801356c:	05ff      	lsls	r7, r7, #23
 801356e:	42b8      	cmp	r0, r7
 8013570:	d0c0      	beq.n	80134f4 <HAL_GPIO_DeInit+0x10>
 8013572:	4f18      	ldr	r7, [pc, #96]	; (80135d4 <HAL_GPIO_DeInit+0xf0>)
 8013574:	42b8      	cmp	r0, r7
 8013576:	d00a      	beq.n	801358e <HAL_GPIO_DeInit+0xaa>
 8013578:	4f17      	ldr	r7, [pc, #92]	; (80135d8 <HAL_GPIO_DeInit+0xf4>)
 801357a:	42b8      	cmp	r0, r7
 801357c:	d009      	beq.n	8013592 <HAL_GPIO_DeInit+0xae>
 801357e:	4f17      	ldr	r7, [pc, #92]	; (80135dc <HAL_GPIO_DeInit+0xf8>)
 8013580:	42b8      	cmp	r0, r7
 8013582:	d008      	beq.n	8013596 <HAL_GPIO_DeInit+0xb2>
 8013584:	4f16      	ldr	r7, [pc, #88]	; (80135e0 <HAL_GPIO_DeInit+0xfc>)
 8013586:	42b8      	cmp	r0, r7
 8013588:	d0b2      	beq.n	80134f0 <HAL_GPIO_DeInit+0xc>
 801358a:	2705      	movs	r7, #5
 801358c:	e7b3      	b.n	80134f6 <HAL_GPIO_DeInit+0x12>
 801358e:	2701      	movs	r7, #1
 8013590:	e7b1      	b.n	80134f6 <HAL_GPIO_DeInit+0x12>
 8013592:	2702      	movs	r7, #2
 8013594:	e7af      	b.n	80134f6 <HAL_GPIO_DeInit+0x12>
 8013596:	2703      	movs	r7, #3
 8013598:	e7ad      	b.n	80134f6 <HAL_GPIO_DeInit+0x12>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 801359a:	4f0d      	ldr	r7, [pc, #52]	; (80135d0 <HAL_GPIO_DeInit+0xec>)
 801359c:	1cb4      	adds	r4, r6, #2
 801359e:	00a4      	lsls	r4, r4, #2
 80135a0:	59e5      	ldr	r5, [r4, r7]
 80135a2:	4666      	mov	r6, ip
 80135a4:	43b5      	bics	r5, r6
 80135a6:	51e5      	str	r5, [r4, r7]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80135a8:	4c0e      	ldr	r4, [pc, #56]	; (80135e4 <HAL_GPIO_DeInit+0x100>)
 80135aa:	6825      	ldr	r5, [r4, #0]
 80135ac:	43d2      	mvns	r2, r2
 80135ae:	4015      	ands	r5, r2
 80135b0:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80135b2:	6865      	ldr	r5, [r4, #4]
 80135b4:	4015      	ands	r5, r2
 80135b6:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80135b8:	68a5      	ldr	r5, [r4, #8]
 80135ba:	4015      	ands	r5, r2
 80135bc:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80135be:	68e5      	ldr	r5, [r4, #12]
 80135c0:	402a      	ands	r2, r5
 80135c2:	60e2      	str	r2, [r4, #12]
 80135c4:	e79a      	b.n	80134fc <HAL_GPIO_DeInit+0x18>
  }
}
 80135c6:	bc0c      	pop	{r2, r3}
 80135c8:	4690      	mov	r8, r2
 80135ca:	4699      	mov	r9, r3
 80135cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135ce:	46c0      	nop			; (mov r8, r8)
 80135d0:	40010000 	.word	0x40010000
 80135d4:	48000400 	.word	0x48000400
 80135d8:	48000800 	.word	0x48000800
 80135dc:	48000c00 	.word	0x48000c00
 80135e0:	48001000 	.word	0x48001000
 80135e4:	40010400 	.word	0x40010400

080135e8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80135e8:	6903      	ldr	r3, [r0, #16]
 80135ea:	420b      	tst	r3, r1
 80135ec:	d101      	bne.n	80135f2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80135ee:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 80135f0:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80135f2:	2001      	movs	r0, #1
 80135f4:	e7fc      	b.n	80135f0 <HAL_GPIO_ReadPin+0x8>

080135f6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80135f6:	2a00      	cmp	r2, #0
 80135f8:	d101      	bne.n	80135fe <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80135fa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80135fc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80135fe:	6181      	str	r1, [r0, #24]
 8013600:	e7fc      	b.n	80135fc <HAL_GPIO_WritePin+0x6>

08013602 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8013602:	6943      	ldr	r3, [r0, #20]
 8013604:	4059      	eors	r1, r3
 8013606:	6141      	str	r1, [r0, #20]
}
 8013608:	4770      	bx	lr

0801360a <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 801360a:	4770      	bx	lr

0801360c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 801360c:	4a03      	ldr	r2, [pc, #12]	; (801361c <HAL_PWR_EnableBkUpAccess+0x10>)
 801360e:	6811      	ldr	r1, [r2, #0]
 8013610:	2380      	movs	r3, #128	; 0x80
 8013612:	005b      	lsls	r3, r3, #1
 8013614:	430b      	orrs	r3, r1
 8013616:	6013      	str	r3, [r2, #0]
}
 8013618:	4770      	bx	lr
 801361a:	46c0      	nop			; (mov r8, r8)
 801361c:	40007000 	.word	0x40007000

08013620 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013620:	b530      	push	{r4, r5, lr}
 8013622:	b083      	sub	sp, #12
 8013624:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013626:	6803      	ldr	r3, [r0, #0]
 8013628:	07db      	lsls	r3, r3, #31
 801362a:	d534      	bpl.n	8013696 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 801362c:	4bc1      	ldr	r3, [pc, #772]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 801362e:	685a      	ldr	r2, [r3, #4]
 8013630:	230c      	movs	r3, #12
 8013632:	4013      	ands	r3, r2
 8013634:	2b04      	cmp	r3, #4
 8013636:	d026      	beq.n	8013686 <HAL_RCC_OscConfig+0x66>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8013638:	4bbe      	ldr	r3, [pc, #760]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 801363a:	685a      	ldr	r2, [r3, #4]
 801363c:	230c      	movs	r3, #12
 801363e:	4013      	ands	r3, r2
 8013640:	2b08      	cmp	r3, #8
 8013642:	d108      	bne.n	8013656 <HAL_RCC_OscConfig+0x36>
 8013644:	4bbb      	ldr	r3, [pc, #748]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	22c0      	movs	r2, #192	; 0xc0
 801364a:	0252      	lsls	r2, r2, #9
 801364c:	4013      	ands	r3, r2
 801364e:	2280      	movs	r2, #128	; 0x80
 8013650:	0252      	lsls	r2, r2, #9
 8013652:	4293      	cmp	r3, r2
 8013654:	d017      	beq.n	8013686 <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8013656:	4bb7      	ldr	r3, [pc, #732]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	49b7      	ldr	r1, [pc, #732]	; (8013938 <HAL_RCC_OscConfig+0x318>)
 801365c:	400a      	ands	r2, r1
 801365e:	601a      	str	r2, [r3, #0]
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	49b6      	ldr	r1, [pc, #728]	; (801393c <HAL_RCC_OscConfig+0x31c>)
 8013664:	400a      	ands	r2, r1
 8013666:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013668:	f7fe fbb8 	bl	8011ddc <HAL_GetTick>
 801366c:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801366e:	4bb1      	ldr	r3, [pc, #708]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	039b      	lsls	r3, r3, #14
 8013674:	d536      	bpl.n	80136e4 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013676:	f7fe fbb1 	bl	8011ddc <HAL_GetTick>
 801367a:	1b40      	subs	r0, r0, r5
 801367c:	2864      	cmp	r0, #100	; 0x64
 801367e:	d9f6      	bls.n	801366e <HAL_RCC_OscConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8013680:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8013682:	b003      	add	sp, #12
 8013684:	bd30      	pop	{r4, r5, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013686:	4bab      	ldr	r3, [pc, #684]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	039b      	lsls	r3, r3, #14
 801368c:	d503      	bpl.n	8013696 <HAL_RCC_OscConfig+0x76>
 801368e:	6863      	ldr	r3, [r4, #4]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d100      	bne.n	8013696 <HAL_RCC_OscConfig+0x76>
 8013694:	e258      	b.n	8013b48 <HAL_RCC_OscConfig+0x528>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013696:	6823      	ldr	r3, [r4, #0]
 8013698:	079b      	lsls	r3, r3, #30
 801369a:	d400      	bmi.n	801369e <HAL_RCC_OscConfig+0x7e>
 801369c:	e088      	b.n	80137b0 <HAL_RCC_OscConfig+0x190>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801369e:	4ba5      	ldr	r3, [pc, #660]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80136a0:	685b      	ldr	r3, [r3, #4]
 80136a2:	220c      	movs	r2, #12
 80136a4:	421a      	tst	r2, r3
 80136a6:	d072      	beq.n	801378e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80136a8:	4ba2      	ldr	r3, [pc, #648]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80136aa:	685a      	ldr	r2, [r3, #4]
 80136ac:	230c      	movs	r3, #12
 80136ae:	4013      	ands	r3, r2
 80136b0:	2b08      	cmp	r3, #8
 80136b2:	d063      	beq.n	801377c <HAL_RCC_OscConfig+0x15c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80136b4:	68e3      	ldr	r3, [r4, #12]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d100      	bne.n	80136bc <HAL_RCC_OscConfig+0x9c>
 80136ba:	e09b      	b.n	80137f4 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_ENABLE();
 80136bc:	4a9d      	ldr	r2, [pc, #628]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80136be:	6813      	ldr	r3, [r2, #0]
 80136c0:	2101      	movs	r1, #1
 80136c2:	430b      	orrs	r3, r1
 80136c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80136c6:	f7fe fb89 	bl	8011ddc <HAL_GetTick>
 80136ca:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80136cc:	4b99      	ldr	r3, [pc, #612]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	079b      	lsls	r3, r3, #30
 80136d2:	d500      	bpl.n	80136d6 <HAL_RCC_OscConfig+0xb6>
 80136d4:	e085      	b.n	80137e2 <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80136d6:	f7fe fb81 	bl	8011ddc <HAL_GetTick>
 80136da:	1b40      	subs	r0, r0, r5
 80136dc:	2864      	cmp	r0, #100	; 0x64
 80136de:	d9f5      	bls.n	80136cc <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
 80136e0:	2003      	movs	r0, #3
 80136e2:	e7ce      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80136e4:	6863      	ldr	r3, [r4, #4]
 80136e6:	2b01      	cmp	r3, #1
 80136e8:	d00b      	beq.n	8013702 <HAL_RCC_OscConfig+0xe2>
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d120      	bne.n	8013730 <HAL_RCC_OscConfig+0x110>
 80136ee:	4b91      	ldr	r3, [pc, #580]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80136f0:	681a      	ldr	r2, [r3, #0]
 80136f2:	4991      	ldr	r1, [pc, #580]	; (8013938 <HAL_RCC_OscConfig+0x318>)
 80136f4:	400a      	ands	r2, r1
 80136f6:	601a      	str	r2, [r3, #0]
 80136f8:	681a      	ldr	r2, [r3, #0]
 80136fa:	4990      	ldr	r1, [pc, #576]	; (801393c <HAL_RCC_OscConfig+0x31c>)
 80136fc:	400a      	ands	r2, r1
 80136fe:	601a      	str	r2, [r3, #0]
 8013700:	e005      	b.n	801370e <HAL_RCC_OscConfig+0xee>
 8013702:	4a8c      	ldr	r2, [pc, #560]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 8013704:	6811      	ldr	r1, [r2, #0]
 8013706:	2380      	movs	r3, #128	; 0x80
 8013708:	025b      	lsls	r3, r3, #9
 801370a:	430b      	orrs	r3, r1
 801370c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801370e:	6863      	ldr	r3, [r4, #4]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d025      	beq.n	8013760 <HAL_RCC_OscConfig+0x140>
        tickstart = HAL_GetTick();
 8013714:	f7fe fb62 	bl	8011ddc <HAL_GetTick>
 8013718:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801371a:	4b86      	ldr	r3, [pc, #536]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	039b      	lsls	r3, r3, #14
 8013720:	d4b9      	bmi.n	8013696 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013722:	f7fe fb5b 	bl	8011ddc <HAL_GetTick>
 8013726:	1b40      	subs	r0, r0, r5
 8013728:	2864      	cmp	r0, #100	; 0x64
 801372a:	d9f6      	bls.n	801371a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 801372c:	2003      	movs	r0, #3
 801372e:	e7a8      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013730:	2b05      	cmp	r3, #5
 8013732:	d009      	beq.n	8013748 <HAL_RCC_OscConfig+0x128>
 8013734:	4b7f      	ldr	r3, [pc, #508]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 8013736:	681a      	ldr	r2, [r3, #0]
 8013738:	497f      	ldr	r1, [pc, #508]	; (8013938 <HAL_RCC_OscConfig+0x318>)
 801373a:	400a      	ands	r2, r1
 801373c:	601a      	str	r2, [r3, #0]
 801373e:	681a      	ldr	r2, [r3, #0]
 8013740:	497e      	ldr	r1, [pc, #504]	; (801393c <HAL_RCC_OscConfig+0x31c>)
 8013742:	400a      	ands	r2, r1
 8013744:	601a      	str	r2, [r3, #0]
 8013746:	e7e2      	b.n	801370e <HAL_RCC_OscConfig+0xee>
 8013748:	4b7a      	ldr	r3, [pc, #488]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 801374a:	6819      	ldr	r1, [r3, #0]
 801374c:	2280      	movs	r2, #128	; 0x80
 801374e:	02d2      	lsls	r2, r2, #11
 8013750:	430a      	orrs	r2, r1
 8013752:	601a      	str	r2, [r3, #0]
 8013754:	6819      	ldr	r1, [r3, #0]
 8013756:	2280      	movs	r2, #128	; 0x80
 8013758:	0252      	lsls	r2, r2, #9
 801375a:	430a      	orrs	r2, r1
 801375c:	601a      	str	r2, [r3, #0]
 801375e:	e7d6      	b.n	801370e <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8013760:	f7fe fb3c 	bl	8011ddc <HAL_GetTick>
 8013764:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013766:	4b73      	ldr	r3, [pc, #460]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	039b      	lsls	r3, r3, #14
 801376c:	d593      	bpl.n	8013696 <HAL_RCC_OscConfig+0x76>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801376e:	f7fe fb35 	bl	8011ddc <HAL_GetTick>
 8013772:	1b40      	subs	r0, r0, r5
 8013774:	2864      	cmp	r0, #100	; 0x64
 8013776:	d9f6      	bls.n	8013766 <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 8013778:	2003      	movs	r0, #3
 801377a:	e782      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801377c:	4b6d      	ldr	r3, [pc, #436]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	22c0      	movs	r2, #192	; 0xc0
 8013782:	0252      	lsls	r2, r2, #9
 8013784:	4013      	ands	r3, r2
 8013786:	2280      	movs	r2, #128	; 0x80
 8013788:	0212      	lsls	r2, r2, #8
 801378a:	4293      	cmp	r3, r2
 801378c:	d192      	bne.n	80136b4 <HAL_RCC_OscConfig+0x94>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801378e:	4b69      	ldr	r3, [pc, #420]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	079b      	lsls	r3, r3, #30
 8013794:	d504      	bpl.n	80137a0 <HAL_RCC_OscConfig+0x180>
 8013796:	68e3      	ldr	r3, [r4, #12]
 8013798:	2b01      	cmp	r3, #1
 801379a:	d001      	beq.n	80137a0 <HAL_RCC_OscConfig+0x180>
        return HAL_ERROR;
 801379c:	2001      	movs	r0, #1
 801379e:	e770      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80137a0:	4964      	ldr	r1, [pc, #400]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80137a2:	680b      	ldr	r3, [r1, #0]
 80137a4:	22f8      	movs	r2, #248	; 0xf8
 80137a6:	4393      	bics	r3, r2
 80137a8:	6922      	ldr	r2, [r4, #16]
 80137aa:	00d2      	lsls	r2, r2, #3
 80137ac:	4313      	orrs	r3, r2
 80137ae:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80137b0:	6823      	ldr	r3, [r4, #0]
 80137b2:	071b      	lsls	r3, r3, #28
 80137b4:	d544      	bpl.n	8013840 <HAL_RCC_OscConfig+0x220>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80137b6:	6a23      	ldr	r3, [r4, #32]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d02e      	beq.n	801381a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 80137bc:	4a5d      	ldr	r2, [pc, #372]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80137be:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80137c0:	2101      	movs	r1, #1
 80137c2:	430b      	orrs	r3, r1
 80137c4:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80137c6:	f7fe fb09 	bl	8011ddc <HAL_GetTick>
 80137ca:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80137cc:	4b59      	ldr	r3, [pc, #356]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80137ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137d0:	079b      	lsls	r3, r3, #30
 80137d2:	d435      	bmi.n	8013840 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80137d4:	f7fe fb02 	bl	8011ddc <HAL_GetTick>
 80137d8:	1b40      	subs	r0, r0, r5
 80137da:	2864      	cmp	r0, #100	; 0x64
 80137dc:	d9f6      	bls.n	80137cc <HAL_RCC_OscConfig+0x1ac>
          return HAL_TIMEOUT;
 80137de:	2003      	movs	r0, #3
 80137e0:	e74f      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80137e2:	4954      	ldr	r1, [pc, #336]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80137e4:	680b      	ldr	r3, [r1, #0]
 80137e6:	22f8      	movs	r2, #248	; 0xf8
 80137e8:	4393      	bics	r3, r2
 80137ea:	6922      	ldr	r2, [r4, #16]
 80137ec:	00d2      	lsls	r2, r2, #3
 80137ee:	4313      	orrs	r3, r2
 80137f0:	600b      	str	r3, [r1, #0]
 80137f2:	e7dd      	b.n	80137b0 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_DISABLE();
 80137f4:	4a4f      	ldr	r2, [pc, #316]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80137f6:	6813      	ldr	r3, [r2, #0]
 80137f8:	2101      	movs	r1, #1
 80137fa:	438b      	bics	r3, r1
 80137fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80137fe:	f7fe faed 	bl	8011ddc <HAL_GetTick>
 8013802:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013804:	4b4b      	ldr	r3, [pc, #300]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	079b      	lsls	r3, r3, #30
 801380a:	d5d1      	bpl.n	80137b0 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801380c:	f7fe fae6 	bl	8011ddc <HAL_GetTick>
 8013810:	1b40      	subs	r0, r0, r5
 8013812:	2864      	cmp	r0, #100	; 0x64
 8013814:	d9f6      	bls.n	8013804 <HAL_RCC_OscConfig+0x1e4>
            return HAL_TIMEOUT;
 8013816:	2003      	movs	r0, #3
 8013818:	e733      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSI_DISABLE();
 801381a:	4a46      	ldr	r2, [pc, #280]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 801381c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801381e:	2101      	movs	r1, #1
 8013820:	438b      	bics	r3, r1
 8013822:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8013824:	f7fe fada 	bl	8011ddc <HAL_GetTick>
 8013828:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801382a:	4b42      	ldr	r3, [pc, #264]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 801382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801382e:	079b      	lsls	r3, r3, #30
 8013830:	d506      	bpl.n	8013840 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013832:	f7fe fad3 	bl	8011ddc <HAL_GetTick>
 8013836:	1b40      	subs	r0, r0, r5
 8013838:	2864      	cmp	r0, #100	; 0x64
 801383a:	d9f6      	bls.n	801382a <HAL_RCC_OscConfig+0x20a>
          return HAL_TIMEOUT;
 801383c:	2003      	movs	r0, #3
 801383e:	e720      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013840:	6823      	ldr	r3, [r4, #0]
 8013842:	075b      	lsls	r3, r3, #29
 8013844:	d440      	bmi.n	80138c8 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8013846:	6823      	ldr	r3, [r4, #0]
 8013848:	06db      	lsls	r3, r3, #27
 801384a:	d512      	bpl.n	8013872 <HAL_RCC_OscConfig+0x252>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 801384c:	6963      	ldr	r3, [r4, #20]
 801384e:	2b01      	cmp	r3, #1
 8013850:	d100      	bne.n	8013854 <HAL_RCC_OscConfig+0x234>
 8013852:	e0c6      	b.n	80139e2 <HAL_RCC_OscConfig+0x3c2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8013854:	3305      	adds	r3, #5
 8013856:	d000      	beq.n	801385a <HAL_RCC_OscConfig+0x23a>
 8013858:	e0e3      	b.n	8013a22 <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_HSI14ADC_ENABLE();
 801385a:	4a36      	ldr	r2, [pc, #216]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 801385c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801385e:	2104      	movs	r1, #4
 8013860:	438b      	bics	r3, r1
 8013862:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8013864:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8013866:	31f4      	adds	r1, #244	; 0xf4
 8013868:	438b      	bics	r3, r1
 801386a:	69a1      	ldr	r1, [r4, #24]
 801386c:	00c9      	lsls	r1, r1, #3
 801386e:	430b      	orrs	r3, r1
 8013870:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013872:	6823      	ldr	r3, [r4, #0]
 8013874:	069b      	lsls	r3, r3, #26
 8013876:	d400      	bmi.n	801387a <HAL_RCC_OscConfig+0x25a>
 8013878:	e10f      	b.n	8013a9a <HAL_RCC_OscConfig+0x47a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801387a:	4b2e      	ldr	r3, [pc, #184]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 801387c:	685a      	ldr	r2, [r3, #4]
 801387e:	230c      	movs	r3, #12
 8013880:	4013      	ands	r3, r2
 8013882:	2b0c      	cmp	r3, #12
 8013884:	d100      	bne.n	8013888 <HAL_RCC_OscConfig+0x268>
 8013886:	e0ec      	b.n	8013a62 <HAL_RCC_OscConfig+0x442>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8013888:	4b2a      	ldr	r3, [pc, #168]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 801388a:	685a      	ldr	r2, [r3, #4]
 801388c:	230c      	movs	r3, #12
 801388e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8013890:	2b08      	cmp	r3, #8
 8013892:	d100      	bne.n	8013896 <HAL_RCC_OscConfig+0x276>
 8013894:	e0dd      	b.n	8013a52 <HAL_RCC_OscConfig+0x432>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8013896:	69e3      	ldr	r3, [r4, #28]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d100      	bne.n	801389e <HAL_RCC_OscConfig+0x27e>
 801389c:	e0ea      	b.n	8013a74 <HAL_RCC_OscConfig+0x454>
        __HAL_RCC_HSI48_ENABLE();
 801389e:	4a25      	ldr	r2, [pc, #148]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80138a0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80138a2:	2380      	movs	r3, #128	; 0x80
 80138a4:	025b      	lsls	r3, r3, #9
 80138a6:	430b      	orrs	r3, r1
 80138a8:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 80138aa:	f7fe fa97 	bl	8011ddc <HAL_GetTick>
 80138ae:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80138b0:	4b20      	ldr	r3, [pc, #128]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80138b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138b4:	03db      	lsls	r3, r3, #15
 80138b6:	d500      	bpl.n	80138ba <HAL_RCC_OscConfig+0x29a>
 80138b8:	e0ef      	b.n	8013a9a <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80138ba:	f7fe fa8f 	bl	8011ddc <HAL_GetTick>
 80138be:	1b40      	subs	r0, r0, r5
 80138c0:	2864      	cmp	r0, #100	; 0x64
 80138c2:	d9f5      	bls.n	80138b0 <HAL_RCC_OscConfig+0x290>
            return HAL_TIMEOUT;
 80138c4:	2003      	movs	r0, #3
 80138c6:	e6dc      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_PWR_CLK_ENABLE();
 80138c8:	4a1a      	ldr	r2, [pc, #104]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 80138ca:	69d1      	ldr	r1, [r2, #28]
 80138cc:	2080      	movs	r0, #128	; 0x80
 80138ce:	0540      	lsls	r0, r0, #21
 80138d0:	4301      	orrs	r1, r0
 80138d2:	61d1      	str	r1, [r2, #28]
 80138d4:	69d3      	ldr	r3, [r2, #28]
 80138d6:	4003      	ands	r3, r0
 80138d8:	9301      	str	r3, [sp, #4]
 80138da:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80138dc:	4a18      	ldr	r2, [pc, #96]	; (8013940 <HAL_RCC_OscConfig+0x320>)
 80138de:	6811      	ldr	r1, [r2, #0]
 80138e0:	2380      	movs	r3, #128	; 0x80
 80138e2:	005b      	lsls	r3, r3, #1
 80138e4:	430b      	orrs	r3, r1
 80138e6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80138e8:	f7fe fa78 	bl	8011ddc <HAL_GetTick>
 80138ec:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80138ee:	4b14      	ldr	r3, [pc, #80]	; (8013940 <HAL_RCC_OscConfig+0x320>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	05db      	lsls	r3, r3, #23
 80138f4:	d406      	bmi.n	8013904 <HAL_RCC_OscConfig+0x2e4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80138f6:	f7fe fa71 	bl	8011ddc <HAL_GetTick>
 80138fa:	1b40      	subs	r0, r0, r5
 80138fc:	2864      	cmp	r0, #100	; 0x64
 80138fe:	d9f6      	bls.n	80138ee <HAL_RCC_OscConfig+0x2ce>
        return HAL_TIMEOUT;
 8013900:	2003      	movs	r0, #3
 8013902:	e6be      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8013904:	4b0b      	ldr	r3, [pc, #44]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 8013906:	6a1a      	ldr	r2, [r3, #32]
 8013908:	2101      	movs	r1, #1
 801390a:	438a      	bics	r2, r1
 801390c:	621a      	str	r2, [r3, #32]
 801390e:	6a1a      	ldr	r2, [r3, #32]
 8013910:	3103      	adds	r1, #3
 8013912:	438a      	bics	r2, r1
 8013914:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8013916:	f7fe fa61 	bl	8011ddc <HAL_GetTick>
 801391a:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801391c:	4b05      	ldr	r3, [pc, #20]	; (8013934 <HAL_RCC_OscConfig+0x314>)
 801391e:	6a1b      	ldr	r3, [r3, #32]
 8013920:	079b      	lsls	r3, r3, #30
 8013922:	d511      	bpl.n	8013948 <HAL_RCC_OscConfig+0x328>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013924:	f7fe fa5a 	bl	8011ddc <HAL_GetTick>
 8013928:	1b40      	subs	r0, r0, r5
 801392a:	4b06      	ldr	r3, [pc, #24]	; (8013944 <HAL_RCC_OscConfig+0x324>)
 801392c:	4298      	cmp	r0, r3
 801392e:	d9f5      	bls.n	801391c <HAL_RCC_OscConfig+0x2fc>
        return HAL_TIMEOUT;
 8013930:	2003      	movs	r0, #3
 8013932:	e6a6      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
 8013934:	40021000 	.word	0x40021000
 8013938:	fffeffff 	.word	0xfffeffff
 801393c:	fffbffff 	.word	0xfffbffff
 8013940:	40007000 	.word	0x40007000
 8013944:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013948:	68a3      	ldr	r3, [r4, #8]
 801394a:	2b01      	cmp	r3, #1
 801394c:	d00b      	beq.n	8013966 <HAL_RCC_OscConfig+0x346>
 801394e:	2b00      	cmp	r3, #0
 8013950:	d121      	bne.n	8013996 <HAL_RCC_OscConfig+0x376>
 8013952:	4b80      	ldr	r3, [pc, #512]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013954:	6a1a      	ldr	r2, [r3, #32]
 8013956:	2101      	movs	r1, #1
 8013958:	438a      	bics	r2, r1
 801395a:	621a      	str	r2, [r3, #32]
 801395c:	6a1a      	ldr	r2, [r3, #32]
 801395e:	3103      	adds	r1, #3
 8013960:	438a      	bics	r2, r1
 8013962:	621a      	str	r2, [r3, #32]
 8013964:	e004      	b.n	8013970 <HAL_RCC_OscConfig+0x350>
 8013966:	4a7b      	ldr	r2, [pc, #492]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013968:	6a13      	ldr	r3, [r2, #32]
 801396a:	2101      	movs	r1, #1
 801396c:	430b      	orrs	r3, r1
 801396e:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013970:	68a3      	ldr	r3, [r4, #8]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d025      	beq.n	80139c2 <HAL_RCC_OscConfig+0x3a2>
      tickstart = HAL_GetTick();
 8013976:	f7fe fa31 	bl	8011ddc <HAL_GetTick>
 801397a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801397c:	4b75      	ldr	r3, [pc, #468]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 801397e:	6a1b      	ldr	r3, [r3, #32]
 8013980:	079b      	lsls	r3, r3, #30
 8013982:	d500      	bpl.n	8013986 <HAL_RCC_OscConfig+0x366>
 8013984:	e75f      	b.n	8013846 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013986:	f7fe fa29 	bl	8011ddc <HAL_GetTick>
 801398a:	1b40      	subs	r0, r0, r5
 801398c:	4b72      	ldr	r3, [pc, #456]	; (8013b58 <HAL_RCC_OscConfig+0x538>)
 801398e:	4298      	cmp	r0, r3
 8013990:	d9f4      	bls.n	801397c <HAL_RCC_OscConfig+0x35c>
          return HAL_TIMEOUT;
 8013992:	2003      	movs	r0, #3
 8013994:	e675      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013996:	2b05      	cmp	r3, #5
 8013998:	d009      	beq.n	80139ae <HAL_RCC_OscConfig+0x38e>
 801399a:	4b6e      	ldr	r3, [pc, #440]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 801399c:	6a1a      	ldr	r2, [r3, #32]
 801399e:	2101      	movs	r1, #1
 80139a0:	438a      	bics	r2, r1
 80139a2:	621a      	str	r2, [r3, #32]
 80139a4:	6a1a      	ldr	r2, [r3, #32]
 80139a6:	3103      	adds	r1, #3
 80139a8:	438a      	bics	r2, r1
 80139aa:	621a      	str	r2, [r3, #32]
 80139ac:	e7e0      	b.n	8013970 <HAL_RCC_OscConfig+0x350>
 80139ae:	4b69      	ldr	r3, [pc, #420]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 80139b0:	6a1a      	ldr	r2, [r3, #32]
 80139b2:	2104      	movs	r1, #4
 80139b4:	430a      	orrs	r2, r1
 80139b6:	621a      	str	r2, [r3, #32]
 80139b8:	6a1a      	ldr	r2, [r3, #32]
 80139ba:	3903      	subs	r1, #3
 80139bc:	430a      	orrs	r2, r1
 80139be:	621a      	str	r2, [r3, #32]
 80139c0:	e7d6      	b.n	8013970 <HAL_RCC_OscConfig+0x350>
      tickstart = HAL_GetTick();
 80139c2:	f7fe fa0b 	bl	8011ddc <HAL_GetTick>
 80139c6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80139c8:	4b62      	ldr	r3, [pc, #392]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 80139ca:	6a1b      	ldr	r3, [r3, #32]
 80139cc:	079b      	lsls	r3, r3, #30
 80139ce:	d400      	bmi.n	80139d2 <HAL_RCC_OscConfig+0x3b2>
 80139d0:	e739      	b.n	8013846 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80139d2:	f7fe fa03 	bl	8011ddc <HAL_GetTick>
 80139d6:	1b40      	subs	r0, r0, r5
 80139d8:	4b5f      	ldr	r3, [pc, #380]	; (8013b58 <HAL_RCC_OscConfig+0x538>)
 80139da:	4298      	cmp	r0, r3
 80139dc:	d9f4      	bls.n	80139c8 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 80139de:	2003      	movs	r0, #3
 80139e0:	e64f      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14ADC_DISABLE();
 80139e2:	4b5c      	ldr	r3, [pc, #368]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 80139e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80139e6:	2104      	movs	r1, #4
 80139e8:	430a      	orrs	r2, r1
 80139ea:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80139ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80139ee:	3903      	subs	r1, #3
 80139f0:	430a      	orrs	r2, r1
 80139f2:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80139f4:	f7fe f9f2 	bl	8011ddc <HAL_GetTick>
 80139f8:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80139fa:	4b56      	ldr	r3, [pc, #344]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 80139fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139fe:	079b      	lsls	r3, r3, #30
 8013a00:	d406      	bmi.n	8013a10 <HAL_RCC_OscConfig+0x3f0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8013a02:	f7fe f9eb 	bl	8011ddc <HAL_GetTick>
 8013a06:	1b40      	subs	r0, r0, r5
 8013a08:	2864      	cmp	r0, #100	; 0x64
 8013a0a:	d9f6      	bls.n	80139fa <HAL_RCC_OscConfig+0x3da>
          return HAL_TIMEOUT;
 8013a0c:	2003      	movs	r0, #3
 8013a0e:	e638      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8013a10:	4950      	ldr	r1, [pc, #320]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013a12:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8013a14:	22f8      	movs	r2, #248	; 0xf8
 8013a16:	4393      	bics	r3, r2
 8013a18:	69a2      	ldr	r2, [r4, #24]
 8013a1a:	00d2      	lsls	r2, r2, #3
 8013a1c:	4313      	orrs	r3, r2
 8013a1e:	634b      	str	r3, [r1, #52]	; 0x34
 8013a20:	e727      	b.n	8013872 <HAL_RCC_OscConfig+0x252>
      __HAL_RCC_HSI14ADC_DISABLE();
 8013a22:	4b4c      	ldr	r3, [pc, #304]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013a26:	2104      	movs	r1, #4
 8013a28:	430a      	orrs	r2, r1
 8013a2a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8013a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013a2e:	3903      	subs	r1, #3
 8013a30:	438a      	bics	r2, r1
 8013a32:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8013a34:	f7fe f9d2 	bl	8011ddc <HAL_GetTick>
 8013a38:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8013a3a:	4b46      	ldr	r3, [pc, #280]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a3e:	079b      	lsls	r3, r3, #30
 8013a40:	d400      	bmi.n	8013a44 <HAL_RCC_OscConfig+0x424>
 8013a42:	e716      	b.n	8013872 <HAL_RCC_OscConfig+0x252>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8013a44:	f7fe f9ca 	bl	8011ddc <HAL_GetTick>
 8013a48:	1b40      	subs	r0, r0, r5
 8013a4a:	2864      	cmp	r0, #100	; 0x64
 8013a4c:	d9f5      	bls.n	8013a3a <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 8013a4e:	2003      	movs	r0, #3
 8013a50:	e617      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8013a52:	4b40      	ldr	r3, [pc, #256]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013a54:	685b      	ldr	r3, [r3, #4]
 8013a56:	22c0      	movs	r2, #192	; 0xc0
 8013a58:	0252      	lsls	r2, r2, #9
 8013a5a:	4013      	ands	r3, r2
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	d000      	beq.n	8013a62 <HAL_RCC_OscConfig+0x442>
 8013a60:	e719      	b.n	8013896 <HAL_RCC_OscConfig+0x276>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8013a62:	4b3c      	ldr	r3, [pc, #240]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a66:	03db      	lsls	r3, r3, #15
 8013a68:	d517      	bpl.n	8013a9a <HAL_RCC_OscConfig+0x47a>
 8013a6a:	69e3      	ldr	r3, [r4, #28]
 8013a6c:	2b01      	cmp	r3, #1
 8013a6e:	d014      	beq.n	8013a9a <HAL_RCC_OscConfig+0x47a>
        return HAL_ERROR;
 8013a70:	2001      	movs	r0, #1
 8013a72:	e606      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI48_DISABLE();
 8013a74:	4a37      	ldr	r2, [pc, #220]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013a76:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8013a78:	4938      	ldr	r1, [pc, #224]	; (8013b5c <HAL_RCC_OscConfig+0x53c>)
 8013a7a:	400b      	ands	r3, r1
 8013a7c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8013a7e:	f7fe f9ad 	bl	8011ddc <HAL_GetTick>
 8013a82:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8013a84:	4b33      	ldr	r3, [pc, #204]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a88:	03db      	lsls	r3, r3, #15
 8013a8a:	d506      	bpl.n	8013a9a <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013a8c:	f7fe f9a6 	bl	8011ddc <HAL_GetTick>
 8013a90:	1b40      	subs	r0, r0, r5
 8013a92:	2864      	cmp	r0, #100	; 0x64
 8013a94:	d9f6      	bls.n	8013a84 <HAL_RCC_OscConfig+0x464>
            return HAL_TIMEOUT;
 8013a96:	2003      	movs	r0, #3
 8013a98:	e5f3      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d055      	beq.n	8013b4c <HAL_RCC_OscConfig+0x52c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013aa0:	4a2c      	ldr	r2, [pc, #176]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013aa2:	6851      	ldr	r1, [r2, #4]
 8013aa4:	220c      	movs	r2, #12
 8013aa6:	400a      	ands	r2, r1
 8013aa8:	2a08      	cmp	r2, #8
 8013aaa:	d051      	beq.n	8013b50 <HAL_RCC_OscConfig+0x530>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013aac:	2b02      	cmp	r3, #2
 8013aae:	d012      	beq.n	8013ad6 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 8013ab0:	4a28      	ldr	r2, [pc, #160]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013ab2:	6813      	ldr	r3, [r2, #0]
 8013ab4:	492a      	ldr	r1, [pc, #168]	; (8013b60 <HAL_RCC_OscConfig+0x540>)
 8013ab6:	400b      	ands	r3, r1
 8013ab8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8013aba:	f7fe f98f 	bl	8011ddc <HAL_GetTick>
 8013abe:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8013ac0:	4b24      	ldr	r3, [pc, #144]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	019b      	lsls	r3, r3, #6
 8013ac6:	d53d      	bpl.n	8013b44 <HAL_RCC_OscConfig+0x524>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013ac8:	f7fe f988 	bl	8011ddc <HAL_GetTick>
 8013acc:	1b00      	subs	r0, r0, r4
 8013ace:	2864      	cmp	r0, #100	; 0x64
 8013ad0:	d9f6      	bls.n	8013ac0 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8013ad2:	2003      	movs	r0, #3
 8013ad4:	e5d5      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_DISABLE();
 8013ad6:	4a1f      	ldr	r2, [pc, #124]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013ad8:	6813      	ldr	r3, [r2, #0]
 8013ada:	4921      	ldr	r1, [pc, #132]	; (8013b60 <HAL_RCC_OscConfig+0x540>)
 8013adc:	400b      	ands	r3, r1
 8013ade:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8013ae0:	f7fe f97c 	bl	8011ddc <HAL_GetTick>
 8013ae4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8013ae6:	4b1b      	ldr	r3, [pc, #108]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	019b      	lsls	r3, r3, #6
 8013aec:	d506      	bpl.n	8013afc <HAL_RCC_OscConfig+0x4dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013aee:	f7fe f975 	bl	8011ddc <HAL_GetTick>
 8013af2:	1b40      	subs	r0, r0, r5
 8013af4:	2864      	cmp	r0, #100	; 0x64
 8013af6:	d9f6      	bls.n	8013ae6 <HAL_RCC_OscConfig+0x4c6>
            return HAL_TIMEOUT;
 8013af8:	2003      	movs	r0, #3
 8013afa:	e5c2      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013afc:	4b15      	ldr	r3, [pc, #84]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b00:	210f      	movs	r1, #15
 8013b02:	438a      	bics	r2, r1
 8013b04:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013b06:	430a      	orrs	r2, r1
 8013b08:	62da      	str	r2, [r3, #44]	; 0x2c
 8013b0a:	685a      	ldr	r2, [r3, #4]
 8013b0c:	4915      	ldr	r1, [pc, #84]	; (8013b64 <HAL_RCC_OscConfig+0x544>)
 8013b0e:	400a      	ands	r2, r1
 8013b10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013b12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013b14:	4301      	orrs	r1, r0
 8013b16:	430a      	orrs	r2, r1
 8013b18:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8013b1a:	6819      	ldr	r1, [r3, #0]
 8013b1c:	2280      	movs	r2, #128	; 0x80
 8013b1e:	0452      	lsls	r2, r2, #17
 8013b20:	430a      	orrs	r2, r1
 8013b22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8013b24:	f7fe f95a 	bl	8011ddc <HAL_GetTick>
 8013b28:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8013b2a:	4b0a      	ldr	r3, [pc, #40]	; (8013b54 <HAL_RCC_OscConfig+0x534>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	019b      	lsls	r3, r3, #6
 8013b30:	d406      	bmi.n	8013b40 <HAL_RCC_OscConfig+0x520>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013b32:	f7fe f953 	bl	8011ddc <HAL_GetTick>
 8013b36:	1b00      	subs	r0, r0, r4
 8013b38:	2864      	cmp	r0, #100	; 0x64
 8013b3a:	d9f6      	bls.n	8013b2a <HAL_RCC_OscConfig+0x50a>
            return HAL_TIMEOUT;
 8013b3c:	2003      	movs	r0, #3
 8013b3e:	e5a0      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8013b40:	2000      	movs	r0, #0
 8013b42:	e59e      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
 8013b44:	2000      	movs	r0, #0
 8013b46:	e59c      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8013b48:	2001      	movs	r0, #1
 8013b4a:	e59a      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8013b4c:	2000      	movs	r0, #0
 8013b4e:	e598      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
      return HAL_ERROR;
 8013b50:	2001      	movs	r0, #1
 8013b52:	e596      	b.n	8013682 <HAL_RCC_OscConfig+0x62>
 8013b54:	40021000 	.word	0x40021000
 8013b58:	00001388 	.word	0x00001388
 8013b5c:	fffeffff 	.word	0xfffeffff
 8013b60:	feffffff 	.word	0xfeffffff
 8013b64:	ffc27fff 	.word	0xffc27fff

08013b68 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013b68:	b570      	push	{r4, r5, r6, lr}
 8013b6a:	0005      	movs	r5, r0
 8013b6c:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8013b6e:	4b8d      	ldr	r3, [pc, #564]	; (8013da4 <HAL_RCC_ClockConfig+0x23c>)
 8013b70:	681a      	ldr	r2, [r3, #0]
 8013b72:	2301      	movs	r3, #1
 8013b74:	4013      	ands	r3, r2
 8013b76:	428b      	cmp	r3, r1
 8013b78:	d300      	bcc.n	8013b7c <HAL_RCC_ClockConfig+0x14>
 8013b7a:	e082      	b.n	8013c82 <HAL_RCC_ClockConfig+0x11a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013b7c:	4989      	ldr	r1, [pc, #548]	; (8013da4 <HAL_RCC_ClockConfig+0x23c>)
 8013b7e:	680b      	ldr	r3, [r1, #0]
 8013b80:	2201      	movs	r2, #1
 8013b82:	4393      	bics	r3, r2
 8013b84:	4323      	orrs	r3, r4
 8013b86:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8013b88:	680b      	ldr	r3, [r1, #0]
 8013b8a:	401a      	ands	r2, r3
 8013b8c:	42a2      	cmp	r2, r4
 8013b8e:	d001      	beq.n	8013b94 <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 8013b90:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8013b92:	bd70      	pop	{r4, r5, r6, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013b94:	6803      	ldr	r3, [r0, #0]
 8013b96:	079b      	lsls	r3, r3, #30
 8013b98:	d506      	bpl.n	8013ba8 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013b9a:	4a83      	ldr	r2, [pc, #524]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013b9c:	6853      	ldr	r3, [r2, #4]
 8013b9e:	21f0      	movs	r1, #240	; 0xf0
 8013ba0:	438b      	bics	r3, r1
 8013ba2:	6881      	ldr	r1, [r0, #8]
 8013ba4:	430b      	orrs	r3, r1
 8013ba6:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013ba8:	682b      	ldr	r3, [r5, #0]
 8013baa:	07db      	lsls	r3, r3, #31
 8013bac:	d400      	bmi.n	8013bb0 <HAL_RCC_ClockConfig+0x48>
 8013bae:	e0e5      	b.n	8013d7c <HAL_RCC_ClockConfig+0x214>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013bb0:	686b      	ldr	r3, [r5, #4]
 8013bb2:	2b01      	cmp	r3, #1
 8013bb4:	d009      	beq.n	8013bca <HAL_RCC_ClockConfig+0x62>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013bb6:	2b02      	cmp	r3, #2
 8013bb8:	d02a      	beq.n	8013c10 <HAL_RCC_ClockConfig+0xa8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8013bba:	2b03      	cmp	r3, #3
 8013bbc:	d02e      	beq.n	8013c1c <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013bbe:	4a7a      	ldr	r2, [pc, #488]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013bc0:	6812      	ldr	r2, [r2, #0]
 8013bc2:	0792      	lsls	r2, r2, #30
 8013bc4:	d406      	bmi.n	8013bd4 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8013bc6:	2001      	movs	r0, #1
 8013bc8:	e7e3      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013bca:	4a77      	ldr	r2, [pc, #476]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013bcc:	6812      	ldr	r2, [r2, #0]
 8013bce:	0392      	lsls	r2, r2, #14
 8013bd0:	d400      	bmi.n	8013bd4 <HAL_RCC_ClockConfig+0x6c>
 8013bd2:	e0e2      	b.n	8013d9a <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013bd4:	4974      	ldr	r1, [pc, #464]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013bd6:	684a      	ldr	r2, [r1, #4]
 8013bd8:	2003      	movs	r0, #3
 8013bda:	4382      	bics	r2, r0
 8013bdc:	4313      	orrs	r3, r2
 8013bde:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8013be0:	f7fe f8fc 	bl	8011ddc <HAL_GetTick>
 8013be4:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013be6:	686b      	ldr	r3, [r5, #4]
 8013be8:	2b01      	cmp	r3, #1
 8013bea:	d01d      	beq.n	8013c28 <HAL_RCC_ClockConfig+0xc0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013bec:	2b02      	cmp	r3, #2
 8013bee:	d02a      	beq.n	8013c46 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8013bf0:	2b03      	cmp	r3, #3
 8013bf2:	d037      	beq.n	8013c64 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013bf4:	4b6c      	ldr	r3, [pc, #432]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	220c      	movs	r2, #12
 8013bfa:	421a      	tst	r2, r3
 8013bfc:	d100      	bne.n	8013c00 <HAL_RCC_ClockConfig+0x98>
 8013bfe:	e0bd      	b.n	8013d7c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013c00:	f7fe f8ec 	bl	8011ddc <HAL_GetTick>
 8013c04:	1b00      	subs	r0, r0, r4
 8013c06:	4b69      	ldr	r3, [pc, #420]	; (8013dac <HAL_RCC_ClockConfig+0x244>)
 8013c08:	4298      	cmp	r0, r3
 8013c0a:	d9f3      	bls.n	8013bf4 <HAL_RCC_ClockConfig+0x8c>
            return HAL_TIMEOUT;
 8013c0c:	2003      	movs	r0, #3
 8013c0e:	e7c0      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013c10:	4a65      	ldr	r2, [pc, #404]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013c12:	6812      	ldr	r2, [r2, #0]
 8013c14:	0192      	lsls	r2, r2, #6
 8013c16:	d4dd      	bmi.n	8013bd4 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8013c18:	2001      	movs	r0, #1
 8013c1a:	e7ba      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013c1c:	4a62      	ldr	r2, [pc, #392]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013c1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013c20:	03d2      	lsls	r2, r2, #15
 8013c22:	d4d7      	bmi.n	8013bd4 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8013c24:	2001      	movs	r0, #1
 8013c26:	e7b4      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013c28:	4b5f      	ldr	r3, [pc, #380]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013c2a:	685a      	ldr	r2, [r3, #4]
 8013c2c:	230c      	movs	r3, #12
 8013c2e:	4013      	ands	r3, r2
 8013c30:	2b04      	cmp	r3, #4
 8013c32:	d100      	bne.n	8013c36 <HAL_RCC_ClockConfig+0xce>
 8013c34:	e0a2      	b.n	8013d7c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013c36:	f7fe f8d1 	bl	8011ddc <HAL_GetTick>
 8013c3a:	1b00      	subs	r0, r0, r4
 8013c3c:	4b5b      	ldr	r3, [pc, #364]	; (8013dac <HAL_RCC_ClockConfig+0x244>)
 8013c3e:	4298      	cmp	r0, r3
 8013c40:	d9f2      	bls.n	8013c28 <HAL_RCC_ClockConfig+0xc0>
            return HAL_TIMEOUT;
 8013c42:	2003      	movs	r0, #3
 8013c44:	e7a5      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013c46:	4b58      	ldr	r3, [pc, #352]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013c48:	685a      	ldr	r2, [r3, #4]
 8013c4a:	230c      	movs	r3, #12
 8013c4c:	4013      	ands	r3, r2
 8013c4e:	2b08      	cmp	r3, #8
 8013c50:	d100      	bne.n	8013c54 <HAL_RCC_ClockConfig+0xec>
 8013c52:	e093      	b.n	8013d7c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013c54:	f7fe f8c2 	bl	8011ddc <HAL_GetTick>
 8013c58:	1b00      	subs	r0, r0, r4
 8013c5a:	4b54      	ldr	r3, [pc, #336]	; (8013dac <HAL_RCC_ClockConfig+0x244>)
 8013c5c:	4298      	cmp	r0, r3
 8013c5e:	d9f2      	bls.n	8013c46 <HAL_RCC_ClockConfig+0xde>
            return HAL_TIMEOUT;
 8013c60:	2003      	movs	r0, #3
 8013c62:	e796      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8013c64:	4b50      	ldr	r3, [pc, #320]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013c66:	685a      	ldr	r2, [r3, #4]
 8013c68:	230c      	movs	r3, #12
 8013c6a:	4013      	ands	r3, r2
 8013c6c:	2b0c      	cmp	r3, #12
 8013c6e:	d100      	bne.n	8013c72 <HAL_RCC_ClockConfig+0x10a>
 8013c70:	e084      	b.n	8013d7c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013c72:	f7fe f8b3 	bl	8011ddc <HAL_GetTick>
 8013c76:	1b00      	subs	r0, r0, r4
 8013c78:	4b4c      	ldr	r3, [pc, #304]	; (8013dac <HAL_RCC_ClockConfig+0x244>)
 8013c7a:	4298      	cmp	r0, r3
 8013c7c:	d9f2      	bls.n	8013c64 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 8013c7e:	2003      	movs	r0, #3
 8013c80:	e787      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013c82:	6803      	ldr	r3, [r0, #0]
 8013c84:	079b      	lsls	r3, r3, #30
 8013c86:	d506      	bpl.n	8013c96 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013c88:	4a47      	ldr	r2, [pc, #284]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013c8a:	6853      	ldr	r3, [r2, #4]
 8013c8c:	21f0      	movs	r1, #240	; 0xf0
 8013c8e:	438b      	bics	r3, r1
 8013c90:	6881      	ldr	r1, [r0, #8]
 8013c92:	430b      	orrs	r3, r1
 8013c94:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013c96:	682b      	ldr	r3, [r5, #0]
 8013c98:	07db      	lsls	r3, r3, #31
 8013c9a:	d563      	bpl.n	8013d64 <HAL_RCC_ClockConfig+0x1fc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013c9c:	686b      	ldr	r3, [r5, #4]
 8013c9e:	2b01      	cmp	r3, #1
 8013ca0:	d009      	beq.n	8013cb6 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013ca2:	2b02      	cmp	r3, #2
 8013ca4:	d028      	beq.n	8013cf8 <HAL_RCC_ClockConfig+0x190>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8013ca6:	2b03      	cmp	r3, #3
 8013ca8:	d02c      	beq.n	8013d04 <HAL_RCC_ClockConfig+0x19c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013caa:	4a3f      	ldr	r2, [pc, #252]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013cac:	6812      	ldr	r2, [r2, #0]
 8013cae:	0792      	lsls	r2, r2, #30
 8013cb0:	d405      	bmi.n	8013cbe <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8013cb2:	2001      	movs	r0, #1
 8013cb4:	e76d      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013cb6:	4a3c      	ldr	r2, [pc, #240]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013cb8:	6812      	ldr	r2, [r2, #0]
 8013cba:	0392      	lsls	r2, r2, #14
 8013cbc:	d56f      	bpl.n	8013d9e <HAL_RCC_ClockConfig+0x236>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013cbe:	493a      	ldr	r1, [pc, #232]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013cc0:	684a      	ldr	r2, [r1, #4]
 8013cc2:	2003      	movs	r0, #3
 8013cc4:	4382      	bics	r2, r0
 8013cc6:	4313      	orrs	r3, r2
 8013cc8:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8013cca:	f7fe f887 	bl	8011ddc <HAL_GetTick>
 8013cce:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013cd0:	686b      	ldr	r3, [r5, #4]
 8013cd2:	2b01      	cmp	r3, #1
 8013cd4:	d01c      	beq.n	8013d10 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013cd6:	2b02      	cmp	r3, #2
 8013cd8:	d028      	beq.n	8013d2c <HAL_RCC_ClockConfig+0x1c4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8013cda:	2b03      	cmp	r3, #3
 8013cdc:	d034      	beq.n	8013d48 <HAL_RCC_ClockConfig+0x1e0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013cde:	4b32      	ldr	r3, [pc, #200]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013ce0:	685b      	ldr	r3, [r3, #4]
 8013ce2:	220c      	movs	r2, #12
 8013ce4:	421a      	tst	r2, r3
 8013ce6:	d03d      	beq.n	8013d64 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013ce8:	f7fe f878 	bl	8011ddc <HAL_GetTick>
 8013cec:	1b80      	subs	r0, r0, r6
 8013cee:	4b2f      	ldr	r3, [pc, #188]	; (8013dac <HAL_RCC_ClockConfig+0x244>)
 8013cf0:	4298      	cmp	r0, r3
 8013cf2:	d9f4      	bls.n	8013cde <HAL_RCC_ClockConfig+0x176>
            return HAL_TIMEOUT;
 8013cf4:	2003      	movs	r0, #3
 8013cf6:	e74c      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013cf8:	4a2b      	ldr	r2, [pc, #172]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013cfa:	6812      	ldr	r2, [r2, #0]
 8013cfc:	0192      	lsls	r2, r2, #6
 8013cfe:	d4de      	bmi.n	8013cbe <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8013d00:	2001      	movs	r0, #1
 8013d02:	e746      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013d04:	4a28      	ldr	r2, [pc, #160]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013d06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013d08:	03d2      	lsls	r2, r2, #15
 8013d0a:	d4d8      	bmi.n	8013cbe <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8013d0c:	2001      	movs	r0, #1
 8013d0e:	e740      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013d10:	4b25      	ldr	r3, [pc, #148]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013d12:	685a      	ldr	r2, [r3, #4]
 8013d14:	230c      	movs	r3, #12
 8013d16:	4013      	ands	r3, r2
 8013d18:	2b04      	cmp	r3, #4
 8013d1a:	d023      	beq.n	8013d64 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013d1c:	f7fe f85e 	bl	8011ddc <HAL_GetTick>
 8013d20:	1b80      	subs	r0, r0, r6
 8013d22:	4b22      	ldr	r3, [pc, #136]	; (8013dac <HAL_RCC_ClockConfig+0x244>)
 8013d24:	4298      	cmp	r0, r3
 8013d26:	d9f3      	bls.n	8013d10 <HAL_RCC_ClockConfig+0x1a8>
            return HAL_TIMEOUT;
 8013d28:	2003      	movs	r0, #3
 8013d2a:	e732      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013d2c:	4b1e      	ldr	r3, [pc, #120]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013d2e:	685a      	ldr	r2, [r3, #4]
 8013d30:	230c      	movs	r3, #12
 8013d32:	4013      	ands	r3, r2
 8013d34:	2b08      	cmp	r3, #8
 8013d36:	d015      	beq.n	8013d64 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013d38:	f7fe f850 	bl	8011ddc <HAL_GetTick>
 8013d3c:	1b80      	subs	r0, r0, r6
 8013d3e:	4b1b      	ldr	r3, [pc, #108]	; (8013dac <HAL_RCC_ClockConfig+0x244>)
 8013d40:	4298      	cmp	r0, r3
 8013d42:	d9f3      	bls.n	8013d2c <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
 8013d44:	2003      	movs	r0, #3
 8013d46:	e724      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8013d48:	4b17      	ldr	r3, [pc, #92]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013d4a:	685a      	ldr	r2, [r3, #4]
 8013d4c:	230c      	movs	r3, #12
 8013d4e:	4013      	ands	r3, r2
 8013d50:	2b0c      	cmp	r3, #12
 8013d52:	d007      	beq.n	8013d64 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013d54:	f7fe f842 	bl	8011ddc <HAL_GetTick>
 8013d58:	1b80      	subs	r0, r0, r6
 8013d5a:	4b14      	ldr	r3, [pc, #80]	; (8013dac <HAL_RCC_ClockConfig+0x244>)
 8013d5c:	4298      	cmp	r0, r3
 8013d5e:	d9f3      	bls.n	8013d48 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
 8013d60:	2003      	movs	r0, #3
 8013d62:	e716      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013d64:	490f      	ldr	r1, [pc, #60]	; (8013da4 <HAL_RCC_ClockConfig+0x23c>)
 8013d66:	680b      	ldr	r3, [r1, #0]
 8013d68:	2201      	movs	r2, #1
 8013d6a:	4393      	bics	r3, r2
 8013d6c:	4323      	orrs	r3, r4
 8013d6e:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8013d70:	680b      	ldr	r3, [r1, #0]
 8013d72:	401a      	ands	r2, r3
 8013d74:	42a2      	cmp	r2, r4
 8013d76:	d001      	beq.n	8013d7c <HAL_RCC_ClockConfig+0x214>
      return HAL_ERROR;
 8013d78:	2001      	movs	r0, #1
 8013d7a:	e70a      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013d7c:	682b      	ldr	r3, [r5, #0]
 8013d7e:	075b      	lsls	r3, r3, #29
 8013d80:	d506      	bpl.n	8013d90 <HAL_RCC_ClockConfig+0x228>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8013d82:	4a09      	ldr	r2, [pc, #36]	; (8013da8 <HAL_RCC_ClockConfig+0x240>)
 8013d84:	6853      	ldr	r3, [r2, #4]
 8013d86:	490a      	ldr	r1, [pc, #40]	; (8013db0 <HAL_RCC_ClockConfig+0x248>)
 8013d88:	400b      	ands	r3, r1
 8013d8a:	68e9      	ldr	r1, [r5, #12]
 8013d8c:	430b      	orrs	r3, r1
 8013d8e:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8013d90:	2000      	movs	r0, #0
 8013d92:	f7fd fff9 	bl	8011d88 <HAL_InitTick>
  return HAL_OK;
 8013d96:	2000      	movs	r0, #0
 8013d98:	e6fb      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 8013d9a:	2001      	movs	r0, #1
 8013d9c:	e6f9      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 8013d9e:	2001      	movs	r0, #1
 8013da0:	e6f7      	b.n	8013b92 <HAL_RCC_ClockConfig+0x2a>
 8013da2:	46c0      	nop			; (mov r8, r8)
 8013da4:	40022000 	.word	0x40022000
 8013da8:	40021000 	.word	0x40021000
 8013dac:	00001388 	.word	0x00001388
 8013db0:	fffff8ff 	.word	0xfffff8ff

08013db4 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013db4:	b530      	push	{r4, r5, lr}
 8013db6:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8013db8:	aa04      	add	r2, sp, #16
 8013dba:	4b1f      	ldr	r3, [pc, #124]	; (8013e38 <HAL_RCC_GetSysClockFreq+0x84>)
 8013dbc:	0018      	movs	r0, r3
 8013dbe:	c832      	ldmia	r0!, {r1, r4, r5}
 8013dc0:	c232      	stmia	r2!, {r1, r4, r5}
 8013dc2:	0011      	movs	r1, r2
 8013dc4:	6802      	ldr	r2, [r0, #0]
 8013dc6:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8013dc8:	466a      	mov	r2, sp
 8013dca:	3310      	adds	r3, #16
 8013dcc:	cb13      	ldmia	r3!, {r0, r1, r4}
 8013dce:	c213      	stmia	r2!, {r0, r1, r4}
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8013dd4:	4b19      	ldr	r3, [pc, #100]	; (8013e3c <HAL_RCC_GetSysClockFreq+0x88>)
 8013dd6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8013dd8:	230c      	movs	r3, #12
 8013dda:	4013      	ands	r3, r2
 8013ddc:	2b08      	cmp	r3, #8
 8013dde:	d004      	beq.n	8013dea <HAL_RCC_GetSysClockFreq+0x36>
 8013de0:	2b0c      	cmp	r3, #12
 8013de2:	d026      	beq.n	8013e32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8013de4:	4816      	ldr	r0, [pc, #88]	; (8013e40 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8013de6:	b009      	add	sp, #36	; 0x24
 8013de8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8013dea:	0c91      	lsrs	r1, r2, #18
 8013dec:	230f      	movs	r3, #15
 8013dee:	4019      	ands	r1, r3
 8013df0:	a804      	add	r0, sp, #16
 8013df2:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8013df4:	4911      	ldr	r1, [pc, #68]	; (8013e3c <HAL_RCC_GetSysClockFreq+0x88>)
 8013df6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8013df8:	400b      	ands	r3, r1
 8013dfa:	4669      	mov	r1, sp
 8013dfc:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8013dfe:	23c0      	movs	r3, #192	; 0xc0
 8013e00:	025b      	lsls	r3, r3, #9
 8013e02:	401a      	ands	r2, r3
 8013e04:	2380      	movs	r3, #128	; 0x80
 8013e06:	025b      	lsls	r3, r3, #9
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d008      	beq.n	8013e1e <HAL_RCC_GetSysClockFreq+0x6a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8013e0c:	23c0      	movs	r3, #192	; 0xc0
 8013e0e:	025b      	lsls	r3, r3, #9
 8013e10:	429a      	cmp	r2, r3
 8013e12:	d009      	beq.n	8013e28 <HAL_RCC_GetSysClockFreq+0x74>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8013e14:	480a      	ldr	r0, [pc, #40]	; (8013e40 <HAL_RCC_GetSysClockFreq+0x8c>)
 8013e16:	f7ec f99b 	bl	8000150 <__udivsi3>
 8013e1a:	4360      	muls	r0, r4
 8013e1c:	e7e3      	b.n	8013de6 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8013e1e:	4808      	ldr	r0, [pc, #32]	; (8013e40 <HAL_RCC_GetSysClockFreq+0x8c>)
 8013e20:	f7ec f996 	bl	8000150 <__udivsi3>
 8013e24:	4360      	muls	r0, r4
 8013e26:	e7de      	b.n	8013de6 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8013e28:	4806      	ldr	r0, [pc, #24]	; (8013e44 <HAL_RCC_GetSysClockFreq+0x90>)
 8013e2a:	f7ec f991 	bl	8000150 <__udivsi3>
 8013e2e:	4360      	muls	r0, r4
 8013e30:	e7d9      	b.n	8013de6 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSI48_VALUE;
 8013e32:	4804      	ldr	r0, [pc, #16]	; (8013e44 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8013e34:	e7d7      	b.n	8013de6 <HAL_RCC_GetSysClockFreq+0x32>
 8013e36:	46c0      	nop			; (mov r8, r8)
 8013e38:	08019d74 	.word	0x08019d74
 8013e3c:	40021000 	.word	0x40021000
 8013e40:	007a1200 	.word	0x007a1200
 8013e44:	02dc6c00 	.word	0x02dc6c00

08013e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013e48:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8013e4a:	f7ff ffb3 	bl	8013db4 <HAL_RCC_GetSysClockFreq>
 8013e4e:	4b05      	ldr	r3, [pc, #20]	; (8013e64 <HAL_RCC_GetHCLKFreq+0x1c>)
 8013e50:	685a      	ldr	r2, [r3, #4]
 8013e52:	0912      	lsrs	r2, r2, #4
 8013e54:	230f      	movs	r3, #15
 8013e56:	4013      	ands	r3, r2
 8013e58:	4a03      	ldr	r2, [pc, #12]	; (8013e68 <HAL_RCC_GetHCLKFreq+0x20>)
 8013e5a:	5cd3      	ldrb	r3, [r2, r3]
 8013e5c:	40d8      	lsrs	r0, r3
 8013e5e:	4b03      	ldr	r3, [pc, #12]	; (8013e6c <HAL_RCC_GetHCLKFreq+0x24>)
 8013e60:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8013e62:	bd10      	pop	{r4, pc}
 8013e64:	40021000 	.word	0x40021000
 8013e68:	0801d4c0 	.word	0x0801d4c0
 8013e6c:	200000c0 	.word	0x200000c0

08013e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013e70:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8013e72:	f7ff ffe9 	bl	8013e48 <HAL_RCC_GetHCLKFreq>
 8013e76:	4b04      	ldr	r3, [pc, #16]	; (8013e88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8013e78:	685a      	ldr	r2, [r3, #4]
 8013e7a:	0a12      	lsrs	r2, r2, #8
 8013e7c:	2307      	movs	r3, #7
 8013e7e:	4013      	ands	r3, r2
 8013e80:	4a02      	ldr	r2, [pc, #8]	; (8013e8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8013e82:	5cd3      	ldrb	r3, [r2, r3]
 8013e84:	40d8      	lsrs	r0, r3
}    
 8013e86:	bd10      	pop	{r4, pc}
 8013e88:	40021000 	.word	0x40021000
 8013e8c:	0801d4c0 	.word	0x0801d4c0

08013e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013e90:	b530      	push	{r4, r5, lr}
 8013e92:	b083      	sub	sp, #12
 8013e94:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013e96:	6803      	ldr	r3, [r0, #0]
 8013e98:	03db      	lsls	r3, r3, #15
 8013e9a:	d507      	bpl.n	8013eac <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8013e9c:	4b41      	ldr	r3, [pc, #260]	; (8013fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013e9e:	6a1b      	ldr	r3, [r3, #32]
 8013ea0:	6842      	ldr	r2, [r0, #4]
 8013ea2:	4053      	eors	r3, r2
 8013ea4:	22c0      	movs	r2, #192	; 0xc0
 8013ea6:	0092      	lsls	r2, r2, #2
 8013ea8:	4213      	tst	r3, r2
 8013eaa:	d134      	bne.n	8013f16 <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013eac:	6823      	ldr	r3, [r4, #0]
 8013eae:	07db      	lsls	r3, r3, #31
 8013eb0:	d506      	bpl.n	8013ec0 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013eb2:	4a3c      	ldr	r2, [pc, #240]	; (8013fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013eb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013eb6:	2103      	movs	r1, #3
 8013eb8:	438b      	bics	r3, r1
 8013eba:	68a1      	ldr	r1, [r4, #8]
 8013ebc:	430b      	orrs	r3, r1
 8013ebe:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013ec0:	6823      	ldr	r3, [r4, #0]
 8013ec2:	079b      	lsls	r3, r3, #30
 8013ec4:	d506      	bpl.n	8013ed4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013ec6:	4a37      	ldr	r2, [pc, #220]	; (8013fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013ec8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013eca:	4937      	ldr	r1, [pc, #220]	; (8013fa8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8013ecc:	400b      	ands	r3, r1
 8013ece:	68e1      	ldr	r1, [r4, #12]
 8013ed0:	430b      	orrs	r3, r1
 8013ed2:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8013ed4:	6823      	ldr	r3, [r4, #0]
 8013ed6:	035b      	lsls	r3, r3, #13
 8013ed8:	d506      	bpl.n	8013ee8 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8013eda:	4a32      	ldr	r2, [pc, #200]	; (8013fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013edc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013ede:	4933      	ldr	r1, [pc, #204]	; (8013fac <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8013ee0:	400b      	ands	r3, r1
 8013ee2:	6921      	ldr	r1, [r4, #16]
 8013ee4:	430b      	orrs	r3, r1
 8013ee6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013ee8:	6823      	ldr	r3, [r4, #0]
 8013eea:	069b      	lsls	r3, r3, #26
 8013eec:	d506      	bpl.n	8013efc <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013eee:	4a2d      	ldr	r2, [pc, #180]	; (8013fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013ef0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013ef2:	2110      	movs	r1, #16
 8013ef4:	438b      	bics	r3, r1
 8013ef6:	6961      	ldr	r1, [r4, #20]
 8013ef8:	430b      	orrs	r3, r1
 8013efa:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013efc:	6823      	ldr	r3, [r4, #0]
 8013efe:	055b      	lsls	r3, r3, #21
 8013f00:	d54e      	bpl.n	8013fa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013f02:	4a28      	ldr	r2, [pc, #160]	; (8013fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013f04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013f06:	2140      	movs	r1, #64	; 0x40
 8013f08:	438b      	bics	r3, r1
 8013f0a:	69a1      	ldr	r1, [r4, #24]
 8013f0c:	430b      	orrs	r3, r1
 8013f0e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8013f10:	2000      	movs	r0, #0
}
 8013f12:	b003      	add	sp, #12
 8013f14:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8013f16:	4a23      	ldr	r2, [pc, #140]	; (8013fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013f18:	69d1      	ldr	r1, [r2, #28]
 8013f1a:	2080      	movs	r0, #128	; 0x80
 8013f1c:	0540      	lsls	r0, r0, #21
 8013f1e:	4301      	orrs	r1, r0
 8013f20:	61d1      	str	r1, [r2, #28]
 8013f22:	69d3      	ldr	r3, [r2, #28]
 8013f24:	4003      	ands	r3, r0
 8013f26:	9301      	str	r3, [sp, #4]
 8013f28:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013f2a:	4a21      	ldr	r2, [pc, #132]	; (8013fb0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013f2c:	6811      	ldr	r1, [r2, #0]
 8013f2e:	2380      	movs	r3, #128	; 0x80
 8013f30:	005b      	lsls	r3, r3, #1
 8013f32:	430b      	orrs	r3, r1
 8013f34:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8013f36:	f7fd ff51 	bl	8011ddc <HAL_GetTick>
 8013f3a:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8013f3c:	4b1c      	ldr	r3, [pc, #112]	; (8013fb0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	05db      	lsls	r3, r3, #23
 8013f42:	d406      	bmi.n	8013f52 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013f44:	f7fd ff4a 	bl	8011ddc <HAL_GetTick>
 8013f48:	1b40      	subs	r0, r0, r5
 8013f4a:	2864      	cmp	r0, #100	; 0x64
 8013f4c:	d9f6      	bls.n	8013f3c <HAL_RCCEx_PeriphCLKConfig+0xac>
          return HAL_TIMEOUT;
 8013f4e:	2003      	movs	r0, #3
 8013f50:	e7df      	b.n	8013f12 <HAL_RCCEx_PeriphCLKConfig+0x82>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013f52:	4b14      	ldr	r3, [pc, #80]	; (8013fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013f54:	6a18      	ldr	r0, [r3, #32]
 8013f56:	4a17      	ldr	r2, [pc, #92]	; (8013fb4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8013f58:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8013f5a:	6a1d      	ldr	r5, [r3, #32]
 8013f5c:	2180      	movs	r1, #128	; 0x80
 8013f5e:	0249      	lsls	r1, r1, #9
 8013f60:	4329      	orrs	r1, r5
 8013f62:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013f64:	6a19      	ldr	r1, [r3, #32]
 8013f66:	4d14      	ldr	r5, [pc, #80]	; (8013fb8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8013f68:	4029      	ands	r1, r5
 8013f6a:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8013f6c:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8013f6e:	0783      	lsls	r3, r0, #30
 8013f70:	d407      	bmi.n	8013f82 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8013f72:	4a0c      	ldr	r2, [pc, #48]	; (8013fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013f74:	6a13      	ldr	r3, [r2, #32]
 8013f76:	490f      	ldr	r1, [pc, #60]	; (8013fb4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8013f78:	400b      	ands	r3, r1
 8013f7a:	6861      	ldr	r1, [r4, #4]
 8013f7c:	430b      	orrs	r3, r1
 8013f7e:	6213      	str	r3, [r2, #32]
 8013f80:	e794      	b.n	8013eac <HAL_RCCEx_PeriphCLKConfig+0x1c>
        tickstart = HAL_GetTick();
 8013f82:	f7fd ff2b 	bl	8011ddc <HAL_GetTick>
 8013f86:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013f88:	4b06      	ldr	r3, [pc, #24]	; (8013fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013f8a:	6a1b      	ldr	r3, [r3, #32]
 8013f8c:	079b      	lsls	r3, r3, #30
 8013f8e:	d4f0      	bmi.n	8013f72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013f90:	f7fd ff24 	bl	8011ddc <HAL_GetTick>
 8013f94:	1b40      	subs	r0, r0, r5
 8013f96:	4b09      	ldr	r3, [pc, #36]	; (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8013f98:	4298      	cmp	r0, r3
 8013f9a:	d9f5      	bls.n	8013f88 <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
 8013f9c:	2003      	movs	r0, #3
 8013f9e:	e7b8      	b.n	8013f12 <HAL_RCCEx_PeriphCLKConfig+0x82>
  return HAL_OK;
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	e7b6      	b.n	8013f12 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8013fa4:	40021000 	.word	0x40021000
 8013fa8:	fffcffff 	.word	0xfffcffff
 8013fac:	fff3ffff 	.word	0xfff3ffff
 8013fb0:	40007000 	.word	0x40007000
 8013fb4:	fffffcff 	.word	0xfffffcff
 8013fb8:	fffeffff 	.word	0xfffeffff
 8013fbc:	00001388 	.word	0x00001388

08013fc0 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8013fc0:	4770      	bx	lr

08013fc2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8013fc2:	b570      	push	{r4, r5, r6, lr}
 8013fc4:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013fc6:	6802      	ldr	r2, [r0, #0]
 8013fc8:	68d3      	ldr	r3, [r2, #12]
 8013fca:	21a0      	movs	r1, #160	; 0xa0
 8013fcc:	438b      	bics	r3, r1
 8013fce:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8013fd0:	f7fd ff04 	bl	8011ddc <HAL_GetTick>
 8013fd4:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8013fd6:	6823      	ldr	r3, [r4, #0]
 8013fd8:	68db      	ldr	r3, [r3, #12]
 8013fda:	069b      	lsls	r3, r3, #26
 8013fdc:	d408      	bmi.n	8013ff0 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013fde:	f7fd fefd 	bl	8011ddc <HAL_GetTick>
 8013fe2:	1b40      	subs	r0, r0, r5
 8013fe4:	23fa      	movs	r3, #250	; 0xfa
 8013fe6:	009b      	lsls	r3, r3, #2
 8013fe8:	4298      	cmp	r0, r3
 8013fea:	d9f4      	bls.n	8013fd6 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8013fec:	2003      	movs	r0, #3
 8013fee:	e000      	b.n	8013ff2 <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 8013ff0:	2000      	movs	r0, #0
}
 8013ff2:	bd70      	pop	{r4, r5, r6, pc}

08013ff4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8013ff4:	b570      	push	{r4, r5, r6, lr}
 8013ff6:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013ff8:	6803      	ldr	r3, [r0, #0]
 8013ffa:	68da      	ldr	r2, [r3, #12]
 8013ffc:	0652      	lsls	r2, r2, #25
 8013ffe:	d501      	bpl.n	8014004 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8014000:	2000      	movs	r0, #0
}
 8014002:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8014004:	2201      	movs	r2, #1
 8014006:	4252      	negs	r2, r2
 8014008:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 801400a:	f7fd fee7 	bl	8011ddc <HAL_GetTick>
 801400e:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8014010:	6823      	ldr	r3, [r4, #0]
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	065b      	lsls	r3, r3, #25
 8014016:	d408      	bmi.n	801402a <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8014018:	f7fd fee0 	bl	8011ddc <HAL_GetTick>
 801401c:	1b40      	subs	r0, r0, r5
 801401e:	23fa      	movs	r3, #250	; 0xfa
 8014020:	009b      	lsls	r3, r3, #2
 8014022:	4298      	cmp	r0, r3
 8014024:	d9f4      	bls.n	8014010 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8014026:	2003      	movs	r0, #3
 8014028:	e7eb      	b.n	8014002 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 801402a:	2000      	movs	r0, #0
 801402c:	e7e9      	b.n	8014002 <RTC_EnterInitMode+0xe>
	...

08014030 <HAL_RTC_Init>:
{
 8014030:	b570      	push	{r4, r5, r6, lr}
 8014032:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8014034:	d046      	beq.n	80140c4 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8014036:	7f43      	ldrb	r3, [r0, #29]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d038      	beq.n	80140ae <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801403c:	2302      	movs	r3, #2
 801403e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014040:	6823      	ldr	r3, [r4, #0]
 8014042:	22ca      	movs	r2, #202	; 0xca
 8014044:	625a      	str	r2, [r3, #36]	; 0x24
 8014046:	6823      	ldr	r3, [r4, #0]
 8014048:	3a77      	subs	r2, #119	; 0x77
 801404a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801404c:	0020      	movs	r0, r4
 801404e:	f7ff ffd1 	bl	8013ff4 <RTC_EnterInitMode>
 8014052:	2800      	cmp	r0, #0
 8014054:	d12f      	bne.n	80140b6 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8014056:	6822      	ldr	r2, [r4, #0]
 8014058:	6893      	ldr	r3, [r2, #8]
 801405a:	491b      	ldr	r1, [pc, #108]	; (80140c8 <HAL_RTC_Init+0x98>)
 801405c:	400b      	ands	r3, r1
 801405e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8014060:	6821      	ldr	r1, [r4, #0]
 8014062:	688a      	ldr	r2, [r1, #8]
 8014064:	6863      	ldr	r3, [r4, #4]
 8014066:	6925      	ldr	r5, [r4, #16]
 8014068:	432b      	orrs	r3, r5
 801406a:	6965      	ldr	r5, [r4, #20]
 801406c:	432b      	orrs	r3, r5
 801406e:	4313      	orrs	r3, r2
 8014070:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8014072:	6823      	ldr	r3, [r4, #0]
 8014074:	68e2      	ldr	r2, [r4, #12]
 8014076:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8014078:	6821      	ldr	r1, [r4, #0]
 801407a:	690b      	ldr	r3, [r1, #16]
 801407c:	68a2      	ldr	r2, [r4, #8]
 801407e:	0412      	lsls	r2, r2, #16
 8014080:	4313      	orrs	r3, r2
 8014082:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8014084:	6822      	ldr	r2, [r4, #0]
 8014086:	68d3      	ldr	r3, [r2, #12]
 8014088:	2180      	movs	r1, #128	; 0x80
 801408a:	438b      	bics	r3, r1
 801408c:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801408e:	6822      	ldr	r2, [r4, #0]
 8014090:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8014092:	490e      	ldr	r1, [pc, #56]	; (80140cc <HAL_RTC_Init+0x9c>)
 8014094:	400b      	ands	r3, r1
 8014096:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8014098:	6822      	ldr	r2, [r4, #0]
 801409a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801409c:	69a1      	ldr	r1, [r4, #24]
 801409e:	430b      	orrs	r3, r1
 80140a0:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80140a2:	6823      	ldr	r3, [r4, #0]
 80140a4:	22ff      	movs	r2, #255	; 0xff
 80140a6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80140a8:	2301      	movs	r3, #1
 80140aa:	7763      	strb	r3, [r4, #29]
}
 80140ac:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80140ae:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80140b0:	f7ff ff86 	bl	8013fc0 <HAL_RTC_MspInit>
 80140b4:	e7c2      	b.n	801403c <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80140b6:	6823      	ldr	r3, [r4, #0]
 80140b8:	22ff      	movs	r2, #255	; 0xff
 80140ba:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80140bc:	2304      	movs	r3, #4
 80140be:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80140c0:	2001      	movs	r0, #1
 80140c2:	e7f3      	b.n	80140ac <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 80140c4:	2001      	movs	r0, #1
 80140c6:	e7f1      	b.n	80140ac <HAL_RTC_Init+0x7c>
 80140c8:	ff8fffbf 	.word	0xff8fffbf
 80140cc:	fffbffff 	.word	0xfffbffff

080140d0 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 80140d0:	2300      	movs	r3, #0
  
  while(Value >= 10)
 80140d2:	e002      	b.n	80140da <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80140d4:	3301      	adds	r3, #1
    Value -= 10;
 80140d6:	380a      	subs	r0, #10
 80140d8:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80140da:	2809      	cmp	r0, #9
 80140dc:	d8fa      	bhi.n	80140d4 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80140de:	011b      	lsls	r3, r3, #4
 80140e0:	b2db      	uxtb	r3, r3
 80140e2:	4318      	orrs	r0, r3
}
 80140e4:	4770      	bx	lr
	...

080140e8 <HAL_RTC_SetTime>:
{
 80140e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ea:	0004      	movs	r4, r0
 80140ec:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80140ee:	7f03      	ldrb	r3, [r0, #28]
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	d100      	bne.n	80140f6 <HAL_RTC_SetTime+0xe>
 80140f4:	e070      	b.n	80141d8 <HAL_RTC_SetTime+0xf0>
 80140f6:	2301      	movs	r3, #1
 80140f8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80140fa:	3301      	adds	r3, #1
 80140fc:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80140fe:	2a00      	cmp	r2, #0
 8014100:	d141      	bne.n	8014186 <HAL_RTC_SetTime+0x9e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8014102:	6803      	ldr	r3, [r0, #0]
 8014104:	689b      	ldr	r3, [r3, #8]
 8014106:	065b      	lsls	r3, r3, #25
 8014108:	d401      	bmi.n	801410e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 801410a:	2300      	movs	r3, #0
 801410c:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801410e:	7830      	ldrb	r0, [r6, #0]
 8014110:	f7ff ffde 	bl	80140d0 <RTC_ByteToBcd2>
 8014114:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8014116:	7870      	ldrb	r0, [r6, #1]
 8014118:	f7ff ffda 	bl	80140d0 <RTC_ByteToBcd2>
 801411c:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801411e:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8014120:	78b0      	ldrb	r0, [r6, #2]
 8014122:	f7ff ffd5 	bl	80140d0 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8014126:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8014128:	7a30      	ldrb	r0, [r6, #8]
 801412a:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801412c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801412e:	6823      	ldr	r3, [r4, #0]
 8014130:	22ca      	movs	r2, #202	; 0xca
 8014132:	625a      	str	r2, [r3, #36]	; 0x24
 8014134:	6823      	ldr	r3, [r4, #0]
 8014136:	3a77      	subs	r2, #119	; 0x77
 8014138:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801413a:	0020      	movs	r0, r4
 801413c:	f7ff ff5a 	bl	8013ff4 <RTC_EnterInitMode>
 8014140:	1e07      	subs	r7, r0, #0
 8014142:	d131      	bne.n	80141a8 <HAL_RTC_SetTime+0xc0>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8014144:	6823      	ldr	r3, [r4, #0]
 8014146:	4825      	ldr	r0, [pc, #148]	; (80141dc <HAL_RTC_SetTime+0xf4>)
 8014148:	4005      	ands	r5, r0
 801414a:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 801414c:	6822      	ldr	r2, [r4, #0]
 801414e:	6893      	ldr	r3, [r2, #8]
 8014150:	4923      	ldr	r1, [pc, #140]	; (80141e0 <HAL_RTC_SetTime+0xf8>)
 8014152:	400b      	ands	r3, r1
 8014154:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8014156:	6821      	ldr	r1, [r4, #0]
 8014158:	688b      	ldr	r3, [r1, #8]
 801415a:	68f2      	ldr	r2, [r6, #12]
 801415c:	6930      	ldr	r0, [r6, #16]
 801415e:	4302      	orrs	r2, r0
 8014160:	4313      	orrs	r3, r2
 8014162:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8014164:	6822      	ldr	r2, [r4, #0]
 8014166:	68d3      	ldr	r3, [r2, #12]
 8014168:	2180      	movs	r1, #128	; 0x80
 801416a:	438b      	bics	r3, r1
 801416c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801416e:	6823      	ldr	r3, [r4, #0]
 8014170:	689b      	ldr	r3, [r3, #8]
 8014172:	069b      	lsls	r3, r3, #26
 8014174:	d522      	bpl.n	80141bc <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014176:	6823      	ldr	r3, [r4, #0]
 8014178:	22ff      	movs	r2, #255	; 0xff
 801417a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 801417c:	2301      	movs	r3, #1
 801417e:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8014180:	2300      	movs	r3, #0
 8014182:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8014184:	e018      	b.n	80141b8 <HAL_RTC_SetTime+0xd0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8014186:	6803      	ldr	r3, [r0, #0]
 8014188:	689b      	ldr	r3, [r3, #8]
 801418a:	065b      	lsls	r3, r3, #25
 801418c:	d401      	bmi.n	8014192 <HAL_RTC_SetTime+0xaa>
      sTime->TimeFormat = 0x00;
 801418e:	2300      	movs	r3, #0
 8014190:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8014192:	7835      	ldrb	r5, [r6, #0]
 8014194:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8014196:	7870      	ldrb	r0, [r6, #1]
 8014198:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801419a:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 801419c:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 801419e:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 80141a0:	7a30      	ldrb	r0, [r6, #8]
 80141a2:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80141a4:	4305      	orrs	r5, r0
 80141a6:	e7c2      	b.n	801412e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80141a8:	6823      	ldr	r3, [r4, #0]
 80141aa:	22ff      	movs	r2, #255	; 0xff
 80141ac:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80141ae:	2304      	movs	r3, #4
 80141b0:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80141b2:	2300      	movs	r3, #0
 80141b4:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80141b6:	2701      	movs	r7, #1
}
 80141b8:	0038      	movs	r0, r7
 80141ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80141bc:	0020      	movs	r0, r4
 80141be:	f7ff ff00 	bl	8013fc2 <HAL_RTC_WaitForSynchro>
 80141c2:	2800      	cmp	r0, #0
 80141c4:	d0d7      	beq.n	8014176 <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80141c6:	6823      	ldr	r3, [r4, #0]
 80141c8:	22ff      	movs	r2, #255	; 0xff
 80141ca:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80141cc:	2304      	movs	r3, #4
 80141ce:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80141d0:	2300      	movs	r3, #0
 80141d2:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80141d4:	2701      	movs	r7, #1
 80141d6:	e7ef      	b.n	80141b8 <HAL_RTC_SetTime+0xd0>
  __HAL_LOCK(hrtc);
 80141d8:	2702      	movs	r7, #2
 80141da:	e7ed      	b.n	80141b8 <HAL_RTC_SetTime+0xd0>
 80141dc:	007f7f7f 	.word	0x007f7f7f
 80141e0:	fffbffff 	.word	0xfffbffff

080141e4 <HAL_RTC_SetDate>:
{
 80141e4:	b570      	push	{r4, r5, r6, lr}
 80141e6:	0004      	movs	r4, r0
 80141e8:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 80141ea:	7f03      	ldrb	r3, [r0, #28]
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d061      	beq.n	80142b4 <HAL_RTC_SetDate+0xd0>
 80141f0:	2301      	movs	r3, #1
 80141f2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80141f4:	3301      	adds	r3, #1
 80141f6:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80141f8:	2a00      	cmp	r2, #0
 80141fa:	d106      	bne.n	801420a <HAL_RTC_SetDate+0x26>
 80141fc:	784b      	ldrb	r3, [r1, #1]
 80141fe:	06d9      	lsls	r1, r3, #27
 8014200:	d503      	bpl.n	801420a <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8014202:	2110      	movs	r1, #16
 8014204:	438b      	bics	r3, r1
 8014206:	330a      	adds	r3, #10
 8014208:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 801420a:	2a00      	cmp	r2, #0
 801420c:	d12f      	bne.n	801426e <HAL_RTC_SetDate+0x8a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801420e:	78f0      	ldrb	r0, [r6, #3]
 8014210:	f7ff ff5e 	bl	80140d0 <RTC_ByteToBcd2>
 8014214:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8014216:	7870      	ldrb	r0, [r6, #1]
 8014218:	f7ff ff5a 	bl	80140d0 <RTC_ByteToBcd2>
 801421c:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801421e:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8014220:	78b0      	ldrb	r0, [r6, #2]
 8014222:	f7ff ff55 	bl	80140d0 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8014226:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 8014228:	7830      	ldrb	r0, [r6, #0]
 801422a:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801422c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801422e:	6823      	ldr	r3, [r4, #0]
 8014230:	22ca      	movs	r2, #202	; 0xca
 8014232:	625a      	str	r2, [r3, #36]	; 0x24
 8014234:	6823      	ldr	r3, [r4, #0]
 8014236:	3a77      	subs	r2, #119	; 0x77
 8014238:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801423a:	0020      	movs	r0, r4
 801423c:	f7ff feda 	bl	8013ff4 <RTC_EnterInitMode>
 8014240:	1e06      	subs	r6, r0, #0
 8014242:	d11f      	bne.n	8014284 <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8014244:	6823      	ldr	r3, [r4, #0]
 8014246:	481c      	ldr	r0, [pc, #112]	; (80142b8 <HAL_RTC_SetDate+0xd4>)
 8014248:	4005      	ands	r5, r0
 801424a:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801424c:	6822      	ldr	r2, [r4, #0]
 801424e:	68d3      	ldr	r3, [r2, #12]
 8014250:	2180      	movs	r1, #128	; 0x80
 8014252:	438b      	bics	r3, r1
 8014254:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8014256:	6823      	ldr	r3, [r4, #0]
 8014258:	689b      	ldr	r3, [r3, #8]
 801425a:	069b      	lsls	r3, r3, #26
 801425c:	d51c      	bpl.n	8014298 <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801425e:	6823      	ldr	r3, [r4, #0]
 8014260:	22ff      	movs	r2, #255	; 0xff
 8014262:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8014264:	2301      	movs	r3, #1
 8014266:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8014268:	2300      	movs	r3, #0
 801426a:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 801426c:	e012      	b.n	8014294 <HAL_RTC_SetDate+0xb0>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 801426e:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8014270:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8014272:	78f5      	ldrb	r5, [r6, #3]
 8014274:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8014276:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8014278:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8) | \
 801427a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 801427c:	7830      	ldrb	r0, [r6, #0]
 801427e:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8014280:	4305      	orrs	r5, r0
 8014282:	e7d4      	b.n	801422e <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8014284:	6823      	ldr	r3, [r4, #0]
 8014286:	22ff      	movs	r2, #255	; 0xff
 8014288:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801428a:	2304      	movs	r3, #4
 801428c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 801428e:	2300      	movs	r3, #0
 8014290:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8014292:	2601      	movs	r6, #1
}
 8014294:	0030      	movs	r0, r6
 8014296:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014298:	0020      	movs	r0, r4
 801429a:	f7ff fe92 	bl	8013fc2 <HAL_RTC_WaitForSynchro>
 801429e:	2800      	cmp	r0, #0
 80142a0:	d0dd      	beq.n	801425e <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80142a2:	6823      	ldr	r3, [r4, #0]
 80142a4:	22ff      	movs	r2, #255	; 0xff
 80142a6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80142a8:	2304      	movs	r3, #4
 80142aa:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80142ac:	2300      	movs	r3, #0
 80142ae:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80142b0:	2601      	movs	r6, #1
 80142b2:	e7ef      	b.n	8014294 <HAL_RTC_SetDate+0xb0>
 __HAL_LOCK(hrtc);
 80142b4:	2602      	movs	r6, #2
 80142b6:	e7ed      	b.n	8014294 <HAL_RTC_SetDate+0xb0>
 80142b8:	00ffff3f 	.word	0x00ffff3f

080142bc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80142bc:	0902      	lsrs	r2, r0, #4
 80142be:	0093      	lsls	r3, r2, #2
 80142c0:	189b      	adds	r3, r3, r2
 80142c2:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80142c4:	230f      	movs	r3, #15
 80142c6:	4018      	ands	r0, r3
 80142c8:	1880      	adds	r0, r0, r2
 80142ca:	b2c0      	uxtb	r0, r0
}
 80142cc:	4770      	bx	lr
	...

080142d0 <HAL_RTC_GetTime>:
{
 80142d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142d2:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80142d4:	6803      	ldr	r3, [r0, #0]
 80142d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142d8:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80142da:	6803      	ldr	r3, [r0, #0]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	490f      	ldr	r1, [pc, #60]	; (801431c <HAL_RTC_GetTime+0x4c>)
 80142e0:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80142e2:	0c1d      	lsrs	r5, r3, #16
 80142e4:	203f      	movs	r0, #63	; 0x3f
 80142e6:	4028      	ands	r0, r5
 80142e8:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80142ea:	0a1e      	lsrs	r6, r3, #8
 80142ec:	277f      	movs	r7, #127	; 0x7f
 80142ee:	403e      	ands	r6, r7
 80142f0:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80142f2:	401f      	ands	r7, r3
 80142f4:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80142f6:	2140      	movs	r1, #64	; 0x40
 80142f8:	4029      	ands	r1, r5
 80142fa:	7221      	strb	r1, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 80142fc:	2a00      	cmp	r2, #0
 80142fe:	d10a      	bne.n	8014316 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8014300:	f7ff ffdc 	bl	80142bc <RTC_Bcd2ToByte>
 8014304:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8014306:	0030      	movs	r0, r6
 8014308:	f7ff ffd8 	bl	80142bc <RTC_Bcd2ToByte>
 801430c:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 801430e:	0038      	movs	r0, r7
 8014310:	f7ff ffd4 	bl	80142bc <RTC_Bcd2ToByte>
 8014314:	70a0      	strb	r0, [r4, #2]
}
 8014316:	2000      	movs	r0, #0
 8014318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801431a:	46c0      	nop			; (mov r8, r8)
 801431c:	007f7f7f 	.word	0x007f7f7f

08014320 <HAL_RTC_GetDate>:
{
 8014320:	b570      	push	{r4, r5, r6, lr}
 8014322:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8014324:	6803      	ldr	r3, [r0, #0]
 8014326:	685b      	ldr	r3, [r3, #4]
 8014328:	490e      	ldr	r1, [pc, #56]	; (8014364 <HAL_RTC_GetDate+0x44>)
 801432a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 801432c:	0c18      	lsrs	r0, r3, #16
 801432e:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8014330:	0a19      	lsrs	r1, r3, #8
 8014332:	261f      	movs	r6, #31
 8014334:	400e      	ands	r6, r1
 8014336:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8014338:	253f      	movs	r5, #63	; 0x3f
 801433a:	401d      	ands	r5, r3
 801433c:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801433e:	0b5b      	lsrs	r3, r3, #13
 8014340:	2107      	movs	r1, #7
 8014342:	400b      	ands	r3, r1
 8014344:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8014346:	2a00      	cmp	r2, #0
 8014348:	d10a      	bne.n	8014360 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801434a:	f7ff ffb7 	bl	80142bc <RTC_Bcd2ToByte>
 801434e:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8014350:	0030      	movs	r0, r6
 8014352:	f7ff ffb3 	bl	80142bc <RTC_Bcd2ToByte>
 8014356:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8014358:	0028      	movs	r0, r5
 801435a:	f7ff ffaf 	bl	80142bc <RTC_Bcd2ToByte>
 801435e:	70a0      	strb	r0, [r4, #2]
}
 8014360:	2000      	movs	r0, #0
 8014362:	bd70      	pop	{r4, r5, r6, pc}
 8014364:	00ffff3f 	.word	0x00ffff3f

08014368 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8014368:	6803      	ldr	r3, [r0, #0]
 801436a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801436c:	0089      	lsls	r1, r1, #2
 801436e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8014370:	600a      	str	r2, [r1, #0]
}
 8014372:	4770      	bx	lr

08014374 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8014374:	6803      	ldr	r3, [r0, #0]
 8014376:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8014378:	0089      	lsls	r1, r1, #2
 801437a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801437c:	6808      	ldr	r0, [r1, #0]
}
 801437e:	4770      	bx	lr

08014380 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8014380:	4770      	bx	lr

08014382 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8014382:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8014384:	2239      	movs	r2, #57	; 0x39
 8014386:	2302      	movs	r3, #2
 8014388:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801438a:	6804      	ldr	r4, [r0, #0]
 801438c:	6823      	ldr	r3, [r4, #0]
 801438e:	2101      	movs	r1, #1
 8014390:	430b      	orrs	r3, r1
 8014392:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8014394:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8014396:	2000      	movs	r0, #0
 8014398:	bd10      	pop	{r4, pc}
	...

0801439c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 801439c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801439e:	4a1f      	ldr	r2, [pc, #124]	; (801441c <TIM_Base_SetConfig+0x80>)
 80143a0:	4290      	cmp	r0, r2
 80143a2:	d006      	beq.n	80143b2 <TIM_Base_SetConfig+0x16>
 80143a4:	2280      	movs	r2, #128	; 0x80
 80143a6:	05d2      	lsls	r2, r2, #23
 80143a8:	4290      	cmp	r0, r2
 80143aa:	d002      	beq.n	80143b2 <TIM_Base_SetConfig+0x16>
 80143ac:	4a1c      	ldr	r2, [pc, #112]	; (8014420 <TIM_Base_SetConfig+0x84>)
 80143ae:	4290      	cmp	r0, r2
 80143b0:	d103      	bne.n	80143ba <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80143b2:	2270      	movs	r2, #112	; 0x70
 80143b4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80143b6:	684a      	ldr	r2, [r1, #4]
 80143b8:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80143ba:	4a18      	ldr	r2, [pc, #96]	; (801441c <TIM_Base_SetConfig+0x80>)
 80143bc:	4290      	cmp	r0, r2
 80143be:	d012      	beq.n	80143e6 <TIM_Base_SetConfig+0x4a>
 80143c0:	2280      	movs	r2, #128	; 0x80
 80143c2:	05d2      	lsls	r2, r2, #23
 80143c4:	4290      	cmp	r0, r2
 80143c6:	d00e      	beq.n	80143e6 <TIM_Base_SetConfig+0x4a>
 80143c8:	4a15      	ldr	r2, [pc, #84]	; (8014420 <TIM_Base_SetConfig+0x84>)
 80143ca:	4290      	cmp	r0, r2
 80143cc:	d00b      	beq.n	80143e6 <TIM_Base_SetConfig+0x4a>
 80143ce:	4a15      	ldr	r2, [pc, #84]	; (8014424 <TIM_Base_SetConfig+0x88>)
 80143d0:	4290      	cmp	r0, r2
 80143d2:	d008      	beq.n	80143e6 <TIM_Base_SetConfig+0x4a>
 80143d4:	4a14      	ldr	r2, [pc, #80]	; (8014428 <TIM_Base_SetConfig+0x8c>)
 80143d6:	4290      	cmp	r0, r2
 80143d8:	d005      	beq.n	80143e6 <TIM_Base_SetConfig+0x4a>
 80143da:	4a14      	ldr	r2, [pc, #80]	; (801442c <TIM_Base_SetConfig+0x90>)
 80143dc:	4290      	cmp	r0, r2
 80143de:	d002      	beq.n	80143e6 <TIM_Base_SetConfig+0x4a>
 80143e0:	4a13      	ldr	r2, [pc, #76]	; (8014430 <TIM_Base_SetConfig+0x94>)
 80143e2:	4290      	cmp	r0, r2
 80143e4:	d103      	bne.n	80143ee <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80143e6:	4a13      	ldr	r2, [pc, #76]	; (8014434 <TIM_Base_SetConfig+0x98>)
 80143e8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80143ea:	68ca      	ldr	r2, [r1, #12]
 80143ec:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80143ee:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80143f0:	688b      	ldr	r3, [r1, #8]
 80143f2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80143f4:	680b      	ldr	r3, [r1, #0]
 80143f6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80143f8:	4b08      	ldr	r3, [pc, #32]	; (801441c <TIM_Base_SetConfig+0x80>)
 80143fa:	4298      	cmp	r0, r3
 80143fc:	d008      	beq.n	8014410 <TIM_Base_SetConfig+0x74>
 80143fe:	4b0a      	ldr	r3, [pc, #40]	; (8014428 <TIM_Base_SetConfig+0x8c>)
 8014400:	4298      	cmp	r0, r3
 8014402:	d005      	beq.n	8014410 <TIM_Base_SetConfig+0x74>
 8014404:	4b09      	ldr	r3, [pc, #36]	; (801442c <TIM_Base_SetConfig+0x90>)
 8014406:	4298      	cmp	r0, r3
 8014408:	d002      	beq.n	8014410 <TIM_Base_SetConfig+0x74>
 801440a:	4b09      	ldr	r3, [pc, #36]	; (8014430 <TIM_Base_SetConfig+0x94>)
 801440c:	4298      	cmp	r0, r3
 801440e:	d101      	bne.n	8014414 <TIM_Base_SetConfig+0x78>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014410:	690b      	ldr	r3, [r1, #16]
 8014412:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8014414:	2301      	movs	r3, #1
 8014416:	6143      	str	r3, [r0, #20]
}
 8014418:	4770      	bx	lr
 801441a:	46c0      	nop			; (mov r8, r8)
 801441c:	40012c00 	.word	0x40012c00
 8014420:	40000400 	.word	0x40000400
 8014424:	40002000 	.word	0x40002000
 8014428:	40014000 	.word	0x40014000
 801442c:	40014400 	.word	0x40014400
 8014430:	40014800 	.word	0x40014800
 8014434:	fffffcff 	.word	0xfffffcff

08014438 <HAL_TIM_Base_Init>:
{
 8014438:	b570      	push	{r4, r5, r6, lr}
 801443a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 801443c:	d014      	beq.n	8014468 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801443e:	2339      	movs	r3, #57	; 0x39
 8014440:	5cc3      	ldrb	r3, [r0, r3]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d00a      	beq.n	801445c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8014446:	2539      	movs	r5, #57	; 0x39
 8014448:	2302      	movs	r3, #2
 801444a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801444c:	1d21      	adds	r1, r4, #4
 801444e:	6820      	ldr	r0, [r4, #0]
 8014450:	f7ff ffa4 	bl	801439c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8014454:	2301      	movs	r3, #1
 8014456:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8014458:	2000      	movs	r0, #0
}
 801445a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 801445c:	3338      	adds	r3, #56	; 0x38
 801445e:	2200      	movs	r2, #0
 8014460:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8014462:	f7ff ff8d 	bl	8014380 <HAL_TIM_Base_MspInit>
 8014466:	e7ee      	b.n	8014446 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8014468:	2001      	movs	r0, #1
 801446a:	e7f6      	b.n	801445a <HAL_TIM_Base_Init+0x22>

0801446c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 801446c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801446e:	2338      	movs	r3, #56	; 0x38
 8014470:	5cc3      	ldrb	r3, [r0, r3]
 8014472:	2b01      	cmp	r3, #1
 8014474:	d01e      	beq.n	80144b4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8014476:	2238      	movs	r2, #56	; 0x38
 8014478:	2501      	movs	r5, #1
 801447a:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 801447c:	2439      	movs	r4, #57	; 0x39
 801447e:	2302      	movs	r3, #2
 8014480:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8014482:	6806      	ldr	r6, [r0, #0]
 8014484:	6873      	ldr	r3, [r6, #4]
 8014486:	2770      	movs	r7, #112	; 0x70
 8014488:	43bb      	bics	r3, r7
 801448a:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 801448c:	6806      	ldr	r6, [r0, #0]
 801448e:	6873      	ldr	r3, [r6, #4]
 8014490:	680f      	ldr	r7, [r1, #0]
 8014492:	433b      	orrs	r3, r7
 8014494:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8014496:	6806      	ldr	r6, [r0, #0]
 8014498:	68b3      	ldr	r3, [r6, #8]
 801449a:	2780      	movs	r7, #128	; 0x80
 801449c:	43bb      	bics	r3, r7
 801449e:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80144a0:	6806      	ldr	r6, [r0, #0]
 80144a2:	68b3      	ldr	r3, [r6, #8]
 80144a4:	6849      	ldr	r1, [r1, #4]
 80144a6:	430b      	orrs	r3, r1
 80144a8:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80144aa:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80144ac:	2300      	movs	r3, #0
 80144ae:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80144b0:	2000      	movs	r0, #0
}
 80144b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80144b4:	2002      	movs	r0, #2
 80144b6:	e7fc      	b.n	80144b2 <HAL_TIMEx_MasterConfigSynchronization+0x46>

080144b8 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80144b8:	4770      	bx	lr

080144ba <HAL_UART_DeInit>:
{
 80144ba:	b570      	push	{r4, r5, r6, lr}
 80144bc:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80144be:	d016      	beq.n	80144ee <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 80144c0:	2669      	movs	r6, #105	; 0x69
 80144c2:	2302      	movs	r3, #2
 80144c4:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 80144c6:	6802      	ldr	r2, [r0, #0]
 80144c8:	6813      	ldr	r3, [r2, #0]
 80144ca:	2101      	movs	r1, #1
 80144cc:	438b      	bics	r3, r1
 80144ce:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 80144d0:	6803      	ldr	r3, [r0, #0]
 80144d2:	2500      	movs	r5, #0
 80144d4:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80144d6:	6803      	ldr	r3, [r0, #0]
 80144d8:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80144da:	6803      	ldr	r3, [r0, #0]
 80144dc:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80144de:	f7ff ffeb 	bl	80144b8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144e2:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 80144e4:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 80144e6:	2368      	movs	r3, #104	; 0x68
 80144e8:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 80144ea:	2000      	movs	r0, #0
}
 80144ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80144ee:	2001      	movs	r0, #1
 80144f0:	e7fc      	b.n	80144ec <HAL_UART_DeInit+0x32>

080144f2 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80144f2:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80144f4:	2369      	movs	r3, #105	; 0x69
 80144f6:	5cc3      	ldrb	r3, [r0, r3]
 80144f8:	2b01      	cmp	r3, #1
 80144fa:	d003      	beq.n	8014504 <HAL_UART_Transmit_IT+0x12>
 80144fc:	2369      	movs	r3, #105	; 0x69
 80144fe:	5cc3      	ldrb	r3, [r0, r3]
 8014500:	2b22      	cmp	r3, #34	; 0x22
 8014502:	d12b      	bne.n	801455c <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8014504:	2900      	cmp	r1, #0
 8014506:	d02b      	beq.n	8014560 <HAL_UART_Transmit_IT+0x6e>
 8014508:	2a00      	cmp	r2, #0
 801450a:	d02b      	beq.n	8014564 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801450c:	2368      	movs	r3, #104	; 0x68
 801450e:	5cc3      	ldrb	r3, [r0, r3]
 8014510:	2b01      	cmp	r3, #1
 8014512:	d029      	beq.n	8014568 <HAL_UART_Transmit_IT+0x76>
 8014514:	2368      	movs	r3, #104	; 0x68
 8014516:	2401      	movs	r4, #1
 8014518:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 801451a:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 801451c:	3b18      	subs	r3, #24
 801451e:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8014520:	3302      	adds	r3, #2
 8014522:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014524:	2300      	movs	r3, #0
 8014526:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8014528:	3369      	adds	r3, #105	; 0x69
 801452a:	5cc3      	ldrb	r3, [r0, r3]
 801452c:	2b22      	cmp	r3, #34	; 0x22
 801452e:	d011      	beq.n	8014554 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8014530:	2369      	movs	r3, #105	; 0x69
 8014532:	2212      	movs	r2, #18
 8014534:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8014536:	6802      	ldr	r2, [r0, #0]
 8014538:	6893      	ldr	r3, [r2, #8]
 801453a:	2101      	movs	r1, #1
 801453c:	430b      	orrs	r3, r1
 801453e:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014540:	2368      	movs	r3, #104	; 0x68
 8014542:	2200      	movs	r2, #0
 8014544:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8014546:	6802      	ldr	r2, [r0, #0]
 8014548:	6813      	ldr	r3, [r2, #0]
 801454a:	317f      	adds	r1, #127	; 0x7f
 801454c:	430b      	orrs	r3, r1
 801454e:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8014550:	2000      	movs	r0, #0
 8014552:	e004      	b.n	801455e <HAL_UART_Transmit_IT+0x6c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8014554:	3347      	adds	r3, #71	; 0x47
 8014556:	2232      	movs	r2, #50	; 0x32
 8014558:	54c2      	strb	r2, [r0, r3]
 801455a:	e7ec      	b.n	8014536 <HAL_UART_Transmit_IT+0x44>
  }
  else
  {
    return HAL_BUSY;
 801455c:	2002      	movs	r0, #2
  }
}
 801455e:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8014560:	2001      	movs	r0, #1
 8014562:	e7fc      	b.n	801455e <HAL_UART_Transmit_IT+0x6c>
 8014564:	2001      	movs	r0, #1
 8014566:	e7fa      	b.n	801455e <HAL_UART_Transmit_IT+0x6c>
    __HAL_LOCK(huart);
 8014568:	2002      	movs	r0, #2
 801456a:	e7f8      	b.n	801455e <HAL_UART_Transmit_IT+0x6c>

0801456c <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801456c:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801456e:	2369      	movs	r3, #105	; 0x69
 8014570:	5cc3      	ldrb	r3, [r0, r3]
 8014572:	2b01      	cmp	r3, #1
 8014574:	d003      	beq.n	801457e <HAL_UART_Receive_IT+0x12>
 8014576:	2369      	movs	r3, #105	; 0x69
 8014578:	5cc3      	ldrb	r3, [r0, r3]
 801457a:	2b12      	cmp	r3, #18
 801457c:	d15d      	bne.n	801463a <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 801457e:	2900      	cmp	r1, #0
 8014580:	d05d      	beq.n	801463e <HAL_UART_Receive_IT+0xd2>
 8014582:	2a00      	cmp	r2, #0
 8014584:	d05d      	beq.n	8014642 <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014586:	2368      	movs	r3, #104	; 0x68
 8014588:	5cc3      	ldrb	r3, [r0, r3]
 801458a:	2b01      	cmp	r3, #1
 801458c:	d05b      	beq.n	8014646 <HAL_UART_Receive_IT+0xda>
 801458e:	2368      	movs	r3, #104	; 0x68
 8014590:	2401      	movs	r4, #1
 8014592:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 8014594:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8014596:	3b10      	subs	r3, #16
 8014598:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 801459a:	3302      	adds	r3, #2
 801459c:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801459e:	6883      	ldr	r3, [r0, #8]
 80145a0:	2280      	movs	r2, #128	; 0x80
 80145a2:	0152      	lsls	r2, r2, #5
 80145a4:	4293      	cmp	r3, r2
 80145a6:	d008      	beq.n	80145ba <HAL_UART_Receive_IT+0x4e>
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d115      	bne.n	80145d8 <HAL_UART_Receive_IT+0x6c>
 80145ac:	6903      	ldr	r3, [r0, #16]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d10e      	bne.n	80145d0 <HAL_UART_Receive_IT+0x64>
 80145b2:	335c      	adds	r3, #92	; 0x5c
 80145b4:	22ff      	movs	r2, #255	; 0xff
 80145b6:	52c2      	strh	r2, [r0, r3]
 80145b8:	e012      	b.n	80145e0 <HAL_UART_Receive_IT+0x74>
 80145ba:	6903      	ldr	r3, [r0, #16]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d103      	bne.n	80145c8 <HAL_UART_Receive_IT+0x5c>
 80145c0:	335c      	adds	r3, #92	; 0x5c
 80145c2:	4a22      	ldr	r2, [pc, #136]	; (801464c <HAL_UART_Receive_IT+0xe0>)
 80145c4:	52c2      	strh	r2, [r0, r3]
 80145c6:	e00b      	b.n	80145e0 <HAL_UART_Receive_IT+0x74>
 80145c8:	235c      	movs	r3, #92	; 0x5c
 80145ca:	22ff      	movs	r2, #255	; 0xff
 80145cc:	52c2      	strh	r2, [r0, r3]
 80145ce:	e007      	b.n	80145e0 <HAL_UART_Receive_IT+0x74>
 80145d0:	235c      	movs	r3, #92	; 0x5c
 80145d2:	227f      	movs	r2, #127	; 0x7f
 80145d4:	52c2      	strh	r2, [r0, r3]
 80145d6:	e003      	b.n	80145e0 <HAL_UART_Receive_IT+0x74>
 80145d8:	2280      	movs	r2, #128	; 0x80
 80145da:	0552      	lsls	r2, r2, #21
 80145dc:	4293      	cmp	r3, r2
 80145de:	d01d      	beq.n	801461c <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80145e0:	2300      	movs	r3, #0
 80145e2:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80145e4:	3369      	adds	r3, #105	; 0x69
 80145e6:	5cc3      	ldrb	r3, [r0, r3]
 80145e8:	2b12      	cmp	r3, #18
 80145ea:	d022      	beq.n	8014632 <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80145ec:	2369      	movs	r3, #105	; 0x69
 80145ee:	2222      	movs	r2, #34	; 0x22
 80145f0:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80145f2:	6802      	ldr	r2, [r0, #0]
 80145f4:	6811      	ldr	r1, [r2, #0]
 80145f6:	2380      	movs	r3, #128	; 0x80
 80145f8:	005b      	lsls	r3, r3, #1
 80145fa:	430b      	orrs	r3, r1
 80145fc:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80145fe:	6802      	ldr	r2, [r0, #0]
 8014600:	6893      	ldr	r3, [r2, #8]
 8014602:	2101      	movs	r1, #1
 8014604:	430b      	orrs	r3, r1
 8014606:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014608:	2368      	movs	r3, #104	; 0x68
 801460a:	2200      	movs	r2, #0
 801460c:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801460e:	6802      	ldr	r2, [r0, #0]
 8014610:	6813      	ldr	r3, [r2, #0]
 8014612:	311f      	adds	r1, #31
 8014614:	430b      	orrs	r3, r1
 8014616:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8014618:	2000      	movs	r0, #0
 801461a:	e00f      	b.n	801463c <HAL_UART_Receive_IT+0xd0>
    UART_MASK_COMPUTATION(huart);
 801461c:	6903      	ldr	r3, [r0, #16]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d103      	bne.n	801462a <HAL_UART_Receive_IT+0xbe>
 8014622:	335c      	adds	r3, #92	; 0x5c
 8014624:	227f      	movs	r2, #127	; 0x7f
 8014626:	52c2      	strh	r2, [r0, r3]
 8014628:	e7da      	b.n	80145e0 <HAL_UART_Receive_IT+0x74>
 801462a:	235c      	movs	r3, #92	; 0x5c
 801462c:	223f      	movs	r2, #63	; 0x3f
 801462e:	52c2      	strh	r2, [r0, r3]
 8014630:	e7d6      	b.n	80145e0 <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8014632:	3357      	adds	r3, #87	; 0x57
 8014634:	2232      	movs	r2, #50	; 0x32
 8014636:	54c2      	strb	r2, [r0, r3]
 8014638:	e7db      	b.n	80145f2 <HAL_UART_Receive_IT+0x86>
  }
  else
  {
    return HAL_BUSY;
 801463a:	2002      	movs	r0, #2
  }
}
 801463c:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 801463e:	2001      	movs	r0, #1
 8014640:	e7fc      	b.n	801463c <HAL_UART_Receive_IT+0xd0>
 8014642:	2001      	movs	r0, #1
 8014644:	e7fa      	b.n	801463c <HAL_UART_Receive_IT+0xd0>
    __HAL_LOCK(huart);
 8014646:	2002      	movs	r0, #2
 8014648:	e7f8      	b.n	801463c <HAL_UART_Receive_IT+0xd0>
 801464a:	46c0      	nop			; (mov r8, r8)
 801464c:	000001ff 	.word	0x000001ff

08014650 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014650:	b510      	push	{r4, lr}
 8014652:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014654:	2369      	movs	r3, #105	; 0x69
 8014656:	5cc3      	ldrb	r3, [r0, r3]
 8014658:	2b01      	cmp	r3, #1
 801465a:	d003      	beq.n	8014664 <HAL_UART_Transmit_DMA+0x14>
 801465c:	2369      	movs	r3, #105	; 0x69
 801465e:	5cc3      	ldrb	r3, [r0, r3]
 8014660:	2b22      	cmp	r3, #34	; 0x22
 8014662:	d139      	bne.n	80146d8 <HAL_UART_Transmit_DMA+0x88>
  {
    if((pData == NULL ) || (Size == 0))
 8014664:	2900      	cmp	r1, #0
 8014666:	d039      	beq.n	80146dc <HAL_UART_Transmit_DMA+0x8c>
 8014668:	2a00      	cmp	r2, #0
 801466a:	d039      	beq.n	80146e0 <HAL_UART_Transmit_DMA+0x90>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801466c:	2368      	movs	r3, #104	; 0x68
 801466e:	5ce3      	ldrb	r3, [r4, r3]
 8014670:	2b01      	cmp	r3, #1
 8014672:	d037      	beq.n	80146e4 <HAL_UART_Transmit_DMA+0x94>
 8014674:	2368      	movs	r3, #104	; 0x68
 8014676:	2001      	movs	r0, #1
 8014678:	54e0      	strb	r0, [r4, r3]

    huart->pTxBuffPtr = pData;
 801467a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 801467c:	3b18      	subs	r3, #24
 801467e:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8014680:	3302      	adds	r3, #2
 8014682:	52e2      	strh	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014684:	2300      	movs	r3, #0
 8014686:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8014688:	3369      	adds	r3, #105	; 0x69
 801468a:	5ce3      	ldrb	r3, [r4, r3]
 801468c:	2b22      	cmp	r3, #34	; 0x22
 801468e:	d01f      	beq.n	80146d0 <HAL_UART_Transmit_DMA+0x80>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8014690:	2369      	movs	r3, #105	; 0x69
 8014692:	2012      	movs	r0, #18
 8014694:	54e0      	strb	r0, [r4, r3]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8014696:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8014698:	4813      	ldr	r0, [pc, #76]	; (80146e8 <HAL_UART_Transmit_DMA+0x98>)
 801469a:	6298      	str	r0, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801469c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801469e:	4813      	ldr	r0, [pc, #76]	; (80146ec <HAL_UART_Transmit_DMA+0x9c>)
 80146a0:	62d8      	str	r0, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80146a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80146a4:	4812      	ldr	r0, [pc, #72]	; (80146f0 <HAL_UART_Transmit_DMA+0xa0>)
 80146a6:	6318      	str	r0, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80146a8:	6820      	ldr	r0, [r4, #0]
 80146aa:	3028      	adds	r0, #40	; 0x28
 80146ac:	0013      	movs	r3, r2
 80146ae:	0002      	movs	r2, r0
 80146b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80146b2:	f7fe f89f 	bl	80127f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80146b6:	6823      	ldr	r3, [r4, #0]
 80146b8:	2240      	movs	r2, #64	; 0x40
 80146ba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 80146bc:	6822      	ldr	r2, [r4, #0]
 80146be:	6893      	ldr	r3, [r2, #8]
 80146c0:	2180      	movs	r1, #128	; 0x80
 80146c2:	430b      	orrs	r3, r1
 80146c4:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80146c6:	2368      	movs	r3, #104	; 0x68
 80146c8:	2200      	movs	r2, #0
 80146ca:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 80146cc:	2000      	movs	r0, #0
 80146ce:	e004      	b.n	80146da <HAL_UART_Transmit_DMA+0x8a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80146d0:	3347      	adds	r3, #71	; 0x47
 80146d2:	3031      	adds	r0, #49	; 0x31
 80146d4:	54e0      	strb	r0, [r4, r3]
 80146d6:	e7de      	b.n	8014696 <HAL_UART_Transmit_DMA+0x46>
  }
  else
  {
    return HAL_BUSY;
 80146d8:	2002      	movs	r0, #2
  }
}
 80146da:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80146dc:	2001      	movs	r0, #1
 80146de:	e7fc      	b.n	80146da <HAL_UART_Transmit_DMA+0x8a>
 80146e0:	2001      	movs	r0, #1
 80146e2:	e7fa      	b.n	80146da <HAL_UART_Transmit_DMA+0x8a>
    __HAL_LOCK(huart);
 80146e4:	2002      	movs	r0, #2
 80146e6:	e7f8      	b.n	80146da <HAL_UART_Transmit_DMA+0x8a>
 80146e8:	08014791 	.word	0x08014791
 80146ec:	080147c3 	.word	0x080147c3
 80146f0:	08014813 	.word	0x08014813

080146f4 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80146f4:	b510      	push	{r4, lr}
 80146f6:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80146f8:	2069      	movs	r0, #105	; 0x69
 80146fa:	5c20      	ldrb	r0, [r4, r0]
 80146fc:	2801      	cmp	r0, #1
 80146fe:	d003      	beq.n	8014708 <HAL_UART_Receive_DMA+0x14>
 8014700:	2369      	movs	r3, #105	; 0x69
 8014702:	5ce3      	ldrb	r3, [r4, r3]
 8014704:	2b12      	cmp	r3, #18
 8014706:	d135      	bne.n	8014774 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8014708:	2900      	cmp	r1, #0
 801470a:	d035      	beq.n	8014778 <HAL_UART_Receive_DMA+0x84>
 801470c:	2a00      	cmp	r2, #0
 801470e:	d035      	beq.n	801477c <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014710:	2368      	movs	r3, #104	; 0x68
 8014712:	5ce3      	ldrb	r3, [r4, r3]
 8014714:	2b01      	cmp	r3, #1
 8014716:	d033      	beq.n	8014780 <HAL_UART_Receive_DMA+0x8c>
 8014718:	2368      	movs	r3, #104	; 0x68
 801471a:	2001      	movs	r0, #1
 801471c:	54e0      	strb	r0, [r4, r3]

    huart->pRxBuffPtr = pData;
 801471e:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8014720:	3b10      	subs	r3, #16
 8014722:	52e2      	strh	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014724:	2300      	movs	r3, #0
 8014726:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8014728:	3369      	adds	r3, #105	; 0x69
 801472a:	5ce3      	ldrb	r3, [r4, r3]
 801472c:	2b12      	cmp	r3, #18
 801472e:	d01d      	beq.n	801476c <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8014730:	2369      	movs	r3, #105	; 0x69
 8014732:	2022      	movs	r0, #34	; 0x22
 8014734:	54e0      	strb	r0, [r4, r3]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014738:	4812      	ldr	r0, [pc, #72]	; (8014784 <HAL_UART_Receive_DMA+0x90>)
 801473a:	6298      	str	r0, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801473c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801473e:	4812      	ldr	r0, [pc, #72]	; (8014788 <HAL_UART_Receive_DMA+0x94>)
 8014740:	62d8      	str	r0, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014744:	4811      	ldr	r0, [pc, #68]	; (801478c <HAL_UART_Receive_DMA+0x98>)
 8014746:	6318      	str	r0, [r3, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8014748:	6820      	ldr	r0, [r4, #0]
 801474a:	3024      	adds	r0, #36	; 0x24
 801474c:	0013      	movs	r3, r2
 801474e:	000a      	movs	r2, r1
 8014750:	0001      	movs	r1, r0
 8014752:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8014754:	f7fe f84e 	bl	80127f4 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8014758:	6822      	ldr	r2, [r4, #0]
 801475a:	6893      	ldr	r3, [r2, #8]
 801475c:	2140      	movs	r1, #64	; 0x40
 801475e:	430b      	orrs	r3, r1
 8014760:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 8014762:	2368      	movs	r3, #104	; 0x68
 8014764:	2200      	movs	r2, #0
 8014766:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8014768:	2000      	movs	r0, #0
 801476a:	e004      	b.n	8014776 <HAL_UART_Receive_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801476c:	3357      	adds	r3, #87	; 0x57
 801476e:	3031      	adds	r0, #49	; 0x31
 8014770:	54e0      	strb	r0, [r4, r3]
 8014772:	e7e0      	b.n	8014736 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8014774:	2002      	movs	r0, #2
  }
}
 8014776:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8014778:	2001      	movs	r0, #1
 801477a:	e7fc      	b.n	8014776 <HAL_UART_Receive_DMA+0x82>
 801477c:	2001      	movs	r0, #1
 801477e:	e7fa      	b.n	8014776 <HAL_UART_Receive_DMA+0x82>
    __HAL_LOCK(huart);
 8014780:	2002      	movs	r0, #2
 8014782:	e7f8      	b.n	8014776 <HAL_UART_Receive_DMA+0x82>
 8014784:	080147cd 	.word	0x080147cd
 8014788:	08014809 	.word	0x08014809
 801478c:	08014813 	.word	0x08014813

08014790 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014790:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8014792:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8014794:	6802      	ldr	r2, [r0, #0]
 8014796:	6812      	ldr	r2, [r2, #0]
 8014798:	0692      	lsls	r2, r2, #26
 801479a:	d40d      	bmi.n	80147b8 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 801479c:	2252      	movs	r2, #82	; 0x52
 801479e:	2100      	movs	r1, #0
 80147a0:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80147a2:	6819      	ldr	r1, [r3, #0]
 80147a4:	688a      	ldr	r2, [r1, #8]
 80147a6:	2080      	movs	r0, #128	; 0x80
 80147a8:	4382      	bics	r2, r0
 80147aa:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80147ac:	681a      	ldr	r2, [r3, #0]
 80147ae:	6813      	ldr	r3, [r2, #0]
 80147b0:	2140      	movs	r1, #64	; 0x40
 80147b2:	430b      	orrs	r3, r1
 80147b4:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80147b6:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80147b8:	0018      	movs	r0, r3
 80147ba:	f7fa fd77 	bl	800f2ac <HAL_UART_TxCpltCallback>
}
 80147be:	e7fa      	b.n	80147b6 <UART_DMATransmitCplt+0x26>

080147c0 <HAL_UART_TxHalfCpltCallback>:
}
 80147c0:	4770      	bx	lr

080147c2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80147c2:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80147c4:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_TxHalfCpltCallback(huart);
 80147c6:	f7ff fffb 	bl	80147c0 <HAL_UART_TxHalfCpltCallback>
}
 80147ca:	bd10      	pop	{r4, pc}

080147cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80147cc:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80147ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80147d0:	6802      	ldr	r2, [r0, #0]
 80147d2:	6812      	ldr	r2, [r2, #0]
 80147d4:	0692      	lsls	r2, r2, #26
 80147d6:	d40e      	bmi.n	80147f6 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 80147d8:	225a      	movs	r2, #90	; 0x5a
 80147da:	2100      	movs	r1, #0
 80147dc:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80147de:	6819      	ldr	r1, [r3, #0]
 80147e0:	688a      	ldr	r2, [r1, #8]
 80147e2:	2040      	movs	r0, #64	; 0x40
 80147e4:	4382      	bics	r2, r0
 80147e6:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80147e8:	2269      	movs	r2, #105	; 0x69
 80147ea:	5c9a      	ldrb	r2, [r3, r2]
 80147ec:	2a32      	cmp	r2, #50	; 0x32
 80147ee:	d006      	beq.n	80147fe <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80147f0:	2269      	movs	r2, #105	; 0x69
 80147f2:	2101      	movs	r1, #1
 80147f4:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 80147f6:	0018      	movs	r0, r3
 80147f8:	f7fa fd94 	bl	800f324 <HAL_UART_RxCpltCallback>
}
 80147fc:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 80147fe:	3237      	adds	r2, #55	; 0x37
 8014800:	2112      	movs	r1, #18
 8014802:	5499      	strb	r1, [r3, r2]
 8014804:	e7f7      	b.n	80147f6 <UART_DMAReceiveCplt+0x2a>

08014806 <HAL_UART_RxHalfCpltCallback>:
}
 8014806:	4770      	bx	lr

08014808 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014808:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 801480a:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_RxHalfCpltCallback(huart);
 801480c:	f7ff fffb 	bl	8014806 <HAL_UART_RxHalfCpltCallback>
}
 8014810:	bd10      	pop	{r4, pc}

08014812 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014812:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8014814:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8014816:	2300      	movs	r3, #0
 8014818:	225a      	movs	r2, #90	; 0x5a
 801481a:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801481c:	3a08      	subs	r2, #8
 801481e:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8014820:	3369      	adds	r3, #105	; 0x69
 8014822:	3a51      	subs	r2, #81	; 0x51
 8014824:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014826:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8014828:	320f      	adds	r2, #15
 801482a:	4313      	orrs	r3, r2
 801482c:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801482e:	f7fa fd55 	bl	800f2dc <HAL_UART_ErrorCallback>
}
 8014832:	bd10      	pop	{r4, pc}

08014834 <UART_SetConfig>:
{
 8014834:	b570      	push	{r4, r5, r6, lr}
 8014836:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014838:	6883      	ldr	r3, [r0, #8]
 801483a:	6902      	ldr	r2, [r0, #16]
 801483c:	4313      	orrs	r3, r2
 801483e:	6942      	ldr	r2, [r0, #20]
 8014840:	4313      	orrs	r3, r2
 8014842:	69c2      	ldr	r2, [r0, #28]
 8014844:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8014846:	6801      	ldr	r1, [r0, #0]
 8014848:	680a      	ldr	r2, [r1, #0]
 801484a:	487c      	ldr	r0, [pc, #496]	; (8014a3c <UART_SetConfig+0x208>)
 801484c:	4002      	ands	r2, r0
 801484e:	4313      	orrs	r3, r2
 8014850:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014852:	6822      	ldr	r2, [r4, #0]
 8014854:	6853      	ldr	r3, [r2, #4]
 8014856:	497a      	ldr	r1, [pc, #488]	; (8014a40 <UART_SetConfig+0x20c>)
 8014858:	400b      	ands	r3, r1
 801485a:	68e1      	ldr	r1, [r4, #12]
 801485c:	430b      	orrs	r3, r1
 801485e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8014860:	69a2      	ldr	r2, [r4, #24]
 8014862:	6a23      	ldr	r3, [r4, #32]
 8014864:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8014866:	6821      	ldr	r1, [r4, #0]
 8014868:	688b      	ldr	r3, [r1, #8]
 801486a:	4876      	ldr	r0, [pc, #472]	; (8014a44 <UART_SetConfig+0x210>)
 801486c:	4003      	ands	r3, r0
 801486e:	4313      	orrs	r3, r2
 8014870:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014872:	6825      	ldr	r5, [r4, #0]
 8014874:	4b74      	ldr	r3, [pc, #464]	; (8014a48 <UART_SetConfig+0x214>)
 8014876:	429d      	cmp	r5, r3
 8014878:	d016      	beq.n	80148a8 <UART_SetConfig+0x74>
 801487a:	4b74      	ldr	r3, [pc, #464]	; (8014a4c <UART_SetConfig+0x218>)
 801487c:	429d      	cmp	r5, r3
 801487e:	d027      	beq.n	80148d0 <UART_SetConfig+0x9c>
 8014880:	4b73      	ldr	r3, [pc, #460]	; (8014a50 <UART_SetConfig+0x21c>)
 8014882:	429d      	cmp	r5, r3
 8014884:	d042      	beq.n	801490c <UART_SetConfig+0xd8>
 8014886:	4b73      	ldr	r3, [pc, #460]	; (8014a54 <UART_SetConfig+0x220>)
 8014888:	429d      	cmp	r5, r3
 801488a:	d061      	beq.n	8014950 <UART_SetConfig+0x11c>
 801488c:	4b72      	ldr	r3, [pc, #456]	; (8014a58 <UART_SetConfig+0x224>)
 801488e:	429d      	cmp	r5, r3
 8014890:	d075      	beq.n	801497e <UART_SetConfig+0x14a>
 8014892:	4b72      	ldr	r3, [pc, #456]	; (8014a5c <UART_SetConfig+0x228>)
 8014894:	429d      	cmp	r5, r3
 8014896:	d074      	beq.n	8014982 <UART_SetConfig+0x14e>
 8014898:	4b71      	ldr	r3, [pc, #452]	; (8014a60 <UART_SetConfig+0x22c>)
 801489a:	429d      	cmp	r5, r3
 801489c:	d073      	beq.n	8014986 <UART_SetConfig+0x152>
 801489e:	4b71      	ldr	r3, [pc, #452]	; (8014a64 <UART_SetConfig+0x230>)
 80148a0:	429d      	cmp	r5, r3
 80148a2:	d051      	beq.n	8014948 <UART_SetConfig+0x114>
 80148a4:	2310      	movs	r3, #16
 80148a6:	e054      	b.n	8014952 <UART_SetConfig+0x11e>
 80148a8:	4b6f      	ldr	r3, [pc, #444]	; (8014a68 <UART_SetConfig+0x234>)
 80148aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80148ac:	2303      	movs	r3, #3
 80148ae:	4013      	ands	r3, r2
 80148b0:	2b01      	cmp	r3, #1
 80148b2:	d009      	beq.n	80148c8 <UART_SetConfig+0x94>
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d005      	beq.n	80148c4 <UART_SetConfig+0x90>
 80148b8:	2b02      	cmp	r3, #2
 80148ba:	d007      	beq.n	80148cc <UART_SetConfig+0x98>
 80148bc:	2b03      	cmp	r3, #3
 80148be:	d045      	beq.n	801494c <UART_SetConfig+0x118>
 80148c0:	2310      	movs	r3, #16
 80148c2:	e046      	b.n	8014952 <UART_SetConfig+0x11e>
 80148c4:	2300      	movs	r3, #0
 80148c6:	e044      	b.n	8014952 <UART_SetConfig+0x11e>
 80148c8:	2304      	movs	r3, #4
 80148ca:	e042      	b.n	8014952 <UART_SetConfig+0x11e>
 80148cc:	2308      	movs	r3, #8
 80148ce:	e040      	b.n	8014952 <UART_SetConfig+0x11e>
 80148d0:	4b65      	ldr	r3, [pc, #404]	; (8014a68 <UART_SetConfig+0x234>)
 80148d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148d4:	22c0      	movs	r2, #192	; 0xc0
 80148d6:	0292      	lsls	r2, r2, #10
 80148d8:	4013      	ands	r3, r2
 80148da:	2280      	movs	r2, #128	; 0x80
 80148dc:	0252      	lsls	r2, r2, #9
 80148de:	4293      	cmp	r3, r2
 80148e0:	d00e      	beq.n	8014900 <UART_SetConfig+0xcc>
 80148e2:	d909      	bls.n	80148f8 <UART_SetConfig+0xc4>
 80148e4:	2280      	movs	r2, #128	; 0x80
 80148e6:	0292      	lsls	r2, r2, #10
 80148e8:	4293      	cmp	r3, r2
 80148ea:	d00b      	beq.n	8014904 <UART_SetConfig+0xd0>
 80148ec:	22c0      	movs	r2, #192	; 0xc0
 80148ee:	0292      	lsls	r2, r2, #10
 80148f0:	4293      	cmp	r3, r2
 80148f2:	d109      	bne.n	8014908 <UART_SetConfig+0xd4>
 80148f4:	2302      	movs	r3, #2
 80148f6:	e02c      	b.n	8014952 <UART_SetConfig+0x11e>
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d105      	bne.n	8014908 <UART_SetConfig+0xd4>
 80148fc:	2300      	movs	r3, #0
 80148fe:	e028      	b.n	8014952 <UART_SetConfig+0x11e>
 8014900:	2304      	movs	r3, #4
 8014902:	e026      	b.n	8014952 <UART_SetConfig+0x11e>
 8014904:	2308      	movs	r3, #8
 8014906:	e024      	b.n	8014952 <UART_SetConfig+0x11e>
 8014908:	2310      	movs	r3, #16
 801490a:	e022      	b.n	8014952 <UART_SetConfig+0x11e>
 801490c:	4b56      	ldr	r3, [pc, #344]	; (8014a68 <UART_SetConfig+0x234>)
 801490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014910:	22c0      	movs	r2, #192	; 0xc0
 8014912:	0312      	lsls	r2, r2, #12
 8014914:	4013      	ands	r3, r2
 8014916:	2280      	movs	r2, #128	; 0x80
 8014918:	02d2      	lsls	r2, r2, #11
 801491a:	4293      	cmp	r3, r2
 801491c:	d00e      	beq.n	801493c <UART_SetConfig+0x108>
 801491e:	d909      	bls.n	8014934 <UART_SetConfig+0x100>
 8014920:	2280      	movs	r2, #128	; 0x80
 8014922:	0312      	lsls	r2, r2, #12
 8014924:	4293      	cmp	r3, r2
 8014926:	d00b      	beq.n	8014940 <UART_SetConfig+0x10c>
 8014928:	22c0      	movs	r2, #192	; 0xc0
 801492a:	0312      	lsls	r2, r2, #12
 801492c:	4293      	cmp	r3, r2
 801492e:	d109      	bne.n	8014944 <UART_SetConfig+0x110>
 8014930:	2302      	movs	r3, #2
 8014932:	e00e      	b.n	8014952 <UART_SetConfig+0x11e>
 8014934:	2b00      	cmp	r3, #0
 8014936:	d105      	bne.n	8014944 <UART_SetConfig+0x110>
 8014938:	2300      	movs	r3, #0
 801493a:	e00a      	b.n	8014952 <UART_SetConfig+0x11e>
 801493c:	2304      	movs	r3, #4
 801493e:	e008      	b.n	8014952 <UART_SetConfig+0x11e>
 8014940:	2308      	movs	r3, #8
 8014942:	e006      	b.n	8014952 <UART_SetConfig+0x11e>
 8014944:	2310      	movs	r3, #16
 8014946:	e004      	b.n	8014952 <UART_SetConfig+0x11e>
 8014948:	2300      	movs	r3, #0
 801494a:	e002      	b.n	8014952 <UART_SetConfig+0x11e>
 801494c:	2302      	movs	r3, #2
 801494e:	e000      	b.n	8014952 <UART_SetConfig+0x11e>
 8014950:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014952:	2280      	movs	r2, #128	; 0x80
 8014954:	0212      	lsls	r2, r2, #8
 8014956:	69e1      	ldr	r1, [r4, #28]
 8014958:	4291      	cmp	r1, r2
 801495a:	d016      	beq.n	801498a <UART_SetConfig+0x156>
    switch (clocksource)
 801495c:	2b02      	cmp	r3, #2
 801495e:	d057      	beq.n	8014a10 <UART_SetConfig+0x1dc>
 8014960:	d949      	bls.n	80149f6 <UART_SetConfig+0x1c2>
 8014962:	2b04      	cmp	r3, #4
 8014964:	d05d      	beq.n	8014a22 <UART_SetConfig+0x1ee>
 8014966:	2b08      	cmp	r3, #8
 8014968:	d166      	bne.n	8014a38 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 801496a:	6861      	ldr	r1, [r4, #4]
 801496c:	2080      	movs	r0, #128	; 0x80
 801496e:	0200      	lsls	r0, r0, #8
 8014970:	f7eb fbee 	bl	8000150 <__udivsi3>
 8014974:	0400      	lsls	r0, r0, #16
 8014976:	0c00      	lsrs	r0, r0, #16
 8014978:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801497a:	2000      	movs	r0, #0
        break;
 801497c:	e027      	b.n	80149ce <UART_SetConfig+0x19a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801497e:	2300      	movs	r3, #0
 8014980:	e7e7      	b.n	8014952 <UART_SetConfig+0x11e>
 8014982:	2300      	movs	r3, #0
 8014984:	e7e5      	b.n	8014952 <UART_SetConfig+0x11e>
 8014986:	2300      	movs	r3, #0
 8014988:	e7e3      	b.n	8014952 <UART_SetConfig+0x11e>
    switch (clocksource)
 801498a:	2b02      	cmp	r3, #2
 801498c:	d020      	beq.n	80149d0 <UART_SetConfig+0x19c>
 801498e:	d90b      	bls.n	80149a8 <UART_SetConfig+0x174>
 8014990:	2b04      	cmp	r3, #4
 8014992:	d024      	beq.n	80149de <UART_SetConfig+0x1aa>
 8014994:	2b08      	cmp	r3, #8
 8014996:	d12b      	bne.n	80149f0 <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8014998:	6861      	ldr	r1, [r4, #4]
 801499a:	2080      	movs	r0, #128	; 0x80
 801499c:	0240      	lsls	r0, r0, #9
 801499e:	f7eb fbd7 	bl	8000150 <__udivsi3>
 80149a2:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80149a4:	2000      	movs	r0, #0
        break;
 80149a6:	e009      	b.n	80149bc <UART_SetConfig+0x188>
    switch (clocksource)
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d121      	bne.n	80149f0 <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80149ac:	f7ff fa60 	bl	8013e70 <HAL_RCC_GetPCLK1Freq>
 80149b0:	0040      	lsls	r0, r0, #1
 80149b2:	6861      	ldr	r1, [r4, #4]
 80149b4:	f7eb fbcc 	bl	8000150 <__udivsi3>
 80149b8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80149ba:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80149bc:	220f      	movs	r2, #15
 80149be:	0019      	movs	r1, r3
 80149c0:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80149c2:	105b      	asrs	r3, r3, #1
 80149c4:	3a08      	subs	r2, #8
 80149c6:	4013      	ands	r3, r2
 80149c8:	430b      	orrs	r3, r1
    huart->Instance->BRR = brrtemp;
 80149ca:	6822      	ldr	r2, [r4, #0]
 80149cc:	60d3      	str	r3, [r2, #12]
}
 80149ce:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80149d0:	6861      	ldr	r1, [r4, #4]
 80149d2:	4826      	ldr	r0, [pc, #152]	; (8014a6c <UART_SetConfig+0x238>)
 80149d4:	f7eb fbbc 	bl	8000150 <__udivsi3>
 80149d8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80149da:	2000      	movs	r0, #0
        break;
 80149dc:	e7ee      	b.n	80149bc <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80149de:	f7ff f9e9 	bl	8013db4 <HAL_RCC_GetSysClockFreq>
 80149e2:	0040      	lsls	r0, r0, #1
 80149e4:	6861      	ldr	r1, [r4, #4]
 80149e6:	f7eb fbb3 	bl	8000150 <__udivsi3>
 80149ea:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80149ec:	2000      	movs	r0, #0
        break;
 80149ee:	e7e5      	b.n	80149bc <UART_SetConfig+0x188>
        ret = HAL_ERROR;
 80149f0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80149f2:	2300      	movs	r3, #0
 80149f4:	e7e2      	b.n	80149bc <UART_SetConfig+0x188>
    switch (clocksource)
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d11e      	bne.n	8014a38 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80149fa:	f7ff fa39 	bl	8013e70 <HAL_RCC_GetPCLK1Freq>
 80149fe:	6861      	ldr	r1, [r4, #4]
 8014a00:	f7eb fba6 	bl	8000150 <__udivsi3>
 8014a04:	6823      	ldr	r3, [r4, #0]
 8014a06:	0400      	lsls	r0, r0, #16
 8014a08:	0c00      	lsrs	r0, r0, #16
 8014a0a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8014a0c:	2000      	movs	r0, #0
        break;
 8014a0e:	e7de      	b.n	80149ce <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8014a10:	6861      	ldr	r1, [r4, #4]
 8014a12:	4817      	ldr	r0, [pc, #92]	; (8014a70 <UART_SetConfig+0x23c>)
 8014a14:	f7eb fb9c 	bl	8000150 <__udivsi3>
 8014a18:	0400      	lsls	r0, r0, #16
 8014a1a:	0c00      	lsrs	r0, r0, #16
 8014a1c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8014a1e:	2000      	movs	r0, #0
        break;
 8014a20:	e7d5      	b.n	80149ce <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8014a22:	f7ff f9c7 	bl	8013db4 <HAL_RCC_GetSysClockFreq>
 8014a26:	6861      	ldr	r1, [r4, #4]
 8014a28:	f7eb fb92 	bl	8000150 <__udivsi3>
 8014a2c:	6823      	ldr	r3, [r4, #0]
 8014a2e:	0400      	lsls	r0, r0, #16
 8014a30:	0c00      	lsrs	r0, r0, #16
 8014a32:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8014a34:	2000      	movs	r0, #0
        break;
 8014a36:	e7ca      	b.n	80149ce <UART_SetConfig+0x19a>
        ret = HAL_ERROR;
 8014a38:	2001      	movs	r0, #1
 8014a3a:	e7c8      	b.n	80149ce <UART_SetConfig+0x19a>
 8014a3c:	efff69f3 	.word	0xefff69f3
 8014a40:	ffffcfff 	.word	0xffffcfff
 8014a44:	fffff4ff 	.word	0xfffff4ff
 8014a48:	40013800 	.word	0x40013800
 8014a4c:	40004400 	.word	0x40004400
 8014a50:	40004800 	.word	0x40004800
 8014a54:	40004c00 	.word	0x40004c00
 8014a58:	40005000 	.word	0x40005000
 8014a5c:	40011400 	.word	0x40011400
 8014a60:	40011800 	.word	0x40011800
 8014a64:	40011c00 	.word	0x40011c00
 8014a68:	40021000 	.word	0x40021000
 8014a6c:	00f42400 	.word	0x00f42400
 8014a70:	007a1200 	.word	0x007a1200

08014a74 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014a74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014a76:	07db      	lsls	r3, r3, #31
 8014a78:	d506      	bpl.n	8014a88 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014a7a:	6802      	ldr	r2, [r0, #0]
 8014a7c:	6853      	ldr	r3, [r2, #4]
 8014a7e:	492c      	ldr	r1, [pc, #176]	; (8014b30 <UART_AdvFeatureConfig+0xbc>)
 8014a80:	400b      	ands	r3, r1
 8014a82:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014a84:	430b      	orrs	r3, r1
 8014a86:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014a88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014a8a:	079b      	lsls	r3, r3, #30
 8014a8c:	d506      	bpl.n	8014a9c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014a8e:	6802      	ldr	r2, [r0, #0]
 8014a90:	6853      	ldr	r3, [r2, #4]
 8014a92:	4928      	ldr	r1, [pc, #160]	; (8014b34 <UART_AdvFeatureConfig+0xc0>)
 8014a94:	400b      	ands	r3, r1
 8014a96:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8014a98:	430b      	orrs	r3, r1
 8014a9a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014a9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014a9e:	075b      	lsls	r3, r3, #29
 8014aa0:	d506      	bpl.n	8014ab0 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014aa2:	6802      	ldr	r2, [r0, #0]
 8014aa4:	6853      	ldr	r3, [r2, #4]
 8014aa6:	4924      	ldr	r1, [pc, #144]	; (8014b38 <UART_AdvFeatureConfig+0xc4>)
 8014aa8:	400b      	ands	r3, r1
 8014aaa:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8014aac:	430b      	orrs	r3, r1
 8014aae:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014ab0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014ab2:	071b      	lsls	r3, r3, #28
 8014ab4:	d506      	bpl.n	8014ac4 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014ab6:	6802      	ldr	r2, [r0, #0]
 8014ab8:	6853      	ldr	r3, [r2, #4]
 8014aba:	4920      	ldr	r1, [pc, #128]	; (8014b3c <UART_AdvFeatureConfig+0xc8>)
 8014abc:	400b      	ands	r3, r1
 8014abe:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8014ac0:	430b      	orrs	r3, r1
 8014ac2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014ac4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014ac6:	06db      	lsls	r3, r3, #27
 8014ac8:	d506      	bpl.n	8014ad8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014aca:	6802      	ldr	r2, [r0, #0]
 8014acc:	6893      	ldr	r3, [r2, #8]
 8014ace:	491c      	ldr	r1, [pc, #112]	; (8014b40 <UART_AdvFeatureConfig+0xcc>)
 8014ad0:	400b      	ands	r3, r1
 8014ad2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8014ad4:	430b      	orrs	r3, r1
 8014ad6:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014ad8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014ada:	069b      	lsls	r3, r3, #26
 8014adc:	d506      	bpl.n	8014aec <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014ade:	6802      	ldr	r2, [r0, #0]
 8014ae0:	6893      	ldr	r3, [r2, #8]
 8014ae2:	4918      	ldr	r1, [pc, #96]	; (8014b44 <UART_AdvFeatureConfig+0xd0>)
 8014ae4:	400b      	ands	r3, r1
 8014ae6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8014ae8:	430b      	orrs	r3, r1
 8014aea:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014aec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014aee:	065b      	lsls	r3, r3, #25
 8014af0:	d50b      	bpl.n	8014b0a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014af2:	6802      	ldr	r2, [r0, #0]
 8014af4:	6853      	ldr	r3, [r2, #4]
 8014af6:	4914      	ldr	r1, [pc, #80]	; (8014b48 <UART_AdvFeatureConfig+0xd4>)
 8014af8:	400b      	ands	r3, r1
 8014afa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014afc:	430b      	orrs	r3, r1
 8014afe:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014b00:	2380      	movs	r3, #128	; 0x80
 8014b02:	035b      	lsls	r3, r3, #13
 8014b04:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014b06:	429a      	cmp	r2, r3
 8014b08:	d00a      	beq.n	8014b20 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014b0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014b0c:	061b      	lsls	r3, r3, #24
 8014b0e:	d506      	bpl.n	8014b1e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014b10:	6802      	ldr	r2, [r0, #0]
 8014b12:	6853      	ldr	r3, [r2, #4]
 8014b14:	490d      	ldr	r1, [pc, #52]	; (8014b4c <UART_AdvFeatureConfig+0xd8>)
 8014b16:	400b      	ands	r3, r1
 8014b18:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8014b1a:	430b      	orrs	r3, r1
 8014b1c:	6053      	str	r3, [r2, #4]
}
 8014b1e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014b20:	6802      	ldr	r2, [r0, #0]
 8014b22:	6853      	ldr	r3, [r2, #4]
 8014b24:	490a      	ldr	r1, [pc, #40]	; (8014b50 <UART_AdvFeatureConfig+0xdc>)
 8014b26:	400b      	ands	r3, r1
 8014b28:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8014b2a:	430b      	orrs	r3, r1
 8014b2c:	6053      	str	r3, [r2, #4]
 8014b2e:	e7ec      	b.n	8014b0a <UART_AdvFeatureConfig+0x96>
 8014b30:	fffdffff 	.word	0xfffdffff
 8014b34:	fffeffff 	.word	0xfffeffff
 8014b38:	fffbffff 	.word	0xfffbffff
 8014b3c:	ffff7fff 	.word	0xffff7fff
 8014b40:	ffffefff 	.word	0xffffefff
 8014b44:	ffffdfff 	.word	0xffffdfff
 8014b48:	ffefffff 	.word	0xffefffff
 8014b4c:	fff7ffff 	.word	0xfff7ffff
 8014b50:	ff9fffff 	.word	0xff9fffff

08014b54 <UART_WaitOnFlagUntilTimeout>:
{
 8014b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b56:	46c6      	mov	lr, r8
 8014b58:	b500      	push	{lr}
 8014b5a:	0006      	movs	r6, r0
 8014b5c:	000c      	movs	r4, r1
 8014b5e:	0017      	movs	r7, r2
 8014b60:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8014b62:	f7fd f93b 	bl	8011ddc <HAL_GetTick>
 8014b66:	4680      	mov	r8, r0
  if(Status == RESET)
 8014b68:	2f00      	cmp	r7, #0
 8014b6a:	d029      	beq.n	8014bc0 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8014b6c:	6833      	ldr	r3, [r6, #0]
 8014b6e:	69db      	ldr	r3, [r3, #28]
 8014b70:	4023      	ands	r3, r4
 8014b72:	42a3      	cmp	r3, r4
 8014b74:	d152      	bne.n	8014c1c <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8014b76:	1c6b      	adds	r3, r5, #1
 8014b78:	d0f8      	beq.n	8014b6c <UART_WaitOnFlagUntilTimeout+0x18>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8014b7a:	2d00      	cmp	r5, #0
 8014b7c:	d005      	beq.n	8014b8a <UART_WaitOnFlagUntilTimeout+0x36>
 8014b7e:	f7fd f92d 	bl	8011ddc <HAL_GetTick>
 8014b82:	4643      	mov	r3, r8
 8014b84:	1ac0      	subs	r0, r0, r3
 8014b86:	42a8      	cmp	r0, r5
 8014b88:	d9f0      	bls.n	8014b6c <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014b8a:	6832      	ldr	r2, [r6, #0]
 8014b8c:	6813      	ldr	r3, [r2, #0]
 8014b8e:	2180      	movs	r1, #128	; 0x80
 8014b90:	438b      	bics	r3, r1
 8014b92:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014b94:	6832      	ldr	r2, [r6, #0]
 8014b96:	6813      	ldr	r3, [r2, #0]
 8014b98:	3960      	subs	r1, #96	; 0x60
 8014b9a:	438b      	bics	r3, r1
 8014b9c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014b9e:	6832      	ldr	r2, [r6, #0]
 8014ba0:	6813      	ldr	r3, [r2, #0]
 8014ba2:	491f      	ldr	r1, [pc, #124]	; (8014c20 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8014ba4:	400b      	ands	r3, r1
 8014ba6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014ba8:	6831      	ldr	r1, [r6, #0]
 8014baa:	688b      	ldr	r3, [r1, #8]
 8014bac:	2201      	movs	r2, #1
 8014bae:	4393      	bics	r3, r2
 8014bb0:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8014bb2:	2369      	movs	r3, #105	; 0x69
 8014bb4:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8014bb6:	3b01      	subs	r3, #1
 8014bb8:	2200      	movs	r2, #0
 8014bba:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8014bbc:	2003      	movs	r0, #3
 8014bbe:	e02a      	b.n	8014c16 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8014bc0:	6833      	ldr	r3, [r6, #0]
 8014bc2:	69db      	ldr	r3, [r3, #28]
 8014bc4:	4023      	ands	r3, r4
 8014bc6:	42a3      	cmp	r3, r4
 8014bc8:	d024      	beq.n	8014c14 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8014bca:	1c6b      	adds	r3, r5, #1
 8014bcc:	d0f8      	beq.n	8014bc0 <UART_WaitOnFlagUntilTimeout+0x6c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8014bce:	2d00      	cmp	r5, #0
 8014bd0:	d005      	beq.n	8014bde <UART_WaitOnFlagUntilTimeout+0x8a>
 8014bd2:	f7fd f903 	bl	8011ddc <HAL_GetTick>
 8014bd6:	4643      	mov	r3, r8
 8014bd8:	1ac0      	subs	r0, r0, r3
 8014bda:	42a8      	cmp	r0, r5
 8014bdc:	d9f0      	bls.n	8014bc0 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014bde:	6832      	ldr	r2, [r6, #0]
 8014be0:	6813      	ldr	r3, [r2, #0]
 8014be2:	2180      	movs	r1, #128	; 0x80
 8014be4:	438b      	bics	r3, r1
 8014be6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014be8:	6832      	ldr	r2, [r6, #0]
 8014bea:	6813      	ldr	r3, [r2, #0]
 8014bec:	3960      	subs	r1, #96	; 0x60
 8014bee:	438b      	bics	r3, r1
 8014bf0:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014bf2:	6832      	ldr	r2, [r6, #0]
 8014bf4:	6813      	ldr	r3, [r2, #0]
 8014bf6:	490a      	ldr	r1, [pc, #40]	; (8014c20 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8014bf8:	400b      	ands	r3, r1
 8014bfa:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014bfc:	6831      	ldr	r1, [r6, #0]
 8014bfe:	688b      	ldr	r3, [r1, #8]
 8014c00:	2201      	movs	r2, #1
 8014c02:	4393      	bics	r3, r2
 8014c04:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8014c06:	2369      	movs	r3, #105	; 0x69
 8014c08:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8014c0a:	3b01      	subs	r3, #1
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8014c10:	2003      	movs	r0, #3
 8014c12:	e000      	b.n	8014c16 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8014c14:	2000      	movs	r0, #0
}
 8014c16:	bc04      	pop	{r2}
 8014c18:	4690      	mov	r8, r2
 8014c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8014c1c:	2000      	movs	r0, #0
 8014c1e:	e7fa      	b.n	8014c16 <UART_WaitOnFlagUntilTimeout+0xc2>
 8014c20:	fffffeff 	.word	0xfffffeff

08014c24 <HAL_UART_Transmit>:
{
 8014c24:	b570      	push	{r4, r5, r6, lr}
 8014c26:	0004      	movs	r4, r0
 8014c28:	000e      	movs	r6, r1
 8014c2a:	001d      	movs	r5, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014c2c:	2369      	movs	r3, #105	; 0x69
 8014c2e:	5cc3      	ldrb	r3, [r0, r3]
 8014c30:	2b01      	cmp	r3, #1
 8014c32:	d003      	beq.n	8014c3c <HAL_UART_Transmit+0x18>
 8014c34:	2369      	movs	r3, #105	; 0x69
 8014c36:	5cc3      	ldrb	r3, [r0, r3]
 8014c38:	2b22      	cmp	r3, #34	; 0x22
 8014c3a:	d155      	bne.n	8014ce8 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8014c3c:	2e00      	cmp	r6, #0
 8014c3e:	d055      	beq.n	8014cec <HAL_UART_Transmit+0xc8>
 8014c40:	2a00      	cmp	r2, #0
 8014c42:	d055      	beq.n	8014cf0 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8014c44:	2368      	movs	r3, #104	; 0x68
 8014c46:	5ce3      	ldrb	r3, [r4, r3]
 8014c48:	2b01      	cmp	r3, #1
 8014c4a:	d053      	beq.n	8014cf4 <HAL_UART_Transmit+0xd0>
 8014c4c:	2368      	movs	r3, #104	; 0x68
 8014c4e:	2101      	movs	r1, #1
 8014c50:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014c52:	2300      	movs	r3, #0
 8014c54:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8014c56:	3369      	adds	r3, #105	; 0x69
 8014c58:	5ce3      	ldrb	r3, [r4, r3]
 8014c5a:	2b22      	cmp	r3, #34	; 0x22
 8014c5c:	d007      	beq.n	8014c6e <HAL_UART_Transmit+0x4a>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8014c5e:	2369      	movs	r3, #105	; 0x69
 8014c60:	2112      	movs	r1, #18
 8014c62:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8014c64:	2350      	movs	r3, #80	; 0x50
 8014c66:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8014c68:	3302      	adds	r3, #2
 8014c6a:	52e2      	strh	r2, [r4, r3]
    while(huart->TxXferCount > 0)
 8014c6c:	e007      	b.n	8014c7e <HAL_UART_Transmit+0x5a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8014c6e:	3347      	adds	r3, #71	; 0x47
 8014c70:	3131      	adds	r1, #49	; 0x31
 8014c72:	54e1      	strb	r1, [r4, r3]
 8014c74:	e7f6      	b.n	8014c64 <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8014c76:	7833      	ldrb	r3, [r6, #0]
 8014c78:	6822      	ldr	r2, [r4, #0]
 8014c7a:	8513      	strh	r3, [r2, #40]	; 0x28
 8014c7c:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 8014c7e:	2352      	movs	r3, #82	; 0x52
 8014c80:	5ae3      	ldrh	r3, [r4, r3]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d019      	beq.n	8014cba <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8014c86:	3b01      	subs	r3, #1
 8014c88:	2252      	movs	r2, #82	; 0x52
 8014c8a:	52a3      	strh	r3, [r4, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8014c8c:	002b      	movs	r3, r5
 8014c8e:	2200      	movs	r2, #0
 8014c90:	2180      	movs	r1, #128	; 0x80
 8014c92:	0020      	movs	r0, r4
 8014c94:	f7ff ff5e 	bl	8014b54 <UART_WaitOnFlagUntilTimeout>
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	d12d      	bne.n	8014cf8 <HAL_UART_Transmit+0xd4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014c9c:	2380      	movs	r3, #128	; 0x80
 8014c9e:	015b      	lsls	r3, r3, #5
 8014ca0:	68a2      	ldr	r2, [r4, #8]
 8014ca2:	429a      	cmp	r2, r3
 8014ca4:	d1e7      	bne.n	8014c76 <HAL_UART_Transmit+0x52>
 8014ca6:	6923      	ldr	r3, [r4, #16]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d1e4      	bne.n	8014c76 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8014cac:	8833      	ldrh	r3, [r6, #0]
 8014cae:	05db      	lsls	r3, r3, #23
 8014cb0:	0ddb      	lsrs	r3, r3, #23
 8014cb2:	6822      	ldr	r2, [r4, #0]
 8014cb4:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8014cb6:	3602      	adds	r6, #2
 8014cb8:	e7e1      	b.n	8014c7e <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8014cba:	002b      	movs	r3, r5
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	2140      	movs	r1, #64	; 0x40
 8014cc0:	0020      	movs	r0, r4
 8014cc2:	f7ff ff47 	bl	8014b54 <UART_WaitOnFlagUntilTimeout>
 8014cc6:	2800      	cmp	r0, #0
 8014cc8:	d118      	bne.n	8014cfc <HAL_UART_Transmit+0xd8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014cca:	2369      	movs	r3, #105	; 0x69
 8014ccc:	5ce3      	ldrb	r3, [r4, r3]
 8014cce:	2b32      	cmp	r3, #50	; 0x32
 8014cd0:	d006      	beq.n	8014ce0 <HAL_UART_Transmit+0xbc>
      huart->State = HAL_UART_STATE_READY;
 8014cd2:	2369      	movs	r3, #105	; 0x69
 8014cd4:	2201      	movs	r2, #1
 8014cd6:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8014cd8:	2368      	movs	r3, #104	; 0x68
 8014cda:	2200      	movs	r2, #0
 8014cdc:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8014cde:	e004      	b.n	8014cea <HAL_UART_Transmit+0xc6>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8014ce0:	3337      	adds	r3, #55	; 0x37
 8014ce2:	2222      	movs	r2, #34	; 0x22
 8014ce4:	54e2      	strb	r2, [r4, r3]
 8014ce6:	e7f7      	b.n	8014cd8 <HAL_UART_Transmit+0xb4>
    return HAL_BUSY;
 8014ce8:	2002      	movs	r0, #2
}
 8014cea:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 8014cec:	2001      	movs	r0, #1
 8014cee:	e7fc      	b.n	8014cea <HAL_UART_Transmit+0xc6>
 8014cf0:	2001      	movs	r0, #1
 8014cf2:	e7fa      	b.n	8014cea <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 8014cf4:	2002      	movs	r0, #2
 8014cf6:	e7f8      	b.n	8014cea <HAL_UART_Transmit+0xc6>
        return HAL_TIMEOUT;
 8014cf8:	2003      	movs	r0, #3
 8014cfa:	e7f6      	b.n	8014cea <HAL_UART_Transmit+0xc6>
      return HAL_TIMEOUT;
 8014cfc:	2003      	movs	r0, #3
 8014cfe:	e7f4      	b.n	8014cea <HAL_UART_Transmit+0xc6>

08014d00 <UART_CheckIdleState>:
{
 8014d00:	b510      	push	{r4, lr}
 8014d02:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d04:	2300      	movs	r3, #0
 8014d06:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8014d08:	6803      	ldr	r3, [r0, #0]
 8014d0a:	4a18      	ldr	r2, [pc, #96]	; (8014d6c <UART_CheckIdleState+0x6c>)
 8014d0c:	4293      	cmp	r3, r2
 8014d0e:	d005      	beq.n	8014d1c <UART_CheckIdleState+0x1c>
 8014d10:	4a17      	ldr	r2, [pc, #92]	; (8014d70 <UART_CheckIdleState+0x70>)
 8014d12:	4293      	cmp	r3, r2
 8014d14:	d002      	beq.n	8014d1c <UART_CheckIdleState+0x1c>
 8014d16:	4a17      	ldr	r2, [pc, #92]	; (8014d74 <UART_CheckIdleState+0x74>)
 8014d18:	4293      	cmp	r3, r2
 8014d1a:	d106      	bne.n	8014d2a <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	071b      	lsls	r3, r3, #28
 8014d20:	d40b      	bmi.n	8014d3a <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014d22:	6823      	ldr	r3, [r4, #0]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	075b      	lsls	r3, r3, #29
 8014d28:	d413      	bmi.n	8014d52 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8014d2a:	2369      	movs	r3, #105	; 0x69
 8014d2c:	2201      	movs	r2, #1
 8014d2e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8014d30:	3b01      	subs	r3, #1
 8014d32:	2200      	movs	r2, #0
 8014d34:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8014d36:	2000      	movs	r0, #0
}
 8014d38:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8014d3a:	23fa      	movs	r3, #250	; 0xfa
 8014d3c:	2180      	movs	r1, #128	; 0x80
 8014d3e:	009b      	lsls	r3, r3, #2
 8014d40:	2200      	movs	r2, #0
 8014d42:	0389      	lsls	r1, r1, #14
 8014d44:	0020      	movs	r0, r4
 8014d46:	f7ff ff05 	bl	8014b54 <UART_WaitOnFlagUntilTimeout>
 8014d4a:	2800      	cmp	r0, #0
 8014d4c:	d0e9      	beq.n	8014d22 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8014d4e:	2003      	movs	r0, #3
 8014d50:	e7f2      	b.n	8014d38 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8014d52:	23fa      	movs	r3, #250	; 0xfa
 8014d54:	2180      	movs	r1, #128	; 0x80
 8014d56:	009b      	lsls	r3, r3, #2
 8014d58:	2200      	movs	r2, #0
 8014d5a:	03c9      	lsls	r1, r1, #15
 8014d5c:	0020      	movs	r0, r4
 8014d5e:	f7ff fef9 	bl	8014b54 <UART_WaitOnFlagUntilTimeout>
 8014d62:	2800      	cmp	r0, #0
 8014d64:	d0e1      	beq.n	8014d2a <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8014d66:	2003      	movs	r0, #3
 8014d68:	e7e6      	b.n	8014d38 <UART_CheckIdleState+0x38>
 8014d6a:	46c0      	nop			; (mov r8, r8)
 8014d6c:	40013800 	.word	0x40013800
 8014d70:	40004400 	.word	0x40004400
 8014d74:	40004800 	.word	0x40004800

08014d78 <HAL_UART_Init>:
{
 8014d78:	b510      	push	{r4, lr}
 8014d7a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8014d7c:	d030      	beq.n	8014de0 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8014d7e:	2369      	movs	r3, #105	; 0x69
 8014d80:	5cc3      	ldrb	r3, [r0, r3]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d022      	beq.n	8014dcc <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8014d86:	2369      	movs	r3, #105	; 0x69
 8014d88:	2202      	movs	r2, #2
 8014d8a:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8014d8c:	6822      	ldr	r2, [r4, #0]
 8014d8e:	6813      	ldr	r3, [r2, #0]
 8014d90:	2101      	movs	r1, #1
 8014d92:	438b      	bics	r3, r1
 8014d94:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014d96:	0020      	movs	r0, r4
 8014d98:	f7ff fd4c 	bl	8014834 <UART_SetConfig>
 8014d9c:	2801      	cmp	r0, #1
 8014d9e:	d014      	beq.n	8014dca <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d118      	bne.n	8014dd8 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8014da6:	6822      	ldr	r2, [r4, #0]
 8014da8:	6853      	ldr	r3, [r2, #4]
 8014daa:	490e      	ldr	r1, [pc, #56]	; (8014de4 <HAL_UART_Init+0x6c>)
 8014dac:	400b      	ands	r3, r1
 8014dae:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8014db0:	6822      	ldr	r2, [r4, #0]
 8014db2:	6893      	ldr	r3, [r2, #8]
 8014db4:	212a      	movs	r1, #42	; 0x2a
 8014db6:	438b      	bics	r3, r1
 8014db8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8014dba:	6822      	ldr	r2, [r4, #0]
 8014dbc:	6813      	ldr	r3, [r2, #0]
 8014dbe:	3929      	subs	r1, #41	; 0x29
 8014dc0:	430b      	orrs	r3, r1
 8014dc2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8014dc4:	0020      	movs	r0, r4
 8014dc6:	f7ff ff9b 	bl	8014d00 <UART_CheckIdleState>
}
 8014dca:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8014dcc:	3368      	adds	r3, #104	; 0x68
 8014dce:	2200      	movs	r2, #0
 8014dd0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8014dd2:	f7fa fd31 	bl	800f838 <HAL_UART_MspInit>
 8014dd6:	e7d6      	b.n	8014d86 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8014dd8:	0020      	movs	r0, r4
 8014dda:	f7ff fe4b 	bl	8014a74 <UART_AdvFeatureConfig>
 8014dde:	e7e2      	b.n	8014da6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8014de0:	2001      	movs	r0, #1
 8014de2:	e7f2      	b.n	8014dca <HAL_UART_Init+0x52>
 8014de4:	ffffb7ff 	.word	0xffffb7ff

08014de8 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014de8:	2369      	movs	r3, #105	; 0x69
 8014dea:	5cc3      	ldrb	r3, [r0, r3]
 8014dec:	2b12      	cmp	r3, #18
 8014dee:	d003      	beq.n	8014df8 <UART_Transmit_IT+0x10>
 8014df0:	2369      	movs	r3, #105	; 0x69
 8014df2:	5cc3      	ldrb	r3, [r0, r3]
 8014df4:	2b32      	cmp	r3, #50	; 0x32
 8014df6:	d12d      	bne.n	8014e54 <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8014df8:	2352      	movs	r3, #82	; 0x52
 8014dfa:	5ac3      	ldrh	r3, [r0, r3]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d010      	beq.n	8014e22 <UART_Transmit_IT+0x3a>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014e00:	2380      	movs	r3, #128	; 0x80
 8014e02:	015b      	lsls	r3, r3, #5
 8014e04:	6882      	ldr	r2, [r0, #8]
 8014e06:	429a      	cmp	r2, r3
 8014e08:	d017      	beq.n	8014e3a <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8014e0a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014e0c:	1c5a      	adds	r2, r3, #1
 8014e0e:	64c2      	str	r2, [r0, #76]	; 0x4c
 8014e10:	781b      	ldrb	r3, [r3, #0]
 8014e12:	6802      	ldr	r2, [r0, #0]
 8014e14:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8014e16:	2252      	movs	r2, #82	; 0x52
 8014e18:	5a83      	ldrh	r3, [r0, r2]
 8014e1a:	3b01      	subs	r3, #1
 8014e1c:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 8014e1e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8014e20:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014e22:	6802      	ldr	r2, [r0, #0]
 8014e24:	6813      	ldr	r3, [r2, #0]
 8014e26:	2180      	movs	r1, #128	; 0x80
 8014e28:	438b      	bics	r3, r1
 8014e2a:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014e2c:	6802      	ldr	r2, [r0, #0]
 8014e2e:	6813      	ldr	r3, [r2, #0]
 8014e30:	3940      	subs	r1, #64	; 0x40
 8014e32:	430b      	orrs	r3, r1
 8014e34:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8014e36:	2000      	movs	r0, #0
 8014e38:	e7f2      	b.n	8014e20 <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014e3a:	6903      	ldr	r3, [r0, #16]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d1e4      	bne.n	8014e0a <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8014e40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014e42:	881b      	ldrh	r3, [r3, #0]
 8014e44:	05db      	lsls	r3, r3, #23
 8014e46:	0ddb      	lsrs	r3, r3, #23
 8014e48:	6802      	ldr	r2, [r0, #0]
 8014e4a:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8014e4c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014e4e:	3302      	adds	r3, #2
 8014e50:	64c3      	str	r3, [r0, #76]	; 0x4c
 8014e52:	e7e0      	b.n	8014e16 <UART_Transmit_IT+0x2e>
    return HAL_BUSY;
 8014e54:	2002      	movs	r0, #2
 8014e56:	e7e3      	b.n	8014e20 <UART_Transmit_IT+0x38>

08014e58 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014e58:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8014e5a:	6802      	ldr	r2, [r0, #0]
 8014e5c:	6813      	ldr	r3, [r2, #0]
 8014e5e:	2140      	movs	r1, #64	; 0x40
 8014e60:	438b      	bics	r3, r1
 8014e62:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014e64:	2369      	movs	r3, #105	; 0x69
 8014e66:	5cc3      	ldrb	r3, [r0, r3]
 8014e68:	2b32      	cmp	r3, #50	; 0x32
 8014e6a:	d00a      	beq.n	8014e82 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014e6c:	6801      	ldr	r1, [r0, #0]
 8014e6e:	688b      	ldr	r3, [r1, #8]
 8014e70:	2201      	movs	r2, #1
 8014e72:	4393      	bics	r3, r2
 8014e74:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8014e76:	2369      	movs	r3, #105	; 0x69
 8014e78:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8014e7a:	f7fa fa17 	bl	800f2ac <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8014e7e:	2000      	movs	r0, #0
 8014e80:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8014e82:	3337      	adds	r3, #55	; 0x37
 8014e84:	2222      	movs	r2, #34	; 0x22
 8014e86:	54c2      	strb	r2, [r0, r3]
 8014e88:	e7f7      	b.n	8014e7a <UART_EndTransmit_IT+0x22>
	...

08014e8c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8014e8c:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8014e8e:	235c      	movs	r3, #92	; 0x5c
 8014e90:	5ac3      	ldrh	r3, [r0, r3]

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014e92:	2269      	movs	r2, #105	; 0x69
 8014e94:	5c82      	ldrb	r2, [r0, r2]
 8014e96:	2a22      	cmp	r2, #34	; 0x22
 8014e98:	d003      	beq.n	8014ea2 <UART_Receive_IT+0x16>
 8014e9a:	2269      	movs	r2, #105	; 0x69
 8014e9c:	5c82      	ldrb	r2, [r0, r2]
 8014e9e:	2a32      	cmp	r2, #50	; 0x32
 8014ea0:	d13c      	bne.n	8014f1c <UART_Receive_IT+0x90>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014ea2:	2280      	movs	r2, #128	; 0x80
 8014ea4:	0152      	lsls	r2, r2, #5
 8014ea6:	6881      	ldr	r1, [r0, #8]
 8014ea8:	4291      	cmp	r1, r2
 8014eaa:	d027      	beq.n	8014efc <UART_Receive_IT+0x70>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014eac:	6802      	ldr	r2, [r0, #0]
 8014eae:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8014eb0:	b2db      	uxtb	r3, r3
 8014eb2:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8014eb4:	1c4c      	adds	r4, r1, #1
 8014eb6:	6544      	str	r4, [r0, #84]	; 0x54
 8014eb8:	4013      	ands	r3, r2
 8014eba:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8014ebc:	225a      	movs	r2, #90	; 0x5a
 8014ebe:	5a83      	ldrh	r3, [r0, r2]
 8014ec0:	3b01      	subs	r3, #1
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	5283      	strh	r3, [r0, r2]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d12a      	bne.n	8014f20 <UART_Receive_IT+0x94>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014eca:	6802      	ldr	r2, [r0, #0]
 8014ecc:	6813      	ldr	r3, [r2, #0]
 8014ece:	2120      	movs	r1, #32
 8014ed0:	438b      	bics	r3, r1
 8014ed2:	6013      	str	r3, [r2, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014ed4:	2369      	movs	r3, #105	; 0x69
 8014ed6:	5cc3      	ldrb	r3, [r0, r3]
 8014ed8:	2b32      	cmp	r3, #50	; 0x32
 8014eda:	d01b      	beq.n	8014f14 <UART_Receive_IT+0x88>
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014edc:	6802      	ldr	r2, [r0, #0]
 8014ede:	6813      	ldr	r3, [r2, #0]
 8014ee0:	4910      	ldr	r1, [pc, #64]	; (8014f24 <UART_Receive_IT+0x98>)
 8014ee2:	400b      	ands	r3, r1
 8014ee4:	6013      	str	r3, [r2, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014ee6:	6801      	ldr	r1, [r0, #0]
 8014ee8:	688b      	ldr	r3, [r1, #8]
 8014eea:	2201      	movs	r2, #1
 8014eec:	4393      	bics	r3, r2
 8014eee:	608b      	str	r3, [r1, #8]

        huart->State = HAL_UART_STATE_READY;
 8014ef0:	2369      	movs	r3, #105	; 0x69
 8014ef2:	54c2      	strb	r2, [r0, r3]
      }

      HAL_UART_RxCpltCallback(huart);
 8014ef4:	f7fa fa16 	bl	800f324 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8014ef8:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8014efa:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014efc:	6902      	ldr	r2, [r0, #16]
 8014efe:	2a00      	cmp	r2, #0
 8014f00:	d1d4      	bne.n	8014eac <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8014f02:	6802      	ldr	r2, [r0, #0]
 8014f04:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8014f06:	4013      	ands	r3, r2
 8014f08:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8014f0a:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8014f0c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8014f0e:	3302      	adds	r3, #2
 8014f10:	6543      	str	r3, [r0, #84]	; 0x54
 8014f12:	e7d3      	b.n	8014ebc <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8014f14:	3337      	adds	r3, #55	; 0x37
 8014f16:	2212      	movs	r2, #18
 8014f18:	54c2      	strb	r2, [r0, r3]
 8014f1a:	e7eb      	b.n	8014ef4 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8014f1c:	2002      	movs	r0, #2
 8014f1e:	e7ec      	b.n	8014efa <UART_Receive_IT+0x6e>
    return HAL_OK;
 8014f20:	2000      	movs	r0, #0
 8014f22:	e7ea      	b.n	8014efa <UART_Receive_IT+0x6e>
 8014f24:	fffffeff 	.word	0xfffffeff

08014f28 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8014f28:	4770      	bx	lr

08014f2a <HAL_UART_IRQHandler>:
{
 8014f2a:	b510      	push	{r4, lr}
 8014f2c:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8014f2e:	6803      	ldr	r3, [r0, #0]
 8014f30:	69da      	ldr	r2, [r3, #28]
 8014f32:	07d2      	lsls	r2, r2, #31
 8014f34:	d509      	bpl.n	8014f4a <HAL_UART_IRQHandler+0x20>
 8014f36:	681a      	ldr	r2, [r3, #0]
 8014f38:	05d2      	lsls	r2, r2, #23
 8014f3a:	d506      	bpl.n	8014f4a <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8014f3c:	2201      	movs	r2, #1
 8014f3e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014f40:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8014f42:	4313      	orrs	r3, r2
 8014f44:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014f46:	2369      	movs	r3, #105	; 0x69
 8014f48:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014f4a:	6823      	ldr	r3, [r4, #0]
 8014f4c:	69da      	ldr	r2, [r3, #28]
 8014f4e:	0792      	lsls	r2, r2, #30
 8014f50:	d50b      	bpl.n	8014f6a <HAL_UART_IRQHandler+0x40>
 8014f52:	689a      	ldr	r2, [r3, #8]
 8014f54:	07d2      	lsls	r2, r2, #31
 8014f56:	d508      	bpl.n	8014f6a <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8014f58:	2202      	movs	r2, #2
 8014f5a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014f5c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014f5e:	3202      	adds	r2, #2
 8014f60:	4313      	orrs	r3, r2
 8014f62:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014f64:	2369      	movs	r3, #105	; 0x69
 8014f66:	3a03      	subs	r2, #3
 8014f68:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014f6a:	6823      	ldr	r3, [r4, #0]
 8014f6c:	69da      	ldr	r2, [r3, #28]
 8014f6e:	0752      	lsls	r2, r2, #29
 8014f70:	d50b      	bpl.n	8014f8a <HAL_UART_IRQHandler+0x60>
 8014f72:	689a      	ldr	r2, [r3, #8]
 8014f74:	07d2      	lsls	r2, r2, #31
 8014f76:	d508      	bpl.n	8014f8a <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8014f78:	2204      	movs	r2, #4
 8014f7a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014f7c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014f7e:	3a02      	subs	r2, #2
 8014f80:	4313      	orrs	r3, r2
 8014f82:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014f84:	2369      	movs	r3, #105	; 0x69
 8014f86:	3a01      	subs	r2, #1
 8014f88:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014f8a:	6823      	ldr	r3, [r4, #0]
 8014f8c:	69da      	ldr	r2, [r3, #28]
 8014f8e:	0712      	lsls	r2, r2, #28
 8014f90:	d50a      	bpl.n	8014fa8 <HAL_UART_IRQHandler+0x7e>
 8014f92:	689a      	ldr	r2, [r3, #8]
 8014f94:	07d2      	lsls	r2, r2, #31
 8014f96:	d507      	bpl.n	8014fa8 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8014f98:	2208      	movs	r2, #8
 8014f9a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014f9c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014f9e:	4313      	orrs	r3, r2
 8014fa0:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014fa2:	2369      	movs	r3, #105	; 0x69
 8014fa4:	3a07      	subs	r2, #7
 8014fa6:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014fa8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d11c      	bne.n	8014fe8 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8014fae:	6823      	ldr	r3, [r4, #0]
 8014fb0:	69da      	ldr	r2, [r3, #28]
 8014fb2:	02d2      	lsls	r2, r2, #11
 8014fb4:	d502      	bpl.n	8014fbc <HAL_UART_IRQHandler+0x92>
 8014fb6:	689a      	ldr	r2, [r3, #8]
 8014fb8:	0252      	lsls	r2, r2, #9
 8014fba:	d419      	bmi.n	8014ff0 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8014fbc:	6823      	ldr	r3, [r4, #0]
 8014fbe:	69da      	ldr	r2, [r3, #28]
 8014fc0:	0692      	lsls	r2, r2, #26
 8014fc2:	d502      	bpl.n	8014fca <HAL_UART_IRQHandler+0xa0>
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	069b      	lsls	r3, r3, #26
 8014fc8:	d41c      	bmi.n	8015004 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8014fca:	6823      	ldr	r3, [r4, #0]
 8014fcc:	69da      	ldr	r2, [r3, #28]
 8014fce:	0612      	lsls	r2, r2, #24
 8014fd0:	d502      	bpl.n	8014fd8 <HAL_UART_IRQHandler+0xae>
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	061b      	lsls	r3, r3, #24
 8014fd6:	d41e      	bmi.n	8015016 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8014fd8:	6823      	ldr	r3, [r4, #0]
 8014fda:	69da      	ldr	r2, [r3, #28]
 8014fdc:	0652      	lsls	r2, r2, #25
 8014fde:	d502      	bpl.n	8014fe6 <HAL_UART_IRQHandler+0xbc>
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	065b      	lsls	r3, r3, #25
 8014fe4:	d41b      	bmi.n	801501e <HAL_UART_IRQHandler+0xf4>
}
 8014fe6:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8014fe8:	0020      	movs	r0, r4
 8014fea:	f7fa f977 	bl	800f2dc <HAL_UART_ErrorCallback>
 8014fee:	e7de      	b.n	8014fae <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8014ff0:	2280      	movs	r2, #128	; 0x80
 8014ff2:	0352      	lsls	r2, r2, #13
 8014ff4:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8014ff6:	2369      	movs	r3, #105	; 0x69
 8014ff8:	2201      	movs	r2, #1
 8014ffa:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8014ffc:	0020      	movs	r0, r4
 8014ffe:	f7ff ff93 	bl	8014f28 <HAL_UARTEx_WakeupCallback>
 8015002:	e7db      	b.n	8014fbc <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8015004:	0020      	movs	r0, r4
 8015006:	f7ff ff41 	bl	8014e8c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801500a:	6822      	ldr	r2, [r4, #0]
 801500c:	6993      	ldr	r3, [r2, #24]
 801500e:	2108      	movs	r1, #8
 8015010:	430b      	orrs	r3, r1
 8015012:	6193      	str	r3, [r2, #24]
 8015014:	e7d9      	b.n	8014fca <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8015016:	0020      	movs	r0, r4
 8015018:	f7ff fee6 	bl	8014de8 <UART_Transmit_IT>
 801501c:	e7dc      	b.n	8014fd8 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 801501e:	0020      	movs	r0, r4
 8015020:	f7ff ff1a 	bl	8014e58 <UART_EndTransmit_IT>
}
 8015024:	e7df      	b.n	8014fe6 <HAL_UART_IRQHandler+0xbc>

08015026 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8015026:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8015028:	f7ef fd8a 	bl	8004b40 <Module_Init>
 801502c:	e7fe      	b.n	801502c <main+0x6>

0801502e <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 801502e:	e7fe      	b.n	801502e <UserTask>

08015030 <atof>:
 8015030:	b510      	push	{r4, lr}
 8015032:	2100      	movs	r1, #0
 8015034:	f001 fb3e 	bl	80166b4 <strtod>
 8015038:	bd10      	pop	{r4, pc}

0801503a <atoi>:
 801503a:	b510      	push	{r4, lr}
 801503c:	220a      	movs	r2, #10
 801503e:	2100      	movs	r1, #0
 8015040:	f001 fc04 	bl	801684c <strtol>
 8015044:	bd10      	pop	{r4, pc}

08015046 <atol>:
 8015046:	b510      	push	{r4, lr}
 8015048:	220a      	movs	r2, #10
 801504a:	2100      	movs	r1, #0
 801504c:	f001 fbfe 	bl	801684c <strtol>
 8015050:	bd10      	pop	{r4, pc}
	...

08015054 <__libc_init_array>:
 8015054:	b570      	push	{r4, r5, r6, lr}
 8015056:	2600      	movs	r6, #0
 8015058:	4d0c      	ldr	r5, [pc, #48]	; (801508c <__libc_init_array+0x38>)
 801505a:	4c0d      	ldr	r4, [pc, #52]	; (8015090 <__libc_init_array+0x3c>)
 801505c:	1b64      	subs	r4, r4, r5
 801505e:	10a4      	asrs	r4, r4, #2
 8015060:	42a6      	cmp	r6, r4
 8015062:	d109      	bne.n	8015078 <__libc_init_array+0x24>
 8015064:	2600      	movs	r6, #0
 8015066:	f004 fe6d 	bl	8019d44 <_init>
 801506a:	4d0a      	ldr	r5, [pc, #40]	; (8015094 <__libc_init_array+0x40>)
 801506c:	4c0a      	ldr	r4, [pc, #40]	; (8015098 <__libc_init_array+0x44>)
 801506e:	1b64      	subs	r4, r4, r5
 8015070:	10a4      	asrs	r4, r4, #2
 8015072:	42a6      	cmp	r6, r4
 8015074:	d105      	bne.n	8015082 <__libc_init_array+0x2e>
 8015076:	bd70      	pop	{r4, r5, r6, pc}
 8015078:	00b3      	lsls	r3, r6, #2
 801507a:	58eb      	ldr	r3, [r5, r3]
 801507c:	4798      	blx	r3
 801507e:	3601      	adds	r6, #1
 8015080:	e7ee      	b.n	8015060 <__libc_init_array+0xc>
 8015082:	00b3      	lsls	r3, r6, #2
 8015084:	58eb      	ldr	r3, [r5, r3]
 8015086:	4798      	blx	r3
 8015088:	3601      	adds	r6, #1
 801508a:	e7f2      	b.n	8015072 <__libc_init_array+0x1e>
 801508c:	0801d79c 	.word	0x0801d79c
 8015090:	0801d79c 	.word	0x0801d79c
 8015094:	0801d79c 	.word	0x0801d79c
 8015098:	0801d7a4 	.word	0x0801d7a4

0801509c <__locale_ctype_ptr_l>:
 801509c:	30ec      	adds	r0, #236	; 0xec
 801509e:	6800      	ldr	r0, [r0, #0]
 80150a0:	4770      	bx	lr
	...

080150a4 <__locale_ctype_ptr>:
 80150a4:	4b04      	ldr	r3, [pc, #16]	; (80150b8 <__locale_ctype_ptr+0x14>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d100      	bne.n	80150b0 <__locale_ctype_ptr+0xc>
 80150ae:	4b03      	ldr	r3, [pc, #12]	; (80150bc <__locale_ctype_ptr+0x18>)
 80150b0:	33ec      	adds	r3, #236	; 0xec
 80150b2:	6818      	ldr	r0, [r3, #0]
 80150b4:	4770      	bx	lr
 80150b6:	46c0      	nop			; (mov r8, r8)
 80150b8:	200000d8 	.word	0x200000d8
 80150bc:	20000508 	.word	0x20000508

080150c0 <malloc>:
 80150c0:	b510      	push	{r4, lr}
 80150c2:	4b03      	ldr	r3, [pc, #12]	; (80150d0 <malloc+0x10>)
 80150c4:	0001      	movs	r1, r0
 80150c6:	6818      	ldr	r0, [r3, #0]
 80150c8:	f000 f80e 	bl	80150e8 <_malloc_r>
 80150cc:	bd10      	pop	{r4, pc}
 80150ce:	46c0      	nop			; (mov r8, r8)
 80150d0:	200000d8 	.word	0x200000d8

080150d4 <free>:
 80150d4:	b510      	push	{r4, lr}
 80150d6:	4b03      	ldr	r3, [pc, #12]	; (80150e4 <free+0x10>)
 80150d8:	0001      	movs	r1, r0
 80150da:	6818      	ldr	r0, [r3, #0]
 80150dc:	f003 fd10 	bl	8018b00 <_free_r>
 80150e0:	bd10      	pop	{r4, pc}
 80150e2:	46c0      	nop			; (mov r8, r8)
 80150e4:	200000d8 	.word	0x200000d8

080150e8 <_malloc_r>:
 80150e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150ea:	000d      	movs	r5, r1
 80150ec:	b085      	sub	sp, #20
 80150ee:	350b      	adds	r5, #11
 80150f0:	9001      	str	r0, [sp, #4]
 80150f2:	2d16      	cmp	r5, #22
 80150f4:	d908      	bls.n	8015108 <_malloc_r+0x20>
 80150f6:	2307      	movs	r3, #7
 80150f8:	439d      	bics	r5, r3
 80150fa:	d506      	bpl.n	801510a <_malloc_r+0x22>
 80150fc:	230c      	movs	r3, #12
 80150fe:	9a01      	ldr	r2, [sp, #4]
 8015100:	6013      	str	r3, [r2, #0]
 8015102:	2000      	movs	r0, #0
 8015104:	b005      	add	sp, #20
 8015106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015108:	2510      	movs	r5, #16
 801510a:	428d      	cmp	r5, r1
 801510c:	d3f6      	bcc.n	80150fc <_malloc_r+0x14>
 801510e:	9801      	ldr	r0, [sp, #4]
 8015110:	f000 fa34 	bl	801557c <__malloc_lock>
 8015114:	23f8      	movs	r3, #248	; 0xf8
 8015116:	33ff      	adds	r3, #255	; 0xff
 8015118:	4ac4      	ldr	r2, [pc, #784]	; (801542c <_malloc_r+0x344>)
 801511a:	429d      	cmp	r5, r3
 801511c:	d820      	bhi.n	8015160 <_malloc_r+0x78>
 801511e:	0029      	movs	r1, r5
 8015120:	3108      	adds	r1, #8
 8015122:	1851      	adds	r1, r2, r1
 8015124:	0008      	movs	r0, r1
 8015126:	684c      	ldr	r4, [r1, #4]
 8015128:	3808      	subs	r0, #8
 801512a:	08eb      	lsrs	r3, r5, #3
 801512c:	4284      	cmp	r4, r0
 801512e:	d104      	bne.n	801513a <_malloc_r+0x52>
 8015130:	68cc      	ldr	r4, [r1, #12]
 8015132:	3302      	adds	r3, #2
 8015134:	469c      	mov	ip, r3
 8015136:	42a1      	cmp	r1, r4
 8015138:	d02a      	beq.n	8015190 <_malloc_r+0xa8>
 801513a:	2303      	movs	r3, #3
 801513c:	6862      	ldr	r2, [r4, #4]
 801513e:	68a1      	ldr	r1, [r4, #8]
 8015140:	439a      	bics	r2, r3
 8015142:	0013      	movs	r3, r2
 8015144:	68e2      	ldr	r2, [r4, #12]
 8015146:	18e3      	adds	r3, r4, r3
 8015148:	60ca      	str	r2, [r1, #12]
 801514a:	6091      	str	r1, [r2, #8]
 801514c:	2201      	movs	r2, #1
 801514e:	6859      	ldr	r1, [r3, #4]
 8015150:	430a      	orrs	r2, r1
 8015152:	605a      	str	r2, [r3, #4]
 8015154:	9801      	ldr	r0, [sp, #4]
 8015156:	f000 fa19 	bl	801558c <__malloc_unlock>
 801515a:	0020      	movs	r0, r4
 801515c:	3008      	adds	r0, #8
 801515e:	e7d1      	b.n	8015104 <_malloc_r+0x1c>
 8015160:	0a69      	lsrs	r1, r5, #9
 8015162:	233f      	movs	r3, #63	; 0x3f
 8015164:	2900      	cmp	r1, #0
 8015166:	d003      	beq.n	8015170 <_malloc_r+0x88>
 8015168:	2904      	cmp	r1, #4
 801516a:	d828      	bhi.n	80151be <_malloc_r+0xd6>
 801516c:	09ab      	lsrs	r3, r5, #6
 801516e:	3338      	adds	r3, #56	; 0x38
 8015170:	2103      	movs	r1, #3
 8015172:	468c      	mov	ip, r1
 8015174:	00d8      	lsls	r0, r3, #3
 8015176:	1880      	adds	r0, r0, r2
 8015178:	68c4      	ldr	r4, [r0, #12]
 801517a:	4284      	cmp	r4, r0
 801517c:	d006      	beq.n	801518c <_malloc_r+0xa4>
 801517e:	4666      	mov	r6, ip
 8015180:	6861      	ldr	r1, [r4, #4]
 8015182:	43b1      	bics	r1, r6
 8015184:	1b4f      	subs	r7, r1, r5
 8015186:	2f0f      	cmp	r7, #15
 8015188:	dd31      	ble.n	80151ee <_malloc_r+0x106>
 801518a:	3b01      	subs	r3, #1
 801518c:	3301      	adds	r3, #1
 801518e:	469c      	mov	ip, r3
 8015190:	6914      	ldr	r4, [r2, #16]
 8015192:	49a7      	ldr	r1, [pc, #668]	; (8015430 <_malloc_r+0x348>)
 8015194:	428c      	cmp	r4, r1
 8015196:	d055      	beq.n	8015244 <_malloc_r+0x15c>
 8015198:	2303      	movs	r3, #3
 801519a:	6860      	ldr	r0, [r4, #4]
 801519c:	4398      	bics	r0, r3
 801519e:	0003      	movs	r3, r0
 80151a0:	1b46      	subs	r6, r0, r5
 80151a2:	2e0f      	cmp	r6, #15
 80151a4:	dd31      	ble.n	801520a <_malloc_r+0x122>
 80151a6:	2701      	movs	r7, #1
 80151a8:	1960      	adds	r0, r4, r5
 80151aa:	433d      	orrs	r5, r7
 80151ac:	4337      	orrs	r7, r6
 80151ae:	6065      	str	r5, [r4, #4]
 80151b0:	6150      	str	r0, [r2, #20]
 80151b2:	6110      	str	r0, [r2, #16]
 80151b4:	60c1      	str	r1, [r0, #12]
 80151b6:	6081      	str	r1, [r0, #8]
 80151b8:	6047      	str	r7, [r0, #4]
 80151ba:	50e6      	str	r6, [r4, r3]
 80151bc:	e7ca      	b.n	8015154 <_malloc_r+0x6c>
 80151be:	2914      	cmp	r1, #20
 80151c0:	d802      	bhi.n	80151c8 <_malloc_r+0xe0>
 80151c2:	000b      	movs	r3, r1
 80151c4:	335b      	adds	r3, #91	; 0x5b
 80151c6:	e7d3      	b.n	8015170 <_malloc_r+0x88>
 80151c8:	2954      	cmp	r1, #84	; 0x54
 80151ca:	d802      	bhi.n	80151d2 <_malloc_r+0xea>
 80151cc:	0b2b      	lsrs	r3, r5, #12
 80151ce:	336e      	adds	r3, #110	; 0x6e
 80151d0:	e7ce      	b.n	8015170 <_malloc_r+0x88>
 80151d2:	23aa      	movs	r3, #170	; 0xaa
 80151d4:	005b      	lsls	r3, r3, #1
 80151d6:	4299      	cmp	r1, r3
 80151d8:	d802      	bhi.n	80151e0 <_malloc_r+0xf8>
 80151da:	0beb      	lsrs	r3, r5, #15
 80151dc:	3377      	adds	r3, #119	; 0x77
 80151de:	e7c7      	b.n	8015170 <_malloc_r+0x88>
 80151e0:	4894      	ldr	r0, [pc, #592]	; (8015434 <_malloc_r+0x34c>)
 80151e2:	237e      	movs	r3, #126	; 0x7e
 80151e4:	4281      	cmp	r1, r0
 80151e6:	d8c3      	bhi.n	8015170 <_malloc_r+0x88>
 80151e8:	0cab      	lsrs	r3, r5, #18
 80151ea:	337c      	adds	r3, #124	; 0x7c
 80151ec:	e7c0      	b.n	8015170 <_malloc_r+0x88>
 80151ee:	68e6      	ldr	r6, [r4, #12]
 80151f0:	2f00      	cmp	r7, #0
 80151f2:	db08      	blt.n	8015206 <_malloc_r+0x11e>
 80151f4:	68a3      	ldr	r3, [r4, #8]
 80151f6:	1861      	adds	r1, r4, r1
 80151f8:	60de      	str	r6, [r3, #12]
 80151fa:	60b3      	str	r3, [r6, #8]
 80151fc:	2301      	movs	r3, #1
 80151fe:	684a      	ldr	r2, [r1, #4]
 8015200:	4313      	orrs	r3, r2
 8015202:	604b      	str	r3, [r1, #4]
 8015204:	e7a6      	b.n	8015154 <_malloc_r+0x6c>
 8015206:	0034      	movs	r4, r6
 8015208:	e7b7      	b.n	801517a <_malloc_r+0x92>
 801520a:	6151      	str	r1, [r2, #20]
 801520c:	6111      	str	r1, [r2, #16]
 801520e:	2e00      	cmp	r6, #0
 8015210:	db05      	blt.n	801521e <_malloc_r+0x136>
 8015212:	2101      	movs	r1, #1
 8015214:	1823      	adds	r3, r4, r0
 8015216:	685a      	ldr	r2, [r3, #4]
 8015218:	4311      	orrs	r1, r2
 801521a:	6059      	str	r1, [r3, #4]
 801521c:	e79a      	b.n	8015154 <_malloc_r+0x6c>
 801521e:	4986      	ldr	r1, [pc, #536]	; (8015438 <_malloc_r+0x350>)
 8015220:	6857      	ldr	r7, [r2, #4]
 8015222:	4288      	cmp	r0, r1
 8015224:	d900      	bls.n	8015228 <_malloc_r+0x140>
 8015226:	e090      	b.n	801534a <_malloc_r+0x262>
 8015228:	08c3      	lsrs	r3, r0, #3
 801522a:	39ff      	subs	r1, #255	; 0xff
 801522c:	1098      	asrs	r0, r3, #2
 801522e:	39ff      	subs	r1, #255	; 0xff
 8015230:	4081      	lsls	r1, r0
 8015232:	00db      	lsls	r3, r3, #3
 8015234:	4339      	orrs	r1, r7
 8015236:	6051      	str	r1, [r2, #4]
 8015238:	189a      	adds	r2, r3, r2
 801523a:	6893      	ldr	r3, [r2, #8]
 801523c:	60e2      	str	r2, [r4, #12]
 801523e:	60a3      	str	r3, [r4, #8]
 8015240:	6094      	str	r4, [r2, #8]
 8015242:	60dc      	str	r4, [r3, #12]
 8015244:	4663      	mov	r3, ip
 8015246:	2201      	movs	r2, #1
 8015248:	4978      	ldr	r1, [pc, #480]	; (801542c <_malloc_r+0x344>)
 801524a:	109b      	asrs	r3, r3, #2
 801524c:	6848      	ldr	r0, [r1, #4]
 801524e:	409a      	lsls	r2, r3
 8015250:	4290      	cmp	r0, r2
 8015252:	d32d      	bcc.n	80152b0 <_malloc_r+0x1c8>
 8015254:	4202      	tst	r2, r0
 8015256:	d109      	bne.n	801526c <_malloc_r+0x184>
 8015258:	2303      	movs	r3, #3
 801525a:	4664      	mov	r4, ip
 801525c:	439c      	bics	r4, r3
 801525e:	0023      	movs	r3, r4
 8015260:	3304      	adds	r3, #4
 8015262:	469c      	mov	ip, r3
 8015264:	0052      	lsls	r2, r2, #1
 8015266:	4202      	tst	r2, r0
 8015268:	d100      	bne.n	801526c <_malloc_r+0x184>
 801526a:	e0a4      	b.n	80153b6 <_malloc_r+0x2ce>
 801526c:	4663      	mov	r3, ip
 801526e:	00db      	lsls	r3, r3, #3
 8015270:	18cb      	adds	r3, r1, r3
 8015272:	9303      	str	r3, [sp, #12]
 8015274:	001f      	movs	r7, r3
 8015276:	4663      	mov	r3, ip
 8015278:	9302      	str	r3, [sp, #8]
 801527a:	68fc      	ldr	r4, [r7, #12]
 801527c:	42bc      	cmp	r4, r7
 801527e:	d000      	beq.n	8015282 <_malloc_r+0x19a>
 8015280:	e09c      	b.n	80153bc <_malloc_r+0x2d4>
 8015282:	2003      	movs	r0, #3
 8015284:	9b02      	ldr	r3, [sp, #8]
 8015286:	3708      	adds	r7, #8
 8015288:	3301      	adds	r3, #1
 801528a:	9302      	str	r3, [sp, #8]
 801528c:	4203      	tst	r3, r0
 801528e:	d1f4      	bne.n	801527a <_malloc_r+0x192>
 8015290:	4663      	mov	r3, ip
 8015292:	2003      	movs	r0, #3
 8015294:	4203      	tst	r3, r0
 8015296:	d000      	beq.n	801529a <_malloc_r+0x1b2>
 8015298:	e0b3      	b.n	8015402 <_malloc_r+0x31a>
 801529a:	684b      	ldr	r3, [r1, #4]
 801529c:	4393      	bics	r3, r2
 801529e:	604b      	str	r3, [r1, #4]
 80152a0:	4b62      	ldr	r3, [pc, #392]	; (801542c <_malloc_r+0x344>)
 80152a2:	0052      	lsls	r2, r2, #1
 80152a4:	685b      	ldr	r3, [r3, #4]
 80152a6:	4293      	cmp	r3, r2
 80152a8:	d302      	bcc.n	80152b0 <_malloc_r+0x1c8>
 80152aa:	2a00      	cmp	r2, #0
 80152ac:	d000      	beq.n	80152b0 <_malloc_r+0x1c8>
 80152ae:	e0b9      	b.n	8015424 <_malloc_r+0x33c>
 80152b0:	2303      	movs	r3, #3
 80152b2:	688f      	ldr	r7, [r1, #8]
 80152b4:	687a      	ldr	r2, [r7, #4]
 80152b6:	439a      	bics	r2, r3
 80152b8:	9202      	str	r2, [sp, #8]
 80152ba:	42aa      	cmp	r2, r5
 80152bc:	d303      	bcc.n	80152c6 <_malloc_r+0x1de>
 80152be:	1b52      	subs	r2, r2, r5
 80152c0:	2a0f      	cmp	r2, #15
 80152c2:	dd00      	ble.n	80152c6 <_malloc_r+0x1de>
 80152c4:	e116      	b.n	80154f4 <_malloc_r+0x40c>
 80152c6:	4b5d      	ldr	r3, [pc, #372]	; (801543c <_malloc_r+0x354>)
 80152c8:	2008      	movs	r0, #8
 80152ca:	681e      	ldr	r6, [r3, #0]
 80152cc:	f002 fd26 	bl	8017d1c <sysconf>
 80152d0:	4b5b      	ldr	r3, [pc, #364]	; (8015440 <_malloc_r+0x358>)
 80152d2:	3610      	adds	r6, #16
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	1976      	adds	r6, r6, r5
 80152d8:	9003      	str	r0, [sp, #12]
 80152da:	3301      	adds	r3, #1
 80152dc:	d003      	beq.n	80152e6 <_malloc_r+0x1fe>
 80152de:	3e01      	subs	r6, #1
 80152e0:	1836      	adds	r6, r6, r0
 80152e2:	4243      	negs	r3, r0
 80152e4:	401e      	ands	r6, r3
 80152e6:	0031      	movs	r1, r6
 80152e8:	9801      	ldr	r0, [sp, #4]
 80152ea:	f000 fb27 	bl	801593c <_sbrk_r>
 80152ee:	0004      	movs	r4, r0
 80152f0:	1c43      	adds	r3, r0, #1
 80152f2:	d100      	bne.n	80152f6 <_malloc_r+0x20e>
 80152f4:	e0d6      	b.n	80154a4 <_malloc_r+0x3bc>
 80152f6:	9b02      	ldr	r3, [sp, #8]
 80152f8:	18fb      	adds	r3, r7, r3
 80152fa:	4283      	cmp	r3, r0
 80152fc:	d903      	bls.n	8015306 <_malloc_r+0x21e>
 80152fe:	4a4b      	ldr	r2, [pc, #300]	; (801542c <_malloc_r+0x344>)
 8015300:	4297      	cmp	r7, r2
 8015302:	d000      	beq.n	8015306 <_malloc_r+0x21e>
 8015304:	e0ce      	b.n	80154a4 <_malloc_r+0x3bc>
 8015306:	494f      	ldr	r1, [pc, #316]	; (8015444 <_malloc_r+0x35c>)
 8015308:	680a      	ldr	r2, [r1, #0]
 801530a:	18b2      	adds	r2, r6, r2
 801530c:	600a      	str	r2, [r1, #0]
 801530e:	9903      	ldr	r1, [sp, #12]
 8015310:	4694      	mov	ip, r2
 8015312:	1e48      	subs	r0, r1, #1
 8015314:	42a3      	cmp	r3, r4
 8015316:	d000      	beq.n	801531a <_malloc_r+0x232>
 8015318:	e09a      	b.n	8015450 <_malloc_r+0x368>
 801531a:	4203      	tst	r3, r0
 801531c:	d000      	beq.n	8015320 <_malloc_r+0x238>
 801531e:	e097      	b.n	8015450 <_malloc_r+0x368>
 8015320:	9a02      	ldr	r2, [sp, #8]
 8015322:	4b42      	ldr	r3, [pc, #264]	; (801542c <_malloc_r+0x344>)
 8015324:	1992      	adds	r2, r2, r6
 8015326:	2601      	movs	r6, #1
 8015328:	689b      	ldr	r3, [r3, #8]
 801532a:	4316      	orrs	r6, r2
 801532c:	605e      	str	r6, [r3, #4]
 801532e:	4b45      	ldr	r3, [pc, #276]	; (8015444 <_malloc_r+0x35c>)
 8015330:	4a45      	ldr	r2, [pc, #276]	; (8015448 <_malloc_r+0x360>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	6811      	ldr	r1, [r2, #0]
 8015336:	428b      	cmp	r3, r1
 8015338:	d900      	bls.n	801533c <_malloc_r+0x254>
 801533a:	6013      	str	r3, [r2, #0]
 801533c:	4a43      	ldr	r2, [pc, #268]	; (801544c <_malloc_r+0x364>)
 801533e:	6811      	ldr	r1, [r2, #0]
 8015340:	428b      	cmp	r3, r1
 8015342:	d800      	bhi.n	8015346 <_malloc_r+0x25e>
 8015344:	e0ae      	b.n	80154a4 <_malloc_r+0x3bc>
 8015346:	6013      	str	r3, [r2, #0]
 8015348:	e0ac      	b.n	80154a4 <_malloc_r+0x3bc>
 801534a:	0a40      	lsrs	r0, r0, #9
 801534c:	2804      	cmp	r0, #4
 801534e:	d810      	bhi.n	8015372 <_malloc_r+0x28a>
 8015350:	0999      	lsrs	r1, r3, #6
 8015352:	3138      	adds	r1, #56	; 0x38
 8015354:	00ce      	lsls	r6, r1, #3
 8015356:	18b6      	adds	r6, r6, r2
 8015358:	68b0      	ldr	r0, [r6, #8]
 801535a:	4286      	cmp	r6, r0
 801535c:	d124      	bne.n	80153a8 <_malloc_r+0x2c0>
 801535e:	2301      	movs	r3, #1
 8015360:	1089      	asrs	r1, r1, #2
 8015362:	408b      	lsls	r3, r1
 8015364:	433b      	orrs	r3, r7
 8015366:	6053      	str	r3, [r2, #4]
 8015368:	60e6      	str	r6, [r4, #12]
 801536a:	60a0      	str	r0, [r4, #8]
 801536c:	60b4      	str	r4, [r6, #8]
 801536e:	60c4      	str	r4, [r0, #12]
 8015370:	e768      	b.n	8015244 <_malloc_r+0x15c>
 8015372:	2814      	cmp	r0, #20
 8015374:	d802      	bhi.n	801537c <_malloc_r+0x294>
 8015376:	0001      	movs	r1, r0
 8015378:	315b      	adds	r1, #91	; 0x5b
 801537a:	e7eb      	b.n	8015354 <_malloc_r+0x26c>
 801537c:	2854      	cmp	r0, #84	; 0x54
 801537e:	d802      	bhi.n	8015386 <_malloc_r+0x29e>
 8015380:	0b19      	lsrs	r1, r3, #12
 8015382:	316e      	adds	r1, #110	; 0x6e
 8015384:	e7e6      	b.n	8015354 <_malloc_r+0x26c>
 8015386:	21aa      	movs	r1, #170	; 0xaa
 8015388:	0049      	lsls	r1, r1, #1
 801538a:	4288      	cmp	r0, r1
 801538c:	d802      	bhi.n	8015394 <_malloc_r+0x2ac>
 801538e:	0bd9      	lsrs	r1, r3, #15
 8015390:	3177      	adds	r1, #119	; 0x77
 8015392:	e7df      	b.n	8015354 <_malloc_r+0x26c>
 8015394:	4e27      	ldr	r6, [pc, #156]	; (8015434 <_malloc_r+0x34c>)
 8015396:	217e      	movs	r1, #126	; 0x7e
 8015398:	42b0      	cmp	r0, r6
 801539a:	d8db      	bhi.n	8015354 <_malloc_r+0x26c>
 801539c:	0c99      	lsrs	r1, r3, #18
 801539e:	317c      	adds	r1, #124	; 0x7c
 80153a0:	e7d8      	b.n	8015354 <_malloc_r+0x26c>
 80153a2:	6880      	ldr	r0, [r0, #8]
 80153a4:	4286      	cmp	r6, r0
 80153a6:	d004      	beq.n	80153b2 <_malloc_r+0x2ca>
 80153a8:	2103      	movs	r1, #3
 80153aa:	6842      	ldr	r2, [r0, #4]
 80153ac:	438a      	bics	r2, r1
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d8f7      	bhi.n	80153a2 <_malloc_r+0x2ba>
 80153b2:	68c6      	ldr	r6, [r0, #12]
 80153b4:	e7d8      	b.n	8015368 <_malloc_r+0x280>
 80153b6:	2304      	movs	r3, #4
 80153b8:	449c      	add	ip, r3
 80153ba:	e753      	b.n	8015264 <_malloc_r+0x17c>
 80153bc:	2003      	movs	r0, #3
 80153be:	6863      	ldr	r3, [r4, #4]
 80153c0:	4383      	bics	r3, r0
 80153c2:	1b5e      	subs	r6, r3, r5
 80153c4:	68e0      	ldr	r0, [r4, #12]
 80153c6:	2e0f      	cmp	r6, #15
 80153c8:	dd0e      	ble.n	80153e8 <_malloc_r+0x300>
 80153ca:	2701      	movs	r7, #1
 80153cc:	1962      	adds	r2, r4, r5
 80153ce:	433d      	orrs	r5, r7
 80153d0:	6065      	str	r5, [r4, #4]
 80153d2:	68a5      	ldr	r5, [r4, #8]
 80153d4:	4337      	orrs	r7, r6
 80153d6:	60e8      	str	r0, [r5, #12]
 80153d8:	6085      	str	r5, [r0, #8]
 80153da:	614a      	str	r2, [r1, #20]
 80153dc:	610a      	str	r2, [r1, #16]
 80153de:	4914      	ldr	r1, [pc, #80]	; (8015430 <_malloc_r+0x348>)
 80153e0:	6057      	str	r7, [r2, #4]
 80153e2:	60d1      	str	r1, [r2, #12]
 80153e4:	6091      	str	r1, [r2, #8]
 80153e6:	e6e8      	b.n	80151ba <_malloc_r+0xd2>
 80153e8:	2e00      	cmp	r6, #0
 80153ea:	db08      	blt.n	80153fe <_malloc_r+0x316>
 80153ec:	2201      	movs	r2, #1
 80153ee:	18e3      	adds	r3, r4, r3
 80153f0:	6859      	ldr	r1, [r3, #4]
 80153f2:	430a      	orrs	r2, r1
 80153f4:	605a      	str	r2, [r3, #4]
 80153f6:	68a3      	ldr	r3, [r4, #8]
 80153f8:	60d8      	str	r0, [r3, #12]
 80153fa:	6083      	str	r3, [r0, #8]
 80153fc:	e6aa      	b.n	8015154 <_malloc_r+0x6c>
 80153fe:	0004      	movs	r4, r0
 8015400:	e73c      	b.n	801527c <_malloc_r+0x194>
 8015402:	2301      	movs	r3, #1
 8015404:	425b      	negs	r3, r3
 8015406:	449c      	add	ip, r3
 8015408:	9b03      	ldr	r3, [sp, #12]
 801540a:	6818      	ldr	r0, [r3, #0]
 801540c:	3b08      	subs	r3, #8
 801540e:	9003      	str	r0, [sp, #12]
 8015410:	4298      	cmp	r0, r3
 8015412:	d100      	bne.n	8015416 <_malloc_r+0x32e>
 8015414:	e73c      	b.n	8015290 <_malloc_r+0x1a8>
 8015416:	e743      	b.n	80152a0 <_malloc_r+0x1b8>
 8015418:	2004      	movs	r0, #4
 801541a:	0052      	lsls	r2, r2, #1
 801541c:	4484      	add	ip, r0
 801541e:	421a      	tst	r2, r3
 8015420:	d0fa      	beq.n	8015418 <_malloc_r+0x330>
 8015422:	e723      	b.n	801526c <_malloc_r+0x184>
 8015424:	9802      	ldr	r0, [sp, #8]
 8015426:	4684      	mov	ip, r0
 8015428:	e7f9      	b.n	801541e <_malloc_r+0x336>
 801542a:	46c0      	nop			; (mov r8, r8)
 801542c:	20000674 	.word	0x20000674
 8015430:	2000067c 	.word	0x2000067c
 8015434:	00000554 	.word	0x00000554
 8015438:	000001ff 	.word	0x000001ff
 801543c:	20006fc0 	.word	0x20006fc0
 8015440:	20000a7c 	.word	0x20000a7c
 8015444:	20006f90 	.word	0x20006f90
 8015448:	20006fb8 	.word	0x20006fb8
 801544c:	20006fbc 	.word	0x20006fbc
 8015450:	492e      	ldr	r1, [pc, #184]	; (801550c <_malloc_r+0x424>)
 8015452:	680a      	ldr	r2, [r1, #0]
 8015454:	3201      	adds	r2, #1
 8015456:	d133      	bne.n	80154c0 <_malloc_r+0x3d8>
 8015458:	600c      	str	r4, [r1, #0]
 801545a:	2307      	movs	r3, #7
 801545c:	4023      	ands	r3, r4
 801545e:	d002      	beq.n	8015466 <_malloc_r+0x37e>
 8015460:	2208      	movs	r2, #8
 8015462:	1ad3      	subs	r3, r2, r3
 8015464:	18e4      	adds	r4, r4, r3
 8015466:	9a03      	ldr	r2, [sp, #12]
 8015468:	19a6      	adds	r6, r4, r6
 801546a:	18d3      	adds	r3, r2, r3
 801546c:	4006      	ands	r6, r0
 801546e:	1b9e      	subs	r6, r3, r6
 8015470:	0031      	movs	r1, r6
 8015472:	9801      	ldr	r0, [sp, #4]
 8015474:	f000 fa62 	bl	801593c <_sbrk_r>
 8015478:	1c43      	adds	r3, r0, #1
 801547a:	d101      	bne.n	8015480 <_malloc_r+0x398>
 801547c:	0020      	movs	r0, r4
 801547e:	2600      	movs	r6, #0
 8015480:	4a23      	ldr	r2, [pc, #140]	; (8015510 <_malloc_r+0x428>)
 8015482:	1b00      	subs	r0, r0, r4
 8015484:	6813      	ldr	r3, [r2, #0]
 8015486:	199b      	adds	r3, r3, r6
 8015488:	6013      	str	r3, [r2, #0]
 801548a:	2301      	movs	r3, #1
 801548c:	4a21      	ldr	r2, [pc, #132]	; (8015514 <_malloc_r+0x42c>)
 801548e:	1986      	adds	r6, r0, r6
 8015490:	431e      	orrs	r6, r3
 8015492:	6094      	str	r4, [r2, #8]
 8015494:	6066      	str	r6, [r4, #4]
 8015496:	4297      	cmp	r7, r2
 8015498:	d100      	bne.n	801549c <_malloc_r+0x3b4>
 801549a:	e748      	b.n	801532e <_malloc_r+0x246>
 801549c:	9a02      	ldr	r2, [sp, #8]
 801549e:	2a0f      	cmp	r2, #15
 80154a0:	d813      	bhi.n	80154ca <_malloc_r+0x3e2>
 80154a2:	6063      	str	r3, [r4, #4]
 80154a4:	2203      	movs	r2, #3
 80154a6:	4b1b      	ldr	r3, [pc, #108]	; (8015514 <_malloc_r+0x42c>)
 80154a8:	689b      	ldr	r3, [r3, #8]
 80154aa:	685b      	ldr	r3, [r3, #4]
 80154ac:	4393      	bics	r3, r2
 80154ae:	1b5a      	subs	r2, r3, r5
 80154b0:	42ab      	cmp	r3, r5
 80154b2:	d301      	bcc.n	80154b8 <_malloc_r+0x3d0>
 80154b4:	2a0f      	cmp	r2, #15
 80154b6:	dc1d      	bgt.n	80154f4 <_malloc_r+0x40c>
 80154b8:	9801      	ldr	r0, [sp, #4]
 80154ba:	f000 f867 	bl	801558c <__malloc_unlock>
 80154be:	e620      	b.n	8015102 <_malloc_r+0x1a>
 80154c0:	1ae3      	subs	r3, r4, r3
 80154c2:	4a13      	ldr	r2, [pc, #76]	; (8015510 <_malloc_r+0x428>)
 80154c4:	4463      	add	r3, ip
 80154c6:	6013      	str	r3, [r2, #0]
 80154c8:	e7c7      	b.n	801545a <_malloc_r+0x372>
 80154ca:	2207      	movs	r2, #7
 80154cc:	9e02      	ldr	r6, [sp, #8]
 80154ce:	3e0c      	subs	r6, #12
 80154d0:	4396      	bics	r6, r2
 80154d2:	687a      	ldr	r2, [r7, #4]
 80154d4:	4013      	ands	r3, r2
 80154d6:	2205      	movs	r2, #5
 80154d8:	4333      	orrs	r3, r6
 80154da:	607b      	str	r3, [r7, #4]
 80154dc:	19bb      	adds	r3, r7, r6
 80154de:	605a      	str	r2, [r3, #4]
 80154e0:	609a      	str	r2, [r3, #8]
 80154e2:	2e0f      	cmp	r6, #15
 80154e4:	d800      	bhi.n	80154e8 <_malloc_r+0x400>
 80154e6:	e722      	b.n	801532e <_malloc_r+0x246>
 80154e8:	0039      	movs	r1, r7
 80154ea:	9801      	ldr	r0, [sp, #4]
 80154ec:	3108      	adds	r1, #8
 80154ee:	f003 fb07 	bl	8018b00 <_free_r>
 80154f2:	e71c      	b.n	801532e <_malloc_r+0x246>
 80154f4:	2301      	movs	r3, #1
 80154f6:	0018      	movs	r0, r3
 80154f8:	4906      	ldr	r1, [pc, #24]	; (8015514 <_malloc_r+0x42c>)
 80154fa:	4328      	orrs	r0, r5
 80154fc:	688c      	ldr	r4, [r1, #8]
 80154fe:	4313      	orrs	r3, r2
 8015500:	1965      	adds	r5, r4, r5
 8015502:	6060      	str	r0, [r4, #4]
 8015504:	608d      	str	r5, [r1, #8]
 8015506:	606b      	str	r3, [r5, #4]
 8015508:	e624      	b.n	8015154 <_malloc_r+0x6c>
 801550a:	46c0      	nop			; (mov r8, r8)
 801550c:	20000a7c 	.word	0x20000a7c
 8015510:	20006f90 	.word	0x20006f90
 8015514:	20000674 	.word	0x20000674

08015518 <__ascii_mbtowc>:
 8015518:	b082      	sub	sp, #8
 801551a:	2900      	cmp	r1, #0
 801551c:	d100      	bne.n	8015520 <__ascii_mbtowc+0x8>
 801551e:	a901      	add	r1, sp, #4
 8015520:	1e10      	subs	r0, r2, #0
 8015522:	d006      	beq.n	8015532 <__ascii_mbtowc+0x1a>
 8015524:	2b00      	cmp	r3, #0
 8015526:	d006      	beq.n	8015536 <__ascii_mbtowc+0x1e>
 8015528:	7813      	ldrb	r3, [r2, #0]
 801552a:	600b      	str	r3, [r1, #0]
 801552c:	7810      	ldrb	r0, [r2, #0]
 801552e:	1e43      	subs	r3, r0, #1
 8015530:	4198      	sbcs	r0, r3
 8015532:	b002      	add	sp, #8
 8015534:	4770      	bx	lr
 8015536:	2002      	movs	r0, #2
 8015538:	4240      	negs	r0, r0
 801553a:	e7fa      	b.n	8015532 <__ascii_mbtowc+0x1a>

0801553c <memcmp>:
 801553c:	b530      	push	{r4, r5, lr}
 801553e:	2400      	movs	r4, #0
 8015540:	42a2      	cmp	r2, r4
 8015542:	d101      	bne.n	8015548 <memcmp+0xc>
 8015544:	2000      	movs	r0, #0
 8015546:	e005      	b.n	8015554 <memcmp+0x18>
 8015548:	5d03      	ldrb	r3, [r0, r4]
 801554a:	1c65      	adds	r5, r4, #1
 801554c:	5d0c      	ldrb	r4, [r1, r4]
 801554e:	42a3      	cmp	r3, r4
 8015550:	d001      	beq.n	8015556 <memcmp+0x1a>
 8015552:	1b18      	subs	r0, r3, r4
 8015554:	bd30      	pop	{r4, r5, pc}
 8015556:	002c      	movs	r4, r5
 8015558:	e7f2      	b.n	8015540 <memcmp+0x4>

0801555a <memcpy>:
 801555a:	2300      	movs	r3, #0
 801555c:	b510      	push	{r4, lr}
 801555e:	429a      	cmp	r2, r3
 8015560:	d100      	bne.n	8015564 <memcpy+0xa>
 8015562:	bd10      	pop	{r4, pc}
 8015564:	5ccc      	ldrb	r4, [r1, r3]
 8015566:	54c4      	strb	r4, [r0, r3]
 8015568:	3301      	adds	r3, #1
 801556a:	e7f8      	b.n	801555e <memcpy+0x4>

0801556c <memset>:
 801556c:	0003      	movs	r3, r0
 801556e:	1812      	adds	r2, r2, r0
 8015570:	4293      	cmp	r3, r2
 8015572:	d100      	bne.n	8015576 <memset+0xa>
 8015574:	4770      	bx	lr
 8015576:	7019      	strb	r1, [r3, #0]
 8015578:	3301      	adds	r3, #1
 801557a:	e7f9      	b.n	8015570 <memset+0x4>

0801557c <__malloc_lock>:
 801557c:	b510      	push	{r4, lr}
 801557e:	4802      	ldr	r0, [pc, #8]	; (8015588 <__malloc_lock+0xc>)
 8015580:	f003 feb2 	bl	80192e8 <__retarget_lock_acquire_recursive>
 8015584:	bd10      	pop	{r4, pc}
 8015586:	46c0      	nop			; (mov r8, r8)
 8015588:	2000757c 	.word	0x2000757c

0801558c <__malloc_unlock>:
 801558c:	b510      	push	{r4, lr}
 801558e:	4802      	ldr	r0, [pc, #8]	; (8015598 <__malloc_unlock+0xc>)
 8015590:	f003 feab 	bl	80192ea <__retarget_lock_release_recursive>
 8015594:	bd10      	pop	{r4, pc}
 8015596:	46c0      	nop			; (mov r8, r8)
 8015598:	2000757c 	.word	0x2000757c

0801559c <rand>:
 801559c:	4b09      	ldr	r3, [pc, #36]	; (80155c4 <rand+0x28>)
 801559e:	b510      	push	{r4, lr}
 80155a0:	681c      	ldr	r4, [r3, #0]
 80155a2:	4a09      	ldr	r2, [pc, #36]	; (80155c8 <rand+0x2c>)
 80155a4:	34a8      	adds	r4, #168	; 0xa8
 80155a6:	6820      	ldr	r0, [r4, #0]
 80155a8:	6861      	ldr	r1, [r4, #4]
 80155aa:	4b08      	ldr	r3, [pc, #32]	; (80155cc <rand+0x30>)
 80155ac:	f7ea ffe8 	bl	8000580 <__aeabi_lmul>
 80155b0:	2201      	movs	r2, #1
 80155b2:	2300      	movs	r3, #0
 80155b4:	1880      	adds	r0, r0, r2
 80155b6:	4159      	adcs	r1, r3
 80155b8:	6020      	str	r0, [r4, #0]
 80155ba:	6061      	str	r1, [r4, #4]
 80155bc:	0048      	lsls	r0, r1, #1
 80155be:	0840      	lsrs	r0, r0, #1
 80155c0:	bd10      	pop	{r4, pc}
 80155c2:	46c0      	nop			; (mov r8, r8)
 80155c4:	200000d8 	.word	0x200000d8
 80155c8:	4c957f2d 	.word	0x4c957f2d
 80155cc:	5851f42d 	.word	0x5851f42d

080155d0 <realloc>:
 80155d0:	b510      	push	{r4, lr}
 80155d2:	4b03      	ldr	r3, [pc, #12]	; (80155e0 <realloc+0x10>)
 80155d4:	000a      	movs	r2, r1
 80155d6:	0001      	movs	r1, r0
 80155d8:	6818      	ldr	r0, [r3, #0]
 80155da:	f000 f803 	bl	80155e4 <_realloc_r>
 80155de:	bd10      	pop	{r4, pc}
 80155e0:	200000d8 	.word	0x200000d8

080155e4 <_realloc_r>:
 80155e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155e6:	b087      	sub	sp, #28
 80155e8:	9003      	str	r0, [sp, #12]
 80155ea:	1e0c      	subs	r4, r1, #0
 80155ec:	9205      	str	r2, [sp, #20]
 80155ee:	d106      	bne.n	80155fe <_realloc_r+0x1a>
 80155f0:	0011      	movs	r1, r2
 80155f2:	f7ff fd79 	bl	80150e8 <_malloc_r>
 80155f6:	0007      	movs	r7, r0
 80155f8:	0038      	movs	r0, r7
 80155fa:	b007      	add	sp, #28
 80155fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155fe:	9803      	ldr	r0, [sp, #12]
 8015600:	f7ff ffbc 	bl	801557c <__malloc_lock>
 8015604:	0023      	movs	r3, r4
 8015606:	3b08      	subs	r3, #8
 8015608:	685f      	ldr	r7, [r3, #4]
 801560a:	9302      	str	r3, [sp, #8]
 801560c:	003a      	movs	r2, r7
 801560e:	2303      	movs	r3, #3
 8015610:	9e05      	ldr	r6, [sp, #20]
 8015612:	439a      	bics	r2, r3
 8015614:	360b      	adds	r6, #11
 8015616:	9204      	str	r2, [sp, #16]
 8015618:	2e16      	cmp	r6, #22
 801561a:	d908      	bls.n	801562e <_realloc_r+0x4a>
 801561c:	3304      	adds	r3, #4
 801561e:	439e      	bics	r6, r3
 8015620:	9601      	str	r6, [sp, #4]
 8015622:	d506      	bpl.n	8015632 <_realloc_r+0x4e>
 8015624:	230c      	movs	r3, #12
 8015626:	9a03      	ldr	r2, [sp, #12]
 8015628:	2700      	movs	r7, #0
 801562a:	6013      	str	r3, [r2, #0]
 801562c:	e7e4      	b.n	80155f8 <_realloc_r+0x14>
 801562e:	2310      	movs	r3, #16
 8015630:	9301      	str	r3, [sp, #4]
 8015632:	9b01      	ldr	r3, [sp, #4]
 8015634:	9a05      	ldr	r2, [sp, #20]
 8015636:	4293      	cmp	r3, r2
 8015638:	d3f4      	bcc.n	8015624 <_realloc_r+0x40>
 801563a:	9b01      	ldr	r3, [sp, #4]
 801563c:	9a04      	ldr	r2, [sp, #16]
 801563e:	4293      	cmp	r3, r2
 8015640:	dc00      	bgt.n	8015644 <_realloc_r+0x60>
 8015642:	e16f      	b.n	8015924 <_realloc_r+0x340>
 8015644:	9b02      	ldr	r3, [sp, #8]
 8015646:	48bc      	ldr	r0, [pc, #752]	; (8015938 <_realloc_r+0x354>)
 8015648:	189b      	adds	r3, r3, r2
 801564a:	6882      	ldr	r2, [r0, #8]
 801564c:	4694      	mov	ip, r2
 801564e:	685a      	ldr	r2, [r3, #4]
 8015650:	459c      	cmp	ip, r3
 8015652:	d006      	beq.n	8015662 <_realloc_r+0x7e>
 8015654:	2501      	movs	r5, #1
 8015656:	0011      	movs	r1, r2
 8015658:	43a9      	bics	r1, r5
 801565a:	1859      	adds	r1, r3, r1
 801565c:	6849      	ldr	r1, [r1, #4]
 801565e:	4229      	tst	r1, r5
 8015660:	d146      	bne.n	80156f0 <_realloc_r+0x10c>
 8015662:	2103      	movs	r1, #3
 8015664:	438a      	bics	r2, r1
 8015666:	9904      	ldr	r1, [sp, #16]
 8015668:	188e      	adds	r6, r1, r2
 801566a:	9901      	ldr	r1, [sp, #4]
 801566c:	459c      	cmp	ip, r3
 801566e:	d117      	bne.n	80156a0 <_realloc_r+0xbc>
 8015670:	3110      	adds	r1, #16
 8015672:	42b1      	cmp	r1, r6
 8015674:	dc3e      	bgt.n	80156f4 <_realloc_r+0x110>
 8015676:	9901      	ldr	r1, [sp, #4]
 8015678:	9b02      	ldr	r3, [sp, #8]
 801567a:	468c      	mov	ip, r1
 801567c:	4463      	add	r3, ip
 801567e:	6083      	str	r3, [r0, #8]
 8015680:	001a      	movs	r2, r3
 8015682:	1a73      	subs	r3, r6, r1
 8015684:	2601      	movs	r6, #1
 8015686:	4333      	orrs	r3, r6
 8015688:	6053      	str	r3, [r2, #4]
 801568a:	0023      	movs	r3, r4
 801568c:	3b08      	subs	r3, #8
 801568e:	685a      	ldr	r2, [r3, #4]
 8015690:	9803      	ldr	r0, [sp, #12]
 8015692:	4016      	ands	r6, r2
 8015694:	430e      	orrs	r6, r1
 8015696:	605e      	str	r6, [r3, #4]
 8015698:	f7ff ff78 	bl	801558c <__malloc_unlock>
 801569c:	0027      	movs	r7, r4
 801569e:	e7ab      	b.n	80155f8 <_realloc_r+0x14>
 80156a0:	42b1      	cmp	r1, r6
 80156a2:	dc27      	bgt.n	80156f4 <_realloc_r+0x110>
 80156a4:	68da      	ldr	r2, [r3, #12]
 80156a6:	689b      	ldr	r3, [r3, #8]
 80156a8:	60da      	str	r2, [r3, #12]
 80156aa:	6093      	str	r3, [r2, #8]
 80156ac:	9b01      	ldr	r3, [sp, #4]
 80156ae:	9a02      	ldr	r2, [sp, #8]
 80156b0:	1af4      	subs	r4, r6, r3
 80156b2:	9b02      	ldr	r3, [sp, #8]
 80156b4:	1992      	adds	r2, r2, r6
 80156b6:	685b      	ldr	r3, [r3, #4]
 80156b8:	9304      	str	r3, [sp, #16]
 80156ba:	2301      	movs	r3, #1
 80156bc:	9804      	ldr	r0, [sp, #16]
 80156be:	4018      	ands	r0, r3
 80156c0:	2c0f      	cmp	r4, #15
 80156c2:	d800      	bhi.n	80156c6 <_realloc_r+0xe2>
 80156c4:	e130      	b.n	8015928 <_realloc_r+0x344>
 80156c6:	9d01      	ldr	r5, [sp, #4]
 80156c8:	9902      	ldr	r1, [sp, #8]
 80156ca:	4328      	orrs	r0, r5
 80156cc:	1949      	adds	r1, r1, r5
 80156ce:	9d02      	ldr	r5, [sp, #8]
 80156d0:	431c      	orrs	r4, r3
 80156d2:	6068      	str	r0, [r5, #4]
 80156d4:	604c      	str	r4, [r1, #4]
 80156d6:	6850      	ldr	r0, [r2, #4]
 80156d8:	3108      	adds	r1, #8
 80156da:	4303      	orrs	r3, r0
 80156dc:	6053      	str	r3, [r2, #4]
 80156de:	9803      	ldr	r0, [sp, #12]
 80156e0:	f003 fa0e 	bl	8018b00 <_free_r>
 80156e4:	9803      	ldr	r0, [sp, #12]
 80156e6:	f7ff ff51 	bl	801558c <__malloc_unlock>
 80156ea:	9f02      	ldr	r7, [sp, #8]
 80156ec:	3708      	adds	r7, #8
 80156ee:	e783      	b.n	80155f8 <_realloc_r+0x14>
 80156f0:	2200      	movs	r2, #0
 80156f2:	0013      	movs	r3, r2
 80156f4:	07f9      	lsls	r1, r7, #31
 80156f6:	d500      	bpl.n	80156fa <_realloc_r+0x116>
 80156f8:	e0c6      	b.n	8015888 <_realloc_r+0x2a4>
 80156fa:	0021      	movs	r1, r4
 80156fc:	3908      	subs	r1, #8
 80156fe:	680d      	ldr	r5, [r1, #0]
 8015700:	9902      	ldr	r1, [sp, #8]
 8015702:	1b4d      	subs	r5, r1, r5
 8015704:	2103      	movs	r1, #3
 8015706:	686f      	ldr	r7, [r5, #4]
 8015708:	438f      	bics	r7, r1
 801570a:	9904      	ldr	r1, [sp, #16]
 801570c:	187f      	adds	r7, r7, r1
 801570e:	2b00      	cmp	r3, #0
 8015710:	d100      	bne.n	8015714 <_realloc_r+0x130>
 8015712:	e084      	b.n	801581e <_realloc_r+0x23a>
 8015714:	19d6      	adds	r6, r2, r7
 8015716:	459c      	cmp	ip, r3
 8015718:	d148      	bne.n	80157ac <_realloc_r+0x1c8>
 801571a:	9b01      	ldr	r3, [sp, #4]
 801571c:	3310      	adds	r3, #16
 801571e:	42b3      	cmp	r3, r6
 8015720:	dc7d      	bgt.n	801581e <_realloc_r+0x23a>
 8015722:	68aa      	ldr	r2, [r5, #8]
 8015724:	68eb      	ldr	r3, [r5, #12]
 8015726:	002f      	movs	r7, r5
 8015728:	60d3      	str	r3, [r2, #12]
 801572a:	609a      	str	r2, [r3, #8]
 801572c:	000a      	movs	r2, r1
 801572e:	3a04      	subs	r2, #4
 8015730:	3708      	adds	r7, #8
 8015732:	2a24      	cmp	r2, #36	; 0x24
 8015734:	d835      	bhi.n	80157a2 <_realloc_r+0x1be>
 8015736:	003b      	movs	r3, r7
 8015738:	2a13      	cmp	r2, #19
 801573a:	d908      	bls.n	801574e <_realloc_r+0x16a>
 801573c:	6823      	ldr	r3, [r4, #0]
 801573e:	60ab      	str	r3, [r5, #8]
 8015740:	6863      	ldr	r3, [r4, #4]
 8015742:	60eb      	str	r3, [r5, #12]
 8015744:	2a1b      	cmp	r2, #27
 8015746:	d81a      	bhi.n	801577e <_realloc_r+0x19a>
 8015748:	002b      	movs	r3, r5
 801574a:	3408      	adds	r4, #8
 801574c:	3310      	adds	r3, #16
 801574e:	6822      	ldr	r2, [r4, #0]
 8015750:	601a      	str	r2, [r3, #0]
 8015752:	6862      	ldr	r2, [r4, #4]
 8015754:	605a      	str	r2, [r3, #4]
 8015756:	68a2      	ldr	r2, [r4, #8]
 8015758:	609a      	str	r2, [r3, #8]
 801575a:	9b01      	ldr	r3, [sp, #4]
 801575c:	18ea      	adds	r2, r5, r3
 801575e:	4b76      	ldr	r3, [pc, #472]	; (8015938 <_realloc_r+0x354>)
 8015760:	609a      	str	r2, [r3, #8]
 8015762:	9b01      	ldr	r3, [sp, #4]
 8015764:	1af3      	subs	r3, r6, r3
 8015766:	2601      	movs	r6, #1
 8015768:	4333      	orrs	r3, r6
 801576a:	6053      	str	r3, [r2, #4]
 801576c:	686b      	ldr	r3, [r5, #4]
 801576e:	401e      	ands	r6, r3
 8015770:	9b01      	ldr	r3, [sp, #4]
 8015772:	431e      	orrs	r6, r3
 8015774:	606e      	str	r6, [r5, #4]
 8015776:	9803      	ldr	r0, [sp, #12]
 8015778:	f7ff ff08 	bl	801558c <__malloc_unlock>
 801577c:	e73c      	b.n	80155f8 <_realloc_r+0x14>
 801577e:	68a3      	ldr	r3, [r4, #8]
 8015780:	612b      	str	r3, [r5, #16]
 8015782:	68e3      	ldr	r3, [r4, #12]
 8015784:	616b      	str	r3, [r5, #20]
 8015786:	2a24      	cmp	r2, #36	; 0x24
 8015788:	d003      	beq.n	8015792 <_realloc_r+0x1ae>
 801578a:	002b      	movs	r3, r5
 801578c:	3410      	adds	r4, #16
 801578e:	3318      	adds	r3, #24
 8015790:	e7dd      	b.n	801574e <_realloc_r+0x16a>
 8015792:	6923      	ldr	r3, [r4, #16]
 8015794:	61ab      	str	r3, [r5, #24]
 8015796:	002b      	movs	r3, r5
 8015798:	6962      	ldr	r2, [r4, #20]
 801579a:	3320      	adds	r3, #32
 801579c:	61ea      	str	r2, [r5, #28]
 801579e:	3418      	adds	r4, #24
 80157a0:	e7d5      	b.n	801574e <_realloc_r+0x16a>
 80157a2:	0021      	movs	r1, r4
 80157a4:	0038      	movs	r0, r7
 80157a6:	f003 fdac 	bl	8019302 <memmove>
 80157aa:	e7d6      	b.n	801575a <_realloc_r+0x176>
 80157ac:	9a01      	ldr	r2, [sp, #4]
 80157ae:	42b2      	cmp	r2, r6
 80157b0:	dc35      	bgt.n	801581e <_realloc_r+0x23a>
 80157b2:	0028      	movs	r0, r5
 80157b4:	68da      	ldr	r2, [r3, #12]
 80157b6:	689b      	ldr	r3, [r3, #8]
 80157b8:	3008      	adds	r0, #8
 80157ba:	60da      	str	r2, [r3, #12]
 80157bc:	6093      	str	r3, [r2, #8]
 80157be:	68aa      	ldr	r2, [r5, #8]
 80157c0:	68eb      	ldr	r3, [r5, #12]
 80157c2:	60d3      	str	r3, [r2, #12]
 80157c4:	609a      	str	r2, [r3, #8]
 80157c6:	9a04      	ldr	r2, [sp, #16]
 80157c8:	3a04      	subs	r2, #4
 80157ca:	2a24      	cmp	r2, #36	; 0x24
 80157cc:	d823      	bhi.n	8015816 <_realloc_r+0x232>
 80157ce:	2a13      	cmp	r2, #19
 80157d0:	d907      	bls.n	80157e2 <_realloc_r+0x1fe>
 80157d2:	6823      	ldr	r3, [r4, #0]
 80157d4:	60ab      	str	r3, [r5, #8]
 80157d6:	6863      	ldr	r3, [r4, #4]
 80157d8:	60eb      	str	r3, [r5, #12]
 80157da:	2a1b      	cmp	r2, #27
 80157dc:	d809      	bhi.n	80157f2 <_realloc_r+0x20e>
 80157de:	3408      	adds	r4, #8
 80157e0:	3008      	adds	r0, #8
 80157e2:	6823      	ldr	r3, [r4, #0]
 80157e4:	6003      	str	r3, [r0, #0]
 80157e6:	6863      	ldr	r3, [r4, #4]
 80157e8:	6043      	str	r3, [r0, #4]
 80157ea:	68a3      	ldr	r3, [r4, #8]
 80157ec:	6083      	str	r3, [r0, #8]
 80157ee:	9502      	str	r5, [sp, #8]
 80157f0:	e75c      	b.n	80156ac <_realloc_r+0xc8>
 80157f2:	68a3      	ldr	r3, [r4, #8]
 80157f4:	612b      	str	r3, [r5, #16]
 80157f6:	68e3      	ldr	r3, [r4, #12]
 80157f8:	616b      	str	r3, [r5, #20]
 80157fa:	2a24      	cmp	r2, #36	; 0x24
 80157fc:	d003      	beq.n	8015806 <_realloc_r+0x222>
 80157fe:	0028      	movs	r0, r5
 8015800:	3410      	adds	r4, #16
 8015802:	3018      	adds	r0, #24
 8015804:	e7ed      	b.n	80157e2 <_realloc_r+0x1fe>
 8015806:	0028      	movs	r0, r5
 8015808:	6923      	ldr	r3, [r4, #16]
 801580a:	3020      	adds	r0, #32
 801580c:	61ab      	str	r3, [r5, #24]
 801580e:	6963      	ldr	r3, [r4, #20]
 8015810:	3418      	adds	r4, #24
 8015812:	61eb      	str	r3, [r5, #28]
 8015814:	e7e5      	b.n	80157e2 <_realloc_r+0x1fe>
 8015816:	0021      	movs	r1, r4
 8015818:	f003 fd73 	bl	8019302 <memmove>
 801581c:	e7e7      	b.n	80157ee <_realloc_r+0x20a>
 801581e:	9b01      	ldr	r3, [sp, #4]
 8015820:	42bb      	cmp	r3, r7
 8015822:	dc31      	bgt.n	8015888 <_realloc_r+0x2a4>
 8015824:	0028      	movs	r0, r5
 8015826:	68aa      	ldr	r2, [r5, #8]
 8015828:	68eb      	ldr	r3, [r5, #12]
 801582a:	3008      	adds	r0, #8
 801582c:	60d3      	str	r3, [r2, #12]
 801582e:	609a      	str	r2, [r3, #8]
 8015830:	9a04      	ldr	r2, [sp, #16]
 8015832:	3a04      	subs	r2, #4
 8015834:	2a24      	cmp	r2, #36	; 0x24
 8015836:	d823      	bhi.n	8015880 <_realloc_r+0x29c>
 8015838:	2a13      	cmp	r2, #19
 801583a:	d907      	bls.n	801584c <_realloc_r+0x268>
 801583c:	6823      	ldr	r3, [r4, #0]
 801583e:	60ab      	str	r3, [r5, #8]
 8015840:	6863      	ldr	r3, [r4, #4]
 8015842:	60eb      	str	r3, [r5, #12]
 8015844:	2a1b      	cmp	r2, #27
 8015846:	d809      	bhi.n	801585c <_realloc_r+0x278>
 8015848:	3408      	adds	r4, #8
 801584a:	3008      	adds	r0, #8
 801584c:	6823      	ldr	r3, [r4, #0]
 801584e:	6003      	str	r3, [r0, #0]
 8015850:	6863      	ldr	r3, [r4, #4]
 8015852:	6043      	str	r3, [r0, #4]
 8015854:	68a3      	ldr	r3, [r4, #8]
 8015856:	6083      	str	r3, [r0, #8]
 8015858:	003e      	movs	r6, r7
 801585a:	e7c8      	b.n	80157ee <_realloc_r+0x20a>
 801585c:	68a3      	ldr	r3, [r4, #8]
 801585e:	612b      	str	r3, [r5, #16]
 8015860:	68e3      	ldr	r3, [r4, #12]
 8015862:	616b      	str	r3, [r5, #20]
 8015864:	2a24      	cmp	r2, #36	; 0x24
 8015866:	d003      	beq.n	8015870 <_realloc_r+0x28c>
 8015868:	0028      	movs	r0, r5
 801586a:	3410      	adds	r4, #16
 801586c:	3018      	adds	r0, #24
 801586e:	e7ed      	b.n	801584c <_realloc_r+0x268>
 8015870:	0028      	movs	r0, r5
 8015872:	6923      	ldr	r3, [r4, #16]
 8015874:	3020      	adds	r0, #32
 8015876:	61ab      	str	r3, [r5, #24]
 8015878:	6963      	ldr	r3, [r4, #20]
 801587a:	3418      	adds	r4, #24
 801587c:	61eb      	str	r3, [r5, #28]
 801587e:	e7e5      	b.n	801584c <_realloc_r+0x268>
 8015880:	0021      	movs	r1, r4
 8015882:	f003 fd3e 	bl	8019302 <memmove>
 8015886:	e7e7      	b.n	8015858 <_realloc_r+0x274>
 8015888:	9905      	ldr	r1, [sp, #20]
 801588a:	9803      	ldr	r0, [sp, #12]
 801588c:	f7ff fc2c 	bl	80150e8 <_malloc_r>
 8015890:	1e07      	subs	r7, r0, #0
 8015892:	d100      	bne.n	8015896 <_realloc_r+0x2b2>
 8015894:	e76f      	b.n	8015776 <_realloc_r+0x192>
 8015896:	0023      	movs	r3, r4
 8015898:	2201      	movs	r2, #1
 801589a:	3b08      	subs	r3, #8
 801589c:	685b      	ldr	r3, [r3, #4]
 801589e:	4393      	bics	r3, r2
 80158a0:	9a02      	ldr	r2, [sp, #8]
 80158a2:	18d3      	adds	r3, r2, r3
 80158a4:	0002      	movs	r2, r0
 80158a6:	3a08      	subs	r2, #8
 80158a8:	4293      	cmp	r3, r2
 80158aa:	d105      	bne.n	80158b8 <_realloc_r+0x2d4>
 80158ac:	685e      	ldr	r6, [r3, #4]
 80158ae:	2303      	movs	r3, #3
 80158b0:	439e      	bics	r6, r3
 80158b2:	9b04      	ldr	r3, [sp, #16]
 80158b4:	18f6      	adds	r6, r6, r3
 80158b6:	e6f9      	b.n	80156ac <_realloc_r+0xc8>
 80158b8:	9a04      	ldr	r2, [sp, #16]
 80158ba:	3a04      	subs	r2, #4
 80158bc:	2a24      	cmp	r2, #36	; 0x24
 80158be:	d82d      	bhi.n	801591c <_realloc_r+0x338>
 80158c0:	2a13      	cmp	r2, #19
 80158c2:	d928      	bls.n	8015916 <_realloc_r+0x332>
 80158c4:	6823      	ldr	r3, [r4, #0]
 80158c6:	6003      	str	r3, [r0, #0]
 80158c8:	6863      	ldr	r3, [r4, #4]
 80158ca:	6043      	str	r3, [r0, #4]
 80158cc:	2a1b      	cmp	r2, #27
 80158ce:	d80e      	bhi.n	80158ee <_realloc_r+0x30a>
 80158d0:	0022      	movs	r2, r4
 80158d2:	0003      	movs	r3, r0
 80158d4:	3208      	adds	r2, #8
 80158d6:	3308      	adds	r3, #8
 80158d8:	6811      	ldr	r1, [r2, #0]
 80158da:	6019      	str	r1, [r3, #0]
 80158dc:	6851      	ldr	r1, [r2, #4]
 80158de:	6059      	str	r1, [r3, #4]
 80158e0:	6892      	ldr	r2, [r2, #8]
 80158e2:	609a      	str	r2, [r3, #8]
 80158e4:	0021      	movs	r1, r4
 80158e6:	9803      	ldr	r0, [sp, #12]
 80158e8:	f003 f90a 	bl	8018b00 <_free_r>
 80158ec:	e743      	b.n	8015776 <_realloc_r+0x192>
 80158ee:	68a3      	ldr	r3, [r4, #8]
 80158f0:	6083      	str	r3, [r0, #8]
 80158f2:	68e3      	ldr	r3, [r4, #12]
 80158f4:	60c3      	str	r3, [r0, #12]
 80158f6:	2a24      	cmp	r2, #36	; 0x24
 80158f8:	d004      	beq.n	8015904 <_realloc_r+0x320>
 80158fa:	0022      	movs	r2, r4
 80158fc:	0003      	movs	r3, r0
 80158fe:	3210      	adds	r2, #16
 8015900:	3310      	adds	r3, #16
 8015902:	e7e9      	b.n	80158d8 <_realloc_r+0x2f4>
 8015904:	6923      	ldr	r3, [r4, #16]
 8015906:	0022      	movs	r2, r4
 8015908:	6103      	str	r3, [r0, #16]
 801590a:	0003      	movs	r3, r0
 801590c:	6961      	ldr	r1, [r4, #20]
 801590e:	3218      	adds	r2, #24
 8015910:	3318      	adds	r3, #24
 8015912:	6141      	str	r1, [r0, #20]
 8015914:	e7e0      	b.n	80158d8 <_realloc_r+0x2f4>
 8015916:	0003      	movs	r3, r0
 8015918:	0022      	movs	r2, r4
 801591a:	e7dd      	b.n	80158d8 <_realloc_r+0x2f4>
 801591c:	0021      	movs	r1, r4
 801591e:	f003 fcf0 	bl	8019302 <memmove>
 8015922:	e7df      	b.n	80158e4 <_realloc_r+0x300>
 8015924:	9e04      	ldr	r6, [sp, #16]
 8015926:	e6c1      	b.n	80156ac <_realloc_r+0xc8>
 8015928:	9902      	ldr	r1, [sp, #8]
 801592a:	4306      	orrs	r6, r0
 801592c:	604e      	str	r6, [r1, #4]
 801592e:	6851      	ldr	r1, [r2, #4]
 8015930:	430b      	orrs	r3, r1
 8015932:	6053      	str	r3, [r2, #4]
 8015934:	e6d6      	b.n	80156e4 <_realloc_r+0x100>
 8015936:	46c0      	nop			; (mov r8, r8)
 8015938:	20000674 	.word	0x20000674

0801593c <_sbrk_r>:
 801593c:	2300      	movs	r3, #0
 801593e:	b570      	push	{r4, r5, r6, lr}
 8015940:	4c06      	ldr	r4, [pc, #24]	; (801595c <_sbrk_r+0x20>)
 8015942:	0005      	movs	r5, r0
 8015944:	0008      	movs	r0, r1
 8015946:	6023      	str	r3, [r4, #0]
 8015948:	f004 f9ec 	bl	8019d24 <_sbrk>
 801594c:	1c43      	adds	r3, r0, #1
 801594e:	d103      	bne.n	8015958 <_sbrk_r+0x1c>
 8015950:	6823      	ldr	r3, [r4, #0]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d000      	beq.n	8015958 <_sbrk_r+0x1c>
 8015956:	602b      	str	r3, [r5, #0]
 8015958:	bd70      	pop	{r4, r5, r6, pc}
 801595a:	46c0      	nop			; (mov r8, r8)
 801595c:	20007584 	.word	0x20007584

08015960 <sprintf>:
 8015960:	b40e      	push	{r1, r2, r3}
 8015962:	b500      	push	{lr}
 8015964:	490b      	ldr	r1, [pc, #44]	; (8015994 <sprintf+0x34>)
 8015966:	b09c      	sub	sp, #112	; 0x70
 8015968:	ab1d      	add	r3, sp, #116	; 0x74
 801596a:	9002      	str	r0, [sp, #8]
 801596c:	9006      	str	r0, [sp, #24]
 801596e:	9107      	str	r1, [sp, #28]
 8015970:	9104      	str	r1, [sp, #16]
 8015972:	4809      	ldr	r0, [pc, #36]	; (8015998 <sprintf+0x38>)
 8015974:	4909      	ldr	r1, [pc, #36]	; (801599c <sprintf+0x3c>)
 8015976:	cb04      	ldmia	r3!, {r2}
 8015978:	9105      	str	r1, [sp, #20]
 801597a:	6800      	ldr	r0, [r0, #0]
 801597c:	a902      	add	r1, sp, #8
 801597e:	9301      	str	r3, [sp, #4]
 8015980:	f000 ff78 	bl	8016874 <_svfprintf_r>
 8015984:	2300      	movs	r3, #0
 8015986:	9a02      	ldr	r2, [sp, #8]
 8015988:	7013      	strb	r3, [r2, #0]
 801598a:	b01c      	add	sp, #112	; 0x70
 801598c:	bc08      	pop	{r3}
 801598e:	b003      	add	sp, #12
 8015990:	4718      	bx	r3
 8015992:	46c0      	nop			; (mov r8, r8)
 8015994:	7fffffff 	.word	0x7fffffff
 8015998:	200000d8 	.word	0x200000d8
 801599c:	ffff0208 	.word	0xffff0208

080159a0 <strcat>:
 80159a0:	0002      	movs	r2, r0
 80159a2:	b510      	push	{r4, lr}
 80159a4:	7813      	ldrb	r3, [r2, #0]
 80159a6:	1c54      	adds	r4, r2, #1
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d105      	bne.n	80159b8 <strcat+0x18>
 80159ac:	5ccc      	ldrb	r4, [r1, r3]
 80159ae:	54d4      	strb	r4, [r2, r3]
 80159b0:	3301      	adds	r3, #1
 80159b2:	2c00      	cmp	r4, #0
 80159b4:	d1fa      	bne.n	80159ac <strcat+0xc>
 80159b6:	bd10      	pop	{r4, pc}
 80159b8:	0022      	movs	r2, r4
 80159ba:	e7f3      	b.n	80159a4 <strcat+0x4>

080159bc <strchr>:
 80159bc:	b2c9      	uxtb	r1, r1
 80159be:	7803      	ldrb	r3, [r0, #0]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d004      	beq.n	80159ce <strchr+0x12>
 80159c4:	428b      	cmp	r3, r1
 80159c6:	d100      	bne.n	80159ca <strchr+0xe>
 80159c8:	4770      	bx	lr
 80159ca:	3001      	adds	r0, #1
 80159cc:	e7f7      	b.n	80159be <strchr+0x2>
 80159ce:	424b      	negs	r3, r1
 80159d0:	4159      	adcs	r1, r3
 80159d2:	4249      	negs	r1, r1
 80159d4:	4008      	ands	r0, r1
 80159d6:	e7f7      	b.n	80159c8 <strchr+0xc>

080159d8 <strcpy>:
 80159d8:	0003      	movs	r3, r0
 80159da:	780a      	ldrb	r2, [r1, #0]
 80159dc:	3101      	adds	r1, #1
 80159de:	701a      	strb	r2, [r3, #0]
 80159e0:	3301      	adds	r3, #1
 80159e2:	2a00      	cmp	r2, #0
 80159e4:	d1f9      	bne.n	80159da <strcpy+0x2>
 80159e6:	4770      	bx	lr

080159e8 <strncmp>:
 80159e8:	2300      	movs	r3, #0
 80159ea:	b530      	push	{r4, r5, lr}
 80159ec:	429a      	cmp	r2, r3
 80159ee:	d00a      	beq.n	8015a06 <strncmp+0x1e>
 80159f0:	3a01      	subs	r2, #1
 80159f2:	5cc4      	ldrb	r4, [r0, r3]
 80159f4:	5ccd      	ldrb	r5, [r1, r3]
 80159f6:	42ac      	cmp	r4, r5
 80159f8:	d104      	bne.n	8015a04 <strncmp+0x1c>
 80159fa:	4293      	cmp	r3, r2
 80159fc:	d002      	beq.n	8015a04 <strncmp+0x1c>
 80159fe:	3301      	adds	r3, #1
 8015a00:	2c00      	cmp	r4, #0
 8015a02:	d1f6      	bne.n	80159f2 <strncmp+0xa>
 8015a04:	1b63      	subs	r3, r4, r5
 8015a06:	0018      	movs	r0, r3
 8015a08:	bd30      	pop	{r4, r5, pc}

08015a0a <strncpy>:
 8015a0a:	b530      	push	{r4, r5, lr}
 8015a0c:	0005      	movs	r5, r0
 8015a0e:	2a00      	cmp	r2, #0
 8015a10:	d100      	bne.n	8015a14 <strncpy+0xa>
 8015a12:	bd30      	pop	{r4, r5, pc}
 8015a14:	780c      	ldrb	r4, [r1, #0]
 8015a16:	3a01      	subs	r2, #1
 8015a18:	1c6b      	adds	r3, r5, #1
 8015a1a:	702c      	strb	r4, [r5, #0]
 8015a1c:	3101      	adds	r1, #1
 8015a1e:	2c00      	cmp	r4, #0
 8015a20:	d105      	bne.n	8015a2e <strncpy+0x24>
 8015a22:	189a      	adds	r2, r3, r2
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d0f4      	beq.n	8015a12 <strncpy+0x8>
 8015a28:	701c      	strb	r4, [r3, #0]
 8015a2a:	3301      	adds	r3, #1
 8015a2c:	e7fa      	b.n	8015a24 <strncpy+0x1a>
 8015a2e:	001d      	movs	r5, r3
 8015a30:	e7ed      	b.n	8015a0e <strncpy+0x4>
	...

08015a34 <sulp>:
 8015a34:	b570      	push	{r4, r5, r6, lr}
 8015a36:	0016      	movs	r6, r2
 8015a38:	000d      	movs	r5, r1
 8015a3a:	f003 ff17 	bl	801986c <__ulp>
 8015a3e:	2e00      	cmp	r6, #0
 8015a40:	d00d      	beq.n	8015a5e <sulp+0x2a>
 8015a42:	236b      	movs	r3, #107	; 0x6b
 8015a44:	006a      	lsls	r2, r5, #1
 8015a46:	0d52      	lsrs	r2, r2, #21
 8015a48:	1a9b      	subs	r3, r3, r2
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	dd07      	ble.n	8015a5e <sulp+0x2a>
 8015a4e:	2400      	movs	r4, #0
 8015a50:	4a03      	ldr	r2, [pc, #12]	; (8015a60 <sulp+0x2c>)
 8015a52:	051b      	lsls	r3, r3, #20
 8015a54:	189d      	adds	r5, r3, r2
 8015a56:	002b      	movs	r3, r5
 8015a58:	0022      	movs	r2, r4
 8015a5a:	f7ec fceb 	bl	8002434 <__aeabi_dmul>
 8015a5e:	bd70      	pop	{r4, r5, r6, pc}
 8015a60:	3ff00000 	.word	0x3ff00000

08015a64 <_strtod_l>:
 8015a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a66:	b0a7      	sub	sp, #156	; 0x9c
 8015a68:	9307      	str	r3, [sp, #28]
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	9004      	str	r0, [sp, #16]
 8015a6e:	9807      	ldr	r0, [sp, #28]
 8015a70:	9322      	str	r3, [sp, #136]	; 0x88
 8015a72:	9106      	str	r1, [sp, #24]
 8015a74:	921d      	str	r2, [sp, #116]	; 0x74
 8015a76:	f003 fc28 	bl	80192ca <__localeconv_l>
 8015a7a:	0005      	movs	r5, r0
 8015a7c:	6800      	ldr	r0, [r0, #0]
 8015a7e:	f7ea fb4b 	bl	8000118 <strlen>
 8015a82:	2600      	movs	r6, #0
 8015a84:	2700      	movs	r7, #0
 8015a86:	9b06      	ldr	r3, [sp, #24]
 8015a88:	9005      	str	r0, [sp, #20]
 8015a8a:	9321      	str	r3, [sp, #132]	; 0x84
 8015a8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a8e:	781a      	ldrb	r2, [r3, #0]
 8015a90:	2a0d      	cmp	r2, #13
 8015a92:	d839      	bhi.n	8015b08 <_strtod_l+0xa4>
 8015a94:	2a09      	cmp	r2, #9
 8015a96:	d23d      	bcs.n	8015b14 <_strtod_l+0xb0>
 8015a98:	2a00      	cmp	r2, #0
 8015a9a:	d044      	beq.n	8015b26 <_strtod_l+0xc2>
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8015aa4:	920c      	str	r2, [sp, #48]	; 0x30
 8015aa6:	7823      	ldrb	r3, [r4, #0]
 8015aa8:	2b30      	cmp	r3, #48	; 0x30
 8015aaa:	d000      	beq.n	8015aae <_strtod_l+0x4a>
 8015aac:	e07e      	b.n	8015bac <_strtod_l+0x148>
 8015aae:	7863      	ldrb	r3, [r4, #1]
 8015ab0:	2b58      	cmp	r3, #88	; 0x58
 8015ab2:	d002      	beq.n	8015aba <_strtod_l+0x56>
 8015ab4:	2b78      	cmp	r3, #120	; 0x78
 8015ab6:	d000      	beq.n	8015aba <_strtod_l+0x56>
 8015ab8:	e06e      	b.n	8015b98 <_strtod_l+0x134>
 8015aba:	9b07      	ldr	r3, [sp, #28]
 8015abc:	4a96      	ldr	r2, [pc, #600]	; (8015d18 <_strtod_l+0x2b4>)
 8015abe:	9302      	str	r3, [sp, #8]
 8015ac0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ac2:	a921      	add	r1, sp, #132	; 0x84
 8015ac4:	9301      	str	r3, [sp, #4]
 8015ac6:	ab22      	add	r3, sp, #136	; 0x88
 8015ac8:	9300      	str	r3, [sp, #0]
 8015aca:	9804      	ldr	r0, [sp, #16]
 8015acc:	ab23      	add	r3, sp, #140	; 0x8c
 8015ace:	f003 f914 	bl	8018cfa <__gethex>
 8015ad2:	2507      	movs	r5, #7
 8015ad4:	9005      	str	r0, [sp, #20]
 8015ad6:	4005      	ands	r5, r0
 8015ad8:	d005      	beq.n	8015ae6 <_strtod_l+0x82>
 8015ada:	2d06      	cmp	r5, #6
 8015adc:	d12f      	bne.n	8015b3e <_strtod_l+0xda>
 8015ade:	2300      	movs	r3, #0
 8015ae0:	3401      	adds	r4, #1
 8015ae2:	9421      	str	r4, [sp, #132]	; 0x84
 8015ae4:	9313      	str	r3, [sp, #76]	; 0x4c
 8015ae6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d002      	beq.n	8015af2 <_strtod_l+0x8e>
 8015aec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015aee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015af0:	601a      	str	r2, [r3, #0]
 8015af2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d01d      	beq.n	8015b34 <_strtod_l+0xd0>
 8015af8:	2380      	movs	r3, #128	; 0x80
 8015afa:	0032      	movs	r2, r6
 8015afc:	061b      	lsls	r3, r3, #24
 8015afe:	18fb      	adds	r3, r7, r3
 8015b00:	0010      	movs	r0, r2
 8015b02:	0019      	movs	r1, r3
 8015b04:	b027      	add	sp, #156	; 0x9c
 8015b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b08:	2a2b      	cmp	r2, #43	; 0x2b
 8015b0a:	d016      	beq.n	8015b3a <_strtod_l+0xd6>
 8015b0c:	2a2d      	cmp	r2, #45	; 0x2d
 8015b0e:	d003      	beq.n	8015b18 <_strtod_l+0xb4>
 8015b10:	2a20      	cmp	r2, #32
 8015b12:	d1c3      	bne.n	8015a9c <_strtod_l+0x38>
 8015b14:	3301      	adds	r3, #1
 8015b16:	e7b8      	b.n	8015a8a <_strtod_l+0x26>
 8015b18:	2201      	movs	r2, #1
 8015b1a:	9213      	str	r2, [sp, #76]	; 0x4c
 8015b1c:	1c5a      	adds	r2, r3, #1
 8015b1e:	9221      	str	r2, [sp, #132]	; 0x84
 8015b20:	785b      	ldrb	r3, [r3, #1]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d1bc      	bne.n	8015aa0 <_strtod_l+0x3c>
 8015b26:	9b06      	ldr	r3, [sp, #24]
 8015b28:	9321      	str	r3, [sp, #132]	; 0x84
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8015b2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d1db      	bne.n	8015aec <_strtod_l+0x88>
 8015b34:	0032      	movs	r2, r6
 8015b36:	003b      	movs	r3, r7
 8015b38:	e7e2      	b.n	8015b00 <_strtod_l+0x9c>
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	e7ed      	b.n	8015b1a <_strtod_l+0xb6>
 8015b3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015b40:	2a00      	cmp	r2, #0
 8015b42:	d007      	beq.n	8015b54 <_strtod_l+0xf0>
 8015b44:	2135      	movs	r1, #53	; 0x35
 8015b46:	a824      	add	r0, sp, #144	; 0x90
 8015b48:	f003 ff7d 	bl	8019a46 <__copybits>
 8015b4c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015b4e:	9804      	ldr	r0, [sp, #16]
 8015b50:	f003 fc12 	bl	8019378 <_Bfree>
 8015b54:	1e68      	subs	r0, r5, #1
 8015b56:	2804      	cmp	r0, #4
 8015b58:	d806      	bhi.n	8015b68 <_strtod_l+0x104>
 8015b5a:	f7ea fae5 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015b5e:	030c      	.short	0x030c
 8015b60:	1917      	.short	0x1917
 8015b62:	0c          	.byte	0x0c
 8015b63:	00          	.byte	0x00
 8015b64:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015b66:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8015b68:	9b05      	ldr	r3, [sp, #20]
 8015b6a:	071b      	lsls	r3, r3, #28
 8015b6c:	d5bb      	bpl.n	8015ae6 <_strtod_l+0x82>
 8015b6e:	2380      	movs	r3, #128	; 0x80
 8015b70:	061b      	lsls	r3, r3, #24
 8015b72:	431f      	orrs	r7, r3
 8015b74:	e7b7      	b.n	8015ae6 <_strtod_l+0x82>
 8015b76:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015b78:	4a68      	ldr	r2, [pc, #416]	; (8015d1c <_strtod_l+0x2b8>)
 8015b7a:	4969      	ldr	r1, [pc, #420]	; (8015d20 <_strtod_l+0x2bc>)
 8015b7c:	401a      	ands	r2, r3
 8015b7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015b80:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015b82:	185b      	adds	r3, r3, r1
 8015b84:	051b      	lsls	r3, r3, #20
 8015b86:	431a      	orrs	r2, r3
 8015b88:	0017      	movs	r7, r2
 8015b8a:	e7ed      	b.n	8015b68 <_strtod_l+0x104>
 8015b8c:	4f65      	ldr	r7, [pc, #404]	; (8015d24 <_strtod_l+0x2c0>)
 8015b8e:	e7eb      	b.n	8015b68 <_strtod_l+0x104>
 8015b90:	2601      	movs	r6, #1
 8015b92:	4f65      	ldr	r7, [pc, #404]	; (8015d28 <_strtod_l+0x2c4>)
 8015b94:	4276      	negs	r6, r6
 8015b96:	e7e7      	b.n	8015b68 <_strtod_l+0x104>
 8015b98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b9a:	1c5a      	adds	r2, r3, #1
 8015b9c:	9221      	str	r2, [sp, #132]	; 0x84
 8015b9e:	785b      	ldrb	r3, [r3, #1]
 8015ba0:	2b30      	cmp	r3, #48	; 0x30
 8015ba2:	d0f9      	beq.n	8015b98 <_strtod_l+0x134>
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d09e      	beq.n	8015ae6 <_strtod_l+0x82>
 8015ba8:	2301      	movs	r3, #1
 8015baa:	930c      	str	r3, [sp, #48]	; 0x30
 8015bac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015bae:	220a      	movs	r2, #10
 8015bb0:	9312      	str	r3, [sp, #72]	; 0x48
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8015bb6:	9308      	str	r3, [sp, #32]
 8015bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8015bba:	9821      	ldr	r0, [sp, #132]	; 0x84
 8015bbc:	7804      	ldrb	r4, [r0, #0]
 8015bbe:	0023      	movs	r3, r4
 8015bc0:	3b30      	subs	r3, #48	; 0x30
 8015bc2:	b2d9      	uxtb	r1, r3
 8015bc4:	2909      	cmp	r1, #9
 8015bc6:	d934      	bls.n	8015c32 <_strtod_l+0x1ce>
 8015bc8:	9a05      	ldr	r2, [sp, #20]
 8015bca:	6829      	ldr	r1, [r5, #0]
 8015bcc:	f7ff ff0c 	bl	80159e8 <strncmp>
 8015bd0:	2800      	cmp	r0, #0
 8015bd2:	d040      	beq.n	8015c56 <_strtod_l+0x1f2>
 8015bd4:	2000      	movs	r0, #0
 8015bd6:	0023      	movs	r3, r4
 8015bd8:	4684      	mov	ip, r0
 8015bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015bdc:	9007      	str	r0, [sp, #28]
 8015bde:	9205      	str	r2, [sp, #20]
 8015be0:	2220      	movs	r2, #32
 8015be2:	0019      	movs	r1, r3
 8015be4:	4391      	bics	r1, r2
 8015be6:	000a      	movs	r2, r1
 8015be8:	2100      	movs	r1, #0
 8015bea:	2a45      	cmp	r2, #69	; 0x45
 8015bec:	d000      	beq.n	8015bf0 <_strtod_l+0x18c>
 8015bee:	e0bf      	b.n	8015d70 <_strtod_l+0x30c>
 8015bf0:	9b05      	ldr	r3, [sp, #20]
 8015bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015bf4:	4303      	orrs	r3, r0
 8015bf6:	4313      	orrs	r3, r2
 8015bf8:	428b      	cmp	r3, r1
 8015bfa:	d094      	beq.n	8015b26 <_strtod_l+0xc2>
 8015bfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015bfe:	9306      	str	r3, [sp, #24]
 8015c00:	3301      	adds	r3, #1
 8015c02:	9321      	str	r3, [sp, #132]	; 0x84
 8015c04:	9b06      	ldr	r3, [sp, #24]
 8015c06:	785b      	ldrb	r3, [r3, #1]
 8015c08:	2b2b      	cmp	r3, #43	; 0x2b
 8015c0a:	d100      	bne.n	8015c0e <_strtod_l+0x1aa>
 8015c0c:	e082      	b.n	8015d14 <_strtod_l+0x2b0>
 8015c0e:	000c      	movs	r4, r1
 8015c10:	2b2d      	cmp	r3, #45	; 0x2d
 8015c12:	d105      	bne.n	8015c20 <_strtod_l+0x1bc>
 8015c14:	2401      	movs	r4, #1
 8015c16:	9b06      	ldr	r3, [sp, #24]
 8015c18:	3302      	adds	r3, #2
 8015c1a:	9321      	str	r3, [sp, #132]	; 0x84
 8015c1c:	9b06      	ldr	r3, [sp, #24]
 8015c1e:	789b      	ldrb	r3, [r3, #2]
 8015c20:	001a      	movs	r2, r3
 8015c22:	3a30      	subs	r2, #48	; 0x30
 8015c24:	2a09      	cmp	r2, #9
 8015c26:	d800      	bhi.n	8015c2a <_strtod_l+0x1c6>
 8015c28:	e084      	b.n	8015d34 <_strtod_l+0x2d0>
 8015c2a:	9a06      	ldr	r2, [sp, #24]
 8015c2c:	2100      	movs	r1, #0
 8015c2e:	9221      	str	r2, [sp, #132]	; 0x84
 8015c30:	e09e      	b.n	8015d70 <_strtod_l+0x30c>
 8015c32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015c34:	2908      	cmp	r1, #8
 8015c36:	dc09      	bgt.n	8015c4c <_strtod_l+0x1e8>
 8015c38:	9908      	ldr	r1, [sp, #32]
 8015c3a:	4351      	muls	r1, r2
 8015c3c:	18cb      	adds	r3, r1, r3
 8015c3e:	9308      	str	r3, [sp, #32]
 8015c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c42:	3001      	adds	r0, #1
 8015c44:	3301      	adds	r3, #1
 8015c46:	930a      	str	r3, [sp, #40]	; 0x28
 8015c48:	9021      	str	r0, [sp, #132]	; 0x84
 8015c4a:	e7b6      	b.n	8015bba <_strtod_l+0x156>
 8015c4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c4e:	4351      	muls	r1, r2
 8015c50:	18cb      	adds	r3, r1, r3
 8015c52:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c54:	e7f4      	b.n	8015c40 <_strtod_l+0x1dc>
 8015c56:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c58:	9b05      	ldr	r3, [sp, #20]
 8015c5a:	4694      	mov	ip, r2
 8015c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c5e:	4463      	add	r3, ip
 8015c60:	9321      	str	r3, [sp, #132]	; 0x84
 8015c62:	781b      	ldrb	r3, [r3, #0]
 8015c64:	2a00      	cmp	r2, #0
 8015c66:	d036      	beq.n	8015cd6 <_strtod_l+0x272>
 8015c68:	4684      	mov	ip, r0
 8015c6a:	9205      	str	r2, [sp, #20]
 8015c6c:	001a      	movs	r2, r3
 8015c6e:	3a30      	subs	r2, #48	; 0x30
 8015c70:	2a09      	cmp	r2, #9
 8015c72:	d912      	bls.n	8015c9a <_strtod_l+0x236>
 8015c74:	2201      	movs	r2, #1
 8015c76:	9207      	str	r2, [sp, #28]
 8015c78:	e7b2      	b.n	8015be0 <_strtod_l+0x17c>
 8015c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c7c:	3001      	adds	r0, #1
 8015c7e:	1c5a      	adds	r2, r3, #1
 8015c80:	9221      	str	r2, [sp, #132]	; 0x84
 8015c82:	785b      	ldrb	r3, [r3, #1]
 8015c84:	2b30      	cmp	r3, #48	; 0x30
 8015c86:	d0f8      	beq.n	8015c7a <_strtod_l+0x216>
 8015c88:	001a      	movs	r2, r3
 8015c8a:	3a31      	subs	r2, #49	; 0x31
 8015c8c:	2a08      	cmp	r2, #8
 8015c8e:	d83c      	bhi.n	8015d0a <_strtod_l+0x2a6>
 8015c90:	4684      	mov	ip, r0
 8015c92:	2000      	movs	r0, #0
 8015c94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c96:	9005      	str	r0, [sp, #20]
 8015c98:	9212      	str	r2, [sp, #72]	; 0x48
 8015c9a:	3b30      	subs	r3, #48	; 0x30
 8015c9c:	1c42      	adds	r2, r0, #1
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d013      	beq.n	8015cca <_strtod_l+0x266>
 8015ca2:	210a      	movs	r1, #10
 8015ca4:	4494      	add	ip, r2
 8015ca6:	9a05      	ldr	r2, [sp, #20]
 8015ca8:	1885      	adds	r5, r0, r2
 8015caa:	42aa      	cmp	r2, r5
 8015cac:	d115      	bne.n	8015cda <_strtod_l+0x276>
 8015cae:	9905      	ldr	r1, [sp, #20]
 8015cb0:	9a05      	ldr	r2, [sp, #20]
 8015cb2:	3101      	adds	r1, #1
 8015cb4:	1809      	adds	r1, r1, r0
 8015cb6:	1812      	adds	r2, r2, r0
 8015cb8:	9105      	str	r1, [sp, #20]
 8015cba:	2a08      	cmp	r2, #8
 8015cbc:	dc1b      	bgt.n	8015cf6 <_strtod_l+0x292>
 8015cbe:	220a      	movs	r2, #10
 8015cc0:	9908      	ldr	r1, [sp, #32]
 8015cc2:	434a      	muls	r2, r1
 8015cc4:	189b      	adds	r3, r3, r2
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	9308      	str	r3, [sp, #32]
 8015cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ccc:	0010      	movs	r0, r2
 8015cce:	1c59      	adds	r1, r3, #1
 8015cd0:	9121      	str	r1, [sp, #132]	; 0x84
 8015cd2:	785b      	ldrb	r3, [r3, #1]
 8015cd4:	e7ca      	b.n	8015c6c <_strtod_l+0x208>
 8015cd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015cd8:	e7d4      	b.n	8015c84 <_strtod_l+0x220>
 8015cda:	1c54      	adds	r4, r2, #1
 8015cdc:	2a08      	cmp	r2, #8
 8015cde:	dc04      	bgt.n	8015cea <_strtod_l+0x286>
 8015ce0:	9a08      	ldr	r2, [sp, #32]
 8015ce2:	434a      	muls	r2, r1
 8015ce4:	9208      	str	r2, [sp, #32]
 8015ce6:	0022      	movs	r2, r4
 8015ce8:	e7df      	b.n	8015caa <_strtod_l+0x246>
 8015cea:	2c10      	cmp	r4, #16
 8015cec:	dcfb      	bgt.n	8015ce6 <_strtod_l+0x282>
 8015cee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015cf0:	434a      	muls	r2, r1
 8015cf2:	920b      	str	r2, [sp, #44]	; 0x2c
 8015cf4:	e7f7      	b.n	8015ce6 <_strtod_l+0x282>
 8015cf6:	9905      	ldr	r1, [sp, #20]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	2910      	cmp	r1, #16
 8015cfc:	dce5      	bgt.n	8015cca <_strtod_l+0x266>
 8015cfe:	210a      	movs	r1, #10
 8015d00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015d02:	4341      	muls	r1, r0
 8015d04:	185b      	adds	r3, r3, r1
 8015d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d08:	e7df      	b.n	8015cca <_strtod_l+0x266>
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	4694      	mov	ip, r2
 8015d0e:	9205      	str	r2, [sp, #20]
 8015d10:	3201      	adds	r2, #1
 8015d12:	e7b0      	b.n	8015c76 <_strtod_l+0x212>
 8015d14:	000c      	movs	r4, r1
 8015d16:	e77e      	b.n	8015c16 <_strtod_l+0x1b2>
 8015d18:	0801d4e0 	.word	0x0801d4e0
 8015d1c:	ffefffff 	.word	0xffefffff
 8015d20:	00000433 	.word	0x00000433
 8015d24:	7ff00000 	.word	0x7ff00000
 8015d28:	7fffffff 	.word	0x7fffffff
 8015d2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d2e:	1c5a      	adds	r2, r3, #1
 8015d30:	9221      	str	r2, [sp, #132]	; 0x84
 8015d32:	785b      	ldrb	r3, [r3, #1]
 8015d34:	2b30      	cmp	r3, #48	; 0x30
 8015d36:	d0f9      	beq.n	8015d2c <_strtod_l+0x2c8>
 8015d38:	001a      	movs	r2, r3
 8015d3a:	3a31      	subs	r2, #49	; 0x31
 8015d3c:	2100      	movs	r1, #0
 8015d3e:	2a08      	cmp	r2, #8
 8015d40:	d816      	bhi.n	8015d70 <_strtod_l+0x30c>
 8015d42:	3b30      	subs	r3, #48	; 0x30
 8015d44:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8015d46:	930e      	str	r3, [sp, #56]	; 0x38
 8015d48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d4a:	1c59      	adds	r1, r3, #1
 8015d4c:	9121      	str	r1, [sp, #132]	; 0x84
 8015d4e:	785b      	ldrb	r3, [r3, #1]
 8015d50:	001a      	movs	r2, r3
 8015d52:	3a30      	subs	r2, #48	; 0x30
 8015d54:	2a09      	cmp	r2, #9
 8015d56:	d932      	bls.n	8015dbe <_strtod_l+0x35a>
 8015d58:	1b4a      	subs	r2, r1, r5
 8015d5a:	4dad      	ldr	r5, [pc, #692]	; (8016010 <_strtod_l+0x5ac>)
 8015d5c:	0029      	movs	r1, r5
 8015d5e:	2a08      	cmp	r2, #8
 8015d60:	dc03      	bgt.n	8015d6a <_strtod_l+0x306>
 8015d62:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015d64:	42a9      	cmp	r1, r5
 8015d66:	dd00      	ble.n	8015d6a <_strtod_l+0x306>
 8015d68:	0029      	movs	r1, r5
 8015d6a:	2c00      	cmp	r4, #0
 8015d6c:	d000      	beq.n	8015d70 <_strtod_l+0x30c>
 8015d6e:	4249      	negs	r1, r1
 8015d70:	9a05      	ldr	r2, [sp, #20]
 8015d72:	2a00      	cmp	r2, #0
 8015d74:	d149      	bne.n	8015e0a <_strtod_l+0x3a6>
 8015d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015d78:	4310      	orrs	r0, r2
 8015d7a:	d000      	beq.n	8015d7e <_strtod_l+0x31a>
 8015d7c:	e6b3      	b.n	8015ae6 <_strtod_l+0x82>
 8015d7e:	9a07      	ldr	r2, [sp, #28]
 8015d80:	2a00      	cmp	r2, #0
 8015d82:	d000      	beq.n	8015d86 <_strtod_l+0x322>
 8015d84:	e6cf      	b.n	8015b26 <_strtod_l+0xc2>
 8015d86:	2b4e      	cmp	r3, #78	; 0x4e
 8015d88:	d025      	beq.n	8015dd6 <_strtod_l+0x372>
 8015d8a:	dc1f      	bgt.n	8015dcc <_strtod_l+0x368>
 8015d8c:	2b49      	cmp	r3, #73	; 0x49
 8015d8e:	d000      	beq.n	8015d92 <_strtod_l+0x32e>
 8015d90:	e6c9      	b.n	8015b26 <_strtod_l+0xc2>
 8015d92:	49a0      	ldr	r1, [pc, #640]	; (8016014 <_strtod_l+0x5b0>)
 8015d94:	a821      	add	r0, sp, #132	; 0x84
 8015d96:	f003 f9ed 	bl	8019174 <__match>
 8015d9a:	2800      	cmp	r0, #0
 8015d9c:	d100      	bne.n	8015da0 <_strtod_l+0x33c>
 8015d9e:	e6c2      	b.n	8015b26 <_strtod_l+0xc2>
 8015da0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015da2:	499d      	ldr	r1, [pc, #628]	; (8016018 <_strtod_l+0x5b4>)
 8015da4:	3b01      	subs	r3, #1
 8015da6:	a821      	add	r0, sp, #132	; 0x84
 8015da8:	9321      	str	r3, [sp, #132]	; 0x84
 8015daa:	f003 f9e3 	bl	8019174 <__match>
 8015dae:	2800      	cmp	r0, #0
 8015db0:	d102      	bne.n	8015db8 <_strtod_l+0x354>
 8015db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015db4:	3301      	adds	r3, #1
 8015db6:	9321      	str	r3, [sp, #132]	; 0x84
 8015db8:	4f98      	ldr	r7, [pc, #608]	; (801601c <_strtod_l+0x5b8>)
 8015dba:	2600      	movs	r6, #0
 8015dbc:	e693      	b.n	8015ae6 <_strtod_l+0x82>
 8015dbe:	220a      	movs	r2, #10
 8015dc0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015dc2:	434a      	muls	r2, r1
 8015dc4:	18d2      	adds	r2, r2, r3
 8015dc6:	3a30      	subs	r2, #48	; 0x30
 8015dc8:	920e      	str	r2, [sp, #56]	; 0x38
 8015dca:	e7bd      	b.n	8015d48 <_strtod_l+0x2e4>
 8015dcc:	2b69      	cmp	r3, #105	; 0x69
 8015dce:	d0e0      	beq.n	8015d92 <_strtod_l+0x32e>
 8015dd0:	2b6e      	cmp	r3, #110	; 0x6e
 8015dd2:	d000      	beq.n	8015dd6 <_strtod_l+0x372>
 8015dd4:	e6a7      	b.n	8015b26 <_strtod_l+0xc2>
 8015dd6:	4992      	ldr	r1, [pc, #584]	; (8016020 <_strtod_l+0x5bc>)
 8015dd8:	a821      	add	r0, sp, #132	; 0x84
 8015dda:	f003 f9cb 	bl	8019174 <__match>
 8015dde:	2800      	cmp	r0, #0
 8015de0:	d100      	bne.n	8015de4 <_strtod_l+0x380>
 8015de2:	e6a0      	b.n	8015b26 <_strtod_l+0xc2>
 8015de4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015de6:	781b      	ldrb	r3, [r3, #0]
 8015de8:	2b28      	cmp	r3, #40	; 0x28
 8015dea:	d10c      	bne.n	8015e06 <_strtod_l+0x3a2>
 8015dec:	aa24      	add	r2, sp, #144	; 0x90
 8015dee:	498d      	ldr	r1, [pc, #564]	; (8016024 <_strtod_l+0x5c0>)
 8015df0:	a821      	add	r0, sp, #132	; 0x84
 8015df2:	f003 f9d3 	bl	801919c <__hexnan>
 8015df6:	2805      	cmp	r0, #5
 8015df8:	d105      	bne.n	8015e06 <_strtod_l+0x3a2>
 8015dfa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015dfc:	4a87      	ldr	r2, [pc, #540]	; (801601c <_strtod_l+0x5b8>)
 8015dfe:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015e00:	431a      	orrs	r2, r3
 8015e02:	0017      	movs	r7, r2
 8015e04:	e66f      	b.n	8015ae6 <_strtod_l+0x82>
 8015e06:	4f88      	ldr	r7, [pc, #544]	; (8016028 <_strtod_l+0x5c4>)
 8015e08:	e7d7      	b.n	8015dba <_strtod_l+0x356>
 8015e0a:	4663      	mov	r3, ip
 8015e0c:	1acb      	subs	r3, r1, r3
 8015e0e:	9307      	str	r3, [sp, #28]
 8015e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d101      	bne.n	8015e1a <_strtod_l+0x3b6>
 8015e16:	9b05      	ldr	r3, [sp, #20]
 8015e18:	930a      	str	r3, [sp, #40]	; 0x28
 8015e1a:	9c05      	ldr	r4, [sp, #20]
 8015e1c:	2c10      	cmp	r4, #16
 8015e1e:	dd00      	ble.n	8015e22 <_strtod_l+0x3be>
 8015e20:	2410      	movs	r4, #16
 8015e22:	9808      	ldr	r0, [sp, #32]
 8015e24:	f7ed f94c 	bl	80030c0 <__aeabi_ui2d>
 8015e28:	9b05      	ldr	r3, [sp, #20]
 8015e2a:	0006      	movs	r6, r0
 8015e2c:	000f      	movs	r7, r1
 8015e2e:	2b09      	cmp	r3, #9
 8015e30:	dc15      	bgt.n	8015e5e <_strtod_l+0x3fa>
 8015e32:	9b07      	ldr	r3, [sp, #28]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d100      	bne.n	8015e3a <_strtod_l+0x3d6>
 8015e38:	e655      	b.n	8015ae6 <_strtod_l+0x82>
 8015e3a:	9b07      	ldr	r3, [sp, #28]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	dc00      	bgt.n	8015e42 <_strtod_l+0x3de>
 8015e40:	e07d      	b.n	8015f3e <_strtod_l+0x4da>
 8015e42:	2b16      	cmp	r3, #22
 8015e44:	dc62      	bgt.n	8015f0c <_strtod_l+0x4a8>
 8015e46:	00dc      	lsls	r4, r3, #3
 8015e48:	4b78      	ldr	r3, [pc, #480]	; (801602c <_strtod_l+0x5c8>)
 8015e4a:	0032      	movs	r2, r6
 8015e4c:	1919      	adds	r1, r3, r4
 8015e4e:	003b      	movs	r3, r7
 8015e50:	6808      	ldr	r0, [r1, #0]
 8015e52:	6849      	ldr	r1, [r1, #4]
 8015e54:	f7ec faee 	bl	8002434 <__aeabi_dmul>
 8015e58:	0006      	movs	r6, r0
 8015e5a:	000f      	movs	r7, r1
 8015e5c:	e643      	b.n	8015ae6 <_strtod_l+0x82>
 8015e5e:	0022      	movs	r2, r4
 8015e60:	4b72      	ldr	r3, [pc, #456]	; (801602c <_strtod_l+0x5c8>)
 8015e62:	3a09      	subs	r2, #9
 8015e64:	00d2      	lsls	r2, r2, #3
 8015e66:	189b      	adds	r3, r3, r2
 8015e68:	681a      	ldr	r2, [r3, #0]
 8015e6a:	685b      	ldr	r3, [r3, #4]
 8015e6c:	f7ec fae2 	bl	8002434 <__aeabi_dmul>
 8015e70:	0006      	movs	r6, r0
 8015e72:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015e74:	000f      	movs	r7, r1
 8015e76:	f7ed f923 	bl	80030c0 <__aeabi_ui2d>
 8015e7a:	000b      	movs	r3, r1
 8015e7c:	0002      	movs	r2, r0
 8015e7e:	0039      	movs	r1, r7
 8015e80:	0030      	movs	r0, r6
 8015e82:	f7eb fbb1 	bl	80015e8 <__aeabi_dadd>
 8015e86:	9b05      	ldr	r3, [sp, #20]
 8015e88:	0006      	movs	r6, r0
 8015e8a:	000f      	movs	r7, r1
 8015e8c:	2b0f      	cmp	r3, #15
 8015e8e:	ddd0      	ble.n	8015e32 <_strtod_l+0x3ce>
 8015e90:	9b05      	ldr	r3, [sp, #20]
 8015e92:	1b1c      	subs	r4, r3, r4
 8015e94:	9b07      	ldr	r3, [sp, #28]
 8015e96:	18e4      	adds	r4, r4, r3
 8015e98:	2c00      	cmp	r4, #0
 8015e9a:	dc00      	bgt.n	8015e9e <_strtod_l+0x43a>
 8015e9c:	e094      	b.n	8015fc8 <_strtod_l+0x564>
 8015e9e:	230f      	movs	r3, #15
 8015ea0:	4023      	ands	r3, r4
 8015ea2:	d00a      	beq.n	8015eba <_strtod_l+0x456>
 8015ea4:	4961      	ldr	r1, [pc, #388]	; (801602c <_strtod_l+0x5c8>)
 8015ea6:	00db      	lsls	r3, r3, #3
 8015ea8:	18c9      	adds	r1, r1, r3
 8015eaa:	0032      	movs	r2, r6
 8015eac:	6808      	ldr	r0, [r1, #0]
 8015eae:	6849      	ldr	r1, [r1, #4]
 8015eb0:	003b      	movs	r3, r7
 8015eb2:	f7ec fabf 	bl	8002434 <__aeabi_dmul>
 8015eb6:	0006      	movs	r6, r0
 8015eb8:	000f      	movs	r7, r1
 8015eba:	230f      	movs	r3, #15
 8015ebc:	439c      	bics	r4, r3
 8015ebe:	d06e      	beq.n	8015f9e <_strtod_l+0x53a>
 8015ec0:	3326      	adds	r3, #38	; 0x26
 8015ec2:	33ff      	adds	r3, #255	; 0xff
 8015ec4:	429c      	cmp	r4, r3
 8015ec6:	dd48      	ble.n	8015f5a <_strtod_l+0x4f6>
 8015ec8:	2400      	movs	r4, #0
 8015eca:	9405      	str	r4, [sp, #20]
 8015ecc:	940b      	str	r4, [sp, #44]	; 0x2c
 8015ece:	940a      	str	r4, [sp, #40]	; 0x28
 8015ed0:	2322      	movs	r3, #34	; 0x22
 8015ed2:	2600      	movs	r6, #0
 8015ed4:	9a04      	ldr	r2, [sp, #16]
 8015ed6:	4f51      	ldr	r7, [pc, #324]	; (801601c <_strtod_l+0x5b8>)
 8015ed8:	6013      	str	r3, [r2, #0]
 8015eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015edc:	42b3      	cmp	r3, r6
 8015ede:	d100      	bne.n	8015ee2 <_strtod_l+0x47e>
 8015ee0:	e601      	b.n	8015ae6 <_strtod_l+0x82>
 8015ee2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015ee4:	9804      	ldr	r0, [sp, #16]
 8015ee6:	f003 fa47 	bl	8019378 <_Bfree>
 8015eea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015eec:	9804      	ldr	r0, [sp, #16]
 8015eee:	f003 fa43 	bl	8019378 <_Bfree>
 8015ef2:	9905      	ldr	r1, [sp, #20]
 8015ef4:	9804      	ldr	r0, [sp, #16]
 8015ef6:	f003 fa3f 	bl	8019378 <_Bfree>
 8015efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015efc:	9804      	ldr	r0, [sp, #16]
 8015efe:	f003 fa3b 	bl	8019378 <_Bfree>
 8015f02:	0021      	movs	r1, r4
 8015f04:	9804      	ldr	r0, [sp, #16]
 8015f06:	f003 fa37 	bl	8019378 <_Bfree>
 8015f0a:	e5ec      	b.n	8015ae6 <_strtod_l+0x82>
 8015f0c:	2325      	movs	r3, #37	; 0x25
 8015f0e:	9a05      	ldr	r2, [sp, #20]
 8015f10:	1a9b      	subs	r3, r3, r2
 8015f12:	9a07      	ldr	r2, [sp, #28]
 8015f14:	4293      	cmp	r3, r2
 8015f16:	dbbb      	blt.n	8015e90 <_strtod_l+0x42c>
 8015f18:	230f      	movs	r3, #15
 8015f1a:	9a05      	ldr	r2, [sp, #20]
 8015f1c:	4c43      	ldr	r4, [pc, #268]	; (801602c <_strtod_l+0x5c8>)
 8015f1e:	1a9d      	subs	r5, r3, r2
 8015f20:	00e9      	lsls	r1, r5, #3
 8015f22:	1861      	adds	r1, r4, r1
 8015f24:	0032      	movs	r2, r6
 8015f26:	6808      	ldr	r0, [r1, #0]
 8015f28:	6849      	ldr	r1, [r1, #4]
 8015f2a:	003b      	movs	r3, r7
 8015f2c:	f7ec fa82 	bl	8002434 <__aeabi_dmul>
 8015f30:	9b07      	ldr	r3, [sp, #28]
 8015f32:	1b5e      	subs	r6, r3, r5
 8015f34:	00f6      	lsls	r6, r6, #3
 8015f36:	19a6      	adds	r6, r4, r6
 8015f38:	6832      	ldr	r2, [r6, #0]
 8015f3a:	6873      	ldr	r3, [r6, #4]
 8015f3c:	e78a      	b.n	8015e54 <_strtod_l+0x3f0>
 8015f3e:	9b07      	ldr	r3, [sp, #28]
 8015f40:	3316      	adds	r3, #22
 8015f42:	dba5      	blt.n	8015e90 <_strtod_l+0x42c>
 8015f44:	9b07      	ldr	r3, [sp, #28]
 8015f46:	0030      	movs	r0, r6
 8015f48:	00da      	lsls	r2, r3, #3
 8015f4a:	4b38      	ldr	r3, [pc, #224]	; (801602c <_strtod_l+0x5c8>)
 8015f4c:	0039      	movs	r1, r7
 8015f4e:	1a9b      	subs	r3, r3, r2
 8015f50:	681a      	ldr	r2, [r3, #0]
 8015f52:	685b      	ldr	r3, [r3, #4]
 8015f54:	f7eb fe64 	bl	8001c20 <__aeabi_ddiv>
 8015f58:	e77e      	b.n	8015e58 <_strtod_l+0x3f4>
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	0030      	movs	r0, r6
 8015f5e:	0039      	movs	r1, r7
 8015f60:	001d      	movs	r5, r3
 8015f62:	1124      	asrs	r4, r4, #4
 8015f64:	2c01      	cmp	r4, #1
 8015f66:	dc1d      	bgt.n	8015fa4 <_strtod_l+0x540>
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d001      	beq.n	8015f70 <_strtod_l+0x50c>
 8015f6c:	0006      	movs	r6, r0
 8015f6e:	000f      	movs	r7, r1
 8015f70:	4b2f      	ldr	r3, [pc, #188]	; (8016030 <_strtod_l+0x5cc>)
 8015f72:	00ed      	lsls	r5, r5, #3
 8015f74:	18ff      	adds	r7, r7, r3
 8015f76:	4b2f      	ldr	r3, [pc, #188]	; (8016034 <_strtod_l+0x5d0>)
 8015f78:	0032      	movs	r2, r6
 8015f7a:	195d      	adds	r5, r3, r5
 8015f7c:	6828      	ldr	r0, [r5, #0]
 8015f7e:	6869      	ldr	r1, [r5, #4]
 8015f80:	003b      	movs	r3, r7
 8015f82:	f7ec fa57 	bl	8002434 <__aeabi_dmul>
 8015f86:	4b25      	ldr	r3, [pc, #148]	; (801601c <_strtod_l+0x5b8>)
 8015f88:	4a2b      	ldr	r2, [pc, #172]	; (8016038 <_strtod_l+0x5d4>)
 8015f8a:	0006      	movs	r6, r0
 8015f8c:	400b      	ands	r3, r1
 8015f8e:	4293      	cmp	r3, r2
 8015f90:	d89a      	bhi.n	8015ec8 <_strtod_l+0x464>
 8015f92:	4a2a      	ldr	r2, [pc, #168]	; (801603c <_strtod_l+0x5d8>)
 8015f94:	4293      	cmp	r3, r2
 8015f96:	d913      	bls.n	8015fc0 <_strtod_l+0x55c>
 8015f98:	2601      	movs	r6, #1
 8015f9a:	4f29      	ldr	r7, [pc, #164]	; (8016040 <_strtod_l+0x5dc>)
 8015f9c:	4276      	negs	r6, r6
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	9306      	str	r3, [sp, #24]
 8015fa2:	e07b      	b.n	801609c <_strtod_l+0x638>
 8015fa4:	2201      	movs	r2, #1
 8015fa6:	4214      	tst	r4, r2
 8015fa8:	d007      	beq.n	8015fba <_strtod_l+0x556>
 8015faa:	4a22      	ldr	r2, [pc, #136]	; (8016034 <_strtod_l+0x5d0>)
 8015fac:	00eb      	lsls	r3, r5, #3
 8015fae:	189b      	adds	r3, r3, r2
 8015fb0:	681a      	ldr	r2, [r3, #0]
 8015fb2:	685b      	ldr	r3, [r3, #4]
 8015fb4:	f7ec fa3e 	bl	8002434 <__aeabi_dmul>
 8015fb8:	2301      	movs	r3, #1
 8015fba:	3501      	adds	r5, #1
 8015fbc:	1064      	asrs	r4, r4, #1
 8015fbe:	e7d1      	b.n	8015f64 <_strtod_l+0x500>
 8015fc0:	23d4      	movs	r3, #212	; 0xd4
 8015fc2:	049b      	lsls	r3, r3, #18
 8015fc4:	18cf      	adds	r7, r1, r3
 8015fc6:	e7ea      	b.n	8015f9e <_strtod_l+0x53a>
 8015fc8:	2c00      	cmp	r4, #0
 8015fca:	d0e8      	beq.n	8015f9e <_strtod_l+0x53a>
 8015fcc:	230f      	movs	r3, #15
 8015fce:	4264      	negs	r4, r4
 8015fd0:	4023      	ands	r3, r4
 8015fd2:	d00a      	beq.n	8015fea <_strtod_l+0x586>
 8015fd4:	4a15      	ldr	r2, [pc, #84]	; (801602c <_strtod_l+0x5c8>)
 8015fd6:	00db      	lsls	r3, r3, #3
 8015fd8:	18d3      	adds	r3, r2, r3
 8015fda:	0030      	movs	r0, r6
 8015fdc:	681a      	ldr	r2, [r3, #0]
 8015fde:	685b      	ldr	r3, [r3, #4]
 8015fe0:	0039      	movs	r1, r7
 8015fe2:	f7eb fe1d 	bl	8001c20 <__aeabi_ddiv>
 8015fe6:	0006      	movs	r6, r0
 8015fe8:	000f      	movs	r7, r1
 8015fea:	1124      	asrs	r4, r4, #4
 8015fec:	d0d7      	beq.n	8015f9e <_strtod_l+0x53a>
 8015fee:	2c1f      	cmp	r4, #31
 8015ff0:	dd28      	ble.n	8016044 <_strtod_l+0x5e0>
 8015ff2:	2400      	movs	r4, #0
 8015ff4:	9405      	str	r4, [sp, #20]
 8015ff6:	940b      	str	r4, [sp, #44]	; 0x2c
 8015ff8:	940a      	str	r4, [sp, #40]	; 0x28
 8015ffa:	2322      	movs	r3, #34	; 0x22
 8015ffc:	9a04      	ldr	r2, [sp, #16]
 8015ffe:	2600      	movs	r6, #0
 8016000:	6013      	str	r3, [r2, #0]
 8016002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016004:	2700      	movs	r7, #0
 8016006:	2b00      	cmp	r3, #0
 8016008:	d000      	beq.n	801600c <_strtod_l+0x5a8>
 801600a:	e76a      	b.n	8015ee2 <_strtod_l+0x47e>
 801600c:	e56b      	b.n	8015ae6 <_strtod_l+0x82>
 801600e:	46c0      	nop			; (mov r8, r8)
 8016010:	00004e1f 	.word	0x00004e1f
 8016014:	0801d535 	.word	0x0801d535
 8016018:	0801d688 	.word	0x0801d688
 801601c:	7ff00000 	.word	0x7ff00000
 8016020:	0801d53d 	.word	0x0801d53d
 8016024:	0801d4f4 	.word	0x0801d4f4
 8016028:	fff80000 	.word	0xfff80000
 801602c:	0801d6c0 	.word	0x0801d6c0
 8016030:	fcb00000 	.word	0xfcb00000
 8016034:	0801d698 	.word	0x0801d698
 8016038:	7ca00000 	.word	0x7ca00000
 801603c:	7c900000 	.word	0x7c900000
 8016040:	7fefffff 	.word	0x7fefffff
 8016044:	2310      	movs	r3, #16
 8016046:	4023      	ands	r3, r4
 8016048:	9306      	str	r3, [sp, #24]
 801604a:	d001      	beq.n	8016050 <_strtod_l+0x5ec>
 801604c:	236a      	movs	r3, #106	; 0x6a
 801604e:	9306      	str	r3, [sp, #24]
 8016050:	2300      	movs	r3, #0
 8016052:	0030      	movs	r0, r6
 8016054:	0039      	movs	r1, r7
 8016056:	001d      	movs	r5, r3
 8016058:	2c00      	cmp	r4, #0
 801605a:	dd00      	ble.n	801605e <_strtod_l+0x5fa>
 801605c:	e10e      	b.n	801627c <_strtod_l+0x818>
 801605e:	2b00      	cmp	r3, #0
 8016060:	d001      	beq.n	8016066 <_strtod_l+0x602>
 8016062:	0006      	movs	r6, r0
 8016064:	000f      	movs	r7, r1
 8016066:	9b06      	ldr	r3, [sp, #24]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d00f      	beq.n	801608c <_strtod_l+0x628>
 801606c:	236b      	movs	r3, #107	; 0x6b
 801606e:	0079      	lsls	r1, r7, #1
 8016070:	0d49      	lsrs	r1, r1, #21
 8016072:	003a      	movs	r2, r7
 8016074:	1a5b      	subs	r3, r3, r1
 8016076:	2b00      	cmp	r3, #0
 8016078:	dd08      	ble.n	801608c <_strtod_l+0x628>
 801607a:	2b1f      	cmp	r3, #31
 801607c:	dc00      	bgt.n	8016080 <_strtod_l+0x61c>
 801607e:	e112      	b.n	80162a6 <_strtod_l+0x842>
 8016080:	2600      	movs	r6, #0
 8016082:	2b34      	cmp	r3, #52	; 0x34
 8016084:	dc00      	bgt.n	8016088 <_strtod_l+0x624>
 8016086:	e107      	b.n	8016298 <_strtod_l+0x834>
 8016088:	27dc      	movs	r7, #220	; 0xdc
 801608a:	04bf      	lsls	r7, r7, #18
 801608c:	2200      	movs	r2, #0
 801608e:	2300      	movs	r3, #0
 8016090:	0030      	movs	r0, r6
 8016092:	0039      	movs	r1, r7
 8016094:	f7ea f9e2 	bl	800045c <__aeabi_dcmpeq>
 8016098:	2800      	cmp	r0, #0
 801609a:	d1aa      	bne.n	8015ff2 <_strtod_l+0x58e>
 801609c:	9b08      	ldr	r3, [sp, #32]
 801609e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80160a4:	9b05      	ldr	r3, [sp, #20]
 80160a6:	9804      	ldr	r0, [sp, #16]
 80160a8:	f003 f9ae 	bl	8019408 <__s2b>
 80160ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80160ae:	2800      	cmp	r0, #0
 80160b0:	d100      	bne.n	80160b4 <_strtod_l+0x650>
 80160b2:	e709      	b.n	8015ec8 <_strtod_l+0x464>
 80160b4:	9b07      	ldr	r3, [sp, #28]
 80160b6:	9a07      	ldr	r2, [sp, #28]
 80160b8:	17db      	asrs	r3, r3, #31
 80160ba:	4252      	negs	r2, r2
 80160bc:	4013      	ands	r3, r2
 80160be:	9315      	str	r3, [sp, #84]	; 0x54
 80160c0:	9b07      	ldr	r3, [sp, #28]
 80160c2:	2400      	movs	r4, #0
 80160c4:	43db      	mvns	r3, r3
 80160c6:	9a07      	ldr	r2, [sp, #28]
 80160c8:	17db      	asrs	r3, r3, #31
 80160ca:	401a      	ands	r2, r3
 80160cc:	921c      	str	r2, [sp, #112]	; 0x70
 80160ce:	9405      	str	r4, [sp, #20]
 80160d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160d2:	9804      	ldr	r0, [sp, #16]
 80160d4:	6859      	ldr	r1, [r3, #4]
 80160d6:	f003 f927 	bl	8019328 <_Balloc>
 80160da:	900a      	str	r0, [sp, #40]	; 0x28
 80160dc:	2800      	cmp	r0, #0
 80160de:	d100      	bne.n	80160e2 <_strtod_l+0x67e>
 80160e0:	e6f6      	b.n	8015ed0 <_strtod_l+0x46c>
 80160e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160e6:	691b      	ldr	r3, [r3, #16]
 80160e8:	310c      	adds	r1, #12
 80160ea:	1c9a      	adds	r2, r3, #2
 80160ec:	0092      	lsls	r2, r2, #2
 80160ee:	300c      	adds	r0, #12
 80160f0:	9308      	str	r3, [sp, #32]
 80160f2:	f7ff fa32 	bl	801555a <memcpy>
 80160f6:	ab24      	add	r3, sp, #144	; 0x90
 80160f8:	9301      	str	r3, [sp, #4]
 80160fa:	ab23      	add	r3, sp, #140	; 0x8c
 80160fc:	9300      	str	r3, [sp, #0]
 80160fe:	0032      	movs	r2, r6
 8016100:	003b      	movs	r3, r7
 8016102:	9804      	ldr	r0, [sp, #16]
 8016104:	960e      	str	r6, [sp, #56]	; 0x38
 8016106:	970f      	str	r7, [sp, #60]	; 0x3c
 8016108:	f003 fc22 	bl	8019950 <__d2b>
 801610c:	9022      	str	r0, [sp, #136]	; 0x88
 801610e:	2800      	cmp	r0, #0
 8016110:	d100      	bne.n	8016114 <_strtod_l+0x6b0>
 8016112:	e6dd      	b.n	8015ed0 <_strtod_l+0x46c>
 8016114:	2101      	movs	r1, #1
 8016116:	9804      	ldr	r0, [sp, #16]
 8016118:	f003 f9fd 	bl	8019516 <__i2b>
 801611c:	9005      	str	r0, [sp, #20]
 801611e:	2800      	cmp	r0, #0
 8016120:	d100      	bne.n	8016124 <_strtod_l+0x6c0>
 8016122:	e6d5      	b.n	8015ed0 <_strtod_l+0x46c>
 8016124:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016126:	2b00      	cmp	r3, #0
 8016128:	da00      	bge.n	801612c <_strtod_l+0x6c8>
 801612a:	e0c1      	b.n	80162b0 <_strtod_l+0x84c>
 801612c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801612e:	189d      	adds	r5, r3, r2
 8016130:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016132:	4694      	mov	ip, r2
 8016134:	9906      	ldr	r1, [sp, #24]
 8016136:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016138:	1a5b      	subs	r3, r3, r1
 801613a:	2136      	movs	r1, #54	; 0x36
 801613c:	189b      	adds	r3, r3, r2
 801613e:	1a8a      	subs	r2, r1, r2
 8016140:	49b2      	ldr	r1, [pc, #712]	; (801640c <_strtod_l+0x9a8>)
 8016142:	3b01      	subs	r3, #1
 8016144:	2001      	movs	r0, #1
 8016146:	428b      	cmp	r3, r1
 8016148:	db00      	blt.n	801614c <_strtod_l+0x6e8>
 801614a:	e0bd      	b.n	80162c8 <_strtod_l+0x864>
 801614c:	1ac9      	subs	r1, r1, r3
 801614e:	1a52      	subs	r2, r2, r1
 8016150:	291f      	cmp	r1, #31
 8016152:	dd00      	ble.n	8016156 <_strtod_l+0x6f2>
 8016154:	e0b1      	b.n	80162ba <_strtod_l+0x856>
 8016156:	4088      	lsls	r0, r1
 8016158:	2300      	movs	r3, #0
 801615a:	9014      	str	r0, [sp, #80]	; 0x50
 801615c:	9310      	str	r3, [sp, #64]	; 0x40
 801615e:	18ab      	adds	r3, r5, r2
 8016160:	9308      	str	r3, [sp, #32]
 8016162:	0013      	movs	r3, r2
 8016164:	9a06      	ldr	r2, [sp, #24]
 8016166:	4463      	add	r3, ip
 8016168:	18d3      	adds	r3, r2, r3
 801616a:	9a08      	ldr	r2, [sp, #32]
 801616c:	930c      	str	r3, [sp, #48]	; 0x30
 801616e:	002b      	movs	r3, r5
 8016170:	4295      	cmp	r5, r2
 8016172:	dd00      	ble.n	8016176 <_strtod_l+0x712>
 8016174:	0013      	movs	r3, r2
 8016176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016178:	4293      	cmp	r3, r2
 801617a:	dd00      	ble.n	801617e <_strtod_l+0x71a>
 801617c:	0013      	movs	r3, r2
 801617e:	2b00      	cmp	r3, #0
 8016180:	dd06      	ble.n	8016190 <_strtod_l+0x72c>
 8016182:	9a08      	ldr	r2, [sp, #32]
 8016184:	1aed      	subs	r5, r5, r3
 8016186:	1ad2      	subs	r2, r2, r3
 8016188:	9208      	str	r2, [sp, #32]
 801618a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801618c:	1ad2      	subs	r2, r2, r3
 801618e:	920c      	str	r2, [sp, #48]	; 0x30
 8016190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016192:	2b00      	cmp	r3, #0
 8016194:	d017      	beq.n	80161c6 <_strtod_l+0x762>
 8016196:	001a      	movs	r2, r3
 8016198:	9905      	ldr	r1, [sp, #20]
 801619a:	9804      	ldr	r0, [sp, #16]
 801619c:	f003 fa54 	bl	8019648 <__pow5mult>
 80161a0:	9005      	str	r0, [sp, #20]
 80161a2:	2800      	cmp	r0, #0
 80161a4:	d100      	bne.n	80161a8 <_strtod_l+0x744>
 80161a6:	e693      	b.n	8015ed0 <_strtod_l+0x46c>
 80161a8:	0001      	movs	r1, r0
 80161aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80161ac:	9804      	ldr	r0, [sp, #16]
 80161ae:	f003 f9bb 	bl	8019528 <__multiply>
 80161b2:	9012      	str	r0, [sp, #72]	; 0x48
 80161b4:	2800      	cmp	r0, #0
 80161b6:	d100      	bne.n	80161ba <_strtod_l+0x756>
 80161b8:	e68a      	b.n	8015ed0 <_strtod_l+0x46c>
 80161ba:	9922      	ldr	r1, [sp, #136]	; 0x88
 80161bc:	9804      	ldr	r0, [sp, #16]
 80161be:	f003 f8db 	bl	8019378 <_Bfree>
 80161c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80161c4:	9322      	str	r3, [sp, #136]	; 0x88
 80161c6:	9b08      	ldr	r3, [sp, #32]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	dd00      	ble.n	80161ce <_strtod_l+0x76a>
 80161cc:	e07f      	b.n	80162ce <_strtod_l+0x86a>
 80161ce:	9b07      	ldr	r3, [sp, #28]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	dd08      	ble.n	80161e6 <_strtod_l+0x782>
 80161d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80161d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80161d8:	9804      	ldr	r0, [sp, #16]
 80161da:	f003 fa35 	bl	8019648 <__pow5mult>
 80161de:	900a      	str	r0, [sp, #40]	; 0x28
 80161e0:	2800      	cmp	r0, #0
 80161e2:	d100      	bne.n	80161e6 <_strtod_l+0x782>
 80161e4:	e674      	b.n	8015ed0 <_strtod_l+0x46c>
 80161e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	dd08      	ble.n	80161fe <_strtod_l+0x79a>
 80161ec:	001a      	movs	r2, r3
 80161ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80161f0:	9804      	ldr	r0, [sp, #16]
 80161f2:	f003 fa6b 	bl	80196cc <__lshift>
 80161f6:	900a      	str	r0, [sp, #40]	; 0x28
 80161f8:	2800      	cmp	r0, #0
 80161fa:	d100      	bne.n	80161fe <_strtod_l+0x79a>
 80161fc:	e668      	b.n	8015ed0 <_strtod_l+0x46c>
 80161fe:	2d00      	cmp	r5, #0
 8016200:	dd08      	ble.n	8016214 <_strtod_l+0x7b0>
 8016202:	002a      	movs	r2, r5
 8016204:	9905      	ldr	r1, [sp, #20]
 8016206:	9804      	ldr	r0, [sp, #16]
 8016208:	f003 fa60 	bl	80196cc <__lshift>
 801620c:	9005      	str	r0, [sp, #20]
 801620e:	2800      	cmp	r0, #0
 8016210:	d100      	bne.n	8016214 <_strtod_l+0x7b0>
 8016212:	e65d      	b.n	8015ed0 <_strtod_l+0x46c>
 8016214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016216:	9922      	ldr	r1, [sp, #136]	; 0x88
 8016218:	9804      	ldr	r0, [sp, #16]
 801621a:	f003 fac3 	bl	80197a4 <__mdiff>
 801621e:	1e04      	subs	r4, r0, #0
 8016220:	d100      	bne.n	8016224 <_strtod_l+0x7c0>
 8016222:	e655      	b.n	8015ed0 <_strtod_l+0x46c>
 8016224:	2500      	movs	r5, #0
 8016226:	68c3      	ldr	r3, [r0, #12]
 8016228:	9905      	ldr	r1, [sp, #20]
 801622a:	60c5      	str	r5, [r0, #12]
 801622c:	9312      	str	r3, [sp, #72]	; 0x48
 801622e:	f003 fa9f 	bl	8019770 <__mcmp>
 8016232:	42a8      	cmp	r0, r5
 8016234:	da55      	bge.n	80162e2 <_strtod_l+0x87e>
 8016236:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016238:	42ab      	cmp	r3, r5
 801623a:	d11b      	bne.n	8016274 <_strtod_l+0x810>
 801623c:	42ae      	cmp	r6, r5
 801623e:	d119      	bne.n	8016274 <_strtod_l+0x810>
 8016240:	033b      	lsls	r3, r7, #12
 8016242:	42ab      	cmp	r3, r5
 8016244:	d116      	bne.n	8016274 <_strtod_l+0x810>
 8016246:	22d6      	movs	r2, #214	; 0xd6
 8016248:	4b71      	ldr	r3, [pc, #452]	; (8016410 <_strtod_l+0x9ac>)
 801624a:	04d2      	lsls	r2, r2, #19
 801624c:	403b      	ands	r3, r7
 801624e:	4293      	cmp	r3, r2
 8016250:	d910      	bls.n	8016274 <_strtod_l+0x810>
 8016252:	6963      	ldr	r3, [r4, #20]
 8016254:	42ab      	cmp	r3, r5
 8016256:	d102      	bne.n	801625e <_strtod_l+0x7fa>
 8016258:	6923      	ldr	r3, [r4, #16]
 801625a:	2b01      	cmp	r3, #1
 801625c:	dd0a      	ble.n	8016274 <_strtod_l+0x810>
 801625e:	0021      	movs	r1, r4
 8016260:	2201      	movs	r2, #1
 8016262:	9804      	ldr	r0, [sp, #16]
 8016264:	f003 fa32 	bl	80196cc <__lshift>
 8016268:	9905      	ldr	r1, [sp, #20]
 801626a:	0004      	movs	r4, r0
 801626c:	f003 fa80 	bl	8019770 <__mcmp>
 8016270:	2800      	cmp	r0, #0
 8016272:	dc6b      	bgt.n	801634c <_strtod_l+0x8e8>
 8016274:	9b06      	ldr	r3, [sp, #24]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d178      	bne.n	801636c <_strtod_l+0x908>
 801627a:	e632      	b.n	8015ee2 <_strtod_l+0x47e>
 801627c:	2201      	movs	r2, #1
 801627e:	4214      	tst	r4, r2
 8016280:	d007      	beq.n	8016292 <_strtod_l+0x82e>
 8016282:	4a64      	ldr	r2, [pc, #400]	; (8016414 <_strtod_l+0x9b0>)
 8016284:	00eb      	lsls	r3, r5, #3
 8016286:	18d3      	adds	r3, r2, r3
 8016288:	681a      	ldr	r2, [r3, #0]
 801628a:	685b      	ldr	r3, [r3, #4]
 801628c:	f7ec f8d2 	bl	8002434 <__aeabi_dmul>
 8016290:	2301      	movs	r3, #1
 8016292:	3501      	adds	r5, #1
 8016294:	1064      	asrs	r4, r4, #1
 8016296:	e6df      	b.n	8016058 <_strtod_l+0x5f4>
 8016298:	2101      	movs	r1, #1
 801629a:	3b20      	subs	r3, #32
 801629c:	4249      	negs	r1, r1
 801629e:	4099      	lsls	r1, r3
 80162a0:	400a      	ands	r2, r1
 80162a2:	0017      	movs	r7, r2
 80162a4:	e6f2      	b.n	801608c <_strtod_l+0x628>
 80162a6:	2201      	movs	r2, #1
 80162a8:	4252      	negs	r2, r2
 80162aa:	409a      	lsls	r2, r3
 80162ac:	4016      	ands	r6, r2
 80162ae:	e6ed      	b.n	801608c <_strtod_l+0x628>
 80162b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80162b2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80162b4:	1ad2      	subs	r2, r2, r3
 80162b6:	4694      	mov	ip, r2
 80162b8:	e73c      	b.n	8016134 <_strtod_l+0x6d0>
 80162ba:	4957      	ldr	r1, [pc, #348]	; (8016418 <_strtod_l+0x9b4>)
 80162bc:	1acb      	subs	r3, r1, r3
 80162be:	0001      	movs	r1, r0
 80162c0:	4099      	lsls	r1, r3
 80162c2:	9110      	str	r1, [sp, #64]	; 0x40
 80162c4:	9014      	str	r0, [sp, #80]	; 0x50
 80162c6:	e74a      	b.n	801615e <_strtod_l+0x6fa>
 80162c8:	2300      	movs	r3, #0
 80162ca:	9310      	str	r3, [sp, #64]	; 0x40
 80162cc:	e7fa      	b.n	80162c4 <_strtod_l+0x860>
 80162ce:	9a08      	ldr	r2, [sp, #32]
 80162d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80162d2:	9804      	ldr	r0, [sp, #16]
 80162d4:	f003 f9fa 	bl	80196cc <__lshift>
 80162d8:	9022      	str	r0, [sp, #136]	; 0x88
 80162da:	2800      	cmp	r0, #0
 80162dc:	d000      	beq.n	80162e0 <_strtod_l+0x87c>
 80162de:	e776      	b.n	80161ce <_strtod_l+0x76a>
 80162e0:	e5f6      	b.n	8015ed0 <_strtod_l+0x46c>
 80162e2:	970c      	str	r7, [sp, #48]	; 0x30
 80162e4:	2800      	cmp	r0, #0
 80162e6:	d000      	beq.n	80162ea <_strtod_l+0x886>
 80162e8:	e0a0      	b.n	801642c <_strtod_l+0x9c8>
 80162ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80162ec:	033b      	lsls	r3, r7, #12
 80162ee:	0b1b      	lsrs	r3, r3, #12
 80162f0:	2a00      	cmp	r2, #0
 80162f2:	d027      	beq.n	8016344 <_strtod_l+0x8e0>
 80162f4:	4a49      	ldr	r2, [pc, #292]	; (801641c <_strtod_l+0x9b8>)
 80162f6:	4293      	cmp	r3, r2
 80162f8:	d157      	bne.n	80163aa <_strtod_l+0x946>
 80162fa:	2201      	movs	r2, #1
 80162fc:	9b06      	ldr	r3, [sp, #24]
 80162fe:	4252      	negs	r2, r2
 8016300:	0031      	movs	r1, r6
 8016302:	0010      	movs	r0, r2
 8016304:	2b00      	cmp	r3, #0
 8016306:	d00b      	beq.n	8016320 <_strtod_l+0x8bc>
 8016308:	25d4      	movs	r5, #212	; 0xd4
 801630a:	4b41      	ldr	r3, [pc, #260]	; (8016410 <_strtod_l+0x9ac>)
 801630c:	04ed      	lsls	r5, r5, #19
 801630e:	403b      	ands	r3, r7
 8016310:	0010      	movs	r0, r2
 8016312:	42ab      	cmp	r3, r5
 8016314:	d804      	bhi.n	8016320 <_strtod_l+0x8bc>
 8016316:	306c      	adds	r0, #108	; 0x6c
 8016318:	0d1b      	lsrs	r3, r3, #20
 801631a:	1ac3      	subs	r3, r0, r3
 801631c:	409a      	lsls	r2, r3
 801631e:	0010      	movs	r0, r2
 8016320:	4281      	cmp	r1, r0
 8016322:	d142      	bne.n	80163aa <_strtod_l+0x946>
 8016324:	4b3e      	ldr	r3, [pc, #248]	; (8016420 <_strtod_l+0x9bc>)
 8016326:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016328:	429a      	cmp	r2, r3
 801632a:	d102      	bne.n	8016332 <_strtod_l+0x8ce>
 801632c:	1c4b      	adds	r3, r1, #1
 801632e:	d100      	bne.n	8016332 <_strtod_l+0x8ce>
 8016330:	e5ce      	b.n	8015ed0 <_strtod_l+0x46c>
 8016332:	4b37      	ldr	r3, [pc, #220]	; (8016410 <_strtod_l+0x9ac>)
 8016334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016336:	2600      	movs	r6, #0
 8016338:	401a      	ands	r2, r3
 801633a:	0013      	movs	r3, r2
 801633c:	2280      	movs	r2, #128	; 0x80
 801633e:	0352      	lsls	r2, r2, #13
 8016340:	189f      	adds	r7, r3, r2
 8016342:	e797      	b.n	8016274 <_strtod_l+0x810>
 8016344:	2b00      	cmp	r3, #0
 8016346:	d130      	bne.n	80163aa <_strtod_l+0x946>
 8016348:	2e00      	cmp	r6, #0
 801634a:	d12e      	bne.n	80163aa <_strtod_l+0x946>
 801634c:	9906      	ldr	r1, [sp, #24]
 801634e:	003b      	movs	r3, r7
 8016350:	4a2f      	ldr	r2, [pc, #188]	; (8016410 <_strtod_l+0x9ac>)
 8016352:	2900      	cmp	r1, #0
 8016354:	d020      	beq.n	8016398 <_strtod_l+0x934>
 8016356:	0011      	movs	r1, r2
 8016358:	20d6      	movs	r0, #214	; 0xd6
 801635a:	4039      	ands	r1, r7
 801635c:	04c0      	lsls	r0, r0, #19
 801635e:	4281      	cmp	r1, r0
 8016360:	dc1a      	bgt.n	8016398 <_strtod_l+0x934>
 8016362:	23dc      	movs	r3, #220	; 0xdc
 8016364:	049b      	lsls	r3, r3, #18
 8016366:	4299      	cmp	r1, r3
 8016368:	dc00      	bgt.n	801636c <_strtod_l+0x908>
 801636a:	e646      	b.n	8015ffa <_strtod_l+0x596>
 801636c:	4b2d      	ldr	r3, [pc, #180]	; (8016424 <_strtod_l+0x9c0>)
 801636e:	0030      	movs	r0, r6
 8016370:	931b      	str	r3, [sp, #108]	; 0x6c
 8016372:	2300      	movs	r3, #0
 8016374:	931a      	str	r3, [sp, #104]	; 0x68
 8016376:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016378:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801637a:	0039      	movs	r1, r7
 801637c:	f7ec f85a 	bl	8002434 <__aeabi_dmul>
 8016380:	0006      	movs	r6, r0
 8016382:	000f      	movs	r7, r1
 8016384:	1e0b      	subs	r3, r1, #0
 8016386:	d000      	beq.n	801638a <_strtod_l+0x926>
 8016388:	e5ab      	b.n	8015ee2 <_strtod_l+0x47e>
 801638a:	2800      	cmp	r0, #0
 801638c:	d000      	beq.n	8016390 <_strtod_l+0x92c>
 801638e:	e5a8      	b.n	8015ee2 <_strtod_l+0x47e>
 8016390:	9a04      	ldr	r2, [sp, #16]
 8016392:	3322      	adds	r3, #34	; 0x22
 8016394:	6013      	str	r3, [r2, #0]
 8016396:	e5a4      	b.n	8015ee2 <_strtod_l+0x47e>
 8016398:	2601      	movs	r6, #1
 801639a:	4013      	ands	r3, r2
 801639c:	4a22      	ldr	r2, [pc, #136]	; (8016428 <_strtod_l+0x9c4>)
 801639e:	4276      	negs	r6, r6
 80163a0:	189b      	adds	r3, r3, r2
 80163a2:	4a1e      	ldr	r2, [pc, #120]	; (801641c <_strtod_l+0x9b8>)
 80163a4:	431a      	orrs	r2, r3
 80163a6:	0017      	movs	r7, r2
 80163a8:	e764      	b.n	8016274 <_strtod_l+0x810>
 80163aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d015      	beq.n	80163dc <_strtod_l+0x978>
 80163b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80163b4:	4213      	tst	r3, r2
 80163b6:	d100      	bne.n	80163ba <_strtod_l+0x956>
 80163b8:	e75c      	b.n	8016274 <_strtod_l+0x810>
 80163ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80163bc:	9a06      	ldr	r2, [sp, #24]
 80163be:	0030      	movs	r0, r6
 80163c0:	0039      	movs	r1, r7
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d00f      	beq.n	80163e6 <_strtod_l+0x982>
 80163c6:	f7ff fb35 	bl	8015a34 <sulp>
 80163ca:	0002      	movs	r2, r0
 80163cc:	000b      	movs	r3, r1
 80163ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80163d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80163d2:	f7eb f909 	bl	80015e8 <__aeabi_dadd>
 80163d6:	0006      	movs	r6, r0
 80163d8:	000f      	movs	r7, r1
 80163da:	e74b      	b.n	8016274 <_strtod_l+0x810>
 80163dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80163de:	4233      	tst	r3, r6
 80163e0:	d100      	bne.n	80163e4 <_strtod_l+0x980>
 80163e2:	e747      	b.n	8016274 <_strtod_l+0x810>
 80163e4:	e7e9      	b.n	80163ba <_strtod_l+0x956>
 80163e6:	f7ff fb25 	bl	8015a34 <sulp>
 80163ea:	0002      	movs	r2, r0
 80163ec:	000b      	movs	r3, r1
 80163ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80163f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80163f2:	f7ec fa91 	bl	8002918 <__aeabi_dsub>
 80163f6:	2200      	movs	r2, #0
 80163f8:	2300      	movs	r3, #0
 80163fa:	0006      	movs	r6, r0
 80163fc:	000f      	movs	r7, r1
 80163fe:	f7ea f82d 	bl	800045c <__aeabi_dcmpeq>
 8016402:	2800      	cmp	r0, #0
 8016404:	d000      	beq.n	8016408 <_strtod_l+0x9a4>
 8016406:	e5f8      	b.n	8015ffa <_strtod_l+0x596>
 8016408:	e734      	b.n	8016274 <_strtod_l+0x810>
 801640a:	46c0      	nop			; (mov r8, r8)
 801640c:	fffffc02 	.word	0xfffffc02
 8016410:	7ff00000 	.word	0x7ff00000
 8016414:	0801d508 	.word	0x0801d508
 8016418:	fffffbe2 	.word	0xfffffbe2
 801641c:	000fffff 	.word	0x000fffff
 8016420:	7fefffff 	.word	0x7fefffff
 8016424:	39500000 	.word	0x39500000
 8016428:	fff00000 	.word	0xfff00000
 801642c:	9905      	ldr	r1, [sp, #20]
 801642e:	0020      	movs	r0, r4
 8016430:	f003 fae2 	bl	80199f8 <__ratio>
 8016434:	2380      	movs	r3, #128	; 0x80
 8016436:	2200      	movs	r2, #0
 8016438:	05db      	lsls	r3, r3, #23
 801643a:	9008      	str	r0, [sp, #32]
 801643c:	9109      	str	r1, [sp, #36]	; 0x24
 801643e:	f7ea f81d 	bl	800047c <__aeabi_dcmple>
 8016442:	2800      	cmp	r0, #0
 8016444:	d100      	bne.n	8016448 <_strtod_l+0x9e4>
 8016446:	e07f      	b.n	8016548 <_strtod_l+0xae4>
 8016448:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801644a:	2b00      	cmp	r3, #0
 801644c:	d04b      	beq.n	80164e6 <_strtod_l+0xa82>
 801644e:	2200      	movs	r2, #0
 8016450:	4b8a      	ldr	r3, [pc, #552]	; (801667c <_strtod_l+0xc18>)
 8016452:	9210      	str	r2, [sp, #64]	; 0x40
 8016454:	9311      	str	r3, [sp, #68]	; 0x44
 8016456:	4b89      	ldr	r3, [pc, #548]	; (801667c <_strtod_l+0xc18>)
 8016458:	9308      	str	r3, [sp, #32]
 801645a:	4a89      	ldr	r2, [pc, #548]	; (8016680 <_strtod_l+0xc1c>)
 801645c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801645e:	4013      	ands	r3, r2
 8016460:	9314      	str	r3, [sp, #80]	; 0x50
 8016462:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016464:	4b87      	ldr	r3, [pc, #540]	; (8016684 <_strtod_l+0xc20>)
 8016466:	429a      	cmp	r2, r3
 8016468:	d000      	beq.n	801646c <_strtod_l+0xa08>
 801646a:	e0ba      	b.n	80165e2 <_strtod_l+0xb7e>
 801646c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801646e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016470:	921a      	str	r2, [sp, #104]	; 0x68
 8016472:	931b      	str	r3, [sp, #108]	; 0x6c
 8016474:	4a84      	ldr	r2, [pc, #528]	; (8016688 <_strtod_l+0xc24>)
 8016476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016478:	4694      	mov	ip, r2
 801647a:	4463      	add	r3, ip
 801647c:	001f      	movs	r7, r3
 801647e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016482:	0030      	movs	r0, r6
 8016484:	0039      	movs	r1, r7
 8016486:	920c      	str	r2, [sp, #48]	; 0x30
 8016488:	930d      	str	r3, [sp, #52]	; 0x34
 801648a:	f003 f9ef 	bl	801986c <__ulp>
 801648e:	0002      	movs	r2, r0
 8016490:	000b      	movs	r3, r1
 8016492:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016494:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016496:	f7eb ffcd 	bl	8002434 <__aeabi_dmul>
 801649a:	0032      	movs	r2, r6
 801649c:	003b      	movs	r3, r7
 801649e:	f7eb f8a3 	bl	80015e8 <__aeabi_dadd>
 80164a2:	4a77      	ldr	r2, [pc, #476]	; (8016680 <_strtod_l+0xc1c>)
 80164a4:	4b79      	ldr	r3, [pc, #484]	; (801668c <_strtod_l+0xc28>)
 80164a6:	0006      	movs	r6, r0
 80164a8:	400a      	ands	r2, r1
 80164aa:	429a      	cmp	r2, r3
 80164ac:	d964      	bls.n	8016578 <_strtod_l+0xb14>
 80164ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164b0:	4a77      	ldr	r2, [pc, #476]	; (8016690 <_strtod_l+0xc2c>)
 80164b2:	4293      	cmp	r3, r2
 80164b4:	d103      	bne.n	80164be <_strtod_l+0xa5a>
 80164b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164b8:	3301      	adds	r3, #1
 80164ba:	d100      	bne.n	80164be <_strtod_l+0xa5a>
 80164bc:	e508      	b.n	8015ed0 <_strtod_l+0x46c>
 80164be:	2601      	movs	r6, #1
 80164c0:	4f73      	ldr	r7, [pc, #460]	; (8016690 <_strtod_l+0xc2c>)
 80164c2:	4276      	negs	r6, r6
 80164c4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80164c6:	9804      	ldr	r0, [sp, #16]
 80164c8:	f002 ff56 	bl	8019378 <_Bfree>
 80164cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80164ce:	9804      	ldr	r0, [sp, #16]
 80164d0:	f002 ff52 	bl	8019378 <_Bfree>
 80164d4:	9905      	ldr	r1, [sp, #20]
 80164d6:	9804      	ldr	r0, [sp, #16]
 80164d8:	f002 ff4e 	bl	8019378 <_Bfree>
 80164dc:	0021      	movs	r1, r4
 80164de:	9804      	ldr	r0, [sp, #16]
 80164e0:	f002 ff4a 	bl	8019378 <_Bfree>
 80164e4:	e5f4      	b.n	80160d0 <_strtod_l+0x66c>
 80164e6:	2e00      	cmp	r6, #0
 80164e8:	d11e      	bne.n	8016528 <_strtod_l+0xac4>
 80164ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164ec:	031b      	lsls	r3, r3, #12
 80164ee:	d121      	bne.n	8016534 <_strtod_l+0xad0>
 80164f0:	9808      	ldr	r0, [sp, #32]
 80164f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80164f4:	2200      	movs	r2, #0
 80164f6:	4b61      	ldr	r3, [pc, #388]	; (801667c <_strtod_l+0xc18>)
 80164f8:	f7e9 ffb6 	bl	8000468 <__aeabi_dcmplt>
 80164fc:	2800      	cmp	r0, #0
 80164fe:	d11f      	bne.n	8016540 <_strtod_l+0xadc>
 8016500:	9808      	ldr	r0, [sp, #32]
 8016502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016504:	2200      	movs	r2, #0
 8016506:	4b63      	ldr	r3, [pc, #396]	; (8016694 <_strtod_l+0xc30>)
 8016508:	f7eb ff94 	bl	8002434 <__aeabi_dmul>
 801650c:	0005      	movs	r5, r0
 801650e:	9108      	str	r1, [sp, #32]
 8016510:	2280      	movs	r2, #128	; 0x80
 8016512:	0612      	lsls	r2, r2, #24
 8016514:	4694      	mov	ip, r2
 8016516:	9b08      	ldr	r3, [sp, #32]
 8016518:	951e      	str	r5, [sp, #120]	; 0x78
 801651a:	4463      	add	r3, ip
 801651c:	931f      	str	r3, [sp, #124]	; 0x7c
 801651e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016520:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016522:	9210      	str	r2, [sp, #64]	; 0x40
 8016524:	9311      	str	r3, [sp, #68]	; 0x44
 8016526:	e798      	b.n	801645a <_strtod_l+0x9f6>
 8016528:	2e01      	cmp	r6, #1
 801652a:	d103      	bne.n	8016534 <_strtod_l+0xad0>
 801652c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801652e:	2b00      	cmp	r3, #0
 8016530:	d100      	bne.n	8016534 <_strtod_l+0xad0>
 8016532:	e562      	b.n	8015ffa <_strtod_l+0x596>
 8016534:	2200      	movs	r2, #0
 8016536:	4b58      	ldr	r3, [pc, #352]	; (8016698 <_strtod_l+0xc34>)
 8016538:	2500      	movs	r5, #0
 801653a:	9210      	str	r2, [sp, #64]	; 0x40
 801653c:	9311      	str	r3, [sp, #68]	; 0x44
 801653e:	e78a      	b.n	8016456 <_strtod_l+0x9f2>
 8016540:	4b54      	ldr	r3, [pc, #336]	; (8016694 <_strtod_l+0xc30>)
 8016542:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016544:	9308      	str	r3, [sp, #32]
 8016546:	e7e3      	b.n	8016510 <_strtod_l+0xaac>
 8016548:	4b52      	ldr	r3, [pc, #328]	; (8016694 <_strtod_l+0xc30>)
 801654a:	9808      	ldr	r0, [sp, #32]
 801654c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801654e:	2200      	movs	r2, #0
 8016550:	f7eb ff70 	bl	8002434 <__aeabi_dmul>
 8016554:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016556:	0005      	movs	r5, r0
 8016558:	9108      	str	r1, [sp, #32]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d107      	bne.n	801656e <_strtod_l+0xb0a>
 801655e:	2380      	movs	r3, #128	; 0x80
 8016560:	061b      	lsls	r3, r3, #24
 8016562:	18cb      	adds	r3, r1, r3
 8016564:	9016      	str	r0, [sp, #88]	; 0x58
 8016566:	9317      	str	r3, [sp, #92]	; 0x5c
 8016568:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801656a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801656c:	e7d9      	b.n	8016522 <_strtod_l+0xabe>
 801656e:	0002      	movs	r2, r0
 8016570:	9b08      	ldr	r3, [sp, #32]
 8016572:	9216      	str	r2, [sp, #88]	; 0x58
 8016574:	9317      	str	r3, [sp, #92]	; 0x5c
 8016576:	e7f7      	b.n	8016568 <_strtod_l+0xb04>
 8016578:	23d4      	movs	r3, #212	; 0xd4
 801657a:	049b      	lsls	r3, r3, #18
 801657c:	18cf      	adds	r7, r1, r3
 801657e:	9b06      	ldr	r3, [sp, #24]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d19f      	bne.n	80164c4 <_strtod_l+0xa60>
 8016584:	4b3e      	ldr	r3, [pc, #248]	; (8016680 <_strtod_l+0xc1c>)
 8016586:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016588:	970c      	str	r7, [sp, #48]	; 0x30
 801658a:	403b      	ands	r3, r7
 801658c:	429a      	cmp	r2, r3
 801658e:	d199      	bne.n	80164c4 <_strtod_l+0xa60>
 8016590:	9908      	ldr	r1, [sp, #32]
 8016592:	0028      	movs	r0, r5
 8016594:	f7ec fd24 	bl	8002fe0 <__aeabi_d2iz>
 8016598:	f7ec fd58 	bl	800304c <__aeabi_i2d>
 801659c:	000b      	movs	r3, r1
 801659e:	0002      	movs	r2, r0
 80165a0:	9908      	ldr	r1, [sp, #32]
 80165a2:	0028      	movs	r0, r5
 80165a4:	f7ec f9b8 	bl	8002918 <__aeabi_dsub>
 80165a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80165aa:	9008      	str	r0, [sp, #32]
 80165ac:	9109      	str	r1, [sp, #36]	; 0x24
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d104      	bne.n	80165bc <_strtod_l+0xb58>
 80165b2:	2e00      	cmp	r6, #0
 80165b4:	d102      	bne.n	80165bc <_strtod_l+0xb58>
 80165b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165b8:	031b      	lsls	r3, r3, #12
 80165ba:	d058      	beq.n	801666e <_strtod_l+0xc0a>
 80165bc:	9808      	ldr	r0, [sp, #32]
 80165be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80165c0:	4a36      	ldr	r2, [pc, #216]	; (801669c <_strtod_l+0xc38>)
 80165c2:	4b37      	ldr	r3, [pc, #220]	; (80166a0 <_strtod_l+0xc3c>)
 80165c4:	f7e9 ff50 	bl	8000468 <__aeabi_dcmplt>
 80165c8:	2800      	cmp	r0, #0
 80165ca:	d000      	beq.n	80165ce <_strtod_l+0xb6a>
 80165cc:	e489      	b.n	8015ee2 <_strtod_l+0x47e>
 80165ce:	9808      	ldr	r0, [sp, #32]
 80165d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80165d2:	4a34      	ldr	r2, [pc, #208]	; (80166a4 <_strtod_l+0xc40>)
 80165d4:	4b2f      	ldr	r3, [pc, #188]	; (8016694 <_strtod_l+0xc30>)
 80165d6:	f7e9 ff5b 	bl	8000490 <__aeabi_dcmpgt>
 80165da:	2800      	cmp	r0, #0
 80165dc:	d100      	bne.n	80165e0 <_strtod_l+0xb7c>
 80165de:	e771      	b.n	80164c4 <_strtod_l+0xa60>
 80165e0:	e47f      	b.n	8015ee2 <_strtod_l+0x47e>
 80165e2:	9b06      	ldr	r3, [sp, #24]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d02a      	beq.n	801663e <_strtod_l+0xbda>
 80165e8:	23d4      	movs	r3, #212	; 0xd4
 80165ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80165ec:	04db      	lsls	r3, r3, #19
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d825      	bhi.n	801663e <_strtod_l+0xbda>
 80165f2:	4a2d      	ldr	r2, [pc, #180]	; (80166a8 <_strtod_l+0xc44>)
 80165f4:	4b2d      	ldr	r3, [pc, #180]	; (80166ac <_strtod_l+0xc48>)
 80165f6:	0028      	movs	r0, r5
 80165f8:	9908      	ldr	r1, [sp, #32]
 80165fa:	f7e9 ff3f 	bl	800047c <__aeabi_dcmple>
 80165fe:	2800      	cmp	r0, #0
 8016600:	d016      	beq.n	8016630 <_strtod_l+0xbcc>
 8016602:	0028      	movs	r0, r5
 8016604:	9908      	ldr	r1, [sp, #32]
 8016606:	f7e9 fffd 	bl	8000604 <__aeabi_d2uiz>
 801660a:	2800      	cmp	r0, #0
 801660c:	d100      	bne.n	8016610 <_strtod_l+0xbac>
 801660e:	3001      	adds	r0, #1
 8016610:	f7ec fd56 	bl	80030c0 <__aeabi_ui2d>
 8016614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016616:	0005      	movs	r5, r0
 8016618:	9108      	str	r1, [sp, #32]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d122      	bne.n	8016664 <_strtod_l+0xc00>
 801661e:	2380      	movs	r3, #128	; 0x80
 8016620:	061b      	lsls	r3, r3, #24
 8016622:	18cb      	adds	r3, r1, r3
 8016624:	9018      	str	r0, [sp, #96]	; 0x60
 8016626:	9319      	str	r3, [sp, #100]	; 0x64
 8016628:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801662a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801662c:	9210      	str	r2, [sp, #64]	; 0x40
 801662e:	9311      	str	r3, [sp, #68]	; 0x44
 8016630:	22d6      	movs	r2, #214	; 0xd6
 8016632:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016634:	04d2      	lsls	r2, r2, #19
 8016636:	189b      	adds	r3, r3, r2
 8016638:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801663a:	1a9b      	subs	r3, r3, r2
 801663c:	9311      	str	r3, [sp, #68]	; 0x44
 801663e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016640:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016642:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016644:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8016646:	f003 f911 	bl	801986c <__ulp>
 801664a:	0002      	movs	r2, r0
 801664c:	000b      	movs	r3, r1
 801664e:	0030      	movs	r0, r6
 8016650:	0039      	movs	r1, r7
 8016652:	f7eb feef 	bl	8002434 <__aeabi_dmul>
 8016656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801665a:	f7ea ffc5 	bl	80015e8 <__aeabi_dadd>
 801665e:	0006      	movs	r6, r0
 8016660:	000f      	movs	r7, r1
 8016662:	e78c      	b.n	801657e <_strtod_l+0xb1a>
 8016664:	0002      	movs	r2, r0
 8016666:	9b08      	ldr	r3, [sp, #32]
 8016668:	9218      	str	r2, [sp, #96]	; 0x60
 801666a:	9319      	str	r3, [sp, #100]	; 0x64
 801666c:	e7dc      	b.n	8016628 <_strtod_l+0xbc4>
 801666e:	4a0b      	ldr	r2, [pc, #44]	; (801669c <_strtod_l+0xc38>)
 8016670:	4b0f      	ldr	r3, [pc, #60]	; (80166b0 <_strtod_l+0xc4c>)
 8016672:	9808      	ldr	r0, [sp, #32]
 8016674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016676:	f7e9 fef7 	bl	8000468 <__aeabi_dcmplt>
 801667a:	e7ae      	b.n	80165da <_strtod_l+0xb76>
 801667c:	3ff00000 	.word	0x3ff00000
 8016680:	7ff00000 	.word	0x7ff00000
 8016684:	7fe00000 	.word	0x7fe00000
 8016688:	fcb00000 	.word	0xfcb00000
 801668c:	7c9fffff 	.word	0x7c9fffff
 8016690:	7fefffff 	.word	0x7fefffff
 8016694:	3fe00000 	.word	0x3fe00000
 8016698:	bff00000 	.word	0xbff00000
 801669c:	94a03595 	.word	0x94a03595
 80166a0:	3fdfffff 	.word	0x3fdfffff
 80166a4:	35afe535 	.word	0x35afe535
 80166a8:	ffc00000 	.word	0xffc00000
 80166ac:	41dfffff 	.word	0x41dfffff
 80166b0:	3fcfffff 	.word	0x3fcfffff

080166b4 <strtod>:
 80166b4:	4b06      	ldr	r3, [pc, #24]	; (80166d0 <strtod+0x1c>)
 80166b6:	b510      	push	{r4, lr}
 80166b8:	0004      	movs	r4, r0
 80166ba:	6818      	ldr	r0, [r3, #0]
 80166bc:	000a      	movs	r2, r1
 80166be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d100      	bne.n	80166c6 <strtod+0x12>
 80166c4:	4b03      	ldr	r3, [pc, #12]	; (80166d4 <strtod+0x20>)
 80166c6:	0021      	movs	r1, r4
 80166c8:	f7ff f9cc 	bl	8015a64 <_strtod_l>
 80166cc:	bd10      	pop	{r4, pc}
 80166ce:	46c0      	nop			; (mov r8, r8)
 80166d0:	200000d8 	.word	0x200000d8
 80166d4:	20000508 	.word	0x20000508

080166d8 <strtok>:
 80166d8:	4b03      	ldr	r3, [pc, #12]	; (80166e8 <strtok+0x10>)
 80166da:	b510      	push	{r4, lr}
 80166dc:	681a      	ldr	r2, [r3, #0]
 80166de:	2301      	movs	r3, #1
 80166e0:	325c      	adds	r2, #92	; 0x5c
 80166e2:	f000 f803 	bl	80166ec <__strtok_r>
 80166e6:	bd10      	pop	{r4, pc}
 80166e8:	200000d8 	.word	0x200000d8

080166ec <__strtok_r>:
 80166ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166ee:	2800      	cmp	r0, #0
 80166f0:	d104      	bne.n	80166fc <__strtok_r+0x10>
 80166f2:	6810      	ldr	r0, [r2, #0]
 80166f4:	2800      	cmp	r0, #0
 80166f6:	d101      	bne.n	80166fc <__strtok_r+0x10>
 80166f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166fa:	0020      	movs	r0, r4
 80166fc:	000e      	movs	r6, r1
 80166fe:	7805      	ldrb	r5, [r0, #0]
 8016700:	1c44      	adds	r4, r0, #1
 8016702:	7837      	ldrb	r7, [r6, #0]
 8016704:	2f00      	cmp	r7, #0
 8016706:	d104      	bne.n	8016712 <__strtok_r+0x26>
 8016708:	2d00      	cmp	r5, #0
 801670a:	d110      	bne.n	801672e <__strtok_r+0x42>
 801670c:	6015      	str	r5, [r2, #0]
 801670e:	0028      	movs	r0, r5
 8016710:	e7f2      	b.n	80166f8 <__strtok_r+0xc>
 8016712:	3601      	adds	r6, #1
 8016714:	42bd      	cmp	r5, r7
 8016716:	d1f4      	bne.n	8016702 <__strtok_r+0x16>
 8016718:	2b00      	cmp	r3, #0
 801671a:	d1ee      	bne.n	80166fa <__strtok_r+0xe>
 801671c:	6014      	str	r4, [r2, #0]
 801671e:	7003      	strb	r3, [r0, #0]
 8016720:	e7ea      	b.n	80166f8 <__strtok_r+0xc>
 8016722:	0033      	movs	r3, r6
 8016724:	e00d      	b.n	8016742 <__strtok_r+0x56>
 8016726:	3501      	adds	r5, #1
 8016728:	2f00      	cmp	r7, #0
 801672a:	d103      	bne.n	8016734 <__strtok_r+0x48>
 801672c:	001c      	movs	r4, r3
 801672e:	000d      	movs	r5, r1
 8016730:	7826      	ldrb	r6, [r4, #0]
 8016732:	1c63      	adds	r3, r4, #1
 8016734:	782f      	ldrb	r7, [r5, #0]
 8016736:	42be      	cmp	r6, r7
 8016738:	d1f5      	bne.n	8016726 <__strtok_r+0x3a>
 801673a:	2e00      	cmp	r6, #0
 801673c:	d0f1      	beq.n	8016722 <__strtok_r+0x36>
 801673e:	2100      	movs	r1, #0
 8016740:	7021      	strb	r1, [r4, #0]
 8016742:	6013      	str	r3, [r2, #0]
 8016744:	e7d8      	b.n	80166f8 <__strtok_r+0xc>
	...

08016748 <_strtol_l.isra.0>:
 8016748:	b5f0      	push	{r4, r5, r6, r7, lr}
 801674a:	001f      	movs	r7, r3
 801674c:	000e      	movs	r6, r1
 801674e:	b087      	sub	sp, #28
 8016750:	9005      	str	r0, [sp, #20]
 8016752:	9101      	str	r1, [sp, #4]
 8016754:	9202      	str	r2, [sp, #8]
 8016756:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016758:	7834      	ldrb	r4, [r6, #0]
 801675a:	f7fe fc9f 	bl	801509c <__locale_ctype_ptr_l>
 801675e:	2208      	movs	r2, #8
 8016760:	1900      	adds	r0, r0, r4
 8016762:	7843      	ldrb	r3, [r0, #1]
 8016764:	1c75      	adds	r5, r6, #1
 8016766:	4013      	ands	r3, r2
 8016768:	d136      	bne.n	80167d8 <_strtol_l.isra.0+0x90>
 801676a:	2c2d      	cmp	r4, #45	; 0x2d
 801676c:	d136      	bne.n	80167dc <_strtol_l.isra.0+0x94>
 801676e:	1cb5      	adds	r5, r6, #2
 8016770:	7874      	ldrb	r4, [r6, #1]
 8016772:	2601      	movs	r6, #1
 8016774:	2f00      	cmp	r7, #0
 8016776:	d062      	beq.n	801683e <_strtol_l.isra.0+0xf6>
 8016778:	2f10      	cmp	r7, #16
 801677a:	d109      	bne.n	8016790 <_strtol_l.isra.0+0x48>
 801677c:	2c30      	cmp	r4, #48	; 0x30
 801677e:	d107      	bne.n	8016790 <_strtol_l.isra.0+0x48>
 8016780:	2220      	movs	r2, #32
 8016782:	782b      	ldrb	r3, [r5, #0]
 8016784:	4393      	bics	r3, r2
 8016786:	2b58      	cmp	r3, #88	; 0x58
 8016788:	d154      	bne.n	8016834 <_strtol_l.isra.0+0xec>
 801678a:	2710      	movs	r7, #16
 801678c:	786c      	ldrb	r4, [r5, #1]
 801678e:	3502      	adds	r5, #2
 8016790:	4b2d      	ldr	r3, [pc, #180]	; (8016848 <_strtol_l.isra.0+0x100>)
 8016792:	0039      	movs	r1, r7
 8016794:	18f3      	adds	r3, r6, r3
 8016796:	0018      	movs	r0, r3
 8016798:	9303      	str	r3, [sp, #12]
 801679a:	f7e9 fd5f 	bl	800025c <__aeabi_uidivmod>
 801679e:	9104      	str	r1, [sp, #16]
 80167a0:	2101      	movs	r1, #1
 80167a2:	2300      	movs	r3, #0
 80167a4:	4249      	negs	r1, r1
 80167a6:	0002      	movs	r2, r0
 80167a8:	468c      	mov	ip, r1
 80167aa:	0018      	movs	r0, r3
 80167ac:	0021      	movs	r1, r4
 80167ae:	3930      	subs	r1, #48	; 0x30
 80167b0:	2909      	cmp	r1, #9
 80167b2:	d81a      	bhi.n	80167ea <_strtol_l.isra.0+0xa2>
 80167b4:	000c      	movs	r4, r1
 80167b6:	42a7      	cmp	r7, r4
 80167b8:	dd23      	ble.n	8016802 <_strtol_l.isra.0+0xba>
 80167ba:	1c59      	adds	r1, r3, #1
 80167bc:	d009      	beq.n	80167d2 <_strtol_l.isra.0+0x8a>
 80167be:	4663      	mov	r3, ip
 80167c0:	4282      	cmp	r2, r0
 80167c2:	d306      	bcc.n	80167d2 <_strtol_l.isra.0+0x8a>
 80167c4:	d102      	bne.n	80167cc <_strtol_l.isra.0+0x84>
 80167c6:	9904      	ldr	r1, [sp, #16]
 80167c8:	42a1      	cmp	r1, r4
 80167ca:	db02      	blt.n	80167d2 <_strtol_l.isra.0+0x8a>
 80167cc:	2301      	movs	r3, #1
 80167ce:	4378      	muls	r0, r7
 80167d0:	1820      	adds	r0, r4, r0
 80167d2:	782c      	ldrb	r4, [r5, #0]
 80167d4:	3501      	adds	r5, #1
 80167d6:	e7e9      	b.n	80167ac <_strtol_l.isra.0+0x64>
 80167d8:	002e      	movs	r6, r5
 80167da:	e7bc      	b.n	8016756 <_strtol_l.isra.0+0xe>
 80167dc:	2c2b      	cmp	r4, #43	; 0x2b
 80167de:	d001      	beq.n	80167e4 <_strtol_l.isra.0+0x9c>
 80167e0:	001e      	movs	r6, r3
 80167e2:	e7c7      	b.n	8016774 <_strtol_l.isra.0+0x2c>
 80167e4:	1cb5      	adds	r5, r6, #2
 80167e6:	7874      	ldrb	r4, [r6, #1]
 80167e8:	e7fa      	b.n	80167e0 <_strtol_l.isra.0+0x98>
 80167ea:	0021      	movs	r1, r4
 80167ec:	3941      	subs	r1, #65	; 0x41
 80167ee:	2919      	cmp	r1, #25
 80167f0:	d801      	bhi.n	80167f6 <_strtol_l.isra.0+0xae>
 80167f2:	3c37      	subs	r4, #55	; 0x37
 80167f4:	e7df      	b.n	80167b6 <_strtol_l.isra.0+0x6e>
 80167f6:	0021      	movs	r1, r4
 80167f8:	3961      	subs	r1, #97	; 0x61
 80167fa:	2919      	cmp	r1, #25
 80167fc:	d801      	bhi.n	8016802 <_strtol_l.isra.0+0xba>
 80167fe:	3c57      	subs	r4, #87	; 0x57
 8016800:	e7d9      	b.n	80167b6 <_strtol_l.isra.0+0x6e>
 8016802:	1c5a      	adds	r2, r3, #1
 8016804:	d108      	bne.n	8016818 <_strtol_l.isra.0+0xd0>
 8016806:	9a05      	ldr	r2, [sp, #20]
 8016808:	3323      	adds	r3, #35	; 0x23
 801680a:	6013      	str	r3, [r2, #0]
 801680c:	9b02      	ldr	r3, [sp, #8]
 801680e:	9803      	ldr	r0, [sp, #12]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d109      	bne.n	8016828 <_strtol_l.isra.0+0xe0>
 8016814:	b007      	add	sp, #28
 8016816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016818:	2e00      	cmp	r6, #0
 801681a:	d000      	beq.n	801681e <_strtol_l.isra.0+0xd6>
 801681c:	4240      	negs	r0, r0
 801681e:	9a02      	ldr	r2, [sp, #8]
 8016820:	2a00      	cmp	r2, #0
 8016822:	d0f7      	beq.n	8016814 <_strtol_l.isra.0+0xcc>
 8016824:	2b00      	cmp	r3, #0
 8016826:	d001      	beq.n	801682c <_strtol_l.isra.0+0xe4>
 8016828:	1e6b      	subs	r3, r5, #1
 801682a:	9301      	str	r3, [sp, #4]
 801682c:	9b02      	ldr	r3, [sp, #8]
 801682e:	9a01      	ldr	r2, [sp, #4]
 8016830:	601a      	str	r2, [r3, #0]
 8016832:	e7ef      	b.n	8016814 <_strtol_l.isra.0+0xcc>
 8016834:	2430      	movs	r4, #48	; 0x30
 8016836:	2f00      	cmp	r7, #0
 8016838:	d1aa      	bne.n	8016790 <_strtol_l.isra.0+0x48>
 801683a:	2708      	movs	r7, #8
 801683c:	e7a8      	b.n	8016790 <_strtol_l.isra.0+0x48>
 801683e:	2c30      	cmp	r4, #48	; 0x30
 8016840:	d09e      	beq.n	8016780 <_strtol_l.isra.0+0x38>
 8016842:	270a      	movs	r7, #10
 8016844:	e7a4      	b.n	8016790 <_strtol_l.isra.0+0x48>
 8016846:	46c0      	nop			; (mov r8, r8)
 8016848:	7fffffff 	.word	0x7fffffff

0801684c <strtol>:
 801684c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801684e:	0013      	movs	r3, r2
 8016850:	4a06      	ldr	r2, [pc, #24]	; (801686c <strtol+0x20>)
 8016852:	0005      	movs	r5, r0
 8016854:	6810      	ldr	r0, [r2, #0]
 8016856:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8016858:	2c00      	cmp	r4, #0
 801685a:	d100      	bne.n	801685e <strtol+0x12>
 801685c:	4c04      	ldr	r4, [pc, #16]	; (8016870 <strtol+0x24>)
 801685e:	000a      	movs	r2, r1
 8016860:	9400      	str	r4, [sp, #0]
 8016862:	0029      	movs	r1, r5
 8016864:	f7ff ff70 	bl	8016748 <_strtol_l.isra.0>
 8016868:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801686a:	46c0      	nop			; (mov r8, r8)
 801686c:	200000d8 	.word	0x200000d8
 8016870:	20000508 	.word	0x20000508

08016874 <_svfprintf_r>:
 8016874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016876:	b0d9      	sub	sp, #356	; 0x164
 8016878:	910b      	str	r1, [sp, #44]	; 0x2c
 801687a:	9209      	str	r2, [sp, #36]	; 0x24
 801687c:	001c      	movs	r4, r3
 801687e:	900a      	str	r0, [sp, #40]	; 0x28
 8016880:	f002 fd26 	bl	80192d0 <_localeconv_r>
 8016884:	6803      	ldr	r3, [r0, #0]
 8016886:	0018      	movs	r0, r3
 8016888:	931c      	str	r3, [sp, #112]	; 0x70
 801688a:	f7e9 fc45 	bl	8000118 <strlen>
 801688e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016890:	9014      	str	r0, [sp, #80]	; 0x50
 8016892:	899b      	ldrh	r3, [r3, #12]
 8016894:	061b      	lsls	r3, r3, #24
 8016896:	d518      	bpl.n	80168ca <_svfprintf_r+0x56>
 8016898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801689a:	691b      	ldr	r3, [r3, #16]
 801689c:	9308      	str	r3, [sp, #32]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d113      	bne.n	80168ca <_svfprintf_r+0x56>
 80168a2:	2140      	movs	r1, #64	; 0x40
 80168a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168a6:	f7fe fc1f 	bl	80150e8 <_malloc_r>
 80168aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168ac:	6018      	str	r0, [r3, #0]
 80168ae:	6118      	str	r0, [r3, #16]
 80168b0:	2800      	cmp	r0, #0
 80168b2:	d107      	bne.n	80168c4 <_svfprintf_r+0x50>
 80168b4:	230c      	movs	r3, #12
 80168b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80168b8:	6013      	str	r3, [r2, #0]
 80168ba:	3b0d      	subs	r3, #13
 80168bc:	9315      	str	r3, [sp, #84]	; 0x54
 80168be:	9815      	ldr	r0, [sp, #84]	; 0x54
 80168c0:	b059      	add	sp, #356	; 0x164
 80168c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168c4:	2340      	movs	r3, #64	; 0x40
 80168c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80168c8:	6153      	str	r3, [r2, #20]
 80168ca:	2600      	movs	r6, #0
 80168cc:	af2f      	add	r7, sp, #188	; 0xbc
 80168ce:	972c      	str	r7, [sp, #176]	; 0xb0
 80168d0:	962e      	str	r6, [sp, #184]	; 0xb8
 80168d2:	962d      	str	r6, [sp, #180]	; 0xb4
 80168d4:	960d      	str	r6, [sp, #52]	; 0x34
 80168d6:	961a      	str	r6, [sp, #104]	; 0x68
 80168d8:	9619      	str	r6, [sp, #100]	; 0x64
 80168da:	961e      	str	r6, [sp, #120]	; 0x78
 80168dc:	961d      	str	r6, [sp, #116]	; 0x74
 80168de:	9613      	str	r6, [sp, #76]	; 0x4c
 80168e0:	961b      	str	r6, [sp, #108]	; 0x6c
 80168e2:	961f      	str	r6, [sp, #124]	; 0x7c
 80168e4:	9615      	str	r6, [sp, #84]	; 0x54
 80168e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80168e8:	782b      	ldrb	r3, [r5, #0]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d002      	beq.n	80168f4 <_svfprintf_r+0x80>
 80168ee:	2b25      	cmp	r3, #37	; 0x25
 80168f0:	d000      	beq.n	80168f4 <_svfprintf_r+0x80>
 80168f2:	e095      	b.n	8016a20 <_svfprintf_r+0x1ac>
 80168f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168f6:	1aee      	subs	r6, r5, r3
 80168f8:	d017      	beq.n	801692a <_svfprintf_r+0xb6>
 80168fa:	603b      	str	r3, [r7, #0]
 80168fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80168fe:	607e      	str	r6, [r7, #4]
 8016900:	199b      	adds	r3, r3, r6
 8016902:	932e      	str	r3, [sp, #184]	; 0xb8
 8016904:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016906:	3708      	adds	r7, #8
 8016908:	9308      	str	r3, [sp, #32]
 801690a:	3301      	adds	r3, #1
 801690c:	932d      	str	r3, [sp, #180]	; 0xb4
 801690e:	2b07      	cmp	r3, #7
 8016910:	dd08      	ble.n	8016924 <_svfprintf_r+0xb0>
 8016912:	aa2c      	add	r2, sp, #176	; 0xb0
 8016914:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016916:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016918:	f003 f900 	bl	8019b1c <__ssprint_r>
 801691c:	2800      	cmp	r0, #0
 801691e:	d000      	beq.n	8016922 <_svfprintf_r+0xae>
 8016920:	e2d9      	b.n	8016ed6 <_svfprintf_r+0x662>
 8016922:	af2f      	add	r7, sp, #188	; 0xbc
 8016924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016926:	199b      	adds	r3, r3, r6
 8016928:	9315      	str	r3, [sp, #84]	; 0x54
 801692a:	782b      	ldrb	r3, [r5, #0]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d101      	bne.n	8016934 <_svfprintf_r+0xc0>
 8016930:	f001 f9e5 	bl	8017cfe <_svfprintf_r+0x148a>
 8016934:	1c6b      	adds	r3, r5, #1
 8016936:	221b      	movs	r2, #27
 8016938:	9311      	str	r3, [sp, #68]	; 0x44
 801693a:	2300      	movs	r3, #0
 801693c:	a91e      	add	r1, sp, #120	; 0x78
 801693e:	1852      	adds	r2, r2, r1
 8016940:	7013      	strb	r3, [r2, #0]
 8016942:	2201      	movs	r2, #1
 8016944:	001e      	movs	r6, r3
 8016946:	2520      	movs	r5, #32
 8016948:	4252      	negs	r2, r2
 801694a:	9208      	str	r2, [sp, #32]
 801694c:	9316      	str	r3, [sp, #88]	; 0x58
 801694e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	930e      	str	r3, [sp, #56]	; 0x38
 8016954:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016956:	3301      	adds	r3, #1
 8016958:	9311      	str	r3, [sp, #68]	; 0x44
 801695a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801695c:	3820      	subs	r0, #32
 801695e:	285a      	cmp	r0, #90	; 0x5a
 8016960:	d901      	bls.n	8016966 <_svfprintf_r+0xf2>
 8016962:	f000 fe3d 	bl	80175e0 <_svfprintf_r+0xd6c>
 8016966:	f7e9 fbe9 	bl	800013c <__gnu_thumb1_case_shi>
 801696a:	009e      	.short	0x009e
 801696c:	063b063b 	.word	0x063b063b
 8016970:	063b00a7 	.word	0x063b00a7
 8016974:	063b063b 	.word	0x063b063b
 8016978:	063b0080 	.word	0x063b0080
 801697c:	00a9063b 	.word	0x00a9063b
 8016980:	063b00b3 	.word	0x063b00b3
 8016984:	00b900b1 	.word	0x00b900b1
 8016988:	00dd063b 	.word	0x00dd063b
 801698c:	00df00df 	.word	0x00df00df
 8016990:	00df00df 	.word	0x00df00df
 8016994:	00df00df 	.word	0x00df00df
 8016998:	00df00df 	.word	0x00df00df
 801699c:	063b00df 	.word	0x063b00df
 80169a0:	063b063b 	.word	0x063b063b
 80169a4:	063b063b 	.word	0x063b063b
 80169a8:	063b063b 	.word	0x063b063b
 80169ac:	063b0240 	.word	0x063b0240
 80169b0:	01fd010a 	.word	0x01fd010a
 80169b4:	02400240 	.word	0x02400240
 80169b8:	063b0240 	.word	0x063b0240
 80169bc:	063b063b 	.word	0x063b063b
 80169c0:	00f1063b 	.word	0x00f1063b
 80169c4:	063b063b 	.word	0x063b063b
 80169c8:	063b04e2 	.word	0x063b04e2
 80169cc:	063b063b 	.word	0x063b063b
 80169d0:	063b0537 	.word	0x063b0537
 80169d4:	063b0557 	.word	0x063b0557
 80169d8:	005d063b 	.word	0x005d063b
 80169dc:	063b063b 	.word	0x063b063b
 80169e0:	063b063b 	.word	0x063b063b
 80169e4:	063b063b 	.word	0x063b063b
 80169e8:	063b063b 	.word	0x063b063b
 80169ec:	063b0240 	.word	0x063b0240
 80169f0:	01ff010a 	.word	0x01ff010a
 80169f4:	02400240 	.word	0x02400240
 80169f8:	00f30240 	.word	0x00f30240
 80169fc:	010601ff 	.word	0x010601ff
 8016a00:	00ff063b 	.word	0x00ff063b
 8016a04:	04c5063b 	.word	0x04c5063b
 8016a08:	052704e4 	.word	0x052704e4
 8016a0c:	063b0106 	.word	0x063b0106
 8016a10:	fff20537 	.word	0xfff20537
 8016a14:	063b0559 	.word	0x063b0559
 8016a18:	0582063b 	.word	0x0582063b
 8016a1c:	fff2063b 	.word	0xfff2063b
 8016a20:	3501      	adds	r5, #1
 8016a22:	e761      	b.n	80168e8 <_svfprintf_r+0x74>
 8016a24:	4bcb      	ldr	r3, [pc, #812]	; (8016d54 <_svfprintf_r+0x4e0>)
 8016a26:	2220      	movs	r2, #32
 8016a28:	931e      	str	r3, [sp, #120]	; 0x78
 8016a2a:	4032      	ands	r2, r6
 8016a2c:	d101      	bne.n	8016a32 <_svfprintf_r+0x1be>
 8016a2e:	f000 fd21 	bl	8017474 <_svfprintf_r+0xc00>
 8016a32:	2307      	movs	r3, #7
 8016a34:	3407      	adds	r4, #7
 8016a36:	439c      	bics	r4, r3
 8016a38:	0023      	movs	r3, r4
 8016a3a:	3308      	adds	r3, #8
 8016a3c:	9312      	str	r3, [sp, #72]	; 0x48
 8016a3e:	6823      	ldr	r3, [r4, #0]
 8016a40:	6864      	ldr	r4, [r4, #4]
 8016a42:	9306      	str	r3, [sp, #24]
 8016a44:	9407      	str	r4, [sp, #28]
 8016a46:	07f3      	lsls	r3, r6, #31
 8016a48:	d50a      	bpl.n	8016a60 <_svfprintf_r+0x1ec>
 8016a4a:	9b06      	ldr	r3, [sp, #24]
 8016a4c:	9a07      	ldr	r2, [sp, #28]
 8016a4e:	4313      	orrs	r3, r2
 8016a50:	d006      	beq.n	8016a60 <_svfprintf_r+0x1ec>
 8016a52:	2230      	movs	r2, #48	; 0x30
 8016a54:	ab25      	add	r3, sp, #148	; 0x94
 8016a56:	701a      	strb	r2, [r3, #0]
 8016a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a5a:	705a      	strb	r2, [r3, #1]
 8016a5c:	2302      	movs	r3, #2
 8016a5e:	431e      	orrs	r6, r3
 8016a60:	4bbd      	ldr	r3, [pc, #756]	; (8016d58 <_svfprintf_r+0x4e4>)
 8016a62:	401e      	ands	r6, r3
 8016a64:	2302      	movs	r3, #2
 8016a66:	f000 fc74 	bl	8017352 <_svfprintf_r+0xade>
 8016a6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a6c:	f002 fc30 	bl	80192d0 <_localeconv_r>
 8016a70:	6843      	ldr	r3, [r0, #4]
 8016a72:	0018      	movs	r0, r3
 8016a74:	931f      	str	r3, [sp, #124]	; 0x7c
 8016a76:	f7e9 fb4f 	bl	8000118 <strlen>
 8016a7a:	901b      	str	r0, [sp, #108]	; 0x6c
 8016a7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a7e:	f002 fc27 	bl	80192d0 <_localeconv_r>
 8016a82:	6883      	ldr	r3, [r0, #8]
 8016a84:	9313      	str	r3, [sp, #76]	; 0x4c
 8016a86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d100      	bne.n	8016a8e <_svfprintf_r+0x21a>
 8016a8c:	e75f      	b.n	801694e <_svfprintf_r+0xda>
 8016a8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d100      	bne.n	8016a96 <_svfprintf_r+0x222>
 8016a94:	e75b      	b.n	801694e <_svfprintf_r+0xda>
 8016a96:	781b      	ldrb	r3, [r3, #0]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d100      	bne.n	8016a9e <_svfprintf_r+0x22a>
 8016a9c:	e757      	b.n	801694e <_svfprintf_r+0xda>
 8016a9e:	2380      	movs	r3, #128	; 0x80
 8016aa0:	00db      	lsls	r3, r3, #3
 8016aa2:	431e      	orrs	r6, r3
 8016aa4:	e753      	b.n	801694e <_svfprintf_r+0xda>
 8016aa6:	231b      	movs	r3, #27
 8016aa8:	aa1e      	add	r2, sp, #120	; 0x78
 8016aaa:	189b      	adds	r3, r3, r2
 8016aac:	781a      	ldrb	r2, [r3, #0]
 8016aae:	2a00      	cmp	r2, #0
 8016ab0:	d000      	beq.n	8016ab4 <_svfprintf_r+0x240>
 8016ab2:	e74c      	b.n	801694e <_svfprintf_r+0xda>
 8016ab4:	701d      	strb	r5, [r3, #0]
 8016ab6:	e74a      	b.n	801694e <_svfprintf_r+0xda>
 8016ab8:	2301      	movs	r3, #1
 8016aba:	e7f2      	b.n	8016aa2 <_svfprintf_r+0x22e>
 8016abc:	6823      	ldr	r3, [r4, #0]
 8016abe:	3404      	adds	r4, #4
 8016ac0:	9316      	str	r3, [sp, #88]	; 0x58
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	db00      	blt.n	8016ac8 <_svfprintf_r+0x254>
 8016ac6:	e742      	b.n	801694e <_svfprintf_r+0xda>
 8016ac8:	425b      	negs	r3, r3
 8016aca:	9316      	str	r3, [sp, #88]	; 0x58
 8016acc:	2304      	movs	r3, #4
 8016ace:	e7e8      	b.n	8016aa2 <_svfprintf_r+0x22e>
 8016ad0:	231b      	movs	r3, #27
 8016ad2:	aa1e      	add	r2, sp, #120	; 0x78
 8016ad4:	189b      	adds	r3, r3, r2
 8016ad6:	222b      	movs	r2, #43	; 0x2b
 8016ad8:	701a      	strb	r2, [r3, #0]
 8016ada:	e738      	b.n	801694e <_svfprintf_r+0xda>
 8016adc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ae0:	7812      	ldrb	r2, [r2, #0]
 8016ae2:	3301      	adds	r3, #1
 8016ae4:	920e      	str	r2, [sp, #56]	; 0x38
 8016ae6:	2a2a      	cmp	r2, #42	; 0x2a
 8016ae8:	d008      	beq.n	8016afc <_svfprintf_r+0x288>
 8016aea:	2200      	movs	r2, #0
 8016aec:	9208      	str	r2, [sp, #32]
 8016aee:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016af0:	001a      	movs	r2, r3
 8016af2:	3930      	subs	r1, #48	; 0x30
 8016af4:	2909      	cmp	r1, #9
 8016af6:	d90c      	bls.n	8016b12 <_svfprintf_r+0x29e>
 8016af8:	9211      	str	r2, [sp, #68]	; 0x44
 8016afa:	e72e      	b.n	801695a <_svfprintf_r+0xe6>
 8016afc:	6821      	ldr	r1, [r4, #0]
 8016afe:	1d22      	adds	r2, r4, #4
 8016b00:	9108      	str	r1, [sp, #32]
 8016b02:	2900      	cmp	r1, #0
 8016b04:	da02      	bge.n	8016b0c <_svfprintf_r+0x298>
 8016b06:	2101      	movs	r1, #1
 8016b08:	4249      	negs	r1, r1
 8016b0a:	9108      	str	r1, [sp, #32]
 8016b0c:	0014      	movs	r4, r2
 8016b0e:	9311      	str	r3, [sp, #68]	; 0x44
 8016b10:	e71d      	b.n	801694e <_svfprintf_r+0xda>
 8016b12:	200a      	movs	r0, #10
 8016b14:	9a08      	ldr	r2, [sp, #32]
 8016b16:	4342      	muls	r2, r0
 8016b18:	1852      	adds	r2, r2, r1
 8016b1a:	9208      	str	r2, [sp, #32]
 8016b1c:	781a      	ldrb	r2, [r3, #0]
 8016b1e:	3301      	adds	r3, #1
 8016b20:	920e      	str	r2, [sp, #56]	; 0x38
 8016b22:	e7e4      	b.n	8016aee <_svfprintf_r+0x27a>
 8016b24:	2380      	movs	r3, #128	; 0x80
 8016b26:	e7bc      	b.n	8016aa2 <_svfprintf_r+0x22e>
 8016b28:	2300      	movs	r3, #0
 8016b2a:	9316      	str	r3, [sp, #88]	; 0x58
 8016b2c:	220a      	movs	r2, #10
 8016b2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016b30:	4353      	muls	r3, r2
 8016b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016b34:	3a30      	subs	r2, #48	; 0x30
 8016b36:	18d3      	adds	r3, r2, r3
 8016b38:	9316      	str	r3, [sp, #88]	; 0x58
 8016b3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b3c:	1c5a      	adds	r2, r3, #1
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	9211      	str	r2, [sp, #68]	; 0x44
 8016b42:	930e      	str	r3, [sp, #56]	; 0x38
 8016b44:	3b30      	subs	r3, #48	; 0x30
 8016b46:	2b09      	cmp	r3, #9
 8016b48:	d9f0      	bls.n	8016b2c <_svfprintf_r+0x2b8>
 8016b4a:	e7d5      	b.n	8016af8 <_svfprintf_r+0x284>
 8016b4c:	2308      	movs	r3, #8
 8016b4e:	e7a8      	b.n	8016aa2 <_svfprintf_r+0x22e>
 8016b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b52:	781b      	ldrb	r3, [r3, #0]
 8016b54:	2b68      	cmp	r3, #104	; 0x68
 8016b56:	d105      	bne.n	8016b64 <_svfprintf_r+0x2f0>
 8016b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b5a:	3301      	adds	r3, #1
 8016b5c:	9311      	str	r3, [sp, #68]	; 0x44
 8016b5e:	2380      	movs	r3, #128	; 0x80
 8016b60:	009b      	lsls	r3, r3, #2
 8016b62:	e79e      	b.n	8016aa2 <_svfprintf_r+0x22e>
 8016b64:	2340      	movs	r3, #64	; 0x40
 8016b66:	e79c      	b.n	8016aa2 <_svfprintf_r+0x22e>
 8016b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b6a:	781b      	ldrb	r3, [r3, #0]
 8016b6c:	2b6c      	cmp	r3, #108	; 0x6c
 8016b6e:	d104      	bne.n	8016b7a <_svfprintf_r+0x306>
 8016b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b72:	3301      	adds	r3, #1
 8016b74:	9311      	str	r3, [sp, #68]	; 0x44
 8016b76:	432e      	orrs	r6, r5
 8016b78:	e6e9      	b.n	801694e <_svfprintf_r+0xda>
 8016b7a:	2310      	movs	r3, #16
 8016b7c:	e791      	b.n	8016aa2 <_svfprintf_r+0x22e>
 8016b7e:	1d23      	adds	r3, r4, #4
 8016b80:	6822      	ldr	r2, [r4, #0]
 8016b82:	9312      	str	r3, [sp, #72]	; 0x48
 8016b84:	ab3f      	add	r3, sp, #252	; 0xfc
 8016b86:	701a      	strb	r2, [r3, #0]
 8016b88:	221b      	movs	r2, #27
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	a91e      	add	r1, sp, #120	; 0x78
 8016b8e:	1852      	adds	r2, r2, r1
 8016b90:	7010      	strb	r0, [r2, #0]
 8016b92:	2201      	movs	r2, #1
 8016b94:	0005      	movs	r5, r0
 8016b96:	900c      	str	r0, [sp, #48]	; 0x30
 8016b98:	9208      	str	r2, [sp, #32]
 8016b9a:	9017      	str	r0, [sp, #92]	; 0x5c
 8016b9c:	9010      	str	r0, [sp, #64]	; 0x40
 8016b9e:	900f      	str	r0, [sp, #60]	; 0x3c
 8016ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ba2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ba4:	9a08      	ldr	r2, [sp, #32]
 8016ba6:	9318      	str	r3, [sp, #96]	; 0x60
 8016ba8:	4293      	cmp	r3, r2
 8016baa:	da00      	bge.n	8016bae <_svfprintf_r+0x33a>
 8016bac:	9218      	str	r2, [sp, #96]	; 0x60
 8016bae:	231b      	movs	r3, #27
 8016bb0:	aa1e      	add	r2, sp, #120	; 0x78
 8016bb2:	189b      	adds	r3, r3, r2
 8016bb4:	781b      	ldrb	r3, [r3, #0]
 8016bb6:	1e5a      	subs	r2, r3, #1
 8016bb8:	4193      	sbcs	r3, r2
 8016bba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016bbc:	18d3      	adds	r3, r2, r3
 8016bbe:	9318      	str	r3, [sp, #96]	; 0x60
 8016bc0:	2302      	movs	r3, #2
 8016bc2:	4033      	ands	r3, r6
 8016bc4:	9320      	str	r3, [sp, #128]	; 0x80
 8016bc6:	d002      	beq.n	8016bce <_svfprintf_r+0x35a>
 8016bc8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016bca:	3302      	adds	r3, #2
 8016bcc:	9318      	str	r3, [sp, #96]	; 0x60
 8016bce:	2384      	movs	r3, #132	; 0x84
 8016bd0:	4033      	ands	r3, r6
 8016bd2:	9321      	str	r3, [sp, #132]	; 0x84
 8016bd4:	d121      	bne.n	8016c1a <_svfprintf_r+0x3a6>
 8016bd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016bd8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016bda:	1a9c      	subs	r4, r3, r2
 8016bdc:	2c00      	cmp	r4, #0
 8016bde:	dd1c      	ble.n	8016c1a <_svfprintf_r+0x3a6>
 8016be0:	0039      	movs	r1, r7
 8016be2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016be4:	485d      	ldr	r0, [pc, #372]	; (8016d5c <_svfprintf_r+0x4e8>)
 8016be6:	9322      	str	r3, [sp, #136]	; 0x88
 8016be8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016bea:	3301      	adds	r3, #1
 8016bec:	3108      	adds	r1, #8
 8016bee:	6038      	str	r0, [r7, #0]
 8016bf0:	2c10      	cmp	r4, #16
 8016bf2:	dd01      	ble.n	8016bf8 <_svfprintf_r+0x384>
 8016bf4:	f000 fd08 	bl	8017608 <_svfprintf_r+0xd94>
 8016bf8:	607c      	str	r4, [r7, #4]
 8016bfa:	18a4      	adds	r4, r4, r2
 8016bfc:	942e      	str	r4, [sp, #184]	; 0xb8
 8016bfe:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c00:	000f      	movs	r7, r1
 8016c02:	2b07      	cmp	r3, #7
 8016c04:	dd09      	ble.n	8016c1a <_svfprintf_r+0x3a6>
 8016c06:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c0c:	f002 ff86 	bl	8019b1c <__ssprint_r>
 8016c10:	2800      	cmp	r0, #0
 8016c12:	d001      	beq.n	8016c18 <_svfprintf_r+0x3a4>
 8016c14:	f001 f852 	bl	8017cbc <_svfprintf_r+0x1448>
 8016c18:	af2f      	add	r7, sp, #188	; 0xbc
 8016c1a:	231b      	movs	r3, #27
 8016c1c:	aa1e      	add	r2, sp, #120	; 0x78
 8016c1e:	189b      	adds	r3, r3, r2
 8016c20:	781a      	ldrb	r2, [r3, #0]
 8016c22:	2a00      	cmp	r2, #0
 8016c24:	d017      	beq.n	8016c56 <_svfprintf_r+0x3e2>
 8016c26:	603b      	str	r3, [r7, #0]
 8016c28:	2301      	movs	r3, #1
 8016c2a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016c2c:	607b      	str	r3, [r7, #4]
 8016c2e:	0013      	movs	r3, r2
 8016c30:	3301      	adds	r3, #1
 8016c32:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c34:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c36:	3708      	adds	r7, #8
 8016c38:	9322      	str	r3, [sp, #136]	; 0x88
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c3e:	2b07      	cmp	r3, #7
 8016c40:	dd09      	ble.n	8016c56 <_svfprintf_r+0x3e2>
 8016c42:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c48:	f002 ff68 	bl	8019b1c <__ssprint_r>
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	d001      	beq.n	8016c54 <_svfprintf_r+0x3e0>
 8016c50:	f001 f834 	bl	8017cbc <_svfprintf_r+0x1448>
 8016c54:	af2f      	add	r7, sp, #188	; 0xbc
 8016c56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d019      	beq.n	8016c90 <_svfprintf_r+0x41c>
 8016c5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016c5e:	9320      	str	r3, [sp, #128]	; 0x80
 8016c60:	ab25      	add	r3, sp, #148	; 0x94
 8016c62:	603b      	str	r3, [r7, #0]
 8016c64:	2302      	movs	r3, #2
 8016c66:	607b      	str	r3, [r7, #4]
 8016c68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016c6a:	3708      	adds	r7, #8
 8016c6c:	3302      	adds	r3, #2
 8016c6e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c72:	9320      	str	r3, [sp, #128]	; 0x80
 8016c74:	3301      	adds	r3, #1
 8016c76:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c78:	2b07      	cmp	r3, #7
 8016c7a:	dd09      	ble.n	8016c90 <_svfprintf_r+0x41c>
 8016c7c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c82:	f002 ff4b 	bl	8019b1c <__ssprint_r>
 8016c86:	2800      	cmp	r0, #0
 8016c88:	d001      	beq.n	8016c8e <_svfprintf_r+0x41a>
 8016c8a:	f001 f817 	bl	8017cbc <_svfprintf_r+0x1448>
 8016c8e:	af2f      	add	r7, sp, #188	; 0xbc
 8016c90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c92:	2b80      	cmp	r3, #128	; 0x80
 8016c94:	d121      	bne.n	8016cda <_svfprintf_r+0x466>
 8016c96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016c98:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016c9a:	1a9c      	subs	r4, r3, r2
 8016c9c:	2c00      	cmp	r4, #0
 8016c9e:	dd1c      	ble.n	8016cda <_svfprintf_r+0x466>
 8016ca0:	0039      	movs	r1, r7
 8016ca2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016ca4:	482e      	ldr	r0, [pc, #184]	; (8016d60 <_svfprintf_r+0x4ec>)
 8016ca6:	9320      	str	r3, [sp, #128]	; 0x80
 8016ca8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016caa:	3301      	adds	r3, #1
 8016cac:	3108      	adds	r1, #8
 8016cae:	6038      	str	r0, [r7, #0]
 8016cb0:	2c10      	cmp	r4, #16
 8016cb2:	dd01      	ble.n	8016cb8 <_svfprintf_r+0x444>
 8016cb4:	f000 fcbc 	bl	8017630 <_svfprintf_r+0xdbc>
 8016cb8:	607c      	str	r4, [r7, #4]
 8016cba:	18a4      	adds	r4, r4, r2
 8016cbc:	942e      	str	r4, [sp, #184]	; 0xb8
 8016cbe:	932d      	str	r3, [sp, #180]	; 0xb4
 8016cc0:	000f      	movs	r7, r1
 8016cc2:	2b07      	cmp	r3, #7
 8016cc4:	dd09      	ble.n	8016cda <_svfprintf_r+0x466>
 8016cc6:	aa2c      	add	r2, sp, #176	; 0xb0
 8016cc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016cca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ccc:	f002 ff26 	bl	8019b1c <__ssprint_r>
 8016cd0:	2800      	cmp	r0, #0
 8016cd2:	d001      	beq.n	8016cd8 <_svfprintf_r+0x464>
 8016cd4:	f000 fff2 	bl	8017cbc <_svfprintf_r+0x1448>
 8016cd8:	af2f      	add	r7, sp, #188	; 0xbc
 8016cda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016cdc:	9a08      	ldr	r2, [sp, #32]
 8016cde:	1a9c      	subs	r4, r3, r2
 8016ce0:	2c00      	cmp	r4, #0
 8016ce2:	dd1c      	ble.n	8016d1e <_svfprintf_r+0x4aa>
 8016ce4:	0039      	movs	r1, r7
 8016ce6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016ce8:	481d      	ldr	r0, [pc, #116]	; (8016d60 <_svfprintf_r+0x4ec>)
 8016cea:	9317      	str	r3, [sp, #92]	; 0x5c
 8016cec:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016cee:	3301      	adds	r3, #1
 8016cf0:	3108      	adds	r1, #8
 8016cf2:	6038      	str	r0, [r7, #0]
 8016cf4:	2c10      	cmp	r4, #16
 8016cf6:	dd01      	ble.n	8016cfc <_svfprintf_r+0x488>
 8016cf8:	f000 fcb4 	bl	8017664 <_svfprintf_r+0xdf0>
 8016cfc:	18a2      	adds	r2, r4, r2
 8016cfe:	607c      	str	r4, [r7, #4]
 8016d00:	922e      	str	r2, [sp, #184]	; 0xb8
 8016d02:	932d      	str	r3, [sp, #180]	; 0xb4
 8016d04:	000f      	movs	r7, r1
 8016d06:	2b07      	cmp	r3, #7
 8016d08:	dd09      	ble.n	8016d1e <_svfprintf_r+0x4aa>
 8016d0a:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d10:	f002 ff04 	bl	8019b1c <__ssprint_r>
 8016d14:	2800      	cmp	r0, #0
 8016d16:	d001      	beq.n	8016d1c <_svfprintf_r+0x4a8>
 8016d18:	f000 ffd0 	bl	8017cbc <_svfprintf_r+0x1448>
 8016d1c:	af2f      	add	r7, sp, #188	; 0xbc
 8016d1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016d20:	9317      	str	r3, [sp, #92]	; 0x5c
 8016d22:	05f3      	lsls	r3, r6, #23
 8016d24:	d501      	bpl.n	8016d2a <_svfprintf_r+0x4b6>
 8016d26:	f000 fcb1 	bl	801768c <_svfprintf_r+0xe18>
 8016d2a:	9a08      	ldr	r2, [sp, #32]
 8016d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d2e:	4694      	mov	ip, r2
 8016d30:	603b      	str	r3, [r7, #0]
 8016d32:	9b08      	ldr	r3, [sp, #32]
 8016d34:	607b      	str	r3, [r7, #4]
 8016d36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d38:	4463      	add	r3, ip
 8016d3a:	932e      	str	r3, [sp, #184]	; 0xb8
 8016d3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016d3e:	9308      	str	r3, [sp, #32]
 8016d40:	3301      	adds	r3, #1
 8016d42:	932d      	str	r3, [sp, #180]	; 0xb4
 8016d44:	2b07      	cmp	r3, #7
 8016d46:	dd01      	ble.n	8016d4c <_svfprintf_r+0x4d8>
 8016d48:	f000 fd94 	bl	8017874 <_svfprintf_r+0x1000>
 8016d4c:	3708      	adds	r7, #8
 8016d4e:	f000 fce4 	bl	801771a <_svfprintf_r+0xea6>
 8016d52:	46c0      	nop			; (mov r8, r8)
 8016d54:	0801d551 	.word	0x0801d551
 8016d58:	fffffbff 	.word	0xfffffbff
 8016d5c:	0801d564 	.word	0x0801d564
 8016d60:	0801d574 	.word	0x0801d574
 8016d64:	2310      	movs	r3, #16
 8016d66:	431e      	orrs	r6, r3
 8016d68:	06b3      	lsls	r3, r6, #26
 8016d6a:	d52c      	bpl.n	8016dc6 <_svfprintf_r+0x552>
 8016d6c:	2307      	movs	r3, #7
 8016d6e:	3407      	adds	r4, #7
 8016d70:	439c      	bics	r4, r3
 8016d72:	0023      	movs	r3, r4
 8016d74:	3308      	adds	r3, #8
 8016d76:	9312      	str	r3, [sp, #72]	; 0x48
 8016d78:	6823      	ldr	r3, [r4, #0]
 8016d7a:	6864      	ldr	r4, [r4, #4]
 8016d7c:	9306      	str	r3, [sp, #24]
 8016d7e:	9407      	str	r4, [sp, #28]
 8016d80:	9b07      	ldr	r3, [sp, #28]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	da0b      	bge.n	8016d9e <_svfprintf_r+0x52a>
 8016d86:	9906      	ldr	r1, [sp, #24]
 8016d88:	9a07      	ldr	r2, [sp, #28]
 8016d8a:	2400      	movs	r4, #0
 8016d8c:	424b      	negs	r3, r1
 8016d8e:	4194      	sbcs	r4, r2
 8016d90:	9306      	str	r3, [sp, #24]
 8016d92:	9407      	str	r4, [sp, #28]
 8016d94:	231b      	movs	r3, #27
 8016d96:	aa1e      	add	r2, sp, #120	; 0x78
 8016d98:	189b      	adds	r3, r3, r2
 8016d9a:	222d      	movs	r2, #45	; 0x2d
 8016d9c:	701a      	strb	r2, [r3, #0]
 8016d9e:	9b08      	ldr	r3, [sp, #32]
 8016da0:	3301      	adds	r3, #1
 8016da2:	d000      	beq.n	8016da6 <_svfprintf_r+0x532>
 8016da4:	e382      	b.n	80174ac <_svfprintf_r+0xc38>
 8016da6:	9b07      	ldr	r3, [sp, #28]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d000      	beq.n	8016dae <_svfprintf_r+0x53a>
 8016dac:	e3b0      	b.n	8017510 <_svfprintf_r+0xc9c>
 8016dae:	9b06      	ldr	r3, [sp, #24]
 8016db0:	2b09      	cmp	r3, #9
 8016db2:	d900      	bls.n	8016db6 <_svfprintf_r+0x542>
 8016db4:	e3ac      	b.n	8017510 <_svfprintf_r+0xc9c>
 8016db6:	23e7      	movs	r3, #231	; 0xe7
 8016db8:	aa1e      	add	r2, sp, #120	; 0x78
 8016dba:	189b      	adds	r3, r3, r2
 8016dbc:	9a06      	ldr	r2, [sp, #24]
 8016dbe:	3230      	adds	r2, #48	; 0x30
 8016dc0:	701a      	strb	r2, [r3, #0]
 8016dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8016dc4:	e395      	b.n	80174f2 <_svfprintf_r+0xc7e>
 8016dc6:	1d23      	adds	r3, r4, #4
 8016dc8:	9312      	str	r3, [sp, #72]	; 0x48
 8016dca:	06f3      	lsls	r3, r6, #27
 8016dcc:	d504      	bpl.n	8016dd8 <_svfprintf_r+0x564>
 8016dce:	6823      	ldr	r3, [r4, #0]
 8016dd0:	9306      	str	r3, [sp, #24]
 8016dd2:	17db      	asrs	r3, r3, #31
 8016dd4:	9307      	str	r3, [sp, #28]
 8016dd6:	e7d3      	b.n	8016d80 <_svfprintf_r+0x50c>
 8016dd8:	6823      	ldr	r3, [r4, #0]
 8016dda:	0672      	lsls	r2, r6, #25
 8016ddc:	d501      	bpl.n	8016de2 <_svfprintf_r+0x56e>
 8016dde:	b21b      	sxth	r3, r3
 8016de0:	e7f6      	b.n	8016dd0 <_svfprintf_r+0x55c>
 8016de2:	05b2      	lsls	r2, r6, #22
 8016de4:	d5f4      	bpl.n	8016dd0 <_svfprintf_r+0x55c>
 8016de6:	b25b      	sxtb	r3, r3
 8016de8:	e7f2      	b.n	8016dd0 <_svfprintf_r+0x55c>
 8016dea:	2307      	movs	r3, #7
 8016dec:	3407      	adds	r4, #7
 8016dee:	439c      	bics	r4, r3
 8016df0:	0023      	movs	r3, r4
 8016df2:	2201      	movs	r2, #1
 8016df4:	3308      	adds	r3, #8
 8016df6:	9312      	str	r3, [sp, #72]	; 0x48
 8016df8:	6823      	ldr	r3, [r4, #0]
 8016dfa:	4252      	negs	r2, r2
 8016dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8016dfe:	6863      	ldr	r3, [r4, #4]
 8016e00:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016e02:	005c      	lsls	r4, r3, #1
 8016e04:	0864      	lsrs	r4, r4, #1
 8016e06:	9319      	str	r3, [sp, #100]	; 0x64
 8016e08:	0028      	movs	r0, r5
 8016e0a:	4bcf      	ldr	r3, [pc, #828]	; (8017148 <_svfprintf_r+0x8d4>)
 8016e0c:	0021      	movs	r1, r4
 8016e0e:	f7ec f8cb 	bl	8002fa8 <__aeabi_dcmpun>
 8016e12:	2800      	cmp	r0, #0
 8016e14:	d125      	bne.n	8016e62 <_svfprintf_r+0x5ee>
 8016e16:	2201      	movs	r2, #1
 8016e18:	4bcb      	ldr	r3, [pc, #812]	; (8017148 <_svfprintf_r+0x8d4>)
 8016e1a:	4252      	negs	r2, r2
 8016e1c:	0028      	movs	r0, r5
 8016e1e:	0021      	movs	r1, r4
 8016e20:	f7e9 fb2c 	bl	800047c <__aeabi_dcmple>
 8016e24:	2800      	cmp	r0, #0
 8016e26:	d11c      	bne.n	8016e62 <_svfprintf_r+0x5ee>
 8016e28:	2200      	movs	r2, #0
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016e2e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016e30:	f7e9 fb1a 	bl	8000468 <__aeabi_dcmplt>
 8016e34:	2800      	cmp	r0, #0
 8016e36:	d004      	beq.n	8016e42 <_svfprintf_r+0x5ce>
 8016e38:	231b      	movs	r3, #27
 8016e3a:	aa1e      	add	r2, sp, #120	; 0x78
 8016e3c:	189b      	adds	r3, r3, r2
 8016e3e:	222d      	movs	r2, #45	; 0x2d
 8016e40:	701a      	strb	r2, [r3, #0]
 8016e42:	4bc2      	ldr	r3, [pc, #776]	; (801714c <_svfprintf_r+0x8d8>)
 8016e44:	9309      	str	r3, [sp, #36]	; 0x24
 8016e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e48:	2b47      	cmp	r3, #71	; 0x47
 8016e4a:	dc01      	bgt.n	8016e50 <_svfprintf_r+0x5dc>
 8016e4c:	4bc0      	ldr	r3, [pc, #768]	; (8017150 <_svfprintf_r+0x8dc>)
 8016e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8016e50:	2380      	movs	r3, #128	; 0x80
 8016e52:	439e      	bics	r6, r3
 8016e54:	2300      	movs	r3, #0
 8016e56:	930c      	str	r3, [sp, #48]	; 0x30
 8016e58:	3303      	adds	r3, #3
 8016e5a:	9308      	str	r3, [sp, #32]
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016e60:	e34f      	b.n	8017502 <_svfprintf_r+0xc8e>
 8016e62:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016e64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016e66:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016e68:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016e6a:	f7ec f89d 	bl	8002fa8 <__aeabi_dcmpun>
 8016e6e:	2800      	cmp	r0, #0
 8016e70:	d00e      	beq.n	8016e90 <_svfprintf_r+0x61c>
 8016e72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	da04      	bge.n	8016e82 <_svfprintf_r+0x60e>
 8016e78:	231b      	movs	r3, #27
 8016e7a:	aa1e      	add	r2, sp, #120	; 0x78
 8016e7c:	189b      	adds	r3, r3, r2
 8016e7e:	222d      	movs	r2, #45	; 0x2d
 8016e80:	701a      	strb	r2, [r3, #0]
 8016e82:	4bb4      	ldr	r3, [pc, #720]	; (8017154 <_svfprintf_r+0x8e0>)
 8016e84:	9309      	str	r3, [sp, #36]	; 0x24
 8016e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e88:	2b47      	cmp	r3, #71	; 0x47
 8016e8a:	dce1      	bgt.n	8016e50 <_svfprintf_r+0x5dc>
 8016e8c:	4bb2      	ldr	r3, [pc, #712]	; (8017158 <_svfprintf_r+0x8e4>)
 8016e8e:	e7de      	b.n	8016e4e <_svfprintf_r+0x5da>
 8016e90:	2320      	movs	r3, #32
 8016e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e94:	439a      	bics	r2, r3
 8016e96:	920f      	str	r2, [sp, #60]	; 0x3c
 8016e98:	2a41      	cmp	r2, #65	; 0x41
 8016e9a:	d124      	bne.n	8016ee6 <_svfprintf_r+0x672>
 8016e9c:	2230      	movs	r2, #48	; 0x30
 8016e9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016ea0:	ab25      	add	r3, sp, #148	; 0x94
 8016ea2:	701a      	strb	r2, [r3, #0]
 8016ea4:	3228      	adds	r2, #40	; 0x28
 8016ea6:	2961      	cmp	r1, #97	; 0x61
 8016ea8:	d100      	bne.n	8016eac <_svfprintf_r+0x638>
 8016eaa:	3220      	adds	r2, #32
 8016eac:	705a      	strb	r2, [r3, #1]
 8016eae:	2302      	movs	r3, #2
 8016eb0:	431e      	orrs	r6, r3
 8016eb2:	9b08      	ldr	r3, [sp, #32]
 8016eb4:	2b63      	cmp	r3, #99	; 0x63
 8016eb6:	dc00      	bgt.n	8016eba <_svfprintf_r+0x646>
 8016eb8:	e09e      	b.n	8016ff8 <_svfprintf_r+0x784>
 8016eba:	1c59      	adds	r1, r3, #1
 8016ebc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ebe:	f7fe f913 	bl	80150e8 <_malloc_r>
 8016ec2:	9009      	str	r0, [sp, #36]	; 0x24
 8016ec4:	2800      	cmp	r0, #0
 8016ec6:	d000      	beq.n	8016eca <_svfprintf_r+0x656>
 8016ec8:	e09b      	b.n	8017002 <_svfprintf_r+0x78e>
 8016eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ecc:	899a      	ldrh	r2, [r3, #12]
 8016ece:	2340      	movs	r3, #64	; 0x40
 8016ed0:	4313      	orrs	r3, r2
 8016ed2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016ed4:	8193      	strh	r3, [r2, #12]
 8016ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ed8:	899b      	ldrh	r3, [r3, #12]
 8016eda:	065b      	lsls	r3, r3, #25
 8016edc:	d400      	bmi.n	8016ee0 <_svfprintf_r+0x66c>
 8016ede:	e4ee      	b.n	80168be <_svfprintf_r+0x4a>
 8016ee0:	2301      	movs	r3, #1
 8016ee2:	425b      	negs	r3, r3
 8016ee4:	e4ea      	b.n	80168bc <_svfprintf_r+0x48>
 8016ee6:	9b08      	ldr	r3, [sp, #32]
 8016ee8:	900c      	str	r0, [sp, #48]	; 0x30
 8016eea:	3301      	adds	r3, #1
 8016eec:	d100      	bne.n	8016ef0 <_svfprintf_r+0x67c>
 8016eee:	e08b      	b.n	8017008 <_svfprintf_r+0x794>
 8016ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ef2:	2b47      	cmp	r3, #71	; 0x47
 8016ef4:	d103      	bne.n	8016efe <_svfprintf_r+0x68a>
 8016ef6:	9b08      	ldr	r3, [sp, #32]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d100      	bne.n	8016efe <_svfprintf_r+0x68a>
 8016efc:	e087      	b.n	801700e <_svfprintf_r+0x79a>
 8016efe:	2380      	movs	r3, #128	; 0x80
 8016f00:	005b      	lsls	r3, r3, #1
 8016f02:	4333      	orrs	r3, r6
 8016f04:	9320      	str	r3, [sp, #128]	; 0x80
 8016f06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016f08:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	db00      	blt.n	8016f10 <_svfprintf_r+0x69c>
 8016f0e:	e082      	b.n	8017016 <_svfprintf_r+0x7a2>
 8016f10:	2280      	movs	r2, #128	; 0x80
 8016f12:	0612      	lsls	r2, r2, #24
 8016f14:	4694      	mov	ip, r2
 8016f16:	4463      	add	r3, ip
 8016f18:	930d      	str	r3, [sp, #52]	; 0x34
 8016f1a:	232d      	movs	r3, #45	; 0x2d
 8016f1c:	9322      	str	r3, [sp, #136]	; 0x88
 8016f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f20:	2b41      	cmp	r3, #65	; 0x41
 8016f22:	d000      	beq.n	8016f26 <_svfprintf_r+0x6b2>
 8016f24:	e105      	b.n	8017132 <_svfprintf_r+0x8be>
 8016f26:	aa26      	add	r2, sp, #152	; 0x98
 8016f28:	0020      	movs	r0, r4
 8016f2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016f2c:	f002 fdc4 	bl	8019ab8 <frexp>
 8016f30:	23ff      	movs	r3, #255	; 0xff
 8016f32:	2200      	movs	r2, #0
 8016f34:	059b      	lsls	r3, r3, #22
 8016f36:	f7eb fa7d 	bl	8002434 <__aeabi_dmul>
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	0004      	movs	r4, r0
 8016f40:	000d      	movs	r5, r1
 8016f42:	f7e9 fa8b 	bl	800045c <__aeabi_dcmpeq>
 8016f46:	2800      	cmp	r0, #0
 8016f48:	d001      	beq.n	8016f4e <_svfprintf_r+0x6da>
 8016f4a:	2301      	movs	r3, #1
 8016f4c:	9326      	str	r3, [sp, #152]	; 0x98
 8016f4e:	4b83      	ldr	r3, [pc, #524]	; (801715c <_svfprintf_r+0x8e8>)
 8016f50:	9317      	str	r3, [sp, #92]	; 0x5c
 8016f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f54:	2b61      	cmp	r3, #97	; 0x61
 8016f56:	d101      	bne.n	8016f5c <_svfprintf_r+0x6e8>
 8016f58:	4b81      	ldr	r3, [pc, #516]	; (8017160 <_svfprintf_r+0x8ec>)
 8016f5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8016f5c:	9b08      	ldr	r3, [sp, #32]
 8016f5e:	3b01      	subs	r3, #1
 8016f60:	9310      	str	r3, [sp, #64]	; 0x40
 8016f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f64:	9318      	str	r3, [sp, #96]	; 0x60
 8016f66:	2200      	movs	r2, #0
 8016f68:	4b7e      	ldr	r3, [pc, #504]	; (8017164 <_svfprintf_r+0x8f0>)
 8016f6a:	0020      	movs	r0, r4
 8016f6c:	0029      	movs	r1, r5
 8016f6e:	f7eb fa61 	bl	8002434 <__aeabi_dmul>
 8016f72:	000d      	movs	r5, r1
 8016f74:	0004      	movs	r4, r0
 8016f76:	f7ec f833 	bl	8002fe0 <__aeabi_d2iz>
 8016f7a:	9021      	str	r0, [sp, #132]	; 0x84
 8016f7c:	f7ec f866 	bl	800304c <__aeabi_i2d>
 8016f80:	0002      	movs	r2, r0
 8016f82:	000b      	movs	r3, r1
 8016f84:	0020      	movs	r0, r4
 8016f86:	0029      	movs	r1, r5
 8016f88:	f7eb fcc6 	bl	8002918 <__aeabi_dsub>
 8016f8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016f8e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016f90:	3301      	adds	r3, #1
 8016f92:	930d      	str	r3, [sp, #52]	; 0x34
 8016f94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f96:	0004      	movs	r4, r0
 8016f98:	5c9b      	ldrb	r3, [r3, r2]
 8016f9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016f9c:	000d      	movs	r5, r1
 8016f9e:	7013      	strb	r3, [r2, #0]
 8016fa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016fa2:	9323      	str	r3, [sp, #140]	; 0x8c
 8016fa4:	3301      	adds	r3, #1
 8016fa6:	d00a      	beq.n	8016fbe <_svfprintf_r+0x74a>
 8016fa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016faa:	2200      	movs	r2, #0
 8016fac:	3b01      	subs	r3, #1
 8016fae:	9310      	str	r3, [sp, #64]	; 0x40
 8016fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fb2:	9318      	str	r3, [sp, #96]	; 0x60
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	f7e9 fa51 	bl	800045c <__aeabi_dcmpeq>
 8016fba:	2800      	cmp	r0, #0
 8016fbc:	d0d3      	beq.n	8016f66 <_svfprintf_r+0x6f2>
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	4b69      	ldr	r3, [pc, #420]	; (8017168 <_svfprintf_r+0x8f4>)
 8016fc2:	0020      	movs	r0, r4
 8016fc4:	0029      	movs	r1, r5
 8016fc6:	f7e9 fa63 	bl	8000490 <__aeabi_dcmpgt>
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	d126      	bne.n	801701c <_svfprintf_r+0x7a8>
 8016fce:	2200      	movs	r2, #0
 8016fd0:	4b65      	ldr	r3, [pc, #404]	; (8017168 <_svfprintf_r+0x8f4>)
 8016fd2:	0020      	movs	r0, r4
 8016fd4:	0029      	movs	r1, r5
 8016fd6:	f7e9 fa41 	bl	800045c <__aeabi_dcmpeq>
 8016fda:	2800      	cmp	r0, #0
 8016fdc:	d002      	beq.n	8016fe4 <_svfprintf_r+0x770>
 8016fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016fe0:	07db      	lsls	r3, r3, #31
 8016fe2:	d41b      	bmi.n	801701c <_svfprintf_r+0x7a8>
 8016fe4:	2130      	movs	r1, #48	; 0x30
 8016fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fe8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8016fea:	1898      	adds	r0, r3, r2
 8016fec:	930d      	str	r3, [sp, #52]	; 0x34
 8016fee:	1ac2      	subs	r2, r0, r3
 8016ff0:	d426      	bmi.n	8017040 <_svfprintf_r+0x7cc>
 8016ff2:	7019      	strb	r1, [r3, #0]
 8016ff4:	3301      	adds	r3, #1
 8016ff6:	e7f9      	b.n	8016fec <_svfprintf_r+0x778>
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8016ffc:	ab3f      	add	r3, sp, #252	; 0xfc
 8016ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8017000:	e77d      	b.n	8016efe <_svfprintf_r+0x68a>
 8017002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017004:	930c      	str	r3, [sp, #48]	; 0x30
 8017006:	e77a      	b.n	8016efe <_svfprintf_r+0x68a>
 8017008:	2306      	movs	r3, #6
 801700a:	9308      	str	r3, [sp, #32]
 801700c:	e777      	b.n	8016efe <_svfprintf_r+0x68a>
 801700e:	9b08      	ldr	r3, [sp, #32]
 8017010:	930c      	str	r3, [sp, #48]	; 0x30
 8017012:	2301      	movs	r3, #1
 8017014:	e7f9      	b.n	801700a <_svfprintf_r+0x796>
 8017016:	930d      	str	r3, [sp, #52]	; 0x34
 8017018:	2300      	movs	r3, #0
 801701a:	e77f      	b.n	8016f1c <_svfprintf_r+0x6a8>
 801701c:	2030      	movs	r0, #48	; 0x30
 801701e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017020:	932a      	str	r3, [sp, #168]	; 0xa8
 8017022:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017024:	7bda      	ldrb	r2, [r3, #15]
 8017026:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017028:	3b01      	subs	r3, #1
 801702a:	932a      	str	r3, [sp, #168]	; 0xa8
 801702c:	7819      	ldrb	r1, [r3, #0]
 801702e:	4291      	cmp	r1, r2
 8017030:	d07d      	beq.n	801712e <_svfprintf_r+0x8ba>
 8017032:	1c4a      	adds	r2, r1, #1
 8017034:	b2d2      	uxtb	r2, r2
 8017036:	2939      	cmp	r1, #57	; 0x39
 8017038:	d101      	bne.n	801703e <_svfprintf_r+0x7ca>
 801703a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801703c:	7a92      	ldrb	r2, [r2, #10]
 801703e:	701a      	strb	r2, [r3, #0]
 8017040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017044:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8017046:	1a9b      	subs	r3, r3, r2
 8017048:	930d      	str	r3, [sp, #52]	; 0x34
 801704a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801704c:	2b47      	cmp	r3, #71	; 0x47
 801704e:	d000      	beq.n	8017052 <_svfprintf_r+0x7de>
 8017050:	e0d2      	b.n	80171f8 <_svfprintf_r+0x984>
 8017052:	1ceb      	adds	r3, r5, #3
 8017054:	db03      	blt.n	801705e <_svfprintf_r+0x7ea>
 8017056:	9b08      	ldr	r3, [sp, #32]
 8017058:	42ab      	cmp	r3, r5
 801705a:	db00      	blt.n	801705e <_svfprintf_r+0x7ea>
 801705c:	e0fd      	b.n	801725a <_svfprintf_r+0x9e6>
 801705e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017060:	3b02      	subs	r3, #2
 8017062:	930e      	str	r3, [sp, #56]	; 0x38
 8017064:	2238      	movs	r2, #56	; 0x38
 8017066:	466b      	mov	r3, sp
 8017068:	990e      	ldr	r1, [sp, #56]	; 0x38
 801706a:	189b      	adds	r3, r3, r2
 801706c:	3a18      	subs	r2, #24
 801706e:	4391      	bics	r1, r2
 8017070:	1e6c      	subs	r4, r5, #1
 8017072:	000a      	movs	r2, r1
 8017074:	9426      	str	r4, [sp, #152]	; 0x98
 8017076:	781b      	ldrb	r3, [r3, #0]
 8017078:	2100      	movs	r1, #0
 801707a:	2a41      	cmp	r2, #65	; 0x41
 801707c:	d102      	bne.n	8017084 <_svfprintf_r+0x810>
 801707e:	330f      	adds	r3, #15
 8017080:	b2db      	uxtb	r3, r3
 8017082:	3101      	adds	r1, #1
 8017084:	aa28      	add	r2, sp, #160	; 0xa0
 8017086:	7013      	strb	r3, [r2, #0]
 8017088:	232b      	movs	r3, #43	; 0x2b
 801708a:	2c00      	cmp	r4, #0
 801708c:	da02      	bge.n	8017094 <_svfprintf_r+0x820>
 801708e:	2401      	movs	r4, #1
 8017090:	232d      	movs	r3, #45	; 0x2d
 8017092:	1b64      	subs	r4, r4, r5
 8017094:	7053      	strb	r3, [r2, #1]
 8017096:	2c09      	cmp	r4, #9
 8017098:	dc00      	bgt.n	801709c <_svfprintf_r+0x828>
 801709a:	e0c7      	b.n	801722c <_svfprintf_r+0x9b8>
 801709c:	2537      	movs	r5, #55	; 0x37
 801709e:	ab1e      	add	r3, sp, #120	; 0x78
 80170a0:	18ed      	adds	r5, r5, r3
 80170a2:	1e6b      	subs	r3, r5, #1
 80170a4:	0020      	movs	r0, r4
 80170a6:	210a      	movs	r1, #10
 80170a8:	9308      	str	r3, [sp, #32]
 80170aa:	f7e9 f9c1 	bl	8000430 <__aeabi_idivmod>
 80170ae:	1e6b      	subs	r3, r5, #1
 80170b0:	3130      	adds	r1, #48	; 0x30
 80170b2:	7019      	strb	r1, [r3, #0]
 80170b4:	0020      	movs	r0, r4
 80170b6:	210a      	movs	r1, #10
 80170b8:	f7e9 f8d4 	bl	8000264 <__divsi3>
 80170bc:	0004      	movs	r4, r0
 80170be:	2809      	cmp	r0, #9
 80170c0:	dd00      	ble.n	80170c4 <_svfprintf_r+0x850>
 80170c2:	e0ac      	b.n	801721e <_svfprintf_r+0x9aa>
 80170c4:	232a      	movs	r3, #42	; 0x2a
 80170c6:	2137      	movs	r1, #55	; 0x37
 80170c8:	aa1e      	add	r2, sp, #120	; 0x78
 80170ca:	3d02      	subs	r5, #2
 80170cc:	3430      	adds	r4, #48	; 0x30
 80170ce:	702c      	strb	r4, [r5, #0]
 80170d0:	189b      	adds	r3, r3, r2
 80170d2:	1889      	adds	r1, r1, r2
 80170d4:	001a      	movs	r2, r3
 80170d6:	428d      	cmp	r5, r1
 80170d8:	d200      	bcs.n	80170dc <_svfprintf_r+0x868>
 80170da:	e0a2      	b.n	8017222 <_svfprintf_r+0x9ae>
 80170dc:	ab28      	add	r3, sp, #160	; 0xa0
 80170de:	1ad3      	subs	r3, r2, r3
 80170e0:	931d      	str	r3, [sp, #116]	; 0x74
 80170e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80170e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170e6:	4694      	mov	ip, r2
 80170e8:	4463      	add	r3, ip
 80170ea:	9308      	str	r3, [sp, #32]
 80170ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170ee:	2b01      	cmp	r3, #1
 80170f0:	dc01      	bgt.n	80170f6 <_svfprintf_r+0x882>
 80170f2:	07f3      	lsls	r3, r6, #31
 80170f4:	d504      	bpl.n	8017100 <_svfprintf_r+0x88c>
 80170f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80170f8:	9b08      	ldr	r3, [sp, #32]
 80170fa:	4694      	mov	ip, r2
 80170fc:	4463      	add	r3, ip
 80170fe:	9308      	str	r3, [sp, #32]
 8017100:	2280      	movs	r2, #128	; 0x80
 8017102:	4b1a      	ldr	r3, [pc, #104]	; (801716c <_svfprintf_r+0x8f8>)
 8017104:	0052      	lsls	r2, r2, #1
 8017106:	4033      	ands	r3, r6
 8017108:	431a      	orrs	r2, r3
 801710a:	2300      	movs	r3, #0
 801710c:	001d      	movs	r5, r3
 801710e:	9220      	str	r2, [sp, #128]	; 0x80
 8017110:	9310      	str	r3, [sp, #64]	; 0x40
 8017112:	930f      	str	r3, [sp, #60]	; 0x3c
 8017114:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017116:	2b00      	cmp	r3, #0
 8017118:	d100      	bne.n	801711c <_svfprintf_r+0x8a8>
 801711a:	e270      	b.n	80175fe <_svfprintf_r+0xd8a>
 801711c:	231b      	movs	r3, #27
 801711e:	aa1e      	add	r2, sp, #120	; 0x78
 8017120:	189b      	adds	r3, r3, r2
 8017122:	222d      	movs	r2, #45	; 0x2d
 8017124:	701a      	strb	r2, [r3, #0]
 8017126:	2300      	movs	r3, #0
 8017128:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801712a:	9317      	str	r3, [sp, #92]	; 0x5c
 801712c:	e539      	b.n	8016ba2 <_svfprintf_r+0x32e>
 801712e:	7018      	strb	r0, [r3, #0]
 8017130:	e779      	b.n	8017026 <_svfprintf_r+0x7b2>
 8017132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017134:	2b46      	cmp	r3, #70	; 0x46
 8017136:	d01b      	beq.n	8017170 <_svfprintf_r+0x8fc>
 8017138:	9d08      	ldr	r5, [sp, #32]
 801713a:	2b45      	cmp	r3, #69	; 0x45
 801713c:	d101      	bne.n	8017142 <_svfprintf_r+0x8ce>
 801713e:	9b08      	ldr	r3, [sp, #32]
 8017140:	1c5d      	adds	r5, r3, #1
 8017142:	2302      	movs	r3, #2
 8017144:	e016      	b.n	8017174 <_svfprintf_r+0x900>
 8017146:	46c0      	nop			; (mov r8, r8)
 8017148:	7fefffff 	.word	0x7fefffff
 801714c:	0801d534 	.word	0x0801d534
 8017150:	0801d530 	.word	0x0801d530
 8017154:	0801d53c 	.word	0x0801d53c
 8017158:	0801d538 	.word	0x0801d538
 801715c:	0801d551 	.word	0x0801d551
 8017160:	0801d540 	.word	0x0801d540
 8017164:	40300000 	.word	0x40300000
 8017168:	3fe00000 	.word	0x3fe00000
 801716c:	fffffbff 	.word	0xfffffbff
 8017170:	2303      	movs	r3, #3
 8017172:	9d08      	ldr	r5, [sp, #32]
 8017174:	aa2a      	add	r2, sp, #168	; 0xa8
 8017176:	9204      	str	r2, [sp, #16]
 8017178:	aa27      	add	r2, sp, #156	; 0x9c
 801717a:	9203      	str	r2, [sp, #12]
 801717c:	aa26      	add	r2, sp, #152	; 0x98
 801717e:	9202      	str	r2, [sp, #8]
 8017180:	9300      	str	r3, [sp, #0]
 8017182:	9501      	str	r5, [sp, #4]
 8017184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017186:	0022      	movs	r2, r4
 8017188:	980a      	ldr	r0, [sp, #40]	; 0x28
 801718a:	f000 fe79 	bl	8017e80 <_dtoa_r>
 801718e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017190:	9009      	str	r0, [sp, #36]	; 0x24
 8017192:	2b47      	cmp	r3, #71	; 0x47
 8017194:	d101      	bne.n	801719a <_svfprintf_r+0x926>
 8017196:	07f3      	lsls	r3, r6, #31
 8017198:	d524      	bpl.n	80171e4 <_svfprintf_r+0x970>
 801719a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801719c:	195b      	adds	r3, r3, r5
 801719e:	9310      	str	r3, [sp, #64]	; 0x40
 80171a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171a2:	2b46      	cmp	r3, #70	; 0x46
 80171a4:	d113      	bne.n	80171ce <_svfprintf_r+0x95a>
 80171a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171a8:	781b      	ldrb	r3, [r3, #0]
 80171aa:	2b30      	cmp	r3, #48	; 0x30
 80171ac:	d10a      	bne.n	80171c4 <_svfprintf_r+0x950>
 80171ae:	2200      	movs	r2, #0
 80171b0:	2300      	movs	r3, #0
 80171b2:	0020      	movs	r0, r4
 80171b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80171b6:	f7e9 f951 	bl	800045c <__aeabi_dcmpeq>
 80171ba:	2800      	cmp	r0, #0
 80171bc:	d102      	bne.n	80171c4 <_svfprintf_r+0x950>
 80171be:	2301      	movs	r3, #1
 80171c0:	1b5d      	subs	r5, r3, r5
 80171c2:	9526      	str	r5, [sp, #152]	; 0x98
 80171c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80171c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80171c8:	4694      	mov	ip, r2
 80171ca:	4463      	add	r3, ip
 80171cc:	9310      	str	r3, [sp, #64]	; 0x40
 80171ce:	2200      	movs	r2, #0
 80171d0:	2300      	movs	r3, #0
 80171d2:	0020      	movs	r0, r4
 80171d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80171d6:	f7e9 f941 	bl	800045c <__aeabi_dcmpeq>
 80171da:	2230      	movs	r2, #48	; 0x30
 80171dc:	2800      	cmp	r0, #0
 80171de:	d006      	beq.n	80171ee <_svfprintf_r+0x97a>
 80171e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80171e2:	932a      	str	r3, [sp, #168]	; 0xa8
 80171e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80171e6:	e72c      	b.n	8017042 <_svfprintf_r+0x7ce>
 80171e8:	1c59      	adds	r1, r3, #1
 80171ea:	912a      	str	r1, [sp, #168]	; 0xa8
 80171ec:	701a      	strb	r2, [r3, #0]
 80171ee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80171f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80171f2:	4299      	cmp	r1, r3
 80171f4:	d8f8      	bhi.n	80171e8 <_svfprintf_r+0x974>
 80171f6:	e7f5      	b.n	80171e4 <_svfprintf_r+0x970>
 80171f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171fa:	2b46      	cmp	r3, #70	; 0x46
 80171fc:	d000      	beq.n	8017200 <_svfprintf_r+0x98c>
 80171fe:	e731      	b.n	8017064 <_svfprintf_r+0x7f0>
 8017200:	9b08      	ldr	r3, [sp, #32]
 8017202:	2d00      	cmp	r5, #0
 8017204:	dd21      	ble.n	801724a <_svfprintf_r+0x9d6>
 8017206:	2b00      	cmp	r3, #0
 8017208:	d101      	bne.n	801720e <_svfprintf_r+0x99a>
 801720a:	07f3      	lsls	r3, r6, #31
 801720c:	d54a      	bpl.n	80172a4 <_svfprintf_r+0xa30>
 801720e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017210:	18eb      	adds	r3, r5, r3
 8017212:	9a08      	ldr	r2, [sp, #32]
 8017214:	18d3      	adds	r3, r2, r3
 8017216:	9308      	str	r3, [sp, #32]
 8017218:	2366      	movs	r3, #102	; 0x66
 801721a:	930e      	str	r3, [sp, #56]	; 0x38
 801721c:	e034      	b.n	8017288 <_svfprintf_r+0xa14>
 801721e:	9d08      	ldr	r5, [sp, #32]
 8017220:	e73f      	b.n	80170a2 <_svfprintf_r+0x82e>
 8017222:	782a      	ldrb	r2, [r5, #0]
 8017224:	3501      	adds	r5, #1
 8017226:	701a      	strb	r2, [r3, #0]
 8017228:	3301      	adds	r3, #1
 801722a:	e753      	b.n	80170d4 <_svfprintf_r+0x860>
 801722c:	232a      	movs	r3, #42	; 0x2a
 801722e:	aa1e      	add	r2, sp, #120	; 0x78
 8017230:	189b      	adds	r3, r3, r2
 8017232:	2900      	cmp	r1, #0
 8017234:	d105      	bne.n	8017242 <_svfprintf_r+0x9ce>
 8017236:	2230      	movs	r2, #48	; 0x30
 8017238:	ab28      	add	r3, sp, #160	; 0xa0
 801723a:	709a      	strb	r2, [r3, #2]
 801723c:	232b      	movs	r3, #43	; 0x2b
 801723e:	aa1e      	add	r2, sp, #120	; 0x78
 8017240:	189b      	adds	r3, r3, r2
 8017242:	3430      	adds	r4, #48	; 0x30
 8017244:	1c5a      	adds	r2, r3, #1
 8017246:	701c      	strb	r4, [r3, #0]
 8017248:	e748      	b.n	80170dc <_svfprintf_r+0x868>
 801724a:	2b00      	cmp	r3, #0
 801724c:	d102      	bne.n	8017254 <_svfprintf_r+0x9e0>
 801724e:	3301      	adds	r3, #1
 8017250:	421e      	tst	r6, r3
 8017252:	d029      	beq.n	80172a8 <_svfprintf_r+0xa34>
 8017254:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017256:	3301      	adds	r3, #1
 8017258:	e7db      	b.n	8017212 <_svfprintf_r+0x99e>
 801725a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801725c:	42ab      	cmp	r3, r5
 801725e:	dc06      	bgt.n	801726e <_svfprintf_r+0x9fa>
 8017260:	07f3      	lsls	r3, r6, #31
 8017262:	d524      	bpl.n	80172ae <_svfprintf_r+0xa3a>
 8017264:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017266:	18eb      	adds	r3, r5, r3
 8017268:	9308      	str	r3, [sp, #32]
 801726a:	2367      	movs	r3, #103	; 0x67
 801726c:	e7d5      	b.n	801721a <_svfprintf_r+0x9a6>
 801726e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017272:	4694      	mov	ip, r2
 8017274:	4463      	add	r3, ip
 8017276:	9308      	str	r3, [sp, #32]
 8017278:	2367      	movs	r3, #103	; 0x67
 801727a:	930e      	str	r3, [sp, #56]	; 0x38
 801727c:	2d00      	cmp	r5, #0
 801727e:	dc03      	bgt.n	8017288 <_svfprintf_r+0xa14>
 8017280:	9b08      	ldr	r3, [sp, #32]
 8017282:	1b5b      	subs	r3, r3, r5
 8017284:	3301      	adds	r3, #1
 8017286:	9308      	str	r3, [sp, #32]
 8017288:	2380      	movs	r3, #128	; 0x80
 801728a:	00db      	lsls	r3, r3, #3
 801728c:	401e      	ands	r6, r3
 801728e:	2300      	movs	r3, #0
 8017290:	960f      	str	r6, [sp, #60]	; 0x3c
 8017292:	9310      	str	r3, [sp, #64]	; 0x40
 8017294:	2e00      	cmp	r6, #0
 8017296:	d100      	bne.n	801729a <_svfprintf_r+0xa26>
 8017298:	e73c      	b.n	8017114 <_svfprintf_r+0x8a0>
 801729a:	2d00      	cmp	r5, #0
 801729c:	dc27      	bgt.n	80172ee <_svfprintf_r+0xa7a>
 801729e:	2300      	movs	r3, #0
 80172a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80172a2:	e737      	b.n	8017114 <_svfprintf_r+0x8a0>
 80172a4:	9508      	str	r5, [sp, #32]
 80172a6:	e7b7      	b.n	8017218 <_svfprintf_r+0x9a4>
 80172a8:	2266      	movs	r2, #102	; 0x66
 80172aa:	920e      	str	r2, [sp, #56]	; 0x38
 80172ac:	e7eb      	b.n	8017286 <_svfprintf_r+0xa12>
 80172ae:	9508      	str	r5, [sp, #32]
 80172b0:	e7db      	b.n	801726a <_svfprintf_r+0x9f6>
 80172b2:	42ab      	cmp	r3, r5
 80172b4:	da0e      	bge.n	80172d4 <_svfprintf_r+0xa60>
 80172b6:	1aed      	subs	r5, r5, r3
 80172b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80172ba:	785b      	ldrb	r3, [r3, #1]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d012      	beq.n	80172e6 <_svfprintf_r+0xa72>
 80172c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172c2:	3301      	adds	r3, #1
 80172c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80172c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80172c8:	3301      	adds	r3, #1
 80172ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80172cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80172ce:	781b      	ldrb	r3, [r3, #0]
 80172d0:	2bff      	cmp	r3, #255	; 0xff
 80172d2:	d1ee      	bne.n	80172b2 <_svfprintf_r+0xa3e>
 80172d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80172d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172d8:	189b      	adds	r3, r3, r2
 80172da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80172dc:	4353      	muls	r3, r2
 80172de:	9a08      	ldr	r2, [sp, #32]
 80172e0:	189b      	adds	r3, r3, r2
 80172e2:	9308      	str	r3, [sp, #32]
 80172e4:	e716      	b.n	8017114 <_svfprintf_r+0x8a0>
 80172e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80172e8:	3301      	adds	r3, #1
 80172ea:	9310      	str	r3, [sp, #64]	; 0x40
 80172ec:	e7ee      	b.n	80172cc <_svfprintf_r+0xa58>
 80172ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80172f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80172f2:	e7eb      	b.n	80172cc <_svfprintf_r+0xa58>
 80172f4:	0022      	movs	r2, r4
 80172f6:	ca08      	ldmia	r2!, {r3}
 80172f8:	9212      	str	r2, [sp, #72]	; 0x48
 80172fa:	06b2      	lsls	r2, r6, #26
 80172fc:	d508      	bpl.n	8017310 <_svfprintf_r+0xa9c>
 80172fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017300:	601a      	str	r2, [r3, #0]
 8017302:	17d2      	asrs	r2, r2, #31
 8017304:	605a      	str	r2, [r3, #4]
 8017306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017308:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801730a:	9309      	str	r3, [sp, #36]	; 0x24
 801730c:	f7ff faeb 	bl	80168e6 <_svfprintf_r+0x72>
 8017310:	06f2      	lsls	r2, r6, #27
 8017312:	d502      	bpl.n	801731a <_svfprintf_r+0xaa6>
 8017314:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017316:	601a      	str	r2, [r3, #0]
 8017318:	e7f5      	b.n	8017306 <_svfprintf_r+0xa92>
 801731a:	0672      	lsls	r2, r6, #25
 801731c:	d502      	bpl.n	8017324 <_svfprintf_r+0xab0>
 801731e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017320:	801a      	strh	r2, [r3, #0]
 8017322:	e7f0      	b.n	8017306 <_svfprintf_r+0xa92>
 8017324:	05b2      	lsls	r2, r6, #22
 8017326:	d5f5      	bpl.n	8017314 <_svfprintf_r+0xaa0>
 8017328:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801732a:	701a      	strb	r2, [r3, #0]
 801732c:	e7eb      	b.n	8017306 <_svfprintf_r+0xa92>
 801732e:	2310      	movs	r3, #16
 8017330:	431e      	orrs	r6, r3
 8017332:	2220      	movs	r2, #32
 8017334:	4032      	ands	r2, r6
 8017336:	d025      	beq.n	8017384 <_svfprintf_r+0xb10>
 8017338:	2307      	movs	r3, #7
 801733a:	3407      	adds	r4, #7
 801733c:	439c      	bics	r4, r3
 801733e:	0023      	movs	r3, r4
 8017340:	3308      	adds	r3, #8
 8017342:	9312      	str	r3, [sp, #72]	; 0x48
 8017344:	6823      	ldr	r3, [r4, #0]
 8017346:	6864      	ldr	r4, [r4, #4]
 8017348:	9306      	str	r3, [sp, #24]
 801734a:	9407      	str	r4, [sp, #28]
 801734c:	4bc2      	ldr	r3, [pc, #776]	; (8017658 <_svfprintf_r+0xde4>)
 801734e:	401e      	ands	r6, r3
 8017350:	2300      	movs	r3, #0
 8017352:	221b      	movs	r2, #27
 8017354:	a91e      	add	r1, sp, #120	; 0x78
 8017356:	1852      	adds	r2, r2, r1
 8017358:	2100      	movs	r1, #0
 801735a:	7011      	strb	r1, [r2, #0]
 801735c:	9a08      	ldr	r2, [sp, #32]
 801735e:	3201      	adds	r2, #1
 8017360:	d100      	bne.n	8017364 <_svfprintf_r+0xaf0>
 8017362:	e0a6      	b.n	80174b2 <_svfprintf_r+0xc3e>
 8017364:	0032      	movs	r2, r6
 8017366:	2180      	movs	r1, #128	; 0x80
 8017368:	9807      	ldr	r0, [sp, #28]
 801736a:	438e      	bics	r6, r1
 801736c:	9906      	ldr	r1, [sp, #24]
 801736e:	4301      	orrs	r1, r0
 8017370:	d000      	beq.n	8017374 <_svfprintf_r+0xb00>
 8017372:	e09e      	b.n	80174b2 <_svfprintf_r+0xc3e>
 8017374:	9908      	ldr	r1, [sp, #32]
 8017376:	2900      	cmp	r1, #0
 8017378:	d100      	bne.n	801737c <_svfprintf_r+0xb08>
 801737a:	e125      	b.n	80175c8 <_svfprintf_r+0xd54>
 801737c:	2b01      	cmp	r3, #1
 801737e:	d000      	beq.n	8017382 <_svfprintf_r+0xb0e>
 8017380:	e09a      	b.n	80174b8 <_svfprintf_r+0xc44>
 8017382:	e518      	b.n	8016db6 <_svfprintf_r+0x542>
 8017384:	1d23      	adds	r3, r4, #4
 8017386:	9312      	str	r3, [sp, #72]	; 0x48
 8017388:	2310      	movs	r3, #16
 801738a:	4033      	ands	r3, r6
 801738c:	d003      	beq.n	8017396 <_svfprintf_r+0xb22>
 801738e:	6823      	ldr	r3, [r4, #0]
 8017390:	9306      	str	r3, [sp, #24]
 8017392:	9207      	str	r2, [sp, #28]
 8017394:	e7da      	b.n	801734c <_svfprintf_r+0xad8>
 8017396:	2240      	movs	r2, #64	; 0x40
 8017398:	4032      	ands	r2, r6
 801739a:	d004      	beq.n	80173a6 <_svfprintf_r+0xb32>
 801739c:	6822      	ldr	r2, [r4, #0]
 801739e:	b292      	uxth	r2, r2
 80173a0:	9206      	str	r2, [sp, #24]
 80173a2:	9307      	str	r3, [sp, #28]
 80173a4:	e7d2      	b.n	801734c <_svfprintf_r+0xad8>
 80173a6:	2380      	movs	r3, #128	; 0x80
 80173a8:	009b      	lsls	r3, r3, #2
 80173aa:	4033      	ands	r3, r6
 80173ac:	d002      	beq.n	80173b4 <_svfprintf_r+0xb40>
 80173ae:	6823      	ldr	r3, [r4, #0]
 80173b0:	b2db      	uxtb	r3, r3
 80173b2:	e7ed      	b.n	8017390 <_svfprintf_r+0xb1c>
 80173b4:	6822      	ldr	r2, [r4, #0]
 80173b6:	e7f3      	b.n	80173a0 <_svfprintf_r+0xb2c>
 80173b8:	1d23      	adds	r3, r4, #4
 80173ba:	49a8      	ldr	r1, [pc, #672]	; (801765c <_svfprintf_r+0xde8>)
 80173bc:	aa25      	add	r2, sp, #148	; 0x94
 80173be:	9312      	str	r3, [sp, #72]	; 0x48
 80173c0:	6823      	ldr	r3, [r4, #0]
 80173c2:	8011      	strh	r1, [r2, #0]
 80173c4:	4aa6      	ldr	r2, [pc, #664]	; (8017660 <_svfprintf_r+0xdec>)
 80173c6:	9306      	str	r3, [sp, #24]
 80173c8:	2300      	movs	r3, #0
 80173ca:	921e      	str	r2, [sp, #120]	; 0x78
 80173cc:	2278      	movs	r2, #120	; 0x78
 80173ce:	9307      	str	r3, [sp, #28]
 80173d0:	3302      	adds	r3, #2
 80173d2:	431e      	orrs	r6, r3
 80173d4:	920e      	str	r2, [sp, #56]	; 0x38
 80173d6:	e7bc      	b.n	8017352 <_svfprintf_r+0xade>
 80173d8:	1d23      	adds	r3, r4, #4
 80173da:	9312      	str	r3, [sp, #72]	; 0x48
 80173dc:	6823      	ldr	r3, [r4, #0]
 80173de:	2400      	movs	r4, #0
 80173e0:	9309      	str	r3, [sp, #36]	; 0x24
 80173e2:	231b      	movs	r3, #27
 80173e4:	aa1e      	add	r2, sp, #120	; 0x78
 80173e6:	189b      	adds	r3, r3, r2
 80173e8:	701c      	strb	r4, [r3, #0]
 80173ea:	9b08      	ldr	r3, [sp, #32]
 80173ec:	3301      	adds	r3, #1
 80173ee:	d00e      	beq.n	801740e <_svfprintf_r+0xb9a>
 80173f0:	9a08      	ldr	r2, [sp, #32]
 80173f2:	0021      	movs	r1, r4
 80173f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173f6:	f001 ff79 	bl	80192ec <memchr>
 80173fa:	900c      	str	r0, [sp, #48]	; 0x30
 80173fc:	42a0      	cmp	r0, r4
 80173fe:	d100      	bne.n	8017402 <_svfprintf_r+0xb8e>
 8017400:	e100      	b.n	8017604 <_svfprintf_r+0xd90>
 8017402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017404:	1a83      	subs	r3, r0, r2
 8017406:	9308      	str	r3, [sp, #32]
 8017408:	940c      	str	r4, [sp, #48]	; 0x30
 801740a:	0023      	movs	r3, r4
 801740c:	e527      	b.n	8016e5e <_svfprintf_r+0x5ea>
 801740e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017410:	f7e8 fe82 	bl	8000118 <strlen>
 8017414:	9008      	str	r0, [sp, #32]
 8017416:	e7f7      	b.n	8017408 <_svfprintf_r+0xb94>
 8017418:	2310      	movs	r3, #16
 801741a:	431e      	orrs	r6, r3
 801741c:	2220      	movs	r2, #32
 801741e:	4032      	ands	r2, r6
 8017420:	d00b      	beq.n	801743a <_svfprintf_r+0xbc6>
 8017422:	2307      	movs	r3, #7
 8017424:	3407      	adds	r4, #7
 8017426:	439c      	bics	r4, r3
 8017428:	0023      	movs	r3, r4
 801742a:	3308      	adds	r3, #8
 801742c:	9312      	str	r3, [sp, #72]	; 0x48
 801742e:	6823      	ldr	r3, [r4, #0]
 8017430:	6864      	ldr	r4, [r4, #4]
 8017432:	9306      	str	r3, [sp, #24]
 8017434:	9407      	str	r4, [sp, #28]
 8017436:	2301      	movs	r3, #1
 8017438:	e78b      	b.n	8017352 <_svfprintf_r+0xade>
 801743a:	1d23      	adds	r3, r4, #4
 801743c:	9312      	str	r3, [sp, #72]	; 0x48
 801743e:	2310      	movs	r3, #16
 8017440:	4033      	ands	r3, r6
 8017442:	d003      	beq.n	801744c <_svfprintf_r+0xbd8>
 8017444:	6823      	ldr	r3, [r4, #0]
 8017446:	9306      	str	r3, [sp, #24]
 8017448:	9207      	str	r2, [sp, #28]
 801744a:	e7f4      	b.n	8017436 <_svfprintf_r+0xbc2>
 801744c:	2240      	movs	r2, #64	; 0x40
 801744e:	4032      	ands	r2, r6
 8017450:	d004      	beq.n	801745c <_svfprintf_r+0xbe8>
 8017452:	6822      	ldr	r2, [r4, #0]
 8017454:	b292      	uxth	r2, r2
 8017456:	9206      	str	r2, [sp, #24]
 8017458:	9307      	str	r3, [sp, #28]
 801745a:	e7ec      	b.n	8017436 <_svfprintf_r+0xbc2>
 801745c:	2380      	movs	r3, #128	; 0x80
 801745e:	009b      	lsls	r3, r3, #2
 8017460:	4033      	ands	r3, r6
 8017462:	d002      	beq.n	801746a <_svfprintf_r+0xbf6>
 8017464:	6823      	ldr	r3, [r4, #0]
 8017466:	b2db      	uxtb	r3, r3
 8017468:	e7ed      	b.n	8017446 <_svfprintf_r+0xbd2>
 801746a:	6822      	ldr	r2, [r4, #0]
 801746c:	e7f3      	b.n	8017456 <_svfprintf_r+0xbe2>
 801746e:	4b7c      	ldr	r3, [pc, #496]	; (8017660 <_svfprintf_r+0xdec>)
 8017470:	f7ff fad9 	bl	8016a26 <_svfprintf_r+0x1b2>
 8017474:	1d23      	adds	r3, r4, #4
 8017476:	9312      	str	r3, [sp, #72]	; 0x48
 8017478:	2310      	movs	r3, #16
 801747a:	4033      	ands	r3, r6
 801747c:	d004      	beq.n	8017488 <_svfprintf_r+0xc14>
 801747e:	6823      	ldr	r3, [r4, #0]
 8017480:	9306      	str	r3, [sp, #24]
 8017482:	9207      	str	r2, [sp, #28]
 8017484:	f7ff fadf 	bl	8016a46 <_svfprintf_r+0x1d2>
 8017488:	2240      	movs	r2, #64	; 0x40
 801748a:	4032      	ands	r2, r6
 801748c:	d005      	beq.n	801749a <_svfprintf_r+0xc26>
 801748e:	6822      	ldr	r2, [r4, #0]
 8017490:	b292      	uxth	r2, r2
 8017492:	9206      	str	r2, [sp, #24]
 8017494:	9307      	str	r3, [sp, #28]
 8017496:	f7ff fad6 	bl	8016a46 <_svfprintf_r+0x1d2>
 801749a:	2380      	movs	r3, #128	; 0x80
 801749c:	009b      	lsls	r3, r3, #2
 801749e:	4033      	ands	r3, r6
 80174a0:	d002      	beq.n	80174a8 <_svfprintf_r+0xc34>
 80174a2:	6823      	ldr	r3, [r4, #0]
 80174a4:	b2db      	uxtb	r3, r3
 80174a6:	e7eb      	b.n	8017480 <_svfprintf_r+0xc0c>
 80174a8:	6822      	ldr	r2, [r4, #0]
 80174aa:	e7f2      	b.n	8017492 <_svfprintf_r+0xc1e>
 80174ac:	0032      	movs	r2, r6
 80174ae:	2301      	movs	r3, #1
 80174b0:	e759      	b.n	8017366 <_svfprintf_r+0xaf2>
 80174b2:	2b01      	cmp	r3, #1
 80174b4:	d100      	bne.n	80174b8 <_svfprintf_r+0xc44>
 80174b6:	e476      	b.n	8016da6 <_svfprintf_r+0x532>
 80174b8:	2b02      	cmp	r3, #2
 80174ba:	d06b      	beq.n	8017594 <_svfprintf_r+0xd20>
 80174bc:	2507      	movs	r5, #7
 80174be:	ab58      	add	r3, sp, #352	; 0x160
 80174c0:	1e5a      	subs	r2, r3, #1
 80174c2:	9209      	str	r2, [sp, #36]	; 0x24
 80174c4:	9a06      	ldr	r2, [sp, #24]
 80174c6:	1e59      	subs	r1, r3, #1
 80174c8:	402a      	ands	r2, r5
 80174ca:	3230      	adds	r2, #48	; 0x30
 80174cc:	700a      	strb	r2, [r1, #0]
 80174ce:	9907      	ldr	r1, [sp, #28]
 80174d0:	074c      	lsls	r4, r1, #29
 80174d2:	9906      	ldr	r1, [sp, #24]
 80174d4:	08c8      	lsrs	r0, r1, #3
 80174d6:	9907      	ldr	r1, [sp, #28]
 80174d8:	4304      	orrs	r4, r0
 80174da:	08c9      	lsrs	r1, r1, #3
 80174dc:	9107      	str	r1, [sp, #28]
 80174de:	0021      	movs	r1, r4
 80174e0:	9807      	ldr	r0, [sp, #28]
 80174e2:	9406      	str	r4, [sp, #24]
 80174e4:	4301      	orrs	r1, r0
 80174e6:	d111      	bne.n	801750c <_svfprintf_r+0xc98>
 80174e8:	07f1      	lsls	r1, r6, #31
 80174ea:	d502      	bpl.n	80174f2 <_svfprintf_r+0xc7e>
 80174ec:	3b02      	subs	r3, #2
 80174ee:	2a30      	cmp	r2, #48	; 0x30
 80174f0:	d173      	bne.n	80175da <_svfprintf_r+0xd66>
 80174f2:	9b08      	ldr	r3, [sp, #32]
 80174f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80174f8:	ab58      	add	r3, sp, #352	; 0x160
 80174fa:	1a9b      	subs	r3, r3, r2
 80174fc:	9308      	str	r3, [sp, #32]
 80174fe:	2300      	movs	r3, #0
 8017500:	930c      	str	r3, [sp, #48]	; 0x30
 8017502:	9310      	str	r3, [sp, #64]	; 0x40
 8017504:	930f      	str	r3, [sp, #60]	; 0x3c
 8017506:	001d      	movs	r5, r3
 8017508:	f7ff fb4b 	bl	8016ba2 <_svfprintf_r+0x32e>
 801750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801750e:	e7d7      	b.n	80174c0 <_svfprintf_r+0xc4c>
 8017510:	2480      	movs	r4, #128	; 0x80
 8017512:	2300      	movs	r3, #0
 8017514:	00e4      	lsls	r4, r4, #3
 8017516:	930d      	str	r3, [sp, #52]	; 0x34
 8017518:	4034      	ands	r4, r6
 801751a:	ab58      	add	r3, sp, #352	; 0x160
 801751c:	3b01      	subs	r3, #1
 801751e:	9309      	str	r3, [sp, #36]	; 0x24
 8017520:	220a      	movs	r2, #10
 8017522:	9806      	ldr	r0, [sp, #24]
 8017524:	9907      	ldr	r1, [sp, #28]
 8017526:	2300      	movs	r3, #0
 8017528:	f7e9 f80a 	bl	8000540 <__aeabi_uldivmod>
 801752c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801752e:	3230      	adds	r2, #48	; 0x30
 8017530:	701a      	strb	r2, [r3, #0]
 8017532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017534:	3301      	adds	r3, #1
 8017536:	930d      	str	r3, [sp, #52]	; 0x34
 8017538:	2c00      	cmp	r4, #0
 801753a:	d01d      	beq.n	8017578 <_svfprintf_r+0xd04>
 801753c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801753e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017540:	781b      	ldrb	r3, [r3, #0]
 8017542:	429a      	cmp	r2, r3
 8017544:	d118      	bne.n	8017578 <_svfprintf_r+0xd04>
 8017546:	2aff      	cmp	r2, #255	; 0xff
 8017548:	d016      	beq.n	8017578 <_svfprintf_r+0xd04>
 801754a:	9b07      	ldr	r3, [sp, #28]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d102      	bne.n	8017556 <_svfprintf_r+0xce2>
 8017550:	9b06      	ldr	r3, [sp, #24]
 8017552:	2b09      	cmp	r3, #9
 8017554:	d910      	bls.n	8017578 <_svfprintf_r+0xd04>
 8017556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017558:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801755a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801755c:	1a9b      	subs	r3, r3, r2
 801755e:	0018      	movs	r0, r3
 8017560:	9309      	str	r3, [sp, #36]	; 0x24
 8017562:	f7fe fa52 	bl	8015a0a <strncpy>
 8017566:	2200      	movs	r2, #0
 8017568:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801756a:	920d      	str	r2, [sp, #52]	; 0x34
 801756c:	785b      	ldrb	r3, [r3, #1]
 801756e:	1e5a      	subs	r2, r3, #1
 8017570:	4193      	sbcs	r3, r2
 8017572:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017574:	18d3      	adds	r3, r2, r3
 8017576:	9313      	str	r3, [sp, #76]	; 0x4c
 8017578:	220a      	movs	r2, #10
 801757a:	9806      	ldr	r0, [sp, #24]
 801757c:	9907      	ldr	r1, [sp, #28]
 801757e:	2300      	movs	r3, #0
 8017580:	f7e8 ffde 	bl	8000540 <__aeabi_uldivmod>
 8017584:	9006      	str	r0, [sp, #24]
 8017586:	9107      	str	r1, [sp, #28]
 8017588:	9b06      	ldr	r3, [sp, #24]
 801758a:	9a07      	ldr	r2, [sp, #28]
 801758c:	4313      	orrs	r3, r2
 801758e:	d0b0      	beq.n	80174f2 <_svfprintf_r+0xc7e>
 8017590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017592:	e7c3      	b.n	801751c <_svfprintf_r+0xca8>
 8017594:	200f      	movs	r0, #15
 8017596:	ab58      	add	r3, sp, #352	; 0x160
 8017598:	9309      	str	r3, [sp, #36]	; 0x24
 801759a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801759c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801759e:	3b01      	subs	r3, #1
 80175a0:	9309      	str	r3, [sp, #36]	; 0x24
 80175a2:	9b06      	ldr	r3, [sp, #24]
 80175a4:	4003      	ands	r3, r0
 80175a6:	5cd3      	ldrb	r3, [r2, r3]
 80175a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80175aa:	7013      	strb	r3, [r2, #0]
 80175ac:	9b07      	ldr	r3, [sp, #28]
 80175ae:	0719      	lsls	r1, r3, #28
 80175b0:	9b06      	ldr	r3, [sp, #24]
 80175b2:	091a      	lsrs	r2, r3, #4
 80175b4:	9b07      	ldr	r3, [sp, #28]
 80175b6:	4311      	orrs	r1, r2
 80175b8:	091b      	lsrs	r3, r3, #4
 80175ba:	9307      	str	r3, [sp, #28]
 80175bc:	000b      	movs	r3, r1
 80175be:	9a07      	ldr	r2, [sp, #28]
 80175c0:	9106      	str	r1, [sp, #24]
 80175c2:	4313      	orrs	r3, r2
 80175c4:	d1e9      	bne.n	801759a <_svfprintf_r+0xd26>
 80175c6:	e794      	b.n	80174f2 <_svfprintf_r+0xc7e>
 80175c8:	a958      	add	r1, sp, #352	; 0x160
 80175ca:	9109      	str	r1, [sp, #36]	; 0x24
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d190      	bne.n	80174f2 <_svfprintf_r+0xc7e>
 80175d0:	07d3      	lsls	r3, r2, #31
 80175d2:	d58e      	bpl.n	80174f2 <_svfprintf_r+0xc7e>
 80175d4:	23e7      	movs	r3, #231	; 0xe7
 80175d6:	aa1e      	add	r2, sp, #120	; 0x78
 80175d8:	189b      	adds	r3, r3, r2
 80175da:	2230      	movs	r2, #48	; 0x30
 80175dc:	f7ff fbf0 	bl	8016dc0 <_svfprintf_r+0x54c>
 80175e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d100      	bne.n	80175e8 <_svfprintf_r+0xd74>
 80175e6:	e38a      	b.n	8017cfe <_svfprintf_r+0x148a>
 80175e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80175ea:	ab3f      	add	r3, sp, #252	; 0xfc
 80175ec:	701a      	strb	r2, [r3, #0]
 80175ee:	221b      	movs	r2, #27
 80175f0:	2000      	movs	r0, #0
 80175f2:	a91e      	add	r1, sp, #120	; 0x78
 80175f4:	1852      	adds	r2, r2, r1
 80175f6:	7010      	strb	r0, [r2, #0]
 80175f8:	9412      	str	r4, [sp, #72]	; 0x48
 80175fa:	f7ff faca 	bl	8016b92 <_svfprintf_r+0x31e>
 80175fe:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8017600:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017602:	e592      	b.n	801712a <_svfprintf_r+0x8b6>
 8017604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017606:	e42a      	b.n	8016e5e <_svfprintf_r+0x5ea>
 8017608:	2010      	movs	r0, #16
 801760a:	1812      	adds	r2, r2, r0
 801760c:	6078      	str	r0, [r7, #4]
 801760e:	922e      	str	r2, [sp, #184]	; 0xb8
 8017610:	932d      	str	r3, [sp, #180]	; 0xb4
 8017612:	2b07      	cmp	r3, #7
 8017614:	dd08      	ble.n	8017628 <_svfprintf_r+0xdb4>
 8017616:	aa2c      	add	r2, sp, #176	; 0xb0
 8017618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801761a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801761c:	f002 fa7e 	bl	8019b1c <__ssprint_r>
 8017620:	2800      	cmp	r0, #0
 8017622:	d000      	beq.n	8017626 <_svfprintf_r+0xdb2>
 8017624:	e34a      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017626:	a92f      	add	r1, sp, #188	; 0xbc
 8017628:	3c10      	subs	r4, #16
 801762a:	000f      	movs	r7, r1
 801762c:	f7ff fad8 	bl	8016be0 <_svfprintf_r+0x36c>
 8017630:	2010      	movs	r0, #16
 8017632:	1812      	adds	r2, r2, r0
 8017634:	6078      	str	r0, [r7, #4]
 8017636:	922e      	str	r2, [sp, #184]	; 0xb8
 8017638:	932d      	str	r3, [sp, #180]	; 0xb4
 801763a:	2b07      	cmp	r3, #7
 801763c:	dd08      	ble.n	8017650 <_svfprintf_r+0xddc>
 801763e:	aa2c      	add	r2, sp, #176	; 0xb0
 8017640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017642:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017644:	f002 fa6a 	bl	8019b1c <__ssprint_r>
 8017648:	2800      	cmp	r0, #0
 801764a:	d000      	beq.n	801764e <_svfprintf_r+0xdda>
 801764c:	e336      	b.n	8017cbc <_svfprintf_r+0x1448>
 801764e:	a92f      	add	r1, sp, #188	; 0xbc
 8017650:	3c10      	subs	r4, #16
 8017652:	000f      	movs	r7, r1
 8017654:	f7ff fb24 	bl	8016ca0 <_svfprintf_r+0x42c>
 8017658:	fffffbff 	.word	0xfffffbff
 801765c:	00007830 	.word	0x00007830
 8017660:	0801d540 	.word	0x0801d540
 8017664:	2010      	movs	r0, #16
 8017666:	1812      	adds	r2, r2, r0
 8017668:	6078      	str	r0, [r7, #4]
 801766a:	922e      	str	r2, [sp, #184]	; 0xb8
 801766c:	932d      	str	r3, [sp, #180]	; 0xb4
 801766e:	2b07      	cmp	r3, #7
 8017670:	dd08      	ble.n	8017684 <_svfprintf_r+0xe10>
 8017672:	aa2c      	add	r2, sp, #176	; 0xb0
 8017674:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017676:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017678:	f002 fa50 	bl	8019b1c <__ssprint_r>
 801767c:	2800      	cmp	r0, #0
 801767e:	d000      	beq.n	8017682 <_svfprintf_r+0xe0e>
 8017680:	e31c      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017682:	a92f      	add	r1, sp, #188	; 0xbc
 8017684:	3c10      	subs	r4, #16
 8017686:	000f      	movs	r7, r1
 8017688:	f7ff fb2c 	bl	8016ce4 <_svfprintf_r+0x470>
 801768c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801768e:	2b65      	cmp	r3, #101	; 0x65
 8017690:	dc00      	bgt.n	8017694 <_svfprintf_r+0xe20>
 8017692:	e259      	b.n	8017b48 <_svfprintf_r+0x12d4>
 8017694:	2200      	movs	r2, #0
 8017696:	2300      	movs	r3, #0
 8017698:	981a      	ldr	r0, [sp, #104]	; 0x68
 801769a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801769c:	f7e8 fede 	bl	800045c <__aeabi_dcmpeq>
 80176a0:	2800      	cmp	r0, #0
 80176a2:	d07c      	beq.n	801779e <_svfprintf_r+0xf2a>
 80176a4:	4b81      	ldr	r3, [pc, #516]	; (80178ac <_svfprintf_r+0x1038>)
 80176a6:	603b      	str	r3, [r7, #0]
 80176a8:	2301      	movs	r3, #1
 80176aa:	607b      	str	r3, [r7, #4]
 80176ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80176ae:	3708      	adds	r7, #8
 80176b0:	3301      	adds	r3, #1
 80176b2:	932e      	str	r3, [sp, #184]	; 0xb8
 80176b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80176b6:	9308      	str	r3, [sp, #32]
 80176b8:	3301      	adds	r3, #1
 80176ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80176bc:	2b07      	cmp	r3, #7
 80176be:	dd08      	ble.n	80176d2 <_svfprintf_r+0xe5e>
 80176c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80176c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80176c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80176c6:	f002 fa29 	bl	8019b1c <__ssprint_r>
 80176ca:	2800      	cmp	r0, #0
 80176cc:	d000      	beq.n	80176d0 <_svfprintf_r+0xe5c>
 80176ce:	e2f5      	b.n	8017cbc <_svfprintf_r+0x1448>
 80176d0:	af2f      	add	r7, sp, #188	; 0xbc
 80176d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80176d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80176d6:	4293      	cmp	r3, r2
 80176d8:	db01      	blt.n	80176de <_svfprintf_r+0xe6a>
 80176da:	07f3      	lsls	r3, r6, #31
 80176dc:	d51d      	bpl.n	801771a <_svfprintf_r+0xea6>
 80176de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80176e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80176e2:	4694      	mov	ip, r2
 80176e4:	603b      	str	r3, [r7, #0]
 80176e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80176e8:	607b      	str	r3, [r7, #4]
 80176ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80176ec:	3708      	adds	r7, #8
 80176ee:	4463      	add	r3, ip
 80176f0:	932e      	str	r3, [sp, #184]	; 0xb8
 80176f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80176f4:	9308      	str	r3, [sp, #32]
 80176f6:	3301      	adds	r3, #1
 80176f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80176fa:	2b07      	cmp	r3, #7
 80176fc:	dd08      	ble.n	8017710 <_svfprintf_r+0xe9c>
 80176fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8017700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017702:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017704:	f002 fa0a 	bl	8019b1c <__ssprint_r>
 8017708:	2800      	cmp	r0, #0
 801770a:	d000      	beq.n	801770e <_svfprintf_r+0xe9a>
 801770c:	e2d6      	b.n	8017cbc <_svfprintf_r+0x1448>
 801770e:	af2f      	add	r7, sp, #188	; 0xbc
 8017710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017712:	2510      	movs	r5, #16
 8017714:	1e5c      	subs	r4, r3, #1
 8017716:	2c00      	cmp	r4, #0
 8017718:	dc2f      	bgt.n	801777a <_svfprintf_r+0xf06>
 801771a:	0773      	lsls	r3, r6, #29
 801771c:	d500      	bpl.n	8017720 <_svfprintf_r+0xeac>
 801771e:	e2af      	b.n	8017c80 <_svfprintf_r+0x140c>
 8017720:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017722:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017724:	4293      	cmp	r3, r2
 8017726:	da00      	bge.n	801772a <_svfprintf_r+0xeb6>
 8017728:	0013      	movs	r3, r2
 801772a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801772c:	18d3      	adds	r3, r2, r3
 801772e:	9315      	str	r3, [sp, #84]	; 0x54
 8017730:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017732:	9308      	str	r3, [sp, #32]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d007      	beq.n	8017748 <_svfprintf_r+0xed4>
 8017738:	aa2c      	add	r2, sp, #176	; 0xb0
 801773a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801773c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801773e:	f002 f9ed 	bl	8019b1c <__ssprint_r>
 8017742:	2800      	cmp	r0, #0
 8017744:	d000      	beq.n	8017748 <_svfprintf_r+0xed4>
 8017746:	e2b9      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017748:	2300      	movs	r3, #0
 801774a:	932d      	str	r3, [sp, #180]	; 0xb4
 801774c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801774e:	2b00      	cmp	r3, #0
 8017750:	d000      	beq.n	8017754 <_svfprintf_r+0xee0>
 8017752:	e2cf      	b.n	8017cf4 <_svfprintf_r+0x1480>
 8017754:	af2f      	add	r7, sp, #188	; 0xbc
 8017756:	e5d6      	b.n	8017306 <_svfprintf_r+0xa92>
 8017758:	3210      	adds	r2, #16
 801775a:	607d      	str	r5, [r7, #4]
 801775c:	922e      	str	r2, [sp, #184]	; 0xb8
 801775e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017760:	2b07      	cmp	r3, #7
 8017762:	dd08      	ble.n	8017776 <_svfprintf_r+0xf02>
 8017764:	aa2c      	add	r2, sp, #176	; 0xb0
 8017766:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017768:	980a      	ldr	r0, [sp, #40]	; 0x28
 801776a:	f002 f9d7 	bl	8019b1c <__ssprint_r>
 801776e:	2800      	cmp	r0, #0
 8017770:	d000      	beq.n	8017774 <_svfprintf_r+0xf00>
 8017772:	e2a3      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017774:	a92f      	add	r1, sp, #188	; 0xbc
 8017776:	000f      	movs	r7, r1
 8017778:	3c10      	subs	r4, #16
 801777a:	0039      	movs	r1, r7
 801777c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801777e:	484c      	ldr	r0, [pc, #304]	; (80178b0 <_svfprintf_r+0x103c>)
 8017780:	9308      	str	r3, [sp, #32]
 8017782:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017784:	3301      	adds	r3, #1
 8017786:	3108      	adds	r1, #8
 8017788:	6038      	str	r0, [r7, #0]
 801778a:	2c10      	cmp	r4, #16
 801778c:	dce4      	bgt.n	8017758 <_svfprintf_r+0xee4>
 801778e:	607c      	str	r4, [r7, #4]
 8017790:	18a4      	adds	r4, r4, r2
 8017792:	942e      	str	r4, [sp, #184]	; 0xb8
 8017794:	932d      	str	r3, [sp, #180]	; 0xb4
 8017796:	000f      	movs	r7, r1
 8017798:	2b07      	cmp	r3, #7
 801779a:	ddbe      	ble.n	801771a <_svfprintf_r+0xea6>
 801779c:	e06a      	b.n	8017874 <_svfprintf_r+0x1000>
 801779e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	dd00      	ble.n	80177a6 <_svfprintf_r+0xf32>
 80177a4:	e086      	b.n	80178b4 <_svfprintf_r+0x1040>
 80177a6:	4b41      	ldr	r3, [pc, #260]	; (80178ac <_svfprintf_r+0x1038>)
 80177a8:	603b      	str	r3, [r7, #0]
 80177aa:	2301      	movs	r3, #1
 80177ac:	607b      	str	r3, [r7, #4]
 80177ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80177b0:	3708      	adds	r7, #8
 80177b2:	3301      	adds	r3, #1
 80177b4:	932e      	str	r3, [sp, #184]	; 0xb8
 80177b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80177b8:	9308      	str	r3, [sp, #32]
 80177ba:	3301      	adds	r3, #1
 80177bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80177be:	2b07      	cmp	r3, #7
 80177c0:	dd08      	ble.n	80177d4 <_svfprintf_r+0xf60>
 80177c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80177c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80177c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80177c8:	f002 f9a8 	bl	8019b1c <__ssprint_r>
 80177cc:	2800      	cmp	r0, #0
 80177ce:	d000      	beq.n	80177d2 <_svfprintf_r+0xf5e>
 80177d0:	e274      	b.n	8017cbc <_svfprintf_r+0x1448>
 80177d2:	af2f      	add	r7, sp, #188	; 0xbc
 80177d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d104      	bne.n	80177e4 <_svfprintf_r+0xf70>
 80177da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d101      	bne.n	80177e4 <_svfprintf_r+0xf70>
 80177e0:	07f3      	lsls	r3, r6, #31
 80177e2:	d59a      	bpl.n	801771a <_svfprintf_r+0xea6>
 80177e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80177e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80177e8:	4694      	mov	ip, r2
 80177ea:	603b      	str	r3, [r7, #0]
 80177ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80177ee:	607b      	str	r3, [r7, #4]
 80177f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80177f2:	3708      	adds	r7, #8
 80177f4:	4463      	add	r3, ip
 80177f6:	932e      	str	r3, [sp, #184]	; 0xb8
 80177f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80177fa:	9308      	str	r3, [sp, #32]
 80177fc:	3301      	adds	r3, #1
 80177fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8017800:	2b07      	cmp	r3, #7
 8017802:	dd08      	ble.n	8017816 <_svfprintf_r+0xfa2>
 8017804:	aa2c      	add	r2, sp, #176	; 0xb0
 8017806:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017808:	980a      	ldr	r0, [sp, #40]	; 0x28
 801780a:	f002 f987 	bl	8019b1c <__ssprint_r>
 801780e:	2800      	cmp	r0, #0
 8017810:	d000      	beq.n	8017814 <_svfprintf_r+0xfa0>
 8017812:	e253      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017814:	af2f      	add	r7, sp, #188	; 0xbc
 8017816:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8017818:	2c00      	cmp	r4, #0
 801781a:	da1a      	bge.n	8017852 <_svfprintf_r+0xfde>
 801781c:	0039      	movs	r1, r7
 801781e:	2510      	movs	r5, #16
 8017820:	4264      	negs	r4, r4
 8017822:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017824:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8017826:	9308      	str	r3, [sp, #32]
 8017828:	1c5a      	adds	r2, r3, #1
 801782a:	4b21      	ldr	r3, [pc, #132]	; (80178b0 <_svfprintf_r+0x103c>)
 801782c:	3708      	adds	r7, #8
 801782e:	600b      	str	r3, [r1, #0]
 8017830:	2c10      	cmp	r4, #16
 8017832:	dc29      	bgt.n	8017888 <_svfprintf_r+0x1014>
 8017834:	604c      	str	r4, [r1, #4]
 8017836:	1824      	adds	r4, r4, r0
 8017838:	942e      	str	r4, [sp, #184]	; 0xb8
 801783a:	922d      	str	r2, [sp, #180]	; 0xb4
 801783c:	2a07      	cmp	r2, #7
 801783e:	dd08      	ble.n	8017852 <_svfprintf_r+0xfde>
 8017840:	aa2c      	add	r2, sp, #176	; 0xb0
 8017842:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017844:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017846:	f002 f969 	bl	8019b1c <__ssprint_r>
 801784a:	2800      	cmp	r0, #0
 801784c:	d000      	beq.n	8017850 <_svfprintf_r+0xfdc>
 801784e:	e235      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017850:	af2f      	add	r7, sp, #188	; 0xbc
 8017852:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017856:	468c      	mov	ip, r1
 8017858:	603b      	str	r3, [r7, #0]
 801785a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801785c:	607b      	str	r3, [r7, #4]
 801785e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017860:	4463      	add	r3, ip
 8017862:	932e      	str	r3, [sp, #184]	; 0xb8
 8017864:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017866:	1c5a      	adds	r2, r3, #1
 8017868:	9308      	str	r3, [sp, #32]
 801786a:	922d      	str	r2, [sp, #180]	; 0xb4
 801786c:	2a07      	cmp	r2, #7
 801786e:	dc01      	bgt.n	8017874 <_svfprintf_r+0x1000>
 8017870:	f7ff fa6c 	bl	8016d4c <_svfprintf_r+0x4d8>
 8017874:	aa2c      	add	r2, sp, #176	; 0xb0
 8017876:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017878:	980a      	ldr	r0, [sp, #40]	; 0x28
 801787a:	f002 f94f 	bl	8019b1c <__ssprint_r>
 801787e:	2800      	cmp	r0, #0
 8017880:	d000      	beq.n	8017884 <_svfprintf_r+0x1010>
 8017882:	e21b      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017884:	af2f      	add	r7, sp, #188	; 0xbc
 8017886:	e748      	b.n	801771a <_svfprintf_r+0xea6>
 8017888:	3010      	adds	r0, #16
 801788a:	604d      	str	r5, [r1, #4]
 801788c:	902e      	str	r0, [sp, #184]	; 0xb8
 801788e:	922d      	str	r2, [sp, #180]	; 0xb4
 8017890:	2a07      	cmp	r2, #7
 8017892:	dd08      	ble.n	80178a6 <_svfprintf_r+0x1032>
 8017894:	aa2c      	add	r2, sp, #176	; 0xb0
 8017896:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017898:	980a      	ldr	r0, [sp, #40]	; 0x28
 801789a:	f002 f93f 	bl	8019b1c <__ssprint_r>
 801789e:	2800      	cmp	r0, #0
 80178a0:	d000      	beq.n	80178a4 <_svfprintf_r+0x1030>
 80178a2:	e20b      	b.n	8017cbc <_svfprintf_r+0x1448>
 80178a4:	af2f      	add	r7, sp, #188	; 0xbc
 80178a6:	3c10      	subs	r4, #16
 80178a8:	0039      	movs	r1, r7
 80178aa:	e7ba      	b.n	8017822 <_svfprintf_r+0xfae>
 80178ac:	0801d562 	.word	0x0801d562
 80178b0:	0801d574 	.word	0x0801d574
 80178b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178b6:	002c      	movs	r4, r5
 80178b8:	429d      	cmp	r5, r3
 80178ba:	dd00      	ble.n	80178be <_svfprintf_r+0x104a>
 80178bc:	001c      	movs	r4, r3
 80178be:	2c00      	cmp	r4, #0
 80178c0:	dd15      	ble.n	80178ee <_svfprintf_r+0x107a>
 80178c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178c4:	607c      	str	r4, [r7, #4]
 80178c6:	603b      	str	r3, [r7, #0]
 80178c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80178ca:	3708      	adds	r7, #8
 80178cc:	18e3      	adds	r3, r4, r3
 80178ce:	932e      	str	r3, [sp, #184]	; 0xb8
 80178d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80178d2:	9308      	str	r3, [sp, #32]
 80178d4:	3301      	adds	r3, #1
 80178d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80178d8:	2b07      	cmp	r3, #7
 80178da:	dd08      	ble.n	80178ee <_svfprintf_r+0x107a>
 80178dc:	aa2c      	add	r2, sp, #176	; 0xb0
 80178de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80178e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80178e2:	f002 f91b 	bl	8019b1c <__ssprint_r>
 80178e6:	2800      	cmp	r0, #0
 80178e8:	d000      	beq.n	80178ec <_svfprintf_r+0x1078>
 80178ea:	e1e7      	b.n	8017cbc <_svfprintf_r+0x1448>
 80178ec:	af2f      	add	r7, sp, #188	; 0xbc
 80178ee:	43e3      	mvns	r3, r4
 80178f0:	17db      	asrs	r3, r3, #31
 80178f2:	401c      	ands	r4, r3
 80178f4:	1b2c      	subs	r4, r5, r4
 80178f6:	2c00      	cmp	r4, #0
 80178f8:	dd1a      	ble.n	8017930 <_svfprintf_r+0x10bc>
 80178fa:	0039      	movs	r1, r7
 80178fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80178fe:	48d4      	ldr	r0, [pc, #848]	; (8017c50 <_svfprintf_r+0x13dc>)
 8017900:	9308      	str	r3, [sp, #32]
 8017902:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017904:	3301      	adds	r3, #1
 8017906:	3108      	adds	r1, #8
 8017908:	6038      	str	r0, [r7, #0]
 801790a:	2c10      	cmp	r4, #16
 801790c:	dd00      	ble.n	8017910 <_svfprintf_r+0x109c>
 801790e:	e089      	b.n	8017a24 <_svfprintf_r+0x11b0>
 8017910:	607c      	str	r4, [r7, #4]
 8017912:	18a4      	adds	r4, r4, r2
 8017914:	942e      	str	r4, [sp, #184]	; 0xb8
 8017916:	932d      	str	r3, [sp, #180]	; 0xb4
 8017918:	000f      	movs	r7, r1
 801791a:	2b07      	cmp	r3, #7
 801791c:	dd08      	ble.n	8017930 <_svfprintf_r+0x10bc>
 801791e:	aa2c      	add	r2, sp, #176	; 0xb0
 8017920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017922:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017924:	f002 f8fa 	bl	8019b1c <__ssprint_r>
 8017928:	2800      	cmp	r0, #0
 801792a:	d000      	beq.n	801792e <_svfprintf_r+0x10ba>
 801792c:	e1c6      	b.n	8017cbc <_svfprintf_r+0x1448>
 801792e:	af2f      	add	r7, sp, #188	; 0xbc
 8017930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017932:	195d      	adds	r5, r3, r5
 8017934:	0573      	lsls	r3, r6, #21
 8017936:	d50d      	bpl.n	8017954 <_svfprintf_r+0x10e0>
 8017938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801793a:	2b00      	cmp	r3, #0
 801793c:	d000      	beq.n	8017940 <_svfprintf_r+0x10cc>
 801793e:	e084      	b.n	8017a4a <_svfprintf_r+0x11d6>
 8017940:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017942:	2b00      	cmp	r3, #0
 8017944:	d000      	beq.n	8017948 <_svfprintf_r+0x10d4>
 8017946:	e083      	b.n	8017a50 <_svfprintf_r+0x11dc>
 8017948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801794a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801794c:	189b      	adds	r3, r3, r2
 801794e:	429d      	cmp	r5, r3
 8017950:	d900      	bls.n	8017954 <_svfprintf_r+0x10e0>
 8017952:	001d      	movs	r5, r3
 8017954:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017958:	4293      	cmp	r3, r2
 801795a:	db01      	blt.n	8017960 <_svfprintf_r+0x10ec>
 801795c:	07f3      	lsls	r3, r6, #31
 801795e:	d518      	bpl.n	8017992 <_svfprintf_r+0x111e>
 8017960:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017962:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017964:	4694      	mov	ip, r2
 8017966:	603b      	str	r3, [r7, #0]
 8017968:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801796a:	607b      	str	r3, [r7, #4]
 801796c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801796e:	3708      	adds	r7, #8
 8017970:	4463      	add	r3, ip
 8017972:	932e      	str	r3, [sp, #184]	; 0xb8
 8017974:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017976:	9308      	str	r3, [sp, #32]
 8017978:	3301      	adds	r3, #1
 801797a:	932d      	str	r3, [sp, #180]	; 0xb4
 801797c:	2b07      	cmp	r3, #7
 801797e:	dd08      	ble.n	8017992 <_svfprintf_r+0x111e>
 8017980:	aa2c      	add	r2, sp, #176	; 0xb0
 8017982:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017984:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017986:	f002 f8c9 	bl	8019b1c <__ssprint_r>
 801798a:	2800      	cmp	r0, #0
 801798c:	d000      	beq.n	8017990 <_svfprintf_r+0x111c>
 801798e:	e195      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017990:	af2f      	add	r7, sp, #188	; 0xbc
 8017992:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017996:	4694      	mov	ip, r2
 8017998:	9926      	ldr	r1, [sp, #152]	; 0x98
 801799a:	4463      	add	r3, ip
 801799c:	1b5b      	subs	r3, r3, r5
 801799e:	1a54      	subs	r4, r2, r1
 80179a0:	429c      	cmp	r4, r3
 80179a2:	dd00      	ble.n	80179a6 <_svfprintf_r+0x1132>
 80179a4:	001c      	movs	r4, r3
 80179a6:	2c00      	cmp	r4, #0
 80179a8:	dd14      	ble.n	80179d4 <_svfprintf_r+0x1160>
 80179aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80179ac:	603d      	str	r5, [r7, #0]
 80179ae:	18e3      	adds	r3, r4, r3
 80179b0:	932e      	str	r3, [sp, #184]	; 0xb8
 80179b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80179b4:	607c      	str	r4, [r7, #4]
 80179b6:	9308      	str	r3, [sp, #32]
 80179b8:	3301      	adds	r3, #1
 80179ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80179bc:	3708      	adds	r7, #8
 80179be:	2b07      	cmp	r3, #7
 80179c0:	dd08      	ble.n	80179d4 <_svfprintf_r+0x1160>
 80179c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80179c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80179c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80179c8:	f002 f8a8 	bl	8019b1c <__ssprint_r>
 80179cc:	2800      	cmp	r0, #0
 80179ce:	d000      	beq.n	80179d2 <_svfprintf_r+0x115e>
 80179d0:	e174      	b.n	8017cbc <_svfprintf_r+0x1448>
 80179d2:	af2f      	add	r7, sp, #188	; 0xbc
 80179d4:	43e3      	mvns	r3, r4
 80179d6:	17db      	asrs	r3, r3, #31
 80179d8:	401c      	ands	r4, r3
 80179da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80179dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179de:	2510      	movs	r5, #16
 80179e0:	1a9b      	subs	r3, r3, r2
 80179e2:	1b1c      	subs	r4, r3, r4
 80179e4:	2c00      	cmp	r4, #0
 80179e6:	dc00      	bgt.n	80179ea <_svfprintf_r+0x1176>
 80179e8:	e697      	b.n	801771a <_svfprintf_r+0xea6>
 80179ea:	0039      	movs	r1, r7
 80179ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80179ee:	4898      	ldr	r0, [pc, #608]	; (8017c50 <_svfprintf_r+0x13dc>)
 80179f0:	9308      	str	r3, [sp, #32]
 80179f2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80179f4:	3301      	adds	r3, #1
 80179f6:	3108      	adds	r1, #8
 80179f8:	6038      	str	r0, [r7, #0]
 80179fa:	2c10      	cmp	r4, #16
 80179fc:	dc00      	bgt.n	8017a00 <_svfprintf_r+0x118c>
 80179fe:	e6c6      	b.n	801778e <_svfprintf_r+0xf1a>
 8017a00:	3210      	adds	r2, #16
 8017a02:	607d      	str	r5, [r7, #4]
 8017a04:	922e      	str	r2, [sp, #184]	; 0xb8
 8017a06:	932d      	str	r3, [sp, #180]	; 0xb4
 8017a08:	2b07      	cmp	r3, #7
 8017a0a:	dd08      	ble.n	8017a1e <_svfprintf_r+0x11aa>
 8017a0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8017a0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017a10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017a12:	f002 f883 	bl	8019b1c <__ssprint_r>
 8017a16:	2800      	cmp	r0, #0
 8017a18:	d000      	beq.n	8017a1c <_svfprintf_r+0x11a8>
 8017a1a:	e14f      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017a1c:	a92f      	add	r1, sp, #188	; 0xbc
 8017a1e:	3c10      	subs	r4, #16
 8017a20:	000f      	movs	r7, r1
 8017a22:	e7e2      	b.n	80179ea <_svfprintf_r+0x1176>
 8017a24:	2010      	movs	r0, #16
 8017a26:	1812      	adds	r2, r2, r0
 8017a28:	6078      	str	r0, [r7, #4]
 8017a2a:	922e      	str	r2, [sp, #184]	; 0xb8
 8017a2c:	932d      	str	r3, [sp, #180]	; 0xb4
 8017a2e:	2b07      	cmp	r3, #7
 8017a30:	dd08      	ble.n	8017a44 <_svfprintf_r+0x11d0>
 8017a32:	aa2c      	add	r2, sp, #176	; 0xb0
 8017a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017a36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017a38:	f002 f870 	bl	8019b1c <__ssprint_r>
 8017a3c:	2800      	cmp	r0, #0
 8017a3e:	d000      	beq.n	8017a42 <_svfprintf_r+0x11ce>
 8017a40:	e13c      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017a42:	a92f      	add	r1, sp, #188	; 0xbc
 8017a44:	3c10      	subs	r4, #16
 8017a46:	000f      	movs	r7, r1
 8017a48:	e757      	b.n	80178fa <_svfprintf_r+0x1086>
 8017a4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d061      	beq.n	8017b14 <_svfprintf_r+0x12a0>
 8017a50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a52:	3b01      	subs	r3, #1
 8017a54:	9310      	str	r3, [sp, #64]	; 0x40
 8017a56:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017a58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017a5a:	4694      	mov	ip, r2
 8017a5c:	603b      	str	r3, [r7, #0]
 8017a5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017a60:	607b      	str	r3, [r7, #4]
 8017a62:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017a64:	3708      	adds	r7, #8
 8017a66:	4463      	add	r3, ip
 8017a68:	932e      	str	r3, [sp, #184]	; 0xb8
 8017a6a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017a6c:	9308      	str	r3, [sp, #32]
 8017a6e:	3301      	adds	r3, #1
 8017a70:	932d      	str	r3, [sp, #180]	; 0xb4
 8017a72:	2b07      	cmp	r3, #7
 8017a74:	dd08      	ble.n	8017a88 <_svfprintf_r+0x1214>
 8017a76:	aa2c      	add	r2, sp, #176	; 0xb0
 8017a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017a7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017a7c:	f002 f84e 	bl	8019b1c <__ssprint_r>
 8017a80:	2800      	cmp	r0, #0
 8017a82:	d000      	beq.n	8017a86 <_svfprintf_r+0x1212>
 8017a84:	e11a      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017a86:	af2f      	add	r7, sp, #188	; 0xbc
 8017a88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a8c:	189b      	adds	r3, r3, r2
 8017a8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017a90:	1b5b      	subs	r3, r3, r5
 8017a92:	7814      	ldrb	r4, [r2, #0]
 8017a94:	429c      	cmp	r4, r3
 8017a96:	dd00      	ble.n	8017a9a <_svfprintf_r+0x1226>
 8017a98:	001c      	movs	r4, r3
 8017a9a:	2c00      	cmp	r4, #0
 8017a9c:	dd14      	ble.n	8017ac8 <_svfprintf_r+0x1254>
 8017a9e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017aa0:	603d      	str	r5, [r7, #0]
 8017aa2:	18e3      	adds	r3, r4, r3
 8017aa4:	932e      	str	r3, [sp, #184]	; 0xb8
 8017aa6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017aa8:	607c      	str	r4, [r7, #4]
 8017aaa:	9308      	str	r3, [sp, #32]
 8017aac:	3301      	adds	r3, #1
 8017aae:	932d      	str	r3, [sp, #180]	; 0xb4
 8017ab0:	3708      	adds	r7, #8
 8017ab2:	2b07      	cmp	r3, #7
 8017ab4:	dd08      	ble.n	8017ac8 <_svfprintf_r+0x1254>
 8017ab6:	aa2c      	add	r2, sp, #176	; 0xb0
 8017ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017aba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017abc:	f002 f82e 	bl	8019b1c <__ssprint_r>
 8017ac0:	2800      	cmp	r0, #0
 8017ac2:	d000      	beq.n	8017ac6 <_svfprintf_r+0x1252>
 8017ac4:	e0fa      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017ac6:	af2f      	add	r7, sp, #188	; 0xbc
 8017ac8:	43e3      	mvns	r3, r4
 8017aca:	17db      	asrs	r3, r3, #31
 8017acc:	401c      	ands	r4, r3
 8017ace:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017ad0:	781b      	ldrb	r3, [r3, #0]
 8017ad2:	1b1c      	subs	r4, r3, r4
 8017ad4:	2c00      	cmp	r4, #0
 8017ad6:	dd19      	ble.n	8017b0c <_svfprintf_r+0x1298>
 8017ad8:	0039      	movs	r1, r7
 8017ada:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017adc:	485c      	ldr	r0, [pc, #368]	; (8017c50 <_svfprintf_r+0x13dc>)
 8017ade:	9308      	str	r3, [sp, #32]
 8017ae0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017ae2:	3301      	adds	r3, #1
 8017ae4:	3108      	adds	r1, #8
 8017ae6:	6038      	str	r0, [r7, #0]
 8017ae8:	2c10      	cmp	r4, #16
 8017aea:	dc1a      	bgt.n	8017b22 <_svfprintf_r+0x12ae>
 8017aec:	607c      	str	r4, [r7, #4]
 8017aee:	18a4      	adds	r4, r4, r2
 8017af0:	942e      	str	r4, [sp, #184]	; 0xb8
 8017af2:	932d      	str	r3, [sp, #180]	; 0xb4
 8017af4:	000f      	movs	r7, r1
 8017af6:	2b07      	cmp	r3, #7
 8017af8:	dd08      	ble.n	8017b0c <_svfprintf_r+0x1298>
 8017afa:	aa2c      	add	r2, sp, #176	; 0xb0
 8017afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017afe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017b00:	f002 f80c 	bl	8019b1c <__ssprint_r>
 8017b04:	2800      	cmp	r0, #0
 8017b06:	d000      	beq.n	8017b0a <_svfprintf_r+0x1296>
 8017b08:	e0d8      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017b0a:	af2f      	add	r7, sp, #188	; 0xbc
 8017b0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017b0e:	781b      	ldrb	r3, [r3, #0]
 8017b10:	18ed      	adds	r5, r5, r3
 8017b12:	e711      	b.n	8017938 <_svfprintf_r+0x10c4>
 8017b14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017b16:	3b01      	subs	r3, #1
 8017b18:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b1c:	3b01      	subs	r3, #1
 8017b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b20:	e799      	b.n	8017a56 <_svfprintf_r+0x11e2>
 8017b22:	2010      	movs	r0, #16
 8017b24:	1812      	adds	r2, r2, r0
 8017b26:	6078      	str	r0, [r7, #4]
 8017b28:	922e      	str	r2, [sp, #184]	; 0xb8
 8017b2a:	932d      	str	r3, [sp, #180]	; 0xb4
 8017b2c:	2b07      	cmp	r3, #7
 8017b2e:	dd08      	ble.n	8017b42 <_svfprintf_r+0x12ce>
 8017b30:	aa2c      	add	r2, sp, #176	; 0xb0
 8017b32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017b34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017b36:	f001 fff1 	bl	8019b1c <__ssprint_r>
 8017b3a:	2800      	cmp	r0, #0
 8017b3c:	d000      	beq.n	8017b40 <_svfprintf_r+0x12cc>
 8017b3e:	e0bd      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017b40:	a92f      	add	r1, sp, #188	; 0xbc
 8017b42:	3c10      	subs	r4, #16
 8017b44:	000f      	movs	r7, r1
 8017b46:	e7c7      	b.n	8017ad8 <_svfprintf_r+0x1264>
 8017b48:	003c      	movs	r4, r7
 8017b4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017b4c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8017b4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017b50:	9308      	str	r3, [sp, #32]
 8017b52:	3101      	adds	r1, #1
 8017b54:	3301      	adds	r3, #1
 8017b56:	3408      	adds	r4, #8
 8017b58:	2a01      	cmp	r2, #1
 8017b5a:	dc03      	bgt.n	8017b64 <_svfprintf_r+0x12f0>
 8017b5c:	2201      	movs	r2, #1
 8017b5e:	4216      	tst	r6, r2
 8017b60:	d100      	bne.n	8017b64 <_svfprintf_r+0x12f0>
 8017b62:	e088      	b.n	8017c76 <_svfprintf_r+0x1402>
 8017b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b66:	912e      	str	r1, [sp, #184]	; 0xb8
 8017b68:	603a      	str	r2, [r7, #0]
 8017b6a:	2201      	movs	r2, #1
 8017b6c:	932d      	str	r3, [sp, #180]	; 0xb4
 8017b6e:	607a      	str	r2, [r7, #4]
 8017b70:	2b07      	cmp	r3, #7
 8017b72:	dd08      	ble.n	8017b86 <_svfprintf_r+0x1312>
 8017b74:	aa2c      	add	r2, sp, #176	; 0xb0
 8017b76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017b78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017b7a:	f001 ffcf 	bl	8019b1c <__ssprint_r>
 8017b7e:	2800      	cmp	r0, #0
 8017b80:	d000      	beq.n	8017b84 <_svfprintf_r+0x1310>
 8017b82:	e09b      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017b84:	ac2f      	add	r4, sp, #188	; 0xbc
 8017b86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017b88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017b8a:	4694      	mov	ip, r2
 8017b8c:	6023      	str	r3, [r4, #0]
 8017b8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017b90:	6063      	str	r3, [r4, #4]
 8017b92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017b94:	3408      	adds	r4, #8
 8017b96:	4463      	add	r3, ip
 8017b98:	932e      	str	r3, [sp, #184]	; 0xb8
 8017b9a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017b9c:	9308      	str	r3, [sp, #32]
 8017b9e:	3301      	adds	r3, #1
 8017ba0:	932d      	str	r3, [sp, #180]	; 0xb4
 8017ba2:	2b07      	cmp	r3, #7
 8017ba4:	dd08      	ble.n	8017bb8 <_svfprintf_r+0x1344>
 8017ba6:	aa2c      	add	r2, sp, #176	; 0xb0
 8017ba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017baa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017bac:	f001 ffb6 	bl	8019b1c <__ssprint_r>
 8017bb0:	2800      	cmp	r0, #0
 8017bb2:	d000      	beq.n	8017bb6 <_svfprintf_r+0x1342>
 8017bb4:	e082      	b.n	8017cbc <_svfprintf_r+0x1448>
 8017bb6:	ac2f      	add	r4, sp, #188	; 0xbc
 8017bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bba:	2200      	movs	r2, #0
 8017bbc:	1e5d      	subs	r5, r3, #1
 8017bbe:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	9919      	ldr	r1, [sp, #100]	; 0x64
 8017bc4:	f7e8 fc4a 	bl	800045c <__aeabi_dcmpeq>
 8017bc8:	2800      	cmp	r0, #0
 8017bca:	d12c      	bne.n	8017c26 <_svfprintf_r+0x13b2>
 8017bcc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017bce:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017bd0:	9308      	str	r3, [sp, #32]
 8017bd2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017bd4:	6065      	str	r5, [r4, #4]
 8017bd6:	1c5a      	adds	r2, r3, #1
 8017bd8:	930e      	str	r3, [sp, #56]	; 0x38
 8017bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bdc:	922d      	str	r2, [sp, #180]	; 0xb4
 8017bde:	3301      	adds	r3, #1
 8017be0:	6023      	str	r3, [r4, #0]
 8017be2:	9b08      	ldr	r3, [sp, #32]
 8017be4:	3408      	adds	r4, #8
 8017be6:	3b01      	subs	r3, #1
 8017be8:	185b      	adds	r3, r3, r1
 8017bea:	932e      	str	r3, [sp, #184]	; 0xb8
 8017bec:	2a07      	cmp	r2, #7
 8017bee:	dd07      	ble.n	8017c00 <_svfprintf_r+0x138c>
 8017bf0:	aa2c      	add	r2, sp, #176	; 0xb0
 8017bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017bf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017bf6:	f001 ff91 	bl	8019b1c <__ssprint_r>
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	d15e      	bne.n	8017cbc <_svfprintf_r+0x1448>
 8017bfe:	ac2f      	add	r4, sp, #188	; 0xbc
 8017c00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017c02:	ab28      	add	r3, sp, #160	; 0xa0
 8017c04:	4694      	mov	ip, r2
 8017c06:	6023      	str	r3, [r4, #0]
 8017c08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c0a:	6063      	str	r3, [r4, #4]
 8017c0c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017c0e:	4463      	add	r3, ip
 8017c10:	932e      	str	r3, [sp, #184]	; 0xb8
 8017c12:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017c14:	9308      	str	r3, [sp, #32]
 8017c16:	3301      	adds	r3, #1
 8017c18:	932d      	str	r3, [sp, #180]	; 0xb4
 8017c1a:	2b07      	cmp	r3, #7
 8017c1c:	dd00      	ble.n	8017c20 <_svfprintf_r+0x13ac>
 8017c1e:	e629      	b.n	8017874 <_svfprintf_r+0x1000>
 8017c20:	3408      	adds	r4, #8
 8017c22:	0027      	movs	r7, r4
 8017c24:	e579      	b.n	801771a <_svfprintf_r+0xea6>
 8017c26:	2710      	movs	r7, #16
 8017c28:	2d00      	cmp	r5, #0
 8017c2a:	dde9      	ble.n	8017c00 <_svfprintf_r+0x138c>
 8017c2c:	0021      	movs	r1, r4
 8017c2e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017c30:	4807      	ldr	r0, [pc, #28]	; (8017c50 <_svfprintf_r+0x13dc>)
 8017c32:	9308      	str	r3, [sp, #32]
 8017c34:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017c36:	3301      	adds	r3, #1
 8017c38:	3108      	adds	r1, #8
 8017c3a:	6020      	str	r0, [r4, #0]
 8017c3c:	2d10      	cmp	r5, #16
 8017c3e:	dc09      	bgt.n	8017c54 <_svfprintf_r+0x13e0>
 8017c40:	6065      	str	r5, [r4, #4]
 8017c42:	000c      	movs	r4, r1
 8017c44:	18ad      	adds	r5, r5, r2
 8017c46:	952e      	str	r5, [sp, #184]	; 0xb8
 8017c48:	932d      	str	r3, [sp, #180]	; 0xb4
 8017c4a:	2b07      	cmp	r3, #7
 8017c4c:	ddd8      	ble.n	8017c00 <_svfprintf_r+0x138c>
 8017c4e:	e7cf      	b.n	8017bf0 <_svfprintf_r+0x137c>
 8017c50:	0801d574 	.word	0x0801d574
 8017c54:	3210      	adds	r2, #16
 8017c56:	6067      	str	r7, [r4, #4]
 8017c58:	922e      	str	r2, [sp, #184]	; 0xb8
 8017c5a:	932d      	str	r3, [sp, #180]	; 0xb4
 8017c5c:	2b07      	cmp	r3, #7
 8017c5e:	dd07      	ble.n	8017c70 <_svfprintf_r+0x13fc>
 8017c60:	aa2c      	add	r2, sp, #176	; 0xb0
 8017c62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017c64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017c66:	f001 ff59 	bl	8019b1c <__ssprint_r>
 8017c6a:	2800      	cmp	r0, #0
 8017c6c:	d126      	bne.n	8017cbc <_svfprintf_r+0x1448>
 8017c6e:	a92f      	add	r1, sp, #188	; 0xbc
 8017c70:	3d10      	subs	r5, #16
 8017c72:	000c      	movs	r4, r1
 8017c74:	e7da      	b.n	8017c2c <_svfprintf_r+0x13b8>
 8017c76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c78:	912e      	str	r1, [sp, #184]	; 0xb8
 8017c7a:	c705      	stmia	r7!, {r0, r2}
 8017c7c:	932d      	str	r3, [sp, #180]	; 0xb4
 8017c7e:	e7e4      	b.n	8017c4a <_svfprintf_r+0x13d6>
 8017c80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017c82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017c84:	2510      	movs	r5, #16
 8017c86:	1a9c      	subs	r4, r3, r2
 8017c88:	2c00      	cmp	r4, #0
 8017c8a:	dc00      	bgt.n	8017c8e <_svfprintf_r+0x141a>
 8017c8c:	e548      	b.n	8017720 <_svfprintf_r+0xeac>
 8017c8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017c90:	4921      	ldr	r1, [pc, #132]	; (8017d18 <_svfprintf_r+0x14a4>)
 8017c92:	9308      	str	r3, [sp, #32]
 8017c94:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017c96:	3301      	adds	r3, #1
 8017c98:	6039      	str	r1, [r7, #0]
 8017c9a:	2c10      	cmp	r4, #16
 8017c9c:	dc19      	bgt.n	8017cd2 <_svfprintf_r+0x145e>
 8017c9e:	607c      	str	r4, [r7, #4]
 8017ca0:	18a4      	adds	r4, r4, r2
 8017ca2:	942e      	str	r4, [sp, #184]	; 0xb8
 8017ca4:	932d      	str	r3, [sp, #180]	; 0xb4
 8017ca6:	2b07      	cmp	r3, #7
 8017ca8:	dc00      	bgt.n	8017cac <_svfprintf_r+0x1438>
 8017caa:	e539      	b.n	8017720 <_svfprintf_r+0xeac>
 8017cac:	aa2c      	add	r2, sp, #176	; 0xb0
 8017cae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017cb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017cb2:	f001 ff33 	bl	8019b1c <__ssprint_r>
 8017cb6:	2800      	cmp	r0, #0
 8017cb8:	d100      	bne.n	8017cbc <_svfprintf_r+0x1448>
 8017cba:	e531      	b.n	8017720 <_svfprintf_r+0xeac>
 8017cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d101      	bne.n	8017cc6 <_svfprintf_r+0x1452>
 8017cc2:	f7ff f908 	bl	8016ed6 <_svfprintf_r+0x662>
 8017cc6:	0019      	movs	r1, r3
 8017cc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017cca:	f000 ff19 	bl	8018b00 <_free_r>
 8017cce:	f7ff f902 	bl	8016ed6 <_svfprintf_r+0x662>
 8017cd2:	3210      	adds	r2, #16
 8017cd4:	607d      	str	r5, [r7, #4]
 8017cd6:	922e      	str	r2, [sp, #184]	; 0xb8
 8017cd8:	932d      	str	r3, [sp, #180]	; 0xb4
 8017cda:	3708      	adds	r7, #8
 8017cdc:	2b07      	cmp	r3, #7
 8017cde:	dd07      	ble.n	8017cf0 <_svfprintf_r+0x147c>
 8017ce0:	aa2c      	add	r2, sp, #176	; 0xb0
 8017ce2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ce4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017ce6:	f001 ff19 	bl	8019b1c <__ssprint_r>
 8017cea:	2800      	cmp	r0, #0
 8017cec:	d1e6      	bne.n	8017cbc <_svfprintf_r+0x1448>
 8017cee:	af2f      	add	r7, sp, #188	; 0xbc
 8017cf0:	3c10      	subs	r4, #16
 8017cf2:	e7cc      	b.n	8017c8e <_svfprintf_r+0x141a>
 8017cf4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017cf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017cf8:	f000 ff02 	bl	8018b00 <_free_r>
 8017cfc:	e52a      	b.n	8017754 <_svfprintf_r+0xee0>
 8017cfe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017d00:	9306      	str	r3, [sp, #24]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d101      	bne.n	8017d0a <_svfprintf_r+0x1496>
 8017d06:	f7ff f8e6 	bl	8016ed6 <_svfprintf_r+0x662>
 8017d0a:	aa2c      	add	r2, sp, #176	; 0xb0
 8017d0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017d0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017d10:	f001 ff04 	bl	8019b1c <__ssprint_r>
 8017d14:	f7ff f8df 	bl	8016ed6 <_svfprintf_r+0x662>
 8017d18:	0801d564 	.word	0x0801d564

08017d1c <sysconf>:
 8017d1c:	2380      	movs	r3, #128	; 0x80
 8017d1e:	b510      	push	{r4, lr}
 8017d20:	015b      	lsls	r3, r3, #5
 8017d22:	2808      	cmp	r0, #8
 8017d24:	d004      	beq.n	8017d30 <sysconf+0x14>
 8017d26:	f000 fe7d 	bl	8018a24 <__errno>
 8017d2a:	2316      	movs	r3, #22
 8017d2c:	6003      	str	r3, [r0, #0]
 8017d2e:	3b17      	subs	r3, #23
 8017d30:	0018      	movs	r0, r3
 8017d32:	bd10      	pop	{r4, pc}

08017d34 <__ascii_wctomb>:
 8017d34:	1e0b      	subs	r3, r1, #0
 8017d36:	d004      	beq.n	8017d42 <__ascii_wctomb+0xe>
 8017d38:	2aff      	cmp	r2, #255	; 0xff
 8017d3a:	d904      	bls.n	8017d46 <__ascii_wctomb+0x12>
 8017d3c:	238a      	movs	r3, #138	; 0x8a
 8017d3e:	6003      	str	r3, [r0, #0]
 8017d40:	3b8b      	subs	r3, #139	; 0x8b
 8017d42:	0018      	movs	r0, r3
 8017d44:	4770      	bx	lr
 8017d46:	700a      	strb	r2, [r1, #0]
 8017d48:	2301      	movs	r3, #1
 8017d4a:	e7fa      	b.n	8017d42 <__ascii_wctomb+0xe>

08017d4c <register_fini>:
 8017d4c:	4b03      	ldr	r3, [pc, #12]	; (8017d5c <register_fini+0x10>)
 8017d4e:	b510      	push	{r4, lr}
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d002      	beq.n	8017d5a <register_fini+0xe>
 8017d54:	4802      	ldr	r0, [pc, #8]	; (8017d60 <register_fini+0x14>)
 8017d56:	f000 f805 	bl	8017d64 <atexit>
 8017d5a:	bd10      	pop	{r4, pc}
 8017d5c:	00000000 	.word	0x00000000
 8017d60:	08018a31 	.word	0x08018a31

08017d64 <atexit>:
 8017d64:	2300      	movs	r3, #0
 8017d66:	b510      	push	{r4, lr}
 8017d68:	0001      	movs	r1, r0
 8017d6a:	001a      	movs	r2, r3
 8017d6c:	0018      	movs	r0, r3
 8017d6e:	f001 ff53 	bl	8019c18 <__register_exitproc>
 8017d72:	bd10      	pop	{r4, pc}

08017d74 <quorem>:
 8017d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d76:	6903      	ldr	r3, [r0, #16]
 8017d78:	690c      	ldr	r4, [r1, #16]
 8017d7a:	b089      	sub	sp, #36	; 0x24
 8017d7c:	0007      	movs	r7, r0
 8017d7e:	9105      	str	r1, [sp, #20]
 8017d80:	2600      	movs	r6, #0
 8017d82:	42a3      	cmp	r3, r4
 8017d84:	db65      	blt.n	8017e52 <quorem+0xde>
 8017d86:	000b      	movs	r3, r1
 8017d88:	3c01      	subs	r4, #1
 8017d8a:	3314      	adds	r3, #20
 8017d8c:	00a5      	lsls	r5, r4, #2
 8017d8e:	9303      	str	r3, [sp, #12]
 8017d90:	195b      	adds	r3, r3, r5
 8017d92:	9304      	str	r3, [sp, #16]
 8017d94:	0003      	movs	r3, r0
 8017d96:	3314      	adds	r3, #20
 8017d98:	9302      	str	r3, [sp, #8]
 8017d9a:	195d      	adds	r5, r3, r5
 8017d9c:	9b04      	ldr	r3, [sp, #16]
 8017d9e:	6828      	ldr	r0, [r5, #0]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	1c59      	adds	r1, r3, #1
 8017da4:	9301      	str	r3, [sp, #4]
 8017da6:	f7e8 f9d3 	bl	8000150 <__udivsi3>
 8017daa:	9001      	str	r0, [sp, #4]
 8017dac:	42b0      	cmp	r0, r6
 8017dae:	d029      	beq.n	8017e04 <quorem+0x90>
 8017db0:	9b03      	ldr	r3, [sp, #12]
 8017db2:	9802      	ldr	r0, [sp, #8]
 8017db4:	469c      	mov	ip, r3
 8017db6:	9606      	str	r6, [sp, #24]
 8017db8:	4662      	mov	r2, ip
 8017dba:	ca08      	ldmia	r2!, {r3}
 8017dbc:	4694      	mov	ip, r2
 8017dbe:	9a01      	ldr	r2, [sp, #4]
 8017dc0:	b299      	uxth	r1, r3
 8017dc2:	4351      	muls	r1, r2
 8017dc4:	0c1b      	lsrs	r3, r3, #16
 8017dc6:	4353      	muls	r3, r2
 8017dc8:	1989      	adds	r1, r1, r6
 8017dca:	0c0a      	lsrs	r2, r1, #16
 8017dcc:	189b      	adds	r3, r3, r2
 8017dce:	9307      	str	r3, [sp, #28]
 8017dd0:	0c1e      	lsrs	r6, r3, #16
 8017dd2:	6803      	ldr	r3, [r0, #0]
 8017dd4:	b289      	uxth	r1, r1
 8017dd6:	b29a      	uxth	r2, r3
 8017dd8:	9b06      	ldr	r3, [sp, #24]
 8017dda:	18d2      	adds	r2, r2, r3
 8017ddc:	6803      	ldr	r3, [r0, #0]
 8017dde:	1a52      	subs	r2, r2, r1
 8017de0:	0c19      	lsrs	r1, r3, #16
 8017de2:	466b      	mov	r3, sp
 8017de4:	8b9b      	ldrh	r3, [r3, #28]
 8017de6:	1acb      	subs	r3, r1, r3
 8017de8:	1411      	asrs	r1, r2, #16
 8017dea:	185b      	adds	r3, r3, r1
 8017dec:	1419      	asrs	r1, r3, #16
 8017dee:	b292      	uxth	r2, r2
 8017df0:	041b      	lsls	r3, r3, #16
 8017df2:	431a      	orrs	r2, r3
 8017df4:	9b04      	ldr	r3, [sp, #16]
 8017df6:	9106      	str	r1, [sp, #24]
 8017df8:	c004      	stmia	r0!, {r2}
 8017dfa:	4563      	cmp	r3, ip
 8017dfc:	d2dc      	bcs.n	8017db8 <quorem+0x44>
 8017dfe:	682b      	ldr	r3, [r5, #0]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d02d      	beq.n	8017e60 <quorem+0xec>
 8017e04:	9905      	ldr	r1, [sp, #20]
 8017e06:	0038      	movs	r0, r7
 8017e08:	f001 fcb2 	bl	8019770 <__mcmp>
 8017e0c:	2800      	cmp	r0, #0
 8017e0e:	db1f      	blt.n	8017e50 <quorem+0xdc>
 8017e10:	2500      	movs	r5, #0
 8017e12:	9b01      	ldr	r3, [sp, #4]
 8017e14:	9802      	ldr	r0, [sp, #8]
 8017e16:	3301      	adds	r3, #1
 8017e18:	9903      	ldr	r1, [sp, #12]
 8017e1a:	9301      	str	r3, [sp, #4]
 8017e1c:	6802      	ldr	r2, [r0, #0]
 8017e1e:	c908      	ldmia	r1!, {r3}
 8017e20:	b292      	uxth	r2, r2
 8017e22:	1955      	adds	r5, r2, r5
 8017e24:	b29a      	uxth	r2, r3
 8017e26:	1aaa      	subs	r2, r5, r2
 8017e28:	6805      	ldr	r5, [r0, #0]
 8017e2a:	0c1b      	lsrs	r3, r3, #16
 8017e2c:	0c2d      	lsrs	r5, r5, #16
 8017e2e:	1aeb      	subs	r3, r5, r3
 8017e30:	1415      	asrs	r5, r2, #16
 8017e32:	195b      	adds	r3, r3, r5
 8017e34:	141d      	asrs	r5, r3, #16
 8017e36:	b292      	uxth	r2, r2
 8017e38:	041b      	lsls	r3, r3, #16
 8017e3a:	4313      	orrs	r3, r2
 8017e3c:	c008      	stmia	r0!, {r3}
 8017e3e:	9b04      	ldr	r3, [sp, #16]
 8017e40:	428b      	cmp	r3, r1
 8017e42:	d2eb      	bcs.n	8017e1c <quorem+0xa8>
 8017e44:	9a02      	ldr	r2, [sp, #8]
 8017e46:	00a3      	lsls	r3, r4, #2
 8017e48:	18d3      	adds	r3, r2, r3
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	2a00      	cmp	r2, #0
 8017e4e:	d011      	beq.n	8017e74 <quorem+0x100>
 8017e50:	9e01      	ldr	r6, [sp, #4]
 8017e52:	0030      	movs	r0, r6
 8017e54:	b009      	add	sp, #36	; 0x24
 8017e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e58:	682b      	ldr	r3, [r5, #0]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d104      	bne.n	8017e68 <quorem+0xf4>
 8017e5e:	3c01      	subs	r4, #1
 8017e60:	9b02      	ldr	r3, [sp, #8]
 8017e62:	3d04      	subs	r5, #4
 8017e64:	42ab      	cmp	r3, r5
 8017e66:	d3f7      	bcc.n	8017e58 <quorem+0xe4>
 8017e68:	613c      	str	r4, [r7, #16]
 8017e6a:	e7cb      	b.n	8017e04 <quorem+0x90>
 8017e6c:	681a      	ldr	r2, [r3, #0]
 8017e6e:	2a00      	cmp	r2, #0
 8017e70:	d104      	bne.n	8017e7c <quorem+0x108>
 8017e72:	3c01      	subs	r4, #1
 8017e74:	9a02      	ldr	r2, [sp, #8]
 8017e76:	3b04      	subs	r3, #4
 8017e78:	429a      	cmp	r2, r3
 8017e7a:	d3f7      	bcc.n	8017e6c <quorem+0xf8>
 8017e7c:	613c      	str	r4, [r7, #16]
 8017e7e:	e7e7      	b.n	8017e50 <quorem+0xdc>

08017e80 <_dtoa_r>:
 8017e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e82:	0014      	movs	r4, r2
 8017e84:	001d      	movs	r5, r3
 8017e86:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8017e88:	b09b      	sub	sp, #108	; 0x6c
 8017e8a:	9002      	str	r0, [sp, #8]
 8017e8c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8017e8e:	9406      	str	r4, [sp, #24]
 8017e90:	9507      	str	r5, [sp, #28]
 8017e92:	2900      	cmp	r1, #0
 8017e94:	d009      	beq.n	8017eaa <_dtoa_r+0x2a>
 8017e96:	2301      	movs	r3, #1
 8017e98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017e9a:	4093      	lsls	r3, r2
 8017e9c:	604a      	str	r2, [r1, #4]
 8017e9e:	608b      	str	r3, [r1, #8]
 8017ea0:	f001 fa6a 	bl	8019378 <_Bfree>
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	9a02      	ldr	r2, [sp, #8]
 8017ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8017eaa:	2d00      	cmp	r5, #0
 8017eac:	da20      	bge.n	8017ef0 <_dtoa_r+0x70>
 8017eae:	2301      	movs	r3, #1
 8017eb0:	6033      	str	r3, [r6, #0]
 8017eb2:	006b      	lsls	r3, r5, #1
 8017eb4:	085b      	lsrs	r3, r3, #1
 8017eb6:	9307      	str	r3, [sp, #28]
 8017eb8:	9c07      	ldr	r4, [sp, #28]
 8017eba:	4bb2      	ldr	r3, [pc, #712]	; (8018184 <_dtoa_r+0x304>)
 8017ebc:	0022      	movs	r2, r4
 8017ebe:	9317      	str	r3, [sp, #92]	; 0x5c
 8017ec0:	401a      	ands	r2, r3
 8017ec2:	429a      	cmp	r2, r3
 8017ec4:	d117      	bne.n	8017ef6 <_dtoa_r+0x76>
 8017ec6:	4bb0      	ldr	r3, [pc, #704]	; (8018188 <_dtoa_r+0x308>)
 8017ec8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017eca:	6013      	str	r3, [r2, #0]
 8017ecc:	9b06      	ldr	r3, [sp, #24]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d103      	bne.n	8017eda <_dtoa_r+0x5a>
 8017ed2:	0324      	lsls	r4, r4, #12
 8017ed4:	d101      	bne.n	8017eda <_dtoa_r+0x5a>
 8017ed6:	f000 fd89 	bl	80189ec <_dtoa_r+0xb6c>
 8017eda:	4bac      	ldr	r3, [pc, #688]	; (801818c <_dtoa_r+0x30c>)
 8017edc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017ede:	9308      	str	r3, [sp, #32]
 8017ee0:	2a00      	cmp	r2, #0
 8017ee2:	d002      	beq.n	8017eea <_dtoa_r+0x6a>
 8017ee4:	4baa      	ldr	r3, [pc, #680]	; (8018190 <_dtoa_r+0x310>)
 8017ee6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017ee8:	6013      	str	r3, [r2, #0]
 8017eea:	9808      	ldr	r0, [sp, #32]
 8017eec:	b01b      	add	sp, #108	; 0x6c
 8017eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	6033      	str	r3, [r6, #0]
 8017ef4:	e7e0      	b.n	8017eb8 <_dtoa_r+0x38>
 8017ef6:	9e06      	ldr	r6, [sp, #24]
 8017ef8:	9f07      	ldr	r7, [sp, #28]
 8017efa:	2200      	movs	r2, #0
 8017efc:	2300      	movs	r3, #0
 8017efe:	0030      	movs	r0, r6
 8017f00:	0039      	movs	r1, r7
 8017f02:	f7e8 faab 	bl	800045c <__aeabi_dcmpeq>
 8017f06:	1e05      	subs	r5, r0, #0
 8017f08:	d00b      	beq.n	8017f22 <_dtoa_r+0xa2>
 8017f0a:	2301      	movs	r3, #1
 8017f0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017f0e:	6013      	str	r3, [r2, #0]
 8017f10:	4ba0      	ldr	r3, [pc, #640]	; (8018194 <_dtoa_r+0x314>)
 8017f12:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017f14:	9308      	str	r3, [sp, #32]
 8017f16:	2a00      	cmp	r2, #0
 8017f18:	d0e7      	beq.n	8017eea <_dtoa_r+0x6a>
 8017f1a:	4a9f      	ldr	r2, [pc, #636]	; (8018198 <_dtoa_r+0x318>)
 8017f1c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017f1e:	600a      	str	r2, [r1, #0]
 8017f20:	e7e3      	b.n	8017eea <_dtoa_r+0x6a>
 8017f22:	ab18      	add	r3, sp, #96	; 0x60
 8017f24:	9301      	str	r3, [sp, #4]
 8017f26:	ab19      	add	r3, sp, #100	; 0x64
 8017f28:	9300      	str	r3, [sp, #0]
 8017f2a:	0032      	movs	r2, r6
 8017f2c:	003b      	movs	r3, r7
 8017f2e:	9802      	ldr	r0, [sp, #8]
 8017f30:	f001 fd0e 	bl	8019950 <__d2b>
 8017f34:	0063      	lsls	r3, r4, #1
 8017f36:	9003      	str	r0, [sp, #12]
 8017f38:	0d5b      	lsrs	r3, r3, #21
 8017f3a:	d074      	beq.n	8018026 <_dtoa_r+0x1a6>
 8017f3c:	033a      	lsls	r2, r7, #12
 8017f3e:	4c97      	ldr	r4, [pc, #604]	; (801819c <_dtoa_r+0x31c>)
 8017f40:	0b12      	lsrs	r2, r2, #12
 8017f42:	4314      	orrs	r4, r2
 8017f44:	0021      	movs	r1, r4
 8017f46:	4a96      	ldr	r2, [pc, #600]	; (80181a0 <_dtoa_r+0x320>)
 8017f48:	0030      	movs	r0, r6
 8017f4a:	9516      	str	r5, [sp, #88]	; 0x58
 8017f4c:	189e      	adds	r6, r3, r2
 8017f4e:	2200      	movs	r2, #0
 8017f50:	4b94      	ldr	r3, [pc, #592]	; (80181a4 <_dtoa_r+0x324>)
 8017f52:	f7ea fce1 	bl	8002918 <__aeabi_dsub>
 8017f56:	4a94      	ldr	r2, [pc, #592]	; (80181a8 <_dtoa_r+0x328>)
 8017f58:	4b94      	ldr	r3, [pc, #592]	; (80181ac <_dtoa_r+0x32c>)
 8017f5a:	f7ea fa6b 	bl	8002434 <__aeabi_dmul>
 8017f5e:	4a94      	ldr	r2, [pc, #592]	; (80181b0 <_dtoa_r+0x330>)
 8017f60:	4b94      	ldr	r3, [pc, #592]	; (80181b4 <_dtoa_r+0x334>)
 8017f62:	f7e9 fb41 	bl	80015e8 <__aeabi_dadd>
 8017f66:	0004      	movs	r4, r0
 8017f68:	0030      	movs	r0, r6
 8017f6a:	000d      	movs	r5, r1
 8017f6c:	f7eb f86e 	bl	800304c <__aeabi_i2d>
 8017f70:	4a91      	ldr	r2, [pc, #580]	; (80181b8 <_dtoa_r+0x338>)
 8017f72:	4b92      	ldr	r3, [pc, #584]	; (80181bc <_dtoa_r+0x33c>)
 8017f74:	f7ea fa5e 	bl	8002434 <__aeabi_dmul>
 8017f78:	0002      	movs	r2, r0
 8017f7a:	000b      	movs	r3, r1
 8017f7c:	0020      	movs	r0, r4
 8017f7e:	0029      	movs	r1, r5
 8017f80:	f7e9 fb32 	bl	80015e8 <__aeabi_dadd>
 8017f84:	0004      	movs	r4, r0
 8017f86:	000d      	movs	r5, r1
 8017f88:	f7eb f82a 	bl	8002fe0 <__aeabi_d2iz>
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	0007      	movs	r7, r0
 8017f90:	2300      	movs	r3, #0
 8017f92:	0020      	movs	r0, r4
 8017f94:	0029      	movs	r1, r5
 8017f96:	f7e8 fa67 	bl	8000468 <__aeabi_dcmplt>
 8017f9a:	2800      	cmp	r0, #0
 8017f9c:	d009      	beq.n	8017fb2 <_dtoa_r+0x132>
 8017f9e:	0038      	movs	r0, r7
 8017fa0:	f7eb f854 	bl	800304c <__aeabi_i2d>
 8017fa4:	002b      	movs	r3, r5
 8017fa6:	0022      	movs	r2, r4
 8017fa8:	f7e8 fa58 	bl	800045c <__aeabi_dcmpeq>
 8017fac:	4243      	negs	r3, r0
 8017fae:	4158      	adcs	r0, r3
 8017fb0:	1a3f      	subs	r7, r7, r0
 8017fb2:	2301      	movs	r3, #1
 8017fb4:	9314      	str	r3, [sp, #80]	; 0x50
 8017fb6:	2f16      	cmp	r7, #22
 8017fb8:	d80d      	bhi.n	8017fd6 <_dtoa_r+0x156>
 8017fba:	4981      	ldr	r1, [pc, #516]	; (80181c0 <_dtoa_r+0x340>)
 8017fbc:	00fb      	lsls	r3, r7, #3
 8017fbe:	18c9      	adds	r1, r1, r3
 8017fc0:	6808      	ldr	r0, [r1, #0]
 8017fc2:	6849      	ldr	r1, [r1, #4]
 8017fc4:	9a06      	ldr	r2, [sp, #24]
 8017fc6:	9b07      	ldr	r3, [sp, #28]
 8017fc8:	f7e8 fa62 	bl	8000490 <__aeabi_dcmpgt>
 8017fcc:	2800      	cmp	r0, #0
 8017fce:	d046      	beq.n	801805e <_dtoa_r+0x1de>
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	3f01      	subs	r7, #1
 8017fd4:	9314      	str	r3, [sp, #80]	; 0x50
 8017fd6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017fd8:	1b9e      	subs	r6, r3, r6
 8017fda:	2300      	movs	r3, #0
 8017fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8017fde:	0033      	movs	r3, r6
 8017fe0:	3b01      	subs	r3, #1
 8017fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8017fe4:	d504      	bpl.n	8017ff0 <_dtoa_r+0x170>
 8017fe6:	2301      	movs	r3, #1
 8017fe8:	1b9b      	subs	r3, r3, r6
 8017fea:	930a      	str	r3, [sp, #40]	; 0x28
 8017fec:	2300      	movs	r3, #0
 8017fee:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ff0:	2f00      	cmp	r7, #0
 8017ff2:	db36      	blt.n	8018062 <_dtoa_r+0x1e2>
 8017ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ff6:	9711      	str	r7, [sp, #68]	; 0x44
 8017ff8:	19db      	adds	r3, r3, r7
 8017ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	9304      	str	r3, [sp, #16]
 8018000:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018002:	2401      	movs	r4, #1
 8018004:	2b09      	cmp	r3, #9
 8018006:	d900      	bls.n	801800a <_dtoa_r+0x18a>
 8018008:	e082      	b.n	8018110 <_dtoa_r+0x290>
 801800a:	2b05      	cmp	r3, #5
 801800c:	dd02      	ble.n	8018014 <_dtoa_r+0x194>
 801800e:	2400      	movs	r4, #0
 8018010:	3b04      	subs	r3, #4
 8018012:	9320      	str	r3, [sp, #128]	; 0x80
 8018014:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018016:	1e98      	subs	r0, r3, #2
 8018018:	2803      	cmp	r0, #3
 801801a:	d900      	bls.n	801801e <_dtoa_r+0x19e>
 801801c:	e082      	b.n	8018124 <_dtoa_r+0x2a4>
 801801e:	f7e8 f883 	bl	8000128 <__gnu_thumb1_case_uqi>
 8018022:	7573      	.short	0x7573
 8018024:	6828      	.short	0x6828
 8018026:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018028:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801802a:	189e      	adds	r6, r3, r2
 801802c:	4b65      	ldr	r3, [pc, #404]	; (80181c4 <_dtoa_r+0x344>)
 801802e:	18f2      	adds	r2, r6, r3
 8018030:	2a20      	cmp	r2, #32
 8018032:	dd0f      	ble.n	8018054 <_dtoa_r+0x1d4>
 8018034:	2340      	movs	r3, #64	; 0x40
 8018036:	1a9b      	subs	r3, r3, r2
 8018038:	409c      	lsls	r4, r3
 801803a:	4b63      	ldr	r3, [pc, #396]	; (80181c8 <_dtoa_r+0x348>)
 801803c:	9806      	ldr	r0, [sp, #24]
 801803e:	18f3      	adds	r3, r6, r3
 8018040:	40d8      	lsrs	r0, r3
 8018042:	4320      	orrs	r0, r4
 8018044:	f7eb f83c 	bl	80030c0 <__aeabi_ui2d>
 8018048:	2301      	movs	r3, #1
 801804a:	4c60      	ldr	r4, [pc, #384]	; (80181cc <_dtoa_r+0x34c>)
 801804c:	3e01      	subs	r6, #1
 801804e:	1909      	adds	r1, r1, r4
 8018050:	9316      	str	r3, [sp, #88]	; 0x58
 8018052:	e77c      	b.n	8017f4e <_dtoa_r+0xce>
 8018054:	2320      	movs	r3, #32
 8018056:	9806      	ldr	r0, [sp, #24]
 8018058:	1a9b      	subs	r3, r3, r2
 801805a:	4098      	lsls	r0, r3
 801805c:	e7f2      	b.n	8018044 <_dtoa_r+0x1c4>
 801805e:	9014      	str	r0, [sp, #80]	; 0x50
 8018060:	e7b9      	b.n	8017fd6 <_dtoa_r+0x156>
 8018062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018064:	1bdb      	subs	r3, r3, r7
 8018066:	930a      	str	r3, [sp, #40]	; 0x28
 8018068:	427b      	negs	r3, r7
 801806a:	9304      	str	r3, [sp, #16]
 801806c:	2300      	movs	r3, #0
 801806e:	9311      	str	r3, [sp, #68]	; 0x44
 8018070:	e7c6      	b.n	8018000 <_dtoa_r+0x180>
 8018072:	2301      	movs	r3, #1
 8018074:	930d      	str	r3, [sp, #52]	; 0x34
 8018076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018078:	2b00      	cmp	r3, #0
 801807a:	dd57      	ble.n	801812c <_dtoa_r+0x2ac>
 801807c:	930c      	str	r3, [sp, #48]	; 0x30
 801807e:	9309      	str	r3, [sp, #36]	; 0x24
 8018080:	2200      	movs	r2, #0
 8018082:	9902      	ldr	r1, [sp, #8]
 8018084:	644a      	str	r2, [r1, #68]	; 0x44
 8018086:	3204      	adds	r2, #4
 8018088:	0010      	movs	r0, r2
 801808a:	9902      	ldr	r1, [sp, #8]
 801808c:	3014      	adds	r0, #20
 801808e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8018090:	4298      	cmp	r0, r3
 8018092:	d950      	bls.n	8018136 <_dtoa_r+0x2b6>
 8018094:	9802      	ldr	r0, [sp, #8]
 8018096:	f001 f947 	bl	8019328 <_Balloc>
 801809a:	9b02      	ldr	r3, [sp, #8]
 801809c:	9008      	str	r0, [sp, #32]
 801809e:	6418      	str	r0, [r3, #64]	; 0x40
 80180a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180a2:	2b0e      	cmp	r3, #14
 80180a4:	d900      	bls.n	80180a8 <_dtoa_r+0x228>
 80180a6:	e10c      	b.n	80182c2 <_dtoa_r+0x442>
 80180a8:	2c00      	cmp	r4, #0
 80180aa:	d100      	bne.n	80180ae <_dtoa_r+0x22e>
 80180ac:	e109      	b.n	80182c2 <_dtoa_r+0x442>
 80180ae:	9b06      	ldr	r3, [sp, #24]
 80180b0:	9c07      	ldr	r4, [sp, #28]
 80180b2:	9312      	str	r3, [sp, #72]	; 0x48
 80180b4:	9413      	str	r4, [sp, #76]	; 0x4c
 80180b6:	2f00      	cmp	r7, #0
 80180b8:	dc00      	bgt.n	80180bc <_dtoa_r+0x23c>
 80180ba:	e08b      	b.n	80181d4 <_dtoa_r+0x354>
 80180bc:	210f      	movs	r1, #15
 80180be:	003a      	movs	r2, r7
 80180c0:	4b3f      	ldr	r3, [pc, #252]	; (80181c0 <_dtoa_r+0x340>)
 80180c2:	400a      	ands	r2, r1
 80180c4:	00d2      	lsls	r2, r2, #3
 80180c6:	189b      	adds	r3, r3, r2
 80180c8:	681d      	ldr	r5, [r3, #0]
 80180ca:	685e      	ldr	r6, [r3, #4]
 80180cc:	2302      	movs	r3, #2
 80180ce:	113c      	asrs	r4, r7, #4
 80180d0:	930e      	str	r3, [sp, #56]	; 0x38
 80180d2:	06e3      	lsls	r3, r4, #27
 80180d4:	d50b      	bpl.n	80180ee <_dtoa_r+0x26e>
 80180d6:	4b3e      	ldr	r3, [pc, #248]	; (80181d0 <_dtoa_r+0x350>)
 80180d8:	400c      	ands	r4, r1
 80180da:	6a1a      	ldr	r2, [r3, #32]
 80180dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80180e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80180e2:	f7e9 fd9d 	bl	8001c20 <__aeabi_ddiv>
 80180e6:	2303      	movs	r3, #3
 80180e8:	9006      	str	r0, [sp, #24]
 80180ea:	9107      	str	r1, [sp, #28]
 80180ec:	930e      	str	r3, [sp, #56]	; 0x38
 80180ee:	2300      	movs	r3, #0
 80180f0:	e03b      	b.n	801816a <_dtoa_r+0x2ea>
 80180f2:	2301      	movs	r3, #1
 80180f4:	930d      	str	r3, [sp, #52]	; 0x34
 80180f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80180f8:	18fb      	adds	r3, r7, r3
 80180fa:	930c      	str	r3, [sp, #48]	; 0x30
 80180fc:	3301      	adds	r3, #1
 80180fe:	9309      	str	r3, [sp, #36]	; 0x24
 8018100:	2b00      	cmp	r3, #0
 8018102:	dcbd      	bgt.n	8018080 <_dtoa_r+0x200>
 8018104:	2301      	movs	r3, #1
 8018106:	e7bb      	b.n	8018080 <_dtoa_r+0x200>
 8018108:	2300      	movs	r3, #0
 801810a:	e7b3      	b.n	8018074 <_dtoa_r+0x1f4>
 801810c:	2300      	movs	r3, #0
 801810e:	e7f1      	b.n	80180f4 <_dtoa_r+0x274>
 8018110:	2300      	movs	r3, #0
 8018112:	940d      	str	r4, [sp, #52]	; 0x34
 8018114:	9320      	str	r3, [sp, #128]	; 0x80
 8018116:	3b01      	subs	r3, #1
 8018118:	2200      	movs	r2, #0
 801811a:	930c      	str	r3, [sp, #48]	; 0x30
 801811c:	9309      	str	r3, [sp, #36]	; 0x24
 801811e:	3313      	adds	r3, #19
 8018120:	9221      	str	r2, [sp, #132]	; 0x84
 8018122:	e7ad      	b.n	8018080 <_dtoa_r+0x200>
 8018124:	2301      	movs	r3, #1
 8018126:	930d      	str	r3, [sp, #52]	; 0x34
 8018128:	3b02      	subs	r3, #2
 801812a:	e7f5      	b.n	8018118 <_dtoa_r+0x298>
 801812c:	2301      	movs	r3, #1
 801812e:	930c      	str	r3, [sp, #48]	; 0x30
 8018130:	9309      	str	r3, [sp, #36]	; 0x24
 8018132:	001a      	movs	r2, r3
 8018134:	e7f4      	b.n	8018120 <_dtoa_r+0x2a0>
 8018136:	9802      	ldr	r0, [sp, #8]
 8018138:	3101      	adds	r1, #1
 801813a:	6441      	str	r1, [r0, #68]	; 0x44
 801813c:	0052      	lsls	r2, r2, #1
 801813e:	e7a3      	b.n	8018088 <_dtoa_r+0x208>
 8018140:	2301      	movs	r3, #1
 8018142:	421c      	tst	r4, r3
 8018144:	d00e      	beq.n	8018164 <_dtoa_r+0x2e4>
 8018146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018148:	4a21      	ldr	r2, [pc, #132]	; (80181d0 <_dtoa_r+0x350>)
 801814a:	3301      	adds	r3, #1
 801814c:	930e      	str	r3, [sp, #56]	; 0x38
 801814e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018150:	0028      	movs	r0, r5
 8018152:	00db      	lsls	r3, r3, #3
 8018154:	189b      	adds	r3, r3, r2
 8018156:	0031      	movs	r1, r6
 8018158:	681a      	ldr	r2, [r3, #0]
 801815a:	685b      	ldr	r3, [r3, #4]
 801815c:	f7ea f96a 	bl	8002434 <__aeabi_dmul>
 8018160:	0005      	movs	r5, r0
 8018162:	000e      	movs	r6, r1
 8018164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018166:	1064      	asrs	r4, r4, #1
 8018168:	3301      	adds	r3, #1
 801816a:	9310      	str	r3, [sp, #64]	; 0x40
 801816c:	2c00      	cmp	r4, #0
 801816e:	d1e7      	bne.n	8018140 <_dtoa_r+0x2c0>
 8018170:	9806      	ldr	r0, [sp, #24]
 8018172:	9907      	ldr	r1, [sp, #28]
 8018174:	002a      	movs	r2, r5
 8018176:	0033      	movs	r3, r6
 8018178:	f7e9 fd52 	bl	8001c20 <__aeabi_ddiv>
 801817c:	9006      	str	r0, [sp, #24]
 801817e:	9107      	str	r1, [sp, #28]
 8018180:	e043      	b.n	801820a <_dtoa_r+0x38a>
 8018182:	46c0      	nop			; (mov r8, r8)
 8018184:	7ff00000 	.word	0x7ff00000
 8018188:	0000270f 	.word	0x0000270f
 801818c:	0801d68e 	.word	0x0801d68e
 8018190:	0801d691 	.word	0x0801d691
 8018194:	0801d562 	.word	0x0801d562
 8018198:	0801d563 	.word	0x0801d563
 801819c:	3ff00000 	.word	0x3ff00000
 80181a0:	fffffc01 	.word	0xfffffc01
 80181a4:	3ff80000 	.word	0x3ff80000
 80181a8:	636f4361 	.word	0x636f4361
 80181ac:	3fd287a7 	.word	0x3fd287a7
 80181b0:	8b60c8b3 	.word	0x8b60c8b3
 80181b4:	3fc68a28 	.word	0x3fc68a28
 80181b8:	509f79fb 	.word	0x509f79fb
 80181bc:	3fd34413 	.word	0x3fd34413
 80181c0:	0801d6c0 	.word	0x0801d6c0
 80181c4:	00000432 	.word	0x00000432
 80181c8:	00000412 	.word	0x00000412
 80181cc:	fe100000 	.word	0xfe100000
 80181d0:	0801d698 	.word	0x0801d698
 80181d4:	2302      	movs	r3, #2
 80181d6:	930e      	str	r3, [sp, #56]	; 0x38
 80181d8:	2f00      	cmp	r7, #0
 80181da:	d016      	beq.n	801820a <_dtoa_r+0x38a>
 80181dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80181de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80181e0:	427c      	negs	r4, r7
 80181e2:	330d      	adds	r3, #13
 80181e4:	4023      	ands	r3, r4
 80181e6:	4acf      	ldr	r2, [pc, #828]	; (8018524 <_dtoa_r+0x6a4>)
 80181e8:	00db      	lsls	r3, r3, #3
 80181ea:	18d3      	adds	r3, r2, r3
 80181ec:	681a      	ldr	r2, [r3, #0]
 80181ee:	685b      	ldr	r3, [r3, #4]
 80181f0:	f7ea f920 	bl	8002434 <__aeabi_dmul>
 80181f4:	2300      	movs	r3, #0
 80181f6:	2601      	movs	r6, #1
 80181f8:	001d      	movs	r5, r3
 80181fa:	9006      	str	r0, [sp, #24]
 80181fc:	9107      	str	r1, [sp, #28]
 80181fe:	1124      	asrs	r4, r4, #4
 8018200:	2c00      	cmp	r4, #0
 8018202:	d000      	beq.n	8018206 <_dtoa_r+0x386>
 8018204:	e08c      	b.n	8018320 <_dtoa_r+0x4a0>
 8018206:	2b00      	cmp	r3, #0
 8018208:	d1b8      	bne.n	801817c <_dtoa_r+0x2fc>
 801820a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801820c:	2b00      	cmp	r3, #0
 801820e:	d100      	bne.n	8018212 <_dtoa_r+0x392>
 8018210:	e096      	b.n	8018340 <_dtoa_r+0x4c0>
 8018212:	9c06      	ldr	r4, [sp, #24]
 8018214:	9d07      	ldr	r5, [sp, #28]
 8018216:	2200      	movs	r2, #0
 8018218:	4bc3      	ldr	r3, [pc, #780]	; (8018528 <_dtoa_r+0x6a8>)
 801821a:	0020      	movs	r0, r4
 801821c:	0029      	movs	r1, r5
 801821e:	f7e8 f923 	bl	8000468 <__aeabi_dcmplt>
 8018222:	2800      	cmp	r0, #0
 8018224:	d100      	bne.n	8018228 <_dtoa_r+0x3a8>
 8018226:	e08b      	b.n	8018340 <_dtoa_r+0x4c0>
 8018228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801822a:	2b00      	cmp	r3, #0
 801822c:	d100      	bne.n	8018230 <_dtoa_r+0x3b0>
 801822e:	e087      	b.n	8018340 <_dtoa_r+0x4c0>
 8018230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018232:	2b00      	cmp	r3, #0
 8018234:	dd41      	ble.n	80182ba <_dtoa_r+0x43a>
 8018236:	4bbd      	ldr	r3, [pc, #756]	; (801852c <_dtoa_r+0x6ac>)
 8018238:	2200      	movs	r2, #0
 801823a:	0020      	movs	r0, r4
 801823c:	0029      	movs	r1, r5
 801823e:	f7ea f8f9 	bl	8002434 <__aeabi_dmul>
 8018242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018244:	9006      	str	r0, [sp, #24]
 8018246:	9107      	str	r1, [sp, #28]
 8018248:	3301      	adds	r3, #1
 801824a:	930e      	str	r3, [sp, #56]	; 0x38
 801824c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801824e:	1e7e      	subs	r6, r7, #1
 8018250:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018252:	9310      	str	r3, [sp, #64]	; 0x40
 8018254:	f7ea fefa 	bl	800304c <__aeabi_i2d>
 8018258:	9a06      	ldr	r2, [sp, #24]
 801825a:	9b07      	ldr	r3, [sp, #28]
 801825c:	f7ea f8ea 	bl	8002434 <__aeabi_dmul>
 8018260:	2200      	movs	r2, #0
 8018262:	4bb3      	ldr	r3, [pc, #716]	; (8018530 <_dtoa_r+0x6b0>)
 8018264:	f7e9 f9c0 	bl	80015e8 <__aeabi_dadd>
 8018268:	4ab2      	ldr	r2, [pc, #712]	; (8018534 <_dtoa_r+0x6b4>)
 801826a:	900e      	str	r0, [sp, #56]	; 0x38
 801826c:	910f      	str	r1, [sp, #60]	; 0x3c
 801826e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018270:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8018272:	4694      	mov	ip, r2
 8018274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018276:	4463      	add	r3, ip
 8018278:	9315      	str	r3, [sp, #84]	; 0x54
 801827a:	001d      	movs	r5, r3
 801827c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801827e:	2b00      	cmp	r3, #0
 8018280:	d161      	bne.n	8018346 <_dtoa_r+0x4c6>
 8018282:	9806      	ldr	r0, [sp, #24]
 8018284:	9907      	ldr	r1, [sp, #28]
 8018286:	2200      	movs	r2, #0
 8018288:	4bab      	ldr	r3, [pc, #684]	; (8018538 <_dtoa_r+0x6b8>)
 801828a:	f7ea fb45 	bl	8002918 <__aeabi_dsub>
 801828e:	0022      	movs	r2, r4
 8018290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018292:	9006      	str	r0, [sp, #24]
 8018294:	9107      	str	r1, [sp, #28]
 8018296:	f7e8 f8fb 	bl	8000490 <__aeabi_dcmpgt>
 801829a:	2800      	cmp	r0, #0
 801829c:	d000      	beq.n	80182a0 <_dtoa_r+0x420>
 801829e:	e2aa      	b.n	80187f6 <_dtoa_r+0x976>
 80182a0:	48a6      	ldr	r0, [pc, #664]	; (801853c <_dtoa_r+0x6bc>)
 80182a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80182a4:	4684      	mov	ip, r0
 80182a6:	4461      	add	r1, ip
 80182a8:	000b      	movs	r3, r1
 80182aa:	9806      	ldr	r0, [sp, #24]
 80182ac:	9907      	ldr	r1, [sp, #28]
 80182ae:	0022      	movs	r2, r4
 80182b0:	f7e8 f8da 	bl	8000468 <__aeabi_dcmplt>
 80182b4:	2800      	cmp	r0, #0
 80182b6:	d000      	beq.n	80182ba <_dtoa_r+0x43a>
 80182b8:	e297      	b.n	80187ea <_dtoa_r+0x96a>
 80182ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80182bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182be:	9306      	str	r3, [sp, #24]
 80182c0:	9407      	str	r4, [sp, #28]
 80182c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	da00      	bge.n	80182ca <_dtoa_r+0x44a>
 80182c8:	e15e      	b.n	8018588 <_dtoa_r+0x708>
 80182ca:	2f0e      	cmp	r7, #14
 80182cc:	dd00      	ble.n	80182d0 <_dtoa_r+0x450>
 80182ce:	e15b      	b.n	8018588 <_dtoa_r+0x708>
 80182d0:	4b94      	ldr	r3, [pc, #592]	; (8018524 <_dtoa_r+0x6a4>)
 80182d2:	00fa      	lsls	r2, r7, #3
 80182d4:	189b      	adds	r3, r3, r2
 80182d6:	685c      	ldr	r4, [r3, #4]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	9304      	str	r3, [sp, #16]
 80182dc:	9405      	str	r4, [sp, #20]
 80182de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	db00      	blt.n	80182e6 <_dtoa_r+0x466>
 80182e4:	e0da      	b.n	801849c <_dtoa_r+0x61c>
 80182e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	dd00      	ble.n	80182ee <_dtoa_r+0x46e>
 80182ec:	e0d6      	b.n	801849c <_dtoa_r+0x61c>
 80182ee:	d000      	beq.n	80182f2 <_dtoa_r+0x472>
 80182f0:	e27f      	b.n	80187f2 <_dtoa_r+0x972>
 80182f2:	9804      	ldr	r0, [sp, #16]
 80182f4:	9905      	ldr	r1, [sp, #20]
 80182f6:	2200      	movs	r2, #0
 80182f8:	4b8f      	ldr	r3, [pc, #572]	; (8018538 <_dtoa_r+0x6b8>)
 80182fa:	f7ea f89b 	bl	8002434 <__aeabi_dmul>
 80182fe:	9a06      	ldr	r2, [sp, #24]
 8018300:	9b07      	ldr	r3, [sp, #28]
 8018302:	f7e8 f8cf 	bl	80004a4 <__aeabi_dcmpge>
 8018306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018308:	9304      	str	r3, [sp, #16]
 801830a:	001e      	movs	r6, r3
 801830c:	2800      	cmp	r0, #0
 801830e:	d000      	beq.n	8018312 <_dtoa_r+0x492>
 8018310:	e251      	b.n	80187b6 <_dtoa_r+0x936>
 8018312:	9b08      	ldr	r3, [sp, #32]
 8018314:	9a08      	ldr	r2, [sp, #32]
 8018316:	1c5d      	adds	r5, r3, #1
 8018318:	2331      	movs	r3, #49	; 0x31
 801831a:	3701      	adds	r7, #1
 801831c:	7013      	strb	r3, [r2, #0]
 801831e:	e24d      	b.n	80187bc <_dtoa_r+0x93c>
 8018320:	4234      	tst	r4, r6
 8018322:	d00a      	beq.n	801833a <_dtoa_r+0x4ba>
 8018324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018326:	4a86      	ldr	r2, [pc, #536]	; (8018540 <_dtoa_r+0x6c0>)
 8018328:	3301      	adds	r3, #1
 801832a:	930e      	str	r3, [sp, #56]	; 0x38
 801832c:	00eb      	lsls	r3, r5, #3
 801832e:	189b      	adds	r3, r3, r2
 8018330:	681a      	ldr	r2, [r3, #0]
 8018332:	685b      	ldr	r3, [r3, #4]
 8018334:	f7ea f87e 	bl	8002434 <__aeabi_dmul>
 8018338:	0033      	movs	r3, r6
 801833a:	1064      	asrs	r4, r4, #1
 801833c:	3501      	adds	r5, #1
 801833e:	e75f      	b.n	8018200 <_dtoa_r+0x380>
 8018340:	003e      	movs	r6, r7
 8018342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018344:	e784      	b.n	8018250 <_dtoa_r+0x3d0>
 8018346:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018348:	1e5a      	subs	r2, r3, #1
 801834a:	4b76      	ldr	r3, [pc, #472]	; (8018524 <_dtoa_r+0x6a4>)
 801834c:	00d2      	lsls	r2, r2, #3
 801834e:	189b      	adds	r3, r3, r2
 8018350:	6818      	ldr	r0, [r3, #0]
 8018352:	6859      	ldr	r1, [r3, #4]
 8018354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018356:	2b00      	cmp	r3, #0
 8018358:	d04b      	beq.n	80183f2 <_dtoa_r+0x572>
 801835a:	0002      	movs	r2, r0
 801835c:	000b      	movs	r3, r1
 801835e:	2000      	movs	r0, #0
 8018360:	4978      	ldr	r1, [pc, #480]	; (8018544 <_dtoa_r+0x6c4>)
 8018362:	f7e9 fc5d 	bl	8001c20 <__aeabi_ddiv>
 8018366:	002b      	movs	r3, r5
 8018368:	0022      	movs	r2, r4
 801836a:	f7ea fad5 	bl	8002918 <__aeabi_dsub>
 801836e:	9b08      	ldr	r3, [sp, #32]
 8018370:	900e      	str	r0, [sp, #56]	; 0x38
 8018372:	910f      	str	r1, [sp, #60]	; 0x3c
 8018374:	9315      	str	r3, [sp, #84]	; 0x54
 8018376:	9806      	ldr	r0, [sp, #24]
 8018378:	9907      	ldr	r1, [sp, #28]
 801837a:	f7ea fe31 	bl	8002fe0 <__aeabi_d2iz>
 801837e:	0004      	movs	r4, r0
 8018380:	f7ea fe64 	bl	800304c <__aeabi_i2d>
 8018384:	0002      	movs	r2, r0
 8018386:	000b      	movs	r3, r1
 8018388:	9806      	ldr	r0, [sp, #24]
 801838a:	9907      	ldr	r1, [sp, #28]
 801838c:	f7ea fac4 	bl	8002918 <__aeabi_dsub>
 8018390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018392:	3430      	adds	r4, #48	; 0x30
 8018394:	1c5d      	adds	r5, r3, #1
 8018396:	701c      	strb	r4, [r3, #0]
 8018398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801839a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801839c:	9006      	str	r0, [sp, #24]
 801839e:	9107      	str	r1, [sp, #28]
 80183a0:	f7e8 f862 	bl	8000468 <__aeabi_dcmplt>
 80183a4:	2800      	cmp	r0, #0
 80183a6:	d16c      	bne.n	8018482 <_dtoa_r+0x602>
 80183a8:	9a06      	ldr	r2, [sp, #24]
 80183aa:	9b07      	ldr	r3, [sp, #28]
 80183ac:	2000      	movs	r0, #0
 80183ae:	495e      	ldr	r1, [pc, #376]	; (8018528 <_dtoa_r+0x6a8>)
 80183b0:	f7ea fab2 	bl	8002918 <__aeabi_dsub>
 80183b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80183b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80183b8:	f7e8 f856 	bl	8000468 <__aeabi_dcmplt>
 80183bc:	2800      	cmp	r0, #0
 80183be:	d000      	beq.n	80183c2 <_dtoa_r+0x542>
 80183c0:	e0c3      	b.n	801854a <_dtoa_r+0x6ca>
 80183c2:	9b08      	ldr	r3, [sp, #32]
 80183c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80183c6:	1aeb      	subs	r3, r5, r3
 80183c8:	429a      	cmp	r2, r3
 80183ca:	dc00      	bgt.n	80183ce <_dtoa_r+0x54e>
 80183cc:	e775      	b.n	80182ba <_dtoa_r+0x43a>
 80183ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80183d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80183d2:	2200      	movs	r2, #0
 80183d4:	4b55      	ldr	r3, [pc, #340]	; (801852c <_dtoa_r+0x6ac>)
 80183d6:	f7ea f82d 	bl	8002434 <__aeabi_dmul>
 80183da:	2200      	movs	r2, #0
 80183dc:	900e      	str	r0, [sp, #56]	; 0x38
 80183de:	910f      	str	r1, [sp, #60]	; 0x3c
 80183e0:	9806      	ldr	r0, [sp, #24]
 80183e2:	9907      	ldr	r1, [sp, #28]
 80183e4:	4b51      	ldr	r3, [pc, #324]	; (801852c <_dtoa_r+0x6ac>)
 80183e6:	f7ea f825 	bl	8002434 <__aeabi_dmul>
 80183ea:	9515      	str	r5, [sp, #84]	; 0x54
 80183ec:	9006      	str	r0, [sp, #24]
 80183ee:	9107      	str	r1, [sp, #28]
 80183f0:	e7c1      	b.n	8018376 <_dtoa_r+0x4f6>
 80183f2:	0022      	movs	r2, r4
 80183f4:	002b      	movs	r3, r5
 80183f6:	f7ea f81d 	bl	8002434 <__aeabi_dmul>
 80183fa:	9c08      	ldr	r4, [sp, #32]
 80183fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80183fe:	0023      	movs	r3, r4
 8018400:	4694      	mov	ip, r2
 8018402:	900e      	str	r0, [sp, #56]	; 0x38
 8018404:	910f      	str	r1, [sp, #60]	; 0x3c
 8018406:	4463      	add	r3, ip
 8018408:	9315      	str	r3, [sp, #84]	; 0x54
 801840a:	9806      	ldr	r0, [sp, #24]
 801840c:	9907      	ldr	r1, [sp, #28]
 801840e:	f7ea fde7 	bl	8002fe0 <__aeabi_d2iz>
 8018412:	0005      	movs	r5, r0
 8018414:	f7ea fe1a 	bl	800304c <__aeabi_i2d>
 8018418:	000b      	movs	r3, r1
 801841a:	0002      	movs	r2, r0
 801841c:	9806      	ldr	r0, [sp, #24]
 801841e:	9907      	ldr	r1, [sp, #28]
 8018420:	f7ea fa7a 	bl	8002918 <__aeabi_dsub>
 8018424:	3530      	adds	r5, #48	; 0x30
 8018426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018428:	7025      	strb	r5, [r4, #0]
 801842a:	3401      	adds	r4, #1
 801842c:	9006      	str	r0, [sp, #24]
 801842e:	9107      	str	r1, [sp, #28]
 8018430:	42a3      	cmp	r3, r4
 8018432:	d12a      	bne.n	801848a <_dtoa_r+0x60a>
 8018434:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018436:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018438:	9a08      	ldr	r2, [sp, #32]
 801843a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801843c:	4694      	mov	ip, r2
 801843e:	4463      	add	r3, ip
 8018440:	2200      	movs	r2, #0
 8018442:	001d      	movs	r5, r3
 8018444:	4b3f      	ldr	r3, [pc, #252]	; (8018544 <_dtoa_r+0x6c4>)
 8018446:	f7e9 f8cf 	bl	80015e8 <__aeabi_dadd>
 801844a:	0002      	movs	r2, r0
 801844c:	000b      	movs	r3, r1
 801844e:	9806      	ldr	r0, [sp, #24]
 8018450:	9907      	ldr	r1, [sp, #28]
 8018452:	f7e8 f81d 	bl	8000490 <__aeabi_dcmpgt>
 8018456:	2800      	cmp	r0, #0
 8018458:	d000      	beq.n	801845c <_dtoa_r+0x5dc>
 801845a:	e076      	b.n	801854a <_dtoa_r+0x6ca>
 801845c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801845e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018460:	2000      	movs	r0, #0
 8018462:	4938      	ldr	r1, [pc, #224]	; (8018544 <_dtoa_r+0x6c4>)
 8018464:	f7ea fa58 	bl	8002918 <__aeabi_dsub>
 8018468:	0002      	movs	r2, r0
 801846a:	000b      	movs	r3, r1
 801846c:	9806      	ldr	r0, [sp, #24]
 801846e:	9907      	ldr	r1, [sp, #28]
 8018470:	f7e7 fffa 	bl	8000468 <__aeabi_dcmplt>
 8018474:	2800      	cmp	r0, #0
 8018476:	d100      	bne.n	801847a <_dtoa_r+0x5fa>
 8018478:	e71f      	b.n	80182ba <_dtoa_r+0x43a>
 801847a:	1e6b      	subs	r3, r5, #1
 801847c:	781a      	ldrb	r2, [r3, #0]
 801847e:	2a30      	cmp	r2, #48	; 0x30
 8018480:	d001      	beq.n	8018486 <_dtoa_r+0x606>
 8018482:	0037      	movs	r7, r6
 8018484:	e03f      	b.n	8018506 <_dtoa_r+0x686>
 8018486:	001d      	movs	r5, r3
 8018488:	e7f7      	b.n	801847a <_dtoa_r+0x5fa>
 801848a:	9806      	ldr	r0, [sp, #24]
 801848c:	9907      	ldr	r1, [sp, #28]
 801848e:	2200      	movs	r2, #0
 8018490:	4b26      	ldr	r3, [pc, #152]	; (801852c <_dtoa_r+0x6ac>)
 8018492:	f7e9 ffcf 	bl	8002434 <__aeabi_dmul>
 8018496:	9006      	str	r0, [sp, #24]
 8018498:	9107      	str	r1, [sp, #28]
 801849a:	e7b6      	b.n	801840a <_dtoa_r+0x58a>
 801849c:	9e08      	ldr	r6, [sp, #32]
 801849e:	9a04      	ldr	r2, [sp, #16]
 80184a0:	9b05      	ldr	r3, [sp, #20]
 80184a2:	9806      	ldr	r0, [sp, #24]
 80184a4:	9907      	ldr	r1, [sp, #28]
 80184a6:	f7e9 fbbb 	bl	8001c20 <__aeabi_ddiv>
 80184aa:	f7ea fd99 	bl	8002fe0 <__aeabi_d2iz>
 80184ae:	0004      	movs	r4, r0
 80184b0:	f7ea fdcc 	bl	800304c <__aeabi_i2d>
 80184b4:	9a04      	ldr	r2, [sp, #16]
 80184b6:	9b05      	ldr	r3, [sp, #20]
 80184b8:	f7e9 ffbc 	bl	8002434 <__aeabi_dmul>
 80184bc:	0002      	movs	r2, r0
 80184be:	000b      	movs	r3, r1
 80184c0:	9806      	ldr	r0, [sp, #24]
 80184c2:	9907      	ldr	r1, [sp, #28]
 80184c4:	f7ea fa28 	bl	8002918 <__aeabi_dsub>
 80184c8:	0023      	movs	r3, r4
 80184ca:	3330      	adds	r3, #48	; 0x30
 80184cc:	7033      	strb	r3, [r6, #0]
 80184ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184d0:	9b08      	ldr	r3, [sp, #32]
 80184d2:	1c75      	adds	r5, r6, #1
 80184d4:	1aeb      	subs	r3, r5, r3
 80184d6:	429a      	cmp	r2, r3
 80184d8:	d148      	bne.n	801856c <_dtoa_r+0x6ec>
 80184da:	0002      	movs	r2, r0
 80184dc:	000b      	movs	r3, r1
 80184de:	f7e9 f883 	bl	80015e8 <__aeabi_dadd>
 80184e2:	9a04      	ldr	r2, [sp, #16]
 80184e4:	9b05      	ldr	r3, [sp, #20]
 80184e6:	9006      	str	r0, [sp, #24]
 80184e8:	9107      	str	r1, [sp, #28]
 80184ea:	f7e7 ffd1 	bl	8000490 <__aeabi_dcmpgt>
 80184ee:	2800      	cmp	r0, #0
 80184f0:	d12a      	bne.n	8018548 <_dtoa_r+0x6c8>
 80184f2:	9a04      	ldr	r2, [sp, #16]
 80184f4:	9b05      	ldr	r3, [sp, #20]
 80184f6:	9806      	ldr	r0, [sp, #24]
 80184f8:	9907      	ldr	r1, [sp, #28]
 80184fa:	f7e7 ffaf 	bl	800045c <__aeabi_dcmpeq>
 80184fe:	2800      	cmp	r0, #0
 8018500:	d001      	beq.n	8018506 <_dtoa_r+0x686>
 8018502:	07e3      	lsls	r3, r4, #31
 8018504:	d420      	bmi.n	8018548 <_dtoa_r+0x6c8>
 8018506:	9903      	ldr	r1, [sp, #12]
 8018508:	9802      	ldr	r0, [sp, #8]
 801850a:	f000 ff35 	bl	8019378 <_Bfree>
 801850e:	2300      	movs	r3, #0
 8018510:	702b      	strb	r3, [r5, #0]
 8018512:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018514:	3701      	adds	r7, #1
 8018516:	601f      	str	r7, [r3, #0]
 8018518:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801851a:	2b00      	cmp	r3, #0
 801851c:	d100      	bne.n	8018520 <_dtoa_r+0x6a0>
 801851e:	e4e4      	b.n	8017eea <_dtoa_r+0x6a>
 8018520:	601d      	str	r5, [r3, #0]
 8018522:	e4e2      	b.n	8017eea <_dtoa_r+0x6a>
 8018524:	0801d6c0 	.word	0x0801d6c0
 8018528:	3ff00000 	.word	0x3ff00000
 801852c:	40240000 	.word	0x40240000
 8018530:	401c0000 	.word	0x401c0000
 8018534:	fcc00000 	.word	0xfcc00000
 8018538:	40140000 	.word	0x40140000
 801853c:	7cc00000 	.word	0x7cc00000
 8018540:	0801d698 	.word	0x0801d698
 8018544:	3fe00000 	.word	0x3fe00000
 8018548:	003e      	movs	r6, r7
 801854a:	1e6b      	subs	r3, r5, #1
 801854c:	781a      	ldrb	r2, [r3, #0]
 801854e:	2a39      	cmp	r2, #57	; 0x39
 8018550:	d106      	bne.n	8018560 <_dtoa_r+0x6e0>
 8018552:	9a08      	ldr	r2, [sp, #32]
 8018554:	429a      	cmp	r2, r3
 8018556:	d107      	bne.n	8018568 <_dtoa_r+0x6e8>
 8018558:	2330      	movs	r3, #48	; 0x30
 801855a:	7013      	strb	r3, [r2, #0]
 801855c:	0013      	movs	r3, r2
 801855e:	3601      	adds	r6, #1
 8018560:	781a      	ldrb	r2, [r3, #0]
 8018562:	3201      	adds	r2, #1
 8018564:	701a      	strb	r2, [r3, #0]
 8018566:	e78c      	b.n	8018482 <_dtoa_r+0x602>
 8018568:	001d      	movs	r5, r3
 801856a:	e7ee      	b.n	801854a <_dtoa_r+0x6ca>
 801856c:	2200      	movs	r2, #0
 801856e:	4ba4      	ldr	r3, [pc, #656]	; (8018800 <_dtoa_r+0x980>)
 8018570:	f7e9 ff60 	bl	8002434 <__aeabi_dmul>
 8018574:	2200      	movs	r2, #0
 8018576:	2300      	movs	r3, #0
 8018578:	9006      	str	r0, [sp, #24]
 801857a:	9107      	str	r1, [sp, #28]
 801857c:	002e      	movs	r6, r5
 801857e:	f7e7 ff6d 	bl	800045c <__aeabi_dcmpeq>
 8018582:	2800      	cmp	r0, #0
 8018584:	d08b      	beq.n	801849e <_dtoa_r+0x61e>
 8018586:	e7be      	b.n	8018506 <_dtoa_r+0x686>
 8018588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801858a:	2a00      	cmp	r2, #0
 801858c:	d100      	bne.n	8018590 <_dtoa_r+0x710>
 801858e:	e0da      	b.n	8018746 <_dtoa_r+0x8c6>
 8018590:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018592:	2a01      	cmp	r2, #1
 8018594:	dd00      	ble.n	8018598 <_dtoa_r+0x718>
 8018596:	e0bd      	b.n	8018714 <_dtoa_r+0x894>
 8018598:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801859a:	2a00      	cmp	r2, #0
 801859c:	d100      	bne.n	80185a0 <_dtoa_r+0x720>
 801859e:	e0b5      	b.n	801870c <_dtoa_r+0x88c>
 80185a0:	4a98      	ldr	r2, [pc, #608]	; (8018804 <_dtoa_r+0x984>)
 80185a2:	189b      	adds	r3, r3, r2
 80185a4:	9d04      	ldr	r5, [sp, #16]
 80185a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80185a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80185aa:	2101      	movs	r1, #1
 80185ac:	18d2      	adds	r2, r2, r3
 80185ae:	920a      	str	r2, [sp, #40]	; 0x28
 80185b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80185b2:	9802      	ldr	r0, [sp, #8]
 80185b4:	18d3      	adds	r3, r2, r3
 80185b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80185b8:	f000 ffad 	bl	8019516 <__i2b>
 80185bc:	0006      	movs	r6, r0
 80185be:	2c00      	cmp	r4, #0
 80185c0:	dd0e      	ble.n	80185e0 <_dtoa_r+0x760>
 80185c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	dd0b      	ble.n	80185e0 <_dtoa_r+0x760>
 80185c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80185ca:	0023      	movs	r3, r4
 80185cc:	4294      	cmp	r4, r2
 80185ce:	dd00      	ble.n	80185d2 <_dtoa_r+0x752>
 80185d0:	0013      	movs	r3, r2
 80185d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80185d4:	1ae4      	subs	r4, r4, r3
 80185d6:	1ad2      	subs	r2, r2, r3
 80185d8:	920a      	str	r2, [sp, #40]	; 0x28
 80185da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80185dc:	1ad3      	subs	r3, r2, r3
 80185de:	930b      	str	r3, [sp, #44]	; 0x2c
 80185e0:	9b04      	ldr	r3, [sp, #16]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d01f      	beq.n	8018626 <_dtoa_r+0x7a6>
 80185e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d100      	bne.n	80185ee <_dtoa_r+0x76e>
 80185ec:	e0af      	b.n	801874e <_dtoa_r+0x8ce>
 80185ee:	2d00      	cmp	r5, #0
 80185f0:	d011      	beq.n	8018616 <_dtoa_r+0x796>
 80185f2:	0031      	movs	r1, r6
 80185f4:	002a      	movs	r2, r5
 80185f6:	9802      	ldr	r0, [sp, #8]
 80185f8:	f001 f826 	bl	8019648 <__pow5mult>
 80185fc:	9a03      	ldr	r2, [sp, #12]
 80185fe:	0001      	movs	r1, r0
 8018600:	0006      	movs	r6, r0
 8018602:	9802      	ldr	r0, [sp, #8]
 8018604:	f000 ff90 	bl	8019528 <__multiply>
 8018608:	9903      	ldr	r1, [sp, #12]
 801860a:	9010      	str	r0, [sp, #64]	; 0x40
 801860c:	9802      	ldr	r0, [sp, #8]
 801860e:	f000 feb3 	bl	8019378 <_Bfree>
 8018612:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018614:	9303      	str	r3, [sp, #12]
 8018616:	9b04      	ldr	r3, [sp, #16]
 8018618:	1b5a      	subs	r2, r3, r5
 801861a:	d004      	beq.n	8018626 <_dtoa_r+0x7a6>
 801861c:	9903      	ldr	r1, [sp, #12]
 801861e:	9802      	ldr	r0, [sp, #8]
 8018620:	f001 f812 	bl	8019648 <__pow5mult>
 8018624:	9003      	str	r0, [sp, #12]
 8018626:	2101      	movs	r1, #1
 8018628:	9802      	ldr	r0, [sp, #8]
 801862a:	f000 ff74 	bl	8019516 <__i2b>
 801862e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018630:	9004      	str	r0, [sp, #16]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d100      	bne.n	8018638 <_dtoa_r+0x7b8>
 8018636:	e1e3      	b.n	8018a00 <_dtoa_r+0xb80>
 8018638:	001a      	movs	r2, r3
 801863a:	0001      	movs	r1, r0
 801863c:	9802      	ldr	r0, [sp, #8]
 801863e:	f001 f803 	bl	8019648 <__pow5mult>
 8018642:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018644:	9004      	str	r0, [sp, #16]
 8018646:	2b01      	cmp	r3, #1
 8018648:	dd00      	ble.n	801864c <_dtoa_r+0x7cc>
 801864a:	e082      	b.n	8018752 <_dtoa_r+0x8d2>
 801864c:	2500      	movs	r5, #0
 801864e:	9b06      	ldr	r3, [sp, #24]
 8018650:	42ab      	cmp	r3, r5
 8018652:	d10e      	bne.n	8018672 <_dtoa_r+0x7f2>
 8018654:	9b07      	ldr	r3, [sp, #28]
 8018656:	031b      	lsls	r3, r3, #12
 8018658:	42ab      	cmp	r3, r5
 801865a:	d10a      	bne.n	8018672 <_dtoa_r+0x7f2>
 801865c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801865e:	9a07      	ldr	r2, [sp, #28]
 8018660:	4213      	tst	r3, r2
 8018662:	d006      	beq.n	8018672 <_dtoa_r+0x7f2>
 8018664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018666:	3501      	adds	r5, #1
 8018668:	3301      	adds	r3, #1
 801866a:	930a      	str	r3, [sp, #40]	; 0x28
 801866c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801866e:	3301      	adds	r3, #1
 8018670:	930b      	str	r3, [sp, #44]	; 0x2c
 8018672:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018674:	2001      	movs	r0, #1
 8018676:	2b00      	cmp	r3, #0
 8018678:	d16c      	bne.n	8018754 <_dtoa_r+0x8d4>
 801867a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801867c:	1818      	adds	r0, r3, r0
 801867e:	231f      	movs	r3, #31
 8018680:	4018      	ands	r0, r3
 8018682:	d07e      	beq.n	8018782 <_dtoa_r+0x902>
 8018684:	3301      	adds	r3, #1
 8018686:	1a1b      	subs	r3, r3, r0
 8018688:	2b04      	cmp	r3, #4
 801868a:	dd70      	ble.n	801876e <_dtoa_r+0x8ee>
 801868c:	231c      	movs	r3, #28
 801868e:	1a18      	subs	r0, r3, r0
 8018690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018692:	1824      	adds	r4, r4, r0
 8018694:	181b      	adds	r3, r3, r0
 8018696:	930a      	str	r3, [sp, #40]	; 0x28
 8018698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801869a:	181b      	adds	r3, r3, r0
 801869c:	930b      	str	r3, [sp, #44]	; 0x2c
 801869e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	dd05      	ble.n	80186b0 <_dtoa_r+0x830>
 80186a4:	001a      	movs	r2, r3
 80186a6:	9903      	ldr	r1, [sp, #12]
 80186a8:	9802      	ldr	r0, [sp, #8]
 80186aa:	f001 f80f 	bl	80196cc <__lshift>
 80186ae:	9003      	str	r0, [sp, #12]
 80186b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	dd05      	ble.n	80186c2 <_dtoa_r+0x842>
 80186b6:	001a      	movs	r2, r3
 80186b8:	9904      	ldr	r1, [sp, #16]
 80186ba:	9802      	ldr	r0, [sp, #8]
 80186bc:	f001 f806 	bl	80196cc <__lshift>
 80186c0:	9004      	str	r0, [sp, #16]
 80186c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d05e      	beq.n	8018786 <_dtoa_r+0x906>
 80186c8:	9904      	ldr	r1, [sp, #16]
 80186ca:	9803      	ldr	r0, [sp, #12]
 80186cc:	f001 f850 	bl	8019770 <__mcmp>
 80186d0:	2800      	cmp	r0, #0
 80186d2:	da58      	bge.n	8018786 <_dtoa_r+0x906>
 80186d4:	2300      	movs	r3, #0
 80186d6:	220a      	movs	r2, #10
 80186d8:	9903      	ldr	r1, [sp, #12]
 80186da:	9802      	ldr	r0, [sp, #8]
 80186dc:	f000 fe56 	bl	801938c <__multadd>
 80186e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186e2:	3f01      	subs	r7, #1
 80186e4:	9003      	str	r0, [sp, #12]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d100      	bne.n	80186ec <_dtoa_r+0x86c>
 80186ea:	e190      	b.n	8018a0e <_dtoa_r+0xb8e>
 80186ec:	2300      	movs	r3, #0
 80186ee:	0031      	movs	r1, r6
 80186f0:	220a      	movs	r2, #10
 80186f2:	9802      	ldr	r0, [sp, #8]
 80186f4:	f000 fe4a 	bl	801938c <__multadd>
 80186f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80186fa:	0006      	movs	r6, r0
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	dd00      	ble.n	8018702 <_dtoa_r+0x882>
 8018700:	e088      	b.n	8018814 <_dtoa_r+0x994>
 8018702:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018704:	2b02      	cmp	r3, #2
 8018706:	dc00      	bgt.n	801870a <_dtoa_r+0x88a>
 8018708:	e084      	b.n	8018814 <_dtoa_r+0x994>
 801870a:	e044      	b.n	8018796 <_dtoa_r+0x916>
 801870c:	2336      	movs	r3, #54	; 0x36
 801870e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018710:	1a9b      	subs	r3, r3, r2
 8018712:	e747      	b.n	80185a4 <_dtoa_r+0x724>
 8018714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018716:	1e5d      	subs	r5, r3, #1
 8018718:	9b04      	ldr	r3, [sp, #16]
 801871a:	42ab      	cmp	r3, r5
 801871c:	db08      	blt.n	8018730 <_dtoa_r+0x8b0>
 801871e:	1b5d      	subs	r5, r3, r5
 8018720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018722:	2b00      	cmp	r3, #0
 8018724:	da0c      	bge.n	8018740 <_dtoa_r+0x8c0>
 8018726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801872a:	1a9c      	subs	r4, r3, r2
 801872c:	2300      	movs	r3, #0
 801872e:	e73b      	b.n	80185a8 <_dtoa_r+0x728>
 8018730:	9b04      	ldr	r3, [sp, #16]
 8018732:	9504      	str	r5, [sp, #16]
 8018734:	1aea      	subs	r2, r5, r3
 8018736:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018738:	2500      	movs	r5, #0
 801873a:	189b      	adds	r3, r3, r2
 801873c:	9311      	str	r3, [sp, #68]	; 0x44
 801873e:	e7ef      	b.n	8018720 <_dtoa_r+0x8a0>
 8018740:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018744:	e730      	b.n	80185a8 <_dtoa_r+0x728>
 8018746:	9d04      	ldr	r5, [sp, #16]
 8018748:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801874a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801874c:	e737      	b.n	80185be <_dtoa_r+0x73e>
 801874e:	9a04      	ldr	r2, [sp, #16]
 8018750:	e764      	b.n	801861c <_dtoa_r+0x79c>
 8018752:	2500      	movs	r5, #0
 8018754:	9b04      	ldr	r3, [sp, #16]
 8018756:	9a04      	ldr	r2, [sp, #16]
 8018758:	691b      	ldr	r3, [r3, #16]
 801875a:	9310      	str	r3, [sp, #64]	; 0x40
 801875c:	3303      	adds	r3, #3
 801875e:	009b      	lsls	r3, r3, #2
 8018760:	18d3      	adds	r3, r2, r3
 8018762:	6858      	ldr	r0, [r3, #4]
 8018764:	f000 fe8e 	bl	8019484 <__hi0bits>
 8018768:	2320      	movs	r3, #32
 801876a:	1a18      	subs	r0, r3, r0
 801876c:	e785      	b.n	801867a <_dtoa_r+0x7fa>
 801876e:	2b04      	cmp	r3, #4
 8018770:	d095      	beq.n	801869e <_dtoa_r+0x81e>
 8018772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018774:	331c      	adds	r3, #28
 8018776:	18d2      	adds	r2, r2, r3
 8018778:	920a      	str	r2, [sp, #40]	; 0x28
 801877a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801877c:	18e4      	adds	r4, r4, r3
 801877e:	18d3      	adds	r3, r2, r3
 8018780:	e78c      	b.n	801869c <_dtoa_r+0x81c>
 8018782:	0003      	movs	r3, r0
 8018784:	e7f5      	b.n	8018772 <_dtoa_r+0x8f2>
 8018786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018788:	2b00      	cmp	r3, #0
 801878a:	dc3d      	bgt.n	8018808 <_dtoa_r+0x988>
 801878c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801878e:	2b02      	cmp	r3, #2
 8018790:	dd3a      	ble.n	8018808 <_dtoa_r+0x988>
 8018792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018794:	930c      	str	r3, [sp, #48]	; 0x30
 8018796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018798:	2b00      	cmp	r3, #0
 801879a:	d10c      	bne.n	80187b6 <_dtoa_r+0x936>
 801879c:	9904      	ldr	r1, [sp, #16]
 801879e:	2205      	movs	r2, #5
 80187a0:	9802      	ldr	r0, [sp, #8]
 80187a2:	f000 fdf3 	bl	801938c <__multadd>
 80187a6:	9004      	str	r0, [sp, #16]
 80187a8:	0001      	movs	r1, r0
 80187aa:	9803      	ldr	r0, [sp, #12]
 80187ac:	f000 ffe0 	bl	8019770 <__mcmp>
 80187b0:	2800      	cmp	r0, #0
 80187b2:	dd00      	ble.n	80187b6 <_dtoa_r+0x936>
 80187b4:	e5ad      	b.n	8018312 <_dtoa_r+0x492>
 80187b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80187b8:	9d08      	ldr	r5, [sp, #32]
 80187ba:	43df      	mvns	r7, r3
 80187bc:	2300      	movs	r3, #0
 80187be:	9309      	str	r3, [sp, #36]	; 0x24
 80187c0:	9904      	ldr	r1, [sp, #16]
 80187c2:	9802      	ldr	r0, [sp, #8]
 80187c4:	f000 fdd8 	bl	8019378 <_Bfree>
 80187c8:	2e00      	cmp	r6, #0
 80187ca:	d100      	bne.n	80187ce <_dtoa_r+0x94e>
 80187cc:	e69b      	b.n	8018506 <_dtoa_r+0x686>
 80187ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d005      	beq.n	80187e0 <_dtoa_r+0x960>
 80187d4:	42b3      	cmp	r3, r6
 80187d6:	d003      	beq.n	80187e0 <_dtoa_r+0x960>
 80187d8:	0019      	movs	r1, r3
 80187da:	9802      	ldr	r0, [sp, #8]
 80187dc:	f000 fdcc 	bl	8019378 <_Bfree>
 80187e0:	0031      	movs	r1, r6
 80187e2:	9802      	ldr	r0, [sp, #8]
 80187e4:	f000 fdc8 	bl	8019378 <_Bfree>
 80187e8:	e68d      	b.n	8018506 <_dtoa_r+0x686>
 80187ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187ec:	9304      	str	r3, [sp, #16]
 80187ee:	001e      	movs	r6, r3
 80187f0:	e7e1      	b.n	80187b6 <_dtoa_r+0x936>
 80187f2:	2300      	movs	r3, #0
 80187f4:	e7fa      	b.n	80187ec <_dtoa_r+0x96c>
 80187f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187f8:	0037      	movs	r7, r6
 80187fa:	9304      	str	r3, [sp, #16]
 80187fc:	001e      	movs	r6, r3
 80187fe:	e588      	b.n	8018312 <_dtoa_r+0x492>
 8018800:	40240000 	.word	0x40240000
 8018804:	00000433 	.word	0x00000433
 8018808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801880a:	2b00      	cmp	r3, #0
 801880c:	d100      	bne.n	8018810 <_dtoa_r+0x990>
 801880e:	e0b2      	b.n	8018976 <_dtoa_r+0xaf6>
 8018810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018812:	930c      	str	r3, [sp, #48]	; 0x30
 8018814:	2c00      	cmp	r4, #0
 8018816:	dd05      	ble.n	8018824 <_dtoa_r+0x9a4>
 8018818:	0031      	movs	r1, r6
 801881a:	0022      	movs	r2, r4
 801881c:	9802      	ldr	r0, [sp, #8]
 801881e:	f000 ff55 	bl	80196cc <__lshift>
 8018822:	0006      	movs	r6, r0
 8018824:	0030      	movs	r0, r6
 8018826:	2d00      	cmp	r5, #0
 8018828:	d011      	beq.n	801884e <_dtoa_r+0x9ce>
 801882a:	6871      	ldr	r1, [r6, #4]
 801882c:	9802      	ldr	r0, [sp, #8]
 801882e:	f000 fd7b 	bl	8019328 <_Balloc>
 8018832:	0031      	movs	r1, r6
 8018834:	0004      	movs	r4, r0
 8018836:	6933      	ldr	r3, [r6, #16]
 8018838:	310c      	adds	r1, #12
 801883a:	1c9a      	adds	r2, r3, #2
 801883c:	0092      	lsls	r2, r2, #2
 801883e:	300c      	adds	r0, #12
 8018840:	f7fc fe8b 	bl	801555a <memcpy>
 8018844:	2201      	movs	r2, #1
 8018846:	0021      	movs	r1, r4
 8018848:	9802      	ldr	r0, [sp, #8]
 801884a:	f000 ff3f 	bl	80196cc <__lshift>
 801884e:	9609      	str	r6, [sp, #36]	; 0x24
 8018850:	0006      	movs	r6, r0
 8018852:	9b08      	ldr	r3, [sp, #32]
 8018854:	930a      	str	r3, [sp, #40]	; 0x28
 8018856:	9904      	ldr	r1, [sp, #16]
 8018858:	9803      	ldr	r0, [sp, #12]
 801885a:	f7ff fa8b 	bl	8017d74 <quorem>
 801885e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018860:	900d      	str	r0, [sp, #52]	; 0x34
 8018862:	0004      	movs	r4, r0
 8018864:	9803      	ldr	r0, [sp, #12]
 8018866:	f000 ff83 	bl	8019770 <__mcmp>
 801886a:	0032      	movs	r2, r6
 801886c:	9010      	str	r0, [sp, #64]	; 0x40
 801886e:	9904      	ldr	r1, [sp, #16]
 8018870:	9802      	ldr	r0, [sp, #8]
 8018872:	f000 ff97 	bl	80197a4 <__mdiff>
 8018876:	2301      	movs	r3, #1
 8018878:	930b      	str	r3, [sp, #44]	; 0x2c
 801887a:	68c3      	ldr	r3, [r0, #12]
 801887c:	3430      	adds	r4, #48	; 0x30
 801887e:	0005      	movs	r5, r0
 8018880:	2b00      	cmp	r3, #0
 8018882:	d104      	bne.n	801888e <_dtoa_r+0xa0e>
 8018884:	0001      	movs	r1, r0
 8018886:	9803      	ldr	r0, [sp, #12]
 8018888:	f000 ff72 	bl	8019770 <__mcmp>
 801888c:	900b      	str	r0, [sp, #44]	; 0x2c
 801888e:	0029      	movs	r1, r5
 8018890:	9802      	ldr	r0, [sp, #8]
 8018892:	f000 fd71 	bl	8019378 <_Bfree>
 8018896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018898:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801889a:	4313      	orrs	r3, r2
 801889c:	d10e      	bne.n	80188bc <_dtoa_r+0xa3c>
 801889e:	9a06      	ldr	r2, [sp, #24]
 80188a0:	3301      	adds	r3, #1
 80188a2:	4213      	tst	r3, r2
 80188a4:	d10a      	bne.n	80188bc <_dtoa_r+0xa3c>
 80188a6:	2c39      	cmp	r4, #57	; 0x39
 80188a8:	d026      	beq.n	80188f8 <_dtoa_r+0xa78>
 80188aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	dd01      	ble.n	80188b4 <_dtoa_r+0xa34>
 80188b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80188b2:	3431      	adds	r4, #49	; 0x31
 80188b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188b6:	1c5d      	adds	r5, r3, #1
 80188b8:	701c      	strb	r4, [r3, #0]
 80188ba:	e781      	b.n	80187c0 <_dtoa_r+0x940>
 80188bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80188be:	2b00      	cmp	r3, #0
 80188c0:	db07      	blt.n	80188d2 <_dtoa_r+0xa52>
 80188c2:	001d      	movs	r5, r3
 80188c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80188c6:	431d      	orrs	r5, r3
 80188c8:	d122      	bne.n	8018910 <_dtoa_r+0xa90>
 80188ca:	2301      	movs	r3, #1
 80188cc:	9a06      	ldr	r2, [sp, #24]
 80188ce:	4213      	tst	r3, r2
 80188d0:	d11e      	bne.n	8018910 <_dtoa_r+0xa90>
 80188d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	dded      	ble.n	80188b4 <_dtoa_r+0xa34>
 80188d8:	9903      	ldr	r1, [sp, #12]
 80188da:	2201      	movs	r2, #1
 80188dc:	9802      	ldr	r0, [sp, #8]
 80188de:	f000 fef5 	bl	80196cc <__lshift>
 80188e2:	9904      	ldr	r1, [sp, #16]
 80188e4:	9003      	str	r0, [sp, #12]
 80188e6:	f000 ff43 	bl	8019770 <__mcmp>
 80188ea:	2800      	cmp	r0, #0
 80188ec:	dc02      	bgt.n	80188f4 <_dtoa_r+0xa74>
 80188ee:	d1e1      	bne.n	80188b4 <_dtoa_r+0xa34>
 80188f0:	07e3      	lsls	r3, r4, #31
 80188f2:	d5df      	bpl.n	80188b4 <_dtoa_r+0xa34>
 80188f4:	2c39      	cmp	r4, #57	; 0x39
 80188f6:	d1db      	bne.n	80188b0 <_dtoa_r+0xa30>
 80188f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80188fc:	1c5d      	adds	r5, r3, #1
 80188fe:	2339      	movs	r3, #57	; 0x39
 8018900:	7013      	strb	r3, [r2, #0]
 8018902:	1e6b      	subs	r3, r5, #1
 8018904:	781a      	ldrb	r2, [r3, #0]
 8018906:	2a39      	cmp	r2, #57	; 0x39
 8018908:	d067      	beq.n	80189da <_dtoa_r+0xb5a>
 801890a:	3201      	adds	r2, #1
 801890c:	701a      	strb	r2, [r3, #0]
 801890e:	e757      	b.n	80187c0 <_dtoa_r+0x940>
 8018910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018912:	1c5d      	adds	r5, r3, #1
 8018914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018916:	2b00      	cmp	r3, #0
 8018918:	dd04      	ble.n	8018924 <_dtoa_r+0xaa4>
 801891a:	2c39      	cmp	r4, #57	; 0x39
 801891c:	d0ec      	beq.n	80188f8 <_dtoa_r+0xa78>
 801891e:	3401      	adds	r4, #1
 8018920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018922:	e7c9      	b.n	80188b8 <_dtoa_r+0xa38>
 8018924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018928:	701c      	strb	r4, [r3, #0]
 801892a:	9b08      	ldr	r3, [sp, #32]
 801892c:	1aeb      	subs	r3, r5, r3
 801892e:	4293      	cmp	r3, r2
 8018930:	d03e      	beq.n	80189b0 <_dtoa_r+0xb30>
 8018932:	2300      	movs	r3, #0
 8018934:	220a      	movs	r2, #10
 8018936:	9903      	ldr	r1, [sp, #12]
 8018938:	9802      	ldr	r0, [sp, #8]
 801893a:	f000 fd27 	bl	801938c <__multadd>
 801893e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018940:	9003      	str	r0, [sp, #12]
 8018942:	42b3      	cmp	r3, r6
 8018944:	d109      	bne.n	801895a <_dtoa_r+0xada>
 8018946:	2300      	movs	r3, #0
 8018948:	220a      	movs	r2, #10
 801894a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801894c:	9802      	ldr	r0, [sp, #8]
 801894e:	f000 fd1d 	bl	801938c <__multadd>
 8018952:	9009      	str	r0, [sp, #36]	; 0x24
 8018954:	0006      	movs	r6, r0
 8018956:	950a      	str	r5, [sp, #40]	; 0x28
 8018958:	e77d      	b.n	8018856 <_dtoa_r+0x9d6>
 801895a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801895c:	2300      	movs	r3, #0
 801895e:	220a      	movs	r2, #10
 8018960:	9802      	ldr	r0, [sp, #8]
 8018962:	f000 fd13 	bl	801938c <__multadd>
 8018966:	2300      	movs	r3, #0
 8018968:	9009      	str	r0, [sp, #36]	; 0x24
 801896a:	220a      	movs	r2, #10
 801896c:	0031      	movs	r1, r6
 801896e:	9802      	ldr	r0, [sp, #8]
 8018970:	f000 fd0c 	bl	801938c <__multadd>
 8018974:	e7ee      	b.n	8018954 <_dtoa_r+0xad4>
 8018976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018978:	930c      	str	r3, [sp, #48]	; 0x30
 801897a:	9b08      	ldr	r3, [sp, #32]
 801897c:	9306      	str	r3, [sp, #24]
 801897e:	9904      	ldr	r1, [sp, #16]
 8018980:	9803      	ldr	r0, [sp, #12]
 8018982:	f7ff f9f7 	bl	8017d74 <quorem>
 8018986:	9b06      	ldr	r3, [sp, #24]
 8018988:	3030      	adds	r0, #48	; 0x30
 801898a:	1c5d      	adds	r5, r3, #1
 801898c:	7018      	strb	r0, [r3, #0]
 801898e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018990:	9b08      	ldr	r3, [sp, #32]
 8018992:	0004      	movs	r4, r0
 8018994:	1aeb      	subs	r3, r5, r3
 8018996:	429a      	cmp	r2, r3
 8018998:	dd08      	ble.n	80189ac <_dtoa_r+0xb2c>
 801899a:	2300      	movs	r3, #0
 801899c:	220a      	movs	r2, #10
 801899e:	9903      	ldr	r1, [sp, #12]
 80189a0:	9802      	ldr	r0, [sp, #8]
 80189a2:	f000 fcf3 	bl	801938c <__multadd>
 80189a6:	9506      	str	r5, [sp, #24]
 80189a8:	9003      	str	r0, [sp, #12]
 80189aa:	e7e8      	b.n	801897e <_dtoa_r+0xafe>
 80189ac:	2300      	movs	r3, #0
 80189ae:	9309      	str	r3, [sp, #36]	; 0x24
 80189b0:	9903      	ldr	r1, [sp, #12]
 80189b2:	2201      	movs	r2, #1
 80189b4:	9802      	ldr	r0, [sp, #8]
 80189b6:	f000 fe89 	bl	80196cc <__lshift>
 80189ba:	9904      	ldr	r1, [sp, #16]
 80189bc:	9003      	str	r0, [sp, #12]
 80189be:	f000 fed7 	bl	8019770 <__mcmp>
 80189c2:	2800      	cmp	r0, #0
 80189c4:	dc9d      	bgt.n	8018902 <_dtoa_r+0xa82>
 80189c6:	d101      	bne.n	80189cc <_dtoa_r+0xb4c>
 80189c8:	07e3      	lsls	r3, r4, #31
 80189ca:	d49a      	bmi.n	8018902 <_dtoa_r+0xa82>
 80189cc:	1e6b      	subs	r3, r5, #1
 80189ce:	781a      	ldrb	r2, [r3, #0]
 80189d0:	2a30      	cmp	r2, #48	; 0x30
 80189d2:	d000      	beq.n	80189d6 <_dtoa_r+0xb56>
 80189d4:	e6f4      	b.n	80187c0 <_dtoa_r+0x940>
 80189d6:	001d      	movs	r5, r3
 80189d8:	e7f8      	b.n	80189cc <_dtoa_r+0xb4c>
 80189da:	9a08      	ldr	r2, [sp, #32]
 80189dc:	429a      	cmp	r2, r3
 80189de:	d103      	bne.n	80189e8 <_dtoa_r+0xb68>
 80189e0:	2331      	movs	r3, #49	; 0x31
 80189e2:	3701      	adds	r7, #1
 80189e4:	7013      	strb	r3, [r2, #0]
 80189e6:	e6eb      	b.n	80187c0 <_dtoa_r+0x940>
 80189e8:	001d      	movs	r5, r3
 80189ea:	e78a      	b.n	8018902 <_dtoa_r+0xa82>
 80189ec:	4b0b      	ldr	r3, [pc, #44]	; (8018a1c <_dtoa_r+0xb9c>)
 80189ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80189f0:	9308      	str	r3, [sp, #32]
 80189f2:	4b0b      	ldr	r3, [pc, #44]	; (8018a20 <_dtoa_r+0xba0>)
 80189f4:	2a00      	cmp	r2, #0
 80189f6:	d001      	beq.n	80189fc <_dtoa_r+0xb7c>
 80189f8:	f7ff fa75 	bl	8017ee6 <_dtoa_r+0x66>
 80189fc:	f7ff fa75 	bl	8017eea <_dtoa_r+0x6a>
 8018a00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018a02:	2b01      	cmp	r3, #1
 8018a04:	dc00      	bgt.n	8018a08 <_dtoa_r+0xb88>
 8018a06:	e621      	b.n	801864c <_dtoa_r+0x7cc>
 8018a08:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018a0a:	2001      	movs	r0, #1
 8018a0c:	e635      	b.n	801867a <_dtoa_r+0x7fa>
 8018a0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	dcb2      	bgt.n	801897a <_dtoa_r+0xafa>
 8018a14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018a16:	2b02      	cmp	r3, #2
 8018a18:	ddaf      	ble.n	801897a <_dtoa_r+0xafa>
 8018a1a:	e6bc      	b.n	8018796 <_dtoa_r+0x916>
 8018a1c:	0801d685 	.word	0x0801d685
 8018a20:	0801d68d 	.word	0x0801d68d

08018a24 <__errno>:
 8018a24:	4b01      	ldr	r3, [pc, #4]	; (8018a2c <__errno+0x8>)
 8018a26:	6818      	ldr	r0, [r3, #0]
 8018a28:	4770      	bx	lr
 8018a2a:	46c0      	nop			; (mov r8, r8)
 8018a2c:	200000d8 	.word	0x200000d8

08018a30 <__libc_fini_array>:
 8018a30:	b570      	push	{r4, r5, r6, lr}
 8018a32:	4d07      	ldr	r5, [pc, #28]	; (8018a50 <__libc_fini_array+0x20>)
 8018a34:	4c07      	ldr	r4, [pc, #28]	; (8018a54 <__libc_fini_array+0x24>)
 8018a36:	1b64      	subs	r4, r4, r5
 8018a38:	10a4      	asrs	r4, r4, #2
 8018a3a:	2c00      	cmp	r4, #0
 8018a3c:	d102      	bne.n	8018a44 <__libc_fini_array+0x14>
 8018a3e:	f001 f987 	bl	8019d50 <_fini>
 8018a42:	bd70      	pop	{r4, r5, r6, pc}
 8018a44:	3c01      	subs	r4, #1
 8018a46:	00a3      	lsls	r3, r4, #2
 8018a48:	58eb      	ldr	r3, [r5, r3]
 8018a4a:	4798      	blx	r3
 8018a4c:	e7f5      	b.n	8018a3a <__libc_fini_array+0xa>
 8018a4e:	46c0      	nop			; (mov r8, r8)
 8018a50:	0801d7a4 	.word	0x0801d7a4
 8018a54:	0801d7a8 	.word	0x0801d7a8

08018a58 <_malloc_trim_r>:
 8018a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a5a:	0005      	movs	r5, r0
 8018a5c:	2008      	movs	r0, #8
 8018a5e:	000c      	movs	r4, r1
 8018a60:	f7ff f95c 	bl	8017d1c <sysconf>
 8018a64:	0007      	movs	r7, r0
 8018a66:	0028      	movs	r0, r5
 8018a68:	f7fc fd88 	bl	801557c <__malloc_lock>
 8018a6c:	2203      	movs	r2, #3
 8018a6e:	4e21      	ldr	r6, [pc, #132]	; (8018af4 <_malloc_trim_r+0x9c>)
 8018a70:	0039      	movs	r1, r7
 8018a72:	68b3      	ldr	r3, [r6, #8]
 8018a74:	685b      	ldr	r3, [r3, #4]
 8018a76:	4393      	bics	r3, r2
 8018a78:	1b18      	subs	r0, r3, r4
 8018a7a:	3811      	subs	r0, #17
 8018a7c:	19c0      	adds	r0, r0, r7
 8018a7e:	9301      	str	r3, [sp, #4]
 8018a80:	f7e7 fb66 	bl	8000150 <__udivsi3>
 8018a84:	1e44      	subs	r4, r0, #1
 8018a86:	437c      	muls	r4, r7
 8018a88:	42a7      	cmp	r7, r4
 8018a8a:	dd04      	ble.n	8018a96 <_malloc_trim_r+0x3e>
 8018a8c:	0028      	movs	r0, r5
 8018a8e:	f7fc fd7d 	bl	801558c <__malloc_unlock>
 8018a92:	2000      	movs	r0, #0
 8018a94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018a96:	2100      	movs	r1, #0
 8018a98:	0028      	movs	r0, r5
 8018a9a:	f7fc ff4f 	bl	801593c <_sbrk_r>
 8018a9e:	68b3      	ldr	r3, [r6, #8]
 8018aa0:	9a01      	ldr	r2, [sp, #4]
 8018aa2:	189b      	adds	r3, r3, r2
 8018aa4:	4298      	cmp	r0, r3
 8018aa6:	d1f1      	bne.n	8018a8c <_malloc_trim_r+0x34>
 8018aa8:	4261      	negs	r1, r4
 8018aaa:	0028      	movs	r0, r5
 8018aac:	f7fc ff46 	bl	801593c <_sbrk_r>
 8018ab0:	1c43      	adds	r3, r0, #1
 8018ab2:	d110      	bne.n	8018ad6 <_malloc_trim_r+0x7e>
 8018ab4:	2100      	movs	r1, #0
 8018ab6:	0028      	movs	r0, r5
 8018ab8:	f7fc ff40 	bl	801593c <_sbrk_r>
 8018abc:	68b2      	ldr	r2, [r6, #8]
 8018abe:	1a81      	subs	r1, r0, r2
 8018ac0:	290f      	cmp	r1, #15
 8018ac2:	dde3      	ble.n	8018a8c <_malloc_trim_r+0x34>
 8018ac4:	4b0c      	ldr	r3, [pc, #48]	; (8018af8 <_malloc_trim_r+0xa0>)
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	1ac0      	subs	r0, r0, r3
 8018aca:	4b0c      	ldr	r3, [pc, #48]	; (8018afc <_malloc_trim_r+0xa4>)
 8018acc:	6018      	str	r0, [r3, #0]
 8018ace:	2301      	movs	r3, #1
 8018ad0:	430b      	orrs	r3, r1
 8018ad2:	6053      	str	r3, [r2, #4]
 8018ad4:	e7da      	b.n	8018a8c <_malloc_trim_r+0x34>
 8018ad6:	68b2      	ldr	r2, [r6, #8]
 8018ad8:	2601      	movs	r6, #1
 8018ada:	9b01      	ldr	r3, [sp, #4]
 8018adc:	0028      	movs	r0, r5
 8018ade:	1b1b      	subs	r3, r3, r4
 8018ae0:	4333      	orrs	r3, r6
 8018ae2:	6053      	str	r3, [r2, #4]
 8018ae4:	4b05      	ldr	r3, [pc, #20]	; (8018afc <_malloc_trim_r+0xa4>)
 8018ae6:	681a      	ldr	r2, [r3, #0]
 8018ae8:	1b14      	subs	r4, r2, r4
 8018aea:	601c      	str	r4, [r3, #0]
 8018aec:	f7fc fd4e 	bl	801558c <__malloc_unlock>
 8018af0:	0030      	movs	r0, r6
 8018af2:	e7cf      	b.n	8018a94 <_malloc_trim_r+0x3c>
 8018af4:	20000674 	.word	0x20000674
 8018af8:	20000a7c 	.word	0x20000a7c
 8018afc:	20006f90 	.word	0x20006f90

08018b00 <_free_r>:
 8018b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b02:	1e0d      	subs	r5, r1, #0
 8018b04:	9001      	str	r0, [sp, #4]
 8018b06:	d02d      	beq.n	8018b64 <_free_r+0x64>
 8018b08:	f7fc fd38 	bl	801557c <__malloc_lock>
 8018b0c:	2301      	movs	r3, #1
 8018b0e:	0029      	movs	r1, r5
 8018b10:	469c      	mov	ip, r3
 8018b12:	3908      	subs	r1, #8
 8018b14:	684f      	ldr	r7, [r1, #4]
 8018b16:	4662      	mov	r2, ip
 8018b18:	003b      	movs	r3, r7
 8018b1a:	4666      	mov	r6, ip
 8018b1c:	4393      	bics	r3, r2
 8018b1e:	18c8      	adds	r0, r1, r3
 8018b20:	6845      	ldr	r5, [r0, #4]
 8018b22:	3202      	adds	r2, #2
 8018b24:	4395      	bics	r5, r2
 8018b26:	4a4a      	ldr	r2, [pc, #296]	; (8018c50 <_free_r+0x150>)
 8018b28:	4037      	ands	r7, r6
 8018b2a:	6896      	ldr	r6, [r2, #8]
 8018b2c:	4286      	cmp	r6, r0
 8018b2e:	d11a      	bne.n	8018b66 <_free_r+0x66>
 8018b30:	195b      	adds	r3, r3, r5
 8018b32:	2f00      	cmp	r7, #0
 8018b34:	d106      	bne.n	8018b44 <_free_r+0x44>
 8018b36:	6808      	ldr	r0, [r1, #0]
 8018b38:	1a09      	subs	r1, r1, r0
 8018b3a:	688d      	ldr	r5, [r1, #8]
 8018b3c:	181b      	adds	r3, r3, r0
 8018b3e:	68c8      	ldr	r0, [r1, #12]
 8018b40:	60e8      	str	r0, [r5, #12]
 8018b42:	6085      	str	r5, [r0, #8]
 8018b44:	2001      	movs	r0, #1
 8018b46:	4318      	orrs	r0, r3
 8018b48:	6048      	str	r0, [r1, #4]
 8018b4a:	6091      	str	r1, [r2, #8]
 8018b4c:	4a41      	ldr	r2, [pc, #260]	; (8018c54 <_free_r+0x154>)
 8018b4e:	6812      	ldr	r2, [r2, #0]
 8018b50:	429a      	cmp	r2, r3
 8018b52:	d804      	bhi.n	8018b5e <_free_r+0x5e>
 8018b54:	4b40      	ldr	r3, [pc, #256]	; (8018c58 <_free_r+0x158>)
 8018b56:	9801      	ldr	r0, [sp, #4]
 8018b58:	6819      	ldr	r1, [r3, #0]
 8018b5a:	f7ff ff7d 	bl	8018a58 <_malloc_trim_r>
 8018b5e:	9801      	ldr	r0, [sp, #4]
 8018b60:	f7fc fd14 	bl	801558c <__malloc_unlock>
 8018b64:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8018b66:	2600      	movs	r6, #0
 8018b68:	6045      	str	r5, [r0, #4]
 8018b6a:	42b7      	cmp	r7, r6
 8018b6c:	d109      	bne.n	8018b82 <_free_r+0x82>
 8018b6e:	680f      	ldr	r7, [r1, #0]
 8018b70:	4c3a      	ldr	r4, [pc, #232]	; (8018c5c <_free_r+0x15c>)
 8018b72:	1bc9      	subs	r1, r1, r7
 8018b74:	19db      	adds	r3, r3, r7
 8018b76:	688f      	ldr	r7, [r1, #8]
 8018b78:	42a7      	cmp	r7, r4
 8018b7a:	d02b      	beq.n	8018bd4 <_free_r+0xd4>
 8018b7c:	68cc      	ldr	r4, [r1, #12]
 8018b7e:	60fc      	str	r4, [r7, #12]
 8018b80:	60a7      	str	r7, [r4, #8]
 8018b82:	1947      	adds	r7, r0, r5
 8018b84:	687c      	ldr	r4, [r7, #4]
 8018b86:	2701      	movs	r7, #1
 8018b88:	423c      	tst	r4, r7
 8018b8a:	d10b      	bne.n	8018ba4 <_free_r+0xa4>
 8018b8c:	195b      	adds	r3, r3, r5
 8018b8e:	6885      	ldr	r5, [r0, #8]
 8018b90:	2e00      	cmp	r6, #0
 8018b92:	d121      	bne.n	8018bd8 <_free_r+0xd8>
 8018b94:	4c31      	ldr	r4, [pc, #196]	; (8018c5c <_free_r+0x15c>)
 8018b96:	42a5      	cmp	r5, r4
 8018b98:	d11e      	bne.n	8018bd8 <_free_r+0xd8>
 8018b9a:	003e      	movs	r6, r7
 8018b9c:	6151      	str	r1, [r2, #20]
 8018b9e:	6111      	str	r1, [r2, #16]
 8018ba0:	60cd      	str	r5, [r1, #12]
 8018ba2:	608d      	str	r5, [r1, #8]
 8018ba4:	2001      	movs	r0, #1
 8018ba6:	0005      	movs	r5, r0
 8018ba8:	431d      	orrs	r5, r3
 8018baa:	604d      	str	r5, [r1, #4]
 8018bac:	50cb      	str	r3, [r1, r3]
 8018bae:	2e00      	cmp	r6, #0
 8018bb0:	d1d5      	bne.n	8018b5e <_free_r+0x5e>
 8018bb2:	4d2b      	ldr	r5, [pc, #172]	; (8018c60 <_free_r+0x160>)
 8018bb4:	42ab      	cmp	r3, r5
 8018bb6:	d813      	bhi.n	8018be0 <_free_r+0xe0>
 8018bb8:	08db      	lsrs	r3, r3, #3
 8018bba:	109d      	asrs	r5, r3, #2
 8018bbc:	40a8      	lsls	r0, r5
 8018bbe:	6854      	ldr	r4, [r2, #4]
 8018bc0:	00db      	lsls	r3, r3, #3
 8018bc2:	4320      	orrs	r0, r4
 8018bc4:	6050      	str	r0, [r2, #4]
 8018bc6:	189a      	adds	r2, r3, r2
 8018bc8:	6893      	ldr	r3, [r2, #8]
 8018bca:	60ca      	str	r2, [r1, #12]
 8018bcc:	608b      	str	r3, [r1, #8]
 8018bce:	6091      	str	r1, [r2, #8]
 8018bd0:	60d9      	str	r1, [r3, #12]
 8018bd2:	e7c4      	b.n	8018b5e <_free_r+0x5e>
 8018bd4:	4666      	mov	r6, ip
 8018bd6:	e7d4      	b.n	8018b82 <_free_r+0x82>
 8018bd8:	68c0      	ldr	r0, [r0, #12]
 8018bda:	60e8      	str	r0, [r5, #12]
 8018bdc:	6085      	str	r5, [r0, #8]
 8018bde:	e7e1      	b.n	8018ba4 <_free_r+0xa4>
 8018be0:	0a5d      	lsrs	r5, r3, #9
 8018be2:	2d04      	cmp	r5, #4
 8018be4:	d812      	bhi.n	8018c0c <_free_r+0x10c>
 8018be6:	0998      	lsrs	r0, r3, #6
 8018be8:	3038      	adds	r0, #56	; 0x38
 8018bea:	00c6      	lsls	r6, r0, #3
 8018bec:	18b6      	adds	r6, r6, r2
 8018bee:	68b5      	ldr	r5, [r6, #8]
 8018bf0:	2703      	movs	r7, #3
 8018bf2:	42ae      	cmp	r6, r5
 8018bf4:	d125      	bne.n	8018c42 <_free_r+0x142>
 8018bf6:	2301      	movs	r3, #1
 8018bf8:	1080      	asrs	r0, r0, #2
 8018bfa:	4083      	lsls	r3, r0
 8018bfc:	6850      	ldr	r0, [r2, #4]
 8018bfe:	4303      	orrs	r3, r0
 8018c00:	6053      	str	r3, [r2, #4]
 8018c02:	60ce      	str	r6, [r1, #12]
 8018c04:	608d      	str	r5, [r1, #8]
 8018c06:	60b1      	str	r1, [r6, #8]
 8018c08:	60e9      	str	r1, [r5, #12]
 8018c0a:	e7a8      	b.n	8018b5e <_free_r+0x5e>
 8018c0c:	2d14      	cmp	r5, #20
 8018c0e:	d802      	bhi.n	8018c16 <_free_r+0x116>
 8018c10:	0028      	movs	r0, r5
 8018c12:	305b      	adds	r0, #91	; 0x5b
 8018c14:	e7e9      	b.n	8018bea <_free_r+0xea>
 8018c16:	2d54      	cmp	r5, #84	; 0x54
 8018c18:	d802      	bhi.n	8018c20 <_free_r+0x120>
 8018c1a:	0b18      	lsrs	r0, r3, #12
 8018c1c:	306e      	adds	r0, #110	; 0x6e
 8018c1e:	e7e4      	b.n	8018bea <_free_r+0xea>
 8018c20:	20aa      	movs	r0, #170	; 0xaa
 8018c22:	0040      	lsls	r0, r0, #1
 8018c24:	4285      	cmp	r5, r0
 8018c26:	d802      	bhi.n	8018c2e <_free_r+0x12e>
 8018c28:	0bd8      	lsrs	r0, r3, #15
 8018c2a:	3077      	adds	r0, #119	; 0x77
 8018c2c:	e7dd      	b.n	8018bea <_free_r+0xea>
 8018c2e:	4e0d      	ldr	r6, [pc, #52]	; (8018c64 <_free_r+0x164>)
 8018c30:	207e      	movs	r0, #126	; 0x7e
 8018c32:	42b5      	cmp	r5, r6
 8018c34:	d8d9      	bhi.n	8018bea <_free_r+0xea>
 8018c36:	0c98      	lsrs	r0, r3, #18
 8018c38:	307c      	adds	r0, #124	; 0x7c
 8018c3a:	e7d6      	b.n	8018bea <_free_r+0xea>
 8018c3c:	68ad      	ldr	r5, [r5, #8]
 8018c3e:	42ae      	cmp	r6, r5
 8018c40:	d003      	beq.n	8018c4a <_free_r+0x14a>
 8018c42:	686a      	ldr	r2, [r5, #4]
 8018c44:	43ba      	bics	r2, r7
 8018c46:	429a      	cmp	r2, r3
 8018c48:	d8f8      	bhi.n	8018c3c <_free_r+0x13c>
 8018c4a:	68ee      	ldr	r6, [r5, #12]
 8018c4c:	e7d9      	b.n	8018c02 <_free_r+0x102>
 8018c4e:	46c0      	nop			; (mov r8, r8)
 8018c50:	20000674 	.word	0x20000674
 8018c54:	20000a80 	.word	0x20000a80
 8018c58:	20006fc0 	.word	0x20006fc0
 8018c5c:	2000067c 	.word	0x2000067c
 8018c60:	000001ff 	.word	0x000001ff
 8018c64:	00000554 	.word	0x00000554

08018c68 <rshift>:
 8018c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c6a:	0004      	movs	r4, r0
 8018c6c:	6905      	ldr	r5, [r0, #16]
 8018c6e:	3414      	adds	r4, #20
 8018c70:	114b      	asrs	r3, r1, #5
 8018c72:	0026      	movs	r6, r4
 8018c74:	429d      	cmp	r5, r3
 8018c76:	dd14      	ble.n	8018ca2 <rshift+0x3a>
 8018c78:	221f      	movs	r2, #31
 8018c7a:	00ad      	lsls	r5, r5, #2
 8018c7c:	009b      	lsls	r3, r3, #2
 8018c7e:	4011      	ands	r1, r2
 8018c80:	1965      	adds	r5, r4, r5
 8018c82:	18e3      	adds	r3, r4, r3
 8018c84:	0022      	movs	r2, r4
 8018c86:	2900      	cmp	r1, #0
 8018c88:	d01e      	beq.n	8018cc8 <rshift+0x60>
 8018c8a:	cb04      	ldmia	r3!, {r2}
 8018c8c:	2720      	movs	r7, #32
 8018c8e:	40ca      	lsrs	r2, r1
 8018c90:	46a4      	mov	ip, r4
 8018c92:	1a7f      	subs	r7, r7, r1
 8018c94:	4666      	mov	r6, ip
 8018c96:	429d      	cmp	r5, r3
 8018c98:	d80b      	bhi.n	8018cb2 <rshift+0x4a>
 8018c9a:	6032      	str	r2, [r6, #0]
 8018c9c:	2a00      	cmp	r2, #0
 8018c9e:	d000      	beq.n	8018ca2 <rshift+0x3a>
 8018ca0:	3604      	adds	r6, #4
 8018ca2:	1b33      	subs	r3, r6, r4
 8018ca4:	109b      	asrs	r3, r3, #2
 8018ca6:	6103      	str	r3, [r0, #16]
 8018ca8:	42a6      	cmp	r6, r4
 8018caa:	d101      	bne.n	8018cb0 <rshift+0x48>
 8018cac:	2300      	movs	r3, #0
 8018cae:	6143      	str	r3, [r0, #20]
 8018cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cb2:	681e      	ldr	r6, [r3, #0]
 8018cb4:	40be      	lsls	r6, r7
 8018cb6:	4332      	orrs	r2, r6
 8018cb8:	4666      	mov	r6, ip
 8018cba:	c604      	stmia	r6!, {r2}
 8018cbc:	cb04      	ldmia	r3!, {r2}
 8018cbe:	46b4      	mov	ip, r6
 8018cc0:	40ca      	lsrs	r2, r1
 8018cc2:	e7e7      	b.n	8018c94 <rshift+0x2c>
 8018cc4:	cb02      	ldmia	r3!, {r1}
 8018cc6:	c202      	stmia	r2!, {r1}
 8018cc8:	0016      	movs	r6, r2
 8018cca:	429d      	cmp	r5, r3
 8018ccc:	d8fa      	bhi.n	8018cc4 <rshift+0x5c>
 8018cce:	e7e8      	b.n	8018ca2 <rshift+0x3a>

08018cd0 <__hexdig_fun>:
 8018cd0:	0003      	movs	r3, r0
 8018cd2:	3b30      	subs	r3, #48	; 0x30
 8018cd4:	2b09      	cmp	r3, #9
 8018cd6:	d803      	bhi.n	8018ce0 <__hexdig_fun+0x10>
 8018cd8:	3820      	subs	r0, #32
 8018cda:	b2c3      	uxtb	r3, r0
 8018cdc:	0018      	movs	r0, r3
 8018cde:	4770      	bx	lr
 8018ce0:	0003      	movs	r3, r0
 8018ce2:	3b61      	subs	r3, #97	; 0x61
 8018ce4:	2b05      	cmp	r3, #5
 8018ce6:	d801      	bhi.n	8018cec <__hexdig_fun+0x1c>
 8018ce8:	3847      	subs	r0, #71	; 0x47
 8018cea:	e7f6      	b.n	8018cda <__hexdig_fun+0xa>
 8018cec:	0002      	movs	r2, r0
 8018cee:	3a41      	subs	r2, #65	; 0x41
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	2a05      	cmp	r2, #5
 8018cf4:	d8f2      	bhi.n	8018cdc <__hexdig_fun+0xc>
 8018cf6:	3827      	subs	r0, #39	; 0x27
 8018cf8:	e7ef      	b.n	8018cda <__hexdig_fun+0xa>

08018cfa <__gethex>:
 8018cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cfc:	b08d      	sub	sp, #52	; 0x34
 8018cfe:	9005      	str	r0, [sp, #20]
 8018d00:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018d02:	9109      	str	r1, [sp, #36]	; 0x24
 8018d04:	9202      	str	r2, [sp, #8]
 8018d06:	930a      	str	r3, [sp, #40]	; 0x28
 8018d08:	f000 fadf 	bl	80192ca <__localeconv_l>
 8018d0c:	6803      	ldr	r3, [r0, #0]
 8018d0e:	0018      	movs	r0, r3
 8018d10:	9307      	str	r3, [sp, #28]
 8018d12:	f7e7 fa01 	bl	8000118 <strlen>
 8018d16:	2202      	movs	r2, #2
 8018d18:	9b07      	ldr	r3, [sp, #28]
 8018d1a:	4252      	negs	r2, r2
 8018d1c:	181b      	adds	r3, r3, r0
 8018d1e:	3b01      	subs	r3, #1
 8018d20:	781b      	ldrb	r3, [r3, #0]
 8018d22:	9004      	str	r0, [sp, #16]
 8018d24:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d28:	6819      	ldr	r1, [r3, #0]
 8018d2a:	1c8b      	adds	r3, r1, #2
 8018d2c:	1a52      	subs	r2, r2, r1
 8018d2e:	18d1      	adds	r1, r2, r3
 8018d30:	9301      	str	r3, [sp, #4]
 8018d32:	9108      	str	r1, [sp, #32]
 8018d34:	9901      	ldr	r1, [sp, #4]
 8018d36:	3301      	adds	r3, #1
 8018d38:	7808      	ldrb	r0, [r1, #0]
 8018d3a:	2830      	cmp	r0, #48	; 0x30
 8018d3c:	d0f7      	beq.n	8018d2e <__gethex+0x34>
 8018d3e:	f7ff ffc7 	bl	8018cd0 <__hexdig_fun>
 8018d42:	1e07      	subs	r7, r0, #0
 8018d44:	d000      	beq.n	8018d48 <__gethex+0x4e>
 8018d46:	e06f      	b.n	8018e28 <__gethex+0x12e>
 8018d48:	9a04      	ldr	r2, [sp, #16]
 8018d4a:	9907      	ldr	r1, [sp, #28]
 8018d4c:	9801      	ldr	r0, [sp, #4]
 8018d4e:	f7fc fe4b 	bl	80159e8 <strncmp>
 8018d52:	2800      	cmp	r0, #0
 8018d54:	d000      	beq.n	8018d58 <__gethex+0x5e>
 8018d56:	e06d      	b.n	8018e34 <__gethex+0x13a>
 8018d58:	9b01      	ldr	r3, [sp, #4]
 8018d5a:	9a04      	ldr	r2, [sp, #16]
 8018d5c:	189c      	adds	r4, r3, r2
 8018d5e:	7820      	ldrb	r0, [r4, #0]
 8018d60:	f7ff ffb6 	bl	8018cd0 <__hexdig_fun>
 8018d64:	2800      	cmp	r0, #0
 8018d66:	d069      	beq.n	8018e3c <__gethex+0x142>
 8018d68:	9401      	str	r4, [sp, #4]
 8018d6a:	9b01      	ldr	r3, [sp, #4]
 8018d6c:	7818      	ldrb	r0, [r3, #0]
 8018d6e:	2830      	cmp	r0, #48	; 0x30
 8018d70:	d009      	beq.n	8018d86 <__gethex+0x8c>
 8018d72:	f7ff ffad 	bl	8018cd0 <__hexdig_fun>
 8018d76:	4243      	negs	r3, r0
 8018d78:	4143      	adcs	r3, r0
 8018d7a:	9303      	str	r3, [sp, #12]
 8018d7c:	2301      	movs	r3, #1
 8018d7e:	0026      	movs	r6, r4
 8018d80:	9308      	str	r3, [sp, #32]
 8018d82:	9c01      	ldr	r4, [sp, #4]
 8018d84:	e004      	b.n	8018d90 <__gethex+0x96>
 8018d86:	9b01      	ldr	r3, [sp, #4]
 8018d88:	3301      	adds	r3, #1
 8018d8a:	9301      	str	r3, [sp, #4]
 8018d8c:	e7ed      	b.n	8018d6a <__gethex+0x70>
 8018d8e:	3401      	adds	r4, #1
 8018d90:	7820      	ldrb	r0, [r4, #0]
 8018d92:	f7ff ff9d 	bl	8018cd0 <__hexdig_fun>
 8018d96:	2800      	cmp	r0, #0
 8018d98:	d1f9      	bne.n	8018d8e <__gethex+0x94>
 8018d9a:	9a04      	ldr	r2, [sp, #16]
 8018d9c:	9907      	ldr	r1, [sp, #28]
 8018d9e:	0020      	movs	r0, r4
 8018da0:	f7fc fe22 	bl	80159e8 <strncmp>
 8018da4:	2800      	cmp	r0, #0
 8018da6:	d109      	bne.n	8018dbc <__gethex+0xc2>
 8018da8:	2e00      	cmp	r6, #0
 8018daa:	d10a      	bne.n	8018dc2 <__gethex+0xc8>
 8018dac:	9b04      	ldr	r3, [sp, #16]
 8018dae:	18e4      	adds	r4, r4, r3
 8018db0:	0026      	movs	r6, r4
 8018db2:	7820      	ldrb	r0, [r4, #0]
 8018db4:	f7ff ff8c 	bl	8018cd0 <__hexdig_fun>
 8018db8:	2800      	cmp	r0, #0
 8018dba:	d139      	bne.n	8018e30 <__gethex+0x136>
 8018dbc:	2700      	movs	r7, #0
 8018dbe:	42be      	cmp	r6, r7
 8018dc0:	d001      	beq.n	8018dc6 <__gethex+0xcc>
 8018dc2:	1b37      	subs	r7, r6, r4
 8018dc4:	00bf      	lsls	r7, r7, #2
 8018dc6:	7823      	ldrb	r3, [r4, #0]
 8018dc8:	2b50      	cmp	r3, #80	; 0x50
 8018dca:	d001      	beq.n	8018dd0 <__gethex+0xd6>
 8018dcc:	2b70      	cmp	r3, #112	; 0x70
 8018dce:	d142      	bne.n	8018e56 <__gethex+0x15c>
 8018dd0:	7863      	ldrb	r3, [r4, #1]
 8018dd2:	2b2b      	cmp	r3, #43	; 0x2b
 8018dd4:	d034      	beq.n	8018e40 <__gethex+0x146>
 8018dd6:	2b2d      	cmp	r3, #45	; 0x2d
 8018dd8:	d036      	beq.n	8018e48 <__gethex+0x14e>
 8018dda:	2300      	movs	r3, #0
 8018ddc:	1c66      	adds	r6, r4, #1
 8018dde:	9306      	str	r3, [sp, #24]
 8018de0:	7830      	ldrb	r0, [r6, #0]
 8018de2:	f7ff ff75 	bl	8018cd0 <__hexdig_fun>
 8018de6:	1e43      	subs	r3, r0, #1
 8018de8:	b2db      	uxtb	r3, r3
 8018dea:	2b18      	cmp	r3, #24
 8018dec:	d833      	bhi.n	8018e56 <__gethex+0x15c>
 8018dee:	3810      	subs	r0, #16
 8018df0:	0005      	movs	r5, r0
 8018df2:	3601      	adds	r6, #1
 8018df4:	7830      	ldrb	r0, [r6, #0]
 8018df6:	f7ff ff6b 	bl	8018cd0 <__hexdig_fun>
 8018dfa:	1e43      	subs	r3, r0, #1
 8018dfc:	b2db      	uxtb	r3, r3
 8018dfe:	2b18      	cmp	r3, #24
 8018e00:	d924      	bls.n	8018e4c <__gethex+0x152>
 8018e02:	9b06      	ldr	r3, [sp, #24]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d000      	beq.n	8018e0a <__gethex+0x110>
 8018e08:	426d      	negs	r5, r5
 8018e0a:	197f      	adds	r7, r7, r5
 8018e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e0e:	601e      	str	r6, [r3, #0]
 8018e10:	9b03      	ldr	r3, [sp, #12]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d021      	beq.n	8018e5a <__gethex+0x160>
 8018e16:	9b08      	ldr	r3, [sp, #32]
 8018e18:	2606      	movs	r6, #6
 8018e1a:	425a      	negs	r2, r3
 8018e1c:	4153      	adcs	r3, r2
 8018e1e:	425b      	negs	r3, r3
 8018e20:	401e      	ands	r6, r3
 8018e22:	0030      	movs	r0, r6
 8018e24:	b00d      	add	sp, #52	; 0x34
 8018e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e28:	2300      	movs	r3, #0
 8018e2a:	9303      	str	r3, [sp, #12]
 8018e2c:	001e      	movs	r6, r3
 8018e2e:	e7a8      	b.n	8018d82 <__gethex+0x88>
 8018e30:	3401      	adds	r4, #1
 8018e32:	e7be      	b.n	8018db2 <__gethex+0xb8>
 8018e34:	9c01      	ldr	r4, [sp, #4]
 8018e36:	2301      	movs	r3, #1
 8018e38:	9303      	str	r3, [sp, #12]
 8018e3a:	e7c4      	b.n	8018dc6 <__gethex+0xcc>
 8018e3c:	0007      	movs	r7, r0
 8018e3e:	e7fa      	b.n	8018e36 <__gethex+0x13c>
 8018e40:	2300      	movs	r3, #0
 8018e42:	9306      	str	r3, [sp, #24]
 8018e44:	1ca6      	adds	r6, r4, #2
 8018e46:	e7cb      	b.n	8018de0 <__gethex+0xe6>
 8018e48:	2301      	movs	r3, #1
 8018e4a:	e7fa      	b.n	8018e42 <__gethex+0x148>
 8018e4c:	230a      	movs	r3, #10
 8018e4e:	435d      	muls	r5, r3
 8018e50:	182d      	adds	r5, r5, r0
 8018e52:	3d10      	subs	r5, #16
 8018e54:	e7cd      	b.n	8018df2 <__gethex+0xf8>
 8018e56:	0026      	movs	r6, r4
 8018e58:	e7d8      	b.n	8018e0c <__gethex+0x112>
 8018e5a:	9b01      	ldr	r3, [sp, #4]
 8018e5c:	9903      	ldr	r1, [sp, #12]
 8018e5e:	1ae3      	subs	r3, r4, r3
 8018e60:	3b01      	subs	r3, #1
 8018e62:	2b07      	cmp	r3, #7
 8018e64:	dc47      	bgt.n	8018ef6 <__gethex+0x1fc>
 8018e66:	9805      	ldr	r0, [sp, #20]
 8018e68:	f000 fa5e 	bl	8019328 <_Balloc>
 8018e6c:	0003      	movs	r3, r0
 8018e6e:	3314      	adds	r3, #20
 8018e70:	9303      	str	r3, [sp, #12]
 8018e72:	9308      	str	r3, [sp, #32]
 8018e74:	2300      	movs	r3, #0
 8018e76:	0005      	movs	r5, r0
 8018e78:	001e      	movs	r6, r3
 8018e7a:	9306      	str	r3, [sp, #24]
 8018e7c:	9b01      	ldr	r3, [sp, #4]
 8018e7e:	42a3      	cmp	r3, r4
 8018e80:	d33c      	bcc.n	8018efc <__gethex+0x202>
 8018e82:	9c08      	ldr	r4, [sp, #32]
 8018e84:	9b03      	ldr	r3, [sp, #12]
 8018e86:	c440      	stmia	r4!, {r6}
 8018e88:	1ae4      	subs	r4, r4, r3
 8018e8a:	10a4      	asrs	r4, r4, #2
 8018e8c:	612c      	str	r4, [r5, #16]
 8018e8e:	0030      	movs	r0, r6
 8018e90:	f000 faf8 	bl	8019484 <__hi0bits>
 8018e94:	9b02      	ldr	r3, [sp, #8]
 8018e96:	0164      	lsls	r4, r4, #5
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	1a26      	subs	r6, r4, r0
 8018e9c:	9301      	str	r3, [sp, #4]
 8018e9e:	429e      	cmp	r6, r3
 8018ea0:	dd5f      	ble.n	8018f62 <__gethex+0x268>
 8018ea2:	1af6      	subs	r6, r6, r3
 8018ea4:	0031      	movs	r1, r6
 8018ea6:	0028      	movs	r0, r5
 8018ea8:	f000 fde3 	bl	8019a72 <__any_on>
 8018eac:	1e04      	subs	r4, r0, #0
 8018eae:	d00f      	beq.n	8018ed0 <__gethex+0x1d6>
 8018eb0:	2401      	movs	r4, #1
 8018eb2:	211f      	movs	r1, #31
 8018eb4:	0020      	movs	r0, r4
 8018eb6:	1e73      	subs	r3, r6, #1
 8018eb8:	4019      	ands	r1, r3
 8018eba:	4088      	lsls	r0, r1
 8018ebc:	0001      	movs	r1, r0
 8018ebe:	115a      	asrs	r2, r3, #5
 8018ec0:	9803      	ldr	r0, [sp, #12]
 8018ec2:	0092      	lsls	r2, r2, #2
 8018ec4:	5812      	ldr	r2, [r2, r0]
 8018ec6:	420a      	tst	r2, r1
 8018ec8:	d002      	beq.n	8018ed0 <__gethex+0x1d6>
 8018eca:	42a3      	cmp	r3, r4
 8018ecc:	dc41      	bgt.n	8018f52 <__gethex+0x258>
 8018ece:	2402      	movs	r4, #2
 8018ed0:	0031      	movs	r1, r6
 8018ed2:	0028      	movs	r0, r5
 8018ed4:	f7ff fec8 	bl	8018c68 <rshift>
 8018ed8:	19bf      	adds	r7, r7, r6
 8018eda:	9b02      	ldr	r3, [sp, #8]
 8018edc:	689b      	ldr	r3, [r3, #8]
 8018ede:	9304      	str	r3, [sp, #16]
 8018ee0:	42bb      	cmp	r3, r7
 8018ee2:	da4e      	bge.n	8018f82 <__gethex+0x288>
 8018ee4:	0029      	movs	r1, r5
 8018ee6:	9805      	ldr	r0, [sp, #20]
 8018ee8:	f000 fa46 	bl	8019378 <_Bfree>
 8018eec:	2300      	movs	r3, #0
 8018eee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018ef0:	26a3      	movs	r6, #163	; 0xa3
 8018ef2:	6013      	str	r3, [r2, #0]
 8018ef4:	e795      	b.n	8018e22 <__gethex+0x128>
 8018ef6:	3101      	adds	r1, #1
 8018ef8:	105b      	asrs	r3, r3, #1
 8018efa:	e7b2      	b.n	8018e62 <__gethex+0x168>
 8018efc:	1e63      	subs	r3, r4, #1
 8018efe:	9309      	str	r3, [sp, #36]	; 0x24
 8018f00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	4293      	cmp	r3, r2
 8018f06:	d015      	beq.n	8018f34 <__gethex+0x23a>
 8018f08:	9b06      	ldr	r3, [sp, #24]
 8018f0a:	2b20      	cmp	r3, #32
 8018f0c:	d105      	bne.n	8018f1a <__gethex+0x220>
 8018f0e:	9b08      	ldr	r3, [sp, #32]
 8018f10:	601e      	str	r6, [r3, #0]
 8018f12:	2600      	movs	r6, #0
 8018f14:	3304      	adds	r3, #4
 8018f16:	9308      	str	r3, [sp, #32]
 8018f18:	9606      	str	r6, [sp, #24]
 8018f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f1c:	7818      	ldrb	r0, [r3, #0]
 8018f1e:	f7ff fed7 	bl	8018cd0 <__hexdig_fun>
 8018f22:	230f      	movs	r3, #15
 8018f24:	4018      	ands	r0, r3
 8018f26:	9b06      	ldr	r3, [sp, #24]
 8018f28:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018f2a:	4098      	lsls	r0, r3
 8018f2c:	3304      	adds	r3, #4
 8018f2e:	4306      	orrs	r6, r0
 8018f30:	9306      	str	r3, [sp, #24]
 8018f32:	e7a3      	b.n	8018e7c <__gethex+0x182>
 8018f34:	2301      	movs	r3, #1
 8018f36:	9a04      	ldr	r2, [sp, #16]
 8018f38:	1a9c      	subs	r4, r3, r2
 8018f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f3c:	191c      	adds	r4, r3, r4
 8018f3e:	9b01      	ldr	r3, [sp, #4]
 8018f40:	429c      	cmp	r4, r3
 8018f42:	d3e1      	bcc.n	8018f08 <__gethex+0x20e>
 8018f44:	9907      	ldr	r1, [sp, #28]
 8018f46:	0020      	movs	r0, r4
 8018f48:	f7fc fd4e 	bl	80159e8 <strncmp>
 8018f4c:	2800      	cmp	r0, #0
 8018f4e:	d1db      	bne.n	8018f08 <__gethex+0x20e>
 8018f50:	e794      	b.n	8018e7c <__gethex+0x182>
 8018f52:	1eb1      	subs	r1, r6, #2
 8018f54:	0028      	movs	r0, r5
 8018f56:	f000 fd8c 	bl	8019a72 <__any_on>
 8018f5a:	2800      	cmp	r0, #0
 8018f5c:	d0b7      	beq.n	8018ece <__gethex+0x1d4>
 8018f5e:	2403      	movs	r4, #3
 8018f60:	e7b6      	b.n	8018ed0 <__gethex+0x1d6>
 8018f62:	9b01      	ldr	r3, [sp, #4]
 8018f64:	2400      	movs	r4, #0
 8018f66:	429e      	cmp	r6, r3
 8018f68:	dab7      	bge.n	8018eda <__gethex+0x1e0>
 8018f6a:	1b9e      	subs	r6, r3, r6
 8018f6c:	0029      	movs	r1, r5
 8018f6e:	0032      	movs	r2, r6
 8018f70:	9805      	ldr	r0, [sp, #20]
 8018f72:	f000 fbab 	bl	80196cc <__lshift>
 8018f76:	0003      	movs	r3, r0
 8018f78:	3314      	adds	r3, #20
 8018f7a:	0005      	movs	r5, r0
 8018f7c:	1bbf      	subs	r7, r7, r6
 8018f7e:	9303      	str	r3, [sp, #12]
 8018f80:	e7ab      	b.n	8018eda <__gethex+0x1e0>
 8018f82:	9b02      	ldr	r3, [sp, #8]
 8018f84:	685e      	ldr	r6, [r3, #4]
 8018f86:	42be      	cmp	r6, r7
 8018f88:	dd6b      	ble.n	8019062 <__gethex+0x368>
 8018f8a:	9b01      	ldr	r3, [sp, #4]
 8018f8c:	1bf6      	subs	r6, r6, r7
 8018f8e:	42b3      	cmp	r3, r6
 8018f90:	dc32      	bgt.n	8018ff8 <__gethex+0x2fe>
 8018f92:	9b02      	ldr	r3, [sp, #8]
 8018f94:	68db      	ldr	r3, [r3, #12]
 8018f96:	2b02      	cmp	r3, #2
 8018f98:	d026      	beq.n	8018fe8 <__gethex+0x2ee>
 8018f9a:	2b03      	cmp	r3, #3
 8018f9c:	d028      	beq.n	8018ff0 <__gethex+0x2f6>
 8018f9e:	2b01      	cmp	r3, #1
 8018fa0:	d119      	bne.n	8018fd6 <__gethex+0x2dc>
 8018fa2:	9b01      	ldr	r3, [sp, #4]
 8018fa4:	42b3      	cmp	r3, r6
 8018fa6:	d116      	bne.n	8018fd6 <__gethex+0x2dc>
 8018fa8:	2b01      	cmp	r3, #1
 8018faa:	dc0d      	bgt.n	8018fc8 <__gethex+0x2ce>
 8018fac:	9b02      	ldr	r3, [sp, #8]
 8018fae:	2662      	movs	r6, #98	; 0x62
 8018fb0:	685b      	ldr	r3, [r3, #4]
 8018fb2:	9301      	str	r3, [sp, #4]
 8018fb4:	9a01      	ldr	r2, [sp, #4]
 8018fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018fb8:	601a      	str	r2, [r3, #0]
 8018fba:	2301      	movs	r3, #1
 8018fbc:	9a03      	ldr	r2, [sp, #12]
 8018fbe:	612b      	str	r3, [r5, #16]
 8018fc0:	6013      	str	r3, [r2, #0]
 8018fc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018fc4:	601d      	str	r5, [r3, #0]
 8018fc6:	e72c      	b.n	8018e22 <__gethex+0x128>
 8018fc8:	9901      	ldr	r1, [sp, #4]
 8018fca:	0028      	movs	r0, r5
 8018fcc:	3901      	subs	r1, #1
 8018fce:	f000 fd50 	bl	8019a72 <__any_on>
 8018fd2:	2800      	cmp	r0, #0
 8018fd4:	d1ea      	bne.n	8018fac <__gethex+0x2b2>
 8018fd6:	0029      	movs	r1, r5
 8018fd8:	9805      	ldr	r0, [sp, #20]
 8018fda:	f000 f9cd 	bl	8019378 <_Bfree>
 8018fde:	2300      	movs	r3, #0
 8018fe0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018fe2:	2650      	movs	r6, #80	; 0x50
 8018fe4:	6013      	str	r3, [r2, #0]
 8018fe6:	e71c      	b.n	8018e22 <__gethex+0x128>
 8018fe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d0de      	beq.n	8018fac <__gethex+0x2b2>
 8018fee:	e7f2      	b.n	8018fd6 <__gethex+0x2dc>
 8018ff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d1da      	bne.n	8018fac <__gethex+0x2b2>
 8018ff6:	e7ee      	b.n	8018fd6 <__gethex+0x2dc>
 8018ff8:	1e77      	subs	r7, r6, #1
 8018ffa:	2c00      	cmp	r4, #0
 8018ffc:	d12f      	bne.n	801905e <__gethex+0x364>
 8018ffe:	2f00      	cmp	r7, #0
 8019000:	d004      	beq.n	801900c <__gethex+0x312>
 8019002:	0039      	movs	r1, r7
 8019004:	0028      	movs	r0, r5
 8019006:	f000 fd34 	bl	8019a72 <__any_on>
 801900a:	0004      	movs	r4, r0
 801900c:	231f      	movs	r3, #31
 801900e:	117a      	asrs	r2, r7, #5
 8019010:	401f      	ands	r7, r3
 8019012:	3b1e      	subs	r3, #30
 8019014:	40bb      	lsls	r3, r7
 8019016:	9903      	ldr	r1, [sp, #12]
 8019018:	0092      	lsls	r2, r2, #2
 801901a:	5852      	ldr	r2, [r2, r1]
 801901c:	421a      	tst	r2, r3
 801901e:	d001      	beq.n	8019024 <__gethex+0x32a>
 8019020:	2302      	movs	r3, #2
 8019022:	431c      	orrs	r4, r3
 8019024:	9b01      	ldr	r3, [sp, #4]
 8019026:	0031      	movs	r1, r6
 8019028:	1b9b      	subs	r3, r3, r6
 801902a:	2602      	movs	r6, #2
 801902c:	0028      	movs	r0, r5
 801902e:	9301      	str	r3, [sp, #4]
 8019030:	f7ff fe1a 	bl	8018c68 <rshift>
 8019034:	9b02      	ldr	r3, [sp, #8]
 8019036:	685f      	ldr	r7, [r3, #4]
 8019038:	2c00      	cmp	r4, #0
 801903a:	d040      	beq.n	80190be <__gethex+0x3c4>
 801903c:	9b02      	ldr	r3, [sp, #8]
 801903e:	68db      	ldr	r3, [r3, #12]
 8019040:	2b02      	cmp	r3, #2
 8019042:	d010      	beq.n	8019066 <__gethex+0x36c>
 8019044:	2b03      	cmp	r3, #3
 8019046:	d012      	beq.n	801906e <__gethex+0x374>
 8019048:	2b01      	cmp	r3, #1
 801904a:	d106      	bne.n	801905a <__gethex+0x360>
 801904c:	07a2      	lsls	r2, r4, #30
 801904e:	d504      	bpl.n	801905a <__gethex+0x360>
 8019050:	9a03      	ldr	r2, [sp, #12]
 8019052:	6812      	ldr	r2, [r2, #0]
 8019054:	4314      	orrs	r4, r2
 8019056:	421c      	tst	r4, r3
 8019058:	d10c      	bne.n	8019074 <__gethex+0x37a>
 801905a:	2310      	movs	r3, #16
 801905c:	e02e      	b.n	80190bc <__gethex+0x3c2>
 801905e:	2401      	movs	r4, #1
 8019060:	e7d4      	b.n	801900c <__gethex+0x312>
 8019062:	2601      	movs	r6, #1
 8019064:	e7e8      	b.n	8019038 <__gethex+0x33e>
 8019066:	2301      	movs	r3, #1
 8019068:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801906a:	1a9b      	subs	r3, r3, r2
 801906c:	9313      	str	r3, [sp, #76]	; 0x4c
 801906e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019070:	2b00      	cmp	r3, #0
 8019072:	d0f2      	beq.n	801905a <__gethex+0x360>
 8019074:	692c      	ldr	r4, [r5, #16]
 8019076:	00a3      	lsls	r3, r4, #2
 8019078:	9304      	str	r3, [sp, #16]
 801907a:	002b      	movs	r3, r5
 801907c:	00a2      	lsls	r2, r4, #2
 801907e:	3314      	adds	r3, #20
 8019080:	1899      	adds	r1, r3, r2
 8019082:	2200      	movs	r2, #0
 8019084:	4694      	mov	ip, r2
 8019086:	681a      	ldr	r2, [r3, #0]
 8019088:	1c50      	adds	r0, r2, #1
 801908a:	d01d      	beq.n	80190c8 <__gethex+0x3ce>
 801908c:	3201      	adds	r2, #1
 801908e:	601a      	str	r2, [r3, #0]
 8019090:	002b      	movs	r3, r5
 8019092:	3314      	adds	r3, #20
 8019094:	2e02      	cmp	r6, #2
 8019096:	d13a      	bne.n	801910e <__gethex+0x414>
 8019098:	9a02      	ldr	r2, [sp, #8]
 801909a:	9901      	ldr	r1, [sp, #4]
 801909c:	6812      	ldr	r2, [r2, #0]
 801909e:	3a01      	subs	r2, #1
 80190a0:	428a      	cmp	r2, r1
 80190a2:	d10a      	bne.n	80190ba <__gethex+0x3c0>
 80190a4:	114a      	asrs	r2, r1, #5
 80190a6:	211f      	movs	r1, #31
 80190a8:	9801      	ldr	r0, [sp, #4]
 80190aa:	0092      	lsls	r2, r2, #2
 80190ac:	4001      	ands	r1, r0
 80190ae:	2001      	movs	r0, #1
 80190b0:	0004      	movs	r4, r0
 80190b2:	408c      	lsls	r4, r1
 80190b4:	58d3      	ldr	r3, [r2, r3]
 80190b6:	4223      	tst	r3, r4
 80190b8:	d148      	bne.n	801914c <__gethex+0x452>
 80190ba:	2320      	movs	r3, #32
 80190bc:	431e      	orrs	r6, r3
 80190be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80190c0:	601d      	str	r5, [r3, #0]
 80190c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190c4:	601f      	str	r7, [r3, #0]
 80190c6:	e6ac      	b.n	8018e22 <__gethex+0x128>
 80190c8:	4662      	mov	r2, ip
 80190ca:	c304      	stmia	r3!, {r2}
 80190cc:	4299      	cmp	r1, r3
 80190ce:	d8da      	bhi.n	8019086 <__gethex+0x38c>
 80190d0:	68ab      	ldr	r3, [r5, #8]
 80190d2:	429c      	cmp	r4, r3
 80190d4:	db12      	blt.n	80190fc <__gethex+0x402>
 80190d6:	686b      	ldr	r3, [r5, #4]
 80190d8:	9805      	ldr	r0, [sp, #20]
 80190da:	1c59      	adds	r1, r3, #1
 80190dc:	f000 f924 	bl	8019328 <_Balloc>
 80190e0:	0029      	movs	r1, r5
 80190e2:	692b      	ldr	r3, [r5, #16]
 80190e4:	9003      	str	r0, [sp, #12]
 80190e6:	1c9a      	adds	r2, r3, #2
 80190e8:	0092      	lsls	r2, r2, #2
 80190ea:	310c      	adds	r1, #12
 80190ec:	300c      	adds	r0, #12
 80190ee:	f7fc fa34 	bl	801555a <memcpy>
 80190f2:	0029      	movs	r1, r5
 80190f4:	9805      	ldr	r0, [sp, #20]
 80190f6:	f000 f93f 	bl	8019378 <_Bfree>
 80190fa:	9d03      	ldr	r5, [sp, #12]
 80190fc:	692b      	ldr	r3, [r5, #16]
 80190fe:	1c5a      	adds	r2, r3, #1
 8019100:	612a      	str	r2, [r5, #16]
 8019102:	2201      	movs	r2, #1
 8019104:	3304      	adds	r3, #4
 8019106:	009b      	lsls	r3, r3, #2
 8019108:	18eb      	adds	r3, r5, r3
 801910a:	605a      	str	r2, [r3, #4]
 801910c:	e7c0      	b.n	8019090 <__gethex+0x396>
 801910e:	692a      	ldr	r2, [r5, #16]
 8019110:	42a2      	cmp	r2, r4
 8019112:	dd0a      	ble.n	801912a <__gethex+0x430>
 8019114:	2101      	movs	r1, #1
 8019116:	0028      	movs	r0, r5
 8019118:	f7ff fda6 	bl	8018c68 <rshift>
 801911c:	9b02      	ldr	r3, [sp, #8]
 801911e:	3701      	adds	r7, #1
 8019120:	689b      	ldr	r3, [r3, #8]
 8019122:	2601      	movs	r6, #1
 8019124:	42bb      	cmp	r3, r7
 8019126:	dac8      	bge.n	80190ba <__gethex+0x3c0>
 8019128:	e6dc      	b.n	8018ee4 <__gethex+0x1ea>
 801912a:	241f      	movs	r4, #31
 801912c:	9a01      	ldr	r2, [sp, #4]
 801912e:	2601      	movs	r6, #1
 8019130:	4022      	ands	r2, r4
 8019132:	1e14      	subs	r4, r2, #0
 8019134:	d0c1      	beq.n	80190ba <__gethex+0x3c0>
 8019136:	9a04      	ldr	r2, [sp, #16]
 8019138:	189b      	adds	r3, r3, r2
 801913a:	3b04      	subs	r3, #4
 801913c:	6818      	ldr	r0, [r3, #0]
 801913e:	f000 f9a1 	bl	8019484 <__hi0bits>
 8019142:	2120      	movs	r1, #32
 8019144:	1b0c      	subs	r4, r1, r4
 8019146:	42a0      	cmp	r0, r4
 8019148:	dbe4      	blt.n	8019114 <__gethex+0x41a>
 801914a:	e7b6      	b.n	80190ba <__gethex+0x3c0>
 801914c:	0006      	movs	r6, r0
 801914e:	e7b4      	b.n	80190ba <__gethex+0x3c0>

08019150 <L_shift>:
 8019150:	2308      	movs	r3, #8
 8019152:	b570      	push	{r4, r5, r6, lr}
 8019154:	2520      	movs	r5, #32
 8019156:	1a9a      	subs	r2, r3, r2
 8019158:	0092      	lsls	r2, r2, #2
 801915a:	1aad      	subs	r5, r5, r2
 801915c:	6843      	ldr	r3, [r0, #4]
 801915e:	6806      	ldr	r6, [r0, #0]
 8019160:	001c      	movs	r4, r3
 8019162:	40ac      	lsls	r4, r5
 8019164:	40d3      	lsrs	r3, r2
 8019166:	4334      	orrs	r4, r6
 8019168:	6004      	str	r4, [r0, #0]
 801916a:	6043      	str	r3, [r0, #4]
 801916c:	3004      	adds	r0, #4
 801916e:	4288      	cmp	r0, r1
 8019170:	d3f4      	bcc.n	801915c <L_shift+0xc>
 8019172:	bd70      	pop	{r4, r5, r6, pc}

08019174 <__match>:
 8019174:	b530      	push	{r4, r5, lr}
 8019176:	6803      	ldr	r3, [r0, #0]
 8019178:	780c      	ldrb	r4, [r1, #0]
 801917a:	3301      	adds	r3, #1
 801917c:	2c00      	cmp	r4, #0
 801917e:	d102      	bne.n	8019186 <__match+0x12>
 8019180:	6003      	str	r3, [r0, #0]
 8019182:	2001      	movs	r0, #1
 8019184:	bd30      	pop	{r4, r5, pc}
 8019186:	781a      	ldrb	r2, [r3, #0]
 8019188:	0015      	movs	r5, r2
 801918a:	3d41      	subs	r5, #65	; 0x41
 801918c:	2d19      	cmp	r5, #25
 801918e:	d800      	bhi.n	8019192 <__match+0x1e>
 8019190:	3220      	adds	r2, #32
 8019192:	3101      	adds	r1, #1
 8019194:	42a2      	cmp	r2, r4
 8019196:	d0ef      	beq.n	8019178 <__match+0x4>
 8019198:	2000      	movs	r0, #0
 801919a:	e7f3      	b.n	8019184 <__match+0x10>

0801919c <__hexnan>:
 801919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801919e:	b08b      	sub	sp, #44	; 0x2c
 80191a0:	9201      	str	r2, [sp, #4]
 80191a2:	680a      	ldr	r2, [r1, #0]
 80191a4:	9901      	ldr	r1, [sp, #4]
 80191a6:	1153      	asrs	r3, r2, #5
 80191a8:	009b      	lsls	r3, r3, #2
 80191aa:	18cb      	adds	r3, r1, r3
 80191ac:	9304      	str	r3, [sp, #16]
 80191ae:	231f      	movs	r3, #31
 80191b0:	401a      	ands	r2, r3
 80191b2:	9008      	str	r0, [sp, #32]
 80191b4:	9206      	str	r2, [sp, #24]
 80191b6:	d002      	beq.n	80191be <__hexnan+0x22>
 80191b8:	9b04      	ldr	r3, [sp, #16]
 80191ba:	3304      	adds	r3, #4
 80191bc:	9304      	str	r3, [sp, #16]
 80191be:	9b04      	ldr	r3, [sp, #16]
 80191c0:	2500      	movs	r5, #0
 80191c2:	1f1e      	subs	r6, r3, #4
 80191c4:	0037      	movs	r7, r6
 80191c6:	0034      	movs	r4, r6
 80191c8:	9b08      	ldr	r3, [sp, #32]
 80191ca:	6035      	str	r5, [r6, #0]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	9507      	str	r5, [sp, #28]
 80191d0:	9305      	str	r3, [sp, #20]
 80191d2:	9502      	str	r5, [sp, #8]
 80191d4:	9b05      	ldr	r3, [sp, #20]
 80191d6:	3301      	adds	r3, #1
 80191d8:	9309      	str	r3, [sp, #36]	; 0x24
 80191da:	9b05      	ldr	r3, [sp, #20]
 80191dc:	785b      	ldrb	r3, [r3, #1]
 80191de:	9303      	str	r3, [sp, #12]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d028      	beq.n	8019236 <__hexnan+0x9a>
 80191e4:	9803      	ldr	r0, [sp, #12]
 80191e6:	f7ff fd73 	bl	8018cd0 <__hexdig_fun>
 80191ea:	2800      	cmp	r0, #0
 80191ec:	d145      	bne.n	801927a <__hexnan+0xde>
 80191ee:	9b03      	ldr	r3, [sp, #12]
 80191f0:	2b20      	cmp	r3, #32
 80191f2:	d819      	bhi.n	8019228 <__hexnan+0x8c>
 80191f4:	9b02      	ldr	r3, [sp, #8]
 80191f6:	9a07      	ldr	r2, [sp, #28]
 80191f8:	4293      	cmp	r3, r2
 80191fa:	dd12      	ble.n	8019222 <__hexnan+0x86>
 80191fc:	42bc      	cmp	r4, r7
 80191fe:	d206      	bcs.n	801920e <__hexnan+0x72>
 8019200:	2d07      	cmp	r5, #7
 8019202:	dc04      	bgt.n	801920e <__hexnan+0x72>
 8019204:	002a      	movs	r2, r5
 8019206:	0039      	movs	r1, r7
 8019208:	0020      	movs	r0, r4
 801920a:	f7ff ffa1 	bl	8019150 <L_shift>
 801920e:	9b01      	ldr	r3, [sp, #4]
 8019210:	2508      	movs	r5, #8
 8019212:	429c      	cmp	r4, r3
 8019214:	d905      	bls.n	8019222 <__hexnan+0x86>
 8019216:	1f27      	subs	r7, r4, #4
 8019218:	2500      	movs	r5, #0
 801921a:	003c      	movs	r4, r7
 801921c:	9b02      	ldr	r3, [sp, #8]
 801921e:	603d      	str	r5, [r7, #0]
 8019220:	9307      	str	r3, [sp, #28]
 8019222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019224:	9305      	str	r3, [sp, #20]
 8019226:	e7d5      	b.n	80191d4 <__hexnan+0x38>
 8019228:	9b03      	ldr	r3, [sp, #12]
 801922a:	2b29      	cmp	r3, #41	; 0x29
 801922c:	d14a      	bne.n	80192c4 <__hexnan+0x128>
 801922e:	9b05      	ldr	r3, [sp, #20]
 8019230:	9a08      	ldr	r2, [sp, #32]
 8019232:	3302      	adds	r3, #2
 8019234:	6013      	str	r3, [r2, #0]
 8019236:	9b02      	ldr	r3, [sp, #8]
 8019238:	2b00      	cmp	r3, #0
 801923a:	d043      	beq.n	80192c4 <__hexnan+0x128>
 801923c:	42bc      	cmp	r4, r7
 801923e:	d206      	bcs.n	801924e <__hexnan+0xb2>
 8019240:	2d07      	cmp	r5, #7
 8019242:	dc04      	bgt.n	801924e <__hexnan+0xb2>
 8019244:	002a      	movs	r2, r5
 8019246:	0039      	movs	r1, r7
 8019248:	0020      	movs	r0, r4
 801924a:	f7ff ff81 	bl	8019150 <L_shift>
 801924e:	9b01      	ldr	r3, [sp, #4]
 8019250:	429c      	cmp	r4, r3
 8019252:	d926      	bls.n	80192a2 <__hexnan+0x106>
 8019254:	cc04      	ldmia	r4!, {r2}
 8019256:	601a      	str	r2, [r3, #0]
 8019258:	3304      	adds	r3, #4
 801925a:	42a6      	cmp	r6, r4
 801925c:	d2fa      	bcs.n	8019254 <__hexnan+0xb8>
 801925e:	2200      	movs	r2, #0
 8019260:	c304      	stmia	r3!, {r2}
 8019262:	429e      	cmp	r6, r3
 8019264:	d2fc      	bcs.n	8019260 <__hexnan+0xc4>
 8019266:	6833      	ldr	r3, [r6, #0]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d104      	bne.n	8019276 <__hexnan+0xda>
 801926c:	9b01      	ldr	r3, [sp, #4]
 801926e:	429e      	cmp	r6, r3
 8019270:	d126      	bne.n	80192c0 <__hexnan+0x124>
 8019272:	2301      	movs	r3, #1
 8019274:	6033      	str	r3, [r6, #0]
 8019276:	2005      	movs	r0, #5
 8019278:	e025      	b.n	80192c6 <__hexnan+0x12a>
 801927a:	9b02      	ldr	r3, [sp, #8]
 801927c:	3501      	adds	r5, #1
 801927e:	3301      	adds	r3, #1
 8019280:	9302      	str	r3, [sp, #8]
 8019282:	2d08      	cmp	r5, #8
 8019284:	dd06      	ble.n	8019294 <__hexnan+0xf8>
 8019286:	9b01      	ldr	r3, [sp, #4]
 8019288:	429c      	cmp	r4, r3
 801928a:	d9ca      	bls.n	8019222 <__hexnan+0x86>
 801928c:	2300      	movs	r3, #0
 801928e:	2501      	movs	r5, #1
 8019290:	3c04      	subs	r4, #4
 8019292:	6023      	str	r3, [r4, #0]
 8019294:	220f      	movs	r2, #15
 8019296:	6823      	ldr	r3, [r4, #0]
 8019298:	4010      	ands	r0, r2
 801929a:	011b      	lsls	r3, r3, #4
 801929c:	4318      	orrs	r0, r3
 801929e:	6020      	str	r0, [r4, #0]
 80192a0:	e7bf      	b.n	8019222 <__hexnan+0x86>
 80192a2:	9b06      	ldr	r3, [sp, #24]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d0de      	beq.n	8019266 <__hexnan+0xca>
 80192a8:	2120      	movs	r1, #32
 80192aa:	9a06      	ldr	r2, [sp, #24]
 80192ac:	9b04      	ldr	r3, [sp, #16]
 80192ae:	1a89      	subs	r1, r1, r2
 80192b0:	2201      	movs	r2, #1
 80192b2:	4252      	negs	r2, r2
 80192b4:	40ca      	lsrs	r2, r1
 80192b6:	3b04      	subs	r3, #4
 80192b8:	6819      	ldr	r1, [r3, #0]
 80192ba:	400a      	ands	r2, r1
 80192bc:	601a      	str	r2, [r3, #0]
 80192be:	e7d2      	b.n	8019266 <__hexnan+0xca>
 80192c0:	3e04      	subs	r6, #4
 80192c2:	e7d0      	b.n	8019266 <__hexnan+0xca>
 80192c4:	2004      	movs	r0, #4
 80192c6:	b00b      	add	sp, #44	; 0x2c
 80192c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080192ca <__localeconv_l>:
 80192ca:	30f0      	adds	r0, #240	; 0xf0
 80192cc:	4770      	bx	lr
	...

080192d0 <_localeconv_r>:
 80192d0:	4b03      	ldr	r3, [pc, #12]	; (80192e0 <_localeconv_r+0x10>)
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80192d6:	2800      	cmp	r0, #0
 80192d8:	d100      	bne.n	80192dc <_localeconv_r+0xc>
 80192da:	4802      	ldr	r0, [pc, #8]	; (80192e4 <_localeconv_r+0x14>)
 80192dc:	30f0      	adds	r0, #240	; 0xf0
 80192de:	4770      	bx	lr
 80192e0:	200000d8 	.word	0x200000d8
 80192e4:	20000508 	.word	0x20000508

080192e8 <__retarget_lock_acquire_recursive>:
 80192e8:	4770      	bx	lr

080192ea <__retarget_lock_release_recursive>:
 80192ea:	4770      	bx	lr

080192ec <memchr>:
 80192ec:	b2c9      	uxtb	r1, r1
 80192ee:	1882      	adds	r2, r0, r2
 80192f0:	4290      	cmp	r0, r2
 80192f2:	d101      	bne.n	80192f8 <memchr+0xc>
 80192f4:	2000      	movs	r0, #0
 80192f6:	4770      	bx	lr
 80192f8:	7803      	ldrb	r3, [r0, #0]
 80192fa:	428b      	cmp	r3, r1
 80192fc:	d0fb      	beq.n	80192f6 <memchr+0xa>
 80192fe:	3001      	adds	r0, #1
 8019300:	e7f6      	b.n	80192f0 <memchr+0x4>

08019302 <memmove>:
 8019302:	b510      	push	{r4, lr}
 8019304:	4288      	cmp	r0, r1
 8019306:	d902      	bls.n	801930e <memmove+0xc>
 8019308:	188b      	adds	r3, r1, r2
 801930a:	4298      	cmp	r0, r3
 801930c:	d303      	bcc.n	8019316 <memmove+0x14>
 801930e:	2300      	movs	r3, #0
 8019310:	e007      	b.n	8019322 <memmove+0x20>
 8019312:	5c8b      	ldrb	r3, [r1, r2]
 8019314:	5483      	strb	r3, [r0, r2]
 8019316:	3a01      	subs	r2, #1
 8019318:	d2fb      	bcs.n	8019312 <memmove+0x10>
 801931a:	bd10      	pop	{r4, pc}
 801931c:	5ccc      	ldrb	r4, [r1, r3]
 801931e:	54c4      	strb	r4, [r0, r3]
 8019320:	3301      	adds	r3, #1
 8019322:	429a      	cmp	r2, r3
 8019324:	d1fa      	bne.n	801931c <memmove+0x1a>
 8019326:	e7f8      	b.n	801931a <memmove+0x18>

08019328 <_Balloc>:
 8019328:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801932a:	b570      	push	{r4, r5, r6, lr}
 801932c:	0004      	movs	r4, r0
 801932e:	000d      	movs	r5, r1
 8019330:	2b00      	cmp	r3, #0
 8019332:	d012      	beq.n	801935a <_Balloc+0x32>
 8019334:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019336:	00ab      	lsls	r3, r5, #2
 8019338:	18d3      	adds	r3, r2, r3
 801933a:	6818      	ldr	r0, [r3, #0]
 801933c:	2800      	cmp	r0, #0
 801933e:	d115      	bne.n	801936c <_Balloc+0x44>
 8019340:	2101      	movs	r1, #1
 8019342:	000e      	movs	r6, r1
 8019344:	40ae      	lsls	r6, r5
 8019346:	1d72      	adds	r2, r6, #5
 8019348:	0092      	lsls	r2, r2, #2
 801934a:	0020      	movs	r0, r4
 801934c:	f000 fcbe 	bl	8019ccc <_calloc_r>
 8019350:	2800      	cmp	r0, #0
 8019352:	d009      	beq.n	8019368 <_Balloc+0x40>
 8019354:	6045      	str	r5, [r0, #4]
 8019356:	6086      	str	r6, [r0, #8]
 8019358:	e00a      	b.n	8019370 <_Balloc+0x48>
 801935a:	2221      	movs	r2, #33	; 0x21
 801935c:	2104      	movs	r1, #4
 801935e:	f000 fcb5 	bl	8019ccc <_calloc_r>
 8019362:	64e0      	str	r0, [r4, #76]	; 0x4c
 8019364:	2800      	cmp	r0, #0
 8019366:	d1e5      	bne.n	8019334 <_Balloc+0xc>
 8019368:	2000      	movs	r0, #0
 801936a:	bd70      	pop	{r4, r5, r6, pc}
 801936c:	6802      	ldr	r2, [r0, #0]
 801936e:	601a      	str	r2, [r3, #0]
 8019370:	2300      	movs	r3, #0
 8019372:	6103      	str	r3, [r0, #16]
 8019374:	60c3      	str	r3, [r0, #12]
 8019376:	e7f8      	b.n	801936a <_Balloc+0x42>

08019378 <_Bfree>:
 8019378:	2900      	cmp	r1, #0
 801937a:	d006      	beq.n	801938a <_Bfree+0x12>
 801937c:	684b      	ldr	r3, [r1, #4]
 801937e:	009a      	lsls	r2, r3, #2
 8019380:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8019382:	189b      	adds	r3, r3, r2
 8019384:	681a      	ldr	r2, [r3, #0]
 8019386:	600a      	str	r2, [r1, #0]
 8019388:	6019      	str	r1, [r3, #0]
 801938a:	4770      	bx	lr

0801938c <__multadd>:
 801938c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801938e:	001e      	movs	r6, r3
 8019390:	2314      	movs	r3, #20
 8019392:	469c      	mov	ip, r3
 8019394:	0007      	movs	r7, r0
 8019396:	000c      	movs	r4, r1
 8019398:	2000      	movs	r0, #0
 801939a:	690d      	ldr	r5, [r1, #16]
 801939c:	448c      	add	ip, r1
 801939e:	4663      	mov	r3, ip
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	3001      	adds	r0, #1
 80193a4:	b299      	uxth	r1, r3
 80193a6:	4663      	mov	r3, ip
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	4351      	muls	r1, r2
 80193ac:	0c1b      	lsrs	r3, r3, #16
 80193ae:	4353      	muls	r3, r2
 80193b0:	1989      	adds	r1, r1, r6
 80193b2:	0c0e      	lsrs	r6, r1, #16
 80193b4:	199b      	adds	r3, r3, r6
 80193b6:	b289      	uxth	r1, r1
 80193b8:	0c1e      	lsrs	r6, r3, #16
 80193ba:	041b      	lsls	r3, r3, #16
 80193bc:	185b      	adds	r3, r3, r1
 80193be:	4661      	mov	r1, ip
 80193c0:	c108      	stmia	r1!, {r3}
 80193c2:	468c      	mov	ip, r1
 80193c4:	4285      	cmp	r5, r0
 80193c6:	dcea      	bgt.n	801939e <__multadd+0x12>
 80193c8:	2e00      	cmp	r6, #0
 80193ca:	d01b      	beq.n	8019404 <__multadd+0x78>
 80193cc:	68a3      	ldr	r3, [r4, #8]
 80193ce:	42ab      	cmp	r3, r5
 80193d0:	dc12      	bgt.n	80193f8 <__multadd+0x6c>
 80193d2:	6863      	ldr	r3, [r4, #4]
 80193d4:	0038      	movs	r0, r7
 80193d6:	1c59      	adds	r1, r3, #1
 80193d8:	f7ff ffa6 	bl	8019328 <_Balloc>
 80193dc:	0021      	movs	r1, r4
 80193de:	6923      	ldr	r3, [r4, #16]
 80193e0:	9001      	str	r0, [sp, #4]
 80193e2:	1c9a      	adds	r2, r3, #2
 80193e4:	0092      	lsls	r2, r2, #2
 80193e6:	310c      	adds	r1, #12
 80193e8:	300c      	adds	r0, #12
 80193ea:	f7fc f8b6 	bl	801555a <memcpy>
 80193ee:	0021      	movs	r1, r4
 80193f0:	0038      	movs	r0, r7
 80193f2:	f7ff ffc1 	bl	8019378 <_Bfree>
 80193f6:	9c01      	ldr	r4, [sp, #4]
 80193f8:	1d2b      	adds	r3, r5, #4
 80193fa:	009b      	lsls	r3, r3, #2
 80193fc:	18e3      	adds	r3, r4, r3
 80193fe:	3501      	adds	r5, #1
 8019400:	605e      	str	r6, [r3, #4]
 8019402:	6125      	str	r5, [r4, #16]
 8019404:	0020      	movs	r0, r4
 8019406:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08019408 <__s2b>:
 8019408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801940a:	0006      	movs	r6, r0
 801940c:	0018      	movs	r0, r3
 801940e:	000c      	movs	r4, r1
 8019410:	3008      	adds	r0, #8
 8019412:	2109      	movs	r1, #9
 8019414:	9301      	str	r3, [sp, #4]
 8019416:	0015      	movs	r5, r2
 8019418:	f7e6 ff24 	bl	8000264 <__divsi3>
 801941c:	2301      	movs	r3, #1
 801941e:	2100      	movs	r1, #0
 8019420:	4283      	cmp	r3, r0
 8019422:	db1f      	blt.n	8019464 <__s2b+0x5c>
 8019424:	0030      	movs	r0, r6
 8019426:	f7ff ff7f 	bl	8019328 <_Balloc>
 801942a:	9b08      	ldr	r3, [sp, #32]
 801942c:	6143      	str	r3, [r0, #20]
 801942e:	2301      	movs	r3, #1
 8019430:	6103      	str	r3, [r0, #16]
 8019432:	2d09      	cmp	r5, #9
 8019434:	dd19      	ble.n	801946a <__s2b+0x62>
 8019436:	0023      	movs	r3, r4
 8019438:	3309      	adds	r3, #9
 801943a:	001f      	movs	r7, r3
 801943c:	9300      	str	r3, [sp, #0]
 801943e:	1964      	adds	r4, r4, r5
 8019440:	783b      	ldrb	r3, [r7, #0]
 8019442:	0001      	movs	r1, r0
 8019444:	3b30      	subs	r3, #48	; 0x30
 8019446:	220a      	movs	r2, #10
 8019448:	0030      	movs	r0, r6
 801944a:	3701      	adds	r7, #1
 801944c:	f7ff ff9e 	bl	801938c <__multadd>
 8019450:	42a7      	cmp	r7, r4
 8019452:	d1f5      	bne.n	8019440 <__s2b+0x38>
 8019454:	9b00      	ldr	r3, [sp, #0]
 8019456:	195c      	adds	r4, r3, r5
 8019458:	3c08      	subs	r4, #8
 801945a:	002f      	movs	r7, r5
 801945c:	9b01      	ldr	r3, [sp, #4]
 801945e:	429f      	cmp	r7, r3
 8019460:	db06      	blt.n	8019470 <__s2b+0x68>
 8019462:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019464:	005b      	lsls	r3, r3, #1
 8019466:	3101      	adds	r1, #1
 8019468:	e7da      	b.n	8019420 <__s2b+0x18>
 801946a:	340a      	adds	r4, #10
 801946c:	2509      	movs	r5, #9
 801946e:	e7f4      	b.n	801945a <__s2b+0x52>
 8019470:	1b63      	subs	r3, r4, r5
 8019472:	5ddb      	ldrb	r3, [r3, r7]
 8019474:	0001      	movs	r1, r0
 8019476:	3b30      	subs	r3, #48	; 0x30
 8019478:	220a      	movs	r2, #10
 801947a:	0030      	movs	r0, r6
 801947c:	f7ff ff86 	bl	801938c <__multadd>
 8019480:	3701      	adds	r7, #1
 8019482:	e7eb      	b.n	801945c <__s2b+0x54>

08019484 <__hi0bits>:
 8019484:	0003      	movs	r3, r0
 8019486:	0c02      	lsrs	r2, r0, #16
 8019488:	2000      	movs	r0, #0
 801948a:	4282      	cmp	r2, r0
 801948c:	d101      	bne.n	8019492 <__hi0bits+0xe>
 801948e:	041b      	lsls	r3, r3, #16
 8019490:	3010      	adds	r0, #16
 8019492:	0e1a      	lsrs	r2, r3, #24
 8019494:	d101      	bne.n	801949a <__hi0bits+0x16>
 8019496:	3008      	adds	r0, #8
 8019498:	021b      	lsls	r3, r3, #8
 801949a:	0f1a      	lsrs	r2, r3, #28
 801949c:	d101      	bne.n	80194a2 <__hi0bits+0x1e>
 801949e:	3004      	adds	r0, #4
 80194a0:	011b      	lsls	r3, r3, #4
 80194a2:	0f9a      	lsrs	r2, r3, #30
 80194a4:	d101      	bne.n	80194aa <__hi0bits+0x26>
 80194a6:	3002      	adds	r0, #2
 80194a8:	009b      	lsls	r3, r3, #2
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	db03      	blt.n	80194b6 <__hi0bits+0x32>
 80194ae:	3001      	adds	r0, #1
 80194b0:	005b      	lsls	r3, r3, #1
 80194b2:	d400      	bmi.n	80194b6 <__hi0bits+0x32>
 80194b4:	2020      	movs	r0, #32
 80194b6:	4770      	bx	lr

080194b8 <__lo0bits>:
 80194b8:	2207      	movs	r2, #7
 80194ba:	6803      	ldr	r3, [r0, #0]
 80194bc:	b510      	push	{r4, lr}
 80194be:	0001      	movs	r1, r0
 80194c0:	401a      	ands	r2, r3
 80194c2:	d00d      	beq.n	80194e0 <__lo0bits+0x28>
 80194c4:	2401      	movs	r4, #1
 80194c6:	2000      	movs	r0, #0
 80194c8:	4223      	tst	r3, r4
 80194ca:	d105      	bne.n	80194d8 <__lo0bits+0x20>
 80194cc:	3002      	adds	r0, #2
 80194ce:	4203      	tst	r3, r0
 80194d0:	d003      	beq.n	80194da <__lo0bits+0x22>
 80194d2:	40e3      	lsrs	r3, r4
 80194d4:	0020      	movs	r0, r4
 80194d6:	600b      	str	r3, [r1, #0]
 80194d8:	bd10      	pop	{r4, pc}
 80194da:	089b      	lsrs	r3, r3, #2
 80194dc:	600b      	str	r3, [r1, #0]
 80194de:	e7fb      	b.n	80194d8 <__lo0bits+0x20>
 80194e0:	b29c      	uxth	r4, r3
 80194e2:	0010      	movs	r0, r2
 80194e4:	2c00      	cmp	r4, #0
 80194e6:	d101      	bne.n	80194ec <__lo0bits+0x34>
 80194e8:	2010      	movs	r0, #16
 80194ea:	0c1b      	lsrs	r3, r3, #16
 80194ec:	b2da      	uxtb	r2, r3
 80194ee:	2a00      	cmp	r2, #0
 80194f0:	d101      	bne.n	80194f6 <__lo0bits+0x3e>
 80194f2:	3008      	adds	r0, #8
 80194f4:	0a1b      	lsrs	r3, r3, #8
 80194f6:	071a      	lsls	r2, r3, #28
 80194f8:	d101      	bne.n	80194fe <__lo0bits+0x46>
 80194fa:	3004      	adds	r0, #4
 80194fc:	091b      	lsrs	r3, r3, #4
 80194fe:	079a      	lsls	r2, r3, #30
 8019500:	d101      	bne.n	8019506 <__lo0bits+0x4e>
 8019502:	3002      	adds	r0, #2
 8019504:	089b      	lsrs	r3, r3, #2
 8019506:	07da      	lsls	r2, r3, #31
 8019508:	d4e8      	bmi.n	80194dc <__lo0bits+0x24>
 801950a:	085b      	lsrs	r3, r3, #1
 801950c:	d001      	beq.n	8019512 <__lo0bits+0x5a>
 801950e:	3001      	adds	r0, #1
 8019510:	e7e4      	b.n	80194dc <__lo0bits+0x24>
 8019512:	2020      	movs	r0, #32
 8019514:	e7e0      	b.n	80194d8 <__lo0bits+0x20>

08019516 <__i2b>:
 8019516:	b510      	push	{r4, lr}
 8019518:	000c      	movs	r4, r1
 801951a:	2101      	movs	r1, #1
 801951c:	f7ff ff04 	bl	8019328 <_Balloc>
 8019520:	2301      	movs	r3, #1
 8019522:	6144      	str	r4, [r0, #20]
 8019524:	6103      	str	r3, [r0, #16]
 8019526:	bd10      	pop	{r4, pc}

08019528 <__multiply>:
 8019528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801952a:	690b      	ldr	r3, [r1, #16]
 801952c:	0014      	movs	r4, r2
 801952e:	6912      	ldr	r2, [r2, #16]
 8019530:	b089      	sub	sp, #36	; 0x24
 8019532:	000d      	movs	r5, r1
 8019534:	4293      	cmp	r3, r2
 8019536:	da01      	bge.n	801953c <__multiply+0x14>
 8019538:	0025      	movs	r5, r4
 801953a:	000c      	movs	r4, r1
 801953c:	692f      	ldr	r7, [r5, #16]
 801953e:	6926      	ldr	r6, [r4, #16]
 8019540:	6869      	ldr	r1, [r5, #4]
 8019542:	19bb      	adds	r3, r7, r6
 8019544:	9302      	str	r3, [sp, #8]
 8019546:	68ab      	ldr	r3, [r5, #8]
 8019548:	19ba      	adds	r2, r7, r6
 801954a:	4293      	cmp	r3, r2
 801954c:	da00      	bge.n	8019550 <__multiply+0x28>
 801954e:	3101      	adds	r1, #1
 8019550:	f7ff feea 	bl	8019328 <_Balloc>
 8019554:	0002      	movs	r2, r0
 8019556:	19bb      	adds	r3, r7, r6
 8019558:	3214      	adds	r2, #20
 801955a:	009b      	lsls	r3, r3, #2
 801955c:	18d3      	adds	r3, r2, r3
 801955e:	469c      	mov	ip, r3
 8019560:	2100      	movs	r1, #0
 8019562:	0013      	movs	r3, r2
 8019564:	9004      	str	r0, [sp, #16]
 8019566:	4563      	cmp	r3, ip
 8019568:	d31d      	bcc.n	80195a6 <__multiply+0x7e>
 801956a:	3514      	adds	r5, #20
 801956c:	00bf      	lsls	r7, r7, #2
 801956e:	19eb      	adds	r3, r5, r7
 8019570:	3414      	adds	r4, #20
 8019572:	00b6      	lsls	r6, r6, #2
 8019574:	9305      	str	r3, [sp, #20]
 8019576:	19a3      	adds	r3, r4, r6
 8019578:	9503      	str	r5, [sp, #12]
 801957a:	9401      	str	r4, [sp, #4]
 801957c:	9307      	str	r3, [sp, #28]
 801957e:	9b07      	ldr	r3, [sp, #28]
 8019580:	9901      	ldr	r1, [sp, #4]
 8019582:	4299      	cmp	r1, r3
 8019584:	d311      	bcc.n	80195aa <__multiply+0x82>
 8019586:	9b02      	ldr	r3, [sp, #8]
 8019588:	2b00      	cmp	r3, #0
 801958a:	dd06      	ble.n	801959a <__multiply+0x72>
 801958c:	2304      	movs	r3, #4
 801958e:	425b      	negs	r3, r3
 8019590:	449c      	add	ip, r3
 8019592:	4663      	mov	r3, ip
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d051      	beq.n	801963e <__multiply+0x116>
 801959a:	9b04      	ldr	r3, [sp, #16]
 801959c:	9a02      	ldr	r2, [sp, #8]
 801959e:	0018      	movs	r0, r3
 80195a0:	611a      	str	r2, [r3, #16]
 80195a2:	b009      	add	sp, #36	; 0x24
 80195a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195a6:	c302      	stmia	r3!, {r1}
 80195a8:	e7dd      	b.n	8019566 <__multiply+0x3e>
 80195aa:	9b01      	ldr	r3, [sp, #4]
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	b298      	uxth	r0, r3
 80195b0:	2800      	cmp	r0, #0
 80195b2:	d01c      	beq.n	80195ee <__multiply+0xc6>
 80195b4:	0015      	movs	r5, r2
 80195b6:	2600      	movs	r6, #0
 80195b8:	9f03      	ldr	r7, [sp, #12]
 80195ba:	cf02      	ldmia	r7!, {r1}
 80195bc:	682c      	ldr	r4, [r5, #0]
 80195be:	b28b      	uxth	r3, r1
 80195c0:	4343      	muls	r3, r0
 80195c2:	0c09      	lsrs	r1, r1, #16
 80195c4:	4341      	muls	r1, r0
 80195c6:	b2a4      	uxth	r4, r4
 80195c8:	191b      	adds	r3, r3, r4
 80195ca:	199b      	adds	r3, r3, r6
 80195cc:	000e      	movs	r6, r1
 80195ce:	6829      	ldr	r1, [r5, #0]
 80195d0:	9506      	str	r5, [sp, #24]
 80195d2:	0c09      	lsrs	r1, r1, #16
 80195d4:	1871      	adds	r1, r6, r1
 80195d6:	0c1e      	lsrs	r6, r3, #16
 80195d8:	1989      	adds	r1, r1, r6
 80195da:	0c0e      	lsrs	r6, r1, #16
 80195dc:	b29b      	uxth	r3, r3
 80195de:	0409      	lsls	r1, r1, #16
 80195e0:	430b      	orrs	r3, r1
 80195e2:	c508      	stmia	r5!, {r3}
 80195e4:	9b05      	ldr	r3, [sp, #20]
 80195e6:	42bb      	cmp	r3, r7
 80195e8:	d8e7      	bhi.n	80195ba <__multiply+0x92>
 80195ea:	9b06      	ldr	r3, [sp, #24]
 80195ec:	605e      	str	r6, [r3, #4]
 80195ee:	9b01      	ldr	r3, [sp, #4]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	0c1d      	lsrs	r5, r3, #16
 80195f4:	d01e      	beq.n	8019634 <__multiply+0x10c>
 80195f6:	0010      	movs	r0, r2
 80195f8:	2700      	movs	r7, #0
 80195fa:	6813      	ldr	r3, [r2, #0]
 80195fc:	9e03      	ldr	r6, [sp, #12]
 80195fe:	6831      	ldr	r1, [r6, #0]
 8019600:	6804      	ldr	r4, [r0, #0]
 8019602:	b289      	uxth	r1, r1
 8019604:	4369      	muls	r1, r5
 8019606:	0c24      	lsrs	r4, r4, #16
 8019608:	1909      	adds	r1, r1, r4
 801960a:	19c9      	adds	r1, r1, r7
 801960c:	040f      	lsls	r7, r1, #16
 801960e:	b29b      	uxth	r3, r3
 8019610:	433b      	orrs	r3, r7
 8019612:	6003      	str	r3, [r0, #0]
 8019614:	ce80      	ldmia	r6!, {r7}
 8019616:	6843      	ldr	r3, [r0, #4]
 8019618:	0c3f      	lsrs	r7, r7, #16
 801961a:	436f      	muls	r7, r5
 801961c:	b29b      	uxth	r3, r3
 801961e:	18fb      	adds	r3, r7, r3
 8019620:	0c09      	lsrs	r1, r1, #16
 8019622:	185b      	adds	r3, r3, r1
 8019624:	9905      	ldr	r1, [sp, #20]
 8019626:	9006      	str	r0, [sp, #24]
 8019628:	0c1f      	lsrs	r7, r3, #16
 801962a:	3004      	adds	r0, #4
 801962c:	42b1      	cmp	r1, r6
 801962e:	d8e6      	bhi.n	80195fe <__multiply+0xd6>
 8019630:	9906      	ldr	r1, [sp, #24]
 8019632:	604b      	str	r3, [r1, #4]
 8019634:	9b01      	ldr	r3, [sp, #4]
 8019636:	3204      	adds	r2, #4
 8019638:	3304      	adds	r3, #4
 801963a:	9301      	str	r3, [sp, #4]
 801963c:	e79f      	b.n	801957e <__multiply+0x56>
 801963e:	9b02      	ldr	r3, [sp, #8]
 8019640:	3b01      	subs	r3, #1
 8019642:	9302      	str	r3, [sp, #8]
 8019644:	e79f      	b.n	8019586 <__multiply+0x5e>
	...

08019648 <__pow5mult>:
 8019648:	2303      	movs	r3, #3
 801964a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801964c:	4013      	ands	r3, r2
 801964e:	0006      	movs	r6, r0
 8019650:	000f      	movs	r7, r1
 8019652:	0015      	movs	r5, r2
 8019654:	2b00      	cmp	r3, #0
 8019656:	d008      	beq.n	801966a <__pow5mult+0x22>
 8019658:	491a      	ldr	r1, [pc, #104]	; (80196c4 <__pow5mult+0x7c>)
 801965a:	3b01      	subs	r3, #1
 801965c:	009a      	lsls	r2, r3, #2
 801965e:	5852      	ldr	r2, [r2, r1]
 8019660:	2300      	movs	r3, #0
 8019662:	0039      	movs	r1, r7
 8019664:	f7ff fe92 	bl	801938c <__multadd>
 8019668:	0007      	movs	r7, r0
 801966a:	10ad      	asrs	r5, r5, #2
 801966c:	d027      	beq.n	80196be <__pow5mult+0x76>
 801966e:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8019670:	2c00      	cmp	r4, #0
 8019672:	d107      	bne.n	8019684 <__pow5mult+0x3c>
 8019674:	4914      	ldr	r1, [pc, #80]	; (80196c8 <__pow5mult+0x80>)
 8019676:	0030      	movs	r0, r6
 8019678:	f7ff ff4d 	bl	8019516 <__i2b>
 801967c:	2300      	movs	r3, #0
 801967e:	0004      	movs	r4, r0
 8019680:	64b0      	str	r0, [r6, #72]	; 0x48
 8019682:	6003      	str	r3, [r0, #0]
 8019684:	2301      	movs	r3, #1
 8019686:	421d      	tst	r5, r3
 8019688:	d00a      	beq.n	80196a0 <__pow5mult+0x58>
 801968a:	0039      	movs	r1, r7
 801968c:	0022      	movs	r2, r4
 801968e:	0030      	movs	r0, r6
 8019690:	f7ff ff4a 	bl	8019528 <__multiply>
 8019694:	0039      	movs	r1, r7
 8019696:	9001      	str	r0, [sp, #4]
 8019698:	0030      	movs	r0, r6
 801969a:	f7ff fe6d 	bl	8019378 <_Bfree>
 801969e:	9f01      	ldr	r7, [sp, #4]
 80196a0:	106d      	asrs	r5, r5, #1
 80196a2:	d00c      	beq.n	80196be <__pow5mult+0x76>
 80196a4:	6820      	ldr	r0, [r4, #0]
 80196a6:	2800      	cmp	r0, #0
 80196a8:	d107      	bne.n	80196ba <__pow5mult+0x72>
 80196aa:	0022      	movs	r2, r4
 80196ac:	0021      	movs	r1, r4
 80196ae:	0030      	movs	r0, r6
 80196b0:	f7ff ff3a 	bl	8019528 <__multiply>
 80196b4:	2300      	movs	r3, #0
 80196b6:	6020      	str	r0, [r4, #0]
 80196b8:	6003      	str	r3, [r0, #0]
 80196ba:	0004      	movs	r4, r0
 80196bc:	e7e2      	b.n	8019684 <__pow5mult+0x3c>
 80196be:	0038      	movs	r0, r7
 80196c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80196c2:	46c0      	nop			; (mov r8, r8)
 80196c4:	0801d788 	.word	0x0801d788
 80196c8:	00000271 	.word	0x00000271

080196cc <__lshift>:
 80196cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196ce:	000d      	movs	r5, r1
 80196d0:	0017      	movs	r7, r2
 80196d2:	692b      	ldr	r3, [r5, #16]
 80196d4:	1154      	asrs	r4, r2, #5
 80196d6:	b085      	sub	sp, #20
 80196d8:	18e3      	adds	r3, r4, r3
 80196da:	9301      	str	r3, [sp, #4]
 80196dc:	3301      	adds	r3, #1
 80196de:	9300      	str	r3, [sp, #0]
 80196e0:	6849      	ldr	r1, [r1, #4]
 80196e2:	68ab      	ldr	r3, [r5, #8]
 80196e4:	9002      	str	r0, [sp, #8]
 80196e6:	9a00      	ldr	r2, [sp, #0]
 80196e8:	4293      	cmp	r3, r2
 80196ea:	db35      	blt.n	8019758 <__lshift+0x8c>
 80196ec:	9802      	ldr	r0, [sp, #8]
 80196ee:	f7ff fe1b 	bl	8019328 <_Balloc>
 80196f2:	2300      	movs	r3, #0
 80196f4:	0002      	movs	r2, r0
 80196f6:	0006      	movs	r6, r0
 80196f8:	0019      	movs	r1, r3
 80196fa:	3214      	adds	r2, #20
 80196fc:	42a3      	cmp	r3, r4
 80196fe:	db2e      	blt.n	801975e <__lshift+0x92>
 8019700:	43e3      	mvns	r3, r4
 8019702:	17db      	asrs	r3, r3, #31
 8019704:	401c      	ands	r4, r3
 8019706:	002b      	movs	r3, r5
 8019708:	00a4      	lsls	r4, r4, #2
 801970a:	1914      	adds	r4, r2, r4
 801970c:	692a      	ldr	r2, [r5, #16]
 801970e:	3314      	adds	r3, #20
 8019710:	0092      	lsls	r2, r2, #2
 8019712:	189a      	adds	r2, r3, r2
 8019714:	4694      	mov	ip, r2
 8019716:	221f      	movs	r2, #31
 8019718:	4017      	ands	r7, r2
 801971a:	d024      	beq.n	8019766 <__lshift+0x9a>
 801971c:	3201      	adds	r2, #1
 801971e:	1bd2      	subs	r2, r2, r7
 8019720:	9203      	str	r2, [sp, #12]
 8019722:	2200      	movs	r2, #0
 8019724:	6819      	ldr	r1, [r3, #0]
 8019726:	0020      	movs	r0, r4
 8019728:	40b9      	lsls	r1, r7
 801972a:	430a      	orrs	r2, r1
 801972c:	c404      	stmia	r4!, {r2}
 801972e:	cb04      	ldmia	r3!, {r2}
 8019730:	9903      	ldr	r1, [sp, #12]
 8019732:	40ca      	lsrs	r2, r1
 8019734:	459c      	cmp	ip, r3
 8019736:	d8f5      	bhi.n	8019724 <__lshift+0x58>
 8019738:	6042      	str	r2, [r0, #4]
 801973a:	2a00      	cmp	r2, #0
 801973c:	d002      	beq.n	8019744 <__lshift+0x78>
 801973e:	9b01      	ldr	r3, [sp, #4]
 8019740:	3302      	adds	r3, #2
 8019742:	9300      	str	r3, [sp, #0]
 8019744:	9b00      	ldr	r3, [sp, #0]
 8019746:	9802      	ldr	r0, [sp, #8]
 8019748:	3b01      	subs	r3, #1
 801974a:	6133      	str	r3, [r6, #16]
 801974c:	0029      	movs	r1, r5
 801974e:	f7ff fe13 	bl	8019378 <_Bfree>
 8019752:	0030      	movs	r0, r6
 8019754:	b005      	add	sp, #20
 8019756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019758:	3101      	adds	r1, #1
 801975a:	005b      	lsls	r3, r3, #1
 801975c:	e7c3      	b.n	80196e6 <__lshift+0x1a>
 801975e:	0098      	lsls	r0, r3, #2
 8019760:	5011      	str	r1, [r2, r0]
 8019762:	3301      	adds	r3, #1
 8019764:	e7ca      	b.n	80196fc <__lshift+0x30>
 8019766:	cb04      	ldmia	r3!, {r2}
 8019768:	c404      	stmia	r4!, {r2}
 801976a:	459c      	cmp	ip, r3
 801976c:	d8fb      	bhi.n	8019766 <__lshift+0x9a>
 801976e:	e7e9      	b.n	8019744 <__lshift+0x78>

08019770 <__mcmp>:
 8019770:	690a      	ldr	r2, [r1, #16]
 8019772:	6903      	ldr	r3, [r0, #16]
 8019774:	b530      	push	{r4, r5, lr}
 8019776:	1a9b      	subs	r3, r3, r2
 8019778:	d10d      	bne.n	8019796 <__mcmp+0x26>
 801977a:	0092      	lsls	r2, r2, #2
 801977c:	3014      	adds	r0, #20
 801977e:	3114      	adds	r1, #20
 8019780:	1884      	adds	r4, r0, r2
 8019782:	1889      	adds	r1, r1, r2
 8019784:	3c04      	subs	r4, #4
 8019786:	3904      	subs	r1, #4
 8019788:	6825      	ldr	r5, [r4, #0]
 801978a:	680a      	ldr	r2, [r1, #0]
 801978c:	4295      	cmp	r5, r2
 801978e:	d004      	beq.n	801979a <__mcmp+0x2a>
 8019790:	2301      	movs	r3, #1
 8019792:	4295      	cmp	r5, r2
 8019794:	d304      	bcc.n	80197a0 <__mcmp+0x30>
 8019796:	0018      	movs	r0, r3
 8019798:	bd30      	pop	{r4, r5, pc}
 801979a:	42a0      	cmp	r0, r4
 801979c:	d3f2      	bcc.n	8019784 <__mcmp+0x14>
 801979e:	e7fa      	b.n	8019796 <__mcmp+0x26>
 80197a0:	425b      	negs	r3, r3
 80197a2:	e7f8      	b.n	8019796 <__mcmp+0x26>

080197a4 <__mdiff>:
 80197a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197a6:	000d      	movs	r5, r1
 80197a8:	b085      	sub	sp, #20
 80197aa:	0007      	movs	r7, r0
 80197ac:	0011      	movs	r1, r2
 80197ae:	0028      	movs	r0, r5
 80197b0:	0014      	movs	r4, r2
 80197b2:	f7ff ffdd 	bl	8019770 <__mcmp>
 80197b6:	1e06      	subs	r6, r0, #0
 80197b8:	d108      	bne.n	80197cc <__mdiff+0x28>
 80197ba:	0001      	movs	r1, r0
 80197bc:	0038      	movs	r0, r7
 80197be:	f7ff fdb3 	bl	8019328 <_Balloc>
 80197c2:	2301      	movs	r3, #1
 80197c4:	6146      	str	r6, [r0, #20]
 80197c6:	6103      	str	r3, [r0, #16]
 80197c8:	b005      	add	sp, #20
 80197ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197cc:	2301      	movs	r3, #1
 80197ce:	9301      	str	r3, [sp, #4]
 80197d0:	2800      	cmp	r0, #0
 80197d2:	db04      	blt.n	80197de <__mdiff+0x3a>
 80197d4:	0023      	movs	r3, r4
 80197d6:	002c      	movs	r4, r5
 80197d8:	001d      	movs	r5, r3
 80197da:	2300      	movs	r3, #0
 80197dc:	9301      	str	r3, [sp, #4]
 80197de:	6861      	ldr	r1, [r4, #4]
 80197e0:	0038      	movs	r0, r7
 80197e2:	f7ff fda1 	bl	8019328 <_Balloc>
 80197e6:	002f      	movs	r7, r5
 80197e8:	2200      	movs	r2, #0
 80197ea:	9b01      	ldr	r3, [sp, #4]
 80197ec:	6926      	ldr	r6, [r4, #16]
 80197ee:	60c3      	str	r3, [r0, #12]
 80197f0:	3414      	adds	r4, #20
 80197f2:	00b3      	lsls	r3, r6, #2
 80197f4:	18e3      	adds	r3, r4, r3
 80197f6:	9302      	str	r3, [sp, #8]
 80197f8:	692b      	ldr	r3, [r5, #16]
 80197fa:	3714      	adds	r7, #20
 80197fc:	009b      	lsls	r3, r3, #2
 80197fe:	18fb      	adds	r3, r7, r3
 8019800:	9303      	str	r3, [sp, #12]
 8019802:	0003      	movs	r3, r0
 8019804:	4694      	mov	ip, r2
 8019806:	3314      	adds	r3, #20
 8019808:	cc20      	ldmia	r4!, {r5}
 801980a:	cf04      	ldmia	r7!, {r2}
 801980c:	9201      	str	r2, [sp, #4]
 801980e:	b2aa      	uxth	r2, r5
 8019810:	4494      	add	ip, r2
 8019812:	466a      	mov	r2, sp
 8019814:	4661      	mov	r1, ip
 8019816:	8892      	ldrh	r2, [r2, #4]
 8019818:	0c2d      	lsrs	r5, r5, #16
 801981a:	1a8a      	subs	r2, r1, r2
 801981c:	9901      	ldr	r1, [sp, #4]
 801981e:	0c09      	lsrs	r1, r1, #16
 8019820:	1a69      	subs	r1, r5, r1
 8019822:	1415      	asrs	r5, r2, #16
 8019824:	1949      	adds	r1, r1, r5
 8019826:	140d      	asrs	r5, r1, #16
 8019828:	b292      	uxth	r2, r2
 801982a:	0409      	lsls	r1, r1, #16
 801982c:	430a      	orrs	r2, r1
 801982e:	601a      	str	r2, [r3, #0]
 8019830:	9a03      	ldr	r2, [sp, #12]
 8019832:	46ac      	mov	ip, r5
 8019834:	3304      	adds	r3, #4
 8019836:	42ba      	cmp	r2, r7
 8019838:	d8e6      	bhi.n	8019808 <__mdiff+0x64>
 801983a:	9902      	ldr	r1, [sp, #8]
 801983c:	001a      	movs	r2, r3
 801983e:	428c      	cmp	r4, r1
 8019840:	d305      	bcc.n	801984e <__mdiff+0xaa>
 8019842:	3a04      	subs	r2, #4
 8019844:	6813      	ldr	r3, [r2, #0]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d00e      	beq.n	8019868 <__mdiff+0xc4>
 801984a:	6106      	str	r6, [r0, #16]
 801984c:	e7bc      	b.n	80197c8 <__mdiff+0x24>
 801984e:	cc04      	ldmia	r4!, {r2}
 8019850:	b291      	uxth	r1, r2
 8019852:	4461      	add	r1, ip
 8019854:	140d      	asrs	r5, r1, #16
 8019856:	0c12      	lsrs	r2, r2, #16
 8019858:	1952      	adds	r2, r2, r5
 801985a:	1415      	asrs	r5, r2, #16
 801985c:	b289      	uxth	r1, r1
 801985e:	0412      	lsls	r2, r2, #16
 8019860:	430a      	orrs	r2, r1
 8019862:	46ac      	mov	ip, r5
 8019864:	c304      	stmia	r3!, {r2}
 8019866:	e7e8      	b.n	801983a <__mdiff+0x96>
 8019868:	3e01      	subs	r6, #1
 801986a:	e7ea      	b.n	8019842 <__mdiff+0x9e>

0801986c <__ulp>:
 801986c:	000b      	movs	r3, r1
 801986e:	4910      	ldr	r1, [pc, #64]	; (80198b0 <__ulp+0x44>)
 8019870:	b510      	push	{r4, lr}
 8019872:	4019      	ands	r1, r3
 8019874:	4b0f      	ldr	r3, [pc, #60]	; (80198b4 <__ulp+0x48>)
 8019876:	18c9      	adds	r1, r1, r3
 8019878:	2900      	cmp	r1, #0
 801987a:	dd04      	ble.n	8019886 <__ulp+0x1a>
 801987c:	2200      	movs	r2, #0
 801987e:	000b      	movs	r3, r1
 8019880:	0010      	movs	r0, r2
 8019882:	0019      	movs	r1, r3
 8019884:	bd10      	pop	{r4, pc}
 8019886:	4249      	negs	r1, r1
 8019888:	1509      	asrs	r1, r1, #20
 801988a:	2200      	movs	r2, #0
 801988c:	2300      	movs	r3, #0
 801988e:	2913      	cmp	r1, #19
 8019890:	dc04      	bgt.n	801989c <__ulp+0x30>
 8019892:	2080      	movs	r0, #128	; 0x80
 8019894:	0300      	lsls	r0, r0, #12
 8019896:	4108      	asrs	r0, r1
 8019898:	0003      	movs	r3, r0
 801989a:	e7f1      	b.n	8019880 <__ulp+0x14>
 801989c:	3914      	subs	r1, #20
 801989e:	2001      	movs	r0, #1
 80198a0:	291e      	cmp	r1, #30
 80198a2:	dc02      	bgt.n	80198aa <__ulp+0x3e>
 80198a4:	241f      	movs	r4, #31
 80198a6:	1a61      	subs	r1, r4, r1
 80198a8:	4088      	lsls	r0, r1
 80198aa:	0002      	movs	r2, r0
 80198ac:	e7e8      	b.n	8019880 <__ulp+0x14>
 80198ae:	46c0      	nop			; (mov r8, r8)
 80198b0:	7ff00000 	.word	0x7ff00000
 80198b4:	fcc00000 	.word	0xfcc00000

080198b8 <__b2d>:
 80198b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80198ba:	0006      	movs	r6, r0
 80198bc:	6903      	ldr	r3, [r0, #16]
 80198be:	3614      	adds	r6, #20
 80198c0:	009b      	lsls	r3, r3, #2
 80198c2:	18f3      	adds	r3, r6, r3
 80198c4:	1f1d      	subs	r5, r3, #4
 80198c6:	682c      	ldr	r4, [r5, #0]
 80198c8:	000f      	movs	r7, r1
 80198ca:	0020      	movs	r0, r4
 80198cc:	9301      	str	r3, [sp, #4]
 80198ce:	f7ff fdd9 	bl	8019484 <__hi0bits>
 80198d2:	2320      	movs	r3, #32
 80198d4:	1a1b      	subs	r3, r3, r0
 80198d6:	603b      	str	r3, [r7, #0]
 80198d8:	491c      	ldr	r1, [pc, #112]	; (801994c <__b2d+0x94>)
 80198da:	280a      	cmp	r0, #10
 80198dc:	dc16      	bgt.n	801990c <__b2d+0x54>
 80198de:	230b      	movs	r3, #11
 80198e0:	0027      	movs	r7, r4
 80198e2:	1a1b      	subs	r3, r3, r0
 80198e4:	40df      	lsrs	r7, r3
 80198e6:	4339      	orrs	r1, r7
 80198e8:	469c      	mov	ip, r3
 80198ea:	000b      	movs	r3, r1
 80198ec:	2100      	movs	r1, #0
 80198ee:	42ae      	cmp	r6, r5
 80198f0:	d202      	bcs.n	80198f8 <__b2d+0x40>
 80198f2:	9901      	ldr	r1, [sp, #4]
 80198f4:	3908      	subs	r1, #8
 80198f6:	6809      	ldr	r1, [r1, #0]
 80198f8:	3015      	adds	r0, #21
 80198fa:	4084      	lsls	r4, r0
 80198fc:	4660      	mov	r0, ip
 80198fe:	40c1      	lsrs	r1, r0
 8019900:	430c      	orrs	r4, r1
 8019902:	0022      	movs	r2, r4
 8019904:	0010      	movs	r0, r2
 8019906:	0019      	movs	r1, r3
 8019908:	b003      	add	sp, #12
 801990a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801990c:	2700      	movs	r7, #0
 801990e:	42ae      	cmp	r6, r5
 8019910:	d202      	bcs.n	8019918 <__b2d+0x60>
 8019912:	9d01      	ldr	r5, [sp, #4]
 8019914:	3d08      	subs	r5, #8
 8019916:	682f      	ldr	r7, [r5, #0]
 8019918:	380b      	subs	r0, #11
 801991a:	4684      	mov	ip, r0
 801991c:	1e03      	subs	r3, r0, #0
 801991e:	d012      	beq.n	8019946 <__b2d+0x8e>
 8019920:	409c      	lsls	r4, r3
 8019922:	2020      	movs	r0, #32
 8019924:	4321      	orrs	r1, r4
 8019926:	003c      	movs	r4, r7
 8019928:	1ac0      	subs	r0, r0, r3
 801992a:	40c4      	lsrs	r4, r0
 801992c:	4321      	orrs	r1, r4
 801992e:	000b      	movs	r3, r1
 8019930:	2100      	movs	r1, #0
 8019932:	42b5      	cmp	r5, r6
 8019934:	d901      	bls.n	801993a <__b2d+0x82>
 8019936:	3d04      	subs	r5, #4
 8019938:	6829      	ldr	r1, [r5, #0]
 801993a:	4664      	mov	r4, ip
 801993c:	40c1      	lsrs	r1, r0
 801993e:	40a7      	lsls	r7, r4
 8019940:	430f      	orrs	r7, r1
 8019942:	003a      	movs	r2, r7
 8019944:	e7de      	b.n	8019904 <__b2d+0x4c>
 8019946:	4321      	orrs	r1, r4
 8019948:	000b      	movs	r3, r1
 801994a:	e7fa      	b.n	8019942 <__b2d+0x8a>
 801994c:	3ff00000 	.word	0x3ff00000

08019950 <__d2b>:
 8019950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019952:	001d      	movs	r5, r3
 8019954:	2101      	movs	r1, #1
 8019956:	0014      	movs	r4, r2
 8019958:	9f08      	ldr	r7, [sp, #32]
 801995a:	f7ff fce5 	bl	8019328 <_Balloc>
 801995e:	032b      	lsls	r3, r5, #12
 8019960:	006d      	lsls	r5, r5, #1
 8019962:	0006      	movs	r6, r0
 8019964:	0b1b      	lsrs	r3, r3, #12
 8019966:	0d6d      	lsrs	r5, r5, #21
 8019968:	d124      	bne.n	80199b4 <__d2b+0x64>
 801996a:	9301      	str	r3, [sp, #4]
 801996c:	2c00      	cmp	r4, #0
 801996e:	d027      	beq.n	80199c0 <__d2b+0x70>
 8019970:	4668      	mov	r0, sp
 8019972:	9400      	str	r4, [sp, #0]
 8019974:	f7ff fda0 	bl	80194b8 <__lo0bits>
 8019978:	9c00      	ldr	r4, [sp, #0]
 801997a:	2800      	cmp	r0, #0
 801997c:	d01e      	beq.n	80199bc <__d2b+0x6c>
 801997e:	9b01      	ldr	r3, [sp, #4]
 8019980:	2120      	movs	r1, #32
 8019982:	001a      	movs	r2, r3
 8019984:	1a09      	subs	r1, r1, r0
 8019986:	408a      	lsls	r2, r1
 8019988:	40c3      	lsrs	r3, r0
 801998a:	4322      	orrs	r2, r4
 801998c:	6172      	str	r2, [r6, #20]
 801998e:	9301      	str	r3, [sp, #4]
 8019990:	9c01      	ldr	r4, [sp, #4]
 8019992:	61b4      	str	r4, [r6, #24]
 8019994:	1e63      	subs	r3, r4, #1
 8019996:	419c      	sbcs	r4, r3
 8019998:	3401      	adds	r4, #1
 801999a:	6134      	str	r4, [r6, #16]
 801999c:	2d00      	cmp	r5, #0
 801999e:	d018      	beq.n	80199d2 <__d2b+0x82>
 80199a0:	4b12      	ldr	r3, [pc, #72]	; (80199ec <__d2b+0x9c>)
 80199a2:	18ed      	adds	r5, r5, r3
 80199a4:	2335      	movs	r3, #53	; 0x35
 80199a6:	182d      	adds	r5, r5, r0
 80199a8:	603d      	str	r5, [r7, #0]
 80199aa:	1a18      	subs	r0, r3, r0
 80199ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199ae:	6018      	str	r0, [r3, #0]
 80199b0:	0030      	movs	r0, r6
 80199b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80199b4:	2280      	movs	r2, #128	; 0x80
 80199b6:	0352      	lsls	r2, r2, #13
 80199b8:	4313      	orrs	r3, r2
 80199ba:	e7d6      	b.n	801996a <__d2b+0x1a>
 80199bc:	6174      	str	r4, [r6, #20]
 80199be:	e7e7      	b.n	8019990 <__d2b+0x40>
 80199c0:	a801      	add	r0, sp, #4
 80199c2:	f7ff fd79 	bl	80194b8 <__lo0bits>
 80199c6:	2401      	movs	r4, #1
 80199c8:	9b01      	ldr	r3, [sp, #4]
 80199ca:	6134      	str	r4, [r6, #16]
 80199cc:	6173      	str	r3, [r6, #20]
 80199ce:	3020      	adds	r0, #32
 80199d0:	e7e4      	b.n	801999c <__d2b+0x4c>
 80199d2:	4b07      	ldr	r3, [pc, #28]	; (80199f0 <__d2b+0xa0>)
 80199d4:	18c0      	adds	r0, r0, r3
 80199d6:	4b07      	ldr	r3, [pc, #28]	; (80199f4 <__d2b+0xa4>)
 80199d8:	6038      	str	r0, [r7, #0]
 80199da:	18e3      	adds	r3, r4, r3
 80199dc:	009b      	lsls	r3, r3, #2
 80199de:	18f3      	adds	r3, r6, r3
 80199e0:	6958      	ldr	r0, [r3, #20]
 80199e2:	f7ff fd4f 	bl	8019484 <__hi0bits>
 80199e6:	0164      	lsls	r4, r4, #5
 80199e8:	1a20      	subs	r0, r4, r0
 80199ea:	e7df      	b.n	80199ac <__d2b+0x5c>
 80199ec:	fffffbcd 	.word	0xfffffbcd
 80199f0:	fffffbce 	.word	0xfffffbce
 80199f4:	3fffffff 	.word	0x3fffffff

080199f8 <__ratio>:
 80199f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199fa:	b085      	sub	sp, #20
 80199fc:	000f      	movs	r7, r1
 80199fe:	a902      	add	r1, sp, #8
 8019a00:	0006      	movs	r6, r0
 8019a02:	f7ff ff59 	bl	80198b8 <__b2d>
 8019a06:	0004      	movs	r4, r0
 8019a08:	000d      	movs	r5, r1
 8019a0a:	0038      	movs	r0, r7
 8019a0c:	a903      	add	r1, sp, #12
 8019a0e:	9400      	str	r4, [sp, #0]
 8019a10:	9501      	str	r5, [sp, #4]
 8019a12:	f7ff ff51 	bl	80198b8 <__b2d>
 8019a16:	6936      	ldr	r6, [r6, #16]
 8019a18:	693f      	ldr	r7, [r7, #16]
 8019a1a:	0002      	movs	r2, r0
 8019a1c:	1bf7      	subs	r7, r6, r7
 8019a1e:	017e      	lsls	r6, r7, #5
 8019a20:	46b4      	mov	ip, r6
 8019a22:	9f03      	ldr	r7, [sp, #12]
 8019a24:	9e02      	ldr	r6, [sp, #8]
 8019a26:	000b      	movs	r3, r1
 8019a28:	1bf6      	subs	r6, r6, r7
 8019a2a:	4466      	add	r6, ip
 8019a2c:	0537      	lsls	r7, r6, #20
 8019a2e:	2e00      	cmp	r6, #0
 8019a30:	dd07      	ble.n	8019a42 <__ratio+0x4a>
 8019a32:	1979      	adds	r1, r7, r5
 8019a34:	9101      	str	r1, [sp, #4]
 8019a36:	9800      	ldr	r0, [sp, #0]
 8019a38:	9901      	ldr	r1, [sp, #4]
 8019a3a:	f7e8 f8f1 	bl	8001c20 <__aeabi_ddiv>
 8019a3e:	b005      	add	sp, #20
 8019a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a42:	1bcb      	subs	r3, r1, r7
 8019a44:	e7f7      	b.n	8019a36 <__ratio+0x3e>

08019a46 <__copybits>:
 8019a46:	0013      	movs	r3, r2
 8019a48:	3901      	subs	r1, #1
 8019a4a:	b510      	push	{r4, lr}
 8019a4c:	1149      	asrs	r1, r1, #5
 8019a4e:	6912      	ldr	r2, [r2, #16]
 8019a50:	3101      	adds	r1, #1
 8019a52:	0089      	lsls	r1, r1, #2
 8019a54:	3314      	adds	r3, #20
 8019a56:	0092      	lsls	r2, r2, #2
 8019a58:	1841      	adds	r1, r0, r1
 8019a5a:	189a      	adds	r2, r3, r2
 8019a5c:	429a      	cmp	r2, r3
 8019a5e:	d803      	bhi.n	8019a68 <__copybits+0x22>
 8019a60:	2300      	movs	r3, #0
 8019a62:	4281      	cmp	r1, r0
 8019a64:	d803      	bhi.n	8019a6e <__copybits+0x28>
 8019a66:	bd10      	pop	{r4, pc}
 8019a68:	cb10      	ldmia	r3!, {r4}
 8019a6a:	c010      	stmia	r0!, {r4}
 8019a6c:	e7f6      	b.n	8019a5c <__copybits+0x16>
 8019a6e:	c008      	stmia	r0!, {r3}
 8019a70:	e7f7      	b.n	8019a62 <__copybits+0x1c>

08019a72 <__any_on>:
 8019a72:	0002      	movs	r2, r0
 8019a74:	6900      	ldr	r0, [r0, #16]
 8019a76:	b510      	push	{r4, lr}
 8019a78:	3214      	adds	r2, #20
 8019a7a:	114b      	asrs	r3, r1, #5
 8019a7c:	4298      	cmp	r0, r3
 8019a7e:	db12      	blt.n	8019aa6 <__any_on+0x34>
 8019a80:	dd0b      	ble.n	8019a9a <__any_on+0x28>
 8019a82:	201f      	movs	r0, #31
 8019a84:	4001      	ands	r1, r0
 8019a86:	d008      	beq.n	8019a9a <__any_on+0x28>
 8019a88:	0098      	lsls	r0, r3, #2
 8019a8a:	5884      	ldr	r4, [r0, r2]
 8019a8c:	0020      	movs	r0, r4
 8019a8e:	40c8      	lsrs	r0, r1
 8019a90:	4088      	lsls	r0, r1
 8019a92:	0001      	movs	r1, r0
 8019a94:	2001      	movs	r0, #1
 8019a96:	428c      	cmp	r4, r1
 8019a98:	d104      	bne.n	8019aa4 <__any_on+0x32>
 8019a9a:	009b      	lsls	r3, r3, #2
 8019a9c:	18d3      	adds	r3, r2, r3
 8019a9e:	4293      	cmp	r3, r2
 8019aa0:	d803      	bhi.n	8019aaa <__any_on+0x38>
 8019aa2:	2000      	movs	r0, #0
 8019aa4:	bd10      	pop	{r4, pc}
 8019aa6:	0003      	movs	r3, r0
 8019aa8:	e7f7      	b.n	8019a9a <__any_on+0x28>
 8019aaa:	3b04      	subs	r3, #4
 8019aac:	6819      	ldr	r1, [r3, #0]
 8019aae:	2900      	cmp	r1, #0
 8019ab0:	d0f5      	beq.n	8019a9e <__any_on+0x2c>
 8019ab2:	2001      	movs	r0, #1
 8019ab4:	e7f6      	b.n	8019aa4 <__any_on+0x32>
	...

08019ab8 <frexp>:
 8019ab8:	b570      	push	{r4, r5, r6, lr}
 8019aba:	0014      	movs	r4, r2
 8019abc:	2500      	movs	r5, #0
 8019abe:	6025      	str	r5, [r4, #0]
 8019ac0:	4d10      	ldr	r5, [pc, #64]	; (8019b04 <frexp+0x4c>)
 8019ac2:	004b      	lsls	r3, r1, #1
 8019ac4:	000a      	movs	r2, r1
 8019ac6:	085b      	lsrs	r3, r3, #1
 8019ac8:	42ab      	cmp	r3, r5
 8019aca:	dc1a      	bgt.n	8019b02 <frexp+0x4a>
 8019acc:	001d      	movs	r5, r3
 8019ace:	4305      	orrs	r5, r0
 8019ad0:	d017      	beq.n	8019b02 <frexp+0x4a>
 8019ad2:	4d0d      	ldr	r5, [pc, #52]	; (8019b08 <frexp+0x50>)
 8019ad4:	42ab      	cmp	r3, r5
 8019ad6:	dc09      	bgt.n	8019aec <frexp+0x34>
 8019ad8:	2200      	movs	r2, #0
 8019ada:	4b0c      	ldr	r3, [pc, #48]	; (8019b0c <frexp+0x54>)
 8019adc:	f7e8 fcaa 	bl	8002434 <__aeabi_dmul>
 8019ae0:	2536      	movs	r5, #54	; 0x36
 8019ae2:	000a      	movs	r2, r1
 8019ae4:	004b      	lsls	r3, r1, #1
 8019ae6:	426d      	negs	r5, r5
 8019ae8:	085b      	lsrs	r3, r3, #1
 8019aea:	6025      	str	r5, [r4, #0]
 8019aec:	4d08      	ldr	r5, [pc, #32]	; (8019b10 <frexp+0x58>)
 8019aee:	151b      	asrs	r3, r3, #20
 8019af0:	195b      	adds	r3, r3, r5
 8019af2:	6825      	ldr	r5, [r4, #0]
 8019af4:	18eb      	adds	r3, r5, r3
 8019af6:	6023      	str	r3, [r4, #0]
 8019af8:	4b06      	ldr	r3, [pc, #24]	; (8019b14 <frexp+0x5c>)
 8019afa:	401a      	ands	r2, r3
 8019afc:	4b06      	ldr	r3, [pc, #24]	; (8019b18 <frexp+0x60>)
 8019afe:	4313      	orrs	r3, r2
 8019b00:	0019      	movs	r1, r3
 8019b02:	bd70      	pop	{r4, r5, r6, pc}
 8019b04:	7fefffff 	.word	0x7fefffff
 8019b08:	000fffff 	.word	0x000fffff
 8019b0c:	43500000 	.word	0x43500000
 8019b10:	fffffc02 	.word	0xfffffc02
 8019b14:	800fffff 	.word	0x800fffff
 8019b18:	3fe00000 	.word	0x3fe00000

08019b1c <__ssprint_r>:
 8019b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b1e:	6893      	ldr	r3, [r2, #8]
 8019b20:	b087      	sub	sp, #28
 8019b22:	9002      	str	r0, [sp, #8]
 8019b24:	000c      	movs	r4, r1
 8019b26:	0016      	movs	r6, r2
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d063      	beq.n	8019bf4 <__ssprint_r+0xd8>
 8019b2c:	6813      	ldr	r3, [r2, #0]
 8019b2e:	9303      	str	r3, [sp, #12]
 8019b30:	2300      	movs	r3, #0
 8019b32:	001f      	movs	r7, r3
 8019b34:	9305      	str	r3, [sp, #20]
 8019b36:	2f00      	cmp	r7, #0
 8019b38:	d02e      	beq.n	8019b98 <__ssprint_r+0x7c>
 8019b3a:	68a5      	ldr	r5, [r4, #8]
 8019b3c:	42af      	cmp	r7, r5
 8019b3e:	d347      	bcc.n	8019bd0 <__ssprint_r+0xb4>
 8019b40:	2390      	movs	r3, #144	; 0x90
 8019b42:	89a2      	ldrh	r2, [r4, #12]
 8019b44:	00db      	lsls	r3, r3, #3
 8019b46:	421a      	tst	r2, r3
 8019b48:	d042      	beq.n	8019bd0 <__ssprint_r+0xb4>
 8019b4a:	2003      	movs	r0, #3
 8019b4c:	6921      	ldr	r1, [r4, #16]
 8019b4e:	6823      	ldr	r3, [r4, #0]
 8019b50:	1a5b      	subs	r3, r3, r1
 8019b52:	9304      	str	r3, [sp, #16]
 8019b54:	6963      	ldr	r3, [r4, #20]
 8019b56:	4343      	muls	r3, r0
 8019b58:	0fd8      	lsrs	r0, r3, #31
 8019b5a:	18c3      	adds	r3, r0, r3
 8019b5c:	105b      	asrs	r3, r3, #1
 8019b5e:	9301      	str	r3, [sp, #4]
 8019b60:	9b04      	ldr	r3, [sp, #16]
 8019b62:	9801      	ldr	r0, [sp, #4]
 8019b64:	3301      	adds	r3, #1
 8019b66:	19db      	adds	r3, r3, r7
 8019b68:	4283      	cmp	r3, r0
 8019b6a:	d900      	bls.n	8019b6e <__ssprint_r+0x52>
 8019b6c:	9301      	str	r3, [sp, #4]
 8019b6e:	0553      	lsls	r3, r2, #21
 8019b70:	d544      	bpl.n	8019bfc <__ssprint_r+0xe0>
 8019b72:	9901      	ldr	r1, [sp, #4]
 8019b74:	9802      	ldr	r0, [sp, #8]
 8019b76:	f7fb fab7 	bl	80150e8 <_malloc_r>
 8019b7a:	1e05      	subs	r5, r0, #0
 8019b7c:	d114      	bne.n	8019ba8 <__ssprint_r+0x8c>
 8019b7e:	230c      	movs	r3, #12
 8019b80:	9a02      	ldr	r2, [sp, #8]
 8019b82:	2001      	movs	r0, #1
 8019b84:	6013      	str	r3, [r2, #0]
 8019b86:	2340      	movs	r3, #64	; 0x40
 8019b88:	89a2      	ldrh	r2, [r4, #12]
 8019b8a:	4240      	negs	r0, r0
 8019b8c:	4313      	orrs	r3, r2
 8019b8e:	81a3      	strh	r3, [r4, #12]
 8019b90:	2300      	movs	r3, #0
 8019b92:	60b3      	str	r3, [r6, #8]
 8019b94:	6073      	str	r3, [r6, #4]
 8019b96:	e02f      	b.n	8019bf8 <__ssprint_r+0xdc>
 8019b98:	9b03      	ldr	r3, [sp, #12]
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	9305      	str	r3, [sp, #20]
 8019b9e:	9b03      	ldr	r3, [sp, #12]
 8019ba0:	685f      	ldr	r7, [r3, #4]
 8019ba2:	3308      	adds	r3, #8
 8019ba4:	9303      	str	r3, [sp, #12]
 8019ba6:	e7c6      	b.n	8019b36 <__ssprint_r+0x1a>
 8019ba8:	9a04      	ldr	r2, [sp, #16]
 8019baa:	6921      	ldr	r1, [r4, #16]
 8019bac:	f7fb fcd5 	bl	801555a <memcpy>
 8019bb0:	89a3      	ldrh	r3, [r4, #12]
 8019bb2:	4a18      	ldr	r2, [pc, #96]	; (8019c14 <__ssprint_r+0xf8>)
 8019bb4:	401a      	ands	r2, r3
 8019bb6:	2380      	movs	r3, #128	; 0x80
 8019bb8:	4313      	orrs	r3, r2
 8019bba:	81a3      	strh	r3, [r4, #12]
 8019bbc:	9b04      	ldr	r3, [sp, #16]
 8019bbe:	6125      	str	r5, [r4, #16]
 8019bc0:	18ed      	adds	r5, r5, r3
 8019bc2:	6025      	str	r5, [r4, #0]
 8019bc4:	003d      	movs	r5, r7
 8019bc6:	9b01      	ldr	r3, [sp, #4]
 8019bc8:	9a04      	ldr	r2, [sp, #16]
 8019bca:	6163      	str	r3, [r4, #20]
 8019bcc:	1a9b      	subs	r3, r3, r2
 8019bce:	60a3      	str	r3, [r4, #8]
 8019bd0:	42bd      	cmp	r5, r7
 8019bd2:	d900      	bls.n	8019bd6 <__ssprint_r+0xba>
 8019bd4:	003d      	movs	r5, r7
 8019bd6:	002a      	movs	r2, r5
 8019bd8:	9905      	ldr	r1, [sp, #20]
 8019bda:	6820      	ldr	r0, [r4, #0]
 8019bdc:	f7ff fb91 	bl	8019302 <memmove>
 8019be0:	68a3      	ldr	r3, [r4, #8]
 8019be2:	1b5b      	subs	r3, r3, r5
 8019be4:	60a3      	str	r3, [r4, #8]
 8019be6:	6823      	ldr	r3, [r4, #0]
 8019be8:	195d      	adds	r5, r3, r5
 8019bea:	68b3      	ldr	r3, [r6, #8]
 8019bec:	6025      	str	r5, [r4, #0]
 8019bee:	1bdb      	subs	r3, r3, r7
 8019bf0:	60b3      	str	r3, [r6, #8]
 8019bf2:	d1d1      	bne.n	8019b98 <__ssprint_r+0x7c>
 8019bf4:	2000      	movs	r0, #0
 8019bf6:	6070      	str	r0, [r6, #4]
 8019bf8:	b007      	add	sp, #28
 8019bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bfc:	9a01      	ldr	r2, [sp, #4]
 8019bfe:	9802      	ldr	r0, [sp, #8]
 8019c00:	f7fb fcf0 	bl	80155e4 <_realloc_r>
 8019c04:	1e05      	subs	r5, r0, #0
 8019c06:	d1d9      	bne.n	8019bbc <__ssprint_r+0xa0>
 8019c08:	6921      	ldr	r1, [r4, #16]
 8019c0a:	9802      	ldr	r0, [sp, #8]
 8019c0c:	f7fe ff78 	bl	8018b00 <_free_r>
 8019c10:	e7b5      	b.n	8019b7e <__ssprint_r+0x62>
 8019c12:	46c0      	nop			; (mov r8, r8)
 8019c14:	fffffb7f 	.word	0xfffffb7f

08019c18 <__register_exitproc>:
 8019c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019c1a:	4d29      	ldr	r5, [pc, #164]	; (8019cc0 <__register_exitproc+0xa8>)
 8019c1c:	0006      	movs	r6, r0
 8019c1e:	6828      	ldr	r0, [r5, #0]
 8019c20:	9301      	str	r3, [sp, #4]
 8019c22:	9100      	str	r1, [sp, #0]
 8019c24:	0017      	movs	r7, r2
 8019c26:	f7ff fb5f 	bl	80192e8 <__retarget_lock_acquire_recursive>
 8019c2a:	4b26      	ldr	r3, [pc, #152]	; (8019cc4 <__register_exitproc+0xac>)
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	001c      	movs	r4, r3
 8019c30:	34fc      	adds	r4, #252	; 0xfc
 8019c32:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019c34:	2800      	cmp	r0, #0
 8019c36:	d103      	bne.n	8019c40 <__register_exitproc+0x28>
 8019c38:	334d      	adds	r3, #77	; 0x4d
 8019c3a:	33ff      	adds	r3, #255	; 0xff
 8019c3c:	0018      	movs	r0, r3
 8019c3e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8019c40:	6843      	ldr	r3, [r0, #4]
 8019c42:	2b1f      	cmp	r3, #31
 8019c44:	dd18      	ble.n	8019c78 <__register_exitproc+0x60>
 8019c46:	4b20      	ldr	r3, [pc, #128]	; (8019cc8 <__register_exitproc+0xb0>)
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d105      	bne.n	8019c58 <__register_exitproc+0x40>
 8019c4c:	6828      	ldr	r0, [r5, #0]
 8019c4e:	f7ff fb4c 	bl	80192ea <__retarget_lock_release_recursive>
 8019c52:	2001      	movs	r0, #1
 8019c54:	4240      	negs	r0, r0
 8019c56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019c58:	20c8      	movs	r0, #200	; 0xc8
 8019c5a:	0040      	lsls	r0, r0, #1
 8019c5c:	f7fb fa30 	bl	80150c0 <malloc>
 8019c60:	2800      	cmp	r0, #0
 8019c62:	d0f3      	beq.n	8019c4c <__register_exitproc+0x34>
 8019c64:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019c66:	2300      	movs	r3, #0
 8019c68:	6002      	str	r2, [r0, #0]
 8019c6a:	22c4      	movs	r2, #196	; 0xc4
 8019c6c:	0052      	lsls	r2, r2, #1
 8019c6e:	6043      	str	r3, [r0, #4]
 8019c70:	64e0      	str	r0, [r4, #76]	; 0x4c
 8019c72:	5083      	str	r3, [r0, r2]
 8019c74:	3204      	adds	r2, #4
 8019c76:	5083      	str	r3, [r0, r2]
 8019c78:	6843      	ldr	r3, [r0, #4]
 8019c7a:	2e00      	cmp	r6, #0
 8019c7c:	d014      	beq.n	8019ca8 <__register_exitproc+0x90>
 8019c7e:	009a      	lsls	r2, r3, #2
 8019c80:	1882      	adds	r2, r0, r2
 8019c82:	0011      	movs	r1, r2
 8019c84:	3188      	adds	r1, #136	; 0x88
 8019c86:	600f      	str	r7, [r1, #0]
 8019c88:	2101      	movs	r1, #1
 8019c8a:	0004      	movs	r4, r0
 8019c8c:	4099      	lsls	r1, r3
 8019c8e:	3485      	adds	r4, #133	; 0x85
 8019c90:	34ff      	adds	r4, #255	; 0xff
 8019c92:	6865      	ldr	r5, [r4, #4]
 8019c94:	32fc      	adds	r2, #252	; 0xfc
 8019c96:	430d      	orrs	r5, r1
 8019c98:	6065      	str	r5, [r4, #4]
 8019c9a:	9d01      	ldr	r5, [sp, #4]
 8019c9c:	60d5      	str	r5, [r2, #12]
 8019c9e:	2e02      	cmp	r6, #2
 8019ca0:	d102      	bne.n	8019ca8 <__register_exitproc+0x90>
 8019ca2:	68a2      	ldr	r2, [r4, #8]
 8019ca4:	4311      	orrs	r1, r2
 8019ca6:	60a1      	str	r1, [r4, #8]
 8019ca8:	1c5a      	adds	r2, r3, #1
 8019caa:	6042      	str	r2, [r0, #4]
 8019cac:	3302      	adds	r3, #2
 8019cae:	9a00      	ldr	r2, [sp, #0]
 8019cb0:	009b      	lsls	r3, r3, #2
 8019cb2:	501a      	str	r2, [r3, r0]
 8019cb4:	4b02      	ldr	r3, [pc, #8]	; (8019cc0 <__register_exitproc+0xa8>)
 8019cb6:	6818      	ldr	r0, [r3, #0]
 8019cb8:	f7ff fb17 	bl	80192ea <__retarget_lock_release_recursive>
 8019cbc:	2000      	movs	r0, #0
 8019cbe:	e7ca      	b.n	8019c56 <__register_exitproc+0x3e>
 8019cc0:	20000a84 	.word	0x20000a84
 8019cc4:	0801d4d0 	.word	0x0801d4d0
 8019cc8:	080150c1 	.word	0x080150c1

08019ccc <_calloc_r>:
 8019ccc:	b510      	push	{r4, lr}
 8019cce:	4351      	muls	r1, r2
 8019cd0:	f7fb fa0a 	bl	80150e8 <_malloc_r>
 8019cd4:	1e04      	subs	r4, r0, #0
 8019cd6:	d01a      	beq.n	8019d0e <_calloc_r+0x42>
 8019cd8:	0003      	movs	r3, r0
 8019cda:	3b08      	subs	r3, #8
 8019cdc:	685a      	ldr	r2, [r3, #4]
 8019cde:	2303      	movs	r3, #3
 8019ce0:	439a      	bics	r2, r3
 8019ce2:	3a04      	subs	r2, #4
 8019ce4:	2a24      	cmp	r2, #36	; 0x24
 8019ce6:	d819      	bhi.n	8019d1c <_calloc_r+0x50>
 8019ce8:	0003      	movs	r3, r0
 8019cea:	2a13      	cmp	r2, #19
 8019cec:	d90b      	bls.n	8019d06 <_calloc_r+0x3a>
 8019cee:	2100      	movs	r1, #0
 8019cf0:	3308      	adds	r3, #8
 8019cf2:	6001      	str	r1, [r0, #0]
 8019cf4:	6041      	str	r1, [r0, #4]
 8019cf6:	2a1b      	cmp	r2, #27
 8019cf8:	d905      	bls.n	8019d06 <_calloc_r+0x3a>
 8019cfa:	6081      	str	r1, [r0, #8]
 8019cfc:	60c1      	str	r1, [r0, #12]
 8019cfe:	2a24      	cmp	r2, #36	; 0x24
 8019d00:	d007      	beq.n	8019d12 <_calloc_r+0x46>
 8019d02:	0003      	movs	r3, r0
 8019d04:	3310      	adds	r3, #16
 8019d06:	2200      	movs	r2, #0
 8019d08:	601a      	str	r2, [r3, #0]
 8019d0a:	605a      	str	r2, [r3, #4]
 8019d0c:	609a      	str	r2, [r3, #8]
 8019d0e:	0020      	movs	r0, r4
 8019d10:	bd10      	pop	{r4, pc}
 8019d12:	0003      	movs	r3, r0
 8019d14:	6101      	str	r1, [r0, #16]
 8019d16:	3318      	adds	r3, #24
 8019d18:	6141      	str	r1, [r0, #20]
 8019d1a:	e7f4      	b.n	8019d06 <_calloc_r+0x3a>
 8019d1c:	2100      	movs	r1, #0
 8019d1e:	f7fb fc25 	bl	801556c <memset>
 8019d22:	e7f4      	b.n	8019d0e <_calloc_r+0x42>

08019d24 <_sbrk>:
 8019d24:	4b05      	ldr	r3, [pc, #20]	; (8019d3c <_sbrk+0x18>)
 8019d26:	0002      	movs	r2, r0
 8019d28:	6819      	ldr	r1, [r3, #0]
 8019d2a:	2900      	cmp	r1, #0
 8019d2c:	d101      	bne.n	8019d32 <_sbrk+0xe>
 8019d2e:	4904      	ldr	r1, [pc, #16]	; (8019d40 <_sbrk+0x1c>)
 8019d30:	6019      	str	r1, [r3, #0]
 8019d32:	6818      	ldr	r0, [r3, #0]
 8019d34:	1882      	adds	r2, r0, r2
 8019d36:	601a      	str	r2, [r3, #0]
 8019d38:	4770      	bx	lr
 8019d3a:	46c0      	nop			; (mov r8, r8)
 8019d3c:	20006fc4 	.word	0x20006fc4
 8019d40:	20007588 	.word	0x20007588

08019d44 <_init>:
 8019d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d46:	46c0      	nop			; (mov r8, r8)
 8019d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d4a:	bc08      	pop	{r3}
 8019d4c:	469e      	mov	lr, r3
 8019d4e:	4770      	bx	lr

08019d50 <_fini>:
 8019d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d52:	46c0      	nop			; (mov r8, r8)
 8019d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d56:	bc08      	pop	{r3}
 8019d58:	469e      	mov	lr, r3
 8019d5a:	4770      	bx	lr
