
H26R0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000199bc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a14  08019a78  08019a78  00029a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d48c  0801d48c  00030a80  2**0
                  CONTENTS
  4 .ARM          00000008  0801d48c  0801d48c  0002d48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d494  0801d494  00030a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801d494  0801d494  0002d494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d49c  0801d49c  0002d49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a80  20000000  0801d4a0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006860  20000a80  0801df20  00030a80  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200072e0  0801df20  000372e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052177  00000000  00000000  00030aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008695  00000000  00000000  00082c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b3d2  00000000  00000000  0008b2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001ed8  00000000  00000000  000a6688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002090  00000000  00000000  000a8560  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016f7d  00000000  00000000  000aa5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000aaf5  00000000  00000000  000c156d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc062  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006780  00000000  00000000  000cc0e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a80 	.word	0x20000a80
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08019a60 	.word	0x08019a60

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a84 	.word	0x20000a84
 8000100:	08019a60 	.word	0x08019a60

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 ff89 	bl	8002364 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fee1 	bl	8002224 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 ff7b 	bl	8002364 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 ff71 	bl	8002364 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 ff03 	bl	800229c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fef9 	bl	800229c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fca1 	bl	8000e08 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc23 	bl	8000d1c <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc93 	bl	8000e08 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc89 	bl	8000e08 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc31 	bl	8000d6c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc27 	bl	8000d6c <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ulcmp>:
 800052c:	4299      	cmp	r1, r3
 800052e:	d101      	bne.n	8000534 <__aeabi_ulcmp+0x8>
 8000530:	1a80      	subs	r0, r0, r2
 8000532:	d004      	beq.n	800053e <__aeabi_ulcmp+0x12>
 8000534:	d202      	bcs.n	800053c <__aeabi_ulcmp+0x10>
 8000536:	2001      	movs	r0, #1
 8000538:	4240      	negs	r0, r0
 800053a:	4770      	bx	lr
 800053c:	2001      	movs	r0, #1
 800053e:	4770      	bx	lr

08000540 <__aeabi_uldivmod>:
 8000540:	2b00      	cmp	r3, #0
 8000542:	d111      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000544:	2a00      	cmp	r2, #0
 8000546:	d10f      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000548:	2900      	cmp	r1, #0
 800054a:	d100      	bne.n	800054e <__aeabi_uldivmod+0xe>
 800054c:	2800      	cmp	r0, #0
 800054e:	d002      	beq.n	8000556 <__aeabi_uldivmod+0x16>
 8000550:	2100      	movs	r1, #0
 8000552:	43c9      	mvns	r1, r1
 8000554:	1c08      	adds	r0, r1, #0
 8000556:	b407      	push	{r0, r1, r2}
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <__aeabi_uldivmod+0x24>)
 800055a:	a102      	add	r1, pc, #8	; (adr r1, 8000564 <__aeabi_uldivmod+0x24>)
 800055c:	1840      	adds	r0, r0, r1
 800055e:	9002      	str	r0, [sp, #8]
 8000560:	bd03      	pop	{r0, r1, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	fffffed5 	.word	0xfffffed5
 8000568:	b403      	push	{r0, r1}
 800056a:	4668      	mov	r0, sp
 800056c:	b501      	push	{r0, lr}
 800056e:	9802      	ldr	r0, [sp, #8]
 8000570:	f000 f866 	bl	8000640 <__udivmoddi4>
 8000574:	9b01      	ldr	r3, [sp, #4]
 8000576:	469e      	mov	lr, r3
 8000578:	b002      	add	sp, #8
 800057a:	bc0c      	pop	{r2, r3}
 800057c:	4770      	bx	lr
 800057e:	46c0      	nop			; (mov r8, r8)

08000580 <__aeabi_lmul>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	46ce      	mov	lr, r9
 8000584:	4647      	mov	r7, r8
 8000586:	0415      	lsls	r5, r2, #16
 8000588:	0c2d      	lsrs	r5, r5, #16
 800058a:	002e      	movs	r6, r5
 800058c:	b580      	push	{r7, lr}
 800058e:	0407      	lsls	r7, r0, #16
 8000590:	0c14      	lsrs	r4, r2, #16
 8000592:	0c3f      	lsrs	r7, r7, #16
 8000594:	4699      	mov	r9, r3
 8000596:	0c03      	lsrs	r3, r0, #16
 8000598:	437e      	muls	r6, r7
 800059a:	435d      	muls	r5, r3
 800059c:	4367      	muls	r7, r4
 800059e:	4363      	muls	r3, r4
 80005a0:	197f      	adds	r7, r7, r5
 80005a2:	0c34      	lsrs	r4, r6, #16
 80005a4:	19e4      	adds	r4, r4, r7
 80005a6:	469c      	mov	ip, r3
 80005a8:	42a5      	cmp	r5, r4
 80005aa:	d903      	bls.n	80005b4 <__aeabi_lmul+0x34>
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	025b      	lsls	r3, r3, #9
 80005b0:	4698      	mov	r8, r3
 80005b2:	44c4      	add	ip, r8
 80005b4:	464b      	mov	r3, r9
 80005b6:	4343      	muls	r3, r0
 80005b8:	4351      	muls	r1, r2
 80005ba:	0c25      	lsrs	r5, r4, #16
 80005bc:	0436      	lsls	r6, r6, #16
 80005be:	4465      	add	r5, ip
 80005c0:	0c36      	lsrs	r6, r6, #16
 80005c2:	0424      	lsls	r4, r4, #16
 80005c4:	19a4      	adds	r4, r4, r6
 80005c6:	195b      	adds	r3, r3, r5
 80005c8:	1859      	adds	r1, r3, r1
 80005ca:	0020      	movs	r0, r4
 80005cc:	bc0c      	pop	{r2, r3}
 80005ce:	4690      	mov	r8, r2
 80005d0:	4699      	mov	r9, r3
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d4 <__aeabi_f2uiz>:
 80005d4:	219e      	movs	r1, #158	; 0x9e
 80005d6:	b510      	push	{r4, lr}
 80005d8:	05c9      	lsls	r1, r1, #23
 80005da:	1c04      	adds	r4, r0, #0
 80005dc:	f7ff ff9c 	bl	8000518 <__aeabi_fcmpge>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d103      	bne.n	80005ec <__aeabi_f2uiz+0x18>
 80005e4:	1c20      	adds	r0, r4, #0
 80005e6:	f000 ff55 	bl	8001494 <__aeabi_f2iz>
 80005ea:	bd10      	pop	{r4, pc}
 80005ec:	219e      	movs	r1, #158	; 0x9e
 80005ee:	1c20      	adds	r0, r4, #0
 80005f0:	05c9      	lsls	r1, r1, #23
 80005f2:	f000 fd8b 	bl	800110c <__aeabi_fsub>
 80005f6:	f000 ff4d 	bl	8001494 <__aeabi_f2iz>
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	061b      	lsls	r3, r3, #24
 80005fe:	469c      	mov	ip, r3
 8000600:	4460      	add	r0, ip
 8000602:	e7f2      	b.n	80005ea <__aeabi_f2uiz+0x16>

08000604 <__aeabi_d2uiz>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	2200      	movs	r2, #0
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__aeabi_d2uiz+0x38>)
 800060a:	0004      	movs	r4, r0
 800060c:	000d      	movs	r5, r1
 800060e:	f7ff ff49 	bl	80004a4 <__aeabi_dcmpge>
 8000612:	2800      	cmp	r0, #0
 8000614:	d104      	bne.n	8000620 <__aeabi_d2uiz+0x1c>
 8000616:	0020      	movs	r0, r4
 8000618:	0029      	movs	r1, r5
 800061a:	f002 fce1 	bl	8002fe0 <__aeabi_d2iz>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <__aeabi_d2uiz+0x38>)
 8000622:	2200      	movs	r2, #0
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f002 f976 	bl	8002918 <__aeabi_dsub>
 800062c:	f002 fcd8 	bl	8002fe0 <__aeabi_d2iz>
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	061b      	lsls	r3, r3, #24
 8000634:	469c      	mov	ip, r3
 8000636:	4460      	add	r0, ip
 8000638:	e7f1      	b.n	800061e <__aeabi_d2uiz+0x1a>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	41e00000 	.word	0x41e00000

08000640 <__udivmoddi4>:
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	464f      	mov	r7, r9
 8000644:	4646      	mov	r6, r8
 8000646:	46d6      	mov	lr, sl
 8000648:	b5c0      	push	{r6, r7, lr}
 800064a:	0004      	movs	r4, r0
 800064c:	b082      	sub	sp, #8
 800064e:	000d      	movs	r5, r1
 8000650:	4691      	mov	r9, r2
 8000652:	4698      	mov	r8, r3
 8000654:	428b      	cmp	r3, r1
 8000656:	d82f      	bhi.n	80006b8 <__udivmoddi4+0x78>
 8000658:	d02c      	beq.n	80006b4 <__udivmoddi4+0x74>
 800065a:	4641      	mov	r1, r8
 800065c:	4648      	mov	r0, r9
 800065e:	f002 fe55 	bl	800330c <__clzdi2>
 8000662:	0029      	movs	r1, r5
 8000664:	0006      	movs	r6, r0
 8000666:	0020      	movs	r0, r4
 8000668:	f002 fe50 	bl	800330c <__clzdi2>
 800066c:	1a33      	subs	r3, r6, r0
 800066e:	469c      	mov	ip, r3
 8000670:	3b20      	subs	r3, #32
 8000672:	469a      	mov	sl, r3
 8000674:	d500      	bpl.n	8000678 <__udivmoddi4+0x38>
 8000676:	e076      	b.n	8000766 <__udivmoddi4+0x126>
 8000678:	464b      	mov	r3, r9
 800067a:	4652      	mov	r2, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001f      	movs	r7, r3
 8000680:	464b      	mov	r3, r9
 8000682:	4662      	mov	r2, ip
 8000684:	4093      	lsls	r3, r2
 8000686:	001e      	movs	r6, r3
 8000688:	42af      	cmp	r7, r5
 800068a:	d828      	bhi.n	80006de <__udivmoddi4+0x9e>
 800068c:	d025      	beq.n	80006da <__udivmoddi4+0x9a>
 800068e:	4653      	mov	r3, sl
 8000690:	1ba4      	subs	r4, r4, r6
 8000692:	41bd      	sbcs	r5, r7
 8000694:	2b00      	cmp	r3, #0
 8000696:	da00      	bge.n	800069a <__udivmoddi4+0x5a>
 8000698:	e07b      	b.n	8000792 <__udivmoddi4+0x152>
 800069a:	2200      	movs	r2, #0
 800069c:	2300      	movs	r3, #0
 800069e:	9200      	str	r2, [sp, #0]
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2301      	movs	r3, #1
 80006a4:	4652      	mov	r2, sl
 80006a6:	4093      	lsls	r3, r2
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2301      	movs	r3, #1
 80006ac:	4662      	mov	r2, ip
 80006ae:	4093      	lsls	r3, r2
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	e018      	b.n	80006e6 <__udivmoddi4+0xa6>
 80006b4:	4282      	cmp	r2, r0
 80006b6:	d9d0      	bls.n	800065a <__udivmoddi4+0x1a>
 80006b8:	2200      	movs	r2, #0
 80006ba:	2300      	movs	r3, #0
 80006bc:	9200      	str	r2, [sp, #0]
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <__udivmoddi4+0x8a>
 80006c6:	601c      	str	r4, [r3, #0]
 80006c8:	605d      	str	r5, [r3, #4]
 80006ca:	9800      	ldr	r0, [sp, #0]
 80006cc:	9901      	ldr	r1, [sp, #4]
 80006ce:	b002      	add	sp, #8
 80006d0:	bc1c      	pop	{r2, r3, r4}
 80006d2:	4690      	mov	r8, r2
 80006d4:	4699      	mov	r9, r3
 80006d6:	46a2      	mov	sl, r4
 80006d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006da:	42a3      	cmp	r3, r4
 80006dc:	d9d7      	bls.n	800068e <__udivmoddi4+0x4e>
 80006de:	2200      	movs	r2, #0
 80006e0:	2300      	movs	r3, #0
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	4663      	mov	r3, ip
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0e9      	beq.n	80006c0 <__udivmoddi4+0x80>
 80006ec:	07fb      	lsls	r3, r7, #31
 80006ee:	4698      	mov	r8, r3
 80006f0:	4641      	mov	r1, r8
 80006f2:	0872      	lsrs	r2, r6, #1
 80006f4:	430a      	orrs	r2, r1
 80006f6:	087b      	lsrs	r3, r7, #1
 80006f8:	4666      	mov	r6, ip
 80006fa:	e00e      	b.n	800071a <__udivmoddi4+0xda>
 80006fc:	42ab      	cmp	r3, r5
 80006fe:	d101      	bne.n	8000704 <__udivmoddi4+0xc4>
 8000700:	42a2      	cmp	r2, r4
 8000702:	d80c      	bhi.n	800071e <__udivmoddi4+0xde>
 8000704:	1aa4      	subs	r4, r4, r2
 8000706:	419d      	sbcs	r5, r3
 8000708:	2001      	movs	r0, #1
 800070a:	1924      	adds	r4, r4, r4
 800070c:	416d      	adcs	r5, r5
 800070e:	2100      	movs	r1, #0
 8000710:	3e01      	subs	r6, #1
 8000712:	1824      	adds	r4, r4, r0
 8000714:	414d      	adcs	r5, r1
 8000716:	2e00      	cmp	r6, #0
 8000718:	d006      	beq.n	8000728 <__udivmoddi4+0xe8>
 800071a:	42ab      	cmp	r3, r5
 800071c:	d9ee      	bls.n	80006fc <__udivmoddi4+0xbc>
 800071e:	3e01      	subs	r6, #1
 8000720:	1924      	adds	r4, r4, r4
 8000722:	416d      	adcs	r5, r5
 8000724:	2e00      	cmp	r6, #0
 8000726:	d1f8      	bne.n	800071a <__udivmoddi4+0xda>
 8000728:	9800      	ldr	r0, [sp, #0]
 800072a:	9901      	ldr	r1, [sp, #4]
 800072c:	4653      	mov	r3, sl
 800072e:	1900      	adds	r0, r0, r4
 8000730:	4169      	adcs	r1, r5
 8000732:	2b00      	cmp	r3, #0
 8000734:	db23      	blt.n	800077e <__udivmoddi4+0x13e>
 8000736:	002b      	movs	r3, r5
 8000738:	4652      	mov	r2, sl
 800073a:	40d3      	lsrs	r3, r2
 800073c:	002a      	movs	r2, r5
 800073e:	4664      	mov	r4, ip
 8000740:	40e2      	lsrs	r2, r4
 8000742:	001c      	movs	r4, r3
 8000744:	4653      	mov	r3, sl
 8000746:	0015      	movs	r5, r2
 8000748:	2b00      	cmp	r3, #0
 800074a:	db2d      	blt.n	80007a8 <__udivmoddi4+0x168>
 800074c:	0026      	movs	r6, r4
 800074e:	4657      	mov	r7, sl
 8000750:	40be      	lsls	r6, r7
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4667      	mov	r7, ip
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e7ac      	b.n	80006c0 <__udivmoddi4+0x80>
 8000766:	4662      	mov	r2, ip
 8000768:	2320      	movs	r3, #32
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	464a      	mov	r2, r9
 800076e:	40da      	lsrs	r2, r3
 8000770:	4661      	mov	r1, ip
 8000772:	0013      	movs	r3, r2
 8000774:	4642      	mov	r2, r8
 8000776:	408a      	lsls	r2, r1
 8000778:	0017      	movs	r7, r2
 800077a:	431f      	orrs	r7, r3
 800077c:	e780      	b.n	8000680 <__udivmoddi4+0x40>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	002a      	movs	r2, r5
 8000786:	4666      	mov	r6, ip
 8000788:	409a      	lsls	r2, r3
 800078a:	0023      	movs	r3, r4
 800078c:	40f3      	lsrs	r3, r6
 800078e:	4313      	orrs	r3, r2
 8000790:	e7d4      	b.n	800073c <__udivmoddi4+0xfc>
 8000792:	4662      	mov	r2, ip
 8000794:	2320      	movs	r3, #32
 8000796:	2100      	movs	r1, #0
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	2200      	movs	r2, #0
 800079c:	9100      	str	r1, [sp, #0]
 800079e:	9201      	str	r2, [sp, #4]
 80007a0:	2201      	movs	r2, #1
 80007a2:	40da      	lsrs	r2, r3
 80007a4:	9201      	str	r2, [sp, #4]
 80007a6:	e780      	b.n	80006aa <__udivmoddi4+0x6a>
 80007a8:	2320      	movs	r3, #32
 80007aa:	4662      	mov	r2, ip
 80007ac:	0026      	movs	r6, r4
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	002f      	movs	r7, r5
 80007b4:	46b0      	mov	r8, r6
 80007b6:	4666      	mov	r6, ip
 80007b8:	40b7      	lsls	r7, r6
 80007ba:	4646      	mov	r6, r8
 80007bc:	003b      	movs	r3, r7
 80007be:	4333      	orrs	r3, r6
 80007c0:	e7c8      	b.n	8000754 <__udivmoddi4+0x114>
 80007c2:	46c0      	nop			; (mov r8, r8)

080007c4 <__aeabi_fadd>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	4647      	mov	r7, r8
 80007c8:	46ce      	mov	lr, r9
 80007ca:	0243      	lsls	r3, r0, #9
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0044      	lsls	r4, r0, #1
 80007d0:	0fc2      	lsrs	r2, r0, #31
 80007d2:	469c      	mov	ip, r3
 80007d4:	0048      	lsls	r0, r1, #1
 80007d6:	00dd      	lsls	r5, r3, #3
 80007d8:	024b      	lsls	r3, r1, #9
 80007da:	0e24      	lsrs	r4, r4, #24
 80007dc:	0a5b      	lsrs	r3, r3, #9
 80007de:	0e00      	lsrs	r0, r0, #24
 80007e0:	b580      	push	{r7, lr}
 80007e2:	4698      	mov	r8, r3
 80007e4:	0026      	movs	r6, r4
 80007e6:	4691      	mov	r9, r2
 80007e8:	0fc9      	lsrs	r1, r1, #31
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	1a27      	subs	r7, r4, r0
 80007ee:	428a      	cmp	r2, r1
 80007f0:	d029      	beq.n	8000846 <__aeabi_fadd+0x82>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	dd15      	ble.n	8000822 <__aeabi_fadd+0x5e>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d14a      	bne.n	8000890 <__aeabi_fadd+0xcc>
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d000      	beq.n	8000800 <__aeabi_fadd+0x3c>
 80007fe:	e095      	b.n	800092c <__aeabi_fadd+0x168>
 8000800:	08ed      	lsrs	r5, r5, #3
 8000802:	2cff      	cmp	r4, #255	; 0xff
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x44>
 8000806:	e088      	b.n	800091a <__aeabi_fadd+0x156>
 8000808:	026b      	lsls	r3, r5, #9
 800080a:	0a5b      	lsrs	r3, r3, #9
 800080c:	b2e6      	uxtb	r6, r4
 800080e:	025b      	lsls	r3, r3, #9
 8000810:	05f6      	lsls	r6, r6, #23
 8000812:	0a58      	lsrs	r0, r3, #9
 8000814:	4330      	orrs	r0, r6
 8000816:	07d2      	lsls	r2, r2, #31
 8000818:	4310      	orrs	r0, r2
 800081a:	bc0c      	pop	{r2, r3}
 800081c:	4690      	mov	r8, r2
 800081e:	4699      	mov	r9, r3
 8000820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000822:	2f00      	cmp	r7, #0
 8000824:	d000      	beq.n	8000828 <__aeabi_fadd+0x64>
 8000826:	e087      	b.n	8000938 <__aeabi_fadd+0x174>
 8000828:	1c60      	adds	r0, r4, #1
 800082a:	b2c0      	uxtb	r0, r0
 800082c:	2801      	cmp	r0, #1
 800082e:	dc00      	bgt.n	8000832 <__aeabi_fadd+0x6e>
 8000830:	e0b6      	b.n	80009a0 <__aeabi_fadd+0x1dc>
 8000832:	1aee      	subs	r6, r5, r3
 8000834:	0172      	lsls	r2, r6, #5
 8000836:	d500      	bpl.n	800083a <__aeabi_fadd+0x76>
 8000838:	e0c5      	b.n	80009c6 <__aeabi_fadd+0x202>
 800083a:	2e00      	cmp	r6, #0
 800083c:	d13d      	bne.n	80008ba <__aeabi_fadd+0xf6>
 800083e:	2200      	movs	r2, #0
 8000840:	2600      	movs	r6, #0
 8000842:	2300      	movs	r3, #0
 8000844:	e7e3      	b.n	800080e <__aeabi_fadd+0x4a>
 8000846:	2f00      	cmp	r7, #0
 8000848:	dc00      	bgt.n	800084c <__aeabi_fadd+0x88>
 800084a:	e096      	b.n	800097a <__aeabi_fadd+0x1b6>
 800084c:	2800      	cmp	r0, #0
 800084e:	d05d      	beq.n	800090c <__aeabi_fadd+0x148>
 8000850:	2cff      	cmp	r4, #255	; 0xff
 8000852:	d060      	beq.n	8000916 <__aeabi_fadd+0x152>
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	04d2      	lsls	r2, r2, #19
 8000858:	4313      	orrs	r3, r2
 800085a:	2f1b      	cmp	r7, #27
 800085c:	dd00      	ble.n	8000860 <__aeabi_fadd+0x9c>
 800085e:	e0ec      	b.n	8000a3a <__aeabi_fadd+0x276>
 8000860:	2220      	movs	r2, #32
 8000862:	1bd2      	subs	r2, r2, r7
 8000864:	0018      	movs	r0, r3
 8000866:	4093      	lsls	r3, r2
 8000868:	40f8      	lsrs	r0, r7
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	4193      	sbcs	r3, r2
 800086e:	4303      	orrs	r3, r0
 8000870:	18ed      	adds	r5, r5, r3
 8000872:	016b      	lsls	r3, r5, #5
 8000874:	d57b      	bpl.n	800096e <__aeabi_fadd+0x1aa>
 8000876:	3401      	adds	r4, #1
 8000878:	2cff      	cmp	r4, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0xba>
 800087c:	e0b7      	b.n	80009ee <__aeabi_fadd+0x22a>
 800087e:	2201      	movs	r2, #1
 8000880:	2607      	movs	r6, #7
 8000882:	402a      	ands	r2, r5
 8000884:	086b      	lsrs	r3, r5, #1
 8000886:	4d9a      	ldr	r5, [pc, #616]	; (8000af0 <__aeabi_fadd+0x32c>)
 8000888:	401d      	ands	r5, r3
 800088a:	4315      	orrs	r5, r2
 800088c:	402e      	ands	r6, r5
 800088e:	e029      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000890:	2cff      	cmp	r4, #255	; 0xff
 8000892:	d0b5      	beq.n	8000800 <__aeabi_fadd+0x3c>
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	04d2      	lsls	r2, r2, #19
 8000898:	4313      	orrs	r3, r2
 800089a:	2f1b      	cmp	r7, #27
 800089c:	dd00      	ble.n	80008a0 <__aeabi_fadd+0xdc>
 800089e:	e0b2      	b.n	8000a06 <__aeabi_fadd+0x242>
 80008a0:	2220      	movs	r2, #32
 80008a2:	1bd2      	subs	r2, r2, r7
 80008a4:	0019      	movs	r1, r3
 80008a6:	4093      	lsls	r3, r2
 80008a8:	40f9      	lsrs	r1, r7
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	4193      	sbcs	r3, r2
 80008ae:	430b      	orrs	r3, r1
 80008b0:	1aed      	subs	r5, r5, r3
 80008b2:	016b      	lsls	r3, r5, #5
 80008b4:	d55b      	bpl.n	800096e <__aeabi_fadd+0x1aa>
 80008b6:	01ad      	lsls	r5, r5, #6
 80008b8:	09ae      	lsrs	r6, r5, #6
 80008ba:	0030      	movs	r0, r6
 80008bc:	f002 fd08 	bl	80032d0 <__clzsi2>
 80008c0:	3805      	subs	r0, #5
 80008c2:	4086      	lsls	r6, r0
 80008c4:	4284      	cmp	r4, r0
 80008c6:	dc65      	bgt.n	8000994 <__aeabi_fadd+0x1d0>
 80008c8:	1b04      	subs	r4, r0, r4
 80008ca:	0033      	movs	r3, r6
 80008cc:	2020      	movs	r0, #32
 80008ce:	3401      	adds	r4, #1
 80008d0:	40e3      	lsrs	r3, r4
 80008d2:	1b04      	subs	r4, r0, r4
 80008d4:	40a6      	lsls	r6, r4
 80008d6:	1e75      	subs	r5, r6, #1
 80008d8:	41ae      	sbcs	r6, r5
 80008da:	4333      	orrs	r3, r6
 80008dc:	2607      	movs	r6, #7
 80008de:	001d      	movs	r5, r3
 80008e0:	2400      	movs	r4, #0
 80008e2:	401e      	ands	r6, r3
 80008e4:	2201      	movs	r2, #1
 80008e6:	464b      	mov	r3, r9
 80008e8:	401a      	ands	r2, r3
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d004      	beq.n	80008f8 <__aeabi_fadd+0x134>
 80008ee:	230f      	movs	r3, #15
 80008f0:	402b      	ands	r3, r5
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fadd+0x134>
 80008f6:	3504      	adds	r5, #4
 80008f8:	016b      	lsls	r3, r5, #5
 80008fa:	d400      	bmi.n	80008fe <__aeabi_fadd+0x13a>
 80008fc:	e780      	b.n	8000800 <__aeabi_fadd+0x3c>
 80008fe:	3401      	adds	r4, #1
 8000900:	b2e6      	uxtb	r6, r4
 8000902:	2cff      	cmp	r4, #255	; 0xff
 8000904:	d12f      	bne.n	8000966 <__aeabi_fadd+0x1a2>
 8000906:	26ff      	movs	r6, #255	; 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e780      	b.n	800080e <__aeabi_fadd+0x4a>
 800090c:	2b00      	cmp	r3, #0
 800090e:	d152      	bne.n	80009b6 <__aeabi_fadd+0x1f2>
 8000910:	2cff      	cmp	r4, #255	; 0xff
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x152>
 8000914:	e774      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000916:	000a      	movs	r2, r1
 8000918:	08ed      	lsrs	r5, r5, #3
 800091a:	2d00      	cmp	r5, #0
 800091c:	d0f3      	beq.n	8000906 <__aeabi_fadd+0x142>
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	03db      	lsls	r3, r3, #15
 8000922:	432b      	orrs	r3, r5
 8000924:	025b      	lsls	r3, r3, #9
 8000926:	0a5b      	lsrs	r3, r3, #9
 8000928:	26ff      	movs	r6, #255	; 0xff
 800092a:	e770      	b.n	800080e <__aeabi_fadd+0x4a>
 800092c:	3f01      	subs	r7, #1
 800092e:	2f00      	cmp	r7, #0
 8000930:	d0be      	beq.n	80008b0 <__aeabi_fadd+0xec>
 8000932:	2cff      	cmp	r4, #255	; 0xff
 8000934:	d1b1      	bne.n	800089a <__aeabi_fadd+0xd6>
 8000936:	e763      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_fadd+0x208>
 800093c:	28ff      	cmp	r0, #255	; 0xff
 800093e:	d069      	beq.n	8000a14 <__aeabi_fadd+0x250>
 8000940:	2480      	movs	r4, #128	; 0x80
 8000942:	04e4      	lsls	r4, r4, #19
 8000944:	427a      	negs	r2, r7
 8000946:	4325      	orrs	r5, r4
 8000948:	2a1b      	cmp	r2, #27
 800094a:	dd00      	ble.n	800094e <__aeabi_fadd+0x18a>
 800094c:	e0c5      	b.n	8000ada <__aeabi_fadd+0x316>
 800094e:	002c      	movs	r4, r5
 8000950:	2620      	movs	r6, #32
 8000952:	40d4      	lsrs	r4, r2
 8000954:	1ab2      	subs	r2, r6, r2
 8000956:	4095      	lsls	r5, r2
 8000958:	1e6a      	subs	r2, r5, #1
 800095a:	4195      	sbcs	r5, r2
 800095c:	4325      	orrs	r5, r4
 800095e:	1b5d      	subs	r5, r3, r5
 8000960:	0004      	movs	r4, r0
 8000962:	4689      	mov	r9, r1
 8000964:	e7a5      	b.n	80008b2 <__aeabi_fadd+0xee>
 8000966:	01ab      	lsls	r3, r5, #6
 8000968:	0a5b      	lsrs	r3, r3, #9
 800096a:	e750      	b.n	800080e <__aeabi_fadd+0x4a>
 800096c:	2400      	movs	r4, #0
 800096e:	2201      	movs	r2, #1
 8000970:	464b      	mov	r3, r9
 8000972:	401a      	ands	r2, r3
 8000974:	076b      	lsls	r3, r5, #29
 8000976:	d1ba      	bne.n	80008ee <__aeabi_fadd+0x12a>
 8000978:	e742      	b.n	8000800 <__aeabi_fadd+0x3c>
 800097a:	2f00      	cmp	r7, #0
 800097c:	d13b      	bne.n	80009f6 <__aeabi_fadd+0x232>
 800097e:	3401      	adds	r4, #1
 8000980:	b2e0      	uxtb	r0, r4
 8000982:	2801      	cmp	r0, #1
 8000984:	dd4a      	ble.n	8000a1c <__aeabi_fadd+0x258>
 8000986:	2cff      	cmp	r4, #255	; 0xff
 8000988:	d0bd      	beq.n	8000906 <__aeabi_fadd+0x142>
 800098a:	2607      	movs	r6, #7
 800098c:	18ed      	adds	r5, r5, r3
 800098e:	086d      	lsrs	r5, r5, #1
 8000990:	402e      	ands	r6, r5
 8000992:	e7a7      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000994:	2307      	movs	r3, #7
 8000996:	4d57      	ldr	r5, [pc, #348]	; (8000af4 <__aeabi_fadd+0x330>)
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	4035      	ands	r5, r6
 800099c:	401e      	ands	r6, r3
 800099e:	e7a1      	b.n	80008e4 <__aeabi_fadd+0x120>
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d11b      	bne.n	80009dc <__aeabi_fadd+0x218>
 80009a4:	2d00      	cmp	r5, #0
 80009a6:	d16e      	bne.n	8000a86 <__aeabi_fadd+0x2c2>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_fadd+0x1ea>
 80009ac:	e09a      	b.n	8000ae4 <__aeabi_fadd+0x320>
 80009ae:	000a      	movs	r2, r1
 80009b0:	001d      	movs	r5, r3
 80009b2:	003c      	movs	r4, r7
 80009b4:	e724      	b.n	8000800 <__aeabi_fadd+0x3c>
 80009b6:	3f01      	subs	r7, #1
 80009b8:	2f00      	cmp	r7, #0
 80009ba:	d100      	bne.n	80009be <__aeabi_fadd+0x1fa>
 80009bc:	e758      	b.n	8000870 <__aeabi_fadd+0xac>
 80009be:	2cff      	cmp	r4, #255	; 0xff
 80009c0:	d000      	beq.n	80009c4 <__aeabi_fadd+0x200>
 80009c2:	e74a      	b.n	800085a <__aeabi_fadd+0x96>
 80009c4:	e7a7      	b.n	8000916 <__aeabi_fadd+0x152>
 80009c6:	1b5e      	subs	r6, r3, r5
 80009c8:	4689      	mov	r9, r1
 80009ca:	e776      	b.n	80008ba <__aeabi_fadd+0xf6>
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d11c      	bne.n	8000a0a <__aeabi_fadd+0x246>
 80009d0:	000a      	movs	r2, r1
 80009d2:	28ff      	cmp	r0, #255	; 0xff
 80009d4:	d01f      	beq.n	8000a16 <__aeabi_fadd+0x252>
 80009d6:	0004      	movs	r4, r0
 80009d8:	001d      	movs	r5, r3
 80009da:	e711      	b.n	8000800 <__aeabi_fadd+0x3c>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d15d      	bne.n	8000a9c <__aeabi_fadd+0x2d8>
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d117      	bne.n	8000a14 <__aeabi_fadd+0x250>
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	2200      	movs	r2, #0
 80009e8:	03db      	lsls	r3, r3, #15
 80009ea:	26ff      	movs	r6, #255	; 0xff
 80009ec:	e70f      	b.n	800080e <__aeabi_fadd+0x4a>
 80009ee:	000a      	movs	r2, r1
 80009f0:	26ff      	movs	r6, #255	; 0xff
 80009f2:	2300      	movs	r3, #0
 80009f4:	e70b      	b.n	800080e <__aeabi_fadd+0x4a>
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d121      	bne.n	8000a3e <__aeabi_fadd+0x27a>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d166      	bne.n	8000acc <__aeabi_fadd+0x308>
 80009fe:	28ff      	cmp	r0, #255	; 0xff
 8000a00:	d1e9      	bne.n	80009d6 <__aeabi_fadd+0x212>
 8000a02:	001d      	movs	r5, r3
 8000a04:	e787      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e752      	b.n	80008b0 <__aeabi_fadd+0xec>
 8000a0a:	1c7a      	adds	r2, r7, #1
 8000a0c:	d0a7      	beq.n	800095e <__aeabi_fadd+0x19a>
 8000a0e:	43fa      	mvns	r2, r7
 8000a10:	28ff      	cmp	r0, #255	; 0xff
 8000a12:	d199      	bne.n	8000948 <__aeabi_fadd+0x184>
 8000a14:	000a      	movs	r2, r1
 8000a16:	001d      	movs	r5, r3
 8000a18:	24ff      	movs	r4, #255	; 0xff
 8000a1a:	e6f1      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000a1c:	2e00      	cmp	r6, #0
 8000a1e:	d121      	bne.n	8000a64 <__aeabi_fadd+0x2a0>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d04f      	beq.n	8000ac4 <__aeabi_fadd+0x300>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d04c      	beq.n	8000ac2 <__aeabi_fadd+0x2fe>
 8000a28:	18ed      	adds	r5, r5, r3
 8000a2a:	016b      	lsls	r3, r5, #5
 8000a2c:	d59e      	bpl.n	800096c <__aeabi_fadd+0x1a8>
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <__aeabi_fadd+0x330>)
 8000a30:	3607      	adds	r6, #7
 8000a32:	402e      	ands	r6, r5
 8000a34:	2401      	movs	r4, #1
 8000a36:	401d      	ands	r5, r3
 8000a38:	e754      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xac>
 8000a3e:	28ff      	cmp	r0, #255	; 0xff
 8000a40:	d0df      	beq.n	8000a02 <__aeabi_fadd+0x23e>
 8000a42:	2480      	movs	r4, #128	; 0x80
 8000a44:	04e4      	lsls	r4, r4, #19
 8000a46:	427f      	negs	r7, r7
 8000a48:	4325      	orrs	r5, r4
 8000a4a:	2f1b      	cmp	r7, #27
 8000a4c:	dc4d      	bgt.n	8000aea <__aeabi_fadd+0x326>
 8000a4e:	2620      	movs	r6, #32
 8000a50:	1bf6      	subs	r6, r6, r7
 8000a52:	002c      	movs	r4, r5
 8000a54:	40b5      	lsls	r5, r6
 8000a56:	40fc      	lsrs	r4, r7
 8000a58:	1e6a      	subs	r2, r5, #1
 8000a5a:	4195      	sbcs	r5, r2
 8000a5c:	4325      	orrs	r5, r4
 8000a5e:	18ed      	adds	r5, r5, r3
 8000a60:	0004      	movs	r4, r0
 8000a62:	e706      	b.n	8000872 <__aeabi_fadd+0xae>
 8000a64:	2d00      	cmp	r5, #0
 8000a66:	d0cc      	beq.n	8000a02 <__aeabi_fadd+0x23e>
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_fadd+0x2aa>
 8000a6c:	e753      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	4660      	mov	r0, ip
 8000a72:	03c9      	lsls	r1, r1, #15
 8000a74:	4208      	tst	r0, r1
 8000a76:	d003      	beq.n	8000a80 <__aeabi_fadd+0x2bc>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	4208      	tst	r0, r1
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fadd+0x2bc>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	2101      	movs	r1, #1
 8000a82:	4011      	ands	r1, r2
 8000a84:	e747      	b.n	8000916 <__aeabi_fadd+0x152>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x2c8>
 8000a8a:	e6b9      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000a8c:	1aea      	subs	r2, r5, r3
 8000a8e:	0150      	lsls	r0, r2, #5
 8000a90:	d525      	bpl.n	8000ade <__aeabi_fadd+0x31a>
 8000a92:	2607      	movs	r6, #7
 8000a94:	1b5d      	subs	r5, r3, r5
 8000a96:	402e      	ands	r6, r5
 8000a98:	4689      	mov	r9, r1
 8000a9a:	e723      	b.n	80008e4 <__aeabi_fadd+0x120>
 8000a9c:	24ff      	movs	r4, #255	; 0xff
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fadd+0x2e0>
 8000aa2:	e6ad      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	4660      	mov	r0, ip
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	4210      	tst	r0, r2
 8000aac:	d004      	beq.n	8000ab8 <__aeabi_fadd+0x2f4>
 8000aae:	4640      	mov	r0, r8
 8000ab0:	4210      	tst	r0, r2
 8000ab2:	d101      	bne.n	8000ab8 <__aeabi_fadd+0x2f4>
 8000ab4:	001d      	movs	r5, r3
 8000ab6:	4689      	mov	r9, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	464b      	mov	r3, r9
 8000abc:	24ff      	movs	r4, #255	; 0xff
 8000abe:	401a      	ands	r2, r3
 8000ac0:	e69e      	b.n	8000800 <__aeabi_fadd+0x3c>
 8000ac2:	002b      	movs	r3, r5
 8000ac4:	08dd      	lsrs	r5, r3, #3
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	2400      	movs	r4, #0
 8000aca:	e69d      	b.n	8000808 <__aeabi_fadd+0x44>
 8000acc:	1c7a      	adds	r2, r7, #1
 8000ace:	d0c6      	beq.n	8000a5e <__aeabi_fadd+0x29a>
 8000ad0:	43ff      	mvns	r7, r7
 8000ad2:	28ff      	cmp	r0, #255	; 0xff
 8000ad4:	d1b9      	bne.n	8000a4a <__aeabi_fadd+0x286>
 8000ad6:	001d      	movs	r5, r3
 8000ad8:	e71d      	b.n	8000916 <__aeabi_fadd+0x152>
 8000ada:	2501      	movs	r5, #1
 8000adc:	e73f      	b.n	800095e <__aeabi_fadd+0x19a>
 8000ade:	1e15      	subs	r5, r2, #0
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fadd+0x320>
 8000ae2:	e744      	b.n	800096e <__aeabi_fadd+0x1aa>
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e691      	b.n	800080e <__aeabi_fadd+0x4a>
 8000aea:	2501      	movs	r5, #1
 8000aec:	e7b7      	b.n	8000a5e <__aeabi_fadd+0x29a>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	7dffffff 	.word	0x7dffffff
 8000af4:	fbffffff 	.word	0xfbffffff

08000af8 <__aeabi_fdiv>:
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	4657      	mov	r7, sl
 8000afc:	464e      	mov	r6, r9
 8000afe:	4645      	mov	r5, r8
 8000b00:	46de      	mov	lr, fp
 8000b02:	0244      	lsls	r4, r0, #9
 8000b04:	b5e0      	push	{r5, r6, r7, lr}
 8000b06:	0046      	lsls	r6, r0, #1
 8000b08:	4688      	mov	r8, r1
 8000b0a:	0a64      	lsrs	r4, r4, #9
 8000b0c:	0e36      	lsrs	r6, r6, #24
 8000b0e:	0fc7      	lsrs	r7, r0, #31
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d063      	beq.n	8000bdc <__aeabi_fdiv+0xe4>
 8000b14:	2eff      	cmp	r6, #255	; 0xff
 8000b16:	d024      	beq.n	8000b62 <__aeabi_fdiv+0x6a>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	00e4      	lsls	r4, r4, #3
 8000b1c:	04db      	lsls	r3, r3, #19
 8000b1e:	431c      	orrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	4699      	mov	r9, r3
 8000b24:	469b      	mov	fp, r3
 8000b26:	3e7f      	subs	r6, #127	; 0x7f
 8000b28:	4643      	mov	r3, r8
 8000b2a:	4642      	mov	r2, r8
 8000b2c:	025d      	lsls	r5, r3, #9
 8000b2e:	0fd2      	lsrs	r2, r2, #31
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	0a6d      	lsrs	r5, r5, #9
 8000b34:	0e1b      	lsrs	r3, r3, #24
 8000b36:	4690      	mov	r8, r2
 8000b38:	4692      	mov	sl, r2
 8000b3a:	d065      	beq.n	8000c08 <__aeabi_fdiv+0x110>
 8000b3c:	2bff      	cmp	r3, #255	; 0xff
 8000b3e:	d055      	beq.n	8000bec <__aeabi_fdiv+0xf4>
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	2100      	movs	r1, #0
 8000b44:	00ed      	lsls	r5, r5, #3
 8000b46:	04d2      	lsls	r2, r2, #19
 8000b48:	3b7f      	subs	r3, #127	; 0x7f
 8000b4a:	4315      	orrs	r5, r2
 8000b4c:	1af6      	subs	r6, r6, r3
 8000b4e:	4643      	mov	r3, r8
 8000b50:	464a      	mov	r2, r9
 8000b52:	407b      	eors	r3, r7
 8000b54:	2a0f      	cmp	r2, #15
 8000b56:	d900      	bls.n	8000b5a <__aeabi_fdiv+0x62>
 8000b58:	e08d      	b.n	8000c76 <__aeabi_fdiv+0x17e>
 8000b5a:	486d      	ldr	r0, [pc, #436]	; (8000d10 <__aeabi_fdiv+0x218>)
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	5882      	ldr	r2, [r0, r2]
 8000b60:	4697      	mov	pc, r2
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d154      	bne.n	8000c10 <__aeabi_fdiv+0x118>
 8000b66:	2308      	movs	r3, #8
 8000b68:	4699      	mov	r9, r3
 8000b6a:	3b06      	subs	r3, #6
 8000b6c:	26ff      	movs	r6, #255	; 0xff
 8000b6e:	469b      	mov	fp, r3
 8000b70:	e7da      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000b72:	2500      	movs	r5, #0
 8000b74:	4653      	mov	r3, sl
 8000b76:	2902      	cmp	r1, #2
 8000b78:	d01b      	beq.n	8000bb2 <__aeabi_fdiv+0xba>
 8000b7a:	2903      	cmp	r1, #3
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fdiv+0x88>
 8000b7e:	e0bf      	b.n	8000d00 <__aeabi_fdiv+0x208>
 8000b80:	2901      	cmp	r1, #1
 8000b82:	d028      	beq.n	8000bd6 <__aeabi_fdiv+0xde>
 8000b84:	0030      	movs	r0, r6
 8000b86:	307f      	adds	r0, #127	; 0x7f
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	dd20      	ble.n	8000bce <__aeabi_fdiv+0xd6>
 8000b8c:	076a      	lsls	r2, r5, #29
 8000b8e:	d004      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b90:	220f      	movs	r2, #15
 8000b92:	402a      	ands	r2, r5
 8000b94:	2a04      	cmp	r2, #4
 8000b96:	d000      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b98:	3504      	adds	r5, #4
 8000b9a:	012a      	lsls	r2, r5, #4
 8000b9c:	d503      	bpl.n	8000ba6 <__aeabi_fdiv+0xae>
 8000b9e:	0030      	movs	r0, r6
 8000ba0:	4a5c      	ldr	r2, [pc, #368]	; (8000d14 <__aeabi_fdiv+0x21c>)
 8000ba2:	3080      	adds	r0, #128	; 0x80
 8000ba4:	4015      	ands	r5, r2
 8000ba6:	28fe      	cmp	r0, #254	; 0xfe
 8000ba8:	dc03      	bgt.n	8000bb2 <__aeabi_fdiv+0xba>
 8000baa:	01ac      	lsls	r4, r5, #6
 8000bac:	0a64      	lsrs	r4, r4, #9
 8000bae:	b2c2      	uxtb	r2, r0
 8000bb0:	e001      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	0264      	lsls	r4, r4, #9
 8000bb8:	05d2      	lsls	r2, r2, #23
 8000bba:	0a60      	lsrs	r0, r4, #9
 8000bbc:	07db      	lsls	r3, r3, #31
 8000bbe:	4310      	orrs	r0, r2
 8000bc0:	4318      	orrs	r0, r3
 8000bc2:	bc3c      	pop	{r2, r3, r4, r5}
 8000bc4:	4690      	mov	r8, r2
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	46a2      	mov	sl, r4
 8000bca:	46ab      	mov	fp, r5
 8000bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bce:	2201      	movs	r2, #1
 8000bd0:	1a10      	subs	r0, r2, r0
 8000bd2:	281b      	cmp	r0, #27
 8000bd4:	dd7c      	ble.n	8000cd0 <__aeabi_fdiv+0x1d8>
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2400      	movs	r4, #0
 8000bda:	e7ec      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d11d      	bne.n	8000c1c <__aeabi_fdiv+0x124>
 8000be0:	2304      	movs	r3, #4
 8000be2:	4699      	mov	r9, r3
 8000be4:	3b03      	subs	r3, #3
 8000be6:	2600      	movs	r6, #0
 8000be8:	469b      	mov	fp, r3
 8000bea:	e79d      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000bec:	3eff      	subs	r6, #255	; 0xff
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d120      	bne.n	8000c34 <__aeabi_fdiv+0x13c>
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	2a0f      	cmp	r2, #15
 8000bfe:	d8d8      	bhi.n	8000bb2 <__aeabi_fdiv+0xba>
 8000c00:	4845      	ldr	r0, [pc, #276]	; (8000d18 <__aeabi_fdiv+0x220>)
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	5882      	ldr	r2, [r0, r2]
 8000c06:	4697      	mov	pc, r2
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d119      	bne.n	8000c40 <__aeabi_fdiv+0x148>
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	e7f1      	b.n	8000bf4 <__aeabi_fdiv+0xfc>
 8000c10:	230c      	movs	r3, #12
 8000c12:	4699      	mov	r9, r3
 8000c14:	3b09      	subs	r3, #9
 8000c16:	26ff      	movs	r6, #255	; 0xff
 8000c18:	469b      	mov	fp, r3
 8000c1a:	e785      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f002 fb57 	bl	80032d0 <__clzsi2>
 8000c22:	2676      	movs	r6, #118	; 0x76
 8000c24:	1f43      	subs	r3, r0, #5
 8000c26:	409c      	lsls	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	4276      	negs	r6, r6
 8000c2c:	1a36      	subs	r6, r6, r0
 8000c2e:	4699      	mov	r9, r3
 8000c30:	469b      	mov	fp, r3
 8000c32:	e779      	b.n	8000b28 <__aeabi_fdiv+0x30>
 8000c34:	464a      	mov	r2, r9
 8000c36:	2303      	movs	r3, #3
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	4691      	mov	r9, r2
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	e786      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c40:	0028      	movs	r0, r5
 8000c42:	f002 fb45 	bl	80032d0 <__clzsi2>
 8000c46:	1f43      	subs	r3, r0, #5
 8000c48:	1836      	adds	r6, r6, r0
 8000c4a:	409d      	lsls	r5, r3
 8000c4c:	3676      	adds	r6, #118	; 0x76
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e77d      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c52:	2480      	movs	r4, #128	; 0x80
 8000c54:	2300      	movs	r3, #0
 8000c56:	03e4      	lsls	r4, r4, #15
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	e7ac      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	03db      	lsls	r3, r3, #15
 8000c62:	421c      	tst	r4, r3
 8000c64:	d028      	beq.n	8000cb8 <__aeabi_fdiv+0x1c0>
 8000c66:	421d      	tst	r5, r3
 8000c68:	d126      	bne.n	8000cb8 <__aeabi_fdiv+0x1c0>
 8000c6a:	432b      	orrs	r3, r5
 8000c6c:	025c      	lsls	r4, r3, #9
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	4643      	mov	r3, r8
 8000c72:	22ff      	movs	r2, #255	; 0xff
 8000c74:	e79f      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c76:	0162      	lsls	r2, r4, #5
 8000c78:	016c      	lsls	r4, r5, #5
 8000c7a:	42a2      	cmp	r2, r4
 8000c7c:	d224      	bcs.n	8000cc8 <__aeabi_fdiv+0x1d0>
 8000c7e:	211b      	movs	r1, #27
 8000c80:	2500      	movs	r5, #0
 8000c82:	3e01      	subs	r6, #1
 8000c84:	2701      	movs	r7, #1
 8000c86:	0010      	movs	r0, r2
 8000c88:	006d      	lsls	r5, r5, #1
 8000c8a:	0052      	lsls	r2, r2, #1
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	db01      	blt.n	8000c94 <__aeabi_fdiv+0x19c>
 8000c90:	4294      	cmp	r4, r2
 8000c92:	d801      	bhi.n	8000c98 <__aeabi_fdiv+0x1a0>
 8000c94:	1b12      	subs	r2, r2, r4
 8000c96:	433d      	orrs	r5, r7
 8000c98:	3901      	subs	r1, #1
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d1f3      	bne.n	8000c86 <__aeabi_fdiv+0x18e>
 8000c9e:	0014      	movs	r4, r2
 8000ca0:	1e62      	subs	r2, r4, #1
 8000ca2:	4194      	sbcs	r4, r2
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	e76d      	b.n	8000b84 <__aeabi_fdiv+0x8c>
 8000ca8:	46ba      	mov	sl, r7
 8000caa:	4659      	mov	r1, fp
 8000cac:	0025      	movs	r5, r4
 8000cae:	4653      	mov	r3, sl
 8000cb0:	2902      	cmp	r1, #2
 8000cb2:	d000      	beq.n	8000cb6 <__aeabi_fdiv+0x1be>
 8000cb4:	e761      	b.n	8000b7a <__aeabi_fdiv+0x82>
 8000cb6:	e77c      	b.n	8000bb2 <__aeabi_fdiv+0xba>
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	03db      	lsls	r3, r3, #15
 8000cbc:	431c      	orrs	r4, r3
 8000cbe:	0264      	lsls	r4, r4, #9
 8000cc0:	0a64      	lsrs	r4, r4, #9
 8000cc2:	003b      	movs	r3, r7
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	e776      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000cc8:	1b12      	subs	r2, r2, r4
 8000cca:	211a      	movs	r1, #26
 8000ccc:	2501      	movs	r5, #1
 8000cce:	e7d9      	b.n	8000c84 <__aeabi_fdiv+0x18c>
 8000cd0:	369e      	adds	r6, #158	; 0x9e
 8000cd2:	002a      	movs	r2, r5
 8000cd4:	40b5      	lsls	r5, r6
 8000cd6:	002c      	movs	r4, r5
 8000cd8:	40c2      	lsrs	r2, r0
 8000cda:	1e65      	subs	r5, r4, #1
 8000cdc:	41ac      	sbcs	r4, r5
 8000cde:	4314      	orrs	r4, r2
 8000ce0:	0762      	lsls	r2, r4, #29
 8000ce2:	d004      	beq.n	8000cee <__aeabi_fdiv+0x1f6>
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	4022      	ands	r2, r4
 8000ce8:	2a04      	cmp	r2, #4
 8000cea:	d000      	beq.n	8000cee <__aeabi_fdiv+0x1f6>
 8000cec:	3404      	adds	r4, #4
 8000cee:	0162      	lsls	r2, r4, #5
 8000cf0:	d403      	bmi.n	8000cfa <__aeabi_fdiv+0x202>
 8000cf2:	01a4      	lsls	r4, r4, #6
 8000cf4:	0a64      	lsrs	r4, r4, #9
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	e75d      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	e75a      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000d00:	2480      	movs	r4, #128	; 0x80
 8000d02:	03e4      	lsls	r4, r4, #15
 8000d04:	432c      	orrs	r4, r5
 8000d06:	0264      	lsls	r4, r4, #9
 8000d08:	0a64      	lsrs	r4, r4, #9
 8000d0a:	22ff      	movs	r2, #255	; 0xff
 8000d0c:	e753      	b.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	08019aac 	.word	0x08019aac
 8000d14:	f7ffffff 	.word	0xf7ffffff
 8000d18:	08019aec 	.word	0x08019aec

08000d1c <__eqsf2>:
 8000d1c:	b570      	push	{r4, r5, r6, lr}
 8000d1e:	0042      	lsls	r2, r0, #1
 8000d20:	024e      	lsls	r6, r1, #9
 8000d22:	004c      	lsls	r4, r1, #1
 8000d24:	0245      	lsls	r5, r0, #9
 8000d26:	0a6d      	lsrs	r5, r5, #9
 8000d28:	0e12      	lsrs	r2, r2, #24
 8000d2a:	0fc3      	lsrs	r3, r0, #31
 8000d2c:	0a76      	lsrs	r6, r6, #9
 8000d2e:	0e24      	lsrs	r4, r4, #24
 8000d30:	0fc9      	lsrs	r1, r1, #31
 8000d32:	2aff      	cmp	r2, #255	; 0xff
 8000d34:	d00f      	beq.n	8000d56 <__eqsf2+0x3a>
 8000d36:	2cff      	cmp	r4, #255	; 0xff
 8000d38:	d011      	beq.n	8000d5e <__eqsf2+0x42>
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	42a2      	cmp	r2, r4
 8000d3e:	d000      	beq.n	8000d42 <__eqsf2+0x26>
 8000d40:	bd70      	pop	{r4, r5, r6, pc}
 8000d42:	42b5      	cmp	r5, r6
 8000d44:	d1fc      	bne.n	8000d40 <__eqsf2+0x24>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d00d      	beq.n	8000d66 <__eqsf2+0x4a>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d1f8      	bne.n	8000d40 <__eqsf2+0x24>
 8000d4e:	0028      	movs	r0, r5
 8000d50:	1e45      	subs	r5, r0, #1
 8000d52:	41a8      	sbcs	r0, r5
 8000d54:	e7f4      	b.n	8000d40 <__eqsf2+0x24>
 8000d56:	2001      	movs	r0, #1
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d1f1      	bne.n	8000d40 <__eqsf2+0x24>
 8000d5c:	e7eb      	b.n	8000d36 <__eqsf2+0x1a>
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d1ed      	bne.n	8000d40 <__eqsf2+0x24>
 8000d64:	e7e9      	b.n	8000d3a <__eqsf2+0x1e>
 8000d66:	2000      	movs	r0, #0
 8000d68:	e7ea      	b.n	8000d40 <__eqsf2+0x24>
 8000d6a:	46c0      	nop			; (mov r8, r8)

08000d6c <__gesf2>:
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	004a      	lsls	r2, r1, #1
 8000d70:	024e      	lsls	r6, r1, #9
 8000d72:	0245      	lsls	r5, r0, #9
 8000d74:	0044      	lsls	r4, r0, #1
 8000d76:	0a6d      	lsrs	r5, r5, #9
 8000d78:	0e24      	lsrs	r4, r4, #24
 8000d7a:	0fc3      	lsrs	r3, r0, #31
 8000d7c:	0a76      	lsrs	r6, r6, #9
 8000d7e:	0e12      	lsrs	r2, r2, #24
 8000d80:	0fc9      	lsrs	r1, r1, #31
 8000d82:	2cff      	cmp	r4, #255	; 0xff
 8000d84:	d015      	beq.n	8000db2 <__gesf2+0x46>
 8000d86:	2aff      	cmp	r2, #255	; 0xff
 8000d88:	d00e      	beq.n	8000da8 <__gesf2+0x3c>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d115      	bne.n	8000dba <__gesf2+0x4e>
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	d101      	bne.n	8000d96 <__gesf2+0x2a>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d01c      	beq.n	8000dd0 <__gesf2+0x64>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d014      	beq.n	8000dc4 <__gesf2+0x58>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d027      	beq.n	8000dee <__gesf2+0x82>
 8000d9e:	2002      	movs	r0, #2
 8000da0:	3b01      	subs	r3, #1
 8000da2:	4018      	ands	r0, r3
 8000da4:	3801      	subs	r0, #1
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d0ee      	beq.n	8000d8a <__gesf2+0x1e>
 8000dac:	2002      	movs	r0, #2
 8000dae:	4240      	negs	r0, r0
 8000db0:	e7f9      	b.n	8000da6 <__gesf2+0x3a>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d1fa      	bne.n	8000dac <__gesf2+0x40>
 8000db6:	2aff      	cmp	r2, #255	; 0xff
 8000db8:	d00e      	beq.n	8000dd8 <__gesf2+0x6c>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d10e      	bne.n	8000ddc <__gesf2+0x70>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d0ed      	beq.n	8000d9e <__gesf2+0x32>
 8000dc2:	e00b      	b.n	8000ddc <__gesf2+0x70>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	3901      	subs	r1, #1
 8000dc8:	4399      	bics	r1, r3
 8000dca:	0008      	movs	r0, r1
 8000dcc:	3001      	adds	r0, #1
 8000dce:	e7ea      	b.n	8000da6 <__gesf2+0x3a>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0e7      	beq.n	8000da6 <__gesf2+0x3a>
 8000dd6:	e7e2      	b.n	8000d9e <__gesf2+0x32>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d1e7      	bne.n	8000dac <__gesf2+0x40>
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d1de      	bne.n	8000d9e <__gesf2+0x32>
 8000de0:	4294      	cmp	r4, r2
 8000de2:	dd05      	ble.n	8000df0 <__gesf2+0x84>
 8000de4:	2102      	movs	r1, #2
 8000de6:	1e58      	subs	r0, r3, #1
 8000de8:	4008      	ands	r0, r1
 8000dea:	3801      	subs	r0, #1
 8000dec:	e7db      	b.n	8000da6 <__gesf2+0x3a>
 8000dee:	2400      	movs	r4, #0
 8000df0:	42a2      	cmp	r2, r4
 8000df2:	dc04      	bgt.n	8000dfe <__gesf2+0x92>
 8000df4:	42b5      	cmp	r5, r6
 8000df6:	d8d2      	bhi.n	8000d9e <__gesf2+0x32>
 8000df8:	2000      	movs	r0, #0
 8000dfa:	42b5      	cmp	r5, r6
 8000dfc:	d2d3      	bcs.n	8000da6 <__gesf2+0x3a>
 8000dfe:	1e58      	subs	r0, r3, #1
 8000e00:	2301      	movs	r3, #1
 8000e02:	4398      	bics	r0, r3
 8000e04:	3001      	adds	r0, #1
 8000e06:	e7ce      	b.n	8000da6 <__gesf2+0x3a>

08000e08 <__lesf2>:
 8000e08:	b530      	push	{r4, r5, lr}
 8000e0a:	0042      	lsls	r2, r0, #1
 8000e0c:	0244      	lsls	r4, r0, #9
 8000e0e:	024d      	lsls	r5, r1, #9
 8000e10:	0fc3      	lsrs	r3, r0, #31
 8000e12:	0048      	lsls	r0, r1, #1
 8000e14:	0a64      	lsrs	r4, r4, #9
 8000e16:	0e12      	lsrs	r2, r2, #24
 8000e18:	0a6d      	lsrs	r5, r5, #9
 8000e1a:	0e00      	lsrs	r0, r0, #24
 8000e1c:	0fc9      	lsrs	r1, r1, #31
 8000e1e:	2aff      	cmp	r2, #255	; 0xff
 8000e20:	d012      	beq.n	8000e48 <__lesf2+0x40>
 8000e22:	28ff      	cmp	r0, #255	; 0xff
 8000e24:	d00c      	beq.n	8000e40 <__lesf2+0x38>
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d112      	bne.n	8000e50 <__lesf2+0x48>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d119      	bne.n	8000e62 <__lesf2+0x5a>
 8000e2e:	2d00      	cmp	r5, #0
 8000e30:	d117      	bne.n	8000e62 <__lesf2+0x5a>
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d02b      	beq.n	8000e8e <__lesf2+0x86>
 8000e36:	2002      	movs	r0, #2
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	4018      	ands	r0, r3
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	e026      	b.n	8000e8e <__lesf2+0x86>
 8000e40:	2d00      	cmp	r5, #0
 8000e42:	d0f0      	beq.n	8000e26 <__lesf2+0x1e>
 8000e44:	2002      	movs	r0, #2
 8000e46:	e022      	b.n	8000e8e <__lesf2+0x86>
 8000e48:	2c00      	cmp	r4, #0
 8000e4a:	d1fb      	bne.n	8000e44 <__lesf2+0x3c>
 8000e4c:	28ff      	cmp	r0, #255	; 0xff
 8000e4e:	d01f      	beq.n	8000e90 <__lesf2+0x88>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d11f      	bne.n	8000e94 <__lesf2+0x8c>
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d11d      	bne.n	8000e94 <__lesf2+0x8c>
 8000e58:	2002      	movs	r0, #2
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4018      	ands	r0, r3
 8000e5e:	3801      	subs	r0, #1
 8000e60:	e015      	b.n	8000e8e <__lesf2+0x86>
 8000e62:	2c00      	cmp	r4, #0
 8000e64:	d00e      	beq.n	8000e84 <__lesf2+0x7c>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d1e5      	bne.n	8000e36 <__lesf2+0x2e>
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	dc04      	bgt.n	8000e7a <__lesf2+0x72>
 8000e70:	42ac      	cmp	r4, r5
 8000e72:	d8e0      	bhi.n	8000e36 <__lesf2+0x2e>
 8000e74:	2000      	movs	r0, #0
 8000e76:	42ac      	cmp	r4, r5
 8000e78:	d209      	bcs.n	8000e8e <__lesf2+0x86>
 8000e7a:	1e58      	subs	r0, r3, #1
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4398      	bics	r0, r3
 8000e80:	3001      	adds	r0, #1
 8000e82:	e004      	b.n	8000e8e <__lesf2+0x86>
 8000e84:	2301      	movs	r3, #1
 8000e86:	3901      	subs	r1, #1
 8000e88:	4399      	bics	r1, r3
 8000e8a:	0008      	movs	r0, r1
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	bd30      	pop	{r4, r5, pc}
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d1d7      	bne.n	8000e44 <__lesf2+0x3c>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d1ce      	bne.n	8000e36 <__lesf2+0x2e>
 8000e98:	4282      	cmp	r2, r0
 8000e9a:	dde7      	ble.n	8000e6c <__lesf2+0x64>
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	1e58      	subs	r0, r3, #1
 8000ea0:	4008      	ands	r0, r1
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7f3      	b.n	8000e8e <__lesf2+0x86>
 8000ea6:	46c0      	nop			; (mov r8, r8)

08000ea8 <__aeabi_fmul>:
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	464e      	mov	r6, r9
 8000eac:	4657      	mov	r7, sl
 8000eae:	4645      	mov	r5, r8
 8000eb0:	46de      	mov	lr, fp
 8000eb2:	b5e0      	push	{r5, r6, r7, lr}
 8000eb4:	0243      	lsls	r3, r0, #9
 8000eb6:	0a5b      	lsrs	r3, r3, #9
 8000eb8:	0045      	lsls	r5, r0, #1
 8000eba:	b083      	sub	sp, #12
 8000ebc:	1c0f      	adds	r7, r1, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	0e2d      	lsrs	r5, r5, #24
 8000ec2:	0fc6      	lsrs	r6, r0, #31
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d057      	beq.n	8000f78 <__aeabi_fmul+0xd0>
 8000ec8:	2dff      	cmp	r5, #255	; 0xff
 8000eca:	d024      	beq.n	8000f16 <__aeabi_fmul+0x6e>
 8000ecc:	2080      	movs	r0, #128	; 0x80
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	04c0      	lsls	r0, r0, #19
 8000ed2:	4318      	orrs	r0, r3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4681      	mov	r9, r0
 8000ed8:	469a      	mov	sl, r3
 8000eda:	469b      	mov	fp, r3
 8000edc:	3d7f      	subs	r5, #127	; 0x7f
 8000ede:	027c      	lsls	r4, r7, #9
 8000ee0:	007a      	lsls	r2, r7, #1
 8000ee2:	0ffb      	lsrs	r3, r7, #31
 8000ee4:	0a64      	lsrs	r4, r4, #9
 8000ee6:	0e12      	lsrs	r2, r2, #24
 8000ee8:	4698      	mov	r8, r3
 8000eea:	d023      	beq.n	8000f34 <__aeabi_fmul+0x8c>
 8000eec:	2aff      	cmp	r2, #255	; 0xff
 8000eee:	d04b      	beq.n	8000f88 <__aeabi_fmul+0xe0>
 8000ef0:	00e3      	lsls	r3, r4, #3
 8000ef2:	2480      	movs	r4, #128	; 0x80
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	04e4      	lsls	r4, r4, #19
 8000ef8:	3a7f      	subs	r2, #127	; 0x7f
 8000efa:	431c      	orrs	r4, r3
 8000efc:	18ad      	adds	r5, r5, r2
 8000efe:	1c6b      	adds	r3, r5, #1
 8000f00:	4647      	mov	r7, r8
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	4653      	mov	r3, sl
 8000f06:	4077      	eors	r7, r6
 8000f08:	003a      	movs	r2, r7
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d848      	bhi.n	8000fa0 <__aeabi_fmul+0xf8>
 8000f0e:	497d      	ldr	r1, [pc, #500]	; (8001104 <__aeabi_fmul+0x25c>)
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	58cb      	ldr	r3, [r1, r3]
 8000f14:	469f      	mov	pc, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_fmul+0x74>
 8000f1a:	e085      	b.n	8001028 <__aeabi_fmul+0x180>
 8000f1c:	3308      	adds	r3, #8
 8000f1e:	469a      	mov	sl, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	469b      	mov	fp, r3
 8000f24:	027c      	lsls	r4, r7, #9
 8000f26:	007a      	lsls	r2, r7, #1
 8000f28:	0ffb      	lsrs	r3, r7, #31
 8000f2a:	25ff      	movs	r5, #255	; 0xff
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	4698      	mov	r8, r3
 8000f32:	d1db      	bne.n	8000eec <__aeabi_fmul+0x44>
 8000f34:	2c00      	cmp	r4, #0
 8000f36:	d000      	beq.n	8000f3a <__aeabi_fmul+0x92>
 8000f38:	e090      	b.n	800105c <__aeabi_fmul+0x1b4>
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	4692      	mov	sl, r2
 8000f42:	2001      	movs	r0, #1
 8000f44:	e7db      	b.n	8000efe <__aeabi_fmul+0x56>
 8000f46:	464c      	mov	r4, r9
 8000f48:	4658      	mov	r0, fp
 8000f4a:	0017      	movs	r7, r2
 8000f4c:	2802      	cmp	r0, #2
 8000f4e:	d024      	beq.n	8000f9a <__aeabi_fmul+0xf2>
 8000f50:	2803      	cmp	r0, #3
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fmul+0xae>
 8000f54:	e0cf      	b.n	80010f6 <__aeabi_fmul+0x24e>
 8000f56:	2200      	movs	r2, #0
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2801      	cmp	r0, #1
 8000f5c:	d14d      	bne.n	8000ffa <__aeabi_fmul+0x152>
 8000f5e:	0258      	lsls	r0, r3, #9
 8000f60:	05d2      	lsls	r2, r2, #23
 8000f62:	0a40      	lsrs	r0, r0, #9
 8000f64:	07ff      	lsls	r7, r7, #31
 8000f66:	4310      	orrs	r0, r2
 8000f68:	4338      	orrs	r0, r7
 8000f6a:	b003      	add	sp, #12
 8000f6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000f6e:	4690      	mov	r8, r2
 8000f70:	4699      	mov	r9, r3
 8000f72:	46a2      	mov	sl, r4
 8000f74:	46ab      	mov	fp, r5
 8000f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d15b      	bne.n	8001034 <__aeabi_fmul+0x18c>
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	469a      	mov	sl, r3
 8000f80:	3b03      	subs	r3, #3
 8000f82:	2500      	movs	r5, #0
 8000f84:	469b      	mov	fp, r3
 8000f86:	e7aa      	b.n	8000ede <__aeabi_fmul+0x36>
 8000f88:	35ff      	adds	r5, #255	; 0xff
 8000f8a:	2c00      	cmp	r4, #0
 8000f8c:	d160      	bne.n	8001050 <__aeabi_fmul+0x1a8>
 8000f8e:	4652      	mov	r2, sl
 8000f90:	2302      	movs	r3, #2
 8000f92:	431a      	orrs	r2, r3
 8000f94:	4692      	mov	sl, r2
 8000f96:	2002      	movs	r0, #2
 8000f98:	e7b1      	b.n	8000efe <__aeabi_fmul+0x56>
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e7de      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8000fa0:	464b      	mov	r3, r9
 8000fa2:	0c1b      	lsrs	r3, r3, #16
 8000fa4:	469c      	mov	ip, r3
 8000fa6:	464b      	mov	r3, r9
 8000fa8:	0426      	lsls	r6, r4, #16
 8000faa:	0c36      	lsrs	r6, r6, #16
 8000fac:	0418      	lsls	r0, r3, #16
 8000fae:	4661      	mov	r1, ip
 8000fb0:	0033      	movs	r3, r6
 8000fb2:	0c22      	lsrs	r2, r4, #16
 8000fb4:	4664      	mov	r4, ip
 8000fb6:	0c00      	lsrs	r0, r0, #16
 8000fb8:	4343      	muls	r3, r0
 8000fba:	434e      	muls	r6, r1
 8000fbc:	4350      	muls	r0, r2
 8000fbe:	4354      	muls	r4, r2
 8000fc0:	1980      	adds	r0, r0, r6
 8000fc2:	0c1a      	lsrs	r2, r3, #16
 8000fc4:	1812      	adds	r2, r2, r0
 8000fc6:	4296      	cmp	r6, r2
 8000fc8:	d903      	bls.n	8000fd2 <__aeabi_fmul+0x12a>
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	0249      	lsls	r1, r1, #9
 8000fce:	468c      	mov	ip, r1
 8000fd0:	4464      	add	r4, ip
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	0410      	lsls	r0, r2, #16
 8000fd8:	18c0      	adds	r0, r0, r3
 8000fda:	0183      	lsls	r3, r0, #6
 8000fdc:	1e5e      	subs	r6, r3, #1
 8000fde:	41b3      	sbcs	r3, r6
 8000fe0:	0e80      	lsrs	r0, r0, #26
 8000fe2:	4318      	orrs	r0, r3
 8000fe4:	0c13      	lsrs	r3, r2, #16
 8000fe6:	191b      	adds	r3, r3, r4
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	4303      	orrs	r3, r0
 8000fec:	001c      	movs	r4, r3
 8000fee:	0123      	lsls	r3, r4, #4
 8000ff0:	d579      	bpl.n	80010e6 <__aeabi_fmul+0x23e>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	0862      	lsrs	r2, r4, #1
 8000ff6:	401c      	ands	r4, r3
 8000ff8:	4314      	orrs	r4, r2
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	327f      	adds	r2, #127	; 0x7f
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	dd4d      	ble.n	800109e <__aeabi_fmul+0x1f6>
 8001002:	0763      	lsls	r3, r4, #29
 8001004:	d004      	beq.n	8001010 <__aeabi_fmul+0x168>
 8001006:	230f      	movs	r3, #15
 8001008:	4023      	ands	r3, r4
 800100a:	2b04      	cmp	r3, #4
 800100c:	d000      	beq.n	8001010 <__aeabi_fmul+0x168>
 800100e:	3404      	adds	r4, #4
 8001010:	0123      	lsls	r3, r4, #4
 8001012:	d503      	bpl.n	800101c <__aeabi_fmul+0x174>
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <__aeabi_fmul+0x260>)
 8001016:	9a01      	ldr	r2, [sp, #4]
 8001018:	401c      	ands	r4, r3
 800101a:	3280      	adds	r2, #128	; 0x80
 800101c:	2afe      	cmp	r2, #254	; 0xfe
 800101e:	dcbc      	bgt.n	8000f9a <__aeabi_fmul+0xf2>
 8001020:	01a3      	lsls	r3, r4, #6
 8001022:	0a5b      	lsrs	r3, r3, #9
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	e79a      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001028:	230c      	movs	r3, #12
 800102a:	469a      	mov	sl, r3
 800102c:	3b09      	subs	r3, #9
 800102e:	25ff      	movs	r5, #255	; 0xff
 8001030:	469b      	mov	fp, r3
 8001032:	e754      	b.n	8000ede <__aeabi_fmul+0x36>
 8001034:	0018      	movs	r0, r3
 8001036:	f002 f94b 	bl	80032d0 <__clzsi2>
 800103a:	464a      	mov	r2, r9
 800103c:	1f43      	subs	r3, r0, #5
 800103e:	2576      	movs	r5, #118	; 0x76
 8001040:	409a      	lsls	r2, r3
 8001042:	2300      	movs	r3, #0
 8001044:	426d      	negs	r5, r5
 8001046:	4691      	mov	r9, r2
 8001048:	1a2d      	subs	r5, r5, r0
 800104a:	469a      	mov	sl, r3
 800104c:	469b      	mov	fp, r3
 800104e:	e746      	b.n	8000ede <__aeabi_fmul+0x36>
 8001050:	4652      	mov	r2, sl
 8001052:	2303      	movs	r3, #3
 8001054:	431a      	orrs	r2, r3
 8001056:	4692      	mov	sl, r2
 8001058:	2003      	movs	r0, #3
 800105a:	e750      	b.n	8000efe <__aeabi_fmul+0x56>
 800105c:	0020      	movs	r0, r4
 800105e:	f002 f937 	bl	80032d0 <__clzsi2>
 8001062:	1f43      	subs	r3, r0, #5
 8001064:	1a2d      	subs	r5, r5, r0
 8001066:	409c      	lsls	r4, r3
 8001068:	3d76      	subs	r5, #118	; 0x76
 800106a:	2000      	movs	r0, #0
 800106c:	e747      	b.n	8000efe <__aeabi_fmul+0x56>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	2700      	movs	r7, #0
 8001072:	03db      	lsls	r3, r3, #15
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	e772      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001078:	4642      	mov	r2, r8
 800107a:	e766      	b.n	8000f4a <__aeabi_fmul+0xa2>
 800107c:	464c      	mov	r4, r9
 800107e:	0032      	movs	r2, r6
 8001080:	4658      	mov	r0, fp
 8001082:	e762      	b.n	8000f4a <__aeabi_fmul+0xa2>
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	464a      	mov	r2, r9
 8001088:	03db      	lsls	r3, r3, #15
 800108a:	421a      	tst	r2, r3
 800108c:	d022      	beq.n	80010d4 <__aeabi_fmul+0x22c>
 800108e:	421c      	tst	r4, r3
 8001090:	d120      	bne.n	80010d4 <__aeabi_fmul+0x22c>
 8001092:	4323      	orrs	r3, r4
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	0a5b      	lsrs	r3, r3, #9
 8001098:	4647      	mov	r7, r8
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	e75f      	b.n	8000f5e <__aeabi_fmul+0xb6>
 800109e:	2301      	movs	r3, #1
 80010a0:	1a9a      	subs	r2, r3, r2
 80010a2:	2a1b      	cmp	r2, #27
 80010a4:	dc21      	bgt.n	80010ea <__aeabi_fmul+0x242>
 80010a6:	0023      	movs	r3, r4
 80010a8:	9901      	ldr	r1, [sp, #4]
 80010aa:	40d3      	lsrs	r3, r2
 80010ac:	319e      	adds	r1, #158	; 0x9e
 80010ae:	408c      	lsls	r4, r1
 80010b0:	001a      	movs	r2, r3
 80010b2:	0023      	movs	r3, r4
 80010b4:	1e5c      	subs	r4, r3, #1
 80010b6:	41a3      	sbcs	r3, r4
 80010b8:	4313      	orrs	r3, r2
 80010ba:	075a      	lsls	r2, r3, #29
 80010bc:	d004      	beq.n	80010c8 <__aeabi_fmul+0x220>
 80010be:	220f      	movs	r2, #15
 80010c0:	401a      	ands	r2, r3
 80010c2:	2a04      	cmp	r2, #4
 80010c4:	d000      	beq.n	80010c8 <__aeabi_fmul+0x220>
 80010c6:	3304      	adds	r3, #4
 80010c8:	015a      	lsls	r2, r3, #5
 80010ca:	d411      	bmi.n	80010f0 <__aeabi_fmul+0x248>
 80010cc:	019b      	lsls	r3, r3, #6
 80010ce:	0a5b      	lsrs	r3, r3, #9
 80010d0:	2200      	movs	r2, #0
 80010d2:	e744      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	464a      	mov	r2, r9
 80010d8:	03db      	lsls	r3, r3, #15
 80010da:	4313      	orrs	r3, r2
 80010dc:	025b      	lsls	r3, r3, #9
 80010de:	0a5b      	lsrs	r3, r3, #9
 80010e0:	0037      	movs	r7, r6
 80010e2:	22ff      	movs	r2, #255	; 0xff
 80010e4:	e73b      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010e6:	9501      	str	r5, [sp, #4]
 80010e8:	e787      	b.n	8000ffa <__aeabi_fmul+0x152>
 80010ea:	2200      	movs	r2, #0
 80010ec:	2300      	movs	r3, #0
 80010ee:	e736      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010f0:	2201      	movs	r2, #1
 80010f2:	2300      	movs	r3, #0
 80010f4:	e733      	b.n	8000f5e <__aeabi_fmul+0xb6>
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	03db      	lsls	r3, r3, #15
 80010fa:	4323      	orrs	r3, r4
 80010fc:	025b      	lsls	r3, r3, #9
 80010fe:	0a5b      	lsrs	r3, r3, #9
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	e72c      	b.n	8000f5e <__aeabi_fmul+0xb6>
 8001104:	08019b2c 	.word	0x08019b2c
 8001108:	f7ffffff 	.word	0xf7ffffff

0800110c <__aeabi_fsub>:
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	4647      	mov	r7, r8
 8001110:	46ce      	mov	lr, r9
 8001112:	0044      	lsls	r4, r0, #1
 8001114:	0fc2      	lsrs	r2, r0, #31
 8001116:	b580      	push	{r7, lr}
 8001118:	0247      	lsls	r7, r0, #9
 800111a:	0248      	lsls	r0, r1, #9
 800111c:	0a40      	lsrs	r0, r0, #9
 800111e:	4684      	mov	ip, r0
 8001120:	4666      	mov	r6, ip
 8001122:	0048      	lsls	r0, r1, #1
 8001124:	0a7f      	lsrs	r7, r7, #9
 8001126:	0e24      	lsrs	r4, r4, #24
 8001128:	00f6      	lsls	r6, r6, #3
 800112a:	0025      	movs	r5, r4
 800112c:	4690      	mov	r8, r2
 800112e:	00fb      	lsls	r3, r7, #3
 8001130:	0e00      	lsrs	r0, r0, #24
 8001132:	0fc9      	lsrs	r1, r1, #31
 8001134:	46b1      	mov	r9, r6
 8001136:	28ff      	cmp	r0, #255	; 0xff
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x30>
 800113a:	e085      	b.n	8001248 <__aeabi_fsub+0x13c>
 800113c:	2601      	movs	r6, #1
 800113e:	4071      	eors	r1, r6
 8001140:	1a26      	subs	r6, r4, r0
 8001142:	4291      	cmp	r1, r2
 8001144:	d057      	beq.n	80011f6 <__aeabi_fsub+0xea>
 8001146:	2e00      	cmp	r6, #0
 8001148:	dd43      	ble.n	80011d2 <__aeabi_fsub+0xc6>
 800114a:	2800      	cmp	r0, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fsub+0x44>
 800114e:	e07f      	b.n	8001250 <__aeabi_fsub+0x144>
 8001150:	4649      	mov	r1, r9
 8001152:	2900      	cmp	r1, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x4c>
 8001156:	e0aa      	b.n	80012ae <__aeabi_fsub+0x1a2>
 8001158:	3e01      	subs	r6, #1
 800115a:	2e00      	cmp	r6, #0
 800115c:	d000      	beq.n	8001160 <__aeabi_fsub+0x54>
 800115e:	e0f7      	b.n	8001350 <__aeabi_fsub+0x244>
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	015a      	lsls	r2, r3, #5
 8001164:	d400      	bmi.n	8001168 <__aeabi_fsub+0x5c>
 8001166:	e08b      	b.n	8001280 <__aeabi_fsub+0x174>
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	099c      	lsrs	r4, r3, #6
 800116c:	0020      	movs	r0, r4
 800116e:	f002 f8af 	bl	80032d0 <__clzsi2>
 8001172:	3805      	subs	r0, #5
 8001174:	4084      	lsls	r4, r0
 8001176:	4285      	cmp	r5, r0
 8001178:	dd00      	ble.n	800117c <__aeabi_fsub+0x70>
 800117a:	e0d3      	b.n	8001324 <__aeabi_fsub+0x218>
 800117c:	1b45      	subs	r5, r0, r5
 800117e:	0023      	movs	r3, r4
 8001180:	2020      	movs	r0, #32
 8001182:	3501      	adds	r5, #1
 8001184:	40eb      	lsrs	r3, r5
 8001186:	1b45      	subs	r5, r0, r5
 8001188:	40ac      	lsls	r4, r5
 800118a:	1e62      	subs	r2, r4, #1
 800118c:	4194      	sbcs	r4, r2
 800118e:	4323      	orrs	r3, r4
 8001190:	2407      	movs	r4, #7
 8001192:	2500      	movs	r5, #0
 8001194:	401c      	ands	r4, r3
 8001196:	2201      	movs	r2, #1
 8001198:	4641      	mov	r1, r8
 800119a:	400a      	ands	r2, r1
 800119c:	2c00      	cmp	r4, #0
 800119e:	d004      	beq.n	80011aa <__aeabi_fsub+0x9e>
 80011a0:	210f      	movs	r1, #15
 80011a2:	4019      	ands	r1, r3
 80011a4:	2904      	cmp	r1, #4
 80011a6:	d000      	beq.n	80011aa <__aeabi_fsub+0x9e>
 80011a8:	3304      	adds	r3, #4
 80011aa:	0159      	lsls	r1, r3, #5
 80011ac:	d400      	bmi.n	80011b0 <__aeabi_fsub+0xa4>
 80011ae:	e080      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 80011b0:	3501      	adds	r5, #1
 80011b2:	b2ec      	uxtb	r4, r5
 80011b4:	2dff      	cmp	r5, #255	; 0xff
 80011b6:	d000      	beq.n	80011ba <__aeabi_fsub+0xae>
 80011b8:	e0a3      	b.n	8001302 <__aeabi_fsub+0x1f6>
 80011ba:	24ff      	movs	r4, #255	; 0xff
 80011bc:	2300      	movs	r3, #0
 80011be:	025b      	lsls	r3, r3, #9
 80011c0:	05e4      	lsls	r4, r4, #23
 80011c2:	0a58      	lsrs	r0, r3, #9
 80011c4:	07d2      	lsls	r2, r2, #31
 80011c6:	4320      	orrs	r0, r4
 80011c8:	4310      	orrs	r0, r2
 80011ca:	bc0c      	pop	{r2, r3}
 80011cc:	4690      	mov	r8, r2
 80011ce:	4699      	mov	r9, r3
 80011d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d174      	bne.n	80012c0 <__aeabi_fsub+0x1b4>
 80011d6:	1c60      	adds	r0, r4, #1
 80011d8:	b2c0      	uxtb	r0, r0
 80011da:	2801      	cmp	r0, #1
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_fsub+0xd4>
 80011de:	e0a7      	b.n	8001330 <__aeabi_fsub+0x224>
 80011e0:	464a      	mov	r2, r9
 80011e2:	1a9c      	subs	r4, r3, r2
 80011e4:	0162      	lsls	r2, r4, #5
 80011e6:	d500      	bpl.n	80011ea <__aeabi_fsub+0xde>
 80011e8:	e0b6      	b.n	8001358 <__aeabi_fsub+0x24c>
 80011ea:	2c00      	cmp	r4, #0
 80011ec:	d1be      	bne.n	800116c <__aeabi_fsub+0x60>
 80011ee:	2200      	movs	r2, #0
 80011f0:	2400      	movs	r4, #0
 80011f2:	2300      	movs	r3, #0
 80011f4:	e7e3      	b.n	80011be <__aeabi_fsub+0xb2>
 80011f6:	2e00      	cmp	r6, #0
 80011f8:	dc00      	bgt.n	80011fc <__aeabi_fsub+0xf0>
 80011fa:	e085      	b.n	8001308 <__aeabi_fsub+0x1fc>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d046      	beq.n	800128e <__aeabi_fsub+0x182>
 8001200:	2cff      	cmp	r4, #255	; 0xff
 8001202:	d049      	beq.n	8001298 <__aeabi_fsub+0x18c>
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	4648      	mov	r0, r9
 8001208:	04d2      	lsls	r2, r2, #19
 800120a:	4310      	orrs	r0, r2
 800120c:	4681      	mov	r9, r0
 800120e:	2201      	movs	r2, #1
 8001210:	2e1b      	cmp	r6, #27
 8001212:	dc09      	bgt.n	8001228 <__aeabi_fsub+0x11c>
 8001214:	2020      	movs	r0, #32
 8001216:	464c      	mov	r4, r9
 8001218:	1b80      	subs	r0, r0, r6
 800121a:	4084      	lsls	r4, r0
 800121c:	464a      	mov	r2, r9
 800121e:	0020      	movs	r0, r4
 8001220:	40f2      	lsrs	r2, r6
 8001222:	1e44      	subs	r4, r0, #1
 8001224:	41a0      	sbcs	r0, r4
 8001226:	4302      	orrs	r2, r0
 8001228:	189b      	adds	r3, r3, r2
 800122a:	015a      	lsls	r2, r3, #5
 800122c:	d528      	bpl.n	8001280 <__aeabi_fsub+0x174>
 800122e:	3501      	adds	r5, #1
 8001230:	2dff      	cmp	r5, #255	; 0xff
 8001232:	d100      	bne.n	8001236 <__aeabi_fsub+0x12a>
 8001234:	e0a8      	b.n	8001388 <__aeabi_fsub+0x27c>
 8001236:	2201      	movs	r2, #1
 8001238:	2407      	movs	r4, #7
 800123a:	4994      	ldr	r1, [pc, #592]	; (800148c <__aeabi_fsub+0x380>)
 800123c:	401a      	ands	r2, r3
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	400b      	ands	r3, r1
 8001242:	4313      	orrs	r3, r2
 8001244:	401c      	ands	r4, r3
 8001246:	e7a6      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001248:	2e00      	cmp	r6, #0
 800124a:	d000      	beq.n	800124e <__aeabi_fsub+0x142>
 800124c:	e778      	b.n	8001140 <__aeabi_fsub+0x34>
 800124e:	e775      	b.n	800113c <__aeabi_fsub+0x30>
 8001250:	2cff      	cmp	r4, #255	; 0xff
 8001252:	d054      	beq.n	80012fe <__aeabi_fsub+0x1f2>
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	4649      	mov	r1, r9
 8001258:	04d2      	lsls	r2, r2, #19
 800125a:	4311      	orrs	r1, r2
 800125c:	4689      	mov	r9, r1
 800125e:	2201      	movs	r2, #1
 8001260:	2e1b      	cmp	r6, #27
 8001262:	dc09      	bgt.n	8001278 <__aeabi_fsub+0x16c>
 8001264:	2120      	movs	r1, #32
 8001266:	4648      	mov	r0, r9
 8001268:	1b89      	subs	r1, r1, r6
 800126a:	4088      	lsls	r0, r1
 800126c:	464a      	mov	r2, r9
 800126e:	0001      	movs	r1, r0
 8001270:	40f2      	lsrs	r2, r6
 8001272:	1e48      	subs	r0, r1, #1
 8001274:	4181      	sbcs	r1, r0
 8001276:	430a      	orrs	r2, r1
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	015a      	lsls	r2, r3, #5
 800127c:	d500      	bpl.n	8001280 <__aeabi_fsub+0x174>
 800127e:	e773      	b.n	8001168 <__aeabi_fsub+0x5c>
 8001280:	2201      	movs	r2, #1
 8001282:	4641      	mov	r1, r8
 8001284:	400a      	ands	r2, r1
 8001286:	0759      	lsls	r1, r3, #29
 8001288:	d000      	beq.n	800128c <__aeabi_fsub+0x180>
 800128a:	e789      	b.n	80011a0 <__aeabi_fsub+0x94>
 800128c:	e011      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 800128e:	4648      	mov	r0, r9
 8001290:	2800      	cmp	r0, #0
 8001292:	d158      	bne.n	8001346 <__aeabi_fsub+0x23a>
 8001294:	2cff      	cmp	r4, #255	; 0xff
 8001296:	d10c      	bne.n	80012b2 <__aeabi_fsub+0x1a6>
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_fsub+0x194>
 800129e:	e78c      	b.n	80011ba <__aeabi_fsub+0xae>
 80012a0:	2080      	movs	r0, #128	; 0x80
 80012a2:	03c0      	lsls	r0, r0, #15
 80012a4:	4303      	orrs	r3, r0
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	0a5b      	lsrs	r3, r3, #9
 80012aa:	24ff      	movs	r4, #255	; 0xff
 80012ac:	e787      	b.n	80011be <__aeabi_fsub+0xb2>
 80012ae:	2cff      	cmp	r4, #255	; 0xff
 80012b0:	d025      	beq.n	80012fe <__aeabi_fsub+0x1f2>
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	2dff      	cmp	r5, #255	; 0xff
 80012b6:	d0f0      	beq.n	800129a <__aeabi_fsub+0x18e>
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	0a5b      	lsrs	r3, r3, #9
 80012bc:	b2ec      	uxtb	r4, r5
 80012be:	e77e      	b.n	80011be <__aeabi_fsub+0xb2>
 80012c0:	2c00      	cmp	r4, #0
 80012c2:	d04d      	beq.n	8001360 <__aeabi_fsub+0x254>
 80012c4:	28ff      	cmp	r0, #255	; 0xff
 80012c6:	d018      	beq.n	80012fa <__aeabi_fsub+0x1ee>
 80012c8:	2480      	movs	r4, #128	; 0x80
 80012ca:	04e4      	lsls	r4, r4, #19
 80012cc:	4272      	negs	r2, r6
 80012ce:	4323      	orrs	r3, r4
 80012d0:	2a1b      	cmp	r2, #27
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_fsub+0x1ca>
 80012d4:	e0c4      	b.n	8001460 <__aeabi_fsub+0x354>
 80012d6:	001c      	movs	r4, r3
 80012d8:	2520      	movs	r5, #32
 80012da:	40d4      	lsrs	r4, r2
 80012dc:	1aaa      	subs	r2, r5, r2
 80012de:	4093      	lsls	r3, r2
 80012e0:	1e5a      	subs	r2, r3, #1
 80012e2:	4193      	sbcs	r3, r2
 80012e4:	4323      	orrs	r3, r4
 80012e6:	464a      	mov	r2, r9
 80012e8:	0005      	movs	r5, r0
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	4688      	mov	r8, r1
 80012ee:	e738      	b.n	8001162 <__aeabi_fsub+0x56>
 80012f0:	1c72      	adds	r2, r6, #1
 80012f2:	d0f8      	beq.n	80012e6 <__aeabi_fsub+0x1da>
 80012f4:	43f2      	mvns	r2, r6
 80012f6:	28ff      	cmp	r0, #255	; 0xff
 80012f8:	d1ea      	bne.n	80012d0 <__aeabi_fsub+0x1c4>
 80012fa:	000a      	movs	r2, r1
 80012fc:	464b      	mov	r3, r9
 80012fe:	25ff      	movs	r5, #255	; 0xff
 8001300:	e7d7      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001302:	019b      	lsls	r3, r3, #6
 8001304:	0a5b      	lsrs	r3, r3, #9
 8001306:	e75a      	b.n	80011be <__aeabi_fsub+0xb2>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d141      	bne.n	8001390 <__aeabi_fsub+0x284>
 800130c:	1c65      	adds	r5, r4, #1
 800130e:	b2e9      	uxtb	r1, r5
 8001310:	2901      	cmp	r1, #1
 8001312:	dd45      	ble.n	80013a0 <__aeabi_fsub+0x294>
 8001314:	2dff      	cmp	r5, #255	; 0xff
 8001316:	d100      	bne.n	800131a <__aeabi_fsub+0x20e>
 8001318:	e74f      	b.n	80011ba <__aeabi_fsub+0xae>
 800131a:	2407      	movs	r4, #7
 800131c:	444b      	add	r3, r9
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	401c      	ands	r4, r3
 8001322:	e738      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001324:	2207      	movs	r2, #7
 8001326:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <__aeabi_fsub+0x384>)
 8001328:	1a2d      	subs	r5, r5, r0
 800132a:	4023      	ands	r3, r4
 800132c:	4014      	ands	r4, r2
 800132e:	e732      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001330:	2c00      	cmp	r4, #0
 8001332:	d11d      	bne.n	8001370 <__aeabi_fsub+0x264>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d17a      	bne.n	800142e <__aeabi_fsub+0x322>
 8001338:	464b      	mov	r3, r9
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x234>
 800133e:	e091      	b.n	8001464 <__aeabi_fsub+0x358>
 8001340:	000a      	movs	r2, r1
 8001342:	2500      	movs	r5, #0
 8001344:	e7b5      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001346:	3e01      	subs	r6, #1
 8001348:	2e00      	cmp	r6, #0
 800134a:	d119      	bne.n	8001380 <__aeabi_fsub+0x274>
 800134c:	444b      	add	r3, r9
 800134e:	e76c      	b.n	800122a <__aeabi_fsub+0x11e>
 8001350:	2cff      	cmp	r4, #255	; 0xff
 8001352:	d184      	bne.n	800125e <__aeabi_fsub+0x152>
 8001354:	25ff      	movs	r5, #255	; 0xff
 8001356:	e7ac      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001358:	464a      	mov	r2, r9
 800135a:	4688      	mov	r8, r1
 800135c:	1ad4      	subs	r4, r2, r3
 800135e:	e705      	b.n	800116c <__aeabi_fsub+0x60>
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1c5      	bne.n	80012f0 <__aeabi_fsub+0x1e4>
 8001364:	000a      	movs	r2, r1
 8001366:	28ff      	cmp	r0, #255	; 0xff
 8001368:	d0c8      	beq.n	80012fc <__aeabi_fsub+0x1f0>
 800136a:	0005      	movs	r5, r0
 800136c:	464b      	mov	r3, r9
 800136e:	e7a0      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d149      	bne.n	8001408 <__aeabi_fsub+0x2fc>
 8001374:	464b      	mov	r3, r9
 8001376:	2b00      	cmp	r3, #0
 8001378:	d077      	beq.n	800146a <__aeabi_fsub+0x35e>
 800137a:	000a      	movs	r2, r1
 800137c:	25ff      	movs	r5, #255	; 0xff
 800137e:	e798      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001380:	2cff      	cmp	r4, #255	; 0xff
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x27a>
 8001384:	e743      	b.n	800120e <__aeabi_fsub+0x102>
 8001386:	e787      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001388:	000a      	movs	r2, r1
 800138a:	24ff      	movs	r4, #255	; 0xff
 800138c:	2300      	movs	r3, #0
 800138e:	e716      	b.n	80011be <__aeabi_fsub+0xb2>
 8001390:	2c00      	cmp	r4, #0
 8001392:	d115      	bne.n	80013c0 <__aeabi_fsub+0x2b4>
 8001394:	2b00      	cmp	r3, #0
 8001396:	d157      	bne.n	8001448 <__aeabi_fsub+0x33c>
 8001398:	28ff      	cmp	r0, #255	; 0xff
 800139a:	d1e6      	bne.n	800136a <__aeabi_fsub+0x25e>
 800139c:	464b      	mov	r3, r9
 800139e:	e77b      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d120      	bne.n	80013e6 <__aeabi_fsub+0x2da>
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d057      	beq.n	8001458 <__aeabi_fsub+0x34c>
 80013a8:	4649      	mov	r1, r9
 80013aa:	2900      	cmp	r1, #0
 80013ac:	d053      	beq.n	8001456 <__aeabi_fsub+0x34a>
 80013ae:	444b      	add	r3, r9
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	d568      	bpl.n	8001486 <__aeabi_fsub+0x37a>
 80013b4:	2407      	movs	r4, #7
 80013b6:	4a36      	ldr	r2, [pc, #216]	; (8001490 <__aeabi_fsub+0x384>)
 80013b8:	401c      	ands	r4, r3
 80013ba:	2501      	movs	r5, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	e6ea      	b.n	8001196 <__aeabi_fsub+0x8a>
 80013c0:	28ff      	cmp	r0, #255	; 0xff
 80013c2:	d0eb      	beq.n	800139c <__aeabi_fsub+0x290>
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	04d2      	lsls	r2, r2, #19
 80013c8:	4276      	negs	r6, r6
 80013ca:	4313      	orrs	r3, r2
 80013cc:	2e1b      	cmp	r6, #27
 80013ce:	dc53      	bgt.n	8001478 <__aeabi_fsub+0x36c>
 80013d0:	2520      	movs	r5, #32
 80013d2:	1bad      	subs	r5, r5, r6
 80013d4:	001a      	movs	r2, r3
 80013d6:	40ab      	lsls	r3, r5
 80013d8:	40f2      	lsrs	r2, r6
 80013da:	1e5c      	subs	r4, r3, #1
 80013dc:	41a3      	sbcs	r3, r4
 80013de:	4313      	orrs	r3, r2
 80013e0:	444b      	add	r3, r9
 80013e2:	0005      	movs	r5, r0
 80013e4:	e721      	b.n	800122a <__aeabi_fsub+0x11e>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0d8      	beq.n	800139c <__aeabi_fsub+0x290>
 80013ea:	4649      	mov	r1, r9
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_fsub+0x2e6>
 80013f0:	e752      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	03c9      	lsls	r1, r1, #15
 80013f6:	420f      	tst	r7, r1
 80013f8:	d100      	bne.n	80013fc <__aeabi_fsub+0x2f0>
 80013fa:	e74d      	b.n	8001298 <__aeabi_fsub+0x18c>
 80013fc:	4660      	mov	r0, ip
 80013fe:	4208      	tst	r0, r1
 8001400:	d000      	beq.n	8001404 <__aeabi_fsub+0x2f8>
 8001402:	e749      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001404:	464b      	mov	r3, r9
 8001406:	e747      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001408:	4648      	mov	r0, r9
 800140a:	25ff      	movs	r5, #255	; 0xff
 800140c:	2800      	cmp	r0, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x306>
 8001410:	e74f      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	03d2      	lsls	r2, r2, #15
 8001416:	4217      	tst	r7, r2
 8001418:	d004      	beq.n	8001424 <__aeabi_fsub+0x318>
 800141a:	4660      	mov	r0, ip
 800141c:	4210      	tst	r0, r2
 800141e:	d101      	bne.n	8001424 <__aeabi_fsub+0x318>
 8001420:	464b      	mov	r3, r9
 8001422:	4688      	mov	r8, r1
 8001424:	2201      	movs	r2, #1
 8001426:	4641      	mov	r1, r8
 8001428:	25ff      	movs	r5, #255	; 0xff
 800142a:	400a      	ands	r2, r1
 800142c:	e741      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 800142e:	4648      	mov	r0, r9
 8001430:	2800      	cmp	r0, #0
 8001432:	d01f      	beq.n	8001474 <__aeabi_fsub+0x368>
 8001434:	1a1a      	subs	r2, r3, r0
 8001436:	0150      	lsls	r0, r2, #5
 8001438:	d520      	bpl.n	800147c <__aeabi_fsub+0x370>
 800143a:	464a      	mov	r2, r9
 800143c:	2407      	movs	r4, #7
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	401c      	ands	r4, r3
 8001442:	4688      	mov	r8, r1
 8001444:	2500      	movs	r5, #0
 8001446:	e6a6      	b.n	8001196 <__aeabi_fsub+0x8a>
 8001448:	1c74      	adds	r4, r6, #1
 800144a:	d0c9      	beq.n	80013e0 <__aeabi_fsub+0x2d4>
 800144c:	43f6      	mvns	r6, r6
 800144e:	28ff      	cmp	r0, #255	; 0xff
 8001450:	d1bc      	bne.n	80013cc <__aeabi_fsub+0x2c0>
 8001452:	464b      	mov	r3, r9
 8001454:	e720      	b.n	8001298 <__aeabi_fsub+0x18c>
 8001456:	4699      	mov	r9, r3
 8001458:	464b      	mov	r3, r9
 800145a:	2500      	movs	r5, #0
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	e72b      	b.n	80012b8 <__aeabi_fsub+0x1ac>
 8001460:	2301      	movs	r3, #1
 8001462:	e740      	b.n	80012e6 <__aeabi_fsub+0x1da>
 8001464:	2200      	movs	r2, #0
 8001466:	2300      	movs	r3, #0
 8001468:	e6a9      	b.n	80011be <__aeabi_fsub+0xb2>
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	2200      	movs	r2, #0
 800146e:	03db      	lsls	r3, r3, #15
 8001470:	24ff      	movs	r4, #255	; 0xff
 8001472:	e6a4      	b.n	80011be <__aeabi_fsub+0xb2>
 8001474:	2500      	movs	r5, #0
 8001476:	e71c      	b.n	80012b2 <__aeabi_fsub+0x1a6>
 8001478:	2301      	movs	r3, #1
 800147a:	e7b1      	b.n	80013e0 <__aeabi_fsub+0x2d4>
 800147c:	2a00      	cmp	r2, #0
 800147e:	d0f1      	beq.n	8001464 <__aeabi_fsub+0x358>
 8001480:	0013      	movs	r3, r2
 8001482:	2500      	movs	r5, #0
 8001484:	e6fc      	b.n	8001280 <__aeabi_fsub+0x174>
 8001486:	2500      	movs	r5, #0
 8001488:	e6fa      	b.n	8001280 <__aeabi_fsub+0x174>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	7dffffff 	.word	0x7dffffff
 8001490:	fbffffff 	.word	0xfbffffff

08001494 <__aeabi_f2iz>:
 8001494:	0241      	lsls	r1, r0, #9
 8001496:	0042      	lsls	r2, r0, #1
 8001498:	0fc3      	lsrs	r3, r0, #31
 800149a:	0a49      	lsrs	r1, r1, #9
 800149c:	0e12      	lsrs	r2, r2, #24
 800149e:	2000      	movs	r0, #0
 80014a0:	2a7e      	cmp	r2, #126	; 0x7e
 80014a2:	d90d      	bls.n	80014c0 <__aeabi_f2iz+0x2c>
 80014a4:	2a9d      	cmp	r2, #157	; 0x9d
 80014a6:	d80c      	bhi.n	80014c2 <__aeabi_f2iz+0x2e>
 80014a8:	2080      	movs	r0, #128	; 0x80
 80014aa:	0400      	lsls	r0, r0, #16
 80014ac:	4301      	orrs	r1, r0
 80014ae:	2a95      	cmp	r2, #149	; 0x95
 80014b0:	dc0a      	bgt.n	80014c8 <__aeabi_f2iz+0x34>
 80014b2:	2096      	movs	r0, #150	; 0x96
 80014b4:	1a82      	subs	r2, r0, r2
 80014b6:	40d1      	lsrs	r1, r2
 80014b8:	4248      	negs	r0, r1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_f2iz+0x2c>
 80014be:	0008      	movs	r0, r1
 80014c0:	4770      	bx	lr
 80014c2:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <__aeabi_f2iz+0x3c>)
 80014c4:	1898      	adds	r0, r3, r2
 80014c6:	e7fb      	b.n	80014c0 <__aeabi_f2iz+0x2c>
 80014c8:	3a96      	subs	r2, #150	; 0x96
 80014ca:	4091      	lsls	r1, r2
 80014cc:	e7f4      	b.n	80014b8 <__aeabi_f2iz+0x24>
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	7fffffff 	.word	0x7fffffff

080014d4 <__aeabi_i2f>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d03d      	beq.n	8001556 <__aeabi_i2f+0x82>
 80014da:	17c3      	asrs	r3, r0, #31
 80014dc:	18c5      	adds	r5, r0, r3
 80014de:	405d      	eors	r5, r3
 80014e0:	0fc4      	lsrs	r4, r0, #31
 80014e2:	0028      	movs	r0, r5
 80014e4:	f001 fef4 	bl	80032d0 <__clzsi2>
 80014e8:	229e      	movs	r2, #158	; 0x9e
 80014ea:	1a12      	subs	r2, r2, r0
 80014ec:	2a96      	cmp	r2, #150	; 0x96
 80014ee:	dc07      	bgt.n	8001500 <__aeabi_i2f+0x2c>
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	2808      	cmp	r0, #8
 80014f4:	dd33      	ble.n	800155e <__aeabi_i2f+0x8a>
 80014f6:	3808      	subs	r0, #8
 80014f8:	4085      	lsls	r5, r0
 80014fa:	0268      	lsls	r0, r5, #9
 80014fc:	0a40      	lsrs	r0, r0, #9
 80014fe:	e023      	b.n	8001548 <__aeabi_i2f+0x74>
 8001500:	2a99      	cmp	r2, #153	; 0x99
 8001502:	dd0b      	ble.n	800151c <__aeabi_i2f+0x48>
 8001504:	2305      	movs	r3, #5
 8001506:	0029      	movs	r1, r5
 8001508:	1a1b      	subs	r3, r3, r0
 800150a:	40d9      	lsrs	r1, r3
 800150c:	0003      	movs	r3, r0
 800150e:	331b      	adds	r3, #27
 8001510:	409d      	lsls	r5, r3
 8001512:	002b      	movs	r3, r5
 8001514:	1e5d      	subs	r5, r3, #1
 8001516:	41ab      	sbcs	r3, r5
 8001518:	4319      	orrs	r1, r3
 800151a:	000d      	movs	r5, r1
 800151c:	2805      	cmp	r0, #5
 800151e:	dd01      	ble.n	8001524 <__aeabi_i2f+0x50>
 8001520:	1f43      	subs	r3, r0, #5
 8001522:	409d      	lsls	r5, r3
 8001524:	002b      	movs	r3, r5
 8001526:	490f      	ldr	r1, [pc, #60]	; (8001564 <__aeabi_i2f+0x90>)
 8001528:	400b      	ands	r3, r1
 800152a:	076e      	lsls	r6, r5, #29
 800152c:	d009      	beq.n	8001542 <__aeabi_i2f+0x6e>
 800152e:	260f      	movs	r6, #15
 8001530:	4035      	ands	r5, r6
 8001532:	2d04      	cmp	r5, #4
 8001534:	d005      	beq.n	8001542 <__aeabi_i2f+0x6e>
 8001536:	3304      	adds	r3, #4
 8001538:	015d      	lsls	r5, r3, #5
 800153a:	d502      	bpl.n	8001542 <__aeabi_i2f+0x6e>
 800153c:	229f      	movs	r2, #159	; 0x9f
 800153e:	400b      	ands	r3, r1
 8001540:	1a12      	subs	r2, r2, r0
 8001542:	019b      	lsls	r3, r3, #6
 8001544:	0a58      	lsrs	r0, r3, #9
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	0240      	lsls	r0, r0, #9
 800154a:	05d2      	lsls	r2, r2, #23
 800154c:	0a40      	lsrs	r0, r0, #9
 800154e:	07e4      	lsls	r4, r4, #31
 8001550:	4310      	orrs	r0, r2
 8001552:	4320      	orrs	r0, r4
 8001554:	bd70      	pop	{r4, r5, r6, pc}
 8001556:	2400      	movs	r4, #0
 8001558:	2200      	movs	r2, #0
 800155a:	2000      	movs	r0, #0
 800155c:	e7f4      	b.n	8001548 <__aeabi_i2f+0x74>
 800155e:	0268      	lsls	r0, r5, #9
 8001560:	0a40      	lsrs	r0, r0, #9
 8001562:	e7f1      	b.n	8001548 <__aeabi_i2f+0x74>
 8001564:	fbffffff 	.word	0xfbffffff

08001568 <__aeabi_ui2f>:
 8001568:	b570      	push	{r4, r5, r6, lr}
 800156a:	1e04      	subs	r4, r0, #0
 800156c:	d034      	beq.n	80015d8 <__aeabi_ui2f+0x70>
 800156e:	f001 feaf 	bl	80032d0 <__clzsi2>
 8001572:	229e      	movs	r2, #158	; 0x9e
 8001574:	1a12      	subs	r2, r2, r0
 8001576:	2a96      	cmp	r2, #150	; 0x96
 8001578:	dc07      	bgt.n	800158a <__aeabi_ui2f+0x22>
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	2808      	cmp	r0, #8
 800157e:	dd2e      	ble.n	80015de <__aeabi_ui2f+0x76>
 8001580:	3808      	subs	r0, #8
 8001582:	4084      	lsls	r4, r0
 8001584:	0260      	lsls	r0, r4, #9
 8001586:	0a40      	lsrs	r0, r0, #9
 8001588:	e021      	b.n	80015ce <__aeabi_ui2f+0x66>
 800158a:	2a99      	cmp	r2, #153	; 0x99
 800158c:	dd09      	ble.n	80015a2 <__aeabi_ui2f+0x3a>
 800158e:	0003      	movs	r3, r0
 8001590:	0021      	movs	r1, r4
 8001592:	331b      	adds	r3, #27
 8001594:	4099      	lsls	r1, r3
 8001596:	1e4b      	subs	r3, r1, #1
 8001598:	4199      	sbcs	r1, r3
 800159a:	2305      	movs	r3, #5
 800159c:	1a1b      	subs	r3, r3, r0
 800159e:	40dc      	lsrs	r4, r3
 80015a0:	430c      	orrs	r4, r1
 80015a2:	2805      	cmp	r0, #5
 80015a4:	dd01      	ble.n	80015aa <__aeabi_ui2f+0x42>
 80015a6:	1f43      	subs	r3, r0, #5
 80015a8:	409c      	lsls	r4, r3
 80015aa:	0023      	movs	r3, r4
 80015ac:	490d      	ldr	r1, [pc, #52]	; (80015e4 <__aeabi_ui2f+0x7c>)
 80015ae:	400b      	ands	r3, r1
 80015b0:	0765      	lsls	r5, r4, #29
 80015b2:	d009      	beq.n	80015c8 <__aeabi_ui2f+0x60>
 80015b4:	250f      	movs	r5, #15
 80015b6:	402c      	ands	r4, r5
 80015b8:	2c04      	cmp	r4, #4
 80015ba:	d005      	beq.n	80015c8 <__aeabi_ui2f+0x60>
 80015bc:	3304      	adds	r3, #4
 80015be:	015c      	lsls	r4, r3, #5
 80015c0:	d502      	bpl.n	80015c8 <__aeabi_ui2f+0x60>
 80015c2:	229f      	movs	r2, #159	; 0x9f
 80015c4:	400b      	ands	r3, r1
 80015c6:	1a12      	subs	r2, r2, r0
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	0a58      	lsrs	r0, r3, #9
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	0240      	lsls	r0, r0, #9
 80015d0:	05d2      	lsls	r2, r2, #23
 80015d2:	0a40      	lsrs	r0, r0, #9
 80015d4:	4310      	orrs	r0, r2
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
 80015d8:	2200      	movs	r2, #0
 80015da:	2000      	movs	r0, #0
 80015dc:	e7f7      	b.n	80015ce <__aeabi_ui2f+0x66>
 80015de:	0260      	lsls	r0, r4, #9
 80015e0:	0a40      	lsrs	r0, r0, #9
 80015e2:	e7f4      	b.n	80015ce <__aeabi_ui2f+0x66>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	464f      	mov	r7, r9
 80015ec:	4646      	mov	r6, r8
 80015ee:	46d6      	mov	lr, sl
 80015f0:	000c      	movs	r4, r1
 80015f2:	0309      	lsls	r1, r1, #12
 80015f4:	b5c0      	push	{r6, r7, lr}
 80015f6:	0a49      	lsrs	r1, r1, #9
 80015f8:	0f47      	lsrs	r7, r0, #29
 80015fa:	005e      	lsls	r6, r3, #1
 80015fc:	4339      	orrs	r1, r7
 80015fe:	031f      	lsls	r7, r3, #12
 8001600:	0fdb      	lsrs	r3, r3, #31
 8001602:	469c      	mov	ip, r3
 8001604:	0065      	lsls	r5, r4, #1
 8001606:	0a7b      	lsrs	r3, r7, #9
 8001608:	0f57      	lsrs	r7, r2, #29
 800160a:	431f      	orrs	r7, r3
 800160c:	0d6d      	lsrs	r5, r5, #21
 800160e:	0fe4      	lsrs	r4, r4, #31
 8001610:	0d76      	lsrs	r6, r6, #21
 8001612:	46a1      	mov	r9, r4
 8001614:	00c0      	lsls	r0, r0, #3
 8001616:	46b8      	mov	r8, r7
 8001618:	00d2      	lsls	r2, r2, #3
 800161a:	1bab      	subs	r3, r5, r6
 800161c:	4564      	cmp	r4, ip
 800161e:	d07b      	beq.n	8001718 <__aeabi_dadd+0x130>
 8001620:	2b00      	cmp	r3, #0
 8001622:	dd5f      	ble.n	80016e4 <__aeabi_dadd+0xfc>
 8001624:	2e00      	cmp	r6, #0
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x42>
 8001628:	e0a4      	b.n	8001774 <__aeabi_dadd+0x18c>
 800162a:	003e      	movs	r6, r7
 800162c:	4316      	orrs	r6, r2
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0x4a>
 8001630:	e112      	b.n	8001858 <__aeabi_dadd+0x270>
 8001632:	1e5e      	subs	r6, r3, #1
 8001634:	2e00      	cmp	r6, #0
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x52>
 8001638:	e19e      	b.n	8001978 <__aeabi_dadd+0x390>
 800163a:	1a87      	subs	r7, r0, r2
 800163c:	4643      	mov	r3, r8
 800163e:	42b8      	cmp	r0, r7
 8001640:	4180      	sbcs	r0, r0
 8001642:	2501      	movs	r5, #1
 8001644:	1ac9      	subs	r1, r1, r3
 8001646:	4240      	negs	r0, r0
 8001648:	1a09      	subs	r1, r1, r0
 800164a:	020b      	lsls	r3, r1, #8
 800164c:	d400      	bmi.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e131      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001650:	0249      	lsls	r1, r1, #9
 8001652:	0a4e      	lsrs	r6, r1, #9
 8001654:	2e00      	cmp	r6, #0
 8001656:	d100      	bne.n	800165a <__aeabi_dadd+0x72>
 8001658:	e16e      	b.n	8001938 <__aeabi_dadd+0x350>
 800165a:	0030      	movs	r0, r6
 800165c:	f001 fe38 	bl	80032d0 <__clzsi2>
 8001660:	0003      	movs	r3, r0
 8001662:	3b08      	subs	r3, #8
 8001664:	2b1f      	cmp	r3, #31
 8001666:	dd00      	ble.n	800166a <__aeabi_dadd+0x82>
 8001668:	e161      	b.n	800192e <__aeabi_dadd+0x346>
 800166a:	2220      	movs	r2, #32
 800166c:	0039      	movs	r1, r7
 800166e:	1ad2      	subs	r2, r2, r3
 8001670:	409e      	lsls	r6, r3
 8001672:	40d1      	lsrs	r1, r2
 8001674:	409f      	lsls	r7, r3
 8001676:	430e      	orrs	r6, r1
 8001678:	429d      	cmp	r5, r3
 800167a:	dd00      	ble.n	800167e <__aeabi_dadd+0x96>
 800167c:	e151      	b.n	8001922 <__aeabi_dadd+0x33a>
 800167e:	1b5d      	subs	r5, r3, r5
 8001680:	1c6b      	adds	r3, r5, #1
 8001682:	2b1f      	cmp	r3, #31
 8001684:	dd00      	ble.n	8001688 <__aeabi_dadd+0xa0>
 8001686:	e17c      	b.n	8001982 <__aeabi_dadd+0x39a>
 8001688:	2120      	movs	r1, #32
 800168a:	1ac9      	subs	r1, r1, r3
 800168c:	003d      	movs	r5, r7
 800168e:	0030      	movs	r0, r6
 8001690:	408f      	lsls	r7, r1
 8001692:	4088      	lsls	r0, r1
 8001694:	40dd      	lsrs	r5, r3
 8001696:	1e79      	subs	r1, r7, #1
 8001698:	418f      	sbcs	r7, r1
 800169a:	0031      	movs	r1, r6
 800169c:	2207      	movs	r2, #7
 800169e:	4328      	orrs	r0, r5
 80016a0:	40d9      	lsrs	r1, r3
 80016a2:	2500      	movs	r5, #0
 80016a4:	4307      	orrs	r7, r0
 80016a6:	403a      	ands	r2, r7
 80016a8:	2a00      	cmp	r2, #0
 80016aa:	d009      	beq.n	80016c0 <__aeabi_dadd+0xd8>
 80016ac:	230f      	movs	r3, #15
 80016ae:	403b      	ands	r3, r7
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_dadd+0xd8>
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	42bb      	cmp	r3, r7
 80016b8:	41bf      	sbcs	r7, r7
 80016ba:	427f      	negs	r7, r7
 80016bc:	19c9      	adds	r1, r1, r7
 80016be:	001f      	movs	r7, r3
 80016c0:	020b      	lsls	r3, r1, #8
 80016c2:	d400      	bmi.n	80016c6 <__aeabi_dadd+0xde>
 80016c4:	e226      	b.n	8001b14 <__aeabi_dadd+0x52c>
 80016c6:	1c6a      	adds	r2, r5, #1
 80016c8:	4bc6      	ldr	r3, [pc, #792]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80016ca:	0555      	lsls	r5, r2, #21
 80016cc:	0d6d      	lsrs	r5, r5, #21
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0xec>
 80016d2:	e106      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 80016d4:	4ac4      	ldr	r2, [pc, #784]	; (80019e8 <__aeabi_dadd+0x400>)
 80016d6:	08ff      	lsrs	r7, r7, #3
 80016d8:	400a      	ands	r2, r1
 80016da:	0753      	lsls	r3, r2, #29
 80016dc:	0252      	lsls	r2, r2, #9
 80016de:	433b      	orrs	r3, r7
 80016e0:	0b12      	lsrs	r2, r2, #12
 80016e2:	e08e      	b.n	8001802 <__aeabi_dadd+0x21a>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d000      	beq.n	80016ea <__aeabi_dadd+0x102>
 80016e8:	e0b8      	b.n	800185c <__aeabi_dadd+0x274>
 80016ea:	1c6b      	adds	r3, r5, #1
 80016ec:	055b      	lsls	r3, r3, #21
 80016ee:	0d5b      	lsrs	r3, r3, #21
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	dc00      	bgt.n	80016f6 <__aeabi_dadd+0x10e>
 80016f4:	e130      	b.n	8001958 <__aeabi_dadd+0x370>
 80016f6:	1a87      	subs	r7, r0, r2
 80016f8:	4643      	mov	r3, r8
 80016fa:	42b8      	cmp	r0, r7
 80016fc:	41b6      	sbcs	r6, r6
 80016fe:	1acb      	subs	r3, r1, r3
 8001700:	4276      	negs	r6, r6
 8001702:	1b9e      	subs	r6, r3, r6
 8001704:	0233      	lsls	r3, r6, #8
 8001706:	d500      	bpl.n	800170a <__aeabi_dadd+0x122>
 8001708:	e14c      	b.n	80019a4 <__aeabi_dadd+0x3bc>
 800170a:	003b      	movs	r3, r7
 800170c:	4333      	orrs	r3, r6
 800170e:	d1a1      	bne.n	8001654 <__aeabi_dadd+0x6c>
 8001710:	2200      	movs	r2, #0
 8001712:	2400      	movs	r4, #0
 8001714:	2500      	movs	r5, #0
 8001716:	e070      	b.n	80017fa <__aeabi_dadd+0x212>
 8001718:	2b00      	cmp	r3, #0
 800171a:	dc00      	bgt.n	800171e <__aeabi_dadd+0x136>
 800171c:	e0e5      	b.n	80018ea <__aeabi_dadd+0x302>
 800171e:	2e00      	cmp	r6, #0
 8001720:	d100      	bne.n	8001724 <__aeabi_dadd+0x13c>
 8001722:	e083      	b.n	800182c <__aeabi_dadd+0x244>
 8001724:	4eaf      	ldr	r6, [pc, #700]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001726:	42b5      	cmp	r5, r6
 8001728:	d060      	beq.n	80017ec <__aeabi_dadd+0x204>
 800172a:	2680      	movs	r6, #128	; 0x80
 800172c:	0436      	lsls	r6, r6, #16
 800172e:	4337      	orrs	r7, r6
 8001730:	46b8      	mov	r8, r7
 8001732:	2b38      	cmp	r3, #56	; 0x38
 8001734:	dc00      	bgt.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e13e      	b.n	80019b6 <__aeabi_dadd+0x3ce>
 8001738:	4643      	mov	r3, r8
 800173a:	4313      	orrs	r3, r2
 800173c:	001f      	movs	r7, r3
 800173e:	1e7a      	subs	r2, r7, #1
 8001740:	4197      	sbcs	r7, r2
 8001742:	183f      	adds	r7, r7, r0
 8001744:	4287      	cmp	r7, r0
 8001746:	4180      	sbcs	r0, r0
 8001748:	4240      	negs	r0, r0
 800174a:	1809      	adds	r1, r1, r0
 800174c:	020b      	lsls	r3, r1, #8
 800174e:	d400      	bmi.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e0b0      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001752:	4ba4      	ldr	r3, [pc, #656]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001754:	3501      	adds	r5, #1
 8001756:	429d      	cmp	r5, r3
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x174>
 800175a:	e0c3      	b.n	80018e4 <__aeabi_dadd+0x2fc>
 800175c:	4aa2      	ldr	r2, [pc, #648]	; (80019e8 <__aeabi_dadd+0x400>)
 800175e:	087b      	lsrs	r3, r7, #1
 8001760:	400a      	ands	r2, r1
 8001762:	2101      	movs	r1, #1
 8001764:	400f      	ands	r7, r1
 8001766:	431f      	orrs	r7, r3
 8001768:	0851      	lsrs	r1, r2, #1
 800176a:	07d3      	lsls	r3, r2, #31
 800176c:	2207      	movs	r2, #7
 800176e:	431f      	orrs	r7, r3
 8001770:	403a      	ands	r2, r7
 8001772:	e799      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001774:	4e9b      	ldr	r6, [pc, #620]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001776:	42b5      	cmp	r5, r6
 8001778:	d038      	beq.n	80017ec <__aeabi_dadd+0x204>
 800177a:	2680      	movs	r6, #128	; 0x80
 800177c:	0436      	lsls	r6, r6, #16
 800177e:	4337      	orrs	r7, r6
 8001780:	46b8      	mov	r8, r7
 8001782:	2b38      	cmp	r3, #56	; 0x38
 8001784:	dd00      	ble.n	8001788 <__aeabi_dadd+0x1a0>
 8001786:	e0dc      	b.n	8001942 <__aeabi_dadd+0x35a>
 8001788:	2b1f      	cmp	r3, #31
 800178a:	dc00      	bgt.n	800178e <__aeabi_dadd+0x1a6>
 800178c:	e130      	b.n	80019f0 <__aeabi_dadd+0x408>
 800178e:	001e      	movs	r6, r3
 8001790:	4647      	mov	r7, r8
 8001792:	3e20      	subs	r6, #32
 8001794:	40f7      	lsrs	r7, r6
 8001796:	46bc      	mov	ip, r7
 8001798:	2b20      	cmp	r3, #32
 800179a:	d004      	beq.n	80017a6 <__aeabi_dadd+0x1be>
 800179c:	2640      	movs	r6, #64	; 0x40
 800179e:	1af3      	subs	r3, r6, r3
 80017a0:	4646      	mov	r6, r8
 80017a2:	409e      	lsls	r6, r3
 80017a4:	4332      	orrs	r2, r6
 80017a6:	0017      	movs	r7, r2
 80017a8:	4663      	mov	r3, ip
 80017aa:	1e7a      	subs	r2, r7, #1
 80017ac:	4197      	sbcs	r7, r2
 80017ae:	431f      	orrs	r7, r3
 80017b0:	e0cc      	b.n	800194c <__aeabi_dadd+0x364>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x1d0>
 80017b6:	e204      	b.n	8001bc2 <__aeabi_dadd+0x5da>
 80017b8:	4643      	mov	r3, r8
 80017ba:	4313      	orrs	r3, r2
 80017bc:	d100      	bne.n	80017c0 <__aeabi_dadd+0x1d8>
 80017be:	e159      	b.n	8001a74 <__aeabi_dadd+0x48c>
 80017c0:	074b      	lsls	r3, r1, #29
 80017c2:	08c0      	lsrs	r0, r0, #3
 80017c4:	4318      	orrs	r0, r3
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	08c9      	lsrs	r1, r1, #3
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	4219      	tst	r1, r3
 80017ce:	d008      	beq.n	80017e2 <__aeabi_dadd+0x1fa>
 80017d0:	4645      	mov	r5, r8
 80017d2:	08ed      	lsrs	r5, r5, #3
 80017d4:	421d      	tst	r5, r3
 80017d6:	d104      	bne.n	80017e2 <__aeabi_dadd+0x1fa>
 80017d8:	4643      	mov	r3, r8
 80017da:	08d0      	lsrs	r0, r2, #3
 80017dc:	0759      	lsls	r1, r3, #29
 80017de:	4308      	orrs	r0, r1
 80017e0:	0029      	movs	r1, r5
 80017e2:	0f42      	lsrs	r2, r0, #29
 80017e4:	00c9      	lsls	r1, r1, #3
 80017e6:	4d7f      	ldr	r5, [pc, #508]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80017e8:	4311      	orrs	r1, r2
 80017ea:	00c0      	lsls	r0, r0, #3
 80017ec:	074b      	lsls	r3, r1, #29
 80017ee:	08ca      	lsrs	r2, r1, #3
 80017f0:	497c      	ldr	r1, [pc, #496]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80017f2:	08c0      	lsrs	r0, r0, #3
 80017f4:	4303      	orrs	r3, r0
 80017f6:	428d      	cmp	r5, r1
 80017f8:	d068      	beq.n	80018cc <__aeabi_dadd+0x2e4>
 80017fa:	0312      	lsls	r2, r2, #12
 80017fc:	056d      	lsls	r5, r5, #21
 80017fe:	0b12      	lsrs	r2, r2, #12
 8001800:	0d6d      	lsrs	r5, r5, #21
 8001802:	2100      	movs	r1, #0
 8001804:	0312      	lsls	r2, r2, #12
 8001806:	0018      	movs	r0, r3
 8001808:	0b13      	lsrs	r3, r2, #12
 800180a:	0d0a      	lsrs	r2, r1, #20
 800180c:	0512      	lsls	r2, r2, #20
 800180e:	431a      	orrs	r2, r3
 8001810:	4b76      	ldr	r3, [pc, #472]	; (80019ec <__aeabi_dadd+0x404>)
 8001812:	052d      	lsls	r5, r5, #20
 8001814:	4013      	ands	r3, r2
 8001816:	432b      	orrs	r3, r5
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	07e4      	lsls	r4, r4, #31
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	4323      	orrs	r3, r4
 8001820:	0019      	movs	r1, r3
 8001822:	bc1c      	pop	{r2, r3, r4}
 8001824:	4690      	mov	r8, r2
 8001826:	4699      	mov	r9, r3
 8001828:	46a2      	mov	sl, r4
 800182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182c:	003e      	movs	r6, r7
 800182e:	4316      	orrs	r6, r2
 8001830:	d012      	beq.n	8001858 <__aeabi_dadd+0x270>
 8001832:	1e5e      	subs	r6, r3, #1
 8001834:	2e00      	cmp	r6, #0
 8001836:	d000      	beq.n	800183a <__aeabi_dadd+0x252>
 8001838:	e100      	b.n	8001a3c <__aeabi_dadd+0x454>
 800183a:	1887      	adds	r7, r0, r2
 800183c:	4287      	cmp	r7, r0
 800183e:	4180      	sbcs	r0, r0
 8001840:	4441      	add	r1, r8
 8001842:	4240      	negs	r0, r0
 8001844:	1809      	adds	r1, r1, r0
 8001846:	2501      	movs	r5, #1
 8001848:	020b      	lsls	r3, r1, #8
 800184a:	d533      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 800184c:	2502      	movs	r5, #2
 800184e:	e785      	b.n	800175c <__aeabi_dadd+0x174>
 8001850:	4664      	mov	r4, ip
 8001852:	0033      	movs	r3, r6
 8001854:	4641      	mov	r1, r8
 8001856:	0010      	movs	r0, r2
 8001858:	001d      	movs	r5, r3
 800185a:	e7c7      	b.n	80017ec <__aeabi_dadd+0x204>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d000      	beq.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e0da      	b.n	8001a18 <__aeabi_dadd+0x430>
 8001862:	000c      	movs	r4, r1
 8001864:	4304      	orrs	r4, r0
 8001866:	d0f3      	beq.n	8001850 <__aeabi_dadd+0x268>
 8001868:	1c5c      	adds	r4, r3, #1
 800186a:	d100      	bne.n	800186e <__aeabi_dadd+0x286>
 800186c:	e19f      	b.n	8001bae <__aeabi_dadd+0x5c6>
 800186e:	4c5d      	ldr	r4, [pc, #372]	; (80019e4 <__aeabi_dadd+0x3fc>)
 8001870:	42a6      	cmp	r6, r4
 8001872:	d100      	bne.n	8001876 <__aeabi_dadd+0x28e>
 8001874:	e12f      	b.n	8001ad6 <__aeabi_dadd+0x4ee>
 8001876:	43db      	mvns	r3, r3
 8001878:	2b38      	cmp	r3, #56	; 0x38
 800187a:	dd00      	ble.n	800187e <__aeabi_dadd+0x296>
 800187c:	e166      	b.n	8001b4c <__aeabi_dadd+0x564>
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dadd+0x29c>
 8001882:	e183      	b.n	8001b8c <__aeabi_dadd+0x5a4>
 8001884:	2420      	movs	r4, #32
 8001886:	0005      	movs	r5, r0
 8001888:	1ae4      	subs	r4, r4, r3
 800188a:	000f      	movs	r7, r1
 800188c:	40dd      	lsrs	r5, r3
 800188e:	40d9      	lsrs	r1, r3
 8001890:	40a0      	lsls	r0, r4
 8001892:	4643      	mov	r3, r8
 8001894:	40a7      	lsls	r7, r4
 8001896:	1a5b      	subs	r3, r3, r1
 8001898:	1e44      	subs	r4, r0, #1
 800189a:	41a0      	sbcs	r0, r4
 800189c:	4698      	mov	r8, r3
 800189e:	432f      	orrs	r7, r5
 80018a0:	4338      	orrs	r0, r7
 80018a2:	1a17      	subs	r7, r2, r0
 80018a4:	42ba      	cmp	r2, r7
 80018a6:	4192      	sbcs	r2, r2
 80018a8:	4643      	mov	r3, r8
 80018aa:	4252      	negs	r2, r2
 80018ac:	1a99      	subs	r1, r3, r2
 80018ae:	4664      	mov	r4, ip
 80018b0:	0035      	movs	r5, r6
 80018b2:	e6ca      	b.n	800164a <__aeabi_dadd+0x62>
 80018b4:	2207      	movs	r2, #7
 80018b6:	403a      	ands	r2, r7
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e6f6      	b.n	80016ac <__aeabi_dadd+0xc4>
 80018be:	074b      	lsls	r3, r1, #29
 80018c0:	08ca      	lsrs	r2, r1, #3
 80018c2:	4948      	ldr	r1, [pc, #288]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018c4:	08ff      	lsrs	r7, r7, #3
 80018c6:	433b      	orrs	r3, r7
 80018c8:	428d      	cmp	r5, r1
 80018ca:	d196      	bne.n	80017fa <__aeabi_dadd+0x212>
 80018cc:	0019      	movs	r1, r3
 80018ce:	4311      	orrs	r1, r2
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x2ec>
 80018d2:	e19e      	b.n	8001c12 <__aeabi_dadd+0x62a>
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0309      	lsls	r1, r1, #12
 80018d8:	430a      	orrs	r2, r1
 80018da:	0312      	lsls	r2, r2, #12
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	4d41      	ldr	r5, [pc, #260]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018e0:	e78f      	b.n	8001802 <__aeabi_dadd+0x21a>
 80018e2:	0015      	movs	r5, r2
 80018e4:	2200      	movs	r2, #0
 80018e6:	2300      	movs	r3, #0
 80018e8:	e78b      	b.n	8001802 <__aeabi_dadd+0x21a>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d000      	beq.n	80018f0 <__aeabi_dadd+0x308>
 80018ee:	e0c7      	b.n	8001a80 <__aeabi_dadd+0x498>
 80018f0:	1c6b      	adds	r3, r5, #1
 80018f2:	055f      	lsls	r7, r3, #21
 80018f4:	0d7f      	lsrs	r7, r7, #21
 80018f6:	2f01      	cmp	r7, #1
 80018f8:	dc00      	bgt.n	80018fc <__aeabi_dadd+0x314>
 80018fa:	e0f1      	b.n	8001ae0 <__aeabi_dadd+0x4f8>
 80018fc:	4d39      	ldr	r5, [pc, #228]	; (80019e4 <__aeabi_dadd+0x3fc>)
 80018fe:	42ab      	cmp	r3, r5
 8001900:	d100      	bne.n	8001904 <__aeabi_dadd+0x31c>
 8001902:	e0b9      	b.n	8001a78 <__aeabi_dadd+0x490>
 8001904:	1885      	adds	r5, r0, r2
 8001906:	000a      	movs	r2, r1
 8001908:	4285      	cmp	r5, r0
 800190a:	4189      	sbcs	r1, r1
 800190c:	4442      	add	r2, r8
 800190e:	4249      	negs	r1, r1
 8001910:	1851      	adds	r1, r2, r1
 8001912:	2207      	movs	r2, #7
 8001914:	07cf      	lsls	r7, r1, #31
 8001916:	086d      	lsrs	r5, r5, #1
 8001918:	432f      	orrs	r7, r5
 800191a:	0849      	lsrs	r1, r1, #1
 800191c:	403a      	ands	r2, r7
 800191e:	001d      	movs	r5, r3
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	2207      	movs	r2, #7
 8001924:	4930      	ldr	r1, [pc, #192]	; (80019e8 <__aeabi_dadd+0x400>)
 8001926:	1aed      	subs	r5, r5, r3
 8001928:	4031      	ands	r1, r6
 800192a:	403a      	ands	r2, r7
 800192c:	e6bc      	b.n	80016a8 <__aeabi_dadd+0xc0>
 800192e:	003e      	movs	r6, r7
 8001930:	3828      	subs	r0, #40	; 0x28
 8001932:	4086      	lsls	r6, r0
 8001934:	2700      	movs	r7, #0
 8001936:	e69f      	b.n	8001678 <__aeabi_dadd+0x90>
 8001938:	0038      	movs	r0, r7
 800193a:	f001 fcc9 	bl	80032d0 <__clzsi2>
 800193e:	3020      	adds	r0, #32
 8001940:	e68e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001942:	4643      	mov	r3, r8
 8001944:	4313      	orrs	r3, r2
 8001946:	001f      	movs	r7, r3
 8001948:	1e7a      	subs	r2, r7, #1
 800194a:	4197      	sbcs	r7, r2
 800194c:	1bc7      	subs	r7, r0, r7
 800194e:	42b8      	cmp	r0, r7
 8001950:	4180      	sbcs	r0, r0
 8001952:	4240      	negs	r0, r0
 8001954:	1a09      	subs	r1, r1, r0
 8001956:	e678      	b.n	800164a <__aeabi_dadd+0x62>
 8001958:	000e      	movs	r6, r1
 800195a:	003b      	movs	r3, r7
 800195c:	4306      	orrs	r6, r0
 800195e:	4313      	orrs	r3, r2
 8001960:	2d00      	cmp	r5, #0
 8001962:	d161      	bne.n	8001a28 <__aeabi_dadd+0x440>
 8001964:	2e00      	cmp	r6, #0
 8001966:	d000      	beq.n	800196a <__aeabi_dadd+0x382>
 8001968:	e0f4      	b.n	8001b54 <__aeabi_dadd+0x56c>
 800196a:	2b00      	cmp	r3, #0
 800196c:	d100      	bne.n	8001970 <__aeabi_dadd+0x388>
 800196e:	e11b      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001970:	4664      	mov	r4, ip
 8001972:	0039      	movs	r1, r7
 8001974:	0010      	movs	r0, r2
 8001976:	e739      	b.n	80017ec <__aeabi_dadd+0x204>
 8001978:	4f1a      	ldr	r7, [pc, #104]	; (80019e4 <__aeabi_dadd+0x3fc>)
 800197a:	42bb      	cmp	r3, r7
 800197c:	d07a      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 800197e:	0033      	movs	r3, r6
 8001980:	e6ff      	b.n	8001782 <__aeabi_dadd+0x19a>
 8001982:	0030      	movs	r0, r6
 8001984:	3d1f      	subs	r5, #31
 8001986:	40e8      	lsrs	r0, r5
 8001988:	2b20      	cmp	r3, #32
 800198a:	d003      	beq.n	8001994 <__aeabi_dadd+0x3ac>
 800198c:	2140      	movs	r1, #64	; 0x40
 800198e:	1acb      	subs	r3, r1, r3
 8001990:	409e      	lsls	r6, r3
 8001992:	4337      	orrs	r7, r6
 8001994:	1e7b      	subs	r3, r7, #1
 8001996:	419f      	sbcs	r7, r3
 8001998:	2207      	movs	r2, #7
 800199a:	4307      	orrs	r7, r0
 800199c:	403a      	ands	r2, r7
 800199e:	2100      	movs	r1, #0
 80019a0:	2500      	movs	r5, #0
 80019a2:	e789      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 80019a4:	1a17      	subs	r7, r2, r0
 80019a6:	4643      	mov	r3, r8
 80019a8:	42ba      	cmp	r2, r7
 80019aa:	41b6      	sbcs	r6, r6
 80019ac:	1a59      	subs	r1, r3, r1
 80019ae:	4276      	negs	r6, r6
 80019b0:	1b8e      	subs	r6, r1, r6
 80019b2:	4664      	mov	r4, ip
 80019b4:	e64e      	b.n	8001654 <__aeabi_dadd+0x6c>
 80019b6:	2b1f      	cmp	r3, #31
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dadd+0x3d4>
 80019ba:	e0ad      	b.n	8001b18 <__aeabi_dadd+0x530>
 80019bc:	2620      	movs	r6, #32
 80019be:	4647      	mov	r7, r8
 80019c0:	1af6      	subs	r6, r6, r3
 80019c2:	40b7      	lsls	r7, r6
 80019c4:	46b9      	mov	r9, r7
 80019c6:	0017      	movs	r7, r2
 80019c8:	46b2      	mov	sl, r6
 80019ca:	40df      	lsrs	r7, r3
 80019cc:	464e      	mov	r6, r9
 80019ce:	433e      	orrs	r6, r7
 80019d0:	0037      	movs	r7, r6
 80019d2:	4656      	mov	r6, sl
 80019d4:	40b2      	lsls	r2, r6
 80019d6:	1e56      	subs	r6, r2, #1
 80019d8:	41b2      	sbcs	r2, r6
 80019da:	4317      	orrs	r7, r2
 80019dc:	4642      	mov	r2, r8
 80019de:	40da      	lsrs	r2, r3
 80019e0:	1889      	adds	r1, r1, r2
 80019e2:	e6ae      	b.n	8001742 <__aeabi_dadd+0x15a>
 80019e4:	000007ff 	.word	0x000007ff
 80019e8:	ff7fffff 	.word	0xff7fffff
 80019ec:	800fffff 	.word	0x800fffff
 80019f0:	2620      	movs	r6, #32
 80019f2:	4647      	mov	r7, r8
 80019f4:	1af6      	subs	r6, r6, r3
 80019f6:	40b7      	lsls	r7, r6
 80019f8:	46b9      	mov	r9, r7
 80019fa:	0017      	movs	r7, r2
 80019fc:	46b2      	mov	sl, r6
 80019fe:	40df      	lsrs	r7, r3
 8001a00:	464e      	mov	r6, r9
 8001a02:	433e      	orrs	r6, r7
 8001a04:	0037      	movs	r7, r6
 8001a06:	4656      	mov	r6, sl
 8001a08:	40b2      	lsls	r2, r6
 8001a0a:	1e56      	subs	r6, r2, #1
 8001a0c:	41b2      	sbcs	r2, r6
 8001a0e:	4317      	orrs	r7, r2
 8001a10:	4642      	mov	r2, r8
 8001a12:	40da      	lsrs	r2, r3
 8001a14:	1a89      	subs	r1, r1, r2
 8001a16:	e799      	b.n	800194c <__aeabi_dadd+0x364>
 8001a18:	4c7f      	ldr	r4, [pc, #508]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a1a:	42a6      	cmp	r6, r4
 8001a1c:	d05b      	beq.n	8001ad6 <__aeabi_dadd+0x4ee>
 8001a1e:	2480      	movs	r4, #128	; 0x80
 8001a20:	0424      	lsls	r4, r4, #16
 8001a22:	425b      	negs	r3, r3
 8001a24:	4321      	orrs	r1, r4
 8001a26:	e727      	b.n	8001878 <__aeabi_dadd+0x290>
 8001a28:	2e00      	cmp	r6, #0
 8001a2a:	d10c      	bne.n	8001a46 <__aeabi_dadd+0x45e>
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_dadd+0x44a>
 8001a30:	e0cb      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001a32:	4664      	mov	r4, ip
 8001a34:	0039      	movs	r1, r7
 8001a36:	0010      	movs	r0, r2
 8001a38:	4d77      	ldr	r5, [pc, #476]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a3a:	e6d7      	b.n	80017ec <__aeabi_dadd+0x204>
 8001a3c:	4f76      	ldr	r7, [pc, #472]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a3e:	42bb      	cmp	r3, r7
 8001a40:	d018      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 8001a42:	0033      	movs	r3, r6
 8001a44:	e675      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d014      	beq.n	8001a74 <__aeabi_dadd+0x48c>
 8001a4a:	074b      	lsls	r3, r1, #29
 8001a4c:	08c0      	lsrs	r0, r0, #3
 8001a4e:	4318      	orrs	r0, r3
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	08c9      	lsrs	r1, r1, #3
 8001a54:	031b      	lsls	r3, r3, #12
 8001a56:	4219      	tst	r1, r3
 8001a58:	d007      	beq.n	8001a6a <__aeabi_dadd+0x482>
 8001a5a:	08fc      	lsrs	r4, r7, #3
 8001a5c:	421c      	tst	r4, r3
 8001a5e:	d104      	bne.n	8001a6a <__aeabi_dadd+0x482>
 8001a60:	0779      	lsls	r1, r7, #29
 8001a62:	08d0      	lsrs	r0, r2, #3
 8001a64:	4308      	orrs	r0, r1
 8001a66:	46e1      	mov	r9, ip
 8001a68:	0021      	movs	r1, r4
 8001a6a:	464c      	mov	r4, r9
 8001a6c:	0f42      	lsrs	r2, r0, #29
 8001a6e:	00c9      	lsls	r1, r1, #3
 8001a70:	4311      	orrs	r1, r2
 8001a72:	00c0      	lsls	r0, r0, #3
 8001a74:	4d68      	ldr	r5, [pc, #416]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a76:	e6b9      	b.n	80017ec <__aeabi_dadd+0x204>
 8001a78:	001d      	movs	r5, r3
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e6c0      	b.n	8001802 <__aeabi_dadd+0x21a>
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	d15b      	bne.n	8001b3c <__aeabi_dadd+0x554>
 8001a84:	000d      	movs	r5, r1
 8001a86:	4305      	orrs	r5, r0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dadd+0x4a4>
 8001a8a:	e6e2      	b.n	8001852 <__aeabi_dadd+0x26a>
 8001a8c:	1c5d      	adds	r5, r3, #1
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x4aa>
 8001a90:	e0b0      	b.n	8001bf4 <__aeabi_dadd+0x60c>
 8001a92:	4d61      	ldr	r5, [pc, #388]	; (8001c18 <__aeabi_dadd+0x630>)
 8001a94:	42ae      	cmp	r6, r5
 8001a96:	d01f      	beq.n	8001ad8 <__aeabi_dadd+0x4f0>
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	2b38      	cmp	r3, #56	; 0x38
 8001a9c:	dc71      	bgt.n	8001b82 <__aeabi_dadd+0x59a>
 8001a9e:	2b1f      	cmp	r3, #31
 8001aa0:	dd00      	ble.n	8001aa4 <__aeabi_dadd+0x4bc>
 8001aa2:	e096      	b.n	8001bd2 <__aeabi_dadd+0x5ea>
 8001aa4:	2520      	movs	r5, #32
 8001aa6:	000f      	movs	r7, r1
 8001aa8:	1aed      	subs	r5, r5, r3
 8001aaa:	40af      	lsls	r7, r5
 8001aac:	46b9      	mov	r9, r7
 8001aae:	0007      	movs	r7, r0
 8001ab0:	46aa      	mov	sl, r5
 8001ab2:	40df      	lsrs	r7, r3
 8001ab4:	464d      	mov	r5, r9
 8001ab6:	433d      	orrs	r5, r7
 8001ab8:	002f      	movs	r7, r5
 8001aba:	4655      	mov	r5, sl
 8001abc:	40a8      	lsls	r0, r5
 8001abe:	40d9      	lsrs	r1, r3
 8001ac0:	1e45      	subs	r5, r0, #1
 8001ac2:	41a8      	sbcs	r0, r5
 8001ac4:	4488      	add	r8, r1
 8001ac6:	4307      	orrs	r7, r0
 8001ac8:	18bf      	adds	r7, r7, r2
 8001aca:	4297      	cmp	r7, r2
 8001acc:	4192      	sbcs	r2, r2
 8001ace:	4251      	negs	r1, r2
 8001ad0:	4441      	add	r1, r8
 8001ad2:	0035      	movs	r5, r6
 8001ad4:	e63a      	b.n	800174c <__aeabi_dadd+0x164>
 8001ad6:	4664      	mov	r4, ip
 8001ad8:	0035      	movs	r5, r6
 8001ada:	4641      	mov	r1, r8
 8001adc:	0010      	movs	r0, r2
 8001ade:	e685      	b.n	80017ec <__aeabi_dadd+0x204>
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	4303      	orrs	r3, r0
 8001ae4:	2d00      	cmp	r5, #0
 8001ae6:	d000      	beq.n	8001aea <__aeabi_dadd+0x502>
 8001ae8:	e663      	b.n	80017b2 <__aeabi_dadd+0x1ca>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f5      	beq.n	8001ada <__aeabi_dadd+0x4f2>
 8001aee:	4643      	mov	r3, r8
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dadd+0x50e>
 8001af4:	e67a      	b.n	80017ec <__aeabi_dadd+0x204>
 8001af6:	1887      	adds	r7, r0, r2
 8001af8:	4287      	cmp	r7, r0
 8001afa:	4180      	sbcs	r0, r0
 8001afc:	2207      	movs	r2, #7
 8001afe:	4441      	add	r1, r8
 8001b00:	4240      	negs	r0, r0
 8001b02:	1809      	adds	r1, r1, r0
 8001b04:	403a      	ands	r2, r7
 8001b06:	020b      	lsls	r3, r1, #8
 8001b08:	d400      	bmi.n	8001b0c <__aeabi_dadd+0x524>
 8001b0a:	e6d5      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <__aeabi_dadd+0x634>)
 8001b0e:	3501      	adds	r5, #1
 8001b10:	4019      	ands	r1, r3
 8001b12:	e5c9      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001b14:	0038      	movs	r0, r7
 8001b16:	e669      	b.n	80017ec <__aeabi_dadd+0x204>
 8001b18:	001e      	movs	r6, r3
 8001b1a:	4647      	mov	r7, r8
 8001b1c:	3e20      	subs	r6, #32
 8001b1e:	40f7      	lsrs	r7, r6
 8001b20:	46bc      	mov	ip, r7
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d004      	beq.n	8001b30 <__aeabi_dadd+0x548>
 8001b26:	2640      	movs	r6, #64	; 0x40
 8001b28:	1af3      	subs	r3, r6, r3
 8001b2a:	4646      	mov	r6, r8
 8001b2c:	409e      	lsls	r6, r3
 8001b2e:	4332      	orrs	r2, r6
 8001b30:	0017      	movs	r7, r2
 8001b32:	4663      	mov	r3, ip
 8001b34:	1e7a      	subs	r2, r7, #1
 8001b36:	4197      	sbcs	r7, r2
 8001b38:	431f      	orrs	r7, r3
 8001b3a:	e602      	b.n	8001742 <__aeabi_dadd+0x15a>
 8001b3c:	4d36      	ldr	r5, [pc, #216]	; (8001c18 <__aeabi_dadd+0x630>)
 8001b3e:	42ae      	cmp	r6, r5
 8001b40:	d0ca      	beq.n	8001ad8 <__aeabi_dadd+0x4f0>
 8001b42:	2580      	movs	r5, #128	; 0x80
 8001b44:	042d      	lsls	r5, r5, #16
 8001b46:	425b      	negs	r3, r3
 8001b48:	4329      	orrs	r1, r5
 8001b4a:	e7a6      	b.n	8001a9a <__aeabi_dadd+0x4b2>
 8001b4c:	4308      	orrs	r0, r1
 8001b4e:	1e41      	subs	r1, r0, #1
 8001b50:	4188      	sbcs	r0, r1
 8001b52:	e6a6      	b.n	80018a2 <__aeabi_dadd+0x2ba>
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dadd+0x572>
 8001b58:	e648      	b.n	80017ec <__aeabi_dadd+0x204>
 8001b5a:	1a87      	subs	r7, r0, r2
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	42b8      	cmp	r0, r7
 8001b60:	41b6      	sbcs	r6, r6
 8001b62:	1acb      	subs	r3, r1, r3
 8001b64:	4276      	negs	r6, r6
 8001b66:	1b9e      	subs	r6, r3, r6
 8001b68:	0233      	lsls	r3, r6, #8
 8001b6a:	d54b      	bpl.n	8001c04 <__aeabi_dadd+0x61c>
 8001b6c:	1a17      	subs	r7, r2, r0
 8001b6e:	4643      	mov	r3, r8
 8001b70:	42ba      	cmp	r2, r7
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	1a59      	subs	r1, r3, r1
 8001b76:	4252      	negs	r2, r2
 8001b78:	1a89      	subs	r1, r1, r2
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	4664      	mov	r4, ip
 8001b7e:	403a      	ands	r2, r7
 8001b80:	e592      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001b82:	4301      	orrs	r1, r0
 8001b84:	000f      	movs	r7, r1
 8001b86:	1e79      	subs	r1, r7, #1
 8001b88:	418f      	sbcs	r7, r1
 8001b8a:	e79d      	b.n	8001ac8 <__aeabi_dadd+0x4e0>
 8001b8c:	001c      	movs	r4, r3
 8001b8e:	000f      	movs	r7, r1
 8001b90:	3c20      	subs	r4, #32
 8001b92:	40e7      	lsrs	r7, r4
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d003      	beq.n	8001ba0 <__aeabi_dadd+0x5b8>
 8001b98:	2440      	movs	r4, #64	; 0x40
 8001b9a:	1ae3      	subs	r3, r4, r3
 8001b9c:	4099      	lsls	r1, r3
 8001b9e:	4308      	orrs	r0, r1
 8001ba0:	1e41      	subs	r1, r0, #1
 8001ba2:	4188      	sbcs	r0, r1
 8001ba4:	4338      	orrs	r0, r7
 8001ba6:	e67c      	b.n	80018a2 <__aeabi_dadd+0x2ba>
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2400      	movs	r4, #0
 8001bac:	e625      	b.n	80017fa <__aeabi_dadd+0x212>
 8001bae:	1a17      	subs	r7, r2, r0
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	42ba      	cmp	r2, r7
 8001bb4:	4192      	sbcs	r2, r2
 8001bb6:	1a59      	subs	r1, r3, r1
 8001bb8:	4252      	negs	r2, r2
 8001bba:	1a89      	subs	r1, r1, r2
 8001bbc:	4664      	mov	r4, ip
 8001bbe:	0035      	movs	r5, r6
 8001bc0:	e543      	b.n	800164a <__aeabi_dadd+0x62>
 8001bc2:	4641      	mov	r1, r8
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	4d14      	ldr	r5, [pc, #80]	; (8001c18 <__aeabi_dadd+0x630>)
 8001bc8:	e610      	b.n	80017ec <__aeabi_dadd+0x204>
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	2400      	movs	r4, #0
 8001bce:	0312      	lsls	r2, r2, #12
 8001bd0:	e680      	b.n	80018d4 <__aeabi_dadd+0x2ec>
 8001bd2:	001d      	movs	r5, r3
 8001bd4:	000f      	movs	r7, r1
 8001bd6:	3d20      	subs	r5, #32
 8001bd8:	40ef      	lsrs	r7, r5
 8001bda:	46bc      	mov	ip, r7
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d003      	beq.n	8001be8 <__aeabi_dadd+0x600>
 8001be0:	2540      	movs	r5, #64	; 0x40
 8001be2:	1aeb      	subs	r3, r5, r3
 8001be4:	4099      	lsls	r1, r3
 8001be6:	4308      	orrs	r0, r1
 8001be8:	0007      	movs	r7, r0
 8001bea:	4663      	mov	r3, ip
 8001bec:	1e78      	subs	r0, r7, #1
 8001bee:	4187      	sbcs	r7, r0
 8001bf0:	431f      	orrs	r7, r3
 8001bf2:	e769      	b.n	8001ac8 <__aeabi_dadd+0x4e0>
 8001bf4:	1887      	adds	r7, r0, r2
 8001bf6:	4297      	cmp	r7, r2
 8001bf8:	419b      	sbcs	r3, r3
 8001bfa:	4441      	add	r1, r8
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	18c9      	adds	r1, r1, r3
 8001c00:	0035      	movs	r5, r6
 8001c02:	e5a3      	b.n	800174c <__aeabi_dadd+0x164>
 8001c04:	003b      	movs	r3, r7
 8001c06:	4333      	orrs	r3, r6
 8001c08:	d0ce      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	0031      	movs	r1, r6
 8001c0e:	403a      	ands	r2, r7
 8001c10:	e652      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001c12:	2300      	movs	r3, #0
 8001c14:	001a      	movs	r2, r3
 8001c16:	e5f4      	b.n	8001802 <__aeabi_dadd+0x21a>
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	ff7fffff 	.word	0xff7fffff

08001c20 <__aeabi_ddiv>:
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	4657      	mov	r7, sl
 8001c24:	46de      	mov	lr, fp
 8001c26:	464e      	mov	r6, r9
 8001c28:	4645      	mov	r5, r8
 8001c2a:	b5e0      	push	{r5, r6, r7, lr}
 8001c2c:	4683      	mov	fp, r0
 8001c2e:	0007      	movs	r7, r0
 8001c30:	030e      	lsls	r6, r1, #12
 8001c32:	0048      	lsls	r0, r1, #1
 8001c34:	b085      	sub	sp, #20
 8001c36:	4692      	mov	sl, r2
 8001c38:	001c      	movs	r4, r3
 8001c3a:	0b36      	lsrs	r6, r6, #12
 8001c3c:	0d40      	lsrs	r0, r0, #21
 8001c3e:	0fcd      	lsrs	r5, r1, #31
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d100      	bne.n	8001c46 <__aeabi_ddiv+0x26>
 8001c44:	e09d      	b.n	8001d82 <__aeabi_ddiv+0x162>
 8001c46:	4b95      	ldr	r3, [pc, #596]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001c48:	4298      	cmp	r0, r3
 8001c4a:	d039      	beq.n	8001cc0 <__aeabi_ddiv+0xa0>
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	00f6      	lsls	r6, r6, #3
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	431e      	orrs	r6, r3
 8001c54:	4a92      	ldr	r2, [pc, #584]	; (8001ea0 <__aeabi_ddiv+0x280>)
 8001c56:	0f7b      	lsrs	r3, r7, #29
 8001c58:	4333      	orrs	r3, r6
 8001c5a:	4699      	mov	r9, r3
 8001c5c:	4694      	mov	ip, r2
 8001c5e:	0003      	movs	r3, r0
 8001c60:	4463      	add	r3, ip
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	2600      	movs	r6, #0
 8001c68:	00ff      	lsls	r7, r7, #3
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	0323      	lsls	r3, r4, #12
 8001c6e:	0b1b      	lsrs	r3, r3, #12
 8001c70:	4698      	mov	r8, r3
 8001c72:	0063      	lsls	r3, r4, #1
 8001c74:	0fe4      	lsrs	r4, r4, #31
 8001c76:	4652      	mov	r2, sl
 8001c78:	0d5b      	lsrs	r3, r3, #21
 8001c7a:	9401      	str	r4, [sp, #4]
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_ddiv+0x60>
 8001c7e:	e0b3      	b.n	8001de8 <__aeabi_ddiv+0x1c8>
 8001c80:	4986      	ldr	r1, [pc, #536]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001c82:	428b      	cmp	r3, r1
 8001c84:	d100      	bne.n	8001c88 <__aeabi_ddiv+0x68>
 8001c86:	e09e      	b.n	8001dc6 <__aeabi_ddiv+0x1a6>
 8001c88:	4642      	mov	r2, r8
 8001c8a:	00d1      	lsls	r1, r2, #3
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	0412      	lsls	r2, r2, #16
 8001c90:	430a      	orrs	r2, r1
 8001c92:	4651      	mov	r1, sl
 8001c94:	0f49      	lsrs	r1, r1, #29
 8001c96:	4311      	orrs	r1, r2
 8001c98:	468b      	mov	fp, r1
 8001c9a:	4981      	ldr	r1, [pc, #516]	; (8001ea0 <__aeabi_ddiv+0x280>)
 8001c9c:	4652      	mov	r2, sl
 8001c9e:	468c      	mov	ip, r1
 8001ca0:	9900      	ldr	r1, [sp, #0]
 8001ca2:	4463      	add	r3, ip
 8001ca4:	1acb      	subs	r3, r1, r3
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	00d2      	lsls	r2, r2, #3
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	002b      	movs	r3, r5
 8001cae:	4063      	eors	r3, r4
 8001cb0:	469a      	mov	sl, r3
 8001cb2:	2e0f      	cmp	r6, #15
 8001cb4:	d900      	bls.n	8001cb8 <__aeabi_ddiv+0x98>
 8001cb6:	e105      	b.n	8001ec4 <__aeabi_ddiv+0x2a4>
 8001cb8:	4b7a      	ldr	r3, [pc, #488]	; (8001ea4 <__aeabi_ddiv+0x284>)
 8001cba:	00b6      	lsls	r6, r6, #2
 8001cbc:	599b      	ldr	r3, [r3, r6]
 8001cbe:	469f      	mov	pc, r3
 8001cc0:	465b      	mov	r3, fp
 8001cc2:	4333      	orrs	r3, r6
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	d000      	beq.n	8001cca <__aeabi_ddiv+0xaa>
 8001cc8:	e0b8      	b.n	8001e3c <__aeabi_ddiv+0x21c>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	2608      	movs	r6, #8
 8001cce:	2700      	movs	r7, #0
 8001cd0:	9000      	str	r0, [sp, #0]
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	e7ca      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001cd6:	46cb      	mov	fp, r9
 8001cd8:	003a      	movs	r2, r7
 8001cda:	9902      	ldr	r1, [sp, #8]
 8001cdc:	9501      	str	r5, [sp, #4]
 8001cde:	9b01      	ldr	r3, [sp, #4]
 8001ce0:	469a      	mov	sl, r3
 8001ce2:	2902      	cmp	r1, #2
 8001ce4:	d027      	beq.n	8001d36 <__aeabi_ddiv+0x116>
 8001ce6:	2903      	cmp	r1, #3
 8001ce8:	d100      	bne.n	8001cec <__aeabi_ddiv+0xcc>
 8001cea:	e280      	b.n	80021ee <__aeabi_ddiv+0x5ce>
 8001cec:	2901      	cmp	r1, #1
 8001cee:	d044      	beq.n	8001d7a <__aeabi_ddiv+0x15a>
 8001cf0:	496d      	ldr	r1, [pc, #436]	; (8001ea8 <__aeabi_ddiv+0x288>)
 8001cf2:	9b00      	ldr	r3, [sp, #0]
 8001cf4:	468c      	mov	ip, r1
 8001cf6:	4463      	add	r3, ip
 8001cf8:	001c      	movs	r4, r3
 8001cfa:	2c00      	cmp	r4, #0
 8001cfc:	dd38      	ble.n	8001d70 <__aeabi_ddiv+0x150>
 8001cfe:	0753      	lsls	r3, r2, #29
 8001d00:	d000      	beq.n	8001d04 <__aeabi_ddiv+0xe4>
 8001d02:	e213      	b.n	800212c <__aeabi_ddiv+0x50c>
 8001d04:	08d2      	lsrs	r2, r2, #3
 8001d06:	465b      	mov	r3, fp
 8001d08:	01db      	lsls	r3, r3, #7
 8001d0a:	d509      	bpl.n	8001d20 <__aeabi_ddiv+0x100>
 8001d0c:	4659      	mov	r1, fp
 8001d0e:	4b67      	ldr	r3, [pc, #412]	; (8001eac <__aeabi_ddiv+0x28c>)
 8001d10:	4019      	ands	r1, r3
 8001d12:	468b      	mov	fp, r1
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	00c9      	lsls	r1, r1, #3
 8001d18:	468c      	mov	ip, r1
 8001d1a:	9b00      	ldr	r3, [sp, #0]
 8001d1c:	4463      	add	r3, ip
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <__aeabi_ddiv+0x290>)
 8001d22:	429c      	cmp	r4, r3
 8001d24:	dc07      	bgt.n	8001d36 <__aeabi_ddiv+0x116>
 8001d26:	465b      	mov	r3, fp
 8001d28:	0564      	lsls	r4, r4, #21
 8001d2a:	075f      	lsls	r7, r3, #29
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	4317      	orrs	r7, r2
 8001d30:	0b1b      	lsrs	r3, r3, #12
 8001d32:	0d62      	lsrs	r2, r4, #21
 8001d34:	e002      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2700      	movs	r7, #0
 8001d3a:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	031b      	lsls	r3, r3, #12
 8001d40:	0b1c      	lsrs	r4, r3, #12
 8001d42:	0d0b      	lsrs	r3, r1, #20
 8001d44:	051b      	lsls	r3, r3, #20
 8001d46:	4323      	orrs	r3, r4
 8001d48:	0514      	lsls	r4, r2, #20
 8001d4a:	4a5a      	ldr	r2, [pc, #360]	; (8001eb4 <__aeabi_ddiv+0x294>)
 8001d4c:	0038      	movs	r0, r7
 8001d4e:	4013      	ands	r3, r2
 8001d50:	431c      	orrs	r4, r3
 8001d52:	4653      	mov	r3, sl
 8001d54:	0064      	lsls	r4, r4, #1
 8001d56:	07db      	lsls	r3, r3, #31
 8001d58:	0864      	lsrs	r4, r4, #1
 8001d5a:	431c      	orrs	r4, r3
 8001d5c:	0021      	movs	r1, r4
 8001d5e:	b005      	add	sp, #20
 8001d60:	bc3c      	pop	{r2, r3, r4, r5}
 8001d62:	4690      	mov	r8, r2
 8001d64:	4699      	mov	r9, r3
 8001d66:	46a2      	mov	sl, r4
 8001d68:	46ab      	mov	fp, r5
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4252      	negs	r2, r2
 8001d70:	2301      	movs	r3, #1
 8001d72:	1b1b      	subs	r3, r3, r4
 8001d74:	2b38      	cmp	r3, #56	; 0x38
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_ddiv+0x15a>
 8001d78:	e1ad      	b.n	80020d6 <__aeabi_ddiv+0x4b6>
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2700      	movs	r7, #0
 8001d80:	e7dc      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001d82:	465b      	mov	r3, fp
 8001d84:	4333      	orrs	r3, r6
 8001d86:	4699      	mov	r9, r3
 8001d88:	d05e      	beq.n	8001e48 <__aeabi_ddiv+0x228>
 8001d8a:	2e00      	cmp	r6, #0
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x170>
 8001d8e:	e18a      	b.n	80020a6 <__aeabi_ddiv+0x486>
 8001d90:	0030      	movs	r0, r6
 8001d92:	f001 fa9d 	bl	80032d0 <__clzsi2>
 8001d96:	0003      	movs	r3, r0
 8001d98:	3b0b      	subs	r3, #11
 8001d9a:	2b1c      	cmp	r3, #28
 8001d9c:	dd00      	ble.n	8001da0 <__aeabi_ddiv+0x180>
 8001d9e:	e17b      	b.n	8002098 <__aeabi_ddiv+0x478>
 8001da0:	221d      	movs	r2, #29
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	465a      	mov	r2, fp
 8001da6:	0001      	movs	r1, r0
 8001da8:	40da      	lsrs	r2, r3
 8001daa:	3908      	subs	r1, #8
 8001dac:	408e      	lsls	r6, r1
 8001dae:	0013      	movs	r3, r2
 8001db0:	465f      	mov	r7, fp
 8001db2:	4333      	orrs	r3, r6
 8001db4:	4699      	mov	r9, r3
 8001db6:	408f      	lsls	r7, r1
 8001db8:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <__aeabi_ddiv+0x298>)
 8001dba:	2600      	movs	r6, #0
 8001dbc:	1a1b      	subs	r3, r3, r0
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9302      	str	r3, [sp, #8]
 8001dc4:	e752      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001dc6:	4641      	mov	r1, r8
 8001dc8:	4653      	mov	r3, sl
 8001dca:	430b      	orrs	r3, r1
 8001dcc:	493b      	ldr	r1, [pc, #236]	; (8001ebc <__aeabi_ddiv+0x29c>)
 8001dce:	469b      	mov	fp, r3
 8001dd0:	468c      	mov	ip, r1
 8001dd2:	9b00      	ldr	r3, [sp, #0]
 8001dd4:	4463      	add	r3, ip
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	465b      	mov	r3, fp
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d13b      	bne.n	8001e56 <__aeabi_ddiv+0x236>
 8001dde:	2302      	movs	r3, #2
 8001de0:	2200      	movs	r2, #0
 8001de2:	431e      	orrs	r6, r3
 8001de4:	2102      	movs	r1, #2
 8001de6:	e761      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001de8:	4643      	mov	r3, r8
 8001dea:	4313      	orrs	r3, r2
 8001dec:	469b      	mov	fp, r3
 8001dee:	d037      	beq.n	8001e60 <__aeabi_ddiv+0x240>
 8001df0:	4643      	mov	r3, r8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d100      	bne.n	8001df8 <__aeabi_ddiv+0x1d8>
 8001df6:	e162      	b.n	80020be <__aeabi_ddiv+0x49e>
 8001df8:	4640      	mov	r0, r8
 8001dfa:	f001 fa69 	bl	80032d0 <__clzsi2>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	3b0b      	subs	r3, #11
 8001e02:	2b1c      	cmp	r3, #28
 8001e04:	dd00      	ble.n	8001e08 <__aeabi_ddiv+0x1e8>
 8001e06:	e153      	b.n	80020b0 <__aeabi_ddiv+0x490>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	4641      	mov	r1, r8
 8001e0c:	3a08      	subs	r2, #8
 8001e0e:	4091      	lsls	r1, r2
 8001e10:	4688      	mov	r8, r1
 8001e12:	211d      	movs	r1, #29
 8001e14:	1acb      	subs	r3, r1, r3
 8001e16:	4651      	mov	r1, sl
 8001e18:	40d9      	lsrs	r1, r3
 8001e1a:	000b      	movs	r3, r1
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	469b      	mov	fp, r3
 8001e22:	4653      	mov	r3, sl
 8001e24:	4093      	lsls	r3, r2
 8001e26:	001a      	movs	r2, r3
 8001e28:	9b00      	ldr	r3, [sp, #0]
 8001e2a:	4925      	ldr	r1, [pc, #148]	; (8001ec0 <__aeabi_ddiv+0x2a0>)
 8001e2c:	469c      	mov	ip, r3
 8001e2e:	4460      	add	r0, ip
 8001e30:	0003      	movs	r3, r0
 8001e32:	468c      	mov	ip, r1
 8001e34:	4463      	add	r3, ip
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2100      	movs	r1, #0
 8001e3a:	e737      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	46b1      	mov	r9, r6
 8001e40:	9000      	str	r0, [sp, #0]
 8001e42:	260c      	movs	r6, #12
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	e711      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	2604      	movs	r6, #4
 8001e50:	2700      	movs	r7, #0
 8001e52:	9302      	str	r3, [sp, #8]
 8001e54:	e70a      	b.n	8001c6c <__aeabi_ddiv+0x4c>
 8001e56:	2303      	movs	r3, #3
 8001e58:	46c3      	mov	fp, r8
 8001e5a:	431e      	orrs	r6, r3
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	e725      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e60:	3301      	adds	r3, #1
 8001e62:	431e      	orrs	r6, r3
 8001e64:	2200      	movs	r2, #0
 8001e66:	2101      	movs	r1, #1
 8001e68:	e720      	b.n	8001cac <__aeabi_ddiv+0x8c>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	469a      	mov	sl, r3
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	2700      	movs	r7, #0
 8001e72:	031b      	lsls	r3, r3, #12
 8001e74:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001e76:	e761      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	031b      	lsls	r3, r3, #12
 8001e7e:	4219      	tst	r1, r3
 8001e80:	d100      	bne.n	8001e84 <__aeabi_ddiv+0x264>
 8001e82:	e0e2      	b.n	800204a <__aeabi_ddiv+0x42a>
 8001e84:	4659      	mov	r1, fp
 8001e86:	4219      	tst	r1, r3
 8001e88:	d000      	beq.n	8001e8c <__aeabi_ddiv+0x26c>
 8001e8a:	e0de      	b.n	800204a <__aeabi_ddiv+0x42a>
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	031b      	lsls	r3, r3, #12
 8001e90:	0017      	movs	r7, r2
 8001e92:	0b1b      	lsrs	r3, r3, #12
 8001e94:	46a2      	mov	sl, r4
 8001e96:	4a01      	ldr	r2, [pc, #4]	; (8001e9c <__aeabi_ddiv+0x27c>)
 8001e98:	e750      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	000007ff 	.word	0x000007ff
 8001ea0:	fffffc01 	.word	0xfffffc01
 8001ea4:	08019b6c 	.word	0x08019b6c
 8001ea8:	000003ff 	.word	0x000003ff
 8001eac:	feffffff 	.word	0xfeffffff
 8001eb0:	000007fe 	.word	0x000007fe
 8001eb4:	800fffff 	.word	0x800fffff
 8001eb8:	fffffc0d 	.word	0xfffffc0d
 8001ebc:	fffff801 	.word	0xfffff801
 8001ec0:	000003f3 	.word	0x000003f3
 8001ec4:	45d9      	cmp	r9, fp
 8001ec6:	d900      	bls.n	8001eca <__aeabi_ddiv+0x2aa>
 8001ec8:	e0cb      	b.n	8002062 <__aeabi_ddiv+0x442>
 8001eca:	d100      	bne.n	8001ece <__aeabi_ddiv+0x2ae>
 8001ecc:	e0c6      	b.n	800205c <__aeabi_ddiv+0x43c>
 8001ece:	003c      	movs	r4, r7
 8001ed0:	4648      	mov	r0, r9
 8001ed2:	2700      	movs	r7, #0
 8001ed4:	9b00      	ldr	r3, [sp, #0]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	465b      	mov	r3, fp
 8001edc:	0e16      	lsrs	r6, r2, #24
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	431e      	orrs	r6, r3
 8001ee2:	0213      	lsls	r3, r2, #8
 8001ee4:	4698      	mov	r8, r3
 8001ee6:	0433      	lsls	r3, r6, #16
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	4699      	mov	r9, r3
 8001eec:	0c31      	lsrs	r1, r6, #16
 8001eee:	9101      	str	r1, [sp, #4]
 8001ef0:	f7fe f9b4 	bl	800025c <__aeabi_uidivmod>
 8001ef4:	464a      	mov	r2, r9
 8001ef6:	4342      	muls	r2, r0
 8001ef8:	040b      	lsls	r3, r1, #16
 8001efa:	0c21      	lsrs	r1, r4, #16
 8001efc:	0005      	movs	r5, r0
 8001efe:	4319      	orrs	r1, r3
 8001f00:	428a      	cmp	r2, r1
 8001f02:	d907      	bls.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f04:	1989      	adds	r1, r1, r6
 8001f06:	3d01      	subs	r5, #1
 8001f08:	428e      	cmp	r6, r1
 8001f0a:	d803      	bhi.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f0c:	428a      	cmp	r2, r1
 8001f0e:	d901      	bls.n	8001f14 <__aeabi_ddiv+0x2f4>
 8001f10:	1e85      	subs	r5, r0, #2
 8001f12:	1989      	adds	r1, r1, r6
 8001f14:	1a88      	subs	r0, r1, r2
 8001f16:	9901      	ldr	r1, [sp, #4]
 8001f18:	f7fe f9a0 	bl	800025c <__aeabi_uidivmod>
 8001f1c:	0409      	lsls	r1, r1, #16
 8001f1e:	468c      	mov	ip, r1
 8001f20:	464a      	mov	r2, r9
 8001f22:	0421      	lsls	r1, r4, #16
 8001f24:	4664      	mov	r4, ip
 8001f26:	4342      	muls	r2, r0
 8001f28:	0c09      	lsrs	r1, r1, #16
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	4321      	orrs	r1, r4
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	d904      	bls.n	8001f3c <__aeabi_ddiv+0x31c>
 8001f32:	1989      	adds	r1, r1, r6
 8001f34:	3b01      	subs	r3, #1
 8001f36:	428e      	cmp	r6, r1
 8001f38:	d800      	bhi.n	8001f3c <__aeabi_ddiv+0x31c>
 8001f3a:	e0f1      	b.n	8002120 <__aeabi_ddiv+0x500>
 8001f3c:	042d      	lsls	r5, r5, #16
 8001f3e:	431d      	orrs	r5, r3
 8001f40:	46ab      	mov	fp, r5
 8001f42:	4643      	mov	r3, r8
 8001f44:	1a89      	subs	r1, r1, r2
 8001f46:	4642      	mov	r2, r8
 8001f48:	0c28      	lsrs	r0, r5, #16
 8001f4a:	0412      	lsls	r2, r2, #16
 8001f4c:	0c1d      	lsrs	r5, r3, #16
 8001f4e:	465b      	mov	r3, fp
 8001f50:	0c14      	lsrs	r4, r2, #16
 8001f52:	0022      	movs	r2, r4
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	435a      	muls	r2, r3
 8001f5a:	9403      	str	r4, [sp, #12]
 8001f5c:	436b      	muls	r3, r5
 8001f5e:	4344      	muls	r4, r0
 8001f60:	9502      	str	r5, [sp, #8]
 8001f62:	4368      	muls	r0, r5
 8001f64:	191b      	adds	r3, r3, r4
 8001f66:	0c15      	lsrs	r5, r2, #16
 8001f68:	18eb      	adds	r3, r5, r3
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	d903      	bls.n	8001f76 <__aeabi_ddiv+0x356>
 8001f6e:	2480      	movs	r4, #128	; 0x80
 8001f70:	0264      	lsls	r4, r4, #9
 8001f72:	46a4      	mov	ip, r4
 8001f74:	4460      	add	r0, ip
 8001f76:	0c1c      	lsrs	r4, r3, #16
 8001f78:	0415      	lsls	r5, r2, #16
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	0c2d      	lsrs	r5, r5, #16
 8001f7e:	1820      	adds	r0, r4, r0
 8001f80:	195d      	adds	r5, r3, r5
 8001f82:	4281      	cmp	r1, r0
 8001f84:	d377      	bcc.n	8002076 <__aeabi_ddiv+0x456>
 8001f86:	d073      	beq.n	8002070 <__aeabi_ddiv+0x450>
 8001f88:	1a0c      	subs	r4, r1, r0
 8001f8a:	4aa2      	ldr	r2, [pc, #648]	; (8002214 <__aeabi_ddiv+0x5f4>)
 8001f8c:	1b7d      	subs	r5, r7, r5
 8001f8e:	42af      	cmp	r7, r5
 8001f90:	41bf      	sbcs	r7, r7
 8001f92:	4694      	mov	ip, r2
 8001f94:	9b00      	ldr	r3, [sp, #0]
 8001f96:	427f      	negs	r7, r7
 8001f98:	4463      	add	r3, ip
 8001f9a:	1be0      	subs	r0, r4, r7
 8001f9c:	001c      	movs	r4, r3
 8001f9e:	4286      	cmp	r6, r0
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_ddiv+0x384>
 8001fa2:	e0db      	b.n	800215c <__aeabi_ddiv+0x53c>
 8001fa4:	9901      	ldr	r1, [sp, #4]
 8001fa6:	f7fe f959 	bl	800025c <__aeabi_uidivmod>
 8001faa:	464a      	mov	r2, r9
 8001fac:	4342      	muls	r2, r0
 8001fae:	040b      	lsls	r3, r1, #16
 8001fb0:	0c29      	lsrs	r1, r5, #16
 8001fb2:	0007      	movs	r7, r0
 8001fb4:	4319      	orrs	r1, r3
 8001fb6:	428a      	cmp	r2, r1
 8001fb8:	d907      	bls.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fba:	1989      	adds	r1, r1, r6
 8001fbc:	3f01      	subs	r7, #1
 8001fbe:	428e      	cmp	r6, r1
 8001fc0:	d803      	bhi.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d901      	bls.n	8001fca <__aeabi_ddiv+0x3aa>
 8001fc6:	1e87      	subs	r7, r0, #2
 8001fc8:	1989      	adds	r1, r1, r6
 8001fca:	1a88      	subs	r0, r1, r2
 8001fcc:	9901      	ldr	r1, [sp, #4]
 8001fce:	f7fe f945 	bl	800025c <__aeabi_uidivmod>
 8001fd2:	0409      	lsls	r1, r1, #16
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	4689      	mov	r9, r1
 8001fd8:	0429      	lsls	r1, r5, #16
 8001fda:	464d      	mov	r5, r9
 8001fdc:	4342      	muls	r2, r0
 8001fde:	0c09      	lsrs	r1, r1, #16
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	4329      	orrs	r1, r5
 8001fe4:	428a      	cmp	r2, r1
 8001fe6:	d907      	bls.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001fe8:	1989      	adds	r1, r1, r6
 8001fea:	3b01      	subs	r3, #1
 8001fec:	428e      	cmp	r6, r1
 8001fee:	d803      	bhi.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001ff0:	428a      	cmp	r2, r1
 8001ff2:	d901      	bls.n	8001ff8 <__aeabi_ddiv+0x3d8>
 8001ff4:	1e83      	subs	r3, r0, #2
 8001ff6:	1989      	adds	r1, r1, r6
 8001ff8:	043f      	lsls	r7, r7, #16
 8001ffa:	1a89      	subs	r1, r1, r2
 8001ffc:	003a      	movs	r2, r7
 8001ffe:	9f03      	ldr	r7, [sp, #12]
 8002000:	431a      	orrs	r2, r3
 8002002:	0038      	movs	r0, r7
 8002004:	0413      	lsls	r3, r2, #16
 8002006:	0c1b      	lsrs	r3, r3, #16
 8002008:	4358      	muls	r0, r3
 800200a:	4681      	mov	r9, r0
 800200c:	9802      	ldr	r0, [sp, #8]
 800200e:	0c15      	lsrs	r5, r2, #16
 8002010:	436f      	muls	r7, r5
 8002012:	4343      	muls	r3, r0
 8002014:	4345      	muls	r5, r0
 8002016:	4648      	mov	r0, r9
 8002018:	0c00      	lsrs	r0, r0, #16
 800201a:	4684      	mov	ip, r0
 800201c:	19db      	adds	r3, r3, r7
 800201e:	4463      	add	r3, ip
 8002020:	429f      	cmp	r7, r3
 8002022:	d903      	bls.n	800202c <__aeabi_ddiv+0x40c>
 8002024:	2080      	movs	r0, #128	; 0x80
 8002026:	0240      	lsls	r0, r0, #9
 8002028:	4684      	mov	ip, r0
 800202a:	4465      	add	r5, ip
 800202c:	4648      	mov	r0, r9
 800202e:	0c1f      	lsrs	r7, r3, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	041b      	lsls	r3, r3, #16
 8002034:	0c00      	lsrs	r0, r0, #16
 8002036:	197d      	adds	r5, r7, r5
 8002038:	1818      	adds	r0, r3, r0
 800203a:	42a9      	cmp	r1, r5
 800203c:	d200      	bcs.n	8002040 <__aeabi_ddiv+0x420>
 800203e:	e084      	b.n	800214a <__aeabi_ddiv+0x52a>
 8002040:	d100      	bne.n	8002044 <__aeabi_ddiv+0x424>
 8002042:	e07f      	b.n	8002144 <__aeabi_ddiv+0x524>
 8002044:	2301      	movs	r3, #1
 8002046:	431a      	orrs	r2, r3
 8002048:	e657      	b.n	8001cfa <__aeabi_ddiv+0xda>
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	464a      	mov	r2, r9
 800204e:	031b      	lsls	r3, r3, #12
 8002050:	4313      	orrs	r3, r2
 8002052:	031b      	lsls	r3, r3, #12
 8002054:	0b1b      	lsrs	r3, r3, #12
 8002056:	46aa      	mov	sl, r5
 8002058:	4a6f      	ldr	r2, [pc, #444]	; (8002218 <__aeabi_ddiv+0x5f8>)
 800205a:	e66f      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 800205c:	42ba      	cmp	r2, r7
 800205e:	d900      	bls.n	8002062 <__aeabi_ddiv+0x442>
 8002060:	e735      	b.n	8001ece <__aeabi_ddiv+0x2ae>
 8002062:	464b      	mov	r3, r9
 8002064:	07dc      	lsls	r4, r3, #31
 8002066:	0858      	lsrs	r0, r3, #1
 8002068:	087b      	lsrs	r3, r7, #1
 800206a:	431c      	orrs	r4, r3
 800206c:	07ff      	lsls	r7, r7, #31
 800206e:	e734      	b.n	8001eda <__aeabi_ddiv+0x2ba>
 8002070:	2400      	movs	r4, #0
 8002072:	42af      	cmp	r7, r5
 8002074:	d289      	bcs.n	8001f8a <__aeabi_ddiv+0x36a>
 8002076:	4447      	add	r7, r8
 8002078:	4547      	cmp	r7, r8
 800207a:	41a4      	sbcs	r4, r4
 800207c:	465b      	mov	r3, fp
 800207e:	4264      	negs	r4, r4
 8002080:	19a4      	adds	r4, r4, r6
 8002082:	1864      	adds	r4, r4, r1
 8002084:	3b01      	subs	r3, #1
 8002086:	42a6      	cmp	r6, r4
 8002088:	d21e      	bcs.n	80020c8 <__aeabi_ddiv+0x4a8>
 800208a:	42a0      	cmp	r0, r4
 800208c:	d86d      	bhi.n	800216a <__aeabi_ddiv+0x54a>
 800208e:	d100      	bne.n	8002092 <__aeabi_ddiv+0x472>
 8002090:	e0b6      	b.n	8002200 <__aeabi_ddiv+0x5e0>
 8002092:	1a24      	subs	r4, r4, r0
 8002094:	469b      	mov	fp, r3
 8002096:	e778      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 8002098:	0003      	movs	r3, r0
 800209a:	465a      	mov	r2, fp
 800209c:	3b28      	subs	r3, #40	; 0x28
 800209e:	409a      	lsls	r2, r3
 80020a0:	2700      	movs	r7, #0
 80020a2:	4691      	mov	r9, r2
 80020a4:	e688      	b.n	8001db8 <__aeabi_ddiv+0x198>
 80020a6:	4658      	mov	r0, fp
 80020a8:	f001 f912 	bl	80032d0 <__clzsi2>
 80020ac:	3020      	adds	r0, #32
 80020ae:	e672      	b.n	8001d96 <__aeabi_ddiv+0x176>
 80020b0:	0003      	movs	r3, r0
 80020b2:	4652      	mov	r2, sl
 80020b4:	3b28      	subs	r3, #40	; 0x28
 80020b6:	409a      	lsls	r2, r3
 80020b8:	4693      	mov	fp, r2
 80020ba:	2200      	movs	r2, #0
 80020bc:	e6b4      	b.n	8001e28 <__aeabi_ddiv+0x208>
 80020be:	4650      	mov	r0, sl
 80020c0:	f001 f906 	bl	80032d0 <__clzsi2>
 80020c4:	3020      	adds	r0, #32
 80020c6:	e69a      	b.n	8001dfe <__aeabi_ddiv+0x1de>
 80020c8:	42a6      	cmp	r6, r4
 80020ca:	d1e2      	bne.n	8002092 <__aeabi_ddiv+0x472>
 80020cc:	45b8      	cmp	r8, r7
 80020ce:	d9dc      	bls.n	800208a <__aeabi_ddiv+0x46a>
 80020d0:	1a34      	subs	r4, r6, r0
 80020d2:	469b      	mov	fp, r3
 80020d4:	e759      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 80020d6:	2b1f      	cmp	r3, #31
 80020d8:	dc65      	bgt.n	80021a6 <__aeabi_ddiv+0x586>
 80020da:	4c50      	ldr	r4, [pc, #320]	; (800221c <__aeabi_ddiv+0x5fc>)
 80020dc:	9900      	ldr	r1, [sp, #0]
 80020de:	46a4      	mov	ip, r4
 80020e0:	465c      	mov	r4, fp
 80020e2:	4461      	add	r1, ip
 80020e4:	0008      	movs	r0, r1
 80020e6:	408c      	lsls	r4, r1
 80020e8:	0011      	movs	r1, r2
 80020ea:	4082      	lsls	r2, r0
 80020ec:	40d9      	lsrs	r1, r3
 80020ee:	1e50      	subs	r0, r2, #1
 80020f0:	4182      	sbcs	r2, r0
 80020f2:	430c      	orrs	r4, r1
 80020f4:	4314      	orrs	r4, r2
 80020f6:	465a      	mov	r2, fp
 80020f8:	40da      	lsrs	r2, r3
 80020fa:	0013      	movs	r3, r2
 80020fc:	0762      	lsls	r2, r4, #29
 80020fe:	d009      	beq.n	8002114 <__aeabi_ddiv+0x4f4>
 8002100:	220f      	movs	r2, #15
 8002102:	4022      	ands	r2, r4
 8002104:	2a04      	cmp	r2, #4
 8002106:	d005      	beq.n	8002114 <__aeabi_ddiv+0x4f4>
 8002108:	0022      	movs	r2, r4
 800210a:	1d14      	adds	r4, r2, #4
 800210c:	4294      	cmp	r4, r2
 800210e:	4189      	sbcs	r1, r1
 8002110:	4249      	negs	r1, r1
 8002112:	185b      	adds	r3, r3, r1
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	d562      	bpl.n	80021de <__aeabi_ddiv+0x5be>
 8002118:	2201      	movs	r2, #1
 800211a:	2300      	movs	r3, #0
 800211c:	2700      	movs	r7, #0
 800211e:	e60d      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8002120:	428a      	cmp	r2, r1
 8002122:	d800      	bhi.n	8002126 <__aeabi_ddiv+0x506>
 8002124:	e70a      	b.n	8001f3c <__aeabi_ddiv+0x31c>
 8002126:	1e83      	subs	r3, r0, #2
 8002128:	1989      	adds	r1, r1, r6
 800212a:	e707      	b.n	8001f3c <__aeabi_ddiv+0x31c>
 800212c:	230f      	movs	r3, #15
 800212e:	4013      	ands	r3, r2
 8002130:	2b04      	cmp	r3, #4
 8002132:	d100      	bne.n	8002136 <__aeabi_ddiv+0x516>
 8002134:	e5e6      	b.n	8001d04 <__aeabi_ddiv+0xe4>
 8002136:	1d17      	adds	r7, r2, #4
 8002138:	4297      	cmp	r7, r2
 800213a:	4192      	sbcs	r2, r2
 800213c:	4253      	negs	r3, r2
 800213e:	449b      	add	fp, r3
 8002140:	08fa      	lsrs	r2, r7, #3
 8002142:	e5e0      	b.n	8001d06 <__aeabi_ddiv+0xe6>
 8002144:	2800      	cmp	r0, #0
 8002146:	d100      	bne.n	800214a <__aeabi_ddiv+0x52a>
 8002148:	e5d7      	b.n	8001cfa <__aeabi_ddiv+0xda>
 800214a:	1871      	adds	r1, r6, r1
 800214c:	1e53      	subs	r3, r2, #1
 800214e:	42b1      	cmp	r1, r6
 8002150:	d327      	bcc.n	80021a2 <__aeabi_ddiv+0x582>
 8002152:	42a9      	cmp	r1, r5
 8002154:	d315      	bcc.n	8002182 <__aeabi_ddiv+0x562>
 8002156:	d058      	beq.n	800220a <__aeabi_ddiv+0x5ea>
 8002158:	001a      	movs	r2, r3
 800215a:	e773      	b.n	8002044 <__aeabi_ddiv+0x424>
 800215c:	2b00      	cmp	r3, #0
 800215e:	dc00      	bgt.n	8002162 <__aeabi_ddiv+0x542>
 8002160:	e604      	b.n	8001d6c <__aeabi_ddiv+0x14c>
 8002162:	2301      	movs	r3, #1
 8002164:	2200      	movs	r2, #0
 8002166:	449b      	add	fp, r3
 8002168:	e5cd      	b.n	8001d06 <__aeabi_ddiv+0xe6>
 800216a:	2302      	movs	r3, #2
 800216c:	4447      	add	r7, r8
 800216e:	4547      	cmp	r7, r8
 8002170:	4189      	sbcs	r1, r1
 8002172:	425b      	negs	r3, r3
 8002174:	469c      	mov	ip, r3
 8002176:	4249      	negs	r1, r1
 8002178:	1989      	adds	r1, r1, r6
 800217a:	190c      	adds	r4, r1, r4
 800217c:	44e3      	add	fp, ip
 800217e:	1a24      	subs	r4, r4, r0
 8002180:	e703      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 8002182:	4643      	mov	r3, r8
 8002184:	005f      	lsls	r7, r3, #1
 8002186:	4547      	cmp	r7, r8
 8002188:	419b      	sbcs	r3, r3
 800218a:	46b8      	mov	r8, r7
 800218c:	425b      	negs	r3, r3
 800218e:	199e      	adds	r6, r3, r6
 8002190:	3a02      	subs	r2, #2
 8002192:	1989      	adds	r1, r1, r6
 8002194:	42a9      	cmp	r1, r5
 8002196:	d000      	beq.n	800219a <__aeabi_ddiv+0x57a>
 8002198:	e754      	b.n	8002044 <__aeabi_ddiv+0x424>
 800219a:	4540      	cmp	r0, r8
 800219c:	d000      	beq.n	80021a0 <__aeabi_ddiv+0x580>
 800219e:	e751      	b.n	8002044 <__aeabi_ddiv+0x424>
 80021a0:	e5ab      	b.n	8001cfa <__aeabi_ddiv+0xda>
 80021a2:	001a      	movs	r2, r3
 80021a4:	e7f6      	b.n	8002194 <__aeabi_ddiv+0x574>
 80021a6:	211f      	movs	r1, #31
 80021a8:	465f      	mov	r7, fp
 80021aa:	4249      	negs	r1, r1
 80021ac:	1b0c      	subs	r4, r1, r4
 80021ae:	40e7      	lsrs	r7, r4
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d007      	beq.n	80021c4 <__aeabi_ddiv+0x5a4>
 80021b4:	491a      	ldr	r1, [pc, #104]	; (8002220 <__aeabi_ddiv+0x600>)
 80021b6:	9b00      	ldr	r3, [sp, #0]
 80021b8:	468c      	mov	ip, r1
 80021ba:	4463      	add	r3, ip
 80021bc:	0018      	movs	r0, r3
 80021be:	465b      	mov	r3, fp
 80021c0:	4083      	lsls	r3, r0
 80021c2:	431a      	orrs	r2, r3
 80021c4:	1e50      	subs	r0, r2, #1
 80021c6:	4182      	sbcs	r2, r0
 80021c8:	433a      	orrs	r2, r7
 80021ca:	2707      	movs	r7, #7
 80021cc:	2300      	movs	r3, #0
 80021ce:	4017      	ands	r7, r2
 80021d0:	d009      	beq.n	80021e6 <__aeabi_ddiv+0x5c6>
 80021d2:	210f      	movs	r1, #15
 80021d4:	2300      	movs	r3, #0
 80021d6:	4011      	ands	r1, r2
 80021d8:	0014      	movs	r4, r2
 80021da:	2904      	cmp	r1, #4
 80021dc:	d195      	bne.n	800210a <__aeabi_ddiv+0x4ea>
 80021de:	0022      	movs	r2, r4
 80021e0:	075f      	lsls	r7, r3, #29
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	0b1b      	lsrs	r3, r3, #12
 80021e6:	08d2      	lsrs	r2, r2, #3
 80021e8:	4317      	orrs	r7, r2
 80021ea:	2200      	movs	r2, #0
 80021ec:	e5a6      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	4659      	mov	r1, fp
 80021f2:	031b      	lsls	r3, r3, #12
 80021f4:	430b      	orrs	r3, r1
 80021f6:	031b      	lsls	r3, r3, #12
 80021f8:	0017      	movs	r7, r2
 80021fa:	0b1b      	lsrs	r3, r3, #12
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <__aeabi_ddiv+0x5f8>)
 80021fe:	e59d      	b.n	8001d3c <__aeabi_ddiv+0x11c>
 8002200:	42bd      	cmp	r5, r7
 8002202:	d8b2      	bhi.n	800216a <__aeabi_ddiv+0x54a>
 8002204:	469b      	mov	fp, r3
 8002206:	2400      	movs	r4, #0
 8002208:	e6bf      	b.n	8001f8a <__aeabi_ddiv+0x36a>
 800220a:	4580      	cmp	r8, r0
 800220c:	d3b9      	bcc.n	8002182 <__aeabi_ddiv+0x562>
 800220e:	001a      	movs	r2, r3
 8002210:	e7c3      	b.n	800219a <__aeabi_ddiv+0x57a>
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	000003ff 	.word	0x000003ff
 8002218:	000007ff 	.word	0x000007ff
 800221c:	0000041e 	.word	0x0000041e
 8002220:	0000043e 	.word	0x0000043e

08002224 <__eqdf2>:
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002226:	464f      	mov	r7, r9
 8002228:	4646      	mov	r6, r8
 800222a:	46d6      	mov	lr, sl
 800222c:	4684      	mov	ip, r0
 800222e:	b5c0      	push	{r6, r7, lr}
 8002230:	4680      	mov	r8, r0
 8002232:	4e19      	ldr	r6, [pc, #100]	; (8002298 <__eqdf2+0x74>)
 8002234:	0318      	lsls	r0, r3, #12
 8002236:	030f      	lsls	r7, r1, #12
 8002238:	004d      	lsls	r5, r1, #1
 800223a:	0b00      	lsrs	r0, r0, #12
 800223c:	005c      	lsls	r4, r3, #1
 800223e:	4682      	mov	sl, r0
 8002240:	0b3f      	lsrs	r7, r7, #12
 8002242:	0d6d      	lsrs	r5, r5, #21
 8002244:	0fc9      	lsrs	r1, r1, #31
 8002246:	4691      	mov	r9, r2
 8002248:	0d64      	lsrs	r4, r4, #21
 800224a:	0fdb      	lsrs	r3, r3, #31
 800224c:	2001      	movs	r0, #1
 800224e:	42b5      	cmp	r5, r6
 8002250:	d00a      	beq.n	8002268 <__eqdf2+0x44>
 8002252:	42b4      	cmp	r4, r6
 8002254:	d003      	beq.n	800225e <__eqdf2+0x3a>
 8002256:	42a5      	cmp	r5, r4
 8002258:	d101      	bne.n	800225e <__eqdf2+0x3a>
 800225a:	4557      	cmp	r7, sl
 800225c:	d00c      	beq.n	8002278 <__eqdf2+0x54>
 800225e:	bc1c      	pop	{r2, r3, r4}
 8002260:	4690      	mov	r8, r2
 8002262:	4699      	mov	r9, r3
 8002264:	46a2      	mov	sl, r4
 8002266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002268:	4666      	mov	r6, ip
 800226a:	433e      	orrs	r6, r7
 800226c:	d1f7      	bne.n	800225e <__eqdf2+0x3a>
 800226e:	42ac      	cmp	r4, r5
 8002270:	d1f5      	bne.n	800225e <__eqdf2+0x3a>
 8002272:	4654      	mov	r4, sl
 8002274:	4314      	orrs	r4, r2
 8002276:	d1f2      	bne.n	800225e <__eqdf2+0x3a>
 8002278:	2001      	movs	r0, #1
 800227a:	45c8      	cmp	r8, r9
 800227c:	d1ef      	bne.n	800225e <__eqdf2+0x3a>
 800227e:	4299      	cmp	r1, r3
 8002280:	d007      	beq.n	8002292 <__eqdf2+0x6e>
 8002282:	2d00      	cmp	r5, #0
 8002284:	d1eb      	bne.n	800225e <__eqdf2+0x3a>
 8002286:	4663      	mov	r3, ip
 8002288:	431f      	orrs	r7, r3
 800228a:	0038      	movs	r0, r7
 800228c:	1e47      	subs	r7, r0, #1
 800228e:	41b8      	sbcs	r0, r7
 8002290:	e7e5      	b.n	800225e <__eqdf2+0x3a>
 8002292:	2000      	movs	r0, #0
 8002294:	e7e3      	b.n	800225e <__eqdf2+0x3a>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	000007ff 	.word	0x000007ff

0800229c <__gedf2>:
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	464f      	mov	r7, r9
 80022a0:	4646      	mov	r6, r8
 80022a2:	46d6      	mov	lr, sl
 80022a4:	004d      	lsls	r5, r1, #1
 80022a6:	b5c0      	push	{r6, r7, lr}
 80022a8:	030e      	lsls	r6, r1, #12
 80022aa:	0fc9      	lsrs	r1, r1, #31
 80022ac:	468a      	mov	sl, r1
 80022ae:	492c      	ldr	r1, [pc, #176]	; (8002360 <__gedf2+0xc4>)
 80022b0:	031f      	lsls	r7, r3, #12
 80022b2:	005c      	lsls	r4, r3, #1
 80022b4:	4680      	mov	r8, r0
 80022b6:	0b36      	lsrs	r6, r6, #12
 80022b8:	0d6d      	lsrs	r5, r5, #21
 80022ba:	4691      	mov	r9, r2
 80022bc:	0b3f      	lsrs	r7, r7, #12
 80022be:	0d64      	lsrs	r4, r4, #21
 80022c0:	0fdb      	lsrs	r3, r3, #31
 80022c2:	428d      	cmp	r5, r1
 80022c4:	d01e      	beq.n	8002304 <__gedf2+0x68>
 80022c6:	428c      	cmp	r4, r1
 80022c8:	d016      	beq.n	80022f8 <__gedf2+0x5c>
 80022ca:	2d00      	cmp	r5, #0
 80022cc:	d11e      	bne.n	800230c <__gedf2+0x70>
 80022ce:	4330      	orrs	r0, r6
 80022d0:	4684      	mov	ip, r0
 80022d2:	2c00      	cmp	r4, #0
 80022d4:	d101      	bne.n	80022da <__gedf2+0x3e>
 80022d6:	433a      	orrs	r2, r7
 80022d8:	d023      	beq.n	8002322 <__gedf2+0x86>
 80022da:	4662      	mov	r2, ip
 80022dc:	2a00      	cmp	r2, #0
 80022de:	d01a      	beq.n	8002316 <__gedf2+0x7a>
 80022e0:	459a      	cmp	sl, r3
 80022e2:	d029      	beq.n	8002338 <__gedf2+0x9c>
 80022e4:	4651      	mov	r1, sl
 80022e6:	2002      	movs	r0, #2
 80022e8:	3901      	subs	r1, #1
 80022ea:	4008      	ands	r0, r1
 80022ec:	3801      	subs	r0, #1
 80022ee:	bc1c      	pop	{r2, r3, r4}
 80022f0:	4690      	mov	r8, r2
 80022f2:	4699      	mov	r9, r3
 80022f4:	46a2      	mov	sl, r4
 80022f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f8:	0039      	movs	r1, r7
 80022fa:	4311      	orrs	r1, r2
 80022fc:	d0e5      	beq.n	80022ca <__gedf2+0x2e>
 80022fe:	2002      	movs	r0, #2
 8002300:	4240      	negs	r0, r0
 8002302:	e7f4      	b.n	80022ee <__gedf2+0x52>
 8002304:	4330      	orrs	r0, r6
 8002306:	d1fa      	bne.n	80022fe <__gedf2+0x62>
 8002308:	42ac      	cmp	r4, r5
 800230a:	d00f      	beq.n	800232c <__gedf2+0x90>
 800230c:	2c00      	cmp	r4, #0
 800230e:	d10f      	bne.n	8002330 <__gedf2+0x94>
 8002310:	433a      	orrs	r2, r7
 8002312:	d0e7      	beq.n	80022e4 <__gedf2+0x48>
 8002314:	e00c      	b.n	8002330 <__gedf2+0x94>
 8002316:	2201      	movs	r2, #1
 8002318:	3b01      	subs	r3, #1
 800231a:	4393      	bics	r3, r2
 800231c:	0018      	movs	r0, r3
 800231e:	3001      	adds	r0, #1
 8002320:	e7e5      	b.n	80022ee <__gedf2+0x52>
 8002322:	4663      	mov	r3, ip
 8002324:	2000      	movs	r0, #0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0e1      	beq.n	80022ee <__gedf2+0x52>
 800232a:	e7db      	b.n	80022e4 <__gedf2+0x48>
 800232c:	433a      	orrs	r2, r7
 800232e:	d1e6      	bne.n	80022fe <__gedf2+0x62>
 8002330:	459a      	cmp	sl, r3
 8002332:	d1d7      	bne.n	80022e4 <__gedf2+0x48>
 8002334:	42a5      	cmp	r5, r4
 8002336:	dcd5      	bgt.n	80022e4 <__gedf2+0x48>
 8002338:	42a5      	cmp	r5, r4
 800233a:	db05      	blt.n	8002348 <__gedf2+0xac>
 800233c:	42be      	cmp	r6, r7
 800233e:	d8d1      	bhi.n	80022e4 <__gedf2+0x48>
 8002340:	d008      	beq.n	8002354 <__gedf2+0xb8>
 8002342:	2000      	movs	r0, #0
 8002344:	42be      	cmp	r6, r7
 8002346:	d2d2      	bcs.n	80022ee <__gedf2+0x52>
 8002348:	4650      	mov	r0, sl
 800234a:	2301      	movs	r3, #1
 800234c:	3801      	subs	r0, #1
 800234e:	4398      	bics	r0, r3
 8002350:	3001      	adds	r0, #1
 8002352:	e7cc      	b.n	80022ee <__gedf2+0x52>
 8002354:	45c8      	cmp	r8, r9
 8002356:	d8c5      	bhi.n	80022e4 <__gedf2+0x48>
 8002358:	2000      	movs	r0, #0
 800235a:	45c8      	cmp	r8, r9
 800235c:	d3f4      	bcc.n	8002348 <__gedf2+0xac>
 800235e:	e7c6      	b.n	80022ee <__gedf2+0x52>
 8002360:	000007ff 	.word	0x000007ff

08002364 <__ledf2>:
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	464f      	mov	r7, r9
 8002368:	4646      	mov	r6, r8
 800236a:	46d6      	mov	lr, sl
 800236c:	004d      	lsls	r5, r1, #1
 800236e:	b5c0      	push	{r6, r7, lr}
 8002370:	030e      	lsls	r6, r1, #12
 8002372:	0fc9      	lsrs	r1, r1, #31
 8002374:	468a      	mov	sl, r1
 8002376:	492e      	ldr	r1, [pc, #184]	; (8002430 <__ledf2+0xcc>)
 8002378:	031f      	lsls	r7, r3, #12
 800237a:	005c      	lsls	r4, r3, #1
 800237c:	4680      	mov	r8, r0
 800237e:	0b36      	lsrs	r6, r6, #12
 8002380:	0d6d      	lsrs	r5, r5, #21
 8002382:	4691      	mov	r9, r2
 8002384:	0b3f      	lsrs	r7, r7, #12
 8002386:	0d64      	lsrs	r4, r4, #21
 8002388:	0fdb      	lsrs	r3, r3, #31
 800238a:	428d      	cmp	r5, r1
 800238c:	d018      	beq.n	80023c0 <__ledf2+0x5c>
 800238e:	428c      	cmp	r4, r1
 8002390:	d011      	beq.n	80023b6 <__ledf2+0x52>
 8002392:	2d00      	cmp	r5, #0
 8002394:	d118      	bne.n	80023c8 <__ledf2+0x64>
 8002396:	4330      	orrs	r0, r6
 8002398:	4684      	mov	ip, r0
 800239a:	2c00      	cmp	r4, #0
 800239c:	d11e      	bne.n	80023dc <__ledf2+0x78>
 800239e:	433a      	orrs	r2, r7
 80023a0:	d11c      	bne.n	80023dc <__ledf2+0x78>
 80023a2:	4663      	mov	r3, ip
 80023a4:	2000      	movs	r0, #0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d030      	beq.n	800240c <__ledf2+0xa8>
 80023aa:	4651      	mov	r1, sl
 80023ac:	2002      	movs	r0, #2
 80023ae:	3901      	subs	r1, #1
 80023b0:	4008      	ands	r0, r1
 80023b2:	3801      	subs	r0, #1
 80023b4:	e02a      	b.n	800240c <__ledf2+0xa8>
 80023b6:	0039      	movs	r1, r7
 80023b8:	4311      	orrs	r1, r2
 80023ba:	d0ea      	beq.n	8002392 <__ledf2+0x2e>
 80023bc:	2002      	movs	r0, #2
 80023be:	e025      	b.n	800240c <__ledf2+0xa8>
 80023c0:	4330      	orrs	r0, r6
 80023c2:	d1fb      	bne.n	80023bc <__ledf2+0x58>
 80023c4:	42ac      	cmp	r4, r5
 80023c6:	d026      	beq.n	8002416 <__ledf2+0xb2>
 80023c8:	2c00      	cmp	r4, #0
 80023ca:	d126      	bne.n	800241a <__ledf2+0xb6>
 80023cc:	433a      	orrs	r2, r7
 80023ce:	d124      	bne.n	800241a <__ledf2+0xb6>
 80023d0:	4651      	mov	r1, sl
 80023d2:	2002      	movs	r0, #2
 80023d4:	3901      	subs	r1, #1
 80023d6:	4008      	ands	r0, r1
 80023d8:	3801      	subs	r0, #1
 80023da:	e017      	b.n	800240c <__ledf2+0xa8>
 80023dc:	4662      	mov	r2, ip
 80023de:	2a00      	cmp	r2, #0
 80023e0:	d00f      	beq.n	8002402 <__ledf2+0x9e>
 80023e2:	459a      	cmp	sl, r3
 80023e4:	d1e1      	bne.n	80023aa <__ledf2+0x46>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	db05      	blt.n	80023f6 <__ledf2+0x92>
 80023ea:	42be      	cmp	r6, r7
 80023ec:	d8dd      	bhi.n	80023aa <__ledf2+0x46>
 80023ee:	d019      	beq.n	8002424 <__ledf2+0xc0>
 80023f0:	2000      	movs	r0, #0
 80023f2:	42be      	cmp	r6, r7
 80023f4:	d20a      	bcs.n	800240c <__ledf2+0xa8>
 80023f6:	4650      	mov	r0, sl
 80023f8:	2301      	movs	r3, #1
 80023fa:	3801      	subs	r0, #1
 80023fc:	4398      	bics	r0, r3
 80023fe:	3001      	adds	r0, #1
 8002400:	e004      	b.n	800240c <__ledf2+0xa8>
 8002402:	2201      	movs	r2, #1
 8002404:	3b01      	subs	r3, #1
 8002406:	4393      	bics	r3, r2
 8002408:	0018      	movs	r0, r3
 800240a:	3001      	adds	r0, #1
 800240c:	bc1c      	pop	{r2, r3, r4}
 800240e:	4690      	mov	r8, r2
 8002410:	4699      	mov	r9, r3
 8002412:	46a2      	mov	sl, r4
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002416:	433a      	orrs	r2, r7
 8002418:	d1d0      	bne.n	80023bc <__ledf2+0x58>
 800241a:	459a      	cmp	sl, r3
 800241c:	d1c5      	bne.n	80023aa <__ledf2+0x46>
 800241e:	42a5      	cmp	r5, r4
 8002420:	dcc3      	bgt.n	80023aa <__ledf2+0x46>
 8002422:	e7e0      	b.n	80023e6 <__ledf2+0x82>
 8002424:	45c8      	cmp	r8, r9
 8002426:	d8c0      	bhi.n	80023aa <__ledf2+0x46>
 8002428:	2000      	movs	r0, #0
 800242a:	45c8      	cmp	r8, r9
 800242c:	d3e3      	bcc.n	80023f6 <__ledf2+0x92>
 800242e:	e7ed      	b.n	800240c <__ledf2+0xa8>
 8002430:	000007ff 	.word	0x000007ff

08002434 <__aeabi_dmul>:
 8002434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002436:	4657      	mov	r7, sl
 8002438:	46de      	mov	lr, fp
 800243a:	464e      	mov	r6, r9
 800243c:	4645      	mov	r5, r8
 800243e:	b5e0      	push	{r5, r6, r7, lr}
 8002440:	4683      	mov	fp, r0
 8002442:	0006      	movs	r6, r0
 8002444:	030f      	lsls	r7, r1, #12
 8002446:	0048      	lsls	r0, r1, #1
 8002448:	b087      	sub	sp, #28
 800244a:	4692      	mov	sl, r2
 800244c:	001d      	movs	r5, r3
 800244e:	0b3f      	lsrs	r7, r7, #12
 8002450:	0d40      	lsrs	r0, r0, #21
 8002452:	0fcc      	lsrs	r4, r1, #31
 8002454:	2800      	cmp	r0, #0
 8002456:	d100      	bne.n	800245a <__aeabi_dmul+0x26>
 8002458:	e06f      	b.n	800253a <__aeabi_dmul+0x106>
 800245a:	4bde      	ldr	r3, [pc, #888]	; (80027d4 <__aeabi_dmul+0x3a0>)
 800245c:	4298      	cmp	r0, r3
 800245e:	d038      	beq.n	80024d2 <__aeabi_dmul+0x9e>
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	00ff      	lsls	r7, r7, #3
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431f      	orrs	r7, r3
 8002468:	0f73      	lsrs	r3, r6, #29
 800246a:	433b      	orrs	r3, r7
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	4bda      	ldr	r3, [pc, #872]	; (80027d8 <__aeabi_dmul+0x3a4>)
 8002470:	2700      	movs	r7, #0
 8002472:	4699      	mov	r9, r3
 8002474:	2300      	movs	r3, #0
 8002476:	469b      	mov	fp, r3
 8002478:	00f6      	lsls	r6, r6, #3
 800247a:	4481      	add	r9, r0
 800247c:	032b      	lsls	r3, r5, #12
 800247e:	0069      	lsls	r1, r5, #1
 8002480:	0b1b      	lsrs	r3, r3, #12
 8002482:	4652      	mov	r2, sl
 8002484:	4698      	mov	r8, r3
 8002486:	0d49      	lsrs	r1, r1, #21
 8002488:	0fed      	lsrs	r5, r5, #31
 800248a:	2900      	cmp	r1, #0
 800248c:	d100      	bne.n	8002490 <__aeabi_dmul+0x5c>
 800248e:	e085      	b.n	800259c <__aeabi_dmul+0x168>
 8002490:	4bd0      	ldr	r3, [pc, #832]	; (80027d4 <__aeabi_dmul+0x3a0>)
 8002492:	4299      	cmp	r1, r3
 8002494:	d100      	bne.n	8002498 <__aeabi_dmul+0x64>
 8002496:	e073      	b.n	8002580 <__aeabi_dmul+0x14c>
 8002498:	4643      	mov	r3, r8
 800249a:	00da      	lsls	r2, r3, #3
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	4313      	orrs	r3, r2
 80024a2:	4652      	mov	r2, sl
 80024a4:	48cc      	ldr	r0, [pc, #816]	; (80027d8 <__aeabi_dmul+0x3a4>)
 80024a6:	0f52      	lsrs	r2, r2, #29
 80024a8:	4684      	mov	ip, r0
 80024aa:	4313      	orrs	r3, r2
 80024ac:	4652      	mov	r2, sl
 80024ae:	2000      	movs	r0, #0
 80024b0:	4461      	add	r1, ip
 80024b2:	00d2      	lsls	r2, r2, #3
 80024b4:	4489      	add	r9, r1
 80024b6:	0021      	movs	r1, r4
 80024b8:	4069      	eors	r1, r5
 80024ba:	9100      	str	r1, [sp, #0]
 80024bc:	468c      	mov	ip, r1
 80024be:	2101      	movs	r1, #1
 80024c0:	4449      	add	r1, r9
 80024c2:	468a      	mov	sl, r1
 80024c4:	2f0f      	cmp	r7, #15
 80024c6:	d900      	bls.n	80024ca <__aeabi_dmul+0x96>
 80024c8:	e090      	b.n	80025ec <__aeabi_dmul+0x1b8>
 80024ca:	49c4      	ldr	r1, [pc, #784]	; (80027dc <__aeabi_dmul+0x3a8>)
 80024cc:	00bf      	lsls	r7, r7, #2
 80024ce:	59cf      	ldr	r7, [r1, r7]
 80024d0:	46bf      	mov	pc, r7
 80024d2:	465b      	mov	r3, fp
 80024d4:	433b      	orrs	r3, r7
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	d000      	beq.n	80024dc <__aeabi_dmul+0xa8>
 80024da:	e16a      	b.n	80027b2 <__aeabi_dmul+0x37e>
 80024dc:	2302      	movs	r3, #2
 80024de:	2708      	movs	r7, #8
 80024e0:	2600      	movs	r6, #0
 80024e2:	4681      	mov	r9, r0
 80024e4:	469b      	mov	fp, r3
 80024e6:	e7c9      	b.n	800247c <__aeabi_dmul+0x48>
 80024e8:	0032      	movs	r2, r6
 80024ea:	4658      	mov	r0, fp
 80024ec:	9b01      	ldr	r3, [sp, #4]
 80024ee:	4661      	mov	r1, ip
 80024f0:	9100      	str	r1, [sp, #0]
 80024f2:	2802      	cmp	r0, #2
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dmul+0xc4>
 80024f6:	e075      	b.n	80025e4 <__aeabi_dmul+0x1b0>
 80024f8:	2803      	cmp	r0, #3
 80024fa:	d100      	bne.n	80024fe <__aeabi_dmul+0xca>
 80024fc:	e1fe      	b.n	80028fc <__aeabi_dmul+0x4c8>
 80024fe:	2801      	cmp	r0, #1
 8002500:	d000      	beq.n	8002504 <__aeabi_dmul+0xd0>
 8002502:	e12c      	b.n	800275e <__aeabi_dmul+0x32a>
 8002504:	2300      	movs	r3, #0
 8002506:	2700      	movs	r7, #0
 8002508:	2600      	movs	r6, #0
 800250a:	2500      	movs	r5, #0
 800250c:	033f      	lsls	r7, r7, #12
 800250e:	0d2a      	lsrs	r2, r5, #20
 8002510:	0b3f      	lsrs	r7, r7, #12
 8002512:	48b3      	ldr	r0, [pc, #716]	; (80027e0 <__aeabi_dmul+0x3ac>)
 8002514:	0512      	lsls	r2, r2, #20
 8002516:	433a      	orrs	r2, r7
 8002518:	4002      	ands	r2, r0
 800251a:	051b      	lsls	r3, r3, #20
 800251c:	4313      	orrs	r3, r2
 800251e:	9a00      	ldr	r2, [sp, #0]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	07d1      	lsls	r1, r2, #31
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	430b      	orrs	r3, r1
 8002528:	0030      	movs	r0, r6
 800252a:	0019      	movs	r1, r3
 800252c:	b007      	add	sp, #28
 800252e:	bc3c      	pop	{r2, r3, r4, r5}
 8002530:	4690      	mov	r8, r2
 8002532:	4699      	mov	r9, r3
 8002534:	46a2      	mov	sl, r4
 8002536:	46ab      	mov	fp, r5
 8002538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800253a:	465b      	mov	r3, fp
 800253c:	433b      	orrs	r3, r7
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	d100      	bne.n	8002544 <__aeabi_dmul+0x110>
 8002542:	e12f      	b.n	80027a4 <__aeabi_dmul+0x370>
 8002544:	2f00      	cmp	r7, #0
 8002546:	d100      	bne.n	800254a <__aeabi_dmul+0x116>
 8002548:	e1a5      	b.n	8002896 <__aeabi_dmul+0x462>
 800254a:	0038      	movs	r0, r7
 800254c:	f000 fec0 	bl	80032d0 <__clzsi2>
 8002550:	0003      	movs	r3, r0
 8002552:	3b0b      	subs	r3, #11
 8002554:	2b1c      	cmp	r3, #28
 8002556:	dd00      	ble.n	800255a <__aeabi_dmul+0x126>
 8002558:	e196      	b.n	8002888 <__aeabi_dmul+0x454>
 800255a:	221d      	movs	r2, #29
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	465a      	mov	r2, fp
 8002560:	0001      	movs	r1, r0
 8002562:	40da      	lsrs	r2, r3
 8002564:	465e      	mov	r6, fp
 8002566:	3908      	subs	r1, #8
 8002568:	408f      	lsls	r7, r1
 800256a:	0013      	movs	r3, r2
 800256c:	408e      	lsls	r6, r1
 800256e:	433b      	orrs	r3, r7
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	4b9c      	ldr	r3, [pc, #624]	; (80027e4 <__aeabi_dmul+0x3b0>)
 8002574:	2700      	movs	r7, #0
 8002576:	1a1b      	subs	r3, r3, r0
 8002578:	4699      	mov	r9, r3
 800257a:	2300      	movs	r3, #0
 800257c:	469b      	mov	fp, r3
 800257e:	e77d      	b.n	800247c <__aeabi_dmul+0x48>
 8002580:	4641      	mov	r1, r8
 8002582:	4653      	mov	r3, sl
 8002584:	430b      	orrs	r3, r1
 8002586:	4993      	ldr	r1, [pc, #588]	; (80027d4 <__aeabi_dmul+0x3a0>)
 8002588:	468c      	mov	ip, r1
 800258a:	44e1      	add	r9, ip
 800258c:	2b00      	cmp	r3, #0
 800258e:	d000      	beq.n	8002592 <__aeabi_dmul+0x15e>
 8002590:	e11a      	b.n	80027c8 <__aeabi_dmul+0x394>
 8002592:	2202      	movs	r2, #2
 8002594:	2002      	movs	r0, #2
 8002596:	4317      	orrs	r7, r2
 8002598:	2200      	movs	r2, #0
 800259a:	e78c      	b.n	80024b6 <__aeabi_dmul+0x82>
 800259c:	4313      	orrs	r3, r2
 800259e:	d100      	bne.n	80025a2 <__aeabi_dmul+0x16e>
 80025a0:	e10d      	b.n	80027be <__aeabi_dmul+0x38a>
 80025a2:	4643      	mov	r3, r8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d100      	bne.n	80025aa <__aeabi_dmul+0x176>
 80025a8:	e181      	b.n	80028ae <__aeabi_dmul+0x47a>
 80025aa:	4640      	mov	r0, r8
 80025ac:	f000 fe90 	bl	80032d0 <__clzsi2>
 80025b0:	0002      	movs	r2, r0
 80025b2:	3a0b      	subs	r2, #11
 80025b4:	2a1c      	cmp	r2, #28
 80025b6:	dd00      	ble.n	80025ba <__aeabi_dmul+0x186>
 80025b8:	e172      	b.n	80028a0 <__aeabi_dmul+0x46c>
 80025ba:	0001      	movs	r1, r0
 80025bc:	4643      	mov	r3, r8
 80025be:	3908      	subs	r1, #8
 80025c0:	408b      	lsls	r3, r1
 80025c2:	4698      	mov	r8, r3
 80025c4:	231d      	movs	r3, #29
 80025c6:	1a9a      	subs	r2, r3, r2
 80025c8:	4653      	mov	r3, sl
 80025ca:	40d3      	lsrs	r3, r2
 80025cc:	001a      	movs	r2, r3
 80025ce:	4643      	mov	r3, r8
 80025d0:	4313      	orrs	r3, r2
 80025d2:	4652      	mov	r2, sl
 80025d4:	408a      	lsls	r2, r1
 80025d6:	4649      	mov	r1, r9
 80025d8:	1a08      	subs	r0, r1, r0
 80025da:	4982      	ldr	r1, [pc, #520]	; (80027e4 <__aeabi_dmul+0x3b0>)
 80025dc:	4689      	mov	r9, r1
 80025de:	4481      	add	r9, r0
 80025e0:	2000      	movs	r0, #0
 80025e2:	e768      	b.n	80024b6 <__aeabi_dmul+0x82>
 80025e4:	4b7b      	ldr	r3, [pc, #492]	; (80027d4 <__aeabi_dmul+0x3a0>)
 80025e6:	2700      	movs	r7, #0
 80025e8:	2600      	movs	r6, #0
 80025ea:	e78e      	b.n	800250a <__aeabi_dmul+0xd6>
 80025ec:	0c14      	lsrs	r4, r2, #16
 80025ee:	0412      	lsls	r2, r2, #16
 80025f0:	0c12      	lsrs	r2, r2, #16
 80025f2:	0011      	movs	r1, r2
 80025f4:	0c37      	lsrs	r7, r6, #16
 80025f6:	0436      	lsls	r6, r6, #16
 80025f8:	0c35      	lsrs	r5, r6, #16
 80025fa:	4379      	muls	r1, r7
 80025fc:	0028      	movs	r0, r5
 80025fe:	468c      	mov	ip, r1
 8002600:	002e      	movs	r6, r5
 8002602:	4360      	muls	r0, r4
 8002604:	4460      	add	r0, ip
 8002606:	4683      	mov	fp, r0
 8002608:	4356      	muls	r6, r2
 800260a:	0021      	movs	r1, r4
 800260c:	0c30      	lsrs	r0, r6, #16
 800260e:	4680      	mov	r8, r0
 8002610:	4658      	mov	r0, fp
 8002612:	4379      	muls	r1, r7
 8002614:	4440      	add	r0, r8
 8002616:	9102      	str	r1, [sp, #8]
 8002618:	4584      	cmp	ip, r0
 800261a:	d906      	bls.n	800262a <__aeabi_dmul+0x1f6>
 800261c:	4688      	mov	r8, r1
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0249      	lsls	r1, r1, #9
 8002622:	468c      	mov	ip, r1
 8002624:	44e0      	add	r8, ip
 8002626:	4641      	mov	r1, r8
 8002628:	9102      	str	r1, [sp, #8]
 800262a:	0436      	lsls	r6, r6, #16
 800262c:	0c01      	lsrs	r1, r0, #16
 800262e:	0c36      	lsrs	r6, r6, #16
 8002630:	0400      	lsls	r0, r0, #16
 8002632:	468b      	mov	fp, r1
 8002634:	1981      	adds	r1, r0, r6
 8002636:	0c1e      	lsrs	r6, r3, #16
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	9103      	str	r1, [sp, #12]
 800263e:	0019      	movs	r1, r3
 8002640:	4379      	muls	r1, r7
 8002642:	468c      	mov	ip, r1
 8002644:	0028      	movs	r0, r5
 8002646:	4375      	muls	r5, r6
 8002648:	4465      	add	r5, ip
 800264a:	46a8      	mov	r8, r5
 800264c:	4358      	muls	r0, r3
 800264e:	0c05      	lsrs	r5, r0, #16
 8002650:	4445      	add	r5, r8
 8002652:	4377      	muls	r7, r6
 8002654:	42a9      	cmp	r1, r5
 8002656:	d903      	bls.n	8002660 <__aeabi_dmul+0x22c>
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	0249      	lsls	r1, r1, #9
 800265c:	468c      	mov	ip, r1
 800265e:	4467      	add	r7, ip
 8002660:	0c29      	lsrs	r1, r5, #16
 8002662:	468c      	mov	ip, r1
 8002664:	0039      	movs	r1, r7
 8002666:	0400      	lsls	r0, r0, #16
 8002668:	0c00      	lsrs	r0, r0, #16
 800266a:	042d      	lsls	r5, r5, #16
 800266c:	182d      	adds	r5, r5, r0
 800266e:	4461      	add	r1, ip
 8002670:	44ab      	add	fp, r5
 8002672:	9105      	str	r1, [sp, #20]
 8002674:	4659      	mov	r1, fp
 8002676:	9104      	str	r1, [sp, #16]
 8002678:	9901      	ldr	r1, [sp, #4]
 800267a:	040f      	lsls	r7, r1, #16
 800267c:	0c3f      	lsrs	r7, r7, #16
 800267e:	0c08      	lsrs	r0, r1, #16
 8002680:	0039      	movs	r1, r7
 8002682:	4351      	muls	r1, r2
 8002684:	4342      	muls	r2, r0
 8002686:	4690      	mov	r8, r2
 8002688:	0002      	movs	r2, r0
 800268a:	468c      	mov	ip, r1
 800268c:	0c09      	lsrs	r1, r1, #16
 800268e:	468b      	mov	fp, r1
 8002690:	4362      	muls	r2, r4
 8002692:	437c      	muls	r4, r7
 8002694:	4444      	add	r4, r8
 8002696:	445c      	add	r4, fp
 8002698:	45a0      	cmp	r8, r4
 800269a:	d903      	bls.n	80026a4 <__aeabi_dmul+0x270>
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0249      	lsls	r1, r1, #9
 80026a0:	4688      	mov	r8, r1
 80026a2:	4442      	add	r2, r8
 80026a4:	0c21      	lsrs	r1, r4, #16
 80026a6:	4688      	mov	r8, r1
 80026a8:	4661      	mov	r1, ip
 80026aa:	0409      	lsls	r1, r1, #16
 80026ac:	0c09      	lsrs	r1, r1, #16
 80026ae:	468c      	mov	ip, r1
 80026b0:	0039      	movs	r1, r7
 80026b2:	4359      	muls	r1, r3
 80026b4:	4343      	muls	r3, r0
 80026b6:	4370      	muls	r0, r6
 80026b8:	437e      	muls	r6, r7
 80026ba:	0c0f      	lsrs	r7, r1, #16
 80026bc:	18f6      	adds	r6, r6, r3
 80026be:	0424      	lsls	r4, r4, #16
 80026c0:	19be      	adds	r6, r7, r6
 80026c2:	4464      	add	r4, ip
 80026c4:	4442      	add	r2, r8
 80026c6:	468c      	mov	ip, r1
 80026c8:	42b3      	cmp	r3, r6
 80026ca:	d903      	bls.n	80026d4 <__aeabi_dmul+0x2a0>
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	025b      	lsls	r3, r3, #9
 80026d0:	4698      	mov	r8, r3
 80026d2:	4440      	add	r0, r8
 80026d4:	9b02      	ldr	r3, [sp, #8]
 80026d6:	4661      	mov	r1, ip
 80026d8:	4698      	mov	r8, r3
 80026da:	9b04      	ldr	r3, [sp, #16]
 80026dc:	0437      	lsls	r7, r6, #16
 80026de:	4443      	add	r3, r8
 80026e0:	469b      	mov	fp, r3
 80026e2:	45ab      	cmp	fp, r5
 80026e4:	41ad      	sbcs	r5, r5
 80026e6:	426b      	negs	r3, r5
 80026e8:	040d      	lsls	r5, r1, #16
 80026ea:	9905      	ldr	r1, [sp, #20]
 80026ec:	0c2d      	lsrs	r5, r5, #16
 80026ee:	468c      	mov	ip, r1
 80026f0:	197f      	adds	r7, r7, r5
 80026f2:	4467      	add	r7, ip
 80026f4:	18fd      	adds	r5, r7, r3
 80026f6:	46a8      	mov	r8, r5
 80026f8:	465d      	mov	r5, fp
 80026fa:	192d      	adds	r5, r5, r4
 80026fc:	42a5      	cmp	r5, r4
 80026fe:	41a4      	sbcs	r4, r4
 8002700:	4693      	mov	fp, r2
 8002702:	4264      	negs	r4, r4
 8002704:	46a4      	mov	ip, r4
 8002706:	44c3      	add	fp, r8
 8002708:	44dc      	add	ip, fp
 800270a:	428f      	cmp	r7, r1
 800270c:	41bf      	sbcs	r7, r7
 800270e:	4598      	cmp	r8, r3
 8002710:	419b      	sbcs	r3, r3
 8002712:	4593      	cmp	fp, r2
 8002714:	4192      	sbcs	r2, r2
 8002716:	45a4      	cmp	ip, r4
 8002718:	41a4      	sbcs	r4, r4
 800271a:	425b      	negs	r3, r3
 800271c:	427f      	negs	r7, r7
 800271e:	431f      	orrs	r7, r3
 8002720:	0c36      	lsrs	r6, r6, #16
 8002722:	4252      	negs	r2, r2
 8002724:	4264      	negs	r4, r4
 8002726:	19bf      	adds	r7, r7, r6
 8002728:	4322      	orrs	r2, r4
 800272a:	18bf      	adds	r7, r7, r2
 800272c:	4662      	mov	r2, ip
 800272e:	1838      	adds	r0, r7, r0
 8002730:	0243      	lsls	r3, r0, #9
 8002732:	0dd2      	lsrs	r2, r2, #23
 8002734:	9903      	ldr	r1, [sp, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	026a      	lsls	r2, r5, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	1e50      	subs	r0, r2, #1
 800273e:	4182      	sbcs	r2, r0
 8002740:	4661      	mov	r1, ip
 8002742:	0ded      	lsrs	r5, r5, #23
 8002744:	432a      	orrs	r2, r5
 8002746:	024e      	lsls	r6, r1, #9
 8002748:	4332      	orrs	r2, r6
 800274a:	01d9      	lsls	r1, r3, #7
 800274c:	d400      	bmi.n	8002750 <__aeabi_dmul+0x31c>
 800274e:	e0b3      	b.n	80028b8 <__aeabi_dmul+0x484>
 8002750:	2601      	movs	r6, #1
 8002752:	0850      	lsrs	r0, r2, #1
 8002754:	4032      	ands	r2, r6
 8002756:	4302      	orrs	r2, r0
 8002758:	07de      	lsls	r6, r3, #31
 800275a:	4332      	orrs	r2, r6
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	4c22      	ldr	r4, [pc, #136]	; (80027e8 <__aeabi_dmul+0x3b4>)
 8002760:	4454      	add	r4, sl
 8002762:	2c00      	cmp	r4, #0
 8002764:	dd62      	ble.n	800282c <__aeabi_dmul+0x3f8>
 8002766:	0751      	lsls	r1, r2, #29
 8002768:	d009      	beq.n	800277e <__aeabi_dmul+0x34a>
 800276a:	200f      	movs	r0, #15
 800276c:	4010      	ands	r0, r2
 800276e:	2804      	cmp	r0, #4
 8002770:	d005      	beq.n	800277e <__aeabi_dmul+0x34a>
 8002772:	1d10      	adds	r0, r2, #4
 8002774:	4290      	cmp	r0, r2
 8002776:	4192      	sbcs	r2, r2
 8002778:	4252      	negs	r2, r2
 800277a:	189b      	adds	r3, r3, r2
 800277c:	0002      	movs	r2, r0
 800277e:	01d9      	lsls	r1, r3, #7
 8002780:	d504      	bpl.n	800278c <__aeabi_dmul+0x358>
 8002782:	2480      	movs	r4, #128	; 0x80
 8002784:	4819      	ldr	r0, [pc, #100]	; (80027ec <__aeabi_dmul+0x3b8>)
 8002786:	00e4      	lsls	r4, r4, #3
 8002788:	4003      	ands	r3, r0
 800278a:	4454      	add	r4, sl
 800278c:	4818      	ldr	r0, [pc, #96]	; (80027f0 <__aeabi_dmul+0x3bc>)
 800278e:	4284      	cmp	r4, r0
 8002790:	dd00      	ble.n	8002794 <__aeabi_dmul+0x360>
 8002792:	e727      	b.n	80025e4 <__aeabi_dmul+0x1b0>
 8002794:	075e      	lsls	r6, r3, #29
 8002796:	025b      	lsls	r3, r3, #9
 8002798:	08d2      	lsrs	r2, r2, #3
 800279a:	0b1f      	lsrs	r7, r3, #12
 800279c:	0563      	lsls	r3, r4, #21
 800279e:	4316      	orrs	r6, r2
 80027a0:	0d5b      	lsrs	r3, r3, #21
 80027a2:	e6b2      	b.n	800250a <__aeabi_dmul+0xd6>
 80027a4:	2300      	movs	r3, #0
 80027a6:	4699      	mov	r9, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	2704      	movs	r7, #4
 80027ac:	2600      	movs	r6, #0
 80027ae:	469b      	mov	fp, r3
 80027b0:	e664      	b.n	800247c <__aeabi_dmul+0x48>
 80027b2:	2303      	movs	r3, #3
 80027b4:	9701      	str	r7, [sp, #4]
 80027b6:	4681      	mov	r9, r0
 80027b8:	270c      	movs	r7, #12
 80027ba:	469b      	mov	fp, r3
 80027bc:	e65e      	b.n	800247c <__aeabi_dmul+0x48>
 80027be:	2201      	movs	r2, #1
 80027c0:	2001      	movs	r0, #1
 80027c2:	4317      	orrs	r7, r2
 80027c4:	2200      	movs	r2, #0
 80027c6:	e676      	b.n	80024b6 <__aeabi_dmul+0x82>
 80027c8:	2303      	movs	r3, #3
 80027ca:	2003      	movs	r0, #3
 80027cc:	431f      	orrs	r7, r3
 80027ce:	4643      	mov	r3, r8
 80027d0:	e671      	b.n	80024b6 <__aeabi_dmul+0x82>
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	000007ff 	.word	0x000007ff
 80027d8:	fffffc01 	.word	0xfffffc01
 80027dc:	08019bac 	.word	0x08019bac
 80027e0:	800fffff 	.word	0x800fffff
 80027e4:	fffffc0d 	.word	0xfffffc0d
 80027e8:	000003ff 	.word	0x000003ff
 80027ec:	feffffff 	.word	0xfeffffff
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	2300      	movs	r3, #0
 80027f6:	2780      	movs	r7, #128	; 0x80
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	033f      	lsls	r7, r7, #12
 80027fc:	2600      	movs	r6, #0
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <__aeabi_dmul+0x4d8>)
 8002800:	e683      	b.n	800250a <__aeabi_dmul+0xd6>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0032      	movs	r2, r6
 8002806:	46a4      	mov	ip, r4
 8002808:	4658      	mov	r0, fp
 800280a:	e670      	b.n	80024ee <__aeabi_dmul+0xba>
 800280c:	46ac      	mov	ip, r5
 800280e:	e66e      	b.n	80024ee <__aeabi_dmul+0xba>
 8002810:	2780      	movs	r7, #128	; 0x80
 8002812:	9901      	ldr	r1, [sp, #4]
 8002814:	033f      	lsls	r7, r7, #12
 8002816:	4239      	tst	r1, r7
 8002818:	d02d      	beq.n	8002876 <__aeabi_dmul+0x442>
 800281a:	423b      	tst	r3, r7
 800281c:	d12b      	bne.n	8002876 <__aeabi_dmul+0x442>
 800281e:	431f      	orrs	r7, r3
 8002820:	033f      	lsls	r7, r7, #12
 8002822:	0b3f      	lsrs	r7, r7, #12
 8002824:	9500      	str	r5, [sp, #0]
 8002826:	0016      	movs	r6, r2
 8002828:	4b38      	ldr	r3, [pc, #224]	; (800290c <__aeabi_dmul+0x4d8>)
 800282a:	e66e      	b.n	800250a <__aeabi_dmul+0xd6>
 800282c:	2501      	movs	r5, #1
 800282e:	1b2d      	subs	r5, r5, r4
 8002830:	2d38      	cmp	r5, #56	; 0x38
 8002832:	dd00      	ble.n	8002836 <__aeabi_dmul+0x402>
 8002834:	e666      	b.n	8002504 <__aeabi_dmul+0xd0>
 8002836:	2d1f      	cmp	r5, #31
 8002838:	dc40      	bgt.n	80028bc <__aeabi_dmul+0x488>
 800283a:	4835      	ldr	r0, [pc, #212]	; (8002910 <__aeabi_dmul+0x4dc>)
 800283c:	001c      	movs	r4, r3
 800283e:	4450      	add	r0, sl
 8002840:	0016      	movs	r6, r2
 8002842:	4082      	lsls	r2, r0
 8002844:	4084      	lsls	r4, r0
 8002846:	40ee      	lsrs	r6, r5
 8002848:	1e50      	subs	r0, r2, #1
 800284a:	4182      	sbcs	r2, r0
 800284c:	4334      	orrs	r4, r6
 800284e:	4314      	orrs	r4, r2
 8002850:	40eb      	lsrs	r3, r5
 8002852:	0762      	lsls	r2, r4, #29
 8002854:	d009      	beq.n	800286a <__aeabi_dmul+0x436>
 8002856:	220f      	movs	r2, #15
 8002858:	4022      	ands	r2, r4
 800285a:	2a04      	cmp	r2, #4
 800285c:	d005      	beq.n	800286a <__aeabi_dmul+0x436>
 800285e:	0022      	movs	r2, r4
 8002860:	1d14      	adds	r4, r2, #4
 8002862:	4294      	cmp	r4, r2
 8002864:	4180      	sbcs	r0, r0
 8002866:	4240      	negs	r0, r0
 8002868:	181b      	adds	r3, r3, r0
 800286a:	021a      	lsls	r2, r3, #8
 800286c:	d53e      	bpl.n	80028ec <__aeabi_dmul+0x4b8>
 800286e:	2301      	movs	r3, #1
 8002870:	2700      	movs	r7, #0
 8002872:	2600      	movs	r6, #0
 8002874:	e649      	b.n	800250a <__aeabi_dmul+0xd6>
 8002876:	2780      	movs	r7, #128	; 0x80
 8002878:	9b01      	ldr	r3, [sp, #4]
 800287a:	033f      	lsls	r7, r7, #12
 800287c:	431f      	orrs	r7, r3
 800287e:	033f      	lsls	r7, r7, #12
 8002880:	0b3f      	lsrs	r7, r7, #12
 8002882:	9400      	str	r4, [sp, #0]
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <__aeabi_dmul+0x4d8>)
 8002886:	e640      	b.n	800250a <__aeabi_dmul+0xd6>
 8002888:	0003      	movs	r3, r0
 800288a:	465a      	mov	r2, fp
 800288c:	3b28      	subs	r3, #40	; 0x28
 800288e:	409a      	lsls	r2, r3
 8002890:	2600      	movs	r6, #0
 8002892:	9201      	str	r2, [sp, #4]
 8002894:	e66d      	b.n	8002572 <__aeabi_dmul+0x13e>
 8002896:	4658      	mov	r0, fp
 8002898:	f000 fd1a 	bl	80032d0 <__clzsi2>
 800289c:	3020      	adds	r0, #32
 800289e:	e657      	b.n	8002550 <__aeabi_dmul+0x11c>
 80028a0:	0003      	movs	r3, r0
 80028a2:	4652      	mov	r2, sl
 80028a4:	3b28      	subs	r3, #40	; 0x28
 80028a6:	409a      	lsls	r2, r3
 80028a8:	0013      	movs	r3, r2
 80028aa:	2200      	movs	r2, #0
 80028ac:	e693      	b.n	80025d6 <__aeabi_dmul+0x1a2>
 80028ae:	4650      	mov	r0, sl
 80028b0:	f000 fd0e 	bl	80032d0 <__clzsi2>
 80028b4:	3020      	adds	r0, #32
 80028b6:	e67b      	b.n	80025b0 <__aeabi_dmul+0x17c>
 80028b8:	46ca      	mov	sl, r9
 80028ba:	e750      	b.n	800275e <__aeabi_dmul+0x32a>
 80028bc:	201f      	movs	r0, #31
 80028be:	001e      	movs	r6, r3
 80028c0:	4240      	negs	r0, r0
 80028c2:	1b04      	subs	r4, r0, r4
 80028c4:	40e6      	lsrs	r6, r4
 80028c6:	2d20      	cmp	r5, #32
 80028c8:	d003      	beq.n	80028d2 <__aeabi_dmul+0x49e>
 80028ca:	4c12      	ldr	r4, [pc, #72]	; (8002914 <__aeabi_dmul+0x4e0>)
 80028cc:	4454      	add	r4, sl
 80028ce:	40a3      	lsls	r3, r4
 80028d0:	431a      	orrs	r2, r3
 80028d2:	1e50      	subs	r0, r2, #1
 80028d4:	4182      	sbcs	r2, r0
 80028d6:	4332      	orrs	r2, r6
 80028d8:	2607      	movs	r6, #7
 80028da:	2700      	movs	r7, #0
 80028dc:	4016      	ands	r6, r2
 80028de:	d009      	beq.n	80028f4 <__aeabi_dmul+0x4c0>
 80028e0:	200f      	movs	r0, #15
 80028e2:	2300      	movs	r3, #0
 80028e4:	4010      	ands	r0, r2
 80028e6:	0014      	movs	r4, r2
 80028e8:	2804      	cmp	r0, #4
 80028ea:	d1b9      	bne.n	8002860 <__aeabi_dmul+0x42c>
 80028ec:	0022      	movs	r2, r4
 80028ee:	075e      	lsls	r6, r3, #29
 80028f0:	025b      	lsls	r3, r3, #9
 80028f2:	0b1f      	lsrs	r7, r3, #12
 80028f4:	08d2      	lsrs	r2, r2, #3
 80028f6:	4316      	orrs	r6, r2
 80028f8:	2300      	movs	r3, #0
 80028fa:	e606      	b.n	800250a <__aeabi_dmul+0xd6>
 80028fc:	2780      	movs	r7, #128	; 0x80
 80028fe:	033f      	lsls	r7, r7, #12
 8002900:	431f      	orrs	r7, r3
 8002902:	033f      	lsls	r7, r7, #12
 8002904:	0b3f      	lsrs	r7, r7, #12
 8002906:	0016      	movs	r6, r2
 8002908:	4b00      	ldr	r3, [pc, #0]	; (800290c <__aeabi_dmul+0x4d8>)
 800290a:	e5fe      	b.n	800250a <__aeabi_dmul+0xd6>
 800290c:	000007ff 	.word	0x000007ff
 8002910:	0000041e 	.word	0x0000041e
 8002914:	0000043e 	.word	0x0000043e

08002918 <__aeabi_dsub>:
 8002918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291a:	4657      	mov	r7, sl
 800291c:	464e      	mov	r6, r9
 800291e:	4645      	mov	r5, r8
 8002920:	46de      	mov	lr, fp
 8002922:	000c      	movs	r4, r1
 8002924:	0309      	lsls	r1, r1, #12
 8002926:	b5e0      	push	{r5, r6, r7, lr}
 8002928:	0a49      	lsrs	r1, r1, #9
 800292a:	0f46      	lsrs	r6, r0, #29
 800292c:	005f      	lsls	r7, r3, #1
 800292e:	4331      	orrs	r1, r6
 8002930:	031e      	lsls	r6, r3, #12
 8002932:	0fdb      	lsrs	r3, r3, #31
 8002934:	0a76      	lsrs	r6, r6, #9
 8002936:	469b      	mov	fp, r3
 8002938:	0f53      	lsrs	r3, r2, #29
 800293a:	4333      	orrs	r3, r6
 800293c:	4ec8      	ldr	r6, [pc, #800]	; (8002c60 <__aeabi_dsub+0x348>)
 800293e:	0065      	lsls	r5, r4, #1
 8002940:	00c0      	lsls	r0, r0, #3
 8002942:	0fe4      	lsrs	r4, r4, #31
 8002944:	00d2      	lsls	r2, r2, #3
 8002946:	0d6d      	lsrs	r5, r5, #21
 8002948:	46a2      	mov	sl, r4
 800294a:	4681      	mov	r9, r0
 800294c:	0d7f      	lsrs	r7, r7, #21
 800294e:	469c      	mov	ip, r3
 8002950:	4690      	mov	r8, r2
 8002952:	42b7      	cmp	r7, r6
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x40>
 8002956:	e0b9      	b.n	8002acc <__aeabi_dsub+0x1b4>
 8002958:	465b      	mov	r3, fp
 800295a:	2601      	movs	r6, #1
 800295c:	4073      	eors	r3, r6
 800295e:	469b      	mov	fp, r3
 8002960:	1bee      	subs	r6, r5, r7
 8002962:	45a3      	cmp	fp, r4
 8002964:	d100      	bne.n	8002968 <__aeabi_dsub+0x50>
 8002966:	e083      	b.n	8002a70 <__aeabi_dsub+0x158>
 8002968:	2e00      	cmp	r6, #0
 800296a:	dd63      	ble.n	8002a34 <__aeabi_dsub+0x11c>
 800296c:	2f00      	cmp	r7, #0
 800296e:	d000      	beq.n	8002972 <__aeabi_dsub+0x5a>
 8002970:	e0b1      	b.n	8002ad6 <__aeabi_dsub+0x1be>
 8002972:	4663      	mov	r3, ip
 8002974:	4313      	orrs	r3, r2
 8002976:	d100      	bne.n	800297a <__aeabi_dsub+0x62>
 8002978:	e123      	b.n	8002bc2 <__aeabi_dsub+0x2aa>
 800297a:	1e73      	subs	r3, r6, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d000      	beq.n	8002982 <__aeabi_dsub+0x6a>
 8002980:	e1ba      	b.n	8002cf8 <__aeabi_dsub+0x3e0>
 8002982:	1a86      	subs	r6, r0, r2
 8002984:	4663      	mov	r3, ip
 8002986:	42b0      	cmp	r0, r6
 8002988:	4180      	sbcs	r0, r0
 800298a:	2501      	movs	r5, #1
 800298c:	1ac9      	subs	r1, r1, r3
 800298e:	4240      	negs	r0, r0
 8002990:	1a09      	subs	r1, r1, r0
 8002992:	020b      	lsls	r3, r1, #8
 8002994:	d400      	bmi.n	8002998 <__aeabi_dsub+0x80>
 8002996:	e147      	b.n	8002c28 <__aeabi_dsub+0x310>
 8002998:	0249      	lsls	r1, r1, #9
 800299a:	0a4b      	lsrs	r3, r1, #9
 800299c:	4698      	mov	r8, r3
 800299e:	4643      	mov	r3, r8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d100      	bne.n	80029a6 <__aeabi_dsub+0x8e>
 80029a4:	e189      	b.n	8002cba <__aeabi_dsub+0x3a2>
 80029a6:	4640      	mov	r0, r8
 80029a8:	f000 fc92 	bl	80032d0 <__clzsi2>
 80029ac:	0003      	movs	r3, r0
 80029ae:	3b08      	subs	r3, #8
 80029b0:	2b1f      	cmp	r3, #31
 80029b2:	dd00      	ble.n	80029b6 <__aeabi_dsub+0x9e>
 80029b4:	e17c      	b.n	8002cb0 <__aeabi_dsub+0x398>
 80029b6:	2220      	movs	r2, #32
 80029b8:	0030      	movs	r0, r6
 80029ba:	1ad2      	subs	r2, r2, r3
 80029bc:	4641      	mov	r1, r8
 80029be:	40d0      	lsrs	r0, r2
 80029c0:	4099      	lsls	r1, r3
 80029c2:	0002      	movs	r2, r0
 80029c4:	409e      	lsls	r6, r3
 80029c6:	430a      	orrs	r2, r1
 80029c8:	429d      	cmp	r5, r3
 80029ca:	dd00      	ble.n	80029ce <__aeabi_dsub+0xb6>
 80029cc:	e16a      	b.n	8002ca4 <__aeabi_dsub+0x38c>
 80029ce:	1b5d      	subs	r5, r3, r5
 80029d0:	1c6b      	adds	r3, r5, #1
 80029d2:	2b1f      	cmp	r3, #31
 80029d4:	dd00      	ble.n	80029d8 <__aeabi_dsub+0xc0>
 80029d6:	e194      	b.n	8002d02 <__aeabi_dsub+0x3ea>
 80029d8:	2120      	movs	r1, #32
 80029da:	0010      	movs	r0, r2
 80029dc:	0035      	movs	r5, r6
 80029de:	1ac9      	subs	r1, r1, r3
 80029e0:	408e      	lsls	r6, r1
 80029e2:	40da      	lsrs	r2, r3
 80029e4:	4088      	lsls	r0, r1
 80029e6:	40dd      	lsrs	r5, r3
 80029e8:	1e71      	subs	r1, r6, #1
 80029ea:	418e      	sbcs	r6, r1
 80029ec:	0011      	movs	r1, r2
 80029ee:	2207      	movs	r2, #7
 80029f0:	4328      	orrs	r0, r5
 80029f2:	2500      	movs	r5, #0
 80029f4:	4306      	orrs	r6, r0
 80029f6:	4032      	ands	r2, r6
 80029f8:	2a00      	cmp	r2, #0
 80029fa:	d009      	beq.n	8002a10 <__aeabi_dsub+0xf8>
 80029fc:	230f      	movs	r3, #15
 80029fe:	4033      	ands	r3, r6
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d005      	beq.n	8002a10 <__aeabi_dsub+0xf8>
 8002a04:	1d33      	adds	r3, r6, #4
 8002a06:	42b3      	cmp	r3, r6
 8002a08:	41b6      	sbcs	r6, r6
 8002a0a:	4276      	negs	r6, r6
 8002a0c:	1989      	adds	r1, r1, r6
 8002a0e:	001e      	movs	r6, r3
 8002a10:	020b      	lsls	r3, r1, #8
 8002a12:	d400      	bmi.n	8002a16 <__aeabi_dsub+0xfe>
 8002a14:	e23d      	b.n	8002e92 <__aeabi_dsub+0x57a>
 8002a16:	1c6a      	adds	r2, r5, #1
 8002a18:	4b91      	ldr	r3, [pc, #580]	; (8002c60 <__aeabi_dsub+0x348>)
 8002a1a:	0555      	lsls	r5, r2, #21
 8002a1c:	0d6d      	lsrs	r5, r5, #21
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d100      	bne.n	8002a24 <__aeabi_dsub+0x10c>
 8002a22:	e119      	b.n	8002c58 <__aeabi_dsub+0x340>
 8002a24:	4a8f      	ldr	r2, [pc, #572]	; (8002c64 <__aeabi_dsub+0x34c>)
 8002a26:	08f6      	lsrs	r6, r6, #3
 8002a28:	400a      	ands	r2, r1
 8002a2a:	0757      	lsls	r7, r2, #29
 8002a2c:	0252      	lsls	r2, r2, #9
 8002a2e:	4337      	orrs	r7, r6
 8002a30:	0b12      	lsrs	r2, r2, #12
 8002a32:	e09b      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002a34:	2e00      	cmp	r6, #0
 8002a36:	d000      	beq.n	8002a3a <__aeabi_dsub+0x122>
 8002a38:	e0c5      	b.n	8002bc6 <__aeabi_dsub+0x2ae>
 8002a3a:	1c6e      	adds	r6, r5, #1
 8002a3c:	0576      	lsls	r6, r6, #21
 8002a3e:	0d76      	lsrs	r6, r6, #21
 8002a40:	2e01      	cmp	r6, #1
 8002a42:	dc00      	bgt.n	8002a46 <__aeabi_dsub+0x12e>
 8002a44:	e148      	b.n	8002cd8 <__aeabi_dsub+0x3c0>
 8002a46:	4667      	mov	r7, ip
 8002a48:	1a86      	subs	r6, r0, r2
 8002a4a:	1bcb      	subs	r3, r1, r7
 8002a4c:	42b0      	cmp	r0, r6
 8002a4e:	41bf      	sbcs	r7, r7
 8002a50:	427f      	negs	r7, r7
 8002a52:	46b8      	mov	r8, r7
 8002a54:	001f      	movs	r7, r3
 8002a56:	4643      	mov	r3, r8
 8002a58:	1aff      	subs	r7, r7, r3
 8002a5a:	003b      	movs	r3, r7
 8002a5c:	46b8      	mov	r8, r7
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	d500      	bpl.n	8002a64 <__aeabi_dsub+0x14c>
 8002a62:	e15f      	b.n	8002d24 <__aeabi_dsub+0x40c>
 8002a64:	4337      	orrs	r7, r6
 8002a66:	d19a      	bne.n	800299e <__aeabi_dsub+0x86>
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2400      	movs	r4, #0
 8002a6c:	2500      	movs	r5, #0
 8002a6e:	e079      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002a70:	2e00      	cmp	r6, #0
 8002a72:	dc00      	bgt.n	8002a76 <__aeabi_dsub+0x15e>
 8002a74:	e0fa      	b.n	8002c6c <__aeabi_dsub+0x354>
 8002a76:	2f00      	cmp	r7, #0
 8002a78:	d100      	bne.n	8002a7c <__aeabi_dsub+0x164>
 8002a7a:	e08d      	b.n	8002b98 <__aeabi_dsub+0x280>
 8002a7c:	4b78      	ldr	r3, [pc, #480]	; (8002c60 <__aeabi_dsub+0x348>)
 8002a7e:	429d      	cmp	r5, r3
 8002a80:	d067      	beq.n	8002b52 <__aeabi_dsub+0x23a>
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	4667      	mov	r7, ip
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	431f      	orrs	r7, r3
 8002a8a:	46bc      	mov	ip, r7
 8002a8c:	2e38      	cmp	r6, #56	; 0x38
 8002a8e:	dc00      	bgt.n	8002a92 <__aeabi_dsub+0x17a>
 8002a90:	e152      	b.n	8002d38 <__aeabi_dsub+0x420>
 8002a92:	4663      	mov	r3, ip
 8002a94:	4313      	orrs	r3, r2
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	4193      	sbcs	r3, r2
 8002a9a:	181e      	adds	r6, r3, r0
 8002a9c:	4286      	cmp	r6, r0
 8002a9e:	4180      	sbcs	r0, r0
 8002aa0:	4240      	negs	r0, r0
 8002aa2:	1809      	adds	r1, r1, r0
 8002aa4:	020b      	lsls	r3, r1, #8
 8002aa6:	d400      	bmi.n	8002aaa <__aeabi_dsub+0x192>
 8002aa8:	e0be      	b.n	8002c28 <__aeabi_dsub+0x310>
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <__aeabi_dsub+0x348>)
 8002aac:	3501      	adds	r5, #1
 8002aae:	429d      	cmp	r5, r3
 8002ab0:	d100      	bne.n	8002ab4 <__aeabi_dsub+0x19c>
 8002ab2:	e0d2      	b.n	8002c5a <__aeabi_dsub+0x342>
 8002ab4:	4a6b      	ldr	r2, [pc, #428]	; (8002c64 <__aeabi_dsub+0x34c>)
 8002ab6:	0873      	lsrs	r3, r6, #1
 8002ab8:	400a      	ands	r2, r1
 8002aba:	2101      	movs	r1, #1
 8002abc:	400e      	ands	r6, r1
 8002abe:	431e      	orrs	r6, r3
 8002ac0:	0851      	lsrs	r1, r2, #1
 8002ac2:	07d3      	lsls	r3, r2, #31
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	431e      	orrs	r6, r3
 8002ac8:	4032      	ands	r2, r6
 8002aca:	e795      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002acc:	001e      	movs	r6, r3
 8002ace:	4316      	orrs	r6, r2
 8002ad0:	d000      	beq.n	8002ad4 <__aeabi_dsub+0x1bc>
 8002ad2:	e745      	b.n	8002960 <__aeabi_dsub+0x48>
 8002ad4:	e740      	b.n	8002958 <__aeabi_dsub+0x40>
 8002ad6:	4b62      	ldr	r3, [pc, #392]	; (8002c60 <__aeabi_dsub+0x348>)
 8002ad8:	429d      	cmp	r5, r3
 8002ada:	d03a      	beq.n	8002b52 <__aeabi_dsub+0x23a>
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	4667      	mov	r7, ip
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	431f      	orrs	r7, r3
 8002ae4:	46bc      	mov	ip, r7
 8002ae6:	2e38      	cmp	r6, #56	; 0x38
 8002ae8:	dd00      	ble.n	8002aec <__aeabi_dsub+0x1d4>
 8002aea:	e0eb      	b.n	8002cc4 <__aeabi_dsub+0x3ac>
 8002aec:	2e1f      	cmp	r6, #31
 8002aee:	dc00      	bgt.n	8002af2 <__aeabi_dsub+0x1da>
 8002af0:	e13a      	b.n	8002d68 <__aeabi_dsub+0x450>
 8002af2:	0033      	movs	r3, r6
 8002af4:	4667      	mov	r7, ip
 8002af6:	3b20      	subs	r3, #32
 8002af8:	40df      	lsrs	r7, r3
 8002afa:	003b      	movs	r3, r7
 8002afc:	2e20      	cmp	r6, #32
 8002afe:	d005      	beq.n	8002b0c <__aeabi_dsub+0x1f4>
 8002b00:	2740      	movs	r7, #64	; 0x40
 8002b02:	1bbf      	subs	r7, r7, r6
 8002b04:	4666      	mov	r6, ip
 8002b06:	40be      	lsls	r6, r7
 8002b08:	4332      	orrs	r2, r6
 8002b0a:	4690      	mov	r8, r2
 8002b0c:	4646      	mov	r6, r8
 8002b0e:	1e72      	subs	r2, r6, #1
 8002b10:	4196      	sbcs	r6, r2
 8002b12:	4333      	orrs	r3, r6
 8002b14:	e0da      	b.n	8002ccc <__aeabi_dsub+0x3b4>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d100      	bne.n	8002b1c <__aeabi_dsub+0x204>
 8002b1a:	e214      	b.n	8002f46 <__aeabi_dsub+0x62e>
 8002b1c:	4663      	mov	r3, ip
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	d100      	bne.n	8002b24 <__aeabi_dsub+0x20c>
 8002b22:	e168      	b.n	8002df6 <__aeabi_dsub+0x4de>
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	074e      	lsls	r6, r1, #29
 8002b28:	08c0      	lsrs	r0, r0, #3
 8002b2a:	08c9      	lsrs	r1, r1, #3
 8002b2c:	031b      	lsls	r3, r3, #12
 8002b2e:	4306      	orrs	r6, r0
 8002b30:	4219      	tst	r1, r3
 8002b32:	d008      	beq.n	8002b46 <__aeabi_dsub+0x22e>
 8002b34:	4660      	mov	r0, ip
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	4218      	tst	r0, r3
 8002b3a:	d104      	bne.n	8002b46 <__aeabi_dsub+0x22e>
 8002b3c:	4663      	mov	r3, ip
 8002b3e:	0001      	movs	r1, r0
 8002b40:	08d2      	lsrs	r2, r2, #3
 8002b42:	075e      	lsls	r6, r3, #29
 8002b44:	4316      	orrs	r6, r2
 8002b46:	00f3      	lsls	r3, r6, #3
 8002b48:	4699      	mov	r9, r3
 8002b4a:	00c9      	lsls	r1, r1, #3
 8002b4c:	0f72      	lsrs	r2, r6, #29
 8002b4e:	4d44      	ldr	r5, [pc, #272]	; (8002c60 <__aeabi_dsub+0x348>)
 8002b50:	4311      	orrs	r1, r2
 8002b52:	464b      	mov	r3, r9
 8002b54:	08de      	lsrs	r6, r3, #3
 8002b56:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <__aeabi_dsub+0x348>)
 8002b58:	074f      	lsls	r7, r1, #29
 8002b5a:	4337      	orrs	r7, r6
 8002b5c:	08ca      	lsrs	r2, r1, #3
 8002b5e:	429d      	cmp	r5, r3
 8002b60:	d100      	bne.n	8002b64 <__aeabi_dsub+0x24c>
 8002b62:	e06e      	b.n	8002c42 <__aeabi_dsub+0x32a>
 8002b64:	0312      	lsls	r2, r2, #12
 8002b66:	056d      	lsls	r5, r5, #21
 8002b68:	0b12      	lsrs	r2, r2, #12
 8002b6a:	0d6d      	lsrs	r5, r5, #21
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	0312      	lsls	r2, r2, #12
 8002b70:	0b13      	lsrs	r3, r2, #12
 8002b72:	0d0a      	lsrs	r2, r1, #20
 8002b74:	0512      	lsls	r2, r2, #20
 8002b76:	431a      	orrs	r2, r3
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <__aeabi_dsub+0x350>)
 8002b7a:	052d      	lsls	r5, r5, #20
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	432b      	orrs	r3, r5
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	07e4      	lsls	r4, r4, #31
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	4323      	orrs	r3, r4
 8002b88:	0038      	movs	r0, r7
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	bc3c      	pop	{r2, r3, r4, r5}
 8002b8e:	4690      	mov	r8, r2
 8002b90:	4699      	mov	r9, r3
 8002b92:	46a2      	mov	sl, r4
 8002b94:	46ab      	mov	fp, r5
 8002b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b98:	4663      	mov	r3, ip
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	d011      	beq.n	8002bc2 <__aeabi_dsub+0x2aa>
 8002b9e:	1e73      	subs	r3, r6, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d000      	beq.n	8002ba6 <__aeabi_dsub+0x28e>
 8002ba4:	e107      	b.n	8002db6 <__aeabi_dsub+0x49e>
 8002ba6:	1886      	adds	r6, r0, r2
 8002ba8:	4286      	cmp	r6, r0
 8002baa:	4180      	sbcs	r0, r0
 8002bac:	4461      	add	r1, ip
 8002bae:	4240      	negs	r0, r0
 8002bb0:	1809      	adds	r1, r1, r0
 8002bb2:	2501      	movs	r5, #1
 8002bb4:	020b      	lsls	r3, r1, #8
 8002bb6:	d537      	bpl.n	8002c28 <__aeabi_dsub+0x310>
 8002bb8:	2502      	movs	r5, #2
 8002bba:	e77b      	b.n	8002ab4 <__aeabi_dsub+0x19c>
 8002bbc:	003e      	movs	r6, r7
 8002bbe:	4661      	mov	r1, ip
 8002bc0:	4691      	mov	r9, r2
 8002bc2:	0035      	movs	r5, r6
 8002bc4:	e7c5      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002bc6:	465c      	mov	r4, fp
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	d000      	beq.n	8002bce <__aeabi_dsub+0x2b6>
 8002bcc:	e0e1      	b.n	8002d92 <__aeabi_dsub+0x47a>
 8002bce:	000b      	movs	r3, r1
 8002bd0:	4303      	orrs	r3, r0
 8002bd2:	d0f3      	beq.n	8002bbc <__aeabi_dsub+0x2a4>
 8002bd4:	1c73      	adds	r3, r6, #1
 8002bd6:	d100      	bne.n	8002bda <__aeabi_dsub+0x2c2>
 8002bd8:	e1ac      	b.n	8002f34 <__aeabi_dsub+0x61c>
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <__aeabi_dsub+0x348>)
 8002bdc:	429f      	cmp	r7, r3
 8002bde:	d100      	bne.n	8002be2 <__aeabi_dsub+0x2ca>
 8002be0:	e13a      	b.n	8002e58 <__aeabi_dsub+0x540>
 8002be2:	43f3      	mvns	r3, r6
 8002be4:	2b38      	cmp	r3, #56	; 0x38
 8002be6:	dd00      	ble.n	8002bea <__aeabi_dsub+0x2d2>
 8002be8:	e16f      	b.n	8002eca <__aeabi_dsub+0x5b2>
 8002bea:	2b1f      	cmp	r3, #31
 8002bec:	dd00      	ble.n	8002bf0 <__aeabi_dsub+0x2d8>
 8002bee:	e18c      	b.n	8002f0a <__aeabi_dsub+0x5f2>
 8002bf0:	2520      	movs	r5, #32
 8002bf2:	000e      	movs	r6, r1
 8002bf4:	1aed      	subs	r5, r5, r3
 8002bf6:	40ae      	lsls	r6, r5
 8002bf8:	46b0      	mov	r8, r6
 8002bfa:	0006      	movs	r6, r0
 8002bfc:	46aa      	mov	sl, r5
 8002bfe:	40de      	lsrs	r6, r3
 8002c00:	4645      	mov	r5, r8
 8002c02:	4335      	orrs	r5, r6
 8002c04:	002e      	movs	r6, r5
 8002c06:	4655      	mov	r5, sl
 8002c08:	40d9      	lsrs	r1, r3
 8002c0a:	40a8      	lsls	r0, r5
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	1e45      	subs	r5, r0, #1
 8002c10:	41a8      	sbcs	r0, r5
 8002c12:	1a5b      	subs	r3, r3, r1
 8002c14:	469c      	mov	ip, r3
 8002c16:	4330      	orrs	r0, r6
 8002c18:	1a16      	subs	r6, r2, r0
 8002c1a:	42b2      	cmp	r2, r6
 8002c1c:	4192      	sbcs	r2, r2
 8002c1e:	4663      	mov	r3, ip
 8002c20:	4252      	negs	r2, r2
 8002c22:	1a99      	subs	r1, r3, r2
 8002c24:	003d      	movs	r5, r7
 8002c26:	e6b4      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002c28:	2207      	movs	r2, #7
 8002c2a:	4032      	ands	r2, r6
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	d000      	beq.n	8002c32 <__aeabi_dsub+0x31a>
 8002c30:	e6e4      	b.n	80029fc <__aeabi_dsub+0xe4>
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <__aeabi_dsub+0x348>)
 8002c34:	08f6      	lsrs	r6, r6, #3
 8002c36:	074f      	lsls	r7, r1, #29
 8002c38:	4337      	orrs	r7, r6
 8002c3a:	08ca      	lsrs	r2, r1, #3
 8002c3c:	429d      	cmp	r5, r3
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x32a>
 8002c40:	e790      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002c42:	003b      	movs	r3, r7
 8002c44:	4313      	orrs	r3, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x332>
 8002c48:	e1a6      	b.n	8002f98 <__aeabi_dsub+0x680>
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	031b      	lsls	r3, r3, #12
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	0312      	lsls	r2, r2, #12
 8002c52:	0b12      	lsrs	r2, r2, #12
 8002c54:	4d02      	ldr	r5, [pc, #8]	; (8002c60 <__aeabi_dsub+0x348>)
 8002c56:	e789      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002c58:	0015      	movs	r5, r2
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2700      	movs	r7, #0
 8002c5e:	e785      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002c60:	000007ff 	.word	0x000007ff
 8002c64:	ff7fffff 	.word	0xff7fffff
 8002c68:	800fffff 	.word	0x800fffff
 8002c6c:	2e00      	cmp	r6, #0
 8002c6e:	d000      	beq.n	8002c72 <__aeabi_dsub+0x35a>
 8002c70:	e0c7      	b.n	8002e02 <__aeabi_dsub+0x4ea>
 8002c72:	1c6b      	adds	r3, r5, #1
 8002c74:	055e      	lsls	r6, r3, #21
 8002c76:	0d76      	lsrs	r6, r6, #21
 8002c78:	2e01      	cmp	r6, #1
 8002c7a:	dc00      	bgt.n	8002c7e <__aeabi_dsub+0x366>
 8002c7c:	e0f0      	b.n	8002e60 <__aeabi_dsub+0x548>
 8002c7e:	4dc8      	ldr	r5, [pc, #800]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002c80:	42ab      	cmp	r3, r5
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x36e>
 8002c84:	e0b9      	b.n	8002dfa <__aeabi_dsub+0x4e2>
 8002c86:	1885      	adds	r5, r0, r2
 8002c88:	000a      	movs	r2, r1
 8002c8a:	4285      	cmp	r5, r0
 8002c8c:	4189      	sbcs	r1, r1
 8002c8e:	4462      	add	r2, ip
 8002c90:	4249      	negs	r1, r1
 8002c92:	1851      	adds	r1, r2, r1
 8002c94:	2207      	movs	r2, #7
 8002c96:	07ce      	lsls	r6, r1, #31
 8002c98:	086d      	lsrs	r5, r5, #1
 8002c9a:	432e      	orrs	r6, r5
 8002c9c:	0849      	lsrs	r1, r1, #1
 8002c9e:	4032      	ands	r2, r6
 8002ca0:	001d      	movs	r5, r3
 8002ca2:	e6a9      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002ca4:	49bf      	ldr	r1, [pc, #764]	; (8002fa4 <__aeabi_dsub+0x68c>)
 8002ca6:	1aed      	subs	r5, r5, r3
 8002ca8:	4011      	ands	r1, r2
 8002caa:	2207      	movs	r2, #7
 8002cac:	4032      	ands	r2, r6
 8002cae:	e6a3      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002cb0:	0032      	movs	r2, r6
 8002cb2:	3828      	subs	r0, #40	; 0x28
 8002cb4:	4082      	lsls	r2, r0
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	e686      	b.n	80029c8 <__aeabi_dsub+0xb0>
 8002cba:	0030      	movs	r0, r6
 8002cbc:	f000 fb08 	bl	80032d0 <__clzsi2>
 8002cc0:	3020      	adds	r0, #32
 8002cc2:	e673      	b.n	80029ac <__aeabi_dsub+0x94>
 8002cc4:	4663      	mov	r3, ip
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	4193      	sbcs	r3, r2
 8002ccc:	1ac6      	subs	r6, r0, r3
 8002cce:	42b0      	cmp	r0, r6
 8002cd0:	4180      	sbcs	r0, r0
 8002cd2:	4240      	negs	r0, r0
 8002cd4:	1a09      	subs	r1, r1, r0
 8002cd6:	e65c      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002cd8:	000e      	movs	r6, r1
 8002cda:	4667      	mov	r7, ip
 8002cdc:	4306      	orrs	r6, r0
 8002cde:	4317      	orrs	r7, r2
 8002ce0:	2d00      	cmp	r5, #0
 8002ce2:	d15e      	bne.n	8002da2 <__aeabi_dsub+0x48a>
 8002ce4:	2e00      	cmp	r6, #0
 8002ce6:	d000      	beq.n	8002cea <__aeabi_dsub+0x3d2>
 8002ce8:	e0f3      	b.n	8002ed2 <__aeabi_dsub+0x5ba>
 8002cea:	2f00      	cmp	r7, #0
 8002cec:	d100      	bne.n	8002cf0 <__aeabi_dsub+0x3d8>
 8002cee:	e11e      	b.n	8002f2e <__aeabi_dsub+0x616>
 8002cf0:	465c      	mov	r4, fp
 8002cf2:	4661      	mov	r1, ip
 8002cf4:	4691      	mov	r9, r2
 8002cf6:	e72c      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002cf8:	4fa9      	ldr	r7, [pc, #676]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002cfa:	42be      	cmp	r6, r7
 8002cfc:	d07b      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002cfe:	001e      	movs	r6, r3
 8002d00:	e6f1      	b.n	8002ae6 <__aeabi_dsub+0x1ce>
 8002d02:	0010      	movs	r0, r2
 8002d04:	3d1f      	subs	r5, #31
 8002d06:	40e8      	lsrs	r0, r5
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d003      	beq.n	8002d14 <__aeabi_dsub+0x3fc>
 8002d0c:	2140      	movs	r1, #64	; 0x40
 8002d0e:	1acb      	subs	r3, r1, r3
 8002d10:	409a      	lsls	r2, r3
 8002d12:	4316      	orrs	r6, r2
 8002d14:	1e73      	subs	r3, r6, #1
 8002d16:	419e      	sbcs	r6, r3
 8002d18:	2207      	movs	r2, #7
 8002d1a:	4306      	orrs	r6, r0
 8002d1c:	4032      	ands	r2, r6
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2500      	movs	r5, #0
 8002d22:	e783      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002d24:	1a16      	subs	r6, r2, r0
 8002d26:	4663      	mov	r3, ip
 8002d28:	42b2      	cmp	r2, r6
 8002d2a:	4180      	sbcs	r0, r0
 8002d2c:	1a59      	subs	r1, r3, r1
 8002d2e:	4240      	negs	r0, r0
 8002d30:	1a0b      	subs	r3, r1, r0
 8002d32:	4698      	mov	r8, r3
 8002d34:	465c      	mov	r4, fp
 8002d36:	e632      	b.n	800299e <__aeabi_dsub+0x86>
 8002d38:	2e1f      	cmp	r6, #31
 8002d3a:	dd00      	ble.n	8002d3e <__aeabi_dsub+0x426>
 8002d3c:	e0ab      	b.n	8002e96 <__aeabi_dsub+0x57e>
 8002d3e:	2720      	movs	r7, #32
 8002d40:	1bbb      	subs	r3, r7, r6
 8002d42:	469a      	mov	sl, r3
 8002d44:	4663      	mov	r3, ip
 8002d46:	4657      	mov	r7, sl
 8002d48:	40bb      	lsls	r3, r7
 8002d4a:	4699      	mov	r9, r3
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	464f      	mov	r7, r9
 8002d50:	40f3      	lsrs	r3, r6
 8002d52:	431f      	orrs	r7, r3
 8002d54:	003b      	movs	r3, r7
 8002d56:	4657      	mov	r7, sl
 8002d58:	40ba      	lsls	r2, r7
 8002d5a:	1e57      	subs	r7, r2, #1
 8002d5c:	41ba      	sbcs	r2, r7
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	4662      	mov	r2, ip
 8002d62:	40f2      	lsrs	r2, r6
 8002d64:	1889      	adds	r1, r1, r2
 8002d66:	e698      	b.n	8002a9a <__aeabi_dsub+0x182>
 8002d68:	2720      	movs	r7, #32
 8002d6a:	1bbb      	subs	r3, r7, r6
 8002d6c:	469a      	mov	sl, r3
 8002d6e:	4663      	mov	r3, ip
 8002d70:	4657      	mov	r7, sl
 8002d72:	40bb      	lsls	r3, r7
 8002d74:	4699      	mov	r9, r3
 8002d76:	0013      	movs	r3, r2
 8002d78:	464f      	mov	r7, r9
 8002d7a:	40f3      	lsrs	r3, r6
 8002d7c:	431f      	orrs	r7, r3
 8002d7e:	003b      	movs	r3, r7
 8002d80:	4657      	mov	r7, sl
 8002d82:	40ba      	lsls	r2, r7
 8002d84:	1e57      	subs	r7, r2, #1
 8002d86:	41ba      	sbcs	r2, r7
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	4662      	mov	r2, ip
 8002d8c:	40f2      	lsrs	r2, r6
 8002d8e:	1a89      	subs	r1, r1, r2
 8002d90:	e79c      	b.n	8002ccc <__aeabi_dsub+0x3b4>
 8002d92:	4b83      	ldr	r3, [pc, #524]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002d94:	429f      	cmp	r7, r3
 8002d96:	d05f      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002d98:	2580      	movs	r5, #128	; 0x80
 8002d9a:	042d      	lsls	r5, r5, #16
 8002d9c:	4273      	negs	r3, r6
 8002d9e:	4329      	orrs	r1, r5
 8002da0:	e720      	b.n	8002be4 <__aeabi_dsub+0x2cc>
 8002da2:	2e00      	cmp	r6, #0
 8002da4:	d10c      	bne.n	8002dc0 <__aeabi_dsub+0x4a8>
 8002da6:	2f00      	cmp	r7, #0
 8002da8:	d100      	bne.n	8002dac <__aeabi_dsub+0x494>
 8002daa:	e0d0      	b.n	8002f4e <__aeabi_dsub+0x636>
 8002dac:	465c      	mov	r4, fp
 8002dae:	4661      	mov	r1, ip
 8002db0:	4691      	mov	r9, r2
 8002db2:	4d7b      	ldr	r5, [pc, #492]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002db4:	e6cd      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002db6:	4f7a      	ldr	r7, [pc, #488]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002db8:	42be      	cmp	r6, r7
 8002dba:	d01c      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002dbc:	001e      	movs	r6, r3
 8002dbe:	e665      	b.n	8002a8c <__aeabi_dsub+0x174>
 8002dc0:	2f00      	cmp	r7, #0
 8002dc2:	d018      	beq.n	8002df6 <__aeabi_dsub+0x4de>
 8002dc4:	08c0      	lsrs	r0, r0, #3
 8002dc6:	074e      	lsls	r6, r1, #29
 8002dc8:	4306      	orrs	r6, r0
 8002dca:	2080      	movs	r0, #128	; 0x80
 8002dcc:	08c9      	lsrs	r1, r1, #3
 8002dce:	0300      	lsls	r0, r0, #12
 8002dd0:	4201      	tst	r1, r0
 8002dd2:	d008      	beq.n	8002de6 <__aeabi_dsub+0x4ce>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	08dc      	lsrs	r4, r3, #3
 8002dd8:	4204      	tst	r4, r0
 8002dda:	d104      	bne.n	8002de6 <__aeabi_dsub+0x4ce>
 8002ddc:	0021      	movs	r1, r4
 8002dde:	46da      	mov	sl, fp
 8002de0:	08d2      	lsrs	r2, r2, #3
 8002de2:	075e      	lsls	r6, r3, #29
 8002de4:	4316      	orrs	r6, r2
 8002de6:	00f3      	lsls	r3, r6, #3
 8002de8:	4699      	mov	r9, r3
 8002dea:	2401      	movs	r4, #1
 8002dec:	4653      	mov	r3, sl
 8002dee:	00c9      	lsls	r1, r1, #3
 8002df0:	0f72      	lsrs	r2, r6, #29
 8002df2:	4311      	orrs	r1, r2
 8002df4:	401c      	ands	r4, r3
 8002df6:	4d6a      	ldr	r5, [pc, #424]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002df8:	e6ab      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002dfa:	001d      	movs	r5, r3
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2700      	movs	r7, #0
 8002e00:	e6b4      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002e02:	2d00      	cmp	r5, #0
 8002e04:	d159      	bne.n	8002eba <__aeabi_dsub+0x5a2>
 8002e06:	000b      	movs	r3, r1
 8002e08:	4303      	orrs	r3, r0
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x4f6>
 8002e0c:	e6d6      	b.n	8002bbc <__aeabi_dsub+0x2a4>
 8002e0e:	1c73      	adds	r3, r6, #1
 8002e10:	d100      	bne.n	8002e14 <__aeabi_dsub+0x4fc>
 8002e12:	e0b2      	b.n	8002f7a <__aeabi_dsub+0x662>
 8002e14:	4b62      	ldr	r3, [pc, #392]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002e16:	429f      	cmp	r7, r3
 8002e18:	d01e      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002e1a:	43f3      	mvns	r3, r6
 8002e1c:	2b38      	cmp	r3, #56	; 0x38
 8002e1e:	dc6f      	bgt.n	8002f00 <__aeabi_dsub+0x5e8>
 8002e20:	2b1f      	cmp	r3, #31
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x50e>
 8002e24:	e097      	b.n	8002f56 <__aeabi_dsub+0x63e>
 8002e26:	2520      	movs	r5, #32
 8002e28:	000e      	movs	r6, r1
 8002e2a:	1aed      	subs	r5, r5, r3
 8002e2c:	40ae      	lsls	r6, r5
 8002e2e:	46b0      	mov	r8, r6
 8002e30:	0006      	movs	r6, r0
 8002e32:	46aa      	mov	sl, r5
 8002e34:	40de      	lsrs	r6, r3
 8002e36:	4645      	mov	r5, r8
 8002e38:	4335      	orrs	r5, r6
 8002e3a:	002e      	movs	r6, r5
 8002e3c:	4655      	mov	r5, sl
 8002e3e:	40a8      	lsls	r0, r5
 8002e40:	40d9      	lsrs	r1, r3
 8002e42:	1e45      	subs	r5, r0, #1
 8002e44:	41a8      	sbcs	r0, r5
 8002e46:	448c      	add	ip, r1
 8002e48:	4306      	orrs	r6, r0
 8002e4a:	18b6      	adds	r6, r6, r2
 8002e4c:	4296      	cmp	r6, r2
 8002e4e:	4192      	sbcs	r2, r2
 8002e50:	4251      	negs	r1, r2
 8002e52:	4461      	add	r1, ip
 8002e54:	003d      	movs	r5, r7
 8002e56:	e625      	b.n	8002aa4 <__aeabi_dsub+0x18c>
 8002e58:	003d      	movs	r5, r7
 8002e5a:	4661      	mov	r1, ip
 8002e5c:	4691      	mov	r9, r2
 8002e5e:	e678      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e60:	000b      	movs	r3, r1
 8002e62:	4303      	orrs	r3, r0
 8002e64:	2d00      	cmp	r5, #0
 8002e66:	d000      	beq.n	8002e6a <__aeabi_dsub+0x552>
 8002e68:	e655      	b.n	8002b16 <__aeabi_dsub+0x1fe>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f5      	beq.n	8002e5a <__aeabi_dsub+0x542>
 8002e6e:	4663      	mov	r3, ip
 8002e70:	4313      	orrs	r3, r2
 8002e72:	d100      	bne.n	8002e76 <__aeabi_dsub+0x55e>
 8002e74:	e66d      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e76:	1886      	adds	r6, r0, r2
 8002e78:	4286      	cmp	r6, r0
 8002e7a:	4180      	sbcs	r0, r0
 8002e7c:	4461      	add	r1, ip
 8002e7e:	4240      	negs	r0, r0
 8002e80:	1809      	adds	r1, r1, r0
 8002e82:	2200      	movs	r2, #0
 8002e84:	020b      	lsls	r3, r1, #8
 8002e86:	d400      	bmi.n	8002e8a <__aeabi_dsub+0x572>
 8002e88:	e6d0      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <__aeabi_dsub+0x68c>)
 8002e8c:	3501      	adds	r5, #1
 8002e8e:	4019      	ands	r1, r3
 8002e90:	e5b2      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002e92:	46b1      	mov	r9, r6
 8002e94:	e65d      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002e96:	0033      	movs	r3, r6
 8002e98:	4667      	mov	r7, ip
 8002e9a:	3b20      	subs	r3, #32
 8002e9c:	40df      	lsrs	r7, r3
 8002e9e:	003b      	movs	r3, r7
 8002ea0:	2e20      	cmp	r6, #32
 8002ea2:	d005      	beq.n	8002eb0 <__aeabi_dsub+0x598>
 8002ea4:	2740      	movs	r7, #64	; 0x40
 8002ea6:	1bbf      	subs	r7, r7, r6
 8002ea8:	4666      	mov	r6, ip
 8002eaa:	40be      	lsls	r6, r7
 8002eac:	4332      	orrs	r2, r6
 8002eae:	4690      	mov	r8, r2
 8002eb0:	4646      	mov	r6, r8
 8002eb2:	1e72      	subs	r2, r6, #1
 8002eb4:	4196      	sbcs	r6, r2
 8002eb6:	4333      	orrs	r3, r6
 8002eb8:	e5ef      	b.n	8002a9a <__aeabi_dsub+0x182>
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002ebc:	429f      	cmp	r7, r3
 8002ebe:	d0cb      	beq.n	8002e58 <__aeabi_dsub+0x540>
 8002ec0:	2580      	movs	r5, #128	; 0x80
 8002ec2:	042d      	lsls	r5, r5, #16
 8002ec4:	4273      	negs	r3, r6
 8002ec6:	4329      	orrs	r1, r5
 8002ec8:	e7a8      	b.n	8002e1c <__aeabi_dsub+0x504>
 8002eca:	4308      	orrs	r0, r1
 8002ecc:	1e41      	subs	r1, r0, #1
 8002ece:	4188      	sbcs	r0, r1
 8002ed0:	e6a2      	b.n	8002c18 <__aeabi_dsub+0x300>
 8002ed2:	2f00      	cmp	r7, #0
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x5c0>
 8002ed6:	e63c      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a86      	subs	r6, r0, r2
 8002edc:	1acf      	subs	r7, r1, r3
 8002ede:	42b0      	cmp	r0, r6
 8002ee0:	419b      	sbcs	r3, r3
 8002ee2:	425b      	negs	r3, r3
 8002ee4:	1afb      	subs	r3, r7, r3
 8002ee6:	4698      	mov	r8, r3
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	d54e      	bpl.n	8002f8a <__aeabi_dsub+0x672>
 8002eec:	1a16      	subs	r6, r2, r0
 8002eee:	4663      	mov	r3, ip
 8002ef0:	42b2      	cmp	r2, r6
 8002ef2:	4192      	sbcs	r2, r2
 8002ef4:	1a59      	subs	r1, r3, r1
 8002ef6:	4252      	negs	r2, r2
 8002ef8:	1a89      	subs	r1, r1, r2
 8002efa:	465c      	mov	r4, fp
 8002efc:	2200      	movs	r2, #0
 8002efe:	e57b      	b.n	80029f8 <__aeabi_dsub+0xe0>
 8002f00:	4301      	orrs	r1, r0
 8002f02:	000e      	movs	r6, r1
 8002f04:	1e71      	subs	r1, r6, #1
 8002f06:	418e      	sbcs	r6, r1
 8002f08:	e79f      	b.n	8002e4a <__aeabi_dsub+0x532>
 8002f0a:	001d      	movs	r5, r3
 8002f0c:	000e      	movs	r6, r1
 8002f0e:	3d20      	subs	r5, #32
 8002f10:	40ee      	lsrs	r6, r5
 8002f12:	46b0      	mov	r8, r6
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d004      	beq.n	8002f22 <__aeabi_dsub+0x60a>
 8002f18:	2540      	movs	r5, #64	; 0x40
 8002f1a:	1aeb      	subs	r3, r5, r3
 8002f1c:	4099      	lsls	r1, r3
 8002f1e:	4308      	orrs	r0, r1
 8002f20:	4681      	mov	r9, r0
 8002f22:	4648      	mov	r0, r9
 8002f24:	4643      	mov	r3, r8
 8002f26:	1e41      	subs	r1, r0, #1
 8002f28:	4188      	sbcs	r0, r1
 8002f2a:	4318      	orrs	r0, r3
 8002f2c:	e674      	b.n	8002c18 <__aeabi_dsub+0x300>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2400      	movs	r4, #0
 8002f32:	e617      	b.n	8002b64 <__aeabi_dsub+0x24c>
 8002f34:	1a16      	subs	r6, r2, r0
 8002f36:	4663      	mov	r3, ip
 8002f38:	42b2      	cmp	r2, r6
 8002f3a:	4192      	sbcs	r2, r2
 8002f3c:	1a59      	subs	r1, r3, r1
 8002f3e:	4252      	negs	r2, r2
 8002f40:	1a89      	subs	r1, r1, r2
 8002f42:	003d      	movs	r5, r7
 8002f44:	e525      	b.n	8002992 <__aeabi_dsub+0x7a>
 8002f46:	4661      	mov	r1, ip
 8002f48:	4691      	mov	r9, r2
 8002f4a:	4d15      	ldr	r5, [pc, #84]	; (8002fa0 <__aeabi_dsub+0x688>)
 8002f4c:	e601      	b.n	8002b52 <__aeabi_dsub+0x23a>
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	2400      	movs	r4, #0
 8002f52:	0312      	lsls	r2, r2, #12
 8002f54:	e679      	b.n	8002c4a <__aeabi_dsub+0x332>
 8002f56:	001d      	movs	r5, r3
 8002f58:	000e      	movs	r6, r1
 8002f5a:	3d20      	subs	r5, #32
 8002f5c:	40ee      	lsrs	r6, r5
 8002f5e:	46b0      	mov	r8, r6
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d004      	beq.n	8002f6e <__aeabi_dsub+0x656>
 8002f64:	2540      	movs	r5, #64	; 0x40
 8002f66:	1aeb      	subs	r3, r5, r3
 8002f68:	4099      	lsls	r1, r3
 8002f6a:	4308      	orrs	r0, r1
 8002f6c:	4681      	mov	r9, r0
 8002f6e:	464e      	mov	r6, r9
 8002f70:	4643      	mov	r3, r8
 8002f72:	1e71      	subs	r1, r6, #1
 8002f74:	418e      	sbcs	r6, r1
 8002f76:	431e      	orrs	r6, r3
 8002f78:	e767      	b.n	8002e4a <__aeabi_dsub+0x532>
 8002f7a:	1886      	adds	r6, r0, r2
 8002f7c:	4296      	cmp	r6, r2
 8002f7e:	419b      	sbcs	r3, r3
 8002f80:	4461      	add	r1, ip
 8002f82:	425b      	negs	r3, r3
 8002f84:	18c9      	adds	r1, r1, r3
 8002f86:	003d      	movs	r5, r7
 8002f88:	e58c      	b.n	8002aa4 <__aeabi_dsub+0x18c>
 8002f8a:	4647      	mov	r7, r8
 8002f8c:	4337      	orrs	r7, r6
 8002f8e:	d0ce      	beq.n	8002f2e <__aeabi_dsub+0x616>
 8002f90:	2207      	movs	r2, #7
 8002f92:	4641      	mov	r1, r8
 8002f94:	4032      	ands	r2, r6
 8002f96:	e649      	b.n	8002c2c <__aeabi_dsub+0x314>
 8002f98:	2700      	movs	r7, #0
 8002f9a:	003a      	movs	r2, r7
 8002f9c:	e5e6      	b.n	8002b6c <__aeabi_dsub+0x254>
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	000007ff 	.word	0x000007ff
 8002fa4:	ff7fffff 	.word	0xff7fffff

08002fa8 <__aeabi_dcmpun>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4e0c      	ldr	r6, [pc, #48]	; (8002fdc <__aeabi_dcmpun+0x34>)
 8002fac:	030d      	lsls	r5, r1, #12
 8002fae:	031c      	lsls	r4, r3, #12
 8002fb0:	0049      	lsls	r1, r1, #1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	0b2d      	lsrs	r5, r5, #12
 8002fb6:	0d49      	lsrs	r1, r1, #21
 8002fb8:	0b24      	lsrs	r4, r4, #12
 8002fba:	0d5b      	lsrs	r3, r3, #21
 8002fbc:	42b1      	cmp	r1, r6
 8002fbe:	d008      	beq.n	8002fd2 <__aeabi_dcmpun+0x2a>
 8002fc0:	4906      	ldr	r1, [pc, #24]	; (8002fdc <__aeabi_dcmpun+0x34>)
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	428b      	cmp	r3, r1
 8002fc6:	d103      	bne.n	8002fd0 <__aeabi_dcmpun+0x28>
 8002fc8:	4314      	orrs	r4, r2
 8002fca:	0020      	movs	r0, r4
 8002fcc:	1e44      	subs	r4, r0, #1
 8002fce:	41a0      	sbcs	r0, r4
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	4305      	orrs	r5, r0
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	2d00      	cmp	r5, #0
 8002fd8:	d1fa      	bne.n	8002fd0 <__aeabi_dcmpun+0x28>
 8002fda:	e7f1      	b.n	8002fc0 <__aeabi_dcmpun+0x18>
 8002fdc:	000007ff 	.word	0x000007ff

08002fe0 <__aeabi_d2iz>:
 8002fe0:	b530      	push	{r4, r5, lr}
 8002fe2:	4d14      	ldr	r5, [pc, #80]	; (8003034 <__aeabi_d2iz+0x54>)
 8002fe4:	030a      	lsls	r2, r1, #12
 8002fe6:	004b      	lsls	r3, r1, #1
 8002fe8:	0b12      	lsrs	r2, r2, #12
 8002fea:	0d5b      	lsrs	r3, r3, #21
 8002fec:	0fc9      	lsrs	r1, r1, #31
 8002fee:	2400      	movs	r4, #0
 8002ff0:	42ab      	cmp	r3, r5
 8002ff2:	dd11      	ble.n	8003018 <__aeabi_d2iz+0x38>
 8002ff4:	4c10      	ldr	r4, [pc, #64]	; (8003038 <__aeabi_d2iz+0x58>)
 8002ff6:	42a3      	cmp	r3, r4
 8002ff8:	dc10      	bgt.n	800301c <__aeabi_d2iz+0x3c>
 8002ffa:	2480      	movs	r4, #128	; 0x80
 8002ffc:	0364      	lsls	r4, r4, #13
 8002ffe:	4322      	orrs	r2, r4
 8003000:	4c0e      	ldr	r4, [pc, #56]	; (800303c <__aeabi_d2iz+0x5c>)
 8003002:	1ae4      	subs	r4, r4, r3
 8003004:	2c1f      	cmp	r4, #31
 8003006:	dd0c      	ble.n	8003022 <__aeabi_d2iz+0x42>
 8003008:	480d      	ldr	r0, [pc, #52]	; (8003040 <__aeabi_d2iz+0x60>)
 800300a:	1ac3      	subs	r3, r0, r3
 800300c:	40da      	lsrs	r2, r3
 800300e:	0013      	movs	r3, r2
 8003010:	425c      	negs	r4, r3
 8003012:	2900      	cmp	r1, #0
 8003014:	d100      	bne.n	8003018 <__aeabi_d2iz+0x38>
 8003016:	001c      	movs	r4, r3
 8003018:	0020      	movs	r0, r4
 800301a:	bd30      	pop	{r4, r5, pc}
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <__aeabi_d2iz+0x64>)
 800301e:	18cc      	adds	r4, r1, r3
 8003020:	e7fa      	b.n	8003018 <__aeabi_d2iz+0x38>
 8003022:	4d09      	ldr	r5, [pc, #36]	; (8003048 <__aeabi_d2iz+0x68>)
 8003024:	40e0      	lsrs	r0, r4
 8003026:	46ac      	mov	ip, r5
 8003028:	4463      	add	r3, ip
 800302a:	409a      	lsls	r2, r3
 800302c:	0013      	movs	r3, r2
 800302e:	4303      	orrs	r3, r0
 8003030:	e7ee      	b.n	8003010 <__aeabi_d2iz+0x30>
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	000003fe 	.word	0x000003fe
 8003038:	0000041d 	.word	0x0000041d
 800303c:	00000433 	.word	0x00000433
 8003040:	00000413 	.word	0x00000413
 8003044:	7fffffff 	.word	0x7fffffff
 8003048:	fffffbed 	.word	0xfffffbed

0800304c <__aeabi_i2d>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	2800      	cmp	r0, #0
 8003050:	d02d      	beq.n	80030ae <__aeabi_i2d+0x62>
 8003052:	17c3      	asrs	r3, r0, #31
 8003054:	18c5      	adds	r5, r0, r3
 8003056:	405d      	eors	r5, r3
 8003058:	0fc4      	lsrs	r4, r0, #31
 800305a:	0028      	movs	r0, r5
 800305c:	f000 f938 	bl	80032d0 <__clzsi2>
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <__aeabi_i2d+0x6c>)
 8003062:	1a1b      	subs	r3, r3, r0
 8003064:	055b      	lsls	r3, r3, #21
 8003066:	0d5b      	lsrs	r3, r3, #21
 8003068:	280a      	cmp	r0, #10
 800306a:	dd15      	ble.n	8003098 <__aeabi_i2d+0x4c>
 800306c:	380b      	subs	r0, #11
 800306e:	4085      	lsls	r5, r0
 8003070:	2200      	movs	r2, #0
 8003072:	032d      	lsls	r5, r5, #12
 8003074:	0b2d      	lsrs	r5, r5, #12
 8003076:	2100      	movs	r1, #0
 8003078:	0010      	movs	r0, r2
 800307a:	032d      	lsls	r5, r5, #12
 800307c:	0d0a      	lsrs	r2, r1, #20
 800307e:	0b2d      	lsrs	r5, r5, #12
 8003080:	0512      	lsls	r2, r2, #20
 8003082:	432a      	orrs	r2, r5
 8003084:	4d0d      	ldr	r5, [pc, #52]	; (80030bc <__aeabi_i2d+0x70>)
 8003086:	051b      	lsls	r3, r3, #20
 8003088:	402a      	ands	r2, r5
 800308a:	4313      	orrs	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	07e4      	lsls	r4, r4, #31
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	4323      	orrs	r3, r4
 8003094:	0019      	movs	r1, r3
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	0002      	movs	r2, r0
 800309a:	0029      	movs	r1, r5
 800309c:	3215      	adds	r2, #21
 800309e:	4091      	lsls	r1, r2
 80030a0:	000a      	movs	r2, r1
 80030a2:	210b      	movs	r1, #11
 80030a4:	1a08      	subs	r0, r1, r0
 80030a6:	40c5      	lsrs	r5, r0
 80030a8:	032d      	lsls	r5, r5, #12
 80030aa:	0b2d      	lsrs	r5, r5, #12
 80030ac:	e7e3      	b.n	8003076 <__aeabi_i2d+0x2a>
 80030ae:	2400      	movs	r4, #0
 80030b0:	2300      	movs	r3, #0
 80030b2:	2500      	movs	r5, #0
 80030b4:	2200      	movs	r2, #0
 80030b6:	e7de      	b.n	8003076 <__aeabi_i2d+0x2a>
 80030b8:	0000041e 	.word	0x0000041e
 80030bc:	800fffff 	.word	0x800fffff

080030c0 <__aeabi_ui2d>:
 80030c0:	b510      	push	{r4, lr}
 80030c2:	1e04      	subs	r4, r0, #0
 80030c4:	d025      	beq.n	8003112 <__aeabi_ui2d+0x52>
 80030c6:	f000 f903 	bl	80032d0 <__clzsi2>
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <__aeabi_ui2d+0x5c>)
 80030cc:	1a1b      	subs	r3, r3, r0
 80030ce:	055b      	lsls	r3, r3, #21
 80030d0:	0d5b      	lsrs	r3, r3, #21
 80030d2:	280a      	cmp	r0, #10
 80030d4:	dd12      	ble.n	80030fc <__aeabi_ui2d+0x3c>
 80030d6:	380b      	subs	r0, #11
 80030d8:	4084      	lsls	r4, r0
 80030da:	2200      	movs	r2, #0
 80030dc:	0324      	lsls	r4, r4, #12
 80030de:	0b24      	lsrs	r4, r4, #12
 80030e0:	2100      	movs	r1, #0
 80030e2:	0010      	movs	r0, r2
 80030e4:	0324      	lsls	r4, r4, #12
 80030e6:	0d0a      	lsrs	r2, r1, #20
 80030e8:	0b24      	lsrs	r4, r4, #12
 80030ea:	0512      	lsls	r2, r2, #20
 80030ec:	4322      	orrs	r2, r4
 80030ee:	4c0c      	ldr	r4, [pc, #48]	; (8003120 <__aeabi_ui2d+0x60>)
 80030f0:	051b      	lsls	r3, r3, #20
 80030f2:	4022      	ands	r2, r4
 80030f4:	4313      	orrs	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	0859      	lsrs	r1, r3, #1
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	0002      	movs	r2, r0
 80030fe:	0021      	movs	r1, r4
 8003100:	3215      	adds	r2, #21
 8003102:	4091      	lsls	r1, r2
 8003104:	000a      	movs	r2, r1
 8003106:	210b      	movs	r1, #11
 8003108:	1a08      	subs	r0, r1, r0
 800310a:	40c4      	lsrs	r4, r0
 800310c:	0324      	lsls	r4, r4, #12
 800310e:	0b24      	lsrs	r4, r4, #12
 8003110:	e7e6      	b.n	80030e0 <__aeabi_ui2d+0x20>
 8003112:	2300      	movs	r3, #0
 8003114:	2400      	movs	r4, #0
 8003116:	2200      	movs	r2, #0
 8003118:	e7e2      	b.n	80030e0 <__aeabi_ui2d+0x20>
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	0000041e 	.word	0x0000041e
 8003120:	800fffff 	.word	0x800fffff

08003124 <__aeabi_f2d>:
 8003124:	0041      	lsls	r1, r0, #1
 8003126:	0e09      	lsrs	r1, r1, #24
 8003128:	1c4b      	adds	r3, r1, #1
 800312a:	b570      	push	{r4, r5, r6, lr}
 800312c:	b2db      	uxtb	r3, r3
 800312e:	0246      	lsls	r6, r0, #9
 8003130:	0a75      	lsrs	r5, r6, #9
 8003132:	0fc4      	lsrs	r4, r0, #31
 8003134:	2b01      	cmp	r3, #1
 8003136:	dd14      	ble.n	8003162 <__aeabi_f2d+0x3e>
 8003138:	23e0      	movs	r3, #224	; 0xe0
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	076d      	lsls	r5, r5, #29
 800313e:	0b36      	lsrs	r6, r6, #12
 8003140:	18cb      	adds	r3, r1, r3
 8003142:	2100      	movs	r1, #0
 8003144:	0d0a      	lsrs	r2, r1, #20
 8003146:	0028      	movs	r0, r5
 8003148:	0512      	lsls	r2, r2, #20
 800314a:	4d1c      	ldr	r5, [pc, #112]	; (80031bc <__aeabi_f2d+0x98>)
 800314c:	4332      	orrs	r2, r6
 800314e:	055b      	lsls	r3, r3, #21
 8003150:	402a      	ands	r2, r5
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	4313      	orrs	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	07e4      	lsls	r4, r4, #31
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	4323      	orrs	r3, r4
 800315e:	0019      	movs	r1, r3
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	2900      	cmp	r1, #0
 8003164:	d114      	bne.n	8003190 <__aeabi_f2d+0x6c>
 8003166:	2d00      	cmp	r5, #0
 8003168:	d01e      	beq.n	80031a8 <__aeabi_f2d+0x84>
 800316a:	0028      	movs	r0, r5
 800316c:	f000 f8b0 	bl	80032d0 <__clzsi2>
 8003170:	280a      	cmp	r0, #10
 8003172:	dc1c      	bgt.n	80031ae <__aeabi_f2d+0x8a>
 8003174:	230b      	movs	r3, #11
 8003176:	002a      	movs	r2, r5
 8003178:	1a1b      	subs	r3, r3, r0
 800317a:	40da      	lsrs	r2, r3
 800317c:	0003      	movs	r3, r0
 800317e:	3315      	adds	r3, #21
 8003180:	409d      	lsls	r5, r3
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <__aeabi_f2d+0x9c>)
 8003184:	0312      	lsls	r2, r2, #12
 8003186:	1a1b      	subs	r3, r3, r0
 8003188:	055b      	lsls	r3, r3, #21
 800318a:	0b16      	lsrs	r6, r2, #12
 800318c:	0d5b      	lsrs	r3, r3, #21
 800318e:	e7d8      	b.n	8003142 <__aeabi_f2d+0x1e>
 8003190:	2d00      	cmp	r5, #0
 8003192:	d006      	beq.n	80031a2 <__aeabi_f2d+0x7e>
 8003194:	0b32      	lsrs	r2, r6, #12
 8003196:	2680      	movs	r6, #128	; 0x80
 8003198:	0336      	lsls	r6, r6, #12
 800319a:	076d      	lsls	r5, r5, #29
 800319c:	4316      	orrs	r6, r2
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <__aeabi_f2d+0xa0>)
 80031a0:	e7cf      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <__aeabi_f2d+0xa0>)
 80031a4:	2600      	movs	r6, #0
 80031a6:	e7cc      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2600      	movs	r6, #0
 80031ac:	e7c9      	b.n	8003142 <__aeabi_f2d+0x1e>
 80031ae:	0003      	movs	r3, r0
 80031b0:	002a      	movs	r2, r5
 80031b2:	3b0b      	subs	r3, #11
 80031b4:	409a      	lsls	r2, r3
 80031b6:	2500      	movs	r5, #0
 80031b8:	e7e3      	b.n	8003182 <__aeabi_f2d+0x5e>
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	800fffff 	.word	0x800fffff
 80031c0:	00000389 	.word	0x00000389
 80031c4:	000007ff 	.word	0x000007ff

080031c8 <__aeabi_d2f>:
 80031c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ca:	004c      	lsls	r4, r1, #1
 80031cc:	0d64      	lsrs	r4, r4, #21
 80031ce:	030b      	lsls	r3, r1, #12
 80031d0:	1c62      	adds	r2, r4, #1
 80031d2:	0a5b      	lsrs	r3, r3, #9
 80031d4:	0f46      	lsrs	r6, r0, #29
 80031d6:	0552      	lsls	r2, r2, #21
 80031d8:	0fc9      	lsrs	r1, r1, #31
 80031da:	431e      	orrs	r6, r3
 80031dc:	00c5      	lsls	r5, r0, #3
 80031de:	0d52      	lsrs	r2, r2, #21
 80031e0:	2a01      	cmp	r2, #1
 80031e2:	dd29      	ble.n	8003238 <__aeabi_d2f+0x70>
 80031e4:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <__aeabi_d2f+0xfc>)
 80031e6:	18e7      	adds	r7, r4, r3
 80031e8:	2ffe      	cmp	r7, #254	; 0xfe
 80031ea:	dc1c      	bgt.n	8003226 <__aeabi_d2f+0x5e>
 80031ec:	2f00      	cmp	r7, #0
 80031ee:	dd3b      	ble.n	8003268 <__aeabi_d2f+0xa0>
 80031f0:	0180      	lsls	r0, r0, #6
 80031f2:	1e43      	subs	r3, r0, #1
 80031f4:	4198      	sbcs	r0, r3
 80031f6:	2207      	movs	r2, #7
 80031f8:	00f3      	lsls	r3, r6, #3
 80031fa:	0f6d      	lsrs	r5, r5, #29
 80031fc:	4303      	orrs	r3, r0
 80031fe:	432b      	orrs	r3, r5
 8003200:	401a      	ands	r2, r3
 8003202:	2a00      	cmp	r2, #0
 8003204:	d004      	beq.n	8003210 <__aeabi_d2f+0x48>
 8003206:	220f      	movs	r2, #15
 8003208:	401a      	ands	r2, r3
 800320a:	2a04      	cmp	r2, #4
 800320c:	d000      	beq.n	8003210 <__aeabi_d2f+0x48>
 800320e:	3304      	adds	r3, #4
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	04d2      	lsls	r2, r2, #19
 8003214:	401a      	ands	r2, r3
 8003216:	d024      	beq.n	8003262 <__aeabi_d2f+0x9a>
 8003218:	3701      	adds	r7, #1
 800321a:	b2fa      	uxtb	r2, r7
 800321c:	2fff      	cmp	r7, #255	; 0xff
 800321e:	d002      	beq.n	8003226 <__aeabi_d2f+0x5e>
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	0a58      	lsrs	r0, r3, #9
 8003224:	e001      	b.n	800322a <__aeabi_d2f+0x62>
 8003226:	22ff      	movs	r2, #255	; 0xff
 8003228:	2000      	movs	r0, #0
 800322a:	0240      	lsls	r0, r0, #9
 800322c:	05d2      	lsls	r2, r2, #23
 800322e:	0a40      	lsrs	r0, r0, #9
 8003230:	07c9      	lsls	r1, r1, #31
 8003232:	4310      	orrs	r0, r2
 8003234:	4308      	orrs	r0, r1
 8003236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003238:	4335      	orrs	r5, r6
 800323a:	2c00      	cmp	r4, #0
 800323c:	d104      	bne.n	8003248 <__aeabi_d2f+0x80>
 800323e:	2d00      	cmp	r5, #0
 8003240:	d10a      	bne.n	8003258 <__aeabi_d2f+0x90>
 8003242:	2200      	movs	r2, #0
 8003244:	2000      	movs	r0, #0
 8003246:	e7f0      	b.n	800322a <__aeabi_d2f+0x62>
 8003248:	2d00      	cmp	r5, #0
 800324a:	d0ec      	beq.n	8003226 <__aeabi_d2f+0x5e>
 800324c:	2080      	movs	r0, #128	; 0x80
 800324e:	03c0      	lsls	r0, r0, #15
 8003250:	4330      	orrs	r0, r6
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	e7e9      	b.n	800322a <__aeabi_d2f+0x62>
 8003256:	2400      	movs	r4, #0
 8003258:	2300      	movs	r3, #0
 800325a:	025b      	lsls	r3, r3, #9
 800325c:	0a58      	lsrs	r0, r3, #9
 800325e:	b2e2      	uxtb	r2, r4
 8003260:	e7e3      	b.n	800322a <__aeabi_d2f+0x62>
 8003262:	08db      	lsrs	r3, r3, #3
 8003264:	003c      	movs	r4, r7
 8003266:	e7f8      	b.n	800325a <__aeabi_d2f+0x92>
 8003268:	003b      	movs	r3, r7
 800326a:	3317      	adds	r3, #23
 800326c:	dbf3      	blt.n	8003256 <__aeabi_d2f+0x8e>
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	4333      	orrs	r3, r6
 8003274:	261e      	movs	r6, #30
 8003276:	1bf6      	subs	r6, r6, r7
 8003278:	2e1f      	cmp	r6, #31
 800327a:	dd14      	ble.n	80032a6 <__aeabi_d2f+0xde>
 800327c:	2202      	movs	r2, #2
 800327e:	4252      	negs	r2, r2
 8003280:	1bd7      	subs	r7, r2, r7
 8003282:	001a      	movs	r2, r3
 8003284:	40fa      	lsrs	r2, r7
 8003286:	0017      	movs	r7, r2
 8003288:	2e20      	cmp	r6, #32
 800328a:	d004      	beq.n	8003296 <__aeabi_d2f+0xce>
 800328c:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <__aeabi_d2f+0x100>)
 800328e:	4694      	mov	ip, r2
 8003290:	4464      	add	r4, ip
 8003292:	40a3      	lsls	r3, r4
 8003294:	431d      	orrs	r5, r3
 8003296:	002b      	movs	r3, r5
 8003298:	1e5d      	subs	r5, r3, #1
 800329a:	41ab      	sbcs	r3, r5
 800329c:	2207      	movs	r2, #7
 800329e:	433b      	orrs	r3, r7
 80032a0:	401a      	ands	r2, r3
 80032a2:	2700      	movs	r7, #0
 80032a4:	e7ad      	b.n	8003202 <__aeabi_d2f+0x3a>
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <__aeabi_d2f+0x104>)
 80032a8:	0028      	movs	r0, r5
 80032aa:	18a2      	adds	r2, r4, r2
 80032ac:	4095      	lsls	r5, r2
 80032ae:	4093      	lsls	r3, r2
 80032b0:	1e6c      	subs	r4, r5, #1
 80032b2:	41a5      	sbcs	r5, r4
 80032b4:	40f0      	lsrs	r0, r6
 80032b6:	2207      	movs	r2, #7
 80032b8:	432b      	orrs	r3, r5
 80032ba:	4303      	orrs	r3, r0
 80032bc:	401a      	ands	r2, r3
 80032be:	2700      	movs	r7, #0
 80032c0:	e79f      	b.n	8003202 <__aeabi_d2f+0x3a>
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	fffffc80 	.word	0xfffffc80
 80032c8:	fffffca2 	.word	0xfffffca2
 80032cc:	fffffc82 	.word	0xfffffc82

080032d0 <__clzsi2>:
 80032d0:	211c      	movs	r1, #28
 80032d2:	2301      	movs	r3, #1
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	4298      	cmp	r0, r3
 80032d8:	d301      	bcc.n	80032de <__clzsi2+0xe>
 80032da:	0c00      	lsrs	r0, r0, #16
 80032dc:	3910      	subs	r1, #16
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	4298      	cmp	r0, r3
 80032e2:	d301      	bcc.n	80032e8 <__clzsi2+0x18>
 80032e4:	0a00      	lsrs	r0, r0, #8
 80032e6:	3908      	subs	r1, #8
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	4298      	cmp	r0, r3
 80032ec:	d301      	bcc.n	80032f2 <__clzsi2+0x22>
 80032ee:	0900      	lsrs	r0, r0, #4
 80032f0:	3904      	subs	r1, #4
 80032f2:	a202      	add	r2, pc, #8	; (adr r2, 80032fc <__clzsi2+0x2c>)
 80032f4:	5c10      	ldrb	r0, [r2, r0]
 80032f6:	1840      	adds	r0, r0, r1
 80032f8:	4770      	bx	lr
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	02020304 	.word	0x02020304
 8003300:	01010101 	.word	0x01010101
	...

0800330c <__clzdi2>:
 800330c:	b510      	push	{r4, lr}
 800330e:	2900      	cmp	r1, #0
 8003310:	d103      	bne.n	800331a <__clzdi2+0xe>
 8003312:	f7ff ffdd 	bl	80032d0 <__clzsi2>
 8003316:	3020      	adds	r0, #32
 8003318:	e002      	b.n	8003320 <__clzdi2+0x14>
 800331a:	1c08      	adds	r0, r1, #0
 800331c:	f7ff ffd8 	bl	80032d0 <__clzsi2>
 8003320:	bd10      	pop	{r4, pc}
 8003322:	46c0      	nop			; (mov r8, r8)

08003324 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <LoadROtopology+0x88>)
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 800332e:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <LoadROtopology+0x8c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00b      	beq.n	800334c <LoadROtopology+0x28>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8003334:	0a1a      	lsrs	r2, r3, #8
 8003336:	491f      	ldr	r1, [pc, #124]	; (80033b4 <LoadROtopology+0x90>)
 8003338:	700a      	strb	r2, [r1, #0]
		if(N == 0)
 800333a:	d102      	bne.n	8003342 <LoadROtopology+0x1e>
			N =1;
 800333c:	000a      	movs	r2, r1
 800333e:	2101      	movs	r1, #1
 8003340:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <LoadROtopology+0x94>)
 8003344:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8003346:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8003348:	2002      	movs	r0, #2
		for(uint8_t i =1; i <= N; i++){
 800334a:	e023      	b.n	8003394 <LoadROtopology+0x70>
		N =1;
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <LoadROtopology+0x90>)
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
		myID =0;
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <LoadROtopology+0x94>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003358:	20fa      	movs	r0, #250	; 0xfa
 800335a:	e024      	b.n	80033a6 <LoadROtopology+0x82>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <LoadROtopology+0x88>)
 800335e:	18c3      	adds	r3, r0, r3
 8003360:	1e65      	subs	r5, r4, #1
 8003362:	466a      	mov	r2, sp
 8003364:	79d1      	ldrb	r1, [r2, #7]
 8003366:	881e      	ldrh	r6, [r3, #0]
 8003368:	00ab      	lsls	r3, r5, #2
 800336a:	195b      	adds	r3, r3, r5
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	195b      	adds	r3, r3, r5
 8003370:	18cb      	adds	r3, r1, r3
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4911      	ldr	r1, [pc, #68]	; (80033bc <LoadROtopology+0x98>)
 8003376:	52ce      	strh	r6, [r1, r3]
				add +=2;
 8003378:	3002      	adds	r0, #2
 800337a:	b280      	uxth	r0, r0
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 800337c:	79d3      	ldrb	r3, [r2, #7]
 800337e:	3301      	adds	r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	71d3      	strb	r3, [r2, #7]
 8003384:	466b      	mov	r3, sp
 8003386:	3307      	adds	r3, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b0a      	cmp	r3, #10
 800338e:	d9e5      	bls.n	800335c <LoadROtopology+0x38>
		for(uint8_t i =1; i <= N; i++){
 8003390:	3401      	adds	r4, #1
 8003392:	b2e4      	uxtb	r4, r4
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <LoadROtopology+0x90>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	42a3      	cmp	r3, r4
 800339a:	d303      	bcc.n	80033a4 <LoadROtopology+0x80>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 800339c:	466b      	mov	r3, sp
 800339e:	2200      	movs	r2, #0
 80033a0:	71da      	strb	r2, [r3, #7]
 80033a2:	e7ef      	b.n	8003384 <LoadROtopology+0x60>
			}
		}
	}
	
	return result;
 80033a4:	2000      	movs	r0, #0
}
 80033a6:	b002      	add	sp, #8
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	0801d800 	.word	0x0801d800
 80033b0:	0000ffff 	.word	0x0000ffff
 80033b4:	2000001c 	.word	0x2000001c
 80033b8:	20001066 	.word	0x20001066
 80033bc:	20000aa0 	.word	0x20000aa0

080033c0 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 80033c0:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80033c2:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80033c4:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 80033c6:	e001      	b.n	80033cc <LoadEEportsDir+0xc>
 80033c8:	3401      	adds	r4, #1
 80033ca:	b2e4      	uxtb	r4, r4
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <LoadEEportsDir+0x30>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	42a3      	cmp	r3, r4
 80033d2:	d30b      	bcc.n	80033ec <LoadEEportsDir+0x2c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 80033d4:	1e61      	subs	r1, r4, #1
 80033d6:	0049      	lsls	r1, r1, #1
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <LoadEEportsDir+0x34>)
 80033da:	18c9      	adds	r1, r1, r3
 80033dc:	1c60      	adds	r0, r4, #1
 80033de:	f004 fc15 	bl	8007c0c <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80033e2:	1ca3      	adds	r3, r4, #2
 80033e4:	2b1b      	cmp	r3, #27
 80033e6:	ddef      	ble.n	80033c8 <LoadEEportsDir+0x8>
			result =BOS_ERR_EEPROM;
 80033e8:	250a      	movs	r5, #10
 80033ea:	e7ed      	b.n	80033c8 <LoadEEportsDir+0x8>
	}
	
	return result;
}
 80033ec:	0028      	movs	r0, r5
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	2000001c 	.word	0x2000001c
 80033f4:	20007238 	.word	0x20007238

080033f8 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80033fc:	466b      	mov	r3, sp
 80033fe:	2200      	movs	r2, #0
 8003400:	80da      	strh	r2, [r3, #6]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003402:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003404:	2500      	movs	r5, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003406:	e023      	b.n	8003450 <LoadEEalias+0x58>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8003408:	466b      	mov	r3, sp
 800340a:	1d9f      	adds	r7, r3, #6
 800340c:	0028      	movs	r0, r5
 800340e:	301c      	adds	r0, #28
 8003410:	b280      	uxth	r0, r0
 8003412:	0039      	movs	r1, r7
 8003414:	f004 fbfa 	bl	8007c0c <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8003418:	8839      	ldrh	r1, [r7, #0]
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <LoadEEalias+0x6c>)
 800341c:	00b3      	lsls	r3, r6, #2
 800341e:	199f      	adds	r7, r3, r6
 8003420:	0078      	lsls	r0, r7, #1
 8003422:	1810      	adds	r0, r2, r0
 8003424:	5501      	strb	r1, [r0, r4]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003426:	1e67      	subs	r7, r4, #1
 8003428:	0a09      	lsrs	r1, r1, #8
 800342a:	199b      	adds	r3, r3, r6
 800342c:	0058      	lsls	r0, r3, #1
 800342e:	1812      	adds	r2, r2, r0
 8003430:	55d1      	strb	r1, [r2, r7]
			add++;
 8003432:	3501      	adds	r5, #1
 8003434:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003436:	3402      	adds	r4, #2
 8003438:	b2e4      	uxtb	r4, r4
 800343a:	2c09      	cmp	r4, #9
 800343c:	d9e4      	bls.n	8003408 <LoadEEalias+0x10>
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 800343e:	00b3      	lsls	r3, r6, #2
 8003440:	199b      	adds	r3, r3, r6
 8003442:	005a      	lsls	r2, r3, #1
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <LoadEEalias+0x6c>)
 8003446:	189b      	adds	r3, r3, r2
 8003448:	2200      	movs	r2, #0
 800344a:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800344c:	3601      	adds	r6, #1
 800344e:	b2f6      	uxtb	r6, r6
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <LoadEEalias+0x70>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	42b3      	cmp	r3, r6
 8003456:	d301      	bcc.n	800345c <LoadEEalias+0x64>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003458:	2401      	movs	r4, #1
 800345a:	e7ee      	b.n	800343a <LoadEEalias+0x42>
	}
	
	return result;
}
 800345c:	2000      	movs	r0, #0
 800345e:	b003      	add	sp, #12
 8003460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	20000f58 	.word	0x20000f58
 8003468:	2000001c 	.word	0x2000001c

0800346c <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003470:	466b      	mov	r3, sp
 8003472:	2200      	movs	r2, #0
 8003474:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8003476:	2400      	movs	r4, #0
	uint16_t add =0, temp =0;
 8003478:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 800347a:	e00b      	b.n	8003494 <LoadEEgroup+0x28>
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800347c:	0063      	lsls	r3, r4, #1
 800347e:	491e      	ldr	r1, [pc, #120]	; (80034f8 <LoadEEgroup+0x8c>)
 8003480:	18c9      	adds	r1, r1, r3
 8003482:	0028      	movs	r0, r5
 8003484:	30cb      	adds	r0, #203	; 0xcb
 8003486:	b280      	uxth	r0, r0
 8003488:	f004 fbc0 	bl	8007c0c <EE_ReadVariable>
		add++;
 800348c:	3501      	adds	r5, #1
 800348e:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8003490:	3401      	adds	r4, #1
 8003492:	b2e4      	uxtb	r4, r4
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <LoadEEgroup+0x90>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	42a3      	cmp	r3, r4
 800349a:	d8ef      	bhi.n	800347c <LoadEEgroup+0x10>
	}
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 800349c:	2600      	movs	r6, #0
 800349e:	e023      	b.n	80034e8 <LoadEEgroup+0x7c>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 80034a0:	466b      	mov	r3, sp
 80034a2:	1d9f      	adds	r7, r3, #6
 80034a4:	0028      	movs	r0, r5
 80034a6:	3099      	adds	r0, #153	; 0x99
 80034a8:	b280      	uxth	r0, r0
 80034aa:	0039      	movs	r1, r7
 80034ac:	f004 fbae 	bl	8007c0c <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 80034b0:	8839      	ldrh	r1, [r7, #0]
 80034b2:	4a13      	ldr	r2, [pc, #76]	; (8003500 <LoadEEgroup+0x94>)
 80034b4:	00b3      	lsls	r3, r6, #2
 80034b6:	199f      	adds	r7, r3, r6
 80034b8:	0078      	lsls	r0, r7, #1
 80034ba:	1810      	adds	r0, r2, r0
 80034bc:	5501      	strb	r1, [r0, r4]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80034be:	1e67      	subs	r7, r4, #1
 80034c0:	0a09      	lsrs	r1, r1, #8
 80034c2:	199b      	adds	r3, r3, r6
 80034c4:	0058      	lsls	r0, r3, #1
 80034c6:	1812      	adds	r2, r2, r0
 80034c8:	55d1      	strb	r1, [r2, r7]
			add++;
 80034ca:	3501      	adds	r5, #1
 80034cc:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ce:	3402      	adds	r4, #2
 80034d0:	b2e4      	uxtb	r4, r4
 80034d2:	2c09      	cmp	r4, #9
 80034d4:	d9e4      	bls.n	80034a0 <LoadEEgroup+0x34>
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 80034d6:	00b3      	lsls	r3, r6, #2
 80034d8:	199b      	adds	r3, r3, r6
 80034da:	005a      	lsls	r2, r3, #1
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <LoadEEgroup+0x94>)
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	2200      	movs	r2, #0
 80034e2:	725a      	strb	r2, [r3, #9]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 80034e4:	3601      	adds	r6, #1
 80034e6:	b2f6      	uxtb	r6, r6
 80034e8:	2e09      	cmp	r6, #9
 80034ea:	d801      	bhi.n	80034f0 <LoadEEgroup+0x84>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ec:	2401      	movs	r4, #1
 80034ee:	e7f0      	b.n	80034d2 <LoadEEgroup+0x66>
	}
	
	return result;
}
 80034f0:	2000      	movs	r0, #0
 80034f2:	b003      	add	sp, #12
 80034f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	20000eb0 	.word	0x20000eb0
 80034fc:	2000001c 	.word	0x2000001c
 8003500:	20000e4c 	.word	0x20000e4c

08003504 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8003508:	210e      	movs	r1, #14
 800350a:	4469      	add	r1, sp
 800350c:	2300      	movs	r3, #0
 800350e:	800b      	strh	r3, [r1, #0]
 8003510:	aa03      	add	r2, sp, #12
 8003512:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8003514:	20e4      	movs	r0, #228	; 0xe4
 8003516:	f004 fb79 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 800351a:	2800      	cmp	r0, #0
 800351c:	d000      	beq.n	8003520 <LoadEEstreams+0x1c>
 800351e:	e075      	b.n	800360c <LoadEEstreams+0x108>
		direction =(uint8_t )temp1;
 8003520:	230e      	movs	r3, #14
 8003522:	446b      	add	r3, sp
 8003524:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8003526:	210e      	movs	r1, #14
 8003528:	4469      	add	r1, sp
 800352a:	20e5      	movs	r0, #229	; 0xe5
 800352c:	f004 fb6e 	bl	8007c0c <EE_ReadVariable>
 8003530:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8003532:	a903      	add	r1, sp, #12
 8003534:	20e6      	movs	r0, #230	; 0xe6
 8003536:	f004 fb69 	bl	8007c0c <EE_ReadVariable>
	if(!status1 && !status2){
 800353a:	4304      	orrs	r4, r0
 800353c:	b2a4      	uxth	r4, r4
 800353e:	2c00      	cmp	r4, #0
 8003540:	d000      	beq.n	8003544 <LoadEEstreams+0x40>
 8003542:	e065      	b.n	8003610 <LoadEEstreams+0x10c>
		count =((uint32_t )temp1 << 16) + temp2;
 8003544:	230e      	movs	r3, #14
 8003546:	446b      	add	r3, sp
 8003548:	881d      	ldrh	r5, [r3, #0]
 800354a:	042d      	lsls	r5, r5, #16
 800354c:	ab03      	add	r3, sp, #12
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8003552:	210e      	movs	r1, #14
 8003554:	4469      	add	r1, sp
 8003556:	20e7      	movs	r0, #231	; 0xe7
 8003558:	f004 fb58 	bl	8007c0c <EE_ReadVariable>
 800355c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 800355e:	a903      	add	r1, sp, #12
 8003560:	20e8      	movs	r0, #232	; 0xe8
 8003562:	f004 fb53 	bl	8007c0c <EE_ReadVariable>
	if(!status1 && !status2){
 8003566:	4304      	orrs	r4, r0
 8003568:	b2a4      	uxth	r4, r4
 800356a:	2c00      	cmp	r4, #0
 800356c:	d152      	bne.n	8003614 <LoadEEstreams+0x110>
		timeout =((uint32_t )temp1 << 16) + temp2;
 800356e:	230e      	movs	r3, #14
 8003570:	446b      	add	r3, sp
 8003572:	881c      	ldrh	r4, [r3, #0]
 8003574:	0424      	lsls	r4, r4, #16
 8003576:	ab03      	add	r3, sp, #12
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 800357c:	210e      	movs	r1, #14
 800357e:	4469      	add	r1, sp
 8003580:	20e9      	movs	r0, #233	; 0xe9
 8003582:	f004 fb43 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 8003586:	2800      	cmp	r0, #0
 8003588:	d107      	bne.n	800359a <LoadEEstreams+0x96>
		src1 =(uint8_t )(temp1 >> 8);
 800358a:	230e      	movs	r3, #14
 800358c:	446b      	add	r3, sp
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	0a19      	lsrs	r1, r3, #8
 8003592:	4a2c      	ldr	r2, [pc, #176]	; (8003644 <LoadEEstreams+0x140>)
 8003594:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <LoadEEstreams+0x144>)
 8003598:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 800359a:	210e      	movs	r1, #14
 800359c:	4469      	add	r1, sp
 800359e:	20ea      	movs	r0, #234	; 0xea
 80035a0:	f004 fb34 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d107      	bne.n	80035b8 <LoadEEstreams+0xb4>
		src2 =(uint8_t )(temp1 >> 8);
 80035a8:	230e      	movs	r3, #14
 80035aa:	446b      	add	r3, sp
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	0a19      	lsrs	r1, r3, #8
 80035b0:	4a26      	ldr	r2, [pc, #152]	; (800364c <LoadEEstreams+0x148>)
 80035b2:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 80035b4:	4a26      	ldr	r2, [pc, #152]	; (8003650 <LoadEEstreams+0x14c>)
 80035b6:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 80035b8:	210e      	movs	r1, #14
 80035ba:	4469      	add	r1, sp
 80035bc:	20eb      	movs	r0, #235	; 0xeb
 80035be:	f004 fb25 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d107      	bne.n	80035d6 <LoadEEstreams+0xd2>
		src3 =(uint8_t )(temp1 >> 8);
 80035c6:	230e      	movs	r3, #14
 80035c8:	446b      	add	r3, sp
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	0a19      	lsrs	r1, r3, #8
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <LoadEEstreams+0x150>)
 80035d0:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 80035d2:	4a21      	ldr	r2, [pc, #132]	; (8003658 <LoadEEstreams+0x154>)
 80035d4:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <LoadEEstreams+0x140>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <LoadEEstreams+0xe2>
 80035de:	4a1a      	ldr	r2, [pc, #104]	; (8003648 <LoadEEstreams+0x144>)
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	d118      	bne.n	8003618 <LoadEEstreams+0x114>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 80035e6:	4b19      	ldr	r3, [pc, #100]	; (800364c <LoadEEstreams+0x148>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <LoadEEstreams+0xf2>
 80035ee:	4a18      	ldr	r2, [pc, #96]	; (8003650 <LoadEEstreams+0x14c>)
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	d117      	bne.n	8003626 <LoadEEstreams+0x122>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <LoadEEstreams+0x150>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <LoadEEstreams+0x102>
 80035fe:	4a16      	ldr	r2, [pc, #88]	; (8003658 <LoadEEstreams+0x154>)
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	2a00      	cmp	r2, #0
 8003604:	d116      	bne.n	8003634 <LoadEEstreams+0x130>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003606:	2000      	movs	r0, #0
 8003608:	b004      	add	sp, #16
 800360a:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t direction =0;
 800360c:	2600      	movs	r6, #0
 800360e:	e78a      	b.n	8003526 <LoadEEstreams+0x22>
	uint32_t count =0, timeout =0;
 8003610:	2500      	movs	r5, #0
 8003612:	e79e      	b.n	8003552 <LoadEEstreams+0x4e>
 8003614:	2400      	movs	r4, #0
 8003616:	e7b1      	b.n	800357c <LoadEEstreams+0x78>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003618:	9200      	str	r2, [sp, #0]
 800361a:	0022      	movs	r2, r4
 800361c:	0029      	movs	r1, r5
 800361e:	0030      	movs	r0, r6
 8003620:	f005 ff58 	bl	80094d4 <SetupDMAStreams>
 8003624:	e7df      	b.n	80035e6 <LoadEEstreams+0xe2>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003626:	9200      	str	r2, [sp, #0]
 8003628:	0022      	movs	r2, r4
 800362a:	0029      	movs	r1, r5
 800362c:	0030      	movs	r0, r6
 800362e:	f005 ff51 	bl	80094d4 <SetupDMAStreams>
 8003632:	e7e0      	b.n	80035f6 <LoadEEstreams+0xf2>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003634:	9200      	str	r2, [sp, #0]
 8003636:	0022      	movs	r2, r4
 8003638:	0029      	movs	r1, r5
 800363a:	0030      	movs	r0, r6
 800363c:	f005 ff4a 	bl	80094d4 <SetupDMAStreams>
 8003640:	e7e1      	b.n	8003606 <LoadEEstreams+0x102>
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	20001132 	.word	0x20001132
 8003648:	20000e49 	.word	0x20000e49
 800364c:	20001133 	.word	0x20001133
 8003650:	20000e4a 	.word	0x20000e4a
 8003654:	20001134 	.word	0x20001134
 8003658:	20000e4b 	.word	0x20000e4b

0800365c <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 800365c:	b510      	push	{r4, lr}
 800365e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003660:	208a      	movs	r0, #138	; 0x8a
 8003662:	466b      	mov	r3, sp
 8003664:	1d99      	adds	r1, r3, #6
 8003666:	0040      	lsls	r0, r0, #1
 8003668:	f004 fad0 	bl	8007c0c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800366c:	2800      	cmp	r0, #0
 800366e:	d000      	beq.n	8003672 <LoadEEparams+0x16>
 8003670:	e064      	b.n	800373c <LoadEEparams+0xe0>
		BOS.response =(uint8_t )temp1;
 8003672:	466b      	mov	r3, sp
 8003674:	3306      	adds	r3, #6
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	4a49      	ldr	r2, [pc, #292]	; (80037a0 <LoadEEparams+0x144>)
 800367a:	7193      	strb	r3, [r2, #6]
		BOS.trace =(traceOptions_t )(temp1 >> 8);
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	71d3      	strb	r3, [r2, #7]
		BOS.response =BOS_default.response;
		BOS.trace =BOS_default.trace;
	}
	
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003680:	2016      	movs	r0, #22
 8003682:	466b      	mov	r3, sp
 8003684:	1d99      	adds	r1, r3, #6
 8003686:	30ff      	adds	r0, #255	; 0xff
 8003688:	f004 fac0 	bl	8007c0c <EE_ReadVariable>
	if(!status1)
 800368c:	2800      	cmp	r0, #0
 800368e:	d15c      	bne.n	800374a <LoadEEparams+0xee>
		BOS.buttons.debounce =temp1;
 8003690:	466b      	mov	r3, sp
 8003692:	88da      	ldrh	r2, [r3, #6]
 8003694:	4b42      	ldr	r3, [pc, #264]	; (80037a0 <LoadEEparams+0x144>)
 8003696:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003698:	208b      	movs	r0, #139	; 0x8b
 800369a:	466b      	mov	r3, sp
 800369c:	1d99      	adds	r1, r3, #6
 800369e:	0040      	lsls	r0, r0, #1
 80036a0:	f004 fab4 	bl	8007c0c <EE_ReadVariable>
	if(!status1)
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d155      	bne.n	8003754 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime =temp1;
 80036a8:	466b      	mov	r3, sp
 80036aa:	88da      	ldrh	r2, [r3, #6]
 80036ac:	4b3c      	ldr	r3, [pc, #240]	; (80037a0 <LoadEEparams+0x144>)
 80036ae:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80036b0:	2018      	movs	r0, #24
 80036b2:	466b      	mov	r3, sp
 80036b4:	1d99      	adds	r1, r3, #6
 80036b6:	30ff      	adds	r0, #255	; 0xff
 80036b8:	f004 faa8 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 80036bc:	2800      	cmp	r0, #0
 80036be:	d14e      	bne.n	800375e <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80036c0:	466b      	mov	r3, sp
 80036c2:	3306      	adds	r3, #6
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	4a36      	ldr	r2, [pc, #216]	; (80037a0 <LoadEEparams+0x144>)
 80036c8:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80036ce:	208c      	movs	r0, #140	; 0x8c
 80036d0:	466b      	mov	r3, sp
 80036d2:	1d99      	adds	r1, r3, #6
 80036d4:	0040      	lsls	r0, r0, #1
 80036d6:	f004 fa99 	bl	8007c0c <EE_ReadVariable>
 80036da:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80036dc:	201a      	movs	r0, #26
 80036de:	a901      	add	r1, sp, #4
 80036e0:	30ff      	adds	r0, #255	; 0xff
 80036e2:	f004 fa93 	bl	8007c0c <EE_ReadVariable>
	if(!status1 && !status2){
 80036e6:	4304      	orrs	r4, r0
 80036e8:	b2a4      	uxth	r4, r4
 80036ea:	2c00      	cmp	r4, #0
 80036ec:	d13e      	bne.n	800376c <LoadEEparams+0x110>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 80036ee:	466b      	mov	r3, sp
 80036f0:	3306      	adds	r3, #6
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	aa01      	add	r2, sp, #4
 80036f6:	8812      	ldrh	r2, [r2, #0]
 80036f8:	0412      	lsls	r2, r2, #16
 80036fa:	4313      	orrs	r3, r2
 80036fc:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <LoadEEparams+0x144>)
 80036fe:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003700:	208d      	movs	r0, #141	; 0x8d
 8003702:	466b      	mov	r3, sp
 8003704:	1d99      	adds	r1, r3, #6
 8003706:	0040      	lsls	r0, r0, #1
 8003708:	f004 fa80 	bl	8007c0c <EE_ReadVariable>
	if(!status1){
 800370c:	2800      	cmp	r0, #0
 800370e:	d13b      	bne.n	8003788 <LoadEEparams+0x12c>
		BOS.daylightsaving =(int8_t )temp1;
 8003710:	466b      	mov	r3, sp
 8003712:	3306      	adds	r3, #6
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	4a22      	ldr	r2, [pc, #136]	; (80037a0 <LoadEEparams+0x144>)
 8003718:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800371e:	201c      	movs	r0, #28
 8003720:	466b      	mov	r3, sp
 8003722:	1d99      	adds	r1, r3, #6
 8003724:	30ff      	adds	r0, #255	; 0xff
 8003726:	f004 fa71 	bl	8007c0c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800372a:	2800      	cmp	r0, #0
 800372c:	d032      	beq.n	8003794 <LoadEEparams+0x138>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <LoadEEparams+0x148>)
 8003730:	7eda      	ldrb	r2, [r3, #27]
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <LoadEEparams+0x144>)
 8003734:	76da      	strb	r2, [r3, #27]
	}
	
	return result;
}
 8003736:	2000      	movs	r0, #0
 8003738:	b002      	add	sp, #8
 800373a:	bd10      	pop	{r4, pc}
		BOS.response =BOS_default.response;
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <LoadEEparams+0x148>)
 800373e:	7991      	ldrb	r1, [r2, #6]
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <LoadEEparams+0x144>)
 8003742:	7199      	strb	r1, [r3, #6]
		BOS.trace =BOS_default.trace;
 8003744:	79d2      	ldrb	r2, [r2, #7]
 8003746:	71da      	strb	r2, [r3, #7]
 8003748:	e79a      	b.n	8003680 <LoadEEparams+0x24>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <LoadEEparams+0x148>)
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <LoadEEparams+0x144>)
 8003750:	801a      	strh	r2, [r3, #0]
 8003752:	e7a1      	b.n	8003698 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <LoadEEparams+0x148>)
 8003756:	885a      	ldrh	r2, [r3, #2]
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <LoadEEparams+0x144>)
 800375a:	805a      	strh	r2, [r3, #2]
 800375c:	e7a8      	b.n	80036b0 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 800375e:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <LoadEEparams+0x148>)
 8003760:	7911      	ldrb	r1, [r2, #4]
 8003762:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <LoadEEparams+0x144>)
 8003764:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003766:	7952      	ldrb	r2, [r2, #5]
 8003768:	715a      	strb	r2, [r3, #5]
 800376a:	e7b0      	b.n	80036ce <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <LoadEEparams+0x14c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <LoadEEparams+0x144>)
 8003776:	22e1      	movs	r2, #225	; 0xe1
 8003778:	0252      	lsls	r2, r2, #9
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	e7c0      	b.n	8003700 <LoadEEparams+0xa4>
		BOS.clibaudrate =BOS_default.clibaudrate;
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <LoadEEparams+0x148>)
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <LoadEEparams+0x144>)
 8003784:	609a      	str	r2, [r3, #8]
 8003786:	e7bb      	b.n	8003700 <LoadEEparams+0xa4>
		BOS.hourformat =24;
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <LoadEEparams+0x144>)
 800378a:	2218      	movs	r2, #24
 800378c:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 800378e:	2200      	movs	r2, #0
 8003790:	731a      	strb	r2, [r3, #12]
 8003792:	e7c4      	b.n	800371e <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 8003794:	466b      	mov	r3, sp
 8003796:	799a      	ldrb	r2, [r3, #6]
 8003798:	4b01      	ldr	r3, [pc, #4]	; (80037a0 <LoadEEparams+0x144>)
 800379a:	76da      	strb	r2, [r3, #27]
 800379c:	e7cb      	b.n	8003736 <LoadEEparams+0xda>
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	20006da0 	.word	0x20006da0
 80037a4:	20000000 	.word	0x20000000
 80037a8:	20000a9e 	.word	0x20000a9e

080037ac <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80037ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ae:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80037b0:	231e      	movs	r3, #30
 80037b2:	446b      	add	r3, sp
 80037b4:	2200      	movs	r2, #0
 80037b6:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80037b8:	2400      	movs	r4, #0
 80037ba:	e001      	b.n	80037c0 <LoadEEbuttons+0x14>
 80037bc:	3401      	adds	r4, #1
 80037be:	b2e4      	uxtb	r4, r4
 80037c0:	2c05      	cmp	r4, #5
 80037c2:	d854      	bhi.n	800386e <LoadEEbuttons+0xc2>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80037c4:	0025      	movs	r5, r4
 80037c6:	353b      	adds	r5, #59	; 0x3b
 80037c8:	00ad      	lsls	r5, r5, #2
 80037ca:	b2ad      	uxth	r5, r5
 80037cc:	211e      	movs	r1, #30
 80037ce:	4469      	add	r1, sp
 80037d0:	0028      	movs	r0, r5
 80037d2:	f004 fa1b 	bl	8007c0c <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d1f0      	bne.n	80037bc <LoadEEbuttons+0x10>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 80037da:	231e      	movs	r3, #30
 80037dc:	446b      	add	r3, sp
 80037de:	8819      	ldrh	r1, [r3, #0]
 80037e0:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 80037e2:	0918      	lsrs	r0, r3, #4
 80037e4:	1c62      	adds	r2, r4, #1
 80037e6:	4290      	cmp	r0, r2
 80037e8:	d1e8      	bne.n	80037bc <LoadEEbuttons+0x10>
 80037ea:	200f      	movs	r0, #15
 80037ec:	4003      	ands	r3, r0
 80037ee:	d0e5      	beq.n	80037bc <LoadEEbuttons+0x10>
			{
				button[i + 1].type =temp8 & 0x0F;
 80037f0:	00d7      	lsls	r7, r2, #3
 80037f2:	18ba      	adds	r2, r7, r2
 80037f4:	4f1f      	ldr	r7, [pc, #124]	; (8003874 <LoadEEbuttons+0xc8>)
 80037f6:	18bf      	adds	r7, r7, r2
 80037f8:	707b      	strb	r3, [r7, #1]
				button[i + 1].events =(uint8_t )temp16;
 80037fa:	7239      	strb	r1, [r7, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80037fc:	261e      	movs	r6, #30
 80037fe:	446e      	add	r6, sp
 8003800:	1c68      	adds	r0, r5, #1
 8003802:	b280      	uxth	r0, r0
 8003804:	0031      	movs	r1, r6
 8003806:	f004 fa01 	bl	8007c0c <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800380a:	8833      	ldrh	r3, [r6, #0]
 800380c:	0a1a      	lsrs	r2, r3, #8
 800380e:	70ba      	strb	r2, [r7, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003810:	717b      	strb	r3, [r7, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003812:	1ca8      	adds	r0, r5, #2
 8003814:	b280      	uxth	r0, r0
 8003816:	0031      	movs	r1, r6
 8003818:	f004 f9f8 	bl	8007c0c <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800381c:	8833      	ldrh	r3, [r6, #0]
 800381e:	0a1a      	lsrs	r2, r3, #8
 8003820:	70fa      	strb	r2, [r7, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003822:	71bb      	strb	r3, [r7, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003824:	3503      	adds	r5, #3
 8003826:	b2a8      	uxth	r0, r5
 8003828:	0031      	movs	r1, r6
 800382a:	f004 f9ef 	bl	8007c0c <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 800382e:	8833      	ldrh	r3, [r6, #0]
 8003830:	0a1a      	lsrs	r2, r3, #8
 8003832:	713a      	strb	r2, [r7, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 8003834:	71fb      	strb	r3, [r7, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 8003836:	1c65      	adds	r5, r4, #1
 8003838:	b2ed      	uxtb	r5, r5
 800383a:	7878      	ldrb	r0, [r7, #1]
 800383c:	0029      	movs	r1, r5
 800383e:	f004 feb9 	bl	80085b4 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003842:	7a39      	ldrb	r1, [r7, #8]
 8003844:	084a      	lsrs	r2, r1, #1
 8003846:	78bb      	ldrb	r3, [r7, #2]
 8003848:	2001      	movs	r0, #1
 800384a:	4002      	ands	r2, r0
 800384c:	4001      	ands	r1, r0
 800384e:	2000      	movs	r0, #0
 8003850:	9005      	str	r0, [sp, #20]
 8003852:	79f8      	ldrb	r0, [r7, #7]
 8003854:	9004      	str	r0, [sp, #16]
 8003856:	79b8      	ldrb	r0, [r7, #6]
 8003858:	9003      	str	r0, [sp, #12]
 800385a:	7978      	ldrb	r0, [r7, #5]
 800385c:	9002      	str	r0, [sp, #8]
 800385e:	7938      	ldrb	r0, [r7, #4]
 8003860:	9001      	str	r0, [sp, #4]
 8003862:	78f8      	ldrb	r0, [r7, #3]
 8003864:	9000      	str	r0, [sp, #0]
 8003866:	0028      	movs	r0, r5
 8003868:	f004 ffbc 	bl	80087e4 <SetButtonEvents>
 800386c:	e7a6      	b.n	80037bc <LoadEEbuttons+0x10>
			}
		}
	}
	
	return result;
}
 800386e:	2000      	movs	r0, #0
 8003870:	b009      	add	sp, #36	; 0x24
 8003872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003874:	200014b4 	.word	0x200014b4

08003878 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387a:	46d6      	mov	lr, sl
 800387c:	464f      	mov	r7, r9
 800387e:	b580      	push	{r7, lr}
 8003880:	b083      	sub	sp, #12
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003882:	2032      	movs	r0, #50	; 0x32
 8003884:	f011 faaa 	bl	8014ddc <malloc>
 8003888:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 800388a:	d065      	beq.n	8003958 <LoadROsnippets+0xe0>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800388c:	4b36      	ldr	r3, [pc, #216]	; (8003968 <LoadROsnippets+0xf0>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2bfe      	cmp	r3, #254	; 0xfe
 8003892:	d163      	bne.n	800395c <LoadROsnippets+0xe4>
		return BOS_ERROR;
	
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003894:	2600      	movs	r6, #0
	int currentAdd = RO_MID_ADDRESS;
 8003896:	4c34      	ldr	r4, [pc, #208]	; (8003968 <LoadROsnippets+0xf0>)
 8003898:	e04b      	b.n	8003932 <LoadROsnippets+0xba>
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800389a:	7822      	ldrb	r2, [r4, #0]
 800389c:	54fa      	strb	r2, [r7, r3]
		for(i =0; i < sizeof(snippet_t); i++)
 800389e:	3301      	adds	r3, #1
 80038a0:	b2db      	uxtb	r3, r3
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80038a2:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 80038a4:	2b13      	cmp	r3, #19
 80038a6:	d9f8      	bls.n	800389a <LoadROsnippets+0x22>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80038a8:	46b2      	mov	sl, r6
 80038aa:	00b3      	lsls	r3, r6, #2
 80038ac:	199b      	adds	r3, r3, r6
 80038ae:	009a      	lsls	r2, r3, #2
 80038b0:	4b2e      	ldr	r3, [pc, #184]	; (800396c <LoadROsnippets+0xf4>)
 80038b2:	4691      	mov	r9, r2
 80038b4:	4499      	add	r9, r3
 80038b6:	1c79      	adds	r1, r7, #1
 80038b8:	2214      	movs	r2, #20
 80038ba:	4648      	mov	r0, r9
 80038bc:	f011 fcdb 	bl	8015276 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 80038c0:	2214      	movs	r2, #20
 80038c2:	2100      	movs	r1, #0
 80038c4:	0038      	movs	r0, r7
 80038c6:	f011 fcdf 	bl	8015288 <memset>
		i =0;
 80038ca:	2500      	movs	r5, #0
		// Load commands until you get next 0xFE
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80038cc:	e003      	b.n	80038d6 <LoadROsnippets+0x5e>
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80038ce:	557a      	strb	r2, [r7, r5]
			++currentAdd;
 80038d0:	3401      	adds	r4, #1
			++i;
 80038d2:	3501      	adds	r5, #1
 80038d4:	b2ed      	uxtb	r5, r5
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80038d6:	9401      	str	r4, [sp, #4]
 80038d8:	7822      	ldrb	r2, [r4, #0]
 80038da:	1c93      	adds	r3, r2, #2
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d901      	bls.n	80038e6 <LoadROsnippets+0x6e>
 80038e2:	2d31      	cmp	r5, #49	; 0x31
 80038e4:	d9f3      	bls.n	80038ce <LoadROsnippets+0x56>
		}
		if(snipBuffer[i - 1] != 0)
 80038e6:	197b      	adds	r3, r7, r5
 80038e8:	3b01      	subs	r3, #1
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <LoadROsnippets+0x7c>
			++i;	// String termination char was not recorded, then add one
 80038f0:	3501      	adds	r5, #1
 80038f2:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd =(char* )malloc(i);
 80038f4:	0028      	movs	r0, r5
 80038f6:	f011 fa71 	bl	8014ddc <malloc>
 80038fa:	4653      	mov	r3, sl
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4453      	add	r3, sl
 8003900:	009a      	lsls	r2, r3, #2
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <LoadROsnippets+0xf4>)
 8003904:	189b      	adds	r3, r3, r2
 8003906:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003908:	2800      	cmp	r0, #0
 800390a:	d016      	beq.n	800393a <LoadROsnippets+0xc2>
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
 800390c:	002a      	movs	r2, r5
 800390e:	0039      	movs	r1, r7
 8003910:	f011 fcb1 	bl	8015276 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003914:	4a16      	ldr	r2, [pc, #88]	; (8003970 <LoadROsnippets+0xf8>)
 8003916:	7813      	ldrb	r3, [r2, #0]
 8003918:	3301      	adds	r3, #1
 800391a:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 800391c:	002a      	movs	r2, r5
 800391e:	2100      	movs	r1, #0
 8003920:	0038      	movs	r0, r7
 8003922:	f011 fcb1 	bl	8015288 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003926:	9b01      	ldr	r3, [sp, #4]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2bfe      	cmp	r3, #254	; 0xfe
 800392c:	d10f      	bne.n	800394e <LoadROsnippets+0xd6>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 800392e:	3601      	adds	r6, #1
 8003930:	b2f6      	uxtb	r6, r6
 8003932:	2e04      	cmp	r6, #4
 8003934:	d80b      	bhi.n	800394e <LoadROsnippets+0xd6>
		for(i =0; i < sizeof(snippet_t); i++)
 8003936:	2300      	movs	r3, #0
 8003938:	e7b4      	b.n	80038a4 <LoadROsnippets+0x2c>
			memset(&snippets[s],0,sizeof(snippet_t));
 800393a:	2214      	movs	r2, #20
 800393c:	2100      	movs	r1, #0
 800393e:	4648      	mov	r0, r9
 8003940:	f011 fca2 	bl	8015288 <memset>
			free(snipBuffer);
 8003944:	0038      	movs	r0, r7
 8003946:	f011 fa53 	bl	8014df0 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 800394a:	200e      	movs	r0, #14
 800394c:	e007      	b.n	800395e <LoadROsnippets+0xe6>
			break;
	}
	
	free(snipBuffer);
 800394e:	0038      	movs	r0, r7
 8003950:	f011 fa4e 	bl	8014df0 <free>
	return BOS_OK;
 8003954:	2000      	movs	r0, #0
 8003956:	e002      	b.n	800395e <LoadROsnippets+0xe6>
		return BOS_MEM_FULL;
 8003958:	20fb      	movs	r0, #251	; 0xfb
 800395a:	e000      	b.n	800395e <LoadROsnippets+0xe6>
		return BOS_ERROR;
 800395c:	20ff      	movs	r0, #255	; 0xff
}
 800395e:	b003      	add	sp, #12
 8003960:	bc0c      	pop	{r2, r3}
 8003962:	4691      	mov	r9, r2
 8003964:	469a      	mov	sl, r3
 8003966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003968:	0801dc00 	.word	0x0801dc00
 800396c:	20006dbc 	.word	0x20006dbc
 8003970:	20001207 	.word	0x20001207

08003974 <LoadEEvars>:
void LoadEEvars(void){
 8003974:	b510      	push	{r4, lr}
	LoadROtopology();
 8003976:	f7ff fcd5 	bl	8003324 <LoadROtopology>
	LoadEEportsDir();
 800397a:	f7ff fd21 	bl	80033c0 <LoadEEportsDir>
	LoadEEalias();
 800397e:	f7ff fd3b 	bl	80033f8 <LoadEEalias>
	LoadEEgroup();
 8003982:	f7ff fd73 	bl	800346c <LoadEEgroup>
	LoadEEstreams();
 8003986:	f7ff fdbd 	bl	8003504 <LoadEEstreams>
	LoadEEparams();
 800398a:	f7ff fe67 	bl	800365c <LoadEEparams>
	LoadEEbuttons();
 800398e:	f7ff ff0d 	bl	80037ac <LoadEEbuttons>
	LoadROsnippets();
 8003992:	f7ff ff71 	bl	8003878 <LoadROsnippets>
}
 8003996:	bd10      	pop	{r4, pc}

08003998 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003998:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800399a:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800399c:	2600      	movs	r6, #0
	for(uint8_t i =1; i <= N; i++){
 800399e:	e005      	b.n	80039ac <SaveEEportsDir+0x14>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80039a0:	1c60      	adds	r0, r4, #1
 80039a2:	f004 f9e5 	bl	8007d70 <EE_WriteVariable>
 80039a6:	e00c      	b.n	80039c2 <SaveEEportsDir+0x2a>
	for(uint8_t i =1; i <= N; i++){
 80039a8:	3401      	adds	r4, #1
 80039aa:	b2e4      	uxtb	r4, r4
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <SaveEEportsDir+0x38>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	42a3      	cmp	r3, r4
 80039b2:	d30b      	bcc.n	80039cc <SaveEEportsDir+0x34>
		if(arrayPortsDir[i - 1])
 80039b4:	0025      	movs	r5, r4
 80039b6:	1e63      	subs	r3, r4, #1
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4a06      	ldr	r2, [pc, #24]	; (80039d4 <SaveEEportsDir+0x3c>)
 80039bc:	5a99      	ldrh	r1, [r3, r2]
 80039be:	2900      	cmp	r1, #0
 80039c0:	d1ee      	bne.n	80039a0 <SaveEEportsDir+0x8>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80039c2:	3502      	adds	r5, #2
 80039c4:	2d1b      	cmp	r5, #27
 80039c6:	ddef      	ble.n	80039a8 <SaveEEportsDir+0x10>
			result =BOS_ERR_EEPROM;
 80039c8:	260a      	movs	r6, #10
 80039ca:	e7ed      	b.n	80039a8 <SaveEEportsDir+0x10>
	}
	
	return result;
}
 80039cc:	0030      	movs	r0, r6
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	2000001c 	.word	0x2000001c
 80039d4:	20007238 	.word	0x20007238

080039d8 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80039da:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 80039dc:	2500      	movs	r5, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80039de:	e017      	b.n	8003a10 <SaveEEalias+0x38>
	    {
		if(moduleAlias[i][0]){
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80039e0:	1e60      	subs	r0, r4, #1
 80039e2:	00ba      	lsls	r2, r7, #2
 80039e4:	19d2      	adds	r2, r2, r7
 80039e6:	0051      	lsls	r1, r2, #1
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <SaveEEalias+0x58>)
 80039ea:	185b      	adds	r3, r3, r1
 80039ec:	5c19      	ldrb	r1, [r3, r0]
 80039ee:	0209      	lsls	r1, r1, #8
 80039f0:	5d1b      	ldrb	r3, [r3, r4]
 80039f2:	18c9      	adds	r1, r1, r3
 80039f4:	b289      	uxth	r1, r1
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80039f6:	0028      	movs	r0, r5
 80039f8:	301c      	adds	r0, #28
 80039fa:	b280      	uxth	r0, r0
 80039fc:	f004 f9b8 	bl	8007d70 <EE_WriteVariable>
				add++;
 8003a00:	3501      	adds	r5, #1
 8003a02:	b2ad      	uxth	r5, r5
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003a04:	3402      	adds	r4, #2
 8003a06:	b2e4      	uxtb	r4, r4
 8003a08:	2c09      	cmp	r4, #9
 8003a0a:	d9e9      	bls.n	80039e0 <SaveEEalias+0x8>
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003a0c:	3601      	adds	r6, #1
 8003a0e:	b2f6      	uxtb	r6, r6
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <SaveEEalias+0x5c>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	42b3      	cmp	r3, r6
 8003a16:	d309      	bcc.n	8003a2c <SaveEEalias+0x54>
		if(moduleAlias[i][0]){
 8003a18:	0037      	movs	r7, r6
 8003a1a:	00b3      	lsls	r3, r6, #2
 8003a1c:	199b      	adds	r3, r3, r6
 8003a1e:	005a      	lsls	r2, r3, #1
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <SaveEEalias+0x58>)
 8003a22:	5cd3      	ldrb	r3, [r2, r3]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f1      	beq.n	8003a0c <SaveEEalias+0x34>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003a28:	2401      	movs	r4, #1
 8003a2a:	e7ed      	b.n	8003a08 <SaveEEalias+0x30>
			}
		}
	}
	
	return result;
}
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a30:	20000f58 	.word	0x20000f58
 8003a34:	2000001c 	.word	0x2000001c

08003a38 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	46de      	mov	lr, fp
 8003a3c:	4657      	mov	r7, sl
 8003a3e:	464e      	mov	r6, r9
 8003a40:	4645      	mov	r5, r8
 8003a42:	b5e0      	push	{r5, r6, r7, lr}
 8003a44:	000f      	movs	r7, r1
 8003a46:	0016      	movs	r6, r2
 8003a48:	4699      	mov	r9, r3
 8003a4a:	ab0a      	add	r3, sp, #40	; 0x28
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	469b      	mov	fp, r3
 8003a50:	ab0b      	add	r3, sp, #44	; 0x2c
 8003a52:	781d      	ldrb	r5, [r3, #0]
 8003a54:	ab0c      	add	r3, sp, #48	; 0x30
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	469a      	mov	sl, r3
 8003a5a:	ab0d      	add	r3, sp, #52	; 0x34
 8003a5c:	781c      	ldrb	r4, [r3, #0]
 8003a5e:	ab0e      	add	r3, sp, #56	; 0x38
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003a64:	b281      	uxth	r1, r0
 8003a66:	20e4      	movs	r0, #228	; 0xe4
 8003a68:	f004 f982 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003a6c:	0a39      	lsrs	r1, r7, #8
 8003a6e:	b289      	uxth	r1, r1
 8003a70:	20e5      	movs	r0, #229	; 0xe5
 8003a72:	f004 f97d 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003a76:	b2b9      	uxth	r1, r7
 8003a78:	20e6      	movs	r0, #230	; 0xe6
 8003a7a:	f004 f979 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003a7e:	0a31      	lsrs	r1, r6, #8
 8003a80:	b289      	uxth	r1, r1
 8003a82:	20e7      	movs	r0, #231	; 0xe7
 8003a84:	f004 f974 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003a88:	b2b1      	uxth	r1, r6
 8003a8a:	20e8      	movs	r0, #232	; 0xe8
 8003a8c:	f004 f970 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003a90:	464b      	mov	r3, r9
 8003a92:	0219      	lsls	r1, r3, #8
 8003a94:	4459      	add	r1, fp
 8003a96:	b289      	uxth	r1, r1
 8003a98:	20e9      	movs	r0, #233	; 0xe9
 8003a9a:	f004 f969 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003a9e:	022d      	lsls	r5, r5, #8
 8003aa0:	4455      	add	r5, sl
 8003aa2:	b2a9      	uxth	r1, r5
 8003aa4:	20ea      	movs	r0, #234	; 0xea
 8003aa6:	f004 f963 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003aaa:	0224      	lsls	r4, r4, #8
 8003aac:	4444      	add	r4, r8
 8003aae:	b2a1      	uxth	r1, r4
 8003ab0:	20eb      	movs	r0, #235	; 0xeb
 8003ab2:	f004 f95d 	bl	8007d70 <EE_WriteVariable>
	
	return result;
}
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	bc3c      	pop	{r2, r3, r4, r5}
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	46a2      	mov	sl, r4
 8003ac0:	46ab      	mov	fp, r5
 8003ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ac4 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003ac4:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 5) | (uint16_t )BOS.response);
 8003ac6:	4c1a      	ldr	r4, [pc, #104]	; (8003b30 <SaveEEparams+0x6c>)
 8003ac8:	79e3      	ldrb	r3, [r4, #7]
 8003aca:	015b      	lsls	r3, r3, #5
 8003acc:	79a1      	ldrb	r1, [r4, #6]
 8003ace:	4319      	orrs	r1, r3
 8003ad0:	208a      	movs	r0, #138	; 0x8a
 8003ad2:	0040      	lsls	r0, r0, #1
 8003ad4:	f004 f94c 	bl	8007d70 <EE_WriteVariable>
	
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003ad8:	8821      	ldrh	r1, [r4, #0]
 8003ada:	2016      	movs	r0, #22
 8003adc:	30ff      	adds	r0, #255	; 0xff
 8003ade:	f004 f947 	bl	8007d70 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003ae2:	8861      	ldrh	r1, [r4, #2]
 8003ae4:	208b      	movs	r0, #139	; 0x8b
 8003ae6:	0040      	lsls	r0, r0, #1
 8003ae8:	f004 f942 	bl	8007d70 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003aec:	7963      	ldrb	r3, [r4, #5]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	7b21      	ldrb	r1, [r4, #12]
 8003af2:	4319      	orrs	r1, r3
 8003af4:	2018      	movs	r0, #24
 8003af6:	30ff      	adds	r0, #255	; 0xff
 8003af8:	f004 f93a 	bl	8007d70 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003afc:	8921      	ldrh	r1, [r4, #8]
 8003afe:	208c      	movs	r0, #140	; 0x8c
 8003b00:	0040      	lsls	r0, r0, #1
 8003b02:	f004 f935 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8003b06:	8961      	ldrh	r1, [r4, #10]
 8003b08:	201a      	movs	r0, #26
 8003b0a:	30ff      	adds	r0, #255	; 0xff
 8003b0c:	f004 f930 	bl	8007d70 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003b10:	7b63      	ldrb	r3, [r4, #13]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	7921      	ldrb	r1, [r4, #4]
 8003b16:	4319      	orrs	r1, r3
 8003b18:	208d      	movs	r0, #141	; 0x8d
 8003b1a:	0040      	lsls	r0, r0, #1
 8003b1c:	f004 f928 	bl	8007d70 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003b20:	7ee1      	ldrb	r1, [r4, #27]
 8003b22:	201c      	movs	r0, #28
 8003b24:	30ff      	adds	r0, #255	; 0xff
 8003b26:	f004 f923 	bl	8007d70 <EE_WriteVariable>
	
	return result;
}
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	bd10      	pop	{r4, pc}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	20006da0 	.word	0x20006da0

08003b34 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003b34:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003b36:	2234      	movs	r2, #52	; 0x34
 8003b38:	2100      	movs	r1, #0
 8003b3a:	480f      	ldr	r0, [pc, #60]	; (8003b78 <ClearEEportsDir+0x44>)
 8003b3c:	f011 fba4 	bl	8015288 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 8003b40:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003b42:	2600      	movs	r6, #0
	for(uint8_t i =1; i <= N; i++){
 8003b44:	e005      	b.n	8003b52 <ClearEEportsDir+0x1e>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003b46:	1c60      	adds	r0, r4, #1
 8003b48:	f004 f912 	bl	8007d70 <EE_WriteVariable>
 8003b4c:	e00c      	b.n	8003b68 <ClearEEportsDir+0x34>
	for(uint8_t i =1; i <= N; i++){
 8003b4e:	3401      	adds	r4, #1
 8003b50:	b2e4      	uxtb	r4, r4
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <ClearEEportsDir+0x48>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	42a3      	cmp	r3, r4
 8003b58:	d30b      	bcc.n	8003b72 <ClearEEportsDir+0x3e>
		if(arrayPortsDir[i - 1])
 8003b5a:	0025      	movs	r5, r4
 8003b5c:	1e63      	subs	r3, r4, #1
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4a05      	ldr	r2, [pc, #20]	; (8003b78 <ClearEEportsDir+0x44>)
 8003b62:	5a99      	ldrh	r1, [r3, r2]
 8003b64:	2900      	cmp	r1, #0
 8003b66:	d1ee      	bne.n	8003b46 <ClearEEportsDir+0x12>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003b68:	3502      	adds	r5, #2
 8003b6a:	2d1b      	cmp	r5, #27
 8003b6c:	ddef      	ble.n	8003b4e <ClearEEportsDir+0x1a>
			result =BOS_ERR_EEPROM;
 8003b6e:	260a      	movs	r6, #10
 8003b70:	e7ed      	b.n	8003b4e <ClearEEportsDir+0x1a>
	}
	
	return result;
}
 8003b72:	0030      	movs	r0, r6
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	20007238 	.word	0x20007238
 8003b7c:	2000001c 	.word	0x2000001c

08003b80 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 8003b80:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <EE_FormatForFactoryReset+0x1c>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <EE_FormatForFactoryReset+0x20>)
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d006      	beq.n	8003b9a <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 8003b8c:	f004 f906 	bl	8007d9c <EE_Format>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d102      	bne.n	8003b9a <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003b94:	4b01      	ldr	r3, [pc, #4]	; (8003b9c <EE_FormatForFactoryReset+0x1c>)
 8003b96:	4a02      	ldr	r2, [pc, #8]	; (8003ba0 <EE_FormatForFactoryReset+0x20>)
 8003b98:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003b9a:	bd10      	pop	{r4, pc}
 8003b9c:	20007ff0 	.word	0x20007ff0
 8003ba0:	beefdead 	.word	0xbeefdead

08003ba4 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003ba8:	2512      	movs	r5, #18
 8003baa:	446d      	add	r5, sp
 8003bac:	ab04      	add	r3, sp, #16
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	ab07      	add	r3, sp, #28
 8003bb2:	002a      	movs	r2, r5
 8003bb4:	a908      	add	r1, sp, #32
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	f00b f8aa 	bl	800ed10 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003bbc:	ac03      	add	r4, sp, #12
 8003bbe:	9400      	str	r4, [sp, #0]
 8003bc0:	ab05      	add	r3, sp, #20
 8003bc2:	220e      	movs	r2, #14
 8003bc4:	446a      	add	r2, sp
 8003bc6:	a906      	add	r1, sp, #24
 8003bc8:	2002      	movs	r0, #2
 8003bca:	f00b f8a1 	bl	800ed10 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003bd6:	882b      	ldrh	r3, [r5, #0]
 8003bd8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003bda:	a909      	add	r1, sp, #36	; 0x24
 8003bdc:	9808      	ldr	r0, [sp, #32]
 8003bde:	f00f fa47 	bl	8013070 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be2:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003be4:	2302      	movs	r3, #2
 8003be6:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003be8:	8823      	ldrh	r3, [r4, #0]
 8003bea:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003bec:	a909      	add	r1, sp, #36	; 0x24
 8003bee:	9805      	ldr	r0, [sp, #20]
 8003bf0:	f00f fa3e 	bl	8013070 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003bf4:	8829      	ldrh	r1, [r5, #0]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	9808      	ldr	r0, [sp, #32]
 8003bfa:	f00f fb8a 	bl	8013312 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003bfe:	2005      	movs	r0, #5
 8003c00:	f00b fc20 	bl	800f444 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003c04:	8821      	ldrh	r1, [r4, #0]
 8003c06:	9805      	ldr	r0, [sp, #20]
 8003c08:	f00f fb7c 	bl	8013304 <HAL_GPIO_ReadPin>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d002      	beq.n	8003c16 <IsLowerCLIbaud+0x72>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003c10:	2000      	movs	r0, #0
}
 8003c12:	b00e      	add	sp, #56	; 0x38
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003c16:	2312      	movs	r3, #18
 8003c18:	446b      	add	r3, sp
 8003c1a:	8819      	ldrh	r1, [r3, #0]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	9808      	ldr	r0, [sp, #32]
 8003c20:	f00f fb77 	bl	8013312 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003c24:	2005      	movs	r0, #5
 8003c26:	f00b fc0d 	bl	800f444 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003c2a:	ab03      	add	r3, sp, #12
 8003c2c:	8819      	ldrh	r1, [r3, #0]
 8003c2e:	9805      	ldr	r0, [sp, #20]
 8003c30:	f00f fb68 	bl	8013304 <HAL_GPIO_ReadPin>
 8003c34:	2801      	cmp	r0, #1
 8003c36:	d0ec      	beq.n	8003c12 <IsLowerCLIbaud+0x6e>
	return 0;
 8003c38:	2000      	movs	r0, #0
 8003c3a:	e7ea      	b.n	8003c12 <IsLowerCLIbaud+0x6e>

08003c3c <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8003c3c:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8003c3e:	f00b fd95 	bl	800f76c <GetUart>
 8003c42:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 8003c44:	23e1      	movs	r3, #225	; 0xe1
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	015b      	lsls	r3, r3, #5
 8003c54:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8003c56:	f010 ff1d 	bl	8014a94 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8003c5a:	6822      	ldr	r2, [r4, #0]
 8003c5c:	6813      	ldr	r3, [r2, #0]
 8003c5e:	2120      	movs	r1, #32
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	bd10      	pop	{r4, pc}
	...

08003c68 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	0005      	movs	r5, r0
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003c6c:	2400      	movs	r4, #0
 8003c6e:	2c02      	cmp	r4, #2
 8003c70:	d810      	bhi.n	8003c94 <IsModuleParameter+0x2c>
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003c72:	0063      	lsls	r3, r4, #1
 8003c74:	191b      	adds	r3, r3, r4
 8003c76:	009a      	lsls	r2, r3, #2
 8003c78:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <IsModuleParameter+0x30>)
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	6899      	ldr	r1, [r3, #8]
 8003c7e:	0028      	movs	r0, r5
 8003c80:	f7fc fa40 	bl	8000104 <strcmp>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d002      	beq.n	8003c8e <IsModuleParameter+0x26>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003c88:	3401      	adds	r4, #1
 8003c8a:	b2e4      	uxtb	r4, r4
 8003c8c:	e7ef      	b.n	8003c6e <IsModuleParameter+0x6>
			return i + 1;
 8003c8e:	3401      	adds	r4, #1
 8003c90:	b2e0      	uxtb	r0, r4
 8003c92:	e000      	b.n	8003c96 <IsModuleParameter+0x2e>
	}
	return 0;
 8003c94:	2000      	movs	r0, #0
}
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	20000090 	.word	0x20000090

08003c9c <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003ca0:	2500      	movs	r5, #0
 8003ca2:	e001      	b.n	8003ca8 <IsMathOperator+0xc>
 8003ca4:	3501      	adds	r5, #1
 8003ca6:	b2ed      	uxtb	r5, r5
 8003ca8:	2d05      	cmp	r5, #5
 8003caa:	d825      	bhi.n	8003cf8 <IsMathOperator+0x5c>
		if(!strcmp(string,"="))
 8003cac:	4918      	ldr	r1, [pc, #96]	; (8003d10 <IsMathOperator+0x74>)
 8003cae:	0020      	movs	r0, r4
 8003cb0:	f7fc fa28 	bl	8000104 <strcmp>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	d021      	beq.n	8003cfc <IsMathOperator+0x60>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 8003cb8:	4916      	ldr	r1, [pc, #88]	; (8003d14 <IsMathOperator+0x78>)
 8003cba:	0020      	movs	r0, r4
 8003cbc:	f7fc fa22 	bl	8000104 <strcmp>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d01d      	beq.n	8003d00 <IsMathOperator+0x64>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003cc4:	4914      	ldr	r1, [pc, #80]	; (8003d18 <IsMathOperator+0x7c>)
 8003cc6:	0020      	movs	r0, r4
 8003cc8:	f7fc fa1c 	bl	8000104 <strcmp>
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d019      	beq.n	8003d04 <IsMathOperator+0x68>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003cd0:	4912      	ldr	r1, [pc, #72]	; (8003d1c <IsMathOperator+0x80>)
 8003cd2:	0020      	movs	r0, r4
 8003cd4:	f7fc fa16 	bl	8000104 <strcmp>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d015      	beq.n	8003d08 <IsMathOperator+0x6c>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003cdc:	4910      	ldr	r1, [pc, #64]	; (8003d20 <IsMathOperator+0x84>)
 8003cde:	0020      	movs	r0, r4
 8003ce0:	f7fc fa10 	bl	8000104 <strcmp>
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d011      	beq.n	8003d0c <IsMathOperator+0x70>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003ce8:	490e      	ldr	r1, [pc, #56]	; (8003d24 <IsMathOperator+0x88>)
 8003cea:	0020      	movs	r0, r4
 8003cec:	f7fc fa0a 	bl	8000104 <strcmp>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d1d7      	bne.n	8003ca4 <IsMathOperator+0x8>
			return MATH_NOT_EQUAL;
 8003cf4:	2006      	movs	r0, #6
 8003cf6:	e000      	b.n	8003cfa <IsMathOperator+0x5e>
	}
	return 0;
 8003cf8:	2000      	movs	r0, #0
}
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	e7fc      	b.n	8003cfa <IsMathOperator+0x5e>
			return MATH_GREATER;
 8003d00:	2002      	movs	r0, #2
 8003d02:	e7fa      	b.n	8003cfa <IsMathOperator+0x5e>
			return MATH_SMALLER;
 8003d04:	2003      	movs	r0, #3
 8003d06:	e7f8      	b.n	8003cfa <IsMathOperator+0x5e>
			return MATH_GREATER_EQUAL;
 8003d08:	2004      	movs	r0, #4
 8003d0a:	e7f6      	b.n	8003cfa <IsMathOperator+0x5e>
			return MATH_SMALLER_EQUAL;
 8003d0c:	2005      	movs	r0, #5
 8003d0e:	e7f4      	b.n	8003cfa <IsMathOperator+0x5e>
 8003d10:	08019e58 	.word	0x08019e58
 8003d14:	08019e5c 	.word	0x08019e5c
 8003d18:	08019e60 	.word	0x08019e60
 8003d1c:	08019e64 	.word	0x08019e64
 8003d20:	08019e68 	.word	0x08019e68
 8003d24:	08019e6c 	.word	0x08019e6c

08003d28 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003d28:	b530      	push	{r4, r5, lr}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003d2e:	2401      	movs	r4, #1
 8003d30:	e001      	b.n	8003d36 <ExploreNeighbors+0xe>
 8003d32:	3401      	adds	r4, #1
 8003d34:	b2e4      	uxtb	r4, r4
 8003d36:	2c05      	cmp	r4, #5
 8003d38:	d814      	bhi.n	8003d64 <ExploreNeighbors+0x3c>
		if(port != ignore){
 8003d3a:	42ac      	cmp	r4, r5
 8003d3c:	d0f9      	beq.n	8003d32 <ExploreNeighbors+0xa>
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <ExploreNeighbors+0x44>)
 8003d40:	881a      	ldrh	r2, [r3, #0]
 8003d42:	0a11      	lsrs	r1, r2, #8
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <ExploreNeighbors+0x48>)
 8003d46:	7019      	strb	r1, [r3, #0]
			messageParams[1] =(uint8_t )myPN;
 8003d48:	705a      	strb	r2, [r3, #1]
			messageParams[2] =port;
 8003d4a:	709c      	strb	r4, [r3, #2]
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	3307      	adds	r3, #7
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	0020      	movs	r0, r4
 8003d58:	f005 fcd0 	bl	80096fc <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003d5c:	200a      	movs	r0, #10
 8003d5e:	f00b fe57 	bl	800fa10 <osDelay>
 8003d62:	e7e6      	b.n	8003d32 <ExploreNeighbors+0xa>
		}
	}
	
	return result;
}
 8003d64:	2000      	movs	r0, #0
 8003d66:	b003      	add	sp, #12
 8003d68:	bd30      	pop	{r4, r5, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	20000050 	.word	0x20000050
 8003d70:	20000f28 	.word	0x20000f28

08003d74 <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	46de      	mov	lr, fp
 8003d78:	4657      	mov	r7, sl
 8003d7a:	464e      	mov	r6, r9
 8003d7c:	4645      	mov	r5, r8
 8003d7e:	b5e0      	push	{r5, r6, r7, lr}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003d84:	4b44      	ldr	r3, [pc, #272]	; (8003e98 <FindBroadcastRoutes+0x124>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	3307      	adds	r3, #7
 8003d8a:	08db      	lsrs	r3, r3, #3
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	466a      	mov	r2, sp
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	469d      	mov	sp, r3
 8003d94:	466d      	mov	r5, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003d96:	2300      	movs	r3, #0
 8003d98:	e006      	b.n	8003da8 <FindBroadcastRoutes+0x34>
		modules[m] =0;
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	54ea      	strb	r2, [r5, r3]
		bcastRoutes[m] =0;
 8003d9e:	005c      	lsls	r4, r3, #1
 8003da0:	493e      	ldr	r1, [pc, #248]	; (8003e9c <FindBroadcastRoutes+0x128>)
 8003da2:	5262      	strh	r2, [r4, r1]
	for(m =0; m < N; m++){
 8003da4:	3301      	adds	r3, #1
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	4a3b      	ldr	r2, [pc, #236]	; (8003e98 <FindBroadcastRoutes+0x124>)
 8003daa:	7812      	ldrb	r2, [r2, #0]
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d3f4      	bcc.n	8003d9a <FindBroadcastRoutes+0x26>
	}
	modules[src - 1] =++level;					// Tag the source
 8003db0:	3801      	subs	r0, #1
 8003db2:	2301      	movs	r3, #1
 8003db4:	542b      	strb	r3, [r5, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= NumOfPorts; p++){
 8003db6:	2201      	movs	r2, #1
 8003db8:	e001      	b.n	8003dbe <FindBroadcastRoutes+0x4a>
 8003dba:	3201      	adds	r2, #1
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	2a05      	cmp	r2, #5
 8003dc0:	d819      	bhi.n	8003df6 <FindBroadcastRoutes+0x82>
		if(array[src - 1][p]){
 8003dc2:	0083      	lsls	r3, r0, #2
 8003dc4:	181b      	adds	r3, r3, r0
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	181b      	adds	r3, r3, r0
 8003dca:	189b      	adds	r3, r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4934      	ldr	r1, [pc, #208]	; (8003ea0 <FindBroadcastRoutes+0x12c>)
 8003dd0:	5a5b      	ldrh	r3, [r3, r1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f1      	beq.n	8003dba <FindBroadcastRoutes+0x46>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003dd6:	1e54      	subs	r4, r2, #1
 8003dd8:	2101      	movs	r1, #1
 8003dda:	40a1      	lsls	r1, r4
 8003ddc:	000c      	movs	r4, r1
 8003dde:	4e2f      	ldr	r6, [pc, #188]	; (8003e9c <FindBroadcastRoutes+0x128>)
 8003de0:	0041      	lsls	r1, r0, #1
 8003de2:	468c      	mov	ip, r1
 8003de4:	5b89      	ldrh	r1, [r1, r6]
 8003de6:	4321      	orrs	r1, r4
 8003de8:	4664      	mov	r4, ip
 8003dea:	53a1      	strh	r1, [r4, r6]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003dec:	08db      	lsrs	r3, r3, #3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	2102      	movs	r1, #2
 8003df2:	54e9      	strb	r1, [r5, r3]
 8003df4:	e7e1      	b.n	8003dba <FindBroadcastRoutes+0x46>
	++level;												// Move one level
 8003df6:	2302      	movs	r3, #2
 8003df8:	469b      	mov	fp, r3
	
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do{
		untaged =0;								// Reset the untaged counter
		++level;											// Move one level
 8003dfa:	465e      	mov	r6, fp
 8003dfc:	3601      	adds	r6, #1
 8003dfe:	b2f3      	uxtb	r3, r6
 8003e00:	469b      	mov	fp, r3
		untaged =0;								// Reset the untaged counter
 8003e02:	2300      	movs	r3, #0
 8003e04:	469c      	mov	ip, r3
		
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003e06:	2000      	movs	r0, #0
 8003e08:	e02e      	b.n	8003e68 <FindBroadcastRoutes+0xf4>
		    {
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
			{
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
 8003e0a:	3201      	adds	r2, #1
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	2a05      	cmp	r2, #5
 8003e10:	d828      	bhi.n	8003e64 <FindBroadcastRoutes+0xf0>
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003e12:	00a3      	lsls	r3, r4, #2
 8003e14:	191b      	adds	r3, r3, r4
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	191b      	adds	r3, r3, r4
 8003e1a:	189b      	adds	r3, r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4920      	ldr	r1, [pc, #128]	; (8003ea0 <FindBroadcastRoutes+0x12c>)
 8003e20:	5a5b      	ldrh	r3, [r3, r1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f1      	beq.n	8003e0a <FindBroadcastRoutes+0x96>
 8003e26:	08db      	lsrs	r3, r3, #3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	5ce9      	ldrb	r1, [r5, r3]
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	d1eb      	bne.n	8003e0a <FindBroadcastRoutes+0x96>
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003e32:	0011      	movs	r1, r2
 8003e34:	3901      	subs	r1, #1
 8003e36:	2601      	movs	r6, #1
 8003e38:	408e      	lsls	r6, r1
 8003e3a:	46b0      	mov	r8, r6
 8003e3c:	4917      	ldr	r1, [pc, #92]	; (8003e9c <FindBroadcastRoutes+0x128>)
 8003e3e:	4689      	mov	r9, r1
 8003e40:	0061      	lsls	r1, r4, #1
 8003e42:	468a      	mov	sl, r1
 8003e44:	4649      	mov	r1, r9
 8003e46:	4656      	mov	r6, sl
 8003e48:	5a71      	ldrh	r1, [r6, r1]
 8003e4a:	4646      	mov	r6, r8
 8003e4c:	4331      	orrs	r1, r6
 8003e4e:	464e      	mov	r6, r9
 8003e50:	4653      	mov	r3, sl
 8003e52:	5399      	strh	r1, [r3, r6]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4659      	mov	r1, fp
 8003e58:	54e9      	strb	r1, [r5, r3]
						++untaged;
 8003e5a:	4663      	mov	r3, ip
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	469c      	mov	ip, r3
 8003e62:	e7d2      	b.n	8003e0a <FindBroadcastRoutes+0x96>
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003e64:	3001      	adds	r0, #1
 8003e66:	b2c0      	uxtb	r0, r0
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <FindBroadcastRoutes+0x124>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	4298      	cmp	r0, r3
 8003e6e:	d207      	bcs.n	8003e80 <FindBroadcastRoutes+0x10c>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003e70:	0004      	movs	r4, r0
 8003e72:	5c2a      	ldrb	r2, [r5, r0]
 8003e74:	465b      	mov	r3, fp
 8003e76:	3b01      	subs	r3, #1
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d1f3      	bne.n	8003e64 <FindBroadcastRoutes+0xf0>
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	e7c6      	b.n	8003e0e <FindBroadcastRoutes+0x9a>
					}
				}
			}
		}
	} while(untaged);
 8003e80:	4663      	mov	r3, ip
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1b9      	bne.n	8003dfa <FindBroadcastRoutes+0x86>
	
	return result;
}
 8003e86:	2000      	movs	r0, #0
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b003      	add	sp, #12
 8003e8c:	bc3c      	pop	{r2, r3, r4, r5}
 8003e8e:	4690      	mov	r8, r2
 8003e90:	4699      	mov	r9, r3
 8003e92:	46a2      	mov	sl, r4
 8003e94:	46ab      	mov	fp, r5
 8003e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e98:	2000001c 	.word	0x2000001c
 8003e9c:	20000ce0 	.word	0x20000ce0
 8003ea0:	20000aa0 	.word	0x20000aa0

08003ea4 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003ea4:	b570      	push	{r4, r5, r6, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003ea6:	780b      	ldrb	r3, [r1, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <minArr+0x10>
		smallest =arr[0];
 8003eac:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
		if((arr[i] < smallest) && !Q[i]){
			smallest =arr[i];
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	e002      	b.n	8003eba <minArr+0x16>
	uint8_t smallest =0xFF;
 8003eb4:	24ff      	movs	r4, #255	; 0xff
 8003eb6:	e7fa      	b.n	8003eae <minArr+0xa>
	for(int i =0; i < N; i++){
 8003eb8:	3301      	adds	r3, #1
 8003eba:	4a07      	ldr	r2, [pc, #28]	; (8003ed8 <minArr+0x34>)
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	dd08      	ble.n	8003ed4 <minArr+0x30>
		if((arr[i] < smallest) && !Q[i]){
 8003ec2:	5cc2      	ldrb	r2, [r0, r3]
 8003ec4:	42a2      	cmp	r2, r4
 8003ec6:	d2f7      	bcs.n	8003eb8 <minArr+0x14>
 8003ec8:	5ccd      	ldrb	r5, [r1, r3]
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	d1f4      	bne.n	8003eb8 <minArr+0x14>
			index =i;
 8003ece:	b2de      	uxtb	r6, r3
			smallest =arr[i];
 8003ed0:	0014      	movs	r4, r2
 8003ed2:	e7f1      	b.n	8003eb8 <minArr+0x14>
		}
	}
	
	return index;
}
 8003ed4:	0030      	movs	r0, r6
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
 8003ed8:	2000001c 	.word	0x2000001c

08003edc <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003edc:	2300      	movs	r3, #0
	char temp =1;
 8003ede:	2201      	movs	r2, #1
	for(int i =0; i < N; i++){
 8003ee0:	e002      	b.n	8003ee8 <QnotEmpty+0xc>
		temp &=Q[i];
 8003ee2:	5cc1      	ldrb	r1, [r0, r3]
 8003ee4:	400a      	ands	r2, r1
	for(int i =0; i < N; i++){
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4902      	ldr	r1, [pc, #8]	; (8003ef4 <QnotEmpty+0x18>)
 8003eea:	7809      	ldrb	r1, [r1, #0]
 8003eec:	4299      	cmp	r1, r3
 8003eee:	dcf8      	bgt.n	8003ee2 <QnotEmpty+0x6>
	}
	
	return temp;
}
 8003ef0:	0010      	movs	r0, r2
 8003ef2:	4770      	bx	lr
 8003ef4:	2000001c 	.word	0x2000001c

08003ef8 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efa:	b08f      	sub	sp, #60	; 0x3c
 8003efc:	0005      	movs	r5, r0
 8003efe:	000e      	movs	r6, r1
	uint8_t Q[50] ={0};		// All nodes initially in Q (unvisited nodes)
 8003f00:	2232      	movs	r2, #50	; 0x32
 8003f02:	2100      	movs	r1, #0
 8003f04:	a801      	add	r0, sp, #4
 8003f06:	f011 f9bf 	bl	8015288 <memset>
	memset(route,0,sizeof(route));
 8003f0a:	221a      	movs	r2, #26
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4848      	ldr	r0, [pc, #288]	; (8004030 <FindRoute+0x138>)
 8003f10:	f011 f9ba 	bl	8015288 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003f14:	002a      	movs	r2, r5
 8003f16:	3d01      	subs	r5, #1
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4946      	ldr	r1, [pc, #280]	; (8004034 <FindRoute+0x13c>)
 8003f1c:	554b      	strb	r3, [r1, r5]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003f1e:	4946      	ldr	r1, [pc, #280]	; (8004038 <FindRoute+0x140>)
 8003f20:	554b      	strb	r3, [r1, r5]
	for(int col =1; col <= 6; col++){
 8003f22:	2001      	movs	r0, #1
 8003f24:	e000      	b.n	8003f28 <FindRoute+0x30>
 8003f26:	3001      	adds	r0, #1
 8003f28:	2806      	cmp	r0, #6
 8003f2a:	dc16      	bgt.n	8003f5a <FindRoute+0x62>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003f2c:	00ab      	lsls	r3, r5, #2
 8003f2e:	195b      	adds	r3, r3, r5
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	195b      	adds	r3, r3, r5
 8003f34:	181b      	adds	r3, r3, r0
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4940      	ldr	r1, [pc, #256]	; (800403c <FindRoute+0x144>)
 8003f3a:	5a5b      	ldrh	r3, [r3, r1]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f2      	beq.n	8003f26 <FindRoute+0x2e>
 8003f40:	08db      	lsrs	r3, r3, #3
 8003f42:	b2b1      	uxth	r1, r6
 8003f44:	428b      	cmp	r3, r1
 8003f46:	d1ee      	bne.n	8003f26 <FindRoute+0x2e>
			routeDist[desID - 1] =1;
 8003f48:	1e73      	subs	r3, r6, #1
 8003f4a:	4a3a      	ldr	r2, [pc, #232]	; (8004034 <FindRoute+0x13c>)
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	54d1      	strb	r1, [r2, r3]
			route[0] =desID;
 8003f50:	4b37      	ldr	r3, [pc, #220]	; (8004030 <FindRoute+0x138>)
 8003f52:	701e      	strb	r6, [r3, #0]
			return col;
 8003f54:	b2c0      	uxtb	r0, r0
}
 8003f56:	b00f      	add	sp, #60	; 0x3c
 8003f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(int i =1; i <= N; i++){
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <FindRoute+0x68>
 8003f5e:	3301      	adds	r3, #1
 8003f60:	4937      	ldr	r1, [pc, #220]	; (8004040 <FindRoute+0x148>)
 8003f62:	7809      	ldrb	r1, [r1, #0]
 8003f64:	4299      	cmp	r1, r3
 8003f66:	db09      	blt.n	8003f7c <FindRoute+0x84>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d0f8      	beq.n	8003f5e <FindRoute+0x66>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003f6c:	1e59      	subs	r1, r3, #1
 8003f6e:	4831      	ldr	r0, [pc, #196]	; (8004034 <FindRoute+0x13c>)
 8003f70:	24ff      	movs	r4, #255	; 0xff
 8003f72:	5444      	strb	r4, [r0, r1]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003f74:	4830      	ldr	r0, [pc, #192]	; (8004038 <FindRoute+0x140>)
 8003f76:	2400      	movs	r4, #0
 8003f78:	5444      	strb	r4, [r0, r1]
 8003f7a:	e7f0      	b.n	8003f5e <FindRoute+0x66>
	uint8_t u =0;
 8003f7c:	2400      	movs	r4, #0
	while(!QnotEmpty(Q)){
 8003f7e:	a801      	add	r0, sp, #4
 8003f80:	f7ff ffac 	bl	8003edc <QnotEmpty>
 8003f84:	2800      	cmp	r0, #0
 8003f86:	d10c      	bne.n	8003fa2 <FindRoute+0xaa>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003f88:	a901      	add	r1, sp, #4
 8003f8a:	482a      	ldr	r0, [pc, #168]	; (8004034 <FindRoute+0x13c>)
 8003f8c:	f7ff ff8a 	bl	8003ea4 <minArr>
 8003f90:	3001      	adds	r0, #1
 8003f92:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003f94:	42b4      	cmp	r4, r6
 8003f96:	d004      	beq.n	8003fa2 <FindRoute+0xaa>
			Q[u - 1] =1;									// Remove u from Q
 8003f98:	1e61      	subs	r1, r4, #1
 8003f9a:	ab01      	add	r3, sp, #4
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	545a      	strb	r2, [r3, r1]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003fa0:	e003      	b.n	8003faa <FindRoute+0xb2>
	uint8_t u =0;
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	e025      	b.n	8003ff2 <FindRoute+0xfa>
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003fa6:	3201      	adds	r2, #1
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	2a06      	cmp	r2, #6
 8003fac:	d8e7      	bhi.n	8003f7e <FindRoute+0x86>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003fae:	008b      	lsls	r3, r1, #2
 8003fb0:	185b      	adds	r3, r3, r1
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	185b      	adds	r3, r3, r1
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4820      	ldr	r0, [pc, #128]	; (800403c <FindRoute+0x144>)
 8003fbc:	5a1b      	ldrh	r3, [r3, r0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f1      	beq.n	8003fa6 <FindRoute+0xae>
				v =(array[u - 1][n] >> 3);
 8003fc2:	08db      	lsrs	r3, r3, #3
 8003fc4:	b2db      	uxtb	r3, r3
				if(!Q[v - 1])								// v is still in Q
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	a801      	add	r0, sp, #4
 8003fca:	5cc0      	ldrb	r0, [r0, r3]
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d1ea      	bne.n	8003fa6 <FindRoute+0xae>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003fd0:	4f18      	ldr	r7, [pc, #96]	; (8004034 <FindRoute+0x13c>)
 8003fd2:	5c78      	ldrb	r0, [r7, r1]
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003fd8:	5cff      	ldrb	r7, [r7, r3]
 8003fda:	4287      	cmp	r7, r0
 8003fdc:	d9e3      	bls.n	8003fa6 <FindRoute+0xae>
						routeDist[v - 1] =alt;
 8003fde:	4f15      	ldr	r7, [pc, #84]	; (8004034 <FindRoute+0x13c>)
 8003fe0:	54f8      	strb	r0, [r7, r3]
						routePrev[v - 1] =u;
 8003fe2:	4815      	ldr	r0, [pc, #84]	; (8004038 <FindRoute+0x140>)
 8003fe4:	54c4      	strb	r4, [r0, r3]
 8003fe6:	e7de      	b.n	8003fa6 <FindRoute+0xae>
		route[j++] =u;          			// Push the vertex onto the stack
 8003fe8:	1c53      	adds	r3, r2, #1
 8003fea:	4911      	ldr	r1, [pc, #68]	; (8004030 <FindRoute+0x138>)
 8003fec:	548c      	strb	r4, [r1, r2]
 8003fee:	b2da      	uxtb	r2, r3
		u =routePrev[u - 1];           	// Traverse from target to source
 8003ff0:	0004      	movs	r4, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ff2:	1e63      	subs	r3, r4, #1
 8003ff4:	4910      	ldr	r1, [pc, #64]	; (8004038 <FindRoute+0x140>)
 8003ff6:	5cc8      	ldrb	r0, [r1, r3]
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d1f5      	bne.n	8003fe8 <FindRoute+0xf0>
	for(int col =1; col <= 6; col++){
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	e000      	b.n	8004002 <FindRoute+0x10a>
 8004000:	3201      	adds	r2, #1
 8004002:	2a06      	cmp	r2, #6
 8004004:	dca7      	bgt.n	8003f56 <FindRoute+0x5e>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8004006:	00ab      	lsls	r3, r5, #2
 8004008:	195b      	adds	r3, r3, r5
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	195b      	adds	r3, r3, r5
 800400e:	189b      	adds	r3, r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	490a      	ldr	r1, [pc, #40]	; (800403c <FindRoute+0x144>)
 8004014:	5a5b      	ldrh	r3, [r3, r1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f2      	beq.n	8004000 <FindRoute+0x108>
 800401a:	08db      	lsrs	r3, r3, #3
 800401c:	1e71      	subs	r1, r6, #1
 800401e:	4c05      	ldr	r4, [pc, #20]	; (8004034 <FindRoute+0x13c>)
 8004020:	5c61      	ldrb	r1, [r4, r1]
 8004022:	3901      	subs	r1, #1
 8004024:	4c02      	ldr	r4, [pc, #8]	; (8004030 <FindRoute+0x138>)
 8004026:	5c61      	ldrb	r1, [r4, r1]
 8004028:	428b      	cmp	r3, r1
 800402a:	d1e9      	bne.n	8004000 <FindRoute+0x108>
			return col;
 800402c:	b2d0      	uxtb	r0, r2
 800402e:	e792      	b.n	8003f56 <FindRoute+0x5e>
 8004030:	20006ea4 	.word	0x20006ea4
 8004034:	200010fc 	.word	0x200010fc
 8004038:	20001118 	.word	0x20001118
 800403c:	20000aa0 	.word	0x20000aa0
 8004040:	2000001c 	.word	0x2000001c

08004044 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8004044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004046:	b087      	sub	sp, #28
 8004048:	0007      	movs	r7, r0
 800404a:	000e      	movs	r6, r1
 800404c:	9205      	str	r2, [sp, #20]
 800404e:	001c      	movs	r4, r3
	myOutport =FindRoute(myID,dst);
 8004050:	4b31      	ldr	r3, [pc, #196]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 8004052:	7818      	ldrb	r0, [r3, #0]
 8004054:	f7ff ff50 	bl	8003ef8 <FindRoute>
 8004058:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800405a:	2c00      	cmp	r4, #0
 800405c:	d003      	beq.n	8004066 <remoteBootloaderUpdate+0x22>
 800405e:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 8004060:	781d      	ldrb	r5, [r3, #0]
 8004062:	42b5      	cmp	r5, r6
 8004064:	d00d      	beq.n	8004082 <remoteBootloaderUpdate+0x3e>
	else if(outport == 0){ /* This is a remote update */
 8004066:	2c00      	cmp	r4, #0
 8004068:	d10d      	bne.n	8004086 <remoteBootloaderUpdate+0x42>
		if(NumberOfHops(dst)== 1)
 800406a:	1e73      	subs	r3, r6, #1
 800406c:	4a2b      	ldr	r2, [pc, #172]	; (800411c <remoteBootloaderUpdate+0xd8>)
 800406e:	5cd3      	ldrb	r3, [r2, r3]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d003      	beq.n	800407c <remoteBootloaderUpdate+0x38>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8004074:	3b01      	subs	r3, #1
 8004076:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <remoteBootloaderUpdate+0xdc>)
 8004078:	5cd5      	ldrb	r5, [r2, r3]
 800407a:	e005      	b.n	8004088 <remoteBootloaderUpdate+0x44>
		lastModule = myID;
 800407c:	4b26      	ldr	r3, [pc, #152]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 800407e:	781d      	ldrb	r5, [r3, #0]
 8004080:	e002      	b.n	8004088 <remoteBootloaderUpdate+0x44>
		myOutport =outport;
 8004082:	9404      	str	r4, [sp, #16]
 8004084:	e000      	b.n	8004088 <remoteBootloaderUpdate+0x44>
	uint8_t myOutport =0, lastModule =0;
 8004086:	2500      	movs	r5, #0
	if(src == myID){
 8004088:	4b23      	ldr	r3, [pc, #140]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	42bb      	cmp	r3, r7
 800408e:	d019      	beq.n	80040c4 <remoteBootloaderUpdate+0x80>
	SetupPortForRemoteBootloaderUpdate(inport);
 8004090:	9805      	ldr	r0, [sp, #20]
 8004092:	f7ff fdd3 	bl	8003c3c <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8004096:	9804      	ldr	r0, [sp, #16]
 8004098:	f7ff fdd0 	bl	8003c3c <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 800409c:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	42ab      	cmp	r3, r5
 80040a2:	d032      	beq.n	800410a <remoteBootloaderUpdate+0xc6>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 80040a4:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <remoteBootloaderUpdate+0xd4>)
 80040a6:	7819      	ldrb	r1, [r3, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	9303      	str	r3, [sp, #12]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	9302      	str	r3, [sp, #8]
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	3303      	adds	r3, #3
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	000b      	movs	r3, r1
 80040b8:	9a04      	ldr	r2, [sp, #16]
 80040ba:	9805      	ldr	r0, [sp, #20]
 80040bc:	f005 fd54 	bl	8009b68 <StartScastDMAStream>
}
 80040c0:	b007      	add	sp, #28
 80040c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80040c4:	f00b fdc6 	bl	800fc54 <FreeRTOS_CLIGetOutputBuffer>
 80040c8:	0007      	movs	r7, r0
		if(outport == 0)		// This is a remote module update
 80040ca:	2c00      	cmp	r4, #0
 80040cc:	d116      	bne.n	80040fc <remoteBootloaderUpdate+0xb8>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <remoteBootloaderUpdate+0xe0>)
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	0032      	movs	r2, r6
 80040d4:	f011 fad2 	bl	801567c <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <remoteBootloaderUpdate+0xe4>)
 80040da:	6819      	ldr	r1, [r3, #0]
 80040dc:	0038      	movs	r0, r7
 80040de:	f011 faed 	bl	80156bc <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 80040e2:	0038      	movs	r0, r7
 80040e4:	f7fc f818 	bl	8000118 <strlen>
 80040e8:	b282      	uxth	r2, r0
 80040ea:	2332      	movs	r3, #50	; 0x32
 80040ec:	0039      	movs	r1, r7
 80040ee:	9805      	ldr	r0, [sp, #20]
 80040f0:	f00b fb88 	bl	800f804 <writePxITMutex>
		Delay_ms(100);
 80040f4:	2064      	movs	r0, #100	; 0x64
 80040f6:	f00d fd07 	bl	8011b08 <HAL_Delay>
 80040fa:	e7c9      	b.n	8004090 <remoteBootloaderUpdate+0x4c>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <remoteBootloaderUpdate+0xe8>)
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	0023      	movs	r3, r4
 8004102:	0032      	movs	r2, r6
 8004104:	f011 faba 	bl	801567c <sprintf>
 8004108:	e7e6      	b.n	80040d8 <remoteBootloaderUpdate+0x94>
		SwapUartPins(GetUart(myOutport),REVERSED);
 800410a:	9804      	ldr	r0, [sp, #16]
 800410c:	f00b fb2e 	bl	800f76c <GetUart>
 8004110:	2101      	movs	r1, #1
 8004112:	f00b fbc3 	bl	800f89c <SwapUartPins>
 8004116:	e7c5      	b.n	80040a4 <remoteBootloaderUpdate+0x60>
 8004118:	20001066 	.word	0x20001066
 800411c:	200010fc 	.word	0x200010fc
 8004120:	20006ea4 	.word	0x20006ea4
 8004124:	20000078 	.word	0x20000078
 8004128:	20000080 	.word	0x20000080
 800412c:	2000007c 	.word	0x2000007c

08004130 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8004130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004132:	b085      	sub	sp, #20
 8004134:	0004      	movs	r4, r0
 8004136:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8004138:	4d55      	ldr	r5, [pc, #340]	; (8004290 <DisplayTopology+0x160>)
 800413a:	4b56      	ldr	r3, [pc, #344]	; (8004294 <DisplayTopology+0x164>)
 800413c:	002a      	movs	r2, r5
 800413e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004140:	c243      	stmia	r2!, {r0, r1, r6}
 8004142:	0019      	movs	r1, r3
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	888b      	ldrh	r3, [r1, #4]
 800414a:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800414c:	0028      	movs	r0, r5
 800414e:	f7fb ffe3 	bl	8000118 <strlen>
 8004152:	b282      	uxth	r2, r0
 8004154:	2301      	movs	r3, #1
 8004156:	425b      	negs	r3, r3
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	3333      	adds	r3, #51	; 0x33
 800415c:	0029      	movs	r1, r5
 800415e:	0020      	movs	r0, r4
 8004160:	f00b fb22 	bl	800f7a8 <writePxMutex>
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004164:	2501      	movs	r5, #1
 8004166:	e013      	b.n	8004190 <DisplayTopology+0x60>
		sprintf(pcUserMessage,"P%d\t",i);
 8004168:	4e49      	ldr	r6, [pc, #292]	; (8004290 <DisplayTopology+0x160>)
 800416a:	002a      	movs	r2, r5
 800416c:	494a      	ldr	r1, [pc, #296]	; (8004298 <DisplayTopology+0x168>)
 800416e:	0030      	movs	r0, r6
 8004170:	f011 fa84 	bl	801567c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004174:	0030      	movs	r0, r6
 8004176:	f7fb ffcf 	bl	8000118 <strlen>
 800417a:	b282      	uxth	r2, r0
 800417c:	2301      	movs	r3, #1
 800417e:	425b      	negs	r3, r3
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	3333      	adds	r3, #51	; 0x33
 8004184:	0031      	movs	r1, r6
 8004186:	9803      	ldr	r0, [sp, #12]
 8004188:	f00b fb0e 	bl	800f7a8 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800418c:	3501      	adds	r5, #1
 800418e:	b2ed      	uxtb	r5, r5
 8004190:	2d05      	cmp	r5, #5
 8004192:	d9e9      	bls.n	8004168 <DisplayTopology+0x38>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8004194:	2301      	movs	r3, #1
 8004196:	425b      	negs	r3, r3
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	3333      	adds	r3, #51	; 0x33
 800419c:	2203      	movs	r2, #3
 800419e:	493f      	ldr	r1, [pc, #252]	; (800429c <DisplayTopology+0x16c>)
 80041a0:	9803      	ldr	r0, [sp, #12]
 80041a2:	f00b fb01 	bl	800f7a8 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 80041a6:	2400      	movs	r4, #0
 80041a8:	e031      	b.n	800420e <DisplayTopology+0xde>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 80041aa:	2307      	movs	r3, #7
 80041ac:	4013      	ands	r3, r2
 80041ae:	08d2      	lsrs	r2, r2, #3
 80041b0:	493b      	ldr	r1, [pc, #236]	; (80042a0 <DisplayTopology+0x170>)
 80041b2:	4837      	ldr	r0, [pc, #220]	; (8004290 <DisplayTopology+0x160>)
 80041b4:	f011 fa62 	bl	801567c <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80041b8:	4f35      	ldr	r7, [pc, #212]	; (8004290 <DisplayTopology+0x160>)
 80041ba:	0038      	movs	r0, r7
 80041bc:	f7fb ffac 	bl	8000118 <strlen>
 80041c0:	b282      	uxth	r2, r0
 80041c2:	2301      	movs	r3, #1
 80041c4:	425b      	negs	r3, r3
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	3333      	adds	r3, #51	; 0x33
 80041ca:	0039      	movs	r1, r7
 80041cc:	9803      	ldr	r0, [sp, #12]
 80041ce:	f00b faeb 	bl	800f7a8 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 80041d2:	3501      	adds	r5, #1
 80041d4:	b2ed      	uxtb	r5, r5
 80041d6:	2d05      	cmp	r5, #5
 80041d8:	d80e      	bhi.n	80041f8 <DisplayTopology+0xc8>
			if(!array[row][col])
 80041da:	00b3      	lsls	r3, r6, #2
 80041dc:	199b      	adds	r3, r3, r6
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	199b      	adds	r3, r3, r6
 80041e2:	195b      	adds	r3, r3, r5
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4a2f      	ldr	r2, [pc, #188]	; (80042a4 <DisplayTopology+0x174>)
 80041e8:	5a9a      	ldrh	r2, [r3, r2]
 80041ea:	2a00      	cmp	r2, #0
 80041ec:	d1dd      	bne.n	80041aa <DisplayTopology+0x7a>
				sprintf(pcUserMessage,"%d\t",0);
 80041ee:	492e      	ldr	r1, [pc, #184]	; (80042a8 <DisplayTopology+0x178>)
 80041f0:	4827      	ldr	r0, [pc, #156]	; (8004290 <DisplayTopology+0x160>)
 80041f2:	f011 fa43 	bl	801567c <sprintf>
 80041f6:	e7df      	b.n	80041b8 <DisplayTopology+0x88>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 80041f8:	2301      	movs	r3, #1
 80041fa:	425b      	negs	r3, r3
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	3333      	adds	r3, #51	; 0x33
 8004200:	2202      	movs	r2, #2
 8004202:	492a      	ldr	r1, [pc, #168]	; (80042ac <DisplayTopology+0x17c>)
 8004204:	9803      	ldr	r0, [sp, #12]
 8004206:	f00b facf 	bl	800f7a8 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 800420a:	3401      	adds	r4, #1
 800420c:	b2e4      	uxtb	r4, r4
 800420e:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <DisplayTopology+0x180>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	42a3      	cmp	r3, r4
 8004214:	d930      	bls.n	8004278 <DisplayTopology+0x148>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8004216:	0026      	movs	r6, r4
 8004218:	1c62      	adds	r2, r4, #1
 800421a:	4d1d      	ldr	r5, [pc, #116]	; (8004290 <DisplayTopology+0x160>)
 800421c:	4925      	ldr	r1, [pc, #148]	; (80042b4 <DisplayTopology+0x184>)
 800421e:	0028      	movs	r0, r5
 8004220:	f011 fa2c 	bl	801567c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004224:	0028      	movs	r0, r5
 8004226:	f7fb ff77 	bl	8000118 <strlen>
 800422a:	b282      	uxth	r2, r0
 800422c:	2701      	movs	r7, #1
 800422e:	427f      	negs	r7, r7
 8004230:	9700      	str	r7, [sp, #0]
 8004232:	2332      	movs	r3, #50	; 0x32
 8004234:	0029      	movs	r1, r5
 8004236:	9803      	ldr	r0, [sp, #12]
 8004238:	f00b fab6 	bl	800f7a8 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 800423c:	2316      	movs	r3, #22
 800423e:	4363      	muls	r3, r4
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <DisplayTopology+0x174>)
 8004242:	5a9a      	ldrh	r2, [r3, r2]
 8004244:	0053      	lsls	r3, r2, #1
 8004246:	189b      	adds	r3, r3, r2
 8004248:	0059      	lsls	r1, r3, #1
 800424a:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <DisplayTopology+0x188>)
 800424c:	18c9      	adds	r1, r1, r3
 800424e:	2205      	movs	r2, #5
 8004250:	0028      	movs	r0, r5
 8004252:	f011 fa68 	bl	8015726 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8004256:	9700      	str	r7, [sp, #0]
 8004258:	2332      	movs	r3, #50	; 0x32
 800425a:	2205      	movs	r2, #5
 800425c:	0029      	movs	r1, r5
 800425e:	9d03      	ldr	r5, [sp, #12]
 8004260:	0028      	movs	r0, r5
 8004262:	f00b faa1 	bl	800f7a8 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8004266:	9700      	str	r7, [sp, #0]
 8004268:	2332      	movs	r3, #50	; 0x32
 800426a:	2201      	movs	r2, #1
 800426c:	4913      	ldr	r1, [pc, #76]	; (80042bc <DisplayTopology+0x18c>)
 800426e:	0028      	movs	r0, r5
 8004270:	f00b fa9a 	bl	800f7a8 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8004274:	2501      	movs	r5, #1
 8004276:	e7ae      	b.n	80041d6 <DisplayTopology+0xa6>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8004278:	2301      	movs	r3, #1
 800427a:	425b      	negs	r3, r3
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	3333      	adds	r3, #51	; 0x33
 8004280:	2201      	movs	r2, #1
 8004282:	490f      	ldr	r1, [pc, #60]	; (80042c0 <DisplayTopology+0x190>)
 8004284:	9803      	ldr	r0, [sp, #12]
 8004286:	f00b fa8f 	bl	800f7a8 <writePxMutex>
}
 800428a:	b005      	add	sp, #20
 800428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	20001090 	.word	0x20001090
 8004294:	08019e1c 	.word	0x08019e1c
 8004298:	08019e30 	.word	0x08019e30
 800429c:	0801b2b0 	.word	0x0801b2b0
 80042a0:	08019e48 	.word	0x08019e48
 80042a4:	20000aa0 	.word	0x20000aa0
 80042a8:	08019e44 	.word	0x08019e44
 80042ac:	08019cc4 	.word	0x08019cc4
 80042b0:	2000001c 	.word	0x2000001c
 80042b4:	08019e38 	.word	0x08019e38
 80042b8:	08019e84 	.word	0x08019e84
 80042bc:	08019e2c 	.word	0x08019e2c
 80042c0:	0801b474 	.word	0x0801b474

080042c4 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b083      	sub	sp, #12
 80042c8:	0005      	movs	r5, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 80042ca:	4c2d      	ldr	r4, [pc, #180]	; (8004380 <DisplayPortsDir+0xbc>)
 80042cc:	492d      	ldr	r1, [pc, #180]	; (8004384 <DisplayPortsDir+0xc0>)
 80042ce:	0023      	movs	r3, r4
 80042d0:	000a      	movs	r2, r1
 80042d2:	ca43      	ldmia	r2!, {r0, r1, r6}
 80042d4:	c343      	stmia	r3!, {r0, r1, r6}
 80042d6:	ca43      	ldmia	r2!, {r0, r1, r6}
 80042d8:	c343      	stmia	r3!, {r0, r1, r6}
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	601a      	str	r2, [r3, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80042de:	0020      	movs	r0, r4
 80042e0:	f7fb ff1a 	bl	8000118 <strlen>
 80042e4:	b282      	uxth	r2, r0
 80042e6:	2301      	movs	r3, #1
 80042e8:	425b      	negs	r3, r3
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	3333      	adds	r3, #51	; 0x33
 80042ee:	0021      	movs	r1, r4
 80042f0:	0028      	movs	r0, r5
 80042f2:	f00b fa59 	bl	800f7a8 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 80042f6:	2601      	movs	r6, #1
 80042f8:	e023      	b.n	8004342 <DisplayPortsDir+0x7e>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 80042fa:	3401      	adds	r4, #1
 80042fc:	b2e4      	uxtb	r4, r4
 80042fe:	2c0a      	cmp	r4, #10
 8004300:	d81d      	bhi.n	800433e <DisplayPortsDir+0x7a>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004302:	1e73      	subs	r3, r6, #1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	4a20      	ldr	r2, [pc, #128]	; (8004388 <DisplayPortsDir+0xc4>)
 8004308:	5a9a      	ldrh	r2, [r3, r2]
 800430a:	1e61      	subs	r1, r4, #1
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	410b      	asrs	r3, r1
 8004312:	4213      	tst	r3, r2
 8004314:	d0f1      	beq.n	80042fa <DisplayPortsDir+0x36>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8004316:	4f1a      	ldr	r7, [pc, #104]	; (8004380 <DisplayPortsDir+0xbc>)
 8004318:	0023      	movs	r3, r4
 800431a:	0032      	movs	r2, r6
 800431c:	491b      	ldr	r1, [pc, #108]	; (800438c <DisplayPortsDir+0xc8>)
 800431e:	0038      	movs	r0, r7
 8004320:	f011 f9ac 	bl	801567c <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8004324:	0038      	movs	r0, r7
 8004326:	f7fb fef7 	bl	8000118 <strlen>
 800432a:	b282      	uxth	r2, r0
 800432c:	2301      	movs	r3, #1
 800432e:	425b      	negs	r3, r3
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	3333      	adds	r3, #51	; 0x33
 8004334:	0039      	movs	r1, r7
 8004336:	0028      	movs	r0, r5
 8004338:	f00b fa36 	bl	800f7a8 <writePxMutex>
 800433c:	e7dd      	b.n	80042fa <DisplayPortsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 800433e:	3601      	adds	r6, #1
 8004340:	b2f6      	uxtb	r6, r6
 8004342:	4b13      	ldr	r3, [pc, #76]	; (8004390 <DisplayPortsDir+0xcc>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	42b3      	cmp	r3, r6
 8004348:	d301      	bcc.n	800434e <DisplayPortsDir+0x8a>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 800434a:	2401      	movs	r4, #1
 800434c:	e7d7      	b.n	80042fe <DisplayPortsDir+0x3a>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 800434e:	4c0c      	ldr	r4, [pc, #48]	; (8004380 <DisplayPortsDir+0xbc>)
 8004350:	4910      	ldr	r1, [pc, #64]	; (8004394 <DisplayPortsDir+0xd0>)
 8004352:	0023      	movs	r3, r4
 8004354:	000a      	movs	r2, r1
 8004356:	ca43      	ldmia	r2!, {r0, r1, r6}
 8004358:	c343      	stmia	r3!, {r0, r1, r6}
 800435a:	ca43      	ldmia	r2!, {r0, r1, r6}
 800435c:	c343      	stmia	r3!, {r0, r1, r6}
 800435e:	ca03      	ldmia	r2!, {r0, r1}
 8004360:	c303      	stmia	r3!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004362:	0020      	movs	r0, r4
 8004364:	f7fb fed8 	bl	8000118 <strlen>
 8004368:	b282      	uxth	r2, r0
 800436a:	2301      	movs	r3, #1
 800436c:	425b      	negs	r3, r3
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	3333      	adds	r3, #51	; 0x33
 8004372:	0021      	movs	r1, r4
 8004374:	0028      	movs	r0, r5
 8004376:	f00b fa17 	bl	800f7a8 <writePxMutex>
	HAL_MAX_DELAY);
}
 800437a:	b003      	add	sp, #12
 800437c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	20001090 	.word	0x20001090
 8004384:	08019dcc 	.word	0x08019dcc
 8004388:	20007238 	.word	0x20007238
 800438c:	08019de8 	.word	0x08019de8
 8004390:	2000001c 	.word	0x2000001c
 8004394:	08019dfc 	.word	0x08019dfc

08004398 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8004398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439a:	46c6      	mov	lr, r8
 800439c:	b500      	push	{lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	0007      	movs	r7, r0
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80043a2:	f00b fc57 	bl	800fc54 <FreeRTOS_CLIGetOutputBuffer>
 80043a6:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 80043a8:	2300      	movs	r3, #0
 80043aa:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 80043ac:	4b93      	ldr	r3, [pc, #588]	; (80045fc <DisplayModuleStatus+0x264>)
 80043ae:	781a      	ldrb	r2, [r3, #0]
 80043b0:	4d93      	ldr	r5, [pc, #588]	; (8004600 <DisplayModuleStatus+0x268>)
 80043b2:	4994      	ldr	r1, [pc, #592]	; (8004604 <DisplayModuleStatus+0x26c>)
 80043b4:	0028      	movs	r0, r5
 80043b6:	f011 f961 	bl	801567c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80043ba:	0029      	movs	r1, r5
 80043bc:	0020      	movs	r0, r4
 80043be:	f011 f97d 	bl	80156bc <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 80043c2:	4b91      	ldr	r3, [pc, #580]	; (8004608 <DisplayModuleStatus+0x270>)
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	4991      	ldr	r1, [pc, #580]	; (800460c <DisplayModuleStatus+0x274>)
 80043c8:	0028      	movs	r0, r5
 80043ca:	f011 f957 	bl	801567c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80043ce:	0029      	movs	r1, r5
 80043d0:	0020      	movs	r0, r4
 80043d2:	f011 f973 	bl	80156bc <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 80043d6:	2305      	movs	r3, #5
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	3b03      	subs	r3, #3
 80043dc:	2200      	movs	r2, #0
 80043de:	498c      	ldr	r1, [pc, #560]	; (8004610 <DisplayModuleStatus+0x278>)
 80043e0:	0028      	movs	r0, r5
 80043e2:	f011 f94b 	bl	801567c <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 80043e6:	0029      	movs	r1, r5
 80043e8:	0020      	movs	r0, r4
 80043ea:	f011 f967 	bl	80156bc <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 80043ee:	4a89      	ldr	r2, [pc, #548]	; (8004614 <DisplayModuleStatus+0x27c>)
 80043f0:	4989      	ldr	r1, [pc, #548]	; (8004618 <DisplayModuleStatus+0x280>)
 80043f2:	0028      	movs	r0, r5
 80043f4:	f011 f942 	bl	801567c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80043f8:	0029      	movs	r1, r5
 80043fa:	0020      	movs	r0, r4
 80043fc:	f011 f95e 	bl	80156bc <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8004400:	4a86      	ldr	r2, [pc, #536]	; (800461c <DisplayModuleStatus+0x284>)
 8004402:	4987      	ldr	r1, [pc, #540]	; (8004620 <DisplayModuleStatus+0x288>)
 8004404:	0028      	movs	r0, r5
 8004406:	f011 f939 	bl	801567c <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800440a:	0029      	movs	r1, r5
 800440c:	0020      	movs	r0, r4
 800440e:	f011 f955 	bl	80156bc <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004412:	4b84      	ldr	r3, [pc, #528]	; (8004624 <DisplayModuleStatus+0x28c>)
 8004414:	002a      	movs	r2, r5
 8004416:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004418:	c243      	stmia	r2!, {r0, r1, r6}
 800441a:	0019      	movs	r1, r3
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	888b      	ldrh	r3, [r1, #4]
 8004422:	8093      	strh	r3, [r2, #4]
 8004424:	798b      	ldrb	r3, [r1, #6]
 8004426:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8004428:	0029      	movs	r1, r5
 800442a:	0020      	movs	r0, r4
 800442c:	f011 f946 	bl	80156bc <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004430:	2501      	movs	r5, #1
 8004432:	e00d      	b.n	8004450 <DisplayModuleStatus+0xb8>
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8004434:	4b72      	ldr	r3, [pc, #456]	; (8004600 <DisplayModuleStatus+0x268>)
 8004436:	4a7c      	ldr	r2, [pc, #496]	; (8004628 <DisplayModuleStatus+0x290>)
 8004438:	6811      	ldr	r1, [r2, #0]
 800443a:	6019      	str	r1, [r3, #0]
 800443c:	8891      	ldrh	r1, [r2, #4]
 800443e:	8099      	strh	r1, [r3, #4]
 8004440:	7992      	ldrb	r2, [r2, #6]
 8004442:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004444:	496e      	ldr	r1, [pc, #440]	; (8004600 <DisplayModuleStatus+0x268>)
 8004446:	0020      	movs	r0, r4
 8004448:	f011 f938 	bl	80156bc <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800444c:	3501      	adds	r5, #1
 800444e:	b2ed      	uxtb	r5, r5
 8004450:	2d05      	cmp	r5, #5
 8004452:	d83b      	bhi.n	80044cc <DisplayModuleStatus+0x134>
		sprintf(pcUserMessage,"P%d: ",i);
 8004454:	4e6a      	ldr	r6, [pc, #424]	; (8004600 <DisplayModuleStatus+0x268>)
 8004456:	002a      	movs	r2, r5
 8004458:	4974      	ldr	r1, [pc, #464]	; (800462c <DisplayModuleStatus+0x294>)
 800445a:	0030      	movs	r0, r6
 800445c:	f011 f90e 	bl	801567c <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004460:	0031      	movs	r1, r6
 8004462:	0020      	movs	r0, r4
 8004464:	f011 f92a 	bl	80156bc <strcat>
		switch(portStatus[i]){
 8004468:	4b71      	ldr	r3, [pc, #452]	; (8004630 <DisplayModuleStatus+0x298>)
 800446a:	5d5b      	ldrb	r3, [r3, r5]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d8e9      	bhi.n	8004444 <DisplayModuleStatus+0xac>
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4a70      	ldr	r2, [pc, #448]	; (8004634 <DisplayModuleStatus+0x29c>)
 8004474:	58d3      	ldr	r3, [r2, r3]
 8004476:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004478:	4961      	ldr	r1, [pc, #388]	; (8004600 <DisplayModuleStatus+0x268>)
 800447a:	486f      	ldr	r0, [pc, #444]	; (8004638 <DisplayModuleStatus+0x2a0>)
 800447c:	000b      	movs	r3, r1
 800447e:	0002      	movs	r2, r0
 8004480:	ca43      	ldmia	r2!, {r0, r1, r6}
 8004482:	c343      	stmia	r3!, {r0, r1, r6}
 8004484:	ca03      	ldmia	r2!, {r0, r1}
 8004486:	c303      	stmia	r3!, {r0, r1}
 8004488:	7812      	ldrb	r2, [r2, #0]
 800448a:	701a      	strb	r2, [r3, #0]
				break;
 800448c:	e7da      	b.n	8004444 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Streaming\n\r");
 800448e:	4a5c      	ldr	r2, [pc, #368]	; (8004600 <DisplayModuleStatus+0x268>)
 8004490:	4b6a      	ldr	r3, [pc, #424]	; (800463c <DisplayModuleStatus+0x2a4>)
 8004492:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004494:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 8004496:	e7d5      	b.n	8004444 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8004498:	4959      	ldr	r1, [pc, #356]	; (8004600 <DisplayModuleStatus+0x268>)
 800449a:	4869      	ldr	r0, [pc, #420]	; (8004640 <DisplayModuleStatus+0x2a8>)
 800449c:	000b      	movs	r3, r1
 800449e:	0002      	movs	r2, r0
 80044a0:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044a2:	c343      	stmia	r3!, {r0, r1, r6}
 80044a4:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044a6:	c343      	stmia	r3!, {r0, r1, r6}
 80044a8:	8812      	ldrh	r2, [r2, #0]
 80044aa:	801a      	strh	r2, [r3, #0]
				break;
 80044ac:	e7ca      	b.n	8004444 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 80044ae:	4954      	ldr	r1, [pc, #336]	; (8004600 <DisplayModuleStatus+0x268>)
 80044b0:	4864      	ldr	r0, [pc, #400]	; (8004644 <DisplayModuleStatus+0x2ac>)
 80044b2:	000b      	movs	r3, r1
 80044b4:	0002      	movs	r2, r0
 80044b6:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044b8:	c343      	stmia	r3!, {r0, r1, r6}
 80044ba:	ca43      	ldmia	r2!, {r0, r1, r6}
 80044bc:	c343      	stmia	r3!, {r0, r1, r6}
 80044be:	6811      	ldr	r1, [r2, #0]
 80044c0:	6019      	str	r1, [r3, #0]
 80044c2:	8891      	ldrh	r1, [r2, #4]
 80044c4:	8099      	strh	r1, [r3, #4]
 80044c6:	7992      	ldrb	r2, [r2, #6]
 80044c8:	719a      	strb	r2, [r3, #6]
				break;
 80044ca:	e7bb      	b.n	8004444 <DisplayModuleStatus+0xac>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 80044cc:	494c      	ldr	r1, [pc, #304]	; (8004600 <DisplayModuleStatus+0x268>)
 80044ce:	485e      	ldr	r0, [pc, #376]	; (8004648 <DisplayModuleStatus+0x2b0>)
 80044d0:	000b      	movs	r3, r1
 80044d2:	0002      	movs	r2, r0
 80044d4:	ca61      	ldmia	r2!, {r0, r5, r6}
 80044d6:	c361      	stmia	r3!, {r0, r5, r6}
 80044d8:	ca61      	ldmia	r2!, {r0, r5, r6}
 80044da:	c361      	stmia	r3!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 80044dc:	0020      	movs	r0, r4
 80044de:	f011 f8ed 	bl	80156bc <strcat>
	for(char i =1; i <= 6; i++){
 80044e2:	2601      	movs	r6, #1
 80044e4:	e00b      	b.n	80044fe <DisplayModuleStatus+0x166>
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80044e6:	4d46      	ldr	r5, [pc, #280]	; (8004600 <DisplayModuleStatus+0x268>)
 80044e8:	0032      	movs	r2, r6
 80044ea:	4958      	ldr	r1, [pc, #352]	; (800464c <DisplayModuleStatus+0x2b4>)
 80044ec:	0028      	movs	r0, r5
 80044ee:	f011 f8c5 	bl	801567c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80044f2:	0029      	movs	r1, r5
 80044f4:	0020      	movs	r0, r4
 80044f6:	f011 f8e1 	bl	80156bc <strcat>
	for(char i =1; i <= 6; i++){
 80044fa:	3601      	adds	r6, #1
 80044fc:	b2f6      	uxtb	r6, r6
 80044fe:	2e06      	cmp	r6, #6
 8004500:	d822      	bhi.n	8004548 <DisplayModuleStatus+0x1b0>
		if(streamDMA[i - 1].Instance == 0){
 8004502:	1e75      	subs	r5, r6, #1
 8004504:	00eb      	lsls	r3, r5, #3
 8004506:	1b5b      	subs	r3, r3, r5
 8004508:	00da      	lsls	r2, r3, #3
 800450a:	4b51      	ldr	r3, [pc, #324]	; (8004650 <DisplayModuleStatus+0x2b8>)
 800450c:	58d3      	ldr	r3, [r2, r3]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0e9      	beq.n	80044e6 <DisplayModuleStatus+0x14e>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004512:	00eb      	lsls	r3, r5, #3
 8004514:	1b5b      	subs	r3, r3, r5
 8004516:	00da      	lsls	r2, r3, #3
 8004518:	4b4d      	ldr	r3, [pc, #308]	; (8004650 <DisplayModuleStatus+0x2b8>)
 800451a:	189b      	adds	r3, r3, r2
 800451c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800451e:	f007 fd43 	bl	800bfa8 <GetPort>
 8004522:	9003      	str	r0, [sp, #12]
 8004524:	00ad      	lsls	r5, r5, #2
 8004526:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <DisplayModuleStatus+0x2bc>)
 8004528:	58e8      	ldr	r0, [r5, r3]
 800452a:	f007 fd3d 	bl	800bfa8 <GetPort>
 800452e:	4d34      	ldr	r5, [pc, #208]	; (8004600 <DisplayModuleStatus+0x268>)
 8004530:	9000      	str	r0, [sp, #0]
 8004532:	9b03      	ldr	r3, [sp, #12]
 8004534:	0032      	movs	r2, r6
 8004536:	4948      	ldr	r1, [pc, #288]	; (8004658 <DisplayModuleStatus+0x2c0>)
 8004538:	0028      	movs	r0, r5
 800453a:	f011 f89f 	bl	801567c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800453e:	0029      	movs	r1, r5
 8004540:	0020      	movs	r0, r4
 8004542:	f011 f8bb 	bl	80156bc <strcat>
 8004546:	e7d8      	b.n	80044fa <DisplayModuleStatus+0x162>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004548:	0020      	movs	r0, r4
 800454a:	f7fb fde5 	bl	8000118 <strlen>
 800454e:	1820      	adds	r0, r4, r0
 8004550:	2203      	movs	r2, #3
 8004552:	4942      	ldr	r1, [pc, #264]	; (800465c <DisplayModuleStatus+0x2c4>)
 8004554:	f010 fe8f 	bl	8015276 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004558:	0020      	movs	r0, r4
 800455a:	f7fb fddd 	bl	8000118 <strlen>
 800455e:	1820      	adds	r0, r4, r0
 8004560:	221d      	movs	r2, #29
 8004562:	493f      	ldr	r1, [pc, #252]	; (8004660 <DisplayModuleStatus+0x2c8>)
 8004564:	f010 fe87 	bl	8015276 <memcpy>
	temp =strlen((char* )pcOutputString);
 8004568:	0020      	movs	r0, r4
 800456a:	f7fb fdd5 	bl	8000118 <strlen>
 800456e:	4680      	mov	r8, r0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004570:	2501      	movs	r5, #1
 8004572:	e001      	b.n	8004578 <DisplayModuleStatus+0x1e0>
 8004574:	3501      	adds	r5, #1
 8004576:	b2ed      	uxtb	r5, r5
 8004578:	2d05      	cmp	r5, #5
 800457a:	d816      	bhi.n	80045aa <DisplayModuleStatus+0x212>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800457c:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <DisplayModuleStatus+0x264>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	3b01      	subs	r3, #1
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4a37      	ldr	r2, [pc, #220]	; (8004664 <DisplayModuleStatus+0x2cc>)
 8004586:	5a9a      	ldrh	r2, [r3, r2]
 8004588:	1e69      	subs	r1, r5, #1
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	410b      	asrs	r3, r1
 8004590:	4213      	tst	r3, r2
 8004592:	d0ef      	beq.n	8004574 <DisplayModuleStatus+0x1dc>
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004594:	4e1a      	ldr	r6, [pc, #104]	; (8004600 <DisplayModuleStatus+0x268>)
 8004596:	002a      	movs	r2, r5
 8004598:	4933      	ldr	r1, [pc, #204]	; (8004668 <DisplayModuleStatus+0x2d0>)
 800459a:	0030      	movs	r0, r6
 800459c:	f011 f86e 	bl	801567c <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80045a0:	0031      	movs	r1, r6
 80045a2:	0020      	movs	r0, r4
 80045a4:	f011 f88a 	bl	80156bc <strcat>
 80045a8:	e7e4      	b.n	8004574 <DisplayModuleStatus+0x1dc>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80045aa:	0020      	movs	r0, r4
 80045ac:	f7fb fdb4 	bl	8000118 <strlen>
 80045b0:	4643      	mov	r3, r8
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	4298      	cmp	r0, r3
 80045b8:	d00d      	beq.n	80045d6 <DisplayModuleStatus+0x23e>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80045ba:	0020      	movs	r0, r4
 80045bc:	f7fb fdac 	bl	8000118 <strlen>
 80045c0:	1820      	adds	r0, r4, r0
 80045c2:	2203      	movs	r2, #3
 80045c4:	4925      	ldr	r1, [pc, #148]	; (800465c <DisplayModuleStatus+0x2c4>)
 80045c6:	f010 fe56 	bl	8015276 <memcpy>
	
	/* Display output */
	if(port)
 80045ca:	2f00      	cmp	r7, #0
 80045cc:	d109      	bne.n	80045e2 <DisplayModuleStatus+0x24a>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80045ce:	b004      	add	sp, #16
 80045d0:	bc04      	pop	{r2}
 80045d2:	4690      	mov	r8, r2
 80045d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 80045d6:	1820      	adds	r0, r4, r0
 80045d8:	2205      	movs	r2, #5
 80045da:	4924      	ldr	r1, [pc, #144]	; (800466c <DisplayModuleStatus+0x2d4>)
 80045dc:	f010 fe4b 	bl	8015276 <memcpy>
 80045e0:	e7eb      	b.n	80045ba <DisplayModuleStatus+0x222>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80045e2:	0020      	movs	r0, r4
 80045e4:	f7fb fd98 	bl	8000118 <strlen>
 80045e8:	b282      	uxth	r2, r0
 80045ea:	2301      	movs	r3, #1
 80045ec:	425b      	negs	r3, r3
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	3333      	adds	r3, #51	; 0x33
 80045f2:	0021      	movs	r1, r4
 80045f4:	0038      	movs	r0, r7
 80045f6:	f00b f8d7 	bl	800f7a8 <writePxMutex>
}
 80045fa:	e7e8      	b.n	80045ce <DisplayModuleStatus+0x236>
 80045fc:	20001066 	.word	0x20001066
 8004600:	20001090 	.word	0x20001090
 8004604:	08019c10 	.word	0x08019c10
 8004608:	20000a9f 	.word	0x20000a9f
 800460c:	08019c2c 	.word	0x08019c2c
 8004610:	08019c48 	.word	0x08019c48
 8004614:	08019c68 	.word	0x08019c68
 8004618:	08019c74 	.word	0x08019c74
 800461c:	08019c8c 	.word	0x08019c8c
 8004620:	08019c98 	.word	0x08019c98
 8004624:	08019cb4 	.word	0x08019cb4
 8004628:	08019cd0 	.word	0x08019cd0
 800462c:	08019cc8 	.word	0x08019cc8
 8004630:	200010e0 	.word	0x200010e0
 8004634:	08019bec 	.word	0x08019bec
 8004638:	08019cd8 	.word	0x08019cd8
 800463c:	08019cf0 	.word	0x08019cf0
 8004640:	08019cfc 	.word	0x08019cfc
 8004644:	08019d18 	.word	0x08019d18
 8004648:	08019d38 	.word	0x08019d38
 800464c:	08019d50 	.word	0x08019d50
 8004650:	20001d70 	.word	0x20001d70
 8004654:	2000144c 	.word	0x2000144c
 8004658:	08019d6c 	.word	0x08019d6c
 800465c:	08019cc4 	.word	0x08019cc4
 8004660:	08019d9c 	.word	0x08019d9c
 8004664:	20007238 	.word	0x20007238
 8004668:	08019dbc 	.word	0x08019dbc
 800466c:	08019dc4 	.word	0x08019dc4

08004670 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004674:	4929      	ldr	r1, [pc, #164]	; (800471c <GetID+0xac>)
 8004676:	f7fb fd45 	bl	8000104 <strcmp>
 800467a:	2800      	cmp	r0, #0
 800467c:	d00a      	beq.n	8004694 <GetID+0x24>
		return myID;
	else if(!strcmp(string,"all"))
 800467e:	4928      	ldr	r1, [pc, #160]	; (8004720 <GetID+0xb0>)
 8004680:	0028      	movs	r0, r5
 8004682:	f7fb fd3f 	bl	8000104 <strcmp>
 8004686:	2800      	cmp	r0, #0
 8004688:	d044      	beq.n	8004714 <GetID+0xa4>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 800468a:	782e      	ldrb	r6, [r5, #0]
 800468c:	2e23      	cmp	r6, #35	; 0x23
 800468e:	d004      	beq.n	800469a <GetID+0x2a>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004690:	2400      	movs	r4, #0
 8004692:	e016      	b.n	80046c2 <GetID+0x52>
		return myID;
 8004694:	4b23      	ldr	r3, [pc, #140]	; (8004724 <GetID+0xb4>)
 8004696:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004698:	bd70      	pop	{r4, r5, r6, pc}
		id =atol(string + 1);
 800469a:	1c68      	adds	r0, r5, #1
 800469c:	f010 fb61 	bl	8014d62 <atol>
 80046a0:	b2c0      	uxtb	r0, r0
		if(id > 0 && id <= N)
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d003      	beq.n	80046ae <GetID+0x3e>
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <GetID+0xb8>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	4283      	cmp	r3, r0
 80046ac:	d205      	bcs.n	80046ba <GetID+0x4a>
		else if(id == myID)
 80046ae:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <GetID+0xb4>)
 80046b0:	781c      	ldrb	r4, [r3, #0]
 80046b2:	4284      	cmp	r4, r0
 80046b4:	d130      	bne.n	8004718 <GetID+0xa8>
			return myID;
 80046b6:	b220      	sxth	r0, r4
 80046b8:	e7ee      	b.n	8004698 <GetID+0x28>
			return id;
 80046ba:	b200      	sxth	r0, r0
 80046bc:	e7ec      	b.n	8004698 <GetID+0x28>
		for(i =0; i < N; i++){
 80046be:	3401      	adds	r4, #1
 80046c0:	b2e4      	uxtb	r4, r4
 80046c2:	4b19      	ldr	r3, [pc, #100]	; (8004728 <GetID+0xb8>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	d90d      	bls.n	80046e6 <GetID+0x76>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 80046ca:	00a3      	lsls	r3, r4, #2
 80046cc:	191b      	adds	r3, r3, r4
 80046ce:	0059      	lsls	r1, r3, #1
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <GetID+0xbc>)
 80046d2:	18c9      	adds	r1, r1, r3
 80046d4:	0028      	movs	r0, r5
 80046d6:	f7fb fd15 	bl	8000104 <strcmp>
 80046da:	2800      	cmp	r0, #0
 80046dc:	d1ef      	bne.n	80046be <GetID+0x4e>
 80046de:	2e00      	cmp	r6, #0
 80046e0:	d0ed      	beq.n	80046be <GetID+0x4e>
				return (i);
 80046e2:	b220      	sxth	r0, r4
 80046e4:	e7d8      	b.n	8004698 <GetID+0x28>
		for(i =0; i < MaxNumOfGroups; i++){
 80046e6:	2600      	movs	r6, #0
 80046e8:	2e09      	cmp	r6, #9
 80046ea:	d811      	bhi.n	8004710 <GetID+0xa0>
			if(!strcmp(string,groupAlias[i]))
 80046ec:	00b3      	lsls	r3, r6, #2
 80046ee:	199b      	adds	r3, r3, r6
 80046f0:	005a      	lsls	r2, r3, #1
 80046f2:	490f      	ldr	r1, [pc, #60]	; (8004730 <GetID+0xc0>)
 80046f4:	1889      	adds	r1, r1, r2
 80046f6:	0028      	movs	r0, r5
 80046f8:	f7fb fd04 	bl	8000104 <strcmp>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d002      	beq.n	8004706 <GetID+0x96>
		for(i =0; i < MaxNumOfGroups; i++){
 8004700:	3601      	adds	r6, #1
 8004702:	b2f6      	uxtb	r6, r6
 8004704:	e7f0      	b.n	80046e8 <GetID+0x78>
				return (BOS_MULTICAST | (i << 8));
 8004706:	0234      	lsls	r4, r6, #8
 8004708:	20fe      	movs	r0, #254	; 0xfe
 800470a:	4320      	orrs	r0, r4
 800470c:	b200      	sxth	r0, r0
 800470e:	e7c3      	b.n	8004698 <GetID+0x28>
		return BOS_ERR_WrongName;
 8004710:	2064      	movs	r0, #100	; 0x64
 8004712:	e7c1      	b.n	8004698 <GetID+0x28>
		return BOS_BROADCAST;
 8004714:	20ff      	movs	r0, #255	; 0xff
 8004716:	e7bf      	b.n	8004698 <GetID+0x28>
			return BOS_ERR_WrongID;
 8004718:	2066      	movs	r0, #102	; 0x66
 800471a:	e7bd      	b.n	8004698 <GetID+0x28>
 800471c:	08019e50 	.word	0x08019e50
 8004720:	08019e54 	.word	0x08019e54
 8004724:	20001066 	.word	0x20001066
 8004728:	2000001c 	.word	0x2000001c
 800472c:	20000f58 	.word	0x20000f58
 8004730:	20000e4c 	.word	0x20000e4c

08004734 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	0006      	movs	r6, r0
 8004738:	000d      	movs	r5, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
 800473a:	2400      	movs	r4, #0
 800473c:	2c03      	cmp	r4, #3
 800473e:	dc09      	bgt.n	8004754 <NameModule+0x20>
		if(!strcmp(alias,BOSkeywords[i]))
 8004740:	00a3      	lsls	r3, r4, #2
 8004742:	4929      	ldr	r1, [pc, #164]	; (80047e8 <NameModule+0xb4>)
 8004744:	18c9      	adds	r1, r1, r3
 8004746:	0028      	movs	r0, r5
 8004748:	f7fb fcdc 	bl	8000104 <strcmp>
 800474c:	2800      	cmp	r0, #0
 800474e:	d043      	beq.n	80047d8 <NameModule+0xa4>
	for(i =0; i < NumOfKeywords; i++){
 8004750:	3401      	adds	r4, #1
 8004752:	e7f3      	b.n	800473c <NameModule+0x8>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004754:	2401      	movs	r4, #1
 8004756:	4b25      	ldr	r3, [pc, #148]	; (80047ec <NameModule+0xb8>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	42a3      	cmp	r3, r4
 800475c:	dd0b      	ble.n	8004776 <NameModule+0x42>
		if(!strcmp(alias,moduleAlias[i]))
 800475e:	00a3      	lsls	r3, r4, #2
 8004760:	191b      	adds	r3, r3, r4
 8004762:	0059      	lsls	r1, r3, #1
 8004764:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <NameModule+0xbc>)
 8004766:	18c9      	adds	r1, r1, r3
 8004768:	0028      	movs	r0, r5
 800476a:	f7fb fccb 	bl	8000104 <strcmp>
 800476e:	2800      	cmp	r0, #0
 8004770:	d034      	beq.n	80047dc <NameModule+0xa8>
	for(i =1; i < N; i++){
 8004772:	3401      	adds	r4, #1
 8004774:	e7ef      	b.n	8004756 <NameModule+0x22>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
 8004776:	2400      	movs	r4, #0
 8004778:	2c09      	cmp	r4, #9
 800477a:	dc0b      	bgt.n	8004794 <NameModule+0x60>
		if(!strcmp(alias,groupAlias[i]))
 800477c:	00a3      	lsls	r3, r4, #2
 800477e:	191b      	adds	r3, r3, r4
 8004780:	005a      	lsls	r2, r3, #1
 8004782:	491c      	ldr	r1, [pc, #112]	; (80047f4 <NameModule+0xc0>)
 8004784:	1889      	adds	r1, r1, r2
 8004786:	0028      	movs	r0, r5
 8004788:	f7fb fcbc 	bl	8000104 <strcmp>
 800478c:	2800      	cmp	r0, #0
 800478e:	d027      	beq.n	80047e0 <NameModule+0xac>
	for(i =0; i < MaxNumOfGroups; i++){
 8004790:	3401      	adds	r4, #1
 8004792:	e7f1      	b.n	8004778 <NameModule+0x44>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004794:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <NameModule+0xc4>)
 8004796:	4a19      	ldr	r2, [pc, #100]	; (80047fc <NameModule+0xc8>)
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <NameModule+0xc4>)
 800479c:	681c      	ldr	r4, [r3, #0]
 800479e:	2c00      	cmp	r4, #0
 80047a0:	d00f      	beq.n	80047c2 <NameModule+0x8e>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80047a6:	0038      	movs	r0, r7
 80047a8:	f7fb fcb6 	bl	8000118 <strlen>
 80047ac:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80047ae:	0039      	movs	r1, r7
 80047b0:	0028      	movs	r0, r5
 80047b2:	f010 ffa7 	bl	8015704 <strncmp>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d014      	beq.n	80047e4 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80047ba:	6862      	ldr	r2, [r4, #4]
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <NameModule+0xc4>)
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e7eb      	b.n	800479a <NameModule+0x66>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 80047c2:	00b3      	lsls	r3, r6, #2
 80047c4:	199e      	adds	r6, r3, r6
 80047c6:	0070      	lsls	r0, r6, #1
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <NameModule+0xbc>)
 80047ca:	18c0      	adds	r0, r0, r3
 80047cc:	0029      	movs	r1, r5
 80047ce:	f010 ff91 	bl	80156f4 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 80047d2:	f7ff f901 	bl	80039d8 <SaveEEalias>
	
	return result;
 80047d6:	e002      	b.n	80047de <NameModule+0xaa>
			return BOS_ERR_Keyword;
 80047d8:	2006      	movs	r0, #6
 80047da:	e000      	b.n	80047de <NameModule+0xaa>
			return BOS_ERR_ExistingAlias;
 80047dc:	2007      	movs	r0, #7
}
 80047de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80047e0:	2007      	movs	r0, #7
 80047e2:	e7fc      	b.n	80047de <NameModule+0xaa>
			return BOS_ERR_ExistingCmd;
 80047e4:	2008      	movs	r0, #8
 80047e6:	e7fa      	b.n	80047de <NameModule+0xaa>
 80047e8:	08019c00 	.word	0x08019c00
 80047ec:	2000001c 	.word	0x2000001c
 80047f0:	20000f58 	.word	0x20000f58
 80047f4:	20000e4c 	.word	0x20000e4c
 80047f8:	200010e8 	.word	0x200010e8
 80047fc:	200000c0 	.word	0x200000c0

08004800 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	0006      	movs	r6, r0
 8004804:	000d      	movs	r5, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004806:	2400      	movs	r4, #0
 8004808:	2c09      	cmp	r4, #9
 800480a:	dc14      	bgt.n	8004836 <AddModuleToGroup+0x36>
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800480c:	00a3      	lsls	r3, r4, #2
 800480e:	191b      	adds	r3, r3, r4
 8004810:	005a      	lsls	r2, r3, #1
 8004812:	4933      	ldr	r1, [pc, #204]	; (80048e0 <AddModuleToGroup+0xe0>)
 8004814:	1889      	adds	r1, r1, r2
 8004816:	0028      	movs	r0, r5
 8004818:	f7fb fc74 	bl	8000104 <strcmp>
 800481c:	2800      	cmp	r0, #0
 800481e:	d001      	beq.n	8004824 <AddModuleToGroup+0x24>
	for(i =0; i < MaxNumOfGroups; i++){
 8004820:	3401      	adds	r4, #1
 8004822:	e7f1      	b.n	8004808 <AddModuleToGroup+0x8>
			/* 1. Add this module to the group */
			groupModules[module - 1] |=(0x0001 << i);
 8004824:	3e01      	subs	r6, #1
 8004826:	2201      	movs	r2, #1
 8004828:	40a2      	lsls	r2, r4
 800482a:	492e      	ldr	r1, [pc, #184]	; (80048e4 <AddModuleToGroup+0xe4>)
 800482c:	0076      	lsls	r6, r6, #1
 800482e:	5a73      	ldrh	r3, [r6, r1]
 8004830:	4313      	orrs	r3, r2
 8004832:	5273      	strh	r3, [r6, r1]
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 8004834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(j =0; j < NumOfKeywords; j++){
 8004836:	2400      	movs	r4, #0
 8004838:	2c03      	cmp	r4, #3
 800483a:	dc09      	bgt.n	8004850 <AddModuleToGroup+0x50>
		if(!strcmp(group,BOSkeywords[j]))
 800483c:	00a3      	lsls	r3, r4, #2
 800483e:	492a      	ldr	r1, [pc, #168]	; (80048e8 <AddModuleToGroup+0xe8>)
 8004840:	18c9      	adds	r1, r1, r3
 8004842:	0028      	movs	r0, r5
 8004844:	f7fb fc5e 	bl	8000104 <strcmp>
 8004848:	2800      	cmp	r0, #0
 800484a:	d045      	beq.n	80048d8 <AddModuleToGroup+0xd8>
	for(j =0; j < NumOfKeywords; j++){
 800484c:	3401      	adds	r4, #1
 800484e:	e7f3      	b.n	8004838 <AddModuleToGroup+0x38>
	for(j =1; j < N; j++){
 8004850:	2401      	movs	r4, #1
 8004852:	4b26      	ldr	r3, [pc, #152]	; (80048ec <AddModuleToGroup+0xec>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	42a3      	cmp	r3, r4
 8004858:	dd0b      	ble.n	8004872 <AddModuleToGroup+0x72>
		if(!strcmp(group,moduleAlias[j]))
 800485a:	00a3      	lsls	r3, r4, #2
 800485c:	191b      	adds	r3, r3, r4
 800485e:	0059      	lsls	r1, r3, #1
 8004860:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <AddModuleToGroup+0xf0>)
 8004862:	18c9      	adds	r1, r1, r3
 8004864:	0028      	movs	r0, r5
 8004866:	f7fb fc4d 	bl	8000104 <strcmp>
 800486a:	2800      	cmp	r0, #0
 800486c:	d036      	beq.n	80048dc <AddModuleToGroup+0xdc>
	for(j =1; j < N; j++){
 800486e:	3401      	adds	r4, #1
 8004870:	e7ef      	b.n	8004852 <AddModuleToGroup+0x52>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004872:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <AddModuleToGroup+0xf4>)
 8004874:	4a20      	ldr	r2, [pc, #128]	; (80048f8 <AddModuleToGroup+0xf8>)
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	e002      	b.n	8004880 <AddModuleToGroup+0x80>
 800487a:	6862      	ldr	r2, [r4, #4]
 800487c:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <AddModuleToGroup+0xf4>)
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <AddModuleToGroup+0xf4>)
 8004882:	681c      	ldr	r4, [r3, #0]
 8004884:	2c00      	cmp	r4, #0
 8004886:	d01c      	beq.n	80048c2 <AddModuleToGroup+0xc2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800488c:	0038      	movs	r0, r7
 800488e:	f7fb fc43 	bl	8000118 <strlen>
 8004892:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004894:	0039      	movs	r1, r7
 8004896:	0028      	movs	r0, r5
 8004898:	f010 ff34 	bl	8015704 <strncmp>
 800489c:	2800      	cmp	r0, #0
 800489e:	d1ec      	bne.n	800487a <AddModuleToGroup+0x7a>
			return BOS_ERR_ExistingCmd;
 80048a0:	2008      	movs	r0, #8
 80048a2:	e7c7      	b.n	8004834 <AddModuleToGroup+0x34>
			strcpy(groupAlias[i],group);
 80048a4:	480e      	ldr	r0, [pc, #56]	; (80048e0 <AddModuleToGroup+0xe0>)
 80048a6:	1880      	adds	r0, r0, r2
 80048a8:	0029      	movs	r1, r5
 80048aa:	f010 ff23 	bl	80156f4 <strcpy>
	groupModules[module - 1] |=(0x0001 << i);
 80048ae:	3e01      	subs	r6, #1
 80048b0:	2201      	movs	r2, #1
 80048b2:	40a2      	lsls	r2, r4
 80048b4:	490b      	ldr	r1, [pc, #44]	; (80048e4 <AddModuleToGroup+0xe4>)
 80048b6:	0076      	lsls	r6, r6, #1
 80048b8:	5a73      	ldrh	r3, [r6, r1]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	5273      	strh	r3, [r6, r1]
	return result;
 80048be:	2000      	movs	r0, #0
 80048c0:	e7b8      	b.n	8004834 <AddModuleToGroup+0x34>
	for(i =0; i < MaxNumOfGroups; i++){
 80048c2:	2c09      	cmp	r4, #9
 80048c4:	dcf3      	bgt.n	80048ae <AddModuleToGroup+0xae>
		if(!groupAlias[i][0]){
 80048c6:	00a3      	lsls	r3, r4, #2
 80048c8:	191b      	adds	r3, r3, r4
 80048ca:	005a      	lsls	r2, r3, #1
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <AddModuleToGroup+0xe0>)
 80048ce:	5cd3      	ldrb	r3, [r2, r3]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0e7      	beq.n	80048a4 <AddModuleToGroup+0xa4>
	for(i =0; i < MaxNumOfGroups; i++){
 80048d4:	3401      	adds	r4, #1
 80048d6:	e7f4      	b.n	80048c2 <AddModuleToGroup+0xc2>
			return BOS_ERR_Keyword;
 80048d8:	2006      	movs	r0, #6
 80048da:	e7ab      	b.n	8004834 <AddModuleToGroup+0x34>
			return BOS_ERR_ExistingAlias;
 80048dc:	2007      	movs	r0, #7
 80048de:	e7a9      	b.n	8004834 <AddModuleToGroup+0x34>
 80048e0:	20000e4c 	.word	0x20000e4c
 80048e4:	20000eb0 	.word	0x20000eb0
 80048e8:	08019c00 	.word	0x08019c00
 80048ec:	2000001c 	.word	0x2000001c
 80048f0:	20000f58 	.word	0x20000f58
 80048f4:	200010ec 	.word	0x200010ec
 80048f8:	200000c0 	.word	0x200000c0

080048fc <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 80048fc:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 80048fe:	2601      	movs	r6, #1
	BOS_Status result =BOS_OK;
 8004900:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8004902:	e01d      	b.n	8004940 <ReadPortsDir+0x44>
				result =BOS_ERR_NoResponse;
			}
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004904:	3401      	adds	r4, #1
 8004906:	b2e4      	uxtb	r4, r4
 8004908:	2c05      	cmp	r4, #5
 800490a:	d817      	bhi.n	800493c <ReadPortsDir+0x40>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800490c:	0020      	movs	r0, r4
 800490e:	f00a ff2d 	bl	800f76c <GetUart>
 8004912:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	429a      	cmp	r2, r3
 800491a:	d1f3      	bne.n	8004904 <ReadPortsDir+0x8>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <ReadPortsDir+0x74>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	3b01      	subs	r3, #1
 8004922:	1e61      	subs	r1, r4, #1
 8004924:	2280      	movs	r2, #128	; 0x80
 8004926:	0212      	lsls	r2, r2, #8
 8004928:	410a      	asrs	r2, r1
 800492a:	0011      	movs	r1, r2
 800492c:	4811      	ldr	r0, [pc, #68]	; (8004974 <ReadPortsDir+0x78>)
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	5a1a      	ldrh	r2, [r3, r0]
 8004932:	430a      	orrs	r2, r1
 8004934:	521a      	strh	r2, [r3, r0]
 8004936:	e7e5      	b.n	8004904 <ReadPortsDir+0x8>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004938:	2401      	movs	r4, #1
 800493a:	e7e5      	b.n	8004908 <ReadPortsDir+0xc>
	for(uint8_t i =1; i <= N; i++){
 800493c:	3601      	adds	r6, #1
 800493e:	b2f6      	uxtb	r6, r6
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <ReadPortsDir+0x7c>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	42b3      	cmp	r3, r6
 8004946:	d311      	bcc.n	800496c <ReadPortsDir+0x70>
		if(i != myID){
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <ReadPortsDir+0x74>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	42b3      	cmp	r3, r6
 800494e:	d0f3      	beq.n	8004938 <ReadPortsDir+0x3c>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 8004950:	2200      	movs	r2, #0
 8004952:	2113      	movs	r1, #19
 8004954:	0030      	movs	r0, r6
 8004956:	f005 f8e1 	bl	8009b1c <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800495a:	2032      	movs	r0, #50	; 0x32
 800495c:	f00a fd72 	bl	800f444 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <ReadPortsDir+0x80>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0e9      	beq.n	800493c <ReadPortsDir+0x40>
				result =BOS_ERR_NoResponse;
 8004968:	2502      	movs	r5, #2
 800496a:	e7e7      	b.n	800493c <ReadPortsDir+0x40>
			}
		}
	}
	
	return result;
}
 800496c:	0028      	movs	r0, r5
 800496e:	bd70      	pop	{r4, r5, r6, pc}
 8004970:	20001066 	.word	0x20001066
 8004974:	20007238 	.word	0x20007238
 8004978:	2000001c 	.word	0x2000001c
 800497c:	200010f8 	.word	0x200010f8

08004980 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 8004980:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004982:	2401      	movs	r4, #1
 8004984:	e007      	b.n	8004996 <UpdateMyPortsDir+0x16>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004986:	0020      	movs	r0, r4
 8004988:	f00a fef0 	bl	800f76c <GetUart>
 800498c:	2101      	movs	r1, #1
 800498e:	f00a ff85 	bl	800f89c <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004992:	3401      	adds	r4, #1
 8004994:	b2e4      	uxtb	r4, r4
 8004996:	2c05      	cmp	r4, #5
 8004998:	d812      	bhi.n	80049c0 <UpdateMyPortsDir+0x40>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800499a:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <UpdateMyPortsDir+0x44>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <UpdateMyPortsDir+0x48>)
 80049a4:	5a9a      	ldrh	r2, [r3, r2]
 80049a6:	1e61      	subs	r1, r4, #1
 80049a8:	2380      	movs	r3, #128	; 0x80
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	410b      	asrs	r3, r1
 80049ae:	4213      	tst	r3, r2
 80049b0:	d1e9      	bne.n	8004986 <UpdateMyPortsDir+0x6>
			SwapUartPins(GetUart(p),NORMAL);
 80049b2:	0020      	movs	r0, r4
 80049b4:	f00a feda 	bl	800f76c <GetUart>
 80049b8:	2100      	movs	r1, #0
 80049ba:	f00a ff6f 	bl	800f89c <SwapUartPins>
 80049be:	e7e8      	b.n	8004992 <UpdateMyPortsDir+0x12>
		}
	}
	
	return result;
}
 80049c0:	2000      	movs	r0, #0
 80049c2:	bd10      	pop	{r4, pc}
 80049c4:	20001066 	.word	0x20001066
 80049c8:	20007238 	.word	0x20007238

080049cc <BOS_Init>:
void BOS_Init(void){
 80049cc:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 80049ce:	f00a fbf1 	bl	800f1b4 <RTC_Init>
	GetTimeDate();
 80049d2:	f00a fc8f 	bl	800f2f4 <GetTimeDate>
	EE_Init();
 80049d6:	f003 fa45 	bl	8007e64 <EE_Init>
	GPIO_Init();
 80049da:	f00a f947 	bl	800ec6c <GPIO_Init>
	DMA_Init();
 80049de:	f008 fed1 	bl	800d784 <DMA_Init>
	TIM_USEC_Init();
 80049e2:	f00a fcbb 	bl	800f35c <TIM_USEC_Init>
	CRC_Init();
 80049e6:	f00a f8ef 	bl	800ebc8 <CRC_Init>
	TIM_MSEC_Init();
 80049ea:	f00a fce9 	bl	800f3c0 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 80049ee:	f00a f9f1 	bl	800edd4 <IsFactoryReset>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d111      	bne.n	8004a1a <BOS_Init+0x4e>
	if(IsLowerCLIbaud()){
 80049f6:	f7ff f8d5 	bl	8003ba4 <IsLowerCLIbaud>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d053      	beq.n	8004aa6 <BOS_Init+0xda>
		CLI_LOW_Baudrate_Flag =1;
 80049fe:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <BOS_Init+0x10c>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004a04:	2032      	movs	r0, #50	; 0x32
 8004a06:	f00a fd1d 	bl	800f444 <StartMilliDelay>
		Module_Peripheral_Init();
 8004a0a:	f007 f915 	bl	800bc38 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004a0e:	4b33      	ldr	r3, [pc, #204]	; (8004adc <BOS_Init+0x110>)
 8004a10:	22e1      	movs	r2, #225	; 0xe1
 8004a12:	0252      	lsls	r2, r2, #9
 8004a14:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004a16:	2401      	movs	r4, #1
 8004a18:	e011      	b.n	8004a3e <BOS_Init+0x72>
		EE_FormatForFactoryReset();
 8004a1a:	f7ff f8b1 	bl	8003b80 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a1e:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a22:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <BOS_Init+0x114>)
 8004a24:	4a2f      	ldr	r2, [pc, #188]	; (8004ae4 <BOS_Init+0x118>)
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	e7fd      	b.n	8004a2c <BOS_Init+0x60>
			UpdateBaudrate(port,BOS.clibaudrate);
 8004a30:	4b2a      	ldr	r3, [pc, #168]	; (8004adc <BOS_Init+0x110>)
 8004a32:	6899      	ldr	r1, [r3, #8]
 8004a34:	0020      	movs	r0, r4
 8004a36:	f00a ff27 	bl	800f888 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004a3a:	3401      	adds	r4, #1
 8004a3c:	b2e4      	uxtb	r4, r4
 8004a3e:	2c05      	cmp	r4, #5
 8004a40:	d9f6      	bls.n	8004a30 <BOS_Init+0x64>
	LoadEEvars();
 8004a42:	f7fe ff97 	bl	8003974 <LoadEEvars>
	UpdateMyPortsDir();
 8004a46:	f7ff ff9b 	bl	8004980 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004a4a:	f009 fc01 	bl	800e250 <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 8004a4e:	4b26      	ldr	r3, [pc, #152]	; (8004ae8 <BOS_Init+0x11c>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02d      	beq.n	8004ab2 <BOS_Init+0xe6>
		IND_ON();
 8004a56:	2580      	movs	r5, #128	; 0x80
 8004a58:	012d      	lsls	r5, r5, #4
 8004a5a:	2490      	movs	r4, #144	; 0x90
 8004a5c:	05e4      	lsls	r4, r4, #23
 8004a5e:	2201      	movs	r2, #1
 8004a60:	0029      	movs	r1, r5
 8004a62:	0020      	movs	r0, r4
 8004a64:	f00e fc55 	bl	8013312 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8004a68:	20fa      	movs	r0, #250	; 0xfa
 8004a6a:	0040      	lsls	r0, r0, #1
 8004a6c:	f00a fcea 	bl	800f444 <StartMilliDelay>
		IND_OFF();
 8004a70:	2200      	movs	r2, #0
 8004a72:	0029      	movs	r1, r5
 8004a74:	0020      	movs	r0, r4
 8004a76:	f00e fc4c 	bl	8013312 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004a7a:	2064      	movs	r0, #100	; 0x64
 8004a7c:	f00a fce2 	bl	800f444 <StartMilliDelay>
		IND_ON();
 8004a80:	2201      	movs	r2, #1
 8004a82:	0029      	movs	r1, r5
 8004a84:	0020      	movs	r0, r4
 8004a86:	f00e fc44 	bl	8013312 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004a8a:	2064      	movs	r0, #100	; 0x64
 8004a8c:	f00a fcda 	bl	800f444 <StartMilliDelay>
		IND_OFF();
 8004a90:	2200      	movs	r2, #0
 8004a92:	0029      	movs	r1, r5
 8004a94:	0020      	movs	r0, r4
 8004a96:	f00e fc3c 	bl	8013312 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004a9a:	f003 f81d 	bl	8007ad8 <ResetUartORE>
	BOS_initialized =1;
 8004a9e:	4b13      	ldr	r3, [pc, #76]	; (8004aec <BOS_Init+0x120>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
}
 8004aa4:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004aa6:	2032      	movs	r0, #50	; 0x32
 8004aa8:	f00a fccc 	bl	800f444 <StartMilliDelay>
		Module_Peripheral_Init();
 8004aac:	f007 f8c4 	bl	800bc38 <Module_Peripheral_Init>
 8004ab0:	e7c7      	b.n	8004a42 <BOS_Init+0x76>
		IND_ON();
 8004ab2:	2580      	movs	r5, #128	; 0x80
 8004ab4:	012d      	lsls	r5, r5, #4
 8004ab6:	2490      	movs	r4, #144	; 0x90
 8004ab8:	05e4      	lsls	r4, r4, #23
 8004aba:	2201      	movs	r2, #1
 8004abc:	0029      	movs	r1, r5
 8004abe:	0020      	movs	r0, r4
 8004ac0:	f00e fc27 	bl	8013312 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8004ac4:	20fa      	movs	r0, #250	; 0xfa
 8004ac6:	0040      	lsls	r0, r0, #1
 8004ac8:	f00a fcbc 	bl	800f444 <StartMilliDelay>
 8004acc:	2200      	movs	r2, #0
 8004ace:	0029      	movs	r1, r5
 8004ad0:	0020      	movs	r0, r4
 8004ad2:	f00e fc1e 	bl	8013312 <HAL_GPIO_WritePin>
 8004ad6:	e7e0      	b.n	8004a9a <BOS_Init+0xce>
 8004ad8:	20000a9e 	.word	0x20000a9e
 8004adc:	20006da0 	.word	0x20006da0
 8004ae0:	e000ed00 	.word	0xe000ed00
 8004ae4:	05fa0004 	.word	0x05fa0004
 8004ae8:	20001066 	.word	0x20001066
 8004aec:	20000a9d 	.word	0x20000a9d

08004af0 <Module_Init>:
void Module_Init(void){
 8004af0:	b510      	push	{r4, lr}
	HAL_Init();
 8004af2:	f00c ffeb 	bl	8011acc <HAL_Init>
	SystemClock_Config();
 8004af6:	f007 f847 	bl	800bb88 <SystemClock_Config>
	BOS_Init();
 8004afa:	f7ff ff67 	bl	80049cc <BOS_Init>
	MX_FREERTOS_Init();
 8004afe:	f003 fbcf 	bl	80082a0 <MX_FREERTOS_Init>
	osKernelStart();
 8004b02:	f00a ff80 	bl	800fa06 <osKernelStart>
}
 8004b06:	bd10      	pop	{r4, pc}

08004b08 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004b08:	b530      	push	{r4, r5, lr}
 8004b0a:	b083      	sub	sp, #12
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004b0c:	201e      	movs	r0, #30
 8004b0e:	f010 f965 	bl	8014ddc <malloc>
 8004b12:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8004b14:	221e      	movs	r2, #30
 8004b16:	2100      	movs	r1, #0
 8004b18:	f010 fbb6 	bl	8015288 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004b1c:	4908      	ldr	r1, [pc, #32]	; (8004b40 <GetDateString+0x38>)
 8004b1e:	7d0a      	ldrb	r2, [r1, #20]
 8004b20:	3a01      	subs	r2, #1
 8004b22:	7d8b      	ldrb	r3, [r1, #22]
 8004b24:	7d48      	ldrb	r0, [r1, #21]
 8004b26:	8b09      	ldrh	r1, [r1, #24]
 8004b28:	0092      	lsls	r2, r2, #2
 8004b2a:	4d06      	ldr	r5, [pc, #24]	; (8004b44 <GetDateString+0x3c>)
 8004b2c:	5952      	ldr	r2, [r2, r5]
 8004b2e:	9101      	str	r1, [sp, #4]
 8004b30:	9000      	str	r0, [sp, #0]
 8004b32:	4905      	ldr	r1, [pc, #20]	; (8004b48 <GetDateString+0x40>)
 8004b34:	0020      	movs	r0, r4
 8004b36:	f010 fda1 	bl	801567c <sprintf>
	return buffer;
}
 8004b3a:	0020      	movs	r0, r4
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bd30      	pop	{r4, r5, pc}
 8004b40:	20006da0 	.word	0x20006da0
 8004b44:	0801a164 	.word	0x0801a164
 8004b48:	08019e70 	.word	0x08019e70

08004b4c <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004b4c:	b500      	push	{lr}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <Bridge+0x24>)
 8004b54:	7819      	ldrb	r1, [r3, #0]
 8004b56:	2301      	movs	r3, #1
 8004b58:	9303      	str	r3, [sp, #12]
 8004b5a:	3b02      	subs	r3, #2
 8004b5c:	9302      	str	r3, [sp, #8]
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	3303      	adds	r3, #3
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	000b      	movs	r3, r1
 8004b66:	f004 ffff 	bl	8009b68 <StartScastDMAStream>
}
 8004b6a:	b005      	add	sp, #20
 8004b6c:	bd00      	pop	{pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	20001066 	.word	0x20001066

08004b74 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004b74:	b530      	push	{r4, r5, lr}
 8004b76:	b087      	sub	sp, #28
 8004b78:	0004      	movs	r4, r0
 8004b7a:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	9304      	str	r3, [sp, #16]
 8004b80:	9303      	str	r3, [sp, #12]
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	f7fe ff53 	bl	8003a38 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004b92:	1e62      	subs	r2, r4, #1
 8004b94:	00d3      	lsls	r3, r2, #3
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	00da      	lsls	r2, r3, #3
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <Unbridge+0x7c>)
 8004b9c:	58d2      	ldr	r2, [r2, r3]
 8004b9e:	2a00      	cmp	r2, #0
 8004ba0:	d007      	beq.n	8004bb2 <Unbridge+0x3e>
 8004ba2:	1e69      	subs	r1, r5, #1
 8004ba4:	00cb      	lsls	r3, r1, #3
 8004ba6:	1a5b      	subs	r3, r3, r1
 8004ba8:	00d9      	lsls	r1, r3, #3
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <Unbridge+0x7c>)
 8004bac:	58cb      	ldr	r3, [r1, r3]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10e      	bne.n	8004bd0 <Unbridge+0x5c>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
 8004bb2:	2a00      	cmp	r2, #0
 8004bb4:	d115      	bne.n	8004be2 <Unbridge+0x6e>
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
 8004bb6:	1e6a      	subs	r2, r5, #1
 8004bb8:	00d3      	lsls	r3, r2, #3
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	00da      	lsls	r2, r3, #3
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <Unbridge+0x7c>)
 8004bc0:	58d3      	ldr	r3, [r2, r3]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d012      	beq.n	8004bec <Unbridge+0x78>
		SwitchStreamDMAToMsg(port2);
 8004bc6:	0028      	movs	r0, r5
 8004bc8:	f002 fef6 	bl	80079b8 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004bcc:	2000      	movs	r0, #0
 8004bce:	e006      	b.n	8004bde <Unbridge+0x6a>
		SwitchStreamDMAToMsg(port1);
 8004bd0:	0020      	movs	r0, r4
 8004bd2:	f002 fef1 	bl	80079b8 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 8004bd6:	0028      	movs	r0, r5
 8004bd8:	f002 feee 	bl	80079b8 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004bdc:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004bde:	b007      	add	sp, #28
 8004be0:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 8004be2:	0020      	movs	r0, r4
 8004be4:	f002 fee8 	bl	80079b8 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004be8:	2000      	movs	r0, #0
 8004bea:	e7f8      	b.n	8004bde <Unbridge+0x6a>
		return BOS_ERR_WrongValue;
 8004bec:	2068      	movs	r0, #104	; 0x68
 8004bee:	e7f6      	b.n	8004bde <Unbridge+0x6a>
 8004bf0:	20001d70 	.word	0x20001d70

08004bf4 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	0007      	movs	r7, r0
	for(int i =0; string[i]; i++){
 8004bf8:	2500      	movs	r5, #0
 8004bfa:	e001      	b.n	8004c00 <StringToLowerCase+0xc>
		string[i] =tolower(string[i]);
 8004bfc:	7034      	strb	r4, [r6, #0]
	for(int i =0; string[i]; i++){
 8004bfe:	3501      	adds	r5, #1
 8004c00:	197e      	adds	r6, r7, r5
 8004c02:	7834      	ldrb	r4, [r6, #0]
 8004c04:	2c00      	cmp	r4, #0
 8004c06:	d009      	beq.n	8004c1c <StringToLowerCase+0x28>
		string[i] =tolower(string[i]);
 8004c08:	f010 f8da 	bl	8014dc0 <__locale_ctype_ptr>
 8004c0c:	1900      	adds	r0, r0, r4
 8004c0e:	7842      	ldrb	r2, [r0, #1]
 8004c10:	2303      	movs	r3, #3
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d1f1      	bne.n	8004bfc <StringToLowerCase+0x8>
 8004c18:	3420      	adds	r4, #32
 8004c1a:	e7ef      	b.n	8004bfc <StringToLowerCase+0x8>
	}
}
 8004c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c20 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c22:	46c6      	mov	lr, r8
 8004c24:	b500      	push	{lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004c2a:	4bd7      	ldr	r3, [pc, #860]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004c2c:	781c      	ldrb	r4, [r3, #0]
 8004c2e:	2c05      	cmp	r4, #5
 8004c30:	d100      	bne.n	8004c34 <ParseSnippetCondition+0x14>
 8004c32:	e20d      	b.n	8005050 <ParseSnippetCondition+0x430>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004c34:	48d5      	ldr	r0, [pc, #852]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004c36:	00a3      	lsls	r3, r4, #2
 8004c38:	191a      	adds	r2, r3, r4
 8004c3a:	0091      	lsls	r1, r2, #2
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	540a      	strb	r2, [r1, r0]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004c40:	1840      	adds	r0, r0, r1
 8004c42:	7042      	strb	r2, [r0, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004c44:	3002      	adds	r0, #2
 8004c46:	3204      	adds	r2, #4
 8004c48:	2100      	movs	r1, #0
 8004c4a:	f010 fb1d 	bl	8015288 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004c4e:	782b      	ldrb	r3, [r5, #0]
 8004c50:	2b62      	cmp	r3, #98	; 0x62
 8004c52:	d102      	bne.n	8004c5a <ParseSnippetCondition+0x3a>
 8004c54:	78ab      	ldrb	r3, [r5, #2]
 8004c56:	2b2e      	cmp	r3, #46	; 0x2e
 8004c58:	d04f      	beq.n	8004cfa <ParseSnippetCondition+0xda>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004c5a:	4ecd      	ldr	r6, [pc, #820]	; (8004f90 <ParseSnippetCondition+0x370>)
 8004c5c:	0029      	movs	r1, r5
 8004c5e:	0030      	movs	r0, r6
 8004c60:	f010 fd48 	bl	80156f4 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004c64:	4ccb      	ldr	r4, [pc, #812]	; (8004f94 <ParseSnippetCondition+0x374>)
 8004c66:	0021      	movs	r1, r4
 8004c68:	0030      	movs	r0, r6
 8004c6a:	f011 fbc3 	bl	80163f4 <strtok>
 8004c6e:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004c70:	0021      	movs	r1, r4
 8004c72:	2000      	movs	r0, #0
 8004c74:	f011 fbbe 	bl	80163f4 <strtok>
 8004c78:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 8004c7a:	0021      	movs	r1, r4
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f011 fbb9 	bl	80163f4 <strtok>
 8004c82:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004c84:	2d00      	cmp	r5, #0
 8004c86:	d100      	bne.n	8004c8a <ParseSnippetCondition+0x6a>
 8004c88:	e1e9      	b.n	800505e <ParseSnippetCondition+0x43e>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004c8a:	0028      	movs	r0, r5
 8004c8c:	f7fe ffec 	bl	8003c68 <IsModuleParameter>
 8004c90:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004c92:	d002      	beq.n	8004c9a <ParseSnippetCondition+0x7a>
 8004c94:	2e00      	cmp	r6, #0
 8004c96:	d100      	bne.n	8004c9a <ParseSnippetCondition+0x7a>
 8004c98:	e1ac      	b.n	8004ff4 <ParseSnippetCondition+0x3d4>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004c9a:	2e00      	cmp	r6, #0
 8004c9c:	d100      	bne.n	8004ca0 <ParseSnippetCondition+0x80>
 8004c9e:	e1e0      	b.n	8005062 <ParseSnippetCondition+0x442>
 8004ca0:	2c00      	cmp	r4, #0
 8004ca2:	d100      	bne.n	8004ca6 <ParseSnippetCondition+0x86>
 8004ca4:	e1df      	b.n	8005066 <ParseSnippetCondition+0x446>
				modPar2 =IsModuleParameter(thirdPart);
 8004ca6:	0020      	movs	r0, r4
 8004ca8:	f7fe ffde 	bl	8003c68 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d100      	bne.n	8004cb2 <ParseSnippetCondition+0x92>
 8004cb0:	e1b1      	b.n	8005016 <ParseSnippetCondition+0x3f6>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004cb2:	4bb5      	ldr	r3, [pc, #724]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004cb4:	7819      	ldrb	r1, [r3, #0]
 8004cb6:	4ab5      	ldr	r2, [pc, #724]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004cb8:	008b      	lsls	r3, r1, #2
 8004cba:	185f      	adds	r7, r3, r1
 8004cbc:	00bc      	lsls	r4, r7, #2
 8004cbe:	2704      	movs	r7, #4
 8004cc0:	54a7      	strb	r7, [r4, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cc2:	1914      	adds	r4, r2, r4
 8004cc4:	70e5      	strb	r5, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004cc6:	71e0      	strb	r0, [r4, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004cc8:	4daf      	ldr	r5, [pc, #700]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004cca:	782c      	ldrb	r4, [r5, #0]
 8004ccc:	0030      	movs	r0, r6
 8004cce:	f7fe ffe5 	bl	8003c9c <IsMathOperator>
 8004cd2:	4aae      	ldr	r2, [pc, #696]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004cd4:	00a1      	lsls	r1, r4, #2
 8004cd6:	1909      	adds	r1, r1, r4
 8004cd8:	008b      	lsls	r3, r1, #2
 8004cda:	18d3      	adds	r3, r2, r3
 8004cdc:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004cde:	782b      	ldrb	r3, [r5, #0]
 8004ce0:	0099      	lsls	r1, r3, #2
 8004ce2:	18c9      	adds	r1, r1, r3
 8004ce4:	0088      	lsls	r0, r1, #2
 8004ce6:	1812      	adds	r2, r2, r0
 8004ce8:	7852      	ldrb	r2, [r2, #1]
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	d100      	bne.n	8004cf0 <ParseSnippetCondition+0xd0>
 8004cee:	e1bc      	b.n	800506a <ParseSnippetCondition+0x44a>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	4aa5      	ldr	r2, [pc, #660]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004cf4:	7013      	strb	r3, [r2, #0]
				return BOS_OK;
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e1ab      	b.n	8005052 <ParseSnippetCondition+0x432>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004cfa:	786e      	ldrb	r6, [r5, #1]
 8004cfc:	3e30      	subs	r6, #48	; 0x30
 8004cfe:	b2f6      	uxtb	r6, r6
 8004d00:	2e05      	cmp	r6, #5
 8004d02:	d900      	bls.n	8004d06 <ParseSnippetCondition+0xe6>
 8004d04:	e1a9      	b.n	800505a <ParseSnippetCondition+0x43a>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004d06:	4ba1      	ldr	r3, [pc, #644]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004d08:	00a2      	lsls	r2, r4, #2
 8004d0a:	1910      	adds	r0, r2, r4
 8004d0c:	0081      	lsls	r1, r0, #2
 8004d0e:	2001      	movs	r0, #1
 8004d10:	54c8      	strb	r0, [r1, r3]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 8004d12:	185b      	adds	r3, r3, r1
 8004d14:	2200      	movs	r2, #0
 8004d16:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004d18:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004d1a:	1cef      	adds	r7, r5, #3
 8004d1c:	3207      	adds	r2, #7
 8004d1e:	499e      	ldr	r1, [pc, #632]	; (8004f98 <ParseSnippetCondition+0x378>)
 8004d20:	0038      	movs	r0, r7
 8004d22:	f010 fcef 	bl	8015704 <strncmp>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d122      	bne.n	8004d70 <ParseSnippetCondition+0x150>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004d2a:	00a3      	lsls	r3, r4, #2
 8004d2c:	191c      	adds	r4, r3, r4
 8004d2e:	00a2      	lsls	r2, r4, #2
 8004d30:	4b96      	ldr	r3, [pc, #600]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	2205      	movs	r2, #5
 8004d36:	70da      	strb	r2, [r3, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004d38:	00f2      	lsls	r2, r6, #3
 8004d3a:	1992      	adds	r2, r2, r6
 8004d3c:	4b97      	ldr	r3, [pc, #604]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	7a1b      	ldrb	r3, [r3, #8]
 8004d42:	07db      	lsls	r3, r3, #31
 8004d44:	d505      	bpl.n	8004d52 <ParseSnippetCondition+0x132>
				status =BOS_OK;
 8004d46:	2000      	movs	r0, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004d48:	4a8f      	ldr	r2, [pc, #572]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004d4a:	7813      	ldrb	r3, [r2, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	7013      	strb	r3, [r2, #0]
 8004d50:	e17f      	b.n	8005052 <ParseSnippetCondition+0x432>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004d52:	2301      	movs	r3, #1
 8004d54:	9305      	str	r3, [sp, #20]
 8004d56:	2300      	movs	r3, #0
 8004d58:	9304      	str	r3, [sp, #16]
 8004d5a:	9303      	str	r3, [sp, #12]
 8004d5c:	9302      	str	r3, [sp, #8]
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	2101      	movs	r1, #1
 8004d66:	0030      	movs	r0, r6
 8004d68:	f003 fd3c 	bl	80087e4 <SetButtonEvents>
				status =BOS_OK;
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e7eb      	b.n	8004d48 <ParseSnippetCondition+0x128>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004d70:	220e      	movs	r2, #14
 8004d72:	498b      	ldr	r1, [pc, #556]	; (8004fa0 <ParseSnippetCondition+0x380>)
 8004d74:	0038      	movs	r0, r7
 8004d76:	f010 fcc5 	bl	8015704 <strncmp>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d11e      	bne.n	8004dbc <ParseSnippetCondition+0x19c>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004d7e:	00a3      	lsls	r3, r4, #2
 8004d80:	191c      	adds	r4, r3, r4
 8004d82:	00a2      	lsls	r2, r4, #2
 8004d84:	4b81      	ldr	r3, [pc, #516]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004d86:	189b      	adds	r3, r3, r2
 8004d88:	2206      	movs	r2, #6
 8004d8a:	70da      	strb	r2, [r3, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004d8c:	00f2      	lsls	r2, r6, #3
 8004d8e:	1992      	adds	r2, r2, r6
 8004d90:	4b82      	ldr	r3, [pc, #520]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	7a1b      	ldrb	r3, [r3, #8]
 8004d96:	079b      	lsls	r3, r3, #30
 8004d98:	d501      	bpl.n	8004d9e <ParseSnippetCondition+0x17e>
				status =BOS_OK;
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e7d4      	b.n	8004d48 <ParseSnippetCondition+0x128>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004d9e:	2301      	movs	r3, #1
 8004da0:	9305      	str	r3, [sp, #20]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	9303      	str	r3, [sp, #12]
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	2100      	movs	r1, #0
 8004db2:	0030      	movs	r0, r6
 8004db4:	f003 fd16 	bl	80087e4 <SetButtonEvents>
				status =BOS_OK;
 8004db8:	2000      	movs	r0, #0
 8004dba:	e7c5      	b.n	8004d48 <ParseSnippetCondition+0x128>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004dbc:	220c      	movs	r2, #12
 8004dbe:	4979      	ldr	r1, [pc, #484]	; (8004fa4 <ParseSnippetCondition+0x384>)
 8004dc0:	0038      	movs	r0, r7
 8004dc2:	f010 fc9f 	bl	8015704 <strncmp>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d17b      	bne.n	8004ec2 <ParseSnippetCondition+0x2a2>
				if(!button[port].pressedX1Sec){
 8004dca:	00f2      	lsls	r2, r6, #3
 8004dcc:	1992      	adds	r2, r2, r6
 8004dce:	4b73      	ldr	r3, [pc, #460]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004dd0:	189b      	adds	r3, r3, r2
 8004dd2:	789b      	ldrb	r3, [r3, #2]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00f      	beq.n	8004df8 <ParseSnippetCondition+0x1d8>
				else if(!button[port].pressedX2Sec){
 8004dd8:	00f2      	lsls	r2, r6, #3
 8004dda:	1992      	adds	r2, r2, r6
 8004ddc:	4b6f      	ldr	r3, [pc, #444]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004dde:	189b      	adds	r3, r3, r2
 8004de0:	78db      	ldrb	r3, [r3, #3]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d029      	beq.n	8004e3a <ParseSnippetCondition+0x21a>
				else if(!button[port].pressedX3Sec){
 8004de6:	00f2      	lsls	r2, r6, #3
 8004de8:	1992      	adds	r2, r2, r6
 8004dea:	4b6c      	ldr	r3, [pc, #432]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004dec:	189b      	adds	r3, r3, r2
 8004dee:	791b      	ldrb	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d044      	beq.n	8004e7e <ParseSnippetCondition+0x25e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004df4:	200c      	movs	r0, #12
 8004df6:	e7a7      	b.n	8004d48 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004df8:	4f64      	ldr	r7, [pc, #400]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004dfa:	00a3      	lsls	r3, r4, #2
 8004dfc:	191c      	adds	r4, r3, r4
 8004dfe:	00a3      	lsls	r3, r4, #2
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	2209      	movs	r2, #9
 8004e04:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e06:	0028      	movs	r0, r5
 8004e08:	300f      	adds	r0, #15
 8004e0a:	f00f ffa4 	bl	8014d56 <atoi>
 8004e0e:	4b5e      	ldr	r3, [pc, #376]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004e10:	7819      	ldrb	r1, [r3, #0]
 8004e12:	b2c3      	uxtb	r3, r0
 8004e14:	008a      	lsls	r2, r1, #2
 8004e16:	1852      	adds	r2, r2, r1
 8004e18:	0091      	lsls	r1, r2, #2
 8004e1a:	187f      	adds	r7, r7, r1
 8004e1c:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e1e:	2201      	movs	r2, #1
 8004e20:	9205      	str	r2, [sp, #20]
 8004e22:	2200      	movs	r2, #0
 8004e24:	9204      	str	r2, [sp, #16]
 8004e26:	9203      	str	r2, [sp, #12]
 8004e28:	9202      	str	r2, [sp, #8]
 8004e2a:	9201      	str	r2, [sp, #4]
 8004e2c:	9200      	str	r2, [sp, #0]
 8004e2e:	2100      	movs	r1, #0
 8004e30:	0030      	movs	r0, r6
 8004e32:	f003 fcd7 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004e36:	2000      	movs	r0, #0
 8004e38:	e786      	b.n	8004d48 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004e3a:	4f54      	ldr	r7, [pc, #336]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004e3c:	00a3      	lsls	r3, r4, #2
 8004e3e:	191c      	adds	r4, r3, r4
 8004e40:	00a3      	lsls	r3, r4, #2
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	220a      	movs	r2, #10
 8004e46:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e48:	0028      	movs	r0, r5
 8004e4a:	300f      	adds	r0, #15
 8004e4c:	f00f ff83 	bl	8014d56 <atoi>
 8004e50:	4b4d      	ldr	r3, [pc, #308]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004e52:	781a      	ldrb	r2, [r3, #0]
 8004e54:	b2c0      	uxtb	r0, r0
 8004e56:	0093      	lsls	r3, r2, #2
 8004e58:	189b      	adds	r3, r3, r2
 8004e5a:	009a      	lsls	r2, r3, #2
 8004e5c:	18bf      	adds	r7, r7, r2
 8004e5e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e60:	2301      	movs	r3, #1
 8004e62:	9305      	str	r3, [sp, #20]
 8004e64:	2300      	movs	r3, #0
 8004e66:	9304      	str	r3, [sp, #16]
 8004e68:	9303      	str	r3, [sp, #12]
 8004e6a:	9302      	str	r3, [sp, #8]
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	9000      	str	r0, [sp, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	2100      	movs	r1, #0
 8004e74:	0030      	movs	r0, r6
 8004e76:	f003 fcb5 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e764      	b.n	8004d48 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004e7e:	4f43      	ldr	r7, [pc, #268]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004e80:	00a3      	lsls	r3, r4, #2
 8004e82:	191c      	adds	r4, r3, r4
 8004e84:	00a3      	lsls	r3, r4, #2
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	220b      	movs	r2, #11
 8004e8a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e8c:	0028      	movs	r0, r5
 8004e8e:	300f      	adds	r0, #15
 8004e90:	f00f ff61 	bl	8014d56 <atoi>
 8004e94:	4b3c      	ldr	r3, [pc, #240]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	b2c0      	uxtb	r0, r0
 8004e9a:	0093      	lsls	r3, r2, #2
 8004e9c:	189b      	adds	r3, r3, r2
 8004e9e:	009a      	lsls	r2, r3, #2
 8004ea0:	18bf      	adds	r7, r7, r2
 8004ea2:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	9305      	str	r3, [sp, #20]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9304      	str	r3, [sp, #16]
 8004eac:	9303      	str	r3, [sp, #12]
 8004eae:	9302      	str	r3, [sp, #8]
 8004eb0:	9001      	str	r0, [sp, #4]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	0030      	movs	r0, r6
 8004eba:	f003 fc93 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	e742      	b.n	8004d48 <ParseSnippetCondition+0x128>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004ec2:	220d      	movs	r2, #13
 8004ec4:	4938      	ldr	r1, [pc, #224]	; (8004fa8 <ParseSnippetCondition+0x388>)
 8004ec6:	0038      	movs	r0, r7
 8004ec8:	f010 fc1c 	bl	8015704 <strncmp>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d000      	beq.n	8004ed2 <ParseSnippetCondition+0x2b2>
 8004ed0:	e08e      	b.n	8004ff0 <ParseSnippetCondition+0x3d0>
				if(!button[port].releasedY1Sec){
 8004ed2:	00f2      	lsls	r2, r6, #3
 8004ed4:	1992      	adds	r2, r2, r6
 8004ed6:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004ed8:	189b      	adds	r3, r3, r2
 8004eda:	795b      	ldrb	r3, [r3, #5]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00f      	beq.n	8004f00 <ParseSnippetCondition+0x2e0>
				else if(!button[port].releasedY2Sec){
 8004ee0:	00f2      	lsls	r2, r6, #3
 8004ee2:	1992      	adds	r2, r2, r6
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	799b      	ldrb	r3, [r3, #6]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d02a      	beq.n	8004f44 <ParseSnippetCondition+0x324>
				else if(!button[port].releasedY3Sec){
 8004eee:	00f2      	lsls	r2, r6, #3
 8004ef0:	1992      	adds	r2, r2, r6
 8004ef2:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <ParseSnippetCondition+0x37c>)
 8004ef4:	189b      	adds	r3, r3, r2
 8004ef6:	79db      	ldrb	r3, [r3, #7]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d057      	beq.n	8004fac <ParseSnippetCondition+0x38c>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004efc:	200d      	movs	r0, #13
 8004efe:	e723      	b.n	8004d48 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004f00:	4f22      	ldr	r7, [pc, #136]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004f02:	00a3      	lsls	r3, r4, #2
 8004f04:	191c      	adds	r4, r3, r4
 8004f06:	00a3      	lsls	r3, r4, #2
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	220c      	movs	r2, #12
 8004f0c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004f0e:	0028      	movs	r0, r5
 8004f10:	3010      	adds	r0, #16
 8004f12:	f00f ff20 	bl	8014d56 <atoi>
 8004f16:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004f18:	781a      	ldrb	r2, [r3, #0]
 8004f1a:	b2c0      	uxtb	r0, r0
 8004f1c:	0093      	lsls	r3, r2, #2
 8004f1e:	189b      	adds	r3, r3, r2
 8004f20:	009a      	lsls	r2, r3, #2
 8004f22:	18bf      	adds	r7, r7, r2
 8004f24:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004f26:	2301      	movs	r3, #1
 8004f28:	9305      	str	r3, [sp, #20]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9304      	str	r3, [sp, #16]
 8004f2e:	9303      	str	r3, [sp, #12]
 8004f30:	9002      	str	r0, [sp, #8]
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	0030      	movs	r0, r6
 8004f3c:	f003 fc52 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004f40:	2000      	movs	r0, #0
 8004f42:	e701      	b.n	8004d48 <ParseSnippetCondition+0x128>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004f44:	4f11      	ldr	r7, [pc, #68]	; (8004f8c <ParseSnippetCondition+0x36c>)
 8004f46:	00a3      	lsls	r3, r4, #2
 8004f48:	191c      	adds	r4, r3, r4
 8004f4a:	00a3      	lsls	r3, r4, #2
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	220d      	movs	r2, #13
 8004f50:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004f52:	0028      	movs	r0, r5
 8004f54:	3010      	adds	r0, #16
 8004f56:	f00f fefe 	bl	8014d56 <atoi>
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <ParseSnippetCondition+0x368>)
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	b2c0      	uxtb	r0, r0
 8004f60:	0093      	lsls	r3, r2, #2
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	009a      	lsls	r2, r3, #2
 8004f66:	18bf      	adds	r7, r7, r2
 8004f68:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	9305      	str	r3, [sp, #20]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	9304      	str	r3, [sp, #16]
 8004f72:	9003      	str	r0, [sp, #12]
 8004f74:	9302      	str	r3, [sp, #8]
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	0030      	movs	r0, r6
 8004f80:	f003 fc30 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004f84:	2000      	movs	r0, #0
 8004f86:	e6df      	b.n	8004d48 <ParseSnippetCondition+0x128>
 8004f88:	20001207 	.word	0x20001207
 8004f8c:	20006dbc 	.word	0x20006dbc
 8004f90:	2000116c 	.word	0x2000116c
 8004f94:	08019ccc 	.word	0x08019ccc
 8004f98:	0801b2e4 	.word	0x0801b2e4
 8004f9c:	200014b4 	.word	0x200014b4
 8004fa0:	0801a368 	.word	0x0801a368
 8004fa4:	0801a378 	.word	0x0801a378
 8004fa8:	0801a388 	.word	0x0801a388
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004fac:	4f30      	ldr	r7, [pc, #192]	; (8005070 <ParseSnippetCondition+0x450>)
 8004fae:	3314      	adds	r3, #20
 8004fb0:	4698      	mov	r8, r3
 8004fb2:	435c      	muls	r4, r3
 8004fb4:	193c      	adds	r4, r7, r4
 8004fb6:	3b06      	subs	r3, #6
 8004fb8:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004fba:	0028      	movs	r0, r5
 8004fbc:	3010      	adds	r0, #16
 8004fbe:	f00f feca 	bl	8014d56 <atoi>
 8004fc2:	4b2c      	ldr	r3, [pc, #176]	; (8005074 <ParseSnippetCondition+0x454>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	b2c0      	uxtb	r0, r0
 8004fc8:	4642      	mov	r2, r8
 8004fca:	4353      	muls	r3, r2
 8004fcc:	18ff      	adds	r7, r7, r3
 8004fce:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	9305      	str	r3, [sp, #20]
 8004fd4:	9004      	str	r0, [sp, #16]
 8004fd6:	2400      	movs	r4, #0
 8004fd8:	9403      	str	r4, [sp, #12]
 8004fda:	9402      	str	r4, [sp, #8]
 8004fdc:	9401      	str	r4, [sp, #4]
 8004fde:	9400      	str	r4, [sp, #0]
 8004fe0:	0023      	movs	r3, r4
 8004fe2:	0022      	movs	r2, r4
 8004fe4:	0021      	movs	r1, r4
 8004fe6:	0030      	movs	r0, r6
 8004fe8:	f003 fbfc 	bl	80087e4 <SetButtonEvents>
					status =BOS_OK;
 8004fec:	0020      	movs	r0, r4
 8004fee:	e6ab      	b.n	8004d48 <ParseSnippetCondition+0x128>
	BOS_Status status =BOS_OK;
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e6a9      	b.n	8004d48 <ParseSnippetCondition+0x128>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	d000      	beq.n	8004ffa <ParseSnippetCondition+0x3da>
 8004ff8:	e64f      	b.n	8004c9a <ParseSnippetCondition+0x7a>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004ffa:	481e      	ldr	r0, [pc, #120]	; (8005074 <ParseSnippetCondition+0x454>)
 8004ffc:	7803      	ldrb	r3, [r0, #0]
 8004ffe:	491c      	ldr	r1, [pc, #112]	; (8005070 <ParseSnippetCondition+0x450>)
 8005000:	009a      	lsls	r2, r3, #2
 8005002:	18d6      	adds	r6, r2, r3
 8005004:	00b4      	lsls	r4, r6, #2
 8005006:	2602      	movs	r6, #2
 8005008:	5466      	strb	r6, [r4, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 800500a:	1909      	adds	r1, r1, r4
 800500c:	70cd      	strb	r5, [r1, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800500e:	3301      	adds	r3, #1
 8005010:	7003      	strb	r3, [r0, #0]
				return BOS_OK;
 8005012:	2000      	movs	r0, #0
 8005014:	e01d      	b.n	8005052 <ParseSnippetCondition+0x432>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8005016:	4b17      	ldr	r3, [pc, #92]	; (8005074 <ParseSnippetCondition+0x454>)
 8005018:	4698      	mov	r8, r3
 800501a:	781a      	ldrb	r2, [r3, #0]
 800501c:	4f14      	ldr	r7, [pc, #80]	; (8005070 <ParseSnippetCondition+0x450>)
 800501e:	0093      	lsls	r3, r2, #2
 8005020:	1898      	adds	r0, r3, r2
 8005022:	0081      	lsls	r1, r0, #2
 8005024:	2003      	movs	r0, #3
 8005026:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8005028:	187a      	adds	r2, r7, r1
 800502a:	70d5      	strb	r5, [r2, #3]
					float constant =atof(thirdPart);
 800502c:	0020      	movs	r0, r4
 800502e:	f00f fe8d 	bl	8014d4c <atof>
 8005032:	f7fe f8c9 	bl	80031c8 <__aeabi_d2f>
 8005036:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005038:	4643      	mov	r3, r8
 800503a:	781a      	ldrb	r2, [r3, #0]
 800503c:	0093      	lsls	r3, r2, #2
 800503e:	189b      	adds	r3, r3, r2
 8005040:	0098      	lsls	r0, r3, #2
 8005042:	19c0      	adds	r0, r0, r7
 8005044:	3006      	adds	r0, #6
 8005046:	2204      	movs	r2, #4
 8005048:	a907      	add	r1, sp, #28
 800504a:	f010 f914 	bl	8015276 <memcpy>
 800504e:	e63b      	b.n	8004cc8 <ParseSnippetCondition+0xa8>
		return BOS_ERR_SNIP_MEM_FULL;
 8005050:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8005052:	b008      	add	sp, #32
 8005054:	bc04      	pop	{r2}
 8005056:	4690      	mov	r8, r2
 8005058:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status status =BOS_OK;
 800505a:	2000      	movs	r0, #0
 800505c:	e7f9      	b.n	8005052 <ParseSnippetCondition+0x432>
			return BOS_ERR_WrongParam;
 800505e:	2067      	movs	r0, #103	; 0x67
 8005060:	e7f7      	b.n	8005052 <ParseSnippetCondition+0x432>
				return BOS_ERR_WrongParam;
 8005062:	2067      	movs	r0, #103	; 0x67
 8005064:	e7f5      	b.n	8005052 <ParseSnippetCondition+0x432>
 8005066:	2067      	movs	r0, #103	; 0x67
 8005068:	e7f3      	b.n	8005052 <ParseSnippetCondition+0x432>
					return BOS_ERR_WrongParam;
 800506a:	2067      	movs	r0, #103	; 0x67
 800506c:	e7f1      	b.n	8005052 <ParseSnippetCondition+0x432>
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	20006dbc 	.word	0x20006dbc
 8005074:	20001207 	.word	0x20001207

08005078 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	000c      	movs	r4, r1
	switch(code){
 800507c:	2802      	cmp	r0, #2
 800507e:	d017      	beq.n	80050b0 <AddSnippet+0x38>
 8005080:	2803      	cmp	r0, #3
 8005082:	d003      	beq.n	800508c <AddSnippet+0x14>
 8005084:	2801      	cmp	r0, #1
 8005086:	d00f      	beq.n	80050a8 <AddSnippet+0x30>
	return BOS_OK;
 8005088:	2000      	movs	r0, #0
 800508a:	e00c      	b.n	80050a6 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 800508c:	4b34      	ldr	r3, [pc, #208]	; (8005160 <AddSnippet+0xe8>)
 800508e:	781a      	ldrb	r2, [r3, #0]
 8005090:	3a01      	subs	r2, #1
 8005092:	0093      	lsls	r3, r2, #2
 8005094:	189b      	adds	r3, r3, r2
 8005096:	009a      	lsls	r2, r3, #2
 8005098:	4b32      	ldr	r3, [pc, #200]	; (8005164 <AddSnippet+0xec>)
 800509a:	189b      	adds	r3, r3, r2
 800509c:	2201      	movs	r2, #1
 800509e:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 80050a0:	f006 fe46 	bl	800bd30 <SaveToRO>
	return BOS_OK;
 80050a4:	2000      	movs	r0, #0
}
 80050a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 80050a8:	0008      	movs	r0, r1
 80050aa:	f7ff fdb9 	bl	8004c20 <ParseSnippetCondition>
 80050ae:	e7fa      	b.n	80050a6 <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 80050b0:	4b2b      	ldr	r3, [pc, #172]	; (8005160 <AddSnippet+0xe8>)
 80050b2:	781d      	ldrb	r5, [r3, #0]
 80050b4:	3d01      	subs	r5, #1
 80050b6:	00ab      	lsls	r3, r5, #2
 80050b8:	195b      	adds	r3, r3, r5
 80050ba:	009a      	lsls	r2, r3, #2
 80050bc:	4b29      	ldr	r3, [pc, #164]	; (8005164 <AddSnippet+0xec>)
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	68de      	ldr	r6, [r3, #12]
 80050c2:	2e00      	cmp	r6, #0
 80050c4:	d034      	beq.n	8005130 <AddSnippet+0xb8>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 80050c6:	0030      	movs	r0, r6
 80050c8:	f7fb f826 	bl	8000118 <strlen>
 80050cc:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 80050ce:	0020      	movs	r0, r4
 80050d0:	f7fb f822 	bl	8000118 <strlen>
 80050d4:	1839      	adds	r1, r7, r0
 80050d6:	3102      	adds	r1, #2
 80050d8:	0030      	movs	r0, r6
 80050da:	f010 f907 	bl	80152ec <realloc>
 80050de:	4e21      	ldr	r6, [pc, #132]	; (8005164 <AddSnippet+0xec>)
 80050e0:	00ab      	lsls	r3, r5, #2
 80050e2:	195d      	adds	r5, r3, r5
 80050e4:	00ab      	lsls	r3, r5, #2
 80050e6:	18f3      	adds	r3, r6, r3
 80050e8:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 80050ea:	4d1d      	ldr	r5, [pc, #116]	; (8005160 <AddSnippet+0xe8>)
 80050ec:	782b      	ldrb	r3, [r5, #0]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	009a      	lsls	r2, r3, #2
 80050f2:	18d2      	adds	r2, r2, r3
 80050f4:	0093      	lsls	r3, r2, #2
 80050f6:	18f3      	adds	r3, r6, r3
 80050f8:	68d8      	ldr	r0, [r3, #12]
 80050fa:	1c7b      	adds	r3, r7, #1
 80050fc:	18c0      	adds	r0, r0, r3
 80050fe:	0021      	movs	r1, r4
 8005100:	f010 faf8 	bl	80156f4 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8005104:	782a      	ldrb	r2, [r5, #0]
 8005106:	3a01      	subs	r2, #1
 8005108:	0093      	lsls	r3, r2, #2
 800510a:	189b      	adds	r3, r3, r2
 800510c:	009a      	lsls	r2, r3, #2
 800510e:	18b6      	adds	r6, r6, r2
 8005110:	68f3      	ldr	r3, [r6, #12]
 8005112:	2213      	movs	r2, #19
 8005114:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <AddSnippet+0xe8>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	3b01      	subs	r3, #1
 800511c:	009a      	lsls	r2, r3, #2
 800511e:	18d2      	adds	r2, r2, r3
 8005120:	0091      	lsls	r1, r2, #2
 8005122:	4a10      	ldr	r2, [pc, #64]	; (8005164 <AddSnippet+0xec>)
 8005124:	1852      	adds	r2, r2, r1
 8005126:	68d2      	ldr	r2, [r2, #12]
 8005128:	2a00      	cmp	r2, #0
 800512a:	d011      	beq.n	8005150 <AddSnippet+0xd8>
	return BOS_OK;
 800512c:	2000      	movs	r0, #0
 800512e:	e7ba      	b.n	80050a6 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8005130:	0008      	movs	r0, r1
 8005132:	f7fa fff1 	bl	8000118 <strlen>
 8005136:	3001      	adds	r0, #1
 8005138:	f00f fe50 	bl	8014ddc <malloc>
 800513c:	00ab      	lsls	r3, r5, #2
 800513e:	195d      	adds	r5, r3, r5
 8005140:	00aa      	lsls	r2, r5, #2
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <AddSnippet+0xec>)
 8005144:	189b      	adds	r3, r3, r2
 8005146:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8005148:	0021      	movs	r1, r4
 800514a:	f010 fad3 	bl	80156f4 <strcpy>
 800514e:	e7e2      	b.n	8005116 <AddSnippet+0x9e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <AddSnippet+0xec>)
 8005152:	18c8      	adds	r0, r1, r3
 8005154:	2214      	movs	r2, #20
 8005156:	2100      	movs	r1, #0
 8005158:	f010 f896 	bl	8015288 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800515c:	200e      	movs	r0, #14
 800515e:	e7a2      	b.n	80050a6 <AddSnippet+0x2e>
 8005160:	20001207 	.word	0x20001207
 8005164:	20006dbc 	.word	0x20006dbc

08005168 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8005168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516a:	46de      	mov	lr, fp
 800516c:	4657      	mov	r7, sl
 800516e:	464e      	mov	r6, r9
 8005170:	4645      	mov	r5, r8
 8005172:	b5e0      	push	{r5, r6, r7, lr}
 8005174:	b08b      	sub	sp, #44	; 0x2c
 8005176:	9004      	str	r0, [sp, #16]
 8005178:	9103      	str	r1, [sp, #12]
 800517a:	0015      	movs	r5, r2
 800517c:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 800517e:	2209      	movs	r2, #9
 8005180:	2100      	movs	r1, #0
 8005182:	a807      	add	r0, sp, #28
 8005184:	f010 f880 	bl	8015288 <memset>
 8005188:	e160      	b.n	800544c <CLI_CommandParser+0x2e4>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 800518a:	1ce9      	adds	r1, r5, #3
 800518c:	3001      	adds	r0, #1
 800518e:	f7ff ff73 	bl	8005078 <AddSnippet>
 8005192:	2800      	cmp	r0, #0
 8005194:	d106      	bne.n	80051a4 <CLI_CommandParser+0x3c>
				recordSnippet = SNIPPET_COMMANDS;
 8005196:	4bcf      	ldr	r3, [pc, #828]	; (80054d4 <CLI_CommandParser+0x36c>)
 8005198:	2202      	movs	r2, #2
 800519a:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 800519c:	230d      	movs	r3, #13
 800519e:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 80051a0:	2700      	movs	r7, #0
 80051a2:	e184      	b.n	80054ae <CLI_CommandParser+0x346>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80051a4:	2252      	movs	r2, #82	; 0x52
 80051a6:	49cc      	ldr	r1, [pc, #816]	; (80054d8 <CLI_CommandParser+0x370>)
 80051a8:	0020      	movs	r0, r4
 80051aa:	f010 f864 	bl	8015276 <memcpy>
				recordSnippet =0;
 80051ae:	4bc9      	ldr	r3, [pc, #804]	; (80054d4 <CLI_CommandParser+0x36c>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
			xReturned = pdFALSE;
 80051b4:	2700      	movs	r7, #0
 80051b6:	e17a      	b.n	80054ae <CLI_CommandParser+0x346>
			recordSnippet =0;
 80051b8:	4bc6      	ldr	r3, [pc, #792]	; (80054d4 <CLI_CommandParser+0x36c>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 80051be:	49c7      	ldr	r1, [pc, #796]	; (80054dc <CLI_CommandParser+0x374>)
 80051c0:	3003      	adds	r0, #3
 80051c2:	f7ff ff59 	bl	8005078 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 80051c6:	2241      	movs	r2, #65	; 0x41
 80051c8:	49c5      	ldr	r1, [pc, #788]	; (80054e0 <CLI_CommandParser+0x378>)
 80051ca:	0020      	movs	r0, r4
 80051cc:	f010 f853 	bl	8015276 <memcpy>
			xReturned = pdFALSE;
 80051d0:	2700      	movs	r7, #0
 80051d2:	e16c      	b.n	80054ae <CLI_CommandParser+0x346>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 80051d4:	0029      	movs	r1, r5
 80051d6:	2002      	movs	r0, #2
 80051d8:	f7ff ff4e 	bl	8005078 <AddSnippet>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d103      	bne.n	80051e8 <CLI_CommandParser+0x80>
				pcOutputString[0] ='\r';
 80051e0:	230d      	movs	r3, #13
 80051e2:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 80051e4:	2700      	movs	r7, #0
 80051e6:	e162      	b.n	80054ae <CLI_CommandParser+0x346>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80051e8:	2252      	movs	r2, #82	; 0x52
 80051ea:	49bb      	ldr	r1, [pc, #748]	; (80054d8 <CLI_CommandParser+0x370>)
 80051ec:	0020      	movs	r0, r4
 80051ee:	f010 f842 	bl	8015276 <memcpy>
			xReturned = pdFALSE;
 80051f2:	2700      	movs	r7, #0
 80051f4:	e15b      	b.n	80054ae <CLI_CommandParser+0x346>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 80051f6:	f00f fde3 	bl	8014dc0 <__locale_ctype_ptr>
 80051fa:	7873      	ldrb	r3, [r6, #1]
 80051fc:	18c0      	adds	r0, r0, r3
 80051fe:	7843      	ldrb	r3, [r0, #1]
 8005200:	075b      	lsls	r3, r3, #29
 8005202:	d500      	bpl.n	8005206 <CLI_CommandParser+0x9e>
 8005204:	e14c      	b.n	80054a0 <CLI_CommandParser+0x338>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8005206:	1b72      	subs	r2, r6, r5
 8005208:	0029      	movs	r1, r5
 800520a:	a807      	add	r0, sp, #28
 800520c:	f010 fa8b 	bl	8015726 <strncpy>
				id =GetID(idString);
 8005210:	a807      	add	r0, sp, #28
 8005212:	f7ff fa2d 	bl	8004670 <GetID>
 8005216:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8005218:	4ab2      	ldr	r2, [pc, #712]	; (80054e4 <CLI_CommandParser+0x37c>)
 800521a:	7812      	ldrb	r2, [r2, #0]
 800521c:	4691      	mov	r9, r2
 800521e:	4290      	cmp	r0, r2
 8005220:	d02c      	beq.n	800527c <CLI_CommandParser+0x114>
				else if(id == BOS_ERR_WrongName){
 8005222:	2864      	cmp	r0, #100	; 0x64
 8005224:	d032      	beq.n	800528c <CLI_CommandParser+0x124>
				else if(id == BOS_ERR_WrongID){
 8005226:	2866      	cmp	r0, #102	; 0x66
 8005228:	d037      	beq.n	800529a <CLI_CommandParser+0x132>
				else if(id == BOS_BROADCAST){
 800522a:	28ff      	cmp	r0, #255	; 0xff
 800522c:	d03c      	beq.n	80052a8 <CLI_CommandParser+0x140>
				else if((uint8_t )id == BOS_MULTICAST){
 800522e:	466b      	mov	r3, sp
 8005230:	7d1b      	ldrb	r3, [r3, #20]
 8005232:	469a      	mov	sl, r3
 8005234:	2bfe      	cmp	r3, #254	; 0xfe
 8005236:	d068      	beq.n	800530a <CLI_CommandParser+0x1a2>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8005238:	3601      	adds	r6, #1
 800523a:	2206      	movs	r2, #6
 800523c:	49aa      	ldr	r1, [pc, #680]	; (80054e8 <CLI_CommandParser+0x380>)
 800523e:	0030      	movs	r0, r6
 8005240:	f010 fa60 	bl	8015704 <strncmp>
 8005244:	2800      	cmp	r0, #0
 8005246:	d000      	beq.n	800524a <CLI_CommandParser+0xe2>
 8005248:	e0a3      	b.n	8005392 <CLI_CommandParser+0x22a>
						BOS.response = BOS_RESPONSE_NONE;
 800524a:	4ba8      	ldr	r3, [pc, #672]	; (80054ec <CLI_CommandParser+0x384>)
 800524c:	2200      	movs	r2, #0
 800524e:	719a      	strb	r2, [r3, #6]
						SendMessageToModule(id,CODE_UPDATE,0);
 8005250:	2119      	movs	r1, #25
 8005252:	4650      	mov	r0, sl
 8005254:	f004 fc62 	bl	8009b1c <SendMessageToModule>
						osDelay(100);
 8005258:	2064      	movs	r0, #100	; 0x64
 800525a:	f00a fbd9 	bl	800fa10 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 800525e:	4ba4      	ldr	r3, [pc, #656]	; (80054f0 <CLI_CommandParser+0x388>)
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	4ba0      	ldr	r3, [pc, #640]	; (80054e4 <CLI_CommandParser+0x37c>)
 8005264:	7818      	ldrb	r0, [r3, #0]
 8005266:	2300      	movs	r3, #0
 8005268:	4651      	mov	r1, sl
 800526a:	f7fe feeb 	bl	8004044 <remoteBootloaderUpdate>
					if(BOS.response == BOS_RESPONSE_ALL){
 800526e:	4b9f      	ldr	r3, [pc, #636]	; (80054ec <CLI_CommandParser+0x384>)
 8005270:	799b      	ldrb	r3, [r3, #6]
 8005272:	2b60      	cmp	r3, #96	; 0x60
 8005274:	d100      	bne.n	8005278 <CLI_CommandParser+0x110>
 8005276:	e0c8      	b.n	800540a <CLI_CommandParser+0x2a2>
					xReturned = pdFALSE;
 8005278:	2700      	movs	r7, #0
 800527a:	e118      	b.n	80054ae <CLI_CommandParser+0x346>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800527c:	1c70      	adds	r0, r6, #1
 800527e:	2299      	movs	r2, #153	; 0x99
 8005280:	0092      	lsls	r2, r2, #2
 8005282:	0021      	movs	r1, r4
 8005284:	f00a fc80 	bl	800fb88 <FreeRTOS_CLIProcessCommand>
 8005288:	0007      	movs	r7, r0
 800528a:	e110      	b.n	80054ae <CLI_CommandParser+0x346>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 800528c:	2227      	movs	r2, #39	; 0x27
 800528e:	4999      	ldr	r1, [pc, #612]	; (80054f4 <CLI_CommandParser+0x38c>)
 8005290:	0020      	movs	r0, r4
 8005292:	f00f fff0 	bl	8015276 <memcpy>
					xReturned = pdFALSE;
 8005296:	2700      	movs	r7, #0
 8005298:	e109      	b.n	80054ae <CLI_CommandParser+0x346>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 800529a:	2225      	movs	r2, #37	; 0x25
 800529c:	4996      	ldr	r1, [pc, #600]	; (80054f8 <CLI_CommandParser+0x390>)
 800529e:	0020      	movs	r0, r4
 80052a0:	f00f ffe9 	bl	8015276 <memcpy>
					xReturned = pdFALSE;
 80052a4:	2700      	movs	r7, #0
 80052a6:	e102      	b.n	80054ae <CLI_CommandParser+0x346>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 80052a8:	221a      	movs	r2, #26
 80052aa:	2100      	movs	r1, #0
 80052ac:	4893      	ldr	r0, [pc, #588]	; (80054fc <CLI_CommandParser+0x394>)
 80052ae:	f00f ffeb 	bl	8015288 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80052b2:	3601      	adds	r6, #1
 80052b4:	0028      	movs	r0, r5
 80052b6:	f7fa ff2f 	bl	8000118 <strlen>
 80052ba:	0007      	movs	r7, r0
 80052bc:	a807      	add	r0, sp, #28
 80052be:	f7fa ff2b 	bl	8000118 <strlen>
 80052c2:	1a3a      	subs	r2, r7, r0
 80052c4:	3a01      	subs	r2, #1
 80052c6:	0031      	movs	r1, r6
 80052c8:	488d      	ldr	r0, [pc, #564]	; (8005500 <CLI_CommandParser+0x398>)
 80052ca:	f010 fa2c 	bl	8015726 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 80052ce:	0028      	movs	r0, r5
 80052d0:	f7fa ff22 	bl	8000118 <strlen>
 80052d4:	0007      	movs	r7, r0
 80052d6:	a807      	add	r0, sp, #28
 80052d8:	f7fa ff1e 	bl	8000118 <strlen>
 80052dc:	1a3b      	subs	r3, r7, r0
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2217      	movs	r2, #23
 80052e2:	21ff      	movs	r1, #255	; 0xff
 80052e4:	4648      	mov	r0, r9
 80052e6:	f004 fbf1 	bl	8009acc <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80052ea:	2299      	movs	r2, #153	; 0x99
 80052ec:	0092      	lsls	r2, r2, #2
 80052ee:	0021      	movs	r1, r4
 80052f0:	0030      	movs	r0, r6
 80052f2:	f00a fc49 	bl	800fb88 <FreeRTOS_CLIProcessCommand>
 80052f6:	0007      	movs	r7, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80052f8:	0020      	movs	r0, r4
 80052fa:	f7fa ff0d 	bl	8000118 <strlen>
 80052fe:	1820      	adds	r0, r4, r0
 8005300:	221d      	movs	r2, #29
 8005302:	4980      	ldr	r1, [pc, #512]	; (8005504 <CLI_CommandParser+0x39c>)
 8005304:	f00f ffb7 	bl	8015276 <memcpy>
 8005308:	e0d1      	b.n	80054ae <CLI_CommandParser+0x346>
					group =id >> 8;
 800530a:	9b05      	ldr	r3, [sp, #20]
 800530c:	121b      	asrs	r3, r3, #8
 800530e:	b2db      	uxtb	r3, r3
 8005310:	469a      	mov	sl, r3
 8005312:	4b7d      	ldr	r3, [pc, #500]	; (8005508 <CLI_CommandParser+0x3a0>)
 8005314:	469b      	mov	fp, r3
 8005316:	4652      	mov	r2, sl
 8005318:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800531a:	221a      	movs	r2, #26
 800531c:	2100      	movs	r1, #0
 800531e:	4877      	ldr	r0, [pc, #476]	; (80054fc <CLI_CommandParser+0x394>)
 8005320:	f00f ffb2 	bl	8015288 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005324:	1c73      	adds	r3, r6, #1
 8005326:	4698      	mov	r8, r3
 8005328:	0028      	movs	r0, r5
 800532a:	f7fa fef5 	bl	8000118 <strlen>
 800532e:	0006      	movs	r6, r0
 8005330:	a807      	add	r0, sp, #28
 8005332:	f7fa fef1 	bl	8000118 <strlen>
 8005336:	1a32      	subs	r2, r6, r0
 8005338:	3a01      	subs	r2, #1
 800533a:	4641      	mov	r1, r8
 800533c:	4870      	ldr	r0, [pc, #448]	; (8005500 <CLI_CommandParser+0x398>)
 800533e:	f010 f9f2 	bl	8015726 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005342:	0028      	movs	r0, r5
 8005344:	f7fa fee8 	bl	8000118 <strlen>
 8005348:	0006      	movs	r6, r0
 800534a:	a807      	add	r0, sp, #28
 800534c:	f7fa fee4 	bl	8000118 <strlen>
 8005350:	1a33      	subs	r3, r6, r0
 8005352:	b29b      	uxth	r3, r3
 8005354:	2217      	movs	r2, #23
 8005356:	4651      	mov	r1, sl
 8005358:	4648      	mov	r0, r9
 800535a:	f004 fbb7 	bl	8009acc <BroadcastMessage>
					if(InGroup(myID,group))
 800535e:	4b61      	ldr	r3, [pc, #388]	; (80054e4 <CLI_CommandParser+0x37c>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	3b01      	subs	r3, #1
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	4a69      	ldr	r2, [pc, #420]	; (800550c <CLI_CommandParser+0x3a4>)
 8005368:	5a9b      	ldrh	r3, [r3, r2]
 800536a:	465a      	mov	r2, fp
 800536c:	7812      	ldrb	r2, [r2, #0]
 800536e:	4113      	asrs	r3, r2
 8005370:	07db      	lsls	r3, r3, #31
 8005372:	d406      	bmi.n	8005382 <CLI_CommandParser+0x21a>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8005374:	ab07      	add	r3, sp, #28
 8005376:	0022      	movs	r2, r4
 8005378:	4965      	ldr	r1, [pc, #404]	; (8005510 <CLI_CommandParser+0x3a8>)
 800537a:	0020      	movs	r0, r4
 800537c:	f010 f97e 	bl	801567c <sprintf>
 8005380:	e095      	b.n	80054ae <CLI_CommandParser+0x346>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005382:	2299      	movs	r2, #153	; 0x99
 8005384:	0092      	lsls	r2, r2, #2
 8005386:	0021      	movs	r1, r4
 8005388:	4640      	mov	r0, r8
 800538a:	f00a fbfd 	bl	800fb88 <FreeRTOS_CLIProcessCommand>
 800538e:	0007      	movs	r7, r0
 8005390:	e7f0      	b.n	8005374 <CLI_CommandParser+0x20c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005392:	0028      	movs	r0, r5
 8005394:	f7fa fec0 	bl	8000118 <strlen>
 8005398:	0007      	movs	r7, r0
 800539a:	a807      	add	r0, sp, #28
 800539c:	f7fa febc 	bl	8000118 <strlen>
 80053a0:	1a3a      	subs	r2, r7, r0
 80053a2:	3a01      	subs	r2, #1
 80053a4:	0031      	movs	r1, r6
 80053a6:	4856      	ldr	r0, [pc, #344]	; (8005500 <CLI_CommandParser+0x398>)
 80053a8:	f010 f9bd 	bl	8015726 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 80053ac:	0028      	movs	r0, r5
 80053ae:	f7fa feb3 	bl	8000118 <strlen>
 80053b2:	0006      	movs	r6, r0
 80053b4:	a807      	add	r0, sp, #28
 80053b6:	f7fa feaf 	bl	8000118 <strlen>
 80053ba:	1a32      	subs	r2, r6, r0
 80053bc:	b292      	uxth	r2, r2
 80053be:	3a01      	subs	r2, #1
 80053c0:	b292      	uxth	r2, r2
 80053c2:	2117      	movs	r1, #23
 80053c4:	4650      	mov	r0, sl
 80053c6:	f004 fba9 	bl	8009b1c <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 80053ca:	9a05      	ldr	r2, [sp, #20]
 80053cc:	4951      	ldr	r1, [pc, #324]	; (8005514 <CLI_CommandParser+0x3ac>)
 80053ce:	0020      	movs	r0, r4
 80053d0:	f010 f954 	bl	801567c <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 80053d4:	7823      	ldrb	r3, [r4, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <CLI_CommandParser+0x278>
 80053da:	9b03      	ldr	r3, [sp, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d108      	bne.n	80053f2 <CLI_CommandParser+0x28a>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80053e0:	0020      	movs	r0, r4
 80053e2:	f7fa fe99 	bl	8000118 <strlen>
 80053e6:	0002      	movs	r2, r0
 80053e8:	2100      	movs	r1, #0
 80053ea:	0020      	movs	r0, r4
 80053ec:	f00f ff4c 	bl	8015288 <memset>
 80053f0:	e73d      	b.n	800526e <CLI_CommandParser+0x106>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 80053f2:	0020      	movs	r0, r4
 80053f4:	f7fa fe90 	bl	8000118 <strlen>
 80053f8:	b282      	uxth	r2, r0
 80053fa:	2301      	movs	r3, #1
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	3331      	adds	r3, #49	; 0x31
 8005400:	0021      	movs	r1, r4
 8005402:	9804      	ldr	r0, [sp, #16]
 8005404:	f00a f9d0 	bl	800f7a8 <writePxMutex>
 8005408:	e7ea      	b.n	80053e0 <CLI_CommandParser+0x278>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 800540a:	21fa      	movs	r1, #250	; 0xfa
 800540c:	0089      	lsls	r1, r1, #2
 800540e:	2001      	movs	r0, #1
 8005410:	f00b fef4 	bl	80111fc <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8005414:	4b40      	ldr	r3, [pc, #256]	; (8005518 <CLI_CommandParser+0x3b0>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <CLI_CommandParser+0x2cc>
							++timedoutMsg;
 800541c:	4a3f      	ldr	r2, [pc, #252]	; (800551c <CLI_CommandParser+0x3b4>)
 800541e:	8813      	ldrh	r3, [r2, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005424:	9b05      	ldr	r3, [sp, #20]
 8005426:	0022      	movs	r2, r4
 8005428:	493d      	ldr	r1, [pc, #244]	; (8005520 <CLI_CommandParser+0x3b8>)
 800542a:	0020      	movs	r0, r4
 800542c:	f010 f926 	bl	801567c <sprintf>
					xReturned = pdFALSE;
 8005430:	2700      	movs	r7, #0
 8005432:	e03c      	b.n	80054ae <CLI_CommandParser+0x346>
 8005434:	2700      	movs	r7, #0
 8005436:	e03a      	b.n	80054ae <CLI_CommandParser+0x346>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005438:	0020      	movs	r0, r4
 800543a:	f7fa fe6d 	bl	8000118 <strlen>
 800543e:	0002      	movs	r2, r0
 8005440:	2100      	movs	r1, #0
 8005442:	0020      	movs	r0, r4
 8005444:	f00f ff20 	bl	8015288 <memset>
	} while(xReturned != pdFALSE);
 8005448:	2f00      	cmp	r7, #0
 800544a:	d071      	beq.n	8005530 <CLI_CommandParser+0x3c8>
		StringToLowerCase((char* )cInputString);
 800544c:	0028      	movs	r0, r5
 800544e:	f7ff fbd1 	bl	8004bf4 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8005452:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <CLI_CommandParser+0x36c>)
 8005454:	781e      	ldrb	r6, [r3, #0]
 8005456:	2e00      	cmp	r6, #0
 8005458:	d107      	bne.n	800546a <CLI_CommandParser+0x302>
 800545a:	2203      	movs	r2, #3
 800545c:	4931      	ldr	r1, [pc, #196]	; (8005524 <CLI_CommandParser+0x3bc>)
 800545e:	0028      	movs	r0, r5
 8005460:	f010 f950 	bl	8015704 <strncmp>
 8005464:	2800      	cmp	r0, #0
 8005466:	d100      	bne.n	800546a <CLI_CommandParser+0x302>
 8005468:	e68f      	b.n	800518a <CLI_CommandParser+0x22>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 800546a:	2e00      	cmp	r6, #0
 800546c:	d007      	beq.n	800547e <CLI_CommandParser+0x316>
 800546e:	2206      	movs	r2, #6
 8005470:	492d      	ldr	r1, [pc, #180]	; (8005528 <CLI_CommandParser+0x3c0>)
 8005472:	0028      	movs	r0, r5
 8005474:	f010 f946 	bl	8015704 <strncmp>
 8005478:	2800      	cmp	r0, #0
 800547a:	d100      	bne.n	800547e <CLI_CommandParser+0x316>
 800547c:	e69c      	b.n	80051b8 <CLI_CommandParser+0x50>
		else if(recordSnippet == SNIPPET_COMMANDS){
 800547e:	2e02      	cmp	r6, #2
 8005480:	d100      	bne.n	8005484 <CLI_CommandParser+0x31c>
 8005482:	e6a7      	b.n	80051d4 <CLI_CommandParser+0x6c>
			loc =strchr((char* )cInputString,'.');
 8005484:	212e      	movs	r1, #46	; 0x2e
 8005486:	0028      	movs	r0, r5
 8005488:	f010 f926 	bl	80156d8 <strchr>
 800548c:	1e06      	subs	r6, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 800548e:	d007      	beq.n	80054a0 <CLI_CommandParser+0x338>
 8005490:	3803      	subs	r0, #3
 8005492:	2203      	movs	r2, #3
 8005494:	4925      	ldr	r1, [pc, #148]	; (800552c <CLI_CommandParser+0x3c4>)
 8005496:	f010 f935 	bl	8015704 <strncmp>
 800549a:	2800      	cmp	r0, #0
 800549c:	d000      	beq.n	80054a0 <CLI_CommandParser+0x338>
 800549e:	e6aa      	b.n	80051f6 <CLI_CommandParser+0x8e>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80054a0:	2299      	movs	r2, #153	; 0x99
 80054a2:	0092      	lsls	r2, r2, #2
 80054a4:	0021      	movs	r1, r4
 80054a6:	0028      	movs	r0, r5
 80054a8:	f00a fb6e 	bl	800fb88 <FreeRTOS_CLIProcessCommand>
 80054ac:	0007      	movs	r7, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80054ae:	7823      	ldrb	r3, [r4, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0c1      	beq.n	8005438 <CLI_CommandParser+0x2d0>
 80054b4:	9b03      	ldr	r3, [sp, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0be      	beq.n	8005438 <CLI_CommandParser+0x2d0>
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80054ba:	0020      	movs	r0, r4
 80054bc:	f7fa fe2c 	bl	8000118 <strlen>
 80054c0:	b282      	uxth	r2, r0
 80054c2:	2301      	movs	r3, #1
 80054c4:	425b      	negs	r3, r3
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	3333      	adds	r3, #51	; 0x33
 80054ca:	0021      	movs	r1, r4
 80054cc:	9804      	ldr	r0, [sp, #16]
 80054ce:	f00a f96b 	bl	800f7a8 <writePxMutex>
 80054d2:	e7b1      	b.n	8005438 <CLI_CommandParser+0x2d0>
 80054d4:	20001234 	.word	0x20001234
 80054d8:	0801a1a0 	.word	0x0801a1a0
 80054dc:	08019e34 	.word	0x08019e34
 80054e0:	0801a1fc 	.word	0x0801a1fc
 80054e4:	20001066 	.word	0x20001066
 80054e8:	0801a2e0 	.word	0x0801a2e0
 80054ec:	20006da0 	.word	0x20006da0
 80054f0:	20000a9f 	.word	0x20000a9f
 80054f4:	0801a244 	.word	0x0801a244
 80054f8:	0801a26c 	.word	0x0801a26c
 80054fc:	20000d14 	.word	0x20000d14
 8005500:	20000f28 	.word	0x20000f28
 8005504:	0801a294 	.word	0x0801a294
 8005508:	20001206 	.word	0x20001206
 800550c:	20000eb0 	.word	0x20000eb0
 8005510:	0801a2b4 	.word	0x0801a2b4
 8005514:	0801a2e8 	.word	0x0801a2e8
 8005518:	200010f8 	.word	0x200010f8
 800551c:	2000171e 	.word	0x2000171e
 8005520:	0801a30c 	.word	0x0801a30c
 8005524:	0801a19c 	.word	0x0801a19c
 8005528:	0801a1f4 	.word	0x0801a1f4
 800552c:	0801a240 	.word	0x0801a240
	memset(idString,0x00,MaxLengthOfAlias);
 8005530:	2209      	movs	r2, #9
 8005532:	2100      	movs	r1, #0
 8005534:	a807      	add	r0, sp, #28
 8005536:	f00f fea7 	bl	8015288 <memset>
	if(!recordSnippet && enableOutput)
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <CLI_CommandParser+0x404>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <CLI_CommandParser+0x3e0>
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <CLI_CommandParser+0x3ee>
}
 8005548:	b00b      	add	sp, #44	; 0x2c
 800554a:	bc3c      	pop	{r2, r3, r4, r5}
 800554c:	4690      	mov	r8, r2
 800554e:	4699      	mov	r9, r3
 8005550:	46a2      	mov	sl, r4
 8005552:	46ab      	mov	fp, r5
 8005554:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8005556:	2301      	movs	r3, #1
 8005558:	425b      	negs	r3, r3
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	3333      	adds	r3, #51	; 0x33
 800555e:	2238      	movs	r2, #56	; 0x38
 8005560:	4903      	ldr	r1, [pc, #12]	; (8005570 <CLI_CommandParser+0x408>)
 8005562:	9804      	ldr	r0, [sp, #16]
 8005564:	f00a f920 	bl	800f7a8 <writePxMutex>
}
 8005568:	e7ee      	b.n	8005548 <CLI_CommandParser+0x3e0>
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	20001234 	.word	0x20001234
 8005570:	0801a32c 	.word	0x0801a32c

08005574 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005578:	2101      	movs	r1, #1
 800557a:	4249      	negs	r1, r1
 800557c:	2001      	movs	r0, #1
 800557e:	f00b fe3d 	bl	80111fc <ulTaskNotifyTake>
	cRxedChar ='\0';
 8005582:	230f      	movs	r3, #15
 8005584:	446b      	add	r3, sp
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800558a:	f00a fb63 	bl	800fc54 <FreeRTOS_CLIGetOutputBuffer>
 800558e:	0005      	movs	r5, r0
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005590:	4b51      	ldr	r3, [pc, #324]	; (80056d8 <prvCLITask+0x164>)
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	23e1      	movs	r3, #225	; 0xe1
 8005596:	031b      	lsls	r3, r3, #12
 8005598:	429a      	cmp	r2, r3
 800559a:	d122      	bne.n	80055e2 <prvCLITask+0x6e>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800559c:	4b4f      	ldr	r3, [pc, #316]	; (80056dc <prvCLITask+0x168>)
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	005a      	lsls	r2, r3, #1
 80055a2:	18d2      	adds	r2, r2, r3
 80055a4:	0053      	lsls	r3, r2, #1
 80055a6:	4a4e      	ldr	r2, [pc, #312]	; (80056e0 <prvCLITask+0x16c>)
 80055a8:	189b      	adds	r3, r3, r2
 80055aa:	4a4e      	ldr	r2, [pc, #312]	; (80056e4 <prvCLITask+0x170>)
 80055ac:	7812      	ldrb	r2, [r2, #0]
 80055ae:	4c4e      	ldr	r4, [pc, #312]	; (80056e8 <prvCLITask+0x174>)
 80055b0:	4e4e      	ldr	r6, [pc, #312]	; (80056ec <prvCLITask+0x178>)
 80055b2:	7831      	ldrb	r1, [r6, #0]
 80055b4:	9100      	str	r1, [sp, #0]
 80055b6:	494e      	ldr	r1, [pc, #312]	; (80056f0 <prvCLITask+0x17c>)
 80055b8:	0020      	movs	r0, r4
 80055ba:	f010 f85f 	bl	801567c <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80055be:	22a4      	movs	r2, #164	; 0xa4
 80055c0:	7830      	ldrb	r0, [r6, #0]
 80055c2:	230a      	movs	r3, #10
 80055c4:	0092      	lsls	r2, r2, #2
 80055c6:	494b      	ldr	r1, [pc, #300]	; (80056f4 <prvCLITask+0x180>)
 80055c8:	f00a f91c 	bl	800f804 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 80055cc:	0020      	movs	r0, r4
 80055ce:	f7fa fda3 	bl	8000118 <strlen>
 80055d2:	b282      	uxth	r2, r0
 80055d4:	7830      	ldrb	r0, [r6, #0]
 80055d6:	230a      	movs	r3, #10
 80055d8:	0021      	movs	r1, r4
 80055da:	f00a f913 	bl	800f804 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 80055de:	2600      	movs	r6, #0
 80055e0:	e067      	b.n	80056b2 <prvCLITask+0x13e>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80055e2:	2401      	movs	r4, #1
 80055e4:	2c05      	cmp	r4, #5
 80055e6:	d8d9      	bhi.n	800559c <prvCLITask+0x28>
			if(port != PcPort)
 80055e8:	4b40      	ldr	r3, [pc, #256]	; (80056ec <prvCLITask+0x178>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	d004      	beq.n	80055fa <prvCLITask+0x86>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80055f0:	21e1      	movs	r1, #225	; 0xe1
 80055f2:	0309      	lsls	r1, r1, #12
 80055f4:	0020      	movs	r0, r4
 80055f6:	f00a f947 	bl	800f888 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80055fa:	3401      	adds	r4, #1
 80055fc:	b2e4      	uxtb	r4, r4
 80055fe:	e7f1      	b.n	80055e4 <prvCLITask+0x70>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 8005600:	200f      	movs	r0, #15
 8005602:	4468      	add	r0, sp
 8005604:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005606:	0198      	lsls	r0, r3, #6
 8005608:	4a3b      	ldr	r2, [pc, #236]	; (80056f8 <prvCLITask+0x184>)
 800560a:	1812      	adds	r2, r2, r0
 800560c:	2000      	movs	r0, #0
 800560e:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort - 1] =chr;
 8005610:	4a3a      	ldr	r2, [pc, #232]	; (80056fc <prvCLITask+0x188>)
 8005612:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 8005614:	240f      	movs	r4, #15
 8005616:	446c      	add	r4, sp
 8005618:	4b34      	ldr	r3, [pc, #208]	; (80056ec <prvCLITask+0x178>)
 800561a:	7818      	ldrb	r0, [r3, #0]
 800561c:	230a      	movs	r3, #10
 800561e:	2201      	movs	r2, #1
 8005620:	0021      	movs	r1, r4
 8005622:	f00a f8ef 	bl	800f804 <writePxITMutex>
		if(cRxedChar == '\r'){
 8005626:	7823      	ldrb	r3, [r4, #0]
 8005628:	2b0d      	cmp	r3, #13
 800562a:	d025      	beq.n	8005678 <prvCLITask+0x104>
			if(cRxedChar == '\n'){
 800562c:	2b0a      	cmp	r3, #10
 800562e:	d03e      	beq.n	80056ae <prvCLITask+0x13a>
			else if(cRxedChar == '\b'){
 8005630:	2b08      	cmp	r3, #8
 8005632:	d049      	beq.n	80056c8 <prvCLITask+0x154>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005634:	001a      	movs	r2, r3
 8005636:	3a20      	subs	r2, #32
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	2a5e      	cmp	r2, #94	; 0x5e
 800563c:	d837      	bhi.n	80056ae <prvCLITask+0x13a>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 800563e:	2e31      	cmp	r6, #49	; 0x31
 8005640:	dc35      	bgt.n	80056ae <prvCLITask+0x13a>
						cInputString[cInputIndex] =cRxedChar;
 8005642:	4a2f      	ldr	r2, [pc, #188]	; (8005700 <prvCLITask+0x18c>)
 8005644:	5593      	strb	r3, [r2, r6]
						cInputIndex++;
 8005646:	3601      	adds	r6, #1
 8005648:	b276      	sxtb	r6, r6
 800564a:	e030      	b.n	80056ae <prvCLITask+0x13a>
			taskYIELD();
 800564c:	f00c f8ca 	bl	80117e4 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005650:	3401      	adds	r4, #1
 8005652:	b2a4      	uxth	r4, r4
 8005654:	2c3f      	cmp	r4, #63	; 0x3f
 8005656:	d8dd      	bhi.n	8005614 <prvCLITask+0xa0>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005658:	4b24      	ldr	r3, [pc, #144]	; (80056ec <prvCLITask+0x178>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	3b01      	subs	r3, #1
 800565e:	0198      	lsls	r0, r3, #6
 8005660:	4a25      	ldr	r2, [pc, #148]	; (80056f8 <prvCLITask+0x184>)
 8005662:	1812      	adds	r2, r2, r0
 8005664:	5d12      	ldrb	r2, [r2, r4]
 8005666:	2a00      	cmp	r2, #0
 8005668:	d1ca      	bne.n	8005600 <prvCLITask+0x8c>
			if(chr == MSG_RX_BUF_SIZE - 1){
 800566a:	2c3f      	cmp	r4, #63	; 0x3f
 800566c:	d1ee      	bne.n	800564c <prvCLITask+0xd8>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800566e:	4a23      	ldr	r2, [pc, #140]	; (80056fc <prvCLITask+0x188>)
 8005670:	2100      	movs	r1, #0
 8005672:	54d1      	strb	r1, [r2, r3]
 8005674:	2400      	movs	r4, #0
 8005676:	e7e9      	b.n	800564c <prvCLITask+0xd8>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005678:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <prvCLITask+0x178>)
 800567a:	7818      	ldrb	r0, [r3, #0]
 800567c:	230a      	movs	r3, #10
 800567e:	2202      	movs	r2, #2
 8005680:	4920      	ldr	r1, [pc, #128]	; (8005704 <prvCLITask+0x190>)
 8005682:	f00a f8bf 	bl	800f804 <writePxITMutex>
			if(cInputIndex == 0){
 8005686:	2e00      	cmp	r6, #0
 8005688:	d019      	beq.n	80056be <prvCLITask+0x14a>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800568a:	4c1d      	ldr	r4, [pc, #116]	; (8005700 <prvCLITask+0x18c>)
 800568c:	4b17      	ldr	r3, [pc, #92]	; (80056ec <prvCLITask+0x178>)
 800568e:	7818      	ldrb	r0, [r3, #0]
 8005690:	002b      	movs	r3, r5
 8005692:	0022      	movs	r2, r4
 8005694:	2101      	movs	r1, #1
 8005696:	f7ff fd67 	bl	8005168 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 800569a:	0021      	movs	r1, r4
 800569c:	481a      	ldr	r0, [pc, #104]	; (8005708 <prvCLITask+0x194>)
 800569e:	f010 f829 	bl	80156f4 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 80056a2:	2232      	movs	r2, #50	; 0x32
 80056a4:	2100      	movs	r1, #0
 80056a6:	0020      	movs	r0, r4
 80056a8:	f00f fdee 	bl	8015288 <memset>
			cInputIndex =0;
 80056ac:	2600      	movs	r6, #0
		taskYIELD();
 80056ae:	f00c f899 	bl	80117e4 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80056b2:	4b0e      	ldr	r3, [pc, #56]	; (80056ec <prvCLITask+0x178>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	4a10      	ldr	r2, [pc, #64]	; (80056fc <prvCLITask+0x188>)
 80056ba:	5cd4      	ldrb	r4, [r2, r3]
 80056bc:	e7ca      	b.n	8005654 <prvCLITask+0xe0>
				strcpy((char* )cInputString,(char* )cLastInputString);
 80056be:	4912      	ldr	r1, [pc, #72]	; (8005708 <prvCLITask+0x194>)
 80056c0:	480f      	ldr	r0, [pc, #60]	; (8005700 <prvCLITask+0x18c>)
 80056c2:	f010 f817 	bl	80156f4 <strcpy>
 80056c6:	e7e0      	b.n	800568a <prvCLITask+0x116>
				if(cInputIndex > 0){
 80056c8:	2e00      	cmp	r6, #0
 80056ca:	ddf0      	ble.n	80056ae <prvCLITask+0x13a>
					cInputIndex--;
 80056cc:	3e01      	subs	r6, #1
 80056ce:	b276      	sxtb	r6, r6
					cInputString[cInputIndex] ='\0';
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <prvCLITask+0x18c>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	559a      	strb	r2, [r3, r6]
 80056d6:	e7ea      	b.n	80056ae <prvCLITask+0x13a>
 80056d8:	20006da0 	.word	0x20006da0
 80056dc:	20000050 	.word	0x20000050
 80056e0:	08019e84 	.word	0x08019e84
 80056e4:	20001066 	.word	0x20001066
 80056e8:	20001208 	.word	0x20001208
 80056ec:	20000a9f 	.word	0x20000a9f
 80056f0:	0801a398 	.word	0x0801a398
 80056f4:	0801a3c4 	.word	0x0801a3c4
 80056f8:	200012b8 	.word	0x200012b8
 80056fc:	200013f8 	.word	0x200013f8
 8005700:	20001138 	.word	0x20001138
 8005704:	0801bc80 	.word	0x0801bc80
 8005708:	200011d4 	.word	0x200011d4

0800570c <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005710:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <ParseSnippetCommand+0x78>)
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	3a01      	subs	r2, #1
 8005716:	0093      	lsls	r3, r2, #2
 8005718:	189b      	adds	r3, r3, r2
 800571a:	009a      	lsls	r2, r3, #2
 800571c:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <ParseSnippetCommand+0x7c>)
 800571e:	189b      	adds	r3, r3, r2
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d02c      	beq.n	8005780 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005726:	4b19      	ldr	r3, [pc, #100]	; (800578c <ParseSnippetCommand+0x80>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d014      	beq.n	8005758 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800572e:	4b17      	ldr	r3, [pc, #92]	; (800578c <ParseSnippetCommand+0x80>)
 8005730:	681d      	ldr	r5, [r3, #0]
 8005732:	782b      	ldrb	r3, [r5, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d012      	beq.n	800575e <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005738:	2113      	movs	r1, #19
 800573a:	0028      	movs	r0, r5
 800573c:	f00f ffcc 	bl	80156d8 <strchr>
 8005740:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 8005742:	d011      	beq.n	8005768 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005744:	1b42      	subs	r2, r0, r5
 8005746:	0029      	movs	r1, r5
 8005748:	0020      	movs	r0, r4
 800574a:	f00f ffec 	bl	8015726 <strncpy>
		ptrStart =ptrEnd + 1;
 800574e:	3601      	adds	r6, #1
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <ParseSnippetCommand+0x80>)
 8005752:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005754:	2001      	movs	r0, #1
 8005756:	e006      	b.n	8005766 <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <ParseSnippetCommand+0x80>)
 800575a:	6018      	str	r0, [r3, #0]
 800575c:	e7e7      	b.n	800572e <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <ParseSnippetCommand+0x80>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
		return false;
 8005764:	2000      	movs	r0, #0
}
 8005766:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005768:	0029      	movs	r1, r5
 800576a:	0020      	movs	r0, r4
 800576c:	f00f ffc2 	bl	80156f4 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005770:	0020      	movs	r0, r4
 8005772:	f7fa fcd1 	bl	8000118 <strlen>
 8005776:	182d      	adds	r5, r5, r0
 8005778:	4b04      	ldr	r3, [pc, #16]	; (800578c <ParseSnippetCommand+0x80>)
 800577a:	601d      	str	r5, [r3, #0]
	return true;
 800577c:	2001      	movs	r0, #1
 800577e:	e7f2      	b.n	8005766 <ParseSnippetCommand+0x5a>
		return false;
 8005780:	2000      	movs	r0, #0
 8005782:	e7f0      	b.n	8005766 <ParseSnippetCommand+0x5a>
 8005784:	20001207 	.word	0x20001207
 8005788:	20006dbc 	.word	0x20006dbc
 800578c:	20001230 	.word	0x20001230

08005790 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8005790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005792:	b083      	sub	sp, #12
 8005794:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005796:	0083      	lsls	r3, r0, #2
 8005798:	181b      	adds	r3, r3, r0
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	4b46      	ldr	r3, [pc, #280]	; (80058b8 <CheckSnippetCondition+0x128>)
 800579e:	5cd3      	ldrb	r3, [r2, r3]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d004      	beq.n	80057ae <CheckSnippetCondition+0x1e>
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d015      	beq.n	80057d4 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 80057a8:	2000      	movs	r0, #0
}
 80057aa:	b003      	add	sp, #12
 80057ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 80057ae:	4a42      	ldr	r2, [pc, #264]	; (80058b8 <CheckSnippetCondition+0x128>)
 80057b0:	0083      	lsls	r3, r0, #2
 80057b2:	1818      	adds	r0, r3, r0
 80057b4:	0081      	lsls	r1, r0, #2
 80057b6:	0008      	movs	r0, r1
 80057b8:	1851      	adds	r1, r2, r1
 80057ba:	7889      	ldrb	r1, [r1, #2]
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 80057bc:	1812      	adds	r2, r2, r0
 80057be:	78d2      	ldrb	r2, [r2, #3]
 80057c0:	00cb      	lsls	r3, r1, #3
 80057c2:	185b      	adds	r3, r3, r1
 80057c4:	493d      	ldr	r1, [pc, #244]	; (80058bc <CheckSnippetCondition+0x12c>)
 80057c6:	5c5b      	ldrb	r3, [r3, r1]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d001      	beq.n	80057d0 <CheckSnippetCondition+0x40>
				return false;
 80057cc:	2000      	movs	r0, #0
 80057ce:	e7ec      	b.n	80057aa <CheckSnippetCondition+0x1a>
				return true;
 80057d0:	2001      	movs	r0, #1
 80057d2:	e7ea      	b.n	80057aa <CheckSnippetCondition+0x1a>
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80057d4:	4e38      	ldr	r6, [pc, #224]	; (80058b8 <CheckSnippetCondition+0x128>)
 80057d6:	0085      	lsls	r5, r0, #2
 80057d8:	182b      	adds	r3, r5, r0
 80057da:	0099      	lsls	r1, r3, #2
 80057dc:	1871      	adds	r1, r6, r1
 80057de:	78ca      	ldrb	r2, [r1, #3]
 80057e0:	3a01      	subs	r2, #1
 80057e2:	0053      	lsls	r3, r2, #1
 80057e4:	189b      	adds	r3, r3, r2
 80057e6:	009a      	lsls	r2, r3, #2
 80057e8:	4b35      	ldr	r3, [pc, #212]	; (80058c0 <CheckSnippetCondition+0x130>)
 80057ea:	58d3      	ldr	r3, [r2, r3]
 80057ec:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80057ee:	3106      	adds	r1, #6
 80057f0:	2204      	movs	r2, #4
 80057f2:	a801      	add	r0, sp, #4
 80057f4:	f00f fd3f 	bl	8015276 <memcpy>
			switch(snippets[index].cond.mathOperator){
 80057f8:	192c      	adds	r4, r5, r4
 80057fa:	00a3      	lsls	r3, r4, #2
 80057fc:	18f6      	adds	r6, r6, r3
 80057fe:	7873      	ldrb	r3, [r6, #1]
 8005800:	2b06      	cmp	r3, #6
 8005802:	d847      	bhi.n	8005894 <CheckSnippetCondition+0x104>
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4a2f      	ldr	r2, [pc, #188]	; (80058c4 <CheckSnippetCondition+0x134>)
 8005808:	58d3      	ldr	r3, [r2, r3]
 800580a:	469f      	mov	pc, r3
					if(flt1 == flt2)
 800580c:	1c39      	adds	r1, r7, #0
 800580e:	9801      	ldr	r0, [sp, #4]
 8005810:	f7fa fe5e 	bl	80004d0 <__aeabi_fcmpeq>
 8005814:	2800      	cmp	r0, #0
 8005816:	d03f      	beq.n	8005898 <CheckSnippetCondition+0x108>
						return true;
 8005818:	2001      	movs	r0, #1
 800581a:	e7c6      	b.n	80057aa <CheckSnippetCondition+0x1a>
					if(flt1 > flt2)
 800581c:	1c39      	adds	r1, r7, #0
 800581e:	9801      	ldr	r0, [sp, #4]
 8005820:	f7fa fe5c 	bl	80004dc <__aeabi_fcmplt>
 8005824:	2800      	cmp	r0, #0
 8005826:	d101      	bne.n	800582c <CheckSnippetCondition+0x9c>
	return false;
 8005828:	2000      	movs	r0, #0
 800582a:	e7be      	b.n	80057aa <CheckSnippetCondition+0x1a>
						return true;
 800582c:	2001      	movs	r0, #1
 800582e:	e7bc      	b.n	80057aa <CheckSnippetCondition+0x1a>
					if(flt1 < flt2 && flt1 != 0.0f)
 8005830:	1c39      	adds	r1, r7, #0
 8005832:	9801      	ldr	r0, [sp, #4]
 8005834:	f7fa fe66 	bl	8000504 <__aeabi_fcmpgt>
 8005838:	2800      	cmp	r0, #0
 800583a:	d02f      	beq.n	800589c <CheckSnippetCondition+0x10c>
 800583c:	2100      	movs	r1, #0
 800583e:	1c38      	adds	r0, r7, #0
 8005840:	f7fa fe46 	bl	80004d0 <__aeabi_fcmpeq>
 8005844:	2800      	cmp	r0, #0
 8005846:	d12b      	bne.n	80058a0 <CheckSnippetCondition+0x110>
						return true;
 8005848:	3001      	adds	r0, #1
 800584a:	e7ae      	b.n	80057aa <CheckSnippetCondition+0x1a>
					if(flt1 >= flt2)
 800584c:	1c39      	adds	r1, r7, #0
 800584e:	9801      	ldr	r0, [sp, #4]
 8005850:	f7fa fe4e 	bl	80004f0 <__aeabi_fcmple>
 8005854:	2800      	cmp	r0, #0
 8005856:	d025      	beq.n	80058a4 <CheckSnippetCondition+0x114>
						return true;
 8005858:	2001      	movs	r0, #1
 800585a:	e7a6      	b.n	80057aa <CheckSnippetCondition+0x1a>
					if(flt1 <= flt2 && flt1 != 0.0f)
 800585c:	1c39      	adds	r1, r7, #0
 800585e:	9801      	ldr	r0, [sp, #4]
 8005860:	f7fa fe5a 	bl	8000518 <__aeabi_fcmpge>
 8005864:	2800      	cmp	r0, #0
 8005866:	d01f      	beq.n	80058a8 <CheckSnippetCondition+0x118>
 8005868:	2100      	movs	r1, #0
 800586a:	1c38      	adds	r0, r7, #0
 800586c:	f7fa fe30 	bl	80004d0 <__aeabi_fcmpeq>
 8005870:	2800      	cmp	r0, #0
 8005872:	d11b      	bne.n	80058ac <CheckSnippetCondition+0x11c>
						return true;
 8005874:	3001      	adds	r0, #1
 8005876:	e798      	b.n	80057aa <CheckSnippetCondition+0x1a>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005878:	1c39      	adds	r1, r7, #0
 800587a:	9801      	ldr	r0, [sp, #4]
 800587c:	f7fa fe28 	bl	80004d0 <__aeabi_fcmpeq>
 8005880:	2800      	cmp	r0, #0
 8005882:	d115      	bne.n	80058b0 <CheckSnippetCondition+0x120>
 8005884:	2100      	movs	r1, #0
 8005886:	1c38      	adds	r0, r7, #0
 8005888:	f7fa fe22 	bl	80004d0 <__aeabi_fcmpeq>
 800588c:	2800      	cmp	r0, #0
 800588e:	d111      	bne.n	80058b4 <CheckSnippetCondition+0x124>
						return true;
 8005890:	3001      	adds	r0, #1
 8005892:	e78a      	b.n	80057aa <CheckSnippetCondition+0x1a>
	return false;
 8005894:	2000      	movs	r0, #0
 8005896:	e788      	b.n	80057aa <CheckSnippetCondition+0x1a>
 8005898:	2000      	movs	r0, #0
 800589a:	e786      	b.n	80057aa <CheckSnippetCondition+0x1a>
 800589c:	2000      	movs	r0, #0
 800589e:	e784      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058a0:	2000      	movs	r0, #0
 80058a2:	e782      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058a4:	2000      	movs	r0, #0
 80058a6:	e780      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058a8:	2000      	movs	r0, #0
 80058aa:	e77e      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058ac:	2000      	movs	r0, #0
 80058ae:	e77c      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058b0:	2000      	movs	r0, #0
 80058b2:	e77a      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058b4:	2000      	movs	r0, #0
 80058b6:	e778      	b.n	80057aa <CheckSnippetCondition+0x1a>
 80058b8:	20006dbc 	.word	0x20006dbc
 80058bc:	200014b4 	.word	0x200014b4
 80058c0:	20000090 	.word	0x20000090
 80058c4:	0801a180 	.word	0x0801a180

080058c8 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80058c8:	b570      	push	{r4, r5, r6, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80058ca:	f00a f9c3 	bl	800fc54 <FreeRTOS_CLIGetOutputBuffer>
 80058ce:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80058d0:	2400      	movs	r4, #0
 80058d2:	e01b      	b.n	800590c <ExecuteSnippet+0x44>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80058d4:	4b19      	ldr	r3, [pc, #100]	; (800593c <ExecuteSnippet+0x74>)
 80058d6:	7818      	ldrb	r0, [r3, #0]
 80058d8:	002b      	movs	r3, r5
 80058da:	4a19      	ldr	r2, [pc, #100]	; (8005940 <ExecuteSnippet+0x78>)
 80058dc:	2100      	movs	r1, #0
 80058de:	f7ff fc43 	bl	8005168 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80058e2:	0028      	movs	r0, r5
 80058e4:	f7fa fc18 	bl	8000118 <strlen>
 80058e8:	0002      	movs	r2, r0
 80058ea:	2100      	movs	r1, #0
 80058ec:	0028      	movs	r0, r5
 80058ee:	f00f fccb 	bl	8015288 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80058f2:	00b3      	lsls	r3, r6, #2
 80058f4:	199b      	adds	r3, r3, r6
 80058f6:	009a      	lsls	r2, r3, #2
 80058f8:	4b12      	ldr	r3, [pc, #72]	; (8005944 <ExecuteSnippet+0x7c>)
 80058fa:	189b      	adds	r3, r3, r2
 80058fc:	68d8      	ldr	r0, [r3, #12]
 80058fe:	4910      	ldr	r1, [pc, #64]	; (8005940 <ExecuteSnippet+0x78>)
 8005900:	f7ff ff04 	bl	800570c <ParseSnippetCommand>
 8005904:	2800      	cmp	r0, #0
 8005906:	d1e5      	bne.n	80058d4 <ExecuteSnippet+0xc>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005908:	3401      	adds	r4, #1
 800590a:	b2a4      	uxth	r4, r4
 800590c:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <ExecuteSnippet+0x80>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	42a3      	cmp	r3, r4
 8005912:	d911      	bls.n	8005938 <ExecuteSnippet+0x70>
		if(snippets[s].state)								// Check for activated Snippets
 8005914:	0026      	movs	r6, r4
 8005916:	00a3      	lsls	r3, r4, #2
 8005918:	191b      	adds	r3, r3, r4
 800591a:	009a      	lsls	r2, r3, #2
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <ExecuteSnippet+0x7c>)
 800591e:	189b      	adds	r3, r3, r2
 8005920:	7c1b      	ldrb	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 8005926:	b2e0      	uxtb	r0, r4
 8005928:	f7ff ff32 	bl	8005790 <CheckSnippetCondition>
 800592c:	2800      	cmp	r0, #0
 800592e:	d0eb      	beq.n	8005908 <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005930:	4b06      	ldr	r3, [pc, #24]	; (800594c <ExecuteSnippet+0x84>)
 8005932:	2220      	movs	r2, #32
 8005934:	719a      	strb	r2, [r3, #6]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005936:	e7dc      	b.n	80058f2 <ExecuteSnippet+0x2a>
			}
		}
	}
	
	return result;
}
 8005938:	2000      	movs	r0, #0
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	20000a9f 	.word	0x20000a9f
 8005940:	200011a0 	.word	0x200011a0
 8005944:	20006dbc 	.word	0x20006dbc
 8005948:	20001207 	.word	0x20001207
 800594c:	20006da0 	.word	0x20006da0

08005950 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005950:	2000      	movs	r0, #0
 8005952:	4770      	bx	lr

08005954 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005956:	b083      	sub	sp, #12
 8005958:	0005      	movs	r5, r0
 800595a:	0016      	movs	r6, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 800595c:	2300      	movs	r3, #0
 800595e:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005960:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005962:	2800      	cmp	r0, #0
 8005964:	d101      	bne.n	800596a <setBaudrateCommand+0x16>
 8005966:	b672      	cpsid	i
 8005968:	e7fe      	b.n	8005968 <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800596a:	aa01      	add	r2, sp, #4
 800596c:	2101      	movs	r1, #1
 800596e:	0030      	movs	r0, r6
 8005970:	f00a f974 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005974:	2300      	movs	r3, #0
 8005976:	56c3      	ldrsb	r3, [r0, r3]
 8005978:	2b70      	cmp	r3, #112	; 0x70
 800597a:	d017      	beq.n	80059ac <setBaudrateCommand+0x58>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
	}
	else{
		result =BOS_ERR_WrongValue;
 800597c:	2768      	movs	r7, #104	; 0x68
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800597e:	466a      	mov	r2, sp
 8005980:	2102      	movs	r1, #2
 8005982:	0030      	movs	r0, r6
 8005984:	f00a f96a 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005988:	f00f f9eb 	bl	8014d62 <atol>
 800598c:	0006      	movs	r6, r0
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
 800598e:	2f68      	cmp	r7, #104	; 0x68
 8005990:	d012      	beq.n	80059b8 <setBaudrateCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
	}
	else{
		UpdateBaudrate(port,baudrate);
 8005992:	0001      	movs	r1, r0
 8005994:	0020      	movs	r0, r4
 8005996:	f009 ff77 	bl	800f888 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 800599a:	0023      	movs	r3, r4
 800599c:	0032      	movs	r2, r6
 800599e:	4909      	ldr	r1, [pc, #36]	; (80059c4 <setBaudrateCommand+0x70>)
 80059a0:	0028      	movs	r0, r5
 80059a2:	f00f fe6b 	bl	801567c <sprintf>
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 80059a6:	2000      	movs	r0, #0
 80059a8:	b003      	add	sp, #12
 80059aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059ac:	3001      	adds	r0, #1
 80059ae:	f00f f9d8 	bl	8014d62 <atol>
 80059b2:	b2c4      	uxtb	r4, r0
	BOS_Status result =BOS_OK;
 80059b4:	2700      	movs	r7, #0
 80059b6:	e7e2      	b.n	800597e <setBaudrateCommand+0x2a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80059b8:	2213      	movs	r2, #19
 80059ba:	4903      	ldr	r1, [pc, #12]	; (80059c8 <setBaudrateCommand+0x74>)
 80059bc:	0028      	movs	r0, r5
 80059be:	f00f fc5a 	bl	8015276 <memcpy>
 80059c2:	e7f0      	b.n	80059a6 <setBaudrateCommand+0x52>
 80059c4:	0801b03c 	.word	0x0801b03c
 80059c8:	0801b028 	.word	0x0801b028

080059cc <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059cc:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d101      	bne.n	80059d6 <flashsizeCommand+0xa>
 80059d2:	b672      	cpsid	i
 80059d4:	e7fe      	b.n	80059d4 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80059d6:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <flashsizeCommand+0x1c>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	0412      	lsls	r2, r2, #16
 80059dc:	0c12      	lsrs	r2, r2, #16
 80059de:	4903      	ldr	r1, [pc, #12]	; (80059ec <flashsizeCommand+0x20>)
 80059e0:	f00f fe4c 	bl	801567c <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80059e4:	2000      	movs	r0, #0
 80059e6:	bd10      	pop	{r4, pc}
 80059e8:	1ffff7cc 	.word	0x1ffff7cc
 80059ec:	0801aa1c 	.word	0x0801aa1c

080059f0 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059f0:	b510      	push	{r4, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	0004      	movs	r4, r0
 80059f6:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005a00:	2c00      	cmp	r4, #0
 8005a02:	d101      	bne.n	8005a08 <GetReadPrecentageCommand+0x18>
 8005a04:	b672      	cpsid	i
 8005a06:	e7fe      	b.n	8005a06 <GetReadPrecentageCommand+0x16>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a08:	aa01      	add	r2, sp, #4
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	f00a f926 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005a10:	2300      	movs	r3, #0
 8005a12:	56c3      	ldrsb	r3, [r0, r3]
 8005a14:	3b32      	subs	r3, #50	; 0x32
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d907      	bls.n	8005a2c <GetReadPrecentageCommand+0x3c>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a1c:	2215      	movs	r2, #21
 8005a1e:	490b      	ldr	r1, [pc, #44]	; (8005a4c <GetReadPrecentageCommand+0x5c>)
 8005a20:	0020      	movs	r0, r4
 8005a22:	f00f fc28 	bl	8015276 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 8005a26:	2000      	movs	r0, #0
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005a2c:	f00f f999 	bl	8014d62 <atol>
 8005a30:	b2c0      	uxtb	r0, r0
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8005a32:	4669      	mov	r1, sp
 8005a34:	f003 f9a0 	bl	8008d78 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005a38:	9800      	ldr	r0, [sp, #0]
 8005a3a:	f7fd fb73 	bl	8003124 <__aeabi_f2d>
 8005a3e:	0002      	movs	r2, r0
 8005a40:	000b      	movs	r3, r1
 8005a42:	4903      	ldr	r1, [pc, #12]	; (8005a50 <GetReadPrecentageCommand+0x60>)
 8005a44:	0020      	movs	r0, r4
 8005a46:	f00f fe19 	bl	801567c <sprintf>
 8005a4a:	e7ec      	b.n	8005a26 <GetReadPrecentageCommand+0x36>
 8005a4c:	0801a718 	.word	0x0801a718
 8005a50:	0801a6f4 	.word	0x0801a6f4

08005a54 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a54:	b510      	push	{r4, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d101      	bne.n	8005a68 <ReadVrefCommand+0x14>
 8005a64:	b672      	cpsid	i
 8005a66:	e7fe      	b.n	8005a66 <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005a68:	4669      	mov	r1, sp
 8005a6a:	a801      	add	r0, sp, #4
 8005a6c:	f003 f8c8 	bl	8008c00 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005a70:	a901      	add	r1, sp, #4
 8005a72:	0020      	movs	r0, r4
 8005a74:	f00f fe3e 	bl	80156f4 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005a78:	9800      	ldr	r0, [sp, #0]
 8005a7a:	f7fd fb53 	bl	8003124 <__aeabi_f2d>
 8005a7e:	0002      	movs	r2, r0
 8005a80:	000b      	movs	r3, r1
 8005a82:	4903      	ldr	r1, [pc, #12]	; (8005a90 <ReadVrefCommand+0x3c>)
 8005a84:	0020      	movs	r0, r4
 8005a86:	f00f fdf9 	bl	801567c <sprintf>
}
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	b002      	add	sp, #8
 8005a8e:	bd10      	pop	{r4, pc}
 8005a90:	0801a764 	.word	0x0801a764

08005a94 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a94:	b510      	push	{r4, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d101      	bne.n	8005aa8 <ReadTempCommand+0x14>
 8005aa4:	b672      	cpsid	i
 8005aa6:	e7fe      	b.n	8005aa6 <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005aa8:	4669      	mov	r1, sp
 8005aaa:	a801      	add	r0, sp, #4
 8005aac:	f003 f8a8 	bl	8008c00 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005ab0:	a901      	add	r1, sp, #4
 8005ab2:	0020      	movs	r0, r4
 8005ab4:	f00f fe1e 	bl	80156f4 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005ab8:	9801      	ldr	r0, [sp, #4]
 8005aba:	f7fd fb33 	bl	8003124 <__aeabi_f2d>
 8005abe:	0002      	movs	r2, r0
 8005ac0:	000b      	movs	r3, r1
 8005ac2:	4903      	ldr	r1, [pc, #12]	; (8005ad0 <ReadTempCommand+0x3c>)
 8005ac4:	0020      	movs	r0, r4
 8005ac6:	f00f fdd9 	bl	801567c <sprintf>
}
 8005aca:	2000      	movs	r0, #0
 8005acc:	b002      	add	sp, #8
 8005ace:	bd10      	pop	{r4, pc}
 8005ad0:	0801a730 	.word	0x0801a730

08005ad4 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	0004      	movs	r4, r0
 8005ada:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 8005ae0:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d101      	bne.n	8005aee <ADCReadCommand+0x1a>
 8005aea:	b672      	cpsid	i
 8005aec:	e7fe      	b.n	8005aec <ADCReadCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005aee:	aa03      	add	r2, sp, #12
 8005af0:	2101      	movs	r1, #1
 8005af2:	0028      	movs	r0, r5
 8005af4:	f00a f8b2 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8005af8:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005afa:	aa02      	add	r2, sp, #8
 8005afc:	2102      	movs	r1, #2
 8005afe:	0028      	movs	r0, r5
 8005b00:	f00a f8ac 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8005b04:	0005      	movs	r5, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005b06:	2300      	movs	r3, #0
 8005b08:	56f3      	ldrsb	r3, [r6, r3]
 8005b0a:	3b32      	subs	r3, #50	; 0x32
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d907      	bls.n	8005b22 <ADCReadCommand+0x4e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005b12:	2215      	movs	r2, #21
 8005b14:	4919      	ldr	r1, [pc, #100]	; (8005b7c <ADCReadCommand+0xa8>)
 8005b16:	0020      	movs	r0, r4
 8005b18:	f00f fbad 	bl	8015276 <memcpy>
}
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	b004      	add	sp, #16
 8005b20:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005b22:	0030      	movs	r0, r6
 8005b24:	f00f f91d 	bl	8014d62 <atol>
 8005b28:	b2c6      	uxtb	r6, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005b2a:	4915      	ldr	r1, [pc, #84]	; (8005b80 <ADCReadCommand+0xac>)
 8005b2c:	0028      	movs	r0, r5
 8005b2e:	f7fa fae9 	bl	8000104 <strcmp>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d005      	beq.n	8005b42 <ADCReadCommand+0x6e>
 8005b36:	4913      	ldr	r1, [pc, #76]	; (8005b84 <ADCReadCommand+0xb0>)
 8005b38:	0028      	movs	r0, r5
 8005b3a:	f7fa fae3 	bl	8000104 <strcmp>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d116      	bne.n	8005b70 <ADCReadCommand+0x9c>
			ADCSelectChannel(ADCports,ADC_Side);
 8005b42:	4d0f      	ldr	r5, [pc, #60]	; (8005b80 <ADCReadCommand+0xac>)
 8005b44:	0029      	movs	r1, r5
 8005b46:	0030      	movs	r0, r6
 8005b48:	f003 f9e4 	bl	8008f14 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005b4c:	aa01      	add	r2, sp, #4
 8005b4e:	0029      	movs	r1, r5
 8005b50:	0030      	movs	r0, r6
 8005b52:	f003 fa0d 	bl	8008f70 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005b56:	a901      	add	r1, sp, #4
 8005b58:	0020      	movs	r0, r4
 8005b5a:	f00f fdcb 	bl	80156f4 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005b5e:	9801      	ldr	r0, [sp, #4]
 8005b60:	f7fa fd38 	bl	80005d4 <__aeabi_f2uiz>
 8005b64:	b282      	uxth	r2, r0
 8005b66:	4908      	ldr	r1, [pc, #32]	; (8005b88 <ADCReadCommand+0xb4>)
 8005b68:	0020      	movs	r0, r4
 8005b6a:	f00f fd87 	bl	801567c <sprintf>
 8005b6e:	e7d5      	b.n	8005b1c <ADCReadCommand+0x48>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b70:	2212      	movs	r2, #18
 8005b72:	4906      	ldr	r1, [pc, #24]	; (8005b8c <ADCReadCommand+0xb8>)
 8005b74:	0020      	movs	r0, r4
 8005b76:	f00f fb7e 	bl	8015276 <memcpy>
 8005b7a:	e7cf      	b.n	8005b1c <ADCReadCommand+0x48>
 8005b7c:	0801a718 	.word	0x0801a718
 8005b80:	0801a6a4 	.word	0x0801a6a4
 8005b84:	0801a6a8 	.word	0x0801a6a8
 8005b88:	0801a6b0 	.word	0x0801a6b0
 8005b8c:	0801a6c0 	.word	0x0801a6c0

08005b90 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b92:	b085      	sub	sp, #20
 8005b94:	0004      	movs	r4, r0
 8005b96:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 8005b9c:	4b5f      	ldr	r3, [pc, #380]	; (8005d1c <testportCommand+0x18c>)
 8005b9e:	781a      	ldrb	r2, [r3, #0]
 8005ba0:	ab02      	add	r3, sp, #8
 8005ba2:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 8005ba4:	2c00      	cmp	r4, #0
 8005ba6:	d101      	bne.n	8005bac <testportCommand+0x1c>
 8005ba8:	b672      	cpsid	i
 8005baa:	e7fe      	b.n	8005baa <testportCommand+0x1a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bac:	aa03      	add	r2, sp, #12
 8005bae:	2101      	movs	r1, #1
 8005bb0:	f00a f854 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8005bb4:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005bb6:	495a      	ldr	r1, [pc, #360]	; (8005d20 <testportCommand+0x190>)
 8005bb8:	f7fa faa4 	bl	8000104 <strcmp>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d000      	beq.n	8005bc2 <testportCommand+0x32>
 8005bc0:	e06a      	b.n	8005c98 <testportCommand+0x108>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005bc2:	4b58      	ldr	r3, [pc, #352]	; (8005d24 <testportCommand+0x194>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	4a57      	ldr	r2, [pc, #348]	; (8005d28 <testportCommand+0x198>)
 8005bca:	5cd6      	ldrb	r6, [r2, r3]
		for(ports =1; ports <= NumOfPorts; ports++){
 8005bcc:	2501      	movs	r5, #1
 8005bce:	e005      	b.n	8005bdc <testportCommand+0x4c>
			if(PcPort != ports){
 8005bd0:	4b54      	ldr	r3, [pc, #336]	; (8005d24 <testportCommand+0x194>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	42ab      	cmp	r3, r5
 8005bd6:	d106      	bne.n	8005be6 <testportCommand+0x56>
		for(ports =1; ports <= NumOfPorts; ports++){
 8005bd8:	3501      	adds	r5, #1
 8005bda:	b2ed      	uxtb	r5, r5
 8005bdc:	2d05      	cmp	r5, #5
 8005bde:	d9f7      	bls.n	8005bd0 <testportCommand+0x40>
}
 8005be0:	2000      	movs	r0, #0
 8005be2:	b005      	add	sp, #20
 8005be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				WriteVaule[0] =rand();
 8005be6:	f00f fb67 	bl	80152b8 <rand>
 8005bea:	af02      	add	r7, sp, #8
 8005bec:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005bee:	2364      	movs	r3, #100	; 0x64
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	3b5a      	subs	r3, #90	; 0x5a
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	0039      	movs	r1, r7
 8005bf8:	0028      	movs	r0, r5
 8005bfa:	f009 fdd5 	bl	800f7a8 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005bfe:	0028      	movs	r0, r5
 8005c00:	f009 fdb4 	bl	800f76c <GetUart>
 8005c04:	6803      	ldr	r3, [r0, #0]
 8005c06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c08:	b2db      	uxtb	r3, r3
				if(WriteVaule[0] == ReadValue[0])
 8005c0a:	783a      	ldrb	r2, [r7, #0]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d022      	beq.n	8005c56 <testportCommand+0xc6>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005c10:	002a      	movs	r2, r5
 8005c12:	4946      	ldr	r1, [pc, #280]	; (8005d2c <testportCommand+0x19c>)
 8005c14:	0020      	movs	r0, r4
 8005c16:	f00f fd31 	bl	801567c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005c1a:	0020      	movs	r0, r4
 8005c1c:	f7fa fa7c 	bl	8000118 <strlen>
 8005c20:	b282      	uxth	r2, r0
 8005c22:	4b40      	ldr	r3, [pc, #256]	; (8005d24 <testportCommand+0x194>)
 8005c24:	7818      	ldrb	r0, [r3, #0]
 8005c26:	2364      	movs	r3, #100	; 0x64
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	3b5a      	subs	r3, #90	; 0x5a
 8005c2c:	0021      	movs	r1, r4
 8005c2e:	f009 fdbb 	bl	800f7a8 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005c32:	2254      	movs	r2, #84	; 0x54
 8005c34:	493e      	ldr	r1, [pc, #248]	; (8005d30 <testportCommand+0x1a0>)
 8005c36:	0020      	movs	r0, r4
 8005c38:	f00f fb1d 	bl	8015276 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005c3c:	0020      	movs	r0, r4
 8005c3e:	f7fa fa6b 	bl	8000118 <strlen>
 8005c42:	b282      	uxth	r2, r0
 8005c44:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <testportCommand+0x194>)
 8005c46:	7818      	ldrb	r0, [r3, #0]
 8005c48:	2364      	movs	r3, #100	; 0x64
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	3b5a      	subs	r3, #90	; 0x5a
 8005c4e:	0021      	movs	r1, r4
 8005c50:	f009 fdaa 	bl	800f7a8 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005c54:	e014      	b.n	8005c80 <testportCommand+0xf0>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005c56:	002a      	movs	r2, r5
 8005c58:	4936      	ldr	r1, [pc, #216]	; (8005d34 <testportCommand+0x1a4>)
 8005c5a:	0020      	movs	r0, r4
 8005c5c:	f00f fd0e 	bl	801567c <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005c60:	0020      	movs	r0, r4
 8005c62:	f7fa fa59 	bl	8000118 <strlen>
 8005c66:	b282      	uxth	r2, r0
 8005c68:	4b2e      	ldr	r3, [pc, #184]	; (8005d24 <testportCommand+0x194>)
 8005c6a:	7818      	ldrb	r0, [r3, #0]
 8005c6c:	2364      	movs	r3, #100	; 0x64
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	3b5a      	subs	r3, #90	; 0x5a
 8005c72:	0021      	movs	r1, r4
 8005c74:	f009 fd98 	bl	800f7a8 <writePxMutex>
 8005c78:	e7db      	b.n	8005c32 <testportCommand+0xa2>
					Delay_ms(1);
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	f00b ff44 	bl	8011b08 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005c80:	4b28      	ldr	r3, [pc, #160]	; (8005d24 <testportCommand+0x194>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	1c71      	adds	r1, r6, #1
 8005c88:	019b      	lsls	r3, r3, #6
 8005c8a:	4a2b      	ldr	r2, [pc, #172]	; (8005d38 <testportCommand+0x1a8>)
 8005c8c:	18d3      	adds	r3, r2, r3
 8005c8e:	5c5b      	ldrb	r3, [r3, r1]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0f2      	beq.n	8005c7a <testportCommand+0xea>
				LastEnter++;
 8005c94:	000e      	movs	r6, r1
 8005c96:	e79f      	b.n	8005bd8 <testportCommand+0x48>
	else if(pcParameterString1[0] == 'p'){
 8005c98:	2300      	movs	r3, #0
 8005c9a:	56eb      	ldrsb	r3, [r5, r3]
 8005c9c:	2b70      	cmp	r3, #112	; 0x70
 8005c9e:	d005      	beq.n	8005cac <testportCommand+0x11c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ca0:	220f      	movs	r2, #15
 8005ca2:	4926      	ldr	r1, [pc, #152]	; (8005d3c <testportCommand+0x1ac>)
 8005ca4:	0020      	movs	r0, r4
 8005ca6:	f00f fae6 	bl	8015276 <memcpy>
 8005caa:	e799      	b.n	8005be0 <testportCommand+0x50>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005cac:	1c68      	adds	r0, r5, #1
 8005cae:	f00f f858 	bl	8014d62 <atol>
 8005cb2:	0005      	movs	r5, r0
 8005cb4:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005cb6:	1e7b      	subs	r3, r7, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d81a      	bhi.n	8005cf4 <testportCommand+0x164>
				WriteVaule[0] =rand();
 8005cbe:	f00f fafb 	bl	80152b8 <rand>
 8005cc2:	ae02      	add	r6, sp, #8
 8005cc4:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005cc6:	2364      	movs	r3, #100	; 0x64
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	3b32      	subs	r3, #50	; 0x32
 8005ccc:	2201      	movs	r2, #1
 8005cce:	0031      	movs	r1, r6
 8005cd0:	0038      	movs	r0, r7
 8005cd2:	f009 fd69 	bl	800f7a8 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005cd6:	0038      	movs	r0, r7
 8005cd8:	f009 fd48 	bl	800f76c <GetUart>
 8005cdc:	6803      	ldr	r3, [r0, #0]
 8005cde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ce0:	b2db      	uxtb	r3, r3
			if(WriteVaule[0] == ReadValue[0])
 8005ce2:	7832      	ldrb	r2, [r6, #0]
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d10e      	bne.n	8005d06 <testportCommand+0x176>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005ce8:	b2ea      	uxtb	r2, r5
 8005cea:	4912      	ldr	r1, [pc, #72]	; (8005d34 <testportCommand+0x1a4>)
 8005cec:	0020      	movs	r0, r4
 8005cee:	f00f fcc5 	bl	801567c <sprintf>
 8005cf2:	e775      	b.n	8005be0 <testportCommand+0x50>
			result =BOS_ERR_WrongID;
 8005cf4:	2366      	movs	r3, #102	; 0x66
		else if(result == BOS_ERR_WrongID)
 8005cf6:	2b66      	cmp	r3, #102	; 0x66
 8005cf8:	d107      	bne.n	8005d0a <testportCommand+0x17a>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005cfa:	221b      	movs	r2, #27
 8005cfc:	4910      	ldr	r1, [pc, #64]	; (8005d40 <testportCommand+0x1b0>)
 8005cfe:	0020      	movs	r0, r4
 8005d00:	f00f fab9 	bl	8015276 <memcpy>
 8005d04:	e76c      	b.n	8005be0 <testportCommand+0x50>
				result =BOS_ERR_Keyword;
 8005d06:	2306      	movs	r3, #6
 8005d08:	e7f5      	b.n	8005cf6 <testportCommand+0x166>
		else if(result == BOS_ERR_Keyword)
 8005d0a:	2b06      	cmp	r3, #6
 8005d0c:	d000      	beq.n	8005d10 <testportCommand+0x180>
 8005d0e:	e767      	b.n	8005be0 <testportCommand+0x50>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005d10:	b2ea      	uxtb	r2, r5
 8005d12:	4906      	ldr	r1, [pc, #24]	; (8005d2c <testportCommand+0x19c>)
 8005d14:	0020      	movs	r0, r4
 8005d16:	f00f fcb1 	bl	801567c <sprintf>
 8005d1a:	e761      	b.n	8005be0 <testportCommand+0x50>
 8005d1c:	08019a78 	.word	0x08019a78
 8005d20:	08019e54 	.word	0x08019e54
 8005d24:	20000a9f 	.word	0x20000a9f
 8005d28:	200013f8 	.word	0x200013f8
 8005d2c:	0801c32c 	.word	0x0801c32c
 8005d30:	0801c340 	.word	0x0801c340
 8005d34:	0801c310 	.word	0x0801c310
 8005d38:	200012b8 	.word	0x200012b8
 8005d3c:	0801c3b0 	.word	0x0801c3b0
 8005d40:	0801c394 	.word	0x0801c394

08005d44 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d46:	b085      	sub	sp, #20
 8005d48:	0004      	movs	r4, r0
 8005d4a:	9201      	str	r2, [sp, #4]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9303      	str	r3, [sp, #12]
 8005d50:	9302      	str	r3, [sp, #8]
	configASSERT(pcWriteBuffer);
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d101      	bne.n	8005d5a <unbridgeCommand+0x16>
 8005d56:	b672      	cpsid	i
 8005d58:	e7fe      	b.n	8005d58 <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d5a:	aa03      	add	r2, sp, #12
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	9801      	ldr	r0, [sp, #4]
 8005d60:	f009 ff7c 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005d64:	2300      	movs	r3, #0
 8005d66:	56c3      	ldrsb	r3, [r0, r3]
 8005d68:	2b70      	cmp	r3, #112	; 0x70
 8005d6a:	d016      	beq.n	8005d9a <unbridgeCommand+0x56>
		result =BOS_ERR_WrongParam;
 8005d6c:	2767      	movs	r7, #103	; 0x67
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005d6e:	aa02      	add	r2, sp, #8
 8005d70:	2102      	movs	r1, #2
 8005d72:	9801      	ldr	r0, [sp, #4]
 8005d74:	f009 ff72 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005d78:	2300      	movs	r3, #0
 8005d7a:	56c3      	ldrsb	r3, [r0, r3]
 8005d7c:	2b70      	cmp	r3, #112	; 0x70
 8005d7e:	d012      	beq.n	8005da6 <unbridgeCommand+0x62>
		result =BOS_ERR_WrongParam;
 8005d80:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d01a      	beq.n	8005dbc <unbridgeCommand+0x78>
	else if(result == BOS_ERR_WrongParam)
 8005d86:	2867      	cmp	r0, #103	; 0x67
 8005d88:	d021      	beq.n	8005dce <unbridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005d8a:	2219      	movs	r2, #25
 8005d8c:	4913      	ldr	r1, [pc, #76]	; (8005ddc <unbridgeCommand+0x98>)
 8005d8e:	0020      	movs	r0, r4
 8005d90:	f00f fa71 	bl	8015276 <memcpy>
}
 8005d94:	2000      	movs	r0, #0
 8005d96:	b005      	add	sp, #20
 8005d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f00e ffe1 	bl	8014d62 <atol>
 8005da0:	b2c5      	uxtb	r5, r0
	BOS_Status result =BOS_OK;
 8005da2:	2700      	movs	r7, #0
 8005da4:	e7e3      	b.n	8005d6e <unbridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005da6:	3001      	adds	r0, #1
 8005da8:	f00e ffdb 	bl	8014d62 <atol>
 8005dac:	b2c6      	uxtb	r6, r0
	if(result == BOS_OK)
 8005dae:	2f00      	cmp	r7, #0
 8005db0:	d10b      	bne.n	8005dca <unbridgeCommand+0x86>
		result =Unbridge(port1,port2);
 8005db2:	0031      	movs	r1, r6
 8005db4:	0028      	movs	r0, r5
 8005db6:	f7fe fedd 	bl	8004b74 <Unbridge>
 8005dba:	e7e2      	b.n	8005d82 <unbridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005dbc:	0033      	movs	r3, r6
 8005dbe:	002a      	movs	r2, r5
 8005dc0:	4907      	ldr	r1, [pc, #28]	; (8005de0 <unbridgeCommand+0x9c>)
 8005dc2:	0020      	movs	r0, r4
 8005dc4:	f00f fc5a 	bl	801567c <sprintf>
 8005dc8:	e7e4      	b.n	8005d94 <unbridgeCommand+0x50>
		result =BOS_ERR_WrongParam;
 8005dca:	2067      	movs	r0, #103	; 0x67
 8005dcc:	e7db      	b.n	8005d86 <unbridgeCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005dce:	220f      	movs	r2, #15
 8005dd0:	4904      	ldr	r1, [pc, #16]	; (8005de4 <unbridgeCommand+0xa0>)
 8005dd2:	0020      	movs	r0, r4
 8005dd4:	f00f fa4f 	bl	8015276 <memcpy>
 8005dd8:	e7dc      	b.n	8005d94 <unbridgeCommand+0x50>
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	0801c45c 	.word	0x0801c45c
 8005de0:	0801c43c 	.word	0x0801c43c
 8005de4:	0801c3b0 	.word	0x0801c3b0

08005de8 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dea:	b085      	sub	sp, #20
 8005dec:	0004      	movs	r4, r0
 8005dee:	9201      	str	r2, [sp, #4]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	9303      	str	r3, [sp, #12]
 8005df4:	9302      	str	r3, [sp, #8]
	configASSERT(pcWriteBuffer);
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d101      	bne.n	8005dfe <bridgeCommand+0x16>
 8005dfa:	b672      	cpsid	i
 8005dfc:	e7fe      	b.n	8005dfc <bridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dfe:	aa03      	add	r2, sp, #12
 8005e00:	2101      	movs	r1, #1
 8005e02:	9801      	ldr	r0, [sp, #4]
 8005e04:	f009 ff2a 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005e08:	2300      	movs	r3, #0
 8005e0a:	56c3      	ldrsb	r3, [r0, r3]
 8005e0c:	2b70      	cmp	r3, #112	; 0x70
 8005e0e:	d016      	beq.n	8005e3e <bridgeCommand+0x56>
		result =BOS_ERR_WrongParam;
 8005e10:	2767      	movs	r7, #103	; 0x67
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005e12:	aa02      	add	r2, sp, #8
 8005e14:	2102      	movs	r1, #2
 8005e16:	9801      	ldr	r0, [sp, #4]
 8005e18:	f009 ff20 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	56c3      	ldrsb	r3, [r0, r3]
 8005e20:	2b70      	cmp	r3, #112	; 0x70
 8005e22:	d012      	beq.n	8005e4a <bridgeCommand+0x62>
		result =BOS_ERR_WrongParam;
 8005e24:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d01a      	beq.n	8005e60 <bridgeCommand+0x78>
	else if(result == BOS_ERR_WrongParam)
 8005e2a:	2867      	cmp	r0, #103	; 0x67
 8005e2c:	d021      	beq.n	8005e72 <bridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005e2e:	2217      	movs	r2, #23
 8005e30:	4913      	ldr	r1, [pc, #76]	; (8005e80 <bridgeCommand+0x98>)
 8005e32:	0020      	movs	r0, r4
 8005e34:	f00f fa1f 	bl	8015276 <memcpy>
}
 8005e38:	2000      	movs	r0, #0
 8005e3a:	b005      	add	sp, #20
 8005e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005e3e:	3001      	adds	r0, #1
 8005e40:	f00e ff8f 	bl	8014d62 <atol>
 8005e44:	b2c5      	uxtb	r5, r0
	BOS_Status result =BOS_OK;
 8005e46:	2700      	movs	r7, #0
 8005e48:	e7e3      	b.n	8005e12 <bridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f00e ff89 	bl	8014d62 <atol>
 8005e50:	b2c6      	uxtb	r6, r0
	if(result == BOS_OK)
 8005e52:	2f00      	cmp	r7, #0
 8005e54:	d10b      	bne.n	8005e6e <bridgeCommand+0x86>
		result =Bridge(port1,port2);
 8005e56:	0031      	movs	r1, r6
 8005e58:	0028      	movs	r0, r5
 8005e5a:	f7fe fe77 	bl	8004b4c <Bridge>
 8005e5e:	e7e2      	b.n	8005e26 <bridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005e60:	0033      	movs	r3, r6
 8005e62:	002a      	movs	r2, r5
 8005e64:	4907      	ldr	r1, [pc, #28]	; (8005e84 <bridgeCommand+0x9c>)
 8005e66:	0020      	movs	r0, r4
 8005e68:	f00f fc08 	bl	801567c <sprintf>
 8005e6c:	e7e4      	b.n	8005e38 <bridgeCommand+0x50>
		result =BOS_ERR_WrongParam;
 8005e6e:	2067      	movs	r0, #103	; 0x67
 8005e70:	e7db      	b.n	8005e2a <bridgeCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005e72:	220f      	movs	r2, #15
 8005e74:	4904      	ldr	r1, [pc, #16]	; (8005e88 <bridgeCommand+0xa0>)
 8005e76:	0020      	movs	r0, r4
 8005e78:	f00f f9fd 	bl	8015276 <memcpy>
 8005e7c:	e7dc      	b.n	8005e38 <bridgeCommand+0x50>
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	0801a8b8 	.word	0x0801a8b8
 8005e84:	0801a894 	.word	0x0801a894
 8005e88:	0801c3b0 	.word	0x0801c3b0

08005e8c <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	0006      	movs	r6, r0
 8005e92:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	d101      	bne.n	8005ea0 <delSnipCommand+0x14>
 8005e9c:	b672      	cpsid	i
 8005e9e:	e7fe      	b.n	8005e9e <delSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ea0:	aa01      	add	r2, sp, #4
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	f009 feda 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005ea8:	f00e ff55 	bl	8014d56 <atoi>
 8005eac:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005eae:	2c00      	cmp	r4, #0
 8005eb0:	d03f      	beq.n	8005f32 <delSnipCommand+0xa6>
 8005eb2:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <delSnipCommand+0xc8>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	42a3      	cmp	r3, r4
 8005eb8:	d201      	bcs.n	8005ebe <delSnipCommand+0x32>
 8005eba:	23ff      	movs	r3, #255	; 0xff
 8005ebc:	e03a      	b.n	8005f34 <delSnipCommand+0xa8>
		snippets[index - 1].cond.conditionType =0;
 8005ebe:	b2c0      	uxtb	r0, r0
 8005ec0:	3801      	subs	r0, #1
 8005ec2:	4d25      	ldr	r5, [pc, #148]	; (8005f58 <delSnipCommand+0xcc>)
 8005ec4:	2314      	movs	r3, #20
 8005ec6:	4358      	muls	r0, r3
 8005ec8:	2700      	movs	r7, #0
 8005eca:	5547      	strb	r7, [r0, r5]
		snippets[index - 1].cond.mathOperator =0;
 8005ecc:	182d      	adds	r5, r5, r0
 8005ece:	706f      	strb	r7, [r5, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005ed0:	1ca8      	adds	r0, r5, #2
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	0039      	movs	r1, r7
 8005ed6:	f00f f9d7 	bl	8015288 <memset>
		snippets[index - 1].state = false;
 8005eda:	742f      	strb	r7, [r5, #16]
		free(snippets[index - 1].cmd);
 8005edc:	68e8      	ldr	r0, [r5, #12]
 8005ede:	f00e ff87 	bl	8014df0 <free>
		snippets[index - 1].cmd = NULL;
 8005ee2:	60ef      	str	r7, [r5, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005ee4:	e008      	b.n	8005ef8 <delSnipCommand+0x6c>
			if(snippets[s].cond.conditionType){
 8005ee6:	00a3      	lsls	r3, r4, #2
 8005ee8:	191b      	adds	r3, r3, r4
 8005eea:	009a      	lsls	r2, r3, #2
 8005eec:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <delSnipCommand+0xcc>)
 8005eee:	5cd3      	ldrb	r3, [r2, r3]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10c      	bne.n	8005f0e <delSnipCommand+0x82>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005ef4:	3401      	adds	r4, #1
 8005ef6:	b2e4      	uxtb	r4, r4
 8005ef8:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <delSnipCommand+0xc8>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	d8f2      	bhi.n	8005ee6 <delSnipCommand+0x5a>
		--numOfRecordedSnippets;
 8005f00:	3b01      	subs	r3, #1
 8005f02:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <delSnipCommand+0xc8>)
 8005f04:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005f06:	f005 ff13 	bl	800bd30 <SaveToRO>
	BOS_Status result =BOS_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	e012      	b.n	8005f34 <delSnipCommand+0xa8>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005f0e:	1e60      	subs	r0, r4, #1
 8005f10:	2714      	movs	r7, #20
 8005f12:	4378      	muls	r0, r7
 8005f14:	4b10      	ldr	r3, [pc, #64]	; (8005f58 <delSnipCommand+0xcc>)
 8005f16:	18c0      	adds	r0, r0, r3
 8005f18:	003d      	movs	r5, r7
 8005f1a:	4365      	muls	r5, r4
 8005f1c:	18ed      	adds	r5, r5, r3
 8005f1e:	003a      	movs	r2, r7
 8005f20:	0029      	movs	r1, r5
 8005f22:	f00f f9a8 	bl	8015276 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005f26:	003a      	movs	r2, r7
 8005f28:	2100      	movs	r1, #0
 8005f2a:	0028      	movs	r0, r5
 8005f2c:	f00f f9ac 	bl	8015288 <memset>
 8005f30:	e7e0      	b.n	8005ef4 <delSnipCommand+0x68>
 8005f32:	23ff      	movs	r3, #255	; 0xff
	if(result == BOS_OK)
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <delSnipCommand+0xb8>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005f38:	2223      	movs	r2, #35	; 0x23
 8005f3a:	4908      	ldr	r1, [pc, #32]	; (8005f5c <delSnipCommand+0xd0>)
 8005f3c:	0030      	movs	r0, r6
 8005f3e:	f00f f99a 	bl	8015276 <memcpy>
 8005f42:	e004      	b.n	8005f4e <delSnipCommand+0xc2>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005f44:	2236      	movs	r2, #54	; 0x36
 8005f46:	4906      	ldr	r1, [pc, #24]	; (8005f60 <delSnipCommand+0xd4>)
 8005f48:	0030      	movs	r0, r6
 8005f4a:	f00f f994 	bl	8015276 <memcpy>
}
 8005f4e:	2000      	movs	r0, #0
 8005f50:	b003      	add	sp, #12
 8005f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f54:	20001207 	.word	0x20001207
 8005f58:	20006dbc 	.word	0x20006dbc
 8005f5c:	0801a9d8 	.word	0x0801a9d8
 8005f60:	0801a9a0 	.word	0x0801a9a0

08005f64 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f64:	b510      	push	{r4, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	0004      	movs	r4, r0
 8005f6a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005f70:	2c00      	cmp	r4, #0
 8005f72:	d101      	bne.n	8005f78 <pauseSnipCommand+0x14>
 8005f74:	b672      	cpsid	i
 8005f76:	e7fe      	b.n	8005f76 <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005f78:	aa01      	add	r2, sp, #4
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	f009 fe6e 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005f80:	f00e fee9 	bl	8014d56 <atoi>
 8005f84:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <pauseSnipCommand+0x2e>
 8005f8a:	4a0e      	ldr	r2, [pc, #56]	; (8005fc4 <pauseSnipCommand+0x60>)
 8005f8c:	7812      	ldrb	r2, [r2, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d207      	bcs.n	8005fa2 <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005f92:	2223      	movs	r2, #35	; 0x23
 8005f94:	490c      	ldr	r1, [pc, #48]	; (8005fc8 <pauseSnipCommand+0x64>)
 8005f96:	0020      	movs	r0, r4
 8005f98:	f00f f96d 	bl	8015276 <memcpy>
}
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	b002      	add	sp, #8
 8005fa0:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005fa2:	b2c0      	uxtb	r0, r0
 8005fa4:	3801      	subs	r0, #1
 8005fa6:	2314      	movs	r3, #20
 8005fa8:	4343      	muls	r3, r0
 8005faa:	4808      	ldr	r0, [pc, #32]	; (8005fcc <pauseSnipCommand+0x68>)
 8005fac:	18c0      	adds	r0, r0, r3
 8005fae:	2300      	movs	r3, #0
 8005fb0:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005fb2:	f005 febd 	bl	800bd30 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005fb6:	2235      	movs	r2, #53	; 0x35
 8005fb8:	4905      	ldr	r1, [pc, #20]	; (8005fd0 <pauseSnipCommand+0x6c>)
 8005fba:	0020      	movs	r0, r4
 8005fbc:	f00f f95b 	bl	8015276 <memcpy>
 8005fc0:	e7ec      	b.n	8005f9c <pauseSnipCommand+0x38>
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	20001207 	.word	0x20001207
 8005fc8:	0801a9d8 	.word	0x0801a9d8
 8005fcc:	20006dbc 	.word	0x20006dbc
 8005fd0:	0801ade8 	.word	0x0801ade8

08005fd4 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	0004      	movs	r4, r0
 8005fda:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005fe0:	2c00      	cmp	r4, #0
 8005fe2:	d101      	bne.n	8005fe8 <actSnipCommand+0x14>
 8005fe4:	b672      	cpsid	i
 8005fe6:	e7fe      	b.n	8005fe6 <actSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005fe8:	aa01      	add	r2, sp, #4
 8005fea:	2101      	movs	r1, #1
 8005fec:	f009 fe36 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005ff0:	f00e feb1 	bl	8014d56 <atoi>
 8005ff4:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <actSnipCommand+0x2e>
 8005ffa:	4a0e      	ldr	r2, [pc, #56]	; (8006034 <actSnipCommand+0x60>)
 8005ffc:	7812      	ldrb	r2, [r2, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d207      	bcs.n	8006012 <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8006002:	2223      	movs	r2, #35	; 0x23
 8006004:	490c      	ldr	r1, [pc, #48]	; (8006038 <actSnipCommand+0x64>)
 8006006:	0020      	movs	r0, r4
 8006008:	f00f f935 	bl	8015276 <memcpy>
}
 800600c:	2000      	movs	r0, #0
 800600e:	b002      	add	sp, #8
 8006010:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8006012:	b2c0      	uxtb	r0, r0
 8006014:	3801      	subs	r0, #1
 8006016:	2314      	movs	r3, #20
 8006018:	4343      	muls	r3, r0
 800601a:	4808      	ldr	r0, [pc, #32]	; (800603c <actSnipCommand+0x68>)
 800601c:	18c0      	adds	r0, r0, r3
 800601e:	2301      	movs	r3, #1
 8006020:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8006022:	f005 fe85 	bl	800bd30 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8006026:	2238      	movs	r2, #56	; 0x38
 8006028:	4905      	ldr	r1, [pc, #20]	; (8006040 <actSnipCommand+0x6c>)
 800602a:	0020      	movs	r0, r4
 800602c:	f00f f923 	bl	8015276 <memcpy>
 8006030:	e7ec      	b.n	800600c <actSnipCommand+0x38>
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	20001207 	.word	0x20001207
 8006038:	0801a9d8 	.word	0x0801a9d8
 800603c:	20006dbc 	.word	0x20006dbc
 8006040:	0801a79c 	.word	0x0801a79c

08006044 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006046:	46ce      	mov	lr, r9
 8006048:	4647      	mov	r7, r8
 800604a:	b580      	push	{r7, lr}
 800604c:	b08b      	sub	sp, #44	; 0x2c
 800604e:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8006050:	aa06      	add	r2, sp, #24
 8006052:	4b74      	ldr	r3, [pc, #464]	; (8006224 <snipCommand+0x1e0>)
 8006054:	3304      	adds	r3, #4
 8006056:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006058:	c223      	stmia	r2!, {r0, r1, r5}
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 800605e:	2c00      	cmp	r4, #0
 8006060:	d101      	bne.n	8006066 <snipCommand+0x22>
 8006062:	b672      	cpsid	i
 8006064:	e7fe      	b.n	8006064 <snipCommand+0x20>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8006066:	4b70      	ldr	r3, [pc, #448]	; (8006228 <snipCommand+0x1e4>)
 8006068:	7818      	ldrb	r0, [r3, #0]
 800606a:	2301      	movs	r3, #1
 800606c:	425b      	negs	r3, r3
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	3333      	adds	r3, #51	; 0x33
 8006072:	2237      	movs	r2, #55	; 0x37
 8006074:	496d      	ldr	r1, [pc, #436]	; (800622c <snipCommand+0x1e8>)
 8006076:	f009 fb97 	bl	800f7a8 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 800607a:	2700      	movs	r7, #0
	uint8_t count =1;
 800607c:	2301      	movs	r3, #1
 800607e:	4698      	mov	r8, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8006080:	e088      	b.n	8006194 <snipCommand+0x150>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8006082:	4b6b      	ldr	r3, [pc, #428]	; (8006230 <snipCommand+0x1ec>)
 8006084:	189b      	adds	r3, r3, r2
 8006086:	7c1a      	ldrb	r2, [r3, #16]
 8006088:	00d3      	lsls	r3, r2, #3
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	aa06      	add	r2, sp, #24
 800608e:	4694      	mov	ip, r2
 8006090:	4463      	add	r3, ip
 8006092:	4642      	mov	r2, r8
 8006094:	4967      	ldr	r1, [pc, #412]	; (8006234 <snipCommand+0x1f0>)
 8006096:	0020      	movs	r0, r4
 8006098:	f00f faf0 	bl	801567c <sprintf>
 800609c:	e087      	b.n	80061ae <snipCommand+0x16a>
				switch(snippets[s].cond.buffer1[1]){
 800609e:	00ab      	lsls	r3, r5, #2
 80060a0:	195b      	adds	r3, r3, r5
 80060a2:	009a      	lsls	r2, r3, #2
 80060a4:	4b62      	ldr	r3, [pc, #392]	; (8006230 <snipCommand+0x1ec>)
 80060a6:	189b      	adds	r3, r3, r2
 80060a8:	78db      	ldrb	r3, [r3, #3]
 80060aa:	3b05      	subs	r3, #5
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	2a09      	cmp	r2, #9
 80060b0:	d84a      	bhi.n	8006148 <snipCommand+0x104>
 80060b2:	0093      	lsls	r3, r2, #2
 80060b4:	4a60      	ldr	r2, [pc, #384]	; (8006238 <snipCommand+0x1f4>)
 80060b6:	58d3      	ldr	r3, [r2, r3]
 80060b8:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 80060ba:	2314      	movs	r3, #20
 80060bc:	436b      	muls	r3, r5
 80060be:	4a5c      	ldr	r2, [pc, #368]	; (8006230 <snipCommand+0x1ec>)
 80060c0:	18d2      	adds	r2, r2, r3
 80060c2:	7893      	ldrb	r3, [r2, #2]
 80060c4:	68d2      	ldr	r2, [r2, #12]
 80060c6:	9200      	str	r2, [sp, #0]
 80060c8:	0022      	movs	r2, r4
 80060ca:	495c      	ldr	r1, [pc, #368]	; (800623c <snipCommand+0x1f8>)
 80060cc:	0020      	movs	r0, r4
 80060ce:	f00f fad5 	bl	801567c <sprintf>
						break;
 80060d2:	e039      	b.n	8006148 <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 80060d4:	2314      	movs	r3, #20
 80060d6:	436b      	muls	r3, r5
 80060d8:	4a55      	ldr	r2, [pc, #340]	; (8006230 <snipCommand+0x1ec>)
 80060da:	18d2      	adds	r2, r2, r3
 80060dc:	7893      	ldrb	r3, [r2, #2]
 80060de:	68d2      	ldr	r2, [r2, #12]
 80060e0:	9200      	str	r2, [sp, #0]
 80060e2:	0022      	movs	r2, r4
 80060e4:	4956      	ldr	r1, [pc, #344]	; (8006240 <snipCommand+0x1fc>)
 80060e6:	0020      	movs	r0, r4
 80060e8:	f00f fac8 	bl	801567c <sprintf>
						break;
 80060ec:	e02c      	b.n	8006148 <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 80060ee:	2314      	movs	r3, #20
 80060f0:	436b      	muls	r3, r5
 80060f2:	4a4f      	ldr	r2, [pc, #316]	; (8006230 <snipCommand+0x1ec>)
 80060f4:	18d2      	adds	r2, r2, r3
 80060f6:	7893      	ldrb	r3, [r2, #2]
 80060f8:	7911      	ldrb	r1, [r2, #4]
 80060fa:	68d2      	ldr	r2, [r2, #12]
 80060fc:	9201      	str	r2, [sp, #4]
 80060fe:	9100      	str	r1, [sp, #0]
 8006100:	0022      	movs	r2, r4
 8006102:	4950      	ldr	r1, [pc, #320]	; (8006244 <snipCommand+0x200>)
 8006104:	0020      	movs	r0, r4
 8006106:	f00f fab9 	bl	801567c <sprintf>
						break;
 800610a:	e01d      	b.n	8006148 <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 800610c:	2314      	movs	r3, #20
 800610e:	436b      	muls	r3, r5
 8006110:	4a47      	ldr	r2, [pc, #284]	; (8006230 <snipCommand+0x1ec>)
 8006112:	18d2      	adds	r2, r2, r3
 8006114:	7893      	ldrb	r3, [r2, #2]
 8006116:	7911      	ldrb	r1, [r2, #4]
 8006118:	68d2      	ldr	r2, [r2, #12]
 800611a:	9201      	str	r2, [sp, #4]
 800611c:	9100      	str	r1, [sp, #0]
 800611e:	0022      	movs	r2, r4
 8006120:	4949      	ldr	r1, [pc, #292]	; (8006248 <snipCommand+0x204>)
 8006122:	0020      	movs	r0, r4
 8006124:	f00f faaa 	bl	801567c <sprintf>
						break;
 8006128:	e00e      	b.n	8006148 <snipCommand+0x104>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 800612a:	4e48      	ldr	r6, [pc, #288]	; (800624c <snipCommand+0x208>)
 800612c:	0033      	movs	r3, r6
 800612e:	0022      	movs	r2, r4
 8006130:	4947      	ldr	r1, [pc, #284]	; (8006250 <snipCommand+0x20c>)
 8006132:	0020      	movs	r0, r4
 8006134:	f00f faa2 	bl	801567c <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8006138:	0030      	movs	r0, r6
 800613a:	f7f9 ffed 	bl	8000118 <strlen>
 800613e:	0002      	movs	r2, r0
 8006140:	2100      	movs	r1, #0
 8006142:	0030      	movs	r0, r6
 8006144:	f00f f8a0 	bl	8015288 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8006148:	00ab      	lsls	r3, r5, #2
 800614a:	195b      	adds	r3, r3, r5
 800614c:	009a      	lsls	r2, r3, #2
 800614e:	4b38      	ldr	r3, [pc, #224]	; (8006230 <snipCommand+0x1ec>)
 8006150:	189b      	adds	r3, r3, r2
 8006152:	68d8      	ldr	r0, [r3, #12]
 8006154:	493d      	ldr	r1, [pc, #244]	; (800624c <snipCommand+0x208>)
 8006156:	f7ff fad9 	bl	800570c <ParseSnippetCommand>
 800615a:	2800      	cmp	r0, #0
 800615c:	d1e5      	bne.n	800612a <snipCommand+0xe6>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 800615e:	0020      	movs	r0, r4
 8006160:	f7f9 ffda 	bl	8000118 <strlen>
 8006164:	1820      	adds	r0, r4, r0
 8006166:	220c      	movs	r2, #12
 8006168:	493a      	ldr	r1, [pc, #232]	; (8006254 <snipCommand+0x210>)
 800616a:	f00f f884 	bl	8015276 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800616e:	0020      	movs	r0, r4
 8006170:	f7f9 ffd2 	bl	8000118 <strlen>
 8006174:	b282      	uxth	r2, r0
 8006176:	4b2c      	ldr	r3, [pc, #176]	; (8006228 <snipCommand+0x1e4>)
 8006178:	7818      	ldrb	r0, [r3, #0]
 800617a:	2301      	movs	r3, #1
 800617c:	425b      	negs	r3, r3
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	3333      	adds	r3, #51	; 0x33
 8006182:	0021      	movs	r1, r4
 8006184:	f009 fb10 	bl	800f7a8 <writePxMutex>
		++count;
 8006188:	4643      	mov	r3, r8
 800618a:	3301      	adds	r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	4698      	mov	r8, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8006190:	3701      	adds	r7, #1
 8006192:	b2ff      	uxtb	r7, r7
 8006194:	4b30      	ldr	r3, [pc, #192]	; (8006258 <snipCommand+0x214>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	42bb      	cmp	r3, r7
 800619a:	d938      	bls.n	800620e <snipCommand+0x1ca>
		if(snippets[s].cond.conditionType)
 800619c:	003d      	movs	r5, r7
 800619e:	00bb      	lsls	r3, r7, #2
 80061a0:	19db      	adds	r3, r3, r7
 80061a2:	009a      	lsls	r2, r3, #2
 80061a4:	4b22      	ldr	r3, [pc, #136]	; (8006230 <snipCommand+0x1ec>)
 80061a6:	5cd3      	ldrb	r3, [r2, r3]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d000      	beq.n	80061ae <snipCommand+0x16a>
 80061ac:	e769      	b.n	8006082 <snipCommand+0x3e>
		switch(snippets[s].cond.conditionType){
 80061ae:	00ab      	lsls	r3, r5, #2
 80061b0:	195b      	adds	r3, r3, r5
 80061b2:	009a      	lsls	r2, r3, #2
 80061b4:	4b1e      	ldr	r3, [pc, #120]	; (8006230 <snipCommand+0x1ec>)
 80061b6:	5cd3      	ldrb	r3, [r2, r3]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d100      	bne.n	80061be <snipCommand+0x17a>
 80061bc:	e76f      	b.n	800609e <snipCommand+0x5a>
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d1c2      	bne.n	8006148 <snipCommand+0x104>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 80061c2:	00ab      	lsls	r3, r5, #2
 80061c4:	195b      	adds	r3, r3, r5
 80061c6:	009e      	lsls	r6, r3, #2
 80061c8:	4b19      	ldr	r3, [pc, #100]	; (8006230 <snipCommand+0x1ec>)
 80061ca:	18f6      	adds	r6, r6, r3
 80061cc:	1db1      	adds	r1, r6, #6
 80061ce:	2204      	movs	r2, #4
 80061d0:	a805      	add	r0, sp, #20
 80061d2:	f00f f850 	bl	8015276 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 80061d6:	78f2      	ldrb	r2, [r6, #3]
 80061d8:	3a01      	subs	r2, #1
 80061da:	7873      	ldrb	r3, [r6, #1]
 80061dc:	3b01      	subs	r3, #1
 80061de:	005e      	lsls	r6, r3, #1
 80061e0:	18f3      	adds	r3, r6, r3
 80061e2:	4e1e      	ldr	r6, [pc, #120]	; (800625c <snipCommand+0x218>)
 80061e4:	18f6      	adds	r6, r6, r3
 80061e6:	0053      	lsls	r3, r2, #1
 80061e8:	189b      	adds	r3, r3, r2
 80061ea:	009a      	lsls	r2, r3, #2
 80061ec:	4b1c      	ldr	r3, [pc, #112]	; (8006260 <snipCommand+0x21c>)
 80061ee:	189b      	adds	r3, r3, r2
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	4699      	mov	r9, r3
 80061f4:	9805      	ldr	r0, [sp, #20]
 80061f6:	f7fc ff95 	bl	8003124 <__aeabi_f2d>
 80061fa:	9002      	str	r0, [sp, #8]
 80061fc:	9103      	str	r1, [sp, #12]
 80061fe:	9600      	str	r6, [sp, #0]
 8006200:	464b      	mov	r3, r9
 8006202:	0022      	movs	r2, r4
 8006204:	4917      	ldr	r1, [pc, #92]	; (8006264 <snipCommand+0x220>)
 8006206:	0020      	movs	r0, r4
 8006208:	f00f fa38 	bl	801567c <sprintf>
				break;
 800620c:	e79c      	b.n	8006148 <snipCommand+0x104>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 800620e:	22b5      	movs	r2, #181	; 0xb5
 8006210:	4915      	ldr	r1, [pc, #84]	; (8006268 <snipCommand+0x224>)
 8006212:	0020      	movs	r0, r4
 8006214:	f00f f82f 	bl	8015276 <memcpy>
}
 8006218:	2000      	movs	r0, #0
 800621a:	b00b      	add	sp, #44	; 0x2c
 800621c:	bc0c      	pop	{r2, r3}
 800621e:	4690      	mov	r8, r2
 8006220:	4699      	mov	r9, r3
 8006222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006224:	08019a78 	.word	0x08019a78
 8006228:	20000a9f 	.word	0x20000a9f
 800622c:	0801b27c 	.word	0x0801b27c
 8006230:	20006dbc 	.word	0x20006dbc
 8006234:	0801b2b4 	.word	0x0801b2b4
 8006238:	0801a658 	.word	0x0801a658
 800623c:	0801b2c0 	.word	0x0801b2c0
 8006240:	0801b2d4 	.word	0x0801b2d4
 8006244:	0801b2ec 	.word	0x0801b2ec
 8006248:	0801b304 	.word	0x0801b304
 800624c:	20001238 	.word	0x20001238
 8006250:	0801b330 	.word	0x0801b330
 8006254:	0801b338 	.word	0x0801b338
 8006258:	20001207 	.word	0x20001207
 800625c:	0801adac 	.word	0x0801adac
 8006260:	20000090 	.word	0x20000090
 8006264:	0801b320 	.word	0x0801b320
 8006268:	0801b344 	.word	0x0801b344

0800626c <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800626c:	b510      	push	{r4, lr}
 800626e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006270:	d101      	bne.n	8006276 <idcodeCommand+0xa>
 8006272:	b672      	cpsid	i
 8006274:	e7fe      	b.n	8006274 <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 8006276:	f00b fc5b 	bl	8011b30 <HAL_GetDEVID>
	switch(dev){
 800627a:	0403      	lsls	r3, r0, #16
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	4a1b      	ldr	r2, [pc, #108]	; (80062ec <idcodeCommand+0x80>)
 8006280:	4694      	mov	ip, r2
 8006282:	4463      	add	r3, ip
 8006284:	2b08      	cmp	r3, #8
 8006286:	d82a      	bhi.n	80062de <idcodeCommand+0x72>
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4a19      	ldr	r2, [pc, #100]	; (80062f0 <idcodeCommand+0x84>)
 800628c:	58d3      	ldr	r3, [r2, r3]
 800628e:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8006290:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <idcodeCommand+0x88>)
 8006292:	4919      	ldr	r1, [pc, #100]	; (80062f8 <idcodeCommand+0x8c>)
 8006294:	0020      	movs	r0, r4
 8006296:	f00f f9f1 	bl	801567c <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 800629a:	f00b fc43 	bl	8011b24 <HAL_GetREVID>
 800629e:	0b03      	lsrs	r3, r0, #12
 80062a0:	0022      	movs	r2, r4
 80062a2:	4916      	ldr	r1, [pc, #88]	; (80062fc <idcodeCommand+0x90>)
 80062a4:	0020      	movs	r0, r4
 80062a6:	f00f f9e9 	bl	801567c <sprintf>
}
 80062aa:	2000      	movs	r0, #0
 80062ac:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 80062ae:	4a14      	ldr	r2, [pc, #80]	; (8006300 <idcodeCommand+0x94>)
 80062b0:	4911      	ldr	r1, [pc, #68]	; (80062f8 <idcodeCommand+0x8c>)
 80062b2:	0020      	movs	r0, r4
 80062b4:	f00f f9e2 	bl	801567c <sprintf>
			break;
 80062b8:	e7ef      	b.n	800629a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 80062ba:	4a12      	ldr	r2, [pc, #72]	; (8006304 <idcodeCommand+0x98>)
 80062bc:	490e      	ldr	r1, [pc, #56]	; (80062f8 <idcodeCommand+0x8c>)
 80062be:	0020      	movs	r0, r4
 80062c0:	f00f f9dc 	bl	801567c <sprintf>
			break;
 80062c4:	e7e9      	b.n	800629a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 80062c6:	4a10      	ldr	r2, [pc, #64]	; (8006308 <idcodeCommand+0x9c>)
 80062c8:	490b      	ldr	r1, [pc, #44]	; (80062f8 <idcodeCommand+0x8c>)
 80062ca:	0020      	movs	r0, r4
 80062cc:	f00f f9d6 	bl	801567c <sprintf>
			break;
 80062d0:	e7e3      	b.n	800629a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 80062d2:	4a0e      	ldr	r2, [pc, #56]	; (800630c <idcodeCommand+0xa0>)
 80062d4:	4908      	ldr	r1, [pc, #32]	; (80062f8 <idcodeCommand+0x8c>)
 80062d6:	0020      	movs	r0, r4
 80062d8:	f00f f9d0 	bl	801567c <sprintf>
			break;
 80062dc:	e7dd      	b.n	800629a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 80062de:	4a0c      	ldr	r2, [pc, #48]	; (8006310 <idcodeCommand+0xa4>)
 80062e0:	4905      	ldr	r1, [pc, #20]	; (80062f8 <idcodeCommand+0x8c>)
 80062e2:	0020      	movs	r0, r4
 80062e4:	f00f f9ca 	bl	801567c <sprintf>
			break;
 80062e8:	e7d7      	b.n	800629a <idcodeCommand+0x2e>
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	fffffbc0 	.word	0xfffffbc0
 80062f0:	0801a680 	.word	0x0801a680
 80062f4:	0801aca8 	.word	0x0801aca8
 80062f8:	0801acb4 	.word	0x0801acb4
 80062fc:	0801ad00 	.word	0x0801ad00
 8006300:	0801acc8 	.word	0x0801acc8
 8006304:	0801acd4 	.word	0x0801acd4
 8006308:	0801ace0 	.word	0x0801ace0
 800630c:	0801acec 	.word	0x0801acec
 8006310:	0801acf8 	.word	0x0801acf8

08006314 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006318:	d101      	bne.n	800631e <uuidCommand+0xa>
 800631a:	b672      	cpsid	i
 800631c:	e7fe      	b.n	800631c <uuidCommand+0x8>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 800631e:	220e      	movs	r2, #14
 8006320:	490d      	ldr	r1, [pc, #52]	; (8006358 <uuidCommand+0x44>)
 8006322:	f00e ffa8 	bl	8015276 <memcpy>
	for(uint8_t i =0; i < 3; i++){
 8006326:	2500      	movs	r5, #0
 8006328:	2d02      	cmp	r5, #2
 800632a:	d80b      	bhi.n	8006344 <uuidCommand+0x30>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <uuidCommand+0x48>)
 800632e:	18eb      	adds	r3, r5, r3
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	0022      	movs	r2, r4
 8006336:	490a      	ldr	r1, [pc, #40]	; (8006360 <uuidCommand+0x4c>)
 8006338:	0020      	movs	r0, r4
 800633a:	f00f f99f 	bl	801567c <sprintf>
	for(uint8_t i =0; i < 3; i++){
 800633e:	3501      	adds	r5, #1
 8006340:	b2ed      	uxtb	r5, r5
 8006342:	e7f1      	b.n	8006328 <uuidCommand+0x14>
	strcat((char* )pcWriteBuffer,"\r\n");
 8006344:	0020      	movs	r0, r4
 8006346:	f7f9 fee7 	bl	8000118 <strlen>
 800634a:	1820      	adds	r0, r4, r0
 800634c:	2203      	movs	r2, #3
 800634e:	4905      	ldr	r1, [pc, #20]	; (8006364 <uuidCommand+0x50>)
 8006350:	f00e ff91 	bl	8015276 <memcpy>
}
 8006354:	2000      	movs	r0, #0
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	0801c488 	.word	0x0801c488
 800635c:	07fffdeb 	.word	0x07fffdeb
 8006360:	0801c498 	.word	0x0801c498
 8006364:	0801bc80 	.word	0x0801bc80

08006368 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006368:	b530      	push	{r4, r5, lr}
 800636a:	b085      	sub	sp, #20
 800636c:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800636e:	d101      	bne.n	8006374 <timeCommand+0xc>
 8006370:	b672      	cpsid	i
 8006372:	e7fe      	b.n	8006372 <timeCommand+0xa>
	GetTimeDate();
 8006374:	f008 ffbe 	bl	800f2f4 <GetTimeDate>
	if(BOS.hourformat == 24)
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <timeCommand+0x80>)
 800637a:	7b5b      	ldrb	r3, [r3, #13]
 800637c:	2b18      	cmp	r3, #24
 800637e:	d004      	beq.n	800638a <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 8006380:	2b0c      	cmp	r3, #12
 8006382:	d00e      	beq.n	80063a2 <timeCommand+0x3a>
}
 8006384:	2000      	movs	r0, #0
 8006386:	b005      	add	sp, #20
 8006388:	bd30      	pop	{r4, r5, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 800638a:	4917      	ldr	r1, [pc, #92]	; (80063e8 <timeCommand+0x80>)
 800638c:	7c8a      	ldrb	r2, [r1, #18]
 800638e:	7c4b      	ldrb	r3, [r1, #17]
 8006390:	7c08      	ldrb	r0, [r1, #16]
 8006392:	89c9      	ldrh	r1, [r1, #14]
 8006394:	9101      	str	r1, [sp, #4]
 8006396:	9000      	str	r0, [sp, #0]
 8006398:	4914      	ldr	r1, [pc, #80]	; (80063ec <timeCommand+0x84>)
 800639a:	0020      	movs	r0, r4
 800639c:	f00f f96e 	bl	801567c <sprintf>
 80063a0:	e7f0      	b.n	8006384 <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 80063a2:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <timeCommand+0x80>)
 80063a4:	7cdb      	ldrb	r3, [r3, #19]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d10d      	bne.n	80063c6 <timeCommand+0x5e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 80063aa:	490f      	ldr	r1, [pc, #60]	; (80063e8 <timeCommand+0x80>)
 80063ac:	7c8a      	ldrb	r2, [r1, #18]
 80063ae:	7c4b      	ldrb	r3, [r1, #17]
 80063b0:	7c08      	ldrb	r0, [r1, #16]
 80063b2:	89c9      	ldrh	r1, [r1, #14]
 80063b4:	4d0e      	ldr	r5, [pc, #56]	; (80063f0 <timeCommand+0x88>)
 80063b6:	9502      	str	r5, [sp, #8]
 80063b8:	9101      	str	r1, [sp, #4]
 80063ba:	9000      	str	r0, [sp, #0]
 80063bc:	490d      	ldr	r1, [pc, #52]	; (80063f4 <timeCommand+0x8c>)
 80063be:	0020      	movs	r0, r4
 80063c0:	f00f f95c 	bl	801567c <sprintf>
 80063c4:	e7de      	b.n	8006384 <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d1dc      	bne.n	8006384 <timeCommand+0x1c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 80063ca:	4907      	ldr	r1, [pc, #28]	; (80063e8 <timeCommand+0x80>)
 80063cc:	7c8a      	ldrb	r2, [r1, #18]
 80063ce:	7c4b      	ldrb	r3, [r1, #17]
 80063d0:	7c08      	ldrb	r0, [r1, #16]
 80063d2:	89c9      	ldrh	r1, [r1, #14]
 80063d4:	4d08      	ldr	r5, [pc, #32]	; (80063f8 <timeCommand+0x90>)
 80063d6:	9502      	str	r5, [sp, #8]
 80063d8:	9101      	str	r1, [sp, #4]
 80063da:	9000      	str	r0, [sp, #0]
 80063dc:	4905      	ldr	r1, [pc, #20]	; (80063f4 <timeCommand+0x8c>)
 80063de:	0020      	movs	r0, r4
 80063e0:	f00f f94c 	bl	801567c <sprintf>
 80063e4:	e7ce      	b.n	8006384 <timeCommand+0x1c>
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	20006da0 	.word	0x20006da0
 80063ec:	0801c3d0 	.word	0x0801c3d0
 80063f0:	0801c424 	.word	0x0801c424
 80063f4:	0801c3f8 	.word	0x0801c3f8
 80063f8:	0801c428 	.word	0x0801c428

080063fc <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063fc:	b510      	push	{r4, lr}
 80063fe:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006400:	d101      	bne.n	8006406 <dateCommand+0xa>
 8006402:	b672      	cpsid	i
 8006404:	e7fe      	b.n	8006404 <dateCommand+0x8>
	GetTimeDate();
 8006406:	f008 ff75 	bl	800f2f4 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 800640a:	f7fe fb7d 	bl	8004b08 <GetDateString>
 800640e:	0002      	movs	r2, r0
 8006410:	4902      	ldr	r1, [pc, #8]	; (800641c <dateCommand+0x20>)
 8006412:	0020      	movs	r0, r4
 8006414:	f00f f932 	bl	801567c <sprintf>
}
 8006418:	2000      	movs	r0, #0
 800641a:	bd10      	pop	{r4, pc}
 800641c:	0801a8e0 	.word	0x0801a8e0

08006420 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006422:	b083      	sub	sp, #12
 8006424:	0004      	movs	r4, r0
 8006426:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006428:	2300      	movs	r3, #0
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800642e:	2800      	cmp	r0, #0
 8006430:	d101      	bne.n	8006436 <getCommand+0x16>
 8006432:	b672      	cpsid	i
 8006434:	e7fe      	b.n	8006434 <getCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006436:	aa01      	add	r2, sp, #4
 8006438:	2101      	movs	r1, #1
 800643a:	0030      	movs	r0, r6
 800643c:	f009 fc0e 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8006440:	0005      	movs	r5, r0
 8006442:	4b7d      	ldr	r3, [pc, #500]	; (8006638 <getCommand+0x218>)
 8006444:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006446:	2204      	movs	r2, #4
 8006448:	497c      	ldr	r1, [pc, #496]	; (800663c <getCommand+0x21c>)
 800644a:	f00f f95b 	bl	8015704 <strncmp>
 800644e:	2800      	cmp	r0, #0
 8006450:	d000      	beq.n	8006454 <getCommand+0x34>
 8006452:	e09c      	b.n	800658e <getCommand+0x16e>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006454:	3504      	adds	r5, #4
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	1f1e      	subs	r6, r3, #4
 800645a:	0032      	movs	r2, r6
 800645c:	4978      	ldr	r1, [pc, #480]	; (8006640 <getCommand+0x220>)
 800645e:	0028      	movs	r0, r5
 8006460:	f00f f950 	bl	8015704 <strncmp>
 8006464:	2800      	cmp	r0, #0
 8006466:	d122      	bne.n	80064ae <getCommand+0x8e>
			if(BOS.response == BOS_RESPONSE_ALL)
 8006468:	4b76      	ldr	r3, [pc, #472]	; (8006644 <getCommand+0x224>)
 800646a:	799b      	ldrb	r3, [r3, #6]
 800646c:	2b60      	cmp	r3, #96	; 0x60
 800646e:	d10b      	bne.n	8006488 <getCommand+0x68>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006470:	4a75      	ldr	r2, [pc, #468]	; (8006648 <getCommand+0x228>)
 8006472:	4976      	ldr	r1, [pc, #472]	; (800664c <getCommand+0x22c>)
 8006474:	0020      	movs	r0, r4
 8006476:	f00f f901 	bl	801567c <sprintf>
	BOS_Status result =BOS_OK;
 800647a:	2300      	movs	r3, #0
	else if(result == BOS_ERR_WrongValue)
 800647c:	2b68      	cmp	r3, #104	; 0x68
 800647e:	d100      	bne.n	8006482 <getCommand+0x62>
 8006480:	e0d3      	b.n	800662a <getCommand+0x20a>
}
 8006482:	2000      	movs	r0, #0
 8006484:	b003      	add	sp, #12
 8006486:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOS.response == BOS_RESPONSE_MSG)
 8006488:	2b20      	cmp	r3, #32
 800648a:	d106      	bne.n	800649a <getCommand+0x7a>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800648c:	4a70      	ldr	r2, [pc, #448]	; (8006650 <getCommand+0x230>)
 800648e:	496f      	ldr	r1, [pc, #444]	; (800664c <getCommand+0x22c>)
 8006490:	0020      	movs	r0, r4
 8006492:	f00f f8f3 	bl	801567c <sprintf>
	BOS_Status result =BOS_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e7f0      	b.n	800647c <getCommand+0x5c>
			else if(BOS.response == BOS_RESPONSE_NONE)
 800649a:	2b00      	cmp	r3, #0
 800649c:	d000      	beq.n	80064a0 <getCommand+0x80>
 800649e:	e0c0      	b.n	8006622 <getCommand+0x202>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80064a0:	4a6c      	ldr	r2, [pc, #432]	; (8006654 <getCommand+0x234>)
 80064a2:	496a      	ldr	r1, [pc, #424]	; (800664c <getCommand+0x22c>)
 80064a4:	0020      	movs	r0, r4
 80064a6:	f00f f8e9 	bl	801567c <sprintf>
	BOS_Status result =BOS_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e7e6      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80064ae:	0032      	movs	r2, r6
 80064b0:	4969      	ldr	r1, [pc, #420]	; (8006658 <getCommand+0x238>)
 80064b2:	0028      	movs	r0, r5
 80064b4:	f00f f926 	bl	8015704 <strncmp>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d11d      	bne.n	80064f8 <getCommand+0xd8>
			if(BOS.trace == TRACE_BOTH)
 80064bc:	4b61      	ldr	r3, [pc, #388]	; (8006644 <getCommand+0x224>)
 80064be:	79db      	ldrb	r3, [r3, #7]
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d106      	bne.n	80064d2 <getCommand+0xb2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80064c4:	4a60      	ldr	r2, [pc, #384]	; (8006648 <getCommand+0x228>)
 80064c6:	4961      	ldr	r1, [pc, #388]	; (800664c <getCommand+0x22c>)
 80064c8:	0020      	movs	r0, r4
 80064ca:	f00f f8d7 	bl	801567c <sprintf>
	BOS_Status result =BOS_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e7d4      	b.n	800647c <getCommand+0x5c>
			else if(BOS.trace == TRACE_MESSAGE)
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d106      	bne.n	80064e4 <getCommand+0xc4>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80064d6:	4a5e      	ldr	r2, [pc, #376]	; (8006650 <getCommand+0x230>)
 80064d8:	495c      	ldr	r1, [pc, #368]	; (800664c <getCommand+0x22c>)
 80064da:	0020      	movs	r0, r4
 80064dc:	f00f f8ce 	bl	801567c <sprintf>
	BOS_Status result =BOS_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e7cb      	b.n	800647c <getCommand+0x5c>
			else if(BOS.trace == TRACE_NONE)
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d000      	beq.n	80064ea <getCommand+0xca>
 80064e8:	e09d      	b.n	8006626 <getCommand+0x206>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80064ea:	4a5a      	ldr	r2, [pc, #360]	; (8006654 <getCommand+0x234>)
 80064ec:	4957      	ldr	r1, [pc, #348]	; (800664c <getCommand+0x22c>)
 80064ee:	0020      	movs	r0, r4
 80064f0:	f00f f8c4 	bl	801567c <sprintf>
	BOS_Status result =BOS_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e7c1      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80064f8:	0032      	movs	r2, r6
 80064fa:	4958      	ldr	r1, [pc, #352]	; (800665c <getCommand+0x23c>)
 80064fc:	0028      	movs	r0, r5
 80064fe:	f00f f901 	bl	8015704 <strncmp>
 8006502:	2800      	cmp	r0, #0
 8006504:	d107      	bne.n	8006516 <getCommand+0xf6>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006506:	4b4f      	ldr	r3, [pc, #316]	; (8006644 <getCommand+0x224>)
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	4955      	ldr	r1, [pc, #340]	; (8006660 <getCommand+0x240>)
 800650c:	0020      	movs	r0, r4
 800650e:	f00f f8b5 	bl	801567c <sprintf>
	BOS_Status result =BOS_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	e7b2      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006516:	0032      	movs	r2, r6
 8006518:	4952      	ldr	r1, [pc, #328]	; (8006664 <getCommand+0x244>)
 800651a:	0028      	movs	r0, r5
 800651c:	f00f f8f2 	bl	8015704 <strncmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	d107      	bne.n	8006534 <getCommand+0x114>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006524:	4b47      	ldr	r3, [pc, #284]	; (8006644 <getCommand+0x224>)
 8006526:	881a      	ldrh	r2, [r3, #0]
 8006528:	494d      	ldr	r1, [pc, #308]	; (8006660 <getCommand+0x240>)
 800652a:	0020      	movs	r0, r4
 800652c:	f00f f8a6 	bl	801567c <sprintf>
	BOS_Status result =BOS_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	e7a3      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006534:	0032      	movs	r2, r6
 8006536:	494c      	ldr	r1, [pc, #304]	; (8006668 <getCommand+0x248>)
 8006538:	0028      	movs	r0, r5
 800653a:	f00f f8e3 	bl	8015704 <strncmp>
 800653e:	2800      	cmp	r0, #0
 8006540:	d107      	bne.n	8006552 <getCommand+0x132>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006542:	4b40      	ldr	r3, [pc, #256]	; (8006644 <getCommand+0x224>)
 8006544:	885a      	ldrh	r2, [r3, #2]
 8006546:	4946      	ldr	r1, [pc, #280]	; (8006660 <getCommand+0x240>)
 8006548:	0020      	movs	r0, r4
 800654a:	f00f f897 	bl	801567c <sprintf>
	BOS_Status result =BOS_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	e794      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006552:	0032      	movs	r2, r6
 8006554:	4945      	ldr	r1, [pc, #276]	; (800666c <getCommand+0x24c>)
 8006556:	0028      	movs	r0, r5
 8006558:	f00f f8d4 	bl	8015704 <strncmp>
 800655c:	2800      	cmp	r0, #0
 800655e:	d107      	bne.n	8006570 <getCommand+0x150>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8006560:	4b38      	ldr	r3, [pc, #224]	; (8006644 <getCommand+0x224>)
 8006562:	791a      	ldrb	r2, [r3, #4]
 8006564:	493e      	ldr	r1, [pc, #248]	; (8006660 <getCommand+0x240>)
 8006566:	0020      	movs	r0, r4
 8006568:	f00f f888 	bl	801567c <sprintf>
	BOS_Status result =BOS_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	e785      	b.n	800647c <getCommand+0x5c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006570:	0032      	movs	r2, r6
 8006572:	493f      	ldr	r1, [pc, #252]	; (8006670 <getCommand+0x250>)
 8006574:	0028      	movs	r0, r5
 8006576:	f00f f8c5 	bl	8015704 <strncmp>
 800657a:	2800      	cmp	r0, #0
 800657c:	d10e      	bne.n	800659c <getCommand+0x17c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 800657e:	4b31      	ldr	r3, [pc, #196]	; (8006644 <getCommand+0x224>)
 8006580:	795a      	ldrb	r2, [r3, #5]
 8006582:	4937      	ldr	r1, [pc, #220]	; (8006660 <getCommand+0x240>)
 8006584:	0020      	movs	r0, r4
 8006586:	f00f f879 	bl	801567c <sprintf>
	BOS_Status result =BOS_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e776      	b.n	800647c <getCommand+0x5c>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 800658e:	2205      	movs	r2, #5
 8006590:	4938      	ldr	r1, [pc, #224]	; (8006674 <getCommand+0x254>)
 8006592:	0028      	movs	r0, r5
 8006594:	f00f f8b6 	bl	8015704 <strncmp>
 8006598:	2800      	cmp	r0, #0
 800659a:	d005      	beq.n	80065a8 <getCommand+0x188>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800659c:	2213      	movs	r2, #19
 800659e:	4936      	ldr	r1, [pc, #216]	; (8006678 <getCommand+0x258>)
 80065a0:	0020      	movs	r0, r4
 80065a2:	f00e fe68 	bl	8015276 <memcpy>
 80065a6:	e76c      	b.n	8006482 <getCommand+0x62>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065a8:	466a      	mov	r2, sp
 80065aa:	2102      	movs	r1, #2
 80065ac:	0030      	movs	r0, r6
 80065ae:	f009 fb55 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 80065b2:	0007      	movs	r7, r0
		for(i =0; i < MaxNumOfGroups; i++){
 80065b4:	2600      	movs	r6, #0
 80065b6:	e00b      	b.n	80065d0 <getCommand+0x1b0>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80065b8:	00b3      	lsls	r3, r6, #2
 80065ba:	199b      	adds	r3, r3, r6
 80065bc:	0059      	lsls	r1, r3, #1
 80065be:	4b2f      	ldr	r3, [pc, #188]	; (800667c <getCommand+0x25c>)
 80065c0:	18c9      	adds	r1, r1, r3
 80065c2:	0038      	movs	r0, r7
 80065c4:	f7f9 fd9e 	bl	8000104 <strcmp>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d00c      	beq.n	80065e6 <getCommand+0x1c6>
		for(i =0; i < MaxNumOfGroups; i++){
 80065cc:	3601      	adds	r6, #1
 80065ce:	b2f6      	uxtb	r6, r6
 80065d0:	2e09      	cmp	r6, #9
 80065d2:	d9f1      	bls.n	80065b8 <getCommand+0x198>
		temp8 =0;
 80065d4:	2500      	movs	r5, #0
		if(!temp8){
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	d107      	bne.n	80065ea <getCommand+0x1ca>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 80065da:	003a      	movs	r2, r7
 80065dc:	4928      	ldr	r1, [pc, #160]	; (8006680 <getCommand+0x260>)
 80065de:	0020      	movs	r0, r4
 80065e0:	f00f f84c 	bl	801567c <sprintf>
			return pdFALSE;
 80065e4:	e74d      	b.n	8006482 <getCommand+0x62>
				temp8 =1;
 80065e6:	2501      	movs	r5, #1
 80065e8:	e7f5      	b.n	80065d6 <getCommand+0x1b6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 80065ea:	003a      	movs	r2, r7
 80065ec:	4925      	ldr	r1, [pc, #148]	; (8006684 <getCommand+0x264>)
 80065ee:	0020      	movs	r0, r4
 80065f0:	f00f f844 	bl	801567c <sprintf>
			for(j =1; j <= N; j++)						// N modules
 80065f4:	e008      	b.n	8006608 <getCommand+0x1e8>
				if(InGroup(j,i)){
 80065f6:	1e6b      	subs	r3, r5, #1
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	4a23      	ldr	r2, [pc, #140]	; (8006688 <getCommand+0x268>)
 80065fc:	5a9b      	ldrh	r3, [r3, r2]
 80065fe:	4133      	asrs	r3, r6
 8006600:	07db      	lsls	r3, r3, #31
 8006602:	d407      	bmi.n	8006614 <getCommand+0x1f4>
			for(j =1; j <= N; j++)						// N modules
 8006604:	3501      	adds	r5, #1
 8006606:	b2ed      	uxtb	r5, r5
 8006608:	4b20      	ldr	r3, [pc, #128]	; (800668c <getCommand+0x26c>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	42ab      	cmp	r3, r5
 800660e:	d2f2      	bcs.n	80065f6 <getCommand+0x1d6>
	BOS_Status result =BOS_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e733      	b.n	800647c <getCommand+0x5c>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006614:	002b      	movs	r3, r5
 8006616:	0022      	movs	r2, r4
 8006618:	491d      	ldr	r1, [pc, #116]	; (8006690 <getCommand+0x270>)
 800661a:	0020      	movs	r0, r4
 800661c:	f00f f82e 	bl	801567c <sprintf>
 8006620:	e7f0      	b.n	8006604 <getCommand+0x1e4>
				result =BOS_ERR_WrongValue;
 8006622:	2368      	movs	r3, #104	; 0x68
 8006624:	e72a      	b.n	800647c <getCommand+0x5c>
				result =BOS_ERR_WrongValue;
 8006626:	2368      	movs	r3, #104	; 0x68
 8006628:	e728      	b.n	800647c <getCommand+0x5c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 800662a:	4b03      	ldr	r3, [pc, #12]	; (8006638 <getCommand+0x218>)
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	4919      	ldr	r1, [pc, #100]	; (8006694 <getCommand+0x274>)
 8006630:	0020      	movs	r0, r4
 8006632:	f00f f823 	bl	801567c <sprintf>
 8006636:	e724      	b.n	8006482 <getCommand+0x62>
 8006638:	2000127c 	.word	0x2000127c
 800663c:	0801aa4c 	.word	0x0801aa4c
 8006640:	0801aa54 	.word	0x0801aa54
 8006644:	20006da0 	.word	0x20006da0
 8006648:	08019e54 	.word	0x08019e54
 800664c:	08019cac 	.word	0x08019cac
 8006650:	0801aa60 	.word	0x0801aa60
 8006654:	0801aa64 	.word	0x0801aa64
 8006658:	0801aa6c 	.word	0x0801aa6c
 800665c:	0801aa74 	.word	0x0801aa74
 8006660:	0801a304 	.word	0x0801a304
 8006664:	0801aa80 	.word	0x0801aa80
 8006668:	0801aa8c 	.word	0x0801aa8c
 800666c:	0801aa9c 	.word	0x0801aa9c
 8006670:	0801aab0 	.word	0x0801aab0
 8006674:	0801aac4 	.word	0x0801aac4
 8006678:	0801ab04 	.word	0x0801ab04
 800667c:	20000e4c 	.word	0x20000e4c
 8006680:	0801aacc 	.word	0x0801aacc
 8006684:	0801aae8 	.word	0x0801aae8
 8006688:	20000eb0 	.word	0x20000eb0
 800668c:	2000001c 	.word	0x2000001c
 8006690:	0801aafc 	.word	0x0801aafc
 8006694:	0801ab18 	.word	0x0801ab18

08006698 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	0004      	movs	r4, r0
 800669e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80066a4:	2c00      	cmp	r4, #0
 80066a6:	d101      	bne.n	80066ac <defaultCommand+0x14>
 80066a8:	b672      	cpsid	i
 80066aa:	e7fe      	b.n	80066aa <defaultCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80066ac:	aa01      	add	r2, sp, #4
 80066ae:	2101      	movs	r1, #1
 80066b0:	f009 fad4 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 80066b4:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 80066b6:	9e01      	ldr	r6, [sp, #4]
 80066b8:	0032      	movs	r2, r6
 80066ba:	491f      	ldr	r1, [pc, #124]	; (8006738 <defaultCommand+0xa0>)
 80066bc:	f00f f822 	bl	8015704 <strncmp>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d01e      	beq.n	8006702 <defaultCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 80066c4:	0032      	movs	r2, r6
 80066c6:	491d      	ldr	r1, [pc, #116]	; (800673c <defaultCommand+0xa4>)
 80066c8:	0028      	movs	r0, r5
 80066ca:	f00f f81b 	bl	8015704 <strncmp>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d12b      	bne.n	800672a <defaultCommand+0x92>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 80066d2:	2200      	movs	r2, #0
 80066d4:	2116      	movs	r1, #22
 80066d6:	20ff      	movs	r0, #255	; 0xff
 80066d8:	f003 fa20 	bl	8009b1c <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 80066dc:	4b18      	ldr	r3, [pc, #96]	; (8006740 <defaultCommand+0xa8>)
 80066de:	2202      	movs	r2, #2
 80066e0:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80066e2:	2064      	movs	r0, #100	; 0x64
 80066e4:	f009 f994 	bl	800fa10 <osDelay>
		ClearEEportsDir();
 80066e8:	f7fd fa24 	bl	8003b34 <ClearEEportsDir>
		ClearROtopology();
 80066ec:	f005 fc0c 	bl	800bf08 <ClearROtopology>
		osDelay(100);
 80066f0:	2064      	movs	r0, #100	; 0x64
 80066f2:	f009 f98d 	bl	800fa10 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 80066f6:	2240      	movs	r2, #64	; 0x40
 80066f8:	4912      	ldr	r1, [pc, #72]	; (8006744 <defaultCommand+0xac>)
 80066fa:	0020      	movs	r0, r4
 80066fc:	f00e fdbb 	bl	8015276 <memcpy>
 8006700:	e010      	b.n	8006724 <defaultCommand+0x8c>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8006702:	4911      	ldr	r1, [pc, #68]	; (8006748 <defaultCommand+0xb0>)
 8006704:	4811      	ldr	r0, [pc, #68]	; (800674c <defaultCommand+0xb4>)
 8006706:	000b      	movs	r3, r1
 8006708:	0002      	movs	r2, r0
 800670a:	ca23      	ldmia	r2!, {r0, r1, r5}
 800670c:	c323      	stmia	r3!, {r0, r1, r5}
 800670e:	ca23      	ldmia	r2!, {r0, r1, r5}
 8006710:	c323      	stmia	r3!, {r0, r1, r5}
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	601a      	str	r2, [r3, #0]
		SaveEEparams();
 8006716:	f7fd f9d5 	bl	8003ac4 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 800671a:	2227      	movs	r2, #39	; 0x27
 800671c:	490c      	ldr	r1, [pc, #48]	; (8006750 <defaultCommand+0xb8>)
 800671e:	0020      	movs	r0, r4
 8006720:	f00e fda9 	bl	8015276 <memcpy>
}
 8006724:	2000      	movs	r0, #0
 8006726:	b002      	add	sp, #8
 8006728:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800672a:	220f      	movs	r2, #15
 800672c:	4909      	ldr	r1, [pc, #36]	; (8006754 <defaultCommand+0xbc>)
 800672e:	0020      	movs	r0, r4
 8006730:	f00e fda1 	bl	8015276 <memcpy>
 8006734:	e7f6      	b.n	8006724 <defaultCommand+0x8c>
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	0801a908 	.word	0x0801a908
 800673c:	0801a938 	.word	0x0801a938
 8006740:	20000ee4 	.word	0x20000ee4
 8006744:	0801a950 	.word	0x0801a950
 8006748:	20006da0 	.word	0x20006da0
 800674c:	20000000 	.word	0x20000000
 8006750:	0801a910 	.word	0x0801a910
 8006754:	0801a940 	.word	0x0801a940

08006758 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675a:	46ce      	mov	lr, r9
 800675c:	4647      	mov	r7, r8
 800675e:	b580      	push	{r7, lr}
 8006760:	b08f      	sub	sp, #60	; 0x3c
 8006762:	9007      	str	r0, [sp, #28]
 8006764:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006766:	2300      	movs	r3, #0
 8006768:	930d      	str	r3, [sp, #52]	; 0x34
 800676a:	930c      	str	r3, [sp, #48]	; 0x30
 800676c:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 800676e:	930a      	str	r3, [sp, #40]	; 0x28
 8006770:	9309      	str	r3, [sp, #36]	; 0x24
	configASSERT(pcWriteBuffer);
 8006772:	2800      	cmp	r0, #0
 8006774:	d101      	bne.n	800677a <setCommand+0x22>
 8006776:	b672      	cpsid	i
 8006778:	e7fe      	b.n	8006778 <setCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800677a:	aa0d      	add	r2, sp, #52	; 0x34
 800677c:	2101      	movs	r1, #1
 800677e:	0020      	movs	r0, r4
 8006780:	f009 fa6c 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8006784:	0005      	movs	r5, r0
 8006786:	4bba      	ldr	r3, [pc, #744]	; (8006a70 <setCommand+0x318>)
 8006788:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800678a:	2204      	movs	r2, #4
 800678c:	49b9      	ldr	r1, [pc, #740]	; (8006a74 <setCommand+0x31c>)
 800678e:	f00e ffb9 	bl	8015704 <strncmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	d01c      	beq.n	80067d0 <setCommand+0x78>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 8006796:	2204      	movs	r2, #4
 8006798:	49b7      	ldr	r1, [pc, #732]	; (8006a78 <setCommand+0x320>)
 800679a:	0028      	movs	r0, r5
 800679c:	f00e ffb2 	bl	8015704 <strncmp>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d100      	bne.n	80067a6 <setCommand+0x4e>
 80067a4:	e18c      	b.n	8006ac0 <setCommand+0x368>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 80067a6:	2204      	movs	r2, #4
 80067a8:	49b4      	ldr	r1, [pc, #720]	; (8006a7c <setCommand+0x324>)
 80067aa:	0028      	movs	r0, r5
 80067ac:	f00e ffaa 	bl	8015704 <strncmp>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d100      	bne.n	80067b6 <setCommand+0x5e>
 80067b4:	e1e2      	b.n	8006b7c <setCommand+0x424>
		result =BOS_ERR_WrongParam;
 80067b6:	2467      	movs	r4, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 80067b8:	2c67      	cmp	r4, #103	; 0x67
 80067ba:	d100      	bne.n	80067be <setCommand+0x66>
 80067bc:	e3da      	b.n	8006f74 <setCommand+0x81c>
	else if(result == BOS_ERR_WrongValue)
 80067be:	2c68      	cmp	r4, #104	; 0x68
 80067c0:	d100      	bne.n	80067c4 <setCommand+0x6c>
 80067c2:	e3dd      	b.n	8006f80 <setCommand+0x828>
}
 80067c4:	2000      	movs	r0, #0
 80067c6:	b00f      	add	sp, #60	; 0x3c
 80067c8:	bc0c      	pop	{r2, r3}
 80067ca:	4690      	mov	r8, r2
 80067cc:	4699      	mov	r9, r3
 80067ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80067d0:	aa0c      	add	r2, sp, #48	; 0x30
 80067d2:	2102      	movs	r1, #2
 80067d4:	0020      	movs	r0, r4
 80067d6:	f009 fa41 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 80067da:	0004      	movs	r4, r0
 80067dc:	4ba8      	ldr	r3, [pc, #672]	; (8006a80 <setCommand+0x328>)
 80067de:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80067e0:	4ba3      	ldr	r3, [pc, #652]	; (8006a70 <setCommand+0x318>)
 80067e2:	681d      	ldr	r5, [r3, #0]
 80067e4:	3504      	adds	r5, #4
 80067e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067e8:	1f1f      	subs	r7, r3, #4
 80067ea:	003a      	movs	r2, r7
 80067ec:	49a5      	ldr	r1, [pc, #660]	; (8006a84 <setCommand+0x32c>)
 80067ee:	0028      	movs	r0, r5
 80067f0:	f00e ff88 	bl	8015704 <strncmp>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d162      	bne.n	80068be <setCommand+0x166>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80067f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067fa:	002a      	movs	r2, r5
 80067fc:	49a2      	ldr	r1, [pc, #648]	; (8006a88 <setCommand+0x330>)
 80067fe:	0020      	movs	r0, r4
 8006800:	f00e ff80 	bl	8015704 <strncmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	d122      	bne.n	800684e <setCommand+0xf6>
				BOS.response = BOS_RESPONSE_ALL;
 8006808:	4ba0      	ldr	r3, [pc, #640]	; (8006a8c <setCommand+0x334>)
 800680a:	2160      	movs	r1, #96	; 0x60
 800680c:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800680e:	79db      	ldrb	r3, [r3, #7]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	4319      	orrs	r1, r3
 8006814:	308a      	adds	r0, #138	; 0x8a
 8006816:	0040      	lsls	r0, r0, #1
 8006818:	f001 faaa 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800681c:	2400      	movs	r4, #0
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800681e:	4b94      	ldr	r3, [pc, #592]	; (8006a70 <setCommand+0x318>)
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006824:	18d3      	adds	r3, r2, r3
 8006826:	2100      	movs	r1, #0
 8006828:	7019      	strb	r1, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800682a:	4b95      	ldr	r3, [pc, #596]	; (8006a80 <setCommand+0x328>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4998      	ldr	r1, [pc, #608]	; (8006a90 <setCommand+0x338>)
 8006830:	9807      	ldr	r0, [sp, #28]
 8006832:	f00e ff23 	bl	801567c <sprintf>
		if(extraMessage == 1){
 8006836:	2c01      	cmp	r4, #1
 8006838:	d1c4      	bne.n	80067c4 <setCommand+0x6c>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 800683a:	4996      	ldr	r1, [pc, #600]	; (8006a94 <setCommand+0x33c>)
 800683c:	9c07      	ldr	r4, [sp, #28]
 800683e:	0020      	movs	r0, r4
 8006840:	f00e ff3c 	bl	80156bc <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006844:	4994      	ldr	r1, [pc, #592]	; (8006a98 <setCommand+0x340>)
 8006846:	0020      	movs	r0, r4
 8006848:	f00e ff38 	bl	80156bc <strcat>
 800684c:	e7ba      	b.n	80067c4 <setCommand+0x6c>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800684e:	002a      	movs	r2, r5
 8006850:	4992      	ldr	r1, [pc, #584]	; (8006a9c <setCommand+0x344>)
 8006852:	0020      	movs	r0, r4
 8006854:	f00e ff56 	bl	8015704 <strncmp>
 8006858:	2800      	cmp	r0, #0
 800685a:	d10b      	bne.n	8006874 <setCommand+0x11c>
				BOS.response = BOS_RESPONSE_MSG;
 800685c:	4b8b      	ldr	r3, [pc, #556]	; (8006a8c <setCommand+0x334>)
 800685e:	2120      	movs	r1, #32
 8006860:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006862:	79db      	ldrb	r3, [r3, #7]
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	4319      	orrs	r1, r3
 8006868:	308a      	adds	r0, #138	; 0x8a
 800686a:	0040      	lsls	r0, r0, #1
 800686c:	f001 fa80 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006870:	2400      	movs	r4, #0
 8006872:	e7d4      	b.n	800681e <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006874:	002a      	movs	r2, r5
 8006876:	498a      	ldr	r1, [pc, #552]	; (8006aa0 <setCommand+0x348>)
 8006878:	0020      	movs	r0, r4
 800687a:	f00e ff43 	bl	8015704 <strncmp>
 800687e:	2800      	cmp	r0, #0
 8006880:	d10b      	bne.n	800689a <setCommand+0x142>
				BOS.response = BOS_RESPONSE_CLI;
 8006882:	4b82      	ldr	r3, [pc, #520]	; (8006a8c <setCommand+0x334>)
 8006884:	2140      	movs	r1, #64	; 0x40
 8006886:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006888:	79db      	ldrb	r3, [r3, #7]
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	4319      	orrs	r1, r3
 800688e:	308a      	adds	r0, #138	; 0x8a
 8006890:	0040      	lsls	r0, r0, #1
 8006892:	f001 fa6d 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006896:	2400      	movs	r4, #0
 8006898:	e7c1      	b.n	800681e <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 800689a:	002a      	movs	r2, r5
 800689c:	4981      	ldr	r1, [pc, #516]	; (8006aa4 <setCommand+0x34c>)
 800689e:	0020      	movs	r0, r4
 80068a0:	f00e ff30 	bl	8015704 <strncmp>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d000      	beq.n	80068aa <setCommand+0x152>
 80068a8:	e348      	b.n	8006f3c <setCommand+0x7e4>
				BOS.response = BOS_RESPONSE_NONE;
 80068aa:	4b78      	ldr	r3, [pc, #480]	; (8006a8c <setCommand+0x334>)
 80068ac:	2400      	movs	r4, #0
 80068ae:	719c      	strb	r4, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80068b0:	79d9      	ldrb	r1, [r3, #7]
 80068b2:	0209      	lsls	r1, r1, #8
 80068b4:	308a      	adds	r0, #138	; 0x8a
 80068b6:	0040      	lsls	r0, r0, #1
 80068b8:	f001 fa5a 	bl	8007d70 <EE_WriteVariable>
 80068bc:	e7af      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80068be:	003a      	movs	r2, r7
 80068c0:	4979      	ldr	r1, [pc, #484]	; (8006aa8 <setCommand+0x350>)
 80068c2:	0028      	movs	r0, r5
 80068c4:	f00e ff1e 	bl	8015704 <strncmp>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d14d      	bne.n	8006968 <setCommand+0x210>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80068cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068ce:	002a      	movs	r2, r5
 80068d0:	496d      	ldr	r1, [pc, #436]	; (8006a88 <setCommand+0x330>)
 80068d2:	0020      	movs	r0, r4
 80068d4:	f00e ff16 	bl	8015704 <strncmp>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d10c      	bne.n	80068f6 <setCommand+0x19e>
				BOS.trace =TRACE_BOTH;
 80068dc:	4b6b      	ldr	r3, [pc, #428]	; (8006a8c <setCommand+0x334>)
 80068de:	2203      	movs	r2, #3
 80068e0:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80068e2:	799b      	ldrb	r3, [r3, #6]
 80068e4:	21c0      	movs	r1, #192	; 0xc0
 80068e6:	0089      	lsls	r1, r1, #2
 80068e8:	4319      	orrs	r1, r3
 80068ea:	308a      	adds	r0, #138	; 0x8a
 80068ec:	0040      	lsls	r0, r0, #1
 80068ee:	f001 fa3f 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80068f2:	2400      	movs	r4, #0
 80068f4:	e793      	b.n	800681e <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80068f6:	002a      	movs	r2, r5
 80068f8:	4968      	ldr	r1, [pc, #416]	; (8006a9c <setCommand+0x344>)
 80068fa:	0020      	movs	r0, r4
 80068fc:	f00e ff02 	bl	8015704 <strncmp>
 8006900:	2800      	cmp	r0, #0
 8006902:	d10c      	bne.n	800691e <setCommand+0x1c6>
				BOS.trace =TRACE_MESSAGE;
 8006904:	4b61      	ldr	r3, [pc, #388]	; (8006a8c <setCommand+0x334>)
 8006906:	2201      	movs	r2, #1
 8006908:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800690a:	799b      	ldrb	r3, [r3, #6]
 800690c:	2180      	movs	r1, #128	; 0x80
 800690e:	0049      	lsls	r1, r1, #1
 8006910:	4319      	orrs	r1, r3
 8006912:	308a      	adds	r0, #138	; 0x8a
 8006914:	4090      	lsls	r0, r2
 8006916:	f001 fa2b 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800691a:	2400      	movs	r4, #0
 800691c:	e77f      	b.n	800681e <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 800691e:	002a      	movs	r2, r5
 8006920:	4958      	ldr	r1, [pc, #352]	; (8006a84 <setCommand+0x32c>)
 8006922:	0020      	movs	r0, r4
 8006924:	f00e feee 	bl	8015704 <strncmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	d10c      	bne.n	8006946 <setCommand+0x1ee>
				BOS.trace =TRACE_RESPONSE;
 800692c:	4b57      	ldr	r3, [pc, #348]	; (8006a8c <setCommand+0x334>)
 800692e:	2202      	movs	r2, #2
 8006930:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006932:	799b      	ldrb	r3, [r3, #6]
 8006934:	2180      	movs	r1, #128	; 0x80
 8006936:	0089      	lsls	r1, r1, #2
 8006938:	4319      	orrs	r1, r3
 800693a:	308a      	adds	r0, #138	; 0x8a
 800693c:	0040      	lsls	r0, r0, #1
 800693e:	f001 fa17 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006942:	2400      	movs	r4, #0
 8006944:	e76b      	b.n	800681e <setCommand+0xc6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006946:	002a      	movs	r2, r5
 8006948:	4956      	ldr	r1, [pc, #344]	; (8006aa4 <setCommand+0x34c>)
 800694a:	0020      	movs	r0, r4
 800694c:	f00e feda 	bl	8015704 <strncmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	d000      	beq.n	8006956 <setCommand+0x1fe>
 8006954:	e2f4      	b.n	8006f40 <setCommand+0x7e8>
				BOS.trace =TRACE_NONE;
 8006956:	4b4d      	ldr	r3, [pc, #308]	; (8006a8c <setCommand+0x334>)
 8006958:	2400      	movs	r4, #0
 800695a:	71dc      	strb	r4, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800695c:	7999      	ldrb	r1, [r3, #6]
 800695e:	308a      	adds	r0, #138	; 0x8a
 8006960:	0040      	lsls	r0, r0, #1
 8006962:	f001 fa05 	bl	8007d70 <EE_WriteVariable>
 8006966:	e75a      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006968:	003a      	movs	r2, r7
 800696a:	4950      	ldr	r1, [pc, #320]	; (8006aac <setCommand+0x354>)
 800696c:	0028      	movs	r0, r5
 800696e:	f00e fec9 	bl	8015704 <strncmp>
 8006972:	2800      	cmp	r0, #0
 8006974:	d116      	bne.n	80069a4 <setCommand+0x24c>
			temp2 =atoi((const char* )pcParameterString2);
 8006976:	0020      	movs	r0, r4
 8006978:	f00e f9ed 	bl	8014d56 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 800697c:	23e1      	movs	r3, #225	; 0xe1
 800697e:	031b      	lsls	r3, r3, #12
 8006980:	4298      	cmp	r0, r3
 8006982:	d900      	bls.n	8006986 <setCommand+0x22e>
 8006984:	e2de      	b.n	8006f44 <setCommand+0x7ec>
				BOS.clibaudrate =temp2;
 8006986:	4c41      	ldr	r4, [pc, #260]	; (8006a8c <setCommand+0x334>)
 8006988:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800698a:	b281      	uxth	r1, r0
 800698c:	208c      	movs	r0, #140	; 0x8c
 800698e:	0040      	lsls	r0, r0, #1
 8006990:	f001 f9ee 	bl	8007d70 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006994:	68a1      	ldr	r1, [r4, #8]
 8006996:	0c09      	lsrs	r1, r1, #16
 8006998:	201a      	movs	r0, #26
 800699a:	30ff      	adds	r0, #255	; 0xff
 800699c:	f001 f9e8 	bl	8007d70 <EE_WriteVariable>
				extraMessage =1;
 80069a0:	2401      	movs	r4, #1
 80069a2:	e73c      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80069a4:	003a      	movs	r2, r7
 80069a6:	4942      	ldr	r1, [pc, #264]	; (8006ab0 <setCommand+0x358>)
 80069a8:	0028      	movs	r0, r5
 80069aa:	f00e feab 	bl	8015704 <strncmp>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d10e      	bne.n	80069d0 <setCommand+0x278>
			temp16 =atoi((const char* )pcParameterString2);
 80069b2:	0020      	movs	r0, r4
 80069b4:	f00e f9cf 	bl	8014d56 <atoi>
 80069b8:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80069ba:	2900      	cmp	r1, #0
 80069bc:	d100      	bne.n	80069c0 <setCommand+0x268>
 80069be:	e2c3      	b.n	8006f48 <setCommand+0x7f0>
				BOS.buttons.debounce =temp16;
 80069c0:	4b32      	ldr	r3, [pc, #200]	; (8006a8c <setCommand+0x334>)
 80069c2:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80069c4:	2016      	movs	r0, #22
 80069c6:	30ff      	adds	r0, #255	; 0xff
 80069c8:	f001 f9d2 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80069cc:	2400      	movs	r4, #0
 80069ce:	e726      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80069d0:	003a      	movs	r2, r7
 80069d2:	4938      	ldr	r1, [pc, #224]	; (8006ab4 <setCommand+0x35c>)
 80069d4:	0028      	movs	r0, r5
 80069d6:	f00e fe95 	bl	8015704 <strncmp>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d10e      	bne.n	80069fc <setCommand+0x2a4>
			temp16 =atoi((const char* )pcParameterString2);
 80069de:	0020      	movs	r0, r4
 80069e0:	f00e f9b9 	bl	8014d56 <atoi>
 80069e4:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80069e6:	2900      	cmp	r1, #0
 80069e8:	d100      	bne.n	80069ec <setCommand+0x294>
 80069ea:	e2af      	b.n	8006f4c <setCommand+0x7f4>
				BOS.buttons.singleClickTime =temp16;
 80069ec:	4b27      	ldr	r3, [pc, #156]	; (8006a8c <setCommand+0x334>)
 80069ee:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80069f0:	208b      	movs	r0, #139	; 0x8b
 80069f2:	0040      	lsls	r0, r0, #1
 80069f4:	f001 f9bc 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80069f8:	2400      	movs	r4, #0
 80069fa:	e710      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80069fc:	003a      	movs	r2, r7
 80069fe:	492e      	ldr	r1, [pc, #184]	; (8006ab8 <setCommand+0x360>)
 8006a00:	0028      	movs	r0, r5
 8006a02:	f00e fe7f 	bl	8015704 <strncmp>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d114      	bne.n	8006a34 <setCommand+0x2dc>
			temp16 =atoi((const char* )pcParameterString2);
 8006a0a:	0020      	movs	r0, r4
 8006a0c:	f00e f9a3 	bl	8014d56 <atoi>
 8006a10:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2bfe      	cmp	r3, #254	; 0xfe
 8006a18:	d900      	bls.n	8006a1c <setCommand+0x2c4>
 8006a1a:	e299      	b.n	8006f50 <setCommand+0x7f8>
				BOS.buttons.minInterClickTime =temp16;
 8006a1c:	b2c0      	uxtb	r0, r0
 8006a1e:	4b1b      	ldr	r3, [pc, #108]	; (8006a8c <setCommand+0x334>)
 8006a20:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a22:	7959      	ldrb	r1, [r3, #5]
 8006a24:	0209      	lsls	r1, r1, #8
 8006a26:	4301      	orrs	r1, r0
 8006a28:	2018      	movs	r0, #24
 8006a2a:	30ff      	adds	r0, #255	; 0xff
 8006a2c:	f001 f9a0 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006a30:	2400      	movs	r4, #0
 8006a32:	e6f4      	b.n	800681e <setCommand+0xc6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006a34:	003a      	movs	r2, r7
 8006a36:	4921      	ldr	r1, [pc, #132]	; (8006abc <setCommand+0x364>)
 8006a38:	0028      	movs	r0, r5
 8006a3a:	f00e fe63 	bl	8015704 <strncmp>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d000      	beq.n	8006a44 <setCommand+0x2ec>
 8006a42:	e287      	b.n	8006f54 <setCommand+0x7fc>
			temp16 =atoi((const char* )pcParameterString2);
 8006a44:	0020      	movs	r0, r4
 8006a46:	f00e f986 	bl	8014d56 <atoi>
 8006a4a:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2bfe      	cmp	r3, #254	; 0xfe
 8006a52:	d900      	bls.n	8006a56 <setCommand+0x2fe>
 8006a54:	e280      	b.n	8006f58 <setCommand+0x800>
				BOS.buttons.maxInterClickTime =temp16;
 8006a56:	b2c0      	uxtb	r0, r0
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <setCommand+0x334>)
 8006a5a:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a5c:	0200      	lsls	r0, r0, #8
 8006a5e:	7919      	ldrb	r1, [r3, #4]
 8006a60:	4301      	orrs	r1, r0
 8006a62:	2018      	movs	r0, #24
 8006a64:	30ff      	adds	r0, #255	; 0xff
 8006a66:	f001 f983 	bl	8007d70 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006a6a:	2400      	movs	r4, #0
 8006a6c:	e6d7      	b.n	800681e <setCommand+0xc6>
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	20001278 	.word	0x20001278
 8006a74:	0801aa4c 	.word	0x0801aa4c
 8006a78:	0801b080 	.word	0x0801b080
 8006a7c:	0801b08c 	.word	0x0801b08c
 8006a80:	20001284 	.word	0x20001284
 8006a84:	0801aa54 	.word	0x0801aa54
 8006a88:	08019e54 	.word	0x08019e54
 8006a8c:	20006da0 	.word	0x20006da0
 8006a90:	0801b174 	.word	0x0801b174
 8006a94:	0801b188 	.word	0x0801b188
 8006a98:	0801b1b8 	.word	0x0801b1b8
 8006a9c:	0801b074 	.word	0x0801b074
 8006aa0:	0801b07c 	.word	0x0801b07c
 8006aa4:	0801aa64 	.word	0x0801aa64
 8006aa8:	0801aa6c 	.word	0x0801aa6c
 8006aac:	0801aa74 	.word	0x0801aa74
 8006ab0:	0801aa80 	.word	0x0801aa80
 8006ab4:	0801aa8c 	.word	0x0801aa8c
 8006ab8:	0801aa9c 	.word	0x0801aa9c
 8006abc:	0801aab0 	.word	0x0801aab0
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006ac0:	aa0c      	add	r2, sp, #48	; 0x30
 8006ac2:	2102      	movs	r1, #2
 8006ac4:	0020      	movs	r0, r4
 8006ac6:	f009 f8c9 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8006aca:	4edf      	ldr	r6, [pc, #892]	; (8006e48 <setCommand+0x6f0>)
 8006acc:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006ace:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ad0:	2103      	movs	r1, #3
 8006ad2:	0020      	movs	r0, r4
 8006ad4:	f009 f8c2 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8006ad8:	4fdc      	ldr	r7, [pc, #880]	; (8006e4c <setCommand+0x6f4>)
 8006ada:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006adc:	aa0a      	add	r2, sp, #40	; 0x28
 8006ade:	2104      	movs	r1, #4
 8006ae0:	0020      	movs	r0, r4
 8006ae2:	f009 f8bb 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8006ae6:	4dda      	ldr	r5, [pc, #872]	; (8006e50 <setCommand+0x6f8>)
 8006ae8:	6028      	str	r0, [r5, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006aea:	aa09      	add	r2, sp, #36	; 0x24
 8006aec:	2105      	movs	r1, #5
 8006aee:	0020      	movs	r0, r4
 8006af0:	f009 f8b4 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8006af4:	4cd7      	ldr	r4, [pc, #860]	; (8006e54 <setCommand+0x6fc>)
 8006af6:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006af8:	6830      	ldr	r0, [r6, #0]
 8006afa:	f00e f92c 	bl	8014d56 <atoi>
 8006afe:	b2c6      	uxtb	r6, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006b00:	6838      	ldr	r0, [r7, #0]
 8006b02:	f00e f928 	bl	8014d56 <atoi>
 8006b06:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006b08:	6828      	ldr	r0, [r5, #0]
 8006b0a:	f00e f924 	bl	8014d56 <atoi>
 8006b0e:	b2c5      	uxtb	r5, r0
		if(pcParameterString5 != NULL){
 8006b10:	6824      	ldr	r4, [r4, #0]
 8006b12:	2c00      	cmp	r4, #0
 8006b14:	d010      	beq.n	8006b38 <setCommand+0x3e0>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006b16:	2202      	movs	r2, #2
 8006b18:	49cf      	ldr	r1, [pc, #828]	; (8006e58 <setCommand+0x700>)
 8006b1a:	0020      	movs	r0, r4
 8006b1c:	f00e fdf2 	bl	8015704 <strncmp>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d028      	beq.n	8006b76 <setCommand+0x41e>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006b24:	2202      	movs	r2, #2
 8006b26:	49cd      	ldr	r1, [pc, #820]	; (8006e5c <setCommand+0x704>)
 8006b28:	0020      	movs	r0, r4
 8006b2a:	f00e fdeb 	bl	8015704 <strncmp>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d000      	beq.n	8006b34 <setCommand+0x3dc>
 8006b32:	e1ff      	b.n	8006f34 <setCommand+0x7dc>
				temp84 =RTC_PM;
 8006b34:	2302      	movs	r3, #2
 8006b36:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006b38:	2e17      	cmp	r6, #23
 8006b3a:	d900      	bls.n	8006b3e <setCommand+0x3e6>
 8006b3c:	e20e      	b.n	8006f5c <setCommand+0x804>
 8006b3e:	2f3b      	cmp	r7, #59	; 0x3b
 8006b40:	d900      	bls.n	8006b44 <setCommand+0x3ec>
 8006b42:	e20d      	b.n	8006f60 <setCommand+0x808>
 8006b44:	2d3b      	cmp	r5, #59	; 0x3b
 8006b46:	d900      	bls.n	8006b4a <setCommand+0x3f2>
 8006b48:	e20c      	b.n	8006f64 <setCommand+0x80c>
				GetTimeDate();
 8006b4a:	f008 fbd3 	bl	800f2f4 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006b4e:	4cc4      	ldr	r4, [pc, #784]	; (8006e60 <setCommand+0x708>)
 8006b50:	7da0      	ldrb	r0, [r4, #22]
 8006b52:	7d61      	ldrb	r1, [r4, #21]
 8006b54:	8b22      	ldrh	r2, [r4, #24]
 8006b56:	7d23      	ldrb	r3, [r4, #20]
 8006b58:	7b24      	ldrb	r4, [r4, #12]
 8006b5a:	b264      	sxtb	r4, r4
 8006b5c:	9404      	str	r4, [sp, #16]
 8006b5e:	4644      	mov	r4, r8
 8006b60:	9403      	str	r4, [sp, #12]
 8006b62:	9602      	str	r6, [sp, #8]
 8006b64:	9701      	str	r7, [sp, #4]
 8006b66:	9500      	str	r5, [sp, #0]
 8006b68:	f008 fb6a 	bl	800f240 <BOS_CalendarConfig>
 8006b6c:	0004      	movs	r4, r0
	if(result == BOS_OK){
 8006b6e:	2c00      	cmp	r4, #0
 8006b70:	d000      	beq.n	8006b74 <setCommand+0x41c>
 8006b72:	e621      	b.n	80067b8 <setCommand+0x60>
 8006b74:	e653      	b.n	800681e <setCommand+0xc6>
				temp84 =RTC_AM;
 8006b76:	2301      	movs	r3, #1
 8006b78:	4698      	mov	r8, r3
 8006b7a:	e7dd      	b.n	8006b38 <setCommand+0x3e0>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006b7c:	aa0c      	add	r2, sp, #48	; 0x30
 8006b7e:	2102      	movs	r1, #2
 8006b80:	0020      	movs	r0, r4
 8006b82:	f009 f86b 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8006b86:	4db0      	ldr	r5, [pc, #704]	; (8006e48 <setCommand+0x6f0>)
 8006b88:	6028      	str	r0, [r5, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006b8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b8c:	2103      	movs	r1, #3
 8006b8e:	0020      	movs	r0, r4
 8006b90:	f009 f864 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8006b94:	4bad      	ldr	r3, [pc, #692]	; (8006e4c <setCommand+0x6f4>)
 8006b96:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006b98:	aa0a      	add	r2, sp, #40	; 0x28
 8006b9a:	2104      	movs	r1, #4
 8006b9c:	0020      	movs	r0, r4
 8006b9e:	f009 f85d 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8006ba2:	4eab      	ldr	r6, [pc, #684]	; (8006e50 <setCommand+0x6f8>)
 8006ba4:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006ba6:	aa09      	add	r2, sp, #36	; 0x24
 8006ba8:	2105      	movs	r1, #5
 8006baa:	0020      	movs	r0, r4
 8006bac:	f009 f856 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8006bb0:	4ca8      	ldr	r4, [pc, #672]	; (8006e54 <setCommand+0x6fc>)
 8006bb2:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006bb4:	6830      	ldr	r0, [r6, #0]
 8006bb6:	f00e f8ce 	bl	8014d56 <atoi>
 8006bba:	b2c3      	uxtb	r3, r0
 8006bbc:	4699      	mov	r9, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006bbe:	6820      	ldr	r0, [r4, #0]
 8006bc0:	f00e f8c9 	bl	8014d56 <atoi>
 8006bc4:	b286      	uxth	r6, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006bc6:	682c      	ldr	r4, [r5, #0]
 8006bc8:	2206      	movs	r2, #6
 8006bca:	49a6      	ldr	r1, [pc, #664]	; (8006e64 <setCommand+0x70c>)
 8006bcc:	0020      	movs	r0, r4
 8006bce:	f00e fd99 	bl	8015704 <strncmp>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d100      	bne.n	8006bd8 <setCommand+0x480>
 8006bd6:	e11b      	b.n	8006e10 <setCommand+0x6b8>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006bd8:	2207      	movs	r2, #7
 8006bda:	49a3      	ldr	r1, [pc, #652]	; (8006e68 <setCommand+0x710>)
 8006bdc:	0020      	movs	r0, r4
 8006bde:	f00e fd91 	bl	8015704 <strncmp>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d100      	bne.n	8006be8 <setCommand+0x490>
 8006be6:	e116      	b.n	8006e16 <setCommand+0x6be>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006be8:	2209      	movs	r2, #9
 8006bea:	49a0      	ldr	r1, [pc, #640]	; (8006e6c <setCommand+0x714>)
 8006bec:	0020      	movs	r0, r4
 8006bee:	f00e fd89 	bl	8015704 <strncmp>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d100      	bne.n	8006bf8 <setCommand+0x4a0>
 8006bf6:	e111      	b.n	8006e1c <setCommand+0x6c4>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	499d      	ldr	r1, [pc, #628]	; (8006e70 <setCommand+0x718>)
 8006bfc:	0020      	movs	r0, r4
 8006bfe:	f00e fd81 	bl	8015704 <strncmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d100      	bne.n	8006c08 <setCommand+0x4b0>
 8006c06:	e10c      	b.n	8006e22 <setCommand+0x6ca>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006c08:	2206      	movs	r2, #6
 8006c0a:	499a      	ldr	r1, [pc, #616]	; (8006e74 <setCommand+0x71c>)
 8006c0c:	0020      	movs	r0, r4
 8006c0e:	f00e fd79 	bl	8015704 <strncmp>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d100      	bne.n	8006c18 <setCommand+0x4c0>
 8006c16:	e107      	b.n	8006e28 <setCommand+0x6d0>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006c18:	2208      	movs	r2, #8
 8006c1a:	4997      	ldr	r1, [pc, #604]	; (8006e78 <setCommand+0x720>)
 8006c1c:	0020      	movs	r0, r4
 8006c1e:	f00e fd71 	bl	8015704 <strncmp>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d100      	bne.n	8006c28 <setCommand+0x4d0>
 8006c26:	e102      	b.n	8006e2e <setCommand+0x6d6>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006c28:	2206      	movs	r2, #6
 8006c2a:	4994      	ldr	r1, [pc, #592]	; (8006e7c <setCommand+0x724>)
 8006c2c:	0020      	movs	r0, r4
 8006c2e:	f00e fd69 	bl	8015704 <strncmp>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d000      	beq.n	8006c38 <setCommand+0x4e0>
 8006c36:	e0fd      	b.n	8006e34 <setCommand+0x6dc>
			temp81 =SUNDAY;
 8006c38:	2707      	movs	r7, #7
	BOS_Status result =BOS_OK;
 8006c3a:	2400      	movs	r4, #0
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006c3c:	4b83      	ldr	r3, [pc, #524]	; (8006e4c <setCommand+0x6f4>)
 8006c3e:	681d      	ldr	r5, [r3, #0]
 8006c40:	2207      	movs	r2, #7
 8006c42:	498f      	ldr	r1, [pc, #572]	; (8006e80 <setCommand+0x728>)
 8006c44:	0028      	movs	r0, r5
 8006c46:	f00e fd5d 	bl	8015704 <strncmp>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d100      	bne.n	8006c50 <setCommand+0x4f8>
 8006c4e:	e0f3      	b.n	8006e38 <setCommand+0x6e0>
 8006c50:	2202      	movs	r2, #2
 8006c52:	498c      	ldr	r1, [pc, #560]	; (8006e84 <setCommand+0x72c>)
 8006c54:	0028      	movs	r0, r5
 8006c56:	f00e fd55 	bl	8015704 <strncmp>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d100      	bne.n	8006c60 <setCommand+0x508>
 8006c5e:	e0ed      	b.n	8006e3c <setCommand+0x6e4>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006c60:	2208      	movs	r2, #8
 8006c62:	4989      	ldr	r1, [pc, #548]	; (8006e88 <setCommand+0x730>)
 8006c64:	0028      	movs	r0, r5
 8006c66:	f00e fd4d 	bl	8015704 <strncmp>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d100      	bne.n	8006c70 <setCommand+0x518>
 8006c6e:	e0e7      	b.n	8006e40 <setCommand+0x6e8>
 8006c70:	2202      	movs	r2, #2
 8006c72:	4986      	ldr	r1, [pc, #536]	; (8006e8c <setCommand+0x734>)
 8006c74:	0028      	movs	r0, r5
 8006c76:	f00e fd45 	bl	8015704 <strncmp>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d100      	bne.n	8006c80 <setCommand+0x528>
 8006c7e:	e0e1      	b.n	8006e44 <setCommand+0x6ec>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006c80:	2205      	movs	r2, #5
 8006c82:	4983      	ldr	r1, [pc, #524]	; (8006e90 <setCommand+0x738>)
 8006c84:	0028      	movs	r0, r5
 8006c86:	f00e fd3d 	bl	8015704 <strncmp>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d100      	bne.n	8006c90 <setCommand+0x538>
 8006c8e:	e12b      	b.n	8006ee8 <setCommand+0x790>
 8006c90:	2202      	movs	r2, #2
 8006c92:	4980      	ldr	r1, [pc, #512]	; (8006e94 <setCommand+0x73c>)
 8006c94:	0028      	movs	r0, r5
 8006c96:	f00e fd35 	bl	8015704 <strncmp>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d100      	bne.n	8006ca0 <setCommand+0x548>
 8006c9e:	e125      	b.n	8006eec <setCommand+0x794>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006ca0:	2205      	movs	r2, #5
 8006ca2:	497d      	ldr	r1, [pc, #500]	; (8006e98 <setCommand+0x740>)
 8006ca4:	0028      	movs	r0, r5
 8006ca6:	f00e fd2d 	bl	8015704 <strncmp>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d100      	bne.n	8006cb0 <setCommand+0x558>
 8006cae:	e11f      	b.n	8006ef0 <setCommand+0x798>
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	497a      	ldr	r1, [pc, #488]	; (8006e9c <setCommand+0x744>)
 8006cb4:	0028      	movs	r0, r5
 8006cb6:	f00e fd25 	bl	8015704 <strncmp>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d100      	bne.n	8006cc0 <setCommand+0x568>
 8006cbe:	e119      	b.n	8006ef4 <setCommand+0x79c>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006cc0:	2203      	movs	r2, #3
 8006cc2:	4977      	ldr	r1, [pc, #476]	; (8006ea0 <setCommand+0x748>)
 8006cc4:	0028      	movs	r0, r5
 8006cc6:	f00e fd1d 	bl	8015704 <strncmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d100      	bne.n	8006cd0 <setCommand+0x578>
 8006cce:	e113      	b.n	8006ef8 <setCommand+0x7a0>
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	4974      	ldr	r1, [pc, #464]	; (8006ea4 <setCommand+0x74c>)
 8006cd4:	0028      	movs	r0, r5
 8006cd6:	f00e fd15 	bl	8015704 <strncmp>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d100      	bne.n	8006ce0 <setCommand+0x588>
 8006cde:	e10d      	b.n	8006efc <setCommand+0x7a4>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	4971      	ldr	r1, [pc, #452]	; (8006ea8 <setCommand+0x750>)
 8006ce4:	0028      	movs	r0, r5
 8006ce6:	f00e fd0d 	bl	8015704 <strncmp>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d100      	bne.n	8006cf0 <setCommand+0x598>
 8006cee:	e107      	b.n	8006f00 <setCommand+0x7a8>
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	496e      	ldr	r1, [pc, #440]	; (8006eac <setCommand+0x754>)
 8006cf4:	0028      	movs	r0, r5
 8006cf6:	f00e fd05 	bl	8015704 <strncmp>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d100      	bne.n	8006d00 <setCommand+0x5a8>
 8006cfe:	e101      	b.n	8006f04 <setCommand+0x7ac>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006d00:	2204      	movs	r2, #4
 8006d02:	496b      	ldr	r1, [pc, #428]	; (8006eb0 <setCommand+0x758>)
 8006d04:	0028      	movs	r0, r5
 8006d06:	f00e fcfd 	bl	8015704 <strncmp>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d100      	bne.n	8006d10 <setCommand+0x5b8>
 8006d0e:	e0fb      	b.n	8006f08 <setCommand+0x7b0>
 8006d10:	2202      	movs	r2, #2
 8006d12:	4968      	ldr	r1, [pc, #416]	; (8006eb4 <setCommand+0x75c>)
 8006d14:	0028      	movs	r0, r5
 8006d16:	f00e fcf5 	bl	8015704 <strncmp>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d100      	bne.n	8006d20 <setCommand+0x5c8>
 8006d1e:	e0f5      	b.n	8006f0c <setCommand+0x7b4>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006d20:	2205      	movs	r2, #5
 8006d22:	4965      	ldr	r1, [pc, #404]	; (8006eb8 <setCommand+0x760>)
 8006d24:	0028      	movs	r0, r5
 8006d26:	f00e fced 	bl	8015704 <strncmp>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d100      	bne.n	8006d30 <setCommand+0x5d8>
 8006d2e:	e0ef      	b.n	8006f10 <setCommand+0x7b8>
 8006d30:	2202      	movs	r2, #2
 8006d32:	4962      	ldr	r1, [pc, #392]	; (8006ebc <setCommand+0x764>)
 8006d34:	0028      	movs	r0, r5
 8006d36:	f00e fce5 	bl	8015704 <strncmp>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d100      	bne.n	8006d40 <setCommand+0x5e8>
 8006d3e:	e0e9      	b.n	8006f14 <setCommand+0x7bc>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006d40:	2209      	movs	r2, #9
 8006d42:	495f      	ldr	r1, [pc, #380]	; (8006ec0 <setCommand+0x768>)
 8006d44:	0028      	movs	r0, r5
 8006d46:	f00e fcdd 	bl	8015704 <strncmp>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d100      	bne.n	8006d50 <setCommand+0x5f8>
 8006d4e:	e0e3      	b.n	8006f18 <setCommand+0x7c0>
 8006d50:	2202      	movs	r2, #2
 8006d52:	495c      	ldr	r1, [pc, #368]	; (8006ec4 <setCommand+0x76c>)
 8006d54:	0028      	movs	r0, r5
 8006d56:	f00e fcd5 	bl	8015704 <strncmp>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d100      	bne.n	8006d60 <setCommand+0x608>
 8006d5e:	e0dd      	b.n	8006f1c <setCommand+0x7c4>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006d60:	2207      	movs	r2, #7
 8006d62:	4959      	ldr	r1, [pc, #356]	; (8006ec8 <setCommand+0x770>)
 8006d64:	0028      	movs	r0, r5
 8006d66:	f00e fccd 	bl	8015704 <strncmp>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d100      	bne.n	8006d70 <setCommand+0x618>
 8006d6e:	e0d7      	b.n	8006f20 <setCommand+0x7c8>
 8006d70:	2202      	movs	r2, #2
 8006d72:	4956      	ldr	r1, [pc, #344]	; (8006ecc <setCommand+0x774>)
 8006d74:	0028      	movs	r0, r5
 8006d76:	f00e fcc5 	bl	8015704 <strncmp>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d100      	bne.n	8006d80 <setCommand+0x628>
 8006d7e:	e0d1      	b.n	8006f24 <setCommand+0x7cc>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006d80:	2208      	movs	r2, #8
 8006d82:	4953      	ldr	r1, [pc, #332]	; (8006ed0 <setCommand+0x778>)
 8006d84:	0028      	movs	r0, r5
 8006d86:	f00e fcbd 	bl	8015704 <strncmp>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d100      	bne.n	8006d90 <setCommand+0x638>
 8006d8e:	e0cb      	b.n	8006f28 <setCommand+0x7d0>
 8006d90:	2202      	movs	r2, #2
 8006d92:	4950      	ldr	r1, [pc, #320]	; (8006ed4 <setCommand+0x77c>)
 8006d94:	0028      	movs	r0, r5
 8006d96:	f00e fcb5 	bl	8015704 <strncmp>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d100      	bne.n	8006da0 <setCommand+0x648>
 8006d9e:	e0c5      	b.n	8006f2c <setCommand+0x7d4>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006da0:	2208      	movs	r2, #8
 8006da2:	494d      	ldr	r1, [pc, #308]	; (8006ed8 <setCommand+0x780>)
 8006da4:	0028      	movs	r0, r5
 8006da6:	f00e fcad 	bl	8015704 <strncmp>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d100      	bne.n	8006db0 <setCommand+0x658>
 8006dae:	e0bf      	b.n	8006f30 <setCommand+0x7d8>
 8006db0:	2202      	movs	r2, #2
 8006db2:	494a      	ldr	r1, [pc, #296]	; (8006edc <setCommand+0x784>)
 8006db4:	0028      	movs	r0, r5
 8006db6:	f00e fca5 	bl	8015704 <strncmp>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d000      	beq.n	8006dc0 <setCommand+0x668>
 8006dbe:	e0bb      	b.n	8006f38 <setCommand+0x7e0>
			temp82 =DECEMBER;
 8006dc0:	250c      	movs	r5, #12
		if(result == BOS_OK){
 8006dc2:	2c00      	cmp	r4, #0
 8006dc4:	d000      	beq.n	8006dc8 <setCommand+0x670>
 8006dc6:	e6d2      	b.n	8006b6e <setCommand+0x416>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006dc8:	464b      	mov	r3, r9
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b1e      	cmp	r3, #30
 8006dd0:	d900      	bls.n	8006dd4 <setCommand+0x67c>
 8006dd2:	e0c9      	b.n	8006f68 <setCommand+0x810>
 8006dd4:	4b42      	ldr	r3, [pc, #264]	; (8006ee0 <setCommand+0x788>)
 8006dd6:	429e      	cmp	r6, r3
 8006dd8:	d800      	bhi.n	8006ddc <setCommand+0x684>
 8006dda:	e0c7      	b.n	8006f6c <setCommand+0x814>
 8006ddc:	4b41      	ldr	r3, [pc, #260]	; (8006ee4 <setCommand+0x78c>)
 8006dde:	429e      	cmp	r6, r3
 8006de0:	d900      	bls.n	8006de4 <setCommand+0x68c>
 8006de2:	e0c5      	b.n	8006f70 <setCommand+0x818>
				GetTimeDate();
 8006de4:	f008 fa86 	bl	800f2f4 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006de8:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <setCommand+0x708>)
 8006dea:	7c1a      	ldrb	r2, [r3, #16]
 8006dec:	7c59      	ldrb	r1, [r3, #17]
 8006dee:	7c98      	ldrb	r0, [r3, #18]
 8006df0:	7cdc      	ldrb	r4, [r3, #19]
 8006df2:	7b1b      	ldrb	r3, [r3, #12]
 8006df4:	b25b      	sxtb	r3, r3
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	9403      	str	r4, [sp, #12]
 8006dfa:	9002      	str	r0, [sp, #8]
 8006dfc:	9101      	str	r1, [sp, #4]
 8006dfe:	9200      	str	r2, [sp, #0]
 8006e00:	003b      	movs	r3, r7
 8006e02:	0032      	movs	r2, r6
 8006e04:	4649      	mov	r1, r9
 8006e06:	0028      	movs	r0, r5
 8006e08:	f008 fa1a 	bl	800f240 <BOS_CalendarConfig>
 8006e0c:	0004      	movs	r4, r0
 8006e0e:	e6ae      	b.n	8006b6e <setCommand+0x416>
			temp81 =MONDAY;
 8006e10:	2701      	movs	r7, #1
	BOS_Status result =BOS_OK;
 8006e12:	2400      	movs	r4, #0
 8006e14:	e712      	b.n	8006c3c <setCommand+0x4e4>
			temp81 =TUESDAY;
 8006e16:	2702      	movs	r7, #2
	BOS_Status result =BOS_OK;
 8006e18:	2400      	movs	r4, #0
 8006e1a:	e70f      	b.n	8006c3c <setCommand+0x4e4>
			temp81 =WEDNESDAY;
 8006e1c:	2703      	movs	r7, #3
	BOS_Status result =BOS_OK;
 8006e1e:	2400      	movs	r4, #0
 8006e20:	e70c      	b.n	8006c3c <setCommand+0x4e4>
			temp81 =THURSDAY;
 8006e22:	2704      	movs	r7, #4
	BOS_Status result =BOS_OK;
 8006e24:	2400      	movs	r4, #0
 8006e26:	e709      	b.n	8006c3c <setCommand+0x4e4>
			temp81 =FRIDAY;
 8006e28:	2705      	movs	r7, #5
	BOS_Status result =BOS_OK;
 8006e2a:	2400      	movs	r4, #0
 8006e2c:	e706      	b.n	8006c3c <setCommand+0x4e4>
			temp81 =SATURDAY;
 8006e2e:	2706      	movs	r7, #6
	BOS_Status result =BOS_OK;
 8006e30:	2400      	movs	r4, #0
 8006e32:	e703      	b.n	8006c3c <setCommand+0x4e4>
			result =BOS_ERR_WrongValue;
 8006e34:	2468      	movs	r4, #104	; 0x68
 8006e36:	e701      	b.n	8006c3c <setCommand+0x4e4>
			temp82 =JANUARY;
 8006e38:	2501      	movs	r5, #1
 8006e3a:	e7c2      	b.n	8006dc2 <setCommand+0x66a>
 8006e3c:	2501      	movs	r5, #1
 8006e3e:	e7c0      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =FEBRUARY;
 8006e40:	2502      	movs	r5, #2
 8006e42:	e7be      	b.n	8006dc2 <setCommand+0x66a>
 8006e44:	2502      	movs	r5, #2
 8006e46:	e7bc      	b.n	8006dc2 <setCommand+0x66a>
 8006e48:	20001284 	.word	0x20001284
 8006e4c:	2000128c 	.word	0x2000128c
 8006e50:	20001290 	.word	0x20001290
 8006e54:	20001294 	.word	0x20001294
 8006e58:	0801ccb0 	.word	0x0801ccb0
 8006e5c:	0801b088 	.word	0x0801b088
 8006e60:	20006da0 	.word	0x20006da0
 8006e64:	0801b094 	.word	0x0801b094
 8006e68:	0801b09c 	.word	0x0801b09c
 8006e6c:	0801b0a4 	.word	0x0801b0a4
 8006e70:	0801b0b0 	.word	0x0801b0b0
 8006e74:	0801b0bc 	.word	0x0801b0bc
 8006e78:	0801b0c4 	.word	0x0801b0c4
 8006e7c:	0801b0d0 	.word	0x0801b0d0
 8006e80:	0801b0d8 	.word	0x0801b0d8
 8006e84:	0801b0e0 	.word	0x0801b0e0
 8006e88:	0801b0e4 	.word	0x0801b0e4
 8006e8c:	0801b0f0 	.word	0x0801b0f0
 8006e90:	0801b0f4 	.word	0x0801b0f4
 8006e94:	0801b0fc 	.word	0x0801b0fc
 8006e98:	0801b100 	.word	0x0801b100
 8006e9c:	0801b108 	.word	0x0801b108
 8006ea0:	0801b10c 	.word	0x0801b10c
 8006ea4:	0801b110 	.word	0x0801b110
 8006ea8:	0801b114 	.word	0x0801b114
 8006eac:	0801b11c 	.word	0x0801b11c
 8006eb0:	0801b120 	.word	0x0801b120
 8006eb4:	0801b128 	.word	0x0801b128
 8006eb8:	0801b12c 	.word	0x0801b12c
 8006ebc:	0801b134 	.word	0x0801b134
 8006ec0:	0801b138 	.word	0x0801b138
 8006ec4:	0801b144 	.word	0x0801b144
 8006ec8:	0801b148 	.word	0x0801b148
 8006ecc:	0801b150 	.word	0x0801b150
 8006ed0:	0801b154 	.word	0x0801b154
 8006ed4:	0801b160 	.word	0x0801b160
 8006ed8:	0801b164 	.word	0x0801b164
 8006edc:	0801b170 	.word	0x0801b170
 8006ee0:	000007cf 	.word	0x000007cf
 8006ee4:	00000834 	.word	0x00000834
			temp82 =MARCH;
 8006ee8:	2503      	movs	r5, #3
 8006eea:	e76a      	b.n	8006dc2 <setCommand+0x66a>
 8006eec:	2503      	movs	r5, #3
 8006eee:	e768      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =APRIL;
 8006ef0:	2504      	movs	r5, #4
 8006ef2:	e766      	b.n	8006dc2 <setCommand+0x66a>
 8006ef4:	2504      	movs	r5, #4
 8006ef6:	e764      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =MAY;
 8006ef8:	2505      	movs	r5, #5
 8006efa:	e762      	b.n	8006dc2 <setCommand+0x66a>
 8006efc:	2505      	movs	r5, #5
 8006efe:	e760      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =JUNE;
 8006f00:	2506      	movs	r5, #6
 8006f02:	e75e      	b.n	8006dc2 <setCommand+0x66a>
 8006f04:	2506      	movs	r5, #6
 8006f06:	e75c      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =JULY;
 8006f08:	2507      	movs	r5, #7
 8006f0a:	e75a      	b.n	8006dc2 <setCommand+0x66a>
 8006f0c:	2507      	movs	r5, #7
 8006f0e:	e758      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =AUGUST;
 8006f10:	2508      	movs	r5, #8
 8006f12:	e756      	b.n	8006dc2 <setCommand+0x66a>
 8006f14:	2508      	movs	r5, #8
 8006f16:	e754      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =SEPTEMBER;
 8006f18:	2509      	movs	r5, #9
 8006f1a:	e752      	b.n	8006dc2 <setCommand+0x66a>
 8006f1c:	2509      	movs	r5, #9
 8006f1e:	e750      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =OCTOBER;
 8006f20:	250a      	movs	r5, #10
 8006f22:	e74e      	b.n	8006dc2 <setCommand+0x66a>
 8006f24:	250a      	movs	r5, #10
 8006f26:	e74c      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =NOVEMBER;
 8006f28:	250b      	movs	r5, #11
 8006f2a:	e74a      	b.n	8006dc2 <setCommand+0x66a>
 8006f2c:	250b      	movs	r5, #11
 8006f2e:	e748      	b.n	8006dc2 <setCommand+0x66a>
			temp82 =DECEMBER;
 8006f30:	250c      	movs	r5, #12
 8006f32:	e746      	b.n	8006dc2 <setCommand+0x66a>
				result =BOS_ERR_WrongValue;
 8006f34:	2468      	movs	r4, #104	; 0x68
 8006f36:	e61a      	b.n	8006b6e <setCommand+0x416>
			result =BOS_ERR_WrongValue;
 8006f38:	2468      	movs	r4, #104	; 0x68
 8006f3a:	e618      	b.n	8006b6e <setCommand+0x416>
				result =BOS_ERR_WrongValue;
 8006f3c:	2468      	movs	r4, #104	; 0x68
 8006f3e:	e43b      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f40:	2468      	movs	r4, #104	; 0x68
 8006f42:	e439      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f44:	2468      	movs	r4, #104	; 0x68
 8006f46:	e437      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f48:	2468      	movs	r4, #104	; 0x68
 8006f4a:	e435      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f4c:	2468      	movs	r4, #104	; 0x68
 8006f4e:	e433      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f50:	2468      	movs	r4, #104	; 0x68
 8006f52:	e431      	b.n	80067b8 <setCommand+0x60>
			result =BOS_ERR_WrongParam;
 8006f54:	2467      	movs	r4, #103	; 0x67
 8006f56:	e42f      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f58:	2468      	movs	r4, #104	; 0x68
 8006f5a:	e42d      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f5c:	2468      	movs	r4, #104	; 0x68
 8006f5e:	e42b      	b.n	80067b8 <setCommand+0x60>
 8006f60:	2468      	movs	r4, #104	; 0x68
 8006f62:	e429      	b.n	80067b8 <setCommand+0x60>
 8006f64:	2468      	movs	r4, #104	; 0x68
 8006f66:	e427      	b.n	80067b8 <setCommand+0x60>
				result =BOS_ERR_WrongValue;
 8006f68:	2468      	movs	r4, #104	; 0x68
 8006f6a:	e425      	b.n	80067b8 <setCommand+0x60>
 8006f6c:	2468      	movs	r4, #104	; 0x68
 8006f6e:	e423      	b.n	80067b8 <setCommand+0x60>
 8006f70:	2468      	movs	r4, #104	; 0x68
 8006f72:	e421      	b.n	80067b8 <setCommand+0x60>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006f74:	2213      	movs	r2, #19
 8006f76:	4905      	ldr	r1, [pc, #20]	; (8006f8c <setCommand+0x834>)
 8006f78:	9807      	ldr	r0, [sp, #28]
 8006f7a:	f00e f97c 	bl	8015276 <memcpy>
 8006f7e:	e421      	b.n	80067c4 <setCommand+0x6c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006f80:	220f      	movs	r2, #15
 8006f82:	4903      	ldr	r1, [pc, #12]	; (8006f90 <setCommand+0x838>)
 8006f84:	9807      	ldr	r0, [sp, #28]
 8006f86:	f00e f976 	bl	8015276 <memcpy>
 8006f8a:	e41b      	b.n	80067c4 <setCommand+0x6c>
 8006f8c:	0801ab04 	.word	0x0801ab04
 8006f90:	0801a940 	.word	0x0801a940

08006f94 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f94:	b530      	push	{r4, r5, lr}
 8006f96:	b083      	sub	sp, #12
 8006f98:	0005      	movs	r5, r0
 8006f9a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006fa0:	2d00      	cmp	r5, #0
 8006fa2:	d101      	bne.n	8006fa8 <removebuttonCommand+0x14>
 8006fa4:	b672      	cpsid	i
 8006fa6:	e7fe      	b.n	8006fa6 <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006fa8:	aa01      	add	r2, sp, #4
 8006faa:	2101      	movs	r1, #1
 8006fac:	f008 fe56 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	56c3      	ldrsb	r3, [r0, r3]
 8006fb4:	2b70      	cmp	r3, #112	; 0x70
 8006fb6:	d008      	beq.n	8006fca <removebuttonCommand+0x36>
	uint8_t port =0;
 8006fb8:	2400      	movs	r4, #0
	result =RemovePortButton(port);
 8006fba:	0020      	movs	r0, r4
 8006fbc:	f001 fb8c 	bl	80086d8 <RemovePortButton>
	if(result == BOS_OK){
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d007      	beq.n	8006fd4 <removebuttonCommand+0x40>
}
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	b003      	add	sp, #12
 8006fc8:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006fca:	3001      	adds	r0, #1
 8006fcc:	f00d fec9 	bl	8014d62 <atol>
 8006fd0:	b2c4      	uxtb	r4, r0
 8006fd2:	e7f2      	b.n	8006fba <removebuttonCommand+0x26>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006fd4:	0023      	movs	r3, r4
 8006fd6:	0022      	movs	r2, r4
 8006fd8:	4902      	ldr	r1, [pc, #8]	; (8006fe4 <removebuttonCommand+0x50>)
 8006fda:	0028      	movs	r0, r5
 8006fdc:	f00e fb4e 	bl	801567c <sprintf>
 8006fe0:	e7f0      	b.n	8006fc4 <removebuttonCommand+0x30>
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	0801af24 	.word	0x0801af24

08006fe8 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fea:	b085      	sub	sp, #20
 8006fec:	0006      	movs	r6, r0
 8006fee:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	9303      	str	r3, [sp, #12]
 8006ff4:	9302      	str	r3, [sp, #8]
	configASSERT(pcWriteBuffer);
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d101      	bne.n	8006ffe <addbuttonCommand+0x16>
 8006ffa:	b672      	cpsid	i
 8006ffc:	e7fe      	b.n	8006ffc <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ffe:	aa03      	add	r2, sp, #12
 8007000:	2101      	movs	r1, #1
 8007002:	0038      	movs	r0, r7
 8007004:	f008 fe2a 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8007008:	0004      	movs	r4, r0
 800700a:	4b26      	ldr	r3, [pc, #152]	; (80070a4 <addbuttonCommand+0xbc>)
 800700c:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800700e:	9d03      	ldr	r5, [sp, #12]
 8007010:	002a      	movs	r2, r5
 8007012:	4925      	ldr	r1, [pc, #148]	; (80070a8 <addbuttonCommand+0xc0>)
 8007014:	f00e fb76 	bl	8015704 <strncmp>
 8007018:	2800      	cmp	r0, #0
 800701a:	d016      	beq.n	800704a <addbuttonCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 800701c:	002a      	movs	r2, r5
 800701e:	4923      	ldr	r1, [pc, #140]	; (80070ac <addbuttonCommand+0xc4>)
 8007020:	0020      	movs	r0, r4
 8007022:	f00e fb6f 	bl	8015704 <strncmp>
 8007026:	2800      	cmp	r0, #0
 8007028:	d023      	beq.n	8007072 <addbuttonCommand+0x8a>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 800702a:	002a      	movs	r2, r5
 800702c:	4920      	ldr	r1, [pc, #128]	; (80070b0 <addbuttonCommand+0xc8>)
 800702e:	0020      	movs	r0, r4
 8007030:	f00e fb68 	bl	8015704 <strncmp>
 8007034:	2800      	cmp	r0, #0
 8007036:	d01e      	beq.n	8007076 <addbuttonCommand+0x8e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8007038:	002a      	movs	r2, r5
 800703a:	491e      	ldr	r1, [pc, #120]	; (80070b4 <addbuttonCommand+0xcc>)
 800703c:	0020      	movs	r0, r4
 800703e:	f00e fb61 	bl	8015704 <strncmp>
 8007042:	2800      	cmp	r0, #0
 8007044:	d019      	beq.n	800707a <addbuttonCommand+0x92>
	uint8_t port =0, type =0;
 8007046:	2500      	movs	r5, #0
 8007048:	e000      	b.n	800704c <addbuttonCommand+0x64>
		type =MOMENTARY_NO;
 800704a:	2501      	movs	r5, #1
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800704c:	aa02      	add	r2, sp, #8
 800704e:	2102      	movs	r1, #2
 8007050:	0038      	movs	r0, r7
 8007052:	f008 fe03 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8007056:	2300      	movs	r3, #0
 8007058:	56c3      	ldrsb	r3, [r0, r3]
 800705a:	2b70      	cmp	r3, #112	; 0x70
 800705c:	d00f      	beq.n	800707e <addbuttonCommand+0x96>
	uint8_t port =0, type =0;
 800705e:	2400      	movs	r4, #0
	result =AddPortButton(type,port);
 8007060:	0021      	movs	r1, r4
 8007062:	0028      	movs	r0, r5
 8007064:	f001 faa6 	bl	80085b4 <AddPortButton>
	if(result == BOS_OK){
 8007068:	2800      	cmp	r0, #0
 800706a:	d00d      	beq.n	8007088 <addbuttonCommand+0xa0>
}
 800706c:	2000      	movs	r0, #0
 800706e:	b005      	add	sp, #20
 8007070:	bdf0      	pop	{r4, r5, r6, r7, pc}
		type =MOMENTARY_NC;
 8007072:	2502      	movs	r5, #2
 8007074:	e7ea      	b.n	800704c <addbuttonCommand+0x64>
		type =ONOFF_NO;
 8007076:	2503      	movs	r5, #3
 8007078:	e7e8      	b.n	800704c <addbuttonCommand+0x64>
		type =ONOFF_NC;
 800707a:	2504      	movs	r5, #4
 800707c:	e7e6      	b.n	800704c <addbuttonCommand+0x64>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 800707e:	3001      	adds	r0, #1
 8007080:	f00d fe6f 	bl	8014d62 <atol>
 8007084:	b2c4      	uxtb	r4, r0
 8007086:	e7eb      	b.n	8007060 <addbuttonCommand+0x78>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8007088:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <addbuttonCommand+0xbc>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	18d3      	adds	r3, r2, r3
 8007090:	2100      	movs	r1, #0
 8007092:	7019      	strb	r1, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8007094:	9400      	str	r4, [sp, #0]
 8007096:	0023      	movs	r3, r4
 8007098:	4907      	ldr	r1, [pc, #28]	; (80070b8 <addbuttonCommand+0xd0>)
 800709a:	0030      	movs	r0, r6
 800709c:	f00e faee 	bl	801567c <sprintf>
 80070a0:	e7e4      	b.n	800706c <addbuttonCommand+0x84>
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	20001274 	.word	0x20001274
 80070a8:	0801a7e4 	.word	0x0801a7e4
 80070ac:	0801a7f4 	.word	0x0801a7f4
 80070b0:	0801a804 	.word	0x0801a804
 80070b4:	0801a810 	.word	0x0801a810
 80070b8:	0801a81c 	.word	0x0801a81c

080070bc <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070be:	46de      	mov	lr, fp
 80070c0:	4657      	mov	r7, sl
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b09b      	sub	sp, #108	; 0x6c
 80070c6:	0005      	movs	r5, r0
 80070c8:	9009      	str	r0, [sp, #36]	; 0x24
 80070ca:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	9319      	str	r3, [sp, #100]	; 0x64
 80070d0:	9318      	str	r3, [sp, #96]	; 0x60
 80070d2:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 80070d4:	9316      	str	r3, [sp, #88]	; 0x58
 80070d6:	9315      	str	r3, [sp, #84]	; 0x54
 80070d8:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 80070da:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 80070dc:	220a      	movs	r2, #10
 80070de:	2100      	movs	r1, #0
 80070e0:	a810      	add	r0, sp, #64	; 0x40
 80070e2:	f00e f8d1 	bl	8015288 <memset>
 80070e6:	220a      	movs	r2, #10
 80070e8:	2100      	movs	r1, #0
 80070ea:	a80d      	add	r0, sp, #52	; 0x34
 80070ec:	f00e f8cc 	bl	8015288 <memset>
 80070f0:	220a      	movs	r2, #10
 80070f2:	2100      	movs	r1, #0
 80070f4:	a80a      	add	r0, sp, #40	; 0x28
 80070f6:	f00e f8c7 	bl	8015288 <memset>
	configASSERT(pcWriteBuffer);
 80070fa:	2d00      	cmp	r5, #0
 80070fc:	d101      	bne.n	8007102 <scastCommand+0x46>
 80070fe:	b672      	cpsid	i
 8007100:	e7fe      	b.n	8007100 <scastCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007102:	aa19      	add	r2, sp, #100	; 0x64
 8007104:	2101      	movs	r1, #1
 8007106:	0020      	movs	r0, r4
 8007108:	f008 fda8 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 800710c:	2300      	movs	r3, #0
 800710e:	56c3      	ldrsb	r3, [r0, r3]
 8007110:	2b50      	cmp	r3, #80	; 0x50
 8007112:	d047      	beq.n	80071a4 <scastCommand+0xe8>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8007114:	2300      	movs	r3, #0
 8007116:	9307      	str	r3, [sp, #28]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007118:	aa18      	add	r2, sp, #96	; 0x60
 800711a:	2102      	movs	r1, #2
 800711c:	0020      	movs	r0, r4
 800711e:	f008 fd9d 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8007122:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8007124:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007126:	a810      	add	r0, sp, #64	; 0x40
 8007128:	f00e fafd 	bl	8015726 <strncpy>
	srcM =(uint8_t )GetID(par1);
 800712c:	a810      	add	r0, sp, #64	; 0x40
 800712e:	f7fd fa9f 	bl	8004670 <GetID>
 8007132:	b2c3      	uxtb	r3, r0
 8007134:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007136:	aa17      	add	r2, sp, #92	; 0x5c
 8007138:	2103      	movs	r1, #3
 800713a:	0020      	movs	r0, r4
 800713c:	f008 fd8e 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8007140:	2300      	movs	r3, #0
 8007142:	56c3      	ldrsb	r3, [r0, r3]
 8007144:	2b70      	cmp	r3, #112	; 0x70
 8007146:	d033      	beq.n	80071b0 <scastCommand+0xf4>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8007148:	2700      	movs	r7, #0
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800714a:	aa16      	add	r2, sp, #88	; 0x58
 800714c:	2104      	movs	r1, #4
 800714e:	0020      	movs	r0, r4
 8007150:	f008 fd84 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8007154:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8007156:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007158:	a80d      	add	r0, sp, #52	; 0x34
 800715a:	f00e fae4 	bl	8015726 <strncpy>
	dstM =(uint8_t )GetID(par2);
 800715e:	a80d      	add	r0, sp, #52	; 0x34
 8007160:	f7fd fa86 	bl	8004670 <GetID>
 8007164:	b2c3      	uxtb	r3, r0
 8007166:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8007168:	aa15      	add	r2, sp, #84	; 0x54
 800716a:	2105      	movs	r1, #5
 800716c:	0020      	movs	r0, r4
 800716e:	f008 fd75 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8007172:	0005      	movs	r5, r0
 8007174:	9008      	str	r0, [sp, #32]
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8007176:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007178:	0032      	movs	r2, r6
 800717a:	492d      	ldr	r1, [pc, #180]	; (8007230 <scastCommand+0x174>)
 800717c:	f00e fac2 	bl	8015704 <strncmp>
 8007180:	2800      	cmp	r0, #0
 8007182:	d01a      	beq.n	80071ba <scastCommand+0xfe>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8007184:	0032      	movs	r2, r6
 8007186:	492b      	ldr	r1, [pc, #172]	; (8007234 <scastCommand+0x178>)
 8007188:	0028      	movs	r0, r5
 800718a:	f00e fabb 	bl	8015704 <strncmp>
 800718e:	2800      	cmp	r0, #0
 8007190:	d03c      	beq.n	800720c <scastCommand+0x150>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8007192:	0032      	movs	r2, r6
 8007194:	4928      	ldr	r1, [pc, #160]	; (8007238 <scastCommand+0x17c>)
 8007196:	0028      	movs	r0, r5
 8007198:	f00e fab4 	bl	8015704 <strncmp>
 800719c:	2800      	cmp	r0, #0
 800719e:	d037      	beq.n	8007210 <scastCommand+0x154>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 80071a0:	2500      	movs	r5, #0
 80071a2:	e00b      	b.n	80071bc <scastCommand+0x100>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 80071a4:	3001      	adds	r0, #1
 80071a6:	f00d fddc 	bl	8014d62 <atol>
 80071aa:	b2c3      	uxtb	r3, r0
 80071ac:	9307      	str	r3, [sp, #28]
 80071ae:	e7b3      	b.n	8007118 <scastCommand+0x5c>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 80071b0:	3001      	adds	r0, #1
 80071b2:	f00d fdd6 	bl	8014d62 <atol>
 80071b6:	b2c7      	uxtb	r7, r0
 80071b8:	e7c7      	b.n	800714a <scastCommand+0x8e>
		direction =FORWARD;
 80071ba:	2500      	movs	r5, #0
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 80071bc:	0032      	movs	r2, r6
 80071be:	9908      	ldr	r1, [sp, #32]
 80071c0:	a80a      	add	r0, sp, #40	; 0x28
 80071c2:	f00e fab0 	bl	8015726 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 80071c6:	aa14      	add	r2, sp, #80	; 0x50
 80071c8:	2106      	movs	r1, #6
 80071ca:	0020      	movs	r0, r4
 80071cc:	f008 fd46 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 80071d0:	f00d fdc7 	bl	8014d62 <atol>
 80071d4:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 80071d6:	aa13      	add	r2, sp, #76	; 0x4c
 80071d8:	2107      	movs	r1, #7
 80071da:	0020      	movs	r0, r4
 80071dc:	f008 fd3e 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 80071e0:	f00d fdbf 	bl	8014d62 <atol>
 80071e4:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 80071e6:	2300      	movs	r3, #0
 80071e8:	9303      	str	r3, [sp, #12]
 80071ea:	9002      	str	r0, [sp, #8]
 80071ec:	9601      	str	r6, [sp, #4]
 80071ee:	9500      	str	r5, [sp, #0]
 80071f0:	465b      	mov	r3, fp
 80071f2:	003a      	movs	r2, r7
 80071f4:	4651      	mov	r1, sl
 80071f6:	9807      	ldr	r0, [sp, #28]
 80071f8:	f002 fcb6 	bl	8009b68 <StartScastDMAStream>
	if(result == BOS_OK){
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d009      	beq.n	8007214 <scastCommand+0x158>
}
 8007200:	2000      	movs	r0, #0
 8007202:	b01b      	add	sp, #108	; 0x6c
 8007204:	bc0c      	pop	{r2, r3}
 8007206:	4692      	mov	sl, r2
 8007208:	469b      	mov	fp, r3
 800720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		direction =BACKWARD;
 800720c:	2501      	movs	r5, #1
 800720e:	e7d5      	b.n	80071bc <scastCommand+0x100>
		direction =BIDIRECTIONAL;
 8007210:	2502      	movs	r5, #2
 8007212:	e7d3      	b.n	80071bc <scastCommand+0x100>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8007214:	9404      	str	r4, [sp, #16]
 8007216:	9603      	str	r6, [sp, #12]
 8007218:	ab0d      	add	r3, sp, #52	; 0x34
 800721a:	9302      	str	r3, [sp, #8]
 800721c:	9701      	str	r7, [sp, #4]
 800721e:	ab10      	add	r3, sp, #64	; 0x40
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	9b07      	ldr	r3, [sp, #28]
 8007224:	aa0a      	add	r2, sp, #40	; 0x28
 8007226:	4905      	ldr	r1, [pc, #20]	; (800723c <scastCommand+0x180>)
 8007228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800722a:	f00e fa27 	bl	801567c <sprintf>
 800722e:	e7e7      	b.n	8007200 <scastCommand+0x144>
 8007230:	0801af6c 	.word	0x0801af6c
 8007234:	0801af74 	.word	0x0801af74
 8007238:	0801af80 	.word	0x0801af80
 800723c:	0801af90 	.word	0x0801af90

08007240 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007242:	b083      	sub	sp, #12
 8007244:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007246:	d038      	beq.n	80072ba <infoCommand+0x7a>
	if(N > 1)
 8007248:	4b27      	ldr	r3, [pc, #156]	; (80072e8 <infoCommand+0xa8>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d936      	bls.n	80072be <infoCommand+0x7e>
		result =ReadPortsDir();
 8007250:	f7fd fb54 	bl	80048fc <ReadPortsDir>
 8007254:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8007256:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <infoCommand+0xa8>)
 8007258:	781a      	ldrb	r2, [r3, #0]
 800725a:	4924      	ldr	r1, [pc, #144]	; (80072ec <infoCommand+0xac>)
 800725c:	0020      	movs	r0, r4
 800725e:	f00e fa0d 	bl	801567c <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8007262:	0020      	movs	r0, r4
 8007264:	f7f8 ff58 	bl	8000118 <strlen>
 8007268:	b282      	uxth	r2, r0
 800726a:	4e21      	ldr	r6, [pc, #132]	; (80072f0 <infoCommand+0xb0>)
 800726c:	7830      	ldrb	r0, [r6, #0]
 800726e:	2701      	movs	r7, #1
 8007270:	427f      	negs	r7, r7
 8007272:	9700      	str	r7, [sp, #0]
 8007274:	2332      	movs	r3, #50	; 0x32
 8007276:	0021      	movs	r1, r4
 8007278:	f008 fa96 	bl	800f7a8 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 800727c:	2213      	movs	r2, #19
 800727e:	491d      	ldr	r1, [pc, #116]	; (80072f4 <infoCommand+0xb4>)
 8007280:	0020      	movs	r0, r4
 8007282:	f00d fff8 	bl	8015276 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8007286:	0020      	movs	r0, r4
 8007288:	f7f8 ff46 	bl	8000118 <strlen>
 800728c:	b282      	uxth	r2, r0
 800728e:	7830      	ldrb	r0, [r6, #0]
 8007290:	9700      	str	r7, [sp, #0]
 8007292:	2332      	movs	r3, #50	; 0x32
 8007294:	0021      	movs	r1, r4
 8007296:	f008 fa87 	bl	800f7a8 <writePxMutex>
	DisplayTopology(PcPort);
 800729a:	7830      	ldrb	r0, [r6, #0]
 800729c:	f7fc ff48 	bl	8004130 <DisplayTopology>
	DisplayPortsDir(PcPort);
 80072a0:	7830      	ldrb	r0, [r6, #0]
 80072a2:	f7fd f80f 	bl	80042c4 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 80072a6:	2d02      	cmp	r5, #2
 80072a8:	d00b      	beq.n	80072c2 <infoCommand+0x82>
	sprintf((char* )pcWriteBuffer," ");
 80072aa:	2202      	movs	r2, #2
 80072ac:	4912      	ldr	r1, [pc, #72]	; (80072f8 <infoCommand+0xb8>)
 80072ae:	0020      	movs	r0, r4
 80072b0:	f00d ffe1 	bl	8015276 <memcpy>
}
 80072b4:	2000      	movs	r0, #0
 80072b6:	b003      	add	sp, #12
 80072b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 80072ba:	b672      	cpsid	i
 80072bc:	e7fe      	b.n	80072bc <infoCommand+0x7c>
	BOS_Status result =BOS_OK;
 80072be:	2500      	movs	r5, #0
 80072c0:	e7c9      	b.n	8007256 <infoCommand+0x16>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 80072c2:	2244      	movs	r2, #68	; 0x44
 80072c4:	490d      	ldr	r1, [pc, #52]	; (80072fc <infoCommand+0xbc>)
 80072c6:	0020      	movs	r0, r4
 80072c8:	f00d ffd5 	bl	8015276 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80072cc:	0020      	movs	r0, r4
 80072ce:	f7f8 ff23 	bl	8000118 <strlen>
 80072d2:	b282      	uxth	r2, r0
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <infoCommand+0xb0>)
 80072d6:	7818      	ldrb	r0, [r3, #0]
 80072d8:	003b      	movs	r3, r7
 80072da:	9700      	str	r7, [sp, #0]
 80072dc:	3333      	adds	r3, #51	; 0x33
 80072de:	0021      	movs	r1, r4
 80072e0:	f008 fa62 	bl	800f7a8 <writePxMutex>
 80072e4:	e7e1      	b.n	80072aa <infoCommand+0x6a>
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	2000001c 	.word	0x2000001c
 80072ec:	0801ad28 	.word	0x0801ad28
 80072f0:	20000a9f 	.word	0x20000a9f
 80072f4:	0801ad44 	.word	0x0801ad44
 80072f8:	08019ccc 	.word	0x08019ccc
 80072fc:	0801ad58 	.word	0x0801ad58

08007300 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007300:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8007302:	2800      	cmp	r0, #0
 8007304:	d101      	bne.n	800730a <statusCommand+0xa>
 8007306:	b672      	cpsid	i
 8007308:	e7fe      	b.n	8007308 <statusCommand+0x8>
	DisplayModuleStatus(0);
 800730a:	2000      	movs	r0, #0
 800730c:	f7fd f844 	bl	8004398 <DisplayModuleStatus>
}
 8007310:	2000      	movs	r0, #0
 8007312:	bd10      	pop	{r4, pc}

08007314 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007316:	46ce      	mov	lr, r9
 8007318:	b500      	push	{lr}
 800731a:	b090      	sub	sp, #64	; 0x40
 800731c:	0004      	movs	r4, r0
 800731e:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8007320:	2227      	movs	r2, #39	; 0x27
 8007322:	2100      	movs	r1, #0
 8007324:	a806      	add	r0, sp, #24
 8007326:	f00d ffaf 	bl	8015288 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 800732a:	220a      	movs	r2, #10
 800732c:	2100      	movs	r1, #0
 800732e:	a803      	add	r0, sp, #12
 8007330:	f00d ffaa 	bl	8015288 <memset>
	configASSERT(pcWriteBuffer);
 8007334:	2c00      	cmp	r4, #0
 8007336:	d101      	bne.n	800733c <groupCommand+0x28>
 8007338:	b672      	cpsid	i
 800733a:	e7fe      	b.n	800733a <groupCommand+0x26>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800733c:	4d59      	ldr	r5, [pc, #356]	; (80074a4 <groupCommand+0x190>)
 800733e:	002a      	movs	r2, r5
 8007340:	2101      	movs	r1, #1
 8007342:	9801      	ldr	r0, [sp, #4]
 8007344:	f008 fc8a 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 8007348:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 800734a:	682a      	ldr	r2, [r5, #0]
 800734c:	a803      	add	r0, sp, #12
 800734e:	f00e f9ea 	bl	8015726 <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8007352:	2500      	movs	r5, #0
 8007354:	e00b      	b.n	800736e <groupCommand+0x5a>
		if(!strcmp(alias,groupAlias[i])){
 8007356:	00ab      	lsls	r3, r5, #2
 8007358:	195b      	adds	r3, r3, r5
 800735a:	0059      	lsls	r1, r3, #1
 800735c:	4b52      	ldr	r3, [pc, #328]	; (80074a8 <groupCommand+0x194>)
 800735e:	18c9      	adds	r1, r1, r3
 8007360:	a803      	add	r0, sp, #12
 8007362:	f7f8 fecf 	bl	8000104 <strcmp>
 8007366:	2800      	cmp	r0, #0
 8007368:	d017      	beq.n	800739a <groupCommand+0x86>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 800736a:	3501      	adds	r5, #1
 800736c:	b2ed      	uxtb	r5, r5
 800736e:	2d09      	cmp	r5, #9
 8007370:	d9f1      	bls.n	8007356 <groupCommand+0x42>
	type =1;
 8007372:	2601      	movs	r6, #1
	count =2;
 8007374:	4b4d      	ldr	r3, [pc, #308]	; (80074ac <groupCommand+0x198>)
 8007376:	2202      	movs	r2, #2
 8007378:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 800737a:	3208      	adds	r2, #8
 800737c:	494c      	ldr	r1, [pc, #304]	; (80074b0 <groupCommand+0x19c>)
 800737e:	0020      	movs	r0, r4
 8007380:	f00d ff79 	bl	8015276 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8007384:	4a4b      	ldr	r2, [pc, #300]	; (80074b4 <groupCommand+0x1a0>)
 8007386:	2102      	movs	r1, #2
 8007388:	9801      	ldr	r0, [sp, #4]
 800738a:	f008 fc67 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800738e:	4b4a      	ldr	r3, [pc, #296]	; (80074b8 <groupCommand+0x1a4>)
 8007390:	6018      	str	r0, [r3, #0]
	int16_t modID =0, type =0;
 8007392:	2300      	movs	r3, #0
 8007394:	4699      	mov	r9, r3
	BOS_Status result =BOS_OK;
 8007396:	2500      	movs	r5, #0
	while(pcParameterString != NULL){
 8007398:	e00f      	b.n	80073ba <groupCommand+0xa6>
			type =0;
 800739a:	2600      	movs	r6, #0
 800739c:	e7ea      	b.n	8007374 <groupCommand+0x60>
		strcat((char* )pcWriteBuffer,module);
 800739e:	a906      	add	r1, sp, #24
 80073a0:	0020      	movs	r0, r4
 80073a2:	f00e f98b 	bl	80156bc <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 80073a6:	1c79      	adds	r1, r7, #1
 80073a8:	b249      	sxtb	r1, r1
 80073aa:	4b40      	ldr	r3, [pc, #256]	; (80074ac <groupCommand+0x198>)
 80073ac:	7019      	strb	r1, [r3, #0]
 80073ae:	4a41      	ldr	r2, [pc, #260]	; (80074b4 <groupCommand+0x1a0>)
 80073b0:	9801      	ldr	r0, [sp, #4]
 80073b2:	f008 fc53 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 80073b6:	4b40      	ldr	r3, [pc, #256]	; (80074b8 <groupCommand+0x1a4>)
 80073b8:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 80073ba:	4b3f      	ldr	r3, [pc, #252]	; (80074b8 <groupCommand+0x1a4>)
 80073bc:	6819      	ldr	r1, [r3, #0]
 80073be:	2900      	cmp	r1, #0
 80073c0:	d024      	beq.n	800740c <groupCommand+0xf8>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 80073c2:	4b3c      	ldr	r3, [pc, #240]	; (80074b4 <groupCommand+0x1a0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4699      	mov	r9, r3
 80073c8:	af06      	add	r7, sp, #24
 80073ca:	001a      	movs	r2, r3
 80073cc:	0038      	movs	r0, r7
 80073ce:	f00e f9aa 	bl	8015726 <strncpy>
		module[xParameterStringLength] ='\0';
 80073d2:	2300      	movs	r3, #0
 80073d4:	464a      	mov	r2, r9
 80073d6:	54bb      	strb	r3, [r7, r2]
		modID =GetID(module);
 80073d8:	0038      	movs	r0, r7
 80073da:	f7fd f949 	bl	8004670 <GetID>
 80073de:	4681      	mov	r9, r0
		if(modID < 0)
 80073e0:	2800      	cmp	r0, #0
 80073e2:	db13      	blt.n	800740c <groupCommand+0xf8>
		result =AddModuleToGroup(modID,alias);
 80073e4:	b2c0      	uxtb	r0, r0
 80073e6:	a903      	add	r1, sp, #12
 80073e8:	f7fd fa0a 	bl	8004800 <AddModuleToGroup>
 80073ec:	1e05      	subs	r5, r0, #0
		if(result != BOS_OK)
 80073ee:	d10d      	bne.n	800740c <groupCommand+0xf8>
		if(count > 2)
 80073f0:	4b2e      	ldr	r3, [pc, #184]	; (80074ac <groupCommand+0x198>)
 80073f2:	2700      	movs	r7, #0
 80073f4:	57df      	ldrsb	r7, [r3, r7]
 80073f6:	2f02      	cmp	r7, #2
 80073f8:	ddd1      	ble.n	800739e <groupCommand+0x8a>
			strcat((char* )pcWriteBuffer,", ");
 80073fa:	0020      	movs	r0, r4
 80073fc:	f7f8 fe8c 	bl	8000118 <strlen>
 8007400:	1820      	adds	r0, r4, r0
 8007402:	2203      	movs	r2, #3
 8007404:	492d      	ldr	r1, [pc, #180]	; (80074bc <groupCommand+0x1a8>)
 8007406:	f00d ff36 	bl	8015276 <memcpy>
 800740a:	e7c8      	b.n	800739e <groupCommand+0x8a>
	if(modID < 0)
 800740c:	464b      	mov	r3, r9
 800740e:	2b00      	cmp	r3, #0
 8007410:	db12      	blt.n	8007438 <groupCommand+0x124>
	else if(count == 2)
 8007412:	4b26      	ldr	r3, [pc, #152]	; (80074ac <groupCommand+0x198>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	b25b      	sxtb	r3, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d017      	beq.n	800744c <groupCommand+0x138>
	else if(result == BOS_OK && type){
 800741c:	2d00      	cmp	r5, #0
 800741e:	d11b      	bne.n	8007458 <groupCommand+0x144>
 8007420:	2e00      	cmp	r6, #0
 8007422:	d019      	beq.n	8007458 <groupCommand+0x144>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8007424:	aa03      	add	r2, sp, #12
 8007426:	4926      	ldr	r1, [pc, #152]	; (80074c0 <groupCommand+0x1ac>)
 8007428:	a806      	add	r0, sp, #24
 800742a:	f00e f927 	bl	801567c <sprintf>
		strcat((char* )pcWriteBuffer,module);
 800742e:	a906      	add	r1, sp, #24
 8007430:	0020      	movs	r0, r4
 8007432:	f00e f943 	bl	80156bc <strcat>
 8007436:	e004      	b.n	8007442 <groupCommand+0x12e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8007438:	aa06      	add	r2, sp, #24
 800743a:	4922      	ldr	r1, [pc, #136]	; (80074c4 <groupCommand+0x1b0>)
 800743c:	0020      	movs	r0, r4
 800743e:	f00e f91d 	bl	801567c <sprintf>
}
 8007442:	2000      	movs	r0, #0
 8007444:	b010      	add	sp, #64	; 0x40
 8007446:	bc04      	pop	{r2}
 8007448:	4691      	mov	r9, r2
 800744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 800744c:	aa03      	add	r2, sp, #12
 800744e:	491e      	ldr	r1, [pc, #120]	; (80074c8 <groupCommand+0x1b4>)
 8007450:	0020      	movs	r0, r4
 8007452:	f00e f913 	bl	801567c <sprintf>
 8007456:	e7f4      	b.n	8007442 <groupCommand+0x12e>
	else if(result == BOS_OK && !type){
 8007458:	2d00      	cmp	r5, #0
 800745a:	d10b      	bne.n	8007474 <groupCommand+0x160>
 800745c:	2e00      	cmp	r6, #0
 800745e:	d109      	bne.n	8007474 <groupCommand+0x160>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8007460:	aa03      	add	r2, sp, #12
 8007462:	491a      	ldr	r1, [pc, #104]	; (80074cc <groupCommand+0x1b8>)
 8007464:	a806      	add	r0, sp, #24
 8007466:	f00e f909 	bl	801567c <sprintf>
		strcat((char* )pcWriteBuffer,module);
 800746a:	a906      	add	r1, sp, #24
 800746c:	0020      	movs	r0, r4
 800746e:	f00e f925 	bl	80156bc <strcat>
 8007472:	e7e6      	b.n	8007442 <groupCommand+0x12e>
	else if(result == BOS_ERR_Keyword)
 8007474:	2d06      	cmp	r5, #6
 8007476:	d007      	beq.n	8007488 <groupCommand+0x174>
	else if(result == BOS_ERR_ExistingAlias)
 8007478:	2d07      	cmp	r5, #7
 800747a:	d10b      	bne.n	8007494 <groupCommand+0x180>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 800747c:	aa03      	add	r2, sp, #12
 800747e:	4914      	ldr	r1, [pc, #80]	; (80074d0 <groupCommand+0x1bc>)
 8007480:	0020      	movs	r0, r4
 8007482:	f00e f8fb 	bl	801567c <sprintf>
 8007486:	e7dc      	b.n	8007442 <groupCommand+0x12e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8007488:	aa03      	add	r2, sp, #12
 800748a:	4912      	ldr	r1, [pc, #72]	; (80074d4 <groupCommand+0x1c0>)
 800748c:	0020      	movs	r0, r4
 800748e:	f00e f8f5 	bl	801567c <sprintf>
 8007492:	e7d6      	b.n	8007442 <groupCommand+0x12e>
	else if(result == BOS_ERR_ExistingCmd)
 8007494:	2d08      	cmp	r5, #8
 8007496:	d1d4      	bne.n	8007442 <groupCommand+0x12e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8007498:	aa03      	add	r2, sp, #12
 800749a:	490f      	ldr	r1, [pc, #60]	; (80074d8 <groupCommand+0x1c4>)
 800749c:	0020      	movs	r0, r4
 800749e:	f00e f8ed 	bl	801567c <sprintf>
 80074a2:	e7ce      	b.n	8007442 <groupCommand+0x12e>
 80074a4:	200012a4 	.word	0x200012a4
 80074a8:	20000e4c 	.word	0x20000e4c
 80074ac:	2000126a 	.word	0x2000126a
 80074b0:	0801ab48 	.word	0x0801ab48
 80074b4:	20001298 	.word	0x20001298
 80074b8:	2000126c 	.word	0x2000126c
 80074bc:	0801ab54 	.word	0x0801ab54
 80074c0:	0801aba8 	.word	0x0801aba8
 80074c4:	0801ab58 	.word	0x0801ab58
 80074c8:	0801ab7c 	.word	0x0801ab7c
 80074cc:	0801abc4 	.word	0x0801abc4
 80074d0:	0801ac24 	.word	0x0801ac24
 80074d4:	0801abe4 	.word	0x0801abe4
 80074d8:	0801ac58 	.word	0x0801ac58

080074dc <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	0004      	movs	r4, r0
 80074e0:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 80074e2:	2c00      	cmp	r4, #0
 80074e4:	d101      	bne.n	80074ea <nameCommand+0xe>
 80074e6:	b672      	cpsid	i
 80074e8:	e7fe      	b.n	80074e8 <nameCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80074ea:	4d1c      	ldr	r5, [pc, #112]	; (800755c <nameCommand+0x80>)
 80074ec:	002a      	movs	r2, r5
 80074ee:	2101      	movs	r1, #1
 80074f0:	f008 fbb4 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 80074f4:	0001      	movs	r1, r0
 80074f6:	4b1a      	ldr	r3, [pc, #104]	; (8007560 <nameCommand+0x84>)
 80074f8:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	2b09      	cmp	r3, #9
 80074fe:	dd01      	ble.n	8007504 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007500:	2300      	movs	r3, #0
 8007502:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8007504:	4b17      	ldr	r3, [pc, #92]	; (8007564 <nameCommand+0x88>)
 8007506:	7818      	ldrb	r0, [r3, #0]
 8007508:	f7fd f914 	bl	8004734 <NameModule>
	if(result == BOS_OK)
 800750c:	2800      	cmp	r0, #0
 800750e:	d007      	beq.n	8007520 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 8007510:	2806      	cmp	r0, #6
 8007512:	d00e      	beq.n	8007532 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8007514:	2807      	cmp	r0, #7
 8007516:	d013      	beq.n	8007540 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 8007518:	2808      	cmp	r0, #8
 800751a:	d018      	beq.n	800754e <nameCommand+0x72>
}
 800751c:	2000      	movs	r0, #0
 800751e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007520:	4b10      	ldr	r3, [pc, #64]	; (8007564 <nameCommand+0x88>)
 8007522:	781a      	ldrb	r2, [r3, #0]
 8007524:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <nameCommand+0x84>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	490f      	ldr	r1, [pc, #60]	; (8007568 <nameCommand+0x8c>)
 800752a:	0020      	movs	r0, r4
 800752c:	f00e f8a6 	bl	801567c <sprintf>
 8007530:	e7f4      	b.n	800751c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8007532:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <nameCommand+0x84>)
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	490d      	ldr	r1, [pc, #52]	; (800756c <nameCommand+0x90>)
 8007538:	0020      	movs	r0, r4
 800753a:	f00e f89f 	bl	801567c <sprintf>
 800753e:	e7ed      	b.n	800751c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007540:	4b07      	ldr	r3, [pc, #28]	; (8007560 <nameCommand+0x84>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	490a      	ldr	r1, [pc, #40]	; (8007570 <nameCommand+0x94>)
 8007546:	0020      	movs	r0, r4
 8007548:	f00e f898 	bl	801567c <sprintf>
 800754c:	e7e6      	b.n	800751c <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <nameCommand+0x84>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4908      	ldr	r1, [pc, #32]	; (8007574 <nameCommand+0x98>)
 8007554:	0020      	movs	r0, r4
 8007556:	f00e f891 	bl	801567c <sprintf>
 800755a:	e7df      	b.n	800751c <nameCommand+0x40>
 800755c:	200012a0 	.word	0x200012a0
 8007560:	20001270 	.word	0x20001270
 8007564:	20001066 	.word	0x20001066
 8007568:	0801adc0 	.word	0x0801adc0
 800756c:	0801abe4 	.word	0x0801abe4
 8007570:	0801ac24 	.word	0x0801ac24
 8007574:	0801ac58 	.word	0x0801ac58

08007578 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800757a:	b085      	sub	sp, #20
 800757c:	1e04      	subs	r4, r0, #0
 800757e:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 8007580:	d101      	bne.n	8007586 <bootloaderUpdateCommand+0xe>
 8007582:	b672      	cpsid	i
 8007584:	e7fe      	b.n	8007584 <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007586:	4a4b      	ldr	r2, [pc, #300]	; (80076b4 <bootloaderUpdateCommand+0x13c>)
 8007588:	2101      	movs	r1, #1
 800758a:	9803      	ldr	r0, [sp, #12]
 800758c:	f008 fb66 	bl	800fc5c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007590:	2800      	cmp	r0, #0
 8007592:	d040      	beq.n	8007616 <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007594:	4b47      	ldr	r3, [pc, #284]	; (80076b4 <bootloaderUpdateCommand+0x13c>)
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	4947      	ldr	r1, [pc, #284]	; (80076b8 <bootloaderUpdateCommand+0x140>)
 800759a:	f00e f8b3 	bl	8015704 <strncmp>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d000      	beq.n	80075a4 <bootloaderUpdateCommand+0x2c>
 80075a2:	e080      	b.n	80076a6 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80075a4:	4a45      	ldr	r2, [pc, #276]	; (80076bc <bootloaderUpdateCommand+0x144>)
 80075a6:	2102      	movs	r1, #2
 80075a8:	9803      	ldr	r0, [sp, #12]
 80075aa:	f008 fb57 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 80075ae:	4f44      	ldr	r7, [pc, #272]	; (80076c0 <bootloaderUpdateCommand+0x148>)
 80075b0:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80075b2:	4a44      	ldr	r2, [pc, #272]	; (80076c4 <bootloaderUpdateCommand+0x14c>)
 80075b4:	2103      	movs	r1, #3
 80075b6:	9803      	ldr	r0, [sp, #12]
 80075b8:	f008 fb50 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 80075bc:	4b42      	ldr	r3, [pc, #264]	; (80076c8 <bootloaderUpdateCommand+0x150>)
 80075be:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 80075c0:	6838      	ldr	r0, [r7, #0]
 80075c2:	2300      	movs	r3, #0
 80075c4:	56c3      	ldrsb	r3, [r0, r3]
 80075c6:	2b23      	cmp	r3, #35	; 0x23
 80075c8:	d04f      	beq.n	800766a <bootloaderUpdateCommand+0xf2>
				result =BOS_ERR_WrongValue;
 80075ca:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString3[0] == 'p'){
 80075cc:	4b3e      	ldr	r3, [pc, #248]	; (80076c8 <bootloaderUpdateCommand+0x150>)
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	2300      	movs	r3, #0
 80075d2:	56c3      	ldrsb	r3, [r0, r3]
 80075d4:	2b70      	cmp	r3, #112	; 0x70
 80075d6:	d04e      	beq.n	8007676 <bootloaderUpdateCommand+0xfe>
				result =BOS_ERR_WrongValue;
 80075d8:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 80075da:	4b3c      	ldr	r3, [pc, #240]	; (80076cc <bootloaderUpdateCommand+0x154>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	42b3      	cmp	r3, r6
 80075e0:	d04e      	beq.n	8007680 <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;
 80075e2:	4b3b      	ldr	r3, [pc, #236]	; (80076d0 <bootloaderUpdateCommand+0x158>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	719a      	strb	r2, [r3, #6]
				messageParams[0] =port;
 80075e8:	4b3a      	ldr	r3, [pc, #232]	; (80076d4 <bootloaderUpdateCommand+0x15c>)
 80075ea:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80075ec:	3201      	adds	r2, #1
 80075ee:	211a      	movs	r1, #26
 80075f0:	0030      	movs	r0, r6
 80075f2:	f002 fa93 	bl	8009b1c <SendMessageToModule>
				osDelay(100);
 80075f6:	2064      	movs	r0, #100	; 0x64
 80075f8:	f008 fa0a 	bl	800fa10 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80075fc:	4b36      	ldr	r3, [pc, #216]	; (80076d8 <bootloaderUpdateCommand+0x160>)
 80075fe:	781a      	ldrb	r2, [r3, #0]
 8007600:	4b32      	ldr	r3, [pc, #200]	; (80076cc <bootloaderUpdateCommand+0x154>)
 8007602:	7818      	ldrb	r0, [r3, #0]
 8007604:	002b      	movs	r3, r5
 8007606:	0031      	movs	r1, r6
 8007608:	f7fc fd1c 	bl	8004044 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 800760c:	2f68      	cmp	r7, #104	; 0x68
 800760e:	d04a      	beq.n	80076a6 <bootloaderUpdateCommand+0x12e>
}
 8007610:	2000      	movs	r0, #0
 8007612:	b005      	add	sp, #20
 8007614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8007616:	4b2d      	ldr	r3, [pc, #180]	; (80076cc <bootloaderUpdateCommand+0x154>)
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	4930      	ldr	r1, [pc, #192]	; (80076dc <bootloaderUpdateCommand+0x164>)
 800761c:	0020      	movs	r0, r4
 800761e:	f00e f82d 	bl	801567c <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007622:	4b2f      	ldr	r3, [pc, #188]	; (80076e0 <bootloaderUpdateCommand+0x168>)
 8007624:	6819      	ldr	r1, [r3, #0]
 8007626:	0020      	movs	r0, r4
 8007628:	f00e f848 	bl	80156bc <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800762c:	0020      	movs	r0, r4
 800762e:	f7f8 fd73 	bl	8000118 <strlen>
 8007632:	b282      	uxth	r2, r0
 8007634:	4b28      	ldr	r3, [pc, #160]	; (80076d8 <bootloaderUpdateCommand+0x160>)
 8007636:	7818      	ldrb	r0, [r3, #0]
 8007638:	2301      	movs	r3, #1
 800763a:	425b      	negs	r3, r3
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	3333      	adds	r3, #51	; 0x33
 8007640:	0021      	movs	r1, r4
 8007642:	f008 f8b1 	bl	800f7a8 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007646:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <bootloaderUpdateCommand+0x16c>)
 8007648:	4a27      	ldr	r2, [pc, #156]	; (80076e8 <bootloaderUpdateCommand+0x170>)
 800764a:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 800764c:	4b27      	ldr	r3, [pc, #156]	; (80076ec <bootloaderUpdateCommand+0x174>)
 800764e:	2201      	movs	r2, #1
 8007650:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007652:	200a      	movs	r0, #10
 8007654:	f008 f9dc 	bl	800fa10 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	4b24      	ldr	r3, [pc, #144]	; (80076f0 <bootloaderUpdateCommand+0x178>)
 800765e:	4a25      	ldr	r2, [pc, #148]	; (80076f4 <bootloaderUpdateCommand+0x17c>)
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	e7fd      	b.n	8007666 <bootloaderUpdateCommand+0xee>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800766a:	3001      	adds	r0, #1
 800766c:	f00d fb79 	bl	8014d62 <atol>
 8007670:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8007672:	2700      	movs	r7, #0
 8007674:	e7aa      	b.n	80075cc <bootloaderUpdateCommand+0x54>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007676:	3001      	adds	r0, #1
 8007678:	f00d fb73 	bl	8014d62 <atol>
 800767c:	b2c5      	uxtb	r5, r0
 800767e:	e7ac      	b.n	80075da <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007680:	2100      	movs	r1, #0
 8007682:	9100      	str	r1, [sp, #0]
 8007684:	2319      	movs	r3, #25
 8007686:	000a      	movs	r2, r1
 8007688:	0028      	movs	r0, r5
 800768a:	f002 f837 	bl	80096fc <SendMessageFromPort>
				osDelay(100);
 800768e:	2064      	movs	r0, #100	; 0x64
 8007690:	f008 f9be 	bl	800fa10 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007694:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <bootloaderUpdateCommand+0x154>)
 8007696:	7818      	ldrb	r0, [r3, #0]
 8007698:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <bootloaderUpdateCommand+0x160>)
 800769a:	781a      	ldrb	r2, [r3, #0]
 800769c:	002b      	movs	r3, r5
 800769e:	0001      	movs	r1, r0
 80076a0:	f7fc fcd0 	bl	8004044 <remoteBootloaderUpdate>
 80076a4:	e7b2      	b.n	800760c <bootloaderUpdateCommand+0x94>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80076a6:	220f      	movs	r2, #15
 80076a8:	4913      	ldr	r1, [pc, #76]	; (80076f8 <bootloaderUpdateCommand+0x180>)
 80076aa:	0020      	movs	r0, r4
 80076ac:	f00d fde3 	bl	8015276 <memcpy>
 80076b0:	e7ae      	b.n	8007610 <bootloaderUpdateCommand+0x98>
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	2000129c 	.word	0x2000129c
 80076b8:	0801a880 	.word	0x0801a880
 80076bc:	200012a8 	.word	0x200012a8
 80076c0:	20001280 	.word	0x20001280
 80076c4:	200012ac 	.word	0x200012ac
 80076c8:	20001288 	.word	0x20001288
 80076cc:	20001066 	.word	0x20001066
 80076d0:	20006da0 	.word	0x20006da0
 80076d4:	20000f28 	.word	0x20000f28
 80076d8:	20000a9f 	.word	0x20000a9f
 80076dc:	0801a860 	.word	0x0801a860
 80076e0:	20000074 	.word	0x20000074
 80076e4:	20007ff0 	.word	0x20007ff0
 80076e8:	deadbeef 	.word	0xdeadbeef
 80076ec:	20000ee4 	.word	0x20000ee4
 80076f0:	e000ed00 	.word	0xe000ed00
 80076f4:	05fa0004 	.word	0x05fa0004
 80076f8:	0801a940 	.word	0x0801a940

080076fc <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80076fc:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 80076fe:	2800      	cmp	r0, #0
 8007700:	d01e      	beq.n	8007740 <pingCommand+0x44>
	if(!moduleAlias[myID][0])
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <pingCommand+0x5c>)
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	0093      	lsls	r3, r2, #2
 8007708:	189b      	adds	r3, r3, r2
 800770a:	0059      	lsls	r1, r3, #1
 800770c:	4b13      	ldr	r3, [pc, #76]	; (800775c <pingCommand+0x60>)
 800770e:	5ccb      	ldrb	r3, [r1, r3]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d117      	bne.n	8007744 <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007714:	4912      	ldr	r1, [pc, #72]	; (8007760 <pingCommand+0x64>)
 8007716:	f00d ffb1 	bl	801567c <sprintf>
	RTOS_IND_blink(200);
 800771a:	2580      	movs	r5, #128	; 0x80
 800771c:	012d      	lsls	r5, r5, #4
 800771e:	2490      	movs	r4, #144	; 0x90
 8007720:	05e4      	lsls	r4, r4, #23
 8007722:	2201      	movs	r2, #1
 8007724:	0029      	movs	r1, r5
 8007726:	0020      	movs	r0, r4
 8007728:	f00b fdf3 	bl	8013312 <HAL_GPIO_WritePin>
 800772c:	20c8      	movs	r0, #200	; 0xc8
 800772e:	f008 f96f 	bl	800fa10 <osDelay>
 8007732:	2200      	movs	r2, #0
 8007734:	0029      	movs	r1, r5
 8007736:	0020      	movs	r0, r4
 8007738:	f00b fdeb 	bl	8013312 <HAL_GPIO_WritePin>
}
 800773c:	2000      	movs	r0, #0
 800773e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8007740:	b672      	cpsid	i
 8007742:	e7fe      	b.n	8007742 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8007744:	0091      	lsls	r1, r2, #2
 8007746:	1889      	adds	r1, r1, r2
 8007748:	004b      	lsls	r3, r1, #1
 800774a:	4904      	ldr	r1, [pc, #16]	; (800775c <pingCommand+0x60>)
 800774c:	185b      	adds	r3, r3, r1
 800774e:	4905      	ldr	r1, [pc, #20]	; (8007764 <pingCommand+0x68>)
 8007750:	f00d ff94 	bl	801567c <sprintf>
 8007754:	e7e1      	b.n	800771a <pingCommand+0x1e>
 8007756:	46c0      	nop			; (mov r8, r8)
 8007758:	20001066 	.word	0x20001066
 800775c:	20000f58 	.word	0x20000f58
 8007760:	0801ae30 	.word	0x0801ae30
 8007764:	0801ae44 	.word	0x0801ae44

08007768 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007768:	b510      	push	{r4, lr}
 800776a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800776c:	d101      	bne.n	8007772 <prvRunTimeStatsCommand+0xa>
 800776e:	b672      	cpsid	i
 8007770:	e7fe      	b.n	8007770 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007772:	2241      	movs	r2, #65	; 0x41
 8007774:	4904      	ldr	r1, [pc, #16]	; (8007788 <prvRunTimeStatsCommand+0x20>)
 8007776:	f00d fd7e 	bl	8015276 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800777a:	0020      	movs	r0, r4
 800777c:	3040      	adds	r0, #64	; 0x40
 800777e:	f009 fcd9 	bl	8011134 <vTaskGetRunTimeStats>
}
 8007782:	2000      	movs	r0, #0
 8007784:	bd10      	pop	{r4, pc}
 8007786:	46c0      	nop			; (mov r8, r8)
 8007788:	0801ae70 	.word	0x0801ae70

0800778c <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800778c:	b510      	push	{r4, lr}
 800778e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007790:	d101      	bne.n	8007796 <prvTaskStatsCommand+0xa>
 8007792:	b672      	cpsid	i
 8007794:	e7fe      	b.n	8007794 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007796:	2250      	movs	r2, #80	; 0x50
 8007798:	4904      	ldr	r1, [pc, #16]	; (80077ac <prvTaskStatsCommand+0x20>)
 800779a:	f00d fd6c 	bl	8015276 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800779e:	0020      	movs	r0, r4
 80077a0:	304f      	adds	r0, #79	; 0x4f
 80077a2:	f009 fc6d 	bl	8011080 <vTaskList>
}
 80077a6:	2000      	movs	r0, #0
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	0801aec4 	.word	0x0801aec4

080077b0 <resetCommand>:
	configASSERT(pcWriteBuffer);
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d101      	bne.n	80077b8 <resetCommand+0x8>
 80077b4:	b672      	cpsid	i
 80077b6:	e7fe      	b.n	80077b6 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	4b03      	ldr	r3, [pc, #12]	; (80077cc <resetCommand+0x1c>)
 80077be:	4a04      	ldr	r2, [pc, #16]	; (80077d0 <resetCommand+0x20>)
 80077c0:	60da      	str	r2, [r3, #12]
 80077c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	e7fd      	b.n	80077c6 <resetCommand+0x16>
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	e000ed00 	.word	0xe000ed00
 80077d0:	05fa0004 	.word	0x05fa0004

080077d4 <RegisterUserCLICommands>:
}
 80077d4:	4770      	bx	lr
	...

080077d8 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80077d8:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80077da:	4835      	ldr	r0, [pc, #212]	; (80078b0 <vRegisterCLICommands+0xd8>)
 80077dc:	f008 f9b8 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80077e0:	4834      	ldr	r0, [pc, #208]	; (80078b4 <vRegisterCLICommands+0xdc>)
 80077e2:	f008 f9b5 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80077e6:	4834      	ldr	r0, [pc, #208]	; (80078b8 <vRegisterCLICommands+0xe0>)
 80077e8:	f008 f9b2 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80077ec:	4833      	ldr	r0, [pc, #204]	; (80078bc <vRegisterCLICommands+0xe4>)
 80077ee:	f008 f9af 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80077f2:	4833      	ldr	r0, [pc, #204]	; (80078c0 <vRegisterCLICommands+0xe8>)
 80077f4:	f008 f9ac 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80077f8:	4832      	ldr	r0, [pc, #200]	; (80078c4 <vRegisterCLICommands+0xec>)
 80077fa:	f008 f9a9 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80077fe:	4832      	ldr	r0, [pc, #200]	; (80078c8 <vRegisterCLICommands+0xf0>)
 8007800:	f008 f9a6 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007804:	4831      	ldr	r0, [pc, #196]	; (80078cc <vRegisterCLICommands+0xf4>)
 8007806:	f008 f9a3 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 800780a:	4831      	ldr	r0, [pc, #196]	; (80078d0 <vRegisterCLICommands+0xf8>)
 800780c:	f008 f9a0 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007810:	4830      	ldr	r0, [pc, #192]	; (80078d4 <vRegisterCLICommands+0xfc>)
 8007812:	f008 f99d 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007816:	4830      	ldr	r0, [pc, #192]	; (80078d8 <vRegisterCLICommands+0x100>)
 8007818:	f008 f99a 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 800781c:	482f      	ldr	r0, [pc, #188]	; (80078dc <vRegisterCLICommands+0x104>)
 800781e:	f008 f997 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007822:	482f      	ldr	r0, [pc, #188]	; (80078e0 <vRegisterCLICommands+0x108>)
 8007824:	f008 f994 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007828:	482e      	ldr	r0, [pc, #184]	; (80078e4 <vRegisterCLICommands+0x10c>)
 800782a:	f008 f991 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 800782e:	482e      	ldr	r0, [pc, #184]	; (80078e8 <vRegisterCLICommands+0x110>)
 8007830:	f008 f98e 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007834:	482d      	ldr	r0, [pc, #180]	; (80078ec <vRegisterCLICommands+0x114>)
 8007836:	f008 f98b 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800783a:	482d      	ldr	r0, [pc, #180]	; (80078f0 <vRegisterCLICommands+0x118>)
 800783c:	f008 f988 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007840:	482c      	ldr	r0, [pc, #176]	; (80078f4 <vRegisterCLICommands+0x11c>)
 8007842:	f008 f985 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007846:	482c      	ldr	r0, [pc, #176]	; (80078f8 <vRegisterCLICommands+0x120>)
 8007848:	f008 f982 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 800784c:	482b      	ldr	r0, [pc, #172]	; (80078fc <vRegisterCLICommands+0x124>)
 800784e:	f008 f97f 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007852:	482b      	ldr	r0, [pc, #172]	; (8007900 <vRegisterCLICommands+0x128>)
 8007854:	f008 f97c 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8007858:	482a      	ldr	r0, [pc, #168]	; (8007904 <vRegisterCLICommands+0x12c>)
 800785a:	f008 f979 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 800785e:	482a      	ldr	r0, [pc, #168]	; (8007908 <vRegisterCLICommands+0x130>)
 8007860:	f008 f976 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007864:	4829      	ldr	r0, [pc, #164]	; (800790c <vRegisterCLICommands+0x134>)
 8007866:	f008 f973 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800786a:	4829      	ldr	r0, [pc, #164]	; (8007910 <vRegisterCLICommands+0x138>)
 800786c:	f008 f970 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007870:	4828      	ldr	r0, [pc, #160]	; (8007914 <vRegisterCLICommands+0x13c>)
 8007872:	f008 f96d 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007876:	4828      	ldr	r0, [pc, #160]	; (8007918 <vRegisterCLICommands+0x140>)
 8007878:	f008 f96a 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800787c:	4827      	ldr	r0, [pc, #156]	; (800791c <vRegisterCLICommands+0x144>)
 800787e:	f008 f967 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007882:	4827      	ldr	r0, [pc, #156]	; (8007920 <vRegisterCLICommands+0x148>)
 8007884:	f008 f964 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007888:	4826      	ldr	r0, [pc, #152]	; (8007924 <vRegisterCLICommands+0x14c>)
 800788a:	f008 f961 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 800788e:	4826      	ldr	r0, [pc, #152]	; (8007928 <vRegisterCLICommands+0x150>)
 8007890:	f008 f95e 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007894:	4825      	ldr	r0, [pc, #148]	; (800792c <vRegisterCLICommands+0x154>)
 8007896:	f008 f95b 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800789a:	4825      	ldr	r0, [pc, #148]	; (8007930 <vRegisterCLICommands+0x158>)
 800789c:	f008 f958 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80078a0:	4b24      	ldr	r3, [pc, #144]	; (8007934 <vRegisterCLICommands+0x15c>)
 80078a2:	2223      	movs	r2, #35	; 0x23
 80078a4:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80078a6:	f004 fb45 	bl	800bf34 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80078aa:	f7ff ff93 	bl	80077d4 <RegisterUserCLICommands>
}
 80078ae:	bd10      	pop	{r4, pc}
 80078b0:	0801af14 	.word	0x0801af14
 80078b4:	0801aeb4 	.word	0x0801aeb4
 80078b8:	0801ae60 	.word	0x0801ae60
 80078bc:	0801a884 	.word	0x0801a884
 80078c0:	0801aa0c 	.word	0x0801aa0c
 80078c4:	0801af5c 	.word	0x0801af5c
 80078c8:	0801add8 	.word	0x0801add8
 80078cc:	0801ac98 	.word	0x0801ac98
 80078d0:	0801b40c 	.word	0x0801b40c
 80078d4:	0801ad9c 	.word	0x0801ad9c
 80078d8:	0801b018 	.word	0x0801b018
 80078dc:	0801a850 	.word	0x0801a850
 80078e0:	0801af4c 	.word	0x0801af4c
 80078e4:	0801b26c 	.word	0x0801b26c
 80078e8:	0801ab38 	.word	0x0801ab38
 80078ec:	0801a990 	.word	0x0801a990
 80078f0:	0801c42c 	.word	0x0801c42c
 80078f4:	0801a8f8 	.word	0x0801a8f8
 80078f8:	0801b064 	.word	0x0801b064
 80078fc:	0801c4a0 	.word	0x0801c4a0
 8007900:	0801ad18 	.word	0x0801ad18
 8007904:	0801aa3c 	.word	0x0801aa3c
 8007908:	0801b3fc 	.word	0x0801b3fc
 800790c:	0801a7d4 	.word	0x0801a7d4
 8007910:	0801ae20 	.word	0x0801ae20
 8007914:	0801a9fc 	.word	0x0801a9fc
 8007918:	0801a8d0 	.word	0x0801a8d0
 800791c:	0801c478 	.word	0x0801c478
 8007920:	0801c3c0 	.word	0x0801c3c0
 8007924:	0801a6d4 	.word	0x0801a6d4
 8007928:	0801a754 	.word	0x0801a754
 800792c:	0801a78c 	.word	0x0801a78c
 8007930:	0801a6e4 	.word	0x0801a6e4
 8007934:	20006d24 	.word	0x20006d24

08007938 <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 8007938:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800793a:	1e45      	subs	r5, r0, #1
 800793c:	00ec      	lsls	r4, r5, #3
 800793e:	1b63      	subs	r3, r4, r5
 8007940:	00d8      	lsls	r0, r3, #3
 8007942:	4e05      	ldr	r6, [pc, #20]	; (8007958 <StopMsgDMA+0x20>)
 8007944:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8007946:	f00a fe0c 	bl	8012562 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800794a:	1b64      	subs	r4, r4, r5
 800794c:	00e3      	lsls	r3, r4, #3
 800794e:	599b      	ldr	r3, [r3, r6]
 8007950:	2200      	movs	r2, #0
 8007952:	605a      	str	r2, [r3, #4]
}
 8007954:	bd70      	pop	{r4, r5, r6, pc}
 8007956:	46c0      	nop			; (mov r8, r8)
 8007958:	20001b78 	.word	0x20001b78

0800795c <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 800795c:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 800795e:	1e44      	subs	r4, r0, #1
 8007960:	00e5      	lsls	r5, r4, #3
 8007962:	1b2b      	subs	r3, r5, r4
 8007964:	00d8      	lsls	r0, r3, #3
 8007966:	4e07      	ldr	r6, [pc, #28]	; (8007984 <StopStreamDMA+0x28>)
 8007968:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800796a:	f00a fdfa 	bl	8012562 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800796e:	1b2d      	subs	r5, r5, r4
 8007970:	00eb      	lsls	r3, r5, #3
 8007972:	599a      	ldr	r2, [r3, r6]
 8007974:	2300      	movs	r3, #0
 8007976:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007978:	00a4      	lsls	r4, r4, #2
 800797a:	4a03      	ldr	r2, [pc, #12]	; (8007988 <StopStreamDMA+0x2c>)
 800797c:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 800797e:	4a03      	ldr	r2, [pc, #12]	; (800798c <StopStreamDMA+0x30>)
 8007980:	50a3      	str	r3, [r4, r2]
	
}
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	20001d70 	.word	0x20001d70
 8007988:	20001438 	.word	0x20001438
 800798c:	20001460 	.word	0x20001460

08007990 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 8007990:	b510      	push	{r4, lr}
 8007992:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007994:	f7ff ffd0 	bl	8007938 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 8007998:	3c01      	subs	r4, #1
 800799a:	00e3      	lsls	r3, r4, #3
 800799c:	1b19      	subs	r1, r3, r4
 800799e:	00ca      	lsls	r2, r1, #3
 80079a0:	4903      	ldr	r1, [pc, #12]	; (80079b0 <SwitchMsgDMAToStream+0x20>)
 80079a2:	5851      	ldr	r1, [r2, r1]
 80079a4:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <SwitchMsgDMAToStream+0x24>)
 80079a6:	18d0      	adds	r0, r2, r3
 80079a8:	f005 ff40 	bl	800d82c <DMA_STREAM_CH_Init>
}
 80079ac:	bd10      	pop	{r4, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	20001b78 	.word	0x20001b78
 80079b4:	20001d70 	.word	0x20001d70

080079b8 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 80079b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ba:	b083      	sub	sp, #12
 80079bc:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 80079be:	f7ff ffcd 	bl	800795c <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 80079c2:	9401      	str	r4, [sp, #4]
 80079c4:	3c01      	subs	r4, #1
 80079c6:	00e7      	lsls	r7, r4, #3
 80079c8:	1b3b      	subs	r3, r7, r4
 80079ca:	00dd      	lsls	r5, r3, #3
 80079cc:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <SwitchStreamDMAToMsg+0x54>)
 80079ce:	18ed      	adds	r5, r5, r3
 80079d0:	4e0f      	ldr	r6, [pc, #60]	; (8007a10 <SwitchStreamDMAToMsg+0x58>)
 80079d2:	1b3a      	subs	r2, r7, r4
 80079d4:	00d3      	lsls	r3, r2, #3
 80079d6:	5999      	ldr	r1, [r3, r6]
 80079d8:	0028      	movs	r0, r5
 80079da:	f005 feb1 	bl	800d740 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 80079de:	1b3a      	subs	r2, r7, r4
 80079e0:	00d3      	lsls	r3, r2, #3
 80079e2:	18f3      	adds	r3, r6, r3
 80079e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80079e6:	f004 fadf 	bl	800bfa8 <GetPort>
 80079ea:	2300      	movs	r3, #0
 80079ec:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <SwitchStreamDMAToMsg+0x5c>)
 80079ee:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 80079f0:	1b3f      	subs	r7, r7, r4
 80079f2:	00fa      	lsls	r2, r7, #3
 80079f4:	5193      	str	r3, [r2, r6]
	dmaStreamDst[port - 1] =0;
 80079f6:	00a4      	lsls	r4, r4, #2
 80079f8:	4a07      	ldr	r2, [pc, #28]	; (8007a18 <SwitchStreamDMAToMsg+0x60>)
 80079fa:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 80079fc:	9801      	ldr	r0, [sp, #4]
 80079fe:	f007 feb5 	bl	800f76c <GetUart>
 8007a02:	0029      	movs	r1, r5
 8007a04:	f006 fc0c 	bl	800e220 <DMA_MSG_RX_Setup>
	
}
 8007a08:	b003      	add	sp, #12
 8007a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a0c:	20001b78 	.word	0x20001b78
 8007a10:	20001d70 	.word	0x20001d70
 8007a14:	200010e0 	.word	0x200010e0
 8007a18:	2000144c 	.word	0x2000144c

08007a1c <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	0005      	movs	r5, r0
 8007a20:	000e      	movs	r6, r1
 8007a22:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007a24:	f004 fac0 	bl	800bfa8 <GetPort>
 8007a28:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007a2a:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <StartDMAstream+0x48>)
 8007a2c:	5c1b      	ldrb	r3, [r3, r0]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d901      	bls.n	8007a36 <StartDMAstream+0x1a>
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d113      	bne.n	8007a5e <StartDMAstream+0x42>
	{
		SwitchMsgDMAToStream(srcPort);
 8007a36:	0020      	movs	r0, r4
 8007a38:	f7ff ffaa 	bl	8007990 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007a3c:	1e63      	subs	r3, r4, #1
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4a09      	ldr	r2, [pc, #36]	; (8007a68 <StartDMAstream+0x4c>)
 8007a42:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 8007a44:	4a07      	ldr	r2, [pc, #28]	; (8007a64 <StartDMAstream+0x48>)
 8007a46:	2102      	movs	r1, #2
 8007a48:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007a4a:	4a08      	ldr	r2, [pc, #32]	; (8007a6c <StartDMAstream+0x50>)
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007a50:	003a      	movs	r2, r7
 8007a52:	0031      	movs	r1, r6
 8007a54:	0028      	movs	r0, r5
 8007a56:	f006 fc41 	bl	800e2dc <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007a5a:	2000      	movs	r0, #0
}
 8007a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007a5e:	2017      	movs	r0, #23
 8007a60:	e7fc      	b.n	8007a5c <StartDMAstream+0x40>
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	200010e0 	.word	0x200010e0
 8007a68:	2000144c 	.word	0x2000144c
 8007a6c:	20001438 	.word	0x20001438

08007a70 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007a74:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <DMA_IRQHandler+0x54>)
 8007a76:	5c1b      	ldrb	r3, [r3, r0]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d008      	beq.n	8007a8e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007a7c:	3c01      	subs	r4, #1
 8007a7e:	00e3      	lsls	r3, r4, #3
 8007a80:	1b1c      	subs	r4, r3, r4
 8007a82:	00e0      	lsls	r0, r4, #3
 8007a84:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <DMA_IRQHandler+0x58>)
 8007a86:	18c0      	adds	r0, r0, r3
 8007a88:	f00a fd94 	bl	80125b4 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007a8e:	1e45      	subs	r5, r0, #1
 8007a90:	00eb      	lsls	r3, r5, #3
 8007a92:	1b5b      	subs	r3, r3, r5
 8007a94:	00d8      	lsls	r0, r3, #3
 8007a96:	4b0d      	ldr	r3, [pc, #52]	; (8007acc <DMA_IRQHandler+0x5c>)
 8007a98:	18c0      	adds	r0, r0, r3
 8007a9a:	f00a fd8b 	bl	80125b4 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007a9e:	00aa      	lsls	r2, r5, #2
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <DMA_IRQHandler+0x60>)
 8007aa2:	58d3      	ldr	r3, [r2, r3]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d004      	beq.n	8007ab2 <DMA_IRQHandler+0x42>
			++dmaStreamCount[port - 1];
 8007aa8:	490a      	ldr	r1, [pc, #40]	; (8007ad4 <DMA_IRQHandler+0x64>)
 8007aaa:	0010      	movs	r0, r2
 8007aac:	5852      	ldr	r2, [r2, r1]
 8007aae:	3201      	adds	r2, #1
 8007ab0:	5042      	str	r2, [r0, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 8007ab2:	00ad      	lsls	r5, r5, #2
 8007ab4:	4a07      	ldr	r2, [pc, #28]	; (8007ad4 <DMA_IRQHandler+0x64>)
 8007ab6:	58aa      	ldr	r2, [r5, r2]
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d8e7      	bhi.n	8007a8c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007abc:	0020      	movs	r0, r4
 8007abe:	f7ff ff4d 	bl	800795c <StopStreamDMA>
}
 8007ac2:	e7e3      	b.n	8007a8c <DMA_IRQHandler+0x1c>
 8007ac4:	200010e0 	.word	0x200010e0
 8007ac8:	20001b78 	.word	0x20001b78
 8007acc:	20001d70 	.word	0x20001d70
 8007ad0:	20001460 	.word	0x20001460
 8007ad4:	20001438 	.word	0x20001438

08007ad8 <ResetUartORE>:
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007ad8:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <ResetUartORE+0x1c>)
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	2308      	movs	r3, #8
 8007ade:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007ae0:	4a05      	ldr	r2, [pc, #20]	; (8007af8 <ResetUartORE+0x20>)
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007ae6:	4a05      	ldr	r2, [pc, #20]	; (8007afc <ResetUartORE+0x24>)
 8007ae8:	6812      	ldr	r2, [r2, #0]
 8007aea:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007aec:	4a04      	ldr	r2, [pc, #16]	; (8007b00 <ResetUartORE+0x28>)
 8007aee:	6812      	ldr	r2, [r2, #0]
 8007af0:	6213      	str	r3, [r2, #32]
#endif
}
 8007af2:	4770      	bx	lr
 8007af4:	20007104 	.word	0x20007104
 8007af8:	20006ec4 	.word	0x20006ec4
 8007afc:	20006f38 	.word	0x20006f38
 8007b00:	20007020 	.word	0x20007020

08007b04 <EE_FindValidPage>:
 */
static uint16_t EE_FindValidPage(uint8_t Operation){
	uint16_t PageStatusA =6, PageStatusB =6;
	
	/* Get PageA actual status */
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007b04:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <EE_FindValidPage+0x50>)
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
	
	/* Get PageB actual status */
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007b0a:	4a13      	ldr	r2, [pc, #76]	; (8007b58 <EE_FindValidPage+0x54>)
 8007b0c:	8812      	ldrh	r2, [r2, #0]
 8007b0e:	b292      	uxth	r2, r2
	
	/* Write or read operation */
	switch(Operation){
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d00f      	beq.n	8007b34 <EE_FindValidPage+0x30>
 8007b14:	2801      	cmp	r0, #1
 8007b16:	d113      	bne.n	8007b40 <EE_FindValidPage+0x3c>
		case WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
			if(PageStatusB == VALID_PAGE){
 8007b18:	2a00      	cmp	r2, #0
 8007b1a:	d104      	bne.n	8007b26 <EE_FindValidPage+0x22>
				/* PageA receiving data */
				if(PageStatusA == RECEIVE_DATA){
 8007b1c:	490f      	ldr	r1, [pc, #60]	; (8007b5c <EE_FindValidPage+0x58>)
 8007b1e:	428b      	cmp	r3, r1
 8007b20:	d111      	bne.n	8007b46 <EE_FindValidPage+0x42>
					return PAGEA; /* PageA valid */
 8007b22:	0013      	movs	r3, r2
 8007b24:	e00d      	b.n	8007b42 <EE_FindValidPage+0x3e>
				}
				else{
					return PAGEB; /* PageB valid */
				}
			}
			else if(PageStatusA == VALID_PAGE){
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10f      	bne.n	8007b4a <EE_FindValidPage+0x46>
				/* PageB receiving data */
				if(PageStatusB == RECEIVE_DATA){
 8007b2a:	490c      	ldr	r1, [pc, #48]	; (8007b5c <EE_FindValidPage+0x58>)
 8007b2c:	428a      	cmp	r2, r1
 8007b2e:	d108      	bne.n	8007b42 <EE_FindValidPage+0x3e>
					return PAGEB; /* PageB valid */
 8007b30:	3302      	adds	r3, #2
 8007b32:	e006      	b.n	8007b42 <EE_FindValidPage+0x3e>
			else{
				return NO_VALID_PAGE; /* No valid Page */
			}
			
		case READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
			if(PageStatusA == VALID_PAGE){
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <EE_FindValidPage+0x3e>
				return PAGEA; /* PageA valid */
			}
			else if(PageStatusB == VALID_PAGE){
 8007b38:	2a00      	cmp	r2, #0
 8007b3a:	d108      	bne.n	8007b4e <EE_FindValidPage+0x4a>
				return PAGEB; /* PageB valid */
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e000      	b.n	8007b42 <EE_FindValidPage+0x3e>
			else{
				return NO_VALID_PAGE; /* No valid Page */
			}
			
		default:
			return PAGEA; /* PageA valid */
 8007b40:	2300      	movs	r3, #0
	}
}
 8007b42:	0018      	movs	r0, r3
 8007b44:	4770      	bx	lr
					return PAGEB; /* PageB valid */
 8007b46:	2302      	movs	r3, #2
 8007b48:	e7fb      	b.n	8007b42 <EE_FindValidPage+0x3e>
				return NO_VALID_PAGE; /* No valid Page */
 8007b4a:	23ab      	movs	r3, #171	; 0xab
 8007b4c:	e7f9      	b.n	8007b42 <EE_FindValidPage+0x3e>
				return NO_VALID_PAGE; /* No valid Page */
 8007b4e:	23ab      	movs	r3, #171	; 0xab
 8007b50:	e7f7      	b.n	8007b42 <EE_FindValidPage+0x3e>
 8007b52:	46c0      	nop			; (mov r8, r8)
 8007b54:	0801e000 	.word	0x0801e000
 8007b58:	0801f000 	.word	0x0801f000
 8007b5c:	0000eeee 	.word	0x0000eeee

08007b60 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	0005      	movs	r5, r0
 8007b64:	000e      	movs	r6, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 8007b66:	f00b f971 	bl	8012e4c <HAL_FLASH_Unlock>
	
	/* Get valid Page for write operation */
	ValidPage =EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8007b6a:	2001      	movs	r0, #1
 8007b6c:	f7ff ffca 	bl	8007b04 <EE_FindValidPage>
 8007b70:	0003      	movs	r3, r0
	
	/* Check if there is no valid page */
	if(ValidPage == NO_VALID_PAGE){
 8007b72:	28ab      	cmp	r0, #171	; 0xab
 8007b74:	d03d      	beq.n	8007bf2 <EE_VerifyPageFullWriteVariable+0x92>
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 8007b76:	4b20      	ldr	r3, [pc, #128]	; (8007bf8 <EE_VerifyPageFullWriteVariable+0x98>)
 8007b78:	18c4      	adds	r4, r0, r3
 8007b7a:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 8007b7c:	3002      	adds	r0, #2
 8007b7e:	02c0      	lsls	r0, r0, #11
 8007b80:	4b1e      	ldr	r3, [pc, #120]	; (8007bfc <EE_VerifyPageFullWriteVariable+0x9c>)
 8007b82:	469c      	mov	ip, r3
 8007b84:	4460      	add	r0, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
 8007b86:	4284      	cmp	r4, r0
 8007b88:	d230      	bcs.n	8007bec <EE_VerifyPageFullWriteVariable+0x8c>
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	d001      	beq.n	8007b94 <EE_VerifyPageFullWriteVariable+0x34>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 8007b90:	3404      	adds	r4, #4
 8007b92:	e7f8      	b.n	8007b86 <EE_VerifyPageFullWriteVariable+0x26>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 8007b94:	0032      	movs	r2, r6
 8007b96:	2300      	movs	r3, #0
 8007b98:	0021      	movs	r1, r4
 8007b9a:	2001      	movs	r0, #1
 8007b9c:	f00b f9a2 	bl	8012ee4 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ba0:	4817      	ldr	r0, [pc, #92]	; (8007c00 <EE_VerifyPageFullWriteVariable+0xa0>)
 8007ba2:	f00b f971 	bl	8012e88 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d003      	beq.n	8007bb2 <EE_VerifyPageFullWriteVariable+0x52>
				return pFlash.ErrorCode;
 8007baa:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	e01f      	b.n	8007bf2 <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bb2:	4a15      	ldr	r2, [pc, #84]	; (8007c08 <EE_VerifyPageFullWriteVariable+0xa8>)
 8007bb4:	6913      	ldr	r3, [r2, #16]
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	438b      	bics	r3, r1
 8007bba:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007bbc:	1ca1      	adds	r1, r4, #2
 8007bbe:	002a      	movs	r2, r5
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	f00b f98e 	bl	8012ee4 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bc8:	480d      	ldr	r0, [pc, #52]	; (8007c00 <EE_VerifyPageFullWriteVariable+0xa0>)
 8007bca:	f00b f95d 	bl	8012e88 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d003      	beq.n	8007bda <EE_VerifyPageFullWriteVariable+0x7a>
				return pFlash.ErrorCode;
 8007bd2:	4b0c      	ldr	r3, [pc, #48]	; (8007c04 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	e00b      	b.n	8007bf2 <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bda:	4a0b      	ldr	r2, [pc, #44]	; (8007c08 <EE_VerifyPageFullWriteVariable+0xa8>)
 8007bdc:	6913      	ldr	r3, [r2, #16]
 8007bde:	2101      	movs	r1, #1
 8007be0:	438b      	bics	r3, r1
 8007be2:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 8007be4:	4b07      	ldr	r3, [pc, #28]	; (8007c04 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	e002      	b.n	8007bf2 <EE_VerifyPageFullWriteVariable+0x92>
		}
	}
	
	HAL_FLASH_Lock();
 8007bec:	f00b f942 	bl	8012e74 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8007bf0:	2380      	movs	r3, #128	; 0x80
}
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	bd70      	pop	{r4, r5, r6, pc}
 8007bf6:	46c0      	nop			; (mov r8, r8)
 8007bf8:	0001003c 	.word	0x0001003c
 8007bfc:	0801dffe 	.word	0x0801dffe
 8007c00:	0000c350 	.word	0x0000c350
 8007c04:	200072b0 	.word	0x200072b0
 8007c08:	40022000 	.word	0x40022000

08007c0c <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	0005      	movs	r5, r0
 8007c10:	000c      	movs	r4, r1
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 8007c12:	2000      	movs	r0, #0
 8007c14:	f7ff ff76 	bl	8007b04 <EE_FindValidPage>
 8007c18:	0003      	movs	r3, r0
	if(ValidPage == NO_VALID_PAGE){
 8007c1a:	28ab      	cmp	r0, #171	; 0xab
 8007c1c:	d016      	beq.n	8007c4c <EE_ReadVariable+0x40>
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 8007c1e:	4b0c      	ldr	r3, [pc, #48]	; (8007c50 <EE_ReadVariable+0x44>)
 8007c20:	18c2      	adds	r2, r0, r3
 8007c22:	02d2      	lsls	r2, r2, #11
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 8007c24:	3002      	adds	r0, #2
 8007c26:	02c0      	lsls	r0, r0, #11
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <EE_ReadVariable+0x48>)
 8007c2a:	469c      	mov	ip, r3
 8007c2c:	4460      	add	r0, ip
	while(Address > (PageStartAddress + 2)){
 8007c2e:	1c93      	adds	r3, r2, #2
 8007c30:	4283      	cmp	r3, r0
 8007c32:	d20a      	bcs.n	8007c4a <EE_ReadVariable+0x3e>
		AddressValue =(*(__IO uint16_t* )Address);
 8007c34:	8803      	ldrh	r3, [r0, #0]
 8007c36:	b29b      	uxth	r3, r3
		if(AddressValue == VirtAddress){
 8007c38:	42ab      	cmp	r3, r5
 8007c3a:	d001      	beq.n	8007c40 <EE_ReadVariable+0x34>
			Address =Address - 4;
 8007c3c:	3804      	subs	r0, #4
 8007c3e:	e7f6      	b.n	8007c2e <EE_ReadVariable+0x22>
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007c40:	3802      	subs	r0, #2
 8007c42:	8803      	ldrh	r3, [r0, #0]
 8007c44:	8023      	strh	r3, [r4, #0]
			ReadStatus =0;
 8007c46:	2300      	movs	r3, #0
			break;
 8007c48:	e000      	b.n	8007c4c <EE_ReadVariable+0x40>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 8007c4a:	2301      	movs	r3, #1
}
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	0001003c 	.word	0x0001003c
 8007c54:	0801dffe 	.word	0x0801dffe

08007c58 <EE_PageTransfer>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_PageTransfer(uint16_t VirtAddress,uint16_t Data){
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	0006      	movs	r6, r0
 8007c5c:	000c      	movs	r4, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007c5e:	f00b f8f5 	bl	8012e4c <HAL_FLASH_Unlock>
	
	/* Get active Page for read operation */
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 8007c62:	2000      	movs	r0, #0
 8007c64:	f7ff ff4e 	bl	8007b04 <EE_FindValidPage>
	
	if(ValidPage == PAGEB) /* PageB valid */
 8007c68:	2802      	cmp	r0, #2
 8007c6a:	d013      	beq.n	8007c94 <EE_PageTransfer+0x3c>
		NewPageAddress = PAGEA1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEB1_BASE_ADDRESS;
	}
	else if(ValidPage == PAGEA) /* PageA valid */
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d000      	beq.n	8007c72 <EE_PageTransfer+0x1a>
 8007c70:	e06d      	b.n	8007d4e <EE_PageTransfer+0xf6>
	{
		/* New page address where variable will be moved to */
		NewPageAddress = PAGEB1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007c72:	4f38      	ldr	r7, [pc, #224]	; (8007d54 <EE_PageTransfer+0xfc>)
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007c74:	4d38      	ldr	r5, [pc, #224]	; (8007d58 <EE_PageTransfer+0x100>)
	else{
		return NO_VALID_PAGE; /* No valid Page */
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 8007c76:	4a39      	ldr	r2, [pc, #228]	; (8007d5c <EE_PageTransfer+0x104>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	0029      	movs	r1, r5
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	f00b f931 	bl	8012ee4 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c82:	4837      	ldr	r0, [pc, #220]	; (8007d60 <EE_PageTransfer+0x108>)
 8007c84:	f00b f900 	bl	8012e88 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d006      	beq.n	8007c9a <EE_PageTransfer+0x42>
		return pFlash.ErrorCode;
 8007c8c:	4b35      	ldr	r3, [pc, #212]	; (8007d64 <EE_PageTransfer+0x10c>)
 8007c8e:	69d8      	ldr	r0, [r3, #28]
 8007c90:	b280      	uxth	r0, r0
	
	HAL_FLASH_Lock();
	
	/* Return last operation flash status */
	return FlashStatus;
}
 8007c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007c94:	4f30      	ldr	r7, [pc, #192]	; (8007d58 <EE_PageTransfer+0x100>)
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007c96:	4d2f      	ldr	r5, [pc, #188]	; (8007d54 <EE_PageTransfer+0xfc>)
 8007c98:	e7ed      	b.n	8007c76 <EE_PageTransfer+0x1e>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c9a:	4a33      	ldr	r2, [pc, #204]	; (8007d68 <EE_PageTransfer+0x110>)
 8007c9c:	6913      	ldr	r3, [r2, #16]
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	438b      	bics	r3, r1
 8007ca2:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007ca4:	0021      	movs	r1, r4
 8007ca6:	0030      	movs	r0, r6
 8007ca8:	f7ff ff5a 	bl	8007b60 <EE_VerifyPageFullWriteVariable>
	if(EepromStatus != HAL_OK){
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d1f0      	bne.n	8007c92 <EE_PageTransfer+0x3a>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007cb0:	2401      	movs	r4, #1
 8007cb2:	e001      	b.n	8007cb8 <EE_PageTransfer+0x60>
 8007cb4:	3401      	adds	r4, #1
 8007cb6:	b2a4      	uxth	r4, r4
 8007cb8:	2380      	movs	r3, #128	; 0x80
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	429c      	cmp	r4, r3
 8007cbe:	d80f      	bhi.n	8007ce0 <EE_PageTransfer+0x88>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007cc0:	42b4      	cmp	r4, r6
 8007cc2:	d0f7      	beq.n	8007cb4 <EE_PageTransfer+0x5c>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007cc4:	4929      	ldr	r1, [pc, #164]	; (8007d6c <EE_PageTransfer+0x114>)
 8007cc6:	0020      	movs	r0, r4
 8007cc8:	f7ff ffa0 	bl	8007c0c <EE_ReadVariable>
			if(ReadStatus != 0x1){
 8007ccc:	2801      	cmp	r0, #1
 8007cce:	d0f1      	beq.n	8007cb4 <EE_PageTransfer+0x5c>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007cd0:	4b26      	ldr	r3, [pc, #152]	; (8007d6c <EE_PageTransfer+0x114>)
 8007cd2:	8819      	ldrh	r1, [r3, #0]
 8007cd4:	0020      	movs	r0, r4
 8007cd6:	f7ff ff43 	bl	8007b60 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d0ea      	beq.n	8007cb4 <EE_PageTransfer+0x5c>
 8007cde:	e7d8      	b.n	8007c92 <EE_PageTransfer+0x3a>
	FLASH_PageErase(OldPageAddress);
 8007ce0:	0038      	movs	r0, r7
 8007ce2:	f00b f961 	bl	8012fa8 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ce6:	481e      	ldr	r0, [pc, #120]	; (8007d60 <EE_PageTransfer+0x108>)
 8007ce8:	f00b f8ce 	bl	8012e88 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d003      	beq.n	8007cf8 <EE_PageTransfer+0xa0>
		return pFlash.ErrorCode;
 8007cf0:	4b1c      	ldr	r3, [pc, #112]	; (8007d64 <EE_PageTransfer+0x10c>)
 8007cf2:	69d8      	ldr	r0, [r3, #28]
 8007cf4:	b280      	uxth	r0, r0
 8007cf6:	e7cc      	b.n	8007c92 <EE_PageTransfer+0x3a>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	18f8      	adds	r0, r7, r3
 8007cfe:	f00b f953 	bl	8012fa8 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d02:	4817      	ldr	r0, [pc, #92]	; (8007d60 <EE_PageTransfer+0x108>)
 8007d04:	f00b f8c0 	bl	8012e88 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d003      	beq.n	8007d14 <EE_PageTransfer+0xbc>
			return pFlash.ErrorCode;
 8007d0c:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <EE_PageTransfer+0x10c>)
 8007d0e:	69d8      	ldr	r0, [r3, #28]
 8007d10:	b280      	uxth	r0, r0
 8007d12:	e7be      	b.n	8007c92 <EE_PageTransfer+0x3a>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d14:	4a14      	ldr	r2, [pc, #80]	; (8007d68 <EE_PageTransfer+0x110>)
 8007d16:	6913      	ldr	r3, [r2, #16]
 8007d18:	2102      	movs	r1, #2
 8007d1a:	438b      	bics	r3, r1
 8007d1c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	0029      	movs	r1, r5
 8007d24:	2001      	movs	r0, #1
 8007d26:	f00b f8dd 	bl	8012ee4 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d2a:	480d      	ldr	r0, [pc, #52]	; (8007d60 <EE_PageTransfer+0x108>)
 8007d2c:	f00b f8ac 	bl	8012e88 <FLASH_WaitForLastOperation>
 8007d30:	1e04      	subs	r4, r0, #0
	if(FlashStatus != HAL_OK){
 8007d32:	d003      	beq.n	8007d3c <EE_PageTransfer+0xe4>
		return pFlash.ErrorCode;
 8007d34:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <EE_PageTransfer+0x10c>)
 8007d36:	69d8      	ldr	r0, [r3, #28]
 8007d38:	b280      	uxth	r0, r0
 8007d3a:	e7aa      	b.n	8007c92 <EE_PageTransfer+0x3a>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d3c:	4a0a      	ldr	r2, [pc, #40]	; (8007d68 <EE_PageTransfer+0x110>)
 8007d3e:	6913      	ldr	r3, [r2, #16]
 8007d40:	2101      	movs	r1, #1
 8007d42:	438b      	bics	r3, r1
 8007d44:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007d46:	f00b f895 	bl	8012e74 <HAL_FLASH_Lock>
	return FlashStatus;
 8007d4a:	b2a0      	uxth	r0, r4
 8007d4c:	e7a1      	b.n	8007c92 <EE_PageTransfer+0x3a>
		return NO_VALID_PAGE; /* No valid Page */
 8007d4e:	20ab      	movs	r0, #171	; 0xab
 8007d50:	e79f      	b.n	8007c92 <EE_PageTransfer+0x3a>
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	0801e000 	.word	0x0801e000
 8007d58:	0801f000 	.word	0x0801f000
 8007d5c:	0000eeee 	.word	0x0000eeee
 8007d60:	0000c350 	.word	0x0000c350
 8007d64:	200072b0 	.word	0x200072b0
 8007d68:	40022000 	.word	0x40022000
 8007d6c:	20001474 	.word	0x20001474

08007d70 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	0005      	movs	r5, r0
 8007d74:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007d76:	f00b f869 	bl	8012e4c <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007d7a:	0031      	movs	r1, r6
 8007d7c:	0028      	movs	r0, r5
 8007d7e:	f7ff feef 	bl	8007b60 <EE_VerifyPageFullWriteVariable>
 8007d82:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 8007d84:	2880      	cmp	r0, #128	; 0x80
 8007d86:	d003      	beq.n	8007d90 <EE_WriteVariable+0x20>
	HAL_FLASH_Lock();
 8007d88:	f00b f874 	bl	8012e74 <HAL_FLASH_Lock>
}
 8007d8c:	0020      	movs	r0, r4
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
		Status =EE_PageTransfer(VirtAddress,Data);
 8007d90:	0031      	movs	r1, r6
 8007d92:	0028      	movs	r0, r5
 8007d94:	f7ff ff60 	bl	8007c58 <EE_PageTransfer>
 8007d98:	0004      	movs	r4, r0
 8007d9a:	e7f5      	b.n	8007d88 <EE_WriteVariable+0x18>

08007d9c <EE_Format>:
uint16_t EE_Format(void){
 8007d9c:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007d9e:	f00b f855 	bl	8012e4c <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007da2:	4829      	ldr	r0, [pc, #164]	; (8007e48 <EE_Format+0xac>)
 8007da4:	f00b f900 	bl	8012fa8 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007da8:	4828      	ldr	r0, [pc, #160]	; (8007e4c <EE_Format+0xb0>)
 8007daa:	f00b f86d 	bl	8012e88 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d003      	beq.n	8007dba <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007db2:	4b27      	ldr	r3, [pc, #156]	; (8007e50 <EE_Format+0xb4>)
 8007db4:	69d8      	ldr	r0, [r3, #28]
 8007db6:	b280      	uxth	r0, r0
}
 8007db8:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007dba:	4826      	ldr	r0, [pc, #152]	; (8007e54 <EE_Format+0xb8>)
 8007dbc:	f00b f8f4 	bl	8012fa8 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007dc0:	4822      	ldr	r0, [pc, #136]	; (8007e4c <EE_Format+0xb0>)
 8007dc2:	f00b f861 	bl	8012e88 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d003      	beq.n	8007dd2 <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007dca:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <EE_Format+0xb4>)
 8007dcc:	69d8      	ldr	r0, [r3, #28]
 8007dce:	b280      	uxth	r0, r0
 8007dd0:	e7f2      	b.n	8007db8 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007dd2:	4a21      	ldr	r2, [pc, #132]	; (8007e58 <EE_Format+0xbc>)
 8007dd4:	6913      	ldr	r3, [r2, #16]
 8007dd6:	2102      	movs	r1, #2
 8007dd8:	438b      	bics	r3, r1
 8007dda:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2300      	movs	r3, #0
 8007de0:	4919      	ldr	r1, [pc, #100]	; (8007e48 <EE_Format+0xac>)
 8007de2:	2001      	movs	r0, #1
 8007de4:	f00b f87e 	bl	8012ee4 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007de8:	4818      	ldr	r0, [pc, #96]	; (8007e4c <EE_Format+0xb0>)
 8007dea:	f00b f84d 	bl	8012e88 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d003      	beq.n	8007dfa <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007df2:	4b17      	ldr	r3, [pc, #92]	; (8007e50 <EE_Format+0xb4>)
 8007df4:	69d8      	ldr	r0, [r3, #28]
 8007df6:	b280      	uxth	r0, r0
 8007df8:	e7de      	b.n	8007db8 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007dfa:	4a17      	ldr	r2, [pc, #92]	; (8007e58 <EE_Format+0xbc>)
 8007dfc:	6913      	ldr	r3, [r2, #16]
 8007dfe:	2101      	movs	r1, #1
 8007e00:	438b      	bics	r3, r1
 8007e02:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e04:	4815      	ldr	r0, [pc, #84]	; (8007e5c <EE_Format+0xc0>)
 8007e06:	f00b f8cf 	bl	8012fa8 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e0a:	4810      	ldr	r0, [pc, #64]	; (8007e4c <EE_Format+0xb0>)
 8007e0c:	f00b f83c 	bl	8012e88 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d003      	beq.n	8007e1c <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007e14:	4b0e      	ldr	r3, [pc, #56]	; (8007e50 <EE_Format+0xb4>)
 8007e16:	69d8      	ldr	r0, [r3, #28]
 8007e18:	b280      	uxth	r0, r0
 8007e1a:	e7cd      	b.n	8007db8 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e1c:	4810      	ldr	r0, [pc, #64]	; (8007e60 <EE_Format+0xc4>)
 8007e1e:	f00b f8c3 	bl	8012fa8 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e22:	480a      	ldr	r0, [pc, #40]	; (8007e4c <EE_Format+0xb0>)
 8007e24:	f00b f830 	bl	8012e88 <FLASH_WaitForLastOperation>
 8007e28:	1e04      	subs	r4, r0, #0
		if(FlashStatus != HAL_OK){
 8007e2a:	d003      	beq.n	8007e34 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007e2c:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <EE_Format+0xb4>)
 8007e2e:	69d8      	ldr	r0, [r3, #28]
 8007e30:	b280      	uxth	r0, r0
 8007e32:	e7c1      	b.n	8007db8 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007e34:	4a08      	ldr	r2, [pc, #32]	; (8007e58 <EE_Format+0xbc>)
 8007e36:	6913      	ldr	r3, [r2, #16]
 8007e38:	2101      	movs	r1, #1
 8007e3a:	438b      	bics	r3, r1
 8007e3c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007e3e:	f00b f819 	bl	8012e74 <HAL_FLASH_Lock>
	return FlashStatus;
 8007e42:	b2a0      	uxth	r0, r4
 8007e44:	e7b8      	b.n	8007db8 <EE_Format+0x1c>
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	0801e000 	.word	0x0801e000
 8007e4c:	0000c350 	.word	0x0000c350
 8007e50:	200072b0 	.word	0x200072b0
 8007e54:	0801e800 	.word	0x0801e800
 8007e58:	40022000 	.word	0x40022000
 8007e5c:	0801f000 	.word	0x0801f000
 8007e60:	0801f800 	.word	0x0801f800

08007e64 <EE_Init>:
uint16_t EE_Init(void){
 8007e64:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 8007e66:	f00a fff1 	bl	8012e4c <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007e6a:	4bbc      	ldr	r3, [pc, #752]	; (800815c <EE_Init+0x2f8>)
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007e70:	4abb      	ldr	r2, [pc, #748]	; (8008160 <EE_Init+0x2fc>)
 8007e72:	8812      	ldrh	r2, [r2, #0]
 8007e74:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007e76:	49bb      	ldr	r1, [pc, #748]	; (8008164 <EE_Init+0x300>)
 8007e78:	428b      	cmp	r3, r1
 8007e7a:	d100      	bne.n	8007e7e <EE_Init+0x1a>
 8007e7c:	e072      	b.n	8007f64 <EE_Init+0x100>
 8007e7e:	49ba      	ldr	r1, [pc, #744]	; (8008168 <EE_Init+0x304>)
 8007e80:	428b      	cmp	r3, r1
 8007e82:	d00f      	beq.n	8007ea4 <EE_Init+0x40>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d100      	bne.n	8007e8a <EE_Init+0x26>
 8007e88:	e106      	b.n	8008098 <EE_Init+0x234>
			FlashStatus =EE_Format();
 8007e8a:	f7ff ff87 	bl	8007d9c <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007e8e:	48b7      	ldr	r0, [pc, #732]	; (800816c <EE_Init+0x308>)
 8007e90:	f00a fffa 	bl	8012e88 <FLASH_WaitForLastOperation>
 8007e94:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 8007e96:	2d00      	cmp	r5, #0
 8007e98:	d102      	bne.n	8007ea0 <EE_Init+0x3c>
	HAL_FLASH_Lock();
 8007e9a:	f00a ffeb 	bl	8012e74 <HAL_FLASH_Lock>
	return HAL_OK;
 8007e9e:	2500      	movs	r5, #0
}
 8007ea0:	0028      	movs	r0, r5
 8007ea2:	bd70      	pop	{r4, r5, r6, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	d00d      	beq.n	8007ec4 <EE_Init+0x60>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007ea8:	4bae      	ldr	r3, [pc, #696]	; (8008164 <EE_Init+0x300>)
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d028      	beq.n	8007f00 <EE_Init+0x9c>
				FlashStatus =EE_Format();
 8007eae:	f7ff ff75 	bl	8007d9c <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007eb2:	48ae      	ldr	r0, [pc, #696]	; (800816c <EE_Init+0x308>)
 8007eb4:	f00a ffe8 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d0ee      	beq.n	8007e9a <EE_Init+0x36>
					return pFlash.ErrorCode;
 8007ebc:	4bac      	ldr	r3, [pc, #688]	; (8008170 <EE_Init+0x30c>)
 8007ebe:	69dd      	ldr	r5, [r3, #28]
 8007ec0:	b2ad      	uxth	r5, r5
 8007ec2:	e7ed      	b.n	8007ea0 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007ec4:	48a5      	ldr	r0, [pc, #660]	; (800815c <EE_Init+0x2f8>)
 8007ec6:	f00b f86f 	bl	8012fa8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007eca:	48a8      	ldr	r0, [pc, #672]	; (800816c <EE_Init+0x308>)
 8007ecc:	f00a ffdc 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d003      	beq.n	8007edc <EE_Init+0x78>
					return pFlash.ErrorCode;
 8007ed4:	4ba6      	ldr	r3, [pc, #664]	; (8008170 <EE_Init+0x30c>)
 8007ed6:	69dd      	ldr	r5, [r3, #28]
 8007ed8:	b2ad      	uxth	r5, r5
 8007eda:	e7e1      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007edc:	48a5      	ldr	r0, [pc, #660]	; (8008174 <EE_Init+0x310>)
 8007ede:	f00b f863 	bl	8012fa8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ee2:	48a2      	ldr	r0, [pc, #648]	; (800816c <EE_Init+0x308>)
 8007ee4:	f00a ffd0 	bl	8012e88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d105      	bne.n	8007ef8 <EE_Init+0x94>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007eec:	4aa2      	ldr	r2, [pc, #648]	; (8008178 <EE_Init+0x314>)
 8007eee:	6913      	ldr	r3, [r2, #16]
 8007ef0:	2102      	movs	r1, #2
 8007ef2:	438b      	bics	r3, r1
 8007ef4:	6113      	str	r3, [r2, #16]
 8007ef6:	e7d0      	b.n	8007e9a <EE_Init+0x36>
						return pFlash.ErrorCode;
 8007ef8:	4b9d      	ldr	r3, [pc, #628]	; (8008170 <EE_Init+0x30c>)
 8007efa:	69dd      	ldr	r5, [r3, #28]
 8007efc:	b2ad      	uxth	r5, r5
 8007efe:	e7cf      	b.n	8007ea0 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007f00:	4896      	ldr	r0, [pc, #600]	; (800815c <EE_Init+0x2f8>)
 8007f02:	f00b f851 	bl	8012fa8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f06:	4899      	ldr	r0, [pc, #612]	; (800816c <EE_Init+0x308>)
 8007f08:	f00a ffbe 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d003      	beq.n	8007f18 <EE_Init+0xb4>
					return pFlash.ErrorCode;
 8007f10:	4b97      	ldr	r3, [pc, #604]	; (8008170 <EE_Init+0x30c>)
 8007f12:	69dd      	ldr	r5, [r3, #28]
 8007f14:	b2ad      	uxth	r5, r5
 8007f16:	e7c3      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007f18:	4896      	ldr	r0, [pc, #600]	; (8008174 <EE_Init+0x310>)
 8007f1a:	f00b f845 	bl	8012fa8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f1e:	4893      	ldr	r0, [pc, #588]	; (800816c <EE_Init+0x308>)
 8007f20:	f00a ffb2 	bl	8012e88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d003      	beq.n	8007f30 <EE_Init+0xcc>
						return pFlash.ErrorCode;
 8007f28:	4b91      	ldr	r3, [pc, #580]	; (8008170 <EE_Init+0x30c>)
 8007f2a:	69dd      	ldr	r5, [r3, #28]
 8007f2c:	b2ad      	uxth	r5, r5
 8007f2e:	e7b7      	b.n	8007ea0 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007f30:	4a91      	ldr	r2, [pc, #580]	; (8008178 <EE_Init+0x314>)
 8007f32:	6913      	ldr	r3, [r2, #16]
 8007f34:	2102      	movs	r1, #2
 8007f36:	438b      	bics	r3, r1
 8007f38:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4988      	ldr	r1, [pc, #544]	; (8008160 <EE_Init+0x2fc>)
 8007f40:	2001      	movs	r0, #1
 8007f42:	f00a ffcf 	bl	8012ee4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f46:	4889      	ldr	r0, [pc, #548]	; (800816c <EE_Init+0x308>)
 8007f48:	f00a ff9e 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d105      	bne.n	8007f5c <EE_Init+0xf8>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007f50:	4a89      	ldr	r2, [pc, #548]	; (8008178 <EE_Init+0x314>)
 8007f52:	6913      	ldr	r3, [r2, #16]
 8007f54:	2101      	movs	r1, #1
 8007f56:	438b      	bics	r3, r1
 8007f58:	6113      	str	r3, [r2, #16]
 8007f5a:	e79e      	b.n	8007e9a <EE_Init+0x36>
					return pFlash.ErrorCode;
 8007f5c:	4b84      	ldr	r3, [pc, #528]	; (8008170 <EE_Init+0x30c>)
 8007f5e:	69dd      	ldr	r5, [r3, #28]
 8007f60:	b2ad      	uxth	r5, r5
 8007f62:	e79d      	b.n	8007ea0 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007f64:	2a00      	cmp	r2, #0
 8007f66:	d02f      	beq.n	8007fc8 <EE_Init+0x164>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007f68:	4b7f      	ldr	r3, [pc, #508]	; (8008168 <EE_Init+0x304>)
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d062      	beq.n	8008034 <EE_Init+0x1d0>
				FlashStatus =EE_Format();
 8007f6e:	f7ff ff15 	bl	8007d9c <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f72:	487e      	ldr	r0, [pc, #504]	; (800816c <EE_Init+0x308>)
 8007f74:	f00a ff88 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d100      	bne.n	8007f7e <EE_Init+0x11a>
 8007f7c:	e78d      	b.n	8007e9a <EE_Init+0x36>
					return pFlash.ErrorCode;
 8007f7e:	4b7c      	ldr	r3, [pc, #496]	; (8008170 <EE_Init+0x30c>)
 8007f80:	69dd      	ldr	r5, [r3, #28]
 8007f82:	b2ad      	uxth	r5, r5
 8007f84:	e78c      	b.n	8007ea0 <EE_Init+0x3c>
						x =VarIdx;
 8007f86:	b226      	sxth	r6, r4
 8007f88:	e00a      	b.n	8007fa0 <EE_Init+0x13c>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007f8a:	3401      	adds	r4, #1
 8007f8c:	b2a4      	uxth	r4, r4
 8007f8e:	2380      	movs	r3, #128	; 0x80
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	429c      	cmp	r4, r3
 8007f94:	d81c      	bhi.n	8007fd0 <EE_Init+0x16c>
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007f96:	4b79      	ldr	r3, [pc, #484]	; (800817c <EE_Init+0x318>)
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	d0f2      	beq.n	8007f86 <EE_Init+0x122>
					if(VarIdx != x){
 8007fa0:	42b4      	cmp	r4, r6
 8007fa2:	d0f2      	beq.n	8007f8a <EE_Init+0x126>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007fa4:	4976      	ldr	r1, [pc, #472]	; (8008180 <EE_Init+0x31c>)
 8007fa6:	0020      	movs	r0, r4
 8007fa8:	f7ff fe30 	bl	8007c0c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007fac:	2801      	cmp	r0, #1
 8007fae:	d0ec      	beq.n	8007f8a <EE_Init+0x126>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007fb0:	4b73      	ldr	r3, [pc, #460]	; (8008180 <EE_Init+0x31c>)
 8007fb2:	8819      	ldrh	r1, [r3, #0]
 8007fb4:	0020      	movs	r0, r4
 8007fb6:	f7ff fdd3 	bl	8007b60 <EE_VerifyPageFullWriteVariable>
 8007fba:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007fbc:	486b      	ldr	r0, [pc, #428]	; (800816c <EE_Init+0x308>)
 8007fbe:	f00a ff63 	bl	8012e88 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d0e1      	beq.n	8007f8a <EE_Init+0x126>
 8007fc6:	e76b      	b.n	8007ea0 <EE_Init+0x3c>
	int16_t x =-1;
 8007fc8:	2601      	movs	r6, #1
 8007fca:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007fcc:	2401      	movs	r4, #1
 8007fce:	e7de      	b.n	8007f8e <EE_Init+0x12a>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4961      	ldr	r1, [pc, #388]	; (800815c <EE_Init+0x2f8>)
 8007fd6:	2001      	movs	r0, #1
 8007fd8:	f00a ff84 	bl	8012ee4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007fdc:	4863      	ldr	r0, [pc, #396]	; (800816c <EE_Init+0x308>)
 8007fde:	f00a ff53 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d003      	beq.n	8007fee <EE_Init+0x18a>
					return pFlash.ErrorCode;
 8007fe6:	4b62      	ldr	r3, [pc, #392]	; (8008170 <EE_Init+0x30c>)
 8007fe8:	69dd      	ldr	r5, [r3, #28]
 8007fea:	b2ad      	uxth	r5, r5
 8007fec:	e758      	b.n	8007ea0 <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007fee:	4a62      	ldr	r2, [pc, #392]	; (8008178 <EE_Init+0x314>)
 8007ff0:	6913      	ldr	r3, [r2, #16]
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	438b      	bics	r3, r1
 8007ff6:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007ff8:	4859      	ldr	r0, [pc, #356]	; (8008160 <EE_Init+0x2fc>)
 8007ffa:	f00a ffd5 	bl	8012fa8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ffe:	485b      	ldr	r0, [pc, #364]	; (800816c <EE_Init+0x308>)
 8008000:	f00a ff42 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008004:	2800      	cmp	r0, #0
 8008006:	d003      	beq.n	8008010 <EE_Init+0x1ac>
					return pFlash.ErrorCode;
 8008008:	4b59      	ldr	r3, [pc, #356]	; (8008170 <EE_Init+0x30c>)
 800800a:	69dd      	ldr	r5, [r3, #28]
 800800c:	b2ad      	uxth	r5, r5
 800800e:	e747      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8008010:	485c      	ldr	r0, [pc, #368]	; (8008184 <EE_Init+0x320>)
 8008012:	f00a ffc9 	bl	8012fa8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008016:	4855      	ldr	r0, [pc, #340]	; (800816c <EE_Init+0x308>)
 8008018:	f00a ff36 	bl	8012e88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800801c:	2800      	cmp	r0, #0
 800801e:	d105      	bne.n	800802c <EE_Init+0x1c8>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8008020:	4a55      	ldr	r2, [pc, #340]	; (8008178 <EE_Init+0x314>)
 8008022:	6913      	ldr	r3, [r2, #16]
 8008024:	2102      	movs	r1, #2
 8008026:	438b      	bics	r3, r1
 8008028:	6113      	str	r3, [r2, #16]
 800802a:	e736      	b.n	8007e9a <EE_Init+0x36>
						return pFlash.ErrorCode;
 800802c:	4b50      	ldr	r3, [pc, #320]	; (8008170 <EE_Init+0x30c>)
 800802e:	69dd      	ldr	r5, [r3, #28]
 8008030:	b2ad      	uxth	r5, r5
 8008032:	e735      	b.n	8007ea0 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8008034:	484a      	ldr	r0, [pc, #296]	; (8008160 <EE_Init+0x2fc>)
 8008036:	f00a ffb7 	bl	8012fa8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800803a:	484c      	ldr	r0, [pc, #304]	; (800816c <EE_Init+0x308>)
 800803c:	f00a ff24 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008040:	2800      	cmp	r0, #0
 8008042:	d003      	beq.n	800804c <EE_Init+0x1e8>
					return pFlash.ErrorCode;
 8008044:	4b4a      	ldr	r3, [pc, #296]	; (8008170 <EE_Init+0x30c>)
 8008046:	69dd      	ldr	r5, [r3, #28]
 8008048:	b2ad      	uxth	r5, r5
 800804a:	e729      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800804c:	484d      	ldr	r0, [pc, #308]	; (8008184 <EE_Init+0x320>)
 800804e:	f00a ffab 	bl	8012fa8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008052:	4846      	ldr	r0, [pc, #280]	; (800816c <EE_Init+0x308>)
 8008054:	f00a ff18 	bl	8012e88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8008058:	2800      	cmp	r0, #0
 800805a:	d003      	beq.n	8008064 <EE_Init+0x200>
						return pFlash.ErrorCode;
 800805c:	4b44      	ldr	r3, [pc, #272]	; (8008170 <EE_Init+0x30c>)
 800805e:	69dd      	ldr	r5, [r3, #28]
 8008060:	b2ad      	uxth	r5, r5
 8008062:	e71d      	b.n	8007ea0 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8008064:	4a44      	ldr	r2, [pc, #272]	; (8008178 <EE_Init+0x314>)
 8008066:	6913      	ldr	r3, [r2, #16]
 8008068:	2102      	movs	r1, #2
 800806a:	438b      	bics	r3, r1
 800806c:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800806e:	2200      	movs	r2, #0
 8008070:	2300      	movs	r3, #0
 8008072:	493a      	ldr	r1, [pc, #232]	; (800815c <EE_Init+0x2f8>)
 8008074:	2001      	movs	r0, #1
 8008076:	f00a ff35 	bl	8012ee4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800807a:	483c      	ldr	r0, [pc, #240]	; (800816c <EE_Init+0x308>)
 800807c:	f00a ff04 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008080:	2800      	cmp	r0, #0
 8008082:	d003      	beq.n	800808c <EE_Init+0x228>
					return pFlash.ErrorCode;
 8008084:	4b3a      	ldr	r3, [pc, #232]	; (8008170 <EE_Init+0x30c>)
 8008086:	69dd      	ldr	r5, [r3, #28]
 8008088:	b2ad      	uxth	r5, r5
 800808a:	e709      	b.n	8007ea0 <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800808c:	4a3a      	ldr	r2, [pc, #232]	; (8008178 <EE_Init+0x314>)
 800808e:	6913      	ldr	r3, [r2, #16]
 8008090:	2101      	movs	r1, #1
 8008092:	438b      	bics	r3, r1
 8008094:	6113      	str	r3, [r2, #16]
 8008096:	e700      	b.n	8007e9a <EE_Init+0x36>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8008098:	2a00      	cmp	r2, #0
 800809a:	d006      	beq.n	80080aa <EE_Init+0x246>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800809c:	4b32      	ldr	r3, [pc, #200]	; (8008168 <EE_Init+0x304>)
 800809e:	429a      	cmp	r2, r3
 80080a0:	d00d      	beq.n	80080be <EE_Init+0x25a>
	int16_t x =-1;
 80080a2:	2601      	movs	r6, #1
 80080a4:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 80080a6:	2401      	movs	r4, #1
 80080a8:	e02b      	b.n	8008102 <EE_Init+0x29e>
				FlashStatus =EE_Format();
 80080aa:	f7ff fe77 	bl	8007d9c <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80080ae:	482f      	ldr	r0, [pc, #188]	; (800816c <EE_Init+0x308>)
 80080b0:	f00a feea 	bl	8012e88 <FLASH_WaitForLastOperation>
 80080b4:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK){
 80080b6:	2d00      	cmp	r5, #0
 80080b8:	d100      	bne.n	80080bc <EE_Init+0x258>
 80080ba:	e6ee      	b.n	8007e9a <EE_Init+0x36>
 80080bc:	e6f0      	b.n	8007ea0 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80080be:	4828      	ldr	r0, [pc, #160]	; (8008160 <EE_Init+0x2fc>)
 80080c0:	f00a ff72 	bl	8012fa8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80080c4:	4829      	ldr	r0, [pc, #164]	; (800816c <EE_Init+0x308>)
 80080c6:	f00a fedf 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d003      	beq.n	80080d6 <EE_Init+0x272>
					return pFlash.ErrorCode;
 80080ce:	4b28      	ldr	r3, [pc, #160]	; (8008170 <EE_Init+0x30c>)
 80080d0:	69dd      	ldr	r5, [r3, #28]
 80080d2:	b2ad      	uxth	r5, r5
 80080d4:	e6e4      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80080d6:	482b      	ldr	r0, [pc, #172]	; (8008184 <EE_Init+0x320>)
 80080d8:	f00a ff66 	bl	8012fa8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80080dc:	4823      	ldr	r0, [pc, #140]	; (800816c <EE_Init+0x308>)
 80080de:	f00a fed3 	bl	8012e88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d105      	bne.n	80080f2 <EE_Init+0x28e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80080e6:	4a24      	ldr	r2, [pc, #144]	; (8008178 <EE_Init+0x314>)
 80080e8:	6913      	ldr	r3, [r2, #16]
 80080ea:	2102      	movs	r1, #2
 80080ec:	438b      	bics	r3, r1
 80080ee:	6113      	str	r3, [r2, #16]
 80080f0:	e6d3      	b.n	8007e9a <EE_Init+0x36>
						return pFlash.ErrorCode;
 80080f2:	4b1f      	ldr	r3, [pc, #124]	; (8008170 <EE_Init+0x30c>)
 80080f4:	69dd      	ldr	r5, [r3, #28]
 80080f6:	b2ad      	uxth	r5, r5
 80080f8:	e6d2      	b.n	8007ea0 <EE_Init+0x3c>
						x =VarIdx;
 80080fa:	b226      	sxth	r6, r4
 80080fc:	e00a      	b.n	8008114 <EE_Init+0x2b0>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 80080fe:	3401      	adds	r4, #1
 8008100:	b2a4      	uxth	r4, r4
 8008102:	2380      	movs	r3, #128	; 0x80
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	429c      	cmp	r4, r3
 8008108:	d818      	bhi.n	800813c <EE_Init+0x2d8>
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800810a:	4b1f      	ldr	r3, [pc, #124]	; (8008188 <EE_Init+0x324>)
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	42a3      	cmp	r3, r4
 8008112:	d0f2      	beq.n	80080fa <EE_Init+0x296>
					if(VarIdx != x){
 8008114:	42b4      	cmp	r4, r6
 8008116:	d0f2      	beq.n	80080fe <EE_Init+0x29a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8008118:	4919      	ldr	r1, [pc, #100]	; (8008180 <EE_Init+0x31c>)
 800811a:	0020      	movs	r0, r4
 800811c:	f7ff fd76 	bl	8007c0c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8008120:	2801      	cmp	r0, #1
 8008122:	d0ec      	beq.n	80080fe <EE_Init+0x29a>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8008124:	4b16      	ldr	r3, [pc, #88]	; (8008180 <EE_Init+0x31c>)
 8008126:	8819      	ldrh	r1, [r3, #0]
 8008128:	0020      	movs	r0, r4
 800812a:	f7ff fd19 	bl	8007b60 <EE_VerifyPageFullWriteVariable>
 800812e:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008130:	480e      	ldr	r0, [pc, #56]	; (800816c <EE_Init+0x308>)
 8008132:	f00a fea9 	bl	8012e88 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8008136:	2800      	cmp	r0, #0
 8008138:	d0e1      	beq.n	80080fe <EE_Init+0x29a>
 800813a:	e6b1      	b.n	8007ea0 <EE_Init+0x3c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800813c:	2200      	movs	r2, #0
 800813e:	2300      	movs	r3, #0
 8008140:	4907      	ldr	r1, [pc, #28]	; (8008160 <EE_Init+0x2fc>)
 8008142:	2001      	movs	r0, #1
 8008144:	f00a fece 	bl	8012ee4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008148:	4808      	ldr	r0, [pc, #32]	; (800816c <EE_Init+0x308>)
 800814a:	f00a fe9d 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800814e:	2800      	cmp	r0, #0
 8008150:	d01c      	beq.n	800818c <EE_Init+0x328>
					return pFlash.ErrorCode;
 8008152:	4b07      	ldr	r3, [pc, #28]	; (8008170 <EE_Init+0x30c>)
 8008154:	69dd      	ldr	r5, [r3, #28]
 8008156:	b2ad      	uxth	r5, r5
 8008158:	e6a2      	b.n	8007ea0 <EE_Init+0x3c>
 800815a:	46c0      	nop			; (mov r8, r8)
 800815c:	0801e000 	.word	0x0801e000
 8008160:	0801f000 	.word	0x0801f000
 8008164:	0000eeee 	.word	0x0000eeee
 8008168:	0000ffff 	.word	0x0000ffff
 800816c:	0000c350 	.word	0x0000c350
 8008170:	200072b0 	.word	0x200072b0
 8008174:	0801e800 	.word	0x0801e800
 8008178:	40022000 	.word	0x40022000
 800817c:	0801e006 	.word	0x0801e006
 8008180:	20001474 	.word	0x20001474
 8008184:	0801f800 	.word	0x0801f800
 8008188:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800818c:	4a11      	ldr	r2, [pc, #68]	; (80081d4 <EE_Init+0x370>)
 800818e:	6913      	ldr	r3, [r2, #16]
 8008190:	2101      	movs	r1, #1
 8008192:	438b      	bics	r3, r1
 8008194:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8008196:	4810      	ldr	r0, [pc, #64]	; (80081d8 <EE_Init+0x374>)
 8008198:	f00a ff06 	bl	8012fa8 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800819c:	480f      	ldr	r0, [pc, #60]	; (80081dc <EE_Init+0x378>)
 800819e:	f00a fe73 	bl	8012e88 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d003      	beq.n	80081ae <EE_Init+0x34a>
					return pFlash.ErrorCode;
 80081a6:	4b0e      	ldr	r3, [pc, #56]	; (80081e0 <EE_Init+0x37c>)
 80081a8:	69dd      	ldr	r5, [r3, #28]
 80081aa:	b2ad      	uxth	r5, r5
 80081ac:	e678      	b.n	8007ea0 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80081ae:	480d      	ldr	r0, [pc, #52]	; (80081e4 <EE_Init+0x380>)
 80081b0:	f00a fefa 	bl	8012fa8 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80081b4:	4809      	ldr	r0, [pc, #36]	; (80081dc <EE_Init+0x378>)
 80081b6:	f00a fe67 	bl	8012e88 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d105      	bne.n	80081ca <EE_Init+0x366>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80081be:	4a05      	ldr	r2, [pc, #20]	; (80081d4 <EE_Init+0x370>)
 80081c0:	6913      	ldr	r3, [r2, #16]
 80081c2:	2102      	movs	r1, #2
 80081c4:	438b      	bics	r3, r1
 80081c6:	6113      	str	r3, [r2, #16]
 80081c8:	e667      	b.n	8007e9a <EE_Init+0x36>
						return pFlash.ErrorCode;
 80081ca:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <EE_Init+0x37c>)
 80081cc:	69dd      	ldr	r5, [r3, #28]
 80081ce:	b2ad      	uxth	r5, r5
 80081d0:	e666      	b.n	8007ea0 <EE_Init+0x3c>
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	40022000 	.word	0x40022000
 80081d8:	0801e000 	.word	0x0801e000
 80081dc:	0000c350 	.word	0x0000c350
 80081e0:	200072b0 	.word	0x200072b0
 80081e4:	0801e800 	.word	0x0801e800

080081e8 <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	e020      	b.n	800822e <StartDefaultTask+0x46>
	/* Infinite loop */
	for(;;){
		/* Switch indicator LED according to mode */
		switch(indMode){
			case IND_PING:
				RTOS_IND_blink(200);
 80081ec:	2580      	movs	r5, #128	; 0x80
 80081ee:	012d      	lsls	r5, r5, #4
 80081f0:	2490      	movs	r4, #144	; 0x90
 80081f2:	05e4      	lsls	r4, r4, #23
 80081f4:	2201      	movs	r2, #1
 80081f6:	0029      	movs	r1, r5
 80081f8:	0020      	movs	r0, r4
 80081fa:	f00b f88a 	bl	8013312 <HAL_GPIO_WritePin>
 80081fe:	20c8      	movs	r0, #200	; 0xc8
 8008200:	f007 fc06 	bl	800fa10 <osDelay>
 8008204:	2200      	movs	r2, #0
 8008206:	0029      	movs	r1, r5
 8008208:	0020      	movs	r0, r4
 800820a:	f00b f882 	bl	8013312 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800820e:	4b21      	ldr	r3, [pc, #132]	; (8008294 <StartDefaultTask+0xac>)
 8008210:	2200      	movs	r2, #0
 8008212:	701a      	strb	r2, [r3, #0]
				break;
				
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8008214:	f000 ff12 	bl	800903c <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8008218:	f7fd fb56 	bl	80058c8 <ExecuteSnippet>

		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 800821c:	4b1e      	ldr	r3, [pc, #120]	; (8008298 <StartDefaultTask+0xb0>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <StartDefaultTask+0x42>
			delayButtonStateReset = false;
 8008224:	4b1d      	ldr	r3, [pc, #116]	; (800829c <StartDefaultTask+0xb4>)
 8008226:	2200      	movs	r2, #0
 8008228:	701a      	strb	r2, [r3, #0]
		
		taskYIELD();
 800822a:	f009 fadb 	bl	80117e4 <vPortYield>
		switch(indMode){
 800822e:	4b19      	ldr	r3, [pc, #100]	; (8008294 <StartDefaultTask+0xac>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d004      	beq.n	8008240 <StartDefaultTask+0x58>
 8008236:	2b03      	cmp	r3, #3
 8008238:	d017      	beq.n	800826a <StartDefaultTask+0x82>
 800823a:	2b01      	cmp	r3, #1
 800823c:	d1ea      	bne.n	8008214 <StartDefaultTask+0x2c>
 800823e:	e7d5      	b.n	80081ec <StartDefaultTask+0x4>
				RTOS_IND_blink(100);
 8008240:	2580      	movs	r5, #128	; 0x80
 8008242:	012d      	lsls	r5, r5, #4
 8008244:	2490      	movs	r4, #144	; 0x90
 8008246:	05e4      	lsls	r4, r4, #23
 8008248:	2201      	movs	r2, #1
 800824a:	0029      	movs	r1, r5
 800824c:	0020      	movs	r0, r4
 800824e:	f00b f860 	bl	8013312 <HAL_GPIO_WritePin>
 8008252:	2064      	movs	r0, #100	; 0x64
 8008254:	f007 fbdc 	bl	800fa10 <osDelay>
 8008258:	2200      	movs	r2, #0
 800825a:	0029      	movs	r1, r5
 800825c:	0020      	movs	r0, r4
 800825e:	f00b f858 	bl	8013312 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8008262:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <StartDefaultTask+0xac>)
 8008264:	2200      	movs	r2, #0
 8008266:	701a      	strb	r2, [r3, #0]
				break;
 8008268:	e7d4      	b.n	8008214 <StartDefaultTask+0x2c>
				RTOS_IND_blink(30);
 800826a:	2580      	movs	r5, #128	; 0x80
 800826c:	012d      	lsls	r5, r5, #4
 800826e:	2490      	movs	r4, #144	; 0x90
 8008270:	05e4      	lsls	r4, r4, #23
 8008272:	2201      	movs	r2, #1
 8008274:	0029      	movs	r1, r5
 8008276:	0020      	movs	r0, r4
 8008278:	f00b f84b 	bl	8013312 <HAL_GPIO_WritePin>
 800827c:	201e      	movs	r0, #30
 800827e:	f007 fbc7 	bl	800fa10 <osDelay>
 8008282:	2200      	movs	r2, #0
 8008284:	0029      	movs	r1, r5
 8008286:	0020      	movs	r0, r4
 8008288:	f00b f843 	bl	8013312 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800828c:	4b01      	ldr	r3, [pc, #4]	; (8008294 <StartDefaultTask+0xac>)
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
				break;
 8008292:	e7bf      	b.n	8008214 <StartDefaultTask+0x2c>
 8008294:	20000ee4 	.word	0x20000ee4
 8008298:	200014f7 	.word	0x200014f7
 800829c:	200014f6 	.word	0x200014f6

080082a0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	b08e      	sub	sp, #56	; 0x38
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80082a4:	25a0      	movs	r5, #160	; 0xa0
 80082a6:	006d      	lsls	r5, r5, #1
 80082a8:	2400      	movs	r4, #0
 80082aa:	9403      	str	r4, [sp, #12]
 80082ac:	9402      	str	r4, [sp, #8]
 80082ae:	4b53      	ldr	r3, [pc, #332]	; (80083fc <MX_FREERTOS_Init+0x15c>)
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	2603      	movs	r6, #3
 80082b4:	9600      	str	r6, [sp, #0]
 80082b6:	2300      	movs	r3, #0
 80082b8:	002a      	movs	r2, r5
 80082ba:	4951      	ldr	r1, [pc, #324]	; (8008400 <MX_FREERTOS_Init+0x160>)
 80082bc:	4851      	ldr	r0, [pc, #324]	; (8008404 <MX_FREERTOS_Init+0x164>)
 80082be:	f008 fa3b 	bl	8010738 <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 80082c2:	9403      	str	r4, [sp, #12]
 80082c4:	9402      	str	r4, [sp, #8]
 80082c6:	4b50      	ldr	r3, [pc, #320]	; (8008408 <MX_FREERTOS_Init+0x168>)
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	9600      	str	r6, [sp, #0]
 80082cc:	2300      	movs	r3, #0
 80082ce:	002a      	movs	r2, r5
 80082d0:	494e      	ldr	r1, [pc, #312]	; (800840c <MX_FREERTOS_Init+0x16c>)
 80082d2:	484f      	ldr	r0, [pc, #316]	; (8008410 <MX_FREERTOS_Init+0x170>)
 80082d4:	f008 fa30 	bl	8010738 <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 80082d8:	9403      	str	r4, [sp, #12]
 80082da:	9402      	str	r4, [sp, #8]
 80082dc:	4b4d      	ldr	r3, [pc, #308]	; (8008414 <MX_FREERTOS_Init+0x174>)
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	9600      	str	r6, [sp, #0]
 80082e2:	2300      	movs	r3, #0
 80082e4:	002a      	movs	r2, r5
 80082e6:	494c      	ldr	r1, [pc, #304]	; (8008418 <MX_FREERTOS_Init+0x178>)
 80082e8:	484c      	ldr	r0, [pc, #304]	; (800841c <MX_FREERTOS_Init+0x17c>)
 80082ea:	f008 fa25 	bl	8010738 <xTaskGenericCreate>
	vRegisterCLICommands();
 80082ee:	f7ff fa73 	bl	80077d8 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 80082f2:	9403      	str	r4, [sp, #12]
 80082f4:	9402      	str	r4, [sp, #8]
 80082f6:	4b4a      	ldr	r3, [pc, #296]	; (8008420 <MX_FREERTOS_Init+0x180>)
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	9600      	str	r6, [sp, #0]
 80082fc:	2300      	movs	r3, #0
 80082fe:	002a      	movs	r2, r5
 8008300:	4948      	ldr	r1, [pc, #288]	; (8008424 <MX_FREERTOS_Init+0x184>)
 8008302:	4849      	ldr	r0, [pc, #292]	; (8008428 <MX_FREERTOS_Init+0x188>)
 8008304:	f008 fa18 	bl	8010738 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",configMINIMAL_STACK_SIZE,(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8008308:	4d48      	ldr	r5, [pc, #288]	; (800842c <MX_FREERTOS_Init+0x18c>)
 800830a:	9403      	str	r4, [sp, #12]
 800830c:	9402      	str	r4, [sp, #8]
 800830e:	4b48      	ldr	r3, [pc, #288]	; (8008430 <MX_FREERTOS_Init+0x190>)
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	3601      	adds	r6, #1
 8008314:	9600      	str	r6, [sp, #0]
 8008316:	2301      	movs	r3, #1
 8008318:	22a0      	movs	r2, #160	; 0xa0
 800831a:	4946      	ldr	r1, [pc, #280]	; (8008434 <MX_FREERTOS_Init+0x194>)
 800831c:	0028      	movs	r0, r5
 800831e:	f008 fa0b 	bl	8010738 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",configMINIMAL_STACK_SIZE,(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8008322:	9403      	str	r4, [sp, #12]
 8008324:	9402      	str	r4, [sp, #8]
 8008326:	4b44      	ldr	r3, [pc, #272]	; (8008438 <MX_FREERTOS_Init+0x198>)
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	9600      	str	r6, [sp, #0]
 800832c:	2302      	movs	r3, #2
 800832e:	22a0      	movs	r2, #160	; 0xa0
 8008330:	4942      	ldr	r1, [pc, #264]	; (800843c <MX_FREERTOS_Init+0x19c>)
 8008332:	0028      	movs	r0, r5
 8008334:	f008 fa00 	bl	8010738 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",configMINIMAL_STACK_SIZE,(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8008338:	9403      	str	r4, [sp, #12]
 800833a:	9402      	str	r4, [sp, #8]
 800833c:	4b40      	ldr	r3, [pc, #256]	; (8008440 <MX_FREERTOS_Init+0x1a0>)
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	9600      	str	r6, [sp, #0]
 8008342:	2303      	movs	r3, #3
 8008344:	22a0      	movs	r2, #160	; 0xa0
 8008346:	493f      	ldr	r1, [pc, #252]	; (8008444 <MX_FREERTOS_Init+0x1a4>)
 8008348:	0028      	movs	r0, r5
 800834a:	f008 f9f5 	bl	8010738 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",configMINIMAL_STACK_SIZE,(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 800834e:	9403      	str	r4, [sp, #12]
 8008350:	9402      	str	r4, [sp, #8]
 8008352:	4b3d      	ldr	r3, [pc, #244]	; (8008448 <MX_FREERTOS_Init+0x1a8>)
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	9600      	str	r6, [sp, #0]
 8008358:	2304      	movs	r3, #4
 800835a:	22a0      	movs	r2, #160	; 0xa0
 800835c:	493b      	ldr	r1, [pc, #236]	; (800844c <MX_FREERTOS_Init+0x1ac>)
 800835e:	0028      	movs	r0, r5
 8008360:	f008 f9ea 	bl	8010738 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",configMINIMAL_STACK_SIZE,(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8008364:	9403      	str	r4, [sp, #12]
 8008366:	9402      	str	r4, [sp, #8]
 8008368:	4b39      	ldr	r3, [pc, #228]	; (8008450 <MX_FREERTOS_Init+0x1b0>)
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	9600      	str	r6, [sp, #0]
 800836e:	2305      	movs	r3, #5
 8008370:	22a0      	movs	r2, #160	; 0xa0
 8008372:	4938      	ldr	r1, [pc, #224]	; (8008454 <MX_FREERTOS_Init+0x1b4>)
 8008374:	0028      	movs	r0, r5
 8008376:	f008 f9df 	bl	8010738 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1);
 800837a:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 800837c:	2101      	movs	r1, #1
 800837e:	a80d      	add	r0, sp, #52	; 0x34
 8008380:	f007 fb4e 	bl	800fa20 <osSemaphoreCreate>
 8008384:	4e34      	ldr	r6, [pc, #208]	; (8008458 <MX_FREERTOS_Init+0x1b8>)
 8008386:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8008388:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 800838a:	2101      	movs	r1, #1
 800838c:	a80c      	add	r0, sp, #48	; 0x30
 800838e:	f007 fb47 	bl	800fa20 <osSemaphoreCreate>
 8008392:	4d32      	ldr	r5, [pc, #200]	; (800845c <MX_FREERTOS_Init+0x1bc>)
 8008394:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3);
 8008396:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8008398:	2101      	movs	r1, #1
 800839a:	a80b      	add	r0, sp, #44	; 0x2c
 800839c:	f007 fb40 	bl	800fa20 <osSemaphoreCreate>
 80083a0:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 80083a2:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80083a4:	2101      	movs	r1, #1
 80083a6:	a80a      	add	r0, sp, #40	; 0x28
 80083a8:	f007 fb3a 	bl	800fa20 <osSemaphoreCreate>
 80083ac:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5);
 80083ae:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80083b0:	2101      	movs	r1, #1
 80083b2:	a809      	add	r0, sp, #36	; 0x24
 80083b4:	f007 fb34 	bl	800fa20 <osSemaphoreCreate>
 80083b8:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 80083ba:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80083bc:	2101      	movs	r1, #1
 80083be:	a808      	add	r0, sp, #32
 80083c0:	f007 fb2e 	bl	800fa20 <osSemaphoreCreate>
 80083c4:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7);
 80083c6:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80083c8:	2101      	movs	r1, #1
 80083ca:	a807      	add	r0, sp, #28
 80083cc:	f007 fb28 	bl	800fa20 <osSemaphoreCreate>
 80083d0:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 80083d2:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 80083d4:	2101      	movs	r1, #1
 80083d6:	a806      	add	r0, sp, #24
 80083d8:	f007 fb22 	bl	800fa20 <osSemaphoreCreate>
 80083dc:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9);
 80083de:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 80083e0:	2101      	movs	r1, #1
 80083e2:	a805      	add	r0, sp, #20
 80083e4:	f007 fb1c 	bl	800fa20 <osSemaphoreCreate>
 80083e8:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 80083ea:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 80083ec:	2101      	movs	r1, #1
 80083ee:	a804      	add	r0, sp, #16
 80083f0:	f007 fb16 	bl	800fa20 <osSemaphoreCreate>
 80083f4:	6168      	str	r0, [r5, #20]
}
 80083f6:	b00e      	add	sp, #56	; 0x38
 80083f8:	bd70      	pop	{r4, r5, r6, pc}
 80083fa:	46c0      	nop			; (mov r8, r8)
 80083fc:	20001494 	.word	0x20001494
 8008400:	0801c4b0 	.word	0x0801c4b0
 8008404:	080081e9 	.word	0x080081e9
 8008408:	20001478 	.word	0x20001478
 800840c:	0801c4bc 	.word	0x0801c4bc
 8008410:	08009cd5 	.word	0x08009cd5
 8008414:	20001490 	.word	0x20001490
 8008418:	0801c4c8 	.word	0x0801c4c8
 800841c:	08014d4b 	.word	0x08014d4b
 8008420:	2000149c 	.word	0x2000149c
 8008424:	0801c4d4 	.word	0x0801c4d4
 8008428:	08005575 	.word	0x08005575
 800842c:	0800a059 	.word	0x0800a059
 8008430:	2000147c 	.word	0x2000147c
 8008434:	0801c4dc 	.word	0x0801c4dc
 8008438:	20001480 	.word	0x20001480
 800843c:	0801c4e8 	.word	0x0801c4e8
 8008440:	20001484 	.word	0x20001484
 8008444:	0801c4f4 	.word	0x0801c4f4
 8008448:	20001488 	.word	0x20001488
 800844c:	0801c500 	.word	0x0801c500
 8008450:	2000148c 	.word	0x2000148c
 8008454:	0801c50c 	.word	0x0801c50c
 8008458:	20006e3c 	.word	0x20006e3c
 800845c:	20006e20 	.word	0x20006e20

08008460 <vMainConfigureTimerForRunTimeStats>:
	
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
 8008460:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008462:	4b04      	ldr	r3, [pc, #16]	; (8008474 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	4904      	ldr	r1, [pc, #16]	; (8008478 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008468:	f7f7 fe72 	bl	8000150 <__udivsi3>
 800846c:	4b03      	ldr	r3, [pc, #12]	; (800847c <vMainConfigureTimerForRunTimeStats+0x1c>)
 800846e:	6018      	str	r0, [r3, #0]
}
 8008470:	bd10      	pop	{r4, pc}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	200000b8 	.word	0x200000b8
 8008478:	00002710 	.word	0x00002710
 800847c:	20001498 	.word	0x20001498

08008480 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8008480:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8008482:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <ulMainGetRunTimeCounterValue+0x40>)
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	21fa      	movs	r1, #250	; 0xfa
 8008488:	0089      	lsls	r1, r1, #2
 800848a:	f7f7 fe61 	bl	8000150 <__udivsi3>
 800848e:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008490:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <ulMainGetRunTimeCounterValue+0x44>)
 8008492:	681c      	ldr	r4, [r3, #0]
 8008494:	1b2c      	subs	r4, r5, r4
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8008496:	f008 fa79 	bl	801098c <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 800849a:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <ulMainGetRunTimeCounterValue+0x48>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	015b      	lsls	r3, r3, #5
 80084a0:	d503      	bpl.n	80084aa <ulMainGetRunTimeCounterValue+0x2a>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 80084a2:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <ulMainGetRunTimeCounterValue+0x44>)
 80084a6:	681c      	ldr	r4, [r3, #0]
 80084a8:	1b2c      	subs	r4, r5, r4
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 80084aa:	0083      	lsls	r3, r0, #2
 80084ac:	1818      	adds	r0, r3, r0
 80084ae:	0045      	lsls	r5, r0, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80084b0:	4b06      	ldr	r3, [pc, #24]	; (80084cc <ulMainGetRunTimeCounterValue+0x4c>)
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	0020      	movs	r0, r4
 80084b6:	f7f7 fe4b 	bl	8000150 <__udivsi3>
 80084ba:	1940      	adds	r0, r0, r5
	
	return ulReturn;
}
 80084bc:	bd70      	pop	{r4, r5, r6, pc}
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	200000b8 	.word	0x200000b8
 80084c4:	e000e018 	.word	0xe000e018
 80084c8:	e000ed04 	.word	0xe000ed04
 80084cc:	20001498 	.word	0x20001498

080084d0 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 80084d0:	4770      	bx	lr
	...

080084d4 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port){
 80084d4:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80084d6:	00c2      	lsls	r2, r0, #3
 80084d8:	1812      	adds	r2, r2, r0
 80084da:	4b18      	ldr	r3, [pc, #96]	; (800853c <CheckForTimedButtonPress+0x68>)
 80084dc:	189b      	adds	r3, r3, r2
 80084de:	789a      	ldrb	r2, [r3, #2]
 80084e0:	78de      	ldrb	r6, [r3, #3]
 80084e2:	791c      	ldrb	r4, [r3, #4]
	
	/* Convert to ms */
	t1 *=1000;
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	1a89      	subs	r1, r1, r2
 80084e8:	0089      	lsls	r1, r1, #2
 80084ea:	1889      	adds	r1, r1, r2
 80084ec:	00cd      	lsls	r5, r1, #3
	t2 *=1000;
 80084ee:	0172      	lsls	r2, r6, #5
 80084f0:	1b92      	subs	r2, r2, r6
 80084f2:	0092      	lsls	r2, r2, #2
 80084f4:	1992      	adds	r2, r2, r6
 80084f6:	00d3      	lsls	r3, r2, #3
 80084f8:	001a      	movs	r2, r3
	t3 *=1000;
 80084fa:	0163      	lsls	r3, r4, #5
 80084fc:	1b1b      	subs	r3, r3, r4
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	191b      	adds	r3, r3, r4
 8008502:	00d9      	lsls	r1, r3, #3
	
	if(pressCounter[port] == t1){
 8008504:	0084      	lsls	r4, r0, #2
 8008506:	4b0e      	ldr	r3, [pc, #56]	; (8008540 <CheckForTimedButtonPress+0x6c>)
 8008508:	58e3      	ldr	r3, [r4, r3]
 800850a:	42ab      	cmp	r3, r5
 800850c:	d009      	beq.n	8008522 <CheckForTimedButtonPress+0x4e>
		button[port].state =PRESSED_FOR_X1_SEC;
	}
	else if(pressCounter[port] == t2){
 800850e:	4293      	cmp	r3, r2
 8008510:	d00e      	beq.n	8008530 <CheckForTimedButtonPress+0x5c>
		button[port].state =PRESSED_FOR_X2_SEC;
	}
	else if(pressCounter[port] == t3){
 8008512:	428b      	cmp	r3, r1
 8008514:	d10a      	bne.n	800852c <CheckForTimedButtonPress+0x58>
		button[port].state =PRESSED_FOR_X2_SEC;
 8008516:	00c3      	lsls	r3, r0, #3
 8008518:	1818      	adds	r0, r3, r0
 800851a:	4b08      	ldr	r3, [pc, #32]	; (800853c <CheckForTimedButtonPress+0x68>)
 800851c:	220a      	movs	r2, #10
 800851e:	54c2      	strb	r2, [r0, r3]
 8008520:	e004      	b.n	800852c <CheckForTimedButtonPress+0x58>
		button[port].state =PRESSED_FOR_X1_SEC;
 8008522:	00c3      	lsls	r3, r0, #3
 8008524:	1818      	adds	r0, r3, r0
 8008526:	4b05      	ldr	r3, [pc, #20]	; (800853c <CheckForTimedButtonPress+0x68>)
 8008528:	2209      	movs	r2, #9
 800852a:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 800852c:	2000      	movs	r0, #0
 800852e:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state =PRESSED_FOR_X2_SEC;
 8008530:	00c3      	lsls	r3, r0, #3
 8008532:	1818      	adds	r0, r3, r0
 8008534:	4b01      	ldr	r3, [pc, #4]	; (800853c <CheckForTimedButtonPress+0x68>)
 8008536:	220a      	movs	r2, #10
 8008538:	54c2      	strb	r2, [r0, r3]
 800853a:	e7f7      	b.n	800852c <CheckForTimedButtonPress+0x58>
 800853c:	200014b4 	.word	0x200014b4
 8008540:	200014fc 	.word	0x200014fc

08008544 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port){
 8008544:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008546:	00c2      	lsls	r2, r0, #3
 8008548:	1812      	adds	r2, r2, r0
 800854a:	4b18      	ldr	r3, [pc, #96]	; (80085ac <CheckForTimedButtonRelease+0x68>)
 800854c:	189b      	adds	r3, r3, r2
 800854e:	795a      	ldrb	r2, [r3, #5]
 8008550:	799e      	ldrb	r6, [r3, #6]
 8008552:	79dc      	ldrb	r4, [r3, #7]
	
	/* Convert to ms */
	t1 *=1000;
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	1a89      	subs	r1, r1, r2
 8008558:	0089      	lsls	r1, r1, #2
 800855a:	1889      	adds	r1, r1, r2
 800855c:	00cd      	lsls	r5, r1, #3
	t2 *=1000;
 800855e:	0172      	lsls	r2, r6, #5
 8008560:	1b92      	subs	r2, r2, r6
 8008562:	0092      	lsls	r2, r2, #2
 8008564:	1992      	adds	r2, r2, r6
 8008566:	00d3      	lsls	r3, r2, #3
 8008568:	001a      	movs	r2, r3
	t3 *=1000;
 800856a:	0163      	lsls	r3, r4, #5
 800856c:	1b1b      	subs	r3, r3, r4
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	191b      	adds	r3, r3, r4
 8008572:	00d9      	lsls	r1, r3, #3
	
	if(releaseCounter[port] == t1){
 8008574:	0084      	lsls	r4, r0, #2
 8008576:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <CheckForTimedButtonRelease+0x6c>)
 8008578:	58e3      	ldr	r3, [r4, r3]
 800857a:	42ab      	cmp	r3, r5
 800857c:	d009      	beq.n	8008592 <CheckForTimedButtonRelease+0x4e>
		button[port].state =RELEASED_FOR_Y1_SEC;
	}
	else if(releaseCounter[port] == t2){
 800857e:	4293      	cmp	r3, r2
 8008580:	d00e      	beq.n	80085a0 <CheckForTimedButtonRelease+0x5c>
		button[port].state =RELEASED_FOR_Y2_SEC;
	}
	else if(releaseCounter[port] == t3){
 8008582:	428b      	cmp	r3, r1
 8008584:	d10a      	bne.n	800859c <CheckForTimedButtonRelease+0x58>
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008586:	00c3      	lsls	r3, r0, #3
 8008588:	1818      	adds	r0, r3, r0
 800858a:	4b08      	ldr	r3, [pc, #32]	; (80085ac <CheckForTimedButtonRelease+0x68>)
 800858c:	220d      	movs	r2, #13
 800858e:	54c2      	strb	r2, [r0, r3]
 8008590:	e004      	b.n	800859c <CheckForTimedButtonRelease+0x58>
		button[port].state =RELEASED_FOR_Y1_SEC;
 8008592:	00c3      	lsls	r3, r0, #3
 8008594:	1818      	adds	r0, r3, r0
 8008596:	4b05      	ldr	r3, [pc, #20]	; (80085ac <CheckForTimedButtonRelease+0x68>)
 8008598:	220c      	movs	r2, #12
 800859a:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 800859c:	2000      	movs	r0, #0
 800859e:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state =RELEASED_FOR_Y2_SEC;
 80085a0:	00c3      	lsls	r3, r0, #3
 80085a2:	1818      	adds	r0, r3, r0
 80085a4:	4b01      	ldr	r3, [pc, #4]	; (80085ac <CheckForTimedButtonRelease+0x68>)
 80085a6:	220d      	movs	r2, #13
 80085a8:	54c2      	strb	r2, [r0, r3]
 80085aa:	e7f7      	b.n	800859c <CheckForTimedButtonRelease+0x58>
 80085ac:	200014b4 	.word	0x200014b4
 80085b0:	20001514 	.word	0x20001514

080085b4 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 80085b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085b6:	b08d      	sub	sp, #52	; 0x34
 80085b8:	0006      	movs	r6, r0
 80085ba:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 80085bc:	4b41      	ldr	r3, [pc, #260]	; (80086c4 <AddPortButton+0x110>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d157      	bne.n	8008674 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 80085c4:	4b40      	ldr	r3, [pc, #256]	; (80086c8 <AddPortButton+0x114>)
 80085c6:	2204      	movs	r2, #4
 80085c8:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if(BOS_initialized){
 80085ca:	4b3e      	ldr	r3, [pc, #248]	; (80086c4 <AddPortButton+0x110>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d15a      	bne.n	8008688 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 80085d2:	2512      	movs	r5, #18
 80085d4:	446d      	add	r5, sp
 80085d6:	af04      	add	r7, sp, #16
 80085d8:	9700      	str	r7, [sp, #0]
 80085da:	ab05      	add	r3, sp, #20
 80085dc:	002a      	movs	r2, r5
 80085de:	a906      	add	r1, sp, #24
 80085e0:	0020      	movs	r0, r4
 80085e2:	f006 fb95 	bl	800ed10 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 80085e6:	882b      	ldrh	r3, [r5, #0]
 80085e8:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085ea:	2301      	movs	r3, #1
 80085ec:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ee:	2500      	movs	r5, #0
 80085f0:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80085f2:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 80085f4:	a907      	add	r1, sp, #28
 80085f6:	9806      	ldr	r0, [sp, #24]
 80085f8:	f00a fd3a 	bl	8013070 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 80085fc:	883b      	ldrh	r3, [r7, #0]
 80085fe:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008600:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008602:	2302      	movs	r3, #2
 8008604:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 8008606:	a907      	add	r1, sp, #28
 8008608:	9805      	ldr	r0, [sp, #20]
 800860a:	f00a fd31 	bl	8013070 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 800860e:	00e2      	lsls	r2, r4, #3
 8008610:	1912      	adds	r2, r2, r4
 8008612:	4b2e      	ldr	r3, [pc, #184]	; (80086cc <AddPortButton+0x118>)
 8008614:	189b      	adds	r3, r3, r2
 8008616:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008618:	0025      	movs	r5, r4
 800861a:	353a      	adds	r5, #58	; 0x3a
 800861c:	00ad      	lsls	r5, r5, #2
 800861e:	210e      	movs	r1, #14
 8008620:	4469      	add	r1, sp
 8008622:	0028      	movs	r0, r5
 8008624:	f7ff faf2 	bl	8007c0c <EE_ReadVariable>
	if(!res)											// This variable exists
 8008628:	2800      	cmp	r0, #0
 800862a:	d133      	bne.n	8008694 <AddPortButton+0xe0>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 800862c:	230e      	movs	r3, #14
 800862e:	446b      	add	r3, sp
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	0a1b      	lsrs	r3, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 8008634:	091a      	lsrs	r2, r3, #4
 8008636:	42a2      	cmp	r2, r4
 8008638:	d103      	bne.n	8008642 <AddPortButton+0x8e>
 800863a:	220f      	movs	r2, #15
 800863c:	4013      	ands	r3, r2
 800863e:	42b3      	cmp	r3, r6
 8008640:	d015      	beq.n	800866e <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 8008642:	0324      	lsls	r4, r4, #12
 8008644:	0231      	lsls	r1, r6, #8
 8008646:	4321      	orrs	r1, r4
 8008648:	b289      	uxth	r1, r1
 800864a:	230e      	movs	r3, #14
 800864c:	446b      	add	r3, sp
 800864e:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008650:	0028      	movs	r0, r5
 8008652:	f7ff fb8d 	bl	8007d70 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008656:	1c68      	adds	r0, r5, #1
 8008658:	2100      	movs	r1, #0
 800865a:	f7ff fb89 	bl	8007d70 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 800865e:	1ca8      	adds	r0, r5, #2
 8008660:	2100      	movs	r1, #0
 8008662:	f7ff fb85 	bl	8007d70 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8008666:	1ce8      	adds	r0, r5, #3
 8008668:	2100      	movs	r1, #0
 800866a:	f7ff fb81 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	return result;
}
 800866e:	2000      	movs	r0, #0
 8008670:	b00d      	add	sp, #52	; 0x34
 8008672:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 8008674:	008d      	lsls	r5, r1, #2
 8008676:	4b16      	ldr	r3, [pc, #88]	; (80086d0 <AddPortButton+0x11c>)
 8008678:	58e8      	ldr	r0, [r5, r3]
 800867a:	f007 fa1d 	bl	800fab8 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800867e:	4b15      	ldr	r3, [pc, #84]	; (80086d4 <AddPortButton+0x120>)
 8008680:	58e8      	ldr	r0, [r5, r3]
 8008682:	f007 fa19 	bl	800fab8 <osSemaphoreRelease>
 8008686:	e79d      	b.n	80085c4 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008688:	0020      	movs	r0, r4
 800868a:	f007 f86f 	bl	800f76c <GetUart>
 800868e:	f00b fda2 	bl	80141d6 <HAL_UART_DeInit>
 8008692:	e79e      	b.n	80085d2 <AddPortButton+0x1e>
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 8008694:	0324      	lsls	r4, r4, #12
 8008696:	0231      	lsls	r1, r6, #8
 8008698:	4321      	orrs	r1, r4
 800869a:	b289      	uxth	r1, r1
 800869c:	230e      	movs	r3, #14
 800869e:	446b      	add	r3, sp
 80086a0:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80086a2:	0028      	movs	r0, r5
 80086a4:	f7ff fb64 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80086a8:	1c68      	adds	r0, r5, #1
 80086aa:	2100      	movs	r1, #0
 80086ac:	f7ff fb60 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80086b0:	1ca8      	adds	r0, r5, #2
 80086b2:	2100      	movs	r1, #0
 80086b4:	f7ff fb5c 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80086b8:	1ce8      	adds	r0, r5, #3
 80086ba:	2100      	movs	r1, #0
 80086bc:	f7ff fb58 	bl	8007d70 <EE_WriteVariable>
 80086c0:	e7d5      	b.n	800866e <AddPortButton+0xba>
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	20000a9d 	.word	0x20000a9d
 80086c8:	200010e0 	.word	0x200010e0
 80086cc:	200014b4 	.word	0x200014b4
 80086d0:	20006e3c 	.word	0x20006e3c
 80086d4:	20006e20 	.word	0x20006e20

080086d8 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	0004      	movs	r4, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 80086de:	4836      	ldr	r0, [pc, #216]	; (80087b8 <RemovePortButton+0xe0>)
 80086e0:	00e1      	lsls	r1, r4, #3
 80086e2:	1909      	adds	r1, r1, r4
 80086e4:	1842      	adds	r2, r0, r1
 80086e6:	2300      	movs	r3, #0
 80086e8:	7053      	strb	r3, [r2, #1]
	button[port].state =NONE;
 80086ea:	540b      	strb	r3, [r1, r0]
	button[port].events =0;
 80086ec:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 80086ee:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 80086f0:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 80086f2:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 80086f4:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 80086f6:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 80086f8:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80086fa:	0025      	movs	r5, r4
 80086fc:	353a      	adds	r5, #58	; 0x3a
 80086fe:	00ad      	lsls	r5, r5, #2
 8008700:	466b      	mov	r3, sp
 8008702:	1d99      	adds	r1, r3, #6
 8008704:	0028      	movs	r0, r5
 8008706:	f7ff fa81 	bl	8007c0c <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 800870a:	2800      	cmp	r0, #0
 800870c:	d01e      	beq.n	800874c <RemovePortButton+0x74>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 800870e:	0020      	movs	r0, r4
 8008710:	f007 f82c 	bl	800f76c <GetUart>
 8008714:	0005      	movs	r5, r0
	
	if(huart->Instance == USART1){
 8008716:	6803      	ldr	r3, [r0, #0]
 8008718:	4a28      	ldr	r2, [pc, #160]	; (80087bc <RemovePortButton+0xe4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d03d      	beq.n	800879a <RemovePortButton+0xc2>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 800871e:	4a28      	ldr	r2, [pc, #160]	; (80087c0 <RemovePortButton+0xe8>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d024      	beq.n	800876e <RemovePortButton+0x96>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 8008724:	4a27      	ldr	r2, [pc, #156]	; (80087c4 <RemovePortButton+0xec>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d025      	beq.n	8008776 <RemovePortButton+0x9e>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 800872a:	4a27      	ldr	r2, [pc, #156]	; (80087c8 <RemovePortButton+0xf0>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d026      	beq.n	800877e <RemovePortButton+0xa6>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 8008730:	4a26      	ldr	r2, [pc, #152]	; (80087cc <RemovePortButton+0xf4>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d027      	beq.n	8008786 <RemovePortButton+0xae>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 8008736:	4a26      	ldr	r2, [pc, #152]	; (80087d0 <RemovePortButton+0xf8>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d028      	beq.n	800878e <RemovePortButton+0xb6>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 800873c:	4a25      	ldr	r2, [pc, #148]	; (80087d4 <RemovePortButton+0xfc>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d037      	beq.n	80087b2 <RemovePortButton+0xda>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 8008742:	4a25      	ldr	r2, [pc, #148]	; (80087d8 <RemovePortButton+0x100>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d026      	beq.n	8008796 <RemovePortButton+0xbe>
#ifdef _Usart8	
		MX_USART8_UART_Init();
#endif
	}
	else
		result =BOS_ERROR;
 8008748:	26ff      	movs	r6, #255	; 0xff
 800874a:	e027      	b.n	800879c <RemovePortButton+0xc4>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 800874c:	2100      	movs	r1, #0
 800874e:	0028      	movs	r0, r5
 8008750:	f7ff fb0e 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008754:	1c68      	adds	r0, r5, #1
 8008756:	2100      	movs	r1, #0
 8008758:	f7ff fb0a 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 800875c:	1ca8      	adds	r0, r5, #2
 800875e:	2100      	movs	r1, #0
 8008760:	f7ff fb06 	bl	8007d70 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8008764:	1ce8      	adds	r0, r5, #3
 8008766:	2100      	movs	r1, #0
 8008768:	f7ff fb02 	bl	8007d70 <EE_WriteVariable>
 800876c:	e7cf      	b.n	800870e <RemovePortButton+0x36>
		MX_USART2_UART_Init();
 800876e:	f006 fe7b 	bl	800f468 <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 8008772:	2600      	movs	r6, #0
 8008774:	e012      	b.n	800879c <RemovePortButton+0xc4>
		MX_USART3_UART_Init();
 8008776:	f006 fe8f 	bl	800f498 <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 800877a:	2600      	movs	r6, #0
 800877c:	e00e      	b.n	800879c <RemovePortButton+0xc4>
		MX_USART4_UART_Init();
 800877e:	f006 fea3 	bl	800f4c8 <MX_USART4_UART_Init>
	BOS_Status result =BOS_OK;
 8008782:	2600      	movs	r6, #0
 8008784:	e00a      	b.n	800879c <RemovePortButton+0xc4>
		MX_USART5_UART_Init();
 8008786:	f006 feb7 	bl	800f4f8 <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 800878a:	2600      	movs	r6, #0
 800878c:	e006      	b.n	800879c <RemovePortButton+0xc4>
		MX_USART6_UART_Init();
 800878e:	f006 fecb 	bl	800f528 <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 8008792:	2600      	movs	r6, #0
 8008794:	e002      	b.n	800879c <RemovePortButton+0xc4>
 8008796:	2600      	movs	r6, #0
 8008798:	e000      	b.n	800879c <RemovePortButton+0xc4>
 800879a:	2600      	movs	r6, #0
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 800879c:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <RemovePortButton+0x104>)
 800879e:	2200      	movs	r2, #0
 80087a0:	551a      	strb	r2, [r3, r4]
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 80087a2:	3201      	adds	r2, #1
 80087a4:	490e      	ldr	r1, [pc, #56]	; (80087e0 <RemovePortButton+0x108>)
 80087a6:	0028      	movs	r0, r5
 80087a8:	f00b fd6e 	bl	8014288 <HAL_UART_Receive_IT>
	
	return result;
}
 80087ac:	0030      	movs	r0, r6
 80087ae:	b002      	add	sp, #8
 80087b0:	bd70      	pop	{r4, r5, r6, pc}
	BOS_Status result =BOS_OK;
 80087b2:	2600      	movs	r6, #0
 80087b4:	e7f2      	b.n	800879c <RemovePortButton+0xc4>
 80087b6:	46c0      	nop			; (mov r8, r8)
 80087b8:	200014b4 	.word	0x200014b4
 80087bc:	40013800 	.word	0x40013800
 80087c0:	40004400 	.word	0x40004400
 80087c4:	40004800 	.word	0x40004800
 80087c8:	40004c00 	.word	0x40004c00
 80087cc:	40005000 	.word	0x40005000
 80087d0:	40011400 	.word	0x40011400
 80087d4:	40011800 	.word	0x40011800
 80087d8:	40011c00 	.word	0x40011c00
 80087dc:	200010e0 	.word	0x200010e0
 80087e0:	20000e48 	.word	0x20000e48

080087e4 <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 80087e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e6:	46de      	mov	lr, fp
 80087e8:	4657      	mov	r7, sl
 80087ea:	464e      	mov	r6, r9
 80087ec:	4645      	mov	r5, r8
 80087ee:	b5e0      	push	{r5, r6, r7, lr}
 80087f0:	b085      	sub	sp, #20
 80087f2:	0007      	movs	r7, r0
 80087f4:	469b      	mov	fp, r3
 80087f6:	ab0e      	add	r3, sp, #56	; 0x38
 80087f8:	781e      	ldrb	r6, [r3, #0]
 80087fa:	ab0f      	add	r3, sp, #60	; 0x3c
 80087fc:	781d      	ldrb	r5, [r3, #0]
 80087fe:	ab10      	add	r3, sp, #64	; 0x40
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	469a      	mov	sl, r3
 8008804:	ab11      	add	r3, sp, #68	; 0x44
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	4699      	mov	r9, r3
 800880a:	ab12      	add	r3, sp, #72	; 0x48
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	4698      	mov	r8, r3
 8008810:	ab13      	add	r3, sp, #76	; 0x4c
 8008812:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 8008814:	00c4      	lsls	r4, r0, #3
 8008816:	1824      	adds	r4, r4, r0
 8008818:	48b3      	ldr	r0, [pc, #716]	; (8008ae8 <SetButtonEvents+0x304>)
 800881a:	1900      	adds	r0, r0, r4
 800881c:	7840      	ldrb	r0, [r0, #1]
 800881e:	2800      	cmp	r0, #0
 8008820:	d100      	bne.n	8008824 <SetButtonEvents+0x40>
 8008822:	e155      	b.n	8008ad0 <SetButtonEvents+0x2ec>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 8008824:	00fc      	lsls	r4, r7, #3
 8008826:	19e4      	adds	r4, r4, r7
 8008828:	48af      	ldr	r0, [pc, #700]	; (8008ae8 <SetButtonEvents+0x304>)
 800882a:	1900      	adds	r0, r0, r4
 800882c:	465c      	mov	r4, fp
 800882e:	7084      	strb	r4, [r0, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 8008830:	70c6      	strb	r6, [r0, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 8008832:	7105      	strb	r5, [r0, #4]
	button[port].releasedY1Sec =released_y1sec;
 8008834:	4654      	mov	r4, sl
 8008836:	7144      	strb	r4, [r0, #5]
	button[port].releasedY2Sec =released_y2sec;
 8008838:	464c      	mov	r4, r9
 800883a:	7184      	strb	r4, [r0, #6]
	button[port].releasedY3Sec =released_y3sec;
 800883c:	4644      	mov	r4, r8
 800883e:	71c4      	strb	r4, [r0, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 8008840:	2b01      	cmp	r3, #1
 8008842:	d005      	beq.n	8008850 <SetButtonEvents+0x6c>
 8008844:	2b00      	cmp	r3, #0
 8008846:	d000      	beq.n	800884a <SetButtonEvents+0x66>
 8008848:	e0ca      	b.n	80089e0 <SetButtonEvents+0x1fc>
 800884a:	2900      	cmp	r1, #0
 800884c:	d100      	bne.n	8008850 <SetButtonEvents+0x6c>
 800884e:	e0c7      	b.n	80089e0 <SetButtonEvents+0x1fc>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008850:	00f8      	lsls	r0, r7, #3
 8008852:	19c0      	adds	r0, r0, r7
 8008854:	49a4      	ldr	r1, [pc, #656]	; (8008ae8 <SetButtonEvents+0x304>)
 8008856:	1809      	adds	r1, r1, r0
 8008858:	7a08      	ldrb	r0, [r1, #8]
 800885a:	2401      	movs	r4, #1
 800885c:	4320      	orrs	r0, r4
 800885e:	7208      	strb	r0, [r1, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
		button[port].events &=~BUTTON_EVENT_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008860:	2b01      	cmp	r3, #1
 8008862:	d005      	beq.n	8008870 <SetButtonEvents+0x8c>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d000      	beq.n	800886a <SetButtonEvents+0x86>
 8008868:	e0c6      	b.n	80089f8 <SetButtonEvents+0x214>
 800886a:	2a00      	cmp	r2, #0
 800886c:	d100      	bne.n	8008870 <SetButtonEvents+0x8c>
 800886e:	e0c3      	b.n	80089f8 <SetButtonEvents+0x214>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008870:	00f9      	lsls	r1, r7, #3
 8008872:	19c9      	adds	r1, r1, r7
 8008874:	4a9c      	ldr	r2, [pc, #624]	; (8008ae8 <SetButtonEvents+0x304>)
 8008876:	1852      	adds	r2, r2, r1
 8008878:	7a11      	ldrb	r1, [r2, #8]
 800887a:	2002      	movs	r0, #2
 800887c:	4301      	orrs	r1, r0
 800887e:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 8008880:	2b01      	cmp	r3, #1
 8008882:	d006      	beq.n	8008892 <SetButtonEvents+0xae>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d000      	beq.n	800888a <SetButtonEvents+0xa6>
 8008888:	e0c2      	b.n	8008a10 <SetButtonEvents+0x22c>
 800888a:	465a      	mov	r2, fp
 800888c:	2a00      	cmp	r2, #0
 800888e:	d100      	bne.n	8008892 <SetButtonEvents+0xae>
 8008890:	e0be      	b.n	8008a10 <SetButtonEvents+0x22c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008892:	00f9      	lsls	r1, r7, #3
 8008894:	19c9      	adds	r1, r1, r7
 8008896:	4a94      	ldr	r2, [pc, #592]	; (8008ae8 <SetButtonEvents+0x304>)
 8008898:	1852      	adds	r2, r2, r1
 800889a:	7a11      	ldrb	r1, [r2, #8]
 800889c:	2004      	movs	r0, #4
 800889e:	4301      	orrs	r1, r0
 80088a0:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d005      	beq.n	80088b2 <SetButtonEvents+0xce>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d000      	beq.n	80088ac <SetButtonEvents+0xc8>
 80088aa:	e0be      	b.n	8008a2a <SetButtonEvents+0x246>
 80088ac:	2e00      	cmp	r6, #0
 80088ae:	d100      	bne.n	80088b2 <SetButtonEvents+0xce>
 80088b0:	e0bb      	b.n	8008a2a <SetButtonEvents+0x246>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80088b2:	00f9      	lsls	r1, r7, #3
 80088b4:	19c9      	adds	r1, r1, r7
 80088b6:	4a8c      	ldr	r2, [pc, #560]	; (8008ae8 <SetButtonEvents+0x304>)
 80088b8:	1852      	adds	r2, r2, r1
 80088ba:	7a11      	ldrb	r1, [r2, #8]
 80088bc:	2008      	movs	r0, #8
 80088be:	4301      	orrs	r1, r0
 80088c0:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d005      	beq.n	80088d2 <SetButtonEvents+0xee>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d000      	beq.n	80088cc <SetButtonEvents+0xe8>
 80088ca:	e0bb      	b.n	8008a44 <SetButtonEvents+0x260>
 80088cc:	2d00      	cmp	r5, #0
 80088ce:	d100      	bne.n	80088d2 <SetButtonEvents+0xee>
 80088d0:	e0b8      	b.n	8008a44 <SetButtonEvents+0x260>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80088d2:	00f9      	lsls	r1, r7, #3
 80088d4:	19c9      	adds	r1, r1, r7
 80088d6:	4a84      	ldr	r2, [pc, #528]	; (8008ae8 <SetButtonEvents+0x304>)
 80088d8:	1852      	adds	r2, r2, r1
 80088da:	7a11      	ldrb	r1, [r2, #8]
 80088dc:	2010      	movs	r0, #16
 80088de:	4301      	orrs	r1, r0
 80088e0:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d006      	beq.n	80088f4 <SetButtonEvents+0x110>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d000      	beq.n	80088ec <SetButtonEvents+0x108>
 80088ea:	e0b8      	b.n	8008a5e <SetButtonEvents+0x27a>
 80088ec:	4652      	mov	r2, sl
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	d100      	bne.n	80088f4 <SetButtonEvents+0x110>
 80088f2:	e0b4      	b.n	8008a5e <SetButtonEvents+0x27a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80088f4:	00f9      	lsls	r1, r7, #3
 80088f6:	19c9      	adds	r1, r1, r7
 80088f8:	4a7b      	ldr	r2, [pc, #492]	; (8008ae8 <SetButtonEvents+0x304>)
 80088fa:	1852      	adds	r2, r2, r1
 80088fc:	7a11      	ldrb	r1, [r2, #8]
 80088fe:	2020      	movs	r0, #32
 8008900:	4301      	orrs	r1, r0
 8008902:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008904:	2b01      	cmp	r3, #1
 8008906:	d006      	beq.n	8008916 <SetButtonEvents+0x132>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d000      	beq.n	800890e <SetButtonEvents+0x12a>
 800890c:	e0b4      	b.n	8008a78 <SetButtonEvents+0x294>
 800890e:	464a      	mov	r2, r9
 8008910:	2a00      	cmp	r2, #0
 8008912:	d100      	bne.n	8008916 <SetButtonEvents+0x132>
 8008914:	e0b0      	b.n	8008a78 <SetButtonEvents+0x294>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008916:	00f9      	lsls	r1, r7, #3
 8008918:	19c9      	adds	r1, r1, r7
 800891a:	4a73      	ldr	r2, [pc, #460]	; (8008ae8 <SetButtonEvents+0x304>)
 800891c:	1852      	adds	r2, r2, r1
 800891e:	7a11      	ldrb	r1, [r2, #8]
 8008920:	2040      	movs	r0, #64	; 0x40
 8008922:	4301      	orrs	r1, r0
 8008924:	7211      	strb	r1, [r2, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008926:	2b01      	cmp	r3, #1
 8008928:	d006      	beq.n	8008938 <SetButtonEvents+0x154>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d000      	beq.n	8008930 <SetButtonEvents+0x14c>
 800892e:	e0b0      	b.n	8008a92 <SetButtonEvents+0x2ae>
 8008930:	4642      	mov	r2, r8
 8008932:	2a00      	cmp	r2, #0
 8008934:	d100      	bne.n	8008938 <SetButtonEvents+0x154>
 8008936:	e0ac      	b.n	8008a92 <SetButtonEvents+0x2ae>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008938:	00fa      	lsls	r2, r7, #3
 800893a:	19d2      	adds	r2, r2, r7
 800893c:	4b6a      	ldr	r3, [pc, #424]	; (8008ae8 <SetButtonEvents+0x304>)
 800893e:	189b      	adds	r3, r3, r2
 8008940:	7a19      	ldrb	r1, [r3, #8]
 8008942:	2280      	movs	r2, #128	; 0x80
 8008944:	4252      	negs	r2, r2
 8008946:	430a      	orrs	r2, r1
 8008948:	721a      	strb	r2, [r3, #8]
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}
	
	/* Add to EEPROM */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800894a:	003c      	movs	r4, r7
 800894c:	343a      	adds	r4, #58	; 0x3a
 800894e:	00a4      	lsls	r4, r4, #2
 8008950:	ab02      	add	r3, sp, #8
 8008952:	1d99      	adds	r1, r3, #6
 8008954:	0020      	movs	r0, r4
 8008956:	f7ff f959 	bl	8007c0c <EE_ReadVariable>
	if(!res)											// This variable exists
 800895a:	2800      	cmp	r0, #0
 800895c:	d000      	beq.n	8008960 <SetButtonEvents+0x17c>
 800895e:	e0bf      	b.n	8008ae0 <SetButtonEvents+0x2fc>
	{
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 8008960:	ab02      	add	r3, sp, #8
 8008962:	3306      	adds	r3, #6
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	0a18      	lsrs	r0, r3, #8
		/* Store event flags */
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 8008968:	b2db      	uxtb	r3, r3
 800896a:	00fa      	lsls	r2, r7, #3
 800896c:	19d2      	adds	r2, r2, r7
 800896e:	4f5e      	ldr	r7, [pc, #376]	; (8008ae8 <SetButtonEvents+0x304>)
 8008970:	18bf      	adds	r7, r7, r2
 8008972:	7a39      	ldrb	r1, [r7, #8]
 8008974:	428b      	cmp	r3, r1
 8008976:	d000      	beq.n	800897a <SetButtonEvents+0x196>
 8008978:	e098      	b.n	8008aac <SetButtonEvents+0x2c8>
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 800897a:	1c63      	adds	r3, r4, #1
 800897c:	aa02      	add	r2, sp, #8
 800897e:	1d97      	adds	r7, r2, #6
 8008980:	0039      	movs	r1, r7
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	0018      	movs	r0, r3
 8008986:	f7ff f941 	bl	8007c0c <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 800898a:	883a      	ldrh	r2, [r7, #0]
 800898c:	4659      	mov	r1, fp
 800898e:	0209      	lsls	r1, r1, #8
 8008990:	4653      	mov	r3, sl
 8008992:	430b      	orrs	r3, r1
 8008994:	429a      	cmp	r2, r3
 8008996:	d000      	beq.n	800899a <SetButtonEvents+0x1b6>
 8008998:	e090      	b.n	8008abc <SetButtonEvents+0x2d8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 800899a:	1ca3      	adds	r3, r4, #2
 800899c:	aa02      	add	r2, sp, #8
 800899e:	1d97      	adds	r7, r2, #6
 80089a0:	0039      	movs	r1, r7
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	0018      	movs	r0, r3
 80089a6:	f7ff f931 	bl	8007c0c <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 80089aa:	883a      	ldrh	r2, [r7, #0]
 80089ac:	0236      	lsls	r6, r6, #8
 80089ae:	464b      	mov	r3, r9
 80089b0:	4333      	orrs	r3, r6
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d000      	beq.n	80089b8 <SetButtonEvents+0x1d4>
 80089b6:	e086      	b.n	8008ac6 <SetButtonEvents+0x2e2>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 80089b8:	3403      	adds	r4, #3
 80089ba:	ab02      	add	r3, sp, #8
 80089bc:	1d9e      	adds	r6, r3, #6
 80089be:	0031      	movs	r1, r6
 80089c0:	0020      	movs	r0, r4
 80089c2:	f7ff f923 	bl	8007c0c <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 80089c6:	8832      	ldrh	r2, [r6, #0]
 80089c8:	022d      	lsls	r5, r5, #8
 80089ca:	4643      	mov	r3, r8
 80089cc:	432b      	orrs	r3, r5
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d100      	bne.n	80089d4 <SetButtonEvents+0x1f0>
 80089d2:	e087      	b.n	8008ae4 <SetButtonEvents+0x300>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 80089d4:	0019      	movs	r1, r3
 80089d6:	0020      	movs	r0, r4
 80089d8:	f7ff f9ca 	bl	8007d70 <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
 80089dc:	2000      	movs	r0, #0
 80089de:	e078      	b.n	8008ad2 <SetButtonEvents+0x2ee>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
 80089e0:	4319      	orrs	r1, r3
 80089e2:	d000      	beq.n	80089e6 <SetButtonEvents+0x202>
 80089e4:	e73c      	b.n	8008860 <SetButtonEvents+0x7c>
		button[port].events &=~BUTTON_EVENT_CLICKED;
 80089e6:	00f8      	lsls	r0, r7, #3
 80089e8:	19c0      	adds	r0, r0, r7
 80089ea:	493f      	ldr	r1, [pc, #252]	; (8008ae8 <SetButtonEvents+0x304>)
 80089ec:	1809      	adds	r1, r1, r0
 80089ee:	7a08      	ldrb	r0, [r1, #8]
 80089f0:	2401      	movs	r4, #1
 80089f2:	43a0      	bics	r0, r4
 80089f4:	7208      	strb	r0, [r1, #8]
 80089f6:	e733      	b.n	8008860 <SetButtonEvents+0x7c>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
 80089f8:	431a      	orrs	r2, r3
 80089fa:	d000      	beq.n	80089fe <SetButtonEvents+0x21a>
 80089fc:	e740      	b.n	8008880 <SetButtonEvents+0x9c>
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 80089fe:	00f9      	lsls	r1, r7, #3
 8008a00:	19c9      	adds	r1, r1, r7
 8008a02:	4a39      	ldr	r2, [pc, #228]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a04:	1852      	adds	r2, r2, r1
 8008a06:	7a11      	ldrb	r1, [r2, #8]
 8008a08:	2002      	movs	r0, #2
 8008a0a:	4381      	bics	r1, r0
 8008a0c:	7211      	strb	r1, [r2, #8]
 8008a0e:	e737      	b.n	8008880 <SetButtonEvents+0x9c>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
 8008a10:	465a      	mov	r2, fp
 8008a12:	431a      	orrs	r2, r3
 8008a14:	d000      	beq.n	8008a18 <SetButtonEvents+0x234>
 8008a16:	e744      	b.n	80088a2 <SetButtonEvents+0xbe>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008a18:	00f9      	lsls	r1, r7, #3
 8008a1a:	19c9      	adds	r1, r1, r7
 8008a1c:	4a32      	ldr	r2, [pc, #200]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a1e:	1852      	adds	r2, r2, r1
 8008a20:	7a11      	ldrb	r1, [r2, #8]
 8008a22:	2004      	movs	r0, #4
 8008a24:	4381      	bics	r1, r0
 8008a26:	7211      	strb	r1, [r2, #8]
 8008a28:	e73b      	b.n	80088a2 <SetButtonEvents+0xbe>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec){
 8008a2a:	0032      	movs	r2, r6
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	d000      	beq.n	8008a32 <SetButtonEvents+0x24e>
 8008a30:	e747      	b.n	80088c2 <SetButtonEvents+0xde>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008a32:	00f9      	lsls	r1, r7, #3
 8008a34:	19c9      	adds	r1, r1, r7
 8008a36:	4a2c      	ldr	r2, [pc, #176]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a38:	1852      	adds	r2, r2, r1
 8008a3a:	7a11      	ldrb	r1, [r2, #8]
 8008a3c:	2008      	movs	r0, #8
 8008a3e:	4381      	bics	r1, r0
 8008a40:	7211      	strb	r1, [r2, #8]
 8008a42:	e73e      	b.n	80088c2 <SetButtonEvents+0xde>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
 8008a44:	002a      	movs	r2, r5
 8008a46:	431a      	orrs	r2, r3
 8008a48:	d000      	beq.n	8008a4c <SetButtonEvents+0x268>
 8008a4a:	e74a      	b.n	80088e2 <SetButtonEvents+0xfe>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008a4c:	00f9      	lsls	r1, r7, #3
 8008a4e:	19c9      	adds	r1, r1, r7
 8008a50:	4a25      	ldr	r2, [pc, #148]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a52:	1852      	adds	r2, r2, r1
 8008a54:	7a11      	ldrb	r1, [r2, #8]
 8008a56:	2010      	movs	r0, #16
 8008a58:	4381      	bics	r1, r0
 8008a5a:	7211      	strb	r1, [r2, #8]
 8008a5c:	e741      	b.n	80088e2 <SetButtonEvents+0xfe>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec){
 8008a5e:	4652      	mov	r2, sl
 8008a60:	431a      	orrs	r2, r3
 8008a62:	d000      	beq.n	8008a66 <SetButtonEvents+0x282>
 8008a64:	e74e      	b.n	8008904 <SetButtonEvents+0x120>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008a66:	00f9      	lsls	r1, r7, #3
 8008a68:	19c9      	adds	r1, r1, r7
 8008a6a:	4a1f      	ldr	r2, [pc, #124]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a6c:	1852      	adds	r2, r2, r1
 8008a6e:	7a11      	ldrb	r1, [r2, #8]
 8008a70:	2020      	movs	r0, #32
 8008a72:	4381      	bics	r1, r0
 8008a74:	7211      	strb	r1, [r2, #8]
 8008a76:	e745      	b.n	8008904 <SetButtonEvents+0x120>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
 8008a78:	464a      	mov	r2, r9
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	d000      	beq.n	8008a80 <SetButtonEvents+0x29c>
 8008a7e:	e752      	b.n	8008926 <SetButtonEvents+0x142>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008a80:	00f9      	lsls	r1, r7, #3
 8008a82:	19c9      	adds	r1, r1, r7
 8008a84:	4a18      	ldr	r2, [pc, #96]	; (8008ae8 <SetButtonEvents+0x304>)
 8008a86:	1852      	adds	r2, r2, r1
 8008a88:	7a11      	ldrb	r1, [r2, #8]
 8008a8a:	2040      	movs	r0, #64	; 0x40
 8008a8c:	4381      	bics	r1, r0
 8008a8e:	7211      	strb	r1, [r2, #8]
 8008a90:	e749      	b.n	8008926 <SetButtonEvents+0x142>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec){
 8008a92:	4642      	mov	r2, r8
 8008a94:	4313      	orrs	r3, r2
 8008a96:	d000      	beq.n	8008a9a <SetButtonEvents+0x2b6>
 8008a98:	e757      	b.n	800894a <SetButtonEvents+0x166>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008a9a:	00fa      	lsls	r2, r7, #3
 8008a9c:	19d2      	adds	r2, r2, r7
 8008a9e:	4b12      	ldr	r3, [pc, #72]	; (8008ae8 <SetButtonEvents+0x304>)
 8008aa0:	189b      	adds	r3, r3, r2
 8008aa2:	7a19      	ldrb	r1, [r3, #8]
 8008aa4:	227f      	movs	r2, #127	; 0x7f
 8008aa6:	400a      	ands	r2, r1
 8008aa8:	721a      	strb	r2, [r3, #8]
 8008aaa:	e74e      	b.n	800894a <SetButtonEvents+0x166>
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 8008aac:	0200      	lsls	r0, r0, #8
 8008aae:	4301      	orrs	r1, r0
 8008ab0:	ab02      	add	r3, sp, #8
 8008ab2:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008ab4:	0020      	movs	r0, r4
 8008ab6:	f7ff f95b 	bl	8007d70 <EE_WriteVariable>
 8008aba:	e75e      	b.n	800897a <SetButtonEvents+0x196>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 8008abc:	0019      	movs	r1, r3
 8008abe:	9801      	ldr	r0, [sp, #4]
 8008ac0:	f7ff f956 	bl	8007d70 <EE_WriteVariable>
 8008ac4:	e769      	b.n	800899a <SetButtonEvents+0x1b6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 8008ac6:	0019      	movs	r1, r3
 8008ac8:	9801      	ldr	r0, [sp, #4]
 8008aca:	f7ff f951 	bl	8007d70 <EE_WriteVariable>
 8008ace:	e773      	b.n	80089b8 <SetButtonEvents+0x1d4>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008ad0:	200b      	movs	r0, #11
}
 8008ad2:	b005      	add	sp, #20
 8008ad4:	bc3c      	pop	{r2, r3, r4, r5}
 8008ad6:	4690      	mov	r8, r2
 8008ad8:	4699      	mov	r9, r3
 8008ada:	46a2      	mov	sl, r4
 8008adc:	46ab      	mov	fp, r5
 8008ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008ae0:	200b      	movs	r0, #11
 8008ae2:	e7f6      	b.n	8008ad2 <SetButtonEvents+0x2ee>
	return result;
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	e7f4      	b.n	8008ad2 <SetButtonEvents+0x2ee>
 8008ae8:	200014b4 	.word	0x200014b4

08008aec <HAL_ADC_MspInit>:
		Error_Handler();
	}
	ADC_flag =1;
}

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle){
 8008aec:	b510      	push	{r4, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	0004      	movs	r4, r0
	
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8008af2:	2214      	movs	r2, #20
 8008af4:	2100      	movs	r1, #0
 8008af6:	a803      	add	r0, sp, #12
 8008af8:	f00c fbc6 	bl	8015288 <memset>
	if(adcHandle->Instance == ADC1){
 8008afc:	6822      	ldr	r2, [r4, #0]
 8008afe:	4b11      	ldr	r3, [pc, #68]	; (8008b44 <HAL_ADC_MspInit+0x58>)
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d001      	beq.n	8008b08 <HAL_ADC_MspInit+0x1c>
		
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8008b04:	b008      	add	sp, #32
 8008b06:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008b08:	4b0f      	ldr	r3, [pc, #60]	; (8008b48 <HAL_ADC_MspInit+0x5c>)
 8008b0a:	6999      	ldr	r1, [r3, #24]
 8008b0c:	2080      	movs	r0, #128	; 0x80
 8008b0e:	0080      	lsls	r0, r0, #2
 8008b10:	4301      	orrs	r1, r0
 8008b12:	6199      	str	r1, [r3, #24]
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	4002      	ands	r2, r0
 8008b18:	9201      	str	r2, [sp, #4]
 8008b1a:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008b1c:	695a      	ldr	r2, [r3, #20]
 8008b1e:	2180      	movs	r1, #128	; 0x80
 8008b20:	0289      	lsls	r1, r1, #10
 8008b22:	430a      	orrs	r2, r1
 8008b24:	615a      	str	r2, [r3, #20]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	400b      	ands	r3, r1
 8008b2a:	9302      	str	r3, [sp, #8]
 8008b2c:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8008b2e:	233c      	movs	r3, #60	; 0x3c
 8008b30:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b32:	3b39      	subs	r3, #57	; 0x39
 8008b34:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008b36:	3871      	subs	r0, #113	; 0x71
 8008b38:	38ff      	subs	r0, #255	; 0xff
 8008b3a:	a903      	add	r1, sp, #12
 8008b3c:	05c0      	lsls	r0, r0, #23
 8008b3e:	f00a fa97 	bl	8013070 <HAL_GPIO_Init>
}
 8008b42:	e7df      	b.n	8008b04 <HAL_ADC_MspInit+0x18>
 8008b44:	40012400 	.word	0x40012400
 8008b48:	40021000 	.word	0x40021000

08008b4c <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart,char *side){
	
	if(huart->Instance == USART2 && side == "top")
 8008b4c:	6803      	ldr	r3, [r0, #0]
 8008b4e:	4a10      	ldr	r2, [pc, #64]	; (8008b90 <Get_channel+0x44>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d009      	beq.n	8008b68 <Get_channel+0x1c>
		return ADC_CHANNEL_2;
	else if(huart->Instance == USART2 && side == "bottom")
 8008b54:	4a0e      	ldr	r2, [pc, #56]	; (8008b90 <Get_channel+0x44>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d00b      	beq.n	8008b72 <Get_channel+0x26>
		return ADC_CHANNEL_3;
	else if(huart->Instance == USART6 && side == "top")
 8008b5a:	4a0e      	ldr	r2, [pc, #56]	; (8008b94 <Get_channel+0x48>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d00d      	beq.n	8008b7c <Get_channel+0x30>
		return ADC_CHANNEL_4;
	else if(huart->Instance == USART6 && side == "bottom")
 8008b60:	4a0c      	ldr	r2, [pc, #48]	; (8008b94 <Get_channel+0x48>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00f      	beq.n	8008b86 <Get_channel+0x3a>
		return ADC_CHANNEL_5;
}
 8008b66:	4770      	bx	lr
	if(huart->Instance == USART2 && side == "top")
 8008b68:	4a0b      	ldr	r2, [pc, #44]	; (8008b98 <Get_channel+0x4c>)
 8008b6a:	4291      	cmp	r1, r2
 8008b6c:	d1f2      	bne.n	8008b54 <Get_channel+0x8>
		return ADC_CHANNEL_2;
 8008b6e:	2002      	movs	r0, #2
 8008b70:	e7f9      	b.n	8008b66 <Get_channel+0x1a>
	else if(huart->Instance == USART2 && side == "bottom")
 8008b72:	4a0a      	ldr	r2, [pc, #40]	; (8008b9c <Get_channel+0x50>)
 8008b74:	4291      	cmp	r1, r2
 8008b76:	d1f0      	bne.n	8008b5a <Get_channel+0xe>
		return ADC_CHANNEL_3;
 8008b78:	2003      	movs	r0, #3
 8008b7a:	e7f4      	b.n	8008b66 <Get_channel+0x1a>
	else if(huart->Instance == USART6 && side == "top")
 8008b7c:	4a06      	ldr	r2, [pc, #24]	; (8008b98 <Get_channel+0x4c>)
 8008b7e:	4291      	cmp	r1, r2
 8008b80:	d1ee      	bne.n	8008b60 <Get_channel+0x14>
		return ADC_CHANNEL_4;
 8008b82:	2004      	movs	r0, #4
 8008b84:	e7ef      	b.n	8008b66 <Get_channel+0x1a>
	else if(huart->Instance == USART6 && side == "bottom")
 8008b86:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <Get_channel+0x50>)
 8008b88:	4299      	cmp	r1, r3
 8008b8a:	d1ec      	bne.n	8008b66 <Get_channel+0x1a>
		return ADC_CHANNEL_5;
 8008b8c:	2005      	movs	r0, #5
 8008b8e:	e7ea      	b.n	8008b66 <Get_channel+0x1a>
 8008b90:	40004400 	.word	0x40004400
 8008b94:	40011400 	.word	0x40011400
 8008b98:	0801a6a4 	.word	0x0801a6a4
 8008b9c:	0801a6a8 	.word	0x0801a6a8

08008ba0 <Error_Handler>:

void Error_Handler(void){
 8008ba0:	b510      	push	{r4, lr}
	
	HAL_Delay(100);
 8008ba2:	2064      	movs	r0, #100	; 0x64
 8008ba4:	f008 ffb0 	bl	8011b08 <HAL_Delay>
	
}
 8008ba8:	bd10      	pop	{r4, pc}
	...

08008bac <MX_ADC_Init>:
void MX_ADC_Init(void){
 8008bac:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 8008bae:	4811      	ldr	r0, [pc, #68]	; (8008bf4 <MX_ADC_Init+0x48>)
 8008bb0:	4b11      	ldr	r3, [pc, #68]	; (8008bf8 <MX_ADC_Init+0x4c>)
 8008bb2:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008bb4:	2380      	movs	r3, #128	; 0x80
 8008bb6:	061b      	lsls	r3, r3, #24
 8008bb8:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008bbe:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008bc4:	2104      	movs	r1, #4
 8008bc6:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait =DISABLE;
 8008bc8:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 8008bca:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 8008bcc:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 8008bce:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008bd0:	21c2      	movs	r1, #194	; 0xc2
 8008bd2:	31ff      	adds	r1, #255	; 0xff
 8008bd4:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008bd6:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 8008bd8:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008bda:	6342      	str	r2, [r0, #52]	; 0x34
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 8008bdc:	f009 f86e 	bl	8011cbc <HAL_ADC_Init>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d103      	bne.n	8008bec <MX_ADC_Init+0x40>
	ADC_flag =1;
 8008be4:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <MX_ADC_Init+0x50>)
 8008be6:	2201      	movs	r2, #1
 8008be8:	701a      	strb	r2, [r3, #0]
}
 8008bea:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008bec:	f7ff ffd8 	bl	8008ba0 <Error_Handler>
 8008bf0:	e7f8      	b.n	8008be4 <MX_ADC_Init+0x38>
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	20006e58 	.word	0x20006e58
 8008bf8:	40012400 	.word	0x40012400
 8008bfc:	200014a0 	.word	0x200014a0

08008c00 <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	0005      	movs	r5, r0
 8008c06:	000e      	movs	r6, r1
	if(0 == ADC_flag)
 8008c08:	4b4c      	ldr	r3, [pc, #304]	; (8008d3c <ReadTempAndVref+0x13c>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d100      	bne.n	8008c12 <ReadTempAndVref+0x12>
 8008c10:	e085      	b.n	8008d1e <ReadTempAndVref+0x11e>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c12:	494b      	ldr	r1, [pc, #300]	; (8008d40 <ReadTempAndVref+0x140>)
 8008c14:	2310      	movs	r3, #16
 8008c16:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008c18:	2380      	movs	r3, #128	; 0x80
 8008c1a:	015b      	lsls	r3, r3, #5
 8008c1c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c22:	4848      	ldr	r0, [pc, #288]	; (8008d44 <ReadTempAndVref+0x144>)
 8008c24:	f009 f9b8 	bl	8011f98 <HAL_ADC_ConfigChannel>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d000      	beq.n	8008c2e <ReadTempAndVref+0x2e>
 8008c2c:	e07a      	b.n	8008d24 <ReadTempAndVref+0x124>
	HAL_ADC_Start(&hadc);
 8008c2e:	4c45      	ldr	r4, [pc, #276]	; (8008d44 <ReadTempAndVref+0x144>)
 8008c30:	0020      	movs	r0, r4
 8008c32:	f009 f8f7 	bl	8011e24 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008c36:	2164      	movs	r1, #100	; 0x64
 8008c38:	0020      	movs	r0, r4
 8008c3a:	f009 f945 	bl	8011ec8 <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 8008c3e:	0020      	movs	r0, r4
 8008c40:	f009 f9a4 	bl	8011f8c <HAL_ADC_GetValue>
 8008c44:	b280      	uxth	r0, r0
 8008c46:	4b40      	ldr	r3, [pc, #256]	; (8008d48 <ReadTempAndVref+0x148>)
 8008c48:	8018      	strh	r0, [r3, #0]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008c4a:	f7fa f9ff 	bl	800304c <__aeabi_i2d>
 8008c4e:	4a3f      	ldr	r2, [pc, #252]	; (8008d4c <ReadTempAndVref+0x14c>)
 8008c50:	4b3f      	ldr	r3, [pc, #252]	; (8008d50 <ReadTempAndVref+0x150>)
 8008c52:	f7f9 fbef 	bl	8002434 <__aeabi_dmul>
 8008c56:	2200      	movs	r2, #0
 8008c58:	4b3e      	ldr	r3, [pc, #248]	; (8008d54 <ReadTempAndVref+0x154>)
 8008c5a:	f7f8 ffe1 	bl	8001c20 <__aeabi_ddiv>
 8008c5e:	4a3e      	ldr	r2, [pc, #248]	; (8008d58 <ReadTempAndVref+0x158>)
 8008c60:	4b3e      	ldr	r3, [pc, #248]	; (8008d5c <ReadTempAndVref+0x15c>)
 8008c62:	f7f9 fe59 	bl	8002918 <__aeabi_dsub>
 8008c66:	4a3e      	ldr	r2, [pc, #248]	; (8008d60 <ReadTempAndVref+0x160>)
 8008c68:	4b3e      	ldr	r3, [pc, #248]	; (8008d64 <ReadTempAndVref+0x164>)
 8008c6a:	f7f8 ffd9 	bl	8001c20 <__aeabi_ddiv>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	4b3d      	ldr	r3, [pc, #244]	; (8008d68 <ReadTempAndVref+0x168>)
 8008c72:	f7f8 fcb9 	bl	80015e8 <__aeabi_dadd>
 8008c76:	f7fa faa7 	bl	80031c8 <__aeabi_d2f>
 8008c7a:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 8008c7c:	0020      	movs	r0, r4
 8008c7e:	f009 f901 	bl	8011e84 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c82:	492f      	ldr	r1, [pc, #188]	; (8008d40 <ReadTempAndVref+0x140>)
 8008c84:	2310      	movs	r3, #16
 8008c86:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008c88:	4b38      	ldr	r3, [pc, #224]	; (8008d6c <ReadTempAndVref+0x16c>)
 8008c8a:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c90:	0020      	movs	r0, r4
 8008c92:	f009 f981 	bl	8011f98 <HAL_ADC_ConfigChannel>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d147      	bne.n	8008d2a <ReadTempAndVref+0x12a>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008c9a:	4929      	ldr	r1, [pc, #164]	; (8008d40 <ReadTempAndVref+0x140>)
 8008c9c:	2311      	movs	r3, #17
 8008c9e:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008ca0:	2380      	movs	r3, #128	; 0x80
 8008ca2:	015b      	lsls	r3, r3, #5
 8008ca4:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008ca6:	2305      	movs	r3, #5
 8008ca8:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008caa:	4826      	ldr	r0, [pc, #152]	; (8008d44 <ReadTempAndVref+0x144>)
 8008cac:	f009 f974 	bl	8011f98 <HAL_ADC_ConfigChannel>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d13d      	bne.n	8008d30 <ReadTempAndVref+0x130>
	HAL_ADC_Start(&hadc);
 8008cb4:	4c23      	ldr	r4, [pc, #140]	; (8008d44 <ReadTempAndVref+0x144>)
 8008cb6:	0020      	movs	r0, r4
 8008cb8:	f009 f8b4 	bl	8011e24 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008cbc:	2164      	movs	r1, #100	; 0x64
 8008cbe:	0020      	movs	r0, r4
 8008cc0:	f009 f902 	bl	8011ec8 <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 8008cc4:	0020      	movs	r0, r4
 8008cc6:	f009 f961 	bl	8011f8c <HAL_ADC_GetValue>
 8008cca:	b285      	uxth	r5, r0
 8008ccc:	4b28      	ldr	r3, [pc, #160]	; (8008d70 <ReadTempAndVref+0x170>)
 8008cce:	801d      	strh	r5, [r3, #0]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 8008cd0:	4b28      	ldr	r3, [pc, #160]	; (8008d74 <ReadTempAndVref+0x174>)
 8008cd2:	8818      	ldrh	r0, [r3, #0]
 8008cd4:	f7fa f9ba 	bl	800304c <__aeabi_i2d>
 8008cd8:	4a1c      	ldr	r2, [pc, #112]	; (8008d4c <ReadTempAndVref+0x14c>)
 8008cda:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <ReadTempAndVref+0x150>)
 8008cdc:	f7f9 fbaa 	bl	8002434 <__aeabi_dmul>
 8008ce0:	9000      	str	r0, [sp, #0]
 8008ce2:	9101      	str	r1, [sp, #4]
 8008ce4:	0028      	movs	r0, r5
 8008ce6:	f7fa f9b1 	bl	800304c <__aeabi_i2d>
 8008cea:	0002      	movs	r2, r0
 8008cec:	000b      	movs	r3, r1
 8008cee:	9800      	ldr	r0, [sp, #0]
 8008cf0:	9901      	ldr	r1, [sp, #4]
 8008cf2:	f7f8 ff95 	bl	8001c20 <__aeabi_ddiv>
 8008cf6:	f7fa fa67 	bl	80031c8 <__aeabi_d2f>
 8008cfa:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 8008cfc:	0020      	movs	r0, r4
 8008cfe:	f009 f8c1 	bl	8011e84 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008d02:	490f      	ldr	r1, [pc, #60]	; (8008d40 <ReadTempAndVref+0x140>)
 8008d04:	2311      	movs	r3, #17
 8008d06:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008d08:	4b18      	ldr	r3, [pc, #96]	; (8008d6c <ReadTempAndVref+0x16c>)
 8008d0a:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008d10:	0020      	movs	r0, r4
 8008d12:	f009 f941 	bl	8011f98 <HAL_ADC_ConfigChannel>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d10d      	bne.n	8008d36 <ReadTempAndVref+0x136>
}
 8008d1a:	b002      	add	sp, #8
 8008d1c:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 8008d1e:	f7ff ff45 	bl	8008bac <MX_ADC_Init>
 8008d22:	e776      	b.n	8008c12 <ReadTempAndVref+0x12>
		Error_Handler();
 8008d24:	f7ff ff3c 	bl	8008ba0 <Error_Handler>
 8008d28:	e781      	b.n	8008c2e <ReadTempAndVref+0x2e>
		Error_Handler();
 8008d2a:	f7ff ff39 	bl	8008ba0 <Error_Handler>
 8008d2e:	e7b4      	b.n	8008c9a <ReadTempAndVref+0x9a>
		Error_Handler();
 8008d30:	f7ff ff36 	bl	8008ba0 <Error_Handler>
 8008d34:	e7be      	b.n	8008cb4 <ReadTempAndVref+0xb4>
		Error_Handler();
 8008d36:	f7ff ff33 	bl	8008ba0 <Error_Handler>
}
 8008d3a:	e7ee      	b.n	8008d1a <ReadTempAndVref+0x11a>
 8008d3c:	200014a0 	.word	0x200014a0
 8008d40:	2000152c 	.word	0x2000152c
 8008d44:	20006e58 	.word	0x20006e58
 8008d48:	200014a4 	.word	0x200014a4
 8008d4c:	66666666 	.word	0x66666666
 8008d50:	400a6666 	.word	0x400a6666
 8008d54:	40affe00 	.word	0x40affe00
 8008d58:	28f5c28f 	.word	0x28f5c28f
 8008d5c:	3ff68f5c 	.word	0x3ff68f5c
 8008d60:	33333333 	.word	0x33333333
 8008d64:	40113333 	.word	0x40113333
 8008d68:	40390000 	.word	0x40390000
 8008d6c:	00001001 	.word	0x00001001
 8008d70:	200014a2 	.word	0x200014a2
 8008d74:	1ffff7ba 	.word	0x1ffff7ba

08008d78 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	0004      	movs	r4, r0
 8008d7e:	000d      	movs	r5, r1
	if(port == 2 || port == 3){
 8008d80:	1e83      	subs	r3, r0, #2
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d901      	bls.n	8008d8c <GetReadPrecentage+0x14>
}
 8008d88:	b006      	add	sp, #24
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
		if(0 == ADC_flag){
 8008d8c:	4b3d      	ldr	r3, [pc, #244]	; (8008e84 <GetReadPrecentage+0x10c>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d055      	beq.n	8008e40 <GetReadPrecentage+0xc8>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8008d94:	2090      	movs	r0, #144	; 0x90
 8008d96:	2201      	movs	r2, #1
 8008d98:	2110      	movs	r1, #16
 8008d9a:	05c0      	lsls	r0, r0, #23
 8008d9c:	f00a fab9 	bl	8013312 <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 8008da0:	0020      	movs	r0, r4
 8008da2:	f006 fce3 	bl	800f76c <GetUart>
 8008da6:	4938      	ldr	r1, [pc, #224]	; (8008e88 <GetReadPrecentage+0x110>)
 8008da8:	f7ff fed0 	bl	8008b4c <Get_channel>
 8008dac:	4b37      	ldr	r3, [pc, #220]	; (8008e8c <GetReadPrecentage+0x114>)
 8008dae:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008db0:	4937      	ldr	r1, [pc, #220]	; (8008e90 <GetReadPrecentage+0x118>)
 8008db2:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008db4:	2380      	movs	r3, #128	; 0x80
 8008db6:	015b      	lsls	r3, r3, #5
 8008db8:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008dbe:	4835      	ldr	r0, [pc, #212]	; (8008e94 <GetReadPrecentage+0x11c>)
 8008dc0:	f009 f8ea 	bl	8011f98 <HAL_ADC_ConfigChannel>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d15a      	bne.n	8008e7e <GetReadPrecentage+0x106>
		HAL_ADC_Start(&hadc);
 8008dc8:	4c32      	ldr	r4, [pc, #200]	; (8008e94 <GetReadPrecentage+0x11c>)
 8008dca:	0020      	movs	r0, r4
 8008dcc:	f009 f82a 	bl	8011e24 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008dd0:	2164      	movs	r1, #100	; 0x64
 8008dd2:	0020      	movs	r0, r4
 8008dd4:	f009 f878 	bl	8011ec8 <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 8008dd8:	0020      	movs	r0, r4
 8008dda:	f009 f8d7 	bl	8011f8c <HAL_ADC_GetValue>
 8008dde:	f7f8 fbc3 	bl	8001568 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 8008de2:	f7fa f99f 	bl	8003124 <__aeabi_f2d>
 8008de6:	4a2c      	ldr	r2, [pc, #176]	; (8008e98 <GetReadPrecentage+0x120>)
 8008de8:	4b2c      	ldr	r3, [pc, #176]	; (8008e9c <GetReadPrecentage+0x124>)
 8008dea:	f7f9 fb23 	bl	8002434 <__aeabi_dmul>
 8008dee:	2200      	movs	r2, #0
 8008df0:	4b2b      	ldr	r3, [pc, #172]	; (8008ea0 <GetReadPrecentage+0x128>)
 8008df2:	f7f8 ff15 	bl	8001c20 <__aeabi_ddiv>
 8008df6:	f7fa f9e7 	bl	80031c8 <__aeabi_d2f>
 8008dfa:	4b2a      	ldr	r3, [pc, #168]	; (8008ea4 <GetReadPrecentage+0x12c>)
 8008dfc:	6018      	str	r0, [r3, #0]
		current =(100 * percentage) / 3.3;
 8008dfe:	492a      	ldr	r1, [pc, #168]	; (8008ea8 <GetReadPrecentage+0x130>)
 8008e00:	f7f8 f852 	bl	8000ea8 <__aeabi_fmul>
 8008e04:	f7fa f98e 	bl	8003124 <__aeabi_f2d>
 8008e08:	4a23      	ldr	r2, [pc, #140]	; (8008e98 <GetReadPrecentage+0x120>)
 8008e0a:	4b24      	ldr	r3, [pc, #144]	; (8008e9c <GetReadPrecentage+0x124>)
 8008e0c:	f7f8 ff08 	bl	8001c20 <__aeabi_ddiv>
 8008e10:	f7fa f9da 	bl	80031c8 <__aeabi_d2f>
 8008e14:	4b25      	ldr	r3, [pc, #148]	; (8008eac <GetReadPrecentage+0x134>)
 8008e16:	6018      	str	r0, [r3, #0]
		*precentageValue =current;
 8008e18:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 8008e1a:	0020      	movs	r0, r4
 8008e1c:	f009 f832 	bl	8011e84 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008e20:	491b      	ldr	r1, [pc, #108]	; (8008e90 <GetReadPrecentage+0x118>)
 8008e22:	4b1a      	ldr	r3, [pc, #104]	; (8008e8c <GetReadPrecentage+0x114>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008e28:	4b21      	ldr	r3, [pc, #132]	; (8008eb0 <GetReadPrecentage+0x138>)
 8008e2a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008e30:	0020      	movs	r0, r4
 8008e32:	f009 f8b1 	bl	8011f98 <HAL_ADC_ConfigChannel>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d0a6      	beq.n	8008d88 <GetReadPrecentage+0x10>
			Error_Handler();
 8008e3a:	f7ff feb1 	bl	8008ba0 <Error_Handler>
 8008e3e:	e7a3      	b.n	8008d88 <GetReadPrecentage+0x10>
			MX_ADC_Init();
 8008e40:	f7ff feb4 	bl	8008bac <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008e44:	0020      	movs	r0, r4
 8008e46:	f006 fc91 	bl	800f76c <GetUart>
 8008e4a:	f00b f9c4 	bl	80141d6 <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 8008e4e:	2690      	movs	r6, #144	; 0x90
 8008e50:	05f6      	lsls	r6, r6, #23
 8008e52:	2110      	movs	r1, #16
 8008e54:	0030      	movs	r0, r6
 8008e56:	f00a f9d3 	bl	8013200 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 8008e5a:	480e      	ldr	r0, [pc, #56]	; (8008e94 <GetReadPrecentage+0x11c>)
 8008e5c:	f009 f942 	bl	80120e4 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008e60:	2310      	movs	r3, #16
 8008e62:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e64:	3b0f      	subs	r3, #15
 8008e66:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008e68:	3302      	adds	r3, #2
 8008e6a:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008e6c:	a901      	add	r1, sp, #4
 8008e6e:	0030      	movs	r0, r6
 8008e70:	f00a f8fe 	bl	8013070 <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 8008e74:	1e63      	subs	r3, r4, #1
 8008e76:	4a0f      	ldr	r2, [pc, #60]	; (8008eb4 <GetReadPrecentage+0x13c>)
 8008e78:	2106      	movs	r1, #6
 8008e7a:	54d1      	strb	r1, [r2, r3]
 8008e7c:	e78a      	b.n	8008d94 <GetReadPrecentage+0x1c>
			Error_Handler();
 8008e7e:	f7ff fe8f 	bl	8008ba0 <Error_Handler>
 8008e82:	e7a1      	b.n	8008dc8 <GetReadPrecentage+0x50>
 8008e84:	200014a0 	.word	0x200014a0
 8008e88:	0801a6a8 	.word	0x0801a6a8
 8008e8c:	200014b0 	.word	0x200014b0
 8008e90:	2000152c 	.word	0x2000152c
 8008e94:	20006e58 	.word	0x20006e58
 8008e98:	66666666 	.word	0x66666666
 8008e9c:	400a6666 	.word	0x400a6666
 8008ea0:	40affe00 	.word	0x40affe00
 8008ea4:	200014f8 	.word	0x200014f8
 8008ea8:	42c80000 	.word	0x42c80000
 8008eac:	200014ec 	.word	0x200014ec
 8008eb0:	00001001 	.word	0x00001001
 8008eb4:	200010e0 	.word	0x200010e0

08008eb8 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008eb8:	2802      	cmp	r0, #2
 8008eba:	d008      	beq.n	8008ece <Get_Rank+0x16>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
 8008ebc:	2802      	cmp	r0, #2
 8008ebe:	d00d      	beq.n	8008edc <Get_Rank+0x24>
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008ec0:	2803      	cmp	r0, #3
 8008ec2:	d012      	beq.n	8008eea <Get_Rank+0x32>
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
 8008ec4:	2803      	cmp	r0, #3
 8008ec6:	d017      	beq.n	8008ef8 <Get_Rank+0x40>
		Rank_t =3;
	return Rank_t;
 8008ec8:	4b0f      	ldr	r3, [pc, #60]	; (8008f08 <Get_Rank+0x50>)
 8008eca:	7818      	ldrb	r0, [r3, #0]
}
 8008ecc:	4770      	bx	lr
	if(Port == 2 && side == "top")
 8008ece:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <Get_Rank+0x54>)
 8008ed0:	4299      	cmp	r1, r3
 8008ed2:	d1f3      	bne.n	8008ebc <Get_Rank+0x4>
		Rank_t =0;
 8008ed4:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <Get_Rank+0x50>)
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	e7f5      	b.n	8008ec8 <Get_Rank+0x10>
	else if(Port == 2 && side == "bottom")
 8008edc:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <Get_Rank+0x58>)
 8008ede:	4299      	cmp	r1, r3
 8008ee0:	d1ee      	bne.n	8008ec0 <Get_Rank+0x8>
		Rank_t =1;
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <Get_Rank+0x50>)
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	e7ee      	b.n	8008ec8 <Get_Rank+0x10>
	else if(Port == 3 && side == "top")
 8008eea:	4b08      	ldr	r3, [pc, #32]	; (8008f0c <Get_Rank+0x54>)
 8008eec:	4299      	cmp	r1, r3
 8008eee:	d1e9      	bne.n	8008ec4 <Get_Rank+0xc>
		Rank_t =2;
 8008ef0:	4b05      	ldr	r3, [pc, #20]	; (8008f08 <Get_Rank+0x50>)
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	e7e7      	b.n	8008ec8 <Get_Rank+0x10>
	else if(Port == 3 && side == "bottom")
 8008ef8:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <Get_Rank+0x58>)
 8008efa:	4299      	cmp	r1, r3
 8008efc:	d1e4      	bne.n	8008ec8 <Get_Rank+0x10>
		Rank_t =3;
 8008efe:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <Get_Rank+0x50>)
 8008f00:	2203      	movs	r2, #3
 8008f02:	701a      	strb	r2, [r3, #0]
 8008f04:	e7e0      	b.n	8008ec8 <Get_Rank+0x10>
 8008f06:	46c0      	nop			; (mov r8, r8)
 8008f08:	200014b1 	.word	0x200014b1
 8008f0c:	0801a6a4 	.word	0x0801a6a4
 8008f10:	0801a6a8 	.word	0x0801a6a8

08008f14 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	0004      	movs	r4, r0
 8008f18:	000d      	movs	r5, r1
	if(ADC_port == 2 || ADC_port == 3){
 8008f1a:	1e83      	subs	r3, r0, #2
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d900      	bls.n	8008f24 <ADCSelectChannel+0x10>
}
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008f24:	f006 fc22 	bl	800f76c <GetUart>
 8008f28:	f00b f955 	bl	80141d6 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008f2c:	1e63      	subs	r3, r4, #1
 8008f2e:	4a0c      	ldr	r2, [pc, #48]	; (8008f60 <ADCSelectChannel+0x4c>)
 8008f30:	2106      	movs	r1, #6
 8008f32:	54d1      	strb	r1, [r2, r3]
		Channel =Get_channel(GetUart(ADC_port),side);
 8008f34:	0020      	movs	r0, r4
 8008f36:	f006 fc19 	bl	800f76c <GetUart>
 8008f3a:	0029      	movs	r1, r5
 8008f3c:	f7ff fe06 	bl	8008b4c <Get_channel>
 8008f40:	4b08      	ldr	r3, [pc, #32]	; (8008f64 <ADCSelectChannel+0x50>)
 8008f42:	7018      	strb	r0, [r3, #0]
		Rank_t =Get_Rank(ADC_port,side);
 8008f44:	0029      	movs	r1, r5
 8008f46:	0020      	movs	r0, r4
 8008f48:	f7ff ffb6 	bl	8008eb8 <Get_Rank>
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <ADCSelectChannel+0x54>)
 8008f4e:	7018      	strb	r0, [r3, #0]
		if(ADC_flag == 0)
 8008f50:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <ADCSelectChannel+0x58>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e4      	bne.n	8008f22 <ADCSelectChannel+0xe>
			MX_ADC_Init();
 8008f58:	f7ff fe28 	bl	8008bac <MX_ADC_Init>
}
 8008f5c:	e7e1      	b.n	8008f22 <ADCSelectChannel+0xe>
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	200010e0 	.word	0x200010e0
 8008f64:	200014b0 	.word	0x200014b0
 8008f68:	200014b1 	.word	0x200014b1
 8008f6c:	200014a0 	.word	0x200014a0

08008f70 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	0005      	movs	r5, r0
 8008f74:	000e      	movs	r6, r1
 8008f76:	0014      	movs	r4, r2
	if(ADC_flag == 1){
 8008f78:	4b26      	ldr	r3, [pc, #152]	; (8009014 <ReadADCChannel+0xa4>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d008      	beq.n	8008f92 <ReadADCChannel+0x22>
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8008f80:	4b25      	ldr	r3, [pc, #148]	; (8009018 <ReadADCChannel+0xa8>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	4a25      	ldr	r2, [pc, #148]	; (800901c <ReadADCChannel+0xac>)
 8008f88:	5a98      	ldrh	r0, [r3, r2]
 8008f8a:	f7f8 faed 	bl	8001568 <__aeabi_ui2f>
 8008f8e:	6020      	str	r0, [r4, #0]
}
 8008f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8008f92:	f006 fbeb 	bl	800f76c <GetUart>
 8008f96:	0031      	movs	r1, r6
 8008f98:	f7ff fdd8 	bl	8008b4c <Get_channel>
 8008f9c:	4f20      	ldr	r7, [pc, #128]	; (8009020 <ReadADCChannel+0xb0>)
 8008f9e:	7038      	strb	r0, [r7, #0]
		Rank_t =Get_Rank(Port,side);
 8008fa0:	0031      	movs	r1, r6
 8008fa2:	0028      	movs	r0, r5
 8008fa4:	f7ff ff88 	bl	8008eb8 <Get_Rank>
 8008fa8:	4b1b      	ldr	r3, [pc, #108]	; (8009018 <ReadADCChannel+0xa8>)
 8008faa:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008fac:	491d      	ldr	r1, [pc, #116]	; (8009024 <ReadADCChannel+0xb4>)
 8008fae:	783b      	ldrb	r3, [r7, #0]
 8008fb0:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008fb2:	2380      	movs	r3, #128	; 0x80
 8008fb4:	015b      	lsls	r3, r3, #5
 8008fb6:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008fbc:	481a      	ldr	r0, [pc, #104]	; (8009028 <ReadADCChannel+0xb8>)
 8008fbe:	f008 ffeb 	bl	8011f98 <HAL_ADC_ConfigChannel>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d122      	bne.n	800900c <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 8008fc6:	4d18      	ldr	r5, [pc, #96]	; (8009028 <ReadADCChannel+0xb8>)
 8008fc8:	0028      	movs	r0, r5
 8008fca:	f008 ff2b 	bl	8011e24 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008fce:	2164      	movs	r1, #100	; 0x64
 8008fd0:	0028      	movs	r0, r5
 8008fd2:	f008 ff79 	bl	8011ec8 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 8008fd6:	0028      	movs	r0, r5
 8008fd8:	f008 ffd8 	bl	8011f8c <HAL_ADC_GetValue>
 8008fdc:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <ReadADCChannel+0xa8>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	4a0e      	ldr	r2, [pc, #56]	; (800901c <ReadADCChannel+0xac>)
 8008fe4:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 8008fe6:	0028      	movs	r0, r5
 8008fe8:	f008 ff4c 	bl	8011e84 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008fec:	490d      	ldr	r1, [pc, #52]	; (8009024 <ReadADCChannel+0xb4>)
 8008fee:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <ReadADCChannel+0xb0>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	; (800902c <ReadADCChannel+0xbc>)
 8008ff6:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008ffc:	0028      	movs	r0, r5
 8008ffe:	f008 ffcb 	bl	8011f98 <HAL_ADC_ConfigChannel>
 8009002:	2800      	cmp	r0, #0
 8009004:	d0bc      	beq.n	8008f80 <ReadADCChannel+0x10>
			Error_Handler();
 8009006:	f7ff fdcb 	bl	8008ba0 <Error_Handler>
 800900a:	e7b9      	b.n	8008f80 <ReadADCChannel+0x10>
			Error_Handler();
 800900c:	f7ff fdc8 	bl	8008ba0 <Error_Handler>
 8009010:	e7d9      	b.n	8008fc6 <ReadADCChannel+0x56>
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	200014a0 	.word	0x200014a0
 8009018:	200014b1 	.word	0x200014b1
 800901c:	200014a8 	.word	0x200014a8
 8009020:	200014b0 	.word	0x200014b0
 8009024:	2000152c 	.word	0x2000152c
 8009028:	20006e58 	.word	0x20006e58
 800902c:	00001001 	.word	0x00001001

08009030 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port){
}
 8009030:	4770      	bx	lr

08009032 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port){
}
 8009032:	4770      	bx	lr

08009034 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port){
}
 8009034:	4770      	bx	lr

08009036 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 8009036:	4770      	bx	lr

08009038 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port,uint8_t eventType){
}
 8009038:	4770      	bx	lr
	...

0800903c <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 800903c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903e:	46ce      	mov	lr, r9
 8009040:	4647      	mov	r7, r8
 8009042:	b580      	push	{r7, lr}
 8009044:	b087      	sub	sp, #28
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8009046:	2401      	movs	r4, #1
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8009048:	2600      	movs	r6, #0
 800904a:	2300      	movs	r3, #0
 800904c:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800904e:	e11e      	b.n	800928e <CheckAttachedButtons+0x252>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 8009050:	230e      	movs	r3, #14
 8009052:	446b      	add	r3, sp
 8009054:	8819      	ldrh	r1, [r3, #0]
 8009056:	2201      	movs	r2, #1
 8009058:	9805      	ldr	r0, [sp, #20]
 800905a:	f00a f95a 	bl	8013312 <HAL_GPIO_WritePin>
				Delay_us(10);
 800905e:	200a      	movs	r0, #10
 8009060:	f006 f9de 	bl	800f420 <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 8009064:	ab03      	add	r3, sp, #12
 8009066:	8819      	ldrh	r1, [r3, #0]
 8009068:	9804      	ldr	r0, [sp, #16]
 800906a:	f00a f94b 	bl	8013304 <HAL_GPIO_ReadPin>
 800906e:	4680      	mov	r8, r0
 8009070:	e13b      	b.n	80092ea <CheckAttachedButtons+0x2ae>
			switch(button[i].type){
 8009072:	2b01      	cmp	r3, #1
 8009074:	d104      	bne.n	8009080 <CheckAttachedButtons+0x44>
					if(connected == GPIO_PIN_SET)
 8009076:	4643      	mov	r3, r8
 8009078:	2b01      	cmp	r3, #1
 800907a:	d043      	beq.n	8009104 <CheckAttachedButtons+0xc8>
					else if(connected == GPIO_PIN_RESET)
 800907c:	2b00      	cmp	r3, #0
 800907e:	d03b      	beq.n	80090f8 <CheckAttachedButtons+0xbc>
			if(state == CLOSED || state == ON){
 8009080:	2e04      	cmp	r6, #4
 8009082:	d040      	beq.n	8009106 <CheckAttachedButtons+0xca>
 8009084:	2e02      	cmp	r6, #2
 8009086:	d03e      	beq.n	8009106 <CheckAttachedButtons+0xca>
			if(state == OPEN || state == OFF){
 8009088:	2e03      	cmp	r6, #3
 800908a:	d04e      	beq.n	800912a <CheckAttachedButtons+0xee>
 800908c:	2e01      	cmp	r6, #1
 800908e:	d04c      	beq.n	800912a <CheckAttachedButtons+0xee>
			if(pressCounter[i] < BOS.buttons.debounce){
 8009090:	00ab      	lsls	r3, r5, #2
 8009092:	4abc      	ldr	r2, [pc, #752]	; (8009384 <CheckAttachedButtons+0x348>)
 8009094:	589b      	ldr	r3, [r3, r2]
 8009096:	4abc      	ldr	r2, [pc, #752]	; (8009388 <CheckAttachedButtons+0x34c>)
 8009098:	8812      	ldrh	r2, [r2, #0]
 800909a:	4293      	cmp	r3, r2
 800909c:	d200      	bcs.n	80090a0 <CheckAttachedButtons+0x64>
 800909e:	e099      	b.n	80091d4 <CheckAttachedButtons+0x198>
				if(pressCounter[i] == BOS.buttons.debounce){
 80090a0:	d06c      	beq.n	800917c <CheckAttachedButtons+0x140>
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 80090a2:	00ab      	lsls	r3, r5, #2
 80090a4:	49b9      	ldr	r1, [pc, #740]	; (800938c <CheckAttachedButtons+0x350>)
 80090a6:	585b      	ldr	r3, [r3, r1]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d203      	bcs.n	80090b4 <CheckAttachedButtons+0x78>
					releaseCounter[i] =0;
 80090ac:	00ab      	lsls	r3, r5, #2
 80090ae:	000a      	movs	r2, r1
 80090b0:	2100      	movs	r1, #0
 80090b2:	5099      	str	r1, [r3, r2]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 80090b4:	00ab      	lsls	r3, r5, #2
 80090b6:	4ab3      	ldr	r2, [pc, #716]	; (8009384 <CheckAttachedButtons+0x348>)
 80090b8:	589b      	ldr	r3, [r3, r2]
 80090ba:	4ab3      	ldr	r2, [pc, #716]	; (8009388 <CheckAttachedButtons+0x34c>)
 80090bc:	8852      	ldrh	r2, [r2, #2]
 80090be:	4293      	cmp	r3, r2
 80090c0:	d979      	bls.n	80091b6 <CheckAttachedButtons+0x17a>
 80090c2:	22f4      	movs	r2, #244	; 0xf4
 80090c4:	32ff      	adds	r2, #255	; 0xff
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d875      	bhi.n	80091b6 <CheckAttachedButtons+0x17a>
					if(clicked == 0)
 80090ca:	4bb1      	ldr	r3, [pc, #708]	; (8009390 <CheckAttachedButtons+0x354>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d15e      	bne.n	8009190 <CheckAttachedButtons+0x154>
						clicked =1;		// Record a possible single click
 80090d2:	4baf      	ldr	r3, [pc, #700]	; (8009390 <CheckAttachedButtons+0x354>)
 80090d4:	3af3      	subs	r2, #243	; 0xf3
 80090d6:	3aff      	subs	r2, #255	; 0xff
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	e07b      	b.n	80091d4 <CheckAttachedButtons+0x198>
					if(connected == GPIO_PIN_SET)
 80090dc:	4643      	mov	r3, r8
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d01c      	beq.n	800911c <CheckAttachedButtons+0xe0>
					else if(connected == GPIO_PIN_RESET)
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1cc      	bne.n	8009080 <CheckAttachedButtons+0x44>
						state =OPEN;
 80090e6:	2603      	movs	r6, #3
 80090e8:	e7cc      	b.n	8009084 <CheckAttachedButtons+0x48>
					if(connected == GPIO_PIN_SET)
 80090ea:	4643      	mov	r3, r8
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d005      	beq.n	80090fc <CheckAttachedButtons+0xc0>
					else if(connected == GPIO_PIN_RESET)
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1c5      	bne.n	8009080 <CheckAttachedButtons+0x44>
						state =OFF;
 80090f4:	2601      	movs	r6, #1
 80090f6:	e7c5      	b.n	8009084 <CheckAttachedButtons+0x48>
						state =OPEN;
 80090f8:	2603      	movs	r6, #3
 80090fa:	e7c3      	b.n	8009084 <CheckAttachedButtons+0x48>
						state =ON;
 80090fc:	2602      	movs	r6, #2
 80090fe:	e7c1      	b.n	8009084 <CheckAttachedButtons+0x48>
						state =OFF;
 8009100:	4646      	mov	r6, r8
 8009102:	e7bf      	b.n	8009084 <CheckAttachedButtons+0x48>
						state =CLOSED;
 8009104:	2604      	movs	r6, #4
				if(pressCounter[i] < 0xFFFF)
 8009106:	00ab      	lsls	r3, r5, #2
 8009108:	4a9e      	ldr	r2, [pc, #632]	; (8009384 <CheckAttachedButtons+0x348>)
 800910a:	589b      	ldr	r3, [r3, r2]
 800910c:	4aa1      	ldr	r2, [pc, #644]	; (8009394 <CheckAttachedButtons+0x358>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d806      	bhi.n	8009120 <CheckAttachedButtons+0xe4>
					++pressCounter[i];			// Advance the debounce counter
 8009112:	00aa      	lsls	r2, r5, #2
 8009114:	3301      	adds	r3, #1
 8009116:	499b      	ldr	r1, [pc, #620]	; (8009384 <CheckAttachedButtons+0x348>)
 8009118:	5053      	str	r3, [r2, r1]
 800911a:	e7b5      	b.n	8009088 <CheckAttachedButtons+0x4c>
						state =CLOSED;
 800911c:	2604      	movs	r6, #4
 800911e:	e7f2      	b.n	8009106 <CheckAttachedButtons+0xca>
					pressCounter[i] =0;			// Reset debounce counter
 8009120:	00ab      	lsls	r3, r5, #2
 8009122:	4a98      	ldr	r2, [pc, #608]	; (8009384 <CheckAttachedButtons+0x348>)
 8009124:	2100      	movs	r1, #0
 8009126:	5099      	str	r1, [r3, r2]
 8009128:	e7ae      	b.n	8009088 <CheckAttachedButtons+0x4c>
				if(releaseCounter[i] < 0xFFFF)
 800912a:	00ab      	lsls	r3, r5, #2
 800912c:	4a97      	ldr	r2, [pc, #604]	; (800938c <CheckAttachedButtons+0x350>)
 800912e:	589b      	ldr	r3, [r3, r2]
 8009130:	4a98      	ldr	r2, [pc, #608]	; (8009394 <CheckAttachedButtons+0x358>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d813      	bhi.n	800915e <CheckAttachedButtons+0x122>
					++releaseCounter[i];		// Advance the debounce counter
 8009136:	00aa      	lsls	r2, r5, #2
 8009138:	3301      	adds	r3, #1
 800913a:	4994      	ldr	r1, [pc, #592]	; (800938c <CheckAttachedButtons+0x350>)
 800913c:	5053      	str	r3, [r2, r1]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 800913e:	4b94      	ldr	r3, [pc, #592]	; (8009390 <CheckAttachedButtons+0x354>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d010      	beq.n	8009168 <CheckAttachedButtons+0x12c>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 8009146:	4b94      	ldr	r3, [pc, #592]	; (8009398 <CheckAttachedButtons+0x35c>)
 8009148:	5d5a      	ldrb	r2, [r3, r5]
 800914a:	4b8f      	ldr	r3, [pc, #572]	; (8009388 <CheckAttachedButtons+0x34c>)
 800914c:	795b      	ldrb	r3, [r3, #5]
 800914e:	429a      	cmp	r2, r3
 8009150:	d99e      	bls.n	8009090 <CheckAttachedButtons+0x54>
					clicked =0;
 8009152:	2300      	movs	r3, #0
 8009154:	4a8e      	ldr	r2, [pc, #568]	; (8009390 <CheckAttachedButtons+0x354>)
 8009156:	7013      	strb	r3, [r2, #0]
					dblCounter[i] =0;			// Reset the inter-click counter
 8009158:	4a8f      	ldr	r2, [pc, #572]	; (8009398 <CheckAttachedButtons+0x35c>)
 800915a:	5553      	strb	r3, [r2, r5]
 800915c:	e798      	b.n	8009090 <CheckAttachedButtons+0x54>
					releaseCounter[i] =0;		// Reset debounce counter
 800915e:	00ab      	lsls	r3, r5, #2
 8009160:	4a8a      	ldr	r2, [pc, #552]	; (800938c <CheckAttachedButtons+0x350>)
 8009162:	2100      	movs	r1, #0
 8009164:	5099      	str	r1, [r3, r2]
 8009166:	e7ea      	b.n	800913e <CheckAttachedButtons+0x102>
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8009168:	4b8b      	ldr	r3, [pc, #556]	; (8009398 <CheckAttachedButtons+0x35c>)
 800916a:	5d5b      	ldrb	r3, [r3, r5]
 800916c:	4a86      	ldr	r2, [pc, #536]	; (8009388 <CheckAttachedButtons+0x34c>)
 800916e:	7952      	ldrb	r2, [r2, #5]
 8009170:	4293      	cmp	r3, r2
 8009172:	d8e8      	bhi.n	8009146 <CheckAttachedButtons+0x10a>
					++dblCounter[i];
 8009174:	3301      	adds	r3, #1
 8009176:	4a88      	ldr	r2, [pc, #544]	; (8009398 <CheckAttachedButtons+0x35c>)
 8009178:	5553      	strb	r3, [r2, r5]
 800917a:	e789      	b.n	8009090 <CheckAttachedButtons+0x54>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 800917c:	00e9      	lsls	r1, r5, #3
 800917e:	1949      	adds	r1, r1, r5
 8009180:	4886      	ldr	r0, [pc, #536]	; (800939c <CheckAttachedButtons+0x360>)
 8009182:	2707      	movs	r7, #7
 8009184:	540f      	strb	r7, [r1, r0]
					++pressCounter[i];
 8009186:	00a9      	lsls	r1, r5, #2
 8009188:	3301      	adds	r3, #1
 800918a:	487e      	ldr	r0, [pc, #504]	; (8009384 <CheckAttachedButtons+0x348>)
 800918c:	500b      	str	r3, [r1, r0]
 800918e:	e788      	b.n	80090a2 <CheckAttachedButtons+0x66>
					else if(clicked == 2){
 8009190:	2b02      	cmp	r3, #2
 8009192:	d11f      	bne.n	80091d4 <CheckAttachedButtons+0x198>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 8009194:	4b80      	ldr	r3, [pc, #512]	; (8009398 <CheckAttachedButtons+0x35c>)
 8009196:	5d5b      	ldrb	r3, [r3, r5]
 8009198:	4a7b      	ldr	r2, [pc, #492]	; (8009388 <CheckAttachedButtons+0x34c>)
 800919a:	7912      	ldrb	r2, [r2, #4]
 800919c:	4293      	cmp	r3, r2
 800919e:	d919      	bls.n	80091d4 <CheckAttachedButtons+0x198>
 80091a0:	4a79      	ldr	r2, [pc, #484]	; (8009388 <CheckAttachedButtons+0x34c>)
 80091a2:	7952      	ldrb	r2, [r2, #5]
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d215      	bcs.n	80091d4 <CheckAttachedButtons+0x198>
							clicked =3;	// Record a possible double click
 80091a8:	4b79      	ldr	r3, [pc, #484]	; (8009390 <CheckAttachedButtons+0x354>)
 80091aa:	2203      	movs	r2, #3
 80091ac:	701a      	strb	r2, [r3, #0]
							dblCounter[i] =0;	// Reset the inter-click counter
 80091ae:	4b7a      	ldr	r3, [pc, #488]	; (8009398 <CheckAttachedButtons+0x35c>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	555a      	strb	r2, [r3, r5]
 80091b4:	e00e      	b.n	80091d4 <CheckAttachedButtons+0x198>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 80091b6:	3bf5      	subs	r3, #245	; 0xf5
 80091b8:	3bff      	subs	r3, #255	; 0xff
 80091ba:	4a79      	ldr	r2, [pc, #484]	; (80093a0 <CheckAttachedButtons+0x364>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d809      	bhi.n	80091d4 <CheckAttachedButtons+0x198>
					if(clicked)
 80091c0:	4b73      	ldr	r3, [pc, #460]	; (8009390 <CheckAttachedButtons+0x354>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <CheckAttachedButtons+0x192>
						clicked =0;						// Cannot be a click
 80091c8:	4b71      	ldr	r3, [pc, #452]	; (8009390 <CheckAttachedButtons+0x354>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 80091ce:	0020      	movs	r0, r4
 80091d0:	f7ff f980 	bl	80084d4 <CheckForTimedButtonPress>
			if(releaseCounter[i] < BOS.buttons.debounce){
 80091d4:	00ab      	lsls	r3, r5, #2
 80091d6:	4a6d      	ldr	r2, [pc, #436]	; (800938c <CheckAttachedButtons+0x350>)
 80091d8:	589b      	ldr	r3, [r3, r2]
 80091da:	4a6b      	ldr	r2, [pc, #428]	; (8009388 <CheckAttachedButtons+0x34c>)
 80091dc:	8812      	ldrh	r2, [r2, #0]
 80091de:	4293      	cmp	r3, r2
 80091e0:	d33b      	bcc.n	800925a <CheckAttachedButtons+0x21e>
				if(releaseCounter[i] == BOS.buttons.debounce){
 80091e2:	d022      	beq.n	800922a <CheckAttachedButtons+0x1ee>
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 80091e4:	00ab      	lsls	r3, r5, #2
 80091e6:	4967      	ldr	r1, [pc, #412]	; (8009384 <CheckAttachedButtons+0x348>)
 80091e8:	585b      	ldr	r3, [r3, r1]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d203      	bcs.n	80091f6 <CheckAttachedButtons+0x1ba>
					pressCounter[i] =0;
 80091ee:	00ab      	lsls	r3, r5, #2
 80091f0:	000a      	movs	r2, r1
 80091f2:	2100      	movs	r1, #0
 80091f4:	5099      	str	r1, [r3, r2]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 80091f6:	00ab      	lsls	r3, r5, #2
 80091f8:	4a64      	ldr	r2, [pc, #400]	; (800938c <CheckAttachedButtons+0x350>)
 80091fa:	589b      	ldr	r3, [r3, r2]
 80091fc:	4a62      	ldr	r2, [pc, #392]	; (8009388 <CheckAttachedButtons+0x34c>)
 80091fe:	8852      	ldrh	r2, [r2, #2]
 8009200:	4293      	cmp	r3, r2
 8009202:	d925      	bls.n	8009250 <CheckAttachedButtons+0x214>
 8009204:	22f4      	movs	r2, #244	; 0xf4
 8009206:	32ff      	adds	r2, #255	; 0xff
 8009208:	4293      	cmp	r3, r2
 800920a:	d821      	bhi.n	8009250 <CheckAttachedButtons+0x214>
					if(clicked == 1){
 800920c:	4b60      	ldr	r3, [pc, #384]	; (8009390 <CheckAttachedButtons+0x354>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d014      	beq.n	800923e <CheckAttachedButtons+0x202>
					else if(clicked == 3){
 8009214:	2b03      	cmp	r3, #3
 8009216:	d120      	bne.n	800925a <CheckAttachedButtons+0x21e>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 8009218:	00eb      	lsls	r3, r5, #3
 800921a:	195b      	adds	r3, r3, r5
 800921c:	4a5f      	ldr	r2, [pc, #380]	; (800939c <CheckAttachedButtons+0x360>)
 800921e:	2106      	movs	r1, #6
 8009220:	5499      	strb	r1, [r3, r2]
						clicked =0;			// Prepare for a single click
 8009222:	4b5b      	ldr	r3, [pc, #364]	; (8009390 <CheckAttachedButtons+0x354>)
 8009224:	2200      	movs	r2, #0
 8009226:	701a      	strb	r2, [r3, #0]
 8009228:	e017      	b.n	800925a <CheckAttachedButtons+0x21e>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800922a:	00e9      	lsls	r1, r5, #3
 800922c:	1949      	adds	r1, r1, r5
 800922e:	485b      	ldr	r0, [pc, #364]	; (800939c <CheckAttachedButtons+0x360>)
 8009230:	2708      	movs	r7, #8
 8009232:	540f      	strb	r7, [r1, r0]
					++releaseCounter[i];
 8009234:	00a9      	lsls	r1, r5, #2
 8009236:	3301      	adds	r3, #1
 8009238:	4854      	ldr	r0, [pc, #336]	; (800938c <CheckAttachedButtons+0x350>)
 800923a:	500b      	str	r3, [r1, r0]
 800923c:	e7d2      	b.n	80091e4 <CheckAttachedButtons+0x1a8>
						button[i].state =CLICKED;	// Record a single button click event
 800923e:	00eb      	lsls	r3, r5, #3
 8009240:	195b      	adds	r3, r3, r5
 8009242:	4a56      	ldr	r2, [pc, #344]	; (800939c <CheckAttachedButtons+0x360>)
 8009244:	2105      	movs	r1, #5
 8009246:	5499      	strb	r1, [r3, r2]
						clicked =2;			// Prepare for a double click
 8009248:	4b51      	ldr	r3, [pc, #324]	; (8009390 <CheckAttachedButtons+0x354>)
 800924a:	2202      	movs	r2, #2
 800924c:	701a      	strb	r2, [r3, #0]
 800924e:	e004      	b.n	800925a <CheckAttachedButtons+0x21e>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 8009250:	3bf5      	subs	r3, #245	; 0xf5
 8009252:	3bff      	subs	r3, #255	; 0xff
 8009254:	4a52      	ldr	r2, [pc, #328]	; (80093a0 <CheckAttachedButtons+0x364>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d90b      	bls.n	8009272 <CheckAttachedButtons+0x236>
			switch(button[i].state){
 800925a:	00eb      	lsls	r3, r5, #3
 800925c:	195b      	adds	r3, r3, r5
 800925e:	4a4f      	ldr	r2, [pc, #316]	; (800939c <CheckAttachedButtons+0x360>)
 8009260:	5c9b      	ldrb	r3, [r3, r2]
 8009262:	3b05      	subs	r3, #5
 8009264:	b2da      	uxtb	r2, r3
 8009266:	2a09      	cmp	r2, #9
 8009268:	d80f      	bhi.n	800928a <CheckAttachedButtons+0x24e>
 800926a:	0093      	lsls	r3, r2, #2
 800926c:	4a4d      	ldr	r2, [pc, #308]	; (80093a4 <CheckAttachedButtons+0x368>)
 800926e:	58d3      	ldr	r3, [r2, r3]
 8009270:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8009272:	0020      	movs	r0, r4
 8009274:	f7ff f966 	bl	8008544 <CheckForTimedButtonRelease>
 8009278:	e7ef      	b.n	800925a <CheckAttachedButtons+0x21e>
					buttonPressedCallback(i);
 800927a:	0020      	movs	r0, r4
 800927c:	f7ff f928 	bl	80084d0 <buttonPressedCallback>
					button[i].state =NONE;
 8009280:	00eb      	lsls	r3, r5, #3
 8009282:	195d      	adds	r5, r3, r5
 8009284:	4b45      	ldr	r3, [pc, #276]	; (800939c <CheckAttachedButtons+0x360>)
 8009286:	2200      	movs	r2, #0
 8009288:	54ea      	strb	r2, [r5, r3]
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800928a:	3401      	adds	r4, #1
 800928c:	b2e4      	uxtb	r4, r4
 800928e:	2c05      	cmp	r4, #5
 8009290:	d900      	bls.n	8009294 <CheckAttachedButtons+0x258>
 8009292:	e10a      	b.n	80094aa <CheckAttachedButtons+0x46e>
		if(button[i].type)			// Only check defined butons
 8009294:	0025      	movs	r5, r4
 8009296:	00e2      	lsls	r2, r4, #3
 8009298:	1912      	adds	r2, r2, r4
 800929a:	4b40      	ldr	r3, [pc, #256]	; (800939c <CheckAttachedButtons+0x360>)
 800929c:	189b      	adds	r3, r3, r2
 800929e:	785b      	ldrb	r3, [r3, #1]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0f2      	beq.n	800928a <CheckAttachedButtons+0x24e>
			if(delayButtonStateReset == false)
 80092a4:	4b40      	ldr	r3, [pc, #256]	; (80093a8 <CheckAttachedButtons+0x36c>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d103      	bne.n	80092b4 <CheckAttachedButtons+0x278>
				button[i].state =NONE;
 80092ac:	0013      	movs	r3, r2
 80092ae:	4a3b      	ldr	r2, [pc, #236]	; (800939c <CheckAttachedButtons+0x360>)
 80092b0:	2100      	movs	r1, #0
 80092b2:	5499      	strb	r1, [r3, r2]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 80092b4:	230e      	movs	r3, #14
 80092b6:	446b      	add	r3, sp
 80092b8:	4699      	mov	r9, r3
 80092ba:	af03      	add	r7, sp, #12
 80092bc:	9700      	str	r7, [sp, #0]
 80092be:	ab04      	add	r3, sp, #16
 80092c0:	464a      	mov	r2, r9
 80092c2:	a905      	add	r1, sp, #20
 80092c4:	0020      	movs	r0, r4
 80092c6:	f005 fd23 	bl	800ed10 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 80092ca:	464b      	mov	r3, r9
 80092cc:	8819      	ldrh	r1, [r3, #0]
 80092ce:	2200      	movs	r2, #0
 80092d0:	9805      	ldr	r0, [sp, #20]
 80092d2:	f00a f81e 	bl	8013312 <HAL_GPIO_WritePin>
			Delay_us(10);
 80092d6:	200a      	movs	r0, #10
 80092d8:	f006 f8a2 	bl	800f420 <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 80092dc:	8839      	ldrh	r1, [r7, #0]
 80092de:	9804      	ldr	r0, [sp, #16]
 80092e0:	f00a f810 	bl	8013304 <HAL_GPIO_ReadPin>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d100      	bne.n	80092ea <CheckAttachedButtons+0x2ae>
 80092e8:	e6b2      	b.n	8009050 <CheckAttachedButtons+0x14>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 80092ea:	230e      	movs	r3, #14
 80092ec:	446b      	add	r3, sp
 80092ee:	8819      	ldrh	r1, [r3, #0]
 80092f0:	2200      	movs	r2, #0
 80092f2:	9805      	ldr	r0, [sp, #20]
 80092f4:	f00a f80d 	bl	8013312 <HAL_GPIO_WritePin>
			switch(button[i].type){
 80092f8:	00ea      	lsls	r2, r5, #3
 80092fa:	1952      	adds	r2, r2, r5
 80092fc:	4b27      	ldr	r3, [pc, #156]	; (800939c <CheckAttachedButtons+0x360>)
 80092fe:	189b      	adds	r3, r3, r2
 8009300:	785b      	ldrb	r3, [r3, #1]
 8009302:	2b02      	cmp	r3, #2
 8009304:	d100      	bne.n	8009308 <CheckAttachedButtons+0x2cc>
 8009306:	e6e9      	b.n	80090dc <CheckAttachedButtons+0xa0>
 8009308:	d800      	bhi.n	800930c <CheckAttachedButtons+0x2d0>
 800930a:	e6b2      	b.n	8009072 <CheckAttachedButtons+0x36>
 800930c:	2b03      	cmp	r3, #3
 800930e:	d100      	bne.n	8009312 <CheckAttachedButtons+0x2d6>
 8009310:	e6eb      	b.n	80090ea <CheckAttachedButtons+0xae>
 8009312:	2b04      	cmp	r3, #4
 8009314:	d000      	beq.n	8009318 <CheckAttachedButtons+0x2dc>
 8009316:	e6b3      	b.n	8009080 <CheckAttachedButtons+0x44>
					if(connected == GPIO_PIN_SET)
 8009318:	4643      	mov	r3, r8
 800931a:	2b01      	cmp	r3, #1
 800931c:	d100      	bne.n	8009320 <CheckAttachedButtons+0x2e4>
 800931e:	e6ef      	b.n	8009100 <CheckAttachedButtons+0xc4>
					else if(connected == GPIO_PIN_RESET)
 8009320:	2b00      	cmp	r3, #0
 8009322:	d000      	beq.n	8009326 <CheckAttachedButtons+0x2ea>
 8009324:	e6ac      	b.n	8009080 <CheckAttachedButtons+0x44>
						state =ON;
 8009326:	2602      	movs	r6, #2
 8009328:	e6ac      	b.n	8009084 <CheckAttachedButtons+0x48>
					buttonReleasedCallback(i);
 800932a:	0020      	movs	r0, r4
 800932c:	f7ff fe80 	bl	8009030 <buttonReleasedCallback>
					button[i].state =NONE;
 8009330:	00eb      	lsls	r3, r5, #3
 8009332:	195d      	adds	r5, r3, r5
 8009334:	4b19      	ldr	r3, [pc, #100]	; (800939c <CheckAttachedButtons+0x360>)
 8009336:	2200      	movs	r2, #0
 8009338:	54ea      	strb	r2, [r5, r3]
					break;
 800933a:	e7a6      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 800933c:	4b1a      	ldr	r3, [pc, #104]	; (80093a8 <CheckAttachedButtons+0x36c>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1a2      	bne.n	800928a <CheckAttachedButtons+0x24e>
 8009344:	00eb      	lsls	r3, r5, #3
 8009346:	195b      	adds	r3, r3, r5
 8009348:	4d14      	ldr	r5, [pc, #80]	; (800939c <CheckAttachedButtons+0x360>)
 800934a:	18ed      	adds	r5, r5, r3
 800934c:	7a2b      	ldrb	r3, [r5, #8]
 800934e:	07db      	lsls	r3, r3, #31
 8009350:	d59b      	bpl.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8009352:	4b15      	ldr	r3, [pc, #84]	; (80093a8 <CheckAttachedButtons+0x36c>)
 8009354:	2201      	movs	r2, #1
 8009356:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8009358:	0020      	movs	r0, r4
 800935a:	f7ff fe6a 	bl	8009032 <buttonClickedCallback>
 800935e:	e794      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 8009360:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <CheckAttachedButtons+0x36c>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d190      	bne.n	800928a <CheckAttachedButtons+0x24e>
 8009368:	00eb      	lsls	r3, r5, #3
 800936a:	195b      	adds	r3, r3, r5
 800936c:	4d0b      	ldr	r5, [pc, #44]	; (800939c <CheckAttachedButtons+0x360>)
 800936e:	18ed      	adds	r5, r5, r3
 8009370:	7a2b      	ldrb	r3, [r5, #8]
 8009372:	079b      	lsls	r3, r3, #30
 8009374:	d589      	bpl.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8009376:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <CheckAttachedButtons+0x36c>)
 8009378:	2201      	movs	r2, #1
 800937a:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 800937c:	0020      	movs	r0, r4
 800937e:	f7ff fe59 	bl	8009034 <buttonDblClickedCallback>
 8009382:	e782      	b.n	800928a <CheckAttachedButtons+0x24e>
 8009384:	200014fc 	.word	0x200014fc
 8009388:	20006da0 	.word	0x20006da0
 800938c:	20001514 	.word	0x20001514
 8009390:	200014ea 	.word	0x200014ea
 8009394:	0000fffe 	.word	0x0000fffe
 8009398:	200014f0 	.word	0x200014f0
 800939c:	200014b4 	.word	0x200014b4
 80093a0:	0000fe0a 	.word	0x0000fe0a
 80093a4:	0801c518 	.word	0x0801c518
 80093a8:	200014f6 	.word	0x200014f6
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 80093ac:	4b41      	ldr	r3, [pc, #260]	; (80094b4 <CheckAttachedButtons+0x478>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d000      	beq.n	80093b6 <CheckAttachedButtons+0x37a>
 80093b4:	e769      	b.n	800928a <CheckAttachedButtons+0x24e>
 80093b6:	00eb      	lsls	r3, r5, #3
 80093b8:	195b      	adds	r3, r3, r5
 80093ba:	4d3f      	ldr	r5, [pc, #252]	; (80094b8 <CheckAttachedButtons+0x47c>)
 80093bc:	18ed      	adds	r5, r5, r3
 80093be:	7a2b      	ldrb	r3, [r5, #8]
 80093c0:	075b      	lsls	r3, r3, #29
 80093c2:	d400      	bmi.n	80093c6 <CheckAttachedButtons+0x38a>
 80093c4:	e761      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80093c6:	4b3b      	ldr	r3, [pc, #236]	; (80094b4 <CheckAttachedButtons+0x478>)
 80093c8:	2201      	movs	r2, #1
 80093ca:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 80093cc:	2101      	movs	r1, #1
 80093ce:	0020      	movs	r0, r4
 80093d0:	f7ff fe31 	bl	8009036 <buttonPressedForXCallback>
 80093d4:	e759      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 80093d6:	4b37      	ldr	r3, [pc, #220]	; (80094b4 <CheckAttachedButtons+0x478>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d000      	beq.n	80093e0 <CheckAttachedButtons+0x3a4>
 80093de:	e754      	b.n	800928a <CheckAttachedButtons+0x24e>
 80093e0:	00eb      	lsls	r3, r5, #3
 80093e2:	195b      	adds	r3, r3, r5
 80093e4:	4d34      	ldr	r5, [pc, #208]	; (80094b8 <CheckAttachedButtons+0x47c>)
 80093e6:	18ed      	adds	r5, r5, r3
 80093e8:	7a2b      	ldrb	r3, [r5, #8]
 80093ea:	071b      	lsls	r3, r3, #28
 80093ec:	d400      	bmi.n	80093f0 <CheckAttachedButtons+0x3b4>
 80093ee:	e74c      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 80093f0:	4b30      	ldr	r3, [pc, #192]	; (80094b4 <CheckAttachedButtons+0x478>)
 80093f2:	2201      	movs	r2, #1
 80093f4:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 80093f6:	2102      	movs	r1, #2
 80093f8:	0020      	movs	r0, r4
 80093fa:	f7ff fe1c 	bl	8009036 <buttonPressedForXCallback>
 80093fe:	e744      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 8009400:	4b2c      	ldr	r3, [pc, #176]	; (80094b4 <CheckAttachedButtons+0x478>)
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d000      	beq.n	800940a <CheckAttachedButtons+0x3ce>
 8009408:	e73f      	b.n	800928a <CheckAttachedButtons+0x24e>
 800940a:	00eb      	lsls	r3, r5, #3
 800940c:	195b      	adds	r3, r3, r5
 800940e:	4d2a      	ldr	r5, [pc, #168]	; (80094b8 <CheckAttachedButtons+0x47c>)
 8009410:	18ed      	adds	r5, r5, r3
 8009412:	7a2b      	ldrb	r3, [r5, #8]
 8009414:	06db      	lsls	r3, r3, #27
 8009416:	d400      	bmi.n	800941a <CheckAttachedButtons+0x3de>
 8009418:	e737      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800941a:	4b26      	ldr	r3, [pc, #152]	; (80094b4 <CheckAttachedButtons+0x478>)
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8009420:	2103      	movs	r1, #3
 8009422:	0020      	movs	r0, r4
 8009424:	f7ff fe07 	bl	8009036 <buttonPressedForXCallback>
 8009428:	e72f      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 800942a:	4b22      	ldr	r3, [pc, #136]	; (80094b4 <CheckAttachedButtons+0x478>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d000      	beq.n	8009434 <CheckAttachedButtons+0x3f8>
 8009432:	e72a      	b.n	800928a <CheckAttachedButtons+0x24e>
 8009434:	00eb      	lsls	r3, r5, #3
 8009436:	195b      	adds	r3, r3, r5
 8009438:	4d1f      	ldr	r5, [pc, #124]	; (80094b8 <CheckAttachedButtons+0x47c>)
 800943a:	18ed      	adds	r5, r5, r3
 800943c:	7a2b      	ldrb	r3, [r5, #8]
 800943e:	069b      	lsls	r3, r3, #26
 8009440:	d400      	bmi.n	8009444 <CheckAttachedButtons+0x408>
 8009442:	e722      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 8009444:	4b1b      	ldr	r3, [pc, #108]	; (80094b4 <CheckAttachedButtons+0x478>)
 8009446:	2201      	movs	r2, #1
 8009448:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 800944a:	2101      	movs	r1, #1
 800944c:	0020      	movs	r0, r4
 800944e:	f7ff fdf3 	bl	8009038 <buttonReleasedForYCallback>
 8009452:	e71a      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 8009454:	4b17      	ldr	r3, [pc, #92]	; (80094b4 <CheckAttachedButtons+0x478>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d000      	beq.n	800945e <CheckAttachedButtons+0x422>
 800945c:	e715      	b.n	800928a <CheckAttachedButtons+0x24e>
 800945e:	00eb      	lsls	r3, r5, #3
 8009460:	195b      	adds	r3, r3, r5
 8009462:	4d15      	ldr	r5, [pc, #84]	; (80094b8 <CheckAttachedButtons+0x47c>)
 8009464:	18ed      	adds	r5, r5, r3
 8009466:	7a2b      	ldrb	r3, [r5, #8]
 8009468:	065b      	lsls	r3, r3, #25
 800946a:	d400      	bmi.n	800946e <CheckAttachedButtons+0x432>
 800946c:	e70d      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800946e:	4b11      	ldr	r3, [pc, #68]	; (80094b4 <CheckAttachedButtons+0x478>)
 8009470:	2201      	movs	r2, #1
 8009472:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 8009474:	2102      	movs	r1, #2
 8009476:	0020      	movs	r0, r4
 8009478:	f7ff fdde 	bl	8009038 <buttonReleasedForYCallback>
 800947c:	e705      	b.n	800928a <CheckAttachedButtons+0x24e>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 800947e:	4b0d      	ldr	r3, [pc, #52]	; (80094b4 <CheckAttachedButtons+0x478>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d000      	beq.n	8009488 <CheckAttachedButtons+0x44c>
 8009486:	e700      	b.n	800928a <CheckAttachedButtons+0x24e>
 8009488:	00eb      	lsls	r3, r5, #3
 800948a:	195b      	adds	r3, r3, r5
 800948c:	4d0a      	ldr	r5, [pc, #40]	; (80094b8 <CheckAttachedButtons+0x47c>)
 800948e:	18ed      	adds	r5, r5, r3
 8009490:	2308      	movs	r3, #8
 8009492:	56eb      	ldrsb	r3, [r5, r3]
 8009494:	2b00      	cmp	r3, #0
 8009496:	db00      	blt.n	800949a <CheckAttachedButtons+0x45e>
 8009498:	e6f7      	b.n	800928a <CheckAttachedButtons+0x24e>
						delayButtonStateReset = true;
 800949a:	4b06      	ldr	r3, [pc, #24]	; (80094b4 <CheckAttachedButtons+0x478>)
 800949c:	2201      	movs	r2, #1
 800949e:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 80094a0:	2103      	movs	r1, #3
 80094a2:	0020      	movs	r0, r4
 80094a4:	f7ff fdc8 	bl	8009038 <buttonReleasedForYCallback>
 80094a8:	e6ef      	b.n	800928a <CheckAttachedButtons+0x24e>
}
 80094aa:	b007      	add	sp, #28
 80094ac:	bc0c      	pop	{r2, r3}
 80094ae:	4690      	mov	r8, r2
 80094b0:	4699      	mov	r9, r3
 80094b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b4:	200014f6 	.word	0x200014f6
 80094b8:	200014b4 	.word	0x200014b4

080094bc <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 80094bc:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 80094be:	f008 f92a 	bl	8011716 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 80094c2:	b2c4      	uxtb	r4, r0
 80094c4:	0020      	movs	r0, r4
 80094c6:	f7fe fa49 	bl	800795c <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 80094ca:	0020      	movs	r0, r4
 80094cc:	f7fe fa74 	bl	80079b8 <SwitchStreamDMAToMsg>
}
 80094d0:	bd10      	pop	{r4, pc}
	...

080094d4 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 80094d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094d6:	b085      	sub	sp, #20
 80094d8:	000d      	movs	r5, r1
 80094da:	0014      	movs	r4, r2
 80094dc:	220f      	movs	r2, #15
 80094de:	446a      	add	r2, sp
 80094e0:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80094e2:	aa0a      	add	r2, sp, #40	; 0x28
 80094e4:	7812      	ldrb	r2, [r2, #0]
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d00d      	beq.n	8009506 <SetupDMAStreams+0x32>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d100      	bne.n	80094f0 <SetupDMAStreams+0x1c>
 80094ee:	e0b9      	b.n	8009664 <SetupDMAStreams+0x190>
 80094f0:	2a00      	cmp	r2, #0
 80094f2:	d100      	bne.n	80094f6 <SetupDMAStreams+0x22>
 80094f4:	e0b9      	b.n	800966a <SetupDMAStreams+0x196>
	if(direction == FORWARD){
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d00a      	beq.n	8009510 <SetupDMAStreams+0x3c>
	else if(direction == BACKWARD){
 80094fa:	2801      	cmp	r0, #1
 80094fc:	d041      	beq.n	8009582 <SetupDMAStreams+0xae>
	else if(direction == BIDIRECTIONAL){
 80094fe:	2802      	cmp	r0, #2
 8009500:	d069      	beq.n	80095d6 <SetupDMAStreams+0x102>
		return BOS_ERR_WrongParam;
 8009502:	2067      	movs	r0, #103	; 0x67
 8009504:	e0af      	b.n	8009666 <SetupDMAStreams+0x192>
		portStatus[src] =STREAM;
 8009506:	4a5b      	ldr	r2, [pc, #364]	; (8009674 <SetupDMAStreams+0x1a0>)
 8009508:	2102      	movs	r1, #2
 800950a:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 800950c:	2067      	movs	r0, #103	; 0x67
 800950e:	e0aa      	b.n	8009666 <SetupDMAStreams+0x192>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009510:	0018      	movs	r0, r3
 8009512:	f006 f92b 	bl	800f76c <GetUart>
 8009516:	0006      	movs	r6, r0
 8009518:	ab0a      	add	r3, sp, #40	; 0x28
 800951a:	7818      	ldrb	r0, [r3, #0]
 800951c:	f006 f926 	bl	800f76c <GetUart>
 8009520:	0001      	movs	r1, r0
 8009522:	2201      	movs	r2, #1
 8009524:	0030      	movs	r0, r6
 8009526:	f7fe fa79 	bl	8007a1c <StartDMAstream>
 800952a:	2817      	cmp	r0, #23
 800952c:	d100      	bne.n	8009530 <SetupDMAStreams+0x5c>
 800952e:	e09a      	b.n	8009666 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009530:	0160      	lsls	r0, r4, #5
 8009532:	1b00      	subs	r0, r0, r4
 8009534:	0080      	lsls	r0, r0, #2
 8009536:	1900      	adds	r0, r0, r4
 8009538:	00c0      	lsls	r0, r0, #3
 800953a:	21fa      	movs	r1, #250	; 0xfa
 800953c:	0089      	lsls	r1, r1, #2
 800953e:	f7f6 fe07 	bl	8000150 <__udivsi3>
 8009542:	0001      	movs	r1, r0
 8009544:	260f      	movs	r6, #15
 8009546:	446e      	add	r6, sp
 8009548:	4b4b      	ldr	r3, [pc, #300]	; (8009678 <SetupDMAStreams+0x1a4>)
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	0033      	movs	r3, r6
 800954e:	2200      	movs	r2, #0
 8009550:	484a      	ldr	r0, [pc, #296]	; (800967c <SetupDMAStreams+0x1a8>)
 8009552:	f007 ff83 	bl	801145c <xTimerCreate>
 8009556:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8009558:	7833      	ldrb	r3, [r6, #0]
 800955a:	3b01      	subs	r3, #1
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4a48      	ldr	r2, [pc, #288]	; (8009680 <SetupDMAStreams+0x1ac>)
 8009560:	509d      	str	r5, [r3, r2]
	if(xTimerStream != NULL)
 8009562:	2c00      	cmp	r4, #0
 8009564:	d100      	bne.n	8009568 <SetupDMAStreams+0x94>
 8009566:	e082      	b.n	800966e <SetupDMAStreams+0x19a>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8009568:	f007 fa0a 	bl	8010980 <xTaskGetTickCount>
 800956c:	0002      	movs	r2, r0
 800956e:	2301      	movs	r3, #1
 8009570:	425b      	negs	r3, r3
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	2300      	movs	r3, #0
 8009576:	2101      	movs	r1, #1
 8009578:	0020      	movs	r0, r4
 800957a:	f007 ff93 	bl	80114a4 <xTimerGenericCommand>
	return BOS_OK;
 800957e:	2000      	movs	r0, #0
 8009580:	e071      	b.n	8009666 <SetupDMAStreams+0x192>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009582:	0010      	movs	r0, r2
 8009584:	f006 f8f2 	bl	800f76c <GetUart>
 8009588:	0006      	movs	r6, r0
 800958a:	230f      	movs	r3, #15
 800958c:	446b      	add	r3, sp
 800958e:	7818      	ldrb	r0, [r3, #0]
 8009590:	f006 f8ec 	bl	800f76c <GetUart>
 8009594:	0001      	movs	r1, r0
 8009596:	2201      	movs	r2, #1
 8009598:	0030      	movs	r0, r6
 800959a:	f7fe fa3f 	bl	8007a1c <StartDMAstream>
 800959e:	2817      	cmp	r0, #23
 80095a0:	d061      	beq.n	8009666 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80095a2:	0160      	lsls	r0, r4, #5
 80095a4:	1b00      	subs	r0, r0, r4
 80095a6:	0080      	lsls	r0, r0, #2
 80095a8:	1900      	adds	r0, r0, r4
 80095aa:	00c0      	lsls	r0, r0, #3
 80095ac:	21fa      	movs	r1, #250	; 0xfa
 80095ae:	0089      	lsls	r1, r1, #2
 80095b0:	f7f6 fdce 	bl	8000150 <__udivsi3>
 80095b4:	0001      	movs	r1, r0
 80095b6:	4b30      	ldr	r3, [pc, #192]	; (8009678 <SetupDMAStreams+0x1a4>)
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	ab0a      	add	r3, sp, #40	; 0x28
 80095bc:	2200      	movs	r2, #0
 80095be:	482f      	ldr	r0, [pc, #188]	; (800967c <SetupDMAStreams+0x1a8>)
 80095c0:	f007 ff4c 	bl	801145c <xTimerCreate>
 80095c4:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80095c6:	230f      	movs	r3, #15
 80095c8:	446b      	add	r3, sp
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4a2b      	ldr	r2, [pc, #172]	; (8009680 <SetupDMAStreams+0x1ac>)
 80095d2:	509d      	str	r5, [r3, r2]
 80095d4:	e7c5      	b.n	8009562 <SetupDMAStreams+0x8e>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80095d6:	0018      	movs	r0, r3
 80095d8:	f006 f8c8 	bl	800f76c <GetUart>
 80095dc:	0006      	movs	r6, r0
 80095de:	ab0a      	add	r3, sp, #40	; 0x28
 80095e0:	7818      	ldrb	r0, [r3, #0]
 80095e2:	f006 f8c3 	bl	800f76c <GetUart>
 80095e6:	0001      	movs	r1, r0
 80095e8:	2201      	movs	r2, #1
 80095ea:	0030      	movs	r0, r6
 80095ec:	f7fe fa16 	bl	8007a1c <StartDMAstream>
 80095f0:	2817      	cmp	r0, #23
 80095f2:	d038      	beq.n	8009666 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80095f4:	0160      	lsls	r0, r4, #5
 80095f6:	1b00      	subs	r0, r0, r4
 80095f8:	0080      	lsls	r0, r0, #2
 80095fa:	1900      	adds	r0, r0, r4
 80095fc:	00c0      	lsls	r0, r0, #3
 80095fe:	21fa      	movs	r1, #250	; 0xfa
 8009600:	0089      	lsls	r1, r1, #2
 8009602:	f7f6 fda5 	bl	8000150 <__udivsi3>
 8009606:	0004      	movs	r4, r0
 8009608:	260f      	movs	r6, #15
 800960a:	446e      	add	r6, sp
 800960c:	4b1a      	ldr	r3, [pc, #104]	; (8009678 <SetupDMAStreams+0x1a4>)
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	0033      	movs	r3, r6
 8009612:	2200      	movs	r2, #0
 8009614:	0001      	movs	r1, r0
 8009616:	4819      	ldr	r0, [pc, #100]	; (800967c <SetupDMAStreams+0x1a8>)
 8009618:	f007 ff20 	bl	801145c <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 800961c:	7833      	ldrb	r3, [r6, #0]
 800961e:	3b01      	subs	r3, #1
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4a17      	ldr	r2, [pc, #92]	; (8009680 <SetupDMAStreams+0x1ac>)
 8009624:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009626:	ab0a      	add	r3, sp, #40	; 0x28
 8009628:	7818      	ldrb	r0, [r3, #0]
 800962a:	f006 f89f 	bl	800f76c <GetUart>
 800962e:	0007      	movs	r7, r0
 8009630:	7830      	ldrb	r0, [r6, #0]
 8009632:	f006 f89b 	bl	800f76c <GetUart>
 8009636:	0001      	movs	r1, r0
 8009638:	2201      	movs	r2, #1
 800963a:	0038      	movs	r0, r7
 800963c:	f7fe f9ee 	bl	8007a1c <StartDMAstream>
 8009640:	2817      	cmp	r0, #23
 8009642:	d010      	beq.n	8009666 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009644:	4b0c      	ldr	r3, [pc, #48]	; (8009678 <SetupDMAStreams+0x1a4>)
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	ab0a      	add	r3, sp, #40	; 0x28
 800964a:	2200      	movs	r2, #0
 800964c:	0021      	movs	r1, r4
 800964e:	480b      	ldr	r0, [pc, #44]	; (800967c <SetupDMAStreams+0x1a8>)
 8009650:	f007 ff04 	bl	801145c <xTimerCreate>
 8009654:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8009656:	ab0a      	add	r3, sp, #40	; 0x28
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	3b01      	subs	r3, #1
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4a08      	ldr	r2, [pc, #32]	; (8009680 <SetupDMAStreams+0x1ac>)
 8009660:	509d      	str	r5, [r3, r2]
 8009662:	e77e      	b.n	8009562 <SetupDMAStreams+0x8e>
		return BOS_ERR_WrongParam;
 8009664:	2067      	movs	r0, #103	; 0x67
}
 8009666:	b005      	add	sp, #20
 8009668:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 800966a:	2067      	movs	r0, #103	; 0x67
 800966c:	e7fb      	b.n	8009666 <SetupDMAStreams+0x192>
	return BOS_OK;
 800966e:	2000      	movs	r0, #0
 8009670:	e7f9      	b.n	8009666 <SetupDMAStreams+0x192>
 8009672:	46c0      	nop			; (mov r8, r8)
 8009674:	200010e0 	.word	0x200010e0
 8009678:	080094bd 	.word	0x080094bd
 800967c:	0801c558 	.word	0x0801c558
 8009680:	20001460 	.word	0x20001460

08009684 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8009684:	b510      	push	{r4, lr}
	switch(port){
 8009686:	2805      	cmp	r0, #5
 8009688:	d80a      	bhi.n	80096a0 <NotifyMessagingTask+0x1c>
 800968a:	0080      	lsls	r0, r0, #2
 800968c:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <NotifyMessagingTask+0x60>)
 800968e:	581b      	ldr	r3, [r3, r0]
 8009690:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 8009692:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <NotifyMessagingTask+0x64>)
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	2300      	movs	r3, #0
 8009698:	2202      	movs	r2, #2
 800969a:	2100      	movs	r1, #0
 800969c:	f007 fdfa 	bl	8011294 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 80096a0:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 80096a2:	4b12      	ldr	r3, [pc, #72]	; (80096ec <NotifyMessagingTask+0x68>)
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	2300      	movs	r3, #0
 80096a8:	2202      	movs	r2, #2
 80096aa:	2100      	movs	r1, #0
 80096ac:	f007 fdf2 	bl	8011294 <xTaskGenericNotify>
			break;
 80096b0:	e7f6      	b.n	80096a0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 80096b2:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <NotifyMessagingTask+0x6c>)
 80096b4:	6818      	ldr	r0, [r3, #0]
 80096b6:	2300      	movs	r3, #0
 80096b8:	2202      	movs	r2, #2
 80096ba:	2100      	movs	r1, #0
 80096bc:	f007 fdea 	bl	8011294 <xTaskGenericNotify>
			break;
 80096c0:	e7ee      	b.n	80096a0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 80096c2:	4b0c      	ldr	r3, [pc, #48]	; (80096f4 <NotifyMessagingTask+0x70>)
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	2300      	movs	r3, #0
 80096c8:	2202      	movs	r2, #2
 80096ca:	2100      	movs	r1, #0
 80096cc:	f007 fde2 	bl	8011294 <xTaskGenericNotify>
			break;
 80096d0:	e7e6      	b.n	80096a0 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 80096d2:	4b09      	ldr	r3, [pc, #36]	; (80096f8 <NotifyMessagingTask+0x74>)
 80096d4:	6818      	ldr	r0, [r3, #0]
 80096d6:	2300      	movs	r3, #0
 80096d8:	2202      	movs	r2, #2
 80096da:	2100      	movs	r1, #0
 80096dc:	f007 fdda 	bl	8011294 <xTaskGenericNotify>
}
 80096e0:	e7de      	b.n	80096a0 <NotifyMessagingTask+0x1c>
 80096e2:	46c0      	nop			; (mov r8, r8)
 80096e4:	0801c540 	.word	0x0801c540
 80096e8:	2000147c 	.word	0x2000147c
 80096ec:	20001480 	.word	0x20001480
 80096f0:	20001484 	.word	0x20001484
 80096f4:	20001488 	.word	0x20001488
 80096f8:	2000148c 	.word	0x2000148c

080096fc <SendMessageFromPort>:
 6   !0        0					!0							Either single-cast message with myID as source module OR (if code == 0)
 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7   !0        !0				0								Not allowed.
 8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80096fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096fe:	46de      	mov	lr, fp
 8009700:	4657      	mov	r7, sl
 8009702:	464e      	mov	r6, r9
 8009704:	4645      	mov	r5, r8
 8009706:	b5e0      	push	{r5, r6, r7, lr}
 8009708:	b085      	sub	sp, #20
 800970a:	0007      	movs	r7, r0
 800970c:	4688      	mov	r8, r1
 800970e:	0015      	movs	r5, r2
 8009710:	4699      	mov	r9, r3
 8009712:	ab0e      	add	r3, sp, #56	; 0x38
 8009714:	881e      	ldrh	r6, [r3, #0]
	static uint16_t ptrShift =0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009716:	0003      	movs	r3, r0
 8009718:	4313      	orrs	r3, r2
 800971a:	d100      	bne.n	800971e <SendMessageFromPort+0x22>
 800971c:	e167      	b.n	80099ee <SendMessageFromPort+0x2f2>
 800971e:	2800      	cmp	r0, #0
 8009720:	d104      	bne.n	800972c <SendMessageFromPort+0x30>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009722:	2aff      	cmp	r2, #255	; 0xff
 8009724:	d002      	beq.n	800972c <SendMessageFromPort+0x30>
 8009726:	2afe      	cmp	r2, #254	; 0xfe
 8009728:	d000      	beq.n	800972c <SendMessageFromPort+0x30>
 800972a:	e162      	b.n	80099f2 <SendMessageFromPort+0x2f6>
 800972c:	2f00      	cmp	r7, #0
 800972e:	d005      	beq.n	800973c <SendMessageFromPort+0x40>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8009730:	4643      	mov	r3, r8
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <SendMessageFromPort+0x40>
 8009736:	2d00      	cmp	r5, #0
 8009738:	d100      	bne.n	800973c <SendMessageFromPort+0x40>
 800973a:	e15c      	b.n	80099f6 <SendMessageFromPort+0x2fa>
		return BOS_ERR_WrongParam;
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 800973c:	2000      	movs	r0, #0
 800973e:	f007 f883 	bl	8010848 <uxTaskPriorityGet>
 8009742:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8009744:	2105      	movs	r1, #5
 8009746:	2000      	movs	r0, #0
 8009748:	f007 f88e 	bl	8010868 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 800974c:	4bae      	ldr	r3, [pc, #696]	; (8009a08 <SendMessageFromPort+0x30c>)
 800974e:	2248      	movs	r2, #72	; 0x48
 8009750:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8009752:	3212      	adds	r2, #18
 8009754:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009756:	4643      	mov	r3, r8
 8009758:	433b      	orrs	r3, r7
 800975a:	d103      	bne.n	8009764 <SendMessageFromPort+0x68>
 800975c:	1cab      	adds	r3, r5, #2
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b01      	cmp	r3, #1
 8009762:	d902      	bls.n	800976a <SendMessageFromPort+0x6e>
 8009764:	464b      	mov	r3, r9
 8009766:	2b00      	cmp	r3, #0
 8009768:	d134      	bne.n	80097d4 <SendMessageFromPort+0xd8>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 800976a:	3e01      	subs	r6, #1
 800976c:	4ba7      	ldr	r3, [pc, #668]	; (8009a0c <SendMessageFromPort+0x310>)
 800976e:	5d9c      	ldrb	r4, [r3, r6]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8009770:	00f3      	lsls	r3, r6, #3
 8009772:	1b9e      	subs	r6, r3, r6
 8009774:	00f1      	lsls	r1, r6, #3
 8009776:	4ba6      	ldr	r3, [pc, #664]	; (8009a10 <SendMessageFromPort+0x314>)
 8009778:	18c9      	adds	r1, r1, r3
 800977a:	0022      	movs	r2, r4
 800977c:	48a5      	ldr	r0, [pc, #660]	; (8009a14 <SendMessageFromPort+0x318>)
 800977e:	f00b fd7a 	bl	8015276 <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 8009782:	4ba1      	ldr	r3, [pc, #644]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009784:	469a      	mov	sl, r3
 8009786:	709c      	strb	r4, [r3, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8009788:	1ce6      	adds	r6, r4, #3
 800978a:	0032      	movs	r2, r6
 800978c:	0019      	movs	r1, r3
 800978e:	48a2      	ldr	r0, [pc, #648]	; (8009a18 <SendMessageFromPort+0x31c>)
 8009790:	f00b fd71 	bl	8015276 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009794:	b2a4      	uxth	r4, r4
 8009796:	1ce1      	adds	r1, r4, #3
 8009798:	b289      	uxth	r1, r1
 800979a:	489f      	ldr	r0, [pc, #636]	; (8009a18 <SendMessageFromPort+0x31c>)
 800979c:	f005 fa36 	bl	800ec0c <CalculateCRC8>
 80097a0:	4653      	mov	r3, sl
 80097a2:	5598      	strb	r0, [r3, r6]
	/* end of crc calculation function addition */

//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);
	memset(crcBuffer,0,sizeof(crcBuffer));
 80097a4:	2238      	movs	r2, #56	; 0x38
 80097a6:	2100      	movs	r1, #0
 80097a8:	489b      	ldr	r0, [pc, #620]	; (8009a18 <SendMessageFromPort+0x31c>)
 80097aa:	f00b fd6d 	bl	8015288 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 80097ae:	3502      	adds	r5, #2
 80097b0:	b2ed      	uxtb	r5, r5
 80097b2:	2d01      	cmp	r5, #1
 80097b4:	d900      	bls.n	80097b8 <SendMessageFromPort+0xbc>
 80097b6:	e0eb      	b.n	8009990 <SendMessageFromPort+0x294>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else{
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 80097b8:	464b      	mov	r3, r9
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d105      	bne.n	80097ca <SendMessageFromPort+0xce>
 80097be:	4643      	mov	r3, r8
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <SendMessageFromPort+0xce>
			src =message[4];
 80097c4:	4b90      	ldr	r3, [pc, #576]	; (8009a08 <SendMessageFromPort+0x30c>)
 80097c6:	791b      	ldrb	r3, [r3, #4]
 80097c8:	4698      	mov	r8, r3
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 80097ca:	4640      	mov	r0, r8
 80097cc:	f7fa fad2 	bl	8003d74 <FindBroadcastRoutes>
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 80097d0:	2501      	movs	r5, #1
 80097d2:	e0f5      	b.n	80099c0 <SendMessageFromPort+0x2c4>
		if(src == 0)
 80097d4:	4643      	mov	r3, r8
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <SendMessageFromPort+0xe4>
			src =myID;
 80097da:	4b90      	ldr	r3, [pc, #576]	; (8009a1c <SendMessageFromPort+0x320>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	4698      	mov	r8, r3
		if(code > 0xFF)
 80097e0:	464b      	mov	r3, r9
 80097e2:	2bff      	cmp	r3, #255	; 0xff
 80097e4:	d84b      	bhi.n	800987e <SendMessageFromPort+0x182>
	bool extendOptions = false, extendCode = false;
 80097e6:	2100      	movs	r1, #0
		message[2] =length;
 80097e8:	4a87      	ldr	r2, [pc, #540]	; (8009a08 <SendMessageFromPort+0x30c>)
 80097ea:	2300      	movs	r3, #0
 80097ec:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 80097ee:	70d5      	strb	r5, [r2, #3]
		message[4] =src;
 80097f0:	4643      	mov	r3, r8
 80097f2:	7113      	strb	r3, [r2, #4]
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 80097f4:	488a      	ldr	r0, [pc, #552]	; (8009a20 <SendMessageFromPort+0x324>)
 80097f6:	2306      	movs	r3, #6
 80097f8:	56c3      	ldrsb	r3, [r0, r3]
 80097fa:	79c0      	ldrb	r0, [r0, #7]
 80097fc:	0080      	lsls	r0, r0, #2
 80097fe:	4303      	orrs	r3, r0
 8009800:	b25b      	sxtb	r3, r3
 8009802:	0048      	lsls	r0, r1, #1
 8009804:	4303      	orrs	r3, r0
 8009806:	b2db      	uxtb	r3, r3
 8009808:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 800980a:	4648      	mov	r0, r9
 800980c:	7190      	strb	r0, [r2, #6]
		if(extendCode == true){
 800980e:	2900      	cmp	r1, #0
 8009810:	d037      	beq.n	8009882 <SendMessageFromPort+0x186>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009812:	0a02      	lsrs	r2, r0, #8
 8009814:	497c      	ldr	r1, [pc, #496]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009816:	71ca      	strb	r2, [r1, #7]
			++shift;
 8009818:	2201      	movs	r2, #1
 800981a:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 800981c:	2e2e      	cmp	r6, #46	; 0x2e
 800981e:	d933      	bls.n	8009888 <SendMessageFromPort+0x18c>
			message[5] |=0x80;
 8009820:	2280      	movs	r2, #128	; 0x80
 8009822:	4252      	negs	r2, r2
 8009824:	4313      	orrs	r3, r2
 8009826:	4a78      	ldr	r2, [pc, #480]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009828:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 800982a:	4b7e      	ldr	r3, [pc, #504]	; (8009a24 <SendMessageFromPort+0x328>)
 800982c:	801e      	strh	r6, [r3, #0]
	uint8_t length =0, shift =0;
 800982e:	2400      	movs	r4, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8009830:	262e      	movs	r6, #46	; 0x2e
			while(totalNumberOfParams != 0){
 8009832:	4b7c      	ldr	r3, [pc, #496]	; (8009a24 <SendMessageFromPort+0x328>)
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	469a      	mov	sl, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d035      	beq.n	80098a8 <SendMessageFromPort+0x1ac>
				if((totalNumberOfParams / numberOfParams) >= 1){
 800983c:	0031      	movs	r1, r6
 800983e:	4650      	mov	r0, sl
 8009840:	f7f6 fc86 	bl	8000150 <__udivsi3>
 8009844:	b280      	uxth	r0, r0
 8009846:	2800      	cmp	r0, #0
 8009848:	d13b      	bne.n	80098c2 <SendMessageFromPort+0x1c6>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 800984a:	486f      	ldr	r0, [pc, #444]	; (8009a08 <SendMessageFromPort+0x30c>)
 800984c:	7942      	ldrb	r2, [r0, #5]
 800984e:	237f      	movs	r3, #127	; 0x7f
 8009850:	4013      	ands	r3, r2
 8009852:	7143      	strb	r3, [r0, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009854:	465b      	mov	r3, fp
 8009856:	3307      	adds	r3, #7
 8009858:	1818      	adds	r0, r3, r0
 800985a:	4c73      	ldr	r4, [pc, #460]	; (8009a28 <SendMessageFromPort+0x32c>)
 800985c:	8821      	ldrh	r1, [r4, #0]
 800985e:	4b73      	ldr	r3, [pc, #460]	; (8009a2c <SendMessageFromPort+0x330>)
 8009860:	18c9      	adds	r1, r1, r3
 8009862:	4652      	mov	r2, sl
 8009864:	f00b fd07 	bl	8015276 <memcpy>
					ptrShift =0;
 8009868:	2300      	movs	r3, #0
 800986a:	8023      	strh	r3, [r4, #0]
					totalNumberOfParams =0;
 800986c:	4a6d      	ldr	r2, [pc, #436]	; (8009a24 <SendMessageFromPort+0x328>)
 800986e:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 8009870:	465c      	mov	r4, fp
 8009872:	4454      	add	r4, sl
 8009874:	b2e4      	uxtb	r4, r4
 8009876:	3404      	adds	r4, #4
 8009878:	b2e4      	uxtb	r4, r4
					numberOfParams =totalNumberOfParams;
 800987a:	4656      	mov	r6, sl
 800987c:	e7d9      	b.n	8009832 <SendMessageFromPort+0x136>
			extendCode = true;
 800987e:	2101      	movs	r1, #1
 8009880:	e7b2      	b.n	80097e8 <SendMessageFromPort+0xec>
 8009882:	2200      	movs	r2, #0
 8009884:	4693      	mov	fp, r2
 8009886:	e7c9      	b.n	800981c <SendMessageFromPort+0x120>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009888:	465b      	mov	r3, fp
 800988a:	3307      	adds	r3, #7
 800988c:	485e      	ldr	r0, [pc, #376]	; (8009a08 <SendMessageFromPort+0x30c>)
 800988e:	1818      	adds	r0, r3, r0
 8009890:	4b65      	ldr	r3, [pc, #404]	; (8009a28 <SendMessageFromPort+0x32c>)
 8009892:	8819      	ldrh	r1, [r3, #0]
 8009894:	4b65      	ldr	r3, [pc, #404]	; (8009a2c <SendMessageFromPort+0x330>)
 8009896:	18c9      	adds	r1, r1, r3
 8009898:	0032      	movs	r2, r6
 800989a:	f00b fcec 	bl	8015276 <memcpy>
			length =numberOfParams + shift + 4;
 800989e:	465b      	mov	r3, fp
 80098a0:	199c      	adds	r4, r3, r6
 80098a2:	b2e4      	uxtb	r4, r4
 80098a4:	3404      	adds	r4, #4
 80098a6:	b2e4      	uxtb	r4, r4
		if(AddBcastPayload == true){
 80098a8:	4b61      	ldr	r3, [pc, #388]	; (8009a30 <SendMessageFromPort+0x334>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d100      	bne.n	80098b2 <SendMessageFromPort+0x1b6>
 80098b0:	e767      	b.n	8009782 <SendMessageFromPort+0x86>
			if(dstGroupID < BOS_BROADCAST){
 80098b2:	4b60      	ldr	r3, [pc, #384]	; (8009a34 <SendMessageFromPort+0x338>)
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	469a      	mov	sl, r3
 80098b8:	2bff      	cmp	r3, #255	; 0xff
 80098ba:	d015      	beq.n	80098e8 <SendMessageFromPort+0x1ec>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80098bc:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 80098be:	2200      	movs	r2, #0
 80098c0:	e016      	b.n	80098f0 <SendMessageFromPort+0x1f4>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 80098c2:	9600      	str	r6, [sp, #0]
 80098c4:	464b      	mov	r3, r9
 80098c6:	002a      	movs	r2, r5
 80098c8:	4641      	mov	r1, r8
 80098ca:	0038      	movs	r0, r7
 80098cc:	f7ff ff16 	bl	80096fc <SendMessageFromPort>
					osDelay(10);
 80098d0:	200a      	movs	r0, #10
 80098d2:	f006 f89d 	bl	800fa10 <osDelay>
					totalNumberOfParams -=numberOfParams;
 80098d6:	4a53      	ldr	r2, [pc, #332]	; (8009a24 <SendMessageFromPort+0x328>)
 80098d8:	8813      	ldrh	r3, [r2, #0]
 80098da:	1b9b      	subs	r3, r3, r6
 80098dc:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 80098de:	4a52      	ldr	r2, [pc, #328]	; (8009a28 <SendMessageFromPort+0x32c>)
 80098e0:	8813      	ldrh	r3, [r2, #0]
 80098e2:	18f3      	adds	r3, r6, r3
 80098e4:	8013      	strh	r3, [r2, #0]
 80098e6:	e7a4      	b.n	8009832 <SendMessageFromPort+0x136>
			uint8_t groupMembers =0;
 80098e8:	2200      	movs	r2, #0
 80098ea:	e022      	b.n	8009932 <SendMessageFromPort+0x236>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80098ec:	3301      	adds	r3, #1
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	4851      	ldr	r0, [pc, #324]	; (8009a38 <SendMessageFromPort+0x33c>)
 80098f2:	7800      	ldrb	r0, [r0, #0]
 80098f4:	4298      	cmp	r0, r3
 80098f6:	d316      	bcc.n	8009926 <SendMessageFromPort+0x22a>
					if(InGroup(i,dstGroupID)){
 80098f8:	1e58      	subs	r0, r3, #1
 80098fa:	0040      	lsls	r0, r0, #1
 80098fc:	494f      	ldr	r1, [pc, #316]	; (8009a3c <SendMessageFromPort+0x340>)
 80098fe:	5a40      	ldrh	r0, [r0, r1]
 8009900:	4651      	mov	r1, sl
 8009902:	4108      	asrs	r0, r1
 8009904:	07c1      	lsls	r1, r0, #31
 8009906:	d5f1      	bpl.n	80098ec <SendMessageFromPort+0x1f0>
						++groupMembers;							// Add this member
 8009908:	3201      	adds	r2, #1
 800990a:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 800990c:	18b0      	adds	r0, r6, r2
 800990e:	3001      	adds	r0, #1
 8009910:	282d      	cmp	r0, #45	; 0x2d
 8009912:	dd00      	ble.n	8009916 <SendMessageFromPort+0x21a>
 8009914:	e071      	b.n	80099fa <SendMessageFromPort+0x2fe>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009916:	4659      	mov	r1, fp
 8009918:	1dc8      	adds	r0, r1, #7
 800991a:	1830      	adds	r0, r6, r0
 800991c:	1810      	adds	r0, r2, r0
 800991e:	3801      	subs	r0, #1
 8009920:	4939      	ldr	r1, [pc, #228]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009922:	540b      	strb	r3, [r1, r0]
 8009924:	e7e2      	b.n	80098ec <SendMessageFromPort+0x1f0>
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8009926:	465b      	mov	r3, fp
 8009928:	3307      	adds	r3, #7
 800992a:	18f3      	adds	r3, r6, r3
 800992c:	18d3      	adds	r3, r2, r3
 800992e:	4836      	ldr	r0, [pc, #216]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009930:	54c2      	strb	r2, [r0, r3]
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009932:	4653      	mov	r3, sl
 8009934:	2bff      	cmp	r3, #255	; 0xff
 8009936:	d01a      	beq.n	800996e <SendMessageFromPort+0x272>
			else if(dstGroupID == BOS_BROADCAST)
 8009938:	4653      	mov	r3, sl
 800993a:	2bff      	cmp	r3, #255	; 0xff
 800993c:	d05f      	beq.n	80099fe <SendMessageFromPort+0x302>
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 800993e:	18b3      	adds	r3, r6, r2
 8009940:	3302      	adds	r3, #2
 8009942:	2b2d      	cmp	r3, #45	; 0x2d
 8009944:	dc5d      	bgt.n	8009a02 <SendMessageFromPort+0x306>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8009946:	483e      	ldr	r0, [pc, #248]	; (8009a40 <SendMessageFromPort+0x344>)
 8009948:	7803      	ldrb	r3, [r0, #0]
 800994a:	3301      	adds	r3, #1
 800994c:	b2db      	uxtb	r3, r3
 800994e:	7003      	strb	r3, [r0, #0]
 8009950:	4658      	mov	r0, fp
 8009952:	3007      	adds	r0, #7
 8009954:	1836      	adds	r6, r6, r0
 8009956:	1996      	adds	r6, r2, r6
 8009958:	3601      	adds	r6, #1
 800995a:	482b      	ldr	r0, [pc, #172]	; (8009a08 <SendMessageFromPort+0x30c>)
 800995c:	5583      	strb	r3, [r0, r6]
			if(dstGroupID == BOS_BROADCAST)
 800995e:	4653      	mov	r3, sl
 8009960:	2bff      	cmp	r3, #255	; 0xff
 8009962:	d012      	beq.n	800998a <SendMessageFromPort+0x28e>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009964:	18a4      	adds	r4, r4, r2
 8009966:	b2e4      	uxtb	r4, r4
 8009968:	3402      	adds	r4, #2
 800996a:	b2e4      	uxtb	r4, r4
 800996c:	e709      	b.n	8009782 <SendMessageFromPort+0x86>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 800996e:	1c73      	adds	r3, r6, #1
 8009970:	2b2d      	cmp	r3, #45	; 0x2d
 8009972:	dce1      	bgt.n	8009938 <SendMessageFromPort+0x23c>
				message[7 + shift + numberOfParams] =++bcastID;
 8009974:	4832      	ldr	r0, [pc, #200]	; (8009a40 <SendMessageFromPort+0x344>)
 8009976:	7803      	ldrb	r3, [r0, #0]
 8009978:	3301      	adds	r3, #1
 800997a:	b2db      	uxtb	r3, r3
 800997c:	7003      	strb	r3, [r0, #0]
 800997e:	4658      	mov	r0, fp
 8009980:	3007      	adds	r0, #7
 8009982:	1836      	adds	r6, r6, r0
 8009984:	4820      	ldr	r0, [pc, #128]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009986:	5583      	strb	r3, [r0, r6]
 8009988:	e7e9      	b.n	800995e <SendMessageFromPort+0x262>
				length +=1;		// + bcastID
 800998a:	3401      	adds	r4, #1
 800998c:	b2e4      	uxtb	r4, r4
 800998e:	e6f8      	b.n	8009782 <SendMessageFromPort+0x86>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009990:	3404      	adds	r4, #4
 8009992:	b2a2      	uxth	r2, r4
 8009994:	2332      	movs	r3, #50	; 0x32
 8009996:	491c      	ldr	r1, [pc, #112]	; (8009a08 <SendMessageFromPort+0x30c>)
 8009998:	0038      	movs	r0, r7
 800999a:	f005 ff53 	bl	800f844 <writePxDMAMutex>
			}
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 800999e:	9903      	ldr	r1, [sp, #12]
 80099a0:	2000      	movs	r0, #0
 80099a2:	f006 ff61 	bl	8010868 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 80099a6:	4b27      	ldr	r3, [pc, #156]	; (8009a44 <SendMessageFromPort+0x348>)
 80099a8:	2202      	movs	r2, #2
 80099aa:	701a      	strb	r2, [r3, #0]
	
	return result;
 80099ac:	2000      	movs	r0, #0
}
 80099ae:	b005      	add	sp, #20
 80099b0:	bc3c      	pop	{r2, r3, r4, r5}
 80099b2:	4690      	mov	r8, r2
 80099b4:	4699      	mov	r9, r3
 80099b6:	46a2      	mov	sl, r4
 80099b8:	46ab      	mov	fp, r5
 80099ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t p =1; p <= NumOfPorts; p++){
 80099bc:	3501      	adds	r5, #1
 80099be:	b2ed      	uxtb	r5, r5
 80099c0:	2d05      	cmp	r5, #5
 80099c2:	d8ec      	bhi.n	800999e <SendMessageFromPort+0x2a2>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 80099c4:	4b15      	ldr	r3, [pc, #84]	; (8009a1c <SendMessageFromPort+0x320>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	005b      	lsls	r3, r3, #1
 80099cc:	4a1e      	ldr	r2, [pc, #120]	; (8009a48 <SendMessageFromPort+0x34c>)
 80099ce:	5a9b      	ldrh	r3, [r3, r2]
 80099d0:	1e6a      	subs	r2, r5, #1
 80099d2:	4113      	asrs	r3, r2
 80099d4:	07db      	lsls	r3, r3, #31
 80099d6:	d5f1      	bpl.n	80099bc <SendMessageFromPort+0x2c0>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 80099d8:	1d22      	adds	r2, r4, #4
 80099da:	b292      	uxth	r2, r2
 80099dc:	2332      	movs	r3, #50	; 0x32
 80099de:	490a      	ldr	r1, [pc, #40]	; (8009a08 <SendMessageFromPort+0x30c>)
 80099e0:	0028      	movs	r0, r5
 80099e2:	f005 ff2f 	bl	800f844 <writePxDMAMutex>
				Delay_ms(1);
 80099e6:	2001      	movs	r0, #1
 80099e8:	f008 f88e 	bl	8011b08 <HAL_Delay>
 80099ec:	e7e6      	b.n	80099bc <SendMessageFromPort+0x2c0>
		return BOS_ERR_WrongParam;
 80099ee:	2067      	movs	r0, #103	; 0x67
 80099f0:	e7dd      	b.n	80099ae <SendMessageFromPort+0x2b2>
 80099f2:	2067      	movs	r0, #103	; 0x67
 80099f4:	e7db      	b.n	80099ae <SendMessageFromPort+0x2b2>
 80099f6:	2067      	movs	r0, #103	; 0x67
 80099f8:	e7d9      	b.n	80099ae <SendMessageFromPort+0x2b2>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80099fa:	2069      	movs	r0, #105	; 0x69
 80099fc:	e7d7      	b.n	80099ae <SendMessageFromPort+0x2b2>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80099fe:	2069      	movs	r0, #105	; 0x69
 8009a00:	e7d5      	b.n	80099ae <SendMessageFromPort+0x2b2>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009a02:	2069      	movs	r0, #105	; 0x69
 8009a04:	e7d3      	b.n	80099ae <SendMessageFromPort+0x2b2>
 8009a06:	46c0      	nop			; (mov r8, r8)
 8009a08:	20000ee8 	.word	0x20000ee8
 8009a0c:	20000f20 	.word	0x20000f20
 8009a10:	20000d30 	.word	0x20000d30
 8009a14:	20000eeb 	.word	0x20000eeb
 8009a18:	20001400 	.word	0x20001400
 8009a1c:	20001066 	.word	0x20001066
 8009a20:	20006da0 	.word	0x20006da0
 8009a24:	2000153a 	.word	0x2000153a
 8009a28:	20001538 	.word	0x20001538
 8009a2c:	20000f28 	.word	0x20000f28
 8009a30:	20000a9c 	.word	0x20000a9c
 8009a34:	2000001d 	.word	0x2000001d
 8009a38:	2000001c 	.word	0x2000001c
 8009a3c:	20000eb0 	.word	0x20000eb0
 8009a40:	20000cdc 	.word	0x20000cdc
 8009a44:	200010f8 	.word	0x200010f8
 8009a48:	20000ce0 	.word	0x20000ce0

08009a4c <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009a4c:	b530      	push	{r4, r5, lr}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8009a52:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <ForwardReceivedMessage+0x34>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009a58:	1e42      	subs	r2, r0, #1
 8009a5a:	00d3      	lsls	r3, r2, #3
 8009a5c:	1a9b      	subs	r3, r3, r2
 8009a5e:	00da      	lsls	r2, r3, #3
 8009a60:	4b08      	ldr	r3, [pc, #32]	; (8009a84 <ForwardReceivedMessage+0x38>)
 8009a62:	5cd4      	ldrb	r4, [r2, r3]
	port =FindRoute(myID,dst);
 8009a64:	4b08      	ldr	r3, [pc, #32]	; (8009a88 <ForwardReceivedMessage+0x3c>)
 8009a66:	7818      	ldrb	r0, [r3, #0]
 8009a68:	0021      	movs	r1, r4
 8009a6a:	f7fa fa45 	bl	8003ef8 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009a6e:	9500      	str	r5, [sp, #0]
 8009a70:	2300      	movs	r3, #0
 8009a72:	0022      	movs	r2, r4
 8009a74:	2100      	movs	r1, #0
 8009a76:	f7ff fe41 	bl	80096fc <SendMessageFromPort>
}
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	b003      	add	sp, #12
 8009a7e:	bd30      	pop	{r4, r5, pc}
 8009a80:	20000a9c 	.word	0x20000a9c
 8009a84:	20000d30 	.word	0x20000d30
 8009a88:	20001066 	.word	0x20001066

08009a8c <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009a8c:	b500      	push	{lr}
 8009a8e:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009a90:	4b0c      	ldr	r3, [pc, #48]	; (8009ac4 <BroadcastReceivedMessage+0x38>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8009a96:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <BroadcastReceivedMessage+0x3c>)
 8009a98:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009a9a:	28ff      	cmp	r0, #255	; 0xff
 8009a9c:	d009      	beq.n	8009ab2 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8009a9e:	9100      	str	r1, [sp, #0]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	22fe      	movs	r2, #254	; 0xfe
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	f7ff fe28 	bl	80096fc <SendMessageFromPort>
}
 8009aac:	2000      	movs	r0, #0
 8009aae:	b003      	add	sp, #12
 8009ab0:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8009ab2:	9100      	str	r1, [sp, #0]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	32ff      	adds	r2, #255	; 0xff
 8009ab8:	2100      	movs	r1, #0
 8009aba:	2000      	movs	r0, #0
 8009abc:	f7ff fe1e 	bl	80096fc <SendMessageFromPort>
 8009ac0:	e7f4      	b.n	8009aac <BroadcastReceivedMessage+0x20>
 8009ac2:	46c0      	nop			; (mov r8, r8)
 8009ac4:	20000a9c 	.word	0x20000a9c
 8009ac8:	2000001d 	.word	0x2000001d

08009acc <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009acc:	b530      	push	{r4, r5, lr}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8009ad2:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <BroadcastMessage+0x44>)
 8009ad4:	2501      	movs	r5, #1
 8009ad6:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009ad8:	4b0e      	ldr	r3, [pc, #56]	; (8009b14 <BroadcastMessage+0x48>)
 8009ada:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009adc:	29ff      	cmp	r1, #255	; 0xff
 8009ade:	d00e      	beq.n	8009afe <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8009ae0:	9400      	str	r4, [sp, #0]
 8009ae2:	0013      	movs	r3, r2
 8009ae4:	22fe      	movs	r2, #254	; 0xfe
 8009ae6:	0001      	movs	r1, r0
 8009ae8:	2000      	movs	r0, #0
 8009aea:	f7ff fe07 	bl	80096fc <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8009aee:	0022      	movs	r2, r4
 8009af0:	2100      	movs	r1, #0
 8009af2:	4809      	ldr	r0, [pc, #36]	; (8009b18 <BroadcastMessage+0x4c>)
 8009af4:	f00b fbc8 	bl	8015288 <memset>
}
 8009af8:	2000      	movs	r0, #0
 8009afa:	b003      	add	sp, #12
 8009afc:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8009afe:	9400      	str	r4, [sp, #0]
 8009b00:	0013      	movs	r3, r2
 8009b02:	22ff      	movs	r2, #255	; 0xff
 8009b04:	0001      	movs	r1, r0
 8009b06:	2000      	movs	r0, #0
 8009b08:	f7ff fdf8 	bl	80096fc <SendMessageFromPort>
 8009b0c:	e7ef      	b.n	8009aee <BroadcastMessage+0x22>
 8009b0e:	46c0      	nop			; (mov r8, r8)
 8009b10:	20000a9c 	.word	0x20000a9c
 8009b14:	2000001d 	.word	0x2000001d
 8009b18:	20000f28 	.word	0x20000f28

08009b1c <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	0004      	movs	r4, r0
 8009b22:	000e      	movs	r6, r1
 8009b24:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 8009b26:	28ff      	cmp	r0, #255	; 0xff
 8009b28:	d012      	beq.n	8009b50 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8009b2a:	4f0d      	ldr	r7, [pc, #52]	; (8009b60 <SendMessageToModule+0x44>)
 8009b2c:	7838      	ldrb	r0, [r7, #0]
 8009b2e:	0021      	movs	r1, r4
 8009b30:	f7fa f9e2 	bl	8003ef8 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009b34:	7839      	ldrb	r1, [r7, #0]
 8009b36:	9500      	str	r5, [sp, #0]
 8009b38:	0033      	movs	r3, r6
 8009b3a:	0022      	movs	r2, r4
 8009b3c:	f7ff fdde 	bl	80096fc <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009b40:	002a      	movs	r2, r5
 8009b42:	2100      	movs	r1, #0
 8009b44:	4807      	ldr	r0, [pc, #28]	; (8009b64 <SendMessageToModule+0x48>)
 8009b46:	f00b fb9f 	bl	8015288 <memset>
}
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	b003      	add	sp, #12
 8009b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009b50:	4b03      	ldr	r3, [pc, #12]	; (8009b60 <SendMessageToModule+0x44>)
 8009b52:	7818      	ldrb	r0, [r3, #0]
 8009b54:	0013      	movs	r3, r2
 8009b56:	000a      	movs	r2, r1
 8009b58:	21ff      	movs	r1, #255	; 0xff
 8009b5a:	f7ff ffb7 	bl	8009acc <BroadcastMessage>
 8009b5e:	e7f4      	b.n	8009b4a <SendMessageToModule+0x2e>
 8009b60:	20001066 	.word	0x20001066
 8009b64:	20000f28 	.word	0x20000f28

08009b68 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6a:	46de      	mov	lr, fp
 8009b6c:	4657      	mov	r7, sl
 8009b6e:	464e      	mov	r6, r9
 8009b70:	b5c0      	push	{r6, r7, lr}
 8009b72:	b08a      	sub	sp, #40	; 0x28
 8009b74:	9009      	str	r0, [sp, #36]	; 0x24
 8009b76:	000c      	movs	r4, r1
 8009b78:	9107      	str	r1, [sp, #28]
 8009b7a:	9208      	str	r2, [sp, #32]
 8009b7c:	001d      	movs	r5, r3
 8009b7e:	9306      	str	r3, [sp, #24]
 8009b80:	ab12      	add	r3, sp, #72	; 0x48
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	469a      	mov	sl, r3
 8009b86:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009b88:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009b8a:	ab15      	add	r3, sp, #84	; 0x54
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	469b      	mov	fp, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009b90:	4b4d      	ldr	r3, [pc, #308]	; (8009cc8 <StartScastDMAStream+0x160>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	428b      	cmp	r3, r1
 8009b96:	d103      	bne.n	8009ba0 <StartScastDMAStream+0x38>
		
		return result;
	}
	
	/* Inform participating modules */
	for(uint8_t i =0; i < sizeof(route); i++){
 8009b98:	2400      	movs	r4, #0
 8009b9a:	003d      	movs	r5, r7
 8009b9c:	0037      	movs	r7, r6
 8009b9e:	e055      	b.n	8009c4c <StartScastDMAStream+0xe4>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009ba0:	0e32      	lsrs	r2, r6, #24
 8009ba2:	4b4a      	ldr	r3, [pc, #296]	; (8009ccc <StartScastDMAStream+0x164>)
 8009ba4:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009ba6:	0c32      	lsrs	r2, r6, #16
 8009ba8:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009baa:	0a32      	lsrs	r2, r6, #8
 8009bac:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009bae:	70de      	strb	r6, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009bb0:	0e3a      	lsrs	r2, r7, #24
 8009bb2:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009bb4:	0c3a      	lsrs	r2, r7, #16
 8009bb6:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009bb8:	0a3a      	lsrs	r2, r7, #8
 8009bba:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009bbc:	71df      	strb	r7, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009bbe:	4651      	mov	r1, sl
 8009bc0:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009bc2:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 8009bc4:	729d      	strb	r5, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8009bc6:	9a08      	ldr	r2, [sp, #32]
 8009bc8:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8009bca:	465a      	mov	r2, fp
 8009bcc:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009bce:	220d      	movs	r2, #13
 8009bd0:	211c      	movs	r1, #28
 8009bd2:	0020      	movs	r0, r4
 8009bd4:	f7ff ffa2 	bl	8009b1c <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009bd8:	2000      	movs	r0, #0
 8009bda:	b00a      	add	sp, #40	; 0x28
 8009bdc:	bc1c      	pop	{r2, r3, r4}
 8009bde:	4691      	mov	r9, r2
 8009be0:	469a      	mov	sl, r3
 8009be2:	46a3      	mov	fp, r4
 8009be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 8009be6:	9907      	ldr	r1, [sp, #28]
 8009be8:	f7fa f986 	bl	8003ef8 <FindRoute>
 8009bec:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 8009bee:	9906      	ldr	r1, [sp, #24]
 8009bf0:	9807      	ldr	r0, [sp, #28]
 8009bf2:	f7fa f981 	bl	8003ef8 <FindRoute>
			if(route[i] == dstM){
 8009bf6:	4b36      	ldr	r3, [pc, #216]	; (8009cd0 <StartScastDMAStream+0x168>)
 8009bf8:	5d98      	ldrb	r0, [r3, r6]
 8009bfa:	9b06      	ldr	r3, [sp, #24]
 8009bfc:	4298      	cmp	r0, r3
 8009bfe:	d139      	bne.n	8009c74 <StartScastDMAStream+0x10c>
				temp2 =dstP;
 8009c00:	9808      	ldr	r0, [sp, #32]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c02:	0e3a      	lsrs	r2, r7, #24
 8009c04:	4b31      	ldr	r3, [pc, #196]	; (8009ccc <StartScastDMAStream+0x164>)
 8009c06:	701a      	strb	r2, [r3, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009c08:	0c3a      	lsrs	r2, r7, #16
 8009c0a:	705a      	strb	r2, [r3, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009c0c:	0a3a      	lsrs	r2, r7, #8
 8009c0e:	709a      	strb	r2, [r3, #2]
			messageParams[3] =(uint8_t )count;
 8009c10:	70df      	strb	r7, [r3, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009c12:	0e2a      	lsrs	r2, r5, #24
 8009c14:	711a      	strb	r2, [r3, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009c16:	0c2a      	lsrs	r2, r5, #16
 8009c18:	715a      	strb	r2, [r3, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009c1a:	0a2a      	lsrs	r2, r5, #8
 8009c1c:	719a      	strb	r2, [r3, #6]
			messageParams[7] =(uint8_t )timeout;
 8009c1e:	71dd      	strb	r5, [r3, #7]
			messageParams[8] =direction; /* Stream direction */
 8009c20:	4652      	mov	r2, sl
 8009c22:	721a      	strb	r2, [r3, #8]
			messageParams[9] =temp1; /* Source port */
 8009c24:	464a      	mov	r2, r9
 8009c26:	725a      	strb	r2, [r3, #9]
			messageParams[10] =temp2; /* destination port */
 8009c28:	7298      	strb	r0, [r3, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8009c2a:	465a      	mov	r2, fp
 8009c2c:	72da      	strb	r2, [r3, #11]
			FindRoute(srcM,dstM);
 8009c2e:	9906      	ldr	r1, [sp, #24]
 8009c30:	9807      	ldr	r0, [sp, #28]
 8009c32:	f7fa f961 	bl	8003ef8 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009c36:	4b26      	ldr	r3, [pc, #152]	; (8009cd0 <StartScastDMAStream+0x168>)
 8009c38:	5d98      	ldrb	r0, [r3, r6]
 8009c3a:	220c      	movs	r2, #12
 8009c3c:	211b      	movs	r1, #27
 8009c3e:	f7ff ff6d 	bl	8009b1c <SendMessageToModule>
			osDelay(10);
 8009c42:	200a      	movs	r0, #10
 8009c44:	f005 fee4 	bl	800fa10 <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 8009c48:	3401      	adds	r4, #1
 8009c4a:	b2e4      	uxtb	r4, r4
 8009c4c:	2c19      	cmp	r4, #25
 8009c4e:	d817      	bhi.n	8009c80 <StartScastDMAStream+0x118>
		FindRoute(srcM,dstM);
 8009c50:	9906      	ldr	r1, [sp, #24]
 8009c52:	9807      	ldr	r0, [sp, #28]
 8009c54:	f7fa f950 	bl	8003ef8 <FindRoute>
		if(route[i]){
 8009c58:	0026      	movs	r6, r4
 8009c5a:	4b1d      	ldr	r3, [pc, #116]	; (8009cd0 <StartScastDMAStream+0x168>)
 8009c5c:	5d18      	ldrb	r0, [r3, r4]
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d0f2      	beq.n	8009c48 <StartScastDMAStream+0xe0>
			if(route[i + 1]){
 8009c62:	1c63      	adds	r3, r4, #1
 8009c64:	4a1a      	ldr	r2, [pc, #104]	; (8009cd0 <StartScastDMAStream+0x168>)
 8009c66:	5cd1      	ldrb	r1, [r2, r3]
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	d0bc      	beq.n	8009be6 <StartScastDMAStream+0x7e>
				temp1 =FindRoute(route[i],route[i + 1]);
 8009c6c:	f7fa f944 	bl	8003ef8 <FindRoute>
 8009c70:	4681      	mov	r9, r0
 8009c72:	e7bc      	b.n	8009bee <StartScastDMAStream+0x86>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009c74:	1e73      	subs	r3, r6, #1
 8009c76:	4a16      	ldr	r2, [pc, #88]	; (8009cd0 <StartScastDMAStream+0x168>)
 8009c78:	5cd1      	ldrb	r1, [r2, r3]
 8009c7a:	f7fa f93d 	bl	8003ef8 <FindRoute>
 8009c7e:	e7c0      	b.n	8009c02 <StartScastDMAStream+0x9a>
 8009c80:	003e      	movs	r6, r7
 8009c82:	002f      	movs	r7, r5
	if(srcM == dstM)
 8009c84:	9807      	ldr	r0, [sp, #28]
 8009c86:	9906      	ldr	r1, [sp, #24]
 8009c88:	4288      	cmp	r0, r1
 8009c8a:	d118      	bne.n	8009cbe <StartScastDMAStream+0x156>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009c8c:	9b08      	ldr	r3, [sp, #32]
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c92:	003a      	movs	r2, r7
 8009c94:	0031      	movs	r1, r6
 8009c96:	4650      	mov	r0, sl
 8009c98:	f7ff fc1c 	bl	80094d4 <SetupDMAStreams>
	if(stored){
 8009c9c:	465b      	mov	r3, fp
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d09a      	beq.n	8009bd8 <StartScastDMAStream+0x70>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	9304      	str	r3, [sp, #16]
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	9302      	str	r3, [sp, #8]
 8009caa:	9301      	str	r3, [sp, #4]
 8009cac:	9b08      	ldr	r3, [sp, #32]
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb2:	003a      	movs	r2, r7
 8009cb4:	0031      	movs	r1, r6
 8009cb6:	4650      	mov	r0, sl
 8009cb8:	f7f9 febe 	bl	8003a38 <SaveEEstreams>
 8009cbc:	e78c      	b.n	8009bd8 <StartScastDMAStream+0x70>
		port =FindRoute(srcM,dstM);
 8009cbe:	f7fa f91b 	bl	8003ef8 <FindRoute>
 8009cc2:	9008      	str	r0, [sp, #32]
 8009cc4:	e7e2      	b.n	8009c8c <StartScastDMAStream+0x124>
 8009cc6:	46c0      	nop			; (mov r8, r8)
 8009cc8:	20001066 	.word	0x20001066
 8009ccc:	20000f28 	.word	0x20000f28
 8009cd0:	20006ea4 	.word	0x20006ea4

08009cd4 <BackEndTask>:
}

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void *argument){
 8009cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cd6:	46de      	mov	lr, fp
 8009cd8:	4657      	mov	r7, sl
 8009cda:	464e      	mov	r6, r9
 8009cdc:	4645      	mov	r5, r8
 8009cde:	b5e0      	push	{r5, r6, r7, lr}
 8009ce0:	b085      	sub	sp, #20
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
	uint8_t port;
	bool emptyBuffer = false;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	9301      	str	r3, [sp, #4]
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8009ce6:	469b      	mov	fp, r3
 8009ce8:	e19a      	b.n	800a020 <BackEndTask+0x34c>
			/* A. Check for BOS messages */
			if(portStatus[port] == MSG || portStatus[port] == FREE){
				/* A.1. Look for HZ delimiter and determine packet start */
				/* Note this parses only a single packet on each pass TODO update to parse all */

				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009cea:	1e65      	subs	r5, r4, #1
 8009cec:	4bcd      	ldr	r3, [pc, #820]	; (800a024 <BackEndTask+0x350>)
 8009cee:	5d5f      	ldrb	r7, [r3, r5]
 8009cf0:	e004      	b.n	8009cfc <BackEndTask+0x28>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
						packetStart =i;
						break;
					}
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009cf2:	2f3f      	cmp	r7, #63	; 0x3f
 8009cf4:	d02b      	beq.n	8009d4e <BackEndTask+0x7a>
						packetStart = MSG_RX_BUF_SIZE - 1;
						break;
					}
					else{
						/* B. Did not find any messaging packets. Check for CLI enter key (0xD) */
						if(i == MSG_RX_BUF_SIZE - 1){
 8009cf6:	2f3f      	cmp	r7, #63	; 0x3f
 8009cf8:	d037      	beq.n	8009d6a <BackEndTask+0x96>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009cfa:	3701      	adds	r7, #1
 8009cfc:	2f3f      	cmp	r7, #63	; 0x3f
 8009cfe:	dc0f      	bgt.n	8009d20 <BackEndTask+0x4c>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009d00:	2f3e      	cmp	r7, #62	; 0x3e
 8009d02:	dcf6      	bgt.n	8009cf2 <BackEndTask+0x1e>
 8009d04:	01aa      	lsls	r2, r5, #6
 8009d06:	4bc8      	ldr	r3, [pc, #800]	; (800a028 <BackEndTask+0x354>)
 8009d08:	189b      	adds	r3, r3, r2
 8009d0a:	5ddb      	ldrb	r3, [r3, r7]
 8009d0c:	2b48      	cmp	r3, #72	; 0x48
 8009d0e:	d1f0      	bne.n	8009cf2 <BackEndTask+0x1e>
 8009d10:	1c7b      	adds	r3, r7, #1
 8009d12:	0011      	movs	r1, r2
 8009d14:	4ac4      	ldr	r2, [pc, #784]	; (800a028 <BackEndTask+0x354>)
 8009d16:	1852      	adds	r2, r2, r1
 8009d18:	5cd3      	ldrb	r3, [r2, r3]
 8009d1a:	2b5a      	cmp	r3, #90	; 0x5a
 8009d1c:	d1e9      	bne.n	8009cf2 <BackEndTask+0x1e>
						packetStart =i;
 8009d1e:	46bb      	mov	fp, r7
						}
					}
				}
				
				/* Check parse status */
				if(emptyBuffer){
 8009d20:	9b01      	ldr	r3, [sp, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d000      	beq.n	8009d28 <BackEndTask+0x54>
 8009d26:	e176      	b.n	800a016 <BackEndTask+0x342>
					emptyBuffer = false;
					continue;
				}
				
				/* A.2. Parse the length byte */
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009d28:	465b      	mov	r3, fp
 8009d2a:	2b3d      	cmp	r3, #61	; 0x3d
 8009d2c:	d05d      	beq.n	8009dea <BackEndTask+0x116>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
					parseStart =0;
				}
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8009d30:	d100      	bne.n	8009d34 <BackEndTask+0x60>
 8009d32:	e084      	b.n	8009e3e <BackEndTask+0x16a>
					packetLength =UARTRxBuf[port - 1][0];
					parseStart =1;
				}
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009d34:	2b3f      	cmp	r3, #63	; 0x3f
 8009d36:	d100      	bne.n	8009d3a <BackEndTask+0x66>
 8009d38:	e088      	b.n	8009e4c <BackEndTask+0x178>
					packetLength =UARTRxBuf[port - 1][1];
					parseStart =2;
				}
				else{
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009d3a:	3302      	adds	r3, #2
 8009d3c:	01a9      	lsls	r1, r5, #6
 8009d3e:	4aba      	ldr	r2, [pc, #744]	; (800a028 <BackEndTask+0x354>)
 8009d40:	1852      	adds	r2, r2, r1
 8009d42:	5cd3      	ldrb	r3, [r2, r3]
 8009d44:	4699      	mov	r9, r3
					parseStart =packetStart + 3;
 8009d46:	2303      	movs	r3, #3
 8009d48:	445b      	add	r3, fp
 8009d4a:	469a      	mov	sl, r3
 8009d4c:	e055      	b.n	8009dfa <BackEndTask+0x126>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009d4e:	01aa      	lsls	r2, r5, #6
 8009d50:	4bb5      	ldr	r3, [pc, #724]	; (800a028 <BackEndTask+0x354>)
 8009d52:	189b      	adds	r3, r3, r2
 8009d54:	333f      	adds	r3, #63	; 0x3f
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	2b48      	cmp	r3, #72	; 0x48
 8009d5a:	d1cc      	bne.n	8009cf6 <BackEndTask+0x22>
 8009d5c:	0013      	movs	r3, r2
 8009d5e:	4ab2      	ldr	r2, [pc, #712]	; (800a028 <BackEndTask+0x354>)
 8009d60:	5c9b      	ldrb	r3, [r3, r2]
 8009d62:	2b5a      	cmp	r3, #90	; 0x5a
 8009d64:	d1c7      	bne.n	8009cf6 <BackEndTask+0x22>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009d66:	46bb      	mov	fp, r7
 8009d68:	e7da      	b.n	8009d20 <BackEndTask+0x4c>
							if(BOS.disableCLI == false){
 8009d6a:	4bb0      	ldr	r3, [pc, #704]	; (800a02c <BackEndTask+0x358>)
 8009d6c:	7edb      	ldrb	r3, [r3, #27]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <BackEndTask+0xa4>
							emptyBuffer = true;
 8009d72:	2301      	movs	r3, #1
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	e7c0      	b.n	8009cfa <BackEndTask+0x26>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009d78:	4baa      	ldr	r3, [pc, #680]	; (800a024 <BackEndTask+0x350>)
 8009d7a:	5d5b      	ldrb	r3, [r3, r5]
 8009d7c:	e002      	b.n	8009d84 <BackEndTask+0xb0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009d7e:	2b3f      	cmp	r3, #63	; 0x3f
 8009d80:	d02a      	beq.n	8009dd8 <BackEndTask+0x104>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009d82:	3301      	adds	r3, #1
 8009d84:	2b3f      	cmp	r3, #63	; 0x3f
 8009d86:	dc2d      	bgt.n	8009de4 <BackEndTask+0x110>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009d88:	01a9      	lsls	r1, r5, #6
 8009d8a:	4aa7      	ldr	r2, [pc, #668]	; (800a028 <BackEndTask+0x354>)
 8009d8c:	1852      	adds	r2, r2, r1
 8009d8e:	5cd2      	ldrb	r2, [r2, r3]
 8009d90:	2a0d      	cmp	r2, #13
 8009d92:	d1f6      	bne.n	8009d82 <BackEndTask+0xae>
 8009d94:	2b3e      	cmp	r3, #62	; 0x3e
 8009d96:	dcf2      	bgt.n	8009d7e <BackEndTask+0xaa>
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	0008      	movs	r0, r1
 8009d9c:	49a2      	ldr	r1, [pc, #648]	; (800a028 <BackEndTask+0x354>)
 8009d9e:	1809      	adds	r1, r1, r0
 8009da0:	5c8a      	ldrb	r2, [r1, r2]
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	d1eb      	bne.n	8009d7e <BackEndTask+0xaa>
										UARTRxBuf[port - 1][j] =0;
 8009da6:	01a9      	lsls	r1, r5, #6
 8009da8:	4a9f      	ldr	r2, [pc, #636]	; (800a028 <BackEndTask+0x354>)
 8009daa:	1852      	adds	r2, r2, r1
 8009dac:	2100      	movs	r1, #0
 8009dae:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009db0:	3301      	adds	r3, #1
 8009db2:	4a9c      	ldr	r2, [pc, #624]	; (800a024 <BackEndTask+0x350>)
 8009db4:	5553      	strb	r3, [r2, r5]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009db6:	4b9e      	ldr	r3, [pc, #632]	; (800a030 <BackEndTask+0x35c>)
 8009db8:	7818      	ldrb	r0, [r3, #0]
 8009dba:	4a9e      	ldr	r2, [pc, #632]	; (800a034 <BackEndTask+0x360>)
 8009dbc:	5411      	strb	r1, [r2, r0]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009dbe:	3103      	adds	r1, #3
 8009dc0:	5591      	strb	r1, [r2, r6]
										PcPort =port;
 8009dc2:	701c      	strb	r4, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009dc4:	4b9c      	ldr	r3, [pc, #624]	; (800a038 <BackEndTask+0x364>)
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	2300      	movs	r3, #0
 8009dca:	2202      	movs	r2, #2
 8009dcc:	2100      	movs	r1, #0
 8009dce:	f007 fa61 	bl	8011294 <xTaskGenericNotify>
							emptyBuffer = true;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	9301      	str	r3, [sp, #4]
										break;
 8009dd6:	e790      	b.n	8009cfa <BackEndTask+0x26>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009dd8:	01aa      	lsls	r2, r5, #6
 8009dda:	4993      	ldr	r1, [pc, #588]	; (800a028 <BackEndTask+0x354>)
 8009ddc:	5c52      	ldrb	r2, [r2, r1]
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	d1cf      	bne.n	8009d82 <BackEndTask+0xae>
 8009de2:	e7e0      	b.n	8009da6 <BackEndTask+0xd2>
							emptyBuffer = true;
 8009de4:	2301      	movs	r3, #1
 8009de6:	9301      	str	r3, [sp, #4]
 8009de8:	e787      	b.n	8009cfa <BackEndTask+0x26>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009dea:	01aa      	lsls	r2, r5, #6
 8009dec:	4b8e      	ldr	r3, [pc, #568]	; (800a028 <BackEndTask+0x354>)
 8009dee:	189b      	adds	r3, r3, r2
 8009df0:	333f      	adds	r3, #63	; 0x3f
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	4699      	mov	r9, r3
					parseStart =0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	469a      	mov	sl, r3
				}
				
				/* A.3. Set packet end from packet start and length */
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009dfa:	464b      	mov	r3, r9
 8009dfc:	1cdf      	adds	r7, r3, #3
 8009dfe:	46b8      	mov	r8, r7
 8009e00:	44d8      	add	r8, fp
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009e02:	4643      	mov	r3, r8
 8009e04:	2b3f      	cmp	r3, #63	; 0x3f
 8009e06:	dd03      	ble.n	8009e10 <BackEndTask+0x13c>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009e08:	2340      	movs	r3, #64	; 0x40
 8009e0a:	425b      	negs	r3, r3
 8009e0c:	469c      	mov	ip, r3
 8009e0e:	44e0      	add	r8, ip
				
				if(packetStart != packetEnd) // Non-empty packet
 8009e10:	45c3      	cmp	fp, r8
 8009e12:	d123      	bne.n	8009e5c <BackEndTask+0x188>
				}
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
 8009e14:	45c3      	cmp	fp, r8
 8009e16:	db00      	blt.n	8009e1a <BackEndTask+0x146>
 8009e18:	e0c3      	b.n	8009fa2 <BackEndTask+0x2ce>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009e1a:	01a8      	lsls	r0, r5, #6
 8009e1c:	4458      	add	r0, fp
 8009e1e:	4b82      	ldr	r3, [pc, #520]	; (800a028 <BackEndTask+0x354>)
 8009e20:	18c0      	adds	r0, r0, r3
 8009e22:	464a      	mov	r2, r9
 8009e24:	3204      	adds	r2, #4
 8009e26:	2100      	movs	r1, #0
 8009e28:	f00b fa2e 	bl	8015288 <memset>
					MSG_RX_BUF_SIZE - packetStart);
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
				}
				
				/* A.6.2 Advance buffer index */
				UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009e2c:	4643      	mov	r3, r8
 8009e2e:	3301      	adds	r3, #1
 8009e30:	4a7c      	ldr	r2, [pc, #496]	; (800a024 <BackEndTask+0x350>)
 8009e32:	5553      	strb	r3, [r2, r5]
				++rejectedMsg;
 8009e34:	4a81      	ldr	r2, [pc, #516]	; (800a03c <BackEndTask+0x368>)
 8009e36:	8813      	ldrh	r3, [r2, #0]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	8013      	strh	r3, [r2, #0]
 8009e3c:	e0dc      	b.n	8009ff8 <BackEndTask+0x324>
					packetLength =UARTRxBuf[port - 1][0];
 8009e3e:	01ab      	lsls	r3, r5, #6
 8009e40:	4a79      	ldr	r2, [pc, #484]	; (800a028 <BackEndTask+0x354>)
 8009e42:	5c9b      	ldrb	r3, [r3, r2]
 8009e44:	4699      	mov	r9, r3
					parseStart =1;
 8009e46:	2301      	movs	r3, #1
 8009e48:	469a      	mov	sl, r3
 8009e4a:	e7d6      	b.n	8009dfa <BackEndTask+0x126>
					packetLength =UARTRxBuf[port - 1][1];
 8009e4c:	01aa      	lsls	r2, r5, #6
 8009e4e:	4b76      	ldr	r3, [pc, #472]	; (800a028 <BackEndTask+0x354>)
 8009e50:	189b      	adds	r3, r3, r2
 8009e52:	785b      	ldrb	r3, [r3, #1]
 8009e54:	4699      	mov	r9, r3
					parseStart =2;
 8009e56:	2302      	movs	r3, #2
 8009e58:	469a      	mov	sl, r3
 8009e5a:	e7ce      	b.n	8009dfa <BackEndTask+0x126>
					Delay_ms(1);
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	f007 fe53 	bl	8011b08 <HAL_Delay>
					if(packetStart < packetEnd){
 8009e62:	45c3      	cmp	fp, r8
 8009e64:	da49      	bge.n	8009efa <BackEndTask+0x226>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009e66:	01a9      	lsls	r1, r5, #6
 8009e68:	4459      	add	r1, fp
 8009e6a:	4b6f      	ldr	r3, [pc, #444]	; (800a028 <BackEndTask+0x354>)
 8009e6c:	18c9      	adds	r1, r1, r3
 8009e6e:	003a      	movs	r2, r7
 8009e70:	4873      	ldr	r0, [pc, #460]	; (800a040 <BackEndTask+0x36c>)
 8009e72:	f00b fa00 	bl	8015276 <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009e76:	464b      	mov	r3, r9
 8009e78:	1cd9      	adds	r1, r3, #3
 8009e7a:	4f71      	ldr	r7, [pc, #452]	; (800a040 <BackEndTask+0x36c>)
 8009e7c:	0038      	movs	r0, r7
 8009e7e:	f004 fec5 	bl	800ec0c <CalculateCRC8>
 8009e82:	9002      	str	r0, [sp, #8]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009e84:	2238      	movs	r2, #56	; 0x38
 8009e86:	2100      	movs	r1, #0
 8009e88:	0038      	movs	r0, r7
 8009e8a:	f00b f9fd 	bl	8015288 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009e8e:	01aa      	lsls	r2, r5, #6
 8009e90:	4b65      	ldr	r3, [pc, #404]	; (800a028 <BackEndTask+0x354>)
 8009e92:	189b      	adds	r3, r3, r2
 8009e94:	4642      	mov	r2, r8
 8009e96:	5c9b      	ldrb	r3, [r3, r2]
 8009e98:	9a02      	ldr	r2, [sp, #8]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d1ba      	bne.n	8009e14 <BackEndTask+0x140>
						portStatus[port] =MSG;
 8009e9e:	4b65      	ldr	r3, [pc, #404]	; (800a034 <BackEndTask+0x360>)
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	559a      	strb	r2, [r3, r6]
						messageLength[port - 1] =packetLength;
 8009ea4:	4b67      	ldr	r3, [pc, #412]	; (800a044 <BackEndTask+0x370>)
 8009ea6:	464a      	mov	r2, r9
 8009ea8:	555a      	strb	r2, [r3, r5]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009eaa:	233f      	movs	r3, #63	; 0x3f
 8009eac:	4652      	mov	r2, sl
 8009eae:	1a9b      	subs	r3, r3, r2
 8009eb0:	454b      	cmp	r3, r9
 8009eb2:	db3f      	blt.n	8009f34 <BackEndTask+0x260>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009eb4:	00eb      	lsls	r3, r5, #3
 8009eb6:	1b5b      	subs	r3, r3, r5
 8009eb8:	00d8      	lsls	r0, r3, #3
 8009eba:	4b63      	ldr	r3, [pc, #396]	; (800a048 <BackEndTask+0x374>)
 8009ebc:	18c0      	adds	r0, r0, r3
 8009ebe:	01a9      	lsls	r1, r5, #6
 8009ec0:	4451      	add	r1, sl
 8009ec2:	4b59      	ldr	r3, [pc, #356]	; (800a028 <BackEndTask+0x354>)
 8009ec4:	18c9      	adds	r1, r1, r3
 8009ec6:	464a      	mov	r2, r9
 8009ec8:	f00b f9d5 	bl	8015276 <memcpy>
						if(packetStart < packetEnd){
 8009ecc:	45c3      	cmp	fp, r8
 8009ece:	da52      	bge.n	8009f76 <BackEndTask+0x2a2>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009ed0:	01a8      	lsls	r0, r5, #6
 8009ed2:	4458      	add	r0, fp
 8009ed4:	4b54      	ldr	r3, [pc, #336]	; (800a028 <BackEndTask+0x354>)
 8009ed6:	18c0      	adds	r0, r0, r3
 8009ed8:	464a      	mov	r2, r9
 8009eda:	3204      	adds	r2, #4
 8009edc:	2100      	movs	r1, #0
 8009ede:	f00b f9d3 	bl	8015288 <memset>
						UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	3201      	adds	r2, #1
 8009ee6:	4b4f      	ldr	r3, [pc, #316]	; (800a024 <BackEndTask+0x350>)
 8009ee8:	555a      	strb	r2, [r3, r5]
						++acceptedMsg;
 8009eea:	4a58      	ldr	r2, [pc, #352]	; (800a04c <BackEndTask+0x378>)
 8009eec:	8813      	ldrh	r3, [r2, #0]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);
 8009ef2:	0020      	movs	r0, r4
 8009ef4:	f7ff fbc6 	bl	8009684 <NotifyMessagingTask>
						continue; // Inspect the next port circular buffer
 8009ef8:	e074      	b.n	8009fe4 <BackEndTask+0x310>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009efa:	01ab      	lsls	r3, r5, #6
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	0019      	movs	r1, r3
 8009f00:	4459      	add	r1, fp
 8009f02:	4849      	ldr	r0, [pc, #292]	; (800a028 <BackEndTask+0x354>)
 8009f04:	4684      	mov	ip, r0
 8009f06:	4461      	add	r1, ip
						MSG_RX_BUF_SIZE - packetStart);
 8009f08:	2240      	movs	r2, #64	; 0x40
 8009f0a:	4658      	mov	r0, fp
 8009f0c:	1a10      	subs	r0, r2, r0
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009f0e:	9002      	str	r0, [sp, #8]
 8009f10:	0002      	movs	r2, r0
 8009f12:	484b      	ldr	r0, [pc, #300]	; (800a040 <BackEndTask+0x36c>)
 8009f14:	f00b f9af 	bl	8015276 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009f18:	4949      	ldr	r1, [pc, #292]	; (800a040 <BackEndTask+0x36c>)
 8009f1a:	0008      	movs	r0, r1
 8009f1c:	9b02      	ldr	r3, [sp, #8]
 8009f1e:	469c      	mov	ip, r3
 8009f20:	4460      	add	r0, ip
 8009f22:	9a03      	ldr	r2, [sp, #12]
 8009f24:	4940      	ldr	r1, [pc, #256]	; (800a028 <BackEndTask+0x354>)
 8009f26:	468c      	mov	ip, r1
 8009f28:	4462      	add	r2, ip
 8009f2a:	0011      	movs	r1, r2
 8009f2c:	1afa      	subs	r2, r7, r3
 8009f2e:	f00b f9a2 	bl	8015276 <memcpy>
 8009f32:	e7a0      	b.n	8009e76 <BackEndTask+0x1a2>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009f34:	00ee      	lsls	r6, r5, #3
 8009f36:	1b73      	subs	r3, r6, r5
 8009f38:	00d8      	lsls	r0, r3, #3
 8009f3a:	4f43      	ldr	r7, [pc, #268]	; (800a048 <BackEndTask+0x374>)
 8009f3c:	19c0      	adds	r0, r0, r7
 8009f3e:	01ab      	lsls	r3, r5, #6
 8009f40:	9302      	str	r3, [sp, #8]
 8009f42:	0019      	movs	r1, r3
 8009f44:	4451      	add	r1, sl
 8009f46:	4a38      	ldr	r2, [pc, #224]	; (800a028 <BackEndTask+0x354>)
 8009f48:	4694      	mov	ip, r2
 8009f4a:	4461      	add	r1, ip
							MSG_RX_BUF_SIZE - parseStart);
 8009f4c:	2240      	movs	r2, #64	; 0x40
 8009f4e:	4653      	mov	r3, sl
 8009f50:	1ad2      	subs	r2, r2, r3
 8009f52:	4692      	mov	sl, r2
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009f54:	f00b f98f 	bl	8015276 <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009f58:	1b76      	subs	r6, r6, r5
 8009f5a:	00f3      	lsls	r3, r6, #3
 8009f5c:	4453      	add	r3, sl
 8009f5e:	19d8      	adds	r0, r3, r7
 8009f60:	9b02      	ldr	r3, [sp, #8]
 8009f62:	4a31      	ldr	r2, [pc, #196]	; (800a028 <BackEndTask+0x354>)
 8009f64:	4694      	mov	ip, r2
 8009f66:	4463      	add	r3, ip
 8009f68:	0019      	movs	r1, r3
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	4652      	mov	r2, sl
 8009f6e:	1a9a      	subs	r2, r3, r2
 8009f70:	f00b f981 	bl	8015276 <memcpy>
 8009f74:	e7aa      	b.n	8009ecc <BackEndTask+0x1f8>
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009f76:	01ae      	lsls	r6, r5, #6
 8009f78:	465b      	mov	r3, fp
 8009f7a:	18f0      	adds	r0, r6, r3
 8009f7c:	4b2a      	ldr	r3, [pc, #168]	; (800a028 <BackEndTask+0x354>)
 8009f7e:	469a      	mov	sl, r3
 8009f80:	4450      	add	r0, sl
							MSG_RX_BUF_SIZE - packetStart);
 8009f82:	2740      	movs	r7, #64	; 0x40
 8009f84:	465b      	mov	r3, fp
 8009f86:	1aff      	subs	r7, r7, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009f88:	003a      	movs	r2, r7
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	f00b f97c 	bl	8015288 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009f90:	0030      	movs	r0, r6
 8009f92:	4450      	add	r0, sl
 8009f94:	464a      	mov	r2, r9
 8009f96:	3204      	adds	r2, #4
 8009f98:	1bd2      	subs	r2, r2, r7
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	f00b f974 	bl	8015288 <memset>
 8009fa0:	e79f      	b.n	8009ee2 <BackEndTask+0x20e>
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009fa2:	01af      	lsls	r7, r5, #6
 8009fa4:	465b      	mov	r3, fp
 8009fa6:	18f8      	adds	r0, r7, r3
 8009fa8:	4b1f      	ldr	r3, [pc, #124]	; (800a028 <BackEndTask+0x354>)
 8009faa:	469a      	mov	sl, r3
 8009fac:	4450      	add	r0, sl
					MSG_RX_BUF_SIZE - packetStart);
 8009fae:	2240      	movs	r2, #64	; 0x40
 8009fb0:	465b      	mov	r3, fp
 8009fb2:	1ad3      	subs	r3, r2, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009fb4:	9302      	str	r3, [sp, #8]
 8009fb6:	001a      	movs	r2, r3
 8009fb8:	2100      	movs	r1, #0
 8009fba:	f00b f965 	bl	8015288 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009fbe:	0038      	movs	r0, r7
 8009fc0:	4450      	add	r0, sl
 8009fc2:	464a      	mov	r2, r9
 8009fc4:	3204      	adds	r2, #4
 8009fc6:	9b02      	ldr	r3, [sp, #8]
 8009fc8:	1ad2      	subs	r2, r2, r3
 8009fca:	2100      	movs	r1, #0
 8009fcc:	f00b f95c 	bl	8015288 <memset>
 8009fd0:	e72c      	b.n	8009e2c <BackEndTask+0x158>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009fd2:	0020      	movs	r0, r4
 8009fd4:	f005 fbca 	bl	800f76c <GetUart>
 8009fd8:	01ad      	lsls	r5, r5, #6
 8009fda:	4913      	ldr	r1, [pc, #76]	; (800a028 <BackEndTask+0x354>)
 8009fdc:	1869      	adds	r1, r5, r1
 8009fde:	2240      	movs	r2, #64	; 0x40
 8009fe0:	f00a fa16 	bl	8014410 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009fe4:	3401      	adds	r4, #1
 8009fe6:	b2e4      	uxtb	r4, r4
 8009fe8:	2c05      	cmp	r4, #5
 8009fea:	d817      	bhi.n	800a01c <BackEndTask+0x348>
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009fec:	0026      	movs	r6, r4
 8009fee:	4b11      	ldr	r3, [pc, #68]	; (800a034 <BackEndTask+0x360>)
 8009ff0:	5d1b      	ldrb	r3, [r3, r4]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d800      	bhi.n	8009ff8 <BackEndTask+0x324>
 8009ff6:	e678      	b.n	8009cea <BackEndTask+0x16>
			if(MsgDMAStopped[port - 1] == true){
 8009ff8:	1e75      	subs	r5, r6, #1
 8009ffa:	4b15      	ldr	r3, [pc, #84]	; (800a050 <BackEndTask+0x37c>)
 8009ffc:	5d5b      	ldrb	r3, [r3, r5]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0f0      	beq.n	8009fe4 <BackEndTask+0x310>
				MsgDMAStopped[port - 1] = false;
 800a002:	4b13      	ldr	r3, [pc, #76]	; (800a050 <BackEndTask+0x37c>)
 800a004:	2200      	movs	r2, #0
 800a006:	555a      	strb	r2, [r3, r5]
				if(portStatus[port] == OVERRUN)
 800a008:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <BackEndTask+0x360>)
 800a00a:	5d9b      	ldrb	r3, [r3, r6]
 800a00c:	2b05      	cmp	r3, #5
 800a00e:	d1e0      	bne.n	8009fd2 <BackEndTask+0x2fe>
					portStatus[port] =FREE;
 800a010:	4b08      	ldr	r3, [pc, #32]	; (800a034 <BackEndTask+0x360>)
 800a012:	559a      	strb	r2, [r3, r6]
 800a014:	e7dd      	b.n	8009fd2 <BackEndTask+0x2fe>
					emptyBuffer = false;
 800a016:	2300      	movs	r3, #0
 800a018:	9301      	str	r3, [sp, #4]
 800a01a:	e7e3      	b.n	8009fe4 <BackEndTask+0x310>
			}
		}

		taskYIELD();
 800a01c:	f007 fbe2 	bl	80117e4 <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 800a020:	2401      	movs	r4, #1
 800a022:	e7e1      	b.n	8009fe8 <BackEndTask+0x314>
 800a024:	200013f8 	.word	0x200013f8
 800a028:	200012b8 	.word	0x200012b8
 800a02c:	20006da0 	.word	0x20006da0
 800a030:	20000a9f 	.word	0x20000a9f
 800a034:	200010e0 	.word	0x200010e0
 800a038:	2000149c 	.word	0x2000149c
 800a03c:	2000171c 	.word	0x2000171c
 800a040:	20001400 	.word	0x20001400
 800a044:	20000f20 	.word	0x20000f20
 800a048:	20000d30 	.word	0x20000d30
 800a04c:	20001574 	.word	0x20001574
 800a050:	200012b0 	.word	0x200012b0

0800a054 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800a054:	2001      	movs	r0, #1
 800a056:	4770      	bx	lr

0800a058 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800a058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a05a:	46de      	mov	lr, fp
 800a05c:	4657      	mov	r7, sl
 800a05e:	464e      	mov	r6, r9
 800a060:	4645      	mov	r5, r8
 800a062:	b5e0      	push	{r5, r6, r7, lr}
 800a064:	b095      	sub	sp, #84	; 0x54
 800a066:	9006      	str	r0, [sp, #24]
	port =(int8_t )(unsigned )argument;
 800a068:	b2c3      	uxtb	r3, r0
 800a06a:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
 800a070:	469b      	mov	fp, r3
 800a072:	46c1      	mov	r9, r8
 800a074:	e05c      	b.n	800a130 <PxMessagingTask+0xd8>
				longMessage =1;
 800a076:	4ad0      	ldr	r2, [pc, #832]	; (800a3b8 <PxMessagingTask+0x360>)
 800a078:	2101      	movs	r1, #1
 800a07a:	7011      	strb	r1, [r2, #0]
 800a07c:	e072      	b.n	800a164 <PxMessagingTask+0x10c>
				++shift;
 800a07e:	2401      	movs	r4, #1
 800a080:	e07b      	b.n	800a17a <PxMessagingTask+0x122>
				code =cMessage[port - 1][3 + shift];
 800a082:	1ce2      	adds	r2, r4, #3
 800a084:	00eb      	lsls	r3, r5, #3
 800a086:	1b5b      	subs	r3, r3, r5
 800a088:	00d9      	lsls	r1, r3, #3
 800a08a:	4bcc      	ldr	r3, [pc, #816]	; (800a3bc <PxMessagingTask+0x364>)
 800a08c:	185b      	adds	r3, r3, r1
 800a08e:	5c9b      	ldrb	r3, [r3, r2]
 800a090:	469a      	mov	sl, r3
 800a092:	e08c      	b.n	800a1ae <PxMessagingTask+0x156>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a094:	2bfc      	cmp	r3, #252	; 0xfc
 800a096:	d805      	bhi.n	800a0a4 <PxMessagingTask+0x4c>
 800a098:	4bc9      	ldr	r3, [pc, #804]	; (800a3c0 <PxMessagingTask+0x368>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	42bb      	cmp	r3, r7
 800a09e:	d001      	beq.n	800a0a4 <PxMessagingTask+0x4c>
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d01e      	beq.n	800a0e2 <PxMessagingTask+0x8a>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a0a4:	2fff      	cmp	r7, #255	; 0xff
 800a0a6:	d100      	bne.n	800a0aa <PxMessagingTask+0x52>
 800a0a8:	e0b2      	b.n	800a210 <PxMessagingTask+0x1b8>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a0aa:	2fff      	cmp	r7, #255	; 0xff
 800a0ac:	d100      	bne.n	800a0b0 <PxMessagingTask+0x58>
 800a0ae:	e0ce      	b.n	800a24e <PxMessagingTask+0x1f6>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a0b0:	2ffe      	cmp	r7, #254	; 0xfe
 800a0b2:	d100      	bne.n	800a0b6 <PxMessagingTask+0x5e>
 800a0b4:	e0da      	b.n	800a26c <PxMessagingTask+0x214>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a0b6:	2ffe      	cmp	r7, #254	; 0xfe
 800a0b8:	d100      	bne.n	800a0bc <PxMessagingTask+0x64>
 800a0ba:	e111      	b.n	800a2e0 <PxMessagingTask+0x288>
				shift +=4;
 800a0bc:	3404      	adds	r4, #4
 800a0be:	b2e4      	uxtb	r4, r4
				numOfParams =messageLength[port - 1] - shift;
 800a0c0:	4bc0      	ldr	r3, [pc, #768]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a0c2:	5d5b      	ldrb	r3, [r3, r5]
 800a0c4:	1b1a      	subs	r2, r3, r4
 800a0c6:	b2d2      	uxtb	r2, r2
 800a0c8:	9205      	str	r2, [sp, #20]
				if(result == BOS_OK){
 800a0ca:	465a      	mov	r2, fp
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	d111      	bne.n	800a0f4 <PxMessagingTask+0x9c>
					switch(code){
 800a0d0:	4652      	mov	r2, sl
 800a0d2:	2a24      	cmp	r2, #36	; 0x24
 800a0d4:	d901      	bls.n	800a0da <PxMessagingTask+0x82>
 800a0d6:	f001 fc2c 	bl	800b932 <PxMessagingTask+0x18da>
 800a0da:	0092      	lsls	r2, r2, #2
 800a0dc:	49ba      	ldr	r1, [pc, #744]	; (800a3c8 <PxMessagingTask+0x370>)
 800a0de:	588a      	ldr	r2, [r1, r2]
 800a0e0:	4697      	mov	pc, r2
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a0e2:	4653      	mov	r3, sl
 800a0e4:	2b10      	cmp	r3, #16
 800a0e6:	d16f      	bne.n	800a1c8 <PxMessagingTask+0x170>
 800a0e8:	e7dc      	b.n	800a0a4 <PxMessagingTask+0x4c>
				if(code == CODE_UPDATE){ // Remote bootloader update
 800a0ea:	4653      	mov	r3, sl
 800a0ec:	2b19      	cmp	r3, #25
 800a0ee:	d076      	beq.n	800a1de <PxMessagingTask+0x186>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800a0f0:	2b1a      	cmp	r3, #26
 800a0f2:	d07e      	beq.n	800a1f2 <PxMessagingTask+0x19a>
		if(result == BOS_ERR_UnknownMessage){
 800a0f4:	465b      	mov	r3, fp
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d101      	bne.n	800a0fe <PxMessagingTask+0xa6>
 800a0fa:	f001 fc3d 	bl	800b978 <PxMessagingTask+0x1920>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a0fe:	00eb      	lsls	r3, r5, #3
 800a100:	1b5b      	subs	r3, r3, r5
 800a102:	00d8      	lsls	r0, r3, #3
 800a104:	4bad      	ldr	r3, [pc, #692]	; (800a3bc <PxMessagingTask+0x364>)
 800a106:	18c0      	adds	r0, r0, r3
 800a108:	4cae      	ldr	r4, [pc, #696]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a10a:	5d62      	ldrb	r2, [r4, r5]
 800a10c:	2100      	movs	r1, #0
 800a10e:	f00b f8bb 	bl	8015288 <memset>
		messageLength[port - 1] =0;
 800a112:	2300      	movs	r3, #0
 800a114:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a116:	4bad      	ldr	r3, [pc, #692]	; (800a3cc <PxMessagingTask+0x374>)
 800a118:	4642      	mov	r2, r8
 800a11a:	5c9b      	ldrb	r3, [r3, r2]
 800a11c:	3b02      	subs	r3, #2
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b02      	cmp	r3, #2
 800a122:	d903      	bls.n	800a12c <PxMessagingTask+0xd4>
			portStatus[port] =FREE;
 800a124:	4ba9      	ldr	r3, [pc, #676]	; (800a3cc <PxMessagingTask+0x374>)
 800a126:	2200      	movs	r2, #0
 800a128:	4641      	mov	r1, r8
 800a12a:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a12c:	f007 fb5a 	bl	80117e4 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a130:	2101      	movs	r1, #1
 800a132:	4249      	negs	r1, r1
 800a134:	2001      	movs	r0, #1
 800a136:	f007 f861 	bl	80111fc <ulTaskNotifyTake>
 800a13a:	23ff      	movs	r3, #255	; 0xff
 800a13c:	9a06      	ldr	r2, [sp, #24]
 800a13e:	401a      	ands	r2, r3
 800a140:	4690      	mov	r8, r2
		if(messageLength[port - 1]){
 800a142:	1e55      	subs	r5, r2, #1
 800a144:	4b9f      	ldr	r3, [pc, #636]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a146:	5d58      	ldrb	r0, [r3, r5]
 800a148:	2800      	cmp	r0, #0
 800a14a:	d0d3      	beq.n	800a0f4 <PxMessagingTask+0x9c>
			if(cMessage[port - 1][2] >> 7){
 800a14c:	00eb      	lsls	r3, r5, #3
 800a14e:	1b5b      	subs	r3, r3, r5
 800a150:	00da      	lsls	r2, r3, #3
 800a152:	4b9a      	ldr	r3, [pc, #616]	; (800a3bc <PxMessagingTask+0x364>)
 800a154:	189b      	adds	r3, r3, r2
 800a156:	789b      	ldrb	r3, [r3, #2]
 800a158:	b25a      	sxtb	r2, r3
 800a15a:	2a00      	cmp	r2, #0
 800a15c:	db8b      	blt.n	800a076 <PxMessagingTask+0x1e>
				longMessage =0;
 800a15e:	4a96      	ldr	r2, [pc, #600]	; (800a3b8 <PxMessagingTask+0x360>)
 800a160:	2100      	movs	r1, #0
 800a162:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 800a164:	4995      	ldr	r1, [pc, #596]	; (800a3bc <PxMessagingTask+0x364>)
 800a166:	00ea      	lsls	r2, r5, #3
 800a168:	1b56      	subs	r6, r2, r5
 800a16a:	00f4      	lsls	r4, r6, #3
 800a16c:	5c67      	ldrb	r7, [r4, r1]
			src =cMessage[port - 1][1];
 800a16e:	1909      	adds	r1, r1, r4
 800a170:	784a      	ldrb	r2, [r1, #1]
 800a172:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 800a174:	07da      	lsls	r2, r3, #31
 800a176:	d482      	bmi.n	800a07e <PxMessagingTask+0x26>
			shift =0;
 800a178:	2400      	movs	r4, #0
			BOS.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03); // 3rd-4th bits Trace
 800a17a:	0899      	lsrs	r1, r3, #2
 800a17c:	2203      	movs	r2, #3
 800a17e:	400a      	ands	r2, r1
 800a180:	4993      	ldr	r1, [pc, #588]	; (800a3d0 <PxMessagingTask+0x378>)
 800a182:	71ca      	strb	r2, [r1, #7]
			BOS.response =(cMessage[port - 1][2]) & 0x60; // 6th-7th bits Response mode
 800a184:	2260      	movs	r2, #96	; 0x60
 800a186:	401a      	ands	r2, r3
 800a188:	718a      	strb	r2, [r1, #6]
			if(extendCode == true){
 800a18a:	079b      	lsls	r3, r3, #30
 800a18c:	d400      	bmi.n	800a190 <PxMessagingTask+0x138>
 800a18e:	e778      	b.n	800a082 <PxMessagingTask+0x2a>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a190:	1d21      	adds	r1, r4, #4
 800a192:	00eb      	lsls	r3, r5, #3
 800a194:	1b5b      	subs	r3, r3, r5
 800a196:	00da      	lsls	r2, r3, #3
 800a198:	4b88      	ldr	r3, [pc, #544]	; (800a3bc <PxMessagingTask+0x364>)
 800a19a:	189a      	adds	r2, r3, r2
 800a19c:	5c53      	ldrb	r3, [r2, r1]
 800a19e:	021b      	lsls	r3, r3, #8
 800a1a0:	1ce1      	adds	r1, r4, #3
 800a1a2:	5c52      	ldrb	r2, [r2, r1]
 800a1a4:	189b      	adds	r3, r3, r2
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	469a      	mov	sl, r3
				++shift;
 800a1aa:	3401      	adds	r4, #1
 800a1ac:	b2e4      	uxtb	r4, r4
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a1ae:	1e7b      	subs	r3, r7, #1
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2bfc      	cmp	r3, #252	; 0xfc
 800a1b4:	d900      	bls.n	800a1b8 <PxMessagingTask+0x160>
 800a1b6:	e76d      	b.n	800a094 <PxMessagingTask+0x3c>
 800a1b8:	4a81      	ldr	r2, [pc, #516]	; (800a3c0 <PxMessagingTask+0x368>)
 800a1ba:	7812      	ldrb	r2, [r2, #0]
 800a1bc:	42ba      	cmp	r2, r7
 800a1be:	d100      	bne.n	800a1c2 <PxMessagingTask+0x16a>
 800a1c0:	e768      	b.n	800a094 <PxMessagingTask+0x3c>
 800a1c2:	2a01      	cmp	r2, #1
 800a1c4:	d100      	bne.n	800a1c8 <PxMessagingTask+0x170>
 800a1c6:	e765      	b.n	800a094 <PxMessagingTask+0x3c>
				ForwardReceivedMessage(port);
 800a1c8:	9807      	ldr	r0, [sp, #28]
 800a1ca:	f7ff fc3f 	bl	8009a4c <ForwardReceivedMessage>
				if(BOS.trace)
 800a1ce:	4b80      	ldr	r3, [pc, #512]	; (800a3d0 <PxMessagingTask+0x378>)
 800a1d0:	79db      	ldrb	r3, [r3, #7]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d089      	beq.n	800a0ea <PxMessagingTask+0x92>
					indMode =IND_SHORT_BLINK;
 800a1d6:	4b7f      	ldr	r3, [pc, #508]	; (800a3d4 <PxMessagingTask+0x37c>)
 800a1d8:	2203      	movs	r2, #3
 800a1da:	701a      	strb	r2, [r3, #0]
 800a1dc:	e785      	b.n	800a0ea <PxMessagingTask+0x92>
					Delay_ms(100);
 800a1de:	2064      	movs	r0, #100	; 0x64
 800a1e0:	f007 fc92 	bl	8011b08 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	9a07      	ldr	r2, [sp, #28]
 800a1e8:	0039      	movs	r1, r7
 800a1ea:	9804      	ldr	r0, [sp, #16]
 800a1ec:	f7f9 ff2a 	bl	8004044 <remoteBootloaderUpdate>
 800a1f0:	e780      	b.n	800a0f4 <PxMessagingTask+0x9c>
					Delay_ms(100);
 800a1f2:	2064      	movs	r0, #100	; 0x64
 800a1f4:	f007 fc88 	bl	8011b08 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800a1f8:	00eb      	lsls	r3, r5, #3
 800a1fa:	1b5b      	subs	r3, r3, r5
 800a1fc:	00da      	lsls	r2, r3, #3
 800a1fe:	4b6f      	ldr	r3, [pc, #444]	; (800a3bc <PxMessagingTask+0x364>)
 800a200:	189b      	adds	r3, r3, r2
 800a202:	5d1b      	ldrb	r3, [r3, r4]
 800a204:	9a07      	ldr	r2, [sp, #28]
 800a206:	0039      	movs	r1, r7
 800a208:	9804      	ldr	r0, [sp, #16]
 800a20a:	f7f9 ff1b 	bl	8004044 <remoteBootloaderUpdate>
 800a20e:	e771      	b.n	800a0f4 <PxMessagingTask+0x9c>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a210:	1e42      	subs	r2, r0, #1
 800a212:	00eb      	lsls	r3, r5, #3
 800a214:	1b5b      	subs	r3, r3, r5
 800a216:	00d9      	lsls	r1, r3, #3
 800a218:	4b68      	ldr	r3, [pc, #416]	; (800a3bc <PxMessagingTask+0x364>)
 800a21a:	185b      	adds	r3, r3, r1
 800a21c:	5c9b      	ldrb	r3, [r3, r2]
 800a21e:	4a6e      	ldr	r2, [pc, #440]	; (800a3d8 <PxMessagingTask+0x380>)
 800a220:	7812      	ldrb	r2, [r2, #0]
 800a222:	4293      	cmp	r3, r2
 800a224:	d100      	bne.n	800a228 <PxMessagingTask+0x1d0>
 800a226:	e740      	b.n	800a0aa <PxMessagingTask+0x52>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a228:	4a6b      	ldr	r2, [pc, #428]	; (800a3d8 <PxMessagingTask+0x380>)
 800a22a:	7013      	strb	r3, [r2, #0]
 800a22c:	4a6b      	ldr	r2, [pc, #428]	; (800a3dc <PxMessagingTask+0x384>)
 800a22e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a230:	9907      	ldr	r1, [sp, #28]
 800a232:	20ff      	movs	r0, #255	; 0xff
 800a234:	f7ff fc2a 	bl	8009a8c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a238:	4b62      	ldr	r3, [pc, #392]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a23a:	5d5a      	ldrb	r2, [r3, r5]
 800a23c:	3a01      	subs	r2, #1
 800a23e:	00eb      	lsls	r3, r5, #3
 800a240:	1b5b      	subs	r3, r3, r5
 800a242:	00d9      	lsls	r1, r3, #3
 800a244:	4b5d      	ldr	r3, [pc, #372]	; (800a3bc <PxMessagingTask+0x364>)
 800a246:	185b      	adds	r3, r3, r1
 800a248:	2100      	movs	r1, #0
 800a24a:	5499      	strb	r1, [r3, r2]
 800a24c:	e730      	b.n	800a0b0 <PxMessagingTask+0x58>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a24e:	3801      	subs	r0, #1
 800a250:	00eb      	lsls	r3, r5, #3
 800a252:	1b5b      	subs	r3, r3, r5
 800a254:	00da      	lsls	r2, r3, #3
 800a256:	4b59      	ldr	r3, [pc, #356]	; (800a3bc <PxMessagingTask+0x364>)
 800a258:	189b      	adds	r3, r3, r2
 800a25a:	5c1a      	ldrb	r2, [r3, r0]
 800a25c:	4b5e      	ldr	r3, [pc, #376]	; (800a3d8 <PxMessagingTask+0x380>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	429a      	cmp	r2, r3
 800a262:	d000      	beq.n	800a266 <PxMessagingTask+0x20e>
 800a264:	e724      	b.n	800a0b0 <PxMessagingTask+0x58>
					result =BOS_ERR_MSG_Reflection;
 800a266:	2303      	movs	r3, #3
 800a268:	469b      	mov	fp, r3
 800a26a:	e721      	b.n	800a0b0 <PxMessagingTask+0x58>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a26c:	4b55      	ldr	r3, [pc, #340]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a26e:	5d5a      	ldrb	r2, [r3, r5]
 800a270:	3a01      	subs	r2, #1
 800a272:	00eb      	lsls	r3, r5, #3
 800a274:	1b5b      	subs	r3, r3, r5
 800a276:	00d9      	lsls	r1, r3, #3
 800a278:	4b50      	ldr	r3, [pc, #320]	; (800a3bc <PxMessagingTask+0x364>)
 800a27a:	185b      	adds	r3, r3, r1
 800a27c:	5c9b      	ldrb	r3, [r3, r2]
 800a27e:	4a56      	ldr	r2, [pc, #344]	; (800a3d8 <PxMessagingTask+0x380>)
 800a280:	7812      	ldrb	r2, [r2, #0]
 800a282:	4293      	cmp	r3, r2
 800a284:	d100      	bne.n	800a288 <PxMessagingTask+0x230>
 800a286:	e716      	b.n	800a0b6 <PxMessagingTask+0x5e>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a288:	4a53      	ldr	r2, [pc, #332]	; (800a3d8 <PxMessagingTask+0x380>)
 800a28a:	7013      	strb	r3, [r2, #0]
 800a28c:	4a53      	ldr	r2, [pc, #332]	; (800a3dc <PxMessagingTask+0x384>)
 800a28e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800a290:	9907      	ldr	r1, [sp, #28]
 800a292:	20fe      	movs	r0, #254	; 0xfe
 800a294:	f7ff fbfa 	bl	8009a8c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a298:	4b4a      	ldr	r3, [pc, #296]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a29a:	5d58      	ldrb	r0, [r3, r5]
 800a29c:	1e41      	subs	r1, r0, #1
 800a29e:	00ea      	lsls	r2, r5, #3
 800a2a0:	1b52      	subs	r2, r2, r5
 800a2a2:	00d6      	lsls	r6, r2, #3
 800a2a4:	4b45      	ldr	r3, [pc, #276]	; (800a3bc <PxMessagingTask+0x364>)
 800a2a6:	199b      	adds	r3, r3, r6
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	545a      	strb	r2, [r3, r1]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800a2ac:	3802      	subs	r0, #2
 800a2ae:	5c1b      	ldrb	r3, [r3, r0]
 800a2b0:	001e      	movs	r6, r3
 800a2b2:	46a4      	mov	ip, r4
					for(i =0; i < temp; i++){
 800a2b4:	42b2      	cmp	r2, r6
 800a2b6:	d20e      	bcs.n	800a2d6 <PxMessagingTask+0x27e>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800a2b8:	1b81      	subs	r1, r0, r6
 800a2ba:	1851      	adds	r1, r2, r1
 800a2bc:	00eb      	lsls	r3, r5, #3
 800a2be:	1b5b      	subs	r3, r3, r5
 800a2c0:	00dc      	lsls	r4, r3, #3
 800a2c2:	4b3e      	ldr	r3, [pc, #248]	; (800a3bc <PxMessagingTask+0x364>)
 800a2c4:	191b      	adds	r3, r3, r4
 800a2c6:	5c59      	ldrb	r1, [r3, r1]
 800a2c8:	4b3d      	ldr	r3, [pc, #244]	; (800a3c0 <PxMessagingTask+0x368>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	4299      	cmp	r1, r3
 800a2ce:	d018      	beq.n	800a302 <PxMessagingTask+0x2aa>
					for(i =0; i < temp; i++){
 800a2d0:	3201      	adds	r2, #1
 800a2d2:	b2d2      	uxtb	r2, r2
 800a2d4:	e7ee      	b.n	800a2b4 <PxMessagingTask+0x25c>
 800a2d6:	46b1      	mov	r9, r6
 800a2d8:	4664      	mov	r4, ip
					result =BOS_ERR_WrongID;
 800a2da:	2366      	movs	r3, #102	; 0x66
 800a2dc:	469b      	mov	fp, r3
 800a2de:	e6ed      	b.n	800a0bc <PxMessagingTask+0x64>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 800a2e0:	4b38      	ldr	r3, [pc, #224]	; (800a3c4 <PxMessagingTask+0x36c>)
 800a2e2:	5d5a      	ldrb	r2, [r3, r5]
 800a2e4:	3a01      	subs	r2, #1
 800a2e6:	00eb      	lsls	r3, r5, #3
 800a2e8:	1b5b      	subs	r3, r3, r5
 800a2ea:	00d9      	lsls	r1, r3, #3
 800a2ec:	4b33      	ldr	r3, [pc, #204]	; (800a3bc <PxMessagingTask+0x364>)
 800a2ee:	185b      	adds	r3, r3, r1
 800a2f0:	5c9a      	ldrb	r2, [r3, r2]
 800a2f2:	4b39      	ldr	r3, [pc, #228]	; (800a3d8 <PxMessagingTask+0x380>)
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d000      	beq.n	800a2fc <PxMessagingTask+0x2a4>
 800a2fa:	e6df      	b.n	800a0bc <PxMessagingTask+0x64>
					result =BOS_ERR_MSG_Reflection;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	469b      	mov	fp, r3
 800a300:	e6dc      	b.n	800a0bc <PxMessagingTask+0x64>
 800a302:	46b1      	mov	r9, r6
 800a304:	4664      	mov	r4, ip
							result =BOS_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	469b      	mov	fp, r3
 800a30a:	e6d7      	b.n	800a0bc <PxMessagingTask+0x64>
							indMode =IND_PING;
 800a30c:	4b31      	ldr	r3, [pc, #196]	; (800a3d4 <PxMessagingTask+0x37c>)
 800a30e:	2201      	movs	r2, #1
 800a310:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a312:	200a      	movs	r0, #10
 800a314:	f005 fb7c 	bl	800fa10 <osDelay>
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 800a318:	4b2d      	ldr	r3, [pc, #180]	; (800a3d0 <PxMessagingTask+0x378>)
 800a31a:	799b      	ldrb	r3, [r3, #6]
 800a31c:	2b60      	cmp	r3, #96	; 0x60
 800a31e:	d002      	beq.n	800a326 <PxMessagingTask+0x2ce>
 800a320:	2b20      	cmp	r3, #32
 800a322:	d000      	beq.n	800a326 <PxMessagingTask+0x2ce>
 800a324:	e6e6      	b.n	800a0f4 <PxMessagingTask+0x9c>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a326:	2200      	movs	r2, #0
 800a328:	2102      	movs	r1, #2
 800a32a:	9804      	ldr	r0, [sp, #16]
 800a32c:	f7ff fbf6 	bl	8009b1c <SendMessageToModule>
 800a330:	e6e0      	b.n	800a0f4 <PxMessagingTask+0x9c>
							if(!moduleAlias[myID][0])
 800a332:	4b23      	ldr	r3, [pc, #140]	; (800a3c0 <PxMessagingTask+0x368>)
 800a334:	781a      	ldrb	r2, [r3, #0]
 800a336:	0093      	lsls	r3, r2, #2
 800a338:	189b      	adds	r3, r3, r2
 800a33a:	005a      	lsls	r2, r3, #1
 800a33c:	4b28      	ldr	r3, [pc, #160]	; (800a3e0 <PxMessagingTask+0x388>)
 800a33e:	5cd3      	ldrb	r3, [r2, r3]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d116      	bne.n	800a372 <PxMessagingTask+0x31a>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a344:	9a04      	ldr	r2, [sp, #16]
 800a346:	4927      	ldr	r1, [pc, #156]	; (800a3e4 <PxMessagingTask+0x38c>)
 800a348:	4827      	ldr	r0, [pc, #156]	; (800a3e8 <PxMessagingTask+0x390>)
 800a34a:	f00b f997 	bl	801567c <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a34e:	4c26      	ldr	r4, [pc, #152]	; (800a3e8 <PxMessagingTask+0x390>)
 800a350:	0020      	movs	r0, r4
 800a352:	f7f5 fee1 	bl	8000118 <strlen>
 800a356:	b282      	uxth	r2, r0
 800a358:	4b24      	ldr	r3, [pc, #144]	; (800a3ec <PxMessagingTask+0x394>)
 800a35a:	7818      	ldrb	r0, [r3, #0]
 800a35c:	2301      	movs	r3, #1
 800a35e:	425b      	negs	r3, r3
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	3333      	adds	r3, #51	; 0x33
 800a364:	0021      	movs	r1, r4
 800a366:	f005 fa1f 	bl	800f7a8 <writePxMutex>
							responseStatus =BOS_OK;
 800a36a:	4b21      	ldr	r3, [pc, #132]	; (800a3f0 <PxMessagingTask+0x398>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	701a      	strb	r2, [r3, #0]
							break;
 800a370:	e6c0      	b.n	800a0f4 <PxMessagingTask+0x9c>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800a372:	230a      	movs	r3, #10
 800a374:	9904      	ldr	r1, [sp, #16]
 800a376:	434b      	muls	r3, r1
 800a378:	4a19      	ldr	r2, [pc, #100]	; (800a3e0 <PxMessagingTask+0x388>)
 800a37a:	189b      	adds	r3, r3, r2
 800a37c:	000a      	movs	r2, r1
 800a37e:	491d      	ldr	r1, [pc, #116]	; (800a3f4 <PxMessagingTask+0x39c>)
 800a380:	4819      	ldr	r0, [pc, #100]	; (800a3e8 <PxMessagingTask+0x390>)
 800a382:	f00b f97b 	bl	801567c <sprintf>
 800a386:	e7e2      	b.n	800a34e <PxMessagingTask+0x2f6>
							IND_ON();
 800a388:	2180      	movs	r1, #128	; 0x80
 800a38a:	2090      	movs	r0, #144	; 0x90
 800a38c:	2201      	movs	r2, #1
 800a38e:	0109      	lsls	r1, r1, #4
 800a390:	05c0      	lsls	r0, r0, #23
 800a392:	f008 ffbe 	bl	8013312 <HAL_GPIO_WritePin>
							break;
 800a396:	e6ad      	b.n	800a0f4 <PxMessagingTask+0x9c>
							IND_OFF();
 800a398:	2180      	movs	r1, #128	; 0x80
 800a39a:	2090      	movs	r0, #144	; 0x90
 800a39c:	2200      	movs	r2, #0
 800a39e:	0109      	lsls	r1, r1, #4
 800a3a0:	05c0      	lsls	r0, r0, #23
 800a3a2:	f008 ffb6 	bl	8013312 <HAL_GPIO_WritePin>
							break;
 800a3a6:	e6a5      	b.n	800a0f4 <PxMessagingTask+0x9c>
							IND_toggle();
 800a3a8:	2180      	movs	r1, #128	; 0x80
 800a3aa:	2090      	movs	r0, #144	; 0x90
 800a3ac:	0109      	lsls	r1, r1, #4
 800a3ae:	05c0      	lsls	r0, r0, #23
 800a3b0:	f008 ffb5 	bl	801331e <HAL_GPIO_TogglePin>
							break;
 800a3b4:	e69e      	b.n	800a0f4 <PxMessagingTask+0x9c>
 800a3b6:	46c0      	nop			; (mov r8, r8)
 800a3b8:	20000ee5 	.word	0x20000ee5
 800a3bc:	20000d30 	.word	0x20000d30
 800a3c0:	20001066 	.word	0x20001066
 800a3c4:	20000f20 	.word	0x20000f20
 800a3c8:	0801c564 	.word	0x0801c564
 800a3cc:	200010e0 	.word	0x200010e0
 800a3d0:	20006da0 	.word	0x20006da0
 800a3d4:	20000ee4 	.word	0x20000ee4
 800a3d8:	20001576 	.word	0x20001576
 800a3dc:	20000cdc 	.word	0x20000cdc
 800a3e0:	20000f58 	.word	0x20000f58
 800a3e4:	0801ae30 	.word	0x0801ae30
 800a3e8:	200016cc 	.word	0x200016cc
 800a3ec:	20000a9f 	.word	0x20000a9f
 800a3f0:	200010f8 	.word	0x200010f8
 800a3f4:	0801ae44 	.word	0x0801ae44
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a3f8:	9b04      	ldr	r3, [sp, #16]
 800a3fa:	021a      	lsls	r2, r3, #8
 800a3fc:	b292      	uxth	r2, r2
 800a3fe:	1ca0      	adds	r0, r4, #2
 800a400:	00eb      	lsls	r3, r5, #3
 800a402:	1b5b      	subs	r3, r3, r5
 800a404:	00d9      	lsls	r1, r3, #3
 800a406:	4bcc      	ldr	r3, [pc, #816]	; (800a738 <PxMessagingTask+0x6e0>)
 800a408:	1859      	adds	r1, r3, r1
 800a40a:	5c0b      	ldrb	r3, [r1, r0]
 800a40c:	18d2      	adds	r2, r2, r3
 800a40e:	4bcb      	ldr	r3, [pc, #812]	; (800a73c <PxMessagingTask+0x6e4>)
 800a410:	00a8      	lsls	r0, r5, #2
 800a412:	521a      	strh	r2, [r3, r0]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a414:	5d0a      	ldrb	r2, [r1, r4]
 800a416:	0212      	lsls	r2, r2, #8
 800a418:	3401      	adds	r4, #1
 800a41a:	5d09      	ldrb	r1, [r1, r4]
 800a41c:	1852      	adds	r2, r2, r1
 800a41e:	181b      	adds	r3, r3, r0
 800a420:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 800a422:	4bc7      	ldr	r3, [pc, #796]	; (800a740 <PxMessagingTask+0x6e8>)
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	4ac7      	ldr	r2, [pc, #796]	; (800a744 <PxMessagingTask+0x6ec>)
 800a428:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a42a:	0a1b      	lsrs	r3, r3, #8
 800a42c:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a42e:	9c07      	ldr	r4, [sp, #28]
 800a430:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a432:	2002      	movs	r0, #2
 800a434:	f005 faec 	bl	800fa10 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a438:	2303      	movs	r3, #3
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	3308      	adds	r3, #8
 800a43e:	2200      	movs	r2, #0
 800a440:	2100      	movs	r1, #0
 800a442:	0020      	movs	r0, r4
 800a444:	f7ff f95a 	bl	80096fc <SendMessageFromPort>
							break;
 800a448:	e654      	b.n	800a0f4 <PxMessagingTask+0x9c>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	021a      	lsls	r2, r3, #8
 800a44e:	b292      	uxth	r2, r2
 800a450:	1ca1      	adds	r1, r4, #2
 800a452:	00eb      	lsls	r3, r5, #3
 800a454:	1b5b      	subs	r3, r3, r5
 800a456:	00d8      	lsls	r0, r3, #3
 800a458:	4bb7      	ldr	r3, [pc, #732]	; (800a738 <PxMessagingTask+0x6e0>)
 800a45a:	1818      	adds	r0, r3, r0
 800a45c:	5c43      	ldrb	r3, [r0, r1]
 800a45e:	18d2      	adds	r2, r2, r3
 800a460:	4bb6      	ldr	r3, [pc, #728]	; (800a73c <PxMessagingTask+0x6e4>)
 800a462:	00a9      	lsls	r1, r5, #2
 800a464:	525a      	strh	r2, [r3, r1]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a466:	5d02      	ldrb	r2, [r0, r4]
 800a468:	0212      	lsls	r2, r2, #8
 800a46a:	3401      	adds	r4, #1
 800a46c:	5d00      	ldrb	r0, [r0, r4]
 800a46e:	1812      	adds	r2, r2, r0
 800a470:	185b      	adds	r3, r3, r1
 800a472:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 800a474:	4bb4      	ldr	r3, [pc, #720]	; (800a748 <PxMessagingTask+0x6f0>)
 800a476:	2200      	movs	r2, #0
 800a478:	701a      	strb	r2, [r3, #0]
							break;
 800a47a:	e63b      	b.n	800a0f4 <PxMessagingTask+0x9c>
							ExploreNeighbors(port);
 800a47c:	9807      	ldr	r0, [sp, #28]
 800a47e:	f7f9 fc53 	bl	8003d28 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a482:	4bb2      	ldr	r3, [pc, #712]	; (800a74c <PxMessagingTask+0x6f4>)
 800a484:	2202      	movs	r2, #2
 800a486:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a488:	200a      	movs	r0, #10
 800a48a:	f005 fac1 	bl	800fa10 <osDelay>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a48e:	2401      	movs	r4, #1
							temp =0;
 800a490:	2300      	movs	r3, #0
 800a492:	001e      	movs	r6, r3
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a494:	e001      	b.n	800a49a <PxMessagingTask+0x442>
 800a496:	3401      	adds	r4, #1
 800a498:	b2e4      	uxtb	r4, r4
 800a49a:	2c05      	cmp	r4, #5
 800a49c:	d812      	bhi.n	800a4c4 <PxMessagingTask+0x46c>
								if(neighbors[p - 1][0]){
 800a49e:	1e63      	subs	r3, r4, #1
 800a4a0:	0099      	lsls	r1, r3, #2
 800a4a2:	4aa6      	ldr	r2, [pc, #664]	; (800a73c <PxMessagingTask+0x6e4>)
 800a4a4:	5a8a      	ldrh	r2, [r1, r2]
 800a4a6:	2a00      	cmp	r2, #0
 800a4a8:	d0f5      	beq.n	800a496 <PxMessagingTask+0x43e>
									messageParams[temp] =p;
 800a4aa:	4aa6      	ldr	r2, [pc, #664]	; (800a744 <PxMessagingTask+0x6ec>)
 800a4ac:	5594      	strb	r4, [r2, r6]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a4ae:	1c70      	adds	r0, r6, #1
 800a4b0:	000b      	movs	r3, r1
 800a4b2:	49a2      	ldr	r1, [pc, #648]	; (800a73c <PxMessagingTask+0x6e4>)
 800a4b4:	1859      	adds	r1, r3, r1
 800a4b6:	1880      	adds	r0, r0, r2
 800a4b8:	2204      	movs	r2, #4
 800a4ba:	f00a fedc 	bl	8015276 <memcpy>
									temp +=5;
 800a4be:	3605      	adds	r6, #5
 800a4c0:	b2f6      	uxtb	r6, r6
 800a4c2:	e7e8      	b.n	800a496 <PxMessagingTask+0x43e>
 800a4c4:	46b1      	mov	r9, r6
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a4c6:	b2b2      	uxth	r2, r6
 800a4c8:	210d      	movs	r1, #13
 800a4ca:	9804      	ldr	r0, [sp, #16]
 800a4cc:	f7ff fb26 	bl	8009b1c <SendMessageToModule>
							break;
 800a4d0:	e610      	b.n	800a0f4 <PxMessagingTask+0x9c>
							temp =numOfParams / 5;
 800a4d2:	2105      	movs	r1, #5
 800a4d4:	9805      	ldr	r0, [sp, #20]
 800a4d6:	f7f5 fe3b 	bl	8000150 <__udivsi3>
 800a4da:	b2c3      	uxtb	r3, r0
 800a4dc:	4699      	mov	r9, r3
							for(uint8_t k =0; k < temp; k++){
 800a4de:	2600      	movs	r6, #0
 800a4e0:	e019      	b.n	800a516 <PxMessagingTask+0x4be>
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a4e2:	00b3      	lsls	r3, r6, #2
 800a4e4:	199b      	adds	r3, r3, r6
 800a4e6:	18e2      	adds	r2, r4, r3
 800a4e8:	4694      	mov	ip, r2
 800a4ea:	4993      	ldr	r1, [pc, #588]	; (800a738 <PxMessagingTask+0x6e0>)
 800a4ec:	00ea      	lsls	r2, r5, #3
 800a4ee:	1b57      	subs	r7, r2, r5
 800a4f0:	00f8      	lsls	r0, r7, #3
 800a4f2:	1808      	adds	r0, r1, r0
 800a4f4:	4667      	mov	r7, ip
 800a4f6:	5dc0      	ldrb	r0, [r0, r7]
 800a4f8:	3801      	subs	r0, #1
 800a4fa:	0080      	lsls	r0, r0, #2
 800a4fc:	4f94      	ldr	r7, [pc, #592]	; (800a750 <PxMessagingTask+0x6f8>)
 800a4fe:	19c0      	adds	r0, r0, r7
 800a500:	1c67      	adds	r7, r4, #1
 800a502:	19df      	adds	r7, r3, r7
 800a504:	1b52      	subs	r2, r2, r5
 800a506:	00d3      	lsls	r3, r2, #3
 800a508:	19db      	adds	r3, r3, r7
 800a50a:	1859      	adds	r1, r3, r1
 800a50c:	2204      	movs	r2, #4
 800a50e:	f00a feb2 	bl	8015276 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800a512:	3601      	adds	r6, #1
 800a514:	b2f6      	uxtb	r6, r6
 800a516:	454e      	cmp	r6, r9
 800a518:	d3e3      	bcc.n	800a4e2 <PxMessagingTask+0x48a>
							responseStatus =BOS_OK;
 800a51a:	4b8b      	ldr	r3, [pc, #556]	; (800a748 <PxMessagingTask+0x6f0>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	701a      	strb	r2, [r3, #0]
							break;
 800a520:	e5e8      	b.n	800a0f4 <PxMessagingTask+0x9c>
								if(p != port)
 800a522:	9b07      	ldr	r3, [sp, #28]
 800a524:	429e      	cmp	r6, r3
 800a526:	d00c      	beq.n	800a542 <PxMessagingTask+0x4ea>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a528:	0030      	movs	r0, r6
 800a52a:	f005 f91f 	bl	800f76c <GetUart>
 800a52e:	19a2      	adds	r2, r4, r6
 800a530:	3a01      	subs	r2, #1
 800a532:	00eb      	lsls	r3, r5, #3
 800a534:	1b5b      	subs	r3, r3, r5
 800a536:	00d9      	lsls	r1, r3, #3
 800a538:	4b7f      	ldr	r3, [pc, #508]	; (800a738 <PxMessagingTask+0x6e0>)
 800a53a:	185b      	adds	r3, r3, r1
 800a53c:	5c99      	ldrb	r1, [r3, r2]
 800a53e:	f005 f9ad 	bl	800f89c <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a542:	3601      	adds	r6, #1
 800a544:	b2f6      	uxtb	r6, r6
 800a546:	2e05      	cmp	r6, #5
 800a548:	d9eb      	bls.n	800a522 <PxMessagingTask+0x4ca>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a54a:	9807      	ldr	r0, [sp, #28]
 800a54c:	f005 f90e 	bl	800f76c <GetUart>
 800a550:	340a      	adds	r4, #10
 800a552:	00eb      	lsls	r3, r5, #3
 800a554:	1b5b      	subs	r3, r3, r5
 800a556:	00da      	lsls	r2, r3, #3
 800a558:	4b77      	ldr	r3, [pc, #476]	; (800a738 <PxMessagingTask+0x6e0>)
 800a55a:	189b      	adds	r3, r3, r2
 800a55c:	5d19      	ldrb	r1, [r3, r4]
 800a55e:	f005 f99d 	bl	800f89c <SwapUartPins>
							break;
 800a562:	e5c7      	b.n	800a0f4 <PxMessagingTask+0x9c>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a564:	2601      	movs	r6, #1
 800a566:	e7ee      	b.n	800a546 <PxMessagingTask+0x4ee>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a568:	00eb      	lsls	r3, r5, #3
 800a56a:	1b5b      	subs	r3, r3, r5
 800a56c:	00da      	lsls	r2, r3, #3
 800a56e:	4b72      	ldr	r3, [pc, #456]	; (800a738 <PxMessagingTask+0x6e0>)
 800a570:	189b      	adds	r3, r3, r2
 800a572:	5d1b      	ldrb	r3, [r3, r4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d108      	bne.n	800a58a <PxMessagingTask+0x532>
								myID =cMessage[port - 1][1 + shift];
 800a578:	3401      	adds	r4, #1
 800a57a:	2238      	movs	r2, #56	; 0x38
 800a57c:	436a      	muls	r2, r5
 800a57e:	4b6e      	ldr	r3, [pc, #440]	; (800a738 <PxMessagingTask+0x6e0>)
 800a580:	189b      	adds	r3, r3, r2
 800a582:	5d1a      	ldrb	r2, [r3, r4]
 800a584:	4b73      	ldr	r3, [pc, #460]	; (800a754 <PxMessagingTask+0x6fc>)
 800a586:	701a      	strb	r2, [r3, #0]
 800a588:	e5b4      	b.n	800a0f4 <PxMessagingTask+0x9c>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d000      	beq.n	800a590 <PxMessagingTask+0x538>
 800a58e:	e5b1      	b.n	800a0f4 <PxMessagingTask+0x9c>
								messageParams[0] =0; /* change own ID */
 800a590:	4a6c      	ldr	r2, [pc, #432]	; (800a744 <PxMessagingTask+0x6ec>)
 800a592:	2100      	movs	r1, #0
 800a594:	7011      	strb	r1, [r2, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a596:	1c60      	adds	r0, r4, #1
 800a598:	3337      	adds	r3, #55	; 0x37
 800a59a:	436b      	muls	r3, r5
 800a59c:	4e66      	ldr	r6, [pc, #408]	; (800a738 <PxMessagingTask+0x6e0>)
 800a59e:	18f3      	adds	r3, r6, r3
 800a5a0:	5c18      	ldrb	r0, [r3, r0]
 800a5a2:	7050      	strb	r0, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a5a4:	3402      	adds	r4, #2
 800a5a6:	5d18      	ldrb	r0, [r3, r4]
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	330d      	adds	r3, #13
 800a5ae:	000a      	movs	r2, r1
 800a5b0:	f7ff f8a4 	bl	80096fc <SendMessageFromPort>
 800a5b4:	e59e      	b.n	800a0f4 <PxMessagingTask+0x9c>
							if(longMessage){
 800a5b6:	4b68      	ldr	r3, [pc, #416]	; (800a758 <PxMessagingTask+0x700>)
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d011      	beq.n	800a5e2 <PxMessagingTask+0x58a>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a5be:	4e67      	ldr	r6, [pc, #412]	; (800a75c <PxMessagingTask+0x704>)
 800a5c0:	8833      	ldrh	r3, [r6, #0]
 800a5c2:	4867      	ldr	r0, [pc, #412]	; (800a760 <PxMessagingTask+0x708>)
 800a5c4:	1818      	adds	r0, r3, r0
 800a5c6:	2138      	movs	r1, #56	; 0x38
 800a5c8:	4369      	muls	r1, r5
 800a5ca:	190c      	adds	r4, r1, r4
 800a5cc:	495a      	ldr	r1, [pc, #360]	; (800a738 <PxMessagingTask+0x6e0>)
 800a5ce:	1861      	adds	r1, r4, r1
 800a5d0:	9c05      	ldr	r4, [sp, #20]
 800a5d2:	0022      	movs	r2, r4
 800a5d4:	f00a fe4f 	bl	8015276 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a5d8:	8832      	ldrh	r2, [r6, #0]
 800a5da:	46a4      	mov	ip, r4
 800a5dc:	4462      	add	r2, ip
 800a5de:	8032      	strh	r2, [r6, #0]
 800a5e0:	e588      	b.n	800a0f4 <PxMessagingTask+0x9c>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a5e2:	4e5e      	ldr	r6, [pc, #376]	; (800a75c <PxMessagingTask+0x704>)
 800a5e4:	8830      	ldrh	r0, [r6, #0]
 800a5e6:	4f5e      	ldr	r7, [pc, #376]	; (800a760 <PxMessagingTask+0x708>)
 800a5e8:	19c0      	adds	r0, r0, r7
 800a5ea:	2138      	movs	r1, #56	; 0x38
 800a5ec:	4369      	muls	r1, r5
 800a5ee:	190c      	adds	r4, r1, r4
 800a5f0:	4951      	ldr	r1, [pc, #324]	; (800a738 <PxMessagingTask+0x6e0>)
 800a5f2:	1861      	adds	r1, r4, r1
 800a5f4:	9b05      	ldr	r3, [sp, #20]
 800a5f6:	469a      	mov	sl, r3
 800a5f8:	001a      	movs	r2, r3
 800a5fa:	f00a fe3c 	bl	8015276 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a5fe:	8834      	ldrh	r4, [r6, #0]
 800a600:	4454      	add	r4, sl
 800a602:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a604:	2116      	movs	r1, #22
 800a606:	0020      	movs	r0, r4
 800a608:	f7f5 fda2 	bl	8000150 <__udivsi3>
 800a60c:	4b55      	ldr	r3, [pc, #340]	; (800a764 <PxMessagingTask+0x70c>)
 800a60e:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a610:	0022      	movs	r2, r4
 800a612:	0039      	movs	r1, r7
 800a614:	4854      	ldr	r0, [pc, #336]	; (800a768 <PxMessagingTask+0x710>)
 800a616:	f00a fe2e 	bl	8015276 <memcpy>
								longMessageLastPtr =0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	8033      	strh	r3, [r6, #0]
 800a61e:	e569      	b.n	800a0f4 <PxMessagingTask+0x9c>
							for(p =1; p <= NumOfPorts; p++){
 800a620:	3401      	adds	r4, #1
 800a622:	b2e4      	uxtb	r4, r4
 800a624:	2c05      	cmp	r4, #5
 800a626:	d810      	bhi.n	800a64a <PxMessagingTask+0x5f2>
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a628:	0020      	movs	r0, r4
 800a62a:	f005 f89f 	bl	800f76c <GetUart>
 800a62e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a630:	2380      	movs	r3, #128	; 0x80
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	429a      	cmp	r2, r3
 800a636:	d1f3      	bne.n	800a620 <PxMessagingTask+0x5c8>
									messageParams[temp++] =p;
 800a638:	1c73      	adds	r3, r6, #1
 800a63a:	4a42      	ldr	r2, [pc, #264]	; (800a744 <PxMessagingTask+0x6ec>)
 800a63c:	5594      	strb	r4, [r2, r6]
 800a63e:	b2de      	uxtb	r6, r3
 800a640:	e7ee      	b.n	800a620 <PxMessagingTask+0x5c8>
							for(p =1; p <= NumOfPorts; p++){
 800a642:	2401      	movs	r4, #1
							temp =0;
 800a644:	2300      	movs	r3, #0
 800a646:	001e      	movs	r6, r3
 800a648:	e7ec      	b.n	800a624 <PxMessagingTask+0x5cc>
 800a64a:	46b1      	mov	r9, r6
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a64c:	b2b2      	uxth	r2, r6
 800a64e:	2114      	movs	r1, #20
 800a650:	9804      	ldr	r0, [sp, #16]
 800a652:	f7ff fa63 	bl	8009b1c <SendMessageToModule>
							break;
 800a656:	e54d      	b.n	800a0f4 <PxMessagingTask+0x9c>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a658:	9b04      	ldr	r3, [sp, #16]
 800a65a:	3b01      	subs	r3, #1
 800a65c:	1866      	adds	r6, r4, r1
 800a65e:	00ea      	lsls	r2, r5, #3
 800a660:	1b52      	subs	r2, r2, r5
 800a662:	00d0      	lsls	r0, r2, #3
 800a664:	4a34      	ldr	r2, [pc, #208]	; (800a738 <PxMessagingTask+0x6e0>)
 800a666:	1812      	adds	r2, r2, r0
 800a668:	5d90      	ldrb	r0, [r2, r6]
 800a66a:	3801      	subs	r0, #1
 800a66c:	2280      	movs	r2, #128	; 0x80
 800a66e:	0212      	lsls	r2, r2, #8
 800a670:	4102      	asrs	r2, r0
 800a672:	0010      	movs	r0, r2
 800a674:	4e3d      	ldr	r6, [pc, #244]	; (800a76c <PxMessagingTask+0x714>)
 800a676:	005b      	lsls	r3, r3, #1
 800a678:	5b9a      	ldrh	r2, [r3, r6]
 800a67a:	4302      	orrs	r2, r0
 800a67c:	539a      	strh	r2, [r3, r6]
							for(p =0; p < numOfParams; p++){
 800a67e:	3101      	adds	r1, #1
 800a680:	b2c9      	uxtb	r1, r1
 800a682:	9b05      	ldr	r3, [sp, #20]
 800a684:	4299      	cmp	r1, r3
 800a686:	d3e7      	bcc.n	800a658 <PxMessagingTask+0x600>
							responseStatus =BOS_OK;
 800a688:	4b2f      	ldr	r3, [pc, #188]	; (800a748 <PxMessagingTask+0x6f0>)
 800a68a:	2200      	movs	r2, #0
 800a68c:	701a      	strb	r2, [r3, #0]
							break;
 800a68e:	e531      	b.n	800a0f4 <PxMessagingTask+0x9c>
							for(p =0; p < numOfParams; p++){
 800a690:	2100      	movs	r1, #0
 800a692:	e7f6      	b.n	800a682 <PxMessagingTask+0x62a>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a694:	00eb      	lsls	r3, r5, #3
 800a696:	1b5b      	subs	r3, r3, r5
 800a698:	00da      	lsls	r2, r3, #3
 800a69a:	4b27      	ldr	r3, [pc, #156]	; (800a738 <PxMessagingTask+0x6e0>)
 800a69c:	189b      	adds	r3, r3, r2
 800a69e:	5d1e      	ldrb	r6, [r3, r4]
 800a6a0:	0636      	lsls	r6, r6, #24
 800a6a2:	1c62      	adds	r2, r4, #1
 800a6a4:	5c9a      	ldrb	r2, [r3, r2]
 800a6a6:	0412      	lsls	r2, r2, #16
 800a6a8:	18b6      	adds	r6, r6, r2
 800a6aa:	1ca2      	adds	r2, r4, #2
 800a6ac:	5c9a      	ldrb	r2, [r3, r2]
 800a6ae:	0212      	lsls	r2, r2, #8
 800a6b0:	18b6      	adds	r6, r6, r2
 800a6b2:	1ce2      	adds	r2, r4, #3
 800a6b4:	5c9a      	ldrb	r2, [r3, r2]
 800a6b6:	18b6      	adds	r6, r6, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a6b8:	3404      	adds	r4, #4
 800a6ba:	5d1b      	ldrb	r3, [r3, r4]
 800a6bc:	2bff      	cmp	r3, #255	; 0xff
 800a6be:	d00e      	beq.n	800a6de <PxMessagingTask+0x686>
								for(p =0; p < numOfParams; p++){
 800a6c0:	2700      	movs	r7, #0
							temp =temp32 =0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4699      	mov	r9, r3
 800a6c6:	e01a      	b.n	800a6fe <PxMessagingTask+0x6a6>
									UpdateBaudrate(p,temp32);
 800a6c8:	0031      	movs	r1, r6
 800a6ca:	0020      	movs	r0, r4
 800a6cc:	f005 f8dc 	bl	800f888 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a6d0:	3401      	adds	r4, #1
 800a6d2:	b2e4      	uxtb	r4, r4
 800a6d4:	2c05      	cmp	r4, #5
 800a6d6:	d9f7      	bls.n	800a6c8 <PxMessagingTask+0x670>
							temp =temp32 =0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4699      	mov	r9, r3
 800a6dc:	e50a      	b.n	800a0f4 <PxMessagingTask+0x9c>
								for(p =1; p <= NumOfPorts; p++){
 800a6de:	2401      	movs	r4, #1
 800a6e0:	e7f8      	b.n	800a6d4 <PxMessagingTask+0x67c>
									temp =cMessage[port - 1][4 + shift + p];
 800a6e2:	193a      	adds	r2, r7, r4
 800a6e4:	00eb      	lsls	r3, r5, #3
 800a6e6:	1b5b      	subs	r3, r3, r5
 800a6e8:	00d9      	lsls	r1, r3, #3
 800a6ea:	4b13      	ldr	r3, [pc, #76]	; (800a738 <PxMessagingTask+0x6e0>)
 800a6ec:	185b      	adds	r3, r3, r1
 800a6ee:	5c9b      	ldrb	r3, [r3, r2]
 800a6f0:	4699      	mov	r9, r3
									if(temp > 0 && temp <= NumOfPorts){
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d905      	bls.n	800a706 <PxMessagingTask+0x6ae>
								for(p =0; p < numOfParams; p++){
 800a6fa:	3701      	adds	r7, #1
 800a6fc:	b2ff      	uxtb	r7, r7
 800a6fe:	9b05      	ldr	r3, [sp, #20]
 800a700:	429f      	cmp	r7, r3
 800a702:	d3ee      	bcc.n	800a6e2 <PxMessagingTask+0x68a>
 800a704:	e4f6      	b.n	800a0f4 <PxMessagingTask+0x9c>
										UpdateBaudrate(temp,temp32);
 800a706:	0031      	movs	r1, r6
 800a708:	4648      	mov	r0, r9
 800a70a:	f005 f8bd 	bl	800f888 <UpdateBaudrate>
 800a70e:	e7f4      	b.n	800a6fa <PxMessagingTask+0x6a2>
							SaveToRO();
 800a710:	f001 fb0e 	bl	800bd30 <SaveToRO>
							SaveEEportsDir();
 800a714:	f7f9 f940 	bl	8003998 <SaveEEportsDir>
							indMode =IND_PING;
 800a718:	4b0c      	ldr	r3, [pc, #48]	; (800a74c <PxMessagingTask+0x6f4>)
 800a71a:	2201      	movs	r2, #1
 800a71c:	701a      	strb	r2, [r3, #0]
							break;
 800a71e:	e4e9      	b.n	800a0f4 <PxMessagingTask+0x9c>
							ClearEEportsDir();
 800a720:	f7f9 fa08 	bl	8003b34 <ClearEEportsDir>
							ClearROtopology();
 800a724:	f001 fbf0 	bl	800bf08 <ClearROtopology>
							osDelay(100);
 800a728:	2064      	movs	r0, #100	; 0x64
 800a72a:	f005 f971 	bl	800fa10 <osDelay>
							indMode =IND_TOPOLOGY;
 800a72e:	4b07      	ldr	r3, [pc, #28]	; (800a74c <PxMessagingTask+0x6f4>)
 800a730:	2202      	movs	r2, #2
 800a732:	701a      	strb	r2, [r3, #0]
							break;
 800a734:	e4de      	b.n	800a0f4 <PxMessagingTask+0x9c>
 800a736:	46c0      	nop			; (mov r8, r8)
 800a738:	20000d30 	.word	0x20000d30
 800a73c:	20001068 	.word	0x20001068
 800a740:	20000050 	.word	0x20000050
 800a744:	20000f28 	.word	0x20000f28
 800a748:	200010f8 	.word	0x200010f8
 800a74c:	20000ee4 	.word	0x20000ee4
 800a750:	2000107c 	.word	0x2000107c
 800a754:	20001066 	.word	0x20001066
 800a758:	20000ee5 	.word	0x20000ee5
 800a75c:	20000ee6 	.word	0x20000ee6
 800a760:	200015ac 	.word	0x200015ac
 800a764:	2000001c 	.word	0x2000001c
 800a768:	20000aa0 	.word	0x20000aa0
 800a76c:	20007238 	.word	0x20007238
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a770:	f005 fa70 	bl	800fc54 <FreeRTOS_CLIGetOutputBuffer>
 800a774:	0006      	movs	r6, r0
							if(dst == BOS_BROADCAST)
 800a776:	2fff      	cmp	r7, #255	; 0xff
 800a778:	d025      	beq.n	800a7c6 <PxMessagingTask+0x76e>
							else if(dst == BOS_MULTICAST)
 800a77a:	2ffe      	cmp	r7, #254	; 0xfe
 800a77c:	d02e      	beq.n	800a7dc <PxMessagingTask+0x784>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a77e:	00ea      	lsls	r2, r5, #3
 800a780:	1b52      	subs	r2, r2, r5
 800a782:	00d3      	lsls	r3, r2, #3
 800a784:	191c      	adds	r4, r3, r4
 800a786:	49e4      	ldr	r1, [pc, #912]	; (800ab18 <PxMessagingTask+0xac0>)
 800a788:	1861      	adds	r1, r4, r1
 800a78a:	9a05      	ldr	r2, [sp, #20]
 800a78c:	48e3      	ldr	r0, [pc, #908]	; (800ab1c <PxMessagingTask+0xac4>)
 800a78e:	f00a fd72 	bl	8015276 <memcpy>
								temp =PcPort;
 800a792:	4fe3      	ldr	r7, [pc, #908]	; (800ab20 <PxMessagingTask+0xac8>)
 800a794:	783c      	ldrb	r4, [r7, #0]
								PcPort =port;
 800a796:	9b07      	ldr	r3, [sp, #28]
 800a798:	703b      	strb	r3, [r7, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a79a:	2299      	movs	r2, #153	; 0x99
 800a79c:	0092      	lsls	r2, r2, #2
 800a79e:	0031      	movs	r1, r6
 800a7a0:	48de      	ldr	r0, [pc, #888]	; (800ab1c <PxMessagingTask+0xac4>)
 800a7a2:	f005 f9f1 	bl	800fb88 <FreeRTOS_CLIProcessCommand>
 800a7a6:	4681      	mov	r9, r0
								PcPort =temp;
 800a7a8:	703c      	strb	r4, [r7, #0]
								if(BOS.response == BOS_RESPONSE_ALL){
 800a7aa:	4bde      	ldr	r3, [pc, #888]	; (800ab24 <PxMessagingTask+0xacc>)
 800a7ac:	799b      	ldrb	r3, [r3, #6]
 800a7ae:	2b60      	cmp	r3, #96	; 0x60
 800a7b0:	d021      	beq.n	800a7f6 <PxMessagingTask+0x79e>
							} while(xReturned != pdFALSE);
 800a7b2:	464b      	mov	r3, r9
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1ec      	bne.n	800a792 <PxMessagingTask+0x73a>
 800a7b8:	46a1      	mov	r9, r4
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a7ba:	2232      	movs	r2, #50	; 0x32
 800a7bc:	2100      	movs	r1, #0
 800a7be:	48d7      	ldr	r0, [pc, #860]	; (800ab1c <PxMessagingTask+0xac4>)
 800a7c0:	f00a fd62 	bl	8015288 <memset>
							break;
 800a7c4:	e496      	b.n	800a0f4 <PxMessagingTask+0x9c>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a7c6:	2138      	movs	r1, #56	; 0x38
 800a7c8:	4369      	muls	r1, r5
 800a7ca:	190c      	adds	r4, r1, r4
 800a7cc:	49d2      	ldr	r1, [pc, #840]	; (800ab18 <PxMessagingTask+0xac0>)
 800a7ce:	1861      	adds	r1, r4, r1
 800a7d0:	9a05      	ldr	r2, [sp, #20]
 800a7d2:	3a01      	subs	r2, #1
 800a7d4:	48d1      	ldr	r0, [pc, #836]	; (800ab1c <PxMessagingTask+0xac4>)
 800a7d6:	f00a fd4e 	bl	8015276 <memcpy>
 800a7da:	e7da      	b.n	800a792 <PxMessagingTask+0x73a>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a7dc:	2138      	movs	r1, #56	; 0x38
 800a7de:	4369      	muls	r1, r5
 800a7e0:	190c      	adds	r4, r1, r4
 800a7e2:	49cd      	ldr	r1, [pc, #820]	; (800ab18 <PxMessagingTask+0xac0>)
 800a7e4:	1861      	adds	r1, r4, r1
 800a7e6:	9b05      	ldr	r3, [sp, #20]
 800a7e8:	464a      	mov	r2, r9
 800a7ea:	1a9a      	subs	r2, r3, r2
 800a7ec:	3a02      	subs	r2, #2
 800a7ee:	48cb      	ldr	r0, [pc, #812]	; (800ab1c <PxMessagingTask+0xac4>)
 800a7f0:	f00a fd41 	bl	8015276 <memcpy>
 800a7f4:	e7cd      	b.n	800a792 <PxMessagingTask+0x73a>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a7f6:	0030      	movs	r0, r6
 800a7f8:	f7f5 fc8e 	bl	8000118 <strlen>
 800a7fc:	0002      	movs	r2, r0
 800a7fe:	0031      	movs	r1, r6
 800a800:	48c9      	ldr	r0, [pc, #804]	; (800ab28 <PxMessagingTask+0xad0>)
 800a802:	f00a fd38 	bl	8015276 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a806:	0030      	movs	r0, r6
 800a808:	f7f5 fc86 	bl	8000118 <strlen>
 800a80c:	b282      	uxth	r2, r0
 800a80e:	2118      	movs	r1, #24
 800a810:	9804      	ldr	r0, [sp, #16]
 800a812:	f7ff f983 	bl	8009b1c <SendMessageToModule>
									osDelay(10);
 800a816:	200a      	movs	r0, #10
 800a818:	f005 f8fa 	bl	800fa10 <osDelay>
 800a81c:	e7c9      	b.n	800a7b2 <PxMessagingTask+0x75a>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a81e:	f005 fa19 	bl	800fc54 <FreeRTOS_CLIGetOutputBuffer>
 800a822:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a824:	f7f5 fc78 	bl	8000118 <strlen>
 800a828:	0002      	movs	r2, r0
 800a82a:	2100      	movs	r1, #0
 800a82c:	0030      	movs	r0, r6
 800a82e:	f00a fd2b 	bl	8015288 <memset>
							if(longMessage){
 800a832:	4bbe      	ldr	r3, [pc, #760]	; (800ab2c <PxMessagingTask+0xad4>)
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d010      	beq.n	800a85c <PxMessagingTask+0x804>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a83a:	4fbd      	ldr	r7, [pc, #756]	; (800ab30 <PxMessagingTask+0xad8>)
 800a83c:	8838      	ldrh	r0, [r7, #0]
 800a83e:	1830      	adds	r0, r6, r0
 800a840:	2138      	movs	r1, #56	; 0x38
 800a842:	4369      	muls	r1, r5
 800a844:	190c      	adds	r4, r1, r4
 800a846:	49b4      	ldr	r1, [pc, #720]	; (800ab18 <PxMessagingTask+0xac0>)
 800a848:	1861      	adds	r1, r4, r1
 800a84a:	9c05      	ldr	r4, [sp, #20]
 800a84c:	0022      	movs	r2, r4
 800a84e:	f00a fd12 	bl	8015276 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a852:	883a      	ldrh	r2, [r7, #0]
 800a854:	46a4      	mov	ip, r4
 800a856:	4462      	add	r2, ip
 800a858:	803a      	strh	r2, [r7, #0]
 800a85a:	e44b      	b.n	800a0f4 <PxMessagingTask+0x9c>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a85c:	4fb4      	ldr	r7, [pc, #720]	; (800ab30 <PxMessagingTask+0xad8>)
 800a85e:	8838      	ldrh	r0, [r7, #0]
 800a860:	1830      	adds	r0, r6, r0
 800a862:	2138      	movs	r1, #56	; 0x38
 800a864:	4369      	muls	r1, r5
 800a866:	190c      	adds	r4, r1, r4
 800a868:	49ab      	ldr	r1, [pc, #684]	; (800ab18 <PxMessagingTask+0xac0>)
 800a86a:	1861      	adds	r1, r4, r1
 800a86c:	9a05      	ldr	r2, [sp, #20]
 800a86e:	f00a fd02 	bl	8015276 <memcpy>
								longMessageLastPtr =0;
 800a872:	2100      	movs	r1, #0
 800a874:	8039      	strh	r1, [r7, #0]
								responseStatus =BOS_OK;
 800a876:	4baf      	ldr	r3, [pc, #700]	; (800ab34 <PxMessagingTask+0xadc>)
 800a878:	7019      	strb	r1, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a87a:	000b      	movs	r3, r1
 800a87c:	000a      	movs	r2, r1
 800a87e:	48ae      	ldr	r0, [pc, #696]	; (800ab38 <PxMessagingTask+0xae0>)
 800a880:	6800      	ldr	r0, [r0, #0]
 800a882:	f006 fd07 	bl	8011294 <xTaskGenericNotify>
 800a886:	e435      	b.n	800a0f4 <PxMessagingTask+0x9c>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a888:	4bac      	ldr	r3, [pc, #688]	; (800ab3c <PxMessagingTask+0xae4>)
 800a88a:	4aad      	ldr	r2, [pc, #692]	; (800ab40 <PxMessagingTask+0xae8>)
 800a88c:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a88e:	4bad      	ldr	r3, [pc, #692]	; (800ab44 <PxMessagingTask+0xaec>)
 800a890:	2201      	movs	r2, #1
 800a892:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a894:	200a      	movs	r0, #10
 800a896:	f005 f8bb 	bl	800fa10 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	4baa      	ldr	r3, [pc, #680]	; (800ab48 <PxMessagingTask+0xaf0>)
 800a8a0:	4aaa      	ldr	r2, [pc, #680]	; (800ab4c <PxMessagingTask+0xaf4>)
 800a8a2:	60da      	str	r2, [r3, #12]
 800a8a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a8a8:	46c0      	nop			; (mov r8, r8)
 800a8aa:	e7fd      	b.n	800a8a8 <PxMessagingTask+0x850>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a8ac:	00eb      	lsls	r3, r5, #3
 800a8ae:	1b5b      	subs	r3, r3, r5
 800a8b0:	00da      	lsls	r2, r3, #3
 800a8b2:	4e99      	ldr	r6, [pc, #612]	; (800ab18 <PxMessagingTask+0xac0>)
 800a8b4:	18b6      	adds	r6, r6, r2
 800a8b6:	5d30      	ldrb	r0, [r6, r4]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	3319      	adds	r3, #25
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	f7fe ff1b 	bl	80096fc <SendMessageFromPort>
							osDelay(100);
 800a8c6:	2064      	movs	r0, #100	; 0x64
 800a8c8:	f005 f8a2 	bl	800fa10 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a8cc:	5d33      	ldrb	r3, [r6, r4]
 800a8ce:	4aa0      	ldr	r2, [pc, #640]	; (800ab50 <PxMessagingTask+0xaf8>)
 800a8d0:	7811      	ldrb	r1, [r2, #0]
 800a8d2:	9a07      	ldr	r2, [sp, #28]
 800a8d4:	9804      	ldr	r0, [sp, #16]
 800a8d6:	f7f9 fbb5 	bl	8004044 <remoteBootloaderUpdate>
							break;
 800a8da:	f7ff fc0b 	bl	800a0f4 <PxMessagingTask+0x9c>
							temp =cMessage[port - 1][11 + shift];
 800a8de:	0021      	movs	r1, r4
 800a8e0:	230b      	movs	r3, #11
 800a8e2:	469c      	mov	ip, r3
 800a8e4:	44a4      	add	ip, r4
 800a8e6:	4660      	mov	r0, ip
 800a8e8:	9009      	str	r0, [sp, #36]	; 0x24
 800a8ea:	00eb      	lsls	r3, r5, #3
 800a8ec:	1b5b      	subs	r3, r3, r5
 800a8ee:	00da      	lsls	r2, r3, #3
 800a8f0:	4b89      	ldr	r3, [pc, #548]	; (800ab18 <PxMessagingTask+0xac0>)
 800a8f2:	189b      	adds	r3, r3, r2
 800a8f4:	5c1b      	ldrb	r3, [r3, r0]
 800a8f6:	4699      	mov	r9, r3
							if(numOfParams == 15)
 800a8f8:	9b05      	ldr	r3, [sp, #20]
 800a8fa:	2b0f      	cmp	r3, #15
 800a8fc:	d100      	bne.n	800a900 <PxMessagingTask+0x8a8>
 800a8fe:	e08d      	b.n	800aa1c <PxMessagingTask+0x9c4>
							if(numOfParams == 17)
 800a900:	9b05      	ldr	r3, [sp, #20]
 800a902:	2b11      	cmp	r3, #17
 800a904:	d100      	bne.n	800a908 <PxMessagingTask+0x8b0>
 800a906:	e092      	b.n	800aa2e <PxMessagingTask+0x9d6>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a908:	00ea      	lsls	r2, r5, #3
 800a90a:	1b52      	subs	r2, r2, r5
 800a90c:	00d3      	lsls	r3, r2, #3
 800a90e:	4a82      	ldr	r2, [pc, #520]	; (800ab18 <PxMessagingTask+0xac0>)
 800a910:	18d3      	adds	r3, r2, r3
 800a912:	5d1e      	ldrb	r6, [r3, r4]
 800a914:	0636      	lsls	r6, r6, #24
 800a916:	1c62      	adds	r2, r4, #1
 800a918:	920a      	str	r2, [sp, #40]	; 0x28
 800a91a:	5c9a      	ldrb	r2, [r3, r2]
 800a91c:	0412      	lsls	r2, r2, #16
 800a91e:	18b6      	adds	r6, r6, r2
 800a920:	1ca2      	adds	r2, r4, #2
 800a922:	920b      	str	r2, [sp, #44]	; 0x2c
 800a924:	5c9a      	ldrb	r2, [r3, r2]
 800a926:	0212      	lsls	r2, r2, #8
 800a928:	18b6      	adds	r6, r6, r2
 800a92a:	1ce2      	adds	r2, r4, #3
 800a92c:	920c      	str	r2, [sp, #48]	; 0x30
 800a92e:	5c9a      	ldrb	r2, [r3, r2]
 800a930:	18b6      	adds	r6, r6, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a932:	1d22      	adds	r2, r4, #4
 800a934:	920d      	str	r2, [sp, #52]	; 0x34
 800a936:	5c9f      	ldrb	r7, [r3, r2]
 800a938:	063f      	lsls	r7, r7, #24
 800a93a:	1d62      	adds	r2, r4, #5
 800a93c:	920e      	str	r2, [sp, #56]	; 0x38
 800a93e:	5c9a      	ldrb	r2, [r3, r2]
 800a940:	0412      	lsls	r2, r2, #16
 800a942:	18bf      	adds	r7, r7, r2
 800a944:	1da2      	adds	r2, r4, #6
 800a946:	920f      	str	r2, [sp, #60]	; 0x3c
 800a948:	5c9a      	ldrb	r2, [r3, r2]
 800a94a:	0212      	lsls	r2, r2, #8
 800a94c:	18bf      	adds	r7, r7, r2
 800a94e:	1de2      	adds	r2, r4, #7
 800a950:	5c9b      	ldrb	r3, [r3, r2]
 800a952:	18ff      	adds	r7, r7, r3
							if(temp == false){
 800a954:	464b      	mov	r3, r9
 800a956:	2b00      	cmp	r3, #0
 800a958:	d172      	bne.n	800aa40 <PxMessagingTask+0x9e8>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a95a:	00eb      	lsls	r3, r5, #3
 800a95c:	1b5b      	subs	r3, r3, r5
 800a95e:	00d9      	lsls	r1, r3, #3
 800a960:	4a6d      	ldr	r2, [pc, #436]	; (800ab18 <PxMessagingTask+0xac0>)
 800a962:	1852      	adds	r2, r2, r1
 800a964:	0023      	movs	r3, r4
 800a966:	3309      	adds	r3, #9
 800a968:	5cd3      	ldrb	r3, [r2, r3]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d014      	beq.n	800a998 <PxMessagingTask+0x940>
 800a96e:	2238      	movs	r2, #56	; 0x38
 800a970:	436a      	muls	r2, r5
 800a972:	4969      	ldr	r1, [pc, #420]	; (800ab18 <PxMessagingTask+0xac0>)
 800a974:	1889      	adds	r1, r1, r2
 800a976:	0022      	movs	r2, r4
 800a978:	320a      	adds	r2, #10
 800a97a:	5c89      	ldrb	r1, [r1, r2]
 800a97c:	2900      	cmp	r1, #0
 800a97e:	d00b      	beq.n	800a998 <PxMessagingTask+0x940>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a980:	3a02      	subs	r2, #2
 800a982:	2038      	movs	r0, #56	; 0x38
 800a984:	4368      	muls	r0, r5
 800a986:	4684      	mov	ip, r0
 800a988:	4863      	ldr	r0, [pc, #396]	; (800ab18 <PxMessagingTask+0xac0>)
 800a98a:	4460      	add	r0, ip
 800a98c:	5c80      	ldrb	r0, [r0, r2]
 800a98e:	9100      	str	r1, [sp, #0]
 800a990:	003a      	movs	r2, r7
 800a992:	0031      	movs	r1, r6
 800a994:	f7fe fd9e 	bl	80094d4 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a998:	00eb      	lsls	r3, r5, #3
 800a99a:	1b5b      	subs	r3, r3, r5
 800a99c:	00da      	lsls	r2, r3, #3
 800a99e:	4b5e      	ldr	r3, [pc, #376]	; (800ab18 <PxMessagingTask+0xac0>)
 800a9a0:	189b      	adds	r3, r3, r2
 800a9a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9a4:	5c9b      	ldrb	r3, [r3, r2]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d014      	beq.n	800a9d4 <PxMessagingTask+0x97c>
 800a9aa:	0022      	movs	r2, r4
 800a9ac:	320c      	adds	r2, #12
 800a9ae:	2038      	movs	r0, #56	; 0x38
 800a9b0:	4368      	muls	r0, r5
 800a9b2:	4959      	ldr	r1, [pc, #356]	; (800ab18 <PxMessagingTask+0xac0>)
 800a9b4:	1809      	adds	r1, r1, r0
 800a9b6:	5c89      	ldrb	r1, [r1, r2]
 800a9b8:	2900      	cmp	r1, #0
 800a9ba:	d00b      	beq.n	800a9d4 <PxMessagingTask+0x97c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a9bc:	3a04      	subs	r2, #4
 800a9be:	2038      	movs	r0, #56	; 0x38
 800a9c0:	4368      	muls	r0, r5
 800a9c2:	4684      	mov	ip, r0
 800a9c4:	4854      	ldr	r0, [pc, #336]	; (800ab18 <PxMessagingTask+0xac0>)
 800a9c6:	4460      	add	r0, ip
 800a9c8:	5c80      	ldrb	r0, [r0, r2]
 800a9ca:	9100      	str	r1, [sp, #0]
 800a9cc:	003a      	movs	r2, r7
 800a9ce:	0031      	movs	r1, r6
 800a9d0:	f7fe fd80 	bl	80094d4 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a9d4:	00eb      	lsls	r3, r5, #3
 800a9d6:	1b5b      	subs	r3, r3, r5
 800a9d8:	00d9      	lsls	r1, r3, #3
 800a9da:	4a4f      	ldr	r2, [pc, #316]	; (800ab18 <PxMessagingTask+0xac0>)
 800a9dc:	1852      	adds	r2, r2, r1
 800a9de:	0023      	movs	r3, r4
 800a9e0:	330d      	adds	r3, #13
 800a9e2:	5cd3      	ldrb	r3, [r2, r3]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <PxMessagingTask+0x994>
 800a9e8:	f7ff fb84 	bl	800a0f4 <PxMessagingTask+0x9c>
 800a9ec:	2238      	movs	r2, #56	; 0x38
 800a9ee:	436a      	muls	r2, r5
 800a9f0:	4949      	ldr	r1, [pc, #292]	; (800ab18 <PxMessagingTask+0xac0>)
 800a9f2:	1889      	adds	r1, r1, r2
 800a9f4:	0022      	movs	r2, r4
 800a9f6:	320e      	adds	r2, #14
 800a9f8:	5c89      	ldrb	r1, [r1, r2]
 800a9fa:	2900      	cmp	r1, #0
 800a9fc:	d101      	bne.n	800aa02 <PxMessagingTask+0x9aa>
 800a9fe:	f7ff fb79 	bl	800a0f4 <PxMessagingTask+0x9c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800aa02:	3408      	adds	r4, #8
 800aa04:	2038      	movs	r0, #56	; 0x38
 800aa06:	4368      	muls	r0, r5
 800aa08:	4a43      	ldr	r2, [pc, #268]	; (800ab18 <PxMessagingTask+0xac0>)
 800aa0a:	1812      	adds	r2, r2, r0
 800aa0c:	5d10      	ldrb	r0, [r2, r4]
 800aa0e:	9100      	str	r1, [sp, #0]
 800aa10:	003a      	movs	r2, r7
 800aa12:	0031      	movs	r1, r6
 800aa14:	f7fe fd5e 	bl	80094d4 <SetupDMAStreams>
 800aa18:	f7ff fb6c 	bl	800a0f4 <PxMessagingTask+0x9c>
								temp =cMessage[port - 1][13 + shift];
 800aa1c:	3329      	adds	r3, #41	; 0x29
 800aa1e:	436b      	muls	r3, r5
 800aa20:	4a3d      	ldr	r2, [pc, #244]	; (800ab18 <PxMessagingTask+0xac0>)
 800aa22:	18d2      	adds	r2, r2, r3
 800aa24:	0023      	movs	r3, r4
 800aa26:	330d      	adds	r3, #13
 800aa28:	5cd3      	ldrb	r3, [r2, r3]
 800aa2a:	4699      	mov	r9, r3
 800aa2c:	e768      	b.n	800a900 <PxMessagingTask+0x8a8>
								temp =cMessage[port - 1][15 + shift];
 800aa2e:	3327      	adds	r3, #39	; 0x27
 800aa30:	436b      	muls	r3, r5
 800aa32:	4a39      	ldr	r2, [pc, #228]	; (800ab18 <PxMessagingTask+0xac0>)
 800aa34:	18d2      	adds	r2, r2, r3
 800aa36:	0023      	movs	r3, r4
 800aa38:	330f      	adds	r3, #15
 800aa3a:	5cd3      	ldrb	r3, [r2, r3]
 800aa3c:	4699      	mov	r9, r3
 800aa3e:	e763      	b.n	800a908 <PxMessagingTask+0x8b0>
 800aa40:	468a      	mov	sl, r1
 800aa42:	0016      	movs	r6, r2
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800aa44:	000b      	movs	r3, r1
 800aa46:	3308      	adds	r3, #8
 800aa48:	2238      	movs	r2, #56	; 0x38
 800aa4a:	436a      	muls	r2, r5
 800aa4c:	4c32      	ldr	r4, [pc, #200]	; (800ab18 <PxMessagingTask+0xac0>)
 800aa4e:	18a4      	adds	r4, r4, r2
 800aa50:	5ce1      	ldrb	r1, [r4, r3]
 800aa52:	20e4      	movs	r0, #228	; 0xe4
 800aa54:	f7fd f98c 	bl	8007d70 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800aa58:	4653      	mov	r3, sl
 800aa5a:	5ce1      	ldrb	r1, [r4, r3]
 800aa5c:	0209      	lsls	r1, r1, #8
 800aa5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa60:	5ce3      	ldrb	r3, [r4, r3]
 800aa62:	18c9      	adds	r1, r1, r3
 800aa64:	b289      	uxth	r1, r1
 800aa66:	20e5      	movs	r0, #229	; 0xe5
 800aa68:	f7fd f982 	bl	8007d70 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800aa6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa6e:	5ce1      	ldrb	r1, [r4, r3]
 800aa70:	0209      	lsls	r1, r1, #8
 800aa72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa74:	5ce3      	ldrb	r3, [r4, r3]
 800aa76:	18c9      	adds	r1, r1, r3
 800aa78:	b289      	uxth	r1, r1
 800aa7a:	20e6      	movs	r0, #230	; 0xe6
 800aa7c:	f7fd f978 	bl	8007d70 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800aa80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa82:	5ce1      	ldrb	r1, [r4, r3]
 800aa84:	0209      	lsls	r1, r1, #8
 800aa86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa88:	5ce3      	ldrb	r3, [r4, r3]
 800aa8a:	18c9      	adds	r1, r1, r3
 800aa8c:	b289      	uxth	r1, r1
 800aa8e:	20e7      	movs	r0, #231	; 0xe7
 800aa90:	f7fd f96e 	bl	8007d70 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800aa94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa96:	5ce1      	ldrb	r1, [r4, r3]
 800aa98:	0209      	lsls	r1, r1, #8
 800aa9a:	5da3      	ldrb	r3, [r4, r6]
 800aa9c:	18c9      	adds	r1, r1, r3
 800aa9e:	b289      	uxth	r1, r1
 800aaa0:	20e8      	movs	r0, #232	; 0xe8
 800aaa2:	f7fd f965 	bl	8007d70 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800aaa6:	4653      	mov	r3, sl
 800aaa8:	3309      	adds	r3, #9
 800aaaa:	5ce1      	ldrb	r1, [r4, r3]
 800aaac:	0209      	lsls	r1, r1, #8
 800aaae:	3301      	adds	r3, #1
 800aab0:	5ce3      	ldrb	r3, [r4, r3]
 800aab2:	18c9      	adds	r1, r1, r3
 800aab4:	b289      	uxth	r1, r1
 800aab6:	20e9      	movs	r0, #233	; 0xe9
 800aab8:	f7fd f95a 	bl	8007d70 <EE_WriteVariable>
								if(numOfParams == 19)
 800aabc:	9b05      	ldr	r3, [sp, #20]
 800aabe:	2b13      	cmp	r3, #19
 800aac0:	d10e      	bne.n	800aae0 <PxMessagingTask+0xa88>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800aac2:	2238      	movs	r2, #56	; 0x38
 800aac4:	436a      	muls	r2, r5
 800aac6:	4b14      	ldr	r3, [pc, #80]	; (800ab18 <PxMessagingTask+0xac0>)
 800aac8:	189b      	adds	r3, r3, r2
 800aaca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aacc:	5c99      	ldrb	r1, [r3, r2]
 800aace:	0209      	lsls	r1, r1, #8
 800aad0:	4652      	mov	r2, sl
 800aad2:	320c      	adds	r2, #12
 800aad4:	5c9b      	ldrb	r3, [r3, r2]
 800aad6:	18c9      	adds	r1, r1, r3
 800aad8:	b289      	uxth	r1, r1
 800aada:	20ea      	movs	r0, #234	; 0xea
 800aadc:	f7fd f948 	bl	8007d70 <EE_WriteVariable>
								if(numOfParams == 21)
 800aae0:	9b05      	ldr	r3, [sp, #20]
 800aae2:	2b15      	cmp	r3, #21
 800aae4:	d10f      	bne.n	800ab06 <PxMessagingTask+0xaae>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800aae6:	4651      	mov	r1, sl
 800aae8:	310d      	adds	r1, #13
 800aaea:	3323      	adds	r3, #35	; 0x23
 800aaec:	436b      	muls	r3, r5
 800aaee:	4a0a      	ldr	r2, [pc, #40]	; (800ab18 <PxMessagingTask+0xac0>)
 800aaf0:	18d2      	adds	r2, r2, r3
 800aaf2:	5c51      	ldrb	r1, [r2, r1]
 800aaf4:	0209      	lsls	r1, r1, #8
 800aaf6:	4653      	mov	r3, sl
 800aaf8:	330e      	adds	r3, #14
 800aafa:	5cd3      	ldrb	r3, [r2, r3]
 800aafc:	18c9      	adds	r1, r1, r3
 800aafe:	b289      	uxth	r1, r1
 800ab00:	20eb      	movs	r0, #235	; 0xeb
 800ab02:	f7fd f935 	bl	8007d70 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	4b0f      	ldr	r3, [pc, #60]	; (800ab48 <PxMessagingTask+0xaf0>)
 800ab0c:	4a0f      	ldr	r2, [pc, #60]	; (800ab4c <PxMessagingTask+0xaf4>)
 800ab0e:	60da      	str	r2, [r3, #12]
 800ab10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800ab14:	46c0      	nop			; (mov r8, r8)
 800ab16:	e7fd      	b.n	800ab14 <PxMessagingTask+0xabc>
 800ab18:	20000d30 	.word	0x20000d30
 800ab1c:	20001578 	.word	0x20001578
 800ab20:	20000a9f 	.word	0x20000a9f
 800ab24:	20006da0 	.word	0x20006da0
 800ab28:	20000f28 	.word	0x20000f28
 800ab2c:	20000ee5 	.word	0x20000ee5
 800ab30:	20000ee6 	.word	0x20000ee6
 800ab34:	200010f8 	.word	0x200010f8
 800ab38:	2000149c 	.word	0x2000149c
 800ab3c:	20007ff0 	.word	0x20007ff0
 800ab40:	deadbeef 	.word	0xdeadbeef
 800ab44:	20000ee4 	.word	0x20000ee4
 800ab48:	e000ed00 	.word	0xe000ed00
 800ab4c:	05fa0004 	.word	0x05fa0004
 800ab50:	20001066 	.word	0x20001066
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800ab54:	00eb      	lsls	r3, r5, #3
 800ab56:	1b5b      	subs	r3, r3, r5
 800ab58:	00da      	lsls	r2, r3, #3
 800ab5a:	4eea      	ldr	r6, [pc, #936]	; (800af04 <PxMessagingTask+0xeac>)
 800ab5c:	18b6      	adds	r6, r6, r2
 800ab5e:	5d33      	ldrb	r3, [r6, r4]
 800ab60:	061b      	lsls	r3, r3, #24
 800ab62:	1c62      	adds	r2, r4, #1
 800ab64:	5cb2      	ldrb	r2, [r6, r2]
 800ab66:	0412      	lsls	r2, r2, #16
 800ab68:	189b      	adds	r3, r3, r2
 800ab6a:	1ca2      	adds	r2, r4, #2
 800ab6c:	5cb2      	ldrb	r2, [r6, r2]
 800ab6e:	0212      	lsls	r2, r2, #8
 800ab70:	189b      	adds	r3, r3, r2
 800ab72:	1ce2      	adds	r2, r4, #3
 800ab74:	5cb2      	ldrb	r2, [r6, r2]
 800ab76:	469a      	mov	sl, r3
 800ab78:	4492      	add	sl, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800ab7a:	1d23      	adds	r3, r4, #4
 800ab7c:	5cf2      	ldrb	r2, [r6, r3]
 800ab7e:	0612      	lsls	r2, r2, #24
 800ab80:	1d63      	adds	r3, r4, #5
 800ab82:	5cf3      	ldrb	r3, [r6, r3]
 800ab84:	041b      	lsls	r3, r3, #16
 800ab86:	18d3      	adds	r3, r2, r3
 800ab88:	1da2      	adds	r2, r4, #6
 800ab8a:	5cb2      	ldrb	r2, [r6, r2]
 800ab8c:	0212      	lsls	r2, r2, #8
 800ab8e:	189b      	adds	r3, r3, r2
 800ab90:	1de2      	adds	r2, r4, #7
 800ab92:	5cb2      	ldrb	r2, [r6, r2]
 800ab94:	469c      	mov	ip, r3
 800ab96:	4494      	add	ip, r2
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800ab98:	0020      	movs	r0, r4
 800ab9a:	3009      	adds	r0, #9
 800ab9c:	0022      	movs	r2, r4
 800ab9e:	320b      	adds	r2, #11
 800aba0:	0023      	movs	r3, r4
 800aba2:	330a      	adds	r3, #10
 800aba4:	0027      	movs	r7, r4
 800aba6:	3708      	adds	r7, #8
 800aba8:	340c      	adds	r4, #12
 800abaa:	5d34      	ldrb	r4, [r6, r4]
 800abac:	5cf3      	ldrb	r3, [r6, r3]
 800abae:	9305      	str	r3, [sp, #20]
 800abb0:	5cb2      	ldrb	r2, [r6, r2]
 800abb2:	49d5      	ldr	r1, [pc, #852]	; (800af08 <PxMessagingTask+0xeb0>)
 800abb4:	7809      	ldrb	r1, [r1, #0]
 800abb6:	5c30      	ldrb	r0, [r6, r0]
 800abb8:	1e63      	subs	r3, r4, #1
 800abba:	419c      	sbcs	r4, r3
 800abbc:	9403      	str	r4, [sp, #12]
 800abbe:	4664      	mov	r4, ip
 800abc0:	9402      	str	r4, [sp, #8]
 800abc2:	4654      	mov	r4, sl
 800abc4:	9401      	str	r4, [sp, #4]
 800abc6:	5df4      	ldrb	r4, [r6, r7]
 800abc8:	9400      	str	r4, [sp, #0]
 800abca:	9b05      	ldr	r3, [sp, #20]
 800abcc:	f7fe ffcc 	bl	8009b68 <StartScastDMAStream>
							break;
 800abd0:	f7ff fa90 	bl	800a0f4 <PxMessagingTask+0x9c>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800abd4:	00ea      	lsls	r2, r5, #3
 800abd6:	1b52      	subs	r2, r2, r5
 800abd8:	00d1      	lsls	r1, r2, #3
 800abda:	4aca      	ldr	r2, [pc, #808]	; (800af04 <PxMessagingTask+0xeac>)
 800abdc:	1852      	adds	r2, r2, r1
 800abde:	5d12      	ldrb	r2, [r2, r4]
 800abe0:	2a00      	cmp	r2, #0
 800abe2:	d000      	beq.n	800abe6 <PxMessagingTask+0xb8e>
 800abe4:	e083      	b.n	800acee <PxMessagingTask+0xc96>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800abe6:	1ca1      	adds	r1, r4, #2
 800abe8:	2338      	movs	r3, #56	; 0x38
 800abea:	436b      	muls	r3, r5
 800abec:	4ac5      	ldr	r2, [pc, #788]	; (800af04 <PxMessagingTask+0xeac>)
 800abee:	18d2      	adds	r2, r2, r3
 800abf0:	5c53      	ldrb	r3, [r2, r1]
 800abf2:	061b      	lsls	r3, r3, #24
 800abf4:	1ce1      	adds	r1, r4, #3
 800abf6:	5c51      	ldrb	r1, [r2, r1]
 800abf8:	0409      	lsls	r1, r1, #16
 800abfa:	185b      	adds	r3, r3, r1
 800abfc:	1d21      	adds	r1, r4, #4
 800abfe:	5c51      	ldrb	r1, [r2, r1]
 800ac00:	0209      	lsls	r1, r1, #8
 800ac02:	185b      	adds	r3, r3, r1
 800ac04:	1d61      	adds	r1, r4, #5
 800ac06:	5c51      	ldrb	r1, [r2, r1]
 800ac08:	185b      	adds	r3, r3, r1
								switch(cMessage[port - 1][1 + shift]) // requested format
 800ac0a:	3401      	adds	r4, #1
 800ac0c:	5d12      	ldrb	r2, [r2, r4]
 800ac0e:	3a01      	subs	r2, #1
 800ac10:	b2d1      	uxtb	r1, r2
 800ac12:	2907      	cmp	r1, #7
 800ac14:	d901      	bls.n	800ac1a <PxMessagingTask+0xbc2>
 800ac16:	f7ff fa6d 	bl	800a0f4 <PxMessagingTask+0x9c>
 800ac1a:	b2d2      	uxtb	r2, r2
 800ac1c:	0092      	lsls	r2, r2, #2
 800ac1e:	49bb      	ldr	r1, [pc, #748]	; (800af0c <PxMessagingTask+0xeb4>)
 800ac20:	588a      	ldr	r2, [r1, r2]
 800ac22:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800ac24:	781a      	ldrb	r2, [r3, #0]
 800ac26:	4bba      	ldr	r3, [pc, #744]	; (800af10 <PxMessagingTask+0xeb8>)
 800ac28:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	211f      	movs	r1, #31
 800ac2e:	9804      	ldr	r0, [sp, #16]
 800ac30:	f7fe ff74 	bl	8009b1c <SendMessageToModule>
										break;
 800ac34:	f7ff fa5e 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =*(__IO int8_t* )temp32;
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	4bb5      	ldr	r3, [pc, #724]	; (800af10 <PxMessagingTask+0xeb8>)
 800ac3c:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800ac3e:	2201      	movs	r2, #1
 800ac40:	211f      	movs	r1, #31
 800ac42:	9804      	ldr	r0, [sp, #16]
 800ac44:	f7fe ff6a 	bl	8009b1c <SendMessageToModule>
										break;
 800ac48:	f7ff fa54 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ac4c:	8819      	ldrh	r1, [r3, #0]
 800ac4e:	4ab0      	ldr	r2, [pc, #704]	; (800af10 <PxMessagingTask+0xeb8>)
 800ac50:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	0a1b      	lsrs	r3, r3, #8
 800ac56:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ac58:	2202      	movs	r2, #2
 800ac5a:	211f      	movs	r1, #31
 800ac5c:	9804      	ldr	r0, [sp, #16]
 800ac5e:	f7fe ff5d 	bl	8009b1c <SendMessageToModule>
										break;
 800ac62:	f7ff fa47 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ac66:	8819      	ldrh	r1, [r3, #0]
 800ac68:	4aa9      	ldr	r2, [pc, #676]	; (800af10 <PxMessagingTask+0xeb8>)
 800ac6a:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	b21b      	sxth	r3, r3
 800ac70:	121b      	asrs	r3, r3, #8
 800ac72:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ac74:	2202      	movs	r2, #2
 800ac76:	211f      	movs	r1, #31
 800ac78:	9804      	ldr	r0, [sp, #16]
 800ac7a:	f7fe ff4f 	bl	8009b1c <SendMessageToModule>
										break;
 800ac7e:	f7ff fa39 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ac82:	6819      	ldr	r1, [r3, #0]
 800ac84:	4aa2      	ldr	r2, [pc, #648]	; (800af10 <PxMessagingTask+0xeb8>)
 800ac86:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ac88:	6819      	ldr	r1, [r3, #0]
 800ac8a:	0a09      	lsrs	r1, r1, #8
 800ac8c:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ac8e:	6819      	ldr	r1, [r3, #0]
 800ac90:	0c09      	lsrs	r1, r1, #16
 800ac92:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	0e1b      	lsrs	r3, r3, #24
 800ac98:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ac9a:	2204      	movs	r2, #4
 800ac9c:	211f      	movs	r1, #31
 800ac9e:	9804      	ldr	r0, [sp, #16]
 800aca0:	f7fe ff3c 	bl	8009b1c <SendMessageToModule>
										break;
 800aca4:	f7ff fa26 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800aca8:	6819      	ldr	r1, [r3, #0]
 800acaa:	4a99      	ldr	r2, [pc, #612]	; (800af10 <PxMessagingTask+0xeb8>)
 800acac:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800acae:	6819      	ldr	r1, [r3, #0]
 800acb0:	1209      	asrs	r1, r1, #8
 800acb2:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800acb4:	6819      	ldr	r1, [r3, #0]
 800acb6:	1409      	asrs	r1, r1, #16
 800acb8:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	0e1b      	lsrs	r3, r3, #24
 800acbe:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800acc0:	2204      	movs	r2, #4
 800acc2:	211f      	movs	r1, #31
 800acc4:	9804      	ldr	r0, [sp, #16]
 800acc6:	f7fe ff29 	bl	8009b1c <SendMessageToModule>
										break;
 800acca:	f7ff fa13 	bl	800a0f4 <PxMessagingTask+0x9c>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800acce:	7819      	ldrb	r1, [r3, #0]
 800acd0:	4a8f      	ldr	r2, [pc, #572]	; (800af10 <PxMessagingTask+0xeb8>)
 800acd2:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800acd4:	7859      	ldrb	r1, [r3, #1]
 800acd6:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800acd8:	7899      	ldrb	r1, [r3, #2]
 800acda:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800acdc:	78db      	ldrb	r3, [r3, #3]
 800acde:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ace0:	2208      	movs	r2, #8
 800ace2:	211f      	movs	r1, #31
 800ace4:	9804      	ldr	r0, [sp, #16]
 800ace6:	f7fe ff19 	bl	8009b1c <SendMessageToModule>
										break; // You cannot bitwise floats
 800acea:	f7ff fa03 	bl	800a0f4 <PxMessagingTask+0x9c>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800acee:	2a02      	cmp	r2, #2
 800acf0:	d000      	beq.n	800acf4 <PxMessagingTask+0xc9c>
 800acf2:	e08e      	b.n	800ae12 <PxMessagingTask+0xdba>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800acf4:	3b01      	subs	r3, #1
 800acf6:	4883      	ldr	r0, [pc, #524]	; (800af04 <PxMessagingTask+0xeac>)
 800acf8:	3236      	adds	r2, #54	; 0x36
 800acfa:	436a      	muls	r2, r5
 800acfc:	1881      	adds	r1, r0, r2
 800acfe:	2600      	movs	r6, #0
 800ad00:	54ce      	strb	r6, [r1, r3]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800ad02:	3401      	adds	r4, #1
 800ad04:	1912      	adds	r2, r2, r4
 800ad06:	1810      	adds	r0, r2, r0
 800ad08:	f7f8 ffae 	bl	8003c68 <IsModuleParameter>
 800ad0c:	4681      	mov	r9, r0
								if(temp == 0){ // Parameter does not exist
 800ad0e:	42b0      	cmp	r0, r6
 800ad10:	d106      	bne.n	800ad20 <PxMessagingTask+0xcc8>
									SendMessageToModule(src,
 800ad12:	2201      	movs	r2, #1
 800ad14:	211f      	movs	r1, #31
 800ad16:	9804      	ldr	r0, [sp, #16]
 800ad18:	f7fe ff00 	bl	8009b1c <SendMessageToModule>
 800ad1c:	f7ff f9ea 	bl	800a0f4 <PxMessagingTask+0x9c>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800ad20:	3801      	subs	r0, #1
 800ad22:	4a7c      	ldr	r2, [pc, #496]	; (800af14 <PxMessagingTask+0xebc>)
 800ad24:	210c      	movs	r1, #12
 800ad26:	4341      	muls	r1, r0
 800ad28:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800ad2a:	1852      	adds	r2, r2, r1
 800ad2c:	7912      	ldrb	r2, [r2, #4]
 800ad2e:	4978      	ldr	r1, [pc, #480]	; (800af10 <PxMessagingTask+0xeb8>)
 800ad30:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800ad32:	3a01      	subs	r2, #1
 800ad34:	b2d1      	uxtb	r1, r2
 800ad36:	2907      	cmp	r1, #7
 800ad38:	d901      	bls.n	800ad3e <PxMessagingTask+0xce6>
 800ad3a:	f7ff f9db 	bl	800a0f4 <PxMessagingTask+0x9c>
 800ad3e:	b2d2      	uxtb	r2, r2
 800ad40:	0092      	lsls	r2, r2, #2
 800ad42:	4975      	ldr	r1, [pc, #468]	; (800af18 <PxMessagingTask+0xec0>)
 800ad44:	588a      	ldr	r2, [r1, r2]
 800ad46:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800ad48:	781a      	ldrb	r2, [r3, #0]
 800ad4a:	4b71      	ldr	r3, [pc, #452]	; (800af10 <PxMessagingTask+0xeb8>)
 800ad4c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ad4e:	2202      	movs	r2, #2
 800ad50:	211f      	movs	r1, #31
 800ad52:	9804      	ldr	r0, [sp, #16]
 800ad54:	f7fe fee2 	bl	8009b1c <SendMessageToModule>
											break;
 800ad58:	f7ff f9cc 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =*(__IO int8_t* )temp32;
 800ad5c:	781a      	ldrb	r2, [r3, #0]
 800ad5e:	4b6c      	ldr	r3, [pc, #432]	; (800af10 <PxMessagingTask+0xeb8>)
 800ad60:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ad62:	2202      	movs	r2, #2
 800ad64:	211f      	movs	r1, #31
 800ad66:	9804      	ldr	r0, [sp, #16]
 800ad68:	f7fe fed8 	bl	8009b1c <SendMessageToModule>
											break;
 800ad6c:	f7ff f9c2 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ad70:	8819      	ldrh	r1, [r3, #0]
 800ad72:	4a67      	ldr	r2, [pc, #412]	; (800af10 <PxMessagingTask+0xeb8>)
 800ad74:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ad76:	881b      	ldrh	r3, [r3, #0]
 800ad78:	0a1b      	lsrs	r3, r3, #8
 800ad7a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ad7c:	2203      	movs	r2, #3
 800ad7e:	211f      	movs	r1, #31
 800ad80:	9804      	ldr	r0, [sp, #16]
 800ad82:	f7fe fecb 	bl	8009b1c <SendMessageToModule>
											break;
 800ad86:	f7ff f9b5 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ad8a:	8819      	ldrh	r1, [r3, #0]
 800ad8c:	4a60      	ldr	r2, [pc, #384]	; (800af10 <PxMessagingTask+0xeb8>)
 800ad8e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	b21b      	sxth	r3, r3
 800ad94:	121b      	asrs	r3, r3, #8
 800ad96:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ad98:	2203      	movs	r2, #3
 800ad9a:	211f      	movs	r1, #31
 800ad9c:	9804      	ldr	r0, [sp, #16]
 800ad9e:	f7fe febd 	bl	8009b1c <SendMessageToModule>
											break;
 800ada2:	f7ff f9a7 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ada6:	6819      	ldr	r1, [r3, #0]
 800ada8:	4a59      	ldr	r2, [pc, #356]	; (800af10 <PxMessagingTask+0xeb8>)
 800adaa:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800adac:	6819      	ldr	r1, [r3, #0]
 800adae:	0a09      	lsrs	r1, r1, #8
 800adb0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800adb2:	6819      	ldr	r1, [r3, #0]
 800adb4:	0c09      	lsrs	r1, r1, #16
 800adb6:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	0e1b      	lsrs	r3, r3, #24
 800adbc:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800adbe:	2205      	movs	r2, #5
 800adc0:	211f      	movs	r1, #31
 800adc2:	9804      	ldr	r0, [sp, #16]
 800adc4:	f7fe feaa 	bl	8009b1c <SendMessageToModule>
											break;
 800adc8:	f7ff f994 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800adcc:	6819      	ldr	r1, [r3, #0]
 800adce:	4a50      	ldr	r2, [pc, #320]	; (800af10 <PxMessagingTask+0xeb8>)
 800add0:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800add2:	6819      	ldr	r1, [r3, #0]
 800add4:	1209      	asrs	r1, r1, #8
 800add6:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800add8:	6819      	ldr	r1, [r3, #0]
 800adda:	1409      	asrs	r1, r1, #16
 800addc:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	0e1b      	lsrs	r3, r3, #24
 800ade2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ade4:	2205      	movs	r2, #5
 800ade6:	211f      	movs	r1, #31
 800ade8:	9804      	ldr	r0, [sp, #16]
 800adea:	f7fe fe97 	bl	8009b1c <SendMessageToModule>
											break;
 800adee:	f7ff f981 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800adf2:	7819      	ldrb	r1, [r3, #0]
 800adf4:	4a46      	ldr	r2, [pc, #280]	; (800af10 <PxMessagingTask+0xeb8>)
 800adf6:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800adf8:	7859      	ldrb	r1, [r3, #1]
 800adfa:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800adfc:	7899      	ldrb	r1, [r3, #2]
 800adfe:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800ae00:	78db      	ldrb	r3, [r3, #3]
 800ae02:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ae04:	2209      	movs	r2, #9
 800ae06:	211f      	movs	r1, #31
 800ae08:	9804      	ldr	r0, [sp, #16]
 800ae0a:	f7fe fe87 	bl	8009b1c <SendMessageToModule>
											break;
 800ae0e:	f7ff f971 	bl	800a0f4 <PxMessagingTask+0x9c>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800ae12:	2a02      	cmp	r2, #2
 800ae14:	d801      	bhi.n	800ae1a <PxMessagingTask+0xdc2>
 800ae16:	f7ff f96d 	bl	800a0f4 <PxMessagingTask+0x9c>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800ae1a:	3a04      	subs	r2, #4
 800ae1c:	0092      	lsls	r2, r2, #2
 800ae1e:	4b3f      	ldr	r3, [pc, #252]	; (800af1c <PxMessagingTask+0xec4>)
 800ae20:	58d1      	ldr	r1, [r2, r3]
 800ae22:	220f      	movs	r2, #15
 800ae24:	400a      	ands	r2, r1
 800ae26:	4b3a      	ldr	r3, [pc, #232]	; (800af10 <PxMessagingTask+0xeb8>)
 800ae28:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800ae2a:	d106      	bne.n	800ae3a <PxMessagingTask+0xde2>
									SendMessageToModule(src,
 800ae2c:	3201      	adds	r2, #1
 800ae2e:	211f      	movs	r1, #31
 800ae30:	9804      	ldr	r0, [sp, #16]
 800ae32:	f7fe fe73 	bl	8009b1c <SendMessageToModule>
 800ae36:	f7ff f95d 	bl	800a0f4 <PxMessagingTask+0x9c>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ae3a:	0c09      	lsrs	r1, r1, #16
 800ae3c:	2380      	movs	r3, #128	; 0x80
 800ae3e:	059b      	lsls	r3, r3, #22
 800ae40:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800ae42:	3a01      	subs	r2, #1
 800ae44:	b2d0      	uxtb	r0, r2
 800ae46:	2807      	cmp	r0, #7
 800ae48:	d901      	bls.n	800ae4e <PxMessagingTask+0xdf6>
 800ae4a:	f7ff f953 	bl	800a0f4 <PxMessagingTask+0x9c>
 800ae4e:	b2d2      	uxtb	r2, r2
 800ae50:	0092      	lsls	r2, r2, #2
 800ae52:	4833      	ldr	r0, [pc, #204]	; (800af20 <PxMessagingTask+0xec8>)
 800ae54:	5882      	ldr	r2, [r0, r2]
 800ae56:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800ae58:	781a      	ldrb	r2, [r3, #0]
 800ae5a:	4b2d      	ldr	r3, [pc, #180]	; (800af10 <PxMessagingTask+0xeb8>)
 800ae5c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ae5e:	2202      	movs	r2, #2
 800ae60:	211f      	movs	r1, #31
 800ae62:	9804      	ldr	r0, [sp, #16]
 800ae64:	f7fe fe5a 	bl	8009b1c <SendMessageToModule>
											break;
 800ae68:	f7ff f944 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =*(__IO int8_t* )temp32;
 800ae6c:	781a      	ldrb	r2, [r3, #0]
 800ae6e:	4b28      	ldr	r3, [pc, #160]	; (800af10 <PxMessagingTask+0xeb8>)
 800ae70:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ae72:	2202      	movs	r2, #2
 800ae74:	211f      	movs	r1, #31
 800ae76:	9804      	ldr	r0, [sp, #16]
 800ae78:	f7fe fe50 	bl	8009b1c <SendMessageToModule>
											break;
 800ae7c:	f7ff f93a 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ae80:	8819      	ldrh	r1, [r3, #0]
 800ae82:	4a23      	ldr	r2, [pc, #140]	; (800af10 <PxMessagingTask+0xeb8>)
 800ae84:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	0a1b      	lsrs	r3, r3, #8
 800ae8a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ae8c:	2203      	movs	r2, #3
 800ae8e:	211f      	movs	r1, #31
 800ae90:	9804      	ldr	r0, [sp, #16]
 800ae92:	f7fe fe43 	bl	8009b1c <SendMessageToModule>
											break;
 800ae96:	f7ff f92d 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ae9a:	8819      	ldrh	r1, [r3, #0]
 800ae9c:	4a1c      	ldr	r2, [pc, #112]	; (800af10 <PxMessagingTask+0xeb8>)
 800ae9e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	b21b      	sxth	r3, r3
 800aea4:	121b      	asrs	r3, r3, #8
 800aea6:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800aea8:	2203      	movs	r2, #3
 800aeaa:	211f      	movs	r1, #31
 800aeac:	9804      	ldr	r0, [sp, #16]
 800aeae:	f7fe fe35 	bl	8009b1c <SendMessageToModule>
											break;
 800aeb2:	f7ff f91f 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800aeb6:	6819      	ldr	r1, [r3, #0]
 800aeb8:	4a15      	ldr	r2, [pc, #84]	; (800af10 <PxMessagingTask+0xeb8>)
 800aeba:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800aebc:	6819      	ldr	r1, [r3, #0]
 800aebe:	0a09      	lsrs	r1, r1, #8
 800aec0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800aec2:	6819      	ldr	r1, [r3, #0]
 800aec4:	0c09      	lsrs	r1, r1, #16
 800aec6:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	0e1b      	lsrs	r3, r3, #24
 800aecc:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800aece:	2205      	movs	r2, #5
 800aed0:	211f      	movs	r1, #31
 800aed2:	9804      	ldr	r0, [sp, #16]
 800aed4:	f7fe fe22 	bl	8009b1c <SendMessageToModule>
											break;
 800aed8:	f7ff f90c 	bl	800a0f4 <PxMessagingTask+0x9c>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800aedc:	6819      	ldr	r1, [r3, #0]
 800aede:	4a0c      	ldr	r2, [pc, #48]	; (800af10 <PxMessagingTask+0xeb8>)
 800aee0:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800aee2:	6819      	ldr	r1, [r3, #0]
 800aee4:	1209      	asrs	r1, r1, #8
 800aee6:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800aee8:	6819      	ldr	r1, [r3, #0]
 800aeea:	1409      	asrs	r1, r1, #16
 800aeec:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	0e1b      	lsrs	r3, r3, #24
 800aef2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800aef4:	2205      	movs	r2, #5
 800aef6:	211f      	movs	r1, #31
 800aef8:	9804      	ldr	r0, [sp, #16]
 800aefa:	f7fe fe0f 	bl	8009b1c <SendMessageToModule>
											break;
 800aefe:	f7ff f8f9 	bl	800a0f4 <PxMessagingTask+0x9c>
 800af02:	46c0      	nop			; (mov r8, r8)
 800af04:	20000d30 	.word	0x20000d30
 800af08:	20001066 	.word	0x20001066
 800af0c:	0801c5f8 	.word	0x0801c5f8
 800af10:	20000f28 	.word	0x20000f28
 800af14:	20000090 	.word	0x20000090
 800af18:	0801c618 	.word	0x0801c618
 800af1c:	20006d28 	.word	0x20006d28
 800af20:	0801c638 	.word	0x0801c638
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800af24:	781a      	ldrb	r2, [r3, #0]
 800af26:	4bd7      	ldr	r3, [pc, #860]	; (800b284 <PxMessagingTask+0x122c>)
 800af28:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800af2a:	4ad7      	ldr	r2, [pc, #860]	; (800b288 <PxMessagingTask+0x1230>)
 800af2c:	188a      	adds	r2, r1, r2
 800af2e:	7812      	ldrb	r2, [r2, #0]
 800af30:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800af32:	4ad6      	ldr	r2, [pc, #856]	; (800b28c <PxMessagingTask+0x1234>)
 800af34:	188a      	adds	r2, r1, r2
 800af36:	7812      	ldrb	r2, [r2, #0]
 800af38:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800af3a:	4ad5      	ldr	r2, [pc, #852]	; (800b290 <PxMessagingTask+0x1238>)
 800af3c:	4694      	mov	ip, r2
 800af3e:	4461      	add	r1, ip
 800af40:	780a      	ldrb	r2, [r1, #0]
 800af42:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800af44:	2209      	movs	r2, #9
 800af46:	211f      	movs	r1, #31
 800af48:	9804      	ldr	r0, [sp, #16]
 800af4a:	f7fe fde7 	bl	8009b1c <SendMessageToModule>
											break;
 800af4e:	f7ff f8d1 	bl	800a0f4 <PxMessagingTask+0x9c>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800af52:	4bd0      	ldr	r3, [pc, #832]	; (800b294 <PxMessagingTask+0x123c>)
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	2002      	movs	r0, #2
 800af5a:	4240      	negs	r0, r0
 800af5c:	17c1      	asrs	r1, r0, #31
 800af5e:	1880      	adds	r0, r0, r2
 800af60:	4159      	adcs	r1, r3
 800af62:	2900      	cmp	r1, #0
 800af64:	d014      	beq.n	800af90 <PxMessagingTask+0xf38>
							else if(remoteBuffer == REMOTE_MEMORY_ADD) // We requested a memory location
 800af66:	0011      	movs	r1, r2
 800af68:	4319      	orrs	r1, r3
 800af6a:	d125      	bne.n	800afb8 <PxMessagingTask+0xf60>
								switch(remoteBuffer) // Requested format
 800af6c:	2601      	movs	r6, #1
 800af6e:	4276      	negs	r6, r6
 800af70:	17f7      	asrs	r7, r6, #31
 800af72:	18b6      	adds	r6, r6, r2
 800af74:	415f      	adcs	r7, r3
 800af76:	2207      	movs	r2, #7
 800af78:	2300      	movs	r3, #0
 800af7a:	0030      	movs	r0, r6
 800af7c:	0039      	movs	r1, r7
 800af7e:	f7f5 fad5 	bl	800052c <__aeabi_ulcmp>
 800af82:	3001      	adds	r0, #1
 800af84:	2801      	cmp	r0, #1
 800af86:	d817      	bhi.n	800afb8 <PxMessagingTask+0xf60>
 800af88:	00b6      	lsls	r6, r6, #2
 800af8a:	4bc3      	ldr	r3, [pc, #780]	; (800b298 <PxMessagingTask+0x1240>)
 800af8c:	599b      	ldr	r3, [r3, r6]
 800af8e:	469f      	mov	pc, r3
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800af90:	2900      	cmp	r1, #0
 800af92:	d101      	bne.n	800af98 <PxMessagingTask+0xf40>
 800af94:	2801      	cmp	r0, #1
 800af96:	d8e6      	bhi.n	800af66 <PxMessagingTask+0xf0e>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800af98:	2238      	movs	r2, #56	; 0x38
 800af9a:	436a      	muls	r2, r5
 800af9c:	4bbf      	ldr	r3, [pc, #764]	; (800b29c <PxMessagingTask+0x1244>)
 800af9e:	189b      	adds	r3, r3, r2
 800afa0:	5d1b      	ldrb	r3, [r3, r4]
 800afa2:	4abf      	ldr	r2, [pc, #764]	; (800b2a0 <PxMessagingTask+0x1248>)
 800afa4:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800afa6:	2b08      	cmp	r3, #8
 800afa8:	d806      	bhi.n	800afb8 <PxMessagingTask+0xf60>
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4abd      	ldr	r2, [pc, #756]	; (800b2a4 <PxMessagingTask+0x124c>)
 800afae:	58d3      	ldr	r3, [r2, r3]
 800afb0:	469f      	mov	pc, r3
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800afb2:	4bbd      	ldr	r3, [pc, #756]	; (800b2a8 <PxMessagingTask+0x1250>)
 800afb4:	2210      	movs	r2, #16
 800afb6:	701a      	strb	r2, [r3, #0]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800afb8:	4bbb      	ldr	r3, [pc, #748]	; (800b2a8 <PxMessagingTask+0x1250>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b10      	cmp	r3, #16
 800afbe:	d101      	bne.n	800afc4 <PxMessagingTask+0xf6c>
 800afc0:	f7ff f898 	bl	800a0f4 <PxMessagingTask+0x9c>
								responseStatus =BOS_OK;
 800afc4:	4bb8      	ldr	r3, [pc, #736]	; (800b2a8 <PxMessagingTask+0x1250>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	f7ff f893 	bl	800a0f4 <PxMessagingTask+0x9c>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800afce:	3401      	adds	r4, #1
 800afd0:	2238      	movs	r2, #56	; 0x38
 800afd2:	436a      	muls	r2, r5
 800afd4:	4bb1      	ldr	r3, [pc, #708]	; (800b29c <PxMessagingTask+0x1244>)
 800afd6:	189b      	adds	r3, r3, r2
 800afd8:	5d1a      	ldrb	r2, [r3, r4]
 800afda:	4bae      	ldr	r3, [pc, #696]	; (800b294 <PxMessagingTask+0x123c>)
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	2200      	movs	r2, #0
 800afe0:	605a      	str	r2, [r3, #4]
										break;
 800afe2:	e7e9      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800afe4:	3401      	adds	r4, #1
 800afe6:	2238      	movs	r2, #56	; 0x38
 800afe8:	436a      	muls	r2, r5
 800afea:	4bac      	ldr	r3, [pc, #688]	; (800b29c <PxMessagingTask+0x1244>)
 800afec:	189b      	adds	r3, r3, r2
 800afee:	571a      	ldrsb	r2, [r3, r4]
 800aff0:	17d1      	asrs	r1, r2, #31
 800aff2:	4ba8      	ldr	r3, [pc, #672]	; (800b294 <PxMessagingTask+0x123c>)
 800aff4:	601a      	str	r2, [r3, #0]
 800aff6:	6059      	str	r1, [r3, #4]
										break;
 800aff8:	e7de      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800affa:	1c61      	adds	r1, r4, #1
 800affc:	2338      	movs	r3, #56	; 0x38
 800affe:	436b      	muls	r3, r5
 800b000:	4aa6      	ldr	r2, [pc, #664]	; (800b29c <PxMessagingTask+0x1244>)
 800b002:	18d2      	adds	r2, r2, r3
 800b004:	5c53      	ldrb	r3, [r2, r1]
 800b006:	3402      	adds	r4, #2
 800b008:	5d12      	ldrb	r2, [r2, r4]
 800b00a:	0212      	lsls	r2, r2, #8
 800b00c:	189b      	adds	r3, r3, r2
 800b00e:	17d9      	asrs	r1, r3, #31
 800b010:	4aa0      	ldr	r2, [pc, #640]	; (800b294 <PxMessagingTask+0x123c>)
 800b012:	6013      	str	r3, [r2, #0]
 800b014:	6051      	str	r1, [r2, #4]
										break;
 800b016:	e7cf      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b018:	1c61      	adds	r1, r4, #1
 800b01a:	2338      	movs	r3, #56	; 0x38
 800b01c:	436b      	muls	r3, r5
 800b01e:	4a9f      	ldr	r2, [pc, #636]	; (800b29c <PxMessagingTask+0x1244>)
 800b020:	18d2      	adds	r2, r2, r3
 800b022:	5c53      	ldrb	r3, [r2, r1]
 800b024:	3402      	adds	r4, #2
 800b026:	5d12      	ldrb	r2, [r2, r4]
 800b028:	0212      	lsls	r2, r2, #8
 800b02a:	189b      	adds	r3, r3, r2
 800b02c:	17d9      	asrs	r1, r3, #31
 800b02e:	4a99      	ldr	r2, [pc, #612]	; (800b294 <PxMessagingTask+0x123c>)
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	6051      	str	r1, [r2, #4]
										break;
 800b034:	e7c0      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b036:	1c61      	adds	r1, r4, #1
 800b038:	2338      	movs	r3, #56	; 0x38
 800b03a:	436b      	muls	r3, r5
 800b03c:	4a97      	ldr	r2, [pc, #604]	; (800b29c <PxMessagingTask+0x1244>)
 800b03e:	18d2      	adds	r2, r2, r3
 800b040:	5c53      	ldrb	r3, [r2, r1]
 800b042:	1ca1      	adds	r1, r4, #2
 800b044:	5c51      	ldrb	r1, [r2, r1]
 800b046:	0209      	lsls	r1, r1, #8
 800b048:	185b      	adds	r3, r3, r1
 800b04a:	1ce1      	adds	r1, r4, #3
 800b04c:	5c51      	ldrb	r1, [r2, r1]
 800b04e:	0409      	lsls	r1, r1, #16
 800b050:	185b      	adds	r3, r3, r1
 800b052:	3404      	adds	r4, #4
 800b054:	5d12      	ldrb	r2, [r2, r4]
 800b056:	0612      	lsls	r2, r2, #24
 800b058:	189b      	adds	r3, r3, r2
 800b05a:	4a8e      	ldr	r2, [pc, #568]	; (800b294 <PxMessagingTask+0x123c>)
 800b05c:	6013      	str	r3, [r2, #0]
 800b05e:	2300      	movs	r3, #0
 800b060:	6053      	str	r3, [r2, #4]
										break;
 800b062:	e7a9      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b064:	1c61      	adds	r1, r4, #1
 800b066:	2338      	movs	r3, #56	; 0x38
 800b068:	436b      	muls	r3, r5
 800b06a:	4a8c      	ldr	r2, [pc, #560]	; (800b29c <PxMessagingTask+0x1244>)
 800b06c:	18d2      	adds	r2, r2, r3
 800b06e:	5c53      	ldrb	r3, [r2, r1]
 800b070:	1ca1      	adds	r1, r4, #2
 800b072:	5c51      	ldrb	r1, [r2, r1]
 800b074:	0209      	lsls	r1, r1, #8
 800b076:	185b      	adds	r3, r3, r1
 800b078:	1ce1      	adds	r1, r4, #3
 800b07a:	5c51      	ldrb	r1, [r2, r1]
 800b07c:	0409      	lsls	r1, r1, #16
 800b07e:	185b      	adds	r3, r3, r1
 800b080:	3404      	adds	r4, #4
 800b082:	5d12      	ldrb	r2, [r2, r4]
 800b084:	0612      	lsls	r2, r2, #24
 800b086:	189b      	adds	r3, r3, r2
 800b088:	17d9      	asrs	r1, r3, #31
 800b08a:	4a82      	ldr	r2, [pc, #520]	; (800b294 <PxMessagingTask+0x123c>)
 800b08c:	6013      	str	r3, [r2, #0]
 800b08e:	6051      	str	r1, [r2, #4]
										break;
 800b090:	e792      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b092:	1c61      	adds	r1, r4, #1
 800b094:	2338      	movs	r3, #56	; 0x38
 800b096:	436b      	muls	r3, r5
 800b098:	4a80      	ldr	r2, [pc, #512]	; (800b29c <PxMessagingTask+0x1244>)
 800b09a:	18d2      	adds	r2, r2, r3
 800b09c:	5c53      	ldrb	r3, [r2, r1]
 800b09e:	1ca1      	adds	r1, r4, #2
 800b0a0:	5c51      	ldrb	r1, [r2, r1]
 800b0a2:	0209      	lsls	r1, r1, #8
 800b0a4:	185b      	adds	r3, r3, r1
 800b0a6:	1ce1      	adds	r1, r4, #3
 800b0a8:	5c51      	ldrb	r1, [r2, r1]
 800b0aa:	0409      	lsls	r1, r1, #16
 800b0ac:	185b      	adds	r3, r3, r1
 800b0ae:	3404      	adds	r4, #4
 800b0b0:	5d12      	ldrb	r2, [r2, r4]
 800b0b2:	0612      	lsls	r2, r2, #24
 800b0b4:	189b      	adds	r3, r3, r2
 800b0b6:	4a77      	ldr	r2, [pc, #476]	; (800b294 <PxMessagingTask+0x123c>)
 800b0b8:	6013      	str	r3, [r2, #0]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	6053      	str	r3, [r2, #4]
										break;
 800b0be:	e77b      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =cMessage[port - 1][shift];
 800b0c0:	2238      	movs	r2, #56	; 0x38
 800b0c2:	436a      	muls	r2, r5
 800b0c4:	4b75      	ldr	r3, [pc, #468]	; (800b29c <PxMessagingTask+0x1244>)
 800b0c6:	189b      	adds	r3, r3, r2
 800b0c8:	5d1a      	ldrb	r2, [r3, r4]
 800b0ca:	4b72      	ldr	r3, [pc, #456]	; (800b294 <PxMessagingTask+0x123c>)
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	605a      	str	r2, [r3, #4]
										break;
 800b0d2:	e771      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =(int8_t )cMessage[port - 1][shift];
 800b0d4:	2238      	movs	r2, #56	; 0x38
 800b0d6:	436a      	muls	r2, r5
 800b0d8:	4b70      	ldr	r3, [pc, #448]	; (800b29c <PxMessagingTask+0x1244>)
 800b0da:	189b      	adds	r3, r3, r2
 800b0dc:	571a      	ldrsb	r2, [r3, r4]
 800b0de:	17d1      	asrs	r1, r2, #31
 800b0e0:	4b6c      	ldr	r3, [pc, #432]	; (800b294 <PxMessagingTask+0x123c>)
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	6059      	str	r1, [r3, #4]
										break;
 800b0e6:	e767      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint16_t )cMessage[port - 1][shift] << 0) + ((uint16_t )cMessage[port - 1][1 + shift] << 8);
 800b0e8:	2338      	movs	r3, #56	; 0x38
 800b0ea:	436b      	muls	r3, r5
 800b0ec:	4a6b      	ldr	r2, [pc, #428]	; (800b29c <PxMessagingTask+0x1244>)
 800b0ee:	18d2      	adds	r2, r2, r3
 800b0f0:	5d13      	ldrb	r3, [r2, r4]
 800b0f2:	3401      	adds	r4, #1
 800b0f4:	5d12      	ldrb	r2, [r2, r4]
 800b0f6:	0212      	lsls	r2, r2, #8
 800b0f8:	189b      	adds	r3, r3, r2
 800b0fa:	17d9      	asrs	r1, r3, #31
 800b0fc:	4a65      	ldr	r2, [pc, #404]	; (800b294 <PxMessagingTask+0x123c>)
 800b0fe:	6013      	str	r3, [r2, #0]
 800b100:	6051      	str	r1, [r2, #4]
										break;
 800b102:	e759      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((int16_t )cMessage[port - 1][shift] << 0) + ((int16_t )cMessage[port - 1][1 + shift] << 8);
 800b104:	2338      	movs	r3, #56	; 0x38
 800b106:	436b      	muls	r3, r5
 800b108:	4a64      	ldr	r2, [pc, #400]	; (800b29c <PxMessagingTask+0x1244>)
 800b10a:	18d2      	adds	r2, r2, r3
 800b10c:	5d13      	ldrb	r3, [r2, r4]
 800b10e:	3401      	adds	r4, #1
 800b110:	5d12      	ldrb	r2, [r2, r4]
 800b112:	0212      	lsls	r2, r2, #8
 800b114:	189b      	adds	r3, r3, r2
 800b116:	17d9      	asrs	r1, r3, #31
 800b118:	4a5e      	ldr	r2, [pc, #376]	; (800b294 <PxMessagingTask+0x123c>)
 800b11a:	6013      	str	r3, [r2, #0]
 800b11c:	6051      	str	r1, [r2, #4]
										break;
 800b11e:	e74b      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 800b120:	2338      	movs	r3, #56	; 0x38
 800b122:	436b      	muls	r3, r5
 800b124:	4a5d      	ldr	r2, [pc, #372]	; (800b29c <PxMessagingTask+0x1244>)
 800b126:	18d2      	adds	r2, r2, r3
 800b128:	5d13      	ldrb	r3, [r2, r4]
 800b12a:	1c61      	adds	r1, r4, #1
 800b12c:	5c51      	ldrb	r1, [r2, r1]
 800b12e:	0209      	lsls	r1, r1, #8
 800b130:	185b      	adds	r3, r3, r1
 800b132:	1ca1      	adds	r1, r4, #2
 800b134:	5c51      	ldrb	r1, [r2, r1]
 800b136:	0409      	lsls	r1, r1, #16
 800b138:	185b      	adds	r3, r3, r1
 800b13a:	3403      	adds	r4, #3
 800b13c:	5d12      	ldrb	r2, [r2, r4]
 800b13e:	0612      	lsls	r2, r2, #24
 800b140:	189b      	adds	r3, r3, r2
 800b142:	4a54      	ldr	r2, [pc, #336]	; (800b294 <PxMessagingTask+0x123c>)
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	2300      	movs	r3, #0
 800b148:	6053      	str	r3, [r2, #4]
										break;
 800b14a:	e735      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((int32_t )cMessage[port - 1][shift] << 0) + ((int32_t )cMessage[port - 1][1 + shift] << 8) + ((int32_t )cMessage[port - 1][2 + shift] << 16) + ((int32_t )cMessage[port - 1][3 + shift] << 24);
 800b14c:	2338      	movs	r3, #56	; 0x38
 800b14e:	436b      	muls	r3, r5
 800b150:	4a52      	ldr	r2, [pc, #328]	; (800b29c <PxMessagingTask+0x1244>)
 800b152:	18d2      	adds	r2, r2, r3
 800b154:	5d13      	ldrb	r3, [r2, r4]
 800b156:	1c61      	adds	r1, r4, #1
 800b158:	5c51      	ldrb	r1, [r2, r1]
 800b15a:	0209      	lsls	r1, r1, #8
 800b15c:	185b      	adds	r3, r3, r1
 800b15e:	1ca1      	adds	r1, r4, #2
 800b160:	5c51      	ldrb	r1, [r2, r1]
 800b162:	0409      	lsls	r1, r1, #16
 800b164:	185b      	adds	r3, r3, r1
 800b166:	3403      	adds	r4, #3
 800b168:	5d12      	ldrb	r2, [r2, r4]
 800b16a:	0612      	lsls	r2, r2, #24
 800b16c:	189b      	adds	r3, r3, r2
 800b16e:	17d9      	asrs	r1, r3, #31
 800b170:	4a48      	ldr	r2, [pc, #288]	; (800b294 <PxMessagingTask+0x123c>)
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	6051      	str	r1, [r2, #4]
										break;
 800b176:	e71f      	b.n	800afb8 <PxMessagingTask+0xf60>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 800b178:	2338      	movs	r3, #56	; 0x38
 800b17a:	436b      	muls	r3, r5
 800b17c:	4a47      	ldr	r2, [pc, #284]	; (800b29c <PxMessagingTask+0x1244>)
 800b17e:	18d2      	adds	r2, r2, r3
 800b180:	5d13      	ldrb	r3, [r2, r4]
 800b182:	1c61      	adds	r1, r4, #1
 800b184:	5c51      	ldrb	r1, [r2, r1]
 800b186:	0209      	lsls	r1, r1, #8
 800b188:	185b      	adds	r3, r3, r1
 800b18a:	1ca1      	adds	r1, r4, #2
 800b18c:	5c51      	ldrb	r1, [r2, r1]
 800b18e:	0409      	lsls	r1, r1, #16
 800b190:	185b      	adds	r3, r3, r1
 800b192:	3403      	adds	r4, #3
 800b194:	5d12      	ldrb	r2, [r2, r4]
 800b196:	0612      	lsls	r2, r2, #24
 800b198:	189b      	adds	r3, r3, r2
 800b19a:	4a3e      	ldr	r2, [pc, #248]	; (800b294 <PxMessagingTask+0x123c>)
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	2300      	movs	r3, #0
 800b1a0:	6053      	str	r3, [r2, #4]
										break;
 800b1a2:	e709      	b.n	800afb8 <PxMessagingTask+0xf60>
							responseStatus =BOS_OK; // Initialize response
 800b1a4:	4b40      	ldr	r3, [pc, #256]	; (800b2a8 <PxMessagingTask+0x1250>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800b1aa:	00eb      	lsls	r3, r5, #3
 800b1ac:	1b5b      	subs	r3, r3, r5
 800b1ae:	00da      	lsls	r2, r3, #3
 800b1b0:	4b3a      	ldr	r3, [pc, #232]	; (800b29c <PxMessagingTask+0x1244>)
 800b1b2:	189b      	adds	r3, r3, r2
 800b1b4:	5d1e      	ldrb	r6, [r3, r4]
 800b1b6:	2e00      	cmp	r6, #0
 800b1b8:	d100      	bne.n	800b1bc <PxMessagingTask+0x1164>
 800b1ba:	e161      	b.n	800b480 <PxMessagingTask+0x1428>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800b1bc:	2e1e      	cmp	r6, #30
 800b1be:	d900      	bls.n	800b1c2 <PxMessagingTask+0x116a>
 800b1c0:	e15a      	b.n	800b478 <PxMessagingTask+0x1420>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800b1c2:	3e01      	subs	r6, #1
 800b1c4:	00b2      	lsls	r2, r6, #2
 800b1c6:	4b39      	ldr	r3, [pc, #228]	; (800b2ac <PxMessagingTask+0x1254>)
 800b1c8:	58d2      	ldr	r2, [r2, r3]
 800b1ca:	0c13      	lsrs	r3, r2, #16
 800b1cc:	2180      	movs	r1, #128	; 0x80
 800b1ce:	0589      	lsls	r1, r1, #22
 800b1d0:	468c      	mov	ip, r1
 800b1d2:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800b1d4:	1c61      	adds	r1, r4, #1
 800b1d6:	468a      	mov	sl, r1
 800b1d8:	2038      	movs	r0, #56	; 0x38
 800b1da:	4368      	muls	r0, r5
 800b1dc:	492f      	ldr	r1, [pc, #188]	; (800b29c <PxMessagingTask+0x1244>)
 800b1de:	1809      	adds	r1, r1, r0
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	5c0f      	ldrb	r7, [r1, r0]
 800b1e4:	1e79      	subs	r1, r7, #1
 800b1e6:	b2c8      	uxtb	r0, r1
 800b1e8:	2807      	cmp	r0, #7
 800b1ea:	d81b      	bhi.n	800b224 <PxMessagingTask+0x11cc>
 800b1ec:	b2c9      	uxtb	r1, r1
 800b1ee:	0089      	lsls	r1, r1, #2
 800b1f0:	482f      	ldr	r0, [pc, #188]	; (800b2b0 <PxMessagingTask+0x1258>)
 800b1f2:	5841      	ldr	r1, [r0, r1]
 800b1f4:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b1f6:	0712      	lsls	r2, r2, #28
 800b1f8:	d109      	bne.n	800b20e <PxMessagingTask+0x11b6>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	f009 fdee 	bl	8014ddc <malloc>
 800b200:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b202:	d03b      	beq.n	800b27c <PxMessagingTask+0x1224>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b204:	0400      	lsls	r0, r0, #16
 800b206:	19c7      	adds	r7, r0, r7
 800b208:	00b6      	lsls	r6, r6, #2
 800b20a:	4a28      	ldr	r2, [pc, #160]	; (800b2ac <PxMessagingTask+0x1254>)
 800b20c:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b20e:	4a26      	ldr	r2, [pc, #152]	; (800b2a8 <PxMessagingTask+0x1250>)
 800b210:	7812      	ldrb	r2, [r2, #0]
 800b212:	2a12      	cmp	r2, #18
 800b214:	d006      	beq.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800b216:	1ca2      	adds	r2, r4, #2
 800b218:	2038      	movs	r0, #56	; 0x38
 800b21a:	4368      	muls	r0, r5
 800b21c:	491f      	ldr	r1, [pc, #124]	; (800b29c <PxMessagingTask+0x1244>)
 800b21e:	1809      	adds	r1, r1, r0
 800b220:	5c8a      	ldrb	r2, [r1, r2]
 800b222:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b224:	2338      	movs	r3, #56	; 0x38
 800b226:	436b      	muls	r3, r5
 800b228:	4a1c      	ldr	r2, [pc, #112]	; (800b29c <PxMessagingTask+0x1244>)
 800b22a:	18d3      	adds	r3, r2, r3
 800b22c:	5d1a      	ldrb	r2, [r3, r4]
 800b22e:	3a01      	subs	r2, #1
 800b230:	0090      	lsls	r0, r2, #2
 800b232:	491e      	ldr	r1, [pc, #120]	; (800b2ac <PxMessagingTask+0x1254>)
 800b234:	5841      	ldr	r1, [r0, r1]
 800b236:	200f      	movs	r0, #15
 800b238:	4008      	ands	r0, r1
 800b23a:	4654      	mov	r4, sl
 800b23c:	5d1b      	ldrb	r3, [r3, r4]
 800b23e:	4298      	cmp	r0, r3
 800b240:	d009      	beq.n	800b256 <PxMessagingTask+0x11fe>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800b242:	481c      	ldr	r0, [pc, #112]	; (800b2b4 <PxMessagingTask+0x125c>)
 800b244:	4684      	mov	ip, r0
 800b246:	4463      	add	r3, ip
 800b248:	0092      	lsls	r2, r2, #2
 800b24a:	400b      	ands	r3, r1
 800b24c:	4917      	ldr	r1, [pc, #92]	; (800b2ac <PxMessagingTask+0x1254>)
 800b24e:	5053      	str	r3, [r2, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800b250:	4b15      	ldr	r3, [pc, #84]	; (800b2a8 <PxMessagingTask+0x1250>)
 800b252:	2214      	movs	r2, #20
 800b254:	701a      	strb	r2, [r3, #0]
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG){
 800b256:	4b18      	ldr	r3, [pc, #96]	; (800b2b8 <PxMessagingTask+0x1260>)
 800b258:	799b      	ldrb	r3, [r3, #6]
 800b25a:	2b60      	cmp	r3, #96	; 0x60
 800b25c:	d003      	beq.n	800b266 <PxMessagingTask+0x120e>
 800b25e:	2b20      	cmp	r3, #32
 800b260:	d001      	beq.n	800b266 <PxMessagingTask+0x120e>
 800b262:	f7fe ff47 	bl	800a0f4 <PxMessagingTask+0x9c>
								messageParams[0] =responseStatus;
 800b266:	4b10      	ldr	r3, [pc, #64]	; (800b2a8 <PxMessagingTask+0x1250>)
 800b268:	781a      	ldrb	r2, [r3, #0]
 800b26a:	4b06      	ldr	r3, [pc, #24]	; (800b284 <PxMessagingTask+0x122c>)
 800b26c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800b26e:	2201      	movs	r2, #1
 800b270:	2121      	movs	r1, #33	; 0x21
 800b272:	9804      	ldr	r0, [sp, #16]
 800b274:	f7fe fc52 	bl	8009b1c <SendMessageToModule>
 800b278:	f7fe ff3c 	bl	800a0f4 <PxMessagingTask+0x9c>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b27c:	4a0a      	ldr	r2, [pc, #40]	; (800b2a8 <PxMessagingTask+0x1250>)
 800b27e:	2112      	movs	r1, #18
 800b280:	7011      	strb	r1, [r2, #0]
 800b282:	e7c4      	b.n	800b20e <PxMessagingTask+0x11b6>
 800b284:	20000f28 	.word	0x20000f28
 800b288:	20000001 	.word	0x20000001
 800b28c:	20000002 	.word	0x20000002
 800b290:	20000003 	.word	0x20000003
 800b294:	200010f0 	.word	0x200010f0
 800b298:	0801c658 	.word	0x0801c658
 800b29c:	20000d30 	.word	0x20000d30
 800b2a0:	20000070 	.word	0x20000070
 800b2a4:	0801c678 	.word	0x0801c678
 800b2a8:	200010f8 	.word	0x200010f8
 800b2ac:	20006d28 	.word	0x20006d28
 800b2b0:	0801c69c 	.word	0x0801c69c
 800b2b4:	0000fff0 	.word	0x0000fff0
 800b2b8:	20006da0 	.word	0x20006da0
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b2bc:	0712      	lsls	r2, r2, #28
 800b2be:	d109      	bne.n	800b2d4 <PxMessagingTask+0x127c>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800b2c0:	2001      	movs	r0, #1
 800b2c2:	f009 fd8b 	bl	8014ddc <malloc>
 800b2c6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b2c8:	d010      	beq.n	800b2ec <PxMessagingTask+0x1294>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b2ca:	0400      	lsls	r0, r0, #16
 800b2cc:	19c7      	adds	r7, r0, r7
 800b2ce:	00b6      	lsls	r6, r6, #2
 800b2d0:	4ad7      	ldr	r2, [pc, #860]	; (800b630 <PxMessagingTask+0x15d8>)
 800b2d2:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b2d4:	4ad7      	ldr	r2, [pc, #860]	; (800b634 <PxMessagingTask+0x15dc>)
 800b2d6:	7812      	ldrb	r2, [r2, #0]
 800b2d8:	2a12      	cmp	r2, #18
 800b2da:	d0a3      	beq.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800b2dc:	1ca2      	adds	r2, r4, #2
 800b2de:	2038      	movs	r0, #56	; 0x38
 800b2e0:	4368      	muls	r0, r5
 800b2e2:	49d5      	ldr	r1, [pc, #852]	; (800b638 <PxMessagingTask+0x15e0>)
 800b2e4:	1809      	adds	r1, r1, r0
 800b2e6:	568a      	ldrsb	r2, [r1, r2]
 800b2e8:	701a      	strb	r2, [r3, #0]
 800b2ea:	e79b      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b2ec:	4ad1      	ldr	r2, [pc, #836]	; (800b634 <PxMessagingTask+0x15dc>)
 800b2ee:	2112      	movs	r1, #18
 800b2f0:	7011      	strb	r1, [r2, #0]
 800b2f2:	e7ef      	b.n	800b2d4 <PxMessagingTask+0x127c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b2f4:	0712      	lsls	r2, r2, #28
 800b2f6:	d109      	bne.n	800b30c <PxMessagingTask+0x12b4>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800b2f8:	2002      	movs	r0, #2
 800b2fa:	f009 fd6f 	bl	8014ddc <malloc>
 800b2fe:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b300:	d015      	beq.n	800b32e <PxMessagingTask+0x12d6>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b302:	0400      	lsls	r0, r0, #16
 800b304:	19c7      	adds	r7, r0, r7
 800b306:	00b6      	lsls	r6, r6, #2
 800b308:	4ac9      	ldr	r2, [pc, #804]	; (800b630 <PxMessagingTask+0x15d8>)
 800b30a:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b30c:	4ac9      	ldr	r2, [pc, #804]	; (800b634 <PxMessagingTask+0x15dc>)
 800b30e:	7812      	ldrb	r2, [r2, #0]
 800b310:	2a12      	cmp	r2, #18
 800b312:	d087      	beq.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800b314:	1ca2      	adds	r2, r4, #2
 800b316:	2138      	movs	r1, #56	; 0x38
 800b318:	4369      	muls	r1, r5
 800b31a:	48c7      	ldr	r0, [pc, #796]	; (800b638 <PxMessagingTask+0x15e0>)
 800b31c:	1841      	adds	r1, r0, r1
 800b31e:	5c88      	ldrb	r0, [r1, r2]
 800b320:	1ce2      	adds	r2, r4, #3
 800b322:	5c8a      	ldrb	r2, [r1, r2]
 800b324:	0212      	lsls	r2, r2, #8
 800b326:	1882      	adds	r2, r0, r2
 800b328:	b292      	uxth	r2, r2
 800b32a:	801a      	strh	r2, [r3, #0]
 800b32c:	e77a      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b32e:	4ac1      	ldr	r2, [pc, #772]	; (800b634 <PxMessagingTask+0x15dc>)
 800b330:	2112      	movs	r1, #18
 800b332:	7011      	strb	r1, [r2, #0]
 800b334:	e7ea      	b.n	800b30c <PxMessagingTask+0x12b4>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b336:	0712      	lsls	r2, r2, #28
 800b338:	d109      	bne.n	800b34e <PxMessagingTask+0x12f6>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800b33a:	2002      	movs	r0, #2
 800b33c:	f009 fd4e 	bl	8014ddc <malloc>
 800b340:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b342:	d016      	beq.n	800b372 <PxMessagingTask+0x131a>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b344:	0400      	lsls	r0, r0, #16
 800b346:	19c7      	adds	r7, r0, r7
 800b348:	00b6      	lsls	r6, r6, #2
 800b34a:	4ab9      	ldr	r2, [pc, #740]	; (800b630 <PxMessagingTask+0x15d8>)
 800b34c:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b34e:	4ab9      	ldr	r2, [pc, #740]	; (800b634 <PxMessagingTask+0x15dc>)
 800b350:	7812      	ldrb	r2, [r2, #0]
 800b352:	2a12      	cmp	r2, #18
 800b354:	d100      	bne.n	800b358 <PxMessagingTask+0x1300>
 800b356:	e765      	b.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800b358:	1ca2      	adds	r2, r4, #2
 800b35a:	2138      	movs	r1, #56	; 0x38
 800b35c:	4369      	muls	r1, r5
 800b35e:	48b6      	ldr	r0, [pc, #728]	; (800b638 <PxMessagingTask+0x15e0>)
 800b360:	1841      	adds	r1, r0, r1
 800b362:	5c88      	ldrb	r0, [r1, r2]
 800b364:	1ce2      	adds	r2, r4, #3
 800b366:	5c8a      	ldrb	r2, [r1, r2]
 800b368:	0212      	lsls	r2, r2, #8
 800b36a:	1882      	adds	r2, r0, r2
 800b36c:	b212      	sxth	r2, r2
 800b36e:	801a      	strh	r2, [r3, #0]
 800b370:	e758      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b372:	4ab0      	ldr	r2, [pc, #704]	; (800b634 <PxMessagingTask+0x15dc>)
 800b374:	2112      	movs	r1, #18
 800b376:	7011      	strb	r1, [r2, #0]
 800b378:	e7e9      	b.n	800b34e <PxMessagingTask+0x12f6>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b37a:	0712      	lsls	r2, r2, #28
 800b37c:	d109      	bne.n	800b392 <PxMessagingTask+0x133a>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b37e:	2004      	movs	r0, #4
 800b380:	f009 fd2c 	bl	8014ddc <malloc>
 800b384:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b386:	d01d      	beq.n	800b3c4 <PxMessagingTask+0x136c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b388:	0400      	lsls	r0, r0, #16
 800b38a:	19c7      	adds	r7, r0, r7
 800b38c:	00b6      	lsls	r6, r6, #2
 800b38e:	4aa8      	ldr	r2, [pc, #672]	; (800b630 <PxMessagingTask+0x15d8>)
 800b390:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b392:	4aa8      	ldr	r2, [pc, #672]	; (800b634 <PxMessagingTask+0x15dc>)
 800b394:	7812      	ldrb	r2, [r2, #0]
 800b396:	2a12      	cmp	r2, #18
 800b398:	d100      	bne.n	800b39c <PxMessagingTask+0x1344>
 800b39a:	e743      	b.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b39c:	1ca2      	adds	r2, r4, #2
 800b39e:	2138      	movs	r1, #56	; 0x38
 800b3a0:	4369      	muls	r1, r5
 800b3a2:	48a5      	ldr	r0, [pc, #660]	; (800b638 <PxMessagingTask+0x15e0>)
 800b3a4:	1841      	adds	r1, r0, r1
 800b3a6:	5c88      	ldrb	r0, [r1, r2]
 800b3a8:	1ce2      	adds	r2, r4, #3
 800b3aa:	5c8a      	ldrb	r2, [r1, r2]
 800b3ac:	0212      	lsls	r2, r2, #8
 800b3ae:	1880      	adds	r0, r0, r2
 800b3b0:	1d22      	adds	r2, r4, #4
 800b3b2:	5c8a      	ldrb	r2, [r1, r2]
 800b3b4:	0412      	lsls	r2, r2, #16
 800b3b6:	1882      	adds	r2, r0, r2
 800b3b8:	1d60      	adds	r0, r4, #5
 800b3ba:	5c09      	ldrb	r1, [r1, r0]
 800b3bc:	0609      	lsls	r1, r1, #24
 800b3be:	1852      	adds	r2, r2, r1
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	e72f      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b3c4:	4a9b      	ldr	r2, [pc, #620]	; (800b634 <PxMessagingTask+0x15dc>)
 800b3c6:	2112      	movs	r1, #18
 800b3c8:	7011      	strb	r1, [r2, #0]
 800b3ca:	e7e2      	b.n	800b392 <PxMessagingTask+0x133a>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b3cc:	0712      	lsls	r2, r2, #28
 800b3ce:	d109      	bne.n	800b3e4 <PxMessagingTask+0x138c>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b3d0:	2004      	movs	r0, #4
 800b3d2:	f009 fd03 	bl	8014ddc <malloc>
 800b3d6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b3d8:	d01d      	beq.n	800b416 <PxMessagingTask+0x13be>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b3da:	0400      	lsls	r0, r0, #16
 800b3dc:	19c7      	adds	r7, r0, r7
 800b3de:	00b6      	lsls	r6, r6, #2
 800b3e0:	4a93      	ldr	r2, [pc, #588]	; (800b630 <PxMessagingTask+0x15d8>)
 800b3e2:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b3e4:	4a93      	ldr	r2, [pc, #588]	; (800b634 <PxMessagingTask+0x15dc>)
 800b3e6:	7812      	ldrb	r2, [r2, #0]
 800b3e8:	2a12      	cmp	r2, #18
 800b3ea:	d100      	bne.n	800b3ee <PxMessagingTask+0x1396>
 800b3ec:	e71a      	b.n	800b224 <PxMessagingTask+0x11cc>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800b3ee:	1ca2      	adds	r2, r4, #2
 800b3f0:	2138      	movs	r1, #56	; 0x38
 800b3f2:	4369      	muls	r1, r5
 800b3f4:	4890      	ldr	r0, [pc, #576]	; (800b638 <PxMessagingTask+0x15e0>)
 800b3f6:	1841      	adds	r1, r0, r1
 800b3f8:	5c88      	ldrb	r0, [r1, r2]
 800b3fa:	1ce2      	adds	r2, r4, #3
 800b3fc:	5c8a      	ldrb	r2, [r1, r2]
 800b3fe:	0212      	lsls	r2, r2, #8
 800b400:	1880      	adds	r0, r0, r2
 800b402:	1d22      	adds	r2, r4, #4
 800b404:	5c8a      	ldrb	r2, [r1, r2]
 800b406:	0412      	lsls	r2, r2, #16
 800b408:	1882      	adds	r2, r0, r2
 800b40a:	1d60      	adds	r0, r4, #5
 800b40c:	5c09      	ldrb	r1, [r1, r0]
 800b40e:	0609      	lsls	r1, r1, #24
 800b410:	1852      	adds	r2, r2, r1
 800b412:	601a      	str	r2, [r3, #0]
 800b414:	e706      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b416:	4a87      	ldr	r2, [pc, #540]	; (800b634 <PxMessagingTask+0x15dc>)
 800b418:	2112      	movs	r1, #18
 800b41a:	7011      	strb	r1, [r2, #0]
 800b41c:	e7e2      	b.n	800b3e4 <PxMessagingTask+0x138c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b41e:	0712      	lsls	r2, r2, #28
 800b420:	d109      	bne.n	800b436 <PxMessagingTask+0x13de>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800b422:	2004      	movs	r0, #4
 800b424:	f009 fcda 	bl	8014ddc <malloc>
 800b428:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b42a:	d021      	beq.n	800b470 <PxMessagingTask+0x1418>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b42c:	0400      	lsls	r0, r0, #16
 800b42e:	19c7      	adds	r7, r0, r7
 800b430:	00b6      	lsls	r6, r6, #2
 800b432:	4a7f      	ldr	r2, [pc, #508]	; (800b630 <PxMessagingTask+0x15d8>)
 800b434:	50b7      	str	r7, [r6, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL){ // Write remote value
 800b436:	4a7f      	ldr	r2, [pc, #508]	; (800b634 <PxMessagingTask+0x15dc>)
 800b438:	7812      	ldrb	r2, [r2, #0]
 800b43a:	2a12      	cmp	r2, #18
 800b43c:	d100      	bne.n	800b440 <PxMessagingTask+0x13e8>
 800b43e:	e6f1      	b.n	800b224 <PxMessagingTask+0x11cc>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b440:	1ca2      	adds	r2, r4, #2
 800b442:	2138      	movs	r1, #56	; 0x38
 800b444:	4369      	muls	r1, r5
 800b446:	487c      	ldr	r0, [pc, #496]	; (800b638 <PxMessagingTask+0x15e0>)
 800b448:	1841      	adds	r1, r0, r1
 800b44a:	5c88      	ldrb	r0, [r1, r2]
 800b44c:	1ce2      	adds	r2, r4, #3
 800b44e:	5c8a      	ldrb	r2, [r1, r2]
 800b450:	0212      	lsls	r2, r2, #8
 800b452:	1880      	adds	r0, r0, r2
 800b454:	1d22      	adds	r2, r4, #4
 800b456:	5c8a      	ldrb	r2, [r1, r2]
 800b458:	0412      	lsls	r2, r2, #16
 800b45a:	1882      	adds	r2, r0, r2
 800b45c:	1d60      	adds	r0, r4, #5
 800b45e:	5c09      	ldrb	r1, [r1, r0]
 800b460:	0609      	lsls	r1, r1, #24
 800b462:	1852      	adds	r2, r2, r1
 800b464:	4975      	ldr	r1, [pc, #468]	; (800b63c <PxMessagingTask+0x15e4>)
 800b466:	600a      	str	r2, [r1, #0]
 800b468:	2000      	movs	r0, #0
 800b46a:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	e6d9      	b.n	800b224 <PxMessagingTask+0x11cc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b470:	4a70      	ldr	r2, [pc, #448]	; (800b634 <PxMessagingTask+0x15dc>)
 800b472:	2112      	movs	r1, #18
 800b474:	7011      	strb	r1, [r2, #0]
 800b476:	e7de      	b.n	800b436 <PxMessagingTask+0x13de>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800b478:	4b6e      	ldr	r3, [pc, #440]	; (800b634 <PxMessagingTask+0x15dc>)
 800b47a:	2213      	movs	r2, #19
 800b47c:	701a      	strb	r2, [r3, #0]
 800b47e:	e6ea      	b.n	800b256 <PxMessagingTask+0x11fe>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800b480:	1ca2      	adds	r2, r4, #2
 800b482:	2338      	movs	r3, #56	; 0x38
 800b484:	436b      	muls	r3, r5
 800b486:	496c      	ldr	r1, [pc, #432]	; (800b638 <PxMessagingTask+0x15e0>)
 800b488:	18cb      	adds	r3, r1, r3
 800b48a:	5c9e      	ldrb	r6, [r3, r2]
 800b48c:	0636      	lsls	r6, r6, #24
 800b48e:	1ce2      	adds	r2, r4, #3
 800b490:	5c9a      	ldrb	r2, [r3, r2]
 800b492:	0412      	lsls	r2, r2, #16
 800b494:	18b6      	adds	r6, r6, r2
 800b496:	1d22      	adds	r2, r4, #4
 800b498:	5c9a      	ldrb	r2, [r3, r2]
 800b49a:	0212      	lsls	r2, r2, #8
 800b49c:	18b6      	adds	r6, r6, r2
 800b49e:	1d62      	adds	r2, r4, #5
 800b4a0:	5c9b      	ldrb	r3, [r3, r2]
 800b4a2:	18f6      	adds	r6, r6, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800b4a4:	23e0      	movs	r3, #224	; 0xe0
 800b4a6:	061b      	lsls	r3, r3, #24
 800b4a8:	18f2      	adds	r2, r6, r3
 800b4aa:	4b65      	ldr	r3, [pc, #404]	; (800b640 <PxMessagingTask+0x15e8>)
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d87c      	bhi.n	800b5aa <PxMessagingTask+0x1552>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800b4b0:	1c63      	adds	r3, r4, #1
 800b4b2:	2138      	movs	r1, #56	; 0x38
 800b4b4:	4369      	muls	r1, r5
 800b4b6:	4a60      	ldr	r2, [pc, #384]	; (800b638 <PxMessagingTask+0x15e0>)
 800b4b8:	1852      	adds	r2, r2, r1
 800b4ba:	5cd3      	ldrb	r3, [r2, r3]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	b2da      	uxtb	r2, r3
 800b4c0:	2a07      	cmp	r2, #7
 800b4c2:	d900      	bls.n	800b4c6 <PxMessagingTask+0x146e>
 800b4c4:	e6c7      	b.n	800b256 <PxMessagingTask+0x11fe>
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4a5e      	ldr	r2, [pc, #376]	; (800b644 <PxMessagingTask+0x15ec>)
 800b4cc:	58d3      	ldr	r3, [r2, r3]
 800b4ce:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800b4d0:	3406      	adds	r4, #6
 800b4d2:	2238      	movs	r2, #56	; 0x38
 800b4d4:	436a      	muls	r2, r5
 800b4d6:	4b58      	ldr	r3, [pc, #352]	; (800b638 <PxMessagingTask+0x15e0>)
 800b4d8:	189b      	adds	r3, r3, r2
 800b4da:	5d1b      	ldrb	r3, [r3, r4]
 800b4dc:	7033      	strb	r3, [r6, #0]
											break;
 800b4de:	e6ba      	b.n	800b256 <PxMessagingTask+0x11fe>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800b4e0:	3406      	adds	r4, #6
 800b4e2:	2238      	movs	r2, #56	; 0x38
 800b4e4:	436a      	muls	r2, r5
 800b4e6:	4b54      	ldr	r3, [pc, #336]	; (800b638 <PxMessagingTask+0x15e0>)
 800b4e8:	189b      	adds	r3, r3, r2
 800b4ea:	571b      	ldrsb	r3, [r3, r4]
 800b4ec:	7033      	strb	r3, [r6, #0]
											break;
 800b4ee:	e6b2      	b.n	800b256 <PxMessagingTask+0x11fe>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b4f0:	1da1      	adds	r1, r4, #6
 800b4f2:	2338      	movs	r3, #56	; 0x38
 800b4f4:	436b      	muls	r3, r5
 800b4f6:	4a50      	ldr	r2, [pc, #320]	; (800b638 <PxMessagingTask+0x15e0>)
 800b4f8:	18d2      	adds	r2, r2, r3
 800b4fa:	5c53      	ldrb	r3, [r2, r1]
 800b4fc:	3407      	adds	r4, #7
 800b4fe:	5d12      	ldrb	r2, [r2, r4]
 800b500:	0212      	lsls	r2, r2, #8
 800b502:	189b      	adds	r3, r3, r2
 800b504:	b29b      	uxth	r3, r3
 800b506:	8033      	strh	r3, [r6, #0]
											break;
 800b508:	e6a5      	b.n	800b256 <PxMessagingTask+0x11fe>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800b50a:	1da1      	adds	r1, r4, #6
 800b50c:	2338      	movs	r3, #56	; 0x38
 800b50e:	436b      	muls	r3, r5
 800b510:	4a49      	ldr	r2, [pc, #292]	; (800b638 <PxMessagingTask+0x15e0>)
 800b512:	18d2      	adds	r2, r2, r3
 800b514:	5c53      	ldrb	r3, [r2, r1]
 800b516:	3407      	adds	r4, #7
 800b518:	5d12      	ldrb	r2, [r2, r4]
 800b51a:	0212      	lsls	r2, r2, #8
 800b51c:	189b      	adds	r3, r3, r2
 800b51e:	b21b      	sxth	r3, r3
 800b520:	8033      	strh	r3, [r6, #0]
											break;
 800b522:	e698      	b.n	800b256 <PxMessagingTask+0x11fe>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b524:	1da1      	adds	r1, r4, #6
 800b526:	2338      	movs	r3, #56	; 0x38
 800b528:	436b      	muls	r3, r5
 800b52a:	4a43      	ldr	r2, [pc, #268]	; (800b638 <PxMessagingTask+0x15e0>)
 800b52c:	18d2      	adds	r2, r2, r3
 800b52e:	5c53      	ldrb	r3, [r2, r1]
 800b530:	1de1      	adds	r1, r4, #7
 800b532:	5c51      	ldrb	r1, [r2, r1]
 800b534:	0209      	lsls	r1, r1, #8
 800b536:	185b      	adds	r3, r3, r1
 800b538:	0021      	movs	r1, r4
 800b53a:	3108      	adds	r1, #8
 800b53c:	5c51      	ldrb	r1, [r2, r1]
 800b53e:	0409      	lsls	r1, r1, #16
 800b540:	185b      	adds	r3, r3, r1
 800b542:	3409      	adds	r4, #9
 800b544:	5d12      	ldrb	r2, [r2, r4]
 800b546:	0612      	lsls	r2, r2, #24
 800b548:	189b      	adds	r3, r3, r2
 800b54a:	6033      	str	r3, [r6, #0]
											break;
 800b54c:	e683      	b.n	800b256 <PxMessagingTask+0x11fe>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800b54e:	1da1      	adds	r1, r4, #6
 800b550:	2338      	movs	r3, #56	; 0x38
 800b552:	436b      	muls	r3, r5
 800b554:	4a38      	ldr	r2, [pc, #224]	; (800b638 <PxMessagingTask+0x15e0>)
 800b556:	18d2      	adds	r2, r2, r3
 800b558:	5c53      	ldrb	r3, [r2, r1]
 800b55a:	1de1      	adds	r1, r4, #7
 800b55c:	5c51      	ldrb	r1, [r2, r1]
 800b55e:	0209      	lsls	r1, r1, #8
 800b560:	185b      	adds	r3, r3, r1
 800b562:	0021      	movs	r1, r4
 800b564:	3108      	adds	r1, #8
 800b566:	5c51      	ldrb	r1, [r2, r1]
 800b568:	0409      	lsls	r1, r1, #16
 800b56a:	185b      	adds	r3, r3, r1
 800b56c:	3409      	adds	r4, #9
 800b56e:	5d12      	ldrb	r2, [r2, r4]
 800b570:	0612      	lsls	r2, r2, #24
 800b572:	189b      	adds	r3, r3, r2
 800b574:	6033      	str	r3, [r6, #0]
											break;
 800b576:	e66e      	b.n	800b256 <PxMessagingTask+0x11fe>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b578:	1da1      	adds	r1, r4, #6
 800b57a:	2338      	movs	r3, #56	; 0x38
 800b57c:	436b      	muls	r3, r5
 800b57e:	4a2e      	ldr	r2, [pc, #184]	; (800b638 <PxMessagingTask+0x15e0>)
 800b580:	18d2      	adds	r2, r2, r3
 800b582:	5c53      	ldrb	r3, [r2, r1]
 800b584:	1de1      	adds	r1, r4, #7
 800b586:	5c51      	ldrb	r1, [r2, r1]
 800b588:	0209      	lsls	r1, r1, #8
 800b58a:	185b      	adds	r3, r3, r1
 800b58c:	0021      	movs	r1, r4
 800b58e:	3108      	adds	r1, #8
 800b590:	5c51      	ldrb	r1, [r2, r1]
 800b592:	0409      	lsls	r1, r1, #16
 800b594:	185b      	adds	r3, r3, r1
 800b596:	3409      	adds	r4, #9
 800b598:	5d12      	ldrb	r2, [r2, r4]
 800b59a:	0612      	lsls	r2, r2, #24
 800b59c:	189b      	adds	r3, r3, r2
 800b59e:	4a27      	ldr	r2, [pc, #156]	; (800b63c <PxMessagingTask+0x15e4>)
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800b5a6:	6033      	str	r3, [r6, #0]
											break;
 800b5a8:	e655      	b.n	800b256 <PxMessagingTask+0x11fe>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800b5aa:	4a27      	ldr	r2, [pc, #156]	; (800b648 <PxMessagingTask+0x15f0>)
 800b5ac:	23f8      	movs	r3, #248	; 0xf8
 800b5ae:	061b      	lsls	r3, r3, #24
 800b5b0:	18f3      	adds	r3, r6, r3
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d900      	bls.n	800b5b8 <PxMessagingTask+0x1560>
 800b5b6:	e0c2      	b.n	800b73e <PxMessagingTask+0x16e6>
									HAL_FLASH_Unlock();
 800b5b8:	f007 fc48 	bl	8012e4c <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800b5bc:	4653      	mov	r3, sl
 800b5be:	2b22      	cmp	r3, #34	; 0x22
 800b5c0:	d111      	bne.n	800b5e6 <PxMessagingTask+0x158e>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	9311      	str	r3, [sp, #68]	; 0x44
										erase.PageAddress =temp32;
 800b5c6:	9612      	str	r6, [sp, #72]	; 0x48
										erase.NbPages =1;
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	9313      	str	r3, [sp, #76]	; 0x4c
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b5cc:	a910      	add	r1, sp, #64	; 0x40
 800b5ce:	a811      	add	r0, sp, #68	; 0x44
 800b5d0:	f007 fcfc 	bl	8012fcc <HAL_FLASHEx_Erase>
 800b5d4:	9008      	str	r0, [sp, #32]
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d102      	bne.n	800b5e0 <PxMessagingTask+0x1588>
 800b5da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5dc:	3301      	adds	r3, #1
 800b5de:	d002      	beq.n	800b5e6 <PxMessagingTask+0x158e>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b5e0:	4b14      	ldr	r3, [pc, #80]	; (800b634 <PxMessagingTask+0x15dc>)
 800b5e2:	2216      	movs	r2, #22
 800b5e4:	701a      	strb	r2, [r3, #0]
									if(responseStatus == BOS_OK){
 800b5e6:	4b13      	ldr	r3, [pc, #76]	; (800b634 <PxMessagingTask+0x15dc>)
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d116      	bne.n	800b61c <PxMessagingTask+0x15c4>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800b5ee:	1c63      	adds	r3, r4, #1
 800b5f0:	2138      	movs	r1, #56	; 0x38
 800b5f2:	4369      	muls	r1, r5
 800b5f4:	4a10      	ldr	r2, [pc, #64]	; (800b638 <PxMessagingTask+0x15e0>)
 800b5f6:	1852      	adds	r2, r2, r1
 800b5f8:	5cd3      	ldrb	r3, [r2, r3]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	2a07      	cmp	r2, #7
 800b600:	d80c      	bhi.n	800b61c <PxMessagingTask+0x15c4>
 800b602:	b2db      	uxtb	r3, r3
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4a11      	ldr	r2, [pc, #68]	; (800b64c <PxMessagingTask+0x15f4>)
 800b608:	58d3      	ldr	r3, [r2, r3]
 800b60a:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b60c:	8833      	ldrh	r3, [r6, #0]
 800b60e:	b29b      	uxth	r3, r3
 800b610:	4a0f      	ldr	r2, [pc, #60]	; (800b650 <PxMessagingTask+0x15f8>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d01e      	beq.n	800b654 <PxMessagingTask+0x15fc>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b616:	4b07      	ldr	r3, [pc, #28]	; (800b634 <PxMessagingTask+0x15dc>)
 800b618:	2216      	movs	r2, #22
 800b61a:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800b61c:	f007 fc2a 	bl	8012e74 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b620:	9b08      	ldr	r3, [sp, #32]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d100      	bne.n	800b628 <PxMessagingTask+0x15d0>
 800b626:	e616      	b.n	800b256 <PxMessagingTask+0x11fe>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b628:	4b02      	ldr	r3, [pc, #8]	; (800b634 <PxMessagingTask+0x15dc>)
 800b62a:	2216      	movs	r2, #22
 800b62c:	701a      	strb	r2, [r3, #0]
 800b62e:	e612      	b.n	800b256 <PxMessagingTask+0x11fe>
 800b630:	20006d28 	.word	0x20006d28
 800b634:	200010f8 	.word	0x200010f8
 800b638:	20000d30 	.word	0x20000d30
 800b63c:	200010f0 	.word	0x200010f0
 800b640:	00007fff 	.word	0x00007fff
 800b644:	0801c6bc 	.word	0x0801c6bc
 800b648:	0001ffff 	.word	0x0001ffff
 800b64c:	0801c6dc 	.word	0x0801c6dc
 800b650:	0000ffff 	.word	0x0000ffff
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b654:	3406      	adds	r4, #6
 800b656:	2238      	movs	r2, #56	; 0x38
 800b658:	436a      	muls	r2, r5
 800b65a:	4bcc      	ldr	r3, [pc, #816]	; (800b98c <PxMessagingTask+0x1934>)
 800b65c:	189b      	adds	r3, r3, r2
 800b65e:	5d1a      	ldrb	r2, [r3, r4]
 800b660:	2300      	movs	r3, #0
 800b662:	49cb      	ldr	r1, [pc, #812]	; (800b990 <PxMessagingTask+0x1938>)
 800b664:	600a      	str	r2, [r1, #0]
 800b666:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b668:	0031      	movs	r1, r6
 800b66a:	2001      	movs	r0, #1
 800b66c:	f007 fc3a 	bl	8012ee4 <HAL_FLASH_Program>
 800b670:	9008      	str	r0, [sp, #32]
													break;
 800b672:	e7d3      	b.n	800b61c <PxMessagingTask+0x15c4>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b674:	8833      	ldrh	r3, [r6, #0]
 800b676:	b29b      	uxth	r3, r3
 800b678:	4ac6      	ldr	r2, [pc, #792]	; (800b994 <PxMessagingTask+0x193c>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d003      	beq.n	800b686 <PxMessagingTask+0x162e>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b67e:	4bc6      	ldr	r3, [pc, #792]	; (800b998 <PxMessagingTask+0x1940>)
 800b680:	2216      	movs	r2, #22
 800b682:	701a      	strb	r2, [r3, #0]
													break;
 800b684:	e7ca      	b.n	800b61c <PxMessagingTask+0x15c4>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b686:	1da1      	adds	r1, r4, #6
 800b688:	2238      	movs	r2, #56	; 0x38
 800b68a:	436a      	muls	r2, r5
 800b68c:	4bbf      	ldr	r3, [pc, #764]	; (800b98c <PxMessagingTask+0x1934>)
 800b68e:	189b      	adds	r3, r3, r2
 800b690:	5c5a      	ldrb	r2, [r3, r1]
 800b692:	3407      	adds	r4, #7
 800b694:	5d1b      	ldrb	r3, [r3, r4]
 800b696:	021b      	lsls	r3, r3, #8
 800b698:	18d2      	adds	r2, r2, r3
 800b69a:	17d3      	asrs	r3, r2, #31
 800b69c:	49bc      	ldr	r1, [pc, #752]	; (800b990 <PxMessagingTask+0x1938>)
 800b69e:	600a      	str	r2, [r1, #0]
 800b6a0:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b6a2:	0031      	movs	r1, r6
 800b6a4:	2001      	movs	r0, #1
 800b6a6:	f007 fc1d 	bl	8012ee4 <HAL_FLASH_Program>
 800b6aa:	9008      	str	r0, [sp, #32]
													break;
 800b6ac:	e7b6      	b.n	800b61c <PxMessagingTask+0x15c4>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b6ae:	6833      	ldr	r3, [r6, #0]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	d003      	beq.n	800b6bc <PxMessagingTask+0x1664>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b6b4:	4bb8      	ldr	r3, [pc, #736]	; (800b998 <PxMessagingTask+0x1940>)
 800b6b6:	2216      	movs	r2, #22
 800b6b8:	701a      	strb	r2, [r3, #0]
													break;
 800b6ba:	e7af      	b.n	800b61c <PxMessagingTask+0x15c4>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b6bc:	1da2      	adds	r2, r4, #6
 800b6be:	2338      	movs	r3, #56	; 0x38
 800b6c0:	436b      	muls	r3, r5
 800b6c2:	49b2      	ldr	r1, [pc, #712]	; (800b98c <PxMessagingTask+0x1934>)
 800b6c4:	18cb      	adds	r3, r1, r3
 800b6c6:	5c9a      	ldrb	r2, [r3, r2]
 800b6c8:	1de1      	adds	r1, r4, #7
 800b6ca:	5c59      	ldrb	r1, [r3, r1]
 800b6cc:	0209      	lsls	r1, r1, #8
 800b6ce:	1852      	adds	r2, r2, r1
 800b6d0:	0021      	movs	r1, r4
 800b6d2:	3108      	adds	r1, #8
 800b6d4:	5c59      	ldrb	r1, [r3, r1]
 800b6d6:	0409      	lsls	r1, r1, #16
 800b6d8:	1852      	adds	r2, r2, r1
 800b6da:	3409      	adds	r4, #9
 800b6dc:	5d1b      	ldrb	r3, [r3, r4]
 800b6de:	061b      	lsls	r3, r3, #24
 800b6e0:	18d2      	adds	r2, r2, r3
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	49aa      	ldr	r1, [pc, #680]	; (800b990 <PxMessagingTask+0x1938>)
 800b6e6:	600a      	str	r2, [r1, #0]
 800b6e8:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b6ea:	0031      	movs	r1, r6
 800b6ec:	2002      	movs	r0, #2
 800b6ee:	f007 fbf9 	bl	8012ee4 <HAL_FLASH_Program>
 800b6f2:	9008      	str	r0, [sp, #32]
													break;
 800b6f4:	e792      	b.n	800b61c <PxMessagingTask+0x15c4>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b6f6:	6833      	ldr	r3, [r6, #0]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	d003      	beq.n	800b704 <PxMessagingTask+0x16ac>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b6fc:	4ba6      	ldr	r3, [pc, #664]	; (800b998 <PxMessagingTask+0x1940>)
 800b6fe:	2216      	movs	r2, #22
 800b700:	701a      	strb	r2, [r3, #0]
													break;
 800b702:	e78b      	b.n	800b61c <PxMessagingTask+0x15c4>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b704:	1da2      	adds	r2, r4, #6
 800b706:	2338      	movs	r3, #56	; 0x38
 800b708:	436b      	muls	r3, r5
 800b70a:	49a0      	ldr	r1, [pc, #640]	; (800b98c <PxMessagingTask+0x1934>)
 800b70c:	18cb      	adds	r3, r1, r3
 800b70e:	5c9a      	ldrb	r2, [r3, r2]
 800b710:	1de1      	adds	r1, r4, #7
 800b712:	5c59      	ldrb	r1, [r3, r1]
 800b714:	0209      	lsls	r1, r1, #8
 800b716:	1852      	adds	r2, r2, r1
 800b718:	0021      	movs	r1, r4
 800b71a:	3108      	adds	r1, #8
 800b71c:	5c59      	ldrb	r1, [r3, r1]
 800b71e:	0409      	lsls	r1, r1, #16
 800b720:	1852      	adds	r2, r2, r1
 800b722:	3409      	adds	r4, #9
 800b724:	5d1b      	ldrb	r3, [r3, r4]
 800b726:	061b      	lsls	r3, r3, #24
 800b728:	18d2      	adds	r2, r2, r3
 800b72a:	2300      	movs	r3, #0
 800b72c:	4998      	ldr	r1, [pc, #608]	; (800b990 <PxMessagingTask+0x1938>)
 800b72e:	600a      	str	r2, [r1, #0]
 800b730:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b732:	0031      	movs	r1, r6
 800b734:	2003      	movs	r0, #3
 800b736:	f007 fbd5 	bl	8012ee4 <HAL_FLASH_Program>
 800b73a:	9008      	str	r0, [sp, #32]
													break;
 800b73c:	e76e      	b.n	800b61c <PxMessagingTask+0x15c4>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b73e:	4b96      	ldr	r3, [pc, #600]	; (800b998 <PxMessagingTask+0x1940>)
 800b740:	2215      	movs	r2, #21
 800b742:	701a      	strb	r2, [r3, #0]
 800b744:	e587      	b.n	800b256 <PxMessagingTask+0x11fe>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b746:	00eb      	lsls	r3, r5, #3
 800b748:	1b5b      	subs	r3, r3, r5
 800b74a:	00da      	lsls	r2, r3, #3
 800b74c:	4b8f      	ldr	r3, [pc, #572]	; (800b98c <PxMessagingTask+0x1934>)
 800b74e:	189b      	adds	r3, r3, r2
 800b750:	5d1a      	ldrb	r2, [r3, r4]
 800b752:	4b91      	ldr	r3, [pc, #580]	; (800b998 <PxMessagingTask+0x1940>)
 800b754:	701a      	strb	r2, [r3, #0]
							break;
 800b756:	f7fe fccd 	bl	800a0f4 <PxMessagingTask+0x9c>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b75a:	1c60      	adds	r0, r4, #1
 800b75c:	00eb      	lsls	r3, r5, #3
 800b75e:	1b5a      	subs	r2, r3, r5
 800b760:	00d1      	lsls	r1, r2, #3
 800b762:	1809      	adds	r1, r1, r0
 800b764:	4889      	ldr	r0, [pc, #548]	; (800b98c <PxMessagingTask+0x1934>)
 800b766:	1809      	adds	r1, r1, r0
 800b768:	9a05      	ldr	r2, [sp, #20]
 800b76a:	3a01      	subs	r2, #1
 800b76c:	b292      	uxth	r2, r2
 800b76e:	1b5b      	subs	r3, r3, r5
 800b770:	00de      	lsls	r6, r3, #3
 800b772:	1980      	adds	r0, r0, r6
 800b774:	5d00      	ldrb	r0, [r0, r4]
 800b776:	230a      	movs	r3, #10
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	f004 f815 	bl	800f7a8 <writePxMutex>
							break;
 800b77e:	f7fe fcb9 	bl	800a0f4 <PxMessagingTask+0x9c>
							switch(cMessage[port - 1][0 + shift]){
 800b782:	00eb      	lsls	r3, r5, #3
 800b784:	1b5b      	subs	r3, r3, r5
 800b786:	00da      	lsls	r2, r3, #3
 800b788:	4b80      	ldr	r3, [pc, #512]	; (800b98c <PxMessagingTask+0x1934>)
 800b78a:	189b      	adds	r3, r3, r2
 800b78c:	5d18      	ldrb	r0, [r3, r4]
 800b78e:	282b      	cmp	r0, #43	; 0x2b
 800b790:	d900      	bls.n	800b794 <PxMessagingTask+0x173c>
 800b792:	e0ce      	b.n	800b932 <PxMessagingTask+0x18da>
 800b794:	0083      	lsls	r3, r0, #2
 800b796:	4a81      	ldr	r2, [pc, #516]	; (800b99c <PxMessagingTask+0x1944>)
 800b798:	58d3      	ldr	r3, [r2, r3]
 800b79a:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b79c:	1c62      	adds	r2, r4, #1
 800b79e:	2338      	movs	r3, #56	; 0x38
 800b7a0:	436b      	muls	r3, r5
 800b7a2:	497a      	ldr	r1, [pc, #488]	; (800b98c <PxMessagingTask+0x1934>)
 800b7a4:	18cb      	adds	r3, r1, r3
 800b7a6:	5c9a      	ldrb	r2, [r3, r2]
 800b7a8:	1ca1      	adds	r1, r4, #2
 800b7aa:	5c59      	ldrb	r1, [r3, r1]
 800b7ac:	0209      	lsls	r1, r1, #8
 800b7ae:	1852      	adds	r2, r2, r1
 800b7b0:	1ce1      	adds	r1, r4, #3
 800b7b2:	5c59      	ldrb	r1, [r3, r1]
 800b7b4:	0409      	lsls	r1, r1, #16
 800b7b6:	1852      	adds	r2, r2, r1
 800b7b8:	1d21      	adds	r1, r4, #4
 800b7ba:	5c59      	ldrb	r1, [r3, r1]
 800b7bc:	0609      	lsls	r1, r1, #24
 800b7be:	1852      	adds	r2, r2, r1
 800b7c0:	4977      	ldr	r1, [pc, #476]	; (800b9a0 <PxMessagingTask+0x1948>)
 800b7c2:	600a      	str	r2, [r1, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b7c4:	1d62      	adds	r2, r4, #5
 800b7c6:	5c98      	ldrb	r0, [r3, r2]
 800b7c8:	1da2      	adds	r2, r4, #6
 800b7ca:	5c9a      	ldrb	r2, [r3, r2]
 800b7cc:	0212      	lsls	r2, r2, #8
 800b7ce:	1880      	adds	r0, r0, r2
 800b7d0:	1de2      	adds	r2, r4, #7
 800b7d2:	5c9a      	ldrb	r2, [r3, r2]
 800b7d4:	0412      	lsls	r2, r2, #16
 800b7d6:	1880      	adds	r0, r0, r2
 800b7d8:	0022      	movs	r2, r4
 800b7da:	3208      	adds	r2, #8
 800b7dc:	5c9a      	ldrb	r2, [r3, r2]
 800b7de:	0612      	lsls	r2, r2, #24
 800b7e0:	1882      	adds	r2, r0, r2
 800b7e2:	604a      	str	r2, [r1, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b7e4:	0022      	movs	r2, r4
 800b7e6:	3209      	adds	r2, #9
 800b7e8:	5c98      	ldrb	r0, [r3, r2]
 800b7ea:	3201      	adds	r2, #1
 800b7ec:	5c9a      	ldrb	r2, [r3, r2]
 800b7ee:	0212      	lsls	r2, r2, #8
 800b7f0:	1880      	adds	r0, r0, r2
 800b7f2:	0022      	movs	r2, r4
 800b7f4:	320b      	adds	r2, #11
 800b7f6:	5c9a      	ldrb	r2, [r3, r2]
 800b7f8:	0412      	lsls	r2, r2, #16
 800b7fa:	1882      	adds	r2, r0, r2
 800b7fc:	0020      	movs	r0, r4
 800b7fe:	300c      	adds	r0, #12
 800b800:	5c1b      	ldrb	r3, [r3, r0]
 800b802:	061b      	lsls	r3, r3, #24
 800b804:	18d3      	adds	r3, r2, r3
 800b806:	608b      	str	r3, [r1, #8]
									break;
 800b808:	e093      	b.n	800b932 <PxMessagingTask+0x18da>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b80a:	1c62      	adds	r2, r4, #1
 800b80c:	2338      	movs	r3, #56	; 0x38
 800b80e:	436b      	muls	r3, r5
 800b810:	495e      	ldr	r1, [pc, #376]	; (800b98c <PxMessagingTask+0x1934>)
 800b812:	18cb      	adds	r3, r1, r3
 800b814:	5c9a      	ldrb	r2, [r3, r2]
 800b816:	1ca1      	adds	r1, r4, #2
 800b818:	5c59      	ldrb	r1, [r3, r1]
 800b81a:	0209      	lsls	r1, r1, #8
 800b81c:	1852      	adds	r2, r2, r1
 800b81e:	1ce1      	adds	r1, r4, #3
 800b820:	5c59      	ldrb	r1, [r3, r1]
 800b822:	0409      	lsls	r1, r1, #16
 800b824:	1852      	adds	r2, r2, r1
 800b826:	1d21      	adds	r1, r4, #4
 800b828:	5c59      	ldrb	r1, [r3, r1]
 800b82a:	0609      	lsls	r1, r1, #24
 800b82c:	1852      	adds	r2, r2, r1
 800b82e:	495c      	ldr	r1, [pc, #368]	; (800b9a0 <PxMessagingTask+0x1948>)
 800b830:	60ca      	str	r2, [r1, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b832:	1d62      	adds	r2, r4, #5
 800b834:	5c98      	ldrb	r0, [r3, r2]
 800b836:	1da2      	adds	r2, r4, #6
 800b838:	5c9a      	ldrb	r2, [r3, r2]
 800b83a:	0212      	lsls	r2, r2, #8
 800b83c:	1880      	adds	r0, r0, r2
 800b83e:	1de2      	adds	r2, r4, #7
 800b840:	5c9a      	ldrb	r2, [r3, r2]
 800b842:	0412      	lsls	r2, r2, #16
 800b844:	1880      	adds	r0, r0, r2
 800b846:	0022      	movs	r2, r4
 800b848:	3208      	adds	r2, #8
 800b84a:	5c9a      	ldrb	r2, [r3, r2]
 800b84c:	0612      	lsls	r2, r2, #24
 800b84e:	1882      	adds	r2, r0, r2
 800b850:	610a      	str	r2, [r1, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b852:	0022      	movs	r2, r4
 800b854:	3209      	adds	r2, #9
 800b856:	5c98      	ldrb	r0, [r3, r2]
 800b858:	3201      	adds	r2, #1
 800b85a:	5c9a      	ldrb	r2, [r3, r2]
 800b85c:	0212      	lsls	r2, r2, #8
 800b85e:	1880      	adds	r0, r0, r2
 800b860:	0022      	movs	r2, r4
 800b862:	320b      	adds	r2, #11
 800b864:	5c9a      	ldrb	r2, [r3, r2]
 800b866:	0412      	lsls	r2, r2, #16
 800b868:	1882      	adds	r2, r0, r2
 800b86a:	0020      	movs	r0, r4
 800b86c:	300c      	adds	r0, #12
 800b86e:	5c1b      	ldrb	r3, [r3, r0]
 800b870:	061b      	lsls	r3, r3, #24
 800b872:	18d3      	adds	r3, r2, r3
 800b874:	614b      	str	r3, [r1, #20]
									break;
 800b876:	e05c      	b.n	800b932 <PxMessagingTask+0x18da>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b878:	1c63      	adds	r3, r4, #1
 800b87a:	2238      	movs	r2, #56	; 0x38
 800b87c:	436a      	muls	r2, r5
 800b87e:	4943      	ldr	r1, [pc, #268]	; (800b98c <PxMessagingTask+0x1934>)
 800b880:	188a      	adds	r2, r1, r2
 800b882:	5cd1      	ldrb	r1, [r2, r3]
 800b884:	1ca3      	adds	r3, r4, #2
 800b886:	5cd3      	ldrb	r3, [r2, r3]
 800b888:	021b      	lsls	r3, r3, #8
 800b88a:	18c9      	adds	r1, r1, r3
 800b88c:	1ce3      	adds	r3, r4, #3
 800b88e:	5cd3      	ldrb	r3, [r2, r3]
 800b890:	041b      	lsls	r3, r3, #16
 800b892:	18c9      	adds	r1, r1, r3
 800b894:	1d23      	adds	r3, r4, #4
 800b896:	5cd3      	ldrb	r3, [r2, r3]
 800b898:	061b      	lsls	r3, r3, #24
 800b89a:	18cb      	adds	r3, r1, r3
 800b89c:	4a40      	ldr	r2, [pc, #256]	; (800b9a0 <PxMessagingTask+0x1948>)
 800b89e:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800b8a0:	4b40      	ldr	r3, [pc, #256]	; (800b9a4 <PxMessagingTask+0x194c>)
 800b8a2:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800b8a4:	1c63      	adds	r3, r4, #1
 800b8a6:	2138      	movs	r1, #56	; 0x38
 800b8a8:	4369      	muls	r1, r5
 800b8aa:	4a38      	ldr	r2, [pc, #224]	; (800b98c <PxMessagingTask+0x1934>)
 800b8ac:	1852      	adds	r2, r2, r1
 800b8ae:	5cd3      	ldrb	r3, [r2, r3]
 800b8b0:	4a3d      	ldr	r2, [pc, #244]	; (800b9a8 <PxMessagingTask+0x1950>)
 800b8b2:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d152      	bne.n	800b95e <PxMessagingTask+0x1906>
										ADCSelectChannel(ADCPort,"top");
 800b8b8:	4e3c      	ldr	r6, [pc, #240]	; (800b9ac <PxMessagingTask+0x1954>)
 800b8ba:	0031      	movs	r1, r6
 800b8bc:	f7fd fb2a 	bl	8008f14 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b8c0:	4b38      	ldr	r3, [pc, #224]	; (800b9a4 <PxMessagingTask+0x194c>)
 800b8c2:	7818      	ldrb	r0, [r3, #0]
 800b8c4:	4a3a      	ldr	r2, [pc, #232]	; (800b9b0 <PxMessagingTask+0x1958>)
 800b8c6:	0031      	movs	r1, r6
 800b8c8:	f7fd fb52 	bl	8008f70 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b8cc:	4939      	ldr	r1, [pc, #228]	; (800b9b4 <PxMessagingTask+0x195c>)
 800b8ce:	483a      	ldr	r0, [pc, #232]	; (800b9b8 <PxMessagingTask+0x1960>)
 800b8d0:	f7fd f996 	bl	8008c00 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800b8d4:	00eb      	lsls	r3, r5, #3
 800b8d6:	1b5b      	subs	r3, r3, r5
 800b8d8:	00da      	lsls	r2, r3, #3
 800b8da:	4e2c      	ldr	r6, [pc, #176]	; (800b98c <PxMessagingTask+0x1934>)
 800b8dc:	18b6      	adds	r6, r6, r2
 800b8de:	5d30      	ldrb	r0, [r6, r4]
 800b8e0:	4b30      	ldr	r3, [pc, #192]	; (800b9a4 <PxMessagingTask+0x194c>)
 800b8e2:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800b8e4:	4935      	ldr	r1, [pc, #212]	; (800b9bc <PxMessagingTask+0x1964>)
 800b8e6:	f7fd fa47 	bl	8008d78 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b8ea:	1d63      	adds	r3, r4, #5
 800b8ec:	5cf3      	ldrb	r3, [r6, r3]
 800b8ee:	1da2      	adds	r2, r4, #6
 800b8f0:	5cb2      	ldrb	r2, [r6, r2]
 800b8f2:	0212      	lsls	r2, r2, #8
 800b8f4:	189b      	adds	r3, r3, r2
 800b8f6:	1de2      	adds	r2, r4, #7
 800b8f8:	5cb2      	ldrb	r2, [r6, r2]
 800b8fa:	0412      	lsls	r2, r2, #16
 800b8fc:	189b      	adds	r3, r3, r2
 800b8fe:	0022      	movs	r2, r4
 800b900:	3208      	adds	r2, #8
 800b902:	5cb2      	ldrb	r2, [r6, r2]
 800b904:	0612      	lsls	r2, r2, #24
 800b906:	189b      	adds	r3, r3, r2
 800b908:	4a25      	ldr	r2, [pc, #148]	; (800b9a0 <PxMessagingTask+0x1948>)
 800b90a:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b90c:	0023      	movs	r3, r4
 800b90e:	3309      	adds	r3, #9
 800b910:	5cf3      	ldrb	r3, [r6, r3]
 800b912:	0021      	movs	r1, r4
 800b914:	310a      	adds	r1, #10
 800b916:	5c71      	ldrb	r1, [r6, r1]
 800b918:	0209      	lsls	r1, r1, #8
 800b91a:	185b      	adds	r3, r3, r1
 800b91c:	0021      	movs	r1, r4
 800b91e:	310b      	adds	r1, #11
 800b920:	5c71      	ldrb	r1, [r6, r1]
 800b922:	0409      	lsls	r1, r1, #16
 800b924:	185b      	adds	r3, r3, r1
 800b926:	0021      	movs	r1, r4
 800b928:	310c      	adds	r1, #12
 800b92a:	5c71      	ldrb	r1, [r6, r1]
 800b92c:	0609      	lsls	r1, r1, #24
 800b92e:	185b      	adds	r3, r3, r1
 800b930:	6213      	str	r3, [r2, #32]
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800b932:	9400      	str	r4, [sp, #0]
 800b934:	003b      	movs	r3, r7
 800b936:	9a04      	ldr	r2, [sp, #16]
 800b938:	9907      	ldr	r1, [sp, #28]
 800b93a:	4650      	mov	r0, sl
 800b93c:	f7fe fb8a 	bl	800a054 <User_MessagingParser>
 800b940:	4683      	mov	fp, r0
							if(result == BOS_ERR_UnknownMessage){
 800b942:	2801      	cmp	r0, #1
 800b944:	d001      	beq.n	800b94a <PxMessagingTask+0x18f2>
 800b946:	f7fe fbd5 	bl	800a0f4 <PxMessagingTask+0x9c>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800b94a:	9400      	str	r4, [sp, #0]
 800b94c:	003b      	movs	r3, r7
 800b94e:	9a04      	ldr	r2, [sp, #16]
 800b950:	9907      	ldr	r1, [sp, #28]
 800b952:	4650      	mov	r0, sl
 800b954:	f001 fd24 	bl	800d3a0 <Module_MessagingTask>
 800b958:	4683      	mov	fp, r0
 800b95a:	f7fe fbcb 	bl	800a0f4 <PxMessagingTask+0x9c>
									else if(1 == ADCSide){
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d1b4      	bne.n	800b8cc <PxMessagingTask+0x1874>
										ADCSelectChannel(ADCPort,"bottom");
 800b962:	4e17      	ldr	r6, [pc, #92]	; (800b9c0 <PxMessagingTask+0x1968>)
 800b964:	0031      	movs	r1, r6
 800b966:	f7fd fad5 	bl	8008f14 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800b96a:	4b0e      	ldr	r3, [pc, #56]	; (800b9a4 <PxMessagingTask+0x194c>)
 800b96c:	7818      	ldrb	r0, [r3, #0]
 800b96e:	4a10      	ldr	r2, [pc, #64]	; (800b9b0 <PxMessagingTask+0x1958>)
 800b970:	0031      	movs	r1, r6
 800b972:	f7fd fafd 	bl	8008f70 <ReadADCChannel>
 800b976:	e7a9      	b.n	800b8cc <PxMessagingTask+0x1874>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800b978:	2200      	movs	r2, #0
 800b97a:	2100      	movs	r1, #0
 800b97c:	9804      	ldr	r0, [sp, #16]
 800b97e:	f7fe f8cd 	bl	8009b1c <SendMessageToModule>
			result =BOS_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	469b      	mov	fp, r3
 800b986:	f7fe fbba 	bl	800a0fe <PxMessagingTask+0xa6>
 800b98a:	46c0      	nop			; (mov r8, r8)
 800b98c:	20000d30 	.word	0x20000d30
 800b990:	200010f0 	.word	0x200010f0
 800b994:	0000ffff 	.word	0x0000ffff
 800b998:	200010f8 	.word	0x200010f8
 800b99c:	0801c6fc 	.word	0x0801c6fc
 800b9a0:	20001550 	.word	0x20001550
 800b9a4:	20001540 	.word	0x20001540
 800b9a8:	20001542 	.word	0x20001542
 800b9ac:	0801a6a4 	.word	0x0801a6a4
 800b9b0:	20001544 	.word	0x20001544
 800b9b4:	2000154c 	.word	0x2000154c
 800b9b8:	20001548 	.word	0x20001548
 800b9bc:	2000153c 	.word	0x2000153c
 800b9c0:	0801a6a8 	.word	0x0801a6a8

0800b9c4 <weight1ModParamCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE weight1ModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b9c4:	b510      	push	{r4, lr}
 800b9c6:	1e04      	subs	r4, r0, #0

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800b9c8:	d101      	bne.n	800b9ce <weight1ModParamCommand+0xa>
 800b9ca:	b672      	cpsid	i
 800b9cc:	e7fe      	b.n	800b9cc <weight1ModParamCommand+0x8>

  sprintf( ( char * ) pcWriteBuffer, ( char * ) pcWeightVerboseMsg, weight1_buffer);
 800b9ce:	4b06      	ldr	r3, [pc, #24]	; (800b9e8 <weight1ModParamCommand+0x24>)
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f7f7 fba7 	bl	8003124 <__aeabi_f2d>
 800b9d6:	0002      	movs	r2, r0
 800b9d8:	000b      	movs	r3, r1
 800b9da:	4904      	ldr	r1, [pc, #16]	; (800b9ec <weight1ModParamCommand+0x28>)
 800b9dc:	0020      	movs	r0, r4
 800b9de:	f009 fe4d 	bl	801567c <sprintf>

  /* There is no more data to return after this single string, so return pdFALSE. */
  return pdFALSE;
}
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	bd10      	pop	{r4, pc}
 800b9e6:	46c0      	nop			; (mov r8, r8)
 800b9e8:	20006fa8 	.word	0x20006fa8
 800b9ec:	0801cf68 	.word	0x0801cf68

0800b9f0 <weight2ModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE weight2ModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800b9f0:	b510      	push	{r4, lr}
 800b9f2:	1e04      	subs	r4, r0, #0

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800b9f4:	d101      	bne.n	800b9fa <weight2ModParamCommand+0xa>
 800b9f6:	b672      	cpsid	i
 800b9f8:	e7fe      	b.n	800b9f8 <weight2ModParamCommand+0x8>

  sprintf( ( char * ) pcWriteBuffer, ( char * ) pcWeightVerboseMsg, weight2_buffer);
 800b9fa:	4b06      	ldr	r3, [pc, #24]	; (800ba14 <weight2ModParamCommand+0x24>)
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	f7f7 fb91 	bl	8003124 <__aeabi_f2d>
 800ba02:	0002      	movs	r2, r0
 800ba04:	000b      	movs	r3, r1
 800ba06:	4904      	ldr	r1, [pc, #16]	; (800ba18 <weight2ModParamCommand+0x28>)
 800ba08:	0020      	movs	r0, r4
 800ba0a:	f009 fe37 	bl	801567c <sprintf>

  /* There is no more data to return after this single string, so return pdFALSE. */
  return pdFALSE;
}
 800ba0e:	2000      	movs	r0, #0
 800ba10:	bd10      	pop	{r4, pc}
 800ba12:	46c0      	nop			; (mov r8, r8)
 800ba14:	20006ec0 	.word	0x20006ec0
 800ba18:	0801cf68 	.word	0x0801cf68

0800ba1c <unitCommand>:
{
 800ba1c:	b530      	push	{r4, r5, lr}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	0004      	movs	r4, r0
 800ba22:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800ba24:	2300      	movs	r3, #0
 800ba26:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800ba28:	2c00      	cmp	r4, #0
 800ba2a:	d101      	bne.n	800ba30 <unitCommand+0x14>
 800ba2c:	b672      	cpsid	i
 800ba2e:	e7fe      	b.n	800ba2e <unitCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800ba30:	aa01      	add	r2, sp, #4
 800ba32:	2101      	movs	r1, #1
 800ba34:	f004 f912 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800ba38:	0005      	movs	r5, r0
  if (!strncmp((const char *)pcParameterString1, "g", 1))
 800ba3a:	7803      	ldrb	r3, [r0, #0]
 800ba3c:	2b67      	cmp	r3, #103	; 0x67
 800ba3e:	d01c      	beq.n	800ba7a <unitCommand+0x5e>
  else if (!strncmp((const char *)pcParameterString1, "kg", 2))
 800ba40:	2202      	movs	r2, #2
 800ba42:	4927      	ldr	r1, [pc, #156]	; (800bae0 <unitCommand+0xc4>)
 800ba44:	f009 fe5e 	bl	8015704 <strncmp>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d021      	beq.n	800ba90 <unitCommand+0x74>
  else if (!strncmp((const char *)pcParameterString1, "ounce", 5))
 800ba4c:	2205      	movs	r2, #5
 800ba4e:	4925      	ldr	r1, [pc, #148]	; (800bae4 <unitCommand+0xc8>)
 800ba50:	0028      	movs	r0, r5
 800ba52:	f009 fe57 	bl	8015704 <strncmp>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d023      	beq.n	800baa2 <unitCommand+0x86>
	else if (!strncmp((const char *)pcParameterString1, "lb", 2))
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	4922      	ldr	r1, [pc, #136]	; (800bae8 <unitCommand+0xcc>)
 800ba5e:	0028      	movs	r0, r5
 800ba60:	f009 fe50 	bl	8015704 <strncmp>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d125      	bne.n	800bab4 <unitCommand+0x98>
    unit = Pound;
 800ba68:	4b20      	ldr	r3, [pc, #128]	; (800baec <unitCommand+0xd0>)
 800ba6a:	2204      	movs	r2, #4
 800ba6c:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Pound\r\n" );
 800ba6e:	321b      	adds	r2, #27
 800ba70:	491f      	ldr	r1, [pc, #124]	; (800baf0 <unitCommand+0xd4>)
 800ba72:	0020      	movs	r0, r4
 800ba74:	f009 fbff 	bl	8015276 <memcpy>
 800ba78:	e007      	b.n	800ba8a <unitCommand+0x6e>
    unit = Gram;
 800ba7a:	4b1c      	ldr	r3, [pc, #112]	; (800baec <unitCommand+0xd0>)
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Gram\r\n" );
 800ba80:	321d      	adds	r2, #29
 800ba82:	491c      	ldr	r1, [pc, #112]	; (800baf4 <unitCommand+0xd8>)
 800ba84:	0020      	movs	r0, r4
 800ba86:	f009 fbf6 	bl	8015276 <memcpy>
}
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	b003      	add	sp, #12
 800ba8e:	bd30      	pop	{r4, r5, pc}
    unit = KGram;
 800ba90:	4b16      	ldr	r3, [pc, #88]	; (800baec <unitCommand+0xd0>)
 800ba92:	2202      	movs	r2, #2
 800ba94:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: KGram\r\n" );
 800ba96:	321d      	adds	r2, #29
 800ba98:	4917      	ldr	r1, [pc, #92]	; (800baf8 <unitCommand+0xdc>)
 800ba9a:	0020      	movs	r0, r4
 800ba9c:	f009 fbeb 	bl	8015276 <memcpy>
 800baa0:	e7f3      	b.n	800ba8a <unitCommand+0x6e>
    unit = Ounce;
 800baa2:	4b12      	ldr	r3, [pc, #72]	; (800baec <unitCommand+0xd0>)
 800baa4:	2203      	movs	r2, #3
 800baa6:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Ounce\r\n" );
 800baa8:	321c      	adds	r2, #28
 800baaa:	4914      	ldr	r1, [pc, #80]	; (800bafc <unitCommand+0xe0>)
 800baac:	0020      	movs	r0, r4
 800baae:	f009 fbe2 	bl	8015276 <memcpy>
 800bab2:	e7ea      	b.n	800ba8a <unitCommand+0x6e>
	else if (!strncmp((const char *)pcParameterString1, "raw", 3))
 800bab4:	2203      	movs	r2, #3
 800bab6:	4912      	ldr	r1, [pc, #72]	; (800bb00 <unitCommand+0xe4>)
 800bab8:	0028      	movs	r0, r5
 800baba:	f009 fe23 	bl	8015704 <strncmp>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d005      	beq.n	800bace <unitCommand+0xb2>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800bac2:	2213      	movs	r2, #19
 800bac4:	490f      	ldr	r1, [pc, #60]	; (800bb04 <unitCommand+0xe8>)
 800bac6:	0020      	movs	r0, r4
 800bac8:	f009 fbd5 	bl	8015276 <memcpy>
 800bacc:	e7dd      	b.n	800ba8a <unitCommand+0x6e>
    unit = RAW;
 800bace:	4b07      	ldr	r3, [pc, #28]	; (800baec <unitCommand+0xd0>)
 800bad0:	2205      	movs	r2, #5
 800bad2:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement unit: Raw\r\n" );
 800bad4:	3218      	adds	r2, #24
 800bad6:	490c      	ldr	r1, [pc, #48]	; (800bb08 <unitCommand+0xec>)
 800bad8:	0020      	movs	r0, r4
 800bada:	f009 fbcc 	bl	8015276 <memcpy>
 800bade:	e7d4      	b.n	800ba8a <unitCommand+0x6e>
 800bae0:	0801ceb4 	.word	0x0801ceb4
 800bae4:	0801ced8 	.word	0x0801ced8
 800bae8:	0801cf00 	.word	0x0801cf00
 800baec:	200000b4 	.word	0x200000b4
 800baf0:	0801cf04 	.word	0x0801cf04
 800baf4:	0801ce94 	.word	0x0801ce94
 800baf8:	0801ceb8 	.word	0x0801ceb8
 800bafc:	0801cee0 	.word	0x0801cee0
 800bb00:	0801cf24 	.word	0x0801cf24
 800bb04:	0801b028 	.word	0x0801b028
 800bb08:	0801cf28 	.word	0x0801cf28

0800bb0c <CheckForEnterKey>:
{
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	b082      	sub	sp, #8
	for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800bb10:	2300      	movs	r3, #0
 800bb12:	2b3f      	cmp	r3, #63	; 0x3f
 800bb14:	d81b      	bhi.n	800bb4e <CheckForEnterKey+0x42>
		if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800bb16:	4a0f      	ldr	r2, [pc, #60]	; (800bb54 <CheckForEnterKey+0x48>)
 800bb18:	7812      	ldrb	r2, [r2, #0]
 800bb1a:	3a01      	subs	r2, #1
 800bb1c:	001c      	movs	r4, r3
 800bb1e:	0190      	lsls	r0, r2, #6
 800bb20:	490d      	ldr	r1, [pc, #52]	; (800bb58 <CheckForEnterKey+0x4c>)
 800bb22:	1809      	adds	r1, r1, r0
 800bb24:	5cc9      	ldrb	r1, [r1, r3]
 800bb26:	290d      	cmp	r1, #13
 800bb28:	d002      	beq.n	800bb30 <CheckForEnterKey+0x24>
	for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	e7f0      	b.n	800bb12 <CheckForEnterKey+0x6>
			UARTRxBuf[PcPort-1][chr] = 0;
 800bb30:	4b09      	ldr	r3, [pc, #36]	; (800bb58 <CheckForEnterKey+0x4c>)
 800bb32:	181a      	adds	r2, r3, r0
 800bb34:	2300      	movs	r3, #0
 800bb36:	5513      	strb	r3, [r2, r4]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800bb38:	4a08      	ldr	r2, [pc, #32]	; (800bb5c <CheckForEnterKey+0x50>)
 800bb3a:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		                // Stop the streaming task
 800bb3c:	4a08      	ldr	r2, [pc, #32]	; (800bb60 <CheckForEnterKey+0x54>)
 800bb3e:	7013      	strb	r3, [r2, #0]
			xTimerStop( xTimer, 0 );            // Stop the timeout timer
 800bb40:	4a08      	ldr	r2, [pc, #32]	; (800bb64 <CheckForEnterKey+0x58>)
 800bb42:	6810      	ldr	r0, [r2, #0]
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	2200      	movs	r2, #0
 800bb48:	390a      	subs	r1, #10
 800bb4a:	f005 fcab 	bl	80114a4 <xTimerGenericCommand>
}
 800bb4e:	b002      	add	sp, #8
 800bb50:	bd10      	pop	{r4, pc}
 800bb52:	46c0      	nop			; (mov r8, r8)
 800bb54:	20000a9f 	.word	0x20000a9f
 800bb58:	200012b8 	.word	0x200012b8
 800bb5c:	20001b4c 	.word	0x20001b4c
 800bb60:	20006f35 	.word	0x20006f35
 800bb64:	20001b74 	.word	0x20001b74

0800bb68 <HandleTimeout>:
{
 800bb68:	b510      	push	{r4, lr}
  tid = ( uint32_t ) pvTimerGetTimerID( xTimer );
 800bb6a:	f005 fdd4 	bl	8011716 <pvTimerGetTimerID>
  if (TIMERID_TIMEOUT_MEASUREMENT == tid)
 800bb6e:	28ff      	cmp	r0, #255	; 0xff
 800bb70:	d000      	beq.n	800bb74 <HandleTimeout+0xc>
}
 800bb72:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		                                    // Stop the streaming task
 800bb74:	2300      	movs	r3, #0
 800bb76:	4a02      	ldr	r2, [pc, #8]	; (800bb80 <HandleTimeout+0x18>)
 800bb78:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING;     // stop streaming
 800bb7a:	4a02      	ldr	r2, [pc, #8]	; (800bb84 <HandleTimeout+0x1c>)
 800bb7c:	7013      	strb	r3, [r2, #0]
}
 800bb7e:	e7f8      	b.n	800bb72 <HandleTimeout+0xa>
 800bb80:	20006f35 	.word	0x20006f35
 800bb84:	20001b4c 	.word	0x20001b4c

0800bb88 <SystemClock_Config>:
{
 800bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb8a:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bb8c:	2401      	movs	r4, #1
 800bb8e:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bb90:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bb92:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue =16;
 800bb94:	2310      	movs	r3, #16
 800bb96:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bb98:	2702      	movs	r7, #2
 800bb9a:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bb9c:	2680      	movs	r6, #128	; 0x80
 800bb9e:	0276      	lsls	r6, r6, #9
 800bba0:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800bba2:	2380      	movs	r3, #128	; 0x80
 800bba4:	035b      	lsls	r3, r3, #13
 800bba6:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800bba8:	2500      	movs	r5, #0
 800bbaa:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bbac:	a80d      	add	r0, sp, #52	; 0x34
 800bbae:	f007 fbc5 	bl	801333c <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800bbb2:	2307      	movs	r3, #7
 800bbb4:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bbb6:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bbb8:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bbba:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1);
 800bbbc:	2101      	movs	r1, #1
 800bbbe:	a809      	add	r0, sp, #36	; 0x24
 800bbc0:	f007 fe60 	bl	8013884 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
 800bbc4:	4b1a      	ldr	r3, [pc, #104]	; (800bc30 <SystemClock_Config+0xa8>)
 800bbc6:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800bbc8:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800bbca:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800bbcc:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bbce:	a802      	add	r0, sp, #8
 800bbd0:	f007 ffec 	bl	8013bac <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800bbd4:	4d17      	ldr	r5, [pc, #92]	; (800bc34 <SystemClock_Config+0xac>)
 800bbd6:	69ea      	ldr	r2, [r5, #28]
 800bbd8:	2180      	movs	r1, #128	; 0x80
 800bbda:	0549      	lsls	r1, r1, #21
 800bbdc:	430a      	orrs	r2, r1
 800bbde:	61ea      	str	r2, [r5, #28]
 800bbe0:	69eb      	ldr	r3, [r5, #28]
 800bbe2:	400b      	ands	r3, r1
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800bbe8:	f007 fb9e 	bl	8013328 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bbec:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800bbee:	23c0      	movs	r3, #192	; 0xc0
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bbf4:	a802      	add	r0, sp, #8
 800bbf6:	f007 ffd9 	bl	8013bac <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800bbfa:	f007 ffb3 	bl	8013b64 <HAL_RCC_GetHCLKFreq>
 800bbfe:	21fa      	movs	r1, #250	; 0xfa
 800bc00:	0089      	lsls	r1, r1, #2
 800bc02:	f7f4 faa5 	bl	8000150 <__udivsi3>
 800bc06:	f006 faff 	bl	8012208 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800bc0a:	2004      	movs	r0, #4
 800bc0c:	f006 fb18 	bl	8012240 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800bc10:	69ab      	ldr	r3, [r5, #24]
 800bc12:	4323      	orrs	r3, r4
 800bc14:	61ab      	str	r3, [r5, #24]
 800bc16:	69ab      	ldr	r3, [r5, #24]
 800bc18:	401c      	ands	r4, r3
 800bc1a:	9401      	str	r4, [sp, #4]
 800bc1c:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800bc1e:	2001      	movs	r0, #1
 800bc20:	2200      	movs	r2, #0
 800bc22:	2100      	movs	r1, #0
 800bc24:	4240      	negs	r0, r0
 800bc26:	f006 faab 	bl	8012180 <HAL_NVIC_SetPriority>
}
 800bc2a:	b01b      	add	sp, #108	; 0x6c
 800bc2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc2e:	46c0      	nop			; (mov r8, r8)
 800bc30:	00040003 	.word	0x00040003
 800bc34:	40021000 	.word	0x40021000

0800bc38 <Module_Peripheral_Init>:
{
 800bc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc3a:	b085      	sub	sp, #20
	MX_USART2_UART_Init();
 800bc3c:	f003 fc14 	bl	800f468 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800bc40:	f003 fc2a 	bl	800f498 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800bc44:	f003 fc40 	bl	800f4c8 <MX_USART4_UART_Init>
	MX_USART5_UART_Init();
 800bc48:	f003 fc56 	bl	800f4f8 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800bc4c:	f003 fc6c 	bl	800f528 <MX_USART6_UART_Init>
	HX711_GPIO_Init();// GPIO init
 800bc50:	f003 f842 	bl	800ecd8 <HX711_GPIO_Init>
	xTaskCreate(LoadcellTask,(const char* ) "LoadcellTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&LoadcellHandle);
 800bc54:	22a0      	movs	r2, #160	; 0xa0
 800bc56:	2300      	movs	r3, #0
 800bc58:	9303      	str	r3, [sp, #12]
 800bc5a:	9302      	str	r3, [sp, #8]
 800bc5c:	4b27      	ldr	r3, [pc, #156]	; (800bcfc <Module_Peripheral_Init+0xc4>)
 800bc5e:	9301      	str	r3, [sp, #4]
 800bc60:	2303      	movs	r3, #3
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	2300      	movs	r3, #0
 800bc66:	0052      	lsls	r2, r2, #1
 800bc68:	4925      	ldr	r1, [pc, #148]	; (800bd00 <Module_Peripheral_Init+0xc8>)
 800bc6a:	4826      	ldr	r0, [pc, #152]	; (800bd04 <Module_Peripheral_Init+0xcc>)
 800bc6c:	f004 fd64 	bl	8010738 <xTaskGenericCreate>
	EE_ReadVariable(_EE_cell_full_scale,&full_scale);
 800bc70:	20fa      	movs	r0, #250	; 0xfa
 800bc72:	4925      	ldr	r1, [pc, #148]	; (800bd08 <Module_Peripheral_Init+0xd0>)
 800bc74:	0040      	lsls	r0, r0, #1
 800bc76:	f7fb ffc9 	bl	8007c0c <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_drift_LSB,&word_LSB);
 800bc7a:	4d24      	ldr	r5, [pc, #144]	; (800bd0c <Module_Peripheral_Init+0xd4>)
 800bc7c:	20f6      	movs	r0, #246	; 0xf6
 800bc7e:	0029      	movs	r1, r5
 800bc80:	30ff      	adds	r0, #255	; 0xff
 800bc82:	f7fb ffc3 	bl	8007c0c <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_drift_MSB,&word_MSB);
 800bc86:	4c22      	ldr	r4, [pc, #136]	; (800bd10 <Module_Peripheral_Init+0xd8>)
 800bc88:	20fb      	movs	r0, #251	; 0xfb
 800bc8a:	0021      	movs	r1, r4
 800bc8c:	0040      	lsls	r0, r0, #1
 800bc8e:	f7fb ffbd 	bl	8007c0c <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800bc92:	882b      	ldrh	r3, [r5, #0]
 800bc94:	8822      	ldrh	r2, [r4, #0]
 800bc96:	0412      	lsls	r2, r2, #16
 800bc98:	189b      	adds	r3, r3, r2
 800bc9a:	4f1e      	ldr	r7, [pc, #120]	; (800bd14 <Module_Peripheral_Init+0xdc>)
 800bc9c:	603b      	str	r3, [r7, #0]
	cell_drift =*(float*) &temp32;
 800bc9e:	4a1e      	ldr	r2, [pc, #120]	; (800bd18 <Module_Peripheral_Init+0xe0>)
 800bca0:	6013      	str	r3, [r2, #0]
	EE_ReadVariable(_EE_cell_output_LSB,&word_LSB);
 800bca2:	20f8      	movs	r0, #248	; 0xf8
 800bca4:	0029      	movs	r1, r5
 800bca6:	30ff      	adds	r0, #255	; 0xff
 800bca8:	f7fb ffb0 	bl	8007c0c <EE_ReadVariable>
	EE_ReadVariable(_EE_cell_output_MSB,&word_MSB);
 800bcac:	20fc      	movs	r0, #252	; 0xfc
 800bcae:	0021      	movs	r1, r4
 800bcb0:	0040      	lsls	r0, r0, #1
 800bcb2:	f7fb ffab 	bl	8007c0c <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800bcb6:	882b      	ldrh	r3, [r5, #0]
 800bcb8:	8822      	ldrh	r2, [r4, #0]
 800bcba:	0412      	lsls	r2, r2, #16
 800bcbc:	189b      	adds	r3, r3, r2
 800bcbe:	603b      	str	r3, [r7, #0]
	cell_output =*(float*) &temp32;
 800bcc0:	4e16      	ldr	r6, [pc, #88]	; (800bd1c <Module_Peripheral_Init+0xe4>)
 800bcc2:	6033      	str	r3, [r6, #0]
	EE_ReadVariable(_EE_zero_drift_LSB,&word_LSB);
 800bcc4:	20fa      	movs	r0, #250	; 0xfa
 800bcc6:	0029      	movs	r1, r5
 800bcc8:	30ff      	adds	r0, #255	; 0xff
 800bcca:	f7fb ff9f 	bl	8007c0c <EE_ReadVariable>
	EE_ReadVariable(_EE_zero_drift_MSB,&word_MSB);
 800bcce:	20fd      	movs	r0, #253	; 0xfd
 800bcd0:	0021      	movs	r1, r4
 800bcd2:	0040      	lsls	r0, r0, #1
 800bcd4:	f7fb ff9a 	bl	8007c0c <EE_ReadVariable>
	temp32 =(uint32_t) word_LSB + ((uint32_t) word_MSB << 16);
 800bcd8:	882b      	ldrh	r3, [r5, #0]
 800bcda:	8822      	ldrh	r2, [r4, #0]
 800bcdc:	0412      	lsls	r2, r2, #16
 800bcde:	189b      	adds	r3, r3, r2
 800bce0:	603b      	str	r3, [r7, #0]
	Zero_Drift =*(float*) &temp32;
 800bce2:	4a0f      	ldr	r2, [pc, #60]	; (800bd20 <Module_Peripheral_Init+0xe8>)
 800bce4:	6013      	str	r3, [r2, #0]
	calibration_factor =cell_output * AVDD / 1000.0f;// mV
 800bce6:	490f      	ldr	r1, [pc, #60]	; (800bd24 <Module_Peripheral_Init+0xec>)
 800bce8:	6830      	ldr	r0, [r6, #0]
 800bcea:	f7f5 f8dd 	bl	8000ea8 <__aeabi_fmul>
 800bcee:	490e      	ldr	r1, [pc, #56]	; (800bd28 <Module_Peripheral_Init+0xf0>)
 800bcf0:	f7f4 ff02 	bl	8000af8 <__aeabi_fdiv>
 800bcf4:	4b0d      	ldr	r3, [pc, #52]	; (800bd2c <Module_Peripheral_Init+0xf4>)
 800bcf6:	6018      	str	r0, [r3, #0]
}
 800bcf8:	b005      	add	sp, #20
 800bcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcfc:	20001734 	.word	0x20001734
 800bd00:	0801c824 	.word	0x0801c824
 800bd04:	0800d145 	.word	0x0800d145
 800bd08:	20001b44 	.word	0x20001b44
 800bd0c:	20001b70 	.word	0x20001b70
 800bd10:	20001b72 	.word	0x20001b72
 800bd14:	20001b54 	.word	0x20001b54
 800bd18:	20000088 	.word	0x20000088
 800bd1c:	20001b40 	.word	0x20001b40
 800bd20:	20001b38 	.word	0x20001b38
 800bd24:	40400000 	.word	0x40400000
 800bd28:	447a0000 	.word	0x447a0000
 800bd2c:	20001b3c 	.word	0x20001b3c

0800bd30 <SaveToRO>:
{
 800bd30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd32:	46c6      	mov	lr, r8
 800bd34:	b500      	push	{lr}
 800bd36:	b086      	sub	sp, #24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800bd38:	2215      	movs	r2, #21
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	4668      	mov	r0, sp
 800bd3e:	f009 faa3 	bl	8015288 <memset>
	HAL_FLASH_Unlock();
 800bd42:	f007 f883 	bl	8012e4c <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800bd46:	4866      	ldr	r0, [pc, #408]	; (800bee0 <SaveToRO+0x1b0>)
 800bd48:	f007 f92e 	bl	8012fa8 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bd4c:	4865      	ldr	r0, [pc, #404]	; (800bee4 <SaveToRO+0x1b4>)
 800bd4e:	f007 f89b 	bl	8012e88 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d10b      	bne.n	800bd6e <SaveToRO+0x3e>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800bd56:	4a64      	ldr	r2, [pc, #400]	; (800bee8 <SaveToRO+0x1b8>)
 800bd58:	6913      	ldr	r3, [r2, #16]
 800bd5a:	2102      	movs	r1, #2
 800bd5c:	438b      	bics	r3, r1
 800bd5e:	6113      	str	r3, [r2, #16]
	if (myID)
 800bd60:	4b62      	ldr	r3, [pc, #392]	; (800beec <SaveToRO+0x1bc>)
 800bd62:	781a      	ldrb	r2, [r3, #0]
 800bd64:	2a00      	cmp	r2, #0
 800bd66:	d109      	bne.n	800bd7c <SaveToRO+0x4c>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800bd68:	2400      	movs	r4, #0
 800bd6a:	4e61      	ldr	r6, [pc, #388]	; (800bef0 <SaveToRO+0x1c0>)
 800bd6c:	e081      	b.n	800be72 <SaveToRO+0x142>
		return pFlash.ErrorCode;
 800bd6e:	4b61      	ldr	r3, [pc, #388]	; (800bef4 <SaveToRO+0x1c4>)
 800bd70:	69d8      	ldr	r0, [r3, #28]
 800bd72:	b2c0      	uxtb	r0, r0
}
 800bd74:	b006      	add	sp, #24
 800bd76:	bc04      	pop	{r2}
 800bd78:	4690      	mov	r8, r2
 800bd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800bd7c:	4b5e      	ldr	r3, [pc, #376]	; (800bef8 <SaveToRO+0x1c8>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	021b      	lsls	r3, r3, #8
 800bd82:	18d2      	adds	r2, r2, r3
 800bd84:	b292      	uxth	r2, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800bd86:	2300      	movs	r3, #0
 800bd88:	4955      	ldr	r1, [pc, #340]	; (800bee0 <SaveToRO+0x1b0>)
 800bd8a:	2001      	movs	r0, #1
 800bd8c:	f007 f8aa 	bl	8012ee4 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bd90:	4854      	ldr	r0, [pc, #336]	; (800bee4 <SaveToRO+0x1b4>)
 800bd92:	f007 f879 	bl	8012e88 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d107      	bne.n	800bdaa <SaveToRO+0x7a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bd9a:	4a53      	ldr	r2, [pc, #332]	; (800bee8 <SaveToRO+0x1b8>)
 800bd9c:	6913      	ldr	r3, [r2, #16]
 800bd9e:	2101      	movs	r1, #1
 800bda0:	438b      	bics	r3, r1
 800bda2:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800bda4:	2601      	movs	r6, #1
	uint16_t add = 2, temp = 0;
 800bda6:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800bda8:	e02e      	b.n	800be08 <SaveToRO+0xd8>
			return pFlash.ErrorCode;
 800bdaa:	4b52      	ldr	r3, [pc, #328]	; (800bef4 <SaveToRO+0x1c4>)
 800bdac:	69d8      	ldr	r0, [r3, #28]
 800bdae:	b2c0      	uxtb	r0, r0
 800bdb0:	e7e0      	b.n	800bd74 <SaveToRO+0x44>
						return pFlash.ErrorCode;
 800bdb2:	4b50      	ldr	r3, [pc, #320]	; (800bef4 <SaveToRO+0x1c4>)
 800bdb4:	69d8      	ldr	r0, [r3, #28]
 800bdb6:	b2c0      	uxtb	r0, r0
 800bdb8:	e7dc      	b.n	800bd74 <SaveToRO+0x44>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800bdba:	3401      	adds	r4, #1
 800bdbc:	b2e4      	uxtb	r4, r4
 800bdbe:	2c0a      	cmp	r4, #10
 800bdc0:	d820      	bhi.n	800be04 <SaveToRO+0xd4>
				if (array[i-1][0]) {
 800bdc2:	1e72      	subs	r2, r6, #1
 800bdc4:	2316      	movs	r3, #22
 800bdc6:	4353      	muls	r3, r2
 800bdc8:	494c      	ldr	r1, [pc, #304]	; (800befc <SaveToRO+0x1cc>)
 800bdca:	5a5b      	ldrh	r3, [r3, r1]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d0f4      	beq.n	800bdba <SaveToRO+0x8a>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800bdd0:	0093      	lsls	r3, r2, #2
 800bdd2:	189b      	adds	r3, r3, r2
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	189b      	adds	r3, r3, r2
 800bdd8:	191b      	adds	r3, r3, r4
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	5a5a      	ldrh	r2, [r3, r1]
 800bdde:	4b40      	ldr	r3, [pc, #256]	; (800bee0 <SaveToRO+0x1b0>)
 800bde0:	18e9      	adds	r1, r5, r3
 800bde2:	2300      	movs	r3, #0
 800bde4:	2001      	movs	r0, #1
 800bde6:	f007 f87d 	bl	8012ee4 <HAL_FLASH_Program>
					add += 2;
 800bdea:	3502      	adds	r5, #2
 800bdec:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bdee:	483d      	ldr	r0, [pc, #244]	; (800bee4 <SaveToRO+0x1b4>)
 800bdf0:	f007 f84a 	bl	8012e88 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d1dc      	bne.n	800bdb2 <SaveToRO+0x82>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bdf8:	4a3b      	ldr	r2, [pc, #236]	; (800bee8 <SaveToRO+0x1b8>)
 800bdfa:	6913      	ldr	r3, [r2, #16]
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	438b      	bics	r3, r1
 800be00:	6113      	str	r3, [r2, #16]
 800be02:	e7da      	b.n	800bdba <SaveToRO+0x8a>
		for(uint8_t i=1 ; i<=N ; i++)
 800be04:	3601      	adds	r6, #1
 800be06:	b2f6      	uxtb	r6, r6
 800be08:	4b3b      	ldr	r3, [pc, #236]	; (800bef8 <SaveToRO+0x1c8>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	42b3      	cmp	r3, r6
 800be0e:	d3ab      	bcc.n	800bd68 <SaveToRO+0x38>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800be10:	2400      	movs	r4, #0
 800be12:	e7d4      	b.n	800bdbe <SaveToRO+0x8e>
					return pFlash.ErrorCode;
 800be14:	4b37      	ldr	r3, [pc, #220]	; (800bef4 <SaveToRO+0x1c4>)
 800be16:	69d8      	ldr	r0, [r3, #28]
 800be18:	b2c0      	uxtb	r0, r0
 800be1a:	e7ab      	b.n	800bd74 <SaveToRO+0x44>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800be1c:	2500      	movs	r5, #0
 800be1e:	00bb      	lsls	r3, r7, #2
 800be20:	19db      	adds	r3, r3, r7
 800be22:	009a      	lsls	r2, r3, #2
 800be24:	4b36      	ldr	r3, [pc, #216]	; (800bf00 <SaveToRO+0x1d0>)
 800be26:	189b      	adds	r3, r3, r2
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	4698      	mov	r8, r3
 800be2c:	0018      	movs	r0, r3
 800be2e:	f7f4 f973 	bl	8000118 <strlen>
 800be32:	3001      	adds	r0, #1
 800be34:	0840      	lsrs	r0, r0, #1
 800be36:	4285      	cmp	r5, r0
 800be38:	d219      	bcs.n	800be6e <SaveToRO+0x13e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800be3a:	006b      	lsls	r3, r5, #1
 800be3c:	4642      	mov	r2, r8
 800be3e:	5ad2      	ldrh	r2, [r2, r3]
 800be40:	2300      	movs	r3, #0
 800be42:	0031      	movs	r1, r6
 800be44:	2001      	movs	r0, #1
 800be46:	f007 f84d 	bl	8012ee4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800be4a:	4826      	ldr	r0, [pc, #152]	; (800bee4 <SaveToRO+0x1b4>)
 800be4c:	f007 f81c 	bl	8012e88 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800be50:	2800      	cmp	r0, #0
 800be52:	d108      	bne.n	800be66 <SaveToRO+0x136>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800be54:	4a24      	ldr	r2, [pc, #144]	; (800bee8 <SaveToRO+0x1b8>)
 800be56:	6913      	ldr	r3, [r2, #16]
 800be58:	2101      	movs	r1, #1
 800be5a:	438b      	bics	r3, r1
 800be5c:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800be5e:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800be60:	3501      	adds	r5, #1
 800be62:	b2ed      	uxtb	r5, r5
 800be64:	e7db      	b.n	800be1e <SaveToRO+0xee>
					return pFlash.ErrorCode;
 800be66:	4b23      	ldr	r3, [pc, #140]	; (800bef4 <SaveToRO+0x1c4>)
 800be68:	69d8      	ldr	r0, [r3, #28]
 800be6a:	b2c0      	uxtb	r0, r0
 800be6c:	e782      	b.n	800bd74 <SaveToRO+0x44>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800be6e:	3401      	adds	r4, #1
 800be70:	b2e4      	uxtb	r4, r4
 800be72:	4b24      	ldr	r3, [pc, #144]	; (800bf04 <SaveToRO+0x1d4>)
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	42a3      	cmp	r3, r4
 800be78:	d92d      	bls.n	800bed6 <SaveToRO+0x1a6>
		if (snippets[s].cond.conditionType) 
 800be7a:	0027      	movs	r7, r4
 800be7c:	00a3      	lsls	r3, r4, #2
 800be7e:	191b      	adds	r3, r3, r4
 800be80:	009a      	lsls	r2, r3, #2
 800be82:	4b1f      	ldr	r3, [pc, #124]	; (800bf00 <SaveToRO+0x1d0>)
 800be84:	5cd3      	ldrb	r3, [r2, r3]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d0f1      	beq.n	800be6e <SaveToRO+0x13e>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800be8a:	23fe      	movs	r3, #254	; 0xfe
 800be8c:	466a      	mov	r2, sp
 800be8e:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800be90:	00a3      	lsls	r3, r4, #2
 800be92:	191b      	adds	r3, r3, r4
 800be94:	0099      	lsls	r1, r3, #2
 800be96:	4b1a      	ldr	r3, [pc, #104]	; (800bf00 <SaveToRO+0x1d0>)
 800be98:	18c9      	adds	r1, r1, r3
 800be9a:	2214      	movs	r2, #20
 800be9c:	466b      	mov	r3, sp
 800be9e:	1c58      	adds	r0, r3, #1
 800bea0:	f009 f9e9 	bl	8015276 <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800bea4:	2500      	movs	r5, #0
 800bea6:	2d09      	cmp	r5, #9
 800bea8:	d8b8      	bhi.n	800be1c <SaveToRO+0xec>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800beaa:	006b      	lsls	r3, r5, #1
 800beac:	466a      	mov	r2, sp
 800beae:	5ad2      	ldrh	r2, [r2, r3]
 800beb0:	2300      	movs	r3, #0
 800beb2:	0031      	movs	r1, r6
 800beb4:	2001      	movs	r0, #1
 800beb6:	f007 f815 	bl	8012ee4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800beba:	480a      	ldr	r0, [pc, #40]	; (800bee4 <SaveToRO+0x1b4>)
 800bebc:	f006 ffe4 	bl	8012e88 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d1a7      	bne.n	800be14 <SaveToRO+0xe4>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bec4:	4a08      	ldr	r2, [pc, #32]	; (800bee8 <SaveToRO+0x1b8>)
 800bec6:	6913      	ldr	r3, [r2, #16]
 800bec8:	2101      	movs	r1, #1
 800beca:	438b      	bics	r3, r1
 800becc:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800bece:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800bed0:	3501      	adds	r5, #1
 800bed2:	b2ed      	uxtb	r5, r5
 800bed4:	e7e7      	b.n	800bea6 <SaveToRO+0x176>
	HAL_FLASH_Lock();
 800bed6:	f006 ffcd 	bl	8012e74 <HAL_FLASH_Lock>
	return result;
 800beda:	2000      	movs	r0, #0
 800bedc:	e74a      	b.n	800bd74 <SaveToRO+0x44>
 800bede:	46c0      	nop			; (mov r8, r8)
 800bee0:	0801d800 	.word	0x0801d800
 800bee4:	0000c350 	.word	0x0000c350
 800bee8:	40022000 	.word	0x40022000
 800beec:	20001066 	.word	0x20001066
 800bef0:	0801dc00 	.word	0x0801dc00
 800bef4:	200072b0 	.word	0x200072b0
 800bef8:	2000001c 	.word	0x2000001c
 800befc:	20000aa0 	.word	0x20000aa0
 800bf00:	20006dbc 	.word	0x20006dbc
 800bf04:	20001207 	.word	0x20001207

0800bf08 <ClearROtopology>:
{
 800bf08:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800bf0a:	228f      	movs	r2, #143	; 0x8f
 800bf0c:	0092      	lsls	r2, r2, #2
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4805      	ldr	r0, [pc, #20]	; (800bf28 <ClearROtopology+0x20>)
 800bf12:	f009 f9b9 	bl	8015288 <memset>
	N = 1; myID = 0;
 800bf16:	4b05      	ldr	r3, [pc, #20]	; (800bf2c <ClearROtopology+0x24>)
 800bf18:	2201      	movs	r2, #1
 800bf1a:	701a      	strb	r2, [r3, #0]
 800bf1c:	4b04      	ldr	r3, [pc, #16]	; (800bf30 <ClearROtopology+0x28>)
 800bf1e:	2200      	movs	r2, #0
 800bf20:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800bf22:	f7ff ff05 	bl	800bd30 <SaveToRO>
}
 800bf26:	bd10      	pop	{r4, pc}
 800bf28:	20000aa0 	.word	0x20000aa0
 800bf2c:	2000001c 	.word	0x2000001c
 800bf30:	20001066 	.word	0x20001066

0800bf34 <RegisterModuleCLICommands>:
{
 800bf34:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &demoCommandDefinition );
 800bf36:	4811      	ldr	r0, [pc, #68]	; (800bf7c <RegisterModuleCLICommands+0x48>)
 800bf38:	f003 fe0a 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &sampleCommandDefinition );
 800bf3c:	4810      	ldr	r0, [pc, #64]	; (800bf80 <RegisterModuleCLICommands+0x4c>)
 800bf3e:	f003 fe07 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &streamCommandDefinition);
 800bf42:	4810      	ldr	r0, [pc, #64]	; (800bf84 <RegisterModuleCLICommands+0x50>)
 800bf44:	f003 fe04 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &stopCommandDefinition);
 800bf48:	480f      	ldr	r0, [pc, #60]	; (800bf88 <RegisterModuleCLICommands+0x54>)
 800bf4a:	f003 fe01 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unitCommandDefinition);
 800bf4e:	480f      	ldr	r0, [pc, #60]	; (800bf8c <RegisterModuleCLICommands+0x58>)
 800bf50:	f003 fdfe 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &rateCommandDefinition);
 800bf54:	480e      	ldr	r0, [pc, #56]	; (800bf90 <RegisterModuleCLICommands+0x5c>)
 800bf56:	f003 fdfb 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &calibrationCommandDefinition);
 800bf5a:	480e      	ldr	r0, [pc, #56]	; (800bf94 <RegisterModuleCLICommands+0x60>)
 800bf5c:	f003 fdf8 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &zerocalCommandDefinition);
 800bf60:	480d      	ldr	r0, [pc, #52]	; (800bf98 <RegisterModuleCLICommands+0x64>)
 800bf62:	f003 fdf5 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &weight1CommandDefinition);
 800bf66:	480d      	ldr	r0, [pc, #52]	; (800bf9c <RegisterModuleCLICommands+0x68>)
 800bf68:	f003 fdf2 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &weight2CommandDefinition);
 800bf6c:	480c      	ldr	r0, [pc, #48]	; (800bfa0 <RegisterModuleCLICommands+0x6c>)
 800bf6e:	f003 fdef 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dataformatCommandDefinition);
 800bf72:	480c      	ldr	r0, [pc, #48]	; (800bfa4 <RegisterModuleCLICommands+0x70>)
 800bf74:	f003 fdec 	bl	800fb50 <FreeRTOS_CLIRegisterCommand>
}
 800bf78:	bd10      	pop	{r4, pc}
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	0801c950 	.word	0x0801c950
 800bf80:	0801c9e4 	.word	0x0801c9e4
 800bf84:	0801ce84 	.word	0x0801ce84
 800bf88:	0801c9f4 	.word	0x0801c9f4
 800bf8c:	0801cf48 	.word	0x0801cf48
 800bf90:	0801c9d4 	.word	0x0801c9d4
 800bf94:	0801c8e4 	.word	0x0801c8e4
 800bf98:	0801cfc8 	.word	0x0801cfc8
 800bf9c:	0801cf58 	.word	0x0801cf58
 800bfa0:	0801cf70 	.word	0x0801cf70
 800bfa4:	0801c8f4 	.word	0x0801c8f4

0800bfa8 <GetPort>:
	if (huart->Instance == USART4)
 800bfa8:	6803      	ldr	r3, [r0, #0]
 800bfaa:	4a0d      	ldr	r2, [pc, #52]	; (800bfe0 <GetPort+0x38>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d00f      	beq.n	800bfd0 <GetPort+0x28>
	else if (huart->Instance == USART2)
 800bfb0:	4a0c      	ldr	r2, [pc, #48]	; (800bfe4 <GetPort+0x3c>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d00e      	beq.n	800bfd4 <GetPort+0x2c>
	else if (huart->Instance == USART6)
 800bfb6:	4a0c      	ldr	r2, [pc, #48]	; (800bfe8 <GetPort+0x40>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d00d      	beq.n	800bfd8 <GetPort+0x30>
	else if (huart->Instance == USART3)
 800bfbc:	4a0b      	ldr	r2, [pc, #44]	; (800bfec <GetPort+0x44>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d00c      	beq.n	800bfdc <GetPort+0x34>
	else if (huart->Instance == USART5)
 800bfc2:	4a0b      	ldr	r2, [pc, #44]	; (800bff0 <GetPort+0x48>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d001      	beq.n	800bfcc <GetPort+0x24>
	return 0;
 800bfc8:	2000      	movs	r0, #0
}
 800bfca:	4770      	bx	lr
			return P5;
 800bfcc:	2005      	movs	r0, #5
 800bfce:	e7fc      	b.n	800bfca <GetPort+0x22>
			return P1;
 800bfd0:	2001      	movs	r0, #1
 800bfd2:	e7fa      	b.n	800bfca <GetPort+0x22>
			return P2;
 800bfd4:	2002      	movs	r0, #2
 800bfd6:	e7f8      	b.n	800bfca <GetPort+0x22>
			return P3;
 800bfd8:	2003      	movs	r0, #3
 800bfda:	e7f6      	b.n	800bfca <GetPort+0x22>
			return P4;
 800bfdc:	2004      	movs	r0, #4
 800bfde:	e7f4      	b.n	800bfca <GetPort+0x22>
 800bfe0:	40004c00 	.word	0x40004c00
 800bfe4:	40004400 	.word	0x40004400
 800bfe8:	40011400 	.word	0x40011400
 800bfec:	40004800 	.word	0x40004800
 800bff0:	40005000 	.word	0x40005000

0800bff4 <readHX711>:
{
 800bff4:	b510      	push	{r4, lr}
	while(HAL_GPIO_ReadPin(GPIOA,DOUT) == 1) {
 800bff6:	2180      	movs	r1, #128	; 0x80
 800bff8:	2090      	movs	r0, #144	; 0x90
 800bffa:	00c9      	lsls	r1, r1, #3
 800bffc:	05c0      	lsls	r0, r0, #23
 800bffe:	f007 f981 	bl	8013304 <HAL_GPIO_ReadPin>
 800c002:	2801      	cmp	r0, #1
 800c004:	d0f7      	beq.n	800bff6 <readHX711+0x2>
	portENTER_CRITICAL();
 800c006:	f005 fbf9 	bl	80117fc <vPortEnterCritical>
	for(j =0; j < pulses; j++) {
 800c00a:	2400      	movs	r4, #0
 800c00c:	e00b      	b.n	800c026 <readHX711+0x32>
		HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800c00e:	2180      	movs	r1, #128	; 0x80
 800c010:	2090      	movs	r0, #144	; 0x90
 800c012:	2200      	movs	r2, #0
 800c014:	0089      	lsls	r1, r1, #2
 800c016:	05c0      	lsls	r0, r0, #23
 800c018:	f007 f97b 	bl	8013312 <HAL_GPIO_WritePin>
		Delay_us(1);
 800c01c:	2001      	movs	r0, #1
 800c01e:	f003 f9ff 	bl	800f420 <StartMicroDelay>
	for(j =0; j < pulses; j++) {
 800c022:	3401      	adds	r4, #1
 800c024:	b2e4      	uxtb	r4, r4
 800c026:	4b23      	ldr	r3, [pc, #140]	; (800c0b4 <readHX711+0xc0>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	42a3      	cmp	r3, r4
 800c02c:	d91f      	bls.n	800c06e <readHX711+0x7a>
		HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_SET);
 800c02e:	2180      	movs	r1, #128	; 0x80
 800c030:	2090      	movs	r0, #144	; 0x90
 800c032:	2201      	movs	r2, #1
 800c034:	0089      	lsls	r1, r1, #2
 800c036:	05c0      	lsls	r0, r0, #23
 800c038:	f007 f96b 	bl	8013312 <HAL_GPIO_WritePin>
		Delay_us(1);
 800c03c:	2001      	movs	r0, #1
 800c03e:	f003 f9ef 	bl	800f420 <StartMicroDelay>
		if(j < 24) {
 800c042:	2c17      	cmp	r4, #23
 800c044:	d8e3      	bhi.n	800c00e <readHX711+0x1a>
			Current_pin_state =HAL_GPIO_ReadPin(GPIOA,DOUT);
 800c046:	2180      	movs	r1, #128	; 0x80
 800c048:	2090      	movs	r0, #144	; 0x90
 800c04a:	00c9      	lsls	r1, r1, #3
 800c04c:	05c0      	lsls	r0, r0, #23
 800c04e:	f007 f959 	bl	8013304 <HAL_GPIO_ReadPin>
 800c052:	1e43      	subs	r3, r0, #1
 800c054:	4198      	sbcs	r0, r3
 800c056:	b2c0      	uxtb	r0, r0
 800c058:	4b17      	ldr	r3, [pc, #92]	; (800c0b8 <readHX711+0xc4>)
 800c05a:	7018      	strb	r0, [r3, #0]
			Data |=Current_pin_state;
 800c05c:	4b17      	ldr	r3, [pc, #92]	; (800c0bc <readHX711+0xc8>)
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	4310      	orrs	r0, r2
 800c062:	6018      	str	r0, [r3, #0]
			if(j < 23) Data =Data << 1;
 800c064:	2c16      	cmp	r4, #22
 800c066:	d8d2      	bhi.n	800c00e <readHX711+0x1a>
 800c068:	0040      	lsls	r0, r0, #1
 800c06a:	6018      	str	r0, [r3, #0]
 800c06c:	e7cf      	b.n	800c00e <readHX711+0x1a>
	value =Data;
 800c06e:	4c14      	ldr	r4, [pc, #80]	; (800c0c0 <readHX711+0xcc>)
 800c070:	4b12      	ldr	r3, [pc, #72]	; (800c0bc <readHX711+0xc8>)
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	6022      	str	r2, [r4, #0]
	Data =0;
 800c076:	2200      	movs	r2, #0
 800c078:	601a      	str	r2, [r3, #0]
	portEXIT_CRITICAL();
 800c07a:	f005 fbcb 	bl	8011814 <vPortExitCritical>
	if(value > ADC_full_range) {
 800c07e:	6820      	ldr	r0, [r4, #0]
 800c080:	4b10      	ldr	r3, [pc, #64]	; (800c0c4 <readHX711+0xd0>)
 800c082:	4298      	cmp	r0, r3
 800c084:	d806      	bhi.n	800c094 <readHX711+0xa0>
		valuef =(float) value;
 800c086:	f7f5 fa6f 	bl	8001568 <__aeabi_ui2f>
 800c08a:	4b0f      	ldr	r3, [pc, #60]	; (800c0c8 <readHX711+0xd4>)
 800c08c:	6018      	str	r0, [r3, #0]
	return (valuef);		
 800c08e:	4b0e      	ldr	r3, [pc, #56]	; (800c0c8 <readHX711+0xd4>)
 800c090:	6818      	ldr	r0, [r3, #0]
}
 800c092:	bd10      	pop	{r4, pc}
		value = (~value & 0x00FFFFFF);
 800c094:	43c0      	mvns	r0, r0
 800c096:	0200      	lsls	r0, r0, #8
 800c098:	0a00      	lsrs	r0, r0, #8
		value +=1;// the output of the ADC
 800c09a:	3001      	adds	r0, #1
 800c09c:	4b08      	ldr	r3, [pc, #32]	; (800c0c0 <readHX711+0xcc>)
 800c09e:	6018      	str	r0, [r3, #0]
		valuef =-(float) value;
 800c0a0:	f7f5 fa62 	bl	8001568 <__aeabi_ui2f>
 800c0a4:	2380      	movs	r3, #128	; 0x80
 800c0a6:	061b      	lsls	r3, r3, #24
 800c0a8:	469c      	mov	ip, r3
 800c0aa:	4460      	add	r0, ip
 800c0ac:	4b06      	ldr	r3, [pc, #24]	; (800c0c8 <readHX711+0xd4>)
 800c0ae:	6018      	str	r0, [r3, #0]
 800c0b0:	e7ed      	b.n	800c08e <readHX711+0x9a>
 800c0b2:	46c0      	nop			; (mov r8, r8)
 800c0b4:	20001b46 	.word	0x20001b46
 800c0b8:	20001720 	.word	0x20001720
 800c0bc:	20001728 	.word	0x20001728
 800c0c0:	20001b58 	.word	0x20001b58
 800c0c4:	007fffff 	.word	0x007fffff
 800c0c8:	20001b5c 	.word	0x20001b5c

0800c0cc <weightCalculation>:
{
 800c0cc:	b570      	push	{r4, r5, r6, lr}
	rawvalue = (valuef * 0.5 * AVDD) / (ADC_full_range * gain) + cell_drift - IC_drift - Zero_Drift;//+0.000022;
 800c0ce:	4b22      	ldr	r3, [pc, #136]	; (800c158 <weightCalculation+0x8c>)
 800c0d0:	6818      	ldr	r0, [r3, #0]
 800c0d2:	f7f7 f827 	bl	8003124 <__aeabi_f2d>
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	4b20      	ldr	r3, [pc, #128]	; (800c15c <weightCalculation+0x90>)
 800c0da:	f7f6 f9ab 	bl	8002434 <__aeabi_dmul>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	4b1f      	ldr	r3, [pc, #124]	; (800c160 <weightCalculation+0x94>)
 800c0e2:	f7f6 f9a7 	bl	8002434 <__aeabi_dmul>
 800c0e6:	0004      	movs	r4, r0
 800c0e8:	000d      	movs	r5, r1
 800c0ea:	4b1e      	ldr	r3, [pc, #120]	; (800c164 <weightCalculation+0x98>)
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	05d8      	lsls	r0, r3, #23
 800c0f0:	1ac0      	subs	r0, r0, r3
 800c0f2:	f7f6 ffab 	bl	800304c <__aeabi_i2d>
 800c0f6:	0002      	movs	r2, r0
 800c0f8:	000b      	movs	r3, r1
 800c0fa:	0020      	movs	r0, r4
 800c0fc:	0029      	movs	r1, r5
 800c0fe:	f7f5 fd8f 	bl	8001c20 <__aeabi_ddiv>
 800c102:	0004      	movs	r4, r0
 800c104:	000d      	movs	r5, r1
 800c106:	4b18      	ldr	r3, [pc, #96]	; (800c168 <weightCalculation+0x9c>)
 800c108:	6818      	ldr	r0, [r3, #0]
 800c10a:	f7f7 f80b 	bl	8003124 <__aeabi_f2d>
 800c10e:	0022      	movs	r2, r4
 800c110:	002b      	movs	r3, r5
 800c112:	f7f5 fa69 	bl	80015e8 <__aeabi_dadd>
 800c116:	4a15      	ldr	r2, [pc, #84]	; (800c16c <weightCalculation+0xa0>)
 800c118:	4b15      	ldr	r3, [pc, #84]	; (800c170 <weightCalculation+0xa4>)
 800c11a:	f7f6 fbfd 	bl	8002918 <__aeabi_dsub>
 800c11e:	0004      	movs	r4, r0
 800c120:	000d      	movs	r5, r1
 800c122:	4b14      	ldr	r3, [pc, #80]	; (800c174 <weightCalculation+0xa8>)
 800c124:	6818      	ldr	r0, [r3, #0]
 800c126:	f7f6 fffd 	bl	8003124 <__aeabi_f2d>
 800c12a:	0002      	movs	r2, r0
 800c12c:	000b      	movs	r3, r1
 800c12e:	0020      	movs	r0, r4
 800c130:	0029      	movs	r1, r5
 800c132:	f7f6 fbf1 	bl	8002918 <__aeabi_dsub>
 800c136:	f7f7 f847 	bl	80031c8 <__aeabi_d2f>
 800c13a:	1c04      	adds	r4, r0, #0
 800c13c:	4b0e      	ldr	r3, [pc, #56]	; (800c178 <weightCalculation+0xac>)
 800c13e:	6018      	str	r0, [r3, #0]
	weight = (rawvalue * full_scale) / calibration_factor;
 800c140:	4b0e      	ldr	r3, [pc, #56]	; (800c17c <weightCalculation+0xb0>)
 800c142:	8818      	ldrh	r0, [r3, #0]
 800c144:	f7f5 f9c6 	bl	80014d4 <__aeabi_i2f>
 800c148:	1c21      	adds	r1, r4, #0
 800c14a:	f7f4 fead 	bl	8000ea8 <__aeabi_fmul>
 800c14e:	4b0c      	ldr	r3, [pc, #48]	; (800c180 <weightCalculation+0xb4>)
 800c150:	6819      	ldr	r1, [r3, #0]
 800c152:	f7f4 fcd1 	bl	8000af8 <__aeabi_fdiv>
}
 800c156:	bd70      	pop	{r4, r5, r6, pc}
 800c158:	20001b5c 	.word	0x20001b5c
 800c15c:	3fe00000 	.word	0x3fe00000
 800c160:	40080000 	.word	0x40080000
 800c164:	2000008c 	.word	0x2000008c
 800c168:	20000088 	.word	0x20000088
 800c16c:	62317873 	.word	0x62317873
 800c170:	3ee3abd9 	.word	0x3ee3abd9
 800c174:	20001b38 	.word	0x20001b38
 800c178:	20001b48 	.word	0x20001b48
 800c17c:	20001b44 	.word	0x20001b44
 800c180:	20001b3c 	.word	0x20001b3c

0800c184 <SetHX711Rate>:
{
 800c184:	b510      	push	{r4, lr}
 800c186:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800c188:	2180      	movs	r1, #128	; 0x80
 800c18a:	2090      	movs	r0, #144	; 0x90
 800c18c:	2200      	movs	r2, #0
 800c18e:	0089      	lsls	r1, r1, #2
 800c190:	05c0      	lsls	r0, r0, #23
 800c192:	f007 f8be 	bl	8013312 <HAL_GPIO_WritePin>
	rate=Data_Rate;
 800c196:	4b0d      	ldr	r3, [pc, #52]	; (800c1cc <SetHX711Rate+0x48>)
 800c198:	701c      	strb	r4, [r3, #0]
	switch(rate)
 800c19a:	2c0a      	cmp	r4, #10
 800c19c:	d008      	beq.n	800c1b0 <SetHX711Rate+0x2c>
 800c19e:	2c50      	cmp	r4, #80	; 0x50
 800c1a0:	d00d      	beq.n	800c1be <SetHX711Rate+0x3a>
		default: HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_RESET);
 800c1a2:	2090      	movs	r0, #144	; 0x90
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2140      	movs	r1, #64	; 0x40
 800c1a8:	05c0      	lsls	r0, r0, #23
 800c1aa:	f007 f8b2 	bl	8013312 <HAL_GPIO_WritePin>
}
 800c1ae:	e005      	b.n	800c1bc <SetHX711Rate+0x38>
		case(10): HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_RESET); break;
 800c1b0:	2090      	movs	r0, #144	; 0x90
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	2140      	movs	r1, #64	; 0x40
 800c1b6:	05c0      	lsls	r0, r0, #23
 800c1b8:	f007 f8ab 	bl	8013312 <HAL_GPIO_WritePin>
}
 800c1bc:	bd10      	pop	{r4, pc}
		case(80): HAL_GPIO_WritePin(GPIOA,RATE_pin,GPIO_PIN_SET); break;
 800c1be:	2090      	movs	r0, #144	; 0x90
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	2140      	movs	r1, #64	; 0x40
 800c1c4:	05c0      	lsls	r0, r0, #23
 800c1c6:	f007 f8a4 	bl	8013312 <HAL_GPIO_WritePin>
 800c1ca:	e7f7      	b.n	800c1bc <SetHX711Rate+0x38>
 800c1cc:	20001b47 	.word	0x20001b47

0800c1d0 <rateCommand>:
{
 800c1d0:	b530      	push	{r4, r5, lr}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	0004      	movs	r4, r0
 800c1d6:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800c1dc:	2c00      	cmp	r4, #0
 800c1de:	d101      	bne.n	800c1e4 <rateCommand+0x14>
 800c1e0:	b672      	cpsid	i
 800c1e2:	e7fe      	b.n	800c1e2 <rateCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c1e4:	aa01      	add	r2, sp, #4
 800c1e6:	2101      	movs	r1, #1
 800c1e8:	f003 fd38 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800c1ec:	0005      	movs	r5, r0
  if (!strncmp((const char *)pcParameterString1, "10", 2))
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	4914      	ldr	r1, [pc, #80]	; (800c244 <rateCommand+0x74>)
 800c1f2:	f009 fa87 	bl	8015704 <strncmp>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d00c      	beq.n	800c214 <rateCommand+0x44>
  else if (!strncmp((const char *)pcParameterString1, "80", 2))
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	4912      	ldr	r1, [pc, #72]	; (800c248 <rateCommand+0x78>)
 800c1fe:	0028      	movs	r0, r5
 800c200:	f009 fa80 	bl	8015704 <strncmp>
 800c204:	2800      	cmp	r0, #0
 800c206:	d014      	beq.n	800c232 <rateCommand+0x62>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800c208:	2213      	movs	r2, #19
 800c20a:	4910      	ldr	r1, [pc, #64]	; (800c24c <rateCommand+0x7c>)
 800c20c:	0020      	movs	r0, r4
 800c20e:	f009 f832 	bl	8015276 <memcpy>
 800c212:	e007      	b.n	800c224 <rateCommand+0x54>
    rate = 10;      // 10SPS
 800c214:	4b0e      	ldr	r3, [pc, #56]	; (800c250 <rateCommand+0x80>)
 800c216:	220a      	movs	r2, #10
 800c218:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement rate: 10\r\n" );
 800c21a:	3212      	adds	r2, #18
 800c21c:	490d      	ldr	r1, [pc, #52]	; (800c254 <rateCommand+0x84>)
 800c21e:	0020      	movs	r0, r4
 800c220:	f009 f829 	bl	8015276 <memcpy>
	SetHX711Rate(rate);
 800c224:	4b0a      	ldr	r3, [pc, #40]	; (800c250 <rateCommand+0x80>)
 800c226:	7818      	ldrb	r0, [r3, #0]
 800c228:	f7ff ffac 	bl	800c184 <SetHX711Rate>
}
 800c22c:	2000      	movs	r0, #0
 800c22e:	b003      	add	sp, #12
 800c230:	bd30      	pop	{r4, r5, pc}
    rate = 80;      // 80SPS
 800c232:	4b07      	ldr	r3, [pc, #28]	; (800c250 <rateCommand+0x80>)
 800c234:	2250      	movs	r2, #80	; 0x50
 800c236:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used measurement rate: 80\r\n" );
 800c238:	3a34      	subs	r2, #52	; 0x34
 800c23a:	4907      	ldr	r1, [pc, #28]	; (800c258 <rateCommand+0x88>)
 800c23c:	0020      	movs	r0, r4
 800c23e:	f009 f81a 	bl	8015276 <memcpy>
 800c242:	e7ef      	b.n	800c224 <rateCommand+0x54>
 800c244:	0801b150 	.word	0x0801b150
 800c248:	0801c9b4 	.word	0x0801c9b4
 800c24c:	0801b028 	.word	0x0801b028
 800c250:	20001b47 	.word	0x20001b47
 800c254:	0801c998 	.word	0x0801c998
 800c258:	0801c9b8 	.word	0x0801c9b8

0800c25c <formatModParamCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE formatModParamCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 800c25c:	b510      	push	{r4, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	0004      	movs	r4, r0
 800c262:	0010      	movs	r0, r2
	//Module_Status result = H26R0_OK;
  int8_t *pcParameterString1;
  portBASE_TYPE xParameterStringLength1 = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	9301      	str	r3, [sp, #4]

  /* Remove compile time warnings about unused parameters, and check the
  write buffer is not NULL.  NOTE - for simplicity, this example assumes the
  write buffer length is adequate, so does not check for buffer overflows. */
  ( void ) xWriteBufferLen;
  configASSERT( pcWriteBuffer );
 800c268:	2c00      	cmp	r4, #0
 800c26a:	d101      	bne.n	800c270 <formatModParamCommand+0x14>
 800c26c:	b672      	cpsid	i
 800c26e:	e7fe      	b.n	800c26e <formatModParamCommand+0x12>

  /* 1st parameter for naming of uart port: P1 to P6 */
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c270:	aa01      	add	r2, sp, #4
 800c272:	2101      	movs	r1, #1
 800c274:	f003 fcf2 	bl	800fc5c <FreeRTOS_CLIGetParameter>
  if (!strncmp((const char *)pcParameterString1, "u", 1))
 800c278:	7803      	ldrb	r3, [r0, #0]
 800c27a:	2b75      	cmp	r3, #117	; 0x75
 800c27c:	d00d      	beq.n	800c29a <formatModParamCommand+0x3e>
  {
    H26R0_DATA_FORMAT = FMT_UINT32;      
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: uint\r\n" );
  }
  else if (!strncmp((const char *)pcParameterString1, "f", 1))
 800c27e:	2b66      	cmp	r3, #102	; 0x66
 800c280:	d014      	beq.n	800c2ac <formatModParamCommand+0x50>
    H26R0_DATA_FORMAT = FMT_FLOAT;        
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: float\r\n" );
  }
	else
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800c282:	2213      	movs	r2, #19
 800c284:	490e      	ldr	r1, [pc, #56]	; (800c2c0 <formatModParamCommand+0x64>)
 800c286:	0020      	movs	r0, r4
 800c288:	f008 fff5 	bl	8015276 <memcpy>
	}
	SetHX711Rate(rate);
 800c28c:	4b0d      	ldr	r3, [pc, #52]	; (800c2c4 <formatModParamCommand+0x68>)
 800c28e:	7818      	ldrb	r0, [r3, #0]
 800c290:	f7ff ff78 	bl	800c184 <SetHX711Rate>
	return pdFALSE;	
}
 800c294:	2000      	movs	r0, #0
 800c296:	b002      	add	sp, #8
 800c298:	bd10      	pop	{r4, pc}
    H26R0_DATA_FORMAT = FMT_UINT32;      
 800c29a:	4b0b      	ldr	r3, [pc, #44]	; (800c2c8 <formatModParamCommand+0x6c>)
 800c29c:	2205      	movs	r2, #5
 800c29e:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: uint\r\n" );
 800c2a0:	3214      	adds	r2, #20
 800c2a2:	490a      	ldr	r1, [pc, #40]	; (800c2cc <formatModParamCommand+0x70>)
 800c2a4:	0020      	movs	r0, r4
 800c2a6:	f008 ffe6 	bl	8015276 <memcpy>
 800c2aa:	e7ef      	b.n	800c28c <formatModParamCommand+0x30>
    H26R0_DATA_FORMAT = FMT_FLOAT;        
 800c2ac:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <formatModParamCommand+0x6c>)
 800c2ae:	2207      	movs	r2, #7
 800c2b0:	701a      	strb	r2, [r3, #0]
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Used data format: float\r\n" );
 800c2b2:	3213      	adds	r2, #19
 800c2b4:	4906      	ldr	r1, [pc, #24]	; (800c2d0 <formatModParamCommand+0x74>)
 800c2b6:	0020      	movs	r0, r4
 800c2b8:	f008 ffdd 	bl	8015276 <memcpy>
 800c2bc:	e7e6      	b.n	800c28c <formatModParamCommand+0x30>
 800c2be:	46c0      	nop			; (mov r8, r8)
 800c2c0:	0801b028 	.word	0x0801b028
 800c2c4:	20001b47 	.word	0x20001b47
 800c2c8:	20000084 	.word	0x20000084
 800c2cc:	0801c960 	.word	0x0801c960
 800c2d0:	0801c97c 	.word	0x0801c97c

0800c2d4 <SetHX711Gain>:
	switch(ch)
 800c2d4:	2801      	cmp	r0, #1
 800c2d6:	d005      	beq.n	800c2e4 <SetHX711Gain+0x10>
 800c2d8:	2802      	cmp	r0, #2
 800c2da:	d00a      	beq.n	800c2f2 <SetHX711Gain+0x1e>
		default: pulses=25;
 800c2dc:	4b08      	ldr	r3, [pc, #32]	; (800c300 <SetHX711Gain+0x2c>)
 800c2de:	2219      	movs	r2, #25
 800c2e0:	701a      	strb	r2, [r3, #0]
}
 800c2e2:	e005      	b.n	800c2f0 <SetHX711Gain+0x1c>
		case(1): pulses=25;	gain=128; break;  //Chanel A, Gain factor 128
 800c2e4:	4b06      	ldr	r3, [pc, #24]	; (800c300 <SetHX711Gain+0x2c>)
 800c2e6:	2219      	movs	r2, #25
 800c2e8:	701a      	strb	r2, [r3, #0]
 800c2ea:	4b06      	ldr	r3, [pc, #24]	; (800c304 <SetHX711Gain+0x30>)
 800c2ec:	3267      	adds	r2, #103	; 0x67
 800c2ee:	701a      	strb	r2, [r3, #0]
}
 800c2f0:	4770      	bx	lr
		case(2): pulses=27; gain=32;  break;  //Chanel B, Gain factor 32
 800c2f2:	4b03      	ldr	r3, [pc, #12]	; (800c300 <SetHX711Gain+0x2c>)
 800c2f4:	221b      	movs	r2, #27
 800c2f6:	701a      	strb	r2, [r3, #0]
 800c2f8:	4b02      	ldr	r3, [pc, #8]	; (800c304 <SetHX711Gain+0x30>)
 800c2fa:	3205      	adds	r2, #5
 800c2fc:	701a      	strb	r2, [r3, #0]
 800c2fe:	e7f7      	b.n	800c2f0 <SetHX711Gain+0x1c>
 800c300:	20001b46 	.word	0x20001b46
 800c304:	2000008c 	.word	0x2000008c

0800c308 <Calibration>:
{
 800c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30a:	0004      	movs	r4, r0
 800c30c:	1c0f      	adds	r7, r1, #0
	cell_output=Cell_Output;
 800c30e:	4d1b      	ldr	r5, [pc, #108]	; (800c37c <Calibration+0x74>)
 800c310:	6029      	str	r1, [r5, #0]
	full_scale=Full_Scale;
 800c312:	4b1b      	ldr	r3, [pc, #108]	; (800c380 <Calibration+0x78>)
 800c314:	8018      	strh	r0, [r3, #0]
	cell_drift=Cell_Drift/1000.0f;
 800c316:	491b      	ldr	r1, [pc, #108]	; (800c384 <Calibration+0x7c>)
 800c318:	1c10      	adds	r0, r2, #0
 800c31a:	f7f4 fbed 	bl	8000af8 <__aeabi_fdiv>
 800c31e:	4e1a      	ldr	r6, [pc, #104]	; (800c388 <Calibration+0x80>)
 800c320:	6030      	str	r0, [r6, #0]
	calibration_factor=cell_output*AVDD/1000.0f;		// mV
 800c322:	491a      	ldr	r1, [pc, #104]	; (800c38c <Calibration+0x84>)
 800c324:	1c38      	adds	r0, r7, #0
 800c326:	f7f4 fdbf 	bl	8000ea8 <__aeabi_fmul>
 800c32a:	4916      	ldr	r1, [pc, #88]	; (800c384 <Calibration+0x7c>)
 800c32c:	f7f4 fbe4 	bl	8000af8 <__aeabi_fdiv>
 800c330:	4b17      	ldr	r3, [pc, #92]	; (800c390 <Calibration+0x88>)
 800c332:	6018      	str	r0, [r3, #0]
	EE_WriteVariable(_EE_cell_full_scale, full_scale);
 800c334:	20fa      	movs	r0, #250	; 0xfa
 800c336:	0021      	movs	r1, r4
 800c338:	0040      	lsls	r0, r0, #1
 800c33a:	f7fb fd19 	bl	8007d70 <EE_WriteVariable>
	word_LSB=*(uint16_t*)&cell_drift;
 800c33e:	8831      	ldrh	r1, [r6, #0]
 800c340:	4f14      	ldr	r7, [pc, #80]	; (800c394 <Calibration+0x8c>)
 800c342:	8039      	strh	r1, [r7, #0]
	word_MSB=*(((uint16_t*)&cell_drift)+1);
 800c344:	4c14      	ldr	r4, [pc, #80]	; (800c398 <Calibration+0x90>)
 800c346:	8873      	ldrh	r3, [r6, #2]
 800c348:	8023      	strh	r3, [r4, #0]
	EE_WriteVariable(_EE_cell_drift_LSB, word_LSB);
 800c34a:	20f6      	movs	r0, #246	; 0xf6
 800c34c:	30ff      	adds	r0, #255	; 0xff
 800c34e:	f7fb fd0f 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_cell_drift_MSB, word_MSB);
 800c352:	8821      	ldrh	r1, [r4, #0]
 800c354:	20fb      	movs	r0, #251	; 0xfb
 800c356:	0040      	lsls	r0, r0, #1
 800c358:	f7fb fd0a 	bl	8007d70 <EE_WriteVariable>
	word_LSB=*(uint16_t*)&cell_output;
 800c35c:	8829      	ldrh	r1, [r5, #0]
 800c35e:	8039      	strh	r1, [r7, #0]
	word_MSB=*(((uint16_t*)&cell_output)+1);
 800c360:	886b      	ldrh	r3, [r5, #2]
 800c362:	8023      	strh	r3, [r4, #0]
	EE_WriteVariable(_EE_cell_output_LSB, word_LSB);
 800c364:	20f8      	movs	r0, #248	; 0xf8
 800c366:	30ff      	adds	r0, #255	; 0xff
 800c368:	f7fb fd02 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_cell_output_MSB, word_MSB);
 800c36c:	8821      	ldrh	r1, [r4, #0]
 800c36e:	20fc      	movs	r0, #252	; 0xfc
 800c370:	0040      	lsls	r0, r0, #1
 800c372:	f7fb fcfd 	bl	8007d70 <EE_WriteVariable>
}
 800c376:	2000      	movs	r0, #0
 800c378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c37a:	46c0      	nop			; (mov r8, r8)
 800c37c:	20001b40 	.word	0x20001b40
 800c380:	20001b44 	.word	0x20001b44
 800c384:	447a0000 	.word	0x447a0000
 800c388:	20000088 	.word	0x20000088
 800c38c:	40400000 	.word	0x40400000
 800c390:	20001b3c 	.word	0x20001b3c
 800c394:	20001b70 	.word	0x20001b70
 800c398:	20001b72 	.word	0x20001b72

0800c39c <calibrationCommand>:
{
 800c39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c39e:	b087      	sub	sp, #28
 800c3a0:	9001      	str	r0, [sp, #4]
 800c3a2:	0017      	movs	r7, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9305      	str	r3, [sp, #20]
	portBASE_TYPE xParameterStringLength2 = 0;
 800c3a8:	9304      	str	r3, [sp, #16]
	portBASE_TYPE xParameterStringLength3 = 0;
 800c3aa:	9303      	str	r3, [sp, #12]
  configASSERT( pcWriteBuffer );
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d101      	bne.n	800c3b4 <calibrationCommand+0x18>
 800c3b0:	b672      	cpsid	i
 800c3b2:	e7fe      	b.n	800c3b2 <calibrationCommand+0x16>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c3b4:	aa05      	add	r2, sp, #20
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	0038      	movs	r0, r7
 800c3ba:	f003 fc4f 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800c3be:	0004      	movs	r4, r0
  pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800c3c0:	aa04      	add	r2, sp, #16
 800c3c2:	2102      	movs	r1, #2
 800c3c4:	0038      	movs	r0, r7
 800c3c6:	f003 fc49 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800c3ca:	0006      	movs	r6, r0
  pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800c3cc:	aa03      	add	r2, sp, #12
 800c3ce:	2103      	movs	r1, #3
 800c3d0:	0038      	movs	r0, r7
 800c3d2:	f003 fc43 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800c3d6:	0007      	movs	r7, r0
  if (NULL != pcParameterString1)
 800c3d8:	2c00      	cmp	r4, #0
 800c3da:	d023      	beq.n	800c424 <calibrationCommand+0x88>
    load_cell_scale = atoi( (char *)pcParameterString1);
 800c3dc:	0020      	movs	r0, r4
 800c3de:	f008 fcba 	bl	8014d56 <atoi>
 800c3e2:	b284      	uxth	r4, r0
	Module_Status result = H26R0_OK;
 800c3e4:	2500      	movs	r5, #0
	if (NULL != pcParameterString2)
 800c3e6:	2e00      	cmp	r6, #0
 800c3e8:	d01f      	beq.n	800c42a <calibrationCommand+0x8e>
    load_cell_output = atof( (char *)pcParameterString2);
 800c3ea:	0030      	movs	r0, r6
 800c3ec:	f008 fcae 	bl	8014d4c <atof>
 800c3f0:	f7f6 feea 	bl	80031c8 <__aeabi_d2f>
 800c3f4:	1c06      	adds	r6, r0, #0
  if (NULL != pcParameterString3)
 800c3f6:	2f00      	cmp	r7, #0
 800c3f8:	d01a      	beq.n	800c430 <calibrationCommand+0x94>
      load_cell_drift = atof( (char *)pcParameterString3);
 800c3fa:	0038      	movs	r0, r7
 800c3fc:	f008 fca6 	bl	8014d4c <atof>
 800c400:	f7f6 fee2 	bl	80031c8 <__aeabi_d2f>
 800c404:	1c07      	adds	r7, r0, #0
  if (H26R0_ERR_WrongParams == result)
 800c406:	2d02      	cmp	r5, #2
 800c408:	d013      	beq.n	800c432 <calibrationCommand+0x96>
	strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800c40a:	2228      	movs	r2, #40	; 0x28
 800c40c:	490c      	ldr	r1, [pc, #48]	; (800c440 <calibrationCommand+0xa4>)
 800c40e:	9801      	ldr	r0, [sp, #4]
 800c410:	f008 ff31 	bl	8015276 <memcpy>
	Calibration(load_cell_scale, load_cell_output, load_cell_drift);
 800c414:	1c3a      	adds	r2, r7, #0
 800c416:	1c31      	adds	r1, r6, #0
 800c418:	0020      	movs	r0, r4
 800c41a:	f7ff ff75 	bl	800c308 <Calibration>
}
 800c41e:	2000      	movs	r0, #0
 800c420:	b007      	add	sp, #28
 800c422:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t load_cell_scale=0;
 800c424:	2400      	movs	r4, #0
    result = H26R0_ERR_WrongParams;
 800c426:	2502      	movs	r5, #2
 800c428:	e7dd      	b.n	800c3e6 <calibrationCommand+0x4a>
	float load_cell_output=0.0f;
 800c42a:	2600      	movs	r6, #0
    result = H26R0_ERR_WrongParams;
 800c42c:	2502      	movs	r5, #2
 800c42e:	e7e2      	b.n	800c3f6 <calibrationCommand+0x5a>
	float load_cell_drift=0.0f;
 800c430:	2700      	movs	r7, #0
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800c432:	2213      	movs	r2, #19
 800c434:	4903      	ldr	r1, [pc, #12]	; (800c444 <calibrationCommand+0xa8>)
 800c436:	9801      	ldr	r0, [sp, #4]
 800c438:	f008 ff1d 	bl	8015276 <memcpy>
 800c43c:	e7e5      	b.n	800c40a <calibrationCommand+0x6e>
 800c43e:	46c0      	nop			; (mov r8, r8)
 800c440:	0801c8bc 	.word	0x0801c8bc
 800c444:	0801b028 	.word	0x0801b028

0800c448 <StreamGramToPort>:
{
 800c448:	b530      	push	{r4, r5, lr}
 800c44a:	b083      	sub	sp, #12
 800c44c:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c44e:	4d1b      	ldr	r5, [pc, #108]	; (800c4bc <StreamGramToPort+0x74>)
 800c450:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c452:	481b      	ldr	r0, [pc, #108]	; (800c4c0 <StreamGramToPort+0x78>)
 800c454:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c456:	491b      	ldr	r1, [pc, #108]	; (800c4c4 <StreamGramToPort+0x7c>)
 800c458:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c45a:	4a1b      	ldr	r2, [pc, #108]	; (800c4c8 <StreamGramToPort+0x80>)
 800c45c:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c45e:	4b1b      	ldr	r3, [pc, #108]	; (800c4cc <StreamGramToPort+0x84>)
 800c460:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c462:	4b1b      	ldr	r3, [pc, #108]	; (800c4d0 <StreamGramToPort+0x88>)
 800c464:	2202      	movs	r2, #2
 800c466:	701a      	strb	r2, [r3, #0]
	unit=Gram;
 800c468:	4b1a      	ldr	r3, [pc, #104]	; (800c4d4 <StreamGramToPort+0x8c>)
 800c46a:	3a01      	subs	r2, #1
 800c46c:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c46e:	1e63      	subs	r3, r4, #1
 800c470:	3303      	adds	r3, #3
 800c472:	d902      	bls.n	800c47a <StreamGramToPort+0x32>
}	
 800c474:	2000      	movs	r0, #0
 800c476:	b003      	add	sp, #12
 800c478:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Timeout Measurement", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c47a:	0163      	lsls	r3, r4, #5
 800c47c:	1b1b      	subs	r3, r3, r4
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	191c      	adds	r4, r3, r4
 800c482:	00e0      	lsls	r0, r4, #3
 800c484:	21fa      	movs	r1, #250	; 0xfa
 800c486:	0089      	lsls	r1, r1, #2
 800c488:	f7f3 fe62 	bl	8000150 <__udivsi3>
 800c48c:	0001      	movs	r1, r0
 800c48e:	4b12      	ldr	r3, [pc, #72]	; (800c4d8 <StreamGramToPort+0x90>)
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	23ff      	movs	r3, #255	; 0xff
 800c494:	2200      	movs	r2, #0
 800c496:	4811      	ldr	r0, [pc, #68]	; (800c4dc <StreamGramToPort+0x94>)
 800c498:	f004 ffe0 	bl	801145c <xTimerCreate>
 800c49c:	0004      	movs	r4, r0
 800c49e:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <StreamGramToPort+0x98>)
 800c4a0:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c4a2:	f004 fa6d 	bl	8010980 <xTaskGetTickCount>
 800c4a6:	0002      	movs	r2, r0
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	425b      	negs	r3, r3
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	2101      	movs	r1, #1
 800c4b2:	0020      	movs	r0, r4
 800c4b4:	f004 fff6 	bl	80114a4 <xTimerGenericCommand>
 800c4b8:	e7dc      	b.n	800c474 <StreamGramToPort+0x2c>
 800c4ba:	46c0      	nop			; (mov r8, r8)
 800c4bc:	20006f34 	.word	0x20006f34
 800c4c0:	20006f36 	.word	0x20006f36
 800c4c4:	20007174 	.word	0x20007174
 800c4c8:	20007100 	.word	0x20007100
 800c4cc:	20007178 	.word	0x20007178
 800c4d0:	20006f35 	.word	0x20006f35
 800c4d4:	200000b4 	.word	0x200000b4
 800c4d8:	0800bb69 	.word	0x0800bb69
 800c4dc:	0801c894 	.word	0x0801c894
 800c4e0:	20001b74 	.word	0x20001b74

0800c4e4 <StreamKGramToPort>:
{
 800c4e4:	b530      	push	{r4, r5, lr}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c4ea:	4d1a      	ldr	r5, [pc, #104]	; (800c554 <StreamKGramToPort+0x70>)
 800c4ec:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c4ee:	481a      	ldr	r0, [pc, #104]	; (800c558 <StreamKGramToPort+0x74>)
 800c4f0:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c4f2:	491a      	ldr	r1, [pc, #104]	; (800c55c <StreamKGramToPort+0x78>)
 800c4f4:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c4f6:	4a1a      	ldr	r2, [pc, #104]	; (800c560 <StreamKGramToPort+0x7c>)
 800c4f8:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c4fa:	4b1a      	ldr	r3, [pc, #104]	; (800c564 <StreamKGramToPort+0x80>)
 800c4fc:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c4fe:	2302      	movs	r3, #2
 800c500:	4a19      	ldr	r2, [pc, #100]	; (800c568 <StreamKGramToPort+0x84>)
 800c502:	7013      	strb	r3, [r2, #0]
	unit=KGram;
 800c504:	4a19      	ldr	r2, [pc, #100]	; (800c56c <StreamKGramToPort+0x88>)
 800c506:	7013      	strb	r3, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c508:	1e63      	subs	r3, r4, #1
 800c50a:	3303      	adds	r3, #3
 800c50c:	d902      	bls.n	800c514 <StreamKGramToPort+0x30>
}
 800c50e:	2000      	movs	r0, #0
 800c510:	b003      	add	sp, #12
 800c512:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c514:	0163      	lsls	r3, r4, #5
 800c516:	1b1b      	subs	r3, r3, r4
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	191c      	adds	r4, r3, r4
 800c51c:	00e0      	lsls	r0, r4, #3
 800c51e:	21fa      	movs	r1, #250	; 0xfa
 800c520:	0089      	lsls	r1, r1, #2
 800c522:	f7f3 fe15 	bl	8000150 <__udivsi3>
 800c526:	0001      	movs	r1, r0
 800c528:	4b11      	ldr	r3, [pc, #68]	; (800c570 <StreamKGramToPort+0x8c>)
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	23ff      	movs	r3, #255	; 0xff
 800c52e:	2200      	movs	r2, #0
 800c530:	4810      	ldr	r0, [pc, #64]	; (800c574 <StreamKGramToPort+0x90>)
 800c532:	f004 ff93 	bl	801145c <xTimerCreate>
 800c536:	0004      	movs	r4, r0
 800c538:	4b0f      	ldr	r3, [pc, #60]	; (800c578 <StreamKGramToPort+0x94>)
 800c53a:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c53c:	f004 fa20 	bl	8010980 <xTaskGetTickCount>
 800c540:	0002      	movs	r2, r0
 800c542:	2301      	movs	r3, #1
 800c544:	425b      	negs	r3, r3
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	2300      	movs	r3, #0
 800c54a:	2101      	movs	r1, #1
 800c54c:	0020      	movs	r0, r4
 800c54e:	f004 ffa9 	bl	80114a4 <xTimerGenericCommand>
 800c552:	e7dc      	b.n	800c50e <StreamKGramToPort+0x2a>
 800c554:	20006f34 	.word	0x20006f34
 800c558:	20006f36 	.word	0x20006f36
 800c55c:	20007174 	.word	0x20007174
 800c560:	20007100 	.word	0x20007100
 800c564:	20007178 	.word	0x20007178
 800c568:	20006f35 	.word	0x20006f35
 800c56c:	200000b4 	.word	0x200000b4
 800c570:	0800bb69 	.word	0x0800bb69
 800c574:	0801c8a8 	.word	0x0801c8a8
 800c578:	20001b74 	.word	0x20001b74

0800c57c <StreamOunceToPort>:
{
 800c57c:	b530      	push	{r4, r5, lr}
 800c57e:	b083      	sub	sp, #12
 800c580:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c582:	4d1b      	ldr	r5, [pc, #108]	; (800c5f0 <StreamOunceToPort+0x74>)
 800c584:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c586:	481b      	ldr	r0, [pc, #108]	; (800c5f4 <StreamOunceToPort+0x78>)
 800c588:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c58a:	491b      	ldr	r1, [pc, #108]	; (800c5f8 <StreamOunceToPort+0x7c>)
 800c58c:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c58e:	4a1b      	ldr	r2, [pc, #108]	; (800c5fc <StreamOunceToPort+0x80>)
 800c590:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c592:	4b1b      	ldr	r3, [pc, #108]	; (800c600 <StreamOunceToPort+0x84>)
 800c594:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c596:	4b1b      	ldr	r3, [pc, #108]	; (800c604 <StreamOunceToPort+0x88>)
 800c598:	2202      	movs	r2, #2
 800c59a:	701a      	strb	r2, [r3, #0]
	unit=Ounce;
 800c59c:	4b1a      	ldr	r3, [pc, #104]	; (800c608 <StreamOunceToPort+0x8c>)
 800c59e:	3201      	adds	r2, #1
 800c5a0:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c5a2:	1e63      	subs	r3, r4, #1
 800c5a4:	3303      	adds	r3, #3
 800c5a6:	d902      	bls.n	800c5ae <StreamOunceToPort+0x32>
}
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	b003      	add	sp, #12
 800c5ac:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c5ae:	0163      	lsls	r3, r4, #5
 800c5b0:	1b1b      	subs	r3, r3, r4
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	191c      	adds	r4, r3, r4
 800c5b6:	00e0      	lsls	r0, r4, #3
 800c5b8:	21fa      	movs	r1, #250	; 0xfa
 800c5ba:	0089      	lsls	r1, r1, #2
 800c5bc:	f7f3 fdc8 	bl	8000150 <__udivsi3>
 800c5c0:	0001      	movs	r1, r0
 800c5c2:	4b12      	ldr	r3, [pc, #72]	; (800c60c <StreamOunceToPort+0x90>)
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	23ff      	movs	r3, #255	; 0xff
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	4811      	ldr	r0, [pc, #68]	; (800c610 <StreamOunceToPort+0x94>)
 800c5cc:	f004 ff46 	bl	801145c <xTimerCreate>
 800c5d0:	0004      	movs	r4, r0
 800c5d2:	4b10      	ldr	r3, [pc, #64]	; (800c614 <StreamOunceToPort+0x98>)
 800c5d4:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c5d6:	f004 f9d3 	bl	8010980 <xTaskGetTickCount>
 800c5da:	0002      	movs	r2, r0
 800c5dc:	2301      	movs	r3, #1
 800c5de:	425b      	negs	r3, r3
 800c5e0:	9300      	str	r3, [sp, #0]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	0020      	movs	r0, r4
 800c5e8:	f004 ff5c 	bl	80114a4 <xTimerGenericCommand>
 800c5ec:	e7dc      	b.n	800c5a8 <StreamOunceToPort+0x2c>
 800c5ee:	46c0      	nop			; (mov r8, r8)
 800c5f0:	20006f34 	.word	0x20006f34
 800c5f4:	20006f36 	.word	0x20006f36
 800c5f8:	20007174 	.word	0x20007174
 800c5fc:	20007100 	.word	0x20007100
 800c600:	20007178 	.word	0x20007178
 800c604:	20006f35 	.word	0x20006f35
 800c608:	200000b4 	.word	0x200000b4
 800c60c:	0800bb69 	.word	0x0800bb69
 800c610:	0801c8a8 	.word	0x0801c8a8
 800c614:	20001b74 	.word	0x20001b74

0800c618 <StreamPoundToPort>:
{
 800c618:	b530      	push	{r4, r5, lr}
 800c61a:	b083      	sub	sp, #12
 800c61c:	9c06      	ldr	r4, [sp, #24]
	global_ch=Ch;
 800c61e:	4d1b      	ldr	r5, [pc, #108]	; (800c68c <StreamPoundToPort+0x74>)
 800c620:	7028      	strb	r0, [r5, #0]
	global_port=Port;
 800c622:	481b      	ldr	r0, [pc, #108]	; (800c690 <StreamPoundToPort+0x78>)
 800c624:	7001      	strb	r1, [r0, #0]
	global_module=Module;
 800c626:	491b      	ldr	r1, [pc, #108]	; (800c694 <StreamPoundToPort+0x7c>)
 800c628:	700a      	strb	r2, [r1, #0]
	global_period=Period;
 800c62a:	4a1b      	ldr	r2, [pc, #108]	; (800c698 <StreamPoundToPort+0x80>)
 800c62c:	6013      	str	r3, [r2, #0]
	global_timeout=Timeout;
 800c62e:	4b1b      	ldr	r3, [pc, #108]	; (800c69c <StreamPoundToPort+0x84>)
 800c630:	601c      	str	r4, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c632:	4b1b      	ldr	r3, [pc, #108]	; (800c6a0 <StreamPoundToPort+0x88>)
 800c634:	2202      	movs	r2, #2
 800c636:	701a      	strb	r2, [r3, #0]
	unit=Pound;
 800c638:	4b1a      	ldr	r3, [pc, #104]	; (800c6a4 <StreamPoundToPort+0x8c>)
 800c63a:	3202      	adds	r2, #2
 800c63c:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c63e:	1e63      	subs	r3, r4, #1
 800c640:	3303      	adds	r3, #3
 800c642:	d902      	bls.n	800c64a <StreamPoundToPort+0x32>
}
 800c644:	2000      	movs	r0, #0
 800c646:	b003      	add	sp, #12
 800c648:	bd30      	pop	{r4, r5, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c64a:	0163      	lsls	r3, r4, #5
 800c64c:	1b1b      	subs	r3, r3, r4
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	191c      	adds	r4, r3, r4
 800c652:	00e0      	lsls	r0, r4, #3
 800c654:	21fa      	movs	r1, #250	; 0xfa
 800c656:	0089      	lsls	r1, r1, #2
 800c658:	f7f3 fd7a 	bl	8000150 <__udivsi3>
 800c65c:	0001      	movs	r1, r0
 800c65e:	4b12      	ldr	r3, [pc, #72]	; (800c6a8 <StreamPoundToPort+0x90>)
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	23ff      	movs	r3, #255	; 0xff
 800c664:	2200      	movs	r2, #0
 800c666:	4811      	ldr	r0, [pc, #68]	; (800c6ac <StreamPoundToPort+0x94>)
 800c668:	f004 fef8 	bl	801145c <xTimerCreate>
 800c66c:	0004      	movs	r4, r0
 800c66e:	4b10      	ldr	r3, [pc, #64]	; (800c6b0 <StreamPoundToPort+0x98>)
 800c670:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c672:	f004 f985 	bl	8010980 <xTaskGetTickCount>
 800c676:	0002      	movs	r2, r0
 800c678:	2301      	movs	r3, #1
 800c67a:	425b      	negs	r3, r3
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	2300      	movs	r3, #0
 800c680:	2101      	movs	r1, #1
 800c682:	0020      	movs	r0, r4
 800c684:	f004 ff0e 	bl	80114a4 <xTimerGenericCommand>
 800c688:	e7dc      	b.n	800c644 <StreamPoundToPort+0x2c>
 800c68a:	46c0      	nop			; (mov r8, r8)
 800c68c:	20006f34 	.word	0x20006f34
 800c690:	20006f36 	.word	0x20006f36
 800c694:	20007174 	.word	0x20007174
 800c698:	20007100 	.word	0x20007100
 800c69c:	20007178 	.word	0x20007178
 800c6a0:	20006f35 	.word	0x20006f35
 800c6a4:	200000b4 	.word	0x200000b4
 800c6a8:	0800bb69 	.word	0x0800bb69
 800c6ac:	0801c8a8 	.word	0x0801c8a8
 800c6b0:	20001b74 	.word	0x20001b74

0800c6b4 <StreamKGramToCLI>:
{
 800c6b4:	b510      	push	{r4, lr}
 800c6b6:	b082      	sub	sp, #8
	global_ch=Ch;
 800c6b8:	4b1a      	ldr	r3, [pc, #104]	; (800c724 <StreamKGramToCLI+0x70>)
 800c6ba:	7018      	strb	r0, [r3, #0]
	global_period=Period;
 800c6bc:	4b1a      	ldr	r3, [pc, #104]	; (800c728 <StreamKGramToCLI+0x74>)
 800c6be:	6019      	str	r1, [r3, #0]
	global_timeout=Timeout;
 800c6c0:	4b1a      	ldr	r3, [pc, #104]	; (800c72c <StreamKGramToCLI+0x78>)
 800c6c2:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800c6c4:	4b1a      	ldr	r3, [pc, #104]	; (800c730 <StreamKGramToCLI+0x7c>)
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c6ca:	1e53      	subs	r3, r2, #1
 800c6cc:	3303      	adds	r3, #3
 800c6ce:	d909      	bls.n	800c6e4 <StreamKGramToCLI+0x30>
	if (global_timeout > 0)
 800c6d0:	4b16      	ldr	r3, [pc, #88]	; (800c72c <StreamKGramToCLI+0x78>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <StreamKGramToCLI+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c6d8:	4b16      	ldr	r3, [pc, #88]	; (800c734 <StreamKGramToCLI+0x80>)
 800c6da:	2201      	movs	r2, #1
 800c6dc:	701a      	strb	r2, [r3, #0]
}
 800c6de:	2000      	movs	r0, #0
 800c6e0:	b002      	add	sp, #8
 800c6e2:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c6e4:	0153      	lsls	r3, r2, #5
 800c6e6:	1a9b      	subs	r3, r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	189a      	adds	r2, r3, r2
 800c6ec:	00d0      	lsls	r0, r2, #3
 800c6ee:	21fa      	movs	r1, #250	; 0xfa
 800c6f0:	0089      	lsls	r1, r1, #2
 800c6f2:	f7f3 fd2d 	bl	8000150 <__udivsi3>
 800c6f6:	0001      	movs	r1, r0
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <StreamKGramToCLI+0x84>)
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	23ff      	movs	r3, #255	; 0xff
 800c6fe:	2200      	movs	r2, #0
 800c700:	480e      	ldr	r0, [pc, #56]	; (800c73c <StreamKGramToCLI+0x88>)
 800c702:	f004 feab 	bl	801145c <xTimerCreate>
 800c706:	0004      	movs	r4, r0
 800c708:	4b0d      	ldr	r3, [pc, #52]	; (800c740 <StreamKGramToCLI+0x8c>)
 800c70a:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c70c:	f004 f938 	bl	8010980 <xTaskGetTickCount>
 800c710:	0002      	movs	r2, r0
 800c712:	2301      	movs	r3, #1
 800c714:	425b      	negs	r3, r3
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	2300      	movs	r3, #0
 800c71a:	2101      	movs	r1, #1
 800c71c:	0020      	movs	r0, r4
 800c71e:	f004 fec1 	bl	80114a4 <xTimerGenericCommand>
 800c722:	e7d5      	b.n	800c6d0 <StreamKGramToCLI+0x1c>
 800c724:	20006f34 	.word	0x20006f34
 800c728:	20007100 	.word	0x20007100
 800c72c:	20007178 	.word	0x20007178
 800c730:	20006f35 	.word	0x20006f35
 800c734:	20001b4c 	.word	0x20001b4c
 800c738:	0800bb69 	.word	0x0800bb69
 800c73c:	0801c8a8 	.word	0x0801c8a8
 800c740:	20001b74 	.word	0x20001b74

0800c744 <demoCommand>:
{
 800c744:	b570      	push	{r4, r5, r6, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	0004      	movs	r4, r0
 800c74a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	9303      	str	r3, [sp, #12]
	configASSERT( pcWriteBuffer );
 800c750:	2c00      	cmp	r4, #0
 800c752:	d101      	bne.n	800c758 <demoCommand+0x14>
 800c754:	b672      	cpsid	i
 800c756:	e7fe      	b.n	800c756 <demoCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c758:	aa03      	add	r2, sp, #12
 800c75a:	2101      	movs	r1, #1
 800c75c:	f003 fa7e 	bl	800fc5c <FreeRTOS_CLIGetParameter>
  if (NULL != pcParameterString1)
 800c760:	2800      	cmp	r0, #0
 800c762:	d01b      	beq.n	800c79c <demoCommand+0x58>
    channel = atoi( (char *)pcParameterString1);
 800c764:	f008 faf7 	bl	8014d56 <atoi>
 800c768:	b2c5      	uxtb	r5, r0
	Module_Status result = H26R0_OK;
 800c76a:	2600      	movs	r6, #0
		if (channel == 1 || channel == 2)
 800c76c:	1e6b      	subs	r3, r5, #1
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b01      	cmp	r3, #1
 800c772:	d916      	bls.n	800c7a2 <demoCommand+0x5e>
	if (result != H26R0_OK || channel != 1 || channel != 2){
 800c774:	2e00      	cmp	r6, #0
 800c776:	d101      	bne.n	800c77c <demoCommand+0x38>
 800c778:	2d01      	cmp	r5, #1
 800c77a:	d032      	beq.n	800c7e2 <demoCommand+0x9e>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800c77c:	2212      	movs	r2, #18
 800c77e:	491a      	ldr	r1, [pc, #104]	; (800c7e8 <demoCommand+0xa4>)
 800c780:	0020      	movs	r0, r4
 800c782:	f008 fd78 	bl	8015276 <memcpy>
	memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800c786:	0020      	movs	r0, r4
 800c788:	f7f3 fcc6 	bl	8000118 <strlen>
 800c78c:	0002      	movs	r2, r0
 800c78e:	2100      	movs	r1, #0
 800c790:	0020      	movs	r0, r4
 800c792:	f008 fd79 	bl	8015288 <memset>
}
 800c796:	2000      	movs	r0, #0
 800c798:	b004      	add	sp, #16
 800c79a:	bd70      	pop	{r4, r5, r6, pc}
    result = H26R0_ERR_WrongParams;
 800c79c:	2602      	movs	r6, #2
	uint8_t channel = 0;
 800c79e:	2500      	movs	r5, #0
 800c7a0:	e7e4      	b.n	800c76c <demoCommand+0x28>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessage);
 800c7a2:	2237      	movs	r2, #55	; 0x37
 800c7a4:	4911      	ldr	r1, [pc, #68]	; (800c7ec <demoCommand+0xa8>)
 800c7a6:	0020      	movs	r0, r4
 800c7a8:	f008 fd65 	bl	8015276 <memcpy>
		writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c7ac:	0020      	movs	r0, r4
 800c7ae:	f7f3 fcb3 	bl	8000118 <strlen>
 800c7b2:	b282      	uxth	r2, r0
 800c7b4:	4b0e      	ldr	r3, [pc, #56]	; (800c7f0 <demoCommand+0xac>)
 800c7b6:	7818      	ldrb	r0, [r3, #0]
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	425b      	negs	r3, r3
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	3333      	adds	r3, #51	; 0x33
 800c7c0:	0021      	movs	r1, r4
 800c7c2:	f002 fff1 	bl	800f7a8 <writePxMutex>
		StreamKGramToCLI(channel, 500, 10000);
 800c7c6:	21fa      	movs	r1, #250	; 0xfa
 800c7c8:	4a0a      	ldr	r2, [pc, #40]	; (800c7f4 <demoCommand+0xb0>)
 800c7ca:	0049      	lsls	r1, r1, #1
 800c7cc:	0028      	movs	r0, r5
 800c7ce:	f7ff ff71 	bl	800c6b4 <StreamKGramToCLI>
		while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){ Delay_ms(1); };
 800c7d2:	4b09      	ldr	r3, [pc, #36]	; (800c7f8 <demoCommand+0xb4>)
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d0cc      	beq.n	800c774 <demoCommand+0x30>
 800c7da:	2001      	movs	r0, #1
 800c7dc:	f005 f994 	bl	8011b08 <HAL_Delay>
 800c7e0:	e7f7      	b.n	800c7d2 <demoCommand+0x8e>
	if (result != H26R0_OK || channel != 1 || channel != 2){
 800c7e2:	2d02      	cmp	r5, #2
 800c7e4:	d1ca      	bne.n	800c77c <demoCommand+0x38>
 800c7e6:	e7ce      	b.n	800c786 <demoCommand+0x42>
 800c7e8:	0801c93c 	.word	0x0801c93c
 800c7ec:	0801c904 	.word	0x0801c904
 800c7f0:	20000a9f 	.word	0x20000a9f
 800c7f4:	00002710 	.word	0x00002710
 800c7f8:	20001b4c 	.word	0x20001b4c

0800c7fc <StreamKGramToVERBOSE>:
{
 800c7fc:	b510      	push	{r4, lr}
 800c7fe:	b082      	sub	sp, #8
	global_ch=Ch;
 800c800:	4b1a      	ldr	r3, [pc, #104]	; (800c86c <StreamKGramToVERBOSE+0x70>)
 800c802:	7018      	strb	r0, [r3, #0]
	global_period=Period;
 800c804:	4b1a      	ldr	r3, [pc, #104]	; (800c870 <StreamKGramToVERBOSE+0x74>)
 800c806:	6019      	str	r1, [r3, #0]
	global_timeout=Timeout;
 800c808:	4b1a      	ldr	r3, [pc, #104]	; (800c874 <StreamKGramToVERBOSE+0x78>)
 800c80a:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_CLI_VERBOSE_CASE;
 800c80c:	4b1a      	ldr	r3, [pc, #104]	; (800c878 <StreamKGramToVERBOSE+0x7c>)
 800c80e:	2104      	movs	r1, #4
 800c810:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c812:	1e53      	subs	r3, r2, #1
 800c814:	3303      	adds	r3, #3
 800c816:	d909      	bls.n	800c82c <StreamKGramToVERBOSE+0x30>
	if (global_timeout > 0)
 800c818:	4b16      	ldr	r3, [pc, #88]	; (800c874 <StreamKGramToVERBOSE+0x78>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d002      	beq.n	800c826 <StreamKGramToVERBOSE+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c820:	4b16      	ldr	r3, [pc, #88]	; (800c87c <StreamKGramToVERBOSE+0x80>)
 800c822:	2201      	movs	r2, #1
 800c824:	701a      	strb	r2, [r3, #0]
}
 800c826:	2000      	movs	r0, #0
 800c828:	b002      	add	sp, #8
 800c82a:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c82c:	0153      	lsls	r3, r2, #5
 800c82e:	1a9b      	subs	r3, r3, r2
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	189a      	adds	r2, r3, r2
 800c834:	00d0      	lsls	r0, r2, #3
 800c836:	21fa      	movs	r1, #250	; 0xfa
 800c838:	0089      	lsls	r1, r1, #2
 800c83a:	f7f3 fc89 	bl	8000150 <__udivsi3>
 800c83e:	0001      	movs	r1, r0
 800c840:	4b0f      	ldr	r3, [pc, #60]	; (800c880 <StreamKGramToVERBOSE+0x84>)
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	23ff      	movs	r3, #255	; 0xff
 800c846:	2200      	movs	r2, #0
 800c848:	480e      	ldr	r0, [pc, #56]	; (800c884 <StreamKGramToVERBOSE+0x88>)
 800c84a:	f004 fe07 	bl	801145c <xTimerCreate>
 800c84e:	0004      	movs	r4, r0
 800c850:	4b0d      	ldr	r3, [pc, #52]	; (800c888 <StreamKGramToVERBOSE+0x8c>)
 800c852:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c854:	f004 f894 	bl	8010980 <xTaskGetTickCount>
 800c858:	0002      	movs	r2, r0
 800c85a:	2301      	movs	r3, #1
 800c85c:	425b      	negs	r3, r3
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	2300      	movs	r3, #0
 800c862:	2101      	movs	r1, #1
 800c864:	0020      	movs	r0, r4
 800c866:	f004 fe1d 	bl	80114a4 <xTimerGenericCommand>
 800c86a:	e7d5      	b.n	800c818 <StreamKGramToVERBOSE+0x1c>
 800c86c:	20006f34 	.word	0x20006f34
 800c870:	20007100 	.word	0x20007100
 800c874:	20007178 	.word	0x20007178
 800c878:	20006f35 	.word	0x20006f35
 800c87c:	20001b4c 	.word	0x20001b4c
 800c880:	0800bb69 	.word	0x0800bb69
 800c884:	0801c8a8 	.word	0x0801c8a8
 800c888:	20001b74 	.word	0x20001b74

0800c88c <StreamRawToPort>:
{
 800c88c:	b510      	push	{r4, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	9a04      	ldr	r2, [sp, #16]
	global_ch=Ch;
 800c892:	491c      	ldr	r1, [pc, #112]	; (800c904 <StreamRawToPort+0x78>)
 800c894:	7008      	strb	r0, [r1, #0]
	global_period=Period;
 800c896:	491c      	ldr	r1, [pc, #112]	; (800c908 <StreamRawToPort+0x7c>)
 800c898:	600b      	str	r3, [r1, #0]
	global_timeout=Timeout;
 800c89a:	4b1c      	ldr	r3, [pc, #112]	; (800c90c <StreamRawToPort+0x80>)
 800c89c:	601a      	str	r2, [r3, #0]
	global_mode=STREAM_PORT_CASE;
 800c89e:	4b1c      	ldr	r3, [pc, #112]	; (800c910 <StreamRawToPort+0x84>)
 800c8a0:	2102      	movs	r1, #2
 800c8a2:	7019      	strb	r1, [r3, #0]
	unit=RAW;
 800c8a4:	4b1b      	ldr	r3, [pc, #108]	; (800c914 <StreamRawToPort+0x88>)
 800c8a6:	3103      	adds	r1, #3
 800c8a8:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c8aa:	1e53      	subs	r3, r2, #1
 800c8ac:	3303      	adds	r3, #3
 800c8ae:	d909      	bls.n	800c8c4 <StreamRawToPort+0x38>
	if (global_timeout > 0)
 800c8b0:	4b16      	ldr	r3, [pc, #88]	; (800c90c <StreamRawToPort+0x80>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <StreamRawToPort+0x32>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c8b8:	4b17      	ldr	r3, [pc, #92]	; (800c918 <StreamRawToPort+0x8c>)
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	701a      	strb	r2, [r3, #0]
}
 800c8be:	2000      	movs	r0, #0
 800c8c0:	b002      	add	sp, #8
 800c8c2:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c8c4:	0153      	lsls	r3, r2, #5
 800c8c6:	1a9b      	subs	r3, r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	189a      	adds	r2, r3, r2
 800c8cc:	00d0      	lsls	r0, r2, #3
 800c8ce:	21fa      	movs	r1, #250	; 0xfa
 800c8d0:	0089      	lsls	r1, r1, #2
 800c8d2:	f7f3 fc3d 	bl	8000150 <__udivsi3>
 800c8d6:	0001      	movs	r1, r0
 800c8d8:	4b10      	ldr	r3, [pc, #64]	; (800c91c <StreamRawToPort+0x90>)
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	23ff      	movs	r3, #255	; 0xff
 800c8de:	2200      	movs	r2, #0
 800c8e0:	480f      	ldr	r0, [pc, #60]	; (800c920 <StreamRawToPort+0x94>)
 800c8e2:	f004 fdbb 	bl	801145c <xTimerCreate>
 800c8e6:	0004      	movs	r4, r0
 800c8e8:	4b0e      	ldr	r3, [pc, #56]	; (800c924 <StreamRawToPort+0x98>)
 800c8ea:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c8ec:	f004 f848 	bl	8010980 <xTaskGetTickCount>
 800c8f0:	0002      	movs	r2, r0
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	425b      	negs	r3, r3
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	2101      	movs	r1, #1
 800c8fc:	0020      	movs	r0, r4
 800c8fe:	f004 fdd1 	bl	80114a4 <xTimerGenericCommand>
 800c902:	e7d5      	b.n	800c8b0 <StreamRawToPort+0x24>
 800c904:	20006f34 	.word	0x20006f34
 800c908:	20007100 	.word	0x20007100
 800c90c:	20007178 	.word	0x20007178
 800c910:	20006f35 	.word	0x20006f35
 800c914:	200000b4 	.word	0x200000b4
 800c918:	20001b4c 	.word	0x20001b4c
 800c91c:	0800bb69 	.word	0x0800bb69
 800c920:	0801c8a8 	.word	0x0801c8a8
 800c924:	20001b74 	.word	0x20001b74

0800c928 <StreamKGramToBuffer>:
{
 800c928:	b510      	push	{r4, lr}
 800c92a:	b082      	sub	sp, #8
	global_ch=Ch;
 800c92c:	4c19      	ldr	r4, [pc, #100]	; (800c994 <StreamKGramToBuffer+0x6c>)
 800c92e:	7020      	strb	r0, [r4, #0]
	global_period=Period;
 800c930:	4819      	ldr	r0, [pc, #100]	; (800c998 <StreamKGramToBuffer+0x70>)
 800c932:	6002      	str	r2, [r0, #0]
	global_timeout=Timeout;
 800c934:	4a19      	ldr	r2, [pc, #100]	; (800c99c <StreamKGramToBuffer+0x74>)
 800c936:	6013      	str	r3, [r2, #0]
	ptr_weight_buffer=Buffer;
 800c938:	4a19      	ldr	r2, [pc, #100]	; (800c9a0 <StreamKGramToBuffer+0x78>)
 800c93a:	6011      	str	r1, [r2, #0]
	global_mode=STREAM_BUFFER_CASE;
 800c93c:	4a19      	ldr	r2, [pc, #100]	; (800c9a4 <StreamKGramToBuffer+0x7c>)
 800c93e:	2103      	movs	r1, #3
 800c940:	7011      	strb	r1, [r2, #0]
	unit=KGram;
 800c942:	4a19      	ldr	r2, [pc, #100]	; (800c9a8 <StreamKGramToBuffer+0x80>)
 800c944:	3901      	subs	r1, #1
 800c946:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c948:	1e5a      	subs	r2, r3, #1
 800c94a:	3203      	adds	r2, #3
 800c94c:	d902      	bls.n	800c954 <StreamKGramToBuffer+0x2c>
}
 800c94e:	2000      	movs	r0, #0
 800c950:	b002      	add	sp, #8
 800c952:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c954:	015a      	lsls	r2, r3, #5
 800c956:	1ad2      	subs	r2, r2, r3
 800c958:	0092      	lsls	r2, r2, #2
 800c95a:	18d3      	adds	r3, r2, r3
 800c95c:	00d8      	lsls	r0, r3, #3
 800c95e:	21fa      	movs	r1, #250	; 0xfa
 800c960:	0089      	lsls	r1, r1, #2
 800c962:	f7f3 fbf5 	bl	8000150 <__udivsi3>
 800c966:	0001      	movs	r1, r0
 800c968:	4b10      	ldr	r3, [pc, #64]	; (800c9ac <StreamKGramToBuffer+0x84>)
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	23ff      	movs	r3, #255	; 0xff
 800c96e:	2200      	movs	r2, #0
 800c970:	480f      	ldr	r0, [pc, #60]	; (800c9b0 <StreamKGramToBuffer+0x88>)
 800c972:	f004 fd73 	bl	801145c <xTimerCreate>
 800c976:	0004      	movs	r4, r0
 800c978:	4b0e      	ldr	r3, [pc, #56]	; (800c9b4 <StreamKGramToBuffer+0x8c>)
 800c97a:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c97c:	f004 f800 	bl	8010980 <xTaskGetTickCount>
 800c980:	0002      	movs	r2, r0
 800c982:	2301      	movs	r3, #1
 800c984:	425b      	negs	r3, r3
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	2300      	movs	r3, #0
 800c98a:	2101      	movs	r1, #1
 800c98c:	0020      	movs	r0, r4
 800c98e:	f004 fd89 	bl	80114a4 <xTimerGenericCommand>
 800c992:	e7dc      	b.n	800c94e <StreamKGramToBuffer+0x26>
 800c994:	20006f34 	.word	0x20006f34
 800c998:	20007100 	.word	0x20007100
 800c99c:	20007178 	.word	0x20007178
 800c9a0:	2000701c 	.word	0x2000701c
 800c9a4:	20006f35 	.word	0x20006f35
 800c9a8:	200000b4 	.word	0x200000b4
 800c9ac:	0800bb69 	.word	0x0800bb69
 800c9b0:	0801c8a8 	.word	0x0801c8a8
 800c9b4:	20001b74 	.word	0x20001b74

0800c9b8 <streamCommand>:
{
 800c9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ba:	46de      	mov	lr, fp
 800c9bc:	4647      	mov	r7, r8
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b08d      	sub	sp, #52	; 0x34
 800c9c2:	9003      	str	r0, [sp, #12]
 800c9c4:	0015      	movs	r5, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	930b      	str	r3, [sp, #44]	; 0x2c
  portBASE_TYPE xParameterStringLength2 = 0;
 800c9ca:	930a      	str	r3, [sp, #40]	; 0x28
  portBASE_TYPE xParameterStringLength3 = 0;
 800c9cc:	9309      	str	r3, [sp, #36]	; 0x24
  portBASE_TYPE xParameterStringLength4 = 0;
 800c9ce:	9308      	str	r3, [sp, #32]
	portBASE_TYPE xParameterStringLength5 = 0;
 800c9d0:	9307      	str	r3, [sp, #28]
  configASSERT( pcWriteBuffer );
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d101      	bne.n	800c9da <streamCommand+0x22>
 800c9d6:	b672      	cpsid	i
 800c9d8:	e7fe      	b.n	800c9d8 <streamCommand+0x20>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800c9da:	aa0b      	add	r2, sp, #44	; 0x2c
 800c9dc:	2101      	movs	r1, #1
 800c9de:	0028      	movs	r0, r5
 800c9e0:	f003 f93c 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800c9e4:	0007      	movs	r7, r0
  pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800c9e6:	aa0a      	add	r2, sp, #40	; 0x28
 800c9e8:	2102      	movs	r1, #2
 800c9ea:	0028      	movs	r0, r5
 800c9ec:	f003 f936 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800c9f0:	9004      	str	r0, [sp, #16]
  pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800c9f2:	aa09      	add	r2, sp, #36	; 0x24
 800c9f4:	2103      	movs	r1, #3
 800c9f6:	0028      	movs	r0, r5
 800c9f8:	f003 f930 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800c9fc:	0006      	movs	r6, r0
  pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800c9fe:	aa08      	add	r2, sp, #32
 800ca00:	2104      	movs	r1, #4
 800ca02:	0028      	movs	r0, r5
 800ca04:	f003 f92a 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800ca08:	0004      	movs	r4, r0
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 800ca0a:	aa07      	add	r2, sp, #28
 800ca0c:	2105      	movs	r1, #5
 800ca0e:	0028      	movs	r0, r5
 800ca10:	f003 f924 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800ca14:	4683      	mov	fp, r0
  if (NULL != pcParameterString1)
 800ca16:	2f00      	cmp	r7, #0
 800ca18:	d043      	beq.n	800caa2 <streamCommand+0xea>
    channel = atoi( (char *)pcParameterString1);
 800ca1a:	0038      	movs	r0, r7
 800ca1c:	f008 f99b 	bl	8014d56 <atoi>
 800ca20:	b2c5      	uxtb	r5, r0
  Module_Status result = H26R0_OK;
 800ca22:	2700      	movs	r7, #0
	if (NULL != pcParameterString2)
 800ca24:	9804      	ldr	r0, [sp, #16]
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d03e      	beq.n	800caa8 <streamCommand+0xf0>
    period = atoi( (char *)pcParameterString2);
 800ca2a:	f008 f994 	bl	8014d56 <atoi>
 800ca2e:	9004      	str	r0, [sp, #16]
  if (NULL != pcParameterString3)
 800ca30:	2e00      	cmp	r6, #0
 800ca32:	d042      	beq.n	800caba <streamCommand+0x102>
    if (!strncmp((const char *)pcParameterString3, "inf", 3))
 800ca34:	2203      	movs	r2, #3
 800ca36:	4959      	ldr	r1, [pc, #356]	; (800cb9c <streamCommand+0x1e4>)
 800ca38:	0030      	movs	r0, r6
 800ca3a:	f008 fe63 	bl	8015704 <strncmp>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d136      	bne.n	800cab0 <streamCommand+0xf8>
      timeout = portMAX_DELAY;
 800ca42:	2601      	movs	r6, #1
 800ca44:	4276      	negs	r6, r6
	if (NULL != pcParameterString4 && !strncmp((const char *)pcParameterString4, "buffer", 6)) 
 800ca46:	2c00      	cmp	r4, #0
 800ca48:	d006      	beq.n	800ca58 <streamCommand+0xa0>
 800ca4a:	2206      	movs	r2, #6
 800ca4c:	4954      	ldr	r1, [pc, #336]	; (800cba0 <streamCommand+0x1e8>)
 800ca4e:	0020      	movs	r0, r4
 800ca50:	f008 fe58 	bl	8015704 <strncmp>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d033      	beq.n	800cac0 <streamCommand+0x108>
	else if (NULL != pcParameterString4 && NULL != pcParameterString5 && pcParameterString4[0] == 'p') 
 800ca58:	2c00      	cmp	r4, #0
 800ca5a:	d04e      	beq.n	800cafa <streamCommand+0x142>
 800ca5c:	465b      	mov	r3, fp
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d04b      	beq.n	800cafa <streamCommand+0x142>
 800ca62:	2300      	movs	r3, #0
 800ca64:	56e3      	ldrsb	r3, [r4, r3]
 800ca66:	2b70      	cmp	r3, #112	; 0x70
 800ca68:	d147      	bne.n	800cafa <streamCommand+0x142>
		port = ( uint8_t ) atol( ( char * ) pcParameterString4+1 );
 800ca6a:	1c60      	adds	r0, r4, #1
 800ca6c:	f008 f979 	bl	8014d62 <atol>
 800ca70:	9005      	str	r0, [sp, #20]
 800ca72:	466b      	mov	r3, sp
 800ca74:	7d1b      	ldrb	r3, [r3, #20]
 800ca76:	4698      	mov	r8, r3
		module = (uint8_t) GetID((char *)pcParameterString5);
 800ca78:	4658      	mov	r0, fp
 800ca7a:	f7f7 fdf9 	bl	8004670 <GetID>
 800ca7e:	b2c4      	uxtb	r4, r0
		if (module != (uint8_t) BOS_ERR_WrongName) {
 800ca80:	2c64      	cmp	r4, #100	; 0x64
 800ca82:	d032      	beq.n	800caea <streamCommand+0x132>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageModule, port, module);
 800ca84:	466b      	mov	r3, sp
 800ca86:	7d1a      	ldrb	r2, [r3, #20]
 800ca88:	0023      	movs	r3, r4
 800ca8a:	4946      	ldr	r1, [pc, #280]	; (800cba4 <streamCommand+0x1ec>)
 800ca8c:	9803      	ldr	r0, [sp, #12]
 800ca8e:	f008 fdf5 	bl	801567c <sprintf>
			StreamKGramToPort(channel, port, module, period, timeout);
 800ca92:	9600      	str	r6, [sp, #0]
 800ca94:	9b04      	ldr	r3, [sp, #16]
 800ca96:	0022      	movs	r2, r4
 800ca98:	4641      	mov	r1, r8
 800ca9a:	0028      	movs	r0, r5
 800ca9c:	f7ff fd22 	bl	800c4e4 <StreamKGramToPort>
			return pdFALSE;
 800caa0:	e033      	b.n	800cb0a <streamCommand+0x152>
    result = H26R0_ERR_WrongParams;
 800caa2:	2702      	movs	r7, #2
	uint8_t channel = 1;
 800caa4:	2501      	movs	r5, #1
 800caa6:	e7bd      	b.n	800ca24 <streamCommand+0x6c>
    result = H26R0_ERR_WrongParams;
 800caa8:	2702      	movs	r7, #2
  uint32_t period = 0;
 800caaa:	2300      	movs	r3, #0
 800caac:	9304      	str	r3, [sp, #16]
 800caae:	e7bf      	b.n	800ca30 <streamCommand+0x78>
      timeout = atoi( (char *)pcParameterString3);
 800cab0:	0030      	movs	r0, r6
 800cab2:	f008 f950 	bl	8014d56 <atoi>
 800cab6:	0006      	movs	r6, r0
 800cab8:	e7c5      	b.n	800ca46 <streamCommand+0x8e>
    result = H26R0_ERR_WrongParams;
 800caba:	2702      	movs	r7, #2
  uint32_t timeout = 0;
 800cabc:	2600      	movs	r6, #0
 800cabe:	e7c2      	b.n	800ca46 <streamCommand+0x8e>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageBuffer);
 800cac0:	226b      	movs	r2, #107	; 0x6b
 800cac2:	4939      	ldr	r1, [pc, #228]	; (800cba8 <streamCommand+0x1f0>)
 800cac4:	9803      	ldr	r0, [sp, #12]
 800cac6:	f008 fbd6 	bl	8015276 <memcpy>
		if (channel==1){
 800caca:	2d01      	cmp	r5, #1
 800cacc:	d106      	bne.n	800cadc <streamCommand+0x124>
		StreamKGramToBuffer(channel, &weight1_buffer, period, timeout);
 800cace:	0033      	movs	r3, r6
 800cad0:	9a04      	ldr	r2, [sp, #16]
 800cad2:	4936      	ldr	r1, [pc, #216]	; (800cbac <streamCommand+0x1f4>)
 800cad4:	0028      	movs	r0, r5
 800cad6:	f7ff ff27 	bl	800c928 <StreamKGramToBuffer>
 800cada:	e016      	b.n	800cb0a <streamCommand+0x152>
		StreamKGramToBuffer(channel, &weight2_buffer, period, timeout);
 800cadc:	0033      	movs	r3, r6
 800cade:	9a04      	ldr	r2, [sp, #16]
 800cae0:	4933      	ldr	r1, [pc, #204]	; (800cbb0 <streamCommand+0x1f8>)
 800cae2:	0028      	movs	r0, r5
 800cae4:	f7ff ff20 	bl	800c928 <StreamKGramToBuffer>
 800cae8:	e00f      	b.n	800cb0a <streamCommand+0x152>
			strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongName);
 800caea:	2214      	movs	r2, #20
 800caec:	4931      	ldr	r1, [pc, #196]	; (800cbb4 <streamCommand+0x1fc>)
 800caee:	9803      	ldr	r0, [sp, #12]
 800caf0:	f008 fbc1 	bl	8015276 <memcpy>
  if (H26R0_ERR_WrongParams == result)
 800caf4:	2f02      	cmp	r7, #2
 800caf6:	d108      	bne.n	800cb0a <streamCommand+0x152>
 800caf8:	e002      	b.n	800cb00 <streamCommand+0x148>
	else if (NULL == pcParameterString5) 
 800cafa:	465b      	mov	r3, fp
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00a      	beq.n	800cb16 <streamCommand+0x15e>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800cb00:	2212      	movs	r2, #18
 800cb02:	492d      	ldr	r1, [pc, #180]	; (800cbb8 <streamCommand+0x200>)
 800cb04:	9803      	ldr	r0, [sp, #12]
 800cb06:	f008 fbb6 	bl	8015276 <memcpy>
}
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	b00d      	add	sp, #52	; 0x34
 800cb0e:	bc0c      	pop	{r2, r3}
 800cb10:	4690      	mov	r8, r2
 800cb12:	469b      	mov	fp, r3
 800cb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NULL != pcParameterString4 && !strncmp((const char *)pcParameterString4, "-v", 2)) {
 800cb16:	2c00      	cmp	r4, #0
 800cb18:	d00c      	beq.n	800cb34 <streamCommand+0x17c>
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	4927      	ldr	r1, [pc, #156]	; (800cbbc <streamCommand+0x204>)
 800cb1e:	0020      	movs	r0, r4
 800cb20:	f008 fdf0 	bl	8015704 <strncmp>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d105      	bne.n	800cb34 <streamCommand+0x17c>
			StreamKGramToVERBOSE(channel, period, timeout);
 800cb28:	0032      	movs	r2, r6
 800cb2a:	9904      	ldr	r1, [sp, #16]
 800cb2c:	0028      	movs	r0, r5
 800cb2e:	f7ff fe65 	bl	800c7fc <StreamKGramToVERBOSE>
 800cb32:	e7df      	b.n	800caf4 <streamCommand+0x13c>
			if (channel == 1 || channel == 2)
 800cb34:	1e6b      	subs	r3, r5, #1
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d828      	bhi.n	800cb8e <streamCommand+0x1d6>
			strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI);
 800cb3c:	2225      	movs	r2, #37	; 0x25
 800cb3e:	4920      	ldr	r1, [pc, #128]	; (800cbc0 <streamCommand+0x208>)
 800cb40:	9c03      	ldr	r4, [sp, #12]
 800cb42:	0020      	movs	r0, r4
 800cb44:	f008 fb97 	bl	8015276 <memcpy>
			writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800cb48:	0020      	movs	r0, r4
 800cb4a:	f7f3 fae5 	bl	8000118 <strlen>
 800cb4e:	b282      	uxth	r2, r0
 800cb50:	4b1c      	ldr	r3, [pc, #112]	; (800cbc4 <streamCommand+0x20c>)
 800cb52:	7818      	ldrb	r0, [r3, #0]
 800cb54:	2301      	movs	r3, #1
 800cb56:	425b      	negs	r3, r3
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	3333      	adds	r3, #51	; 0x33
 800cb5c:	0021      	movs	r1, r4
 800cb5e:	f002 fe23 	bl	800f7a8 <writePxMutex>
			StreamKGramToCLI(channel, period, timeout);
 800cb62:	0032      	movs	r2, r6
 800cb64:	9904      	ldr	r1, [sp, #16]
 800cb66:	0028      	movs	r0, r5
 800cb68:	f7ff fda4 	bl	800c6b4 <StreamKGramToCLI>
			while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){taskYIELD();}
 800cb6c:	4b16      	ldr	r3, [pc, #88]	; (800cbc8 <streamCommand+0x210>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d109      	bne.n	800cb88 <streamCommand+0x1d0>
			memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800cb74:	9c03      	ldr	r4, [sp, #12]
 800cb76:	0020      	movs	r0, r4
 800cb78:	f7f3 face 	bl	8000118 <strlen>
 800cb7c:	0002      	movs	r2, r0
 800cb7e:	2100      	movs	r1, #0
 800cb80:	0020      	movs	r0, r4
 800cb82:	f008 fb81 	bl	8015288 <memset>
 800cb86:	e7b5      	b.n	800caf4 <streamCommand+0x13c>
			while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){taskYIELD();}
 800cb88:	f004 fe2c 	bl	80117e4 <vPortYield>
 800cb8c:	e7ee      	b.n	800cb6c <streamCommand+0x1b4>
				 strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800cb8e:	2212      	movs	r2, #18
 800cb90:	4909      	ldr	r1, [pc, #36]	; (800cbb8 <streamCommand+0x200>)
 800cb92:	9803      	ldr	r0, [sp, #12]
 800cb94:	f008 fb6f 	bl	8015276 <memcpy>
 800cb98:	e7ac      	b.n	800caf4 <streamCommand+0x13c>
 800cb9a:	46c0      	nop			; (mov r8, r8)
 800cb9c:	0801cd98 	.word	0x0801cd98
 800cba0:	0801cd9c 	.word	0x0801cd9c
 800cba4:	0801ce10 	.word	0x0801ce10
 800cba8:	0801cda4 	.word	0x0801cda4
 800cbac:	20006fa8 	.word	0x20006fa8
 800cbb0:	20006ec0 	.word	0x20006ec0
 800cbb4:	0801ce44 	.word	0x0801ce44
 800cbb8:	0801c93c 	.word	0x0801c93c
 800cbbc:	0801ce58 	.word	0x0801ce58
 800cbc0:	0801ce5c 	.word	0x0801ce5c
 800cbc4:	20000a9f 	.word	0x20000a9f
 800cbc8:	20001b4c 	.word	0x20001b4c

0800cbcc <PowerDown>:
{
 800cbcc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_SET);
 800cbce:	2180      	movs	r1, #128	; 0x80
 800cbd0:	2090      	movs	r0, #144	; 0x90
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	0089      	lsls	r1, r1, #2
 800cbd6:	05c0      	lsls	r0, r0, #23
 800cbd8:	f006 fb9b 	bl	8013312 <HAL_GPIO_WritePin>
}
 800cbdc:	2000      	movs	r0, #0
 800cbde:	bd10      	pop	{r4, pc}

0800cbe0 <Stop>:
{
 800cbe0:	b510      	push	{r4, lr}
 800cbe2:	b082      	sub	sp, #8
	global_mode=IDLE_CASE;
 800cbe4:	2400      	movs	r4, #0
 800cbe6:	4b0a      	ldr	r3, [pc, #40]	; (800cc10 <Stop+0x30>)
 800cbe8:	701c      	strb	r4, [r3, #0]
  PowerDown();
 800cbea:	f7ff ffef 	bl	800cbcc <PowerDown>
	xTimerStop( xTimer, 0 );
 800cbee:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <Stop+0x34>)
 800cbf0:	6818      	ldr	r0, [r3, #0]
 800cbf2:	9400      	str	r4, [sp, #0]
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	2103      	movs	r1, #3
 800cbfa:	f004 fc53 	bl	80114a4 <xTimerGenericCommand>
	weight1_buffer=0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	4a05      	ldr	r2, [pc, #20]	; (800cc18 <Stop+0x38>)
 800cc02:	6013      	str	r3, [r2, #0]
	weight2_buffer=0;
 800cc04:	4a05      	ldr	r2, [pc, #20]	; (800cc1c <Stop+0x3c>)
 800cc06:	6013      	str	r3, [r2, #0]
}
 800cc08:	2000      	movs	r0, #0
 800cc0a:	b002      	add	sp, #8
 800cc0c:	bd10      	pop	{r4, pc}
 800cc0e:	46c0      	nop			; (mov r8, r8)
 800cc10:	20006f35 	.word	0x20006f35
 800cc14:	20001b74 	.word	0x20001b74
 800cc18:	20006fa8 	.word	0x20006fa8
 800cc1c:	20006ec0 	.word	0x20006ec0

0800cc20 <stopCommand>:
{
 800cc20:	b510      	push	{r4, lr}
  configASSERT( pcWriteBuffer );
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d101      	bne.n	800cc2a <stopCommand+0xa>
 800cc26:	b672      	cpsid	i
 800cc28:	e7fe      	b.n	800cc28 <stopCommand+0x8>
	Stop();
 800cc2a:	f7ff ffd9 	bl	800cbe0 <Stop>
}
 800cc2e:	2000      	movs	r0, #0
 800cc30:	bd10      	pop	{r4, pc}

0800cc32 <PowerOn>:
{
 800cc32:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,PD_SCK,GPIO_PIN_RESET);
 800cc34:	2180      	movs	r1, #128	; 0x80
 800cc36:	2090      	movs	r0, #144	; 0x90
 800cc38:	2200      	movs	r2, #0
 800cc3a:	0089      	lsls	r1, r1, #2
 800cc3c:	05c0      	lsls	r0, r0, #23
 800cc3e:	f006 fb68 	bl	8013312 <HAL_GPIO_WritePin>
}
 800cc42:	2000      	movs	r0, #0
 800cc44:	bd10      	pop	{r4, pc}
	...

0800cc48 <SampleGram>:
{
 800cc48:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800cc4a:	f7ff fb43 	bl	800c2d4 <SetHX711Gain>
	PowerOn();
 800cc4e:	f7ff fff0 	bl	800cc32 <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800cc52:	2400      	movs	r4, #0
 800cc54:	e003      	b.n	800cc5e <SampleGram+0x16>
 800cc56:	f7ff f9cd 	bl	800bff4 <readHX711>
 800cc5a:	3401      	adds	r4, #1
 800cc5c:	b2e4      	uxtb	r4, r4
 800cc5e:	2c01      	cmp	r4, #1
 800cc60:	d9f9      	bls.n	800cc56 <SampleGram+0xe>
	weightGram=weightCalculation()*Kg2Gram_ratio;
 800cc62:	f7ff fa33 	bl	800c0cc <weightCalculation>
 800cc66:	4903      	ldr	r1, [pc, #12]	; (800cc74 <SampleGram+0x2c>)
 800cc68:	f7f4 f91e 	bl	8000ea8 <__aeabi_fmul>
 800cc6c:	4b02      	ldr	r3, [pc, #8]	; (800cc78 <SampleGram+0x30>)
 800cc6e:	6018      	str	r0, [r3, #0]
}
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	46c0      	nop			; (mov r8, r8)
 800cc74:	447a0000 	.word	0x447a0000
 800cc78:	20001b60 	.word	0x20001b60

0800cc7c <SampleKGram>:
{
 800cc7c:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800cc7e:	f7ff fb29 	bl	800c2d4 <SetHX711Gain>
	PowerOn();
 800cc82:	f7ff ffd6 	bl	800cc32 <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800cc86:	2400      	movs	r4, #0
 800cc88:	e003      	b.n	800cc92 <SampleKGram+0x16>
 800cc8a:	f7ff f9b3 	bl	800bff4 <readHX711>
 800cc8e:	3401      	adds	r4, #1
 800cc90:	b2e4      	uxtb	r4, r4
 800cc92:	2c01      	cmp	r4, #1
 800cc94:	d9f9      	bls.n	800cc8a <SampleKGram+0xe>
	weightKGram=weightCalculation();
 800cc96:	f7ff fa19 	bl	800c0cc <weightCalculation>
 800cc9a:	4b01      	ldr	r3, [pc, #4]	; (800cca0 <SampleKGram+0x24>)
 800cc9c:	6018      	str	r0, [r3, #0]
}
 800cc9e:	bd10      	pop	{r4, pc}
 800cca0:	20001b64 	.word	0x20001b64

0800cca4 <SampleOunce>:
{
 800cca4:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800cca6:	f7ff fb15 	bl	800c2d4 <SetHX711Gain>
	PowerOn();
 800ccaa:	f7ff ffc2 	bl	800cc32 <PowerOn>
	for(i=0; i<2; i++)		readHX711();
 800ccae:	2400      	movs	r4, #0
 800ccb0:	e003      	b.n	800ccba <SampleOunce+0x16>
 800ccb2:	f7ff f99f 	bl	800bff4 <readHX711>
 800ccb6:	3401      	adds	r4, #1
 800ccb8:	b2e4      	uxtb	r4, r4
 800ccba:	2c01      	cmp	r4, #1
 800ccbc:	d9f9      	bls.n	800ccb2 <SampleOunce+0xe>
	weightOunce=weightCalculation()*Kg2Ounce_ratio;
 800ccbe:	f7ff fa05 	bl	800c0cc <weightCalculation>
 800ccc2:	f7f6 fa2f 	bl	8003124 <__aeabi_f2d>
 800ccc6:	4a04      	ldr	r2, [pc, #16]	; (800ccd8 <SampleOunce+0x34>)
 800ccc8:	4b04      	ldr	r3, [pc, #16]	; (800ccdc <SampleOunce+0x38>)
 800ccca:	f7f5 fbb3 	bl	8002434 <__aeabi_dmul>
 800ccce:	f7f6 fa7b 	bl	80031c8 <__aeabi_d2f>
 800ccd2:	4b03      	ldr	r3, [pc, #12]	; (800cce0 <SampleOunce+0x3c>)
 800ccd4:	6018      	str	r0, [r3, #0]
}
 800ccd6:	bd10      	pop	{r4, pc}
 800ccd8:	6e978d50 	.word	0x6e978d50
 800ccdc:	4041a312 	.word	0x4041a312
 800cce0:	20001b68 	.word	0x20001b68

0800cce4 <SamplePound>:
{
 800cce4:	b510      	push	{r4, lr}
	SetHX711Gain(ch);
 800cce6:	f7ff faf5 	bl	800c2d4 <SetHX711Gain>
	PowerOn();
 800ccea:	f7ff ffa2 	bl	800cc32 <PowerOn>
	for(i=0; i<2; i++) 		readHX711();
 800ccee:	2400      	movs	r4, #0
 800ccf0:	e003      	b.n	800ccfa <SamplePound+0x16>
 800ccf2:	f7ff f97f 	bl	800bff4 <readHX711>
 800ccf6:	3401      	adds	r4, #1
 800ccf8:	b2e4      	uxtb	r4, r4
 800ccfa:	2c01      	cmp	r4, #1
 800ccfc:	d9f9      	bls.n	800ccf2 <SamplePound+0xe>
	weightPound=weightCalculation()*Kg2Pound_ratio;  
 800ccfe:	f7ff f9e5 	bl	800c0cc <weightCalculation>
 800cd02:	f7f6 fa0f 	bl	8003124 <__aeabi_f2d>
 800cd06:	4a04      	ldr	r2, [pc, #16]	; (800cd18 <SamplePound+0x34>)
 800cd08:	4b04      	ldr	r3, [pc, #16]	; (800cd1c <SamplePound+0x38>)
 800cd0a:	f7f5 fb93 	bl	8002434 <__aeabi_dmul>
 800cd0e:	f7f6 fa5b 	bl	80031c8 <__aeabi_d2f>
 800cd12:	4b03      	ldr	r3, [pc, #12]	; (800cd20 <SamplePound+0x3c>)
 800cd14:	6018      	str	r0, [r3, #0]
}
 800cd16:	bd10      	pop	{r4, pc}
 800cd18:	2f275feb 	.word	0x2f275feb
 800cd1c:	4001a311 	.word	0x4001a311
 800cd20:	20001b6c 	.word	0x20001b6c

0800cd24 <Average>:
{
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	0004      	movs	r4, r0
 800cd28:	000d      	movs	r5, r1
	PowerOn();
 800cd2a:	f7ff ff82 	bl	800cc32 <PowerOn>
	SetHX711Gain(ch);
 800cd2e:	0020      	movs	r0, r4
 800cd30:	f7ff fad0 	bl	800c2d4 <SetHX711Gain>
	for(i=0; i<=N; i++)
 800cd34:	2400      	movs	r4, #0
 800cd36:	e001      	b.n	800cd3c <Average+0x18>
 800cd38:	3401      	adds	r4, #1
 800cd3a:	b2e4      	uxtb	r4, r4
 800cd3c:	42ac      	cmp	r4, r5
 800cd3e:	d809      	bhi.n	800cd54 <Average+0x30>
		readHX711();	
 800cd40:	f7ff f958 	bl	800bff4 <readHX711>
		if (i>=1)
 800cd44:	2c00      	cmp	r4, #0
 800cd46:	d0f7      	beq.n	800cd38 <Average+0x14>
			Sample[i]=valuef;
 800cd48:	00a3      	lsls	r3, r4, #2
 800cd4a:	4a0d      	ldr	r2, [pc, #52]	; (800cd80 <Average+0x5c>)
 800cd4c:	6811      	ldr	r1, [r2, #0]
 800cd4e:	4a0d      	ldr	r2, [pc, #52]	; (800cd84 <Average+0x60>)
 800cd50:	5099      	str	r1, [r3, r2]
 800cd52:	e7f1      	b.n	800cd38 <Average+0x14>
	float average=0.0;
 800cd54:	2600      	movs	r6, #0
	for (ii=0; ii<N; ii++)
 800cd56:	2400      	movs	r4, #0
 800cd58:	e008      	b.n	800cd6c <Average+0x48>
		average+=Sample[ii+1];
 800cd5a:	3401      	adds	r4, #1
 800cd5c:	00a2      	lsls	r2, r4, #2
 800cd5e:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <Average+0x60>)
 800cd60:	58d1      	ldr	r1, [r2, r3]
 800cd62:	1c30      	adds	r0, r6, #0
 800cd64:	f7f3 fd2e 	bl	80007c4 <__aeabi_fadd>
 800cd68:	1c06      	adds	r6, r0, #0
	for (ii=0; ii<N; ii++)
 800cd6a:	b2e4      	uxtb	r4, r4
 800cd6c:	42ac      	cmp	r4, r5
 800cd6e:	d3f4      	bcc.n	800cd5a <Average+0x36>
	average/=N;
 800cd70:	0028      	movs	r0, r5
 800cd72:	f7f4 fbaf 	bl	80014d4 <__aeabi_i2f>
 800cd76:	1c01      	adds	r1, r0, #0
 800cd78:	1c30      	adds	r0, r6, #0
 800cd7a:	f7f3 febd 	bl	8000af8 <__aeabi_fdiv>
}
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}
 800cd80:	20001b5c 	.word	0x20001b5c
 800cd84:	20001738 	.word	0x20001738

0800cd88 <SendResults>:
{
 800cd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd8a:	b087      	sub	sp, #28
 800cd8c:	1c05      	adds	r5, r0, #0
 800cd8e:	000c      	movs	r4, r1
 800cd90:	001f      	movs	r7, r3
 800cd92:	ab0c      	add	r3, sp, #48	; 0x30
 800cd94:	781e      	ldrb	r6, [r3, #0]
	float Raw_Msg=0.0f;
 800cd96:	2300      	movs	r3, #0
 800cd98:	9305      	str	r3, [sp, #20]
	uint32_t RawMsgInt=0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	9304      	str	r3, [sp, #16]
	switch (unit)
 800cd9e:	4bad      	ldr	r3, [pc, #692]	; (800d054 <SendResults+0x2cc>)
 800cda0:	781a      	ldrb	r2, [r3, #0]
 800cda2:	2a05      	cmp	r2, #5
 800cda4:	d823      	bhi.n	800cdee <SendResults+0x66>
 800cda6:	0093      	lsls	r3, r2, #2
 800cda8:	4aab      	ldr	r2, [pc, #684]	; (800d058 <SendResults+0x2d0>)
 800cdaa:	58d3      	ldr	r3, [r2, r3]
 800cdac:	469f      	mov	pc, r3
			Raw_Msg=message*Kg2Gram_ratio; break;
 800cdae:	49ab      	ldr	r1, [pc, #684]	; (800d05c <SendResults+0x2d4>)
 800cdb0:	f7f4 f87a 	bl	8000ea8 <__aeabi_fmul>
 800cdb4:	9005      	str	r0, [sp, #20]
 800cdb6:	e01b      	b.n	800cdf0 <SendResults+0x68>
			Raw_Msg=message; break;
 800cdb8:	9005      	str	r0, [sp, #20]
 800cdba:	e019      	b.n	800cdf0 <SendResults+0x68>
			Raw_Msg=message*Kg2Ounce_ratio; break;
 800cdbc:	f7f6 f9b2 	bl	8003124 <__aeabi_f2d>
 800cdc0:	4aa7      	ldr	r2, [pc, #668]	; (800d060 <SendResults+0x2d8>)
 800cdc2:	4ba8      	ldr	r3, [pc, #672]	; (800d064 <SendResults+0x2dc>)
 800cdc4:	f7f5 fb36 	bl	8002434 <__aeabi_dmul>
 800cdc8:	f7f6 f9fe 	bl	80031c8 <__aeabi_d2f>
 800cdcc:	9005      	str	r0, [sp, #20]
 800cdce:	e00f      	b.n	800cdf0 <SendResults+0x68>
			Raw_Msg=message*Kg2Pound_ratio; break;
 800cdd0:	f7f6 f9a8 	bl	8003124 <__aeabi_f2d>
 800cdd4:	4aa4      	ldr	r2, [pc, #656]	; (800d068 <SendResults+0x2e0>)
 800cdd6:	4ba5      	ldr	r3, [pc, #660]	; (800d06c <SendResults+0x2e4>)
 800cdd8:	f7f5 fb2c 	bl	8002434 <__aeabi_dmul>
 800cddc:	f7f6 f9f4 	bl	80031c8 <__aeabi_d2f>
 800cde0:	9005      	str	r0, [sp, #20]
 800cde2:	e005      	b.n	800cdf0 <SendResults+0x68>
			Raw_Msg=Average(global_ch, 1);
 800cde4:	4ba2      	ldr	r3, [pc, #648]	; (800d070 <SendResults+0x2e8>)
 800cde6:	7818      	ldrb	r0, [r3, #0]
 800cde8:	2101      	movs	r1, #1
 800cdea:	f7ff ff9b 	bl	800cd24 <Average>
			Raw_Msg=message; break;
 800cdee:	9505      	str	r5, [sp, #20]
  pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800cdf0:	f002 ff30 	bl	800fc54 <FreeRTOS_CLIGetOutputBuffer>
 800cdf4:	0005      	movs	r5, r0
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE)
 800cdf6:	2c04      	cmp	r4, #4
 800cdf8:	d001      	beq.n	800cdfe <SendResults+0x76>
 800cdfa:	2c02      	cmp	r4, #2
 800cdfc:	d106      	bne.n	800ce0c <SendResults+0x84>
  switch(Mode)
 800cdfe:	2c09      	cmp	r4, #9
 800ce00:	d900      	bls.n	800ce04 <SendResults+0x7c>
 800ce02:	e11c      	b.n	800d03e <SendResults+0x2b6>
 800ce04:	00a3      	lsls	r3, r4, #2
 800ce06:	4a9b      	ldr	r2, [pc, #620]	; (800d074 <SendResults+0x2ec>)
 800ce08:	58d3      	ldr	r3, [r2, r3]
 800ce0a:	469f      	mov	pc, r3
		strUnit = malloc(6*sizeof(char));
 800ce0c:	2006      	movs	r0, #6
 800ce0e:	f007 ffe5 	bl	8014ddc <malloc>
 800ce12:	9003      	str	r0, [sp, #12]
		memset(strUnit, 0, (6*sizeof(char)));
 800ce14:	2206      	movs	r2, #6
 800ce16:	2100      	movs	r1, #0
 800ce18:	f008 fa36 	bl	8015288 <memset>
		if (unit == Gram)
 800ce1c:	4b8d      	ldr	r3, [pc, #564]	; (800d054 <SendResults+0x2cc>)
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d00d      	beq.n	800ce40 <SendResults+0xb8>
		else if (unit == KGram)
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d011      	beq.n	800ce4c <SendResults+0xc4>
		else if (unit == Ounce)
 800ce28:	2b03      	cmp	r3, #3
 800ce2a:	d015      	beq.n	800ce58 <SendResults+0xd0>
		else if (unit == Pound)
 800ce2c:	2b04      	cmp	r3, #4
 800ce2e:	d019      	beq.n	800ce64 <SendResults+0xdc>
		else if (unit == RAW)
 800ce30:	2b05      	cmp	r3, #5
 800ce32:	d01d      	beq.n	800ce70 <SendResults+0xe8>
			sprintf( ( char * ) strUnit, "Kg");
 800ce34:	2203      	movs	r2, #3
 800ce36:	4990      	ldr	r1, [pc, #576]	; (800d078 <SendResults+0x2f0>)
 800ce38:	9803      	ldr	r0, [sp, #12]
 800ce3a:	f008 fa1c 	bl	8015276 <memcpy>
 800ce3e:	e7de      	b.n	800cdfe <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Gram");
 800ce40:	2205      	movs	r2, #5
 800ce42:	498e      	ldr	r1, [pc, #568]	; (800d07c <SendResults+0x2f4>)
 800ce44:	9803      	ldr	r0, [sp, #12]
 800ce46:	f008 fa16 	bl	8015276 <memcpy>
 800ce4a:	e7d8      	b.n	800cdfe <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Kg");
 800ce4c:	2203      	movs	r2, #3
 800ce4e:	498a      	ldr	r1, [pc, #552]	; (800d078 <SendResults+0x2f0>)
 800ce50:	9803      	ldr	r0, [sp, #12]
 800ce52:	f008 fa10 	bl	8015276 <memcpy>
 800ce56:	e7d2      	b.n	800cdfe <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Ounce");
 800ce58:	2206      	movs	r2, #6
 800ce5a:	4989      	ldr	r1, [pc, #548]	; (800d080 <SendResults+0x2f8>)
 800ce5c:	9803      	ldr	r0, [sp, #12]
 800ce5e:	f008 fa0a 	bl	8015276 <memcpy>
 800ce62:	e7cc      	b.n	800cdfe <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Pound");
 800ce64:	2206      	movs	r2, #6
 800ce66:	4987      	ldr	r1, [pc, #540]	; (800d084 <SendResults+0x2fc>)
 800ce68:	9803      	ldr	r0, [sp, #12]
 800ce6a:	f008 fa04 	bl	8015276 <memcpy>
 800ce6e:	e7c6      	b.n	800cdfe <SendResults+0x76>
			sprintf( ( char * ) strUnit, "Raw Data");
 800ce70:	2209      	movs	r2, #9
 800ce72:	4985      	ldr	r1, [pc, #532]	; (800d088 <SendResults+0x300>)
 800ce74:	9803      	ldr	r0, [sp, #12]
 800ce76:	f008 f9fe 	bl	8015276 <memcpy>
 800ce7a:	e7c0      	b.n	800cdfe <SendResults+0x76>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800ce7c:	4b83      	ldr	r3, [pc, #524]	; (800d08c <SendResults+0x304>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	2b05      	cmp	r3, #5
 800ce82:	d01d      	beq.n	800cec0 <SendResults+0x138>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800ce84:	2b07      	cmp	r3, #7
 800ce86:	d000      	beq.n	800ce8a <SendResults+0x102>
 800ce88:	e0d9      	b.n	800d03e <SendResults+0x2b6>
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightMsg, strUnit, Raw_Msg);
 800ce8a:	9805      	ldr	r0, [sp, #20]
 800ce8c:	f7f6 f94a 	bl	8003124 <__aeabi_f2d>
 800ce90:	9000      	str	r0, [sp, #0]
 800ce92:	9101      	str	r1, [sp, #4]
 800ce94:	9a03      	ldr	r2, [sp, #12]
 800ce96:	497e      	ldr	r1, [pc, #504]	; (800d090 <SendResults+0x308>)
 800ce98:	0028      	movs	r0, r5
 800ce9a:	f008 fbef 	bl	801567c <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ce9e:	0028      	movs	r0, r5
 800cea0:	f7f3 f93a 	bl	8000118 <strlen>
 800cea4:	23fa      	movs	r3, #250	; 0xfa
 800cea6:	b282      	uxth	r2, r0
 800cea8:	497a      	ldr	r1, [pc, #488]	; (800d094 <SendResults+0x30c>)
 800ceaa:	7808      	ldrb	r0, [r1, #0]
 800ceac:	2101      	movs	r1, #1
 800ceae:	4249      	negs	r1, r1
 800ceb0:	9100      	str	r1, [sp, #0]
 800ceb2:	005b      	lsls	r3, r3, #1
 800ceb4:	0029      	movs	r1, r5
 800ceb6:	f002 fc77 	bl	800f7a8 <writePxMutex>
			CheckForEnterKey();
 800ceba:	f7fe fe27 	bl	800bb0c <CheckForEnterKey>
 800cebe:	e0be      	b.n	800d03e <SendResults+0x2b6>
			RawMsgInt=Raw_Msg*10;
 800cec0:	4975      	ldr	r1, [pc, #468]	; (800d098 <SendResults+0x310>)
 800cec2:	9805      	ldr	r0, [sp, #20]
 800cec4:	f7f3 fff0 	bl	8000ea8 <__aeabi_fmul>
 800cec8:	f7f3 fb84 	bl	80005d4 <__aeabi_f2uiz>
 800cecc:	0003      	movs	r3, r0
 800cece:	9004      	str	r0, [sp, #16]
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightMsgUINT, strUnit, RawMsgInt);
 800ced0:	9a03      	ldr	r2, [sp, #12]
 800ced2:	4972      	ldr	r1, [pc, #456]	; (800d09c <SendResults+0x314>)
 800ced4:	0028      	movs	r0, r5
 800ced6:	f008 fbd1 	bl	801567c <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ceda:	0028      	movs	r0, r5
 800cedc:	f7f3 f91c 	bl	8000118 <strlen>
 800cee0:	23fa      	movs	r3, #250	; 0xfa
 800cee2:	b282      	uxth	r2, r0
 800cee4:	496b      	ldr	r1, [pc, #428]	; (800d094 <SendResults+0x30c>)
 800cee6:	7808      	ldrb	r0, [r1, #0]
 800cee8:	2101      	movs	r1, #1
 800ceea:	4249      	negs	r1, r1
 800ceec:	9100      	str	r1, [sp, #0]
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	0029      	movs	r1, r5
 800cef2:	f002 fc59 	bl	800f7a8 <writePxMutex>
			CheckForEnterKey();
 800cef6:	f7fe fe09 	bl	800bb0c <CheckForEnterKey>
 800cefa:	e0a0      	b.n	800d03e <SendResults+0x2b6>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800cefc:	4b63      	ldr	r3, [pc, #396]	; (800d08c <SendResults+0x304>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	2b05      	cmp	r3, #5
 800cf02:	d01c      	beq.n	800cf3e <SendResults+0x1b6>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800cf04:	2b07      	cmp	r3, #7
 800cf06:	d000      	beq.n	800cf0a <SendResults+0x182>
 800cf08:	e099      	b.n	800d03e <SendResults+0x2b6>
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightVerboseMsg, Raw_Msg);
 800cf0a:	9805      	ldr	r0, [sp, #20]
 800cf0c:	f7f6 f90a 	bl	8003124 <__aeabi_f2d>
 800cf10:	0002      	movs	r2, r0
 800cf12:	000b      	movs	r3, r1
 800cf14:	4962      	ldr	r1, [pc, #392]	; (800d0a0 <SendResults+0x318>)
 800cf16:	0028      	movs	r0, r5
 800cf18:	f008 fbb0 	bl	801567c <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800cf1c:	0028      	movs	r0, r5
 800cf1e:	f7f3 f8fb 	bl	8000118 <strlen>
 800cf22:	23fa      	movs	r3, #250	; 0xfa
 800cf24:	b282      	uxth	r2, r0
 800cf26:	495b      	ldr	r1, [pc, #364]	; (800d094 <SendResults+0x30c>)
 800cf28:	7808      	ldrb	r0, [r1, #0]
 800cf2a:	2101      	movs	r1, #1
 800cf2c:	4249      	negs	r1, r1
 800cf2e:	9100      	str	r1, [sp, #0]
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	0029      	movs	r1, r5
 800cf34:	f002 fc38 	bl	800f7a8 <writePxMutex>
			CheckForEnterKey();
 800cf38:	f7fe fde8 	bl	800bb0c <CheckForEnterKey>
 800cf3c:	e07f      	b.n	800d03e <SendResults+0x2b6>
			RawMsgInt=Raw_Msg*10;
 800cf3e:	4956      	ldr	r1, [pc, #344]	; (800d098 <SendResults+0x310>)
 800cf40:	9805      	ldr	r0, [sp, #20]
 800cf42:	f7f3 ffb1 	bl	8000ea8 <__aeabi_fmul>
 800cf46:	f7f3 fb45 	bl	80005d4 <__aeabi_f2uiz>
 800cf4a:	0002      	movs	r2, r0
 800cf4c:	9004      	str	r0, [sp, #16]
      sprintf( ( char * ) pcOutputString, ( char * ) pcWeightVerboseMsgUINT, RawMsgInt);
 800cf4e:	4955      	ldr	r1, [pc, #340]	; (800d0a4 <SendResults+0x31c>)
 800cf50:	0028      	movs	r0, r5
 800cf52:	f008 fb93 	bl	801567c <sprintf>
      writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800cf56:	0028      	movs	r0, r5
 800cf58:	f7f3 f8de 	bl	8000118 <strlen>
 800cf5c:	23fa      	movs	r3, #250	; 0xfa
 800cf5e:	b282      	uxth	r2, r0
 800cf60:	494c      	ldr	r1, [pc, #304]	; (800d094 <SendResults+0x30c>)
 800cf62:	7808      	ldrb	r0, [r1, #0]
 800cf64:	2101      	movs	r1, #1
 800cf66:	4249      	negs	r1, r1
 800cf68:	9100      	str	r1, [sp, #0]
 800cf6a:	005b      	lsls	r3, r3, #1
 800cf6c:	0029      	movs	r1, r5
 800cf6e:	f002 fc1b 	bl	800f7a8 <writePxMutex>
			CheckForEnterKey();
 800cf72:	f7fe fdcb 	bl	800bb0c <CheckForEnterKey>
 800cf76:	e062      	b.n	800d03e <SendResults+0x2b6>
			if (H26R0_DATA_FORMAT == FMT_UINT32)
 800cf78:	4b44      	ldr	r3, [pc, #272]	; (800d08c <SendResults+0x304>)
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b05      	cmp	r3, #5
 800cf7e:	d016      	beq.n	800cfae <SendResults+0x226>
			else if (H26R0_DATA_FORMAT == FMT_FLOAT)
 800cf80:	2b07      	cmp	r3, #7
 800cf82:	d15c      	bne.n	800d03e <SendResults+0x2b6>
				if (Module==myID){ 
 800cf84:	4b48      	ldr	r3, [pc, #288]	; (800d0a8 <SendResults+0x320>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	42b3      	cmp	r3, r6
 800cf8a:	d03d      	beq.n	800d008 <SendResults+0x280>
						messageParams[0] = Port;
 800cf8c:	4b47      	ldr	r3, [pc, #284]	; (800d0ac <SendResults+0x324>)
 800cf8e:	701f      	strb	r7, [r3, #0]
						messageParams[1] = *((__IO uint8_t *)(&Raw_Msg)+3);
 800cf90:	aa05      	add	r2, sp, #20
 800cf92:	78d1      	ldrb	r1, [r2, #3]
 800cf94:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&Raw_Msg)+2);
 800cf96:	7891      	ldrb	r1, [r2, #2]
 800cf98:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&Raw_Msg)+1);
 800cf9a:	7851      	ldrb	r1, [r2, #1]
 800cf9c:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&Raw_Msg)+0);
 800cf9e:	7812      	ldrb	r2, [r2, #0]
 800cfa0:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(Module, CODE_PORT_FORWARD, sizeof(float)+1);
 800cfa2:	2205      	movs	r2, #5
 800cfa4:	2123      	movs	r1, #35	; 0x23
 800cfa6:	0030      	movs	r0, r6
 800cfa8:	f7fc fdb8 	bl	8009b1c <SendMessageToModule>
 800cfac:	e047      	b.n	800d03e <SendResults+0x2b6>
				RawMsgInt=Raw_Msg*10;
 800cfae:	493a      	ldr	r1, [pc, #232]	; (800d098 <SendResults+0x310>)
 800cfb0:	9805      	ldr	r0, [sp, #20]
 800cfb2:	f7f3 ff79 	bl	8000ea8 <__aeabi_fmul>
 800cfb6:	f7f3 fb0d 	bl	80005d4 <__aeabi_f2uiz>
 800cfba:	9004      	str	r0, [sp, #16]
				if (Module==myID){
 800cfbc:	4b3a      	ldr	r3, [pc, #232]	; (800d0a8 <SendResults+0x320>)
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	42b3      	cmp	r3, r6
 800cfc2:	d010      	beq.n	800cfe6 <SendResults+0x25e>
						messageParams[0] = Port;
 800cfc4:	4b39      	ldr	r3, [pc, #228]	; (800d0ac <SendResults+0x324>)
 800cfc6:	701f      	strb	r7, [r3, #0]
						messageParams[1] = *((__IO uint8_t *)(&RawMsgInt)+3);
 800cfc8:	aa04      	add	r2, sp, #16
 800cfca:	78d1      	ldrb	r1, [r2, #3]
 800cfcc:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&RawMsgInt)+2);
 800cfce:	7891      	ldrb	r1, [r2, #2]
 800cfd0:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&RawMsgInt)+1);
 800cfd2:	7851      	ldrb	r1, [r2, #1]
 800cfd4:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&RawMsgInt)+0);
 800cfd6:	7812      	ldrb	r2, [r2, #0]
 800cfd8:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(Module, CODE_PORT_FORWARD, sizeof(uint32_t)+1);
 800cfda:	2205      	movs	r2, #5
 800cfdc:	2123      	movs	r1, #35	; 0x23
 800cfde:	0030      	movs	r0, r6
 800cfe0:	f7fc fd9c 	bl	8009b1c <SendMessageToModule>
 800cfe4:	e02b      	b.n	800d03e <SendResults+0x2b6>
						temp[0] = *((__IO uint8_t *)(&RawMsgInt)+3);
 800cfe6:	ab04      	add	r3, sp, #16
 800cfe8:	78da      	ldrb	r2, [r3, #3]
 800cfea:	4931      	ldr	r1, [pc, #196]	; (800d0b0 <SendResults+0x328>)
 800cfec:	700a      	strb	r2, [r1, #0]
						temp[1] = *((__IO uint8_t *)(&RawMsgInt)+2);
 800cfee:	789a      	ldrb	r2, [r3, #2]
 800cff0:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&RawMsgInt)+1);
 800cff2:	785a      	ldrb	r2, [r3, #1]
 800cff4:	708a      	strb	r2, [r1, #2]
						temp[3] = *((__IO uint8_t *)(&RawMsgInt)+0);
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	70cb      	strb	r3, [r1, #3]
						writePxMutex(Port, (char *)&temp, 4*sizeof(uint8_t), 10, 10);
 800cffa:	230a      	movs	r3, #10
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	2204      	movs	r2, #4
 800d000:	0038      	movs	r0, r7
 800d002:	f002 fbd1 	bl	800f7a8 <writePxMutex>
 800d006:	e01a      	b.n	800d03e <SendResults+0x2b6>
						temp[0] = *((__IO uint8_t *)(&Raw_Msg)+3);
 800d008:	ab05      	add	r3, sp, #20
 800d00a:	78da      	ldrb	r2, [r3, #3]
 800d00c:	4928      	ldr	r1, [pc, #160]	; (800d0b0 <SendResults+0x328>)
 800d00e:	700a      	strb	r2, [r1, #0]
						temp[1] = *((__IO uint8_t *)(&Raw_Msg)+2);
 800d010:	789a      	ldrb	r2, [r3, #2]
 800d012:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&Raw_Msg)+1);
 800d014:	785a      	ldrb	r2, [r3, #1]
 800d016:	708a      	strb	r2, [r1, #2]
						temp[3] = *((__IO uint8_t *)(&Raw_Msg)+0);
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	70cb      	strb	r3, [r1, #3]
						writePxMutex(Port, (char *)&temp, 4*sizeof(uint8_t), 10, 10);
 800d01c:	230a      	movs	r3, #10
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	2204      	movs	r2, #4
 800d022:	0038      	movs	r0, r7
 800d024:	f002 fbc0 	bl	800f7a8 <writePxMutex>
 800d028:	e009      	b.n	800d03e <SendResults+0x2b6>
      memset(Buffer, 0, sizeof(float));
 800d02a:	2204      	movs	r2, #4
 800d02c:	2100      	movs	r1, #0
 800d02e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d030:	f008 f92a 	bl	8015288 <memset>
      memcpy(Buffer, &Raw_Msg, sizeof(float));
 800d034:	2204      	movs	r2, #4
 800d036:	a905      	add	r1, sp, #20
 800d038:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d03a:	f008 f91c 	bl	8015276 <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE){
 800d03e:	2c04      	cmp	r4, #4
 800d040:	d004      	beq.n	800d04c <SendResults+0x2c4>
 800d042:	2c02      	cmp	r4, #2
 800d044:	d002      	beq.n	800d04c <SendResults+0x2c4>
		free(strUnit);
 800d046:	9803      	ldr	r0, [sp, #12]
 800d048:	f007 fed2 	bl	8014df0 <free>
}
 800d04c:	2000      	movs	r0, #0
 800d04e:	b007      	add	sp, #28
 800d050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d052:	46c0      	nop			; (mov r8, r8)
 800d054:	200000b4 	.word	0x200000b4
 800d058:	0801c7ac 	.word	0x0801c7ac
 800d05c:	447a0000 	.word	0x447a0000
 800d060:	6e978d50 	.word	0x6e978d50
 800d064:	4041a312 	.word	0x4041a312
 800d068:	2f275feb 	.word	0x2f275feb
 800d06c:	4001a311 	.word	0x4001a311
 800d070:	20006f34 	.word	0x20006f34
 800d074:	0801c7c4 	.word	0x0801c7c4
 800d078:	0801c83c 	.word	0x0801c83c
 800d07c:	0801c834 	.word	0x0801c834
 800d080:	0801c840 	.word	0x0801c840
 800d084:	0801c848 	.word	0x0801c848
 800d088:	0801c850 	.word	0x0801c850
 800d08c:	20000084 	.word	0x20000084
 800d090:	0801c870 	.word	0x0801c870
 800d094:	20000a9f 	.word	0x20000a9f
 800d098:	41200000 	.word	0x41200000
 800d09c:	0801c85c 	.word	0x0801c85c
 800d0a0:	0801c88c 	.word	0x0801c88c
 800d0a4:	0801c884 	.word	0x0801c884
 800d0a8:	20001066 	.word	0x20001066
 800d0ac:	20000f28 	.word	0x20000f28
 800d0b0:	20001b50 	.word	0x20001b50

0800d0b4 <sampleCommand>:
{
 800d0b4:	b570      	push	{r4, r5, r6, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	0005      	movs	r5, r0
 800d0ba:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	9303      	str	r3, [sp, #12]
  configASSERT( pcWriteBuffer );
 800d0c0:	2d00      	cmp	r5, #0
 800d0c2:	d101      	bne.n	800d0c8 <sampleCommand+0x14>
 800d0c4:	b672      	cpsid	i
 800d0c6:	e7fe      	b.n	800d0c6 <sampleCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d0c8:	aa03      	add	r2, sp, #12
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	f002 fdc6 	bl	800fc5c <FreeRTOS_CLIGetParameter>
  if (NULL != pcParameterString1)
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d019      	beq.n	800d108 <sampleCommand+0x54>
    channel = atoi( (char *)pcParameterString1);
 800d0d4:	f007 fe3f 	bl	8014d56 <atoi>
 800d0d8:	b2c4      	uxtb	r4, r0
	Module_Status result = H26R0_OK;
 800d0da:	2600      	movs	r6, #0
	if (channel == 1 || channel == 2)
 800d0dc:	1e63      	subs	r3, r4, #1
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d914      	bls.n	800d10e <sampleCommand+0x5a>
		if (result != H26R0_OK || channel != 1 || channel != 2 )
 800d0e4:	2e00      	cmp	r6, #0
 800d0e6:	d101      	bne.n	800d0ec <sampleCommand+0x38>
 800d0e8:	2c01      	cmp	r4, #1
 800d0ea:	d020      	beq.n	800d12e <sampleCommand+0x7a>
		strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageError);
 800d0ec:	2212      	movs	r2, #18
 800d0ee:	4911      	ldr	r1, [pc, #68]	; (800d134 <sampleCommand+0x80>)
 800d0f0:	0028      	movs	r0, r5
 800d0f2:	f008 f8c0 	bl	8015276 <memcpy>
  memset((char *) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800d0f6:	2299      	movs	r2, #153	; 0x99
 800d0f8:	0092      	lsls	r2, r2, #2
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	0028      	movs	r0, r5
 800d0fe:	f008 f8c3 	bl	8015288 <memset>
}
 800d102:	2000      	movs	r0, #0
 800d104:	b004      	add	sp, #16
 800d106:	bd70      	pop	{r4, r5, r6, pc}
    result = H26R0_ERR_WrongParams;
 800d108:	2602      	movs	r6, #2
	uint8_t channel = 0;
 800d10a:	2400      	movs	r4, #0
 800d10c:	e7e6      	b.n	800d0dc <sampleCommand+0x28>
		DATA_To_SEND=SampleKGram(channel);
 800d10e:	0020      	movs	r0, r4
 800d110:	f7ff fdb4 	bl	800cc7c <SampleKGram>
 800d114:	4b08      	ldr	r3, [pc, #32]	; (800d138 <sampleCommand+0x84>)
 800d116:	6018      	str	r0, [r3, #0]
		global_mode=SAMPLE_CLI_CASE;
 800d118:	2106      	movs	r1, #6
 800d11a:	4b08      	ldr	r3, [pc, #32]	; (800d13c <sampleCommand+0x88>)
 800d11c:	7019      	strb	r1, [r3, #0]
		SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800d11e:	4b08      	ldr	r3, [pc, #32]	; (800d140 <sampleCommand+0x8c>)
 800d120:	781a      	ldrb	r2, [r3, #0]
 800d122:	2300      	movs	r3, #0
 800d124:	9301      	str	r3, [sp, #4]
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	f7ff fe2e 	bl	800cd88 <SendResults>
 800d12c:	e7da      	b.n	800d0e4 <sampleCommand+0x30>
		if (result != H26R0_OK || channel != 1 || channel != 2 )
 800d12e:	2c02      	cmp	r4, #2
 800d130:	d1dc      	bne.n	800d0ec <sampleCommand+0x38>
 800d132:	e7e0      	b.n	800d0f6 <sampleCommand+0x42>
 800d134:	0801c93c 	.word	0x0801c93c
 800d138:	20001724 	.word	0x20001724
 800d13c:	20006f35 	.word	0x20006f35
 800d140:	200000b4 	.word	0x200000b4

0800d144 <LoadcellTask>:
{
 800d144:	b530      	push	{r4, r5, lr}
 800d146:	b083      	sub	sp, #12
 800d148:	e021      	b.n	800d18e <LoadcellTask+0x4a>
		switch(global_mode)
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d000      	beq.n	800d150 <LoadcellTask+0xc>
 800d14e:	e086      	b.n	800d25e <LoadcellTask+0x11a>
				t0=HAL_GetTick();
 800d150:	f004 fcd4 	bl	8011afc <HAL_GetTick>
 800d154:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);		
 800d156:	4b44      	ldr	r3, [pc, #272]	; (800d268 <LoadcellTask+0x124>)
 800d158:	7818      	ldrb	r0, [r3, #0]
 800d15a:	f7ff fd8f 	bl	800cc7c <SampleKGram>
 800d15e:	4b43      	ldr	r3, [pc, #268]	; (800d26c <LoadcellTask+0x128>)
 800d160:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800d162:	4b43      	ldr	r3, [pc, #268]	; (800d270 <LoadcellTask+0x12c>)
 800d164:	781a      	ldrb	r2, [r3, #0]
 800d166:	4b43      	ldr	r3, [pc, #268]	; (800d274 <LoadcellTask+0x130>)
 800d168:	7819      	ldrb	r1, [r3, #0]
 800d16a:	2300      	movs	r3, #0
 800d16c:	9301      	str	r3, [sp, #4]
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	f7ff fe0a 	bl	800cd88 <SendResults>
				while(HAL_GetTick()-t0<(global_period-1)) {taskYIELD();}
 800d174:	e001      	b.n	800d17a <LoadcellTask+0x36>
 800d176:	f004 fb35 	bl	80117e4 <vPortYield>
 800d17a:	f004 fcbf 	bl	8011afc <HAL_GetTick>
 800d17e:	1b00      	subs	r0, r0, r4
 800d180:	4b3d      	ldr	r3, [pc, #244]	; (800d278 <LoadcellTask+0x134>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	3b01      	subs	r3, #1
 800d186:	4298      	cmp	r0, r3
 800d188:	d3f5      	bcc.n	800d176 <LoadcellTask+0x32>
		taskYIELD();
 800d18a:	f004 fb2b 	bl	80117e4 <vPortYield>
		switch(global_mode)
 800d18e:	4b39      	ldr	r3, [pc, #228]	; (800d274 <LoadcellTask+0x130>)
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	2b02      	cmp	r3, #2
 800d194:	d023      	beq.n	800d1de <LoadcellTask+0x9a>
 800d196:	b2da      	uxtb	r2, r3
 800d198:	2a02      	cmp	r2, #2
 800d19a:	d9d6      	bls.n	800d14a <LoadcellTask+0x6>
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	d03f      	beq.n	800d220 <LoadcellTask+0xdc>
 800d1a0:	2b04      	cmp	r3, #4
 800d1a2:	d15c      	bne.n	800d25e <LoadcellTask+0x11a>
				t0=HAL_GetTick();
 800d1a4:	f004 fcaa 	bl	8011afc <HAL_GetTick>
 800d1a8:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800d1aa:	4b2f      	ldr	r3, [pc, #188]	; (800d268 <LoadcellTask+0x124>)
 800d1ac:	7818      	ldrb	r0, [r3, #0]
 800d1ae:	f7ff fd65 	bl	800cc7c <SampleKGram>
 800d1b2:	4b2e      	ldr	r3, [pc, #184]	; (800d26c <LoadcellTask+0x128>)
 800d1b4:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800d1b6:	4b2e      	ldr	r3, [pc, #184]	; (800d270 <LoadcellTask+0x12c>)
 800d1b8:	781a      	ldrb	r2, [r3, #0]
 800d1ba:	4b2e      	ldr	r3, [pc, #184]	; (800d274 <LoadcellTask+0x130>)
 800d1bc:	7819      	ldrb	r1, [r3, #0]
 800d1be:	2300      	movs	r3, #0
 800d1c0:	9301      	str	r3, [sp, #4]
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	f7ff fde0 	bl	800cd88 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800d1c8:	e001      	b.n	800d1ce <LoadcellTask+0x8a>
 800d1ca:	f004 fb0b 	bl	80117e4 <vPortYield>
 800d1ce:	f004 fc95 	bl	8011afc <HAL_GetTick>
 800d1d2:	1b00      	subs	r0, r0, r4
 800d1d4:	4b28      	ldr	r3, [pc, #160]	; (800d278 <LoadcellTask+0x134>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4298      	cmp	r0, r3
 800d1da:	d3f6      	bcc.n	800d1ca <LoadcellTask+0x86>
 800d1dc:	e7d5      	b.n	800d18a <LoadcellTask+0x46>
				t0=HAL_GetTick();
 800d1de:	f004 fc8d 	bl	8011afc <HAL_GetTick>
 800d1e2:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800d1e4:	4b20      	ldr	r3, [pc, #128]	; (800d268 <LoadcellTask+0x124>)
 800d1e6:	7818      	ldrb	r0, [r3, #0]
 800d1e8:	f7ff fd48 	bl	800cc7c <SampleKGram>
 800d1ec:	4b1f      	ldr	r3, [pc, #124]	; (800d26c <LoadcellTask+0x128>)
 800d1ee:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, global_port, global_module, NULL);
 800d1f0:	4b22      	ldr	r3, [pc, #136]	; (800d27c <LoadcellTask+0x138>)
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	4a1e      	ldr	r2, [pc, #120]	; (800d270 <LoadcellTask+0x12c>)
 800d1f6:	7812      	ldrb	r2, [r2, #0]
 800d1f8:	491e      	ldr	r1, [pc, #120]	; (800d274 <LoadcellTask+0x130>)
 800d1fa:	7809      	ldrb	r1, [r1, #0]
 800d1fc:	2500      	movs	r5, #0
 800d1fe:	9501      	str	r5, [sp, #4]
 800d200:	4d1f      	ldr	r5, [pc, #124]	; (800d280 <LoadcellTask+0x13c>)
 800d202:	782d      	ldrb	r5, [r5, #0]
 800d204:	9500      	str	r5, [sp, #0]
 800d206:	f7ff fdbf 	bl	800cd88 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800d20a:	e001      	b.n	800d210 <LoadcellTask+0xcc>
 800d20c:	f004 faea 	bl	80117e4 <vPortYield>
 800d210:	f004 fc74 	bl	8011afc <HAL_GetTick>
 800d214:	1b00      	subs	r0, r0, r4
 800d216:	4b18      	ldr	r3, [pc, #96]	; (800d278 <LoadcellTask+0x134>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4298      	cmp	r0, r3
 800d21c:	d3f6      	bcc.n	800d20c <LoadcellTask+0xc8>
 800d21e:	e7b4      	b.n	800d18a <LoadcellTask+0x46>
				t0=HAL_GetTick();
 800d220:	f004 fc6c 	bl	8011afc <HAL_GetTick>
 800d224:	0004      	movs	r4, r0
				DATA_To_SEND=SampleKGram(global_ch);	
 800d226:	4b10      	ldr	r3, [pc, #64]	; (800d268 <LoadcellTask+0x124>)
 800d228:	7818      	ldrb	r0, [r3, #0]
 800d22a:	f7ff fd27 	bl	800cc7c <SampleKGram>
 800d22e:	4b0f      	ldr	r3, [pc, #60]	; (800d26c <LoadcellTask+0x128>)
 800d230:	6018      	str	r0, [r3, #0]
				SendResults(DATA_To_SEND, global_mode, unit, 0, 0, ptr_weight_buffer);
 800d232:	4b0f      	ldr	r3, [pc, #60]	; (800d270 <LoadcellTask+0x12c>)
 800d234:	781a      	ldrb	r2, [r3, #0]
 800d236:	4b0f      	ldr	r3, [pc, #60]	; (800d274 <LoadcellTask+0x130>)
 800d238:	7819      	ldrb	r1, [r3, #0]
 800d23a:	4b12      	ldr	r3, [pc, #72]	; (800d284 <LoadcellTask+0x140>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	2300      	movs	r3, #0
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	f7ff fda0 	bl	800cd88 <SendResults>
				while(HAL_GetTick()-t0<global_period) {taskYIELD();}
 800d248:	e001      	b.n	800d24e <LoadcellTask+0x10a>
 800d24a:	f004 facb 	bl	80117e4 <vPortYield>
 800d24e:	f004 fc55 	bl	8011afc <HAL_GetTick>
 800d252:	1b00      	subs	r0, r0, r4
 800d254:	4b08      	ldr	r3, [pc, #32]	; (800d278 <LoadcellTask+0x134>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4298      	cmp	r0, r3
 800d25a:	d3f6      	bcc.n	800d24a <LoadcellTask+0x106>
 800d25c:	e795      	b.n	800d18a <LoadcellTask+0x46>
			default: global_mode = IDLE_CASE; break;
 800d25e:	4b05      	ldr	r3, [pc, #20]	; (800d274 <LoadcellTask+0x130>)
 800d260:	2200      	movs	r2, #0
 800d262:	701a      	strb	r2, [r3, #0]
 800d264:	e791      	b.n	800d18a <LoadcellTask+0x46>
 800d266:	46c0      	nop			; (mov r8, r8)
 800d268:	20006f34 	.word	0x20006f34
 800d26c:	20001724 	.word	0x20001724
 800d270:	200000b4 	.word	0x200000b4
 800d274:	20006f35 	.word	0x20006f35
 800d278:	20007100 	.word	0x20007100
 800d27c:	20006f36 	.word	0x20006f36
 800d280:	20007174 	.word	0x20007174
 800d284:	2000701c 	.word	0x2000701c

0800d288 <ZeroCal>:
{
 800d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28a:	0006      	movs	r6, r0
	IND_ON();
 800d28c:	2580      	movs	r5, #128	; 0x80
 800d28e:	012d      	lsls	r5, r5, #4
 800d290:	2490      	movs	r4, #144	; 0x90
 800d292:	05e4      	lsls	r4, r4, #23
 800d294:	2201      	movs	r2, #1
 800d296:	0029      	movs	r1, r5
 800d298:	0020      	movs	r0, r4
 800d29a:	f006 f83a 	bl	8013312 <HAL_GPIO_WritePin>
	SetHX711Rate(80);
 800d29e:	2050      	movs	r0, #80	; 0x50
 800d2a0:	f7fe ff70 	bl	800c184 <SetHX711Rate>
	Zero_Drift=(Average(ch,100)*0.5*AVDD)/(ADC_full_range*gain);
 800d2a4:	2164      	movs	r1, #100	; 0x64
 800d2a6:	0030      	movs	r0, r6
 800d2a8:	f7ff fd3c 	bl	800cd24 <Average>
 800d2ac:	f7f5 ff3a 	bl	8003124 <__aeabi_f2d>
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	4b1a      	ldr	r3, [pc, #104]	; (800d31c <ZeroCal+0x94>)
 800d2b4:	f7f5 f8be 	bl	8002434 <__aeabi_dmul>
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	4b19      	ldr	r3, [pc, #100]	; (800d320 <ZeroCal+0x98>)
 800d2bc:	f7f5 f8ba 	bl	8002434 <__aeabi_dmul>
 800d2c0:	0006      	movs	r6, r0
 800d2c2:	000f      	movs	r7, r1
 800d2c4:	4b17      	ldr	r3, [pc, #92]	; (800d324 <ZeroCal+0x9c>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	05d8      	lsls	r0, r3, #23
 800d2ca:	1ac0      	subs	r0, r0, r3
 800d2cc:	f7f5 febe 	bl	800304c <__aeabi_i2d>
 800d2d0:	0002      	movs	r2, r0
 800d2d2:	000b      	movs	r3, r1
 800d2d4:	0030      	movs	r0, r6
 800d2d6:	0039      	movs	r1, r7
 800d2d8:	f7f4 fca2 	bl	8001c20 <__aeabi_ddiv>
 800d2dc:	f7f5 ff74 	bl	80031c8 <__aeabi_d2f>
 800d2e0:	4b11      	ldr	r3, [pc, #68]	; (800d328 <ZeroCal+0xa0>)
 800d2e2:	6018      	str	r0, [r3, #0]
	temp32=*(uint32_t*)&Zero_Drift;
 800d2e4:	4e11      	ldr	r6, [pc, #68]	; (800d32c <ZeroCal+0xa4>)
 800d2e6:	6030      	str	r0, [r6, #0]
	SetHX711Rate(10);
 800d2e8:	200a      	movs	r0, #10
 800d2ea:	f7fe ff4b 	bl	800c184 <SetHX711Rate>
	word_LSB=0x0000FFFF & temp32;
 800d2ee:	6833      	ldr	r3, [r6, #0]
 800d2f0:	b299      	uxth	r1, r3
 800d2f2:	4a0f      	ldr	r2, [pc, #60]	; (800d330 <ZeroCal+0xa8>)
 800d2f4:	8011      	strh	r1, [r2, #0]
	word_MSB=0x0000FFFF & (temp32>>16); 
 800d2f6:	0c1b      	lsrs	r3, r3, #16
 800d2f8:	4e0e      	ldr	r6, [pc, #56]	; (800d334 <ZeroCal+0xac>)
 800d2fa:	8033      	strh	r3, [r6, #0]
	EE_WriteVariable(_EE_zero_drift_LSB, word_LSB);
 800d2fc:	20fa      	movs	r0, #250	; 0xfa
 800d2fe:	30ff      	adds	r0, #255	; 0xff
 800d300:	f7fa fd36 	bl	8007d70 <EE_WriteVariable>
	EE_WriteVariable(_EE_zero_drift_MSB, word_MSB);
 800d304:	8831      	ldrh	r1, [r6, #0]
 800d306:	20fd      	movs	r0, #253	; 0xfd
 800d308:	0040      	lsls	r0, r0, #1
 800d30a:	f7fa fd31 	bl	8007d70 <EE_WriteVariable>
	IND_OFF();
 800d30e:	2200      	movs	r2, #0
 800d310:	0029      	movs	r1, r5
 800d312:	0020      	movs	r0, r4
 800d314:	f005 fffd 	bl	8013312 <HAL_GPIO_WritePin>
}
 800d318:	2000      	movs	r0, #0
 800d31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d31c:	3fe00000 	.word	0x3fe00000
 800d320:	40080000 	.word	0x40080000
 800d324:	2000008c 	.word	0x2000008c
 800d328:	20001b38 	.word	0x20001b38
 800d32c:	20001b54 	.word	0x20001b54
 800d330:	20001b70 	.word	0x20001b70
 800d334:	20001b72 	.word	0x20001b72

0800d338 <zerocalCommand>:
{
 800d338:	b510      	push	{r4, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	0004      	movs	r4, r0
 800d33e:	0010      	movs	r0, r2
  portBASE_TYPE xParameterStringLength1 = 0;
 800d340:	2300      	movs	r3, #0
 800d342:	9301      	str	r3, [sp, #4]
  configASSERT( pcWriteBuffer );
 800d344:	2c00      	cmp	r4, #0
 800d346:	d101      	bne.n	800d34c <zerocalCommand+0x14>
 800d348:	b672      	cpsid	i
 800d34a:	e7fe      	b.n	800d34a <zerocalCommand+0x12>
  pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d34c:	aa01      	add	r2, sp, #4
 800d34e:	2101      	movs	r1, #1
 800d350:	f002 fc84 	bl	800fc5c <FreeRTOS_CLIGetParameter>
  if (!strncmp((const char *)pcParameterString1, "1", 1))
 800d354:	7803      	ldrb	r3, [r0, #0]
 800d356:	2b31      	cmp	r3, #49	; 0x31
 800d358:	d009      	beq.n	800d36e <zerocalCommand+0x36>
  else if (!strncmp((const char *)pcParameterString1, "2", 1))
 800d35a:	2b32      	cmp	r3, #50	; 0x32
 800d35c:	d010      	beq.n	800d380 <zerocalCommand+0x48>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800d35e:	2213      	movs	r2, #19
 800d360:	490c      	ldr	r1, [pc, #48]	; (800d394 <zerocalCommand+0x5c>)
 800d362:	0020      	movs	r0, r4
 800d364:	f007 ff87 	bl	8015276 <memcpy>
}
 800d368:	2000      	movs	r0, #0
 800d36a:	b002      	add	sp, #8
 800d36c:	bd10      	pop	{r4, pc}
		ZeroCal(channel);
 800d36e:	2001      	movs	r0, #1
 800d370:	f7ff ff8a 	bl	800d288 <ZeroCal>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Zero calibration for channel 1\r\n" );
 800d374:	2221      	movs	r2, #33	; 0x21
 800d376:	4908      	ldr	r1, [pc, #32]	; (800d398 <zerocalCommand+0x60>)
 800d378:	0020      	movs	r0, r4
 800d37a:	f007 ff7c 	bl	8015276 <memcpy>
 800d37e:	e7f3      	b.n	800d368 <zerocalCommand+0x30>
		ZeroCal(channel);
 800d380:	2002      	movs	r0, #2
 800d382:	f7ff ff81 	bl	800d288 <ZeroCal>
    strcpy( ( char * ) pcWriteBuffer, ( char * ) "Zero calibration for channel 2\r\n" );
 800d386:	2221      	movs	r2, #33	; 0x21
 800d388:	4904      	ldr	r1, [pc, #16]	; (800d39c <zerocalCommand+0x64>)
 800d38a:	0020      	movs	r0, r4
 800d38c:	f007 ff73 	bl	8015276 <memcpy>
 800d390:	e7ea      	b.n	800d368 <zerocalCommand+0x30>
 800d392:	46c0      	nop			; (mov r8, r8)
 800d394:	0801b028 	.word	0x0801b028
 800d398:	0801cf80 	.word	0x0801cf80
 800d39c:	0801cfa4 	.word	0x0801cfa4

0800d3a0 <Module_MessagingTask>:
{
 800d3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3a2:	46c6      	mov	lr, r8
 800d3a4:	b500      	push	{lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	ab08      	add	r3, sp, #32
 800d3aa:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800d3ac:	4bdc      	ldr	r3, [pc, #880]	; (800d720 <Module_MessagingTask+0x380>)
 800d3ae:	469c      	mov	ip, r3
 800d3b0:	4460      	add	r0, ip
 800d3b2:	b283      	uxth	r3, r0
 800d3b4:	2b0d      	cmp	r3, #13
 800d3b6:	d900      	bls.n	800d3ba <Module_MessagingTask+0x1a>
 800d3b8:	e1af      	b.n	800d71a <Module_MessagingTask+0x37a>
 800d3ba:	0098      	lsls	r0, r3, #2
 800d3bc:	4bd9      	ldr	r3, [pc, #868]	; (800d724 <Module_MessagingTask+0x384>)
 800d3be:	581b      	ldr	r3, [r3, r0]
 800d3c0:	469f      	mov	pc, r3
			SetHX711Rate(cMessage[port-1][shift]);
 800d3c2:	3901      	subs	r1, #1
 800d3c4:	00cb      	lsls	r3, r1, #3
 800d3c6:	1a59      	subs	r1, r3, r1
 800d3c8:	00ca      	lsls	r2, r1, #3
 800d3ca:	4bd7      	ldr	r3, [pc, #860]	; (800d728 <Module_MessagingTask+0x388>)
 800d3cc:	189b      	adds	r3, r3, r2
 800d3ce:	5d18      	ldrb	r0, [r3, r4]
 800d3d0:	f7fe fed8 	bl	800c184 <SetHX711Rate>
	Module_Status result = H26R0_OK;
 800d3d4:	2000      	movs	r0, #0
}
 800d3d6:	b002      	add	sp, #8
 800d3d8:	bc04      	pop	{r2}
 800d3da:	4690      	mov	r8, r2
 800d3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d3de:	1e48      	subs	r0, r1, #1
 800d3e0:	1da1      	adds	r1, r4, #6
 800d3e2:	4ad1      	ldr	r2, [pc, #836]	; (800d728 <Module_MessagingTask+0x388>)
 800d3e4:	00c7      	lsls	r7, r0, #3
 800d3e6:	1a3b      	subs	r3, r7, r0
 800d3e8:	00dd      	lsls	r5, r3, #3
 800d3ea:	1955      	adds	r5, r2, r5
 800d3ec:	5c6b      	ldrb	r3, [r5, r1]
 800d3ee:	061b      	lsls	r3, r3, #24
 800d3f0:	1d61      	adds	r1, r4, #5
 800d3f2:	5c69      	ldrb	r1, [r5, r1]
 800d3f4:	0409      	lsls	r1, r1, #16
 800d3f6:	185b      	adds	r3, r3, r1
 800d3f8:	1d21      	adds	r1, r4, #4
 800d3fa:	5c69      	ldrb	r1, [r5, r1]
 800d3fc:	0209      	lsls	r1, r1, #8
 800d3fe:	185b      	adds	r3, r3, r1
 800d400:	1ce1      	adds	r1, r4, #3
 800d402:	5c69      	ldrb	r1, [r5, r1]
 800d404:	4698      	mov	r8, r3
 800d406:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d408:	0021      	movs	r1, r4
 800d40a:	310a      	adds	r1, #10
 800d40c:	5c6e      	ldrb	r6, [r5, r1]
 800d40e:	0636      	lsls	r6, r6, #24
 800d410:	3901      	subs	r1, #1
 800d412:	5c69      	ldrb	r1, [r5, r1]
 800d414:	0409      	lsls	r1, r1, #16
 800d416:	1876      	adds	r6, r6, r1
 800d418:	0021      	movs	r1, r4
 800d41a:	3108      	adds	r1, #8
 800d41c:	5c69      	ldrb	r1, [r5, r1]
 800d41e:	0209      	lsls	r1, r1, #8
 800d420:	1876      	adds	r6, r6, r1
 800d422:	1de1      	adds	r1, r4, #7
 800d424:	5c69      	ldrb	r1, [r5, r1]
 800d426:	1876      	adds	r6, r6, r1
		StreamGramToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d428:	1c61      	adds	r1, r4, #1
 800d42a:	1ca3      	adds	r3, r4, #2
 800d42c:	5ceb      	ldrb	r3, [r5, r3]
 800d42e:	469c      	mov	ip, r3
 800d430:	5c69      	ldrb	r1, [r5, r1]
 800d432:	1a38      	subs	r0, r7, r0
 800d434:	00c5      	lsls	r5, r0, #3
 800d436:	1952      	adds	r2, r2, r5
 800d438:	5d10      	ldrb	r0, [r2, r4]
 800d43a:	9600      	str	r6, [sp, #0]
 800d43c:	4643      	mov	r3, r8
 800d43e:	4662      	mov	r2, ip
 800d440:	f7ff f802 	bl	800c448 <StreamGramToPort>
	Module_Status result = H26R0_OK;
 800d444:	2000      	movs	r0, #0
			break;
 800d446:	e7c6      	b.n	800d3d6 <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d448:	1e48      	subs	r0, r1, #1
 800d44a:	1da1      	adds	r1, r4, #6
 800d44c:	4ab6      	ldr	r2, [pc, #728]	; (800d728 <Module_MessagingTask+0x388>)
 800d44e:	00c7      	lsls	r7, r0, #3
 800d450:	1a3b      	subs	r3, r7, r0
 800d452:	00dd      	lsls	r5, r3, #3
 800d454:	1955      	adds	r5, r2, r5
 800d456:	5c6b      	ldrb	r3, [r5, r1]
 800d458:	061b      	lsls	r3, r3, #24
 800d45a:	1d61      	adds	r1, r4, #5
 800d45c:	5c69      	ldrb	r1, [r5, r1]
 800d45e:	0409      	lsls	r1, r1, #16
 800d460:	185b      	adds	r3, r3, r1
 800d462:	1d21      	adds	r1, r4, #4
 800d464:	5c69      	ldrb	r1, [r5, r1]
 800d466:	0209      	lsls	r1, r1, #8
 800d468:	185b      	adds	r3, r3, r1
 800d46a:	1ce1      	adds	r1, r4, #3
 800d46c:	5c69      	ldrb	r1, [r5, r1]
 800d46e:	4698      	mov	r8, r3
 800d470:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d472:	0021      	movs	r1, r4
 800d474:	310a      	adds	r1, #10
 800d476:	5c6e      	ldrb	r6, [r5, r1]
 800d478:	0636      	lsls	r6, r6, #24
 800d47a:	3901      	subs	r1, #1
 800d47c:	5c69      	ldrb	r1, [r5, r1]
 800d47e:	0409      	lsls	r1, r1, #16
 800d480:	1876      	adds	r6, r6, r1
 800d482:	0021      	movs	r1, r4
 800d484:	3108      	adds	r1, #8
 800d486:	5c69      	ldrb	r1, [r5, r1]
 800d488:	0209      	lsls	r1, r1, #8
 800d48a:	1876      	adds	r6, r6, r1
 800d48c:	1de1      	adds	r1, r4, #7
 800d48e:	5c69      	ldrb	r1, [r5, r1]
 800d490:	1876      	adds	r6, r6, r1
		StreamKGramToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d492:	1c61      	adds	r1, r4, #1
 800d494:	1ca3      	adds	r3, r4, #2
 800d496:	5ceb      	ldrb	r3, [r5, r3]
 800d498:	469c      	mov	ip, r3
 800d49a:	5c69      	ldrb	r1, [r5, r1]
 800d49c:	1a38      	subs	r0, r7, r0
 800d49e:	00c5      	lsls	r5, r0, #3
 800d4a0:	1952      	adds	r2, r2, r5
 800d4a2:	5d10      	ldrb	r0, [r2, r4]
 800d4a4:	9600      	str	r6, [sp, #0]
 800d4a6:	4643      	mov	r3, r8
 800d4a8:	4662      	mov	r2, ip
 800d4aa:	f7ff f81b 	bl	800c4e4 <StreamKGramToPort>
	Module_Status result = H26R0_OK;
 800d4ae:	2000      	movs	r0, #0
			break;
 800d4b0:	e791      	b.n	800d3d6 <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d4b2:	1e48      	subs	r0, r1, #1
 800d4b4:	1da1      	adds	r1, r4, #6
 800d4b6:	4a9c      	ldr	r2, [pc, #624]	; (800d728 <Module_MessagingTask+0x388>)
 800d4b8:	00c7      	lsls	r7, r0, #3
 800d4ba:	1a3b      	subs	r3, r7, r0
 800d4bc:	00dd      	lsls	r5, r3, #3
 800d4be:	1955      	adds	r5, r2, r5
 800d4c0:	5c6b      	ldrb	r3, [r5, r1]
 800d4c2:	061b      	lsls	r3, r3, #24
 800d4c4:	1d61      	adds	r1, r4, #5
 800d4c6:	5c69      	ldrb	r1, [r5, r1]
 800d4c8:	0409      	lsls	r1, r1, #16
 800d4ca:	185b      	adds	r3, r3, r1
 800d4cc:	1d21      	adds	r1, r4, #4
 800d4ce:	5c69      	ldrb	r1, [r5, r1]
 800d4d0:	0209      	lsls	r1, r1, #8
 800d4d2:	185b      	adds	r3, r3, r1
 800d4d4:	1ce1      	adds	r1, r4, #3
 800d4d6:	5c69      	ldrb	r1, [r5, r1]
 800d4d8:	4698      	mov	r8, r3
 800d4da:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d4dc:	0021      	movs	r1, r4
 800d4de:	310a      	adds	r1, #10
 800d4e0:	5c6e      	ldrb	r6, [r5, r1]
 800d4e2:	0636      	lsls	r6, r6, #24
 800d4e4:	3901      	subs	r1, #1
 800d4e6:	5c69      	ldrb	r1, [r5, r1]
 800d4e8:	0409      	lsls	r1, r1, #16
 800d4ea:	1876      	adds	r6, r6, r1
 800d4ec:	0021      	movs	r1, r4
 800d4ee:	3108      	adds	r1, #8
 800d4f0:	5c69      	ldrb	r1, [r5, r1]
 800d4f2:	0209      	lsls	r1, r1, #8
 800d4f4:	1876      	adds	r6, r6, r1
 800d4f6:	1de1      	adds	r1, r4, #7
 800d4f8:	5c69      	ldrb	r1, [r5, r1]
 800d4fa:	1876      	adds	r6, r6, r1
		StreamOunceToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d4fc:	1c61      	adds	r1, r4, #1
 800d4fe:	1ca3      	adds	r3, r4, #2
 800d500:	5ceb      	ldrb	r3, [r5, r3]
 800d502:	469c      	mov	ip, r3
 800d504:	5c69      	ldrb	r1, [r5, r1]
 800d506:	1a38      	subs	r0, r7, r0
 800d508:	00c5      	lsls	r5, r0, #3
 800d50a:	1952      	adds	r2, r2, r5
 800d50c:	5d10      	ldrb	r0, [r2, r4]
 800d50e:	9600      	str	r6, [sp, #0]
 800d510:	4643      	mov	r3, r8
 800d512:	4662      	mov	r2, ip
 800d514:	f7ff f832 	bl	800c57c <StreamOunceToPort>
	Module_Status result = H26R0_OK;
 800d518:	2000      	movs	r0, #0
			break;
 800d51a:	e75c      	b.n	800d3d6 <Module_MessagingTask+0x36>
		period = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][5 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift];
 800d51c:	1e48      	subs	r0, r1, #1
 800d51e:	1da1      	adds	r1, r4, #6
 800d520:	4a81      	ldr	r2, [pc, #516]	; (800d728 <Module_MessagingTask+0x388>)
 800d522:	00c7      	lsls	r7, r0, #3
 800d524:	1a3b      	subs	r3, r7, r0
 800d526:	00dd      	lsls	r5, r3, #3
 800d528:	1955      	adds	r5, r2, r5
 800d52a:	5c6b      	ldrb	r3, [r5, r1]
 800d52c:	061b      	lsls	r3, r3, #24
 800d52e:	1d61      	adds	r1, r4, #5
 800d530:	5c69      	ldrb	r1, [r5, r1]
 800d532:	0409      	lsls	r1, r1, #16
 800d534:	185b      	adds	r3, r3, r1
 800d536:	1d21      	adds	r1, r4, #4
 800d538:	5c69      	ldrb	r1, [r5, r1]
 800d53a:	0209      	lsls	r1, r1, #8
 800d53c:	185b      	adds	r3, r3, r1
 800d53e:	1ce1      	adds	r1, r4, #3
 800d540:	5c69      	ldrb	r1, [r5, r1]
 800d542:	4698      	mov	r8, r3
 800d544:	4488      	add	r8, r1
		timeout = ((uint32_t) cMessage[port - 1][10 + shift] << 24) + ((uint32_t) cMessage[port - 1][9 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][7 + shift];
 800d546:	0021      	movs	r1, r4
 800d548:	310a      	adds	r1, #10
 800d54a:	5c6e      	ldrb	r6, [r5, r1]
 800d54c:	0636      	lsls	r6, r6, #24
 800d54e:	3901      	subs	r1, #1
 800d550:	5c69      	ldrb	r1, [r5, r1]
 800d552:	0409      	lsls	r1, r1, #16
 800d554:	1876      	adds	r6, r6, r1
 800d556:	0021      	movs	r1, r4
 800d558:	3108      	adds	r1, #8
 800d55a:	5c69      	ldrb	r1, [r5, r1]
 800d55c:	0209      	lsls	r1, r1, #8
 800d55e:	1876      	adds	r6, r6, r1
 800d560:	1de1      	adds	r1, r4, #7
 800d562:	5c69      	ldrb	r1, [r5, r1]
 800d564:	1876      	adds	r6, r6, r1
		StreamPoundToPort(cMessage[port - 1][shift],cMessage[port - 1][1 + shift],cMessage[port - 1][2 + shift],period,timeout);
 800d566:	1c61      	adds	r1, r4, #1
 800d568:	1ca3      	adds	r3, r4, #2
 800d56a:	5ceb      	ldrb	r3, [r5, r3]
 800d56c:	469c      	mov	ip, r3
 800d56e:	5c69      	ldrb	r1, [r5, r1]
 800d570:	1a38      	subs	r0, r7, r0
 800d572:	00c5      	lsls	r5, r0, #3
 800d574:	1952      	adds	r2, r2, r5
 800d576:	5d10      	ldrb	r0, [r2, r4]
 800d578:	9600      	str	r6, [sp, #0]
 800d57a:	4643      	mov	r3, r8
 800d57c:	4662      	mov	r2, ip
 800d57e:	f7ff f84b 	bl	800c618 <StreamPoundToPort>
	Module_Status result = H26R0_OK;
 800d582:	2000      	movs	r0, #0
			break;
 800d584:	e727      	b.n	800d3d6 <Module_MessagingTask+0x36>
			global_mode=IDLE_CASE;
 800d586:	4b69      	ldr	r3, [pc, #420]	; (800d72c <Module_MessagingTask+0x38c>)
 800d588:	2200      	movs	r2, #0
 800d58a:	701a      	strb	r2, [r3, #0]
			PowerDown();
 800d58c:	f7ff fb1e 	bl	800cbcc <PowerDown>
			xTimerStop( xTimer, portMAX_DELAY );
 800d590:	4b67      	ldr	r3, [pc, #412]	; (800d730 <Module_MessagingTask+0x390>)
 800d592:	6818      	ldr	r0, [r3, #0]
 800d594:	2301      	movs	r3, #1
 800d596:	425b      	negs	r3, r3
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	2300      	movs	r3, #0
 800d59c:	2200      	movs	r2, #0
 800d59e:	2103      	movs	r1, #3
 800d5a0:	f003 ff80 	bl	80114a4 <xTimerGenericCommand>
	Module_Status result = H26R0_OK;
 800d5a4:	2000      	movs	r0, #0
			break;
 800d5a6:	e716      	b.n	800d3d6 <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 1)
 800d5a8:	3901      	subs	r1, #1
 800d5aa:	00cb      	lsls	r3, r1, #3
 800d5ac:	1a59      	subs	r1, r3, r1
 800d5ae:	00ca      	lsls	r2, r1, #3
 800d5b0:	4b5d      	ldr	r3, [pc, #372]	; (800d728 <Module_MessagingTask+0x388>)
 800d5b2:	189b      	adds	r3, r3, r2
 800d5b4:	5d18      	ldrb	r0, [r3, r4]
 800d5b6:	2801      	cmp	r0, #1
 800d5b8:	d005      	beq.n	800d5c6 <Module_MessagingTask+0x226>
				H26R0_Weight2=SampleGram(cMessage[port-1][shift]);
 800d5ba:	f7ff fb45 	bl	800cc48 <SampleGram>
 800d5be:	4b5d      	ldr	r3, [pc, #372]	; (800d734 <Module_MessagingTask+0x394>)
 800d5c0:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	e707      	b.n	800d3d6 <Module_MessagingTask+0x36>
				H26R0_Weight1=SampleGram(cMessage[port-1][shift]);
 800d5c6:	f7ff fb3f 	bl	800cc48 <SampleGram>
 800d5ca:	4b5b      	ldr	r3, [pc, #364]	; (800d738 <Module_MessagingTask+0x398>)
 800d5cc:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d5ce:	2000      	movs	r0, #0
 800d5d0:	e701      	b.n	800d3d6 <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 1)
 800d5d2:	3901      	subs	r1, #1
 800d5d4:	00cb      	lsls	r3, r1, #3
 800d5d6:	1a59      	subs	r1, r3, r1
 800d5d8:	00ca      	lsls	r2, r1, #3
 800d5da:	4b53      	ldr	r3, [pc, #332]	; (800d728 <Module_MessagingTask+0x388>)
 800d5dc:	189b      	adds	r3, r3, r2
 800d5de:	5d18      	ldrb	r0, [r3, r4]
 800d5e0:	2801      	cmp	r0, #1
 800d5e2:	d005      	beq.n	800d5f0 <Module_MessagingTask+0x250>
				H26R0_Weight2=SampleKGram(cMessage[port-1][shift]);	
 800d5e4:	f7ff fb4a 	bl	800cc7c <SampleKGram>
 800d5e8:	4b52      	ldr	r3, [pc, #328]	; (800d734 <Module_MessagingTask+0x394>)
 800d5ea:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	e6f2      	b.n	800d3d6 <Module_MessagingTask+0x36>
				H26R0_Weight1=SampleKGram(cMessage[port-1][shift]);
 800d5f0:	f7ff fb44 	bl	800cc7c <SampleKGram>
 800d5f4:	4b50      	ldr	r3, [pc, #320]	; (800d738 <Module_MessagingTask+0x398>)
 800d5f6:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	e6ec      	b.n	800d3d6 <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 1)
 800d5fc:	3901      	subs	r1, #1
 800d5fe:	00cb      	lsls	r3, r1, #3
 800d600:	1a59      	subs	r1, r3, r1
 800d602:	00ca      	lsls	r2, r1, #3
 800d604:	4b48      	ldr	r3, [pc, #288]	; (800d728 <Module_MessagingTask+0x388>)
 800d606:	189b      	adds	r3, r3, r2
 800d608:	5d18      	ldrb	r0, [r3, r4]
 800d60a:	2801      	cmp	r0, #1
 800d60c:	d005      	beq.n	800d61a <Module_MessagingTask+0x27a>
				H26R0_Weight2=SampleOunce(cMessage[port-1][shift]);	
 800d60e:	f7ff fb49 	bl	800cca4 <SampleOunce>
 800d612:	4b48      	ldr	r3, [pc, #288]	; (800d734 <Module_MessagingTask+0x394>)
 800d614:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d616:	2000      	movs	r0, #0
 800d618:	e6dd      	b.n	800d3d6 <Module_MessagingTask+0x36>
				H26R0_Weight1=SampleOunce(cMessage[port-1][shift]);
 800d61a:	f7ff fb43 	bl	800cca4 <SampleOunce>
 800d61e:	4b46      	ldr	r3, [pc, #280]	; (800d738 <Module_MessagingTask+0x398>)
 800d620:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d622:	2000      	movs	r0, #0
 800d624:	e6d7      	b.n	800d3d6 <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 1)
 800d626:	3901      	subs	r1, #1
 800d628:	00cb      	lsls	r3, r1, #3
 800d62a:	1a59      	subs	r1, r3, r1
 800d62c:	00ca      	lsls	r2, r1, #3
 800d62e:	4b3e      	ldr	r3, [pc, #248]	; (800d728 <Module_MessagingTask+0x388>)
 800d630:	189b      	adds	r3, r3, r2
 800d632:	5d18      	ldrb	r0, [r3, r4]
 800d634:	2801      	cmp	r0, #1
 800d636:	d005      	beq.n	800d644 <Module_MessagingTask+0x2a4>
				H26R0_Weight2=SamplePound(cMessage[port-1][shift]);
 800d638:	f7ff fb54 	bl	800cce4 <SamplePound>
 800d63c:	4b3d      	ldr	r3, [pc, #244]	; (800d734 <Module_MessagingTask+0x394>)
 800d63e:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d640:	2000      	movs	r0, #0
 800d642:	e6c8      	b.n	800d3d6 <Module_MessagingTask+0x36>
				H26R0_Weight1=SamplePound(cMessage[port-1][shift]);
 800d644:	f7ff fb4e 	bl	800cce4 <SamplePound>
 800d648:	4b3b      	ldr	r3, [pc, #236]	; (800d738 <Module_MessagingTask+0x398>)
 800d64a:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d64c:	2000      	movs	r0, #0
 800d64e:	e6c2      	b.n	800d3d6 <Module_MessagingTask+0x36>
				ZeroCal(cMessage[port-1][shift]);
 800d650:	3901      	subs	r1, #1
 800d652:	00cb      	lsls	r3, r1, #3
 800d654:	1a59      	subs	r1, r3, r1
 800d656:	00ca      	lsls	r2, r1, #3
 800d658:	4b33      	ldr	r3, [pc, #204]	; (800d728 <Module_MessagingTask+0x388>)
 800d65a:	189b      	adds	r3, r3, r2
 800d65c:	5d18      	ldrb	r0, [r3, r4]
 800d65e:	f7ff fe13 	bl	800d288 <ZeroCal>
	Module_Status result = H26R0_OK;
 800d662:	2000      	movs	r0, #0
			break;
 800d664:	e6b7      	b.n	800d3d6 <Module_MessagingTask+0x36>
			period = ( (uint32_t) cMessage[port-1][1+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][3+shift] << 8 ) + cMessage[port-1][4+shift];
 800d666:	1e4d      	subs	r5, r1, #1
 800d668:	1c62      	adds	r2, r4, #1
 800d66a:	4b2f      	ldr	r3, [pc, #188]	; (800d728 <Module_MessagingTask+0x388>)
 800d66c:	4698      	mov	r8, r3
 800d66e:	00ef      	lsls	r7, r5, #3
 800d670:	1b7b      	subs	r3, r7, r5
 800d672:	00d8      	lsls	r0, r3, #3
 800d674:	4440      	add	r0, r8
 800d676:	5c83      	ldrb	r3, [r0, r2]
 800d678:	061b      	lsls	r3, r3, #24
 800d67a:	1ca2      	adds	r2, r4, #2
 800d67c:	5c82      	ldrb	r2, [r0, r2]
 800d67e:	0412      	lsls	r2, r2, #16
 800d680:	189b      	adds	r3, r3, r2
 800d682:	1ce2      	adds	r2, r4, #3
 800d684:	5c82      	ldrb	r2, [r0, r2]
 800d686:	0212      	lsls	r2, r2, #8
 800d688:	189b      	adds	r3, r3, r2
 800d68a:	1d22      	adds	r2, r4, #4
 800d68c:	5c82      	ldrb	r2, [r0, r2]
 800d68e:	189b      	adds	r3, r3, r2
			timeout = ( (uint32_t) cMessage[port-1][5+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][7+shift] << 8 ) + cMessage[port-1][8+shift];
 800d690:	1d62      	adds	r2, r4, #5
 800d692:	5c86      	ldrb	r6, [r0, r2]
 800d694:	0636      	lsls	r6, r6, #24
 800d696:	1da2      	adds	r2, r4, #6
 800d698:	5c82      	ldrb	r2, [r0, r2]
 800d69a:	0412      	lsls	r2, r2, #16
 800d69c:	18b6      	adds	r6, r6, r2
 800d69e:	1de2      	adds	r2, r4, #7
 800d6a0:	5c82      	ldrb	r2, [r0, r2]
 800d6a2:	0212      	lsls	r2, r2, #8
 800d6a4:	18b6      	adds	r6, r6, r2
 800d6a6:	0022      	movs	r2, r4
 800d6a8:	3208      	adds	r2, #8
 800d6aa:	5c82      	ldrb	r2, [r0, r2]
 800d6ac:	18b6      	adds	r6, r6, r2
			StreamRawToPort(cMessage[port-1][shift], cMessage[port-1][9+shift], cMessage[port-1][10+shift], period, timeout);
 800d6ae:	0021      	movs	r1, r4
 800d6b0:	3109      	adds	r1, #9
 800d6b2:	0022      	movs	r2, r4
 800d6b4:	320a      	adds	r2, #10
 800d6b6:	5c82      	ldrb	r2, [r0, r2]
 800d6b8:	5c41      	ldrb	r1, [r0, r1]
 800d6ba:	5d00      	ldrb	r0, [r0, r4]
 800d6bc:	9600      	str	r6, [sp, #0]
 800d6be:	f7ff f8e5 	bl	800c88c <StreamRawToPort>
			H26R0_Weight2=Average(cMessage[port-1][shift],1);	
 800d6c2:	1b7d      	subs	r5, r7, r5
 800d6c4:	00eb      	lsls	r3, r5, #3
 800d6c6:	4443      	add	r3, r8
 800d6c8:	5d18      	ldrb	r0, [r3, r4]
 800d6ca:	2101      	movs	r1, #1
 800d6cc:	f7ff fb2a 	bl	800cd24 <Average>
 800d6d0:	4b18      	ldr	r3, [pc, #96]	; (800d734 <Module_MessagingTask+0x394>)
 800d6d2:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d6d4:	2000      	movs	r0, #0
			break;
 800d6d6:	e67e      	b.n	800d3d6 <Module_MessagingTask+0x36>
			H26R0_Weight2=Average(cMessage[port-1][shift],1);	
 800d6d8:	3901      	subs	r1, #1
 800d6da:	00cb      	lsls	r3, r1, #3
 800d6dc:	1a59      	subs	r1, r3, r1
 800d6de:	00ca      	lsls	r2, r1, #3
 800d6e0:	4b11      	ldr	r3, [pc, #68]	; (800d728 <Module_MessagingTask+0x388>)
 800d6e2:	189b      	adds	r3, r3, r2
 800d6e4:	5d18      	ldrb	r0, [r3, r4]
 800d6e6:	2101      	movs	r1, #1
 800d6e8:	f7ff fb1c 	bl	800cd24 <Average>
 800d6ec:	4b11      	ldr	r3, [pc, #68]	; (800d734 <Module_MessagingTask+0x394>)
 800d6ee:	6018      	str	r0, [r3, #0]
	Module_Status result = H26R0_OK;
 800d6f0:	2000      	movs	r0, #0
			break;
 800d6f2:	e670      	b.n	800d3d6 <Module_MessagingTask+0x36>
			if (cMessage[port-1][shift] == 0)
 800d6f4:	3901      	subs	r1, #1
 800d6f6:	00cb      	lsls	r3, r1, #3
 800d6f8:	1a59      	subs	r1, r3, r1
 800d6fa:	00ca      	lsls	r2, r1, #3
 800d6fc:	4b0a      	ldr	r3, [pc, #40]	; (800d728 <Module_MessagingTask+0x388>)
 800d6fe:	189b      	adds	r3, r3, r2
 800d700:	5d1b      	ldrb	r3, [r3, r4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d004      	beq.n	800d710 <Module_MessagingTask+0x370>
				H26R0_DATA_FORMAT = FMT_FLOAT;
 800d706:	4b0d      	ldr	r3, [pc, #52]	; (800d73c <Module_MessagingTask+0x39c>)
 800d708:	2207      	movs	r2, #7
 800d70a:	701a      	strb	r2, [r3, #0]
	Module_Status result = H26R0_OK;
 800d70c:	2000      	movs	r0, #0
 800d70e:	e662      	b.n	800d3d6 <Module_MessagingTask+0x36>
				H26R0_DATA_FORMAT = FMT_UINT32;
 800d710:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <Module_MessagingTask+0x39c>)
 800d712:	2205      	movs	r2, #5
 800d714:	701a      	strb	r2, [r3, #0]
	Module_Status result = H26R0_OK;
 800d716:	2000      	movs	r0, #0
 800d718:	e65d      	b.n	800d3d6 <Module_MessagingTask+0x36>
			result = H26R0_ERR_UnknownMessage;
 800d71a:	2001      	movs	r0, #1
 800d71c:	e65b      	b.n	800d3d6 <Module_MessagingTask+0x36>
 800d71e:	46c0      	nop			; (mov r8, r8)
 800d720:	fffff894 	.word	0xfffff894
 800d724:	0801c7ec 	.word	0x0801c7ec
 800d728:	20000d30 	.word	0x20000d30
 800d72c:	20006f35 	.word	0x20006f35
 800d730:	20001b74 	.word	0x20001b74
 800d734:	20001730 	.word	0x20001730
 800d738:	2000172c 	.word	0x2000172c
 800d73c:	20000084 	.word	0x20000084

0800d740 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800d740:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800d742:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d744:	2300      	movs	r3, #0
 800d746:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800d748:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800d74a:	2280      	movs	r2, #128	; 0x80
 800d74c:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d74e:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d750:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800d752:	3320      	adds	r3, #32
 800d754:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800d756:	2380      	movs	r3, #128	; 0x80
 800d758:	019b      	lsls	r3, r3, #6
 800d75a:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800d75c:	f004 feae 	bl	80124bc <HAL_DMA_Init>
}
 800d760:	bd10      	pop	{r4, pc}

0800d762 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800d762:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800d764:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d766:	2310      	movs	r3, #16
 800d768:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800d76a:	2300      	movs	r3, #0
 800d76c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800d76e:	2280      	movs	r2, #128	; 0x80
 800d770:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d772:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d774:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800d776:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800d778:	2380      	movs	r3, #128	; 0x80
 800d77a:	019b      	lsls	r3, r3, #6
 800d77c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800d77e:	f004 fe9d 	bl	80124bc <HAL_DMA_Init>
}
 800d782:	bd10      	pop	{r4, pc}

0800d784 <DMA_Init>:
{
 800d784:	b510      	push	{r4, lr}
 800d786:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800d788:	4b1d      	ldr	r3, [pc, #116]	; (800d800 <DMA_Init+0x7c>)
 800d78a:	6959      	ldr	r1, [r3, #20]
 800d78c:	2201      	movs	r2, #1
 800d78e:	4311      	orrs	r1, r2
 800d790:	6159      	str	r1, [r3, #20]
 800d792:	6959      	ldr	r1, [r3, #20]
 800d794:	400a      	ands	r2, r1
 800d796:	9200      	str	r2, [sp, #0]
 800d798:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800d79a:	6959      	ldr	r1, [r3, #20]
 800d79c:	2202      	movs	r2, #2
 800d79e:	4311      	orrs	r1, r2
 800d7a0:	6159      	str	r1, [r3, #20]
 800d7a2:	695b      	ldr	r3, [r3, #20]
 800d7a4:	401a      	ands	r2, r3
 800d7a6:	9201      	str	r2, [sp, #4]
 800d7a8:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800d7aa:	4c16      	ldr	r4, [pc, #88]	; (800d804 <DMA_Init+0x80>)
 800d7ac:	4916      	ldr	r1, [pc, #88]	; (800d808 <DMA_Init+0x84>)
 800d7ae:	0020      	movs	r0, r4
 800d7b0:	f7ff ffc6 	bl	800d740 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800d7b4:	0020      	movs	r0, r4
 800d7b6:	3038      	adds	r0, #56	; 0x38
 800d7b8:	4914      	ldr	r1, [pc, #80]	; (800d80c <DMA_Init+0x88>)
 800d7ba:	f7ff ffc1 	bl	800d740 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800d7be:	0020      	movs	r0, r4
 800d7c0:	3070      	adds	r0, #112	; 0x70
 800d7c2:	4913      	ldr	r1, [pc, #76]	; (800d810 <DMA_Init+0x8c>)
 800d7c4:	f7ff ffbc 	bl	800d740 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800d7c8:	0020      	movs	r0, r4
 800d7ca:	30a8      	adds	r0, #168	; 0xa8
 800d7cc:	4911      	ldr	r1, [pc, #68]	; (800d814 <DMA_Init+0x90>)
 800d7ce:	f7ff ffb7 	bl	800d740 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800d7d2:	0020      	movs	r0, r4
 800d7d4:	30e0      	adds	r0, #224	; 0xe0
 800d7d6:	4910      	ldr	r1, [pc, #64]	; (800d818 <DMA_Init+0x94>)
 800d7d8:	f7ff ffb2 	bl	800d740 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800d7dc:	4c0f      	ldr	r4, [pc, #60]	; (800d81c <DMA_Init+0x98>)
 800d7de:	4910      	ldr	r1, [pc, #64]	; (800d820 <DMA_Init+0x9c>)
 800d7e0:	0020      	movs	r0, r4
 800d7e2:	f7ff ffbe 	bl	800d762 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800d7e6:	0020      	movs	r0, r4
 800d7e8:	3038      	adds	r0, #56	; 0x38
 800d7ea:	490e      	ldr	r1, [pc, #56]	; (800d824 <DMA_Init+0xa0>)
 800d7ec:	f7ff ffb9 	bl	800d762 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800d7f0:	0020      	movs	r0, r4
 800d7f2:	3070      	adds	r0, #112	; 0x70
 800d7f4:	490c      	ldr	r1, [pc, #48]	; (800d828 <DMA_Init+0xa4>)
 800d7f6:	f7ff ffb4 	bl	800d762 <DMA_MSG_TX_CH_Init>
}
 800d7fa:	b002      	add	sp, #8
 800d7fc:	bd10      	pop	{r4, pc}
 800d7fe:	46c0      	nop			; (mov r8, r8)
 800d800:	40021000 	.word	0x40021000
 800d804:	20001b78 	.word	0x20001b78
 800d808:	40020008 	.word	0x40020008
 800d80c:	40020030 	.word	0x40020030
 800d810:	40020058 	.word	0x40020058
 800d814:	4002006c 	.word	0x4002006c
 800d818:	4002041c 	.word	0x4002041c
 800d81c:	20001cc8 	.word	0x20001cc8
 800d820:	4002001c 	.word	0x4002001c
 800d824:	40020044 	.word	0x40020044
 800d828:	40020080 	.word	0x40020080

0800d82c <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800d82c:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800d82e:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d830:	2300      	movs	r3, #0
 800d832:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800d834:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800d836:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d838:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d83a:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800d83c:	3320      	adds	r3, #32
 800d83e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800d840:	2380      	movs	r3, #128	; 0x80
 800d842:	015b      	lsls	r3, r3, #5
 800d844:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800d846:	f004 fe39 	bl	80124bc <HAL_DMA_Init>
}
 800d84a:	bd10      	pop	{r4, pc}

0800d84c <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800d84c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800d84e:	6803      	ldr	r3, [r0, #0]
 800d850:	4a20      	ldr	r2, [pc, #128]	; (800d8d4 <SetupDMAInterrupts+0x88>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d020      	beq.n	800d898 <SetupDMAInterrupts+0x4c>
 800d856:	d827      	bhi.n	800d8a8 <SetupDMAInterrupts+0x5c>
 800d858:	4a1f      	ldr	r2, [pc, #124]	; (800d8d8 <SetupDMAInterrupts+0x8c>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d00e      	beq.n	800d87c <SetupDMAInterrupts+0x30>
 800d85e:	d815      	bhi.n	800d88c <SetupDMAInterrupts+0x40>
 800d860:	4a1e      	ldr	r2, [pc, #120]	; (800d8dc <SetupDMAInterrupts+0x90>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d107      	bne.n	800d876 <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800d866:	2200      	movs	r2, #0
 800d868:	2009      	movs	r0, #9
 800d86a:	f004 fc89 	bl	8012180 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800d86e:	2009      	movs	r0, #9
 800d870:	f004 fcb6 	bl	80121e0 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800d874:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800d876:	4a1a      	ldr	r2, [pc, #104]	; (800d8e0 <SetupDMAInterrupts+0x94>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d1fb      	bne.n	800d874 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800d87c:	2200      	movs	r2, #0
 800d87e:	200a      	movs	r0, #10
 800d880:	f004 fc7e 	bl	8012180 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800d884:	200a      	movs	r0, #10
 800d886:	f004 fcab 	bl	80121e0 <HAL_NVIC_EnableIRQ>
			break;
 800d88a:	e7f3      	b.n	800d874 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800d88c:	4a15      	ldr	r2, [pc, #84]	; (800d8e4 <SetupDMAInterrupts+0x98>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d002      	beq.n	800d898 <SetupDMAInterrupts+0x4c>
 800d892:	4a15      	ldr	r2, [pc, #84]	; (800d8e8 <SetupDMAInterrupts+0x9c>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d1ed      	bne.n	800d874 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800d898:	2200      	movs	r2, #0
 800d89a:	200b      	movs	r0, #11
 800d89c:	f004 fc70 	bl	8012180 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800d8a0:	200b      	movs	r0, #11
 800d8a2:	f004 fc9d 	bl	80121e0 <HAL_NVIC_EnableIRQ>
}
 800d8a6:	e7e5      	b.n	800d874 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800d8a8:	4a10      	ldr	r2, [pc, #64]	; (800d8ec <SetupDMAInterrupts+0xa0>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d0e6      	beq.n	800d87c <SetupDMAInterrupts+0x30>
 800d8ae:	d909      	bls.n	800d8c4 <SetupDMAInterrupts+0x78>
 800d8b0:	4a0f      	ldr	r2, [pc, #60]	; (800d8f0 <SetupDMAInterrupts+0xa4>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d0f0      	beq.n	800d898 <SetupDMAInterrupts+0x4c>
 800d8b6:	4a0f      	ldr	r2, [pc, #60]	; (800d8f4 <SetupDMAInterrupts+0xa8>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d0ed      	beq.n	800d898 <SetupDMAInterrupts+0x4c>
 800d8bc:	4a0e      	ldr	r2, [pc, #56]	; (800d8f8 <SetupDMAInterrupts+0xac>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d1d8      	bne.n	800d874 <SetupDMAInterrupts+0x28>
 800d8c2:	e7e9      	b.n	800d898 <SetupDMAInterrupts+0x4c>
 800d8c4:	4a0d      	ldr	r2, [pc, #52]	; (800d8fc <SetupDMAInterrupts+0xb0>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d0e6      	beq.n	800d898 <SetupDMAInterrupts+0x4c>
 800d8ca:	4a0d      	ldr	r2, [pc, #52]	; (800d900 <SetupDMAInterrupts+0xb4>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d0d5      	beq.n	800d87c <SetupDMAInterrupts+0x30>
 800d8d0:	e7d0      	b.n	800d874 <SetupDMAInterrupts+0x28>
 800d8d2:	46c0      	nop			; (mov r8, r8)
 800d8d4:	4002006c 	.word	0x4002006c
 800d8d8:	40020030 	.word	0x40020030
 800d8dc:	40020008 	.word	0x40020008
 800d8e0:	4002001c 	.word	0x4002001c
 800d8e4:	40020044 	.word	0x40020044
 800d8e8:	40020058 	.word	0x40020058
 800d8ec:	4002041c 	.word	0x4002041c
 800d8f0:	40020444 	.word	0x40020444
 800d8f4:	40020458 	.word	0x40020458
 800d8f8:	40020430 	.word	0x40020430
 800d8fc:	40020080 	.word	0x40020080
 800d900:	40020408 	.word	0x40020408

0800d904 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800d904:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800d906:	6803      	ldr	r3, [r0, #0]
 800d908:	4a1a      	ldr	r2, [pc, #104]	; (800d974 <UnSetupDMAInterrupts+0x70>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d018      	beq.n	800d940 <UnSetupDMAInterrupts+0x3c>
 800d90e:	d81b      	bhi.n	800d948 <UnSetupDMAInterrupts+0x44>
 800d910:	4a19      	ldr	r2, [pc, #100]	; (800d978 <UnSetupDMAInterrupts+0x74>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d00a      	beq.n	800d92c <UnSetupDMAInterrupts+0x28>
 800d916:	d80d      	bhi.n	800d934 <UnSetupDMAInterrupts+0x30>
 800d918:	4a18      	ldr	r2, [pc, #96]	; (800d97c <UnSetupDMAInterrupts+0x78>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d103      	bne.n	800d926 <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800d91e:	2009      	movs	r0, #9
 800d920:	f004 fc68 	bl	80121f4 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800d924:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800d926:	4a16      	ldr	r2, [pc, #88]	; (800d980 <UnSetupDMAInterrupts+0x7c>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d1fb      	bne.n	800d924 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800d92c:	200a      	movs	r0, #10
 800d92e:	f004 fc61 	bl	80121f4 <HAL_NVIC_DisableIRQ>
			break;
 800d932:	e7f7      	b.n	800d924 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800d934:	4a13      	ldr	r2, [pc, #76]	; (800d984 <UnSetupDMAInterrupts+0x80>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d002      	beq.n	800d940 <UnSetupDMAInterrupts+0x3c>
 800d93a:	4a13      	ldr	r2, [pc, #76]	; (800d988 <UnSetupDMAInterrupts+0x84>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d1f1      	bne.n	800d924 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800d940:	200b      	movs	r0, #11
 800d942:	f004 fc57 	bl	80121f4 <HAL_NVIC_DisableIRQ>
}
 800d946:	e7ed      	b.n	800d924 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800d948:	4a10      	ldr	r2, [pc, #64]	; (800d98c <UnSetupDMAInterrupts+0x88>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d0ee      	beq.n	800d92c <UnSetupDMAInterrupts+0x28>
 800d94e:	d909      	bls.n	800d964 <UnSetupDMAInterrupts+0x60>
 800d950:	4a0f      	ldr	r2, [pc, #60]	; (800d990 <UnSetupDMAInterrupts+0x8c>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d0f4      	beq.n	800d940 <UnSetupDMAInterrupts+0x3c>
 800d956:	4a0f      	ldr	r2, [pc, #60]	; (800d994 <UnSetupDMAInterrupts+0x90>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d0f1      	beq.n	800d940 <UnSetupDMAInterrupts+0x3c>
 800d95c:	4a0e      	ldr	r2, [pc, #56]	; (800d998 <UnSetupDMAInterrupts+0x94>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d1e0      	bne.n	800d924 <UnSetupDMAInterrupts+0x20>
 800d962:	e7ed      	b.n	800d940 <UnSetupDMAInterrupts+0x3c>
 800d964:	4a0d      	ldr	r2, [pc, #52]	; (800d99c <UnSetupDMAInterrupts+0x98>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d0ea      	beq.n	800d940 <UnSetupDMAInterrupts+0x3c>
 800d96a:	4a0d      	ldr	r2, [pc, #52]	; (800d9a0 <UnSetupDMAInterrupts+0x9c>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d0dd      	beq.n	800d92c <UnSetupDMAInterrupts+0x28>
 800d970:	e7d8      	b.n	800d924 <UnSetupDMAInterrupts+0x20>
 800d972:	46c0      	nop			; (mov r8, r8)
 800d974:	4002006c 	.word	0x4002006c
 800d978:	40020030 	.word	0x40020030
 800d97c:	40020008 	.word	0x40020008
 800d980:	4002001c 	.word	0x4002001c
 800d984:	40020044 	.word	0x40020044
 800d988:	40020058 	.word	0x40020058
 800d98c:	4002041c 	.word	0x4002041c
 800d990:	40020444 	.word	0x40020444
 800d994:	40020458 	.word	0x40020458
 800d998:	40020430 	.word	0x40020430
 800d99c:	40020080 	.word	0x40020080
 800d9a0:	40020408 	.word	0x40020408

0800d9a4 <DMA_MSG_TX_UnSetup>:
{	
 800d9a4:	b510      	push	{r4, lr}
 800d9a6:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800d9a8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800d9aa:	f7ff ffab 	bl	800d904 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800d9ae:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800d9b4:	6623      	str	r3, [r4, #96]	; 0x60
}
 800d9b6:	bd10      	pop	{r4, pc}

0800d9b8 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800d9b8:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800d9ba:	6803      	ldr	r3, [r0, #0]
 800d9bc:	4acc      	ldr	r2, [pc, #816]	; (800dcf0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d100      	bne.n	800d9c4 <RemapAndLinkDMAtoUARTRx+0xc>
 800d9c2:	e0ca      	b.n	800db5a <RemapAndLinkDMAtoUARTRx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800d9c4:	4aca      	ldr	r2, [pc, #808]	; (800dcf0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d100      	bne.n	800d9cc <RemapAndLinkDMAtoUARTRx+0x14>
 800d9ca:	e0d8      	b.n	800db7e <RemapAndLinkDMAtoUARTRx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800d9cc:	4ac8      	ldr	r2, [pc, #800]	; (800dcf0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d100      	bne.n	800d9d4 <RemapAndLinkDMAtoUARTRx+0x1c>
 800d9d2:	e0e5      	b.n	800dba0 <RemapAndLinkDMAtoUARTRx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800d9d4:	4ac6      	ldr	r2, [pc, #792]	; (800dcf0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d100      	bne.n	800d9dc <RemapAndLinkDMAtoUARTRx+0x24>
 800d9da:	e0f2      	b.n	800dbc2 <RemapAndLinkDMAtoUARTRx+0x20a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800d9dc:	4ac4      	ldr	r2, [pc, #784]	; (800dcf0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d100      	bne.n	800d9e4 <RemapAndLinkDMAtoUARTRx+0x2c>
 800d9e2:	e0ff      	b.n	800dbe4 <RemapAndLinkDMAtoUARTRx+0x22c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800d9e4:	4ac2      	ldr	r2, [pc, #776]	; (800dcf0 <RemapAndLinkDMAtoUARTRx+0x338>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d100      	bne.n	800d9ec <RemapAndLinkDMAtoUARTRx+0x34>
 800d9ea:	e10b      	b.n	800dc04 <RemapAndLinkDMAtoUARTRx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800d9ec:	4ac1      	ldr	r2, [pc, #772]	; (800dcf4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d100      	bne.n	800d9f4 <RemapAndLinkDMAtoUARTRx+0x3c>
 800d9f2:	e118      	b.n	800dc26 <RemapAndLinkDMAtoUARTRx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800d9f4:	4abf      	ldr	r2, [pc, #764]	; (800dcf4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d100      	bne.n	800d9fc <RemapAndLinkDMAtoUARTRx+0x44>
 800d9fa:	e124      	b.n	800dc46 <RemapAndLinkDMAtoUARTRx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800d9fc:	4abd      	ldr	r2, [pc, #756]	; (800dcf4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d100      	bne.n	800da04 <RemapAndLinkDMAtoUARTRx+0x4c>
 800da02:	e131      	b.n	800dc68 <RemapAndLinkDMAtoUARTRx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800da04:	4abb      	ldr	r2, [pc, #748]	; (800dcf4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d100      	bne.n	800da0c <RemapAndLinkDMAtoUARTRx+0x54>
 800da0a:	e13e      	b.n	800dc8a <RemapAndLinkDMAtoUARTRx+0x2d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800da0c:	4ab9      	ldr	r2, [pc, #740]	; (800dcf4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d100      	bne.n	800da14 <RemapAndLinkDMAtoUARTRx+0x5c>
 800da12:	e14b      	b.n	800dcac <RemapAndLinkDMAtoUARTRx+0x2f4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800da14:	4ab7      	ldr	r2, [pc, #732]	; (800dcf4 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d100      	bne.n	800da1c <RemapAndLinkDMAtoUARTRx+0x64>
 800da1a:	e157      	b.n	800dccc <RemapAndLinkDMAtoUARTRx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800da1c:	4ab6      	ldr	r2, [pc, #728]	; (800dcf8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d100      	bne.n	800da24 <RemapAndLinkDMAtoUARTRx+0x6c>
 800da22:	e18b      	b.n	800dd3c <RemapAndLinkDMAtoUARTRx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800da24:	4ab4      	ldr	r2, [pc, #720]	; (800dcf8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d100      	bne.n	800da2c <RemapAndLinkDMAtoUARTRx+0x74>
 800da2a:	e197      	b.n	800dd5c <RemapAndLinkDMAtoUARTRx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800da2c:	4ab2      	ldr	r2, [pc, #712]	; (800dcf8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d100      	bne.n	800da34 <RemapAndLinkDMAtoUARTRx+0x7c>
 800da32:	e1a4      	b.n	800dd7e <RemapAndLinkDMAtoUARTRx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800da34:	4ab0      	ldr	r2, [pc, #704]	; (800dcf8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d100      	bne.n	800da3c <RemapAndLinkDMAtoUARTRx+0x84>
 800da3a:	e1b1      	b.n	800dda0 <RemapAndLinkDMAtoUARTRx+0x3e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800da3c:	4aae      	ldr	r2, [pc, #696]	; (800dcf8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d100      	bne.n	800da44 <RemapAndLinkDMAtoUARTRx+0x8c>
 800da42:	e1be      	b.n	800ddc2 <RemapAndLinkDMAtoUARTRx+0x40a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800da44:	4aac      	ldr	r2, [pc, #688]	; (800dcf8 <RemapAndLinkDMAtoUARTRx+0x340>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d100      	bne.n	800da4c <RemapAndLinkDMAtoUARTRx+0x94>
 800da4a:	e1ca      	b.n	800dde2 <RemapAndLinkDMAtoUARTRx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800da4c:	4aab      	ldr	r2, [pc, #684]	; (800dcfc <RemapAndLinkDMAtoUARTRx+0x344>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d100      	bne.n	800da54 <RemapAndLinkDMAtoUARTRx+0x9c>
 800da52:	e1d7      	b.n	800de04 <RemapAndLinkDMAtoUARTRx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800da54:	4aa9      	ldr	r2, [pc, #676]	; (800dcfc <RemapAndLinkDMAtoUARTRx+0x344>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d100      	bne.n	800da5c <RemapAndLinkDMAtoUARTRx+0xa4>
 800da5a:	e1e3      	b.n	800de24 <RemapAndLinkDMAtoUARTRx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800da5c:	4aa7      	ldr	r2, [pc, #668]	; (800dcfc <RemapAndLinkDMAtoUARTRx+0x344>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d100      	bne.n	800da64 <RemapAndLinkDMAtoUARTRx+0xac>
 800da62:	e1f0      	b.n	800de46 <RemapAndLinkDMAtoUARTRx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800da64:	4aa5      	ldr	r2, [pc, #660]	; (800dcfc <RemapAndLinkDMAtoUARTRx+0x344>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d100      	bne.n	800da6c <RemapAndLinkDMAtoUARTRx+0xb4>
 800da6a:	e1fd      	b.n	800de68 <RemapAndLinkDMAtoUARTRx+0x4b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800da6c:	4aa3      	ldr	r2, [pc, #652]	; (800dcfc <RemapAndLinkDMAtoUARTRx+0x344>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d100      	bne.n	800da74 <RemapAndLinkDMAtoUARTRx+0xbc>
 800da72:	e20a      	b.n	800de8a <RemapAndLinkDMAtoUARTRx+0x4d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800da74:	4aa1      	ldr	r2, [pc, #644]	; (800dcfc <RemapAndLinkDMAtoUARTRx+0x344>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d100      	bne.n	800da7c <RemapAndLinkDMAtoUARTRx+0xc4>
 800da7a:	e216      	b.n	800deaa <RemapAndLinkDMAtoUARTRx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800da7c:	4aa0      	ldr	r2, [pc, #640]	; (800dd00 <RemapAndLinkDMAtoUARTRx+0x348>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d100      	bne.n	800da84 <RemapAndLinkDMAtoUARTRx+0xcc>
 800da82:	e223      	b.n	800decc <RemapAndLinkDMAtoUARTRx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800da84:	4a9e      	ldr	r2, [pc, #632]	; (800dd00 <RemapAndLinkDMAtoUARTRx+0x348>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d100      	bne.n	800da8c <RemapAndLinkDMAtoUARTRx+0xd4>
 800da8a:	e22f      	b.n	800deec <RemapAndLinkDMAtoUARTRx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800da8c:	4a9c      	ldr	r2, [pc, #624]	; (800dd00 <RemapAndLinkDMAtoUARTRx+0x348>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d100      	bne.n	800da94 <RemapAndLinkDMAtoUARTRx+0xdc>
 800da92:	e23c      	b.n	800df0e <RemapAndLinkDMAtoUARTRx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800da94:	4a9a      	ldr	r2, [pc, #616]	; (800dd00 <RemapAndLinkDMAtoUARTRx+0x348>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d100      	bne.n	800da9c <RemapAndLinkDMAtoUARTRx+0xe4>
 800da9a:	e249      	b.n	800df30 <RemapAndLinkDMAtoUARTRx+0x578>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800da9c:	4a98      	ldr	r2, [pc, #608]	; (800dd00 <RemapAndLinkDMAtoUARTRx+0x348>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d100      	bne.n	800daa4 <RemapAndLinkDMAtoUARTRx+0xec>
 800daa2:	e256      	b.n	800df52 <RemapAndLinkDMAtoUARTRx+0x59a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800daa4:	4a96      	ldr	r2, [pc, #600]	; (800dd00 <RemapAndLinkDMAtoUARTRx+0x348>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d100      	bne.n	800daac <RemapAndLinkDMAtoUARTRx+0xf4>
 800daaa:	e262      	b.n	800df72 <RemapAndLinkDMAtoUARTRx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800daac:	4a95      	ldr	r2, [pc, #596]	; (800dd04 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d100      	bne.n	800dab4 <RemapAndLinkDMAtoUARTRx+0xfc>
 800dab2:	e26f      	b.n	800df94 <RemapAndLinkDMAtoUARTRx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800dab4:	4a93      	ldr	r2, [pc, #588]	; (800dd04 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d100      	bne.n	800dabc <RemapAndLinkDMAtoUARTRx+0x104>
 800daba:	e27b      	b.n	800dfb4 <RemapAndLinkDMAtoUARTRx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800dabc:	4a91      	ldr	r2, [pc, #580]	; (800dd04 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d100      	bne.n	800dac4 <RemapAndLinkDMAtoUARTRx+0x10c>
 800dac2:	e288      	b.n	800dfd6 <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800dac4:	4a8f      	ldr	r2, [pc, #572]	; (800dd04 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d100      	bne.n	800dacc <RemapAndLinkDMAtoUARTRx+0x114>
 800daca:	e295      	b.n	800dff8 <RemapAndLinkDMAtoUARTRx+0x640>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800dacc:	4a8d      	ldr	r2, [pc, #564]	; (800dd04 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d100      	bne.n	800dad4 <RemapAndLinkDMAtoUARTRx+0x11c>
 800dad2:	e2a2      	b.n	800e01a <RemapAndLinkDMAtoUARTRx+0x662>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800dad4:	4a8b      	ldr	r2, [pc, #556]	; (800dd04 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d100      	bne.n	800dadc <RemapAndLinkDMAtoUARTRx+0x124>
 800dada:	e2ae      	b.n	800e03a <RemapAndLinkDMAtoUARTRx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800dadc:	4a8a      	ldr	r2, [pc, #552]	; (800dd08 <RemapAndLinkDMAtoUARTRx+0x350>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d100      	bne.n	800dae4 <RemapAndLinkDMAtoUARTRx+0x12c>
 800dae2:	e2bb      	b.n	800e05c <RemapAndLinkDMAtoUARTRx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800dae4:	4a88      	ldr	r2, [pc, #544]	; (800dd08 <RemapAndLinkDMAtoUARTRx+0x350>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d100      	bne.n	800daec <RemapAndLinkDMAtoUARTRx+0x134>
 800daea:	e2c7      	b.n	800e07c <RemapAndLinkDMAtoUARTRx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800daec:	4a86      	ldr	r2, [pc, #536]	; (800dd08 <RemapAndLinkDMAtoUARTRx+0x350>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d100      	bne.n	800daf4 <RemapAndLinkDMAtoUARTRx+0x13c>
 800daf2:	e2d4      	b.n	800e09e <RemapAndLinkDMAtoUARTRx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800daf4:	4a84      	ldr	r2, [pc, #528]	; (800dd08 <RemapAndLinkDMAtoUARTRx+0x350>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d100      	bne.n	800dafc <RemapAndLinkDMAtoUARTRx+0x144>
 800dafa:	e2f7      	b.n	800e0ec <RemapAndLinkDMAtoUARTRx+0x734>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800dafc:	4a82      	ldr	r2, [pc, #520]	; (800dd08 <RemapAndLinkDMAtoUARTRx+0x350>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d100      	bne.n	800db04 <RemapAndLinkDMAtoUARTRx+0x14c>
 800db02:	e304      	b.n	800e10e <RemapAndLinkDMAtoUARTRx+0x756>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800db04:	4a80      	ldr	r2, [pc, #512]	; (800dd08 <RemapAndLinkDMAtoUARTRx+0x350>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d100      	bne.n	800db0c <RemapAndLinkDMAtoUARTRx+0x154>
 800db0a:	e310      	b.n	800e12e <RemapAndLinkDMAtoUARTRx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800db0c:	4a7f      	ldr	r2, [pc, #508]	; (800dd0c <RemapAndLinkDMAtoUARTRx+0x354>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d100      	bne.n	800db14 <RemapAndLinkDMAtoUARTRx+0x15c>
 800db12:	e31d      	b.n	800e150 <RemapAndLinkDMAtoUARTRx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800db14:	4a7d      	ldr	r2, [pc, #500]	; (800dd0c <RemapAndLinkDMAtoUARTRx+0x354>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d100      	bne.n	800db1c <RemapAndLinkDMAtoUARTRx+0x164>
 800db1a:	e328      	b.n	800e16e <RemapAndLinkDMAtoUARTRx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800db1c:	4a7b      	ldr	r2, [pc, #492]	; (800dd0c <RemapAndLinkDMAtoUARTRx+0x354>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d100      	bne.n	800db24 <RemapAndLinkDMAtoUARTRx+0x16c>
 800db22:	e335      	b.n	800e190 <RemapAndLinkDMAtoUARTRx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800db24:	4a79      	ldr	r2, [pc, #484]	; (800dd0c <RemapAndLinkDMAtoUARTRx+0x354>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d100      	bne.n	800db2c <RemapAndLinkDMAtoUARTRx+0x174>
 800db2a:	e342      	b.n	800e1b2 <RemapAndLinkDMAtoUARTRx+0x7fa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800db2c:	4a77      	ldr	r2, [pc, #476]	; (800dd0c <RemapAndLinkDMAtoUARTRx+0x354>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d100      	bne.n	800db34 <RemapAndLinkDMAtoUARTRx+0x17c>
 800db32:	e34f      	b.n	800e1d4 <RemapAndLinkDMAtoUARTRx+0x81c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800db34:	4a75      	ldr	r2, [pc, #468]	; (800dd0c <RemapAndLinkDMAtoUARTRx+0x354>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d11e      	bne.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800db3a:	4b75      	ldr	r3, [pc, #468]	; (800dd10 <RemapAndLinkDMAtoUARTRx+0x358>)
 800db3c:	680a      	ldr	r2, [r1, #0]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d11a      	bne.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800db42:	4a74      	ldr	r2, [pc, #464]	; (800dd14 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800db44:	23a8      	movs	r3, #168	; 0xa8
 800db46:	58d4      	ldr	r4, [r2, r3]
 800db48:	4d73      	ldr	r5, [pc, #460]	; (800dd18 <RemapAndLinkDMAtoUARTRx+0x360>)
 800db4a:	402c      	ands	r4, r5
 800db4c:	50d4      	str	r4, [r2, r3]
 800db4e:	58d5      	ldr	r5, [r2, r3]
 800db50:	24f0      	movs	r4, #240	; 0xf0
 800db52:	0124      	lsls	r4, r4, #4
 800db54:	432c      	orrs	r4, r5
 800db56:	50d4      	str	r4, [r2, r3]
 800db58:	e00e      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800db5a:	4a70      	ldr	r2, [pc, #448]	; (800dd1c <RemapAndLinkDMAtoUARTRx+0x364>)
 800db5c:	680c      	ldr	r4, [r1, #0]
 800db5e:	4294      	cmp	r4, r2
 800db60:	d000      	beq.n	800db64 <RemapAndLinkDMAtoUARTRx+0x1ac>
 800db62:	e72f      	b.n	800d9c4 <RemapAndLinkDMAtoUARTRx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800db64:	4a6e      	ldr	r2, [pc, #440]	; (800dd20 <RemapAndLinkDMAtoUARTRx+0x368>)
 800db66:	23a8      	movs	r3, #168	; 0xa8
 800db68:	58d4      	ldr	r4, [r2, r3]
 800db6a:	250f      	movs	r5, #15
 800db6c:	43ac      	bics	r4, r5
 800db6e:	50d4      	str	r4, [r2, r3]
 800db70:	58d4      	ldr	r4, [r2, r3]
 800db72:	3d07      	subs	r5, #7
 800db74:	432c      	orrs	r4, r5
 800db76:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800db78:	6641      	str	r1, [r0, #100]	; 0x64
 800db7a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800db7c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800db7e:	4a69      	ldr	r2, [pc, #420]	; (800dd24 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800db80:	680c      	ldr	r4, [r1, #0]
 800db82:	4294      	cmp	r4, r2
 800db84:	d000      	beq.n	800db88 <RemapAndLinkDMAtoUARTRx+0x1d0>
 800db86:	e721      	b.n	800d9cc <RemapAndLinkDMAtoUARTRx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800db88:	4a65      	ldr	r2, [pc, #404]	; (800dd20 <RemapAndLinkDMAtoUARTRx+0x368>)
 800db8a:	23a8      	movs	r3, #168	; 0xa8
 800db8c:	58d4      	ldr	r4, [r2, r3]
 800db8e:	4d62      	ldr	r5, [pc, #392]	; (800dd18 <RemapAndLinkDMAtoUARTRx+0x360>)
 800db90:	402c      	ands	r4, r5
 800db92:	50d4      	str	r4, [r2, r3]
 800db94:	58d5      	ldr	r5, [r2, r3]
 800db96:	2480      	movs	r4, #128	; 0x80
 800db98:	0124      	lsls	r4, r4, #4
 800db9a:	432c      	orrs	r4, r5
 800db9c:	50d4      	str	r4, [r2, r3]
 800db9e:	e7eb      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800dba0:	4a61      	ldr	r2, [pc, #388]	; (800dd28 <RemapAndLinkDMAtoUARTRx+0x370>)
 800dba2:	680c      	ldr	r4, [r1, #0]
 800dba4:	4294      	cmp	r4, r2
 800dba6:	d000      	beq.n	800dbaa <RemapAndLinkDMAtoUARTRx+0x1f2>
 800dba8:	e714      	b.n	800d9d4 <RemapAndLinkDMAtoUARTRx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800dbaa:	4a5d      	ldr	r2, [pc, #372]	; (800dd20 <RemapAndLinkDMAtoUARTRx+0x368>)
 800dbac:	23a8      	movs	r3, #168	; 0xa8
 800dbae:	58d4      	ldr	r4, [r2, r3]
 800dbb0:	4d5e      	ldr	r5, [pc, #376]	; (800dd2c <RemapAndLinkDMAtoUARTRx+0x374>)
 800dbb2:	402c      	ands	r4, r5
 800dbb4:	50d4      	str	r4, [r2, r3]
 800dbb6:	58d5      	ldr	r5, [r2, r3]
 800dbb8:	2480      	movs	r4, #128	; 0x80
 800dbba:	0324      	lsls	r4, r4, #12
 800dbbc:	432c      	orrs	r4, r5
 800dbbe:	50d4      	str	r4, [r2, r3]
 800dbc0:	e7da      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800dbc2:	4a5b      	ldr	r2, [pc, #364]	; (800dd30 <RemapAndLinkDMAtoUARTRx+0x378>)
 800dbc4:	680c      	ldr	r4, [r1, #0]
 800dbc6:	4294      	cmp	r4, r2
 800dbc8:	d000      	beq.n	800dbcc <RemapAndLinkDMAtoUARTRx+0x214>
 800dbca:	e707      	b.n	800d9dc <RemapAndLinkDMAtoUARTRx+0x24>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800dbcc:	4a54      	ldr	r2, [pc, #336]	; (800dd20 <RemapAndLinkDMAtoUARTRx+0x368>)
 800dbce:	23a8      	movs	r3, #168	; 0xa8
 800dbd0:	58d4      	ldr	r4, [r2, r3]
 800dbd2:	4d58      	ldr	r5, [pc, #352]	; (800dd34 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800dbd4:	402c      	ands	r4, r5
 800dbd6:	50d4      	str	r4, [r2, r3]
 800dbd8:	58d5      	ldr	r5, [r2, r3]
 800dbda:	2480      	movs	r4, #128	; 0x80
 800dbdc:	0424      	lsls	r4, r4, #16
 800dbde:	432c      	orrs	r4, r5
 800dbe0:	50d4      	str	r4, [r2, r3]
 800dbe2:	e7c9      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800dbe4:	4a54      	ldr	r2, [pc, #336]	; (800dd38 <RemapAndLinkDMAtoUARTRx+0x380>)
 800dbe6:	680c      	ldr	r4, [r1, #0]
 800dbe8:	4294      	cmp	r4, r2
 800dbea:	d000      	beq.n	800dbee <RemapAndLinkDMAtoUARTRx+0x236>
 800dbec:	e6fa      	b.n	800d9e4 <RemapAndLinkDMAtoUARTRx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800dbee:	4a49      	ldr	r2, [pc, #292]	; (800dd14 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800dbf0:	23a8      	movs	r3, #168	; 0xa8
 800dbf2:	58d4      	ldr	r4, [r2, r3]
 800dbf4:	25f0      	movs	r5, #240	; 0xf0
 800dbf6:	43ac      	bics	r4, r5
 800dbf8:	50d4      	str	r4, [r2, r3]
 800dbfa:	58d4      	ldr	r4, [r2, r3]
 800dbfc:	3d70      	subs	r5, #112	; 0x70
 800dbfe:	432c      	orrs	r4, r5
 800dc00:	50d4      	str	r4, [r2, r3]
 800dc02:	e7b9      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800dc04:	4a42      	ldr	r2, [pc, #264]	; (800dd10 <RemapAndLinkDMAtoUARTRx+0x358>)
 800dc06:	680c      	ldr	r4, [r1, #0]
 800dc08:	4294      	cmp	r4, r2
 800dc0a:	d000      	beq.n	800dc0e <RemapAndLinkDMAtoUARTRx+0x256>
 800dc0c:	e6ee      	b.n	800d9ec <RemapAndLinkDMAtoUARTRx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800dc0e:	4a41      	ldr	r2, [pc, #260]	; (800dd14 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800dc10:	23a8      	movs	r3, #168	; 0xa8
 800dc12:	58d4      	ldr	r4, [r2, r3]
 800dc14:	4d40      	ldr	r5, [pc, #256]	; (800dd18 <RemapAndLinkDMAtoUARTRx+0x360>)
 800dc16:	402c      	ands	r4, r5
 800dc18:	50d4      	str	r4, [r2, r3]
 800dc1a:	58d5      	ldr	r5, [r2, r3]
 800dc1c:	2480      	movs	r4, #128	; 0x80
 800dc1e:	0124      	lsls	r4, r4, #4
 800dc20:	432c      	orrs	r4, r5
 800dc22:	50d4      	str	r4, [r2, r3]
 800dc24:	e7a8      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800dc26:	4a3d      	ldr	r2, [pc, #244]	; (800dd1c <RemapAndLinkDMAtoUARTRx+0x364>)
 800dc28:	680c      	ldr	r4, [r1, #0]
 800dc2a:	4294      	cmp	r4, r2
 800dc2c:	d000      	beq.n	800dc30 <RemapAndLinkDMAtoUARTRx+0x278>
 800dc2e:	e6e1      	b.n	800d9f4 <RemapAndLinkDMAtoUARTRx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800dc30:	4a3b      	ldr	r2, [pc, #236]	; (800dd20 <RemapAndLinkDMAtoUARTRx+0x368>)
 800dc32:	23a8      	movs	r3, #168	; 0xa8
 800dc34:	58d4      	ldr	r4, [r2, r3]
 800dc36:	250f      	movs	r5, #15
 800dc38:	43ac      	bics	r4, r5
 800dc3a:	50d4      	str	r4, [r2, r3]
 800dc3c:	58d4      	ldr	r4, [r2, r3]
 800dc3e:	3d06      	subs	r5, #6
 800dc40:	432c      	orrs	r4, r5
 800dc42:	50d4      	str	r4, [r2, r3]
 800dc44:	e798      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800dc46:	4a37      	ldr	r2, [pc, #220]	; (800dd24 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800dc48:	680c      	ldr	r4, [r1, #0]
 800dc4a:	4294      	cmp	r4, r2
 800dc4c:	d000      	beq.n	800dc50 <RemapAndLinkDMAtoUARTRx+0x298>
 800dc4e:	e6d5      	b.n	800d9fc <RemapAndLinkDMAtoUARTRx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800dc50:	4a33      	ldr	r2, [pc, #204]	; (800dd20 <RemapAndLinkDMAtoUARTRx+0x368>)
 800dc52:	23a8      	movs	r3, #168	; 0xa8
 800dc54:	58d4      	ldr	r4, [r2, r3]
 800dc56:	4d30      	ldr	r5, [pc, #192]	; (800dd18 <RemapAndLinkDMAtoUARTRx+0x360>)
 800dc58:	402c      	ands	r4, r5
 800dc5a:	50d4      	str	r4, [r2, r3]
 800dc5c:	58d5      	ldr	r5, [r2, r3]
 800dc5e:	2490      	movs	r4, #144	; 0x90
 800dc60:	0124      	lsls	r4, r4, #4
 800dc62:	432c      	orrs	r4, r5
 800dc64:	50d4      	str	r4, [r2, r3]
 800dc66:	e787      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800dc68:	4a2f      	ldr	r2, [pc, #188]	; (800dd28 <RemapAndLinkDMAtoUARTRx+0x370>)
 800dc6a:	680c      	ldr	r4, [r1, #0]
 800dc6c:	4294      	cmp	r4, r2
 800dc6e:	d000      	beq.n	800dc72 <RemapAndLinkDMAtoUARTRx+0x2ba>
 800dc70:	e6c8      	b.n	800da04 <RemapAndLinkDMAtoUARTRx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800dc72:	4a2b      	ldr	r2, [pc, #172]	; (800dd20 <RemapAndLinkDMAtoUARTRx+0x368>)
 800dc74:	23a8      	movs	r3, #168	; 0xa8
 800dc76:	58d4      	ldr	r4, [r2, r3]
 800dc78:	4d2c      	ldr	r5, [pc, #176]	; (800dd2c <RemapAndLinkDMAtoUARTRx+0x374>)
 800dc7a:	402c      	ands	r4, r5
 800dc7c:	50d4      	str	r4, [r2, r3]
 800dc7e:	58d5      	ldr	r5, [r2, r3]
 800dc80:	2490      	movs	r4, #144	; 0x90
 800dc82:	0324      	lsls	r4, r4, #12
 800dc84:	432c      	orrs	r4, r5
 800dc86:	50d4      	str	r4, [r2, r3]
 800dc88:	e776      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800dc8a:	4a29      	ldr	r2, [pc, #164]	; (800dd30 <RemapAndLinkDMAtoUARTRx+0x378>)
 800dc8c:	680c      	ldr	r4, [r1, #0]
 800dc8e:	4294      	cmp	r4, r2
 800dc90:	d000      	beq.n	800dc94 <RemapAndLinkDMAtoUARTRx+0x2dc>
 800dc92:	e6bb      	b.n	800da0c <RemapAndLinkDMAtoUARTRx+0x54>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800dc94:	4a22      	ldr	r2, [pc, #136]	; (800dd20 <RemapAndLinkDMAtoUARTRx+0x368>)
 800dc96:	23a8      	movs	r3, #168	; 0xa8
 800dc98:	58d4      	ldr	r4, [r2, r3]
 800dc9a:	4d26      	ldr	r5, [pc, #152]	; (800dd34 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800dc9c:	402c      	ands	r4, r5
 800dc9e:	50d4      	str	r4, [r2, r3]
 800dca0:	58d5      	ldr	r5, [r2, r3]
 800dca2:	2490      	movs	r4, #144	; 0x90
 800dca4:	0424      	lsls	r4, r4, #16
 800dca6:	432c      	orrs	r4, r5
 800dca8:	50d4      	str	r4, [r2, r3]
 800dcaa:	e765      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800dcac:	4a22      	ldr	r2, [pc, #136]	; (800dd38 <RemapAndLinkDMAtoUARTRx+0x380>)
 800dcae:	680c      	ldr	r4, [r1, #0]
 800dcb0:	4294      	cmp	r4, r2
 800dcb2:	d000      	beq.n	800dcb6 <RemapAndLinkDMAtoUARTRx+0x2fe>
 800dcb4:	e6ae      	b.n	800da14 <RemapAndLinkDMAtoUARTRx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800dcb6:	4a17      	ldr	r2, [pc, #92]	; (800dd14 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800dcb8:	23a8      	movs	r3, #168	; 0xa8
 800dcba:	58d4      	ldr	r4, [r2, r3]
 800dcbc:	25f0      	movs	r5, #240	; 0xf0
 800dcbe:	43ac      	bics	r4, r5
 800dcc0:	50d4      	str	r4, [r2, r3]
 800dcc2:	58d4      	ldr	r4, [r2, r3]
 800dcc4:	3d60      	subs	r5, #96	; 0x60
 800dcc6:	432c      	orrs	r4, r5
 800dcc8:	50d4      	str	r4, [r2, r3]
 800dcca:	e755      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800dccc:	4a10      	ldr	r2, [pc, #64]	; (800dd10 <RemapAndLinkDMAtoUARTRx+0x358>)
 800dcce:	680c      	ldr	r4, [r1, #0]
 800dcd0:	4294      	cmp	r4, r2
 800dcd2:	d000      	beq.n	800dcd6 <RemapAndLinkDMAtoUARTRx+0x31e>
 800dcd4:	e6a2      	b.n	800da1c <RemapAndLinkDMAtoUARTRx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800dcd6:	4a0f      	ldr	r2, [pc, #60]	; (800dd14 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800dcd8:	23a8      	movs	r3, #168	; 0xa8
 800dcda:	58d4      	ldr	r4, [r2, r3]
 800dcdc:	4d0e      	ldr	r5, [pc, #56]	; (800dd18 <RemapAndLinkDMAtoUARTRx+0x360>)
 800dcde:	402c      	ands	r4, r5
 800dce0:	50d4      	str	r4, [r2, r3]
 800dce2:	58d5      	ldr	r5, [r2, r3]
 800dce4:	2490      	movs	r4, #144	; 0x90
 800dce6:	0124      	lsls	r4, r4, #4
 800dce8:	432c      	orrs	r4, r5
 800dcea:	50d4      	str	r4, [r2, r3]
 800dcec:	e744      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800dcee:	46c0      	nop			; (mov r8, r8)
 800dcf0:	40013800 	.word	0x40013800
 800dcf4:	40004400 	.word	0x40004400
 800dcf8:	40004800 	.word	0x40004800
 800dcfc:	40004c00 	.word	0x40004c00
 800dd00:	40005000 	.word	0x40005000
 800dd04:	40011400 	.word	0x40011400
 800dd08:	40011800 	.word	0x40011800
 800dd0c:	40011c00 	.word	0x40011c00
 800dd10:	40020430 	.word	0x40020430
 800dd14:	40020400 	.word	0x40020400
 800dd18:	fffff0ff 	.word	0xfffff0ff
 800dd1c:	40020008 	.word	0x40020008
 800dd20:	40020000 	.word	0x40020000
 800dd24:	40020030 	.word	0x40020030
 800dd28:	40020058 	.word	0x40020058
 800dd2c:	fff0ffff 	.word	0xfff0ffff
 800dd30:	4002006c 	.word	0x4002006c
 800dd34:	ff0fffff 	.word	0xff0fffff
 800dd38:	4002041c 	.word	0x4002041c
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800dd3c:	4ae0      	ldr	r2, [pc, #896]	; (800e0c0 <RemapAndLinkDMAtoUARTRx+0x708>)
 800dd3e:	680c      	ldr	r4, [r1, #0]
 800dd40:	4294      	cmp	r4, r2
 800dd42:	d000      	beq.n	800dd46 <RemapAndLinkDMAtoUARTRx+0x38e>
 800dd44:	e66e      	b.n	800da24 <RemapAndLinkDMAtoUARTRx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800dd46:	4adf      	ldr	r2, [pc, #892]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800dd48:	23a8      	movs	r3, #168	; 0xa8
 800dd4a:	58d4      	ldr	r4, [r2, r3]
 800dd4c:	250f      	movs	r5, #15
 800dd4e:	43ac      	bics	r4, r5
 800dd50:	50d4      	str	r4, [r2, r3]
 800dd52:	58d4      	ldr	r4, [r2, r3]
 800dd54:	3d05      	subs	r5, #5
 800dd56:	432c      	orrs	r4, r5
 800dd58:	50d4      	str	r4, [r2, r3]
 800dd5a:	e70d      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800dd5c:	4ada      	ldr	r2, [pc, #872]	; (800e0c8 <RemapAndLinkDMAtoUARTRx+0x710>)
 800dd5e:	680c      	ldr	r4, [r1, #0]
 800dd60:	4294      	cmp	r4, r2
 800dd62:	d000      	beq.n	800dd66 <RemapAndLinkDMAtoUARTRx+0x3ae>
 800dd64:	e662      	b.n	800da2c <RemapAndLinkDMAtoUARTRx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800dd66:	4ad7      	ldr	r2, [pc, #860]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800dd68:	23a8      	movs	r3, #168	; 0xa8
 800dd6a:	58d4      	ldr	r4, [r2, r3]
 800dd6c:	4dd7      	ldr	r5, [pc, #860]	; (800e0cc <RemapAndLinkDMAtoUARTRx+0x714>)
 800dd6e:	402c      	ands	r4, r5
 800dd70:	50d4      	str	r4, [r2, r3]
 800dd72:	58d5      	ldr	r5, [r2, r3]
 800dd74:	24a0      	movs	r4, #160	; 0xa0
 800dd76:	0124      	lsls	r4, r4, #4
 800dd78:	432c      	orrs	r4, r5
 800dd7a:	50d4      	str	r4, [r2, r3]
 800dd7c:	e6fc      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800dd7e:	4ad4      	ldr	r2, [pc, #848]	; (800e0d0 <RemapAndLinkDMAtoUARTRx+0x718>)
 800dd80:	680c      	ldr	r4, [r1, #0]
 800dd82:	4294      	cmp	r4, r2
 800dd84:	d000      	beq.n	800dd88 <RemapAndLinkDMAtoUARTRx+0x3d0>
 800dd86:	e655      	b.n	800da34 <RemapAndLinkDMAtoUARTRx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800dd88:	4ace      	ldr	r2, [pc, #824]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800dd8a:	23a8      	movs	r3, #168	; 0xa8
 800dd8c:	58d4      	ldr	r4, [r2, r3]
 800dd8e:	4dd1      	ldr	r5, [pc, #836]	; (800e0d4 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800dd90:	402c      	ands	r4, r5
 800dd92:	50d4      	str	r4, [r2, r3]
 800dd94:	58d5      	ldr	r5, [r2, r3]
 800dd96:	24a0      	movs	r4, #160	; 0xa0
 800dd98:	0324      	lsls	r4, r4, #12
 800dd9a:	432c      	orrs	r4, r5
 800dd9c:	50d4      	str	r4, [r2, r3]
 800dd9e:	e6eb      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800dda0:	4acd      	ldr	r2, [pc, #820]	; (800e0d8 <RemapAndLinkDMAtoUARTRx+0x720>)
 800dda2:	680c      	ldr	r4, [r1, #0]
 800dda4:	4294      	cmp	r4, r2
 800dda6:	d000      	beq.n	800ddaa <RemapAndLinkDMAtoUARTRx+0x3f2>
 800dda8:	e648      	b.n	800da3c <RemapAndLinkDMAtoUARTRx+0x84>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800ddaa:	4ac6      	ldr	r2, [pc, #792]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ddac:	23a8      	movs	r3, #168	; 0xa8
 800ddae:	58d4      	ldr	r4, [r2, r3]
 800ddb0:	4dca      	ldr	r5, [pc, #808]	; (800e0dc <RemapAndLinkDMAtoUARTRx+0x724>)
 800ddb2:	402c      	ands	r4, r5
 800ddb4:	50d4      	str	r4, [r2, r3]
 800ddb6:	58d5      	ldr	r5, [r2, r3]
 800ddb8:	24a0      	movs	r4, #160	; 0xa0
 800ddba:	0424      	lsls	r4, r4, #16
 800ddbc:	432c      	orrs	r4, r5
 800ddbe:	50d4      	str	r4, [r2, r3]
 800ddc0:	e6da      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800ddc2:	4ac7      	ldr	r2, [pc, #796]	; (800e0e0 <RemapAndLinkDMAtoUARTRx+0x728>)
 800ddc4:	680c      	ldr	r4, [r1, #0]
 800ddc6:	4294      	cmp	r4, r2
 800ddc8:	d000      	beq.n	800ddcc <RemapAndLinkDMAtoUARTRx+0x414>
 800ddca:	e63b      	b.n	800da44 <RemapAndLinkDMAtoUARTRx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800ddcc:	4ac5      	ldr	r2, [pc, #788]	; (800e0e4 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800ddce:	23a8      	movs	r3, #168	; 0xa8
 800ddd0:	58d4      	ldr	r4, [r2, r3]
 800ddd2:	25f0      	movs	r5, #240	; 0xf0
 800ddd4:	43ac      	bics	r4, r5
 800ddd6:	50d4      	str	r4, [r2, r3]
 800ddd8:	58d4      	ldr	r4, [r2, r3]
 800ddda:	3d50      	subs	r5, #80	; 0x50
 800dddc:	432c      	orrs	r4, r5
 800ddde:	50d4      	str	r4, [r2, r3]
 800dde0:	e6ca      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800dde2:	4ac1      	ldr	r2, [pc, #772]	; (800e0e8 <RemapAndLinkDMAtoUARTRx+0x730>)
 800dde4:	680c      	ldr	r4, [r1, #0]
 800dde6:	4294      	cmp	r4, r2
 800dde8:	d000      	beq.n	800ddec <RemapAndLinkDMAtoUARTRx+0x434>
 800ddea:	e62f      	b.n	800da4c <RemapAndLinkDMAtoUARTRx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800ddec:	4abd      	ldr	r2, [pc, #756]	; (800e0e4 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800ddee:	23a8      	movs	r3, #168	; 0xa8
 800ddf0:	58d4      	ldr	r4, [r2, r3]
 800ddf2:	4db6      	ldr	r5, [pc, #728]	; (800e0cc <RemapAndLinkDMAtoUARTRx+0x714>)
 800ddf4:	402c      	ands	r4, r5
 800ddf6:	50d4      	str	r4, [r2, r3]
 800ddf8:	58d5      	ldr	r5, [r2, r3]
 800ddfa:	24a0      	movs	r4, #160	; 0xa0
 800ddfc:	0124      	lsls	r4, r4, #4
 800ddfe:	432c      	orrs	r4, r5
 800de00:	50d4      	str	r4, [r2, r3]
 800de02:	e6b9      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800de04:	4aae      	ldr	r2, [pc, #696]	; (800e0c0 <RemapAndLinkDMAtoUARTRx+0x708>)
 800de06:	680c      	ldr	r4, [r1, #0]
 800de08:	4294      	cmp	r4, r2
 800de0a:	d000      	beq.n	800de0e <RemapAndLinkDMAtoUARTRx+0x456>
 800de0c:	e622      	b.n	800da54 <RemapAndLinkDMAtoUARTRx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800de0e:	4aad      	ldr	r2, [pc, #692]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800de10:	23a8      	movs	r3, #168	; 0xa8
 800de12:	58d4      	ldr	r4, [r2, r3]
 800de14:	250f      	movs	r5, #15
 800de16:	43ac      	bics	r4, r5
 800de18:	50d4      	str	r4, [r2, r3]
 800de1a:	58d4      	ldr	r4, [r2, r3]
 800de1c:	3d04      	subs	r5, #4
 800de1e:	432c      	orrs	r4, r5
 800de20:	50d4      	str	r4, [r2, r3]
 800de22:	e6a9      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800de24:	4aa8      	ldr	r2, [pc, #672]	; (800e0c8 <RemapAndLinkDMAtoUARTRx+0x710>)
 800de26:	680c      	ldr	r4, [r1, #0]
 800de28:	4294      	cmp	r4, r2
 800de2a:	d000      	beq.n	800de2e <RemapAndLinkDMAtoUARTRx+0x476>
 800de2c:	e616      	b.n	800da5c <RemapAndLinkDMAtoUARTRx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800de2e:	4aa5      	ldr	r2, [pc, #660]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800de30:	23a8      	movs	r3, #168	; 0xa8
 800de32:	58d4      	ldr	r4, [r2, r3]
 800de34:	4da5      	ldr	r5, [pc, #660]	; (800e0cc <RemapAndLinkDMAtoUARTRx+0x714>)
 800de36:	402c      	ands	r4, r5
 800de38:	50d4      	str	r4, [r2, r3]
 800de3a:	58d5      	ldr	r5, [r2, r3]
 800de3c:	24b0      	movs	r4, #176	; 0xb0
 800de3e:	0124      	lsls	r4, r4, #4
 800de40:	432c      	orrs	r4, r5
 800de42:	50d4      	str	r4, [r2, r3]
 800de44:	e698      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800de46:	4aa2      	ldr	r2, [pc, #648]	; (800e0d0 <RemapAndLinkDMAtoUARTRx+0x718>)
 800de48:	680c      	ldr	r4, [r1, #0]
 800de4a:	4294      	cmp	r4, r2
 800de4c:	d000      	beq.n	800de50 <RemapAndLinkDMAtoUARTRx+0x498>
 800de4e:	e609      	b.n	800da64 <RemapAndLinkDMAtoUARTRx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800de50:	4a9c      	ldr	r2, [pc, #624]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800de52:	23a8      	movs	r3, #168	; 0xa8
 800de54:	58d4      	ldr	r4, [r2, r3]
 800de56:	4d9f      	ldr	r5, [pc, #636]	; (800e0d4 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800de58:	402c      	ands	r4, r5
 800de5a:	50d4      	str	r4, [r2, r3]
 800de5c:	58d5      	ldr	r5, [r2, r3]
 800de5e:	24b0      	movs	r4, #176	; 0xb0
 800de60:	0324      	lsls	r4, r4, #12
 800de62:	432c      	orrs	r4, r5
 800de64:	50d4      	str	r4, [r2, r3]
 800de66:	e687      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800de68:	4a9b      	ldr	r2, [pc, #620]	; (800e0d8 <RemapAndLinkDMAtoUARTRx+0x720>)
 800de6a:	680c      	ldr	r4, [r1, #0]
 800de6c:	4294      	cmp	r4, r2
 800de6e:	d000      	beq.n	800de72 <RemapAndLinkDMAtoUARTRx+0x4ba>
 800de70:	e5fc      	b.n	800da6c <RemapAndLinkDMAtoUARTRx+0xb4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800de72:	4a94      	ldr	r2, [pc, #592]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800de74:	23a8      	movs	r3, #168	; 0xa8
 800de76:	58d4      	ldr	r4, [r2, r3]
 800de78:	4d98      	ldr	r5, [pc, #608]	; (800e0dc <RemapAndLinkDMAtoUARTRx+0x724>)
 800de7a:	402c      	ands	r4, r5
 800de7c:	50d4      	str	r4, [r2, r3]
 800de7e:	58d5      	ldr	r5, [r2, r3]
 800de80:	24b0      	movs	r4, #176	; 0xb0
 800de82:	0424      	lsls	r4, r4, #16
 800de84:	432c      	orrs	r4, r5
 800de86:	50d4      	str	r4, [r2, r3]
 800de88:	e676      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800de8a:	4a95      	ldr	r2, [pc, #596]	; (800e0e0 <RemapAndLinkDMAtoUARTRx+0x728>)
 800de8c:	680c      	ldr	r4, [r1, #0]
 800de8e:	4294      	cmp	r4, r2
 800de90:	d000      	beq.n	800de94 <RemapAndLinkDMAtoUARTRx+0x4dc>
 800de92:	e5ef      	b.n	800da74 <RemapAndLinkDMAtoUARTRx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800de94:	4a93      	ldr	r2, [pc, #588]	; (800e0e4 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800de96:	23a8      	movs	r3, #168	; 0xa8
 800de98:	58d4      	ldr	r4, [r2, r3]
 800de9a:	25f0      	movs	r5, #240	; 0xf0
 800de9c:	43ac      	bics	r4, r5
 800de9e:	50d4      	str	r4, [r2, r3]
 800dea0:	58d4      	ldr	r4, [r2, r3]
 800dea2:	3d40      	subs	r5, #64	; 0x40
 800dea4:	432c      	orrs	r4, r5
 800dea6:	50d4      	str	r4, [r2, r3]
 800dea8:	e666      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800deaa:	4a8f      	ldr	r2, [pc, #572]	; (800e0e8 <RemapAndLinkDMAtoUARTRx+0x730>)
 800deac:	680c      	ldr	r4, [r1, #0]
 800deae:	4294      	cmp	r4, r2
 800deb0:	d000      	beq.n	800deb4 <RemapAndLinkDMAtoUARTRx+0x4fc>
 800deb2:	e5e3      	b.n	800da7c <RemapAndLinkDMAtoUARTRx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800deb4:	4a8b      	ldr	r2, [pc, #556]	; (800e0e4 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800deb6:	23a8      	movs	r3, #168	; 0xa8
 800deb8:	58d4      	ldr	r4, [r2, r3]
 800deba:	4d84      	ldr	r5, [pc, #528]	; (800e0cc <RemapAndLinkDMAtoUARTRx+0x714>)
 800debc:	402c      	ands	r4, r5
 800debe:	50d4      	str	r4, [r2, r3]
 800dec0:	58d5      	ldr	r5, [r2, r3]
 800dec2:	24b0      	movs	r4, #176	; 0xb0
 800dec4:	0124      	lsls	r4, r4, #4
 800dec6:	432c      	orrs	r4, r5
 800dec8:	50d4      	str	r4, [r2, r3]
 800deca:	e655      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800decc:	4a7c      	ldr	r2, [pc, #496]	; (800e0c0 <RemapAndLinkDMAtoUARTRx+0x708>)
 800dece:	680c      	ldr	r4, [r1, #0]
 800ded0:	4294      	cmp	r4, r2
 800ded2:	d000      	beq.n	800ded6 <RemapAndLinkDMAtoUARTRx+0x51e>
 800ded4:	e5d6      	b.n	800da84 <RemapAndLinkDMAtoUARTRx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800ded6:	4a7b      	ldr	r2, [pc, #492]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ded8:	23a8      	movs	r3, #168	; 0xa8
 800deda:	58d4      	ldr	r4, [r2, r3]
 800dedc:	250f      	movs	r5, #15
 800dede:	43ac      	bics	r4, r5
 800dee0:	50d4      	str	r4, [r2, r3]
 800dee2:	58d4      	ldr	r4, [r2, r3]
 800dee4:	3d03      	subs	r5, #3
 800dee6:	432c      	orrs	r4, r5
 800dee8:	50d4      	str	r4, [r2, r3]
 800deea:	e645      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800deec:	4a76      	ldr	r2, [pc, #472]	; (800e0c8 <RemapAndLinkDMAtoUARTRx+0x710>)
 800deee:	680c      	ldr	r4, [r1, #0]
 800def0:	4294      	cmp	r4, r2
 800def2:	d000      	beq.n	800def6 <RemapAndLinkDMAtoUARTRx+0x53e>
 800def4:	e5ca      	b.n	800da8c <RemapAndLinkDMAtoUARTRx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800def6:	4a73      	ldr	r2, [pc, #460]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800def8:	23a8      	movs	r3, #168	; 0xa8
 800defa:	58d4      	ldr	r4, [r2, r3]
 800defc:	4d73      	ldr	r5, [pc, #460]	; (800e0cc <RemapAndLinkDMAtoUARTRx+0x714>)
 800defe:	402c      	ands	r4, r5
 800df00:	50d4      	str	r4, [r2, r3]
 800df02:	58d5      	ldr	r5, [r2, r3]
 800df04:	24c0      	movs	r4, #192	; 0xc0
 800df06:	0124      	lsls	r4, r4, #4
 800df08:	432c      	orrs	r4, r5
 800df0a:	50d4      	str	r4, [r2, r3]
 800df0c:	e634      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800df0e:	4a70      	ldr	r2, [pc, #448]	; (800e0d0 <RemapAndLinkDMAtoUARTRx+0x718>)
 800df10:	680c      	ldr	r4, [r1, #0]
 800df12:	4294      	cmp	r4, r2
 800df14:	d000      	beq.n	800df18 <RemapAndLinkDMAtoUARTRx+0x560>
 800df16:	e5bd      	b.n	800da94 <RemapAndLinkDMAtoUARTRx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800df18:	4a6a      	ldr	r2, [pc, #424]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800df1a:	23a8      	movs	r3, #168	; 0xa8
 800df1c:	58d4      	ldr	r4, [r2, r3]
 800df1e:	4d6d      	ldr	r5, [pc, #436]	; (800e0d4 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800df20:	402c      	ands	r4, r5
 800df22:	50d4      	str	r4, [r2, r3]
 800df24:	58d5      	ldr	r5, [r2, r3]
 800df26:	24c0      	movs	r4, #192	; 0xc0
 800df28:	0324      	lsls	r4, r4, #12
 800df2a:	432c      	orrs	r4, r5
 800df2c:	50d4      	str	r4, [r2, r3]
 800df2e:	e623      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800df30:	4a69      	ldr	r2, [pc, #420]	; (800e0d8 <RemapAndLinkDMAtoUARTRx+0x720>)
 800df32:	680c      	ldr	r4, [r1, #0]
 800df34:	4294      	cmp	r4, r2
 800df36:	d000      	beq.n	800df3a <RemapAndLinkDMAtoUARTRx+0x582>
 800df38:	e5b0      	b.n	800da9c <RemapAndLinkDMAtoUARTRx+0xe4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800df3a:	4a62      	ldr	r2, [pc, #392]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800df3c:	23a8      	movs	r3, #168	; 0xa8
 800df3e:	58d4      	ldr	r4, [r2, r3]
 800df40:	4d66      	ldr	r5, [pc, #408]	; (800e0dc <RemapAndLinkDMAtoUARTRx+0x724>)
 800df42:	402c      	ands	r4, r5
 800df44:	50d4      	str	r4, [r2, r3]
 800df46:	58d5      	ldr	r5, [r2, r3]
 800df48:	24c0      	movs	r4, #192	; 0xc0
 800df4a:	0424      	lsls	r4, r4, #16
 800df4c:	432c      	orrs	r4, r5
 800df4e:	50d4      	str	r4, [r2, r3]
 800df50:	e612      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800df52:	4a63      	ldr	r2, [pc, #396]	; (800e0e0 <RemapAndLinkDMAtoUARTRx+0x728>)
 800df54:	680c      	ldr	r4, [r1, #0]
 800df56:	4294      	cmp	r4, r2
 800df58:	d000      	beq.n	800df5c <RemapAndLinkDMAtoUARTRx+0x5a4>
 800df5a:	e5a3      	b.n	800daa4 <RemapAndLinkDMAtoUARTRx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800df5c:	4a61      	ldr	r2, [pc, #388]	; (800e0e4 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800df5e:	23a8      	movs	r3, #168	; 0xa8
 800df60:	58d4      	ldr	r4, [r2, r3]
 800df62:	25f0      	movs	r5, #240	; 0xf0
 800df64:	43ac      	bics	r4, r5
 800df66:	50d4      	str	r4, [r2, r3]
 800df68:	58d4      	ldr	r4, [r2, r3]
 800df6a:	3d30      	subs	r5, #48	; 0x30
 800df6c:	432c      	orrs	r4, r5
 800df6e:	50d4      	str	r4, [r2, r3]
 800df70:	e602      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800df72:	4a5d      	ldr	r2, [pc, #372]	; (800e0e8 <RemapAndLinkDMAtoUARTRx+0x730>)
 800df74:	680c      	ldr	r4, [r1, #0]
 800df76:	4294      	cmp	r4, r2
 800df78:	d000      	beq.n	800df7c <RemapAndLinkDMAtoUARTRx+0x5c4>
 800df7a:	e597      	b.n	800daac <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800df7c:	4a59      	ldr	r2, [pc, #356]	; (800e0e4 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800df7e:	23a8      	movs	r3, #168	; 0xa8
 800df80:	58d4      	ldr	r4, [r2, r3]
 800df82:	4d52      	ldr	r5, [pc, #328]	; (800e0cc <RemapAndLinkDMAtoUARTRx+0x714>)
 800df84:	402c      	ands	r4, r5
 800df86:	50d4      	str	r4, [r2, r3]
 800df88:	58d5      	ldr	r5, [r2, r3]
 800df8a:	24c0      	movs	r4, #192	; 0xc0
 800df8c:	0124      	lsls	r4, r4, #4
 800df8e:	432c      	orrs	r4, r5
 800df90:	50d4      	str	r4, [r2, r3]
 800df92:	e5f1      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800df94:	4a4a      	ldr	r2, [pc, #296]	; (800e0c0 <RemapAndLinkDMAtoUARTRx+0x708>)
 800df96:	680c      	ldr	r4, [r1, #0]
 800df98:	4294      	cmp	r4, r2
 800df9a:	d000      	beq.n	800df9e <RemapAndLinkDMAtoUARTRx+0x5e6>
 800df9c:	e58a      	b.n	800dab4 <RemapAndLinkDMAtoUARTRx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800df9e:	4a49      	ldr	r2, [pc, #292]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800dfa0:	23a8      	movs	r3, #168	; 0xa8
 800dfa2:	58d4      	ldr	r4, [r2, r3]
 800dfa4:	250f      	movs	r5, #15
 800dfa6:	43ac      	bics	r4, r5
 800dfa8:	50d4      	str	r4, [r2, r3]
 800dfaa:	58d4      	ldr	r4, [r2, r3]
 800dfac:	3d02      	subs	r5, #2
 800dfae:	432c      	orrs	r4, r5
 800dfb0:	50d4      	str	r4, [r2, r3]
 800dfb2:	e5e1      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800dfb4:	4a44      	ldr	r2, [pc, #272]	; (800e0c8 <RemapAndLinkDMAtoUARTRx+0x710>)
 800dfb6:	680c      	ldr	r4, [r1, #0]
 800dfb8:	4294      	cmp	r4, r2
 800dfba:	d000      	beq.n	800dfbe <RemapAndLinkDMAtoUARTRx+0x606>
 800dfbc:	e57e      	b.n	800dabc <RemapAndLinkDMAtoUARTRx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800dfbe:	4a41      	ldr	r2, [pc, #260]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800dfc0:	23a8      	movs	r3, #168	; 0xa8
 800dfc2:	58d4      	ldr	r4, [r2, r3]
 800dfc4:	4d41      	ldr	r5, [pc, #260]	; (800e0cc <RemapAndLinkDMAtoUARTRx+0x714>)
 800dfc6:	402c      	ands	r4, r5
 800dfc8:	50d4      	str	r4, [r2, r3]
 800dfca:	58d5      	ldr	r5, [r2, r3]
 800dfcc:	24d0      	movs	r4, #208	; 0xd0
 800dfce:	0124      	lsls	r4, r4, #4
 800dfd0:	432c      	orrs	r4, r5
 800dfd2:	50d4      	str	r4, [r2, r3]
 800dfd4:	e5d0      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800dfd6:	4a3e      	ldr	r2, [pc, #248]	; (800e0d0 <RemapAndLinkDMAtoUARTRx+0x718>)
 800dfd8:	680c      	ldr	r4, [r1, #0]
 800dfda:	4294      	cmp	r4, r2
 800dfdc:	d000      	beq.n	800dfe0 <RemapAndLinkDMAtoUARTRx+0x628>
 800dfde:	e571      	b.n	800dac4 <RemapAndLinkDMAtoUARTRx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800dfe0:	4a38      	ldr	r2, [pc, #224]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800dfe2:	23a8      	movs	r3, #168	; 0xa8
 800dfe4:	58d4      	ldr	r4, [r2, r3]
 800dfe6:	4d3b      	ldr	r5, [pc, #236]	; (800e0d4 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800dfe8:	402c      	ands	r4, r5
 800dfea:	50d4      	str	r4, [r2, r3]
 800dfec:	58d5      	ldr	r5, [r2, r3]
 800dfee:	24d0      	movs	r4, #208	; 0xd0
 800dff0:	0324      	lsls	r4, r4, #12
 800dff2:	432c      	orrs	r4, r5
 800dff4:	50d4      	str	r4, [r2, r3]
 800dff6:	e5bf      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800dff8:	4a37      	ldr	r2, [pc, #220]	; (800e0d8 <RemapAndLinkDMAtoUARTRx+0x720>)
 800dffa:	680c      	ldr	r4, [r1, #0]
 800dffc:	4294      	cmp	r4, r2
 800dffe:	d000      	beq.n	800e002 <RemapAndLinkDMAtoUARTRx+0x64a>
 800e000:	e564      	b.n	800dacc <RemapAndLinkDMAtoUARTRx+0x114>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800e002:	4a30      	ldr	r2, [pc, #192]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e004:	23a8      	movs	r3, #168	; 0xa8
 800e006:	58d4      	ldr	r4, [r2, r3]
 800e008:	4d34      	ldr	r5, [pc, #208]	; (800e0dc <RemapAndLinkDMAtoUARTRx+0x724>)
 800e00a:	402c      	ands	r4, r5
 800e00c:	50d4      	str	r4, [r2, r3]
 800e00e:	58d5      	ldr	r5, [r2, r3]
 800e010:	24d0      	movs	r4, #208	; 0xd0
 800e012:	0424      	lsls	r4, r4, #16
 800e014:	432c      	orrs	r4, r5
 800e016:	50d4      	str	r4, [r2, r3]
 800e018:	e5ae      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800e01a:	4a31      	ldr	r2, [pc, #196]	; (800e0e0 <RemapAndLinkDMAtoUARTRx+0x728>)
 800e01c:	680c      	ldr	r4, [r1, #0]
 800e01e:	4294      	cmp	r4, r2
 800e020:	d000      	beq.n	800e024 <RemapAndLinkDMAtoUARTRx+0x66c>
 800e022:	e557      	b.n	800dad4 <RemapAndLinkDMAtoUARTRx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800e024:	4a2f      	ldr	r2, [pc, #188]	; (800e0e4 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e026:	23a8      	movs	r3, #168	; 0xa8
 800e028:	58d4      	ldr	r4, [r2, r3]
 800e02a:	25f0      	movs	r5, #240	; 0xf0
 800e02c:	43ac      	bics	r4, r5
 800e02e:	50d4      	str	r4, [r2, r3]
 800e030:	58d4      	ldr	r4, [r2, r3]
 800e032:	3d20      	subs	r5, #32
 800e034:	432c      	orrs	r4, r5
 800e036:	50d4      	str	r4, [r2, r3]
 800e038:	e59e      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800e03a:	4a2b      	ldr	r2, [pc, #172]	; (800e0e8 <RemapAndLinkDMAtoUARTRx+0x730>)
 800e03c:	680c      	ldr	r4, [r1, #0]
 800e03e:	4294      	cmp	r4, r2
 800e040:	d000      	beq.n	800e044 <RemapAndLinkDMAtoUARTRx+0x68c>
 800e042:	e54b      	b.n	800dadc <RemapAndLinkDMAtoUARTRx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800e044:	4a27      	ldr	r2, [pc, #156]	; (800e0e4 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800e046:	23a8      	movs	r3, #168	; 0xa8
 800e048:	58d4      	ldr	r4, [r2, r3]
 800e04a:	4d20      	ldr	r5, [pc, #128]	; (800e0cc <RemapAndLinkDMAtoUARTRx+0x714>)
 800e04c:	402c      	ands	r4, r5
 800e04e:	50d4      	str	r4, [r2, r3]
 800e050:	58d5      	ldr	r5, [r2, r3]
 800e052:	24d0      	movs	r4, #208	; 0xd0
 800e054:	0124      	lsls	r4, r4, #4
 800e056:	432c      	orrs	r4, r5
 800e058:	50d4      	str	r4, [r2, r3]
 800e05a:	e58d      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800e05c:	4a18      	ldr	r2, [pc, #96]	; (800e0c0 <RemapAndLinkDMAtoUARTRx+0x708>)
 800e05e:	680c      	ldr	r4, [r1, #0]
 800e060:	4294      	cmp	r4, r2
 800e062:	d000      	beq.n	800e066 <RemapAndLinkDMAtoUARTRx+0x6ae>
 800e064:	e53e      	b.n	800dae4 <RemapAndLinkDMAtoUARTRx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800e066:	4a17      	ldr	r2, [pc, #92]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e068:	23a8      	movs	r3, #168	; 0xa8
 800e06a:	58d4      	ldr	r4, [r2, r3]
 800e06c:	250f      	movs	r5, #15
 800e06e:	43ac      	bics	r4, r5
 800e070:	50d4      	str	r4, [r2, r3]
 800e072:	58d4      	ldr	r4, [r2, r3]
 800e074:	3d01      	subs	r5, #1
 800e076:	432c      	orrs	r4, r5
 800e078:	50d4      	str	r4, [r2, r3]
 800e07a:	e57d      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800e07c:	4a12      	ldr	r2, [pc, #72]	; (800e0c8 <RemapAndLinkDMAtoUARTRx+0x710>)
 800e07e:	680c      	ldr	r4, [r1, #0]
 800e080:	4294      	cmp	r4, r2
 800e082:	d000      	beq.n	800e086 <RemapAndLinkDMAtoUARTRx+0x6ce>
 800e084:	e532      	b.n	800daec <RemapAndLinkDMAtoUARTRx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800e086:	4a0f      	ldr	r2, [pc, #60]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e088:	23a8      	movs	r3, #168	; 0xa8
 800e08a:	58d4      	ldr	r4, [r2, r3]
 800e08c:	4d0f      	ldr	r5, [pc, #60]	; (800e0cc <RemapAndLinkDMAtoUARTRx+0x714>)
 800e08e:	402c      	ands	r4, r5
 800e090:	50d4      	str	r4, [r2, r3]
 800e092:	58d5      	ldr	r5, [r2, r3]
 800e094:	24e0      	movs	r4, #224	; 0xe0
 800e096:	0124      	lsls	r4, r4, #4
 800e098:	432c      	orrs	r4, r5
 800e09a:	50d4      	str	r4, [r2, r3]
 800e09c:	e56c      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800e09e:	4a0c      	ldr	r2, [pc, #48]	; (800e0d0 <RemapAndLinkDMAtoUARTRx+0x718>)
 800e0a0:	680c      	ldr	r4, [r1, #0]
 800e0a2:	4294      	cmp	r4, r2
 800e0a4:	d000      	beq.n	800e0a8 <RemapAndLinkDMAtoUARTRx+0x6f0>
 800e0a6:	e525      	b.n	800daf4 <RemapAndLinkDMAtoUARTRx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800e0a8:	4a06      	ldr	r2, [pc, #24]	; (800e0c4 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800e0aa:	23a8      	movs	r3, #168	; 0xa8
 800e0ac:	58d4      	ldr	r4, [r2, r3]
 800e0ae:	4d09      	ldr	r5, [pc, #36]	; (800e0d4 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800e0b0:	402c      	ands	r4, r5
 800e0b2:	50d4      	str	r4, [r2, r3]
 800e0b4:	58d5      	ldr	r5, [r2, r3]
 800e0b6:	24e0      	movs	r4, #224	; 0xe0
 800e0b8:	0324      	lsls	r4, r4, #12
 800e0ba:	432c      	orrs	r4, r5
 800e0bc:	50d4      	str	r4, [r2, r3]
 800e0be:	e55b      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800e0c0:	40020008 	.word	0x40020008
 800e0c4:	40020000 	.word	0x40020000
 800e0c8:	40020030 	.word	0x40020030
 800e0cc:	fffff0ff 	.word	0xfffff0ff
 800e0d0:	40020058 	.word	0x40020058
 800e0d4:	fff0ffff 	.word	0xfff0ffff
 800e0d8:	4002006c 	.word	0x4002006c
 800e0dc:	ff0fffff 	.word	0xff0fffff
 800e0e0:	4002041c 	.word	0x4002041c
 800e0e4:	40020400 	.word	0x40020400
 800e0e8:	40020430 	.word	0x40020430
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800e0ec:	4a41      	ldr	r2, [pc, #260]	; (800e1f4 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800e0ee:	680c      	ldr	r4, [r1, #0]
 800e0f0:	4294      	cmp	r4, r2
 800e0f2:	d000      	beq.n	800e0f6 <RemapAndLinkDMAtoUARTRx+0x73e>
 800e0f4:	e502      	b.n	800dafc <RemapAndLinkDMAtoUARTRx+0x144>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800e0f6:	4a40      	ldr	r2, [pc, #256]	; (800e1f8 <RemapAndLinkDMAtoUARTRx+0x840>)
 800e0f8:	23a8      	movs	r3, #168	; 0xa8
 800e0fa:	58d4      	ldr	r4, [r2, r3]
 800e0fc:	4d3f      	ldr	r5, [pc, #252]	; (800e1fc <RemapAndLinkDMAtoUARTRx+0x844>)
 800e0fe:	402c      	ands	r4, r5
 800e100:	50d4      	str	r4, [r2, r3]
 800e102:	58d5      	ldr	r5, [r2, r3]
 800e104:	24e0      	movs	r4, #224	; 0xe0
 800e106:	0424      	lsls	r4, r4, #16
 800e108:	432c      	orrs	r4, r5
 800e10a:	50d4      	str	r4, [r2, r3]
 800e10c:	e534      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800e10e:	4a3c      	ldr	r2, [pc, #240]	; (800e200 <RemapAndLinkDMAtoUARTRx+0x848>)
 800e110:	680c      	ldr	r4, [r1, #0]
 800e112:	4294      	cmp	r4, r2
 800e114:	d000      	beq.n	800e118 <RemapAndLinkDMAtoUARTRx+0x760>
 800e116:	e4f5      	b.n	800db04 <RemapAndLinkDMAtoUARTRx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800e118:	4a3a      	ldr	r2, [pc, #232]	; (800e204 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800e11a:	23a8      	movs	r3, #168	; 0xa8
 800e11c:	58d4      	ldr	r4, [r2, r3]
 800e11e:	25f0      	movs	r5, #240	; 0xf0
 800e120:	43ac      	bics	r4, r5
 800e122:	50d4      	str	r4, [r2, r3]
 800e124:	58d4      	ldr	r4, [r2, r3]
 800e126:	3d10      	subs	r5, #16
 800e128:	432c      	orrs	r4, r5
 800e12a:	50d4      	str	r4, [r2, r3]
 800e12c:	e524      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800e12e:	4a36      	ldr	r2, [pc, #216]	; (800e208 <RemapAndLinkDMAtoUARTRx+0x850>)
 800e130:	680c      	ldr	r4, [r1, #0]
 800e132:	4294      	cmp	r4, r2
 800e134:	d000      	beq.n	800e138 <RemapAndLinkDMAtoUARTRx+0x780>
 800e136:	e4e9      	b.n	800db0c <RemapAndLinkDMAtoUARTRx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800e138:	4a32      	ldr	r2, [pc, #200]	; (800e204 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800e13a:	23a8      	movs	r3, #168	; 0xa8
 800e13c:	58d4      	ldr	r4, [r2, r3]
 800e13e:	4d33      	ldr	r5, [pc, #204]	; (800e20c <RemapAndLinkDMAtoUARTRx+0x854>)
 800e140:	402c      	ands	r4, r5
 800e142:	50d4      	str	r4, [r2, r3]
 800e144:	58d5      	ldr	r5, [r2, r3]
 800e146:	24e0      	movs	r4, #224	; 0xe0
 800e148:	0124      	lsls	r4, r4, #4
 800e14a:	432c      	orrs	r4, r5
 800e14c:	50d4      	str	r4, [r2, r3]
 800e14e:	e513      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800e150:	4a2f      	ldr	r2, [pc, #188]	; (800e210 <RemapAndLinkDMAtoUARTRx+0x858>)
 800e152:	680c      	ldr	r4, [r1, #0]
 800e154:	4294      	cmp	r4, r2
 800e156:	d000      	beq.n	800e15a <RemapAndLinkDMAtoUARTRx+0x7a2>
 800e158:	e4dc      	b.n	800db14 <RemapAndLinkDMAtoUARTRx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800e15a:	4a27      	ldr	r2, [pc, #156]	; (800e1f8 <RemapAndLinkDMAtoUARTRx+0x840>)
 800e15c:	23a8      	movs	r3, #168	; 0xa8
 800e15e:	58d5      	ldr	r5, [r2, r3]
 800e160:	260f      	movs	r6, #15
 800e162:	43b5      	bics	r5, r6
 800e164:	50d5      	str	r5, [r2, r3]
 800e166:	58d4      	ldr	r4, [r2, r3]
 800e168:	4334      	orrs	r4, r6
 800e16a:	50d4      	str	r4, [r2, r3]
 800e16c:	e504      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800e16e:	4a29      	ldr	r2, [pc, #164]	; (800e214 <RemapAndLinkDMAtoUARTRx+0x85c>)
 800e170:	680c      	ldr	r4, [r1, #0]
 800e172:	4294      	cmp	r4, r2
 800e174:	d000      	beq.n	800e178 <RemapAndLinkDMAtoUARTRx+0x7c0>
 800e176:	e4d1      	b.n	800db1c <RemapAndLinkDMAtoUARTRx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800e178:	4a1f      	ldr	r2, [pc, #124]	; (800e1f8 <RemapAndLinkDMAtoUARTRx+0x840>)
 800e17a:	23a8      	movs	r3, #168	; 0xa8
 800e17c:	58d4      	ldr	r4, [r2, r3]
 800e17e:	4d23      	ldr	r5, [pc, #140]	; (800e20c <RemapAndLinkDMAtoUARTRx+0x854>)
 800e180:	402c      	ands	r4, r5
 800e182:	50d4      	str	r4, [r2, r3]
 800e184:	58d5      	ldr	r5, [r2, r3]
 800e186:	24f0      	movs	r4, #240	; 0xf0
 800e188:	0124      	lsls	r4, r4, #4
 800e18a:	432c      	orrs	r4, r5
 800e18c:	50d4      	str	r4, [r2, r3]
 800e18e:	e4f3      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800e190:	4a21      	ldr	r2, [pc, #132]	; (800e218 <RemapAndLinkDMAtoUARTRx+0x860>)
 800e192:	680c      	ldr	r4, [r1, #0]
 800e194:	4294      	cmp	r4, r2
 800e196:	d000      	beq.n	800e19a <RemapAndLinkDMAtoUARTRx+0x7e2>
 800e198:	e4c4      	b.n	800db24 <RemapAndLinkDMAtoUARTRx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800e19a:	4a17      	ldr	r2, [pc, #92]	; (800e1f8 <RemapAndLinkDMAtoUARTRx+0x840>)
 800e19c:	23a8      	movs	r3, #168	; 0xa8
 800e19e:	58d4      	ldr	r4, [r2, r3]
 800e1a0:	4d1e      	ldr	r5, [pc, #120]	; (800e21c <RemapAndLinkDMAtoUARTRx+0x864>)
 800e1a2:	402c      	ands	r4, r5
 800e1a4:	50d4      	str	r4, [r2, r3]
 800e1a6:	58d5      	ldr	r5, [r2, r3]
 800e1a8:	24f0      	movs	r4, #240	; 0xf0
 800e1aa:	0324      	lsls	r4, r4, #12
 800e1ac:	432c      	orrs	r4, r5
 800e1ae:	50d4      	str	r4, [r2, r3]
 800e1b0:	e4e2      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800e1b2:	4a10      	ldr	r2, [pc, #64]	; (800e1f4 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800e1b4:	680c      	ldr	r4, [r1, #0]
 800e1b6:	4294      	cmp	r4, r2
 800e1b8:	d000      	beq.n	800e1bc <RemapAndLinkDMAtoUARTRx+0x804>
 800e1ba:	e4b7      	b.n	800db2c <RemapAndLinkDMAtoUARTRx+0x174>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800e1bc:	4a0e      	ldr	r2, [pc, #56]	; (800e1f8 <RemapAndLinkDMAtoUARTRx+0x840>)
 800e1be:	23a8      	movs	r3, #168	; 0xa8
 800e1c0:	58d4      	ldr	r4, [r2, r3]
 800e1c2:	4d0e      	ldr	r5, [pc, #56]	; (800e1fc <RemapAndLinkDMAtoUARTRx+0x844>)
 800e1c4:	402c      	ands	r4, r5
 800e1c6:	50d4      	str	r4, [r2, r3]
 800e1c8:	58d5      	ldr	r5, [r2, r3]
 800e1ca:	24f0      	movs	r4, #240	; 0xf0
 800e1cc:	0424      	lsls	r4, r4, #16
 800e1ce:	432c      	orrs	r4, r5
 800e1d0:	50d4      	str	r4, [r2, r3]
 800e1d2:	e4d1      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800e1d4:	4a0a      	ldr	r2, [pc, #40]	; (800e200 <RemapAndLinkDMAtoUARTRx+0x848>)
 800e1d6:	680c      	ldr	r4, [r1, #0]
 800e1d8:	4294      	cmp	r4, r2
 800e1da:	d000      	beq.n	800e1de <RemapAndLinkDMAtoUARTRx+0x826>
 800e1dc:	e4aa      	b.n	800db34 <RemapAndLinkDMAtoUARTRx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800e1de:	4a09      	ldr	r2, [pc, #36]	; (800e204 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800e1e0:	23a8      	movs	r3, #168	; 0xa8
 800e1e2:	58d5      	ldr	r5, [r2, r3]
 800e1e4:	26f0      	movs	r6, #240	; 0xf0
 800e1e6:	43b5      	bics	r5, r6
 800e1e8:	50d5      	str	r5, [r2, r3]
 800e1ea:	58d4      	ldr	r4, [r2, r3]
 800e1ec:	4334      	orrs	r4, r6
 800e1ee:	50d4      	str	r4, [r2, r3]
 800e1f0:	e4c2      	b.n	800db78 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800e1f2:	46c0      	nop			; (mov r8, r8)
 800e1f4:	4002006c 	.word	0x4002006c
 800e1f8:	40020000 	.word	0x40020000
 800e1fc:	ff0fffff 	.word	0xff0fffff
 800e200:	4002041c 	.word	0x4002041c
 800e204:	40020400 	.word	0x40020400
 800e208:	40020430 	.word	0x40020430
 800e20c:	fffff0ff 	.word	0xfffff0ff
 800e210:	40020008 	.word	0x40020008
 800e214:	40020030 	.word	0x40020030
 800e218:	40020058 	.word	0x40020058
 800e21c:	fff0ffff 	.word	0xfff0ffff

0800e220 <DMA_MSG_RX_Setup>:
{	
 800e220:	b570      	push	{r4, r5, r6, lr}
 800e222:	0004      	movs	r4, r0
 800e224:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800e226:	f7ff fbc7 	bl	800d9b8 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800e22a:	2100      	movs	r1, #0
 800e22c:	0028      	movs	r0, r5
 800e22e:	f7ff fb0d 	bl	800d84c <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800e232:	0020      	movs	r0, r4
 800e234:	f7fd feb8 	bl	800bfa8 <GetPort>
 800e238:	1e41      	subs	r1, r0, #1
 800e23a:	0189      	lsls	r1, r1, #6
 800e23c:	4803      	ldr	r0, [pc, #12]	; (800e24c <DMA_MSG_RX_Setup+0x2c>)
 800e23e:	1809      	adds	r1, r1, r0
 800e240:	2240      	movs	r2, #64	; 0x40
 800e242:	0020      	movs	r0, r4
 800e244:	f006 f8e4 	bl	8014410 <HAL_UART_Receive_DMA>
}
 800e248:	bd70      	pop	{r4, r5, r6, pc}
 800e24a:	46c0      	nop			; (mov r8, r8)
 800e24c:	200012b8 	.word	0x200012b8

0800e250 <SetupMessagingRxDMAs>:
{	
 800e250:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800e252:	4b17      	ldr	r3, [pc, #92]	; (800e2b0 <SetupMessagingRxDMAs+0x60>)
 800e254:	785b      	ldrb	r3, [r3, #1]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d010      	beq.n	800e27c <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800e25a:	4b15      	ldr	r3, [pc, #84]	; (800e2b0 <SetupMessagingRxDMAs+0x60>)
 800e25c:	789b      	ldrb	r3, [r3, #2]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d011      	beq.n	800e286 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800e262:	4b13      	ldr	r3, [pc, #76]	; (800e2b0 <SetupMessagingRxDMAs+0x60>)
 800e264:	78db      	ldrb	r3, [r3, #3]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d012      	beq.n	800e290 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800e26a:	4b11      	ldr	r3, [pc, #68]	; (800e2b0 <SetupMessagingRxDMAs+0x60>)
 800e26c:	791b      	ldrb	r3, [r3, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d013      	beq.n	800e29a <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800e272:	4b0f      	ldr	r3, [pc, #60]	; (800e2b0 <SetupMessagingRxDMAs+0x60>)
 800e274:	795b      	ldrb	r3, [r3, #5]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d014      	beq.n	800e2a4 <SetupMessagingRxDMAs+0x54>
}
 800e27a:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800e27c:	490d      	ldr	r1, [pc, #52]	; (800e2b4 <SetupMessagingRxDMAs+0x64>)
 800e27e:	480e      	ldr	r0, [pc, #56]	; (800e2b8 <SetupMessagingRxDMAs+0x68>)
 800e280:	f7ff ffce 	bl	800e220 <DMA_MSG_RX_Setup>
 800e284:	e7e9      	b.n	800e25a <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800e286:	490d      	ldr	r1, [pc, #52]	; (800e2bc <SetupMessagingRxDMAs+0x6c>)
 800e288:	480d      	ldr	r0, [pc, #52]	; (800e2c0 <SetupMessagingRxDMAs+0x70>)
 800e28a:	f7ff ffc9 	bl	800e220 <DMA_MSG_RX_Setup>
 800e28e:	e7e8      	b.n	800e262 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800e290:	490c      	ldr	r1, [pc, #48]	; (800e2c4 <SetupMessagingRxDMAs+0x74>)
 800e292:	480d      	ldr	r0, [pc, #52]	; (800e2c8 <SetupMessagingRxDMAs+0x78>)
 800e294:	f7ff ffc4 	bl	800e220 <DMA_MSG_RX_Setup>
 800e298:	e7e7      	b.n	800e26a <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800e29a:	490c      	ldr	r1, [pc, #48]	; (800e2cc <SetupMessagingRxDMAs+0x7c>)
 800e29c:	480c      	ldr	r0, [pc, #48]	; (800e2d0 <SetupMessagingRxDMAs+0x80>)
 800e29e:	f7ff ffbf 	bl	800e220 <DMA_MSG_RX_Setup>
 800e2a2:	e7e6      	b.n	800e272 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800e2a4:	490b      	ldr	r1, [pc, #44]	; (800e2d4 <SetupMessagingRxDMAs+0x84>)
 800e2a6:	480c      	ldr	r0, [pc, #48]	; (800e2d8 <SetupMessagingRxDMAs+0x88>)
 800e2a8:	f7ff ffba 	bl	800e220 <DMA_MSG_RX_Setup>
}
 800e2ac:	e7e5      	b.n	800e27a <SetupMessagingRxDMAs+0x2a>
 800e2ae:	46c0      	nop			; (mov r8, r8)
 800e2b0:	200010e0 	.word	0x200010e0
 800e2b4:	20001b78 	.word	0x20001b78
 800e2b8:	20007090 	.word	0x20007090
 800e2bc:	20001bb0 	.word	0x20001bb0
 800e2c0:	20007104 	.word	0x20007104
 800e2c4:	20001be8 	.word	0x20001be8
 800e2c8:	20007020 	.word	0x20007020
 800e2cc:	20001c20 	.word	0x20001c20
 800e2d0:	20006ec4 	.word	0x20006ec4
 800e2d4:	20001c58 	.word	0x20001c58
 800e2d8:	20006f38 	.word	0x20006f38

0800e2dc <DMA_STREAM_Setup>:
{	
 800e2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2de:	0005      	movs	r5, r0
 800e2e0:	000f      	movs	r7, r1
 800e2e2:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800e2e4:	f7fd fe60 	bl	800bfa8 <GetPort>
	hDMA = &streamDMA[port-1];
 800e2e8:	3801      	subs	r0, #1
 800e2ea:	00c3      	lsls	r3, r0, #3
 800e2ec:	1a18      	subs	r0, r3, r0
 800e2ee:	00c4      	lsls	r4, r0, #3
 800e2f0:	4b09      	ldr	r3, [pc, #36]	; (800e318 <DMA_STREAM_Setup+0x3c>)
 800e2f2:	18e4      	adds	r4, r4, r3
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800e2f4:	0021      	movs	r1, r4
 800e2f6:	0028      	movs	r0, r5
 800e2f8:	f7ff fb5e 	bl	800d9b8 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	0020      	movs	r0, r4
 800e300:	f7ff faa4 	bl	800d84c <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800e304:	2369      	movs	r3, #105	; 0x69
 800e306:	2201      	movs	r2, #1
 800e308:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800e30a:	6839      	ldr	r1, [r7, #0]
 800e30c:	3128      	adds	r1, #40	; 0x28
 800e30e:	0032      	movs	r2, r6
 800e310:	0028      	movs	r0, r5
 800e312:	f006 f87d 	bl	8014410 <HAL_UART_Receive_DMA>
}
 800e316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e318:	20001d70 	.word	0x20001d70

0800e31c <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800e31c:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800e31e:	6803      	ldr	r3, [r0, #0]
 800e320:	4acc      	ldr	r2, [pc, #816]	; (800e654 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d100      	bne.n	800e328 <RemapAndLinkDMAtoUARTTx+0xc>
 800e326:	e0ca      	b.n	800e4be <RemapAndLinkDMAtoUARTTx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800e328:	4aca      	ldr	r2, [pc, #808]	; (800e654 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d100      	bne.n	800e330 <RemapAndLinkDMAtoUARTTx+0x14>
 800e32e:	e0d8      	b.n	800e4e2 <RemapAndLinkDMAtoUARTTx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800e330:	4ac8      	ldr	r2, [pc, #800]	; (800e654 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d100      	bne.n	800e338 <RemapAndLinkDMAtoUARTTx+0x1c>
 800e336:	e0e5      	b.n	800e504 <RemapAndLinkDMAtoUARTTx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800e338:	4ac6      	ldr	r2, [pc, #792]	; (800e654 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d100      	bne.n	800e340 <RemapAndLinkDMAtoUARTTx+0x24>
 800e33e:	e0f2      	b.n	800e526 <RemapAndLinkDMAtoUARTTx+0x20a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800e340:	4ac4      	ldr	r2, [pc, #784]	; (800e654 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d100      	bne.n	800e348 <RemapAndLinkDMAtoUARTTx+0x2c>
 800e346:	e0fe      	b.n	800e546 <RemapAndLinkDMAtoUARTTx+0x22a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800e348:	4ac2      	ldr	r2, [pc, #776]	; (800e654 <RemapAndLinkDMAtoUARTTx+0x338>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d100      	bne.n	800e350 <RemapAndLinkDMAtoUARTTx+0x34>
 800e34e:	e10b      	b.n	800e568 <RemapAndLinkDMAtoUARTTx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800e350:	4ac1      	ldr	r2, [pc, #772]	; (800e658 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d100      	bne.n	800e358 <RemapAndLinkDMAtoUARTTx+0x3c>
 800e356:	e118      	b.n	800e58a <RemapAndLinkDMAtoUARTTx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800e358:	4abf      	ldr	r2, [pc, #764]	; (800e658 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d100      	bne.n	800e360 <RemapAndLinkDMAtoUARTTx+0x44>
 800e35e:	e124      	b.n	800e5aa <RemapAndLinkDMAtoUARTTx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800e360:	4abd      	ldr	r2, [pc, #756]	; (800e658 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d100      	bne.n	800e368 <RemapAndLinkDMAtoUARTTx+0x4c>
 800e366:	e131      	b.n	800e5cc <RemapAndLinkDMAtoUARTTx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800e368:	4abb      	ldr	r2, [pc, #748]	; (800e658 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d100      	bne.n	800e370 <RemapAndLinkDMAtoUARTTx+0x54>
 800e36e:	e13e      	b.n	800e5ee <RemapAndLinkDMAtoUARTTx+0x2d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800e370:	4ab9      	ldr	r2, [pc, #740]	; (800e658 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d100      	bne.n	800e378 <RemapAndLinkDMAtoUARTTx+0x5c>
 800e376:	e14a      	b.n	800e60e <RemapAndLinkDMAtoUARTTx+0x2f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800e378:	4ab7      	ldr	r2, [pc, #732]	; (800e658 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d100      	bne.n	800e380 <RemapAndLinkDMAtoUARTTx+0x64>
 800e37e:	e157      	b.n	800e630 <RemapAndLinkDMAtoUARTTx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800e380:	4ab6      	ldr	r2, [pc, #728]	; (800e65c <RemapAndLinkDMAtoUARTTx+0x340>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d100      	bne.n	800e388 <RemapAndLinkDMAtoUARTTx+0x6c>
 800e386:	e18b      	b.n	800e6a0 <RemapAndLinkDMAtoUARTTx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800e388:	4ab4      	ldr	r2, [pc, #720]	; (800e65c <RemapAndLinkDMAtoUARTTx+0x340>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d100      	bne.n	800e390 <RemapAndLinkDMAtoUARTTx+0x74>
 800e38e:	e197      	b.n	800e6c0 <RemapAndLinkDMAtoUARTTx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800e390:	4ab2      	ldr	r2, [pc, #712]	; (800e65c <RemapAndLinkDMAtoUARTTx+0x340>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d100      	bne.n	800e398 <RemapAndLinkDMAtoUARTTx+0x7c>
 800e396:	e1a4      	b.n	800e6e2 <RemapAndLinkDMAtoUARTTx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800e398:	4ab0      	ldr	r2, [pc, #704]	; (800e65c <RemapAndLinkDMAtoUARTTx+0x340>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d100      	bne.n	800e3a0 <RemapAndLinkDMAtoUARTTx+0x84>
 800e39e:	e1b1      	b.n	800e704 <RemapAndLinkDMAtoUARTTx+0x3e8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800e3a0:	4aae      	ldr	r2, [pc, #696]	; (800e65c <RemapAndLinkDMAtoUARTTx+0x340>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d100      	bne.n	800e3a8 <RemapAndLinkDMAtoUARTTx+0x8c>
 800e3a6:	e1bd      	b.n	800e724 <RemapAndLinkDMAtoUARTTx+0x408>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800e3a8:	4aac      	ldr	r2, [pc, #688]	; (800e65c <RemapAndLinkDMAtoUARTTx+0x340>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d100      	bne.n	800e3b0 <RemapAndLinkDMAtoUARTTx+0x94>
 800e3ae:	e1ca      	b.n	800e746 <RemapAndLinkDMAtoUARTTx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800e3b0:	4aab      	ldr	r2, [pc, #684]	; (800e660 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d100      	bne.n	800e3b8 <RemapAndLinkDMAtoUARTTx+0x9c>
 800e3b6:	e1d7      	b.n	800e768 <RemapAndLinkDMAtoUARTTx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800e3b8:	4aa9      	ldr	r2, [pc, #676]	; (800e660 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d100      	bne.n	800e3c0 <RemapAndLinkDMAtoUARTTx+0xa4>
 800e3be:	e1e3      	b.n	800e788 <RemapAndLinkDMAtoUARTTx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800e3c0:	4aa7      	ldr	r2, [pc, #668]	; (800e660 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d100      	bne.n	800e3c8 <RemapAndLinkDMAtoUARTTx+0xac>
 800e3c6:	e1f0      	b.n	800e7aa <RemapAndLinkDMAtoUARTTx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800e3c8:	4aa5      	ldr	r2, [pc, #660]	; (800e660 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d100      	bne.n	800e3d0 <RemapAndLinkDMAtoUARTTx+0xb4>
 800e3ce:	e1fd      	b.n	800e7cc <RemapAndLinkDMAtoUARTTx+0x4b0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800e3d0:	4aa3      	ldr	r2, [pc, #652]	; (800e660 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d100      	bne.n	800e3d8 <RemapAndLinkDMAtoUARTTx+0xbc>
 800e3d6:	e209      	b.n	800e7ec <RemapAndLinkDMAtoUARTTx+0x4d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800e3d8:	4aa1      	ldr	r2, [pc, #644]	; (800e660 <RemapAndLinkDMAtoUARTTx+0x344>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d100      	bne.n	800e3e0 <RemapAndLinkDMAtoUARTTx+0xc4>
 800e3de:	e216      	b.n	800e80e <RemapAndLinkDMAtoUARTTx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800e3e0:	4aa0      	ldr	r2, [pc, #640]	; (800e664 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d100      	bne.n	800e3e8 <RemapAndLinkDMAtoUARTTx+0xcc>
 800e3e6:	e223      	b.n	800e830 <RemapAndLinkDMAtoUARTTx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800e3e8:	4a9e      	ldr	r2, [pc, #632]	; (800e664 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d100      	bne.n	800e3f0 <RemapAndLinkDMAtoUARTTx+0xd4>
 800e3ee:	e22f      	b.n	800e850 <RemapAndLinkDMAtoUARTTx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800e3f0:	4a9c      	ldr	r2, [pc, #624]	; (800e664 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d100      	bne.n	800e3f8 <RemapAndLinkDMAtoUARTTx+0xdc>
 800e3f6:	e23c      	b.n	800e872 <RemapAndLinkDMAtoUARTTx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800e3f8:	4a9a      	ldr	r2, [pc, #616]	; (800e664 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d100      	bne.n	800e400 <RemapAndLinkDMAtoUARTTx+0xe4>
 800e3fe:	e249      	b.n	800e894 <RemapAndLinkDMAtoUARTTx+0x578>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800e400:	4a98      	ldr	r2, [pc, #608]	; (800e664 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d100      	bne.n	800e408 <RemapAndLinkDMAtoUARTTx+0xec>
 800e406:	e255      	b.n	800e8b4 <RemapAndLinkDMAtoUARTTx+0x598>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800e408:	4a96      	ldr	r2, [pc, #600]	; (800e664 <RemapAndLinkDMAtoUARTTx+0x348>)
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d100      	bne.n	800e410 <RemapAndLinkDMAtoUARTTx+0xf4>
 800e40e:	e262      	b.n	800e8d6 <RemapAndLinkDMAtoUARTTx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800e410:	4a95      	ldr	r2, [pc, #596]	; (800e668 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e412:	4293      	cmp	r3, r2
 800e414:	d100      	bne.n	800e418 <RemapAndLinkDMAtoUARTTx+0xfc>
 800e416:	e26f      	b.n	800e8f8 <RemapAndLinkDMAtoUARTTx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800e418:	4a93      	ldr	r2, [pc, #588]	; (800e668 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d100      	bne.n	800e420 <RemapAndLinkDMAtoUARTTx+0x104>
 800e41e:	e27b      	b.n	800e918 <RemapAndLinkDMAtoUARTTx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800e420:	4a91      	ldr	r2, [pc, #580]	; (800e668 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d100      	bne.n	800e428 <RemapAndLinkDMAtoUARTTx+0x10c>
 800e426:	e288      	b.n	800e93a <RemapAndLinkDMAtoUARTTx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800e428:	4a8f      	ldr	r2, [pc, #572]	; (800e668 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d100      	bne.n	800e430 <RemapAndLinkDMAtoUARTTx+0x114>
 800e42e:	e295      	b.n	800e95c <RemapAndLinkDMAtoUARTTx+0x640>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800e430:	4a8d      	ldr	r2, [pc, #564]	; (800e668 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d100      	bne.n	800e438 <RemapAndLinkDMAtoUARTTx+0x11c>
 800e436:	e2a1      	b.n	800e97c <RemapAndLinkDMAtoUARTTx+0x660>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800e438:	4a8b      	ldr	r2, [pc, #556]	; (800e668 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d100      	bne.n	800e440 <RemapAndLinkDMAtoUARTTx+0x124>
 800e43e:	e2ae      	b.n	800e99e <RemapAndLinkDMAtoUARTTx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800e440:	4a8a      	ldr	r2, [pc, #552]	; (800e66c <RemapAndLinkDMAtoUARTTx+0x350>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d100      	bne.n	800e448 <RemapAndLinkDMAtoUARTTx+0x12c>
 800e446:	e2bb      	b.n	800e9c0 <RemapAndLinkDMAtoUARTTx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800e448:	4a88      	ldr	r2, [pc, #544]	; (800e66c <RemapAndLinkDMAtoUARTTx+0x350>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d100      	bne.n	800e450 <RemapAndLinkDMAtoUARTTx+0x134>
 800e44e:	e2c7      	b.n	800e9e0 <RemapAndLinkDMAtoUARTTx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800e450:	4a86      	ldr	r2, [pc, #536]	; (800e66c <RemapAndLinkDMAtoUARTTx+0x350>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d100      	bne.n	800e458 <RemapAndLinkDMAtoUARTTx+0x13c>
 800e456:	e2d4      	b.n	800ea02 <RemapAndLinkDMAtoUARTTx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800e458:	4a84      	ldr	r2, [pc, #528]	; (800e66c <RemapAndLinkDMAtoUARTTx+0x350>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d100      	bne.n	800e460 <RemapAndLinkDMAtoUARTTx+0x144>
 800e45e:	e2f7      	b.n	800ea50 <RemapAndLinkDMAtoUARTTx+0x734>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800e460:	4a82      	ldr	r2, [pc, #520]	; (800e66c <RemapAndLinkDMAtoUARTTx+0x350>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d100      	bne.n	800e468 <RemapAndLinkDMAtoUARTTx+0x14c>
 800e466:	e303      	b.n	800ea70 <RemapAndLinkDMAtoUARTTx+0x754>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800e468:	4a80      	ldr	r2, [pc, #512]	; (800e66c <RemapAndLinkDMAtoUARTTx+0x350>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d100      	bne.n	800e470 <RemapAndLinkDMAtoUARTTx+0x154>
 800e46e:	e310      	b.n	800ea92 <RemapAndLinkDMAtoUARTTx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800e470:	4a7f      	ldr	r2, [pc, #508]	; (800e670 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d100      	bne.n	800e478 <RemapAndLinkDMAtoUARTTx+0x15c>
 800e476:	e31d      	b.n	800eab4 <RemapAndLinkDMAtoUARTTx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800e478:	4a7d      	ldr	r2, [pc, #500]	; (800e670 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d100      	bne.n	800e480 <RemapAndLinkDMAtoUARTTx+0x164>
 800e47e:	e328      	b.n	800ead2 <RemapAndLinkDMAtoUARTTx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800e480:	4a7b      	ldr	r2, [pc, #492]	; (800e670 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d100      	bne.n	800e488 <RemapAndLinkDMAtoUARTTx+0x16c>
 800e486:	e335      	b.n	800eaf4 <RemapAndLinkDMAtoUARTTx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800e488:	4a79      	ldr	r2, [pc, #484]	; (800e670 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d100      	bne.n	800e490 <RemapAndLinkDMAtoUARTTx+0x174>
 800e48e:	e342      	b.n	800eb16 <RemapAndLinkDMAtoUARTTx+0x7fa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800e490:	4a77      	ldr	r2, [pc, #476]	; (800e670 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d100      	bne.n	800e498 <RemapAndLinkDMAtoUARTTx+0x17c>
 800e496:	e34d      	b.n	800eb34 <RemapAndLinkDMAtoUARTTx+0x818>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800e498:	4a75      	ldr	r2, [pc, #468]	; (800e670 <RemapAndLinkDMAtoUARTTx+0x354>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d11e      	bne.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
 800e49e:	4b75      	ldr	r3, [pc, #468]	; (800e674 <RemapAndLinkDMAtoUARTTx+0x358>)
 800e4a0:	680a      	ldr	r2, [r1, #0]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d11a      	bne.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800e4a6:	4a74      	ldr	r2, [pc, #464]	; (800e678 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e4a8:	23a8      	movs	r3, #168	; 0xa8
 800e4aa:	58d4      	ldr	r4, [r2, r3]
 800e4ac:	4d73      	ldr	r5, [pc, #460]	; (800e67c <RemapAndLinkDMAtoUARTTx+0x360>)
 800e4ae:	402c      	ands	r4, r5
 800e4b0:	50d4      	str	r4, [r2, r3]
 800e4b2:	58d5      	ldr	r5, [r2, r3]
 800e4b4:	24f0      	movs	r4, #240	; 0xf0
 800e4b6:	0324      	lsls	r4, r4, #12
 800e4b8:	432c      	orrs	r4, r5
 800e4ba:	50d4      	str	r4, [r2, r3]
 800e4bc:	e00e      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800e4be:	4a70      	ldr	r2, [pc, #448]	; (800e680 <RemapAndLinkDMAtoUARTTx+0x364>)
 800e4c0:	680c      	ldr	r4, [r1, #0]
 800e4c2:	4294      	cmp	r4, r2
 800e4c4:	d000      	beq.n	800e4c8 <RemapAndLinkDMAtoUARTTx+0x1ac>
 800e4c6:	e72f      	b.n	800e328 <RemapAndLinkDMAtoUARTTx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800e4c8:	4a6e      	ldr	r2, [pc, #440]	; (800e684 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e4ca:	23a8      	movs	r3, #168	; 0xa8
 800e4cc:	58d4      	ldr	r4, [r2, r3]
 800e4ce:	25f0      	movs	r5, #240	; 0xf0
 800e4d0:	43ac      	bics	r4, r5
 800e4d2:	50d4      	str	r4, [r2, r3]
 800e4d4:	58d4      	ldr	r4, [r2, r3]
 800e4d6:	3d70      	subs	r5, #112	; 0x70
 800e4d8:	432c      	orrs	r4, r5
 800e4da:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800e4dc:	6601      	str	r1, [r0, #96]	; 0x60
 800e4de:	6248      	str	r0, [r1, #36]	; 0x24
}
 800e4e0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800e4e2:	4a69      	ldr	r2, [pc, #420]	; (800e688 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800e4e4:	680c      	ldr	r4, [r1, #0]
 800e4e6:	4294      	cmp	r4, r2
 800e4e8:	d000      	beq.n	800e4ec <RemapAndLinkDMAtoUARTTx+0x1d0>
 800e4ea:	e721      	b.n	800e330 <RemapAndLinkDMAtoUARTTx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800e4ec:	4a65      	ldr	r2, [pc, #404]	; (800e684 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e4ee:	23a8      	movs	r3, #168	; 0xa8
 800e4f0:	58d4      	ldr	r4, [r2, r3]
 800e4f2:	4d66      	ldr	r5, [pc, #408]	; (800e68c <RemapAndLinkDMAtoUARTTx+0x370>)
 800e4f4:	402c      	ands	r4, r5
 800e4f6:	50d4      	str	r4, [r2, r3]
 800e4f8:	58d5      	ldr	r5, [r2, r3]
 800e4fa:	2480      	movs	r4, #128	; 0x80
 800e4fc:	0224      	lsls	r4, r4, #8
 800e4fe:	432c      	orrs	r4, r5
 800e500:	50d4      	str	r4, [r2, r3]
 800e502:	e7eb      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800e504:	4a62      	ldr	r2, [pc, #392]	; (800e690 <RemapAndLinkDMAtoUARTTx+0x374>)
 800e506:	680c      	ldr	r4, [r1, #0]
 800e508:	4294      	cmp	r4, r2
 800e50a:	d000      	beq.n	800e50e <RemapAndLinkDMAtoUARTTx+0x1f2>
 800e50c:	e714      	b.n	800e338 <RemapAndLinkDMAtoUARTTx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800e50e:	4a5d      	ldr	r2, [pc, #372]	; (800e684 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e510:	23a8      	movs	r3, #168	; 0xa8
 800e512:	58d4      	ldr	r4, [r2, r3]
 800e514:	4d5f      	ldr	r5, [pc, #380]	; (800e694 <RemapAndLinkDMAtoUARTTx+0x378>)
 800e516:	402c      	ands	r4, r5
 800e518:	50d4      	str	r4, [r2, r3]
 800e51a:	58d5      	ldr	r5, [r2, r3]
 800e51c:	2480      	movs	r4, #128	; 0x80
 800e51e:	0524      	lsls	r4, r4, #20
 800e520:	432c      	orrs	r4, r5
 800e522:	50d4      	str	r4, [r2, r3]
 800e524:	e7da      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800e526:	4a5c      	ldr	r2, [pc, #368]	; (800e698 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800e528:	680c      	ldr	r4, [r1, #0]
 800e52a:	4294      	cmp	r4, r2
 800e52c:	d000      	beq.n	800e530 <RemapAndLinkDMAtoUARTTx+0x214>
 800e52e:	e707      	b.n	800e340 <RemapAndLinkDMAtoUARTTx+0x24>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800e530:	4a51      	ldr	r2, [pc, #324]	; (800e678 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e532:	23a8      	movs	r3, #168	; 0xa8
 800e534:	58d4      	ldr	r4, [r2, r3]
 800e536:	250f      	movs	r5, #15
 800e538:	43ac      	bics	r4, r5
 800e53a:	50d4      	str	r4, [r2, r3]
 800e53c:	58d4      	ldr	r4, [r2, r3]
 800e53e:	3d07      	subs	r5, #7
 800e540:	432c      	orrs	r4, r5
 800e542:	50d4      	str	r4, [r2, r3]
 800e544:	e7ca      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800e546:	4a55      	ldr	r2, [pc, #340]	; (800e69c <RemapAndLinkDMAtoUARTTx+0x380>)
 800e548:	680c      	ldr	r4, [r1, #0]
 800e54a:	4294      	cmp	r4, r2
 800e54c:	d000      	beq.n	800e550 <RemapAndLinkDMAtoUARTTx+0x234>
 800e54e:	e6fb      	b.n	800e348 <RemapAndLinkDMAtoUARTTx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800e550:	4a49      	ldr	r2, [pc, #292]	; (800e678 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e552:	23a8      	movs	r3, #168	; 0xa8
 800e554:	58d4      	ldr	r4, [r2, r3]
 800e556:	4d4d      	ldr	r5, [pc, #308]	; (800e68c <RemapAndLinkDMAtoUARTTx+0x370>)
 800e558:	402c      	ands	r4, r5
 800e55a:	50d4      	str	r4, [r2, r3]
 800e55c:	58d5      	ldr	r5, [r2, r3]
 800e55e:	2480      	movs	r4, #128	; 0x80
 800e560:	0224      	lsls	r4, r4, #8
 800e562:	432c      	orrs	r4, r5
 800e564:	50d4      	str	r4, [r2, r3]
 800e566:	e7b9      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800e568:	4a42      	ldr	r2, [pc, #264]	; (800e674 <RemapAndLinkDMAtoUARTTx+0x358>)
 800e56a:	680c      	ldr	r4, [r1, #0]
 800e56c:	4294      	cmp	r4, r2
 800e56e:	d000      	beq.n	800e572 <RemapAndLinkDMAtoUARTTx+0x256>
 800e570:	e6ee      	b.n	800e350 <RemapAndLinkDMAtoUARTTx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800e572:	4a41      	ldr	r2, [pc, #260]	; (800e678 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e574:	23a8      	movs	r3, #168	; 0xa8
 800e576:	58d4      	ldr	r4, [r2, r3]
 800e578:	4d40      	ldr	r5, [pc, #256]	; (800e67c <RemapAndLinkDMAtoUARTTx+0x360>)
 800e57a:	402c      	ands	r4, r5
 800e57c:	50d4      	str	r4, [r2, r3]
 800e57e:	58d5      	ldr	r5, [r2, r3]
 800e580:	2480      	movs	r4, #128	; 0x80
 800e582:	0324      	lsls	r4, r4, #12
 800e584:	432c      	orrs	r4, r5
 800e586:	50d4      	str	r4, [r2, r3]
 800e588:	e7a8      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800e58a:	4a3d      	ldr	r2, [pc, #244]	; (800e680 <RemapAndLinkDMAtoUARTTx+0x364>)
 800e58c:	680c      	ldr	r4, [r1, #0]
 800e58e:	4294      	cmp	r4, r2
 800e590:	d000      	beq.n	800e594 <RemapAndLinkDMAtoUARTTx+0x278>
 800e592:	e6e1      	b.n	800e358 <RemapAndLinkDMAtoUARTTx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800e594:	4a3b      	ldr	r2, [pc, #236]	; (800e684 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e596:	23a8      	movs	r3, #168	; 0xa8
 800e598:	58d4      	ldr	r4, [r2, r3]
 800e59a:	25f0      	movs	r5, #240	; 0xf0
 800e59c:	43ac      	bics	r4, r5
 800e59e:	50d4      	str	r4, [r2, r3]
 800e5a0:	58d4      	ldr	r4, [r2, r3]
 800e5a2:	3d60      	subs	r5, #96	; 0x60
 800e5a4:	432c      	orrs	r4, r5
 800e5a6:	50d4      	str	r4, [r2, r3]
 800e5a8:	e798      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800e5aa:	4a37      	ldr	r2, [pc, #220]	; (800e688 <RemapAndLinkDMAtoUARTTx+0x36c>)
 800e5ac:	680c      	ldr	r4, [r1, #0]
 800e5ae:	4294      	cmp	r4, r2
 800e5b0:	d000      	beq.n	800e5b4 <RemapAndLinkDMAtoUARTTx+0x298>
 800e5b2:	e6d5      	b.n	800e360 <RemapAndLinkDMAtoUARTTx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800e5b4:	4a33      	ldr	r2, [pc, #204]	; (800e684 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e5b6:	23a8      	movs	r3, #168	; 0xa8
 800e5b8:	58d4      	ldr	r4, [r2, r3]
 800e5ba:	4d34      	ldr	r5, [pc, #208]	; (800e68c <RemapAndLinkDMAtoUARTTx+0x370>)
 800e5bc:	402c      	ands	r4, r5
 800e5be:	50d4      	str	r4, [r2, r3]
 800e5c0:	58d5      	ldr	r5, [r2, r3]
 800e5c2:	2490      	movs	r4, #144	; 0x90
 800e5c4:	0224      	lsls	r4, r4, #8
 800e5c6:	432c      	orrs	r4, r5
 800e5c8:	50d4      	str	r4, [r2, r3]
 800e5ca:	e787      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800e5cc:	4a30      	ldr	r2, [pc, #192]	; (800e690 <RemapAndLinkDMAtoUARTTx+0x374>)
 800e5ce:	680c      	ldr	r4, [r1, #0]
 800e5d0:	4294      	cmp	r4, r2
 800e5d2:	d000      	beq.n	800e5d6 <RemapAndLinkDMAtoUARTTx+0x2ba>
 800e5d4:	e6c8      	b.n	800e368 <RemapAndLinkDMAtoUARTTx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800e5d6:	4a2b      	ldr	r2, [pc, #172]	; (800e684 <RemapAndLinkDMAtoUARTTx+0x368>)
 800e5d8:	23a8      	movs	r3, #168	; 0xa8
 800e5da:	58d4      	ldr	r4, [r2, r3]
 800e5dc:	4d2d      	ldr	r5, [pc, #180]	; (800e694 <RemapAndLinkDMAtoUARTTx+0x378>)
 800e5de:	402c      	ands	r4, r5
 800e5e0:	50d4      	str	r4, [r2, r3]
 800e5e2:	58d5      	ldr	r5, [r2, r3]
 800e5e4:	2490      	movs	r4, #144	; 0x90
 800e5e6:	0524      	lsls	r4, r4, #20
 800e5e8:	432c      	orrs	r4, r5
 800e5ea:	50d4      	str	r4, [r2, r3]
 800e5ec:	e776      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800e5ee:	4a2a      	ldr	r2, [pc, #168]	; (800e698 <RemapAndLinkDMAtoUARTTx+0x37c>)
 800e5f0:	680c      	ldr	r4, [r1, #0]
 800e5f2:	4294      	cmp	r4, r2
 800e5f4:	d000      	beq.n	800e5f8 <RemapAndLinkDMAtoUARTTx+0x2dc>
 800e5f6:	e6bb      	b.n	800e370 <RemapAndLinkDMAtoUARTTx+0x54>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800e5f8:	4a1f      	ldr	r2, [pc, #124]	; (800e678 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e5fa:	23a8      	movs	r3, #168	; 0xa8
 800e5fc:	58d4      	ldr	r4, [r2, r3]
 800e5fe:	250f      	movs	r5, #15
 800e600:	43ac      	bics	r4, r5
 800e602:	50d4      	str	r4, [r2, r3]
 800e604:	58d4      	ldr	r4, [r2, r3]
 800e606:	3d06      	subs	r5, #6
 800e608:	432c      	orrs	r4, r5
 800e60a:	50d4      	str	r4, [r2, r3]
 800e60c:	e766      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800e60e:	4a23      	ldr	r2, [pc, #140]	; (800e69c <RemapAndLinkDMAtoUARTTx+0x380>)
 800e610:	680c      	ldr	r4, [r1, #0]
 800e612:	4294      	cmp	r4, r2
 800e614:	d000      	beq.n	800e618 <RemapAndLinkDMAtoUARTTx+0x2fc>
 800e616:	e6af      	b.n	800e378 <RemapAndLinkDMAtoUARTTx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800e618:	4a17      	ldr	r2, [pc, #92]	; (800e678 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e61a:	23a8      	movs	r3, #168	; 0xa8
 800e61c:	58d4      	ldr	r4, [r2, r3]
 800e61e:	4d1b      	ldr	r5, [pc, #108]	; (800e68c <RemapAndLinkDMAtoUARTTx+0x370>)
 800e620:	402c      	ands	r4, r5
 800e622:	50d4      	str	r4, [r2, r3]
 800e624:	58d5      	ldr	r5, [r2, r3]
 800e626:	2490      	movs	r4, #144	; 0x90
 800e628:	0224      	lsls	r4, r4, #8
 800e62a:	432c      	orrs	r4, r5
 800e62c:	50d4      	str	r4, [r2, r3]
 800e62e:	e755      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800e630:	4a10      	ldr	r2, [pc, #64]	; (800e674 <RemapAndLinkDMAtoUARTTx+0x358>)
 800e632:	680c      	ldr	r4, [r1, #0]
 800e634:	4294      	cmp	r4, r2
 800e636:	d000      	beq.n	800e63a <RemapAndLinkDMAtoUARTTx+0x31e>
 800e638:	e6a2      	b.n	800e380 <RemapAndLinkDMAtoUARTTx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800e63a:	4a0f      	ldr	r2, [pc, #60]	; (800e678 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800e63c:	23a8      	movs	r3, #168	; 0xa8
 800e63e:	58d4      	ldr	r4, [r2, r3]
 800e640:	4d0e      	ldr	r5, [pc, #56]	; (800e67c <RemapAndLinkDMAtoUARTTx+0x360>)
 800e642:	402c      	ands	r4, r5
 800e644:	50d4      	str	r4, [r2, r3]
 800e646:	58d5      	ldr	r5, [r2, r3]
 800e648:	2490      	movs	r4, #144	; 0x90
 800e64a:	0324      	lsls	r4, r4, #12
 800e64c:	432c      	orrs	r4, r5
 800e64e:	50d4      	str	r4, [r2, r3]
 800e650:	e744      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
 800e652:	46c0      	nop			; (mov r8, r8)
 800e654:	40013800 	.word	0x40013800
 800e658:	40004400 	.word	0x40004400
 800e65c:	40004800 	.word	0x40004800
 800e660:	40004c00 	.word	0x40004c00
 800e664:	40005000 	.word	0x40005000
 800e668:	40011400 	.word	0x40011400
 800e66c:	40011800 	.word	0x40011800
 800e670:	40011c00 	.word	0x40011c00
 800e674:	40020458 	.word	0x40020458
 800e678:	40020400 	.word	0x40020400
 800e67c:	fff0ffff 	.word	0xfff0ffff
 800e680:	4002001c 	.word	0x4002001c
 800e684:	40020000 	.word	0x40020000
 800e688:	40020044 	.word	0x40020044
 800e68c:	ffff0fff 	.word	0xffff0fff
 800e690:	40020080 	.word	0x40020080
 800e694:	f0ffffff 	.word	0xf0ffffff
 800e698:	40020408 	.word	0x40020408
 800e69c:	40020444 	.word	0x40020444
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800e6a0:	4ae0      	ldr	r2, [pc, #896]	; (800ea24 <RemapAndLinkDMAtoUARTTx+0x708>)
 800e6a2:	680c      	ldr	r4, [r1, #0]
 800e6a4:	4294      	cmp	r4, r2
 800e6a6:	d000      	beq.n	800e6aa <RemapAndLinkDMAtoUARTTx+0x38e>
 800e6a8:	e66e      	b.n	800e388 <RemapAndLinkDMAtoUARTTx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800e6aa:	4adf      	ldr	r2, [pc, #892]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e6ac:	23a8      	movs	r3, #168	; 0xa8
 800e6ae:	58d4      	ldr	r4, [r2, r3]
 800e6b0:	25f0      	movs	r5, #240	; 0xf0
 800e6b2:	43ac      	bics	r4, r5
 800e6b4:	50d4      	str	r4, [r2, r3]
 800e6b6:	58d4      	ldr	r4, [r2, r3]
 800e6b8:	3d50      	subs	r5, #80	; 0x50
 800e6ba:	432c      	orrs	r4, r5
 800e6bc:	50d4      	str	r4, [r2, r3]
 800e6be:	e70d      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800e6c0:	4ada      	ldr	r2, [pc, #872]	; (800ea2c <RemapAndLinkDMAtoUARTTx+0x710>)
 800e6c2:	680c      	ldr	r4, [r1, #0]
 800e6c4:	4294      	cmp	r4, r2
 800e6c6:	d000      	beq.n	800e6ca <RemapAndLinkDMAtoUARTTx+0x3ae>
 800e6c8:	e662      	b.n	800e390 <RemapAndLinkDMAtoUARTTx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800e6ca:	4ad7      	ldr	r2, [pc, #860]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e6cc:	23a8      	movs	r3, #168	; 0xa8
 800e6ce:	58d4      	ldr	r4, [r2, r3]
 800e6d0:	4dd7      	ldr	r5, [pc, #860]	; (800ea30 <RemapAndLinkDMAtoUARTTx+0x714>)
 800e6d2:	402c      	ands	r4, r5
 800e6d4:	50d4      	str	r4, [r2, r3]
 800e6d6:	58d5      	ldr	r5, [r2, r3]
 800e6d8:	24a0      	movs	r4, #160	; 0xa0
 800e6da:	0224      	lsls	r4, r4, #8
 800e6dc:	432c      	orrs	r4, r5
 800e6de:	50d4      	str	r4, [r2, r3]
 800e6e0:	e6fc      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800e6e2:	4ad4      	ldr	r2, [pc, #848]	; (800ea34 <RemapAndLinkDMAtoUARTTx+0x718>)
 800e6e4:	680c      	ldr	r4, [r1, #0]
 800e6e6:	4294      	cmp	r4, r2
 800e6e8:	d000      	beq.n	800e6ec <RemapAndLinkDMAtoUARTTx+0x3d0>
 800e6ea:	e655      	b.n	800e398 <RemapAndLinkDMAtoUARTTx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800e6ec:	4ace      	ldr	r2, [pc, #824]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e6ee:	23a8      	movs	r3, #168	; 0xa8
 800e6f0:	58d4      	ldr	r4, [r2, r3]
 800e6f2:	4dd1      	ldr	r5, [pc, #836]	; (800ea38 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800e6f4:	402c      	ands	r4, r5
 800e6f6:	50d4      	str	r4, [r2, r3]
 800e6f8:	58d5      	ldr	r5, [r2, r3]
 800e6fa:	24a0      	movs	r4, #160	; 0xa0
 800e6fc:	0524      	lsls	r4, r4, #20
 800e6fe:	432c      	orrs	r4, r5
 800e700:	50d4      	str	r4, [r2, r3]
 800e702:	e6eb      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800e704:	4acd      	ldr	r2, [pc, #820]	; (800ea3c <RemapAndLinkDMAtoUARTTx+0x720>)
 800e706:	680c      	ldr	r4, [r1, #0]
 800e708:	4294      	cmp	r4, r2
 800e70a:	d000      	beq.n	800e70e <RemapAndLinkDMAtoUARTTx+0x3f2>
 800e70c:	e648      	b.n	800e3a0 <RemapAndLinkDMAtoUARTTx+0x84>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800e70e:	4acc      	ldr	r2, [pc, #816]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e710:	23a8      	movs	r3, #168	; 0xa8
 800e712:	58d4      	ldr	r4, [r2, r3]
 800e714:	250f      	movs	r5, #15
 800e716:	43ac      	bics	r4, r5
 800e718:	50d4      	str	r4, [r2, r3]
 800e71a:	58d4      	ldr	r4, [r2, r3]
 800e71c:	3d05      	subs	r5, #5
 800e71e:	432c      	orrs	r4, r5
 800e720:	50d4      	str	r4, [r2, r3]
 800e722:	e6db      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800e724:	4ac7      	ldr	r2, [pc, #796]	; (800ea44 <RemapAndLinkDMAtoUARTTx+0x728>)
 800e726:	680c      	ldr	r4, [r1, #0]
 800e728:	4294      	cmp	r4, r2
 800e72a:	d000      	beq.n	800e72e <RemapAndLinkDMAtoUARTTx+0x412>
 800e72c:	e63c      	b.n	800e3a8 <RemapAndLinkDMAtoUARTTx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800e72e:	4ac4      	ldr	r2, [pc, #784]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e730:	23a8      	movs	r3, #168	; 0xa8
 800e732:	58d4      	ldr	r4, [r2, r3]
 800e734:	4dbe      	ldr	r5, [pc, #760]	; (800ea30 <RemapAndLinkDMAtoUARTTx+0x714>)
 800e736:	402c      	ands	r4, r5
 800e738:	50d4      	str	r4, [r2, r3]
 800e73a:	58d5      	ldr	r5, [r2, r3]
 800e73c:	24a0      	movs	r4, #160	; 0xa0
 800e73e:	0224      	lsls	r4, r4, #8
 800e740:	432c      	orrs	r4, r5
 800e742:	50d4      	str	r4, [r2, r3]
 800e744:	e6ca      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800e746:	4ac0      	ldr	r2, [pc, #768]	; (800ea48 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800e748:	680c      	ldr	r4, [r1, #0]
 800e74a:	4294      	cmp	r4, r2
 800e74c:	d000      	beq.n	800e750 <RemapAndLinkDMAtoUARTTx+0x434>
 800e74e:	e62f      	b.n	800e3b0 <RemapAndLinkDMAtoUARTTx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800e750:	4abb      	ldr	r2, [pc, #748]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e752:	23a8      	movs	r3, #168	; 0xa8
 800e754:	58d4      	ldr	r4, [r2, r3]
 800e756:	4dbd      	ldr	r5, [pc, #756]	; (800ea4c <RemapAndLinkDMAtoUARTTx+0x730>)
 800e758:	402c      	ands	r4, r5
 800e75a:	50d4      	str	r4, [r2, r3]
 800e75c:	58d5      	ldr	r5, [r2, r3]
 800e75e:	24a0      	movs	r4, #160	; 0xa0
 800e760:	0324      	lsls	r4, r4, #12
 800e762:	432c      	orrs	r4, r5
 800e764:	50d4      	str	r4, [r2, r3]
 800e766:	e6b9      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800e768:	4aae      	ldr	r2, [pc, #696]	; (800ea24 <RemapAndLinkDMAtoUARTTx+0x708>)
 800e76a:	680c      	ldr	r4, [r1, #0]
 800e76c:	4294      	cmp	r4, r2
 800e76e:	d000      	beq.n	800e772 <RemapAndLinkDMAtoUARTTx+0x456>
 800e770:	e622      	b.n	800e3b8 <RemapAndLinkDMAtoUARTTx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800e772:	4aad      	ldr	r2, [pc, #692]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e774:	23a8      	movs	r3, #168	; 0xa8
 800e776:	58d4      	ldr	r4, [r2, r3]
 800e778:	25f0      	movs	r5, #240	; 0xf0
 800e77a:	43ac      	bics	r4, r5
 800e77c:	50d4      	str	r4, [r2, r3]
 800e77e:	58d4      	ldr	r4, [r2, r3]
 800e780:	3d40      	subs	r5, #64	; 0x40
 800e782:	432c      	orrs	r4, r5
 800e784:	50d4      	str	r4, [r2, r3]
 800e786:	e6a9      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800e788:	4aa8      	ldr	r2, [pc, #672]	; (800ea2c <RemapAndLinkDMAtoUARTTx+0x710>)
 800e78a:	680c      	ldr	r4, [r1, #0]
 800e78c:	4294      	cmp	r4, r2
 800e78e:	d000      	beq.n	800e792 <RemapAndLinkDMAtoUARTTx+0x476>
 800e790:	e616      	b.n	800e3c0 <RemapAndLinkDMAtoUARTTx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800e792:	4aa5      	ldr	r2, [pc, #660]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e794:	23a8      	movs	r3, #168	; 0xa8
 800e796:	58d4      	ldr	r4, [r2, r3]
 800e798:	4da5      	ldr	r5, [pc, #660]	; (800ea30 <RemapAndLinkDMAtoUARTTx+0x714>)
 800e79a:	402c      	ands	r4, r5
 800e79c:	50d4      	str	r4, [r2, r3]
 800e79e:	58d5      	ldr	r5, [r2, r3]
 800e7a0:	24b0      	movs	r4, #176	; 0xb0
 800e7a2:	0224      	lsls	r4, r4, #8
 800e7a4:	432c      	orrs	r4, r5
 800e7a6:	50d4      	str	r4, [r2, r3]
 800e7a8:	e698      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800e7aa:	4aa2      	ldr	r2, [pc, #648]	; (800ea34 <RemapAndLinkDMAtoUARTTx+0x718>)
 800e7ac:	680c      	ldr	r4, [r1, #0]
 800e7ae:	4294      	cmp	r4, r2
 800e7b0:	d000      	beq.n	800e7b4 <RemapAndLinkDMAtoUARTTx+0x498>
 800e7b2:	e609      	b.n	800e3c8 <RemapAndLinkDMAtoUARTTx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800e7b4:	4a9c      	ldr	r2, [pc, #624]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e7b6:	23a8      	movs	r3, #168	; 0xa8
 800e7b8:	58d4      	ldr	r4, [r2, r3]
 800e7ba:	4d9f      	ldr	r5, [pc, #636]	; (800ea38 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800e7bc:	402c      	ands	r4, r5
 800e7be:	50d4      	str	r4, [r2, r3]
 800e7c0:	58d5      	ldr	r5, [r2, r3]
 800e7c2:	24b0      	movs	r4, #176	; 0xb0
 800e7c4:	0524      	lsls	r4, r4, #20
 800e7c6:	432c      	orrs	r4, r5
 800e7c8:	50d4      	str	r4, [r2, r3]
 800e7ca:	e687      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800e7cc:	4a9b      	ldr	r2, [pc, #620]	; (800ea3c <RemapAndLinkDMAtoUARTTx+0x720>)
 800e7ce:	680c      	ldr	r4, [r1, #0]
 800e7d0:	4294      	cmp	r4, r2
 800e7d2:	d000      	beq.n	800e7d6 <RemapAndLinkDMAtoUARTTx+0x4ba>
 800e7d4:	e5fc      	b.n	800e3d0 <RemapAndLinkDMAtoUARTTx+0xb4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800e7d6:	4a9a      	ldr	r2, [pc, #616]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e7d8:	23a8      	movs	r3, #168	; 0xa8
 800e7da:	58d4      	ldr	r4, [r2, r3]
 800e7dc:	250f      	movs	r5, #15
 800e7de:	43ac      	bics	r4, r5
 800e7e0:	50d4      	str	r4, [r2, r3]
 800e7e2:	58d4      	ldr	r4, [r2, r3]
 800e7e4:	3d04      	subs	r5, #4
 800e7e6:	432c      	orrs	r4, r5
 800e7e8:	50d4      	str	r4, [r2, r3]
 800e7ea:	e677      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800e7ec:	4a95      	ldr	r2, [pc, #596]	; (800ea44 <RemapAndLinkDMAtoUARTTx+0x728>)
 800e7ee:	680c      	ldr	r4, [r1, #0]
 800e7f0:	4294      	cmp	r4, r2
 800e7f2:	d000      	beq.n	800e7f6 <RemapAndLinkDMAtoUARTTx+0x4da>
 800e7f4:	e5f0      	b.n	800e3d8 <RemapAndLinkDMAtoUARTTx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800e7f6:	4a92      	ldr	r2, [pc, #584]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e7f8:	23a8      	movs	r3, #168	; 0xa8
 800e7fa:	58d4      	ldr	r4, [r2, r3]
 800e7fc:	4d8c      	ldr	r5, [pc, #560]	; (800ea30 <RemapAndLinkDMAtoUARTTx+0x714>)
 800e7fe:	402c      	ands	r4, r5
 800e800:	50d4      	str	r4, [r2, r3]
 800e802:	58d5      	ldr	r5, [r2, r3]
 800e804:	24b0      	movs	r4, #176	; 0xb0
 800e806:	0224      	lsls	r4, r4, #8
 800e808:	432c      	orrs	r4, r5
 800e80a:	50d4      	str	r4, [r2, r3]
 800e80c:	e666      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800e80e:	4a8e      	ldr	r2, [pc, #568]	; (800ea48 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800e810:	680c      	ldr	r4, [r1, #0]
 800e812:	4294      	cmp	r4, r2
 800e814:	d000      	beq.n	800e818 <RemapAndLinkDMAtoUARTTx+0x4fc>
 800e816:	e5e3      	b.n	800e3e0 <RemapAndLinkDMAtoUARTTx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800e818:	4a89      	ldr	r2, [pc, #548]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e81a:	23a8      	movs	r3, #168	; 0xa8
 800e81c:	58d4      	ldr	r4, [r2, r3]
 800e81e:	4d8b      	ldr	r5, [pc, #556]	; (800ea4c <RemapAndLinkDMAtoUARTTx+0x730>)
 800e820:	402c      	ands	r4, r5
 800e822:	50d4      	str	r4, [r2, r3]
 800e824:	58d5      	ldr	r5, [r2, r3]
 800e826:	24b0      	movs	r4, #176	; 0xb0
 800e828:	0324      	lsls	r4, r4, #12
 800e82a:	432c      	orrs	r4, r5
 800e82c:	50d4      	str	r4, [r2, r3]
 800e82e:	e655      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800e830:	4a7c      	ldr	r2, [pc, #496]	; (800ea24 <RemapAndLinkDMAtoUARTTx+0x708>)
 800e832:	680c      	ldr	r4, [r1, #0]
 800e834:	4294      	cmp	r4, r2
 800e836:	d000      	beq.n	800e83a <RemapAndLinkDMAtoUARTTx+0x51e>
 800e838:	e5d6      	b.n	800e3e8 <RemapAndLinkDMAtoUARTTx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800e83a:	4a7b      	ldr	r2, [pc, #492]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e83c:	23a8      	movs	r3, #168	; 0xa8
 800e83e:	58d4      	ldr	r4, [r2, r3]
 800e840:	25f0      	movs	r5, #240	; 0xf0
 800e842:	43ac      	bics	r4, r5
 800e844:	50d4      	str	r4, [r2, r3]
 800e846:	58d4      	ldr	r4, [r2, r3]
 800e848:	3d30      	subs	r5, #48	; 0x30
 800e84a:	432c      	orrs	r4, r5
 800e84c:	50d4      	str	r4, [r2, r3]
 800e84e:	e645      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800e850:	4a76      	ldr	r2, [pc, #472]	; (800ea2c <RemapAndLinkDMAtoUARTTx+0x710>)
 800e852:	680c      	ldr	r4, [r1, #0]
 800e854:	4294      	cmp	r4, r2
 800e856:	d000      	beq.n	800e85a <RemapAndLinkDMAtoUARTTx+0x53e>
 800e858:	e5ca      	b.n	800e3f0 <RemapAndLinkDMAtoUARTTx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800e85a:	4a73      	ldr	r2, [pc, #460]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e85c:	23a8      	movs	r3, #168	; 0xa8
 800e85e:	58d4      	ldr	r4, [r2, r3]
 800e860:	4d73      	ldr	r5, [pc, #460]	; (800ea30 <RemapAndLinkDMAtoUARTTx+0x714>)
 800e862:	402c      	ands	r4, r5
 800e864:	50d4      	str	r4, [r2, r3]
 800e866:	58d5      	ldr	r5, [r2, r3]
 800e868:	24c0      	movs	r4, #192	; 0xc0
 800e86a:	0224      	lsls	r4, r4, #8
 800e86c:	432c      	orrs	r4, r5
 800e86e:	50d4      	str	r4, [r2, r3]
 800e870:	e634      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800e872:	4a70      	ldr	r2, [pc, #448]	; (800ea34 <RemapAndLinkDMAtoUARTTx+0x718>)
 800e874:	680c      	ldr	r4, [r1, #0]
 800e876:	4294      	cmp	r4, r2
 800e878:	d000      	beq.n	800e87c <RemapAndLinkDMAtoUARTTx+0x560>
 800e87a:	e5bd      	b.n	800e3f8 <RemapAndLinkDMAtoUARTTx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800e87c:	4a6a      	ldr	r2, [pc, #424]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e87e:	23a8      	movs	r3, #168	; 0xa8
 800e880:	58d4      	ldr	r4, [r2, r3]
 800e882:	4d6d      	ldr	r5, [pc, #436]	; (800ea38 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800e884:	402c      	ands	r4, r5
 800e886:	50d4      	str	r4, [r2, r3]
 800e888:	58d5      	ldr	r5, [r2, r3]
 800e88a:	24c0      	movs	r4, #192	; 0xc0
 800e88c:	0524      	lsls	r4, r4, #20
 800e88e:	432c      	orrs	r4, r5
 800e890:	50d4      	str	r4, [r2, r3]
 800e892:	e623      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800e894:	4a69      	ldr	r2, [pc, #420]	; (800ea3c <RemapAndLinkDMAtoUARTTx+0x720>)
 800e896:	680c      	ldr	r4, [r1, #0]
 800e898:	4294      	cmp	r4, r2
 800e89a:	d000      	beq.n	800e89e <RemapAndLinkDMAtoUARTTx+0x582>
 800e89c:	e5b0      	b.n	800e400 <RemapAndLinkDMAtoUARTTx+0xe4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800e89e:	4a68      	ldr	r2, [pc, #416]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e8a0:	23a8      	movs	r3, #168	; 0xa8
 800e8a2:	58d4      	ldr	r4, [r2, r3]
 800e8a4:	250f      	movs	r5, #15
 800e8a6:	43ac      	bics	r4, r5
 800e8a8:	50d4      	str	r4, [r2, r3]
 800e8aa:	58d4      	ldr	r4, [r2, r3]
 800e8ac:	3d03      	subs	r5, #3
 800e8ae:	432c      	orrs	r4, r5
 800e8b0:	50d4      	str	r4, [r2, r3]
 800e8b2:	e613      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800e8b4:	4a63      	ldr	r2, [pc, #396]	; (800ea44 <RemapAndLinkDMAtoUARTTx+0x728>)
 800e8b6:	680c      	ldr	r4, [r1, #0]
 800e8b8:	4294      	cmp	r4, r2
 800e8ba:	d000      	beq.n	800e8be <RemapAndLinkDMAtoUARTTx+0x5a2>
 800e8bc:	e5a4      	b.n	800e408 <RemapAndLinkDMAtoUARTTx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800e8be:	4a60      	ldr	r2, [pc, #384]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e8c0:	23a8      	movs	r3, #168	; 0xa8
 800e8c2:	58d4      	ldr	r4, [r2, r3]
 800e8c4:	4d5a      	ldr	r5, [pc, #360]	; (800ea30 <RemapAndLinkDMAtoUARTTx+0x714>)
 800e8c6:	402c      	ands	r4, r5
 800e8c8:	50d4      	str	r4, [r2, r3]
 800e8ca:	58d5      	ldr	r5, [r2, r3]
 800e8cc:	24c0      	movs	r4, #192	; 0xc0
 800e8ce:	0224      	lsls	r4, r4, #8
 800e8d0:	432c      	orrs	r4, r5
 800e8d2:	50d4      	str	r4, [r2, r3]
 800e8d4:	e602      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800e8d6:	4a5c      	ldr	r2, [pc, #368]	; (800ea48 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800e8d8:	680c      	ldr	r4, [r1, #0]
 800e8da:	4294      	cmp	r4, r2
 800e8dc:	d000      	beq.n	800e8e0 <RemapAndLinkDMAtoUARTTx+0x5c4>
 800e8de:	e597      	b.n	800e410 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800e8e0:	4a57      	ldr	r2, [pc, #348]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e8e2:	23a8      	movs	r3, #168	; 0xa8
 800e8e4:	58d4      	ldr	r4, [r2, r3]
 800e8e6:	4d59      	ldr	r5, [pc, #356]	; (800ea4c <RemapAndLinkDMAtoUARTTx+0x730>)
 800e8e8:	402c      	ands	r4, r5
 800e8ea:	50d4      	str	r4, [r2, r3]
 800e8ec:	58d5      	ldr	r5, [r2, r3]
 800e8ee:	24c0      	movs	r4, #192	; 0xc0
 800e8f0:	0324      	lsls	r4, r4, #12
 800e8f2:	432c      	orrs	r4, r5
 800e8f4:	50d4      	str	r4, [r2, r3]
 800e8f6:	e5f1      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800e8f8:	4a4a      	ldr	r2, [pc, #296]	; (800ea24 <RemapAndLinkDMAtoUARTTx+0x708>)
 800e8fa:	680c      	ldr	r4, [r1, #0]
 800e8fc:	4294      	cmp	r4, r2
 800e8fe:	d000      	beq.n	800e902 <RemapAndLinkDMAtoUARTTx+0x5e6>
 800e900:	e58a      	b.n	800e418 <RemapAndLinkDMAtoUARTTx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800e902:	4a49      	ldr	r2, [pc, #292]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e904:	23a8      	movs	r3, #168	; 0xa8
 800e906:	58d4      	ldr	r4, [r2, r3]
 800e908:	25f0      	movs	r5, #240	; 0xf0
 800e90a:	43ac      	bics	r4, r5
 800e90c:	50d4      	str	r4, [r2, r3]
 800e90e:	58d4      	ldr	r4, [r2, r3]
 800e910:	3d20      	subs	r5, #32
 800e912:	432c      	orrs	r4, r5
 800e914:	50d4      	str	r4, [r2, r3]
 800e916:	e5e1      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800e918:	4a44      	ldr	r2, [pc, #272]	; (800ea2c <RemapAndLinkDMAtoUARTTx+0x710>)
 800e91a:	680c      	ldr	r4, [r1, #0]
 800e91c:	4294      	cmp	r4, r2
 800e91e:	d000      	beq.n	800e922 <RemapAndLinkDMAtoUARTTx+0x606>
 800e920:	e57e      	b.n	800e420 <RemapAndLinkDMAtoUARTTx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800e922:	4a41      	ldr	r2, [pc, #260]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e924:	23a8      	movs	r3, #168	; 0xa8
 800e926:	58d4      	ldr	r4, [r2, r3]
 800e928:	4d41      	ldr	r5, [pc, #260]	; (800ea30 <RemapAndLinkDMAtoUARTTx+0x714>)
 800e92a:	402c      	ands	r4, r5
 800e92c:	50d4      	str	r4, [r2, r3]
 800e92e:	58d5      	ldr	r5, [r2, r3]
 800e930:	24d0      	movs	r4, #208	; 0xd0
 800e932:	0224      	lsls	r4, r4, #8
 800e934:	432c      	orrs	r4, r5
 800e936:	50d4      	str	r4, [r2, r3]
 800e938:	e5d0      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800e93a:	4a3e      	ldr	r2, [pc, #248]	; (800ea34 <RemapAndLinkDMAtoUARTTx+0x718>)
 800e93c:	680c      	ldr	r4, [r1, #0]
 800e93e:	4294      	cmp	r4, r2
 800e940:	d000      	beq.n	800e944 <RemapAndLinkDMAtoUARTTx+0x628>
 800e942:	e571      	b.n	800e428 <RemapAndLinkDMAtoUARTTx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800e944:	4a38      	ldr	r2, [pc, #224]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e946:	23a8      	movs	r3, #168	; 0xa8
 800e948:	58d4      	ldr	r4, [r2, r3]
 800e94a:	4d3b      	ldr	r5, [pc, #236]	; (800ea38 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800e94c:	402c      	ands	r4, r5
 800e94e:	50d4      	str	r4, [r2, r3]
 800e950:	58d5      	ldr	r5, [r2, r3]
 800e952:	24d0      	movs	r4, #208	; 0xd0
 800e954:	0524      	lsls	r4, r4, #20
 800e956:	432c      	orrs	r4, r5
 800e958:	50d4      	str	r4, [r2, r3]
 800e95a:	e5bf      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800e95c:	4a37      	ldr	r2, [pc, #220]	; (800ea3c <RemapAndLinkDMAtoUARTTx+0x720>)
 800e95e:	680c      	ldr	r4, [r1, #0]
 800e960:	4294      	cmp	r4, r2
 800e962:	d000      	beq.n	800e966 <RemapAndLinkDMAtoUARTTx+0x64a>
 800e964:	e564      	b.n	800e430 <RemapAndLinkDMAtoUARTTx+0x114>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800e966:	4a36      	ldr	r2, [pc, #216]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e968:	23a8      	movs	r3, #168	; 0xa8
 800e96a:	58d4      	ldr	r4, [r2, r3]
 800e96c:	250f      	movs	r5, #15
 800e96e:	43ac      	bics	r4, r5
 800e970:	50d4      	str	r4, [r2, r3]
 800e972:	58d4      	ldr	r4, [r2, r3]
 800e974:	3d02      	subs	r5, #2
 800e976:	432c      	orrs	r4, r5
 800e978:	50d4      	str	r4, [r2, r3]
 800e97a:	e5af      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800e97c:	4a31      	ldr	r2, [pc, #196]	; (800ea44 <RemapAndLinkDMAtoUARTTx+0x728>)
 800e97e:	680c      	ldr	r4, [r1, #0]
 800e980:	4294      	cmp	r4, r2
 800e982:	d000      	beq.n	800e986 <RemapAndLinkDMAtoUARTTx+0x66a>
 800e984:	e558      	b.n	800e438 <RemapAndLinkDMAtoUARTTx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800e986:	4a2e      	ldr	r2, [pc, #184]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e988:	23a8      	movs	r3, #168	; 0xa8
 800e98a:	58d4      	ldr	r4, [r2, r3]
 800e98c:	4d28      	ldr	r5, [pc, #160]	; (800ea30 <RemapAndLinkDMAtoUARTTx+0x714>)
 800e98e:	402c      	ands	r4, r5
 800e990:	50d4      	str	r4, [r2, r3]
 800e992:	58d5      	ldr	r5, [r2, r3]
 800e994:	24d0      	movs	r4, #208	; 0xd0
 800e996:	0224      	lsls	r4, r4, #8
 800e998:	432c      	orrs	r4, r5
 800e99a:	50d4      	str	r4, [r2, r3]
 800e99c:	e59e      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800e99e:	4a2a      	ldr	r2, [pc, #168]	; (800ea48 <RemapAndLinkDMAtoUARTTx+0x72c>)
 800e9a0:	680c      	ldr	r4, [r1, #0]
 800e9a2:	4294      	cmp	r4, r2
 800e9a4:	d000      	beq.n	800e9a8 <RemapAndLinkDMAtoUARTTx+0x68c>
 800e9a6:	e54b      	b.n	800e440 <RemapAndLinkDMAtoUARTTx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800e9a8:	4a25      	ldr	r2, [pc, #148]	; (800ea40 <RemapAndLinkDMAtoUARTTx+0x724>)
 800e9aa:	23a8      	movs	r3, #168	; 0xa8
 800e9ac:	58d4      	ldr	r4, [r2, r3]
 800e9ae:	4d27      	ldr	r5, [pc, #156]	; (800ea4c <RemapAndLinkDMAtoUARTTx+0x730>)
 800e9b0:	402c      	ands	r4, r5
 800e9b2:	50d4      	str	r4, [r2, r3]
 800e9b4:	58d5      	ldr	r5, [r2, r3]
 800e9b6:	24d0      	movs	r4, #208	; 0xd0
 800e9b8:	0324      	lsls	r4, r4, #12
 800e9ba:	432c      	orrs	r4, r5
 800e9bc:	50d4      	str	r4, [r2, r3]
 800e9be:	e58d      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800e9c0:	4a18      	ldr	r2, [pc, #96]	; (800ea24 <RemapAndLinkDMAtoUARTTx+0x708>)
 800e9c2:	680c      	ldr	r4, [r1, #0]
 800e9c4:	4294      	cmp	r4, r2
 800e9c6:	d000      	beq.n	800e9ca <RemapAndLinkDMAtoUARTTx+0x6ae>
 800e9c8:	e53e      	b.n	800e448 <RemapAndLinkDMAtoUARTTx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800e9ca:	4a17      	ldr	r2, [pc, #92]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e9cc:	23a8      	movs	r3, #168	; 0xa8
 800e9ce:	58d4      	ldr	r4, [r2, r3]
 800e9d0:	25f0      	movs	r5, #240	; 0xf0
 800e9d2:	43ac      	bics	r4, r5
 800e9d4:	50d4      	str	r4, [r2, r3]
 800e9d6:	58d4      	ldr	r4, [r2, r3]
 800e9d8:	3d10      	subs	r5, #16
 800e9da:	432c      	orrs	r4, r5
 800e9dc:	50d4      	str	r4, [r2, r3]
 800e9de:	e57d      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800e9e0:	4a12      	ldr	r2, [pc, #72]	; (800ea2c <RemapAndLinkDMAtoUARTTx+0x710>)
 800e9e2:	680c      	ldr	r4, [r1, #0]
 800e9e4:	4294      	cmp	r4, r2
 800e9e6:	d000      	beq.n	800e9ea <RemapAndLinkDMAtoUARTTx+0x6ce>
 800e9e8:	e532      	b.n	800e450 <RemapAndLinkDMAtoUARTTx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800e9ea:	4a0f      	ldr	r2, [pc, #60]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800e9ec:	23a8      	movs	r3, #168	; 0xa8
 800e9ee:	58d4      	ldr	r4, [r2, r3]
 800e9f0:	4d0f      	ldr	r5, [pc, #60]	; (800ea30 <RemapAndLinkDMAtoUARTTx+0x714>)
 800e9f2:	402c      	ands	r4, r5
 800e9f4:	50d4      	str	r4, [r2, r3]
 800e9f6:	58d5      	ldr	r5, [r2, r3]
 800e9f8:	24e0      	movs	r4, #224	; 0xe0
 800e9fa:	0224      	lsls	r4, r4, #8
 800e9fc:	432c      	orrs	r4, r5
 800e9fe:	50d4      	str	r4, [r2, r3]
 800ea00:	e56c      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800ea02:	4a0c      	ldr	r2, [pc, #48]	; (800ea34 <RemapAndLinkDMAtoUARTTx+0x718>)
 800ea04:	680c      	ldr	r4, [r1, #0]
 800ea06:	4294      	cmp	r4, r2
 800ea08:	d000      	beq.n	800ea0c <RemapAndLinkDMAtoUARTTx+0x6f0>
 800ea0a:	e525      	b.n	800e458 <RemapAndLinkDMAtoUARTTx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800ea0c:	4a06      	ldr	r2, [pc, #24]	; (800ea28 <RemapAndLinkDMAtoUARTTx+0x70c>)
 800ea0e:	23a8      	movs	r3, #168	; 0xa8
 800ea10:	58d4      	ldr	r4, [r2, r3]
 800ea12:	4d09      	ldr	r5, [pc, #36]	; (800ea38 <RemapAndLinkDMAtoUARTTx+0x71c>)
 800ea14:	402c      	ands	r4, r5
 800ea16:	50d4      	str	r4, [r2, r3]
 800ea18:	58d5      	ldr	r5, [r2, r3]
 800ea1a:	24e0      	movs	r4, #224	; 0xe0
 800ea1c:	0524      	lsls	r4, r4, #20
 800ea1e:	432c      	orrs	r4, r5
 800ea20:	50d4      	str	r4, [r2, r3]
 800ea22:	e55b      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
 800ea24:	4002001c 	.word	0x4002001c
 800ea28:	40020000 	.word	0x40020000
 800ea2c:	40020044 	.word	0x40020044
 800ea30:	ffff0fff 	.word	0xffff0fff
 800ea34:	40020080 	.word	0x40020080
 800ea38:	f0ffffff 	.word	0xf0ffffff
 800ea3c:	40020408 	.word	0x40020408
 800ea40:	40020400 	.word	0x40020400
 800ea44:	40020444 	.word	0x40020444
 800ea48:	40020458 	.word	0x40020458
 800ea4c:	fff0ffff 	.word	0xfff0ffff
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800ea50:	4a41      	ldr	r2, [pc, #260]	; (800eb58 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800ea52:	680c      	ldr	r4, [r1, #0]
 800ea54:	4294      	cmp	r4, r2
 800ea56:	d000      	beq.n	800ea5a <RemapAndLinkDMAtoUARTTx+0x73e>
 800ea58:	e502      	b.n	800e460 <RemapAndLinkDMAtoUARTTx+0x144>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800ea5a:	4a40      	ldr	r2, [pc, #256]	; (800eb5c <RemapAndLinkDMAtoUARTTx+0x840>)
 800ea5c:	23a8      	movs	r3, #168	; 0xa8
 800ea5e:	58d4      	ldr	r4, [r2, r3]
 800ea60:	250f      	movs	r5, #15
 800ea62:	43ac      	bics	r4, r5
 800ea64:	50d4      	str	r4, [r2, r3]
 800ea66:	58d4      	ldr	r4, [r2, r3]
 800ea68:	3d01      	subs	r5, #1
 800ea6a:	432c      	orrs	r4, r5
 800ea6c:	50d4      	str	r4, [r2, r3]
 800ea6e:	e535      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800ea70:	4a3b      	ldr	r2, [pc, #236]	; (800eb60 <RemapAndLinkDMAtoUARTTx+0x844>)
 800ea72:	680c      	ldr	r4, [r1, #0]
 800ea74:	4294      	cmp	r4, r2
 800ea76:	d000      	beq.n	800ea7a <RemapAndLinkDMAtoUARTTx+0x75e>
 800ea78:	e4f6      	b.n	800e468 <RemapAndLinkDMAtoUARTTx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800ea7a:	4a38      	ldr	r2, [pc, #224]	; (800eb5c <RemapAndLinkDMAtoUARTTx+0x840>)
 800ea7c:	23a8      	movs	r3, #168	; 0xa8
 800ea7e:	58d4      	ldr	r4, [r2, r3]
 800ea80:	4d38      	ldr	r5, [pc, #224]	; (800eb64 <RemapAndLinkDMAtoUARTTx+0x848>)
 800ea82:	402c      	ands	r4, r5
 800ea84:	50d4      	str	r4, [r2, r3]
 800ea86:	58d5      	ldr	r5, [r2, r3]
 800ea88:	24e0      	movs	r4, #224	; 0xe0
 800ea8a:	0224      	lsls	r4, r4, #8
 800ea8c:	432c      	orrs	r4, r5
 800ea8e:	50d4      	str	r4, [r2, r3]
 800ea90:	e524      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800ea92:	4a35      	ldr	r2, [pc, #212]	; (800eb68 <RemapAndLinkDMAtoUARTTx+0x84c>)
 800ea94:	680c      	ldr	r4, [r1, #0]
 800ea96:	4294      	cmp	r4, r2
 800ea98:	d000      	beq.n	800ea9c <RemapAndLinkDMAtoUARTTx+0x780>
 800ea9a:	e4e9      	b.n	800e470 <RemapAndLinkDMAtoUARTTx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800ea9c:	4a2f      	ldr	r2, [pc, #188]	; (800eb5c <RemapAndLinkDMAtoUARTTx+0x840>)
 800ea9e:	23a8      	movs	r3, #168	; 0xa8
 800eaa0:	58d4      	ldr	r4, [r2, r3]
 800eaa2:	4d32      	ldr	r5, [pc, #200]	; (800eb6c <RemapAndLinkDMAtoUARTTx+0x850>)
 800eaa4:	402c      	ands	r4, r5
 800eaa6:	50d4      	str	r4, [r2, r3]
 800eaa8:	58d5      	ldr	r5, [r2, r3]
 800eaaa:	24e0      	movs	r4, #224	; 0xe0
 800eaac:	0324      	lsls	r4, r4, #12
 800eaae:	432c      	orrs	r4, r5
 800eab0:	50d4      	str	r4, [r2, r3]
 800eab2:	e513      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800eab4:	4a2e      	ldr	r2, [pc, #184]	; (800eb70 <RemapAndLinkDMAtoUARTTx+0x854>)
 800eab6:	680c      	ldr	r4, [r1, #0]
 800eab8:	4294      	cmp	r4, r2
 800eaba:	d000      	beq.n	800eabe <RemapAndLinkDMAtoUARTTx+0x7a2>
 800eabc:	e4dc      	b.n	800e478 <RemapAndLinkDMAtoUARTTx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800eabe:	4a2d      	ldr	r2, [pc, #180]	; (800eb74 <RemapAndLinkDMAtoUARTTx+0x858>)
 800eac0:	23a8      	movs	r3, #168	; 0xa8
 800eac2:	58d5      	ldr	r5, [r2, r3]
 800eac4:	26f0      	movs	r6, #240	; 0xf0
 800eac6:	43b5      	bics	r5, r6
 800eac8:	50d5      	str	r5, [r2, r3]
 800eaca:	58d4      	ldr	r4, [r2, r3]
 800eacc:	4334      	orrs	r4, r6
 800eace:	50d4      	str	r4, [r2, r3]
 800ead0:	e504      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800ead2:	4a29      	ldr	r2, [pc, #164]	; (800eb78 <RemapAndLinkDMAtoUARTTx+0x85c>)
 800ead4:	680c      	ldr	r4, [r1, #0]
 800ead6:	4294      	cmp	r4, r2
 800ead8:	d000      	beq.n	800eadc <RemapAndLinkDMAtoUARTTx+0x7c0>
 800eada:	e4d1      	b.n	800e480 <RemapAndLinkDMAtoUARTTx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800eadc:	4a25      	ldr	r2, [pc, #148]	; (800eb74 <RemapAndLinkDMAtoUARTTx+0x858>)
 800eade:	23a8      	movs	r3, #168	; 0xa8
 800eae0:	58d4      	ldr	r4, [r2, r3]
 800eae2:	4d20      	ldr	r5, [pc, #128]	; (800eb64 <RemapAndLinkDMAtoUARTTx+0x848>)
 800eae4:	402c      	ands	r4, r5
 800eae6:	50d4      	str	r4, [r2, r3]
 800eae8:	58d5      	ldr	r5, [r2, r3]
 800eaea:	24f0      	movs	r4, #240	; 0xf0
 800eaec:	0224      	lsls	r4, r4, #8
 800eaee:	432c      	orrs	r4, r5
 800eaf0:	50d4      	str	r4, [r2, r3]
 800eaf2:	e4f3      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800eaf4:	4a21      	ldr	r2, [pc, #132]	; (800eb7c <RemapAndLinkDMAtoUARTTx+0x860>)
 800eaf6:	680c      	ldr	r4, [r1, #0]
 800eaf8:	4294      	cmp	r4, r2
 800eafa:	d000      	beq.n	800eafe <RemapAndLinkDMAtoUARTTx+0x7e2>
 800eafc:	e4c4      	b.n	800e488 <RemapAndLinkDMAtoUARTTx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800eafe:	4a1d      	ldr	r2, [pc, #116]	; (800eb74 <RemapAndLinkDMAtoUARTTx+0x858>)
 800eb00:	23a8      	movs	r3, #168	; 0xa8
 800eb02:	58d4      	ldr	r4, [r2, r3]
 800eb04:	4d1e      	ldr	r5, [pc, #120]	; (800eb80 <RemapAndLinkDMAtoUARTTx+0x864>)
 800eb06:	402c      	ands	r4, r5
 800eb08:	50d4      	str	r4, [r2, r3]
 800eb0a:	58d5      	ldr	r5, [r2, r3]
 800eb0c:	24f0      	movs	r4, #240	; 0xf0
 800eb0e:	0524      	lsls	r4, r4, #20
 800eb10:	432c      	orrs	r4, r5
 800eb12:	50d4      	str	r4, [r2, r3]
 800eb14:	e4e2      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800eb16:	4a10      	ldr	r2, [pc, #64]	; (800eb58 <RemapAndLinkDMAtoUARTTx+0x83c>)
 800eb18:	680c      	ldr	r4, [r1, #0]
 800eb1a:	4294      	cmp	r4, r2
 800eb1c:	d000      	beq.n	800eb20 <RemapAndLinkDMAtoUARTTx+0x804>
 800eb1e:	e4b7      	b.n	800e490 <RemapAndLinkDMAtoUARTTx+0x174>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800eb20:	4a0e      	ldr	r2, [pc, #56]	; (800eb5c <RemapAndLinkDMAtoUARTTx+0x840>)
 800eb22:	23a8      	movs	r3, #168	; 0xa8
 800eb24:	58d5      	ldr	r5, [r2, r3]
 800eb26:	260f      	movs	r6, #15
 800eb28:	43b5      	bics	r5, r6
 800eb2a:	50d5      	str	r5, [r2, r3]
 800eb2c:	58d4      	ldr	r4, [r2, r3]
 800eb2e:	4334      	orrs	r4, r6
 800eb30:	50d4      	str	r4, [r2, r3]
 800eb32:	e4d3      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800eb34:	4a0a      	ldr	r2, [pc, #40]	; (800eb60 <RemapAndLinkDMAtoUARTTx+0x844>)
 800eb36:	680c      	ldr	r4, [r1, #0]
 800eb38:	4294      	cmp	r4, r2
 800eb3a:	d000      	beq.n	800eb3e <RemapAndLinkDMAtoUARTTx+0x822>
 800eb3c:	e4ac      	b.n	800e498 <RemapAndLinkDMAtoUARTTx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800eb3e:	4a07      	ldr	r2, [pc, #28]	; (800eb5c <RemapAndLinkDMAtoUARTTx+0x840>)
 800eb40:	23a8      	movs	r3, #168	; 0xa8
 800eb42:	58d4      	ldr	r4, [r2, r3]
 800eb44:	4d07      	ldr	r5, [pc, #28]	; (800eb64 <RemapAndLinkDMAtoUARTTx+0x848>)
 800eb46:	402c      	ands	r4, r5
 800eb48:	50d4      	str	r4, [r2, r3]
 800eb4a:	58d5      	ldr	r5, [r2, r3]
 800eb4c:	24f0      	movs	r4, #240	; 0xf0
 800eb4e:	0224      	lsls	r4, r4, #8
 800eb50:	432c      	orrs	r4, r5
 800eb52:	50d4      	str	r4, [r2, r3]
 800eb54:	e4c2      	b.n	800e4dc <RemapAndLinkDMAtoUARTTx+0x1c0>
 800eb56:	46c0      	nop			; (mov r8, r8)
 800eb58:	40020408 	.word	0x40020408
 800eb5c:	40020400 	.word	0x40020400
 800eb60:	40020444 	.word	0x40020444
 800eb64:	ffff0fff 	.word	0xffff0fff
 800eb68:	40020458 	.word	0x40020458
 800eb6c:	fff0ffff 	.word	0xfff0ffff
 800eb70:	4002001c 	.word	0x4002001c
 800eb74:	40020000 	.word	0x40020000
 800eb78:	40020044 	.word	0x40020044
 800eb7c:	40020080 	.word	0x40020080
 800eb80:	f0ffffff 	.word	0xf0ffffff

0800eb84 <DMA_MSG_TX_Setup>:
{	
 800eb84:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800eb86:	4b0d      	ldr	r3, [pc, #52]	; (800ebbc <DMA_MSG_TX_Setup+0x38>)
 800eb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d010      	beq.n	800ebb0 <DMA_MSG_TX_Setup+0x2c>
	else if (msgTxDMA[1].Parent == NULL)
 800eb8e:	4b0b      	ldr	r3, [pc, #44]	; (800ebbc <DMA_MSG_TX_Setup+0x38>)
 800eb90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00e      	beq.n	800ebb4 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[2].Parent == NULL)
 800eb96:	4a09      	ldr	r2, [pc, #36]	; (800ebbc <DMA_MSG_TX_Setup+0x38>)
 800eb98:	2394      	movs	r3, #148	; 0x94
 800eb9a:	58d3      	ldr	r3, [r2, r3]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d00b      	beq.n	800ebb8 <DMA_MSG_TX_Setup+0x34>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800eba0:	0021      	movs	r1, r4
 800eba2:	f7ff fbbb 	bl	800e31c <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800eba6:	2100      	movs	r1, #0
 800eba8:	0020      	movs	r0, r4
 800ebaa:	f7fe fe4f 	bl	800d84c <SetupDMAInterrupts>
}
 800ebae:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[0];
 800ebb0:	4c02      	ldr	r4, [pc, #8]	; (800ebbc <DMA_MSG_TX_Setup+0x38>)
 800ebb2:	e7f5      	b.n	800eba0 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800ebb4:	4c02      	ldr	r4, [pc, #8]	; (800ebc0 <DMA_MSG_TX_Setup+0x3c>)
 800ebb6:	e7f3      	b.n	800eba0 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[2];  
 800ebb8:	4c02      	ldr	r4, [pc, #8]	; (800ebc4 <DMA_MSG_TX_Setup+0x40>)
 800ebba:	e7f1      	b.n	800eba0 <DMA_MSG_TX_Setup+0x1c>
 800ebbc:	20001cc8 	.word	0x20001cc8
 800ebc0:	20001d00 	.word	0x20001d00
 800ebc4:	20001d38 	.word	0x20001d38

0800ebc8 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800ebc8:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800ebca:	4807      	ldr	r0, [pc, #28]	; (800ebe8 <CRC_Init+0x20>)
 800ebcc:	4b07      	ldr	r3, [pc, #28]	; (800ebec <CRC_Init+0x24>)
 800ebce:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800ebd0:	2310      	movs	r3, #16
 800ebd2:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800ebd8:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    //CRC_INPUTDATA_INVERSION_NONE
 800ebda:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    //CRC_OUTPUTDATA_INVERSION_DISABLE;
 800ebdc:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800ebde:	3303      	adds	r3, #3
 800ebe0:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800ebe2:	f003 fb90 	bl	8012306 <HAL_CRC_Init>
}
 800ebe6:	bd10      	pop	{r4, pc}
 800ebe8:	2000717c 	.word	0x2000717c
 800ebec:	40023000 	.word	0x40023000

0800ebf0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ebf0:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800ebf2:	4a05      	ldr	r2, [pc, #20]	; (800ec08 <HAL_CRC_MspInit+0x18>)
 800ebf4:	6951      	ldr	r1, [r2, #20]
 800ebf6:	2340      	movs	r3, #64	; 0x40
 800ebf8:	4319      	orrs	r1, r3
 800ebfa:	6151      	str	r1, [r2, #20]
 800ebfc:	6952      	ldr	r2, [r2, #20]
 800ebfe:	4013      	ands	r3, r2
 800ec00:	9301      	str	r3, [sp, #4]
 800ec02:	9b01      	ldr	r3, [sp, #4]
}
 800ec04:	b002      	add	sp, #8
 800ec06:	4770      	bx	lr
 800ec08:	40021000 	.word	0x40021000

0800ec0c <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800ec0c:	b570      	push	{r4, r5, r6, lr}
 800ec0e:	0004      	movs	r4, r0
 800ec10:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d014      	beq.n	800ec40 <CalculateCRC8+0x34>
 800ec16:	2900      	cmp	r1, #0
 800ec18:	d101      	bne.n	800ec1e <CalculateCRC8+0x12>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800ec1a:	2000      	movs	r0, #0
}
 800ec1c:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800ec1e:	088e      	lsrs	r6, r1, #2
 800ec20:	0032      	movs	r2, r6
 800ec22:	0001      	movs	r1, r0
 800ec24:	4807      	ldr	r0, [pc, #28]	; (800ec44 <CalculateCRC8+0x38>)
 800ec26:	f003 fbc9 	bl	80123bc <HAL_CRC_Calculate>
 800ec2a:	b2c0      	uxtb	r0, r0
		if ((size%4)!=0)
 800ec2c:	07ab      	lsls	r3, r5, #30
 800ec2e:	d0f5      	beq.n	800ec1c <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800ec30:	0131      	lsls	r1, r6, #4
 800ec32:	1861      	adds	r1, r4, r1
 800ec34:	2201      	movs	r2, #1
 800ec36:	4803      	ldr	r0, [pc, #12]	; (800ec44 <CalculateCRC8+0x38>)
 800ec38:	f003 fb96 	bl	8012368 <HAL_CRC_Accumulate>
 800ec3c:	b2c0      	uxtb	r0, r0
 800ec3e:	e7ed      	b.n	800ec1c <CalculateCRC8+0x10>
	return 0;
 800ec40:	2000      	movs	r0, #0
 800ec42:	e7eb      	b.n	800ec1c <CalculateCRC8+0x10>
 800ec44:	2000717c 	.word	0x2000717c

0800ec48 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800ec48:	b500      	push	{lr}
 800ec4a:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800ec4c:	2380      	movs	r3, #128	; 0x80
 800ec4e:	011b      	lsls	r3, r3, #4
 800ec50:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ec52:	2301      	movs	r3, #1
 800ec54:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec56:	2300      	movs	r3, #0
 800ec58:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ec5a:	3303      	adds	r3, #3
 800ec5c:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800ec5e:	2090      	movs	r0, #144	; 0x90
 800ec60:	a901      	add	r1, sp, #4
 800ec62:	05c0      	lsls	r0, r0, #23
 800ec64:	f004 fa04 	bl	8013070 <HAL_GPIO_Init>
}
 800ec68:	b007      	add	sp, #28
 800ec6a:	bd00      	pop	{pc}

0800ec6c <GPIO_Init>:
{
 800ec6c:	b500      	push	{lr}
 800ec6e:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800ec70:	4b18      	ldr	r3, [pc, #96]	; (800ecd4 <GPIO_Init+0x68>)
 800ec72:	6959      	ldr	r1, [r3, #20]
 800ec74:	2080      	movs	r0, #128	; 0x80
 800ec76:	0300      	lsls	r0, r0, #12
 800ec78:	4301      	orrs	r1, r0
 800ec7a:	6159      	str	r1, [r3, #20]
 800ec7c:	695a      	ldr	r2, [r3, #20]
 800ec7e:	4002      	ands	r2, r0
 800ec80:	9201      	str	r2, [sp, #4]
 800ec82:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800ec84:	6959      	ldr	r1, [r3, #20]
 800ec86:	2080      	movs	r0, #128	; 0x80
 800ec88:	0280      	lsls	r0, r0, #10
 800ec8a:	4301      	orrs	r1, r0
 800ec8c:	6159      	str	r1, [r3, #20]
 800ec8e:	695a      	ldr	r2, [r3, #20]
 800ec90:	4002      	ands	r2, r0
 800ec92:	9202      	str	r2, [sp, #8]
 800ec94:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800ec96:	6959      	ldr	r1, [r3, #20]
 800ec98:	2080      	movs	r0, #128	; 0x80
 800ec9a:	0340      	lsls	r0, r0, #13
 800ec9c:	4301      	orrs	r1, r0
 800ec9e:	6159      	str	r1, [r3, #20]
 800eca0:	695a      	ldr	r2, [r3, #20]
 800eca2:	4002      	ands	r2, r0
 800eca4:	9203      	str	r2, [sp, #12]
 800eca6:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800eca8:	6959      	ldr	r1, [r3, #20]
 800ecaa:	2080      	movs	r0, #128	; 0x80
 800ecac:	02c0      	lsls	r0, r0, #11
 800ecae:	4301      	orrs	r1, r0
 800ecb0:	6159      	str	r1, [r3, #20]
 800ecb2:	695a      	ldr	r2, [r3, #20]
 800ecb4:	4002      	ands	r2, r0
 800ecb6:	9204      	str	r2, [sp, #16]
 800ecb8:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800ecba:	695a      	ldr	r2, [r3, #20]
 800ecbc:	2180      	movs	r1, #128	; 0x80
 800ecbe:	03c9      	lsls	r1, r1, #15
 800ecc0:	430a      	orrs	r2, r1
 800ecc2:	615a      	str	r2, [r3, #20]
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	400b      	ands	r3, r1
 800ecc8:	9305      	str	r3, [sp, #20]
 800ecca:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800eccc:	f7ff ffbc 	bl	800ec48 <IND_LED_Init>
}
 800ecd0:	b007      	add	sp, #28
 800ecd2:	bd00      	pop	{pc}
 800ecd4:	40021000 	.word	0x40021000

0800ecd8 <HX711_GPIO_Init>:

//-- Configure indicator LED
void HX711_GPIO_Init(void)
{
 800ecd8:	b530      	push	{r4, r5, lr}
 800ecda:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800ecdc:	2390      	movs	r3, #144	; 0x90
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ece2:	2301      	movs	r3, #1
 800ece4:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ece6:	2500      	movs	r5, #0
 800ece8:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ecea:	3302      	adds	r3, #2
 800ecec:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ecee:	2490      	movs	r4, #144	; 0x90
 800ecf0:	05e4      	lsls	r4, r4, #23
 800ecf2:	a901      	add	r1, sp, #4
 800ecf4:	0020      	movs	r0, r4
 800ecf6:	f004 f9bb 	bl	8013070 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ecfa:	2380      	movs	r3, #128	; 0x80
 800ecfc:	00db      	lsls	r3, r3, #3
 800ecfe:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ed00:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);	
 800ed02:	a901      	add	r1, sp, #4
 800ed04:	0020      	movs	r0, r4
 800ed06:	f004 f9b3 	bl	8013070 <HAL_GPIO_Init>
}
 800ed0a:	b007      	add	sp, #28
 800ed0c:	bd30      	pop	{r4, r5, pc}
	...

0800ed10 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800ed10:	b570      	push	{r4, r5, r6, lr}
 800ed12:	000e      	movs	r6, r1
 800ed14:	0014      	movs	r4, r2
 800ed16:	001d      	movs	r5, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800ed18:	f000 fd28 	bl	800f76c <GetUart>
	
	if (huart == &huart1) 
 800ed1c:	4b26      	ldr	r3, [pc, #152]	; (800edb8 <GetPortGPIOs+0xa8>)
 800ed1e:	4298      	cmp	r0, r3
 800ed20:	d047      	beq.n	800edb2 <GetPortGPIOs+0xa2>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800ed22:	4b26      	ldr	r3, [pc, #152]	; (800edbc <GetPortGPIOs+0xac>)
 800ed24:	4298      	cmp	r0, r3
 800ed26:	d00d      	beq.n	800ed44 <GetPortGPIOs+0x34>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800ed28:	4b25      	ldr	r3, [pc, #148]	; (800edc0 <GetPortGPIOs+0xb0>)
 800ed2a:	4298      	cmp	r0, r3
 800ed2c:	d015      	beq.n	800ed5a <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800ed2e:	4b25      	ldr	r3, [pc, #148]	; (800edc4 <GetPortGPIOs+0xb4>)
 800ed30:	4298      	cmp	r0, r3
 800ed32:	d01e      	beq.n	800ed72 <GetPortGPIOs+0x62>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800ed34:	4b24      	ldr	r3, [pc, #144]	; (800edc8 <GetPortGPIOs+0xb8>)
 800ed36:	4298      	cmp	r0, r3
 800ed38:	d026      	beq.n	800ed88 <GetPortGPIOs+0x78>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800ed3a:	4b24      	ldr	r3, [pc, #144]	; (800edcc <GetPortGPIOs+0xbc>)
 800ed3c:	4298      	cmp	r0, r3
 800ed3e:	d02d      	beq.n	800ed9c <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800ed40:	20ff      	movs	r0, #255	; 0xff
 800ed42:	e037      	b.n	800edb4 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800ed44:	2390      	movs	r3, #144	; 0x90
 800ed46:	05db      	lsls	r3, r3, #23
 800ed48:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800ed4a:	2204      	movs	r2, #4
 800ed4c:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800ed4e:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART2_RX_PIN;
 800ed50:	2308      	movs	r3, #8
 800ed52:	9a04      	ldr	r2, [sp, #16]
 800ed54:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ed56:	2000      	movs	r0, #0
 800ed58:	e02c      	b.n	800edb4 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800ed5a:	4b1d      	ldr	r3, [pc, #116]	; (800edd0 <GetPortGPIOs+0xc0>)
 800ed5c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800ed5e:	2280      	movs	r2, #128	; 0x80
 800ed60:	00d2      	lsls	r2, r2, #3
 800ed62:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800ed64:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART3_RX_PIN;
 800ed66:	2380      	movs	r3, #128	; 0x80
 800ed68:	011b      	lsls	r3, r3, #4
 800ed6a:	9a04      	ldr	r2, [sp, #16]
 800ed6c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ed6e:	2000      	movs	r0, #0
 800ed70:	e020      	b.n	800edb4 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800ed72:	2390      	movs	r3, #144	; 0x90
 800ed74:	05db      	lsls	r3, r3, #23
 800ed76:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800ed78:	2201      	movs	r2, #1
 800ed7a:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800ed7c:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART4_RX_PIN;
 800ed7e:	2302      	movs	r3, #2
 800ed80:	9a04      	ldr	r2, [sp, #16]
 800ed82:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ed84:	2000      	movs	r0, #0
 800ed86:	e015      	b.n	800edb4 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800ed88:	4b11      	ldr	r3, [pc, #68]	; (800edd0 <GetPortGPIOs+0xc0>)
 800ed8a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800ed8c:	2208      	movs	r2, #8
 800ed8e:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800ed90:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART5_RX_PIN;
 800ed92:	2310      	movs	r3, #16
 800ed94:	9a04      	ldr	r2, [sp, #16]
 800ed96:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800ed98:	2000      	movs	r0, #0
 800ed9a:	e00b      	b.n	800edb4 <GetPortGPIOs+0xa4>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800ed9c:	2390      	movs	r3, #144	; 0x90
 800ed9e:	05db      	lsls	r3, r3, #23
 800eda0:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800eda2:	2210      	movs	r2, #16
 800eda4:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800eda6:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART6_RX_PIN;
 800eda8:	2320      	movs	r3, #32
 800edaa:	9a04      	ldr	r2, [sp, #16]
 800edac:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800edae:	2000      	movs	r0, #0
 800edb0:	e000      	b.n	800edb4 <GetPortGPIOs+0xa4>
 800edb2:	2000      	movs	r0, #0
	
	return result;	
}
 800edb4:	bd70      	pop	{r4, r5, r6, pc}
 800edb6:	46c0      	nop			; (mov r8, r8)
 800edb8:	20006fac 	.word	0x20006fac
 800edbc:	20007104 	.word	0x20007104
 800edc0:	20006ec4 	.word	0x20006ec4
 800edc4:	20007090 	.word	0x20007090
 800edc8:	20006f38 	.word	0x20006f38
 800edcc:	20007020 	.word	0x20007020
 800edd0:	48000400 	.word	0x48000400

0800edd4 <IsFactoryReset>:
{
 800edd4:	b570      	push	{r4, r5, r6, lr}
 800edd6:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800edd8:	4b39      	ldr	r3, [pc, #228]	; (800eec0 <IsFactoryReset+0xec>)
 800edda:	6959      	ldr	r1, [r3, #20]
 800eddc:	2080      	movs	r0, #128	; 0x80
 800edde:	0280      	lsls	r0, r0, #10
 800ede0:	4301      	orrs	r1, r0
 800ede2:	6159      	str	r1, [r3, #20]
 800ede4:	695a      	ldr	r2, [r3, #20]
 800ede6:	4002      	ands	r2, r0
 800ede8:	9203      	str	r2, [sp, #12]
 800edea:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800edec:	6959      	ldr	r1, [r3, #20]
 800edee:	2080      	movs	r0, #128	; 0x80
 800edf0:	02c0      	lsls	r0, r0, #11
 800edf2:	4301      	orrs	r1, r0
 800edf4:	6159      	str	r1, [r3, #20]
 800edf6:	695a      	ldr	r2, [r3, #20]
 800edf8:	4002      	ands	r2, r0
 800edfa:	9204      	str	r2, [sp, #16]
 800edfc:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800edfe:	6959      	ldr	r1, [r3, #20]
 800ee00:	2080      	movs	r0, #128	; 0x80
 800ee02:	0300      	lsls	r0, r0, #12
 800ee04:	4301      	orrs	r1, r0
 800ee06:	6159      	str	r1, [r3, #20]
 800ee08:	695a      	ldr	r2, [r3, #20]
 800ee0a:	4002      	ands	r2, r0
 800ee0c:	9205      	str	r2, [sp, #20]
 800ee0e:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800ee10:	695a      	ldr	r2, [r3, #20]
 800ee12:	2180      	movs	r1, #128	; 0x80
 800ee14:	0349      	lsls	r1, r1, #13
 800ee16:	430a      	orrs	r2, r1
 800ee18:	615a      	str	r2, [r3, #20]
 800ee1a:	695b      	ldr	r3, [r3, #20]
 800ee1c:	400b      	ands	r3, r1
 800ee1e:	9306      	str	r3, [sp, #24]
 800ee20:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800ee22:	2522      	movs	r5, #34	; 0x22
 800ee24:	446d      	add	r5, sp
 800ee26:	ab08      	add	r3, sp, #32
 800ee28:	9300      	str	r3, [sp, #0]
 800ee2a:	ab0b      	add	r3, sp, #44	; 0x2c
 800ee2c:	002a      	movs	r2, r5
 800ee2e:	a90c      	add	r1, sp, #48	; 0x30
 800ee30:	2001      	movs	r0, #1
 800ee32:	f7ff ff6d 	bl	800ed10 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800ee36:	ac07      	add	r4, sp, #28
 800ee38:	9400      	str	r4, [sp, #0]
 800ee3a:	ab09      	add	r3, sp, #36	; 0x24
 800ee3c:	221e      	movs	r2, #30
 800ee3e:	446a      	add	r2, sp
 800ee40:	a90a      	add	r1, sp, #40	; 0x28
 800ee42:	2005      	movs	r0, #5
 800ee44:	f7ff ff64 	bl	800ed10 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee4c:	2600      	movs	r6, #0
 800ee4e:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800ee50:	882b      	ldrh	r3, [r5, #0]
 800ee52:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800ee54:	a90d      	add	r1, sp, #52	; 0x34
 800ee56:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ee58:	f004 f90a 	bl	8013070 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ee5c:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800ee5e:	2302      	movs	r3, #2
 800ee60:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800ee62:	8823      	ldrh	r3, [r4, #0]
 800ee64:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800ee66:	a90d      	add	r1, sp, #52	; 0x34
 800ee68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee6a:	f004 f901 	bl	8013070 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800ee6e:	8829      	ldrh	r1, [r5, #0]
 800ee70:	2200      	movs	r2, #0
 800ee72:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ee74:	f004 fa4d 	bl	8013312 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800ee78:	2005      	movs	r0, #5
 800ee7a:	f000 fae3 	bl	800f444 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800ee7e:	8821      	ldrh	r1, [r4, #0]
 800ee80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee82:	f004 fa3f 	bl	8013304 <HAL_GPIO_ReadPin>
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d006      	beq.n	800ee98 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ee8a:	4b0e      	ldr	r3, [pc, #56]	; (800eec4 <IsFactoryReset+0xf0>)
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	4252      	negs	r2, r2
 800ee90:	601a      	str	r2, [r3, #0]
	return 0;
 800ee92:	2000      	movs	r0, #0
}
 800ee94:	b012      	add	sp, #72	; 0x48
 800ee96:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800ee98:	2322      	movs	r3, #34	; 0x22
 800ee9a:	446b      	add	r3, sp
 800ee9c:	8819      	ldrh	r1, [r3, #0]
 800ee9e:	2201      	movs	r2, #1
 800eea0:	980c      	ldr	r0, [sp, #48]	; 0x30
 800eea2:	f004 fa36 	bl	8013312 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800eea6:	2005      	movs	r0, #5
 800eea8:	f000 facc 	bl	800f444 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800eeac:	ab07      	add	r3, sp, #28
 800eeae:	8819      	ldrh	r1, [r3, #0]
 800eeb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeb2:	f004 fa27 	bl	8013304 <HAL_GPIO_ReadPin>
 800eeb6:	2801      	cmp	r0, #1
 800eeb8:	d1e7      	bne.n	800ee8a <IsFactoryReset+0xb6>
			return 1;
 800eeba:	2001      	movs	r0, #1
 800eebc:	e7ea      	b.n	800ee94 <IsFactoryReset+0xc0>
 800eebe:	46c0      	nop			; (mov r8, r8)
 800eec0:	40021000 	.word	0x40021000
 800eec4:	20007ff0 	.word	0x20007ff0

0800eec8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800eec8:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800eeca:	f002 fe0f 	bl	8011aec <HAL_IncTick>
  osSystickHandler();  
 800eece:	f000 fe1f 	bl	800fb10 <osSystickHandler>

}
 800eed2:	bd10      	pop	{r4, pc}

0800eed4 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800eed4:	e7fe      	b.n	800eed4 <HardFault_Handler>

0800eed6 <USART1_IRQHandler>:
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800eed6:	4770      	bx	lr

0800eed8 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800eed8:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800eeda:	4802      	ldr	r0, [pc, #8]	; (800eee4 <USART2_IRQHandler+0xc>)
 800eedc:	f005 feb3 	bl	8014c46 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800eee0:	bd10      	pop	{r4, pc}
 800eee2:	46c0      	nop			; (mov r8, r8)
 800eee4:	20007104 	.word	0x20007104

0800eee8 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800eee8:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800eeea:	4806      	ldr	r0, [pc, #24]	; (800ef04 <USART3_8_IRQHandler+0x1c>)
 800eeec:	f005 feab 	bl	8014c46 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800eef0:	4805      	ldr	r0, [pc, #20]	; (800ef08 <USART3_8_IRQHandler+0x20>)
 800eef2:	f005 fea8 	bl	8014c46 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800eef6:	4805      	ldr	r0, [pc, #20]	; (800ef0c <USART3_8_IRQHandler+0x24>)
 800eef8:	f005 fea5 	bl	8014c46 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800eefc:	4804      	ldr	r0, [pc, #16]	; (800ef10 <USART3_8_IRQHandler+0x28>)
 800eefe:	f005 fea2 	bl	8014c46 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ef02:	bd10      	pop	{r4, pc}
 800ef04:	20006ec4 	.word	0x20006ec4
 800ef08:	20007090 	.word	0x20007090
 800ef0c:	20006f38 	.word	0x20006f38
 800ef10:	20007020 	.word	0x20007020

0800ef14 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800ef14:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800ef16:	2001      	movs	r0, #1
 800ef18:	f7f8 fdaa 	bl	8007a70 <DMA_IRQHandler>
	
}
 800ef1c:	bd10      	pop	{r4, pc}
	...

0800ef20 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800ef20:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800ef22:	4b0c      	ldr	r3, [pc, #48]	; (800ef54 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	06db      	lsls	r3, r3, #27
 800ef28:	d408      	bmi.n	800ef3c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800ef2a:	4b0b      	ldr	r3, [pc, #44]	; (800ef58 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	05db      	lsls	r3, r3, #23
 800ef30:	d408      	bmi.n	800ef44 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800ef32:	4b09      	ldr	r3, [pc, #36]	; (800ef58 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	06db      	lsls	r3, r3, #27
 800ef38:	d408      	bmi.n	800ef4c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800ef3a:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800ef3c:	2005      	movs	r0, #5
 800ef3e:	f7f8 fd97 	bl	8007a70 <DMA_IRQHandler>
 800ef42:	e7fa      	b.n	800ef3a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800ef44:	2002      	movs	r0, #2
 800ef46:	f7f8 fd93 	bl	8007a70 <DMA_IRQHandler>
 800ef4a:	e7f6      	b.n	800ef3a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800ef4c:	4803      	ldr	r0, [pc, #12]	; (800ef5c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800ef4e:	f003 fb31 	bl	80125b4 <HAL_DMA_IRQHandler>
}
 800ef52:	e7f2      	b.n	800ef3a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800ef54:	40020400 	.word	0x40020400
 800ef58:	40020000 	.word	0x40020000
 800ef5c:	20001cc8 	.word	0x20001cc8

0800ef60 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800ef60:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800ef62:	4b14      	ldr	r3, [pc, #80]	; (800efb4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	03db      	lsls	r3, r3, #15
 800ef68:	d413      	bmi.n	800ef92 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800ef6a:	4b12      	ldr	r3, [pc, #72]	; (800efb4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	02db      	lsls	r3, r3, #11
 800ef70:	d413      	bmi.n	800ef9a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800ef72:	4b11      	ldr	r3, [pc, #68]	; (800efb8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	05db      	lsls	r3, r3, #23
 800ef78:	d413      	bmi.n	800efa2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800ef7a:	4b0e      	ldr	r3, [pc, #56]	; (800efb4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	04db      	lsls	r3, r3, #19
 800ef80:	d413      	bmi.n	800efaa <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800ef82:	4b0c      	ldr	r3, [pc, #48]	; (800efb4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	01db      	lsls	r3, r3, #7
 800ef88:	d506      	bpl.n	800ef98 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800ef8a:	480c      	ldr	r0, [pc, #48]	; (800efbc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800ef8c:	f003 fb12 	bl	80125b4 <HAL_DMA_IRQHandler>
	}
}
 800ef90:	e002      	b.n	800ef98 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800ef92:	2003      	movs	r0, #3
 800ef94:	f7f8 fd6c 	bl	8007a70 <DMA_IRQHandler>
}
 800ef98:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800ef9a:	2004      	movs	r0, #4
 800ef9c:	f7f8 fd68 	bl	8007a70 <DMA_IRQHandler>
 800efa0:	e7fa      	b.n	800ef98 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800efa2:	2006      	movs	r0, #6
 800efa4:	f7f8 fd64 	bl	8007a70 <DMA_IRQHandler>
 800efa8:	e7f6      	b.n	800ef98 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800efaa:	4805      	ldr	r0, [pc, #20]	; (800efc0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800efac:	f003 fb02 	bl	80125b4 <HAL_DMA_IRQHandler>
 800efb0:	e7f2      	b.n	800ef98 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800efb2:	46c0      	nop			; (mov r8, r8)
 800efb4:	40020000 	.word	0x40020000
 800efb8:	40020400 	.word	0x40020400
 800efbc:	20001d38 	.word	0x20001d38
 800efc0:	20001d00 	.word	0x20001d00

0800efc4 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800efc4:	b510      	push	{r4, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800efca:	2300      	movs	r3, #0
 800efcc:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800efce:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d001      	beq.n	800efd8 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800efd4:	f7fe fce6 	bl	800d9a4 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800efd8:	0020      	movs	r0, r4
 800efda:	f7fc ffe5 	bl	800bfa8 <GetPort>
 800efde:	0080      	lsls	r0, r0, #2
 800efe0:	4b03      	ldr	r3, [pc, #12]	; (800eff0 <HAL_UART_TxCpltCallback+0x2c>)
 800efe2:	58c0      	ldr	r0, [r0, r3]
 800efe4:	a901      	add	r1, sp, #4
 800efe6:	f001 f923 	bl	8010230 <xQueueGiveFromISR>
}
 800efea:	b002      	add	sp, #8
 800efec:	bd10      	pop	{r4, pc}
 800efee:	46c0      	nop			; (mov r8, r8)
 800eff0:	20006e20 	.word	0x20006e20

0800eff4 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eff4:	b510      	push	{r4, lr}
 800eff6:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800eff8:	2369      	movs	r3, #105	; 0x69
 800effa:	2201      	movs	r2, #1
 800effc:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800effe:	f7fc ffd3 	bl	800bfa8 <GetPort>
	if (portStatus[port] == STREAM) {
 800f002:	4b0b      	ldr	r3, [pc, #44]	; (800f030 <HAL_UART_ErrorCallback+0x3c>)
 800f004:	5c1b      	ldrb	r3, [r3, r0]
 800f006:	2b02      	cmp	r3, #2
 800f008:	d004      	beq.n	800f014 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800f00a:	3801      	subs	r0, #1
 800f00c:	4b09      	ldr	r3, [pc, #36]	; (800f034 <HAL_UART_ErrorCallback+0x40>)
 800f00e:	2201      	movs	r2, #1
 800f010:	541a      	strb	r2, [r3, r0]
	}	
}
 800f012:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800f014:	3801      	subs	r0, #1
 800f016:	0080      	lsls	r0, r0, #2
 800f018:	4b07      	ldr	r3, [pc, #28]	; (800f038 <HAL_UART_ErrorCallback+0x44>)
 800f01a:	58c3      	ldr	r3, [r0, r3]
 800f01c:	6819      	ldr	r1, [r3, #0]
 800f01e:	3128      	adds	r1, #40	; 0x28
 800f020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	685a      	ldr	r2, [r3, #4]
 800f026:	b292      	uxth	r2, r2
 800f028:	0020      	movs	r0, r4
 800f02a:	f005 f9f1 	bl	8014410 <HAL_UART_Receive_DMA>
 800f02e:	e7f0      	b.n	800f012 <HAL_UART_ErrorCallback+0x1e>
 800f030:	200010e0 	.word	0x200010e0
 800f034:	200012b0 	.word	0x200012b0
 800f038:	2000144c 	.word	0x2000144c

0800f03c <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f03c:	b510      	push	{r4, lr}
 800f03e:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800f040:	f7fc ffb2 	bl	800bfa8 <GetPort>
 800f044:	4b14      	ldr	r3, [pc, #80]	; (800f098 <HAL_UART_RxCpltCallback+0x5c>)
 800f046:	5c1b      	ldrb	r3, [r3, r0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d006      	beq.n	800f05a <HAL_UART_RxCpltCallback+0x1e>
 800f04c:	0020      	movs	r0, r4
 800f04e:	f7fc ffab 	bl	800bfa8 <GetPort>
 800f052:	4b11      	ldr	r3, [pc, #68]	; (800f098 <HAL_UART_RxCpltCallback+0x5c>)
 800f054:	5c1b      	ldrb	r3, [r3, r0]
 800f056:	2b01      	cmp	r3, #1
 800f058:	d11c      	bne.n	800f094 <HAL_UART_RxCpltCallback+0x58>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800f05a:	0020      	movs	r0, r4
 800f05c:	f7fc ffa4 	bl	800bfa8 <GetPort>
 800f060:	4b0e      	ldr	r3, [pc, #56]	; (800f09c <HAL_UART_RxCpltCallback+0x60>)
 800f062:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800f064:	0020      	movs	r0, r4
 800f066:	f7fc ff9f 	bl	800bfa8 <GetPort>
 800f06a:	4b0b      	ldr	r3, [pc, #44]	; (800f098 <HAL_UART_RxCpltCallback+0x5c>)
 800f06c:	2205      	movs	r2, #5
 800f06e:	541a      	strb	r2, [r3, r0]
		// Clear the circular RX buffer
		memset(&UARTRxBuf[GetPort(huart)-1][0], 0, MSG_RX_BUF_SIZE);
 800f070:	0020      	movs	r0, r4
 800f072:	f7fc ff99 	bl	800bfa8 <GetPort>
 800f076:	3801      	subs	r0, #1
 800f078:	0180      	lsls	r0, r0, #6
 800f07a:	4b09      	ldr	r3, [pc, #36]	; (800f0a0 <HAL_UART_RxCpltCallback+0x64>)
 800f07c:	18c0      	adds	r0, r0, r3
 800f07e:	2240      	movs	r2, #64	; 0x40
 800f080:	2100      	movs	r1, #0
 800f082:	f006 f901 	bl	8015288 <memset>
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800f086:	0020      	movs	r0, r4
 800f088:	f7fc ff8e 	bl	800bfa8 <GetPort>
 800f08c:	3801      	subs	r0, #1
 800f08e:	4b05      	ldr	r3, [pc, #20]	; (800f0a4 <HAL_UART_RxCpltCallback+0x68>)
 800f090:	2201      	movs	r2, #1
 800f092:	541a      	strb	r2, [r3, r0]
	}
}
 800f094:	bd10      	pop	{r4, pc}
 800f096:	46c0      	nop			; (mov r8, r8)
 800f098:	200010e0 	.word	0x200010e0
 800f09c:	20006da0 	.word	0x20006da0
 800f0a0:	200012b8 	.word	0x200012b8
 800f0a4:	200012b0 	.word	0x200012b0

0800f0a8 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800f0a8:	b672      	cpsid	i
 800f0aa:	e7fe      	b.n	800f0aa <vApplicationStackOverflowHook+0x2>

0800f0ac <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800f0ac:	b672      	cpsid	i
 800f0ae:	e7fe      	b.n	800f0ae <vApplicationMallocFailedHook+0x2>

0800f0b0 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800f0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0b2:	46d6      	mov	lr, sl
 800f0b4:	464f      	mov	r7, r9
 800f0b6:	4646      	mov	r6, r8
 800f0b8:	b5c0      	push	{r6, r7, lr}
 800f0ba:	b08c      	sub	sp, #48	; 0x30
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800f0bc:	ac03      	add	r4, sp, #12
 800f0be:	4b37      	ldr	r3, [pc, #220]	; (800f19c <RTC_CalendarConfig+0xec>)
 800f0c0:	0022      	movs	r2, r4
 800f0c2:	cb43      	ldmia	r3!, {r0, r1, r6}
 800f0c4:	c243      	stmia	r2!, {r0, r1, r6}
 800f0c6:	466b      	mov	r3, sp
 800f0c8:	4a35      	ldr	r2, [pc, #212]	; (800f1a0 <RTC_CalendarConfig+0xf0>)
 800f0ca:	ca03      	ldmia	r2!, {r0, r1}
 800f0cc:	c303      	stmia	r3!, {r0, r1}
 800f0ce:	0019      	movs	r1, r3
 800f0d0:	7813      	ldrb	r3, [r2, #0]
 800f0d2:	700b      	strb	r3, [r1, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800f0d4:	2015      	movs	r0, #21
 800f0d6:	4468      	add	r0, sp
 800f0d8:	f005 fe3d 	bl	8014d56 <atoi>
 800f0dc:	b2c7      	uxtb	r7, r0
  *(comDate + 6) = 0;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	4698      	mov	r8, r3
 800f0e2:	71a3      	strb	r3, [r4, #6]
  day = atoi(comDate + 4);
 800f0e4:	a804      	add	r0, sp, #16
 800f0e6:	f005 fe36 	bl	8014d56 <atoi>
 800f0ea:	b2c6      	uxtb	r6, r0
  *(comDate + 3) = 0;
 800f0ec:	4643      	mov	r3, r8
 800f0ee:	70e3      	strb	r3, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800f0f0:	2400      	movs	r4, #0
 800f0f2:	e001      	b.n	800f0f8 <RTC_CalendarConfig+0x48>
 800f0f4:	3401      	adds	r4, #1
 800f0f6:	b2e4      	uxtb	r4, r4
 800f0f8:	2c0b      	cmp	r4, #11
 800f0fa:	d80a      	bhi.n	800f112 <RTC_CalendarConfig+0x62>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800f0fc:	00a3      	lsls	r3, r4, #2
 800f0fe:	4a29      	ldr	r2, [pc, #164]	; (800f1a4 <RTC_CalendarConfig+0xf4>)
 800f100:	5899      	ldr	r1, [r3, r2]
 800f102:	a803      	add	r0, sp, #12
 800f104:	f7f0 fffe 	bl	8000104 <strcmp>
 800f108:	2800      	cmp	r0, #0
 800f10a:	d1f3      	bne.n	800f0f4 <RTC_CalendarConfig+0x44>
			month = i + 1;
 800f10c:	1c65      	adds	r5, r4, #1
 800f10e:	b2ed      	uxtb	r5, r5
 800f110:	e7f0      	b.n	800f0f4 <RTC_CalendarConfig+0x44>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800f112:	466b      	mov	r3, sp
 800f114:	1d98      	adds	r0, r3, #6
 800f116:	f005 fe1e 	bl	8014d56 <atoi>
 800f11a:	b2c3      	uxtb	r3, r0
 800f11c:	4698      	mov	r8, r3
	*(comDate + 5) = 0;
 800f11e:	ac03      	add	r4, sp, #12
 800f120:	2300      	movs	r3, #0
 800f122:	469a      	mov	sl, r3
 800f124:	7163      	strb	r3, [r4, #5]
	minutes = atoi(comTime + 3);
 800f126:	466b      	mov	r3, sp
 800f128:	1cd8      	adds	r0, r3, #3
 800f12a:	f005 fe14 	bl	8014d56 <atoi>
 800f12e:	b2c3      	uxtb	r3, r0
 800f130:	4699      	mov	r9, r3
	*(comDate + 2) = 0;
 800f132:	4653      	mov	r3, sl
 800f134:	70a3      	strb	r3, [r4, #2]
	hours = atoi(comTime);
 800f136:	4668      	mov	r0, sp
 800f138:	f005 fe0d 	bl	8014d56 <atoi>
 800f13c:	b2c4      	uxtb	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800f13e:	a90b      	add	r1, sp, #44	; 0x2c
 800f140:	70cf      	strb	r7, [r1, #3]
  sdatestructure.Month = month;
 800f142:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800f144:	708e      	strb	r6, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800f146:	2301      	movs	r3, #1
 800f148:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800f14a:	2200      	movs	r2, #0
 800f14c:	4816      	ldr	r0, [pc, #88]	; (800f1a8 <RTC_CalendarConfig+0xf8>)
 800f14e:	f004 fed7 	bl	8013f00 <HAL_RTC_SetDate>
 800f152:	2800      	cmp	r0, #0
 800f154:	d119      	bne.n	800f18a <RTC_CalendarConfig+0xda>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800f156:	a906      	add	r1, sp, #24
 800f158:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800f15a:	464b      	mov	r3, r9
 800f15c:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800f15e:	4643      	mov	r3, r8
 800f160:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800f162:	2300      	movs	r3, #0
 800f164:	720b      	strb	r3, [r1, #8]
 800f166:	4a11      	ldr	r2, [pc, #68]	; (800f1ac <RTC_CalendarConfig+0xfc>)
 800f168:	3018      	adds	r0, #24
 800f16a:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f16c:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800f16e:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800f170:	2200      	movs	r2, #0
 800f172:	480d      	ldr	r0, [pc, #52]	; (800f1a8 <RTC_CalendarConfig+0xf8>)
 800f174:	f004 fe46 	bl	8013e04 <HAL_RTC_SetTime>
 800f178:	2800      	cmp	r0, #0
 800f17a:	d10d      	bne.n	800f198 <RTC_CalendarConfig+0xe8>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800f17c:	4a0c      	ldr	r2, [pc, #48]	; (800f1b0 <RTC_CalendarConfig+0x100>)
 800f17e:	2101      	movs	r1, #1
 800f180:	4809      	ldr	r0, [pc, #36]	; (800f1a8 <RTC_CalendarConfig+0xf8>)
 800f182:	f004 ff7f 	bl	8014084 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800f186:	2000      	movs	r0, #0
 800f188:	e000      	b.n	800f18c <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;
 800f18a:	20ff      	movs	r0, #255	; 0xff
}
 800f18c:	b00c      	add	sp, #48	; 0x30
 800f18e:	bc1c      	pop	{r2, r3, r4}
 800f190:	4690      	mov	r8, r2
 800f192:	4699      	mov	r9, r3
 800f194:	46a2      	mov	sl, r4
 800f196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800f198:	20ff      	movs	r0, #255	; 0xff
 800f19a:	e7f7      	b.n	800f18c <RTC_CalendarConfig+0xdc>
 800f19c:	08019c68 	.word	0x08019c68
 800f1a0:	0801cfd8 	.word	0x0801cfd8
 800f1a4:	20000020 	.word	0x20000020
 800f1a8:	200071a0 	.word	0x200071a0
 800f1ac:	20006da0 	.word	0x20006da0
 800f1b0:	000032f2 	.word	0x000032f2

0800f1b4 <RTC_Init>:
{
 800f1b4:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800f1b6:	4a1c      	ldr	r2, [pc, #112]	; (800f228 <RTC_Init+0x74>)
 800f1b8:	6a11      	ldr	r1, [r2, #32]
 800f1ba:	2380      	movs	r3, #128	; 0x80
 800f1bc:	021b      	lsls	r3, r3, #8
 800f1be:	430b      	orrs	r3, r1
 800f1c0:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800f1c2:	481a      	ldr	r0, [pc, #104]	; (800f22c <RTC_Init+0x78>)
 800f1c4:	4b1a      	ldr	r3, [pc, #104]	; (800f230 <RTC_Init+0x7c>)
 800f1c6:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800f1cc:	227c      	movs	r2, #124	; 0x7c
 800f1ce:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800f1d0:	4a18      	ldr	r2, [pc, #96]	; (800f234 <RTC_Init+0x80>)
 800f1d2:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800f1d4:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f1d6:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f1d8:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800f1da:	f004 fdb7 	bl	8013d4c <HAL_RTC_Init>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d11f      	bne.n	800f222 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800f1e2:	2101      	movs	r1, #1
 800f1e4:	4811      	ldr	r0, [pc, #68]	; (800f22c <RTC_Init+0x78>)
 800f1e6:	f004 ff53 	bl	8014090 <HAL_RTCEx_BKUPRead>
 800f1ea:	4b13      	ldr	r3, [pc, #76]	; (800f238 <RTC_Init+0x84>)
 800f1ec:	4298      	cmp	r0, r3
 800f1ee:	d10e      	bne.n	800f20e <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800f1f0:	4b0d      	ldr	r3, [pc, #52]	; (800f228 <RTC_Init+0x74>)
 800f1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f4:	011b      	lsls	r3, r3, #4
 800f1f6:	d502      	bpl.n	800f1fe <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800f1f8:	4b10      	ldr	r3, [pc, #64]	; (800f23c <RTC_Init+0x88>)
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800f1fe:	4b0a      	ldr	r3, [pc, #40]	; (800f228 <RTC_Init+0x74>)
 800f200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f202:	015b      	lsls	r3, r3, #5
 800f204:	d505      	bpl.n	800f212 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800f206:	4b0d      	ldr	r3, [pc, #52]	; (800f23c <RTC_Init+0x88>)
 800f208:	2201      	movs	r2, #1
 800f20a:	701a      	strb	r2, [r3, #0]
 800f20c:	e001      	b.n	800f212 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800f20e:	f7ff ff4f 	bl	800f0b0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800f212:	4a05      	ldr	r2, [pc, #20]	; (800f228 <RTC_Init+0x74>)
 800f214:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800f216:	2380      	movs	r3, #128	; 0x80
 800f218:	045b      	lsls	r3, r3, #17
 800f21a:	430b      	orrs	r3, r1
 800f21c:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800f21e:	2000      	movs	r0, #0
}
 800f220:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800f222:	20ff      	movs	r0, #255	; 0xff
 800f224:	e7fc      	b.n	800f220 <RTC_Init+0x6c>
 800f226:	46c0      	nop			; (mov r8, r8)
 800f228:	40021000 	.word	0x40021000
 800f22c:	200071a0 	.word	0x200071a0
 800f230:	40002800 	.word	0x40002800
 800f234:	000007cf 	.word	0x000007cf
 800f238:	000032f2 	.word	0x000032f2
 800f23c:	20001ec0 	.word	0x20001ec0

0800f240 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800f240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f242:	46c6      	mov	lr, r8
 800f244:	b500      	push	{lr}
 800f246:	b086      	sub	sp, #24
 800f248:	ac0c      	add	r4, sp, #48	; 0x30
 800f24a:	7827      	ldrb	r7, [r4, #0]
 800f24c:	ac0d      	add	r4, sp, #52	; 0x34
 800f24e:	7824      	ldrb	r4, [r4, #0]
 800f250:	46a0      	mov	r8, r4
 800f252:	ac0e      	add	r4, sp, #56	; 0x38
 800f254:	7825      	ldrb	r5, [r4, #0]
 800f256:	ac0f      	add	r4, sp, #60	; 0x3c
 800f258:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800f25a:	3230      	adds	r2, #48	; 0x30
 800f25c:	ac05      	add	r4, sp, #20
 800f25e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800f260:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800f262:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800f264:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800f266:	2200      	movs	r2, #0
 800f268:	0021      	movs	r1, r4
 800f26a:	481f      	ldr	r0, [pc, #124]	; (800f2e8 <BOS_CalendarConfig+0xa8>)
 800f26c:	f004 fe48 	bl	8013f00 <HAL_RTC_SetDate>
 800f270:	2800      	cmp	r0, #0
 800f272:	d134      	bne.n	800f2de <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800f274:	466b      	mov	r3, sp
 800f276:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800f278:	4642      	mov	r2, r8
 800f27a:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800f27c:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800f27e:	2300      	movs	r3, #0
 800f280:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800f282:	2e01      	cmp	r6, #1
 800f284:	d01e      	beq.n	800f2c4 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800f286:	2e02      	cmp	r6, #2
 800f288:	d022      	beq.n	800f2d0 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800f28a:	4b18      	ldr	r3, [pc, #96]	; (800f2ec <BOS_CalendarConfig+0xac>)
 800f28c:	2218      	movs	r2, #24
 800f28e:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800f290:	2200      	movs	r2, #0
 800f292:	4669      	mov	r1, sp
 800f294:	4814      	ldr	r0, [pc, #80]	; (800f2e8 <BOS_CalendarConfig+0xa8>)
 800f296:	f004 fdb5 	bl	8013e04 <HAL_RTC_SetTime>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d121      	bne.n	800f2e2 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800f29e:	4a13      	ldr	r2, [pc, #76]	; (800f2ec <BOS_CalendarConfig+0xac>)
 800f2a0:	7b53      	ldrb	r3, [r2, #13]
 800f2a2:	021b      	lsls	r3, r3, #8
 800f2a4:	7911      	ldrb	r1, [r2, #4]
 800f2a6:	4319      	orrs	r1, r3
 800f2a8:	308d      	adds	r0, #141	; 0x8d
 800f2aa:	0040      	lsls	r0, r0, #1
 800f2ac:	f7f8 fd60 	bl	8007d70 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800f2b0:	4a0f      	ldr	r2, [pc, #60]	; (800f2f0 <BOS_CalendarConfig+0xb0>)
 800f2b2:	2101      	movs	r1, #1
 800f2b4:	480c      	ldr	r0, [pc, #48]	; (800f2e8 <BOS_CalendarConfig+0xa8>)
 800f2b6:	f004 fee5 	bl	8014084 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800f2ba:	2000      	movs	r0, #0
}
 800f2bc:	b006      	add	sp, #24
 800f2be:	bc04      	pop	{r2}
 800f2c0:	4690      	mov	r8, r2
 800f2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800f2c4:	466a      	mov	r2, sp
 800f2c6:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800f2c8:	4b08      	ldr	r3, [pc, #32]	; (800f2ec <BOS_CalendarConfig+0xac>)
 800f2ca:	220c      	movs	r2, #12
 800f2cc:	735a      	strb	r2, [r3, #13]
 800f2ce:	e7df      	b.n	800f290 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800f2d0:	2340      	movs	r3, #64	; 0x40
 800f2d2:	466a      	mov	r2, sp
 800f2d4:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800f2d6:	4b05      	ldr	r3, [pc, #20]	; (800f2ec <BOS_CalendarConfig+0xac>)
 800f2d8:	220c      	movs	r2, #12
 800f2da:	735a      	strb	r2, [r3, #13]
 800f2dc:	e7d8      	b.n	800f290 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800f2de:	20ff      	movs	r0, #255	; 0xff
 800f2e0:	e7ec      	b.n	800f2bc <BOS_CalendarConfig+0x7c>
		return BOS_ERROR;
 800f2e2:	20ff      	movs	r0, #255	; 0xff
 800f2e4:	e7ea      	b.n	800f2bc <BOS_CalendarConfig+0x7c>
 800f2e6:	46c0      	nop			; (mov r8, r8)
 800f2e8:	200071a0 	.word	0x200071a0
 800f2ec:	20006da0 	.word	0x20006da0
 800f2f0:	000032f2 	.word	0x000032f2

0800f2f4 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800f2f4:	b530      	push	{r4, r5, lr}
 800f2f6:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800f2f8:	4d16      	ldr	r5, [pc, #88]	; (800f354 <GetTimeDate+0x60>)
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	a902      	add	r1, sp, #8
 800f2fe:	0028      	movs	r0, r5
 800f300:	f004 fe74 	bl	8013fec <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800f304:	ac07      	add	r4, sp, #28
 800f306:	2200      	movs	r2, #0
 800f308:	0021      	movs	r1, r4
 800f30a:	0028      	movs	r0, r5
 800f30c:	f004 fe96 	bl	801403c <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800f310:	ab02      	add	r3, sp, #8
 800f312:	7a1a      	ldrb	r2, [r3, #8]
 800f314:	09d2      	lsrs	r2, r2, #7
 800f316:	3201      	adds	r2, #1
 800f318:	4b0f      	ldr	r3, [pc, #60]	; (800f358 <GetTimeDate+0x64>)
 800f31a:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800f31c:	9a03      	ldr	r2, [sp, #12]
 800f31e:	9201      	str	r2, [sp, #4]
 800f320:	0852      	lsrs	r2, r2, #1
 800f322:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800f324:	aa02      	add	r2, sp, #8
 800f326:	7892      	ldrb	r2, [r2, #2]
 800f328:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800f32a:	aa02      	add	r2, sp, #8
 800f32c:	7852      	ldrb	r2, [r2, #1]
 800f32e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800f330:	aa02      	add	r2, sp, #8
 800f332:	7812      	ldrb	r2, [r2, #0]
 800f334:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800f336:	78a2      	ldrb	r2, [r4, #2]
 800f338:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800f33a:	7862      	ldrb	r2, [r4, #1]
 800f33c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800f33e:	7822      	ldrb	r2, [r4, #0]
 800f340:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800f342:	78e2      	ldrb	r2, [r4, #3]
 800f344:	21fa      	movs	r1, #250	; 0xfa
 800f346:	00c9      	lsls	r1, r1, #3
 800f348:	468c      	mov	ip, r1
 800f34a:	4462      	add	r2, ip
 800f34c:	831a      	strh	r2, [r3, #24]
}
 800f34e:	b009      	add	sp, #36	; 0x24
 800f350:	bd30      	pop	{r4, r5, pc}
 800f352:	46c0      	nop			; (mov r8, r8)
 800f354:	200071a0 	.word	0x200071a0
 800f358:	20006da0 	.word	0x20006da0

0800f35c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800f35c:	b530      	push	{r4, r5, lr}
 800f35e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800f360:	4a12      	ldr	r2, [pc, #72]	; (800f3ac <TIM_USEC_Init+0x50>)
 800f362:	69d1      	ldr	r1, [r2, #28]
 800f364:	2080      	movs	r0, #128	; 0x80
 800f366:	0040      	lsls	r0, r0, #1
 800f368:	4301      	orrs	r1, r0
 800f36a:	61d1      	str	r1, [r2, #28]
 800f36c:	69d3      	ldr	r3, [r2, #28]
 800f36e:	4003      	ands	r3, r0
 800f370:	9301      	str	r3, [sp, #4]
 800f372:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800f374:	4c0e      	ldr	r4, [pc, #56]	; (800f3b0 <TIM_USEC_Init+0x54>)
 800f376:	4b0f      	ldr	r3, [pc, #60]	; (800f3b4 <TIM_USEC_Init+0x58>)
 800f378:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800f37a:	f004 fc07 	bl	8013b8c <HAL_RCC_GetPCLK1Freq>
 800f37e:	490e      	ldr	r1, [pc, #56]	; (800f3b8 <TIM_USEC_Init+0x5c>)
 800f380:	f7f0 fee6 	bl	8000150 <__udivsi3>
 800f384:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f386:	2500      	movs	r5, #0
 800f388:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800f38a:	4b0c      	ldr	r3, [pc, #48]	; (800f3bc <TIM_USEC_Init+0x60>)
 800f38c:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800f38e:	0020      	movs	r0, r4
 800f390:	f004 fee0 	bl	8014154 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f394:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f396:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800f398:	a902      	add	r1, sp, #8
 800f39a:	0020      	movs	r0, r4
 800f39c:	f004 fef4 	bl	8014188 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800f3a0:	0020      	movs	r0, r4
 800f3a2:	f004 fe7c 	bl	801409e <HAL_TIM_Base_Start>
}
 800f3a6:	b005      	add	sp, #20
 800f3a8:	bd30      	pop	{r4, r5, pc}
 800f3aa:	46c0      	nop			; (mov r8, r8)
 800f3ac:	40021000 	.word	0x40021000
 800f3b0:	200071fc 	.word	0x200071fc
 800f3b4:	40002000 	.word	0x40002000
 800f3b8:	000f4240 	.word	0x000f4240
 800f3bc:	0000ffff 	.word	0x0000ffff

0800f3c0 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800f3c0:	b530      	push	{r4, r5, lr}
 800f3c2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800f3c4:	4a12      	ldr	r2, [pc, #72]	; (800f410 <TIM_MSEC_Init+0x50>)
 800f3c6:	6991      	ldr	r1, [r2, #24]
 800f3c8:	2080      	movs	r0, #128	; 0x80
 800f3ca:	0240      	lsls	r0, r0, #9
 800f3cc:	4301      	orrs	r1, r0
 800f3ce:	6191      	str	r1, [r2, #24]
 800f3d0:	6993      	ldr	r3, [r2, #24]
 800f3d2:	4003      	ands	r3, r0
 800f3d4:	9301      	str	r3, [sp, #4]
 800f3d6:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800f3d8:	4c0e      	ldr	r4, [pc, #56]	; (800f414 <TIM_MSEC_Init+0x54>)
 800f3da:	4b0f      	ldr	r3, [pc, #60]	; (800f418 <TIM_MSEC_Init+0x58>)
 800f3dc:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800f3de:	f004 fbd5 	bl	8013b8c <HAL_RCC_GetPCLK1Freq>
 800f3e2:	21fa      	movs	r1, #250	; 0xfa
 800f3e4:	0089      	lsls	r1, r1, #2
 800f3e6:	f7f0 feb3 	bl	8000150 <__udivsi3>
 800f3ea:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f3ec:	2500      	movs	r5, #0
 800f3ee:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800f3f0:	4b0a      	ldr	r3, [pc, #40]	; (800f41c <TIM_MSEC_Init+0x5c>)
 800f3f2:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800f3f4:	0020      	movs	r0, r4
 800f3f6:	f004 fead 	bl	8014154 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f3fa:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f3fc:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800f3fe:	a902      	add	r1, sp, #8
 800f400:	0020      	movs	r0, r4
 800f402:	f004 fec1 	bl	8014188 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800f406:	0020      	movs	r0, r4
 800f408:	f004 fe49 	bl	801409e <HAL_TIM_Base_Start>
}
 800f40c:	b005      	add	sp, #20
 800f40e:	bd30      	pop	{r4, r5, pc}
 800f410:	40021000 	.word	0x40021000
 800f414:	200071c0 	.word	0x200071c0
 800f418:	40014000 	.word	0x40014000
 800f41c:	0000ffff 	.word	0x0000ffff

0800f420 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800f420:	b510      	push	{r4, lr}
 800f422:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800f424:	f002 f9ea 	bl	80117fc <vPortEnterCritical>
	
	if (Delay)
 800f428:	2c00      	cmp	r4, #0
 800f42a:	d006      	beq.n	800f43a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800f42c:	4b04      	ldr	r3, [pc, #16]	; (800f440 <StartMicroDelay+0x20>)
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800f432:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f434:	1a5b      	subs	r3, r3, r1
 800f436:	42a3      	cmp	r3, r4
 800f438:	d9fb      	bls.n	800f432 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800f43a:	f002 f9eb 	bl	8011814 <vPortExitCritical>
}
 800f43e:	bd10      	pop	{r4, pc}
 800f440:	200071fc 	.word	0x200071fc

0800f444 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800f444:	b510      	push	{r4, lr}
 800f446:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800f448:	f002 f9d8 	bl	80117fc <vPortEnterCritical>
	
	if (Delay)
 800f44c:	2c00      	cmp	r4, #0
 800f44e:	d006      	beq.n	800f45e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800f450:	4b04      	ldr	r3, [pc, #16]	; (800f464 <StartMilliDelay+0x20>)
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800f456:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f458:	1a5b      	subs	r3, r3, r1
 800f45a:	42a3      	cmp	r3, r4
 800f45c:	d9fb      	bls.n	800f456 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800f45e:	f002 f9d9 	bl	8011814 <vPortExitCritical>
}
 800f462:	bd10      	pop	{r4, pc}
 800f464:	200071c0 	.word	0x200071c0

0800f468 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800f468:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800f46a:	4809      	ldr	r0, [pc, #36]	; (800f490 <MX_USART2_UART_Init+0x28>)
 800f46c:	4b09      	ldr	r3, [pc, #36]	; (800f494 <MX_USART2_UART_Init+0x2c>)
 800f46e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f470:	23e1      	movs	r3, #225	; 0xe1
 800f472:	031b      	lsls	r3, r3, #12
 800f474:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f476:	2300      	movs	r3, #0
 800f478:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800f47a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800f47c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f47e:	220c      	movs	r2, #12
 800f480:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f482:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f484:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f486:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f488:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800f48a:	f005 fb03 	bl	8014a94 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800f48e:	bd10      	pop	{r4, pc}
 800f490:	20007104 	.word	0x20007104
 800f494:	40004400 	.word	0x40004400

0800f498 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800f498:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800f49a:	4809      	ldr	r0, [pc, #36]	; (800f4c0 <MX_USART3_UART_Init+0x28>)
 800f49c:	4b09      	ldr	r3, [pc, #36]	; (800f4c4 <MX_USART3_UART_Init+0x2c>)
 800f49e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f4a0:	23e1      	movs	r3, #225	; 0xe1
 800f4a2:	031b      	lsls	r3, r3, #12
 800f4a4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800f4aa:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800f4ac:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800f4ae:	220c      	movs	r2, #12
 800f4b0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f4b2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800f4b4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f4b6:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f4b8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800f4ba:	f005 faeb 	bl	8014a94 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800f4be:	bd10      	pop	{r4, pc}
 800f4c0:	20006ec4 	.word	0x20006ec4
 800f4c4:	40004800 	.word	0x40004800

0800f4c8 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800f4c8:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800f4ca:	4809      	ldr	r0, [pc, #36]	; (800f4f0 <MX_USART4_UART_Init+0x28>)
 800f4cc:	4b09      	ldr	r3, [pc, #36]	; (800f4f4 <MX_USART4_UART_Init+0x2c>)
 800f4ce:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f4d0:	23e1      	movs	r3, #225	; 0xe1
 800f4d2:	031b      	lsls	r3, r3, #12
 800f4d4:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800f4da:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800f4dc:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800f4de:	220c      	movs	r2, #12
 800f4e0:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f4e2:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800f4e4:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f4e6:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f4e8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800f4ea:	f005 fad3 	bl	8014a94 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800f4ee:	bd10      	pop	{r4, pc}
 800f4f0:	20007090 	.word	0x20007090
 800f4f4:	40004c00 	.word	0x40004c00

0800f4f8 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800f4f8:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800f4fa:	4809      	ldr	r0, [pc, #36]	; (800f520 <MX_USART5_UART_Init+0x28>)
 800f4fc:	4b09      	ldr	r3, [pc, #36]	; (800f524 <MX_USART5_UART_Init+0x2c>)
 800f4fe:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f500:	23e1      	movs	r3, #225	; 0xe1
 800f502:	031b      	lsls	r3, r3, #12
 800f504:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800f506:	2300      	movs	r3, #0
 800f508:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800f50a:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800f50c:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800f50e:	220c      	movs	r2, #12
 800f510:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f512:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800f514:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f516:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f518:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800f51a:	f005 fabb 	bl	8014a94 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800f51e:	bd10      	pop	{r4, pc}
 800f520:	20006f38 	.word	0x20006f38
 800f524:	40005000 	.word	0x40005000

0800f528 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800f528:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800f52a:	4809      	ldr	r0, [pc, #36]	; (800f550 <MX_USART6_UART_Init+0x28>)
 800f52c:	4b09      	ldr	r3, [pc, #36]	; (800f554 <MX_USART6_UART_Init+0x2c>)
 800f52e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800f530:	23e1      	movs	r3, #225	; 0xe1
 800f532:	031b      	lsls	r3, r3, #12
 800f534:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800f536:	2300      	movs	r3, #0
 800f538:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800f53a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800f53c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800f53e:	220c      	movs	r2, #12
 800f540:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f542:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800f544:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800f546:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f548:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800f54a:	f005 faa3 	bl	8014a94 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800f54e:	bd10      	pop	{r4, pc}
 800f550:	20007020 	.word	0x20007020
 800f554:	40011400 	.word	0x40011400

0800f558 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f55a:	46ce      	mov	lr, r9
 800f55c:	b500      	push	{lr}
 800f55e:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800f560:	6803      	ldr	r3, [r0, #0]
 800f562:	4a7a      	ldr	r2, [pc, #488]	; (800f74c <HAL_UART_MspInit+0x1f4>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d010      	beq.n	800f58a <HAL_UART_MspInit+0x32>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800f568:	4a79      	ldr	r2, [pc, #484]	; (800f750 <HAL_UART_MspInit+0x1f8>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d011      	beq.n	800f592 <HAL_UART_MspInit+0x3a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800f56e:	4a79      	ldr	r2, [pc, #484]	; (800f754 <HAL_UART_MspInit+0x1fc>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d03a      	beq.n	800f5ea <HAL_UART_MspInit+0x92>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800f574:	4a78      	ldr	r2, [pc, #480]	; (800f758 <HAL_UART_MspInit+0x200>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d064      	beq.n	800f644 <HAL_UART_MspInit+0xec>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800f57a:	4a78      	ldr	r2, [pc, #480]	; (800f75c <HAL_UART_MspInit+0x204>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d100      	bne.n	800f582 <HAL_UART_MspInit+0x2a>
 800f580:	e08b      	b.n	800f69a <HAL_UART_MspInit+0x142>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800f582:	4a77      	ldr	r2, [pc, #476]	; (800f760 <HAL_UART_MspInit+0x208>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d100      	bne.n	800f58a <HAL_UART_MspInit+0x32>
 800f588:	e0b2      	b.n	800f6f0 <HAL_UART_MspInit+0x198>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800f58a:	b00a      	add	sp, #40	; 0x28
 800f58c:	bc04      	pop	{r2}
 800f58e:	4691      	mov	r9, r2
 800f590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART2_CLK_ENABLE();
 800f592:	4a74      	ldr	r2, [pc, #464]	; (800f764 <HAL_UART_MspInit+0x20c>)
 800f594:	69d1      	ldr	r1, [r2, #28]
 800f596:	2080      	movs	r0, #128	; 0x80
 800f598:	0280      	lsls	r0, r0, #10
 800f59a:	4301      	orrs	r1, r0
 800f59c:	61d1      	str	r1, [r2, #28]
 800f59e:	69d3      	ldr	r3, [r2, #28]
 800f5a0:	4003      	ands	r3, r0
 800f5a2:	9300      	str	r3, [sp, #0]
 800f5a4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800f5a6:	2304      	movs	r3, #4
 800f5a8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5aa:	2702      	movs	r7, #2
 800f5ac:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f5ae:	2401      	movs	r4, #1
 800f5b0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f5b2:	2603      	movs	r6, #3
 800f5b4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800f5b6:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800f5b8:	2590      	movs	r5, #144	; 0x90
 800f5ba:	05ed      	lsls	r5, r5, #23
 800f5bc:	a905      	add	r1, sp, #20
 800f5be:	0028      	movs	r0, r5
 800f5c0:	f003 fd56 	bl	8013070 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800f5c4:	2308      	movs	r3, #8
 800f5c6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5c8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f5ca:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f5cc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800f5ce:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800f5d0:	a905      	add	r1, sp, #20
 800f5d2:	0028      	movs	r0, r5
 800f5d4:	f003 fd4c 	bl	8013070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800f5d8:	2200      	movs	r2, #0
 800f5da:	2101      	movs	r1, #1
 800f5dc:	201c      	movs	r0, #28
 800f5de:	f002 fdcf 	bl	8012180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f5e2:	201c      	movs	r0, #28
 800f5e4:	f002 fdfc 	bl	80121e0 <HAL_NVIC_EnableIRQ>
 800f5e8:	e7cf      	b.n	800f58a <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800f5ea:	4a5e      	ldr	r2, [pc, #376]	; (800f764 <HAL_UART_MspInit+0x20c>)
 800f5ec:	69d1      	ldr	r1, [r2, #28]
 800f5ee:	2080      	movs	r0, #128	; 0x80
 800f5f0:	02c0      	lsls	r0, r0, #11
 800f5f2:	4301      	orrs	r1, r0
 800f5f4:	61d1      	str	r1, [r2, #28]
 800f5f6:	69d3      	ldr	r3, [r2, #28]
 800f5f8:	4003      	ands	r3, r0
 800f5fa:	9301      	str	r3, [sp, #4]
 800f5fc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800f5fe:	2380      	movs	r3, #128	; 0x80
 800f600:	00db      	lsls	r3, r3, #3
 800f602:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f604:	2402      	movs	r4, #2
 800f606:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f608:	2701      	movs	r7, #1
 800f60a:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f60c:	2603      	movs	r6, #3
 800f60e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800f610:	2504      	movs	r5, #4
 800f612:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800f614:	a905      	add	r1, sp, #20
 800f616:	4854      	ldr	r0, [pc, #336]	; (800f768 <HAL_UART_MspInit+0x210>)
 800f618:	f003 fd2a 	bl	8013070 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800f61c:	2380      	movs	r3, #128	; 0x80
 800f61e:	011b      	lsls	r3, r3, #4
 800f620:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f622:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f624:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f626:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800f628:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800f62a:	a905      	add	r1, sp, #20
 800f62c:	484e      	ldr	r0, [pc, #312]	; (800f768 <HAL_UART_MspInit+0x210>)
 800f62e:	f003 fd1f 	bl	8013070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800f632:	2200      	movs	r2, #0
 800f634:	2101      	movs	r1, #1
 800f636:	201d      	movs	r0, #29
 800f638:	f002 fda2 	bl	8012180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800f63c:	201d      	movs	r0, #29
 800f63e:	f002 fdcf 	bl	80121e0 <HAL_NVIC_EnableIRQ>
 800f642:	e7a2      	b.n	800f58a <HAL_UART_MspInit+0x32>
    __USART4_CLK_ENABLE();
 800f644:	4a47      	ldr	r2, [pc, #284]	; (800f764 <HAL_UART_MspInit+0x20c>)
 800f646:	69d1      	ldr	r1, [r2, #28]
 800f648:	2080      	movs	r0, #128	; 0x80
 800f64a:	0300      	lsls	r0, r0, #12
 800f64c:	4301      	orrs	r1, r0
 800f64e:	61d1      	str	r1, [r2, #28]
 800f650:	69d3      	ldr	r3, [r2, #28]
 800f652:	4003      	ands	r3, r0
 800f654:	9302      	str	r3, [sp, #8]
 800f656:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800f658:	2401      	movs	r4, #1
 800f65a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f65c:	2502      	movs	r5, #2
 800f65e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f660:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f662:	2603      	movs	r6, #3
 800f664:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;	
 800f666:	2704      	movs	r7, #4
 800f668:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800f66a:	a905      	add	r1, sp, #20
 800f66c:	2090      	movs	r0, #144	; 0x90
 800f66e:	05c0      	lsls	r0, r0, #23
 800f670:	f003 fcfe 	bl	8013070 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800f674:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f676:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f678:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f67a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;
 800f67c:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800f67e:	a905      	add	r1, sp, #20
 800f680:	2090      	movs	r0, #144	; 0x90
 800f682:	05c0      	lsls	r0, r0, #23
 800f684:	f003 fcf4 	bl	8013070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800f688:	2200      	movs	r2, #0
 800f68a:	2101      	movs	r1, #1
 800f68c:	201d      	movs	r0, #29
 800f68e:	f002 fd77 	bl	8012180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800f692:	201d      	movs	r0, #29
 800f694:	f002 fda4 	bl	80121e0 <HAL_NVIC_EnableIRQ>
 800f698:	e777      	b.n	800f58a <HAL_UART_MspInit+0x32>
    __USART5_CLK_ENABLE();
 800f69a:	4a32      	ldr	r2, [pc, #200]	; (800f764 <HAL_UART_MspInit+0x20c>)
 800f69c:	69d1      	ldr	r1, [r2, #28]
 800f69e:	2080      	movs	r0, #128	; 0x80
 800f6a0:	0340      	lsls	r0, r0, #13
 800f6a2:	4301      	orrs	r1, r0
 800f6a4:	61d1      	str	r1, [r2, #28]
 800f6a6:	69d3      	ldr	r3, [r2, #28]
 800f6a8:	4003      	ands	r3, r0
 800f6aa:	9303      	str	r3, [sp, #12]
 800f6ac:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800f6ae:	2308      	movs	r3, #8
 800f6b0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6b2:	2402      	movs	r4, #2
 800f6b4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f6b6:	2701      	movs	r7, #1
 800f6b8:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f6ba:	2603      	movs	r6, #3
 800f6bc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800f6be:	2504      	movs	r5, #4
 800f6c0:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800f6c2:	a905      	add	r1, sp, #20
 800f6c4:	4828      	ldr	r0, [pc, #160]	; (800f768 <HAL_UART_MspInit+0x210>)
 800f6c6:	f003 fcd3 	bl	8013070 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800f6ca:	2310      	movs	r3, #16
 800f6cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6ce:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f6d0:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f6d2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800f6d4:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800f6d6:	a905      	add	r1, sp, #20
 800f6d8:	4823      	ldr	r0, [pc, #140]	; (800f768 <HAL_UART_MspInit+0x210>)
 800f6da:	f003 fcc9 	bl	8013070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800f6de:	2200      	movs	r2, #0
 800f6e0:	2101      	movs	r1, #1
 800f6e2:	201d      	movs	r0, #29
 800f6e4:	f002 fd4c 	bl	8012180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800f6e8:	201d      	movs	r0, #29
 800f6ea:	f002 fd79 	bl	80121e0 <HAL_NVIC_EnableIRQ>
 800f6ee:	e74c      	b.n	800f58a <HAL_UART_MspInit+0x32>
    __USART6_CLK_ENABLE();
 800f6f0:	4b1c      	ldr	r3, [pc, #112]	; (800f764 <HAL_UART_MspInit+0x20c>)
 800f6f2:	699a      	ldr	r2, [r3, #24]
 800f6f4:	2420      	movs	r4, #32
 800f6f6:	4322      	orrs	r2, r4
 800f6f8:	619a      	str	r2, [r3, #24]
 800f6fa:	699b      	ldr	r3, [r3, #24]
 800f6fc:	4023      	ands	r3, r4
 800f6fe:	9304      	str	r3, [sp, #16]
 800f700:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800f702:	2310      	movs	r3, #16
 800f704:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f706:	3b0e      	subs	r3, #14
 800f708:	4699      	mov	r9, r3
 800f70a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f70c:	2501      	movs	r5, #1
 800f70e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f710:	2703      	movs	r7, #3
 800f712:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800f714:	2605      	movs	r6, #5
 800f716:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800f718:	a905      	add	r1, sp, #20
 800f71a:	2090      	movs	r0, #144	; 0x90
 800f71c:	05c0      	lsls	r0, r0, #23
 800f71e:	f003 fca7 	bl	8013070 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800f722:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f724:	464b      	mov	r3, r9
 800f726:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f728:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800f72a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800f72c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800f72e:	a905      	add	r1, sp, #20
 800f730:	2090      	movs	r0, #144	; 0x90
 800f732:	05c0      	lsls	r0, r0, #23
 800f734:	f003 fc9c 	bl	8013070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800f738:	2200      	movs	r2, #0
 800f73a:	2101      	movs	r1, #1
 800f73c:	201d      	movs	r0, #29
 800f73e:	f002 fd1f 	bl	8012180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800f742:	201d      	movs	r0, #29
 800f744:	f002 fd4c 	bl	80121e0 <HAL_NVIC_EnableIRQ>
}
 800f748:	e71f      	b.n	800f58a <HAL_UART_MspInit+0x32>
 800f74a:	46c0      	nop			; (mov r8, r8)
 800f74c:	40013800 	.word	0x40013800
 800f750:	40004400 	.word	0x40004400
 800f754:	40004800 	.word	0x40004800
 800f758:	40004c00 	.word	0x40004c00
 800f75c:	40005000 	.word	0x40005000
 800f760:	40011400 	.word	0x40011400
 800f764:	40021000 	.word	0x40021000
 800f768:	48000400 	.word	0x48000400

0800f76c <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800f76c:	2805      	cmp	r0, #5
 800f76e:	d80b      	bhi.n	800f788 <GetUart+0x1c>
 800f770:	0080      	lsls	r0, r0, #2
 800f772:	4b07      	ldr	r3, [pc, #28]	; (800f790 <GetUart+0x24>)
 800f774:	581b      	ldr	r3, [r3, r0]
 800f776:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			return P1uart;	
 800f778:	4806      	ldr	r0, [pc, #24]	; (800f794 <GetUart+0x28>)
 800f77a:	e008      	b.n	800f78e <GetUart+0x22>
		case P2 :
			return P2uart;
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800f77c:	4806      	ldr	r0, [pc, #24]	; (800f798 <GetUart+0x2c>)
 800f77e:	e006      	b.n	800f78e <GetUart+0x22>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800f780:	4806      	ldr	r0, [pc, #24]	; (800f79c <GetUart+0x30>)
 800f782:	e004      	b.n	800f78e <GetUart+0x22>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800f784:	4806      	ldr	r0, [pc, #24]	; (800f7a0 <GetUart+0x34>)
 800f786:	e002      	b.n	800f78e <GetUart+0x22>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800f788:	2000      	movs	r0, #0
 800f78a:	e000      	b.n	800f78e <GetUart+0x22>
			return P2uart;
 800f78c:	4805      	ldr	r0, [pc, #20]	; (800f7a4 <GetUart+0x38>)
	}		
}
 800f78e:	4770      	bx	lr
 800f790:	0801cfe4 	.word	0x0801cfe4
 800f794:	20007090 	.word	0x20007090
 800f798:	20007020 	.word	0x20007020
 800f79c:	20006ec4 	.word	0x20006ec4
 800f7a0:	20006f38 	.word	0x20006f38
 800f7a4:	20007104 	.word	0x20007104

0800f7a8 <writePxMutex>:
{
 800f7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	0005      	movs	r5, r0
 800f7ae:	9101      	str	r1, [sp, #4]
 800f7b0:	0017      	movs	r7, r2
 800f7b2:	001e      	movs	r6, r3
	if (GetUart(port) != NULL) {
 800f7b4:	f7ff ffda 	bl	800f76c <GetUart>
 800f7b8:	1e04      	subs	r4, r0, #0
 800f7ba:	d01c      	beq.n	800f7f6 <writePxMutex+0x4e>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800f7bc:	00ab      	lsls	r3, r5, #2
 800f7be:	4a10      	ldr	r2, [pc, #64]	; (800f800 <writePxMutex+0x58>)
 800f7c0:	5898      	ldr	r0, [r3, r2]
 800f7c2:	0031      	movs	r1, r6
 800f7c4:	f000 f942 	bl	800fa4c <osSemaphoreWait>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d101      	bne.n	800f7d0 <writePxMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR;
 800f7cc:	2601      	movs	r6, #1
 800f7ce:	e008      	b.n	800f7e2 <writePxMutex+0x3a>
 800f7d0:	2601      	movs	r6, #1
 800f7d2:	e011      	b.n	800f7f8 <writePxMutex+0x50>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800f7d4:	9b08      	ldr	r3, [sp, #32]
 800f7d6:	003a      	movs	r2, r7
 800f7d8:	9901      	ldr	r1, [sp, #4]
 800f7da:	0020      	movs	r0, r4
 800f7dc:	f005 f8b0 	bl	8014940 <HAL_UART_Transmit>
 800f7e0:	0006      	movs	r6, r0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800f7e2:	2e00      	cmp	r6, #0
 800f7e4:	d001      	beq.n	800f7ea <writePxMutex+0x42>
 800f7e6:	2e03      	cmp	r6, #3
 800f7e8:	d1f4      	bne.n	800f7d4 <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800f7ea:	00ad      	lsls	r5, r5, #2
 800f7ec:	4b04      	ldr	r3, [pc, #16]	; (800f800 <writePxMutex+0x58>)
 800f7ee:	58e8      	ldr	r0, [r5, r3]
 800f7f0:	f000 f962 	bl	800fab8 <osSemaphoreRelease>
 800f7f4:	e000      	b.n	800f7f8 <writePxMutex+0x50>
	HAL_StatusTypeDef result = HAL_ERROR;
 800f7f6:	2601      	movs	r6, #1
}
 800f7f8:	0030      	movs	r0, r6
 800f7fa:	b003      	add	sp, #12
 800f7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7fe:	46c0      	nop			; (mov r8, r8)
 800f800:	20006e20 	.word	0x20006e20

0800f804 <writePxITMutex>:
{
 800f804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f806:	b083      	sub	sp, #12
 800f808:	0004      	movs	r4, r0
 800f80a:	9101      	str	r1, [sp, #4]
 800f80c:	0017      	movs	r7, r2
 800f80e:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800f810:	f7ff ffac 	bl	800f76c <GetUart>
 800f814:	1e06      	subs	r6, r0, #0
 800f816:	d00f      	beq.n	800f838 <writePxITMutex+0x34>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800f818:	00a4      	lsls	r4, r4, #2
 800f81a:	4b09      	ldr	r3, [pc, #36]	; (800f840 <writePxITMutex+0x3c>)
 800f81c:	58e0      	ldr	r0, [r4, r3]
 800f81e:	0029      	movs	r1, r5
 800f820:	f000 f914 	bl	800fa4c <osSemaphoreWait>
 800f824:	2800      	cmp	r0, #0
 800f826:	d001      	beq.n	800f82c <writePxITMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800f828:	2001      	movs	r0, #1
 800f82a:	e006      	b.n	800f83a <writePxITMutex+0x36>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800f82c:	003a      	movs	r2, r7
 800f82e:	9901      	ldr	r1, [sp, #4]
 800f830:	0030      	movs	r0, r6
 800f832:	f004 fcec 	bl	801420e <HAL_UART_Transmit_IT>
 800f836:	e000      	b.n	800f83a <writePxITMutex+0x36>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800f838:	2001      	movs	r0, #1
}
 800f83a:	b003      	add	sp, #12
 800f83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f83e:	46c0      	nop			; (mov r8, r8)
 800f840:	20006e20 	.word	0x20006e20

0800f844 <writePxDMAMutex>:
{
 800f844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f846:	b083      	sub	sp, #12
 800f848:	0004      	movs	r4, r0
 800f84a:	000f      	movs	r7, r1
 800f84c:	9201      	str	r2, [sp, #4]
 800f84e:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800f850:	f7ff ff8c 	bl	800f76c <GetUart>
 800f854:	1e05      	subs	r5, r0, #0
	if (hUart != NULL) {	
 800f856:	d012      	beq.n	800f87e <writePxDMAMutex+0x3a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800f858:	00a4      	lsls	r4, r4, #2
 800f85a:	4b0a      	ldr	r3, [pc, #40]	; (800f884 <writePxDMAMutex+0x40>)
 800f85c:	58e0      	ldr	r0, [r4, r3]
 800f85e:	0031      	movs	r1, r6
 800f860:	f000 f8f4 	bl	800fa4c <osSemaphoreWait>
 800f864:	2800      	cmp	r0, #0
 800f866:	d001      	beq.n	800f86c <writePxDMAMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800f868:	2001      	movs	r0, #1
 800f86a:	e009      	b.n	800f880 <writePxDMAMutex+0x3c>
			DMA_MSG_TX_Setup(hUart);
 800f86c:	0028      	movs	r0, r5
 800f86e:	f7ff f989 	bl	800eb84 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800f872:	9a01      	ldr	r2, [sp, #4]
 800f874:	0039      	movs	r1, r7
 800f876:	0028      	movs	r0, r5
 800f878:	f004 fd78 	bl	801436c <HAL_UART_Transmit_DMA>
 800f87c:	e000      	b.n	800f880 <writePxDMAMutex+0x3c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800f87e:	2001      	movs	r0, #1
}
 800f880:	b003      	add	sp, #12
 800f882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f884:	20006e20 	.word	0x20006e20

0800f888 <UpdateBaudrate>:
{
 800f888:	b510      	push	{r4, lr}
 800f88a:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800f88c:	f7ff ff6e 	bl	800f76c <GetUart>
	huart->Init.BaudRate = baudrate;
 800f890:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800f892:	f005 f8ff 	bl	8014a94 <HAL_UART_Init>
}
 800f896:	2000      	movs	r0, #0
 800f898:	bd10      	pop	{r4, pc}
	...

0800f89c <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800f89c:	b570      	push	{r4, r5, r6, lr}
 800f89e:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800f8a0:	d003      	beq.n	800f8aa <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800f8a2:	2901      	cmp	r1, #1
 800f8a4:	d002      	beq.n	800f8ac <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800f8a6:	2900      	cmp	r1, #0
 800f8a8:	d016      	beq.n	800f8d8 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800f8aa:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800f8ac:	f7fc fb7c 	bl	800bfa8 <GetPort>
 800f8b0:	3801      	subs	r0, #1
 800f8b2:	2180      	movs	r1, #128	; 0x80
 800f8b4:	0209      	lsls	r1, r1, #8
 800f8b6:	000d      	movs	r5, r1
 800f8b8:	4105      	asrs	r5, r0
 800f8ba:	4b12      	ldr	r3, [pc, #72]	; (800f904 <SwapUartPins+0x68>)
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	3b01      	subs	r3, #1
 800f8c0:	4811      	ldr	r0, [pc, #68]	; (800f908 <SwapUartPins+0x6c>)
 800f8c2:	005b      	lsls	r3, r3, #1
 800f8c4:	5a1a      	ldrh	r2, [r3, r0]
 800f8c6:	432a      	orrs	r2, r5
 800f8c8:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800f8ca:	2308      	movs	r3, #8
 800f8cc:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800f8ce:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800f8d0:	0020      	movs	r0, r4
 800f8d2:	f005 f8df 	bl	8014a94 <HAL_UART_Init>
 800f8d6:	e7e8      	b.n	800f8aa <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800f8d8:	f7fc fb66 	bl	800bfa8 <GetPort>
 800f8dc:	3801      	subs	r0, #1
 800f8de:	2180      	movs	r1, #128	; 0x80
 800f8e0:	0209      	lsls	r1, r1, #8
 800f8e2:	4101      	asrs	r1, r0
 800f8e4:	4b07      	ldr	r3, [pc, #28]	; (800f904 <SwapUartPins+0x68>)
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	4807      	ldr	r0, [pc, #28]	; (800f908 <SwapUartPins+0x6c>)
 800f8ec:	005b      	lsls	r3, r3, #1
 800f8ee:	5a1a      	ldrh	r2, [r3, r0]
 800f8f0:	438a      	bics	r2, r1
 800f8f2:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800f8f4:	2308      	movs	r3, #8
 800f8f6:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800f8fc:	0020      	movs	r0, r4
 800f8fe:	f005 f8c9 	bl	8014a94 <HAL_UART_Init>
}
 800f902:	e7d2      	b.n	800f8aa <SwapUartPins+0xe>
 800f904:	20001066 	.word	0x20001066
 800f908:	20007238 	.word	0x20007238

0800f90c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800f90c:	4816      	ldr	r0, [pc, #88]	; (800f968 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800f90e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800f910:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800f912:	e003      	b.n	800f91c <LoopCopyDataInit>

0800f914 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800f914:	4b15      	ldr	r3, [pc, #84]	; (800f96c <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800f916:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800f918:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800f91a:	3104      	adds	r1, #4

0800f91c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800f91c:	4814      	ldr	r0, [pc, #80]	; (800f970 <LoopForever+0xc>)
  ldr r3, =_edata
 800f91e:	4b15      	ldr	r3, [pc, #84]	; (800f974 <LoopForever+0x10>)
  adds r2, r0, r1
 800f920:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800f922:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800f924:	d3f6      	bcc.n	800f914 <CopyDataInit>
  ldr r2, =_sbss
 800f926:	4a14      	ldr	r2, [pc, #80]	; (800f978 <LoopForever+0x14>)
  b LoopFillZerobss
 800f928:	e002      	b.n	800f930 <LoopFillZerobss>

0800f92a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800f92a:	2300      	movs	r3, #0
  str  r3, [r2]
 800f92c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f92e:	3204      	adds	r2, #4

0800f930 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800f930:	4b12      	ldr	r3, [pc, #72]	; (800f97c <LoopForever+0x18>)
  cmp r2, r3
 800f932:	429a      	cmp	r2, r3
  bcc FillZerobss
 800f934:	d3f9      	bcc.n	800f92a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800f936:	4812      	ldr	r0, [pc, #72]	; (800f980 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800f938:	4912      	ldr	r1, [pc, #72]	; (800f984 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800f93a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800f93c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800f93e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800f940:	d005      	beq.n	800f94e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800f942:	f000 f82b 	bl	800f99c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800f946:	f005 fa13 	bl	8014d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800f94a:	f005 f9fa 	bl	8014d42 <main>

0800f94e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800f94e:	480e      	ldr	r0, [pc, #56]	; (800f988 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800f950:	490e      	ldr	r1, [pc, #56]	; (800f98c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800f952:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800f954:	480e      	ldr	r0, [pc, #56]	; (800f990 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800f956:	490d      	ldr	r1, [pc, #52]	; (800f98c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800f958:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800f95a:	480e      	ldr	r0, [pc, #56]	; (800f994 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800f95c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800f95e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800f960:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800f962:	4700      	bx	r0

0800f964 <LoopForever>:


LoopForever:
    b LoopForever
 800f964:	e7fe      	b.n	800f964 <LoopForever>
 800f966:	0000      	.short	0x0000
  ldr   r0, =_estack
 800f968:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800f96c:	0801d4a0 	.word	0x0801d4a0
  ldr r0, =_sdata
 800f970:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800f974:	20000a80 	.word	0x20000a80
  ldr r2, =_sbss
 800f978:	20000a80 	.word	0x20000a80
  ldr r3, = _ebss
 800f97c:	200072e0 	.word	0x200072e0
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800f980:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800f984:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800f988:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800f98c:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800f990:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800f994:	1fffd800 	.word	0x1fffd800

0800f998 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800f998:	e7fe      	b.n	800f998 <ADC1_COMP_IRQHandler>
	...

0800f99c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800f99c:	4b11      	ldr	r3, [pc, #68]	; (800f9e4 <SystemInit+0x48>)
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	2101      	movs	r1, #1
 800f9a2:	430a      	orrs	r2, r1
 800f9a4:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800f9a6:	685a      	ldr	r2, [r3, #4]
 800f9a8:	480f      	ldr	r0, [pc, #60]	; (800f9e8 <SystemInit+0x4c>)
 800f9aa:	4002      	ands	r2, r0
 800f9ac:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	480e      	ldr	r0, [pc, #56]	; (800f9ec <SystemInit+0x50>)
 800f9b2:	4002      	ands	r2, r0
 800f9b4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	480d      	ldr	r0, [pc, #52]	; (800f9f0 <SystemInit+0x54>)
 800f9ba:	4002      	ands	r2, r0
 800f9bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800f9be:	685a      	ldr	r2, [r3, #4]
 800f9c0:	480c      	ldr	r0, [pc, #48]	; (800f9f4 <SystemInit+0x58>)
 800f9c2:	4002      	ands	r2, r0
 800f9c4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800f9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9c8:	200f      	movs	r0, #15
 800f9ca:	4382      	bics	r2, r0
 800f9cc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800f9ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f9d0:	4809      	ldr	r0, [pc, #36]	; (800f9f8 <SystemInit+0x5c>)
 800f9d2:	4002      	ands	r2, r0
 800f9d4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800f9d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9d8:	438a      	bics	r2, r1
 800f9da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f9dc:	2200      	movs	r2, #0
 800f9de:	609a      	str	r2, [r3, #8]

}
 800f9e0:	4770      	bx	lr
 800f9e2:	46c0      	nop			; (mov r8, r8)
 800f9e4:	40021000 	.word	0x40021000
 800f9e8:	08ffb80c 	.word	0x08ffb80c
 800f9ec:	fef6ffff 	.word	0xfef6ffff
 800f9f0:	fffbffff 	.word	0xfffbffff
 800f9f4:	ffc0ffff 	.word	0xffc0ffff
 800f9f8:	fff0feac 	.word	0xfff0feac

0800f9fc <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9fc:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 800fa00:	1e43      	subs	r3, r0, #1
 800fa02:	4198      	sbcs	r0, r3
}
 800fa04:	4770      	bx	lr

0800fa06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fa06:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800fa08:	f000 ff86 	bl	8010918 <vTaskStartScheduler>
  
  return osOK;
}
 800fa0c:	2000      	movs	r0, #0
 800fa0e:	bd10      	pop	{r4, pc}

0800fa10 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fa10:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fa12:	2800      	cmp	r0, #0
 800fa14:	d100      	bne.n	800fa18 <osDelay+0x8>
 800fa16:	3001      	adds	r0, #1
 800fa18:	f001 f8ba 	bl	8010b90 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fa1c:	2000      	movs	r0, #0
 800fa1e:	bd10      	pop	{r4, pc}

0800fa20 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800fa20:	b510      	push	{r4, lr}
 800fa22:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800fa24:	2901      	cmp	r1, #1
 800fa26:	d005      	beq.n	800fa34 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800fa28:	2100      	movs	r1, #0
 800fa2a:	f000 fb13 	bl	8010054 <xQueueCreateCountingSemaphore>
 800fa2e:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800fa30:	0020      	movs	r0, r4
 800fa32:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800fa34:	2203      	movs	r2, #3
 800fa36:	2100      	movs	r1, #0
 800fa38:	f000 fae5 	bl	8010006 <xQueueGenericCreate>
 800fa3c:	1e04      	subs	r4, r0, #0
 800fa3e:	d0f7      	beq.n	800fa30 <osSemaphoreCreate+0x10>
 800fa40:	2300      	movs	r3, #0
 800fa42:	2200      	movs	r2, #0
 800fa44:	2100      	movs	r1, #0
 800fa46:	f000 fb1b 	bl	8010080 <xQueueGenericSend>
 800fa4a:	e7f1      	b.n	800fa30 <osSemaphoreCreate+0x10>

0800fa4c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fa4c:	b530      	push	{r4, r5, lr}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	0005      	movs	r5, r0
 800fa52:	000c      	movs	r4, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fa54:	2300      	movs	r3, #0
 800fa56:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	d025      	beq.n	800faa8 <osSemaphoreWait+0x5c>
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800fa5c:	1c4b      	adds	r3, r1, #1
 800fa5e:	d013      	beq.n	800fa88 <osSemaphoreWait+0x3c>
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800fa60:	f7ff ffcc 	bl	800f9fc <inHandlerMode>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	d012      	beq.n	800fa8e <osSemaphoreWait+0x42>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fa68:	aa01      	add	r2, sp, #4
 800fa6a:	2100      	movs	r1, #0
 800fa6c:	0028      	movs	r0, r5
 800fa6e:	f000 fcc2 	bl	80103f6 <xQueueReceiveFromISR>
 800fa72:	2801      	cmp	r0, #1
 800fa74:	d11a      	bne.n	800faac <osSemaphoreWait+0x60>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fa76:	9b01      	ldr	r3, [sp, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d019      	beq.n	800fab0 <osSemaphoreWait+0x64>
 800fa7c:	4b0d      	ldr	r3, [pc, #52]	; (800fab4 <osSemaphoreWait+0x68>)
 800fa7e:	2280      	movs	r2, #128	; 0x80
 800fa80:	0552      	lsls	r2, r2, #21
 800fa82:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800fa84:	2000      	movs	r0, #0
 800fa86:	e00b      	b.n	800faa0 <osSemaphoreWait+0x54>
    ticks = portMAX_DELAY;
 800fa88:	2401      	movs	r4, #1
 800fa8a:	4264      	negs	r4, r4
 800fa8c:	e7e8      	b.n	800fa60 <osSemaphoreWait+0x14>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fa8e:	2300      	movs	r3, #0
 800fa90:	0022      	movs	r2, r4
 800fa92:	2100      	movs	r1, #0
 800fa94:	0028      	movs	r0, r5
 800fa96:	f000 fc0b 	bl	80102b0 <xQueueGenericReceive>
 800fa9a:	2801      	cmp	r0, #1
 800fa9c:	d102      	bne.n	800faa4 <osSemaphoreWait+0x58>
  return osOK;
 800fa9e:	2000      	movs	r0, #0
}
 800faa0:	b003      	add	sp, #12
 800faa2:	bd30      	pop	{r4, r5, pc}
    return osErrorOS;
 800faa4:	20ff      	movs	r0, #255	; 0xff
 800faa6:	e7fb      	b.n	800faa0 <osSemaphoreWait+0x54>
    return osErrorParameter;
 800faa8:	2080      	movs	r0, #128	; 0x80
 800faaa:	e7f9      	b.n	800faa0 <osSemaphoreWait+0x54>
      return osErrorOS;
 800faac:	20ff      	movs	r0, #255	; 0xff
 800faae:	e7f7      	b.n	800faa0 <osSemaphoreWait+0x54>
  return osOK;
 800fab0:	2000      	movs	r0, #0
 800fab2:	e7f5      	b.n	800faa0 <osSemaphoreWait+0x54>
 800fab4:	e000ed04 	.word	0xe000ed04

0800fab8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fab8:	b510      	push	{r4, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	0004      	movs	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800fabe:	2300      	movs	r3, #0
 800fac0:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800fac2:	f7ff ff9b 	bl	800f9fc <inHandlerMode>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d00e      	beq.n	800fae8 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800faca:	a901      	add	r1, sp, #4
 800facc:	0020      	movs	r0, r4
 800face:	f000 fbaf 	bl	8010230 <xQueueGiveFromISR>
 800fad2:	2801      	cmp	r0, #1
 800fad4:	d113      	bne.n	800fafe <osSemaphoreRelease+0x46>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fad6:	9b01      	ldr	r3, [sp, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d012      	beq.n	800fb02 <osSemaphoreRelease+0x4a>
 800fadc:	4b0b      	ldr	r3, [pc, #44]	; (800fb0c <osSemaphoreRelease+0x54>)
 800fade:	2280      	movs	r2, #128	; 0x80
 800fae0:	0552      	lsls	r2, r2, #21
 800fae2:	601a      	str	r2, [r3, #0]
  osStatus result = osOK;
 800fae4:	2000      	movs	r0, #0
 800fae6:	e008      	b.n	800fafa <osSemaphoreRelease+0x42>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fae8:	2300      	movs	r3, #0
 800faea:	2200      	movs	r2, #0
 800faec:	2100      	movs	r1, #0
 800faee:	0020      	movs	r0, r4
 800faf0:	f000 fac6 	bl	8010080 <xQueueGenericSend>
 800faf4:	2801      	cmp	r0, #1
 800faf6:	d106      	bne.n	800fb06 <osSemaphoreRelease+0x4e>
  osStatus result = osOK;
 800faf8:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800fafa:	b002      	add	sp, #8
 800fafc:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800fafe:	20ff      	movs	r0, #255	; 0xff
 800fb00:	e7fb      	b.n	800fafa <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800fb02:	2000      	movs	r0, #0
 800fb04:	e7f9      	b.n	800fafa <osSemaphoreRelease+0x42>
      result = osErrorOS;
 800fb06:	20ff      	movs	r0, #255	; 0xff
 800fb08:	e7f7      	b.n	800fafa <osSemaphoreRelease+0x42>
 800fb0a:	46c0      	nop			; (mov r8, r8)
 800fb0c:	e000ed04 	.word	0xe000ed04

0800fb10 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800fb10:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800fb12:	f001 fa2b 	bl	8010f6c <xTaskGetSchedulerState>
 800fb16:	2801      	cmp	r0, #1
 800fb18:	d001      	beq.n	800fb1e <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800fb1a:	f001 feb5 	bl	8011888 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800fb1e:	bd10      	pop	{r4, pc}

0800fb20 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 800fb20:	0003      	movs	r3, r0
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800fb22:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800fb24:	2000      	movs	r0, #0

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800fb26:	e005      	b.n	800fb34 <prvGetNumberOfParameters+0x14>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800fb28:	2901      	cmp	r1, #1
 800fb2a:	d002      	beq.n	800fb32 <prvGetNumberOfParameters+0x12>
			{
				cParameters++;
 800fb2c:	3001      	adds	r0, #1
 800fb2e:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800fb30:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800fb32:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800fb34:	2200      	movs	r2, #0
 800fb36:	569a      	ldrsb	r2, [r3, r2]
 800fb38:	2a00      	cmp	r2, #0
 800fb3a:	d003      	beq.n	800fb44 <prvGetNumberOfParameters+0x24>
		if( ( *pcCommandString ) == ' ' )
 800fb3c:	2a20      	cmp	r2, #32
 800fb3e:	d0f3      	beq.n	800fb28 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800fb40:	2100      	movs	r1, #0
 800fb42:	e7f6      	b.n	800fb32 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800fb44:	2901      	cmp	r1, #1
 800fb46:	d000      	beq.n	800fb4a <prvGetNumberOfParameters+0x2a>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800fb48:	4770      	bx	lr
		cParameters--;
 800fb4a:	3801      	subs	r0, #1
 800fb4c:	b240      	sxtb	r0, r0
 800fb4e:	e7fb      	b.n	800fb48 <prvGetNumberOfParameters+0x28>

0800fb50 <FreeRTOS_CLIRegisterCommand>:
{
 800fb50:	b570      	push	{r4, r5, r6, lr}
 800fb52:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
 800fb54:	d101      	bne.n	800fb5a <FreeRTOS_CLIRegisterCommand+0xa>
 800fb56:	b672      	cpsid	i
 800fb58:	e7fe      	b.n	800fb58 <FreeRTOS_CLIRegisterCommand+0x8>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800fb5a:	2008      	movs	r0, #8
 800fb5c:	f001 ff02 	bl	8011964 <pvPortMalloc>
 800fb60:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800fb62:	d101      	bne.n	800fb68 <FreeRTOS_CLIRegisterCommand+0x18>
 800fb64:	b672      	cpsid	i
 800fb66:	e7fe      	b.n	800fb66 <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
 800fb68:	f001 fe48 	bl	80117fc <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800fb6c:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800fb72:	4b04      	ldr	r3, [pc, #16]	; (800fb84 <FreeRTOS_CLIRegisterCommand+0x34>)
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800fb78:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800fb7a:	f001 fe4b 	bl	8011814 <vPortExitCritical>
}
 800fb7e:	2001      	movs	r0, #1
 800fb80:	bd70      	pop	{r4, r5, r6, pc}
 800fb82:	46c0      	nop			; (mov r8, r8)
 800fb84:	200000bc 	.word	0x200000bc

0800fb88 <FreeRTOS_CLIProcessCommand>:
{
 800fb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	0005      	movs	r5, r0
 800fb8e:	9100      	str	r1, [sp, #0]
 800fb90:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
 800fb92:	4b2c      	ldr	r3, [pc, #176]	; (800fc44 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d016      	beq.n	800fbc8 <FreeRTOS_CLIProcessCommand+0x40>
portBASE_TYPE xReturn = pdTRUE;
 800fb9a:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800fb9c:	4b29      	ldr	r3, [pc, #164]	; (800fc44 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d001      	beq.n	800fba8 <FreeRTOS_CLIProcessCommand+0x20>
 800fba4:	2c00      	cmp	r4, #0
 800fba6:	d03d      	beq.n	800fc24 <FreeRTOS_CLIProcessCommand+0x9c>
	else if( pxCommand != NULL )
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d044      	beq.n	800fc36 <FreeRTOS_CLIProcessCommand+0xae>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	689b      	ldr	r3, [r3, #8]
 800fbb0:	002a      	movs	r2, r5
 800fbb2:	9901      	ldr	r1, [sp, #4]
 800fbb4:	9800      	ldr	r0, [sp, #0]
 800fbb6:	4798      	blx	r3
 800fbb8:	1e04      	subs	r4, r0, #0
		if( xReturn == pdFALSE )
 800fbba:	d102      	bne.n	800fbc2 <FreeRTOS_CLIProcessCommand+0x3a>
			pxCommand = NULL;
 800fbbc:	4b21      	ldr	r3, [pc, #132]	; (800fc44 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	601a      	str	r2, [r3, #0]
}
 800fbc2:	0020      	movs	r0, r4
 800fbc4:	b003      	add	sp, #12
 800fbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800fbc8:	4b1e      	ldr	r3, [pc, #120]	; (800fc44 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fbca:	4a1f      	ldr	r2, [pc, #124]	; (800fc48 <FreeRTOS_CLIProcessCommand+0xc0>)
 800fbcc:	601a      	str	r2, [r3, #0]
 800fbce:	e009      	b.n	800fbe4 <FreeRTOS_CLIProcessCommand+0x5c>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800fbd0:	0002      	movs	r2, r0
 800fbd2:	0021      	movs	r1, r4
 800fbd4:	0028      	movs	r0, r5
 800fbd6:	f005 fd95 	bl	8015704 <strncmp>
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	d011      	beq.n	800fc02 <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	4b18      	ldr	r3, [pc, #96]	; (800fc44 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fbe2:	601a      	str	r2, [r3, #0]
 800fbe4:	4b17      	ldr	r3, [pc, #92]	; (800fc44 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fbe6:	681f      	ldr	r7, [r3, #0]
 800fbe8:	2f00      	cmp	r7, #0
 800fbea:	d019      	beq.n	800fc20 <FreeRTOS_CLIProcessCommand+0x98>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800fbec:	683e      	ldr	r6, [r7, #0]
 800fbee:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800fbf0:	0020      	movs	r0, r4
 800fbf2:	f7f0 fa91 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800fbf6:	562b      	ldrsb	r3, [r5, r0]
 800fbf8:	2b20      	cmp	r3, #32
 800fbfa:	d0e9      	beq.n	800fbd0 <FreeRTOS_CLIProcessCommand+0x48>
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d1ee      	bne.n	800fbde <FreeRTOS_CLIProcessCommand+0x56>
 800fc00:	e7e6      	b.n	800fbd0 <FreeRTOS_CLIProcessCommand+0x48>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800fc02:	240c      	movs	r4, #12
 800fc04:	5734      	ldrsb	r4, [r6, r4]
 800fc06:	2c00      	cmp	r4, #0
 800fc08:	da01      	bge.n	800fc0e <FreeRTOS_CLIProcessCommand+0x86>
portBASE_TYPE xReturn = pdTRUE;
 800fc0a:	2401      	movs	r4, #1
 800fc0c:	e7c6      	b.n	800fb9c <FreeRTOS_CLIProcessCommand+0x14>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800fc0e:	0028      	movs	r0, r5
 800fc10:	f7ff ff86 	bl	800fb20 <prvGetNumberOfParameters>
 800fc14:	4284      	cmp	r4, r0
 800fc16:	d001      	beq.n	800fc1c <FreeRTOS_CLIProcessCommand+0x94>
							xReturn = pdFALSE;
 800fc18:	2400      	movs	r4, #0
 800fc1a:	e7bf      	b.n	800fb9c <FreeRTOS_CLIProcessCommand+0x14>
portBASE_TYPE xReturn = pdTRUE;
 800fc1c:	2401      	movs	r4, #1
 800fc1e:	e7bd      	b.n	800fb9c <FreeRTOS_CLIProcessCommand+0x14>
 800fc20:	2401      	movs	r4, #1
 800fc22:	e7bb      	b.n	800fb9c <FreeRTOS_CLIProcessCommand+0x14>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800fc24:	9a01      	ldr	r2, [sp, #4]
 800fc26:	4909      	ldr	r1, [pc, #36]	; (800fc4c <FreeRTOS_CLIProcessCommand+0xc4>)
 800fc28:	9800      	ldr	r0, [sp, #0]
 800fc2a:	f005 fd7c 	bl	8015726 <strncpy>
		pxCommand = NULL;
 800fc2e:	4b05      	ldr	r3, [pc, #20]	; (800fc44 <FreeRTOS_CLIProcessCommand+0xbc>)
 800fc30:	2200      	movs	r2, #0
 800fc32:	601a      	str	r2, [r3, #0]
 800fc34:	e7c5      	b.n	800fbc2 <FreeRTOS_CLIProcessCommand+0x3a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800fc36:	9a01      	ldr	r2, [sp, #4]
 800fc38:	4905      	ldr	r1, [pc, #20]	; (800fc50 <FreeRTOS_CLIProcessCommand+0xc8>)
 800fc3a:	9800      	ldr	r0, [sp, #0]
 800fc3c:	f005 fd73 	bl	8015726 <strncpy>
		xReturn = pdFALSE;
 800fc40:	2400      	movs	r4, #0
	return xReturn;
 800fc42:	e7be      	b.n	800fbc2 <FreeRTOS_CLIProcessCommand+0x3a>
 800fc44:	2000212c 	.word	0x2000212c
 800fc48:	200000c0 	.word	0x200000c0
 800fc4c:	0801cffc 	.word	0x0801cffc
 800fc50:	0801d054 	.word	0x0801d054

0800fc54 <FreeRTOS_CLIGetOutputBuffer>:
}
 800fc54:	4800      	ldr	r0, [pc, #0]	; (800fc58 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800fc56:	4770      	bx	lr
 800fc58:	20001ec4 	.word	0x20001ec4

0800fc5c <FreeRTOS_CLIGetParameter>:
{
 800fc5c:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800fc62:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800fc64:	e011      	b.n	800fc8a <FreeRTOS_CLIGetParameter+0x2e>
			pcCommandString++;
 800fc66:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800fc68:	2300      	movs	r3, #0
 800fc6a:	56c3      	ldrsb	r3, [r0, r3]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d003      	beq.n	800fc78 <FreeRTOS_CLIGetParameter+0x1c>
 800fc70:	2b20      	cmp	r3, #32
 800fc72:	d1f8      	bne.n	800fc66 <FreeRTOS_CLIGetParameter+0xa>
 800fc74:	e000      	b.n	800fc78 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800fc76:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800fc78:	2300      	movs	r3, #0
 800fc7a:	56c3      	ldrsb	r3, [r0, r3]
 800fc7c:	2b20      	cmp	r3, #32
 800fc7e:	d0fa      	beq.n	800fc76 <FreeRTOS_CLIGetParameter+0x1a>
		if( *pcCommandString != 0x00 )
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d017      	beq.n	800fcb4 <FreeRTOS_CLIGetParameter+0x58>
			uxParametersFound++;
 800fc84:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800fc86:	42a1      	cmp	r1, r4
 800fc88:	d012      	beq.n	800fcb0 <FreeRTOS_CLIGetParameter+0x54>
	while( uxParametersFound < uxWantedParameter )
 800fc8a:	428c      	cmp	r4, r1
 800fc8c:	d3ec      	bcc.n	800fc68 <FreeRTOS_CLIGetParameter+0xc>
const int8_t *pcReturn = NULL;
 800fc8e:	2000      	movs	r0, #0
}
 800fc90:	bd10      	pop	{r4, pc}
					( *pxParameterStringLength )++;
 800fc92:	6813      	ldr	r3, [r2, #0]
 800fc94:	3301      	adds	r3, #1
 800fc96:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800fc98:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	56cb      	ldrsb	r3, [r1, r3]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d001      	beq.n	800fca6 <FreeRTOS_CLIGetParameter+0x4a>
 800fca2:	2b20      	cmp	r3, #32
 800fca4:	d1f5      	bne.n	800fc92 <FreeRTOS_CLIGetParameter+0x36>
				if( *pxParameterStringLength == 0 )
 800fca6:	6813      	ldr	r3, [r2, #0]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1f1      	bne.n	800fc90 <FreeRTOS_CLIGetParameter+0x34>
					pcReturn = NULL;
 800fcac:	2000      	movs	r0, #0
	return pcReturn;
 800fcae:	e7ef      	b.n	800fc90 <FreeRTOS_CLIGetParameter+0x34>
 800fcb0:	0001      	movs	r1, r0
 800fcb2:	e7f2      	b.n	800fc9a <FreeRTOS_CLIGetParameter+0x3e>
const int8_t *pcReturn = NULL;
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	e7eb      	b.n	800fc90 <FreeRTOS_CLIGetParameter+0x34>

0800fcb8 <prvHelpCommand>:
{
 800fcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcba:	b083      	sub	sp, #12
 800fcbc:	0005      	movs	r5, r0
 800fcbe:	000e      	movs	r6, r1
 800fcc0:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800fcc6:	aa01      	add	r2, sp, #4
 800fcc8:	2101      	movs	r1, #1
 800fcca:	f7ff ffc7 	bl	800fc5c <FreeRTOS_CLIGetParameter>
 800fcce:	1e04      	subs	r4, r0, #0
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800fcd0:	d022      	beq.n	800fd18 <prvHelpCommand+0x60>
 800fcd2:	2206      	movs	r2, #6
 800fcd4:	4931      	ldr	r1, [pc, #196]	; (800fd9c <prvHelpCommand+0xe4>)
 800fcd6:	f005 fd15 	bl	8015704 <strncmp>
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	d11c      	bne.n	800fd18 <prvHelpCommand+0x60>
		if( str == NumOfParamsHelpStrings )
 800fcde:	4b30      	ldr	r3, [pc, #192]	; (800fda0 <prvHelpCommand+0xe8>)
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	2b07      	cmp	r3, #7
 800fce4:	d00f      	beq.n	800fd06 <prvHelpCommand+0x4e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800fce6:	4a2e      	ldr	r2, [pc, #184]	; (800fda0 <prvHelpCommand+0xe8>)
 800fce8:	7813      	ldrb	r3, [r2, #0]
 800fcea:	1c5c      	adds	r4, r3, #1
 800fcec:	b2e4      	uxtb	r4, r4
 800fcee:	7014      	strb	r4, [r2, #0]
 800fcf0:	009b      	lsls	r3, r3, #2
 800fcf2:	4a2c      	ldr	r2, [pc, #176]	; (800fda4 <prvHelpCommand+0xec>)
 800fcf4:	5899      	ldr	r1, [r3, r2]
 800fcf6:	0032      	movs	r2, r6
 800fcf8:	0028      	movs	r0, r5
 800fcfa:	f005 fd14 	bl	8015726 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800fcfe:	2c07      	cmp	r4, #7
 800fd00:	d005      	beq.n	800fd0e <prvHelpCommand+0x56>
			xReturn = pdTRUE;
 800fd02:	2701      	movs	r7, #1
 800fd04:	e00a      	b.n	800fd1c <prvHelpCommand+0x64>
			str = 0;
 800fd06:	4b26      	ldr	r3, [pc, #152]	; (800fda0 <prvHelpCommand+0xe8>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	701a      	strb	r2, [r3, #0]
 800fd0c:	e7eb      	b.n	800fce6 <prvHelpCommand+0x2e>
			xReturn = pdFALSE; str = 0;
 800fd0e:	4b24      	ldr	r3, [pc, #144]	; (800fda0 <prvHelpCommand+0xe8>)
 800fd10:	2200      	movs	r2, #0
 800fd12:	701a      	strb	r2, [r3, #0]
 800fd14:	2700      	movs	r7, #0
 800fd16:	e001      	b.n	800fd1c <prvHelpCommand+0x64>
	else if (pcParameterString1 == NULL)
 800fd18:	2c00      	cmp	r4, #0
 800fd1a:	d002      	beq.n	800fd22 <prvHelpCommand+0x6a>
}
 800fd1c:	0038      	movs	r0, r7
 800fd1e:	b003      	add	sp, #12
 800fd20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800fd22:	4b21      	ldr	r3, [pc, #132]	; (800fda8 <prvHelpCommand+0xf0>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d025      	beq.n	800fd76 <prvHelpCommand+0xbe>
		if (counter > numOfBosCommands) {
 800fd2a:	4b20      	ldr	r3, [pc, #128]	; (800fdac <prvHelpCommand+0xf4>)
 800fd2c:	781a      	ldrb	r2, [r3, #0]
 800fd2e:	4b20      	ldr	r3, [pc, #128]	; (800fdb0 <prvHelpCommand+0xf8>)
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d926      	bls.n	800fd84 <prvHelpCommand+0xcc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800fd36:	4b1c      	ldr	r3, [pc, #112]	; (800fda8 <prvHelpCommand+0xf0>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	6859      	ldr	r1, [r3, #4]
 800fd3e:	0032      	movs	r2, r6
 800fd40:	3a08      	subs	r2, #8
 800fd42:	0028      	movs	r0, r5
 800fd44:	3008      	adds	r0, #8
 800fd46:	f005 fcee 	bl	8015726 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800fd4a:	1c68      	adds	r0, r5, #1
 800fd4c:	4919      	ldr	r1, [pc, #100]	; (800fdb4 <prvHelpCommand+0xfc>)
 800fd4e:	f005 fcd1 	bl	80156f4 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800fd52:	2328      	movs	r3, #40	; 0x28
 800fd54:	702b      	strb	r3, [r5, #0]
 800fd56:	3301      	adds	r3, #1
 800fd58:	71ab      	strb	r3, [r5, #6]
 800fd5a:	3b09      	subs	r3, #9
 800fd5c:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800fd5e:	4b12      	ldr	r3, [pc, #72]	; (800fda8 <prvHelpCommand+0xf0>)
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	6852      	ldr	r2, [r2, #4]
 800fd64:	601a      	str	r2, [r3, #0]
		counter++;
 800fd66:	4911      	ldr	r1, [pc, #68]	; (800fdac <prvHelpCommand+0xf4>)
 800fd68:	780b      	ldrb	r3, [r1, #0]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	700b      	strb	r3, [r1, #0]
		if( pxCommand == NULL )
 800fd6e:	2a00      	cmp	r2, #0
 800fd70:	d011      	beq.n	800fd96 <prvHelpCommand+0xde>
			xReturn = pdTRUE;
 800fd72:	2701      	movs	r7, #1
	return xReturn;
 800fd74:	e7d2      	b.n	800fd1c <prvHelpCommand+0x64>
			pxCommand = &xRegisteredCommands;
 800fd76:	4b0c      	ldr	r3, [pc, #48]	; (800fda8 <prvHelpCommand+0xf0>)
 800fd78:	4a0f      	ldr	r2, [pc, #60]	; (800fdb8 <prvHelpCommand+0x100>)
 800fd7a:	601a      	str	r2, [r3, #0]
			counter = 1;
 800fd7c:	4b0b      	ldr	r3, [pc, #44]	; (800fdac <prvHelpCommand+0xf4>)
 800fd7e:	2201      	movs	r2, #1
 800fd80:	701a      	strb	r2, [r3, #0]
 800fd82:	e7d2      	b.n	800fd2a <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800fd84:	4b08      	ldr	r3, [pc, #32]	; (800fda8 <prvHelpCommand+0xf0>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	6859      	ldr	r1, [r3, #4]
 800fd8c:	0032      	movs	r2, r6
 800fd8e:	0028      	movs	r0, r5
 800fd90:	f005 fcc9 	bl	8015726 <strncpy>
 800fd94:	e7e3      	b.n	800fd5e <prvHelpCommand+0xa6>
			xReturn = pdFALSE;
 800fd96:	2700      	movs	r7, #0
 800fd98:	e7c0      	b.n	800fd1c <prvHelpCommand+0x64>
 800fd9a:	46c0      	nop			; (mov r8, r8)
 800fd9c:	0801a908 	.word	0x0801a908
 800fda0:	20002134 	.word	0x20002134
 800fda4:	20000054 	.word	0x20000054
 800fda8:	20002130 	.word	0x20002130
 800fdac:	20002128 	.word	0x20002128
 800fdb0:	20006d24 	.word	0x20006d24
 800fdb4:	08019f08 	.word	0x08019f08
 800fdb8:	200000c0 	.word	0x200000c0

0800fdbc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fdbc:	0003      	movs	r3, r0
 800fdbe:	3308      	adds	r3, #8
 800fdc0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	4252      	negs	r2, r2
 800fdc6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fdc8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fdca:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fdd0:	4770      	bx	lr

0800fdd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fdd6:	4770      	bx	lr

0800fdd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800fdd8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fdda:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fddc:	689a      	ldr	r2, [r3, #8]
 800fdde:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fde0:	689a      	ldr	r2, [r3, #8]
 800fde2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fde4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800fde6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800fde8:	6803      	ldr	r3, [r0, #0]
 800fdea:	3301      	adds	r3, #1
 800fdec:	6003      	str	r3, [r0, #0]
}
 800fdee:	4770      	bx	lr

0800fdf0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fdf0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fdf2:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fdf4:	1c63      	adds	r3, r4, #1
 800fdf6:	d002      	beq.n	800fdfe <vListInsert+0xe>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fdf8:	0002      	movs	r2, r0
 800fdfa:	3208      	adds	r2, #8
 800fdfc:	e002      	b.n	800fe04 <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
 800fdfe:	6902      	ldr	r2, [r0, #16]
 800fe00:	e004      	b.n	800fe0c <vListInsert+0x1c>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe02:	001a      	movs	r2, r3
 800fe04:	6853      	ldr	r3, [r2, #4]
 800fe06:	681d      	ldr	r5, [r3, #0]
 800fe08:	42a5      	cmp	r5, r4
 800fe0a:	d9fa      	bls.n	800fe02 <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fe0c:	6853      	ldr	r3, [r2, #4]
 800fe0e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fe10:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fe12:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800fe14:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800fe16:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800fe18:	6803      	ldr	r3, [r0, #0]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	6003      	str	r3, [r0, #0]
}
 800fe1e:	bd30      	pop	{r4, r5, pc}

0800fe20 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800fe20:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fe22:	6842      	ldr	r2, [r0, #4]
 800fe24:	6881      	ldr	r1, [r0, #8]
 800fe26:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fe28:	6882      	ldr	r2, [r0, #8]
 800fe2a:	6841      	ldr	r1, [r0, #4]
 800fe2c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fe2e:	685a      	ldr	r2, [r3, #4]
 800fe30:	4282      	cmp	r2, r0
 800fe32:	d005      	beq.n	800fe40 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800fe34:	2200      	movs	r2, #0
 800fe36:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	1e50      	subs	r0, r2, #1
 800fe3c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800fe3e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fe40:	6882      	ldr	r2, [r0, #8]
 800fe42:	605a      	str	r2, [r3, #4]
 800fe44:	e7f6      	b.n	800fe34 <uxListRemove+0x14>

0800fe46 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fe46:	b510      	push	{r4, lr}
 800fe48:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fe4a:	f001 fcd7 	bl	80117fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fe4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fe50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d004      	beq.n	800fe60 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800fe56:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800fe58:	f001 fcdc 	bl	8011814 <vPortExitCritical>

	return xReturn;
}
 800fe5c:	0020      	movs	r0, r4
 800fe5e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800fe60:	2401      	movs	r4, #1
 800fe62:	e7f9      	b.n	800fe58 <prvIsQueueFull+0x12>

0800fe64 <prvIsQueueEmpty>:
{
 800fe64:	b510      	push	{r4, lr}
 800fe66:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800fe68:	f001 fcc8 	bl	80117fc <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fe6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d004      	beq.n	800fe7c <prvIsQueueEmpty+0x18>
			xReturn = pdFALSE;
 800fe72:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fe74:	f001 fcce 	bl	8011814 <vPortExitCritical>
}
 800fe78:	0020      	movs	r0, r4
 800fe7a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800fe7c:	2401      	movs	r4, #1
 800fe7e:	e7f9      	b.n	800fe74 <prvIsQueueEmpty+0x10>

0800fe80 <prvCopyDataToQueue>:
{
 800fe80:	b570      	push	{r4, r5, r6, lr}
 800fe82:	0004      	movs	r4, r0
 800fe84:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fe86:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800fe88:	2a00      	cmp	r2, #0
 800fe8a:	d10d      	bne.n	800fea8 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe8c:	6803      	ldr	r3, [r0, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d004      	beq.n	800fe9c <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 800fe92:	2000      	movs	r0, #0
	++( pxQueue->uxMessagesWaiting );
 800fe94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fe96:	3301      	adds	r3, #1
 800fe98:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800fe9a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800fe9c:	6840      	ldr	r0, [r0, #4]
 800fe9e:	f001 f8b5 	bl	801100c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800fea2:	2300      	movs	r3, #0
 800fea4:	6063      	str	r3, [r4, #4]
 800fea6:	e7f5      	b.n	800fe94 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800fea8:	2d00      	cmp	r5, #0
 800feaa:	d10e      	bne.n	800feca <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800feac:	6880      	ldr	r0, [r0, #8]
 800feae:	f005 f9e2 	bl	8015276 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800feb2:	68a3      	ldr	r3, [r4, #8]
 800feb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800feb6:	4694      	mov	ip, r2
 800feb8:	4463      	add	r3, ip
 800feba:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800febc:	6862      	ldr	r2, [r4, #4]
 800febe:	4293      	cmp	r3, r2
 800fec0:	d31e      	bcc.n	800ff00 <prvCopyDataToQueue+0x80>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fec2:	6823      	ldr	r3, [r4, #0]
 800fec4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800fec6:	2000      	movs	r0, #0
 800fec8:	e7e4      	b.n	800fe94 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800feca:	68c0      	ldr	r0, [r0, #12]
 800fecc:	f005 f9d3 	bl	8015276 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800fed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fed2:	425a      	negs	r2, r3
 800fed4:	68e3      	ldr	r3, [r4, #12]
 800fed6:	189b      	adds	r3, r3, r2
 800fed8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800feda:	6821      	ldr	r1, [r4, #0]
 800fedc:	428b      	cmp	r3, r1
 800fede:	d203      	bcs.n	800fee8 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800fee0:	6863      	ldr	r3, [r4, #4]
 800fee2:	469c      	mov	ip, r3
 800fee4:	4462      	add	r2, ip
 800fee6:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800fee8:	2d02      	cmp	r5, #2
 800feea:	d001      	beq.n	800fef0 <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 800feec:	2000      	movs	r0, #0
 800feee:	e7d1      	b.n	800fe94 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fef0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d006      	beq.n	800ff04 <prvCopyDataToQueue+0x84>
				--( pxQueue->uxMessagesWaiting );
 800fef6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fef8:	3b01      	subs	r3, #1
 800fefa:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
 800fefc:	2000      	movs	r0, #0
 800fefe:	e7c9      	b.n	800fe94 <prvCopyDataToQueue+0x14>
 800ff00:	2000      	movs	r0, #0
 800ff02:	e7c7      	b.n	800fe94 <prvCopyDataToQueue+0x14>
 800ff04:	2000      	movs	r0, #0
 800ff06:	e7c5      	b.n	800fe94 <prvCopyDataToQueue+0x14>

0800ff08 <prvCopyDataFromQueue>:
{
 800ff08:	b510      	push	{r4, lr}
 800ff0a:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ff0c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ff0e:	2a00      	cmp	r2, #0
 800ff10:	d00b      	beq.n	800ff2a <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ff12:	68c3      	ldr	r3, [r0, #12]
 800ff14:	189b      	adds	r3, r3, r2
 800ff16:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ff18:	6841      	ldr	r1, [r0, #4]
 800ff1a:	428b      	cmp	r3, r1
 800ff1c:	d301      	bcc.n	800ff22 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ff1e:	6803      	ldr	r3, [r0, #0]
 800ff20:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ff22:	68c1      	ldr	r1, [r0, #12]
 800ff24:	0020      	movs	r0, r4
 800ff26:	f005 f9a6 	bl	8015276 <memcpy>
}
 800ff2a:	bd10      	pop	{r4, pc}

0800ff2c <prvUnlockQueue>:
{
 800ff2c:	b510      	push	{r4, lr}
 800ff2e:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800ff30:	f001 fc64 	bl	80117fc <vPortEnterCritical>
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ff34:	e004      	b.n	800ff40 <prvUnlockQueue+0x14>
						vTaskMissedYield();
 800ff36:	f001 f813 	bl	8010f60 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800ff3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ff3c:	3b01      	subs	r3, #1
 800ff3e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ff40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	dd09      	ble.n	800ff5a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d006      	beq.n	800ff5a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff4c:	0020      	movs	r0, r4
 800ff4e:	3024      	adds	r0, #36	; 0x24
 800ff50:	f000 ff80 	bl	8010e54 <xTaskRemoveFromEventList>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	d0f0      	beq.n	800ff3a <prvUnlockQueue+0xe>
 800ff58:	e7ed      	b.n	800ff36 <prvUnlockQueue+0xa>
		pxQueue->xTxLock = queueUNLOCKED;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	425b      	negs	r3, r3
 800ff5e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
 800ff60:	f001 fc58 	bl	8011814 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ff64:	f001 fc4a 	bl	80117fc <vPortEnterCritical>
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ff68:	e004      	b.n	800ff74 <prvUnlockQueue+0x48>
					vTaskMissedYield();
 800ff6a:	f000 fff9 	bl	8010f60 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800ff6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ff70:	3b01      	subs	r3, #1
 800ff72:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ff74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	dd09      	ble.n	800ff8e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff7a:	6923      	ldr	r3, [r4, #16]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d006      	beq.n	800ff8e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff80:	0020      	movs	r0, r4
 800ff82:	3010      	adds	r0, #16
 800ff84:	f000 ff66 	bl	8010e54 <xTaskRemoveFromEventList>
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d0f0      	beq.n	800ff6e <prvUnlockQueue+0x42>
 800ff8c:	e7ed      	b.n	800ff6a <prvUnlockQueue+0x3e>
		pxQueue->xRxLock = queueUNLOCKED;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	425b      	negs	r3, r3
 800ff92:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ff94:	f001 fc3e 	bl	8011814 <vPortExitCritical>
}
 800ff98:	bd10      	pop	{r4, pc}

0800ff9a <xQueueGenericReset>:
{
 800ff9a:	b570      	push	{r4, r5, r6, lr}
 800ff9c:	0004      	movs	r4, r0
 800ff9e:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d101      	bne.n	800ffa8 <xQueueGenericReset+0xe>
 800ffa4:	b672      	cpsid	i
 800ffa6:	e7fe      	b.n	800ffa6 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800ffa8:	f001 fc28 	bl	80117fc <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ffac:	6822      	ldr	r2, [r4, #0]
 800ffae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ffb0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800ffb2:	0001      	movs	r1, r0
 800ffb4:	4359      	muls	r1, r3
 800ffb6:	1851      	adds	r1, r2, r1
 800ffb8:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ffba:	2100      	movs	r1, #0
 800ffbc:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ffbe:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ffc0:	3b01      	subs	r3, #1
 800ffc2:	4343      	muls	r3, r0
 800ffc4:	18d3      	adds	r3, r2, r3
 800ffc6:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800ffc8:	2301      	movs	r3, #1
 800ffca:	425b      	negs	r3, r3
 800ffcc:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800ffce:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800ffd0:	2d00      	cmp	r5, #0
 800ffd2:	d10f      	bne.n	800fff4 <xQueueGenericReset+0x5a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffd4:	6923      	ldr	r3, [r4, #16]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d103      	bne.n	800ffe2 <xQueueGenericReset+0x48>
	taskEXIT_CRITICAL();
 800ffda:	f001 fc1b 	bl	8011814 <vPortExitCritical>
}
 800ffde:	2001      	movs	r0, #1
 800ffe0:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ffe2:	0020      	movs	r0, r4
 800ffe4:	3010      	adds	r0, #16
 800ffe6:	f000 ff35 	bl	8010e54 <xTaskRemoveFromEventList>
 800ffea:	2801      	cmp	r0, #1
 800ffec:	d1f5      	bne.n	800ffda <xQueueGenericReset+0x40>
					queueYIELD_IF_USING_PREEMPTION();
 800ffee:	f001 fbf9 	bl	80117e4 <vPortYield>
 800fff2:	e7f2      	b.n	800ffda <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fff4:	0020      	movs	r0, r4
 800fff6:	3010      	adds	r0, #16
 800fff8:	f7ff fee0 	bl	800fdbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fffc:	0020      	movs	r0, r4
 800fffe:	3024      	adds	r0, #36	; 0x24
 8010000:	f7ff fedc 	bl	800fdbc <vListInitialise>
 8010004:	e7e9      	b.n	800ffda <xQueueGenericReset+0x40>

08010006 <xQueueGenericCreate>:
{
 8010006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010008:	0006      	movs	r6, r0
 801000a:	000d      	movs	r5, r1
 801000c:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801000e:	2800      	cmp	r0, #0
 8010010:	d101      	bne.n	8010016 <xQueueGenericCreate+0x10>
 8010012:	b672      	cpsid	i
 8010014:	e7fe      	b.n	8010014 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8010016:	2900      	cmp	r1, #0
 8010018:	d003      	beq.n	8010022 <xQueueGenericCreate+0x1c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801001a:	0008      	movs	r0, r1
 801001c:	4370      	muls	r0, r6
 801001e:	3001      	adds	r0, #1
 8010020:	e000      	b.n	8010024 <xQueueGenericCreate+0x1e>
		xQueueSizeInBytes = ( size_t ) 0;
 8010022:	2000      	movs	r0, #0
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010024:	3054      	adds	r0, #84	; 0x54
 8010026:	f001 fc9d 	bl	8011964 <pvPortMalloc>
 801002a:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 801002c:	d005      	beq.n	801003a <xQueueGenericCreate+0x34>
		if( uxItemSize == ( UBaseType_t ) 0 )
 801002e:	2d00      	cmp	r5, #0
 8010030:	d005      	beq.n	801003e <xQueueGenericCreate+0x38>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 8010032:	0003      	movs	r3, r0
 8010034:	3354      	adds	r3, #84	; 0x54
 8010036:	6003      	str	r3, [r0, #0]
 8010038:	e002      	b.n	8010040 <xQueueGenericCreate+0x3a>
	configASSERT( xReturn );
 801003a:	b672      	cpsid	i
 801003c:	e7fe      	b.n	801003c <xQueueGenericCreate+0x36>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801003e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 8010040:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 8010042:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010044:	2101      	movs	r1, #1
 8010046:	0020      	movs	r0, r4
 8010048:	f7ff ffa7 	bl	800ff9a <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 801004c:	2350      	movs	r3, #80	; 0x50
 801004e:	54e7      	strb	r7, [r4, r3]
}
 8010050:	0020      	movs	r0, r4
 8010052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010054 <xQueueCreateCountingSemaphore>:
	{
 8010054:	b510      	push	{r4, lr}
 8010056:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 8010058:	2800      	cmp	r0, #0
 801005a:	d101      	bne.n	8010060 <xQueueCreateCountingSemaphore+0xc>
 801005c:	b672      	cpsid	i
 801005e:	e7fe      	b.n	801005e <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010060:	4288      	cmp	r0, r1
 8010062:	d201      	bcs.n	8010068 <xQueueCreateCountingSemaphore+0x14>
 8010064:	b672      	cpsid	i
 8010066:	e7fe      	b.n	8010066 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010068:	2202      	movs	r2, #2
 801006a:	2100      	movs	r1, #0
 801006c:	f7ff ffcb 	bl	8010006 <xQueueGenericCreate>
		if( xHandle != NULL )
 8010070:	2800      	cmp	r0, #0
 8010072:	d000      	beq.n	8010076 <xQueueCreateCountingSemaphore+0x22>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010074:	6384      	str	r4, [r0, #56]	; 0x38
		configASSERT( xHandle );
 8010076:	2800      	cmp	r0, #0
 8010078:	d101      	bne.n	801007e <xQueueCreateCountingSemaphore+0x2a>
 801007a:	b672      	cpsid	i
 801007c:	e7fe      	b.n	801007c <xQueueCreateCountingSemaphore+0x28>
	}
 801007e:	bd10      	pop	{r4, pc}

08010080 <xQueueGenericSend>:
{
 8010080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010082:	b085      	sub	sp, #20
 8010084:	0004      	movs	r4, r0
 8010086:	000f      	movs	r7, r1
 8010088:	9201      	str	r2, [sp, #4]
 801008a:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 801008c:	2800      	cmp	r0, #0
 801008e:	d006      	beq.n	801009e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010090:	2900      	cmp	r1, #0
 8010092:	d106      	bne.n	80100a2 <xQueueGenericSend+0x22>
 8010094:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010096:	2b00      	cmp	r3, #0
 8010098:	d003      	beq.n	80100a2 <xQueueGenericSend+0x22>
 801009a:	b672      	cpsid	i
 801009c:	e7fe      	b.n	801009c <xQueueGenericSend+0x1c>
	configASSERT( pxQueue );
 801009e:	b672      	cpsid	i
 80100a0:	e7fe      	b.n	80100a0 <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80100a2:	2d02      	cmp	r5, #2
 80100a4:	d104      	bne.n	80100b0 <xQueueGenericSend+0x30>
 80100a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d001      	beq.n	80100b0 <xQueueGenericSend+0x30>
 80100ac:	b672      	cpsid	i
 80100ae:	e7fe      	b.n	80100ae <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80100b0:	f000 ff5c 	bl	8010f6c <xTaskGetSchedulerState>
 80100b4:	2800      	cmp	r0, #0
 80100b6:	d104      	bne.n	80100c2 <xQueueGenericSend+0x42>
 80100b8:	9b01      	ldr	r3, [sp, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d003      	beq.n	80100c6 <xQueueGenericSend+0x46>
 80100be:	b672      	cpsid	i
 80100c0:	e7fe      	b.n	80100c0 <xQueueGenericSend+0x40>
 80100c2:	2600      	movs	r6, #0
 80100c4:	e02f      	b.n	8010126 <xQueueGenericSend+0xa6>
 80100c6:	2600      	movs	r6, #0
 80100c8:	e02d      	b.n	8010126 <xQueueGenericSend+0xa6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80100ca:	002a      	movs	r2, r5
 80100cc:	0039      	movs	r1, r7
 80100ce:	0020      	movs	r0, r4
 80100d0:	f7ff fed6 	bl	800fe80 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d104      	bne.n	80100e4 <xQueueGenericSend+0x64>
					else if( xYieldRequired != pdFALSE )
 80100da:	2800      	cmp	r0, #0
 80100dc:	d00a      	beq.n	80100f4 <xQueueGenericSend+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 80100de:	f001 fb81 	bl	80117e4 <vPortYield>
 80100e2:	e007      	b.n	80100f4 <xQueueGenericSend+0x74>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80100e4:	0020      	movs	r0, r4
 80100e6:	3024      	adds	r0, #36	; 0x24
 80100e8:	f000 feb4 	bl	8010e54 <xTaskRemoveFromEventList>
 80100ec:	2801      	cmp	r0, #1
 80100ee:	d101      	bne.n	80100f4 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
 80100f0:	f001 fb78 	bl	80117e4 <vPortYield>
				taskEXIT_CRITICAL();
 80100f4:	f001 fb8e 	bl	8011814 <vPortExitCritical>
				return pdPASS;
 80100f8:	2001      	movs	r0, #1
}
 80100fa:	b005      	add	sp, #20
 80100fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80100fe:	f001 fb89 	bl	8011814 <vPortExitCritical>
					return errQUEUE_FULL;
 8010102:	2000      	movs	r0, #0
 8010104:	e7f9      	b.n	80100fa <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 8010106:	a802      	add	r0, sp, #8
 8010108:	f000 fee6 	bl	8010ed8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801010c:	3601      	adds	r6, #1
 801010e:	e017      	b.n	8010140 <xQueueGenericSend+0xc0>
		prvLockQueue( pxQueue );
 8010110:	2300      	movs	r3, #0
 8010112:	6463      	str	r3, [r4, #68]	; 0x44
 8010114:	e01d      	b.n	8010152 <xQueueGenericSend+0xd2>
 8010116:	2300      	movs	r3, #0
 8010118:	64a3      	str	r3, [r4, #72]	; 0x48
 801011a:	e01d      	b.n	8010158 <xQueueGenericSend+0xd8>
				prvUnlockQueue( pxQueue );
 801011c:	0020      	movs	r0, r4
 801011e:	f7ff ff05 	bl	800ff2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010122:	f000 fcc3 	bl	8010aac <xTaskResumeAll>
		taskENTER_CRITICAL();
 8010126:	f001 fb69 	bl	80117fc <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801012a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801012c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801012e:	4293      	cmp	r3, r2
 8010130:	d3cb      	bcc.n	80100ca <xQueueGenericSend+0x4a>
 8010132:	2d02      	cmp	r5, #2
 8010134:	d0c9      	beq.n	80100ca <xQueueGenericSend+0x4a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010136:	9b01      	ldr	r3, [sp, #4]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d0e0      	beq.n	80100fe <xQueueGenericSend+0x7e>
				else if( xEntryTimeSet == pdFALSE )
 801013c:	2e00      	cmp	r6, #0
 801013e:	d0e2      	beq.n	8010106 <xQueueGenericSend+0x86>
		taskEXIT_CRITICAL();
 8010140:	f001 fb68 	bl	8011814 <vPortExitCritical>
		vTaskSuspendAll();
 8010144:	f000 fc14 	bl	8010970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010148:	f001 fb58 	bl	80117fc <vPortEnterCritical>
 801014c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801014e:	3301      	adds	r3, #1
 8010150:	d0de      	beq.n	8010110 <xQueueGenericSend+0x90>
 8010152:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010154:	3301      	adds	r3, #1
 8010156:	d0de      	beq.n	8010116 <xQueueGenericSend+0x96>
 8010158:	f001 fb5c 	bl	8011814 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801015c:	a901      	add	r1, sp, #4
 801015e:	a802      	add	r0, sp, #8
 8010160:	f000 feca 	bl	8010ef8 <xTaskCheckForTimeOut>
 8010164:	2800      	cmp	r0, #0
 8010166:	d113      	bne.n	8010190 <xQueueGenericSend+0x110>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010168:	0020      	movs	r0, r4
 801016a:	f7ff fe6c 	bl	800fe46 <prvIsQueueFull>
 801016e:	2800      	cmp	r0, #0
 8010170:	d0d4      	beq.n	801011c <xQueueGenericSend+0x9c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010172:	0020      	movs	r0, r4
 8010174:	3010      	adds	r0, #16
 8010176:	9901      	ldr	r1, [sp, #4]
 8010178:	f000 fe2e 	bl	8010dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801017c:	0020      	movs	r0, r4
 801017e:	f7ff fed5 	bl	800ff2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010182:	f000 fc93 	bl	8010aac <xTaskResumeAll>
 8010186:	2800      	cmp	r0, #0
 8010188:	d1cd      	bne.n	8010126 <xQueueGenericSend+0xa6>
					portYIELD_WITHIN_API();
 801018a:	f001 fb2b 	bl	80117e4 <vPortYield>
 801018e:	e7ca      	b.n	8010126 <xQueueGenericSend+0xa6>
			prvUnlockQueue( pxQueue );
 8010190:	0020      	movs	r0, r4
 8010192:	f7ff fecb 	bl	800ff2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010196:	f000 fc89 	bl	8010aac <xTaskResumeAll>
			return errQUEUE_FULL;
 801019a:	2000      	movs	r0, #0
 801019c:	e7ad      	b.n	80100fa <xQueueGenericSend+0x7a>

0801019e <xQueueGenericSendFromISR>:
{
 801019e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101a0:	b083      	sub	sp, #12
 80101a2:	0004      	movs	r4, r0
 80101a4:	000f      	movs	r7, r1
 80101a6:	0015      	movs	r5, r2
 80101a8:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 80101aa:	2800      	cmp	r0, #0
 80101ac:	d006      	beq.n	80101bc <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101ae:	2900      	cmp	r1, #0
 80101b0:	d106      	bne.n	80101c0 <xQueueGenericSendFromISR+0x22>
 80101b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d003      	beq.n	80101c0 <xQueueGenericSendFromISR+0x22>
 80101b8:	b672      	cpsid	i
 80101ba:	e7fe      	b.n	80101ba <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 80101bc:	b672      	cpsid	i
 80101be:	e7fe      	b.n	80101be <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80101c0:	2e02      	cmp	r6, #2
 80101c2:	d104      	bne.n	80101ce <xQueueGenericSendFromISR+0x30>
 80101c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80101c6:	2b01      	cmp	r3, #1
 80101c8:	d001      	beq.n	80101ce <xQueueGenericSendFromISR+0x30>
 80101ca:	b672      	cpsid	i
 80101cc:	e7fe      	b.n	80101cc <xQueueGenericSendFromISR+0x2e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80101ce:	f001 fb31 	bl	8011834 <ulSetInterruptMaskFromISR>
 80101d2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80101d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80101d8:	4293      	cmp	r3, r2
 80101da:	d303      	bcc.n	80101e4 <xQueueGenericSendFromISR+0x46>
 80101dc:	2e02      	cmp	r6, #2
 80101de:	d001      	beq.n	80101e4 <xQueueGenericSendFromISR+0x46>
			xReturn = errQUEUE_FULL;
 80101e0:	2400      	movs	r4, #0
 80101e2:	e00b      	b.n	80101fc <xQueueGenericSendFromISR+0x5e>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101e4:	0032      	movs	r2, r6
 80101e6:	0039      	movs	r1, r7
 80101e8:	0020      	movs	r0, r4
 80101ea:	f7ff fe49 	bl	800fe80 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 80101ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80101f0:	3301      	adds	r3, #1
 80101f2:	d009      	beq.n	8010208 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
 80101f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80101f6:	3301      	adds	r3, #1
 80101f8:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 80101fa:	2401      	movs	r4, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80101fc:	9801      	ldr	r0, [sp, #4]
 80101fe:	f001 fb1e 	bl	801183e <vClearInterruptMaskFromISR>
}
 8010202:	0020      	movs	r0, r4
 8010204:	b003      	add	sp, #12
 8010206:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00a      	beq.n	8010224 <xQueueGenericSendFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801020e:	0020      	movs	r0, r4
 8010210:	3024      	adds	r0, #36	; 0x24
 8010212:	f000 fe1f 	bl	8010e54 <xTaskRemoveFromEventList>
 8010216:	2800      	cmp	r0, #0
 8010218:	d006      	beq.n	8010228 <xQueueGenericSendFromISR+0x8a>
							if( pxHigherPriorityTaskWoken != NULL )
 801021a:	2d00      	cmp	r5, #0
 801021c:	d006      	beq.n	801022c <xQueueGenericSendFromISR+0x8e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801021e:	2401      	movs	r4, #1
 8010220:	602c      	str	r4, [r5, #0]
 8010222:	e7eb      	b.n	80101fc <xQueueGenericSendFromISR+0x5e>
			xReturn = pdPASS;
 8010224:	2401      	movs	r4, #1
 8010226:	e7e9      	b.n	80101fc <xQueueGenericSendFromISR+0x5e>
 8010228:	2401      	movs	r4, #1
 801022a:	e7e7      	b.n	80101fc <xQueueGenericSendFromISR+0x5e>
 801022c:	2401      	movs	r4, #1
 801022e:	e7e5      	b.n	80101fc <xQueueGenericSendFromISR+0x5e>

08010230 <xQueueGiveFromISR>:
{
 8010230:	b570      	push	{r4, r5, r6, lr}
 8010232:	0004      	movs	r4, r0
 8010234:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 8010236:	2800      	cmp	r0, #0
 8010238:	d004      	beq.n	8010244 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 801023a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801023c:	2b00      	cmp	r3, #0
 801023e:	d003      	beq.n	8010248 <xQueueGiveFromISR+0x18>
 8010240:	b672      	cpsid	i
 8010242:	e7fe      	b.n	8010242 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 8010244:	b672      	cpsid	i
 8010246:	e7fe      	b.n	8010246 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010248:	6803      	ldr	r3, [r0, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d01e      	beq.n	801028c <xQueueGiveFromISR+0x5c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801024e:	f001 faf1 	bl	8011834 <ulSetInterruptMaskFromISR>
 8010252:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8010254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010256:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010258:	4293      	cmp	r3, r2
 801025a:	d221      	bcs.n	80102a0 <xQueueGiveFromISR+0x70>
			++( pxQueue->uxMessagesWaiting );
 801025c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801025e:	3301      	adds	r3, #1
 8010260:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 8010262:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010264:	3301      	adds	r3, #1
 8010266:	d116      	bne.n	8010296 <xQueueGiveFromISR+0x66>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801026a:	2b00      	cmp	r3, #0
 801026c:	d01a      	beq.n	80102a4 <xQueueGiveFromISR+0x74>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801026e:	0020      	movs	r0, r4
 8010270:	3024      	adds	r0, #36	; 0x24
 8010272:	f000 fdef 	bl	8010e54 <xTaskRemoveFromEventList>
 8010276:	2800      	cmp	r0, #0
 8010278:	d016      	beq.n	80102a8 <xQueueGiveFromISR+0x78>
							if( pxHigherPriorityTaskWoken != NULL )
 801027a:	2e00      	cmp	r6, #0
 801027c:	d016      	beq.n	80102ac <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801027e:	2401      	movs	r4, #1
 8010280:	6034      	str	r4, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8010282:	0028      	movs	r0, r5
 8010284:	f001 fadb 	bl	801183e <vClearInterruptMaskFromISR>
}
 8010288:	0020      	movs	r0, r4
 801028a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 801028c:	6843      	ldr	r3, [r0, #4]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d0dd      	beq.n	801024e <xQueueGiveFromISR+0x1e>
 8010292:	b672      	cpsid	i
 8010294:	e7fe      	b.n	8010294 <xQueueGiveFromISR+0x64>
				++( pxQueue->xTxLock );
 8010296:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010298:	3301      	adds	r3, #1
 801029a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 801029c:	2401      	movs	r4, #1
 801029e:	e7f0      	b.n	8010282 <xQueueGiveFromISR+0x52>
			xReturn = errQUEUE_FULL;
 80102a0:	2400      	movs	r4, #0
 80102a2:	e7ee      	b.n	8010282 <xQueueGiveFromISR+0x52>
			xReturn = pdPASS;
 80102a4:	2401      	movs	r4, #1
 80102a6:	e7ec      	b.n	8010282 <xQueueGiveFromISR+0x52>
 80102a8:	2401      	movs	r4, #1
 80102aa:	e7ea      	b.n	8010282 <xQueueGiveFromISR+0x52>
 80102ac:	2401      	movs	r4, #1
 80102ae:	e7e8      	b.n	8010282 <xQueueGiveFromISR+0x52>

080102b0 <xQueueGenericReceive>:
{
 80102b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102b2:	b085      	sub	sp, #20
 80102b4:	0004      	movs	r4, r0
 80102b6:	000e      	movs	r6, r1
 80102b8:	9201      	str	r2, [sp, #4]
 80102ba:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 80102bc:	2800      	cmp	r0, #0
 80102be:	d006      	beq.n	80102ce <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80102c0:	2900      	cmp	r1, #0
 80102c2:	d106      	bne.n	80102d2 <xQueueGenericReceive+0x22>
 80102c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d003      	beq.n	80102d2 <xQueueGenericReceive+0x22>
 80102ca:	b672      	cpsid	i
 80102cc:	e7fe      	b.n	80102cc <xQueueGenericReceive+0x1c>
	configASSERT( pxQueue );
 80102ce:	b672      	cpsid	i
 80102d0:	e7fe      	b.n	80102d0 <xQueueGenericReceive+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80102d2:	f000 fe4b 	bl	8010f6c <xTaskGetSchedulerState>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d104      	bne.n	80102e4 <xQueueGenericReceive+0x34>
 80102da:	9b01      	ldr	r3, [sp, #4]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d003      	beq.n	80102e8 <xQueueGenericReceive+0x38>
 80102e0:	b672      	cpsid	i
 80102e2:	e7fe      	b.n	80102e2 <xQueueGenericReceive+0x32>
 80102e4:	2500      	movs	r5, #0
 80102e6:	e04a      	b.n	801037e <xQueueGenericReceive+0xce>
 80102e8:	2500      	movs	r5, #0
 80102ea:	e048      	b.n	801037e <xQueueGenericReceive+0xce>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80102ec:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80102ee:	0031      	movs	r1, r6
 80102f0:	0020      	movs	r0, r4
 80102f2:	f7ff fe09 	bl	800ff08 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80102f6:	2f00      	cmp	r7, #0
 80102f8:	d118      	bne.n	801032c <xQueueGenericReceive+0x7c>
					--( pxQueue->uxMessagesWaiting );
 80102fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80102fc:	3b01      	subs	r3, #1
 80102fe:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010300:	6823      	ldr	r3, [r4, #0]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d102      	bne.n	801030c <xQueueGenericReceive+0x5c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010306:	f000 ff6b 	bl	80111e0 <pvTaskIncrementMutexHeldCount>
 801030a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801030c:	6923      	ldr	r3, [r4, #16]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d007      	beq.n	8010322 <xQueueGenericReceive+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8010312:	0020      	movs	r0, r4
 8010314:	3010      	adds	r0, #16
 8010316:	f000 fd9d 	bl	8010e54 <xTaskRemoveFromEventList>
 801031a:	2801      	cmp	r0, #1
 801031c:	d101      	bne.n	8010322 <xQueueGenericReceive+0x72>
							queueYIELD_IF_USING_PREEMPTION();
 801031e:	f001 fa61 	bl	80117e4 <vPortYield>
				taskEXIT_CRITICAL();
 8010322:	f001 fa77 	bl	8011814 <vPortExitCritical>
				return pdPASS;
 8010326:	2001      	movs	r0, #1
}
 8010328:	b005      	add	sp, #20
 801032a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 801032c:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801032e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010330:	2b00      	cmp	r3, #0
 8010332:	d0f6      	beq.n	8010322 <xQueueGenericReceive+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010334:	0020      	movs	r0, r4
 8010336:	3024      	adds	r0, #36	; 0x24
 8010338:	f000 fd8c 	bl	8010e54 <xTaskRemoveFromEventList>
 801033c:	2800      	cmp	r0, #0
 801033e:	d0f0      	beq.n	8010322 <xQueueGenericReceive+0x72>
							queueYIELD_IF_USING_PREEMPTION();
 8010340:	f001 fa50 	bl	80117e4 <vPortYield>
 8010344:	e7ed      	b.n	8010322 <xQueueGenericReceive+0x72>
					taskEXIT_CRITICAL();
 8010346:	f001 fa65 	bl	8011814 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801034a:	2000      	movs	r0, #0
 801034c:	e7ec      	b.n	8010328 <xQueueGenericReceive+0x78>
					vTaskSetTimeOutState( &xTimeOut );
 801034e:	a802      	add	r0, sp, #8
 8010350:	f000 fdc2 	bl	8010ed8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010354:	3501      	adds	r5, #1
 8010356:	e01c      	b.n	8010392 <xQueueGenericReceive+0xe2>
		prvLockQueue( pxQueue );
 8010358:	2300      	movs	r3, #0
 801035a:	6463      	str	r3, [r4, #68]	; 0x44
 801035c:	e022      	b.n	80103a4 <xQueueGenericReceive+0xf4>
 801035e:	2300      	movs	r3, #0
 8010360:	64a3      	str	r3, [r4, #72]	; 0x48
 8010362:	e022      	b.n	80103aa <xQueueGenericReceive+0xfa>
						taskENTER_CRITICAL();
 8010364:	f001 fa4a 	bl	80117fc <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010368:	6860      	ldr	r0, [r4, #4]
 801036a:	f000 fe11 	bl	8010f90 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 801036e:	f001 fa51 	bl	8011814 <vPortExitCritical>
 8010372:	e02a      	b.n	80103ca <xQueueGenericReceive+0x11a>
				prvUnlockQueue( pxQueue );
 8010374:	0020      	movs	r0, r4
 8010376:	f7ff fdd9 	bl	800ff2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801037a:	f000 fb97 	bl	8010aac <xTaskResumeAll>
		taskENTER_CRITICAL();
 801037e:	f001 fa3d 	bl	80117fc <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1b1      	bne.n	80102ec <xQueueGenericReceive+0x3c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010388:	9b01      	ldr	r3, [sp, #4]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d0db      	beq.n	8010346 <xQueueGenericReceive+0x96>
				else if( xEntryTimeSet == pdFALSE )
 801038e:	2d00      	cmp	r5, #0
 8010390:	d0dd      	beq.n	801034e <xQueueGenericReceive+0x9e>
		taskEXIT_CRITICAL();
 8010392:	f001 fa3f 	bl	8011814 <vPortExitCritical>
		vTaskSuspendAll();
 8010396:	f000 faeb 	bl	8010970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801039a:	f001 fa2f 	bl	80117fc <vPortEnterCritical>
 801039e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80103a0:	3301      	adds	r3, #1
 80103a2:	d0d9      	beq.n	8010358 <xQueueGenericReceive+0xa8>
 80103a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80103a6:	3301      	adds	r3, #1
 80103a8:	d0d9      	beq.n	801035e <xQueueGenericReceive+0xae>
 80103aa:	f001 fa33 	bl	8011814 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80103ae:	a901      	add	r1, sp, #4
 80103b0:	a802      	add	r0, sp, #8
 80103b2:	f000 fda1 	bl	8010ef8 <xTaskCheckForTimeOut>
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d116      	bne.n	80103e8 <xQueueGenericReceive+0x138>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103ba:	0020      	movs	r0, r4
 80103bc:	f7ff fd52 	bl	800fe64 <prvIsQueueEmpty>
 80103c0:	2800      	cmp	r0, #0
 80103c2:	d0d7      	beq.n	8010374 <xQueueGenericReceive+0xc4>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103c4:	6823      	ldr	r3, [r4, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d0cc      	beq.n	8010364 <xQueueGenericReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80103ca:	0020      	movs	r0, r4
 80103cc:	3024      	adds	r0, #36	; 0x24
 80103ce:	9901      	ldr	r1, [sp, #4]
 80103d0:	f000 fd02 	bl	8010dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80103d4:	0020      	movs	r0, r4
 80103d6:	f7ff fda9 	bl	800ff2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80103da:	f000 fb67 	bl	8010aac <xTaskResumeAll>
 80103de:	2800      	cmp	r0, #0
 80103e0:	d1cd      	bne.n	801037e <xQueueGenericReceive+0xce>
					portYIELD_WITHIN_API();
 80103e2:	f001 f9ff 	bl	80117e4 <vPortYield>
 80103e6:	e7ca      	b.n	801037e <xQueueGenericReceive+0xce>
			prvUnlockQueue( pxQueue );
 80103e8:	0020      	movs	r0, r4
 80103ea:	f7ff fd9f 	bl	800ff2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103ee:	f000 fb5d 	bl	8010aac <xTaskResumeAll>
			return errQUEUE_EMPTY;
 80103f2:	2000      	movs	r0, #0
 80103f4:	e798      	b.n	8010328 <xQueueGenericReceive+0x78>

080103f6 <xQueueReceiveFromISR>:
{
 80103f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f8:	0004      	movs	r4, r0
 80103fa:	000f      	movs	r7, r1
 80103fc:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 80103fe:	2800      	cmp	r0, #0
 8010400:	d006      	beq.n	8010410 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010402:	2900      	cmp	r1, #0
 8010404:	d106      	bne.n	8010414 <xQueueReceiveFromISR+0x1e>
 8010406:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010408:	2b00      	cmp	r3, #0
 801040a:	d003      	beq.n	8010414 <xQueueReceiveFromISR+0x1e>
 801040c:	b672      	cpsid	i
 801040e:	e7fe      	b.n	801040e <xQueueReceiveFromISR+0x18>
	configASSERT( pxQueue );
 8010410:	b672      	cpsid	i
 8010412:	e7fe      	b.n	8010412 <xQueueReceiveFromISR+0x1c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010414:	f001 fa0e 	bl	8011834 <ulSetInterruptMaskFromISR>
 8010418:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 801041a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801041c:	2b00      	cmp	r3, #0
 801041e:	d01c      	beq.n	801045a <xQueueReceiveFromISR+0x64>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010420:	0039      	movs	r1, r7
 8010422:	0020      	movs	r0, r4
 8010424:	f7ff fd70 	bl	800ff08 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8010428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801042a:	3b01      	subs	r3, #1
 801042c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 801042e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010430:	3301      	adds	r3, #1
 8010432:	d004      	beq.n	801043e <xQueueReceiveFromISR+0x48>
				++( pxQueue->xRxLock );
 8010434:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010436:	3301      	adds	r3, #1
 8010438:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 801043a:	2401      	movs	r4, #1
 801043c:	e00e      	b.n	801045c <xQueueReceiveFromISR+0x66>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801043e:	6923      	ldr	r3, [r4, #16]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d010      	beq.n	8010466 <xQueueReceiveFromISR+0x70>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010444:	0020      	movs	r0, r4
 8010446:	3010      	adds	r0, #16
 8010448:	f000 fd04 	bl	8010e54 <xTaskRemoveFromEventList>
 801044c:	2800      	cmp	r0, #0
 801044e:	d00c      	beq.n	801046a <xQueueReceiveFromISR+0x74>
						if( pxHigherPriorityTaskWoken != NULL )
 8010450:	2e00      	cmp	r6, #0
 8010452:	d00c      	beq.n	801046e <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010454:	2401      	movs	r4, #1
 8010456:	6034      	str	r4, [r6, #0]
 8010458:	e000      	b.n	801045c <xQueueReceiveFromISR+0x66>
			xReturn = pdFAIL;
 801045a:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801045c:	0028      	movs	r0, r5
 801045e:	f001 f9ee 	bl	801183e <vClearInterruptMaskFromISR>
}
 8010462:	0020      	movs	r0, r4
 8010464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 8010466:	2401      	movs	r4, #1
 8010468:	e7f8      	b.n	801045c <xQueueReceiveFromISR+0x66>
 801046a:	2401      	movs	r4, #1
 801046c:	e7f6      	b.n	801045c <xQueueReceiveFromISR+0x66>
 801046e:	2401      	movs	r4, #1
 8010470:	e7f4      	b.n	801045c <xQueueReceiveFromISR+0x66>
	...

08010474 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010474:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010476:	2300      	movs	r3, #0
 8010478:	2b07      	cmp	r3, #7
 801047a:	d80a      	bhi.n	8010492 <vQueueAddToRegistry+0x1e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801047c:	00da      	lsls	r2, r3, #3
 801047e:	4c05      	ldr	r4, [pc, #20]	; (8010494 <vQueueAddToRegistry+0x20>)
 8010480:	5912      	ldr	r2, [r2, r4]
 8010482:	2a00      	cmp	r2, #0
 8010484:	d001      	beq.n	801048a <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010486:	3301      	adds	r3, #1
 8010488:	e7f6      	b.n	8010478 <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801048a:	00db      	lsls	r3, r3, #3
 801048c:	5119      	str	r1, [r3, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801048e:	18e3      	adds	r3, r4, r3
 8010490:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010492:	bd10      	pop	{r4, pc}
 8010494:	2000726c 	.word	0x2000726c

08010498 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8010498:	b570      	push	{r4, r5, r6, lr}
 801049a:	0004      	movs	r4, r0
 801049c:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801049e:	f001 f9ad 	bl	80117fc <vPortEnterCritical>
 80104a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104a4:	3301      	adds	r3, #1
 80104a6:	d00b      	beq.n	80104c0 <vQueueWaitForMessageRestricted+0x28>
 80104a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80104aa:	3301      	adds	r3, #1
 80104ac:	d00b      	beq.n	80104c6 <vQueueWaitForMessageRestricted+0x2e>
 80104ae:	f001 f9b1 	bl	8011814 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80104b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d009      	beq.n	80104cc <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80104b8:	0020      	movs	r0, r4
 80104ba:	f7ff fd37 	bl	800ff2c <prvUnlockQueue>
	}
 80104be:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80104c0:	2300      	movs	r3, #0
 80104c2:	6463      	str	r3, [r4, #68]	; 0x44
 80104c4:	e7f0      	b.n	80104a8 <vQueueWaitForMessageRestricted+0x10>
 80104c6:	2300      	movs	r3, #0
 80104c8:	64a3      	str	r3, [r4, #72]	; 0x48
 80104ca:	e7f0      	b.n	80104ae <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80104cc:	0020      	movs	r0, r4
 80104ce:	3024      	adds	r0, #36	; 0x24
 80104d0:	0029      	movs	r1, r5
 80104d2:	f000 fca5 	bl	8010e20 <vTaskPlaceOnEventListRestricted>
 80104d6:	e7ef      	b.n	80104b8 <vQueueWaitForMessageRestricted+0x20>

080104d8 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 80104d8:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80104da:	e001      	b.n	80104e0 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 80104dc:	3001      	adds	r0, #1
			ulCount++;
 80104de:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80104e0:	7802      	ldrb	r2, [r0, #0]
 80104e2:	2aa5      	cmp	r2, #165	; 0xa5
 80104e4:	d0fa      	beq.n	80104dc <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80104e6:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 80104e8:	b298      	uxth	r0, r3
	}
 80104ea:	4770      	bx	lr

080104ec <prvListTaskWithinSingleList>:
	{
 80104ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ee:	46de      	mov	lr, fp
 80104f0:	4657      	mov	r7, sl
 80104f2:	464e      	mov	r6, r9
 80104f4:	4645      	mov	r5, r8
 80104f6:	b5e0      	push	{r5, r6, r7, lr}
 80104f8:	4682      	mov	sl, r0
 80104fa:	000e      	movs	r6, r1
 80104fc:	4690      	mov	r8, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80104fe:	680f      	ldr	r7, [r1, #0]
 8010500:	2f00      	cmp	r7, #0
 8010502:	d039      	beq.n	8010578 <prvListTaskWithinSingleList+0x8c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8010504:	684b      	ldr	r3, [r1, #4]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	604b      	str	r3, [r1, #4]
 801050a:	2208      	movs	r2, #8
 801050c:	4691      	mov	r9, r2
 801050e:	4489      	add	r9, r1
 8010510:	454b      	cmp	r3, r9
 8010512:	d004      	beq.n	801051e <prvListTaskWithinSingleList+0x32>
 8010514:	6873      	ldr	r3, [r6, #4]
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	469b      	mov	fp, r3
	UBaseType_t uxTask = 0;
 801051a:	2700      	movs	r7, #0
 801051c:	e010      	b.n	8010540 <prvListTaskWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	604b      	str	r3, [r1, #4]
 8010522:	e7f7      	b.n	8010514 <prvListTaskWithinSingleList+0x28>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	6073      	str	r3, [r6, #4]
 8010528:	e00f      	b.n	801054a <prvListTaskWithinSingleList+0x5e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 801052a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801052c:	6163      	str	r3, [r4, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 801052e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8010530:	61a3      	str	r3, [r4, #24]
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 8010532:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010534:	f7ff ffd0 	bl	80104d8 <prvTaskCheckFreeStackSpace>
 8010538:	83a0      	strh	r0, [r4, #28]
				uxTask++;
 801053a:	3701      	adds	r7, #1
			} while( pxNextTCB != pxFirstTCB );
 801053c:	45ab      	cmp	fp, r5
 801053e:	d01b      	beq.n	8010578 <prvListTaskWithinSingleList+0x8c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8010540:	6873      	ldr	r3, [r6, #4]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	6073      	str	r3, [r6, #4]
 8010546:	4599      	cmp	r9, r3
 8010548:	d0ec      	beq.n	8010524 <prvListTaskWithinSingleList+0x38>
 801054a:	6873      	ldr	r3, [r6, #4]
 801054c:	68dd      	ldr	r5, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 801054e:	017c      	lsls	r4, r7, #5
 8010550:	4454      	add	r4, sl
 8010552:	6025      	str	r5, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 8010554:	002b      	movs	r3, r5
 8010556:	3334      	adds	r3, #52	; 0x34
 8010558:	6063      	str	r3, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 801055a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801055c:	60a3      	str	r3, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 801055e:	4643      	mov	r3, r8
 8010560:	7323      	strb	r3, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 8010562:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010564:	6123      	str	r3, [r4, #16]
					if( eState == eSuspended )
 8010566:	4643      	mov	r3, r8
 8010568:	2b03      	cmp	r3, #3
 801056a:	d1de      	bne.n	801052a <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 801056c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801056e:	2b00      	cmp	r3, #0
 8010570:	d0db      	beq.n	801052a <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 8010572:	2302      	movs	r3, #2
 8010574:	7323      	strb	r3, [r4, #12]
 8010576:	e7d8      	b.n	801052a <prvListTaskWithinSingleList+0x3e>
	}
 8010578:	0038      	movs	r0, r7
 801057a:	bc3c      	pop	{r2, r3, r4, r5}
 801057c:	4690      	mov	r8, r2
 801057e:	4699      	mov	r9, r3
 8010580:	46a2      	mov	sl, r4
 8010582:	46ab      	mov	fp, r5
 8010584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010588 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010588:	4b08      	ldr	r3, [pc, #32]	; (80105ac <prvResetNextTaskUnblockTime+0x24>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d007      	beq.n	80105a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010592:	4b06      	ldr	r3, [pc, #24]	; (80105ac <prvResetNextTaskUnblockTime+0x24>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 801059a:	685a      	ldr	r2, [r3, #4]
 801059c:	4b04      	ldr	r3, [pc, #16]	; (80105b0 <prvResetNextTaskUnblockTime+0x28>)
 801059e:	601a      	str	r2, [r3, #0]
	}
}
 80105a0:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 80105a2:	4b03      	ldr	r3, [pc, #12]	; (80105b0 <prvResetNextTaskUnblockTime+0x28>)
 80105a4:	2201      	movs	r2, #1
 80105a6:	4252      	negs	r2, r2
 80105a8:	601a      	str	r2, [r3, #0]
 80105aa:	e7f9      	b.n	80105a0 <prvResetNextTaskUnblockTime+0x18>
 80105ac:	2000213c 	.word	0x2000213c
 80105b0:	200000c8 	.word	0x200000c8

080105b4 <prvDeleteTCB>:
	{
 80105b4:	b510      	push	{r4, lr}
 80105b6:	0004      	movs	r4, r0
			vPortFreeAligned( pxTCB->pxStack );
 80105b8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80105ba:	f001 fa4b 	bl	8011a54 <vPortFree>
		vPortFree( pxTCB );
 80105be:	0020      	movs	r0, r4
 80105c0:	f001 fa48 	bl	8011a54 <vPortFree>
	}
 80105c4:	bd10      	pop	{r4, pc}

080105c6 <prvAllocateTCBAndStack>:
{
 80105c6:	b570      	push	{r4, r5, r6, lr}
 80105c8:	0006      	movs	r6, r0
 80105ca:	1e0d      	subs	r5, r1, #0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105cc:	d103      	bne.n	80105d6 <prvAllocateTCBAndStack+0x10>
 80105ce:	0080      	lsls	r0, r0, #2
 80105d0:	f001 f9c8 	bl	8011964 <pvPortMalloc>
 80105d4:	0005      	movs	r5, r0
		if( pxStack != NULL )
 80105d6:	2d00      	cmp	r5, #0
 80105d8:	d012      	beq.n	8010600 <prvAllocateTCBAndStack+0x3a>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80105da:	2060      	movs	r0, #96	; 0x60
 80105dc:	f001 f9c2 	bl	8011964 <pvPortMalloc>
 80105e0:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 80105e2:	d009      	beq.n	80105f8 <prvAllocateTCBAndStack+0x32>
				pxNewTCB->pxStack = pxStack;
 80105e4:	6305      	str	r5, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
 80105e6:	2c00      	cmp	r4, #0
 80105e8:	d004      	beq.n	80105f4 <prvAllocateTCBAndStack+0x2e>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80105ea:	00b2      	lsls	r2, r6, #2
 80105ec:	21a5      	movs	r1, #165	; 0xa5
 80105ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80105f0:	f004 fe4a 	bl	8015288 <memset>
}
 80105f4:	0020      	movs	r0, r4
 80105f6:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxStack );
 80105f8:	0028      	movs	r0, r5
 80105fa:	f001 fa2b 	bl	8011a54 <vPortFree>
 80105fe:	e7f2      	b.n	80105e6 <prvAllocateTCBAndStack+0x20>
			pxNewTCB = NULL;
 8010600:	2400      	movs	r4, #0
	return pxNewTCB;
 8010602:	e7f7      	b.n	80105f4 <prvAllocateTCBAndStack+0x2e>

08010604 <prvInitialiseTCBVariables>:
{
 8010604:	b570      	push	{r4, r5, r6, lr}
 8010606:	0004      	movs	r4, r0
 8010608:	0015      	movs	r5, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801060a:	2300      	movs	r3, #0
 801060c:	2b0c      	cmp	r3, #12
 801060e:	d91a      	bls.n	8010646 <prvInitialiseTCBVariables+0x42>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010610:	2340      	movs	r3, #64	; 0x40
 8010612:	2200      	movs	r2, #0
 8010614:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010616:	2d06      	cmp	r5, #6
 8010618:	d900      	bls.n	801061c <prvInitialiseTCBVariables+0x18>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801061a:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 801061c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 801061e:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 8010620:	2600      	movs	r6, #0
 8010622:	6526      	str	r6, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8010624:	1d20      	adds	r0, r4, #4
 8010626:	f7ff fbd4 	bl	800fdd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 801062a:	0020      	movs	r0, r4
 801062c:	3018      	adds	r0, #24
 801062e:	f7ff fbd0 	bl	800fdd2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8010632:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010634:	2307      	movs	r3, #7
 8010636:	1b5d      	subs	r5, r3, r5
 8010638:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 801063a:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 801063c:	6566      	str	r6, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 801063e:	65a6      	str	r6, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 8010640:	3355      	adds	r3, #85	; 0x55
 8010642:	54e6      	strb	r6, [r4, r3]
}
 8010644:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8010646:	18c8      	adds	r0, r1, r3
 8010648:	7806      	ldrb	r6, [r0, #0]
 801064a:	18e2      	adds	r2, r4, r3
 801064c:	3234      	adds	r2, #52	; 0x34
 801064e:	7016      	strb	r6, [r2, #0]
		if( pcName[ x ] == 0x00 )
 8010650:	7802      	ldrb	r2, [r0, #0]
 8010652:	2a00      	cmp	r2, #0
 8010654:	d0dc      	beq.n	8010610 <prvInitialiseTCBVariables+0xc>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010656:	3301      	adds	r3, #1
 8010658:	e7d8      	b.n	801060c <prvInitialiseTCBVariables+0x8>
	...

0801065c <prvInitialiseTaskLists>:
{
 801065c:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801065e:	2400      	movs	r4, #0
 8010660:	2c06      	cmp	r4, #6
 8010662:	d915      	bls.n	8010690 <prvInitialiseTaskLists+0x34>
	vListInitialise( &xDelayedTaskList1 );
 8010664:	4d0e      	ldr	r5, [pc, #56]	; (80106a0 <prvInitialiseTaskLists+0x44>)
 8010666:	0028      	movs	r0, r5
 8010668:	f7ff fba8 	bl	800fdbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801066c:	4c0d      	ldr	r4, [pc, #52]	; (80106a4 <prvInitialiseTaskLists+0x48>)
 801066e:	0020      	movs	r0, r4
 8010670:	f7ff fba4 	bl	800fdbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010674:	480c      	ldr	r0, [pc, #48]	; (80106a8 <prvInitialiseTaskLists+0x4c>)
 8010676:	f7ff fba1 	bl	800fdbc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 801067a:	480c      	ldr	r0, [pc, #48]	; (80106ac <prvInitialiseTaskLists+0x50>)
 801067c:	f7ff fb9e 	bl	800fdbc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8010680:	480b      	ldr	r0, [pc, #44]	; (80106b0 <prvInitialiseTaskLists+0x54>)
 8010682:	f7ff fb9b 	bl	800fdbc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8010686:	4b0b      	ldr	r3, [pc, #44]	; (80106b4 <prvInitialiseTaskLists+0x58>)
 8010688:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801068a:	4b0b      	ldr	r3, [pc, #44]	; (80106b8 <prvInitialiseTaskLists+0x5c>)
 801068c:	601c      	str	r4, [r3, #0]
}
 801068e:	bd70      	pop	{r4, r5, r6, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010690:	2014      	movs	r0, #20
 8010692:	4360      	muls	r0, r4
 8010694:	4b09      	ldr	r3, [pc, #36]	; (80106bc <prvInitialiseTaskLists+0x60>)
 8010696:	18c0      	adds	r0, r0, r3
 8010698:	f7ff fb90 	bl	800fdbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801069c:	3401      	adds	r4, #1
 801069e:	e7df      	b.n	8010660 <prvInitialiseTaskLists+0x4>
 80106a0:	200021ec 	.word	0x200021ec
 80106a4:	20002200 	.word	0x20002200
 80106a8:	20002218 	.word	0x20002218
 80106ac:	20002244 	.word	0x20002244
 80106b0:	20002230 	.word	0x20002230
 80106b4:	2000213c 	.word	0x2000213c
 80106b8:	20002140 	.word	0x20002140
 80106bc:	20002144 	.word	0x20002144

080106c0 <prvAddCurrentTaskToDelayedList>:
{
 80106c0:	b510      	push	{r4, lr}
 80106c2:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80106c4:	4b0e      	ldr	r3, [pc, #56]	; (8010700 <prvAddCurrentTaskToDelayedList+0x40>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 80106ca:	4b0e      	ldr	r3, [pc, #56]	; (8010704 <prvAddCurrentTaskToDelayedList+0x44>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	4283      	cmp	r3, r0
 80106d0:	d80d      	bhi.n	80106ee <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80106d2:	4b0d      	ldr	r3, [pc, #52]	; (8010708 <prvAddCurrentTaskToDelayedList+0x48>)
 80106d4:	6818      	ldr	r0, [r3, #0]
 80106d6:	4b0a      	ldr	r3, [pc, #40]	; (8010700 <prvAddCurrentTaskToDelayedList+0x40>)
 80106d8:	6819      	ldr	r1, [r3, #0]
 80106da:	3104      	adds	r1, #4
 80106dc:	f7ff fb88 	bl	800fdf0 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 80106e0:	4b0a      	ldr	r3, [pc, #40]	; (801070c <prvAddCurrentTaskToDelayedList+0x4c>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	42a3      	cmp	r3, r4
 80106e6:	d909      	bls.n	80106fc <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 80106e8:	4b08      	ldr	r3, [pc, #32]	; (801070c <prvAddCurrentTaskToDelayedList+0x4c>)
 80106ea:	601c      	str	r4, [r3, #0]
}
 80106ec:	e006      	b.n	80106fc <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80106ee:	4b08      	ldr	r3, [pc, #32]	; (8010710 <prvAddCurrentTaskToDelayedList+0x50>)
 80106f0:	6818      	ldr	r0, [r3, #0]
 80106f2:	4b03      	ldr	r3, [pc, #12]	; (8010700 <prvAddCurrentTaskToDelayedList+0x40>)
 80106f4:	6819      	ldr	r1, [r3, #0]
 80106f6:	3104      	adds	r1, #4
 80106f8:	f7ff fb7a 	bl	800fdf0 <vListInsert>
}
 80106fc:	bd10      	pop	{r4, pc}
 80106fe:	46c0      	nop			; (mov r8, r8)
 8010700:	20002138 	.word	0x20002138
 8010704:	20002258 	.word	0x20002258
 8010708:	2000213c 	.word	0x2000213c
 801070c:	200000c8 	.word	0x200000c8
 8010710:	20002140 	.word	0x20002140

08010714 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8010714:	b510      	push	{r4, lr}
 8010716:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8010718:	f004 ffec 	bl	80156f4 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 801071c:	0020      	movs	r0, r4
 801071e:	f7ef fcfb 	bl	8000118 <strlen>
 8010722:	e002      	b.n	801072a <prvWriteNameToBuffer+0x16>
		{
			pcBuffer[ x ] = ' ';
 8010724:	2320      	movs	r3, #32
 8010726:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8010728:	3001      	adds	r0, #1
 801072a:	280b      	cmp	r0, #11
 801072c:	ddfa      	ble.n	8010724 <prvWriteNameToBuffer+0x10>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 801072e:	1820      	adds	r0, r4, r0
 8010730:	2300      	movs	r3, #0
 8010732:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 8010734:	bd10      	pop	{r4, pc}
	...

08010738 <xTaskGenericCreate>:
{
 8010738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801073a:	46ce      	mov	lr, r9
 801073c:	b500      	push	{lr}
 801073e:	b084      	sub	sp, #16
 8010740:	0006      	movs	r6, r0
 8010742:	9102      	str	r1, [sp, #8]
 8010744:	0015      	movs	r5, r2
 8010746:	9303      	str	r3, [sp, #12]
 8010748:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	configASSERT( pxTaskCode );
 801074a:	2800      	cmp	r0, #0
 801074c:	d101      	bne.n	8010752 <xTaskGenericCreate+0x1a>
 801074e:	b672      	cpsid	i
 8010750:	e7fe      	b.n	8010750 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8010752:	2c06      	cmp	r4, #6
 8010754:	d901      	bls.n	801075a <xTaskGenericCreate+0x22>
 8010756:	b672      	cpsid	i
 8010758:	e7fe      	b.n	8010758 <xTaskGenericCreate+0x20>
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 801075a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801075c:	0010      	movs	r0, r2
 801075e:	f7ff ff32 	bl	80105c6 <prvAllocateTCBAndStack>
 8010762:	1e07      	subs	r7, r0, #0
	if( pxNewTCB != NULL )
 8010764:	d05a      	beq.n	801081c <xTaskGenericCreate+0xe4>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8010766:	4b31      	ldr	r3, [pc, #196]	; (801082c <xTaskGenericCreate+0xf4>)
 8010768:	18eb      	adds	r3, r5, r3
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801076e:	4694      	mov	ip, r2
 8010770:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010772:	2207      	movs	r2, #7
 8010774:	4393      	bics	r3, r2
 8010776:	4699      	mov	r9, r3
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8010778:	9500      	str	r5, [sp, #0]
 801077a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801077c:	0022      	movs	r2, r4
 801077e:	9902      	ldr	r1, [sp, #8]
 8010780:	f7ff ff40 	bl	8010604 <prvInitialiseTCBVariables>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010784:	9a03      	ldr	r2, [sp, #12]
 8010786:	0031      	movs	r1, r6
 8010788:	4648      	mov	r0, r9
 801078a:	f000 ffff 	bl	801178c <pxPortInitialiseStack>
 801078e:	6038      	str	r0, [r7, #0]
		if( ( void * ) pxCreatedTask != NULL )
 8010790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010792:	2b00      	cmp	r3, #0
 8010794:	d000      	beq.n	8010798 <xTaskGenericCreate+0x60>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010796:	601f      	str	r7, [r3, #0]
		taskENTER_CRITICAL();
 8010798:	f001 f830 	bl	80117fc <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 801079c:	4a24      	ldr	r2, [pc, #144]	; (8010830 <xTaskGenericCreate+0xf8>)
 801079e:	6813      	ldr	r3, [r2, #0]
 80107a0:	3301      	adds	r3, #1
 80107a2:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 80107a4:	4b23      	ldr	r3, [pc, #140]	; (8010834 <xTaskGenericCreate+0xfc>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d12b      	bne.n	8010804 <xTaskGenericCreate+0xcc>
				pxCurrentTCB =  pxNewTCB;
 80107ac:	4b21      	ldr	r3, [pc, #132]	; (8010834 <xTaskGenericCreate+0xfc>)
 80107ae:	601f      	str	r7, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80107b0:	6813      	ldr	r3, [r2, #0]
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	d101      	bne.n	80107ba <xTaskGenericCreate+0x82>
					prvInitialiseTaskLists();
 80107b6:	f7ff ff51 	bl	801065c <prvInitialiseTaskLists>
			uxTaskNumber++;
 80107ba:	4a1f      	ldr	r2, [pc, #124]	; (8010838 <xTaskGenericCreate+0x100>)
 80107bc:	6813      	ldr	r3, [r2, #0]
 80107be:	3301      	adds	r3, #1
 80107c0:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 80107c2:	647b      	str	r3, [r7, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 80107c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c6:	4a1d      	ldr	r2, [pc, #116]	; (801083c <xTaskGenericCreate+0x104>)
 80107c8:	6812      	ldr	r2, [r2, #0]
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d901      	bls.n	80107d2 <xTaskGenericCreate+0x9a>
 80107ce:	4a1b      	ldr	r2, [pc, #108]	; (801083c <xTaskGenericCreate+0x104>)
 80107d0:	6013      	str	r3, [r2, #0]
 80107d2:	1d39      	adds	r1, r7, #4
 80107d4:	2014      	movs	r0, #20
 80107d6:	4358      	muls	r0, r3
 80107d8:	4b19      	ldr	r3, [pc, #100]	; (8010840 <xTaskGenericCreate+0x108>)
 80107da:	18c0      	adds	r0, r0, r3
 80107dc:	f7ff fafc 	bl	800fdd8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 80107e0:	f001 f818 	bl	8011814 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80107e4:	4b17      	ldr	r3, [pc, #92]	; (8010844 <xTaskGenericCreate+0x10c>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d01a      	beq.n	8010822 <xTaskGenericCreate+0xea>
			if( pxCurrentTCB->uxPriority < uxPriority )
 80107ec:	4b11      	ldr	r3, [pc, #68]	; (8010834 <xTaskGenericCreate+0xfc>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f2:	42a3      	cmp	r3, r4
 80107f4:	d217      	bcs.n	8010826 <xTaskGenericCreate+0xee>
				taskYIELD_IF_USING_PREEMPTION();
 80107f6:	f000 fff5 	bl	80117e4 <vPortYield>
			xReturn = pdPASS;
 80107fa:	2001      	movs	r0, #1
}
 80107fc:	b004      	add	sp, #16
 80107fe:	bc04      	pop	{r2}
 8010800:	4691      	mov	r9, r2
 8010802:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xSchedulerRunning == pdFALSE )
 8010804:	4b0f      	ldr	r3, [pc, #60]	; (8010844 <xTaskGenericCreate+0x10c>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d1d6      	bne.n	80107ba <xTaskGenericCreate+0x82>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 801080c:	4b09      	ldr	r3, [pc, #36]	; (8010834 <xTaskGenericCreate+0xfc>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010812:	42a3      	cmp	r3, r4
 8010814:	d8d1      	bhi.n	80107ba <xTaskGenericCreate+0x82>
						pxCurrentTCB = pxNewTCB;
 8010816:	4b07      	ldr	r3, [pc, #28]	; (8010834 <xTaskGenericCreate+0xfc>)
 8010818:	601f      	str	r7, [r3, #0]
 801081a:	e7ce      	b.n	80107ba <xTaskGenericCreate+0x82>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801081c:	2001      	movs	r0, #1
 801081e:	4240      	negs	r0, r0
 8010820:	e7ec      	b.n	80107fc <xTaskGenericCreate+0xc4>
			xReturn = pdPASS;
 8010822:	2001      	movs	r0, #1
 8010824:	e7ea      	b.n	80107fc <xTaskGenericCreate+0xc4>
 8010826:	2001      	movs	r0, #1
	return xReturn;
 8010828:	e7e8      	b.n	80107fc <xTaskGenericCreate+0xc4>
 801082a:	46c0      	nop			; (mov r8, r8)
 801082c:	3fffffff 	.word	0x3fffffff
 8010830:	200021d4 	.word	0x200021d4
 8010834:	20002138 	.word	0x20002138
 8010838:	200021e0 	.word	0x200021e0
 801083c:	200021e8 	.word	0x200021e8
 8010840:	20002144 	.word	0x20002144
 8010844:	2000222c 	.word	0x2000222c

08010848 <uxTaskPriorityGet>:
	{
 8010848:	b510      	push	{r4, lr}
 801084a:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 801084c:	f000 ffd6 	bl	80117fc <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 8010850:	2c00      	cmp	r4, #0
 8010852:	d004      	beq.n	801085e <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 8010854:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 8010856:	f000 ffdd 	bl	8011814 <vPortExitCritical>
	}
 801085a:	0020      	movs	r0, r4
 801085c:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 801085e:	4b01      	ldr	r3, [pc, #4]	; (8010864 <uxTaskPriorityGet+0x1c>)
 8010860:	681c      	ldr	r4, [r3, #0]
 8010862:	e7f7      	b.n	8010854 <uxTaskPriorityGet+0xc>
 8010864:	20002138 	.word	0x20002138

08010868 <vTaskPrioritySet>:
	{
 8010868:	b570      	push	{r4, r5, r6, lr}
 801086a:	0004      	movs	r4, r0
 801086c:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 801086e:	2906      	cmp	r1, #6
 8010870:	d901      	bls.n	8010876 <vTaskPrioritySet+0xe>
 8010872:	b672      	cpsid	i
 8010874:	e7fe      	b.n	8010874 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 8010876:	f000 ffc1 	bl	80117fc <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 801087a:	2c00      	cmp	r4, #0
 801087c:	d101      	bne.n	8010882 <vTaskPrioritySet+0x1a>
 801087e:	4b23      	ldr	r3, [pc, #140]	; (801090c <vTaskPrioritySet+0xa4>)
 8010880:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8010882:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 8010884:	4295      	cmp	r5, r2
 8010886:	d032      	beq.n	80108ee <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 8010888:	d934      	bls.n	80108f4 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 801088a:	4b20      	ldr	r3, [pc, #128]	; (801090c <vTaskPrioritySet+0xa4>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	42a3      	cmp	r3, r4
 8010890:	d036      	beq.n	8010900 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8010892:	4b1e      	ldr	r3, [pc, #120]	; (801090c <vTaskPrioritySet+0xa4>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010898:	42ab      	cmp	r3, r5
 801089a:	d933      	bls.n	8010904 <vTaskPrioritySet+0x9c>
	BaseType_t xYieldRequired = pdFALSE;
 801089c:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801089e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80108a0:	428a      	cmp	r2, r1
 80108a2:	d100      	bne.n	80108a6 <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 80108a4:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 80108a6:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80108a8:	69a3      	ldr	r3, [r4, #24]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	db02      	blt.n	80108b4 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ae:	2207      	movs	r2, #7
 80108b0:	1b55      	subs	r5, r2, r5
 80108b2:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80108b4:	2314      	movs	r3, #20
 80108b6:	434b      	muls	r3, r1
 80108b8:	4a15      	ldr	r2, [pc, #84]	; (8010910 <vTaskPrioritySet+0xa8>)
 80108ba:	189b      	adds	r3, r3, r2
 80108bc:	6962      	ldr	r2, [r4, #20]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d111      	bne.n	80108e6 <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80108c2:	1d25      	adds	r5, r4, #4
 80108c4:	0028      	movs	r0, r5
 80108c6:	f7ff faab 	bl	800fe20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80108ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80108cc:	4a11      	ldr	r2, [pc, #68]	; (8010914 <vTaskPrioritySet+0xac>)
 80108ce:	6812      	ldr	r2, [r2, #0]
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d901      	bls.n	80108d8 <vTaskPrioritySet+0x70>
 80108d4:	4a0f      	ldr	r2, [pc, #60]	; (8010914 <vTaskPrioritySet+0xac>)
 80108d6:	6013      	str	r3, [r2, #0]
 80108d8:	2014      	movs	r0, #20
 80108da:	4358      	muls	r0, r3
 80108dc:	4b0c      	ldr	r3, [pc, #48]	; (8010910 <vTaskPrioritySet+0xa8>)
 80108de:	18c0      	adds	r0, r0, r3
 80108e0:	0029      	movs	r1, r5
 80108e2:	f7ff fa79 	bl	800fdd8 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 80108e6:	2e01      	cmp	r6, #1
 80108e8:	d101      	bne.n	80108ee <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 80108ea:	f000 ff7b 	bl	80117e4 <vPortYield>
		taskEXIT_CRITICAL();
 80108ee:	f000 ff91 	bl	8011814 <vPortExitCritical>
	}
 80108f2:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 80108f4:	4b05      	ldr	r3, [pc, #20]	; (801090c <vTaskPrioritySet+0xa4>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	42a3      	cmp	r3, r4
 80108fa:	d005      	beq.n	8010908 <vTaskPrioritySet+0xa0>
	BaseType_t xYieldRequired = pdFALSE;
 80108fc:	2600      	movs	r6, #0
 80108fe:	e7ce      	b.n	801089e <vTaskPrioritySet+0x36>
 8010900:	2600      	movs	r6, #0
 8010902:	e7cc      	b.n	801089e <vTaskPrioritySet+0x36>
							xYieldRequired = pdTRUE;
 8010904:	2601      	movs	r6, #1
 8010906:	e7ca      	b.n	801089e <vTaskPrioritySet+0x36>
					xYieldRequired = pdTRUE;
 8010908:	2601      	movs	r6, #1
 801090a:	e7c8      	b.n	801089e <vTaskPrioritySet+0x36>
 801090c:	20002138 	.word	0x20002138
 8010910:	20002144 	.word	0x20002144
 8010914:	200021e8 	.word	0x200021e8

08010918 <vTaskStartScheduler>:
{
 8010918:	b500      	push	{lr}
 801091a:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 801091c:	2300      	movs	r3, #0
 801091e:	9303      	str	r3, [sp, #12]
 8010920:	9302      	str	r3, [sp, #8]
 8010922:	9301      	str	r3, [sp, #4]
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	22a0      	movs	r2, #160	; 0xa0
 8010928:	490d      	ldr	r1, [pc, #52]	; (8010960 <vTaskStartScheduler+0x48>)
 801092a:	480e      	ldr	r0, [pc, #56]	; (8010964 <vTaskStartScheduler+0x4c>)
 801092c:	f7ff ff04 	bl	8010738 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 8010930:	2801      	cmp	r0, #1
 8010932:	d005      	beq.n	8010940 <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
 8010934:	2801      	cmp	r0, #1
 8010936:	d006      	beq.n	8010946 <vTaskStartScheduler+0x2e>
		configASSERT( xReturn );
 8010938:	2800      	cmp	r0, #0
 801093a:	d10f      	bne.n	801095c <vTaskStartScheduler+0x44>
 801093c:	b672      	cpsid	i
 801093e:	e7fe      	b.n	801093e <vTaskStartScheduler+0x26>
			xReturn = xTimerCreateTimerTask();
 8010940:	f000 fd6c 	bl	801141c <xTimerCreateTimerTask>
 8010944:	e7f6      	b.n	8010934 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 8010946:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 8010948:	4b07      	ldr	r3, [pc, #28]	; (8010968 <vTaskStartScheduler+0x50>)
 801094a:	2201      	movs	r2, #1
 801094c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801094e:	4b07      	ldr	r3, [pc, #28]	; (801096c <vTaskStartScheduler+0x54>)
 8010950:	2200      	movs	r2, #0
 8010952:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8010954:	f7f7 fd84 	bl	8008460 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8010958:	f000 ff2a 	bl	80117b0 <xPortStartScheduler>
}
 801095c:	b005      	add	sp, #20
 801095e:	bd00      	pop	{pc}
 8010960:	0801d174 	.word	0x0801d174
 8010964:	08010c2d 	.word	0x08010c2d
 8010968:	2000222c 	.word	0x2000222c
 801096c:	20002258 	.word	0x20002258

08010970 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010970:	4a02      	ldr	r2, [pc, #8]	; (801097c <vTaskSuspendAll+0xc>)
 8010972:	6813      	ldr	r3, [r2, #0]
 8010974:	3301      	adds	r3, #1
 8010976:	6013      	str	r3, [r2, #0]
}
 8010978:	4770      	bx	lr
 801097a:	46c0      	nop			; (mov r8, r8)
 801097c:	200021dc 	.word	0x200021dc

08010980 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010980:	4b01      	ldr	r3, [pc, #4]	; (8010988 <xTaskGetTickCount+0x8>)
 8010982:	6818      	ldr	r0, [r3, #0]
}
 8010984:	4770      	bx	lr
 8010986:	46c0      	nop			; (mov r8, r8)
 8010988:	20002258 	.word	0x20002258

0801098c <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 801098c:	4b01      	ldr	r3, [pc, #4]	; (8010994 <xTaskGetTickCountFromISR+0x8>)
 801098e:	6818      	ldr	r0, [r3, #0]
}
 8010990:	4770      	bx	lr
 8010992:	46c0      	nop			; (mov r8, r8)
 8010994:	20002258 	.word	0x20002258

08010998 <xTaskIncrementTick>:
{
 8010998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801099a:	4b39      	ldr	r3, [pc, #228]	; (8010a80 <xTaskIncrementTick+0xe8>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d162      	bne.n	8010a68 <xTaskIncrementTick+0xd0>
		++xTickCount;
 80109a2:	4b38      	ldr	r3, [pc, #224]	; (8010a84 <xTaskIncrementTick+0xec>)
 80109a4:	681a      	ldr	r2, [r3, #0]
 80109a6:	3201      	adds	r2, #1
 80109a8:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 80109aa:	681f      	ldr	r7, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 80109ac:	2f00      	cmp	r7, #0
 80109ae:	d112      	bne.n	80109d6 <xTaskIncrementTick+0x3e>
				taskSWITCH_DELAYED_LISTS();
 80109b0:	4b35      	ldr	r3, [pc, #212]	; (8010a88 <xTaskIncrementTick+0xf0>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d001      	beq.n	80109be <xTaskIncrementTick+0x26>
 80109ba:	b672      	cpsid	i
 80109bc:	e7fe      	b.n	80109bc <xTaskIncrementTick+0x24>
 80109be:	4a32      	ldr	r2, [pc, #200]	; (8010a88 <xTaskIncrementTick+0xf0>)
 80109c0:	6811      	ldr	r1, [r2, #0]
 80109c2:	4b32      	ldr	r3, [pc, #200]	; (8010a8c <xTaskIncrementTick+0xf4>)
 80109c4:	6818      	ldr	r0, [r3, #0]
 80109c6:	6010      	str	r0, [r2, #0]
 80109c8:	6019      	str	r1, [r3, #0]
 80109ca:	4a31      	ldr	r2, [pc, #196]	; (8010a90 <xTaskIncrementTick+0xf8>)
 80109cc:	6813      	ldr	r3, [r2, #0]
 80109ce:	3301      	adds	r3, #1
 80109d0:	6013      	str	r3, [r2, #0]
 80109d2:	f7ff fdd9 	bl	8010588 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 80109d6:	4b2f      	ldr	r3, [pc, #188]	; (8010a94 <xTaskIncrementTick+0xfc>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	42bb      	cmp	r3, r7
 80109dc:	d93a      	bls.n	8010a54 <xTaskIncrementTick+0xbc>
BaseType_t xSwitchRequired = pdFALSE;
 80109de:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80109e0:	4b2d      	ldr	r3, [pc, #180]	; (8010a98 <xTaskIncrementTick+0x100>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109e6:	0093      	lsls	r3, r2, #2
 80109e8:	189b      	adds	r3, r3, r2
 80109ea:	009a      	lsls	r2, r3, #2
 80109ec:	4b2b      	ldr	r3, [pc, #172]	; (8010a9c <xTaskIncrementTick+0x104>)
 80109ee:	58d3      	ldr	r3, [r2, r3]
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	d93e      	bls.n	8010a72 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 80109f4:	2401      	movs	r4, #1
 80109f6:	e03c      	b.n	8010a72 <xTaskIncrementTick+0xda>
								xSwitchRequired = pdTRUE;
 80109f8:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109fa:	4b23      	ldr	r3, [pc, #140]	; (8010a88 <xTaskIncrementTick+0xf0>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d029      	beq.n	8010a58 <xTaskIncrementTick+0xc0>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010a04:	4b20      	ldr	r3, [pc, #128]	; (8010a88 <xTaskIncrementTick+0xf0>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	68db      	ldr	r3, [r3, #12]
 8010a0a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8010a0c:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 8010a0e:	429f      	cmp	r7, r3
 8010a10:	d327      	bcc.n	8010a62 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010a12:	1d2e      	adds	r6, r5, #4
 8010a14:	0030      	movs	r0, r6
 8010a16:	f7ff fa03 	bl	800fe20 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010a1a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d003      	beq.n	8010a28 <xTaskIncrementTick+0x90>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a20:	0028      	movs	r0, r5
 8010a22:	3018      	adds	r0, #24
 8010a24:	f7ff f9fc 	bl	800fe20 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8010a28:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8010a2a:	4b1d      	ldr	r3, [pc, #116]	; (8010aa0 <xTaskIncrementTick+0x108>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d901      	bls.n	8010a36 <xTaskIncrementTick+0x9e>
 8010a32:	4b1b      	ldr	r3, [pc, #108]	; (8010aa0 <xTaskIncrementTick+0x108>)
 8010a34:	601a      	str	r2, [r3, #0]
 8010a36:	0093      	lsls	r3, r2, #2
 8010a38:	189b      	adds	r3, r3, r2
 8010a3a:	0098      	lsls	r0, r3, #2
 8010a3c:	4b17      	ldr	r3, [pc, #92]	; (8010a9c <xTaskIncrementTick+0x104>)
 8010a3e:	18c0      	adds	r0, r0, r3
 8010a40:	0031      	movs	r1, r6
 8010a42:	f7ff f9c9 	bl	800fdd8 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a46:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8010a48:	4b13      	ldr	r3, [pc, #76]	; (8010a98 <xTaskIncrementTick+0x100>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d2d2      	bcs.n	80109f8 <xTaskIncrementTick+0x60>
 8010a52:	e7d2      	b.n	80109fa <xTaskIncrementTick+0x62>
BaseType_t xSwitchRequired = pdFALSE;
 8010a54:	2400      	movs	r4, #0
 8010a56:	e7d0      	b.n	80109fa <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = portMAX_DELAY;
 8010a58:	4b0e      	ldr	r3, [pc, #56]	; (8010a94 <xTaskIncrementTick+0xfc>)
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	4252      	negs	r2, r2
 8010a5e:	601a      	str	r2, [r3, #0]
						break;
 8010a60:	e7be      	b.n	80109e0 <xTaskIncrementTick+0x48>
							xNextTaskUnblockTime = xItemValue;
 8010a62:	4a0c      	ldr	r2, [pc, #48]	; (8010a94 <xTaskIncrementTick+0xfc>)
 8010a64:	6013      	str	r3, [r2, #0]
							break;
 8010a66:	e7bb      	b.n	80109e0 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 8010a68:	4a0e      	ldr	r2, [pc, #56]	; (8010aa4 <xTaskIncrementTick+0x10c>)
 8010a6a:	6813      	ldr	r3, [r2, #0]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8010a70:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8010a72:	4b0d      	ldr	r3, [pc, #52]	; (8010aa8 <xTaskIncrementTick+0x110>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d000      	beq.n	8010a7c <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 8010a7a:	2401      	movs	r4, #1
}
 8010a7c:	0020      	movs	r0, r4
 8010a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a80:	200021dc 	.word	0x200021dc
 8010a84:	20002258 	.word	0x20002258
 8010a88:	2000213c 	.word	0x2000213c
 8010a8c:	20002140 	.word	0x20002140
 8010a90:	20002214 	.word	0x20002214
 8010a94:	200000c8 	.word	0x200000c8
 8010a98:	20002138 	.word	0x20002138
 8010a9c:	20002144 	.word	0x20002144
 8010aa0:	200021e8 	.word	0x200021e8
 8010aa4:	200021d8 	.word	0x200021d8
 8010aa8:	2000225c 	.word	0x2000225c

08010aac <xTaskResumeAll>:
{
 8010aac:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 8010aae:	4b30      	ldr	r3, [pc, #192]	; (8010b70 <xTaskResumeAll+0xc4>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d101      	bne.n	8010aba <xTaskResumeAll+0xe>
 8010ab6:	b672      	cpsid	i
 8010ab8:	e7fe      	b.n	8010ab8 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8010aba:	f000 fe9f 	bl	80117fc <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010abe:	4b2c      	ldr	r3, [pc, #176]	; (8010b70 <xTaskResumeAll+0xc4>)
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	3a01      	subs	r2, #1
 8010ac4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d14d      	bne.n	8010b68 <xTaskResumeAll+0xbc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010acc:	4b29      	ldr	r3, [pc, #164]	; (8010b74 <xTaskResumeAll+0xc8>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d112      	bne.n	8010afa <xTaskResumeAll+0x4e>
BaseType_t xAlreadyYielded = pdFALSE;
 8010ad4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010ad6:	f000 fe9d 	bl	8011814 <vPortExitCritical>
}
 8010ada:	0020      	movs	r0, r4
 8010adc:	bd70      	pop	{r4, r5, r6, pc}
					prvAddTaskToReadyList( pxTCB );
 8010ade:	0093      	lsls	r3, r2, #2
 8010ae0:	189b      	adds	r3, r3, r2
 8010ae2:	0098      	lsls	r0, r3, #2
 8010ae4:	4b24      	ldr	r3, [pc, #144]	; (8010b78 <xTaskResumeAll+0xcc>)
 8010ae6:	18c0      	adds	r0, r0, r3
 8010ae8:	0029      	movs	r1, r5
 8010aea:	f7ff f975 	bl	800fdd8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010aee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010af0:	4b22      	ldr	r3, [pc, #136]	; (8010b7c <xTaskResumeAll+0xd0>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d216      	bcs.n	8010b28 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010afa:	4b21      	ldr	r3, [pc, #132]	; (8010b80 <xTaskResumeAll+0xd4>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d016      	beq.n	8010b30 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010b02:	4b1f      	ldr	r3, [pc, #124]	; (8010b80 <xTaskResumeAll+0xd4>)
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010b08:	0020      	movs	r0, r4
 8010b0a:	3018      	adds	r0, #24
 8010b0c:	f7ff f988 	bl	800fe20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010b10:	1d25      	adds	r5, r4, #4
 8010b12:	0028      	movs	r0, r5
 8010b14:	f7ff f984 	bl	800fe20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010b18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010b1a:	4b1a      	ldr	r3, [pc, #104]	; (8010b84 <xTaskResumeAll+0xd8>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d9dd      	bls.n	8010ade <xTaskResumeAll+0x32>
 8010b22:	4b18      	ldr	r3, [pc, #96]	; (8010b84 <xTaskResumeAll+0xd8>)
 8010b24:	601a      	str	r2, [r3, #0]
 8010b26:	e7da      	b.n	8010ade <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 8010b28:	4b17      	ldr	r3, [pc, #92]	; (8010b88 <xTaskResumeAll+0xdc>)
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	e7e4      	b.n	8010afa <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8010b30:	4b16      	ldr	r3, [pc, #88]	; (8010b8c <xTaskResumeAll+0xe0>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d112      	bne.n	8010b5e <xTaskResumeAll+0xb2>
				if( xYieldPending == pdTRUE )
 8010b38:	4b13      	ldr	r3, [pc, #76]	; (8010b88 <xTaskResumeAll+0xdc>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d115      	bne.n	8010b6c <xTaskResumeAll+0xc0>
					taskYIELD_IF_USING_PREEMPTION();
 8010b40:	f000 fe50 	bl	80117e4 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8010b44:	2401      	movs	r4, #1
 8010b46:	e7c6      	b.n	8010ad6 <xTaskResumeAll+0x2a>
						if( xTaskIncrementTick() != pdFALSE )
 8010b48:	f7ff ff26 	bl	8010998 <xTaskIncrementTick>
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	d002      	beq.n	8010b56 <xTaskResumeAll+0xaa>
							xYieldPending = pdTRUE;
 8010b50:	4b0d      	ldr	r3, [pc, #52]	; (8010b88 <xTaskResumeAll+0xdc>)
 8010b52:	2201      	movs	r2, #1
 8010b54:	601a      	str	r2, [r3, #0]
						--uxPendedTicks;
 8010b56:	4a0d      	ldr	r2, [pc, #52]	; (8010b8c <xTaskResumeAll+0xe0>)
 8010b58:	6813      	ldr	r3, [r2, #0]
 8010b5a:	3b01      	subs	r3, #1
 8010b5c:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8010b5e:	4b0b      	ldr	r3, [pc, #44]	; (8010b8c <xTaskResumeAll+0xe0>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d1f0      	bne.n	8010b48 <xTaskResumeAll+0x9c>
 8010b66:	e7e7      	b.n	8010b38 <xTaskResumeAll+0x8c>
BaseType_t xAlreadyYielded = pdFALSE;
 8010b68:	2400      	movs	r4, #0
 8010b6a:	e7b4      	b.n	8010ad6 <xTaskResumeAll+0x2a>
 8010b6c:	2400      	movs	r4, #0
 8010b6e:	e7b2      	b.n	8010ad6 <xTaskResumeAll+0x2a>
 8010b70:	200021dc 	.word	0x200021dc
 8010b74:	200021d4 	.word	0x200021d4
 8010b78:	20002144 	.word	0x20002144
 8010b7c:	20002138 	.word	0x20002138
 8010b80:	20002218 	.word	0x20002218
 8010b84:	200021e8 	.word	0x200021e8
 8010b88:	2000225c 	.word	0x2000225c
 8010b8c:	200021d8 	.word	0x200021d8

08010b90 <vTaskDelay>:
	{
 8010b90:	b570      	push	{r4, r5, r6, lr}
 8010b92:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010b94:	d016      	beq.n	8010bc4 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 8010b96:	4b0d      	ldr	r3, [pc, #52]	; (8010bcc <vTaskDelay+0x3c>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d001      	beq.n	8010ba2 <vTaskDelay+0x12>
 8010b9e:	b672      	cpsid	i
 8010ba0:	e7fe      	b.n	8010ba0 <vTaskDelay+0x10>
			vTaskSuspendAll();
 8010ba2:	f7ff fee5 	bl	8010970 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 8010ba6:	4b0a      	ldr	r3, [pc, #40]	; (8010bd0 <vTaskDelay+0x40>)
 8010ba8:	681c      	ldr	r4, [r3, #0]
 8010baa:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010bac:	4b09      	ldr	r3, [pc, #36]	; (8010bd4 <vTaskDelay+0x44>)
 8010bae:	6818      	ldr	r0, [r3, #0]
 8010bb0:	3004      	adds	r0, #4
 8010bb2:	f7ff f935 	bl	800fe20 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010bb6:	0020      	movs	r0, r4
 8010bb8:	f7ff fd82 	bl	80106c0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8010bbc:	f7ff ff76 	bl	8010aac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	d101      	bne.n	8010bc8 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 8010bc4:	f000 fe0e 	bl	80117e4 <vPortYield>
	}
 8010bc8:	bd70      	pop	{r4, r5, r6, pc}
 8010bca:	46c0      	nop			; (mov r8, r8)
 8010bcc:	200021dc 	.word	0x200021dc
 8010bd0:	20002258 	.word	0x20002258
 8010bd4:	20002138 	.word	0x20002138

08010bd8 <prvCheckTasksWaitingTermination>:
{
 8010bd8:	b510      	push	{r4, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8010bda:	4b11      	ldr	r3, [pc, #68]	; (8010c20 <prvCheckTasksWaitingTermination+0x48>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d01d      	beq.n	8010c1e <prvCheckTasksWaitingTermination+0x46>
			vTaskSuspendAll();
 8010be2:	f7ff fec5 	bl	8010970 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010be6:	4b0f      	ldr	r3, [pc, #60]	; (8010c24 <prvCheckTasksWaitingTermination+0x4c>)
 8010be8:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8010bea:	f7ff ff5f 	bl	8010aac <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8010bee:	2c00      	cmp	r4, #0
 8010bf0:	d0f3      	beq.n	8010bda <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 8010bf2:	f000 fe03 	bl	80117fc <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010bf6:	4b0b      	ldr	r3, [pc, #44]	; (8010c24 <prvCheckTasksWaitingTermination+0x4c>)
 8010bf8:	68db      	ldr	r3, [r3, #12]
 8010bfa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010bfc:	1d20      	adds	r0, r4, #4
 8010bfe:	f7ff f90f 	bl	800fe20 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8010c02:	4a09      	ldr	r2, [pc, #36]	; (8010c28 <prvCheckTasksWaitingTermination+0x50>)
 8010c04:	6813      	ldr	r3, [r2, #0]
 8010c06:	3b01      	subs	r3, #1
 8010c08:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8010c0a:	4a05      	ldr	r2, [pc, #20]	; (8010c20 <prvCheckTasksWaitingTermination+0x48>)
 8010c0c:	6813      	ldr	r3, [r2, #0]
 8010c0e:	3b01      	subs	r3, #1
 8010c10:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8010c12:	f000 fdff 	bl	8011814 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8010c16:	0020      	movs	r0, r4
 8010c18:	f7ff fccc 	bl	80105b4 <prvDeleteTCB>
 8010c1c:	e7dd      	b.n	8010bda <prvCheckTasksWaitingTermination+0x2>
}
 8010c1e:	bd10      	pop	{r4, pc}
 8010c20:	200021e4 	.word	0x200021e4
 8010c24:	20002244 	.word	0x20002244
 8010c28:	200021d4 	.word	0x200021d4

08010c2c <prvIdleTask>:
{
 8010c2c:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 8010c2e:	f7ff ffd3 	bl	8010bd8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010c32:	4b03      	ldr	r3, [pc, #12]	; (8010c40 <prvIdleTask+0x14>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2b01      	cmp	r3, #1
 8010c38:	d9f9      	bls.n	8010c2e <prvIdleTask+0x2>
				taskYIELD();
 8010c3a:	f000 fdd3 	bl	80117e4 <vPortYield>
 8010c3e:	e7f6      	b.n	8010c2e <prvIdleTask+0x2>
 8010c40:	20002144 	.word	0x20002144

08010c44 <uxTaskGetSystemState>:
	{
 8010c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c46:	0007      	movs	r7, r0
 8010c48:	000c      	movs	r4, r1
 8010c4a:	0016      	movs	r6, r2
		vTaskSuspendAll();
 8010c4c:	f7ff fe90 	bl	8010970 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8010c50:	4b1e      	ldr	r3, [pc, #120]	; (8010ccc <uxTaskGetSystemState+0x88>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	42a3      	cmp	r3, r4
 8010c56:	d833      	bhi.n	8010cc0 <uxTaskGetSystemState+0x7c>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8010c58:	2507      	movs	r5, #7
 8010c5a:	2400      	movs	r4, #0
					uxQueue--;
 8010c5c:	3d01      	subs	r5, #1
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8010c5e:	0160      	lsls	r0, r4, #5
 8010c60:	00ab      	lsls	r3, r5, #2
 8010c62:	195b      	adds	r3, r3, r5
 8010c64:	0099      	lsls	r1, r3, #2
 8010c66:	4b1a      	ldr	r3, [pc, #104]	; (8010cd0 <uxTaskGetSystemState+0x8c>)
 8010c68:	18c9      	adds	r1, r1, r3
 8010c6a:	1838      	adds	r0, r7, r0
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	f7ff fc3d 	bl	80104ec <prvListTaskWithinSingleList>
 8010c72:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c74:	2d00      	cmp	r5, #0
 8010c76:	d1f1      	bne.n	8010c5c <uxTaskGetSystemState+0x18>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8010c78:	0160      	lsls	r0, r4, #5
 8010c7a:	4b16      	ldr	r3, [pc, #88]	; (8010cd4 <uxTaskGetSystemState+0x90>)
 8010c7c:	6819      	ldr	r1, [r3, #0]
 8010c7e:	1838      	adds	r0, r7, r0
 8010c80:	2202      	movs	r2, #2
 8010c82:	f7ff fc33 	bl	80104ec <prvListTaskWithinSingleList>
 8010c86:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8010c88:	0160      	lsls	r0, r4, #5
 8010c8a:	4b13      	ldr	r3, [pc, #76]	; (8010cd8 <uxTaskGetSystemState+0x94>)
 8010c8c:	6819      	ldr	r1, [r3, #0]
 8010c8e:	1838      	adds	r0, r7, r0
 8010c90:	2202      	movs	r2, #2
 8010c92:	f7ff fc2b 	bl	80104ec <prvListTaskWithinSingleList>
 8010c96:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8010c98:	0160      	lsls	r0, r4, #5
 8010c9a:	1838      	adds	r0, r7, r0
 8010c9c:	2204      	movs	r2, #4
 8010c9e:	490f      	ldr	r1, [pc, #60]	; (8010cdc <uxTaskGetSystemState+0x98>)
 8010ca0:	f7ff fc24 	bl	80104ec <prvListTaskWithinSingleList>
 8010ca4:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8010ca6:	0160      	lsls	r0, r4, #5
 8010ca8:	1838      	adds	r0, r7, r0
 8010caa:	2203      	movs	r2, #3
 8010cac:	490c      	ldr	r1, [pc, #48]	; (8010ce0 <uxTaskGetSystemState+0x9c>)
 8010cae:	f7ff fc1d 	bl	80104ec <prvListTaskWithinSingleList>
 8010cb2:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 8010cb4:	2e00      	cmp	r6, #0
 8010cb6:	d004      	beq.n	8010cc2 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010cb8:	f7f7 fbe2 	bl	8008480 <ulMainGetRunTimeCounterValue>
 8010cbc:	6030      	str	r0, [r6, #0]
 8010cbe:	e000      	b.n	8010cc2 <uxTaskGetSystemState+0x7e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8010cc0:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 8010cc2:	f7ff fef3 	bl	8010aac <xTaskResumeAll>
	}
 8010cc6:	0020      	movs	r0, r4
 8010cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cca:	46c0      	nop			; (mov r8, r8)
 8010ccc:	200021d4 	.word	0x200021d4
 8010cd0:	20002144 	.word	0x20002144
 8010cd4:	2000213c 	.word	0x2000213c
 8010cd8:	20002140 	.word	0x20002140
 8010cdc:	20002244 	.word	0x20002244
 8010ce0:	20002230 	.word	0x20002230

08010ce4 <vTaskSwitchContext>:
{
 8010ce4:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010ce6:	4b35      	ldr	r3, [pc, #212]	; (8010dbc <vTaskSwitchContext+0xd8>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d003      	beq.n	8010cf6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8010cee:	4b34      	ldr	r3, [pc, #208]	; (8010dc0 <vTaskSwitchContext+0xdc>)
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	601a      	str	r2, [r3, #0]
}
 8010cf4:	bd70      	pop	{r4, r5, r6, pc}
		xYieldPending = pdFALSE;
 8010cf6:	4b32      	ldr	r3, [pc, #200]	; (8010dc0 <vTaskSwitchContext+0xdc>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010cfc:	f7f7 fbc0 	bl	8008480 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010d00:	4b30      	ldr	r3, [pc, #192]	; (8010dc4 <vTaskSwitchContext+0xe0>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	4298      	cmp	r0, r3
 8010d06:	d906      	bls.n	8010d16 <vTaskSwitchContext+0x32>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010d08:	4a2f      	ldr	r2, [pc, #188]	; (8010dc8 <vTaskSwitchContext+0xe4>)
 8010d0a:	6812      	ldr	r2, [r2, #0]
 8010d0c:	1ac3      	subs	r3, r0, r3
 8010d0e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8010d10:	468c      	mov	ip, r1
 8010d12:	4463      	add	r3, ip
 8010d14:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8010d16:	4b2b      	ldr	r3, [pc, #172]	; (8010dc4 <vTaskSwitchContext+0xe0>)
 8010d18:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8010d1a:	4b2b      	ldr	r3, [pc, #172]	; (8010dc8 <vTaskSwitchContext+0xe4>)
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	6812      	ldr	r2, [r2, #0]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d805      	bhi.n	8010d34 <vTaskSwitchContext+0x50>
 8010d28:	4b27      	ldr	r3, [pc, #156]	; (8010dc8 <vTaskSwitchContext+0xe4>)
 8010d2a:	6818      	ldr	r0, [r3, #0]
 8010d2c:	6819      	ldr	r1, [r3, #0]
 8010d2e:	3134      	adds	r1, #52	; 0x34
 8010d30:	f7fe f9ba 	bl	800f0a8 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8010d34:	4b24      	ldr	r3, [pc, #144]	; (8010dc8 <vTaskSwitchContext+0xe4>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010d3a:	2214      	movs	r2, #20
 8010d3c:	4923      	ldr	r1, [pc, #140]	; (8010dcc <vTaskSwitchContext+0xe8>)
 8010d3e:	f004 fa8b 	bl	8015258 <memcmp>
 8010d42:	2800      	cmp	r0, #0
 8010d44:	d005      	beq.n	8010d52 <vTaskSwitchContext+0x6e>
 8010d46:	4b20      	ldr	r3, [pc, #128]	; (8010dc8 <vTaskSwitchContext+0xe4>)
 8010d48:	6818      	ldr	r0, [r3, #0]
 8010d4a:	6819      	ldr	r1, [r3, #0]
 8010d4c:	3134      	adds	r1, #52	; 0x34
 8010d4e:	f7fe f9ab 	bl	800f0a8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010d52:	4b1f      	ldr	r3, [pc, #124]	; (8010dd0 <vTaskSwitchContext+0xec>)
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	0093      	lsls	r3, r2, #2
 8010d58:	189b      	adds	r3, r3, r2
 8010d5a:	009a      	lsls	r2, r3, #2
 8010d5c:	4b1d      	ldr	r3, [pc, #116]	; (8010dd4 <vTaskSwitchContext+0xf0>)
 8010d5e:	58d3      	ldr	r3, [r2, r3]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d10a      	bne.n	8010d7a <vTaskSwitchContext+0x96>
 8010d64:	4b1a      	ldr	r3, [pc, #104]	; (8010dd0 <vTaskSwitchContext+0xec>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d004      	beq.n	8010d76 <vTaskSwitchContext+0x92>
 8010d6c:	4a18      	ldr	r2, [pc, #96]	; (8010dd0 <vTaskSwitchContext+0xec>)
 8010d6e:	6813      	ldr	r3, [r2, #0]
 8010d70:	3b01      	subs	r3, #1
 8010d72:	6013      	str	r3, [r2, #0]
 8010d74:	e7ed      	b.n	8010d52 <vTaskSwitchContext+0x6e>
 8010d76:	b672      	cpsid	i
 8010d78:	e7fe      	b.n	8010d78 <vTaskSwitchContext+0x94>
 8010d7a:	4b15      	ldr	r3, [pc, #84]	; (8010dd0 <vTaskSwitchContext+0xec>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	4d15      	ldr	r5, [pc, #84]	; (8010dd4 <vTaskSwitchContext+0xf0>)
 8010d80:	0099      	lsls	r1, r3, #2
 8010d82:	18ca      	adds	r2, r1, r3
 8010d84:	0090      	lsls	r0, r2, #2
 8010d86:	1828      	adds	r0, r5, r0
 8010d88:	6842      	ldr	r2, [r0, #4]
 8010d8a:	6854      	ldr	r4, [r2, #4]
 8010d8c:	6044      	str	r4, [r0, #4]
 8010d8e:	18c9      	adds	r1, r1, r3
 8010d90:	008a      	lsls	r2, r1, #2
 8010d92:	3208      	adds	r2, #8
 8010d94:	1952      	adds	r2, r2, r5
 8010d96:	4294      	cmp	r4, r2
 8010d98:	d009      	beq.n	8010dae <vTaskSwitchContext+0xca>
 8010d9a:	009a      	lsls	r2, r3, #2
 8010d9c:	18d3      	adds	r3, r2, r3
 8010d9e:	009a      	lsls	r2, r3, #2
 8010da0:	4b0c      	ldr	r3, [pc, #48]	; (8010dd4 <vTaskSwitchContext+0xf0>)
 8010da2:	189b      	adds	r3, r3, r2
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	68da      	ldr	r2, [r3, #12]
 8010da8:	4b07      	ldr	r3, [pc, #28]	; (8010dc8 <vTaskSwitchContext+0xe4>)
 8010daa:	601a      	str	r2, [r3, #0]
}
 8010dac:	e7a2      	b.n	8010cf4 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010dae:	6860      	ldr	r0, [r4, #4]
 8010db0:	2114      	movs	r1, #20
 8010db2:	4359      	muls	r1, r3
 8010db4:	186a      	adds	r2, r5, r1
 8010db6:	6050      	str	r0, [r2, #4]
 8010db8:	e7ef      	b.n	8010d9a <vTaskSwitchContext+0xb6>
 8010dba:	46c0      	nop			; (mov r8, r8)
 8010dbc:	200021dc 	.word	0x200021dc
 8010dc0:	2000225c 	.word	0x2000225c
 8010dc4:	200021d0 	.word	0x200021d0
 8010dc8:	20002138 	.word	0x20002138
 8010dcc:	0801d138 	.word	0x0801d138
 8010dd0:	200021e8 	.word	0x200021e8
 8010dd4:	20002144 	.word	0x20002144

08010dd8 <vTaskPlaceOnEventList>:
{
 8010dd8:	b570      	push	{r4, r5, r6, lr}
 8010dda:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	d101      	bne.n	8010de4 <vTaskPlaceOnEventList+0xc>
 8010de0:	b672      	cpsid	i
 8010de2:	e7fe      	b.n	8010de2 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010de4:	4d0b      	ldr	r5, [pc, #44]	; (8010e14 <vTaskPlaceOnEventList+0x3c>)
 8010de6:	6829      	ldr	r1, [r5, #0]
 8010de8:	3118      	adds	r1, #24
 8010dea:	f7ff f801 	bl	800fdf0 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010dee:	6828      	ldr	r0, [r5, #0]
 8010df0:	3004      	adds	r0, #4
 8010df2:	f7ff f815 	bl	800fe20 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 8010df6:	1c63      	adds	r3, r4, #1
 8010df8:	d005      	beq.n	8010e06 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 8010dfa:	4b07      	ldr	r3, [pc, #28]	; (8010e18 <vTaskPlaceOnEventList+0x40>)
 8010dfc:	6818      	ldr	r0, [r3, #0]
 8010dfe:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010e00:	f7ff fc5e 	bl	80106c0 <prvAddCurrentTaskToDelayedList>
}
 8010e04:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8010e06:	4b03      	ldr	r3, [pc, #12]	; (8010e14 <vTaskPlaceOnEventList+0x3c>)
 8010e08:	6819      	ldr	r1, [r3, #0]
 8010e0a:	3104      	adds	r1, #4
 8010e0c:	4803      	ldr	r0, [pc, #12]	; (8010e1c <vTaskPlaceOnEventList+0x44>)
 8010e0e:	f7fe ffe3 	bl	800fdd8 <vListInsertEnd>
 8010e12:	e7f7      	b.n	8010e04 <vTaskPlaceOnEventList+0x2c>
 8010e14:	20002138 	.word	0x20002138
 8010e18:	20002258 	.word	0x20002258
 8010e1c:	20002230 	.word	0x20002230

08010e20 <vTaskPlaceOnEventListRestricted>:
	{
 8010e20:	b570      	push	{r4, r5, r6, lr}
 8010e22:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 8010e24:	2800      	cmp	r0, #0
 8010e26:	d101      	bne.n	8010e2c <vTaskPlaceOnEventListRestricted+0xc>
 8010e28:	b672      	cpsid	i
 8010e2a:	e7fe      	b.n	8010e2a <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e2c:	4c07      	ldr	r4, [pc, #28]	; (8010e4c <vTaskPlaceOnEventListRestricted+0x2c>)
 8010e2e:	6821      	ldr	r1, [r4, #0]
 8010e30:	3118      	adds	r1, #24
 8010e32:	f7fe ffd1 	bl	800fdd8 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010e36:	6820      	ldr	r0, [r4, #0]
 8010e38:	3004      	adds	r0, #4
 8010e3a:	f7fe fff1 	bl	800fe20 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 8010e3e:	4b04      	ldr	r3, [pc, #16]	; (8010e50 <vTaskPlaceOnEventListRestricted+0x30>)
 8010e40:	6818      	ldr	r0, [r3, #0]
 8010e42:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010e44:	f7ff fc3c 	bl	80106c0 <prvAddCurrentTaskToDelayedList>
	}
 8010e48:	bd70      	pop	{r4, r5, r6, pc}
 8010e4a:	46c0      	nop			; (mov r8, r8)
 8010e4c:	20002138 	.word	0x20002138
 8010e50:	20002258 	.word	0x20002258

08010e54 <xTaskRemoveFromEventList>:
{
 8010e54:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010e56:	68c3      	ldr	r3, [r0, #12]
 8010e58:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8010e5a:	2c00      	cmp	r4, #0
 8010e5c:	d101      	bne.n	8010e62 <xTaskRemoveFromEventList+0xe>
 8010e5e:	b672      	cpsid	i
 8010e60:	e7fe      	b.n	8010e60 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010e62:	0025      	movs	r5, r4
 8010e64:	3518      	adds	r5, #24
 8010e66:	0028      	movs	r0, r5
 8010e68:	f7fe ffda 	bl	800fe20 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e6c:	4b14      	ldr	r3, [pc, #80]	; (8010ec0 <xTaskRemoveFromEventList+0x6c>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d11d      	bne.n	8010eb0 <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8010e74:	1d25      	adds	r5, r4, #4
 8010e76:	0028      	movs	r0, r5
 8010e78:	f7fe ffd2 	bl	800fe20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010e7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010e7e:	4b11      	ldr	r3, [pc, #68]	; (8010ec4 <xTaskRemoveFromEventList+0x70>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d901      	bls.n	8010e8a <xTaskRemoveFromEventList+0x36>
 8010e86:	4b0f      	ldr	r3, [pc, #60]	; (8010ec4 <xTaskRemoveFromEventList+0x70>)
 8010e88:	601a      	str	r2, [r3, #0]
 8010e8a:	0093      	lsls	r3, r2, #2
 8010e8c:	189b      	adds	r3, r3, r2
 8010e8e:	0098      	lsls	r0, r3, #2
 8010e90:	4b0d      	ldr	r3, [pc, #52]	; (8010ec8 <xTaskRemoveFromEventList+0x74>)
 8010e92:	18c0      	adds	r0, r0, r3
 8010e94:	0029      	movs	r1, r5
 8010e96:	f7fe ff9f 	bl	800fdd8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010e9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010e9c:	4b0b      	ldr	r3, [pc, #44]	; (8010ecc <xTaskRemoveFromEventList+0x78>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d909      	bls.n	8010eba <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 8010ea6:	4b0a      	ldr	r3, [pc, #40]	; (8010ed0 <xTaskRemoveFromEventList+0x7c>)
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 8010eac:	2001      	movs	r0, #1
}
 8010eae:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010eb0:	0029      	movs	r1, r5
 8010eb2:	4808      	ldr	r0, [pc, #32]	; (8010ed4 <xTaskRemoveFromEventList+0x80>)
 8010eb4:	f7fe ff90 	bl	800fdd8 <vListInsertEnd>
 8010eb8:	e7ef      	b.n	8010e9a <xTaskRemoveFromEventList+0x46>
		xReturn = pdFALSE;
 8010eba:	2000      	movs	r0, #0
	return xReturn;
 8010ebc:	e7f7      	b.n	8010eae <xTaskRemoveFromEventList+0x5a>
 8010ebe:	46c0      	nop			; (mov r8, r8)
 8010ec0:	200021dc 	.word	0x200021dc
 8010ec4:	200021e8 	.word	0x200021e8
 8010ec8:	20002144 	.word	0x20002144
 8010ecc:	20002138 	.word	0x20002138
 8010ed0:	2000225c 	.word	0x2000225c
 8010ed4:	20002218 	.word	0x20002218

08010ed8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	d006      	beq.n	8010eea <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010edc:	4b04      	ldr	r3, [pc, #16]	; (8010ef0 <vTaskSetTimeOutState+0x18>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010ee2:	4b04      	ldr	r3, [pc, #16]	; (8010ef4 <vTaskSetTimeOutState+0x1c>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	6043      	str	r3, [r0, #4]
}
 8010ee8:	4770      	bx	lr
	configASSERT( pxTimeOut );
 8010eea:	b672      	cpsid	i
 8010eec:	e7fe      	b.n	8010eec <vTaskSetTimeOutState+0x14>
 8010eee:	46c0      	nop			; (mov r8, r8)
 8010ef0:	20002214 	.word	0x20002214
 8010ef4:	20002258 	.word	0x20002258

08010ef8 <xTaskCheckForTimeOut>:
{
 8010ef8:	b570      	push	{r4, r5, r6, lr}
 8010efa:	0004      	movs	r4, r0
 8010efc:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d003      	beq.n	8010f0a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8010f02:	2900      	cmp	r1, #0
 8010f04:	d103      	bne.n	8010f0e <xTaskCheckForTimeOut+0x16>
 8010f06:	b672      	cpsid	i
 8010f08:	e7fe      	b.n	8010f08 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 8010f0a:	b672      	cpsid	i
 8010f0c:	e7fe      	b.n	8010f0c <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 8010f0e:	f000 fc75 	bl	80117fc <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8010f12:	4b11      	ldr	r3, [pc, #68]	; (8010f58 <xTaskCheckForTimeOut+0x60>)
 8010f14:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8010f16:	682b      	ldr	r3, [r5, #0]
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	d018      	beq.n	8010f4e <xTaskCheckForTimeOut+0x56>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010f1c:	4a0f      	ldr	r2, [pc, #60]	; (8010f5c <xTaskCheckForTimeOut+0x64>)
 8010f1e:	6812      	ldr	r2, [r2, #0]
 8010f20:	6820      	ldr	r0, [r4, #0]
 8010f22:	4290      	cmp	r0, r2
 8010f24:	d002      	beq.n	8010f2c <xTaskCheckForTimeOut+0x34>
 8010f26:	6862      	ldr	r2, [r4, #4]
 8010f28:	428a      	cmp	r2, r1
 8010f2a:	d912      	bls.n	8010f52 <xTaskCheckForTimeOut+0x5a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8010f2c:	6862      	ldr	r2, [r4, #4]
 8010f2e:	1a88      	subs	r0, r1, r2
 8010f30:	4283      	cmp	r3, r0
 8010f32:	d804      	bhi.n	8010f3e <xTaskCheckForTimeOut+0x46>
			xReturn = pdTRUE;
 8010f34:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8010f36:	f000 fc6d 	bl	8011814 <vPortExitCritical>
}
 8010f3a:	0020      	movs	r0, r4
 8010f3c:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8010f3e:	1a52      	subs	r2, r2, r1
 8010f40:	189b      	adds	r3, r3, r2
 8010f42:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8010f44:	0020      	movs	r0, r4
 8010f46:	f7ff ffc7 	bl	8010ed8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8010f4a:	2400      	movs	r4, #0
 8010f4c:	e7f3      	b.n	8010f36 <xTaskCheckForTimeOut+0x3e>
				xReturn = pdFALSE;
 8010f4e:	2400      	movs	r4, #0
 8010f50:	e7f1      	b.n	8010f36 <xTaskCheckForTimeOut+0x3e>
			xReturn = pdTRUE;
 8010f52:	2401      	movs	r4, #1
 8010f54:	e7ef      	b.n	8010f36 <xTaskCheckForTimeOut+0x3e>
 8010f56:	46c0      	nop			; (mov r8, r8)
 8010f58:	20002258 	.word	0x20002258
 8010f5c:	20002214 	.word	0x20002214

08010f60 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8010f60:	4b01      	ldr	r3, [pc, #4]	; (8010f68 <vTaskMissedYield+0x8>)
 8010f62:	2201      	movs	r2, #1
 8010f64:	601a      	str	r2, [r3, #0]
}
 8010f66:	4770      	bx	lr
 8010f68:	2000225c 	.word	0x2000225c

08010f6c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8010f6c:	4b06      	ldr	r3, [pc, #24]	; (8010f88 <xTaskGetSchedulerState+0x1c>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d007      	beq.n	8010f84 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f74:	4b05      	ldr	r3, [pc, #20]	; (8010f8c <xTaskGetSchedulerState+0x20>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d001      	beq.n	8010f80 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8010f7c:	2000      	movs	r0, #0
		return xReturn;
 8010f7e:	e002      	b.n	8010f86 <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 8010f80:	2002      	movs	r0, #2
 8010f82:	e000      	b.n	8010f86 <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010f84:	2001      	movs	r0, #1
	}
 8010f86:	4770      	bx	lr
 8010f88:	2000222c 	.word	0x2000222c
 8010f8c:	200021dc 	.word	0x200021dc

08010f90 <vTaskPriorityInherit>:
	{
 8010f90:	b570      	push	{r4, r5, r6, lr}
 8010f92:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8010f94:	d01a      	beq.n	8010fcc <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010f96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010f98:	4a19      	ldr	r2, [pc, #100]	; (8011000 <vTaskPriorityInherit+0x70>)
 8010f9a:	6812      	ldr	r2, [r2, #0]
 8010f9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d214      	bcs.n	8010fcc <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010fa2:	6982      	ldr	r2, [r0, #24]
 8010fa4:	2a00      	cmp	r2, #0
 8010fa6:	db05      	blt.n	8010fb4 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fa8:	4a15      	ldr	r2, [pc, #84]	; (8011000 <vTaskPriorityInherit+0x70>)
 8010faa:	6812      	ldr	r2, [r2, #0]
 8010fac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8010fae:	2207      	movs	r2, #7
 8010fb0:	1a52      	subs	r2, r2, r1
 8010fb2:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8010fb4:	009a      	lsls	r2, r3, #2
 8010fb6:	18d3      	adds	r3, r2, r3
 8010fb8:	009a      	lsls	r2, r3, #2
 8010fba:	4b12      	ldr	r3, [pc, #72]	; (8011004 <vTaskPriorityInherit+0x74>)
 8010fbc:	18d2      	adds	r2, r2, r3
 8010fbe:	6963      	ldr	r3, [r4, #20]
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d004      	beq.n	8010fce <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010fc4:	4b0e      	ldr	r3, [pc, #56]	; (8011000 <vTaskPriorityInherit+0x70>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fca:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8010fcc:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010fce:	1d25      	adds	r5, r4, #4
 8010fd0:	0028      	movs	r0, r5
 8010fd2:	f7fe ff25 	bl	800fe20 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010fd6:	4b0a      	ldr	r3, [pc, #40]	; (8011000 <vTaskPriorityInherit+0x70>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8010fde:	4a0a      	ldr	r2, [pc, #40]	; (8011008 <vTaskPriorityInherit+0x78>)
 8010fe0:	6812      	ldr	r2, [r2, #0]
 8010fe2:	4293      	cmp	r3, r2
 8010fe4:	d808      	bhi.n	8010ff8 <vTaskPriorityInherit+0x68>
 8010fe6:	009a      	lsls	r2, r3, #2
 8010fe8:	18d3      	adds	r3, r2, r3
 8010fea:	0098      	lsls	r0, r3, #2
 8010fec:	4b05      	ldr	r3, [pc, #20]	; (8011004 <vTaskPriorityInherit+0x74>)
 8010fee:	18c0      	adds	r0, r0, r3
 8010ff0:	0029      	movs	r1, r5
 8010ff2:	f7fe fef1 	bl	800fdd8 <vListInsertEnd>
	}
 8010ff6:	e7e9      	b.n	8010fcc <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 8010ff8:	4a03      	ldr	r2, [pc, #12]	; (8011008 <vTaskPriorityInherit+0x78>)
 8010ffa:	6013      	str	r3, [r2, #0]
 8010ffc:	e7f3      	b.n	8010fe6 <vTaskPriorityInherit+0x56>
 8010ffe:	46c0      	nop			; (mov r8, r8)
 8011000:	20002138 	.word	0x20002138
 8011004:	20002144 	.word	0x20002144
 8011008:	200021e8 	.word	0x200021e8

0801100c <xTaskPriorityDisinherit>:
	{
 801100c:	b570      	push	{r4, r5, r6, lr}
 801100e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8011010:	d02a      	beq.n	8011068 <xTaskPriorityDisinherit+0x5c>
			configASSERT( pxTCB == pxCurrentTCB );
 8011012:	4b18      	ldr	r3, [pc, #96]	; (8011074 <xTaskPriorityDisinherit+0x68>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	4283      	cmp	r3, r0
 8011018:	d001      	beq.n	801101e <xTaskPriorityDisinherit+0x12>
 801101a:	b672      	cpsid	i
 801101c:	e7fe      	b.n	801101c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 801101e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011020:	2b00      	cmp	r3, #0
 8011022:	d101      	bne.n	8011028 <xTaskPriorityDisinherit+0x1c>
 8011024:	b672      	cpsid	i
 8011026:	e7fe      	b.n	8011026 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 8011028:	3b01      	subs	r3, #1
 801102a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801102c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801102e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8011030:	428a      	cmp	r2, r1
 8011032:	d01b      	beq.n	801106c <xTaskPriorityDisinherit+0x60>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011034:	2b00      	cmp	r3, #0
 8011036:	d11b      	bne.n	8011070 <xTaskPriorityDisinherit+0x64>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8011038:	1d05      	adds	r5, r0, #4
 801103a:	0028      	movs	r0, r5
 801103c:	f7fe fef0 	bl	800fe20 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011040:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011042:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011044:	2207      	movs	r2, #7
 8011046:	1ad2      	subs	r2, r2, r3
 8011048:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801104a:	4a0b      	ldr	r2, [pc, #44]	; (8011078 <xTaskPriorityDisinherit+0x6c>)
 801104c:	6812      	ldr	r2, [r2, #0]
 801104e:	4293      	cmp	r3, r2
 8011050:	d901      	bls.n	8011056 <xTaskPriorityDisinherit+0x4a>
 8011052:	4a09      	ldr	r2, [pc, #36]	; (8011078 <xTaskPriorityDisinherit+0x6c>)
 8011054:	6013      	str	r3, [r2, #0]
 8011056:	2014      	movs	r0, #20
 8011058:	4358      	muls	r0, r3
 801105a:	4b08      	ldr	r3, [pc, #32]	; (801107c <xTaskPriorityDisinherit+0x70>)
 801105c:	18c0      	adds	r0, r0, r3
 801105e:	0029      	movs	r1, r5
 8011060:	f7fe feba 	bl	800fdd8 <vListInsertEnd>
					xReturn = pdTRUE;
 8011064:	2001      	movs	r0, #1
 8011066:	e000      	b.n	801106a <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
 8011068:	2000      	movs	r0, #0
	}
 801106a:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 801106c:	2000      	movs	r0, #0
 801106e:	e7fc      	b.n	801106a <xTaskPriorityDisinherit+0x5e>
 8011070:	2000      	movs	r0, #0
		return xReturn;
 8011072:	e7fa      	b.n	801106a <xTaskPriorityDisinherit+0x5e>
 8011074:	20002138 	.word	0x20002138
 8011078:	200021e8 	.word	0x200021e8
 801107c:	20002144 	.word	0x20002144

08011080 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8011080:	b570      	push	{r4, r5, r6, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8011086:	2300      	movs	r3, #0
 8011088:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801108a:	4b28      	ldr	r3, [pc, #160]	; (801112c <vTaskList+0xac>)
 801108c:	681a      	ldr	r2, [r3, #0]
 801108e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8011090:	6818      	ldr	r0, [r3, #0]
 8011092:	0140      	lsls	r0, r0, #5
 8011094:	f000 fc66 	bl	8011964 <pvPortMalloc>
 8011098:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 801109a:	d045      	beq.n	8011128 <vTaskList+0xa8>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 801109c:	9903      	ldr	r1, [sp, #12]
 801109e:	2200      	movs	r2, #0
 80110a0:	f7ff fdd0 	bl	8010c44 <uxTaskGetSystemState>
 80110a4:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80110a6:	2300      	movs	r3, #0
 80110a8:	9302      	str	r3, [sp, #8]
 80110aa:	e023      	b.n	80110f4 <vTaskList+0x74>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d134      	bne.n	801111a <vTaskList+0x9a>
				{
					case eReady:		cStatus = tskREADY_CHAR;
 80110b0:	2552      	movs	r5, #82	; 0x52
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80110b2:	9b02      	ldr	r3, [sp, #8]
 80110b4:	015b      	lsls	r3, r3, #5
 80110b6:	18f3      	adds	r3, r6, r3
 80110b8:	6859      	ldr	r1, [r3, #4]
 80110ba:	0020      	movs	r0, r4
 80110bc:	f7ff fb2a 	bl	8010714 <prvWriteNameToBuffer>
 80110c0:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 80110c2:	9b02      	ldr	r3, [sp, #8]
 80110c4:	015b      	lsls	r3, r3, #5
 80110c6:	18f3      	adds	r3, r6, r3
 80110c8:	691b      	ldr	r3, [r3, #16]
 80110ca:	9a02      	ldr	r2, [sp, #8]
 80110cc:	0152      	lsls	r2, r2, #5
 80110ce:	18b2      	adds	r2, r6, r2
 80110d0:	8b91      	ldrh	r1, [r2, #28]
 80110d2:	9a02      	ldr	r2, [sp, #8]
 80110d4:	0152      	lsls	r2, r2, #5
 80110d6:	18b2      	adds	r2, r6, r2
 80110d8:	6892      	ldr	r2, [r2, #8]
 80110da:	9201      	str	r2, [sp, #4]
 80110dc:	9100      	str	r1, [sp, #0]
 80110de:	002a      	movs	r2, r5
 80110e0:	4913      	ldr	r1, [pc, #76]	; (8011130 <vTaskList+0xb0>)
 80110e2:	f004 facb 	bl	801567c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 80110e6:	0020      	movs	r0, r4
 80110e8:	f7ef f816 	bl	8000118 <strlen>
 80110ec:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 80110ee:	9b02      	ldr	r3, [sp, #8]
 80110f0:	3301      	adds	r3, #1
 80110f2:	9302      	str	r3, [sp, #8]
 80110f4:	9a02      	ldr	r2, [sp, #8]
 80110f6:	9b03      	ldr	r3, [sp, #12]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d212      	bcs.n	8011122 <vTaskList+0xa2>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80110fc:	9b02      	ldr	r3, [sp, #8]
 80110fe:	015b      	lsls	r3, r3, #5
 8011100:	18f3      	adds	r3, r6, r3
 8011102:	7b1b      	ldrb	r3, [r3, #12]
 8011104:	2b02      	cmp	r3, #2
 8011106:	d00a      	beq.n	801111e <vTaskList+0x9e>
 8011108:	d9d0      	bls.n	80110ac <vTaskList+0x2c>
 801110a:	2b03      	cmp	r3, #3
 801110c:	d003      	beq.n	8011116 <vTaskList+0x96>
 801110e:	2b04      	cmp	r3, #4
 8011110:	d103      	bne.n	801111a <vTaskList+0x9a>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 8011112:	2544      	movs	r5, #68	; 0x44
										break;
 8011114:	e7cd      	b.n	80110b2 <vTaskList+0x32>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8011116:	2553      	movs	r5, #83	; 0x53
										break;
 8011118:	e7cb      	b.n	80110b2 <vTaskList+0x32>
										cStatus = 0x00;
 801111a:	2500      	movs	r5, #0
										break;
 801111c:	e7c9      	b.n	80110b2 <vTaskList+0x32>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 801111e:	2542      	movs	r5, #66	; 0x42
 8011120:	e7c7      	b.n	80110b2 <vTaskList+0x32>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8011122:	0030      	movs	r0, r6
 8011124:	f000 fc96 	bl	8011a54 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011128:	b004      	add	sp, #16
 801112a:	bd70      	pop	{r4, r5, r6, pc}
 801112c:	200021d4 	.word	0x200021d4
 8011130:	0801d164 	.word	0x0801d164

08011134 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8011134:	b570      	push	{r4, r5, r6, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 801113a:	2300      	movs	r3, #0
 801113c:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801113e:	4b25      	ldr	r3, [pc, #148]	; (80111d4 <vTaskGetRunTimeStats+0xa0>)
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8011144:	6818      	ldr	r0, [r3, #0]
 8011146:	0140      	lsls	r0, r0, #5
 8011148:	f000 fc0c 	bl	8011964 <pvPortMalloc>
 801114c:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 801114e:	d03e      	beq.n	80111ce <vTaskGetRunTimeStats+0x9a>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8011150:	9903      	ldr	r1, [sp, #12]
 8011152:	aa01      	add	r2, sp, #4
 8011154:	f7ff fd76 	bl	8010c44 <uxTaskGetSystemState>
 8011158:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 801115a:	2164      	movs	r1, #100	; 0x64
 801115c:	9801      	ldr	r0, [sp, #4]
 801115e:	f7ee fff7 	bl	8000150 <__udivsi3>
 8011162:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 8011164:	2800      	cmp	r0, #0
 8011166:	d02f      	beq.n	80111c8 <vTaskGetRunTimeStats+0x94>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8011168:	2300      	movs	r3, #0
 801116a:	9302      	str	r3, [sp, #8]
 801116c:	e00d      	b.n	801118a <vTaskGetRunTimeStats+0x56>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 801116e:	9b02      	ldr	r3, [sp, #8]
 8011170:	015b      	lsls	r3, r3, #5
 8011172:	18f3      	adds	r3, r6, r3
 8011174:	699a      	ldr	r2, [r3, #24]
 8011176:	4918      	ldr	r1, [pc, #96]	; (80111d8 <vTaskGetRunTimeStats+0xa4>)
 8011178:	f004 fa80 	bl	801567c <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 801117c:	0020      	movs	r0, r4
 801117e:	f7ee ffcb 	bl	8000118 <strlen>
 8011182:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8011184:	9b02      	ldr	r3, [sp, #8]
 8011186:	3301      	adds	r3, #1
 8011188:	9302      	str	r3, [sp, #8]
 801118a:	9a02      	ldr	r2, [sp, #8]
 801118c:	9b03      	ldr	r3, [sp, #12]
 801118e:	429a      	cmp	r2, r3
 8011190:	d21a      	bcs.n	80111c8 <vTaskGetRunTimeStats+0x94>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8011192:	9b02      	ldr	r3, [sp, #8]
 8011194:	015b      	lsls	r3, r3, #5
 8011196:	18f3      	adds	r3, r6, r3
 8011198:	6998      	ldr	r0, [r3, #24]
 801119a:	9901      	ldr	r1, [sp, #4]
 801119c:	f7ee ffd8 	bl	8000150 <__udivsi3>
 80111a0:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80111a2:	9b02      	ldr	r3, [sp, #8]
 80111a4:	015b      	lsls	r3, r3, #5
 80111a6:	18f3      	adds	r3, r6, r3
 80111a8:	6859      	ldr	r1, [r3, #4]
 80111aa:	0020      	movs	r0, r4
 80111ac:	f7ff fab2 	bl	8010714 <prvWriteNameToBuffer>
 80111b0:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 80111b2:	2d00      	cmp	r5, #0
 80111b4:	d0db      	beq.n	801116e <vTaskGetRunTimeStats+0x3a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 80111b6:	9b02      	ldr	r3, [sp, #8]
 80111b8:	015b      	lsls	r3, r3, #5
 80111ba:	18f3      	adds	r3, r6, r3
 80111bc:	699a      	ldr	r2, [r3, #24]
 80111be:	002b      	movs	r3, r5
 80111c0:	4906      	ldr	r1, [pc, #24]	; (80111dc <vTaskGetRunTimeStats+0xa8>)
 80111c2:	f004 fa5b 	bl	801567c <sprintf>
 80111c6:	e7d9      	b.n	801117c <vTaskGetRunTimeStats+0x48>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 80111c8:	0030      	movs	r0, r6
 80111ca:	f000 fc43 	bl	8011a54 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80111ce:	b004      	add	sp, #16
 80111d0:	bd70      	pop	{r4, r5, r6, pc}
 80111d2:	46c0      	nop			; (mov r8, r8)
 80111d4:	200021d4 	.word	0x200021d4
 80111d8:	0801d158 	.word	0x0801d158
 80111dc:	0801d14c 	.word	0x0801d14c

080111e0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80111e0:	4b05      	ldr	r3, [pc, #20]	; (80111f8 <pvTaskIncrementMutexHeldCount+0x18>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d004      	beq.n	80111f2 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80111e8:	4b03      	ldr	r3, [pc, #12]	; (80111f8 <pvTaskIncrementMutexHeldCount+0x18>)
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80111ee:	3301      	adds	r3, #1
 80111f0:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 80111f2:	4b01      	ldr	r3, [pc, #4]	; (80111f8 <pvTaskIncrementMutexHeldCount+0x18>)
 80111f4:	6818      	ldr	r0, [r3, #0]
	}
 80111f6:	4770      	bx	lr
 80111f8:	20002138 	.word	0x20002138

080111fc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80111fc:	b570      	push	{r4, r5, r6, lr}
 80111fe:	0005      	movs	r5, r0
 8011200:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8011202:	f000 fafb 	bl	80117fc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8011206:	4b20      	ldr	r3, [pc, #128]	; (8011288 <ulTaskNotifyTake+0x8c>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801120c:	2b00      	cmp	r3, #0
 801120e:	d106      	bne.n	801121e <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8011210:	4b1d      	ldr	r3, [pc, #116]	; (8011288 <ulTaskNotifyTake+0x8c>)
 8011212:	681a      	ldr	r2, [r3, #0]
 8011214:	235c      	movs	r3, #92	; 0x5c
 8011216:	2101      	movs	r1, #1
 8011218:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 801121a:	2c00      	cmp	r4, #0
 801121c:	d118      	bne.n	8011250 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801121e:	f000 faf9 	bl	8011814 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011222:	f000 faeb 	bl	80117fc <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8011226:	4b18      	ldr	r3, [pc, #96]	; (8011288 <ulTaskNotifyTake+0x8c>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 801122c:	2c00      	cmp	r4, #0
 801122e:	d006      	beq.n	801123e <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 8011230:	2d00      	cmp	r5, #0
 8011232:	d123      	bne.n	801127c <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 8011234:	4b14      	ldr	r3, [pc, #80]	; (8011288 <ulTaskNotifyTake+0x8c>)
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	6d93      	ldr	r3, [r2, #88]	; 0x58
 801123a:	3b01      	subs	r3, #1
 801123c:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 801123e:	4b12      	ldr	r3, [pc, #72]	; (8011288 <ulTaskNotifyTake+0x8c>)
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	235c      	movs	r3, #92	; 0x5c
 8011244:	2100      	movs	r1, #0
 8011246:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 8011248:	f000 fae4 	bl	8011814 <vPortExitCritical>

		return ulReturn;
	}
 801124c:	0020      	movs	r0, r4
 801124e:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8011250:	4b0d      	ldr	r3, [pc, #52]	; (8011288 <ulTaskNotifyTake+0x8c>)
 8011252:	6818      	ldr	r0, [r3, #0]
 8011254:	3004      	adds	r0, #4
 8011256:	f7fe fde3 	bl	800fe20 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 801125a:	1c63      	adds	r3, r4, #1
 801125c:	d007      	beq.n	801126e <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 801125e:	4b0b      	ldr	r3, [pc, #44]	; (801128c <ulTaskNotifyTake+0x90>)
 8011260:	6818      	ldr	r0, [r3, #0]
 8011262:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8011264:	f7ff fa2c 	bl	80106c0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8011268:	f000 fabc 	bl	80117e4 <vPortYield>
 801126c:	e7d7      	b.n	801121e <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 801126e:	4b06      	ldr	r3, [pc, #24]	; (8011288 <ulTaskNotifyTake+0x8c>)
 8011270:	6819      	ldr	r1, [r3, #0]
 8011272:	3104      	adds	r1, #4
 8011274:	4806      	ldr	r0, [pc, #24]	; (8011290 <ulTaskNotifyTake+0x94>)
 8011276:	f7fe fdaf 	bl	800fdd8 <vListInsertEnd>
 801127a:	e7f5      	b.n	8011268 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801127c:	4b02      	ldr	r3, [pc, #8]	; (8011288 <ulTaskNotifyTake+0x8c>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	2200      	movs	r2, #0
 8011282:	659a      	str	r2, [r3, #88]	; 0x58
 8011284:	e7db      	b.n	801123e <ulTaskNotifyTake+0x42>
 8011286:	46c0      	nop			; (mov r8, r8)
 8011288:	20002138 	.word	0x20002138
 801128c:	20002258 	.word	0x20002258
 8011290:	20002230 	.word	0x20002230

08011294 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011296:	0004      	movs	r4, r0
 8011298:	000e      	movs	r6, r1
 801129a:	0015      	movs	r5, r2
 801129c:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 801129e:	2800      	cmp	r0, #0
 80112a0:	d101      	bne.n	80112a6 <xTaskGenericNotify+0x12>
 80112a2:	b672      	cpsid	i
 80112a4:	e7fe      	b.n	80112a4 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 80112a6:	f000 faa9 	bl	80117fc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80112aa:	2f00      	cmp	r7, #0
 80112ac:	d001      	beq.n	80112b2 <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80112ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80112b0:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 80112b2:	225c      	movs	r2, #92	; 0x5c
 80112b4:	5ca3      	ldrb	r3, [r4, r2]
 80112b6:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 80112b8:	2102      	movs	r1, #2
 80112ba:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 80112bc:	2d02      	cmp	r5, #2
 80112be:	d017      	beq.n	80112f0 <xTaskGenericNotify+0x5c>
 80112c0:	d908      	bls.n	80112d4 <xTaskGenericNotify+0x40>
 80112c2:	2d03      	cmp	r5, #3
 80112c4:	d019      	beq.n	80112fa <xTaskGenericNotify+0x66>
 80112c6:	2d04      	cmp	r5, #4
 80112c8:	d106      	bne.n	80112d8 <xTaskGenericNotify+0x44>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 80112ca:	2b02      	cmp	r3, #2
 80112cc:	d018      	beq.n	8011300 <xTaskGenericNotify+0x6c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80112ce:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 80112d0:	2501      	movs	r5, #1
 80112d2:	e007      	b.n	80112e4 <xTaskGenericNotify+0x50>
			switch( eAction )
 80112d4:	2d01      	cmp	r5, #1
 80112d6:	d001      	beq.n	80112dc <xTaskGenericNotify+0x48>
	BaseType_t xReturn = pdPASS;
 80112d8:	2501      	movs	r5, #1
 80112da:	e003      	b.n	80112e4 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 80112dc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80112de:	4316      	orrs	r6, r2
 80112e0:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 80112e2:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 80112e4:	2b01      	cmp	r3, #1
 80112e6:	d00d      	beq.n	8011304 <xTaskGenericNotify+0x70>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80112e8:	f000 fa94 	bl	8011814 <vPortExitCritical>

		return xReturn;
	}
 80112ec:	0028      	movs	r0, r5
 80112ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 80112f0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80112f2:	3201      	adds	r2, #1
 80112f4:	65a2      	str	r2, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 80112f6:	2501      	movs	r5, #1
					break;
 80112f8:	e7f4      	b.n	80112e4 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue = ulValue;
 80112fa:	65a6      	str	r6, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 80112fc:	2501      	movs	r5, #1
					break;
 80112fe:	e7f1      	b.n	80112e4 <xTaskGenericNotify+0x50>
						xReturn = pdFAIL;
 8011300:	2500      	movs	r5, #0
 8011302:	e7ef      	b.n	80112e4 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8011304:	1d26      	adds	r6, r4, #4
 8011306:	0030      	movs	r0, r6
 8011308:	f7fe fd8a 	bl	800fe20 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801130c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801130e:	4a0d      	ldr	r2, [pc, #52]	; (8011344 <xTaskGenericNotify+0xb0>)
 8011310:	6812      	ldr	r2, [r2, #0]
 8011312:	4293      	cmp	r3, r2
 8011314:	d901      	bls.n	801131a <xTaskGenericNotify+0x86>
 8011316:	4a0b      	ldr	r2, [pc, #44]	; (8011344 <xTaskGenericNotify+0xb0>)
 8011318:	6013      	str	r3, [r2, #0]
 801131a:	2014      	movs	r0, #20
 801131c:	4358      	muls	r0, r3
 801131e:	4b0a      	ldr	r3, [pc, #40]	; (8011348 <xTaskGenericNotify+0xb4>)
 8011320:	18c0      	adds	r0, r0, r3
 8011322:	0031      	movs	r1, r6
 8011324:	f7fe fd58 	bl	800fdd8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011328:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801132a:	2b00      	cmp	r3, #0
 801132c:	d001      	beq.n	8011332 <xTaskGenericNotify+0x9e>
 801132e:	b672      	cpsid	i
 8011330:	e7fe      	b.n	8011330 <xTaskGenericNotify+0x9c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011332:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011334:	4b05      	ldr	r3, [pc, #20]	; (801134c <xTaskGenericNotify+0xb8>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133a:	429a      	cmp	r2, r3
 801133c:	d9d4      	bls.n	80112e8 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 801133e:	f000 fa51 	bl	80117e4 <vPortYield>
 8011342:	e7d1      	b.n	80112e8 <xTaskGenericNotify+0x54>
 8011344:	200021e8 	.word	0x200021e8
 8011348:	20002144 	.word	0x20002144
 801134c:	20002138 	.word	0x20002138

08011350 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011350:	4b06      	ldr	r3, [pc, #24]	; (801136c <prvGetNextExpireTime+0x1c>)
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	6813      	ldr	r3, [r2, #0]
 8011356:	4259      	negs	r1, r3
 8011358:	414b      	adcs	r3, r1
 801135a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 801135c:	2b00      	cmp	r3, #0
 801135e:	d102      	bne.n	8011366 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011360:	68d3      	ldr	r3, [r2, #12]
 8011362:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
	}

	return xNextExpireTime;
}
 8011364:	4770      	bx	lr
		xNextExpireTime = ( TickType_t ) 0U;
 8011366:	2000      	movs	r0, #0
	return xNextExpireTime;
 8011368:	e7fc      	b.n	8011364 <prvGetNextExpireTime+0x14>
 801136a:	46c0      	nop			; (mov r8, r8)
 801136c:	20002260 	.word	0x20002260

08011370 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011370:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011372:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011374:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011376:	4291      	cmp	r1, r2
 8011378:	d80c      	bhi.n	8011394 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 801137a:	1ad2      	subs	r2, r2, r3
 801137c:	6983      	ldr	r3, [r0, #24]
 801137e:	429a      	cmp	r2, r3
 8011380:	d301      	bcc.n	8011386 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011382:	2001      	movs	r0, #1
 8011384:	e010      	b.n	80113a8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011386:	1d01      	adds	r1, r0, #4
 8011388:	4b09      	ldr	r3, [pc, #36]	; (80113b0 <prvInsertTimerInActiveList+0x40>)
 801138a:	6818      	ldr	r0, [r3, #0]
 801138c:	f7fe fd30 	bl	800fdf0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8011390:	2000      	movs	r0, #0
 8011392:	e009      	b.n	80113a8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011394:	429a      	cmp	r2, r3
 8011396:	d201      	bcs.n	801139c <prvInsertTimerInActiveList+0x2c>
 8011398:	4299      	cmp	r1, r3
 801139a:	d206      	bcs.n	80113aa <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801139c:	1d01      	adds	r1, r0, #4
 801139e:	4b05      	ldr	r3, [pc, #20]	; (80113b4 <prvInsertTimerInActiveList+0x44>)
 80113a0:	6818      	ldr	r0, [r3, #0]
 80113a2:	f7fe fd25 	bl	800fdf0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80113a6:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80113a8:	bd10      	pop	{r4, pc}
			xProcessTimerNow = pdTRUE;
 80113aa:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80113ac:	e7fc      	b.n	80113a8 <prvInsertTimerInActiveList+0x38>
 80113ae:	46c0      	nop			; (mov r8, r8)
 80113b0:	20002264 	.word	0x20002264
 80113b4:	20002260 	.word	0x20002260

080113b8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80113b8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80113ba:	f000 fa1f 	bl	80117fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80113be:	4b11      	ldr	r3, [pc, #68]	; (8011404 <prvCheckForValidListAndQueue+0x4c>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d002      	beq.n	80113cc <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80113c6:	f000 fa25 	bl	8011814 <vPortExitCritical>
}
 80113ca:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 80113cc:	4d0e      	ldr	r5, [pc, #56]	; (8011408 <prvCheckForValidListAndQueue+0x50>)
 80113ce:	0028      	movs	r0, r5
 80113d0:	f7fe fcf4 	bl	800fdbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80113d4:	4c0d      	ldr	r4, [pc, #52]	; (801140c <prvCheckForValidListAndQueue+0x54>)
 80113d6:	0020      	movs	r0, r4
 80113d8:	f7fe fcf0 	bl	800fdbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80113dc:	4b0c      	ldr	r3, [pc, #48]	; (8011410 <prvCheckForValidListAndQueue+0x58>)
 80113de:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80113e0:	4b0c      	ldr	r3, [pc, #48]	; (8011414 <prvCheckForValidListAndQueue+0x5c>)
 80113e2:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80113e4:	2200      	movs	r2, #0
 80113e6:	2110      	movs	r1, #16
 80113e8:	2004      	movs	r0, #4
 80113ea:	f7fe fe0c 	bl	8010006 <xQueueGenericCreate>
 80113ee:	4b05      	ldr	r3, [pc, #20]	; (8011404 <prvCheckForValidListAndQueue+0x4c>)
 80113f0:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 80113f2:	2800      	cmp	r0, #0
 80113f4:	d101      	bne.n	80113fa <prvCheckForValidListAndQueue+0x42>
 80113f6:	b672      	cpsid	i
 80113f8:	e7fe      	b.n	80113f8 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80113fa:	4907      	ldr	r1, [pc, #28]	; (8011418 <prvCheckForValidListAndQueue+0x60>)
 80113fc:	f7ff f83a 	bl	8010474 <vQueueAddToRegistry>
 8011400:	e7e1      	b.n	80113c6 <prvCheckForValidListAndQueue+0xe>
 8011402:	46c0      	nop			; (mov r8, r8)
 8011404:	20002294 	.word	0x20002294
 8011408:	20002268 	.word	0x20002268
 801140c:	2000227c 	.word	0x2000227c
 8011410:	20002260 	.word	0x20002260
 8011414:	20002264 	.word	0x20002264
 8011418:	0801d1a4 	.word	0x0801d1a4

0801141c <xTimerCreateTimerTask>:
{
 801141c:	b500      	push	{lr}
 801141e:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 8011420:	f7ff ffca 	bl	80113b8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8011424:	4b0a      	ldr	r3, [pc, #40]	; (8011450 <xTimerCreateTimerTask+0x34>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d00d      	beq.n	8011448 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 801142c:	2300      	movs	r3, #0
 801142e:	9303      	str	r3, [sp, #12]
 8011430:	9302      	str	r3, [sp, #8]
 8011432:	9301      	str	r3, [sp, #4]
 8011434:	3303      	adds	r3, #3
 8011436:	9300      	str	r3, [sp, #0]
 8011438:	2300      	movs	r3, #0
 801143a:	22a0      	movs	r2, #160	; 0xa0
 801143c:	4905      	ldr	r1, [pc, #20]	; (8011454 <xTimerCreateTimerTask+0x38>)
 801143e:	4806      	ldr	r0, [pc, #24]	; (8011458 <xTimerCreateTimerTask+0x3c>)
 8011440:	f7ff f97a 	bl	8010738 <xTaskGenericCreate>
	configASSERT( xReturn );
 8011444:	2800      	cmp	r0, #0
 8011446:	d101      	bne.n	801144c <xTimerCreateTimerTask+0x30>
 8011448:	b672      	cpsid	i
 801144a:	e7fe      	b.n	801144a <xTimerCreateTimerTask+0x2e>
}
 801144c:	b005      	add	sp, #20
 801144e:	bd00      	pop	{pc}
 8011450:	20002294 	.word	0x20002294
 8011454:	0801d1ac 	.word	0x0801d1ac
 8011458:	08011701 	.word	0x08011701

0801145c <xTimerCreate>:
{
 801145c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801145e:	46c6      	mov	lr, r8
 8011460:	b500      	push	{lr}
 8011462:	4680      	mov	r8, r0
 8011464:	000d      	movs	r5, r1
 8011466:	0017      	movs	r7, r2
 8011468:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 801146a:	2900      	cmp	r1, #0
 801146c:	d014      	beq.n	8011498 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 801146e:	202c      	movs	r0, #44	; 0x2c
 8011470:	f000 fa78 	bl	8011964 <pvPortMalloc>
 8011474:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 8011476:	d00b      	beq.n	8011490 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 8011478:	f7ff ff9e 	bl	80113b8 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 801147c:	4643      	mov	r3, r8
 801147e:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011480:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8011482:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8011484:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011486:	9b06      	ldr	r3, [sp, #24]
 8011488:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801148a:	1d20      	adds	r0, r4, #4
 801148c:	f7fe fca1 	bl	800fdd2 <vListInitialiseItem>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011490:	2d00      	cmp	r5, #0
 8011492:	d103      	bne.n	801149c <xTimerCreate+0x40>
 8011494:	b672      	cpsid	i
 8011496:	e7fe      	b.n	8011496 <xTimerCreate+0x3a>
		pxNewTimer = NULL;
 8011498:	2400      	movs	r4, #0
 801149a:	e7f9      	b.n	8011490 <xTimerCreate+0x34>
}
 801149c:	0020      	movs	r0, r4
 801149e:	bc04      	pop	{r2}
 80114a0:	4690      	mov	r8, r2
 80114a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080114a4 <xTimerGenericCommand>:
{
 80114a4:	b530      	push	{r4, r5, lr}
 80114a6:	b085      	sub	sp, #20
 80114a8:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 80114aa:	4b13      	ldr	r3, [pc, #76]	; (80114f8 <xTimerGenericCommand+0x54>)
 80114ac:	681c      	ldr	r4, [r3, #0]
 80114ae:	2c00      	cmp	r4, #0
 80114b0:	d020      	beq.n	80114f4 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 80114b2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80114b4:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80114b6:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80114b8:	2905      	cmp	r1, #5
 80114ba:	dc13      	bgt.n	80114e4 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80114bc:	f7ff fd56 	bl	8010f6c <xTaskGetSchedulerState>
 80114c0:	2802      	cmp	r0, #2
 80114c2:	d007      	beq.n	80114d4 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80114c4:	4b0c      	ldr	r3, [pc, #48]	; (80114f8 <xTimerGenericCommand+0x54>)
 80114c6:	6818      	ldr	r0, [r3, #0]
 80114c8:	2300      	movs	r3, #0
 80114ca:	2200      	movs	r2, #0
 80114cc:	4669      	mov	r1, sp
 80114ce:	f7fe fdd7 	bl	8010080 <xQueueGenericSend>
 80114d2:	e00d      	b.n	80114f0 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80114d4:	4b08      	ldr	r3, [pc, #32]	; (80114f8 <xTimerGenericCommand+0x54>)
 80114d6:	6818      	ldr	r0, [r3, #0]
 80114d8:	2300      	movs	r3, #0
 80114da:	9a08      	ldr	r2, [sp, #32]
 80114dc:	4669      	mov	r1, sp
 80114de:	f7fe fdcf 	bl	8010080 <xQueueGenericSend>
 80114e2:	e005      	b.n	80114f0 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80114e4:	2300      	movs	r3, #0
 80114e6:	002a      	movs	r2, r5
 80114e8:	4669      	mov	r1, sp
 80114ea:	0020      	movs	r0, r4
 80114ec:	f7fe fe57 	bl	801019e <xQueueGenericSendFromISR>
}
 80114f0:	b005      	add	sp, #20
 80114f2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80114f4:	2000      	movs	r0, #0
	return xReturn;
 80114f6:	e7fb      	b.n	80114f0 <xTimerGenericCommand+0x4c>
 80114f8:	20002294 	.word	0x20002294

080114fc <prvSwitchTimerLists>:
{
 80114fc:	b570      	push	{r4, r5, r6, lr}
 80114fe:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011500:	4b17      	ldr	r3, [pc, #92]	; (8011560 <prvSwitchTimerLists+0x64>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	681a      	ldr	r2, [r3, #0]
 8011506:	2a00      	cmp	r2, #0
 8011508:	d023      	beq.n	8011552 <prvSwitchTimerLists+0x56>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801150e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011510:	1d25      	adds	r5, r4, #4
 8011512:	0028      	movs	r0, r5
 8011514:	f7fe fc84 	bl	800fe20 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011518:	0020      	movs	r0, r4
 801151a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801151c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801151e:	69e3      	ldr	r3, [r4, #28]
 8011520:	2b01      	cmp	r3, #1
 8011522:	d1ed      	bne.n	8011500 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011524:	69a3      	ldr	r3, [r4, #24]
 8011526:	199b      	adds	r3, r3, r6
			if( xReloadTime > xNextExpireTime )
 8011528:	429e      	cmp	r6, r3
 801152a:	d207      	bcs.n	801153c <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801152c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801152e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011530:	4b0b      	ldr	r3, [pc, #44]	; (8011560 <prvSwitchTimerLists+0x64>)
 8011532:	6818      	ldr	r0, [r3, #0]
 8011534:	0029      	movs	r1, r5
 8011536:	f7fe fc5b 	bl	800fdf0 <vListInsert>
 801153a:	e7e1      	b.n	8011500 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801153c:	2300      	movs	r3, #0
 801153e:	9300      	str	r3, [sp, #0]
 8011540:	0032      	movs	r2, r6
 8011542:	2100      	movs	r1, #0
 8011544:	0020      	movs	r0, r4
 8011546:	f7ff ffad 	bl	80114a4 <xTimerGenericCommand>
				configASSERT( xResult );
 801154a:	2800      	cmp	r0, #0
 801154c:	d1d8      	bne.n	8011500 <prvSwitchTimerLists+0x4>
 801154e:	b672      	cpsid	i
 8011550:	e7fe      	b.n	8011550 <prvSwitchTimerLists+0x54>
	pxCurrentTimerList = pxOverflowTimerList;
 8011552:	4a04      	ldr	r2, [pc, #16]	; (8011564 <prvSwitchTimerLists+0x68>)
 8011554:	4902      	ldr	r1, [pc, #8]	; (8011560 <prvSwitchTimerLists+0x64>)
 8011556:	6810      	ldr	r0, [r2, #0]
 8011558:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801155a:	6013      	str	r3, [r2, #0]
}
 801155c:	b002      	add	sp, #8
 801155e:	bd70      	pop	{r4, r5, r6, pc}
 8011560:	20002260 	.word	0x20002260
 8011564:	20002264 	.word	0x20002264

08011568 <prvSampleTimeNow>:
{
 8011568:	b570      	push	{r4, r5, r6, lr}
 801156a:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
 801156c:	f7ff fa08 	bl	8010980 <xTaskGetTickCount>
 8011570:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8011572:	4b07      	ldr	r3, [pc, #28]	; (8011590 <prvSampleTimeNow+0x28>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	4283      	cmp	r3, r0
 8011578:	d805      	bhi.n	8011586 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801157a:	2300      	movs	r3, #0
 801157c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801157e:	4b04      	ldr	r3, [pc, #16]	; (8011590 <prvSampleTimeNow+0x28>)
 8011580:	601c      	str	r4, [r3, #0]
}
 8011582:	0020      	movs	r0, r4
 8011584:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
 8011586:	f7ff ffb9 	bl	80114fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801158a:	2301      	movs	r3, #1
 801158c:	602b      	str	r3, [r5, #0]
 801158e:	e7f6      	b.n	801157e <prvSampleTimeNow+0x16>
 8011590:	20002290 	.word	0x20002290

08011594 <prvProcessExpiredTimer>:
{
 8011594:	b570      	push	{r4, r5, r6, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	0005      	movs	r5, r0
 801159a:	000e      	movs	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801159c:	4b11      	ldr	r3, [pc, #68]	; (80115e4 <prvProcessExpiredTimer+0x50>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80115a4:	1d20      	adds	r0, r4, #4
 80115a6:	f7fe fc3b 	bl	800fe20 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80115aa:	69e3      	ldr	r3, [r4, #28]
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	d004      	beq.n	80115ba <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80115b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115b2:	0020      	movs	r0, r4
 80115b4:	4798      	blx	r3
}
 80115b6:	b002      	add	sp, #8
 80115b8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80115ba:	69a3      	ldr	r3, [r4, #24]
 80115bc:	1959      	adds	r1, r3, r5
 80115be:	002b      	movs	r3, r5
 80115c0:	0032      	movs	r2, r6
 80115c2:	0020      	movs	r0, r4
 80115c4:	f7ff fed4 	bl	8011370 <prvInsertTimerInActiveList>
 80115c8:	2801      	cmp	r0, #1
 80115ca:	d1f1      	bne.n	80115b0 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80115cc:	2300      	movs	r3, #0
 80115ce:	9300      	str	r3, [sp, #0]
 80115d0:	002a      	movs	r2, r5
 80115d2:	2100      	movs	r1, #0
 80115d4:	0020      	movs	r0, r4
 80115d6:	f7ff ff65 	bl	80114a4 <xTimerGenericCommand>
			configASSERT( xResult );
 80115da:	2800      	cmp	r0, #0
 80115dc:	d1e8      	bne.n	80115b0 <prvProcessExpiredTimer+0x1c>
 80115de:	b672      	cpsid	i
 80115e0:	e7fe      	b.n	80115e0 <prvProcessExpiredTimer+0x4c>
 80115e2:	46c0      	nop			; (mov r8, r8)
 80115e4:	20002260 	.word	0x20002260

080115e8 <prvProcessTimerOrBlockTask>:
{
 80115e8:	b570      	push	{r4, r5, r6, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	0004      	movs	r4, r0
 80115ee:	000e      	movs	r6, r1
	vTaskSuspendAll();
 80115f0:	f7ff f9be 	bl	8010970 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80115f4:	a801      	add	r0, sp, #4
 80115f6:	f7ff ffb7 	bl	8011568 <prvSampleTimeNow>
 80115fa:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80115fc:	9b01      	ldr	r3, [sp, #4]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d118      	bne.n	8011634 <prvProcessTimerOrBlockTask+0x4c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011602:	2e00      	cmp	r6, #0
 8011604:	d101      	bne.n	801160a <prvProcessTimerOrBlockTask+0x22>
 8011606:	42a0      	cmp	r0, r4
 8011608:	d20a      	bcs.n	8011620 <prvProcessTimerOrBlockTask+0x38>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 801160a:	1b61      	subs	r1, r4, r5
 801160c:	4b0b      	ldr	r3, [pc, #44]	; (801163c <prvProcessTimerOrBlockTask+0x54>)
 801160e:	6818      	ldr	r0, [r3, #0]
 8011610:	f7fe ff42 	bl	8010498 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011614:	f7ff fa4a 	bl	8010aac <xTaskResumeAll>
 8011618:	2800      	cmp	r0, #0
 801161a:	d008      	beq.n	801162e <prvProcessTimerOrBlockTask+0x46>
}
 801161c:	b002      	add	sp, #8
 801161e:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 8011620:	f7ff fa44 	bl	8010aac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011624:	0029      	movs	r1, r5
 8011626:	0020      	movs	r0, r4
 8011628:	f7ff ffb4 	bl	8011594 <prvProcessExpiredTimer>
 801162c:	e7f6      	b.n	801161c <prvProcessTimerOrBlockTask+0x34>
					portYIELD_WITHIN_API();
 801162e:	f000 f8d9 	bl	80117e4 <vPortYield>
 8011632:	e7f3      	b.n	801161c <prvProcessTimerOrBlockTask+0x34>
			( void ) xTaskResumeAll();
 8011634:	f7ff fa3a 	bl	8010aac <xTaskResumeAll>
}
 8011638:	e7f0      	b.n	801161c <prvProcessTimerOrBlockTask+0x34>
 801163a:	46c0      	nop			; (mov r8, r8)
 801163c:	20002294 	.word	0x20002294

08011640 <prvProcessReceivedCommands>:
{
 8011640:	b510      	push	{r4, lr}
 8011642:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011644:	e002      	b.n	801164c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011646:	9b04      	ldr	r3, [sp, #16]
 8011648:	2b00      	cmp	r3, #0
 801164a:	da10      	bge.n	801166e <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801164c:	4b2a      	ldr	r3, [pc, #168]	; (80116f8 <prvProcessReceivedCommands+0xb8>)
 801164e:	6818      	ldr	r0, [r3, #0]
 8011650:	2300      	movs	r3, #0
 8011652:	2200      	movs	r2, #0
 8011654:	a904      	add	r1, sp, #16
 8011656:	f7fe fe2b 	bl	80102b0 <xQueueGenericReceive>
 801165a:	2800      	cmp	r0, #0
 801165c:	d04a      	beq.n	80116f4 <prvProcessReceivedCommands+0xb4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801165e:	9b04      	ldr	r3, [sp, #16]
 8011660:	2b00      	cmp	r3, #0
 8011662:	daf0      	bge.n	8011646 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011664:	9b05      	ldr	r3, [sp, #20]
 8011666:	9907      	ldr	r1, [sp, #28]
 8011668:	9806      	ldr	r0, [sp, #24]
 801166a:	4798      	blx	r3
 801166c:	e7eb      	b.n	8011646 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801166e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8011670:	6963      	ldr	r3, [r4, #20]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d002      	beq.n	801167c <prvProcessReceivedCommands+0x3c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011676:	1d20      	adds	r0, r4, #4
 8011678:	f7fe fbd2 	bl	800fe20 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801167c:	a803      	add	r0, sp, #12
 801167e:	f7ff ff73 	bl	8011568 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8011682:	9b04      	ldr	r3, [sp, #16]
 8011684:	2b09      	cmp	r3, #9
 8011686:	d8e1      	bhi.n	801164c <prvProcessReceivedCommands+0xc>
 8011688:	009b      	lsls	r3, r3, #2
 801168a:	491c      	ldr	r1, [pc, #112]	; (80116fc <prvProcessReceivedCommands+0xbc>)
 801168c:	58cb      	ldr	r3, [r1, r3]
 801168e:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8011690:	9b05      	ldr	r3, [sp, #20]
 8011692:	69a2      	ldr	r2, [r4, #24]
 8011694:	4694      	mov	ip, r2
 8011696:	4463      	add	r3, ip
 8011698:	0019      	movs	r1, r3
 801169a:	9b05      	ldr	r3, [sp, #20]
 801169c:	0002      	movs	r2, r0
 801169e:	0020      	movs	r0, r4
 80116a0:	f7ff fe66 	bl	8011370 <prvInsertTimerInActiveList>
 80116a4:	2801      	cmp	r0, #1
 80116a6:	d1d1      	bne.n	801164c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80116a8:	0020      	movs	r0, r4
 80116aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116ac:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80116ae:	69e3      	ldr	r3, [r4, #28]
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	d1cb      	bne.n	801164c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80116b4:	9b05      	ldr	r3, [sp, #20]
 80116b6:	69a1      	ldr	r1, [r4, #24]
 80116b8:	468c      	mov	ip, r1
 80116ba:	4463      	add	r3, ip
 80116bc:	001a      	movs	r2, r3
 80116be:	2300      	movs	r3, #0
 80116c0:	9300      	str	r3, [sp, #0]
 80116c2:	2100      	movs	r1, #0
 80116c4:	0020      	movs	r0, r4
 80116c6:	f7ff feed 	bl	80114a4 <xTimerGenericCommand>
							configASSERT( xResult );
 80116ca:	2800      	cmp	r0, #0
 80116cc:	d1be      	bne.n	801164c <prvProcessReceivedCommands+0xc>
 80116ce:	b672      	cpsid	i
 80116d0:	e7fe      	b.n	80116d0 <prvProcessReceivedCommands+0x90>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80116d2:	9905      	ldr	r1, [sp, #20]
 80116d4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80116d6:	2900      	cmp	r1, #0
 80116d8:	d006      	beq.n	80116e8 <prvProcessReceivedCommands+0xa8>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80116da:	1809      	adds	r1, r1, r0
 80116dc:	0003      	movs	r3, r0
 80116de:	0002      	movs	r2, r0
 80116e0:	0020      	movs	r0, r4
 80116e2:	f7ff fe45 	bl	8011370 <prvInsertTimerInActiveList>
					break;
 80116e6:	e7b1      	b.n	801164c <prvProcessReceivedCommands+0xc>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80116e8:	b672      	cpsid	i
 80116ea:	e7fe      	b.n	80116ea <prvProcessReceivedCommands+0xaa>
					vPortFree( pxTimer );
 80116ec:	0020      	movs	r0, r4
 80116ee:	f000 f9b1 	bl	8011a54 <vPortFree>
					break;
 80116f2:	e7ab      	b.n	801164c <prvProcessReceivedCommands+0xc>
}
 80116f4:	b008      	add	sp, #32
 80116f6:	bd10      	pop	{r4, pc}
 80116f8:	20002294 	.word	0x20002294
 80116fc:	0801d17c 	.word	0x0801d17c

08011700 <prvTimerTask>:
{
 8011700:	b500      	push	{lr}
 8011702:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011704:	a801      	add	r0, sp, #4
 8011706:	f7ff fe23 	bl	8011350 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801170a:	9901      	ldr	r1, [sp, #4]
 801170c:	f7ff ff6c 	bl	80115e8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8011710:	f7ff ff96 	bl	8011640 <prvProcessReceivedCommands>
 8011714:	e7f6      	b.n	8011704 <prvTimerTask+0x4>

08011716 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011716:	b510      	push	{r4, lr}
 8011718:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 801171a:	d101      	bne.n	8011720 <pvTimerGetTimerID+0xa>
 801171c:	b672      	cpsid	i
 801171e:	e7fe      	b.n	801171e <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 8011720:	f000 f86c 	bl	80117fc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011724:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8011726:	f000 f875 	bl	8011814 <vPortExitCritical>

	return pvReturn;
}
 801172a:	0020      	movs	r0, r4
 801172c:	bd10      	pop	{r4, pc}
	...

08011730 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011730:	4b03      	ldr	r3, [pc, #12]	; (8011740 <prvTaskExitError+0x10>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	3301      	adds	r3, #1
 8011736:	d001      	beq.n	801173c <prvTaskExitError+0xc>
 8011738:	b672      	cpsid	i
 801173a:	e7fe      	b.n	801173a <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 801173c:	b672      	cpsid	i
 801173e:	e7fe      	b.n	801173e <prvTaskExitError+0xe>
 8011740:	200000cc 	.word	0x200000cc

08011744 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8011744:	4a06      	ldr	r2, [pc, #24]	; (8011760 <pxCurrentTCBConst2>)
 8011746:	6813      	ldr	r3, [r2, #0]
 8011748:	6818      	ldr	r0, [r3, #0]
 801174a:	3020      	adds	r0, #32
 801174c:	f380 8809 	msr	PSP, r0
 8011750:	2002      	movs	r0, #2
 8011752:	f380 8814 	msr	CONTROL, r0
 8011756:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8011758:	46ae      	mov	lr, r5
 801175a:	b662      	cpsie	i
 801175c:	bd00      	pop	{pc}
 801175e:	46c0      	nop			; (mov r8, r8)

08011760 <pxCurrentTCBConst2>:
 8011760:	20002138 	.word	0x20002138

08011764 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8011764:	b510      	push	{r4, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011766:	4b06      	ldr	r3, [pc, #24]	; (8011780 <prvSetupTimerInterrupt+0x1c>)
 8011768:	6818      	ldr	r0, [r3, #0]
 801176a:	21fa      	movs	r1, #250	; 0xfa
 801176c:	0089      	lsls	r1, r1, #2
 801176e:	f7ee fcef 	bl	8000150 <__udivsi3>
 8011772:	3801      	subs	r0, #1
 8011774:	4b03      	ldr	r3, [pc, #12]	; (8011784 <prvSetupTimerInterrupt+0x20>)
 8011776:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8011778:	4b03      	ldr	r3, [pc, #12]	; (8011788 <prvSetupTimerInterrupt+0x24>)
 801177a:	2207      	movs	r2, #7
 801177c:	601a      	str	r2, [r3, #0]
}
 801177e:	bd10      	pop	{r4, pc}
 8011780:	200000b8 	.word	0x200000b8
 8011784:	e000e014 	.word	0xe000e014
 8011788:	e000e010 	.word	0xe000e010

0801178c <pxPortInitialiseStack>:
{
 801178c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801178e:	1f03      	subs	r3, r0, #4
 8011790:	2480      	movs	r4, #128	; 0x80
 8011792:	0464      	lsls	r4, r4, #17
 8011794:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8011796:	3b04      	subs	r3, #4
 8011798:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801179a:	3b04      	subs	r3, #4
 801179c:	4902      	ldr	r1, [pc, #8]	; (80117a8 <pxPortInitialiseStack+0x1c>)
 801179e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80117a0:	3b14      	subs	r3, #20
 80117a2:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80117a4:	3840      	subs	r0, #64	; 0x40
}
 80117a6:	bd10      	pop	{r4, pc}
 80117a8:	08011731 	.word	0x08011731

080117ac <SVC_Handler>:
}
 80117ac:	4770      	bx	lr
	...

080117b0 <xPortStartScheduler>:
{
 80117b0:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80117b2:	4b0a      	ldr	r3, [pc, #40]	; (80117dc <xPortStartScheduler+0x2c>)
 80117b4:	6819      	ldr	r1, [r3, #0]
 80117b6:	22ff      	movs	r2, #255	; 0xff
 80117b8:	0412      	lsls	r2, r2, #16
 80117ba:	430a      	orrs	r2, r1
 80117bc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80117be:	6819      	ldr	r1, [r3, #0]
 80117c0:	22ff      	movs	r2, #255	; 0xff
 80117c2:	0612      	lsls	r2, r2, #24
 80117c4:	430a      	orrs	r2, r1
 80117c6:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 80117c8:	f7ff ffcc 	bl	8011764 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80117cc:	4b04      	ldr	r3, [pc, #16]	; (80117e0 <xPortStartScheduler+0x30>)
 80117ce:	2200      	movs	r2, #0
 80117d0:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 80117d2:	f7ff ffb7 	bl	8011744 <vPortStartFirstTask>
	prvTaskExitError();
 80117d6:	f7ff ffab 	bl	8011730 <prvTaskExitError>
 80117da:	46c0      	nop			; (mov r8, r8)
 80117dc:	e000ed20 	.word	0xe000ed20
 80117e0:	200000cc 	.word	0x200000cc

080117e4 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80117e4:	4b04      	ldr	r3, [pc, #16]	; (80117f8 <vPortYield+0x14>)
 80117e6:	2280      	movs	r2, #128	; 0x80
 80117e8:	0552      	lsls	r2, r2, #21
 80117ea:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80117ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80117f0:	f3bf 8f6f 	isb	sy
}
 80117f4:	4770      	bx	lr
 80117f6:	46c0      	nop			; (mov r8, r8)
 80117f8:	e000ed04 	.word	0xe000ed04

080117fc <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 80117fc:	b672      	cpsid	i
    uxCriticalNesting++;
 80117fe:	4a04      	ldr	r2, [pc, #16]	; (8011810 <vPortEnterCritical+0x14>)
 8011800:	6813      	ldr	r3, [r2, #0]
 8011802:	3301      	adds	r3, #1
 8011804:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8011806:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801180a:	f3bf 8f6f 	isb	sy
}
 801180e:	4770      	bx	lr
 8011810:	200000cc 	.word	0x200000cc

08011814 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8011814:	4b06      	ldr	r3, [pc, #24]	; (8011830 <vPortExitCritical+0x1c>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d101      	bne.n	8011820 <vPortExitCritical+0xc>
 801181c:	b672      	cpsid	i
 801181e:	e7fe      	b.n	801181e <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8011820:	3b01      	subs	r3, #1
 8011822:	4a03      	ldr	r2, [pc, #12]	; (8011830 <vPortExitCritical+0x1c>)
 8011824:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8011826:	2b00      	cmp	r3, #0
 8011828:	d100      	bne.n	801182c <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 801182a:	b662      	cpsie	i
}
 801182c:	4770      	bx	lr
 801182e:	46c0      	nop			; (mov r8, r8)
 8011830:	200000cc 	.word	0x200000cc

08011834 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8011834:	f3ef 8010 	mrs	r0, PRIMASK
 8011838:	b672      	cpsid	i
 801183a:	4770      	bx	lr
}
 801183c:	2000      	movs	r0, #0

0801183e <vClearInterruptMaskFromISR>:
	__asm volatile(
 801183e:	f380 8810 	msr	PRIMASK, r0
 8011842:	4770      	bx	lr

08011844 <PendSV_Handler>:
	__asm volatile
 8011844:	f3ef 8009 	mrs	r0, PSP
 8011848:	4b0e      	ldr	r3, [pc, #56]	; (8011884 <pxCurrentTCBConst>)
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	3820      	subs	r0, #32
 801184e:	6010      	str	r0, [r2, #0]
 8011850:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011852:	4644      	mov	r4, r8
 8011854:	464d      	mov	r5, r9
 8011856:	4656      	mov	r6, sl
 8011858:	465f      	mov	r7, fp
 801185a:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801185c:	b508      	push	{r3, lr}
 801185e:	b672      	cpsid	i
 8011860:	f7ff fa40 	bl	8010ce4 <vTaskSwitchContext>
 8011864:	b662      	cpsie	i
 8011866:	bc0c      	pop	{r2, r3}
 8011868:	6811      	ldr	r1, [r2, #0]
 801186a:	6808      	ldr	r0, [r1, #0]
 801186c:	3010      	adds	r0, #16
 801186e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011870:	46a0      	mov	r8, r4
 8011872:	46a9      	mov	r9, r5
 8011874:	46b2      	mov	sl, r6
 8011876:	46bb      	mov	fp, r7
 8011878:	f380 8809 	msr	PSP, r0
 801187c:	3820      	subs	r0, #32
 801187e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011880:	4718      	bx	r3
 8011882:	46c0      	nop			; (mov r8, r8)

08011884 <pxCurrentTCBConst>:
 8011884:	20002138 	.word	0x20002138

08011888 <xPortSysTickHandler>:
{
 8011888:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801188a:	f7ff ffd3 	bl	8011834 <ulSetInterruptMaskFromISR>
 801188e:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8011890:	f7ff f882 	bl	8010998 <xTaskIncrementTick>
 8011894:	2800      	cmp	r0, #0
 8011896:	d003      	beq.n	80118a0 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8011898:	4b03      	ldr	r3, [pc, #12]	; (80118a8 <xPortSysTickHandler+0x20>)
 801189a:	2280      	movs	r2, #128	; 0x80
 801189c:	0552      	lsls	r2, r2, #21
 801189e:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80118a0:	0020      	movs	r0, r4
 80118a2:	f7ff ffcc 	bl	801183e <vClearInterruptMaskFromISR>
}
 80118a6:	bd10      	pop	{r4, pc}
 80118a8:	e000ed04 	.word	0xe000ed04

080118ac <prvHeapInit>:
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 80118ac:	4a11      	ldr	r2, [pc, #68]	; (80118f4 <prvHeapInit+0x48>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80118ae:	0753      	lsls	r3, r2, #29
 80118b0:	d01e      	beq.n	80118f0 <prvHeapInit+0x44>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 80118b2:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80118b4:	2307      	movs	r3, #7
 80118b6:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 80118b8:	4b0f      	ldr	r3, [pc, #60]	; (80118f8 <prvHeapInit+0x4c>)
 80118ba:	1a5b      	subs	r3, r3, r1
 80118bc:	189b      	adds	r3, r3, r2
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80118be:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80118c0:	480e      	ldr	r0, [pc, #56]	; (80118fc <prvHeapInit+0x50>)
 80118c2:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80118c4:	2100      	movs	r1, #0
 80118c6:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 80118c8:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 80118ca:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80118cc:	2007      	movs	r0, #7
 80118ce:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 80118d0:	480b      	ldr	r0, [pc, #44]	; (8011900 <prvHeapInit+0x54>)
 80118d2:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80118d4:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80118d6:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80118d8:	1a99      	subs	r1, r3, r2
 80118da:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80118dc:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80118de:	4b09      	ldr	r3, [pc, #36]	; (8011904 <prvHeapInit+0x58>)
 80118e0:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80118e2:	4b09      	ldr	r3, [pc, #36]	; (8011908 <prvHeapInit+0x5c>)
 80118e4:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80118e6:	4b09      	ldr	r3, [pc, #36]	; (801190c <prvHeapInit+0x60>)
 80118e8:	2280      	movs	r2, #128	; 0x80
 80118ea:	0612      	lsls	r2, r2, #24
 80118ec:	601a      	str	r2, [r3, #0]
}
 80118ee:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80118f0:	4b01      	ldr	r3, [pc, #4]	; (80118f8 <prvHeapInit+0x4c>)
 80118f2:	e7e5      	b.n	80118c0 <prvHeapInit+0x14>
 80118f4:	2000229c 	.word	0x2000229c
 80118f8:	00004a38 	.word	0x00004a38
 80118fc:	20006ce0 	.word	0x20006ce0
 8011900:	20002298 	.word	0x20002298
 8011904:	20006cdc 	.word	0x20006cdc
 8011908:	20006cd8 	.word	0x20006cd8
 801190c:	20006cd4 	.word	0x20006cd4

08011910 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011910:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011912:	4b12      	ldr	r3, [pc, #72]	; (801195c <prvInsertBlockIntoFreeList+0x4c>)
 8011914:	681a      	ldr	r2, [r3, #0]
 8011916:	4282      	cmp	r2, r0
 8011918:	d319      	bcc.n	801194e <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801191a:	6859      	ldr	r1, [r3, #4]
 801191c:	185c      	adds	r4, r3, r1
 801191e:	4284      	cmp	r4, r0
 8011920:	d103      	bne.n	801192a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011922:	6840      	ldr	r0, [r0, #4]
 8011924:	1809      	adds	r1, r1, r0
 8011926:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011928:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801192a:	6841      	ldr	r1, [r0, #4]
 801192c:	1844      	adds	r4, r0, r1
 801192e:	42a2      	cmp	r2, r4
 8011930:	d111      	bne.n	8011956 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011932:	4c0b      	ldr	r4, [pc, #44]	; (8011960 <prvInsertBlockIntoFreeList+0x50>)
 8011934:	6824      	ldr	r4, [r4, #0]
 8011936:	42a2      	cmp	r2, r4
 8011938:	d00b      	beq.n	8011952 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801193a:	6852      	ldr	r2, [r2, #4]
 801193c:	1889      	adds	r1, r1, r2
 801193e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	6812      	ldr	r2, [r2, #0]
 8011944:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011946:	4298      	cmp	r0, r3
 8011948:	d000      	beq.n	801194c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801194a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801194c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801194e:	0013      	movs	r3, r2
 8011950:	e7e0      	b.n	8011914 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011952:	6004      	str	r4, [r0, #0]
 8011954:	e7f7      	b.n	8011946 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011956:	6002      	str	r2, [r0, #0]
 8011958:	e7f5      	b.n	8011946 <prvInsertBlockIntoFreeList+0x36>
 801195a:	46c0      	nop			; (mov r8, r8)
 801195c:	20006ce0 	.word	0x20006ce0
 8011960:	20002298 	.word	0x20002298

08011964 <pvPortMalloc>:
{
 8011964:	b570      	push	{r4, r5, r6, lr}
 8011966:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8011968:	f7ff f802 	bl	8010970 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801196c:	4b34      	ldr	r3, [pc, #208]	; (8011a40 <pvPortMalloc+0xdc>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00c      	beq.n	801198e <pvPortMalloc+0x2a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011974:	4b33      	ldr	r3, [pc, #204]	; (8011a44 <pvPortMalloc+0xe0>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	4223      	tst	r3, r4
 801197a:	d00b      	beq.n	8011994 <pvPortMalloc+0x30>
	( void ) xTaskResumeAll();
 801197c:	f7ff f896 	bl	8010aac <xTaskResumeAll>
void *pvReturn = NULL;
 8011980:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 8011982:	f7fd fb93 	bl	800f0ac <vApplicationMallocFailedHook>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011986:	0773      	lsls	r3, r6, #29
 8011988:	d058      	beq.n	8011a3c <pvPortMalloc+0xd8>
 801198a:	b672      	cpsid	i
 801198c:	e7fe      	b.n	801198c <pvPortMalloc+0x28>
			prvHeapInit();
 801198e:	f7ff ff8d 	bl	80118ac <prvHeapInit>
 8011992:	e7ef      	b.n	8011974 <pvPortMalloc+0x10>
			if( xWantedSize > 0 )
 8011994:	2c00      	cmp	r4, #0
 8011996:	d009      	beq.n	80119ac <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 8011998:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801199a:	0763      	lsls	r3, r4, #29
 801199c:	d006      	beq.n	80119ac <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801199e:	2307      	movs	r3, #7
 80119a0:	439c      	bics	r4, r3
 80119a2:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80119a4:	421c      	tst	r4, r3
 80119a6:	d001      	beq.n	80119ac <pvPortMalloc+0x48>
 80119a8:	b672      	cpsid	i
 80119aa:	e7fe      	b.n	80119aa <pvPortMalloc+0x46>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80119ac:	2c00      	cmp	r4, #0
 80119ae:	d006      	beq.n	80119be <pvPortMalloc+0x5a>
 80119b0:	4b25      	ldr	r3, [pc, #148]	; (8011a48 <pvPortMalloc+0xe4>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	42a3      	cmp	r3, r4
 80119b6:	d306      	bcc.n	80119c6 <pvPortMalloc+0x62>
				pxBlock = xStart.pxNextFreeBlock;
 80119b8:	4b24      	ldr	r3, [pc, #144]	; (8011a4c <pvPortMalloc+0xe8>)
 80119ba:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119bc:	e009      	b.n	80119d2 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 80119be:	f7ff f875 	bl	8010aac <xTaskResumeAll>
void *pvReturn = NULL;
 80119c2:	2600      	movs	r6, #0
 80119c4:	e7dd      	b.n	8011982 <pvPortMalloc+0x1e>
	( void ) xTaskResumeAll();
 80119c6:	f7ff f871 	bl	8010aac <xTaskResumeAll>
void *pvReturn = NULL;
 80119ca:	2600      	movs	r6, #0
 80119cc:	e7d9      	b.n	8011982 <pvPortMalloc+0x1e>
					pxPreviousBlock = pxBlock;
 80119ce:	002b      	movs	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80119d0:	0015      	movs	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119d2:	686a      	ldr	r2, [r5, #4]
 80119d4:	42a2      	cmp	r2, r4
 80119d6:	d202      	bcs.n	80119de <pvPortMalloc+0x7a>
 80119d8:	682a      	ldr	r2, [r5, #0]
 80119da:	2a00      	cmp	r2, #0
 80119dc:	d1f7      	bne.n	80119ce <pvPortMalloc+0x6a>
				if( pxBlock != pxEnd )
 80119de:	4a18      	ldr	r2, [pc, #96]	; (8011a40 <pvPortMalloc+0xdc>)
 80119e0:	6812      	ldr	r2, [r2, #0]
 80119e2:	42aa      	cmp	r2, r5
 80119e4:	d00c      	beq.n	8011a00 <pvPortMalloc+0x9c>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80119e6:	681e      	ldr	r6, [r3, #0]
 80119e8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80119ea:	682a      	ldr	r2, [r5, #0]
 80119ec:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80119ee:	686b      	ldr	r3, [r5, #4]
 80119f0:	1b1b      	subs	r3, r3, r4
 80119f2:	2b10      	cmp	r3, #16
 80119f4:	d90c      	bls.n	8011a10 <pvPortMalloc+0xac>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80119f6:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80119f8:	0742      	lsls	r2, r0, #29
 80119fa:	d005      	beq.n	8011a08 <pvPortMalloc+0xa4>
 80119fc:	b672      	cpsid	i
 80119fe:	e7fe      	b.n	80119fe <pvPortMalloc+0x9a>
	( void ) xTaskResumeAll();
 8011a00:	f7ff f854 	bl	8010aac <xTaskResumeAll>
void *pvReturn = NULL;
 8011a04:	2600      	movs	r6, #0
 8011a06:	e7bc      	b.n	8011982 <pvPortMalloc+0x1e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011a08:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a0a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8011a0c:	f7ff ff80 	bl	8011910 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a10:	686a      	ldr	r2, [r5, #4]
 8011a12:	490d      	ldr	r1, [pc, #52]	; (8011a48 <pvPortMalloc+0xe4>)
 8011a14:	680b      	ldr	r3, [r1, #0]
 8011a16:	1a9b      	subs	r3, r3, r2
 8011a18:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a1a:	490d      	ldr	r1, [pc, #52]	; (8011a50 <pvPortMalloc+0xec>)
 8011a1c:	6809      	ldr	r1, [r1, #0]
 8011a1e:	428b      	cmp	r3, r1
 8011a20:	d201      	bcs.n	8011a26 <pvPortMalloc+0xc2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a22:	490b      	ldr	r1, [pc, #44]	; (8011a50 <pvPortMalloc+0xec>)
 8011a24:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a26:	4b07      	ldr	r3, [pc, #28]	; (8011a44 <pvPortMalloc+0xe0>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8011a32:	f7ff f83b 	bl	8010aac <xTaskResumeAll>
		if( pvReturn == NULL )
 8011a36:	2e00      	cmp	r6, #0
 8011a38:	d1a5      	bne.n	8011986 <pvPortMalloc+0x22>
 8011a3a:	e7a2      	b.n	8011982 <pvPortMalloc+0x1e>
}
 8011a3c:	0030      	movs	r0, r6
 8011a3e:	bd70      	pop	{r4, r5, r6, pc}
 8011a40:	20002298 	.word	0x20002298
 8011a44:	20006cd4 	.word	0x20006cd4
 8011a48:	20006cd8 	.word	0x20006cd8
 8011a4c:	20006ce0 	.word	0x20006ce0
 8011a50:	20006cdc 	.word	0x20006cdc

08011a54 <vPortFree>:
{
 8011a54:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d020      	beq.n	8011a9c <vPortFree+0x48>
		puc -= xHeapStructSize;
 8011a5a:	0005      	movs	r5, r0
 8011a5c:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011a5e:	686b      	ldr	r3, [r5, #4]
 8011a60:	4a0f      	ldr	r2, [pc, #60]	; (8011aa0 <vPortFree+0x4c>)
 8011a62:	6812      	ldr	r2, [r2, #0]
 8011a64:	421a      	tst	r2, r3
 8011a66:	d101      	bne.n	8011a6c <vPortFree+0x18>
 8011a68:	b672      	cpsid	i
 8011a6a:	e7fe      	b.n	8011a6a <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011a6c:	0001      	movs	r1, r0
 8011a6e:	3908      	subs	r1, #8
 8011a70:	6809      	ldr	r1, [r1, #0]
 8011a72:	2900      	cmp	r1, #0
 8011a74:	d001      	beq.n	8011a7a <vPortFree+0x26>
 8011a76:	b672      	cpsid	i
 8011a78:	e7fe      	b.n	8011a78 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011a7a:	3808      	subs	r0, #8
 8011a7c:	0004      	movs	r4, r0
 8011a7e:	4393      	bics	r3, r2
 8011a80:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8011a82:	f7fe ff75 	bl	8010970 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011a86:	6863      	ldr	r3, [r4, #4]
 8011a88:	4a06      	ldr	r2, [pc, #24]	; (8011aa4 <vPortFree+0x50>)
 8011a8a:	6811      	ldr	r1, [r2, #0]
 8011a8c:	468c      	mov	ip, r1
 8011a8e:	4463      	add	r3, ip
 8011a90:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011a92:	0028      	movs	r0, r5
 8011a94:	f7ff ff3c 	bl	8011910 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8011a98:	f7ff f808 	bl	8010aac <xTaskResumeAll>
}
 8011a9c:	bd70      	pop	{r4, r5, r6, pc}
 8011a9e:	46c0      	nop			; (mov r8, r8)
 8011aa0:	20006cd4 	.word	0x20006cd4
 8011aa4:	20006cd8 	.word	0x20006cd8

08011aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011aa8:	b510      	push	{r4, lr}
 8011aaa:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8011aac:	f002 f85a 	bl	8013b64 <HAL_RCC_GetHCLKFreq>
 8011ab0:	21fa      	movs	r1, #250	; 0xfa
 8011ab2:	0089      	lsls	r1, r1, #2
 8011ab4:	f7ee fb4c 	bl	8000150 <__udivsi3>
 8011ab8:	f000 fba6 	bl	8012208 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8011abc:	2001      	movs	r0, #1
 8011abe:	2200      	movs	r2, #0
 8011ac0:	0021      	movs	r1, r4
 8011ac2:	4240      	negs	r0, r0
 8011ac4:	f000 fb5c 	bl	8012180 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8011ac8:	2000      	movs	r0, #0
 8011aca:	bd10      	pop	{r4, pc}

08011acc <HAL_Init>:
{
 8011acc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011ace:	4a06      	ldr	r2, [pc, #24]	; (8011ae8 <HAL_Init+0x1c>)
 8011ad0:	6813      	ldr	r3, [r2, #0]
 8011ad2:	2110      	movs	r1, #16
 8011ad4:	430b      	orrs	r3, r1
 8011ad6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8011ad8:	2000      	movs	r0, #0
 8011ada:	f7ff ffe5 	bl	8011aa8 <HAL_InitTick>
  HAL_MspInit();
 8011ade:	f001 fc22 	bl	8013326 <HAL_MspInit>
}
 8011ae2:	2000      	movs	r0, #0
 8011ae4:	bd10      	pop	{r4, pc}
 8011ae6:	46c0      	nop			; (mov r8, r8)
 8011ae8:	40022000 	.word	0x40022000

08011aec <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8011aec:	4a02      	ldr	r2, [pc, #8]	; (8011af8 <HAL_IncTick+0xc>)
 8011aee:	6813      	ldr	r3, [r2, #0]
 8011af0:	3301      	adds	r3, #1
 8011af2:	6013      	str	r3, [r2, #0]
}
 8011af4:	4770      	bx	lr
 8011af6:	46c0      	nop			; (mov r8, r8)
 8011af8:	20006ce8 	.word	0x20006ce8

08011afc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8011afc:	4b01      	ldr	r3, [pc, #4]	; (8011b04 <HAL_GetTick+0x8>)
 8011afe:	6818      	ldr	r0, [r3, #0]
}
 8011b00:	4770      	bx	lr
 8011b02:	46c0      	nop			; (mov r8, r8)
 8011b04:	20006ce8 	.word	0x20006ce8

08011b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8011b08:	b510      	push	{r4, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8011b0e:	f7ff fff5 	bl	8011afc <HAL_GetTick>
 8011b12:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8011b14:	f7ff fff2 	bl	8011afc <HAL_GetTick>
 8011b18:	1b00      	subs	r0, r0, r4
 8011b1a:	9b01      	ldr	r3, [sp, #4]
 8011b1c:	4298      	cmp	r0, r3
 8011b1e:	d3f9      	bcc.n	8011b14 <HAL_Delay+0xc>
  {
  }
}
 8011b20:	b002      	add	sp, #8
 8011b22:	bd10      	pop	{r4, pc}

08011b24 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8011b24:	4b01      	ldr	r3, [pc, #4]	; (8011b2c <HAL_GetREVID+0x8>)
 8011b26:	6818      	ldr	r0, [r3, #0]
 8011b28:	0c00      	lsrs	r0, r0, #16
}
 8011b2a:	4770      	bx	lr
 8011b2c:	40015800 	.word	0x40015800

08011b30 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8011b30:	4b02      	ldr	r3, [pc, #8]	; (8011b3c <HAL_GetDEVID+0xc>)
 8011b32:	6818      	ldr	r0, [r3, #0]
 8011b34:	0500      	lsls	r0, r0, #20
 8011b36:	0d00      	lsrs	r0, r0, #20
}
 8011b38:	4770      	bx	lr
 8011b3a:	46c0      	nop			; (mov r8, r8)
 8011b3c:	40015800 	.word	0x40015800

08011b40 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8011b40:	b570      	push	{r4, r5, r6, lr}
 8011b42:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8011b44:	6803      	ldr	r3, [r0, #0]
 8011b46:	689a      	ldr	r2, [r3, #8]
 8011b48:	0752      	lsls	r2, r2, #29
 8011b4a:	d521      	bpl.n	8011b90 <ADC_ConversionStop+0x50>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8011b4c:	689a      	ldr	r2, [r3, #8]
 8011b4e:	0752      	lsls	r2, r2, #29
 8011b50:	d506      	bpl.n	8011b60 <ADC_ConversionStop+0x20>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8011b52:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8011b54:	0792      	lsls	r2, r2, #30
 8011b56:	d403      	bmi.n	8011b60 <ADC_ConversionStop+0x20>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8011b58:	689a      	ldr	r2, [r3, #8]
 8011b5a:	2110      	movs	r1, #16
 8011b5c:	430a      	orrs	r2, r1
 8011b5e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8011b60:	f7ff ffcc 	bl	8011afc <HAL_GetTick>
 8011b64:	0005      	movs	r5, r0
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8011b66:	6823      	ldr	r3, [r4, #0]
 8011b68:	689b      	ldr	r3, [r3, #8]
 8011b6a:	075b      	lsls	r3, r3, #29
 8011b6c:	d50e      	bpl.n	8011b8c <ADC_ConversionStop+0x4c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8011b6e:	f7ff ffc5 	bl	8011afc <HAL_GetTick>
 8011b72:	1b40      	subs	r0, r0, r5
 8011b74:	2802      	cmp	r0, #2
 8011b76:	d9f6      	bls.n	8011b66 <ADC_ConversionStop+0x26>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011b78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011b7a:	2210      	movs	r2, #16
 8011b7c:	4313      	orrs	r3, r2
 8011b7e:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011b80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011b82:	3a0f      	subs	r2, #15
 8011b84:	4313      	orrs	r3, r2
 8011b86:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8011b88:	2001      	movs	r0, #1
 8011b8a:	e002      	b.n	8011b92 <ADC_ConversionStop+0x52>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8011b8c:	2000      	movs	r0, #0
 8011b8e:	e000      	b.n	8011b92 <ADC_ConversionStop+0x52>
 8011b90:	2000      	movs	r0, #0
}
 8011b92:	bd70      	pop	{r4, r5, r6, pc}

08011b94 <ADC_Disable>:
{
 8011b94:	b570      	push	{r4, r5, r6, lr}
 8011b96:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8011b98:	6802      	ldr	r2, [r0, #0]
 8011b9a:	6891      	ldr	r1, [r2, #8]
 8011b9c:	2303      	movs	r3, #3
 8011b9e:	400b      	ands	r3, r1
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d001      	beq.n	8011ba8 <ADC_Disable+0x14>
  return HAL_OK;
 8011ba4:	2000      	movs	r0, #0
}
 8011ba6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8011ba8:	6813      	ldr	r3, [r2, #0]
 8011baa:	07db      	lsls	r3, r3, #31
 8011bac:	d402      	bmi.n	8011bb4 <ADC_Disable+0x20>
 8011bae:	68d3      	ldr	r3, [r2, #12]
 8011bb0:	041b      	lsls	r3, r3, #16
 8011bb2:	d52d      	bpl.n	8011c10 <ADC_Disable+0x7c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8011bb4:	6891      	ldr	r1, [r2, #8]
 8011bb6:	2305      	movs	r3, #5
 8011bb8:	400b      	ands	r3, r1
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d009      	beq.n	8011bd2 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011bc0:	2210      	movs	r2, #16
 8011bc2:	4313      	orrs	r3, r2
 8011bc4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011bc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011bc8:	3a0f      	subs	r2, #15
 8011bca:	4313      	orrs	r3, r2
 8011bcc:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8011bce:	2001      	movs	r0, #1
 8011bd0:	e7e9      	b.n	8011ba6 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 8011bd2:	6893      	ldr	r3, [r2, #8]
 8011bd4:	2102      	movs	r1, #2
 8011bd6:	430b      	orrs	r3, r1
 8011bd8:	6093      	str	r3, [r2, #8]
 8011bda:	6823      	ldr	r3, [r4, #0]
 8011bdc:	2203      	movs	r2, #3
 8011bde:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8011be0:	f7ff ff8c 	bl	8011afc <HAL_GetTick>
 8011be4:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8011be6:	6823      	ldr	r3, [r4, #0]
 8011be8:	689b      	ldr	r3, [r3, #8]
 8011bea:	07db      	lsls	r3, r3, #31
 8011bec:	d50e      	bpl.n	8011c0c <ADC_Disable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8011bee:	f7ff ff85 	bl	8011afc <HAL_GetTick>
 8011bf2:	1b40      	subs	r0, r0, r5
 8011bf4:	2802      	cmp	r0, #2
 8011bf6:	d9f6      	bls.n	8011be6 <ADC_Disable+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011bf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011bfa:	2210      	movs	r2, #16
 8011bfc:	4313      	orrs	r3, r2
 8011bfe:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011c00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011c02:	3a0f      	subs	r2, #15
 8011c04:	4313      	orrs	r3, r2
 8011c06:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8011c08:	2001      	movs	r0, #1
 8011c0a:	e7cc      	b.n	8011ba6 <ADC_Disable+0x12>
  return HAL_OK;
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	e7ca      	b.n	8011ba6 <ADC_Disable+0x12>
 8011c10:	2000      	movs	r0, #0
 8011c12:	e7c8      	b.n	8011ba6 <ADC_Disable+0x12>

08011c14 <ADC_Enable>:
{
 8011c14:	b530      	push	{r4, r5, lr}
 8011c16:	b083      	sub	sp, #12
 8011c18:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8011c1e:	6803      	ldr	r3, [r0, #0]
 8011c20:	6899      	ldr	r1, [r3, #8]
 8011c22:	2203      	movs	r2, #3
 8011c24:	400a      	ands	r2, r1
 8011c26:	2a01      	cmp	r2, #1
 8011c28:	d00e      	beq.n	8011c48 <ADC_Enable+0x34>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8011c2a:	6899      	ldr	r1, [r3, #8]
 8011c2c:	4a20      	ldr	r2, [pc, #128]	; (8011cb0 <ADC_Enable+0x9c>)
 8011c2e:	4211      	tst	r1, r2
 8011c30:	d112      	bne.n	8011c58 <ADC_Enable+0x44>
    __HAL_ADC_ENABLE(hadc);
 8011c32:	689a      	ldr	r2, [r3, #8]
 8011c34:	2101      	movs	r1, #1
 8011c36:	430a      	orrs	r2, r1
 8011c38:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8011c3a:	4b1e      	ldr	r3, [pc, #120]	; (8011cb4 <ADC_Enable+0xa0>)
 8011c3c:	6818      	ldr	r0, [r3, #0]
 8011c3e:	491e      	ldr	r1, [pc, #120]	; (8011cb8 <ADC_Enable+0xa4>)
 8011c40:	f7ee fa86 	bl	8000150 <__udivsi3>
 8011c44:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8011c46:	e015      	b.n	8011c74 <ADC_Enable+0x60>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	07d2      	lsls	r2, r2, #31
 8011c4c:	d42d      	bmi.n	8011caa <ADC_Enable+0x96>
 8011c4e:	68da      	ldr	r2, [r3, #12]
 8011c50:	0412      	lsls	r2, r2, #16
 8011c52:	d5ea      	bpl.n	8011c2a <ADC_Enable+0x16>
  return HAL_OK;
 8011c54:	2000      	movs	r0, #0
 8011c56:	e008      	b.n	8011c6a <ADC_Enable+0x56>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011c58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011c5a:	2210      	movs	r2, #16
 8011c5c:	4313      	orrs	r3, r2
 8011c5e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011c60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011c62:	3a0f      	subs	r2, #15
 8011c64:	4313      	orrs	r3, r2
 8011c66:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8011c68:	2001      	movs	r0, #1
}
 8011c6a:	b003      	add	sp, #12
 8011c6c:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8011c6e:	9b01      	ldr	r3, [sp, #4]
 8011c70:	3b01      	subs	r3, #1
 8011c72:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8011c74:	9b01      	ldr	r3, [sp, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d1f9      	bne.n	8011c6e <ADC_Enable+0x5a>
    tickstart = HAL_GetTick();
 8011c7a:	f7ff ff3f 	bl	8011afc <HAL_GetTick>
 8011c7e:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011c80:	6823      	ldr	r3, [r4, #0]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	07db      	lsls	r3, r3, #31
 8011c86:	d40e      	bmi.n	8011ca6 <ADC_Enable+0x92>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8011c88:	f7ff ff38 	bl	8011afc <HAL_GetTick>
 8011c8c:	1b40      	subs	r0, r0, r5
 8011c8e:	2802      	cmp	r0, #2
 8011c90:	d9f6      	bls.n	8011c80 <ADC_Enable+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011c92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011c94:	2210      	movs	r2, #16
 8011c96:	4313      	orrs	r3, r2
 8011c98:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011c9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011c9c:	3a0f      	subs	r2, #15
 8011c9e:	4313      	orrs	r3, r2
 8011ca0:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8011ca2:	2001      	movs	r0, #1
 8011ca4:	e7e1      	b.n	8011c6a <ADC_Enable+0x56>
  return HAL_OK;
 8011ca6:	2000      	movs	r0, #0
 8011ca8:	e7df      	b.n	8011c6a <ADC_Enable+0x56>
 8011caa:	2000      	movs	r0, #0
 8011cac:	e7dd      	b.n	8011c6a <ADC_Enable+0x56>
 8011cae:	46c0      	nop			; (mov r8, r8)
 8011cb0:	80000017 	.word	0x80000017
 8011cb4:	200000b8 	.word	0x200000b8
 8011cb8:	000f4240 	.word	0x000f4240

08011cbc <HAL_ADC_Init>:
{
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8011cc0:	d100      	bne.n	8011cc4 <HAL_ADC_Init+0x8>
 8011cc2:	e0a7      	b.n	8011e14 <HAL_ADC_Init+0x158>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8011cc4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d07d      	beq.n	8011dc6 <HAL_ADC_Init+0x10a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8011cca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011ccc:	06db      	lsls	r3, r3, #27
 8011cce:	d500      	bpl.n	8011cd2 <HAL_ADC_Init+0x16>
 8011cd0:	e09a      	b.n	8011e08 <HAL_ADC_Init+0x14c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8011cd2:	6821      	ldr	r1, [r4, #0]
 8011cd4:	688b      	ldr	r3, [r1, #8]
 8011cd6:	2204      	movs	r2, #4
 8011cd8:	401a      	ands	r2, r3
      (tmp_hal_status == HAL_OK)                                &&
 8011cda:	d000      	beq.n	8011cde <HAL_ADC_Init+0x22>
 8011cdc:	e094      	b.n	8011e08 <HAL_ADC_Init+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 8011cde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011ce0:	484d      	ldr	r0, [pc, #308]	; (8011e18 <HAL_ADC_Init+0x15c>)
 8011ce2:	4003      	ands	r3, r0
 8011ce4:	3006      	adds	r0, #6
 8011ce6:	30ff      	adds	r0, #255	; 0xff
 8011ce8:	4303      	orrs	r3, r0
 8011cea:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8011cec:	6888      	ldr	r0, [r1, #8]
 8011cee:	2303      	movs	r3, #3
 8011cf0:	4003      	ands	r3, r0
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d06d      	beq.n	8011dd2 <HAL_ADC_Init+0x116>
      MODIFY_REG(hadc->Instance->CFGR1,
 8011cf6:	68cb      	ldr	r3, [r1, #12]
 8011cf8:	2018      	movs	r0, #24
 8011cfa:	4383      	bics	r3, r0
 8011cfc:	68a0      	ldr	r0, [r4, #8]
 8011cfe:	4303      	orrs	r3, r0
 8011d00:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8011d02:	6821      	ldr	r1, [r4, #0]
 8011d04:	690b      	ldr	r3, [r1, #16]
 8011d06:	009b      	lsls	r3, r3, #2
 8011d08:	089b      	lsrs	r3, r3, #2
 8011d0a:	6860      	ldr	r0, [r4, #4]
 8011d0c:	4303      	orrs	r3, r0
 8011d0e:	610b      	str	r3, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8011d10:	6821      	ldr	r1, [r4, #0]
 8011d12:	68cb      	ldr	r3, [r1, #12]
 8011d14:	4841      	ldr	r0, [pc, #260]	; (8011e1c <HAL_ADC_Init+0x160>)
 8011d16:	4003      	ands	r3, r0
 8011d18:	60cb      	str	r3, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8011d1a:	69a3      	ldr	r3, [r4, #24]
 8011d1c:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8011d1e:	69e1      	ldr	r1, [r4, #28]
 8011d20:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8011d22:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8011d24:	6a21      	ldr	r1, [r4, #32]
 8011d26:	0348      	lsls	r0, r1, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8011d28:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8011d2a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011d2c:	2801      	cmp	r0, #1
 8011d2e:	d057      	beq.n	8011de0 <HAL_ADC_Init+0x124>
 8011d30:	2080      	movs	r0, #128	; 0x80
 8011d32:	0140      	lsls	r0, r0, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8011d34:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8011d36:	68e0      	ldr	r0, [r4, #12]
 8011d38:	4303      	orrs	r3, r0
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8011d3a:	6920      	ldr	r0, [r4, #16]
 8011d3c:	2802      	cmp	r0, #2
 8011d3e:	d051      	beq.n	8011de4 <HAL_ADC_Init+0x128>
                 hadc->Init.DataAlign                                   |
 8011d40:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8011d42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011d44:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8011d46:	4313      	orrs	r3, r2
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8011d48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011d4a:	2a01      	cmp	r2, #1
 8011d4c:	d04c      	beq.n	8011de8 <HAL_ADC_Init+0x12c>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011d4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011d50:	21c2      	movs	r1, #194	; 0xc2
 8011d52:	31ff      	adds	r1, #255	; 0xff
 8011d54:	428a      	cmp	r2, r1
 8011d56:	d002      	beq.n	8011d5e <HAL_ADC_Init+0xa2>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8011d58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011d5a:	430a      	orrs	r2, r1
 8011d5c:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8011d5e:	6821      	ldr	r1, [r4, #0]
 8011d60:	68ca      	ldr	r2, [r1, #12]
 8011d62:	431a      	orrs	r2, r3
 8011d64:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8011d66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011d68:	2180      	movs	r1, #128	; 0x80
 8011d6a:	0549      	lsls	r1, r1, #21
 8011d6c:	428a      	cmp	r2, r1
 8011d6e:	d00d      	beq.n	8011d8c <HAL_ADC_Init+0xd0>
 8011d70:	2a01      	cmp	r2, #1
 8011d72:	d00b      	beq.n	8011d8c <HAL_ADC_Init+0xd0>
 8011d74:	2a02      	cmp	r2, #2
 8011d76:	d009      	beq.n	8011d8c <HAL_ADC_Init+0xd0>
 8011d78:	2a03      	cmp	r2, #3
 8011d7a:	d007      	beq.n	8011d8c <HAL_ADC_Init+0xd0>
 8011d7c:	2a04      	cmp	r2, #4
 8011d7e:	d005      	beq.n	8011d8c <HAL_ADC_Init+0xd0>
 8011d80:	2a05      	cmp	r2, #5
 8011d82:	d003      	beq.n	8011d8c <HAL_ADC_Init+0xd0>
 8011d84:	2a06      	cmp	r2, #6
 8011d86:	d001      	beq.n	8011d8c <HAL_ADC_Init+0xd0>
 8011d88:	2a07      	cmp	r2, #7
 8011d8a:	d10a      	bne.n	8011da2 <HAL_ADC_Init+0xe6>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8011d8c:	6820      	ldr	r0, [r4, #0]
 8011d8e:	6941      	ldr	r1, [r0, #20]
 8011d90:	2207      	movs	r2, #7
 8011d92:	4391      	bics	r1, r2
 8011d94:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8011d96:	6820      	ldr	r0, [r4, #0]
 8011d98:	6941      	ldr	r1, [r0, #20]
 8011d9a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8011d9c:	402a      	ands	r2, r5
 8011d9e:	430a      	orrs	r2, r1
 8011da0:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8011da2:	6822      	ldr	r2, [r4, #0]
 8011da4:	68d2      	ldr	r2, [r2, #12]
 8011da6:	491e      	ldr	r1, [pc, #120]	; (8011e20 <HAL_ADC_Init+0x164>)
 8011da8:	400a      	ands	r2, r1
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d022      	beq.n	8011df4 <HAL_ADC_Init+0x138>
      ADC_STATE_CLR_SET(hadc->State,
 8011dae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011db0:	2212      	movs	r2, #18
 8011db2:	4393      	bics	r3, r2
 8011db4:	3a02      	subs	r2, #2
 8011db6:	4313      	orrs	r3, r2
 8011db8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011dba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011dbc:	3a0f      	subs	r2, #15
 8011dbe:	4313      	orrs	r3, r2
 8011dc0:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8011dc2:	2001      	movs	r0, #1
 8011dc4:	e025      	b.n	8011e12 <HAL_ADC_Init+0x156>
    ADC_CLEAR_ERRORCODE(hadc);
 8011dc6:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8011dc8:	2240      	movs	r2, #64	; 0x40
 8011dca:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8011dcc:	f7f6 fe8e 	bl	8008aec <HAL_ADC_MspInit>
 8011dd0:	e77b      	b.n	8011cca <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8011dd2:	680b      	ldr	r3, [r1, #0]
 8011dd4:	07db      	lsls	r3, r3, #31
 8011dd6:	d49b      	bmi.n	8011d10 <HAL_ADC_Init+0x54>
 8011dd8:	68cb      	ldr	r3, [r1, #12]
 8011dda:	041b      	lsls	r3, r3, #16
 8011ddc:	d498      	bmi.n	8011d10 <HAL_ADC_Init+0x54>
 8011dde:	e78a      	b.n	8011cf6 <HAL_ADC_Init+0x3a>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8011de0:	0010      	movs	r0, r2
 8011de2:	e7a7      	b.n	8011d34 <HAL_ADC_Init+0x78>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8011de4:	2204      	movs	r2, #4
 8011de6:	e7ab      	b.n	8011d40 <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8011de8:	2900      	cmp	r1, #0
 8011dea:	d1b0      	bne.n	8011d4e <HAL_ADC_Init+0x92>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8011dec:	2280      	movs	r2, #128	; 0x80
 8011dee:	0252      	lsls	r2, r2, #9
 8011df0:	4313      	orrs	r3, r2
 8011df2:	e7ac      	b.n	8011d4e <HAL_ADC_Init+0x92>
      ADC_CLEAR_ERRORCODE(hadc);
 8011df4:	2300      	movs	r3, #0
 8011df6:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8011df8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011dfa:	2203      	movs	r2, #3
 8011dfc:	4393      	bics	r3, r2
 8011dfe:	3a02      	subs	r2, #2
 8011e00:	4313      	orrs	r3, r2
 8011e02:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011e04:	2000      	movs	r0, #0
 8011e06:	e004      	b.n	8011e12 <HAL_ADC_Init+0x156>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011e08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011e0a:	2210      	movs	r2, #16
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8011e10:	2001      	movs	r0, #1
}
 8011e12:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8011e14:	2001      	movs	r0, #1
 8011e16:	e7fc      	b.n	8011e12 <HAL_ADC_Init+0x156>
 8011e18:	fffffefd 	.word	0xfffffefd
 8011e1c:	fffe0219 	.word	0xfffe0219
 8011e20:	833fffe7 	.word	0x833fffe7

08011e24 <HAL_ADC_Start>:
{
 8011e24:	b510      	push	{r4, lr}
 8011e26:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011e28:	6803      	ldr	r3, [r0, #0]
 8011e2a:	689b      	ldr	r3, [r3, #8]
 8011e2c:	075b      	lsls	r3, r3, #29
 8011e2e:	d423      	bmi.n	8011e78 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8011e30:	2340      	movs	r3, #64	; 0x40
 8011e32:	5cc3      	ldrb	r3, [r0, r3]
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	d021      	beq.n	8011e7c <HAL_ADC_Start+0x58>
 8011e38:	2340      	movs	r3, #64	; 0x40
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8011e3e:	69c3      	ldr	r3, [r0, #28]
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	d114      	bne.n	8011e6e <HAL_ADC_Start+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011e44:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8011e46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011e48:	4a0d      	ldr	r2, [pc, #52]	; (8011e80 <HAL_ADC_Start+0x5c>)
 8011e4a:	401a      	ands	r2, r3
 8011e4c:	2380      	movs	r3, #128	; 0x80
 8011e4e:	005b      	lsls	r3, r3, #1
 8011e50:	4313      	orrs	r3, r2
 8011e52:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8011e54:	2300      	movs	r3, #0
 8011e56:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8011e58:	2240      	movs	r2, #64	; 0x40
 8011e5a:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	3a24      	subs	r2, #36	; 0x24
 8011e60:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8011e62:	6822      	ldr	r2, [r4, #0]
 8011e64:	6893      	ldr	r3, [r2, #8]
 8011e66:	2104      	movs	r1, #4
 8011e68:	430b      	orrs	r3, r1
 8011e6a:	6093      	str	r3, [r2, #8]
}
 8011e6c:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8011e6e:	f7ff fed1 	bl	8011c14 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8011e72:	2800      	cmp	r0, #0
 8011e74:	d0e7      	beq.n	8011e46 <HAL_ADC_Start+0x22>
 8011e76:	e7f9      	b.n	8011e6c <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 8011e78:	2002      	movs	r0, #2
 8011e7a:	e7f7      	b.n	8011e6c <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8011e7c:	2002      	movs	r0, #2
 8011e7e:	e7f5      	b.n	8011e6c <HAL_ADC_Start+0x48>
 8011e80:	fffff0fe 	.word	0xfffff0fe

08011e84 <HAL_ADC_Stop>:
{ 
 8011e84:	b510      	push	{r4, lr}
 8011e86:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8011e88:	2340      	movs	r3, #64	; 0x40
 8011e8a:	5cc3      	ldrb	r3, [r0, r3]
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d017      	beq.n	8011ec0 <HAL_ADC_Stop+0x3c>
 8011e90:	2340      	movs	r3, #64	; 0x40
 8011e92:	2201      	movs	r2, #1
 8011e94:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8011e96:	f7ff fe53 	bl	8011b40 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8011e9a:	2800      	cmp	r0, #0
 8011e9c:	d003      	beq.n	8011ea6 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8011e9e:	2340      	movs	r3, #64	; 0x40
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	54e2      	strb	r2, [r4, r3]
}
 8011ea4:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8011ea6:	0020      	movs	r0, r4
 8011ea8:	f7ff fe74 	bl	8011b94 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d1f6      	bne.n	8011e9e <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8011eb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011eb2:	4a04      	ldr	r2, [pc, #16]	; (8011ec4 <HAL_ADC_Stop+0x40>)
 8011eb4:	4013      	ands	r3, r2
 8011eb6:	3204      	adds	r2, #4
 8011eb8:	32ff      	adds	r2, #255	; 0xff
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	6463      	str	r3, [r4, #68]	; 0x44
 8011ebe:	e7ee      	b.n	8011e9e <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8011ec0:	2002      	movs	r0, #2
 8011ec2:	e7ef      	b.n	8011ea4 <HAL_ADC_Stop+0x20>
 8011ec4:	fffffefe 	.word	0xfffffefe

08011ec8 <HAL_ADC_PollForConversion>:
{
 8011ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eca:	0004      	movs	r4, r0
 8011ecc:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8011ece:	6943      	ldr	r3, [r0, #20]
 8011ed0:	2b08      	cmp	r3, #8
 8011ed2:	d026      	beq.n	8011f22 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8011ed4:	6803      	ldr	r3, [r0, #0]
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	07db      	lsls	r3, r3, #31
 8011eda:	d419      	bmi.n	8011f10 <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8011edc:	260c      	movs	r6, #12
  tickstart = HAL_GetTick();
 8011ede:	f7ff fe0d 	bl	8011afc <HAL_GetTick>
 8011ee2:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8011ee4:	6823      	ldr	r3, [r4, #0]
 8011ee6:	681a      	ldr	r2, [r3, #0]
 8011ee8:	4216      	tst	r6, r2
 8011eea:	d11c      	bne.n	8011f26 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8011eec:	1c6b      	adds	r3, r5, #1
 8011eee:	d0f9      	beq.n	8011ee4 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011ef0:	2d00      	cmp	r5, #0
 8011ef2:	d004      	beq.n	8011efe <HAL_ADC_PollForConversion+0x36>
 8011ef4:	f7ff fe02 	bl	8011afc <HAL_GetTick>
 8011ef8:	1bc0      	subs	r0, r0, r7
 8011efa:	42a8      	cmp	r0, r5
 8011efc:	d9f2      	bls.n	8011ee4 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8011efe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011f00:	2204      	movs	r2, #4
 8011f02:	4313      	orrs	r3, r2
 8011f04:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8011f06:	2340      	movs	r3, #64	; 0x40
 8011f08:	2200      	movs	r2, #0
 8011f0a:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8011f0c:	2003      	movs	r0, #3
 8011f0e:	e007      	b.n	8011f20 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011f10:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011f12:	2220      	movs	r2, #32
 8011f14:	4313      	orrs	r3, r2
 8011f16:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8011f18:	2340      	movs	r3, #64	; 0x40
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8011f1e:	2001      	movs	r0, #1
}
 8011f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8011f22:	2608      	movs	r6, #8
 8011f24:	e7db      	b.n	8011ede <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011f26:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011f28:	2280      	movs	r2, #128	; 0x80
 8011f2a:	0092      	lsls	r2, r2, #2
 8011f2c:	430a      	orrs	r2, r1
 8011f2e:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8011f30:	68d9      	ldr	r1, [r3, #12]
 8011f32:	22c0      	movs	r2, #192	; 0xc0
 8011f34:	0112      	lsls	r2, r2, #4
 8011f36:	4211      	tst	r1, r2
 8011f38:	d113      	bne.n	8011f62 <HAL_ADC_PollForConversion+0x9a>
 8011f3a:	6a22      	ldr	r2, [r4, #32]
 8011f3c:	2a00      	cmp	r2, #0
 8011f3e:	d110      	bne.n	8011f62 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	0712      	lsls	r2, r2, #28
 8011f44:	d50d      	bpl.n	8011f62 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011f46:	689a      	ldr	r2, [r3, #8]
 8011f48:	0752      	lsls	r2, r2, #29
 8011f4a:	d412      	bmi.n	8011f72 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8011f4c:	685a      	ldr	r2, [r3, #4]
 8011f4e:	210c      	movs	r1, #12
 8011f50:	438a      	bics	r2, r1
 8011f52:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8011f54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011f56:	4a0c      	ldr	r2, [pc, #48]	; (8011f88 <HAL_ADC_PollForConversion+0xc0>)
 8011f58:	4013      	ands	r3, r2
 8011f5a:	3204      	adds	r2, #4
 8011f5c:	32ff      	adds	r2, #255	; 0xff
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	6463      	str	r3, [r4, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8011f62:	69a3      	ldr	r3, [r4, #24]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d10d      	bne.n	8011f84 <HAL_ADC_PollForConversion+0xbc>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8011f68:	6823      	ldr	r3, [r4, #0]
 8011f6a:	220c      	movs	r2, #12
 8011f6c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8011f6e:	2000      	movs	r0, #0
 8011f70:	e7d6      	b.n	8011f20 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011f72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011f74:	2220      	movs	r2, #32
 8011f76:	4313      	orrs	r3, r2
 8011f78:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011f7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011f7c:	3a1f      	subs	r2, #31
 8011f7e:	4313      	orrs	r3, r2
 8011f80:	64a3      	str	r3, [r4, #72]	; 0x48
 8011f82:	e7ee      	b.n	8011f62 <HAL_ADC_PollForConversion+0x9a>
  return HAL_OK;
 8011f84:	2000      	movs	r0, #0
 8011f86:	e7cb      	b.n	8011f20 <HAL_ADC_PollForConversion+0x58>
 8011f88:	fffffefe 	.word	0xfffffefe

08011f8c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8011f8c:	6803      	ldr	r3, [r0, #0]
 8011f8e:	2208      	movs	r2, #8
 8011f90:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8011f92:	6803      	ldr	r3, [r0, #0]
 8011f94:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8011f96:	4770      	bx	lr

08011f98 <HAL_ADC_ConfigChannel>:
{
 8011f98:	b530      	push	{r4, r5, lr}
 8011f9a:	b083      	sub	sp, #12
 8011f9c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8011fa2:	3340      	adds	r3, #64	; 0x40
 8011fa4:	5cc3      	ldrb	r3, [r0, r3]
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d100      	bne.n	8011fac <HAL_ADC_ConfigChannel+0x14>
 8011faa:	e08a      	b.n	80120c2 <HAL_ADC_ConfigChannel+0x12a>
 8011fac:	2340      	movs	r3, #64	; 0x40
 8011fae:	2201      	movs	r2, #1
 8011fb0:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011fb2:	6803      	ldr	r3, [r0, #0]
 8011fb4:	689a      	ldr	r2, [r3, #8]
 8011fb6:	0752      	lsls	r2, r2, #29
 8011fb8:	d475      	bmi.n	80120a6 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 8011fba:	4a43      	ldr	r2, [pc, #268]	; (80120c8 <HAL_ADC_ConfigChannel+0x130>)
 8011fbc:	6848      	ldr	r0, [r1, #4]
 8011fbe:	4290      	cmp	r0, r2
 8011fc0:	d056      	beq.n	8012070 <HAL_ADC_ConfigChannel+0xd8>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8011fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011fc4:	2001      	movs	r0, #1
 8011fc6:	680d      	ldr	r5, [r1, #0]
 8011fc8:	40a8      	lsls	r0, r5
 8011fca:	4302      	orrs	r2, r0
 8011fcc:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8011fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011fd0:	2280      	movs	r2, #128	; 0x80
 8011fd2:	0552      	lsls	r2, r2, #21
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d01e      	beq.n	8012016 <HAL_ADC_ConfigChannel+0x7e>
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d01c      	beq.n	8012016 <HAL_ADC_ConfigChannel+0x7e>
 8011fdc:	2b02      	cmp	r3, #2
 8011fde:	d01a      	beq.n	8012016 <HAL_ADC_ConfigChannel+0x7e>
 8011fe0:	2b03      	cmp	r3, #3
 8011fe2:	d018      	beq.n	8012016 <HAL_ADC_ConfigChannel+0x7e>
 8011fe4:	2b04      	cmp	r3, #4
 8011fe6:	d016      	beq.n	8012016 <HAL_ADC_ConfigChannel+0x7e>
 8011fe8:	2b05      	cmp	r3, #5
 8011fea:	d014      	beq.n	8012016 <HAL_ADC_ConfigChannel+0x7e>
 8011fec:	2b06      	cmp	r3, #6
 8011fee:	d012      	beq.n	8012016 <HAL_ADC_ConfigChannel+0x7e>
 8011ff0:	2b07      	cmp	r3, #7
 8011ff2:	d010      	beq.n	8012016 <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8011ff4:	6822      	ldr	r2, [r4, #0]
 8011ff6:	6950      	ldr	r0, [r2, #20]
 8011ff8:	2307      	movs	r3, #7
 8011ffa:	4003      	ands	r3, r0
 8011ffc:	6888      	ldr	r0, [r1, #8]
 8011ffe:	4298      	cmp	r0, r3
 8012000:	d009      	beq.n	8012016 <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8012002:	6950      	ldr	r0, [r2, #20]
 8012004:	2307      	movs	r3, #7
 8012006:	4398      	bics	r0, r3
 8012008:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 801200a:	6820      	ldr	r0, [r4, #0]
 801200c:	6942      	ldr	r2, [r0, #20]
 801200e:	688d      	ldr	r5, [r1, #8]
 8012010:	402b      	ands	r3, r5
 8012012:	4313      	orrs	r3, r2
 8012014:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8012016:	680b      	ldr	r3, [r1, #0]
 8012018:	001a      	movs	r2, r3
 801201a:	3a10      	subs	r2, #16
 801201c:	2a02      	cmp	r2, #2
 801201e:	d84c      	bhi.n	80120ba <HAL_ADC_ConfigChannel+0x122>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8012020:	4a2a      	ldr	r2, [pc, #168]	; (80120cc <HAL_ADC_ConfigChannel+0x134>)
 8012022:	6812      	ldr	r2, [r2, #0]
 8012024:	2b10      	cmp	r3, #16
 8012026:	d00e      	beq.n	8012046 <HAL_ADC_ConfigChannel+0xae>
 8012028:	2b11      	cmp	r3, #17
 801202a:	d009      	beq.n	8012040 <HAL_ADC_ConfigChannel+0xa8>
 801202c:	2380      	movs	r3, #128	; 0x80
 801202e:	045b      	lsls	r3, r3, #17
 8012030:	4313      	orrs	r3, r2
 8012032:	4a26      	ldr	r2, [pc, #152]	; (80120cc <HAL_ADC_ConfigChannel+0x134>)
 8012034:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8012036:	680b      	ldr	r3, [r1, #0]
 8012038:	2b10      	cmp	r3, #16
 801203a:	d007      	beq.n	801204c <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801203c:	2000      	movs	r0, #0
 801203e:	e037      	b.n	80120b0 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8012040:	2380      	movs	r3, #128	; 0x80
 8012042:	03db      	lsls	r3, r3, #15
 8012044:	e7f4      	b.n	8012030 <HAL_ADC_ConfigChannel+0x98>
 8012046:	2380      	movs	r3, #128	; 0x80
 8012048:	041b      	lsls	r3, r3, #16
 801204a:	e7f1      	b.n	8012030 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 801204c:	4b20      	ldr	r3, [pc, #128]	; (80120d0 <HAL_ADC_ConfigChannel+0x138>)
 801204e:	6818      	ldr	r0, [r3, #0]
 8012050:	4920      	ldr	r1, [pc, #128]	; (80120d4 <HAL_ADC_ConfigChannel+0x13c>)
 8012052:	f7ee f87d 	bl	8000150 <__udivsi3>
 8012056:	0083      	lsls	r3, r0, #2
 8012058:	1818      	adds	r0, r3, r0
 801205a:	0043      	lsls	r3, r0, #1
 801205c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 801205e:	e002      	b.n	8012066 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8012060:	9b01      	ldr	r3, [sp, #4]
 8012062:	3b01      	subs	r3, #1
 8012064:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8012066:	9b01      	ldr	r3, [sp, #4]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d1f9      	bne.n	8012060 <HAL_ADC_ConfigChannel+0xc8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801206c:	2000      	movs	r0, #0
 801206e:	e01f      	b.n	80120b0 <HAL_ADC_ConfigChannel+0x118>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8012070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012072:	2001      	movs	r0, #1
 8012074:	680d      	ldr	r5, [r1, #0]
 8012076:	40a8      	lsls	r0, r5
 8012078:	4382      	bics	r2, r0
 801207a:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801207c:	680b      	ldr	r3, [r1, #0]
 801207e:	001a      	movs	r2, r3
 8012080:	3a10      	subs	r2, #16
 8012082:	2a02      	cmp	r2, #2
 8012084:	d81b      	bhi.n	80120be <HAL_ADC_ConfigChannel+0x126>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8012086:	4a11      	ldr	r2, [pc, #68]	; (80120cc <HAL_ADC_ConfigChannel+0x134>)
 8012088:	6812      	ldr	r2, [r2, #0]
 801208a:	2b10      	cmp	r3, #16
 801208c:	d009      	beq.n	80120a2 <HAL_ADC_ConfigChannel+0x10a>
 801208e:	2b11      	cmp	r3, #17
 8012090:	d005      	beq.n	801209e <HAL_ADC_ConfigChannel+0x106>
 8012092:	4b11      	ldr	r3, [pc, #68]	; (80120d8 <HAL_ADC_ConfigChannel+0x140>)
 8012094:	4013      	ands	r3, r2
 8012096:	4a0d      	ldr	r2, [pc, #52]	; (80120cc <HAL_ADC_ConfigChannel+0x134>)
 8012098:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801209a:	2000      	movs	r0, #0
 801209c:	e008      	b.n	80120b0 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801209e:	4b0f      	ldr	r3, [pc, #60]	; (80120dc <HAL_ADC_ConfigChannel+0x144>)
 80120a0:	e7f8      	b.n	8012094 <HAL_ADC_ConfigChannel+0xfc>
 80120a2:	4b0f      	ldr	r3, [pc, #60]	; (80120e0 <HAL_ADC_ConfigChannel+0x148>)
 80120a4:	e7f6      	b.n	8012094 <HAL_ADC_ConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80120a6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80120a8:	2220      	movs	r2, #32
 80120aa:	4313      	orrs	r3, r2
 80120ac:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80120ae:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80120b0:	2340      	movs	r3, #64	; 0x40
 80120b2:	2200      	movs	r2, #0
 80120b4:	54e2      	strb	r2, [r4, r3]
}
 80120b6:	b003      	add	sp, #12
 80120b8:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80120ba:	2000      	movs	r0, #0
 80120bc:	e7f8      	b.n	80120b0 <HAL_ADC_ConfigChannel+0x118>
 80120be:	2000      	movs	r0, #0
 80120c0:	e7f6      	b.n	80120b0 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 80120c2:	2002      	movs	r0, #2
 80120c4:	e7f7      	b.n	80120b6 <HAL_ADC_ConfigChannel+0x11e>
 80120c6:	46c0      	nop			; (mov r8, r8)
 80120c8:	00001001 	.word	0x00001001
 80120cc:	40012708 	.word	0x40012708
 80120d0:	200000b8 	.word	0x200000b8
 80120d4:	000f4240 	.word	0x000f4240
 80120d8:	feffffff 	.word	0xfeffffff
 80120dc:	ffbfffff 	.word	0xffbfffff
 80120e0:	ff7fffff 	.word	0xff7fffff

080120e4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80120e4:	b570      	push	{r4, r5, r6, lr}
 80120e6:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80120e8:	2340      	movs	r3, #64	; 0x40
 80120ea:	5cc3      	ldrb	r3, [r0, r3]
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d042      	beq.n	8012176 <HAL_ADCEx_Calibration_Start+0x92>
 80120f0:	2340      	movs	r3, #64	; 0x40
 80120f2:	2201      	movs	r2, #1
 80120f4:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80120f6:	6802      	ldr	r2, [r0, #0]
 80120f8:	6891      	ldr	r1, [r2, #8]
 80120fa:	3b3d      	subs	r3, #61	; 0x3d
 80120fc:	400b      	ands	r3, r1
 80120fe:	2b01      	cmp	r3, #1
 8012100:	d105      	bne.n	801210e <HAL_ADCEx_Calibration_Start+0x2a>
 8012102:	6813      	ldr	r3, [r2, #0]
 8012104:	07db      	lsls	r3, r3, #31
 8012106:	d42d      	bmi.n	8012164 <HAL_ADCEx_Calibration_Start+0x80>
 8012108:	68d3      	ldr	r3, [r2, #12]
 801210a:	041b      	lsls	r3, r3, #16
 801210c:	d42a      	bmi.n	8012164 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 801210e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012110:	491a      	ldr	r1, [pc, #104]	; (801217c <HAL_ADCEx_Calibration_Start+0x98>)
 8012112:	400b      	ands	r3, r1
 8012114:	3106      	adds	r1, #6
 8012116:	31ff      	adds	r1, #255	; 0xff
 8012118:	430b      	orrs	r3, r1
 801211a:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 801211c:	6891      	ldr	r1, [r2, #8]
 801211e:	2380      	movs	r3, #128	; 0x80
 8012120:	061b      	lsls	r3, r3, #24
 8012122:	430b      	orrs	r3, r1
 8012124:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 8012126:	f7ff fce9 	bl	8011afc <HAL_GetTick>
 801212a:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 801212c:	6823      	ldr	r3, [r4, #0]
 801212e:	689b      	ldr	r3, [r3, #8]
 8012130:	2b00      	cmp	r3, #0
 8012132:	da0f      	bge.n	8012154 <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8012134:	f7ff fce2 	bl	8011afc <HAL_GetTick>
 8012138:	1b40      	subs	r0, r0, r5
 801213a:	2802      	cmp	r0, #2
 801213c:	d9f6      	bls.n	801212c <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801213e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012140:	2212      	movs	r2, #18
 8012142:	4393      	bics	r3, r2
 8012144:	3a02      	subs	r2, #2
 8012146:	4313      	orrs	r3, r2
 8012148:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801214a:	2340      	movs	r3, #64	; 0x40
 801214c:	2200      	movs	r2, #0
 801214e:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 8012150:	2001      	movs	r0, #1
 8012152:	e00f      	b.n	8012174 <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012154:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012156:	2203      	movs	r2, #3
 8012158:	4393      	bics	r3, r2
 801215a:	3a02      	subs	r2, #2
 801215c:	4313      	orrs	r3, r2
 801215e:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012160:	2000      	movs	r0, #0
 8012162:	e004      	b.n	801216e <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012164:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012166:	2220      	movs	r2, #32
 8012168:	4313      	orrs	r3, r2
 801216a:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 801216c:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801216e:	2340      	movs	r3, #64	; 0x40
 8012170:	2200      	movs	r2, #0
 8012172:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8012174:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8012176:	2002      	movs	r0, #2
 8012178:	e7fc      	b.n	8012174 <HAL_ADCEx_Calibration_Start+0x90>
 801217a:	46c0      	nop			; (mov r8, r8)
 801217c:	fffffefd 	.word	0xfffffefd

08012180 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012180:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8012182:	2800      	cmp	r0, #0
 8012184:	db11      	blt.n	80121aa <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012186:	0884      	lsrs	r4, r0, #2
 8012188:	4d13      	ldr	r5, [pc, #76]	; (80121d8 <HAL_NVIC_SetPriority+0x58>)
 801218a:	34c0      	adds	r4, #192	; 0xc0
 801218c:	00a4      	lsls	r4, r4, #2
 801218e:	5962      	ldr	r2, [r4, r5]
 8012190:	2303      	movs	r3, #3
 8012192:	4018      	ands	r0, r3
 8012194:	00c0      	lsls	r0, r0, #3
 8012196:	33fc      	adds	r3, #252	; 0xfc
 8012198:	001e      	movs	r6, r3
 801219a:	4086      	lsls	r6, r0
 801219c:	43b2      	bics	r2, r6
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801219e:	0189      	lsls	r1, r1, #6
 80121a0:	400b      	ands	r3, r1
 80121a2:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80121a4:	4313      	orrs	r3, r2
 80121a6:	5163      	str	r3, [r4, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80121a8:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80121aa:	b2c0      	uxtb	r0, r0
 80121ac:	220f      	movs	r2, #15
 80121ae:	4002      	ands	r2, r0
 80121b0:	3a08      	subs	r2, #8
 80121b2:	0892      	lsrs	r2, r2, #2
 80121b4:	3206      	adds	r2, #6
 80121b6:	0092      	lsls	r2, r2, #2
 80121b8:	4b08      	ldr	r3, [pc, #32]	; (80121dc <HAL_NVIC_SetPriority+0x5c>)
 80121ba:	18d3      	adds	r3, r2, r3
 80121bc:	685d      	ldr	r5, [r3, #4]
 80121be:	2403      	movs	r4, #3
 80121c0:	4020      	ands	r0, r4
 80121c2:	00c0      	lsls	r0, r0, #3
 80121c4:	22ff      	movs	r2, #255	; 0xff
 80121c6:	0014      	movs	r4, r2
 80121c8:	4084      	lsls	r4, r0
 80121ca:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80121cc:	0189      	lsls	r1, r1, #6
 80121ce:	400a      	ands	r2, r1
 80121d0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80121d2:	432a      	orrs	r2, r5
 80121d4:	605a      	str	r2, [r3, #4]
 80121d6:	e7e7      	b.n	80121a8 <HAL_NVIC_SetPriority+0x28>
 80121d8:	e000e100 	.word	0xe000e100
 80121dc:	e000ed00 	.word	0xe000ed00

080121e0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80121e0:	231f      	movs	r3, #31
 80121e2:	4018      	ands	r0, r3
 80121e4:	3b1e      	subs	r3, #30
 80121e6:	4083      	lsls	r3, r0
 80121e8:	4a01      	ldr	r2, [pc, #4]	; (80121f0 <HAL_NVIC_EnableIRQ+0x10>)
 80121ea:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80121ec:	4770      	bx	lr
 80121ee:	46c0      	nop			; (mov r8, r8)
 80121f0:	e000e100 	.word	0xe000e100

080121f4 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80121f4:	231f      	movs	r3, #31
 80121f6:	4018      	ands	r0, r3
 80121f8:	3b1e      	subs	r3, #30
 80121fa:	4083      	lsls	r3, r0
 80121fc:	4901      	ldr	r1, [pc, #4]	; (8012204 <HAL_NVIC_DisableIRQ+0x10>)
 80121fe:	2280      	movs	r2, #128	; 0x80
 8012200:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8012202:	4770      	bx	lr
 8012204:	e000e100 	.word	0xe000e100

08012208 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8012208:	3801      	subs	r0, #1
 801220a:	4b0a      	ldr	r3, [pc, #40]	; (8012234 <HAL_SYSTICK_Config+0x2c>)
 801220c:	4298      	cmp	r0, r3
 801220e:	d80f      	bhi.n	8012230 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012210:	4a09      	ldr	r2, [pc, #36]	; (8012238 <HAL_SYSTICK_Config+0x30>)
 8012212:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012214:	4809      	ldr	r0, [pc, #36]	; (801223c <HAL_SYSTICK_Config+0x34>)
 8012216:	6a03      	ldr	r3, [r0, #32]
 8012218:	021b      	lsls	r3, r3, #8
 801221a:	0a1b      	lsrs	r3, r3, #8
 801221c:	21c0      	movs	r1, #192	; 0xc0
 801221e:	0609      	lsls	r1, r1, #24
 8012220:	430b      	orrs	r3, r1
 8012222:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012224:	2300      	movs	r3, #0
 8012226:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012228:	3307      	adds	r3, #7
 801222a:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801222c:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 801222e:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8012230:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8012232:	e7fc      	b.n	801222e <HAL_SYSTICK_Config+0x26>
 8012234:	00ffffff 	.word	0x00ffffff
 8012238:	e000e010 	.word	0xe000e010
 801223c:	e000ed00 	.word	0xe000ed00

08012240 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8012240:	2804      	cmp	r0, #4
 8012242:	d005      	beq.n	8012250 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8012244:	4a05      	ldr	r2, [pc, #20]	; (801225c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8012246:	6813      	ldr	r3, [r2, #0]
 8012248:	2104      	movs	r1, #4
 801224a:	438b      	bics	r3, r1
 801224c:	6013      	str	r3, [r2, #0]
  }
}
 801224e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8012250:	4a02      	ldr	r2, [pc, #8]	; (801225c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8012252:	6813      	ldr	r3, [r2, #0]
 8012254:	2104      	movs	r1, #4
 8012256:	430b      	orrs	r3, r1
 8012258:	6013      	str	r3, [r2, #0]
 801225a:	e7f8      	b.n	801224e <HAL_SYSTICK_CLKSourceConfig+0xe>
 801225c:	e000e010 	.word	0xe000e010

08012260 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8012260:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8012262:	2500      	movs	r5, #0
 8012264:	e00e      	b.n	8012284 <CRC_Handle_8+0x24>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8012266:	00ac      	lsls	r4, r5, #2
 8012268:	5d0b      	ldrb	r3, [r1, r4]
 801226a:	061b      	lsls	r3, r3, #24
 801226c:	190c      	adds	r4, r1, r4
 801226e:	7866      	ldrb	r6, [r4, #1]
 8012270:	0436      	lsls	r6, r6, #16
 8012272:	4333      	orrs	r3, r6
 8012274:	78a6      	ldrb	r6, [r4, #2]
 8012276:	0236      	lsls	r6, r6, #8
 8012278:	4333      	orrs	r3, r6
 801227a:	78e6      	ldrb	r6, [r4, #3]
 801227c:	6804      	ldr	r4, [r0, #0]
 801227e:	4333      	orrs	r3, r6
 8012280:	6023      	str	r3, [r4, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8012282:	3501      	adds	r5, #1
 8012284:	0893      	lsrs	r3, r2, #2
 8012286:	42ab      	cmp	r3, r5
 8012288:	d8ed      	bhi.n	8012266 <CRC_Handle_8+0x6>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 801228a:	2303      	movs	r3, #3
 801228c:	401a      	ands	r2, r3
 801228e:	d005      	beq.n	801229c <CRC_Handle_8+0x3c>
   {
     if  (BufferLength%4 == 1)
 8012290:	2a01      	cmp	r2, #1
 8012292:	d006      	beq.n	80122a2 <CRC_Handle_8+0x42>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8012294:	2a02      	cmp	r2, #2
 8012296:	d009      	beq.n	80122ac <CRC_Handle_8+0x4c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
     }
     if  (BufferLength%4 == 3)
 8012298:	2a03      	cmp	r2, #3
 801229a:	d010      	beq.n	80122be <CRC_Handle_8+0x5e>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 801229c:	6803      	ldr	r3, [r0, #0]
 801229e:	6818      	ldr	r0, [r3, #0]
}
 80122a0:	bd70      	pop	{r4, r5, r6, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80122a2:	00ab      	lsls	r3, r5, #2
 80122a4:	5ccb      	ldrb	r3, [r1, r3]
 80122a6:	6804      	ldr	r4, [r0, #0]
 80122a8:	7023      	strb	r3, [r4, #0]
 80122aa:	e7f3      	b.n	8012294 <CRC_Handle_8+0x34>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80122ac:	00ab      	lsls	r3, r5, #2
 80122ae:	5ccc      	ldrb	r4, [r1, r3]
 80122b0:	0224      	lsls	r4, r4, #8
 80122b2:	18cb      	adds	r3, r1, r3
 80122b4:	785b      	ldrb	r3, [r3, #1]
 80122b6:	4323      	orrs	r3, r4
 80122b8:	6804      	ldr	r4, [r0, #0]
 80122ba:	8023      	strh	r3, [r4, #0]
 80122bc:	e7ec      	b.n	8012298 <CRC_Handle_8+0x38>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80122be:	00ad      	lsls	r5, r5, #2
 80122c0:	5d4a      	ldrb	r2, [r1, r5]
 80122c2:	0212      	lsls	r2, r2, #8
 80122c4:	194d      	adds	r5, r1, r5
 80122c6:	786b      	ldrb	r3, [r5, #1]
 80122c8:	4313      	orrs	r3, r2
 80122ca:	6802      	ldr	r2, [r0, #0]
 80122cc:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 80122ce:	78ab      	ldrb	r3, [r5, #2]
 80122d0:	6802      	ldr	r2, [r0, #0]
 80122d2:	7013      	strb	r3, [r2, #0]
 80122d4:	e7e2      	b.n	801229c <CRC_Handle_8+0x3c>

080122d6 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80122d6:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 80122d8:	2500      	movs	r5, #0
 80122da:	e008      	b.n	80122ee <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 80122dc:	00ac      	lsls	r4, r5, #2
 80122de:	5b0b      	ldrh	r3, [r1, r4]
 80122e0:	041b      	lsls	r3, r3, #16
 80122e2:	190c      	adds	r4, r1, r4
 80122e4:	8866      	ldrh	r6, [r4, #2]
 80122e6:	6804      	ldr	r4, [r0, #0]
 80122e8:	4333      	orrs	r3, r6
 80122ea:	6023      	str	r3, [r4, #0]
  for(i = 0; i < (BufferLength/2); i++)
 80122ec:	3501      	adds	r5, #1
 80122ee:	0853      	lsrs	r3, r2, #1
 80122f0:	42ab      	cmp	r3, r5
 80122f2:	d8f3      	bhi.n	80122dc <CRC_Handle_16+0x6>
  }
  if ((BufferLength%2) != 0)
 80122f4:	07d3      	lsls	r3, r2, #31
 80122f6:	d503      	bpl.n	8012300 <CRC_Handle_16+0x2a>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 80122f8:	00ad      	lsls	r5, r5, #2
 80122fa:	5a6b      	ldrh	r3, [r5, r1]
 80122fc:	6802      	ldr	r2, [r0, #0]
 80122fe:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8012300:	6803      	ldr	r3, [r0, #0]
 8012302:	6818      	ldr	r0, [r3, #0]
}
 8012304:	bd70      	pop	{r4, r5, r6, pc}

08012306 <HAL_CRC_Init>:
{
 8012306:	b510      	push	{r4, lr}
 8012308:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 801230a:	d029      	beq.n	8012360 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 801230c:	7f43      	ldrb	r3, [r0, #29]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d01e      	beq.n	8012350 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8012312:	2302      	movs	r3, #2
 8012314:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8012316:	0020      	movs	r0, r4
 8012318:	f000 f8a8 	bl	801246c <HAL_CRCEx_Init>
 801231c:	2800      	cmp	r0, #0
 801231e:	d121      	bne.n	8012364 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8012320:	7963      	ldrb	r3, [r4, #5]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d118      	bne.n	8012358 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8012326:	6823      	ldr	r3, [r4, #0]
 8012328:	2201      	movs	r2, #1
 801232a:	4252      	negs	r2, r2
 801232c:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 801232e:	6822      	ldr	r2, [r4, #0]
 8012330:	6893      	ldr	r3, [r2, #8]
 8012332:	2160      	movs	r1, #96	; 0x60
 8012334:	438b      	bics	r3, r1
 8012336:	6961      	ldr	r1, [r4, #20]
 8012338:	430b      	orrs	r3, r1
 801233a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 801233c:	6822      	ldr	r2, [r4, #0]
 801233e:	6893      	ldr	r3, [r2, #8]
 8012340:	2180      	movs	r1, #128	; 0x80
 8012342:	438b      	bics	r3, r1
 8012344:	69a1      	ldr	r1, [r4, #24]
 8012346:	430b      	orrs	r3, r1
 8012348:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 801234a:	2301      	movs	r3, #1
 801234c:	7763      	strb	r3, [r4, #29]
}
 801234e:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8012350:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8012352:	f7fc fc4d 	bl	800ebf0 <HAL_CRC_MspInit>
 8012356:	e7dc      	b.n	8012312 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8012358:	6823      	ldr	r3, [r4, #0]
 801235a:	6922      	ldr	r2, [r4, #16]
 801235c:	611a      	str	r2, [r3, #16]
 801235e:	e7e6      	b.n	801232e <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8012360:	2001      	movs	r0, #1
 8012362:	e7f4      	b.n	801234e <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8012364:	2001      	movs	r0, #1
 8012366:	e7f2      	b.n	801234e <HAL_CRC_Init+0x48>

08012368 <HAL_CRC_Accumulate>:
{
 8012368:	b570      	push	{r4, r5, r6, lr}
 801236a:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 801236c:	7f03      	ldrb	r3, [r0, #28]
 801236e:	2b01      	cmp	r3, #1
 8012370:	d022      	beq.n	80123b8 <HAL_CRC_Accumulate+0x50>
 8012372:	2301      	movs	r3, #1
 8012374:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8012376:	3301      	adds	r3, #1
 8012378:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 801237a:	6a03      	ldr	r3, [r0, #32]
 801237c:	2b02      	cmp	r3, #2
 801237e:	d018      	beq.n	80123b2 <HAL_CRC_Accumulate+0x4a>
 8012380:	2b03      	cmp	r3, #3
 8012382:	d011      	beq.n	80123a8 <HAL_CRC_Accumulate+0x40>
 8012384:	2b01      	cmp	r3, #1
 8012386:	d011      	beq.n	80123ac <HAL_CRC_Accumulate+0x44>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8012388:	2000      	movs	r0, #0
 801238a:	e008      	b.n	801239e <HAL_CRC_Accumulate+0x36>
        hcrc->Instance->DR = pBuffer[index];
 801238c:	6820      	ldr	r0, [r4, #0]
 801238e:	009d      	lsls	r5, r3, #2
 8012390:	586d      	ldr	r5, [r5, r1]
 8012392:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8012394:	3301      	adds	r3, #1
 8012396:	4293      	cmp	r3, r2
 8012398:	d3f8      	bcc.n	801238c <HAL_CRC_Accumulate+0x24>
      temp = hcrc->Instance->DR;
 801239a:	6823      	ldr	r3, [r4, #0]
 801239c:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 801239e:	2301      	movs	r3, #1
 80123a0:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80123a2:	2300      	movs	r3, #0
 80123a4:	7723      	strb	r3, [r4, #28]
}
 80123a6:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 80123a8:	2300      	movs	r3, #0
 80123aa:	e7f4      	b.n	8012396 <HAL_CRC_Accumulate+0x2e>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80123ac:	f7ff ff58 	bl	8012260 <CRC_Handle_8>
      break;
 80123b0:	e7f5      	b.n	801239e <HAL_CRC_Accumulate+0x36>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80123b2:	f7ff ff90 	bl	80122d6 <CRC_Handle_16>
      break;
 80123b6:	e7f2      	b.n	801239e <HAL_CRC_Accumulate+0x36>
  __HAL_LOCK(hcrc); 
 80123b8:	2002      	movs	r0, #2
 80123ba:	e7f4      	b.n	80123a6 <HAL_CRC_Accumulate+0x3e>

080123bc <HAL_CRC_Calculate>:
{
 80123bc:	b570      	push	{r4, r5, r6, lr}
 80123be:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80123c0:	7f03      	ldrb	r3, [r0, #28]
 80123c2:	2b01      	cmp	r3, #1
 80123c4:	d028      	beq.n	8012418 <HAL_CRC_Calculate+0x5c>
 80123c6:	2501      	movs	r5, #1
 80123c8:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80123ca:	2302      	movs	r3, #2
 80123cc:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80123ce:	6800      	ldr	r0, [r0, #0]
 80123d0:	6883      	ldr	r3, [r0, #8]
 80123d2:	432b      	orrs	r3, r5
 80123d4:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 80123d6:	6a23      	ldr	r3, [r4, #32]
 80123d8:	2b02      	cmp	r3, #2
 80123da:	d019      	beq.n	8012410 <HAL_CRC_Calculate+0x54>
 80123dc:	2b03      	cmp	r3, #3
 80123de:	d011      	beq.n	8012404 <HAL_CRC_Calculate+0x48>
 80123e0:	2b01      	cmp	r3, #1
 80123e2:	d011      	beq.n	8012408 <HAL_CRC_Calculate+0x4c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 80123e4:	2000      	movs	r0, #0
 80123e6:	e008      	b.n	80123fa <HAL_CRC_Calculate+0x3e>
        hcrc->Instance->DR = pBuffer[index];
 80123e8:	6820      	ldr	r0, [r4, #0]
 80123ea:	009d      	lsls	r5, r3, #2
 80123ec:	586d      	ldr	r5, [r5, r1]
 80123ee:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 80123f0:	3301      	adds	r3, #1
 80123f2:	4293      	cmp	r3, r2
 80123f4:	d3f8      	bcc.n	80123e8 <HAL_CRC_Calculate+0x2c>
      temp = hcrc->Instance->DR;
 80123f6:	6823      	ldr	r3, [r4, #0]
 80123f8:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 80123fa:	2301      	movs	r3, #1
 80123fc:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80123fe:	2300      	movs	r3, #0
 8012400:	7723      	strb	r3, [r4, #28]
}
 8012402:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8012404:	2300      	movs	r3, #0
 8012406:	e7f4      	b.n	80123f2 <HAL_CRC_Calculate+0x36>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8012408:	0020      	movs	r0, r4
 801240a:	f7ff ff29 	bl	8012260 <CRC_Handle_8>
      break;
 801240e:	e7f4      	b.n	80123fa <HAL_CRC_Calculate+0x3e>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8012410:	0020      	movs	r0, r4
 8012412:	f7ff ff60 	bl	80122d6 <CRC_Handle_16>
      break;
 8012416:	e7f0      	b.n	80123fa <HAL_CRC_Calculate+0x3e>
  __HAL_LOCK(hcrc); 
 8012418:	2002      	movs	r0, #2
 801241a:	e7f2      	b.n	8012402 <HAL_CRC_Calculate+0x46>

0801241c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 801241c:	b510      	push	{r4, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 801241e:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8012420:	e000      	b.n	8012424 <HAL_CRCEx_Polynomial_Set+0x8>
 8012422:	001c      	movs	r4, r3
 8012424:	2301      	movs	r3, #1
 8012426:	40a3      	lsls	r3, r4
 8012428:	4219      	tst	r1, r3
 801242a:	d103      	bne.n	8012434 <HAL_CRCEx_Polynomial_Set+0x18>
 801242c:	1e63      	subs	r3, r4, #1
 801242e:	2c00      	cmp	r4, #0
 8012430:	d1f7      	bne.n	8012422 <HAL_CRCEx_Polynomial_Set+0x6>
 8012432:	001c      	movs	r4, r3
  {}

  switch (PolyLength)
 8012434:	2a10      	cmp	r2, #16
 8012436:	d011      	beq.n	801245c <HAL_CRCEx_Polynomial_Set+0x40>
 8012438:	2a18      	cmp	r2, #24
 801243a:	d00b      	beq.n	8012454 <HAL_CRCEx_Polynomial_Set+0x38>
 801243c:	2a08      	cmp	r2, #8
 801243e:	d011      	beq.n	8012464 <HAL_CRCEx_Polynomial_Set+0x48>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8012440:	6803      	ldr	r3, [r0, #0]
 8012442:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8012444:	6801      	ldr	r1, [r0, #0]
 8012446:	688b      	ldr	r3, [r1, #8]
 8012448:	2018      	movs	r0, #24
 801244a:	4383      	bics	r3, r0
 801244c:	431a      	orrs	r2, r3
 801244e:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8012450:	2000      	movs	r0, #0
}
 8012452:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8012454:	2c06      	cmp	r4, #6
 8012456:	d9f3      	bls.n	8012440 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8012458:	2001      	movs	r0, #1
 801245a:	e7fa      	b.n	8012452 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_8B)
 801245c:	2c07      	cmp	r4, #7
 801245e:	d9ef      	bls.n	8012440 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8012460:	2001      	movs	r0, #1
 8012462:	e7f6      	b.n	8012452 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 8012464:	2c0f      	cmp	r4, #15
 8012466:	d9eb      	bls.n	8012440 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8012468:	2001      	movs	r0, #1
 801246a:	e7f2      	b.n	8012452 <HAL_CRCEx_Polynomial_Set+0x36>

0801246c <HAL_CRCEx_Init>:
{
 801246c:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 801246e:	7903      	ldrb	r3, [r0, #4]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d109      	bne.n	8012488 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8012474:	6803      	ldr	r3, [r0, #0]
 8012476:	4a08      	ldr	r2, [pc, #32]	; (8012498 <HAL_CRCEx_Init+0x2c>)
 8012478:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801247a:	6802      	ldr	r2, [r0, #0]
 801247c:	6893      	ldr	r3, [r2, #8]
 801247e:	2118      	movs	r1, #24
 8012480:	438b      	bics	r3, r1
 8012482:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8012484:	2000      	movs	r0, #0
}
 8012486:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8012488:	68c2      	ldr	r2, [r0, #12]
 801248a:	6881      	ldr	r1, [r0, #8]
 801248c:	f7ff ffc6 	bl	801241c <HAL_CRCEx_Polynomial_Set>
 8012490:	2800      	cmp	r0, #0
 8012492:	d0f8      	beq.n	8012486 <HAL_CRCEx_Init+0x1a>
      return HAL_ERROR;
 8012494:	2001      	movs	r0, #1
 8012496:	e7f6      	b.n	8012486 <HAL_CRCEx_Init+0x1a>
 8012498:	04c11db7 	.word	0x04c11db7

0801249c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 801249c:	b510      	push	{r4, lr}
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801249e:	6804      	ldr	r4, [r0, #0]
 80124a0:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80124a2:	6843      	ldr	r3, [r0, #4]
 80124a4:	2b10      	cmp	r3, #16
 80124a6:	d004      	beq.n	80124b2 <DMA_SetConfig+0x16>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80124a8:	6803      	ldr	r3, [r0, #0]
 80124aa:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80124ac:	6803      	ldr	r3, [r0, #0]
 80124ae:	60da      	str	r2, [r3, #12]
  }
}
 80124b0:	bd10      	pop	{r4, pc}
    hdma->Instance->CPAR = DstAddress;
 80124b2:	6803      	ldr	r3, [r0, #0]
 80124b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80124b6:	6803      	ldr	r3, [r0, #0]
 80124b8:	60d9      	str	r1, [r3, #12]
 80124ba:	e7f9      	b.n	80124b0 <DMA_SetConfig+0x14>

080124bc <HAL_DMA_Init>:
{ 
 80124bc:	b530      	push	{r4, r5, lr}
  if(hdma == NULL)
 80124be:	2800      	cmp	r0, #0
 80124c0:	d022      	beq.n	8012508 <HAL_DMA_Init+0x4c>
  if(hdma->State == HAL_DMA_STATE_RESET)
 80124c2:	2321      	movs	r3, #33	; 0x21
 80124c4:	5cc3      	ldrb	r3, [r0, r3]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d102      	bne.n	80124d0 <HAL_DMA_Init+0x14>
    hdma->Lock = HAL_UNLOCKED;
 80124ca:	3320      	adds	r3, #32
 80124cc:	2200      	movs	r2, #0
 80124ce:	54c2      	strb	r2, [r0, r3]
  hdma->State = HAL_DMA_STATE_BUSY;
 80124d0:	2121      	movs	r1, #33	; 0x21
 80124d2:	2302      	movs	r3, #2
 80124d4:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 80124d6:	6804      	ldr	r4, [r0, #0]
 80124d8:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80124da:	4a0c      	ldr	r2, [pc, #48]	; (801250c <HAL_DMA_Init+0x50>)
 80124dc:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80124de:	6843      	ldr	r3, [r0, #4]
 80124e0:	6885      	ldr	r5, [r0, #8]
 80124e2:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80124e4:	68c5      	ldr	r5, [r0, #12]
 80124e6:	432b      	orrs	r3, r5
 80124e8:	6905      	ldr	r5, [r0, #16]
 80124ea:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80124ec:	6945      	ldr	r5, [r0, #20]
 80124ee:	432b      	orrs	r3, r5
 80124f0:	6985      	ldr	r5, [r0, #24]
 80124f2:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80124f4:	69c5      	ldr	r5, [r0, #28]
 80124f6:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80124f8:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80124fa:	6023      	str	r3, [r4, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80124fc:	2300      	movs	r3, #0
 80124fe:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State  = HAL_DMA_STATE_READY;
 8012500:	3301      	adds	r3, #1
 8012502:	5443      	strb	r3, [r0, r1]
  return HAL_OK;
 8012504:	2000      	movs	r0, #0
}  
 8012506:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8012508:	2001      	movs	r0, #1
 801250a:	e7fc      	b.n	8012506 <HAL_DMA_Init+0x4a>
 801250c:	ffffc00f 	.word	0xffffc00f

08012510 <HAL_DMA_Start_IT>:
{
 8012510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012512:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8012514:	2020      	movs	r0, #32
 8012516:	5c20      	ldrb	r0, [r4, r0]
 8012518:	2801      	cmp	r0, #1
 801251a:	d020      	beq.n	801255e <HAL_DMA_Start_IT+0x4e>
 801251c:	2501      	movs	r5, #1
 801251e:	2020      	movs	r0, #32
 8012520:	5425      	strb	r5, [r4, r0]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8012522:	2602      	movs	r6, #2
 8012524:	3001      	adds	r0, #1
 8012526:	5426      	strb	r6, [r4, r0]
  __HAL_DMA_DISABLE(hdma);
 8012528:	6827      	ldr	r7, [r4, #0]
 801252a:	6838      	ldr	r0, [r7, #0]
 801252c:	43a8      	bics	r0, r5
 801252e:	6038      	str	r0, [r7, #0]
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012530:	0020      	movs	r0, r4
 8012532:	f7ff ffb3 	bl	801249c <DMA_SetConfig>
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8012536:	6822      	ldr	r2, [r4, #0]
 8012538:	6813      	ldr	r3, [r2, #0]
 801253a:	4333      	orrs	r3, r6
 801253c:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 801253e:	6822      	ldr	r2, [r4, #0]
 8012540:	6813      	ldr	r3, [r2, #0]
 8012542:	2104      	movs	r1, #4
 8012544:	430b      	orrs	r3, r1
 8012546:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8012548:	6822      	ldr	r2, [r4, #0]
 801254a:	6813      	ldr	r3, [r2, #0]
 801254c:	3104      	adds	r1, #4
 801254e:	430b      	orrs	r3, r1
 8012550:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8012552:	6822      	ldr	r2, [r4, #0]
 8012554:	6813      	ldr	r3, [r2, #0]
 8012556:	432b      	orrs	r3, r5
 8012558:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 801255a:	2000      	movs	r0, #0
} 
 801255c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 801255e:	2002      	movs	r0, #2
 8012560:	e7fc      	b.n	801255c <HAL_DMA_Start_IT+0x4c>

08012562 <HAL_DMA_Abort>:
{
 8012562:	b570      	push	{r4, r5, r6, lr}
 8012564:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8012566:	6802      	ldr	r2, [r0, #0]
 8012568:	6813      	ldr	r3, [r2, #0]
 801256a:	2101      	movs	r1, #1
 801256c:	438b      	bics	r3, r1
 801256e:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8012570:	f7ff fac4 	bl	8011afc <HAL_GetTick>
 8012574:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8012576:	6823      	ldr	r3, [r4, #0]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	07db      	lsls	r3, r3, #31
 801257c:	d511      	bpl.n	80125a2 <HAL_DMA_Abort+0x40>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 801257e:	f7ff fabd 	bl	8011afc <HAL_GetTick>
 8012582:	1b40      	subs	r0, r0, r5
 8012584:	23fa      	movs	r3, #250	; 0xfa
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	4298      	cmp	r0, r3
 801258a:	d9f4      	bls.n	8012576 <HAL_DMA_Abort+0x14>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 801258c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801258e:	2220      	movs	r2, #32
 8012590:	4313      	orrs	r3, r2
 8012592:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012594:	2321      	movs	r3, #33	; 0x21
 8012596:	2103      	movs	r1, #3
 8012598:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 801259a:	2300      	movs	r3, #0
 801259c:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 801259e:	2003      	movs	r0, #3
 80125a0:	e006      	b.n	80125b0 <HAL_DMA_Abort+0x4e>
  hdma->State = HAL_DMA_STATE_READY; 
 80125a2:	2321      	movs	r3, #33	; 0x21
 80125a4:	2201      	movs	r2, #1
 80125a6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 80125a8:	3b01      	subs	r3, #1
 80125aa:	2200      	movs	r2, #0
 80125ac:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 80125ae:	2000      	movs	r0, #0
}
 80125b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080125b4 <HAL_DMA_IRQHandler>:
{        
 80125b4:	b510      	push	{r4, lr}
 80125b6:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80125b8:	6802      	ldr	r2, [r0, #0]
 80125ba:	4bb6      	ldr	r3, [pc, #728]	; (8012894 <HAL_DMA_IRQHandler+0x2e0>)
 80125bc:	429a      	cmp	r2, r3
 80125be:	d800      	bhi.n	80125c2 <HAL_DMA_IRQHandler+0xe>
 80125c0:	e083      	b.n	80126ca <HAL_DMA_IRQHandler+0x116>
 80125c2:	4bb5      	ldr	r3, [pc, #724]	; (8012898 <HAL_DMA_IRQHandler+0x2e4>)
 80125c4:	6819      	ldr	r1, [r3, #0]
 80125c6:	4bb5      	ldr	r3, [pc, #724]	; (801289c <HAL_DMA_IRQHandler+0x2e8>)
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d023      	beq.n	8012614 <HAL_DMA_IRQHandler+0x60>
 80125cc:	4bb4      	ldr	r3, [pc, #720]	; (80128a0 <HAL_DMA_IRQHandler+0x2ec>)
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d063      	beq.n	801269a <HAL_DMA_IRQHandler+0xe6>
 80125d2:	4bb4      	ldr	r3, [pc, #720]	; (80128a4 <HAL_DMA_IRQHandler+0x2f0>)
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d062      	beq.n	801269e <HAL_DMA_IRQHandler+0xea>
 80125d8:	4bb3      	ldr	r3, [pc, #716]	; (80128a8 <HAL_DMA_IRQHandler+0x2f4>)
 80125da:	429a      	cmp	r2, r3
 80125dc:	d062      	beq.n	80126a4 <HAL_DMA_IRQHandler+0xf0>
 80125de:	4bb3      	ldr	r3, [pc, #716]	; (80128ac <HAL_DMA_IRQHandler+0x2f8>)
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d062      	beq.n	80126aa <HAL_DMA_IRQHandler+0xf6>
 80125e4:	4bb2      	ldr	r3, [pc, #712]	; (80128b0 <HAL_DMA_IRQHandler+0x2fc>)
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d062      	beq.n	80126b0 <HAL_DMA_IRQHandler+0xfc>
 80125ea:	4baa      	ldr	r3, [pc, #680]	; (8012894 <HAL_DMA_IRQHandler+0x2e0>)
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d062      	beq.n	80126b6 <HAL_DMA_IRQHandler+0x102>
 80125f0:	4bb0      	ldr	r3, [pc, #704]	; (80128b4 <HAL_DMA_IRQHandler+0x300>)
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d062      	beq.n	80126bc <HAL_DMA_IRQHandler+0x108>
 80125f6:	4bb0      	ldr	r3, [pc, #704]	; (80128b8 <HAL_DMA_IRQHandler+0x304>)
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d061      	beq.n	80126c0 <HAL_DMA_IRQHandler+0x10c>
 80125fc:	4baf      	ldr	r3, [pc, #700]	; (80128bc <HAL_DMA_IRQHandler+0x308>)
 80125fe:	429a      	cmp	r2, r3
 8012600:	d060      	beq.n	80126c4 <HAL_DMA_IRQHandler+0x110>
 8012602:	4baf      	ldr	r3, [pc, #700]	; (80128c0 <HAL_DMA_IRQHandler+0x30c>)
 8012604:	429a      	cmp	r2, r3
 8012606:	d002      	beq.n	801260e <HAL_DMA_IRQHandler+0x5a>
 8012608:	2380      	movs	r3, #128	; 0x80
 801260a:	031b      	lsls	r3, r3, #12
 801260c:	e003      	b.n	8012616 <HAL_DMA_IRQHandler+0x62>
 801260e:	2380      	movs	r3, #128	; 0x80
 8012610:	021b      	lsls	r3, r3, #8
 8012612:	e000      	b.n	8012616 <HAL_DMA_IRQHandler+0x62>
 8012614:	2308      	movs	r3, #8
 8012616:	400b      	ands	r3, r1
 8012618:	1e59      	subs	r1, r3, #1
 801261a:	418b      	sbcs	r3, r1
 801261c:	b2db      	uxtb	r3, r3
 801261e:	2b00      	cmp	r3, #0
 8012620:	d100      	bne.n	8012624 <HAL_DMA_IRQHandler+0x70>
 8012622:	e0ae      	b.n	8012782 <HAL_DMA_IRQHandler+0x1ce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8012624:	6813      	ldr	r3, [r2, #0]
 8012626:	071b      	lsls	r3, r3, #28
 8012628:	d400      	bmi.n	801262c <HAL_DMA_IRQHandler+0x78>
 801262a:	e0aa      	b.n	8012782 <HAL_DMA_IRQHandler+0x1ce>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 801262c:	6813      	ldr	r3, [r2, #0]
 801262e:	2108      	movs	r1, #8
 8012630:	438b      	bics	r3, r1
 8012632:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8012634:	6823      	ldr	r3, [r4, #0]
 8012636:	4a97      	ldr	r2, [pc, #604]	; (8012894 <HAL_DMA_IRQHandler+0x2e0>)
 8012638:	4293      	cmp	r3, r2
 801263a:	d800      	bhi.n	801263e <HAL_DMA_IRQHandler+0x8a>
 801263c:	e0ee      	b.n	801281c <HAL_DMA_IRQHandler+0x268>
 801263e:	4a97      	ldr	r2, [pc, #604]	; (801289c <HAL_DMA_IRQHandler+0x2e8>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d100      	bne.n	8012646 <HAL_DMA_IRQHandler+0x92>
 8012644:	e08b      	b.n	801275e <HAL_DMA_IRQHandler+0x1aa>
 8012646:	4a96      	ldr	r2, [pc, #600]	; (80128a0 <HAL_DMA_IRQHandler+0x2ec>)
 8012648:	4293      	cmp	r3, r2
 801264a:	d100      	bne.n	801264e <HAL_DMA_IRQHandler+0x9a>
 801264c:	e0ce      	b.n	80127ec <HAL_DMA_IRQHandler+0x238>
 801264e:	4a95      	ldr	r2, [pc, #596]	; (80128a4 <HAL_DMA_IRQHandler+0x2f0>)
 8012650:	4293      	cmp	r3, r2
 8012652:	d100      	bne.n	8012656 <HAL_DMA_IRQHandler+0xa2>
 8012654:	e0cc      	b.n	80127f0 <HAL_DMA_IRQHandler+0x23c>
 8012656:	4a94      	ldr	r2, [pc, #592]	; (80128a8 <HAL_DMA_IRQHandler+0x2f4>)
 8012658:	4293      	cmp	r3, r2
 801265a:	d100      	bne.n	801265e <HAL_DMA_IRQHandler+0xaa>
 801265c:	e0cb      	b.n	80127f6 <HAL_DMA_IRQHandler+0x242>
 801265e:	4a93      	ldr	r2, [pc, #588]	; (80128ac <HAL_DMA_IRQHandler+0x2f8>)
 8012660:	4293      	cmp	r3, r2
 8012662:	d100      	bne.n	8012666 <HAL_DMA_IRQHandler+0xb2>
 8012664:	e0ca      	b.n	80127fc <HAL_DMA_IRQHandler+0x248>
 8012666:	4a92      	ldr	r2, [pc, #584]	; (80128b0 <HAL_DMA_IRQHandler+0x2fc>)
 8012668:	4293      	cmp	r3, r2
 801266a:	d100      	bne.n	801266e <HAL_DMA_IRQHandler+0xba>
 801266c:	e0c9      	b.n	8012802 <HAL_DMA_IRQHandler+0x24e>
 801266e:	4a89      	ldr	r2, [pc, #548]	; (8012894 <HAL_DMA_IRQHandler+0x2e0>)
 8012670:	4293      	cmp	r3, r2
 8012672:	d100      	bne.n	8012676 <HAL_DMA_IRQHandler+0xc2>
 8012674:	e0c8      	b.n	8012808 <HAL_DMA_IRQHandler+0x254>
 8012676:	4a8f      	ldr	r2, [pc, #572]	; (80128b4 <HAL_DMA_IRQHandler+0x300>)
 8012678:	4293      	cmp	r3, r2
 801267a:	d100      	bne.n	801267e <HAL_DMA_IRQHandler+0xca>
 801267c:	e0c7      	b.n	801280e <HAL_DMA_IRQHandler+0x25a>
 801267e:	4a8e      	ldr	r2, [pc, #568]	; (80128b8 <HAL_DMA_IRQHandler+0x304>)
 8012680:	4293      	cmp	r3, r2
 8012682:	d100      	bne.n	8012686 <HAL_DMA_IRQHandler+0xd2>
 8012684:	e0c5      	b.n	8012812 <HAL_DMA_IRQHandler+0x25e>
 8012686:	4a8d      	ldr	r2, [pc, #564]	; (80128bc <HAL_DMA_IRQHandler+0x308>)
 8012688:	4293      	cmp	r3, r2
 801268a:	d100      	bne.n	801268e <HAL_DMA_IRQHandler+0xda>
 801268c:	e0c3      	b.n	8012816 <HAL_DMA_IRQHandler+0x262>
 801268e:	4a8c      	ldr	r2, [pc, #560]	; (80128c0 <HAL_DMA_IRQHandler+0x30c>)
 8012690:	4293      	cmp	r3, r2
 8012692:	d061      	beq.n	8012758 <HAL_DMA_IRQHandler+0x1a4>
 8012694:	2280      	movs	r2, #128	; 0x80
 8012696:	0312      	lsls	r2, r2, #12
 8012698:	e062      	b.n	8012760 <HAL_DMA_IRQHandler+0x1ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801269a:	2380      	movs	r3, #128	; 0x80
 801269c:	e7bb      	b.n	8012616 <HAL_DMA_IRQHandler+0x62>
 801269e:	2380      	movs	r3, #128	; 0x80
 80126a0:	011b      	lsls	r3, r3, #4
 80126a2:	e7b8      	b.n	8012616 <HAL_DMA_IRQHandler+0x62>
 80126a4:	2380      	movs	r3, #128	; 0x80
 80126a6:	021b      	lsls	r3, r3, #8
 80126a8:	e7b5      	b.n	8012616 <HAL_DMA_IRQHandler+0x62>
 80126aa:	2380      	movs	r3, #128	; 0x80
 80126ac:	031b      	lsls	r3, r3, #12
 80126ae:	e7b2      	b.n	8012616 <HAL_DMA_IRQHandler+0x62>
 80126b0:	2380      	movs	r3, #128	; 0x80
 80126b2:	041b      	lsls	r3, r3, #16
 80126b4:	e7af      	b.n	8012616 <HAL_DMA_IRQHandler+0x62>
 80126b6:	2380      	movs	r3, #128	; 0x80
 80126b8:	051b      	lsls	r3, r3, #20
 80126ba:	e7ac      	b.n	8012616 <HAL_DMA_IRQHandler+0x62>
 80126bc:	2308      	movs	r3, #8
 80126be:	e7aa      	b.n	8012616 <HAL_DMA_IRQHandler+0x62>
 80126c0:	2380      	movs	r3, #128	; 0x80
 80126c2:	e7a8      	b.n	8012616 <HAL_DMA_IRQHandler+0x62>
 80126c4:	2380      	movs	r3, #128	; 0x80
 80126c6:	011b      	lsls	r3, r3, #4
 80126c8:	e7a5      	b.n	8012616 <HAL_DMA_IRQHandler+0x62>
 80126ca:	4b7e      	ldr	r3, [pc, #504]	; (80128c4 <HAL_DMA_IRQHandler+0x310>)
 80126cc:	6819      	ldr	r1, [r3, #0]
 80126ce:	4b73      	ldr	r3, [pc, #460]	; (801289c <HAL_DMA_IRQHandler+0x2e8>)
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d023      	beq.n	801271c <HAL_DMA_IRQHandler+0x168>
 80126d4:	4b72      	ldr	r3, [pc, #456]	; (80128a0 <HAL_DMA_IRQHandler+0x2ec>)
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d026      	beq.n	8012728 <HAL_DMA_IRQHandler+0x174>
 80126da:	4b72      	ldr	r3, [pc, #456]	; (80128a4 <HAL_DMA_IRQHandler+0x2f0>)
 80126dc:	429a      	cmp	r2, r3
 80126de:	d025      	beq.n	801272c <HAL_DMA_IRQHandler+0x178>
 80126e0:	4b71      	ldr	r3, [pc, #452]	; (80128a8 <HAL_DMA_IRQHandler+0x2f4>)
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d025      	beq.n	8012732 <HAL_DMA_IRQHandler+0x17e>
 80126e6:	4b71      	ldr	r3, [pc, #452]	; (80128ac <HAL_DMA_IRQHandler+0x2f8>)
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d025      	beq.n	8012738 <HAL_DMA_IRQHandler+0x184>
 80126ec:	4b70      	ldr	r3, [pc, #448]	; (80128b0 <HAL_DMA_IRQHandler+0x2fc>)
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d025      	beq.n	801273e <HAL_DMA_IRQHandler+0x18a>
 80126f2:	4b68      	ldr	r3, [pc, #416]	; (8012894 <HAL_DMA_IRQHandler+0x2e0>)
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d025      	beq.n	8012744 <HAL_DMA_IRQHandler+0x190>
 80126f8:	4b6e      	ldr	r3, [pc, #440]	; (80128b4 <HAL_DMA_IRQHandler+0x300>)
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d025      	beq.n	801274a <HAL_DMA_IRQHandler+0x196>
 80126fe:	4b6e      	ldr	r3, [pc, #440]	; (80128b8 <HAL_DMA_IRQHandler+0x304>)
 8012700:	429a      	cmp	r2, r3
 8012702:	d024      	beq.n	801274e <HAL_DMA_IRQHandler+0x19a>
 8012704:	4b6d      	ldr	r3, [pc, #436]	; (80128bc <HAL_DMA_IRQHandler+0x308>)
 8012706:	429a      	cmp	r2, r3
 8012708:	d023      	beq.n	8012752 <HAL_DMA_IRQHandler+0x19e>
 801270a:	4b6d      	ldr	r3, [pc, #436]	; (80128c0 <HAL_DMA_IRQHandler+0x30c>)
 801270c:	429a      	cmp	r2, r3
 801270e:	d002      	beq.n	8012716 <HAL_DMA_IRQHandler+0x162>
 8012710:	2380      	movs	r3, #128	; 0x80
 8012712:	031b      	lsls	r3, r3, #12
 8012714:	e003      	b.n	801271e <HAL_DMA_IRQHandler+0x16a>
 8012716:	2380      	movs	r3, #128	; 0x80
 8012718:	021b      	lsls	r3, r3, #8
 801271a:	e000      	b.n	801271e <HAL_DMA_IRQHandler+0x16a>
 801271c:	2308      	movs	r3, #8
 801271e:	400b      	ands	r3, r1
 8012720:	1e59      	subs	r1, r3, #1
 8012722:	418b      	sbcs	r3, r1
 8012724:	b2db      	uxtb	r3, r3
 8012726:	e77a      	b.n	801261e <HAL_DMA_IRQHandler+0x6a>
 8012728:	2380      	movs	r3, #128	; 0x80
 801272a:	e7f8      	b.n	801271e <HAL_DMA_IRQHandler+0x16a>
 801272c:	2380      	movs	r3, #128	; 0x80
 801272e:	011b      	lsls	r3, r3, #4
 8012730:	e7f5      	b.n	801271e <HAL_DMA_IRQHandler+0x16a>
 8012732:	2380      	movs	r3, #128	; 0x80
 8012734:	021b      	lsls	r3, r3, #8
 8012736:	e7f2      	b.n	801271e <HAL_DMA_IRQHandler+0x16a>
 8012738:	2380      	movs	r3, #128	; 0x80
 801273a:	031b      	lsls	r3, r3, #12
 801273c:	e7ef      	b.n	801271e <HAL_DMA_IRQHandler+0x16a>
 801273e:	2380      	movs	r3, #128	; 0x80
 8012740:	041b      	lsls	r3, r3, #16
 8012742:	e7ec      	b.n	801271e <HAL_DMA_IRQHandler+0x16a>
 8012744:	2380      	movs	r3, #128	; 0x80
 8012746:	051b      	lsls	r3, r3, #20
 8012748:	e7e9      	b.n	801271e <HAL_DMA_IRQHandler+0x16a>
 801274a:	2308      	movs	r3, #8
 801274c:	e7e7      	b.n	801271e <HAL_DMA_IRQHandler+0x16a>
 801274e:	2380      	movs	r3, #128	; 0x80
 8012750:	e7e5      	b.n	801271e <HAL_DMA_IRQHandler+0x16a>
 8012752:	2380      	movs	r3, #128	; 0x80
 8012754:	011b      	lsls	r3, r3, #4
 8012756:	e7e2      	b.n	801271e <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8012758:	2280      	movs	r2, #128	; 0x80
 801275a:	0212      	lsls	r2, r2, #8
 801275c:	e000      	b.n	8012760 <HAL_DMA_IRQHandler+0x1ac>
 801275e:	2208      	movs	r2, #8
 8012760:	4b4d      	ldr	r3, [pc, #308]	; (8012898 <HAL_DMA_IRQHandler+0x2e4>)
 8012762:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8012764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012766:	2201      	movs	r2, #1
 8012768:	4313      	orrs	r3, r2
 801276a:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801276c:	2321      	movs	r3, #33	; 0x21
 801276e:	3203      	adds	r2, #3
 8012770:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8012772:	3b01      	subs	r3, #1
 8012774:	2200      	movs	r2, #0
 8012776:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8012778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801277a:	2b00      	cmp	r3, #0
 801277c:	d001      	beq.n	8012782 <HAL_DMA_IRQHandler+0x1ce>
        hdma->XferErrorCallback(hdma);
 801277e:	0020      	movs	r0, r4
 8012780:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012782:	6822      	ldr	r2, [r4, #0]
 8012784:	4b43      	ldr	r3, [pc, #268]	; (8012894 <HAL_DMA_IRQHandler+0x2e0>)
 8012786:	429a      	cmp	r2, r3
 8012788:	d800      	bhi.n	801278c <HAL_DMA_IRQHandler+0x1d8>
 801278a:	e105      	b.n	8012998 <HAL_DMA_IRQHandler+0x3e4>
 801278c:	4b42      	ldr	r3, [pc, #264]	; (8012898 <HAL_DMA_IRQHandler+0x2e4>)
 801278e:	6819      	ldr	r1, [r3, #0]
 8012790:	4b42      	ldr	r3, [pc, #264]	; (801289c <HAL_DMA_IRQHandler+0x2e8>)
 8012792:	429a      	cmp	r2, r3
 8012794:	d100      	bne.n	8012798 <HAL_DMA_IRQHandler+0x1e4>
 8012796:	e0a1      	b.n	80128dc <HAL_DMA_IRQHandler+0x328>
 8012798:	4b41      	ldr	r3, [pc, #260]	; (80128a0 <HAL_DMA_IRQHandler+0x2ec>)
 801279a:	429a      	cmp	r2, r3
 801279c:	d100      	bne.n	80127a0 <HAL_DMA_IRQHandler+0x1ec>
 801279e:	e0e3      	b.n	8012968 <HAL_DMA_IRQHandler+0x3b4>
 80127a0:	4b40      	ldr	r3, [pc, #256]	; (80128a4 <HAL_DMA_IRQHandler+0x2f0>)
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d100      	bne.n	80127a8 <HAL_DMA_IRQHandler+0x1f4>
 80127a6:	e0e1      	b.n	801296c <HAL_DMA_IRQHandler+0x3b8>
 80127a8:	4b3f      	ldr	r3, [pc, #252]	; (80128a8 <HAL_DMA_IRQHandler+0x2f4>)
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d100      	bne.n	80127b0 <HAL_DMA_IRQHandler+0x1fc>
 80127ae:	e0e0      	b.n	8012972 <HAL_DMA_IRQHandler+0x3be>
 80127b0:	4b3e      	ldr	r3, [pc, #248]	; (80128ac <HAL_DMA_IRQHandler+0x2f8>)
 80127b2:	429a      	cmp	r2, r3
 80127b4:	d100      	bne.n	80127b8 <HAL_DMA_IRQHandler+0x204>
 80127b6:	e0df      	b.n	8012978 <HAL_DMA_IRQHandler+0x3c4>
 80127b8:	4b3d      	ldr	r3, [pc, #244]	; (80128b0 <HAL_DMA_IRQHandler+0x2fc>)
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d100      	bne.n	80127c0 <HAL_DMA_IRQHandler+0x20c>
 80127be:	e0de      	b.n	801297e <HAL_DMA_IRQHandler+0x3ca>
 80127c0:	4b34      	ldr	r3, [pc, #208]	; (8012894 <HAL_DMA_IRQHandler+0x2e0>)
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d100      	bne.n	80127c8 <HAL_DMA_IRQHandler+0x214>
 80127c6:	e0dd      	b.n	8012984 <HAL_DMA_IRQHandler+0x3d0>
 80127c8:	4b3a      	ldr	r3, [pc, #232]	; (80128b4 <HAL_DMA_IRQHandler+0x300>)
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d100      	bne.n	80127d0 <HAL_DMA_IRQHandler+0x21c>
 80127ce:	e0dc      	b.n	801298a <HAL_DMA_IRQHandler+0x3d6>
 80127d0:	4b39      	ldr	r3, [pc, #228]	; (80128b8 <HAL_DMA_IRQHandler+0x304>)
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d100      	bne.n	80127d8 <HAL_DMA_IRQHandler+0x224>
 80127d6:	e0da      	b.n	801298e <HAL_DMA_IRQHandler+0x3da>
 80127d8:	4b38      	ldr	r3, [pc, #224]	; (80128bc <HAL_DMA_IRQHandler+0x308>)
 80127da:	429a      	cmp	r2, r3
 80127dc:	d100      	bne.n	80127e0 <HAL_DMA_IRQHandler+0x22c>
 80127de:	e0d8      	b.n	8012992 <HAL_DMA_IRQHandler+0x3de>
 80127e0:	4b37      	ldr	r3, [pc, #220]	; (80128c0 <HAL_DMA_IRQHandler+0x30c>)
 80127e2:	429a      	cmp	r2, r3
 80127e4:	d077      	beq.n	80128d6 <HAL_DMA_IRQHandler+0x322>
 80127e6:	2380      	movs	r3, #128	; 0x80
 80127e8:	02db      	lsls	r3, r3, #11
 80127ea:	e078      	b.n	80128de <HAL_DMA_IRQHandler+0x32a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80127ec:	2280      	movs	r2, #128	; 0x80
 80127ee:	e7b7      	b.n	8012760 <HAL_DMA_IRQHandler+0x1ac>
 80127f0:	2280      	movs	r2, #128	; 0x80
 80127f2:	0112      	lsls	r2, r2, #4
 80127f4:	e7b4      	b.n	8012760 <HAL_DMA_IRQHandler+0x1ac>
 80127f6:	2280      	movs	r2, #128	; 0x80
 80127f8:	0212      	lsls	r2, r2, #8
 80127fa:	e7b1      	b.n	8012760 <HAL_DMA_IRQHandler+0x1ac>
 80127fc:	2280      	movs	r2, #128	; 0x80
 80127fe:	0312      	lsls	r2, r2, #12
 8012800:	e7ae      	b.n	8012760 <HAL_DMA_IRQHandler+0x1ac>
 8012802:	2280      	movs	r2, #128	; 0x80
 8012804:	0412      	lsls	r2, r2, #16
 8012806:	e7ab      	b.n	8012760 <HAL_DMA_IRQHandler+0x1ac>
 8012808:	2280      	movs	r2, #128	; 0x80
 801280a:	0512      	lsls	r2, r2, #20
 801280c:	e7a8      	b.n	8012760 <HAL_DMA_IRQHandler+0x1ac>
 801280e:	2208      	movs	r2, #8
 8012810:	e7a6      	b.n	8012760 <HAL_DMA_IRQHandler+0x1ac>
 8012812:	2280      	movs	r2, #128	; 0x80
 8012814:	e7a4      	b.n	8012760 <HAL_DMA_IRQHandler+0x1ac>
 8012816:	2280      	movs	r2, #128	; 0x80
 8012818:	0112      	lsls	r2, r2, #4
 801281a:	e7a1      	b.n	8012760 <HAL_DMA_IRQHandler+0x1ac>
 801281c:	4a1f      	ldr	r2, [pc, #124]	; (801289c <HAL_DMA_IRQHandler+0x2e8>)
 801281e:	4293      	cmp	r3, r2
 8012820:	d023      	beq.n	801286a <HAL_DMA_IRQHandler+0x2b6>
 8012822:	4a1f      	ldr	r2, [pc, #124]	; (80128a0 <HAL_DMA_IRQHandler+0x2ec>)
 8012824:	4293      	cmp	r3, r2
 8012826:	d024      	beq.n	8012872 <HAL_DMA_IRQHandler+0x2be>
 8012828:	4a1e      	ldr	r2, [pc, #120]	; (80128a4 <HAL_DMA_IRQHandler+0x2f0>)
 801282a:	4293      	cmp	r3, r2
 801282c:	d023      	beq.n	8012876 <HAL_DMA_IRQHandler+0x2c2>
 801282e:	4a1e      	ldr	r2, [pc, #120]	; (80128a8 <HAL_DMA_IRQHandler+0x2f4>)
 8012830:	4293      	cmp	r3, r2
 8012832:	d023      	beq.n	801287c <HAL_DMA_IRQHandler+0x2c8>
 8012834:	4a1d      	ldr	r2, [pc, #116]	; (80128ac <HAL_DMA_IRQHandler+0x2f8>)
 8012836:	4293      	cmp	r3, r2
 8012838:	d023      	beq.n	8012882 <HAL_DMA_IRQHandler+0x2ce>
 801283a:	4a1d      	ldr	r2, [pc, #116]	; (80128b0 <HAL_DMA_IRQHandler+0x2fc>)
 801283c:	4293      	cmp	r3, r2
 801283e:	d023      	beq.n	8012888 <HAL_DMA_IRQHandler+0x2d4>
 8012840:	4a14      	ldr	r2, [pc, #80]	; (8012894 <HAL_DMA_IRQHandler+0x2e0>)
 8012842:	4293      	cmp	r3, r2
 8012844:	d023      	beq.n	801288e <HAL_DMA_IRQHandler+0x2da>
 8012846:	4a1b      	ldr	r2, [pc, #108]	; (80128b4 <HAL_DMA_IRQHandler+0x300>)
 8012848:	4293      	cmp	r3, r2
 801284a:	d03d      	beq.n	80128c8 <HAL_DMA_IRQHandler+0x314>
 801284c:	4a1a      	ldr	r2, [pc, #104]	; (80128b8 <HAL_DMA_IRQHandler+0x304>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d03c      	beq.n	80128cc <HAL_DMA_IRQHandler+0x318>
 8012852:	4a1a      	ldr	r2, [pc, #104]	; (80128bc <HAL_DMA_IRQHandler+0x308>)
 8012854:	4293      	cmp	r3, r2
 8012856:	d03b      	beq.n	80128d0 <HAL_DMA_IRQHandler+0x31c>
 8012858:	4a19      	ldr	r2, [pc, #100]	; (80128c0 <HAL_DMA_IRQHandler+0x30c>)
 801285a:	4293      	cmp	r3, r2
 801285c:	d002      	beq.n	8012864 <HAL_DMA_IRQHandler+0x2b0>
 801285e:	2280      	movs	r2, #128	; 0x80
 8012860:	0312      	lsls	r2, r2, #12
 8012862:	e003      	b.n	801286c <HAL_DMA_IRQHandler+0x2b8>
 8012864:	2280      	movs	r2, #128	; 0x80
 8012866:	0212      	lsls	r2, r2, #8
 8012868:	e000      	b.n	801286c <HAL_DMA_IRQHandler+0x2b8>
 801286a:	2208      	movs	r2, #8
 801286c:	4b15      	ldr	r3, [pc, #84]	; (80128c4 <HAL_DMA_IRQHandler+0x310>)
 801286e:	605a      	str	r2, [r3, #4]
 8012870:	e778      	b.n	8012764 <HAL_DMA_IRQHandler+0x1b0>
 8012872:	2280      	movs	r2, #128	; 0x80
 8012874:	e7fa      	b.n	801286c <HAL_DMA_IRQHandler+0x2b8>
 8012876:	2280      	movs	r2, #128	; 0x80
 8012878:	0112      	lsls	r2, r2, #4
 801287a:	e7f7      	b.n	801286c <HAL_DMA_IRQHandler+0x2b8>
 801287c:	2280      	movs	r2, #128	; 0x80
 801287e:	0212      	lsls	r2, r2, #8
 8012880:	e7f4      	b.n	801286c <HAL_DMA_IRQHandler+0x2b8>
 8012882:	2280      	movs	r2, #128	; 0x80
 8012884:	0312      	lsls	r2, r2, #12
 8012886:	e7f1      	b.n	801286c <HAL_DMA_IRQHandler+0x2b8>
 8012888:	2280      	movs	r2, #128	; 0x80
 801288a:	0412      	lsls	r2, r2, #16
 801288c:	e7ee      	b.n	801286c <HAL_DMA_IRQHandler+0x2b8>
 801288e:	2280      	movs	r2, #128	; 0x80
 8012890:	0512      	lsls	r2, r2, #20
 8012892:	e7eb      	b.n	801286c <HAL_DMA_IRQHandler+0x2b8>
 8012894:	40020080 	.word	0x40020080
 8012898:	40020400 	.word	0x40020400
 801289c:	40020008 	.word	0x40020008
 80128a0:	4002001c 	.word	0x4002001c
 80128a4:	40020030 	.word	0x40020030
 80128a8:	40020044 	.word	0x40020044
 80128ac:	40020058 	.word	0x40020058
 80128b0:	4002006c 	.word	0x4002006c
 80128b4:	40020408 	.word	0x40020408
 80128b8:	4002041c 	.word	0x4002041c
 80128bc:	40020430 	.word	0x40020430
 80128c0:	40020444 	.word	0x40020444
 80128c4:	40020000 	.word	0x40020000
 80128c8:	2208      	movs	r2, #8
 80128ca:	e7cf      	b.n	801286c <HAL_DMA_IRQHandler+0x2b8>
 80128cc:	2280      	movs	r2, #128	; 0x80
 80128ce:	e7cd      	b.n	801286c <HAL_DMA_IRQHandler+0x2b8>
 80128d0:	2280      	movs	r2, #128	; 0x80
 80128d2:	0112      	lsls	r2, r2, #4
 80128d4:	e7ca      	b.n	801286c <HAL_DMA_IRQHandler+0x2b8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80128d6:	2380      	movs	r3, #128	; 0x80
 80128d8:	01db      	lsls	r3, r3, #7
 80128da:	e000      	b.n	80128de <HAL_DMA_IRQHandler+0x32a>
 80128dc:	2304      	movs	r3, #4
 80128de:	400b      	ands	r3, r1
 80128e0:	1e59      	subs	r1, r3, #1
 80128e2:	418b      	sbcs	r3, r1
 80128e4:	b2db      	uxtb	r3, r3
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d100      	bne.n	80128ec <HAL_DMA_IRQHandler+0x338>
 80128ea:	e0aa      	b.n	8012a42 <HAL_DMA_IRQHandler+0x48e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80128ec:	6813      	ldr	r3, [r2, #0]
 80128ee:	075b      	lsls	r3, r3, #29
 80128f0:	d400      	bmi.n	80128f4 <HAL_DMA_IRQHandler+0x340>
 80128f2:	e0a6      	b.n	8012a42 <HAL_DMA_IRQHandler+0x48e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80128f4:	6813      	ldr	r3, [r2, #0]
 80128f6:	069b      	lsls	r3, r3, #26
 80128f8:	d403      	bmi.n	8012902 <HAL_DMA_IRQHandler+0x34e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80128fa:	6813      	ldr	r3, [r2, #0]
 80128fc:	2104      	movs	r1, #4
 80128fe:	438b      	bics	r3, r1
 8012900:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012902:	6823      	ldr	r3, [r4, #0]
 8012904:	4a98      	ldr	r2, [pc, #608]	; (8012b68 <HAL_DMA_IRQHandler+0x5b4>)
 8012906:	4293      	cmp	r3, r2
 8012908:	d800      	bhi.n	801290c <HAL_DMA_IRQHandler+0x358>
 801290a:	e0e7      	b.n	8012adc <HAL_DMA_IRQHandler+0x528>
 801290c:	4a97      	ldr	r2, [pc, #604]	; (8012b6c <HAL_DMA_IRQHandler+0x5b8>)
 801290e:	4293      	cmp	r3, r2
 8012910:	d100      	bne.n	8012914 <HAL_DMA_IRQHandler+0x360>
 8012912:	e08b      	b.n	8012a2c <HAL_DMA_IRQHandler+0x478>
 8012914:	4a96      	ldr	r2, [pc, #600]	; (8012b70 <HAL_DMA_IRQHandler+0x5bc>)
 8012916:	4293      	cmp	r3, r2
 8012918:	d100      	bne.n	801291c <HAL_DMA_IRQHandler+0x368>
 801291a:	e0c7      	b.n	8012aac <HAL_DMA_IRQHandler+0x4f8>
 801291c:	4a95      	ldr	r2, [pc, #596]	; (8012b74 <HAL_DMA_IRQHandler+0x5c0>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d100      	bne.n	8012924 <HAL_DMA_IRQHandler+0x370>
 8012922:	e0c5      	b.n	8012ab0 <HAL_DMA_IRQHandler+0x4fc>
 8012924:	4a94      	ldr	r2, [pc, #592]	; (8012b78 <HAL_DMA_IRQHandler+0x5c4>)
 8012926:	4293      	cmp	r3, r2
 8012928:	d100      	bne.n	801292c <HAL_DMA_IRQHandler+0x378>
 801292a:	e0c4      	b.n	8012ab6 <HAL_DMA_IRQHandler+0x502>
 801292c:	4a93      	ldr	r2, [pc, #588]	; (8012b7c <HAL_DMA_IRQHandler+0x5c8>)
 801292e:	4293      	cmp	r3, r2
 8012930:	d100      	bne.n	8012934 <HAL_DMA_IRQHandler+0x380>
 8012932:	e0c3      	b.n	8012abc <HAL_DMA_IRQHandler+0x508>
 8012934:	4a92      	ldr	r2, [pc, #584]	; (8012b80 <HAL_DMA_IRQHandler+0x5cc>)
 8012936:	4293      	cmp	r3, r2
 8012938:	d100      	bne.n	801293c <HAL_DMA_IRQHandler+0x388>
 801293a:	e0c2      	b.n	8012ac2 <HAL_DMA_IRQHandler+0x50e>
 801293c:	4a8a      	ldr	r2, [pc, #552]	; (8012b68 <HAL_DMA_IRQHandler+0x5b4>)
 801293e:	4293      	cmp	r3, r2
 8012940:	d100      	bne.n	8012944 <HAL_DMA_IRQHandler+0x390>
 8012942:	e0c1      	b.n	8012ac8 <HAL_DMA_IRQHandler+0x514>
 8012944:	4a8f      	ldr	r2, [pc, #572]	; (8012b84 <HAL_DMA_IRQHandler+0x5d0>)
 8012946:	4293      	cmp	r3, r2
 8012948:	d100      	bne.n	801294c <HAL_DMA_IRQHandler+0x398>
 801294a:	e0c0      	b.n	8012ace <HAL_DMA_IRQHandler+0x51a>
 801294c:	4a8e      	ldr	r2, [pc, #568]	; (8012b88 <HAL_DMA_IRQHandler+0x5d4>)
 801294e:	4293      	cmp	r3, r2
 8012950:	d100      	bne.n	8012954 <HAL_DMA_IRQHandler+0x3a0>
 8012952:	e0be      	b.n	8012ad2 <HAL_DMA_IRQHandler+0x51e>
 8012954:	4a8d      	ldr	r2, [pc, #564]	; (8012b8c <HAL_DMA_IRQHandler+0x5d8>)
 8012956:	4293      	cmp	r3, r2
 8012958:	d100      	bne.n	801295c <HAL_DMA_IRQHandler+0x3a8>
 801295a:	e0bc      	b.n	8012ad6 <HAL_DMA_IRQHandler+0x522>
 801295c:	4a8c      	ldr	r2, [pc, #560]	; (8012b90 <HAL_DMA_IRQHandler+0x5dc>)
 801295e:	4293      	cmp	r3, r2
 8012960:	d061      	beq.n	8012a26 <HAL_DMA_IRQHandler+0x472>
 8012962:	2280      	movs	r2, #128	; 0x80
 8012964:	02d2      	lsls	r2, r2, #11
 8012966:	e062      	b.n	8012a2e <HAL_DMA_IRQHandler+0x47a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012968:	2340      	movs	r3, #64	; 0x40
 801296a:	e7b8      	b.n	80128de <HAL_DMA_IRQHandler+0x32a>
 801296c:	2380      	movs	r3, #128	; 0x80
 801296e:	00db      	lsls	r3, r3, #3
 8012970:	e7b5      	b.n	80128de <HAL_DMA_IRQHandler+0x32a>
 8012972:	2380      	movs	r3, #128	; 0x80
 8012974:	01db      	lsls	r3, r3, #7
 8012976:	e7b2      	b.n	80128de <HAL_DMA_IRQHandler+0x32a>
 8012978:	2380      	movs	r3, #128	; 0x80
 801297a:	02db      	lsls	r3, r3, #11
 801297c:	e7af      	b.n	80128de <HAL_DMA_IRQHandler+0x32a>
 801297e:	2380      	movs	r3, #128	; 0x80
 8012980:	03db      	lsls	r3, r3, #15
 8012982:	e7ac      	b.n	80128de <HAL_DMA_IRQHandler+0x32a>
 8012984:	2380      	movs	r3, #128	; 0x80
 8012986:	04db      	lsls	r3, r3, #19
 8012988:	e7a9      	b.n	80128de <HAL_DMA_IRQHandler+0x32a>
 801298a:	2304      	movs	r3, #4
 801298c:	e7a7      	b.n	80128de <HAL_DMA_IRQHandler+0x32a>
 801298e:	2340      	movs	r3, #64	; 0x40
 8012990:	e7a5      	b.n	80128de <HAL_DMA_IRQHandler+0x32a>
 8012992:	2380      	movs	r3, #128	; 0x80
 8012994:	00db      	lsls	r3, r3, #3
 8012996:	e7a2      	b.n	80128de <HAL_DMA_IRQHandler+0x32a>
 8012998:	4b7e      	ldr	r3, [pc, #504]	; (8012b94 <HAL_DMA_IRQHandler+0x5e0>)
 801299a:	6819      	ldr	r1, [r3, #0]
 801299c:	4b73      	ldr	r3, [pc, #460]	; (8012b6c <HAL_DMA_IRQHandler+0x5b8>)
 801299e:	429a      	cmp	r2, r3
 80129a0:	d023      	beq.n	80129ea <HAL_DMA_IRQHandler+0x436>
 80129a2:	4b73      	ldr	r3, [pc, #460]	; (8012b70 <HAL_DMA_IRQHandler+0x5bc>)
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d026      	beq.n	80129f6 <HAL_DMA_IRQHandler+0x442>
 80129a8:	4b72      	ldr	r3, [pc, #456]	; (8012b74 <HAL_DMA_IRQHandler+0x5c0>)
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d025      	beq.n	80129fa <HAL_DMA_IRQHandler+0x446>
 80129ae:	4b72      	ldr	r3, [pc, #456]	; (8012b78 <HAL_DMA_IRQHandler+0x5c4>)
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d025      	beq.n	8012a00 <HAL_DMA_IRQHandler+0x44c>
 80129b4:	4b71      	ldr	r3, [pc, #452]	; (8012b7c <HAL_DMA_IRQHandler+0x5c8>)
 80129b6:	429a      	cmp	r2, r3
 80129b8:	d025      	beq.n	8012a06 <HAL_DMA_IRQHandler+0x452>
 80129ba:	4b71      	ldr	r3, [pc, #452]	; (8012b80 <HAL_DMA_IRQHandler+0x5cc>)
 80129bc:	429a      	cmp	r2, r3
 80129be:	d025      	beq.n	8012a0c <HAL_DMA_IRQHandler+0x458>
 80129c0:	4b69      	ldr	r3, [pc, #420]	; (8012b68 <HAL_DMA_IRQHandler+0x5b4>)
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d025      	beq.n	8012a12 <HAL_DMA_IRQHandler+0x45e>
 80129c6:	4b6f      	ldr	r3, [pc, #444]	; (8012b84 <HAL_DMA_IRQHandler+0x5d0>)
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d025      	beq.n	8012a18 <HAL_DMA_IRQHandler+0x464>
 80129cc:	4b6e      	ldr	r3, [pc, #440]	; (8012b88 <HAL_DMA_IRQHandler+0x5d4>)
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d024      	beq.n	8012a1c <HAL_DMA_IRQHandler+0x468>
 80129d2:	4b6e      	ldr	r3, [pc, #440]	; (8012b8c <HAL_DMA_IRQHandler+0x5d8>)
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d023      	beq.n	8012a20 <HAL_DMA_IRQHandler+0x46c>
 80129d8:	4b6d      	ldr	r3, [pc, #436]	; (8012b90 <HAL_DMA_IRQHandler+0x5dc>)
 80129da:	429a      	cmp	r2, r3
 80129dc:	d002      	beq.n	80129e4 <HAL_DMA_IRQHandler+0x430>
 80129de:	2380      	movs	r3, #128	; 0x80
 80129e0:	02db      	lsls	r3, r3, #11
 80129e2:	e003      	b.n	80129ec <HAL_DMA_IRQHandler+0x438>
 80129e4:	2380      	movs	r3, #128	; 0x80
 80129e6:	01db      	lsls	r3, r3, #7
 80129e8:	e000      	b.n	80129ec <HAL_DMA_IRQHandler+0x438>
 80129ea:	2304      	movs	r3, #4
 80129ec:	400b      	ands	r3, r1
 80129ee:	1e59      	subs	r1, r3, #1
 80129f0:	418b      	sbcs	r3, r1
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	e777      	b.n	80128e6 <HAL_DMA_IRQHandler+0x332>
 80129f6:	2340      	movs	r3, #64	; 0x40
 80129f8:	e7f8      	b.n	80129ec <HAL_DMA_IRQHandler+0x438>
 80129fa:	2380      	movs	r3, #128	; 0x80
 80129fc:	00db      	lsls	r3, r3, #3
 80129fe:	e7f5      	b.n	80129ec <HAL_DMA_IRQHandler+0x438>
 8012a00:	2380      	movs	r3, #128	; 0x80
 8012a02:	01db      	lsls	r3, r3, #7
 8012a04:	e7f2      	b.n	80129ec <HAL_DMA_IRQHandler+0x438>
 8012a06:	2380      	movs	r3, #128	; 0x80
 8012a08:	02db      	lsls	r3, r3, #11
 8012a0a:	e7ef      	b.n	80129ec <HAL_DMA_IRQHandler+0x438>
 8012a0c:	2380      	movs	r3, #128	; 0x80
 8012a0e:	03db      	lsls	r3, r3, #15
 8012a10:	e7ec      	b.n	80129ec <HAL_DMA_IRQHandler+0x438>
 8012a12:	2380      	movs	r3, #128	; 0x80
 8012a14:	04db      	lsls	r3, r3, #19
 8012a16:	e7e9      	b.n	80129ec <HAL_DMA_IRQHandler+0x438>
 8012a18:	2304      	movs	r3, #4
 8012a1a:	e7e7      	b.n	80129ec <HAL_DMA_IRQHandler+0x438>
 8012a1c:	2340      	movs	r3, #64	; 0x40
 8012a1e:	e7e5      	b.n	80129ec <HAL_DMA_IRQHandler+0x438>
 8012a20:	2380      	movs	r3, #128	; 0x80
 8012a22:	00db      	lsls	r3, r3, #3
 8012a24:	e7e2      	b.n	80129ec <HAL_DMA_IRQHandler+0x438>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012a26:	2280      	movs	r2, #128	; 0x80
 8012a28:	01d2      	lsls	r2, r2, #7
 8012a2a:	e000      	b.n	8012a2e <HAL_DMA_IRQHandler+0x47a>
 8012a2c:	2204      	movs	r2, #4
 8012a2e:	4b5a      	ldr	r3, [pc, #360]	; (8012b98 <HAL_DMA_IRQHandler+0x5e4>)
 8012a30:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8012a32:	2321      	movs	r3, #33	; 0x21
 8012a34:	2211      	movs	r2, #17
 8012a36:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8012a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d001      	beq.n	8012a42 <HAL_DMA_IRQHandler+0x48e>
        hdma->XferHalfCpltCallback(hdma);
 8012a3e:	0020      	movs	r0, r4
 8012a40:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8012a42:	6822      	ldr	r2, [r4, #0]
 8012a44:	4b48      	ldr	r3, [pc, #288]	; (8012b68 <HAL_DMA_IRQHandler+0x5b4>)
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d800      	bhi.n	8012a4c <HAL_DMA_IRQHandler+0x498>
 8012a4a:	e105      	b.n	8012c58 <HAL_DMA_IRQHandler+0x6a4>
 8012a4c:	4b52      	ldr	r3, [pc, #328]	; (8012b98 <HAL_DMA_IRQHandler+0x5e4>)
 8012a4e:	6819      	ldr	r1, [r3, #0]
 8012a50:	4b46      	ldr	r3, [pc, #280]	; (8012b6c <HAL_DMA_IRQHandler+0x5b8>)
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d100      	bne.n	8012a58 <HAL_DMA_IRQHandler+0x4a4>
 8012a56:	e0a1      	b.n	8012b9c <HAL_DMA_IRQHandler+0x5e8>
 8012a58:	4b45      	ldr	r3, [pc, #276]	; (8012b70 <HAL_DMA_IRQHandler+0x5bc>)
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d100      	bne.n	8012a60 <HAL_DMA_IRQHandler+0x4ac>
 8012a5e:	e0e3      	b.n	8012c28 <HAL_DMA_IRQHandler+0x674>
 8012a60:	4b44      	ldr	r3, [pc, #272]	; (8012b74 <HAL_DMA_IRQHandler+0x5c0>)
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d100      	bne.n	8012a68 <HAL_DMA_IRQHandler+0x4b4>
 8012a66:	e0e1      	b.n	8012c2c <HAL_DMA_IRQHandler+0x678>
 8012a68:	4b43      	ldr	r3, [pc, #268]	; (8012b78 <HAL_DMA_IRQHandler+0x5c4>)
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d100      	bne.n	8012a70 <HAL_DMA_IRQHandler+0x4bc>
 8012a6e:	e0e0      	b.n	8012c32 <HAL_DMA_IRQHandler+0x67e>
 8012a70:	4b42      	ldr	r3, [pc, #264]	; (8012b7c <HAL_DMA_IRQHandler+0x5c8>)
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d100      	bne.n	8012a78 <HAL_DMA_IRQHandler+0x4c4>
 8012a76:	e0df      	b.n	8012c38 <HAL_DMA_IRQHandler+0x684>
 8012a78:	4b41      	ldr	r3, [pc, #260]	; (8012b80 <HAL_DMA_IRQHandler+0x5cc>)
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d100      	bne.n	8012a80 <HAL_DMA_IRQHandler+0x4cc>
 8012a7e:	e0de      	b.n	8012c3e <HAL_DMA_IRQHandler+0x68a>
 8012a80:	4b39      	ldr	r3, [pc, #228]	; (8012b68 <HAL_DMA_IRQHandler+0x5b4>)
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d100      	bne.n	8012a88 <HAL_DMA_IRQHandler+0x4d4>
 8012a86:	e0dd      	b.n	8012c44 <HAL_DMA_IRQHandler+0x690>
 8012a88:	4b3e      	ldr	r3, [pc, #248]	; (8012b84 <HAL_DMA_IRQHandler+0x5d0>)
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d100      	bne.n	8012a90 <HAL_DMA_IRQHandler+0x4dc>
 8012a8e:	e0dc      	b.n	8012c4a <HAL_DMA_IRQHandler+0x696>
 8012a90:	4b3d      	ldr	r3, [pc, #244]	; (8012b88 <HAL_DMA_IRQHandler+0x5d4>)
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d100      	bne.n	8012a98 <HAL_DMA_IRQHandler+0x4e4>
 8012a96:	e0da      	b.n	8012c4e <HAL_DMA_IRQHandler+0x69a>
 8012a98:	4b3c      	ldr	r3, [pc, #240]	; (8012b8c <HAL_DMA_IRQHandler+0x5d8>)
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d100      	bne.n	8012aa0 <HAL_DMA_IRQHandler+0x4ec>
 8012a9e:	e0d8      	b.n	8012c52 <HAL_DMA_IRQHandler+0x69e>
 8012aa0:	4b3b      	ldr	r3, [pc, #236]	; (8012b90 <HAL_DMA_IRQHandler+0x5dc>)
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d05d      	beq.n	8012b62 <HAL_DMA_IRQHandler+0x5ae>
 8012aa6:	2380      	movs	r3, #128	; 0x80
 8012aa8:	029b      	lsls	r3, r3, #10
 8012aaa:	e078      	b.n	8012b9e <HAL_DMA_IRQHandler+0x5ea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012aac:	2240      	movs	r2, #64	; 0x40
 8012aae:	e7be      	b.n	8012a2e <HAL_DMA_IRQHandler+0x47a>
 8012ab0:	2280      	movs	r2, #128	; 0x80
 8012ab2:	00d2      	lsls	r2, r2, #3
 8012ab4:	e7bb      	b.n	8012a2e <HAL_DMA_IRQHandler+0x47a>
 8012ab6:	2280      	movs	r2, #128	; 0x80
 8012ab8:	01d2      	lsls	r2, r2, #7
 8012aba:	e7b8      	b.n	8012a2e <HAL_DMA_IRQHandler+0x47a>
 8012abc:	2280      	movs	r2, #128	; 0x80
 8012abe:	02d2      	lsls	r2, r2, #11
 8012ac0:	e7b5      	b.n	8012a2e <HAL_DMA_IRQHandler+0x47a>
 8012ac2:	2280      	movs	r2, #128	; 0x80
 8012ac4:	03d2      	lsls	r2, r2, #15
 8012ac6:	e7b2      	b.n	8012a2e <HAL_DMA_IRQHandler+0x47a>
 8012ac8:	2280      	movs	r2, #128	; 0x80
 8012aca:	04d2      	lsls	r2, r2, #19
 8012acc:	e7af      	b.n	8012a2e <HAL_DMA_IRQHandler+0x47a>
 8012ace:	2204      	movs	r2, #4
 8012ad0:	e7ad      	b.n	8012a2e <HAL_DMA_IRQHandler+0x47a>
 8012ad2:	2240      	movs	r2, #64	; 0x40
 8012ad4:	e7ab      	b.n	8012a2e <HAL_DMA_IRQHandler+0x47a>
 8012ad6:	2280      	movs	r2, #128	; 0x80
 8012ad8:	00d2      	lsls	r2, r2, #3
 8012ada:	e7a8      	b.n	8012a2e <HAL_DMA_IRQHandler+0x47a>
 8012adc:	4a23      	ldr	r2, [pc, #140]	; (8012b6c <HAL_DMA_IRQHandler+0x5b8>)
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d023      	beq.n	8012b2a <HAL_DMA_IRQHandler+0x576>
 8012ae2:	4a23      	ldr	r2, [pc, #140]	; (8012b70 <HAL_DMA_IRQHandler+0x5bc>)
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	d024      	beq.n	8012b32 <HAL_DMA_IRQHandler+0x57e>
 8012ae8:	4a22      	ldr	r2, [pc, #136]	; (8012b74 <HAL_DMA_IRQHandler+0x5c0>)
 8012aea:	4293      	cmp	r3, r2
 8012aec:	d023      	beq.n	8012b36 <HAL_DMA_IRQHandler+0x582>
 8012aee:	4a22      	ldr	r2, [pc, #136]	; (8012b78 <HAL_DMA_IRQHandler+0x5c4>)
 8012af0:	4293      	cmp	r3, r2
 8012af2:	d023      	beq.n	8012b3c <HAL_DMA_IRQHandler+0x588>
 8012af4:	4a21      	ldr	r2, [pc, #132]	; (8012b7c <HAL_DMA_IRQHandler+0x5c8>)
 8012af6:	4293      	cmp	r3, r2
 8012af8:	d023      	beq.n	8012b42 <HAL_DMA_IRQHandler+0x58e>
 8012afa:	4a21      	ldr	r2, [pc, #132]	; (8012b80 <HAL_DMA_IRQHandler+0x5cc>)
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d023      	beq.n	8012b48 <HAL_DMA_IRQHandler+0x594>
 8012b00:	4a19      	ldr	r2, [pc, #100]	; (8012b68 <HAL_DMA_IRQHandler+0x5b4>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d023      	beq.n	8012b4e <HAL_DMA_IRQHandler+0x59a>
 8012b06:	4a1f      	ldr	r2, [pc, #124]	; (8012b84 <HAL_DMA_IRQHandler+0x5d0>)
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d023      	beq.n	8012b54 <HAL_DMA_IRQHandler+0x5a0>
 8012b0c:	4a1e      	ldr	r2, [pc, #120]	; (8012b88 <HAL_DMA_IRQHandler+0x5d4>)
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	d022      	beq.n	8012b58 <HAL_DMA_IRQHandler+0x5a4>
 8012b12:	4a1e      	ldr	r2, [pc, #120]	; (8012b8c <HAL_DMA_IRQHandler+0x5d8>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d021      	beq.n	8012b5c <HAL_DMA_IRQHandler+0x5a8>
 8012b18:	4a1d      	ldr	r2, [pc, #116]	; (8012b90 <HAL_DMA_IRQHandler+0x5dc>)
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d002      	beq.n	8012b24 <HAL_DMA_IRQHandler+0x570>
 8012b1e:	2280      	movs	r2, #128	; 0x80
 8012b20:	02d2      	lsls	r2, r2, #11
 8012b22:	e003      	b.n	8012b2c <HAL_DMA_IRQHandler+0x578>
 8012b24:	2280      	movs	r2, #128	; 0x80
 8012b26:	01d2      	lsls	r2, r2, #7
 8012b28:	e000      	b.n	8012b2c <HAL_DMA_IRQHandler+0x578>
 8012b2a:	2204      	movs	r2, #4
 8012b2c:	4b19      	ldr	r3, [pc, #100]	; (8012b94 <HAL_DMA_IRQHandler+0x5e0>)
 8012b2e:	605a      	str	r2, [r3, #4]
 8012b30:	e77f      	b.n	8012a32 <HAL_DMA_IRQHandler+0x47e>
 8012b32:	2240      	movs	r2, #64	; 0x40
 8012b34:	e7fa      	b.n	8012b2c <HAL_DMA_IRQHandler+0x578>
 8012b36:	2280      	movs	r2, #128	; 0x80
 8012b38:	00d2      	lsls	r2, r2, #3
 8012b3a:	e7f7      	b.n	8012b2c <HAL_DMA_IRQHandler+0x578>
 8012b3c:	2280      	movs	r2, #128	; 0x80
 8012b3e:	01d2      	lsls	r2, r2, #7
 8012b40:	e7f4      	b.n	8012b2c <HAL_DMA_IRQHandler+0x578>
 8012b42:	2280      	movs	r2, #128	; 0x80
 8012b44:	02d2      	lsls	r2, r2, #11
 8012b46:	e7f1      	b.n	8012b2c <HAL_DMA_IRQHandler+0x578>
 8012b48:	2280      	movs	r2, #128	; 0x80
 8012b4a:	03d2      	lsls	r2, r2, #15
 8012b4c:	e7ee      	b.n	8012b2c <HAL_DMA_IRQHandler+0x578>
 8012b4e:	2280      	movs	r2, #128	; 0x80
 8012b50:	04d2      	lsls	r2, r2, #19
 8012b52:	e7eb      	b.n	8012b2c <HAL_DMA_IRQHandler+0x578>
 8012b54:	2204      	movs	r2, #4
 8012b56:	e7e9      	b.n	8012b2c <HAL_DMA_IRQHandler+0x578>
 8012b58:	2240      	movs	r2, #64	; 0x40
 8012b5a:	e7e7      	b.n	8012b2c <HAL_DMA_IRQHandler+0x578>
 8012b5c:	2280      	movs	r2, #128	; 0x80
 8012b5e:	00d2      	lsls	r2, r2, #3
 8012b60:	e7e4      	b.n	8012b2c <HAL_DMA_IRQHandler+0x578>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8012b62:	2380      	movs	r3, #128	; 0x80
 8012b64:	019b      	lsls	r3, r3, #6
 8012b66:	e01a      	b.n	8012b9e <HAL_DMA_IRQHandler+0x5ea>
 8012b68:	40020080 	.word	0x40020080
 8012b6c:	40020008 	.word	0x40020008
 8012b70:	4002001c 	.word	0x4002001c
 8012b74:	40020030 	.word	0x40020030
 8012b78:	40020044 	.word	0x40020044
 8012b7c:	40020058 	.word	0x40020058
 8012b80:	4002006c 	.word	0x4002006c
 8012b84:	40020408 	.word	0x40020408
 8012b88:	4002041c 	.word	0x4002041c
 8012b8c:	40020430 	.word	0x40020430
 8012b90:	40020444 	.word	0x40020444
 8012b94:	40020000 	.word	0x40020000
 8012b98:	40020400 	.word	0x40020400
 8012b9c:	2302      	movs	r3, #2
 8012b9e:	400b      	ands	r3, r1
 8012ba0:	1e59      	subs	r1, r3, #1
 8012ba2:	418b      	sbcs	r3, r1
 8012ba4:	b2db      	uxtb	r3, r3
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d100      	bne.n	8012bac <HAL_DMA_IRQHandler+0x5f8>
 8012baa:	e0af      	b.n	8012d0c <HAL_DMA_IRQHandler+0x758>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8012bac:	6813      	ldr	r3, [r2, #0]
 8012bae:	079b      	lsls	r3, r3, #30
 8012bb0:	d400      	bmi.n	8012bb4 <HAL_DMA_IRQHandler+0x600>
 8012bb2:	e0ab      	b.n	8012d0c <HAL_DMA_IRQHandler+0x758>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8012bb4:	6813      	ldr	r3, [r2, #0]
 8012bb6:	069b      	lsls	r3, r3, #26
 8012bb8:	d403      	bmi.n	8012bc2 <HAL_DMA_IRQHandler+0x60e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8012bba:	6813      	ldr	r3, [r2, #0]
 8012bbc:	2102      	movs	r1, #2
 8012bbe:	438b      	bics	r3, r1
 8012bc0:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012bc2:	6823      	ldr	r3, [r4, #0]
 8012bc4:	4a7f      	ldr	r2, [pc, #508]	; (8012dc4 <HAL_DMA_IRQHandler+0x810>)
 8012bc6:	4293      	cmp	r3, r2
 8012bc8:	d800      	bhi.n	8012bcc <HAL_DMA_IRQHandler+0x618>
 8012bca:	e0b8      	b.n	8012d3e <HAL_DMA_IRQHandler+0x78a>
 8012bcc:	4a7e      	ldr	r2, [pc, #504]	; (8012dc8 <HAL_DMA_IRQHandler+0x814>)
 8012bce:	4293      	cmp	r3, r2
 8012bd0:	d100      	bne.n	8012bd4 <HAL_DMA_IRQHandler+0x620>
 8012bd2:	e08b      	b.n	8012cec <HAL_DMA_IRQHandler+0x738>
 8012bd4:	4a7d      	ldr	r2, [pc, #500]	; (8012dcc <HAL_DMA_IRQHandler+0x818>)
 8012bd6:	4293      	cmp	r3, r2
 8012bd8:	d100      	bne.n	8012bdc <HAL_DMA_IRQHandler+0x628>
 8012bda:	e098      	b.n	8012d0e <HAL_DMA_IRQHandler+0x75a>
 8012bdc:	4a7c      	ldr	r2, [pc, #496]	; (8012dd0 <HAL_DMA_IRQHandler+0x81c>)
 8012bde:	4293      	cmp	r3, r2
 8012be0:	d100      	bne.n	8012be4 <HAL_DMA_IRQHandler+0x630>
 8012be2:	e096      	b.n	8012d12 <HAL_DMA_IRQHandler+0x75e>
 8012be4:	4a7b      	ldr	r2, [pc, #492]	; (8012dd4 <HAL_DMA_IRQHandler+0x820>)
 8012be6:	4293      	cmp	r3, r2
 8012be8:	d100      	bne.n	8012bec <HAL_DMA_IRQHandler+0x638>
 8012bea:	e095      	b.n	8012d18 <HAL_DMA_IRQHandler+0x764>
 8012bec:	4a7a      	ldr	r2, [pc, #488]	; (8012dd8 <HAL_DMA_IRQHandler+0x824>)
 8012bee:	4293      	cmp	r3, r2
 8012bf0:	d100      	bne.n	8012bf4 <HAL_DMA_IRQHandler+0x640>
 8012bf2:	e094      	b.n	8012d1e <HAL_DMA_IRQHandler+0x76a>
 8012bf4:	4a79      	ldr	r2, [pc, #484]	; (8012ddc <HAL_DMA_IRQHandler+0x828>)
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d100      	bne.n	8012bfc <HAL_DMA_IRQHandler+0x648>
 8012bfa:	e093      	b.n	8012d24 <HAL_DMA_IRQHandler+0x770>
 8012bfc:	4a71      	ldr	r2, [pc, #452]	; (8012dc4 <HAL_DMA_IRQHandler+0x810>)
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	d100      	bne.n	8012c04 <HAL_DMA_IRQHandler+0x650>
 8012c02:	e092      	b.n	8012d2a <HAL_DMA_IRQHandler+0x776>
 8012c04:	4a76      	ldr	r2, [pc, #472]	; (8012de0 <HAL_DMA_IRQHandler+0x82c>)
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d100      	bne.n	8012c0c <HAL_DMA_IRQHandler+0x658>
 8012c0a:	e091      	b.n	8012d30 <HAL_DMA_IRQHandler+0x77c>
 8012c0c:	4a75      	ldr	r2, [pc, #468]	; (8012de4 <HAL_DMA_IRQHandler+0x830>)
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	d100      	bne.n	8012c14 <HAL_DMA_IRQHandler+0x660>
 8012c12:	e08f      	b.n	8012d34 <HAL_DMA_IRQHandler+0x780>
 8012c14:	4a74      	ldr	r2, [pc, #464]	; (8012de8 <HAL_DMA_IRQHandler+0x834>)
 8012c16:	4293      	cmp	r3, r2
 8012c18:	d100      	bne.n	8012c1c <HAL_DMA_IRQHandler+0x668>
 8012c1a:	e08d      	b.n	8012d38 <HAL_DMA_IRQHandler+0x784>
 8012c1c:	4a73      	ldr	r2, [pc, #460]	; (8012dec <HAL_DMA_IRQHandler+0x838>)
 8012c1e:	4293      	cmp	r3, r2
 8012c20:	d061      	beq.n	8012ce6 <HAL_DMA_IRQHandler+0x732>
 8012c22:	2280      	movs	r2, #128	; 0x80
 8012c24:	0292      	lsls	r2, r2, #10
 8012c26:	e062      	b.n	8012cee <HAL_DMA_IRQHandler+0x73a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8012c28:	2320      	movs	r3, #32
 8012c2a:	e7b8      	b.n	8012b9e <HAL_DMA_IRQHandler+0x5ea>
 8012c2c:	2380      	movs	r3, #128	; 0x80
 8012c2e:	009b      	lsls	r3, r3, #2
 8012c30:	e7b5      	b.n	8012b9e <HAL_DMA_IRQHandler+0x5ea>
 8012c32:	2380      	movs	r3, #128	; 0x80
 8012c34:	019b      	lsls	r3, r3, #6
 8012c36:	e7b2      	b.n	8012b9e <HAL_DMA_IRQHandler+0x5ea>
 8012c38:	2380      	movs	r3, #128	; 0x80
 8012c3a:	029b      	lsls	r3, r3, #10
 8012c3c:	e7af      	b.n	8012b9e <HAL_DMA_IRQHandler+0x5ea>
 8012c3e:	2380      	movs	r3, #128	; 0x80
 8012c40:	039b      	lsls	r3, r3, #14
 8012c42:	e7ac      	b.n	8012b9e <HAL_DMA_IRQHandler+0x5ea>
 8012c44:	2380      	movs	r3, #128	; 0x80
 8012c46:	049b      	lsls	r3, r3, #18
 8012c48:	e7a9      	b.n	8012b9e <HAL_DMA_IRQHandler+0x5ea>
 8012c4a:	2302      	movs	r3, #2
 8012c4c:	e7a7      	b.n	8012b9e <HAL_DMA_IRQHandler+0x5ea>
 8012c4e:	2320      	movs	r3, #32
 8012c50:	e7a5      	b.n	8012b9e <HAL_DMA_IRQHandler+0x5ea>
 8012c52:	2380      	movs	r3, #128	; 0x80
 8012c54:	009b      	lsls	r3, r3, #2
 8012c56:	e7a2      	b.n	8012b9e <HAL_DMA_IRQHandler+0x5ea>
 8012c58:	4b65      	ldr	r3, [pc, #404]	; (8012df0 <HAL_DMA_IRQHandler+0x83c>)
 8012c5a:	6819      	ldr	r1, [r3, #0]
 8012c5c:	4b5a      	ldr	r3, [pc, #360]	; (8012dc8 <HAL_DMA_IRQHandler+0x814>)
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d023      	beq.n	8012caa <HAL_DMA_IRQHandler+0x6f6>
 8012c62:	4b5a      	ldr	r3, [pc, #360]	; (8012dcc <HAL_DMA_IRQHandler+0x818>)
 8012c64:	429a      	cmp	r2, r3
 8012c66:	d026      	beq.n	8012cb6 <HAL_DMA_IRQHandler+0x702>
 8012c68:	4b59      	ldr	r3, [pc, #356]	; (8012dd0 <HAL_DMA_IRQHandler+0x81c>)
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d025      	beq.n	8012cba <HAL_DMA_IRQHandler+0x706>
 8012c6e:	4b59      	ldr	r3, [pc, #356]	; (8012dd4 <HAL_DMA_IRQHandler+0x820>)
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d025      	beq.n	8012cc0 <HAL_DMA_IRQHandler+0x70c>
 8012c74:	4b58      	ldr	r3, [pc, #352]	; (8012dd8 <HAL_DMA_IRQHandler+0x824>)
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d025      	beq.n	8012cc6 <HAL_DMA_IRQHandler+0x712>
 8012c7a:	4b58      	ldr	r3, [pc, #352]	; (8012ddc <HAL_DMA_IRQHandler+0x828>)
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d025      	beq.n	8012ccc <HAL_DMA_IRQHandler+0x718>
 8012c80:	4b50      	ldr	r3, [pc, #320]	; (8012dc4 <HAL_DMA_IRQHandler+0x810>)
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d025      	beq.n	8012cd2 <HAL_DMA_IRQHandler+0x71e>
 8012c86:	4b56      	ldr	r3, [pc, #344]	; (8012de0 <HAL_DMA_IRQHandler+0x82c>)
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d025      	beq.n	8012cd8 <HAL_DMA_IRQHandler+0x724>
 8012c8c:	4b55      	ldr	r3, [pc, #340]	; (8012de4 <HAL_DMA_IRQHandler+0x830>)
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d024      	beq.n	8012cdc <HAL_DMA_IRQHandler+0x728>
 8012c92:	4b55      	ldr	r3, [pc, #340]	; (8012de8 <HAL_DMA_IRQHandler+0x834>)
 8012c94:	429a      	cmp	r2, r3
 8012c96:	d023      	beq.n	8012ce0 <HAL_DMA_IRQHandler+0x72c>
 8012c98:	4b54      	ldr	r3, [pc, #336]	; (8012dec <HAL_DMA_IRQHandler+0x838>)
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d002      	beq.n	8012ca4 <HAL_DMA_IRQHandler+0x6f0>
 8012c9e:	2380      	movs	r3, #128	; 0x80
 8012ca0:	029b      	lsls	r3, r3, #10
 8012ca2:	e003      	b.n	8012cac <HAL_DMA_IRQHandler+0x6f8>
 8012ca4:	2380      	movs	r3, #128	; 0x80
 8012ca6:	019b      	lsls	r3, r3, #6
 8012ca8:	e000      	b.n	8012cac <HAL_DMA_IRQHandler+0x6f8>
 8012caa:	2302      	movs	r3, #2
 8012cac:	400b      	ands	r3, r1
 8012cae:	1e59      	subs	r1, r3, #1
 8012cb0:	418b      	sbcs	r3, r1
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	e777      	b.n	8012ba6 <HAL_DMA_IRQHandler+0x5f2>
 8012cb6:	2320      	movs	r3, #32
 8012cb8:	e7f8      	b.n	8012cac <HAL_DMA_IRQHandler+0x6f8>
 8012cba:	2380      	movs	r3, #128	; 0x80
 8012cbc:	009b      	lsls	r3, r3, #2
 8012cbe:	e7f5      	b.n	8012cac <HAL_DMA_IRQHandler+0x6f8>
 8012cc0:	2380      	movs	r3, #128	; 0x80
 8012cc2:	019b      	lsls	r3, r3, #6
 8012cc4:	e7f2      	b.n	8012cac <HAL_DMA_IRQHandler+0x6f8>
 8012cc6:	2380      	movs	r3, #128	; 0x80
 8012cc8:	029b      	lsls	r3, r3, #10
 8012cca:	e7ef      	b.n	8012cac <HAL_DMA_IRQHandler+0x6f8>
 8012ccc:	2380      	movs	r3, #128	; 0x80
 8012cce:	039b      	lsls	r3, r3, #14
 8012cd0:	e7ec      	b.n	8012cac <HAL_DMA_IRQHandler+0x6f8>
 8012cd2:	2380      	movs	r3, #128	; 0x80
 8012cd4:	049b      	lsls	r3, r3, #18
 8012cd6:	e7e9      	b.n	8012cac <HAL_DMA_IRQHandler+0x6f8>
 8012cd8:	2302      	movs	r3, #2
 8012cda:	e7e7      	b.n	8012cac <HAL_DMA_IRQHandler+0x6f8>
 8012cdc:	2320      	movs	r3, #32
 8012cde:	e7e5      	b.n	8012cac <HAL_DMA_IRQHandler+0x6f8>
 8012ce0:	2380      	movs	r3, #128	; 0x80
 8012ce2:	009b      	lsls	r3, r3, #2
 8012ce4:	e7e2      	b.n	8012cac <HAL_DMA_IRQHandler+0x6f8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012ce6:	2280      	movs	r2, #128	; 0x80
 8012ce8:	0192      	lsls	r2, r2, #6
 8012cea:	e000      	b.n	8012cee <HAL_DMA_IRQHandler+0x73a>
 8012cec:	2202      	movs	r2, #2
 8012cee:	4b41      	ldr	r3, [pc, #260]	; (8012df4 <HAL_DMA_IRQHandler+0x840>)
 8012cf0:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8012cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012cf4:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8012cf6:	2321      	movs	r3, #33	; 0x21
 8012cf8:	2201      	movs	r2, #1
 8012cfa:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8012cfc:	3b01      	subs	r3, #1
 8012cfe:	2200      	movs	r2, #0
 8012d00:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8012d02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d001      	beq.n	8012d0c <HAL_DMA_IRQHandler+0x758>
        hdma->XferCpltCallback(hdma);
 8012d08:	0020      	movs	r0, r4
 8012d0a:	4798      	blx	r3
}  
 8012d0c:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012d0e:	2220      	movs	r2, #32
 8012d10:	e7ed      	b.n	8012cee <HAL_DMA_IRQHandler+0x73a>
 8012d12:	2280      	movs	r2, #128	; 0x80
 8012d14:	0092      	lsls	r2, r2, #2
 8012d16:	e7ea      	b.n	8012cee <HAL_DMA_IRQHandler+0x73a>
 8012d18:	2280      	movs	r2, #128	; 0x80
 8012d1a:	0192      	lsls	r2, r2, #6
 8012d1c:	e7e7      	b.n	8012cee <HAL_DMA_IRQHandler+0x73a>
 8012d1e:	2280      	movs	r2, #128	; 0x80
 8012d20:	0292      	lsls	r2, r2, #10
 8012d22:	e7e4      	b.n	8012cee <HAL_DMA_IRQHandler+0x73a>
 8012d24:	2280      	movs	r2, #128	; 0x80
 8012d26:	0392      	lsls	r2, r2, #14
 8012d28:	e7e1      	b.n	8012cee <HAL_DMA_IRQHandler+0x73a>
 8012d2a:	2280      	movs	r2, #128	; 0x80
 8012d2c:	0492      	lsls	r2, r2, #18
 8012d2e:	e7de      	b.n	8012cee <HAL_DMA_IRQHandler+0x73a>
 8012d30:	2202      	movs	r2, #2
 8012d32:	e7dc      	b.n	8012cee <HAL_DMA_IRQHandler+0x73a>
 8012d34:	2220      	movs	r2, #32
 8012d36:	e7da      	b.n	8012cee <HAL_DMA_IRQHandler+0x73a>
 8012d38:	2280      	movs	r2, #128	; 0x80
 8012d3a:	0092      	lsls	r2, r2, #2
 8012d3c:	e7d7      	b.n	8012cee <HAL_DMA_IRQHandler+0x73a>
 8012d3e:	4a22      	ldr	r2, [pc, #136]	; (8012dc8 <HAL_DMA_IRQHandler+0x814>)
 8012d40:	4293      	cmp	r3, r2
 8012d42:	d023      	beq.n	8012d8c <HAL_DMA_IRQHandler+0x7d8>
 8012d44:	4a21      	ldr	r2, [pc, #132]	; (8012dcc <HAL_DMA_IRQHandler+0x818>)
 8012d46:	4293      	cmp	r3, r2
 8012d48:	d024      	beq.n	8012d94 <HAL_DMA_IRQHandler+0x7e0>
 8012d4a:	4a21      	ldr	r2, [pc, #132]	; (8012dd0 <HAL_DMA_IRQHandler+0x81c>)
 8012d4c:	4293      	cmp	r3, r2
 8012d4e:	d023      	beq.n	8012d98 <HAL_DMA_IRQHandler+0x7e4>
 8012d50:	4a20      	ldr	r2, [pc, #128]	; (8012dd4 <HAL_DMA_IRQHandler+0x820>)
 8012d52:	4293      	cmp	r3, r2
 8012d54:	d023      	beq.n	8012d9e <HAL_DMA_IRQHandler+0x7ea>
 8012d56:	4a20      	ldr	r2, [pc, #128]	; (8012dd8 <HAL_DMA_IRQHandler+0x824>)
 8012d58:	4293      	cmp	r3, r2
 8012d5a:	d023      	beq.n	8012da4 <HAL_DMA_IRQHandler+0x7f0>
 8012d5c:	4a1f      	ldr	r2, [pc, #124]	; (8012ddc <HAL_DMA_IRQHandler+0x828>)
 8012d5e:	4293      	cmp	r3, r2
 8012d60:	d023      	beq.n	8012daa <HAL_DMA_IRQHandler+0x7f6>
 8012d62:	4a18      	ldr	r2, [pc, #96]	; (8012dc4 <HAL_DMA_IRQHandler+0x810>)
 8012d64:	4293      	cmp	r3, r2
 8012d66:	d023      	beq.n	8012db0 <HAL_DMA_IRQHandler+0x7fc>
 8012d68:	4a1d      	ldr	r2, [pc, #116]	; (8012de0 <HAL_DMA_IRQHandler+0x82c>)
 8012d6a:	4293      	cmp	r3, r2
 8012d6c:	d023      	beq.n	8012db6 <HAL_DMA_IRQHandler+0x802>
 8012d6e:	4a1d      	ldr	r2, [pc, #116]	; (8012de4 <HAL_DMA_IRQHandler+0x830>)
 8012d70:	4293      	cmp	r3, r2
 8012d72:	d022      	beq.n	8012dba <HAL_DMA_IRQHandler+0x806>
 8012d74:	4a1c      	ldr	r2, [pc, #112]	; (8012de8 <HAL_DMA_IRQHandler+0x834>)
 8012d76:	4293      	cmp	r3, r2
 8012d78:	d021      	beq.n	8012dbe <HAL_DMA_IRQHandler+0x80a>
 8012d7a:	4a1c      	ldr	r2, [pc, #112]	; (8012dec <HAL_DMA_IRQHandler+0x838>)
 8012d7c:	4293      	cmp	r3, r2
 8012d7e:	d002      	beq.n	8012d86 <HAL_DMA_IRQHandler+0x7d2>
 8012d80:	2280      	movs	r2, #128	; 0x80
 8012d82:	0292      	lsls	r2, r2, #10
 8012d84:	e003      	b.n	8012d8e <HAL_DMA_IRQHandler+0x7da>
 8012d86:	2280      	movs	r2, #128	; 0x80
 8012d88:	0192      	lsls	r2, r2, #6
 8012d8a:	e000      	b.n	8012d8e <HAL_DMA_IRQHandler+0x7da>
 8012d8c:	2202      	movs	r2, #2
 8012d8e:	4b18      	ldr	r3, [pc, #96]	; (8012df0 <HAL_DMA_IRQHandler+0x83c>)
 8012d90:	605a      	str	r2, [r3, #4]
 8012d92:	e7ae      	b.n	8012cf2 <HAL_DMA_IRQHandler+0x73e>
 8012d94:	2220      	movs	r2, #32
 8012d96:	e7fa      	b.n	8012d8e <HAL_DMA_IRQHandler+0x7da>
 8012d98:	2280      	movs	r2, #128	; 0x80
 8012d9a:	0092      	lsls	r2, r2, #2
 8012d9c:	e7f7      	b.n	8012d8e <HAL_DMA_IRQHandler+0x7da>
 8012d9e:	2280      	movs	r2, #128	; 0x80
 8012da0:	0192      	lsls	r2, r2, #6
 8012da2:	e7f4      	b.n	8012d8e <HAL_DMA_IRQHandler+0x7da>
 8012da4:	2280      	movs	r2, #128	; 0x80
 8012da6:	0292      	lsls	r2, r2, #10
 8012da8:	e7f1      	b.n	8012d8e <HAL_DMA_IRQHandler+0x7da>
 8012daa:	2280      	movs	r2, #128	; 0x80
 8012dac:	0392      	lsls	r2, r2, #14
 8012dae:	e7ee      	b.n	8012d8e <HAL_DMA_IRQHandler+0x7da>
 8012db0:	2280      	movs	r2, #128	; 0x80
 8012db2:	0492      	lsls	r2, r2, #18
 8012db4:	e7eb      	b.n	8012d8e <HAL_DMA_IRQHandler+0x7da>
 8012db6:	2202      	movs	r2, #2
 8012db8:	e7e9      	b.n	8012d8e <HAL_DMA_IRQHandler+0x7da>
 8012dba:	2220      	movs	r2, #32
 8012dbc:	e7e7      	b.n	8012d8e <HAL_DMA_IRQHandler+0x7da>
 8012dbe:	2280      	movs	r2, #128	; 0x80
 8012dc0:	0092      	lsls	r2, r2, #2
 8012dc2:	e7e4      	b.n	8012d8e <HAL_DMA_IRQHandler+0x7da>
 8012dc4:	40020080 	.word	0x40020080
 8012dc8:	40020008 	.word	0x40020008
 8012dcc:	4002001c 	.word	0x4002001c
 8012dd0:	40020030 	.word	0x40020030
 8012dd4:	40020044 	.word	0x40020044
 8012dd8:	40020058 	.word	0x40020058
 8012ddc:	4002006c 	.word	0x4002006c
 8012de0:	40020408 	.word	0x40020408
 8012de4:	4002041c 	.word	0x4002041c
 8012de8:	40020430 	.word	0x40020430
 8012dec:	40020444 	.word	0x40020444
 8012df0:	40020000 	.word	0x40020000
 8012df4:	40020400 	.word	0x40020400

08012df8 <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8012df8:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012dfa:	4b05      	ldr	r3, [pc, #20]	; (8012e10 <FLASH_Program_HalfWord+0x18>)
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8012e00:	4a04      	ldr	r2, [pc, #16]	; (8012e14 <FLASH_Program_HalfWord+0x1c>)
 8012e02:	6913      	ldr	r3, [r2, #16]
 8012e04:	2401      	movs	r4, #1
 8012e06:	4323      	orrs	r3, r4
 8012e08:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8012e0a:	8001      	strh	r1, [r0, #0]
}
 8012e0c:	bd10      	pop	{r4, pc}
 8012e0e:	46c0      	nop			; (mov r8, r8)
 8012e10:	200072b0 	.word	0x200072b0
 8012e14:	40022000 	.word	0x40022000

08012e18 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8012e18:	4b0a      	ldr	r3, [pc, #40]	; (8012e44 <FLASH_SetErrorCode+0x2c>)
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	06db      	lsls	r3, r3, #27
 8012e1e:	d504      	bpl.n	8012e2a <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8012e20:	4a09      	ldr	r2, [pc, #36]	; (8012e48 <FLASH_SetErrorCode+0x30>)
 8012e22:	69d3      	ldr	r3, [r2, #28]
 8012e24:	2102      	movs	r1, #2
 8012e26:	430b      	orrs	r3, r1
 8012e28:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8012e2a:	4b06      	ldr	r3, [pc, #24]	; (8012e44 <FLASH_SetErrorCode+0x2c>)
 8012e2c:	68db      	ldr	r3, [r3, #12]
 8012e2e:	075b      	lsls	r3, r3, #29
 8012e30:	d504      	bpl.n	8012e3c <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8012e32:	4a05      	ldr	r2, [pc, #20]	; (8012e48 <FLASH_SetErrorCode+0x30>)
 8012e34:	69d3      	ldr	r3, [r2, #28]
 8012e36:	2101      	movs	r1, #1
 8012e38:	430b      	orrs	r3, r1
 8012e3a:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8012e3c:	4b01      	ldr	r3, [pc, #4]	; (8012e44 <FLASH_SetErrorCode+0x2c>)
 8012e3e:	2214      	movs	r2, #20
 8012e40:	60da      	str	r2, [r3, #12]
}  
 8012e42:	4770      	bx	lr
 8012e44:	40022000 	.word	0x40022000
 8012e48:	200072b0 	.word	0x200072b0

08012e4c <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8012e4c:	4b06      	ldr	r3, [pc, #24]	; (8012e68 <HAL_FLASH_Unlock+0x1c>)
 8012e4e:	691b      	ldr	r3, [r3, #16]
 8012e50:	061b      	lsls	r3, r3, #24
 8012e52:	d506      	bpl.n	8012e62 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012e54:	4b04      	ldr	r3, [pc, #16]	; (8012e68 <HAL_FLASH_Unlock+0x1c>)
 8012e56:	4a05      	ldr	r2, [pc, #20]	; (8012e6c <HAL_FLASH_Unlock+0x20>)
 8012e58:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012e5a:	4a05      	ldr	r2, [pc, #20]	; (8012e70 <HAL_FLASH_Unlock+0x24>)
 8012e5c:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8012e5e:	2000      	movs	r0, #0
}
 8012e60:	4770      	bx	lr
    return HAL_ERROR;
 8012e62:	2001      	movs	r0, #1
 8012e64:	e7fc      	b.n	8012e60 <HAL_FLASH_Unlock+0x14>
 8012e66:	46c0      	nop			; (mov r8, r8)
 8012e68:	40022000 	.word	0x40022000
 8012e6c:	45670123 	.word	0x45670123
 8012e70:	cdef89ab 	.word	0xcdef89ab

08012e74 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8012e74:	4a03      	ldr	r2, [pc, #12]	; (8012e84 <HAL_FLASH_Lock+0x10>)
 8012e76:	6913      	ldr	r3, [r2, #16]
 8012e78:	2180      	movs	r1, #128	; 0x80
 8012e7a:	430b      	orrs	r3, r1
 8012e7c:	6113      	str	r3, [r2, #16]
}
 8012e7e:	2000      	movs	r0, #0
 8012e80:	4770      	bx	lr
 8012e82:	46c0      	nop			; (mov r8, r8)
 8012e84:	40022000 	.word	0x40022000

08012e88 <FLASH_WaitForLastOperation>:
{
 8012e88:	b570      	push	{r4, r5, r6, lr}
 8012e8a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8012e8c:	f7fe fe36 	bl	8011afc <HAL_GetTick>
 8012e90:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8012e92:	4b13      	ldr	r3, [pc, #76]	; (8012ee0 <FLASH_WaitForLastOperation+0x58>)
 8012e94:	68db      	ldr	r3, [r3, #12]
 8012e96:	07db      	lsls	r3, r3, #31
 8012e98:	d50a      	bpl.n	8012eb0 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8012e9a:	1c63      	adds	r3, r4, #1
 8012e9c:	d0f9      	beq.n	8012e92 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012e9e:	2c00      	cmp	r4, #0
 8012ea0:	d019      	beq.n	8012ed6 <FLASH_WaitForLastOperation+0x4e>
 8012ea2:	f7fe fe2b 	bl	8011afc <HAL_GetTick>
 8012ea6:	1b40      	subs	r0, r0, r5
 8012ea8:	42a0      	cmp	r0, r4
 8012eaa:	d9f2      	bls.n	8012e92 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8012eac:	2003      	movs	r0, #3
 8012eae:	e011      	b.n	8012ed4 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8012eb0:	4b0b      	ldr	r3, [pc, #44]	; (8012ee0 <FLASH_WaitForLastOperation+0x58>)
 8012eb2:	68db      	ldr	r3, [r3, #12]
 8012eb4:	069b      	lsls	r3, r3, #26
 8012eb6:	d502      	bpl.n	8012ebe <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012eb8:	4b09      	ldr	r3, [pc, #36]	; (8012ee0 <FLASH_WaitForLastOperation+0x58>)
 8012eba:	2220      	movs	r2, #32
 8012ebc:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8012ebe:	4b08      	ldr	r3, [pc, #32]	; (8012ee0 <FLASH_WaitForLastOperation+0x58>)
 8012ec0:	68db      	ldr	r3, [r3, #12]
 8012ec2:	06db      	lsls	r3, r3, #27
 8012ec4:	d403      	bmi.n	8012ece <FLASH_WaitForLastOperation+0x46>
 8012ec6:	4b06      	ldr	r3, [pc, #24]	; (8012ee0 <FLASH_WaitForLastOperation+0x58>)
 8012ec8:	68db      	ldr	r3, [r3, #12]
 8012eca:	075b      	lsls	r3, r3, #29
 8012ecc:	d505      	bpl.n	8012eda <FLASH_WaitForLastOperation+0x52>
    FLASH_SetErrorCode();
 8012ece:	f7ff ffa3 	bl	8012e18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8012ed2:	2001      	movs	r0, #1
}
 8012ed4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8012ed6:	2003      	movs	r0, #3
 8012ed8:	e7fc      	b.n	8012ed4 <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8012eda:	2000      	movs	r0, #0
 8012edc:	e7fa      	b.n	8012ed4 <FLASH_WaitForLastOperation+0x4c>
 8012ede:	46c0      	nop			; (mov r8, r8)
 8012ee0:	40022000 	.word	0x40022000

08012ee4 <HAL_FLASH_Program>:
{
 8012ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ee6:	46c6      	mov	lr, r8
 8012ee8:	b500      	push	{lr}
 8012eea:	0004      	movs	r4, r0
 8012eec:	000d      	movs	r5, r1
 8012eee:	4690      	mov	r8, r2
 8012ef0:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 8012ef2:	4b21      	ldr	r3, [pc, #132]	; (8012f78 <HAL_FLASH_Program+0x94>)
 8012ef4:	7e1b      	ldrb	r3, [r3, #24]
 8012ef6:	2b01      	cmp	r3, #1
 8012ef8:	d03b      	beq.n	8012f72 <HAL_FLASH_Program+0x8e>
 8012efa:	4b1f      	ldr	r3, [pc, #124]	; (8012f78 <HAL_FLASH_Program+0x94>)
 8012efc:	2201      	movs	r2, #1
 8012efe:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012f00:	481e      	ldr	r0, [pc, #120]	; (8012f7c <HAL_FLASH_Program+0x98>)
 8012f02:	f7ff ffc1 	bl	8012e88 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8012f06:	2800      	cmp	r0, #0
 8012f08:	d12d      	bne.n	8012f66 <HAL_FLASH_Program+0x82>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8012f0a:	2c01      	cmp	r4, #1
 8012f0c:	d006      	beq.n	8012f1c <HAL_FLASH_Program+0x38>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8012f0e:	2c02      	cmp	r4, #2
 8012f10:	d002      	beq.n	8012f18 <HAL_FLASH_Program+0x34>
      nbiterations = 4;
 8012f12:	2704      	movs	r7, #4
    for (index = 0; index < nbiterations; index++)
 8012f14:	2400      	movs	r4, #0
 8012f16:	e01b      	b.n	8012f50 <HAL_FLASH_Program+0x6c>
      nbiterations = 2;
 8012f18:	2702      	movs	r7, #2
 8012f1a:	e7fb      	b.n	8012f14 <HAL_FLASH_Program+0x30>
      nbiterations = 1;
 8012f1c:	2701      	movs	r7, #1
 8012f1e:	e7f9      	b.n	8012f14 <HAL_FLASH_Program+0x30>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8012f20:	2220      	movs	r2, #32
 8012f22:	1ad2      	subs	r2, r2, r3
 8012f24:	0031      	movs	r1, r6
 8012f26:	4091      	lsls	r1, r2
 8012f28:	000a      	movs	r2, r1
 8012f2a:	4641      	mov	r1, r8
 8012f2c:	40d9      	lsrs	r1, r3
 8012f2e:	4311      	orrs	r1, r2
 8012f30:	b289      	uxth	r1, r1
 8012f32:	1940      	adds	r0, r0, r5
 8012f34:	f7ff ff60 	bl	8012df8 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012f38:	4810      	ldr	r0, [pc, #64]	; (8012f7c <HAL_FLASH_Program+0x98>)
 8012f3a:	f7ff ffa5 	bl	8012e88 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8012f3e:	4a10      	ldr	r2, [pc, #64]	; (8012f80 <HAL_FLASH_Program+0x9c>)
 8012f40:	6913      	ldr	r3, [r2, #16]
 8012f42:	2101      	movs	r1, #1
 8012f44:	438b      	bics	r3, r1
 8012f46:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	d10c      	bne.n	8012f66 <HAL_FLASH_Program+0x82>
    for (index = 0; index < nbiterations; index++)
 8012f4c:	3401      	adds	r4, #1
 8012f4e:	b2e4      	uxtb	r4, r4
 8012f50:	42bc      	cmp	r4, r7
 8012f52:	d208      	bcs.n	8012f66 <HAL_FLASH_Program+0x82>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8012f54:	0060      	lsls	r0, r4, #1
 8012f56:	0123      	lsls	r3, r4, #4
 8012f58:	2220      	movs	r2, #32
 8012f5a:	4252      	negs	r2, r2
 8012f5c:	189a      	adds	r2, r3, r2
 8012f5e:	d4df      	bmi.n	8012f20 <HAL_FLASH_Program+0x3c>
 8012f60:	0031      	movs	r1, r6
 8012f62:	40d1      	lsrs	r1, r2
 8012f64:	e7e4      	b.n	8012f30 <HAL_FLASH_Program+0x4c>
  __HAL_UNLOCK(&pFlash);
 8012f66:	4b04      	ldr	r3, [pc, #16]	; (8012f78 <HAL_FLASH_Program+0x94>)
 8012f68:	2200      	movs	r2, #0
 8012f6a:	761a      	strb	r2, [r3, #24]
}
 8012f6c:	bc04      	pop	{r2}
 8012f6e:	4690      	mov	r8, r2
 8012f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8012f72:	2002      	movs	r0, #2
 8012f74:	e7fa      	b.n	8012f6c <HAL_FLASH_Program+0x88>
 8012f76:	46c0      	nop			; (mov r8, r8)
 8012f78:	200072b0 	.word	0x200072b0
 8012f7c:	0000c350 	.word	0x0000c350
 8012f80:	40022000 	.word	0x40022000

08012f84 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012f84:	4b06      	ldr	r3, [pc, #24]	; (8012fa0 <FLASH_MassErase+0x1c>)
 8012f86:	2200      	movs	r2, #0
 8012f88:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8012f8a:	4b06      	ldr	r3, [pc, #24]	; (8012fa4 <FLASH_MassErase+0x20>)
 8012f8c:	691a      	ldr	r2, [r3, #16]
 8012f8e:	2104      	movs	r1, #4
 8012f90:	430a      	orrs	r2, r1
 8012f92:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012f94:	691a      	ldr	r2, [r3, #16]
 8012f96:	313c      	adds	r1, #60	; 0x3c
 8012f98:	430a      	orrs	r2, r1
 8012f9a:	611a      	str	r2, [r3, #16]
}
 8012f9c:	4770      	bx	lr
 8012f9e:	46c0      	nop			; (mov r8, r8)
 8012fa0:	200072b0 	.word	0x200072b0
 8012fa4:	40022000 	.word	0x40022000

08012fa8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012fa8:	4b06      	ldr	r3, [pc, #24]	; (8012fc4 <FLASH_PageErase+0x1c>)
 8012faa:	2200      	movs	r2, #0
 8012fac:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8012fae:	4b06      	ldr	r3, [pc, #24]	; (8012fc8 <FLASH_PageErase+0x20>)
 8012fb0:	691a      	ldr	r2, [r3, #16]
 8012fb2:	2102      	movs	r1, #2
 8012fb4:	430a      	orrs	r2, r1
 8012fb6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8012fb8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012fba:	691a      	ldr	r2, [r3, #16]
 8012fbc:	313e      	adds	r1, #62	; 0x3e
 8012fbe:	430a      	orrs	r2, r1
 8012fc0:	611a      	str	r2, [r3, #16]
}
 8012fc2:	4770      	bx	lr
 8012fc4:	200072b0 	.word	0x200072b0
 8012fc8:	40022000 	.word	0x40022000

08012fcc <HAL_FLASHEx_Erase>:
{
 8012fcc:	b570      	push	{r4, r5, r6, lr}
 8012fce:	0005      	movs	r5, r0
 8012fd0:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8012fd2:	4b24      	ldr	r3, [pc, #144]	; (8013064 <HAL_FLASHEx_Erase+0x98>)
 8012fd4:	7e1b      	ldrb	r3, [r3, #24]
 8012fd6:	2b01      	cmp	r3, #1
 8012fd8:	d041      	beq.n	801305e <HAL_FLASHEx_Erase+0x92>
 8012fda:	4b22      	ldr	r3, [pc, #136]	; (8013064 <HAL_FLASHEx_Erase+0x98>)
 8012fdc:	2201      	movs	r2, #1
 8012fde:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8012fe0:	6803      	ldr	r3, [r0, #0]
 8012fe2:	2b01      	cmp	r3, #1
 8012fe4:	d022      	beq.n	801302c <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8012fe6:	4820      	ldr	r0, [pc, #128]	; (8013068 <HAL_FLASHEx_Erase+0x9c>)
 8012fe8:	f7ff ff4e 	bl	8012e88 <FLASH_WaitForLastOperation>
 8012fec:	2800      	cmp	r0, #0
 8012fee:	d131      	bne.n	8013054 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFF;
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	425b      	negs	r3, r3
 8012ff4:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8012ff6:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012ff8:	3001      	adds	r0, #1
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8012ffa:	68ab      	ldr	r3, [r5, #8]
 8012ffc:	02db      	lsls	r3, r3, #11
 8012ffe:	686a      	ldr	r2, [r5, #4]
 8013000:	4694      	mov	ip, r2
 8013002:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8013004:	42a3      	cmp	r3, r4
 8013006:	d926      	bls.n	8013056 <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8013008:	0020      	movs	r0, r4
 801300a:	f7ff ffcd 	bl	8012fa8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801300e:	4816      	ldr	r0, [pc, #88]	; (8013068 <HAL_FLASHEx_Erase+0x9c>)
 8013010:	f7ff ff3a 	bl	8012e88 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8013014:	4a15      	ldr	r2, [pc, #84]	; (801306c <HAL_FLASHEx_Erase+0xa0>)
 8013016:	6913      	ldr	r3, [r2, #16]
 8013018:	2102      	movs	r1, #2
 801301a:	438b      	bics	r3, r1
 801301c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 801301e:	2800      	cmp	r0, #0
 8013020:	d116      	bne.n	8013050 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8013022:	2380      	movs	r3, #128	; 0x80
 8013024:	011b      	lsls	r3, r3, #4
 8013026:	469c      	mov	ip, r3
 8013028:	4464      	add	r4, ip
 801302a:	e7e6      	b.n	8012ffa <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801302c:	480e      	ldr	r0, [pc, #56]	; (8013068 <HAL_FLASHEx_Erase+0x9c>)
 801302e:	f7ff ff2b 	bl	8012e88 <FLASH_WaitForLastOperation>
 8013032:	2800      	cmp	r0, #0
 8013034:	d001      	beq.n	801303a <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8013036:	2001      	movs	r0, #1
 8013038:	e00d      	b.n	8013056 <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 801303a:	f7ff ffa3 	bl	8012f84 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801303e:	480a      	ldr	r0, [pc, #40]	; (8013068 <HAL_FLASHEx_Erase+0x9c>)
 8013040:	f7ff ff22 	bl	8012e88 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8013044:	4a09      	ldr	r2, [pc, #36]	; (801306c <HAL_FLASHEx_Erase+0xa0>)
 8013046:	6913      	ldr	r3, [r2, #16]
 8013048:	2104      	movs	r1, #4
 801304a:	438b      	bics	r3, r1
 801304c:	6113      	str	r3, [r2, #16]
 801304e:	e002      	b.n	8013056 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8013050:	6034      	str	r4, [r6, #0]
            break;
 8013052:	e000      	b.n	8013056 <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8013054:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8013056:	4b03      	ldr	r3, [pc, #12]	; (8013064 <HAL_FLASHEx_Erase+0x98>)
 8013058:	2200      	movs	r2, #0
 801305a:	761a      	strb	r2, [r3, #24]
}
 801305c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 801305e:	2002      	movs	r0, #2
 8013060:	e7fc      	b.n	801305c <HAL_FLASHEx_Erase+0x90>
 8013062:	46c0      	nop			; (mov r8, r8)
 8013064:	200072b0 	.word	0x200072b0
 8013068:	0000c350 	.word	0x0000c350
 801306c:	40022000 	.word	0x40022000

08013070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8013070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013072:	46c6      	mov	lr, r8
 8013074:	b500      	push	{lr}
 8013076:	b082      	sub	sp, #8
  uint32_t position = 0x00;
 8013078:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 801307a:	e033      	b.n	80130e4 <HAL_GPIO_Init+0x74>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801307c:	2604      	movs	r6, #4
 801307e:	e000      	b.n	8013082 <HAL_GPIO_Init+0x12>
 8013080:	2600      	movs	r6, #0
 8013082:	40ae      	lsls	r6, r5
 8013084:	0035      	movs	r5, r6
 8013086:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8013088:	3402      	adds	r4, #2
 801308a:	00a4      	lsls	r4, r4, #2
 801308c:	4e55      	ldr	r6, [pc, #340]	; (80131e4 <HAL_GPIO_Init+0x174>)
 801308e:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013090:	4c55      	ldr	r4, [pc, #340]	; (80131e8 <HAL_GPIO_Init+0x178>)
 8013092:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8013094:	43d4      	mvns	r4, r2
 8013096:	002e      	movs	r6, r5
 8013098:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801309a:	684f      	ldr	r7, [r1, #4]
 801309c:	03ff      	lsls	r7, r7, #15
 801309e:	d501      	bpl.n	80130a4 <HAL_GPIO_Init+0x34>
        {
          SET_BIT(temp, iocurrent); 
 80130a0:	4315      	orrs	r5, r2
 80130a2:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 80130a4:	4d50      	ldr	r5, [pc, #320]	; (80131e8 <HAL_GPIO_Init+0x178>)
 80130a6:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80130a8:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80130aa:	002e      	movs	r6, r5
 80130ac:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80130ae:	684f      	ldr	r7, [r1, #4]
 80130b0:	03bf      	lsls	r7, r7, #14
 80130b2:	d501      	bpl.n	80130b8 <HAL_GPIO_Init+0x48>
        { 
          SET_BIT(temp, iocurrent); 
 80130b4:	4315      	orrs	r5, r2
 80130b6:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 80130b8:	4d4b      	ldr	r5, [pc, #300]	; (80131e8 <HAL_GPIO_Init+0x178>)
 80130ba:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80130bc:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80130be:	002e      	movs	r6, r5
 80130c0:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80130c2:	684f      	ldr	r7, [r1, #4]
 80130c4:	02ff      	lsls	r7, r7, #11
 80130c6:	d501      	bpl.n	80130cc <HAL_GPIO_Init+0x5c>
        {
          SET_BIT(temp, iocurrent); 
 80130c8:	4315      	orrs	r5, r2
 80130ca:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80130cc:	4d46      	ldr	r5, [pc, #280]	; (80131e8 <HAL_GPIO_Init+0x178>)
 80130ce:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80130d0:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80130d2:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80130d4:	684e      	ldr	r6, [r1, #4]
 80130d6:	02b6      	lsls	r6, r6, #10
 80130d8:	d501      	bpl.n	80130de <HAL_GPIO_Init+0x6e>
        {
          SET_BIT(temp, iocurrent); 
 80130da:	432a      	orrs	r2, r5
 80130dc:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 80130de:	4a42      	ldr	r2, [pc, #264]	; (80131e8 <HAL_GPIO_Init+0x178>)
 80130e0:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80130e2:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 80130e4:	680a      	ldr	r2, [r1, #0]
 80130e6:	0014      	movs	r4, r2
 80130e8:	40dc      	lsrs	r4, r3
 80130ea:	d076      	beq.n	80131da <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80130ec:	2401      	movs	r4, #1
 80130ee:	409c      	lsls	r4, r3
 80130f0:	4022      	ands	r2, r4
    if(iocurrent)
 80130f2:	d0f6      	beq.n	80130e2 <HAL_GPIO_Init+0x72>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80130f4:	684c      	ldr	r4, [r1, #4]
 80130f6:	2c02      	cmp	r4, #2
 80130f8:	d001      	beq.n	80130fe <HAL_GPIO_Init+0x8e>
 80130fa:	2c12      	cmp	r4, #18
 80130fc:	d10e      	bne.n	801311c <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 80130fe:	08dc      	lsrs	r4, r3, #3
 8013100:	3408      	adds	r4, #8
 8013102:	00a4      	lsls	r4, r4, #2
 8013104:	5826      	ldr	r6, [r4, r0]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8013106:	2507      	movs	r5, #7
 8013108:	401d      	ands	r5, r3
 801310a:	00ad      	lsls	r5, r5, #2
 801310c:	270f      	movs	r7, #15
 801310e:	40af      	lsls	r7, r5
 8013110:	43be      	bics	r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8013112:	690f      	ldr	r7, [r1, #16]
 8013114:	40af      	lsls	r7, r5
 8013116:	003d      	movs	r5, r7
 8013118:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3] = temp;
 801311a:	5025      	str	r5, [r4, r0]
      temp = GPIOx->MODER;
 801311c:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801311e:	005e      	lsls	r6, r3, #1
 8013120:	2403      	movs	r4, #3
 8013122:	0025      	movs	r5, r4
 8013124:	40b5      	lsls	r5, r6
 8013126:	43ed      	mvns	r5, r5
 8013128:	46a8      	mov	r8, r5
 801312a:	402f      	ands	r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801312c:	684d      	ldr	r5, [r1, #4]
 801312e:	402c      	ands	r4, r5
 8013130:	40b4      	lsls	r4, r6
 8013132:	433c      	orrs	r4, r7
      GPIOx->MODER = temp;
 8013134:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013136:	684c      	ldr	r4, [r1, #4]
 8013138:	1e67      	subs	r7, r4, #1
 801313a:	2f01      	cmp	r7, #1
 801313c:	d903      	bls.n	8013146 <HAL_GPIO_Init+0xd6>
 801313e:	2c11      	cmp	r4, #17
 8013140:	d001      	beq.n	8013146 <HAL_GPIO_Init+0xd6>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013142:	2c12      	cmp	r4, #18
 8013144:	d111      	bne.n	801316a <HAL_GPIO_Init+0xfa>
        temp = GPIOx->OSPEEDR; 
 8013146:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8013148:	4644      	mov	r4, r8
 801314a:	4027      	ands	r7, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 801314c:	68cc      	ldr	r4, [r1, #12]
 801314e:	40b4      	lsls	r4, r6
 8013150:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8013152:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8013154:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8013156:	2401      	movs	r4, #1
 8013158:	0025      	movs	r5, r4
 801315a:	409d      	lsls	r5, r3
 801315c:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801315e:	684d      	ldr	r5, [r1, #4]
 8013160:	092d      	lsrs	r5, r5, #4
 8013162:	402c      	ands	r4, r5
 8013164:	409c      	lsls	r4, r3
 8013166:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8013168:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 801316a:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 801316c:	4645      	mov	r5, r8
 801316e:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8013170:	688d      	ldr	r5, [r1, #8]
 8013172:	40b5      	lsls	r5, r6
 8013174:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8013176:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8013178:	684c      	ldr	r4, [r1, #4]
 801317a:	00e4      	lsls	r4, r4, #3
 801317c:	d5b1      	bpl.n	80130e2 <HAL_GPIO_Init+0x72>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801317e:	4d1b      	ldr	r5, [pc, #108]	; (80131ec <HAL_GPIO_Init+0x17c>)
 8013180:	69ae      	ldr	r6, [r5, #24]
 8013182:	2401      	movs	r4, #1
 8013184:	4326      	orrs	r6, r4
 8013186:	61ae      	str	r6, [r5, #24]
 8013188:	69ad      	ldr	r5, [r5, #24]
 801318a:	402c      	ands	r4, r5
 801318c:	9401      	str	r4, [sp, #4]
 801318e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8013190:	089c      	lsrs	r4, r3, #2
 8013192:	1ca5      	adds	r5, r4, #2
 8013194:	00ad      	lsls	r5, r5, #2
 8013196:	4e13      	ldr	r6, [pc, #76]	; (80131e4 <HAL_GPIO_Init+0x174>)
 8013198:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801319a:	2603      	movs	r6, #3
 801319c:	401e      	ands	r6, r3
 801319e:	00b5      	lsls	r5, r6, #2
 80131a0:	260f      	movs	r6, #15
 80131a2:	40ae      	lsls	r6, r5
 80131a4:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80131a6:	2690      	movs	r6, #144	; 0x90
 80131a8:	05f6      	lsls	r6, r6, #23
 80131aa:	42b0      	cmp	r0, r6
 80131ac:	d100      	bne.n	80131b0 <HAL_GPIO_Init+0x140>
 80131ae:	e767      	b.n	8013080 <HAL_GPIO_Init+0x10>
 80131b0:	4e0f      	ldr	r6, [pc, #60]	; (80131f0 <HAL_GPIO_Init+0x180>)
 80131b2:	42b0      	cmp	r0, r6
 80131b4:	d00b      	beq.n	80131ce <HAL_GPIO_Init+0x15e>
 80131b6:	4e0f      	ldr	r6, [pc, #60]	; (80131f4 <HAL_GPIO_Init+0x184>)
 80131b8:	42b0      	cmp	r0, r6
 80131ba:	d00a      	beq.n	80131d2 <HAL_GPIO_Init+0x162>
 80131bc:	4e0e      	ldr	r6, [pc, #56]	; (80131f8 <HAL_GPIO_Init+0x188>)
 80131be:	42b0      	cmp	r0, r6
 80131c0:	d009      	beq.n	80131d6 <HAL_GPIO_Init+0x166>
 80131c2:	4e0e      	ldr	r6, [pc, #56]	; (80131fc <HAL_GPIO_Init+0x18c>)
 80131c4:	42b0      	cmp	r0, r6
 80131c6:	d100      	bne.n	80131ca <HAL_GPIO_Init+0x15a>
 80131c8:	e758      	b.n	801307c <HAL_GPIO_Init+0xc>
 80131ca:	2605      	movs	r6, #5
 80131cc:	e759      	b.n	8013082 <HAL_GPIO_Init+0x12>
 80131ce:	2601      	movs	r6, #1
 80131d0:	e757      	b.n	8013082 <HAL_GPIO_Init+0x12>
 80131d2:	2602      	movs	r6, #2
 80131d4:	e755      	b.n	8013082 <HAL_GPIO_Init+0x12>
 80131d6:	2603      	movs	r6, #3
 80131d8:	e753      	b.n	8013082 <HAL_GPIO_Init+0x12>
  } 
}
 80131da:	b002      	add	sp, #8
 80131dc:	bc04      	pop	{r2}
 80131de:	4690      	mov	r8, r2
 80131e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131e2:	46c0      	nop			; (mov r8, r8)
 80131e4:	40010000 	.word	0x40010000
 80131e8:	40010400 	.word	0x40010400
 80131ec:	40021000 	.word	0x40021000
 80131f0:	48000400 	.word	0x48000400
 80131f4:	48000800 	.word	0x48000800
 80131f8:	48000c00 	.word	0x48000c00
 80131fc:	48001000 	.word	0x48001000

08013200 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8013200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013202:	46ce      	mov	lr, r9
 8013204:	4647      	mov	r7, r8
 8013206:	b580      	push	{r7, lr}
  uint32_t position = 0x00;
 8013208:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 801320a:	e006      	b.n	801321a <HAL_GPIO_DeInit+0x1a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801320c:	2704      	movs	r7, #4
 801320e:	e000      	b.n	8013212 <HAL_GPIO_DeInit+0x12>
 8013210:	2700      	movs	r7, #0
 8013212:	40a7      	lsls	r7, r4
 8013214:	42af      	cmp	r7, r5
 8013216:	d04e      	beq.n	80132b6 <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8013218:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 801321a:	000a      	movs	r2, r1
 801321c:	40da      	lsrs	r2, r3
 801321e:	d060      	beq.n	80132e2 <HAL_GPIO_DeInit+0xe2>
    iocurrent = (GPIO_Pin) & (1 << position);
 8013220:	2201      	movs	r2, #1
 8013222:	409a      	lsls	r2, r3
 8013224:	400a      	ands	r2, r1
    if (iocurrent)
 8013226:	d0f7      	beq.n	8013218 <HAL_GPIO_DeInit+0x18>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8013228:	6805      	ldr	r5, [r0, #0]
 801322a:	005e      	lsls	r6, r3, #1
 801322c:	2403      	movs	r4, #3
 801322e:	46a1      	mov	r9, r4
 8013230:	0027      	movs	r7, r4
 8013232:	40b7      	lsls	r7, r6
 8013234:	43ff      	mvns	r7, r7
 8013236:	403d      	ands	r5, r7
 8013238:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801323a:	08de      	lsrs	r6, r3, #3
 801323c:	3608      	adds	r6, #8
 801323e:	00b6      	lsls	r6, r6, #2
 8013240:	5834      	ldr	r4, [r6, r0]
 8013242:	46a0      	mov	r8, r4
 8013244:	2507      	movs	r5, #7
 8013246:	401d      	ands	r5, r3
 8013248:	00ad      	lsls	r5, r5, #2
 801324a:	240f      	movs	r4, #15
 801324c:	46a4      	mov	ip, r4
 801324e:	40ac      	lsls	r4, r5
 8013250:	0025      	movs	r5, r4
 8013252:	4644      	mov	r4, r8
 8013254:	43ac      	bics	r4, r5
 8013256:	5034      	str	r4, [r6, r0]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8013258:	6885      	ldr	r5, [r0, #8]
 801325a:	403d      	ands	r5, r7
 801325c:	6085      	str	r5, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 801325e:	6845      	ldr	r5, [r0, #4]
 8013260:	2601      	movs	r6, #1
 8013262:	409e      	lsls	r6, r3
 8013264:	43b5      	bics	r5, r6
 8013266:	6045      	str	r5, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8013268:	68c5      	ldr	r5, [r0, #12]
 801326a:	402f      	ands	r7, r5
 801326c:	60c7      	str	r7, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 801326e:	089e      	lsrs	r6, r3, #2
 8013270:	1cb5      	adds	r5, r6, #2
 8013272:	00ad      	lsls	r5, r5, #2
 8013274:	4f1d      	ldr	r7, [pc, #116]	; (80132ec <HAL_GPIO_DeInit+0xec>)
 8013276:	59ed      	ldr	r5, [r5, r7]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8013278:	464c      	mov	r4, r9
 801327a:	401c      	ands	r4, r3
 801327c:	00a4      	lsls	r4, r4, #2
 801327e:	4667      	mov	r7, ip
 8013280:	40a7      	lsls	r7, r4
 8013282:	46bc      	mov	ip, r7
 8013284:	403d      	ands	r5, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8013286:	2790      	movs	r7, #144	; 0x90
 8013288:	05ff      	lsls	r7, r7, #23
 801328a:	42b8      	cmp	r0, r7
 801328c:	d0c0      	beq.n	8013210 <HAL_GPIO_DeInit+0x10>
 801328e:	4f18      	ldr	r7, [pc, #96]	; (80132f0 <HAL_GPIO_DeInit+0xf0>)
 8013290:	42b8      	cmp	r0, r7
 8013292:	d00a      	beq.n	80132aa <HAL_GPIO_DeInit+0xaa>
 8013294:	4f17      	ldr	r7, [pc, #92]	; (80132f4 <HAL_GPIO_DeInit+0xf4>)
 8013296:	42b8      	cmp	r0, r7
 8013298:	d009      	beq.n	80132ae <HAL_GPIO_DeInit+0xae>
 801329a:	4f17      	ldr	r7, [pc, #92]	; (80132f8 <HAL_GPIO_DeInit+0xf8>)
 801329c:	42b8      	cmp	r0, r7
 801329e:	d008      	beq.n	80132b2 <HAL_GPIO_DeInit+0xb2>
 80132a0:	4f16      	ldr	r7, [pc, #88]	; (80132fc <HAL_GPIO_DeInit+0xfc>)
 80132a2:	42b8      	cmp	r0, r7
 80132a4:	d0b2      	beq.n	801320c <HAL_GPIO_DeInit+0xc>
 80132a6:	2705      	movs	r7, #5
 80132a8:	e7b3      	b.n	8013212 <HAL_GPIO_DeInit+0x12>
 80132aa:	2701      	movs	r7, #1
 80132ac:	e7b1      	b.n	8013212 <HAL_GPIO_DeInit+0x12>
 80132ae:	2702      	movs	r7, #2
 80132b0:	e7af      	b.n	8013212 <HAL_GPIO_DeInit+0x12>
 80132b2:	2703      	movs	r7, #3
 80132b4:	e7ad      	b.n	8013212 <HAL_GPIO_DeInit+0x12>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80132b6:	4f0d      	ldr	r7, [pc, #52]	; (80132ec <HAL_GPIO_DeInit+0xec>)
 80132b8:	1cb4      	adds	r4, r6, #2
 80132ba:	00a4      	lsls	r4, r4, #2
 80132bc:	59e5      	ldr	r5, [r4, r7]
 80132be:	4666      	mov	r6, ip
 80132c0:	43b5      	bics	r5, r6
 80132c2:	51e5      	str	r5, [r4, r7]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80132c4:	4c0e      	ldr	r4, [pc, #56]	; (8013300 <HAL_GPIO_DeInit+0x100>)
 80132c6:	6825      	ldr	r5, [r4, #0]
 80132c8:	43d2      	mvns	r2, r2
 80132ca:	4015      	ands	r5, r2
 80132cc:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80132ce:	6865      	ldr	r5, [r4, #4]
 80132d0:	4015      	ands	r5, r2
 80132d2:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80132d4:	68a5      	ldr	r5, [r4, #8]
 80132d6:	4015      	ands	r5, r2
 80132d8:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80132da:	68e5      	ldr	r5, [r4, #12]
 80132dc:	402a      	ands	r2, r5
 80132de:	60e2      	str	r2, [r4, #12]
 80132e0:	e79a      	b.n	8013218 <HAL_GPIO_DeInit+0x18>
  }
}
 80132e2:	bc0c      	pop	{r2, r3}
 80132e4:	4690      	mov	r8, r2
 80132e6:	4699      	mov	r9, r3
 80132e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132ea:	46c0      	nop			; (mov r8, r8)
 80132ec:	40010000 	.word	0x40010000
 80132f0:	48000400 	.word	0x48000400
 80132f4:	48000800 	.word	0x48000800
 80132f8:	48000c00 	.word	0x48000c00
 80132fc:	48001000 	.word	0x48001000
 8013300:	40010400 	.word	0x40010400

08013304 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8013304:	6903      	ldr	r3, [r0, #16]
 8013306:	420b      	tst	r3, r1
 8013308:	d101      	bne.n	801330e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801330a:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 801330c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 801330e:	2001      	movs	r0, #1
 8013310:	e7fc      	b.n	801330c <HAL_GPIO_ReadPin+0x8>

08013312 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8013312:	2a00      	cmp	r2, #0
 8013314:	d101      	bne.n	801331a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8013316:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8013318:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801331a:	6181      	str	r1, [r0, #24]
 801331c:	e7fc      	b.n	8013318 <HAL_GPIO_WritePin+0x6>

0801331e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 801331e:	6943      	ldr	r3, [r0, #20]
 8013320:	4059      	eors	r1, r3
 8013322:	6141      	str	r1, [r0, #20]
}
 8013324:	4770      	bx	lr

08013326 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8013326:	4770      	bx	lr

08013328 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8013328:	4a03      	ldr	r2, [pc, #12]	; (8013338 <HAL_PWR_EnableBkUpAccess+0x10>)
 801332a:	6811      	ldr	r1, [r2, #0]
 801332c:	2380      	movs	r3, #128	; 0x80
 801332e:	005b      	lsls	r3, r3, #1
 8013330:	430b      	orrs	r3, r1
 8013332:	6013      	str	r3, [r2, #0]
}
 8013334:	4770      	bx	lr
 8013336:	46c0      	nop			; (mov r8, r8)
 8013338:	40007000 	.word	0x40007000

0801333c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801333c:	b530      	push	{r4, r5, lr}
 801333e:	b083      	sub	sp, #12
 8013340:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013342:	6803      	ldr	r3, [r0, #0]
 8013344:	07db      	lsls	r3, r3, #31
 8013346:	d534      	bpl.n	80133b2 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8013348:	4bc1      	ldr	r3, [pc, #772]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 801334a:	685a      	ldr	r2, [r3, #4]
 801334c:	230c      	movs	r3, #12
 801334e:	4013      	ands	r3, r2
 8013350:	2b04      	cmp	r3, #4
 8013352:	d026      	beq.n	80133a2 <HAL_RCC_OscConfig+0x66>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8013354:	4bbe      	ldr	r3, [pc, #760]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013356:	685a      	ldr	r2, [r3, #4]
 8013358:	230c      	movs	r3, #12
 801335a:	4013      	ands	r3, r2
 801335c:	2b08      	cmp	r3, #8
 801335e:	d108      	bne.n	8013372 <HAL_RCC_OscConfig+0x36>
 8013360:	4bbb      	ldr	r3, [pc, #748]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	22c0      	movs	r2, #192	; 0xc0
 8013366:	0252      	lsls	r2, r2, #9
 8013368:	4013      	ands	r3, r2
 801336a:	2280      	movs	r2, #128	; 0x80
 801336c:	0252      	lsls	r2, r2, #9
 801336e:	4293      	cmp	r3, r2
 8013370:	d017      	beq.n	80133a2 <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8013372:	4bb7      	ldr	r3, [pc, #732]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013374:	681a      	ldr	r2, [r3, #0]
 8013376:	49b7      	ldr	r1, [pc, #732]	; (8013654 <HAL_RCC_OscConfig+0x318>)
 8013378:	400a      	ands	r2, r1
 801337a:	601a      	str	r2, [r3, #0]
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	49b6      	ldr	r1, [pc, #728]	; (8013658 <HAL_RCC_OscConfig+0x31c>)
 8013380:	400a      	ands	r2, r1
 8013382:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013384:	f7fe fbba 	bl	8011afc <HAL_GetTick>
 8013388:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801338a:	4bb1      	ldr	r3, [pc, #708]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	039b      	lsls	r3, r3, #14
 8013390:	d536      	bpl.n	8013400 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013392:	f7fe fbb3 	bl	8011afc <HAL_GetTick>
 8013396:	1b40      	subs	r0, r0, r5
 8013398:	2864      	cmp	r0, #100	; 0x64
 801339a:	d9f6      	bls.n	801338a <HAL_RCC_OscConfig+0x4e>
        {
          return HAL_TIMEOUT;
 801339c:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 801339e:	b003      	add	sp, #12
 80133a0:	bd30      	pop	{r4, r5, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80133a2:	4bab      	ldr	r3, [pc, #684]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	039b      	lsls	r3, r3, #14
 80133a8:	d503      	bpl.n	80133b2 <HAL_RCC_OscConfig+0x76>
 80133aa:	6863      	ldr	r3, [r4, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d100      	bne.n	80133b2 <HAL_RCC_OscConfig+0x76>
 80133b0:	e258      	b.n	8013864 <HAL_RCC_OscConfig+0x528>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80133b2:	6823      	ldr	r3, [r4, #0]
 80133b4:	079b      	lsls	r3, r3, #30
 80133b6:	d400      	bmi.n	80133ba <HAL_RCC_OscConfig+0x7e>
 80133b8:	e088      	b.n	80134cc <HAL_RCC_OscConfig+0x190>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80133ba:	4ba5      	ldr	r3, [pc, #660]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	220c      	movs	r2, #12
 80133c0:	421a      	tst	r2, r3
 80133c2:	d072      	beq.n	80134aa <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80133c4:	4ba2      	ldr	r3, [pc, #648]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80133c6:	685a      	ldr	r2, [r3, #4]
 80133c8:	230c      	movs	r3, #12
 80133ca:	4013      	ands	r3, r2
 80133cc:	2b08      	cmp	r3, #8
 80133ce:	d063      	beq.n	8013498 <HAL_RCC_OscConfig+0x15c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80133d0:	68e3      	ldr	r3, [r4, #12]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d100      	bne.n	80133d8 <HAL_RCC_OscConfig+0x9c>
 80133d6:	e09b      	b.n	8013510 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_ENABLE();
 80133d8:	4a9d      	ldr	r2, [pc, #628]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80133da:	6813      	ldr	r3, [r2, #0]
 80133dc:	2101      	movs	r1, #1
 80133de:	430b      	orrs	r3, r1
 80133e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80133e2:	f7fe fb8b 	bl	8011afc <HAL_GetTick>
 80133e6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80133e8:	4b99      	ldr	r3, [pc, #612]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	079b      	lsls	r3, r3, #30
 80133ee:	d500      	bpl.n	80133f2 <HAL_RCC_OscConfig+0xb6>
 80133f0:	e085      	b.n	80134fe <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80133f2:	f7fe fb83 	bl	8011afc <HAL_GetTick>
 80133f6:	1b40      	subs	r0, r0, r5
 80133f8:	2864      	cmp	r0, #100	; 0x64
 80133fa:	d9f5      	bls.n	80133e8 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
 80133fc:	2003      	movs	r0, #3
 80133fe:	e7ce      	b.n	801339e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013400:	6863      	ldr	r3, [r4, #4]
 8013402:	2b01      	cmp	r3, #1
 8013404:	d00b      	beq.n	801341e <HAL_RCC_OscConfig+0xe2>
 8013406:	2b00      	cmp	r3, #0
 8013408:	d120      	bne.n	801344c <HAL_RCC_OscConfig+0x110>
 801340a:	4b91      	ldr	r3, [pc, #580]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 801340c:	681a      	ldr	r2, [r3, #0]
 801340e:	4991      	ldr	r1, [pc, #580]	; (8013654 <HAL_RCC_OscConfig+0x318>)
 8013410:	400a      	ands	r2, r1
 8013412:	601a      	str	r2, [r3, #0]
 8013414:	681a      	ldr	r2, [r3, #0]
 8013416:	4990      	ldr	r1, [pc, #576]	; (8013658 <HAL_RCC_OscConfig+0x31c>)
 8013418:	400a      	ands	r2, r1
 801341a:	601a      	str	r2, [r3, #0]
 801341c:	e005      	b.n	801342a <HAL_RCC_OscConfig+0xee>
 801341e:	4a8c      	ldr	r2, [pc, #560]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013420:	6811      	ldr	r1, [r2, #0]
 8013422:	2380      	movs	r3, #128	; 0x80
 8013424:	025b      	lsls	r3, r3, #9
 8013426:	430b      	orrs	r3, r1
 8013428:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801342a:	6863      	ldr	r3, [r4, #4]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d025      	beq.n	801347c <HAL_RCC_OscConfig+0x140>
        tickstart = HAL_GetTick();
 8013430:	f7fe fb64 	bl	8011afc <HAL_GetTick>
 8013434:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013436:	4b86      	ldr	r3, [pc, #536]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	039b      	lsls	r3, r3, #14
 801343c:	d4b9      	bmi.n	80133b2 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801343e:	f7fe fb5d 	bl	8011afc <HAL_GetTick>
 8013442:	1b40      	subs	r0, r0, r5
 8013444:	2864      	cmp	r0, #100	; 0x64
 8013446:	d9f6      	bls.n	8013436 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8013448:	2003      	movs	r0, #3
 801344a:	e7a8      	b.n	801339e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801344c:	2b05      	cmp	r3, #5
 801344e:	d009      	beq.n	8013464 <HAL_RCC_OscConfig+0x128>
 8013450:	4b7f      	ldr	r3, [pc, #508]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013452:	681a      	ldr	r2, [r3, #0]
 8013454:	497f      	ldr	r1, [pc, #508]	; (8013654 <HAL_RCC_OscConfig+0x318>)
 8013456:	400a      	ands	r2, r1
 8013458:	601a      	str	r2, [r3, #0]
 801345a:	681a      	ldr	r2, [r3, #0]
 801345c:	497e      	ldr	r1, [pc, #504]	; (8013658 <HAL_RCC_OscConfig+0x31c>)
 801345e:	400a      	ands	r2, r1
 8013460:	601a      	str	r2, [r3, #0]
 8013462:	e7e2      	b.n	801342a <HAL_RCC_OscConfig+0xee>
 8013464:	4b7a      	ldr	r3, [pc, #488]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013466:	6819      	ldr	r1, [r3, #0]
 8013468:	2280      	movs	r2, #128	; 0x80
 801346a:	02d2      	lsls	r2, r2, #11
 801346c:	430a      	orrs	r2, r1
 801346e:	601a      	str	r2, [r3, #0]
 8013470:	6819      	ldr	r1, [r3, #0]
 8013472:	2280      	movs	r2, #128	; 0x80
 8013474:	0252      	lsls	r2, r2, #9
 8013476:	430a      	orrs	r2, r1
 8013478:	601a      	str	r2, [r3, #0]
 801347a:	e7d6      	b.n	801342a <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 801347c:	f7fe fb3e 	bl	8011afc <HAL_GetTick>
 8013480:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013482:	4b73      	ldr	r3, [pc, #460]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	039b      	lsls	r3, r3, #14
 8013488:	d593      	bpl.n	80133b2 <HAL_RCC_OscConfig+0x76>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801348a:	f7fe fb37 	bl	8011afc <HAL_GetTick>
 801348e:	1b40      	subs	r0, r0, r5
 8013490:	2864      	cmp	r0, #100	; 0x64
 8013492:	d9f6      	bls.n	8013482 <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 8013494:	2003      	movs	r0, #3
 8013496:	e782      	b.n	801339e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8013498:	4b6d      	ldr	r3, [pc, #436]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 801349a:	685b      	ldr	r3, [r3, #4]
 801349c:	22c0      	movs	r2, #192	; 0xc0
 801349e:	0252      	lsls	r2, r2, #9
 80134a0:	4013      	ands	r3, r2
 80134a2:	2280      	movs	r2, #128	; 0x80
 80134a4:	0212      	lsls	r2, r2, #8
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d192      	bne.n	80133d0 <HAL_RCC_OscConfig+0x94>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80134aa:	4b69      	ldr	r3, [pc, #420]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	079b      	lsls	r3, r3, #30
 80134b0:	d504      	bpl.n	80134bc <HAL_RCC_OscConfig+0x180>
 80134b2:	68e3      	ldr	r3, [r4, #12]
 80134b4:	2b01      	cmp	r3, #1
 80134b6:	d001      	beq.n	80134bc <HAL_RCC_OscConfig+0x180>
        return HAL_ERROR;
 80134b8:	2001      	movs	r0, #1
 80134ba:	e770      	b.n	801339e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80134bc:	4964      	ldr	r1, [pc, #400]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80134be:	680b      	ldr	r3, [r1, #0]
 80134c0:	22f8      	movs	r2, #248	; 0xf8
 80134c2:	4393      	bics	r3, r2
 80134c4:	6922      	ldr	r2, [r4, #16]
 80134c6:	00d2      	lsls	r2, r2, #3
 80134c8:	4313      	orrs	r3, r2
 80134ca:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80134cc:	6823      	ldr	r3, [r4, #0]
 80134ce:	071b      	lsls	r3, r3, #28
 80134d0:	d544      	bpl.n	801355c <HAL_RCC_OscConfig+0x220>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80134d2:	6a23      	ldr	r3, [r4, #32]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d02e      	beq.n	8013536 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 80134d8:	4a5d      	ldr	r2, [pc, #372]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80134da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80134dc:	2101      	movs	r1, #1
 80134de:	430b      	orrs	r3, r1
 80134e0:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80134e2:	f7fe fb0b 	bl	8011afc <HAL_GetTick>
 80134e6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80134e8:	4b59      	ldr	r3, [pc, #356]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80134ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ec:	079b      	lsls	r3, r3, #30
 80134ee:	d435      	bmi.n	801355c <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80134f0:	f7fe fb04 	bl	8011afc <HAL_GetTick>
 80134f4:	1b40      	subs	r0, r0, r5
 80134f6:	2864      	cmp	r0, #100	; 0x64
 80134f8:	d9f6      	bls.n	80134e8 <HAL_RCC_OscConfig+0x1ac>
          return HAL_TIMEOUT;
 80134fa:	2003      	movs	r0, #3
 80134fc:	e74f      	b.n	801339e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80134fe:	4954      	ldr	r1, [pc, #336]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013500:	680b      	ldr	r3, [r1, #0]
 8013502:	22f8      	movs	r2, #248	; 0xf8
 8013504:	4393      	bics	r3, r2
 8013506:	6922      	ldr	r2, [r4, #16]
 8013508:	00d2      	lsls	r2, r2, #3
 801350a:	4313      	orrs	r3, r2
 801350c:	600b      	str	r3, [r1, #0]
 801350e:	e7dd      	b.n	80134cc <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_DISABLE();
 8013510:	4a4f      	ldr	r2, [pc, #316]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013512:	6813      	ldr	r3, [r2, #0]
 8013514:	2101      	movs	r1, #1
 8013516:	438b      	bics	r3, r1
 8013518:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801351a:	f7fe faef 	bl	8011afc <HAL_GetTick>
 801351e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013520:	4b4b      	ldr	r3, [pc, #300]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	079b      	lsls	r3, r3, #30
 8013526:	d5d1      	bpl.n	80134cc <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013528:	f7fe fae8 	bl	8011afc <HAL_GetTick>
 801352c:	1b40      	subs	r0, r0, r5
 801352e:	2864      	cmp	r0, #100	; 0x64
 8013530:	d9f6      	bls.n	8013520 <HAL_RCC_OscConfig+0x1e4>
            return HAL_TIMEOUT;
 8013532:	2003      	movs	r0, #3
 8013534:	e733      	b.n	801339e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSI_DISABLE();
 8013536:	4a46      	ldr	r2, [pc, #280]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013538:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801353a:	2101      	movs	r1, #1
 801353c:	438b      	bics	r3, r1
 801353e:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8013540:	f7fe fadc 	bl	8011afc <HAL_GetTick>
 8013544:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013546:	4b42      	ldr	r3, [pc, #264]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801354a:	079b      	lsls	r3, r3, #30
 801354c:	d506      	bpl.n	801355c <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801354e:	f7fe fad5 	bl	8011afc <HAL_GetTick>
 8013552:	1b40      	subs	r0, r0, r5
 8013554:	2864      	cmp	r0, #100	; 0x64
 8013556:	d9f6      	bls.n	8013546 <HAL_RCC_OscConfig+0x20a>
          return HAL_TIMEOUT;
 8013558:	2003      	movs	r0, #3
 801355a:	e720      	b.n	801339e <HAL_RCC_OscConfig+0x62>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801355c:	6823      	ldr	r3, [r4, #0]
 801355e:	075b      	lsls	r3, r3, #29
 8013560:	d440      	bmi.n	80135e4 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8013562:	6823      	ldr	r3, [r4, #0]
 8013564:	06db      	lsls	r3, r3, #27
 8013566:	d512      	bpl.n	801358e <HAL_RCC_OscConfig+0x252>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8013568:	6963      	ldr	r3, [r4, #20]
 801356a:	2b01      	cmp	r3, #1
 801356c:	d100      	bne.n	8013570 <HAL_RCC_OscConfig+0x234>
 801356e:	e0c6      	b.n	80136fe <HAL_RCC_OscConfig+0x3c2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8013570:	3305      	adds	r3, #5
 8013572:	d000      	beq.n	8013576 <HAL_RCC_OscConfig+0x23a>
 8013574:	e0e3      	b.n	801373e <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_HSI14ADC_ENABLE();
 8013576:	4a36      	ldr	r2, [pc, #216]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013578:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801357a:	2104      	movs	r1, #4
 801357c:	438b      	bics	r3, r1
 801357e:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8013580:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8013582:	31f4      	adds	r1, #244	; 0xf4
 8013584:	438b      	bics	r3, r1
 8013586:	69a1      	ldr	r1, [r4, #24]
 8013588:	00c9      	lsls	r1, r1, #3
 801358a:	430b      	orrs	r3, r1
 801358c:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801358e:	6823      	ldr	r3, [r4, #0]
 8013590:	069b      	lsls	r3, r3, #26
 8013592:	d400      	bmi.n	8013596 <HAL_RCC_OscConfig+0x25a>
 8013594:	e10f      	b.n	80137b6 <HAL_RCC_OscConfig+0x47a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8013596:	4b2e      	ldr	r3, [pc, #184]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013598:	685a      	ldr	r2, [r3, #4]
 801359a:	230c      	movs	r3, #12
 801359c:	4013      	ands	r3, r2
 801359e:	2b0c      	cmp	r3, #12
 80135a0:	d100      	bne.n	80135a4 <HAL_RCC_OscConfig+0x268>
 80135a2:	e0ec      	b.n	801377e <HAL_RCC_OscConfig+0x442>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80135a4:	4b2a      	ldr	r3, [pc, #168]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80135a6:	685a      	ldr	r2, [r3, #4]
 80135a8:	230c      	movs	r3, #12
 80135aa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80135ac:	2b08      	cmp	r3, #8
 80135ae:	d100      	bne.n	80135b2 <HAL_RCC_OscConfig+0x276>
 80135b0:	e0dd      	b.n	801376e <HAL_RCC_OscConfig+0x432>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80135b2:	69e3      	ldr	r3, [r4, #28]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d100      	bne.n	80135ba <HAL_RCC_OscConfig+0x27e>
 80135b8:	e0ea      	b.n	8013790 <HAL_RCC_OscConfig+0x454>
        __HAL_RCC_HSI48_ENABLE();
 80135ba:	4a25      	ldr	r2, [pc, #148]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80135bc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80135be:	2380      	movs	r3, #128	; 0x80
 80135c0:	025b      	lsls	r3, r3, #9
 80135c2:	430b      	orrs	r3, r1
 80135c4:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 80135c6:	f7fe fa99 	bl	8011afc <HAL_GetTick>
 80135ca:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80135cc:	4b20      	ldr	r3, [pc, #128]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80135ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135d0:	03db      	lsls	r3, r3, #15
 80135d2:	d500      	bpl.n	80135d6 <HAL_RCC_OscConfig+0x29a>
 80135d4:	e0ef      	b.n	80137b6 <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80135d6:	f7fe fa91 	bl	8011afc <HAL_GetTick>
 80135da:	1b40      	subs	r0, r0, r5
 80135dc:	2864      	cmp	r0, #100	; 0x64
 80135de:	d9f5      	bls.n	80135cc <HAL_RCC_OscConfig+0x290>
            return HAL_TIMEOUT;
 80135e0:	2003      	movs	r0, #3
 80135e2:	e6dc      	b.n	801339e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_PWR_CLK_ENABLE();
 80135e4:	4a1a      	ldr	r2, [pc, #104]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 80135e6:	69d1      	ldr	r1, [r2, #28]
 80135e8:	2080      	movs	r0, #128	; 0x80
 80135ea:	0540      	lsls	r0, r0, #21
 80135ec:	4301      	orrs	r1, r0
 80135ee:	61d1      	str	r1, [r2, #28]
 80135f0:	69d3      	ldr	r3, [r2, #28]
 80135f2:	4003      	ands	r3, r0
 80135f4:	9301      	str	r3, [sp, #4]
 80135f6:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80135f8:	4a18      	ldr	r2, [pc, #96]	; (801365c <HAL_RCC_OscConfig+0x320>)
 80135fa:	6811      	ldr	r1, [r2, #0]
 80135fc:	2380      	movs	r3, #128	; 0x80
 80135fe:	005b      	lsls	r3, r3, #1
 8013600:	430b      	orrs	r3, r1
 8013602:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8013604:	f7fe fa7a 	bl	8011afc <HAL_GetTick>
 8013608:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801360a:	4b14      	ldr	r3, [pc, #80]	; (801365c <HAL_RCC_OscConfig+0x320>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	05db      	lsls	r3, r3, #23
 8013610:	d406      	bmi.n	8013620 <HAL_RCC_OscConfig+0x2e4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8013612:	f7fe fa73 	bl	8011afc <HAL_GetTick>
 8013616:	1b40      	subs	r0, r0, r5
 8013618:	2864      	cmp	r0, #100	; 0x64
 801361a:	d9f6      	bls.n	801360a <HAL_RCC_OscConfig+0x2ce>
        return HAL_TIMEOUT;
 801361c:	2003      	movs	r0, #3
 801361e:	e6be      	b.n	801339e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8013620:	4b0b      	ldr	r3, [pc, #44]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 8013622:	6a1a      	ldr	r2, [r3, #32]
 8013624:	2101      	movs	r1, #1
 8013626:	438a      	bics	r2, r1
 8013628:	621a      	str	r2, [r3, #32]
 801362a:	6a1a      	ldr	r2, [r3, #32]
 801362c:	3103      	adds	r1, #3
 801362e:	438a      	bics	r2, r1
 8013630:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8013632:	f7fe fa63 	bl	8011afc <HAL_GetTick>
 8013636:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013638:	4b05      	ldr	r3, [pc, #20]	; (8013650 <HAL_RCC_OscConfig+0x314>)
 801363a:	6a1b      	ldr	r3, [r3, #32]
 801363c:	079b      	lsls	r3, r3, #30
 801363e:	d511      	bpl.n	8013664 <HAL_RCC_OscConfig+0x328>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013640:	f7fe fa5c 	bl	8011afc <HAL_GetTick>
 8013644:	1b40      	subs	r0, r0, r5
 8013646:	4b06      	ldr	r3, [pc, #24]	; (8013660 <HAL_RCC_OscConfig+0x324>)
 8013648:	4298      	cmp	r0, r3
 801364a:	d9f5      	bls.n	8013638 <HAL_RCC_OscConfig+0x2fc>
        return HAL_TIMEOUT;
 801364c:	2003      	movs	r0, #3
 801364e:	e6a6      	b.n	801339e <HAL_RCC_OscConfig+0x62>
 8013650:	40021000 	.word	0x40021000
 8013654:	fffeffff 	.word	0xfffeffff
 8013658:	fffbffff 	.word	0xfffbffff
 801365c:	40007000 	.word	0x40007000
 8013660:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013664:	68a3      	ldr	r3, [r4, #8]
 8013666:	2b01      	cmp	r3, #1
 8013668:	d00b      	beq.n	8013682 <HAL_RCC_OscConfig+0x346>
 801366a:	2b00      	cmp	r3, #0
 801366c:	d121      	bne.n	80136b2 <HAL_RCC_OscConfig+0x376>
 801366e:	4b80      	ldr	r3, [pc, #512]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 8013670:	6a1a      	ldr	r2, [r3, #32]
 8013672:	2101      	movs	r1, #1
 8013674:	438a      	bics	r2, r1
 8013676:	621a      	str	r2, [r3, #32]
 8013678:	6a1a      	ldr	r2, [r3, #32]
 801367a:	3103      	adds	r1, #3
 801367c:	438a      	bics	r2, r1
 801367e:	621a      	str	r2, [r3, #32]
 8013680:	e004      	b.n	801368c <HAL_RCC_OscConfig+0x350>
 8013682:	4a7b      	ldr	r2, [pc, #492]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 8013684:	6a13      	ldr	r3, [r2, #32]
 8013686:	2101      	movs	r1, #1
 8013688:	430b      	orrs	r3, r1
 801368a:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801368c:	68a3      	ldr	r3, [r4, #8]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d025      	beq.n	80136de <HAL_RCC_OscConfig+0x3a2>
      tickstart = HAL_GetTick();
 8013692:	f7fe fa33 	bl	8011afc <HAL_GetTick>
 8013696:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013698:	4b75      	ldr	r3, [pc, #468]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 801369a:	6a1b      	ldr	r3, [r3, #32]
 801369c:	079b      	lsls	r3, r3, #30
 801369e:	d500      	bpl.n	80136a2 <HAL_RCC_OscConfig+0x366>
 80136a0:	e75f      	b.n	8013562 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80136a2:	f7fe fa2b 	bl	8011afc <HAL_GetTick>
 80136a6:	1b40      	subs	r0, r0, r5
 80136a8:	4b72      	ldr	r3, [pc, #456]	; (8013874 <HAL_RCC_OscConfig+0x538>)
 80136aa:	4298      	cmp	r0, r3
 80136ac:	d9f4      	bls.n	8013698 <HAL_RCC_OscConfig+0x35c>
          return HAL_TIMEOUT;
 80136ae:	2003      	movs	r0, #3
 80136b0:	e675      	b.n	801339e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80136b2:	2b05      	cmp	r3, #5
 80136b4:	d009      	beq.n	80136ca <HAL_RCC_OscConfig+0x38e>
 80136b6:	4b6e      	ldr	r3, [pc, #440]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 80136b8:	6a1a      	ldr	r2, [r3, #32]
 80136ba:	2101      	movs	r1, #1
 80136bc:	438a      	bics	r2, r1
 80136be:	621a      	str	r2, [r3, #32]
 80136c0:	6a1a      	ldr	r2, [r3, #32]
 80136c2:	3103      	adds	r1, #3
 80136c4:	438a      	bics	r2, r1
 80136c6:	621a      	str	r2, [r3, #32]
 80136c8:	e7e0      	b.n	801368c <HAL_RCC_OscConfig+0x350>
 80136ca:	4b69      	ldr	r3, [pc, #420]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 80136cc:	6a1a      	ldr	r2, [r3, #32]
 80136ce:	2104      	movs	r1, #4
 80136d0:	430a      	orrs	r2, r1
 80136d2:	621a      	str	r2, [r3, #32]
 80136d4:	6a1a      	ldr	r2, [r3, #32]
 80136d6:	3903      	subs	r1, #3
 80136d8:	430a      	orrs	r2, r1
 80136da:	621a      	str	r2, [r3, #32]
 80136dc:	e7d6      	b.n	801368c <HAL_RCC_OscConfig+0x350>
      tickstart = HAL_GetTick();
 80136de:	f7fe fa0d 	bl	8011afc <HAL_GetTick>
 80136e2:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80136e4:	4b62      	ldr	r3, [pc, #392]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 80136e6:	6a1b      	ldr	r3, [r3, #32]
 80136e8:	079b      	lsls	r3, r3, #30
 80136ea:	d400      	bmi.n	80136ee <HAL_RCC_OscConfig+0x3b2>
 80136ec:	e739      	b.n	8013562 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80136ee:	f7fe fa05 	bl	8011afc <HAL_GetTick>
 80136f2:	1b40      	subs	r0, r0, r5
 80136f4:	4b5f      	ldr	r3, [pc, #380]	; (8013874 <HAL_RCC_OscConfig+0x538>)
 80136f6:	4298      	cmp	r0, r3
 80136f8:	d9f4      	bls.n	80136e4 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 80136fa:	2003      	movs	r0, #3
 80136fc:	e64f      	b.n	801339e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14ADC_DISABLE();
 80136fe:	4b5c      	ldr	r3, [pc, #368]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 8013700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013702:	2104      	movs	r1, #4
 8013704:	430a      	orrs	r2, r1
 8013706:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8013708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801370a:	3903      	subs	r1, #3
 801370c:	430a      	orrs	r2, r1
 801370e:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8013710:	f7fe f9f4 	bl	8011afc <HAL_GetTick>
 8013714:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8013716:	4b56      	ldr	r3, [pc, #344]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 8013718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801371a:	079b      	lsls	r3, r3, #30
 801371c:	d406      	bmi.n	801372c <HAL_RCC_OscConfig+0x3f0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 801371e:	f7fe f9ed 	bl	8011afc <HAL_GetTick>
 8013722:	1b40      	subs	r0, r0, r5
 8013724:	2864      	cmp	r0, #100	; 0x64
 8013726:	d9f6      	bls.n	8013716 <HAL_RCC_OscConfig+0x3da>
          return HAL_TIMEOUT;
 8013728:	2003      	movs	r0, #3
 801372a:	e638      	b.n	801339e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801372c:	4950      	ldr	r1, [pc, #320]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 801372e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8013730:	22f8      	movs	r2, #248	; 0xf8
 8013732:	4393      	bics	r3, r2
 8013734:	69a2      	ldr	r2, [r4, #24]
 8013736:	00d2      	lsls	r2, r2, #3
 8013738:	4313      	orrs	r3, r2
 801373a:	634b      	str	r3, [r1, #52]	; 0x34
 801373c:	e727      	b.n	801358e <HAL_RCC_OscConfig+0x252>
      __HAL_RCC_HSI14ADC_DISABLE();
 801373e:	4b4c      	ldr	r3, [pc, #304]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 8013740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013742:	2104      	movs	r1, #4
 8013744:	430a      	orrs	r2, r1
 8013746:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8013748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801374a:	3903      	subs	r1, #3
 801374c:	438a      	bics	r2, r1
 801374e:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8013750:	f7fe f9d4 	bl	8011afc <HAL_GetTick>
 8013754:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8013756:	4b46      	ldr	r3, [pc, #280]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 8013758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801375a:	079b      	lsls	r3, r3, #30
 801375c:	d400      	bmi.n	8013760 <HAL_RCC_OscConfig+0x424>
 801375e:	e716      	b.n	801358e <HAL_RCC_OscConfig+0x252>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8013760:	f7fe f9cc 	bl	8011afc <HAL_GetTick>
 8013764:	1b40      	subs	r0, r0, r5
 8013766:	2864      	cmp	r0, #100	; 0x64
 8013768:	d9f5      	bls.n	8013756 <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 801376a:	2003      	movs	r0, #3
 801376c:	e617      	b.n	801339e <HAL_RCC_OscConfig+0x62>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801376e:	4b40      	ldr	r3, [pc, #256]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 8013770:	685b      	ldr	r3, [r3, #4]
 8013772:	22c0      	movs	r2, #192	; 0xc0
 8013774:	0252      	lsls	r2, r2, #9
 8013776:	4013      	ands	r3, r2
 8013778:	4293      	cmp	r3, r2
 801377a:	d000      	beq.n	801377e <HAL_RCC_OscConfig+0x442>
 801377c:	e719      	b.n	80135b2 <HAL_RCC_OscConfig+0x276>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801377e:	4b3c      	ldr	r3, [pc, #240]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 8013780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013782:	03db      	lsls	r3, r3, #15
 8013784:	d517      	bpl.n	80137b6 <HAL_RCC_OscConfig+0x47a>
 8013786:	69e3      	ldr	r3, [r4, #28]
 8013788:	2b01      	cmp	r3, #1
 801378a:	d014      	beq.n	80137b6 <HAL_RCC_OscConfig+0x47a>
        return HAL_ERROR;
 801378c:	2001      	movs	r0, #1
 801378e:	e606      	b.n	801339e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI48_DISABLE();
 8013790:	4a37      	ldr	r2, [pc, #220]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 8013792:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8013794:	4938      	ldr	r1, [pc, #224]	; (8013878 <HAL_RCC_OscConfig+0x53c>)
 8013796:	400b      	ands	r3, r1
 8013798:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801379a:	f7fe f9af 	bl	8011afc <HAL_GetTick>
 801379e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80137a0:	4b33      	ldr	r3, [pc, #204]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 80137a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137a4:	03db      	lsls	r3, r3, #15
 80137a6:	d506      	bpl.n	80137b6 <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80137a8:	f7fe f9a8 	bl	8011afc <HAL_GetTick>
 80137ac:	1b40      	subs	r0, r0, r5
 80137ae:	2864      	cmp	r0, #100	; 0x64
 80137b0:	d9f6      	bls.n	80137a0 <HAL_RCC_OscConfig+0x464>
            return HAL_TIMEOUT;
 80137b2:	2003      	movs	r0, #3
 80137b4:	e5f3      	b.n	801339e <HAL_RCC_OscConfig+0x62>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80137b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d055      	beq.n	8013868 <HAL_RCC_OscConfig+0x52c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80137bc:	4a2c      	ldr	r2, [pc, #176]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 80137be:	6851      	ldr	r1, [r2, #4]
 80137c0:	220c      	movs	r2, #12
 80137c2:	400a      	ands	r2, r1
 80137c4:	2a08      	cmp	r2, #8
 80137c6:	d051      	beq.n	801386c <HAL_RCC_OscConfig+0x530>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80137c8:	2b02      	cmp	r3, #2
 80137ca:	d012      	beq.n	80137f2 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 80137cc:	4a28      	ldr	r2, [pc, #160]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 80137ce:	6813      	ldr	r3, [r2, #0]
 80137d0:	492a      	ldr	r1, [pc, #168]	; (801387c <HAL_RCC_OscConfig+0x540>)
 80137d2:	400b      	ands	r3, r1
 80137d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80137d6:	f7fe f991 	bl	8011afc <HAL_GetTick>
 80137da:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80137dc:	4b24      	ldr	r3, [pc, #144]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	019b      	lsls	r3, r3, #6
 80137e2:	d53d      	bpl.n	8013860 <HAL_RCC_OscConfig+0x524>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80137e4:	f7fe f98a 	bl	8011afc <HAL_GetTick>
 80137e8:	1b00      	subs	r0, r0, r4
 80137ea:	2864      	cmp	r0, #100	; 0x64
 80137ec:	d9f6      	bls.n	80137dc <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 80137ee:	2003      	movs	r0, #3
 80137f0:	e5d5      	b.n	801339e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_DISABLE();
 80137f2:	4a1f      	ldr	r2, [pc, #124]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 80137f4:	6813      	ldr	r3, [r2, #0]
 80137f6:	4921      	ldr	r1, [pc, #132]	; (801387c <HAL_RCC_OscConfig+0x540>)
 80137f8:	400b      	ands	r3, r1
 80137fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80137fc:	f7fe f97e 	bl	8011afc <HAL_GetTick>
 8013800:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8013802:	4b1b      	ldr	r3, [pc, #108]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	019b      	lsls	r3, r3, #6
 8013808:	d506      	bpl.n	8013818 <HAL_RCC_OscConfig+0x4dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801380a:	f7fe f977 	bl	8011afc <HAL_GetTick>
 801380e:	1b40      	subs	r0, r0, r5
 8013810:	2864      	cmp	r0, #100	; 0x64
 8013812:	d9f6      	bls.n	8013802 <HAL_RCC_OscConfig+0x4c6>
            return HAL_TIMEOUT;
 8013814:	2003      	movs	r0, #3
 8013816:	e5c2      	b.n	801339e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013818:	4b15      	ldr	r3, [pc, #84]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 801381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801381c:	210f      	movs	r1, #15
 801381e:	438a      	bics	r2, r1
 8013820:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013822:	430a      	orrs	r2, r1
 8013824:	62da      	str	r2, [r3, #44]	; 0x2c
 8013826:	685a      	ldr	r2, [r3, #4]
 8013828:	4915      	ldr	r1, [pc, #84]	; (8013880 <HAL_RCC_OscConfig+0x544>)
 801382a:	400a      	ands	r2, r1
 801382c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801382e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013830:	4301      	orrs	r1, r0
 8013832:	430a      	orrs	r2, r1
 8013834:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8013836:	6819      	ldr	r1, [r3, #0]
 8013838:	2280      	movs	r2, #128	; 0x80
 801383a:	0452      	lsls	r2, r2, #17
 801383c:	430a      	orrs	r2, r1
 801383e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8013840:	f7fe f95c 	bl	8011afc <HAL_GetTick>
 8013844:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8013846:	4b0a      	ldr	r3, [pc, #40]	; (8013870 <HAL_RCC_OscConfig+0x534>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	019b      	lsls	r3, r3, #6
 801384c:	d406      	bmi.n	801385c <HAL_RCC_OscConfig+0x520>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801384e:	f7fe f955 	bl	8011afc <HAL_GetTick>
 8013852:	1b00      	subs	r0, r0, r4
 8013854:	2864      	cmp	r0, #100	; 0x64
 8013856:	d9f6      	bls.n	8013846 <HAL_RCC_OscConfig+0x50a>
            return HAL_TIMEOUT;
 8013858:	2003      	movs	r0, #3
 801385a:	e5a0      	b.n	801339e <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 801385c:	2000      	movs	r0, #0
 801385e:	e59e      	b.n	801339e <HAL_RCC_OscConfig+0x62>
 8013860:	2000      	movs	r0, #0
 8013862:	e59c      	b.n	801339e <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8013864:	2001      	movs	r0, #1
 8013866:	e59a      	b.n	801339e <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8013868:	2000      	movs	r0, #0
 801386a:	e598      	b.n	801339e <HAL_RCC_OscConfig+0x62>
      return HAL_ERROR;
 801386c:	2001      	movs	r0, #1
 801386e:	e596      	b.n	801339e <HAL_RCC_OscConfig+0x62>
 8013870:	40021000 	.word	0x40021000
 8013874:	00001388 	.word	0x00001388
 8013878:	fffeffff 	.word	0xfffeffff
 801387c:	feffffff 	.word	0xfeffffff
 8013880:	ffc27fff 	.word	0xffc27fff

08013884 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013884:	b570      	push	{r4, r5, r6, lr}
 8013886:	0005      	movs	r5, r0
 8013888:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801388a:	4b8d      	ldr	r3, [pc, #564]	; (8013ac0 <HAL_RCC_ClockConfig+0x23c>)
 801388c:	681a      	ldr	r2, [r3, #0]
 801388e:	2301      	movs	r3, #1
 8013890:	4013      	ands	r3, r2
 8013892:	428b      	cmp	r3, r1
 8013894:	d300      	bcc.n	8013898 <HAL_RCC_ClockConfig+0x14>
 8013896:	e082      	b.n	801399e <HAL_RCC_ClockConfig+0x11a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013898:	4989      	ldr	r1, [pc, #548]	; (8013ac0 <HAL_RCC_ClockConfig+0x23c>)
 801389a:	680b      	ldr	r3, [r1, #0]
 801389c:	2201      	movs	r2, #1
 801389e:	4393      	bics	r3, r2
 80138a0:	4323      	orrs	r3, r4
 80138a2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80138a4:	680b      	ldr	r3, [r1, #0]
 80138a6:	401a      	ands	r2, r3
 80138a8:	42a2      	cmp	r2, r4
 80138aa:	d001      	beq.n	80138b0 <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 80138ac:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80138ae:	bd70      	pop	{r4, r5, r6, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80138b0:	6803      	ldr	r3, [r0, #0]
 80138b2:	079b      	lsls	r3, r3, #30
 80138b4:	d506      	bpl.n	80138c4 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80138b6:	4a83      	ldr	r2, [pc, #524]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 80138b8:	6853      	ldr	r3, [r2, #4]
 80138ba:	21f0      	movs	r1, #240	; 0xf0
 80138bc:	438b      	bics	r3, r1
 80138be:	6881      	ldr	r1, [r0, #8]
 80138c0:	430b      	orrs	r3, r1
 80138c2:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80138c4:	682b      	ldr	r3, [r5, #0]
 80138c6:	07db      	lsls	r3, r3, #31
 80138c8:	d400      	bmi.n	80138cc <HAL_RCC_ClockConfig+0x48>
 80138ca:	e0e5      	b.n	8013a98 <HAL_RCC_ClockConfig+0x214>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80138cc:	686b      	ldr	r3, [r5, #4]
 80138ce:	2b01      	cmp	r3, #1
 80138d0:	d009      	beq.n	80138e6 <HAL_RCC_ClockConfig+0x62>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80138d2:	2b02      	cmp	r3, #2
 80138d4:	d02a      	beq.n	801392c <HAL_RCC_ClockConfig+0xa8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80138d6:	2b03      	cmp	r3, #3
 80138d8:	d02e      	beq.n	8013938 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80138da:	4a7a      	ldr	r2, [pc, #488]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 80138dc:	6812      	ldr	r2, [r2, #0]
 80138de:	0792      	lsls	r2, r2, #30
 80138e0:	d406      	bmi.n	80138f0 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 80138e2:	2001      	movs	r0, #1
 80138e4:	e7e3      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80138e6:	4a77      	ldr	r2, [pc, #476]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 80138e8:	6812      	ldr	r2, [r2, #0]
 80138ea:	0392      	lsls	r2, r2, #14
 80138ec:	d400      	bmi.n	80138f0 <HAL_RCC_ClockConfig+0x6c>
 80138ee:	e0e2      	b.n	8013ab6 <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80138f0:	4974      	ldr	r1, [pc, #464]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 80138f2:	684a      	ldr	r2, [r1, #4]
 80138f4:	2003      	movs	r0, #3
 80138f6:	4382      	bics	r2, r0
 80138f8:	4313      	orrs	r3, r2
 80138fa:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 80138fc:	f7fe f8fe 	bl	8011afc <HAL_GetTick>
 8013900:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013902:	686b      	ldr	r3, [r5, #4]
 8013904:	2b01      	cmp	r3, #1
 8013906:	d01d      	beq.n	8013944 <HAL_RCC_ClockConfig+0xc0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013908:	2b02      	cmp	r3, #2
 801390a:	d02a      	beq.n	8013962 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801390c:	2b03      	cmp	r3, #3
 801390e:	d037      	beq.n	8013980 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013910:	4b6c      	ldr	r3, [pc, #432]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 8013912:	685b      	ldr	r3, [r3, #4]
 8013914:	220c      	movs	r2, #12
 8013916:	421a      	tst	r2, r3
 8013918:	d100      	bne.n	801391c <HAL_RCC_ClockConfig+0x98>
 801391a:	e0bd      	b.n	8013a98 <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801391c:	f7fe f8ee 	bl	8011afc <HAL_GetTick>
 8013920:	1b00      	subs	r0, r0, r4
 8013922:	4b69      	ldr	r3, [pc, #420]	; (8013ac8 <HAL_RCC_ClockConfig+0x244>)
 8013924:	4298      	cmp	r0, r3
 8013926:	d9f3      	bls.n	8013910 <HAL_RCC_ClockConfig+0x8c>
            return HAL_TIMEOUT;
 8013928:	2003      	movs	r0, #3
 801392a:	e7c0      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801392c:	4a65      	ldr	r2, [pc, #404]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 801392e:	6812      	ldr	r2, [r2, #0]
 8013930:	0192      	lsls	r2, r2, #6
 8013932:	d4dd      	bmi.n	80138f0 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8013934:	2001      	movs	r0, #1
 8013936:	e7ba      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013938:	4a62      	ldr	r2, [pc, #392]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 801393a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801393c:	03d2      	lsls	r2, r2, #15
 801393e:	d4d7      	bmi.n	80138f0 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8013940:	2001      	movs	r0, #1
 8013942:	e7b4      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013944:	4b5f      	ldr	r3, [pc, #380]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 8013946:	685a      	ldr	r2, [r3, #4]
 8013948:	230c      	movs	r3, #12
 801394a:	4013      	ands	r3, r2
 801394c:	2b04      	cmp	r3, #4
 801394e:	d100      	bne.n	8013952 <HAL_RCC_ClockConfig+0xce>
 8013950:	e0a2      	b.n	8013a98 <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013952:	f7fe f8d3 	bl	8011afc <HAL_GetTick>
 8013956:	1b00      	subs	r0, r0, r4
 8013958:	4b5b      	ldr	r3, [pc, #364]	; (8013ac8 <HAL_RCC_ClockConfig+0x244>)
 801395a:	4298      	cmp	r0, r3
 801395c:	d9f2      	bls.n	8013944 <HAL_RCC_ClockConfig+0xc0>
            return HAL_TIMEOUT;
 801395e:	2003      	movs	r0, #3
 8013960:	e7a5      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013962:	4b58      	ldr	r3, [pc, #352]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 8013964:	685a      	ldr	r2, [r3, #4]
 8013966:	230c      	movs	r3, #12
 8013968:	4013      	ands	r3, r2
 801396a:	2b08      	cmp	r3, #8
 801396c:	d100      	bne.n	8013970 <HAL_RCC_ClockConfig+0xec>
 801396e:	e093      	b.n	8013a98 <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013970:	f7fe f8c4 	bl	8011afc <HAL_GetTick>
 8013974:	1b00      	subs	r0, r0, r4
 8013976:	4b54      	ldr	r3, [pc, #336]	; (8013ac8 <HAL_RCC_ClockConfig+0x244>)
 8013978:	4298      	cmp	r0, r3
 801397a:	d9f2      	bls.n	8013962 <HAL_RCC_ClockConfig+0xde>
            return HAL_TIMEOUT;
 801397c:	2003      	movs	r0, #3
 801397e:	e796      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8013980:	4b50      	ldr	r3, [pc, #320]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 8013982:	685a      	ldr	r2, [r3, #4]
 8013984:	230c      	movs	r3, #12
 8013986:	4013      	ands	r3, r2
 8013988:	2b0c      	cmp	r3, #12
 801398a:	d100      	bne.n	801398e <HAL_RCC_ClockConfig+0x10a>
 801398c:	e084      	b.n	8013a98 <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801398e:	f7fe f8b5 	bl	8011afc <HAL_GetTick>
 8013992:	1b00      	subs	r0, r0, r4
 8013994:	4b4c      	ldr	r3, [pc, #304]	; (8013ac8 <HAL_RCC_ClockConfig+0x244>)
 8013996:	4298      	cmp	r0, r3
 8013998:	d9f2      	bls.n	8013980 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 801399a:	2003      	movs	r0, #3
 801399c:	e787      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801399e:	6803      	ldr	r3, [r0, #0]
 80139a0:	079b      	lsls	r3, r3, #30
 80139a2:	d506      	bpl.n	80139b2 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80139a4:	4a47      	ldr	r2, [pc, #284]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 80139a6:	6853      	ldr	r3, [r2, #4]
 80139a8:	21f0      	movs	r1, #240	; 0xf0
 80139aa:	438b      	bics	r3, r1
 80139ac:	6881      	ldr	r1, [r0, #8]
 80139ae:	430b      	orrs	r3, r1
 80139b0:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80139b2:	682b      	ldr	r3, [r5, #0]
 80139b4:	07db      	lsls	r3, r3, #31
 80139b6:	d563      	bpl.n	8013a80 <HAL_RCC_ClockConfig+0x1fc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80139b8:	686b      	ldr	r3, [r5, #4]
 80139ba:	2b01      	cmp	r3, #1
 80139bc:	d009      	beq.n	80139d2 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80139be:	2b02      	cmp	r3, #2
 80139c0:	d028      	beq.n	8013a14 <HAL_RCC_ClockConfig+0x190>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80139c2:	2b03      	cmp	r3, #3
 80139c4:	d02c      	beq.n	8013a20 <HAL_RCC_ClockConfig+0x19c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80139c6:	4a3f      	ldr	r2, [pc, #252]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 80139c8:	6812      	ldr	r2, [r2, #0]
 80139ca:	0792      	lsls	r2, r2, #30
 80139cc:	d405      	bmi.n	80139da <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 80139ce:	2001      	movs	r0, #1
 80139d0:	e76d      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80139d2:	4a3c      	ldr	r2, [pc, #240]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 80139d4:	6812      	ldr	r2, [r2, #0]
 80139d6:	0392      	lsls	r2, r2, #14
 80139d8:	d56f      	bpl.n	8013aba <HAL_RCC_ClockConfig+0x236>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80139da:	493a      	ldr	r1, [pc, #232]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 80139dc:	684a      	ldr	r2, [r1, #4]
 80139de:	2003      	movs	r0, #3
 80139e0:	4382      	bics	r2, r0
 80139e2:	4313      	orrs	r3, r2
 80139e4:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 80139e6:	f7fe f889 	bl	8011afc <HAL_GetTick>
 80139ea:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80139ec:	686b      	ldr	r3, [r5, #4]
 80139ee:	2b01      	cmp	r3, #1
 80139f0:	d01c      	beq.n	8013a2c <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80139f2:	2b02      	cmp	r3, #2
 80139f4:	d028      	beq.n	8013a48 <HAL_RCC_ClockConfig+0x1c4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80139f6:	2b03      	cmp	r3, #3
 80139f8:	d034      	beq.n	8013a64 <HAL_RCC_ClockConfig+0x1e0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80139fa:	4b32      	ldr	r3, [pc, #200]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	220c      	movs	r2, #12
 8013a00:	421a      	tst	r2, r3
 8013a02:	d03d      	beq.n	8013a80 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013a04:	f7fe f87a 	bl	8011afc <HAL_GetTick>
 8013a08:	1b80      	subs	r0, r0, r6
 8013a0a:	4b2f      	ldr	r3, [pc, #188]	; (8013ac8 <HAL_RCC_ClockConfig+0x244>)
 8013a0c:	4298      	cmp	r0, r3
 8013a0e:	d9f4      	bls.n	80139fa <HAL_RCC_ClockConfig+0x176>
            return HAL_TIMEOUT;
 8013a10:	2003      	movs	r0, #3
 8013a12:	e74c      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013a14:	4a2b      	ldr	r2, [pc, #172]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 8013a16:	6812      	ldr	r2, [r2, #0]
 8013a18:	0192      	lsls	r2, r2, #6
 8013a1a:	d4de      	bmi.n	80139da <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8013a1c:	2001      	movs	r0, #1
 8013a1e:	e746      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013a20:	4a28      	ldr	r2, [pc, #160]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 8013a22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013a24:	03d2      	lsls	r2, r2, #15
 8013a26:	d4d8      	bmi.n	80139da <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8013a28:	2001      	movs	r0, #1
 8013a2a:	e740      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013a2c:	4b25      	ldr	r3, [pc, #148]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 8013a2e:	685a      	ldr	r2, [r3, #4]
 8013a30:	230c      	movs	r3, #12
 8013a32:	4013      	ands	r3, r2
 8013a34:	2b04      	cmp	r3, #4
 8013a36:	d023      	beq.n	8013a80 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013a38:	f7fe f860 	bl	8011afc <HAL_GetTick>
 8013a3c:	1b80      	subs	r0, r0, r6
 8013a3e:	4b22      	ldr	r3, [pc, #136]	; (8013ac8 <HAL_RCC_ClockConfig+0x244>)
 8013a40:	4298      	cmp	r0, r3
 8013a42:	d9f3      	bls.n	8013a2c <HAL_RCC_ClockConfig+0x1a8>
            return HAL_TIMEOUT;
 8013a44:	2003      	movs	r0, #3
 8013a46:	e732      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013a48:	4b1e      	ldr	r3, [pc, #120]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 8013a4a:	685a      	ldr	r2, [r3, #4]
 8013a4c:	230c      	movs	r3, #12
 8013a4e:	4013      	ands	r3, r2
 8013a50:	2b08      	cmp	r3, #8
 8013a52:	d015      	beq.n	8013a80 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013a54:	f7fe f852 	bl	8011afc <HAL_GetTick>
 8013a58:	1b80      	subs	r0, r0, r6
 8013a5a:	4b1b      	ldr	r3, [pc, #108]	; (8013ac8 <HAL_RCC_ClockConfig+0x244>)
 8013a5c:	4298      	cmp	r0, r3
 8013a5e:	d9f3      	bls.n	8013a48 <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
 8013a60:	2003      	movs	r0, #3
 8013a62:	e724      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8013a64:	4b17      	ldr	r3, [pc, #92]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 8013a66:	685a      	ldr	r2, [r3, #4]
 8013a68:	230c      	movs	r3, #12
 8013a6a:	4013      	ands	r3, r2
 8013a6c:	2b0c      	cmp	r3, #12
 8013a6e:	d007      	beq.n	8013a80 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013a70:	f7fe f844 	bl	8011afc <HAL_GetTick>
 8013a74:	1b80      	subs	r0, r0, r6
 8013a76:	4b14      	ldr	r3, [pc, #80]	; (8013ac8 <HAL_RCC_ClockConfig+0x244>)
 8013a78:	4298      	cmp	r0, r3
 8013a7a:	d9f3      	bls.n	8013a64 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
 8013a7c:	2003      	movs	r0, #3
 8013a7e:	e716      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013a80:	490f      	ldr	r1, [pc, #60]	; (8013ac0 <HAL_RCC_ClockConfig+0x23c>)
 8013a82:	680b      	ldr	r3, [r1, #0]
 8013a84:	2201      	movs	r2, #1
 8013a86:	4393      	bics	r3, r2
 8013a88:	4323      	orrs	r3, r4
 8013a8a:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8013a8c:	680b      	ldr	r3, [r1, #0]
 8013a8e:	401a      	ands	r2, r3
 8013a90:	42a2      	cmp	r2, r4
 8013a92:	d001      	beq.n	8013a98 <HAL_RCC_ClockConfig+0x214>
      return HAL_ERROR;
 8013a94:	2001      	movs	r0, #1
 8013a96:	e70a      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013a98:	682b      	ldr	r3, [r5, #0]
 8013a9a:	075b      	lsls	r3, r3, #29
 8013a9c:	d506      	bpl.n	8013aac <HAL_RCC_ClockConfig+0x228>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8013a9e:	4a09      	ldr	r2, [pc, #36]	; (8013ac4 <HAL_RCC_ClockConfig+0x240>)
 8013aa0:	6853      	ldr	r3, [r2, #4]
 8013aa2:	490a      	ldr	r1, [pc, #40]	; (8013acc <HAL_RCC_ClockConfig+0x248>)
 8013aa4:	400b      	ands	r3, r1
 8013aa6:	68e9      	ldr	r1, [r5, #12]
 8013aa8:	430b      	orrs	r3, r1
 8013aaa:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8013aac:	2000      	movs	r0, #0
 8013aae:	f7fd fffb 	bl	8011aa8 <HAL_InitTick>
  return HAL_OK;
 8013ab2:	2000      	movs	r0, #0
 8013ab4:	e6fb      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 8013ab6:	2001      	movs	r0, #1
 8013ab8:	e6f9      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 8013aba:	2001      	movs	r0, #1
 8013abc:	e6f7      	b.n	80138ae <HAL_RCC_ClockConfig+0x2a>
 8013abe:	46c0      	nop			; (mov r8, r8)
 8013ac0:	40022000 	.word	0x40022000
 8013ac4:	40021000 	.word	0x40021000
 8013ac8:	00001388 	.word	0x00001388
 8013acc:	fffff8ff 	.word	0xfffff8ff

08013ad0 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013ad0:	b530      	push	{r4, r5, lr}
 8013ad2:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8013ad4:	aa04      	add	r2, sp, #16
 8013ad6:	4b1f      	ldr	r3, [pc, #124]	; (8013b54 <HAL_RCC_GetSysClockFreq+0x84>)
 8013ad8:	0018      	movs	r0, r3
 8013ada:	c832      	ldmia	r0!, {r1, r4, r5}
 8013adc:	c232      	stmia	r2!, {r1, r4, r5}
 8013ade:	0011      	movs	r1, r2
 8013ae0:	6802      	ldr	r2, [r0, #0]
 8013ae2:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8013ae4:	466a      	mov	r2, sp
 8013ae6:	3310      	adds	r3, #16
 8013ae8:	cb13      	ldmia	r3!, {r0, r1, r4}
 8013aea:	c213      	stmia	r2!, {r0, r1, r4}
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8013af0:	4b19      	ldr	r3, [pc, #100]	; (8013b58 <HAL_RCC_GetSysClockFreq+0x88>)
 8013af2:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8013af4:	230c      	movs	r3, #12
 8013af6:	4013      	ands	r3, r2
 8013af8:	2b08      	cmp	r3, #8
 8013afa:	d004      	beq.n	8013b06 <HAL_RCC_GetSysClockFreq+0x36>
 8013afc:	2b0c      	cmp	r3, #12
 8013afe:	d026      	beq.n	8013b4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8013b00:	4816      	ldr	r0, [pc, #88]	; (8013b5c <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8013b02:	b009      	add	sp, #36	; 0x24
 8013b04:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8013b06:	0c91      	lsrs	r1, r2, #18
 8013b08:	230f      	movs	r3, #15
 8013b0a:	4019      	ands	r1, r3
 8013b0c:	a804      	add	r0, sp, #16
 8013b0e:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8013b10:	4911      	ldr	r1, [pc, #68]	; (8013b58 <HAL_RCC_GetSysClockFreq+0x88>)
 8013b12:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8013b14:	400b      	ands	r3, r1
 8013b16:	4669      	mov	r1, sp
 8013b18:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8013b1a:	23c0      	movs	r3, #192	; 0xc0
 8013b1c:	025b      	lsls	r3, r3, #9
 8013b1e:	401a      	ands	r2, r3
 8013b20:	2380      	movs	r3, #128	; 0x80
 8013b22:	025b      	lsls	r3, r3, #9
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d008      	beq.n	8013b3a <HAL_RCC_GetSysClockFreq+0x6a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8013b28:	23c0      	movs	r3, #192	; 0xc0
 8013b2a:	025b      	lsls	r3, r3, #9
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d009      	beq.n	8013b44 <HAL_RCC_GetSysClockFreq+0x74>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8013b30:	480a      	ldr	r0, [pc, #40]	; (8013b5c <HAL_RCC_GetSysClockFreq+0x8c>)
 8013b32:	f7ec fb0d 	bl	8000150 <__udivsi3>
 8013b36:	4360      	muls	r0, r4
 8013b38:	e7e3      	b.n	8013b02 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8013b3a:	4808      	ldr	r0, [pc, #32]	; (8013b5c <HAL_RCC_GetSysClockFreq+0x8c>)
 8013b3c:	f7ec fb08 	bl	8000150 <__udivsi3>
 8013b40:	4360      	muls	r0, r4
 8013b42:	e7de      	b.n	8013b02 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8013b44:	4806      	ldr	r0, [pc, #24]	; (8013b60 <HAL_RCC_GetSysClockFreq+0x90>)
 8013b46:	f7ec fb03 	bl	8000150 <__udivsi3>
 8013b4a:	4360      	muls	r0, r4
 8013b4c:	e7d9      	b.n	8013b02 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSI48_VALUE;
 8013b4e:	4804      	ldr	r0, [pc, #16]	; (8013b60 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8013b50:	e7d7      	b.n	8013b02 <HAL_RCC_GetSysClockFreq+0x32>
 8013b52:	46c0      	nop			; (mov r8, r8)
 8013b54:	08019a8c 	.word	0x08019a8c
 8013b58:	40021000 	.word	0x40021000
 8013b5c:	007a1200 	.word	0x007a1200
 8013b60:	02dc6c00 	.word	0x02dc6c00

08013b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013b64:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8013b66:	f7ff ffb3 	bl	8013ad0 <HAL_RCC_GetSysClockFreq>
 8013b6a:	4b05      	ldr	r3, [pc, #20]	; (8013b80 <HAL_RCC_GetHCLKFreq+0x1c>)
 8013b6c:	685a      	ldr	r2, [r3, #4]
 8013b6e:	0912      	lsrs	r2, r2, #4
 8013b70:	230f      	movs	r3, #15
 8013b72:	4013      	ands	r3, r2
 8013b74:	4a03      	ldr	r2, [pc, #12]	; (8013b84 <HAL_RCC_GetHCLKFreq+0x20>)
 8013b76:	5cd3      	ldrb	r3, [r2, r3]
 8013b78:	40d8      	lsrs	r0, r3
 8013b7a:	4b03      	ldr	r3, [pc, #12]	; (8013b88 <HAL_RCC_GetHCLKFreq+0x24>)
 8013b7c:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8013b7e:	bd10      	pop	{r4, pc}
 8013b80:	40021000 	.word	0x40021000
 8013b84:	0801d1b4 	.word	0x0801d1b4
 8013b88:	200000b8 	.word	0x200000b8

08013b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013b8c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8013b8e:	f7ff ffe9 	bl	8013b64 <HAL_RCC_GetHCLKFreq>
 8013b92:	4b04      	ldr	r3, [pc, #16]	; (8013ba4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8013b94:	685a      	ldr	r2, [r3, #4]
 8013b96:	0a12      	lsrs	r2, r2, #8
 8013b98:	2307      	movs	r3, #7
 8013b9a:	4013      	ands	r3, r2
 8013b9c:	4a02      	ldr	r2, [pc, #8]	; (8013ba8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8013b9e:	5cd3      	ldrb	r3, [r2, r3]
 8013ba0:	40d8      	lsrs	r0, r3
}    
 8013ba2:	bd10      	pop	{r4, pc}
 8013ba4:	40021000 	.word	0x40021000
 8013ba8:	0801d1b4 	.word	0x0801d1b4

08013bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013bac:	b530      	push	{r4, r5, lr}
 8013bae:	b083      	sub	sp, #12
 8013bb0:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013bb2:	6803      	ldr	r3, [r0, #0]
 8013bb4:	03db      	lsls	r3, r3, #15
 8013bb6:	d507      	bpl.n	8013bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8013bb8:	4b41      	ldr	r3, [pc, #260]	; (8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013bba:	6a1b      	ldr	r3, [r3, #32]
 8013bbc:	6842      	ldr	r2, [r0, #4]
 8013bbe:	4053      	eors	r3, r2
 8013bc0:	22c0      	movs	r2, #192	; 0xc0
 8013bc2:	0092      	lsls	r2, r2, #2
 8013bc4:	4213      	tst	r3, r2
 8013bc6:	d134      	bne.n	8013c32 <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013bc8:	6823      	ldr	r3, [r4, #0]
 8013bca:	07db      	lsls	r3, r3, #31
 8013bcc:	d506      	bpl.n	8013bdc <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013bce:	4a3c      	ldr	r2, [pc, #240]	; (8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013bd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013bd2:	2103      	movs	r1, #3
 8013bd4:	438b      	bics	r3, r1
 8013bd6:	68a1      	ldr	r1, [r4, #8]
 8013bd8:	430b      	orrs	r3, r1
 8013bda:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013bdc:	6823      	ldr	r3, [r4, #0]
 8013bde:	079b      	lsls	r3, r3, #30
 8013be0:	d506      	bpl.n	8013bf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013be2:	4a37      	ldr	r2, [pc, #220]	; (8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013be4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013be6:	4937      	ldr	r1, [pc, #220]	; (8013cc4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8013be8:	400b      	ands	r3, r1
 8013bea:	68e1      	ldr	r1, [r4, #12]
 8013bec:	430b      	orrs	r3, r1
 8013bee:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8013bf0:	6823      	ldr	r3, [r4, #0]
 8013bf2:	035b      	lsls	r3, r3, #13
 8013bf4:	d506      	bpl.n	8013c04 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8013bf6:	4a32      	ldr	r2, [pc, #200]	; (8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013bf8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013bfa:	4933      	ldr	r1, [pc, #204]	; (8013cc8 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8013bfc:	400b      	ands	r3, r1
 8013bfe:	6921      	ldr	r1, [r4, #16]
 8013c00:	430b      	orrs	r3, r1
 8013c02:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013c04:	6823      	ldr	r3, [r4, #0]
 8013c06:	069b      	lsls	r3, r3, #26
 8013c08:	d506      	bpl.n	8013c18 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013c0a:	4a2d      	ldr	r2, [pc, #180]	; (8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013c0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013c0e:	2110      	movs	r1, #16
 8013c10:	438b      	bics	r3, r1
 8013c12:	6961      	ldr	r1, [r4, #20]
 8013c14:	430b      	orrs	r3, r1
 8013c16:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013c18:	6823      	ldr	r3, [r4, #0]
 8013c1a:	055b      	lsls	r3, r3, #21
 8013c1c:	d54e      	bpl.n	8013cbc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013c1e:	4a28      	ldr	r2, [pc, #160]	; (8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013c20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013c22:	2140      	movs	r1, #64	; 0x40
 8013c24:	438b      	bics	r3, r1
 8013c26:	69a1      	ldr	r1, [r4, #24]
 8013c28:	430b      	orrs	r3, r1
 8013c2a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8013c2c:	2000      	movs	r0, #0
}
 8013c2e:	b003      	add	sp, #12
 8013c30:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8013c32:	4a23      	ldr	r2, [pc, #140]	; (8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013c34:	69d1      	ldr	r1, [r2, #28]
 8013c36:	2080      	movs	r0, #128	; 0x80
 8013c38:	0540      	lsls	r0, r0, #21
 8013c3a:	4301      	orrs	r1, r0
 8013c3c:	61d1      	str	r1, [r2, #28]
 8013c3e:	69d3      	ldr	r3, [r2, #28]
 8013c40:	4003      	ands	r3, r0
 8013c42:	9301      	str	r3, [sp, #4]
 8013c44:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013c46:	4a21      	ldr	r2, [pc, #132]	; (8013ccc <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013c48:	6811      	ldr	r1, [r2, #0]
 8013c4a:	2380      	movs	r3, #128	; 0x80
 8013c4c:	005b      	lsls	r3, r3, #1
 8013c4e:	430b      	orrs	r3, r1
 8013c50:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8013c52:	f7fd ff53 	bl	8011afc <HAL_GetTick>
 8013c56:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8013c58:	4b1c      	ldr	r3, [pc, #112]	; (8013ccc <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	05db      	lsls	r3, r3, #23
 8013c5e:	d406      	bmi.n	8013c6e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013c60:	f7fd ff4c 	bl	8011afc <HAL_GetTick>
 8013c64:	1b40      	subs	r0, r0, r5
 8013c66:	2864      	cmp	r0, #100	; 0x64
 8013c68:	d9f6      	bls.n	8013c58 <HAL_RCCEx_PeriphCLKConfig+0xac>
          return HAL_TIMEOUT;
 8013c6a:	2003      	movs	r0, #3
 8013c6c:	e7df      	b.n	8013c2e <HAL_RCCEx_PeriphCLKConfig+0x82>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013c6e:	4b14      	ldr	r3, [pc, #80]	; (8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013c70:	6a18      	ldr	r0, [r3, #32]
 8013c72:	4a17      	ldr	r2, [pc, #92]	; (8013cd0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8013c74:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8013c76:	6a1d      	ldr	r5, [r3, #32]
 8013c78:	2180      	movs	r1, #128	; 0x80
 8013c7a:	0249      	lsls	r1, r1, #9
 8013c7c:	4329      	orrs	r1, r5
 8013c7e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013c80:	6a19      	ldr	r1, [r3, #32]
 8013c82:	4d14      	ldr	r5, [pc, #80]	; (8013cd4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8013c84:	4029      	ands	r1, r5
 8013c86:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8013c88:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8013c8a:	0783      	lsls	r3, r0, #30
 8013c8c:	d407      	bmi.n	8013c9e <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8013c8e:	4a0c      	ldr	r2, [pc, #48]	; (8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013c90:	6a13      	ldr	r3, [r2, #32]
 8013c92:	490f      	ldr	r1, [pc, #60]	; (8013cd0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8013c94:	400b      	ands	r3, r1
 8013c96:	6861      	ldr	r1, [r4, #4]
 8013c98:	430b      	orrs	r3, r1
 8013c9a:	6213      	str	r3, [r2, #32]
 8013c9c:	e794      	b.n	8013bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        tickstart = HAL_GetTick();
 8013c9e:	f7fd ff2d 	bl	8011afc <HAL_GetTick>
 8013ca2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013ca4:	4b06      	ldr	r3, [pc, #24]	; (8013cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013ca6:	6a1b      	ldr	r3, [r3, #32]
 8013ca8:	079b      	lsls	r3, r3, #30
 8013caa:	d4f0      	bmi.n	8013c8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013cac:	f7fd ff26 	bl	8011afc <HAL_GetTick>
 8013cb0:	1b40      	subs	r0, r0, r5
 8013cb2:	4b09      	ldr	r3, [pc, #36]	; (8013cd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8013cb4:	4298      	cmp	r0, r3
 8013cb6:	d9f5      	bls.n	8013ca4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
 8013cb8:	2003      	movs	r0, #3
 8013cba:	e7b8      	b.n	8013c2e <HAL_RCCEx_PeriphCLKConfig+0x82>
  return HAL_OK;
 8013cbc:	2000      	movs	r0, #0
 8013cbe:	e7b6      	b.n	8013c2e <HAL_RCCEx_PeriphCLKConfig+0x82>
 8013cc0:	40021000 	.word	0x40021000
 8013cc4:	fffcffff 	.word	0xfffcffff
 8013cc8:	fff3ffff 	.word	0xfff3ffff
 8013ccc:	40007000 	.word	0x40007000
 8013cd0:	fffffcff 	.word	0xfffffcff
 8013cd4:	fffeffff 	.word	0xfffeffff
 8013cd8:	00001388 	.word	0x00001388

08013cdc <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8013cdc:	4770      	bx	lr

08013cde <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8013cde:	b570      	push	{r4, r5, r6, lr}
 8013ce0:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013ce2:	6802      	ldr	r2, [r0, #0]
 8013ce4:	68d3      	ldr	r3, [r2, #12]
 8013ce6:	21a0      	movs	r1, #160	; 0xa0
 8013ce8:	438b      	bics	r3, r1
 8013cea:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8013cec:	f7fd ff06 	bl	8011afc <HAL_GetTick>
 8013cf0:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8013cf2:	6823      	ldr	r3, [r4, #0]
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	069b      	lsls	r3, r3, #26
 8013cf8:	d408      	bmi.n	8013d0c <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013cfa:	f7fd feff 	bl	8011afc <HAL_GetTick>
 8013cfe:	1b40      	subs	r0, r0, r5
 8013d00:	23fa      	movs	r3, #250	; 0xfa
 8013d02:	009b      	lsls	r3, r3, #2
 8013d04:	4298      	cmp	r0, r3
 8013d06:	d9f4      	bls.n	8013cf2 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8013d08:	2003      	movs	r0, #3
 8013d0a:	e000      	b.n	8013d0e <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 8013d0c:	2000      	movs	r0, #0
}
 8013d0e:	bd70      	pop	{r4, r5, r6, pc}

08013d10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8013d10:	b570      	push	{r4, r5, r6, lr}
 8013d12:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013d14:	6803      	ldr	r3, [r0, #0]
 8013d16:	68da      	ldr	r2, [r3, #12]
 8013d18:	0652      	lsls	r2, r2, #25
 8013d1a:	d501      	bpl.n	8013d20 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8013d1c:	2000      	movs	r0, #0
}
 8013d1e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8013d20:	2201      	movs	r2, #1
 8013d22:	4252      	negs	r2, r2
 8013d24:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8013d26:	f7fd fee9 	bl	8011afc <HAL_GetTick>
 8013d2a:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013d2c:	6823      	ldr	r3, [r4, #0]
 8013d2e:	68db      	ldr	r3, [r3, #12]
 8013d30:	065b      	lsls	r3, r3, #25
 8013d32:	d408      	bmi.n	8013d46 <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013d34:	f7fd fee2 	bl	8011afc <HAL_GetTick>
 8013d38:	1b40      	subs	r0, r0, r5
 8013d3a:	23fa      	movs	r3, #250	; 0xfa
 8013d3c:	009b      	lsls	r3, r3, #2
 8013d3e:	4298      	cmp	r0, r3
 8013d40:	d9f4      	bls.n	8013d2c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8013d42:	2003      	movs	r0, #3
 8013d44:	e7eb      	b.n	8013d1e <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8013d46:	2000      	movs	r0, #0
 8013d48:	e7e9      	b.n	8013d1e <RTC_EnterInitMode+0xe>
	...

08013d4c <HAL_RTC_Init>:
{
 8013d4c:	b570      	push	{r4, r5, r6, lr}
 8013d4e:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8013d50:	d046      	beq.n	8013de0 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8013d52:	7f43      	ldrb	r3, [r0, #29]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d038      	beq.n	8013dca <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8013d58:	2302      	movs	r3, #2
 8013d5a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	22ca      	movs	r2, #202	; 0xca
 8013d60:	625a      	str	r2, [r3, #36]	; 0x24
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	3a77      	subs	r2, #119	; 0x77
 8013d66:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013d68:	0020      	movs	r0, r4
 8013d6a:	f7ff ffd1 	bl	8013d10 <RTC_EnterInitMode>
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	d12f      	bne.n	8013dd2 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8013d72:	6822      	ldr	r2, [r4, #0]
 8013d74:	6893      	ldr	r3, [r2, #8]
 8013d76:	491b      	ldr	r1, [pc, #108]	; (8013de4 <HAL_RTC_Init+0x98>)
 8013d78:	400b      	ands	r3, r1
 8013d7a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013d7c:	6821      	ldr	r1, [r4, #0]
 8013d7e:	688a      	ldr	r2, [r1, #8]
 8013d80:	6863      	ldr	r3, [r4, #4]
 8013d82:	6925      	ldr	r5, [r4, #16]
 8013d84:	432b      	orrs	r3, r5
 8013d86:	6965      	ldr	r5, [r4, #20]
 8013d88:	432b      	orrs	r3, r5
 8013d8a:	4313      	orrs	r3, r2
 8013d8c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8013d8e:	6823      	ldr	r3, [r4, #0]
 8013d90:	68e2      	ldr	r2, [r4, #12]
 8013d92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8013d94:	6821      	ldr	r1, [r4, #0]
 8013d96:	690b      	ldr	r3, [r1, #16]
 8013d98:	68a2      	ldr	r2, [r4, #8]
 8013d9a:	0412      	lsls	r2, r2, #16
 8013d9c:	4313      	orrs	r3, r2
 8013d9e:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8013da0:	6822      	ldr	r2, [r4, #0]
 8013da2:	68d3      	ldr	r3, [r2, #12]
 8013da4:	2180      	movs	r1, #128	; 0x80
 8013da6:	438b      	bics	r3, r1
 8013da8:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8013daa:	6822      	ldr	r2, [r4, #0]
 8013dac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013dae:	490e      	ldr	r1, [pc, #56]	; (8013de8 <HAL_RTC_Init+0x9c>)
 8013db0:	400b      	ands	r3, r1
 8013db2:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8013db4:	6822      	ldr	r2, [r4, #0]
 8013db6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013db8:	69a1      	ldr	r1, [r4, #24]
 8013dba:	430b      	orrs	r3, r1
 8013dbc:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013dbe:	6823      	ldr	r3, [r4, #0]
 8013dc0:	22ff      	movs	r2, #255	; 0xff
 8013dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	7763      	strb	r3, [r4, #29]
}
 8013dc8:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8013dca:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8013dcc:	f7ff ff86 	bl	8013cdc <HAL_RTC_MspInit>
 8013dd0:	e7c2      	b.n	8013d58 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013dd2:	6823      	ldr	r3, [r4, #0]
 8013dd4:	22ff      	movs	r2, #255	; 0xff
 8013dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013dd8:	2304      	movs	r3, #4
 8013dda:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8013ddc:	2001      	movs	r0, #1
 8013dde:	e7f3      	b.n	8013dc8 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8013de0:	2001      	movs	r0, #1
 8013de2:	e7f1      	b.n	8013dc8 <HAL_RTC_Init+0x7c>
 8013de4:	ff8fffbf 	.word	0xff8fffbf
 8013de8:	fffbffff 	.word	0xfffbffff

08013dec <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8013dec:	2300      	movs	r3, #0
  
  while(Value >= 10)
 8013dee:	e002      	b.n	8013df6 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8013df0:	3301      	adds	r3, #1
    Value -= 10;
 8013df2:	380a      	subs	r0, #10
 8013df4:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8013df6:	2809      	cmp	r0, #9
 8013df8:	d8fa      	bhi.n	8013df0 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8013dfa:	011b      	lsls	r3, r3, #4
 8013dfc:	b2db      	uxtb	r3, r3
 8013dfe:	4318      	orrs	r0, r3
}
 8013e00:	4770      	bx	lr
	...

08013e04 <HAL_RTC_SetTime>:
{
 8013e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e06:	0004      	movs	r4, r0
 8013e08:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8013e0a:	7f03      	ldrb	r3, [r0, #28]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d100      	bne.n	8013e12 <HAL_RTC_SetTime+0xe>
 8013e10:	e070      	b.n	8013ef4 <HAL_RTC_SetTime+0xf0>
 8013e12:	2301      	movs	r3, #1
 8013e14:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8013e16:	3301      	adds	r3, #1
 8013e18:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8013e1a:	2a00      	cmp	r2, #0
 8013e1c:	d141      	bne.n	8013ea2 <HAL_RTC_SetTime+0x9e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013e1e:	6803      	ldr	r3, [r0, #0]
 8013e20:	689b      	ldr	r3, [r3, #8]
 8013e22:	065b      	lsls	r3, r3, #25
 8013e24:	d401      	bmi.n	8013e2a <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8013e26:	2300      	movs	r3, #0
 8013e28:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013e2a:	7830      	ldrb	r0, [r6, #0]
 8013e2c:	f7ff ffde 	bl	8013dec <RTC_ByteToBcd2>
 8013e30:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8013e32:	7870      	ldrb	r0, [r6, #1]
 8013e34:	f7ff ffda 	bl	8013dec <RTC_ByteToBcd2>
 8013e38:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013e3a:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8013e3c:	78b0      	ldrb	r0, [r6, #2]
 8013e3e:	f7ff ffd5 	bl	8013dec <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8013e42:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8013e44:	7a30      	ldrb	r0, [r6, #8]
 8013e46:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013e48:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013e4a:	6823      	ldr	r3, [r4, #0]
 8013e4c:	22ca      	movs	r2, #202	; 0xca
 8013e4e:	625a      	str	r2, [r3, #36]	; 0x24
 8013e50:	6823      	ldr	r3, [r4, #0]
 8013e52:	3a77      	subs	r2, #119	; 0x77
 8013e54:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013e56:	0020      	movs	r0, r4
 8013e58:	f7ff ff5a 	bl	8013d10 <RTC_EnterInitMode>
 8013e5c:	1e07      	subs	r7, r0, #0
 8013e5e:	d131      	bne.n	8013ec4 <HAL_RTC_SetTime+0xc0>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013e60:	6823      	ldr	r3, [r4, #0]
 8013e62:	4825      	ldr	r0, [pc, #148]	; (8013ef8 <HAL_RTC_SetTime+0xf4>)
 8013e64:	4005      	ands	r5, r0
 8013e66:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8013e68:	6822      	ldr	r2, [r4, #0]
 8013e6a:	6893      	ldr	r3, [r2, #8]
 8013e6c:	4923      	ldr	r1, [pc, #140]	; (8013efc <HAL_RTC_SetTime+0xf8>)
 8013e6e:	400b      	ands	r3, r1
 8013e70:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013e72:	6821      	ldr	r1, [r4, #0]
 8013e74:	688b      	ldr	r3, [r1, #8]
 8013e76:	68f2      	ldr	r2, [r6, #12]
 8013e78:	6930      	ldr	r0, [r6, #16]
 8013e7a:	4302      	orrs	r2, r0
 8013e7c:	4313      	orrs	r3, r2
 8013e7e:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013e80:	6822      	ldr	r2, [r4, #0]
 8013e82:	68d3      	ldr	r3, [r2, #12]
 8013e84:	2180      	movs	r1, #128	; 0x80
 8013e86:	438b      	bics	r3, r1
 8013e88:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8013e8a:	6823      	ldr	r3, [r4, #0]
 8013e8c:	689b      	ldr	r3, [r3, #8]
 8013e8e:	069b      	lsls	r3, r3, #26
 8013e90:	d522      	bpl.n	8013ed8 <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013e92:	6823      	ldr	r3, [r4, #0]
 8013e94:	22ff      	movs	r2, #255	; 0xff
 8013e96:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8013e98:	2301      	movs	r3, #1
 8013e9a:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8013ea0:	e018      	b.n	8013ed4 <HAL_RTC_SetTime+0xd0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013ea2:	6803      	ldr	r3, [r0, #0]
 8013ea4:	689b      	ldr	r3, [r3, #8]
 8013ea6:	065b      	lsls	r3, r3, #25
 8013ea8:	d401      	bmi.n	8013eae <HAL_RTC_SetTime+0xaa>
      sTime->TimeFormat = 0x00;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013eae:	7835      	ldrb	r5, [r6, #0]
 8013eb0:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013eb2:	7870      	ldrb	r0, [r6, #1]
 8013eb4:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013eb6:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8013eb8:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013eba:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8013ebc:	7a30      	ldrb	r0, [r6, #8]
 8013ebe:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013ec0:	4305      	orrs	r5, r0
 8013ec2:	e7c2      	b.n	8013e4a <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013ec4:	6823      	ldr	r3, [r4, #0]
 8013ec6:	22ff      	movs	r2, #255	; 0xff
 8013ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013eca:	2304      	movs	r3, #4
 8013ecc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8013ece:	2300      	movs	r3, #0
 8013ed0:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8013ed2:	2701      	movs	r7, #1
}
 8013ed4:	0038      	movs	r0, r7
 8013ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013ed8:	0020      	movs	r0, r4
 8013eda:	f7ff ff00 	bl	8013cde <HAL_RTC_WaitForSynchro>
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	d0d7      	beq.n	8013e92 <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013ee2:	6823      	ldr	r3, [r4, #0]
 8013ee4:	22ff      	movs	r2, #255	; 0xff
 8013ee6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013ee8:	2304      	movs	r3, #4
 8013eea:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8013eec:	2300      	movs	r3, #0
 8013eee:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8013ef0:	2701      	movs	r7, #1
 8013ef2:	e7ef      	b.n	8013ed4 <HAL_RTC_SetTime+0xd0>
  __HAL_LOCK(hrtc);
 8013ef4:	2702      	movs	r7, #2
 8013ef6:	e7ed      	b.n	8013ed4 <HAL_RTC_SetTime+0xd0>
 8013ef8:	007f7f7f 	.word	0x007f7f7f
 8013efc:	fffbffff 	.word	0xfffbffff

08013f00 <HAL_RTC_SetDate>:
{
 8013f00:	b570      	push	{r4, r5, r6, lr}
 8013f02:	0004      	movs	r4, r0
 8013f04:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8013f06:	7f03      	ldrb	r3, [r0, #28]
 8013f08:	2b01      	cmp	r3, #1
 8013f0a:	d061      	beq.n	8013fd0 <HAL_RTC_SetDate+0xd0>
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8013f10:	3301      	adds	r3, #1
 8013f12:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8013f14:	2a00      	cmp	r2, #0
 8013f16:	d106      	bne.n	8013f26 <HAL_RTC_SetDate+0x26>
 8013f18:	784b      	ldrb	r3, [r1, #1]
 8013f1a:	06d9      	lsls	r1, r3, #27
 8013f1c:	d503      	bpl.n	8013f26 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8013f1e:	2110      	movs	r1, #16
 8013f20:	438b      	bics	r3, r1
 8013f22:	330a      	adds	r3, #10
 8013f24:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 8013f26:	2a00      	cmp	r2, #0
 8013f28:	d12f      	bne.n	8013f8a <HAL_RTC_SetDate+0x8a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013f2a:	78f0      	ldrb	r0, [r6, #3]
 8013f2c:	f7ff ff5e 	bl	8013dec <RTC_ByteToBcd2>
 8013f30:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8013f32:	7870      	ldrb	r0, [r6, #1]
 8013f34:	f7ff ff5a 	bl	8013dec <RTC_ByteToBcd2>
 8013f38:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013f3a:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8013f3c:	78b0      	ldrb	r0, [r6, #2]
 8013f3e:	f7ff ff55 	bl	8013dec <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8013f42:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 8013f44:	7830      	ldrb	r0, [r6, #0]
 8013f46:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013f48:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013f4a:	6823      	ldr	r3, [r4, #0]
 8013f4c:	22ca      	movs	r2, #202	; 0xca
 8013f4e:	625a      	str	r2, [r3, #36]	; 0x24
 8013f50:	6823      	ldr	r3, [r4, #0]
 8013f52:	3a77      	subs	r2, #119	; 0x77
 8013f54:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013f56:	0020      	movs	r0, r4
 8013f58:	f7ff feda 	bl	8013d10 <RTC_EnterInitMode>
 8013f5c:	1e06      	subs	r6, r0, #0
 8013f5e:	d11f      	bne.n	8013fa0 <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8013f60:	6823      	ldr	r3, [r4, #0]
 8013f62:	481c      	ldr	r0, [pc, #112]	; (8013fd4 <HAL_RTC_SetDate+0xd4>)
 8013f64:	4005      	ands	r5, r0
 8013f66:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013f68:	6822      	ldr	r2, [r4, #0]
 8013f6a:	68d3      	ldr	r3, [r2, #12]
 8013f6c:	2180      	movs	r1, #128	; 0x80
 8013f6e:	438b      	bics	r3, r1
 8013f70:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8013f72:	6823      	ldr	r3, [r4, #0]
 8013f74:	689b      	ldr	r3, [r3, #8]
 8013f76:	069b      	lsls	r3, r3, #26
 8013f78:	d51c      	bpl.n	8013fb4 <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013f7a:	6823      	ldr	r3, [r4, #0]
 8013f7c:	22ff      	movs	r2, #255	; 0xff
 8013f7e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8013f80:	2301      	movs	r3, #1
 8013f82:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8013f84:	2300      	movs	r3, #0
 8013f86:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8013f88:	e012      	b.n	8013fb0 <HAL_RTC_SetDate+0xb0>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8013f8a:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8013f8c:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013f8e:	78f5      	ldrb	r5, [r6, #3]
 8013f90:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8013f92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013f94:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8013f96:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8013f98:	7830      	ldrb	r0, [r6, #0]
 8013f9a:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013f9c:	4305      	orrs	r5, r0
 8013f9e:	e7d4      	b.n	8013f4a <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013fa0:	6823      	ldr	r3, [r4, #0]
 8013fa2:	22ff      	movs	r2, #255	; 0xff
 8013fa4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013fa6:	2304      	movs	r3, #4
 8013fa8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8013faa:	2300      	movs	r3, #0
 8013fac:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8013fae:	2601      	movs	r6, #1
}
 8013fb0:	0030      	movs	r0, r6
 8013fb2:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013fb4:	0020      	movs	r0, r4
 8013fb6:	f7ff fe92 	bl	8013cde <HAL_RTC_WaitForSynchro>
 8013fba:	2800      	cmp	r0, #0
 8013fbc:	d0dd      	beq.n	8013f7a <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013fbe:	6823      	ldr	r3, [r4, #0]
 8013fc0:	22ff      	movs	r2, #255	; 0xff
 8013fc2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013fc4:	2304      	movs	r3, #4
 8013fc6:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8013fc8:	2300      	movs	r3, #0
 8013fca:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8013fcc:	2601      	movs	r6, #1
 8013fce:	e7ef      	b.n	8013fb0 <HAL_RTC_SetDate+0xb0>
 __HAL_LOCK(hrtc);
 8013fd0:	2602      	movs	r6, #2
 8013fd2:	e7ed      	b.n	8013fb0 <HAL_RTC_SetDate+0xb0>
 8013fd4:	00ffff3f 	.word	0x00ffff3f

08013fd8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8013fd8:	0902      	lsrs	r2, r0, #4
 8013fda:	0093      	lsls	r3, r2, #2
 8013fdc:	189b      	adds	r3, r3, r2
 8013fde:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8013fe0:	230f      	movs	r3, #15
 8013fe2:	4018      	ands	r0, r3
 8013fe4:	1880      	adds	r0, r0, r2
 8013fe6:	b2c0      	uxtb	r0, r0
}
 8013fe8:	4770      	bx	lr
	...

08013fec <HAL_RTC_GetTime>:
{
 8013fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fee:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013ff0:	6803      	ldr	r3, [r0, #0]
 8013ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ff4:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8013ff6:	6803      	ldr	r3, [r0, #0]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	490f      	ldr	r1, [pc, #60]	; (8014038 <HAL_RTC_GetTime+0x4c>)
 8013ffc:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8013ffe:	0c1d      	lsrs	r5, r3, #16
 8014000:	203f      	movs	r0, #63	; 0x3f
 8014002:	4028      	ands	r0, r5
 8014004:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8014006:	0a1e      	lsrs	r6, r3, #8
 8014008:	277f      	movs	r7, #127	; 0x7f
 801400a:	403e      	ands	r6, r7
 801400c:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801400e:	401f      	ands	r7, r3
 8014010:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8014012:	2140      	movs	r1, #64	; 0x40
 8014014:	4029      	ands	r1, r5
 8014016:	7221      	strb	r1, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 8014018:	2a00      	cmp	r2, #0
 801401a:	d10a      	bne.n	8014032 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801401c:	f7ff ffdc 	bl	8013fd8 <RTC_Bcd2ToByte>
 8014020:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8014022:	0030      	movs	r0, r6
 8014024:	f7ff ffd8 	bl	8013fd8 <RTC_Bcd2ToByte>
 8014028:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 801402a:	0038      	movs	r0, r7
 801402c:	f7ff ffd4 	bl	8013fd8 <RTC_Bcd2ToByte>
 8014030:	70a0      	strb	r0, [r4, #2]
}
 8014032:	2000      	movs	r0, #0
 8014034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014036:	46c0      	nop			; (mov r8, r8)
 8014038:	007f7f7f 	.word	0x007f7f7f

0801403c <HAL_RTC_GetDate>:
{
 801403c:	b570      	push	{r4, r5, r6, lr}
 801403e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8014040:	6803      	ldr	r3, [r0, #0]
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	490e      	ldr	r1, [pc, #56]	; (8014080 <HAL_RTC_GetDate+0x44>)
 8014046:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8014048:	0c18      	lsrs	r0, r3, #16
 801404a:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801404c:	0a19      	lsrs	r1, r3, #8
 801404e:	261f      	movs	r6, #31
 8014050:	400e      	ands	r6, r1
 8014052:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8014054:	253f      	movs	r5, #63	; 0x3f
 8014056:	401d      	ands	r5, r3
 8014058:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801405a:	0b5b      	lsrs	r3, r3, #13
 801405c:	2107      	movs	r1, #7
 801405e:	400b      	ands	r3, r1
 8014060:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8014062:	2a00      	cmp	r2, #0
 8014064:	d10a      	bne.n	801407c <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8014066:	f7ff ffb7 	bl	8013fd8 <RTC_Bcd2ToByte>
 801406a:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801406c:	0030      	movs	r0, r6
 801406e:	f7ff ffb3 	bl	8013fd8 <RTC_Bcd2ToByte>
 8014072:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8014074:	0028      	movs	r0, r5
 8014076:	f7ff ffaf 	bl	8013fd8 <RTC_Bcd2ToByte>
 801407a:	70a0      	strb	r0, [r4, #2]
}
 801407c:	2000      	movs	r0, #0
 801407e:	bd70      	pop	{r4, r5, r6, pc}
 8014080:	00ffff3f 	.word	0x00ffff3f

08014084 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8014084:	6803      	ldr	r3, [r0, #0]
 8014086:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8014088:	0089      	lsls	r1, r1, #2
 801408a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801408c:	600a      	str	r2, [r1, #0]
}
 801408e:	4770      	bx	lr

08014090 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8014090:	6803      	ldr	r3, [r0, #0]
 8014092:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8014094:	0089      	lsls	r1, r1, #2
 8014096:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8014098:	6808      	ldr	r0, [r1, #0]
}
 801409a:	4770      	bx	lr

0801409c <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801409c:	4770      	bx	lr

0801409e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801409e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80140a0:	2239      	movs	r2, #57	; 0x39
 80140a2:	2302      	movs	r3, #2
 80140a4:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80140a6:	6804      	ldr	r4, [r0, #0]
 80140a8:	6823      	ldr	r3, [r4, #0]
 80140aa:	2101      	movs	r1, #1
 80140ac:	430b      	orrs	r3, r1
 80140ae:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80140b0:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 80140b2:	2000      	movs	r0, #0
 80140b4:	bd10      	pop	{r4, pc}
	...

080140b8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80140b8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80140ba:	4a1f      	ldr	r2, [pc, #124]	; (8014138 <TIM_Base_SetConfig+0x80>)
 80140bc:	4290      	cmp	r0, r2
 80140be:	d006      	beq.n	80140ce <TIM_Base_SetConfig+0x16>
 80140c0:	2280      	movs	r2, #128	; 0x80
 80140c2:	05d2      	lsls	r2, r2, #23
 80140c4:	4290      	cmp	r0, r2
 80140c6:	d002      	beq.n	80140ce <TIM_Base_SetConfig+0x16>
 80140c8:	4a1c      	ldr	r2, [pc, #112]	; (801413c <TIM_Base_SetConfig+0x84>)
 80140ca:	4290      	cmp	r0, r2
 80140cc:	d103      	bne.n	80140d6 <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80140ce:	2270      	movs	r2, #112	; 0x70
 80140d0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80140d2:	684a      	ldr	r2, [r1, #4]
 80140d4:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80140d6:	4a18      	ldr	r2, [pc, #96]	; (8014138 <TIM_Base_SetConfig+0x80>)
 80140d8:	4290      	cmp	r0, r2
 80140da:	d012      	beq.n	8014102 <TIM_Base_SetConfig+0x4a>
 80140dc:	2280      	movs	r2, #128	; 0x80
 80140de:	05d2      	lsls	r2, r2, #23
 80140e0:	4290      	cmp	r0, r2
 80140e2:	d00e      	beq.n	8014102 <TIM_Base_SetConfig+0x4a>
 80140e4:	4a15      	ldr	r2, [pc, #84]	; (801413c <TIM_Base_SetConfig+0x84>)
 80140e6:	4290      	cmp	r0, r2
 80140e8:	d00b      	beq.n	8014102 <TIM_Base_SetConfig+0x4a>
 80140ea:	4a15      	ldr	r2, [pc, #84]	; (8014140 <TIM_Base_SetConfig+0x88>)
 80140ec:	4290      	cmp	r0, r2
 80140ee:	d008      	beq.n	8014102 <TIM_Base_SetConfig+0x4a>
 80140f0:	4a14      	ldr	r2, [pc, #80]	; (8014144 <TIM_Base_SetConfig+0x8c>)
 80140f2:	4290      	cmp	r0, r2
 80140f4:	d005      	beq.n	8014102 <TIM_Base_SetConfig+0x4a>
 80140f6:	4a14      	ldr	r2, [pc, #80]	; (8014148 <TIM_Base_SetConfig+0x90>)
 80140f8:	4290      	cmp	r0, r2
 80140fa:	d002      	beq.n	8014102 <TIM_Base_SetConfig+0x4a>
 80140fc:	4a13      	ldr	r2, [pc, #76]	; (801414c <TIM_Base_SetConfig+0x94>)
 80140fe:	4290      	cmp	r0, r2
 8014100:	d103      	bne.n	801410a <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014102:	4a13      	ldr	r2, [pc, #76]	; (8014150 <TIM_Base_SetConfig+0x98>)
 8014104:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014106:	68ca      	ldr	r2, [r1, #12]
 8014108:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 801410a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801410c:	688b      	ldr	r3, [r1, #8]
 801410e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8014110:	680b      	ldr	r3, [r1, #0]
 8014112:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014114:	4b08      	ldr	r3, [pc, #32]	; (8014138 <TIM_Base_SetConfig+0x80>)
 8014116:	4298      	cmp	r0, r3
 8014118:	d008      	beq.n	801412c <TIM_Base_SetConfig+0x74>
 801411a:	4b0a      	ldr	r3, [pc, #40]	; (8014144 <TIM_Base_SetConfig+0x8c>)
 801411c:	4298      	cmp	r0, r3
 801411e:	d005      	beq.n	801412c <TIM_Base_SetConfig+0x74>
 8014120:	4b09      	ldr	r3, [pc, #36]	; (8014148 <TIM_Base_SetConfig+0x90>)
 8014122:	4298      	cmp	r0, r3
 8014124:	d002      	beq.n	801412c <TIM_Base_SetConfig+0x74>
 8014126:	4b09      	ldr	r3, [pc, #36]	; (801414c <TIM_Base_SetConfig+0x94>)
 8014128:	4298      	cmp	r0, r3
 801412a:	d101      	bne.n	8014130 <TIM_Base_SetConfig+0x78>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801412c:	690b      	ldr	r3, [r1, #16]
 801412e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8014130:	2301      	movs	r3, #1
 8014132:	6143      	str	r3, [r0, #20]
}
 8014134:	4770      	bx	lr
 8014136:	46c0      	nop			; (mov r8, r8)
 8014138:	40012c00 	.word	0x40012c00
 801413c:	40000400 	.word	0x40000400
 8014140:	40002000 	.word	0x40002000
 8014144:	40014000 	.word	0x40014000
 8014148:	40014400 	.word	0x40014400
 801414c:	40014800 	.word	0x40014800
 8014150:	fffffcff 	.word	0xfffffcff

08014154 <HAL_TIM_Base_Init>:
{
 8014154:	b570      	push	{r4, r5, r6, lr}
 8014156:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8014158:	d014      	beq.n	8014184 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801415a:	2339      	movs	r3, #57	; 0x39
 801415c:	5cc3      	ldrb	r3, [r0, r3]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d00a      	beq.n	8014178 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8014162:	2539      	movs	r5, #57	; 0x39
 8014164:	2302      	movs	r3, #2
 8014166:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014168:	1d21      	adds	r1, r4, #4
 801416a:	6820      	ldr	r0, [r4, #0]
 801416c:	f7ff ffa4 	bl	80140b8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8014170:	2301      	movs	r3, #1
 8014172:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8014174:	2000      	movs	r0, #0
}
 8014176:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8014178:	3338      	adds	r3, #56	; 0x38
 801417a:	2200      	movs	r2, #0
 801417c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 801417e:	f7ff ff8d 	bl	801409c <HAL_TIM_Base_MspInit>
 8014182:	e7ee      	b.n	8014162 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8014184:	2001      	movs	r0, #1
 8014186:	e7f6      	b.n	8014176 <HAL_TIM_Base_Init+0x22>

08014188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8014188:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801418a:	2338      	movs	r3, #56	; 0x38
 801418c:	5cc3      	ldrb	r3, [r0, r3]
 801418e:	2b01      	cmp	r3, #1
 8014190:	d01e      	beq.n	80141d0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8014192:	2238      	movs	r2, #56	; 0x38
 8014194:	2501      	movs	r5, #1
 8014196:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8014198:	2439      	movs	r4, #57	; 0x39
 801419a:	2302      	movs	r3, #2
 801419c:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801419e:	6806      	ldr	r6, [r0, #0]
 80141a0:	6873      	ldr	r3, [r6, #4]
 80141a2:	2770      	movs	r7, #112	; 0x70
 80141a4:	43bb      	bics	r3, r7
 80141a6:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80141a8:	6806      	ldr	r6, [r0, #0]
 80141aa:	6873      	ldr	r3, [r6, #4]
 80141ac:	680f      	ldr	r7, [r1, #0]
 80141ae:	433b      	orrs	r3, r7
 80141b0:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80141b2:	6806      	ldr	r6, [r0, #0]
 80141b4:	68b3      	ldr	r3, [r6, #8]
 80141b6:	2780      	movs	r7, #128	; 0x80
 80141b8:	43bb      	bics	r3, r7
 80141ba:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80141bc:	6806      	ldr	r6, [r0, #0]
 80141be:	68b3      	ldr	r3, [r6, #8]
 80141c0:	6849      	ldr	r1, [r1, #4]
 80141c2:	430b      	orrs	r3, r1
 80141c4:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80141c6:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80141c8:	2300      	movs	r3, #0
 80141ca:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80141cc:	2000      	movs	r0, #0
}
 80141ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80141d0:	2002      	movs	r0, #2
 80141d2:	e7fc      	b.n	80141ce <HAL_TIMEx_MasterConfigSynchronization+0x46>

080141d4 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80141d4:	4770      	bx	lr

080141d6 <HAL_UART_DeInit>:
{
 80141d6:	b570      	push	{r4, r5, r6, lr}
 80141d8:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80141da:	d016      	beq.n	801420a <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 80141dc:	2669      	movs	r6, #105	; 0x69
 80141de:	2302      	movs	r3, #2
 80141e0:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 80141e2:	6802      	ldr	r2, [r0, #0]
 80141e4:	6813      	ldr	r3, [r2, #0]
 80141e6:	2101      	movs	r1, #1
 80141e8:	438b      	bics	r3, r1
 80141ea:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 80141ec:	6803      	ldr	r3, [r0, #0]
 80141ee:	2500      	movs	r5, #0
 80141f0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80141f2:	6803      	ldr	r3, [r0, #0]
 80141f4:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80141f6:	6803      	ldr	r3, [r0, #0]
 80141f8:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80141fa:	f7ff ffeb 	bl	80141d4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80141fe:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8014200:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8014202:	2368      	movs	r3, #104	; 0x68
 8014204:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8014206:	2000      	movs	r0, #0
}
 8014208:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 801420a:	2001      	movs	r0, #1
 801420c:	e7fc      	b.n	8014208 <HAL_UART_DeInit+0x32>

0801420e <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801420e:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014210:	2369      	movs	r3, #105	; 0x69
 8014212:	5cc3      	ldrb	r3, [r0, r3]
 8014214:	2b01      	cmp	r3, #1
 8014216:	d003      	beq.n	8014220 <HAL_UART_Transmit_IT+0x12>
 8014218:	2369      	movs	r3, #105	; 0x69
 801421a:	5cc3      	ldrb	r3, [r0, r3]
 801421c:	2b22      	cmp	r3, #34	; 0x22
 801421e:	d12b      	bne.n	8014278 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8014220:	2900      	cmp	r1, #0
 8014222:	d02b      	beq.n	801427c <HAL_UART_Transmit_IT+0x6e>
 8014224:	2a00      	cmp	r2, #0
 8014226:	d02b      	beq.n	8014280 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014228:	2368      	movs	r3, #104	; 0x68
 801422a:	5cc3      	ldrb	r3, [r0, r3]
 801422c:	2b01      	cmp	r3, #1
 801422e:	d029      	beq.n	8014284 <HAL_UART_Transmit_IT+0x76>
 8014230:	2368      	movs	r3, #104	; 0x68
 8014232:	2401      	movs	r4, #1
 8014234:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 8014236:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8014238:	3b18      	subs	r3, #24
 801423a:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 801423c:	3302      	adds	r3, #2
 801423e:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014240:	2300      	movs	r3, #0
 8014242:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8014244:	3369      	adds	r3, #105	; 0x69
 8014246:	5cc3      	ldrb	r3, [r0, r3]
 8014248:	2b22      	cmp	r3, #34	; 0x22
 801424a:	d011      	beq.n	8014270 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 801424c:	2369      	movs	r3, #105	; 0x69
 801424e:	2212      	movs	r2, #18
 8014250:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8014252:	6802      	ldr	r2, [r0, #0]
 8014254:	6893      	ldr	r3, [r2, #8]
 8014256:	2101      	movs	r1, #1
 8014258:	430b      	orrs	r3, r1
 801425a:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801425c:	2368      	movs	r3, #104	; 0x68
 801425e:	2200      	movs	r2, #0
 8014260:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8014262:	6802      	ldr	r2, [r0, #0]
 8014264:	6813      	ldr	r3, [r2, #0]
 8014266:	317f      	adds	r1, #127	; 0x7f
 8014268:	430b      	orrs	r3, r1
 801426a:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 801426c:	2000      	movs	r0, #0
 801426e:	e004      	b.n	801427a <HAL_UART_Transmit_IT+0x6c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8014270:	3347      	adds	r3, #71	; 0x47
 8014272:	2232      	movs	r2, #50	; 0x32
 8014274:	54c2      	strb	r2, [r0, r3]
 8014276:	e7ec      	b.n	8014252 <HAL_UART_Transmit_IT+0x44>
  }
  else
  {
    return HAL_BUSY;
 8014278:	2002      	movs	r0, #2
  }
}
 801427a:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 801427c:	2001      	movs	r0, #1
 801427e:	e7fc      	b.n	801427a <HAL_UART_Transmit_IT+0x6c>
 8014280:	2001      	movs	r0, #1
 8014282:	e7fa      	b.n	801427a <HAL_UART_Transmit_IT+0x6c>
    __HAL_LOCK(huart);
 8014284:	2002      	movs	r0, #2
 8014286:	e7f8      	b.n	801427a <HAL_UART_Transmit_IT+0x6c>

08014288 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014288:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801428a:	2369      	movs	r3, #105	; 0x69
 801428c:	5cc3      	ldrb	r3, [r0, r3]
 801428e:	2b01      	cmp	r3, #1
 8014290:	d003      	beq.n	801429a <HAL_UART_Receive_IT+0x12>
 8014292:	2369      	movs	r3, #105	; 0x69
 8014294:	5cc3      	ldrb	r3, [r0, r3]
 8014296:	2b12      	cmp	r3, #18
 8014298:	d15d      	bne.n	8014356 <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 801429a:	2900      	cmp	r1, #0
 801429c:	d05d      	beq.n	801435a <HAL_UART_Receive_IT+0xd2>
 801429e:	2a00      	cmp	r2, #0
 80142a0:	d05d      	beq.n	801435e <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80142a2:	2368      	movs	r3, #104	; 0x68
 80142a4:	5cc3      	ldrb	r3, [r0, r3]
 80142a6:	2b01      	cmp	r3, #1
 80142a8:	d05b      	beq.n	8014362 <HAL_UART_Receive_IT+0xda>
 80142aa:	2368      	movs	r3, #104	; 0x68
 80142ac:	2401      	movs	r4, #1
 80142ae:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 80142b0:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80142b2:	3b10      	subs	r3, #16
 80142b4:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80142b6:	3302      	adds	r3, #2
 80142b8:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80142ba:	6883      	ldr	r3, [r0, #8]
 80142bc:	2280      	movs	r2, #128	; 0x80
 80142be:	0152      	lsls	r2, r2, #5
 80142c0:	4293      	cmp	r3, r2
 80142c2:	d008      	beq.n	80142d6 <HAL_UART_Receive_IT+0x4e>
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d115      	bne.n	80142f4 <HAL_UART_Receive_IT+0x6c>
 80142c8:	6903      	ldr	r3, [r0, #16]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d10e      	bne.n	80142ec <HAL_UART_Receive_IT+0x64>
 80142ce:	335c      	adds	r3, #92	; 0x5c
 80142d0:	22ff      	movs	r2, #255	; 0xff
 80142d2:	52c2      	strh	r2, [r0, r3]
 80142d4:	e012      	b.n	80142fc <HAL_UART_Receive_IT+0x74>
 80142d6:	6903      	ldr	r3, [r0, #16]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d103      	bne.n	80142e4 <HAL_UART_Receive_IT+0x5c>
 80142dc:	335c      	adds	r3, #92	; 0x5c
 80142de:	4a22      	ldr	r2, [pc, #136]	; (8014368 <HAL_UART_Receive_IT+0xe0>)
 80142e0:	52c2      	strh	r2, [r0, r3]
 80142e2:	e00b      	b.n	80142fc <HAL_UART_Receive_IT+0x74>
 80142e4:	235c      	movs	r3, #92	; 0x5c
 80142e6:	22ff      	movs	r2, #255	; 0xff
 80142e8:	52c2      	strh	r2, [r0, r3]
 80142ea:	e007      	b.n	80142fc <HAL_UART_Receive_IT+0x74>
 80142ec:	235c      	movs	r3, #92	; 0x5c
 80142ee:	227f      	movs	r2, #127	; 0x7f
 80142f0:	52c2      	strh	r2, [r0, r3]
 80142f2:	e003      	b.n	80142fc <HAL_UART_Receive_IT+0x74>
 80142f4:	2280      	movs	r2, #128	; 0x80
 80142f6:	0552      	lsls	r2, r2, #21
 80142f8:	4293      	cmp	r3, r2
 80142fa:	d01d      	beq.n	8014338 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80142fc:	2300      	movs	r3, #0
 80142fe:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8014300:	3369      	adds	r3, #105	; 0x69
 8014302:	5cc3      	ldrb	r3, [r0, r3]
 8014304:	2b12      	cmp	r3, #18
 8014306:	d022      	beq.n	801434e <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8014308:	2369      	movs	r3, #105	; 0x69
 801430a:	2222      	movs	r2, #34	; 0x22
 801430c:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801430e:	6802      	ldr	r2, [r0, #0]
 8014310:	6811      	ldr	r1, [r2, #0]
 8014312:	2380      	movs	r3, #128	; 0x80
 8014314:	005b      	lsls	r3, r3, #1
 8014316:	430b      	orrs	r3, r1
 8014318:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801431a:	6802      	ldr	r2, [r0, #0]
 801431c:	6893      	ldr	r3, [r2, #8]
 801431e:	2101      	movs	r1, #1
 8014320:	430b      	orrs	r3, r1
 8014322:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014324:	2368      	movs	r3, #104	; 0x68
 8014326:	2200      	movs	r2, #0
 8014328:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801432a:	6802      	ldr	r2, [r0, #0]
 801432c:	6813      	ldr	r3, [r2, #0]
 801432e:	311f      	adds	r1, #31
 8014330:	430b      	orrs	r3, r1
 8014332:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8014334:	2000      	movs	r0, #0
 8014336:	e00f      	b.n	8014358 <HAL_UART_Receive_IT+0xd0>
    UART_MASK_COMPUTATION(huart);
 8014338:	6903      	ldr	r3, [r0, #16]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d103      	bne.n	8014346 <HAL_UART_Receive_IT+0xbe>
 801433e:	335c      	adds	r3, #92	; 0x5c
 8014340:	227f      	movs	r2, #127	; 0x7f
 8014342:	52c2      	strh	r2, [r0, r3]
 8014344:	e7da      	b.n	80142fc <HAL_UART_Receive_IT+0x74>
 8014346:	235c      	movs	r3, #92	; 0x5c
 8014348:	223f      	movs	r2, #63	; 0x3f
 801434a:	52c2      	strh	r2, [r0, r3]
 801434c:	e7d6      	b.n	80142fc <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801434e:	3357      	adds	r3, #87	; 0x57
 8014350:	2232      	movs	r2, #50	; 0x32
 8014352:	54c2      	strb	r2, [r0, r3]
 8014354:	e7db      	b.n	801430e <HAL_UART_Receive_IT+0x86>
  }
  else
  {
    return HAL_BUSY;
 8014356:	2002      	movs	r0, #2
  }
}
 8014358:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 801435a:	2001      	movs	r0, #1
 801435c:	e7fc      	b.n	8014358 <HAL_UART_Receive_IT+0xd0>
 801435e:	2001      	movs	r0, #1
 8014360:	e7fa      	b.n	8014358 <HAL_UART_Receive_IT+0xd0>
    __HAL_LOCK(huart);
 8014362:	2002      	movs	r0, #2
 8014364:	e7f8      	b.n	8014358 <HAL_UART_Receive_IT+0xd0>
 8014366:	46c0      	nop			; (mov r8, r8)
 8014368:	000001ff 	.word	0x000001ff

0801436c <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801436c:	b510      	push	{r4, lr}
 801436e:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014370:	2369      	movs	r3, #105	; 0x69
 8014372:	5cc3      	ldrb	r3, [r0, r3]
 8014374:	2b01      	cmp	r3, #1
 8014376:	d003      	beq.n	8014380 <HAL_UART_Transmit_DMA+0x14>
 8014378:	2369      	movs	r3, #105	; 0x69
 801437a:	5cc3      	ldrb	r3, [r0, r3]
 801437c:	2b22      	cmp	r3, #34	; 0x22
 801437e:	d139      	bne.n	80143f4 <HAL_UART_Transmit_DMA+0x88>
  {
    if((pData == NULL ) || (Size == 0))
 8014380:	2900      	cmp	r1, #0
 8014382:	d039      	beq.n	80143f8 <HAL_UART_Transmit_DMA+0x8c>
 8014384:	2a00      	cmp	r2, #0
 8014386:	d039      	beq.n	80143fc <HAL_UART_Transmit_DMA+0x90>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014388:	2368      	movs	r3, #104	; 0x68
 801438a:	5ce3      	ldrb	r3, [r4, r3]
 801438c:	2b01      	cmp	r3, #1
 801438e:	d037      	beq.n	8014400 <HAL_UART_Transmit_DMA+0x94>
 8014390:	2368      	movs	r3, #104	; 0x68
 8014392:	2001      	movs	r0, #1
 8014394:	54e0      	strb	r0, [r4, r3]

    huart->pTxBuffPtr = pData;
 8014396:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8014398:	3b18      	subs	r3, #24
 801439a:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 801439c:	3302      	adds	r3, #2
 801439e:	52e2      	strh	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143a0:	2300      	movs	r3, #0
 80143a2:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80143a4:	3369      	adds	r3, #105	; 0x69
 80143a6:	5ce3      	ldrb	r3, [r4, r3]
 80143a8:	2b22      	cmp	r3, #34	; 0x22
 80143aa:	d01f      	beq.n	80143ec <HAL_UART_Transmit_DMA+0x80>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80143ac:	2369      	movs	r3, #105	; 0x69
 80143ae:	2012      	movs	r0, #18
 80143b0:	54e0      	strb	r0, [r4, r3]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80143b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80143b4:	4813      	ldr	r0, [pc, #76]	; (8014404 <HAL_UART_Transmit_DMA+0x98>)
 80143b6:	6298      	str	r0, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80143b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80143ba:	4813      	ldr	r0, [pc, #76]	; (8014408 <HAL_UART_Transmit_DMA+0x9c>)
 80143bc:	62d8      	str	r0, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80143be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80143c0:	4812      	ldr	r0, [pc, #72]	; (801440c <HAL_UART_Transmit_DMA+0xa0>)
 80143c2:	6318      	str	r0, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80143c4:	6820      	ldr	r0, [r4, #0]
 80143c6:	3028      	adds	r0, #40	; 0x28
 80143c8:	0013      	movs	r3, r2
 80143ca:	0002      	movs	r2, r0
 80143cc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80143ce:	f7fe f89f 	bl	8012510 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80143d2:	6823      	ldr	r3, [r4, #0]
 80143d4:	2240      	movs	r2, #64	; 0x40
 80143d6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 80143d8:	6822      	ldr	r2, [r4, #0]
 80143da:	6893      	ldr	r3, [r2, #8]
 80143dc:	2180      	movs	r1, #128	; 0x80
 80143de:	430b      	orrs	r3, r1
 80143e0:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80143e2:	2368      	movs	r3, #104	; 0x68
 80143e4:	2200      	movs	r2, #0
 80143e6:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 80143e8:	2000      	movs	r0, #0
 80143ea:	e004      	b.n	80143f6 <HAL_UART_Transmit_DMA+0x8a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80143ec:	3347      	adds	r3, #71	; 0x47
 80143ee:	3031      	adds	r0, #49	; 0x31
 80143f0:	54e0      	strb	r0, [r4, r3]
 80143f2:	e7de      	b.n	80143b2 <HAL_UART_Transmit_DMA+0x46>
  }
  else
  {
    return HAL_BUSY;
 80143f4:	2002      	movs	r0, #2
  }
}
 80143f6:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80143f8:	2001      	movs	r0, #1
 80143fa:	e7fc      	b.n	80143f6 <HAL_UART_Transmit_DMA+0x8a>
 80143fc:	2001      	movs	r0, #1
 80143fe:	e7fa      	b.n	80143f6 <HAL_UART_Transmit_DMA+0x8a>
    __HAL_LOCK(huart);
 8014400:	2002      	movs	r0, #2
 8014402:	e7f8      	b.n	80143f6 <HAL_UART_Transmit_DMA+0x8a>
 8014404:	080144ad 	.word	0x080144ad
 8014408:	080144df 	.word	0x080144df
 801440c:	0801452f 	.word	0x0801452f

08014410 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014410:	b510      	push	{r4, lr}
 8014412:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8014414:	2069      	movs	r0, #105	; 0x69
 8014416:	5c20      	ldrb	r0, [r4, r0]
 8014418:	2801      	cmp	r0, #1
 801441a:	d003      	beq.n	8014424 <HAL_UART_Receive_DMA+0x14>
 801441c:	2369      	movs	r3, #105	; 0x69
 801441e:	5ce3      	ldrb	r3, [r4, r3]
 8014420:	2b12      	cmp	r3, #18
 8014422:	d135      	bne.n	8014490 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8014424:	2900      	cmp	r1, #0
 8014426:	d035      	beq.n	8014494 <HAL_UART_Receive_DMA+0x84>
 8014428:	2a00      	cmp	r2, #0
 801442a:	d035      	beq.n	8014498 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801442c:	2368      	movs	r3, #104	; 0x68
 801442e:	5ce3      	ldrb	r3, [r4, r3]
 8014430:	2b01      	cmp	r3, #1
 8014432:	d033      	beq.n	801449c <HAL_UART_Receive_DMA+0x8c>
 8014434:	2368      	movs	r3, #104	; 0x68
 8014436:	2001      	movs	r0, #1
 8014438:	54e0      	strb	r0, [r4, r3]

    huart->pRxBuffPtr = pData;
 801443a:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 801443c:	3b10      	subs	r3, #16
 801443e:	52e2      	strh	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014440:	2300      	movs	r3, #0
 8014442:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8014444:	3369      	adds	r3, #105	; 0x69
 8014446:	5ce3      	ldrb	r3, [r4, r3]
 8014448:	2b12      	cmp	r3, #18
 801444a:	d01d      	beq.n	8014488 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 801444c:	2369      	movs	r3, #105	; 0x69
 801444e:	2022      	movs	r0, #34	; 0x22
 8014450:	54e0      	strb	r0, [r4, r3]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014454:	4812      	ldr	r0, [pc, #72]	; (80144a0 <HAL_UART_Receive_DMA+0x90>)
 8014456:	6298      	str	r0, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801445a:	4812      	ldr	r0, [pc, #72]	; (80144a4 <HAL_UART_Receive_DMA+0x94>)
 801445c:	62d8      	str	r0, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801445e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014460:	4811      	ldr	r0, [pc, #68]	; (80144a8 <HAL_UART_Receive_DMA+0x98>)
 8014462:	6318      	str	r0, [r3, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8014464:	6820      	ldr	r0, [r4, #0]
 8014466:	3024      	adds	r0, #36	; 0x24
 8014468:	0013      	movs	r3, r2
 801446a:	000a      	movs	r2, r1
 801446c:	0001      	movs	r1, r0
 801446e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8014470:	f7fe f84e 	bl	8012510 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8014474:	6822      	ldr	r2, [r4, #0]
 8014476:	6893      	ldr	r3, [r2, #8]
 8014478:	2140      	movs	r1, #64	; 0x40
 801447a:	430b      	orrs	r3, r1
 801447c:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 801447e:	2368      	movs	r3, #104	; 0x68
 8014480:	2200      	movs	r2, #0
 8014482:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8014484:	2000      	movs	r0, #0
 8014486:	e004      	b.n	8014492 <HAL_UART_Receive_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8014488:	3357      	adds	r3, #87	; 0x57
 801448a:	3031      	adds	r0, #49	; 0x31
 801448c:	54e0      	strb	r0, [r4, r3]
 801448e:	e7e0      	b.n	8014452 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8014490:	2002      	movs	r0, #2
  }
}
 8014492:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8014494:	2001      	movs	r0, #1
 8014496:	e7fc      	b.n	8014492 <HAL_UART_Receive_DMA+0x82>
 8014498:	2001      	movs	r0, #1
 801449a:	e7fa      	b.n	8014492 <HAL_UART_Receive_DMA+0x82>
    __HAL_LOCK(huart);
 801449c:	2002      	movs	r0, #2
 801449e:	e7f8      	b.n	8014492 <HAL_UART_Receive_DMA+0x82>
 80144a0:	080144e9 	.word	0x080144e9
 80144a4:	08014525 	.word	0x08014525
 80144a8:	0801452f 	.word	0x0801452f

080144ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80144ac:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80144ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80144b0:	6802      	ldr	r2, [r0, #0]
 80144b2:	6812      	ldr	r2, [r2, #0]
 80144b4:	0692      	lsls	r2, r2, #26
 80144b6:	d40d      	bmi.n	80144d4 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 80144b8:	2252      	movs	r2, #82	; 0x52
 80144ba:	2100      	movs	r1, #0
 80144bc:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80144be:	6819      	ldr	r1, [r3, #0]
 80144c0:	688a      	ldr	r2, [r1, #8]
 80144c2:	2080      	movs	r0, #128	; 0x80
 80144c4:	4382      	bics	r2, r0
 80144c6:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80144c8:	681a      	ldr	r2, [r3, #0]
 80144ca:	6813      	ldr	r3, [r2, #0]
 80144cc:	2140      	movs	r1, #64	; 0x40
 80144ce:	430b      	orrs	r3, r1
 80144d0:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80144d2:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80144d4:	0018      	movs	r0, r3
 80144d6:	f7fa fd75 	bl	800efc4 <HAL_UART_TxCpltCallback>
}
 80144da:	e7fa      	b.n	80144d2 <UART_DMATransmitCplt+0x26>

080144dc <HAL_UART_TxHalfCpltCallback>:
}
 80144dc:	4770      	bx	lr

080144de <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80144de:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80144e0:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_TxHalfCpltCallback(huart);
 80144e2:	f7ff fffb 	bl	80144dc <HAL_UART_TxHalfCpltCallback>
}
 80144e6:	bd10      	pop	{r4, pc}

080144e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80144e8:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80144ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80144ec:	6802      	ldr	r2, [r0, #0]
 80144ee:	6812      	ldr	r2, [r2, #0]
 80144f0:	0692      	lsls	r2, r2, #26
 80144f2:	d40e      	bmi.n	8014512 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 80144f4:	225a      	movs	r2, #90	; 0x5a
 80144f6:	2100      	movs	r1, #0
 80144f8:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80144fa:	6819      	ldr	r1, [r3, #0]
 80144fc:	688a      	ldr	r2, [r1, #8]
 80144fe:	2040      	movs	r0, #64	; 0x40
 8014500:	4382      	bics	r2, r0
 8014502:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014504:	2269      	movs	r2, #105	; 0x69
 8014506:	5c9a      	ldrb	r2, [r3, r2]
 8014508:	2a32      	cmp	r2, #50	; 0x32
 801450a:	d006      	beq.n	801451a <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 801450c:	2269      	movs	r2, #105	; 0x69
 801450e:	2101      	movs	r1, #1
 8014510:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8014512:	0018      	movs	r0, r3
 8014514:	f7fa fd92 	bl	800f03c <HAL_UART_RxCpltCallback>
}
 8014518:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801451a:	3237      	adds	r2, #55	; 0x37
 801451c:	2112      	movs	r1, #18
 801451e:	5499      	strb	r1, [r3, r2]
 8014520:	e7f7      	b.n	8014512 <UART_DMAReceiveCplt+0x2a>

08014522 <HAL_UART_RxHalfCpltCallback>:
}
 8014522:	4770      	bx	lr

08014524 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014524:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8014526:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_RxHalfCpltCallback(huart);
 8014528:	f7ff fffb 	bl	8014522 <HAL_UART_RxHalfCpltCallback>
}
 801452c:	bd10      	pop	{r4, pc}

0801452e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801452e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8014530:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8014532:	2300      	movs	r3, #0
 8014534:	225a      	movs	r2, #90	; 0x5a
 8014536:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8014538:	3a08      	subs	r2, #8
 801453a:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 801453c:	3369      	adds	r3, #105	; 0x69
 801453e:	3a51      	subs	r2, #81	; 0x51
 8014540:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014542:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8014544:	320f      	adds	r2, #15
 8014546:	4313      	orrs	r3, r2
 8014548:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801454a:	f7fa fd53 	bl	800eff4 <HAL_UART_ErrorCallback>
}
 801454e:	bd10      	pop	{r4, pc}

08014550 <UART_SetConfig>:
{
 8014550:	b570      	push	{r4, r5, r6, lr}
 8014552:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014554:	6883      	ldr	r3, [r0, #8]
 8014556:	6902      	ldr	r2, [r0, #16]
 8014558:	4313      	orrs	r3, r2
 801455a:	6942      	ldr	r2, [r0, #20]
 801455c:	4313      	orrs	r3, r2
 801455e:	69c2      	ldr	r2, [r0, #28]
 8014560:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8014562:	6801      	ldr	r1, [r0, #0]
 8014564:	680a      	ldr	r2, [r1, #0]
 8014566:	487c      	ldr	r0, [pc, #496]	; (8014758 <UART_SetConfig+0x208>)
 8014568:	4002      	ands	r2, r0
 801456a:	4313      	orrs	r3, r2
 801456c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801456e:	6822      	ldr	r2, [r4, #0]
 8014570:	6853      	ldr	r3, [r2, #4]
 8014572:	497a      	ldr	r1, [pc, #488]	; (801475c <UART_SetConfig+0x20c>)
 8014574:	400b      	ands	r3, r1
 8014576:	68e1      	ldr	r1, [r4, #12]
 8014578:	430b      	orrs	r3, r1
 801457a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801457c:	69a2      	ldr	r2, [r4, #24]
 801457e:	6a23      	ldr	r3, [r4, #32]
 8014580:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8014582:	6821      	ldr	r1, [r4, #0]
 8014584:	688b      	ldr	r3, [r1, #8]
 8014586:	4876      	ldr	r0, [pc, #472]	; (8014760 <UART_SetConfig+0x210>)
 8014588:	4003      	ands	r3, r0
 801458a:	4313      	orrs	r3, r2
 801458c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801458e:	6825      	ldr	r5, [r4, #0]
 8014590:	4b74      	ldr	r3, [pc, #464]	; (8014764 <UART_SetConfig+0x214>)
 8014592:	429d      	cmp	r5, r3
 8014594:	d016      	beq.n	80145c4 <UART_SetConfig+0x74>
 8014596:	4b74      	ldr	r3, [pc, #464]	; (8014768 <UART_SetConfig+0x218>)
 8014598:	429d      	cmp	r5, r3
 801459a:	d027      	beq.n	80145ec <UART_SetConfig+0x9c>
 801459c:	4b73      	ldr	r3, [pc, #460]	; (801476c <UART_SetConfig+0x21c>)
 801459e:	429d      	cmp	r5, r3
 80145a0:	d042      	beq.n	8014628 <UART_SetConfig+0xd8>
 80145a2:	4b73      	ldr	r3, [pc, #460]	; (8014770 <UART_SetConfig+0x220>)
 80145a4:	429d      	cmp	r5, r3
 80145a6:	d061      	beq.n	801466c <UART_SetConfig+0x11c>
 80145a8:	4b72      	ldr	r3, [pc, #456]	; (8014774 <UART_SetConfig+0x224>)
 80145aa:	429d      	cmp	r5, r3
 80145ac:	d075      	beq.n	801469a <UART_SetConfig+0x14a>
 80145ae:	4b72      	ldr	r3, [pc, #456]	; (8014778 <UART_SetConfig+0x228>)
 80145b0:	429d      	cmp	r5, r3
 80145b2:	d074      	beq.n	801469e <UART_SetConfig+0x14e>
 80145b4:	4b71      	ldr	r3, [pc, #452]	; (801477c <UART_SetConfig+0x22c>)
 80145b6:	429d      	cmp	r5, r3
 80145b8:	d073      	beq.n	80146a2 <UART_SetConfig+0x152>
 80145ba:	4b71      	ldr	r3, [pc, #452]	; (8014780 <UART_SetConfig+0x230>)
 80145bc:	429d      	cmp	r5, r3
 80145be:	d051      	beq.n	8014664 <UART_SetConfig+0x114>
 80145c0:	2310      	movs	r3, #16
 80145c2:	e054      	b.n	801466e <UART_SetConfig+0x11e>
 80145c4:	4b6f      	ldr	r3, [pc, #444]	; (8014784 <UART_SetConfig+0x234>)
 80145c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80145c8:	2303      	movs	r3, #3
 80145ca:	4013      	ands	r3, r2
 80145cc:	2b01      	cmp	r3, #1
 80145ce:	d009      	beq.n	80145e4 <UART_SetConfig+0x94>
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d005      	beq.n	80145e0 <UART_SetConfig+0x90>
 80145d4:	2b02      	cmp	r3, #2
 80145d6:	d007      	beq.n	80145e8 <UART_SetConfig+0x98>
 80145d8:	2b03      	cmp	r3, #3
 80145da:	d045      	beq.n	8014668 <UART_SetConfig+0x118>
 80145dc:	2310      	movs	r3, #16
 80145de:	e046      	b.n	801466e <UART_SetConfig+0x11e>
 80145e0:	2300      	movs	r3, #0
 80145e2:	e044      	b.n	801466e <UART_SetConfig+0x11e>
 80145e4:	2304      	movs	r3, #4
 80145e6:	e042      	b.n	801466e <UART_SetConfig+0x11e>
 80145e8:	2308      	movs	r3, #8
 80145ea:	e040      	b.n	801466e <UART_SetConfig+0x11e>
 80145ec:	4b65      	ldr	r3, [pc, #404]	; (8014784 <UART_SetConfig+0x234>)
 80145ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145f0:	22c0      	movs	r2, #192	; 0xc0
 80145f2:	0292      	lsls	r2, r2, #10
 80145f4:	4013      	ands	r3, r2
 80145f6:	2280      	movs	r2, #128	; 0x80
 80145f8:	0252      	lsls	r2, r2, #9
 80145fa:	4293      	cmp	r3, r2
 80145fc:	d00e      	beq.n	801461c <UART_SetConfig+0xcc>
 80145fe:	d909      	bls.n	8014614 <UART_SetConfig+0xc4>
 8014600:	2280      	movs	r2, #128	; 0x80
 8014602:	0292      	lsls	r2, r2, #10
 8014604:	4293      	cmp	r3, r2
 8014606:	d00b      	beq.n	8014620 <UART_SetConfig+0xd0>
 8014608:	22c0      	movs	r2, #192	; 0xc0
 801460a:	0292      	lsls	r2, r2, #10
 801460c:	4293      	cmp	r3, r2
 801460e:	d109      	bne.n	8014624 <UART_SetConfig+0xd4>
 8014610:	2302      	movs	r3, #2
 8014612:	e02c      	b.n	801466e <UART_SetConfig+0x11e>
 8014614:	2b00      	cmp	r3, #0
 8014616:	d105      	bne.n	8014624 <UART_SetConfig+0xd4>
 8014618:	2300      	movs	r3, #0
 801461a:	e028      	b.n	801466e <UART_SetConfig+0x11e>
 801461c:	2304      	movs	r3, #4
 801461e:	e026      	b.n	801466e <UART_SetConfig+0x11e>
 8014620:	2308      	movs	r3, #8
 8014622:	e024      	b.n	801466e <UART_SetConfig+0x11e>
 8014624:	2310      	movs	r3, #16
 8014626:	e022      	b.n	801466e <UART_SetConfig+0x11e>
 8014628:	4b56      	ldr	r3, [pc, #344]	; (8014784 <UART_SetConfig+0x234>)
 801462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801462c:	22c0      	movs	r2, #192	; 0xc0
 801462e:	0312      	lsls	r2, r2, #12
 8014630:	4013      	ands	r3, r2
 8014632:	2280      	movs	r2, #128	; 0x80
 8014634:	02d2      	lsls	r2, r2, #11
 8014636:	4293      	cmp	r3, r2
 8014638:	d00e      	beq.n	8014658 <UART_SetConfig+0x108>
 801463a:	d909      	bls.n	8014650 <UART_SetConfig+0x100>
 801463c:	2280      	movs	r2, #128	; 0x80
 801463e:	0312      	lsls	r2, r2, #12
 8014640:	4293      	cmp	r3, r2
 8014642:	d00b      	beq.n	801465c <UART_SetConfig+0x10c>
 8014644:	22c0      	movs	r2, #192	; 0xc0
 8014646:	0312      	lsls	r2, r2, #12
 8014648:	4293      	cmp	r3, r2
 801464a:	d109      	bne.n	8014660 <UART_SetConfig+0x110>
 801464c:	2302      	movs	r3, #2
 801464e:	e00e      	b.n	801466e <UART_SetConfig+0x11e>
 8014650:	2b00      	cmp	r3, #0
 8014652:	d105      	bne.n	8014660 <UART_SetConfig+0x110>
 8014654:	2300      	movs	r3, #0
 8014656:	e00a      	b.n	801466e <UART_SetConfig+0x11e>
 8014658:	2304      	movs	r3, #4
 801465a:	e008      	b.n	801466e <UART_SetConfig+0x11e>
 801465c:	2308      	movs	r3, #8
 801465e:	e006      	b.n	801466e <UART_SetConfig+0x11e>
 8014660:	2310      	movs	r3, #16
 8014662:	e004      	b.n	801466e <UART_SetConfig+0x11e>
 8014664:	2300      	movs	r3, #0
 8014666:	e002      	b.n	801466e <UART_SetConfig+0x11e>
 8014668:	2302      	movs	r3, #2
 801466a:	e000      	b.n	801466e <UART_SetConfig+0x11e>
 801466c:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801466e:	2280      	movs	r2, #128	; 0x80
 8014670:	0212      	lsls	r2, r2, #8
 8014672:	69e1      	ldr	r1, [r4, #28]
 8014674:	4291      	cmp	r1, r2
 8014676:	d016      	beq.n	80146a6 <UART_SetConfig+0x156>
    switch (clocksource)
 8014678:	2b02      	cmp	r3, #2
 801467a:	d057      	beq.n	801472c <UART_SetConfig+0x1dc>
 801467c:	d949      	bls.n	8014712 <UART_SetConfig+0x1c2>
 801467e:	2b04      	cmp	r3, #4
 8014680:	d05d      	beq.n	801473e <UART_SetConfig+0x1ee>
 8014682:	2b08      	cmp	r3, #8
 8014684:	d166      	bne.n	8014754 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8014686:	6861      	ldr	r1, [r4, #4]
 8014688:	2080      	movs	r0, #128	; 0x80
 801468a:	0200      	lsls	r0, r0, #8
 801468c:	f7eb fd60 	bl	8000150 <__udivsi3>
 8014690:	0400      	lsls	r0, r0, #16
 8014692:	0c00      	lsrs	r0, r0, #16
 8014694:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8014696:	2000      	movs	r0, #0
        break;
 8014698:	e027      	b.n	80146ea <UART_SetConfig+0x19a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801469a:	2300      	movs	r3, #0
 801469c:	e7e7      	b.n	801466e <UART_SetConfig+0x11e>
 801469e:	2300      	movs	r3, #0
 80146a0:	e7e5      	b.n	801466e <UART_SetConfig+0x11e>
 80146a2:	2300      	movs	r3, #0
 80146a4:	e7e3      	b.n	801466e <UART_SetConfig+0x11e>
    switch (clocksource)
 80146a6:	2b02      	cmp	r3, #2
 80146a8:	d020      	beq.n	80146ec <UART_SetConfig+0x19c>
 80146aa:	d90b      	bls.n	80146c4 <UART_SetConfig+0x174>
 80146ac:	2b04      	cmp	r3, #4
 80146ae:	d024      	beq.n	80146fa <UART_SetConfig+0x1aa>
 80146b0:	2b08      	cmp	r3, #8
 80146b2:	d12b      	bne.n	801470c <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80146b4:	6861      	ldr	r1, [r4, #4]
 80146b6:	2080      	movs	r0, #128	; 0x80
 80146b8:	0240      	lsls	r0, r0, #9
 80146ba:	f7eb fd49 	bl	8000150 <__udivsi3>
 80146be:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80146c0:	2000      	movs	r0, #0
        break;
 80146c2:	e009      	b.n	80146d8 <UART_SetConfig+0x188>
    switch (clocksource)
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d121      	bne.n	801470c <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80146c8:	f7ff fa60 	bl	8013b8c <HAL_RCC_GetPCLK1Freq>
 80146cc:	0040      	lsls	r0, r0, #1
 80146ce:	6861      	ldr	r1, [r4, #4]
 80146d0:	f7eb fd3e 	bl	8000150 <__udivsi3>
 80146d4:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80146d6:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80146d8:	220f      	movs	r2, #15
 80146da:	0019      	movs	r1, r3
 80146dc:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80146de:	105b      	asrs	r3, r3, #1
 80146e0:	3a08      	subs	r2, #8
 80146e2:	4013      	ands	r3, r2
 80146e4:	430b      	orrs	r3, r1
    huart->Instance->BRR = brrtemp;
 80146e6:	6822      	ldr	r2, [r4, #0]
 80146e8:	60d3      	str	r3, [r2, #12]
}
 80146ea:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80146ec:	6861      	ldr	r1, [r4, #4]
 80146ee:	4826      	ldr	r0, [pc, #152]	; (8014788 <UART_SetConfig+0x238>)
 80146f0:	f7eb fd2e 	bl	8000150 <__udivsi3>
 80146f4:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80146f6:	2000      	movs	r0, #0
        break;
 80146f8:	e7ee      	b.n	80146d8 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80146fa:	f7ff f9e9 	bl	8013ad0 <HAL_RCC_GetSysClockFreq>
 80146fe:	0040      	lsls	r0, r0, #1
 8014700:	6861      	ldr	r1, [r4, #4]
 8014702:	f7eb fd25 	bl	8000150 <__udivsi3>
 8014706:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8014708:	2000      	movs	r0, #0
        break;
 801470a:	e7e5      	b.n	80146d8 <UART_SetConfig+0x188>
        ret = HAL_ERROR;
 801470c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 801470e:	2300      	movs	r3, #0
 8014710:	e7e2      	b.n	80146d8 <UART_SetConfig+0x188>
    switch (clocksource)
 8014712:	2b00      	cmp	r3, #0
 8014714:	d11e      	bne.n	8014754 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8014716:	f7ff fa39 	bl	8013b8c <HAL_RCC_GetPCLK1Freq>
 801471a:	6861      	ldr	r1, [r4, #4]
 801471c:	f7eb fd18 	bl	8000150 <__udivsi3>
 8014720:	6823      	ldr	r3, [r4, #0]
 8014722:	0400      	lsls	r0, r0, #16
 8014724:	0c00      	lsrs	r0, r0, #16
 8014726:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8014728:	2000      	movs	r0, #0
        break;
 801472a:	e7de      	b.n	80146ea <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 801472c:	6861      	ldr	r1, [r4, #4]
 801472e:	4817      	ldr	r0, [pc, #92]	; (801478c <UART_SetConfig+0x23c>)
 8014730:	f7eb fd0e 	bl	8000150 <__udivsi3>
 8014734:	0400      	lsls	r0, r0, #16
 8014736:	0c00      	lsrs	r0, r0, #16
 8014738:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801473a:	2000      	movs	r0, #0
        break;
 801473c:	e7d5      	b.n	80146ea <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801473e:	f7ff f9c7 	bl	8013ad0 <HAL_RCC_GetSysClockFreq>
 8014742:	6861      	ldr	r1, [r4, #4]
 8014744:	f7eb fd04 	bl	8000150 <__udivsi3>
 8014748:	6823      	ldr	r3, [r4, #0]
 801474a:	0400      	lsls	r0, r0, #16
 801474c:	0c00      	lsrs	r0, r0, #16
 801474e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8014750:	2000      	movs	r0, #0
        break;
 8014752:	e7ca      	b.n	80146ea <UART_SetConfig+0x19a>
        ret = HAL_ERROR;
 8014754:	2001      	movs	r0, #1
 8014756:	e7c8      	b.n	80146ea <UART_SetConfig+0x19a>
 8014758:	efff69f3 	.word	0xefff69f3
 801475c:	ffffcfff 	.word	0xffffcfff
 8014760:	fffff4ff 	.word	0xfffff4ff
 8014764:	40013800 	.word	0x40013800
 8014768:	40004400 	.word	0x40004400
 801476c:	40004800 	.word	0x40004800
 8014770:	40004c00 	.word	0x40004c00
 8014774:	40005000 	.word	0x40005000
 8014778:	40011400 	.word	0x40011400
 801477c:	40011800 	.word	0x40011800
 8014780:	40011c00 	.word	0x40011c00
 8014784:	40021000 	.word	0x40021000
 8014788:	00f42400 	.word	0x00f42400
 801478c:	007a1200 	.word	0x007a1200

08014790 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014790:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014792:	07db      	lsls	r3, r3, #31
 8014794:	d506      	bpl.n	80147a4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014796:	6802      	ldr	r2, [r0, #0]
 8014798:	6853      	ldr	r3, [r2, #4]
 801479a:	492c      	ldr	r1, [pc, #176]	; (801484c <UART_AdvFeatureConfig+0xbc>)
 801479c:	400b      	ands	r3, r1
 801479e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80147a0:	430b      	orrs	r3, r1
 80147a2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80147a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80147a6:	079b      	lsls	r3, r3, #30
 80147a8:	d506      	bpl.n	80147b8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80147aa:	6802      	ldr	r2, [r0, #0]
 80147ac:	6853      	ldr	r3, [r2, #4]
 80147ae:	4928      	ldr	r1, [pc, #160]	; (8014850 <UART_AdvFeatureConfig+0xc0>)
 80147b0:	400b      	ands	r3, r1
 80147b2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80147b4:	430b      	orrs	r3, r1
 80147b6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80147b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80147ba:	075b      	lsls	r3, r3, #29
 80147bc:	d506      	bpl.n	80147cc <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80147be:	6802      	ldr	r2, [r0, #0]
 80147c0:	6853      	ldr	r3, [r2, #4]
 80147c2:	4924      	ldr	r1, [pc, #144]	; (8014854 <UART_AdvFeatureConfig+0xc4>)
 80147c4:	400b      	ands	r3, r1
 80147c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80147c8:	430b      	orrs	r3, r1
 80147ca:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80147cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80147ce:	071b      	lsls	r3, r3, #28
 80147d0:	d506      	bpl.n	80147e0 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80147d2:	6802      	ldr	r2, [r0, #0]
 80147d4:	6853      	ldr	r3, [r2, #4]
 80147d6:	4920      	ldr	r1, [pc, #128]	; (8014858 <UART_AdvFeatureConfig+0xc8>)
 80147d8:	400b      	ands	r3, r1
 80147da:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80147dc:	430b      	orrs	r3, r1
 80147de:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80147e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80147e2:	06db      	lsls	r3, r3, #27
 80147e4:	d506      	bpl.n	80147f4 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80147e6:	6802      	ldr	r2, [r0, #0]
 80147e8:	6893      	ldr	r3, [r2, #8]
 80147ea:	491c      	ldr	r1, [pc, #112]	; (801485c <UART_AdvFeatureConfig+0xcc>)
 80147ec:	400b      	ands	r3, r1
 80147ee:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80147f0:	430b      	orrs	r3, r1
 80147f2:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80147f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80147f6:	069b      	lsls	r3, r3, #26
 80147f8:	d506      	bpl.n	8014808 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80147fa:	6802      	ldr	r2, [r0, #0]
 80147fc:	6893      	ldr	r3, [r2, #8]
 80147fe:	4918      	ldr	r1, [pc, #96]	; (8014860 <UART_AdvFeatureConfig+0xd0>)
 8014800:	400b      	ands	r3, r1
 8014802:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8014804:	430b      	orrs	r3, r1
 8014806:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014808:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801480a:	065b      	lsls	r3, r3, #25
 801480c:	d50b      	bpl.n	8014826 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801480e:	6802      	ldr	r2, [r0, #0]
 8014810:	6853      	ldr	r3, [r2, #4]
 8014812:	4914      	ldr	r1, [pc, #80]	; (8014864 <UART_AdvFeatureConfig+0xd4>)
 8014814:	400b      	ands	r3, r1
 8014816:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014818:	430b      	orrs	r3, r1
 801481a:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801481c:	2380      	movs	r3, #128	; 0x80
 801481e:	035b      	lsls	r3, r3, #13
 8014820:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014822:	429a      	cmp	r2, r3
 8014824:	d00a      	beq.n	801483c <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014826:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014828:	061b      	lsls	r3, r3, #24
 801482a:	d506      	bpl.n	801483a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801482c:	6802      	ldr	r2, [r0, #0]
 801482e:	6853      	ldr	r3, [r2, #4]
 8014830:	490d      	ldr	r1, [pc, #52]	; (8014868 <UART_AdvFeatureConfig+0xd8>)
 8014832:	400b      	ands	r3, r1
 8014834:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8014836:	430b      	orrs	r3, r1
 8014838:	6053      	str	r3, [r2, #4]
}
 801483a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801483c:	6802      	ldr	r2, [r0, #0]
 801483e:	6853      	ldr	r3, [r2, #4]
 8014840:	490a      	ldr	r1, [pc, #40]	; (801486c <UART_AdvFeatureConfig+0xdc>)
 8014842:	400b      	ands	r3, r1
 8014844:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8014846:	430b      	orrs	r3, r1
 8014848:	6053      	str	r3, [r2, #4]
 801484a:	e7ec      	b.n	8014826 <UART_AdvFeatureConfig+0x96>
 801484c:	fffdffff 	.word	0xfffdffff
 8014850:	fffeffff 	.word	0xfffeffff
 8014854:	fffbffff 	.word	0xfffbffff
 8014858:	ffff7fff 	.word	0xffff7fff
 801485c:	ffffefff 	.word	0xffffefff
 8014860:	ffffdfff 	.word	0xffffdfff
 8014864:	ffefffff 	.word	0xffefffff
 8014868:	fff7ffff 	.word	0xfff7ffff
 801486c:	ff9fffff 	.word	0xff9fffff

08014870 <UART_WaitOnFlagUntilTimeout>:
{
 8014870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014872:	46c6      	mov	lr, r8
 8014874:	b500      	push	{lr}
 8014876:	0006      	movs	r6, r0
 8014878:	000c      	movs	r4, r1
 801487a:	0017      	movs	r7, r2
 801487c:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 801487e:	f7fd f93d 	bl	8011afc <HAL_GetTick>
 8014882:	4680      	mov	r8, r0
  if(Status == RESET)
 8014884:	2f00      	cmp	r7, #0
 8014886:	d029      	beq.n	80148dc <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8014888:	6833      	ldr	r3, [r6, #0]
 801488a:	69db      	ldr	r3, [r3, #28]
 801488c:	4023      	ands	r3, r4
 801488e:	42a3      	cmp	r3, r4
 8014890:	d152      	bne.n	8014938 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8014892:	1c6b      	adds	r3, r5, #1
 8014894:	d0f8      	beq.n	8014888 <UART_WaitOnFlagUntilTimeout+0x18>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8014896:	2d00      	cmp	r5, #0
 8014898:	d005      	beq.n	80148a6 <UART_WaitOnFlagUntilTimeout+0x36>
 801489a:	f7fd f92f 	bl	8011afc <HAL_GetTick>
 801489e:	4643      	mov	r3, r8
 80148a0:	1ac0      	subs	r0, r0, r3
 80148a2:	42a8      	cmp	r0, r5
 80148a4:	d9f0      	bls.n	8014888 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80148a6:	6832      	ldr	r2, [r6, #0]
 80148a8:	6813      	ldr	r3, [r2, #0]
 80148aa:	2180      	movs	r1, #128	; 0x80
 80148ac:	438b      	bics	r3, r1
 80148ae:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80148b0:	6832      	ldr	r2, [r6, #0]
 80148b2:	6813      	ldr	r3, [r2, #0]
 80148b4:	3960      	subs	r1, #96	; 0x60
 80148b6:	438b      	bics	r3, r1
 80148b8:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80148ba:	6832      	ldr	r2, [r6, #0]
 80148bc:	6813      	ldr	r3, [r2, #0]
 80148be:	491f      	ldr	r1, [pc, #124]	; (801493c <UART_WaitOnFlagUntilTimeout+0xcc>)
 80148c0:	400b      	ands	r3, r1
 80148c2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80148c4:	6831      	ldr	r1, [r6, #0]
 80148c6:	688b      	ldr	r3, [r1, #8]
 80148c8:	2201      	movs	r2, #1
 80148ca:	4393      	bics	r3, r2
 80148cc:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80148ce:	2369      	movs	r3, #105	; 0x69
 80148d0:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80148d2:	3b01      	subs	r3, #1
 80148d4:	2200      	movs	r2, #0
 80148d6:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80148d8:	2003      	movs	r0, #3
 80148da:	e02a      	b.n	8014932 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80148dc:	6833      	ldr	r3, [r6, #0]
 80148de:	69db      	ldr	r3, [r3, #28]
 80148e0:	4023      	ands	r3, r4
 80148e2:	42a3      	cmp	r3, r4
 80148e4:	d024      	beq.n	8014930 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 80148e6:	1c6b      	adds	r3, r5, #1
 80148e8:	d0f8      	beq.n	80148dc <UART_WaitOnFlagUntilTimeout+0x6c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80148ea:	2d00      	cmp	r5, #0
 80148ec:	d005      	beq.n	80148fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80148ee:	f7fd f905 	bl	8011afc <HAL_GetTick>
 80148f2:	4643      	mov	r3, r8
 80148f4:	1ac0      	subs	r0, r0, r3
 80148f6:	42a8      	cmp	r0, r5
 80148f8:	d9f0      	bls.n	80148dc <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80148fa:	6832      	ldr	r2, [r6, #0]
 80148fc:	6813      	ldr	r3, [r2, #0]
 80148fe:	2180      	movs	r1, #128	; 0x80
 8014900:	438b      	bics	r3, r1
 8014902:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014904:	6832      	ldr	r2, [r6, #0]
 8014906:	6813      	ldr	r3, [r2, #0]
 8014908:	3960      	subs	r1, #96	; 0x60
 801490a:	438b      	bics	r3, r1
 801490c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801490e:	6832      	ldr	r2, [r6, #0]
 8014910:	6813      	ldr	r3, [r2, #0]
 8014912:	490a      	ldr	r1, [pc, #40]	; (801493c <UART_WaitOnFlagUntilTimeout+0xcc>)
 8014914:	400b      	ands	r3, r1
 8014916:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014918:	6831      	ldr	r1, [r6, #0]
 801491a:	688b      	ldr	r3, [r1, #8]
 801491c:	2201      	movs	r2, #1
 801491e:	4393      	bics	r3, r2
 8014920:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8014922:	2369      	movs	r3, #105	; 0x69
 8014924:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8014926:	3b01      	subs	r3, #1
 8014928:	2200      	movs	r2, #0
 801492a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801492c:	2003      	movs	r0, #3
 801492e:	e000      	b.n	8014932 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8014930:	2000      	movs	r0, #0
}
 8014932:	bc04      	pop	{r2}
 8014934:	4690      	mov	r8, r2
 8014936:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8014938:	2000      	movs	r0, #0
 801493a:	e7fa      	b.n	8014932 <UART_WaitOnFlagUntilTimeout+0xc2>
 801493c:	fffffeff 	.word	0xfffffeff

08014940 <HAL_UART_Transmit>:
{
 8014940:	b570      	push	{r4, r5, r6, lr}
 8014942:	0004      	movs	r4, r0
 8014944:	000e      	movs	r6, r1
 8014946:	001d      	movs	r5, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014948:	2369      	movs	r3, #105	; 0x69
 801494a:	5cc3      	ldrb	r3, [r0, r3]
 801494c:	2b01      	cmp	r3, #1
 801494e:	d003      	beq.n	8014958 <HAL_UART_Transmit+0x18>
 8014950:	2369      	movs	r3, #105	; 0x69
 8014952:	5cc3      	ldrb	r3, [r0, r3]
 8014954:	2b22      	cmp	r3, #34	; 0x22
 8014956:	d155      	bne.n	8014a04 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8014958:	2e00      	cmp	r6, #0
 801495a:	d055      	beq.n	8014a08 <HAL_UART_Transmit+0xc8>
 801495c:	2a00      	cmp	r2, #0
 801495e:	d055      	beq.n	8014a0c <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8014960:	2368      	movs	r3, #104	; 0x68
 8014962:	5ce3      	ldrb	r3, [r4, r3]
 8014964:	2b01      	cmp	r3, #1
 8014966:	d053      	beq.n	8014a10 <HAL_UART_Transmit+0xd0>
 8014968:	2368      	movs	r3, #104	; 0x68
 801496a:	2101      	movs	r1, #1
 801496c:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801496e:	2300      	movs	r3, #0
 8014970:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8014972:	3369      	adds	r3, #105	; 0x69
 8014974:	5ce3      	ldrb	r3, [r4, r3]
 8014976:	2b22      	cmp	r3, #34	; 0x22
 8014978:	d007      	beq.n	801498a <HAL_UART_Transmit+0x4a>
      huart->State = HAL_UART_STATE_BUSY_TX;
 801497a:	2369      	movs	r3, #105	; 0x69
 801497c:	2112      	movs	r1, #18
 801497e:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8014980:	2350      	movs	r3, #80	; 0x50
 8014982:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8014984:	3302      	adds	r3, #2
 8014986:	52e2      	strh	r2, [r4, r3]
    while(huart->TxXferCount > 0)
 8014988:	e007      	b.n	801499a <HAL_UART_Transmit+0x5a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801498a:	3347      	adds	r3, #71	; 0x47
 801498c:	3131      	adds	r1, #49	; 0x31
 801498e:	54e1      	strb	r1, [r4, r3]
 8014990:	e7f6      	b.n	8014980 <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8014992:	7833      	ldrb	r3, [r6, #0]
 8014994:	6822      	ldr	r2, [r4, #0]
 8014996:	8513      	strh	r3, [r2, #40]	; 0x28
 8014998:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 801499a:	2352      	movs	r3, #82	; 0x52
 801499c:	5ae3      	ldrh	r3, [r4, r3]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d019      	beq.n	80149d6 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80149a2:	3b01      	subs	r3, #1
 80149a4:	2252      	movs	r2, #82	; 0x52
 80149a6:	52a3      	strh	r3, [r4, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80149a8:	002b      	movs	r3, r5
 80149aa:	2200      	movs	r2, #0
 80149ac:	2180      	movs	r1, #128	; 0x80
 80149ae:	0020      	movs	r0, r4
 80149b0:	f7ff ff5e 	bl	8014870 <UART_WaitOnFlagUntilTimeout>
 80149b4:	2800      	cmp	r0, #0
 80149b6:	d12d      	bne.n	8014a14 <HAL_UART_Transmit+0xd4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80149b8:	2380      	movs	r3, #128	; 0x80
 80149ba:	015b      	lsls	r3, r3, #5
 80149bc:	68a2      	ldr	r2, [r4, #8]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d1e7      	bne.n	8014992 <HAL_UART_Transmit+0x52>
 80149c2:	6923      	ldr	r3, [r4, #16]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d1e4      	bne.n	8014992 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80149c8:	8833      	ldrh	r3, [r6, #0]
 80149ca:	05db      	lsls	r3, r3, #23
 80149cc:	0ddb      	lsrs	r3, r3, #23
 80149ce:	6822      	ldr	r2, [r4, #0]
 80149d0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80149d2:	3602      	adds	r6, #2
 80149d4:	e7e1      	b.n	801499a <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80149d6:	002b      	movs	r3, r5
 80149d8:	2200      	movs	r2, #0
 80149da:	2140      	movs	r1, #64	; 0x40
 80149dc:	0020      	movs	r0, r4
 80149de:	f7ff ff47 	bl	8014870 <UART_WaitOnFlagUntilTimeout>
 80149e2:	2800      	cmp	r0, #0
 80149e4:	d118      	bne.n	8014a18 <HAL_UART_Transmit+0xd8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80149e6:	2369      	movs	r3, #105	; 0x69
 80149e8:	5ce3      	ldrb	r3, [r4, r3]
 80149ea:	2b32      	cmp	r3, #50	; 0x32
 80149ec:	d006      	beq.n	80149fc <HAL_UART_Transmit+0xbc>
      huart->State = HAL_UART_STATE_READY;
 80149ee:	2369      	movs	r3, #105	; 0x69
 80149f0:	2201      	movs	r2, #1
 80149f2:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80149f4:	2368      	movs	r3, #104	; 0x68
 80149f6:	2200      	movs	r2, #0
 80149f8:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80149fa:	e004      	b.n	8014a06 <HAL_UART_Transmit+0xc6>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80149fc:	3337      	adds	r3, #55	; 0x37
 80149fe:	2222      	movs	r2, #34	; 0x22
 8014a00:	54e2      	strb	r2, [r4, r3]
 8014a02:	e7f7      	b.n	80149f4 <HAL_UART_Transmit+0xb4>
    return HAL_BUSY;
 8014a04:	2002      	movs	r0, #2
}
 8014a06:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 8014a08:	2001      	movs	r0, #1
 8014a0a:	e7fc      	b.n	8014a06 <HAL_UART_Transmit+0xc6>
 8014a0c:	2001      	movs	r0, #1
 8014a0e:	e7fa      	b.n	8014a06 <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 8014a10:	2002      	movs	r0, #2
 8014a12:	e7f8      	b.n	8014a06 <HAL_UART_Transmit+0xc6>
        return HAL_TIMEOUT;
 8014a14:	2003      	movs	r0, #3
 8014a16:	e7f6      	b.n	8014a06 <HAL_UART_Transmit+0xc6>
      return HAL_TIMEOUT;
 8014a18:	2003      	movs	r0, #3
 8014a1a:	e7f4      	b.n	8014a06 <HAL_UART_Transmit+0xc6>

08014a1c <UART_CheckIdleState>:
{
 8014a1c:	b510      	push	{r4, lr}
 8014a1e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a20:	2300      	movs	r3, #0
 8014a22:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8014a24:	6803      	ldr	r3, [r0, #0]
 8014a26:	4a18      	ldr	r2, [pc, #96]	; (8014a88 <UART_CheckIdleState+0x6c>)
 8014a28:	4293      	cmp	r3, r2
 8014a2a:	d005      	beq.n	8014a38 <UART_CheckIdleState+0x1c>
 8014a2c:	4a17      	ldr	r2, [pc, #92]	; (8014a8c <UART_CheckIdleState+0x70>)
 8014a2e:	4293      	cmp	r3, r2
 8014a30:	d002      	beq.n	8014a38 <UART_CheckIdleState+0x1c>
 8014a32:	4a17      	ldr	r2, [pc, #92]	; (8014a90 <UART_CheckIdleState+0x74>)
 8014a34:	4293      	cmp	r3, r2
 8014a36:	d106      	bne.n	8014a46 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	071b      	lsls	r3, r3, #28
 8014a3c:	d40b      	bmi.n	8014a56 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014a3e:	6823      	ldr	r3, [r4, #0]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	075b      	lsls	r3, r3, #29
 8014a44:	d413      	bmi.n	8014a6e <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8014a46:	2369      	movs	r3, #105	; 0x69
 8014a48:	2201      	movs	r2, #1
 8014a4a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8014a4c:	3b01      	subs	r3, #1
 8014a4e:	2200      	movs	r2, #0
 8014a50:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8014a52:	2000      	movs	r0, #0
}
 8014a54:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8014a56:	23fa      	movs	r3, #250	; 0xfa
 8014a58:	2180      	movs	r1, #128	; 0x80
 8014a5a:	009b      	lsls	r3, r3, #2
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	0389      	lsls	r1, r1, #14
 8014a60:	0020      	movs	r0, r4
 8014a62:	f7ff ff05 	bl	8014870 <UART_WaitOnFlagUntilTimeout>
 8014a66:	2800      	cmp	r0, #0
 8014a68:	d0e9      	beq.n	8014a3e <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8014a6a:	2003      	movs	r0, #3
 8014a6c:	e7f2      	b.n	8014a54 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8014a6e:	23fa      	movs	r3, #250	; 0xfa
 8014a70:	2180      	movs	r1, #128	; 0x80
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	2200      	movs	r2, #0
 8014a76:	03c9      	lsls	r1, r1, #15
 8014a78:	0020      	movs	r0, r4
 8014a7a:	f7ff fef9 	bl	8014870 <UART_WaitOnFlagUntilTimeout>
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	d0e1      	beq.n	8014a46 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8014a82:	2003      	movs	r0, #3
 8014a84:	e7e6      	b.n	8014a54 <UART_CheckIdleState+0x38>
 8014a86:	46c0      	nop			; (mov r8, r8)
 8014a88:	40013800 	.word	0x40013800
 8014a8c:	40004400 	.word	0x40004400
 8014a90:	40004800 	.word	0x40004800

08014a94 <HAL_UART_Init>:
{
 8014a94:	b510      	push	{r4, lr}
 8014a96:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8014a98:	d030      	beq.n	8014afc <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8014a9a:	2369      	movs	r3, #105	; 0x69
 8014a9c:	5cc3      	ldrb	r3, [r0, r3]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d022      	beq.n	8014ae8 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8014aa2:	2369      	movs	r3, #105	; 0x69
 8014aa4:	2202      	movs	r2, #2
 8014aa6:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8014aa8:	6822      	ldr	r2, [r4, #0]
 8014aaa:	6813      	ldr	r3, [r2, #0]
 8014aac:	2101      	movs	r1, #1
 8014aae:	438b      	bics	r3, r1
 8014ab0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014ab2:	0020      	movs	r0, r4
 8014ab4:	f7ff fd4c 	bl	8014550 <UART_SetConfig>
 8014ab8:	2801      	cmp	r0, #1
 8014aba:	d014      	beq.n	8014ae6 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d118      	bne.n	8014af4 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8014ac2:	6822      	ldr	r2, [r4, #0]
 8014ac4:	6853      	ldr	r3, [r2, #4]
 8014ac6:	490e      	ldr	r1, [pc, #56]	; (8014b00 <HAL_UART_Init+0x6c>)
 8014ac8:	400b      	ands	r3, r1
 8014aca:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8014acc:	6822      	ldr	r2, [r4, #0]
 8014ace:	6893      	ldr	r3, [r2, #8]
 8014ad0:	212a      	movs	r1, #42	; 0x2a
 8014ad2:	438b      	bics	r3, r1
 8014ad4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8014ad6:	6822      	ldr	r2, [r4, #0]
 8014ad8:	6813      	ldr	r3, [r2, #0]
 8014ada:	3929      	subs	r1, #41	; 0x29
 8014adc:	430b      	orrs	r3, r1
 8014ade:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8014ae0:	0020      	movs	r0, r4
 8014ae2:	f7ff ff9b 	bl	8014a1c <UART_CheckIdleState>
}
 8014ae6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8014ae8:	3368      	adds	r3, #104	; 0x68
 8014aea:	2200      	movs	r2, #0
 8014aec:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8014aee:	f7fa fd33 	bl	800f558 <HAL_UART_MspInit>
 8014af2:	e7d6      	b.n	8014aa2 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8014af4:	0020      	movs	r0, r4
 8014af6:	f7ff fe4b 	bl	8014790 <UART_AdvFeatureConfig>
 8014afa:	e7e2      	b.n	8014ac2 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8014afc:	2001      	movs	r0, #1
 8014afe:	e7f2      	b.n	8014ae6 <HAL_UART_Init+0x52>
 8014b00:	ffffb7ff 	.word	0xffffb7ff

08014b04 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014b04:	2369      	movs	r3, #105	; 0x69
 8014b06:	5cc3      	ldrb	r3, [r0, r3]
 8014b08:	2b12      	cmp	r3, #18
 8014b0a:	d003      	beq.n	8014b14 <UART_Transmit_IT+0x10>
 8014b0c:	2369      	movs	r3, #105	; 0x69
 8014b0e:	5cc3      	ldrb	r3, [r0, r3]
 8014b10:	2b32      	cmp	r3, #50	; 0x32
 8014b12:	d12d      	bne.n	8014b70 <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8014b14:	2352      	movs	r3, #82	; 0x52
 8014b16:	5ac3      	ldrh	r3, [r0, r3]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d010      	beq.n	8014b3e <UART_Transmit_IT+0x3a>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014b1c:	2380      	movs	r3, #128	; 0x80
 8014b1e:	015b      	lsls	r3, r3, #5
 8014b20:	6882      	ldr	r2, [r0, #8]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d017      	beq.n	8014b56 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8014b26:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014b28:	1c5a      	adds	r2, r3, #1
 8014b2a:	64c2      	str	r2, [r0, #76]	; 0x4c
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	6802      	ldr	r2, [r0, #0]
 8014b30:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8014b32:	2252      	movs	r2, #82	; 0x52
 8014b34:	5a83      	ldrh	r3, [r0, r2]
 8014b36:	3b01      	subs	r3, #1
 8014b38:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 8014b3a:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8014b3c:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014b3e:	6802      	ldr	r2, [r0, #0]
 8014b40:	6813      	ldr	r3, [r2, #0]
 8014b42:	2180      	movs	r1, #128	; 0x80
 8014b44:	438b      	bics	r3, r1
 8014b46:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014b48:	6802      	ldr	r2, [r0, #0]
 8014b4a:	6813      	ldr	r3, [r2, #0]
 8014b4c:	3940      	subs	r1, #64	; 0x40
 8014b4e:	430b      	orrs	r3, r1
 8014b50:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8014b52:	2000      	movs	r0, #0
 8014b54:	e7f2      	b.n	8014b3c <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014b56:	6903      	ldr	r3, [r0, #16]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d1e4      	bne.n	8014b26 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8014b5c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014b5e:	881b      	ldrh	r3, [r3, #0]
 8014b60:	05db      	lsls	r3, r3, #23
 8014b62:	0ddb      	lsrs	r3, r3, #23
 8014b64:	6802      	ldr	r2, [r0, #0]
 8014b66:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8014b68:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014b6a:	3302      	adds	r3, #2
 8014b6c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8014b6e:	e7e0      	b.n	8014b32 <UART_Transmit_IT+0x2e>
    return HAL_BUSY;
 8014b70:	2002      	movs	r0, #2
 8014b72:	e7e3      	b.n	8014b3c <UART_Transmit_IT+0x38>

08014b74 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014b74:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8014b76:	6802      	ldr	r2, [r0, #0]
 8014b78:	6813      	ldr	r3, [r2, #0]
 8014b7a:	2140      	movs	r1, #64	; 0x40
 8014b7c:	438b      	bics	r3, r1
 8014b7e:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014b80:	2369      	movs	r3, #105	; 0x69
 8014b82:	5cc3      	ldrb	r3, [r0, r3]
 8014b84:	2b32      	cmp	r3, #50	; 0x32
 8014b86:	d00a      	beq.n	8014b9e <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014b88:	6801      	ldr	r1, [r0, #0]
 8014b8a:	688b      	ldr	r3, [r1, #8]
 8014b8c:	2201      	movs	r2, #1
 8014b8e:	4393      	bics	r3, r2
 8014b90:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8014b92:	2369      	movs	r3, #105	; 0x69
 8014b94:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8014b96:	f7fa fa15 	bl	800efc4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8014b9a:	2000      	movs	r0, #0
 8014b9c:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8014b9e:	3337      	adds	r3, #55	; 0x37
 8014ba0:	2222      	movs	r2, #34	; 0x22
 8014ba2:	54c2      	strb	r2, [r0, r3]
 8014ba4:	e7f7      	b.n	8014b96 <UART_EndTransmit_IT+0x22>
	...

08014ba8 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8014ba8:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8014baa:	235c      	movs	r3, #92	; 0x5c
 8014bac:	5ac3      	ldrh	r3, [r0, r3]

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014bae:	2269      	movs	r2, #105	; 0x69
 8014bb0:	5c82      	ldrb	r2, [r0, r2]
 8014bb2:	2a22      	cmp	r2, #34	; 0x22
 8014bb4:	d003      	beq.n	8014bbe <UART_Receive_IT+0x16>
 8014bb6:	2269      	movs	r2, #105	; 0x69
 8014bb8:	5c82      	ldrb	r2, [r0, r2]
 8014bba:	2a32      	cmp	r2, #50	; 0x32
 8014bbc:	d13c      	bne.n	8014c38 <UART_Receive_IT+0x90>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014bbe:	2280      	movs	r2, #128	; 0x80
 8014bc0:	0152      	lsls	r2, r2, #5
 8014bc2:	6881      	ldr	r1, [r0, #8]
 8014bc4:	4291      	cmp	r1, r2
 8014bc6:	d027      	beq.n	8014c18 <UART_Receive_IT+0x70>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014bc8:	6802      	ldr	r2, [r0, #0]
 8014bca:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8014bcc:	b2db      	uxtb	r3, r3
 8014bce:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8014bd0:	1c4c      	adds	r4, r1, #1
 8014bd2:	6544      	str	r4, [r0, #84]	; 0x54
 8014bd4:	4013      	ands	r3, r2
 8014bd6:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8014bd8:	225a      	movs	r2, #90	; 0x5a
 8014bda:	5a83      	ldrh	r3, [r0, r2]
 8014bdc:	3b01      	subs	r3, #1
 8014bde:	b29b      	uxth	r3, r3
 8014be0:	5283      	strh	r3, [r0, r2]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d12a      	bne.n	8014c3c <UART_Receive_IT+0x94>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014be6:	6802      	ldr	r2, [r0, #0]
 8014be8:	6813      	ldr	r3, [r2, #0]
 8014bea:	2120      	movs	r1, #32
 8014bec:	438b      	bics	r3, r1
 8014bee:	6013      	str	r3, [r2, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014bf0:	2369      	movs	r3, #105	; 0x69
 8014bf2:	5cc3      	ldrb	r3, [r0, r3]
 8014bf4:	2b32      	cmp	r3, #50	; 0x32
 8014bf6:	d01b      	beq.n	8014c30 <UART_Receive_IT+0x88>
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014bf8:	6802      	ldr	r2, [r0, #0]
 8014bfa:	6813      	ldr	r3, [r2, #0]
 8014bfc:	4910      	ldr	r1, [pc, #64]	; (8014c40 <UART_Receive_IT+0x98>)
 8014bfe:	400b      	ands	r3, r1
 8014c00:	6013      	str	r3, [r2, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014c02:	6801      	ldr	r1, [r0, #0]
 8014c04:	688b      	ldr	r3, [r1, #8]
 8014c06:	2201      	movs	r2, #1
 8014c08:	4393      	bics	r3, r2
 8014c0a:	608b      	str	r3, [r1, #8]

        huart->State = HAL_UART_STATE_READY;
 8014c0c:	2369      	movs	r3, #105	; 0x69
 8014c0e:	54c2      	strb	r2, [r0, r3]
      }

      HAL_UART_RxCpltCallback(huart);
 8014c10:	f7fa fa14 	bl	800f03c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8014c14:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8014c16:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014c18:	6902      	ldr	r2, [r0, #16]
 8014c1a:	2a00      	cmp	r2, #0
 8014c1c:	d1d4      	bne.n	8014bc8 <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8014c1e:	6802      	ldr	r2, [r0, #0]
 8014c20:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8014c22:	4013      	ands	r3, r2
 8014c24:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8014c26:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8014c28:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8014c2a:	3302      	adds	r3, #2
 8014c2c:	6543      	str	r3, [r0, #84]	; 0x54
 8014c2e:	e7d3      	b.n	8014bd8 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8014c30:	3337      	adds	r3, #55	; 0x37
 8014c32:	2212      	movs	r2, #18
 8014c34:	54c2      	strb	r2, [r0, r3]
 8014c36:	e7eb      	b.n	8014c10 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8014c38:	2002      	movs	r0, #2
 8014c3a:	e7ec      	b.n	8014c16 <UART_Receive_IT+0x6e>
    return HAL_OK;
 8014c3c:	2000      	movs	r0, #0
 8014c3e:	e7ea      	b.n	8014c16 <UART_Receive_IT+0x6e>
 8014c40:	fffffeff 	.word	0xfffffeff

08014c44 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8014c44:	4770      	bx	lr

08014c46 <HAL_UART_IRQHandler>:
{
 8014c46:	b510      	push	{r4, lr}
 8014c48:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8014c4a:	6803      	ldr	r3, [r0, #0]
 8014c4c:	69da      	ldr	r2, [r3, #28]
 8014c4e:	07d2      	lsls	r2, r2, #31
 8014c50:	d509      	bpl.n	8014c66 <HAL_UART_IRQHandler+0x20>
 8014c52:	681a      	ldr	r2, [r3, #0]
 8014c54:	05d2      	lsls	r2, r2, #23
 8014c56:	d506      	bpl.n	8014c66 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8014c58:	2201      	movs	r2, #1
 8014c5a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014c5c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8014c5e:	4313      	orrs	r3, r2
 8014c60:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014c62:	2369      	movs	r3, #105	; 0x69
 8014c64:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014c66:	6823      	ldr	r3, [r4, #0]
 8014c68:	69da      	ldr	r2, [r3, #28]
 8014c6a:	0792      	lsls	r2, r2, #30
 8014c6c:	d50b      	bpl.n	8014c86 <HAL_UART_IRQHandler+0x40>
 8014c6e:	689a      	ldr	r2, [r3, #8]
 8014c70:	07d2      	lsls	r2, r2, #31
 8014c72:	d508      	bpl.n	8014c86 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8014c74:	2202      	movs	r2, #2
 8014c76:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014c78:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014c7a:	3202      	adds	r2, #2
 8014c7c:	4313      	orrs	r3, r2
 8014c7e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014c80:	2369      	movs	r3, #105	; 0x69
 8014c82:	3a03      	subs	r2, #3
 8014c84:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014c86:	6823      	ldr	r3, [r4, #0]
 8014c88:	69da      	ldr	r2, [r3, #28]
 8014c8a:	0752      	lsls	r2, r2, #29
 8014c8c:	d50b      	bpl.n	8014ca6 <HAL_UART_IRQHandler+0x60>
 8014c8e:	689a      	ldr	r2, [r3, #8]
 8014c90:	07d2      	lsls	r2, r2, #31
 8014c92:	d508      	bpl.n	8014ca6 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8014c94:	2204      	movs	r2, #4
 8014c96:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014c98:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014c9a:	3a02      	subs	r2, #2
 8014c9c:	4313      	orrs	r3, r2
 8014c9e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014ca0:	2369      	movs	r3, #105	; 0x69
 8014ca2:	3a01      	subs	r2, #1
 8014ca4:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014ca6:	6823      	ldr	r3, [r4, #0]
 8014ca8:	69da      	ldr	r2, [r3, #28]
 8014caa:	0712      	lsls	r2, r2, #28
 8014cac:	d50a      	bpl.n	8014cc4 <HAL_UART_IRQHandler+0x7e>
 8014cae:	689a      	ldr	r2, [r3, #8]
 8014cb0:	07d2      	lsls	r2, r2, #31
 8014cb2:	d507      	bpl.n	8014cc4 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8014cb4:	2208      	movs	r2, #8
 8014cb6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014cb8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014cba:	4313      	orrs	r3, r2
 8014cbc:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014cbe:	2369      	movs	r3, #105	; 0x69
 8014cc0:	3a07      	subs	r2, #7
 8014cc2:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014cc4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d11c      	bne.n	8014d04 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8014cca:	6823      	ldr	r3, [r4, #0]
 8014ccc:	69da      	ldr	r2, [r3, #28]
 8014cce:	02d2      	lsls	r2, r2, #11
 8014cd0:	d502      	bpl.n	8014cd8 <HAL_UART_IRQHandler+0x92>
 8014cd2:	689a      	ldr	r2, [r3, #8]
 8014cd4:	0252      	lsls	r2, r2, #9
 8014cd6:	d419      	bmi.n	8014d0c <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8014cd8:	6823      	ldr	r3, [r4, #0]
 8014cda:	69da      	ldr	r2, [r3, #28]
 8014cdc:	0692      	lsls	r2, r2, #26
 8014cde:	d502      	bpl.n	8014ce6 <HAL_UART_IRQHandler+0xa0>
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	069b      	lsls	r3, r3, #26
 8014ce4:	d41c      	bmi.n	8014d20 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8014ce6:	6823      	ldr	r3, [r4, #0]
 8014ce8:	69da      	ldr	r2, [r3, #28]
 8014cea:	0612      	lsls	r2, r2, #24
 8014cec:	d502      	bpl.n	8014cf4 <HAL_UART_IRQHandler+0xae>
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	061b      	lsls	r3, r3, #24
 8014cf2:	d41e      	bmi.n	8014d32 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8014cf4:	6823      	ldr	r3, [r4, #0]
 8014cf6:	69da      	ldr	r2, [r3, #28]
 8014cf8:	0652      	lsls	r2, r2, #25
 8014cfa:	d502      	bpl.n	8014d02 <HAL_UART_IRQHandler+0xbc>
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	065b      	lsls	r3, r3, #25
 8014d00:	d41b      	bmi.n	8014d3a <HAL_UART_IRQHandler+0xf4>
}
 8014d02:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8014d04:	0020      	movs	r0, r4
 8014d06:	f7fa f975 	bl	800eff4 <HAL_UART_ErrorCallback>
 8014d0a:	e7de      	b.n	8014cca <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8014d0c:	2280      	movs	r2, #128	; 0x80
 8014d0e:	0352      	lsls	r2, r2, #13
 8014d10:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8014d12:	2369      	movs	r3, #105	; 0x69
 8014d14:	2201      	movs	r2, #1
 8014d16:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8014d18:	0020      	movs	r0, r4
 8014d1a:	f7ff ff93 	bl	8014c44 <HAL_UARTEx_WakeupCallback>
 8014d1e:	e7db      	b.n	8014cd8 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8014d20:	0020      	movs	r0, r4
 8014d22:	f7ff ff41 	bl	8014ba8 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014d26:	6822      	ldr	r2, [r4, #0]
 8014d28:	6993      	ldr	r3, [r2, #24]
 8014d2a:	2108      	movs	r1, #8
 8014d2c:	430b      	orrs	r3, r1
 8014d2e:	6193      	str	r3, [r2, #24]
 8014d30:	e7d9      	b.n	8014ce6 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8014d32:	0020      	movs	r0, r4
 8014d34:	f7ff fee6 	bl	8014b04 <UART_Transmit_IT>
 8014d38:	e7dc      	b.n	8014cf4 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8014d3a:	0020      	movs	r0, r4
 8014d3c:	f7ff ff1a 	bl	8014b74 <UART_EndTransmit_IT>
}
 8014d40:	e7df      	b.n	8014d02 <HAL_UART_IRQHandler+0xbc>

08014d42 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8014d42:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8014d44:	f7ef fed4 	bl	8004af0 <Module_Init>
 8014d48:	e7fe      	b.n	8014d48 <main+0x6>

08014d4a <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8014d4a:	e7fe      	b.n	8014d4a <UserTask>

08014d4c <atof>:
 8014d4c:	b510      	push	{r4, lr}
 8014d4e:	2100      	movs	r1, #0
 8014d50:	f001 fb3e 	bl	80163d0 <strtod>
 8014d54:	bd10      	pop	{r4, pc}

08014d56 <atoi>:
 8014d56:	b510      	push	{r4, lr}
 8014d58:	220a      	movs	r2, #10
 8014d5a:	2100      	movs	r1, #0
 8014d5c:	f001 fc04 	bl	8016568 <strtol>
 8014d60:	bd10      	pop	{r4, pc}

08014d62 <atol>:
 8014d62:	b510      	push	{r4, lr}
 8014d64:	220a      	movs	r2, #10
 8014d66:	2100      	movs	r1, #0
 8014d68:	f001 fbfe 	bl	8016568 <strtol>
 8014d6c:	bd10      	pop	{r4, pc}
	...

08014d70 <__libc_init_array>:
 8014d70:	b570      	push	{r4, r5, r6, lr}
 8014d72:	2600      	movs	r6, #0
 8014d74:	4d0c      	ldr	r5, [pc, #48]	; (8014da8 <__libc_init_array+0x38>)
 8014d76:	4c0d      	ldr	r4, [pc, #52]	; (8014dac <__libc_init_array+0x3c>)
 8014d78:	1b64      	subs	r4, r4, r5
 8014d7a:	10a4      	asrs	r4, r4, #2
 8014d7c:	42a6      	cmp	r6, r4
 8014d7e:	d109      	bne.n	8014d94 <__libc_init_array+0x24>
 8014d80:	2600      	movs	r6, #0
 8014d82:	f004 fe6d 	bl	8019a60 <_init>
 8014d86:	4d0a      	ldr	r5, [pc, #40]	; (8014db0 <__libc_init_array+0x40>)
 8014d88:	4c0a      	ldr	r4, [pc, #40]	; (8014db4 <__libc_init_array+0x44>)
 8014d8a:	1b64      	subs	r4, r4, r5
 8014d8c:	10a4      	asrs	r4, r4, #2
 8014d8e:	42a6      	cmp	r6, r4
 8014d90:	d105      	bne.n	8014d9e <__libc_init_array+0x2e>
 8014d92:	bd70      	pop	{r4, r5, r6, pc}
 8014d94:	00b3      	lsls	r3, r6, #2
 8014d96:	58eb      	ldr	r3, [r5, r3]
 8014d98:	4798      	blx	r3
 8014d9a:	3601      	adds	r6, #1
 8014d9c:	e7ee      	b.n	8014d7c <__libc_init_array+0xc>
 8014d9e:	00b3      	lsls	r3, r6, #2
 8014da0:	58eb      	ldr	r3, [r5, r3]
 8014da2:	4798      	blx	r3
 8014da4:	3601      	adds	r6, #1
 8014da6:	e7f2      	b.n	8014d8e <__libc_init_array+0x1e>
 8014da8:	0801d494 	.word	0x0801d494
 8014dac:	0801d494 	.word	0x0801d494
 8014db0:	0801d494 	.word	0x0801d494
 8014db4:	0801d49c 	.word	0x0801d49c

08014db8 <__locale_ctype_ptr_l>:
 8014db8:	30ec      	adds	r0, #236	; 0xec
 8014dba:	6800      	ldr	r0, [r0, #0]
 8014dbc:	4770      	bx	lr
	...

08014dc0 <__locale_ctype_ptr>:
 8014dc0:	4b04      	ldr	r3, [pc, #16]	; (8014dd4 <__locale_ctype_ptr+0x14>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d100      	bne.n	8014dcc <__locale_ctype_ptr+0xc>
 8014dca:	4b03      	ldr	r3, [pc, #12]	; (8014dd8 <__locale_ctype_ptr+0x18>)
 8014dcc:	33ec      	adds	r3, #236	; 0xec
 8014dce:	6818      	ldr	r0, [r3, #0]
 8014dd0:	4770      	bx	lr
 8014dd2:	46c0      	nop			; (mov r8, r8)
 8014dd4:	200000d0 	.word	0x200000d0
 8014dd8:	20000500 	.word	0x20000500

08014ddc <malloc>:
 8014ddc:	b510      	push	{r4, lr}
 8014dde:	4b03      	ldr	r3, [pc, #12]	; (8014dec <malloc+0x10>)
 8014de0:	0001      	movs	r1, r0
 8014de2:	6818      	ldr	r0, [r3, #0]
 8014de4:	f000 f80e 	bl	8014e04 <_malloc_r>
 8014de8:	bd10      	pop	{r4, pc}
 8014dea:	46c0      	nop			; (mov r8, r8)
 8014dec:	200000d0 	.word	0x200000d0

08014df0 <free>:
 8014df0:	b510      	push	{r4, lr}
 8014df2:	4b03      	ldr	r3, [pc, #12]	; (8014e00 <free+0x10>)
 8014df4:	0001      	movs	r1, r0
 8014df6:	6818      	ldr	r0, [r3, #0]
 8014df8:	f003 fd10 	bl	801881c <_free_r>
 8014dfc:	bd10      	pop	{r4, pc}
 8014dfe:	46c0      	nop			; (mov r8, r8)
 8014e00:	200000d0 	.word	0x200000d0

08014e04 <_malloc_r>:
 8014e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e06:	000d      	movs	r5, r1
 8014e08:	b085      	sub	sp, #20
 8014e0a:	350b      	adds	r5, #11
 8014e0c:	9001      	str	r0, [sp, #4]
 8014e0e:	2d16      	cmp	r5, #22
 8014e10:	d908      	bls.n	8014e24 <_malloc_r+0x20>
 8014e12:	2307      	movs	r3, #7
 8014e14:	439d      	bics	r5, r3
 8014e16:	d506      	bpl.n	8014e26 <_malloc_r+0x22>
 8014e18:	230c      	movs	r3, #12
 8014e1a:	9a01      	ldr	r2, [sp, #4]
 8014e1c:	6013      	str	r3, [r2, #0]
 8014e1e:	2000      	movs	r0, #0
 8014e20:	b005      	add	sp, #20
 8014e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e24:	2510      	movs	r5, #16
 8014e26:	428d      	cmp	r5, r1
 8014e28:	d3f6      	bcc.n	8014e18 <_malloc_r+0x14>
 8014e2a:	9801      	ldr	r0, [sp, #4]
 8014e2c:	f000 fa34 	bl	8015298 <__malloc_lock>
 8014e30:	23f8      	movs	r3, #248	; 0xf8
 8014e32:	33ff      	adds	r3, #255	; 0xff
 8014e34:	4ac4      	ldr	r2, [pc, #784]	; (8015148 <_malloc_r+0x344>)
 8014e36:	429d      	cmp	r5, r3
 8014e38:	d820      	bhi.n	8014e7c <_malloc_r+0x78>
 8014e3a:	0029      	movs	r1, r5
 8014e3c:	3108      	adds	r1, #8
 8014e3e:	1851      	adds	r1, r2, r1
 8014e40:	0008      	movs	r0, r1
 8014e42:	684c      	ldr	r4, [r1, #4]
 8014e44:	3808      	subs	r0, #8
 8014e46:	08eb      	lsrs	r3, r5, #3
 8014e48:	4284      	cmp	r4, r0
 8014e4a:	d104      	bne.n	8014e56 <_malloc_r+0x52>
 8014e4c:	68cc      	ldr	r4, [r1, #12]
 8014e4e:	3302      	adds	r3, #2
 8014e50:	469c      	mov	ip, r3
 8014e52:	42a1      	cmp	r1, r4
 8014e54:	d02a      	beq.n	8014eac <_malloc_r+0xa8>
 8014e56:	2303      	movs	r3, #3
 8014e58:	6862      	ldr	r2, [r4, #4]
 8014e5a:	68a1      	ldr	r1, [r4, #8]
 8014e5c:	439a      	bics	r2, r3
 8014e5e:	0013      	movs	r3, r2
 8014e60:	68e2      	ldr	r2, [r4, #12]
 8014e62:	18e3      	adds	r3, r4, r3
 8014e64:	60ca      	str	r2, [r1, #12]
 8014e66:	6091      	str	r1, [r2, #8]
 8014e68:	2201      	movs	r2, #1
 8014e6a:	6859      	ldr	r1, [r3, #4]
 8014e6c:	430a      	orrs	r2, r1
 8014e6e:	605a      	str	r2, [r3, #4]
 8014e70:	9801      	ldr	r0, [sp, #4]
 8014e72:	f000 fa19 	bl	80152a8 <__malloc_unlock>
 8014e76:	0020      	movs	r0, r4
 8014e78:	3008      	adds	r0, #8
 8014e7a:	e7d1      	b.n	8014e20 <_malloc_r+0x1c>
 8014e7c:	0a69      	lsrs	r1, r5, #9
 8014e7e:	233f      	movs	r3, #63	; 0x3f
 8014e80:	2900      	cmp	r1, #0
 8014e82:	d003      	beq.n	8014e8c <_malloc_r+0x88>
 8014e84:	2904      	cmp	r1, #4
 8014e86:	d828      	bhi.n	8014eda <_malloc_r+0xd6>
 8014e88:	09ab      	lsrs	r3, r5, #6
 8014e8a:	3338      	adds	r3, #56	; 0x38
 8014e8c:	2103      	movs	r1, #3
 8014e8e:	468c      	mov	ip, r1
 8014e90:	00d8      	lsls	r0, r3, #3
 8014e92:	1880      	adds	r0, r0, r2
 8014e94:	68c4      	ldr	r4, [r0, #12]
 8014e96:	4284      	cmp	r4, r0
 8014e98:	d006      	beq.n	8014ea8 <_malloc_r+0xa4>
 8014e9a:	4666      	mov	r6, ip
 8014e9c:	6861      	ldr	r1, [r4, #4]
 8014e9e:	43b1      	bics	r1, r6
 8014ea0:	1b4f      	subs	r7, r1, r5
 8014ea2:	2f0f      	cmp	r7, #15
 8014ea4:	dd31      	ble.n	8014f0a <_malloc_r+0x106>
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	469c      	mov	ip, r3
 8014eac:	6914      	ldr	r4, [r2, #16]
 8014eae:	49a7      	ldr	r1, [pc, #668]	; (801514c <_malloc_r+0x348>)
 8014eb0:	428c      	cmp	r4, r1
 8014eb2:	d055      	beq.n	8014f60 <_malloc_r+0x15c>
 8014eb4:	2303      	movs	r3, #3
 8014eb6:	6860      	ldr	r0, [r4, #4]
 8014eb8:	4398      	bics	r0, r3
 8014eba:	0003      	movs	r3, r0
 8014ebc:	1b46      	subs	r6, r0, r5
 8014ebe:	2e0f      	cmp	r6, #15
 8014ec0:	dd31      	ble.n	8014f26 <_malloc_r+0x122>
 8014ec2:	2701      	movs	r7, #1
 8014ec4:	1960      	adds	r0, r4, r5
 8014ec6:	433d      	orrs	r5, r7
 8014ec8:	4337      	orrs	r7, r6
 8014eca:	6065      	str	r5, [r4, #4]
 8014ecc:	6150      	str	r0, [r2, #20]
 8014ece:	6110      	str	r0, [r2, #16]
 8014ed0:	60c1      	str	r1, [r0, #12]
 8014ed2:	6081      	str	r1, [r0, #8]
 8014ed4:	6047      	str	r7, [r0, #4]
 8014ed6:	50e6      	str	r6, [r4, r3]
 8014ed8:	e7ca      	b.n	8014e70 <_malloc_r+0x6c>
 8014eda:	2914      	cmp	r1, #20
 8014edc:	d802      	bhi.n	8014ee4 <_malloc_r+0xe0>
 8014ede:	000b      	movs	r3, r1
 8014ee0:	335b      	adds	r3, #91	; 0x5b
 8014ee2:	e7d3      	b.n	8014e8c <_malloc_r+0x88>
 8014ee4:	2954      	cmp	r1, #84	; 0x54
 8014ee6:	d802      	bhi.n	8014eee <_malloc_r+0xea>
 8014ee8:	0b2b      	lsrs	r3, r5, #12
 8014eea:	336e      	adds	r3, #110	; 0x6e
 8014eec:	e7ce      	b.n	8014e8c <_malloc_r+0x88>
 8014eee:	23aa      	movs	r3, #170	; 0xaa
 8014ef0:	005b      	lsls	r3, r3, #1
 8014ef2:	4299      	cmp	r1, r3
 8014ef4:	d802      	bhi.n	8014efc <_malloc_r+0xf8>
 8014ef6:	0beb      	lsrs	r3, r5, #15
 8014ef8:	3377      	adds	r3, #119	; 0x77
 8014efa:	e7c7      	b.n	8014e8c <_malloc_r+0x88>
 8014efc:	4894      	ldr	r0, [pc, #592]	; (8015150 <_malloc_r+0x34c>)
 8014efe:	237e      	movs	r3, #126	; 0x7e
 8014f00:	4281      	cmp	r1, r0
 8014f02:	d8c3      	bhi.n	8014e8c <_malloc_r+0x88>
 8014f04:	0cab      	lsrs	r3, r5, #18
 8014f06:	337c      	adds	r3, #124	; 0x7c
 8014f08:	e7c0      	b.n	8014e8c <_malloc_r+0x88>
 8014f0a:	68e6      	ldr	r6, [r4, #12]
 8014f0c:	2f00      	cmp	r7, #0
 8014f0e:	db08      	blt.n	8014f22 <_malloc_r+0x11e>
 8014f10:	68a3      	ldr	r3, [r4, #8]
 8014f12:	1861      	adds	r1, r4, r1
 8014f14:	60de      	str	r6, [r3, #12]
 8014f16:	60b3      	str	r3, [r6, #8]
 8014f18:	2301      	movs	r3, #1
 8014f1a:	684a      	ldr	r2, [r1, #4]
 8014f1c:	4313      	orrs	r3, r2
 8014f1e:	604b      	str	r3, [r1, #4]
 8014f20:	e7a6      	b.n	8014e70 <_malloc_r+0x6c>
 8014f22:	0034      	movs	r4, r6
 8014f24:	e7b7      	b.n	8014e96 <_malloc_r+0x92>
 8014f26:	6151      	str	r1, [r2, #20]
 8014f28:	6111      	str	r1, [r2, #16]
 8014f2a:	2e00      	cmp	r6, #0
 8014f2c:	db05      	blt.n	8014f3a <_malloc_r+0x136>
 8014f2e:	2101      	movs	r1, #1
 8014f30:	1823      	adds	r3, r4, r0
 8014f32:	685a      	ldr	r2, [r3, #4]
 8014f34:	4311      	orrs	r1, r2
 8014f36:	6059      	str	r1, [r3, #4]
 8014f38:	e79a      	b.n	8014e70 <_malloc_r+0x6c>
 8014f3a:	4986      	ldr	r1, [pc, #536]	; (8015154 <_malloc_r+0x350>)
 8014f3c:	6857      	ldr	r7, [r2, #4]
 8014f3e:	4288      	cmp	r0, r1
 8014f40:	d900      	bls.n	8014f44 <_malloc_r+0x140>
 8014f42:	e090      	b.n	8015066 <_malloc_r+0x262>
 8014f44:	08c3      	lsrs	r3, r0, #3
 8014f46:	39ff      	subs	r1, #255	; 0xff
 8014f48:	1098      	asrs	r0, r3, #2
 8014f4a:	39ff      	subs	r1, #255	; 0xff
 8014f4c:	4081      	lsls	r1, r0
 8014f4e:	00db      	lsls	r3, r3, #3
 8014f50:	4339      	orrs	r1, r7
 8014f52:	6051      	str	r1, [r2, #4]
 8014f54:	189a      	adds	r2, r3, r2
 8014f56:	6893      	ldr	r3, [r2, #8]
 8014f58:	60e2      	str	r2, [r4, #12]
 8014f5a:	60a3      	str	r3, [r4, #8]
 8014f5c:	6094      	str	r4, [r2, #8]
 8014f5e:	60dc      	str	r4, [r3, #12]
 8014f60:	4663      	mov	r3, ip
 8014f62:	2201      	movs	r2, #1
 8014f64:	4978      	ldr	r1, [pc, #480]	; (8015148 <_malloc_r+0x344>)
 8014f66:	109b      	asrs	r3, r3, #2
 8014f68:	6848      	ldr	r0, [r1, #4]
 8014f6a:	409a      	lsls	r2, r3
 8014f6c:	4290      	cmp	r0, r2
 8014f6e:	d32d      	bcc.n	8014fcc <_malloc_r+0x1c8>
 8014f70:	4202      	tst	r2, r0
 8014f72:	d109      	bne.n	8014f88 <_malloc_r+0x184>
 8014f74:	2303      	movs	r3, #3
 8014f76:	4664      	mov	r4, ip
 8014f78:	439c      	bics	r4, r3
 8014f7a:	0023      	movs	r3, r4
 8014f7c:	3304      	adds	r3, #4
 8014f7e:	469c      	mov	ip, r3
 8014f80:	0052      	lsls	r2, r2, #1
 8014f82:	4202      	tst	r2, r0
 8014f84:	d100      	bne.n	8014f88 <_malloc_r+0x184>
 8014f86:	e0a4      	b.n	80150d2 <_malloc_r+0x2ce>
 8014f88:	4663      	mov	r3, ip
 8014f8a:	00db      	lsls	r3, r3, #3
 8014f8c:	18cb      	adds	r3, r1, r3
 8014f8e:	9303      	str	r3, [sp, #12]
 8014f90:	001f      	movs	r7, r3
 8014f92:	4663      	mov	r3, ip
 8014f94:	9302      	str	r3, [sp, #8]
 8014f96:	68fc      	ldr	r4, [r7, #12]
 8014f98:	42bc      	cmp	r4, r7
 8014f9a:	d000      	beq.n	8014f9e <_malloc_r+0x19a>
 8014f9c:	e09c      	b.n	80150d8 <_malloc_r+0x2d4>
 8014f9e:	2003      	movs	r0, #3
 8014fa0:	9b02      	ldr	r3, [sp, #8]
 8014fa2:	3708      	adds	r7, #8
 8014fa4:	3301      	adds	r3, #1
 8014fa6:	9302      	str	r3, [sp, #8]
 8014fa8:	4203      	tst	r3, r0
 8014faa:	d1f4      	bne.n	8014f96 <_malloc_r+0x192>
 8014fac:	4663      	mov	r3, ip
 8014fae:	2003      	movs	r0, #3
 8014fb0:	4203      	tst	r3, r0
 8014fb2:	d000      	beq.n	8014fb6 <_malloc_r+0x1b2>
 8014fb4:	e0b3      	b.n	801511e <_malloc_r+0x31a>
 8014fb6:	684b      	ldr	r3, [r1, #4]
 8014fb8:	4393      	bics	r3, r2
 8014fba:	604b      	str	r3, [r1, #4]
 8014fbc:	4b62      	ldr	r3, [pc, #392]	; (8015148 <_malloc_r+0x344>)
 8014fbe:	0052      	lsls	r2, r2, #1
 8014fc0:	685b      	ldr	r3, [r3, #4]
 8014fc2:	4293      	cmp	r3, r2
 8014fc4:	d302      	bcc.n	8014fcc <_malloc_r+0x1c8>
 8014fc6:	2a00      	cmp	r2, #0
 8014fc8:	d000      	beq.n	8014fcc <_malloc_r+0x1c8>
 8014fca:	e0b9      	b.n	8015140 <_malloc_r+0x33c>
 8014fcc:	2303      	movs	r3, #3
 8014fce:	688f      	ldr	r7, [r1, #8]
 8014fd0:	687a      	ldr	r2, [r7, #4]
 8014fd2:	439a      	bics	r2, r3
 8014fd4:	9202      	str	r2, [sp, #8]
 8014fd6:	42aa      	cmp	r2, r5
 8014fd8:	d303      	bcc.n	8014fe2 <_malloc_r+0x1de>
 8014fda:	1b52      	subs	r2, r2, r5
 8014fdc:	2a0f      	cmp	r2, #15
 8014fde:	dd00      	ble.n	8014fe2 <_malloc_r+0x1de>
 8014fe0:	e116      	b.n	8015210 <_malloc_r+0x40c>
 8014fe2:	4b5d      	ldr	r3, [pc, #372]	; (8015158 <_malloc_r+0x354>)
 8014fe4:	2008      	movs	r0, #8
 8014fe6:	681e      	ldr	r6, [r3, #0]
 8014fe8:	f002 fd26 	bl	8017a38 <sysconf>
 8014fec:	4b5b      	ldr	r3, [pc, #364]	; (801515c <_malloc_r+0x358>)
 8014fee:	3610      	adds	r6, #16
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	1976      	adds	r6, r6, r5
 8014ff4:	9003      	str	r0, [sp, #12]
 8014ff6:	3301      	adds	r3, #1
 8014ff8:	d003      	beq.n	8015002 <_malloc_r+0x1fe>
 8014ffa:	3e01      	subs	r6, #1
 8014ffc:	1836      	adds	r6, r6, r0
 8014ffe:	4243      	negs	r3, r0
 8015000:	401e      	ands	r6, r3
 8015002:	0031      	movs	r1, r6
 8015004:	9801      	ldr	r0, [sp, #4]
 8015006:	f000 fb27 	bl	8015658 <_sbrk_r>
 801500a:	0004      	movs	r4, r0
 801500c:	1c43      	adds	r3, r0, #1
 801500e:	d100      	bne.n	8015012 <_malloc_r+0x20e>
 8015010:	e0d6      	b.n	80151c0 <_malloc_r+0x3bc>
 8015012:	9b02      	ldr	r3, [sp, #8]
 8015014:	18fb      	adds	r3, r7, r3
 8015016:	4283      	cmp	r3, r0
 8015018:	d903      	bls.n	8015022 <_malloc_r+0x21e>
 801501a:	4a4b      	ldr	r2, [pc, #300]	; (8015148 <_malloc_r+0x344>)
 801501c:	4297      	cmp	r7, r2
 801501e:	d000      	beq.n	8015022 <_malloc_r+0x21e>
 8015020:	e0ce      	b.n	80151c0 <_malloc_r+0x3bc>
 8015022:	494f      	ldr	r1, [pc, #316]	; (8015160 <_malloc_r+0x35c>)
 8015024:	680a      	ldr	r2, [r1, #0]
 8015026:	18b2      	adds	r2, r6, r2
 8015028:	600a      	str	r2, [r1, #0]
 801502a:	9903      	ldr	r1, [sp, #12]
 801502c:	4694      	mov	ip, r2
 801502e:	1e48      	subs	r0, r1, #1
 8015030:	42a3      	cmp	r3, r4
 8015032:	d000      	beq.n	8015036 <_malloc_r+0x232>
 8015034:	e09a      	b.n	801516c <_malloc_r+0x368>
 8015036:	4203      	tst	r3, r0
 8015038:	d000      	beq.n	801503c <_malloc_r+0x238>
 801503a:	e097      	b.n	801516c <_malloc_r+0x368>
 801503c:	9a02      	ldr	r2, [sp, #8]
 801503e:	4b42      	ldr	r3, [pc, #264]	; (8015148 <_malloc_r+0x344>)
 8015040:	1992      	adds	r2, r2, r6
 8015042:	2601      	movs	r6, #1
 8015044:	689b      	ldr	r3, [r3, #8]
 8015046:	4316      	orrs	r6, r2
 8015048:	605e      	str	r6, [r3, #4]
 801504a:	4b45      	ldr	r3, [pc, #276]	; (8015160 <_malloc_r+0x35c>)
 801504c:	4a45      	ldr	r2, [pc, #276]	; (8015164 <_malloc_r+0x360>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	6811      	ldr	r1, [r2, #0]
 8015052:	428b      	cmp	r3, r1
 8015054:	d900      	bls.n	8015058 <_malloc_r+0x254>
 8015056:	6013      	str	r3, [r2, #0]
 8015058:	4a43      	ldr	r2, [pc, #268]	; (8015168 <_malloc_r+0x364>)
 801505a:	6811      	ldr	r1, [r2, #0]
 801505c:	428b      	cmp	r3, r1
 801505e:	d800      	bhi.n	8015062 <_malloc_r+0x25e>
 8015060:	e0ae      	b.n	80151c0 <_malloc_r+0x3bc>
 8015062:	6013      	str	r3, [r2, #0]
 8015064:	e0ac      	b.n	80151c0 <_malloc_r+0x3bc>
 8015066:	0a40      	lsrs	r0, r0, #9
 8015068:	2804      	cmp	r0, #4
 801506a:	d810      	bhi.n	801508e <_malloc_r+0x28a>
 801506c:	0999      	lsrs	r1, r3, #6
 801506e:	3138      	adds	r1, #56	; 0x38
 8015070:	00ce      	lsls	r6, r1, #3
 8015072:	18b6      	adds	r6, r6, r2
 8015074:	68b0      	ldr	r0, [r6, #8]
 8015076:	4286      	cmp	r6, r0
 8015078:	d124      	bne.n	80150c4 <_malloc_r+0x2c0>
 801507a:	2301      	movs	r3, #1
 801507c:	1089      	asrs	r1, r1, #2
 801507e:	408b      	lsls	r3, r1
 8015080:	433b      	orrs	r3, r7
 8015082:	6053      	str	r3, [r2, #4]
 8015084:	60e6      	str	r6, [r4, #12]
 8015086:	60a0      	str	r0, [r4, #8]
 8015088:	60b4      	str	r4, [r6, #8]
 801508a:	60c4      	str	r4, [r0, #12]
 801508c:	e768      	b.n	8014f60 <_malloc_r+0x15c>
 801508e:	2814      	cmp	r0, #20
 8015090:	d802      	bhi.n	8015098 <_malloc_r+0x294>
 8015092:	0001      	movs	r1, r0
 8015094:	315b      	adds	r1, #91	; 0x5b
 8015096:	e7eb      	b.n	8015070 <_malloc_r+0x26c>
 8015098:	2854      	cmp	r0, #84	; 0x54
 801509a:	d802      	bhi.n	80150a2 <_malloc_r+0x29e>
 801509c:	0b19      	lsrs	r1, r3, #12
 801509e:	316e      	adds	r1, #110	; 0x6e
 80150a0:	e7e6      	b.n	8015070 <_malloc_r+0x26c>
 80150a2:	21aa      	movs	r1, #170	; 0xaa
 80150a4:	0049      	lsls	r1, r1, #1
 80150a6:	4288      	cmp	r0, r1
 80150a8:	d802      	bhi.n	80150b0 <_malloc_r+0x2ac>
 80150aa:	0bd9      	lsrs	r1, r3, #15
 80150ac:	3177      	adds	r1, #119	; 0x77
 80150ae:	e7df      	b.n	8015070 <_malloc_r+0x26c>
 80150b0:	4e27      	ldr	r6, [pc, #156]	; (8015150 <_malloc_r+0x34c>)
 80150b2:	217e      	movs	r1, #126	; 0x7e
 80150b4:	42b0      	cmp	r0, r6
 80150b6:	d8db      	bhi.n	8015070 <_malloc_r+0x26c>
 80150b8:	0c99      	lsrs	r1, r3, #18
 80150ba:	317c      	adds	r1, #124	; 0x7c
 80150bc:	e7d8      	b.n	8015070 <_malloc_r+0x26c>
 80150be:	6880      	ldr	r0, [r0, #8]
 80150c0:	4286      	cmp	r6, r0
 80150c2:	d004      	beq.n	80150ce <_malloc_r+0x2ca>
 80150c4:	2103      	movs	r1, #3
 80150c6:	6842      	ldr	r2, [r0, #4]
 80150c8:	438a      	bics	r2, r1
 80150ca:	429a      	cmp	r2, r3
 80150cc:	d8f7      	bhi.n	80150be <_malloc_r+0x2ba>
 80150ce:	68c6      	ldr	r6, [r0, #12]
 80150d0:	e7d8      	b.n	8015084 <_malloc_r+0x280>
 80150d2:	2304      	movs	r3, #4
 80150d4:	449c      	add	ip, r3
 80150d6:	e753      	b.n	8014f80 <_malloc_r+0x17c>
 80150d8:	2003      	movs	r0, #3
 80150da:	6863      	ldr	r3, [r4, #4]
 80150dc:	4383      	bics	r3, r0
 80150de:	1b5e      	subs	r6, r3, r5
 80150e0:	68e0      	ldr	r0, [r4, #12]
 80150e2:	2e0f      	cmp	r6, #15
 80150e4:	dd0e      	ble.n	8015104 <_malloc_r+0x300>
 80150e6:	2701      	movs	r7, #1
 80150e8:	1962      	adds	r2, r4, r5
 80150ea:	433d      	orrs	r5, r7
 80150ec:	6065      	str	r5, [r4, #4]
 80150ee:	68a5      	ldr	r5, [r4, #8]
 80150f0:	4337      	orrs	r7, r6
 80150f2:	60e8      	str	r0, [r5, #12]
 80150f4:	6085      	str	r5, [r0, #8]
 80150f6:	614a      	str	r2, [r1, #20]
 80150f8:	610a      	str	r2, [r1, #16]
 80150fa:	4914      	ldr	r1, [pc, #80]	; (801514c <_malloc_r+0x348>)
 80150fc:	6057      	str	r7, [r2, #4]
 80150fe:	60d1      	str	r1, [r2, #12]
 8015100:	6091      	str	r1, [r2, #8]
 8015102:	e6e8      	b.n	8014ed6 <_malloc_r+0xd2>
 8015104:	2e00      	cmp	r6, #0
 8015106:	db08      	blt.n	801511a <_malloc_r+0x316>
 8015108:	2201      	movs	r2, #1
 801510a:	18e3      	adds	r3, r4, r3
 801510c:	6859      	ldr	r1, [r3, #4]
 801510e:	430a      	orrs	r2, r1
 8015110:	605a      	str	r2, [r3, #4]
 8015112:	68a3      	ldr	r3, [r4, #8]
 8015114:	60d8      	str	r0, [r3, #12]
 8015116:	6083      	str	r3, [r0, #8]
 8015118:	e6aa      	b.n	8014e70 <_malloc_r+0x6c>
 801511a:	0004      	movs	r4, r0
 801511c:	e73c      	b.n	8014f98 <_malloc_r+0x194>
 801511e:	2301      	movs	r3, #1
 8015120:	425b      	negs	r3, r3
 8015122:	449c      	add	ip, r3
 8015124:	9b03      	ldr	r3, [sp, #12]
 8015126:	6818      	ldr	r0, [r3, #0]
 8015128:	3b08      	subs	r3, #8
 801512a:	9003      	str	r0, [sp, #12]
 801512c:	4298      	cmp	r0, r3
 801512e:	d100      	bne.n	8015132 <_malloc_r+0x32e>
 8015130:	e73c      	b.n	8014fac <_malloc_r+0x1a8>
 8015132:	e743      	b.n	8014fbc <_malloc_r+0x1b8>
 8015134:	2004      	movs	r0, #4
 8015136:	0052      	lsls	r2, r2, #1
 8015138:	4484      	add	ip, r0
 801513a:	421a      	tst	r2, r3
 801513c:	d0fa      	beq.n	8015134 <_malloc_r+0x330>
 801513e:	e723      	b.n	8014f88 <_malloc_r+0x184>
 8015140:	9802      	ldr	r0, [sp, #8]
 8015142:	4684      	mov	ip, r0
 8015144:	e7f9      	b.n	801513a <_malloc_r+0x336>
 8015146:	46c0      	nop			; (mov r8, r8)
 8015148:	2000066c 	.word	0x2000066c
 801514c:	20000674 	.word	0x20000674
 8015150:	00000554 	.word	0x00000554
 8015154:	000001ff 	.word	0x000001ff
 8015158:	20006d1c 	.word	0x20006d1c
 801515c:	20000a74 	.word	0x20000a74
 8015160:	20006cec 	.word	0x20006cec
 8015164:	20006d14 	.word	0x20006d14
 8015168:	20006d18 	.word	0x20006d18
 801516c:	492e      	ldr	r1, [pc, #184]	; (8015228 <_malloc_r+0x424>)
 801516e:	680a      	ldr	r2, [r1, #0]
 8015170:	3201      	adds	r2, #1
 8015172:	d133      	bne.n	80151dc <_malloc_r+0x3d8>
 8015174:	600c      	str	r4, [r1, #0]
 8015176:	2307      	movs	r3, #7
 8015178:	4023      	ands	r3, r4
 801517a:	d002      	beq.n	8015182 <_malloc_r+0x37e>
 801517c:	2208      	movs	r2, #8
 801517e:	1ad3      	subs	r3, r2, r3
 8015180:	18e4      	adds	r4, r4, r3
 8015182:	9a03      	ldr	r2, [sp, #12]
 8015184:	19a6      	adds	r6, r4, r6
 8015186:	18d3      	adds	r3, r2, r3
 8015188:	4006      	ands	r6, r0
 801518a:	1b9e      	subs	r6, r3, r6
 801518c:	0031      	movs	r1, r6
 801518e:	9801      	ldr	r0, [sp, #4]
 8015190:	f000 fa62 	bl	8015658 <_sbrk_r>
 8015194:	1c43      	adds	r3, r0, #1
 8015196:	d101      	bne.n	801519c <_malloc_r+0x398>
 8015198:	0020      	movs	r0, r4
 801519a:	2600      	movs	r6, #0
 801519c:	4a23      	ldr	r2, [pc, #140]	; (801522c <_malloc_r+0x428>)
 801519e:	1b00      	subs	r0, r0, r4
 80151a0:	6813      	ldr	r3, [r2, #0]
 80151a2:	199b      	adds	r3, r3, r6
 80151a4:	6013      	str	r3, [r2, #0]
 80151a6:	2301      	movs	r3, #1
 80151a8:	4a21      	ldr	r2, [pc, #132]	; (8015230 <_malloc_r+0x42c>)
 80151aa:	1986      	adds	r6, r0, r6
 80151ac:	431e      	orrs	r6, r3
 80151ae:	6094      	str	r4, [r2, #8]
 80151b0:	6066      	str	r6, [r4, #4]
 80151b2:	4297      	cmp	r7, r2
 80151b4:	d100      	bne.n	80151b8 <_malloc_r+0x3b4>
 80151b6:	e748      	b.n	801504a <_malloc_r+0x246>
 80151b8:	9a02      	ldr	r2, [sp, #8]
 80151ba:	2a0f      	cmp	r2, #15
 80151bc:	d813      	bhi.n	80151e6 <_malloc_r+0x3e2>
 80151be:	6063      	str	r3, [r4, #4]
 80151c0:	2203      	movs	r2, #3
 80151c2:	4b1b      	ldr	r3, [pc, #108]	; (8015230 <_malloc_r+0x42c>)
 80151c4:	689b      	ldr	r3, [r3, #8]
 80151c6:	685b      	ldr	r3, [r3, #4]
 80151c8:	4393      	bics	r3, r2
 80151ca:	1b5a      	subs	r2, r3, r5
 80151cc:	42ab      	cmp	r3, r5
 80151ce:	d301      	bcc.n	80151d4 <_malloc_r+0x3d0>
 80151d0:	2a0f      	cmp	r2, #15
 80151d2:	dc1d      	bgt.n	8015210 <_malloc_r+0x40c>
 80151d4:	9801      	ldr	r0, [sp, #4]
 80151d6:	f000 f867 	bl	80152a8 <__malloc_unlock>
 80151da:	e620      	b.n	8014e1e <_malloc_r+0x1a>
 80151dc:	1ae3      	subs	r3, r4, r3
 80151de:	4a13      	ldr	r2, [pc, #76]	; (801522c <_malloc_r+0x428>)
 80151e0:	4463      	add	r3, ip
 80151e2:	6013      	str	r3, [r2, #0]
 80151e4:	e7c7      	b.n	8015176 <_malloc_r+0x372>
 80151e6:	2207      	movs	r2, #7
 80151e8:	9e02      	ldr	r6, [sp, #8]
 80151ea:	3e0c      	subs	r6, #12
 80151ec:	4396      	bics	r6, r2
 80151ee:	687a      	ldr	r2, [r7, #4]
 80151f0:	4013      	ands	r3, r2
 80151f2:	2205      	movs	r2, #5
 80151f4:	4333      	orrs	r3, r6
 80151f6:	607b      	str	r3, [r7, #4]
 80151f8:	19bb      	adds	r3, r7, r6
 80151fa:	605a      	str	r2, [r3, #4]
 80151fc:	609a      	str	r2, [r3, #8]
 80151fe:	2e0f      	cmp	r6, #15
 8015200:	d800      	bhi.n	8015204 <_malloc_r+0x400>
 8015202:	e722      	b.n	801504a <_malloc_r+0x246>
 8015204:	0039      	movs	r1, r7
 8015206:	9801      	ldr	r0, [sp, #4]
 8015208:	3108      	adds	r1, #8
 801520a:	f003 fb07 	bl	801881c <_free_r>
 801520e:	e71c      	b.n	801504a <_malloc_r+0x246>
 8015210:	2301      	movs	r3, #1
 8015212:	0018      	movs	r0, r3
 8015214:	4906      	ldr	r1, [pc, #24]	; (8015230 <_malloc_r+0x42c>)
 8015216:	4328      	orrs	r0, r5
 8015218:	688c      	ldr	r4, [r1, #8]
 801521a:	4313      	orrs	r3, r2
 801521c:	1965      	adds	r5, r4, r5
 801521e:	6060      	str	r0, [r4, #4]
 8015220:	608d      	str	r5, [r1, #8]
 8015222:	606b      	str	r3, [r5, #4]
 8015224:	e624      	b.n	8014e70 <_malloc_r+0x6c>
 8015226:	46c0      	nop			; (mov r8, r8)
 8015228:	20000a74 	.word	0x20000a74
 801522c:	20006cec 	.word	0x20006cec
 8015230:	2000066c 	.word	0x2000066c

08015234 <__ascii_mbtowc>:
 8015234:	b082      	sub	sp, #8
 8015236:	2900      	cmp	r1, #0
 8015238:	d100      	bne.n	801523c <__ascii_mbtowc+0x8>
 801523a:	a901      	add	r1, sp, #4
 801523c:	1e10      	subs	r0, r2, #0
 801523e:	d006      	beq.n	801524e <__ascii_mbtowc+0x1a>
 8015240:	2b00      	cmp	r3, #0
 8015242:	d006      	beq.n	8015252 <__ascii_mbtowc+0x1e>
 8015244:	7813      	ldrb	r3, [r2, #0]
 8015246:	600b      	str	r3, [r1, #0]
 8015248:	7810      	ldrb	r0, [r2, #0]
 801524a:	1e43      	subs	r3, r0, #1
 801524c:	4198      	sbcs	r0, r3
 801524e:	b002      	add	sp, #8
 8015250:	4770      	bx	lr
 8015252:	2002      	movs	r0, #2
 8015254:	4240      	negs	r0, r0
 8015256:	e7fa      	b.n	801524e <__ascii_mbtowc+0x1a>

08015258 <memcmp>:
 8015258:	b530      	push	{r4, r5, lr}
 801525a:	2400      	movs	r4, #0
 801525c:	42a2      	cmp	r2, r4
 801525e:	d101      	bne.n	8015264 <memcmp+0xc>
 8015260:	2000      	movs	r0, #0
 8015262:	e005      	b.n	8015270 <memcmp+0x18>
 8015264:	5d03      	ldrb	r3, [r0, r4]
 8015266:	1c65      	adds	r5, r4, #1
 8015268:	5d0c      	ldrb	r4, [r1, r4]
 801526a:	42a3      	cmp	r3, r4
 801526c:	d001      	beq.n	8015272 <memcmp+0x1a>
 801526e:	1b18      	subs	r0, r3, r4
 8015270:	bd30      	pop	{r4, r5, pc}
 8015272:	002c      	movs	r4, r5
 8015274:	e7f2      	b.n	801525c <memcmp+0x4>

08015276 <memcpy>:
 8015276:	2300      	movs	r3, #0
 8015278:	b510      	push	{r4, lr}
 801527a:	429a      	cmp	r2, r3
 801527c:	d100      	bne.n	8015280 <memcpy+0xa>
 801527e:	bd10      	pop	{r4, pc}
 8015280:	5ccc      	ldrb	r4, [r1, r3]
 8015282:	54c4      	strb	r4, [r0, r3]
 8015284:	3301      	adds	r3, #1
 8015286:	e7f8      	b.n	801527a <memcpy+0x4>

08015288 <memset>:
 8015288:	0003      	movs	r3, r0
 801528a:	1812      	adds	r2, r2, r0
 801528c:	4293      	cmp	r3, r2
 801528e:	d100      	bne.n	8015292 <memset+0xa>
 8015290:	4770      	bx	lr
 8015292:	7019      	strb	r1, [r3, #0]
 8015294:	3301      	adds	r3, #1
 8015296:	e7f9      	b.n	801528c <memset+0x4>

08015298 <__malloc_lock>:
 8015298:	b510      	push	{r4, lr}
 801529a:	4802      	ldr	r0, [pc, #8]	; (80152a4 <__malloc_lock+0xc>)
 801529c:	f003 feb2 	bl	8019004 <__retarget_lock_acquire_recursive>
 80152a0:	bd10      	pop	{r4, pc}
 80152a2:	46c0      	nop			; (mov r8, r8)
 80152a4:	200072d4 	.word	0x200072d4

080152a8 <__malloc_unlock>:
 80152a8:	b510      	push	{r4, lr}
 80152aa:	4802      	ldr	r0, [pc, #8]	; (80152b4 <__malloc_unlock+0xc>)
 80152ac:	f003 feab 	bl	8019006 <__retarget_lock_release_recursive>
 80152b0:	bd10      	pop	{r4, pc}
 80152b2:	46c0      	nop			; (mov r8, r8)
 80152b4:	200072d4 	.word	0x200072d4

080152b8 <rand>:
 80152b8:	4b09      	ldr	r3, [pc, #36]	; (80152e0 <rand+0x28>)
 80152ba:	b510      	push	{r4, lr}
 80152bc:	681c      	ldr	r4, [r3, #0]
 80152be:	4a09      	ldr	r2, [pc, #36]	; (80152e4 <rand+0x2c>)
 80152c0:	34a8      	adds	r4, #168	; 0xa8
 80152c2:	6820      	ldr	r0, [r4, #0]
 80152c4:	6861      	ldr	r1, [r4, #4]
 80152c6:	4b08      	ldr	r3, [pc, #32]	; (80152e8 <rand+0x30>)
 80152c8:	f7eb f95a 	bl	8000580 <__aeabi_lmul>
 80152cc:	2201      	movs	r2, #1
 80152ce:	2300      	movs	r3, #0
 80152d0:	1880      	adds	r0, r0, r2
 80152d2:	4159      	adcs	r1, r3
 80152d4:	6020      	str	r0, [r4, #0]
 80152d6:	6061      	str	r1, [r4, #4]
 80152d8:	0048      	lsls	r0, r1, #1
 80152da:	0840      	lsrs	r0, r0, #1
 80152dc:	bd10      	pop	{r4, pc}
 80152de:	46c0      	nop			; (mov r8, r8)
 80152e0:	200000d0 	.word	0x200000d0
 80152e4:	4c957f2d 	.word	0x4c957f2d
 80152e8:	5851f42d 	.word	0x5851f42d

080152ec <realloc>:
 80152ec:	b510      	push	{r4, lr}
 80152ee:	4b03      	ldr	r3, [pc, #12]	; (80152fc <realloc+0x10>)
 80152f0:	000a      	movs	r2, r1
 80152f2:	0001      	movs	r1, r0
 80152f4:	6818      	ldr	r0, [r3, #0]
 80152f6:	f000 f803 	bl	8015300 <_realloc_r>
 80152fa:	bd10      	pop	{r4, pc}
 80152fc:	200000d0 	.word	0x200000d0

08015300 <_realloc_r>:
 8015300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015302:	b087      	sub	sp, #28
 8015304:	9003      	str	r0, [sp, #12]
 8015306:	1e0c      	subs	r4, r1, #0
 8015308:	9205      	str	r2, [sp, #20]
 801530a:	d106      	bne.n	801531a <_realloc_r+0x1a>
 801530c:	0011      	movs	r1, r2
 801530e:	f7ff fd79 	bl	8014e04 <_malloc_r>
 8015312:	0007      	movs	r7, r0
 8015314:	0038      	movs	r0, r7
 8015316:	b007      	add	sp, #28
 8015318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801531a:	9803      	ldr	r0, [sp, #12]
 801531c:	f7ff ffbc 	bl	8015298 <__malloc_lock>
 8015320:	0023      	movs	r3, r4
 8015322:	3b08      	subs	r3, #8
 8015324:	685f      	ldr	r7, [r3, #4]
 8015326:	9302      	str	r3, [sp, #8]
 8015328:	003a      	movs	r2, r7
 801532a:	2303      	movs	r3, #3
 801532c:	9e05      	ldr	r6, [sp, #20]
 801532e:	439a      	bics	r2, r3
 8015330:	360b      	adds	r6, #11
 8015332:	9204      	str	r2, [sp, #16]
 8015334:	2e16      	cmp	r6, #22
 8015336:	d908      	bls.n	801534a <_realloc_r+0x4a>
 8015338:	3304      	adds	r3, #4
 801533a:	439e      	bics	r6, r3
 801533c:	9601      	str	r6, [sp, #4]
 801533e:	d506      	bpl.n	801534e <_realloc_r+0x4e>
 8015340:	230c      	movs	r3, #12
 8015342:	9a03      	ldr	r2, [sp, #12]
 8015344:	2700      	movs	r7, #0
 8015346:	6013      	str	r3, [r2, #0]
 8015348:	e7e4      	b.n	8015314 <_realloc_r+0x14>
 801534a:	2310      	movs	r3, #16
 801534c:	9301      	str	r3, [sp, #4]
 801534e:	9b01      	ldr	r3, [sp, #4]
 8015350:	9a05      	ldr	r2, [sp, #20]
 8015352:	4293      	cmp	r3, r2
 8015354:	d3f4      	bcc.n	8015340 <_realloc_r+0x40>
 8015356:	9b01      	ldr	r3, [sp, #4]
 8015358:	9a04      	ldr	r2, [sp, #16]
 801535a:	4293      	cmp	r3, r2
 801535c:	dc00      	bgt.n	8015360 <_realloc_r+0x60>
 801535e:	e16f      	b.n	8015640 <_realloc_r+0x340>
 8015360:	9b02      	ldr	r3, [sp, #8]
 8015362:	48bc      	ldr	r0, [pc, #752]	; (8015654 <_realloc_r+0x354>)
 8015364:	189b      	adds	r3, r3, r2
 8015366:	6882      	ldr	r2, [r0, #8]
 8015368:	4694      	mov	ip, r2
 801536a:	685a      	ldr	r2, [r3, #4]
 801536c:	459c      	cmp	ip, r3
 801536e:	d006      	beq.n	801537e <_realloc_r+0x7e>
 8015370:	2501      	movs	r5, #1
 8015372:	0011      	movs	r1, r2
 8015374:	43a9      	bics	r1, r5
 8015376:	1859      	adds	r1, r3, r1
 8015378:	6849      	ldr	r1, [r1, #4]
 801537a:	4229      	tst	r1, r5
 801537c:	d146      	bne.n	801540c <_realloc_r+0x10c>
 801537e:	2103      	movs	r1, #3
 8015380:	438a      	bics	r2, r1
 8015382:	9904      	ldr	r1, [sp, #16]
 8015384:	188e      	adds	r6, r1, r2
 8015386:	9901      	ldr	r1, [sp, #4]
 8015388:	459c      	cmp	ip, r3
 801538a:	d117      	bne.n	80153bc <_realloc_r+0xbc>
 801538c:	3110      	adds	r1, #16
 801538e:	42b1      	cmp	r1, r6
 8015390:	dc3e      	bgt.n	8015410 <_realloc_r+0x110>
 8015392:	9901      	ldr	r1, [sp, #4]
 8015394:	9b02      	ldr	r3, [sp, #8]
 8015396:	468c      	mov	ip, r1
 8015398:	4463      	add	r3, ip
 801539a:	6083      	str	r3, [r0, #8]
 801539c:	001a      	movs	r2, r3
 801539e:	1a73      	subs	r3, r6, r1
 80153a0:	2601      	movs	r6, #1
 80153a2:	4333      	orrs	r3, r6
 80153a4:	6053      	str	r3, [r2, #4]
 80153a6:	0023      	movs	r3, r4
 80153a8:	3b08      	subs	r3, #8
 80153aa:	685a      	ldr	r2, [r3, #4]
 80153ac:	9803      	ldr	r0, [sp, #12]
 80153ae:	4016      	ands	r6, r2
 80153b0:	430e      	orrs	r6, r1
 80153b2:	605e      	str	r6, [r3, #4]
 80153b4:	f7ff ff78 	bl	80152a8 <__malloc_unlock>
 80153b8:	0027      	movs	r7, r4
 80153ba:	e7ab      	b.n	8015314 <_realloc_r+0x14>
 80153bc:	42b1      	cmp	r1, r6
 80153be:	dc27      	bgt.n	8015410 <_realloc_r+0x110>
 80153c0:	68da      	ldr	r2, [r3, #12]
 80153c2:	689b      	ldr	r3, [r3, #8]
 80153c4:	60da      	str	r2, [r3, #12]
 80153c6:	6093      	str	r3, [r2, #8]
 80153c8:	9b01      	ldr	r3, [sp, #4]
 80153ca:	9a02      	ldr	r2, [sp, #8]
 80153cc:	1af4      	subs	r4, r6, r3
 80153ce:	9b02      	ldr	r3, [sp, #8]
 80153d0:	1992      	adds	r2, r2, r6
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	9304      	str	r3, [sp, #16]
 80153d6:	2301      	movs	r3, #1
 80153d8:	9804      	ldr	r0, [sp, #16]
 80153da:	4018      	ands	r0, r3
 80153dc:	2c0f      	cmp	r4, #15
 80153de:	d800      	bhi.n	80153e2 <_realloc_r+0xe2>
 80153e0:	e130      	b.n	8015644 <_realloc_r+0x344>
 80153e2:	9d01      	ldr	r5, [sp, #4]
 80153e4:	9902      	ldr	r1, [sp, #8]
 80153e6:	4328      	orrs	r0, r5
 80153e8:	1949      	adds	r1, r1, r5
 80153ea:	9d02      	ldr	r5, [sp, #8]
 80153ec:	431c      	orrs	r4, r3
 80153ee:	6068      	str	r0, [r5, #4]
 80153f0:	604c      	str	r4, [r1, #4]
 80153f2:	6850      	ldr	r0, [r2, #4]
 80153f4:	3108      	adds	r1, #8
 80153f6:	4303      	orrs	r3, r0
 80153f8:	6053      	str	r3, [r2, #4]
 80153fa:	9803      	ldr	r0, [sp, #12]
 80153fc:	f003 fa0e 	bl	801881c <_free_r>
 8015400:	9803      	ldr	r0, [sp, #12]
 8015402:	f7ff ff51 	bl	80152a8 <__malloc_unlock>
 8015406:	9f02      	ldr	r7, [sp, #8]
 8015408:	3708      	adds	r7, #8
 801540a:	e783      	b.n	8015314 <_realloc_r+0x14>
 801540c:	2200      	movs	r2, #0
 801540e:	0013      	movs	r3, r2
 8015410:	07f9      	lsls	r1, r7, #31
 8015412:	d500      	bpl.n	8015416 <_realloc_r+0x116>
 8015414:	e0c6      	b.n	80155a4 <_realloc_r+0x2a4>
 8015416:	0021      	movs	r1, r4
 8015418:	3908      	subs	r1, #8
 801541a:	680d      	ldr	r5, [r1, #0]
 801541c:	9902      	ldr	r1, [sp, #8]
 801541e:	1b4d      	subs	r5, r1, r5
 8015420:	2103      	movs	r1, #3
 8015422:	686f      	ldr	r7, [r5, #4]
 8015424:	438f      	bics	r7, r1
 8015426:	9904      	ldr	r1, [sp, #16]
 8015428:	187f      	adds	r7, r7, r1
 801542a:	2b00      	cmp	r3, #0
 801542c:	d100      	bne.n	8015430 <_realloc_r+0x130>
 801542e:	e084      	b.n	801553a <_realloc_r+0x23a>
 8015430:	19d6      	adds	r6, r2, r7
 8015432:	459c      	cmp	ip, r3
 8015434:	d148      	bne.n	80154c8 <_realloc_r+0x1c8>
 8015436:	9b01      	ldr	r3, [sp, #4]
 8015438:	3310      	adds	r3, #16
 801543a:	42b3      	cmp	r3, r6
 801543c:	dc7d      	bgt.n	801553a <_realloc_r+0x23a>
 801543e:	68aa      	ldr	r2, [r5, #8]
 8015440:	68eb      	ldr	r3, [r5, #12]
 8015442:	002f      	movs	r7, r5
 8015444:	60d3      	str	r3, [r2, #12]
 8015446:	609a      	str	r2, [r3, #8]
 8015448:	000a      	movs	r2, r1
 801544a:	3a04      	subs	r2, #4
 801544c:	3708      	adds	r7, #8
 801544e:	2a24      	cmp	r2, #36	; 0x24
 8015450:	d835      	bhi.n	80154be <_realloc_r+0x1be>
 8015452:	003b      	movs	r3, r7
 8015454:	2a13      	cmp	r2, #19
 8015456:	d908      	bls.n	801546a <_realloc_r+0x16a>
 8015458:	6823      	ldr	r3, [r4, #0]
 801545a:	60ab      	str	r3, [r5, #8]
 801545c:	6863      	ldr	r3, [r4, #4]
 801545e:	60eb      	str	r3, [r5, #12]
 8015460:	2a1b      	cmp	r2, #27
 8015462:	d81a      	bhi.n	801549a <_realloc_r+0x19a>
 8015464:	002b      	movs	r3, r5
 8015466:	3408      	adds	r4, #8
 8015468:	3310      	adds	r3, #16
 801546a:	6822      	ldr	r2, [r4, #0]
 801546c:	601a      	str	r2, [r3, #0]
 801546e:	6862      	ldr	r2, [r4, #4]
 8015470:	605a      	str	r2, [r3, #4]
 8015472:	68a2      	ldr	r2, [r4, #8]
 8015474:	609a      	str	r2, [r3, #8]
 8015476:	9b01      	ldr	r3, [sp, #4]
 8015478:	18ea      	adds	r2, r5, r3
 801547a:	4b76      	ldr	r3, [pc, #472]	; (8015654 <_realloc_r+0x354>)
 801547c:	609a      	str	r2, [r3, #8]
 801547e:	9b01      	ldr	r3, [sp, #4]
 8015480:	1af3      	subs	r3, r6, r3
 8015482:	2601      	movs	r6, #1
 8015484:	4333      	orrs	r3, r6
 8015486:	6053      	str	r3, [r2, #4]
 8015488:	686b      	ldr	r3, [r5, #4]
 801548a:	401e      	ands	r6, r3
 801548c:	9b01      	ldr	r3, [sp, #4]
 801548e:	431e      	orrs	r6, r3
 8015490:	606e      	str	r6, [r5, #4]
 8015492:	9803      	ldr	r0, [sp, #12]
 8015494:	f7ff ff08 	bl	80152a8 <__malloc_unlock>
 8015498:	e73c      	b.n	8015314 <_realloc_r+0x14>
 801549a:	68a3      	ldr	r3, [r4, #8]
 801549c:	612b      	str	r3, [r5, #16]
 801549e:	68e3      	ldr	r3, [r4, #12]
 80154a0:	616b      	str	r3, [r5, #20]
 80154a2:	2a24      	cmp	r2, #36	; 0x24
 80154a4:	d003      	beq.n	80154ae <_realloc_r+0x1ae>
 80154a6:	002b      	movs	r3, r5
 80154a8:	3410      	adds	r4, #16
 80154aa:	3318      	adds	r3, #24
 80154ac:	e7dd      	b.n	801546a <_realloc_r+0x16a>
 80154ae:	6923      	ldr	r3, [r4, #16]
 80154b0:	61ab      	str	r3, [r5, #24]
 80154b2:	002b      	movs	r3, r5
 80154b4:	6962      	ldr	r2, [r4, #20]
 80154b6:	3320      	adds	r3, #32
 80154b8:	61ea      	str	r2, [r5, #28]
 80154ba:	3418      	adds	r4, #24
 80154bc:	e7d5      	b.n	801546a <_realloc_r+0x16a>
 80154be:	0021      	movs	r1, r4
 80154c0:	0038      	movs	r0, r7
 80154c2:	f003 fdac 	bl	801901e <memmove>
 80154c6:	e7d6      	b.n	8015476 <_realloc_r+0x176>
 80154c8:	9a01      	ldr	r2, [sp, #4]
 80154ca:	42b2      	cmp	r2, r6
 80154cc:	dc35      	bgt.n	801553a <_realloc_r+0x23a>
 80154ce:	0028      	movs	r0, r5
 80154d0:	68da      	ldr	r2, [r3, #12]
 80154d2:	689b      	ldr	r3, [r3, #8]
 80154d4:	3008      	adds	r0, #8
 80154d6:	60da      	str	r2, [r3, #12]
 80154d8:	6093      	str	r3, [r2, #8]
 80154da:	68aa      	ldr	r2, [r5, #8]
 80154dc:	68eb      	ldr	r3, [r5, #12]
 80154de:	60d3      	str	r3, [r2, #12]
 80154e0:	609a      	str	r2, [r3, #8]
 80154e2:	9a04      	ldr	r2, [sp, #16]
 80154e4:	3a04      	subs	r2, #4
 80154e6:	2a24      	cmp	r2, #36	; 0x24
 80154e8:	d823      	bhi.n	8015532 <_realloc_r+0x232>
 80154ea:	2a13      	cmp	r2, #19
 80154ec:	d907      	bls.n	80154fe <_realloc_r+0x1fe>
 80154ee:	6823      	ldr	r3, [r4, #0]
 80154f0:	60ab      	str	r3, [r5, #8]
 80154f2:	6863      	ldr	r3, [r4, #4]
 80154f4:	60eb      	str	r3, [r5, #12]
 80154f6:	2a1b      	cmp	r2, #27
 80154f8:	d809      	bhi.n	801550e <_realloc_r+0x20e>
 80154fa:	3408      	adds	r4, #8
 80154fc:	3008      	adds	r0, #8
 80154fe:	6823      	ldr	r3, [r4, #0]
 8015500:	6003      	str	r3, [r0, #0]
 8015502:	6863      	ldr	r3, [r4, #4]
 8015504:	6043      	str	r3, [r0, #4]
 8015506:	68a3      	ldr	r3, [r4, #8]
 8015508:	6083      	str	r3, [r0, #8]
 801550a:	9502      	str	r5, [sp, #8]
 801550c:	e75c      	b.n	80153c8 <_realloc_r+0xc8>
 801550e:	68a3      	ldr	r3, [r4, #8]
 8015510:	612b      	str	r3, [r5, #16]
 8015512:	68e3      	ldr	r3, [r4, #12]
 8015514:	616b      	str	r3, [r5, #20]
 8015516:	2a24      	cmp	r2, #36	; 0x24
 8015518:	d003      	beq.n	8015522 <_realloc_r+0x222>
 801551a:	0028      	movs	r0, r5
 801551c:	3410      	adds	r4, #16
 801551e:	3018      	adds	r0, #24
 8015520:	e7ed      	b.n	80154fe <_realloc_r+0x1fe>
 8015522:	0028      	movs	r0, r5
 8015524:	6923      	ldr	r3, [r4, #16]
 8015526:	3020      	adds	r0, #32
 8015528:	61ab      	str	r3, [r5, #24]
 801552a:	6963      	ldr	r3, [r4, #20]
 801552c:	3418      	adds	r4, #24
 801552e:	61eb      	str	r3, [r5, #28]
 8015530:	e7e5      	b.n	80154fe <_realloc_r+0x1fe>
 8015532:	0021      	movs	r1, r4
 8015534:	f003 fd73 	bl	801901e <memmove>
 8015538:	e7e7      	b.n	801550a <_realloc_r+0x20a>
 801553a:	9b01      	ldr	r3, [sp, #4]
 801553c:	42bb      	cmp	r3, r7
 801553e:	dc31      	bgt.n	80155a4 <_realloc_r+0x2a4>
 8015540:	0028      	movs	r0, r5
 8015542:	68aa      	ldr	r2, [r5, #8]
 8015544:	68eb      	ldr	r3, [r5, #12]
 8015546:	3008      	adds	r0, #8
 8015548:	60d3      	str	r3, [r2, #12]
 801554a:	609a      	str	r2, [r3, #8]
 801554c:	9a04      	ldr	r2, [sp, #16]
 801554e:	3a04      	subs	r2, #4
 8015550:	2a24      	cmp	r2, #36	; 0x24
 8015552:	d823      	bhi.n	801559c <_realloc_r+0x29c>
 8015554:	2a13      	cmp	r2, #19
 8015556:	d907      	bls.n	8015568 <_realloc_r+0x268>
 8015558:	6823      	ldr	r3, [r4, #0]
 801555a:	60ab      	str	r3, [r5, #8]
 801555c:	6863      	ldr	r3, [r4, #4]
 801555e:	60eb      	str	r3, [r5, #12]
 8015560:	2a1b      	cmp	r2, #27
 8015562:	d809      	bhi.n	8015578 <_realloc_r+0x278>
 8015564:	3408      	adds	r4, #8
 8015566:	3008      	adds	r0, #8
 8015568:	6823      	ldr	r3, [r4, #0]
 801556a:	6003      	str	r3, [r0, #0]
 801556c:	6863      	ldr	r3, [r4, #4]
 801556e:	6043      	str	r3, [r0, #4]
 8015570:	68a3      	ldr	r3, [r4, #8]
 8015572:	6083      	str	r3, [r0, #8]
 8015574:	003e      	movs	r6, r7
 8015576:	e7c8      	b.n	801550a <_realloc_r+0x20a>
 8015578:	68a3      	ldr	r3, [r4, #8]
 801557a:	612b      	str	r3, [r5, #16]
 801557c:	68e3      	ldr	r3, [r4, #12]
 801557e:	616b      	str	r3, [r5, #20]
 8015580:	2a24      	cmp	r2, #36	; 0x24
 8015582:	d003      	beq.n	801558c <_realloc_r+0x28c>
 8015584:	0028      	movs	r0, r5
 8015586:	3410      	adds	r4, #16
 8015588:	3018      	adds	r0, #24
 801558a:	e7ed      	b.n	8015568 <_realloc_r+0x268>
 801558c:	0028      	movs	r0, r5
 801558e:	6923      	ldr	r3, [r4, #16]
 8015590:	3020      	adds	r0, #32
 8015592:	61ab      	str	r3, [r5, #24]
 8015594:	6963      	ldr	r3, [r4, #20]
 8015596:	3418      	adds	r4, #24
 8015598:	61eb      	str	r3, [r5, #28]
 801559a:	e7e5      	b.n	8015568 <_realloc_r+0x268>
 801559c:	0021      	movs	r1, r4
 801559e:	f003 fd3e 	bl	801901e <memmove>
 80155a2:	e7e7      	b.n	8015574 <_realloc_r+0x274>
 80155a4:	9905      	ldr	r1, [sp, #20]
 80155a6:	9803      	ldr	r0, [sp, #12]
 80155a8:	f7ff fc2c 	bl	8014e04 <_malloc_r>
 80155ac:	1e07      	subs	r7, r0, #0
 80155ae:	d100      	bne.n	80155b2 <_realloc_r+0x2b2>
 80155b0:	e76f      	b.n	8015492 <_realloc_r+0x192>
 80155b2:	0023      	movs	r3, r4
 80155b4:	2201      	movs	r2, #1
 80155b6:	3b08      	subs	r3, #8
 80155b8:	685b      	ldr	r3, [r3, #4]
 80155ba:	4393      	bics	r3, r2
 80155bc:	9a02      	ldr	r2, [sp, #8]
 80155be:	18d3      	adds	r3, r2, r3
 80155c0:	0002      	movs	r2, r0
 80155c2:	3a08      	subs	r2, #8
 80155c4:	4293      	cmp	r3, r2
 80155c6:	d105      	bne.n	80155d4 <_realloc_r+0x2d4>
 80155c8:	685e      	ldr	r6, [r3, #4]
 80155ca:	2303      	movs	r3, #3
 80155cc:	439e      	bics	r6, r3
 80155ce:	9b04      	ldr	r3, [sp, #16]
 80155d0:	18f6      	adds	r6, r6, r3
 80155d2:	e6f9      	b.n	80153c8 <_realloc_r+0xc8>
 80155d4:	9a04      	ldr	r2, [sp, #16]
 80155d6:	3a04      	subs	r2, #4
 80155d8:	2a24      	cmp	r2, #36	; 0x24
 80155da:	d82d      	bhi.n	8015638 <_realloc_r+0x338>
 80155dc:	2a13      	cmp	r2, #19
 80155de:	d928      	bls.n	8015632 <_realloc_r+0x332>
 80155e0:	6823      	ldr	r3, [r4, #0]
 80155e2:	6003      	str	r3, [r0, #0]
 80155e4:	6863      	ldr	r3, [r4, #4]
 80155e6:	6043      	str	r3, [r0, #4]
 80155e8:	2a1b      	cmp	r2, #27
 80155ea:	d80e      	bhi.n	801560a <_realloc_r+0x30a>
 80155ec:	0022      	movs	r2, r4
 80155ee:	0003      	movs	r3, r0
 80155f0:	3208      	adds	r2, #8
 80155f2:	3308      	adds	r3, #8
 80155f4:	6811      	ldr	r1, [r2, #0]
 80155f6:	6019      	str	r1, [r3, #0]
 80155f8:	6851      	ldr	r1, [r2, #4]
 80155fa:	6059      	str	r1, [r3, #4]
 80155fc:	6892      	ldr	r2, [r2, #8]
 80155fe:	609a      	str	r2, [r3, #8]
 8015600:	0021      	movs	r1, r4
 8015602:	9803      	ldr	r0, [sp, #12]
 8015604:	f003 f90a 	bl	801881c <_free_r>
 8015608:	e743      	b.n	8015492 <_realloc_r+0x192>
 801560a:	68a3      	ldr	r3, [r4, #8]
 801560c:	6083      	str	r3, [r0, #8]
 801560e:	68e3      	ldr	r3, [r4, #12]
 8015610:	60c3      	str	r3, [r0, #12]
 8015612:	2a24      	cmp	r2, #36	; 0x24
 8015614:	d004      	beq.n	8015620 <_realloc_r+0x320>
 8015616:	0022      	movs	r2, r4
 8015618:	0003      	movs	r3, r0
 801561a:	3210      	adds	r2, #16
 801561c:	3310      	adds	r3, #16
 801561e:	e7e9      	b.n	80155f4 <_realloc_r+0x2f4>
 8015620:	6923      	ldr	r3, [r4, #16]
 8015622:	0022      	movs	r2, r4
 8015624:	6103      	str	r3, [r0, #16]
 8015626:	0003      	movs	r3, r0
 8015628:	6961      	ldr	r1, [r4, #20]
 801562a:	3218      	adds	r2, #24
 801562c:	3318      	adds	r3, #24
 801562e:	6141      	str	r1, [r0, #20]
 8015630:	e7e0      	b.n	80155f4 <_realloc_r+0x2f4>
 8015632:	0003      	movs	r3, r0
 8015634:	0022      	movs	r2, r4
 8015636:	e7dd      	b.n	80155f4 <_realloc_r+0x2f4>
 8015638:	0021      	movs	r1, r4
 801563a:	f003 fcf0 	bl	801901e <memmove>
 801563e:	e7df      	b.n	8015600 <_realloc_r+0x300>
 8015640:	9e04      	ldr	r6, [sp, #16]
 8015642:	e6c1      	b.n	80153c8 <_realloc_r+0xc8>
 8015644:	9902      	ldr	r1, [sp, #8]
 8015646:	4306      	orrs	r6, r0
 8015648:	604e      	str	r6, [r1, #4]
 801564a:	6851      	ldr	r1, [r2, #4]
 801564c:	430b      	orrs	r3, r1
 801564e:	6053      	str	r3, [r2, #4]
 8015650:	e6d6      	b.n	8015400 <_realloc_r+0x100>
 8015652:	46c0      	nop			; (mov r8, r8)
 8015654:	2000066c 	.word	0x2000066c

08015658 <_sbrk_r>:
 8015658:	2300      	movs	r3, #0
 801565a:	b570      	push	{r4, r5, r6, lr}
 801565c:	4c06      	ldr	r4, [pc, #24]	; (8015678 <_sbrk_r+0x20>)
 801565e:	0005      	movs	r5, r0
 8015660:	0008      	movs	r0, r1
 8015662:	6023      	str	r3, [r4, #0]
 8015664:	f004 f9ec 	bl	8019a40 <_sbrk>
 8015668:	1c43      	adds	r3, r0, #1
 801566a:	d103      	bne.n	8015674 <_sbrk_r+0x1c>
 801566c:	6823      	ldr	r3, [r4, #0]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d000      	beq.n	8015674 <_sbrk_r+0x1c>
 8015672:	602b      	str	r3, [r5, #0]
 8015674:	bd70      	pop	{r4, r5, r6, pc}
 8015676:	46c0      	nop			; (mov r8, r8)
 8015678:	200072dc 	.word	0x200072dc

0801567c <sprintf>:
 801567c:	b40e      	push	{r1, r2, r3}
 801567e:	b500      	push	{lr}
 8015680:	490b      	ldr	r1, [pc, #44]	; (80156b0 <sprintf+0x34>)
 8015682:	b09c      	sub	sp, #112	; 0x70
 8015684:	ab1d      	add	r3, sp, #116	; 0x74
 8015686:	9002      	str	r0, [sp, #8]
 8015688:	9006      	str	r0, [sp, #24]
 801568a:	9107      	str	r1, [sp, #28]
 801568c:	9104      	str	r1, [sp, #16]
 801568e:	4809      	ldr	r0, [pc, #36]	; (80156b4 <sprintf+0x38>)
 8015690:	4909      	ldr	r1, [pc, #36]	; (80156b8 <sprintf+0x3c>)
 8015692:	cb04      	ldmia	r3!, {r2}
 8015694:	9105      	str	r1, [sp, #20]
 8015696:	6800      	ldr	r0, [r0, #0]
 8015698:	a902      	add	r1, sp, #8
 801569a:	9301      	str	r3, [sp, #4]
 801569c:	f000 ff78 	bl	8016590 <_svfprintf_r>
 80156a0:	2300      	movs	r3, #0
 80156a2:	9a02      	ldr	r2, [sp, #8]
 80156a4:	7013      	strb	r3, [r2, #0]
 80156a6:	b01c      	add	sp, #112	; 0x70
 80156a8:	bc08      	pop	{r3}
 80156aa:	b003      	add	sp, #12
 80156ac:	4718      	bx	r3
 80156ae:	46c0      	nop			; (mov r8, r8)
 80156b0:	7fffffff 	.word	0x7fffffff
 80156b4:	200000d0 	.word	0x200000d0
 80156b8:	ffff0208 	.word	0xffff0208

080156bc <strcat>:
 80156bc:	0002      	movs	r2, r0
 80156be:	b510      	push	{r4, lr}
 80156c0:	7813      	ldrb	r3, [r2, #0]
 80156c2:	1c54      	adds	r4, r2, #1
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d105      	bne.n	80156d4 <strcat+0x18>
 80156c8:	5ccc      	ldrb	r4, [r1, r3]
 80156ca:	54d4      	strb	r4, [r2, r3]
 80156cc:	3301      	adds	r3, #1
 80156ce:	2c00      	cmp	r4, #0
 80156d0:	d1fa      	bne.n	80156c8 <strcat+0xc>
 80156d2:	bd10      	pop	{r4, pc}
 80156d4:	0022      	movs	r2, r4
 80156d6:	e7f3      	b.n	80156c0 <strcat+0x4>

080156d8 <strchr>:
 80156d8:	b2c9      	uxtb	r1, r1
 80156da:	7803      	ldrb	r3, [r0, #0]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d004      	beq.n	80156ea <strchr+0x12>
 80156e0:	428b      	cmp	r3, r1
 80156e2:	d100      	bne.n	80156e6 <strchr+0xe>
 80156e4:	4770      	bx	lr
 80156e6:	3001      	adds	r0, #1
 80156e8:	e7f7      	b.n	80156da <strchr+0x2>
 80156ea:	424b      	negs	r3, r1
 80156ec:	4159      	adcs	r1, r3
 80156ee:	4249      	negs	r1, r1
 80156f0:	4008      	ands	r0, r1
 80156f2:	e7f7      	b.n	80156e4 <strchr+0xc>

080156f4 <strcpy>:
 80156f4:	0003      	movs	r3, r0
 80156f6:	780a      	ldrb	r2, [r1, #0]
 80156f8:	3101      	adds	r1, #1
 80156fa:	701a      	strb	r2, [r3, #0]
 80156fc:	3301      	adds	r3, #1
 80156fe:	2a00      	cmp	r2, #0
 8015700:	d1f9      	bne.n	80156f6 <strcpy+0x2>
 8015702:	4770      	bx	lr

08015704 <strncmp>:
 8015704:	2300      	movs	r3, #0
 8015706:	b530      	push	{r4, r5, lr}
 8015708:	429a      	cmp	r2, r3
 801570a:	d00a      	beq.n	8015722 <strncmp+0x1e>
 801570c:	3a01      	subs	r2, #1
 801570e:	5cc4      	ldrb	r4, [r0, r3]
 8015710:	5ccd      	ldrb	r5, [r1, r3]
 8015712:	42ac      	cmp	r4, r5
 8015714:	d104      	bne.n	8015720 <strncmp+0x1c>
 8015716:	4293      	cmp	r3, r2
 8015718:	d002      	beq.n	8015720 <strncmp+0x1c>
 801571a:	3301      	adds	r3, #1
 801571c:	2c00      	cmp	r4, #0
 801571e:	d1f6      	bne.n	801570e <strncmp+0xa>
 8015720:	1b63      	subs	r3, r4, r5
 8015722:	0018      	movs	r0, r3
 8015724:	bd30      	pop	{r4, r5, pc}

08015726 <strncpy>:
 8015726:	b530      	push	{r4, r5, lr}
 8015728:	0005      	movs	r5, r0
 801572a:	2a00      	cmp	r2, #0
 801572c:	d100      	bne.n	8015730 <strncpy+0xa>
 801572e:	bd30      	pop	{r4, r5, pc}
 8015730:	780c      	ldrb	r4, [r1, #0]
 8015732:	3a01      	subs	r2, #1
 8015734:	1c6b      	adds	r3, r5, #1
 8015736:	702c      	strb	r4, [r5, #0]
 8015738:	3101      	adds	r1, #1
 801573a:	2c00      	cmp	r4, #0
 801573c:	d105      	bne.n	801574a <strncpy+0x24>
 801573e:	189a      	adds	r2, r3, r2
 8015740:	429a      	cmp	r2, r3
 8015742:	d0f4      	beq.n	801572e <strncpy+0x8>
 8015744:	701c      	strb	r4, [r3, #0]
 8015746:	3301      	adds	r3, #1
 8015748:	e7fa      	b.n	8015740 <strncpy+0x1a>
 801574a:	001d      	movs	r5, r3
 801574c:	e7ed      	b.n	801572a <strncpy+0x4>
	...

08015750 <sulp>:
 8015750:	b570      	push	{r4, r5, r6, lr}
 8015752:	0016      	movs	r6, r2
 8015754:	000d      	movs	r5, r1
 8015756:	f003 ff17 	bl	8019588 <__ulp>
 801575a:	2e00      	cmp	r6, #0
 801575c:	d00d      	beq.n	801577a <sulp+0x2a>
 801575e:	236b      	movs	r3, #107	; 0x6b
 8015760:	006a      	lsls	r2, r5, #1
 8015762:	0d52      	lsrs	r2, r2, #21
 8015764:	1a9b      	subs	r3, r3, r2
 8015766:	2b00      	cmp	r3, #0
 8015768:	dd07      	ble.n	801577a <sulp+0x2a>
 801576a:	2400      	movs	r4, #0
 801576c:	4a03      	ldr	r2, [pc, #12]	; (801577c <sulp+0x2c>)
 801576e:	051b      	lsls	r3, r3, #20
 8015770:	189d      	adds	r5, r3, r2
 8015772:	002b      	movs	r3, r5
 8015774:	0022      	movs	r2, r4
 8015776:	f7ec fe5d 	bl	8002434 <__aeabi_dmul>
 801577a:	bd70      	pop	{r4, r5, r6, pc}
 801577c:	3ff00000 	.word	0x3ff00000

08015780 <_strtod_l>:
 8015780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015782:	b0a7      	sub	sp, #156	; 0x9c
 8015784:	9307      	str	r3, [sp, #28]
 8015786:	2300      	movs	r3, #0
 8015788:	9004      	str	r0, [sp, #16]
 801578a:	9807      	ldr	r0, [sp, #28]
 801578c:	9322      	str	r3, [sp, #136]	; 0x88
 801578e:	9106      	str	r1, [sp, #24]
 8015790:	921d      	str	r2, [sp, #116]	; 0x74
 8015792:	f003 fc28 	bl	8018fe6 <__localeconv_l>
 8015796:	0005      	movs	r5, r0
 8015798:	6800      	ldr	r0, [r0, #0]
 801579a:	f7ea fcbd 	bl	8000118 <strlen>
 801579e:	2600      	movs	r6, #0
 80157a0:	2700      	movs	r7, #0
 80157a2:	9b06      	ldr	r3, [sp, #24]
 80157a4:	9005      	str	r0, [sp, #20]
 80157a6:	9321      	str	r3, [sp, #132]	; 0x84
 80157a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157aa:	781a      	ldrb	r2, [r3, #0]
 80157ac:	2a0d      	cmp	r2, #13
 80157ae:	d839      	bhi.n	8015824 <_strtod_l+0xa4>
 80157b0:	2a09      	cmp	r2, #9
 80157b2:	d23d      	bcs.n	8015830 <_strtod_l+0xb0>
 80157b4:	2a00      	cmp	r2, #0
 80157b6:	d044      	beq.n	8015842 <_strtod_l+0xc2>
 80157b8:	2300      	movs	r3, #0
 80157ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80157bc:	2200      	movs	r2, #0
 80157be:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80157c0:	920c      	str	r2, [sp, #48]	; 0x30
 80157c2:	7823      	ldrb	r3, [r4, #0]
 80157c4:	2b30      	cmp	r3, #48	; 0x30
 80157c6:	d000      	beq.n	80157ca <_strtod_l+0x4a>
 80157c8:	e07e      	b.n	80158c8 <_strtod_l+0x148>
 80157ca:	7863      	ldrb	r3, [r4, #1]
 80157cc:	2b58      	cmp	r3, #88	; 0x58
 80157ce:	d002      	beq.n	80157d6 <_strtod_l+0x56>
 80157d0:	2b78      	cmp	r3, #120	; 0x78
 80157d2:	d000      	beq.n	80157d6 <_strtod_l+0x56>
 80157d4:	e06e      	b.n	80158b4 <_strtod_l+0x134>
 80157d6:	9b07      	ldr	r3, [sp, #28]
 80157d8:	4a96      	ldr	r2, [pc, #600]	; (8015a34 <_strtod_l+0x2b4>)
 80157da:	9302      	str	r3, [sp, #8]
 80157dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80157de:	a921      	add	r1, sp, #132	; 0x84
 80157e0:	9301      	str	r3, [sp, #4]
 80157e2:	ab22      	add	r3, sp, #136	; 0x88
 80157e4:	9300      	str	r3, [sp, #0]
 80157e6:	9804      	ldr	r0, [sp, #16]
 80157e8:	ab23      	add	r3, sp, #140	; 0x8c
 80157ea:	f003 f914 	bl	8018a16 <__gethex>
 80157ee:	2507      	movs	r5, #7
 80157f0:	9005      	str	r0, [sp, #20]
 80157f2:	4005      	ands	r5, r0
 80157f4:	d005      	beq.n	8015802 <_strtod_l+0x82>
 80157f6:	2d06      	cmp	r5, #6
 80157f8:	d12f      	bne.n	801585a <_strtod_l+0xda>
 80157fa:	2300      	movs	r3, #0
 80157fc:	3401      	adds	r4, #1
 80157fe:	9421      	str	r4, [sp, #132]	; 0x84
 8015800:	9313      	str	r3, [sp, #76]	; 0x4c
 8015802:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015804:	2b00      	cmp	r3, #0
 8015806:	d002      	beq.n	801580e <_strtod_l+0x8e>
 8015808:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801580a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801580c:	601a      	str	r2, [r3, #0]
 801580e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015810:	2b00      	cmp	r3, #0
 8015812:	d01d      	beq.n	8015850 <_strtod_l+0xd0>
 8015814:	2380      	movs	r3, #128	; 0x80
 8015816:	0032      	movs	r2, r6
 8015818:	061b      	lsls	r3, r3, #24
 801581a:	18fb      	adds	r3, r7, r3
 801581c:	0010      	movs	r0, r2
 801581e:	0019      	movs	r1, r3
 8015820:	b027      	add	sp, #156	; 0x9c
 8015822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015824:	2a2b      	cmp	r2, #43	; 0x2b
 8015826:	d016      	beq.n	8015856 <_strtod_l+0xd6>
 8015828:	2a2d      	cmp	r2, #45	; 0x2d
 801582a:	d003      	beq.n	8015834 <_strtod_l+0xb4>
 801582c:	2a20      	cmp	r2, #32
 801582e:	d1c3      	bne.n	80157b8 <_strtod_l+0x38>
 8015830:	3301      	adds	r3, #1
 8015832:	e7b8      	b.n	80157a6 <_strtod_l+0x26>
 8015834:	2201      	movs	r2, #1
 8015836:	9213      	str	r2, [sp, #76]	; 0x4c
 8015838:	1c5a      	adds	r2, r3, #1
 801583a:	9221      	str	r2, [sp, #132]	; 0x84
 801583c:	785b      	ldrb	r3, [r3, #1]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d1bc      	bne.n	80157bc <_strtod_l+0x3c>
 8015842:	9b06      	ldr	r3, [sp, #24]
 8015844:	9321      	str	r3, [sp, #132]	; 0x84
 8015846:	2300      	movs	r3, #0
 8015848:	9313      	str	r3, [sp, #76]	; 0x4c
 801584a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801584c:	2b00      	cmp	r3, #0
 801584e:	d1db      	bne.n	8015808 <_strtod_l+0x88>
 8015850:	0032      	movs	r2, r6
 8015852:	003b      	movs	r3, r7
 8015854:	e7e2      	b.n	801581c <_strtod_l+0x9c>
 8015856:	2200      	movs	r2, #0
 8015858:	e7ed      	b.n	8015836 <_strtod_l+0xb6>
 801585a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801585c:	2a00      	cmp	r2, #0
 801585e:	d007      	beq.n	8015870 <_strtod_l+0xf0>
 8015860:	2135      	movs	r1, #53	; 0x35
 8015862:	a824      	add	r0, sp, #144	; 0x90
 8015864:	f003 ff7d 	bl	8019762 <__copybits>
 8015868:	9922      	ldr	r1, [sp, #136]	; 0x88
 801586a:	9804      	ldr	r0, [sp, #16]
 801586c:	f003 fc12 	bl	8019094 <_Bfree>
 8015870:	1e68      	subs	r0, r5, #1
 8015872:	2804      	cmp	r0, #4
 8015874:	d806      	bhi.n	8015884 <_strtod_l+0x104>
 8015876:	f7ea fc57 	bl	8000128 <__gnu_thumb1_case_uqi>
 801587a:	030c      	.short	0x030c
 801587c:	1917      	.short	0x1917
 801587e:	0c          	.byte	0x0c
 801587f:	00          	.byte	0x00
 8015880:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015882:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8015884:	9b05      	ldr	r3, [sp, #20]
 8015886:	071b      	lsls	r3, r3, #28
 8015888:	d5bb      	bpl.n	8015802 <_strtod_l+0x82>
 801588a:	2380      	movs	r3, #128	; 0x80
 801588c:	061b      	lsls	r3, r3, #24
 801588e:	431f      	orrs	r7, r3
 8015890:	e7b7      	b.n	8015802 <_strtod_l+0x82>
 8015892:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015894:	4a68      	ldr	r2, [pc, #416]	; (8015a38 <_strtod_l+0x2b8>)
 8015896:	4969      	ldr	r1, [pc, #420]	; (8015a3c <_strtod_l+0x2bc>)
 8015898:	401a      	ands	r2, r3
 801589a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801589c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801589e:	185b      	adds	r3, r3, r1
 80158a0:	051b      	lsls	r3, r3, #20
 80158a2:	431a      	orrs	r2, r3
 80158a4:	0017      	movs	r7, r2
 80158a6:	e7ed      	b.n	8015884 <_strtod_l+0x104>
 80158a8:	4f65      	ldr	r7, [pc, #404]	; (8015a40 <_strtod_l+0x2c0>)
 80158aa:	e7eb      	b.n	8015884 <_strtod_l+0x104>
 80158ac:	2601      	movs	r6, #1
 80158ae:	4f65      	ldr	r7, [pc, #404]	; (8015a44 <_strtod_l+0x2c4>)
 80158b0:	4276      	negs	r6, r6
 80158b2:	e7e7      	b.n	8015884 <_strtod_l+0x104>
 80158b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158b6:	1c5a      	adds	r2, r3, #1
 80158b8:	9221      	str	r2, [sp, #132]	; 0x84
 80158ba:	785b      	ldrb	r3, [r3, #1]
 80158bc:	2b30      	cmp	r3, #48	; 0x30
 80158be:	d0f9      	beq.n	80158b4 <_strtod_l+0x134>
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d09e      	beq.n	8015802 <_strtod_l+0x82>
 80158c4:	2301      	movs	r3, #1
 80158c6:	930c      	str	r3, [sp, #48]	; 0x30
 80158c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158ca:	220a      	movs	r2, #10
 80158cc:	9312      	str	r3, [sp, #72]	; 0x48
 80158ce:	2300      	movs	r3, #0
 80158d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80158d2:	9308      	str	r3, [sp, #32]
 80158d4:	930a      	str	r3, [sp, #40]	; 0x28
 80158d6:	9821      	ldr	r0, [sp, #132]	; 0x84
 80158d8:	7804      	ldrb	r4, [r0, #0]
 80158da:	0023      	movs	r3, r4
 80158dc:	3b30      	subs	r3, #48	; 0x30
 80158de:	b2d9      	uxtb	r1, r3
 80158e0:	2909      	cmp	r1, #9
 80158e2:	d934      	bls.n	801594e <_strtod_l+0x1ce>
 80158e4:	9a05      	ldr	r2, [sp, #20]
 80158e6:	6829      	ldr	r1, [r5, #0]
 80158e8:	f7ff ff0c 	bl	8015704 <strncmp>
 80158ec:	2800      	cmp	r0, #0
 80158ee:	d040      	beq.n	8015972 <_strtod_l+0x1f2>
 80158f0:	2000      	movs	r0, #0
 80158f2:	0023      	movs	r3, r4
 80158f4:	4684      	mov	ip, r0
 80158f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158f8:	9007      	str	r0, [sp, #28]
 80158fa:	9205      	str	r2, [sp, #20]
 80158fc:	2220      	movs	r2, #32
 80158fe:	0019      	movs	r1, r3
 8015900:	4391      	bics	r1, r2
 8015902:	000a      	movs	r2, r1
 8015904:	2100      	movs	r1, #0
 8015906:	2a45      	cmp	r2, #69	; 0x45
 8015908:	d000      	beq.n	801590c <_strtod_l+0x18c>
 801590a:	e0bf      	b.n	8015a8c <_strtod_l+0x30c>
 801590c:	9b05      	ldr	r3, [sp, #20]
 801590e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015910:	4303      	orrs	r3, r0
 8015912:	4313      	orrs	r3, r2
 8015914:	428b      	cmp	r3, r1
 8015916:	d094      	beq.n	8015842 <_strtod_l+0xc2>
 8015918:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801591a:	9306      	str	r3, [sp, #24]
 801591c:	3301      	adds	r3, #1
 801591e:	9321      	str	r3, [sp, #132]	; 0x84
 8015920:	9b06      	ldr	r3, [sp, #24]
 8015922:	785b      	ldrb	r3, [r3, #1]
 8015924:	2b2b      	cmp	r3, #43	; 0x2b
 8015926:	d100      	bne.n	801592a <_strtod_l+0x1aa>
 8015928:	e082      	b.n	8015a30 <_strtod_l+0x2b0>
 801592a:	000c      	movs	r4, r1
 801592c:	2b2d      	cmp	r3, #45	; 0x2d
 801592e:	d105      	bne.n	801593c <_strtod_l+0x1bc>
 8015930:	2401      	movs	r4, #1
 8015932:	9b06      	ldr	r3, [sp, #24]
 8015934:	3302      	adds	r3, #2
 8015936:	9321      	str	r3, [sp, #132]	; 0x84
 8015938:	9b06      	ldr	r3, [sp, #24]
 801593a:	789b      	ldrb	r3, [r3, #2]
 801593c:	001a      	movs	r2, r3
 801593e:	3a30      	subs	r2, #48	; 0x30
 8015940:	2a09      	cmp	r2, #9
 8015942:	d800      	bhi.n	8015946 <_strtod_l+0x1c6>
 8015944:	e084      	b.n	8015a50 <_strtod_l+0x2d0>
 8015946:	9a06      	ldr	r2, [sp, #24]
 8015948:	2100      	movs	r1, #0
 801594a:	9221      	str	r2, [sp, #132]	; 0x84
 801594c:	e09e      	b.n	8015a8c <_strtod_l+0x30c>
 801594e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015950:	2908      	cmp	r1, #8
 8015952:	dc09      	bgt.n	8015968 <_strtod_l+0x1e8>
 8015954:	9908      	ldr	r1, [sp, #32]
 8015956:	4351      	muls	r1, r2
 8015958:	18cb      	adds	r3, r1, r3
 801595a:	9308      	str	r3, [sp, #32]
 801595c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801595e:	3001      	adds	r0, #1
 8015960:	3301      	adds	r3, #1
 8015962:	930a      	str	r3, [sp, #40]	; 0x28
 8015964:	9021      	str	r0, [sp, #132]	; 0x84
 8015966:	e7b6      	b.n	80158d6 <_strtod_l+0x156>
 8015968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801596a:	4351      	muls	r1, r2
 801596c:	18cb      	adds	r3, r1, r3
 801596e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015970:	e7f4      	b.n	801595c <_strtod_l+0x1dc>
 8015972:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015974:	9b05      	ldr	r3, [sp, #20]
 8015976:	4694      	mov	ip, r2
 8015978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801597a:	4463      	add	r3, ip
 801597c:	9321      	str	r3, [sp, #132]	; 0x84
 801597e:	781b      	ldrb	r3, [r3, #0]
 8015980:	2a00      	cmp	r2, #0
 8015982:	d036      	beq.n	80159f2 <_strtod_l+0x272>
 8015984:	4684      	mov	ip, r0
 8015986:	9205      	str	r2, [sp, #20]
 8015988:	001a      	movs	r2, r3
 801598a:	3a30      	subs	r2, #48	; 0x30
 801598c:	2a09      	cmp	r2, #9
 801598e:	d912      	bls.n	80159b6 <_strtod_l+0x236>
 8015990:	2201      	movs	r2, #1
 8015992:	9207      	str	r2, [sp, #28]
 8015994:	e7b2      	b.n	80158fc <_strtod_l+0x17c>
 8015996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015998:	3001      	adds	r0, #1
 801599a:	1c5a      	adds	r2, r3, #1
 801599c:	9221      	str	r2, [sp, #132]	; 0x84
 801599e:	785b      	ldrb	r3, [r3, #1]
 80159a0:	2b30      	cmp	r3, #48	; 0x30
 80159a2:	d0f8      	beq.n	8015996 <_strtod_l+0x216>
 80159a4:	001a      	movs	r2, r3
 80159a6:	3a31      	subs	r2, #49	; 0x31
 80159a8:	2a08      	cmp	r2, #8
 80159aa:	d83c      	bhi.n	8015a26 <_strtod_l+0x2a6>
 80159ac:	4684      	mov	ip, r0
 80159ae:	2000      	movs	r0, #0
 80159b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80159b2:	9005      	str	r0, [sp, #20]
 80159b4:	9212      	str	r2, [sp, #72]	; 0x48
 80159b6:	3b30      	subs	r3, #48	; 0x30
 80159b8:	1c42      	adds	r2, r0, #1
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d013      	beq.n	80159e6 <_strtod_l+0x266>
 80159be:	210a      	movs	r1, #10
 80159c0:	4494      	add	ip, r2
 80159c2:	9a05      	ldr	r2, [sp, #20]
 80159c4:	1885      	adds	r5, r0, r2
 80159c6:	42aa      	cmp	r2, r5
 80159c8:	d115      	bne.n	80159f6 <_strtod_l+0x276>
 80159ca:	9905      	ldr	r1, [sp, #20]
 80159cc:	9a05      	ldr	r2, [sp, #20]
 80159ce:	3101      	adds	r1, #1
 80159d0:	1809      	adds	r1, r1, r0
 80159d2:	1812      	adds	r2, r2, r0
 80159d4:	9105      	str	r1, [sp, #20]
 80159d6:	2a08      	cmp	r2, #8
 80159d8:	dc1b      	bgt.n	8015a12 <_strtod_l+0x292>
 80159da:	220a      	movs	r2, #10
 80159dc:	9908      	ldr	r1, [sp, #32]
 80159de:	434a      	muls	r2, r1
 80159e0:	189b      	adds	r3, r3, r2
 80159e2:	2200      	movs	r2, #0
 80159e4:	9308      	str	r3, [sp, #32]
 80159e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159e8:	0010      	movs	r0, r2
 80159ea:	1c59      	adds	r1, r3, #1
 80159ec:	9121      	str	r1, [sp, #132]	; 0x84
 80159ee:	785b      	ldrb	r3, [r3, #1]
 80159f0:	e7ca      	b.n	8015988 <_strtod_l+0x208>
 80159f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159f4:	e7d4      	b.n	80159a0 <_strtod_l+0x220>
 80159f6:	1c54      	adds	r4, r2, #1
 80159f8:	2a08      	cmp	r2, #8
 80159fa:	dc04      	bgt.n	8015a06 <_strtod_l+0x286>
 80159fc:	9a08      	ldr	r2, [sp, #32]
 80159fe:	434a      	muls	r2, r1
 8015a00:	9208      	str	r2, [sp, #32]
 8015a02:	0022      	movs	r2, r4
 8015a04:	e7df      	b.n	80159c6 <_strtod_l+0x246>
 8015a06:	2c10      	cmp	r4, #16
 8015a08:	dcfb      	bgt.n	8015a02 <_strtod_l+0x282>
 8015a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015a0c:	434a      	muls	r2, r1
 8015a0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8015a10:	e7f7      	b.n	8015a02 <_strtod_l+0x282>
 8015a12:	9905      	ldr	r1, [sp, #20]
 8015a14:	2200      	movs	r2, #0
 8015a16:	2910      	cmp	r1, #16
 8015a18:	dce5      	bgt.n	80159e6 <_strtod_l+0x266>
 8015a1a:	210a      	movs	r1, #10
 8015a1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015a1e:	4341      	muls	r1, r0
 8015a20:	185b      	adds	r3, r3, r1
 8015a22:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a24:	e7df      	b.n	80159e6 <_strtod_l+0x266>
 8015a26:	2200      	movs	r2, #0
 8015a28:	4694      	mov	ip, r2
 8015a2a:	9205      	str	r2, [sp, #20]
 8015a2c:	3201      	adds	r2, #1
 8015a2e:	e7b0      	b.n	8015992 <_strtod_l+0x212>
 8015a30:	000c      	movs	r4, r1
 8015a32:	e77e      	b.n	8015932 <_strtod_l+0x1b2>
 8015a34:	0801d1d4 	.word	0x0801d1d4
 8015a38:	ffefffff 	.word	0xffefffff
 8015a3c:	00000433 	.word	0x00000433
 8015a40:	7ff00000 	.word	0x7ff00000
 8015a44:	7fffffff 	.word	0x7fffffff
 8015a48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a4a:	1c5a      	adds	r2, r3, #1
 8015a4c:	9221      	str	r2, [sp, #132]	; 0x84
 8015a4e:	785b      	ldrb	r3, [r3, #1]
 8015a50:	2b30      	cmp	r3, #48	; 0x30
 8015a52:	d0f9      	beq.n	8015a48 <_strtod_l+0x2c8>
 8015a54:	001a      	movs	r2, r3
 8015a56:	3a31      	subs	r2, #49	; 0x31
 8015a58:	2100      	movs	r1, #0
 8015a5a:	2a08      	cmp	r2, #8
 8015a5c:	d816      	bhi.n	8015a8c <_strtod_l+0x30c>
 8015a5e:	3b30      	subs	r3, #48	; 0x30
 8015a60:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8015a62:	930e      	str	r3, [sp, #56]	; 0x38
 8015a64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a66:	1c59      	adds	r1, r3, #1
 8015a68:	9121      	str	r1, [sp, #132]	; 0x84
 8015a6a:	785b      	ldrb	r3, [r3, #1]
 8015a6c:	001a      	movs	r2, r3
 8015a6e:	3a30      	subs	r2, #48	; 0x30
 8015a70:	2a09      	cmp	r2, #9
 8015a72:	d932      	bls.n	8015ada <_strtod_l+0x35a>
 8015a74:	1b4a      	subs	r2, r1, r5
 8015a76:	4dad      	ldr	r5, [pc, #692]	; (8015d2c <_strtod_l+0x5ac>)
 8015a78:	0029      	movs	r1, r5
 8015a7a:	2a08      	cmp	r2, #8
 8015a7c:	dc03      	bgt.n	8015a86 <_strtod_l+0x306>
 8015a7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015a80:	42a9      	cmp	r1, r5
 8015a82:	dd00      	ble.n	8015a86 <_strtod_l+0x306>
 8015a84:	0029      	movs	r1, r5
 8015a86:	2c00      	cmp	r4, #0
 8015a88:	d000      	beq.n	8015a8c <_strtod_l+0x30c>
 8015a8a:	4249      	negs	r1, r1
 8015a8c:	9a05      	ldr	r2, [sp, #20]
 8015a8e:	2a00      	cmp	r2, #0
 8015a90:	d149      	bne.n	8015b26 <_strtod_l+0x3a6>
 8015a92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015a94:	4310      	orrs	r0, r2
 8015a96:	d000      	beq.n	8015a9a <_strtod_l+0x31a>
 8015a98:	e6b3      	b.n	8015802 <_strtod_l+0x82>
 8015a9a:	9a07      	ldr	r2, [sp, #28]
 8015a9c:	2a00      	cmp	r2, #0
 8015a9e:	d000      	beq.n	8015aa2 <_strtod_l+0x322>
 8015aa0:	e6cf      	b.n	8015842 <_strtod_l+0xc2>
 8015aa2:	2b4e      	cmp	r3, #78	; 0x4e
 8015aa4:	d025      	beq.n	8015af2 <_strtod_l+0x372>
 8015aa6:	dc1f      	bgt.n	8015ae8 <_strtod_l+0x368>
 8015aa8:	2b49      	cmp	r3, #73	; 0x49
 8015aaa:	d000      	beq.n	8015aae <_strtod_l+0x32e>
 8015aac:	e6c9      	b.n	8015842 <_strtod_l+0xc2>
 8015aae:	49a0      	ldr	r1, [pc, #640]	; (8015d30 <_strtod_l+0x5b0>)
 8015ab0:	a821      	add	r0, sp, #132	; 0x84
 8015ab2:	f003 f9ed 	bl	8018e90 <__match>
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	d100      	bne.n	8015abc <_strtod_l+0x33c>
 8015aba:	e6c2      	b.n	8015842 <_strtod_l+0xc2>
 8015abc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015abe:	499d      	ldr	r1, [pc, #628]	; (8015d34 <_strtod_l+0x5b4>)
 8015ac0:	3b01      	subs	r3, #1
 8015ac2:	a821      	add	r0, sp, #132	; 0x84
 8015ac4:	9321      	str	r3, [sp, #132]	; 0x84
 8015ac6:	f003 f9e3 	bl	8018e90 <__match>
 8015aca:	2800      	cmp	r0, #0
 8015acc:	d102      	bne.n	8015ad4 <_strtod_l+0x354>
 8015ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	9321      	str	r3, [sp, #132]	; 0x84
 8015ad4:	4f98      	ldr	r7, [pc, #608]	; (8015d38 <_strtod_l+0x5b8>)
 8015ad6:	2600      	movs	r6, #0
 8015ad8:	e693      	b.n	8015802 <_strtod_l+0x82>
 8015ada:	220a      	movs	r2, #10
 8015adc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015ade:	434a      	muls	r2, r1
 8015ae0:	18d2      	adds	r2, r2, r3
 8015ae2:	3a30      	subs	r2, #48	; 0x30
 8015ae4:	920e      	str	r2, [sp, #56]	; 0x38
 8015ae6:	e7bd      	b.n	8015a64 <_strtod_l+0x2e4>
 8015ae8:	2b69      	cmp	r3, #105	; 0x69
 8015aea:	d0e0      	beq.n	8015aae <_strtod_l+0x32e>
 8015aec:	2b6e      	cmp	r3, #110	; 0x6e
 8015aee:	d000      	beq.n	8015af2 <_strtod_l+0x372>
 8015af0:	e6a7      	b.n	8015842 <_strtod_l+0xc2>
 8015af2:	4992      	ldr	r1, [pc, #584]	; (8015d3c <_strtod_l+0x5bc>)
 8015af4:	a821      	add	r0, sp, #132	; 0x84
 8015af6:	f003 f9cb 	bl	8018e90 <__match>
 8015afa:	2800      	cmp	r0, #0
 8015afc:	d100      	bne.n	8015b00 <_strtod_l+0x380>
 8015afe:	e6a0      	b.n	8015842 <_strtod_l+0xc2>
 8015b00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b02:	781b      	ldrb	r3, [r3, #0]
 8015b04:	2b28      	cmp	r3, #40	; 0x28
 8015b06:	d10c      	bne.n	8015b22 <_strtod_l+0x3a2>
 8015b08:	aa24      	add	r2, sp, #144	; 0x90
 8015b0a:	498d      	ldr	r1, [pc, #564]	; (8015d40 <_strtod_l+0x5c0>)
 8015b0c:	a821      	add	r0, sp, #132	; 0x84
 8015b0e:	f003 f9d3 	bl	8018eb8 <__hexnan>
 8015b12:	2805      	cmp	r0, #5
 8015b14:	d105      	bne.n	8015b22 <_strtod_l+0x3a2>
 8015b16:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015b18:	4a87      	ldr	r2, [pc, #540]	; (8015d38 <_strtod_l+0x5b8>)
 8015b1a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015b1c:	431a      	orrs	r2, r3
 8015b1e:	0017      	movs	r7, r2
 8015b20:	e66f      	b.n	8015802 <_strtod_l+0x82>
 8015b22:	4f88      	ldr	r7, [pc, #544]	; (8015d44 <_strtod_l+0x5c4>)
 8015b24:	e7d7      	b.n	8015ad6 <_strtod_l+0x356>
 8015b26:	4663      	mov	r3, ip
 8015b28:	1acb      	subs	r3, r1, r3
 8015b2a:	9307      	str	r3, [sp, #28]
 8015b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d101      	bne.n	8015b36 <_strtod_l+0x3b6>
 8015b32:	9b05      	ldr	r3, [sp, #20]
 8015b34:	930a      	str	r3, [sp, #40]	; 0x28
 8015b36:	9c05      	ldr	r4, [sp, #20]
 8015b38:	2c10      	cmp	r4, #16
 8015b3a:	dd00      	ble.n	8015b3e <_strtod_l+0x3be>
 8015b3c:	2410      	movs	r4, #16
 8015b3e:	9808      	ldr	r0, [sp, #32]
 8015b40:	f7ed fabe 	bl	80030c0 <__aeabi_ui2d>
 8015b44:	9b05      	ldr	r3, [sp, #20]
 8015b46:	0006      	movs	r6, r0
 8015b48:	000f      	movs	r7, r1
 8015b4a:	2b09      	cmp	r3, #9
 8015b4c:	dc15      	bgt.n	8015b7a <_strtod_l+0x3fa>
 8015b4e:	9b07      	ldr	r3, [sp, #28]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d100      	bne.n	8015b56 <_strtod_l+0x3d6>
 8015b54:	e655      	b.n	8015802 <_strtod_l+0x82>
 8015b56:	9b07      	ldr	r3, [sp, #28]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	dc00      	bgt.n	8015b5e <_strtod_l+0x3de>
 8015b5c:	e07d      	b.n	8015c5a <_strtod_l+0x4da>
 8015b5e:	2b16      	cmp	r3, #22
 8015b60:	dc62      	bgt.n	8015c28 <_strtod_l+0x4a8>
 8015b62:	00dc      	lsls	r4, r3, #3
 8015b64:	4b78      	ldr	r3, [pc, #480]	; (8015d48 <_strtod_l+0x5c8>)
 8015b66:	0032      	movs	r2, r6
 8015b68:	1919      	adds	r1, r3, r4
 8015b6a:	003b      	movs	r3, r7
 8015b6c:	6808      	ldr	r0, [r1, #0]
 8015b6e:	6849      	ldr	r1, [r1, #4]
 8015b70:	f7ec fc60 	bl	8002434 <__aeabi_dmul>
 8015b74:	0006      	movs	r6, r0
 8015b76:	000f      	movs	r7, r1
 8015b78:	e643      	b.n	8015802 <_strtod_l+0x82>
 8015b7a:	0022      	movs	r2, r4
 8015b7c:	4b72      	ldr	r3, [pc, #456]	; (8015d48 <_strtod_l+0x5c8>)
 8015b7e:	3a09      	subs	r2, #9
 8015b80:	00d2      	lsls	r2, r2, #3
 8015b82:	189b      	adds	r3, r3, r2
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	f7ec fc54 	bl	8002434 <__aeabi_dmul>
 8015b8c:	0006      	movs	r6, r0
 8015b8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015b90:	000f      	movs	r7, r1
 8015b92:	f7ed fa95 	bl	80030c0 <__aeabi_ui2d>
 8015b96:	000b      	movs	r3, r1
 8015b98:	0002      	movs	r2, r0
 8015b9a:	0039      	movs	r1, r7
 8015b9c:	0030      	movs	r0, r6
 8015b9e:	f7eb fd23 	bl	80015e8 <__aeabi_dadd>
 8015ba2:	9b05      	ldr	r3, [sp, #20]
 8015ba4:	0006      	movs	r6, r0
 8015ba6:	000f      	movs	r7, r1
 8015ba8:	2b0f      	cmp	r3, #15
 8015baa:	ddd0      	ble.n	8015b4e <_strtod_l+0x3ce>
 8015bac:	9b05      	ldr	r3, [sp, #20]
 8015bae:	1b1c      	subs	r4, r3, r4
 8015bb0:	9b07      	ldr	r3, [sp, #28]
 8015bb2:	18e4      	adds	r4, r4, r3
 8015bb4:	2c00      	cmp	r4, #0
 8015bb6:	dc00      	bgt.n	8015bba <_strtod_l+0x43a>
 8015bb8:	e094      	b.n	8015ce4 <_strtod_l+0x564>
 8015bba:	230f      	movs	r3, #15
 8015bbc:	4023      	ands	r3, r4
 8015bbe:	d00a      	beq.n	8015bd6 <_strtod_l+0x456>
 8015bc0:	4961      	ldr	r1, [pc, #388]	; (8015d48 <_strtod_l+0x5c8>)
 8015bc2:	00db      	lsls	r3, r3, #3
 8015bc4:	18c9      	adds	r1, r1, r3
 8015bc6:	0032      	movs	r2, r6
 8015bc8:	6808      	ldr	r0, [r1, #0]
 8015bca:	6849      	ldr	r1, [r1, #4]
 8015bcc:	003b      	movs	r3, r7
 8015bce:	f7ec fc31 	bl	8002434 <__aeabi_dmul>
 8015bd2:	0006      	movs	r6, r0
 8015bd4:	000f      	movs	r7, r1
 8015bd6:	230f      	movs	r3, #15
 8015bd8:	439c      	bics	r4, r3
 8015bda:	d06e      	beq.n	8015cba <_strtod_l+0x53a>
 8015bdc:	3326      	adds	r3, #38	; 0x26
 8015bde:	33ff      	adds	r3, #255	; 0xff
 8015be0:	429c      	cmp	r4, r3
 8015be2:	dd48      	ble.n	8015c76 <_strtod_l+0x4f6>
 8015be4:	2400      	movs	r4, #0
 8015be6:	9405      	str	r4, [sp, #20]
 8015be8:	940b      	str	r4, [sp, #44]	; 0x2c
 8015bea:	940a      	str	r4, [sp, #40]	; 0x28
 8015bec:	2322      	movs	r3, #34	; 0x22
 8015bee:	2600      	movs	r6, #0
 8015bf0:	9a04      	ldr	r2, [sp, #16]
 8015bf2:	4f51      	ldr	r7, [pc, #324]	; (8015d38 <_strtod_l+0x5b8>)
 8015bf4:	6013      	str	r3, [r2, #0]
 8015bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bf8:	42b3      	cmp	r3, r6
 8015bfa:	d100      	bne.n	8015bfe <_strtod_l+0x47e>
 8015bfc:	e601      	b.n	8015802 <_strtod_l+0x82>
 8015bfe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015c00:	9804      	ldr	r0, [sp, #16]
 8015c02:	f003 fa47 	bl	8019094 <_Bfree>
 8015c06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015c08:	9804      	ldr	r0, [sp, #16]
 8015c0a:	f003 fa43 	bl	8019094 <_Bfree>
 8015c0e:	9905      	ldr	r1, [sp, #20]
 8015c10:	9804      	ldr	r0, [sp, #16]
 8015c12:	f003 fa3f 	bl	8019094 <_Bfree>
 8015c16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c18:	9804      	ldr	r0, [sp, #16]
 8015c1a:	f003 fa3b 	bl	8019094 <_Bfree>
 8015c1e:	0021      	movs	r1, r4
 8015c20:	9804      	ldr	r0, [sp, #16]
 8015c22:	f003 fa37 	bl	8019094 <_Bfree>
 8015c26:	e5ec      	b.n	8015802 <_strtod_l+0x82>
 8015c28:	2325      	movs	r3, #37	; 0x25
 8015c2a:	9a05      	ldr	r2, [sp, #20]
 8015c2c:	1a9b      	subs	r3, r3, r2
 8015c2e:	9a07      	ldr	r2, [sp, #28]
 8015c30:	4293      	cmp	r3, r2
 8015c32:	dbbb      	blt.n	8015bac <_strtod_l+0x42c>
 8015c34:	230f      	movs	r3, #15
 8015c36:	9a05      	ldr	r2, [sp, #20]
 8015c38:	4c43      	ldr	r4, [pc, #268]	; (8015d48 <_strtod_l+0x5c8>)
 8015c3a:	1a9d      	subs	r5, r3, r2
 8015c3c:	00e9      	lsls	r1, r5, #3
 8015c3e:	1861      	adds	r1, r4, r1
 8015c40:	0032      	movs	r2, r6
 8015c42:	6808      	ldr	r0, [r1, #0]
 8015c44:	6849      	ldr	r1, [r1, #4]
 8015c46:	003b      	movs	r3, r7
 8015c48:	f7ec fbf4 	bl	8002434 <__aeabi_dmul>
 8015c4c:	9b07      	ldr	r3, [sp, #28]
 8015c4e:	1b5e      	subs	r6, r3, r5
 8015c50:	00f6      	lsls	r6, r6, #3
 8015c52:	19a6      	adds	r6, r4, r6
 8015c54:	6832      	ldr	r2, [r6, #0]
 8015c56:	6873      	ldr	r3, [r6, #4]
 8015c58:	e78a      	b.n	8015b70 <_strtod_l+0x3f0>
 8015c5a:	9b07      	ldr	r3, [sp, #28]
 8015c5c:	3316      	adds	r3, #22
 8015c5e:	dba5      	blt.n	8015bac <_strtod_l+0x42c>
 8015c60:	9b07      	ldr	r3, [sp, #28]
 8015c62:	0030      	movs	r0, r6
 8015c64:	00da      	lsls	r2, r3, #3
 8015c66:	4b38      	ldr	r3, [pc, #224]	; (8015d48 <_strtod_l+0x5c8>)
 8015c68:	0039      	movs	r1, r7
 8015c6a:	1a9b      	subs	r3, r3, r2
 8015c6c:	681a      	ldr	r2, [r3, #0]
 8015c6e:	685b      	ldr	r3, [r3, #4]
 8015c70:	f7eb ffd6 	bl	8001c20 <__aeabi_ddiv>
 8015c74:	e77e      	b.n	8015b74 <_strtod_l+0x3f4>
 8015c76:	2300      	movs	r3, #0
 8015c78:	0030      	movs	r0, r6
 8015c7a:	0039      	movs	r1, r7
 8015c7c:	001d      	movs	r5, r3
 8015c7e:	1124      	asrs	r4, r4, #4
 8015c80:	2c01      	cmp	r4, #1
 8015c82:	dc1d      	bgt.n	8015cc0 <_strtod_l+0x540>
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d001      	beq.n	8015c8c <_strtod_l+0x50c>
 8015c88:	0006      	movs	r6, r0
 8015c8a:	000f      	movs	r7, r1
 8015c8c:	4b2f      	ldr	r3, [pc, #188]	; (8015d4c <_strtod_l+0x5cc>)
 8015c8e:	00ed      	lsls	r5, r5, #3
 8015c90:	18ff      	adds	r7, r7, r3
 8015c92:	4b2f      	ldr	r3, [pc, #188]	; (8015d50 <_strtod_l+0x5d0>)
 8015c94:	0032      	movs	r2, r6
 8015c96:	195d      	adds	r5, r3, r5
 8015c98:	6828      	ldr	r0, [r5, #0]
 8015c9a:	6869      	ldr	r1, [r5, #4]
 8015c9c:	003b      	movs	r3, r7
 8015c9e:	f7ec fbc9 	bl	8002434 <__aeabi_dmul>
 8015ca2:	4b25      	ldr	r3, [pc, #148]	; (8015d38 <_strtod_l+0x5b8>)
 8015ca4:	4a2b      	ldr	r2, [pc, #172]	; (8015d54 <_strtod_l+0x5d4>)
 8015ca6:	0006      	movs	r6, r0
 8015ca8:	400b      	ands	r3, r1
 8015caa:	4293      	cmp	r3, r2
 8015cac:	d89a      	bhi.n	8015be4 <_strtod_l+0x464>
 8015cae:	4a2a      	ldr	r2, [pc, #168]	; (8015d58 <_strtod_l+0x5d8>)
 8015cb0:	4293      	cmp	r3, r2
 8015cb2:	d913      	bls.n	8015cdc <_strtod_l+0x55c>
 8015cb4:	2601      	movs	r6, #1
 8015cb6:	4f29      	ldr	r7, [pc, #164]	; (8015d5c <_strtod_l+0x5dc>)
 8015cb8:	4276      	negs	r6, r6
 8015cba:	2300      	movs	r3, #0
 8015cbc:	9306      	str	r3, [sp, #24]
 8015cbe:	e07b      	b.n	8015db8 <_strtod_l+0x638>
 8015cc0:	2201      	movs	r2, #1
 8015cc2:	4214      	tst	r4, r2
 8015cc4:	d007      	beq.n	8015cd6 <_strtod_l+0x556>
 8015cc6:	4a22      	ldr	r2, [pc, #136]	; (8015d50 <_strtod_l+0x5d0>)
 8015cc8:	00eb      	lsls	r3, r5, #3
 8015cca:	189b      	adds	r3, r3, r2
 8015ccc:	681a      	ldr	r2, [r3, #0]
 8015cce:	685b      	ldr	r3, [r3, #4]
 8015cd0:	f7ec fbb0 	bl	8002434 <__aeabi_dmul>
 8015cd4:	2301      	movs	r3, #1
 8015cd6:	3501      	adds	r5, #1
 8015cd8:	1064      	asrs	r4, r4, #1
 8015cda:	e7d1      	b.n	8015c80 <_strtod_l+0x500>
 8015cdc:	23d4      	movs	r3, #212	; 0xd4
 8015cde:	049b      	lsls	r3, r3, #18
 8015ce0:	18cf      	adds	r7, r1, r3
 8015ce2:	e7ea      	b.n	8015cba <_strtod_l+0x53a>
 8015ce4:	2c00      	cmp	r4, #0
 8015ce6:	d0e8      	beq.n	8015cba <_strtod_l+0x53a>
 8015ce8:	230f      	movs	r3, #15
 8015cea:	4264      	negs	r4, r4
 8015cec:	4023      	ands	r3, r4
 8015cee:	d00a      	beq.n	8015d06 <_strtod_l+0x586>
 8015cf0:	4a15      	ldr	r2, [pc, #84]	; (8015d48 <_strtod_l+0x5c8>)
 8015cf2:	00db      	lsls	r3, r3, #3
 8015cf4:	18d3      	adds	r3, r2, r3
 8015cf6:	0030      	movs	r0, r6
 8015cf8:	681a      	ldr	r2, [r3, #0]
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	0039      	movs	r1, r7
 8015cfe:	f7eb ff8f 	bl	8001c20 <__aeabi_ddiv>
 8015d02:	0006      	movs	r6, r0
 8015d04:	000f      	movs	r7, r1
 8015d06:	1124      	asrs	r4, r4, #4
 8015d08:	d0d7      	beq.n	8015cba <_strtod_l+0x53a>
 8015d0a:	2c1f      	cmp	r4, #31
 8015d0c:	dd28      	ble.n	8015d60 <_strtod_l+0x5e0>
 8015d0e:	2400      	movs	r4, #0
 8015d10:	9405      	str	r4, [sp, #20]
 8015d12:	940b      	str	r4, [sp, #44]	; 0x2c
 8015d14:	940a      	str	r4, [sp, #40]	; 0x28
 8015d16:	2322      	movs	r3, #34	; 0x22
 8015d18:	9a04      	ldr	r2, [sp, #16]
 8015d1a:	2600      	movs	r6, #0
 8015d1c:	6013      	str	r3, [r2, #0]
 8015d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d20:	2700      	movs	r7, #0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d000      	beq.n	8015d28 <_strtod_l+0x5a8>
 8015d26:	e76a      	b.n	8015bfe <_strtod_l+0x47e>
 8015d28:	e56b      	b.n	8015802 <_strtod_l+0x82>
 8015d2a:	46c0      	nop			; (mov r8, r8)
 8015d2c:	00004e1f 	.word	0x00004e1f
 8015d30:	0801d22d 	.word	0x0801d22d
 8015d34:	0801d380 	.word	0x0801d380
 8015d38:	7ff00000 	.word	0x7ff00000
 8015d3c:	0801d235 	.word	0x0801d235
 8015d40:	0801d1e8 	.word	0x0801d1e8
 8015d44:	fff80000 	.word	0xfff80000
 8015d48:	0801d3b8 	.word	0x0801d3b8
 8015d4c:	fcb00000 	.word	0xfcb00000
 8015d50:	0801d390 	.word	0x0801d390
 8015d54:	7ca00000 	.word	0x7ca00000
 8015d58:	7c900000 	.word	0x7c900000
 8015d5c:	7fefffff 	.word	0x7fefffff
 8015d60:	2310      	movs	r3, #16
 8015d62:	4023      	ands	r3, r4
 8015d64:	9306      	str	r3, [sp, #24]
 8015d66:	d001      	beq.n	8015d6c <_strtod_l+0x5ec>
 8015d68:	236a      	movs	r3, #106	; 0x6a
 8015d6a:	9306      	str	r3, [sp, #24]
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	0030      	movs	r0, r6
 8015d70:	0039      	movs	r1, r7
 8015d72:	001d      	movs	r5, r3
 8015d74:	2c00      	cmp	r4, #0
 8015d76:	dd00      	ble.n	8015d7a <_strtod_l+0x5fa>
 8015d78:	e10e      	b.n	8015f98 <_strtod_l+0x818>
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d001      	beq.n	8015d82 <_strtod_l+0x602>
 8015d7e:	0006      	movs	r6, r0
 8015d80:	000f      	movs	r7, r1
 8015d82:	9b06      	ldr	r3, [sp, #24]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d00f      	beq.n	8015da8 <_strtod_l+0x628>
 8015d88:	236b      	movs	r3, #107	; 0x6b
 8015d8a:	0079      	lsls	r1, r7, #1
 8015d8c:	0d49      	lsrs	r1, r1, #21
 8015d8e:	003a      	movs	r2, r7
 8015d90:	1a5b      	subs	r3, r3, r1
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	dd08      	ble.n	8015da8 <_strtod_l+0x628>
 8015d96:	2b1f      	cmp	r3, #31
 8015d98:	dc00      	bgt.n	8015d9c <_strtod_l+0x61c>
 8015d9a:	e112      	b.n	8015fc2 <_strtod_l+0x842>
 8015d9c:	2600      	movs	r6, #0
 8015d9e:	2b34      	cmp	r3, #52	; 0x34
 8015da0:	dc00      	bgt.n	8015da4 <_strtod_l+0x624>
 8015da2:	e107      	b.n	8015fb4 <_strtod_l+0x834>
 8015da4:	27dc      	movs	r7, #220	; 0xdc
 8015da6:	04bf      	lsls	r7, r7, #18
 8015da8:	2200      	movs	r2, #0
 8015daa:	2300      	movs	r3, #0
 8015dac:	0030      	movs	r0, r6
 8015dae:	0039      	movs	r1, r7
 8015db0:	f7ea fb54 	bl	800045c <__aeabi_dcmpeq>
 8015db4:	2800      	cmp	r0, #0
 8015db6:	d1aa      	bne.n	8015d0e <_strtod_l+0x58e>
 8015db8:	9b08      	ldr	r3, [sp, #32]
 8015dba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015dbc:	9300      	str	r3, [sp, #0]
 8015dbe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015dc0:	9b05      	ldr	r3, [sp, #20]
 8015dc2:	9804      	ldr	r0, [sp, #16]
 8015dc4:	f003 f9ae 	bl	8019124 <__s2b>
 8015dc8:	900b      	str	r0, [sp, #44]	; 0x2c
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	d100      	bne.n	8015dd0 <_strtod_l+0x650>
 8015dce:	e709      	b.n	8015be4 <_strtod_l+0x464>
 8015dd0:	9b07      	ldr	r3, [sp, #28]
 8015dd2:	9a07      	ldr	r2, [sp, #28]
 8015dd4:	17db      	asrs	r3, r3, #31
 8015dd6:	4252      	negs	r2, r2
 8015dd8:	4013      	ands	r3, r2
 8015dda:	9315      	str	r3, [sp, #84]	; 0x54
 8015ddc:	9b07      	ldr	r3, [sp, #28]
 8015dde:	2400      	movs	r4, #0
 8015de0:	43db      	mvns	r3, r3
 8015de2:	9a07      	ldr	r2, [sp, #28]
 8015de4:	17db      	asrs	r3, r3, #31
 8015de6:	401a      	ands	r2, r3
 8015de8:	921c      	str	r2, [sp, #112]	; 0x70
 8015dea:	9405      	str	r4, [sp, #20]
 8015dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dee:	9804      	ldr	r0, [sp, #16]
 8015df0:	6859      	ldr	r1, [r3, #4]
 8015df2:	f003 f927 	bl	8019044 <_Balloc>
 8015df6:	900a      	str	r0, [sp, #40]	; 0x28
 8015df8:	2800      	cmp	r0, #0
 8015dfa:	d100      	bne.n	8015dfe <_strtod_l+0x67e>
 8015dfc:	e6f6      	b.n	8015bec <_strtod_l+0x46c>
 8015dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e02:	691b      	ldr	r3, [r3, #16]
 8015e04:	310c      	adds	r1, #12
 8015e06:	1c9a      	adds	r2, r3, #2
 8015e08:	0092      	lsls	r2, r2, #2
 8015e0a:	300c      	adds	r0, #12
 8015e0c:	9308      	str	r3, [sp, #32]
 8015e0e:	f7ff fa32 	bl	8015276 <memcpy>
 8015e12:	ab24      	add	r3, sp, #144	; 0x90
 8015e14:	9301      	str	r3, [sp, #4]
 8015e16:	ab23      	add	r3, sp, #140	; 0x8c
 8015e18:	9300      	str	r3, [sp, #0]
 8015e1a:	0032      	movs	r2, r6
 8015e1c:	003b      	movs	r3, r7
 8015e1e:	9804      	ldr	r0, [sp, #16]
 8015e20:	960e      	str	r6, [sp, #56]	; 0x38
 8015e22:	970f      	str	r7, [sp, #60]	; 0x3c
 8015e24:	f003 fc22 	bl	801966c <__d2b>
 8015e28:	9022      	str	r0, [sp, #136]	; 0x88
 8015e2a:	2800      	cmp	r0, #0
 8015e2c:	d100      	bne.n	8015e30 <_strtod_l+0x6b0>
 8015e2e:	e6dd      	b.n	8015bec <_strtod_l+0x46c>
 8015e30:	2101      	movs	r1, #1
 8015e32:	9804      	ldr	r0, [sp, #16]
 8015e34:	f003 f9fd 	bl	8019232 <__i2b>
 8015e38:	9005      	str	r0, [sp, #20]
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	d100      	bne.n	8015e40 <_strtod_l+0x6c0>
 8015e3e:	e6d5      	b.n	8015bec <_strtod_l+0x46c>
 8015e40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	da00      	bge.n	8015e48 <_strtod_l+0x6c8>
 8015e46:	e0c1      	b.n	8015fcc <_strtod_l+0x84c>
 8015e48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015e4a:	189d      	adds	r5, r3, r2
 8015e4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015e4e:	4694      	mov	ip, r2
 8015e50:	9906      	ldr	r1, [sp, #24]
 8015e52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015e54:	1a5b      	subs	r3, r3, r1
 8015e56:	2136      	movs	r1, #54	; 0x36
 8015e58:	189b      	adds	r3, r3, r2
 8015e5a:	1a8a      	subs	r2, r1, r2
 8015e5c:	49b2      	ldr	r1, [pc, #712]	; (8016128 <_strtod_l+0x9a8>)
 8015e5e:	3b01      	subs	r3, #1
 8015e60:	2001      	movs	r0, #1
 8015e62:	428b      	cmp	r3, r1
 8015e64:	db00      	blt.n	8015e68 <_strtod_l+0x6e8>
 8015e66:	e0bd      	b.n	8015fe4 <_strtod_l+0x864>
 8015e68:	1ac9      	subs	r1, r1, r3
 8015e6a:	1a52      	subs	r2, r2, r1
 8015e6c:	291f      	cmp	r1, #31
 8015e6e:	dd00      	ble.n	8015e72 <_strtod_l+0x6f2>
 8015e70:	e0b1      	b.n	8015fd6 <_strtod_l+0x856>
 8015e72:	4088      	lsls	r0, r1
 8015e74:	2300      	movs	r3, #0
 8015e76:	9014      	str	r0, [sp, #80]	; 0x50
 8015e78:	9310      	str	r3, [sp, #64]	; 0x40
 8015e7a:	18ab      	adds	r3, r5, r2
 8015e7c:	9308      	str	r3, [sp, #32]
 8015e7e:	0013      	movs	r3, r2
 8015e80:	9a06      	ldr	r2, [sp, #24]
 8015e82:	4463      	add	r3, ip
 8015e84:	18d3      	adds	r3, r2, r3
 8015e86:	9a08      	ldr	r2, [sp, #32]
 8015e88:	930c      	str	r3, [sp, #48]	; 0x30
 8015e8a:	002b      	movs	r3, r5
 8015e8c:	4295      	cmp	r5, r2
 8015e8e:	dd00      	ble.n	8015e92 <_strtod_l+0x712>
 8015e90:	0013      	movs	r3, r2
 8015e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e94:	4293      	cmp	r3, r2
 8015e96:	dd00      	ble.n	8015e9a <_strtod_l+0x71a>
 8015e98:	0013      	movs	r3, r2
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	dd06      	ble.n	8015eac <_strtod_l+0x72c>
 8015e9e:	9a08      	ldr	r2, [sp, #32]
 8015ea0:	1aed      	subs	r5, r5, r3
 8015ea2:	1ad2      	subs	r2, r2, r3
 8015ea4:	9208      	str	r2, [sp, #32]
 8015ea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015ea8:	1ad2      	subs	r2, r2, r3
 8015eaa:	920c      	str	r2, [sp, #48]	; 0x30
 8015eac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d017      	beq.n	8015ee2 <_strtod_l+0x762>
 8015eb2:	001a      	movs	r2, r3
 8015eb4:	9905      	ldr	r1, [sp, #20]
 8015eb6:	9804      	ldr	r0, [sp, #16]
 8015eb8:	f003 fa54 	bl	8019364 <__pow5mult>
 8015ebc:	9005      	str	r0, [sp, #20]
 8015ebe:	2800      	cmp	r0, #0
 8015ec0:	d100      	bne.n	8015ec4 <_strtod_l+0x744>
 8015ec2:	e693      	b.n	8015bec <_strtod_l+0x46c>
 8015ec4:	0001      	movs	r1, r0
 8015ec6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015ec8:	9804      	ldr	r0, [sp, #16]
 8015eca:	f003 f9bb 	bl	8019244 <__multiply>
 8015ece:	9012      	str	r0, [sp, #72]	; 0x48
 8015ed0:	2800      	cmp	r0, #0
 8015ed2:	d100      	bne.n	8015ed6 <_strtod_l+0x756>
 8015ed4:	e68a      	b.n	8015bec <_strtod_l+0x46c>
 8015ed6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015ed8:	9804      	ldr	r0, [sp, #16]
 8015eda:	f003 f8db 	bl	8019094 <_Bfree>
 8015ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015ee0:	9322      	str	r3, [sp, #136]	; 0x88
 8015ee2:	9b08      	ldr	r3, [sp, #32]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	dd00      	ble.n	8015eea <_strtod_l+0x76a>
 8015ee8:	e07f      	b.n	8015fea <_strtod_l+0x86a>
 8015eea:	9b07      	ldr	r3, [sp, #28]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	dd08      	ble.n	8015f02 <_strtod_l+0x782>
 8015ef0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015ef2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015ef4:	9804      	ldr	r0, [sp, #16]
 8015ef6:	f003 fa35 	bl	8019364 <__pow5mult>
 8015efa:	900a      	str	r0, [sp, #40]	; 0x28
 8015efc:	2800      	cmp	r0, #0
 8015efe:	d100      	bne.n	8015f02 <_strtod_l+0x782>
 8015f00:	e674      	b.n	8015bec <_strtod_l+0x46c>
 8015f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	dd08      	ble.n	8015f1a <_strtod_l+0x79a>
 8015f08:	001a      	movs	r2, r3
 8015f0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015f0c:	9804      	ldr	r0, [sp, #16]
 8015f0e:	f003 fa6b 	bl	80193e8 <__lshift>
 8015f12:	900a      	str	r0, [sp, #40]	; 0x28
 8015f14:	2800      	cmp	r0, #0
 8015f16:	d100      	bne.n	8015f1a <_strtod_l+0x79a>
 8015f18:	e668      	b.n	8015bec <_strtod_l+0x46c>
 8015f1a:	2d00      	cmp	r5, #0
 8015f1c:	dd08      	ble.n	8015f30 <_strtod_l+0x7b0>
 8015f1e:	002a      	movs	r2, r5
 8015f20:	9905      	ldr	r1, [sp, #20]
 8015f22:	9804      	ldr	r0, [sp, #16]
 8015f24:	f003 fa60 	bl	80193e8 <__lshift>
 8015f28:	9005      	str	r0, [sp, #20]
 8015f2a:	2800      	cmp	r0, #0
 8015f2c:	d100      	bne.n	8015f30 <_strtod_l+0x7b0>
 8015f2e:	e65d      	b.n	8015bec <_strtod_l+0x46c>
 8015f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f32:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015f34:	9804      	ldr	r0, [sp, #16]
 8015f36:	f003 fac3 	bl	80194c0 <__mdiff>
 8015f3a:	1e04      	subs	r4, r0, #0
 8015f3c:	d100      	bne.n	8015f40 <_strtod_l+0x7c0>
 8015f3e:	e655      	b.n	8015bec <_strtod_l+0x46c>
 8015f40:	2500      	movs	r5, #0
 8015f42:	68c3      	ldr	r3, [r0, #12]
 8015f44:	9905      	ldr	r1, [sp, #20]
 8015f46:	60c5      	str	r5, [r0, #12]
 8015f48:	9312      	str	r3, [sp, #72]	; 0x48
 8015f4a:	f003 fa9f 	bl	801948c <__mcmp>
 8015f4e:	42a8      	cmp	r0, r5
 8015f50:	da55      	bge.n	8015ffe <_strtod_l+0x87e>
 8015f52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f54:	42ab      	cmp	r3, r5
 8015f56:	d11b      	bne.n	8015f90 <_strtod_l+0x810>
 8015f58:	42ae      	cmp	r6, r5
 8015f5a:	d119      	bne.n	8015f90 <_strtod_l+0x810>
 8015f5c:	033b      	lsls	r3, r7, #12
 8015f5e:	42ab      	cmp	r3, r5
 8015f60:	d116      	bne.n	8015f90 <_strtod_l+0x810>
 8015f62:	22d6      	movs	r2, #214	; 0xd6
 8015f64:	4b71      	ldr	r3, [pc, #452]	; (801612c <_strtod_l+0x9ac>)
 8015f66:	04d2      	lsls	r2, r2, #19
 8015f68:	403b      	ands	r3, r7
 8015f6a:	4293      	cmp	r3, r2
 8015f6c:	d910      	bls.n	8015f90 <_strtod_l+0x810>
 8015f6e:	6963      	ldr	r3, [r4, #20]
 8015f70:	42ab      	cmp	r3, r5
 8015f72:	d102      	bne.n	8015f7a <_strtod_l+0x7fa>
 8015f74:	6923      	ldr	r3, [r4, #16]
 8015f76:	2b01      	cmp	r3, #1
 8015f78:	dd0a      	ble.n	8015f90 <_strtod_l+0x810>
 8015f7a:	0021      	movs	r1, r4
 8015f7c:	2201      	movs	r2, #1
 8015f7e:	9804      	ldr	r0, [sp, #16]
 8015f80:	f003 fa32 	bl	80193e8 <__lshift>
 8015f84:	9905      	ldr	r1, [sp, #20]
 8015f86:	0004      	movs	r4, r0
 8015f88:	f003 fa80 	bl	801948c <__mcmp>
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	dc6b      	bgt.n	8016068 <_strtod_l+0x8e8>
 8015f90:	9b06      	ldr	r3, [sp, #24]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d178      	bne.n	8016088 <_strtod_l+0x908>
 8015f96:	e632      	b.n	8015bfe <_strtod_l+0x47e>
 8015f98:	2201      	movs	r2, #1
 8015f9a:	4214      	tst	r4, r2
 8015f9c:	d007      	beq.n	8015fae <_strtod_l+0x82e>
 8015f9e:	4a64      	ldr	r2, [pc, #400]	; (8016130 <_strtod_l+0x9b0>)
 8015fa0:	00eb      	lsls	r3, r5, #3
 8015fa2:	18d3      	adds	r3, r2, r3
 8015fa4:	681a      	ldr	r2, [r3, #0]
 8015fa6:	685b      	ldr	r3, [r3, #4]
 8015fa8:	f7ec fa44 	bl	8002434 <__aeabi_dmul>
 8015fac:	2301      	movs	r3, #1
 8015fae:	3501      	adds	r5, #1
 8015fb0:	1064      	asrs	r4, r4, #1
 8015fb2:	e6df      	b.n	8015d74 <_strtod_l+0x5f4>
 8015fb4:	2101      	movs	r1, #1
 8015fb6:	3b20      	subs	r3, #32
 8015fb8:	4249      	negs	r1, r1
 8015fba:	4099      	lsls	r1, r3
 8015fbc:	400a      	ands	r2, r1
 8015fbe:	0017      	movs	r7, r2
 8015fc0:	e6f2      	b.n	8015da8 <_strtod_l+0x628>
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	4252      	negs	r2, r2
 8015fc6:	409a      	lsls	r2, r3
 8015fc8:	4016      	ands	r6, r2
 8015fca:	e6ed      	b.n	8015da8 <_strtod_l+0x628>
 8015fcc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015fce:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015fd0:	1ad2      	subs	r2, r2, r3
 8015fd2:	4694      	mov	ip, r2
 8015fd4:	e73c      	b.n	8015e50 <_strtod_l+0x6d0>
 8015fd6:	4957      	ldr	r1, [pc, #348]	; (8016134 <_strtod_l+0x9b4>)
 8015fd8:	1acb      	subs	r3, r1, r3
 8015fda:	0001      	movs	r1, r0
 8015fdc:	4099      	lsls	r1, r3
 8015fde:	9110      	str	r1, [sp, #64]	; 0x40
 8015fe0:	9014      	str	r0, [sp, #80]	; 0x50
 8015fe2:	e74a      	b.n	8015e7a <_strtod_l+0x6fa>
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	9310      	str	r3, [sp, #64]	; 0x40
 8015fe8:	e7fa      	b.n	8015fe0 <_strtod_l+0x860>
 8015fea:	9a08      	ldr	r2, [sp, #32]
 8015fec:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015fee:	9804      	ldr	r0, [sp, #16]
 8015ff0:	f003 f9fa 	bl	80193e8 <__lshift>
 8015ff4:	9022      	str	r0, [sp, #136]	; 0x88
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	d000      	beq.n	8015ffc <_strtod_l+0x87c>
 8015ffa:	e776      	b.n	8015eea <_strtod_l+0x76a>
 8015ffc:	e5f6      	b.n	8015bec <_strtod_l+0x46c>
 8015ffe:	970c      	str	r7, [sp, #48]	; 0x30
 8016000:	2800      	cmp	r0, #0
 8016002:	d000      	beq.n	8016006 <_strtod_l+0x886>
 8016004:	e0a0      	b.n	8016148 <_strtod_l+0x9c8>
 8016006:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016008:	033b      	lsls	r3, r7, #12
 801600a:	0b1b      	lsrs	r3, r3, #12
 801600c:	2a00      	cmp	r2, #0
 801600e:	d027      	beq.n	8016060 <_strtod_l+0x8e0>
 8016010:	4a49      	ldr	r2, [pc, #292]	; (8016138 <_strtod_l+0x9b8>)
 8016012:	4293      	cmp	r3, r2
 8016014:	d157      	bne.n	80160c6 <_strtod_l+0x946>
 8016016:	2201      	movs	r2, #1
 8016018:	9b06      	ldr	r3, [sp, #24]
 801601a:	4252      	negs	r2, r2
 801601c:	0031      	movs	r1, r6
 801601e:	0010      	movs	r0, r2
 8016020:	2b00      	cmp	r3, #0
 8016022:	d00b      	beq.n	801603c <_strtod_l+0x8bc>
 8016024:	25d4      	movs	r5, #212	; 0xd4
 8016026:	4b41      	ldr	r3, [pc, #260]	; (801612c <_strtod_l+0x9ac>)
 8016028:	04ed      	lsls	r5, r5, #19
 801602a:	403b      	ands	r3, r7
 801602c:	0010      	movs	r0, r2
 801602e:	42ab      	cmp	r3, r5
 8016030:	d804      	bhi.n	801603c <_strtod_l+0x8bc>
 8016032:	306c      	adds	r0, #108	; 0x6c
 8016034:	0d1b      	lsrs	r3, r3, #20
 8016036:	1ac3      	subs	r3, r0, r3
 8016038:	409a      	lsls	r2, r3
 801603a:	0010      	movs	r0, r2
 801603c:	4281      	cmp	r1, r0
 801603e:	d142      	bne.n	80160c6 <_strtod_l+0x946>
 8016040:	4b3e      	ldr	r3, [pc, #248]	; (801613c <_strtod_l+0x9bc>)
 8016042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016044:	429a      	cmp	r2, r3
 8016046:	d102      	bne.n	801604e <_strtod_l+0x8ce>
 8016048:	1c4b      	adds	r3, r1, #1
 801604a:	d100      	bne.n	801604e <_strtod_l+0x8ce>
 801604c:	e5ce      	b.n	8015bec <_strtod_l+0x46c>
 801604e:	4b37      	ldr	r3, [pc, #220]	; (801612c <_strtod_l+0x9ac>)
 8016050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016052:	2600      	movs	r6, #0
 8016054:	401a      	ands	r2, r3
 8016056:	0013      	movs	r3, r2
 8016058:	2280      	movs	r2, #128	; 0x80
 801605a:	0352      	lsls	r2, r2, #13
 801605c:	189f      	adds	r7, r3, r2
 801605e:	e797      	b.n	8015f90 <_strtod_l+0x810>
 8016060:	2b00      	cmp	r3, #0
 8016062:	d130      	bne.n	80160c6 <_strtod_l+0x946>
 8016064:	2e00      	cmp	r6, #0
 8016066:	d12e      	bne.n	80160c6 <_strtod_l+0x946>
 8016068:	9906      	ldr	r1, [sp, #24]
 801606a:	003b      	movs	r3, r7
 801606c:	4a2f      	ldr	r2, [pc, #188]	; (801612c <_strtod_l+0x9ac>)
 801606e:	2900      	cmp	r1, #0
 8016070:	d020      	beq.n	80160b4 <_strtod_l+0x934>
 8016072:	0011      	movs	r1, r2
 8016074:	20d6      	movs	r0, #214	; 0xd6
 8016076:	4039      	ands	r1, r7
 8016078:	04c0      	lsls	r0, r0, #19
 801607a:	4281      	cmp	r1, r0
 801607c:	dc1a      	bgt.n	80160b4 <_strtod_l+0x934>
 801607e:	23dc      	movs	r3, #220	; 0xdc
 8016080:	049b      	lsls	r3, r3, #18
 8016082:	4299      	cmp	r1, r3
 8016084:	dc00      	bgt.n	8016088 <_strtod_l+0x908>
 8016086:	e646      	b.n	8015d16 <_strtod_l+0x596>
 8016088:	4b2d      	ldr	r3, [pc, #180]	; (8016140 <_strtod_l+0x9c0>)
 801608a:	0030      	movs	r0, r6
 801608c:	931b      	str	r3, [sp, #108]	; 0x6c
 801608e:	2300      	movs	r3, #0
 8016090:	931a      	str	r3, [sp, #104]	; 0x68
 8016092:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016096:	0039      	movs	r1, r7
 8016098:	f7ec f9cc 	bl	8002434 <__aeabi_dmul>
 801609c:	0006      	movs	r6, r0
 801609e:	000f      	movs	r7, r1
 80160a0:	1e0b      	subs	r3, r1, #0
 80160a2:	d000      	beq.n	80160a6 <_strtod_l+0x926>
 80160a4:	e5ab      	b.n	8015bfe <_strtod_l+0x47e>
 80160a6:	2800      	cmp	r0, #0
 80160a8:	d000      	beq.n	80160ac <_strtod_l+0x92c>
 80160aa:	e5a8      	b.n	8015bfe <_strtod_l+0x47e>
 80160ac:	9a04      	ldr	r2, [sp, #16]
 80160ae:	3322      	adds	r3, #34	; 0x22
 80160b0:	6013      	str	r3, [r2, #0]
 80160b2:	e5a4      	b.n	8015bfe <_strtod_l+0x47e>
 80160b4:	2601      	movs	r6, #1
 80160b6:	4013      	ands	r3, r2
 80160b8:	4a22      	ldr	r2, [pc, #136]	; (8016144 <_strtod_l+0x9c4>)
 80160ba:	4276      	negs	r6, r6
 80160bc:	189b      	adds	r3, r3, r2
 80160be:	4a1e      	ldr	r2, [pc, #120]	; (8016138 <_strtod_l+0x9b8>)
 80160c0:	431a      	orrs	r2, r3
 80160c2:	0017      	movs	r7, r2
 80160c4:	e764      	b.n	8015f90 <_strtod_l+0x810>
 80160c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d015      	beq.n	80160f8 <_strtod_l+0x978>
 80160cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80160d0:	4213      	tst	r3, r2
 80160d2:	d100      	bne.n	80160d6 <_strtod_l+0x956>
 80160d4:	e75c      	b.n	8015f90 <_strtod_l+0x810>
 80160d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80160d8:	9a06      	ldr	r2, [sp, #24]
 80160da:	0030      	movs	r0, r6
 80160dc:	0039      	movs	r1, r7
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d00f      	beq.n	8016102 <_strtod_l+0x982>
 80160e2:	f7ff fb35 	bl	8015750 <sulp>
 80160e6:	0002      	movs	r2, r0
 80160e8:	000b      	movs	r3, r1
 80160ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80160ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80160ee:	f7eb fa7b 	bl	80015e8 <__aeabi_dadd>
 80160f2:	0006      	movs	r6, r0
 80160f4:	000f      	movs	r7, r1
 80160f6:	e74b      	b.n	8015f90 <_strtod_l+0x810>
 80160f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80160fa:	4233      	tst	r3, r6
 80160fc:	d100      	bne.n	8016100 <_strtod_l+0x980>
 80160fe:	e747      	b.n	8015f90 <_strtod_l+0x810>
 8016100:	e7e9      	b.n	80160d6 <_strtod_l+0x956>
 8016102:	f7ff fb25 	bl	8015750 <sulp>
 8016106:	0002      	movs	r2, r0
 8016108:	000b      	movs	r3, r1
 801610a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801610c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801610e:	f7ec fc03 	bl	8002918 <__aeabi_dsub>
 8016112:	2200      	movs	r2, #0
 8016114:	2300      	movs	r3, #0
 8016116:	0006      	movs	r6, r0
 8016118:	000f      	movs	r7, r1
 801611a:	f7ea f99f 	bl	800045c <__aeabi_dcmpeq>
 801611e:	2800      	cmp	r0, #0
 8016120:	d000      	beq.n	8016124 <_strtod_l+0x9a4>
 8016122:	e5f8      	b.n	8015d16 <_strtod_l+0x596>
 8016124:	e734      	b.n	8015f90 <_strtod_l+0x810>
 8016126:	46c0      	nop			; (mov r8, r8)
 8016128:	fffffc02 	.word	0xfffffc02
 801612c:	7ff00000 	.word	0x7ff00000
 8016130:	0801d200 	.word	0x0801d200
 8016134:	fffffbe2 	.word	0xfffffbe2
 8016138:	000fffff 	.word	0x000fffff
 801613c:	7fefffff 	.word	0x7fefffff
 8016140:	39500000 	.word	0x39500000
 8016144:	fff00000 	.word	0xfff00000
 8016148:	9905      	ldr	r1, [sp, #20]
 801614a:	0020      	movs	r0, r4
 801614c:	f003 fae2 	bl	8019714 <__ratio>
 8016150:	2380      	movs	r3, #128	; 0x80
 8016152:	2200      	movs	r2, #0
 8016154:	05db      	lsls	r3, r3, #23
 8016156:	9008      	str	r0, [sp, #32]
 8016158:	9109      	str	r1, [sp, #36]	; 0x24
 801615a:	f7ea f98f 	bl	800047c <__aeabi_dcmple>
 801615e:	2800      	cmp	r0, #0
 8016160:	d100      	bne.n	8016164 <_strtod_l+0x9e4>
 8016162:	e07f      	b.n	8016264 <_strtod_l+0xae4>
 8016164:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016166:	2b00      	cmp	r3, #0
 8016168:	d04b      	beq.n	8016202 <_strtod_l+0xa82>
 801616a:	2200      	movs	r2, #0
 801616c:	4b8a      	ldr	r3, [pc, #552]	; (8016398 <_strtod_l+0xc18>)
 801616e:	9210      	str	r2, [sp, #64]	; 0x40
 8016170:	9311      	str	r3, [sp, #68]	; 0x44
 8016172:	4b89      	ldr	r3, [pc, #548]	; (8016398 <_strtod_l+0xc18>)
 8016174:	9308      	str	r3, [sp, #32]
 8016176:	4a89      	ldr	r2, [pc, #548]	; (801639c <_strtod_l+0xc1c>)
 8016178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801617a:	4013      	ands	r3, r2
 801617c:	9314      	str	r3, [sp, #80]	; 0x50
 801617e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016180:	4b87      	ldr	r3, [pc, #540]	; (80163a0 <_strtod_l+0xc20>)
 8016182:	429a      	cmp	r2, r3
 8016184:	d000      	beq.n	8016188 <_strtod_l+0xa08>
 8016186:	e0ba      	b.n	80162fe <_strtod_l+0xb7e>
 8016188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801618a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801618c:	921a      	str	r2, [sp, #104]	; 0x68
 801618e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016190:	4a84      	ldr	r2, [pc, #528]	; (80163a4 <_strtod_l+0xc24>)
 8016192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016194:	4694      	mov	ip, r2
 8016196:	4463      	add	r3, ip
 8016198:	001f      	movs	r7, r3
 801619a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801619c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801619e:	0030      	movs	r0, r6
 80161a0:	0039      	movs	r1, r7
 80161a2:	920c      	str	r2, [sp, #48]	; 0x30
 80161a4:	930d      	str	r3, [sp, #52]	; 0x34
 80161a6:	f003 f9ef 	bl	8019588 <__ulp>
 80161aa:	0002      	movs	r2, r0
 80161ac:	000b      	movs	r3, r1
 80161ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80161b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80161b2:	f7ec f93f 	bl	8002434 <__aeabi_dmul>
 80161b6:	0032      	movs	r2, r6
 80161b8:	003b      	movs	r3, r7
 80161ba:	f7eb fa15 	bl	80015e8 <__aeabi_dadd>
 80161be:	4a77      	ldr	r2, [pc, #476]	; (801639c <_strtod_l+0xc1c>)
 80161c0:	4b79      	ldr	r3, [pc, #484]	; (80163a8 <_strtod_l+0xc28>)
 80161c2:	0006      	movs	r6, r0
 80161c4:	400a      	ands	r2, r1
 80161c6:	429a      	cmp	r2, r3
 80161c8:	d964      	bls.n	8016294 <_strtod_l+0xb14>
 80161ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161cc:	4a77      	ldr	r2, [pc, #476]	; (80163ac <_strtod_l+0xc2c>)
 80161ce:	4293      	cmp	r3, r2
 80161d0:	d103      	bne.n	80161da <_strtod_l+0xa5a>
 80161d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161d4:	3301      	adds	r3, #1
 80161d6:	d100      	bne.n	80161da <_strtod_l+0xa5a>
 80161d8:	e508      	b.n	8015bec <_strtod_l+0x46c>
 80161da:	2601      	movs	r6, #1
 80161dc:	4f73      	ldr	r7, [pc, #460]	; (80163ac <_strtod_l+0xc2c>)
 80161de:	4276      	negs	r6, r6
 80161e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80161e2:	9804      	ldr	r0, [sp, #16]
 80161e4:	f002 ff56 	bl	8019094 <_Bfree>
 80161e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80161ea:	9804      	ldr	r0, [sp, #16]
 80161ec:	f002 ff52 	bl	8019094 <_Bfree>
 80161f0:	9905      	ldr	r1, [sp, #20]
 80161f2:	9804      	ldr	r0, [sp, #16]
 80161f4:	f002 ff4e 	bl	8019094 <_Bfree>
 80161f8:	0021      	movs	r1, r4
 80161fa:	9804      	ldr	r0, [sp, #16]
 80161fc:	f002 ff4a 	bl	8019094 <_Bfree>
 8016200:	e5f4      	b.n	8015dec <_strtod_l+0x66c>
 8016202:	2e00      	cmp	r6, #0
 8016204:	d11e      	bne.n	8016244 <_strtod_l+0xac4>
 8016206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016208:	031b      	lsls	r3, r3, #12
 801620a:	d121      	bne.n	8016250 <_strtod_l+0xad0>
 801620c:	9808      	ldr	r0, [sp, #32]
 801620e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016210:	2200      	movs	r2, #0
 8016212:	4b61      	ldr	r3, [pc, #388]	; (8016398 <_strtod_l+0xc18>)
 8016214:	f7ea f928 	bl	8000468 <__aeabi_dcmplt>
 8016218:	2800      	cmp	r0, #0
 801621a:	d11f      	bne.n	801625c <_strtod_l+0xadc>
 801621c:	9808      	ldr	r0, [sp, #32]
 801621e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016220:	2200      	movs	r2, #0
 8016222:	4b63      	ldr	r3, [pc, #396]	; (80163b0 <_strtod_l+0xc30>)
 8016224:	f7ec f906 	bl	8002434 <__aeabi_dmul>
 8016228:	0005      	movs	r5, r0
 801622a:	9108      	str	r1, [sp, #32]
 801622c:	2280      	movs	r2, #128	; 0x80
 801622e:	0612      	lsls	r2, r2, #24
 8016230:	4694      	mov	ip, r2
 8016232:	9b08      	ldr	r3, [sp, #32]
 8016234:	951e      	str	r5, [sp, #120]	; 0x78
 8016236:	4463      	add	r3, ip
 8016238:	931f      	str	r3, [sp, #124]	; 0x7c
 801623a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801623c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801623e:	9210      	str	r2, [sp, #64]	; 0x40
 8016240:	9311      	str	r3, [sp, #68]	; 0x44
 8016242:	e798      	b.n	8016176 <_strtod_l+0x9f6>
 8016244:	2e01      	cmp	r6, #1
 8016246:	d103      	bne.n	8016250 <_strtod_l+0xad0>
 8016248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801624a:	2b00      	cmp	r3, #0
 801624c:	d100      	bne.n	8016250 <_strtod_l+0xad0>
 801624e:	e562      	b.n	8015d16 <_strtod_l+0x596>
 8016250:	2200      	movs	r2, #0
 8016252:	4b58      	ldr	r3, [pc, #352]	; (80163b4 <_strtod_l+0xc34>)
 8016254:	2500      	movs	r5, #0
 8016256:	9210      	str	r2, [sp, #64]	; 0x40
 8016258:	9311      	str	r3, [sp, #68]	; 0x44
 801625a:	e78a      	b.n	8016172 <_strtod_l+0x9f2>
 801625c:	4b54      	ldr	r3, [pc, #336]	; (80163b0 <_strtod_l+0xc30>)
 801625e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016260:	9308      	str	r3, [sp, #32]
 8016262:	e7e3      	b.n	801622c <_strtod_l+0xaac>
 8016264:	4b52      	ldr	r3, [pc, #328]	; (80163b0 <_strtod_l+0xc30>)
 8016266:	9808      	ldr	r0, [sp, #32]
 8016268:	9909      	ldr	r1, [sp, #36]	; 0x24
 801626a:	2200      	movs	r2, #0
 801626c:	f7ec f8e2 	bl	8002434 <__aeabi_dmul>
 8016270:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016272:	0005      	movs	r5, r0
 8016274:	9108      	str	r1, [sp, #32]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d107      	bne.n	801628a <_strtod_l+0xb0a>
 801627a:	2380      	movs	r3, #128	; 0x80
 801627c:	061b      	lsls	r3, r3, #24
 801627e:	18cb      	adds	r3, r1, r3
 8016280:	9016      	str	r0, [sp, #88]	; 0x58
 8016282:	9317      	str	r3, [sp, #92]	; 0x5c
 8016284:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016286:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016288:	e7d9      	b.n	801623e <_strtod_l+0xabe>
 801628a:	0002      	movs	r2, r0
 801628c:	9b08      	ldr	r3, [sp, #32]
 801628e:	9216      	str	r2, [sp, #88]	; 0x58
 8016290:	9317      	str	r3, [sp, #92]	; 0x5c
 8016292:	e7f7      	b.n	8016284 <_strtod_l+0xb04>
 8016294:	23d4      	movs	r3, #212	; 0xd4
 8016296:	049b      	lsls	r3, r3, #18
 8016298:	18cf      	adds	r7, r1, r3
 801629a:	9b06      	ldr	r3, [sp, #24]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d19f      	bne.n	80161e0 <_strtod_l+0xa60>
 80162a0:	4b3e      	ldr	r3, [pc, #248]	; (801639c <_strtod_l+0xc1c>)
 80162a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80162a4:	970c      	str	r7, [sp, #48]	; 0x30
 80162a6:	403b      	ands	r3, r7
 80162a8:	429a      	cmp	r2, r3
 80162aa:	d199      	bne.n	80161e0 <_strtod_l+0xa60>
 80162ac:	9908      	ldr	r1, [sp, #32]
 80162ae:	0028      	movs	r0, r5
 80162b0:	f7ec fe96 	bl	8002fe0 <__aeabi_d2iz>
 80162b4:	f7ec feca 	bl	800304c <__aeabi_i2d>
 80162b8:	000b      	movs	r3, r1
 80162ba:	0002      	movs	r2, r0
 80162bc:	9908      	ldr	r1, [sp, #32]
 80162be:	0028      	movs	r0, r5
 80162c0:	f7ec fb2a 	bl	8002918 <__aeabi_dsub>
 80162c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80162c6:	9008      	str	r0, [sp, #32]
 80162c8:	9109      	str	r1, [sp, #36]	; 0x24
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d104      	bne.n	80162d8 <_strtod_l+0xb58>
 80162ce:	2e00      	cmp	r6, #0
 80162d0:	d102      	bne.n	80162d8 <_strtod_l+0xb58>
 80162d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162d4:	031b      	lsls	r3, r3, #12
 80162d6:	d058      	beq.n	801638a <_strtod_l+0xc0a>
 80162d8:	9808      	ldr	r0, [sp, #32]
 80162da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162dc:	4a36      	ldr	r2, [pc, #216]	; (80163b8 <_strtod_l+0xc38>)
 80162de:	4b37      	ldr	r3, [pc, #220]	; (80163bc <_strtod_l+0xc3c>)
 80162e0:	f7ea f8c2 	bl	8000468 <__aeabi_dcmplt>
 80162e4:	2800      	cmp	r0, #0
 80162e6:	d000      	beq.n	80162ea <_strtod_l+0xb6a>
 80162e8:	e489      	b.n	8015bfe <_strtod_l+0x47e>
 80162ea:	9808      	ldr	r0, [sp, #32]
 80162ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162ee:	4a34      	ldr	r2, [pc, #208]	; (80163c0 <_strtod_l+0xc40>)
 80162f0:	4b2f      	ldr	r3, [pc, #188]	; (80163b0 <_strtod_l+0xc30>)
 80162f2:	f7ea f8cd 	bl	8000490 <__aeabi_dcmpgt>
 80162f6:	2800      	cmp	r0, #0
 80162f8:	d100      	bne.n	80162fc <_strtod_l+0xb7c>
 80162fa:	e771      	b.n	80161e0 <_strtod_l+0xa60>
 80162fc:	e47f      	b.n	8015bfe <_strtod_l+0x47e>
 80162fe:	9b06      	ldr	r3, [sp, #24]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d02a      	beq.n	801635a <_strtod_l+0xbda>
 8016304:	23d4      	movs	r3, #212	; 0xd4
 8016306:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016308:	04db      	lsls	r3, r3, #19
 801630a:	429a      	cmp	r2, r3
 801630c:	d825      	bhi.n	801635a <_strtod_l+0xbda>
 801630e:	4a2d      	ldr	r2, [pc, #180]	; (80163c4 <_strtod_l+0xc44>)
 8016310:	4b2d      	ldr	r3, [pc, #180]	; (80163c8 <_strtod_l+0xc48>)
 8016312:	0028      	movs	r0, r5
 8016314:	9908      	ldr	r1, [sp, #32]
 8016316:	f7ea f8b1 	bl	800047c <__aeabi_dcmple>
 801631a:	2800      	cmp	r0, #0
 801631c:	d016      	beq.n	801634c <_strtod_l+0xbcc>
 801631e:	0028      	movs	r0, r5
 8016320:	9908      	ldr	r1, [sp, #32]
 8016322:	f7ea f96f 	bl	8000604 <__aeabi_d2uiz>
 8016326:	2800      	cmp	r0, #0
 8016328:	d100      	bne.n	801632c <_strtod_l+0xbac>
 801632a:	3001      	adds	r0, #1
 801632c:	f7ec fec8 	bl	80030c0 <__aeabi_ui2d>
 8016330:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016332:	0005      	movs	r5, r0
 8016334:	9108      	str	r1, [sp, #32]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d122      	bne.n	8016380 <_strtod_l+0xc00>
 801633a:	2380      	movs	r3, #128	; 0x80
 801633c:	061b      	lsls	r3, r3, #24
 801633e:	18cb      	adds	r3, r1, r3
 8016340:	9018      	str	r0, [sp, #96]	; 0x60
 8016342:	9319      	str	r3, [sp, #100]	; 0x64
 8016344:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016346:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016348:	9210      	str	r2, [sp, #64]	; 0x40
 801634a:	9311      	str	r3, [sp, #68]	; 0x44
 801634c:	22d6      	movs	r2, #214	; 0xd6
 801634e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016350:	04d2      	lsls	r2, r2, #19
 8016352:	189b      	adds	r3, r3, r2
 8016354:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016356:	1a9b      	subs	r3, r3, r2
 8016358:	9311      	str	r3, [sp, #68]	; 0x44
 801635a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801635c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801635e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016360:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8016362:	f003 f911 	bl	8019588 <__ulp>
 8016366:	0002      	movs	r2, r0
 8016368:	000b      	movs	r3, r1
 801636a:	0030      	movs	r0, r6
 801636c:	0039      	movs	r1, r7
 801636e:	f7ec f861 	bl	8002434 <__aeabi_dmul>
 8016372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016376:	f7eb f937 	bl	80015e8 <__aeabi_dadd>
 801637a:	0006      	movs	r6, r0
 801637c:	000f      	movs	r7, r1
 801637e:	e78c      	b.n	801629a <_strtod_l+0xb1a>
 8016380:	0002      	movs	r2, r0
 8016382:	9b08      	ldr	r3, [sp, #32]
 8016384:	9218      	str	r2, [sp, #96]	; 0x60
 8016386:	9319      	str	r3, [sp, #100]	; 0x64
 8016388:	e7dc      	b.n	8016344 <_strtod_l+0xbc4>
 801638a:	4a0b      	ldr	r2, [pc, #44]	; (80163b8 <_strtod_l+0xc38>)
 801638c:	4b0f      	ldr	r3, [pc, #60]	; (80163cc <_strtod_l+0xc4c>)
 801638e:	9808      	ldr	r0, [sp, #32]
 8016390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016392:	f7ea f869 	bl	8000468 <__aeabi_dcmplt>
 8016396:	e7ae      	b.n	80162f6 <_strtod_l+0xb76>
 8016398:	3ff00000 	.word	0x3ff00000
 801639c:	7ff00000 	.word	0x7ff00000
 80163a0:	7fe00000 	.word	0x7fe00000
 80163a4:	fcb00000 	.word	0xfcb00000
 80163a8:	7c9fffff 	.word	0x7c9fffff
 80163ac:	7fefffff 	.word	0x7fefffff
 80163b0:	3fe00000 	.word	0x3fe00000
 80163b4:	bff00000 	.word	0xbff00000
 80163b8:	94a03595 	.word	0x94a03595
 80163bc:	3fdfffff 	.word	0x3fdfffff
 80163c0:	35afe535 	.word	0x35afe535
 80163c4:	ffc00000 	.word	0xffc00000
 80163c8:	41dfffff 	.word	0x41dfffff
 80163cc:	3fcfffff 	.word	0x3fcfffff

080163d0 <strtod>:
 80163d0:	4b06      	ldr	r3, [pc, #24]	; (80163ec <strtod+0x1c>)
 80163d2:	b510      	push	{r4, lr}
 80163d4:	0004      	movs	r4, r0
 80163d6:	6818      	ldr	r0, [r3, #0]
 80163d8:	000a      	movs	r2, r1
 80163da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d100      	bne.n	80163e2 <strtod+0x12>
 80163e0:	4b03      	ldr	r3, [pc, #12]	; (80163f0 <strtod+0x20>)
 80163e2:	0021      	movs	r1, r4
 80163e4:	f7ff f9cc 	bl	8015780 <_strtod_l>
 80163e8:	bd10      	pop	{r4, pc}
 80163ea:	46c0      	nop			; (mov r8, r8)
 80163ec:	200000d0 	.word	0x200000d0
 80163f0:	20000500 	.word	0x20000500

080163f4 <strtok>:
 80163f4:	4b03      	ldr	r3, [pc, #12]	; (8016404 <strtok+0x10>)
 80163f6:	b510      	push	{r4, lr}
 80163f8:	681a      	ldr	r2, [r3, #0]
 80163fa:	2301      	movs	r3, #1
 80163fc:	325c      	adds	r2, #92	; 0x5c
 80163fe:	f000 f803 	bl	8016408 <__strtok_r>
 8016402:	bd10      	pop	{r4, pc}
 8016404:	200000d0 	.word	0x200000d0

08016408 <__strtok_r>:
 8016408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801640a:	2800      	cmp	r0, #0
 801640c:	d104      	bne.n	8016418 <__strtok_r+0x10>
 801640e:	6810      	ldr	r0, [r2, #0]
 8016410:	2800      	cmp	r0, #0
 8016412:	d101      	bne.n	8016418 <__strtok_r+0x10>
 8016414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016416:	0020      	movs	r0, r4
 8016418:	000e      	movs	r6, r1
 801641a:	7805      	ldrb	r5, [r0, #0]
 801641c:	1c44      	adds	r4, r0, #1
 801641e:	7837      	ldrb	r7, [r6, #0]
 8016420:	2f00      	cmp	r7, #0
 8016422:	d104      	bne.n	801642e <__strtok_r+0x26>
 8016424:	2d00      	cmp	r5, #0
 8016426:	d110      	bne.n	801644a <__strtok_r+0x42>
 8016428:	6015      	str	r5, [r2, #0]
 801642a:	0028      	movs	r0, r5
 801642c:	e7f2      	b.n	8016414 <__strtok_r+0xc>
 801642e:	3601      	adds	r6, #1
 8016430:	42bd      	cmp	r5, r7
 8016432:	d1f4      	bne.n	801641e <__strtok_r+0x16>
 8016434:	2b00      	cmp	r3, #0
 8016436:	d1ee      	bne.n	8016416 <__strtok_r+0xe>
 8016438:	6014      	str	r4, [r2, #0]
 801643a:	7003      	strb	r3, [r0, #0]
 801643c:	e7ea      	b.n	8016414 <__strtok_r+0xc>
 801643e:	0033      	movs	r3, r6
 8016440:	e00d      	b.n	801645e <__strtok_r+0x56>
 8016442:	3501      	adds	r5, #1
 8016444:	2f00      	cmp	r7, #0
 8016446:	d103      	bne.n	8016450 <__strtok_r+0x48>
 8016448:	001c      	movs	r4, r3
 801644a:	000d      	movs	r5, r1
 801644c:	7826      	ldrb	r6, [r4, #0]
 801644e:	1c63      	adds	r3, r4, #1
 8016450:	782f      	ldrb	r7, [r5, #0]
 8016452:	42be      	cmp	r6, r7
 8016454:	d1f5      	bne.n	8016442 <__strtok_r+0x3a>
 8016456:	2e00      	cmp	r6, #0
 8016458:	d0f1      	beq.n	801643e <__strtok_r+0x36>
 801645a:	2100      	movs	r1, #0
 801645c:	7021      	strb	r1, [r4, #0]
 801645e:	6013      	str	r3, [r2, #0]
 8016460:	e7d8      	b.n	8016414 <__strtok_r+0xc>
	...

08016464 <_strtol_l.isra.0>:
 8016464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016466:	001f      	movs	r7, r3
 8016468:	000e      	movs	r6, r1
 801646a:	b087      	sub	sp, #28
 801646c:	9005      	str	r0, [sp, #20]
 801646e:	9101      	str	r1, [sp, #4]
 8016470:	9202      	str	r2, [sp, #8]
 8016472:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016474:	7834      	ldrb	r4, [r6, #0]
 8016476:	f7fe fc9f 	bl	8014db8 <__locale_ctype_ptr_l>
 801647a:	2208      	movs	r2, #8
 801647c:	1900      	adds	r0, r0, r4
 801647e:	7843      	ldrb	r3, [r0, #1]
 8016480:	1c75      	adds	r5, r6, #1
 8016482:	4013      	ands	r3, r2
 8016484:	d136      	bne.n	80164f4 <_strtol_l.isra.0+0x90>
 8016486:	2c2d      	cmp	r4, #45	; 0x2d
 8016488:	d136      	bne.n	80164f8 <_strtol_l.isra.0+0x94>
 801648a:	1cb5      	adds	r5, r6, #2
 801648c:	7874      	ldrb	r4, [r6, #1]
 801648e:	2601      	movs	r6, #1
 8016490:	2f00      	cmp	r7, #0
 8016492:	d062      	beq.n	801655a <_strtol_l.isra.0+0xf6>
 8016494:	2f10      	cmp	r7, #16
 8016496:	d109      	bne.n	80164ac <_strtol_l.isra.0+0x48>
 8016498:	2c30      	cmp	r4, #48	; 0x30
 801649a:	d107      	bne.n	80164ac <_strtol_l.isra.0+0x48>
 801649c:	2220      	movs	r2, #32
 801649e:	782b      	ldrb	r3, [r5, #0]
 80164a0:	4393      	bics	r3, r2
 80164a2:	2b58      	cmp	r3, #88	; 0x58
 80164a4:	d154      	bne.n	8016550 <_strtol_l.isra.0+0xec>
 80164a6:	2710      	movs	r7, #16
 80164a8:	786c      	ldrb	r4, [r5, #1]
 80164aa:	3502      	adds	r5, #2
 80164ac:	4b2d      	ldr	r3, [pc, #180]	; (8016564 <_strtol_l.isra.0+0x100>)
 80164ae:	0039      	movs	r1, r7
 80164b0:	18f3      	adds	r3, r6, r3
 80164b2:	0018      	movs	r0, r3
 80164b4:	9303      	str	r3, [sp, #12]
 80164b6:	f7e9 fed1 	bl	800025c <__aeabi_uidivmod>
 80164ba:	9104      	str	r1, [sp, #16]
 80164bc:	2101      	movs	r1, #1
 80164be:	2300      	movs	r3, #0
 80164c0:	4249      	negs	r1, r1
 80164c2:	0002      	movs	r2, r0
 80164c4:	468c      	mov	ip, r1
 80164c6:	0018      	movs	r0, r3
 80164c8:	0021      	movs	r1, r4
 80164ca:	3930      	subs	r1, #48	; 0x30
 80164cc:	2909      	cmp	r1, #9
 80164ce:	d81a      	bhi.n	8016506 <_strtol_l.isra.0+0xa2>
 80164d0:	000c      	movs	r4, r1
 80164d2:	42a7      	cmp	r7, r4
 80164d4:	dd23      	ble.n	801651e <_strtol_l.isra.0+0xba>
 80164d6:	1c59      	adds	r1, r3, #1
 80164d8:	d009      	beq.n	80164ee <_strtol_l.isra.0+0x8a>
 80164da:	4663      	mov	r3, ip
 80164dc:	4282      	cmp	r2, r0
 80164de:	d306      	bcc.n	80164ee <_strtol_l.isra.0+0x8a>
 80164e0:	d102      	bne.n	80164e8 <_strtol_l.isra.0+0x84>
 80164e2:	9904      	ldr	r1, [sp, #16]
 80164e4:	42a1      	cmp	r1, r4
 80164e6:	db02      	blt.n	80164ee <_strtol_l.isra.0+0x8a>
 80164e8:	2301      	movs	r3, #1
 80164ea:	4378      	muls	r0, r7
 80164ec:	1820      	adds	r0, r4, r0
 80164ee:	782c      	ldrb	r4, [r5, #0]
 80164f0:	3501      	adds	r5, #1
 80164f2:	e7e9      	b.n	80164c8 <_strtol_l.isra.0+0x64>
 80164f4:	002e      	movs	r6, r5
 80164f6:	e7bc      	b.n	8016472 <_strtol_l.isra.0+0xe>
 80164f8:	2c2b      	cmp	r4, #43	; 0x2b
 80164fa:	d001      	beq.n	8016500 <_strtol_l.isra.0+0x9c>
 80164fc:	001e      	movs	r6, r3
 80164fe:	e7c7      	b.n	8016490 <_strtol_l.isra.0+0x2c>
 8016500:	1cb5      	adds	r5, r6, #2
 8016502:	7874      	ldrb	r4, [r6, #1]
 8016504:	e7fa      	b.n	80164fc <_strtol_l.isra.0+0x98>
 8016506:	0021      	movs	r1, r4
 8016508:	3941      	subs	r1, #65	; 0x41
 801650a:	2919      	cmp	r1, #25
 801650c:	d801      	bhi.n	8016512 <_strtol_l.isra.0+0xae>
 801650e:	3c37      	subs	r4, #55	; 0x37
 8016510:	e7df      	b.n	80164d2 <_strtol_l.isra.0+0x6e>
 8016512:	0021      	movs	r1, r4
 8016514:	3961      	subs	r1, #97	; 0x61
 8016516:	2919      	cmp	r1, #25
 8016518:	d801      	bhi.n	801651e <_strtol_l.isra.0+0xba>
 801651a:	3c57      	subs	r4, #87	; 0x57
 801651c:	e7d9      	b.n	80164d2 <_strtol_l.isra.0+0x6e>
 801651e:	1c5a      	adds	r2, r3, #1
 8016520:	d108      	bne.n	8016534 <_strtol_l.isra.0+0xd0>
 8016522:	9a05      	ldr	r2, [sp, #20]
 8016524:	3323      	adds	r3, #35	; 0x23
 8016526:	6013      	str	r3, [r2, #0]
 8016528:	9b02      	ldr	r3, [sp, #8]
 801652a:	9803      	ldr	r0, [sp, #12]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d109      	bne.n	8016544 <_strtol_l.isra.0+0xe0>
 8016530:	b007      	add	sp, #28
 8016532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016534:	2e00      	cmp	r6, #0
 8016536:	d000      	beq.n	801653a <_strtol_l.isra.0+0xd6>
 8016538:	4240      	negs	r0, r0
 801653a:	9a02      	ldr	r2, [sp, #8]
 801653c:	2a00      	cmp	r2, #0
 801653e:	d0f7      	beq.n	8016530 <_strtol_l.isra.0+0xcc>
 8016540:	2b00      	cmp	r3, #0
 8016542:	d001      	beq.n	8016548 <_strtol_l.isra.0+0xe4>
 8016544:	1e6b      	subs	r3, r5, #1
 8016546:	9301      	str	r3, [sp, #4]
 8016548:	9b02      	ldr	r3, [sp, #8]
 801654a:	9a01      	ldr	r2, [sp, #4]
 801654c:	601a      	str	r2, [r3, #0]
 801654e:	e7ef      	b.n	8016530 <_strtol_l.isra.0+0xcc>
 8016550:	2430      	movs	r4, #48	; 0x30
 8016552:	2f00      	cmp	r7, #0
 8016554:	d1aa      	bne.n	80164ac <_strtol_l.isra.0+0x48>
 8016556:	2708      	movs	r7, #8
 8016558:	e7a8      	b.n	80164ac <_strtol_l.isra.0+0x48>
 801655a:	2c30      	cmp	r4, #48	; 0x30
 801655c:	d09e      	beq.n	801649c <_strtol_l.isra.0+0x38>
 801655e:	270a      	movs	r7, #10
 8016560:	e7a4      	b.n	80164ac <_strtol_l.isra.0+0x48>
 8016562:	46c0      	nop			; (mov r8, r8)
 8016564:	7fffffff 	.word	0x7fffffff

08016568 <strtol>:
 8016568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801656a:	0013      	movs	r3, r2
 801656c:	4a06      	ldr	r2, [pc, #24]	; (8016588 <strtol+0x20>)
 801656e:	0005      	movs	r5, r0
 8016570:	6810      	ldr	r0, [r2, #0]
 8016572:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8016574:	2c00      	cmp	r4, #0
 8016576:	d100      	bne.n	801657a <strtol+0x12>
 8016578:	4c04      	ldr	r4, [pc, #16]	; (801658c <strtol+0x24>)
 801657a:	000a      	movs	r2, r1
 801657c:	9400      	str	r4, [sp, #0]
 801657e:	0029      	movs	r1, r5
 8016580:	f7ff ff70 	bl	8016464 <_strtol_l.isra.0>
 8016584:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8016586:	46c0      	nop			; (mov r8, r8)
 8016588:	200000d0 	.word	0x200000d0
 801658c:	20000500 	.word	0x20000500

08016590 <_svfprintf_r>:
 8016590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016592:	b0d9      	sub	sp, #356	; 0x164
 8016594:	910b      	str	r1, [sp, #44]	; 0x2c
 8016596:	9209      	str	r2, [sp, #36]	; 0x24
 8016598:	001c      	movs	r4, r3
 801659a:	900a      	str	r0, [sp, #40]	; 0x28
 801659c:	f002 fd26 	bl	8018fec <_localeconv_r>
 80165a0:	6803      	ldr	r3, [r0, #0]
 80165a2:	0018      	movs	r0, r3
 80165a4:	931c      	str	r3, [sp, #112]	; 0x70
 80165a6:	f7e9 fdb7 	bl	8000118 <strlen>
 80165aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165ac:	9014      	str	r0, [sp, #80]	; 0x50
 80165ae:	899b      	ldrh	r3, [r3, #12]
 80165b0:	061b      	lsls	r3, r3, #24
 80165b2:	d518      	bpl.n	80165e6 <_svfprintf_r+0x56>
 80165b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165b6:	691b      	ldr	r3, [r3, #16]
 80165b8:	9308      	str	r3, [sp, #32]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d113      	bne.n	80165e6 <_svfprintf_r+0x56>
 80165be:	2140      	movs	r1, #64	; 0x40
 80165c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165c2:	f7fe fc1f 	bl	8014e04 <_malloc_r>
 80165c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165c8:	6018      	str	r0, [r3, #0]
 80165ca:	6118      	str	r0, [r3, #16]
 80165cc:	2800      	cmp	r0, #0
 80165ce:	d107      	bne.n	80165e0 <_svfprintf_r+0x50>
 80165d0:	230c      	movs	r3, #12
 80165d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80165d4:	6013      	str	r3, [r2, #0]
 80165d6:	3b0d      	subs	r3, #13
 80165d8:	9315      	str	r3, [sp, #84]	; 0x54
 80165da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80165dc:	b059      	add	sp, #356	; 0x164
 80165de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165e0:	2340      	movs	r3, #64	; 0x40
 80165e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80165e4:	6153      	str	r3, [r2, #20]
 80165e6:	2600      	movs	r6, #0
 80165e8:	af2f      	add	r7, sp, #188	; 0xbc
 80165ea:	972c      	str	r7, [sp, #176]	; 0xb0
 80165ec:	962e      	str	r6, [sp, #184]	; 0xb8
 80165ee:	962d      	str	r6, [sp, #180]	; 0xb4
 80165f0:	960d      	str	r6, [sp, #52]	; 0x34
 80165f2:	961a      	str	r6, [sp, #104]	; 0x68
 80165f4:	9619      	str	r6, [sp, #100]	; 0x64
 80165f6:	961e      	str	r6, [sp, #120]	; 0x78
 80165f8:	961d      	str	r6, [sp, #116]	; 0x74
 80165fa:	9613      	str	r6, [sp, #76]	; 0x4c
 80165fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80165fe:	961f      	str	r6, [sp, #124]	; 0x7c
 8016600:	9615      	str	r6, [sp, #84]	; 0x54
 8016602:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016604:	782b      	ldrb	r3, [r5, #0]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d002      	beq.n	8016610 <_svfprintf_r+0x80>
 801660a:	2b25      	cmp	r3, #37	; 0x25
 801660c:	d000      	beq.n	8016610 <_svfprintf_r+0x80>
 801660e:	e095      	b.n	801673c <_svfprintf_r+0x1ac>
 8016610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016612:	1aee      	subs	r6, r5, r3
 8016614:	d017      	beq.n	8016646 <_svfprintf_r+0xb6>
 8016616:	603b      	str	r3, [r7, #0]
 8016618:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801661a:	607e      	str	r6, [r7, #4]
 801661c:	199b      	adds	r3, r3, r6
 801661e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016620:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016622:	3708      	adds	r7, #8
 8016624:	9308      	str	r3, [sp, #32]
 8016626:	3301      	adds	r3, #1
 8016628:	932d      	str	r3, [sp, #180]	; 0xb4
 801662a:	2b07      	cmp	r3, #7
 801662c:	dd08      	ble.n	8016640 <_svfprintf_r+0xb0>
 801662e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016632:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016634:	f003 f900 	bl	8019838 <__ssprint_r>
 8016638:	2800      	cmp	r0, #0
 801663a:	d000      	beq.n	801663e <_svfprintf_r+0xae>
 801663c:	e2d9      	b.n	8016bf2 <_svfprintf_r+0x662>
 801663e:	af2f      	add	r7, sp, #188	; 0xbc
 8016640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016642:	199b      	adds	r3, r3, r6
 8016644:	9315      	str	r3, [sp, #84]	; 0x54
 8016646:	782b      	ldrb	r3, [r5, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d101      	bne.n	8016650 <_svfprintf_r+0xc0>
 801664c:	f001 f9e5 	bl	8017a1a <_svfprintf_r+0x148a>
 8016650:	1c6b      	adds	r3, r5, #1
 8016652:	221b      	movs	r2, #27
 8016654:	9311      	str	r3, [sp, #68]	; 0x44
 8016656:	2300      	movs	r3, #0
 8016658:	a91e      	add	r1, sp, #120	; 0x78
 801665a:	1852      	adds	r2, r2, r1
 801665c:	7013      	strb	r3, [r2, #0]
 801665e:	2201      	movs	r2, #1
 8016660:	001e      	movs	r6, r3
 8016662:	2520      	movs	r5, #32
 8016664:	4252      	negs	r2, r2
 8016666:	9208      	str	r2, [sp, #32]
 8016668:	9316      	str	r3, [sp, #88]	; 0x58
 801666a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801666c:	781b      	ldrb	r3, [r3, #0]
 801666e:	930e      	str	r3, [sp, #56]	; 0x38
 8016670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016672:	3301      	adds	r3, #1
 8016674:	9311      	str	r3, [sp, #68]	; 0x44
 8016676:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016678:	3820      	subs	r0, #32
 801667a:	285a      	cmp	r0, #90	; 0x5a
 801667c:	d901      	bls.n	8016682 <_svfprintf_r+0xf2>
 801667e:	f000 fe3d 	bl	80172fc <_svfprintf_r+0xd6c>
 8016682:	f7e9 fd5b 	bl	800013c <__gnu_thumb1_case_shi>
 8016686:	009e      	.short	0x009e
 8016688:	063b063b 	.word	0x063b063b
 801668c:	063b00a7 	.word	0x063b00a7
 8016690:	063b063b 	.word	0x063b063b
 8016694:	063b0080 	.word	0x063b0080
 8016698:	00a9063b 	.word	0x00a9063b
 801669c:	063b00b3 	.word	0x063b00b3
 80166a0:	00b900b1 	.word	0x00b900b1
 80166a4:	00dd063b 	.word	0x00dd063b
 80166a8:	00df00df 	.word	0x00df00df
 80166ac:	00df00df 	.word	0x00df00df
 80166b0:	00df00df 	.word	0x00df00df
 80166b4:	00df00df 	.word	0x00df00df
 80166b8:	063b00df 	.word	0x063b00df
 80166bc:	063b063b 	.word	0x063b063b
 80166c0:	063b063b 	.word	0x063b063b
 80166c4:	063b063b 	.word	0x063b063b
 80166c8:	063b0240 	.word	0x063b0240
 80166cc:	01fd010a 	.word	0x01fd010a
 80166d0:	02400240 	.word	0x02400240
 80166d4:	063b0240 	.word	0x063b0240
 80166d8:	063b063b 	.word	0x063b063b
 80166dc:	00f1063b 	.word	0x00f1063b
 80166e0:	063b063b 	.word	0x063b063b
 80166e4:	063b04e2 	.word	0x063b04e2
 80166e8:	063b063b 	.word	0x063b063b
 80166ec:	063b0537 	.word	0x063b0537
 80166f0:	063b0557 	.word	0x063b0557
 80166f4:	005d063b 	.word	0x005d063b
 80166f8:	063b063b 	.word	0x063b063b
 80166fc:	063b063b 	.word	0x063b063b
 8016700:	063b063b 	.word	0x063b063b
 8016704:	063b063b 	.word	0x063b063b
 8016708:	063b0240 	.word	0x063b0240
 801670c:	01ff010a 	.word	0x01ff010a
 8016710:	02400240 	.word	0x02400240
 8016714:	00f30240 	.word	0x00f30240
 8016718:	010601ff 	.word	0x010601ff
 801671c:	00ff063b 	.word	0x00ff063b
 8016720:	04c5063b 	.word	0x04c5063b
 8016724:	052704e4 	.word	0x052704e4
 8016728:	063b0106 	.word	0x063b0106
 801672c:	fff20537 	.word	0xfff20537
 8016730:	063b0559 	.word	0x063b0559
 8016734:	0582063b 	.word	0x0582063b
 8016738:	fff2063b 	.word	0xfff2063b
 801673c:	3501      	adds	r5, #1
 801673e:	e761      	b.n	8016604 <_svfprintf_r+0x74>
 8016740:	4bcb      	ldr	r3, [pc, #812]	; (8016a70 <_svfprintf_r+0x4e0>)
 8016742:	2220      	movs	r2, #32
 8016744:	931e      	str	r3, [sp, #120]	; 0x78
 8016746:	4032      	ands	r2, r6
 8016748:	d101      	bne.n	801674e <_svfprintf_r+0x1be>
 801674a:	f000 fd21 	bl	8017190 <_svfprintf_r+0xc00>
 801674e:	2307      	movs	r3, #7
 8016750:	3407      	adds	r4, #7
 8016752:	439c      	bics	r4, r3
 8016754:	0023      	movs	r3, r4
 8016756:	3308      	adds	r3, #8
 8016758:	9312      	str	r3, [sp, #72]	; 0x48
 801675a:	6823      	ldr	r3, [r4, #0]
 801675c:	6864      	ldr	r4, [r4, #4]
 801675e:	9306      	str	r3, [sp, #24]
 8016760:	9407      	str	r4, [sp, #28]
 8016762:	07f3      	lsls	r3, r6, #31
 8016764:	d50a      	bpl.n	801677c <_svfprintf_r+0x1ec>
 8016766:	9b06      	ldr	r3, [sp, #24]
 8016768:	9a07      	ldr	r2, [sp, #28]
 801676a:	4313      	orrs	r3, r2
 801676c:	d006      	beq.n	801677c <_svfprintf_r+0x1ec>
 801676e:	2230      	movs	r2, #48	; 0x30
 8016770:	ab25      	add	r3, sp, #148	; 0x94
 8016772:	701a      	strb	r2, [r3, #0]
 8016774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016776:	705a      	strb	r2, [r3, #1]
 8016778:	2302      	movs	r3, #2
 801677a:	431e      	orrs	r6, r3
 801677c:	4bbd      	ldr	r3, [pc, #756]	; (8016a74 <_svfprintf_r+0x4e4>)
 801677e:	401e      	ands	r6, r3
 8016780:	2302      	movs	r3, #2
 8016782:	f000 fc74 	bl	801706e <_svfprintf_r+0xade>
 8016786:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016788:	f002 fc30 	bl	8018fec <_localeconv_r>
 801678c:	6843      	ldr	r3, [r0, #4]
 801678e:	0018      	movs	r0, r3
 8016790:	931f      	str	r3, [sp, #124]	; 0x7c
 8016792:	f7e9 fcc1 	bl	8000118 <strlen>
 8016796:	901b      	str	r0, [sp, #108]	; 0x6c
 8016798:	980a      	ldr	r0, [sp, #40]	; 0x28
 801679a:	f002 fc27 	bl	8018fec <_localeconv_r>
 801679e:	6883      	ldr	r3, [r0, #8]
 80167a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80167a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d100      	bne.n	80167aa <_svfprintf_r+0x21a>
 80167a8:	e75f      	b.n	801666a <_svfprintf_r+0xda>
 80167aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d100      	bne.n	80167b2 <_svfprintf_r+0x222>
 80167b0:	e75b      	b.n	801666a <_svfprintf_r+0xda>
 80167b2:	781b      	ldrb	r3, [r3, #0]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d100      	bne.n	80167ba <_svfprintf_r+0x22a>
 80167b8:	e757      	b.n	801666a <_svfprintf_r+0xda>
 80167ba:	2380      	movs	r3, #128	; 0x80
 80167bc:	00db      	lsls	r3, r3, #3
 80167be:	431e      	orrs	r6, r3
 80167c0:	e753      	b.n	801666a <_svfprintf_r+0xda>
 80167c2:	231b      	movs	r3, #27
 80167c4:	aa1e      	add	r2, sp, #120	; 0x78
 80167c6:	189b      	adds	r3, r3, r2
 80167c8:	781a      	ldrb	r2, [r3, #0]
 80167ca:	2a00      	cmp	r2, #0
 80167cc:	d000      	beq.n	80167d0 <_svfprintf_r+0x240>
 80167ce:	e74c      	b.n	801666a <_svfprintf_r+0xda>
 80167d0:	701d      	strb	r5, [r3, #0]
 80167d2:	e74a      	b.n	801666a <_svfprintf_r+0xda>
 80167d4:	2301      	movs	r3, #1
 80167d6:	e7f2      	b.n	80167be <_svfprintf_r+0x22e>
 80167d8:	6823      	ldr	r3, [r4, #0]
 80167da:	3404      	adds	r4, #4
 80167dc:	9316      	str	r3, [sp, #88]	; 0x58
 80167de:	2b00      	cmp	r3, #0
 80167e0:	db00      	blt.n	80167e4 <_svfprintf_r+0x254>
 80167e2:	e742      	b.n	801666a <_svfprintf_r+0xda>
 80167e4:	425b      	negs	r3, r3
 80167e6:	9316      	str	r3, [sp, #88]	; 0x58
 80167e8:	2304      	movs	r3, #4
 80167ea:	e7e8      	b.n	80167be <_svfprintf_r+0x22e>
 80167ec:	231b      	movs	r3, #27
 80167ee:	aa1e      	add	r2, sp, #120	; 0x78
 80167f0:	189b      	adds	r3, r3, r2
 80167f2:	222b      	movs	r2, #43	; 0x2b
 80167f4:	701a      	strb	r2, [r3, #0]
 80167f6:	e738      	b.n	801666a <_svfprintf_r+0xda>
 80167f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80167fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80167fc:	7812      	ldrb	r2, [r2, #0]
 80167fe:	3301      	adds	r3, #1
 8016800:	920e      	str	r2, [sp, #56]	; 0x38
 8016802:	2a2a      	cmp	r2, #42	; 0x2a
 8016804:	d008      	beq.n	8016818 <_svfprintf_r+0x288>
 8016806:	2200      	movs	r2, #0
 8016808:	9208      	str	r2, [sp, #32]
 801680a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801680c:	001a      	movs	r2, r3
 801680e:	3930      	subs	r1, #48	; 0x30
 8016810:	2909      	cmp	r1, #9
 8016812:	d90c      	bls.n	801682e <_svfprintf_r+0x29e>
 8016814:	9211      	str	r2, [sp, #68]	; 0x44
 8016816:	e72e      	b.n	8016676 <_svfprintf_r+0xe6>
 8016818:	6821      	ldr	r1, [r4, #0]
 801681a:	1d22      	adds	r2, r4, #4
 801681c:	9108      	str	r1, [sp, #32]
 801681e:	2900      	cmp	r1, #0
 8016820:	da02      	bge.n	8016828 <_svfprintf_r+0x298>
 8016822:	2101      	movs	r1, #1
 8016824:	4249      	negs	r1, r1
 8016826:	9108      	str	r1, [sp, #32]
 8016828:	0014      	movs	r4, r2
 801682a:	9311      	str	r3, [sp, #68]	; 0x44
 801682c:	e71d      	b.n	801666a <_svfprintf_r+0xda>
 801682e:	200a      	movs	r0, #10
 8016830:	9a08      	ldr	r2, [sp, #32]
 8016832:	4342      	muls	r2, r0
 8016834:	1852      	adds	r2, r2, r1
 8016836:	9208      	str	r2, [sp, #32]
 8016838:	781a      	ldrb	r2, [r3, #0]
 801683a:	3301      	adds	r3, #1
 801683c:	920e      	str	r2, [sp, #56]	; 0x38
 801683e:	e7e4      	b.n	801680a <_svfprintf_r+0x27a>
 8016840:	2380      	movs	r3, #128	; 0x80
 8016842:	e7bc      	b.n	80167be <_svfprintf_r+0x22e>
 8016844:	2300      	movs	r3, #0
 8016846:	9316      	str	r3, [sp, #88]	; 0x58
 8016848:	220a      	movs	r2, #10
 801684a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801684c:	4353      	muls	r3, r2
 801684e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016850:	3a30      	subs	r2, #48	; 0x30
 8016852:	18d3      	adds	r3, r2, r3
 8016854:	9316      	str	r3, [sp, #88]	; 0x58
 8016856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016858:	1c5a      	adds	r2, r3, #1
 801685a:	781b      	ldrb	r3, [r3, #0]
 801685c:	9211      	str	r2, [sp, #68]	; 0x44
 801685e:	930e      	str	r3, [sp, #56]	; 0x38
 8016860:	3b30      	subs	r3, #48	; 0x30
 8016862:	2b09      	cmp	r3, #9
 8016864:	d9f0      	bls.n	8016848 <_svfprintf_r+0x2b8>
 8016866:	e7d5      	b.n	8016814 <_svfprintf_r+0x284>
 8016868:	2308      	movs	r3, #8
 801686a:	e7a8      	b.n	80167be <_svfprintf_r+0x22e>
 801686c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801686e:	781b      	ldrb	r3, [r3, #0]
 8016870:	2b68      	cmp	r3, #104	; 0x68
 8016872:	d105      	bne.n	8016880 <_svfprintf_r+0x2f0>
 8016874:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016876:	3301      	adds	r3, #1
 8016878:	9311      	str	r3, [sp, #68]	; 0x44
 801687a:	2380      	movs	r3, #128	; 0x80
 801687c:	009b      	lsls	r3, r3, #2
 801687e:	e79e      	b.n	80167be <_svfprintf_r+0x22e>
 8016880:	2340      	movs	r3, #64	; 0x40
 8016882:	e79c      	b.n	80167be <_svfprintf_r+0x22e>
 8016884:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016886:	781b      	ldrb	r3, [r3, #0]
 8016888:	2b6c      	cmp	r3, #108	; 0x6c
 801688a:	d104      	bne.n	8016896 <_svfprintf_r+0x306>
 801688c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801688e:	3301      	adds	r3, #1
 8016890:	9311      	str	r3, [sp, #68]	; 0x44
 8016892:	432e      	orrs	r6, r5
 8016894:	e6e9      	b.n	801666a <_svfprintf_r+0xda>
 8016896:	2310      	movs	r3, #16
 8016898:	e791      	b.n	80167be <_svfprintf_r+0x22e>
 801689a:	1d23      	adds	r3, r4, #4
 801689c:	6822      	ldr	r2, [r4, #0]
 801689e:	9312      	str	r3, [sp, #72]	; 0x48
 80168a0:	ab3f      	add	r3, sp, #252	; 0xfc
 80168a2:	701a      	strb	r2, [r3, #0]
 80168a4:	221b      	movs	r2, #27
 80168a6:	2000      	movs	r0, #0
 80168a8:	a91e      	add	r1, sp, #120	; 0x78
 80168aa:	1852      	adds	r2, r2, r1
 80168ac:	7010      	strb	r0, [r2, #0]
 80168ae:	2201      	movs	r2, #1
 80168b0:	0005      	movs	r5, r0
 80168b2:	900c      	str	r0, [sp, #48]	; 0x30
 80168b4:	9208      	str	r2, [sp, #32]
 80168b6:	9017      	str	r0, [sp, #92]	; 0x5c
 80168b8:	9010      	str	r0, [sp, #64]	; 0x40
 80168ba:	900f      	str	r0, [sp, #60]	; 0x3c
 80168bc:	9309      	str	r3, [sp, #36]	; 0x24
 80168be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80168c0:	9a08      	ldr	r2, [sp, #32]
 80168c2:	9318      	str	r3, [sp, #96]	; 0x60
 80168c4:	4293      	cmp	r3, r2
 80168c6:	da00      	bge.n	80168ca <_svfprintf_r+0x33a>
 80168c8:	9218      	str	r2, [sp, #96]	; 0x60
 80168ca:	231b      	movs	r3, #27
 80168cc:	aa1e      	add	r2, sp, #120	; 0x78
 80168ce:	189b      	adds	r3, r3, r2
 80168d0:	781b      	ldrb	r3, [r3, #0]
 80168d2:	1e5a      	subs	r2, r3, #1
 80168d4:	4193      	sbcs	r3, r2
 80168d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80168d8:	18d3      	adds	r3, r2, r3
 80168da:	9318      	str	r3, [sp, #96]	; 0x60
 80168dc:	2302      	movs	r3, #2
 80168de:	4033      	ands	r3, r6
 80168e0:	9320      	str	r3, [sp, #128]	; 0x80
 80168e2:	d002      	beq.n	80168ea <_svfprintf_r+0x35a>
 80168e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80168e6:	3302      	adds	r3, #2
 80168e8:	9318      	str	r3, [sp, #96]	; 0x60
 80168ea:	2384      	movs	r3, #132	; 0x84
 80168ec:	4033      	ands	r3, r6
 80168ee:	9321      	str	r3, [sp, #132]	; 0x84
 80168f0:	d121      	bne.n	8016936 <_svfprintf_r+0x3a6>
 80168f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80168f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80168f6:	1a9c      	subs	r4, r3, r2
 80168f8:	2c00      	cmp	r4, #0
 80168fa:	dd1c      	ble.n	8016936 <_svfprintf_r+0x3a6>
 80168fc:	0039      	movs	r1, r7
 80168fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016900:	485d      	ldr	r0, [pc, #372]	; (8016a78 <_svfprintf_r+0x4e8>)
 8016902:	9322      	str	r3, [sp, #136]	; 0x88
 8016904:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016906:	3301      	adds	r3, #1
 8016908:	3108      	adds	r1, #8
 801690a:	6038      	str	r0, [r7, #0]
 801690c:	2c10      	cmp	r4, #16
 801690e:	dd01      	ble.n	8016914 <_svfprintf_r+0x384>
 8016910:	f000 fd08 	bl	8017324 <_svfprintf_r+0xd94>
 8016914:	607c      	str	r4, [r7, #4]
 8016916:	18a4      	adds	r4, r4, r2
 8016918:	942e      	str	r4, [sp, #184]	; 0xb8
 801691a:	932d      	str	r3, [sp, #180]	; 0xb4
 801691c:	000f      	movs	r7, r1
 801691e:	2b07      	cmp	r3, #7
 8016920:	dd09      	ble.n	8016936 <_svfprintf_r+0x3a6>
 8016922:	aa2c      	add	r2, sp, #176	; 0xb0
 8016924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016926:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016928:	f002 ff86 	bl	8019838 <__ssprint_r>
 801692c:	2800      	cmp	r0, #0
 801692e:	d001      	beq.n	8016934 <_svfprintf_r+0x3a4>
 8016930:	f001 f852 	bl	80179d8 <_svfprintf_r+0x1448>
 8016934:	af2f      	add	r7, sp, #188	; 0xbc
 8016936:	231b      	movs	r3, #27
 8016938:	aa1e      	add	r2, sp, #120	; 0x78
 801693a:	189b      	adds	r3, r3, r2
 801693c:	781a      	ldrb	r2, [r3, #0]
 801693e:	2a00      	cmp	r2, #0
 8016940:	d017      	beq.n	8016972 <_svfprintf_r+0x3e2>
 8016942:	603b      	str	r3, [r7, #0]
 8016944:	2301      	movs	r3, #1
 8016946:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016948:	607b      	str	r3, [r7, #4]
 801694a:	0013      	movs	r3, r2
 801694c:	3301      	adds	r3, #1
 801694e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016950:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016952:	3708      	adds	r7, #8
 8016954:	9322      	str	r3, [sp, #136]	; 0x88
 8016956:	3301      	adds	r3, #1
 8016958:	932d      	str	r3, [sp, #180]	; 0xb4
 801695a:	2b07      	cmp	r3, #7
 801695c:	dd09      	ble.n	8016972 <_svfprintf_r+0x3e2>
 801695e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016962:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016964:	f002 ff68 	bl	8019838 <__ssprint_r>
 8016968:	2800      	cmp	r0, #0
 801696a:	d001      	beq.n	8016970 <_svfprintf_r+0x3e0>
 801696c:	f001 f834 	bl	80179d8 <_svfprintf_r+0x1448>
 8016970:	af2f      	add	r7, sp, #188	; 0xbc
 8016972:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016974:	2b00      	cmp	r3, #0
 8016976:	d019      	beq.n	80169ac <_svfprintf_r+0x41c>
 8016978:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801697a:	9320      	str	r3, [sp, #128]	; 0x80
 801697c:	ab25      	add	r3, sp, #148	; 0x94
 801697e:	603b      	str	r3, [r7, #0]
 8016980:	2302      	movs	r3, #2
 8016982:	607b      	str	r3, [r7, #4]
 8016984:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016986:	3708      	adds	r7, #8
 8016988:	3302      	adds	r3, #2
 801698a:	932e      	str	r3, [sp, #184]	; 0xb8
 801698c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801698e:	9320      	str	r3, [sp, #128]	; 0x80
 8016990:	3301      	adds	r3, #1
 8016992:	932d      	str	r3, [sp, #180]	; 0xb4
 8016994:	2b07      	cmp	r3, #7
 8016996:	dd09      	ble.n	80169ac <_svfprintf_r+0x41c>
 8016998:	aa2c      	add	r2, sp, #176	; 0xb0
 801699a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801699c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801699e:	f002 ff4b 	bl	8019838 <__ssprint_r>
 80169a2:	2800      	cmp	r0, #0
 80169a4:	d001      	beq.n	80169aa <_svfprintf_r+0x41a>
 80169a6:	f001 f817 	bl	80179d8 <_svfprintf_r+0x1448>
 80169aa:	af2f      	add	r7, sp, #188	; 0xbc
 80169ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80169ae:	2b80      	cmp	r3, #128	; 0x80
 80169b0:	d121      	bne.n	80169f6 <_svfprintf_r+0x466>
 80169b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80169b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80169b6:	1a9c      	subs	r4, r3, r2
 80169b8:	2c00      	cmp	r4, #0
 80169ba:	dd1c      	ble.n	80169f6 <_svfprintf_r+0x466>
 80169bc:	0039      	movs	r1, r7
 80169be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169c0:	482e      	ldr	r0, [pc, #184]	; (8016a7c <_svfprintf_r+0x4ec>)
 80169c2:	9320      	str	r3, [sp, #128]	; 0x80
 80169c4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80169c6:	3301      	adds	r3, #1
 80169c8:	3108      	adds	r1, #8
 80169ca:	6038      	str	r0, [r7, #0]
 80169cc:	2c10      	cmp	r4, #16
 80169ce:	dd01      	ble.n	80169d4 <_svfprintf_r+0x444>
 80169d0:	f000 fcbc 	bl	801734c <_svfprintf_r+0xdbc>
 80169d4:	607c      	str	r4, [r7, #4]
 80169d6:	18a4      	adds	r4, r4, r2
 80169d8:	942e      	str	r4, [sp, #184]	; 0xb8
 80169da:	932d      	str	r3, [sp, #180]	; 0xb4
 80169dc:	000f      	movs	r7, r1
 80169de:	2b07      	cmp	r3, #7
 80169e0:	dd09      	ble.n	80169f6 <_svfprintf_r+0x466>
 80169e2:	aa2c      	add	r2, sp, #176	; 0xb0
 80169e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169e8:	f002 ff26 	bl	8019838 <__ssprint_r>
 80169ec:	2800      	cmp	r0, #0
 80169ee:	d001      	beq.n	80169f4 <_svfprintf_r+0x464>
 80169f0:	f000 fff2 	bl	80179d8 <_svfprintf_r+0x1448>
 80169f4:	af2f      	add	r7, sp, #188	; 0xbc
 80169f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80169f8:	9a08      	ldr	r2, [sp, #32]
 80169fa:	1a9c      	subs	r4, r3, r2
 80169fc:	2c00      	cmp	r4, #0
 80169fe:	dd1c      	ble.n	8016a3a <_svfprintf_r+0x4aa>
 8016a00:	0039      	movs	r1, r7
 8016a02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a04:	481d      	ldr	r0, [pc, #116]	; (8016a7c <_svfprintf_r+0x4ec>)
 8016a06:	9317      	str	r3, [sp, #92]	; 0x5c
 8016a08:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016a0a:	3301      	adds	r3, #1
 8016a0c:	3108      	adds	r1, #8
 8016a0e:	6038      	str	r0, [r7, #0]
 8016a10:	2c10      	cmp	r4, #16
 8016a12:	dd01      	ble.n	8016a18 <_svfprintf_r+0x488>
 8016a14:	f000 fcb4 	bl	8017380 <_svfprintf_r+0xdf0>
 8016a18:	18a2      	adds	r2, r4, r2
 8016a1a:	607c      	str	r4, [r7, #4]
 8016a1c:	922e      	str	r2, [sp, #184]	; 0xb8
 8016a1e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a20:	000f      	movs	r7, r1
 8016a22:	2b07      	cmp	r3, #7
 8016a24:	dd09      	ble.n	8016a3a <_svfprintf_r+0x4aa>
 8016a26:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a2c:	f002 ff04 	bl	8019838 <__ssprint_r>
 8016a30:	2800      	cmp	r0, #0
 8016a32:	d001      	beq.n	8016a38 <_svfprintf_r+0x4a8>
 8016a34:	f000 ffd0 	bl	80179d8 <_svfprintf_r+0x1448>
 8016a38:	af2f      	add	r7, sp, #188	; 0xbc
 8016a3a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016a3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8016a3e:	05f3      	lsls	r3, r6, #23
 8016a40:	d501      	bpl.n	8016a46 <_svfprintf_r+0x4b6>
 8016a42:	f000 fcb1 	bl	80173a8 <_svfprintf_r+0xe18>
 8016a46:	9a08      	ldr	r2, [sp, #32]
 8016a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a4a:	4694      	mov	ip, r2
 8016a4c:	603b      	str	r3, [r7, #0]
 8016a4e:	9b08      	ldr	r3, [sp, #32]
 8016a50:	607b      	str	r3, [r7, #4]
 8016a52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a54:	4463      	add	r3, ip
 8016a56:	932e      	str	r3, [sp, #184]	; 0xb8
 8016a58:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a5a:	9308      	str	r3, [sp, #32]
 8016a5c:	3301      	adds	r3, #1
 8016a5e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a60:	2b07      	cmp	r3, #7
 8016a62:	dd01      	ble.n	8016a68 <_svfprintf_r+0x4d8>
 8016a64:	f000 fd94 	bl	8017590 <_svfprintf_r+0x1000>
 8016a68:	3708      	adds	r7, #8
 8016a6a:	f000 fce4 	bl	8017436 <_svfprintf_r+0xea6>
 8016a6e:	46c0      	nop			; (mov r8, r8)
 8016a70:	0801d249 	.word	0x0801d249
 8016a74:	fffffbff 	.word	0xfffffbff
 8016a78:	0801d25c 	.word	0x0801d25c
 8016a7c:	0801d26c 	.word	0x0801d26c
 8016a80:	2310      	movs	r3, #16
 8016a82:	431e      	orrs	r6, r3
 8016a84:	06b3      	lsls	r3, r6, #26
 8016a86:	d52c      	bpl.n	8016ae2 <_svfprintf_r+0x552>
 8016a88:	2307      	movs	r3, #7
 8016a8a:	3407      	adds	r4, #7
 8016a8c:	439c      	bics	r4, r3
 8016a8e:	0023      	movs	r3, r4
 8016a90:	3308      	adds	r3, #8
 8016a92:	9312      	str	r3, [sp, #72]	; 0x48
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	6864      	ldr	r4, [r4, #4]
 8016a98:	9306      	str	r3, [sp, #24]
 8016a9a:	9407      	str	r4, [sp, #28]
 8016a9c:	9b07      	ldr	r3, [sp, #28]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	da0b      	bge.n	8016aba <_svfprintf_r+0x52a>
 8016aa2:	9906      	ldr	r1, [sp, #24]
 8016aa4:	9a07      	ldr	r2, [sp, #28]
 8016aa6:	2400      	movs	r4, #0
 8016aa8:	424b      	negs	r3, r1
 8016aaa:	4194      	sbcs	r4, r2
 8016aac:	9306      	str	r3, [sp, #24]
 8016aae:	9407      	str	r4, [sp, #28]
 8016ab0:	231b      	movs	r3, #27
 8016ab2:	aa1e      	add	r2, sp, #120	; 0x78
 8016ab4:	189b      	adds	r3, r3, r2
 8016ab6:	222d      	movs	r2, #45	; 0x2d
 8016ab8:	701a      	strb	r2, [r3, #0]
 8016aba:	9b08      	ldr	r3, [sp, #32]
 8016abc:	3301      	adds	r3, #1
 8016abe:	d000      	beq.n	8016ac2 <_svfprintf_r+0x532>
 8016ac0:	e382      	b.n	80171c8 <_svfprintf_r+0xc38>
 8016ac2:	9b07      	ldr	r3, [sp, #28]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d000      	beq.n	8016aca <_svfprintf_r+0x53a>
 8016ac8:	e3b0      	b.n	801722c <_svfprintf_r+0xc9c>
 8016aca:	9b06      	ldr	r3, [sp, #24]
 8016acc:	2b09      	cmp	r3, #9
 8016ace:	d900      	bls.n	8016ad2 <_svfprintf_r+0x542>
 8016ad0:	e3ac      	b.n	801722c <_svfprintf_r+0xc9c>
 8016ad2:	23e7      	movs	r3, #231	; 0xe7
 8016ad4:	aa1e      	add	r2, sp, #120	; 0x78
 8016ad6:	189b      	adds	r3, r3, r2
 8016ad8:	9a06      	ldr	r2, [sp, #24]
 8016ada:	3230      	adds	r2, #48	; 0x30
 8016adc:	701a      	strb	r2, [r3, #0]
 8016ade:	9309      	str	r3, [sp, #36]	; 0x24
 8016ae0:	e395      	b.n	801720e <_svfprintf_r+0xc7e>
 8016ae2:	1d23      	adds	r3, r4, #4
 8016ae4:	9312      	str	r3, [sp, #72]	; 0x48
 8016ae6:	06f3      	lsls	r3, r6, #27
 8016ae8:	d504      	bpl.n	8016af4 <_svfprintf_r+0x564>
 8016aea:	6823      	ldr	r3, [r4, #0]
 8016aec:	9306      	str	r3, [sp, #24]
 8016aee:	17db      	asrs	r3, r3, #31
 8016af0:	9307      	str	r3, [sp, #28]
 8016af2:	e7d3      	b.n	8016a9c <_svfprintf_r+0x50c>
 8016af4:	6823      	ldr	r3, [r4, #0]
 8016af6:	0672      	lsls	r2, r6, #25
 8016af8:	d501      	bpl.n	8016afe <_svfprintf_r+0x56e>
 8016afa:	b21b      	sxth	r3, r3
 8016afc:	e7f6      	b.n	8016aec <_svfprintf_r+0x55c>
 8016afe:	05b2      	lsls	r2, r6, #22
 8016b00:	d5f4      	bpl.n	8016aec <_svfprintf_r+0x55c>
 8016b02:	b25b      	sxtb	r3, r3
 8016b04:	e7f2      	b.n	8016aec <_svfprintf_r+0x55c>
 8016b06:	2307      	movs	r3, #7
 8016b08:	3407      	adds	r4, #7
 8016b0a:	439c      	bics	r4, r3
 8016b0c:	0023      	movs	r3, r4
 8016b0e:	2201      	movs	r2, #1
 8016b10:	3308      	adds	r3, #8
 8016b12:	9312      	str	r3, [sp, #72]	; 0x48
 8016b14:	6823      	ldr	r3, [r4, #0]
 8016b16:	4252      	negs	r2, r2
 8016b18:	931a      	str	r3, [sp, #104]	; 0x68
 8016b1a:	6863      	ldr	r3, [r4, #4]
 8016b1c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016b1e:	005c      	lsls	r4, r3, #1
 8016b20:	0864      	lsrs	r4, r4, #1
 8016b22:	9319      	str	r3, [sp, #100]	; 0x64
 8016b24:	0028      	movs	r0, r5
 8016b26:	4bcf      	ldr	r3, [pc, #828]	; (8016e64 <_svfprintf_r+0x8d4>)
 8016b28:	0021      	movs	r1, r4
 8016b2a:	f7ec fa3d 	bl	8002fa8 <__aeabi_dcmpun>
 8016b2e:	2800      	cmp	r0, #0
 8016b30:	d125      	bne.n	8016b7e <_svfprintf_r+0x5ee>
 8016b32:	2201      	movs	r2, #1
 8016b34:	4bcb      	ldr	r3, [pc, #812]	; (8016e64 <_svfprintf_r+0x8d4>)
 8016b36:	4252      	negs	r2, r2
 8016b38:	0028      	movs	r0, r5
 8016b3a:	0021      	movs	r1, r4
 8016b3c:	f7e9 fc9e 	bl	800047c <__aeabi_dcmple>
 8016b40:	2800      	cmp	r0, #0
 8016b42:	d11c      	bne.n	8016b7e <_svfprintf_r+0x5ee>
 8016b44:	2200      	movs	r2, #0
 8016b46:	2300      	movs	r3, #0
 8016b48:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016b4a:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016b4c:	f7e9 fc8c 	bl	8000468 <__aeabi_dcmplt>
 8016b50:	2800      	cmp	r0, #0
 8016b52:	d004      	beq.n	8016b5e <_svfprintf_r+0x5ce>
 8016b54:	231b      	movs	r3, #27
 8016b56:	aa1e      	add	r2, sp, #120	; 0x78
 8016b58:	189b      	adds	r3, r3, r2
 8016b5a:	222d      	movs	r2, #45	; 0x2d
 8016b5c:	701a      	strb	r2, [r3, #0]
 8016b5e:	4bc2      	ldr	r3, [pc, #776]	; (8016e68 <_svfprintf_r+0x8d8>)
 8016b60:	9309      	str	r3, [sp, #36]	; 0x24
 8016b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b64:	2b47      	cmp	r3, #71	; 0x47
 8016b66:	dc01      	bgt.n	8016b6c <_svfprintf_r+0x5dc>
 8016b68:	4bc0      	ldr	r3, [pc, #768]	; (8016e6c <_svfprintf_r+0x8dc>)
 8016b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8016b6c:	2380      	movs	r3, #128	; 0x80
 8016b6e:	439e      	bics	r6, r3
 8016b70:	2300      	movs	r3, #0
 8016b72:	930c      	str	r3, [sp, #48]	; 0x30
 8016b74:	3303      	adds	r3, #3
 8016b76:	9308      	str	r3, [sp, #32]
 8016b78:	2300      	movs	r3, #0
 8016b7a:	9317      	str	r3, [sp, #92]	; 0x5c
 8016b7c:	e34f      	b.n	801721e <_svfprintf_r+0xc8e>
 8016b7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016b80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016b82:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016b84:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016b86:	f7ec fa0f 	bl	8002fa8 <__aeabi_dcmpun>
 8016b8a:	2800      	cmp	r0, #0
 8016b8c:	d00e      	beq.n	8016bac <_svfprintf_r+0x61c>
 8016b8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	da04      	bge.n	8016b9e <_svfprintf_r+0x60e>
 8016b94:	231b      	movs	r3, #27
 8016b96:	aa1e      	add	r2, sp, #120	; 0x78
 8016b98:	189b      	adds	r3, r3, r2
 8016b9a:	222d      	movs	r2, #45	; 0x2d
 8016b9c:	701a      	strb	r2, [r3, #0]
 8016b9e:	4bb4      	ldr	r3, [pc, #720]	; (8016e70 <_svfprintf_r+0x8e0>)
 8016ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ba4:	2b47      	cmp	r3, #71	; 0x47
 8016ba6:	dce1      	bgt.n	8016b6c <_svfprintf_r+0x5dc>
 8016ba8:	4bb2      	ldr	r3, [pc, #712]	; (8016e74 <_svfprintf_r+0x8e4>)
 8016baa:	e7de      	b.n	8016b6a <_svfprintf_r+0x5da>
 8016bac:	2320      	movs	r3, #32
 8016bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016bb0:	439a      	bics	r2, r3
 8016bb2:	920f      	str	r2, [sp, #60]	; 0x3c
 8016bb4:	2a41      	cmp	r2, #65	; 0x41
 8016bb6:	d124      	bne.n	8016c02 <_svfprintf_r+0x672>
 8016bb8:	2230      	movs	r2, #48	; 0x30
 8016bba:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016bbc:	ab25      	add	r3, sp, #148	; 0x94
 8016bbe:	701a      	strb	r2, [r3, #0]
 8016bc0:	3228      	adds	r2, #40	; 0x28
 8016bc2:	2961      	cmp	r1, #97	; 0x61
 8016bc4:	d100      	bne.n	8016bc8 <_svfprintf_r+0x638>
 8016bc6:	3220      	adds	r2, #32
 8016bc8:	705a      	strb	r2, [r3, #1]
 8016bca:	2302      	movs	r3, #2
 8016bcc:	431e      	orrs	r6, r3
 8016bce:	9b08      	ldr	r3, [sp, #32]
 8016bd0:	2b63      	cmp	r3, #99	; 0x63
 8016bd2:	dc00      	bgt.n	8016bd6 <_svfprintf_r+0x646>
 8016bd4:	e09e      	b.n	8016d14 <_svfprintf_r+0x784>
 8016bd6:	1c59      	adds	r1, r3, #1
 8016bd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016bda:	f7fe f913 	bl	8014e04 <_malloc_r>
 8016bde:	9009      	str	r0, [sp, #36]	; 0x24
 8016be0:	2800      	cmp	r0, #0
 8016be2:	d000      	beq.n	8016be6 <_svfprintf_r+0x656>
 8016be4:	e09b      	b.n	8016d1e <_svfprintf_r+0x78e>
 8016be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016be8:	899a      	ldrh	r2, [r3, #12]
 8016bea:	2340      	movs	r3, #64	; 0x40
 8016bec:	4313      	orrs	r3, r2
 8016bee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016bf0:	8193      	strh	r3, [r2, #12]
 8016bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bf4:	899b      	ldrh	r3, [r3, #12]
 8016bf6:	065b      	lsls	r3, r3, #25
 8016bf8:	d400      	bmi.n	8016bfc <_svfprintf_r+0x66c>
 8016bfa:	e4ee      	b.n	80165da <_svfprintf_r+0x4a>
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	425b      	negs	r3, r3
 8016c00:	e4ea      	b.n	80165d8 <_svfprintf_r+0x48>
 8016c02:	9b08      	ldr	r3, [sp, #32]
 8016c04:	900c      	str	r0, [sp, #48]	; 0x30
 8016c06:	3301      	adds	r3, #1
 8016c08:	d100      	bne.n	8016c0c <_svfprintf_r+0x67c>
 8016c0a:	e08b      	b.n	8016d24 <_svfprintf_r+0x794>
 8016c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c0e:	2b47      	cmp	r3, #71	; 0x47
 8016c10:	d103      	bne.n	8016c1a <_svfprintf_r+0x68a>
 8016c12:	9b08      	ldr	r3, [sp, #32]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d100      	bne.n	8016c1a <_svfprintf_r+0x68a>
 8016c18:	e087      	b.n	8016d2a <_svfprintf_r+0x79a>
 8016c1a:	2380      	movs	r3, #128	; 0x80
 8016c1c:	005b      	lsls	r3, r3, #1
 8016c1e:	4333      	orrs	r3, r6
 8016c20:	9320      	str	r3, [sp, #128]	; 0x80
 8016c22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016c24:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	db00      	blt.n	8016c2c <_svfprintf_r+0x69c>
 8016c2a:	e082      	b.n	8016d32 <_svfprintf_r+0x7a2>
 8016c2c:	2280      	movs	r2, #128	; 0x80
 8016c2e:	0612      	lsls	r2, r2, #24
 8016c30:	4694      	mov	ip, r2
 8016c32:	4463      	add	r3, ip
 8016c34:	930d      	str	r3, [sp, #52]	; 0x34
 8016c36:	232d      	movs	r3, #45	; 0x2d
 8016c38:	9322      	str	r3, [sp, #136]	; 0x88
 8016c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c3c:	2b41      	cmp	r3, #65	; 0x41
 8016c3e:	d000      	beq.n	8016c42 <_svfprintf_r+0x6b2>
 8016c40:	e105      	b.n	8016e4e <_svfprintf_r+0x8be>
 8016c42:	aa26      	add	r2, sp, #152	; 0x98
 8016c44:	0020      	movs	r0, r4
 8016c46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016c48:	f002 fdc4 	bl	80197d4 <frexp>
 8016c4c:	23ff      	movs	r3, #255	; 0xff
 8016c4e:	2200      	movs	r2, #0
 8016c50:	059b      	lsls	r3, r3, #22
 8016c52:	f7eb fbef 	bl	8002434 <__aeabi_dmul>
 8016c56:	2200      	movs	r2, #0
 8016c58:	2300      	movs	r3, #0
 8016c5a:	0004      	movs	r4, r0
 8016c5c:	000d      	movs	r5, r1
 8016c5e:	f7e9 fbfd 	bl	800045c <__aeabi_dcmpeq>
 8016c62:	2800      	cmp	r0, #0
 8016c64:	d001      	beq.n	8016c6a <_svfprintf_r+0x6da>
 8016c66:	2301      	movs	r3, #1
 8016c68:	9326      	str	r3, [sp, #152]	; 0x98
 8016c6a:	4b83      	ldr	r3, [pc, #524]	; (8016e78 <_svfprintf_r+0x8e8>)
 8016c6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8016c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c70:	2b61      	cmp	r3, #97	; 0x61
 8016c72:	d101      	bne.n	8016c78 <_svfprintf_r+0x6e8>
 8016c74:	4b81      	ldr	r3, [pc, #516]	; (8016e7c <_svfprintf_r+0x8ec>)
 8016c76:	9317      	str	r3, [sp, #92]	; 0x5c
 8016c78:	9b08      	ldr	r3, [sp, #32]
 8016c7a:	3b01      	subs	r3, #1
 8016c7c:	9310      	str	r3, [sp, #64]	; 0x40
 8016c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c80:	9318      	str	r3, [sp, #96]	; 0x60
 8016c82:	2200      	movs	r2, #0
 8016c84:	4b7e      	ldr	r3, [pc, #504]	; (8016e80 <_svfprintf_r+0x8f0>)
 8016c86:	0020      	movs	r0, r4
 8016c88:	0029      	movs	r1, r5
 8016c8a:	f7eb fbd3 	bl	8002434 <__aeabi_dmul>
 8016c8e:	000d      	movs	r5, r1
 8016c90:	0004      	movs	r4, r0
 8016c92:	f7ec f9a5 	bl	8002fe0 <__aeabi_d2iz>
 8016c96:	9021      	str	r0, [sp, #132]	; 0x84
 8016c98:	f7ec f9d8 	bl	800304c <__aeabi_i2d>
 8016c9c:	0002      	movs	r2, r0
 8016c9e:	000b      	movs	r3, r1
 8016ca0:	0020      	movs	r0, r4
 8016ca2:	0029      	movs	r1, r5
 8016ca4:	f7eb fe38 	bl	8002918 <__aeabi_dsub>
 8016ca8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016caa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016cac:	3301      	adds	r3, #1
 8016cae:	930d      	str	r3, [sp, #52]	; 0x34
 8016cb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016cb2:	0004      	movs	r4, r0
 8016cb4:	5c9b      	ldrb	r3, [r3, r2]
 8016cb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016cb8:	000d      	movs	r5, r1
 8016cba:	7013      	strb	r3, [r2, #0]
 8016cbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016cbe:	9323      	str	r3, [sp, #140]	; 0x8c
 8016cc0:	3301      	adds	r3, #1
 8016cc2:	d00a      	beq.n	8016cda <_svfprintf_r+0x74a>
 8016cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	3b01      	subs	r3, #1
 8016cca:	9310      	str	r3, [sp, #64]	; 0x40
 8016ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016cce:	9318      	str	r3, [sp, #96]	; 0x60
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	f7e9 fbc3 	bl	800045c <__aeabi_dcmpeq>
 8016cd6:	2800      	cmp	r0, #0
 8016cd8:	d0d3      	beq.n	8016c82 <_svfprintf_r+0x6f2>
 8016cda:	2200      	movs	r2, #0
 8016cdc:	4b69      	ldr	r3, [pc, #420]	; (8016e84 <_svfprintf_r+0x8f4>)
 8016cde:	0020      	movs	r0, r4
 8016ce0:	0029      	movs	r1, r5
 8016ce2:	f7e9 fbd5 	bl	8000490 <__aeabi_dcmpgt>
 8016ce6:	2800      	cmp	r0, #0
 8016ce8:	d126      	bne.n	8016d38 <_svfprintf_r+0x7a8>
 8016cea:	2200      	movs	r2, #0
 8016cec:	4b65      	ldr	r3, [pc, #404]	; (8016e84 <_svfprintf_r+0x8f4>)
 8016cee:	0020      	movs	r0, r4
 8016cf0:	0029      	movs	r1, r5
 8016cf2:	f7e9 fbb3 	bl	800045c <__aeabi_dcmpeq>
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	d002      	beq.n	8016d00 <_svfprintf_r+0x770>
 8016cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016cfc:	07db      	lsls	r3, r3, #31
 8016cfe:	d41b      	bmi.n	8016d38 <_svfprintf_r+0x7a8>
 8016d00:	2130      	movs	r1, #48	; 0x30
 8016d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d04:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8016d06:	1898      	adds	r0, r3, r2
 8016d08:	930d      	str	r3, [sp, #52]	; 0x34
 8016d0a:	1ac2      	subs	r2, r0, r3
 8016d0c:	d426      	bmi.n	8016d5c <_svfprintf_r+0x7cc>
 8016d0e:	7019      	strb	r1, [r3, #0]
 8016d10:	3301      	adds	r3, #1
 8016d12:	e7f9      	b.n	8016d08 <_svfprintf_r+0x778>
 8016d14:	2300      	movs	r3, #0
 8016d16:	930c      	str	r3, [sp, #48]	; 0x30
 8016d18:	ab3f      	add	r3, sp, #252	; 0xfc
 8016d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8016d1c:	e77d      	b.n	8016c1a <_svfprintf_r+0x68a>
 8016d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d20:	930c      	str	r3, [sp, #48]	; 0x30
 8016d22:	e77a      	b.n	8016c1a <_svfprintf_r+0x68a>
 8016d24:	2306      	movs	r3, #6
 8016d26:	9308      	str	r3, [sp, #32]
 8016d28:	e777      	b.n	8016c1a <_svfprintf_r+0x68a>
 8016d2a:	9b08      	ldr	r3, [sp, #32]
 8016d2c:	930c      	str	r3, [sp, #48]	; 0x30
 8016d2e:	2301      	movs	r3, #1
 8016d30:	e7f9      	b.n	8016d26 <_svfprintf_r+0x796>
 8016d32:	930d      	str	r3, [sp, #52]	; 0x34
 8016d34:	2300      	movs	r3, #0
 8016d36:	e77f      	b.n	8016c38 <_svfprintf_r+0x6a8>
 8016d38:	2030      	movs	r0, #48	; 0x30
 8016d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d3c:	932a      	str	r3, [sp, #168]	; 0xa8
 8016d3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d40:	7bda      	ldrb	r2, [r3, #15]
 8016d42:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016d44:	3b01      	subs	r3, #1
 8016d46:	932a      	str	r3, [sp, #168]	; 0xa8
 8016d48:	7819      	ldrb	r1, [r3, #0]
 8016d4a:	4291      	cmp	r1, r2
 8016d4c:	d07d      	beq.n	8016e4a <_svfprintf_r+0x8ba>
 8016d4e:	1c4a      	adds	r2, r1, #1
 8016d50:	b2d2      	uxtb	r2, r2
 8016d52:	2939      	cmp	r1, #57	; 0x39
 8016d54:	d101      	bne.n	8016d5a <_svfprintf_r+0x7ca>
 8016d56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016d58:	7a92      	ldrb	r2, [r2, #10]
 8016d5a:	701a      	strb	r2, [r3, #0]
 8016d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d60:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8016d62:	1a9b      	subs	r3, r3, r2
 8016d64:	930d      	str	r3, [sp, #52]	; 0x34
 8016d66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d68:	2b47      	cmp	r3, #71	; 0x47
 8016d6a:	d000      	beq.n	8016d6e <_svfprintf_r+0x7de>
 8016d6c:	e0d2      	b.n	8016f14 <_svfprintf_r+0x984>
 8016d6e:	1ceb      	adds	r3, r5, #3
 8016d70:	db03      	blt.n	8016d7a <_svfprintf_r+0x7ea>
 8016d72:	9b08      	ldr	r3, [sp, #32]
 8016d74:	42ab      	cmp	r3, r5
 8016d76:	db00      	blt.n	8016d7a <_svfprintf_r+0x7ea>
 8016d78:	e0fd      	b.n	8016f76 <_svfprintf_r+0x9e6>
 8016d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d7c:	3b02      	subs	r3, #2
 8016d7e:	930e      	str	r3, [sp, #56]	; 0x38
 8016d80:	2238      	movs	r2, #56	; 0x38
 8016d82:	466b      	mov	r3, sp
 8016d84:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016d86:	189b      	adds	r3, r3, r2
 8016d88:	3a18      	subs	r2, #24
 8016d8a:	4391      	bics	r1, r2
 8016d8c:	1e6c      	subs	r4, r5, #1
 8016d8e:	000a      	movs	r2, r1
 8016d90:	9426      	str	r4, [sp, #152]	; 0x98
 8016d92:	781b      	ldrb	r3, [r3, #0]
 8016d94:	2100      	movs	r1, #0
 8016d96:	2a41      	cmp	r2, #65	; 0x41
 8016d98:	d102      	bne.n	8016da0 <_svfprintf_r+0x810>
 8016d9a:	330f      	adds	r3, #15
 8016d9c:	b2db      	uxtb	r3, r3
 8016d9e:	3101      	adds	r1, #1
 8016da0:	aa28      	add	r2, sp, #160	; 0xa0
 8016da2:	7013      	strb	r3, [r2, #0]
 8016da4:	232b      	movs	r3, #43	; 0x2b
 8016da6:	2c00      	cmp	r4, #0
 8016da8:	da02      	bge.n	8016db0 <_svfprintf_r+0x820>
 8016daa:	2401      	movs	r4, #1
 8016dac:	232d      	movs	r3, #45	; 0x2d
 8016dae:	1b64      	subs	r4, r4, r5
 8016db0:	7053      	strb	r3, [r2, #1]
 8016db2:	2c09      	cmp	r4, #9
 8016db4:	dc00      	bgt.n	8016db8 <_svfprintf_r+0x828>
 8016db6:	e0c7      	b.n	8016f48 <_svfprintf_r+0x9b8>
 8016db8:	2537      	movs	r5, #55	; 0x37
 8016dba:	ab1e      	add	r3, sp, #120	; 0x78
 8016dbc:	18ed      	adds	r5, r5, r3
 8016dbe:	1e6b      	subs	r3, r5, #1
 8016dc0:	0020      	movs	r0, r4
 8016dc2:	210a      	movs	r1, #10
 8016dc4:	9308      	str	r3, [sp, #32]
 8016dc6:	f7e9 fb33 	bl	8000430 <__aeabi_idivmod>
 8016dca:	1e6b      	subs	r3, r5, #1
 8016dcc:	3130      	adds	r1, #48	; 0x30
 8016dce:	7019      	strb	r1, [r3, #0]
 8016dd0:	0020      	movs	r0, r4
 8016dd2:	210a      	movs	r1, #10
 8016dd4:	f7e9 fa46 	bl	8000264 <__divsi3>
 8016dd8:	0004      	movs	r4, r0
 8016dda:	2809      	cmp	r0, #9
 8016ddc:	dd00      	ble.n	8016de0 <_svfprintf_r+0x850>
 8016dde:	e0ac      	b.n	8016f3a <_svfprintf_r+0x9aa>
 8016de0:	232a      	movs	r3, #42	; 0x2a
 8016de2:	2137      	movs	r1, #55	; 0x37
 8016de4:	aa1e      	add	r2, sp, #120	; 0x78
 8016de6:	3d02      	subs	r5, #2
 8016de8:	3430      	adds	r4, #48	; 0x30
 8016dea:	702c      	strb	r4, [r5, #0]
 8016dec:	189b      	adds	r3, r3, r2
 8016dee:	1889      	adds	r1, r1, r2
 8016df0:	001a      	movs	r2, r3
 8016df2:	428d      	cmp	r5, r1
 8016df4:	d200      	bcs.n	8016df8 <_svfprintf_r+0x868>
 8016df6:	e0a2      	b.n	8016f3e <_svfprintf_r+0x9ae>
 8016df8:	ab28      	add	r3, sp, #160	; 0xa0
 8016dfa:	1ad3      	subs	r3, r2, r3
 8016dfc:	931d      	str	r3, [sp, #116]	; 0x74
 8016dfe:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e02:	4694      	mov	ip, r2
 8016e04:	4463      	add	r3, ip
 8016e06:	9308      	str	r3, [sp, #32]
 8016e08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e0a:	2b01      	cmp	r3, #1
 8016e0c:	dc01      	bgt.n	8016e12 <_svfprintf_r+0x882>
 8016e0e:	07f3      	lsls	r3, r6, #31
 8016e10:	d504      	bpl.n	8016e1c <_svfprintf_r+0x88c>
 8016e12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e14:	9b08      	ldr	r3, [sp, #32]
 8016e16:	4694      	mov	ip, r2
 8016e18:	4463      	add	r3, ip
 8016e1a:	9308      	str	r3, [sp, #32]
 8016e1c:	2280      	movs	r2, #128	; 0x80
 8016e1e:	4b1a      	ldr	r3, [pc, #104]	; (8016e88 <_svfprintf_r+0x8f8>)
 8016e20:	0052      	lsls	r2, r2, #1
 8016e22:	4033      	ands	r3, r6
 8016e24:	431a      	orrs	r2, r3
 8016e26:	2300      	movs	r3, #0
 8016e28:	001d      	movs	r5, r3
 8016e2a:	9220      	str	r2, [sp, #128]	; 0x80
 8016e2c:	9310      	str	r3, [sp, #64]	; 0x40
 8016e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d100      	bne.n	8016e38 <_svfprintf_r+0x8a8>
 8016e36:	e270      	b.n	801731a <_svfprintf_r+0xd8a>
 8016e38:	231b      	movs	r3, #27
 8016e3a:	aa1e      	add	r2, sp, #120	; 0x78
 8016e3c:	189b      	adds	r3, r3, r2
 8016e3e:	222d      	movs	r2, #45	; 0x2d
 8016e40:	701a      	strb	r2, [r3, #0]
 8016e42:	2300      	movs	r3, #0
 8016e44:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016e46:	9317      	str	r3, [sp, #92]	; 0x5c
 8016e48:	e539      	b.n	80168be <_svfprintf_r+0x32e>
 8016e4a:	7018      	strb	r0, [r3, #0]
 8016e4c:	e779      	b.n	8016d42 <_svfprintf_r+0x7b2>
 8016e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e50:	2b46      	cmp	r3, #70	; 0x46
 8016e52:	d01b      	beq.n	8016e8c <_svfprintf_r+0x8fc>
 8016e54:	9d08      	ldr	r5, [sp, #32]
 8016e56:	2b45      	cmp	r3, #69	; 0x45
 8016e58:	d101      	bne.n	8016e5e <_svfprintf_r+0x8ce>
 8016e5a:	9b08      	ldr	r3, [sp, #32]
 8016e5c:	1c5d      	adds	r5, r3, #1
 8016e5e:	2302      	movs	r3, #2
 8016e60:	e016      	b.n	8016e90 <_svfprintf_r+0x900>
 8016e62:	46c0      	nop			; (mov r8, r8)
 8016e64:	7fefffff 	.word	0x7fefffff
 8016e68:	0801d22c 	.word	0x0801d22c
 8016e6c:	0801d228 	.word	0x0801d228
 8016e70:	0801d234 	.word	0x0801d234
 8016e74:	0801d230 	.word	0x0801d230
 8016e78:	0801d249 	.word	0x0801d249
 8016e7c:	0801d238 	.word	0x0801d238
 8016e80:	40300000 	.word	0x40300000
 8016e84:	3fe00000 	.word	0x3fe00000
 8016e88:	fffffbff 	.word	0xfffffbff
 8016e8c:	2303      	movs	r3, #3
 8016e8e:	9d08      	ldr	r5, [sp, #32]
 8016e90:	aa2a      	add	r2, sp, #168	; 0xa8
 8016e92:	9204      	str	r2, [sp, #16]
 8016e94:	aa27      	add	r2, sp, #156	; 0x9c
 8016e96:	9203      	str	r2, [sp, #12]
 8016e98:	aa26      	add	r2, sp, #152	; 0x98
 8016e9a:	9202      	str	r2, [sp, #8]
 8016e9c:	9300      	str	r3, [sp, #0]
 8016e9e:	9501      	str	r5, [sp, #4]
 8016ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ea2:	0022      	movs	r2, r4
 8016ea4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ea6:	f000 fe79 	bl	8017b9c <_dtoa_r>
 8016eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016eac:	9009      	str	r0, [sp, #36]	; 0x24
 8016eae:	2b47      	cmp	r3, #71	; 0x47
 8016eb0:	d101      	bne.n	8016eb6 <_svfprintf_r+0x926>
 8016eb2:	07f3      	lsls	r3, r6, #31
 8016eb4:	d524      	bpl.n	8016f00 <_svfprintf_r+0x970>
 8016eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eb8:	195b      	adds	r3, r3, r5
 8016eba:	9310      	str	r3, [sp, #64]	; 0x40
 8016ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ebe:	2b46      	cmp	r3, #70	; 0x46
 8016ec0:	d113      	bne.n	8016eea <_svfprintf_r+0x95a>
 8016ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ec4:	781b      	ldrb	r3, [r3, #0]
 8016ec6:	2b30      	cmp	r3, #48	; 0x30
 8016ec8:	d10a      	bne.n	8016ee0 <_svfprintf_r+0x950>
 8016eca:	2200      	movs	r2, #0
 8016ecc:	2300      	movs	r3, #0
 8016ece:	0020      	movs	r0, r4
 8016ed0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016ed2:	f7e9 fac3 	bl	800045c <__aeabi_dcmpeq>
 8016ed6:	2800      	cmp	r0, #0
 8016ed8:	d102      	bne.n	8016ee0 <_svfprintf_r+0x950>
 8016eda:	2301      	movs	r3, #1
 8016edc:	1b5d      	subs	r5, r3, r5
 8016ede:	9526      	str	r5, [sp, #152]	; 0x98
 8016ee0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016ee2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ee4:	4694      	mov	ip, r2
 8016ee6:	4463      	add	r3, ip
 8016ee8:	9310      	str	r3, [sp, #64]	; 0x40
 8016eea:	2200      	movs	r2, #0
 8016eec:	2300      	movs	r3, #0
 8016eee:	0020      	movs	r0, r4
 8016ef0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016ef2:	f7e9 fab3 	bl	800045c <__aeabi_dcmpeq>
 8016ef6:	2230      	movs	r2, #48	; 0x30
 8016ef8:	2800      	cmp	r0, #0
 8016efa:	d006      	beq.n	8016f0a <_svfprintf_r+0x97a>
 8016efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016efe:	932a      	str	r3, [sp, #168]	; 0xa8
 8016f00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016f02:	e72c      	b.n	8016d5e <_svfprintf_r+0x7ce>
 8016f04:	1c59      	adds	r1, r3, #1
 8016f06:	912a      	str	r1, [sp, #168]	; 0xa8
 8016f08:	701a      	strb	r2, [r3, #0]
 8016f0a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016f0c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016f0e:	4299      	cmp	r1, r3
 8016f10:	d8f8      	bhi.n	8016f04 <_svfprintf_r+0x974>
 8016f12:	e7f5      	b.n	8016f00 <_svfprintf_r+0x970>
 8016f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f16:	2b46      	cmp	r3, #70	; 0x46
 8016f18:	d000      	beq.n	8016f1c <_svfprintf_r+0x98c>
 8016f1a:	e731      	b.n	8016d80 <_svfprintf_r+0x7f0>
 8016f1c:	9b08      	ldr	r3, [sp, #32]
 8016f1e:	2d00      	cmp	r5, #0
 8016f20:	dd21      	ble.n	8016f66 <_svfprintf_r+0x9d6>
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d101      	bne.n	8016f2a <_svfprintf_r+0x99a>
 8016f26:	07f3      	lsls	r3, r6, #31
 8016f28:	d54a      	bpl.n	8016fc0 <_svfprintf_r+0xa30>
 8016f2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f2c:	18eb      	adds	r3, r5, r3
 8016f2e:	9a08      	ldr	r2, [sp, #32]
 8016f30:	18d3      	adds	r3, r2, r3
 8016f32:	9308      	str	r3, [sp, #32]
 8016f34:	2366      	movs	r3, #102	; 0x66
 8016f36:	930e      	str	r3, [sp, #56]	; 0x38
 8016f38:	e034      	b.n	8016fa4 <_svfprintf_r+0xa14>
 8016f3a:	9d08      	ldr	r5, [sp, #32]
 8016f3c:	e73f      	b.n	8016dbe <_svfprintf_r+0x82e>
 8016f3e:	782a      	ldrb	r2, [r5, #0]
 8016f40:	3501      	adds	r5, #1
 8016f42:	701a      	strb	r2, [r3, #0]
 8016f44:	3301      	adds	r3, #1
 8016f46:	e753      	b.n	8016df0 <_svfprintf_r+0x860>
 8016f48:	232a      	movs	r3, #42	; 0x2a
 8016f4a:	aa1e      	add	r2, sp, #120	; 0x78
 8016f4c:	189b      	adds	r3, r3, r2
 8016f4e:	2900      	cmp	r1, #0
 8016f50:	d105      	bne.n	8016f5e <_svfprintf_r+0x9ce>
 8016f52:	2230      	movs	r2, #48	; 0x30
 8016f54:	ab28      	add	r3, sp, #160	; 0xa0
 8016f56:	709a      	strb	r2, [r3, #2]
 8016f58:	232b      	movs	r3, #43	; 0x2b
 8016f5a:	aa1e      	add	r2, sp, #120	; 0x78
 8016f5c:	189b      	adds	r3, r3, r2
 8016f5e:	3430      	adds	r4, #48	; 0x30
 8016f60:	1c5a      	adds	r2, r3, #1
 8016f62:	701c      	strb	r4, [r3, #0]
 8016f64:	e748      	b.n	8016df8 <_svfprintf_r+0x868>
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d102      	bne.n	8016f70 <_svfprintf_r+0x9e0>
 8016f6a:	3301      	adds	r3, #1
 8016f6c:	421e      	tst	r6, r3
 8016f6e:	d029      	beq.n	8016fc4 <_svfprintf_r+0xa34>
 8016f70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f72:	3301      	adds	r3, #1
 8016f74:	e7db      	b.n	8016f2e <_svfprintf_r+0x99e>
 8016f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f78:	42ab      	cmp	r3, r5
 8016f7a:	dc06      	bgt.n	8016f8a <_svfprintf_r+0x9fa>
 8016f7c:	07f3      	lsls	r3, r6, #31
 8016f7e:	d524      	bpl.n	8016fca <_svfprintf_r+0xa3a>
 8016f80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f82:	18eb      	adds	r3, r5, r3
 8016f84:	9308      	str	r3, [sp, #32]
 8016f86:	2367      	movs	r3, #103	; 0x67
 8016f88:	e7d5      	b.n	8016f36 <_svfprintf_r+0x9a6>
 8016f8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f8e:	4694      	mov	ip, r2
 8016f90:	4463      	add	r3, ip
 8016f92:	9308      	str	r3, [sp, #32]
 8016f94:	2367      	movs	r3, #103	; 0x67
 8016f96:	930e      	str	r3, [sp, #56]	; 0x38
 8016f98:	2d00      	cmp	r5, #0
 8016f9a:	dc03      	bgt.n	8016fa4 <_svfprintf_r+0xa14>
 8016f9c:	9b08      	ldr	r3, [sp, #32]
 8016f9e:	1b5b      	subs	r3, r3, r5
 8016fa0:	3301      	adds	r3, #1
 8016fa2:	9308      	str	r3, [sp, #32]
 8016fa4:	2380      	movs	r3, #128	; 0x80
 8016fa6:	00db      	lsls	r3, r3, #3
 8016fa8:	401e      	ands	r6, r3
 8016faa:	2300      	movs	r3, #0
 8016fac:	960f      	str	r6, [sp, #60]	; 0x3c
 8016fae:	9310      	str	r3, [sp, #64]	; 0x40
 8016fb0:	2e00      	cmp	r6, #0
 8016fb2:	d100      	bne.n	8016fb6 <_svfprintf_r+0xa26>
 8016fb4:	e73c      	b.n	8016e30 <_svfprintf_r+0x8a0>
 8016fb6:	2d00      	cmp	r5, #0
 8016fb8:	dc27      	bgt.n	801700a <_svfprintf_r+0xa7a>
 8016fba:	2300      	movs	r3, #0
 8016fbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fbe:	e737      	b.n	8016e30 <_svfprintf_r+0x8a0>
 8016fc0:	9508      	str	r5, [sp, #32]
 8016fc2:	e7b7      	b.n	8016f34 <_svfprintf_r+0x9a4>
 8016fc4:	2266      	movs	r2, #102	; 0x66
 8016fc6:	920e      	str	r2, [sp, #56]	; 0x38
 8016fc8:	e7eb      	b.n	8016fa2 <_svfprintf_r+0xa12>
 8016fca:	9508      	str	r5, [sp, #32]
 8016fcc:	e7db      	b.n	8016f86 <_svfprintf_r+0x9f6>
 8016fce:	42ab      	cmp	r3, r5
 8016fd0:	da0e      	bge.n	8016ff0 <_svfprintf_r+0xa60>
 8016fd2:	1aed      	subs	r5, r5, r3
 8016fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016fd6:	785b      	ldrb	r3, [r3, #1]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d012      	beq.n	8017002 <_svfprintf_r+0xa72>
 8016fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fde:	3301      	adds	r3, #1
 8016fe0:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fe2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016fe4:	3301      	adds	r3, #1
 8016fe6:	9313      	str	r3, [sp, #76]	; 0x4c
 8016fe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016fea:	781b      	ldrb	r3, [r3, #0]
 8016fec:	2bff      	cmp	r3, #255	; 0xff
 8016fee:	d1ee      	bne.n	8016fce <_svfprintf_r+0xa3e>
 8016ff0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016ff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ff4:	189b      	adds	r3, r3, r2
 8016ff6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016ff8:	4353      	muls	r3, r2
 8016ffa:	9a08      	ldr	r2, [sp, #32]
 8016ffc:	189b      	adds	r3, r3, r2
 8016ffe:	9308      	str	r3, [sp, #32]
 8017000:	e716      	b.n	8016e30 <_svfprintf_r+0x8a0>
 8017002:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017004:	3301      	adds	r3, #1
 8017006:	9310      	str	r3, [sp, #64]	; 0x40
 8017008:	e7ee      	b.n	8016fe8 <_svfprintf_r+0xa58>
 801700a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801700c:	930f      	str	r3, [sp, #60]	; 0x3c
 801700e:	e7eb      	b.n	8016fe8 <_svfprintf_r+0xa58>
 8017010:	0022      	movs	r2, r4
 8017012:	ca08      	ldmia	r2!, {r3}
 8017014:	9212      	str	r2, [sp, #72]	; 0x48
 8017016:	06b2      	lsls	r2, r6, #26
 8017018:	d508      	bpl.n	801702c <_svfprintf_r+0xa9c>
 801701a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801701c:	601a      	str	r2, [r3, #0]
 801701e:	17d2      	asrs	r2, r2, #31
 8017020:	605a      	str	r2, [r3, #4]
 8017022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017024:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017026:	9309      	str	r3, [sp, #36]	; 0x24
 8017028:	f7ff faeb 	bl	8016602 <_svfprintf_r+0x72>
 801702c:	06f2      	lsls	r2, r6, #27
 801702e:	d502      	bpl.n	8017036 <_svfprintf_r+0xaa6>
 8017030:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017032:	601a      	str	r2, [r3, #0]
 8017034:	e7f5      	b.n	8017022 <_svfprintf_r+0xa92>
 8017036:	0672      	lsls	r2, r6, #25
 8017038:	d502      	bpl.n	8017040 <_svfprintf_r+0xab0>
 801703a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801703c:	801a      	strh	r2, [r3, #0]
 801703e:	e7f0      	b.n	8017022 <_svfprintf_r+0xa92>
 8017040:	05b2      	lsls	r2, r6, #22
 8017042:	d5f5      	bpl.n	8017030 <_svfprintf_r+0xaa0>
 8017044:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017046:	701a      	strb	r2, [r3, #0]
 8017048:	e7eb      	b.n	8017022 <_svfprintf_r+0xa92>
 801704a:	2310      	movs	r3, #16
 801704c:	431e      	orrs	r6, r3
 801704e:	2220      	movs	r2, #32
 8017050:	4032      	ands	r2, r6
 8017052:	d025      	beq.n	80170a0 <_svfprintf_r+0xb10>
 8017054:	2307      	movs	r3, #7
 8017056:	3407      	adds	r4, #7
 8017058:	439c      	bics	r4, r3
 801705a:	0023      	movs	r3, r4
 801705c:	3308      	adds	r3, #8
 801705e:	9312      	str	r3, [sp, #72]	; 0x48
 8017060:	6823      	ldr	r3, [r4, #0]
 8017062:	6864      	ldr	r4, [r4, #4]
 8017064:	9306      	str	r3, [sp, #24]
 8017066:	9407      	str	r4, [sp, #28]
 8017068:	4bc2      	ldr	r3, [pc, #776]	; (8017374 <_svfprintf_r+0xde4>)
 801706a:	401e      	ands	r6, r3
 801706c:	2300      	movs	r3, #0
 801706e:	221b      	movs	r2, #27
 8017070:	a91e      	add	r1, sp, #120	; 0x78
 8017072:	1852      	adds	r2, r2, r1
 8017074:	2100      	movs	r1, #0
 8017076:	7011      	strb	r1, [r2, #0]
 8017078:	9a08      	ldr	r2, [sp, #32]
 801707a:	3201      	adds	r2, #1
 801707c:	d100      	bne.n	8017080 <_svfprintf_r+0xaf0>
 801707e:	e0a6      	b.n	80171ce <_svfprintf_r+0xc3e>
 8017080:	0032      	movs	r2, r6
 8017082:	2180      	movs	r1, #128	; 0x80
 8017084:	9807      	ldr	r0, [sp, #28]
 8017086:	438e      	bics	r6, r1
 8017088:	9906      	ldr	r1, [sp, #24]
 801708a:	4301      	orrs	r1, r0
 801708c:	d000      	beq.n	8017090 <_svfprintf_r+0xb00>
 801708e:	e09e      	b.n	80171ce <_svfprintf_r+0xc3e>
 8017090:	9908      	ldr	r1, [sp, #32]
 8017092:	2900      	cmp	r1, #0
 8017094:	d100      	bne.n	8017098 <_svfprintf_r+0xb08>
 8017096:	e125      	b.n	80172e4 <_svfprintf_r+0xd54>
 8017098:	2b01      	cmp	r3, #1
 801709a:	d000      	beq.n	801709e <_svfprintf_r+0xb0e>
 801709c:	e09a      	b.n	80171d4 <_svfprintf_r+0xc44>
 801709e:	e518      	b.n	8016ad2 <_svfprintf_r+0x542>
 80170a0:	1d23      	adds	r3, r4, #4
 80170a2:	9312      	str	r3, [sp, #72]	; 0x48
 80170a4:	2310      	movs	r3, #16
 80170a6:	4033      	ands	r3, r6
 80170a8:	d003      	beq.n	80170b2 <_svfprintf_r+0xb22>
 80170aa:	6823      	ldr	r3, [r4, #0]
 80170ac:	9306      	str	r3, [sp, #24]
 80170ae:	9207      	str	r2, [sp, #28]
 80170b0:	e7da      	b.n	8017068 <_svfprintf_r+0xad8>
 80170b2:	2240      	movs	r2, #64	; 0x40
 80170b4:	4032      	ands	r2, r6
 80170b6:	d004      	beq.n	80170c2 <_svfprintf_r+0xb32>
 80170b8:	6822      	ldr	r2, [r4, #0]
 80170ba:	b292      	uxth	r2, r2
 80170bc:	9206      	str	r2, [sp, #24]
 80170be:	9307      	str	r3, [sp, #28]
 80170c0:	e7d2      	b.n	8017068 <_svfprintf_r+0xad8>
 80170c2:	2380      	movs	r3, #128	; 0x80
 80170c4:	009b      	lsls	r3, r3, #2
 80170c6:	4033      	ands	r3, r6
 80170c8:	d002      	beq.n	80170d0 <_svfprintf_r+0xb40>
 80170ca:	6823      	ldr	r3, [r4, #0]
 80170cc:	b2db      	uxtb	r3, r3
 80170ce:	e7ed      	b.n	80170ac <_svfprintf_r+0xb1c>
 80170d0:	6822      	ldr	r2, [r4, #0]
 80170d2:	e7f3      	b.n	80170bc <_svfprintf_r+0xb2c>
 80170d4:	1d23      	adds	r3, r4, #4
 80170d6:	49a8      	ldr	r1, [pc, #672]	; (8017378 <_svfprintf_r+0xde8>)
 80170d8:	aa25      	add	r2, sp, #148	; 0x94
 80170da:	9312      	str	r3, [sp, #72]	; 0x48
 80170dc:	6823      	ldr	r3, [r4, #0]
 80170de:	8011      	strh	r1, [r2, #0]
 80170e0:	4aa6      	ldr	r2, [pc, #664]	; (801737c <_svfprintf_r+0xdec>)
 80170e2:	9306      	str	r3, [sp, #24]
 80170e4:	2300      	movs	r3, #0
 80170e6:	921e      	str	r2, [sp, #120]	; 0x78
 80170e8:	2278      	movs	r2, #120	; 0x78
 80170ea:	9307      	str	r3, [sp, #28]
 80170ec:	3302      	adds	r3, #2
 80170ee:	431e      	orrs	r6, r3
 80170f0:	920e      	str	r2, [sp, #56]	; 0x38
 80170f2:	e7bc      	b.n	801706e <_svfprintf_r+0xade>
 80170f4:	1d23      	adds	r3, r4, #4
 80170f6:	9312      	str	r3, [sp, #72]	; 0x48
 80170f8:	6823      	ldr	r3, [r4, #0]
 80170fa:	2400      	movs	r4, #0
 80170fc:	9309      	str	r3, [sp, #36]	; 0x24
 80170fe:	231b      	movs	r3, #27
 8017100:	aa1e      	add	r2, sp, #120	; 0x78
 8017102:	189b      	adds	r3, r3, r2
 8017104:	701c      	strb	r4, [r3, #0]
 8017106:	9b08      	ldr	r3, [sp, #32]
 8017108:	3301      	adds	r3, #1
 801710a:	d00e      	beq.n	801712a <_svfprintf_r+0xb9a>
 801710c:	9a08      	ldr	r2, [sp, #32]
 801710e:	0021      	movs	r1, r4
 8017110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017112:	f001 ff79 	bl	8019008 <memchr>
 8017116:	900c      	str	r0, [sp, #48]	; 0x30
 8017118:	42a0      	cmp	r0, r4
 801711a:	d100      	bne.n	801711e <_svfprintf_r+0xb8e>
 801711c:	e100      	b.n	8017320 <_svfprintf_r+0xd90>
 801711e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017120:	1a83      	subs	r3, r0, r2
 8017122:	9308      	str	r3, [sp, #32]
 8017124:	940c      	str	r4, [sp, #48]	; 0x30
 8017126:	0023      	movs	r3, r4
 8017128:	e527      	b.n	8016b7a <_svfprintf_r+0x5ea>
 801712a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801712c:	f7e8 fff4 	bl	8000118 <strlen>
 8017130:	9008      	str	r0, [sp, #32]
 8017132:	e7f7      	b.n	8017124 <_svfprintf_r+0xb94>
 8017134:	2310      	movs	r3, #16
 8017136:	431e      	orrs	r6, r3
 8017138:	2220      	movs	r2, #32
 801713a:	4032      	ands	r2, r6
 801713c:	d00b      	beq.n	8017156 <_svfprintf_r+0xbc6>
 801713e:	2307      	movs	r3, #7
 8017140:	3407      	adds	r4, #7
 8017142:	439c      	bics	r4, r3
 8017144:	0023      	movs	r3, r4
 8017146:	3308      	adds	r3, #8
 8017148:	9312      	str	r3, [sp, #72]	; 0x48
 801714a:	6823      	ldr	r3, [r4, #0]
 801714c:	6864      	ldr	r4, [r4, #4]
 801714e:	9306      	str	r3, [sp, #24]
 8017150:	9407      	str	r4, [sp, #28]
 8017152:	2301      	movs	r3, #1
 8017154:	e78b      	b.n	801706e <_svfprintf_r+0xade>
 8017156:	1d23      	adds	r3, r4, #4
 8017158:	9312      	str	r3, [sp, #72]	; 0x48
 801715a:	2310      	movs	r3, #16
 801715c:	4033      	ands	r3, r6
 801715e:	d003      	beq.n	8017168 <_svfprintf_r+0xbd8>
 8017160:	6823      	ldr	r3, [r4, #0]
 8017162:	9306      	str	r3, [sp, #24]
 8017164:	9207      	str	r2, [sp, #28]
 8017166:	e7f4      	b.n	8017152 <_svfprintf_r+0xbc2>
 8017168:	2240      	movs	r2, #64	; 0x40
 801716a:	4032      	ands	r2, r6
 801716c:	d004      	beq.n	8017178 <_svfprintf_r+0xbe8>
 801716e:	6822      	ldr	r2, [r4, #0]
 8017170:	b292      	uxth	r2, r2
 8017172:	9206      	str	r2, [sp, #24]
 8017174:	9307      	str	r3, [sp, #28]
 8017176:	e7ec      	b.n	8017152 <_svfprintf_r+0xbc2>
 8017178:	2380      	movs	r3, #128	; 0x80
 801717a:	009b      	lsls	r3, r3, #2
 801717c:	4033      	ands	r3, r6
 801717e:	d002      	beq.n	8017186 <_svfprintf_r+0xbf6>
 8017180:	6823      	ldr	r3, [r4, #0]
 8017182:	b2db      	uxtb	r3, r3
 8017184:	e7ed      	b.n	8017162 <_svfprintf_r+0xbd2>
 8017186:	6822      	ldr	r2, [r4, #0]
 8017188:	e7f3      	b.n	8017172 <_svfprintf_r+0xbe2>
 801718a:	4b7c      	ldr	r3, [pc, #496]	; (801737c <_svfprintf_r+0xdec>)
 801718c:	f7ff fad9 	bl	8016742 <_svfprintf_r+0x1b2>
 8017190:	1d23      	adds	r3, r4, #4
 8017192:	9312      	str	r3, [sp, #72]	; 0x48
 8017194:	2310      	movs	r3, #16
 8017196:	4033      	ands	r3, r6
 8017198:	d004      	beq.n	80171a4 <_svfprintf_r+0xc14>
 801719a:	6823      	ldr	r3, [r4, #0]
 801719c:	9306      	str	r3, [sp, #24]
 801719e:	9207      	str	r2, [sp, #28]
 80171a0:	f7ff fadf 	bl	8016762 <_svfprintf_r+0x1d2>
 80171a4:	2240      	movs	r2, #64	; 0x40
 80171a6:	4032      	ands	r2, r6
 80171a8:	d005      	beq.n	80171b6 <_svfprintf_r+0xc26>
 80171aa:	6822      	ldr	r2, [r4, #0]
 80171ac:	b292      	uxth	r2, r2
 80171ae:	9206      	str	r2, [sp, #24]
 80171b0:	9307      	str	r3, [sp, #28]
 80171b2:	f7ff fad6 	bl	8016762 <_svfprintf_r+0x1d2>
 80171b6:	2380      	movs	r3, #128	; 0x80
 80171b8:	009b      	lsls	r3, r3, #2
 80171ba:	4033      	ands	r3, r6
 80171bc:	d002      	beq.n	80171c4 <_svfprintf_r+0xc34>
 80171be:	6823      	ldr	r3, [r4, #0]
 80171c0:	b2db      	uxtb	r3, r3
 80171c2:	e7eb      	b.n	801719c <_svfprintf_r+0xc0c>
 80171c4:	6822      	ldr	r2, [r4, #0]
 80171c6:	e7f2      	b.n	80171ae <_svfprintf_r+0xc1e>
 80171c8:	0032      	movs	r2, r6
 80171ca:	2301      	movs	r3, #1
 80171cc:	e759      	b.n	8017082 <_svfprintf_r+0xaf2>
 80171ce:	2b01      	cmp	r3, #1
 80171d0:	d100      	bne.n	80171d4 <_svfprintf_r+0xc44>
 80171d2:	e476      	b.n	8016ac2 <_svfprintf_r+0x532>
 80171d4:	2b02      	cmp	r3, #2
 80171d6:	d06b      	beq.n	80172b0 <_svfprintf_r+0xd20>
 80171d8:	2507      	movs	r5, #7
 80171da:	ab58      	add	r3, sp, #352	; 0x160
 80171dc:	1e5a      	subs	r2, r3, #1
 80171de:	9209      	str	r2, [sp, #36]	; 0x24
 80171e0:	9a06      	ldr	r2, [sp, #24]
 80171e2:	1e59      	subs	r1, r3, #1
 80171e4:	402a      	ands	r2, r5
 80171e6:	3230      	adds	r2, #48	; 0x30
 80171e8:	700a      	strb	r2, [r1, #0]
 80171ea:	9907      	ldr	r1, [sp, #28]
 80171ec:	074c      	lsls	r4, r1, #29
 80171ee:	9906      	ldr	r1, [sp, #24]
 80171f0:	08c8      	lsrs	r0, r1, #3
 80171f2:	9907      	ldr	r1, [sp, #28]
 80171f4:	4304      	orrs	r4, r0
 80171f6:	08c9      	lsrs	r1, r1, #3
 80171f8:	9107      	str	r1, [sp, #28]
 80171fa:	0021      	movs	r1, r4
 80171fc:	9807      	ldr	r0, [sp, #28]
 80171fe:	9406      	str	r4, [sp, #24]
 8017200:	4301      	orrs	r1, r0
 8017202:	d111      	bne.n	8017228 <_svfprintf_r+0xc98>
 8017204:	07f1      	lsls	r1, r6, #31
 8017206:	d502      	bpl.n	801720e <_svfprintf_r+0xc7e>
 8017208:	3b02      	subs	r3, #2
 801720a:	2a30      	cmp	r2, #48	; 0x30
 801720c:	d173      	bne.n	80172f6 <_svfprintf_r+0xd66>
 801720e:	9b08      	ldr	r3, [sp, #32]
 8017210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017212:	9317      	str	r3, [sp, #92]	; 0x5c
 8017214:	ab58      	add	r3, sp, #352	; 0x160
 8017216:	1a9b      	subs	r3, r3, r2
 8017218:	9308      	str	r3, [sp, #32]
 801721a:	2300      	movs	r3, #0
 801721c:	930c      	str	r3, [sp, #48]	; 0x30
 801721e:	9310      	str	r3, [sp, #64]	; 0x40
 8017220:	930f      	str	r3, [sp, #60]	; 0x3c
 8017222:	001d      	movs	r5, r3
 8017224:	f7ff fb4b 	bl	80168be <_svfprintf_r+0x32e>
 8017228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801722a:	e7d7      	b.n	80171dc <_svfprintf_r+0xc4c>
 801722c:	2480      	movs	r4, #128	; 0x80
 801722e:	2300      	movs	r3, #0
 8017230:	00e4      	lsls	r4, r4, #3
 8017232:	930d      	str	r3, [sp, #52]	; 0x34
 8017234:	4034      	ands	r4, r6
 8017236:	ab58      	add	r3, sp, #352	; 0x160
 8017238:	3b01      	subs	r3, #1
 801723a:	9309      	str	r3, [sp, #36]	; 0x24
 801723c:	220a      	movs	r2, #10
 801723e:	9806      	ldr	r0, [sp, #24]
 8017240:	9907      	ldr	r1, [sp, #28]
 8017242:	2300      	movs	r3, #0
 8017244:	f7e9 f97c 	bl	8000540 <__aeabi_uldivmod>
 8017248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801724a:	3230      	adds	r2, #48	; 0x30
 801724c:	701a      	strb	r2, [r3, #0]
 801724e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017250:	3301      	adds	r3, #1
 8017252:	930d      	str	r3, [sp, #52]	; 0x34
 8017254:	2c00      	cmp	r4, #0
 8017256:	d01d      	beq.n	8017294 <_svfprintf_r+0xd04>
 8017258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801725a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801725c:	781b      	ldrb	r3, [r3, #0]
 801725e:	429a      	cmp	r2, r3
 8017260:	d118      	bne.n	8017294 <_svfprintf_r+0xd04>
 8017262:	2aff      	cmp	r2, #255	; 0xff
 8017264:	d016      	beq.n	8017294 <_svfprintf_r+0xd04>
 8017266:	9b07      	ldr	r3, [sp, #28]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d102      	bne.n	8017272 <_svfprintf_r+0xce2>
 801726c:	9b06      	ldr	r3, [sp, #24]
 801726e:	2b09      	cmp	r3, #9
 8017270:	d910      	bls.n	8017294 <_svfprintf_r+0xd04>
 8017272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017274:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017276:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8017278:	1a9b      	subs	r3, r3, r2
 801727a:	0018      	movs	r0, r3
 801727c:	9309      	str	r3, [sp, #36]	; 0x24
 801727e:	f7fe fa52 	bl	8015726 <strncpy>
 8017282:	2200      	movs	r2, #0
 8017284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017286:	920d      	str	r2, [sp, #52]	; 0x34
 8017288:	785b      	ldrb	r3, [r3, #1]
 801728a:	1e5a      	subs	r2, r3, #1
 801728c:	4193      	sbcs	r3, r2
 801728e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017290:	18d3      	adds	r3, r2, r3
 8017292:	9313      	str	r3, [sp, #76]	; 0x4c
 8017294:	220a      	movs	r2, #10
 8017296:	9806      	ldr	r0, [sp, #24]
 8017298:	9907      	ldr	r1, [sp, #28]
 801729a:	2300      	movs	r3, #0
 801729c:	f7e9 f950 	bl	8000540 <__aeabi_uldivmod>
 80172a0:	9006      	str	r0, [sp, #24]
 80172a2:	9107      	str	r1, [sp, #28]
 80172a4:	9b06      	ldr	r3, [sp, #24]
 80172a6:	9a07      	ldr	r2, [sp, #28]
 80172a8:	4313      	orrs	r3, r2
 80172aa:	d0b0      	beq.n	801720e <_svfprintf_r+0xc7e>
 80172ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172ae:	e7c3      	b.n	8017238 <_svfprintf_r+0xca8>
 80172b0:	200f      	movs	r0, #15
 80172b2:	ab58      	add	r3, sp, #352	; 0x160
 80172b4:	9309      	str	r3, [sp, #36]	; 0x24
 80172b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80172ba:	3b01      	subs	r3, #1
 80172bc:	9309      	str	r3, [sp, #36]	; 0x24
 80172be:	9b06      	ldr	r3, [sp, #24]
 80172c0:	4003      	ands	r3, r0
 80172c2:	5cd3      	ldrb	r3, [r2, r3]
 80172c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172c6:	7013      	strb	r3, [r2, #0]
 80172c8:	9b07      	ldr	r3, [sp, #28]
 80172ca:	0719      	lsls	r1, r3, #28
 80172cc:	9b06      	ldr	r3, [sp, #24]
 80172ce:	091a      	lsrs	r2, r3, #4
 80172d0:	9b07      	ldr	r3, [sp, #28]
 80172d2:	4311      	orrs	r1, r2
 80172d4:	091b      	lsrs	r3, r3, #4
 80172d6:	9307      	str	r3, [sp, #28]
 80172d8:	000b      	movs	r3, r1
 80172da:	9a07      	ldr	r2, [sp, #28]
 80172dc:	9106      	str	r1, [sp, #24]
 80172de:	4313      	orrs	r3, r2
 80172e0:	d1e9      	bne.n	80172b6 <_svfprintf_r+0xd26>
 80172e2:	e794      	b.n	801720e <_svfprintf_r+0xc7e>
 80172e4:	a958      	add	r1, sp, #352	; 0x160
 80172e6:	9109      	str	r1, [sp, #36]	; 0x24
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d190      	bne.n	801720e <_svfprintf_r+0xc7e>
 80172ec:	07d3      	lsls	r3, r2, #31
 80172ee:	d58e      	bpl.n	801720e <_svfprintf_r+0xc7e>
 80172f0:	23e7      	movs	r3, #231	; 0xe7
 80172f2:	aa1e      	add	r2, sp, #120	; 0x78
 80172f4:	189b      	adds	r3, r3, r2
 80172f6:	2230      	movs	r2, #48	; 0x30
 80172f8:	f7ff fbf0 	bl	8016adc <_svfprintf_r+0x54c>
 80172fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d100      	bne.n	8017304 <_svfprintf_r+0xd74>
 8017302:	e38a      	b.n	8017a1a <_svfprintf_r+0x148a>
 8017304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017306:	ab3f      	add	r3, sp, #252	; 0xfc
 8017308:	701a      	strb	r2, [r3, #0]
 801730a:	221b      	movs	r2, #27
 801730c:	2000      	movs	r0, #0
 801730e:	a91e      	add	r1, sp, #120	; 0x78
 8017310:	1852      	adds	r2, r2, r1
 8017312:	7010      	strb	r0, [r2, #0]
 8017314:	9412      	str	r4, [sp, #72]	; 0x48
 8017316:	f7ff faca 	bl	80168ae <_svfprintf_r+0x31e>
 801731a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801731c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801731e:	e592      	b.n	8016e46 <_svfprintf_r+0x8b6>
 8017320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017322:	e42a      	b.n	8016b7a <_svfprintf_r+0x5ea>
 8017324:	2010      	movs	r0, #16
 8017326:	1812      	adds	r2, r2, r0
 8017328:	6078      	str	r0, [r7, #4]
 801732a:	922e      	str	r2, [sp, #184]	; 0xb8
 801732c:	932d      	str	r3, [sp, #180]	; 0xb4
 801732e:	2b07      	cmp	r3, #7
 8017330:	dd08      	ble.n	8017344 <_svfprintf_r+0xdb4>
 8017332:	aa2c      	add	r2, sp, #176	; 0xb0
 8017334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017336:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017338:	f002 fa7e 	bl	8019838 <__ssprint_r>
 801733c:	2800      	cmp	r0, #0
 801733e:	d000      	beq.n	8017342 <_svfprintf_r+0xdb2>
 8017340:	e34a      	b.n	80179d8 <_svfprintf_r+0x1448>
 8017342:	a92f      	add	r1, sp, #188	; 0xbc
 8017344:	3c10      	subs	r4, #16
 8017346:	000f      	movs	r7, r1
 8017348:	f7ff fad8 	bl	80168fc <_svfprintf_r+0x36c>
 801734c:	2010      	movs	r0, #16
 801734e:	1812      	adds	r2, r2, r0
 8017350:	6078      	str	r0, [r7, #4]
 8017352:	922e      	str	r2, [sp, #184]	; 0xb8
 8017354:	932d      	str	r3, [sp, #180]	; 0xb4
 8017356:	2b07      	cmp	r3, #7
 8017358:	dd08      	ble.n	801736c <_svfprintf_r+0xddc>
 801735a:	aa2c      	add	r2, sp, #176	; 0xb0
 801735c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801735e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017360:	f002 fa6a 	bl	8019838 <__ssprint_r>
 8017364:	2800      	cmp	r0, #0
 8017366:	d000      	beq.n	801736a <_svfprintf_r+0xdda>
 8017368:	e336      	b.n	80179d8 <_svfprintf_r+0x1448>
 801736a:	a92f      	add	r1, sp, #188	; 0xbc
 801736c:	3c10      	subs	r4, #16
 801736e:	000f      	movs	r7, r1
 8017370:	f7ff fb24 	bl	80169bc <_svfprintf_r+0x42c>
 8017374:	fffffbff 	.word	0xfffffbff
 8017378:	00007830 	.word	0x00007830
 801737c:	0801d238 	.word	0x0801d238
 8017380:	2010      	movs	r0, #16
 8017382:	1812      	adds	r2, r2, r0
 8017384:	6078      	str	r0, [r7, #4]
 8017386:	922e      	str	r2, [sp, #184]	; 0xb8
 8017388:	932d      	str	r3, [sp, #180]	; 0xb4
 801738a:	2b07      	cmp	r3, #7
 801738c:	dd08      	ble.n	80173a0 <_svfprintf_r+0xe10>
 801738e:	aa2c      	add	r2, sp, #176	; 0xb0
 8017390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017392:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017394:	f002 fa50 	bl	8019838 <__ssprint_r>
 8017398:	2800      	cmp	r0, #0
 801739a:	d000      	beq.n	801739e <_svfprintf_r+0xe0e>
 801739c:	e31c      	b.n	80179d8 <_svfprintf_r+0x1448>
 801739e:	a92f      	add	r1, sp, #188	; 0xbc
 80173a0:	3c10      	subs	r4, #16
 80173a2:	000f      	movs	r7, r1
 80173a4:	f7ff fb2c 	bl	8016a00 <_svfprintf_r+0x470>
 80173a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173aa:	2b65      	cmp	r3, #101	; 0x65
 80173ac:	dc00      	bgt.n	80173b0 <_svfprintf_r+0xe20>
 80173ae:	e259      	b.n	8017864 <_svfprintf_r+0x12d4>
 80173b0:	2200      	movs	r2, #0
 80173b2:	2300      	movs	r3, #0
 80173b4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80173b6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80173b8:	f7e9 f850 	bl	800045c <__aeabi_dcmpeq>
 80173bc:	2800      	cmp	r0, #0
 80173be:	d07c      	beq.n	80174ba <_svfprintf_r+0xf2a>
 80173c0:	4b81      	ldr	r3, [pc, #516]	; (80175c8 <_svfprintf_r+0x1038>)
 80173c2:	603b      	str	r3, [r7, #0]
 80173c4:	2301      	movs	r3, #1
 80173c6:	607b      	str	r3, [r7, #4]
 80173c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80173ca:	3708      	adds	r7, #8
 80173cc:	3301      	adds	r3, #1
 80173ce:	932e      	str	r3, [sp, #184]	; 0xb8
 80173d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80173d2:	9308      	str	r3, [sp, #32]
 80173d4:	3301      	adds	r3, #1
 80173d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80173d8:	2b07      	cmp	r3, #7
 80173da:	dd08      	ble.n	80173ee <_svfprintf_r+0xe5e>
 80173dc:	aa2c      	add	r2, sp, #176	; 0xb0
 80173de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80173e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80173e2:	f002 fa29 	bl	8019838 <__ssprint_r>
 80173e6:	2800      	cmp	r0, #0
 80173e8:	d000      	beq.n	80173ec <_svfprintf_r+0xe5c>
 80173ea:	e2f5      	b.n	80179d8 <_svfprintf_r+0x1448>
 80173ec:	af2f      	add	r7, sp, #188	; 0xbc
 80173ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80173f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80173f2:	4293      	cmp	r3, r2
 80173f4:	db01      	blt.n	80173fa <_svfprintf_r+0xe6a>
 80173f6:	07f3      	lsls	r3, r6, #31
 80173f8:	d51d      	bpl.n	8017436 <_svfprintf_r+0xea6>
 80173fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80173fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80173fe:	4694      	mov	ip, r2
 8017400:	603b      	str	r3, [r7, #0]
 8017402:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017404:	607b      	str	r3, [r7, #4]
 8017406:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017408:	3708      	adds	r7, #8
 801740a:	4463      	add	r3, ip
 801740c:	932e      	str	r3, [sp, #184]	; 0xb8
 801740e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017410:	9308      	str	r3, [sp, #32]
 8017412:	3301      	adds	r3, #1
 8017414:	932d      	str	r3, [sp, #180]	; 0xb4
 8017416:	2b07      	cmp	r3, #7
 8017418:	dd08      	ble.n	801742c <_svfprintf_r+0xe9c>
 801741a:	aa2c      	add	r2, sp, #176	; 0xb0
 801741c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801741e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017420:	f002 fa0a 	bl	8019838 <__ssprint_r>
 8017424:	2800      	cmp	r0, #0
 8017426:	d000      	beq.n	801742a <_svfprintf_r+0xe9a>
 8017428:	e2d6      	b.n	80179d8 <_svfprintf_r+0x1448>
 801742a:	af2f      	add	r7, sp, #188	; 0xbc
 801742c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801742e:	2510      	movs	r5, #16
 8017430:	1e5c      	subs	r4, r3, #1
 8017432:	2c00      	cmp	r4, #0
 8017434:	dc2f      	bgt.n	8017496 <_svfprintf_r+0xf06>
 8017436:	0773      	lsls	r3, r6, #29
 8017438:	d500      	bpl.n	801743c <_svfprintf_r+0xeac>
 801743a:	e2af      	b.n	801799c <_svfprintf_r+0x140c>
 801743c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801743e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017440:	4293      	cmp	r3, r2
 8017442:	da00      	bge.n	8017446 <_svfprintf_r+0xeb6>
 8017444:	0013      	movs	r3, r2
 8017446:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017448:	18d3      	adds	r3, r2, r3
 801744a:	9315      	str	r3, [sp, #84]	; 0x54
 801744c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801744e:	9308      	str	r3, [sp, #32]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d007      	beq.n	8017464 <_svfprintf_r+0xed4>
 8017454:	aa2c      	add	r2, sp, #176	; 0xb0
 8017456:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017458:	980a      	ldr	r0, [sp, #40]	; 0x28
 801745a:	f002 f9ed 	bl	8019838 <__ssprint_r>
 801745e:	2800      	cmp	r0, #0
 8017460:	d000      	beq.n	8017464 <_svfprintf_r+0xed4>
 8017462:	e2b9      	b.n	80179d8 <_svfprintf_r+0x1448>
 8017464:	2300      	movs	r3, #0
 8017466:	932d      	str	r3, [sp, #180]	; 0xb4
 8017468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801746a:	2b00      	cmp	r3, #0
 801746c:	d000      	beq.n	8017470 <_svfprintf_r+0xee0>
 801746e:	e2cf      	b.n	8017a10 <_svfprintf_r+0x1480>
 8017470:	af2f      	add	r7, sp, #188	; 0xbc
 8017472:	e5d6      	b.n	8017022 <_svfprintf_r+0xa92>
 8017474:	3210      	adds	r2, #16
 8017476:	607d      	str	r5, [r7, #4]
 8017478:	922e      	str	r2, [sp, #184]	; 0xb8
 801747a:	932d      	str	r3, [sp, #180]	; 0xb4
 801747c:	2b07      	cmp	r3, #7
 801747e:	dd08      	ble.n	8017492 <_svfprintf_r+0xf02>
 8017480:	aa2c      	add	r2, sp, #176	; 0xb0
 8017482:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017484:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017486:	f002 f9d7 	bl	8019838 <__ssprint_r>
 801748a:	2800      	cmp	r0, #0
 801748c:	d000      	beq.n	8017490 <_svfprintf_r+0xf00>
 801748e:	e2a3      	b.n	80179d8 <_svfprintf_r+0x1448>
 8017490:	a92f      	add	r1, sp, #188	; 0xbc
 8017492:	000f      	movs	r7, r1
 8017494:	3c10      	subs	r4, #16
 8017496:	0039      	movs	r1, r7
 8017498:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801749a:	484c      	ldr	r0, [pc, #304]	; (80175cc <_svfprintf_r+0x103c>)
 801749c:	9308      	str	r3, [sp, #32]
 801749e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80174a0:	3301      	adds	r3, #1
 80174a2:	3108      	adds	r1, #8
 80174a4:	6038      	str	r0, [r7, #0]
 80174a6:	2c10      	cmp	r4, #16
 80174a8:	dce4      	bgt.n	8017474 <_svfprintf_r+0xee4>
 80174aa:	607c      	str	r4, [r7, #4]
 80174ac:	18a4      	adds	r4, r4, r2
 80174ae:	942e      	str	r4, [sp, #184]	; 0xb8
 80174b0:	932d      	str	r3, [sp, #180]	; 0xb4
 80174b2:	000f      	movs	r7, r1
 80174b4:	2b07      	cmp	r3, #7
 80174b6:	ddbe      	ble.n	8017436 <_svfprintf_r+0xea6>
 80174b8:	e06a      	b.n	8017590 <_svfprintf_r+0x1000>
 80174ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80174bc:	2b00      	cmp	r3, #0
 80174be:	dd00      	ble.n	80174c2 <_svfprintf_r+0xf32>
 80174c0:	e086      	b.n	80175d0 <_svfprintf_r+0x1040>
 80174c2:	4b41      	ldr	r3, [pc, #260]	; (80175c8 <_svfprintf_r+0x1038>)
 80174c4:	603b      	str	r3, [r7, #0]
 80174c6:	2301      	movs	r3, #1
 80174c8:	607b      	str	r3, [r7, #4]
 80174ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80174cc:	3708      	adds	r7, #8
 80174ce:	3301      	adds	r3, #1
 80174d0:	932e      	str	r3, [sp, #184]	; 0xb8
 80174d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80174d4:	9308      	str	r3, [sp, #32]
 80174d6:	3301      	adds	r3, #1
 80174d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80174da:	2b07      	cmp	r3, #7
 80174dc:	dd08      	ble.n	80174f0 <_svfprintf_r+0xf60>
 80174de:	aa2c      	add	r2, sp, #176	; 0xb0
 80174e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80174e4:	f002 f9a8 	bl	8019838 <__ssprint_r>
 80174e8:	2800      	cmp	r0, #0
 80174ea:	d000      	beq.n	80174ee <_svfprintf_r+0xf5e>
 80174ec:	e274      	b.n	80179d8 <_svfprintf_r+0x1448>
 80174ee:	af2f      	add	r7, sp, #188	; 0xbc
 80174f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d104      	bne.n	8017500 <_svfprintf_r+0xf70>
 80174f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d101      	bne.n	8017500 <_svfprintf_r+0xf70>
 80174fc:	07f3      	lsls	r3, r6, #31
 80174fe:	d59a      	bpl.n	8017436 <_svfprintf_r+0xea6>
 8017500:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017502:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017504:	4694      	mov	ip, r2
 8017506:	603b      	str	r3, [r7, #0]
 8017508:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801750a:	607b      	str	r3, [r7, #4]
 801750c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801750e:	3708      	adds	r7, #8
 8017510:	4463      	add	r3, ip
 8017512:	932e      	str	r3, [sp, #184]	; 0xb8
 8017514:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017516:	9308      	str	r3, [sp, #32]
 8017518:	3301      	adds	r3, #1
 801751a:	932d      	str	r3, [sp, #180]	; 0xb4
 801751c:	2b07      	cmp	r3, #7
 801751e:	dd08      	ble.n	8017532 <_svfprintf_r+0xfa2>
 8017520:	aa2c      	add	r2, sp, #176	; 0xb0
 8017522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017524:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017526:	f002 f987 	bl	8019838 <__ssprint_r>
 801752a:	2800      	cmp	r0, #0
 801752c:	d000      	beq.n	8017530 <_svfprintf_r+0xfa0>
 801752e:	e253      	b.n	80179d8 <_svfprintf_r+0x1448>
 8017530:	af2f      	add	r7, sp, #188	; 0xbc
 8017532:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8017534:	2c00      	cmp	r4, #0
 8017536:	da1a      	bge.n	801756e <_svfprintf_r+0xfde>
 8017538:	0039      	movs	r1, r7
 801753a:	2510      	movs	r5, #16
 801753c:	4264      	negs	r4, r4
 801753e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017540:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8017542:	9308      	str	r3, [sp, #32]
 8017544:	1c5a      	adds	r2, r3, #1
 8017546:	4b21      	ldr	r3, [pc, #132]	; (80175cc <_svfprintf_r+0x103c>)
 8017548:	3708      	adds	r7, #8
 801754a:	600b      	str	r3, [r1, #0]
 801754c:	2c10      	cmp	r4, #16
 801754e:	dc29      	bgt.n	80175a4 <_svfprintf_r+0x1014>
 8017550:	604c      	str	r4, [r1, #4]
 8017552:	1824      	adds	r4, r4, r0
 8017554:	942e      	str	r4, [sp, #184]	; 0xb8
 8017556:	922d      	str	r2, [sp, #180]	; 0xb4
 8017558:	2a07      	cmp	r2, #7
 801755a:	dd08      	ble.n	801756e <_svfprintf_r+0xfde>
 801755c:	aa2c      	add	r2, sp, #176	; 0xb0
 801755e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017560:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017562:	f002 f969 	bl	8019838 <__ssprint_r>
 8017566:	2800      	cmp	r0, #0
 8017568:	d000      	beq.n	801756c <_svfprintf_r+0xfdc>
 801756a:	e235      	b.n	80179d8 <_svfprintf_r+0x1448>
 801756c:	af2f      	add	r7, sp, #188	; 0xbc
 801756e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017572:	468c      	mov	ip, r1
 8017574:	603b      	str	r3, [r7, #0]
 8017576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017578:	607b      	str	r3, [r7, #4]
 801757a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801757c:	4463      	add	r3, ip
 801757e:	932e      	str	r3, [sp, #184]	; 0xb8
 8017580:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017582:	1c5a      	adds	r2, r3, #1
 8017584:	9308      	str	r3, [sp, #32]
 8017586:	922d      	str	r2, [sp, #180]	; 0xb4
 8017588:	2a07      	cmp	r2, #7
 801758a:	dc01      	bgt.n	8017590 <_svfprintf_r+0x1000>
 801758c:	f7ff fa6c 	bl	8016a68 <_svfprintf_r+0x4d8>
 8017590:	aa2c      	add	r2, sp, #176	; 0xb0
 8017592:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017594:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017596:	f002 f94f 	bl	8019838 <__ssprint_r>
 801759a:	2800      	cmp	r0, #0
 801759c:	d000      	beq.n	80175a0 <_svfprintf_r+0x1010>
 801759e:	e21b      	b.n	80179d8 <_svfprintf_r+0x1448>
 80175a0:	af2f      	add	r7, sp, #188	; 0xbc
 80175a2:	e748      	b.n	8017436 <_svfprintf_r+0xea6>
 80175a4:	3010      	adds	r0, #16
 80175a6:	604d      	str	r5, [r1, #4]
 80175a8:	902e      	str	r0, [sp, #184]	; 0xb8
 80175aa:	922d      	str	r2, [sp, #180]	; 0xb4
 80175ac:	2a07      	cmp	r2, #7
 80175ae:	dd08      	ble.n	80175c2 <_svfprintf_r+0x1032>
 80175b0:	aa2c      	add	r2, sp, #176	; 0xb0
 80175b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80175b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80175b6:	f002 f93f 	bl	8019838 <__ssprint_r>
 80175ba:	2800      	cmp	r0, #0
 80175bc:	d000      	beq.n	80175c0 <_svfprintf_r+0x1030>
 80175be:	e20b      	b.n	80179d8 <_svfprintf_r+0x1448>
 80175c0:	af2f      	add	r7, sp, #188	; 0xbc
 80175c2:	3c10      	subs	r4, #16
 80175c4:	0039      	movs	r1, r7
 80175c6:	e7ba      	b.n	801753e <_svfprintf_r+0xfae>
 80175c8:	0801d25a 	.word	0x0801d25a
 80175cc:	0801d26c 	.word	0x0801d26c
 80175d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175d2:	002c      	movs	r4, r5
 80175d4:	429d      	cmp	r5, r3
 80175d6:	dd00      	ble.n	80175da <_svfprintf_r+0x104a>
 80175d8:	001c      	movs	r4, r3
 80175da:	2c00      	cmp	r4, #0
 80175dc:	dd15      	ble.n	801760a <_svfprintf_r+0x107a>
 80175de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175e0:	607c      	str	r4, [r7, #4]
 80175e2:	603b      	str	r3, [r7, #0]
 80175e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80175e6:	3708      	adds	r7, #8
 80175e8:	18e3      	adds	r3, r4, r3
 80175ea:	932e      	str	r3, [sp, #184]	; 0xb8
 80175ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80175ee:	9308      	str	r3, [sp, #32]
 80175f0:	3301      	adds	r3, #1
 80175f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80175f4:	2b07      	cmp	r3, #7
 80175f6:	dd08      	ble.n	801760a <_svfprintf_r+0x107a>
 80175f8:	aa2c      	add	r2, sp, #176	; 0xb0
 80175fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80175fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80175fe:	f002 f91b 	bl	8019838 <__ssprint_r>
 8017602:	2800      	cmp	r0, #0
 8017604:	d000      	beq.n	8017608 <_svfprintf_r+0x1078>
 8017606:	e1e7      	b.n	80179d8 <_svfprintf_r+0x1448>
 8017608:	af2f      	add	r7, sp, #188	; 0xbc
 801760a:	43e3      	mvns	r3, r4
 801760c:	17db      	asrs	r3, r3, #31
 801760e:	401c      	ands	r4, r3
 8017610:	1b2c      	subs	r4, r5, r4
 8017612:	2c00      	cmp	r4, #0
 8017614:	dd1a      	ble.n	801764c <_svfprintf_r+0x10bc>
 8017616:	0039      	movs	r1, r7
 8017618:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801761a:	48d4      	ldr	r0, [pc, #848]	; (801796c <_svfprintf_r+0x13dc>)
 801761c:	9308      	str	r3, [sp, #32]
 801761e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017620:	3301      	adds	r3, #1
 8017622:	3108      	adds	r1, #8
 8017624:	6038      	str	r0, [r7, #0]
 8017626:	2c10      	cmp	r4, #16
 8017628:	dd00      	ble.n	801762c <_svfprintf_r+0x109c>
 801762a:	e089      	b.n	8017740 <_svfprintf_r+0x11b0>
 801762c:	607c      	str	r4, [r7, #4]
 801762e:	18a4      	adds	r4, r4, r2
 8017630:	942e      	str	r4, [sp, #184]	; 0xb8
 8017632:	932d      	str	r3, [sp, #180]	; 0xb4
 8017634:	000f      	movs	r7, r1
 8017636:	2b07      	cmp	r3, #7
 8017638:	dd08      	ble.n	801764c <_svfprintf_r+0x10bc>
 801763a:	aa2c      	add	r2, sp, #176	; 0xb0
 801763c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801763e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017640:	f002 f8fa 	bl	8019838 <__ssprint_r>
 8017644:	2800      	cmp	r0, #0
 8017646:	d000      	beq.n	801764a <_svfprintf_r+0x10ba>
 8017648:	e1c6      	b.n	80179d8 <_svfprintf_r+0x1448>
 801764a:	af2f      	add	r7, sp, #188	; 0xbc
 801764c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801764e:	195d      	adds	r5, r3, r5
 8017650:	0573      	lsls	r3, r6, #21
 8017652:	d50d      	bpl.n	8017670 <_svfprintf_r+0x10e0>
 8017654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017656:	2b00      	cmp	r3, #0
 8017658:	d000      	beq.n	801765c <_svfprintf_r+0x10cc>
 801765a:	e084      	b.n	8017766 <_svfprintf_r+0x11d6>
 801765c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801765e:	2b00      	cmp	r3, #0
 8017660:	d000      	beq.n	8017664 <_svfprintf_r+0x10d4>
 8017662:	e083      	b.n	801776c <_svfprintf_r+0x11dc>
 8017664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017668:	189b      	adds	r3, r3, r2
 801766a:	429d      	cmp	r5, r3
 801766c:	d900      	bls.n	8017670 <_svfprintf_r+0x10e0>
 801766e:	001d      	movs	r5, r3
 8017670:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017672:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017674:	4293      	cmp	r3, r2
 8017676:	db01      	blt.n	801767c <_svfprintf_r+0x10ec>
 8017678:	07f3      	lsls	r3, r6, #31
 801767a:	d518      	bpl.n	80176ae <_svfprintf_r+0x111e>
 801767c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801767e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017680:	4694      	mov	ip, r2
 8017682:	603b      	str	r3, [r7, #0]
 8017684:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017686:	607b      	str	r3, [r7, #4]
 8017688:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801768a:	3708      	adds	r7, #8
 801768c:	4463      	add	r3, ip
 801768e:	932e      	str	r3, [sp, #184]	; 0xb8
 8017690:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017692:	9308      	str	r3, [sp, #32]
 8017694:	3301      	adds	r3, #1
 8017696:	932d      	str	r3, [sp, #180]	; 0xb4
 8017698:	2b07      	cmp	r3, #7
 801769a:	dd08      	ble.n	80176ae <_svfprintf_r+0x111e>
 801769c:	aa2c      	add	r2, sp, #176	; 0xb0
 801769e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80176a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80176a2:	f002 f8c9 	bl	8019838 <__ssprint_r>
 80176a6:	2800      	cmp	r0, #0
 80176a8:	d000      	beq.n	80176ac <_svfprintf_r+0x111c>
 80176aa:	e195      	b.n	80179d8 <_svfprintf_r+0x1448>
 80176ac:	af2f      	add	r7, sp, #188	; 0xbc
 80176ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80176b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176b2:	4694      	mov	ip, r2
 80176b4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80176b6:	4463      	add	r3, ip
 80176b8:	1b5b      	subs	r3, r3, r5
 80176ba:	1a54      	subs	r4, r2, r1
 80176bc:	429c      	cmp	r4, r3
 80176be:	dd00      	ble.n	80176c2 <_svfprintf_r+0x1132>
 80176c0:	001c      	movs	r4, r3
 80176c2:	2c00      	cmp	r4, #0
 80176c4:	dd14      	ble.n	80176f0 <_svfprintf_r+0x1160>
 80176c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80176c8:	603d      	str	r5, [r7, #0]
 80176ca:	18e3      	adds	r3, r4, r3
 80176cc:	932e      	str	r3, [sp, #184]	; 0xb8
 80176ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80176d0:	607c      	str	r4, [r7, #4]
 80176d2:	9308      	str	r3, [sp, #32]
 80176d4:	3301      	adds	r3, #1
 80176d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80176d8:	3708      	adds	r7, #8
 80176da:	2b07      	cmp	r3, #7
 80176dc:	dd08      	ble.n	80176f0 <_svfprintf_r+0x1160>
 80176de:	aa2c      	add	r2, sp, #176	; 0xb0
 80176e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80176e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80176e4:	f002 f8a8 	bl	8019838 <__ssprint_r>
 80176e8:	2800      	cmp	r0, #0
 80176ea:	d000      	beq.n	80176ee <_svfprintf_r+0x115e>
 80176ec:	e174      	b.n	80179d8 <_svfprintf_r+0x1448>
 80176ee:	af2f      	add	r7, sp, #188	; 0xbc
 80176f0:	43e3      	mvns	r3, r4
 80176f2:	17db      	asrs	r3, r3, #31
 80176f4:	401c      	ands	r4, r3
 80176f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80176f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80176fa:	2510      	movs	r5, #16
 80176fc:	1a9b      	subs	r3, r3, r2
 80176fe:	1b1c      	subs	r4, r3, r4
 8017700:	2c00      	cmp	r4, #0
 8017702:	dc00      	bgt.n	8017706 <_svfprintf_r+0x1176>
 8017704:	e697      	b.n	8017436 <_svfprintf_r+0xea6>
 8017706:	0039      	movs	r1, r7
 8017708:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801770a:	4898      	ldr	r0, [pc, #608]	; (801796c <_svfprintf_r+0x13dc>)
 801770c:	9308      	str	r3, [sp, #32]
 801770e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017710:	3301      	adds	r3, #1
 8017712:	3108      	adds	r1, #8
 8017714:	6038      	str	r0, [r7, #0]
 8017716:	2c10      	cmp	r4, #16
 8017718:	dc00      	bgt.n	801771c <_svfprintf_r+0x118c>
 801771a:	e6c6      	b.n	80174aa <_svfprintf_r+0xf1a>
 801771c:	3210      	adds	r2, #16
 801771e:	607d      	str	r5, [r7, #4]
 8017720:	922e      	str	r2, [sp, #184]	; 0xb8
 8017722:	932d      	str	r3, [sp, #180]	; 0xb4
 8017724:	2b07      	cmp	r3, #7
 8017726:	dd08      	ble.n	801773a <_svfprintf_r+0x11aa>
 8017728:	aa2c      	add	r2, sp, #176	; 0xb0
 801772a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801772c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801772e:	f002 f883 	bl	8019838 <__ssprint_r>
 8017732:	2800      	cmp	r0, #0
 8017734:	d000      	beq.n	8017738 <_svfprintf_r+0x11a8>
 8017736:	e14f      	b.n	80179d8 <_svfprintf_r+0x1448>
 8017738:	a92f      	add	r1, sp, #188	; 0xbc
 801773a:	3c10      	subs	r4, #16
 801773c:	000f      	movs	r7, r1
 801773e:	e7e2      	b.n	8017706 <_svfprintf_r+0x1176>
 8017740:	2010      	movs	r0, #16
 8017742:	1812      	adds	r2, r2, r0
 8017744:	6078      	str	r0, [r7, #4]
 8017746:	922e      	str	r2, [sp, #184]	; 0xb8
 8017748:	932d      	str	r3, [sp, #180]	; 0xb4
 801774a:	2b07      	cmp	r3, #7
 801774c:	dd08      	ble.n	8017760 <_svfprintf_r+0x11d0>
 801774e:	aa2c      	add	r2, sp, #176	; 0xb0
 8017750:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017752:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017754:	f002 f870 	bl	8019838 <__ssprint_r>
 8017758:	2800      	cmp	r0, #0
 801775a:	d000      	beq.n	801775e <_svfprintf_r+0x11ce>
 801775c:	e13c      	b.n	80179d8 <_svfprintf_r+0x1448>
 801775e:	a92f      	add	r1, sp, #188	; 0xbc
 8017760:	3c10      	subs	r4, #16
 8017762:	000f      	movs	r7, r1
 8017764:	e757      	b.n	8017616 <_svfprintf_r+0x1086>
 8017766:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017768:	2b00      	cmp	r3, #0
 801776a:	d061      	beq.n	8017830 <_svfprintf_r+0x12a0>
 801776c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801776e:	3b01      	subs	r3, #1
 8017770:	9310      	str	r3, [sp, #64]	; 0x40
 8017772:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017774:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017776:	4694      	mov	ip, r2
 8017778:	603b      	str	r3, [r7, #0]
 801777a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801777c:	607b      	str	r3, [r7, #4]
 801777e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017780:	3708      	adds	r7, #8
 8017782:	4463      	add	r3, ip
 8017784:	932e      	str	r3, [sp, #184]	; 0xb8
 8017786:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017788:	9308      	str	r3, [sp, #32]
 801778a:	3301      	adds	r3, #1
 801778c:	932d      	str	r3, [sp, #180]	; 0xb4
 801778e:	2b07      	cmp	r3, #7
 8017790:	dd08      	ble.n	80177a4 <_svfprintf_r+0x1214>
 8017792:	aa2c      	add	r2, sp, #176	; 0xb0
 8017794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017796:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017798:	f002 f84e 	bl	8019838 <__ssprint_r>
 801779c:	2800      	cmp	r0, #0
 801779e:	d000      	beq.n	80177a2 <_svfprintf_r+0x1212>
 80177a0:	e11a      	b.n	80179d8 <_svfprintf_r+0x1448>
 80177a2:	af2f      	add	r7, sp, #188	; 0xbc
 80177a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80177a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177a8:	189b      	adds	r3, r3, r2
 80177aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80177ac:	1b5b      	subs	r3, r3, r5
 80177ae:	7814      	ldrb	r4, [r2, #0]
 80177b0:	429c      	cmp	r4, r3
 80177b2:	dd00      	ble.n	80177b6 <_svfprintf_r+0x1226>
 80177b4:	001c      	movs	r4, r3
 80177b6:	2c00      	cmp	r4, #0
 80177b8:	dd14      	ble.n	80177e4 <_svfprintf_r+0x1254>
 80177ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80177bc:	603d      	str	r5, [r7, #0]
 80177be:	18e3      	adds	r3, r4, r3
 80177c0:	932e      	str	r3, [sp, #184]	; 0xb8
 80177c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80177c4:	607c      	str	r4, [r7, #4]
 80177c6:	9308      	str	r3, [sp, #32]
 80177c8:	3301      	adds	r3, #1
 80177ca:	932d      	str	r3, [sp, #180]	; 0xb4
 80177cc:	3708      	adds	r7, #8
 80177ce:	2b07      	cmp	r3, #7
 80177d0:	dd08      	ble.n	80177e4 <_svfprintf_r+0x1254>
 80177d2:	aa2c      	add	r2, sp, #176	; 0xb0
 80177d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80177d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80177d8:	f002 f82e 	bl	8019838 <__ssprint_r>
 80177dc:	2800      	cmp	r0, #0
 80177de:	d000      	beq.n	80177e2 <_svfprintf_r+0x1252>
 80177e0:	e0fa      	b.n	80179d8 <_svfprintf_r+0x1448>
 80177e2:	af2f      	add	r7, sp, #188	; 0xbc
 80177e4:	43e3      	mvns	r3, r4
 80177e6:	17db      	asrs	r3, r3, #31
 80177e8:	401c      	ands	r4, r3
 80177ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80177ec:	781b      	ldrb	r3, [r3, #0]
 80177ee:	1b1c      	subs	r4, r3, r4
 80177f0:	2c00      	cmp	r4, #0
 80177f2:	dd19      	ble.n	8017828 <_svfprintf_r+0x1298>
 80177f4:	0039      	movs	r1, r7
 80177f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80177f8:	485c      	ldr	r0, [pc, #368]	; (801796c <_svfprintf_r+0x13dc>)
 80177fa:	9308      	str	r3, [sp, #32]
 80177fc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80177fe:	3301      	adds	r3, #1
 8017800:	3108      	adds	r1, #8
 8017802:	6038      	str	r0, [r7, #0]
 8017804:	2c10      	cmp	r4, #16
 8017806:	dc1a      	bgt.n	801783e <_svfprintf_r+0x12ae>
 8017808:	607c      	str	r4, [r7, #4]
 801780a:	18a4      	adds	r4, r4, r2
 801780c:	942e      	str	r4, [sp, #184]	; 0xb8
 801780e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017810:	000f      	movs	r7, r1
 8017812:	2b07      	cmp	r3, #7
 8017814:	dd08      	ble.n	8017828 <_svfprintf_r+0x1298>
 8017816:	aa2c      	add	r2, sp, #176	; 0xb0
 8017818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801781a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801781c:	f002 f80c 	bl	8019838 <__ssprint_r>
 8017820:	2800      	cmp	r0, #0
 8017822:	d000      	beq.n	8017826 <_svfprintf_r+0x1296>
 8017824:	e0d8      	b.n	80179d8 <_svfprintf_r+0x1448>
 8017826:	af2f      	add	r7, sp, #188	; 0xbc
 8017828:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	18ed      	adds	r5, r5, r3
 801782e:	e711      	b.n	8017654 <_svfprintf_r+0x10c4>
 8017830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017832:	3b01      	subs	r3, #1
 8017834:	9313      	str	r3, [sp, #76]	; 0x4c
 8017836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017838:	3b01      	subs	r3, #1
 801783a:	930f      	str	r3, [sp, #60]	; 0x3c
 801783c:	e799      	b.n	8017772 <_svfprintf_r+0x11e2>
 801783e:	2010      	movs	r0, #16
 8017840:	1812      	adds	r2, r2, r0
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	922e      	str	r2, [sp, #184]	; 0xb8
 8017846:	932d      	str	r3, [sp, #180]	; 0xb4
 8017848:	2b07      	cmp	r3, #7
 801784a:	dd08      	ble.n	801785e <_svfprintf_r+0x12ce>
 801784c:	aa2c      	add	r2, sp, #176	; 0xb0
 801784e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017850:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017852:	f001 fff1 	bl	8019838 <__ssprint_r>
 8017856:	2800      	cmp	r0, #0
 8017858:	d000      	beq.n	801785c <_svfprintf_r+0x12cc>
 801785a:	e0bd      	b.n	80179d8 <_svfprintf_r+0x1448>
 801785c:	a92f      	add	r1, sp, #188	; 0xbc
 801785e:	3c10      	subs	r4, #16
 8017860:	000f      	movs	r7, r1
 8017862:	e7c7      	b.n	80177f4 <_svfprintf_r+0x1264>
 8017864:	003c      	movs	r4, r7
 8017866:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017868:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801786a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801786c:	9308      	str	r3, [sp, #32]
 801786e:	3101      	adds	r1, #1
 8017870:	3301      	adds	r3, #1
 8017872:	3408      	adds	r4, #8
 8017874:	2a01      	cmp	r2, #1
 8017876:	dc03      	bgt.n	8017880 <_svfprintf_r+0x12f0>
 8017878:	2201      	movs	r2, #1
 801787a:	4216      	tst	r6, r2
 801787c:	d100      	bne.n	8017880 <_svfprintf_r+0x12f0>
 801787e:	e088      	b.n	8017992 <_svfprintf_r+0x1402>
 8017880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017882:	912e      	str	r1, [sp, #184]	; 0xb8
 8017884:	603a      	str	r2, [r7, #0]
 8017886:	2201      	movs	r2, #1
 8017888:	932d      	str	r3, [sp, #180]	; 0xb4
 801788a:	607a      	str	r2, [r7, #4]
 801788c:	2b07      	cmp	r3, #7
 801788e:	dd08      	ble.n	80178a2 <_svfprintf_r+0x1312>
 8017890:	aa2c      	add	r2, sp, #176	; 0xb0
 8017892:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017894:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017896:	f001 ffcf 	bl	8019838 <__ssprint_r>
 801789a:	2800      	cmp	r0, #0
 801789c:	d000      	beq.n	80178a0 <_svfprintf_r+0x1310>
 801789e:	e09b      	b.n	80179d8 <_svfprintf_r+0x1448>
 80178a0:	ac2f      	add	r4, sp, #188	; 0xbc
 80178a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80178a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80178a6:	4694      	mov	ip, r2
 80178a8:	6023      	str	r3, [r4, #0]
 80178aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80178ac:	6063      	str	r3, [r4, #4]
 80178ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80178b0:	3408      	adds	r4, #8
 80178b2:	4463      	add	r3, ip
 80178b4:	932e      	str	r3, [sp, #184]	; 0xb8
 80178b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80178b8:	9308      	str	r3, [sp, #32]
 80178ba:	3301      	adds	r3, #1
 80178bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80178be:	2b07      	cmp	r3, #7
 80178c0:	dd08      	ble.n	80178d4 <_svfprintf_r+0x1344>
 80178c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80178c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80178c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80178c8:	f001 ffb6 	bl	8019838 <__ssprint_r>
 80178cc:	2800      	cmp	r0, #0
 80178ce:	d000      	beq.n	80178d2 <_svfprintf_r+0x1342>
 80178d0:	e082      	b.n	80179d8 <_svfprintf_r+0x1448>
 80178d2:	ac2f      	add	r4, sp, #188	; 0xbc
 80178d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178d6:	2200      	movs	r2, #0
 80178d8:	1e5d      	subs	r5, r3, #1
 80178da:	981a      	ldr	r0, [sp, #104]	; 0x68
 80178dc:	2300      	movs	r3, #0
 80178de:	9919      	ldr	r1, [sp, #100]	; 0x64
 80178e0:	f7e8 fdbc 	bl	800045c <__aeabi_dcmpeq>
 80178e4:	2800      	cmp	r0, #0
 80178e6:	d12c      	bne.n	8017942 <_svfprintf_r+0x13b2>
 80178e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80178ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80178ec:	9308      	str	r3, [sp, #32]
 80178ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80178f0:	6065      	str	r5, [r4, #4]
 80178f2:	1c5a      	adds	r2, r3, #1
 80178f4:	930e      	str	r3, [sp, #56]	; 0x38
 80178f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178f8:	922d      	str	r2, [sp, #180]	; 0xb4
 80178fa:	3301      	adds	r3, #1
 80178fc:	6023      	str	r3, [r4, #0]
 80178fe:	9b08      	ldr	r3, [sp, #32]
 8017900:	3408      	adds	r4, #8
 8017902:	3b01      	subs	r3, #1
 8017904:	185b      	adds	r3, r3, r1
 8017906:	932e      	str	r3, [sp, #184]	; 0xb8
 8017908:	2a07      	cmp	r2, #7
 801790a:	dd07      	ble.n	801791c <_svfprintf_r+0x138c>
 801790c:	aa2c      	add	r2, sp, #176	; 0xb0
 801790e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017910:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017912:	f001 ff91 	bl	8019838 <__ssprint_r>
 8017916:	2800      	cmp	r0, #0
 8017918:	d15e      	bne.n	80179d8 <_svfprintf_r+0x1448>
 801791a:	ac2f      	add	r4, sp, #188	; 0xbc
 801791c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801791e:	ab28      	add	r3, sp, #160	; 0xa0
 8017920:	4694      	mov	ip, r2
 8017922:	6023      	str	r3, [r4, #0]
 8017924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017926:	6063      	str	r3, [r4, #4]
 8017928:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801792a:	4463      	add	r3, ip
 801792c:	932e      	str	r3, [sp, #184]	; 0xb8
 801792e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017930:	9308      	str	r3, [sp, #32]
 8017932:	3301      	adds	r3, #1
 8017934:	932d      	str	r3, [sp, #180]	; 0xb4
 8017936:	2b07      	cmp	r3, #7
 8017938:	dd00      	ble.n	801793c <_svfprintf_r+0x13ac>
 801793a:	e629      	b.n	8017590 <_svfprintf_r+0x1000>
 801793c:	3408      	adds	r4, #8
 801793e:	0027      	movs	r7, r4
 8017940:	e579      	b.n	8017436 <_svfprintf_r+0xea6>
 8017942:	2710      	movs	r7, #16
 8017944:	2d00      	cmp	r5, #0
 8017946:	dde9      	ble.n	801791c <_svfprintf_r+0x138c>
 8017948:	0021      	movs	r1, r4
 801794a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801794c:	4807      	ldr	r0, [pc, #28]	; (801796c <_svfprintf_r+0x13dc>)
 801794e:	9308      	str	r3, [sp, #32]
 8017950:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017952:	3301      	adds	r3, #1
 8017954:	3108      	adds	r1, #8
 8017956:	6020      	str	r0, [r4, #0]
 8017958:	2d10      	cmp	r5, #16
 801795a:	dc09      	bgt.n	8017970 <_svfprintf_r+0x13e0>
 801795c:	6065      	str	r5, [r4, #4]
 801795e:	000c      	movs	r4, r1
 8017960:	18ad      	adds	r5, r5, r2
 8017962:	952e      	str	r5, [sp, #184]	; 0xb8
 8017964:	932d      	str	r3, [sp, #180]	; 0xb4
 8017966:	2b07      	cmp	r3, #7
 8017968:	ddd8      	ble.n	801791c <_svfprintf_r+0x138c>
 801796a:	e7cf      	b.n	801790c <_svfprintf_r+0x137c>
 801796c:	0801d26c 	.word	0x0801d26c
 8017970:	3210      	adds	r2, #16
 8017972:	6067      	str	r7, [r4, #4]
 8017974:	922e      	str	r2, [sp, #184]	; 0xb8
 8017976:	932d      	str	r3, [sp, #180]	; 0xb4
 8017978:	2b07      	cmp	r3, #7
 801797a:	dd07      	ble.n	801798c <_svfprintf_r+0x13fc>
 801797c:	aa2c      	add	r2, sp, #176	; 0xb0
 801797e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017980:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017982:	f001 ff59 	bl	8019838 <__ssprint_r>
 8017986:	2800      	cmp	r0, #0
 8017988:	d126      	bne.n	80179d8 <_svfprintf_r+0x1448>
 801798a:	a92f      	add	r1, sp, #188	; 0xbc
 801798c:	3d10      	subs	r5, #16
 801798e:	000c      	movs	r4, r1
 8017990:	e7da      	b.n	8017948 <_svfprintf_r+0x13b8>
 8017992:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017994:	912e      	str	r1, [sp, #184]	; 0xb8
 8017996:	c705      	stmia	r7!, {r0, r2}
 8017998:	932d      	str	r3, [sp, #180]	; 0xb4
 801799a:	e7e4      	b.n	8017966 <_svfprintf_r+0x13d6>
 801799c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801799e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80179a0:	2510      	movs	r5, #16
 80179a2:	1a9c      	subs	r4, r3, r2
 80179a4:	2c00      	cmp	r4, #0
 80179a6:	dc00      	bgt.n	80179aa <_svfprintf_r+0x141a>
 80179a8:	e548      	b.n	801743c <_svfprintf_r+0xeac>
 80179aa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80179ac:	4921      	ldr	r1, [pc, #132]	; (8017a34 <_svfprintf_r+0x14a4>)
 80179ae:	9308      	str	r3, [sp, #32]
 80179b0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80179b2:	3301      	adds	r3, #1
 80179b4:	6039      	str	r1, [r7, #0]
 80179b6:	2c10      	cmp	r4, #16
 80179b8:	dc19      	bgt.n	80179ee <_svfprintf_r+0x145e>
 80179ba:	607c      	str	r4, [r7, #4]
 80179bc:	18a4      	adds	r4, r4, r2
 80179be:	942e      	str	r4, [sp, #184]	; 0xb8
 80179c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80179c2:	2b07      	cmp	r3, #7
 80179c4:	dc00      	bgt.n	80179c8 <_svfprintf_r+0x1438>
 80179c6:	e539      	b.n	801743c <_svfprintf_r+0xeac>
 80179c8:	aa2c      	add	r2, sp, #176	; 0xb0
 80179ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80179cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80179ce:	f001 ff33 	bl	8019838 <__ssprint_r>
 80179d2:	2800      	cmp	r0, #0
 80179d4:	d100      	bne.n	80179d8 <_svfprintf_r+0x1448>
 80179d6:	e531      	b.n	801743c <_svfprintf_r+0xeac>
 80179d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d101      	bne.n	80179e2 <_svfprintf_r+0x1452>
 80179de:	f7ff f908 	bl	8016bf2 <_svfprintf_r+0x662>
 80179e2:	0019      	movs	r1, r3
 80179e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80179e6:	f000 ff19 	bl	801881c <_free_r>
 80179ea:	f7ff f902 	bl	8016bf2 <_svfprintf_r+0x662>
 80179ee:	3210      	adds	r2, #16
 80179f0:	607d      	str	r5, [r7, #4]
 80179f2:	922e      	str	r2, [sp, #184]	; 0xb8
 80179f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80179f6:	3708      	adds	r7, #8
 80179f8:	2b07      	cmp	r3, #7
 80179fa:	dd07      	ble.n	8017a0c <_svfprintf_r+0x147c>
 80179fc:	aa2c      	add	r2, sp, #176	; 0xb0
 80179fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017a00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017a02:	f001 ff19 	bl	8019838 <__ssprint_r>
 8017a06:	2800      	cmp	r0, #0
 8017a08:	d1e6      	bne.n	80179d8 <_svfprintf_r+0x1448>
 8017a0a:	af2f      	add	r7, sp, #188	; 0xbc
 8017a0c:	3c10      	subs	r4, #16
 8017a0e:	e7cc      	b.n	80179aa <_svfprintf_r+0x141a>
 8017a10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017a12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017a14:	f000 ff02 	bl	801881c <_free_r>
 8017a18:	e52a      	b.n	8017470 <_svfprintf_r+0xee0>
 8017a1a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017a1c:	9306      	str	r3, [sp, #24]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d101      	bne.n	8017a26 <_svfprintf_r+0x1496>
 8017a22:	f7ff f8e6 	bl	8016bf2 <_svfprintf_r+0x662>
 8017a26:	aa2c      	add	r2, sp, #176	; 0xb0
 8017a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017a2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017a2c:	f001 ff04 	bl	8019838 <__ssprint_r>
 8017a30:	f7ff f8df 	bl	8016bf2 <_svfprintf_r+0x662>
 8017a34:	0801d25c 	.word	0x0801d25c

08017a38 <sysconf>:
 8017a38:	2380      	movs	r3, #128	; 0x80
 8017a3a:	b510      	push	{r4, lr}
 8017a3c:	015b      	lsls	r3, r3, #5
 8017a3e:	2808      	cmp	r0, #8
 8017a40:	d004      	beq.n	8017a4c <sysconf+0x14>
 8017a42:	f000 fe7d 	bl	8018740 <__errno>
 8017a46:	2316      	movs	r3, #22
 8017a48:	6003      	str	r3, [r0, #0]
 8017a4a:	3b17      	subs	r3, #23
 8017a4c:	0018      	movs	r0, r3
 8017a4e:	bd10      	pop	{r4, pc}

08017a50 <__ascii_wctomb>:
 8017a50:	1e0b      	subs	r3, r1, #0
 8017a52:	d004      	beq.n	8017a5e <__ascii_wctomb+0xe>
 8017a54:	2aff      	cmp	r2, #255	; 0xff
 8017a56:	d904      	bls.n	8017a62 <__ascii_wctomb+0x12>
 8017a58:	238a      	movs	r3, #138	; 0x8a
 8017a5a:	6003      	str	r3, [r0, #0]
 8017a5c:	3b8b      	subs	r3, #139	; 0x8b
 8017a5e:	0018      	movs	r0, r3
 8017a60:	4770      	bx	lr
 8017a62:	700a      	strb	r2, [r1, #0]
 8017a64:	2301      	movs	r3, #1
 8017a66:	e7fa      	b.n	8017a5e <__ascii_wctomb+0xe>

08017a68 <register_fini>:
 8017a68:	4b03      	ldr	r3, [pc, #12]	; (8017a78 <register_fini+0x10>)
 8017a6a:	b510      	push	{r4, lr}
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d002      	beq.n	8017a76 <register_fini+0xe>
 8017a70:	4802      	ldr	r0, [pc, #8]	; (8017a7c <register_fini+0x14>)
 8017a72:	f000 f805 	bl	8017a80 <atexit>
 8017a76:	bd10      	pop	{r4, pc}
 8017a78:	00000000 	.word	0x00000000
 8017a7c:	0801874d 	.word	0x0801874d

08017a80 <atexit>:
 8017a80:	2300      	movs	r3, #0
 8017a82:	b510      	push	{r4, lr}
 8017a84:	0001      	movs	r1, r0
 8017a86:	001a      	movs	r2, r3
 8017a88:	0018      	movs	r0, r3
 8017a8a:	f001 ff53 	bl	8019934 <__register_exitproc>
 8017a8e:	bd10      	pop	{r4, pc}

08017a90 <quorem>:
 8017a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a92:	6903      	ldr	r3, [r0, #16]
 8017a94:	690c      	ldr	r4, [r1, #16]
 8017a96:	b089      	sub	sp, #36	; 0x24
 8017a98:	0007      	movs	r7, r0
 8017a9a:	9105      	str	r1, [sp, #20]
 8017a9c:	2600      	movs	r6, #0
 8017a9e:	42a3      	cmp	r3, r4
 8017aa0:	db65      	blt.n	8017b6e <quorem+0xde>
 8017aa2:	000b      	movs	r3, r1
 8017aa4:	3c01      	subs	r4, #1
 8017aa6:	3314      	adds	r3, #20
 8017aa8:	00a5      	lsls	r5, r4, #2
 8017aaa:	9303      	str	r3, [sp, #12]
 8017aac:	195b      	adds	r3, r3, r5
 8017aae:	9304      	str	r3, [sp, #16]
 8017ab0:	0003      	movs	r3, r0
 8017ab2:	3314      	adds	r3, #20
 8017ab4:	9302      	str	r3, [sp, #8]
 8017ab6:	195d      	adds	r5, r3, r5
 8017ab8:	9b04      	ldr	r3, [sp, #16]
 8017aba:	6828      	ldr	r0, [r5, #0]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	1c59      	adds	r1, r3, #1
 8017ac0:	9301      	str	r3, [sp, #4]
 8017ac2:	f7e8 fb45 	bl	8000150 <__udivsi3>
 8017ac6:	9001      	str	r0, [sp, #4]
 8017ac8:	42b0      	cmp	r0, r6
 8017aca:	d029      	beq.n	8017b20 <quorem+0x90>
 8017acc:	9b03      	ldr	r3, [sp, #12]
 8017ace:	9802      	ldr	r0, [sp, #8]
 8017ad0:	469c      	mov	ip, r3
 8017ad2:	9606      	str	r6, [sp, #24]
 8017ad4:	4662      	mov	r2, ip
 8017ad6:	ca08      	ldmia	r2!, {r3}
 8017ad8:	4694      	mov	ip, r2
 8017ada:	9a01      	ldr	r2, [sp, #4]
 8017adc:	b299      	uxth	r1, r3
 8017ade:	4351      	muls	r1, r2
 8017ae0:	0c1b      	lsrs	r3, r3, #16
 8017ae2:	4353      	muls	r3, r2
 8017ae4:	1989      	adds	r1, r1, r6
 8017ae6:	0c0a      	lsrs	r2, r1, #16
 8017ae8:	189b      	adds	r3, r3, r2
 8017aea:	9307      	str	r3, [sp, #28]
 8017aec:	0c1e      	lsrs	r6, r3, #16
 8017aee:	6803      	ldr	r3, [r0, #0]
 8017af0:	b289      	uxth	r1, r1
 8017af2:	b29a      	uxth	r2, r3
 8017af4:	9b06      	ldr	r3, [sp, #24]
 8017af6:	18d2      	adds	r2, r2, r3
 8017af8:	6803      	ldr	r3, [r0, #0]
 8017afa:	1a52      	subs	r2, r2, r1
 8017afc:	0c19      	lsrs	r1, r3, #16
 8017afe:	466b      	mov	r3, sp
 8017b00:	8b9b      	ldrh	r3, [r3, #28]
 8017b02:	1acb      	subs	r3, r1, r3
 8017b04:	1411      	asrs	r1, r2, #16
 8017b06:	185b      	adds	r3, r3, r1
 8017b08:	1419      	asrs	r1, r3, #16
 8017b0a:	b292      	uxth	r2, r2
 8017b0c:	041b      	lsls	r3, r3, #16
 8017b0e:	431a      	orrs	r2, r3
 8017b10:	9b04      	ldr	r3, [sp, #16]
 8017b12:	9106      	str	r1, [sp, #24]
 8017b14:	c004      	stmia	r0!, {r2}
 8017b16:	4563      	cmp	r3, ip
 8017b18:	d2dc      	bcs.n	8017ad4 <quorem+0x44>
 8017b1a:	682b      	ldr	r3, [r5, #0]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d02d      	beq.n	8017b7c <quorem+0xec>
 8017b20:	9905      	ldr	r1, [sp, #20]
 8017b22:	0038      	movs	r0, r7
 8017b24:	f001 fcb2 	bl	801948c <__mcmp>
 8017b28:	2800      	cmp	r0, #0
 8017b2a:	db1f      	blt.n	8017b6c <quorem+0xdc>
 8017b2c:	2500      	movs	r5, #0
 8017b2e:	9b01      	ldr	r3, [sp, #4]
 8017b30:	9802      	ldr	r0, [sp, #8]
 8017b32:	3301      	adds	r3, #1
 8017b34:	9903      	ldr	r1, [sp, #12]
 8017b36:	9301      	str	r3, [sp, #4]
 8017b38:	6802      	ldr	r2, [r0, #0]
 8017b3a:	c908      	ldmia	r1!, {r3}
 8017b3c:	b292      	uxth	r2, r2
 8017b3e:	1955      	adds	r5, r2, r5
 8017b40:	b29a      	uxth	r2, r3
 8017b42:	1aaa      	subs	r2, r5, r2
 8017b44:	6805      	ldr	r5, [r0, #0]
 8017b46:	0c1b      	lsrs	r3, r3, #16
 8017b48:	0c2d      	lsrs	r5, r5, #16
 8017b4a:	1aeb      	subs	r3, r5, r3
 8017b4c:	1415      	asrs	r5, r2, #16
 8017b4e:	195b      	adds	r3, r3, r5
 8017b50:	141d      	asrs	r5, r3, #16
 8017b52:	b292      	uxth	r2, r2
 8017b54:	041b      	lsls	r3, r3, #16
 8017b56:	4313      	orrs	r3, r2
 8017b58:	c008      	stmia	r0!, {r3}
 8017b5a:	9b04      	ldr	r3, [sp, #16]
 8017b5c:	428b      	cmp	r3, r1
 8017b5e:	d2eb      	bcs.n	8017b38 <quorem+0xa8>
 8017b60:	9a02      	ldr	r2, [sp, #8]
 8017b62:	00a3      	lsls	r3, r4, #2
 8017b64:	18d3      	adds	r3, r2, r3
 8017b66:	681a      	ldr	r2, [r3, #0]
 8017b68:	2a00      	cmp	r2, #0
 8017b6a:	d011      	beq.n	8017b90 <quorem+0x100>
 8017b6c:	9e01      	ldr	r6, [sp, #4]
 8017b6e:	0030      	movs	r0, r6
 8017b70:	b009      	add	sp, #36	; 0x24
 8017b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b74:	682b      	ldr	r3, [r5, #0]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d104      	bne.n	8017b84 <quorem+0xf4>
 8017b7a:	3c01      	subs	r4, #1
 8017b7c:	9b02      	ldr	r3, [sp, #8]
 8017b7e:	3d04      	subs	r5, #4
 8017b80:	42ab      	cmp	r3, r5
 8017b82:	d3f7      	bcc.n	8017b74 <quorem+0xe4>
 8017b84:	613c      	str	r4, [r7, #16]
 8017b86:	e7cb      	b.n	8017b20 <quorem+0x90>
 8017b88:	681a      	ldr	r2, [r3, #0]
 8017b8a:	2a00      	cmp	r2, #0
 8017b8c:	d104      	bne.n	8017b98 <quorem+0x108>
 8017b8e:	3c01      	subs	r4, #1
 8017b90:	9a02      	ldr	r2, [sp, #8]
 8017b92:	3b04      	subs	r3, #4
 8017b94:	429a      	cmp	r2, r3
 8017b96:	d3f7      	bcc.n	8017b88 <quorem+0xf8>
 8017b98:	613c      	str	r4, [r7, #16]
 8017b9a:	e7e7      	b.n	8017b6c <quorem+0xdc>

08017b9c <_dtoa_r>:
 8017b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b9e:	0014      	movs	r4, r2
 8017ba0:	001d      	movs	r5, r3
 8017ba2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8017ba4:	b09b      	sub	sp, #108	; 0x6c
 8017ba6:	9002      	str	r0, [sp, #8]
 8017ba8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8017baa:	9406      	str	r4, [sp, #24]
 8017bac:	9507      	str	r5, [sp, #28]
 8017bae:	2900      	cmp	r1, #0
 8017bb0:	d009      	beq.n	8017bc6 <_dtoa_r+0x2a>
 8017bb2:	2301      	movs	r3, #1
 8017bb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017bb6:	4093      	lsls	r3, r2
 8017bb8:	604a      	str	r2, [r1, #4]
 8017bba:	608b      	str	r3, [r1, #8]
 8017bbc:	f001 fa6a 	bl	8019094 <_Bfree>
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	9a02      	ldr	r2, [sp, #8]
 8017bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8017bc6:	2d00      	cmp	r5, #0
 8017bc8:	da20      	bge.n	8017c0c <_dtoa_r+0x70>
 8017bca:	2301      	movs	r3, #1
 8017bcc:	6033      	str	r3, [r6, #0]
 8017bce:	006b      	lsls	r3, r5, #1
 8017bd0:	085b      	lsrs	r3, r3, #1
 8017bd2:	9307      	str	r3, [sp, #28]
 8017bd4:	9c07      	ldr	r4, [sp, #28]
 8017bd6:	4bb2      	ldr	r3, [pc, #712]	; (8017ea0 <_dtoa_r+0x304>)
 8017bd8:	0022      	movs	r2, r4
 8017bda:	9317      	str	r3, [sp, #92]	; 0x5c
 8017bdc:	401a      	ands	r2, r3
 8017bde:	429a      	cmp	r2, r3
 8017be0:	d117      	bne.n	8017c12 <_dtoa_r+0x76>
 8017be2:	4bb0      	ldr	r3, [pc, #704]	; (8017ea4 <_dtoa_r+0x308>)
 8017be4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017be6:	6013      	str	r3, [r2, #0]
 8017be8:	9b06      	ldr	r3, [sp, #24]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d103      	bne.n	8017bf6 <_dtoa_r+0x5a>
 8017bee:	0324      	lsls	r4, r4, #12
 8017bf0:	d101      	bne.n	8017bf6 <_dtoa_r+0x5a>
 8017bf2:	f000 fd89 	bl	8018708 <_dtoa_r+0xb6c>
 8017bf6:	4bac      	ldr	r3, [pc, #688]	; (8017ea8 <_dtoa_r+0x30c>)
 8017bf8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017bfa:	9308      	str	r3, [sp, #32]
 8017bfc:	2a00      	cmp	r2, #0
 8017bfe:	d002      	beq.n	8017c06 <_dtoa_r+0x6a>
 8017c00:	4baa      	ldr	r3, [pc, #680]	; (8017eac <_dtoa_r+0x310>)
 8017c02:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017c04:	6013      	str	r3, [r2, #0]
 8017c06:	9808      	ldr	r0, [sp, #32]
 8017c08:	b01b      	add	sp, #108	; 0x6c
 8017c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	6033      	str	r3, [r6, #0]
 8017c10:	e7e0      	b.n	8017bd4 <_dtoa_r+0x38>
 8017c12:	9e06      	ldr	r6, [sp, #24]
 8017c14:	9f07      	ldr	r7, [sp, #28]
 8017c16:	2200      	movs	r2, #0
 8017c18:	2300      	movs	r3, #0
 8017c1a:	0030      	movs	r0, r6
 8017c1c:	0039      	movs	r1, r7
 8017c1e:	f7e8 fc1d 	bl	800045c <__aeabi_dcmpeq>
 8017c22:	1e05      	subs	r5, r0, #0
 8017c24:	d00b      	beq.n	8017c3e <_dtoa_r+0xa2>
 8017c26:	2301      	movs	r3, #1
 8017c28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017c2a:	6013      	str	r3, [r2, #0]
 8017c2c:	4ba0      	ldr	r3, [pc, #640]	; (8017eb0 <_dtoa_r+0x314>)
 8017c2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017c30:	9308      	str	r3, [sp, #32]
 8017c32:	2a00      	cmp	r2, #0
 8017c34:	d0e7      	beq.n	8017c06 <_dtoa_r+0x6a>
 8017c36:	4a9f      	ldr	r2, [pc, #636]	; (8017eb4 <_dtoa_r+0x318>)
 8017c38:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017c3a:	600a      	str	r2, [r1, #0]
 8017c3c:	e7e3      	b.n	8017c06 <_dtoa_r+0x6a>
 8017c3e:	ab18      	add	r3, sp, #96	; 0x60
 8017c40:	9301      	str	r3, [sp, #4]
 8017c42:	ab19      	add	r3, sp, #100	; 0x64
 8017c44:	9300      	str	r3, [sp, #0]
 8017c46:	0032      	movs	r2, r6
 8017c48:	003b      	movs	r3, r7
 8017c4a:	9802      	ldr	r0, [sp, #8]
 8017c4c:	f001 fd0e 	bl	801966c <__d2b>
 8017c50:	0063      	lsls	r3, r4, #1
 8017c52:	9003      	str	r0, [sp, #12]
 8017c54:	0d5b      	lsrs	r3, r3, #21
 8017c56:	d074      	beq.n	8017d42 <_dtoa_r+0x1a6>
 8017c58:	033a      	lsls	r2, r7, #12
 8017c5a:	4c97      	ldr	r4, [pc, #604]	; (8017eb8 <_dtoa_r+0x31c>)
 8017c5c:	0b12      	lsrs	r2, r2, #12
 8017c5e:	4314      	orrs	r4, r2
 8017c60:	0021      	movs	r1, r4
 8017c62:	4a96      	ldr	r2, [pc, #600]	; (8017ebc <_dtoa_r+0x320>)
 8017c64:	0030      	movs	r0, r6
 8017c66:	9516      	str	r5, [sp, #88]	; 0x58
 8017c68:	189e      	adds	r6, r3, r2
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	4b94      	ldr	r3, [pc, #592]	; (8017ec0 <_dtoa_r+0x324>)
 8017c6e:	f7ea fe53 	bl	8002918 <__aeabi_dsub>
 8017c72:	4a94      	ldr	r2, [pc, #592]	; (8017ec4 <_dtoa_r+0x328>)
 8017c74:	4b94      	ldr	r3, [pc, #592]	; (8017ec8 <_dtoa_r+0x32c>)
 8017c76:	f7ea fbdd 	bl	8002434 <__aeabi_dmul>
 8017c7a:	4a94      	ldr	r2, [pc, #592]	; (8017ecc <_dtoa_r+0x330>)
 8017c7c:	4b94      	ldr	r3, [pc, #592]	; (8017ed0 <_dtoa_r+0x334>)
 8017c7e:	f7e9 fcb3 	bl	80015e8 <__aeabi_dadd>
 8017c82:	0004      	movs	r4, r0
 8017c84:	0030      	movs	r0, r6
 8017c86:	000d      	movs	r5, r1
 8017c88:	f7eb f9e0 	bl	800304c <__aeabi_i2d>
 8017c8c:	4a91      	ldr	r2, [pc, #580]	; (8017ed4 <_dtoa_r+0x338>)
 8017c8e:	4b92      	ldr	r3, [pc, #584]	; (8017ed8 <_dtoa_r+0x33c>)
 8017c90:	f7ea fbd0 	bl	8002434 <__aeabi_dmul>
 8017c94:	0002      	movs	r2, r0
 8017c96:	000b      	movs	r3, r1
 8017c98:	0020      	movs	r0, r4
 8017c9a:	0029      	movs	r1, r5
 8017c9c:	f7e9 fca4 	bl	80015e8 <__aeabi_dadd>
 8017ca0:	0004      	movs	r4, r0
 8017ca2:	000d      	movs	r5, r1
 8017ca4:	f7eb f99c 	bl	8002fe0 <__aeabi_d2iz>
 8017ca8:	2200      	movs	r2, #0
 8017caa:	0007      	movs	r7, r0
 8017cac:	2300      	movs	r3, #0
 8017cae:	0020      	movs	r0, r4
 8017cb0:	0029      	movs	r1, r5
 8017cb2:	f7e8 fbd9 	bl	8000468 <__aeabi_dcmplt>
 8017cb6:	2800      	cmp	r0, #0
 8017cb8:	d009      	beq.n	8017cce <_dtoa_r+0x132>
 8017cba:	0038      	movs	r0, r7
 8017cbc:	f7eb f9c6 	bl	800304c <__aeabi_i2d>
 8017cc0:	002b      	movs	r3, r5
 8017cc2:	0022      	movs	r2, r4
 8017cc4:	f7e8 fbca 	bl	800045c <__aeabi_dcmpeq>
 8017cc8:	4243      	negs	r3, r0
 8017cca:	4158      	adcs	r0, r3
 8017ccc:	1a3f      	subs	r7, r7, r0
 8017cce:	2301      	movs	r3, #1
 8017cd0:	9314      	str	r3, [sp, #80]	; 0x50
 8017cd2:	2f16      	cmp	r7, #22
 8017cd4:	d80d      	bhi.n	8017cf2 <_dtoa_r+0x156>
 8017cd6:	4981      	ldr	r1, [pc, #516]	; (8017edc <_dtoa_r+0x340>)
 8017cd8:	00fb      	lsls	r3, r7, #3
 8017cda:	18c9      	adds	r1, r1, r3
 8017cdc:	6808      	ldr	r0, [r1, #0]
 8017cde:	6849      	ldr	r1, [r1, #4]
 8017ce0:	9a06      	ldr	r2, [sp, #24]
 8017ce2:	9b07      	ldr	r3, [sp, #28]
 8017ce4:	f7e8 fbd4 	bl	8000490 <__aeabi_dcmpgt>
 8017ce8:	2800      	cmp	r0, #0
 8017cea:	d046      	beq.n	8017d7a <_dtoa_r+0x1de>
 8017cec:	2300      	movs	r3, #0
 8017cee:	3f01      	subs	r7, #1
 8017cf0:	9314      	str	r3, [sp, #80]	; 0x50
 8017cf2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017cf4:	1b9e      	subs	r6, r3, r6
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8017cfa:	0033      	movs	r3, r6
 8017cfc:	3b01      	subs	r3, #1
 8017cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d00:	d504      	bpl.n	8017d0c <_dtoa_r+0x170>
 8017d02:	2301      	movs	r3, #1
 8017d04:	1b9b      	subs	r3, r3, r6
 8017d06:	930a      	str	r3, [sp, #40]	; 0x28
 8017d08:	2300      	movs	r3, #0
 8017d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d0c:	2f00      	cmp	r7, #0
 8017d0e:	db36      	blt.n	8017d7e <_dtoa_r+0x1e2>
 8017d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d12:	9711      	str	r7, [sp, #68]	; 0x44
 8017d14:	19db      	adds	r3, r3, r7
 8017d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d18:	2300      	movs	r3, #0
 8017d1a:	9304      	str	r3, [sp, #16]
 8017d1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017d1e:	2401      	movs	r4, #1
 8017d20:	2b09      	cmp	r3, #9
 8017d22:	d900      	bls.n	8017d26 <_dtoa_r+0x18a>
 8017d24:	e082      	b.n	8017e2c <_dtoa_r+0x290>
 8017d26:	2b05      	cmp	r3, #5
 8017d28:	dd02      	ble.n	8017d30 <_dtoa_r+0x194>
 8017d2a:	2400      	movs	r4, #0
 8017d2c:	3b04      	subs	r3, #4
 8017d2e:	9320      	str	r3, [sp, #128]	; 0x80
 8017d30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017d32:	1e98      	subs	r0, r3, #2
 8017d34:	2803      	cmp	r0, #3
 8017d36:	d900      	bls.n	8017d3a <_dtoa_r+0x19e>
 8017d38:	e082      	b.n	8017e40 <_dtoa_r+0x2a4>
 8017d3a:	f7e8 f9f5 	bl	8000128 <__gnu_thumb1_case_uqi>
 8017d3e:	7573      	.short	0x7573
 8017d40:	6828      	.short	0x6828
 8017d42:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017d44:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017d46:	189e      	adds	r6, r3, r2
 8017d48:	4b65      	ldr	r3, [pc, #404]	; (8017ee0 <_dtoa_r+0x344>)
 8017d4a:	18f2      	adds	r2, r6, r3
 8017d4c:	2a20      	cmp	r2, #32
 8017d4e:	dd0f      	ble.n	8017d70 <_dtoa_r+0x1d4>
 8017d50:	2340      	movs	r3, #64	; 0x40
 8017d52:	1a9b      	subs	r3, r3, r2
 8017d54:	409c      	lsls	r4, r3
 8017d56:	4b63      	ldr	r3, [pc, #396]	; (8017ee4 <_dtoa_r+0x348>)
 8017d58:	9806      	ldr	r0, [sp, #24]
 8017d5a:	18f3      	adds	r3, r6, r3
 8017d5c:	40d8      	lsrs	r0, r3
 8017d5e:	4320      	orrs	r0, r4
 8017d60:	f7eb f9ae 	bl	80030c0 <__aeabi_ui2d>
 8017d64:	2301      	movs	r3, #1
 8017d66:	4c60      	ldr	r4, [pc, #384]	; (8017ee8 <_dtoa_r+0x34c>)
 8017d68:	3e01      	subs	r6, #1
 8017d6a:	1909      	adds	r1, r1, r4
 8017d6c:	9316      	str	r3, [sp, #88]	; 0x58
 8017d6e:	e77c      	b.n	8017c6a <_dtoa_r+0xce>
 8017d70:	2320      	movs	r3, #32
 8017d72:	9806      	ldr	r0, [sp, #24]
 8017d74:	1a9b      	subs	r3, r3, r2
 8017d76:	4098      	lsls	r0, r3
 8017d78:	e7f2      	b.n	8017d60 <_dtoa_r+0x1c4>
 8017d7a:	9014      	str	r0, [sp, #80]	; 0x50
 8017d7c:	e7b9      	b.n	8017cf2 <_dtoa_r+0x156>
 8017d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d80:	1bdb      	subs	r3, r3, r7
 8017d82:	930a      	str	r3, [sp, #40]	; 0x28
 8017d84:	427b      	negs	r3, r7
 8017d86:	9304      	str	r3, [sp, #16]
 8017d88:	2300      	movs	r3, #0
 8017d8a:	9311      	str	r3, [sp, #68]	; 0x44
 8017d8c:	e7c6      	b.n	8017d1c <_dtoa_r+0x180>
 8017d8e:	2301      	movs	r3, #1
 8017d90:	930d      	str	r3, [sp, #52]	; 0x34
 8017d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	dd57      	ble.n	8017e48 <_dtoa_r+0x2ac>
 8017d98:	930c      	str	r3, [sp, #48]	; 0x30
 8017d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	9902      	ldr	r1, [sp, #8]
 8017da0:	644a      	str	r2, [r1, #68]	; 0x44
 8017da2:	3204      	adds	r2, #4
 8017da4:	0010      	movs	r0, r2
 8017da6:	9902      	ldr	r1, [sp, #8]
 8017da8:	3014      	adds	r0, #20
 8017daa:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8017dac:	4298      	cmp	r0, r3
 8017dae:	d950      	bls.n	8017e52 <_dtoa_r+0x2b6>
 8017db0:	9802      	ldr	r0, [sp, #8]
 8017db2:	f001 f947 	bl	8019044 <_Balloc>
 8017db6:	9b02      	ldr	r3, [sp, #8]
 8017db8:	9008      	str	r0, [sp, #32]
 8017dba:	6418      	str	r0, [r3, #64]	; 0x40
 8017dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dbe:	2b0e      	cmp	r3, #14
 8017dc0:	d900      	bls.n	8017dc4 <_dtoa_r+0x228>
 8017dc2:	e10c      	b.n	8017fde <_dtoa_r+0x442>
 8017dc4:	2c00      	cmp	r4, #0
 8017dc6:	d100      	bne.n	8017dca <_dtoa_r+0x22e>
 8017dc8:	e109      	b.n	8017fde <_dtoa_r+0x442>
 8017dca:	9b06      	ldr	r3, [sp, #24]
 8017dcc:	9c07      	ldr	r4, [sp, #28]
 8017dce:	9312      	str	r3, [sp, #72]	; 0x48
 8017dd0:	9413      	str	r4, [sp, #76]	; 0x4c
 8017dd2:	2f00      	cmp	r7, #0
 8017dd4:	dc00      	bgt.n	8017dd8 <_dtoa_r+0x23c>
 8017dd6:	e08b      	b.n	8017ef0 <_dtoa_r+0x354>
 8017dd8:	210f      	movs	r1, #15
 8017dda:	003a      	movs	r2, r7
 8017ddc:	4b3f      	ldr	r3, [pc, #252]	; (8017edc <_dtoa_r+0x340>)
 8017dde:	400a      	ands	r2, r1
 8017de0:	00d2      	lsls	r2, r2, #3
 8017de2:	189b      	adds	r3, r3, r2
 8017de4:	681d      	ldr	r5, [r3, #0]
 8017de6:	685e      	ldr	r6, [r3, #4]
 8017de8:	2302      	movs	r3, #2
 8017dea:	113c      	asrs	r4, r7, #4
 8017dec:	930e      	str	r3, [sp, #56]	; 0x38
 8017dee:	06e3      	lsls	r3, r4, #27
 8017df0:	d50b      	bpl.n	8017e0a <_dtoa_r+0x26e>
 8017df2:	4b3e      	ldr	r3, [pc, #248]	; (8017eec <_dtoa_r+0x350>)
 8017df4:	400c      	ands	r4, r1
 8017df6:	6a1a      	ldr	r2, [r3, #32]
 8017df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dfa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017dfc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017dfe:	f7e9 ff0f 	bl	8001c20 <__aeabi_ddiv>
 8017e02:	2303      	movs	r3, #3
 8017e04:	9006      	str	r0, [sp, #24]
 8017e06:	9107      	str	r1, [sp, #28]
 8017e08:	930e      	str	r3, [sp, #56]	; 0x38
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	e03b      	b.n	8017e86 <_dtoa_r+0x2ea>
 8017e0e:	2301      	movs	r3, #1
 8017e10:	930d      	str	r3, [sp, #52]	; 0x34
 8017e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e14:	18fb      	adds	r3, r7, r3
 8017e16:	930c      	str	r3, [sp, #48]	; 0x30
 8017e18:	3301      	adds	r3, #1
 8017e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	dcbd      	bgt.n	8017d9c <_dtoa_r+0x200>
 8017e20:	2301      	movs	r3, #1
 8017e22:	e7bb      	b.n	8017d9c <_dtoa_r+0x200>
 8017e24:	2300      	movs	r3, #0
 8017e26:	e7b3      	b.n	8017d90 <_dtoa_r+0x1f4>
 8017e28:	2300      	movs	r3, #0
 8017e2a:	e7f1      	b.n	8017e10 <_dtoa_r+0x274>
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	940d      	str	r4, [sp, #52]	; 0x34
 8017e30:	9320      	str	r3, [sp, #128]	; 0x80
 8017e32:	3b01      	subs	r3, #1
 8017e34:	2200      	movs	r2, #0
 8017e36:	930c      	str	r3, [sp, #48]	; 0x30
 8017e38:	9309      	str	r3, [sp, #36]	; 0x24
 8017e3a:	3313      	adds	r3, #19
 8017e3c:	9221      	str	r2, [sp, #132]	; 0x84
 8017e3e:	e7ad      	b.n	8017d9c <_dtoa_r+0x200>
 8017e40:	2301      	movs	r3, #1
 8017e42:	930d      	str	r3, [sp, #52]	; 0x34
 8017e44:	3b02      	subs	r3, #2
 8017e46:	e7f5      	b.n	8017e34 <_dtoa_r+0x298>
 8017e48:	2301      	movs	r3, #1
 8017e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8017e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8017e4e:	001a      	movs	r2, r3
 8017e50:	e7f4      	b.n	8017e3c <_dtoa_r+0x2a0>
 8017e52:	9802      	ldr	r0, [sp, #8]
 8017e54:	3101      	adds	r1, #1
 8017e56:	6441      	str	r1, [r0, #68]	; 0x44
 8017e58:	0052      	lsls	r2, r2, #1
 8017e5a:	e7a3      	b.n	8017da4 <_dtoa_r+0x208>
 8017e5c:	2301      	movs	r3, #1
 8017e5e:	421c      	tst	r4, r3
 8017e60:	d00e      	beq.n	8017e80 <_dtoa_r+0x2e4>
 8017e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e64:	4a21      	ldr	r2, [pc, #132]	; (8017eec <_dtoa_r+0x350>)
 8017e66:	3301      	adds	r3, #1
 8017e68:	930e      	str	r3, [sp, #56]	; 0x38
 8017e6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e6c:	0028      	movs	r0, r5
 8017e6e:	00db      	lsls	r3, r3, #3
 8017e70:	189b      	adds	r3, r3, r2
 8017e72:	0031      	movs	r1, r6
 8017e74:	681a      	ldr	r2, [r3, #0]
 8017e76:	685b      	ldr	r3, [r3, #4]
 8017e78:	f7ea fadc 	bl	8002434 <__aeabi_dmul>
 8017e7c:	0005      	movs	r5, r0
 8017e7e:	000e      	movs	r6, r1
 8017e80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e82:	1064      	asrs	r4, r4, #1
 8017e84:	3301      	adds	r3, #1
 8017e86:	9310      	str	r3, [sp, #64]	; 0x40
 8017e88:	2c00      	cmp	r4, #0
 8017e8a:	d1e7      	bne.n	8017e5c <_dtoa_r+0x2c0>
 8017e8c:	9806      	ldr	r0, [sp, #24]
 8017e8e:	9907      	ldr	r1, [sp, #28]
 8017e90:	002a      	movs	r2, r5
 8017e92:	0033      	movs	r3, r6
 8017e94:	f7e9 fec4 	bl	8001c20 <__aeabi_ddiv>
 8017e98:	9006      	str	r0, [sp, #24]
 8017e9a:	9107      	str	r1, [sp, #28]
 8017e9c:	e043      	b.n	8017f26 <_dtoa_r+0x38a>
 8017e9e:	46c0      	nop			; (mov r8, r8)
 8017ea0:	7ff00000 	.word	0x7ff00000
 8017ea4:	0000270f 	.word	0x0000270f
 8017ea8:	0801d386 	.word	0x0801d386
 8017eac:	0801d389 	.word	0x0801d389
 8017eb0:	0801d25a 	.word	0x0801d25a
 8017eb4:	0801d25b 	.word	0x0801d25b
 8017eb8:	3ff00000 	.word	0x3ff00000
 8017ebc:	fffffc01 	.word	0xfffffc01
 8017ec0:	3ff80000 	.word	0x3ff80000
 8017ec4:	636f4361 	.word	0x636f4361
 8017ec8:	3fd287a7 	.word	0x3fd287a7
 8017ecc:	8b60c8b3 	.word	0x8b60c8b3
 8017ed0:	3fc68a28 	.word	0x3fc68a28
 8017ed4:	509f79fb 	.word	0x509f79fb
 8017ed8:	3fd34413 	.word	0x3fd34413
 8017edc:	0801d3b8 	.word	0x0801d3b8
 8017ee0:	00000432 	.word	0x00000432
 8017ee4:	00000412 	.word	0x00000412
 8017ee8:	fe100000 	.word	0xfe100000
 8017eec:	0801d390 	.word	0x0801d390
 8017ef0:	2302      	movs	r3, #2
 8017ef2:	930e      	str	r3, [sp, #56]	; 0x38
 8017ef4:	2f00      	cmp	r7, #0
 8017ef6:	d016      	beq.n	8017f26 <_dtoa_r+0x38a>
 8017ef8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017efa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017efc:	427c      	negs	r4, r7
 8017efe:	330d      	adds	r3, #13
 8017f00:	4023      	ands	r3, r4
 8017f02:	4acf      	ldr	r2, [pc, #828]	; (8018240 <_dtoa_r+0x6a4>)
 8017f04:	00db      	lsls	r3, r3, #3
 8017f06:	18d3      	adds	r3, r2, r3
 8017f08:	681a      	ldr	r2, [r3, #0]
 8017f0a:	685b      	ldr	r3, [r3, #4]
 8017f0c:	f7ea fa92 	bl	8002434 <__aeabi_dmul>
 8017f10:	2300      	movs	r3, #0
 8017f12:	2601      	movs	r6, #1
 8017f14:	001d      	movs	r5, r3
 8017f16:	9006      	str	r0, [sp, #24]
 8017f18:	9107      	str	r1, [sp, #28]
 8017f1a:	1124      	asrs	r4, r4, #4
 8017f1c:	2c00      	cmp	r4, #0
 8017f1e:	d000      	beq.n	8017f22 <_dtoa_r+0x386>
 8017f20:	e08c      	b.n	801803c <_dtoa_r+0x4a0>
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d1b8      	bne.n	8017e98 <_dtoa_r+0x2fc>
 8017f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d100      	bne.n	8017f2e <_dtoa_r+0x392>
 8017f2c:	e096      	b.n	801805c <_dtoa_r+0x4c0>
 8017f2e:	9c06      	ldr	r4, [sp, #24]
 8017f30:	9d07      	ldr	r5, [sp, #28]
 8017f32:	2200      	movs	r2, #0
 8017f34:	4bc3      	ldr	r3, [pc, #780]	; (8018244 <_dtoa_r+0x6a8>)
 8017f36:	0020      	movs	r0, r4
 8017f38:	0029      	movs	r1, r5
 8017f3a:	f7e8 fa95 	bl	8000468 <__aeabi_dcmplt>
 8017f3e:	2800      	cmp	r0, #0
 8017f40:	d100      	bne.n	8017f44 <_dtoa_r+0x3a8>
 8017f42:	e08b      	b.n	801805c <_dtoa_r+0x4c0>
 8017f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d100      	bne.n	8017f4c <_dtoa_r+0x3b0>
 8017f4a:	e087      	b.n	801805c <_dtoa_r+0x4c0>
 8017f4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	dd41      	ble.n	8017fd6 <_dtoa_r+0x43a>
 8017f52:	4bbd      	ldr	r3, [pc, #756]	; (8018248 <_dtoa_r+0x6ac>)
 8017f54:	2200      	movs	r2, #0
 8017f56:	0020      	movs	r0, r4
 8017f58:	0029      	movs	r1, r5
 8017f5a:	f7ea fa6b 	bl	8002434 <__aeabi_dmul>
 8017f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f60:	9006      	str	r0, [sp, #24]
 8017f62:	9107      	str	r1, [sp, #28]
 8017f64:	3301      	adds	r3, #1
 8017f66:	930e      	str	r3, [sp, #56]	; 0x38
 8017f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f6a:	1e7e      	subs	r6, r7, #1
 8017f6c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017f6e:	9310      	str	r3, [sp, #64]	; 0x40
 8017f70:	f7eb f86c 	bl	800304c <__aeabi_i2d>
 8017f74:	9a06      	ldr	r2, [sp, #24]
 8017f76:	9b07      	ldr	r3, [sp, #28]
 8017f78:	f7ea fa5c 	bl	8002434 <__aeabi_dmul>
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	4bb3      	ldr	r3, [pc, #716]	; (801824c <_dtoa_r+0x6b0>)
 8017f80:	f7e9 fb32 	bl	80015e8 <__aeabi_dadd>
 8017f84:	4ab2      	ldr	r2, [pc, #712]	; (8018250 <_dtoa_r+0x6b4>)
 8017f86:	900e      	str	r0, [sp, #56]	; 0x38
 8017f88:	910f      	str	r1, [sp, #60]	; 0x3c
 8017f8a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017f8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017f8e:	4694      	mov	ip, r2
 8017f90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f92:	4463      	add	r3, ip
 8017f94:	9315      	str	r3, [sp, #84]	; 0x54
 8017f96:	001d      	movs	r5, r3
 8017f98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d161      	bne.n	8018062 <_dtoa_r+0x4c6>
 8017f9e:	9806      	ldr	r0, [sp, #24]
 8017fa0:	9907      	ldr	r1, [sp, #28]
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	4bab      	ldr	r3, [pc, #684]	; (8018254 <_dtoa_r+0x6b8>)
 8017fa6:	f7ea fcb7 	bl	8002918 <__aeabi_dsub>
 8017faa:	0022      	movs	r2, r4
 8017fac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017fae:	9006      	str	r0, [sp, #24]
 8017fb0:	9107      	str	r1, [sp, #28]
 8017fb2:	f7e8 fa6d 	bl	8000490 <__aeabi_dcmpgt>
 8017fb6:	2800      	cmp	r0, #0
 8017fb8:	d000      	beq.n	8017fbc <_dtoa_r+0x420>
 8017fba:	e2aa      	b.n	8018512 <_dtoa_r+0x976>
 8017fbc:	48a6      	ldr	r0, [pc, #664]	; (8018258 <_dtoa_r+0x6bc>)
 8017fbe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017fc0:	4684      	mov	ip, r0
 8017fc2:	4461      	add	r1, ip
 8017fc4:	000b      	movs	r3, r1
 8017fc6:	9806      	ldr	r0, [sp, #24]
 8017fc8:	9907      	ldr	r1, [sp, #28]
 8017fca:	0022      	movs	r2, r4
 8017fcc:	f7e8 fa4c 	bl	8000468 <__aeabi_dcmplt>
 8017fd0:	2800      	cmp	r0, #0
 8017fd2:	d000      	beq.n	8017fd6 <_dtoa_r+0x43a>
 8017fd4:	e297      	b.n	8018506 <_dtoa_r+0x96a>
 8017fd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017fd8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017fda:	9306      	str	r3, [sp, #24]
 8017fdc:	9407      	str	r4, [sp, #28]
 8017fde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	da00      	bge.n	8017fe6 <_dtoa_r+0x44a>
 8017fe4:	e15e      	b.n	80182a4 <_dtoa_r+0x708>
 8017fe6:	2f0e      	cmp	r7, #14
 8017fe8:	dd00      	ble.n	8017fec <_dtoa_r+0x450>
 8017fea:	e15b      	b.n	80182a4 <_dtoa_r+0x708>
 8017fec:	4b94      	ldr	r3, [pc, #592]	; (8018240 <_dtoa_r+0x6a4>)
 8017fee:	00fa      	lsls	r2, r7, #3
 8017ff0:	189b      	adds	r3, r3, r2
 8017ff2:	685c      	ldr	r4, [r3, #4]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	9304      	str	r3, [sp, #16]
 8017ff8:	9405      	str	r4, [sp, #20]
 8017ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	db00      	blt.n	8018002 <_dtoa_r+0x466>
 8018000:	e0da      	b.n	80181b8 <_dtoa_r+0x61c>
 8018002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018004:	2b00      	cmp	r3, #0
 8018006:	dd00      	ble.n	801800a <_dtoa_r+0x46e>
 8018008:	e0d6      	b.n	80181b8 <_dtoa_r+0x61c>
 801800a:	d000      	beq.n	801800e <_dtoa_r+0x472>
 801800c:	e27f      	b.n	801850e <_dtoa_r+0x972>
 801800e:	9804      	ldr	r0, [sp, #16]
 8018010:	9905      	ldr	r1, [sp, #20]
 8018012:	2200      	movs	r2, #0
 8018014:	4b8f      	ldr	r3, [pc, #572]	; (8018254 <_dtoa_r+0x6b8>)
 8018016:	f7ea fa0d 	bl	8002434 <__aeabi_dmul>
 801801a:	9a06      	ldr	r2, [sp, #24]
 801801c:	9b07      	ldr	r3, [sp, #28]
 801801e:	f7e8 fa41 	bl	80004a4 <__aeabi_dcmpge>
 8018022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018024:	9304      	str	r3, [sp, #16]
 8018026:	001e      	movs	r6, r3
 8018028:	2800      	cmp	r0, #0
 801802a:	d000      	beq.n	801802e <_dtoa_r+0x492>
 801802c:	e251      	b.n	80184d2 <_dtoa_r+0x936>
 801802e:	9b08      	ldr	r3, [sp, #32]
 8018030:	9a08      	ldr	r2, [sp, #32]
 8018032:	1c5d      	adds	r5, r3, #1
 8018034:	2331      	movs	r3, #49	; 0x31
 8018036:	3701      	adds	r7, #1
 8018038:	7013      	strb	r3, [r2, #0]
 801803a:	e24d      	b.n	80184d8 <_dtoa_r+0x93c>
 801803c:	4234      	tst	r4, r6
 801803e:	d00a      	beq.n	8018056 <_dtoa_r+0x4ba>
 8018040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018042:	4a86      	ldr	r2, [pc, #536]	; (801825c <_dtoa_r+0x6c0>)
 8018044:	3301      	adds	r3, #1
 8018046:	930e      	str	r3, [sp, #56]	; 0x38
 8018048:	00eb      	lsls	r3, r5, #3
 801804a:	189b      	adds	r3, r3, r2
 801804c:	681a      	ldr	r2, [r3, #0]
 801804e:	685b      	ldr	r3, [r3, #4]
 8018050:	f7ea f9f0 	bl	8002434 <__aeabi_dmul>
 8018054:	0033      	movs	r3, r6
 8018056:	1064      	asrs	r4, r4, #1
 8018058:	3501      	adds	r5, #1
 801805a:	e75f      	b.n	8017f1c <_dtoa_r+0x380>
 801805c:	003e      	movs	r6, r7
 801805e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018060:	e784      	b.n	8017f6c <_dtoa_r+0x3d0>
 8018062:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018064:	1e5a      	subs	r2, r3, #1
 8018066:	4b76      	ldr	r3, [pc, #472]	; (8018240 <_dtoa_r+0x6a4>)
 8018068:	00d2      	lsls	r2, r2, #3
 801806a:	189b      	adds	r3, r3, r2
 801806c:	6818      	ldr	r0, [r3, #0]
 801806e:	6859      	ldr	r1, [r3, #4]
 8018070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018072:	2b00      	cmp	r3, #0
 8018074:	d04b      	beq.n	801810e <_dtoa_r+0x572>
 8018076:	0002      	movs	r2, r0
 8018078:	000b      	movs	r3, r1
 801807a:	2000      	movs	r0, #0
 801807c:	4978      	ldr	r1, [pc, #480]	; (8018260 <_dtoa_r+0x6c4>)
 801807e:	f7e9 fdcf 	bl	8001c20 <__aeabi_ddiv>
 8018082:	002b      	movs	r3, r5
 8018084:	0022      	movs	r2, r4
 8018086:	f7ea fc47 	bl	8002918 <__aeabi_dsub>
 801808a:	9b08      	ldr	r3, [sp, #32]
 801808c:	900e      	str	r0, [sp, #56]	; 0x38
 801808e:	910f      	str	r1, [sp, #60]	; 0x3c
 8018090:	9315      	str	r3, [sp, #84]	; 0x54
 8018092:	9806      	ldr	r0, [sp, #24]
 8018094:	9907      	ldr	r1, [sp, #28]
 8018096:	f7ea ffa3 	bl	8002fe0 <__aeabi_d2iz>
 801809a:	0004      	movs	r4, r0
 801809c:	f7ea ffd6 	bl	800304c <__aeabi_i2d>
 80180a0:	0002      	movs	r2, r0
 80180a2:	000b      	movs	r3, r1
 80180a4:	9806      	ldr	r0, [sp, #24]
 80180a6:	9907      	ldr	r1, [sp, #28]
 80180a8:	f7ea fc36 	bl	8002918 <__aeabi_dsub>
 80180ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80180ae:	3430      	adds	r4, #48	; 0x30
 80180b0:	1c5d      	adds	r5, r3, #1
 80180b2:	701c      	strb	r4, [r3, #0]
 80180b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80180b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80180b8:	9006      	str	r0, [sp, #24]
 80180ba:	9107      	str	r1, [sp, #28]
 80180bc:	f7e8 f9d4 	bl	8000468 <__aeabi_dcmplt>
 80180c0:	2800      	cmp	r0, #0
 80180c2:	d16c      	bne.n	801819e <_dtoa_r+0x602>
 80180c4:	9a06      	ldr	r2, [sp, #24]
 80180c6:	9b07      	ldr	r3, [sp, #28]
 80180c8:	2000      	movs	r0, #0
 80180ca:	495e      	ldr	r1, [pc, #376]	; (8018244 <_dtoa_r+0x6a8>)
 80180cc:	f7ea fc24 	bl	8002918 <__aeabi_dsub>
 80180d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80180d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80180d4:	f7e8 f9c8 	bl	8000468 <__aeabi_dcmplt>
 80180d8:	2800      	cmp	r0, #0
 80180da:	d000      	beq.n	80180de <_dtoa_r+0x542>
 80180dc:	e0c3      	b.n	8018266 <_dtoa_r+0x6ca>
 80180de:	9b08      	ldr	r3, [sp, #32]
 80180e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80180e2:	1aeb      	subs	r3, r5, r3
 80180e4:	429a      	cmp	r2, r3
 80180e6:	dc00      	bgt.n	80180ea <_dtoa_r+0x54e>
 80180e8:	e775      	b.n	8017fd6 <_dtoa_r+0x43a>
 80180ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80180ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80180ee:	2200      	movs	r2, #0
 80180f0:	4b55      	ldr	r3, [pc, #340]	; (8018248 <_dtoa_r+0x6ac>)
 80180f2:	f7ea f99f 	bl	8002434 <__aeabi_dmul>
 80180f6:	2200      	movs	r2, #0
 80180f8:	900e      	str	r0, [sp, #56]	; 0x38
 80180fa:	910f      	str	r1, [sp, #60]	; 0x3c
 80180fc:	9806      	ldr	r0, [sp, #24]
 80180fe:	9907      	ldr	r1, [sp, #28]
 8018100:	4b51      	ldr	r3, [pc, #324]	; (8018248 <_dtoa_r+0x6ac>)
 8018102:	f7ea f997 	bl	8002434 <__aeabi_dmul>
 8018106:	9515      	str	r5, [sp, #84]	; 0x54
 8018108:	9006      	str	r0, [sp, #24]
 801810a:	9107      	str	r1, [sp, #28]
 801810c:	e7c1      	b.n	8018092 <_dtoa_r+0x4f6>
 801810e:	0022      	movs	r2, r4
 8018110:	002b      	movs	r3, r5
 8018112:	f7ea f98f 	bl	8002434 <__aeabi_dmul>
 8018116:	9c08      	ldr	r4, [sp, #32]
 8018118:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801811a:	0023      	movs	r3, r4
 801811c:	4694      	mov	ip, r2
 801811e:	900e      	str	r0, [sp, #56]	; 0x38
 8018120:	910f      	str	r1, [sp, #60]	; 0x3c
 8018122:	4463      	add	r3, ip
 8018124:	9315      	str	r3, [sp, #84]	; 0x54
 8018126:	9806      	ldr	r0, [sp, #24]
 8018128:	9907      	ldr	r1, [sp, #28]
 801812a:	f7ea ff59 	bl	8002fe0 <__aeabi_d2iz>
 801812e:	0005      	movs	r5, r0
 8018130:	f7ea ff8c 	bl	800304c <__aeabi_i2d>
 8018134:	000b      	movs	r3, r1
 8018136:	0002      	movs	r2, r0
 8018138:	9806      	ldr	r0, [sp, #24]
 801813a:	9907      	ldr	r1, [sp, #28]
 801813c:	f7ea fbec 	bl	8002918 <__aeabi_dsub>
 8018140:	3530      	adds	r5, #48	; 0x30
 8018142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018144:	7025      	strb	r5, [r4, #0]
 8018146:	3401      	adds	r4, #1
 8018148:	9006      	str	r0, [sp, #24]
 801814a:	9107      	str	r1, [sp, #28]
 801814c:	42a3      	cmp	r3, r4
 801814e:	d12a      	bne.n	80181a6 <_dtoa_r+0x60a>
 8018150:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018152:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018154:	9a08      	ldr	r2, [sp, #32]
 8018156:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018158:	4694      	mov	ip, r2
 801815a:	4463      	add	r3, ip
 801815c:	2200      	movs	r2, #0
 801815e:	001d      	movs	r5, r3
 8018160:	4b3f      	ldr	r3, [pc, #252]	; (8018260 <_dtoa_r+0x6c4>)
 8018162:	f7e9 fa41 	bl	80015e8 <__aeabi_dadd>
 8018166:	0002      	movs	r2, r0
 8018168:	000b      	movs	r3, r1
 801816a:	9806      	ldr	r0, [sp, #24]
 801816c:	9907      	ldr	r1, [sp, #28]
 801816e:	f7e8 f98f 	bl	8000490 <__aeabi_dcmpgt>
 8018172:	2800      	cmp	r0, #0
 8018174:	d000      	beq.n	8018178 <_dtoa_r+0x5dc>
 8018176:	e076      	b.n	8018266 <_dtoa_r+0x6ca>
 8018178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801817a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801817c:	2000      	movs	r0, #0
 801817e:	4938      	ldr	r1, [pc, #224]	; (8018260 <_dtoa_r+0x6c4>)
 8018180:	f7ea fbca 	bl	8002918 <__aeabi_dsub>
 8018184:	0002      	movs	r2, r0
 8018186:	000b      	movs	r3, r1
 8018188:	9806      	ldr	r0, [sp, #24]
 801818a:	9907      	ldr	r1, [sp, #28]
 801818c:	f7e8 f96c 	bl	8000468 <__aeabi_dcmplt>
 8018190:	2800      	cmp	r0, #0
 8018192:	d100      	bne.n	8018196 <_dtoa_r+0x5fa>
 8018194:	e71f      	b.n	8017fd6 <_dtoa_r+0x43a>
 8018196:	1e6b      	subs	r3, r5, #1
 8018198:	781a      	ldrb	r2, [r3, #0]
 801819a:	2a30      	cmp	r2, #48	; 0x30
 801819c:	d001      	beq.n	80181a2 <_dtoa_r+0x606>
 801819e:	0037      	movs	r7, r6
 80181a0:	e03f      	b.n	8018222 <_dtoa_r+0x686>
 80181a2:	001d      	movs	r5, r3
 80181a4:	e7f7      	b.n	8018196 <_dtoa_r+0x5fa>
 80181a6:	9806      	ldr	r0, [sp, #24]
 80181a8:	9907      	ldr	r1, [sp, #28]
 80181aa:	2200      	movs	r2, #0
 80181ac:	4b26      	ldr	r3, [pc, #152]	; (8018248 <_dtoa_r+0x6ac>)
 80181ae:	f7ea f941 	bl	8002434 <__aeabi_dmul>
 80181b2:	9006      	str	r0, [sp, #24]
 80181b4:	9107      	str	r1, [sp, #28]
 80181b6:	e7b6      	b.n	8018126 <_dtoa_r+0x58a>
 80181b8:	9e08      	ldr	r6, [sp, #32]
 80181ba:	9a04      	ldr	r2, [sp, #16]
 80181bc:	9b05      	ldr	r3, [sp, #20]
 80181be:	9806      	ldr	r0, [sp, #24]
 80181c0:	9907      	ldr	r1, [sp, #28]
 80181c2:	f7e9 fd2d 	bl	8001c20 <__aeabi_ddiv>
 80181c6:	f7ea ff0b 	bl	8002fe0 <__aeabi_d2iz>
 80181ca:	0004      	movs	r4, r0
 80181cc:	f7ea ff3e 	bl	800304c <__aeabi_i2d>
 80181d0:	9a04      	ldr	r2, [sp, #16]
 80181d2:	9b05      	ldr	r3, [sp, #20]
 80181d4:	f7ea f92e 	bl	8002434 <__aeabi_dmul>
 80181d8:	0002      	movs	r2, r0
 80181da:	000b      	movs	r3, r1
 80181dc:	9806      	ldr	r0, [sp, #24]
 80181de:	9907      	ldr	r1, [sp, #28]
 80181e0:	f7ea fb9a 	bl	8002918 <__aeabi_dsub>
 80181e4:	0023      	movs	r3, r4
 80181e6:	3330      	adds	r3, #48	; 0x30
 80181e8:	7033      	strb	r3, [r6, #0]
 80181ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181ec:	9b08      	ldr	r3, [sp, #32]
 80181ee:	1c75      	adds	r5, r6, #1
 80181f0:	1aeb      	subs	r3, r5, r3
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d148      	bne.n	8018288 <_dtoa_r+0x6ec>
 80181f6:	0002      	movs	r2, r0
 80181f8:	000b      	movs	r3, r1
 80181fa:	f7e9 f9f5 	bl	80015e8 <__aeabi_dadd>
 80181fe:	9a04      	ldr	r2, [sp, #16]
 8018200:	9b05      	ldr	r3, [sp, #20]
 8018202:	9006      	str	r0, [sp, #24]
 8018204:	9107      	str	r1, [sp, #28]
 8018206:	f7e8 f943 	bl	8000490 <__aeabi_dcmpgt>
 801820a:	2800      	cmp	r0, #0
 801820c:	d12a      	bne.n	8018264 <_dtoa_r+0x6c8>
 801820e:	9a04      	ldr	r2, [sp, #16]
 8018210:	9b05      	ldr	r3, [sp, #20]
 8018212:	9806      	ldr	r0, [sp, #24]
 8018214:	9907      	ldr	r1, [sp, #28]
 8018216:	f7e8 f921 	bl	800045c <__aeabi_dcmpeq>
 801821a:	2800      	cmp	r0, #0
 801821c:	d001      	beq.n	8018222 <_dtoa_r+0x686>
 801821e:	07e3      	lsls	r3, r4, #31
 8018220:	d420      	bmi.n	8018264 <_dtoa_r+0x6c8>
 8018222:	9903      	ldr	r1, [sp, #12]
 8018224:	9802      	ldr	r0, [sp, #8]
 8018226:	f000 ff35 	bl	8019094 <_Bfree>
 801822a:	2300      	movs	r3, #0
 801822c:	702b      	strb	r3, [r5, #0]
 801822e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018230:	3701      	adds	r7, #1
 8018232:	601f      	str	r7, [r3, #0]
 8018234:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018236:	2b00      	cmp	r3, #0
 8018238:	d100      	bne.n	801823c <_dtoa_r+0x6a0>
 801823a:	e4e4      	b.n	8017c06 <_dtoa_r+0x6a>
 801823c:	601d      	str	r5, [r3, #0]
 801823e:	e4e2      	b.n	8017c06 <_dtoa_r+0x6a>
 8018240:	0801d3b8 	.word	0x0801d3b8
 8018244:	3ff00000 	.word	0x3ff00000
 8018248:	40240000 	.word	0x40240000
 801824c:	401c0000 	.word	0x401c0000
 8018250:	fcc00000 	.word	0xfcc00000
 8018254:	40140000 	.word	0x40140000
 8018258:	7cc00000 	.word	0x7cc00000
 801825c:	0801d390 	.word	0x0801d390
 8018260:	3fe00000 	.word	0x3fe00000
 8018264:	003e      	movs	r6, r7
 8018266:	1e6b      	subs	r3, r5, #1
 8018268:	781a      	ldrb	r2, [r3, #0]
 801826a:	2a39      	cmp	r2, #57	; 0x39
 801826c:	d106      	bne.n	801827c <_dtoa_r+0x6e0>
 801826e:	9a08      	ldr	r2, [sp, #32]
 8018270:	429a      	cmp	r2, r3
 8018272:	d107      	bne.n	8018284 <_dtoa_r+0x6e8>
 8018274:	2330      	movs	r3, #48	; 0x30
 8018276:	7013      	strb	r3, [r2, #0]
 8018278:	0013      	movs	r3, r2
 801827a:	3601      	adds	r6, #1
 801827c:	781a      	ldrb	r2, [r3, #0]
 801827e:	3201      	adds	r2, #1
 8018280:	701a      	strb	r2, [r3, #0]
 8018282:	e78c      	b.n	801819e <_dtoa_r+0x602>
 8018284:	001d      	movs	r5, r3
 8018286:	e7ee      	b.n	8018266 <_dtoa_r+0x6ca>
 8018288:	2200      	movs	r2, #0
 801828a:	4ba4      	ldr	r3, [pc, #656]	; (801851c <_dtoa_r+0x980>)
 801828c:	f7ea f8d2 	bl	8002434 <__aeabi_dmul>
 8018290:	2200      	movs	r2, #0
 8018292:	2300      	movs	r3, #0
 8018294:	9006      	str	r0, [sp, #24]
 8018296:	9107      	str	r1, [sp, #28]
 8018298:	002e      	movs	r6, r5
 801829a:	f7e8 f8df 	bl	800045c <__aeabi_dcmpeq>
 801829e:	2800      	cmp	r0, #0
 80182a0:	d08b      	beq.n	80181ba <_dtoa_r+0x61e>
 80182a2:	e7be      	b.n	8018222 <_dtoa_r+0x686>
 80182a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80182a6:	2a00      	cmp	r2, #0
 80182a8:	d100      	bne.n	80182ac <_dtoa_r+0x710>
 80182aa:	e0da      	b.n	8018462 <_dtoa_r+0x8c6>
 80182ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80182ae:	2a01      	cmp	r2, #1
 80182b0:	dd00      	ble.n	80182b4 <_dtoa_r+0x718>
 80182b2:	e0bd      	b.n	8018430 <_dtoa_r+0x894>
 80182b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80182b6:	2a00      	cmp	r2, #0
 80182b8:	d100      	bne.n	80182bc <_dtoa_r+0x720>
 80182ba:	e0b5      	b.n	8018428 <_dtoa_r+0x88c>
 80182bc:	4a98      	ldr	r2, [pc, #608]	; (8018520 <_dtoa_r+0x984>)
 80182be:	189b      	adds	r3, r3, r2
 80182c0:	9d04      	ldr	r5, [sp, #16]
 80182c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80182c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80182c6:	2101      	movs	r1, #1
 80182c8:	18d2      	adds	r2, r2, r3
 80182ca:	920a      	str	r2, [sp, #40]	; 0x28
 80182cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80182ce:	9802      	ldr	r0, [sp, #8]
 80182d0:	18d3      	adds	r3, r2, r3
 80182d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80182d4:	f000 ffad 	bl	8019232 <__i2b>
 80182d8:	0006      	movs	r6, r0
 80182da:	2c00      	cmp	r4, #0
 80182dc:	dd0e      	ble.n	80182fc <_dtoa_r+0x760>
 80182de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	dd0b      	ble.n	80182fc <_dtoa_r+0x760>
 80182e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80182e6:	0023      	movs	r3, r4
 80182e8:	4294      	cmp	r4, r2
 80182ea:	dd00      	ble.n	80182ee <_dtoa_r+0x752>
 80182ec:	0013      	movs	r3, r2
 80182ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80182f0:	1ae4      	subs	r4, r4, r3
 80182f2:	1ad2      	subs	r2, r2, r3
 80182f4:	920a      	str	r2, [sp, #40]	; 0x28
 80182f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80182f8:	1ad3      	subs	r3, r2, r3
 80182fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80182fc:	9b04      	ldr	r3, [sp, #16]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d01f      	beq.n	8018342 <_dtoa_r+0x7a6>
 8018302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018304:	2b00      	cmp	r3, #0
 8018306:	d100      	bne.n	801830a <_dtoa_r+0x76e>
 8018308:	e0af      	b.n	801846a <_dtoa_r+0x8ce>
 801830a:	2d00      	cmp	r5, #0
 801830c:	d011      	beq.n	8018332 <_dtoa_r+0x796>
 801830e:	0031      	movs	r1, r6
 8018310:	002a      	movs	r2, r5
 8018312:	9802      	ldr	r0, [sp, #8]
 8018314:	f001 f826 	bl	8019364 <__pow5mult>
 8018318:	9a03      	ldr	r2, [sp, #12]
 801831a:	0001      	movs	r1, r0
 801831c:	0006      	movs	r6, r0
 801831e:	9802      	ldr	r0, [sp, #8]
 8018320:	f000 ff90 	bl	8019244 <__multiply>
 8018324:	9903      	ldr	r1, [sp, #12]
 8018326:	9010      	str	r0, [sp, #64]	; 0x40
 8018328:	9802      	ldr	r0, [sp, #8]
 801832a:	f000 feb3 	bl	8019094 <_Bfree>
 801832e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018330:	9303      	str	r3, [sp, #12]
 8018332:	9b04      	ldr	r3, [sp, #16]
 8018334:	1b5a      	subs	r2, r3, r5
 8018336:	d004      	beq.n	8018342 <_dtoa_r+0x7a6>
 8018338:	9903      	ldr	r1, [sp, #12]
 801833a:	9802      	ldr	r0, [sp, #8]
 801833c:	f001 f812 	bl	8019364 <__pow5mult>
 8018340:	9003      	str	r0, [sp, #12]
 8018342:	2101      	movs	r1, #1
 8018344:	9802      	ldr	r0, [sp, #8]
 8018346:	f000 ff74 	bl	8019232 <__i2b>
 801834a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801834c:	9004      	str	r0, [sp, #16]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d100      	bne.n	8018354 <_dtoa_r+0x7b8>
 8018352:	e1e3      	b.n	801871c <_dtoa_r+0xb80>
 8018354:	001a      	movs	r2, r3
 8018356:	0001      	movs	r1, r0
 8018358:	9802      	ldr	r0, [sp, #8]
 801835a:	f001 f803 	bl	8019364 <__pow5mult>
 801835e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018360:	9004      	str	r0, [sp, #16]
 8018362:	2b01      	cmp	r3, #1
 8018364:	dd00      	ble.n	8018368 <_dtoa_r+0x7cc>
 8018366:	e082      	b.n	801846e <_dtoa_r+0x8d2>
 8018368:	2500      	movs	r5, #0
 801836a:	9b06      	ldr	r3, [sp, #24]
 801836c:	42ab      	cmp	r3, r5
 801836e:	d10e      	bne.n	801838e <_dtoa_r+0x7f2>
 8018370:	9b07      	ldr	r3, [sp, #28]
 8018372:	031b      	lsls	r3, r3, #12
 8018374:	42ab      	cmp	r3, r5
 8018376:	d10a      	bne.n	801838e <_dtoa_r+0x7f2>
 8018378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801837a:	9a07      	ldr	r2, [sp, #28]
 801837c:	4213      	tst	r3, r2
 801837e:	d006      	beq.n	801838e <_dtoa_r+0x7f2>
 8018380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018382:	3501      	adds	r5, #1
 8018384:	3301      	adds	r3, #1
 8018386:	930a      	str	r3, [sp, #40]	; 0x28
 8018388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801838a:	3301      	adds	r3, #1
 801838c:	930b      	str	r3, [sp, #44]	; 0x2c
 801838e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018390:	2001      	movs	r0, #1
 8018392:	2b00      	cmp	r3, #0
 8018394:	d16c      	bne.n	8018470 <_dtoa_r+0x8d4>
 8018396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018398:	1818      	adds	r0, r3, r0
 801839a:	231f      	movs	r3, #31
 801839c:	4018      	ands	r0, r3
 801839e:	d07e      	beq.n	801849e <_dtoa_r+0x902>
 80183a0:	3301      	adds	r3, #1
 80183a2:	1a1b      	subs	r3, r3, r0
 80183a4:	2b04      	cmp	r3, #4
 80183a6:	dd70      	ble.n	801848a <_dtoa_r+0x8ee>
 80183a8:	231c      	movs	r3, #28
 80183aa:	1a18      	subs	r0, r3, r0
 80183ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183ae:	1824      	adds	r4, r4, r0
 80183b0:	181b      	adds	r3, r3, r0
 80183b2:	930a      	str	r3, [sp, #40]	; 0x28
 80183b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183b6:	181b      	adds	r3, r3, r0
 80183b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80183ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183bc:	2b00      	cmp	r3, #0
 80183be:	dd05      	ble.n	80183cc <_dtoa_r+0x830>
 80183c0:	001a      	movs	r2, r3
 80183c2:	9903      	ldr	r1, [sp, #12]
 80183c4:	9802      	ldr	r0, [sp, #8]
 80183c6:	f001 f80f 	bl	80193e8 <__lshift>
 80183ca:	9003      	str	r0, [sp, #12]
 80183cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	dd05      	ble.n	80183de <_dtoa_r+0x842>
 80183d2:	001a      	movs	r2, r3
 80183d4:	9904      	ldr	r1, [sp, #16]
 80183d6:	9802      	ldr	r0, [sp, #8]
 80183d8:	f001 f806 	bl	80193e8 <__lshift>
 80183dc:	9004      	str	r0, [sp, #16]
 80183de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d05e      	beq.n	80184a2 <_dtoa_r+0x906>
 80183e4:	9904      	ldr	r1, [sp, #16]
 80183e6:	9803      	ldr	r0, [sp, #12]
 80183e8:	f001 f850 	bl	801948c <__mcmp>
 80183ec:	2800      	cmp	r0, #0
 80183ee:	da58      	bge.n	80184a2 <_dtoa_r+0x906>
 80183f0:	2300      	movs	r3, #0
 80183f2:	220a      	movs	r2, #10
 80183f4:	9903      	ldr	r1, [sp, #12]
 80183f6:	9802      	ldr	r0, [sp, #8]
 80183f8:	f000 fe56 	bl	80190a8 <__multadd>
 80183fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80183fe:	3f01      	subs	r7, #1
 8018400:	9003      	str	r0, [sp, #12]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d100      	bne.n	8018408 <_dtoa_r+0x86c>
 8018406:	e190      	b.n	801872a <_dtoa_r+0xb8e>
 8018408:	2300      	movs	r3, #0
 801840a:	0031      	movs	r1, r6
 801840c:	220a      	movs	r2, #10
 801840e:	9802      	ldr	r0, [sp, #8]
 8018410:	f000 fe4a 	bl	80190a8 <__multadd>
 8018414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018416:	0006      	movs	r6, r0
 8018418:	2b00      	cmp	r3, #0
 801841a:	dd00      	ble.n	801841e <_dtoa_r+0x882>
 801841c:	e088      	b.n	8018530 <_dtoa_r+0x994>
 801841e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018420:	2b02      	cmp	r3, #2
 8018422:	dc00      	bgt.n	8018426 <_dtoa_r+0x88a>
 8018424:	e084      	b.n	8018530 <_dtoa_r+0x994>
 8018426:	e044      	b.n	80184b2 <_dtoa_r+0x916>
 8018428:	2336      	movs	r3, #54	; 0x36
 801842a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801842c:	1a9b      	subs	r3, r3, r2
 801842e:	e747      	b.n	80182c0 <_dtoa_r+0x724>
 8018430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018432:	1e5d      	subs	r5, r3, #1
 8018434:	9b04      	ldr	r3, [sp, #16]
 8018436:	42ab      	cmp	r3, r5
 8018438:	db08      	blt.n	801844c <_dtoa_r+0x8b0>
 801843a:	1b5d      	subs	r5, r3, r5
 801843c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801843e:	2b00      	cmp	r3, #0
 8018440:	da0c      	bge.n	801845c <_dtoa_r+0x8c0>
 8018442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018446:	1a9c      	subs	r4, r3, r2
 8018448:	2300      	movs	r3, #0
 801844a:	e73b      	b.n	80182c4 <_dtoa_r+0x728>
 801844c:	9b04      	ldr	r3, [sp, #16]
 801844e:	9504      	str	r5, [sp, #16]
 8018450:	1aea      	subs	r2, r5, r3
 8018452:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018454:	2500      	movs	r5, #0
 8018456:	189b      	adds	r3, r3, r2
 8018458:	9311      	str	r3, [sp, #68]	; 0x44
 801845a:	e7ef      	b.n	801843c <_dtoa_r+0x8a0>
 801845c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801845e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018460:	e730      	b.n	80182c4 <_dtoa_r+0x728>
 8018462:	9d04      	ldr	r5, [sp, #16]
 8018464:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018466:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8018468:	e737      	b.n	80182da <_dtoa_r+0x73e>
 801846a:	9a04      	ldr	r2, [sp, #16]
 801846c:	e764      	b.n	8018338 <_dtoa_r+0x79c>
 801846e:	2500      	movs	r5, #0
 8018470:	9b04      	ldr	r3, [sp, #16]
 8018472:	9a04      	ldr	r2, [sp, #16]
 8018474:	691b      	ldr	r3, [r3, #16]
 8018476:	9310      	str	r3, [sp, #64]	; 0x40
 8018478:	3303      	adds	r3, #3
 801847a:	009b      	lsls	r3, r3, #2
 801847c:	18d3      	adds	r3, r2, r3
 801847e:	6858      	ldr	r0, [r3, #4]
 8018480:	f000 fe8e 	bl	80191a0 <__hi0bits>
 8018484:	2320      	movs	r3, #32
 8018486:	1a18      	subs	r0, r3, r0
 8018488:	e785      	b.n	8018396 <_dtoa_r+0x7fa>
 801848a:	2b04      	cmp	r3, #4
 801848c:	d095      	beq.n	80183ba <_dtoa_r+0x81e>
 801848e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018490:	331c      	adds	r3, #28
 8018492:	18d2      	adds	r2, r2, r3
 8018494:	920a      	str	r2, [sp, #40]	; 0x28
 8018496:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018498:	18e4      	adds	r4, r4, r3
 801849a:	18d3      	adds	r3, r2, r3
 801849c:	e78c      	b.n	80183b8 <_dtoa_r+0x81c>
 801849e:	0003      	movs	r3, r0
 80184a0:	e7f5      	b.n	801848e <_dtoa_r+0x8f2>
 80184a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	dc3d      	bgt.n	8018524 <_dtoa_r+0x988>
 80184a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80184aa:	2b02      	cmp	r3, #2
 80184ac:	dd3a      	ble.n	8018524 <_dtoa_r+0x988>
 80184ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184b0:	930c      	str	r3, [sp, #48]	; 0x30
 80184b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d10c      	bne.n	80184d2 <_dtoa_r+0x936>
 80184b8:	9904      	ldr	r1, [sp, #16]
 80184ba:	2205      	movs	r2, #5
 80184bc:	9802      	ldr	r0, [sp, #8]
 80184be:	f000 fdf3 	bl	80190a8 <__multadd>
 80184c2:	9004      	str	r0, [sp, #16]
 80184c4:	0001      	movs	r1, r0
 80184c6:	9803      	ldr	r0, [sp, #12]
 80184c8:	f000 ffe0 	bl	801948c <__mcmp>
 80184cc:	2800      	cmp	r0, #0
 80184ce:	dd00      	ble.n	80184d2 <_dtoa_r+0x936>
 80184d0:	e5ad      	b.n	801802e <_dtoa_r+0x492>
 80184d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80184d4:	9d08      	ldr	r5, [sp, #32]
 80184d6:	43df      	mvns	r7, r3
 80184d8:	2300      	movs	r3, #0
 80184da:	9309      	str	r3, [sp, #36]	; 0x24
 80184dc:	9904      	ldr	r1, [sp, #16]
 80184de:	9802      	ldr	r0, [sp, #8]
 80184e0:	f000 fdd8 	bl	8019094 <_Bfree>
 80184e4:	2e00      	cmp	r6, #0
 80184e6:	d100      	bne.n	80184ea <_dtoa_r+0x94e>
 80184e8:	e69b      	b.n	8018222 <_dtoa_r+0x686>
 80184ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d005      	beq.n	80184fc <_dtoa_r+0x960>
 80184f0:	42b3      	cmp	r3, r6
 80184f2:	d003      	beq.n	80184fc <_dtoa_r+0x960>
 80184f4:	0019      	movs	r1, r3
 80184f6:	9802      	ldr	r0, [sp, #8]
 80184f8:	f000 fdcc 	bl	8019094 <_Bfree>
 80184fc:	0031      	movs	r1, r6
 80184fe:	9802      	ldr	r0, [sp, #8]
 8018500:	f000 fdc8 	bl	8019094 <_Bfree>
 8018504:	e68d      	b.n	8018222 <_dtoa_r+0x686>
 8018506:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018508:	9304      	str	r3, [sp, #16]
 801850a:	001e      	movs	r6, r3
 801850c:	e7e1      	b.n	80184d2 <_dtoa_r+0x936>
 801850e:	2300      	movs	r3, #0
 8018510:	e7fa      	b.n	8018508 <_dtoa_r+0x96c>
 8018512:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018514:	0037      	movs	r7, r6
 8018516:	9304      	str	r3, [sp, #16]
 8018518:	001e      	movs	r6, r3
 801851a:	e588      	b.n	801802e <_dtoa_r+0x492>
 801851c:	40240000 	.word	0x40240000
 8018520:	00000433 	.word	0x00000433
 8018524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018526:	2b00      	cmp	r3, #0
 8018528:	d100      	bne.n	801852c <_dtoa_r+0x990>
 801852a:	e0b2      	b.n	8018692 <_dtoa_r+0xaf6>
 801852c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801852e:	930c      	str	r3, [sp, #48]	; 0x30
 8018530:	2c00      	cmp	r4, #0
 8018532:	dd05      	ble.n	8018540 <_dtoa_r+0x9a4>
 8018534:	0031      	movs	r1, r6
 8018536:	0022      	movs	r2, r4
 8018538:	9802      	ldr	r0, [sp, #8]
 801853a:	f000 ff55 	bl	80193e8 <__lshift>
 801853e:	0006      	movs	r6, r0
 8018540:	0030      	movs	r0, r6
 8018542:	2d00      	cmp	r5, #0
 8018544:	d011      	beq.n	801856a <_dtoa_r+0x9ce>
 8018546:	6871      	ldr	r1, [r6, #4]
 8018548:	9802      	ldr	r0, [sp, #8]
 801854a:	f000 fd7b 	bl	8019044 <_Balloc>
 801854e:	0031      	movs	r1, r6
 8018550:	0004      	movs	r4, r0
 8018552:	6933      	ldr	r3, [r6, #16]
 8018554:	310c      	adds	r1, #12
 8018556:	1c9a      	adds	r2, r3, #2
 8018558:	0092      	lsls	r2, r2, #2
 801855a:	300c      	adds	r0, #12
 801855c:	f7fc fe8b 	bl	8015276 <memcpy>
 8018560:	2201      	movs	r2, #1
 8018562:	0021      	movs	r1, r4
 8018564:	9802      	ldr	r0, [sp, #8]
 8018566:	f000 ff3f 	bl	80193e8 <__lshift>
 801856a:	9609      	str	r6, [sp, #36]	; 0x24
 801856c:	0006      	movs	r6, r0
 801856e:	9b08      	ldr	r3, [sp, #32]
 8018570:	930a      	str	r3, [sp, #40]	; 0x28
 8018572:	9904      	ldr	r1, [sp, #16]
 8018574:	9803      	ldr	r0, [sp, #12]
 8018576:	f7ff fa8b 	bl	8017a90 <quorem>
 801857a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801857c:	900d      	str	r0, [sp, #52]	; 0x34
 801857e:	0004      	movs	r4, r0
 8018580:	9803      	ldr	r0, [sp, #12]
 8018582:	f000 ff83 	bl	801948c <__mcmp>
 8018586:	0032      	movs	r2, r6
 8018588:	9010      	str	r0, [sp, #64]	; 0x40
 801858a:	9904      	ldr	r1, [sp, #16]
 801858c:	9802      	ldr	r0, [sp, #8]
 801858e:	f000 ff97 	bl	80194c0 <__mdiff>
 8018592:	2301      	movs	r3, #1
 8018594:	930b      	str	r3, [sp, #44]	; 0x2c
 8018596:	68c3      	ldr	r3, [r0, #12]
 8018598:	3430      	adds	r4, #48	; 0x30
 801859a:	0005      	movs	r5, r0
 801859c:	2b00      	cmp	r3, #0
 801859e:	d104      	bne.n	80185aa <_dtoa_r+0xa0e>
 80185a0:	0001      	movs	r1, r0
 80185a2:	9803      	ldr	r0, [sp, #12]
 80185a4:	f000 ff72 	bl	801948c <__mcmp>
 80185a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80185aa:	0029      	movs	r1, r5
 80185ac:	9802      	ldr	r0, [sp, #8]
 80185ae:	f000 fd71 	bl	8019094 <_Bfree>
 80185b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80185b6:	4313      	orrs	r3, r2
 80185b8:	d10e      	bne.n	80185d8 <_dtoa_r+0xa3c>
 80185ba:	9a06      	ldr	r2, [sp, #24]
 80185bc:	3301      	adds	r3, #1
 80185be:	4213      	tst	r3, r2
 80185c0:	d10a      	bne.n	80185d8 <_dtoa_r+0xa3c>
 80185c2:	2c39      	cmp	r4, #57	; 0x39
 80185c4:	d026      	beq.n	8018614 <_dtoa_r+0xa78>
 80185c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	dd01      	ble.n	80185d0 <_dtoa_r+0xa34>
 80185cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80185ce:	3431      	adds	r4, #49	; 0x31
 80185d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80185d2:	1c5d      	adds	r5, r3, #1
 80185d4:	701c      	strb	r4, [r3, #0]
 80185d6:	e781      	b.n	80184dc <_dtoa_r+0x940>
 80185d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185da:	2b00      	cmp	r3, #0
 80185dc:	db07      	blt.n	80185ee <_dtoa_r+0xa52>
 80185de:	001d      	movs	r5, r3
 80185e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80185e2:	431d      	orrs	r5, r3
 80185e4:	d122      	bne.n	801862c <_dtoa_r+0xa90>
 80185e6:	2301      	movs	r3, #1
 80185e8:	9a06      	ldr	r2, [sp, #24]
 80185ea:	4213      	tst	r3, r2
 80185ec:	d11e      	bne.n	801862c <_dtoa_r+0xa90>
 80185ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	dded      	ble.n	80185d0 <_dtoa_r+0xa34>
 80185f4:	9903      	ldr	r1, [sp, #12]
 80185f6:	2201      	movs	r2, #1
 80185f8:	9802      	ldr	r0, [sp, #8]
 80185fa:	f000 fef5 	bl	80193e8 <__lshift>
 80185fe:	9904      	ldr	r1, [sp, #16]
 8018600:	9003      	str	r0, [sp, #12]
 8018602:	f000 ff43 	bl	801948c <__mcmp>
 8018606:	2800      	cmp	r0, #0
 8018608:	dc02      	bgt.n	8018610 <_dtoa_r+0xa74>
 801860a:	d1e1      	bne.n	80185d0 <_dtoa_r+0xa34>
 801860c:	07e3      	lsls	r3, r4, #31
 801860e:	d5df      	bpl.n	80185d0 <_dtoa_r+0xa34>
 8018610:	2c39      	cmp	r4, #57	; 0x39
 8018612:	d1db      	bne.n	80185cc <_dtoa_r+0xa30>
 8018614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018618:	1c5d      	adds	r5, r3, #1
 801861a:	2339      	movs	r3, #57	; 0x39
 801861c:	7013      	strb	r3, [r2, #0]
 801861e:	1e6b      	subs	r3, r5, #1
 8018620:	781a      	ldrb	r2, [r3, #0]
 8018622:	2a39      	cmp	r2, #57	; 0x39
 8018624:	d067      	beq.n	80186f6 <_dtoa_r+0xb5a>
 8018626:	3201      	adds	r2, #1
 8018628:	701a      	strb	r2, [r3, #0]
 801862a:	e757      	b.n	80184dc <_dtoa_r+0x940>
 801862c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801862e:	1c5d      	adds	r5, r3, #1
 8018630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018632:	2b00      	cmp	r3, #0
 8018634:	dd04      	ble.n	8018640 <_dtoa_r+0xaa4>
 8018636:	2c39      	cmp	r4, #57	; 0x39
 8018638:	d0ec      	beq.n	8018614 <_dtoa_r+0xa78>
 801863a:	3401      	adds	r4, #1
 801863c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801863e:	e7c9      	b.n	80185d4 <_dtoa_r+0xa38>
 8018640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018644:	701c      	strb	r4, [r3, #0]
 8018646:	9b08      	ldr	r3, [sp, #32]
 8018648:	1aeb      	subs	r3, r5, r3
 801864a:	4293      	cmp	r3, r2
 801864c:	d03e      	beq.n	80186cc <_dtoa_r+0xb30>
 801864e:	2300      	movs	r3, #0
 8018650:	220a      	movs	r2, #10
 8018652:	9903      	ldr	r1, [sp, #12]
 8018654:	9802      	ldr	r0, [sp, #8]
 8018656:	f000 fd27 	bl	80190a8 <__multadd>
 801865a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801865c:	9003      	str	r0, [sp, #12]
 801865e:	42b3      	cmp	r3, r6
 8018660:	d109      	bne.n	8018676 <_dtoa_r+0xada>
 8018662:	2300      	movs	r3, #0
 8018664:	220a      	movs	r2, #10
 8018666:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018668:	9802      	ldr	r0, [sp, #8]
 801866a:	f000 fd1d 	bl	80190a8 <__multadd>
 801866e:	9009      	str	r0, [sp, #36]	; 0x24
 8018670:	0006      	movs	r6, r0
 8018672:	950a      	str	r5, [sp, #40]	; 0x28
 8018674:	e77d      	b.n	8018572 <_dtoa_r+0x9d6>
 8018676:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018678:	2300      	movs	r3, #0
 801867a:	220a      	movs	r2, #10
 801867c:	9802      	ldr	r0, [sp, #8]
 801867e:	f000 fd13 	bl	80190a8 <__multadd>
 8018682:	2300      	movs	r3, #0
 8018684:	9009      	str	r0, [sp, #36]	; 0x24
 8018686:	220a      	movs	r2, #10
 8018688:	0031      	movs	r1, r6
 801868a:	9802      	ldr	r0, [sp, #8]
 801868c:	f000 fd0c 	bl	80190a8 <__multadd>
 8018690:	e7ee      	b.n	8018670 <_dtoa_r+0xad4>
 8018692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018694:	930c      	str	r3, [sp, #48]	; 0x30
 8018696:	9b08      	ldr	r3, [sp, #32]
 8018698:	9306      	str	r3, [sp, #24]
 801869a:	9904      	ldr	r1, [sp, #16]
 801869c:	9803      	ldr	r0, [sp, #12]
 801869e:	f7ff f9f7 	bl	8017a90 <quorem>
 80186a2:	9b06      	ldr	r3, [sp, #24]
 80186a4:	3030      	adds	r0, #48	; 0x30
 80186a6:	1c5d      	adds	r5, r3, #1
 80186a8:	7018      	strb	r0, [r3, #0]
 80186aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80186ac:	9b08      	ldr	r3, [sp, #32]
 80186ae:	0004      	movs	r4, r0
 80186b0:	1aeb      	subs	r3, r5, r3
 80186b2:	429a      	cmp	r2, r3
 80186b4:	dd08      	ble.n	80186c8 <_dtoa_r+0xb2c>
 80186b6:	2300      	movs	r3, #0
 80186b8:	220a      	movs	r2, #10
 80186ba:	9903      	ldr	r1, [sp, #12]
 80186bc:	9802      	ldr	r0, [sp, #8]
 80186be:	f000 fcf3 	bl	80190a8 <__multadd>
 80186c2:	9506      	str	r5, [sp, #24]
 80186c4:	9003      	str	r0, [sp, #12]
 80186c6:	e7e8      	b.n	801869a <_dtoa_r+0xafe>
 80186c8:	2300      	movs	r3, #0
 80186ca:	9309      	str	r3, [sp, #36]	; 0x24
 80186cc:	9903      	ldr	r1, [sp, #12]
 80186ce:	2201      	movs	r2, #1
 80186d0:	9802      	ldr	r0, [sp, #8]
 80186d2:	f000 fe89 	bl	80193e8 <__lshift>
 80186d6:	9904      	ldr	r1, [sp, #16]
 80186d8:	9003      	str	r0, [sp, #12]
 80186da:	f000 fed7 	bl	801948c <__mcmp>
 80186de:	2800      	cmp	r0, #0
 80186e0:	dc9d      	bgt.n	801861e <_dtoa_r+0xa82>
 80186e2:	d101      	bne.n	80186e8 <_dtoa_r+0xb4c>
 80186e4:	07e3      	lsls	r3, r4, #31
 80186e6:	d49a      	bmi.n	801861e <_dtoa_r+0xa82>
 80186e8:	1e6b      	subs	r3, r5, #1
 80186ea:	781a      	ldrb	r2, [r3, #0]
 80186ec:	2a30      	cmp	r2, #48	; 0x30
 80186ee:	d000      	beq.n	80186f2 <_dtoa_r+0xb56>
 80186f0:	e6f4      	b.n	80184dc <_dtoa_r+0x940>
 80186f2:	001d      	movs	r5, r3
 80186f4:	e7f8      	b.n	80186e8 <_dtoa_r+0xb4c>
 80186f6:	9a08      	ldr	r2, [sp, #32]
 80186f8:	429a      	cmp	r2, r3
 80186fa:	d103      	bne.n	8018704 <_dtoa_r+0xb68>
 80186fc:	2331      	movs	r3, #49	; 0x31
 80186fe:	3701      	adds	r7, #1
 8018700:	7013      	strb	r3, [r2, #0]
 8018702:	e6eb      	b.n	80184dc <_dtoa_r+0x940>
 8018704:	001d      	movs	r5, r3
 8018706:	e78a      	b.n	801861e <_dtoa_r+0xa82>
 8018708:	4b0b      	ldr	r3, [pc, #44]	; (8018738 <_dtoa_r+0xb9c>)
 801870a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801870c:	9308      	str	r3, [sp, #32]
 801870e:	4b0b      	ldr	r3, [pc, #44]	; (801873c <_dtoa_r+0xba0>)
 8018710:	2a00      	cmp	r2, #0
 8018712:	d001      	beq.n	8018718 <_dtoa_r+0xb7c>
 8018714:	f7ff fa75 	bl	8017c02 <_dtoa_r+0x66>
 8018718:	f7ff fa75 	bl	8017c06 <_dtoa_r+0x6a>
 801871c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801871e:	2b01      	cmp	r3, #1
 8018720:	dc00      	bgt.n	8018724 <_dtoa_r+0xb88>
 8018722:	e621      	b.n	8018368 <_dtoa_r+0x7cc>
 8018724:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018726:	2001      	movs	r0, #1
 8018728:	e635      	b.n	8018396 <_dtoa_r+0x7fa>
 801872a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801872c:	2b00      	cmp	r3, #0
 801872e:	dcb2      	bgt.n	8018696 <_dtoa_r+0xafa>
 8018730:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018732:	2b02      	cmp	r3, #2
 8018734:	ddaf      	ble.n	8018696 <_dtoa_r+0xafa>
 8018736:	e6bc      	b.n	80184b2 <_dtoa_r+0x916>
 8018738:	0801d37d 	.word	0x0801d37d
 801873c:	0801d385 	.word	0x0801d385

08018740 <__errno>:
 8018740:	4b01      	ldr	r3, [pc, #4]	; (8018748 <__errno+0x8>)
 8018742:	6818      	ldr	r0, [r3, #0]
 8018744:	4770      	bx	lr
 8018746:	46c0      	nop			; (mov r8, r8)
 8018748:	200000d0 	.word	0x200000d0

0801874c <__libc_fini_array>:
 801874c:	b570      	push	{r4, r5, r6, lr}
 801874e:	4d07      	ldr	r5, [pc, #28]	; (801876c <__libc_fini_array+0x20>)
 8018750:	4c07      	ldr	r4, [pc, #28]	; (8018770 <__libc_fini_array+0x24>)
 8018752:	1b64      	subs	r4, r4, r5
 8018754:	10a4      	asrs	r4, r4, #2
 8018756:	2c00      	cmp	r4, #0
 8018758:	d102      	bne.n	8018760 <__libc_fini_array+0x14>
 801875a:	f001 f987 	bl	8019a6c <_fini>
 801875e:	bd70      	pop	{r4, r5, r6, pc}
 8018760:	3c01      	subs	r4, #1
 8018762:	00a3      	lsls	r3, r4, #2
 8018764:	58eb      	ldr	r3, [r5, r3]
 8018766:	4798      	blx	r3
 8018768:	e7f5      	b.n	8018756 <__libc_fini_array+0xa>
 801876a:	46c0      	nop			; (mov r8, r8)
 801876c:	0801d49c 	.word	0x0801d49c
 8018770:	0801d4a0 	.word	0x0801d4a0

08018774 <_malloc_trim_r>:
 8018774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018776:	0005      	movs	r5, r0
 8018778:	2008      	movs	r0, #8
 801877a:	000c      	movs	r4, r1
 801877c:	f7ff f95c 	bl	8017a38 <sysconf>
 8018780:	0007      	movs	r7, r0
 8018782:	0028      	movs	r0, r5
 8018784:	f7fc fd88 	bl	8015298 <__malloc_lock>
 8018788:	2203      	movs	r2, #3
 801878a:	4e21      	ldr	r6, [pc, #132]	; (8018810 <_malloc_trim_r+0x9c>)
 801878c:	0039      	movs	r1, r7
 801878e:	68b3      	ldr	r3, [r6, #8]
 8018790:	685b      	ldr	r3, [r3, #4]
 8018792:	4393      	bics	r3, r2
 8018794:	1b18      	subs	r0, r3, r4
 8018796:	3811      	subs	r0, #17
 8018798:	19c0      	adds	r0, r0, r7
 801879a:	9301      	str	r3, [sp, #4]
 801879c:	f7e7 fcd8 	bl	8000150 <__udivsi3>
 80187a0:	1e44      	subs	r4, r0, #1
 80187a2:	437c      	muls	r4, r7
 80187a4:	42a7      	cmp	r7, r4
 80187a6:	dd04      	ble.n	80187b2 <_malloc_trim_r+0x3e>
 80187a8:	0028      	movs	r0, r5
 80187aa:	f7fc fd7d 	bl	80152a8 <__malloc_unlock>
 80187ae:	2000      	movs	r0, #0
 80187b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80187b2:	2100      	movs	r1, #0
 80187b4:	0028      	movs	r0, r5
 80187b6:	f7fc ff4f 	bl	8015658 <_sbrk_r>
 80187ba:	68b3      	ldr	r3, [r6, #8]
 80187bc:	9a01      	ldr	r2, [sp, #4]
 80187be:	189b      	adds	r3, r3, r2
 80187c0:	4298      	cmp	r0, r3
 80187c2:	d1f1      	bne.n	80187a8 <_malloc_trim_r+0x34>
 80187c4:	4261      	negs	r1, r4
 80187c6:	0028      	movs	r0, r5
 80187c8:	f7fc ff46 	bl	8015658 <_sbrk_r>
 80187cc:	1c43      	adds	r3, r0, #1
 80187ce:	d110      	bne.n	80187f2 <_malloc_trim_r+0x7e>
 80187d0:	2100      	movs	r1, #0
 80187d2:	0028      	movs	r0, r5
 80187d4:	f7fc ff40 	bl	8015658 <_sbrk_r>
 80187d8:	68b2      	ldr	r2, [r6, #8]
 80187da:	1a81      	subs	r1, r0, r2
 80187dc:	290f      	cmp	r1, #15
 80187de:	dde3      	ble.n	80187a8 <_malloc_trim_r+0x34>
 80187e0:	4b0c      	ldr	r3, [pc, #48]	; (8018814 <_malloc_trim_r+0xa0>)
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	1ac0      	subs	r0, r0, r3
 80187e6:	4b0c      	ldr	r3, [pc, #48]	; (8018818 <_malloc_trim_r+0xa4>)
 80187e8:	6018      	str	r0, [r3, #0]
 80187ea:	2301      	movs	r3, #1
 80187ec:	430b      	orrs	r3, r1
 80187ee:	6053      	str	r3, [r2, #4]
 80187f0:	e7da      	b.n	80187a8 <_malloc_trim_r+0x34>
 80187f2:	68b2      	ldr	r2, [r6, #8]
 80187f4:	2601      	movs	r6, #1
 80187f6:	9b01      	ldr	r3, [sp, #4]
 80187f8:	0028      	movs	r0, r5
 80187fa:	1b1b      	subs	r3, r3, r4
 80187fc:	4333      	orrs	r3, r6
 80187fe:	6053      	str	r3, [r2, #4]
 8018800:	4b05      	ldr	r3, [pc, #20]	; (8018818 <_malloc_trim_r+0xa4>)
 8018802:	681a      	ldr	r2, [r3, #0]
 8018804:	1b14      	subs	r4, r2, r4
 8018806:	601c      	str	r4, [r3, #0]
 8018808:	f7fc fd4e 	bl	80152a8 <__malloc_unlock>
 801880c:	0030      	movs	r0, r6
 801880e:	e7cf      	b.n	80187b0 <_malloc_trim_r+0x3c>
 8018810:	2000066c 	.word	0x2000066c
 8018814:	20000a74 	.word	0x20000a74
 8018818:	20006cec 	.word	0x20006cec

0801881c <_free_r>:
 801881c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801881e:	1e0d      	subs	r5, r1, #0
 8018820:	9001      	str	r0, [sp, #4]
 8018822:	d02d      	beq.n	8018880 <_free_r+0x64>
 8018824:	f7fc fd38 	bl	8015298 <__malloc_lock>
 8018828:	2301      	movs	r3, #1
 801882a:	0029      	movs	r1, r5
 801882c:	469c      	mov	ip, r3
 801882e:	3908      	subs	r1, #8
 8018830:	684f      	ldr	r7, [r1, #4]
 8018832:	4662      	mov	r2, ip
 8018834:	003b      	movs	r3, r7
 8018836:	4666      	mov	r6, ip
 8018838:	4393      	bics	r3, r2
 801883a:	18c8      	adds	r0, r1, r3
 801883c:	6845      	ldr	r5, [r0, #4]
 801883e:	3202      	adds	r2, #2
 8018840:	4395      	bics	r5, r2
 8018842:	4a4a      	ldr	r2, [pc, #296]	; (801896c <_free_r+0x150>)
 8018844:	4037      	ands	r7, r6
 8018846:	6896      	ldr	r6, [r2, #8]
 8018848:	4286      	cmp	r6, r0
 801884a:	d11a      	bne.n	8018882 <_free_r+0x66>
 801884c:	195b      	adds	r3, r3, r5
 801884e:	2f00      	cmp	r7, #0
 8018850:	d106      	bne.n	8018860 <_free_r+0x44>
 8018852:	6808      	ldr	r0, [r1, #0]
 8018854:	1a09      	subs	r1, r1, r0
 8018856:	688d      	ldr	r5, [r1, #8]
 8018858:	181b      	adds	r3, r3, r0
 801885a:	68c8      	ldr	r0, [r1, #12]
 801885c:	60e8      	str	r0, [r5, #12]
 801885e:	6085      	str	r5, [r0, #8]
 8018860:	2001      	movs	r0, #1
 8018862:	4318      	orrs	r0, r3
 8018864:	6048      	str	r0, [r1, #4]
 8018866:	6091      	str	r1, [r2, #8]
 8018868:	4a41      	ldr	r2, [pc, #260]	; (8018970 <_free_r+0x154>)
 801886a:	6812      	ldr	r2, [r2, #0]
 801886c:	429a      	cmp	r2, r3
 801886e:	d804      	bhi.n	801887a <_free_r+0x5e>
 8018870:	4b40      	ldr	r3, [pc, #256]	; (8018974 <_free_r+0x158>)
 8018872:	9801      	ldr	r0, [sp, #4]
 8018874:	6819      	ldr	r1, [r3, #0]
 8018876:	f7ff ff7d 	bl	8018774 <_malloc_trim_r>
 801887a:	9801      	ldr	r0, [sp, #4]
 801887c:	f7fc fd14 	bl	80152a8 <__malloc_unlock>
 8018880:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8018882:	2600      	movs	r6, #0
 8018884:	6045      	str	r5, [r0, #4]
 8018886:	42b7      	cmp	r7, r6
 8018888:	d109      	bne.n	801889e <_free_r+0x82>
 801888a:	680f      	ldr	r7, [r1, #0]
 801888c:	4c3a      	ldr	r4, [pc, #232]	; (8018978 <_free_r+0x15c>)
 801888e:	1bc9      	subs	r1, r1, r7
 8018890:	19db      	adds	r3, r3, r7
 8018892:	688f      	ldr	r7, [r1, #8]
 8018894:	42a7      	cmp	r7, r4
 8018896:	d02b      	beq.n	80188f0 <_free_r+0xd4>
 8018898:	68cc      	ldr	r4, [r1, #12]
 801889a:	60fc      	str	r4, [r7, #12]
 801889c:	60a7      	str	r7, [r4, #8]
 801889e:	1947      	adds	r7, r0, r5
 80188a0:	687c      	ldr	r4, [r7, #4]
 80188a2:	2701      	movs	r7, #1
 80188a4:	423c      	tst	r4, r7
 80188a6:	d10b      	bne.n	80188c0 <_free_r+0xa4>
 80188a8:	195b      	adds	r3, r3, r5
 80188aa:	6885      	ldr	r5, [r0, #8]
 80188ac:	2e00      	cmp	r6, #0
 80188ae:	d121      	bne.n	80188f4 <_free_r+0xd8>
 80188b0:	4c31      	ldr	r4, [pc, #196]	; (8018978 <_free_r+0x15c>)
 80188b2:	42a5      	cmp	r5, r4
 80188b4:	d11e      	bne.n	80188f4 <_free_r+0xd8>
 80188b6:	003e      	movs	r6, r7
 80188b8:	6151      	str	r1, [r2, #20]
 80188ba:	6111      	str	r1, [r2, #16]
 80188bc:	60cd      	str	r5, [r1, #12]
 80188be:	608d      	str	r5, [r1, #8]
 80188c0:	2001      	movs	r0, #1
 80188c2:	0005      	movs	r5, r0
 80188c4:	431d      	orrs	r5, r3
 80188c6:	604d      	str	r5, [r1, #4]
 80188c8:	50cb      	str	r3, [r1, r3]
 80188ca:	2e00      	cmp	r6, #0
 80188cc:	d1d5      	bne.n	801887a <_free_r+0x5e>
 80188ce:	4d2b      	ldr	r5, [pc, #172]	; (801897c <_free_r+0x160>)
 80188d0:	42ab      	cmp	r3, r5
 80188d2:	d813      	bhi.n	80188fc <_free_r+0xe0>
 80188d4:	08db      	lsrs	r3, r3, #3
 80188d6:	109d      	asrs	r5, r3, #2
 80188d8:	40a8      	lsls	r0, r5
 80188da:	6854      	ldr	r4, [r2, #4]
 80188dc:	00db      	lsls	r3, r3, #3
 80188de:	4320      	orrs	r0, r4
 80188e0:	6050      	str	r0, [r2, #4]
 80188e2:	189a      	adds	r2, r3, r2
 80188e4:	6893      	ldr	r3, [r2, #8]
 80188e6:	60ca      	str	r2, [r1, #12]
 80188e8:	608b      	str	r3, [r1, #8]
 80188ea:	6091      	str	r1, [r2, #8]
 80188ec:	60d9      	str	r1, [r3, #12]
 80188ee:	e7c4      	b.n	801887a <_free_r+0x5e>
 80188f0:	4666      	mov	r6, ip
 80188f2:	e7d4      	b.n	801889e <_free_r+0x82>
 80188f4:	68c0      	ldr	r0, [r0, #12]
 80188f6:	60e8      	str	r0, [r5, #12]
 80188f8:	6085      	str	r5, [r0, #8]
 80188fa:	e7e1      	b.n	80188c0 <_free_r+0xa4>
 80188fc:	0a5d      	lsrs	r5, r3, #9
 80188fe:	2d04      	cmp	r5, #4
 8018900:	d812      	bhi.n	8018928 <_free_r+0x10c>
 8018902:	0998      	lsrs	r0, r3, #6
 8018904:	3038      	adds	r0, #56	; 0x38
 8018906:	00c6      	lsls	r6, r0, #3
 8018908:	18b6      	adds	r6, r6, r2
 801890a:	68b5      	ldr	r5, [r6, #8]
 801890c:	2703      	movs	r7, #3
 801890e:	42ae      	cmp	r6, r5
 8018910:	d125      	bne.n	801895e <_free_r+0x142>
 8018912:	2301      	movs	r3, #1
 8018914:	1080      	asrs	r0, r0, #2
 8018916:	4083      	lsls	r3, r0
 8018918:	6850      	ldr	r0, [r2, #4]
 801891a:	4303      	orrs	r3, r0
 801891c:	6053      	str	r3, [r2, #4]
 801891e:	60ce      	str	r6, [r1, #12]
 8018920:	608d      	str	r5, [r1, #8]
 8018922:	60b1      	str	r1, [r6, #8]
 8018924:	60e9      	str	r1, [r5, #12]
 8018926:	e7a8      	b.n	801887a <_free_r+0x5e>
 8018928:	2d14      	cmp	r5, #20
 801892a:	d802      	bhi.n	8018932 <_free_r+0x116>
 801892c:	0028      	movs	r0, r5
 801892e:	305b      	adds	r0, #91	; 0x5b
 8018930:	e7e9      	b.n	8018906 <_free_r+0xea>
 8018932:	2d54      	cmp	r5, #84	; 0x54
 8018934:	d802      	bhi.n	801893c <_free_r+0x120>
 8018936:	0b18      	lsrs	r0, r3, #12
 8018938:	306e      	adds	r0, #110	; 0x6e
 801893a:	e7e4      	b.n	8018906 <_free_r+0xea>
 801893c:	20aa      	movs	r0, #170	; 0xaa
 801893e:	0040      	lsls	r0, r0, #1
 8018940:	4285      	cmp	r5, r0
 8018942:	d802      	bhi.n	801894a <_free_r+0x12e>
 8018944:	0bd8      	lsrs	r0, r3, #15
 8018946:	3077      	adds	r0, #119	; 0x77
 8018948:	e7dd      	b.n	8018906 <_free_r+0xea>
 801894a:	4e0d      	ldr	r6, [pc, #52]	; (8018980 <_free_r+0x164>)
 801894c:	207e      	movs	r0, #126	; 0x7e
 801894e:	42b5      	cmp	r5, r6
 8018950:	d8d9      	bhi.n	8018906 <_free_r+0xea>
 8018952:	0c98      	lsrs	r0, r3, #18
 8018954:	307c      	adds	r0, #124	; 0x7c
 8018956:	e7d6      	b.n	8018906 <_free_r+0xea>
 8018958:	68ad      	ldr	r5, [r5, #8]
 801895a:	42ae      	cmp	r6, r5
 801895c:	d003      	beq.n	8018966 <_free_r+0x14a>
 801895e:	686a      	ldr	r2, [r5, #4]
 8018960:	43ba      	bics	r2, r7
 8018962:	429a      	cmp	r2, r3
 8018964:	d8f8      	bhi.n	8018958 <_free_r+0x13c>
 8018966:	68ee      	ldr	r6, [r5, #12]
 8018968:	e7d9      	b.n	801891e <_free_r+0x102>
 801896a:	46c0      	nop			; (mov r8, r8)
 801896c:	2000066c 	.word	0x2000066c
 8018970:	20000a78 	.word	0x20000a78
 8018974:	20006d1c 	.word	0x20006d1c
 8018978:	20000674 	.word	0x20000674
 801897c:	000001ff 	.word	0x000001ff
 8018980:	00000554 	.word	0x00000554

08018984 <rshift>:
 8018984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018986:	0004      	movs	r4, r0
 8018988:	6905      	ldr	r5, [r0, #16]
 801898a:	3414      	adds	r4, #20
 801898c:	114b      	asrs	r3, r1, #5
 801898e:	0026      	movs	r6, r4
 8018990:	429d      	cmp	r5, r3
 8018992:	dd14      	ble.n	80189be <rshift+0x3a>
 8018994:	221f      	movs	r2, #31
 8018996:	00ad      	lsls	r5, r5, #2
 8018998:	009b      	lsls	r3, r3, #2
 801899a:	4011      	ands	r1, r2
 801899c:	1965      	adds	r5, r4, r5
 801899e:	18e3      	adds	r3, r4, r3
 80189a0:	0022      	movs	r2, r4
 80189a2:	2900      	cmp	r1, #0
 80189a4:	d01e      	beq.n	80189e4 <rshift+0x60>
 80189a6:	cb04      	ldmia	r3!, {r2}
 80189a8:	2720      	movs	r7, #32
 80189aa:	40ca      	lsrs	r2, r1
 80189ac:	46a4      	mov	ip, r4
 80189ae:	1a7f      	subs	r7, r7, r1
 80189b0:	4666      	mov	r6, ip
 80189b2:	429d      	cmp	r5, r3
 80189b4:	d80b      	bhi.n	80189ce <rshift+0x4a>
 80189b6:	6032      	str	r2, [r6, #0]
 80189b8:	2a00      	cmp	r2, #0
 80189ba:	d000      	beq.n	80189be <rshift+0x3a>
 80189bc:	3604      	adds	r6, #4
 80189be:	1b33      	subs	r3, r6, r4
 80189c0:	109b      	asrs	r3, r3, #2
 80189c2:	6103      	str	r3, [r0, #16]
 80189c4:	42a6      	cmp	r6, r4
 80189c6:	d101      	bne.n	80189cc <rshift+0x48>
 80189c8:	2300      	movs	r3, #0
 80189ca:	6143      	str	r3, [r0, #20]
 80189cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189ce:	681e      	ldr	r6, [r3, #0]
 80189d0:	40be      	lsls	r6, r7
 80189d2:	4332      	orrs	r2, r6
 80189d4:	4666      	mov	r6, ip
 80189d6:	c604      	stmia	r6!, {r2}
 80189d8:	cb04      	ldmia	r3!, {r2}
 80189da:	46b4      	mov	ip, r6
 80189dc:	40ca      	lsrs	r2, r1
 80189de:	e7e7      	b.n	80189b0 <rshift+0x2c>
 80189e0:	cb02      	ldmia	r3!, {r1}
 80189e2:	c202      	stmia	r2!, {r1}
 80189e4:	0016      	movs	r6, r2
 80189e6:	429d      	cmp	r5, r3
 80189e8:	d8fa      	bhi.n	80189e0 <rshift+0x5c>
 80189ea:	e7e8      	b.n	80189be <rshift+0x3a>

080189ec <__hexdig_fun>:
 80189ec:	0003      	movs	r3, r0
 80189ee:	3b30      	subs	r3, #48	; 0x30
 80189f0:	2b09      	cmp	r3, #9
 80189f2:	d803      	bhi.n	80189fc <__hexdig_fun+0x10>
 80189f4:	3820      	subs	r0, #32
 80189f6:	b2c3      	uxtb	r3, r0
 80189f8:	0018      	movs	r0, r3
 80189fa:	4770      	bx	lr
 80189fc:	0003      	movs	r3, r0
 80189fe:	3b61      	subs	r3, #97	; 0x61
 8018a00:	2b05      	cmp	r3, #5
 8018a02:	d801      	bhi.n	8018a08 <__hexdig_fun+0x1c>
 8018a04:	3847      	subs	r0, #71	; 0x47
 8018a06:	e7f6      	b.n	80189f6 <__hexdig_fun+0xa>
 8018a08:	0002      	movs	r2, r0
 8018a0a:	3a41      	subs	r2, #65	; 0x41
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	2a05      	cmp	r2, #5
 8018a10:	d8f2      	bhi.n	80189f8 <__hexdig_fun+0xc>
 8018a12:	3827      	subs	r0, #39	; 0x27
 8018a14:	e7ef      	b.n	80189f6 <__hexdig_fun+0xa>

08018a16 <__gethex>:
 8018a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a18:	b08d      	sub	sp, #52	; 0x34
 8018a1a:	9005      	str	r0, [sp, #20]
 8018a1c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018a1e:	9109      	str	r1, [sp, #36]	; 0x24
 8018a20:	9202      	str	r2, [sp, #8]
 8018a22:	930a      	str	r3, [sp, #40]	; 0x28
 8018a24:	f000 fadf 	bl	8018fe6 <__localeconv_l>
 8018a28:	6803      	ldr	r3, [r0, #0]
 8018a2a:	0018      	movs	r0, r3
 8018a2c:	9307      	str	r3, [sp, #28]
 8018a2e:	f7e7 fb73 	bl	8000118 <strlen>
 8018a32:	2202      	movs	r2, #2
 8018a34:	9b07      	ldr	r3, [sp, #28]
 8018a36:	4252      	negs	r2, r2
 8018a38:	181b      	adds	r3, r3, r0
 8018a3a:	3b01      	subs	r3, #1
 8018a3c:	781b      	ldrb	r3, [r3, #0]
 8018a3e:	9004      	str	r0, [sp, #16]
 8018a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a44:	6819      	ldr	r1, [r3, #0]
 8018a46:	1c8b      	adds	r3, r1, #2
 8018a48:	1a52      	subs	r2, r2, r1
 8018a4a:	18d1      	adds	r1, r2, r3
 8018a4c:	9301      	str	r3, [sp, #4]
 8018a4e:	9108      	str	r1, [sp, #32]
 8018a50:	9901      	ldr	r1, [sp, #4]
 8018a52:	3301      	adds	r3, #1
 8018a54:	7808      	ldrb	r0, [r1, #0]
 8018a56:	2830      	cmp	r0, #48	; 0x30
 8018a58:	d0f7      	beq.n	8018a4a <__gethex+0x34>
 8018a5a:	f7ff ffc7 	bl	80189ec <__hexdig_fun>
 8018a5e:	1e07      	subs	r7, r0, #0
 8018a60:	d000      	beq.n	8018a64 <__gethex+0x4e>
 8018a62:	e06f      	b.n	8018b44 <__gethex+0x12e>
 8018a64:	9a04      	ldr	r2, [sp, #16]
 8018a66:	9907      	ldr	r1, [sp, #28]
 8018a68:	9801      	ldr	r0, [sp, #4]
 8018a6a:	f7fc fe4b 	bl	8015704 <strncmp>
 8018a6e:	2800      	cmp	r0, #0
 8018a70:	d000      	beq.n	8018a74 <__gethex+0x5e>
 8018a72:	e06d      	b.n	8018b50 <__gethex+0x13a>
 8018a74:	9b01      	ldr	r3, [sp, #4]
 8018a76:	9a04      	ldr	r2, [sp, #16]
 8018a78:	189c      	adds	r4, r3, r2
 8018a7a:	7820      	ldrb	r0, [r4, #0]
 8018a7c:	f7ff ffb6 	bl	80189ec <__hexdig_fun>
 8018a80:	2800      	cmp	r0, #0
 8018a82:	d069      	beq.n	8018b58 <__gethex+0x142>
 8018a84:	9401      	str	r4, [sp, #4]
 8018a86:	9b01      	ldr	r3, [sp, #4]
 8018a88:	7818      	ldrb	r0, [r3, #0]
 8018a8a:	2830      	cmp	r0, #48	; 0x30
 8018a8c:	d009      	beq.n	8018aa2 <__gethex+0x8c>
 8018a8e:	f7ff ffad 	bl	80189ec <__hexdig_fun>
 8018a92:	4243      	negs	r3, r0
 8018a94:	4143      	adcs	r3, r0
 8018a96:	9303      	str	r3, [sp, #12]
 8018a98:	2301      	movs	r3, #1
 8018a9a:	0026      	movs	r6, r4
 8018a9c:	9308      	str	r3, [sp, #32]
 8018a9e:	9c01      	ldr	r4, [sp, #4]
 8018aa0:	e004      	b.n	8018aac <__gethex+0x96>
 8018aa2:	9b01      	ldr	r3, [sp, #4]
 8018aa4:	3301      	adds	r3, #1
 8018aa6:	9301      	str	r3, [sp, #4]
 8018aa8:	e7ed      	b.n	8018a86 <__gethex+0x70>
 8018aaa:	3401      	adds	r4, #1
 8018aac:	7820      	ldrb	r0, [r4, #0]
 8018aae:	f7ff ff9d 	bl	80189ec <__hexdig_fun>
 8018ab2:	2800      	cmp	r0, #0
 8018ab4:	d1f9      	bne.n	8018aaa <__gethex+0x94>
 8018ab6:	9a04      	ldr	r2, [sp, #16]
 8018ab8:	9907      	ldr	r1, [sp, #28]
 8018aba:	0020      	movs	r0, r4
 8018abc:	f7fc fe22 	bl	8015704 <strncmp>
 8018ac0:	2800      	cmp	r0, #0
 8018ac2:	d109      	bne.n	8018ad8 <__gethex+0xc2>
 8018ac4:	2e00      	cmp	r6, #0
 8018ac6:	d10a      	bne.n	8018ade <__gethex+0xc8>
 8018ac8:	9b04      	ldr	r3, [sp, #16]
 8018aca:	18e4      	adds	r4, r4, r3
 8018acc:	0026      	movs	r6, r4
 8018ace:	7820      	ldrb	r0, [r4, #0]
 8018ad0:	f7ff ff8c 	bl	80189ec <__hexdig_fun>
 8018ad4:	2800      	cmp	r0, #0
 8018ad6:	d139      	bne.n	8018b4c <__gethex+0x136>
 8018ad8:	2700      	movs	r7, #0
 8018ada:	42be      	cmp	r6, r7
 8018adc:	d001      	beq.n	8018ae2 <__gethex+0xcc>
 8018ade:	1b37      	subs	r7, r6, r4
 8018ae0:	00bf      	lsls	r7, r7, #2
 8018ae2:	7823      	ldrb	r3, [r4, #0]
 8018ae4:	2b50      	cmp	r3, #80	; 0x50
 8018ae6:	d001      	beq.n	8018aec <__gethex+0xd6>
 8018ae8:	2b70      	cmp	r3, #112	; 0x70
 8018aea:	d142      	bne.n	8018b72 <__gethex+0x15c>
 8018aec:	7863      	ldrb	r3, [r4, #1]
 8018aee:	2b2b      	cmp	r3, #43	; 0x2b
 8018af0:	d034      	beq.n	8018b5c <__gethex+0x146>
 8018af2:	2b2d      	cmp	r3, #45	; 0x2d
 8018af4:	d036      	beq.n	8018b64 <__gethex+0x14e>
 8018af6:	2300      	movs	r3, #0
 8018af8:	1c66      	adds	r6, r4, #1
 8018afa:	9306      	str	r3, [sp, #24]
 8018afc:	7830      	ldrb	r0, [r6, #0]
 8018afe:	f7ff ff75 	bl	80189ec <__hexdig_fun>
 8018b02:	1e43      	subs	r3, r0, #1
 8018b04:	b2db      	uxtb	r3, r3
 8018b06:	2b18      	cmp	r3, #24
 8018b08:	d833      	bhi.n	8018b72 <__gethex+0x15c>
 8018b0a:	3810      	subs	r0, #16
 8018b0c:	0005      	movs	r5, r0
 8018b0e:	3601      	adds	r6, #1
 8018b10:	7830      	ldrb	r0, [r6, #0]
 8018b12:	f7ff ff6b 	bl	80189ec <__hexdig_fun>
 8018b16:	1e43      	subs	r3, r0, #1
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	2b18      	cmp	r3, #24
 8018b1c:	d924      	bls.n	8018b68 <__gethex+0x152>
 8018b1e:	9b06      	ldr	r3, [sp, #24]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d000      	beq.n	8018b26 <__gethex+0x110>
 8018b24:	426d      	negs	r5, r5
 8018b26:	197f      	adds	r7, r7, r5
 8018b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b2a:	601e      	str	r6, [r3, #0]
 8018b2c:	9b03      	ldr	r3, [sp, #12]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d021      	beq.n	8018b76 <__gethex+0x160>
 8018b32:	9b08      	ldr	r3, [sp, #32]
 8018b34:	2606      	movs	r6, #6
 8018b36:	425a      	negs	r2, r3
 8018b38:	4153      	adcs	r3, r2
 8018b3a:	425b      	negs	r3, r3
 8018b3c:	401e      	ands	r6, r3
 8018b3e:	0030      	movs	r0, r6
 8018b40:	b00d      	add	sp, #52	; 0x34
 8018b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b44:	2300      	movs	r3, #0
 8018b46:	9303      	str	r3, [sp, #12]
 8018b48:	001e      	movs	r6, r3
 8018b4a:	e7a8      	b.n	8018a9e <__gethex+0x88>
 8018b4c:	3401      	adds	r4, #1
 8018b4e:	e7be      	b.n	8018ace <__gethex+0xb8>
 8018b50:	9c01      	ldr	r4, [sp, #4]
 8018b52:	2301      	movs	r3, #1
 8018b54:	9303      	str	r3, [sp, #12]
 8018b56:	e7c4      	b.n	8018ae2 <__gethex+0xcc>
 8018b58:	0007      	movs	r7, r0
 8018b5a:	e7fa      	b.n	8018b52 <__gethex+0x13c>
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	9306      	str	r3, [sp, #24]
 8018b60:	1ca6      	adds	r6, r4, #2
 8018b62:	e7cb      	b.n	8018afc <__gethex+0xe6>
 8018b64:	2301      	movs	r3, #1
 8018b66:	e7fa      	b.n	8018b5e <__gethex+0x148>
 8018b68:	230a      	movs	r3, #10
 8018b6a:	435d      	muls	r5, r3
 8018b6c:	182d      	adds	r5, r5, r0
 8018b6e:	3d10      	subs	r5, #16
 8018b70:	e7cd      	b.n	8018b0e <__gethex+0xf8>
 8018b72:	0026      	movs	r6, r4
 8018b74:	e7d8      	b.n	8018b28 <__gethex+0x112>
 8018b76:	9b01      	ldr	r3, [sp, #4]
 8018b78:	9903      	ldr	r1, [sp, #12]
 8018b7a:	1ae3      	subs	r3, r4, r3
 8018b7c:	3b01      	subs	r3, #1
 8018b7e:	2b07      	cmp	r3, #7
 8018b80:	dc47      	bgt.n	8018c12 <__gethex+0x1fc>
 8018b82:	9805      	ldr	r0, [sp, #20]
 8018b84:	f000 fa5e 	bl	8019044 <_Balloc>
 8018b88:	0003      	movs	r3, r0
 8018b8a:	3314      	adds	r3, #20
 8018b8c:	9303      	str	r3, [sp, #12]
 8018b8e:	9308      	str	r3, [sp, #32]
 8018b90:	2300      	movs	r3, #0
 8018b92:	0005      	movs	r5, r0
 8018b94:	001e      	movs	r6, r3
 8018b96:	9306      	str	r3, [sp, #24]
 8018b98:	9b01      	ldr	r3, [sp, #4]
 8018b9a:	42a3      	cmp	r3, r4
 8018b9c:	d33c      	bcc.n	8018c18 <__gethex+0x202>
 8018b9e:	9c08      	ldr	r4, [sp, #32]
 8018ba0:	9b03      	ldr	r3, [sp, #12]
 8018ba2:	c440      	stmia	r4!, {r6}
 8018ba4:	1ae4      	subs	r4, r4, r3
 8018ba6:	10a4      	asrs	r4, r4, #2
 8018ba8:	612c      	str	r4, [r5, #16]
 8018baa:	0030      	movs	r0, r6
 8018bac:	f000 faf8 	bl	80191a0 <__hi0bits>
 8018bb0:	9b02      	ldr	r3, [sp, #8]
 8018bb2:	0164      	lsls	r4, r4, #5
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	1a26      	subs	r6, r4, r0
 8018bb8:	9301      	str	r3, [sp, #4]
 8018bba:	429e      	cmp	r6, r3
 8018bbc:	dd5f      	ble.n	8018c7e <__gethex+0x268>
 8018bbe:	1af6      	subs	r6, r6, r3
 8018bc0:	0031      	movs	r1, r6
 8018bc2:	0028      	movs	r0, r5
 8018bc4:	f000 fde3 	bl	801978e <__any_on>
 8018bc8:	1e04      	subs	r4, r0, #0
 8018bca:	d00f      	beq.n	8018bec <__gethex+0x1d6>
 8018bcc:	2401      	movs	r4, #1
 8018bce:	211f      	movs	r1, #31
 8018bd0:	0020      	movs	r0, r4
 8018bd2:	1e73      	subs	r3, r6, #1
 8018bd4:	4019      	ands	r1, r3
 8018bd6:	4088      	lsls	r0, r1
 8018bd8:	0001      	movs	r1, r0
 8018bda:	115a      	asrs	r2, r3, #5
 8018bdc:	9803      	ldr	r0, [sp, #12]
 8018bde:	0092      	lsls	r2, r2, #2
 8018be0:	5812      	ldr	r2, [r2, r0]
 8018be2:	420a      	tst	r2, r1
 8018be4:	d002      	beq.n	8018bec <__gethex+0x1d6>
 8018be6:	42a3      	cmp	r3, r4
 8018be8:	dc41      	bgt.n	8018c6e <__gethex+0x258>
 8018bea:	2402      	movs	r4, #2
 8018bec:	0031      	movs	r1, r6
 8018bee:	0028      	movs	r0, r5
 8018bf0:	f7ff fec8 	bl	8018984 <rshift>
 8018bf4:	19bf      	adds	r7, r7, r6
 8018bf6:	9b02      	ldr	r3, [sp, #8]
 8018bf8:	689b      	ldr	r3, [r3, #8]
 8018bfa:	9304      	str	r3, [sp, #16]
 8018bfc:	42bb      	cmp	r3, r7
 8018bfe:	da4e      	bge.n	8018c9e <__gethex+0x288>
 8018c00:	0029      	movs	r1, r5
 8018c02:	9805      	ldr	r0, [sp, #20]
 8018c04:	f000 fa46 	bl	8019094 <_Bfree>
 8018c08:	2300      	movs	r3, #0
 8018c0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018c0c:	26a3      	movs	r6, #163	; 0xa3
 8018c0e:	6013      	str	r3, [r2, #0]
 8018c10:	e795      	b.n	8018b3e <__gethex+0x128>
 8018c12:	3101      	adds	r1, #1
 8018c14:	105b      	asrs	r3, r3, #1
 8018c16:	e7b2      	b.n	8018b7e <__gethex+0x168>
 8018c18:	1e63      	subs	r3, r4, #1
 8018c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8018c1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018c1e:	781b      	ldrb	r3, [r3, #0]
 8018c20:	4293      	cmp	r3, r2
 8018c22:	d015      	beq.n	8018c50 <__gethex+0x23a>
 8018c24:	9b06      	ldr	r3, [sp, #24]
 8018c26:	2b20      	cmp	r3, #32
 8018c28:	d105      	bne.n	8018c36 <__gethex+0x220>
 8018c2a:	9b08      	ldr	r3, [sp, #32]
 8018c2c:	601e      	str	r6, [r3, #0]
 8018c2e:	2600      	movs	r6, #0
 8018c30:	3304      	adds	r3, #4
 8018c32:	9308      	str	r3, [sp, #32]
 8018c34:	9606      	str	r6, [sp, #24]
 8018c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c38:	7818      	ldrb	r0, [r3, #0]
 8018c3a:	f7ff fed7 	bl	80189ec <__hexdig_fun>
 8018c3e:	230f      	movs	r3, #15
 8018c40:	4018      	ands	r0, r3
 8018c42:	9b06      	ldr	r3, [sp, #24]
 8018c44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018c46:	4098      	lsls	r0, r3
 8018c48:	3304      	adds	r3, #4
 8018c4a:	4306      	orrs	r6, r0
 8018c4c:	9306      	str	r3, [sp, #24]
 8018c4e:	e7a3      	b.n	8018b98 <__gethex+0x182>
 8018c50:	2301      	movs	r3, #1
 8018c52:	9a04      	ldr	r2, [sp, #16]
 8018c54:	1a9c      	subs	r4, r3, r2
 8018c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c58:	191c      	adds	r4, r3, r4
 8018c5a:	9b01      	ldr	r3, [sp, #4]
 8018c5c:	429c      	cmp	r4, r3
 8018c5e:	d3e1      	bcc.n	8018c24 <__gethex+0x20e>
 8018c60:	9907      	ldr	r1, [sp, #28]
 8018c62:	0020      	movs	r0, r4
 8018c64:	f7fc fd4e 	bl	8015704 <strncmp>
 8018c68:	2800      	cmp	r0, #0
 8018c6a:	d1db      	bne.n	8018c24 <__gethex+0x20e>
 8018c6c:	e794      	b.n	8018b98 <__gethex+0x182>
 8018c6e:	1eb1      	subs	r1, r6, #2
 8018c70:	0028      	movs	r0, r5
 8018c72:	f000 fd8c 	bl	801978e <__any_on>
 8018c76:	2800      	cmp	r0, #0
 8018c78:	d0b7      	beq.n	8018bea <__gethex+0x1d4>
 8018c7a:	2403      	movs	r4, #3
 8018c7c:	e7b6      	b.n	8018bec <__gethex+0x1d6>
 8018c7e:	9b01      	ldr	r3, [sp, #4]
 8018c80:	2400      	movs	r4, #0
 8018c82:	429e      	cmp	r6, r3
 8018c84:	dab7      	bge.n	8018bf6 <__gethex+0x1e0>
 8018c86:	1b9e      	subs	r6, r3, r6
 8018c88:	0029      	movs	r1, r5
 8018c8a:	0032      	movs	r2, r6
 8018c8c:	9805      	ldr	r0, [sp, #20]
 8018c8e:	f000 fbab 	bl	80193e8 <__lshift>
 8018c92:	0003      	movs	r3, r0
 8018c94:	3314      	adds	r3, #20
 8018c96:	0005      	movs	r5, r0
 8018c98:	1bbf      	subs	r7, r7, r6
 8018c9a:	9303      	str	r3, [sp, #12]
 8018c9c:	e7ab      	b.n	8018bf6 <__gethex+0x1e0>
 8018c9e:	9b02      	ldr	r3, [sp, #8]
 8018ca0:	685e      	ldr	r6, [r3, #4]
 8018ca2:	42be      	cmp	r6, r7
 8018ca4:	dd6b      	ble.n	8018d7e <__gethex+0x368>
 8018ca6:	9b01      	ldr	r3, [sp, #4]
 8018ca8:	1bf6      	subs	r6, r6, r7
 8018caa:	42b3      	cmp	r3, r6
 8018cac:	dc32      	bgt.n	8018d14 <__gethex+0x2fe>
 8018cae:	9b02      	ldr	r3, [sp, #8]
 8018cb0:	68db      	ldr	r3, [r3, #12]
 8018cb2:	2b02      	cmp	r3, #2
 8018cb4:	d026      	beq.n	8018d04 <__gethex+0x2ee>
 8018cb6:	2b03      	cmp	r3, #3
 8018cb8:	d028      	beq.n	8018d0c <__gethex+0x2f6>
 8018cba:	2b01      	cmp	r3, #1
 8018cbc:	d119      	bne.n	8018cf2 <__gethex+0x2dc>
 8018cbe:	9b01      	ldr	r3, [sp, #4]
 8018cc0:	42b3      	cmp	r3, r6
 8018cc2:	d116      	bne.n	8018cf2 <__gethex+0x2dc>
 8018cc4:	2b01      	cmp	r3, #1
 8018cc6:	dc0d      	bgt.n	8018ce4 <__gethex+0x2ce>
 8018cc8:	9b02      	ldr	r3, [sp, #8]
 8018cca:	2662      	movs	r6, #98	; 0x62
 8018ccc:	685b      	ldr	r3, [r3, #4]
 8018cce:	9301      	str	r3, [sp, #4]
 8018cd0:	9a01      	ldr	r2, [sp, #4]
 8018cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018cd4:	601a      	str	r2, [r3, #0]
 8018cd6:	2301      	movs	r3, #1
 8018cd8:	9a03      	ldr	r2, [sp, #12]
 8018cda:	612b      	str	r3, [r5, #16]
 8018cdc:	6013      	str	r3, [r2, #0]
 8018cde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018ce0:	601d      	str	r5, [r3, #0]
 8018ce2:	e72c      	b.n	8018b3e <__gethex+0x128>
 8018ce4:	9901      	ldr	r1, [sp, #4]
 8018ce6:	0028      	movs	r0, r5
 8018ce8:	3901      	subs	r1, #1
 8018cea:	f000 fd50 	bl	801978e <__any_on>
 8018cee:	2800      	cmp	r0, #0
 8018cf0:	d1ea      	bne.n	8018cc8 <__gethex+0x2b2>
 8018cf2:	0029      	movs	r1, r5
 8018cf4:	9805      	ldr	r0, [sp, #20]
 8018cf6:	f000 f9cd 	bl	8019094 <_Bfree>
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018cfe:	2650      	movs	r6, #80	; 0x50
 8018d00:	6013      	str	r3, [r2, #0]
 8018d02:	e71c      	b.n	8018b3e <__gethex+0x128>
 8018d04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d0de      	beq.n	8018cc8 <__gethex+0x2b2>
 8018d0a:	e7f2      	b.n	8018cf2 <__gethex+0x2dc>
 8018d0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d1da      	bne.n	8018cc8 <__gethex+0x2b2>
 8018d12:	e7ee      	b.n	8018cf2 <__gethex+0x2dc>
 8018d14:	1e77      	subs	r7, r6, #1
 8018d16:	2c00      	cmp	r4, #0
 8018d18:	d12f      	bne.n	8018d7a <__gethex+0x364>
 8018d1a:	2f00      	cmp	r7, #0
 8018d1c:	d004      	beq.n	8018d28 <__gethex+0x312>
 8018d1e:	0039      	movs	r1, r7
 8018d20:	0028      	movs	r0, r5
 8018d22:	f000 fd34 	bl	801978e <__any_on>
 8018d26:	0004      	movs	r4, r0
 8018d28:	231f      	movs	r3, #31
 8018d2a:	117a      	asrs	r2, r7, #5
 8018d2c:	401f      	ands	r7, r3
 8018d2e:	3b1e      	subs	r3, #30
 8018d30:	40bb      	lsls	r3, r7
 8018d32:	9903      	ldr	r1, [sp, #12]
 8018d34:	0092      	lsls	r2, r2, #2
 8018d36:	5852      	ldr	r2, [r2, r1]
 8018d38:	421a      	tst	r2, r3
 8018d3a:	d001      	beq.n	8018d40 <__gethex+0x32a>
 8018d3c:	2302      	movs	r3, #2
 8018d3e:	431c      	orrs	r4, r3
 8018d40:	9b01      	ldr	r3, [sp, #4]
 8018d42:	0031      	movs	r1, r6
 8018d44:	1b9b      	subs	r3, r3, r6
 8018d46:	2602      	movs	r6, #2
 8018d48:	0028      	movs	r0, r5
 8018d4a:	9301      	str	r3, [sp, #4]
 8018d4c:	f7ff fe1a 	bl	8018984 <rshift>
 8018d50:	9b02      	ldr	r3, [sp, #8]
 8018d52:	685f      	ldr	r7, [r3, #4]
 8018d54:	2c00      	cmp	r4, #0
 8018d56:	d040      	beq.n	8018dda <__gethex+0x3c4>
 8018d58:	9b02      	ldr	r3, [sp, #8]
 8018d5a:	68db      	ldr	r3, [r3, #12]
 8018d5c:	2b02      	cmp	r3, #2
 8018d5e:	d010      	beq.n	8018d82 <__gethex+0x36c>
 8018d60:	2b03      	cmp	r3, #3
 8018d62:	d012      	beq.n	8018d8a <__gethex+0x374>
 8018d64:	2b01      	cmp	r3, #1
 8018d66:	d106      	bne.n	8018d76 <__gethex+0x360>
 8018d68:	07a2      	lsls	r2, r4, #30
 8018d6a:	d504      	bpl.n	8018d76 <__gethex+0x360>
 8018d6c:	9a03      	ldr	r2, [sp, #12]
 8018d6e:	6812      	ldr	r2, [r2, #0]
 8018d70:	4314      	orrs	r4, r2
 8018d72:	421c      	tst	r4, r3
 8018d74:	d10c      	bne.n	8018d90 <__gethex+0x37a>
 8018d76:	2310      	movs	r3, #16
 8018d78:	e02e      	b.n	8018dd8 <__gethex+0x3c2>
 8018d7a:	2401      	movs	r4, #1
 8018d7c:	e7d4      	b.n	8018d28 <__gethex+0x312>
 8018d7e:	2601      	movs	r6, #1
 8018d80:	e7e8      	b.n	8018d54 <__gethex+0x33e>
 8018d82:	2301      	movs	r3, #1
 8018d84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018d86:	1a9b      	subs	r3, r3, r2
 8018d88:	9313      	str	r3, [sp, #76]	; 0x4c
 8018d8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d0f2      	beq.n	8018d76 <__gethex+0x360>
 8018d90:	692c      	ldr	r4, [r5, #16]
 8018d92:	00a3      	lsls	r3, r4, #2
 8018d94:	9304      	str	r3, [sp, #16]
 8018d96:	002b      	movs	r3, r5
 8018d98:	00a2      	lsls	r2, r4, #2
 8018d9a:	3314      	adds	r3, #20
 8018d9c:	1899      	adds	r1, r3, r2
 8018d9e:	2200      	movs	r2, #0
 8018da0:	4694      	mov	ip, r2
 8018da2:	681a      	ldr	r2, [r3, #0]
 8018da4:	1c50      	adds	r0, r2, #1
 8018da6:	d01d      	beq.n	8018de4 <__gethex+0x3ce>
 8018da8:	3201      	adds	r2, #1
 8018daa:	601a      	str	r2, [r3, #0]
 8018dac:	002b      	movs	r3, r5
 8018dae:	3314      	adds	r3, #20
 8018db0:	2e02      	cmp	r6, #2
 8018db2:	d13a      	bne.n	8018e2a <__gethex+0x414>
 8018db4:	9a02      	ldr	r2, [sp, #8]
 8018db6:	9901      	ldr	r1, [sp, #4]
 8018db8:	6812      	ldr	r2, [r2, #0]
 8018dba:	3a01      	subs	r2, #1
 8018dbc:	428a      	cmp	r2, r1
 8018dbe:	d10a      	bne.n	8018dd6 <__gethex+0x3c0>
 8018dc0:	114a      	asrs	r2, r1, #5
 8018dc2:	211f      	movs	r1, #31
 8018dc4:	9801      	ldr	r0, [sp, #4]
 8018dc6:	0092      	lsls	r2, r2, #2
 8018dc8:	4001      	ands	r1, r0
 8018dca:	2001      	movs	r0, #1
 8018dcc:	0004      	movs	r4, r0
 8018dce:	408c      	lsls	r4, r1
 8018dd0:	58d3      	ldr	r3, [r2, r3]
 8018dd2:	4223      	tst	r3, r4
 8018dd4:	d148      	bne.n	8018e68 <__gethex+0x452>
 8018dd6:	2320      	movs	r3, #32
 8018dd8:	431e      	orrs	r6, r3
 8018dda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018ddc:	601d      	str	r5, [r3, #0]
 8018dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018de0:	601f      	str	r7, [r3, #0]
 8018de2:	e6ac      	b.n	8018b3e <__gethex+0x128>
 8018de4:	4662      	mov	r2, ip
 8018de6:	c304      	stmia	r3!, {r2}
 8018de8:	4299      	cmp	r1, r3
 8018dea:	d8da      	bhi.n	8018da2 <__gethex+0x38c>
 8018dec:	68ab      	ldr	r3, [r5, #8]
 8018dee:	429c      	cmp	r4, r3
 8018df0:	db12      	blt.n	8018e18 <__gethex+0x402>
 8018df2:	686b      	ldr	r3, [r5, #4]
 8018df4:	9805      	ldr	r0, [sp, #20]
 8018df6:	1c59      	adds	r1, r3, #1
 8018df8:	f000 f924 	bl	8019044 <_Balloc>
 8018dfc:	0029      	movs	r1, r5
 8018dfe:	692b      	ldr	r3, [r5, #16]
 8018e00:	9003      	str	r0, [sp, #12]
 8018e02:	1c9a      	adds	r2, r3, #2
 8018e04:	0092      	lsls	r2, r2, #2
 8018e06:	310c      	adds	r1, #12
 8018e08:	300c      	adds	r0, #12
 8018e0a:	f7fc fa34 	bl	8015276 <memcpy>
 8018e0e:	0029      	movs	r1, r5
 8018e10:	9805      	ldr	r0, [sp, #20]
 8018e12:	f000 f93f 	bl	8019094 <_Bfree>
 8018e16:	9d03      	ldr	r5, [sp, #12]
 8018e18:	692b      	ldr	r3, [r5, #16]
 8018e1a:	1c5a      	adds	r2, r3, #1
 8018e1c:	612a      	str	r2, [r5, #16]
 8018e1e:	2201      	movs	r2, #1
 8018e20:	3304      	adds	r3, #4
 8018e22:	009b      	lsls	r3, r3, #2
 8018e24:	18eb      	adds	r3, r5, r3
 8018e26:	605a      	str	r2, [r3, #4]
 8018e28:	e7c0      	b.n	8018dac <__gethex+0x396>
 8018e2a:	692a      	ldr	r2, [r5, #16]
 8018e2c:	42a2      	cmp	r2, r4
 8018e2e:	dd0a      	ble.n	8018e46 <__gethex+0x430>
 8018e30:	2101      	movs	r1, #1
 8018e32:	0028      	movs	r0, r5
 8018e34:	f7ff fda6 	bl	8018984 <rshift>
 8018e38:	9b02      	ldr	r3, [sp, #8]
 8018e3a:	3701      	adds	r7, #1
 8018e3c:	689b      	ldr	r3, [r3, #8]
 8018e3e:	2601      	movs	r6, #1
 8018e40:	42bb      	cmp	r3, r7
 8018e42:	dac8      	bge.n	8018dd6 <__gethex+0x3c0>
 8018e44:	e6dc      	b.n	8018c00 <__gethex+0x1ea>
 8018e46:	241f      	movs	r4, #31
 8018e48:	9a01      	ldr	r2, [sp, #4]
 8018e4a:	2601      	movs	r6, #1
 8018e4c:	4022      	ands	r2, r4
 8018e4e:	1e14      	subs	r4, r2, #0
 8018e50:	d0c1      	beq.n	8018dd6 <__gethex+0x3c0>
 8018e52:	9a04      	ldr	r2, [sp, #16]
 8018e54:	189b      	adds	r3, r3, r2
 8018e56:	3b04      	subs	r3, #4
 8018e58:	6818      	ldr	r0, [r3, #0]
 8018e5a:	f000 f9a1 	bl	80191a0 <__hi0bits>
 8018e5e:	2120      	movs	r1, #32
 8018e60:	1b0c      	subs	r4, r1, r4
 8018e62:	42a0      	cmp	r0, r4
 8018e64:	dbe4      	blt.n	8018e30 <__gethex+0x41a>
 8018e66:	e7b6      	b.n	8018dd6 <__gethex+0x3c0>
 8018e68:	0006      	movs	r6, r0
 8018e6a:	e7b4      	b.n	8018dd6 <__gethex+0x3c0>

08018e6c <L_shift>:
 8018e6c:	2308      	movs	r3, #8
 8018e6e:	b570      	push	{r4, r5, r6, lr}
 8018e70:	2520      	movs	r5, #32
 8018e72:	1a9a      	subs	r2, r3, r2
 8018e74:	0092      	lsls	r2, r2, #2
 8018e76:	1aad      	subs	r5, r5, r2
 8018e78:	6843      	ldr	r3, [r0, #4]
 8018e7a:	6806      	ldr	r6, [r0, #0]
 8018e7c:	001c      	movs	r4, r3
 8018e7e:	40ac      	lsls	r4, r5
 8018e80:	40d3      	lsrs	r3, r2
 8018e82:	4334      	orrs	r4, r6
 8018e84:	6004      	str	r4, [r0, #0]
 8018e86:	6043      	str	r3, [r0, #4]
 8018e88:	3004      	adds	r0, #4
 8018e8a:	4288      	cmp	r0, r1
 8018e8c:	d3f4      	bcc.n	8018e78 <L_shift+0xc>
 8018e8e:	bd70      	pop	{r4, r5, r6, pc}

08018e90 <__match>:
 8018e90:	b530      	push	{r4, r5, lr}
 8018e92:	6803      	ldr	r3, [r0, #0]
 8018e94:	780c      	ldrb	r4, [r1, #0]
 8018e96:	3301      	adds	r3, #1
 8018e98:	2c00      	cmp	r4, #0
 8018e9a:	d102      	bne.n	8018ea2 <__match+0x12>
 8018e9c:	6003      	str	r3, [r0, #0]
 8018e9e:	2001      	movs	r0, #1
 8018ea0:	bd30      	pop	{r4, r5, pc}
 8018ea2:	781a      	ldrb	r2, [r3, #0]
 8018ea4:	0015      	movs	r5, r2
 8018ea6:	3d41      	subs	r5, #65	; 0x41
 8018ea8:	2d19      	cmp	r5, #25
 8018eaa:	d800      	bhi.n	8018eae <__match+0x1e>
 8018eac:	3220      	adds	r2, #32
 8018eae:	3101      	adds	r1, #1
 8018eb0:	42a2      	cmp	r2, r4
 8018eb2:	d0ef      	beq.n	8018e94 <__match+0x4>
 8018eb4:	2000      	movs	r0, #0
 8018eb6:	e7f3      	b.n	8018ea0 <__match+0x10>

08018eb8 <__hexnan>:
 8018eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eba:	b08b      	sub	sp, #44	; 0x2c
 8018ebc:	9201      	str	r2, [sp, #4]
 8018ebe:	680a      	ldr	r2, [r1, #0]
 8018ec0:	9901      	ldr	r1, [sp, #4]
 8018ec2:	1153      	asrs	r3, r2, #5
 8018ec4:	009b      	lsls	r3, r3, #2
 8018ec6:	18cb      	adds	r3, r1, r3
 8018ec8:	9304      	str	r3, [sp, #16]
 8018eca:	231f      	movs	r3, #31
 8018ecc:	401a      	ands	r2, r3
 8018ece:	9008      	str	r0, [sp, #32]
 8018ed0:	9206      	str	r2, [sp, #24]
 8018ed2:	d002      	beq.n	8018eda <__hexnan+0x22>
 8018ed4:	9b04      	ldr	r3, [sp, #16]
 8018ed6:	3304      	adds	r3, #4
 8018ed8:	9304      	str	r3, [sp, #16]
 8018eda:	9b04      	ldr	r3, [sp, #16]
 8018edc:	2500      	movs	r5, #0
 8018ede:	1f1e      	subs	r6, r3, #4
 8018ee0:	0037      	movs	r7, r6
 8018ee2:	0034      	movs	r4, r6
 8018ee4:	9b08      	ldr	r3, [sp, #32]
 8018ee6:	6035      	str	r5, [r6, #0]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	9507      	str	r5, [sp, #28]
 8018eec:	9305      	str	r3, [sp, #20]
 8018eee:	9502      	str	r5, [sp, #8]
 8018ef0:	9b05      	ldr	r3, [sp, #20]
 8018ef2:	3301      	adds	r3, #1
 8018ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8018ef6:	9b05      	ldr	r3, [sp, #20]
 8018ef8:	785b      	ldrb	r3, [r3, #1]
 8018efa:	9303      	str	r3, [sp, #12]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d028      	beq.n	8018f52 <__hexnan+0x9a>
 8018f00:	9803      	ldr	r0, [sp, #12]
 8018f02:	f7ff fd73 	bl	80189ec <__hexdig_fun>
 8018f06:	2800      	cmp	r0, #0
 8018f08:	d145      	bne.n	8018f96 <__hexnan+0xde>
 8018f0a:	9b03      	ldr	r3, [sp, #12]
 8018f0c:	2b20      	cmp	r3, #32
 8018f0e:	d819      	bhi.n	8018f44 <__hexnan+0x8c>
 8018f10:	9b02      	ldr	r3, [sp, #8]
 8018f12:	9a07      	ldr	r2, [sp, #28]
 8018f14:	4293      	cmp	r3, r2
 8018f16:	dd12      	ble.n	8018f3e <__hexnan+0x86>
 8018f18:	42bc      	cmp	r4, r7
 8018f1a:	d206      	bcs.n	8018f2a <__hexnan+0x72>
 8018f1c:	2d07      	cmp	r5, #7
 8018f1e:	dc04      	bgt.n	8018f2a <__hexnan+0x72>
 8018f20:	002a      	movs	r2, r5
 8018f22:	0039      	movs	r1, r7
 8018f24:	0020      	movs	r0, r4
 8018f26:	f7ff ffa1 	bl	8018e6c <L_shift>
 8018f2a:	9b01      	ldr	r3, [sp, #4]
 8018f2c:	2508      	movs	r5, #8
 8018f2e:	429c      	cmp	r4, r3
 8018f30:	d905      	bls.n	8018f3e <__hexnan+0x86>
 8018f32:	1f27      	subs	r7, r4, #4
 8018f34:	2500      	movs	r5, #0
 8018f36:	003c      	movs	r4, r7
 8018f38:	9b02      	ldr	r3, [sp, #8]
 8018f3a:	603d      	str	r5, [r7, #0]
 8018f3c:	9307      	str	r3, [sp, #28]
 8018f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f40:	9305      	str	r3, [sp, #20]
 8018f42:	e7d5      	b.n	8018ef0 <__hexnan+0x38>
 8018f44:	9b03      	ldr	r3, [sp, #12]
 8018f46:	2b29      	cmp	r3, #41	; 0x29
 8018f48:	d14a      	bne.n	8018fe0 <__hexnan+0x128>
 8018f4a:	9b05      	ldr	r3, [sp, #20]
 8018f4c:	9a08      	ldr	r2, [sp, #32]
 8018f4e:	3302      	adds	r3, #2
 8018f50:	6013      	str	r3, [r2, #0]
 8018f52:	9b02      	ldr	r3, [sp, #8]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d043      	beq.n	8018fe0 <__hexnan+0x128>
 8018f58:	42bc      	cmp	r4, r7
 8018f5a:	d206      	bcs.n	8018f6a <__hexnan+0xb2>
 8018f5c:	2d07      	cmp	r5, #7
 8018f5e:	dc04      	bgt.n	8018f6a <__hexnan+0xb2>
 8018f60:	002a      	movs	r2, r5
 8018f62:	0039      	movs	r1, r7
 8018f64:	0020      	movs	r0, r4
 8018f66:	f7ff ff81 	bl	8018e6c <L_shift>
 8018f6a:	9b01      	ldr	r3, [sp, #4]
 8018f6c:	429c      	cmp	r4, r3
 8018f6e:	d926      	bls.n	8018fbe <__hexnan+0x106>
 8018f70:	cc04      	ldmia	r4!, {r2}
 8018f72:	601a      	str	r2, [r3, #0]
 8018f74:	3304      	adds	r3, #4
 8018f76:	42a6      	cmp	r6, r4
 8018f78:	d2fa      	bcs.n	8018f70 <__hexnan+0xb8>
 8018f7a:	2200      	movs	r2, #0
 8018f7c:	c304      	stmia	r3!, {r2}
 8018f7e:	429e      	cmp	r6, r3
 8018f80:	d2fc      	bcs.n	8018f7c <__hexnan+0xc4>
 8018f82:	6833      	ldr	r3, [r6, #0]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d104      	bne.n	8018f92 <__hexnan+0xda>
 8018f88:	9b01      	ldr	r3, [sp, #4]
 8018f8a:	429e      	cmp	r6, r3
 8018f8c:	d126      	bne.n	8018fdc <__hexnan+0x124>
 8018f8e:	2301      	movs	r3, #1
 8018f90:	6033      	str	r3, [r6, #0]
 8018f92:	2005      	movs	r0, #5
 8018f94:	e025      	b.n	8018fe2 <__hexnan+0x12a>
 8018f96:	9b02      	ldr	r3, [sp, #8]
 8018f98:	3501      	adds	r5, #1
 8018f9a:	3301      	adds	r3, #1
 8018f9c:	9302      	str	r3, [sp, #8]
 8018f9e:	2d08      	cmp	r5, #8
 8018fa0:	dd06      	ble.n	8018fb0 <__hexnan+0xf8>
 8018fa2:	9b01      	ldr	r3, [sp, #4]
 8018fa4:	429c      	cmp	r4, r3
 8018fa6:	d9ca      	bls.n	8018f3e <__hexnan+0x86>
 8018fa8:	2300      	movs	r3, #0
 8018faa:	2501      	movs	r5, #1
 8018fac:	3c04      	subs	r4, #4
 8018fae:	6023      	str	r3, [r4, #0]
 8018fb0:	220f      	movs	r2, #15
 8018fb2:	6823      	ldr	r3, [r4, #0]
 8018fb4:	4010      	ands	r0, r2
 8018fb6:	011b      	lsls	r3, r3, #4
 8018fb8:	4318      	orrs	r0, r3
 8018fba:	6020      	str	r0, [r4, #0]
 8018fbc:	e7bf      	b.n	8018f3e <__hexnan+0x86>
 8018fbe:	9b06      	ldr	r3, [sp, #24]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d0de      	beq.n	8018f82 <__hexnan+0xca>
 8018fc4:	2120      	movs	r1, #32
 8018fc6:	9a06      	ldr	r2, [sp, #24]
 8018fc8:	9b04      	ldr	r3, [sp, #16]
 8018fca:	1a89      	subs	r1, r1, r2
 8018fcc:	2201      	movs	r2, #1
 8018fce:	4252      	negs	r2, r2
 8018fd0:	40ca      	lsrs	r2, r1
 8018fd2:	3b04      	subs	r3, #4
 8018fd4:	6819      	ldr	r1, [r3, #0]
 8018fd6:	400a      	ands	r2, r1
 8018fd8:	601a      	str	r2, [r3, #0]
 8018fda:	e7d2      	b.n	8018f82 <__hexnan+0xca>
 8018fdc:	3e04      	subs	r6, #4
 8018fde:	e7d0      	b.n	8018f82 <__hexnan+0xca>
 8018fe0:	2004      	movs	r0, #4
 8018fe2:	b00b      	add	sp, #44	; 0x2c
 8018fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018fe6 <__localeconv_l>:
 8018fe6:	30f0      	adds	r0, #240	; 0xf0
 8018fe8:	4770      	bx	lr
	...

08018fec <_localeconv_r>:
 8018fec:	4b03      	ldr	r3, [pc, #12]	; (8018ffc <_localeconv_r+0x10>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018ff2:	2800      	cmp	r0, #0
 8018ff4:	d100      	bne.n	8018ff8 <_localeconv_r+0xc>
 8018ff6:	4802      	ldr	r0, [pc, #8]	; (8019000 <_localeconv_r+0x14>)
 8018ff8:	30f0      	adds	r0, #240	; 0xf0
 8018ffa:	4770      	bx	lr
 8018ffc:	200000d0 	.word	0x200000d0
 8019000:	20000500 	.word	0x20000500

08019004 <__retarget_lock_acquire_recursive>:
 8019004:	4770      	bx	lr

08019006 <__retarget_lock_release_recursive>:
 8019006:	4770      	bx	lr

08019008 <memchr>:
 8019008:	b2c9      	uxtb	r1, r1
 801900a:	1882      	adds	r2, r0, r2
 801900c:	4290      	cmp	r0, r2
 801900e:	d101      	bne.n	8019014 <memchr+0xc>
 8019010:	2000      	movs	r0, #0
 8019012:	4770      	bx	lr
 8019014:	7803      	ldrb	r3, [r0, #0]
 8019016:	428b      	cmp	r3, r1
 8019018:	d0fb      	beq.n	8019012 <memchr+0xa>
 801901a:	3001      	adds	r0, #1
 801901c:	e7f6      	b.n	801900c <memchr+0x4>

0801901e <memmove>:
 801901e:	b510      	push	{r4, lr}
 8019020:	4288      	cmp	r0, r1
 8019022:	d902      	bls.n	801902a <memmove+0xc>
 8019024:	188b      	adds	r3, r1, r2
 8019026:	4298      	cmp	r0, r3
 8019028:	d303      	bcc.n	8019032 <memmove+0x14>
 801902a:	2300      	movs	r3, #0
 801902c:	e007      	b.n	801903e <memmove+0x20>
 801902e:	5c8b      	ldrb	r3, [r1, r2]
 8019030:	5483      	strb	r3, [r0, r2]
 8019032:	3a01      	subs	r2, #1
 8019034:	d2fb      	bcs.n	801902e <memmove+0x10>
 8019036:	bd10      	pop	{r4, pc}
 8019038:	5ccc      	ldrb	r4, [r1, r3]
 801903a:	54c4      	strb	r4, [r0, r3]
 801903c:	3301      	adds	r3, #1
 801903e:	429a      	cmp	r2, r3
 8019040:	d1fa      	bne.n	8019038 <memmove+0x1a>
 8019042:	e7f8      	b.n	8019036 <memmove+0x18>

08019044 <_Balloc>:
 8019044:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8019046:	b570      	push	{r4, r5, r6, lr}
 8019048:	0004      	movs	r4, r0
 801904a:	000d      	movs	r5, r1
 801904c:	2b00      	cmp	r3, #0
 801904e:	d012      	beq.n	8019076 <_Balloc+0x32>
 8019050:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019052:	00ab      	lsls	r3, r5, #2
 8019054:	18d3      	adds	r3, r2, r3
 8019056:	6818      	ldr	r0, [r3, #0]
 8019058:	2800      	cmp	r0, #0
 801905a:	d115      	bne.n	8019088 <_Balloc+0x44>
 801905c:	2101      	movs	r1, #1
 801905e:	000e      	movs	r6, r1
 8019060:	40ae      	lsls	r6, r5
 8019062:	1d72      	adds	r2, r6, #5
 8019064:	0092      	lsls	r2, r2, #2
 8019066:	0020      	movs	r0, r4
 8019068:	f000 fcbe 	bl	80199e8 <_calloc_r>
 801906c:	2800      	cmp	r0, #0
 801906e:	d009      	beq.n	8019084 <_Balloc+0x40>
 8019070:	6045      	str	r5, [r0, #4]
 8019072:	6086      	str	r6, [r0, #8]
 8019074:	e00a      	b.n	801908c <_Balloc+0x48>
 8019076:	2221      	movs	r2, #33	; 0x21
 8019078:	2104      	movs	r1, #4
 801907a:	f000 fcb5 	bl	80199e8 <_calloc_r>
 801907e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8019080:	2800      	cmp	r0, #0
 8019082:	d1e5      	bne.n	8019050 <_Balloc+0xc>
 8019084:	2000      	movs	r0, #0
 8019086:	bd70      	pop	{r4, r5, r6, pc}
 8019088:	6802      	ldr	r2, [r0, #0]
 801908a:	601a      	str	r2, [r3, #0]
 801908c:	2300      	movs	r3, #0
 801908e:	6103      	str	r3, [r0, #16]
 8019090:	60c3      	str	r3, [r0, #12]
 8019092:	e7f8      	b.n	8019086 <_Balloc+0x42>

08019094 <_Bfree>:
 8019094:	2900      	cmp	r1, #0
 8019096:	d006      	beq.n	80190a6 <_Bfree+0x12>
 8019098:	684b      	ldr	r3, [r1, #4]
 801909a:	009a      	lsls	r2, r3, #2
 801909c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801909e:	189b      	adds	r3, r3, r2
 80190a0:	681a      	ldr	r2, [r3, #0]
 80190a2:	600a      	str	r2, [r1, #0]
 80190a4:	6019      	str	r1, [r3, #0]
 80190a6:	4770      	bx	lr

080190a8 <__multadd>:
 80190a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190aa:	001e      	movs	r6, r3
 80190ac:	2314      	movs	r3, #20
 80190ae:	469c      	mov	ip, r3
 80190b0:	0007      	movs	r7, r0
 80190b2:	000c      	movs	r4, r1
 80190b4:	2000      	movs	r0, #0
 80190b6:	690d      	ldr	r5, [r1, #16]
 80190b8:	448c      	add	ip, r1
 80190ba:	4663      	mov	r3, ip
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	3001      	adds	r0, #1
 80190c0:	b299      	uxth	r1, r3
 80190c2:	4663      	mov	r3, ip
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	4351      	muls	r1, r2
 80190c8:	0c1b      	lsrs	r3, r3, #16
 80190ca:	4353      	muls	r3, r2
 80190cc:	1989      	adds	r1, r1, r6
 80190ce:	0c0e      	lsrs	r6, r1, #16
 80190d0:	199b      	adds	r3, r3, r6
 80190d2:	b289      	uxth	r1, r1
 80190d4:	0c1e      	lsrs	r6, r3, #16
 80190d6:	041b      	lsls	r3, r3, #16
 80190d8:	185b      	adds	r3, r3, r1
 80190da:	4661      	mov	r1, ip
 80190dc:	c108      	stmia	r1!, {r3}
 80190de:	468c      	mov	ip, r1
 80190e0:	4285      	cmp	r5, r0
 80190e2:	dcea      	bgt.n	80190ba <__multadd+0x12>
 80190e4:	2e00      	cmp	r6, #0
 80190e6:	d01b      	beq.n	8019120 <__multadd+0x78>
 80190e8:	68a3      	ldr	r3, [r4, #8]
 80190ea:	42ab      	cmp	r3, r5
 80190ec:	dc12      	bgt.n	8019114 <__multadd+0x6c>
 80190ee:	6863      	ldr	r3, [r4, #4]
 80190f0:	0038      	movs	r0, r7
 80190f2:	1c59      	adds	r1, r3, #1
 80190f4:	f7ff ffa6 	bl	8019044 <_Balloc>
 80190f8:	0021      	movs	r1, r4
 80190fa:	6923      	ldr	r3, [r4, #16]
 80190fc:	9001      	str	r0, [sp, #4]
 80190fe:	1c9a      	adds	r2, r3, #2
 8019100:	0092      	lsls	r2, r2, #2
 8019102:	310c      	adds	r1, #12
 8019104:	300c      	adds	r0, #12
 8019106:	f7fc f8b6 	bl	8015276 <memcpy>
 801910a:	0021      	movs	r1, r4
 801910c:	0038      	movs	r0, r7
 801910e:	f7ff ffc1 	bl	8019094 <_Bfree>
 8019112:	9c01      	ldr	r4, [sp, #4]
 8019114:	1d2b      	adds	r3, r5, #4
 8019116:	009b      	lsls	r3, r3, #2
 8019118:	18e3      	adds	r3, r4, r3
 801911a:	3501      	adds	r5, #1
 801911c:	605e      	str	r6, [r3, #4]
 801911e:	6125      	str	r5, [r4, #16]
 8019120:	0020      	movs	r0, r4
 8019122:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08019124 <__s2b>:
 8019124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019126:	0006      	movs	r6, r0
 8019128:	0018      	movs	r0, r3
 801912a:	000c      	movs	r4, r1
 801912c:	3008      	adds	r0, #8
 801912e:	2109      	movs	r1, #9
 8019130:	9301      	str	r3, [sp, #4]
 8019132:	0015      	movs	r5, r2
 8019134:	f7e7 f896 	bl	8000264 <__divsi3>
 8019138:	2301      	movs	r3, #1
 801913a:	2100      	movs	r1, #0
 801913c:	4283      	cmp	r3, r0
 801913e:	db1f      	blt.n	8019180 <__s2b+0x5c>
 8019140:	0030      	movs	r0, r6
 8019142:	f7ff ff7f 	bl	8019044 <_Balloc>
 8019146:	9b08      	ldr	r3, [sp, #32]
 8019148:	6143      	str	r3, [r0, #20]
 801914a:	2301      	movs	r3, #1
 801914c:	6103      	str	r3, [r0, #16]
 801914e:	2d09      	cmp	r5, #9
 8019150:	dd19      	ble.n	8019186 <__s2b+0x62>
 8019152:	0023      	movs	r3, r4
 8019154:	3309      	adds	r3, #9
 8019156:	001f      	movs	r7, r3
 8019158:	9300      	str	r3, [sp, #0]
 801915a:	1964      	adds	r4, r4, r5
 801915c:	783b      	ldrb	r3, [r7, #0]
 801915e:	0001      	movs	r1, r0
 8019160:	3b30      	subs	r3, #48	; 0x30
 8019162:	220a      	movs	r2, #10
 8019164:	0030      	movs	r0, r6
 8019166:	3701      	adds	r7, #1
 8019168:	f7ff ff9e 	bl	80190a8 <__multadd>
 801916c:	42a7      	cmp	r7, r4
 801916e:	d1f5      	bne.n	801915c <__s2b+0x38>
 8019170:	9b00      	ldr	r3, [sp, #0]
 8019172:	195c      	adds	r4, r3, r5
 8019174:	3c08      	subs	r4, #8
 8019176:	002f      	movs	r7, r5
 8019178:	9b01      	ldr	r3, [sp, #4]
 801917a:	429f      	cmp	r7, r3
 801917c:	db06      	blt.n	801918c <__s2b+0x68>
 801917e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019180:	005b      	lsls	r3, r3, #1
 8019182:	3101      	adds	r1, #1
 8019184:	e7da      	b.n	801913c <__s2b+0x18>
 8019186:	340a      	adds	r4, #10
 8019188:	2509      	movs	r5, #9
 801918a:	e7f4      	b.n	8019176 <__s2b+0x52>
 801918c:	1b63      	subs	r3, r4, r5
 801918e:	5ddb      	ldrb	r3, [r3, r7]
 8019190:	0001      	movs	r1, r0
 8019192:	3b30      	subs	r3, #48	; 0x30
 8019194:	220a      	movs	r2, #10
 8019196:	0030      	movs	r0, r6
 8019198:	f7ff ff86 	bl	80190a8 <__multadd>
 801919c:	3701      	adds	r7, #1
 801919e:	e7eb      	b.n	8019178 <__s2b+0x54>

080191a0 <__hi0bits>:
 80191a0:	0003      	movs	r3, r0
 80191a2:	0c02      	lsrs	r2, r0, #16
 80191a4:	2000      	movs	r0, #0
 80191a6:	4282      	cmp	r2, r0
 80191a8:	d101      	bne.n	80191ae <__hi0bits+0xe>
 80191aa:	041b      	lsls	r3, r3, #16
 80191ac:	3010      	adds	r0, #16
 80191ae:	0e1a      	lsrs	r2, r3, #24
 80191b0:	d101      	bne.n	80191b6 <__hi0bits+0x16>
 80191b2:	3008      	adds	r0, #8
 80191b4:	021b      	lsls	r3, r3, #8
 80191b6:	0f1a      	lsrs	r2, r3, #28
 80191b8:	d101      	bne.n	80191be <__hi0bits+0x1e>
 80191ba:	3004      	adds	r0, #4
 80191bc:	011b      	lsls	r3, r3, #4
 80191be:	0f9a      	lsrs	r2, r3, #30
 80191c0:	d101      	bne.n	80191c6 <__hi0bits+0x26>
 80191c2:	3002      	adds	r0, #2
 80191c4:	009b      	lsls	r3, r3, #2
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	db03      	blt.n	80191d2 <__hi0bits+0x32>
 80191ca:	3001      	adds	r0, #1
 80191cc:	005b      	lsls	r3, r3, #1
 80191ce:	d400      	bmi.n	80191d2 <__hi0bits+0x32>
 80191d0:	2020      	movs	r0, #32
 80191d2:	4770      	bx	lr

080191d4 <__lo0bits>:
 80191d4:	2207      	movs	r2, #7
 80191d6:	6803      	ldr	r3, [r0, #0]
 80191d8:	b510      	push	{r4, lr}
 80191da:	0001      	movs	r1, r0
 80191dc:	401a      	ands	r2, r3
 80191de:	d00d      	beq.n	80191fc <__lo0bits+0x28>
 80191e0:	2401      	movs	r4, #1
 80191e2:	2000      	movs	r0, #0
 80191e4:	4223      	tst	r3, r4
 80191e6:	d105      	bne.n	80191f4 <__lo0bits+0x20>
 80191e8:	3002      	adds	r0, #2
 80191ea:	4203      	tst	r3, r0
 80191ec:	d003      	beq.n	80191f6 <__lo0bits+0x22>
 80191ee:	40e3      	lsrs	r3, r4
 80191f0:	0020      	movs	r0, r4
 80191f2:	600b      	str	r3, [r1, #0]
 80191f4:	bd10      	pop	{r4, pc}
 80191f6:	089b      	lsrs	r3, r3, #2
 80191f8:	600b      	str	r3, [r1, #0]
 80191fa:	e7fb      	b.n	80191f4 <__lo0bits+0x20>
 80191fc:	b29c      	uxth	r4, r3
 80191fe:	0010      	movs	r0, r2
 8019200:	2c00      	cmp	r4, #0
 8019202:	d101      	bne.n	8019208 <__lo0bits+0x34>
 8019204:	2010      	movs	r0, #16
 8019206:	0c1b      	lsrs	r3, r3, #16
 8019208:	b2da      	uxtb	r2, r3
 801920a:	2a00      	cmp	r2, #0
 801920c:	d101      	bne.n	8019212 <__lo0bits+0x3e>
 801920e:	3008      	adds	r0, #8
 8019210:	0a1b      	lsrs	r3, r3, #8
 8019212:	071a      	lsls	r2, r3, #28
 8019214:	d101      	bne.n	801921a <__lo0bits+0x46>
 8019216:	3004      	adds	r0, #4
 8019218:	091b      	lsrs	r3, r3, #4
 801921a:	079a      	lsls	r2, r3, #30
 801921c:	d101      	bne.n	8019222 <__lo0bits+0x4e>
 801921e:	3002      	adds	r0, #2
 8019220:	089b      	lsrs	r3, r3, #2
 8019222:	07da      	lsls	r2, r3, #31
 8019224:	d4e8      	bmi.n	80191f8 <__lo0bits+0x24>
 8019226:	085b      	lsrs	r3, r3, #1
 8019228:	d001      	beq.n	801922e <__lo0bits+0x5a>
 801922a:	3001      	adds	r0, #1
 801922c:	e7e4      	b.n	80191f8 <__lo0bits+0x24>
 801922e:	2020      	movs	r0, #32
 8019230:	e7e0      	b.n	80191f4 <__lo0bits+0x20>

08019232 <__i2b>:
 8019232:	b510      	push	{r4, lr}
 8019234:	000c      	movs	r4, r1
 8019236:	2101      	movs	r1, #1
 8019238:	f7ff ff04 	bl	8019044 <_Balloc>
 801923c:	2301      	movs	r3, #1
 801923e:	6144      	str	r4, [r0, #20]
 8019240:	6103      	str	r3, [r0, #16]
 8019242:	bd10      	pop	{r4, pc}

08019244 <__multiply>:
 8019244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019246:	690b      	ldr	r3, [r1, #16]
 8019248:	0014      	movs	r4, r2
 801924a:	6912      	ldr	r2, [r2, #16]
 801924c:	b089      	sub	sp, #36	; 0x24
 801924e:	000d      	movs	r5, r1
 8019250:	4293      	cmp	r3, r2
 8019252:	da01      	bge.n	8019258 <__multiply+0x14>
 8019254:	0025      	movs	r5, r4
 8019256:	000c      	movs	r4, r1
 8019258:	692f      	ldr	r7, [r5, #16]
 801925a:	6926      	ldr	r6, [r4, #16]
 801925c:	6869      	ldr	r1, [r5, #4]
 801925e:	19bb      	adds	r3, r7, r6
 8019260:	9302      	str	r3, [sp, #8]
 8019262:	68ab      	ldr	r3, [r5, #8]
 8019264:	19ba      	adds	r2, r7, r6
 8019266:	4293      	cmp	r3, r2
 8019268:	da00      	bge.n	801926c <__multiply+0x28>
 801926a:	3101      	adds	r1, #1
 801926c:	f7ff feea 	bl	8019044 <_Balloc>
 8019270:	0002      	movs	r2, r0
 8019272:	19bb      	adds	r3, r7, r6
 8019274:	3214      	adds	r2, #20
 8019276:	009b      	lsls	r3, r3, #2
 8019278:	18d3      	adds	r3, r2, r3
 801927a:	469c      	mov	ip, r3
 801927c:	2100      	movs	r1, #0
 801927e:	0013      	movs	r3, r2
 8019280:	9004      	str	r0, [sp, #16]
 8019282:	4563      	cmp	r3, ip
 8019284:	d31d      	bcc.n	80192c2 <__multiply+0x7e>
 8019286:	3514      	adds	r5, #20
 8019288:	00bf      	lsls	r7, r7, #2
 801928a:	19eb      	adds	r3, r5, r7
 801928c:	3414      	adds	r4, #20
 801928e:	00b6      	lsls	r6, r6, #2
 8019290:	9305      	str	r3, [sp, #20]
 8019292:	19a3      	adds	r3, r4, r6
 8019294:	9503      	str	r5, [sp, #12]
 8019296:	9401      	str	r4, [sp, #4]
 8019298:	9307      	str	r3, [sp, #28]
 801929a:	9b07      	ldr	r3, [sp, #28]
 801929c:	9901      	ldr	r1, [sp, #4]
 801929e:	4299      	cmp	r1, r3
 80192a0:	d311      	bcc.n	80192c6 <__multiply+0x82>
 80192a2:	9b02      	ldr	r3, [sp, #8]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	dd06      	ble.n	80192b6 <__multiply+0x72>
 80192a8:	2304      	movs	r3, #4
 80192aa:	425b      	negs	r3, r3
 80192ac:	449c      	add	ip, r3
 80192ae:	4663      	mov	r3, ip
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d051      	beq.n	801935a <__multiply+0x116>
 80192b6:	9b04      	ldr	r3, [sp, #16]
 80192b8:	9a02      	ldr	r2, [sp, #8]
 80192ba:	0018      	movs	r0, r3
 80192bc:	611a      	str	r2, [r3, #16]
 80192be:	b009      	add	sp, #36	; 0x24
 80192c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192c2:	c302      	stmia	r3!, {r1}
 80192c4:	e7dd      	b.n	8019282 <__multiply+0x3e>
 80192c6:	9b01      	ldr	r3, [sp, #4]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	b298      	uxth	r0, r3
 80192cc:	2800      	cmp	r0, #0
 80192ce:	d01c      	beq.n	801930a <__multiply+0xc6>
 80192d0:	0015      	movs	r5, r2
 80192d2:	2600      	movs	r6, #0
 80192d4:	9f03      	ldr	r7, [sp, #12]
 80192d6:	cf02      	ldmia	r7!, {r1}
 80192d8:	682c      	ldr	r4, [r5, #0]
 80192da:	b28b      	uxth	r3, r1
 80192dc:	4343      	muls	r3, r0
 80192de:	0c09      	lsrs	r1, r1, #16
 80192e0:	4341      	muls	r1, r0
 80192e2:	b2a4      	uxth	r4, r4
 80192e4:	191b      	adds	r3, r3, r4
 80192e6:	199b      	adds	r3, r3, r6
 80192e8:	000e      	movs	r6, r1
 80192ea:	6829      	ldr	r1, [r5, #0]
 80192ec:	9506      	str	r5, [sp, #24]
 80192ee:	0c09      	lsrs	r1, r1, #16
 80192f0:	1871      	adds	r1, r6, r1
 80192f2:	0c1e      	lsrs	r6, r3, #16
 80192f4:	1989      	adds	r1, r1, r6
 80192f6:	0c0e      	lsrs	r6, r1, #16
 80192f8:	b29b      	uxth	r3, r3
 80192fa:	0409      	lsls	r1, r1, #16
 80192fc:	430b      	orrs	r3, r1
 80192fe:	c508      	stmia	r5!, {r3}
 8019300:	9b05      	ldr	r3, [sp, #20]
 8019302:	42bb      	cmp	r3, r7
 8019304:	d8e7      	bhi.n	80192d6 <__multiply+0x92>
 8019306:	9b06      	ldr	r3, [sp, #24]
 8019308:	605e      	str	r6, [r3, #4]
 801930a:	9b01      	ldr	r3, [sp, #4]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	0c1d      	lsrs	r5, r3, #16
 8019310:	d01e      	beq.n	8019350 <__multiply+0x10c>
 8019312:	0010      	movs	r0, r2
 8019314:	2700      	movs	r7, #0
 8019316:	6813      	ldr	r3, [r2, #0]
 8019318:	9e03      	ldr	r6, [sp, #12]
 801931a:	6831      	ldr	r1, [r6, #0]
 801931c:	6804      	ldr	r4, [r0, #0]
 801931e:	b289      	uxth	r1, r1
 8019320:	4369      	muls	r1, r5
 8019322:	0c24      	lsrs	r4, r4, #16
 8019324:	1909      	adds	r1, r1, r4
 8019326:	19c9      	adds	r1, r1, r7
 8019328:	040f      	lsls	r7, r1, #16
 801932a:	b29b      	uxth	r3, r3
 801932c:	433b      	orrs	r3, r7
 801932e:	6003      	str	r3, [r0, #0]
 8019330:	ce80      	ldmia	r6!, {r7}
 8019332:	6843      	ldr	r3, [r0, #4]
 8019334:	0c3f      	lsrs	r7, r7, #16
 8019336:	436f      	muls	r7, r5
 8019338:	b29b      	uxth	r3, r3
 801933a:	18fb      	adds	r3, r7, r3
 801933c:	0c09      	lsrs	r1, r1, #16
 801933e:	185b      	adds	r3, r3, r1
 8019340:	9905      	ldr	r1, [sp, #20]
 8019342:	9006      	str	r0, [sp, #24]
 8019344:	0c1f      	lsrs	r7, r3, #16
 8019346:	3004      	adds	r0, #4
 8019348:	42b1      	cmp	r1, r6
 801934a:	d8e6      	bhi.n	801931a <__multiply+0xd6>
 801934c:	9906      	ldr	r1, [sp, #24]
 801934e:	604b      	str	r3, [r1, #4]
 8019350:	9b01      	ldr	r3, [sp, #4]
 8019352:	3204      	adds	r2, #4
 8019354:	3304      	adds	r3, #4
 8019356:	9301      	str	r3, [sp, #4]
 8019358:	e79f      	b.n	801929a <__multiply+0x56>
 801935a:	9b02      	ldr	r3, [sp, #8]
 801935c:	3b01      	subs	r3, #1
 801935e:	9302      	str	r3, [sp, #8]
 8019360:	e79f      	b.n	80192a2 <__multiply+0x5e>
	...

08019364 <__pow5mult>:
 8019364:	2303      	movs	r3, #3
 8019366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019368:	4013      	ands	r3, r2
 801936a:	0006      	movs	r6, r0
 801936c:	000f      	movs	r7, r1
 801936e:	0015      	movs	r5, r2
 8019370:	2b00      	cmp	r3, #0
 8019372:	d008      	beq.n	8019386 <__pow5mult+0x22>
 8019374:	491a      	ldr	r1, [pc, #104]	; (80193e0 <__pow5mult+0x7c>)
 8019376:	3b01      	subs	r3, #1
 8019378:	009a      	lsls	r2, r3, #2
 801937a:	5852      	ldr	r2, [r2, r1]
 801937c:	2300      	movs	r3, #0
 801937e:	0039      	movs	r1, r7
 8019380:	f7ff fe92 	bl	80190a8 <__multadd>
 8019384:	0007      	movs	r7, r0
 8019386:	10ad      	asrs	r5, r5, #2
 8019388:	d027      	beq.n	80193da <__pow5mult+0x76>
 801938a:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801938c:	2c00      	cmp	r4, #0
 801938e:	d107      	bne.n	80193a0 <__pow5mult+0x3c>
 8019390:	4914      	ldr	r1, [pc, #80]	; (80193e4 <__pow5mult+0x80>)
 8019392:	0030      	movs	r0, r6
 8019394:	f7ff ff4d 	bl	8019232 <__i2b>
 8019398:	2300      	movs	r3, #0
 801939a:	0004      	movs	r4, r0
 801939c:	64b0      	str	r0, [r6, #72]	; 0x48
 801939e:	6003      	str	r3, [r0, #0]
 80193a0:	2301      	movs	r3, #1
 80193a2:	421d      	tst	r5, r3
 80193a4:	d00a      	beq.n	80193bc <__pow5mult+0x58>
 80193a6:	0039      	movs	r1, r7
 80193a8:	0022      	movs	r2, r4
 80193aa:	0030      	movs	r0, r6
 80193ac:	f7ff ff4a 	bl	8019244 <__multiply>
 80193b0:	0039      	movs	r1, r7
 80193b2:	9001      	str	r0, [sp, #4]
 80193b4:	0030      	movs	r0, r6
 80193b6:	f7ff fe6d 	bl	8019094 <_Bfree>
 80193ba:	9f01      	ldr	r7, [sp, #4]
 80193bc:	106d      	asrs	r5, r5, #1
 80193be:	d00c      	beq.n	80193da <__pow5mult+0x76>
 80193c0:	6820      	ldr	r0, [r4, #0]
 80193c2:	2800      	cmp	r0, #0
 80193c4:	d107      	bne.n	80193d6 <__pow5mult+0x72>
 80193c6:	0022      	movs	r2, r4
 80193c8:	0021      	movs	r1, r4
 80193ca:	0030      	movs	r0, r6
 80193cc:	f7ff ff3a 	bl	8019244 <__multiply>
 80193d0:	2300      	movs	r3, #0
 80193d2:	6020      	str	r0, [r4, #0]
 80193d4:	6003      	str	r3, [r0, #0]
 80193d6:	0004      	movs	r4, r0
 80193d8:	e7e2      	b.n	80193a0 <__pow5mult+0x3c>
 80193da:	0038      	movs	r0, r7
 80193dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80193de:	46c0      	nop			; (mov r8, r8)
 80193e0:	0801d480 	.word	0x0801d480
 80193e4:	00000271 	.word	0x00000271

080193e8 <__lshift>:
 80193e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193ea:	000d      	movs	r5, r1
 80193ec:	0017      	movs	r7, r2
 80193ee:	692b      	ldr	r3, [r5, #16]
 80193f0:	1154      	asrs	r4, r2, #5
 80193f2:	b085      	sub	sp, #20
 80193f4:	18e3      	adds	r3, r4, r3
 80193f6:	9301      	str	r3, [sp, #4]
 80193f8:	3301      	adds	r3, #1
 80193fa:	9300      	str	r3, [sp, #0]
 80193fc:	6849      	ldr	r1, [r1, #4]
 80193fe:	68ab      	ldr	r3, [r5, #8]
 8019400:	9002      	str	r0, [sp, #8]
 8019402:	9a00      	ldr	r2, [sp, #0]
 8019404:	4293      	cmp	r3, r2
 8019406:	db35      	blt.n	8019474 <__lshift+0x8c>
 8019408:	9802      	ldr	r0, [sp, #8]
 801940a:	f7ff fe1b 	bl	8019044 <_Balloc>
 801940e:	2300      	movs	r3, #0
 8019410:	0002      	movs	r2, r0
 8019412:	0006      	movs	r6, r0
 8019414:	0019      	movs	r1, r3
 8019416:	3214      	adds	r2, #20
 8019418:	42a3      	cmp	r3, r4
 801941a:	db2e      	blt.n	801947a <__lshift+0x92>
 801941c:	43e3      	mvns	r3, r4
 801941e:	17db      	asrs	r3, r3, #31
 8019420:	401c      	ands	r4, r3
 8019422:	002b      	movs	r3, r5
 8019424:	00a4      	lsls	r4, r4, #2
 8019426:	1914      	adds	r4, r2, r4
 8019428:	692a      	ldr	r2, [r5, #16]
 801942a:	3314      	adds	r3, #20
 801942c:	0092      	lsls	r2, r2, #2
 801942e:	189a      	adds	r2, r3, r2
 8019430:	4694      	mov	ip, r2
 8019432:	221f      	movs	r2, #31
 8019434:	4017      	ands	r7, r2
 8019436:	d024      	beq.n	8019482 <__lshift+0x9a>
 8019438:	3201      	adds	r2, #1
 801943a:	1bd2      	subs	r2, r2, r7
 801943c:	9203      	str	r2, [sp, #12]
 801943e:	2200      	movs	r2, #0
 8019440:	6819      	ldr	r1, [r3, #0]
 8019442:	0020      	movs	r0, r4
 8019444:	40b9      	lsls	r1, r7
 8019446:	430a      	orrs	r2, r1
 8019448:	c404      	stmia	r4!, {r2}
 801944a:	cb04      	ldmia	r3!, {r2}
 801944c:	9903      	ldr	r1, [sp, #12]
 801944e:	40ca      	lsrs	r2, r1
 8019450:	459c      	cmp	ip, r3
 8019452:	d8f5      	bhi.n	8019440 <__lshift+0x58>
 8019454:	6042      	str	r2, [r0, #4]
 8019456:	2a00      	cmp	r2, #0
 8019458:	d002      	beq.n	8019460 <__lshift+0x78>
 801945a:	9b01      	ldr	r3, [sp, #4]
 801945c:	3302      	adds	r3, #2
 801945e:	9300      	str	r3, [sp, #0]
 8019460:	9b00      	ldr	r3, [sp, #0]
 8019462:	9802      	ldr	r0, [sp, #8]
 8019464:	3b01      	subs	r3, #1
 8019466:	6133      	str	r3, [r6, #16]
 8019468:	0029      	movs	r1, r5
 801946a:	f7ff fe13 	bl	8019094 <_Bfree>
 801946e:	0030      	movs	r0, r6
 8019470:	b005      	add	sp, #20
 8019472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019474:	3101      	adds	r1, #1
 8019476:	005b      	lsls	r3, r3, #1
 8019478:	e7c3      	b.n	8019402 <__lshift+0x1a>
 801947a:	0098      	lsls	r0, r3, #2
 801947c:	5011      	str	r1, [r2, r0]
 801947e:	3301      	adds	r3, #1
 8019480:	e7ca      	b.n	8019418 <__lshift+0x30>
 8019482:	cb04      	ldmia	r3!, {r2}
 8019484:	c404      	stmia	r4!, {r2}
 8019486:	459c      	cmp	ip, r3
 8019488:	d8fb      	bhi.n	8019482 <__lshift+0x9a>
 801948a:	e7e9      	b.n	8019460 <__lshift+0x78>

0801948c <__mcmp>:
 801948c:	690a      	ldr	r2, [r1, #16]
 801948e:	6903      	ldr	r3, [r0, #16]
 8019490:	b530      	push	{r4, r5, lr}
 8019492:	1a9b      	subs	r3, r3, r2
 8019494:	d10d      	bne.n	80194b2 <__mcmp+0x26>
 8019496:	0092      	lsls	r2, r2, #2
 8019498:	3014      	adds	r0, #20
 801949a:	3114      	adds	r1, #20
 801949c:	1884      	adds	r4, r0, r2
 801949e:	1889      	adds	r1, r1, r2
 80194a0:	3c04      	subs	r4, #4
 80194a2:	3904      	subs	r1, #4
 80194a4:	6825      	ldr	r5, [r4, #0]
 80194a6:	680a      	ldr	r2, [r1, #0]
 80194a8:	4295      	cmp	r5, r2
 80194aa:	d004      	beq.n	80194b6 <__mcmp+0x2a>
 80194ac:	2301      	movs	r3, #1
 80194ae:	4295      	cmp	r5, r2
 80194b0:	d304      	bcc.n	80194bc <__mcmp+0x30>
 80194b2:	0018      	movs	r0, r3
 80194b4:	bd30      	pop	{r4, r5, pc}
 80194b6:	42a0      	cmp	r0, r4
 80194b8:	d3f2      	bcc.n	80194a0 <__mcmp+0x14>
 80194ba:	e7fa      	b.n	80194b2 <__mcmp+0x26>
 80194bc:	425b      	negs	r3, r3
 80194be:	e7f8      	b.n	80194b2 <__mcmp+0x26>

080194c0 <__mdiff>:
 80194c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194c2:	000d      	movs	r5, r1
 80194c4:	b085      	sub	sp, #20
 80194c6:	0007      	movs	r7, r0
 80194c8:	0011      	movs	r1, r2
 80194ca:	0028      	movs	r0, r5
 80194cc:	0014      	movs	r4, r2
 80194ce:	f7ff ffdd 	bl	801948c <__mcmp>
 80194d2:	1e06      	subs	r6, r0, #0
 80194d4:	d108      	bne.n	80194e8 <__mdiff+0x28>
 80194d6:	0001      	movs	r1, r0
 80194d8:	0038      	movs	r0, r7
 80194da:	f7ff fdb3 	bl	8019044 <_Balloc>
 80194de:	2301      	movs	r3, #1
 80194e0:	6146      	str	r6, [r0, #20]
 80194e2:	6103      	str	r3, [r0, #16]
 80194e4:	b005      	add	sp, #20
 80194e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194e8:	2301      	movs	r3, #1
 80194ea:	9301      	str	r3, [sp, #4]
 80194ec:	2800      	cmp	r0, #0
 80194ee:	db04      	blt.n	80194fa <__mdiff+0x3a>
 80194f0:	0023      	movs	r3, r4
 80194f2:	002c      	movs	r4, r5
 80194f4:	001d      	movs	r5, r3
 80194f6:	2300      	movs	r3, #0
 80194f8:	9301      	str	r3, [sp, #4]
 80194fa:	6861      	ldr	r1, [r4, #4]
 80194fc:	0038      	movs	r0, r7
 80194fe:	f7ff fda1 	bl	8019044 <_Balloc>
 8019502:	002f      	movs	r7, r5
 8019504:	2200      	movs	r2, #0
 8019506:	9b01      	ldr	r3, [sp, #4]
 8019508:	6926      	ldr	r6, [r4, #16]
 801950a:	60c3      	str	r3, [r0, #12]
 801950c:	3414      	adds	r4, #20
 801950e:	00b3      	lsls	r3, r6, #2
 8019510:	18e3      	adds	r3, r4, r3
 8019512:	9302      	str	r3, [sp, #8]
 8019514:	692b      	ldr	r3, [r5, #16]
 8019516:	3714      	adds	r7, #20
 8019518:	009b      	lsls	r3, r3, #2
 801951a:	18fb      	adds	r3, r7, r3
 801951c:	9303      	str	r3, [sp, #12]
 801951e:	0003      	movs	r3, r0
 8019520:	4694      	mov	ip, r2
 8019522:	3314      	adds	r3, #20
 8019524:	cc20      	ldmia	r4!, {r5}
 8019526:	cf04      	ldmia	r7!, {r2}
 8019528:	9201      	str	r2, [sp, #4]
 801952a:	b2aa      	uxth	r2, r5
 801952c:	4494      	add	ip, r2
 801952e:	466a      	mov	r2, sp
 8019530:	4661      	mov	r1, ip
 8019532:	8892      	ldrh	r2, [r2, #4]
 8019534:	0c2d      	lsrs	r5, r5, #16
 8019536:	1a8a      	subs	r2, r1, r2
 8019538:	9901      	ldr	r1, [sp, #4]
 801953a:	0c09      	lsrs	r1, r1, #16
 801953c:	1a69      	subs	r1, r5, r1
 801953e:	1415      	asrs	r5, r2, #16
 8019540:	1949      	adds	r1, r1, r5
 8019542:	140d      	asrs	r5, r1, #16
 8019544:	b292      	uxth	r2, r2
 8019546:	0409      	lsls	r1, r1, #16
 8019548:	430a      	orrs	r2, r1
 801954a:	601a      	str	r2, [r3, #0]
 801954c:	9a03      	ldr	r2, [sp, #12]
 801954e:	46ac      	mov	ip, r5
 8019550:	3304      	adds	r3, #4
 8019552:	42ba      	cmp	r2, r7
 8019554:	d8e6      	bhi.n	8019524 <__mdiff+0x64>
 8019556:	9902      	ldr	r1, [sp, #8]
 8019558:	001a      	movs	r2, r3
 801955a:	428c      	cmp	r4, r1
 801955c:	d305      	bcc.n	801956a <__mdiff+0xaa>
 801955e:	3a04      	subs	r2, #4
 8019560:	6813      	ldr	r3, [r2, #0]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d00e      	beq.n	8019584 <__mdiff+0xc4>
 8019566:	6106      	str	r6, [r0, #16]
 8019568:	e7bc      	b.n	80194e4 <__mdiff+0x24>
 801956a:	cc04      	ldmia	r4!, {r2}
 801956c:	b291      	uxth	r1, r2
 801956e:	4461      	add	r1, ip
 8019570:	140d      	asrs	r5, r1, #16
 8019572:	0c12      	lsrs	r2, r2, #16
 8019574:	1952      	adds	r2, r2, r5
 8019576:	1415      	asrs	r5, r2, #16
 8019578:	b289      	uxth	r1, r1
 801957a:	0412      	lsls	r2, r2, #16
 801957c:	430a      	orrs	r2, r1
 801957e:	46ac      	mov	ip, r5
 8019580:	c304      	stmia	r3!, {r2}
 8019582:	e7e8      	b.n	8019556 <__mdiff+0x96>
 8019584:	3e01      	subs	r6, #1
 8019586:	e7ea      	b.n	801955e <__mdiff+0x9e>

08019588 <__ulp>:
 8019588:	000b      	movs	r3, r1
 801958a:	4910      	ldr	r1, [pc, #64]	; (80195cc <__ulp+0x44>)
 801958c:	b510      	push	{r4, lr}
 801958e:	4019      	ands	r1, r3
 8019590:	4b0f      	ldr	r3, [pc, #60]	; (80195d0 <__ulp+0x48>)
 8019592:	18c9      	adds	r1, r1, r3
 8019594:	2900      	cmp	r1, #0
 8019596:	dd04      	ble.n	80195a2 <__ulp+0x1a>
 8019598:	2200      	movs	r2, #0
 801959a:	000b      	movs	r3, r1
 801959c:	0010      	movs	r0, r2
 801959e:	0019      	movs	r1, r3
 80195a0:	bd10      	pop	{r4, pc}
 80195a2:	4249      	negs	r1, r1
 80195a4:	1509      	asrs	r1, r1, #20
 80195a6:	2200      	movs	r2, #0
 80195a8:	2300      	movs	r3, #0
 80195aa:	2913      	cmp	r1, #19
 80195ac:	dc04      	bgt.n	80195b8 <__ulp+0x30>
 80195ae:	2080      	movs	r0, #128	; 0x80
 80195b0:	0300      	lsls	r0, r0, #12
 80195b2:	4108      	asrs	r0, r1
 80195b4:	0003      	movs	r3, r0
 80195b6:	e7f1      	b.n	801959c <__ulp+0x14>
 80195b8:	3914      	subs	r1, #20
 80195ba:	2001      	movs	r0, #1
 80195bc:	291e      	cmp	r1, #30
 80195be:	dc02      	bgt.n	80195c6 <__ulp+0x3e>
 80195c0:	241f      	movs	r4, #31
 80195c2:	1a61      	subs	r1, r4, r1
 80195c4:	4088      	lsls	r0, r1
 80195c6:	0002      	movs	r2, r0
 80195c8:	e7e8      	b.n	801959c <__ulp+0x14>
 80195ca:	46c0      	nop			; (mov r8, r8)
 80195cc:	7ff00000 	.word	0x7ff00000
 80195d0:	fcc00000 	.word	0xfcc00000

080195d4 <__b2d>:
 80195d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80195d6:	0006      	movs	r6, r0
 80195d8:	6903      	ldr	r3, [r0, #16]
 80195da:	3614      	adds	r6, #20
 80195dc:	009b      	lsls	r3, r3, #2
 80195de:	18f3      	adds	r3, r6, r3
 80195e0:	1f1d      	subs	r5, r3, #4
 80195e2:	682c      	ldr	r4, [r5, #0]
 80195e4:	000f      	movs	r7, r1
 80195e6:	0020      	movs	r0, r4
 80195e8:	9301      	str	r3, [sp, #4]
 80195ea:	f7ff fdd9 	bl	80191a0 <__hi0bits>
 80195ee:	2320      	movs	r3, #32
 80195f0:	1a1b      	subs	r3, r3, r0
 80195f2:	603b      	str	r3, [r7, #0]
 80195f4:	491c      	ldr	r1, [pc, #112]	; (8019668 <__b2d+0x94>)
 80195f6:	280a      	cmp	r0, #10
 80195f8:	dc16      	bgt.n	8019628 <__b2d+0x54>
 80195fa:	230b      	movs	r3, #11
 80195fc:	0027      	movs	r7, r4
 80195fe:	1a1b      	subs	r3, r3, r0
 8019600:	40df      	lsrs	r7, r3
 8019602:	4339      	orrs	r1, r7
 8019604:	469c      	mov	ip, r3
 8019606:	000b      	movs	r3, r1
 8019608:	2100      	movs	r1, #0
 801960a:	42ae      	cmp	r6, r5
 801960c:	d202      	bcs.n	8019614 <__b2d+0x40>
 801960e:	9901      	ldr	r1, [sp, #4]
 8019610:	3908      	subs	r1, #8
 8019612:	6809      	ldr	r1, [r1, #0]
 8019614:	3015      	adds	r0, #21
 8019616:	4084      	lsls	r4, r0
 8019618:	4660      	mov	r0, ip
 801961a:	40c1      	lsrs	r1, r0
 801961c:	430c      	orrs	r4, r1
 801961e:	0022      	movs	r2, r4
 8019620:	0010      	movs	r0, r2
 8019622:	0019      	movs	r1, r3
 8019624:	b003      	add	sp, #12
 8019626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019628:	2700      	movs	r7, #0
 801962a:	42ae      	cmp	r6, r5
 801962c:	d202      	bcs.n	8019634 <__b2d+0x60>
 801962e:	9d01      	ldr	r5, [sp, #4]
 8019630:	3d08      	subs	r5, #8
 8019632:	682f      	ldr	r7, [r5, #0]
 8019634:	380b      	subs	r0, #11
 8019636:	4684      	mov	ip, r0
 8019638:	1e03      	subs	r3, r0, #0
 801963a:	d012      	beq.n	8019662 <__b2d+0x8e>
 801963c:	409c      	lsls	r4, r3
 801963e:	2020      	movs	r0, #32
 8019640:	4321      	orrs	r1, r4
 8019642:	003c      	movs	r4, r7
 8019644:	1ac0      	subs	r0, r0, r3
 8019646:	40c4      	lsrs	r4, r0
 8019648:	4321      	orrs	r1, r4
 801964a:	000b      	movs	r3, r1
 801964c:	2100      	movs	r1, #0
 801964e:	42b5      	cmp	r5, r6
 8019650:	d901      	bls.n	8019656 <__b2d+0x82>
 8019652:	3d04      	subs	r5, #4
 8019654:	6829      	ldr	r1, [r5, #0]
 8019656:	4664      	mov	r4, ip
 8019658:	40c1      	lsrs	r1, r0
 801965a:	40a7      	lsls	r7, r4
 801965c:	430f      	orrs	r7, r1
 801965e:	003a      	movs	r2, r7
 8019660:	e7de      	b.n	8019620 <__b2d+0x4c>
 8019662:	4321      	orrs	r1, r4
 8019664:	000b      	movs	r3, r1
 8019666:	e7fa      	b.n	801965e <__b2d+0x8a>
 8019668:	3ff00000 	.word	0x3ff00000

0801966c <__d2b>:
 801966c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801966e:	001d      	movs	r5, r3
 8019670:	2101      	movs	r1, #1
 8019672:	0014      	movs	r4, r2
 8019674:	9f08      	ldr	r7, [sp, #32]
 8019676:	f7ff fce5 	bl	8019044 <_Balloc>
 801967a:	032b      	lsls	r3, r5, #12
 801967c:	006d      	lsls	r5, r5, #1
 801967e:	0006      	movs	r6, r0
 8019680:	0b1b      	lsrs	r3, r3, #12
 8019682:	0d6d      	lsrs	r5, r5, #21
 8019684:	d124      	bne.n	80196d0 <__d2b+0x64>
 8019686:	9301      	str	r3, [sp, #4]
 8019688:	2c00      	cmp	r4, #0
 801968a:	d027      	beq.n	80196dc <__d2b+0x70>
 801968c:	4668      	mov	r0, sp
 801968e:	9400      	str	r4, [sp, #0]
 8019690:	f7ff fda0 	bl	80191d4 <__lo0bits>
 8019694:	9c00      	ldr	r4, [sp, #0]
 8019696:	2800      	cmp	r0, #0
 8019698:	d01e      	beq.n	80196d8 <__d2b+0x6c>
 801969a:	9b01      	ldr	r3, [sp, #4]
 801969c:	2120      	movs	r1, #32
 801969e:	001a      	movs	r2, r3
 80196a0:	1a09      	subs	r1, r1, r0
 80196a2:	408a      	lsls	r2, r1
 80196a4:	40c3      	lsrs	r3, r0
 80196a6:	4322      	orrs	r2, r4
 80196a8:	6172      	str	r2, [r6, #20]
 80196aa:	9301      	str	r3, [sp, #4]
 80196ac:	9c01      	ldr	r4, [sp, #4]
 80196ae:	61b4      	str	r4, [r6, #24]
 80196b0:	1e63      	subs	r3, r4, #1
 80196b2:	419c      	sbcs	r4, r3
 80196b4:	3401      	adds	r4, #1
 80196b6:	6134      	str	r4, [r6, #16]
 80196b8:	2d00      	cmp	r5, #0
 80196ba:	d018      	beq.n	80196ee <__d2b+0x82>
 80196bc:	4b12      	ldr	r3, [pc, #72]	; (8019708 <__d2b+0x9c>)
 80196be:	18ed      	adds	r5, r5, r3
 80196c0:	2335      	movs	r3, #53	; 0x35
 80196c2:	182d      	adds	r5, r5, r0
 80196c4:	603d      	str	r5, [r7, #0]
 80196c6:	1a18      	subs	r0, r3, r0
 80196c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196ca:	6018      	str	r0, [r3, #0]
 80196cc:	0030      	movs	r0, r6
 80196ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80196d0:	2280      	movs	r2, #128	; 0x80
 80196d2:	0352      	lsls	r2, r2, #13
 80196d4:	4313      	orrs	r3, r2
 80196d6:	e7d6      	b.n	8019686 <__d2b+0x1a>
 80196d8:	6174      	str	r4, [r6, #20]
 80196da:	e7e7      	b.n	80196ac <__d2b+0x40>
 80196dc:	a801      	add	r0, sp, #4
 80196de:	f7ff fd79 	bl	80191d4 <__lo0bits>
 80196e2:	2401      	movs	r4, #1
 80196e4:	9b01      	ldr	r3, [sp, #4]
 80196e6:	6134      	str	r4, [r6, #16]
 80196e8:	6173      	str	r3, [r6, #20]
 80196ea:	3020      	adds	r0, #32
 80196ec:	e7e4      	b.n	80196b8 <__d2b+0x4c>
 80196ee:	4b07      	ldr	r3, [pc, #28]	; (801970c <__d2b+0xa0>)
 80196f0:	18c0      	adds	r0, r0, r3
 80196f2:	4b07      	ldr	r3, [pc, #28]	; (8019710 <__d2b+0xa4>)
 80196f4:	6038      	str	r0, [r7, #0]
 80196f6:	18e3      	adds	r3, r4, r3
 80196f8:	009b      	lsls	r3, r3, #2
 80196fa:	18f3      	adds	r3, r6, r3
 80196fc:	6958      	ldr	r0, [r3, #20]
 80196fe:	f7ff fd4f 	bl	80191a0 <__hi0bits>
 8019702:	0164      	lsls	r4, r4, #5
 8019704:	1a20      	subs	r0, r4, r0
 8019706:	e7df      	b.n	80196c8 <__d2b+0x5c>
 8019708:	fffffbcd 	.word	0xfffffbcd
 801970c:	fffffbce 	.word	0xfffffbce
 8019710:	3fffffff 	.word	0x3fffffff

08019714 <__ratio>:
 8019714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019716:	b085      	sub	sp, #20
 8019718:	000f      	movs	r7, r1
 801971a:	a902      	add	r1, sp, #8
 801971c:	0006      	movs	r6, r0
 801971e:	f7ff ff59 	bl	80195d4 <__b2d>
 8019722:	0004      	movs	r4, r0
 8019724:	000d      	movs	r5, r1
 8019726:	0038      	movs	r0, r7
 8019728:	a903      	add	r1, sp, #12
 801972a:	9400      	str	r4, [sp, #0]
 801972c:	9501      	str	r5, [sp, #4]
 801972e:	f7ff ff51 	bl	80195d4 <__b2d>
 8019732:	6936      	ldr	r6, [r6, #16]
 8019734:	693f      	ldr	r7, [r7, #16]
 8019736:	0002      	movs	r2, r0
 8019738:	1bf7      	subs	r7, r6, r7
 801973a:	017e      	lsls	r6, r7, #5
 801973c:	46b4      	mov	ip, r6
 801973e:	9f03      	ldr	r7, [sp, #12]
 8019740:	9e02      	ldr	r6, [sp, #8]
 8019742:	000b      	movs	r3, r1
 8019744:	1bf6      	subs	r6, r6, r7
 8019746:	4466      	add	r6, ip
 8019748:	0537      	lsls	r7, r6, #20
 801974a:	2e00      	cmp	r6, #0
 801974c:	dd07      	ble.n	801975e <__ratio+0x4a>
 801974e:	1979      	adds	r1, r7, r5
 8019750:	9101      	str	r1, [sp, #4]
 8019752:	9800      	ldr	r0, [sp, #0]
 8019754:	9901      	ldr	r1, [sp, #4]
 8019756:	f7e8 fa63 	bl	8001c20 <__aeabi_ddiv>
 801975a:	b005      	add	sp, #20
 801975c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801975e:	1bcb      	subs	r3, r1, r7
 8019760:	e7f7      	b.n	8019752 <__ratio+0x3e>

08019762 <__copybits>:
 8019762:	0013      	movs	r3, r2
 8019764:	3901      	subs	r1, #1
 8019766:	b510      	push	{r4, lr}
 8019768:	1149      	asrs	r1, r1, #5
 801976a:	6912      	ldr	r2, [r2, #16]
 801976c:	3101      	adds	r1, #1
 801976e:	0089      	lsls	r1, r1, #2
 8019770:	3314      	adds	r3, #20
 8019772:	0092      	lsls	r2, r2, #2
 8019774:	1841      	adds	r1, r0, r1
 8019776:	189a      	adds	r2, r3, r2
 8019778:	429a      	cmp	r2, r3
 801977a:	d803      	bhi.n	8019784 <__copybits+0x22>
 801977c:	2300      	movs	r3, #0
 801977e:	4281      	cmp	r1, r0
 8019780:	d803      	bhi.n	801978a <__copybits+0x28>
 8019782:	bd10      	pop	{r4, pc}
 8019784:	cb10      	ldmia	r3!, {r4}
 8019786:	c010      	stmia	r0!, {r4}
 8019788:	e7f6      	b.n	8019778 <__copybits+0x16>
 801978a:	c008      	stmia	r0!, {r3}
 801978c:	e7f7      	b.n	801977e <__copybits+0x1c>

0801978e <__any_on>:
 801978e:	0002      	movs	r2, r0
 8019790:	6900      	ldr	r0, [r0, #16]
 8019792:	b510      	push	{r4, lr}
 8019794:	3214      	adds	r2, #20
 8019796:	114b      	asrs	r3, r1, #5
 8019798:	4298      	cmp	r0, r3
 801979a:	db12      	blt.n	80197c2 <__any_on+0x34>
 801979c:	dd0b      	ble.n	80197b6 <__any_on+0x28>
 801979e:	201f      	movs	r0, #31
 80197a0:	4001      	ands	r1, r0
 80197a2:	d008      	beq.n	80197b6 <__any_on+0x28>
 80197a4:	0098      	lsls	r0, r3, #2
 80197a6:	5884      	ldr	r4, [r0, r2]
 80197a8:	0020      	movs	r0, r4
 80197aa:	40c8      	lsrs	r0, r1
 80197ac:	4088      	lsls	r0, r1
 80197ae:	0001      	movs	r1, r0
 80197b0:	2001      	movs	r0, #1
 80197b2:	428c      	cmp	r4, r1
 80197b4:	d104      	bne.n	80197c0 <__any_on+0x32>
 80197b6:	009b      	lsls	r3, r3, #2
 80197b8:	18d3      	adds	r3, r2, r3
 80197ba:	4293      	cmp	r3, r2
 80197bc:	d803      	bhi.n	80197c6 <__any_on+0x38>
 80197be:	2000      	movs	r0, #0
 80197c0:	bd10      	pop	{r4, pc}
 80197c2:	0003      	movs	r3, r0
 80197c4:	e7f7      	b.n	80197b6 <__any_on+0x28>
 80197c6:	3b04      	subs	r3, #4
 80197c8:	6819      	ldr	r1, [r3, #0]
 80197ca:	2900      	cmp	r1, #0
 80197cc:	d0f5      	beq.n	80197ba <__any_on+0x2c>
 80197ce:	2001      	movs	r0, #1
 80197d0:	e7f6      	b.n	80197c0 <__any_on+0x32>
	...

080197d4 <frexp>:
 80197d4:	b570      	push	{r4, r5, r6, lr}
 80197d6:	0014      	movs	r4, r2
 80197d8:	2500      	movs	r5, #0
 80197da:	6025      	str	r5, [r4, #0]
 80197dc:	4d10      	ldr	r5, [pc, #64]	; (8019820 <frexp+0x4c>)
 80197de:	004b      	lsls	r3, r1, #1
 80197e0:	000a      	movs	r2, r1
 80197e2:	085b      	lsrs	r3, r3, #1
 80197e4:	42ab      	cmp	r3, r5
 80197e6:	dc1a      	bgt.n	801981e <frexp+0x4a>
 80197e8:	001d      	movs	r5, r3
 80197ea:	4305      	orrs	r5, r0
 80197ec:	d017      	beq.n	801981e <frexp+0x4a>
 80197ee:	4d0d      	ldr	r5, [pc, #52]	; (8019824 <frexp+0x50>)
 80197f0:	42ab      	cmp	r3, r5
 80197f2:	dc09      	bgt.n	8019808 <frexp+0x34>
 80197f4:	2200      	movs	r2, #0
 80197f6:	4b0c      	ldr	r3, [pc, #48]	; (8019828 <frexp+0x54>)
 80197f8:	f7e8 fe1c 	bl	8002434 <__aeabi_dmul>
 80197fc:	2536      	movs	r5, #54	; 0x36
 80197fe:	000a      	movs	r2, r1
 8019800:	004b      	lsls	r3, r1, #1
 8019802:	426d      	negs	r5, r5
 8019804:	085b      	lsrs	r3, r3, #1
 8019806:	6025      	str	r5, [r4, #0]
 8019808:	4d08      	ldr	r5, [pc, #32]	; (801982c <frexp+0x58>)
 801980a:	151b      	asrs	r3, r3, #20
 801980c:	195b      	adds	r3, r3, r5
 801980e:	6825      	ldr	r5, [r4, #0]
 8019810:	18eb      	adds	r3, r5, r3
 8019812:	6023      	str	r3, [r4, #0]
 8019814:	4b06      	ldr	r3, [pc, #24]	; (8019830 <frexp+0x5c>)
 8019816:	401a      	ands	r2, r3
 8019818:	4b06      	ldr	r3, [pc, #24]	; (8019834 <frexp+0x60>)
 801981a:	4313      	orrs	r3, r2
 801981c:	0019      	movs	r1, r3
 801981e:	bd70      	pop	{r4, r5, r6, pc}
 8019820:	7fefffff 	.word	0x7fefffff
 8019824:	000fffff 	.word	0x000fffff
 8019828:	43500000 	.word	0x43500000
 801982c:	fffffc02 	.word	0xfffffc02
 8019830:	800fffff 	.word	0x800fffff
 8019834:	3fe00000 	.word	0x3fe00000

08019838 <__ssprint_r>:
 8019838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801983a:	6893      	ldr	r3, [r2, #8]
 801983c:	b087      	sub	sp, #28
 801983e:	9002      	str	r0, [sp, #8]
 8019840:	000c      	movs	r4, r1
 8019842:	0016      	movs	r6, r2
 8019844:	2b00      	cmp	r3, #0
 8019846:	d063      	beq.n	8019910 <__ssprint_r+0xd8>
 8019848:	6813      	ldr	r3, [r2, #0]
 801984a:	9303      	str	r3, [sp, #12]
 801984c:	2300      	movs	r3, #0
 801984e:	001f      	movs	r7, r3
 8019850:	9305      	str	r3, [sp, #20]
 8019852:	2f00      	cmp	r7, #0
 8019854:	d02e      	beq.n	80198b4 <__ssprint_r+0x7c>
 8019856:	68a5      	ldr	r5, [r4, #8]
 8019858:	42af      	cmp	r7, r5
 801985a:	d347      	bcc.n	80198ec <__ssprint_r+0xb4>
 801985c:	2390      	movs	r3, #144	; 0x90
 801985e:	89a2      	ldrh	r2, [r4, #12]
 8019860:	00db      	lsls	r3, r3, #3
 8019862:	421a      	tst	r2, r3
 8019864:	d042      	beq.n	80198ec <__ssprint_r+0xb4>
 8019866:	2003      	movs	r0, #3
 8019868:	6921      	ldr	r1, [r4, #16]
 801986a:	6823      	ldr	r3, [r4, #0]
 801986c:	1a5b      	subs	r3, r3, r1
 801986e:	9304      	str	r3, [sp, #16]
 8019870:	6963      	ldr	r3, [r4, #20]
 8019872:	4343      	muls	r3, r0
 8019874:	0fd8      	lsrs	r0, r3, #31
 8019876:	18c3      	adds	r3, r0, r3
 8019878:	105b      	asrs	r3, r3, #1
 801987a:	9301      	str	r3, [sp, #4]
 801987c:	9b04      	ldr	r3, [sp, #16]
 801987e:	9801      	ldr	r0, [sp, #4]
 8019880:	3301      	adds	r3, #1
 8019882:	19db      	adds	r3, r3, r7
 8019884:	4283      	cmp	r3, r0
 8019886:	d900      	bls.n	801988a <__ssprint_r+0x52>
 8019888:	9301      	str	r3, [sp, #4]
 801988a:	0553      	lsls	r3, r2, #21
 801988c:	d544      	bpl.n	8019918 <__ssprint_r+0xe0>
 801988e:	9901      	ldr	r1, [sp, #4]
 8019890:	9802      	ldr	r0, [sp, #8]
 8019892:	f7fb fab7 	bl	8014e04 <_malloc_r>
 8019896:	1e05      	subs	r5, r0, #0
 8019898:	d114      	bne.n	80198c4 <__ssprint_r+0x8c>
 801989a:	230c      	movs	r3, #12
 801989c:	9a02      	ldr	r2, [sp, #8]
 801989e:	2001      	movs	r0, #1
 80198a0:	6013      	str	r3, [r2, #0]
 80198a2:	2340      	movs	r3, #64	; 0x40
 80198a4:	89a2      	ldrh	r2, [r4, #12]
 80198a6:	4240      	negs	r0, r0
 80198a8:	4313      	orrs	r3, r2
 80198aa:	81a3      	strh	r3, [r4, #12]
 80198ac:	2300      	movs	r3, #0
 80198ae:	60b3      	str	r3, [r6, #8]
 80198b0:	6073      	str	r3, [r6, #4]
 80198b2:	e02f      	b.n	8019914 <__ssprint_r+0xdc>
 80198b4:	9b03      	ldr	r3, [sp, #12]
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	9305      	str	r3, [sp, #20]
 80198ba:	9b03      	ldr	r3, [sp, #12]
 80198bc:	685f      	ldr	r7, [r3, #4]
 80198be:	3308      	adds	r3, #8
 80198c0:	9303      	str	r3, [sp, #12]
 80198c2:	e7c6      	b.n	8019852 <__ssprint_r+0x1a>
 80198c4:	9a04      	ldr	r2, [sp, #16]
 80198c6:	6921      	ldr	r1, [r4, #16]
 80198c8:	f7fb fcd5 	bl	8015276 <memcpy>
 80198cc:	89a3      	ldrh	r3, [r4, #12]
 80198ce:	4a18      	ldr	r2, [pc, #96]	; (8019930 <__ssprint_r+0xf8>)
 80198d0:	401a      	ands	r2, r3
 80198d2:	2380      	movs	r3, #128	; 0x80
 80198d4:	4313      	orrs	r3, r2
 80198d6:	81a3      	strh	r3, [r4, #12]
 80198d8:	9b04      	ldr	r3, [sp, #16]
 80198da:	6125      	str	r5, [r4, #16]
 80198dc:	18ed      	adds	r5, r5, r3
 80198de:	6025      	str	r5, [r4, #0]
 80198e0:	003d      	movs	r5, r7
 80198e2:	9b01      	ldr	r3, [sp, #4]
 80198e4:	9a04      	ldr	r2, [sp, #16]
 80198e6:	6163      	str	r3, [r4, #20]
 80198e8:	1a9b      	subs	r3, r3, r2
 80198ea:	60a3      	str	r3, [r4, #8]
 80198ec:	42bd      	cmp	r5, r7
 80198ee:	d900      	bls.n	80198f2 <__ssprint_r+0xba>
 80198f0:	003d      	movs	r5, r7
 80198f2:	002a      	movs	r2, r5
 80198f4:	9905      	ldr	r1, [sp, #20]
 80198f6:	6820      	ldr	r0, [r4, #0]
 80198f8:	f7ff fb91 	bl	801901e <memmove>
 80198fc:	68a3      	ldr	r3, [r4, #8]
 80198fe:	1b5b      	subs	r3, r3, r5
 8019900:	60a3      	str	r3, [r4, #8]
 8019902:	6823      	ldr	r3, [r4, #0]
 8019904:	195d      	adds	r5, r3, r5
 8019906:	68b3      	ldr	r3, [r6, #8]
 8019908:	6025      	str	r5, [r4, #0]
 801990a:	1bdb      	subs	r3, r3, r7
 801990c:	60b3      	str	r3, [r6, #8]
 801990e:	d1d1      	bne.n	80198b4 <__ssprint_r+0x7c>
 8019910:	2000      	movs	r0, #0
 8019912:	6070      	str	r0, [r6, #4]
 8019914:	b007      	add	sp, #28
 8019916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019918:	9a01      	ldr	r2, [sp, #4]
 801991a:	9802      	ldr	r0, [sp, #8]
 801991c:	f7fb fcf0 	bl	8015300 <_realloc_r>
 8019920:	1e05      	subs	r5, r0, #0
 8019922:	d1d9      	bne.n	80198d8 <__ssprint_r+0xa0>
 8019924:	6921      	ldr	r1, [r4, #16]
 8019926:	9802      	ldr	r0, [sp, #8]
 8019928:	f7fe ff78 	bl	801881c <_free_r>
 801992c:	e7b5      	b.n	801989a <__ssprint_r+0x62>
 801992e:	46c0      	nop			; (mov r8, r8)
 8019930:	fffffb7f 	.word	0xfffffb7f

08019934 <__register_exitproc>:
 8019934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019936:	4d29      	ldr	r5, [pc, #164]	; (80199dc <__register_exitproc+0xa8>)
 8019938:	0006      	movs	r6, r0
 801993a:	6828      	ldr	r0, [r5, #0]
 801993c:	9301      	str	r3, [sp, #4]
 801993e:	9100      	str	r1, [sp, #0]
 8019940:	0017      	movs	r7, r2
 8019942:	f7ff fb5f 	bl	8019004 <__retarget_lock_acquire_recursive>
 8019946:	4b26      	ldr	r3, [pc, #152]	; (80199e0 <__register_exitproc+0xac>)
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	001c      	movs	r4, r3
 801994c:	34fc      	adds	r4, #252	; 0xfc
 801994e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019950:	2800      	cmp	r0, #0
 8019952:	d103      	bne.n	801995c <__register_exitproc+0x28>
 8019954:	334d      	adds	r3, #77	; 0x4d
 8019956:	33ff      	adds	r3, #255	; 0xff
 8019958:	0018      	movs	r0, r3
 801995a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801995c:	6843      	ldr	r3, [r0, #4]
 801995e:	2b1f      	cmp	r3, #31
 8019960:	dd18      	ble.n	8019994 <__register_exitproc+0x60>
 8019962:	4b20      	ldr	r3, [pc, #128]	; (80199e4 <__register_exitproc+0xb0>)
 8019964:	2b00      	cmp	r3, #0
 8019966:	d105      	bne.n	8019974 <__register_exitproc+0x40>
 8019968:	6828      	ldr	r0, [r5, #0]
 801996a:	f7ff fb4c 	bl	8019006 <__retarget_lock_release_recursive>
 801996e:	2001      	movs	r0, #1
 8019970:	4240      	negs	r0, r0
 8019972:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019974:	20c8      	movs	r0, #200	; 0xc8
 8019976:	0040      	lsls	r0, r0, #1
 8019978:	f7fb fa30 	bl	8014ddc <malloc>
 801997c:	2800      	cmp	r0, #0
 801997e:	d0f3      	beq.n	8019968 <__register_exitproc+0x34>
 8019980:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019982:	2300      	movs	r3, #0
 8019984:	6002      	str	r2, [r0, #0]
 8019986:	22c4      	movs	r2, #196	; 0xc4
 8019988:	0052      	lsls	r2, r2, #1
 801998a:	6043      	str	r3, [r0, #4]
 801998c:	64e0      	str	r0, [r4, #76]	; 0x4c
 801998e:	5083      	str	r3, [r0, r2]
 8019990:	3204      	adds	r2, #4
 8019992:	5083      	str	r3, [r0, r2]
 8019994:	6843      	ldr	r3, [r0, #4]
 8019996:	2e00      	cmp	r6, #0
 8019998:	d014      	beq.n	80199c4 <__register_exitproc+0x90>
 801999a:	009a      	lsls	r2, r3, #2
 801999c:	1882      	adds	r2, r0, r2
 801999e:	0011      	movs	r1, r2
 80199a0:	3188      	adds	r1, #136	; 0x88
 80199a2:	600f      	str	r7, [r1, #0]
 80199a4:	2101      	movs	r1, #1
 80199a6:	0004      	movs	r4, r0
 80199a8:	4099      	lsls	r1, r3
 80199aa:	3485      	adds	r4, #133	; 0x85
 80199ac:	34ff      	adds	r4, #255	; 0xff
 80199ae:	6865      	ldr	r5, [r4, #4]
 80199b0:	32fc      	adds	r2, #252	; 0xfc
 80199b2:	430d      	orrs	r5, r1
 80199b4:	6065      	str	r5, [r4, #4]
 80199b6:	9d01      	ldr	r5, [sp, #4]
 80199b8:	60d5      	str	r5, [r2, #12]
 80199ba:	2e02      	cmp	r6, #2
 80199bc:	d102      	bne.n	80199c4 <__register_exitproc+0x90>
 80199be:	68a2      	ldr	r2, [r4, #8]
 80199c0:	4311      	orrs	r1, r2
 80199c2:	60a1      	str	r1, [r4, #8]
 80199c4:	1c5a      	adds	r2, r3, #1
 80199c6:	6042      	str	r2, [r0, #4]
 80199c8:	3302      	adds	r3, #2
 80199ca:	9a00      	ldr	r2, [sp, #0]
 80199cc:	009b      	lsls	r3, r3, #2
 80199ce:	501a      	str	r2, [r3, r0]
 80199d0:	4b02      	ldr	r3, [pc, #8]	; (80199dc <__register_exitproc+0xa8>)
 80199d2:	6818      	ldr	r0, [r3, #0]
 80199d4:	f7ff fb17 	bl	8019006 <__retarget_lock_release_recursive>
 80199d8:	2000      	movs	r0, #0
 80199da:	e7ca      	b.n	8019972 <__register_exitproc+0x3e>
 80199dc:	20000a7c 	.word	0x20000a7c
 80199e0:	0801d1c4 	.word	0x0801d1c4
 80199e4:	08014ddd 	.word	0x08014ddd

080199e8 <_calloc_r>:
 80199e8:	b510      	push	{r4, lr}
 80199ea:	4351      	muls	r1, r2
 80199ec:	f7fb fa0a 	bl	8014e04 <_malloc_r>
 80199f0:	1e04      	subs	r4, r0, #0
 80199f2:	d01a      	beq.n	8019a2a <_calloc_r+0x42>
 80199f4:	0003      	movs	r3, r0
 80199f6:	3b08      	subs	r3, #8
 80199f8:	685a      	ldr	r2, [r3, #4]
 80199fa:	2303      	movs	r3, #3
 80199fc:	439a      	bics	r2, r3
 80199fe:	3a04      	subs	r2, #4
 8019a00:	2a24      	cmp	r2, #36	; 0x24
 8019a02:	d819      	bhi.n	8019a38 <_calloc_r+0x50>
 8019a04:	0003      	movs	r3, r0
 8019a06:	2a13      	cmp	r2, #19
 8019a08:	d90b      	bls.n	8019a22 <_calloc_r+0x3a>
 8019a0a:	2100      	movs	r1, #0
 8019a0c:	3308      	adds	r3, #8
 8019a0e:	6001      	str	r1, [r0, #0]
 8019a10:	6041      	str	r1, [r0, #4]
 8019a12:	2a1b      	cmp	r2, #27
 8019a14:	d905      	bls.n	8019a22 <_calloc_r+0x3a>
 8019a16:	6081      	str	r1, [r0, #8]
 8019a18:	60c1      	str	r1, [r0, #12]
 8019a1a:	2a24      	cmp	r2, #36	; 0x24
 8019a1c:	d007      	beq.n	8019a2e <_calloc_r+0x46>
 8019a1e:	0003      	movs	r3, r0
 8019a20:	3310      	adds	r3, #16
 8019a22:	2200      	movs	r2, #0
 8019a24:	601a      	str	r2, [r3, #0]
 8019a26:	605a      	str	r2, [r3, #4]
 8019a28:	609a      	str	r2, [r3, #8]
 8019a2a:	0020      	movs	r0, r4
 8019a2c:	bd10      	pop	{r4, pc}
 8019a2e:	0003      	movs	r3, r0
 8019a30:	6101      	str	r1, [r0, #16]
 8019a32:	3318      	adds	r3, #24
 8019a34:	6141      	str	r1, [r0, #20]
 8019a36:	e7f4      	b.n	8019a22 <_calloc_r+0x3a>
 8019a38:	2100      	movs	r1, #0
 8019a3a:	f7fb fc25 	bl	8015288 <memset>
 8019a3e:	e7f4      	b.n	8019a2a <_calloc_r+0x42>

08019a40 <_sbrk>:
 8019a40:	4b05      	ldr	r3, [pc, #20]	; (8019a58 <_sbrk+0x18>)
 8019a42:	0002      	movs	r2, r0
 8019a44:	6819      	ldr	r1, [r3, #0]
 8019a46:	2900      	cmp	r1, #0
 8019a48:	d101      	bne.n	8019a4e <_sbrk+0xe>
 8019a4a:	4904      	ldr	r1, [pc, #16]	; (8019a5c <_sbrk+0x1c>)
 8019a4c:	6019      	str	r1, [r3, #0]
 8019a4e:	6818      	ldr	r0, [r3, #0]
 8019a50:	1882      	adds	r2, r0, r2
 8019a52:	601a      	str	r2, [r3, #0]
 8019a54:	4770      	bx	lr
 8019a56:	46c0      	nop			; (mov r8, r8)
 8019a58:	20006d20 	.word	0x20006d20
 8019a5c:	200072e0 	.word	0x200072e0

08019a60 <_init>:
 8019a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a62:	46c0      	nop			; (mov r8, r8)
 8019a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a66:	bc08      	pop	{r3}
 8019a68:	469e      	mov	lr, r3
 8019a6a:	4770      	bx	lr

08019a6c <_fini>:
 8019a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a6e:	46c0      	nop			; (mov r8, r8)
 8019a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a72:	bc08      	pop	{r3}
 8019a74:	469e      	mov	lr, r3
 8019a76:	4770      	bx	lr
